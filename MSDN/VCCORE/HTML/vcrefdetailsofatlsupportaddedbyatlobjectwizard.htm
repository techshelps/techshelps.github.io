<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Details of ATL Support Added by the ATL Object Wizard</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_atl_Adding_Objects_and_Controls">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_atl_CComModule">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="vcrefdetailsofatlsupportaddedbyatlobjectwizard"></A>Details of ATL Support Added by the ATL Object Wizard</H1>

<P>When ATL support is added (using <A HREF="JavaScript:hhobj_1.Click()">ATL Object Wizard</A>) to an existing MFC executable or DLL, several modifications are made to the existing MFC project. These modifications are as follows (in this example, the project is called <CODE>MFCEXE</CODE>):

<UL type=disc>
	<LI>Two new files are added: an .idl file and an .rgs file, used to register the server.<BR><BR></LI>

	<LI>In the main application header and implementation files (Mfcexe.h and Mfcexe.cpp), a new class (derived from <A HREF="JavaScript:hhobj_2.Click()">CComModule</A>) is added with several methods that initialize and terminate the ATL support of the project. In addition to the new class, a new function (<CODE>InitATL</CODE>) is called from the <B>InitInstance</B> function of the application class to initialize ATL. Code is also added to the <B>ExitInstance</B> function for ATL termination. In the header file, support is added to track the attempt to initialize ATL. Finally, two new header files are included (Initguid.h and Mfcexe_i.c) in the implementation file, declaring and initializing the new GUIDs for the <B>CComModule</B>-derived class.<BR><BR></LI>

	<LI>To properly register the server, an entry for the new .rgs file is added to the project's resource file.<BR><BR></LI>

	<LI>In the Stdafx.h and Stdafx.cpp files, the <B>CComModule</B>-derived class (<CODE>CMfcExeModule</CODE>) is declared and defined and new files are included (Statreg.h and Atlimpl.h) for static registry of the ATL support.</LI>
</UL>

<H2>Notes for DLL Projects</H2>

<P>When you add ATL support to an MFC DLL project, you will see some differences. First, a global variable, <CODE>_Module</CODE>, of type <B>CComModule</B> is added. In addition, code is added to the <B>DLLRegisterServer</B> and <B>DLLUnregisterServer</B> functions for registering and unregistering the DLL.</P>

<P class=indent><B>Note</B>&nbsp;&nbsp;&nbsp;The ATL Object Wizard does not add entries to the DEF file for an MFC DLL. You must add these yourself.</P>

<P>If your project is a DLL COM server, you must export four functions by hand. To accomplish this, add the following to the EXPORTS section of your project's .def file:</P>

<PRE><CODE>DllCanUnloadNow    @1 PRIVATE
DllGetClassObject    @2 PRIVATE
DllRegisterServer    @3 PRIVATE
DllUnregisterServer    @4 PRIVATE
</CODE></PRE>
</font>
</BODY>
</HTML>

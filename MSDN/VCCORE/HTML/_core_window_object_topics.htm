<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Window Object Topics</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_CWnd">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_window_object_topics"></A>Window Object Topics</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_window_objects.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_window_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_mfc_tutorials_available.htm">Tutorial</A></P>

<P>A C++ window <I>object</I> (whether for a frame window or some other kind of window) is distinct from its corresponding Windows window (the <B>HWND</B>), but the two are tightly linked. A good understanding of <A HREF="_core_relationship_between_a_c.2b2b_.window_object_and_an_hwnd.htm">the relationship between a C++ window object and an HWND</A> is crucial for effective programming with MFC.</P>

<P>The general literature on programming for Windows is a good resource for learning how to use the <B>CWnd</B> member functions, which typically encapsulate the <B>HWND</B> APIs. See <A HREF="_core_books_that_help_you_learn_mfc.htm">Books That Help You Learn MFC</A>.</P>

<H2>Functions for Operating On a CWnd</H2>

<P><B>CWnd</B> and its <A HREF="_core_derived_window_classes.htm">derived classes</A> provide constructors, destructors, and member functions to initialize the object, create the underlying Windows structures, and access the encapsulated <B>HWND</B>. <B>CWnd</B> also provides member functions that encapsulate Windows APIs for sending messages, accessing the window’s state, converting coordinates, updating, scrolling, accessing the Clipboard, and many other tasks. Most Windows window-management APIs that take an <B>HWND</B> argument are encapsulated as member functions of <B>CWnd</B>. The names of the functions and their parameters are preserved in the <B>CWnd</B> member function. For details about the Windows APIs encapsulated by <B>CWnd</B>, see class <A HREF="JavaScript:hhobj_2.Click()">CWnd</A>.</P>

<H2>CWnd and Windows Messages</H2>

<P>One of the primary purposes of <B>CWnd</B> is to provide an interface for handling Windows messages, such as <B>WM_PAINT</B> or <B>WM_MOUSEMOVE</B>. Many of the member functions of <B>CWnd</B> are handlers for standard messages—those beginning with the identifier <B>afx_msg</B> and the prefix “On,” such as <B>OnPaint</B> and <B>OnMouseMove</B>. <A HREF="_core_message_handling_and_mapping_topics.htm">Message Handling and Mapping Topics</A> covers messages and message handling in detail. The information there applies equally to the framework’s windows and those that you create yourself for special purposes. </P>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_relationship_between_a_c.2b2b_.window_object_and_an_hwnd.htm">The relationship between a C++ window object and an HWND</A><BR><BR></LI>

	<LI><A HREF="_core_working_with_window_objects.htm">Working with windows of your own</A><BR><BR></LI>

	<LI><A HREF="_core_derived_window_classes.htm">Window classes derived from class CWnd</A><BR><BR></LI>

	<LI><A HREF="_core_registering_window_.93.classes.94.htm">Registering window “classes”</A> (as in Win32 SDK programming)<BR><BR></LI>

	<LI><A HREF="_core_general_window_creation_sequence.htm">General window creation sequence</A><BR><BR></LI>

	<LI><A HREF="_core_destroying_window_objects.htm">Destroying window objects</A><BR><BR></LI>

	<LI><A HREF="_core_device_contexts.htm">Device contexts</A>: objects that make Windows drawing device independent<BR><BR></LI>

	<LI><A HREF="_core_graphic_objects.htm">Graphic objects</A>: pens, brushes, fonts, bitmaps, palettes, regions<BR><BR></LI>

	<LI><A HREF="_core_one.2d.stage_and_two.2d.stage_construction_of_objects.htm">One-stage and two-stage construction of objects such as pens</A><BR><BR></LI>

	<LI><A HREF="_core_selecting_a_graphic_object_into_a_device_context.htm">Selecting a graphic object into a device context</A></LI>
</UL>
</font>
</BODY>
</HTML>

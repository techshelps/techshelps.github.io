<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>/Gd, /Gr, /Gz   (Calling Convention)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_compiling_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_.2f.gd.2c_2f.gr.2c_2f.gz"></A><SUP></SUP>/Gd, /Gr, /Gz&nbsp;&nbsp;&nbsp;(Calling Convention)</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_overviews.3a_.compiling_and_linking.htm">Overview</A>  |&nbsp; <A HREF="_core_set_compiler_options.htm">How Do I</A>  |&nbsp; <A HREF="_core_compiler_reference.htm">Compiler Options</A></P>

<P>The calling convention options determine the order in which arguments passed to functions are pushed onto the stack; which function, calling or called, removes the arguments from the stack; and the name-decorating convention that the compiler uses to identify individual functions. (To find the Calling Convention options in the development environment, click <B>Settings</B> on the <B>Project</B> menu. Then click the <B>C/C++</B> tab, and click <B>Code Generation </B>in the <B>Category </B>box.) </P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Command Line</B></TD>
<TD class=label width=25%><B>Project Settings</B></TD>
<TD class=label width=58%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>/Gd</TD>
<TD width=25%><B>__cdecl</B></TD>
<TD width=58%>Specifies the C calling convention for all functions that are not C++ member functions or are not marked as <B>__stdcall</B> or <B>__fastcall</B>. This is the default setting. </TD>
</TR>

<TR VALIGN="top">
<TD width=17%>/Gr</TD>
<TD width=25%><B>__fastcall</B></TD>
<TD width=58%>Specifies the __<B>fastcall </B>calling convention for all functions that are not C++ member functions or are not marked as <B>__cdecl</B> or <B>__stdcall</B>. All __<B>fastcall </B>functions must have prototypes. </TD>
</TR>

<TR VALIGN="top">
<TD width=17%>/Gz</TD>
<TD width=25%><B>__stdcall</B></TD>
<TD width=58%>Specifies the <B>__stdcall</B> calling convention for all prototyped C functions that do not take a variable number of arguments and are not marked as <B>__cdecl</B> or <B>__fastcall</B>. All <B>__stdcall</B> functions must have prototypes. </TD>
</TR>
</TABLE><BR>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;<B>x86 Specific —&gt;</B>By default, C++ member functions use a calling convention in cases where the member function’s <I>this</I> pointer is passed in the ECX register. All other arguments are pushed onto the stack from right to left, and the called routine pops the member function’s arguments from the stack. <B>END x86 Specific</B>&nbsp;&nbsp;&nbsp;A member function that is explicitly marked as <B>__cdecl</B>, <B>__fastcall</B>, or <B>__stdcall</B> uses the specified calling convention. A member function that takes a variable number of arguments always uses the <B>__cdecl</B> calling convention.</P>

<H3>__cdecl Specifics</H3>

<P>For C, the <B>__cdecl</B> naming convention uses the function name preceded by an underscore ( <B>_</B> );&nbsp; no case translation is performed. Unless declared as <B>extern</B> "C", C++ functions use a different name-decorating scheme. For more information on decorated names, see <A HREF="_core_decorated_names.htm">Decorated Names</A>. </P>

<H3>__fastcall Specifics</H3>

<P>Some of a __<B>fastcall </B>function’s arguments are passed in registers <B>x86 Specific —&gt; </B>ECX and EDX <B>END x86 Specific</B>, and the rest are pushed onto the stack from right to left. The called routine pops these arguments from the stack before it returns. Typically, /Gr decreases execution time.</P>

<P class=indent><B><B>Important</B></B>&nbsp;&nbsp;&nbsp;Be careful when using the __<B>fastcall </B>calling convention for any function written in inline assembly language. Your use of registers could conflict with the compiler’s use.</P>

<P>For C, the __<B>fastcall</B> naming convention uses the function name preceded by an at sign (<B>@</B>) followed by the size of the function’s arguments in bytes. No case translation is done. The compiler uses the following template for the naming convention:</P>

<PRE><CODE>@function_name@number</CODE></PRE>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Microsoft does not guarantee the same implementation of the __<B>fastcall</B> calling convention between compiler releases. For example, the implementation differs between the 16-bit and 32-bit compilers.</P>

<P>When using the __<B>fastcall</B> naming convention, use the standard include files. Otherwise, you will get unresolved external references.</P>

<H3>__stdcall Specifics</H3>

<P>A <B>__stdcall</B> function’s arguments are pushed onto the stack from right to left, and the called function pops these arguments from the stack before it returns.</P>

<P>For C, the <B>__stdcall</B> naming convention uses the function name preceded by an underscore ( <B>_</B> ) and followed by an at sign (@) and the size of the function’s arguments in bytes. No case translation is performed. The compiler uses the following template for the naming convention:</P>

<P><CODE>_functionname@number</CODE></P>

<P><B>x86 Specific —&gt;</B>This option has no effect on the name decoration of C++ methods and functions. Unless declared as <B>extern</B> "C", C++ methods and functions use a different name-decorating scheme. For more information on decorated names, see <A HREF="_core_decorated_names.htm">Decorated Names</A>. <B>END x86 Specific</B></P>
</font>
</BODY>
</HTML>

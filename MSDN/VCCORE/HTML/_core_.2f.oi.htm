<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>/Oi   (Generate Intrinsic Functions)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_compiling_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_.2f.oi"></A>/Oi&nbsp;&nbsp;&nbsp;(Generate Intrinsic Functions)</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_overviews.3a_.compiling_and_linking.htm">Overview</A>  |&nbsp; <A HREF="_core_set_compiler_options.htm">How Do I</A>  |&nbsp; <A HREF="_core_compiler_reference.htm">Compiler Options</A></P>

<P class=indent><B><B>Feature Only in Professional and Enterprise Editions</B></B>&nbsp;&nbsp;&nbsp;Code optimization is supported only in Visual C++ Professional and Enterprise Editions. For more information, see <A HREF="JavaScript:hhobj_2.Click()">Visual C++ Editions</A>.</P>

<P>This option replaces some function calls with intrinsic or otherwise special forms of the function that help your application run faster. Programs that use intrinsic functions are faster because they do not have the overhead of function calls, but may be larger because of the additional code created. See <A HREF="_predir_intrinsic.htm">#pragma intrinsic</A> for related information. </P>

<P>To find this option in the development environment, click <B>Settings</B> on the <B>Project</B> menu. Then click the <B>C/C++</B> tab, and click <B>Optimizations </B>in the <B>Category </B>box. Under <B>Optimizations</B>, click <B>Customize</B>. </P>

<P><B>x86 Specific</B></P>

<P>This option replaces the following function calls with their intrinsic (inline) forms:</P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD width=25%>_<B>disable</B></TD>
<TD width=25%>_<B>outp</B></TD>
<TD width=25%><B>abs</B></TD>
<TD width=25%><B>memset</B></TD>
</TR>

<TR VALIGN="top">
<TD width=25%>_<B>enable</B></TD>
<TD width=25%>_<B>outpw</B></TD>
<TD width=25%><B>fabs</B></TD>
<TD width=25%><B>strcat</B></TD>
</TR>

<TR VALIGN="top">
<TD width=25%>_<B>inp</B></TD>
<TD width=25%>_<B>rotl</B></TD>
<TD width=25%><B>labs</B></TD>
<TD width=25%><B>strcmp</B></TD>
</TR>

<TR VALIGN="top">
<TD width=25%>_<B>inpw</B></TD>
<TD width=25%>_<B>rotr</B></TD>
<TD width=25%>memcp</TD>
<TD width=25%>strcpy</TD>
</TR>

<TR VALIGN="top">
<TD width=25%>_lrotl</TD>
<TD width=25%>_strset</TD>
<TD width=25%>memcpy</TD>
<TD width=25%>strlen</TD>
</TR>

<TR VALIGN="top">
<TD width=25%>_lrotr</TD>
<TD width=25%>&nbsp;</TD>
<TD width=25%>&nbsp;</TD>
<TD width=25%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The _alloca and setjmp functions are always generated inline; this behavior is not affected by /Oi.</P>

<P>The floating-point functions listed below do not have true intrinsic forms. If you use the Generate Intrinsic Functions option, the listed functions are replaced with versions that pass arguments directly to the floating-point chip rather than pushing them onto the program stack:</P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD width=25%>acos</TD>
<TD width=25%>cosh</TD>
<TD width=25%>pow</TD>
<TD width=25%>tanh</TD>
</TR>

<TR VALIGN="top">
<TD width=25%>asin</TD>
<TD width=25%>fmod</TD>
<TD width=25%>sinh</TD>
<TD width=25%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P>The floating-point functions listed below have true intrinsic forms when you specify both /Oi and /Og (or any option that includes /Og: /Ox, /O1, and /O2):</P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD width=33%>atan</TD>
<TD width=33%>exp</TD>
<TD width=34%>sin</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>atan2</TD>
<TD width=33%>log</TD>
<TD width=34%>sqrt</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>cos</TD>
<TD width=33%>log10</TD>
<TD width=34%>tan</TD>
</TR>
</TABLE><BR>

<P>The intrinsic floating-point functions do not perform any special checks on input values and so work in restricted ranges of input, and have different exception handling and boundary conditions than the library routines with the same name. Using the true intrinsic forms implies loss of IEEE exception handling, and loss of _matherr and errno functionality; the latter implies loss of ANSI conformance. However, the intrinsic forms can considerably speed up floating-point intensive programs, and for many programs, the conformance issues are of little practical value. </P>

<P>You can use <A HREF="_core_.2f.op.htm">Improve Float Consistency (/Op)</A> or Disable Language Extensions (<A HREF="_core_.2f.za.2c_2f.ze.htm">/Za</A>) to override generation of true intrinsic floating-point options. In this case, the functions are generated as library routines that pass arguments directly to the floating-point chip instead of pushing them onto the program stack. </P>

<P><B>END x86 Specific</B></P>

<P>You also use <A HREF="_predir_intrinsic.htm">#pragma intrinsic</A> to create intrinsic functions, or <A HREF="_predir_function.htm">#pragma function</A> to explicitly force a function call. </P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_matherr</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__matherr"></A><SUP></SUP>_matherr</H1>

<P>Handles math errors.</P>

<P><B>int</B> <B>_matherr(</B> <B>struct</B> <B>_exception</B> <B>*</B><I>except</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=56%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_matherr</B></TD>
<TD width=27%>&lt;math.h&gt;</TD>
<TD width=56%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>_<B>matherr</B> returns 0 to indicate an error or a non-zero value to indicate success. If _<B>matherr</B> returns 0, an error message can be displayed, and <B>errno</B> is set to an appropriate error value. If _<B>matherr</B> returns a nonzero value, no error message is displayed, and <B>errno</B> remains unchanged.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>except</I></P>

<P class=indent>Pointer to structure containing error information</P>

<P class=label><B>Remarks</B></P>

<P>The _<B>matherr</B> function processes errors generated by the floating-point functions of the math library. These functions call _<B>matherr</B> when an error is detected.</P>

<P>For special error handling, you can provide a different definition of _<B>matherr</B>. If you use the dynamically linked version of the C run-time library (MSVCRT.DLL), you can replace the default _<B>matherr</B> routine in a client executable with a user-defined version. However, you cannot replace the default <B>_matherr</B> routine in a DLL client of MSVCRT.DLL.</P>

<P>When an error occurs in a math routine, _<B>matherr</B> is called with a pointer to an <B>_exception</B> type structure (defined in MATH.H) as an argument. The <B>_exception</B> structure contains the following elements:</P>

<P class=dt><B>int type</B></P>

<P class=indent>Exception type</P>

<P class=dt><B>char *name</B></P>

<P class=indent>Name of function where error occurred</P>

<P class=dt><B>double arg1</B>, <B>arg2</B></P>

<P class=indent>First and second (if any) arguments to function</P>

<P class=dt><B>double retval</B></P>

<P class=indent>Value to be returned by function</P>

<P>The <B>type</B> specifies the type of math error. It is one of the following values, defined in MATH.H:</P>

<P class=dt><B>_DOMAIN</B></P>

<P class=indent>Argument domain error.</P>

<P class=dt><B>_SING</B></P>

<P class=indent>Argument singularity.</P>

<P class=dt><B>_OVERFLOW</B></P>

<P class=indent>Overflow range error.</P>

<P class=dt><B>_PLOSS</B></P>

<P class=indent>Partial loss of significance.</P>

<P class=dt><B>_TLOSS</B></P>

<P class=indent>Total loss of significance.</P>

<P class=dt><B>_UNDERFLOW</B></P>

<P class=indent>The result is too small to be represented. (This condition is not currently supported.)</P>

<P>The structure member <B>name</B> is a pointer to a null-terminated string containing the name of the function that caused the error. The structure members <B>arg1</B> and <B>arg2</B> specify the values that caused the error. (If only one argument is given, it is stored in <B>arg1</B>.)</P>

<P>The default return value for the given error is <B>retval</B>. If you change the return value, it must specify whether an error actually occurred.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* MATHERR.C illustrates writing an error routine for math 
 * functions. The error function must be:
 *      _matherr
 */

#include &lt;math.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

void main()
{
    /* Do several math operations that cause errors. The _matherr
     * routine handles _DOMAIN errors, but lets the system handle
     * other errors normally.
     */
    printf( "log( -2.0 ) = %e\n", log( -2.0 ) );
    printf( "log10( -5.0 ) = %e\n", log10( -5.0 ) );
    printf( "log( 0.0 ) = %e\n", log( 0.0 ) );
}

/* Handle several math errors caused by passing a negative argument
 * to log or log10 (_DOMAIN errors). When this happens, _matherr
 * returns the natural or base-10 logarithm of the absolute value
 * of the argument and suppresses the usual error message.
 */
int _matherr( struct _exception *except )
{
    /* Handle _DOMAIN errors for log or log10. */
    if( except-&gt;type == _DOMAIN )
    {
        if( strcmp( except-&gt;name, "log" ) == 0 )
        {
            except-&gt;retval = log( -(except-&gt;arg1) );
            printf( "Special: using absolute value: %s: _DOMAIN "
                     "error\n", except-&gt;name );
            return 1;
        }
        else if( strcmp( except-&gt;name, "log10" ) == 0 )
        {
            except-&gt;retval = log10( -(except-&gt;arg1) );
            printf( "Special: using absolute value: %s: _DOMAIN "
                     "error\n", except-&gt;name );
            return 1;
        }
    }
    else
    {
        printf( "Normal: " );
        return 0;    /* Else use the default actions */
    }
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Special: using absolute value: log: _DOMAIN error
log( -2.0 ) = 6.931472e-001
Special: using absolute value: log10: _DOMAIN error
log10( -5.0 ) = 6.989700e-001
Normal: log( 0.0 ) = -1.#INF00e+000

</CODE></PRE>

<P><A HREF="_crt_floating.2d.point_support.htm">Floating-Point Support Routines</A>  |&nbsp; <A HREF="_crt_long_double.htm">Long Double Routines</A></P>
</font>
</BODY>
</HTML>

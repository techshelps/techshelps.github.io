<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_strdate, _wstrdate</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__strdate.2c_._wstrdate"></A><SUP></SUP>_strdate, _wstrdate</H1>

<P>Copy a date to a buffer.</P>

<P><B>char</B> <B>*_strdate(</B> <B>char</B> <B>*</B><I>datestr</I> <B>);</B></P>

<P><B>wchar_t</B> <B>*_wstrdate(</B> <B>wchar_t</B> <B>*</B><I>datestr</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=34%><B>Required Header</B></TD>
<TD class=label width=49%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_strdate</B></TD>
<TD width=34%>&lt;time.h&gt;</TD>
<TD width=49%>Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_wstrdate</B></TD>
<TD width=34%>&lt;time.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=49%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>Each of these functions returns a pointer to the resulting character string <I>datestr</I>.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>datestr</I></P>

<P class=indent>A pointer to a buffer containing the formatted date string</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_strdate</B> function copies a date to the buffer pointed to by <I>datestr,</I> formatted <I>mm</I>/<I>dd</I>/<I>yy</I>, where <I>mm</I> is two digits representing the month, <I>dd</I> is two digits representing the day, and <I>yy</I> is the last two digits of the year. For example, the string <CODE>12/05/99</CODE> represents December 5, 1999. The buffer must be at least 9 bytes long.</P>

<P><B>_wstrdate</B> is a wide-character version of <B>_strdate</B>; the argument and return value of <B>_wstrdate</B> are wide-character strings. These functions behave identically otherwise.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tstrdate</TD>
<TD width=29%>_strdate</TD>
<TD width=26%>_strdate</TD>
<TD width=28%>_wstrdate</TD>
</TR>
</TABLE><BR>

<P class=label><B>Example</B></P>

<PRE><CODE>/* TIMES.C illustrates various time and date functions including:
 *      time            _ftime          ctime       asctime
 *      localtime       gmtime          mktime      _tzset
 *      _strtime        _strdate        strftime
 *
 * Also the global variable:
 *      _tzname
 */

#include &lt;time.h&gt;
#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/timeb.h&gt;
#include &lt;string.h&gt;

void main()
{
    char tmpbuf[128], ampm[] = "AM";
    time_t ltime;
    struct _timeb tstruct;
    struct tm *today, *gmt, xmas = { 0, 0, 12, 25, 11, 93 };

    /* Set time zone from TZ environment variable. If TZ is not set,
     * the operating system is queried to obtain the default value 
     * for the variable. 
     */
    _tzset();

    /* Display operating system-style date and time. */
    _strtime( tmpbuf );
    printf( "OS time:\t\t\t\t%s\n", tmpbuf );
    _strdate( tmpbuf );
    printf( "OS date:\t\t\t\t%s\n", tmpbuf );

    /* Get UNIX-style time and display as number and string. */
    time( &amp;ltime );
    printf( "Time in seconds since UTC 1/1/70:\t%ld\n", ltime );
    printf( "UNIX time and date:\t\t\t%s", ctime( &amp;ltime ) );

    /* Display UTC. */
    gmt = gmtime( &amp;ltime );
    printf( "Coordinated universal time:\t\t%s", asctime( gmt ) );

    /* Convert to time structure and adjust for PM if necessary. */
    today = localtime( &amp;ltime );
    if( today-&gt;tm_hour &gt; 12 )
    {
   strcpy( ampm, "PM" );
   today-&gt;tm_hour -= 12;
    }
    if( today-&gt;tm_hour == 0 )  /* Adjust if midnight hour. */
   today-&gt;tm_hour = 12;

    /* Note how pointer addition is used to skip the first 11 
     * characters and printf is used to trim off terminating 
     * characters.
     */
    printf( "12-hour time:\t\t\t\t%.8s %s\n",
       asctime( today ) + 11, ampm );

    /* Print additional time information. */
    _ftime( &amp;tstruct );
    printf( "Plus milliseconds:\t\t\t%u\n", tstruct.millitm );
    printf( "Zone difference in seconds from UTC:\t%u\n", 
             tstruct.timezone );
    printf( "Time zone name:\t\t\t\t%s\n", _tzname[0] );
    printf( "Daylight savings:\t\t\t%s\n", 
             tstruct.dstflag ? "YES" : "NO" );

    /* Make time for noon on Christmas, 1993. */
    if( mktime( &amp;xmas ) != (time_t)-1 )
   printf( "Christmas\t\t\t\t%s\n", asctime( &amp;xmas ) );

    /* Use time structure to build a customized time string. */
    today = localtime( &amp;ltime );

    /* Use strftime to build a customized time string. */
    strftime( tmpbuf, 128,
         "Today is %A, day %d of %B in the year %Y.\n", today );
    printf( tmpbuf );
}


</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>OS time:                                21:51:03
OS date:                                05/03/94
Time in seconds since UTC 1/1/70:       768027063
UNIX time and date:                     Tue May 03 21:51:03 1994
Coordinated universal time:             Wed May 04 04:51:03 1994
12-hour time:                           09:51:03 PM
Plus milliseconds:                      279
Zone difference in seconds from UTC:    480
Time zone name:                         
Daylight savings:                       YES
Christmas                               Sat Dec 25 12:00:00 1993

Today is Tuesday, day 03 of May in the year 1994.

</CODE></PRE>

<P><A HREF="_crt_time_management.htm">Time Management Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_asctime.2c_._wasctime.htm">asctime</A>, <A HREF="_crt_ctime.2c_._wctime.htm">ctime</A>, <A HREF="_crt_gmtime.htm">gmtime</A>, <A HREF="_crt_localtime.htm">localtime</A>, <A HREF="_crt_mktime.htm">mktime</A>, <A HREF="_crt_time.htm">time</A>, <A HREF="_crt__tzset.htm">_tzset</A></P>
</font>
</BODY>
</HTML>

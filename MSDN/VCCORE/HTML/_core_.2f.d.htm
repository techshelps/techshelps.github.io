<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>/D   (Preprocessor Definitions)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_compiling_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_.2f.d"></A>/D&nbsp;&nbsp;&nbsp;(Preprocessor Definitions)</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_overviews.3a_.compiling_and_linking.htm">Overview</A>  |&nbsp; <A HREF="_core_set_compiler_options.htm">How Do I</A>  |&nbsp; <A HREF="_core_compiler_reference.htm">Compiler Options</A></P>

<P>This option defines symbols or constants for your source file.</P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=30%><B>Command Line</B></TD>
<TD class=label width=26%><B>Project Settings</B></TD>
<TD class=label width=44%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=30%>/D<I>name</I>[<B>=</B> | <B>#</B> [{<I>string</I> | <I>number</I>}] ]</TD>
<TD width=26%>Preprocessor Definitions</TD>
<TD width=44%>With one exception, defining symbols and constants with this option has the same effect as using a <B>#define</B> preprocessor directive at the beginning of your source file. If you use /D, quotes on the command line will be stripped whereas they are retained in a <B>#define</B> statement.<BR>
<BR>
The constant is defined until either an <B>#undef</B> directive in the source file removes the definition, or the compiler reaches the end of the file.</TD>
</TR>
</TABLE><BR>

<P>To find this option in the development environment, click <B>Settings</B> on the <B>Project</B> menu. Then click the <B>C/C++</B> tab, and click <B>Preprocessor </B>in the <B>Category </B>box. </P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The behavior of the Preprocessor Definitions text box differs from the behavior of the /D command-line option; you cannot use either an equal sign (=) or a number sign (#) to assign a value to symbols typed in the text box.</P>

<P>Use the constants created by the compiler and this option in combination with either the <B>#if</B> or <B>#ifdef</B> directive to compile source files conditionally.</P>

<P>You can redefine a keyword, identifier, or numeric constant that has been defined in a source file. If a constant defined in a /D option is also defined within the source file, CL uses the definition on the command line until it encounters a redefinition in the source file.&nbsp; </P>

<P>You can undefine a previous definition. To do so, use the /D option with a keyword, identifier, or numeric constant, and append an equal sign (=) followed by a space.</P>

<P>You cannot set the CL environment variable to a string that contains an equal sign. To use /D with the CL environment variable, specify a number sign instead of an equal sign:</P>

<PRE><CODE>SET CL "/DTEST#0"</CODE></PRE>

<H3>Examples</H3>

<P>The following command defines the symbol DEBUG in TEST.C:</P>

<PRE><CODE>CL /DDEBUG  TEST.C</CODE></PRE>

<P>The following command removes all occurrences of the keyword <B>__far</B> in TEST.C:</P>

<PRE><CODE>CL /D__far=  TEST.C</CODE></PRE>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_.2f.u.2c_2f.u.htm">Undefine Symbols (/U, /u)</A></P>
</font>
</BODY>
</HTML>

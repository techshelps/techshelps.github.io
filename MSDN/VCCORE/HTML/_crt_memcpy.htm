<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>memcpy</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_memcpy"></A><SUP></SUP>memcpy</H1>

<P>Copies characters between buffers.</P>

<P><B>void</B> <B>*memcpy(</B> <B>void</B> <B>*</B><I>dest</I><B>,</B> <B>const</B> <B>void</B> <B>*</B><I>src</I><B>,</B> <B>size_t</B> <I>count</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=28%><B>Required Header</B></TD>
<TD class=label width=55%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>memcpy</B></TD>
<TD width=28%>&lt;memory.h&gt; or &lt;string.h&gt;</TD>
<TD width=55%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>memcpy</B> returns the value of <I>dest.</I></P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>dest</I></P>

<P class=indent>New buffer</P>

<P class=dt><I>src</I></P>

<P class=indent>Buffer to copy from</P>

<P class=dt><I>count</I></P>

<P class=indent>Number of characters to copy</P>

<P class=label><B>Remarks</B></P>

<P>The <B>memcpy</B> function copies <I>count</I> bytes of <I>src</I> to <I>dest.</I> If the source and destination overlap, this function does not ensure that the original source bytes in the overlapping region are copied before being overwritten. Use <B>memmove</B> to handle overlapping regions.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* MEMCPY.C: Illustrate overlapping copy: memmove
 * handles it correctly; memcpy does not.
 */

#include &lt;memory.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

char string1[60] = "The quick brown dog jumps over the lazy fox";
char string2[60] = "The quick brown fox jumps over the lazy dog";
/*                           1         2         3         4         5
 *                  12345678901234567890123456789012345678901234567890
 */

void main( void )
{
   printf( "Function:\tmemcpy without overlap\n" );
   printf( "Source:\t\t%s\n", string1 + 40 );
   printf( "Destination:\t%s\n", string1 + 16 );
   memcpy( string1 + 16, string1 + 40, 3 );
   printf( "Result:\t\t%s\n", string1 );
   printf( "Length:\t\t%d characters\n\n", strlen( string1 ) );

   /* Restore string1 to original contents */
   memcpy( string1 + 16, string2 + 40, 3 );

   printf( "Function:\tmemmove with overlap\n" );
   printf( "Source:\t\t%s\n", string2 + 4 );
   printf( "Destination:\t%s\n", string2 + 10 );
   memmove( string2 + 10, string2 + 4, 40 );
   printf( "Result:\t\t%s\n", string2 );
   printf( "Length:\t\t%d characters\n\n", strlen( string2 ) );

   printf( "Function:\tmemcpy with overlap\n" );
   printf( "Source:\t\t%s\n", string1 + 4 );
   printf( "Destination:\t%s\n", string1 + 10 );
   memcpy( string1 + 10, string1 + 4, 40 );
   printf( "Result:\t\t%s\n", string1 );
   printf( "Length:\t\t%d characters\n\n", strlen( string1 ) );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Function:   memcpy without overlap
Source:      fox
Destination:   dog jumps over the lazy fox
Result:      The quick brown fox jumps over the lazy fox
Length:      43 characters

Function:   memmove with overlap
Source:      quick brown fox jumps over the lazy dog
Destination:   brown fox jumps over the lazy dog
Result:      The quick quick brown fox jumps over the lazy dog
Length:      49 characters

Function:   memcpy with overlap
Source:      quick brown dog jumps over the lazy fox
Destination:   brown dog jumps over the lazy fox
Result:      The quick quick brown dog jumps over the lazy fox
Length:      49 characters

</CODE></PRE>

<P><A HREF="_crt_buffer_manipulation.htm">Buffer Manipulation Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__memccpy.htm">_memccpy</A>, <A HREF="_crt_memchr.htm">memchr</A>, <A HREF="_crt_memcmp.htm">memcmp</A>, <A HREF="_crt_memmove.htm">memmove</A>, <A HREF="_crt_memset.htm">memset</A>, <A HREF="_crt_strcpy.2c_.wcscpy.2c_._mbscpy.htm">strcpy</A>, <A HREF="_crt_strncpy.2c_.wcsncpy.2c_._mbsncpy.htm">strncpy</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Optimization Switches</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_compiling_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_optimization_switches"></A>Optimization Switches</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_optimize_a_program.htm">How Do I</A>  |&nbsp; <A HREF="_core_optimization_articles.htm">Details</A></P>

<P class=indent><B><B>Feature Only in Professional and Enterprise Editions</B></B>&nbsp;&nbsp;&nbsp;Code optimization is supported only in Visual C++ Professional and Enterprise Editions. For more information, see <A HREF="JavaScript:hhobj_2.Click()">Visual C++ Editions</A>.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=30%><B>Switch</B></TD>
<TD class=label width=70%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.g.htm">/G5</A></TD>
<TD width=70%>Optimizes for Pentium processor.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.g.htm">/G6</A></TD>
<TD width=70%>Optimizes for Pentium Pro processor.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.g.htm">/GB</A></TD>
<TD width=70%>Optimizes the code created to favor the Pentium. It blends the optimizations for the 80386 (/G3), 80486 (/G4), Pentium (/G5), and Pentium Pro (/G6) options. </TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.g.htm">/G3</A></TD>
<TD width=70%>Optimizes for 80386 processor.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.g.htm">/G4</A></TD>
<TD width=70%>Optimizes for 80486 processor.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.gd.2c_2f.gr.2c_2f.gz.htm">/Gd</A></TD>
<TD width=70%>Specifies function calling conventions; not commonly used.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.ge.htm">/Ge</A></TD>
<TD width=70%>Enables stack probes for every function call that requires storage for local variables; not commonly used.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.gf.htm">/Gf</A></TD>
<TD width=70%>Copies identical strings into one location in the executable file.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.gf.htm">/GF</A></TD>
<TD width=70%>Same as /Gf but copies strings into read-only memory; the strings cannot be modified.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.gh.htm">/Gh</A></TD>
<TD width=70%>Calls a function (that you will write) at the beginning of every function call in your program. This will make your executable file larger and slower: a debug tool.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.gi.htm">/Gi</A></TD>
<TD width=70%>Controls the incremental compiler, which compiles only the functions that have changed since the last compile. The compilation is speedier but the executable file is larger: a debug tool.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.gm_minimal.htm">/Gm</A></TD>
<TD width=70%>Speeds build if project has many files that have not changed since last compile.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.gd.2c_2f.gr.2c_2f.gz.htm">/Gr</A></TD>
<TD width=70%>Specifies function calling conventions; not commonly used.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.gr_option.htm">/GR</A></TD>
<TD width=70%>Adds code to check object type at runtime. The executable file will be larger.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.gs.htm">/Gs</A></TD>
<TD width=70%>Controls stack probes; not commonly used.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.gx.htm">/GX</A></TD>
<TD width=70%>Controls whether destructors are called for automatic objects during a stack unwind that is caused by either a Windows NT-based structured exception or a C++ exception.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.gy.htm">/Gy</A></TD>
<TD width=70%>Allows compiler to package individual functions in the form of packaged functions (COMDATs).</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.gd.2c_2f.gr.2c_2f.gz.htm">/Gz</A></TD>
<TD width=70%>Specifies function calling conventions; not commonly used.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.o1.2c_2f.o2.htm">/O1</A></TD>
<TD width=70%>Optimizes for minimum size. Uses /Os as well as other switches.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.o1.2c_2f.o2.htm">/O2</A></TD>
<TD width=70%>Optimizes for maximum speed. Uses /Ot as well as other switches.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.oa.2c_2f.ow.htm">/Oa</A></TD>
<TD width=70%>Tells compiler that your program does not use “aliasing” (a name that refers to a memory location already referred to by a different name).</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.ob.htm">/Ob</A></TD>
<TD width=70%>Controls inline expansion of functions.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.od.htm">/Od</A></TD>
<TD width=70%>Disables optimizations. </TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.og.htm">/Og</A></TD>
<TD width=70%>Eliminates local and global common subexpressions, allows automatic register allocation, and allows loop optimization.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.oi.htm">/Oi</A></TD>
<TD width=70%>Replaces certain function calls with inline function expansion.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.op.htm">/Op</A></TD>
<TD width=70%>Ensures the precision of floating point operations. This is useful when you are concerned about error propagation and intermediate results of floating point operations. The following topics contain information on understanding floating point operations: <A HREF="_core_ieee_floating.2d.point_representation_and_microsoft_languages.htm">IEEE Floating-Point Representation and Microsoft Languages</A> and <A HREF="_core_why_floating_point_numbers_may_lose_precision.htm">Why Floating Point Numbers May Lose Precision</A>.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.os.htm">/Os</A></TD>
<TD width=70%>Favors smaller executable files.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.ot.htm">/Ot</A></TD>
<TD width=70%>Favors faster executable files.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.ox.htm">/Ox</A></TD>
<TD width=70%>Optimizes to use the fastest possible code. However, /O2 is recommended.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.oy.htm">/Oy</A></TD>
<TD width=70%>Suppresses creation of frame pointers on the call stack.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%><A HREF="_core_.2f.oa.2c_2f.ow.htm">/Ow</A></TD>
<TD width=70%>Tells compiler that your program does not use aliasing.</TD>
</TR>
</TABLE><BR>
</font>
</BODY>
</HTML>

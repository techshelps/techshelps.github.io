<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_snprintf, _snwprintf</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__snprintf.2c_._snwprintf"></A><SUP></SUP>_snprintf, _snwprintf</H1>

<P>Write formatted data to a string.</P>

<P><B>int</B> <B>_snprintf(</B> <B>char</B> <B>*</B><I>buffer</I><B>,</B> <B>size_t</B> <I>count</I><B>,</B> <B>const</B> <B>char</B> <B>*</B><I>format</I> [<B>,</B> <I>argument</I>] ... <B>);</B></P>

<P><B>int</B> <B>_snwprintf(</B> <B>wchar_t</B> <B>*</B><I>buffer</I><B>,</B> <B>size_t</B> <I>count</I><B>,</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>format</I> [<B>,</B> <I>argument</I>] ... <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=35%><B>Required Header</B></TD>
<TD class=label width=48%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_snprintf</B></TD>
<TD width=35%>&lt;stdio.h&gt;</TD>
<TD width=48%>Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_snwprintf</B></TD>
<TD width=35%>&lt;stdio.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=48%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>_snprintf</B> returns the number of bytes stored in <I>buffer</I>, not counting the terminating null character. If the number of bytes required to store the data exceeds <I>count</I>, then <I>count</I> bytes of data are stored in <I>buffer</I> and a negative value is returned. <B>_snwprintf</B> returns the number of wide characters stored in <I>buffer,</I> not counting the terminating null wide character. If the storage required to store the data exceeds <I>count</I> wide characters, then <I>count</I> wide characters are stored in <I>buffer</I> and a negative value is returned.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>buffer</I></P>

<P class=indent>Storage location for output</P>

<P class=dt><I>count</I></P>

<P class=indent>Maximum number of characters to store</P>

<P class=dt><I>format</I></P>

<P class=indent>Format-control string</P>

<P class=dt><I>argument</I></P>

<P class=indent>Optional arguments</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_snprintf</B> function formats and stores <I>count</I> or fewer characters and values (including a terminating null character that is always appended unless <I>count</I> is zero or the formatted string length is greater than or equal to <I>count</I> characters) in <I>buffer</I>. Each <I>argument</I> (if any) is converted and output according to the corresponding format specification in <I>format</I>. The format consists of ordinary characters and has the same form and function as the <I>format</I> argument for <A HREF="_crt_printf.2c_.wprintf.htm">printf</A>. If copying occurs between strings that overlap, the behavior is undefined.</P>

<P><B>_snwprintf</B> is a wide-character version of <B>_snprintf</B>; the pointer arguments to <B>_snwprintf</B> are wide-character strings. Detection of encoding errors in <B>_snwprintf</B> may differ from that in <B>_snprintf</B>. <B>_snwprintf</B>, like <B>swprintf</B>, writes output to a string rather than to a destination of type <B>FILE</B>.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_sntprintf</TD>
<TD width=29%>_snprintf</TD>
<TD width=26%>_snprintf</TD>
<TD width=28%>_snwprintf</TD>
</TR>
</TABLE><BR>

<P class=label><B>Example</B></P>

<PRE><CODE>/* SPRINTF.C: This program uses sprintf to format various
 * data and place them in the string named buffer.
 */

#include &lt;stdio.h&gt;

void main( void )
{
   char  buffer[200], s[] = "computer", c = 'l';
   int   i = 35, j;
   float fp = 1.7320534f;

   /* Format and print various data: */
   j  = sprintf( buffer,     "\tString:    %s\n", s );
   j += sprintf( buffer + j, "\tCharacter: %c\n", c );
   j += sprintf( buffer + j, "\tInteger:   %d\n", i );
   j += sprintf( buffer + j, "\tReal:      %f\n", fp );

   printf( "Output:\n%s\ncharacter count = %d\n", buffer, j );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Output:
   String:    computer
   Character: l
   Integer:   35
   Real:      1.732053

character count = 71

</CODE></PRE>

<P><A HREF="_crt_stream_i.2f.o.htm">Stream I/O Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_sprintf.2c_.swprintf.htm">sprintf</A>, <A HREF="_crt_fprintf.2c_.fwprintf.htm">fprintf</A>, <A HREF="_crt_printf.2c_.wprintf.htm">printf</A>, <A HREF="_crt_scanf.2c_.wscanf.htm">scanf</A>, <A HREF="_crt_sscanf.2c_.swscanf.htm">sscanf</A>, <A HREF="_crt_vprintf_functions.htm">vprintf Functions</A></P>
</font>
</BODY>
</HTML>

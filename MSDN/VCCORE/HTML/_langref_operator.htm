<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>operator</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_operator"></A><SUP></SUP>operator</H1>

<P><B>C++ Specific —&gt;</B></P>

<P><I>type</I> <B>operator</B> <I>operator-symbol</I> <B>(</B> <I>parameter-list</I> <B>)</B></P>

<P>The <B>operator</B> keyword declares a function specifying what <I>operator-symbol</I> means when applied to instances of a class. This gives the operator more than one meaning, or "overloads" it. The compiler distinguishes between the different meanings of an operator by examining the types of its operands.</P>

<P class=label><B>Rules of Operator Overloading</B>

<UL type=disc>
	<LI>You can overload the following operators:
<TABLE border=1 cellpadding=5 cols=6 frame=below rules=rows>

<TR VALIGN="top">
<TD width=14%><B>+</B></TD>
<TD width=14%><B>-</B></TD>
<TD width=18%><B>*</B></TD>
<TD width=22%><B>/</B></TD>
<TD width=16%><B>%</B></TD>
<TD width=16%><B>^</B></TD>
</TR>

<TR VALIGN="top">
<TD width=14%><B>!</B></TD>
<TD width=14%><B>=</B></TD>
<TD width=18%><B>&lt;</B></TD>
<TD width=22%><B>&gt;</B></TD>
<TD width=16%><B>+=</B></TD>
<TD width=16%><B>–=</B></TD>
</TR>

<TR VALIGN="top">
<TD width=14%><B>^=</B></TD>
<TD width=14%><B>&amp;=</B></TD>
<TD width=18%><B>|=</B></TD>
<TD width=22%><B>&lt;&lt;</B></TD>
<TD width=16%><B>&gt;&gt;</B></TD>
<TD width=16%><B>&lt;&lt;=</B></TD>
</TR>

<TR VALIGN="top">
<TD width=14%><B>&lt;=</B></TD>
<TD width=14%><B>&gt;=</B></TD>
<TD width=18%><B>&amp;&amp;</B></TD>
<TD width=22%><B>||</B></TD>
<TD width=16%><B>++</B></TD>
<TD width=16%><B>––</B></TD>
</TR>

<TR VALIGN="top">
<TD width=14%><B>( )</B></TD>
<TD width=14%><B>[ ]</B></TD>
<TD width=18%><B>new</B></TD>
<TD width=22%><B>delete</B></TD>
<TD width=16%><B>&amp;</B></TD>
<TD width=16%><B>|</B></TD>
</TR>

<TR VALIGN="top">
<TD width=14%><B>~</B></TD>
<TD width=14%><B>*=</B></TD>
<TD width=18%><B>/=</B></TD>
<TD width=22%><B>%=</B></TD>
<TD width=16%><B>&gt;&gt;=</B></TD>
<TD width=16%><B>==</B></TD>
</TR>

<TR VALIGN="top">
<TD width=14%><B>!=</B></TD>
<TD width=14%><B>,</B></TD>
<TD width=18%><B>–&gt;</B></TD>
<TD width=22%><B>–&gt;*</B></TD>
<TD width=16%>&nbsp;</TD>
<TD width=16%>&nbsp;</TD>
</TR>
</TABLE><BR>
</LI>

	<LI>If an operator can be used as either a unary or a binary operator, you can overload each use separately.<BR><BR></LI>

	<LI>You can overload an operator using either a nonstatic member function or a global function that's a friend of a class. A global function must have at least one parameter that is of class type or a reference to class type.<BR><BR></LI>

	<LI>If a unary operator is overloaded using a member function, it takes no arguments. If it is overloaded using a global function, it takes one argument.<BR><BR></LI>

	<LI>If a binary operator is overloaded using a member function, it takes one argument. If it is overloaded using a global function, it takes two arguments.</LI>
</UL>

<P class=label><B>Restrictions on Operator Overloading</B>

<UL type=disc>
	<LI>You cannot define new operators, such as **.<BR><BR></LI>

	<LI>You cannot change the precedence or grouping of an operator, nor can you change the numbers of operands it accepts.<BR><BR></LI>

	<LI>You cannot redefine the meaning of an operator when applied to built-in data types.<BR><BR></LI>

	<LI>Overloaded operators cannot take default arguments.<BR><BR></LI>

	<LI>You cannot overload any preprocessor symbol, nor can you overload the following operators:
<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD width=20%><B>.</B></TD>
<TD width=27%><B>.*</B></TD>
<TD width=26%><B>::</B></TD>
<TD width=27%><B>?:</B></TD>
</TR>
</TABLE><BR>
</LI>

	<LI>The assignment operator has some additional restrictions. It can be overloaded only as a nonstatic member function, not as a friend function. It is the only operator that cannot be inherited; a derived class cannot use a base class's assignment operator.</LI>
</UL>

<P>For more information, see <A HREF="_langref_c.2f.c.2b2b_.operators.htm">C/C++ Operators</A> and <A HREF="_langref_operator_precedence_and_associativity.htm">Operator Precedence Table</A>.</P>

<P><B>END C++ Specific</B></P>

<P class=label><B>Example</B></P>

<P>The following example overloads the <B>+</B> operator to add two complex numbers and returns the result.</P>

<PRE><CODE>// Example of the operator keyword
class Complex
{
public:
   Complex( float re, float im );
   Complex operator+( Complex &amp;other );
   friend Complex operator+( int first, Complex &amp;second );
private:
   float real, imag;
};

// Operator overloaded using a member function
Complex Complex::operator+( Complex &amp;other )
{
return Complex( real + other.real, imag + other.imag );
};

// Operator overloaded using a friend function
Complex operator+( int first, Complex &amp;second )
{
return Complex( first + second.real, second.imag );
}</CODE></PRE>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Managing Required and Optional Parameters</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CHttpServer">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CHttpServerContext">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CHtmlStream">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_ON_PARSE_COMMAND">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_DEFAULT_PARSE_COMMAND">
</OBJECT>
</TD></TR></TABLE>
<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_managing_required_and_optional_parameters"></A>Managing Required and Optional Parameters</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_internet_support.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_internet_tasks.htm">How Do I</A></P>

<P>This part of the example examines the technique of setting the parse map’s parameters as optional and how to handle data provided to an optional parameter. It also discusses the pitfalls of setting all parameters as required or all parameters as optional. Finally, it describes possible errors from failing to match the parameters with specified defaults.</P>

<P>In the example, the server <CODE>MOOSE</CODE> contains the DLL <CODE>SURVEY.DLL</CODE>, which contains the <B>CHttpServer</B> object <CODE>CServerDerived</CODE>. The client could use the following URL to invoke the <CODE>RegisterUser</CODE> command:</P>

<PRE><CODE>http://moose/survey/survey.dll?RegisterUser?Richard&amp;M%2E&amp;Jones
</CODE></PRE>

<P>This command calls the member function <CODE>RegisterUser</CODE> with the parameters “Richard”, “M.”, and “Jones” for the <I>pstrFirst</I>, <I>pstrMiddle</I>, and <I>pstrLast</I> parameters, respectively.</P>

<P>Suppose the client used the following URL to call the <CODE>RegisterUser</CODE> function:</P>

<PRE><CODE>http://moose/survey/survey.dll?RegisterUser?Richard&amp;Jones
</CODE></PRE>

<P>Such a call would get an error from the server because in this example all three parameters — <I>pstrFirst</I>, <I>pstrMiddle</I>, and <I>pstrLast</I> — are required. You can make parameters optional by specifying defaults for them in the <B>ON_PARSE_COMMAND_PARAMS</B> macro. This map makes all of the parameters optional:</P>

<PRE><CODE>BEGIN_PARSE_MAP(CServerDerived, CHttpServer)
ON_PARSE_COMMAND(RegisterUser, CServerDerived, ITS_PSTR ITS_PSTR ITS_PSTR)
ON_PARSE_COMMAND_PARAMS("First=~ Middle=~ Last=~")
END_PARSE_MAP(CServerDerived)
</CODE></PRE>

<P>The default parameters specified above are tildes, an easily identifiable character you can test for in your handling function. </P>

<P>If the client invokes <CODE>RegisterUser</CODE> by using the following URL:</P>

<PRE><CODE>http://moose/survey/survey.dll?RegisterUser?Richard
</CODE></PRE>

<P>when you have the above map installed, the second and third parameters are resolved as tildes.</P>

<P>If the client invokes <CODE>RegisterUser</CODE> by using the following URL:</P>

<PRE><CODE>http://moose/survey/survey.dll?RegisterUser?Richard&amp;M%2E&amp;Jones
</CODE></PRE>

<P>when you have the above map installed, all three parameters to the <CODE>RegisterUser</CODE> function will resolve correctly. </P>

<P>You can make some parameters optional and some parameters required, but the required parameters must always appear first&nbsp;? before any optional parameters. For example, you can modify the map to indicate that only the parameter for the middle name is optional:</P>

<PRE><CODE>BEGIN_PARSE_MAP(CServerDerived, CHttpServer)
ON_PARSE_COMMAND(RegisterUser, CServerDerived, ITS_PSTR ITS_PSTR ITS_PSTR)
ON_PARSE_COMMAND_PARAMS("Last First Middle=~")
END_PARSE_MAP(CServerDerived)
</CODE></PRE>

<P>Take care that the parameter types you specify match the parameter defaults you specify. You can accept both a string and an integer, for example,</P>

<PRE><CODE>BEGIN_PARSE_MAP(CServerDerived, CHttpServer)
ON_PARSE_COMMAND(Enlist, CServerDerived, ITS_PSTR ITS_I4)
ON_PARSE_COMMAND_PARAMS("Title=Developer Level=14")
END_PARSE_MAP(CServerDerived)
</CODE></PRE>

<P>and produce the expected results. But if you were to reverse the two parameters, like this:</P>

<PRE><CODE>BEGIN_PARSE_MAP(CServerDerived, CHttpServer)
ON_PARSE_COMMAND(Enlist, CServerDerived, ITS_PSTR ITS_I4)
ON_PARSE_COMMAND_PARAMS("Level=14 Title=Developer")
END_PARSE_MAP(CServerDerived)
</CODE></PRE>

<P>the default parameter for what you expected to be the level would be 0 and the title would be the string “14”.</P>

<P>To add a space to a default string, enclose the string in single quotation marks. You don’t need to escape special characters.</P>

<PRE><CODE>ON_PARSE_COMMAND_PARAMS("Title='Technical Writer' Level=14")
</CODE></PRE>

<P>When passing an unknown number of parameters to the ISAPI extension, use the symbol ITS_RAW. For example, if your web page has a selection list from which one or more items can be selected, the following ON_PARSE_COMMAND specification is not appropriate, because its parameter list specifies that it receive exactly two pointers to strings:</P>

<PRE><CODE>ON_PARSE_COMMAND(Enlist, CServerDerived, ITS_PSTR ITS_PSTR)
</CODE></PRE>

<P>If the ISAPI extension were to receive more or fewer than the specified number of parameters, an error will occur on the server. When the number of parameters to be passed is uncertain, you should call ON_PARSE_COMMAND with ITS_RAW. Note that you do not call ON_PARSE_COMMAND_PARAMS when parsing raw data. However, you must call DEFAULT_PARSE_COMMAND to specify the function that will pass the raw data:</P>

<PRE><CODE>BEGIN_PARSE_MAP(CDerivedExtension, CHttpServer)
DEFAULT_PARSE_COMMAND(Myfunc, CDerivedExtension)
ON_PARSE_COMMAND(Myfunc, CDerivedExtension, ITS_RAW)
END_PARSE_MAP(CDerivedExtension)
</CODE></PRE>

<P>Use the following function prototype to send the data:</P>

<PRE><CODE>void CDerivedClass::Myfunc(CHttpServerContext* pCtxt, void* pVoid, DWORD dwBytes);
</CODE></PRE>

<P>The <I>pVoid</I> pointer points to the data sent to your extension. The <I>dwBytes</I> parameter has a count of bytes at <I>pVoid</I>. If <I>dwBytes</I> is zero, it might indicate that <I>pVoid</I> points to nothing.</P>

<P>If the client invokes <CODE>RegisterUser</CODE> by using the following URL:</P>

<PRE><CODE>http://mooseboy/derived.dll?Myfunc&amp;selection=10&amp;selection=35&amp;confirm=y
</CODE></PRE>

<P>Myfunc would be called with <I>pVoid</I> pointing to the string "Myfunc&amp;selection=10&amp;selection=35&amp;confirm=y" and <I>dwBytes</I> containing 42. Note that <I>dwBytes</I> does not count the trailing nul byte in the data referenced by <I>pVoid</I>, because <I>pVoid</I> points to exactly what the client sent to the extension. The client might or might not have sent a trailing nul byte, or it might have sent more than one nul byte in the data.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="JavaScript:hhobj_2.Click()">CHttpServer</A>, <A HREF="JavaScript:hhobj_3.Click()">CHttpServerContext</A>, <A HREF="JavaScript:hhobj_4.Click()">CHtmlStream</A>, <A HREF="JavaScript:hhobj_5.Click()">ON_PARSE_COMMAND</A>,&nbsp; <A HREF="JavaScript:hhobj_6.Click()">DEFAULT_PARSE_COMMAND</A>, <A HREF="_core_internet.3a_.where_is.......htm">Internet: Where Is...</A></P>
</font>
</BODY>
</HTML>

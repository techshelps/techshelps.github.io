<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Being a Drop Target</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_being_a_drop_target"></A>Being a Drop Target</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_win32_programming.3a_.overview.htm">Overview</A> |&nbsp; <A HREF="_core_win32_programming_tasks.htm">How Do I</A></P>

<P>Because DRAWCLI is an OLE container, it needs drop target functionality to meet the Windows 95 requirements. (Conversely, an OLE server needs drop source functionality.) </P>

<P>MFC provides support for drop-target functionality through the <B>COleDropTarget</B> class and certain member functions in the <B>CView</B> class. Being a drop target involves the following tasks:

<UL type=disc>
	<LI>Registering your window as a drop target.<BR><BR></LI>

	<LI>Checking a <B>COleDataObject</B> object to see if you can accept a drop operation from it.<BR><BR></LI>

	<LI>Providing target feedback for the user. <BR><BR></LI>

	<LI>Scrolling the document when the mouse cursor moves near the border of the document window.<BR><BR></LI>

	<LI>Performing a paste operation from a <B>COleDataObject</B> object.</LI>
</UL>

<P>Most of these tasks are application-specific, so MFC can’t complete them for you. However, MFC does provide support for scrolling a document during a drag-and-drop operation, which is traditionally one of the more difficult tasks involved in being a drop target. The following sections describe how the other tasks are completed by the DRAWCLI sample. </P>

<P>One requirement for being a drop target was already satisfied by the previous version of DRAWCLI: the ability to perform a paste operation from a <B>COleDataObject</B> object. The previous version of DRAWCLI allowed OLE embedded objects to be inserted with the Paste command; the new version of DRAWCLI takes advantage of this fact by reusing the existing <CODE>CDrawView::PastEmbedded</CODE> function. If your container application doesn’t support this use of the Paste command, you should add that before implementing drop-target functionality. For information on creating embedded objects with the Paste command, see <A HREF="_core_data_objects_and_data_sources_.28.ole.29.htm">Data Objects and Data Sources (OLE)</A> and <A HREF="_core_clipboard.3a_.copying_and_pasting_data.htm">Clipboard: Copying and Pasting Data</A>.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>vtordisp</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_predir_vtordisp"></A>vtordisp</H1>

<P><B>C++ Specific —&gt;</B></P>

<P><B>#pragma vtordisp(</B>{<B>on</B> | <B>off</B>} <B>)</B></P>

<P>Enables the addition of the hidden vtordisp construction/destruction displacement member. The <B>vtordisp</B> pragma is applicable only to code that uses virtual bases. If a derived class overrides a virtual function that it inherits from a virtual base class, and if a constructor or destructor for the derived class calls that function using a pointer to the virtual base class, the compiler may introduce additional hidden “vtordisp” fields into classes with virtual bases. </P>

<P>The <B>vtordisp</B> pragma affects the layout of classes that follow it. The <A HREF="_core_.2f.vd.htm">/vd0 and /vd1</A> options specify the same behavior for complete modules. Specifying <B>off</B> suppresses the hidden vtordisp members. Specifying <B>on</B>, the default, enables them where they are necessary. Turn off <B>vtordisp</B> only if there is no possibility that the class’s constructors and destructors call virtual functions on the object pointed to by the <B>this</B> pointer.\</P>

<PRE><CODE>#pragma vtordisp( off )
class GetReal : virtual public { ... };
#pragma vtordisp( on )
</CODE></PRE>

<P><B>END C++ Specific</B></P>
</font>
</BODY>
</HTML>

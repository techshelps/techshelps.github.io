<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>$$IF, $$ELIF, $$ELSE, and $$ENDIF</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_begin_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_sample_appwiz_CUSTOMWZ">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_if_elif_else_endif"></A>$$IF, $$ELIF, $$ELSE, and $$ENDIF</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_appwizard_programming_reference.htm">Overviews</A>  |&nbsp; <A HREF="_core_creating_custom_appwizards.htm">How Do I</A> |&nbsp; <A HREF="_core_details.3a_.beginning_your_program.htm">Details</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Sample</A></P>

<P><B><B>Feature Only in Professional and Enterprise Editions</B></B>&nbsp;&nbsp;&nbsp;Creating a Custom AppWizard is supported only in Visual C++ Professional and Enterprise Editions. For more information, see <A HREF="JavaScript:hhobj_3.Click()">Visual C++ Editions</A>.</P>

<P><B>$$IF(</B><I>macro-list</I><B>)</B></P>

<P><I>textA</I></P>

<P><B>&nbsp;$$ELIF(</B><I>macro-list</I><B>)</B></P>

<P><I>textB</I></P>

<P><B>$$ELSE</B></P>

<P><I>textC</I></P>

<P><B>$$ENDIF</B></P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>macro-list</I></P>

<P class=indent>One or more macro names. A macro name can be preceded by the logical NOT operator (<B>!</B>). Multiple macro names are separated by the logical OR (<B>||</B>) operator. A macro name can be one of the <A HREF="_core_standard_appwizard_macros.htm">standard MFC AppWizard macros</A> or one that you create by adding it to <A HREF="_core_ccustomappwiz.3a3a.m_dictionary.htm">the dictionary</A>. </P>

<P class=label><B>Remarks</B></P>

<P>The <B>$$IF</B> directive, with the <B>$$ELIF</B>, <B>$$ELSE</B>, and <B>$$ENDIF</B> directives, controls the flow of control that the <A HREF="_core_ccustomappwiz.3a3a.processtemplate.htm">ProcessTemplate</A> function follows while parsing a custom resource template.</P>

<P>When the parser encounters an <B>$$IF</B> directive, it searches the dictionary for each macro name it finds in <I>macro-list</I>, in sequential order. The parser checks only for a macro name’s existence in the dictionary, not its value. Once a macro name is found in the dictionary, the parser stops checking the other macro names, the <B>$$IF</B> evaluates to TRUE, and <I>textA </I>is parsed. If the parser finds none of the macro names in the dictionary, the <B>$$IF</B> evaluates to FALSE and the parser processes any subsequent <B>$$ELIF</B> directive’s <I>macro-list</I> as it did the <B>$$IF</B> <I>macro-list</I>. If an <B>$$ELIF</B> evaluates to TRUE, <I>textB </I>is parsed. If no <B>$$ELIF</B> directive evaluates to TRUE, the <B>$$ELSE</B> body (<I>textC) </I>is parsed<I>.</I> The <B>$$ENDIF</B> directive marks the end of the <B>$$IF</B> construct, and normal parsing resumes with the next line.</P>

<P>In the <B>$$IF</B> and <B>$$ELIF</B> arguments, any macro name can be preceded by the logical NOT operator (<B>!</B>) to force the parser to check for non-existence in the dictionary. For example, the following code fragment evaluates to true if MACRO1 is not in the dictionary:</P>

<PRE><CODE>$$IF(!MACRO1)
</CODE></PRE>

<P>Each <B>$$IF</B> directive in a <A HREF="_core_understanding_custom_resource_templates.htm">custom resource template</A> must be matched by a closing <B>$$ENDIF</B> directive. Multiple <B>$$ELIF</B> directives can appear between the <B>$$IF</B> and <B>$$ENDIF</B> directives, but at most one <B>$$ELSE</B> directive is allowed. That <B>$$ELSE</B> directive, if present, must follow all the <B>$$ELIF</B>s (if any) in that <B>$$IF</B>-<B>$$ENDIF</B> block. If a custom resource template contains an <B>$$IF</B>, any following <B>$$ELIF</B> and/or <B>$$ELSE</B> is optional. An ending <B>$$ENDIF</B> is mandatory. <B>$$IF</B> constructs can be nested up to five levels deep.</P>

<P>There is no logical AND (<B>&amp;&amp;</B>) operator. If you wish to have text parsed only when MACRO1 and MACRO2 are defined, you can accomplish this as follows: </P>

<PRE><CODE>   $$IF(MACRO1)
   $$IF(MACRO2)
   <I>text</I>
<I>   </I>$$ENDIF //MACRO2
   $$ENDIF //MACRO1
</CODE></PRE>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_standard_appwizard_directives.htm">Standard AppWizard Directives</A>, <A HREF="_core_ccustomappwiz.3a3a.m_dictionary.htm">The Dictionary</A>, <A HREF="_core_ccustomappwiz.3a3a.processtemplate.htm">CCustomAppWiz::ProcessTemplate</A>, <A HREF="_core_standard_appwizard_directives.htm">Standard AppWizard Directives</A>, <A HREF="_core_standard_appwizard_macros.htm">Standard AppWizard Macros</A></P>
</font>
</BODY>
</HTML>

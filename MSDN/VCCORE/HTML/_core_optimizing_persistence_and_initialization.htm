<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Optimizing Persistence and Initialization</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="circle sample start">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CPropExchange.3a3a.GetVersion">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_COleControl.3a3a.OnResetState">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_optimizing_persistence_and_initialization"></A>Optimizing Persistence and Initialization</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex_controls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_control_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions_about_activex_controls.htm">FAQ</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_activex_control_sample_list.htm">Sample</A></P>

<P>By default, persistence and initialization in a control are handled by the <CODE>DoPropExchange</CODE> member function. In a typical control, this function contains calls to several <B>PX_</B> functions (<B>PX_Color</B>, <B>PX_Font</B>, and so on), one for each property.</P>

<P>This approach has the advantage that a single <CODE>DoPropExchange</CODE> implementation can be used for initialization, for persistence in binary format, and for persistence in the so-called “property-bag” format used by some containers. This one function provides all information about the properties and their default values in one convenient place.</P>

<P>However, this generality comes at the expense of efficiency. The <B>PX_</B> functions get their flexibility through multilayered implementations that are inherently less efficient than more direct, but less flexible, approaches. Furthermore, if a control passes a default value to a <B>PX_</B> function, that default value must be provided every time, even in situations when the default value may not necessarily be used. If generating the default value is a nontrivial task (for example, when the value is obtained from an ambient property), then extra, unnecessary work is done in cases where the default value is not used.</P>

<P>You can improve your control’s binary persistence performance by overriding your control's <CODE>Serialize</CODE> function. The default implementation of this member function makes a call to your <CODE>DoPropExchange</CODE> function. By overriding it, you can provide a more direct implementation for binary persistence. For example, consider this <CODE>DoPropExchange</CODE> function:</P>

<PRE><CODE>void CMyCtrl::DoPropExchange(CPropExchange* pPX)
{
   ExchangeVersion(pPX, MAKELONG(_wVerMinor, _wVerMajor));
   COleControl::DoPropExchange(pPX);

   PX_Bool(pPX, _T("BoolProp"), m_boolProp, TRUE);
   PX_Short(pPX, _T("ShortProp"), m_shortProp, 0);
   PX_Color(pPX, _T("ColorProp"), m_colorProp, RGB(0xFF,0x00,0x00));
   PX_String(pPX, _T("StringProp"), m_stringProp, _T(""));
}
</CODE></PRE>

<P>To improve the performance of this control’s binary persistence, you can override the <CODE>Serialize</CODE> function as follows:</P>

<PRE><CODE>void CMyCtrl::Serialize(CArchive&amp; ar)
{
    DWORD dwVersion =
        SerializeVersion(ar, MAKELONG(_wVerMinor, _wVerMajor));
    SerializeExtent(ar);
    SerializeStockProps(ar);

    if (ar.IsLoading())
    {
        ar &gt;&gt; m_boolProp;
        ar &gt;&gt; m_shortProp;
        ar &gt;&gt; m_colorProp;
        ar &gt;&gt; m_stringProp;
    }
    else
    {
        ar &lt;&lt; m_boolProp;
        ar &lt;&lt; m_shortProp;
        ar &lt;&lt; m_colorProp;
        ar &lt;&lt; m_stringProp;
    }
}
</CODE></PRE>

<P>The <CODE>dwVersion</CODE> local variable can be used to detect the version of the control’s persistent state being loaded or saved. You can use this variable instead of calling <A HREF="JavaScript:hhobj_3.Click()">CPropExchange::GetVersion</A>.</P>

<P>To save a little space in the persistent format for a <B>BOOL</B> property (and to keep it compatible with the format produced by <B>PX_Bool</B>), you can store the property as a <B>BYTE</B>, as follows:</P>

<PRE><CODE>    if (ar.IsLoading())
    {
        BYTE bTmp;
        ar &gt;&gt; bTmp;
        m_boolProp = (BOOL)bTmp;
        .
        .
        .
    }
    else
    {
        ar &lt;&lt; (BYTE)m_boolProp;
        .
        .
        .
    }
</CODE></PRE>

<P>Note that in the load case, a temporary variable is used and then its value is assigned, rather than casting <CODE>m_boolProp</CODE> to a <B>BYTE</B> reference. The casting technique would result in only one byte of <CODE>m_boolProp</CODE> being modified, leaving the remaining bytes uninitialized.</P>

<P>For the same control, you can optimize the control’s initialization by overriding <A HREF="JavaScript:hhobj_4.Click()">COleControl::OnResetState</A> as follows:</P>

<PRE><CODE>void CMyCtrl::OnResetState()
{
    ResetVersion(MAKELONG(_wVerMinor, _wVerMajor));
    ResetStockProps();

    m_boolProp = TRUE;
    m_shortProp = 0;
    m_colorProp = RGB(0xFF,0x00,0x00);
    m_stringProp.Empty();
}
</CODE></PRE>

<P>Although <B>Serialize</B> and <B>OnResetState</B> have been overridden, the <CODE>DoPropExchange</CODE> function should be kept intact because it is still used for persistence in the property-bag format. It is important to maintain all three of these functions to ensure that the control manages its properties consistently, regardless of which persistence mechanism the container uses.</P>
</font>
</BODY>
</HTML>

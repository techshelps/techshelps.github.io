<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How SQL Debugging Works</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_how_sql_debugging_works"></A>How SQL Debugging Works</H1>

<P class=indent><B><B>Feature Only in Enterprise Edition</B></B>&nbsp;&nbsp;&nbsp;This feature is supported only in Visual C++ Enterprise Edition. For more information, see <A HREF="JavaScript:hhobj_1.Click()">Visual C++ Editions</A>.</P>

<P>The SQL Server side has three primary SQL debugging components: AUTPRX32.DLL, AUTMGR32.EXE, and SDI50.DLL. They all must be on the path for the environment that the server is running in. The client side has two primary components: AUTMGR32.EXE and AUTPRX32.DLL.</P>

<P>When the client application begins making SQL Server connections through ODBC and DBLib, tracing turns on at the SQL Server side via a system level call or stored procedure. Once tracing begins, the SDI50.DLL on the server side exposes SQL Server events. The automation manager (AUTMGR32.EXE) functions as a proxy for remote OLE by determining where the server is located and providing remote procedure calls.</P>

<P>Depending on how the application accesses the SQL Server, the debugging context is for either the client application or the SQL Server.&nbsp; For example, you begin debugging by stepping through a client application just as you would for a normal debugging session. If the application uses an ODBC call to a stored procedure, you can step to that line. As soon as the application makes a call to the SQL Server, you can step into the stored procedure. You have execution control over the SQL source until you either step completely through it or release it. Debugging then continues for the client application. For the remainder of the debugging session, the debugging context switches back and forth between the client application and the SQL Server.</P>
</font>
</BODY>
</HTML>

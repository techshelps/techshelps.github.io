<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>/MD, /ML, /MT, /LD   (Use Run-Time Library)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_compiling_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_.2f.md.2c_2f.ml.2c_2f.mt.2c_2f.ld"></A><SUP></SUP>/MD, /ML, /MT, /LD&nbsp;&nbsp;&nbsp;(Use Run-Time Library)</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_overviews.3a_.compiling_and_linking.htm">Overview</A>  |&nbsp; <A HREF="_core_set_compiler_options.htm">How Do I</A>  |&nbsp; <A HREF="_core_compiler_reference.htm">Compiler Options</A></P>

<P>With these options, you can select either single-threaded or multithreaded run-time routines, indicate that a multithreaded module is a dynamic-link library (DLL), and select the retail or debug version of the library.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Having more than one copy of the run-time libraries in a process can cause problems, because static data in one copy is not shared with the other copy. To ensure that your process contains only one copy, avoid mixing static and dynamic versions of the run-time libraries. The linker will prevent you from linking with both static and dynamic versions within one .EXE file, but you can still end up with two (or more) copies of the run-time libraries. For example, a dynamic-link library linked with the static (non-DLL) versions of the run-time libraries can cause problems when used with an .EXE file that was linked with the dynamic (DLL) version of the run-time libraries. (You should also avoid mixing the debug and non-debug versions of the libraries in one process.)</P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Command Line</B></TD>
<TD class=label width=25%><B>Project Settings</B></TD>
<TD class=label width=58%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>/MD</TD>
<TD width=25%>Multithreaded DLL</TD>
<TD width=58%>Defines <B>_MT</B> and <B>_DLL</B> so that both multithread- and DLL-specific versions of the run-time routines are selected from the standard .H files. This option also causes the compiler to place the library name MSVCRT.LIB into the .OBJ file. <BR>
Applications compiled with this option are statically linked to MSVCRT.LIB. This library provides a layer of code that allows the linker to resolve external references. The actual working code is contained in MSVCRT.DLL, which must be available at run time to applications linked with MSVCRT.LIB.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>/MDd</TD>
<TD width=25%>Debug Multithreaded DLL </TD>
<TD width=58%>Defines <B>_DEBUG</B>, <B>_MT</B>, and <B>_DLL</B> so that debug multithread- and DLL-specific versions of the run-time routines are selected from the standard .H files. It also causes the compiler to place the library name MSVCRTD.LIB into the .OBJ file. </TD>
</TR>

<TR VALIGN="top">
<TD width=17%>/ML</TD>
<TD width=25%>Single-Threaded </TD>
<TD width=58%>Causes the compiler to place the library name LIBC.LIB into the .OBJ file so that the linker will use LIBC.LIB to resolve external symbols. This is the compiler’s default action. LIBC.LIB does not provide multithread support. </TD>
</TR>

<TR VALIGN="top">
<TD width=17%>/MLd</TD>
<TD width=25%>Debug Single-Threaded </TD>
<TD width=58%>Defines <B>_DEBUG</B> and causes the compiler to place the library name LIBCD.LIB into the .OBJ file so that the linker will use LIBCD.LIB to resolve external symbols. LIBCD.LIB does not provide multithread support. </TD>
</TR>

<TR VALIGN="top">
<TD width=17%>/MT</TD>
<TD width=25%>Multithreaded </TD>
<TD width=58%>Defines <B>_MT</B> so that multithread-specific versions of the run-time routines are selected from the standard header (.H) files. This option also causes the compiler to place the library name LIBCMT.LIB into the .OBJ file so that the linker will use LIBCMT.LIB to resolve external symbols. Either /MT or /MD (or their debug equivalents /MTd or /MDd) is required to create multithreaded programs. </TD>
</TR>

<TR VALIGN="top">
<TD width=17%>/MTd</TD>
<TD width=25%>Debug Multithreaded </TD>
<TD width=58%>Defines <B>_DEBUG</B> and <B>_MT</B>. Defining <B>_MT </B>causes multithread-specific versions of the run-time routines to be selected from the standard .H files. This option also causes the compiler to place the library name LIBCMTD.LIB into the .OBJ file so that the linker will use LIBCMTD.LIB to resolve external symbols. Either /MTd or /MDd (or their non-debug equivalents /MT or MD) is required to create multithreaded programs. </TD>
</TR>

<TR VALIGN="top">
<TD width=17%>/LD</TD>
<TD width=25%>Not applicable</TD>
<TD width=58%>Creates a DLL. <BR>
Passes the /DLL option to the linker. The linker looks for, but does not require, a <B>DllMain</B> function. If you do not write a <B>DllMain</B> function, the linker inserts a <B>DllMain</B> function that returns TRUE. <BR>
Links the DLL startup code.<BR>
Creates an import library (.LIB), if an export (.EXP) file is not specified on the command line; you link the import library to applications that call your DLL.<BR>
Interprets <A HREF="_core_.2f.fe.htm">/Fe</A> as naming a DLL rather than an .EXE file; the default program name becomes <I>basename</I>.DLL instead of <I>basename</I>.EXE.<BR>
Changes default run-time library support to /MT if you have not explicitly specified one of the /M options</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>/LDd</TD>
<TD width=25%>Not applicable</TD>
<TD width=58%>Creates a debug DLL. Defines _DEBUG.</TD>
</TR>
</TABLE><BR>

<P>To find these options in the development environment, click <B>Settings</B> on the <B>Project</B> menu. Then click the <B>C/C++</B> tab, and click <B>Code Generation </B>in the <B>Category </B>box. See the <B>Use Run-Time Library </B>drop-down box. </P>

<P>The debug options select the debug versions of the library or DLL and define <B>_DEBUG</B>. For more information on using the debug versions, see <A HREF="_core_c_run.2d.time_debug_libraries.htm">C Run-Time Debug Libraries</A>.</P>

<P>For further discussion of DLLs, see <A HREF="_core_dll_topics.htm">DLL Topics</A>. </P>
</font>
</BODY>
</HTML>

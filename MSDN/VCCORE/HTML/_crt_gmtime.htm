<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>gmtime</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_gmtime"></A><SUP></SUP>gmtime</H1>

<P>Converts a time value to a structure.</P>

<P><B>struct</B> <B>tm</B> <B>*gmtime(</B> <B>const</B> <B>time_t</B> <B>*</B><I>timer</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=57%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>gmtime</B></TD>
<TD width=27%>&lt;time.h&gt;</TD>
<TD width=57%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>gmtime</B> returns a pointer to a structure of type <A HREF="_crt_standard_types.htm">tm</A>. The fields of the returned structure hold the evaluated value of the <I>timer</I> argument in UTC rather than in local time. Each of the structure fields is of type <B>int</B>, as follows:</P>

<P class=dt><B>tm_sec</B></P>

<P class=indent>Seconds after minute (0 – 59)</P>

<P class=dt><B>tm_min</B></P>

<P class=indent>Minutes after hour (0 – 59)</P>

<P class=dt><B>tm_hour</B></P>

<P class=indent>Hours since midnight (0 – 23)</P>

<P class=dt><B>tm_mday</B></P>

<P class=indent>Day of month (1 – 31)</P>

<P class=dt><B>tm_mon</B></P>

<P class=indent>Month (0 – 11; January = 0)</P>

<P class=dt><B>tm_year</B></P>

<P class=indent>Year (current year minus 1900)</P>

<P class=dt><B>tm_wday</B></P>

<P class=indent>Day of week (0 – 6; Sunday = 0)</P>

<P class=dt><B>tm_yday</B></P>

<P class=indent>Day of year (0 – 365; January 1 = 0)</P>

<P class=dt><B>tm_isdst</B></P>

<P class=indent>Always 0 for <B>gmtime</B></P>

<P>The <B>gmtime</B>, <B>mktime</B>, and <B>localtime</B> functions use the same single, statically allocated structure to hold their results. Each call to one of these functions destroys the result of any previous call. If <I>timer</I> represents a date before midnight, January 1, 1970, <B>gmtime</B> returns <B>NULL</B>. There is no error return.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>timer</I></P>

<P class=indent>Pointer to stored time. The time is represented as seconds elapsed since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC).</P>

<P class=label><B>Remarks</B></P>

<P>The <B>gmtime</B> function breaks down the <I>timer</I> value and stores it in a statically allocated structure of type <B>tm</B>, defined in TIME.H. The value of <I>timer</I> is usually obtained from a call to the <B>time</B> function.</P>

<P class=indent><B><B>Note</B></B> The target environment should try to determine whether daylight savings time is in effect. The C run-time library assumes the United States’s rules for implementing the calculation of Daylight Saving Time (DST). </P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* GMTIME.C: This program uses gmtime to convert a long-
 * integer representation of coordinated universal time
 * to a structure named newtime, then uses asctime to
 * convert this structure to an output string.
 */

#include &lt;time.h&gt;
#include &lt;stdio.h&gt;

void main( void )
{
   struct tm *newtime;
   long ltime;

   time( &amp;ltime );

   /* Obtain coordinated universal time: */
   newtime = gmtime( &amp;ltime );
   printf( "Coordinated universal time is %s\n", 
                               asctime( newtime ) );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Coordinated universal time is Tue Mar 23 02:00:56 1993

</CODE></PRE>

<P><A HREF="_crt_time_management.htm">Time Management Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_asctime.2c_._wasctime.htm">asctime</A>, <A HREF="_crt_ctime.2c_._wctime.htm">ctime</A>, <A HREF="_crt__ftime.htm">_ftime</A>, <A HREF="_crt_localtime.htm">localtime</A>, <A HREF="_crt_mktime.htm">mktime</A>, <A HREF="_crt_time.htm">time</A></P>
</font>
</BODY>
</HTML>

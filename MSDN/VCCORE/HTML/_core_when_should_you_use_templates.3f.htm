<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>When Should You Use Templates?</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_when_should_you_use_templates.3f"></A><SUP></SUP>When Should You Use Templates?</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_templates_in_c.2b2b3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_template_tasks.htm">How Do I</A></P>

<P>Templates are often used to:

<UL type=disc>
	<LI>Create a type-safe collection class (for example, a stack) that can operate on data of any type.<BR><BR></LI>

	<LI>Add extra type checking for functions that would otherwise take <B>void</B> pointers.<BR><BR></LI>

	<LI>Encapsulate groups of operator overrides to modify type behavior (such as smart pointers).</LI>
</UL>

<P>Most of these uses can be implemented without templates; however, templates offer several advantages:

<UL type=disc>
	<LI>Templates are easier to write. You create only one generic version of your class or function instead of manually creating specializations.<BR><BR></LI>

	<LI>Templates can be easier to understand, since they can provide a straightforward way of abstracting type information.<BR><BR></LI>

	<LI>Templates are type-safe. Because the types that templates act upon are known at compile time, the compiler can perform type checking before errors occur.</LI>
</UL>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_templates_vs.._macros.htm">Templates vs. C/C++ macros</A><BR><BR></LI>

	<LI><A HREF="_core_templates_vs.._void_pointers.htm">Templates vs. void pointers</A><BR><BR></LI>

	<LI><A HREF="_core_templates_and_collection_classes.htm">Templates and collection classes</A><BR><BR></LI>

	<LI><A HREF="_core_templates_and_smart_pointers.htm">Templates and smart pointers</A></LI>
</UL>
</font>
</BODY>
</HTML>

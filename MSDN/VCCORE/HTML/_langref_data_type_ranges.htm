<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Type Ranges</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="integer constants">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_data_type_ranges"></A>Data Type Ranges</H1>

<P>C/C++ recognizes the types shown in the table below.</P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=21%><B>Type Name</B></TD>
<TD class=label width=13%><B>Bytes</B></TD>
<TD class=label width=25%><B>Other Names</B></TD>
<TD class=label width=41%><B>Range of Values</B></TD>
</TR>

<TR VALIGN="top">
<TD width=21%>int</TD>
<TD width=13%>*</TD>
<TD width=25%>signed, <BR>
signed int</TD>
<TD width=41%>System dependent</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>unsigned int</TD>
<TD width=13%>*</TD>
<TD width=25%>unsigned</TD>
<TD width=41%>System dependent</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>__int8</TD>
<TD width=13%>1</TD>
<TD width=25%>char, <BR>
signed char</TD>
<TD width=41%>–128 to 127</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>__int16</TD>
<TD width=13%>2</TD>
<TD width=25%>short, <BR>
short int, <BR>
signed short int</TD>
<TD width=41%>–32,768 to 32,767</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>__int32</TD>
<TD width=13%>4</TD>
<TD width=25%>signed, <BR>
signed int</TD>
<TD width=41%>–2,147,483,648 to 2,147,483,647</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>__int64</TD>
<TD width=13%>8</TD>
<TD width=25%>none</TD>
<TD width=41%>–9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>char</TD>
<TD width=13%>1</TD>
<TD width=25%>signed char</TD>
<TD width=41%>–128 to 127</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>unsigned char</TD>
<TD width=13%>1</TD>
<TD width=25%>none</TD>
<TD width=41%>0 to 255</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>short</TD>
<TD width=13%>2</TD>
<TD width=25%>short int, <BR>
signed short int</TD>
<TD width=41%>–32,768 to 32,767</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>unsigned short</TD>
<TD width=13%>2</TD>
<TD width=25%>unsigned short int</TD>
<TD width=41%>0 to 65,535</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>long</TD>
<TD width=13%>4</TD>
<TD width=25%>long int, <BR>
signed long int</TD>
<TD width=41%>–2,147,483,648 to 2,147,483,647</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>unsigned long</TD>
<TD width=13%>4</TD>
<TD width=25%>unsigned long int</TD>
<TD width=41%>0 to 4,294,967,295</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>enum</TD>
<TD width=13%>*</TD>
<TD width=25%>none</TD>
<TD width=41%>Same as int</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>float</TD>
<TD width=13%>4</TD>
<TD width=25%>none</TD>
<TD width=41%>3.4E +/- 38 (7 digits)</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>double</TD>
<TD width=13%>8</TD>
<TD width=25%>none</TD>
<TD width=41%>1.7E +/- 308 (15 digits)</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>long double</TD>
<TD width=13%>10</TD>
<TD width=25%>none</TD>
<TD width=41%>1.2E +/- 4932 (19 digits)</TD>
</TR>
</TABLE><BR>

<P>The long double data type (80-bit, 10-byte precision) is mapped directly to double (64-bit, 8- byte precision) in Windows NT and Windows 95.</P>

<P>Signed and unsigned are modifiers that can be used with any integral type. The char type is signed by default, but you can specify /J to make it unsigned by default.</P>

<P>The int and unsigned int types have the size of the system word. This is two bytes (the same as short and unsigned short) in MS-DOS and 16-bit versions of Windows, and 4 bytes in 32-bit operating systems. However, portable code should not depend on the size of int.</P>

<P>Microsoft C/C++ also features support for sized integer types. See <A HREF="_langref___int8.2c_.__int16.2c_.__int32.2c_.__int64.htm">__int8, __int16, __int32, __int64</A> for more information. Also see <A HREF="JavaScript:hhobj_1.Click()">Integer Limits</A>.</P>
</font>
</BODY>
</HTML>

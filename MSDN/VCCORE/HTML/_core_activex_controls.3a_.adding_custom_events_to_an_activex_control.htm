<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls: Adding Custom Events to an ActiveX Control</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="circle sample start">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_COleControl.3a3a.FireEvent">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Circle hit testing">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Circle hit testing">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_COleControl">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_activex_controls.3a_.adding_custom_events_to_an_activex_control"></A>ActiveX Controls: Adding Custom Events to an ActiveX Control</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex_controls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_control_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions_about_activex_controls.htm">FAQ</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_activex_control_sample_list.htm">Sample</A></P>

<P>Custom events differ from stock events in that they are not automatically fired by class <B>COleControl</B>. A custom event recognizes a certain action, determined by the control developer, as an event. The event map entries for custom events are represented by the <B>EVENT_CUSTOM</B> macro. The following section implements a custom event for an ActiveX control project that was created using ControlWizard.</P>

<H2><A NAME="_core_adding_a_custom_event_with_classwizard"></A>Adding a Custom Event with ClassWizard</H2>

<P>The following procedure adds a specific custom event, ClickIn. You can use this procedure to add other custom events. Simply substitute your custom event name and its parameters for the ClickIn event name and parameters.</P>

<P class=label><B>To add the ClickIn custom event using ClassWizard</B>

<OL>
	<LI>Load your control’s project.<BR><BR></LI>

	<LI>On the <B>View </B>menu, click <B>ClassWizard</B>.<BR><BR></LI>

	<LI>Click the <B>ActiveX Events</B> tab.<BR><BR></LI>

	<LI>Select the name of the control class from the <B>Class name</B> box.<BR><BR></LI>

	<LI>Click <B>Add Event</B>.<BR><BR></LI>

	<LI>In the <B>External name</B> box, type <CODE>ClickIn</CODE>.<BR><BR></LI>

	<LI>In the <B>Internal name</B> box, type the name of the event’s firing function. For this example, use the default value provided by ClassWizard (<CODE>FireClickIn</CODE>).<BR><BR></LI>

	<LI>Add a parameter, called <CODE>xCoord</CODE> (type <CODE>OLE_XPOS_PIXELS</CODE>), using the <B>Parameter List</B> grid control.<BR><BR></LI>

	<LI>Add a second parameter, called <CODE>yCoord</CODE> (type <CODE>OLE_YPOS_PIXELS</CODE>), using the <B>Parameter List</B> grid control.<BR><BR></LI>

	<LI>Click <B>OK </B>to close <B>Add Event</B>.<BR><BR></LI>

	<LI>Click <B>OK </B>again to confirm your choices and close <B>ClassWizard</B>.</LI>
</OL>



<H2><A NAME="_core_classwizard_changes_for_custom_events"></A>ClassWizard Changes for Custom Events</H2>

<P>When you add a custom event, ClassWizard makes changes to the control class .H, .CPP, and .ODL files. The following code samples are specific to the ClickIn event.</P>

<P>The following lines are added to the header (.H) file of your control class:</P>

<PRE><CODE>void FireClickIn(OLE_XPOS_PIXELS xCoord, OLE_YPOS_PIXELS yCoord)
    {FireEvent(eventidClickIn,EVENT_PARAM(VTS_XPOS_PIXELS  VTS_YPOS_PIXELS), xCoord, yCoord);}
</CODE></PRE>

<P>This code declares an inline function called <CODE>FireClickIn</CODE> that calls <A HREF="JavaScript:hhobj_3.Click()">COleControl::FireEvent</A> with the ClickIn event and parameters you defined using ClassWizard.</P>

<P>In addition, the following line is added to the event map for the control, located in the implementation (.CPP) file of your control class:</P>

<PRE><CODE>EVENT_CUSTOM("ClickIn", FireClickIn, VTS_XPOS_PIXELS  VTS_YPOS_PIXELS)
</CODE></PRE>

<P>This code maps the event ClickIn to the inline function <CODE>FireClickIn</CODE>, passing the parameters you defined using ClassWizard.</P>

<P>Finally, the following line is added to your control’s .ODL file:</P>

<PRE><CODE>[id(1)] void ClickIn(OLE_XPOS_PIXELS xCoord, OLE_YPOS_PIXELS yCoord);
</CODE></PRE>

<P>This line assigns the ClickIn event a specific ID number, taken from the event’s position in the ClassWizard event list. The entry in the event list allows a container to anticipate the event. For example, it might provide handler code to be executed when the event is fired.</P>



<H2><A NAME="_core_calling_fireclickin"></A>Calling FireClickIn</H2>

<P>Now that you have added the ClickIn custom event using ClassWizard, you must decide when this event is to be fired. You do this by calling <CODE>FireClickIn</CODE> when the appropriate action occurs. For this discussion, the control uses the <CODE>InCircle</CODE> function inside a <B>WM_LBUTTONDOWN</B> message handler to fire the ClickIn event when a user clicks inside a circular or elliptical region. The following procedure adds the <B>WM_LBUTTONDOWN</B> handler.</P>

<P class=label><B>To add a message handler with ClassWizard</B>

<OL>
	<LI>Load your control’s project.<BR><BR></LI>

	<LI>On the <B>View </B>menu, click <B>ClassWizard</B>.<BR><BR></LI>

	<LI>Click the <B>Message Maps</B> tab.<BR><BR></LI>

	<LI>In the <B>Object IDs</B> box, select the control class name, in this case, <CODE>CSampleCtrl</CODE>.<BR><BR></LI>

	<LI>In the <B>Messages </B>box, select the message you would like to handle. For this example, select WM_LBUTTONDOWN.<BR><BR></LI>

	<LI>Click <B>Add Function</B> to add the handler function to your application.<BR><BR></LI>

	<LI>Click <B>Edit Code </B>to jump to the location of the message handler, or click <B>OK </B>to confirm your choice.</LI>
</OL>

<P>The following code sample calls the InCircle function every time the left mouse button is clicked within the control window. This sample can be found in the <B>WM_LBUTTONDOWN</B> handler function, <CODE>OnLButtonDown</CODE>, in the <A HREF="_core_activex_control_sample_list.htm">Circle sample</A> described in <I>Tutorials</I>. For more information on this function, see <A HREF="JavaScript:hhobj_4.Click()">Hit Testing</A>, also in <I>Tutorials</I>.</P>

<PRE><CODE>void CSampleCtrl::OnLButtonDown(UINT nFlags, CPoint point)
{
    if (InCircle(point))
        FireClickIn(point.x, point.y);

    COleControl::OnLButtonDown(nFlags, point);
}
</CODE></PRE>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;When ClassWizard creates message handlers for mouse button actions, a call to the same message handler of the base class is automatically added. Do not remove this call. If your control uses any of the stock mouse messages, the message handlers in the base class must be called to ensure that mouse capture is handled properly.</P>

<P>In the following example, the event fires only when the click occurs inside a circular or elliptical region within the control. To achieve this behavior, you can place the <CODE>InCircle</CODE> function, taken from <A HREF="JavaScript:hhobj_5.Click()">Hit Testing</A> of <I>Tutorials</I>, in your control’s implementation (.CPP) file:</P>

<PRE><CODE>BOOL CSampleCtrl::InCircle(CPoint&amp; point)
{
    CRect rc;
    GetClientRect(rc);
    // Determine radii
    double a = (rc.right - rc.left) / 2;
    double b = (rc.bottom - rc.top) / 2;
    
    // Determine x, y
    double x = point.x - (rc.left + rc.right) / 2;
    double y = point.y - (rc.top + rc.bottom) / 2;
    
    // Apply ellipse formula
    return ((x * x) / (a * a) + (y * y) / (b * b) &lt;= 1);
}
</CODE></PRE>

<P>You will also need to add the following declaration of the <CODE>InCircle</CODE> function to your control’s header (.H) file:</P>

<PRE><CODE>BOOL InCircle( CPoint&amp; point );
</CODE></PRE>



<H2><A NAME="_core_custom_events_with_stock_names"></A>Custom Events with Stock Names</H2>

<P>You can create custom events with the same name as stock events, however you can not implement both in the same control. For example, you might want to create a custom event called Click that does not fire when the stock event Click would normally fire. You could then fire the Click event at any time by calling its firing function.</P>

<P>The following procedure adds a custom Click event.</P>

<P class=label><B>To add a custom event that uses a stock event name</B>

<OL>
	<LI>Load your control’s project.<BR><BR></LI>

	<LI>On the <B>View </B>menu, click <B>ClassWizard</B>.<BR><BR></LI>

	<LI>Click the <B>ActiveX Events</B> tab.<BR><BR></LI>

	<LI>Click <B>Add Event</B>.<BR><BR></LI>

	<LI>In the <B>External name</B> box, select a stock event name. For this example, select <B>Click</B>.<BR><BR></LI>

	<LI>In the <B>Implementation </B>box, click <B>Custom</B>.<BR><BR></LI>

	<LI>Click <B>OK</B>.<BR><BR></LI>

	<LI>Click <B>OK</B> again to confirm your choices and exit <B>ClassWizard</B>.<BR><BR></LI>

	<LI>Call <CODE>FireClick</CODE> at appropriate places in your code.</LI>
</OL>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_activex_controls.3a_.methods.htm">ActiveX Controls: Methods</A>, <A HREF="JavaScript:hhobj_6.Click()">COleControl</A></P>
</font>
</BODY>
</HTML>

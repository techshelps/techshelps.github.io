<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Optimized Code</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="disassembly window">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="disassembly window">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_debugging_optimized_code"></A>Debugging Optimized Code</H1>

<P>During optimization, the compiler repositions and reorganizes instructions derived from your source code, resulting in more efficient execution of the program. Because the information in the optimized code has been rearranged, the debugger cannot always identify the source code that corresponds to a set of instructions. For this reason, it is advisable to debug your code before optimizing it whenever possible. You can enable optimization after you finish debugging.</P>

<P>Following are instructions for preventing optimization and suggestions for debugging optimized code, if necessary.</P>

<P class=label><B>To prevent the compiler from optimizing code</B>

<UL type=disc>
	<LI>When you create a new project, select the <B>Win32 Debug</B> target. Build and debug the <B>Win32 Debug</B> target until you are ready to build a <B>Win32 Release</B> target. The compiler does not optimize the <B>Win32 Debug</B> target.
<P class=tl>–&nbsp;or&nbsp;–</P></LI>

	<LI>Use the <A HREF="_core_.2f.od.htm">/Od</A> compiler option on the command line, and remove any other /O? compiler options.
<P class=tl>–&nbsp;or&nbsp;–</P></LI>
</UL>

<OL>
	<LI>From the <B>Project</B> menu, click <B>Settings</B>.
<P class=tl>The <B>Project Settings</B> dialog box appears.</P></LI>

	<LI>Select the <B>C/C++</B> tab.<BR><BR></LI>

	<LI>In the <B>Optimizations</B> drop-down list box, select <B>Disable (Debug)</B>.</LI>
</OL>

<P>You can enable optimizations after you finish debugging.</P>

<P class=label><B>Debugging optimized code</B></P>

<P>Some bugs affect optimized code but do not affect unoptimized code. If you must debug optimized code, use the following techniques:

<UL type=disc>
	<LI>Use the <A HREF="_core_.2f.z7.2c_2f.zd.2c_2f.zi.htm">/Zi</A> compiler option to get maximum symbolic information for your program.<BR><BR></LI>

	<LI>Use the <A HREF="JavaScript:hhobj_1.Click()">Disassembly</A> and <A HREF="_core_viewing_and_modifying_variables_or_registers.htm">Registers</A> windows. Set breakpoints at the appropriate locations using the Disassembly window.</LI>
</UL>

<P>To see why the Disassembly window is useful, consider the following example:</P>

<PRE><CODE>for (x=0; x&lt;10; x++)
</CODE></PRE>

<P>Suppose you set a breakpoint at this line. You might expect the breakpoint to be hit 10 times. But if this code is optimized, the breakpoint is hit only once, because the compiler recognizes that the first instruction associated with this line, which assigns the value of 0 to <CODE>x</CODE>, needs to execute only once. The compiler moves this instruction out of the loop. If you set a breakpoint on this source-code line, the debugger sets the breakpoint on the first instruction, which executes only once. </P>

<P>The instructions that compare and increment <CODE>x</CODE> remain inside the loop. To set a breakpoint on these instructions, use the <A HREF="JavaScript:hhobj_2.Click()">Disassembly window</A>. By viewing the object code the source-code line creates, you can set a breakpoint at the appropriate instruction. You can set a breakpoint at the location where the condition is checked or the variable is incremented. You can use the <B>Step Into</B> or <B>Step Over </B>commands in the Disassembly window to step by assembly instructions, which allows greater control than stepping by source-code line.</P>
</font>
</BODY>
</HTML>

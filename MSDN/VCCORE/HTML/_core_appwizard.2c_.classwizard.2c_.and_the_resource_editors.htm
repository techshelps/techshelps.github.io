<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AppWizard, ClassWizard, and the Resource Editors</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="MFC samples">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_appwizard.2c_.classwizard.2c_.and_the_resource_editors"></A>AppWizard, ClassWizard, and the Resource Editors</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_mfc.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_mfc_tasks.htm">How Do I</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Sample</A>  |&nbsp; <A HREF="_core_mfc_tutorials_available.htm">Tutorial</A></P>

<P>Visual C++ includes several wizards and the WizardBar for use in MFC programming, along with many integrated resource editors. For ActiveX controls programming, the <A HREF="_core_visual_c.2b2b_.wizards_that_help_you_begin_your_program.htm">ActiveX ControlWizard</A> serves a purpose much like that of AppWizard. While you can write MFC applications without most of these tools, the tools greatly simplify and speed your work. </P>



<H2><A NAME="_core_use_appwizard_to_create_an_mfc_application"></A>Use AppWizard to Create an MFC Application</H2>

<P>Use <A HREF="_core_visual_c.2b2b_.wizards_that_help_you_begin_your_program.htm">AppWizard</A> to create an MFC project in Visual C++ — which can include OLE and database support. Files in the project contain your application, document, view, and frame-window classes; standard resources, including menus and an optional toolbar; other required Windows files; and optional .RTF files containing standard Windows Help topics that you can revise and add to in order to create your program's help file.</P>



<H2><A NAME="_core_use_classwizard_to_manage_classes_and_windows_messages"></A>Use ClassWizard to Manage Classes and Windows Messages</H2>

<P><A HREF="_core_using_classwizard.htm">ClassWizard</A> helps you create handler functions for Windows messages and commands, create and manage classes, create class member variables, create Automation methods and properties, create database classes, and more.</P>

<P class=indent><B><B>Tip</B></B>&nbsp;&nbsp;&nbsp;ClassWizard also helps you to override virtual functions in the MFC classes. Select the class and the virtual function to override. The rest of the process is similar to message handling, as described in the following paragraphs. </P>

<P>Applications running under Windows are <A HREF="_core_messages_and_commands.3a_.overview.htm">message driven</A>. User actions and other events that occur in the running program cause Windows to send messages to the windows in the program. For example, if the user clicks the mouse in a window, Windows sends a <B>WM_LBUTTONDOWN</B> message when the left mouse button is pressed and a <B>WM_LBUTTONUP</B> message when the button is released. Windows also sends <B>WM_COMMAND</B> messages when the user selects commands from the menu bar. </P>

<P>In the MFC framework, various objects — documents, views, frame windows, document templates, the application object — can "handle" messages. Such an object provides a "handler function" as one of its member functions, and the framework maps the incoming message to its handler. </P>

<P>A large part of your programming task is choosing which messages to map to which objects and then implementing that mapping. To do so, you use ClassWizard.</P>

<P>ClassWizard will create empty message-handler member functions, and you use the source code editor to implement the body of the handler.</P>

<P>Quick access to frequently used features of ClassWizard are available at any time in the <A HREF="_core_using_wizardbar.htm">WizardBar</A>, and you can create or edit classes (including classes of your own, not derived from MFC classes) and their members with <A HREF="_core_using_classview.htm">ClassView</A>.</P>



<H2><A NAME="_core_use_the_resource_editors_to_create_and_edit_resources"></A>Use the Resource Editors to Create and Edit Resources</H2>

<P>Use the Visual C++ <A HREF="_core_resource_editors.3a_.overview.htm">resource editors</A> to create and edit menus, dialog boxes, custom controls, accelerator keys, bitmaps, icons, cursors, strings, and version resources. ClassWizard works with the editors: for example, when you create a dialog-template resource, you can run ClassWizard to connect the resource to a dialog class. As of Visual C++ version 4.0, a toolbar editor makes creating toolbars much easier.</P>

<P>To help you even more, the Microsoft Foundation Class Library provides a file called COMMON.RES, which contains "clip art" resources that you can copy from COMMON.RES and paste into your own resource file. COMMON.RES includes toolbar buttons, common cursors, icons, and more. You can use, modify, and redistribute these resources in your application. For more information about COMMON.RES, see the article <A HREF="_core_common..res_sample_resources.htm">COMMON.RES Sample Resources</A>. </P>

<P>As you can see, AppWizard, the Visual C++ resource editors, ClassWizard, WizardBar, ClassView, and the MFC framework do a lot of work for you and make managing your code much easier. The bulk of your application-specific code is in your document and view classes. For a list of tutorials you can try, see <A HREF="_core_mfc_tutorials_available.htm">MFC Tutorials Available</A>.</P>
</font>
</BODY>
</HTML>

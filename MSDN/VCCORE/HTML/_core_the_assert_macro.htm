<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The ASSERT Macro</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_the_assert_macro"></A>The ASSERT Macro</H1>

<P>This topic explains how to check assumptions made by your functions, using the <B>ASSERT</B> macro.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;As of MFC version 4.0, MFC uses the same assertion mechanisms as the C Run-time Library. This means that the message format has changed somewhat.</P>

<P>For more information on the <B>_ASSERT</B>, <B>_ASSERTE</B>, <B>_RPT</B>, and <B>_RPTF</B> macros, see <A HREF="_core_using_macros_for_verification_and_reporting.htm">Using Macros for Verification and Reporting</A>.</P>

<P>The most typical use of the <B>ASSERT</B> macro is to identify program errors during development. The argument given to <B>ASSERT</B> should be chosen so that it holds true only if the program is operating as intended. The macro evaluates the <B>ASSERT</B> argument and, if the argument expression is false (0), alerts the user and halts program execution. No action is taken if the argument is true (nonzero).</P>

<P>When an assertion fails, a message box appears with the following text: </P>

<PRE><CODE>assertion failed in file &lt;name&gt; in line &lt;num&gt;
Abort Retry Ignore
</CODE></PRE>

<P>where <CODE>&lt;name&gt;</CODE> is the name of the source file and <CODE>&lt;num&gt;</CODE> is the line number of the assertion that failed.</P>

<P>If you choose <B>Abort</B>, program execution terminates. If you choose <B>Ignore</B>, program execution continues. It is possible to break into the debugger after an <B>ASSERT</B> by clicking <B>Retry</B>. Neither <B>Abort</B> nor <B>Ignore</B> will activate a debugger, so they provide no way to examine the call stack. </P>

<P>If you are running under the debugger and choose <B>Retry</B>, a call to <B>AfxDebugBreak</B> embedded in the code causes a break into the debugger. At this point, you can examine the call stack. To view the call stack, on the <B>View</B> menu, click <B>Debug Windows</B> and <B>Call Stack</B>. If you have enabled <B>Just-in-time debugging</B>, this will work even if the application is not being debugged. </P>

<P>The following example shows how the <B>ASSERT</B> macro could be used to check the validity of a function’s return value:</P>

<PRE><CODE>int x = SomeFunc(y);
ASSERT(x &gt;= 0);   //  Assertion fails if x is negative
</CODE></PRE>

<P><B>ASSERT</B> can also be used in combination with the <B>IsKindOf</B> function to provide extra checking for function arguments, such as in the following example: </P>

<PRE><CODE>ASSERT( pObject1-&gt;IsKindOf( RUNTIME_CLASS( CPerson ) ) );
</CODE></PRE>

<P>The liberal use of assertions throughout your programs can catch errors during development. A good rule of thumb is that you should write assertions for any assumptions you make. For example, if you assume that an argument is not <B>NULL</B>, use an assertion statement to check for that condition.</P>

<P>The <B>ASSERT</B> macro will catch program errors only when you are using the debug version of the Microsoft Foundation Class Library during development. It will be turned off (and produce no code) when you build your program with the release version of the library.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The expression argument to <B>ASSERT</B> will not be evaluated in the release version of your program. If you want the expression to be evaluated in both debug and release versions, use the <B>VERIFY</B> macro instead of <B>ASSERT</B>. In debug versions, <B>VERIFY</B> is the same as <B>ASSERT</B>. In release versions, <B>VERIFY</B> evaluates the expression argument but does not check the result.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_using_the_assert_valid_macro.htm">Using the ASSERT_VALID Macro</A></P>
</font>
</BODY>
</HTML>

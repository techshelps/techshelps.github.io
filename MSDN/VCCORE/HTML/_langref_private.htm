<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>private</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_private"></A><SUP></SUP>private</H1>

<P><B>C++ Specific —&gt;</B></P>

<P><B>private:</B> [<I>member-list</I>]</P>

<P><B>private</B> <I>base-class</I></P>

<P>When preceding a list of class members, the <B>private</B> keyword specifies that those members are accessible only from member functions and friends of the class. This applies to all members declared up to the next access specifier or the end of the class.</P>

<P>When preceding the name of a base class, the <B>private</B> keyword specifies that the public and protected members of the base class are private members of the derived class.</P>

<P>Default access of members in a class is private. Default access of members in a structure or union is public.</P>

<P>Default access of a base class is private for classes and public for structures. Unions cannot have base classes.</P>

<P>For related information, see <A HREF="_langref_friend.htm">friend</A>, <A HREF="_langref_public.htm">public</A>, <A HREF="_langref_protected.htm">protected</A>, and <A HREF="_langref_table_of_member_access_privileges.htm">Table of Member Access Privileges</A>.</P>

<P><B>END C++ Specific</B></P>

<P class=label><B>Example</B></P>

<PRE><CODE>// Example of the private keyword
class BaseClass
{ public:
   // privMem accessible from member function
   int pubFunc() { return privMem; }
private:
   void privMem;
};

class DerivedClass : public BaseClass
{
public:
   void usePrivate( int i )
      { privMem = i; }   // Error: privMem not accessible
                        //    from derived class
};

class DerivedClass2 : private BaseClass
{
public:
   // pubFunc() accessible from derived class
   int usePublic() { return pubFunc(); }
};

void main()
{
   BaseClass aBase;
   DerivedClass aDerived;
   DerivedClass2 aDerived2;
   aBase.privMem = 1;     // Error: privMem not accessible
   aDerived.privMem = 1;  // Error: privMem not accessible
                          //    in derived class
   aDerived2.pubFunc();   // Error: pubFunc() is private in
                          //    derived class
}</CODE></PRE>
</font>
</BODY>
</HTML>

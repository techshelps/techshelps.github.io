<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls: Methods</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="circle sample start">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_COleControl">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_activex_controls.3a_.methods"></A>ActiveX Controls: Methods</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex_controls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_control_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions_about_activex_controls.htm">FAQ</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_activex_control_sample_list.htm">Sample</A></P>

<P>An ActiveX control fires events to communicate between itself and its control container. A container can also communicate with a control by means of methods and properties. Methods and properties provide an exported interface for use by other applications, such as <B>Automation</B> clients and ActiveX control containers. For more information on ActiveX control properties, see the article <A HREF="_core_activex_controls.3a_.properties.htm">ActiveX Controls: Properties</A>.</P>

<P>Methods are similar in usage and purpose to the member functions of a C++ class. There are two types of methods your control can implement: stock and custom. Similar to stock events, stock methods are those methods for which <A HREF="JavaScript:hhobj_3.Click()">COleControl</A> provides an implementation. For more information on stock methods, see the article <A HREF="_core_activex_controls.3a_.adding_stock_methods_to_an_activex_control.htm">ActiveX Controls: Adding Stock Methods to an ActiveX Control</A>. Custom methods, defined by the developer, allow additional customization of the control. For more information, see the article <A HREF="_core_activex_controls.3a_.adding_custom_methods_to_an_activex_control.htm">ActiveX Controls: Adding Custom Methods to an ActiveX Control</A>.</P>

<P>The Microsoft Foundation Class Library (MFC) implements a mechanism that allows your control to support stock and custom methods. The first part is class <B>COleControl</B>. Derived from <B>CWnd</B>, <B>COleControl</B> member functions support stock methods that are common to all ActiveX controls. The second part of this mechanism is the dispatch map. A dispatch map is similar to a message map; however, instead of mapping a function to a Windows message ID, a dispatch map maps virtual member functions to IDispatch IDS.</P>

<P>For a control to support various methods properly, its class must declare a dispatch map. This is accomplished by the following line of code located in control class header (.H) file:</P>

<PRE><CODE>DECLARE_DISPATCH_MAP()
</CODE></PRE>

<P>The main purpose of the dispatch map is to establish the relationship between the method names used by an external caller (such as the container) and the member functions of the control’s class that implement the methods. Once the dispatch map has been declared, it needs to be defined in the control’s implementation (.CPP) file. The following lines of code define the dispatch map:</P>

<PRE><CODE>BEGIN_DISPATCH_MAP(CSampleCtrl, COleControl)
   //{{AFX_DISPATCH_MAP(CSampleCtrl)
   ...
   //}}AFX_DISPATCH_MAP
END_DISPATCH_MAP()
</CODE></PRE>

<P>If ControlWizard was used to create the project, these lines were added automatically. If ControlWizard was not used, you must add these lines manually. The two comment lines allow ClassWizard to automatically insert macros into the dispatch map.</P>

<P>The following articles discuss Methods in detail:

<UL type=disc>
	<LI><A HREF="_core_activex_controls.3a_.adding_stock_methods_to_an_activex_control.htm">ActiveX Controls: Adding Stock Methods to an ActiveX Control</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.adding_custom_methods_to_an_activex_control.htm">ActiveX Controls: Adding Custom Methods to an ActiveX Control</A><BR><BR></LI>

	<LI><A HREF="_core_activex_controls.3a_.returning_error_codes_from_a_method.htm">ActiveX_Controls: Returning Error Codes From a Method</A></LI>
</UL>
</font>
</BODY>
</HTML>

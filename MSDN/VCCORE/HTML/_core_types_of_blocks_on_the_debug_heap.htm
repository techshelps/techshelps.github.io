<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Types of Blocks on the Debug Heap</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_types_of_blocks_on_the_debug_heap"></A>Types of Blocks on the Debug Heap</H1>

<P>Every memory block in the debug heap is assigned to one of five allocation types. These types are tracked and reported differently for purposes of leak detection and state reporting. You can specify a block’s type by allocating it using a direct call to one of the debug heap allocation functions such as <A HREF="_crt__malloc_dbg.htm">_malloc_dbg</A>. The five types of memory blocks in the debug heap (set in the <B>nBlockUse</B> member of the <B>_CrtMemBlockHeader</B> structure) are as follows:</P>

<P class=dt><B>_NORMAL_BLOCK</B></P>

<P class=indent>A call to <A HREF="_crt_malloc.htm">malloc</A> or <A HREF="_crt_calloc.htm">calloc</A> creates a Normal block. If you intend to use Normal blocks only, and have no need for Client blocks, you may want to define <A HREF="_crt__crtdbg_map_alloc.htm">_CRTDBG_MAP_ALLOC</A>, which causes all heap allocation calls to be mapped to their debug equivalents in debug builds. This will allow file name and line number information about each allocation call to be stored in the corresponding block header.</P>

<P class=dt><B>_CRT_BLOCK</B></P>

<P class=indent>The memory blocks allocated internally by many run-time library functions are marked as Crt blocks so they can be handled separately. As a result, leak detection and other operations need not be affected by them. An allocation must never allocate, reallocate, or free any block of Crt type.</P>

<P class=dt><B>_CLIENT_BLOCK</B></P>

<P class=indent>An application can keep special track of a given group of allocations for debugging purposes by allocating them as this type, using explicit calls to the debug heap functions. MFC, for example, allocates all <B>CObjects</B> as Client blocks; other applications might keep different memory objects in Client blocks. Subtypes of Client blocks can also be specified for greater tracking granularity. To specify subtypes of Client blocks, shift the number left by 16 bits and <B>OR</B> it with <B>_CLIENT_BLOCK</B>. For example:<BR>
<BR>
<CODE>#define MYSUBTYPE 4<BR>
_free_dbg(pbData, _CLIENT_BLOCK|(MYSUBTYPE&lt;&lt;16));</CODE><BR>
<BR>
A client-supplied hook function for dumping the objects stored in Client blocks can be installed using <B>_CrtSetDumpClient</B>, and will then be called whenever a Client block is dumped by a debug function. Also, <B>_CrtDoForAllClientObjects</B> can be used to call a given function supplied by the application for every Client block in the debug heap.</P>

<P class=dt><B>_FREE_BLOCK</B></P>

<P class=indent>Normally, blocks that are freed are removed from the list. To check that freed memory is not still being written to, or to simulate low memory conditions, you can choose to keep freed blocks on the linked list, marked as Free and filled with a known byte value (currently 0xDD).</P>

<P class=dt><B>_IGNORE_BLOCK</B></P>

<P class=indent>It is possible to turn off the debug heap operations for a period of time. During this time, memory blocks are kept on the list, but are marked as Ignore blocks.</P>
</font>
</BODY>
</HTML>

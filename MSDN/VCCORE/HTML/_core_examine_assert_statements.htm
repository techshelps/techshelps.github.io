<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Examine ASSERT Statements</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_compiling_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_examine_assert_statements"></A>Examine ASSERT Statements</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_creating_a_release_build.3a_.overview.htm">Overview</A></P>

<P>Suppose that when you run the debug version of your MFC application, there are no problems. However, the release version of the same application crashes, returns incorrect results, and/or exhibits some other abnormal behavior.</P>

<P>This problem can be caused when you place important code in an ASSERT statement to verify that it performs correctly. Because ASSERT statements are commented out in a release build of an MFC program, the code does not run in a release build.</P>

<P>If you are using ASSERT to confirm that a function call succeeded, consider using VERIFY instead. The VERIFY macro evaluates its own arguments in both debug and release builds of the application.</P>

<P>Another preferred technique is to assign the function's return value to a temporary variable and then test the variable in an ASSERT statement.</P>

<P>Examine the following code fragment:</P>

<PRE><CODE>char *buf;
ASSERT(buf = (char *) calloc( 20, sizeof(char) ));
strcpy( buf, "Hello, World" );
free( buf );</CODE></PRE>

<P>This code runs perfectly in a debug version of an MFC application. If the call to calloc( ) fails, a diagnostic message that includes the file and line number appears. However, in a retail build of an MFC application:</P>

<P>The call to “calloc( )” never occurs, leaving "buf" uninitialized, or</P>

<P>“strcpy( )" copies "Hello, World" into a random piece of memory, possibly crashing the application or hanging the system, or</P>

<P>"free()" attempts to free memory that was never allocated.</P>

<P>To use ASSERT correctly, the code sample should be changed to the following:</P>

<PRE><CODE>char *buf;
buf = (char *) calloc( 20, sizeof(char) );
ASSERT( buf != NULL );
strcpy( buf, "Hello, World" );
free( buf );</CODE></PRE>

<P>Or, you can use VERIFY instead:</P>

<PRE><CODE>char *buf;
VERIFY(buf = (char *) calloc(20, sizeof(char) ));
strcpy( buf, "Hello, World" );
free( buf );</CODE></PRE>
</font>
</BODY>
</HTML>

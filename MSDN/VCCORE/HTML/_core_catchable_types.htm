<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Catchable Types</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_catchable_types"></A>Catchable Types</H1>

<P>Because C++ enables you to throw exceptions of any type, you need to determine which <B>catch</B> handlers can catch an exception of a specific class type. A C++ exception can be caught by a <B>catch</B> handler that specifies the same type as the thrown exception, or by a handler that can catch any type of exception. An exception can also be caught by a <B>catch</B> handler that uses a reference to the same type as the thrown exception.</P>

<P>If the type of thrown exception is a class, which also has a base class (or classes), it can be caught by handlers that accept base classes of the exception’s type, as well as references to bases of the exception’s type. Note that when an exception is caught by a reference, it is bound to the actual thrown exception object; otherwise, it is a copy (much the same as an argument to a function).</P>

<P>When an exception is thrown, it may be caught by the following types of <B>catch</B> handlers:

<UL type=disc>
	<LI>A handler that can accept any type (using the ellipsis syntax).<BR><BR></LI>

	<LI>A handler that accepts the same type as the exception object; because it is a copy, <B>const</B> and <B>volatile</B> modifiers are ignored.<BR><BR></LI>

	<LI>A handler that accepts a reference to the same type as the exception object.<BR><BR></LI>

	<LI>A handler that accepts a reference to a <B>const</B> or <B>volatile</B> form of the same type as the exception object.<BR><BR></LI>

	<LI>A handler that accepts a base class of the same type as the exception object; since it is a copy, <B>const</B> and <B>volatile</B> modifiers are ignored. The <B>catch</B> handler for a base class must not precede the <B>catch</B> handler for the derived class.<BR><BR></LI>

	<LI>A handler that accepts a reference to a base class of the same type as the exception object.<BR><BR></LI>

	<LI>A handler that accepts a reference to a <B>const</B> or <B>volatile</B> form of a base class of the same type as the exception object.<BR><BR></LI>

	<LI>A handler that accepts a pointer to which a thrown pointer object can be converted via standard pointer conversion rules.</LI>
</UL>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>fseek</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_fseek"></A><SUP></SUP>fseek</H1>

<P>Moves the file pointer to a specified location.</P>

<P><B>int</B> <B>fseek(</B> <B>FILE</B> <B>*</B><I>stream</I><B>,</B> <B>long</B> <I>offset</I><B>,</B> <B>int</B> <I>origin </I><B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Function</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=57%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>fseek</B></TD>
<TD width=27%>&lt;stdio.h&gt;</TD>
<TD width=57%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>If successful, <B>fseek</B> returns 0. Otherwise, it returns a nonzero value. On devices incapable of seeking, the return value is undefined.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>stream</I></P>

<P class=indent>Pointer to <B>FILE</B> structure</P>

<P class=dt><I>offset</I></P>

<P class=indent>Number of bytes from <I>origin</I></P>

<P class=dt><I>origin</I></P>

<P class=indent>Initial position</P>

<P class=label><B>Remarks</B></P>

<P>The <B>fseek</B> function moves the file pointer (if any) associated with <I>stream</I> to a new location that is <I>offset</I> bytes from <I>origin.</I> The next operation on the stream takes place at the new location. On a stream open for update, the next operation can be either a read or a write. The argument origin must be one of the following constants, defined in STDIO.H:</P>

<P class=dt><B>SEEK_CUR</B></P>

<P class=indent>Current position of file pointer</P>

<P class=dt><B>SEEK_END</B></P>

<P class=indent>End of file</P>

<P class=dt><B>SEEK_SET</B></P>

<P class=indent>Beginning of file</P>

<P>You can use <B>fseek</B> to reposition the pointer anywhere in a file. The pointer can also be positioned beyond the end of the file. <B>fseek</B> clears the end-of-file indicator and negates the effect of any prior <B>ungetc</B> calls against <I>stream</I>.</P>

<P>When a file is opened for appending data, the current file position is determined by the last I/O operation, not by where the next write would occur. If no I/O operation has yet occurred on a file opened for appending, the file position is the start of the file. </P>

<P>For streams opened in text mode, <B>fseek</B> has limited use, because carriage return–linefeed translations can cause <B>fseek</B> to produce unexpected results. The only <B>fseek</B> operations guaranteed to work on streams opened in text mode are: 

<UL type=disc>
	<LI>Seeking with an offset of 0 relative to any of the origin values.<BR><BR></LI>

	<LI>Seeking from the beginning of the file with an offset value returned from a call to <B>ftell</B>.</LI>
</UL>

<P>Also in text mode, CTRL+Z is interpreted as an end-of-file character on input. In files opened for reading/writing, <B>fopen</B> and all related routines check for a CTRL+Z at the end of the file and remove it if possible. This is done because using <B>fseek</B> and <B>ftell</B> to move within a file that ends with a CTRL+Z may cause <B>fseek</B> to behave improperly near the end of the file. </P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* FSEEK.C: This program opens the file FSEEK.OUT and
 * moves the pointer to the file's beginning.
 */

#include &lt;stdio.h&gt;

void main( void )
{
   FILE *stream;
   char line[81];
   int  result;

   stream = fopen( "fseek.out", "w+" );
   if( stream == NULL )
      printf( "The file fseek.out was not opened\n" );
   else
   {
      fprintf( stream, "The fseek begins here: "
                       "This is the file 'fseek.out'.\n" );
      result = fseek( stream, 23L, SEEK_SET);
      if( result )
         perror( "Fseek failed" );
      else
      {
         printf( "File pointer is set to middle of first line.\n" );
         fgets( line, 80, stream );
         printf( "%s", line );

      }
      fclose( stream );
   }
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>File pointer is set to middle of first line.
This is the file 'fseek.out'.

</CODE></PRE>

<P><A HREF="_crt_stream_i.2f.o.htm">Stream I/O Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_ftell.htm">ftell</A>, <A HREF="_crt__lseek.2c_._lseeki64.htm">_lseek</A>, <A HREF="_crt_rewind.htm">rewind</A></P>
</font>
</BODY>
</HTML>

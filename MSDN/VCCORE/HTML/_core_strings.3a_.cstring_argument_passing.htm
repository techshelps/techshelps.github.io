<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Strings: CString Argument Passing</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_CString">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_strings.3a_.cstring_argument_passing"></A>Strings: CString Argument Passing</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_strings.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_string_handling_tasks.htm">How Do I</A></P>

<P>This article explains how to pass <A HREF="JavaScript:hhobj_2.Click()">CString</A> objects to functions and how to return <B>CString</B> objects from functions.</P>



<H2><A NAME="_core_cstring_argument.2d.passing_conventions"></A>CString Argument-Passing Conventions</H2>

<P>When you define a class interface, you must determine the argument-passing convention for your member functions. There are some standard rules for passing and returning <B>CString</B> objects. If you follow the rules described in <A HREF="#_core_strings_as_function_inputs">Strings as Function Inputs</A> and <A HREF="#_core_strings_as_function_outputs">Strings as Function Outputs</A>, you will have efficient, correct code.</P>



<H2><A NAME="_core_strings_as_function_inputs"></A>Strings as Function Inputs</H2>

<P>If a string is an input to a function, in most cases it is best to declare the string function parameter as <B>LPCTSTR</B>. Convert to a <B>CString</B> object as necessary within the function using constructors and assignment operators. If the string contents are to be changed by a function, declare the parameter as a nonconstant <B>CString</B> reference (<B>CString&amp;</B>).</P>



<H2><A NAME="_core_strings_as_function_outputs"></A>Strings as Function Outputs</H2>

<P>Normally you can return <B>CString</B> objects from functions because <B>CString</B> objects follow value semantics like primitive types. To return a read-only string, use a constant <B>CString</B> reference (<B>const CString&amp;</B>). The following example illustrates the use of <B>CString</B> parameters and return types:</P>

<PRE><CODE>class CName : public CObject
{
private:
    CString m_firstName;
    char m_middleInit;
    CString m_lastName;
public:
    CName() {}
    void SetData( LPCTSTR fn, const char mi, LPCTSTR ln )
    {
        m_firstName = fn;
        m_middleInit = mi;
        m_lastName = ln;
    }
    void GetData( CString&amp; cfn, char mi, CString&amp; cln )
    {
        cfn = m_firstName;
        mi = m_middleInit;
        cln = m_lastName;
    }
    CString GetLastName()
    {
        return m_lastName;
    }
};
...
CName name;
CString last, first;
TCHAR middle;
name.SetData( "John", 'Q', "Public" );
ASSERT( name.GetLastName() == "Public" );
name.GetData( first, middle, last );
ASSERT( ( first == "John" ) &amp;&amp; ( last == "Public" ) );
...
</CODE></PRE>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MBCS Support in Visual C++</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_mbcs_support_in_visual_c.2b2b"></A><SUP></SUP>MBCS Support in Visual C++</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_unicode_programming_tasks.htm">Unicode Tasks</A>  |&nbsp; <A HREF="_core_multibyte_character_set_.28.mbcs.29_.tasks.htm">Multibyte Character Set (MBCS) Tasks</A></P>

<P>When run on an MBCS-enabled version of the Windows 95 or Windows NT operating system, the Visual C++ development system, including the integrated source code editor, debugger, and command line tools, is completely MBCS-enabled. Visual C++ will accept double-byte characters wherever it is appropriate to do so. This includes path names and file names in dialog boxes, and text entries in the Visual C++ resource editor (for example, static text in the dialog editor and static text entries in the icon editor). In addition, the preprocessor recognizes some double-byte directives ? for example, file names in <B>#include</B> statements, and as arguments to the <B>code_seg</B> and <B>data_seg</B> pragmas. In the source code editor, double-byte characters in comments and string literals are accepted, although not in C/C++ language elements (such as variable names).</P>

<H2><A NAME="_core_support_for_the_input_method_editor_.28.ime.29"></A>Support for the Input Method Editor (IME)</H2>

<P>Applications written for Far East markets that use MBCS (for example, Japan) normally support the Windows IME for entering both single- and double-byte characters. The Visual C++ development environment contains full support for the IME.</P>

<P>Japanese keyboards do not directly support Kanji characters. The IME converts a phonetic string, entered in one of the other Japanese alphabets, Romaji, Katakana, or Hiragana, into its possible Kanji representations. If there is ambiguity, you can select from several alternatives. Once you have selected the intended Kanji character, the IME passes two <B>WM_CHAR</B> messages to the controlling application.</P>

<P>The IME, activated by the ALT+` key combination, appears as a set of buttons (an indicator) and a conversion window. The application positions the window at the text insertion point. The application must handle <B>WM_MOVE</B> and <B>WM_SIZE</B> messages by repositioning the conversion window to conform to the new location or size of the target window.</P>

<P>If you want users of your application to have the ability to enter Kanji characters, the application must handle Windows IME messages. For more information on IME programming, see the <I>Internationalization Handbook for Software Design</I> in the Microsoft Development Library.</P>

<H2>Visual C++ Debugger</H2>

<P>The Visual C++ debugger provides the ability to set breakpoints on IME messages. In addition, the Memory window can display double-byte characters.</P>

<H2>Command-Line Tools</H2>

<P>The Visual C++ command-line tools, including the compiler, NMAKE, and the resource compiler (RC.EXE), are MBCS-enabled. You can use the resource compiler’s /c option to change the default code page when compiling your application’s resources. </P>

<P>To change the default locale at source code compile time, use <A HREF="_predir_setlocale.htm">#pragma setlocale</A>.</P>

<H2>Graphical Tools</H2>

<P>The Visual C++ Windows-based tools, such as Spy++ and the resource editing tools, fully support IME strings.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_mbcs_programming_tips.htm">MBCS Programming Tips</A></P>
</font>
</BODY>
</HTML>

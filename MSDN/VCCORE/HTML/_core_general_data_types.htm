<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>General Data Types</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_Simple_Types_V5">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_general_data_types"></A><SUP></SUP>General Data Types</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_win32_programming.3a_.overview.htm">Overview</A> |&nbsp; <A HREF="_core_win32_programming_tasks.htm">How Do I</A></P>

<P>The following table summarizes the new standard types defined in WINDOWS.H. These types are polymorphic (they can contain different kinds of data) and are generally useful throughout applications. Other new types, handles, and function pointers also are introduced in other topics (listed in <A HREF="_core_new_types_and_macros.htm">New Types and Macros</A>). Also see <A HREF="JavaScript:hhobj_2.Click()">Simple Types</A> in the Win32 documentation. </P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=20%><B>Typedef</B></TD>
<TD class=label width=80%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>WINAPI</B></TD>
<TD width=80%>Use in place of <B>FAR PASCAL</B> in API declarations. If you are writing a DLL with exported API entry points, you can use this for your own APIs.</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>CALLBACK</B></TD>
<TD width=80%>Use in place of <B>FAR PASCAL</B> in application callback routines such as window procedures and dialog procedures.</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>LPCSTR</B></TD>
<TD width=80%>Same as <B>LPSTR</B>, except used for read-only string pointers. Defined as (<B>const char FAR*</B>).</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>UINT</B></TD>
<TD width=80%>Portable unsigned integer type whose size is determined by host environment (32 bits for Windows NT and Windows 95). Synonym for <B>unsigned int</B>. Used in place of <B>WORD</B> except in the rare cases where a 16-bit unsigned quantity is desired even on 32-bit platforms.</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>LRESULT</B></TD>
<TD width=80%>Type used for return value of window procedures.</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>LPARAM</B></TD>
<TD width=80%>Type used for declaration of lParam, the fourth parameter of a windows procedure.</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>WPARAM</B></TD>
<TD width=80%>Type used for declaration of wParam, the third parameter of a windows procedure (a polymorphic data type).</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>LPVOID</B></TD>
<TD width=80%>Generic pointer type, equivalent to <B>(void *)</B>. Should be used instead of <B>LPSTR</B>.</TD>
</TR>
</TABLE><BR>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_lfind</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__lfind"></A><SUP></SUP>_lfind</H1>

<P>Performs a linear search for the specified key.</P>

<P><B>void</B> <B>*_lfind(</B> <B>const</B> <B>void</B> <B>*</B><I>key</I><B>,</B> <B>const</B> <B>void</B> <B>*</B><I>base</I><B>,</B> <B>unsigned</B> <B>int</B> <B>*</B><I>num</I><B>,</B> <B>unsigned</B> <B>int</B> <I>width</I><B>,</B> <B>int</B> <B>(__cdecl</B> <B>*</B><I>compare</I><B>)(const</B> <B>void</B> <B>*</B><I>elem1</I><B>,</B> <B>const</B> <B>void</B> <B>*</B><I>elem2</I><B>)</B> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=15%><B>Routine</B></TD>
<TD class=label width=26%><B>Required Header</B></TD>
<TD class=label width=59%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=15%><B>_lfind</B></TD>
<TD width=26%>&lt;search.h&gt;</TD>
<TD width=59%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>If the key is found, <B>_lfind</B> returns a pointer to the element of the array at <I>base</I> that matches <I>key</I>. If the key is not found, <B>_lfind</B> returns <B>NULL</B>.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>key</I></P>

<P class=indent>Object to search for</P>

<P class=dt><I>base</I></P>

<P class=indent>Pointer to base of search data</P>

<P class=dt><I>num</I></P>

<P class=indent>Number of array elements</P>

<P class=dt><I>width</I></P>

<P class=indent>Width of array elements</P>

<P class=dt><I>compare</I></P>

<P class=indent>Pointer to comparison routine</P>

<P class=dt><I>elem1</I></P>

<P class=indent>Pointer to key for search</P>

<P class=dt><I>elem2</I></P>

<P class=indent>Pointer to array element to be compared with key</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_lfind</B> function performs a linear search for the value <I>key</I> in an array of <I>num</I> elements, each of <I>width</I> bytes in size. Unlike <B>bsearch</B>, <B>_lfind</B> does not require the array to be sorted. The <I>base</I> argument is a pointer to the base of the array to be searched. The <I>compare</I> argument is a pointer to a user-supplied routine that compares two array elements and then returns a value specifying their relationship. <B>_lfind</B> calls the <I>compare</I> routine one or more times during the search, passing pointers to two array elements on each call. The <I>compare</I> routine must compare the elements then return nonzero, meaning the elements are different, or 0, meaning the elements are identical.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* LFIND.C: This program uses _lfind to search for
 * the word "hello" in the command-line arguments.
 */

#include &lt;search.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

int compare( const void *arg1, const void *arg2 );

void main( unsigned int argc, char **argv )
{
   char **result;
   char *key = "hello";

   result = (char **)_lfind( &amp;key, argv, 
                      &amp;argc, sizeof(char *), compare );
   if( result )
      printf( "%s found\n", *result );
   else
      printf( "hello not found!\n" );
}

int compare(const void *arg1, const void *arg2 )
{
   return( _stricmp( * (char**)arg1, * (char**)arg2 ) );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>[C:\code]lfind Hello
Hello found

</CODE></PRE>

<P><A HREF="_crt_searching_and_sorting.htm">Searching and Sorting Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_bsearch.htm">bsearch</A>, <A HREF="_crt__lsearch.htm">_lsearch</A>, <A HREF="_crt_qsort.htm">qsort</A></P>
</font>
</BODY>
</HTML>

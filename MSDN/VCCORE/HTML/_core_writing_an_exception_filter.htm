<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing an Exception Filter</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_RaiseException">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_GetExceptionCode">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_writing_an_exception_filter"></A><SUP></SUP>Writing an Exception Filter</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_exception_handling_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.frequently_asked_questions.htm">FAQ</A></P>

<P>You can handle an exception either by jumping to the level of the exception handler or by continuing execution. Instead of using <I>statement-block-2</I> to handle the exception and falling through, you can use <I>filter</I> to clean up the problem and then, by returning –1, resume normal flow without clearing the stack.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Some exceptions cannot be continued. If <I>filter</I> evaluates to –1 for such an exception, the system raises a new exception. When you call <A HREF="JavaScript:hhobj_2.Click()">RaiseException</A>, you determine whether the exception will continue.</P>

<P>For example, the following code uses a function call in the <I>filter</I> expression: this function handles the problem and then returns –1 to resume normal flow of control:</P>

<PRE><CODE>main ()
{
    int Eval_Exception( void );

    __try {
    ...
    }
    __except ( Eval_Exception( GetExceptionCode( ))) {
       // No code; this block never executed.
}
...
}

int Eval_Exception ( int n_except )
{
    if ( n_except != STATUS_INTEGER_OVERFLOW &amp;&amp; 
        n_except != STATUS_FLOATING_OVERFLOW )    // Pass on most
        return EXCEPTION_CONTINUE_SEARCH;            //  exceptions

    // Execute some code to clean up problem

    ResetVars( 0 );      // ResetVars -- example function to initialize
                      //  data to 0
    return EXCEPTION_CONTINUE_EXECUTION;
}
</CODE></PRE>

<P>It is a good idea to use a function call in the <I>filter</I> expression whenever <I>filter</I> needs to do anything complex. Evaluating the expression causes execution of the function, in this case, <CODE>Eval_Exception</CODE>.</P>

<P>Note the use of <A HREF="JavaScript:hhobj_3.Click()">GetExceptionCode</A> to determine the exception. You must call this function inside the filter itself. <CODE>Eval_Exception</CODE> cannot call <B>GetExceptionCode</B>, but it must have the exception code passed to it.</P>

<P>This handler passes control to another handler unless the exception is an integer or floating-point overflow. If it is, the handler calls a function (<CODE>ResetVars</CODE> is only an example, not an API function) to reset some global variables. <I>Statement-block-2</I>, which in this example is empty, can never be executed because <CODE>Eval_Exception</CODE> never returns EXCEPTION_EXECUTE_HANDLER (1).</P>

<P>Using a function call is a good general-purpose technique for dealing with complex filter expressions. Two other C language features that are useful are:

<UL type=disc>
	<LI>The conditional operator<BR><BR></LI>

	<LI>The comma operator</LI>
</UL>

<P>The conditional operator is frequently useful, because it can be used to check for a specific return code and then return one of two different values. For example, the filter in the following code recognizes the exception only if the exception is <CODE>STATUS_INTEGER_OVERFLOW</CODE>:</P>

<PRE><CODE>__except( GetExceptionCode() == STATUS_INTEGER_OVERFLOW ? 1 : 0 ) {
</CODE></PRE>

<P>The purpose of the conditional operator in this case is mainly to provide clarity, because the following code produces the same results:</P>

<PRE><CODE>__except( GetExceptionCode() == STATUS_INTEGER_OVERFLOW ) {
</CODE></PRE>

<P>The conditional operator is more useful in situations where you might want the filter to evaluate to –1, EXCEPTION_CONTINUE_EXECUTION.</P>

<P>The comma operator enables you to perform multiple, independent operations inside a single expression. The effect is roughly that of executing multiple statements and then returning the value of the last expression. For example, the following code stores the exception code in a variable and then tests it:</P>

<PRE><CODE>__except( nCode = GetExceptionCode(), nCode == STATUS_INTEGER_OVERFLOW )
</CODE></PRE>
</font>
</BODY>
</HTML>

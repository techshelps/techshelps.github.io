<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiler Error C2143</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="c2143"></A><SUP></SUP>Compiler Error C2143</H1>

<P class=dt><B>syntax error : missing 'token1' before 'token2'</B></P>

<P>A syntax error is an error in the use of the language. A token is a language element such as a keyword or operator. Roughly translated, anything that is not whitespace (spaces, tabs, line feeds, comments, and so on) is a token.</P>

<P>The compiler expects certain language elements to appear before or after other elements. For instance, an <B>if</B> statement requires that the first non-whitespace character following the word <B>if</B> must be an opening parenthesis. If anything else is used, the compiler cannot “understand” the statement. For example:</P>

<PRE><CODE>if j &lt; 25    // syntax error : missing '(' before 'j'
</CODE></PRE>

<P>This error can also be caused by a missing closing brace ‘}’, right parenthesis ‘)’, or semicolon ‘;’. The missing token may belong on the line above where the error was actually detected and reported.</P>

<P>This error can also be caused by an invalid tag in a class declaration. The following are examples of these errors:</P>

<PRE><CODE>class X
{
   int member
} x;          // error, missing ; on previous line
class + {};   // error, + is an invalid tag name</CODE></PRE>

<P>This error can also be caused by placing a label by itself without being attached to a statement. If you need to place a label by itself, for example at the end of a compound statement, it can be attached to a null statement.</P>

<P>The following is an example of this error:</P>

<PRE><CODE>void func1()
{
   end:      // error
}            // this line is not a statement
void func2()
{
   end:      // OK
    ;        // this label attached to null statement
}</CODE></PRE>

<P>This error can also be caused when the ANSI compatibility option (/Za) is in effect and the source code contains single line comments.</P>

<P>The following is an example of this error:</P>

<PRE><CODE>int i;    // syntax error : missing ';' before 'division operator'
int j;    /* no error */</CODE></PRE>

<P>In the first case, the first single line comment character, ‘/’, is interpreted as a division operator since single line comments are not valid according to the ANSI C language standard. However, single line comments are legal in the C++ language. </P>

<P class=label><B>Tips</B>

<UL type=disc>
	<LI>Check the <A HREF="_langref_c.2f.c.2b2b_.keywords.htm">C/C++ Language Quick Reference</A> to determine where the code is syntactically incorrect. <BR><BR></LI>

	<LI>Since this error is sometimes detected after the line where the error actually occurred, check a few lines up in the code for the syntax error.<BR><BR></LI>

	<LI>Do not use the /Za compiler switch if you want to use single line comments in a C language file.</LI>
</UL>
</font>
</BODY>
</HTML>

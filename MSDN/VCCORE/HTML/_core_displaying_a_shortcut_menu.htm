<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Displaying a Shortcut Menu</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_displaying_a_shortcut_menu"></A>Displaying a Shortcut Menu</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_win32_programming.3a_.overview.htm">Overview</A> |&nbsp; <A HREF="_core_win32_programming_tasks.htm">How Do I</A></P>

<P>It’s recommended that your Windows 95 application use the right mouse button for displaying a shortcut menu, providing easy access to the most commonly used commands. What commands you offer on your shortcut menu will depend on whether the menu is invoked for a particular window, a particular object, and so on. See <I>Windows Interface Guidelines for Software Design</I> on the MSDN Library CD for guidelines on what kind of commands you should offer. </P>

<P>You can use the Gallery to add a shortcut menu that applies to a given view class in your application. However, DRAWCLI displays the shortcut menu only when the right button is clicked over a selected object. Depending on your own application’s needs, you can use the shortcut menu offered by the Gallery as is, you can make modifications as required, or you can add one manually.</P>

<P>The DRAWCLI sample provides a shortcut menu containing several commands from the Edit menu. </P>

<P>To add a shortcut menu to your application, first use the Visual C++ menu editor to create a menu bar without a title, and then define the shortcut menu as the first menu.</P>

<P>To display the shortcut menu, your application needs a handler for the <B>WM_CONTEXTMENU</B> message. You can use ClassWizard to make the following changes to your source files:

<UL type=disc>
	<LI>Add a declaration for an <B>OnContextMenu</B> member function in the declaration of your view class. <BR><BR></LI>

	<LI>Add an <B>ON_WM_CONTEXTMENU</B> macro in the message map for your view class.<BR><BR></LI>

	<LI>Add a skeletal definition for the <B>OnContextMenu</B> member function. </LI>
</UL>

<P>You then fill in the definition of <B>OnContextMenu</B>. Here’s DRAWCLI’s implementation of <CODE>CDrawView::OnContextMenu</CODE>: </P>

<PRE><CODE>void CDrawView::OnContextMenu(CWnd* /*pWnd*/, CPoint point) 
{
   // make sure window is active
   GetParentFrame()-&gt;ActivateFrame();

   CPoint local = point;
   ScreenToClient(&amp;local);
   ClientToDoc(local);

   CDrawObj* pObj;
   pObj = GetDocument()-&gt;ObjectAt(local);
   if (pObj != NULL)
   {
      if (!IsSelected(pObj))
         Select(pObj, FALSE);
      UpdateWindow();

      CMenu menu;
      if (menu.LoadMenu(ID_POPUP_MENU))
      {
         CMenu* pPopup = menu.GetSubMenu(0);
         ASSERT(pPopup != NULL);

         pPopup-&gt;TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON,
            point.x, point.y,
            AfxGetMainWnd()); // use main window for cmds
      }
   }
}
</CODE></PRE>

<P>DRAWCLI displays a pop-up menu only when the right mouse button is clicked over an object, so this function first checks whether an object lies where the mouse event occurred, and if so, the function selects it. (<B>OnContextMenu</B> receives the location of the mouse event in screen coordinates, not in client coordinates like handlers such as <B>OnLButtonDown</B>. Accordingly, the function converts the coordinates using <B>CWnd::ScreenToClient</B> before doing hit-testing.) The function then loads the ID_POPUP_MENU menu and calls <B>CMenu::GetSubMenu</B> to get its first sub-menu. Finally, the function calls <B>CMenu::TrackPopupMenu</B> on the submenu to display it as a pop-up. </P>

<P>Note that, as long as the pop-up menu commands are duplicates of commands you’ve defined elsewhere, there’s no need to define any new <B>ON_COMMAND</B> or <B>ON_UPDATE_COMMAND_UI</B> macros. </P>

<P>You can also support shortcut menus in the Windows 95 shell. A shortcut menu that offers basic commands such as Delete and Rename is available for all files in the shell. Some commands, such as Open or Print, are enabled only if there is an application associated with the file’s extension. You can enable these commands for files created by your MFC application by calling <B>CWinApp::RegisterShellFileTypes</B>, passing <B>TRUE</B> as a parameter; the parameter is needed for shell registration to work properly under Windows 95. (AppWizard inserts a call to this automatically if you specify a file name extension for your files.) This function adds entries to the system registry that let the shell invoke your application to open or print a file. You can also write a shell-extension DLL that customizes the shortcut menu for your application’s files; for more information, see Context Menu Handlers on the MSDN Library CD. </P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_expand_dbg</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__expand_dbg"></A><SUP></SUP>_expand_dbg</H1>

<P>Resizes a specified block of memory in the heap by expanding or contracting the block (debug version only).</P>

<P><B>void</B> <B>*_expand_dbg(</B> <B>void</B> *<I>userData</I><B>,</B> <B>size_t</B> <I>newSize</I><B>,</B> <B>int</B> <I>blockType</I><B>,</B> <B>const char</B> *<I>filename</I><B>,</B> <B>int</B> <I>linenumber</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=22%><B>Routine</B></TD>
<TD class=label width=26%><B>Required Header</B></TD>
<TD class=label width=52%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>_expand_dbg</B></TD>
<TD width=26%>&lt;crtdbg.h&gt;</TD>
<TD width=52%>Win NT, Win 95</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBCD.LIB</TD>
<TD width=76%>Single thread static library, debug version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMTD.LIB</TD>
<TD width=76%>Multithread static library, debug version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRTD.LIB</TD>
<TD width=76%>Import library for MSVCRTD.DLL, debug version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>Upon successful completion, <B>_expand_dbg</B> returns a pointer to the resized memory block, otherwise it returns NULL.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>userData</I></P>

<P class=indent>Pointer to the previously allocated memory block</P>

<P class=dt><I>newSize</I></P>

<P class=indent>Requested new size for block (bytes)</P>

<P class=dt><I>blockType</I></P>

<P class=indent>Requested type for resized block: <B>_CLIENT_BLOCK</B> or <B>_NORMAL_BLOCK</B></P>

<P class=dt><I>filename</I></P>

<P class=indent>Pointer to name of source file that requested expand operation or NULL</P>

<P class=dt><I>linenumber</I></P>

<P class=indent>Line number in source file where expand operation was requested or NULL</P>

<P>The <I>filename</I> and <I>linenumber</I> parameters are only available when <B>_expand_dbg</B> has been called explicitly or the <A HREF="_crt__crtdbg_map_alloc.htm">_CRTDBG_MAP_ALLOC</A> preprocessor constant has been defined.</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_expand_dbg</B> function is a debug version of the _<A HREF="_crt__expand.htm">expand</A> function. When <A HREF="_crt__debug.htm">_DEBUG</A> is not defined, calls to <B>_expand_dbg</B> are removed during preprocessing. Both <B>_expand</B> and <B>_expand_dbg</B> resize a memory block in the base heap, but <B>_expand_dbg</B> accomodates several debugging features: buffers on either side of the user portion of the block to test for leaks, a block type parameter to track specific allocation types, and <I>filename</I>/<I>linenumber</I> information to determine the origin of allocation requests.</P>

<P><B>_expand_dbg</B> resizes the specified memory block with slightly more space than the requested <I>newSize</I>. <I>newSize</I> may be greater or less than the size of the originally allocated memory block. The additional space is used by the debug heap manager to link the debug memory blocks together and to provide the application with debug header information and overwrite buffers. The resize is accomplished by either expanding or contracting the original memory block. <B>_expand_dbg</B> does <I>not</I> move the memory block, as does the <A HREF="_crt__realloc_dbg.htm">_realloc_dbg</A> function.</P>

<P>When <I>newSize</I> is greater than the original block size, the memory block is expanded. During an expansion, if the memory block cannot be expanded to accommodate the requested size, the block is expanded as much as possible. When <I>newSize</I> is less than the original block size, the memory block is contracted until the new size is obtained.</P>

<P>For information about how memory blocks are allocated, initialized, and managed in the debug version of the base heap, see <A HREF="_core_memory_management_and_the_debug_heap.htm">Memory Management and the Debug Heap</A>. For information about the allocation block types and how they are used, see <A HREF="_core_types_of_blocks_on_the_debug_heap.htm">Types of Blocks on the Debug Heap</A>.. For information on the differences between calling a standard heap function versus its debug version in a debug build of an application, see <A HREF="_core_using_the_debug_version_versus_the_base_version.htm">Using the Debug Version Versus the Base Version</A>..</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/*
 * EXPANDD.C
 * This program allocates a block of memory using _malloc_dbg
 * and then calls _msize_dbg to display the size of that block.
 * Next, it uses _expand_dbg to expand the amount of
 * memory used by the buffer and then calls _msize_dbg again to
 * display the new amount of memory allocated to the buffer.
 */

#include &lt;stdio.h&gt;
#include &lt;malloc.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;crtdbg.h&gt;

void main( void )
{
        long *buffer;
        size_t size;

        /* 
         * Call _malloc_dbg to include the filename and line number
         * of our allocation request in the header
         */
        buffer = (long *)_malloc_dbg( 40 * sizeof(long), _NORMAL_BLOCK, __FILE__, __LINE__ );
        if( buffer == NULL )
               exit( 1 );

        /* 
         * Get the size of the buffer by calling _msize_dbg
         */
        size = _msize_dbg( buffer, _NORMAL_BLOCK );
        printf( "Size of block after _malloc_dbg of 40 longs: %u\n", size );

        /* 
         * Expand the buffer using _expand_dbg and show the new size
         */
        buffer = _expand_dbg( buffer, size + (40 * sizeof(long)), _NORMAL_BLOCK, __FILE__, __LINE__ );
        if( buffer == NULL )
               exit( 1 );
        size = _msize_dbg( buffer, _NORMAL_BLOCK );
        printf( "Size of block after _expand_dbg of 40 more longs: %u\n", size );

        free( buffer );
        exit( 0 );
}
</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Size of block after _malloc_dbg of 40 longs: 160
Size of block after _expand_dbg of 40 more longs: 320

</CODE></PRE>

<P><A HREF="_crt_debug_functions.htm">Debug Functions</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__malloc_dbg.htm">_malloc_dbg</A></P>
</font>
</BODY>
</HTML>

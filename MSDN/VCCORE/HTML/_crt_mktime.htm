<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>mktime</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_mktime"></A><SUP></SUP>mktime</H1>

<P>Converts the local time to a calendar value.</P>

<P><B>time_t</B> <B>mktime(</B> <B>struct</B> <B>tm</B> <B>*</B><I>timeptr</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=56%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>mktime</B></TD>
<TD width=27%>&lt;time.h&gt;</TD>
<TD width=56%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>mktime</B> returns the specified calendar time encoded as a value of type <A HREF="_crt_standard_types.htm">time_t</A>. If <I>timeptr</I> references a date before midnight, January 1, 1970, or if the calendar time cannot be represented, the function returns –1 cast to type <B>time_t</B>.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>timeptr</I></P>

<P class=indent>Pointer to time structure</P>

<P class=label><B>Remarks</B></P>

<P>The <B>mktime</B> function converts the supplied time structure (possibly incomplete) pointed to by <I>timeptr</I> into a fully defined structure with normalized values and then converts it to a <B>time_t</B> calendar time value. For description of <B>tm</B> structure fields, see <A HREF="_crt_asctime.2c_._wasctime.htm">asctime</A>. The converted time has the same encoding as the values returned by the <B>time</B> function. The original values of the <B>tm_wday</B> and <B>tm_yday</B> components of the <I>timeptr</I> structure are ignored, and the original values of the other components are not restricted to their normal ranges.</P>

<P><B>mktime</B> handles dates in any time zone from midnight, January 1, 1970, to January 18, 19:14:07, 2038. If successful, <B>mktime</B> sets the values of <B>tm_wday</B> and <B>tm_yday</B> as appropriate and sets the other components to represent the specified calendar time, but with their values forced to the normal ranges; the final value of <B>tm_mday</B> is not set until <B>tm_mon</B> and <B>tm_year</B> are determined. When specifying a <B>tm</B> structure time, set the <B>tm_isdst</B> field to 0 to indicate that standard time is in effect, or to a value greater than 0 to indicate that daylight savings time is in effect, or to a value less than zero to have the C run-time library code compute whether standard time or daylight savings time is in effect. (The C run-time library assumes the United States’s rules for implementing the calculation of Daylight Saving Time). <B>tm_isdst</B> is a required field. If not set, its value is undefined and the return value from <B>mktime</B> is unpredictable. If <I>timeptr</I> points to a <B>tm</B> structure returned by a previous call to <B>asctime</B>, <B>gmtime</B>, or <B>localtime</B>, the <B>tm_isdst</B> field contains the correct value.</P>

<P>Note that <B>gmtime</B> and <B>localtime</B> use a single statically allocated buffer for the conversion. If you supply this buffer to <B>mktime</B>, the previous contents are destroyed.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* MKTIME.C: The example takes a number of days
 * as input and returns the time, the current
 * date, and the specified number of days.
 */

#include &lt;time.h&gt;
#include &lt;stdio.h&gt;

void main( void )
{
   struct tm when;
   time_t now, result;
   int    days;

   time( &amp;now );
   when = *localtime( &amp;now );
   printf( "Current time is %s\n", asctime( &amp;when ) );
   printf( "How many days to look ahead: " );
   scanf( "%d", &amp;days );

   when.tm_mday = when.tm_mday + days;
   if( (result = mktime( &amp;when )) != (time_t)-1 )
      printf( "In %d days the time will be %s\n", 
              days, asctime( &amp;when ) );
   else
      perror( "mktime failed" );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Current time is Tue May 03 12:45:47 1994

How many days to look ahead: 29
In 29 days the time will be Wed Jun 01 12:45:47 1994

</CODE></PRE>

<P><A HREF="_crt_time_management.htm">Time Management Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_asctime.2c_._wasctime.htm">asctime</A>, <A HREF="_crt_gmtime.htm">gmtime</A>, <A HREF="_crt_localtime.htm">localtime</A>, <A HREF="_crt_time.htm">time</A></P>
</font>
</BODY>
</HTML>

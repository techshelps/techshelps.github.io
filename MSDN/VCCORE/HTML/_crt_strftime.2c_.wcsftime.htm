<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>strftime, wcsftime</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_strftime.2c_.wcsftime"></A><SUP></SUP>strftime, wcsftime</H1>

<P>Format a time string.</P>

<P><B>size_t</B> <B>strftime(</B> <B>char</B> <B>*</B><I>strDest</I><B>,</B> <B>size_t</B> <I>maxsize</I><B>,</B> <B>const</B> <B>char</B> <B>*</B><I>format</I><B>,</B> <B>const</B> <B>struct</B> <B>tm</B> <B>*</B><I>timeptr</I> <B>);</B></P>

<P><B>size_t</B> <B>wcsftime(</B> <B>wchar_t</B> <B>*</B><I>strDest</I><B>,</B> <B>size_t</B> <I>maxsize</I><B>,</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>format</I><B>,</B> <B>const</B> <B>struct</B> <B>tm</B> <B>*</B><I>timeptr</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=32%><B>Required Header</B></TD>
<TD class=label width=51%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>strftime</B></TD>
<TD width=32%>&lt;time.h&gt;</TD>
<TD width=51%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>wcsftime</B></TD>
<TD width=32%>&lt;time.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=51%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>strftime</B> returns the number of characters placed in <I>strDest</I> if the total number of resulting characters, including the terminating null, is not more than <I>maxsize</I>. <B>wcsftime</B> returns the corresponding number of wide characters. Otherwise, the functions return 0, and the contents of <I>strDest</I> is indeterminate.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>strDest</I></P>

<P class=indent>Output string</P>

<P class=dt><I>maxsize</I></P>

<P class=indent>Maximum length of string</P>

<P class=dt><I>format</I></P>

<P class=indent>Format-control string</P>

<P class=dt><I>timeptr</I></P>

<P class=indent><B>tm</B> data structure</P>

<P class=label><B>Remarks</B></P>

<P>The <B>strftime</B> and <B>wcsftime</B> functions format the <B>tm</B> time value in <I>timeptr</I> according to the supplied <I>format</I> argument and store the result in the buffer <I>strDest.</I> At most, <I>maxsize</I> characters are placed in the string. For a description of the fields in the <I>timeptr</I> structure, see <A HREF="_crt_asctime.2c_._wasctime.htm">asctime</A>. <B>wcsftime</B> is the wide-character equivalent of <B>strftime</B>; its string-pointer argument points to a wide-character string. These functions behave identically otherwise.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Prior to this version of Visual C++, the documentation described the <I>format </I>parameter of <B>wcsftime</B> as having the datatype <B>const wchar_t *</B>, but the actual implementation of the <I>format </I>datatype was <B>const char *</B>. In this version, the implementation of the <I>format </I>datatype has been updated to reflect the previous and current documentation, that is: <B>const wchar_t *</B>.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tcsftime</TD>
<TD width=29%>strftime </TD>
<TD width=26%>strftime</TD>
<TD width=28%>wcsftime</TD>
</TR>
</TABLE><BR>

<P>The <I>format</I> argument consists of one or more codes; as in <B>printf</B>, the formatting codes are preceded by a percent sign (<B>%</B>). Characters that do not begin with <B>%</B> are copied unchanged to <I>strDest.</I> The <B>LC_TIME</B> category of the current locale affects the output formatting of <B>strftime</B>.(For more information on <B>LC_TIME</B>, see <A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A>.) The formatting codes for <B>strftime</B> are listed below:</P>

<P class=dt><B>%a</B></P>

<P class=indent>Abbreviated weekday name</P>

<P class=dt><B>%A</B></P>

<P class=indent>Full weekday name</P>

<P class=dt><B>%b</B></P>

<P class=indent>Abbreviated month name</P>

<P class=dt><B>%B</B></P>

<P class=indent>Full month name</P>

<P class=dt><B>%c</B></P>

<P class=indent>Date and time representation appropriate for locale</P>

<P class=dt><B>%d</B></P>

<P class=indent>Day of month as decimal number (01 – 31)</P>

<P class=dt><B>%H</B></P>

<P class=indent>Hour in 24-hour format (00 – 23)</P>

<P class=dt><B>%I</B></P>

<P class=indent>Hour in 12-hour format (01 – 12)</P>

<P class=dt><B>%j</B></P>

<P class=indent>Day of year as decimal number (001 – 366)</P>

<P class=dt><B>%m</B></P>

<P class=indent>Month as decimal number (01 – 12)</P>

<P class=dt><B>%M</B></P>

<P class=indent>Minute as decimal number (00 – 59)</P>

<P class=dt><B>%p</B></P>

<P class=indent>Current locale’s A.M./P.M. indicator for 12-hour clock</P>

<P class=dt><B>%S</B></P>

<P class=indent>Second as decimal number (00 – 59)</P>

<P class=dt><B>%U</B></P>

<P class=indent>Week of year as decimal number, with Sunday as first day of week (00 – 53)</P>

<P class=dt><B>%w</B></P>

<P class=indent>Weekday as decimal number (0 – 6; Sunday is 0)</P>

<P class=dt><B>%W</B></P>

<P class=indent>Week of year as decimal number, with Monday as first day of week (00 – 53)</P>

<P class=dt><B>%x</B></P>

<P class=indent>Date representation for current locale</P>

<P class=dt><B>%X</B></P>

<P class=indent>Time representation for current locale</P>

<P class=dt><B>%y</B></P>

<P class=indent>Year without century, as decimal number (00 – 99)</P>

<P class=dt><B>%Y</B></P>

<P class=indent>Year with century, as decimal number</P>

<P class=dt><B>%z</B>, <B>%Z</B></P>

<P class=indent>Time-zone name or abbreviation; no characters if time zone is unknown</P>

<P class=dt><B>%%</B></P>

<P class=indent>Percent sign</P>

<P>As in the <B>printf</B> function, the <B>#</B> flag may prefix any formatting code. In that case, the meaning of the format code is changed as follows.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=39%><B>Format Code</B></TD>
<TD class=label width=61%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=39%><B>%#a</B>, <B>%#A</B>, <B>%#b</B>, <B>%#B</B>, <B>%#p</B>, <B>%#X</B>, <B>%#z</B>, <B>%#Z</B>, <B>%#%</B></TD>
<TD width=61%><B>#</B> flag is ignored.</TD>
</TR>

<TR VALIGN="top">
<TD width=39%><B>%#c</B></TD>
<TD width=61%>Long date and time representation, appropriate for current locale. For example: “Tuesday, March 14, 1995, 12:41:29”.</TD>
</TR>

<TR VALIGN="top">
<TD width=39%><B>%#x</B></TD>
<TD width=61%>Long date representation, appropriate to current locale. For example: “Tuesday, March 14, 1995”.</TD>
</TR>

<TR VALIGN="top">
<TD width=39%><B>%#d</B>, <B>%#H</B>, <B>%#I</B>, <B>%#j</B>, <B>%#m</B>, <B>%#M</B>, <B>%#S</B>, <B>%#U</B>, <B>%#w</B>, <B>%#W</B>, <B>%#y</B>, <B>%#Y</B></TD>
<TD width=61%>Remove leading zeros (if any).</TD>
</TR>
</TABLE><BR>

<P class=label><B>Example</B></P>

<PRE><CODE>/* TIMES.C illustrates various time and date functions including:
 *      time            _ftime          ctime       asctime
 *      localtime       gmtime          mktime      _tzset
 *      _strtime        _strdate        strftime
 *
 * Also the global variable:
 *      _tzname
 */

#include &lt;time.h&gt;
#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/timeb.h&gt;
#include &lt;string.h&gt;

void main()
{
    char tmpbuf[128], ampm[] = "AM";
    time_t ltime;
    struct _timeb tstruct;
    struct tm *today, *gmt, xmas = { 0, 0, 12, 25, 11, 93 };

    /* Set time zone from TZ environment variable. If TZ is not set,
     * the operating system is queried to obtain the default value 
     * for the variable. 
     */
    _tzset();

    /* Display operating system-style date and time. */
    _strtime( tmpbuf );
    printf( "OS time:\t\t\t\t%s\n", tmpbuf );
    _strdate( tmpbuf );
    printf( "OS date:\t\t\t\t%s\n", tmpbuf );

    /* Get UNIX-style time and display as number and string. */
    time( &amp;ltime );
    printf( "Time in seconds since UTC 1/1/70:\t%ld\n", ltime );
    printf( "UNIX time and date:\t\t\t%s", ctime( &amp;ltime ) );

    /* Display UTC. */
    gmt = gmtime( &amp;ltime );
    printf( "Coordinated universal time:\t\t%s", asctime( gmt ) );

    /* Convert to time structure and adjust for PM if necessary. */
    today = localtime( &amp;ltime );
    if( today-&gt;tm_hour &gt; 12 )
    {
   strcpy( ampm, "PM" );
   today-&gt;tm_hour -= 12;
    }
    if( today-&gt;tm_hour == 0 )  /* Adjust if midnight hour. */
   today-&gt;tm_hour = 12;

    /* Note how pointer addition is used to skip the first 11 
     * characters and printf is used to trim off terminating 
     * characters.
     */
    printf( "12-hour time:\t\t\t\t%.8s %s\n",
       asctime( today ) + 11, ampm );

    /* Print additional time information. */
    _ftime( &amp;tstruct );
    printf( "Plus milliseconds:\t\t\t%u\n", tstruct.millitm );
    printf( "Zone difference in seconds from UTC:\t%u\n", 
             tstruct.timezone );
    printf( "Time zone name:\t\t\t\t%s\n", _tzname[0] );
    printf( "Daylight savings:\t\t\t%s\n", 
             tstruct.dstflag ? "YES" : "NO" );

    /* Make time for noon on Christmas, 1993. */
    if( mktime( &amp;xmas ) != (time_t)-1 )
   printf( "Christmas\t\t\t\t%s\n", asctime( &amp;xmas ) );

    /* Use time structure to build a customized time string. */
    today = localtime( &amp;ltime );

    /* Use strftime to build a customized time string. */
    strftime( tmpbuf, 128,
         "Today is %A, day %d of %B in the year %Y.\n", today );
    printf( tmpbuf );
}


</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>OS time:                                21:51:03
OS date:                                05/03/94
Time in seconds since UTC 1/1/70:       768027063
UNIX time and date:                     Tue May 03 21:51:03 1994
Coordinated universal time:             Wed May 04 04:51:03 1994
12-hour time:                           09:51:03 PM
Plus milliseconds:                      279
Zone difference in seconds from UTC:    480
Time zone name:                         
Daylight savings:                       YES
Christmas                               Sat Dec 25 12:00:00 1993

Today is Tuesday, day 03 of May in the year 1994.

</CODE></PRE>

<P><A HREF="_crt_locale.htm">Locale Routines</A>, <A HREF="_crt_time_management.htm">Time Management Routines</A>  |&nbsp; <A HREF="_crt_string_manipulation.htm">String Manipulation Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_localeconv.htm">localeconv</A>, <A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A>, <A HREF="_crt_strcoll.2c_.wcscoll.2c_._mbscoll.htm">strcoll</A>, <A HREF="_crt__stricoll.2c_._wcsicoll.2c_._mbsicoll.htm">_stricoll</A>, <A HREF="_crt_strxfrm.2c_.wcsxfrm.htm">strxfrm</A></P>
</font>
</BODY>
</HTML>

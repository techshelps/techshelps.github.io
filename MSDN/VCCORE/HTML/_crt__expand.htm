<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_expand</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__expand"></A><SUP></SUP>_expand</H1>

<P>Changes the size of a memory block.</P>

<P><B>void</B> <B>*_expand(</B> <B>void</B> <B>*</B><I>memblock</I><B>,</B> <B>size_t</B> <I>size</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Function</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=57%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_expand</B></TD>
<TD width=27%>&lt;malloc.h&gt;</TD>
<TD width=57%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>_expand</B> returns a void pointer to the reallocated memory block. <B>_expand</B>, unlike <B>realloc</B>, cannot move a block to change its size. Thus, if there is sufficient memory available to expand the block without moving it, the <I>memblock</I> parameter to <B>_expand</B> is the same as the return value.</P>

<P><B>_expand</B> returns <B>NULL</B> when an error is detected during its operation. For example, if <B>_expand</B> is used to shrink a memory block, it might detect a corruption in the small block heap or an invalid block pointer and return <B>NULL</B>.</P>

<P>if there is insufficient memory available to expand the block to the given size without moving it. The item pointed to by <I>memblock</I> is expanded as much as possible in its current location. </P>

<P>The return value points to a storage space that is guaranteed to be suitably aligned for storage of any type of object. To check the new size of the item, use <B>_msize</B>. To get a pointer to a type other than <B>void</B>, use a type cast on the return value.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>memblock</I></P>

<P class=indent>Pointer to previously allocated memory block</P>

<P class=dt><I>size</I></P>

<P class=indent>New size in bytes</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_expand</B> function changes the size of a previously allocated memory block by trying to expand or contract the block without moving its location in the heap. The <I>memblock</I> parameter points to the beginning of the block. The <I>size</I> parameter gives the new size of the block, in bytes. The contents of the block are unchanged up to the shorter of the new and old sizes. <I>memblock</I> can also point to a block that has been freed, as long as there has been no intervening call to <B>calloc</B>, <B>_expand</B>, <B>malloc</B>, or <B>realloc</B>. If <I>memblock</I> points to a freed block, the block remains free after a call to <B>_expand</B>.</P>

<P>When the application is linked with a debug version of the C run-time libraries, _<B>expand</B> resolves to <A HREF="_crt__expand_dbg.htm">_expand_dbg</A>. For more information about how the heap is managed during the debugging process, see <A HREF="_core_using_c_run.2d.time_library_debugging_support.htm">Using C Run-Time Library Debugging Support</A>.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* EXPAND.C */

#include &lt;stdio.h&gt;
#include &lt;malloc.h&gt;
#include &lt;stdlib.h&gt;

void main( void )
{
   char *bufchar;
   printf( "Allocate a 512 element buffer\n" );
   if( (bufchar = (char *)calloc( 512, sizeof( char ) )) == NULL )
      exit( 1 );
   printf( "Allocated %d bytes at %Fp\n", 
         _msize( bufchar ), (void *)bufchar );
   if( (bufchar = (char *)_expand( bufchar, 1024 )) == NULL )
      printf( "Can't expand" );
   else
      printf( "Expanded block to %d bytes at %Fp\n", 
            _msize( bufchar ), (void *)bufchar );
   /* Free memory */
   free( bufchar );
   exit( 0 );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Allocate a 512 element buffer
Allocated 512 bytes at 002C12BC
Expanded block to 1024 bytes at 002C12BC

</CODE></PRE>

<P><A HREF="_crt_memory_allocation.htm">Memory Allocation Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_calloc.htm">calloc</A>, <A HREF="_crt_free.htm">free</A>, <A HREF="_crt_malloc.htm">malloc</A>, <A HREF="_crt__msize.htm">_msize</A>, <A HREF="_crt_realloc.htm">realloc </A></P>
</font>
</BODY>
</HTML>

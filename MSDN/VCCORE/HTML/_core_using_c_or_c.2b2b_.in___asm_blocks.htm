<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using C or C++ in __asm Blocks</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_using_c_or_c.2b2b_.in___asm_blocks"></A>Using C or C++ in __asm Blocks</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_assembler_.28.inline.293a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_assembler_.28.inline.29_.tasks.htm">How Do I</A></P>

<P>Because inline assembly instructions can be mixed with C or C++ statements, they can refer to C or C++ variables by name and use many other elements of those languages.</P>

<P>An <B>__asm</B> block can use the following language elements:

<UL type=disc>
	<LI>Symbols, including labels and variable and function names<BR><BR></LI>

	<LI>Constants, including symbolic constants and <B>enum</B> members<BR><BR></LI>

	<LI>Macros and preprocessor directives<BR><BR></LI>

	<LI>Comments (both <B>/* */</B> and <B>//</B> )<BR><BR></LI>

	<LI>Type names (wherever a MASM type would be legal)<BR><BR></LI>

	<LI><B>typedef</B> names, generally used with operators such as <B>PTR</B> and <B>TYPE</B> or to specify structure or union members</LI>
</UL>

<P>Within an <B>__asm</B> block, you can specify integer constants with either C notation or assembler radix notation (0x100 and 100h are equivalent, for example). This allows you to define (using <B>#define</B>) a constant in C and then use it in both C or C++ and assembly portions of the program. You can also specify constants in octal by preceding them with a 0. For example, 0777 specifies an octal constant.</P>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_using_operators_in___asm_blocks.htm">Using Operators in __asm Blocks</A><BR><BR></LI>

	<LI><A HREF="_core_using_c_or_c.2b2b_.symbols_in___asm_blocks.htm">Using C or C++ Symbols_in __asm Blocks</A><BR><BR></LI>

	<LI><A HREF="_core_accessing_c_or_c.2b2b_.data_in___asm_blocks.htm">Accessing C or C++ Data in __asm Blocks</A><BR><BR></LI>

	<LI><A HREF="_core_writing_functions_with_inline_assembly.htm">Writing Functions with Inline Assembly</A></LI>
</UL>
</font>
</BODY>
</HTML>

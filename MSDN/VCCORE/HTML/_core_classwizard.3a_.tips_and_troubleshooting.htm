<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ClassWizard: Tips and Troubleshooting</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Scribble start">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_classwizard.3a_.tips_and_troubleshooting"></A>ClassWizard: Tips and Troubleshooting</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_working_with_classes.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_working_with_classes_tasks.htm">How Do I</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A></P>

<P>This article summarizes key tips and troubleshooting advice for using ClassWizard effectively. The following topics are covered:

<UL type=disc>
	<LI><A HREF="#_core_using_classwizard_tab_dialogs">Using ClassWizard tab dialogs</A><BR><BR></LI>

	<LI><A HREF="#_core_adding_functions_with_classwizard">Adding functions with ClassWizard</A><BR><BR></LI>

	<LI><A HREF="#_core_adding_variables_with_classwizard">Adding variables with ClassWizard</A><BR><BR></LI>

	<LI><A HREF="#_core_adding_code_from_classwizard">Adding code from ClassWizard</A><BR><BR></LI>

	<LI><A HREF="#_core_opening_your_..rc_file">Opening your .rc file</A></LI>
</UL>

<H2><A NAME="_core_using_classwizard_tab_dialogs"></A>Using ClassWizard Tab Dialogs</H2>

<P>ClassWizard has a "tab dialog" user interface: the ClassWizard dialog box contains "tabs" that resemble the tabs on a group of file folders. Each tab's label shows what kind of functionality you can edit on that tab. To select a tab, click its label. Use the following tips:

<UL type=disc>
	<LI>Use the Message Maps tab to browse the messages that a class can handle or to create, edit, or delete the member functions mapped to the messages. Use the Edit Code button to jump to a message handler function's code in the Visual C++ source code editor.<BR><BR></LI>

	<LI>Use the Member Variables tab to bind member variables to dialog, form view, or record view controls. You can also bind record view member variables both to record view controls and to the columns of a table in your data source. <BR><BR></LI>

	<LI>Use the Automation tab to create and edit the Automation capabilities of your application. For example, you can create Automation properties and methods.<BR><BR></LI>

	<LI>Use the ActiveX Events tab to specify actions that will cause your ActiveX control to fire events. For example, you can specify that a mouse click on your control fires a particular event that the control's container responds to with a handler. Note that this tab is for ActiveX control developers. If you are using an ActiveX control in your dialog box and want to handle events, use the Message Maps tab just as you would for handling messages.<BR><BR></LI>

	<LI>Use the Class Info tab to browse and set general class options. You can set a class's message filter to determine what messages ClassWizard offers to map to handlers in your class. You can also view or set a "foreign object" associated with your dialog form view or record view class. For information about foreign objects, see the article <A HREF="_core_classwizard.3a_.foreign_objects.htm">ClassWizard: Foreign Objects</A>. </LI>
</UL>

<H2><A NAME="_core_adding_functions_with_classwizard"></A>Adding Functions with ClassWizard</H2>

<P>ClassWizard lets you create handler functions and connect them to the menu items, toolbar buttons, and accelerators whose commands they respond to. Use the following tips:

<UL type=disc>
	<LI>To connect a dialog box or other user-interface object to a menu command or toolbar button with ClassWizard, you must first create the dialog box, menu entry, or toolbar button and its object ID using the appropriate Visual C++ resource editor.<BR><BR></LI>

	<LI>You can bind more than one user-interface object to a single function. You can bind both a menu command and a toolbar button to a single function, for instance. In this case, selecting either object in your application causes the same action.<BR><BR></LI>

	<LI>To add a function and edit its related code, you should make your selections in this order on the ClassWizard <B>Message Maps</B> tab:
<OL>
	<LI>Select the <B>Project</B> that contains the class you want to edit.<BR><BR></LI>

	<LI>Select a <B>Class name</B>.<BR><BR></LI>

	<LI>Select an <B>Object ID</B>.<BR><BR></LI>

	<LI>Select a <B>Message</B>.</LI>
</OL>

<P class=tl>You can then select an associated function to edit or delete, or click the <B>Add Function</B> button to add a member function to the class.</P>
<P class=tl>By convention, the names of all message-handling functions begin with the prefix <B>On</B>.</P></LI>

	<LI>Override virtual functions in much the same way, also on the <B>Message Maps</B> tab:
<OL>
	<LI>Select a <B>Class name</B>.<BR><BR></LI>

	<LI>In the <B>Object IDs</B> box, select the class name again.<BR><BR></LI>

	<LI>In the <B>Messages</B> box, select a virtual function to override.<BR><BR></LI>

	<LI>Click <B>Add Function</B>.</LI>
</OL>
</LI>
</UL>

<H2><A NAME="_core_adding_variables_with_classwizard"></A>Adding Variables with ClassWizard</H2>

<P>ClassWizard lets you add member variables to some classes. For example, you can add member variables to a dialog class to represent the dialog box's controls. Use the following tips:

<UL type=disc>
	<LI><B>Edit Variables</B> is available in the ClassWizard dialog box only for classes with a data map. This includes dialog, form view, and record view classes. Neither ClassWizard nor AppWizard make changes to your code outside the data map.<BR><BR></LI>

	<LI>By convention, the names of all member variables begin with the prefix <CODE>m_</CODE>.<BR><BR></LI>

	<LI>By using ClassWizard to map a dialog control to a dialog-class member variable with the Value property (the default), you can use dialog data exchange (DDX) and dialog data validation (DDV). This eliminates the need to move data between the control and the member variable yourself. It also allows you to specify validation rules for the data. For more information about DDX and DDV, see <A HREF="_core_dialog_data_exchange.htm">Dialog Data Exchange</A> and <A HREF="_core_dialog_data_exchange_and_validation.htm">Dialog Data Exchange and Validation</A>.<BR><BR></LI>

	<LI>You can also map a dialog control to a dialog-class member variable with the Control property. This creates a member variable of an appropriate class, such as <B>CEdit</B>. You can then call the member functions of the control object through this variable.</LI>
</UL>

<H2><A NAME="_core_adding_code_from_classwizard"></A>Adding Code from ClassWizard</H2>

<P>After you've added a new member function in the ClassWizard dialog box, click Edit Code to add the implementation code for the function. A Visual C++ source code editor window opens with the file containing the class for the member function. A highlighted comment indicates where to add your code. Use the following tip:

<UL type=disc>
	<LI>You can select a function in ClassWizard's Message Maps tab and then click Edit Code to locate and examine code quickly.</LI>
</UL>

<H2><A NAME="_core_opening_your_..rc_file"></A>Opening Your </H2>

<H2>RC File</H2>

<P>Visual C++ lets you open resources in two ways. You can open individual resources (in compiled form) in the Visual C++ resource editors. Or you can open the .rc file to edit it directly as a text file. Use the following tip:

<UL type=disc>
	<LI>To open the .rc file as text, click the <B>Open</B> command on the <B>File</B> menu and change the <B>Open As</B> option to <B>Text</B>. </LI>
</UL>
</font>
</BODY>
</HTML>

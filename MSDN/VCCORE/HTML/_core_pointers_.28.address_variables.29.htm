<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pointers (Address Variables)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_pointers_.28.address_variables.29"></A>Pointers (Address Variables)</H1>

<P>In Fortran, you use the <B>LOC</B> function to extract the address of a variable. (In Win32, all addresses are 4 bytes, so there is no separate <B>LOCFAR</B> function, as there is for 16-bit environments.) Because Fortran does not have a pointer type, the result of the <B>LOC</B> function must be stored in an <B>INTEGER*4</B> variable or passed as a parameter of type <B>INTEGER*4</B>. Generally, a pointer should be passed by value.</P>

<P>Passing a pointer by value is equivalent to passing what it points to by reference. In the following example, the two subroutine calls push identical data on the stack, and in each case the C routine called should expect an address. The two functions require different parameter declarations.</P>

<PRE><CODE>      INTERFACE TO SUBROUTINE pass_addr1 [C] (addr_data)
      REAL*8 addr_data [REFERENCE]
      END

      INTERFACE TO SUBROUTINE pass_addr2 [C] (addr_data)
      INTEGER*4 addr_data [VALUE]
      END

      REAL*8 x
      INTEGER*4 ptr
      CALL pass_addr1 (x)
      ptr = LOC(x)
      CALL pass_addr2 (ptr)
</CODE></PRE>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls: Adding Custom Methods to an ActiveX Control</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="circle sample start">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_activex_controls.3a_.adding_custom_methods_to_an_activex_control"></A>ActiveX Controls: Adding Custom Methods to an ActiveX Control</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex_controls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_control_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions_about_activex_controls.htm">FAQ</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_activex_control_sample_list.htm">Sample</A></P>

<P>Custom methods differ from stock methods in that they are not already implemented by <B>COleControl</B>. You must supply the implementation for each custom method you add to your control.</P>

<P>An ActiveX control user can call a custom method at any time to perform control-specific actions. The dispatch map entry for custom methods is of the form <B>DISP_FUNCTION</B>. </P>



<H2><A NAME="_core_adding_a_custom_method_with_classwizard"></A>Adding a Custom Method With ClassWizard</H2>

<P>The following procedure demonstrates adding the custom method PtInCircle to an ActiveX control’s skeleton code. PtInCircle determines whether the coordinates passed to the control are inside or outside the circle. This same procedure can also be used to add other custom methods. Simply substitute your custom method name and its parameters for the PtInCircle method name and parameters. (This example uses the <CODE>InCircle</CODE> function from the article Events. For more information on this function, see the article <A HREF="_core_activex_controls.3a_.adding_custom_events_to_an_activex_control.htm">ActiveX Controls: Adding Custom Events to an ActiveX Control</A>.) </P>

<P class=label><B>To add the PtInCircle custom method using ClassWizard</B>

<OL>
	<LI>Load the control’s project.<BR><BR></LI>

	<LI>On the <B>View </B>menu, click <B>ClassWizard</B>.<BR><BR></LI>

	<LI>Click the <B>Automation </B>tab.<BR><BR></LI>

	<LI>Select the control’s class from the <B>Class Name</B> box.<BR><BR></LI>

	<LI>Click <B>Add Method</B>.<BR><BR></LI>

	<LI>In the <B>External name</B> box, type <CODE>PtInCircle</CODE>.<BR><BR></LI>

	<LI>In the <B>Internal name</B> box, type the name of the method’s internal function or use the default value provided by <B>ClassWizard</B> (in this case, <CODE>PtInCircle</CODE>).<BR><BR></LI>

	<LI>In the <B>Return Type</B> box, click <B>BOOL </B>for the method’s return type.<BR><BR></LI>

	<LI>Using the <B>Parameter List</B> grid control, add a parameter, called xCoord (type <CODE>OLE_XPOS_PIXELS</CODE>).<BR><BR></LI>

	<LI>Using the <B>Parameter List</B> grid control, add a second parameter, called yCoord (type <CODE>OLE_YPOS_PIXELS</CODE>).<BR><BR></LI>

	<LI>Click <B>OK </B>to close the <B>Add Method</B> dialog box.<BR><BR></LI>

	<LI>Click <B>OK </B>to confirm your choices and close <B>ClassWizard</B>.</LI>
</OL>



<H2><A NAME="_core_classwizard_changes_for_custom_methods"></A>ClassWizard Changes for Custom Methods</H2>

<P>When you add a custom method, ClassWizard makes some changes to the control class header (.H) and implementation (.CPP) files. The following line is added to the dispatch map declaration in the control class header (.H) file:</P>

<PRE><CODE>afx_msg BOOL PtInCircle(long xCoord, long yCoord);
</CODE></PRE>

<P>This code declares a dispatch method handler called <CODE>PtinCircle</CODE>. This function can be called by the control user using the external name PtInCircle.</P>

<P>The following line is added to the control’s .ODL file:</P>

<PRE><CODE>[id(1)] boolean PtInCircle(OLE_XPOS_PIXELS xCoord, OLE_YPOS_PIXELS yCoords);
</CODE></PRE>

<P>This line assigns the PtInCircle method a specific ID number, taken from the method’s position in ClassWizard’s methods and properties list. Because ClassWizard was used to add the custom method, the entry for it was added automatically to the project’s .ODL file.</P>

<P>In addition, the following line, located in the implementation (.CPP) file of the control class, is added to the control’s dispatch map:</P>

<PRE><CODE>DISP_FUNCTION(CSampleCtrl, "PtInCircle", PtInCircle, VT_BOOL, VTS_I4 VTS_I4)
</CODE></PRE>

<P>The <B>DISP_FUNCTION</B> macro maps the method PtInCircle to the control’s handler function, <CODE>PtInCircle</CODE>, declares the return type to be <B>BOOL</B>, and declares two parameters of type <B>short</B> to be passed to <CODE>PtInCircle</CODE>.</P>

<P>Finally, ClassWizard adds the stub function <CODE>CSampleCtrl::PtinCircle</CODE> to the bottom of the control’s implementation (.CPP) file. For <CODE>PtinCircle</CODE> to function as stated previously, it must be modified as follows:</P>

<PRE><CODE>BOOL CSampleCtrl::PtInCircle(short xCoord, short yCoord)
{
    return InCircle(CPoint(xCoord, yCoord));
}
</CODE></PRE>
</font>
</BODY>
</HTML>

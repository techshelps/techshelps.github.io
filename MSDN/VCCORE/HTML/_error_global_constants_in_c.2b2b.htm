<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Global Constants in C++</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_error_global_constants_in_c.2b2b"></A>Global Constants in C++</H1>

<P>C++ global constants have static linkage. This is different than C. If you try to use a global constant in C++ in multiple files you get an unresolved external error. Global constants are optimized out by the compiler, leaving no space reserved for the variable. One alternative is to include the const initializations in a header file and include that header in your CPP files when necessary,&nbsp; just as if it was function prototype. Another possibility is to make the variable non-constant and use a constant reference when assessing it. The following code illustrates this error.</P>

<P>MAIN.CPP</P>

<PRE><CODE>void test(void);
const int lnktest1 = 0;

void main(void)
{

test( );

}
</CODE></PRE>

<P>TEST.CPP</P>

<PRE><CODE>extern int lnktest1;

void test(void) 
{
  int i = lnktest1;   // Causes LNK2001 reason c
}
</CODE></PRE>
</font>
</BODY>
</HTML>

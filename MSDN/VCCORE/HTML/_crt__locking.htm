<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_locking</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__locking"></A><SUP></SUP>_locking</H1>

<P>Locks or unlocks bytes of a file.</P>

<P><B>int</B> <B>_locking(</B> <B>int</B> <I>handle</I><B>,</B> <B>int</B> <I>mode</I><B>,</B> <B>long</B> <I>nbytes</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Routine</B></TD>
<TD class=label width=26%><B>Required Header</B></TD>
<TD class=label width=28%><B>Optional Headers</B></TD>
<TD class=label width=30%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_locking</B></TD>
<TD width=26%>&lt;io.h&gt; and &lt;sys/locking.h&gt;</TD>
<TD width=28%>&lt;errno.h&gt;</TD>
<TD width=30%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>_locking</B> returns 0 if successful. A return value of –1 indicates failure, in which case <A HREF="_crt__doserrno.2c_.errno.2c_._sys_errlist.2c_.and__sys_nerr.htm">errno</A> is set to one of the following values:</P>

<P class=dt><B>EACCES</B></P>

<P class=indent>Locking violation (file already locked or unlocked).</P>

<P class=dt><B>EBADF</B></P>

<P class=indent>Invalid file handle.</P>

<P class=dt><B>EDEADLOCK</B></P>

<P class=indent>Locking violation. Returned when the <B>_LK_LOCK</B> or <B>_LK_RLCK</B> flag is specified and the file cannot be locked after 10 attempts.</P>

<P class=dt><B>EINVAL</B></P>

<P class=indent>An invalid argument was given to <B>_locking</B>.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>handle</I></P>

<P class=indent>File handle</P>

<P class=dt><I>mode</I></P>

<P class=indent>Locking action to perform</P>

<P class=dt><I>nbytes</I></P>

<P class=indent>Number of bytes to lock</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_locking</B> function locks or unlocks <I>nbytes</I> bytes of the file specified by <I>handle</I>. Locking bytes in a file prevents access to those bytes by other processes. All locking or unlocking begins at the current position of the file pointer and proceeds for the next <I>nbytes</I> bytes. It is possible to lock bytes past end of file.</P>

<P><I>mode</I> must be one of the following manifest constants, which are defined in LOCKING.H:</P>

<P class=dt><B>_LK_LOCK</B></P>

<P class=indent>Locks the specified bytes. If the bytes cannot be locked, the program immediately tries again after 1 second. If, after 10 attempts, the bytes cannot be locked, the constant returns an error.</P>

<P class=dt><B>_LK_NBLCK</B></P>

<P class=indent>Locks the specified bytes. If the bytes cannot be locked, the constant returns an error.</P>

<P class=dt><B>_LK_NBRLCK</B></P>

<P class=indent>Same as <B>_LK_NBLCK</B>.</P>

<P class=dt><B>_LK_RLCK</B></P>

<P class=indent>Same as <B>_LK_LOCK</B>.</P>

<P class=dt><B>_LK_UNLCK</B></P>

<P class=indent>Unlocks the specified bytes, which must have been previously locked.</P>

<P>Multiple regions of a file that do not overlap can be locked. A region being unlocked must have been previously locked. <B>_locking</B> does not merge adjacent regions; if two locked regions are adjacent, each region must be unlocked separately. Regions should be locked only briefly and should be unlocked before closing a file or exiting the program.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* LOCKING.C: This program opens a file with sharing. It locks
 * some bytes before reading them, then unlocks them. Note that the
 * program works correctly only if the file exists.
 */

#include &lt;io.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/locking.h&gt;
#include &lt;share.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void main( void )
{
   int  fh, numread;
   char buffer[40];

   /* Quit if can't open file or system doesn't 
    * support sharing. 
    */
   fh = _sopen( "locking.c", _O_RDWR, _SH_DENYNO, 
                 _S_IREAD | _S_IWRITE );
   if( fh == -1 )
      exit( 1 );

   /* Lock some bytes and read them. Then unlock. */
   if( _locking( fh, LK_NBLCK, 30L ) != -1 )
   {
      printf( "No one can change these bytes while I'm reading them\n" );
      numread = _read( fh, buffer, 30 );
      printf( "%d bytes read: %.30s\n", numread, buffer );
      lseek( fh, 0L, SEEK_SET );
     _locking( fh, LK_UNLCK, 30L );
      printf( "Now I'm done. Do what you will with them\n" );
   }
   else
      perror( "Locking failed\n" );

   _close( fh );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>No one can change these bytes while I'm reading them
30 bytes read: /* LOCKING.C: This program ope
Now I'm done. Do what you will with them

</CODE></PRE>

<P><A HREF="_crt_file_handling.htm">File Handling Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__creat.2c_._wcreat.htm">_creat</A>, <A HREF="_crt__open.2c_._wopen.htm">_open</A></P>
</font>
</BODY>
</HTML>

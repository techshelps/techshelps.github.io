<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>strtod, wcstod</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_strtod.2c_.wcstod"></A><SUP></SUP>strtod, wcstod</H1>

<P>Convert strings to a double-precision value.</P>

<P><B>double</B> <B>strtod(</B> <B>const</B> <B>char</B> <B>*</B><I>nptr</I><B>,</B> <B>char</B> <B>**</B><I>endptr</I> <B>);</B></P>

<P><B>double</B> <B>wcstod(</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>nptr</I><B>,</B> <B>wchar_t</B> <B>**</B><I>endptr</I> <B>);</B></P>

<P>Each of these functions converts the input string <I>nptr</I> to a <B>double</B>.</P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=34%><B>Required Header</B></TD>
<TD class=label width=49%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>strtod</B></TD>
<TD width=34%>&lt;stdlib.h&gt;</TD>
<TD width=49%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>wcstod</B></TD>
<TD width=34%>&lt;stdlib.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=49%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>strtod</B> returns the value of the floating-point number, except when the representation would cause an overflow, in which case the function returns +/–<B>HUGE_VAL</B>. The sign of <B>HUGE_VAL</B> matches the sign of the value that cannot be represented. <B>strtod</B> returns 0 if no conversion can be performed or an underflow occurs.</P>

<P><B>wcstod</B> returns values analogously to <B>strtod.</B> For both functions, <B>errno</B> is set to <B>ERANGE</B> if overflow or underflow occurs.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>nptr</I></P>

<P class=indent>Null-terminated string to convert </P>

<P class=dt><I>endptr</I></P>

<P class=indent>Pointer to character that stops scan</P>

<P class=label><B>Remarks</B></P>

<P>The <B>strtod</B> function converts <I>nptr</I> to a double-precision value. <B>strtod</B> stops reading the string <I>nptr</I> at the first character it cannot recognize as part of a number. This may be the terminating null character. <B>wcstod</B> is a wide-character version of <B>strtod</B>; its <I>nptr</I> argument is a wide-character string. Otherwise these functions behave identically.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tcstod</TD>
<TD width=29%>strtod </TD>
<TD width=26%>strtod </TD>
<TD width=28%>wcstod </TD>
</TR>
</TABLE><BR>

<P>The <B>LC_NUMERIC</B> category setting of the current locale determines recognition of the radix character in <I>nptr;</I> for more information, see <A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A>. If <I>endptr</I> is not <B>NULL</B>, a pointer to the character that stopped the scan is stored at the location pointed to by <I>endptr</I>. If no conversion can be performed (no valid digits were found or an invalid base was specified), the value of <I>nptr</I> is stored at the location pointed to by <I>endptr</I>.</P>

<P><B>strtod</B> expects <I>nptr</I> to point to a string of the following form:</P>

<P>[<I>whitespace</I>] [<I>sign</I>] [<I>digits</I>] [<B>.</B><I>digits</I>] [ {<B>d</B> | <B>D</B> | <B>e</B> | <B>E</B>}[<I>sign</I>]<I>digits</I>]</P>

<P>A <I>whitespace</I> may consist of space and tab characters, which are ignored; <I>sign</I> is either plus (<B>+</B>) or minus (<B>–</B>); and <I>digits</I> are one or more decimal digits. If no digits appear before the radix character, at least one must appear after the radix character. The decimal digits can be followed by an exponent, which consists of an introductory letter (<B>d</B>, <B>D</B>, <B>e</B>, or <B>E</B>) and an optionally signed integer. If neither an exponent part nor a radix character appears, a radix character is assumed to follow the last digit in the string. The first character that does not fit this form stops the scan.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* STRTOD.C: This program uses strtod to convert a
 * string to a double-precision value; strtol to
 * convert a string to long integer values; and strtoul
 * to convert a string to unsigned long-integer values.
 */

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

void main( void )
{
   char   *string, *stopstring;
   double x;
   long   l;
   int    base;
   unsigned long ul;
   string = "3.1415926This stopped it";
   x = strtod( string, &amp;stopstring );
   printf( "string = %s\n", string );
   printf("   strtod = %f\n", x );
   printf("   Stopped scan at: %s\n\n", stopstring );
   string = "-10110134932This stopped it";
   l = strtol( string, &amp;stopstring, 10 );
   printf( "string = %s", string );
   printf("   strtol = %ld", l );
   printf("   Stopped scan at: %s", stopstring );
   string = "10110134932";
   printf( "string = %s\n", string );
   /* Convert string using base 2, 4, and 8: */
   for( base = 2; base &lt;= 8; base *= 2 )
   {
      /* Convert the string: */
      ul = strtoul( string, &amp;stopstring, base );
      printf( "   strtol = %ld (base %d)\n", ul, base );
      printf( "   Stopped scan at: %s\n", stopstring );
   }
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>string = 3.1415926This stopped it
   strtod = 3.141593
   Stopped scan at: This stopped it

string = -10110134932This stopped it   strtol = -2147483647   Stopped scan at: This stopped itstring = 10110134932
   strtol = 45 (base 2)
   Stopped scan at: 34932
   strtol = 4423 (base 4)
   Stopped scan at: 4932
   strtol = 2134108 (base 8)
   Stopped scan at: 932

</CODE></PRE>

<P><A HREF="_crt_data_conversion.htm">Data Conversion Routines</A>  |&nbsp; <A HREF="_crt_floating.2d.point_support.htm">Floating-Point Support Routines</A>  |&nbsp; <A HREF="_crt_locale.htm">Locale Routines</A>  |&nbsp; <A HREF="_crt_strtod.2c_.strtol.2c_.strtoul_functions.htm">strtod Functions Overview</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_strtol.2c_.wcstol.htm">strtol</A>, <A HREF="_crt_strtoul.2c_.wcstoul.htm">strtoul</A>, <A HREF="_crt_atof.2c_.atoi.2c_._atoi64.2c_.atol.htm">atof</A>, <A HREF="_crt_localeconv.htm">localeconv</A>, <A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A></P>
</font>
</BODY>
</HTML>

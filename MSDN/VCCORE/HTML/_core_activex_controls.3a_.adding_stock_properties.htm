<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls: Adding Stock Properties</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="circle sample start">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl.3a3a.TranslateColor">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_COleControl">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_activex_controls.3a_.adding_stock_properties"></A>ActiveX Controls: Adding Stock Properties</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex_controls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_control_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions_about_activex_controls.htm">FAQ</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_activex_control_sample_list.htm">Sample</A></P>

<P>Stock properties differ from custom properties in that they are already implemented by the class <B>COleControl</B>. <B>COleControl</B> contains predefined member functions that support common properties for the control. Some common properties include the control’s caption and the foreground and background colors. For information on other stock properties, see <A HREF="#_core_stock_properties_supported_by_classwizard">Stock Properties Supported by ClassWizard</A> later in this article. The dispatch map entries for stock properties are always prefixed by <B>DISP_STOCKPROP</B>.</P>

<P>This article describes how to add a stock property (in this case, Caption) to an ActiveX control using ClassWizard and explains the resulting code modifications. Topics include:

<UL type=disc>
	<LI><A HREF="#_core_using_classwizard_to_add_a_stock_property">Using ClassWizard to add a stock property</A><BR><BR></LI>

	<LI><A HREF="#_core_classwizard_changes_for_stock_properties">ClassWizard changes for stock properties</A><BR><BR></LI>

	<LI><A HREF="#_core_stock_properties_supported_by_classwizard">Stock properties supported by ClassWizard</A><BR><BR></LI>

	<LI><A HREF="#_core_stock_properties_and_notification">Stock properties and notification</A><BR><BR></LI>

	<LI><A HREF="#_core_color_properties">Color properties</A></LI>
</UL>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Visual Basic custom (VBX) controls typically have properties such as Top, Left, Width, Height, Align, Tag, Name, TabIndex, TabStop, and Parent. ActiveX control containers, however, are responsible for implementing these control properties and therefore ActiveX controls should not support these properties.</P>

<H2><A NAME="_core_using_classwizard_to_add_a_stock_property"></A>Using ClassWizard to Add a Stock Property</H2>

<P>Adding stock properties requires less code than adding custom properties because support for the property is handled automatically by <B>COleControl</B>. The following procedure demonstrates adding the stock Caption property to an ActiveX control framework. This same procedure can also be used to add other stock properties. Simply substitute the desired stock property name for Caption.</P>

<P class=label><B>To add the stock Caption property using ClassWizard</B>

<OL>
	<LI>Load your control’s project.<BR><BR></LI>

	<LI>On the <B>View </B>menu, click <B>ClassWizard</B>.<BR><BR></LI>

	<LI>Click the <B>Automation</B> tab.<BR><BR></LI>

	<LI>Select the control’s class from the <B>Class name</B> box.<BR><BR></LI>

	<LI>Click <B>Add Property</B>.<BR><BR></LI>

	<LI>In the <B>External name</B> box, click <B>Caption</B>.
<P class=tl>Note that in the Implementation group, Stock is automatically selected.</P></LI>

	<LI>Click <B>OK </B>to close the <B>Add Property</B> box.<BR><BR></LI>

	<LI>Click <B>OK </B>to confirm your choices and close <B>ClassWizard</B>.</LI>
</OL>



<H2><A NAME="_core_classwizard_changes_for_stock_properties"></A>ClassWizard Changes for Stock Properties</H2>

<P>Because <B>COleControl</B> supports stock properties, ClassWizard does not change the class declaration in any way; it simply adds the property to the dispatch map. ClassWizard adds the following line to the dispatch map of the control, which is located in the implementation (.CPP) file:</P>

<PRE><CODE>DISP_STOCKPROP_CAPTION( )
</CODE></PRE>

<P>The following line is added to your control’s Object Description (.ODL) file:</P>

<PRE><CODE>[id(DISPID_CAPTION), bindable, requestedit] BSTR Caption;
</CODE></PRE>

<P>This line assigns the Caption property a specific ID. Notice that the property is bindable and will request permission from the database before modifying the value.</P>

<P>This makes the Caption property available to users of your control. To use the value of a stock property, access a member variable or member function of the <B>COleControl</B> base class. For more information on these member variables and member functions, see Stock Properties Supported by ClassWizard.</P>



<H2><A NAME="_core_stock_properties_supported_by_classwizard"></A>Stock Properties Supported by ClassWizard</H2>

<P>The <B>COleControl</B> class provides nine stock properties. You can specify the properties you want in the control in the <B>Automation</B> tab of the MFC ClassWizard dialog box.</P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=12%><B>Property</B></TD>
<TD class=label width=44%><B>Dispatch map entry</B></TD>
<TD class=label width=44%><B>How to access value</B></TD>
</TR>

<TR VALIGN="top">
<TD width=12%><B>Appearance</B></TD>
<TD width=44%><B>DISP_STOCKPROP_APPEARANCE( )</B></TD>
<TD width=44%>Value accessible as <B>m_sAppearance</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%><B>BackColor</B></TD>
<TD width=44%><B>DISP_STOCKPROP_BACKCOLOR( )</B></TD>
<TD width=44%>Value accessible by calling <B>GetBackColor</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%><B>BorderStyle</B></TD>
<TD width=44%><B>DISP_STOCKPROP_BORDERSTYLE( )</B></TD>
<TD width=44%>Value accessible as <B>m_sBorderStyle</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%><B>Caption</B></TD>
<TD width=44%><B>DISP_STOCKPROP_CAPTION( )</B></TD>
<TD width=44%>Value accessible by calling <B>InternalGetText</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%><B>Enabled</B></TD>
<TD width=44%><B>DISP_STOCKPROP_ENABLED( )</B></TD>
<TD width=44%>Value accessible as <B>m_bEnabled</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%><B>Font</B></TD>
<TD width=44%><B>DISP_STOCKPROP_FONT( )</B></TD>
<TD width=44%>See the article <A HREF="_core_activex_controls.3a_.using_fonts_in_an_activex_control.htm">ActiveX Controls: Using Fonts in an ActiveX Control</A> for usage.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%><B>ForeColor</B></TD>
<TD width=44%><B>DISP_STOCKPROP_FORECOLOR( )</B></TD>
<TD width=44%>Value accessible by calling <B>GetForeColor</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%><B>hWnd</B></TD>
<TD width=44%><B>DISP_STOCKPROP_HWND( )</B></TD>
<TD width=44%>Value accessible as <B>m_hWnd</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=12%><B>Text</B></TD>
<TD width=44%><B>DISP_STOCKPROP_TEXT( )</B></TD>
<TD width=44%>Value accessible by calling <B>InternalGetText</B>. This property is the same as <B>Caption</B>, except for the property name.</TD>
</TR>
</TABLE><BR>



<H2><A NAME="_core_stock_properties_and_notification"></A>Stock Properties and Notification</H2>

<P>Most of the stock properties have notification functions that can be overridden. For example, whenever the <B>BackColor</B> property is changed, the <B>OnBackColorChanged</B> function (a member function of the control class) is called. The default implementation (in <B>COleControl</B>) calls <B>InvalidateControl</B>. Override this function if you want to take additional actions in response to this situation.</P>



<H2><A NAME="_core_color_properties"></A>Color Properties</H2>

<P>You can use the stock <B>ForeColor</B> and <B>BackColor</B> properties, or your own custom color properties, when painting the control. To use a color property, call the <A HREF="JavaScript:hhobj_3.Click()">COleControl::TranslateColor</A> member function. The parameters of this function are the value of the color property and an optional palette handle. The return value is a <B>COLORREF</B> value that can be passed to GDI functions, such as <B>SetTextColor</B> and <B>CreateSolidBrush</B>.</P>

<P>The color values for the stock <B>ForeColor</B> and <B>BackColor</B> properties are accessed by calling either the <B>GetForeColor</B> or the <B>GetBackColor</B> function, respectively.</P>

<P>The following example demonstrates using these two color properties when painting a control. It initializes a temporary <B>COLORREF</B> variable and a <B>CBrush</B> object with calls to <B>TranslateColor</B>: one using the <B>ForeColor</B> property and the other using the <B>BackColor</B> property. A temporary <B>CBrush</B> object is then used to paint the control’s rectangle, and the text color is set using the <B>ForeColor</B> property.</P>

<PRE><CODE>   CBrush bkBrush(TranslateColor(GetBackColor()));
   COLORREF clrFore = TranslateColor(GetForeColor());
   pdc-&gt;FillRect( rcBounds, &amp;bkbrush );
   pdc-&gt;SetTextColor( clrFore );
   pdc-&gt;DrawText( InternalGetText(), -1, rcBounds, DT_SINGLELINE | DT_CENTER | DT_VCENTER );
</CODE></PRE>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_activex_controls.3a_.properties.htm">ActiveX Controls: Properties</A>, <A HREF="_core_activex_controls.3a_.methods.htm">ActiveX Controls: Methods</A>, <A HREF="JavaScript:hhobj_4.Click()">COleControl</A></P>
</font>
</BODY>
</HTML>

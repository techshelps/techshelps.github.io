<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_control87, _controlfp</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__control87.2c_._controlfp"></A><SUP></SUP>_control87, _controlfp</H1>

<P>Get and set the floating-point control word.</P>

<P><B>unsigned</B> <B>int</B> <B>_control87(</B> <B>unsigned</B> <B>int</B> <I>new</I><B>,</B> <B>unsigned</B> <B>int</B> <I>mask</I> <B>);</B></P>

<P><B>unsigned</B> <B>int</B> <B>_controlfp(</B> <B>unsigned</B> <B>int</B> <I>new</I><B>,</B> <B>unsigned</B> <B>int</B> <I>mask</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=56%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_control87</B></TD>
<TD width=27%>&lt;float.h&gt;</TD>
<TD width=56%>Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_controlfp</B></TD>
<TD width=27%>&lt;float.h&gt;</TD>
<TD width=56%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>The bits in the value returned indicate the floating-point control state. See FLOAT.H for a complete definition of the bits returned by <B>_control87</B>.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>new</I></P>

<P class=indent>New control-word bit values</P>

<P class=dt><I>mask</I></P>

<P class=indent>Mask for new control-word bits to set</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_control87</B> function gets and sets the floating-point control word. The floating-point control word allows the program to change the precision, rounding, and infinity modes in the floating-point math package. You can also mask or unmask floating-point exceptions using <B>_control87</B>. If the value for <I>mask</I> is equal to 0, <B>_control87</B> gets the floating-point control word. If <I>mask</I> is nonzero, a new value for the control word is set: For any bit that is on (equal to 1) in <I>mask</I>, the corresponding bit in <I>new</I> is used to update the control word. In other words, <I>fpcntrl</I> <B>= ((</B><I>fpcntrl</I> <B>&amp; ~mask) | (new &amp; mask))</B> where <I>fpcntrl</I> is the floating-point control word.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The run-time libraries mask all floating-point exceptions by default.</P>

<P><B>_controlfp</B> is a platform-independent, portable version of <B>_control87</B>. It is nearly identical to the <B>_control87</B> function on Intel (x86) platforms and is also supported by the MIPS and ALPHA platforms. To ensure that your floating-point code is portable to MIPS or ALPHA, use <B>_controlfp</B>. If you are targeting x86 platforms, use either <B>_control87</B> or <B>_controlfp</B>. </P>

<P>The difference between <B>_control87</B> and <B>_controlfp</B> is the way these two functions treat DENORMAL values. For Intel (x86) platforms, <B>_control87</B> can set and clear the DENORMAL OPERAND exception mask. ALPHA platforms do not support this exception, and <B>_controlfp</B> does not modify the DENORMAL OPERAND exception mask. The following example demonstrates the difference:</P>

<PRE><CODE>_control87( _EM_INVALID, _MCW_EM ); // DENORMAL is unmasked by this call
_controlfp( _EM_INVALID, _MCW_EM ); // DENORMAL exception mask remains unchanged
</CODE></PRE>

<P>The possible values for the mask constant (<I>mask</I>) and new control values (<I>new</I>) are shown in Table R.1. Use the portable constants listed below (<B>_MCW_EM</B>, <B>_EM_INVALID</B>, and so forth) as arguments to these functions, rather than supplying the hexadecimal values explicitly.</P>

<P>ALPHA platforms support the DENORMAL input and output values in software. The default behavior of Windows NT on these platforms is to flush the DENORMAL input and output values to zero. <B>_controlfp</B> provides a new mask to preserve and flush the input and output DENORMAL values. </P>

<P>Intel (x86) platforms support the DENORMAL input and output values in hardware. The behavior is to preserve DENORMAL values. <B>_control87</B> does not provide a mask to change this behavior. The following example demonstrates this difference:</P>

<PRE><CODE>controlfp( _DN_SAVE, _MCW_DN);   // Denormal values preserved by software on ALPHA. NOP on x86
controlfp( _DN_FLUSH, _MCW_DN);   // Denormal values flushed to zero by hardware on Alpha. Ignored on x86
</CODE></PRE>

<P class=label><B>Table R.1&nbsp;&nbsp;&nbsp;Hexadecimal Values</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=18%><B>Mask</B></TD>
<TD class=label width=26%><B>Hex Value</B></TD>
<TD class=label width=29%><B>Constant</B></TD>
<TD class=label width=27%><B>Hex Value</B></TD>
</TR>

<TR VALIGN="top">
<TD width=18%>_MCW_DN (Denormal control)</TD>
<TD width=26%>0x03000000</TD>
<TD width=29%><BR>
<BR>

<P><B>_DN_SAVE</B></P>

<P><B>_DN_FLUSH</B></P>
</TD>
<TD width=27%><BR>
<BR>

<P>0x00000000</P>

<P>0x01000000</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=18%>_MCW_EM (Interrupt exception)</TD>
<TD width=26%>0x0008001F</TD>
<TD width=29%><BR>
<BR>

<P><B>_EM_INVALID</B></P>

<P><B>_EM_DENORMAL</B></P>

<P><B>_EM_ZERODIVIDE</B></P>

<P><B>_EM_OVERFLOW</B></P>

<P><B>_EM_UNDERFLOW</B></P>

<P><B>_EM_INEXACT</B></P>
</TD>
<TD width=27%><BR>
<BR>

<P>0x00000010</P>

<P>0x00080000</P>

<P>0x00000008</P>

<P>0x00000004</P>

<P>0x00000002</P>

<P>0x00000001</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=18%>_MCW_IC (Infinity control)</TD>
<TD width=26%>0x00040000</TD>
<TD width=29%><BR>
<BR>

<P><B>_IC_AFFINE</B></P>

<P><B>_IC_PROJECTIVE</B></P>
</TD>
<TD width=27%><BR>
<BR>

<P>0x00040000</P>

<P>0x00000000</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=18%>_MCW_RC (Rounding control)</TD>
<TD width=26%>0x00000300</TD>
<TD width=29%><BR>
<BR>

<P><B>_RC_CHOP</B></P>

<P><B>_RC_UP</B></P>

<P><B>_RC_DOWN</B></P>

<P><B>_RC_NEAR</B></P>
</TD>
<TD width=27%><BR>
<BR>

<P>0x00000300</P>

<P>0x00000200</P>

<P>0x00000100</P>

<P>0x00000000</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=18%>_MCW_PC (Precision control)</TD>
<TD width=26%>0x00030000</TD>
<TD width=29%><BR>
<BR>

<P><B>_PC_24</B> (24 bits)</P>

<P><B>_PC_53</B> (53 bits)</P>

<P><B>_PC_64</B> (64 bits)</P>
</TD>
<TD width=27%><BR>
<BR>

<P>0x00020000</P>

<P>0x00010000</P>

<P>0x00000000</P>
</TD>
</TR>
</TABLE><BR>

<P class=label><B>Example</B></P>

<PRE><CODE>/* CNTRL87.C: This program uses _control87 to output the control 
 * word, set the precision to 24 bits, and reset the status to 
 * the default.
 */

#include &lt;stdio.h&gt;
#include &lt;float.h&gt;

void main( void )
{
   double a = 0.1;

   /* Show original control word and do calculation. */
   printf( "Original: 0x%.4x\n", _control87( 0, 0 ) );
   printf( "%1.1f * %1.1f = %.15e\n", a, a, a * a );

   /* Set precision to 24 bits and recalculate. */
   printf( "24-bit:   0x%.4x\n", _control87( _PC_24, MCW_PC ) );
   printf( "%1.1f * %1.1f = %.15e\n", a, a, a * a );

   /* Restore to default and recalculate. */
   printf( "Default:  0x%.4x\n", 
          _control87( _CW_DEFAULT, 0xfffff ) );
   printf( "%1.1f * %1.1f = %.15e\n", a, a, a * a );
}
 

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Original: 0x9001f
0.1 * 0.1 = 1.000000000000000e-002
24-bit:   0xa001f
0.1 * 0.1 = 9.999999776482582e-003
Default:  0x001f
0.1 * 0.1 = 1.000000000000000e-002

</CODE></PRE>

<P><A HREF="_crt_floating.2d.point_support.htm">Floating-Point Support Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__clear87.2c_._clearfp.htm">_clear87</A>, <A HREF="_crt__status87.2c_._statusfp.htm">_status87</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MFC: Using Database Classes Without Documents and Views</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_mfc.3a_.using_database_classes_without_documents_and_views"></A>MFC: Using Database Classes Without Documents and Views</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_databases.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_database_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_databases.3a_.frequently_asked_questions.htm">FAQ</A>&nbsp;&nbsp;&nbsp;|&nbsp; <A HREF="_core_odbc_driver_list.htm">ODBC Driver List</A></P>

<P>Sometimes you might not want to use the framework’s document/view architecture in your database applications. This article explains:

<UL type=disc>
	<LI><A HREF="#_core_when_you_don.92.t_need_documents">When you don’t need to use document/view functionality</A> such as document serialization.<BR><BR></LI>

	<LI><A HREF="#_core_appwizard_options_for_documents_and_views">AppWizard options</A> to support applications without serialization and without document-related File menu commands such as New, Open, Save, and Save As.<BR><BR></LI>

	<LI><A HREF="#_core_applications_with_minimal_documents">How to work with an application that uses a minimal document</A>.<BR><BR></LI>

	<LI><A HREF="#_core_applications_with_no_document">How to structure an application with no document or view</A>.</LI>
</UL>



<H2><A NAME="_core_when_you_don.92.t_need_documents"></A>When You Don’t Need Documents</H2>

<P>Some applications have a distinct concept of a “document.” These applications typically load all or most of a file from storage into memory with a File Open command. They write the updated file back to storage all at once with a File Save or Save As command. What the user sees is a data file.</P>

<P>Some categories of applications, however, don’t require a document. Database applications operate in terms of “transactions.” The application selects records from a database and presents them to the user, often one at a time. What the user sees is usually a single current record, which may be the only one in memory.</P>

<P>If your application doesn’t require a document for storing data, you can dispense with some or all of the framework’s document/view architecture. How much you dispense with depends on the approach you prefer. You might:

<UL type=disc>
	<LI>Use a minimal document as a place to store a connection to your data source but dispense with normal document features such as serialization. This is useful when you want several views of the data and would like to synchronize all of the views, updating them all at once and so on.<BR><BR></LI>

	<LI>Use a frame window, into which you draw directly, rather than using a view. In this case you would omit the document and store any data or data connections in the frame-window object.</LI>
</UL>



<H2><A NAME="_core_appwizard_options_for_documents_and_views"></A>AppWizard Options for Documents and Views</H2>

<P>If you use AppWizard to create your application, all of the database options produce applications with documents and views. Some of the options provide documents and views that omit unneeded document functionality. Here are the kinds of document/view support for each option.</P>

<P class=label><B>AppWizard Options for Documents and Views</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=19%><B>Option</B></TD>
<TD class=label width=28%><B>View</B></TD>
<TD class=label width=53%><B>Document</B></TD>
</TR>

<TR VALIGN="top">
<TD width=19%>None (no database support).</TD>
<TD width=28%>Derived from <B>CView</B>.</TD>
<TD width=53%>Full document support including serialization and New, Open, Save, and Save As commands on the File menu.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>Only include header files.</TD>
<TD width=28%>Derived from <B>CView</B>.</TD>
<TD width=53%>Same as None option. You can store <B>CDatabase</B> or <B>CDaoDatabase</B> and/or <B>CRecordset</B> or <B>CDaoRecordset</B> objects in your document or your view.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>A database view, without file support.</TD>
<TD width=28%>Derived from <B>CRecordView</B> or <B>CDaoRecordView</B>.</TD>
<TD width=53%>Document does not support serialization or the New, Open, Save, and Save As commands. You can use it to store your <B>CRecordset</B> or <B>CDaoRecordset</B> and to coordinate multiple views.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>Both a database view and file support.</TD>
<TD width=28%>Derived from <B>CRecordView</B> or <B>CDaoRecordView</B>.</TD>
<TD width=53%>Full document support, including serialization and document-related File menu commands. Use serialization for special purposes, such as storing user profile information.</TD>
</TR>
</TABLE><BR>

<P>For a discussion of using the AppWizard options “A database view, without file support” and “Both a database view and file support,” see <A HREF="#_core_applications_with_minimal_documents">Applications with Minimal Documents</A>.</P>

<P>For a discussion of writing applications with no document, see <A HREF="#_core_applications_with_no_document">Applications with No Document</A>.</P>

<P>For a discussion of alternatives to serialization, and alternative uses for serialization, see the article <A HREF="_core_serialization.3a_.serialization_vs.._database_input.2f.output.htm">Serialization: Serialization vs. Database Input/Output</A>. </P>



<H2><A NAME="_core_applications_with_minimal_documents"></A>Applications with Minimal Documents</H2>

<P>AppWizard has two options that support form-based data-access applications. Each option creates a <B>CRecordView</B>-or <B>CDaoRecordView</B> derived view class and a document. They differ in what they leave out of the document.</P>

<H3><A NAME="_core_a_document_without_file_support"></A>A Document Without File Support</H3>

<P>Select the AppWizard database option “A database view without file support” if you don’t need document serialization. The document serves the following useful purposes:

<UL type=disc>
	<LI>It’s a convenient place to store a <B>CRecordset</B> or <B>CDaoRecordset</B>.
<P class=tl>This usage parallels ordinary document concepts: the document “stores” the data — or, in this case, a set of records — and the view is a view of the document.</P></LI>

	<LI>If your application presents multiple views (such as multiple record views), a document supports coordinating the views. 
<P class=tl>If multiple views show the same data, you can use the <B>CDocument::UpdateAllViews</B> member function to coordinate updates to all views when any view changes the data.</P></LI>
</UL>

<P>You’ll usually use this option for simple form-based applications such as the Enroll tutorial application. AppWizard supports a convenient structure for such applications automatically.</P>

<H3><A NAME="_core_a_document_with_file_support"></A>A Document with File Support</H3>

<P>Select the AppWizard database option “Both a database view and file support” when you have an alternative use for the document-related File menu commands and document serialization. For the data-access portion of your program, you can use the document in the same way as described in <A HREF="#_core_a_document_without_file_support">A Document Without File Support</A>. You can use the document’s serialization capability, for example, to read and write a serialized user profile document that stores the user’s preferences or other useful information. For more ideas, see the article <A HREF="_core_serialization.3a_.serialization_vs.._database_input.2f.output.htm">Serialization: Serialization vs. Database Input/Output</A>. </P>

<P>AppWizard supports this option, but you must write the code that serializes the document. Store the serialized information in document data members.</P>

<H2><A NAME="_core_applications_with_no_document"></A>Applications with No Document</H2>

<P>You might sometimes want to write an application that uses neither documents nor views. Without documents, you store your data (such as a <B>CRecordset</B> or <B>CDaoRecordset</B> object) in your frame-window class or your application class. Any additional requirements depend on whether the application presents a user interface.</P>



<H3><A NAME="_core_database_support_with_a_user_interface"></A>Database Support with a User Interface</H3>

<P>If you have a user interface (other than, say, a console command-line interface), your application draws directly into the frame window’s client area rather than into a view. Such an application doesn’t use <B>CRecordView</B>, <B>CDaoRecordView</B>, <B>CFormView</B>, or <B>CDialog</B> for its main user interface (but it will normally use <B>CDialog</B> for ordinary dialogs).</P>

<H3><A NAME="_core_writing_applications_without_documents"></A>Writing Applications Without Documents</H3>

<P>AppWizard doesn’t support creating applications without documents, so you must write your own <B>CWinApp</B>-derived class and, if needed, also create a <B>CFrameWnd</B> or <B>CMDIFrameWnd</B> class. Override <B>CWinApp::InitInstance</B> and declare an application object as</P>

<PRE><CODE>CYourNameApp NEAR theApp;
</CODE></PRE>

<P>The framework still supplies the message-map mechanism and many other features.</P>

<H3><A NAME="_core_database_support_separate_from_the_user_interface"></A>Database Support Separate from the User Interface</H3>

<P>Some applications need either no user interface or only a minimal one. For example, suppose you’re writing:

<UL type=disc>
	<LI>An intermediate data-access object that other applications (clients) call for special processing of data between the application and the data source. <BR><BR></LI>

	<LI>An application that processes data without user intervention, such as an application that moves data from one database format to another, or one that does calculations and performs batch updates.</LI>
</UL>

<P>Because there is no document that owns the <B>CRecordset</B> or <B>CDaoRecordset</B> object, you’ll probably want to store it as an embedded data member in your <B>CWinApp</B>-derived application class. Alternatives include:

<UL type=disc>
	<LI>Not keeping a permanent <B>CRecordset</B> or <B>CDaoRecordset</B> object at all. You can pass <B>NULL</B> to your recordset class constructors. In that case, the framework creates a temporary <B>CDatabase</B> or <B>CDaoDatabase</B> object using the information in the recordset’s <B>GetDefaultConnect</B> member function. This is the most likely alternative approach.<BR><BR></LI>

	<LI>Making the <B>CRecordset</B> or <B>CDaoRecordset</B> object a global variable. This variable should be a pointer to a recordset object that you create dynamically in your <B>CWinApp::InitInstance</B> override. (This avoids attempting to construct the object before the framework is initialized.)<BR><BR></LI>

	<LI>Using recordset objects as you would within the context of a document or a view. Create recordsets in the member functions of your application or frame-window objects.</LI>
</UL>
</font>
</BODY>
</HTML>

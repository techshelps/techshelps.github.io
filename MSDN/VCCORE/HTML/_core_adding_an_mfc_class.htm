<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding an MFC Class</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Scribble start">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_adding_an_mfc_class"></A>Adding an MFC Class</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_working_with_classes.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_working_with_classes_tasks.htm">How Do I</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A></P>

<P>To add classes derived from MFC (Microsoft Foundation Class Library) classes to your project, you can use any of the following tools: ClassView, WizardBar, ClassWizard, or the <B>New Class</B> command on the <B>Insert</B> menu. You simply specify the new class's name, select the base class from which it is to be derived, and select the ID of the dialog box with which it is to be associated (if any). WizardBar creates a header file and an implementation file for the new class.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;You can add MFC classes to an ATL COM application if you initially <A HREF="vchowcreateatlprojectthatsupportsmfc.htm">created the application with MFC support</A>.</P>

<P class=label><B>To add an MFC class to your project</B>

<OL>
	<LI>Open the <B>New Class</B> dialog box as described in <A HREF="_core_adding_a_class.htm#_core_the_new_class_dialog_box">the New Class dialog box</A>.<BR><BR></LI>

	<LI>In the <B>Class type</B> drop-down list, select <B>MFC Class</B>.<BR><BR></LI>

	<LI>In the <B>Name</B> box, specify the name of the new class.
<P class=tl>The name you specify is reflected in the read-only <B>File name</B> box, where the .cpp file is specified. By default, the header file and the implementation file have the same name as the class file.</P>
<UL type=disc>
	<LI>To change the names of the header and implementation files for this class, click <B>Change</B> and type the names in the <B>Change Files</B> dialog box.<BR><BR></LI>

	<LI>To add the new class to existing files, click <B>Change</B>, then click the <B>Browse</B> button and locate the files you wish to add it to. </LI>
</UL>
</LI>

	<LI>Choose a base class from which to derive the new class. There are two kinds of MFC classes:
<UL type=disc>
	<LI>Those, such as <B>CButton</B>, that do not require a resource ID.
<P class=tl>Classes such as <B>CButton</B> or <B>CEdit</B> that are derived from base classes other than <B>CDaoRecordView</B>, <B>CDialog</B>, <B>CFormView</B>, <B>CPropertyPage</B>, or <B>CRecordView</B> do not require a resource ID. Because these classes do not require a resource ID, the <B>New Class</B> dialog's <B>Dialog ID</B> drop-down list is not active.</P></LI>

	<LI>Those, such as <B>CDialog</B>, that do require a resource ID.
<P class=tl>For classes that require a resource ID (classes derived from <B>CDaoRecordView</B>, <B>CDialog</B>, <B>CFormView</B>, <B>CPropertyPage</B>, or <B>CRecordView</B>), it is more efficient if you first use the dialog editor to create the resource and its ID, then use ClassWizard to create a class associated with that resource ID.</P>
<P class=tl>However, if you create the class first, then the resource, you can later associate the class to the resource using the procedure described in <A HREF="_core_associate_an_existing_class_with_a_resource.htm">Associate an Existing Class with a Resource</A>.</P>
<P class=tl>For information on using the resource editors, see <A HREF="_core_resource_editor_topics_.28.specific_to_visual_c.2b2b29.htm">Resource Editor Topics (Specific to Visual C++)</A>.</P>
<P class=tl>For information about creating database classes (<B>CRecordView</B>, <B>CRecordset</B>) and OLE classes, see the article <A HREF="_core_classwizard.3a_.database_support.htm">ClassWizard: Database Support</A>.</P></LI>
</UL>
</LI>

	<LI>For dialog-based classes, select the resource with which the class is to be associated from the <B>Dialog ID</B> drop-down list.<BR><BR></LI>

	<LI>Select the type of Automation support: <B>None</B>, <B>Automation</B>, or <B>Createable by type ID</B>. (Note that the base class must support Automation in order for any Automation options to be available.)
<UL type=disc>
	<LI>Select <B>None</B> if you want the new class to have no Automation capability.<BR><BR></LI>

	<LI>Select <B>Automation</B> if you want to expose the capabilities of the new class through Automation.
<P class=tl>If you select this option, the newly created class will be available as a programmable object by automation client applications, such as Microsoft Visual Basic™ and Microsoft Excel. This option is available only for some classes.</P></LI>

	<LI>Select <B>Createable by type ID</B> if you want to allow other applications to create objects of this class using Automation.
<P class=tl>With this option, automation clients can directly create an Automation object. The type ID in the text box is used by the client application to specify the object to be created; it is system-wide and must be unique. This option is available only for some classes.</P></LI>
</UL>

<P class=atl><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Use ClassWizard's <B>Automation</B> tab to add Automation methods and properties to an existing class. These methods and properties define a dispatch interface that Automation clients can use.</p></LI>

	<LI>Click <B>OK</B> to create the new class and add it to the project.
<P class=tl>The new class immediately appears in ClassView, and you can view its header and implementation files in the FileView pane of the project workspace.</P></LI>
</OL>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_adding_an_atl_class.htm">Adding an ATL Class</A>, <A HREF="_core_adding_a_generic_class.htm">Adding a Generic Class</A></P>
</font>
</BODY>
</HTML>

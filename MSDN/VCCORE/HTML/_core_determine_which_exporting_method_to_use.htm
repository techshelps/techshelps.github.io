<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Determine Which Exporting Method to Use</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_determine_which_exporting_method_to_use"></A>Determine Which Exporting Method to Use</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_dlls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_dll_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_dlls.3a_.frequently_asked_questions.htm">FAQ</A>  |&nbsp; <A HREF="_core_dll_topics.htm">Details</A>  |&nbsp; <A HREF="_core_dll_sample_programs.htm">Sample</A></P>

<P>To determine which method to use to export functions (a .DEF file or the <B>__declspec(dllexport)</B> keyword), answer the following questions:

<UL type=disc>
	<LI>Will you be continuing to add additional exported functions?<BR><BR></LI>

	<LI>Who is using your DLL? For example, is it a third party DLL used by many executables that you cannot rebuild, or is the DLL used only by applications that you can easily rebuild? </LI>
</UL>

<H2>Pros and Cons of Using .DEF Files</H2>

<P>Exporting functions in a .DEF file gives you control over what the export ordinals are. When you add additional exported functions to your DLL, you can assign them higher ordinal values (higher than any other exported function). When you do this, applications using implicit linking do not have to relink with the new import library that contains the new functions. This is very important, for example, if you are designing a third-party DLL for use by many applications. You can continue to enhance your DLL by adding additional functionality while at the same time ensuring that existing applications will continue to work properly with the new DLL. The MFC DLLs are built using .DEF files.</P>

<P>Another advantage to using a .DEF file is that you can export functions using the NONAME attribute, which places only the ordinal in the exports table in the DLL. For DLLs with a large number of exported functions, using the NONAME attribute can reduce the size of the DLL file. For information about writing a module definition statement, see <A HREF="_core_rules_for_module.2d.definition_statements.htm">Rules for Module-Definition Statements</A>. For more information on ordinal export, see <A HREF="_core_export_functions_from_a_dll_by_ordinal_rather_than_by_name.htm">Export Functions From a DLL By Ordinal Rather Than By Name</A>.</P>

<P>The major disadvantage of using .a DEF file is that if you are exporting functions in a C++ file, you will either have to place the decorated names in the .DEF file or define your exported functions with standard C linkage by using extern “C” to avoid the name decoration done by the compiler. </P>

<P>If you need to place the decorated names in the .DEF file, you can obtain them by using the tool <A HREF="_core_dumpbin_reference.htm">DUMPBIN</A> or by using the link switch <A HREF="_core_.2f.map.htm">/MAP</A>. Note that the decorated names produced by the compiler are compiler specific. If you place the decorated names produced by the Visual C++ compiler into a .DEF file, applications that link to your DLL must also be built using the same version of Visual C++ so that the decorated names in the calling application match the exported names in the DLL’s .DEF file.</P>

<H2>Pros and Cons of Using __declspec(dllexport)</H2>

<P>Using <B>__declspec(dllexport)</B> is convenient because you do not have to worry about maintaining a .DEF file and obtaining the decorated names of the exported functions. However, you do not have control over the export ordinals that the compiler generates. This method is suitable if, for example, you are designing a DLL for use with an application that you control; if you rebuild the DLL with new exports, you will also have to rebuild the application.</P>

<H3>What do you want to do?</H3>

<UL type=disc>
	<LI><A HREF="_core_export_from_a_dll_using_..def_files.htm">Export from a DLL using .DEF files</A><BR><BR></LI>

	<LI><A HREF="_core_export_from_a_dll_using___declspec.28.dllexport.29.htm">Export from a DLL using __declspec(dllexport)</A><BR><BR></LI>

	<LI><A HREF="_core_export_and_import_using_afx_ext_class.htm">Export and import using AFX_EXT_CLASS</A><BR><BR></LI>

	<LI><A HREF="_core_export_c.2b2b_.functions_for_use_in_c.2d.language_executables.htm">Export C++ functions for use in C-language executables</A><BR><BR></LI>

	<LI><A HREF="_core_export_c_functions_for_use_in_c_or_c.2b2b_.language_executables.htm">Export C functions for use in C or C++-language executables</A><BR><BR></LI>

	<LI><A HREF="_core_import_into_an_application_using___declspec.28.dllimport.29.htm">Import into an application using __declspec(dllimport)</A><BR><BR></LI>

	<LI><A HREF="_core_prepare_the_mfc_dll_for_use.htm">Prepare the MFC DLL for use</A> by an application, or <A HREF="_core_prepare_the_win32_dll_for_use.htm">Prepare the Win32 DLL for use</A> by an application</LI>
</UL>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_importing_and_exporting_inline_functions.htm">Importing and exporting inline functions</A>.<BR><BR></LI>

	<LI><A HREF="_core_mutual_imports.htm">Mutual imports</A><BR><BR></LI>

	<LI><A HREF="_core_decorated_names.htm">Decorated names</A></LI>
</UL>
</font>
</BODY>
</HTML>

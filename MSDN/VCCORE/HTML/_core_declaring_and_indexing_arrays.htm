<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declaring and Indexing Arrays</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_declaring_and_indexing_arrays"></A>Declaring and Indexing Arrays</H1>

<P>Each language varies in the way that arrays are declared and indexed. Array indexing is a source-level consideration and involves no difference in the underlying data. There are two differences in the way elements are indexed by each language:

<UL type=disc>
	<LI>The value of the lower array bound is different.
<P class=tl>By default, Fortran indexes the first element of an array as 1. C and C++ index it as 0. Fortran subscripts should therefore be 1 higher. (Fortran also provides the option of specifying another integer lower bound.)</P></LI>

	<LI>C varies subscripts in row-major order, Fortran in column-major order.</LI>
</UL>

<P>The differences in how subscripts are varied only affect arrays with more than one dimension. With row-major order (C and C++), the rightmost dimension changes fastest. With column-major order (Fortran), the leftmost dimension changes fastest. Thus, in C, the first four elements of an array declared as <CODE>X[3][3]</CODE> are</P>

<PRE><CODE>X[0][0]    X[0][1]    X[0][2]    X[1][0]
</CODE></PRE>

<P>In Fortran, the four elements are</P>

<PRE><CODE>X(1,1)     X(2,1)     X(3,1)     X(1,2)
</CODE></PRE>

<P>The preceding C and Fortran arrays illustrate the difference between row-major and column-major order, and also the difference in the assumed lower bound between C and Fortran. The following table shows equivalencies for array declarations in each language. In this table, <I>r</I> is the number of elements of the row dimension (which changes the slowest), and <I>c</I> is the number of elements of the column dimension (which changes the fastest).</P>

<P class=label><B><A NAME="_core_equivalent_array_declarations"></A>Equivalent Array Declarations</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=18%><B>Language</B></TD>
<TD class=label width=54%><B>Array declaration</B></TD>
<TD class=label width=28%><B>Array reference</B></TD>
</TR>

<TR VALIGN="top">
<TD width=18%>C/C++</TD>
<TD width=54%><I>type x</I>[<I>r</I>][<I>c</I>], or <B>struct</B> { <I>type</I> <I>x</I>[<I>r</I>][<I>c</I>]; } <I>x</I> <SUP>1</SUP></TD>
<TD width=28%><I>x</I>[<I>r</I>][<I>c</I>]</TD>
</TR>

<TR VALIGN="top">
<TD width=18%>Fortran </TD>
<TD width=54%><I>type x</I>(<I>c</I>, <I>r</I>) </TD>
<TD width=28%> <I>x</I>(<I>c</I>+1, <I>r</I>+1)</TD>
</TR>
</TABLE><BR>

<P class=mini>1. Use a structure to pass an array by value in C and C++.</P>

<P>The order of indexing extends to any number of dimensions you declare. For example, the C declaration</P>

<PRE><CODE>int arr1[2][10][15][20];
</CODE></PRE>

<P>is equivalent to the Fortran declaration</P>

<PRE><CODE>INTEGER*2 ARR1( 20, 15, 10, 2 )
</CODE></PRE>

<P>The constants used in a C array declaration represent dimensions, not upper bounds as they do in other languages. Therefore, the last element in the C array declared as <CODE>int arr[5][5]</CODE> is <CODE>arr[4][4]</CODE>, not <CODE>arr[5][5]</CODE>.</P>

<P>The following code provides a complete example, showing how arrays are passed as arguments to a routine.</P>

<PRE><CODE>C    File FORARRS.FOR
C

      INTERFACE TO SUBROUTINE Pass_Arr [C,ALIAS:'_Pass_Arr'] ( Array )
      INTEGER*4 Array( 10, 10 )
      END

      INTEGER*4 Arr( 10, 10 )
      CALL Pass_Arr( Arr )
      write (*,*) 'Array values: ', Arr(1, 10), Arr(2, 10)
      END

/*     File CF.C  */

#include &lt;stdio.h&gt;

void Pass_Arr ( int arr[10][10] )
{
    arr[9][0] = 10;
    arr[9][1] = 20;
}
</CODE></PRE>
</font>
</BODY>
</HTML>

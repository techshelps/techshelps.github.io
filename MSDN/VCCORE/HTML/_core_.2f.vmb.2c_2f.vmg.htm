<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>/vmb, /vmg   (Representation Method)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_compiling_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_.2f.vmb.2c_2f.vmg"></A>/vmb, /vmg&nbsp;&nbsp;&nbsp;(Representation Method)</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_overviews.3a_.compiling_and_linking.htm">Overview</A>  |&nbsp; <A HREF="_core_set_compiler_options.htm">How Do I</A>  |&nbsp; <A HREF="_core_compiler_reference.htm">Compiler Options</A></P>

<P>These options select the method that the compiler uses to represent pointers to class members. You can also use <A HREF="_predir_pointers_to_members.htm">#pragma pointers_to_members</A> in your code to specify a pointer representation. </P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=19%><B>Command Line</B></TD>
<TD class=label width=27%><B>Project Settings</B></TD>
<TD class=label width=54%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=19%>/vmb</TD>
<TD width=27%>Best-Case Always</TD>
<TD width=54%>Use this option if you always define a class before you declare a pointer to a member of the class. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%>/vmg</TD>
<TD width=27%>General-Purpose Always</TD>
<TD width=54%>Use this option if you need to declare a pointer to a member of a class before defining the class. This need can arise if you define members in two different classes that reference each other. For such mutually referencing classes, one class must be referenced before it is defined. You must then choose an inheritance model from the <A HREF="_core_.2f.vmm.2c_2f.vms.2c_2f.vmv.htm">General Purpose Representation</A> drop-down list box. </TD>
</TR>
</TABLE><BR>

<P>To find these options in the development environment, click <B>Settings</B> on the <B>Project</B> menu. Then click the <B>C/C++</B> tab, and click <B>C++ Language</B> in the <B>Category </B>box. See the choices under <B>Representation Method</B>.</P>

<P>If you define a class before declaring a pointer to a member of the class using the Best-Case Always option, the compiler knows the kind of inheritance used by the class when it encounters the declaration of the pointer. Thus, it can use the smallest possible representation of a pointer and create the smallest amount of code required to operate on the pointer for each kind of inheritance.</P>

<P>With the Best-Case Always option, the compiler issues an error if it encounters the pointer declaration before the class definition. In this case, you must either reorganize your code or use the General-Purpose Always (/vmg) option. You can also use the pointers_to_members pragma or define the class using the __single_inheritance, __multiple_inheritance, or __virtual_inheritance keyword. These keywords allow control of the code created on a per-class basis.</P>

<P>For the Best-Case Always option, the corresponding argument to #pragma pointers_to_members is best_case. </P>

<P>For information on the use of the __single_inheritance, __multiple_inheritance, and __virtual_inheritance keywords, see <A HREF="_langref_inheritance_keywords.htm">Inheritance Keywords</A> in the <I>Language Quick Reference</I>.</P>
</font>
</BODY>
</HTML>

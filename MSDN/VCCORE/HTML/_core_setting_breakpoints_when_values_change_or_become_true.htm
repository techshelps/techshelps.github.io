<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Breakpoints When Values Change or Become True</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_setting_breakpoints_when_values_change_or_become_true"></A>Setting Breakpoints When Values Change or Become True</H1>

<P>You can set data breakpoints that halt execution when an expression changes value or evaluates to true. The debugger automatically knows whether “changes” or “true” makes sense for the variable or expression you have entered — you don’t need to set this yourself.</P>

<P>You can set a breakpoint on any valid C or C++ expression. Breakpoint expressions can also use memory addresses and register mnemonics. The debugger interprets all constants as decimal numbers unless they begin with '0' (octal) or '0x' (hexadecimal).</P>

<P>This section covers the following topics:

<UL type=disc>
	<LI><A HREF="#_core_setting_a_breakpoint_when_a_variable_changes_value">Setting a Breakpoint When a Variable Changes Value</A><BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_when_an_expression_changes_value">Setting a Breakpoint When an Expression Changes Value</A> <BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_when_an_expression_is_true">Setting a Breakpoint When an Expression Is True</A> <BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_on_a_variable_outside_the_current_scope">Setting a Breakpoint On a Variable Outside the Current Scope</A> <BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_when_the_initial_element_of_an_array_changes_value">Setting a Breakpoint When the Initial Element of an Array Changes Value</A><BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_when_the_initial_element_of_an_array_has_a_specific_value">Setting a Breakpoint When the Initial Element of an Array Has a Specific Value</A> <BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_when_a_particular_element_of_an_array_changes_value">Setting a Breakpoint When a Particular Element of an Array Changes Value</A> <BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_when_any_element_of_an_array_changes_value">Setting a Breakpoint When Any Element of an Array Changes Value</A> <BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_when_any_of_the_first_n_elements_of_an_array_change_value">Setting a Breakpoint When Any of the First n Elements of an Array Change Value</A> <BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_when_the_location_value_of_a_pointer_changes">Setting a Breakpoint When the Location Value of a Pointer Changes</A> <BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_when_the_value_at_a_location_pointed_to_changes">Setting a Breakpoint When the Value at a Location Pointed to Changes</A> <BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_when_an_array_pointed_to_by_a_pointer_changes">Setting a Breakpoint When an Array Pointed to by a Pointer Changes</A> <BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_when_the_value_at_a_specified_memory_address_changes">Setting a Breakpoint When the Value at a Specified Memory Address Changes</A> <BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_when_a_register_changes">Setting a Breakpoint When a Register Changes</A> <BR><BR></LI>

	<LI><A HREF="#_core_setting_a_breakpoint_when_a_register_expression_is_true">Setting a Breakpoint When a Register Expression is True</A> </LI>
</UL>



<H2><A NAME="_core_setting_a_breakpoint_when_a_variable_changes_value"></A>Setting a Breakpoint When a Variable Changes Value</H2>

<P class=label><B>To set a breakpoint when a variable changes value</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type the name of the variable.<BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint. </LI>
</OL>



<H2><A NAME="_core_setting_a_breakpoint_when_an_expression_changes_value"></A>Setting a Breakpoint When an Expression Changes Value</H2>

<P class=label><B>To set a breakpoint when an expression changes value</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type an expression such as <CODE>x+y</CODE>.<BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint.</LI>
</OL>



<H2><A NAME="_core_setting_a_breakpoint_when_an_expression_is_true"></A>Setting a Breakpoint When an Expression Is True</H2>

<P class=label><B>To set a breakpoint when an expression is true</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type an expression, such as <CODE>x==3</CODE>, that evaluates to true or false.<BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint. </LI>
</OL>



<H2><A NAME="_core_setting_a_breakpoint_on_a_variable_outside_the_current_scope"></A>Setting a Breakpoint on a Variable Outside the Current Scope</H2>

<P class=label><B>To break on a variable outside the current scope</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type the variable name.<BR><BR></LI>

	<LI>Select the drop-down arrow to the right of the text box.<BR><BR></LI>

	<LI>From the menu that appears, click <B>Advanced</B>.
<P class=tl>The <B>Advanced Breakpoint</B> dialog box appears.</P></LI>

	<LI>In the <B>Expression</B> text box, type the function name and (if necessary) the filename of the variable.<BR><BR></LI>

	<LI>Click <B>OK</B> to close the <B>Advanced Breakpoint</B> dialog box.
<P class=tl>The information that you specified appears in the <B>Expression</B> text box in the <B>Breakpoints</B> dialog box.</P></LI>

	<LI>In the <B>Breakpoints</B> dialog box, click <B>OK</B> to set the breakpoint.</LI>
</OL>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;You can enter context information directly into the <B>Expression</B> field, using the advanced breakpoints syntax. For details, see Using <A HREF="_core_setting_breakpoints_outside_the_current_scope.htm#_core_using_advanced_breakpoint_syntax">Advanced Breakpoint Syntax</A>.</P>



<H2><A NAME="_core_setting_a_breakpoint_when_the_initial_element_of_an_array_changes_value"></A>Setting a Breakpoint When the Initial Element of an Array Changes Value</H2>

<P class=label><B>To break when the initial element of an array changes value</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type the first element of the array (<CODE>myArray[0]</CODE>, for example). <BR><BR></LI>

	<LI>In the <B>Number Of Elements</B> text box on the <B>Data</B> tab, type <CODE>1</CODE>.<BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint on <CODE>myArray [0]</CODE>.</LI>
</OL>



<H2><A NAME="_core_setting_a_breakpoint_when_the_initial_element_of_an_array_has_a_specific_value"></A>Setting a Breakpoint When the Initial Element of an Array Has a Specific Value</H2>

<P class=label><B>To break when the initial element of an array has a specific value</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type an expression containing the initial element of the array (<CODE>myArray[0]==1</CODE>, for example).<BR><BR></LI>

	<LI>In the <B>Number Of Elements</B> text box, type <CODE>1</CODE>.<BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint on <CODE>myArray [0]</CODE>.</LI>
</OL>



<H2><A NAME="_core_setting_a_breakpoint_when_a_particular_element_of_an_array_changes_value"></A>Setting a Breakpoint When a Particular Element of an Array Changes Value</H2>

<P class=label><B>To break when a particular element of an array changes value</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type the element of the array (<CODE>myArray[12]</CODE>, for example). <BR><BR></LI>

	<LI>In the <B>Number Of Elements</B> text box, type <CODE>1</CODE>.<BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint on <CODE>myArray [12]</CODE>.</LI>
</OL>



<H2><A NAME="_core_setting_a_breakpoint_when_any_element_of_an_array_changes_value"></A>Setting a Breakpoint When Any Element of an Array Changes Value</H2>

<P class=label><B>To break when any element of an array changes value</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type the first element of the array (<CODE>myArray[0]</CODE>). <BR><BR></LI>

	<LI>In the <B>Number Of Elements</B> text box, type the number of elements in the array.<BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint on <CODE>myArray</CODE>.</LI>
</OL>



<H2><A NAME="_core_setting_a_breakpoint_when_any_of_the_first_n_elements_of_an_array_change_value"></A>Setting a Breakpoint When Any of the First n Elements of an Array Change Value</H2>

<P class=label><B>To break when any of the first <I>n</I> elements of an array change value</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type the first element of the array (<CODE>myArray[0]</CODE>, for example). <BR><BR></LI>

	<LI>In the <B>Number Of Elements</B> text box, type <I>n</I> (for example, <CODE>10</CODE>).<BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint on <CODE>myArray[0]</CODE> through <CODE>myArray[9]</CODE>.</LI>
</OL>



<H2><A NAME="_core_setting_a_breakpoint_when_the_location_value_of_a_pointer_changes"></A>Setting a Breakpoint When the Location Value of a Pointer Changes</H2>

<P class=label><B>To break when the location value of a pointer changes</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type the pointer variable name (<CODE>p</CODE>, for example). <BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint.</LI>
</OL>



<H2><A NAME="_core_setting_a_breakpoint_when_the_value_at_a_location_pointed_to_changes"></A>Setting a Breakpoint When the Value at a Location Pointed to Changes</H2>

<P class=label><B>To break when the value at a location pointed to changes</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type the dereferenced pointer variable name (<CODE>*p</CODE> or <CODE>p-&gt;next</CODE>, for example). <BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint.</LI>
</OL>



<H2><A NAME="_core_setting_a_breakpoint_when_an_array_pointed_to_by_a_pointer_changes"></A>Setting a Breakpoint When an Array Pointed to by a Pointer Changes</H2>

<P class=label><B>To break when an array pointed to by a pointer changes</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type the dereferenced pointer variable name (<CODE>*p</CODE>, for example). <BR><BR></LI>

	<LI>In the <B>Number Of Elements</B> text box, type the length of the array in elements. For example, if the pointer is a pointer to <B>double</B>, and the array pointed to contains 100 values of type <B>double</B>, type <CODE>100</CODE>.<BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint.</LI>
</OL>



<H2><A NAME="_core_setting_a_breakpoint_when_the_value_at_a_specified_memory_address_changes"></A>Setting a Breakpoint When the Value at a Specified Memory Address Changes</H2>

<P class=label><B>To break when the value at a specified memory address changes</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type the memory address for the byte. 
<P class=tl>For a word or doubleword memory address, enclose the address in parentheses, and precede it with a cast operator. For example, <CODE>WO(21406036</CODE>) for the word at memory location 21406036. Use the cast operator <CODE>BY</CODE> for a byte (optional), <CODE>WO</CODE> for a word, or <CODE>DW</CODE> for a doubleword. (The debugger interprets all integer constants as decimal unless they begin with zero (0) for octal or zero and x (0x) for hexadecimal.)</P></LI>

	<LI>In the <B>Number Of Elements</B> text box, type the number of bytes, words, or doublewords to monitor. If you used the <CODE>BY</CODE> operator in the <B>Expression</B> field, specify the number of bytes. If you used <CODE>WO</CODE>, specify the number of words. If you used <CODE>DW</CODE>, specify the number of doublewords. <BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint. </LI>
</OL>



<H2><A NAME="_core_setting_a_breakpoint_when_a_register_changes"></A>Setting a Breakpoint When a Register Changes</H2>

<P class=label><B>To break when a register changes</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type a register mnemonic, such as <CODE>CS</CODE>.<BR><BR></LI>

	<LI>In the <B>Number Of Elements</B> text box, type the number of bytes to monitor.<BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint.</LI>
</OL>



<H2><A NAME="_core_setting_a_breakpoint_when_a_register_expression_is_true"></A>Setting a Breakpoint When a Register Expression Is True</H2>

<P class=label><B>To break when a register expression is true</B>

<OL>
	<LI>From the <B>Edit</B> menu, click <B>Breakpoints</B>.<BR><BR></LI>

	<LI>Click the <B>Data</B> tab of the <B>Breakpoints</B> dialog box.<BR><BR></LI>

	<LI>In the <B>Expression</B> text box, type an expression that contains a boolean comparison operator, such as <CODE>CS==0</CODE>.<BR><BR></LI>

	<LI>In the <B>Number Of Elements</B> text box, type the number of bytes to monitor.<BR><BR></LI>

	<LI>Click <B>OK</B> to set the breakpoint. </LI>
</OL>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;When you set a data breakpoint, the debugger places the variable or variables used into a special debug register, if possible. The number of debug registers is limited. (Intel 80386 and later CPUs provide four debug registers. Motorola 680X0 and PowerPC chips have no debug registers.) Furthermore, stacked-based variables (parameters) cannot be placed into debug registers. If a breakpoint variable cannot be placed into a debug register, the debugger must examine the variable’s memory location after every instruction to determine whether the contents have changed. These extra memory accesses reduce execution speed of the program with the debugger. In some cases, the program may appear to hang. Performance may be especially slow if you are debugging a remote application.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>strerror, _strerror</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_strerror.2c_._strerror"></A><SUP></SUP>strerror, _strerror</H1>

<P>Get a system error message (<B>strerror</B>) or prints a user-supplied error message (<B>_strerror</B>).</P>

<P><B>char</B> <B>*strerror(</B> <B>int</B> <I>errnum</I> <B>);</B></P>

<P><B>char</B> <B>*_strerror(</B> <B>const</B> <B>char</B> <B>*</B><I>strErrMsg</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=15%><B>Routine</B></TD>
<TD class=label width=26%><B>Required Header</B></TD>
<TD class=label width=59%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=15%><B>strerror</B></TD>
<TD width=26%>&lt;string.h&gt;</TD>
<TD width=59%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=15%><B>_strerror</B></TD>
<TD width=26%>&lt;string.h&gt;</TD>
<TD width=59%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>strerror</B> and <B>_strerror</B> return a pointer to the error-message string. Subsequent calls to <B>strerror</B> or <B>_strerror</B> can overwrite the string.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>errnum</I></P>

<P class=indent>Error number</P>

<P class=dt><I>strErrMsg</I></P>

<P class=indent>User-supplied message</P>

<P class=label><B>Remarks</B></P>

<P>The <B>strerror</B> function maps <I>errnum</I> to an error-message string, returning a pointer to the string. Neither <B>strerror</B> nor <B>_strerror</B> actually prints the message: For that, you need to call an output function such as <A HREF="_crt_fprintf.2c_.fwprintf.htm">fprintf</A>:</P>

<PRE><CODE>if (( _access( "datafile",2 )) == -1 )
   fprintf( stderr, strerror(NULL) );
</CODE></PRE>

<P>If <I>strErrMsg</I> is passed as <B>NULL</B>, <B>_strerror</B> returns a pointer to a string containing the system error message for the last library call that produced an error. The error-message string is terminated by the newline character ('\n'). If <I>strErrMsg</I> is not equal to <B>NULL</B>, then <B>_strerror</B> returns a pointer to a string containing (in order) your string message, a colon, a space, the system error message for the last library call producing an error, and a newline character. Your string message can be, at most, 94 bytes long.</P>

<P>The actual error number for <B>_strerror</B> is stored in the variable <A HREF="_crt__doserrno.2c_.errno.2c_._sys_errlist.2c_.and__sys_nerr.htm">errno</A>. The system error messages are accessed through the variable <A HREF="_crt__doserrno.2c_.errno.2c_._sys_errlist.2c_.and__sys_nerr.htm">_sys_errlist</A>, which is an array of messages ordered by error number. <B>_strerror</B> accesses the appropriate error message by using the <B>errno</B> value as an index to the variable <B>_sys_errlist</B>. The value of the variable <A HREF="_crt__doserrno.2c_.errno.2c_._sys_errlist.2c_.and__sys_nerr.htm">_sys_nerr</A> is defined as the maximum number of elements in the <B>_sys_errlist</B> array. To produce accurate results, call <B>_strerror</B> immediately after a library routine returns with an error. Otherwise, subsequent calls to <B>strerror</B> or <B>_strerror</B> can overwrite the <B>errno</B> value.</P>

<P><B>_strerror</B> is not part of the ANSI definition but is instead a Microsoft extension to it. Do not use it where portability is desired; for ANSI compatibility, use <B>strerror</B> instead.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* PERROR.C: This program attempts to open a file named
 * NOSUCHF.ILE. Because this file probably doesn't exist,
 * an error message is displayed. The same message is
 * created using perror, strerror, and _strerror.
 */

#include &lt;fcntl.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;io.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

void main( void )
{
   int  fh;

   if( (fh = _open( "NOSUCHF.ILE", _O_RDONLY )) == -1 )
   {
      /* Three ways to create error message: */
      perror( "perror says open failed" );
      printf( "strerror says open failed: %s\n", strerror( errno ) );
      printf( _strerror( "_strerror says open failed" ) );
   }
   else
   {
      printf( "open succeeded on input file\n" );
      _close( fh );
   }
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>perror says open failed: No such file or directory

strerror says open failed: No such file or directory
_strerror says open failed: No such file or directory

</CODE></PRE>

<P><A HREF="_crt_string_manipulation.htm">String Manipulation Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_clearerr.htm">clearerr</A>, <A HREF="_crt_ferror.htm">ferror</A>, <A HREF="_crt_perror.2c_._wperror.htm">perror</A></P>
</font>
</BODY>
</HTML>

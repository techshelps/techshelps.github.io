<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_beginthread, _beginthreadex</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_CreateThread">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_CloseHandle">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_ExitThread">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__beginthread.2c_._beginthreadex"></A><SUP></SUP>_beginthread, _beginthreadex</H1>

<P>Create a thread.</P>

<P><B>unsigned long _beginthread( void( __cdecl *</B><I>start_address</I> <B>)( void * ), unsigned </B><I>stack_size</I><B>, void *</B><I>arglist</I> <B>);</B></P>

<P><B>unsigned long _beginthreadex( void *</B><I>security</I><B>, unsigned </B><I>stack_size</I><B>, unsigned ( __stdcall *</B><I>start_address</I><B> )( void * ), void *</B><I>arglist</I><B>, unsigned </B><I>initflag</I><B>, unsigned *</B><I>thrdaddr</I><B> );</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=24%><B>Routine</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=49%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>_beginthread</B></TD>
<TD width=27%>&lt;process.h&gt;</TD>
<TD width=49%>Win 95, Win NT&nbsp; </TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>_beginthreadex</B></TD>
<TD width=27%>&lt;process.h&gt;</TD>
<TD width=49%>Win 95, Win NT&nbsp; </TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P>To use <B>_beginthread</B> or <B>_beginthreadex</B>, the application must link with one of the multithreaded C run-time libraries.</P>

<P class=label><B>Return Value</B></P>

<P>If successful, each of these functions returns a handle to the newly created thread. <B>_beginthread</B> returns –1 on an error, in which case <B>errno</B> is set to <B>EAGAIN</B> if there are too many threads, or to <B>EINVAL</B> if the argument is invalid or the stack size is incorrect. <B>_beginthreadex</B> returns 0 on an error, in which case <B>errno</B> and <B>doserrno</B> are set.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>start_address</I></P>

<P class=indent>Start address of routine that begins execution of new thread</P>

<P class=dt><I>stack_size</I></P>

<P class=indent>Stack size for new thread or 0</P>

<P class=dt><I>arglist</I></P>

<P class=indent>Argument list to be passed to new thread or NULL</P>

<P class=dt><I>security</I></P>

<P class=indent>Security descriptor for new thread; must be NULL for Windows 95 applications</P>

<P class=dt><I>initflag</I></P>

<P class=indent>Initial state of new thread (<B>0</B> for running or <B>CREATE_SUSPEND</B> for suspended)</P>

<P class=dt><I>thrdaddr</I></P>

<P class=indent>Points to a 32-bit variable that receives the thread identifier</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_beginthread</B> function creates a thread that begins execution of a routine at <I>start_address</I>. The routine at <I>start_address</I> must use the __<B>cdecl</B> calling convention and should have no return value. When the thread returns from that routine, it is terminated automatically.</P>

<P><B>_beginthreadex</B> resembles the Win32 <A HREF="JavaScript:hhobj_1.Click()">CreateThread</A> API more closely than does <B>_beginthread</B>. <B>_beginthreadex</B> differs from <B>_beginthread</B> in the following ways:

<UL type=disc>
	<LI><B>_beginthreadex</B> has three additional parameters: <I>initflag, security</I>, <I>threadaddr</I>. The new thread can be created in a suspended state, with a specified security (Windows NT only), and can be accessed using <I>thrdaddr</I>, which is the thread identifier.<BR><BR></LI>

	<LI>The routine at <I>start_address</I> passed to <B>_beginthreadex</B> must use the <B>__stdcall</B> calling convention and must return a thread exit code.<BR><BR></LI>

	<LI><B>_beginthreadex</B> returns 0 on failure, rather than –1.<BR><BR></LI>

	<LI>A thread created with <B>_beginthreadex</B> is terminated by a call to <B>_endthreadex.</B></LI>
</UL>

<P>You can call <A HREF="_crt__endthread.2c_._endthreadex.htm">_endthread</A> or <A HREF="_crt__endthread.2c_._endthreadex.htm">_endthreadex</A> explicitly to terminate a thread; however, <B>_endthread</B> or <B>_endthreadex</B> is called automatically when the thread returns from the routine passed as a parameter. Terminating a thread with a call to <B>endthread</B> or <B>_endthreadex</B> helps to ensure proper recovery of resources allocated for the thread.</P>

<P><B>_endthread</B> automatically closes the thread handle (whereas <B>_endthreadex</B> does not). Therefore, when using <B>_beginthread</B> and <B>_endthread</B>, do not explicitly close the thread handle by calling the Win32 <A HREF="JavaScript:hhobj_2.Click()">CloseHandle</A> API. This behavior differs from the Win32 <A HREF="JavaScript:hhobj_3.Click()">ExitThread</A> API.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;For an executable file linked with LIBCMT.LIB, do not call the Win32 <B>ExitThread</B> API; this prevents the run-time system from reclaiming allocated resources. <B>_endthread</B> and <B>_endthreadex</B> reclaim allocated thread resources and then call <B>ExitThread</B>.</P>

<P>The operating system handles the allocation of the stack when either <B>_beginthread</B> or <B>_beginthreadex</B> is called; you do not need to pass the address of the thread stack to either of these functions. In addition, the <I>stack_size</I> argument can be 0, in which case the operating system uses the same value as the stack specified for the main thread.</P>

<P><I>arglist</I> is a parameter to be passed to the newly created thread. Typically it is the address of a data item, such as a character string. <I>arglist</I> may be NULL if it is not needed, but <B>_beginthread</B> and <B>_beginthreadex</B> must be provided with some value to pass to the new thread. All threads are terminated if any thread calls <B>abort</B>, <B>exit</B>, <B>_exit</B>, or <B>ExitProcess</B>.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* BEGTHRD.C illustrates multiple threads using functions:
 *
 *      _beginthread            _endthread
 *
 *
 * This program requires the multithreaded library. For example,
 * compile with the following command line:
 *     CL /MT /D "_X86_" BEGTHRD.C
 *
 * If you are using the Visual C++ development environment, select the 
 * Multi-Threaded runtime library in the compiler Project Settings 
 * dialog box.
 * 
 */

#include &lt;windows.h&gt;
#include &lt;process.h&gt;    /* _beginthread, _endthread */
#include &lt;stddef.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;conio.h&gt;

void Bounce( void *ch );
void CheckKey( void *dummy );

/* GetRandom returns a random integer between min and max. */
#define GetRandom( min, max ) ((rand() % (int)(((max) + 1) - (min))) + (min))

BOOL repeat = TRUE;     /* Global repeat flag and video variable */
HANDLE hStdOut;         /* Handle for console window */
CONSOLE_SCREEN_BUFFER_INFO csbi;    /* Console information structure */

void main()
{
    CHAR    ch = 'A';

    hStdOut = GetStdHandle( STD_OUTPUT_HANDLE );

    /* Get display screen's text row and column information. */
   GetConsoleScreenBufferInfo( hStdOut, &amp;csbi );

    /* Launch CheckKey thread to check for terminating keystroke. */
    _beginthread( CheckKey, 0, NULL );

    /* Loop until CheckKey terminates program. */
    while( repeat )
    {
        /* On first loops, launch character threads. */
        _beginthread( Bounce, 0, (void *) (ch++)  );

        /* Wait one second between loops. */
        Sleep( 1000L );
    }
}

/* CheckKey - Thread to wait for a keystroke, then clear repeat flag. */
void CheckKey( void *dummy )
{
    _getch();
    repeat = 0;    /* _endthread implied */

}

/* Bounce - Thread to create and and control a colored letter that moves
 * around on the screen.
 *
 * Params: ch - the letter to be moved
 */
void Bounce( void *ch )
{
    /* Generate letter and color attribute from thread argument. */
    char    blankcell = 0x20;
    char    blockcell = (char) ch;
    BOOL    first = TRUE;
   COORD   oldcoord, newcoord;
   DWORD   result;


    /* Seed random number generator and get initial location. */
    srand( _threadid );
    newcoord.X = GetRandom( 0, csbi.dwSize.X - 1 );
    newcoord.Y = GetRandom( 0, csbi.dwSize.Y - 1 );
    while( repeat )
    {
        /* Pause between loops. */
        Sleep( 100L );

        /* Blank out our old position on the screen, and draw new letter. */
        if( first )
            first = FALSE;
        else
         WriteConsoleOutputCharacter( hStdOut, &amp;blankcell, 1, oldcoord, &amp;result );
         WriteConsoleOutputCharacter( hStdOut, &amp;blockcell, 1, newcoord, &amp;result );

        /* Increment the coordinate for next placement of the block. */
        oldcoord.X = newcoord.X;
        oldcoord.Y = newcoord.Y;
        newcoord.X += GetRandom( -1, 1 );
        newcoord.Y += GetRandom( -1, 1 );

        /* Correct placement (and beep) if about to go off the screen. */
        if( newcoord.X &lt; 0 )
            newcoord.X = 1;
        else if( newcoord.X == csbi.dwSize.X )
            newcoord.X = csbi.dwSize.X - 2;
        else if( newcoord.Y &lt; 0 )
            newcoord.Y = 1;
        else if( newcoord.Y == csbi.dwSize.Y )
            newcoord.Y = csbi.dwSize.Y - 2;

        /* If not at a screen border, continue, otherwise beep. */
        else
            continue;
        Beep( ((char) ch - 'A') * 100, 175 );
    }
    /* _endthread given to terminate */
    _endthread();
}

</CODE></PRE>

<P><A HREF="_crt_process_and_environment_control.htm">Process and Environment Control Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt__endthread.2c_._endthreadex.htm">_endthread</A>, <A HREF="_crt_abort.htm">abort</A>, <A HREF="_crt_exit.2c_._exit.htm">exit</A></P>
</font>
</BODY>
</HTML>

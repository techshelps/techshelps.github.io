<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CObject Class: Specifying Levels of Functionality</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CObject">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_cobject_class.3a_.specifying_levels_of_functionality"></A>CObject Class: Specifying Levels of Functionality</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_cobject.2c_.the_root_base_class_in_mfc.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_cobject_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_class_cobject.3a_.frequently_asked_questions.htm">FAQ</A></P>

<P>This article describes how to add the following levels of functionality to your <A HREF="JavaScript:hhobj_2.Click()">CObject</A>-derived class:

<UL type=disc>
	<LI><A HREF="#_core_to_add_run.2d.time_class_information">Run-time class information</A><BR><BR></LI>

	<LI><A HREF="#_core_to_add_dynamic_creation_support">Dynamic creation support</A><BR><BR></LI>

	<LI><A HREF="#_core_to_add_serialization_support">Serialization support</A></LI>
</UL>

<P>For a general description of <B>CObject</B> functionality, see the article <A HREF="_core_cobject_class.3a_.deriving_a_class_from_cobject.htm">CObject Class: Deriving a Class from CObject</A>. </P>

<P class=label><B><A NAME="_core_to_add_run.2d.time_class_information"></A>To add run-time class information</B></P>

<P class=tl><B>CObject</B> supports run-time class information through the <B>IsKindOf</B> function, which allows you to determine if an object belongs to or is derived from a specified class. For more detailed information, see the articles <A HREF="_core_files_in_mfc.htm">Files in MFC</A> and <A HREF="_core_serialization_.28.object_persistence.29.htm">Serialization (Object Persistence)</A>. This capability is not supported directly by the C++ language. The <B>IsKindOf</B> function permits you to do a type-safe cast down to a derived class. </P>
<P class=tl>Use the following steps to access run-time class information:</P>
<OL>
	<LI>Derive your class from <B>CObject</B>, as described in the <A HREF="_core_cobject_class.3a_.deriving_a_class_from_cobject.htm">CObject Class: Deriving a Class from CObject</A> article.<BR><BR></LI>

	<LI>Use the <B>DECLARE_DYNAMIC</B> macro in your class declaration, as shown here:
<PRE><CODE>class CPerson : public CObject
{
    DECLARE_DYNAMIC( CPerson )

    // rest of class declaration follows...
};
</CODE></PRE>
</LI>

	<LI>Use the <B>IMPLEMENT_DYNAMIC</B> macro in the implementation file (.CPP) of your class. This macro takes as arguments the name of the class and its base class, as follows:
<PRE><CODE>IMPLEMENT_DYNAMIC( CPerson, CObject )
</CODE></PRE>
</LI>
</OL>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Always put <B>IMPLEMENT_DYNAMIC</B> in the implementation file (.CPP) for your class. The <B>IMPLEMENT_DYNAMIC</B> macro should be evaluated only once during a compilation and therefore should not be used in an interface file (.H) that could potentially be included in more than one file. </P>

<P class=label><B><A NAME="_core_to_add_dynamic_creation_support"></A>To add dynamic creation support</B></P>

<P class=tl><B>CObject</B> also supports dynamic creation, which is the process of creating an object of a specific class at run time. The object is created by the <B>CreateObject</B> member function of <B>CRuntimeClass</B>. Your document, view, and frame class should support dynamic creation because the framework (through the <B>CDocTemplate</B> class) needs to create them dynamically. Dynamic creation is not supported directly by the C++ language. To add dynamic creation, you must do the following:</P>
<OL>
	<LI>Derive your class from <B>CObject</B>.<BR><BR></LI>

	<LI>Use the <B>DECLARE_DYNCREATE</B> macro in the class declaration.<BR><BR></LI>

	<LI>Define a constructor with no arguments (a default constructor).<BR><BR></LI>

	<LI>Use the <B>IMPLEMENT_DYNCREATE</B> macro in the class implementation file.</LI>
</OL>

<P class=label><B><A NAME="_core_to_add_serialization_support"></A>To add serialization support</B></P>

<P>“Serialization” is the process of writing or reading the contents of an object to and from a file. The Microsoft Foundation Class Library uses an object of the <B>CArchive</B> class as an intermediary between the object to be serialized and the storage medium. The <B>CArchive</B> object uses overloaded insertion (<B>&lt;&lt;</B>) and extraction (<B>&gt;&gt;</B>) operators to perform writing and reading operations.</P>

<P>The following steps are required to support serialization in your classes:

<OL>
	<LI>Derive your class from <B>CObject</B>.<BR><BR></LI>

	<LI>Override the <B>Serialize</B> member function.
<P class=atl><B><B>Note&nbsp;&nbsp;&nbsp;</B></B>If you call <B>Serialize</B> directly, that is, you do not want to serialize the object through a polymorphic pointer, omit steps 3 through 5.</p></LI>

	<LI>Use the <B>DECLARE_SERIAL</B> macro in the class declaration.<BR><BR></LI>

	<LI>Define a constructor with no arguments (a default constructor).<BR><BR></LI>

	<LI>Use the <B>IMPLEMENT_SERIAL</B> macro in the class implementation file.</LI>
</OL>

<P class=indent><B><B>Note&nbsp;&nbsp;&nbsp;</B></B>A “polymorphic pointer” points to an object of a class (call it A) or to an object of any class derived from A (say, B). To serialize through a polymorphic pointer, the framework must determine the run-time class of the object it is serializing (B), since it might be an object of any class derived from some base class (A).</P>

<P>For more details on how to enable serialization when you derive your class from <B>CObject</B>, see the articles <A HREF="_core_files_in_mfc.htm">Files in MFC</A> and <A HREF="_core_serialization_.28.object_persistence.29.htm">Serialization (Object Persistence)</A>. </P>
</font>
</BODY>
</HTML>

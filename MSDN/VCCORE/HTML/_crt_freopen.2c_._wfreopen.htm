<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>freopen, _wfreopen</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_freopen.2c_._wfreopen"></A><SUP></SUP>freopen, _wfreopen</H1>

<P>Reassign a file pointer.</P>

<P><B>FILE</B> <B>*freopen(</B> <B>const</B> <B>char</B> <B>*</B><I>path</I><B>, const</B> <B>char</B> <B>*</B><I>mode</I><B>, FILE</B> <B>*</B><I>stream</I> <B>);</B></P>

<P><B>FILE</B> <B>*_wfreopen(</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>path</I><B>, const</B> <B>wchar_t</B> <B>*</B><I>mode</I><B>, FILE</B> <B>*</B><I>stream</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>Function</B></TD>
<TD class=label width=35%><B>Required Header</B></TD>
<TD class=label width=48%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>freopen</B></TD>
<TD width=35%>&lt;stdio.h&gt;</TD>
<TD width=48%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=17%><B>_wfreopen</B></TD>
<TD width=35%>&lt;stdio.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=48%>Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>Each of these functions returns a pointer to the newly opened file. If an error occurs, the original file is closed and the function returns a <B>NULL</B> pointer value.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>path</I></P>

<P class=indent>Path of new file</P>

<P class=dt><I>mode</I></P>

<P class=indent>Type of access permitted</P>

<P class=dt><I>stream</I></P>

<P class=indent>Pointer to <B>FILE</B> structure</P>

<P class=label><B>Remarks</B></P>

<P>The <B>freopen</B> function closes the file currently associated with <I>stream</I> and reassigns <I>stream</I> to the file specified by <I>path.</I> <B>_wfreopen</B> is a wide-character version of <B>_freopen</B>; the <I>path</I> and <I>mode</I> arguments to <B>_wfreopen</B> are wide-character strings. <B>_wfreopen</B> and <B>_freopen</B> behave identically otherwise.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tfreopen</TD>
<TD width=29%>freopen</TD>
<TD width=26%>freopen</TD>
<TD width=28%>_wfreopen</TD>
</TR>
</TABLE><BR>

<P><B>freopen</B> is typically used to redirect the pre-opened files <B>stdin</B>, <B>stdout</B>, and <B>stderr</B> to files specified by the user. The new file associated with <I>stream</I> is opened with <I>mode,</I> which is a character string specifying the type of access requested for the file, as follows:</P>

<P class=dt><B>"r"</B></P>

<P class=indent>Opens for reading. If the file does not exist or cannot be found, the <B>freopen</B> call fails.</P>

<P class=dt><B>"w"</B></P>

<P class=indent>Opens an empty file for writing. If the given file exists, its contents are destroyed.</P>

<P class=dt><B>"a"</B></P>

<P class=indent>Opens for writing at the end of the file (appending) without removing the EOF marker before writing new data to the file; creates the file first if it does not exist.</P>

<P class=dt><B>"r+"</B></P>

<P class=indent>Opens for both reading and writing. (The file must exist.)</P>

<P class=dt><B>"w+"</B></P>

<P class=indent>Opens an empty file for both reading and writing. If the given file exists, its contents are destroyed.</P>

<P class=dt><B>"a+"</B></P>

<P class=indent>Opens for reading and appending; the appending operation includes the removal of the EOF marker before new data is written to the file and the EOF marker is restored after writing is complete; creates the file first if it does not exist.</P>

<P>Use the <B>"w"</B> and <B>"w+"</B> types with care, as they can destroy existing files.</P>

<P>When a file is opened with the <B>"a"</B> or <B>"a+"</B> access type, all write operations take place at the end of the file. Although the file pointer can be repositioned using <B>fseek</B> or <B>rewind</B>, the file pointer is always moved back to the end of the file before any write operation is carried out. Thus, existing data cannot be overwritten.</P>

<P>The <B>"a"</B> mode does not remove the EOF marker before appending to the file. After appending has occurred, the MS-DOS TYPE command only shows data up to the original EOF marker and not any data appended to the file. The <B>"a+"</B> mode does remove the EOF marker before appending to the file. After appending, the MS-DOS TYPE command shows all data in the file. The <B>"a+"</B> mode is required for appending to a stream file that is terminated with the CTRL+Z EOF marker.</P>

<P>When the <B>"r+"</B>, <B>"w+"</B>, or <B>"a+"</B> access type is specified, both reading and writing are allowed (the file is said to be open for “update”). However, when you switch between reading and writing, there must be an intervening <A HREF="_crt_fsetpos.htm">fsetpos</A>, <A HREF="_crt_fseek.htm">fseek</A>, or <A HREF="_crt_rewind.htm">rewind</A> operation. The current position can be specified for the <B>fsetpos</B> or <B>fseek</B> operation, if desired. In addition to the above values, one of the following characters may be included in the <I>mode</I> string to specify the translation mode for new lines.</P>

<P class=dt><B>t</B></P>

<P class=indent>Open in text (translated) mode; carriage return–linefeed (CR-LF) combinations are translated into single linefeed (LF) characters on input; LF characters are translated to CR-LF combinations on output. Also, CTRL+Z is interpreted as an end-of-file character on input. In files opened for reading or for writing and reading with <B>"a+"</B>, the run-time library checks for a CTRL+Z at the end of the file and removes it, if possible. This is done because using <B>fseek</B> and <B>ftell</B> to move within a file may cause <B>fseek</B> to behave improperly near the end of the file. The <B>t</B> option is a Microsoft extension that should not be used where ANSI portability is desired.</P>

<P class=dt><B>b</B></P>

<P class=indent>Open in binary (untranslated) mode; the above translations are suppressed.</P>

<P>If <B>t</B> or <B>b</B> is not given in the <I>mode</I> string, the translation mode is defined by the default mode variable <B>_fmode</B>.</P>

<P>For a discussion of text and binary modes, see <A HREF="_crt_text_and_binary_mode_file_i.2f.o.htm">Text and Binary Mode File I/O</A>.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* FREOPEN.C: This program reassigns stderr to the file
 * named FREOPEN.OUT and writes a line to that file.
 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

FILE *stream;

void main( void )
{
   /* Reassign "stderr" to "freopen.out": */
   stream = freopen( "freopen.out", "w", stderr );

   if( stream == NULL )
      fprintf( stdout, "error on freopen\n" );
   else
   {
      fprintf( stream, "This will go to the file 'freopen.out'\n" );
      fprintf( stdout, "successfully reassigned\n" );
      fclose( stream );
   }
   system( "type freopen.out" );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>successfully reassigned
This will go to the file 'freopen.out'

</CODE></PRE>

<P><A HREF="_crt_stream_i.2f.o.htm">Stream I/O Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_fclose.2c_._fcloseall.htm">fclose</A>, <A HREF="_crt__fdopen.2c_._wfdopen.htm">_fdopen</A>, <A HREF="_crt__fileno.htm">_fileno</A>, <A HREF="_crt_fopen.2c_._wfopen.htm">fopen</A>, <A HREF="_crt__open.2c_._wopen.htm">_open</A>, <A HREF="_crt__setmode.htm">_setmode</A></P>
</font>
</BODY>
</HTML>

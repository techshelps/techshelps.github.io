<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>assert</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_MessageBox">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_assert"></A><SUP></SUP>assert</H1>

<P>Evaluates an expression and when the result is FALSE, prints a diagnostic message and aborts the program.</P>

<P><B>void</B> <B>assert(</B> <B>int</B> <I>expression</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=18%><B>Routine</B></TD>
<TD class=label width=29%><B>Required Header</B></TD>
<TD class=label width=53%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>assert</B></TD>
<TD width=29%>&lt;assert.h&gt;</TD>
<TD width=53%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>None</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>expression</I></P>

<P class=indent>Expression (including pointers) that evaluates to nonzero or 0</P>

<P class=label><B>Remarks</B></P>

<P>The ANSI <B>assert</B> macro is typically used to identify logic errors during program development, by implementing the <I>expression</I> argument to evaluate to false only when the program is operating incorrectly. After debugging is complete, assertion checking can be turned off without modifying the source file by defining the identifier <B>NDEBUG</B>. <B>NDEBUG</B> can be defined with a /D command-line option or with a <B>#define</B> directive. If <B>NDEBUG</B> is defined with <B>#define</B>, the directive must appear before ASSERT.H is included.</P>

<P><B>assert</B> prints a diagnostic message when <I>expression</I> evaluates to false (0) and calls <A HREF="_crt_abort.htm">abort</A> to terminate program execution. No action is taken if <I>expression</I> is true (nonzero). The diagnostic message includes the failed expression and the name of the source file and line number where the assertion failed.</P>

<P>The destination of the diagnostic message depends on the type of application that called the routine. Console applications always receive the message via <B>stderr</B>. In a single- or multithreaded Windows application, <B>assert</B> calls the Windows <A HREF="JavaScript:hhobj_1.Click()">MessageBox</A><B> API to</B> create a message box to display the message along with an OK button. When the user chooses OK, the program aborts immediately.</P>

<P>When the application is linked with a debug version of the run-time libraries, <B>assert</B> creates a message box with three buttons: Abort, Retry, and Ignore. If the user selects Abort, the program aborts immediately. If the user selects Retry, the debugger is called and the user can debug the program if Just-In-Time (JIT) debugging is enabled. If the user selects Ignore, <B>assert</B> continues with its normal execution: creating the message box with the OK button. Note that choosing Ignore when an error condition exists can result in “undefined behavior.” For more information, see <A HREF="_core_using_c_run.2d.time_library_debugging_support.htm">Using C Run-Time Library Debugging Support</A>.</P>

<P>The <B>assert</B> routine is available in both the release and debug versions of the C run-time libraries. Two other assertion macros, <A HREF="_crt__assert.2c_._asserte_macros.htm">_ASSERT</A> and <A HREF="_crt__assert.2c_._asserte_macros.htm">_ASSERTE</A>, are also available, but they only evaluate the expressiosn passed to them when the <A HREF="_crt__debug.htm">_DEBUG</A> flag has been defined. </P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* ASSERT.C: In this program, the analyze_string function uses
 * the assert function to test several conditions related to
 * string and length. If any of the conditions fails, the program
 * prints a message indicating what caused the failure.
 */

#include &lt;stdio.h&gt;
#include &lt;assert.h&gt;
#include &lt;string.h&gt;

void analyze_string( char *string );   /* Prototype */

void main( void )
{
   char  test1[] = "abc", *test2 = NULL, test3[] = "";

   printf ( "Analyzing string '%s'\n", test1 );
   analyze_string( test1 );
   printf ( "Analyzing string '%s'\n", test2 );
   analyze_string( test2 );
   printf ( "Analyzing string '%s'\n", test3 );
   analyze_string( test3 );
}

/* Tests a string to see if it is NULL, */ 
/*   empty, or longer than 0 characters */
void analyze_string( char * string )
{
   assert( string != NULL );        /* Cannot be NULL */
   assert( *string != '\0' );       /* Cannot be empty */
   assert( strlen( string ) &gt; 2 );  /* Length must exceed 2 */
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Analyzing string 'abc'
Analyzing string '(null)'
Assertion failed: string != NULL, file assert.c, line 24

abnormal program termination

</CODE></PRE>

<P><A HREF="_crt_error_handling.htm">Error Handling Routines</A>  |&nbsp; <A HREF="_crt_process_and_environment_control.htm">Process and Environment Control Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_abort.htm">abort</A>, <A HREF="_crt_raise.htm">raise</A>, <A HREF="_crt_signal.htm">signal</A>, <A HREF="_crt__assert.2c_._asserte_macros.htm">_ASSERT, _ASSERTE</A>, <A HREF="_crt__debug.htm">_DEBUG</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Line Coverage</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_perf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_line_coverage"></A>Line Coverage</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_procedures_for_performance_tuning.htm">How Do I</A>  |&nbsp; <A HREF="_core_articles_that_tell_about_performance_tuning.htm">Details</A></P>

<P><B><B>Feature Only in Professional and Enterprise Editions</B></B>&nbsp;&nbsp;&nbsp;Profiling is supported only in Visual C++ Professional and Enterprise Editions. For more information, see <A HREF="JavaScript:hhobj_2.Click()">Visual C++ Editions</A>.</P>

<P>The <B>Line Coverage</B> option in the <A HREF="_core_run_the_profiler_from_the_development_environment.htm">Profile dialog box</A> profiles the current project, recording whether a line was executed. </P>

<P>Line coverage profiling is useful for determining which sections of your code are not being executed. The profiler lists all profiled lines, with an asterisk (*) marking those that were executed. The profiling overhead for line coverage is lower than for line counting, because the profiler needs to stop at a line only once. Here is a sample line coverage report:</P>

<PRE><CODE>  Line Covered  Source
-----------------------------------------------------
    1:          // waste.c
    2:          
    3:          #include &lt;windows.h&gt; 
    4:          
    5:          void WasteTime(HANDLE hInstance, HWND hWnd)
    6:    *     {
    7:              LONG lCount, lX;
    8:              HCURSOR hOldCursor;
    9:    *         hOldCursor = SetCursor(LoadCursor(NULL, IDC_WAIT));
   10:    *         for(lCount = 0; lCount &lt; 1000L; lCount++) {
   11:    *             lX = 57L;
   12:    *         }
   13:    *         if(lCount == 0) {
   14:    .             lCount = 1; // should never execute
   15:              }
   16:    *         SetCursor(hOldCursor);
   17:    *     }
</CODE></PRE>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;All included source lines are printed, even if they are not executed.</P>

<P>Line coverage profiling is much faster than line counting profiling because the profiler can remove the inserted breakpoints when those lines are first executed.</P>
</font>
</BODY>
</HTML>

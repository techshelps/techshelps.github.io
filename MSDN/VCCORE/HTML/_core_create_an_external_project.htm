<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Create an External Project</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_create_an_external_project"></A><SUP></SUP>Create an External Project</H1>

<P>You can create a project to run external commands, such as batch files or other executables that you have created outside of the development environment. You can use the resulting project, which runs inside the development environment, to build your program(s).</P>

<P class=label><B>To add an external project to an existing project workspace</B>

<OL>
	<LI>On the <B>File</B> menu, click <B>New</B>.<BR><BR></LI>

	<LI>In the <B>New</B> dialog box, click the <B>Projects</B> tab. <BR><BR></LI>

	<LI>In the <B>Project Name</B> text box, type a name for the project.<BR><BR></LI>

	<LI>From the list of project types, select <B>Makefile</B>.<BR><BR></LI>

	<LI>Choose to either:
<UL type=disc>
	<LI><B>Create new workspace</B>&nbsp;&nbsp;&nbsp;A separate workspace is created for this external project.<BR><BR></LI>

	<LI><B>Add to current workspace</B>&nbsp;&nbsp;&nbsp;The resulting project is added to the current workspace or to one that you can specify if you check the <B>Dependency of</B> check sbox.</LI>
</UL>
</LI>

	<LI>Select any of the available platforms for which you want to create initial Debug and Release configurations.<BR><BR></LI>

	<LI>Click <B>OK</B>.
<P class=tl>Visual C++ prompts you to open the <B>Project Settings</B> dialog box and explicitly specify the tool that the development environment must run to build the project.</P></LI>

	<LI>From the following list, select the options that apply or fill in the appropriate information in the text boxes.
<UL type=disc>
	<LI><B>Build Command Line</B>&nbsp;&nbsp;&nbsp;The command line that the operating system executes for this project when you click <B>Build</B> on the <B>Build</B> menu. By default, the system executes Microsoft NMAKE with the /F option followed by the name of the external makefile. You can, however, add any batch or executable filename along with command-line options and input files.<BR><BR></LI>

	<LI><B>Rebuild all options</B>&nbsp;&nbsp;&nbsp;The options added to the command line when you click <B>Rebuild All</B> on the <B>Build </B>menu. By default, the /A option for Microsoft NMAKE is added.<BR><BR></LI>

	<LI><B>Output file name</B>&nbsp;&nbsp;&nbsp;The name of the file that is created when you build the project. This could be an application or static library, for instance.<BR><BR></LI>

	<LI><B>Browse info file name</B>&nbsp;&nbsp;&nbsp;Name of the browse information file to create for this project. It must have the extension .BSC.</LI>
</UL>
</LI>

	<LI>Click the <B>Debug </B>tab.<BR><BR></LI>

	<LI>Select the <B>General</B> category from the <B>Category</B> list, and type in the text boxes the information required for debugging. The development environment uses this information when you choose commands such as <B>Go</B> or <B>Step Into</B> on the <B>Debug</B> menu.
<UL type=disc>
	<LI><B>Executable for debug session</B>&nbsp;&nbsp;&nbsp;The name of the program that the external project builds if you are debugging an executable program, or the name of the executable file that calls a DLL if you are debugging a DLL. If you are debugging an executable file on a remote machine, this executable file on the local machine contains the symbolic debugging information.<BR><BR></LI>

	<LI><B>Working directory</B>&nbsp;&nbsp;&nbsp;The working directory that the application uses when it runs. This directory may be different from the output files directory in the project. It could contain test cases, for instance.<BR><BR></LI>

	<LI><B>Program arguments</B> (for .EXE files)&nbsp;&nbsp;&nbsp;Arguments that need to be passed to the executable file when it starts.<BR><BR></LI>

	<LI><B>Remote executable path and file name</B>&nbsp;&nbsp;&nbsp;The name for the executable file that you are debugging on a remote machine. The location for this executable file is specified relative to the remote machine.</LI>
</UL>
</LI>

	<LI>Select the <B>Additional DLLs</B> category from the <B>Category </B>list on the <B>Debug </B>tab, and specify the information required for debugging. The development environment uses this information when you choose commands such as <B>Go </B>or <B>Step Into</B> on the <B>Debug </B>menu.
<UL type=disc>
	<LI><B>Modules</B>&nbsp;&nbsp;&nbsp;Use this grid control to specify additional DLLs (or EXEs, or OCXs, and so on) to debug. If you check the box to the left of the active line in the grid, the associated debugging symbols will be preloaded. Preloading symbols allows you to set breakpoints before the specified module loads. Use the <B>Browse</B> button, to the right of the active line in the grid, to simplify specifying files, including remote files, that are outside the scope of your system variables.<BR><BR></LI>

	<LI><B>Try to locate other DLLs</B>&nbsp;&nbsp;&nbsp;If this check box is selected, the debugger asks for additional DLLs when debugging begins.</LI>
</UL>
</LI>
</OL>
</font>
</BODY>
</HTML>

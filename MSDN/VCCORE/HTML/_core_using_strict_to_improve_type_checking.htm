<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using STRICT to Improve Type Checking</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_using_strict_to_improve_type_checking"></A><SUP></SUP>Using STRICT to Improve Type Checking</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_win32_programming.3a_.overview.htm">Overview</A> |&nbsp; <A HREF="_core_win32_programming_tasks.htm">How Do I</A></P>

<P>When you define the STRICT symbol, you enable features that require more care in declaring and using types. This helps you write more portable code. This extra care will also reduce your debugging time. Enabling STRICT redefines certain data types so that the compiler won’t permit assignment from one type to another without an explicit cast. This is especially helpful with Windows code. Errors in passing data types are reported at compile time instead of causing fatal errors at run time.</P>

<P>When STRICT is defined, WINDOWS.H type definitions change as follows:

<UL type=disc>
	<LI>Specific handle types are defined to be mutually exclusive; for example, you won’t be able to pass an <B>HWND</B> where an <B>HDC</B> type argument is required. Without STRICT, all handles are defined as integers, so the compiler doesn’t prevent you from using one type of handle where another type is expected.<BR><BR></LI>

	<LI>All callback function types (dialog procedures, window procedures, and hook procedures) are defined with full prototypes. This prevents you from declaring callback functions with incorrect parameter lists.<BR><BR></LI>

	<LI>Parameter and return value types that should use a generic pointer are declared correctly as <B>LPVOID</B> instead of as <B>LPSTR</B> or another pointer type.<BR><BR></LI>

	<LI>The <B>COMSTAT</B> structure is declared according to the ANSI standard.</LI>
</UL>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_enabling_strict_type_checking.htm">Enabling STRICT type checking</A><BR><BR></LI>

	<LI><A HREF="_core_making_your_application_strict_compliant.htm">Making your application STRICT compliant</A><BR><BR></LI>

	<LI><A HREF="_core_using_strict_type_checking.htm">Using STRICT type checking</A><BR><BR></LI>

	<LI><A HREF="_core_accessing_the_comstat_structure.htm">Accessing the COMSTAT structure</A><BR><BR></LI>

	<LI><A HREF="_core_interpreting_error_messages_affected_by_strict.htm">Interpreting error messages affected by STRICT</A></LI>
</UL>
</font>
</BODY>
</HTML>

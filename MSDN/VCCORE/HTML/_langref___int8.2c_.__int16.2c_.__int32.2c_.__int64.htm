<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>__int8, __int16, __int32, __int64</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref___int8.2c_.__int16.2c_.__int32.2c_.__int64"></A><SUP></SUP>__int8, __int16, __int32, __int64</H1>

<P><B>Microsoft Specific —&gt;</B></P>

<P>Microsoft C/C++ features support for sized integer types. You can declare 8-, 16-, 32-, or 64-bit integer variables by using the <B>__int</B><I>n</I> type specifier, where <I>n</I> is 8, 16, 32, or 64. </P>

<P>The following example declares one variable for each of these types of sized integers:</P>

<PRE><CODE>__int8 nSmall;      // Declares 8-bit integer
__int16 nMedium;    // Declares 16-bit integer
__int32 nLarge;     // Declares 32-bit integer
__int64 nHuge;      // Declares 64-bit integer</CODE></PRE>

<P>The types <B>__int8</B>, <B>__int16</B>, and <B>__int32</B> are synonyms for the ANSI types that have the same size, and are useful for writing portable code that behaves identically across multiple platforms. Note that the <B>__int8</B> data type is synonymous with type <B>char</B>, <B>__int16</B> is synonymous with type <B>short</B>, and <B>__int32</B> is synonymous with type <B>int</B>. The <B>__int64</B> type has no ANSI equivalent.</P>

<P><B>C++ Specific —&gt;</B></P>

<P>Because <B>__int8</B>, <B>__int16</B>, and <B>__int32</B> are considered synonyms by the compiler, care should be taken when using these types as arguments to overloaded function calls. The following C++ code generates a compiler error:</P>

<PRE><CODE>void MyFunc( __int8 ) {}
void MyFunc( char ) {}

void main()
{
    __int8 newVal;
    char MyChar;
    MyFunc( MyChar );    // Ambiguous function calls;
    MyFunc( newVal );    // char is synonymous with __int8.
}</CODE></PRE>

<P><B>END C++ Specific</B></P>

<P><B>END Microsoft Specific</B></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Consistency Rules for /Yc and /Yu</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_compiling_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_consistency_rules_for_.2f.yc_and_.2f.yu"></A>Consistency Rules for /Yc and /Yu</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A></P>

<P>When you use a precompiled header created using the /Yc option, the compiler compares the current compilation environment to the one that existed when you created the .PCH file. You should take care to specify a environment consistent with the previous one (using consistent compiler options, pragmas, and so on) for the current compilation. If the compiler detects an inconsistency, it issues a warning and identifies the inconsistency where possible. Such warnings don’t necessarily indicate a problem with the .PCH file; they simply warn you of possible conflicts. The following sections explain the consistency requirements for precompiled headers.</P>

<H2>Compiler Option Consistency</H2>

<P>Table 3 lists compiler options that might trigger an inconsistency warning when using a precompiled header.</P>

<P class=label><B>Table 3&nbsp;&nbsp;&nbsp; Compilation Option Consistency</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=19%><B>Option</B></TD>
<TD class=label width=29%><B>Name</B></TD>
<TD class=label width=52%><B>Rule</B></TD>
</TR>

<TR VALIGN="top">
<TD width=19%>/AX or /Axxx</TD>
<TD width=29%>Specify memory model</TD>
<TD width=52%>Must be the same between the compilation that created the precompiled header and the current compilation. If these options differ, a error message results.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>/D</TD>
<TD width=29%>Define constants and macros</TD>
<TD width=52%>Must be the same between the compilation that created the precompiled header and the current compilation. The state of defined constants is not checked, but unpredictable results can occur if your files depend on the values of the changed constants.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>/E or /EP</TD>
<TD width=29%>Copy preprocessor output to standard output</TD>
<TD width=52%>Precompiled headers do not work with the /E or /EP option.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>/Fr or /FR</TD>
<TD width=29%>Generate Microsoft Source Browser information</TD>
<TD width=52%>For the /Fr and /FR options to be valid with the /Yu option, they must also have been in effect when the precompiled header was created. Subsequent compilations that use the precompiled header also generate Source Browser information. Browser information is placed in a single .SBR file and is referenced by other files in the same manner as CodeView information. You cannot override the placement of Source Browser information.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>/GA, /GD, /GE,/Gw, or /GW</TD>
<TD width=29%>Windows protocol options</TD>
<TD width=52%>Must be the same between the compilation that created the precompiled header and the current compilation. If these options differ, a warning message results.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>/Zi</TD>
<TD width=29%>Generate complete debugging information</TD>
<TD width=52%>If this option is in effect when the precompiled header is created, subsequent compilations that use the precompilation can use that debugging information. If /Zi is not in effect when the precompiled header is created, subsequent compilations that use the precompilation and the /Zi option trigger a warning. The debugging information is placed in the current object file, and local symbols defined in the precompiled header are not available to the debugger.</TD>
</TR>
</TABLE><BR>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The precompiled header facility is intended for use only with a file that is a C or C++ program.</P>

<H2>Include Path Consistency</H2>

<P>A precompiled header created with /Yc does not contain information about the include path that was in effect when you created the .PCH file. When you use a .PCH file, the compiler always uses the include path specified in the current compilation.&nbsp; </P>

<H2>Source File Consistency</H2>

<P>When you use a precompiled header, the compiler ignores all preprocessor directives (including pragmas) that appear before the <B>hdrstop </B>pragma. The compilation specified by such preprocessor directives must be the same as the compilation used to create the precompiled header file.&nbsp; </P>

<H2>Pragma Consistency</H2>

<P>Pragmas processed during the compilation of a precompiled header usually affect the file in which the precompiled header is subsequently used. The following pragmas affect only the code within the .PCH file; they do not affect code that subsequently uses the .PCH file:

<UL type=disc>
	<LI>comment<BR><BR></LI>

	<LI>linesize<BR><BR></LI>

	<LI>message<BR><BR></LI>

	<LI>page<BR><BR></LI>

	<LI>pagesize<BR><BR></LI>

	<LI>skip<BR><BR></LI>

	<LI>subtitle<BR><BR></LI>

	<LI>title</LI>
</UL>

<P>The following pragmas are retained as part of a precompiled header. They do affect the remainder of a compilation that uses the precompiled header:

<UL type=disc>
	<LI>alloc_text<BR><BR></LI>

	<LI>auto_inline<BR><BR></LI>

	<LI>check_pointer<BR><BR></LI>

	<LI>check_stack<BR><BR></LI>

	<LI>code_seg<BR><BR></LI>

	<LI>data_seg<BR><BR></LI>

	<LI>function<BR><BR></LI>

	<LI>inline_depth<BR><BR></LI>

	<LI>inline_recursion<BR><BR></LI>

	<LI>intrinsic<BR><BR></LI>

	<LI>loop_opt<BR><BR></LI>

	<LI>native_caller<BR><BR></LI>

	<LI>optimize<BR><BR></LI>

	<LI>pack<BR><BR></LI>

	<LI>same_seg<BR><BR></LI>

	<LI>warning</LI>
</UL>
</font>
</BODY>
</HTML>

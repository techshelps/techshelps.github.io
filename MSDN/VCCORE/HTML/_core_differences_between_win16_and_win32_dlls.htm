<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Differences Between Win16 and Win32 DLLs</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_differences_between_win16_and_win32_dlls"></A>Differences Between Win16 and Win32 DLLs</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_dlls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_dll_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_dlls.3a_.frequently_asked_questions.htm">FAQ</A>  |&nbsp; <A HREF="_core_dll_topics.htm">Details</A>  |&nbsp; <A HREF="_core_dll_sample_programs.htm">Sample</A></P>

<P>If you have built 16-bit DLLs for Windows 3.<I>x</I>, you should find that building 32-bit DLLs for Windows 95 and Windows NT is more convenient. The compiler offers more direct support, which can save you several steps in DLL creation. The specific differences between Win16 and Win32 DLLs are:

<UL type=disc>
	<LI>There is no separate startup module that you have to link with. The DLL startup sequence is handled directly by C/C++ run-time library code linked into your DLL.<BR><BR></LI>

	<LI>The run-time library code initializes any static non-local C++ objects by calling the appropriate constructors. Each process gets its own copy of all the DLL's static data, including objects.<BR><BR></LI>

	<LI>You no longer need the function called <B>LibMain</B> or a <B>WEP</B> (Windows Exit Procedure). Where you add initialization and termination code for your DLL depends on the kind of DLL you are building. Instead of <B>LibMain</B>, you provide <B>DllMain </B>which is called for both for both entry and exit.<BR><BR></LI>

	<LI>You can import and export symbols directly in your source code. If you use the <B>__declspec(dllexport)</B> attribute (similar to <B>__export</B> in Windows 3.<I>x</I>), you do not need to use a separate module-definition file for exports. <BR><BR></LI>

	<LI>Executables that use <B>__declspec(dllimport)</B> to import data, objects, and functions from a DLL cause the compiler to generate more efficient code. <BR><BR></LI>

	<LI>The timing of calls to routines registered with <A HREF="_crt_atexit.htm">atexit</A> can differ.<BR><BR></LI>

	<LI>In addition to Win32 non-MFC DLLs, Visual C++ offers three kinds of MFC DLLs.</LI>
</UL>

<H3>What do you want to do?</H3>

<UL type=disc>
	<LI><A HREF="_core_export_from_a_dll.htm">Export from a DLL</A><BR><BR></LI>

	<LI><A HREF="_core_initialize_a_dll.htm">Initialize a DLL</A><BR><BR></LI>

	<LI><A HREF="_core_link_an_executable_to_a_dll.htm">Link an executable to a DLL</A></LI>
</UL>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_the_different_kinds_of_dlls_available_with_visual_c.2b2b.htm">The different kinds of DLLs available with Visual C++</A><BR><BR></LI>

	<LI><A HREF="_core_using___declspec.28.dllimport.29_.and___declspec.28.dllexport.29.htm">Using __declspec(dllimport) and __declspec(dllexport)</A><BR><BR></LI>

	<LI><A HREF="_core_run.2d.time_library_behavior.htm">Run-time library behavior</A></LI>
</UL>
</font>
</BODY>
</HTML>

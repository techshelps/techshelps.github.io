<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiler Warning (level 1) C4786</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="c4786"></A><SUP></SUP>Compiler Warning (level 1) C4786</H1>

<P class=dt><B>'identifier' : identifier was truncated to 'number' characters in the debug information</B></P>

<P>The identifier string exceeded the maximum allowable length and was truncated.</P>

<P>The debugger cannot debug code with symbols longer than 255 characters. In the debugger, you cannot view, evaluate, update, or watch the truncated symbols.</P>

<P>This limitation can be overcome by shortening identifier names.&nbsp; The example code below demonstrates this method.</P>

<P>A trace mechanism can also be used to solve this problem. A trace mechanism is like the <B>printf</B> statements in the code. It keeps track of what is going on in an application during the debugging process. The <B>_ASSERT</B>, <B>_ASSERTE</B>, <B>_RPTn</B> and <B>_RPTFn</B> macros provide concise and flexible ways to perform the trace. These macros are not defined when <B>_DEBUG</B> is not defined. See <A HREF="_core_using_macros_for_verification_and_reporting.htm">Using Macros for Verification and Reporting</A> for more information.</P>

<P>The example below demonstrates a situation that would cause this compiler warning to occur, and the solution to this problem.</P>

<PRE><CODE> //sample1.cpp
 //In this program we have a class of a very long name.
 //We instantiate an object of that class type. We will
 //get multiple C4786 warnings.  The comments below
 //demonstrate the solution to this problem.

 #define a_really_long_class_name a_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really_really//_really_long_class_name

 //SOLUTION: Uncomment the lines below

 //#ifdef _DEBUG
 //#define a_really_long_class_name A_SHORT_CLASS_NAME
 //#endif

 class a_really_long_class_name
 {
 public:
   a_really_long_class_name() {};
   int m_data;
 };

 void main()
 {
    a_really_long_class_name test_obj;
    test_obj.m_data = 12;
 }
</CODE></PRE>

<P>The following example demonstrate that templates with some long class names as their parameters can easily exceed the 255 character limit. Solutions to the problem are also provided.</P>

<PRE><CODE> //sample2.cpp
 //SOLUTION1: uncomment the next 4 lines
 //#ifdef _DEBUG
 //#define VeryLongClassNameA A
 //#define VeryLongClassNameB B
 //#endif

 //SOLUTION2: An alternative solution:
 //uncomment the next 3 lines.
 //#ifdef _DEBUG
 //#define SomeRandomClass SRC
 //#endif

 template &lt;class A1, class A2, class A3, class A4&gt;
 class VeryLongClassNameA{};

 template &lt;class B1, class B2, class B3&gt;
 class VeryLongClassNameB{};

 template &lt;class C1, class C2&gt;
 class VeryLongClassNameC{};

 template &lt;class D1&gt;
 class VeryLongClassNameD{};

 class SomeRandomClass{};

 typedef VeryLongClassNameD&lt;SomeRandomClass&gt; ClassD ;
 typedef VeryLongClassNameC&lt;SomeRandomClass, ClassD&gt; ClassC;
 typedef VeryLongClassNameB&lt;SomeRandomClass, ClassC, ClassD&gt; ClassB;
 typedef VeryLongClassNameA&lt;SomeRandomClass, ClassB, ClassC, ClassD&gt; ClassA;

 void SomeRandomFunction(ClassA aobj){}

 void main()
 {
   ClassA AObj ;
   SomeRandomFunction(AObj) ;
 }</CODE></PRE>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Making Your Application STRICT Compliant</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_making_your_application_strict_compliant"></A><SUP></SUP>Making Your Application STRICT Compliant</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_win32_programming.3a_.overview.htm">Overview</A> |&nbsp; <A HREF="_core_win32_programming_tasks.htm">How Do I</A></P>

<P>Some source code that in the past compiled successfully might produce error messages when you enable STRICT type checking. The following sections describe the minimal requirements for making your code compile when STRICT is enabled. Additional steps are recommended, especially if you want to produce portable code. These are covered in <A HREF="_core_using_strict_type_checking.htm">Using STRICT Type Checking</A>.</P>



<H2><A NAME="_core_general_requirements"></A><SUP></SUP>General Requirements</H2>

<P>The principal requirement is that you must declare correct handle types and function pointers instead of relying on more general types such as <B>unsigned int</B> and <B>FARPROC</B>. You cannot use one handle type where another is expected. This also means that you may have to change function declarations and use more type casts. </P>

<P>For best results, the generic <B>HANDLE</B> type should be used only when necessary. Consult <A HREF="_core_new_types_and_macros.htm">New Types and Macros</A> for a list of new specific handle types.</P>



<H2><A NAME="_core_using_function_pointers"></A><SUP></SUP>Using Function Pointers</H2>

<P>Always declare function pointers with the proper function type (such as <B>DLGPROC</B> or <B>WNDPROC</B>) rather than <B>FARPROC</B>. You’ll need to cast function pointers to and from the proper function type when using <B>MakeProcInstance</B>, <B>FreeProcInstance</B>, and other functions that take or return a <B>FARPROC</B>, as shown in the following code:</P>

<PRE><CODE>BOOL CALLBACK DlgProc(HWND hwnd, UINT msg, WPARAM wParam,
                       LPARAM lParam);
DLGPROC lpfnDlg;

lpfnDlg = (DLGPROC)MakeProcInstance((FARPROC)DlgProc, hinst);
...
FreeProcInstance((FARPROC)lpfnDlg);
</CODE></PRE>



<H2><A NAME="_core_declaring_functions_within_your_application"></A><SUP></SUP>Declaring Functions Within Your Application</H2>

<P>Make sure all application functions are declared. Placing all function declarations in an include file is recommended because you can easily scan your declarations and look for parameter and return types that should be changed. </P>

<P>If you use the /Zg compiler option to create header files for your functions, remember that you’ll get different results depending on whether you have enabled STRICT type checking. With STRICT disabled, all handle types generate the same base type (<B>unsigned short</B> in Windows 3.<I>x</I>). With STRICT enabled, they generate base types such as <B>HWND __near *</B> or <B>HDC __near *</B>. To avoid conflict, you need to re-create the header file each time you enable or disable STRICT, or edit the header file to use the types <B>HWND</B>, <B>HDC</B>, <B>HANDLE</B>, and so on, instead of the base types.</P>

<P>Any API function declarations that you copied from WINDOWS.H into your source code may have changed, and your local declaration may be out of date. Remove your local declaration.</P>

<H2><A NAME="_core_functions_that_require_casts"></A>Functions That Require Casts</H2>

<P>Some API functions have generic return types or parameters. For example, a function like <B>SendMessage</B> returns data that may be any number of types, depending on the context. When you see any of these functions in your source code, make sure that you use the correct type cast and that it is as specific as possible.</P>

<P>The following table summarizes these functions.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=35%><B>API function</B></TD>
<TD class=label width=65%><B>Comment</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>LocalLock</B></TD>
<TD width=65%>Cast result to the proper kind of data pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>GlobalLock</B></TD>
<TD width=65%>Cast result to the proper kind of data pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>GetWindowWord</B></TD>
<TD width=65%>Cast result to appropriate data type.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>GetWindowLong</B></TD>
<TD width=65%>Cast result to appropriate data type.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>SetWindowWord</B></TD>
<TD width=65%>Cast argument as it is passed to function.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>SetWindowLong</B></TD>
<TD width=65%>Cast argument as it is passed to function.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>SendMessage</B></TD>
<TD width=65%>Cast result to appropriate data type; cast to <B>UINT</B> before casting to a handle type.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>DefWindowProc</B></TD>
<TD width=65%>See comment for <B>SendMessage</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>SendDlgItemMessage</B></TD>
<TD width=65%>See comment for <B>SendMessage</B>.</TD>
</TR>
</TABLE><BR>

<P>When you call <B>SendMessage</B>, <B>DefWindowProc</B>, or <B>SendDlgItemMessage</B>, you should first cast the result to type <B>UINT</B>. You need to take similar steps for any API function that returns <B>LRESULT</B> or <B>LONG</B>, where the result contains a handle. This is necessary for writing portable code because the size of a handle is either 16 bits or 32 bits, depending on the version of Windows. The <B>(UINT)</B> cast ensures proper conversion. The following code shows an example in which <B>SendMessage</B> returns a handle to a brush:</P>

<PRE><CODE>HBRUSH hbr;

hbr = (HBRUSH)(UINT)SendMessage(hwnd, WM_CTLCOLOR, ..., ...);
</CODE></PRE>



<H2><A NAME="_core_the_createwindow_function"></A><SUP></SUP>The CreateWindow Function</H2>

<P>The <B>CreateWindow</B> and <B>CreateWindowEx</B> <I>hmenu</I> parameter is sometimes used to pass an integer control ID. In this case, you must cast the ID to an <B>HMENU</B> type:</P>

<PRE><CODE>HWND hwnd;
int id;

hwnd = CreateWindow("Button", "Ok", BS_PUSHBUTTON,
        x, y, cx, cy, hwndParent,
        (HMENU)id,      // Cast required here
        hinst,
        NULL);
</CODE></PRE>
</font>
</BODY>
</HTML>

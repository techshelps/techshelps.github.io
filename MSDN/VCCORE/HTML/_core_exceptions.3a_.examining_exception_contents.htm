<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exceptions: Examining Exception Contents</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_exceptions.3a_.examining_exception_contents"></A>Exceptions: Examining Exception Contents</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_exception_handling_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.frequently_asked_questions.htm">FAQ</A></P>

<P>Although a <B>catch</B> block’s argument can be of almost any data type, the MFC functions throw exceptions of types derived from the class <B>CException</B>. To catch an exception thrown by an MFC function, then, you write a <B>catch</B> block whose argument is a pointer to a <B>CException</B> object (or an object derived from <B>CException</B>, such as <B>CMemoryException</B>). Depending on the exact type of the exception, you can examine the data members of the exception object to gather information about the specific cause of the exception.</P>

<P>For example, the <B>CFileException</B> type has the <B>m_cause</B> data member, which contains an enumerated type that specifies the cause of the file exception. Some examples of the possible return values are <B>CFileException::fileNotFound</B> and <B>CFileException::readOnly</B>.</P>

<P>The following example shows how to examine the contents of a <B>CFileException</B>. Other exception types can be examined similarly.</P>

<PRE><CODE>try
{
    // Do something to throw a file exception.
}
catch( CFileException* theException )
{
    if( theException-&gt;m_cause == CFileException::fileNotFound )
        TRACE( "File not found\n" );
    theException-&gt;Delete();
}
</CODE></PRE>

<P>For related information, see <A HREF="_core_exceptions.3a_.freeing_objects_in_exceptions.htm">Exceptions: Freeing Objects in Exceptions</A> and <A HREF="_core_exceptions.3a_.catching_and_deleting_exceptions.htm">Exceptions: Catching and Deleting Exceptions</A>. </P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Allocation Hooks Should Ignore C Run-time Memory Allocations</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_allocation_hooks_should_ignore_c_run.2d.time_memory_allocations"></A>Allocation Hooks Should Ignore C Run-time Memory Allocations</H1>

<P>A very important restriction on allocation hook functions is that they must explicitly ignore <B>_CRT_BLOCK</B> blocks (the memory allocations made internally by C run-time library functions) if they make any calls to C run-time library functions that allocate internal memory. The <B>_CRT_BLOCK</B> blocks can be ignored by including code such as the following at the beginning of your allocation hook function:</P>

<PRE><CODE>   if ( nBlockUse == _CRT_BLOCK )
      return( TRUE );
</CODE></PRE>

<P>If your allocation hook does not ignore <B>_CRT_BLOCK</B> blocks, then any C run-time library function called in your hook can trap the program in an endless loop. For example, <B>printf </B>makes an internal allocation. If your hook code calls <B>printf</B>, then the resulting allocation will cause your hook to be called again, which will call <B>printf </B>again, and so on until the stack overflows. If you need to report <B>_CRT_BLOCK</B> allocation operations, one way to circumvent this restriction is to use Windows API functions, rather than C run-time functions, for formatting and output . Because the Windows APIs do not use the C run-time library heap, they will not trap your allocation hook in an endless loop.</P>

<P>If you examine the run-time library source files, you will see that the default allocation hook function, <B>CrtDefaultAllocHook</B> (which simply returns TRUE), is located in a separate file of its own, DBGHOOK.C. If you want your allocation hook to be called even for the allocations made by the run-time startup code that is executed before your application’s <B>main </B>function, you can replace this default function with one of your own, instead of using <B>_CrtSetAllocHook</B>.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controlling the Call Stack Window</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_controlling_the_call_stack_window"></A>Controlling the Call Stack Window</H1>

<P class=indent><B><B>Feature Only in Enterprise Edition</B></B>&nbsp;&nbsp;&nbsp;SQL source code debugging is supported only in Visual C++ Enterprise Edition. For more information, see <A HREF="JavaScript:hhobj_1.Click()">Visual C++ Editions</A>.</P>

<P>While using the SQL debugger, the Call Stack window displays the stack of currently active SQL code calls. Calling SQL source code pushes it onto the stack. When the SQL code returns, it is popped off the stack. </P>

<P>In the Call Stack window, the currently executing SQL code is at the top of the stack and older SQL calls are below it. By default, the window also displays parameter types and values for each function call. You can display or hide parameter types and values using the <B>Debug</B> tab of the <B>Options</B> dialog box or the right mouse button shortcut menu.</P>

<P>The Call Stack window acts much like the native Call Stack window. You can navigate to contexts in SQL source code. The Locals window also updates appropriately. From the Call Stack window, you can navigate to SQL statements and display the SQL statements in a source window.</P>

<P class=label><B>To change the Call Stack display</B>

<OL>
	<LI>From the <B>Tools</B> menu, click <B>Options</B>.<BR><BR></LI>

	<LI>Choose the <B>Debug</B> tab.<BR><BR></LI>

	<LI>Under Call Stack window, click <B>Parameter Values</B> or <B>Parameter Types</B>, according to the information you want to display.
<P class=tl>–&nbsp;or&nbsp;–</P></LI>
</OL>

<UL type=disc>
	<LI>In the Call Stack window, click the right mouse button, and from the shortcut menu, click <B>Parameter Values</B> or <B>Parameter Types</B> to toggle the display of that information.</LI>
</UL>

<P class=label><B>To display the Call Stack window</B>

<UL type=disc>
	<LI>From the <B>View</B> menu, click <B>Debug Windows</B> and <B>Call Stack</B>.</LI>
</UL>

<P class=label><B>To view the Call Stack for SQL code</B>

<OL>
	<LI>Place the insertion point in the function.<BR><BR></LI>

	<LI>From the <B>Debug</B> menu, click <B>Run To Cursor</B> to execute your SQL code to the location of the insertion point. 
<P class=tl>The <B>Locals</B> tab of the Variables window is updated automatically to display the local variables for the stored procedure.</P></LI>

	<LI>From the <B>View</B> menu, click <B>Debug Windows</B> and <B>Call Stack</B>.
<P class=tl>The stack lists calls in the calling order, with the current SQL code (the most deeply nested) at the top.</P></LI>
</OL>

<P class=label><B>To navigate from the Call Stack window to a stored procedure’s statements</B>

<UL type=disc>
	<LI>Double-click the stored procedure’s name in the Call Stack window. 
<P class=tl>–&nbsp;or&nbsp;–</P>
<P class=tl>Select the stored procedure name, and press ENTER. </P></LI>
</UL>

<P>This procedure changes only the view of the program shown in the Variables window and other debugger windows; it does not change the next line of execution or the value stored in the program counter.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>calloc</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_calloc"></A><SUP></SUP>calloc</H1>

<P>Allocates an array in memory with elements initialized to 0.</P>

<P><B>void</B> <B>*calloc(</B> <B>size_t</B> <I>num</I><B>,</B> <B>size_t</B> <I>size</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Routine</B></TD>
<TD class=label width=38%><B>Required Header</B></TD>
<TD class=label width=46%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>calloc</B></TD>
<TD width=38%>&lt;stdlib.h&gt; and &lt;malloc.h&gt;</TD>
<TD width=46%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>calloc</B> returns a pointer to the allocated space. The storage space pointed to by the return value is guaranteed to be suitably aligned for storage of any type of object. To get a pointer to a type other than <B>void</B>, use a type cast on the return value. </P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>num</I></P>

<P class=indent>Number of elements</P>

<P class=dt><I>size</I></P>

<P class=indent>Length in bytes of each element</P>

<P class=label><B>Remarks</B></P>

<P>The <B>calloc</B> function allocates storage space for an array of <I>num</I> elements, each of length <I>size</I> bytes. Each element is initialized to 0.</P>

<P><B>calloc</B> calls <B>malloc</B> in order to use the C++ <A HREF="_crt__set_new_mode.htm">_set_new_mode</A> function to set the new handler mode. The new handler mode indicates whether, on failure, <B>malloc</B> is to call the new handler routine as set by <A HREF="_crt__set_new_handler.htm">_set_new_handler</A>. By default, <B>malloc</B> does not call the new handler routine on failure to allocate memory. You can override this default behavior so that, when <B>calloc</B> fails to allocate memory, <B>malloc</B> calls the new handler routine in the same way that the <B>new</B> operator does when it fails for the same reason. To override the default, call </P>

<PRE><CODE>_set_new_mode(1)
</CODE></PRE>

<P>early in your program, or link with NEWMODE.OBJ.</P>

<P>When the application is linked with a debug version of the C run-time libraries, <B>calloc</B> resolves to <A HREF="_crt__calloc_dbg.htm">_calloc_dbg</A>. For more information about how the heap is managed during the debugging process, see <A HREF="_core_using_c_run.2d.time_library_debugging_support.htm">Using C Run-Time Library Debugging Support</A>.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* CALLOC.C: This program uses calloc to allocate space for
 * 40 long integers. It initializes each element to zero.
 */
#include &lt;stdio.h&gt;
#include &lt;malloc.h&gt;

void main( void )
{
   long *buffer;

   buffer = (long *)calloc( 40, sizeof( long ) );
   if( buffer != NULL )
      printf( "Allocated 40 long integers\n" );
   else
      printf( "Can't allocate memory\n" );
   free( buffer );
}

Output
Allocated 40 long integers

</CODE></PRE>

<P><A HREF="_crt_memory_allocation.htm">Memory Allocation Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_free.htm">free</A>, <A HREF="_crt_malloc.htm">malloc</A>, <A HREF="_crt_realloc.htm">realloc</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Strings: Unicode and Multibyte Character Set (MBCS) Support</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_CString">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_strings.3a_.unicode_and_multibyte_character_set_.28.mbcs.29_.support"></A>Strings: Unicode and Multibyte Character Set (MBCS) Support</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_strings.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_string_handling_tasks.htm">How Do I</A></P>

<P>Some international markets use languages, such as Japanese and Chinese, with large character sets. To support programming for these markets, the Microsoft Foundation Class Library (MFC) is enabled for two different approaches to handling large character sets:

<UL type=disc>
	<LI><A HREF="#_core_mfc_support_for_unicode_strings">Unicode</A><BR><BR></LI>

	<LI><A HREF="#_core_mfc_support_for_mbcs_strings">Multibyte Character Sets (MBCS)</A></LI>
</UL>



<H2><A NAME="_core_mfc_support_for_unicode_strings"></A>MFC Support for Unicode Strings</H2>

<P>The entire class library is conditionally enabled for Unicode characters and strings. In particular, class <A HREF="JavaScript:hhobj_2.Click()">CString</A> is Unicode-enabled.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The Unicode versions of the MFC libraries are not copied to your hard drive unless you select them during a Custom installation. They are not copied during other types of installation. If you attempt to build or run an MFC Unicode application without the MFC Unicode files, you may get errors.</P>

<P class=indent>To copy the files to your hard drive, rerun Setup, choose Custom installation, clear the check boxes for all other components except "Microsoft Foundation Class Libraries," click the Details button, and select both "Static Library for Unicode" and "Shared Library for Unicode." This will copy the following files to your hard drive:</P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>UAFXCW.LIB</TD>
<TD width=26%>UAFXCW.PDB</TD>
<TD width=25%>UAFXCWD.LIB</TD>
<TD width=25%>UAFXCWD.PDB</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MFCxxU.LIB</TD>
<TD width=26%>MFCxxU.DBG</TD>
<TD width=25%>MFCxxU.DLL</TD>
<TD width=25%>MFCxxUD.LIB</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MFCxxUD.PDB</TD>
<TD width=26%>MFCxxUD.DLL</TD>
<TD width=25%>MFCDxxUD.LIB</TD>
<TD width=25%>MFCDxxUD.PDB</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MFCDxxUD.DLL</TD>
<TD width=26%>MFCNxxUD.LIB</TD>
<TD width=25%>MFCNxxUD.PDB</TD>
<TD width=25%>MFCNxxUD.DLL</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MFCOxxUD.LIB</TD>
<TD width=26%>MFCOxxUD.PDB</TD>
<TD width=25%>MFCOxxUD.DLL</TD>
<TD width=25%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P>Where xx represents the version number of the file; for example, ‘42’ represents version 4.2.</P>

<P><B>CString</B> is based on the <B>TCHAR</B> data type. If the symbol <B>_UNICODE</B> is defined for a build of your program, <B>TCHAR</B> is defined as type <B>wchar_t</B>, a 16-bit character encoding type; otherwise, it is defined as <B>char</B>, the normal 8-bit character encoding. Under Unicode, then, <B>CString</B>s are composed of 16-bit characters. Without Unicode, they are composed of characters of type <B>char</B>.</P>

<P>To complete Unicode programming of your application, you must also:

<UL type=disc>
	<LI>Use the <B>_T</B> macro to conditionally code literal strings to be portable to Unicode.<BR><BR></LI>

	<LI>When you pass strings, pay attention to whether function arguments require a length in characters or a length in bytes. The difference is important if you’re using Unicode strings. <BR><BR></LI>

	<LI>Use portable versions of the C run-time string-handling functions.<BR><BR></LI>

	<LI>Use the following data types for characters and character pointers:
<P class=tl><B>TCHAR</B>&nbsp;&nbsp;&nbsp;Where you would use <B>char</B>.</P>
<P class=tl><B>LPTSTR</B>&nbsp;&nbsp;&nbsp;Where you would use <B>char*</B>.</P>
<P class=tl><B>LPCTSTR</B>&nbsp;&nbsp;&nbsp;Where you would use <B>const char*</B>. <B>CString</B> provides the <B>operator LPCTSTR</B> to convert between <B>CString</B> and <B>LPCTSTR</B>.</P></LI>
</UL>

<P><B>CString</B> also supplies Unicode-aware constructors, assignment operators, and comparison operators.</P>

<P>For related information on Unicode programming, see <A HREF="_core_unicode_and_mbcs.htm">Unicode and MBCS</A> and <A HREF="_core_unicode_topics.htm">Unicode Topics</A>. The <I>Run-Time Library Reference</I> defines portable versions of all of its string-handling functions. See the category <A HREF="_crt_internationalization.htm">Internationalization</A>.</P>



<H2><A NAME="_core_mfc_support_for_mbcs_strings"></A>MFC Support for MBCS Strings</H2>

<P>The class library is also enabled for multibyte character sets — specifically for double-byte character sets (DBCS). </P>

<P>Under this scheme, a character can be either one or two bytes wide. If it is two bytes wide, its first byte is a special “lead byte,” chosen from a particular range depending on which code page is in use. Taken together, the lead and “trail bytes” specify a unique character encoding.</P>

<P>If the symbol <B>_MBCS</B> is defined for a build of your program, type <B>TCHAR</B>, on which <B>CString</B> is based, maps to <B>char</B>. It’s up to you to determine which bytes in a <B>CString</B> are lead bytes and which are trail bytes. The C run-time library supplies functions to help you determine this.</P>

<P>Under DBCS, a given string can contain all single-byte ANSI characters, all double-byte characters, or a combination of the two. These possibilities require special care in parsing strings, including <B>CString</B> objects.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Unicode string serialization in MFC can read both Unicode and MBCS strings regardless of which version of the application you are running. Because of this, your data files are portable between Unicode and MBCS versions of your program.</P>

<P><B>CString</B> member functions use special “generic text” versions of the C run-time functions they call, or they use Unicode-aware functions such as <B>lstrlen</B> or <B>lstrcpy</B>. Thus, for example, if a <B>CString</B> function would normally call <B>strcmp</B>, it calls the corresponding generic-text function <B>_tcscmp</B> instead. Depending on how the symbols <B>_MBCS</B> and <B>_UNICODE</B> are defined, <B>_tcscmp</B> maps as follows:</P>

<P class=dt>_MBCS defined</P>

<P class=indent><B>_mbscmp</B></P>

<P class=dt>_UNICODE defined</P>

<P class=indent><B>wcscmp</B></P>

<P class=dt>Neither symbol defined</P>

<P class=indent><B>strcmp</B></P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The symbols <B>_MBCS</B> and <B>_UNICODE</B> are mutually exclusive.</P>

<P>Generic-text function mappings for all of the run-time string-handling routines are detailed in the <I>Run-Time Library Reference</I>. See the category <A HREF="_crt_internationalization.htm">Internationalization</A>. </P>

<P>Similarly, <B>CString</B> member functions are implemented using “generic” data type mappings. To enable both MBCS and Unicode, MFC uses <B>TCHAR</B> for <B>char</B>, <B>LPTSTR</B> for <B>char*</B>, and <B>LPCTSTR</B> for <B>const char*</B>. These result in the correct mappings for either MBCS or Unicode.</P>
</font>
</BODY>
</HTML>

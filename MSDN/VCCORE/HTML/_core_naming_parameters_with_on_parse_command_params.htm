<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Naming Parameters with ON_PARSE_COMMAND_PARAMS</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>
<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_naming_parameters_with_on_parse_command_params"></A>Naming Parameters with ON_PARSE_COMMAND_PARAMS</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_internet_support.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_internet_tasks.htm">How Do I</A></P>

<P>This part of the example shows how to use the <B>ON_PARSE_COMMAND_PARAMS</B> macro to name parameters. Named parameters can appear in any order, as long as they precede all optional ones. They are useful in writing a function with a variable number of parameters for responding to a submit button on an HTML form. For example, you can create an HTML form to collect name, address, or additional information. When the user clicks the submit button on the form, a URL containing the information the user entered is passed to the server. Your parse maps can specify default values for optional fields. For information about HTML tags that specify how a form’s content is sent to the server, see <A HREF="_core_internet_first_steps.3a_.html.htm">Internet First Steps: HTML</A>.</P>

<P>The <CODE>RegisterUser</CODE> function takes three parameters: <CODE>First</CODE>, <CODE>Middle</CODE>, and <CODE>Last</CODE>:</P>

<PRE><CODE>BEGIN_PARSE_MAP( CServerDerived, CHttpServer )
ON_PARSE_COMMAND( RegisterUser, CServerDerived, ITS_PSTR ITS_PSTR ITS_PSTR )
ON_PARSE_COMMAND_PARAMS("First Middle Last")
END_PARSE_MAP( CServerDerived )
</CODE></PRE>

<P>The corresponding command handler is written like this:</P>

<PRE><CODE>CServerDerived::RegisterUser( CHttpServerContext* pctxt, LPCTSTR pstrFirst, LPCTSTR pstrMiddle, LPCTSTR pstrLast )
{
   // do processing here!
}
</CODE></PRE>

<P>For example, if the client uses a fill-in form with <CODE>METHOD=GET, ACTION="http://mooseboy/survey/survey.dll?RegisterUser"</CODE> and three text boxes named "First", "Middle", and "Last" to invoke<CODE> RegisterUser</CODE>, and the user enters the values "Richard", "M.", and "Jones", the URL will be formatted as follows:</P>

<PRE><CODE>http://mooseboy/survey/survey.dll?RegisterUser?First=Richard&amp;Middle=M%2E&amp;Last=Jones
</CODE></PRE>

<P>The parse map looks at each<CODE> name=value </CODE>pair and assigns the value accordingly — all three parameters to<CODE> RegisterUser </CODE>will correctly resolve to "Richard", "M.", and "Jones", respectively.</P>

<H3>What do you want to know more about?</H3>

<UL type=disc>
	<LI><A HREF="_core_managing_required_and_optional_parameters.htm">Managing Required and Optional Parameters</A></LI>
</UL>
</font>
</BODY>
</HTML>

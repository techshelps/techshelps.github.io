<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>fflush</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_fflush"></A><SUP></SUP>fflush</H1>

<P>Flushes a stream.</P>

<P><B>int</B> <B>fflush(</B> <B>FILE</B> <B>*</B><I>stream</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Function</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=57%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>fflush</B></TD>
<TD width=27%>&lt;stdio.h&gt;</TD>
<TD width=57%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>fflush</B> returns 0 if the buffer was successfully flushed. The value 0 is also returned in cases in which the specified stream has no buffer or is open for reading only. A return value of <B>EOF</B> indicates an error.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;If <B>fflush</B> returns <B>EOF</B>, data may have been lost due to a write failure. When setting up a critical error handler, it is safest to turn buffering off with the <B>setvbuf</B> function or to use low-level I/O routines such as <B>_open</B>, <B>_close</B>, and <B>_write</B> instead of the stream I/O functions.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>stream</I></P>

<P class=indent>Pointer to <B>FILE</B> structure</P>

<P class=label><B>Remarks</B></P>

<P>The <B>fflush</B> function flushes a stream. If the file associated with <I>stream</I> is open for output, <B>fflush</B> writes to that file the contents of the buffer associated with the stream. If the stream is open for input, <B>fflush</B> clears the contents of the buffer. <B>fflush</B> negates the effect of any prior call to <B>ungetc</B> against <I>stream</I>. Also, <B>fflush(NULL)</B> flushes all streams opened for output. The stream remains open after the call. <B>fflush</B> has no effect on an unbuffered stream.</P>

<P>Buffers are normally maintained by the operating system, which determines the optimal time to write the data automatically to disk: when a buffer is full, when a stream is closed, or when a program terminates normally without closing the stream. The commit-to-disk feature of the run-time library lets you ensure that critical data is written directly to disk rather than to the operating-system buffers. Without rewriting an existing program, you can enable this feature by linking the program’s object files with COMMODE.OBJ. In the resulting executable file, calls to <B>_flushall</B> write the contents of all buffers to disk. Only <B>_flushall</B> and <B>fflush</B> are affected by COMMODE.OBJ.</P>

<P>For information about controlling the commit-to-disk feature, see <A HREF="_crt_stream_i.2f.o.htm">Stream I/O</A>, <A HREF="_crt_fopen.2c_._wfopen.htm">fopen</A>, and <A HREF="_crt__fdopen.2c_._wfdopen.htm">_fdopen</A>.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* FFLUSH.C */

#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;

void main( void )
{
   int integer;
   char string[81];

   /* Read each word as a string. */
   printf( "Enter a sentence of four words with scanf: " );
   for( integer = 0; integer &lt; 4; integer++ )
   {
      scanf( "%s", string );
      printf( "%s\n", string );
   }

   /* You must flush the input buffer before using gets. */
   fflush( stdin );
   printf( "Enter the same sentence with gets: " );
   gets( string );
   printf( "%s\n", string );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Enter a sentence of four words with scanf: This is a test
This
is
a
test
Enter the same sentence with gets: This is a test
This is a test

</CODE></PRE>

<P><A HREF="_crt_stream_i.2f.o.htm">Stream I/O Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_fclose.2c_._fcloseall.htm">fclose</A>, <A HREF="_crt__flushall.htm">_flushall</A>, <A HREF="_crt_setvbuf.htm">setvbuf</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Why Floating Point Numbers May Lose Precision</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_compiling_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="floating point constants">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_why_floating_point_numbers_may_lose_precision"></A>Why Floating Point Numbers May Lose Precision</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_optimizing_your_code.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_optimize_a_program.htm">How Do I</A></P>

<P class=indent><B><B>Feature Only in Professional and Enterprise Editions</B></B>&nbsp;&nbsp;&nbsp;Code optimization is supported only in Visual C++ Professional and Enterprise Editions. For more information, see <A HREF="JavaScript:hhobj_2.Click()">Visual C++ Editions</A>.</P>

<P>Floating point decimal values generally do not have an exact binary representation. This is a side effect of how the CPU represents floating point data. For this reason, you may experience some loss of precision, and some floating point operations may produce unexpected results.</P>

<P>This behavior is the result of one of the following:

<UL type=disc>
	<LI>The binary representation of the decimal number may not be exact.<BR><BR></LI>

	<LI>There is a type mismatch between the numbers used (for example, mixing float and double).</LI>
</UL>

<P>To resolve the behavior, most programmers either ensure that the value is greater or less than what is needed, or they get and use a Binary Coded Decimal (BCD) library that will maintain the precision.</P>

<P>Microsoft uses IEEE floating point format for floating point number representation. For information about the actual binary representation of floating point values in a CPU and how precision and accuracy are affected in a floating point calculation, see <A HREF="_core_ieee_floating.2d.point_representation_and_microsoft_languages.htm">IEEE Floating-Point Representation and Microsoft Languages</A>.</P>

<H2>Sample</H2>

<PRE><CODE>/* Compile options needed: none. Value of c is printed with a decimal point precision of 10 and  6 (printf rounded value by default) to show the difference
*/
#include &lt;stdio.h&gt;
#define EPSILON 0.0001   // Define your own tolerance
#define FLOAT_EQ(x,v) (((v - EPSILON) &lt; x) &amp;&amp; (x &lt;( v + EPSILON)))
void main()
{
    float a,b,c
    a=1.345f;
    b=1.123f;
    c=a+b;
   //if (FLOAT_EQ(c, 2.468))        // Remove comment for correct result
   if (c == 2.468)                 //Comment this line for correct result
   printf("They are equal\n");
else
   printf("They are not equal!!The value of c is %13.10f,or %f",c,c);
}</CODE></PRE>

<H2>The Output Result</H2>

<P>They are not equal. The value of c is 2.4679999352 or 2.468000.</P>

<P>For EPSILON, you may use the constants FLT_EPSILON defined for float as 1.192092896e-07F or DBL_EPSILON defined for double as 2.2204460492503131e-016. You need to include float.h for these constants. These constants are defined as the smallest positive number x, such that x+1.0 is not equal to 1.0. Because this is a very small number it is advisable that you employ user-defined tolerance for calculations involving very large numbers. See <A HREF="JavaScript:hhobj_3.Click()">Floating Limits</A> for other predefined constants.</P>
</font>
</BODY>
</HTML>

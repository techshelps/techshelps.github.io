<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_set_se_translator</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__set_se_translator"></A><SUP></SUP>_set_se_translator</H1>

<P>Handles Win32 exceptions (C structured exceptions) as C++ typed exceptions.</P>

<P><B>typedef</B> <B>void</B> <B>(*_se_translator_function)(</B> <B>unsigned</B> <B>int,</B> <B>struct</B> <B>_EXCEPTION_POINTERS*</B> <B>);</B></P>

<P><B>_se_translator_function</B> <B>_set_se_translator(</B> <B>_se_translator_function</B> <I>se_trans_func</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=28%><B>Routine</B></TD>
<TD class=label width=31%><B>Required Header</B></TD>
<TD class=label width=41%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=28%><B>_set_se_translator</B></TD>
<TD width=31%>&lt;eh.h&gt;</TD>
<TD width=41%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>_set_se_translator</B> returns a pointer to the previous translator function registered by <B>_set_se_translator</B>, so that the previous function can be restored later. If no previous function has been set, the return value may be used to restore the default behavior; this value may be NULL.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>se_trans_func</I></P>

<P class=indent>Pointer to a C structured exception translator function that you write</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_set_se_translator</B> function provides a way to handle Win32 exceptions (C structured exceptions) as C++ typed exceptions. To allow each C exception to be handled by a C++ <B>catch</B> handler, first define a C exception “wrapper” class that can be used, or derived from, in order to attribute a specific class type to a C exception. To use this class, install a custom C exception translator function that is called by the internal exception-handling mechanism each time a C exception is raised. Within your translator function, you can throw any typed exception that can be caught by a matching C++ <B>catch</B> handler.</P>

<P>To specify a custom translation function, call <B>_set_se_translator</B> with the name of your translation function as its argument. The translator function that you write is called once for each function invocation on the stack that has <B>try</B> blocks. There is no default translator function.</P>

<P>In a multithreaded environment, translator functions are maintained separately for each thread. Each new thread needs to install its own translator function. Thus, each thread is in charge of its own translation handling.</P>

<P>The <I>se_trans_func</I> function that you write must take an unsigned integer and a pointer to a Win32 <B>_EXCEPTION_POINTERS</B> structure as arguments. The arguments are the return values of calls to the Win32 API <B>GetExceptionCode</B> and <B>GetExceptionInformation</B> functions, respectively.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/*  SETRANS.CPP 
 */

#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
#include &lt;eh.h&gt;

void SEFunc();
void trans_func( unsigned int, EXCEPTION_POINTERS* );

class SE_Exception
{
private:
    unsigned int nSE;
public:
    SE_Exception() {}
    SE_Exception( unsigned int n ) : nSE( n ) {}
    ~SE_Exception() {}
    unsigned int getSeNumber() { return nSE; }
};
void main( void )
{
    try
    {
        _set_se_translator( trans_func );
        SEFunc();
    }
    catch( SE_Exception e )
    {
        printf( "Caught a __try exception with SE_Exception.\n" );
    }
}
void SEFunc()
{
    __try
    {
        int x, y=0;
        x = 5 / y;
    }
    __finally
    {
        printf( "In finally\n" );
    }
}
void trans_func( unsigned int u, EXCEPTION_POINTERS* pExp )
{
    printf( "In trans_func.\n" );
    throw SE_Exception();
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>In finally.
In trans_func.
Caught a __try exception with SE_Exception.

</CODE></PRE>

<P><A HREF="_crt_exception_handling_routines.htm">Exception Handling Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_set_terminate.htm">set_terminate</A>, <A HREF="_crt_set_unexpected.htm">set_unexpected</A>, <A HREF="_crt_terminate.htm">terminate</A>, <A HREF="_crt_unexpected.htm">unexpected</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>File Operations</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_file_operations"></A><SUP></SUP>File Operations</H1>

<P>You may need to increase the size of fixed-length buffers for filenames and environment strings. Windows 95 and Windows NT support filenames of up to 256 characters, rather than the 8.3 format supported by MS-DOS. You can make code more portable by allocating longer buffers or by using dynamic memory allocation. If you want to conserve memory under Windows 3.<I>x</I>, you can use <B>#ifdef</B> statements to allocate buffers of the proper length for the environment. You can also use macros such as _MAX_PATH and _MAX_FNAME, defined in STDLIB.H.</P>

<P>Windows 95 and Windows NT require stricter use of file open and close operations than Windows 3.<I>x</I>. There are some combinations of open and close functions (for example, mixing <B>_open</B> with <B>_lclose</B>) that may work in code for Windows 3.<I>x</I>, but require revision to work correctly with Windows 95 and Windows NT.</P>

<P>You may also need to make changes in low-level file I/O. In porting Windows 3.<I>x</I> code, some developers change from using the Windows API file I/O functions (such as <B>_lopen</B> and <B>_lread</B>) to using the C run-time low-level I/O functions (such as <B>_open</B> and <B>_read</B>). All versions of the Windows API support only binary mode, not text mode, but the C run-time calls use text mode by default. Therefore, when changing from the Windows file I/O to the C run-time versions, open files in binary mode by doing one of the following:

<UL type=disc>
	<LI>Link with BINMODE.OBJ, which changes the default mode for all file-open operations.<BR><BR></LI>

	<LI>Open the individual files with _O_BINARY flag set.<BR><BR></LI>

	<LI>Use <B>setmode</B> to change an open file to _O_BINARY.</LI>
</UL>
</font>
</BODY>
</HTML>

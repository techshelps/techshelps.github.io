<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DAO Recordset: Using Aggregate SQL Functions with MFC DAO Classes</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Daoenrol tutorial">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_CDaoRecordset.3a3a.GetFieldValue">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_Record_Field_Exchange_Functions">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_dao_recordset.3a_.using_aggregate_sql_functions_with_mfc_dao_classes"></A>DAO Recordset: Using Aggregate SQL Functions with MFC DAO Classes</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_databases.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_dao_database_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_databases.3a_.frequently_asked_questions.htm">FAQ</A>  |&nbsp; <A HREF="_core_dao_database_sample_list.htm">Sample</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_odbc_driver_list.htm">ODBC Driver List</A></P>

<P>With DAO records, you can't use the techniques described in the article <A HREF="_core_recordset.3a_.obtaining_sums_and_other_aggregate_results_.28.odbc.29.htm">Recordset: Obtaining SUMs and Other Aggregate Results (ODBC)</A>, which works for the MFC ODBC classes only. However, there are two methods for retrieving information from aggregate SQL functions using the MFC DAO classes:

<UL type=disc>
	<LI><A HREF="#_core_retrieve_sql_values_with_cdaorecordset.3a3a.getfieldvalue">Use CDaoRecordset::GetFieldValue</A>.<BR><BR></LI>

	<LI><A HREF="#_core_using_a_cdaorecordset.2d.derived_class_to_retrieve_sql_values">Modify a CDaoRecordset-derived class</A> by:
<UL type=disc>
	<LI>Changing the SQL statement used.<BR><BR></LI>

	<LI>Placing column alias names in DFX calls of the recordset's <CODE>DoFieldExchange</CODE> member function.</LI>
</UL>
</LI>
</UL>



<H2><A NAME="_core_retrieve_sql_values_with_cdaorecordset.3a3a.getfieldvalue"></A>Retrieve SQL Values with CDaoRecordset::GetFieldValue</H2>

<P><A HREF="JavaScript:hhobj_3.Click()">CDaoRecordset::GetFieldValue</A> allows you to use a <B>CDaoRecordset</B> object without deriving a class from it. You can retrieve records from an SQL statement that contains an aggregate function with <B>GetFieldValue</B>.</P>

<P>For example, if you have a student database that contains the names of students and test scores for each, and you want the average score for each student (a kind of aggregate value), you can use the following code: </P>

<PRE><CODE>  CDaoDatabase db;
  db.Open(_T("d:\\scores.mdb"));

  CDaoRecordset rs(&amp;db);
  rs.Open(dbOpenDynaset,
         _T("Select [Student Name], AVG([Test Score]) AS AvgScore FROM 
                SCORES GROUP BY [Student Name]"));
  while (!rs.IsEOF())
  {
     COleVariant varName;
     COleVariant varAvg;
     varName= rs.GetFieldValue("student name");
     varAvg=  rs.GetFieldValue("AvgScore");
// We know the return values are BSTR and VT_R8 types.
// If we didn't know, we would have to look at the vt
// member of COleVariant to see what type the data is.

// Prints the data to output window of debugger.
     TRACE(_T("%s\n%f\n"), V_BSTRT(&amp;varName), V_R8(&amp;varAvg));
     rs.MoveNext();
  }
  rs.Close();
  db.Close();
</CODE></PRE>

<P>Notice that the alias name <CODE>AvgScore</CODE> is used for the column that contains the average score for each student.</P>

<P>For more on DAO and SQL, see the article <A HREF="_core_dao_queries.3a_.sql_for_dao.htm">DAO Queries: SQL for DAO</A>.</P>

<H2><A NAME="_core_using_a_cdaorecordset.2d.derived_class_to_retrieve_sql_values"></A>Using a CDaoRecordset-Derived Class to Retrieve SQL Values</H2>

<P>You can use a <B>CDaoRecordset</B>-derived class to retrieve the results of an SQL statement with an aggregate SQL function, as follows:

<UL type=disc>
	<LI>Explicitly specify the full SQL statement as the second argument of the <B>Open</B> call or specify the full SQL statement in the <B>GetDefaultSQL</B> function. Then, in the SQL statement, specify a column alias for the functions that will contain the results of aggregate SQL functions such as AVG or SUM.
<P class=tl>For example (assuming you have defined a recordset <CODE>rs</CODE>):</P>
<PRE><CODE>  rs.Open(dbOpenDynaset,
        _T("Select [Student Name], AVG([Test Score]) AS AvgScore FROM 
            SCORES GROUP BY [Student Name]"));
</CODE></PRE>
</LI>

	<LI>Modify the DFX functions in the <CODE>DoFieldExchange</CODE> function of the <B>CDaoRecordset</B>-derived class so that it uses the alias names. For more on the DFX functions, see <A HREF="JavaScript:hhobj_4.Click()">Record Field Exchange Functions</A> in the <I>Class Library Reference</I>.
<P class=tl>For example:</P>
<PRE><CODE>  void CMyRecordset::DoFieldExchange(CDaoFieldExchange* pFX)
  {
  ...
     DFX_Text(pFX, _T("[student name]"), m_student_name);
     DFX_Double(pFX, _T("[AvgScore]"), m_avg_score);
     ... 
  }
</CODE></PRE>
</LI>
</UL>

<P>With this technique, you do not need to work with <B>COleVariant</B> objects as you do when retrieving SQL values with <B>CDaoRecordset::GetFieldValue</B>.</P>

<P>After the recordset has been modified, here is what the code might look like:</P>

<PRE><CODE>  CAvgSet rs;
  rs.Open(dbOpenDynaset,
         _T("Select [Student Name], AVG([Test Score]) AS AvgScore 
             FROM SCORES GROUP BY [Student Name]"));
  while (!rs.IsEOF())
  {
     TRACE(_T("%s\n%f\n"), (LPCSTR)rs.m_student_name, 
           rs.m_test_score);
     rs.MoveNext();
  }
  rs.Close();
</CODE></PRE>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_dao_queries.3a_.sql_for_dao.htm">DAO Queries: SQL for DAO</A>, <A HREF="_core_recordset.3a_.obtaining_sums_and_other_aggregate_results_.28.odbc.29.htm">Recordset: Obtaining SUMs and Other Aggregate Results (ODBC)</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Unsized Arrays in Structures</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_unsized_arrays_in_structures"></A><SUP></SUP>Unsized Arrays in Structures</H1>

<P><B>Microsoft Specific —&gt;</B></P>

<P>A Microsoft extension allows the last member of a C or C++ structure or class to be a variable-sized array. These are called unsized arrays. The unsized array at the end of the structure allows you to append a variable-sized string or other array, thus avoiding the run-time execution cost of a pointer dereference.</P>

<PRE><CODE>struct PERSON
{
   unsigned number;
   char     name[];    // Unsized array
};</CODE></PRE>

<P>If you apply the <B>sizeof</B> operator to this structure, the ending array size is considered to be 0. The size of this array is 2 bytes, which is the size of the unsigned member. To get the true size of a variable of type <CODE>PERSON</CODE>, you would need to obtain the array size separately.</P>

<P>The size of the structure is added to the size of the array to get the total size to be allocated. After allocation, the array is copied to the array member of the structure, as shown below:</P>

<PRE><CODE>struct PERSON *ptr;
char who[40];

printf( "Enter name: " );
gets( who );

// Allocate space for structure, name, and terminating null
ptr = malloc( sizeof( struct PERSON ) + strlen( who ) + 1 );

// Copy the string to the name member
strcpy( ptr-&gt;name, who );</CODE></PRE>

<P>Even after the structure variable's array is initialized, the <B>sizeof</B> operator returns the size of the variable without the array.</P>

<P>Structures with unsized arrays can be initialized, but arrays of such structures cannot be initialized.</P>

<PRE><CODE>struct PERSON me  = { 6, "Me" };        // Legal
struct PERSON you = { 7, "You" };

struct PERSON us[2] = { { 8, "Them" },  // Error
                        { 9, "We" } };</CODE></PRE>

<P>An array of characters initialized with a string literal gets space for the terminating null; an array initialized with individual characters (for example, {'a', 'b', 'c'}) does not.</P>

<P>A structure with an unsized array can appear in other structures, as long as it is the last member declared in its enclosing structure. Classes or structures with unsized arrays cannot have direct or indirect virtual bases.</P>

<P>For related information, see <A HREF="_langref_volatile.htm">volatile</A> and <A HREF="_predir_the_.23.define_directive.htm">#define</A>.</P>

<P><B>END Microsoft Specific</B></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>/Oa, /Ow   (Assume No Aliasing, Assume Aliasing Across Function Calls)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_compiling_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_.2f.oa.2c_2f.ow"></A>/Oa, /Ow&nbsp;&nbsp;&nbsp;(Assume No Aliasing, Assume Aliasing Across Function Calls)</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_overviews.3a_.compiling_and_linking.htm">Overview</A>  |&nbsp; <A HREF="_core_set_compiler_options.htm">How Do I</A>  |&nbsp; <A HREF="_core_compiler_reference.htm">Compiler Options</A></P>

<P class=indent><B><B>Feature Only in Professional and Enterprise Editions</B></B>&nbsp;&nbsp;&nbsp;Code optimization is supported only in Visual C++ Professional and Enterprise Editions. For more information, see <A HREF="JavaScript:hhobj_2.Click()">Visual C++ Editions</A>.</P>

<P>Aliasing can slow your application by reducing both register storage of variables and loop optimizations. </P>

<P>The Assume No Aliasing (/Oa) option tells the compiler that your program does not use aliasing. An alias is a name that refers to a memory location that is already referred to by a different name. </P>

<P>The Assume Aliasing Across Function Calls (/Ow) option tells the compiler that no aliasing occurs within function bodies but might occur across function calls. After each function call, pointer variables must be reloaded from memory.</P>

<P>To find these options in the development environment, click <B>Settings</B> on the <B>Project</B> menu. Then click the <B>C/C++</B> tab, and click <B>Optimizations </B>in the <B>Category </B>box. Under <B>Optimizations</B>, click <B>Customize</B>. </P>

<H2>Rules for using /Oa and /Ow</H2>

<P>The following rules must be followed for any variable not declared as <B>volatile</B>, or else /Oa and /Ow are ignored. In these rules, a variable is referenced if it is on either side of an assignment or if a function uses it in an argument:

<UL type=disc>
	<LI>No pointer references a variable that is used directly.<BR><BR></LI>

	<LI>No variable is used directly if a pointer to the variable is being used.<BR><BR></LI>

	<LI>No variable is used directly if the variable’s address is taken within a function.<BR><BR></LI>

	<LI>No pointer is used to access a memory location if another pointer is used to modify the same memory location.</LI>
</UL>

<P>Aliasing bugs most frequently show up as corrupted data. If variables are assigned seemingly random values, compile the program with Disable (<A HREF="_core_.2f.od.htm">/Od</A>). If the program works when compiled with the /Od option, do not use /Oa or /Ow.</P>

<P>The following code fragment could have an aliasing problem:</P>

<PRE><CODE>i = -100;
while( i &lt; 0 )
{
    i += x + y;
    *p = i;
}</CODE></PRE>

<P>Without /Oa or /Ow, the compiler must assume that <CODE>x</CODE> or <CODE>y</CODE> could be modified by the assignment to<CODE> *p </CODE>and cannot assume that<CODE> x + y </CODE>is constant for each loop iteration. If you specify /Oa or /Ow, the compiler assumes that modifying<CODE> *p </CODE>cannot affect either<CODE> x </CODE>or<CODE> y </CODE>and<CODE> x + y </CODE>can be removed from the loop.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;You can disable optimizations around code that uses aliasing (for individual functions) by using <A HREF="_predir_optimize.htm">#pragma optimize</A> with the <B>a</B> or <B>w</B> option.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>printf, wprintf</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_printf.2c_.wprintf"></A>printf, wprintf</H1>

<P>Print formatted output to the standard output stream.</P>

<P><B>int</B> <B>printf(</B> <B>const</B> <B>char</B> <B>*</B><I>format</I> [<B>,</B> <I>argument</I>]<I>...</I> <B>);</B></P>

<P><B>int</B> <B>wprintf(</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>format</I> [<B>,</B> <I>argument</I>]<I>...</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=15%><B>Routine</B></TD>
<TD class=label width=32%><B>Required Header</B></TD>
<TD class=label width=53%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=15%><B>printf</B></TD>
<TD width=32%>&lt;stdio.h&gt;</TD>
<TD width=53%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=15%><B>wprintf</B></TD>
<TD width=32%>&lt;stdio.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=53%>ANSI, Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>Each of these functions returns the number of characters printed, or a negative value if an error occurs.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>format</I></P>

<P class=indent>Format control</P>

<P class=dt><I>argument</I></P>

<P class=indent>Optional arguments</P>

<P class=label><B>Remarks</B></P>

<P>The <B>printf</B> function formats and prints a series of characters and values to the standard output stream, <B>stdout</B>. If arguments follow the <I>format</I> string, the <I>format</I> string must contain specifications that determine the output format for the arguments. <B>printf</B> and <A HREF="_crt_fprintf.2c_.fwprintf.htm">fprintf</A> behave identically except that <B>printf</B> writes output to <B>stdout</B> rather than to a destination of type <B>FILE</B>.</P>

<P><B>wprintf</B> is a wide-character version of <B>printf</B>; <I>format</I> is a wide-character string. <B>wprintf</B> and <B>printf</B> behave identically otherwise. </P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tprintf</TD>
<TD width=29%>printf</TD>
<TD width=26%>printf</TD>
<TD width=28%>wprintf</TD>
</TR>
</TABLE><BR>

<P>The <I>format</I> argument consists of ordinary characters, escape sequences, and (if arguments follow <I>format</I>) format specifications. The ordinary characters and escape sequences are copied to <B>stdout</B> in order of their appearance. For example, the line</P>

<PRE><CODE>printf("Line one\n\t\tLine two\n"); 
</CODE></PRE>

<P>produces the output</P>

<PRE><CODE>Line one
        Line two
</CODE></PRE>

<P><A HREF="_crt_format_specification_fields_.2d_.printf_and_wprintf_functions.htm">Format specifications</A> always begin with a percent sign (<B>%</B>) and are read left to right. When <B>printf</B> encounters the first format specification (if any), it converts the value of the first argument after <I>format</I> and outputs it accordingly. The second format specification causes the second argument to be converted and output, and so on. If there are more arguments than there are format specifications, the extra arguments are ignored. The results are undefined if there are not enough arguments for all the format specifications.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* PRINTF.C: This program uses the printf and wprintf functions
 * to produce formatted output.
 */

#include &lt;stdio.h&gt;

void main( void )
{
   char   ch = 'h', *string = "computer";
   int    count = -9234;
   double fp = 251.7366;
   wchar_t wch = L'w', *wstring = L"Unicode";

   /* Display integers. */
   printf( "Integer formats:\n"
           "\tDecimal: %d  Justified: %.6d  Unsigned: %u\n",
           count, count, count, count );

   printf( "Decimal %d as:\n\tHex: %Xh  C hex: 0x%x  Octal: %o\n",
            count, count, count, count );

   /* Display in different radixes. */
   printf( "Digits 10 equal:\n\tHex: %i  Octal: %i  Decimal: %i\n",
            0x10, 010, 10 );

   /* Display characters. */

   printf("Characters in field (1):\n%10c%5hc%5C%5lc\n", ch, ch, wch, wch);
   wprintf(L"Characters in field (2):\n%10C%5hc%5c%5lc\n", ch, ch, wch, wch);

   /* Display strings. */

   printf("Strings in field (1):\n%25s\n%25.4hs\n\t%S%25.3ls\n",
   string, string, wstring, wstring);
   wprintf(L"Strings in field (2):\n%25S\n%25.4hs\n\t%s%25.3ls\n",
       string, string, wstring, wstring);

   /* Display real numbers. */
   printf( "Real numbers:\n\t%f %.2f %e %E\n", fp, fp, fp, fp );

   /* Display pointer. */
   printf( "\nAddress as:\t%p\n", &amp;count);

   /* Count characters printed. */
   printf( "\nDisplay to here:\n" );
   printf( "1234567890123456%n78901234567890\n", &amp;count );
   printf( "\tNumber displayed: %d\n\n", count );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>Integer formats:
   Decimal: -9234  Justified: -009234  Unsigned: 4294958062
Decimal -9234 as:
   Hex: FFFFDBEEh  C hex: 0xffffdbee  Octal: 37777755756
Digits 10 equal:
   Hex: 16  Octal: 8  Decimal: 10
Characters in field (1):
         h    h    w    w
Characters in field (2):
         h    h    w    w
Strings in field (1):
                 computer
                     comp
   Unicode                      Uni
Strings in field (2):
                 computer
                     comp
   Unicode                      Uni
Real numbers:
   251.736600 251.74 2.517366e+002 2.517366E+002

Address as:   0012FFAC

Display to here:
123456789012345678901234567890
   Number displayed: 16

</CODE></PRE>

<P><A HREF="_crt_floating.2d.point_support.htm">Floating-Point Support Routines</A>  |&nbsp; <A HREF="_crt_stream_i.2f.o.htm">Stream I/O Routines</A>  |&nbsp; <A HREF="_crt_locale.htm">Locale Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_fopen.2c_._wfopen.htm">fopen</A>, <A HREF="_crt_fprintf.2c_.fwprintf.htm">fprintf</A>, <A HREF="_crt_scanf.2c_.wscanf.htm">scanf</A>, <A HREF="_crt_sprintf.2c_.swprintf.htm">sprintf</A>, <A HREF="_crt_vprintf_functions.htm">vprintf Functions</A></P>
</font>
</BODY>
</HTML>

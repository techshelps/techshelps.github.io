<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Memory Management: Heap Allocation</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_memory_management.3a_.heap_allocation"></A>Memory Management: Heap Allocation</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_memory_management_with_mfc.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_memory.2d.management_tasks.htm">How Do I</A></P>

<P>The heap is reserved for the memory allocation needs of the program. It is an area apart from the program code and the stack. Typical C programs use the functions <B>malloc</B> and <B>free</B> to allocate and deallocate heap memory. The Debug version of MFC provides modified versions of the C++ built-in operators <B>new</B> and <B>delete</B> to allocate and deallocate objects in heap memory. </P>

<P>When you use <B>new</B> and <B>delete</B> instead of <B>malloc</B> and <B>free</B>, you are able to take advantage of the class library’s memory-management debugging enhancements, which can be useful in detecting memory leaks. When you build your program with the Release version of MFC, the standard versions of the <B>new</B> and <B>delete</B> operators provide an efficient way to allocate and deallocate memory (the Release version of MFC does not provide modified versions of these operators).</P>

<P>Note that the total size of objects allocated on the heap is limited only by your system’s available virtual memory.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>fgetc, fgetwc, _fgetchar, _fgetwchar</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_fgetc.2c_.fgetwc.2c_._fgetchar.2c_._fgetwchar"></A><SUP></SUP>fgetc, fgetwc, _fgetchar, _fgetwchar</H1>

<P>Read a character from a stream (<B>fgetc</B>, <B>fgetwc</B>) or <B>stdin</B> (<B>_fgetchar</B>, <B>_fgetwchar</B>).</P>

<P><B>int</B> <B>fgetc(</B> <B>FILE</B> <B>*</B><I>stream</I> <B>);</B></P>

<P><B>wint_t</B> <B>fgetwc(</B> <B>FILE</B> <B>*</B><I>stream</I> <B>);</B></P>

<P><B>int</B> <B>_fgetchar(</B> <B>void</B> <B>);</B></P>

<P><B>wint_t</B> <B>_fgetwchar(</B> <B>void</B> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=19%><B>Function</B></TD>
<TD class=label width=36%><B>Required Header</B></TD>
<TD class=label width=45%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>fgetc</B></TD>
<TD width=36%>&lt;stdio.h&gt;</TD>
<TD width=45%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>fgetwc</B></TD>
<TD width=36%>&lt;stdio.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=45%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>_fgetchar</B></TD>
<TD width=36%>&lt;stdio.h&gt;</TD>
<TD width=45%>Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>_fgetwchar</B></TD>
<TD width=36%>&lt;stdio.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=45%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>fgetc</B> and <B>_fgetchar</B> return the character read as an <B>int</B> or return <B>EOF</B> to indicate an error or end of file. <B>fgetwc</B> and <B>_fgetwchar</B> return, as a <A HREF="_crt_standard_types.htm">wint_t</A>, the wide character that corresponds to the character read or return <B>WEOF</B> to indicate an error or end of file. For all four functions, use <B>feof</B> or <B>ferror</B> to distinguish between an error and an end-of-file condition. For <B>fgetc</B> and <B>fgetwc</B>, if a read error occurs, the error indicator for the stream is set.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>stream</I></P>

<P class=indent>Pointer to <B>FILE</B> structure</P>

<P class=label><B>Remarks</B></P>

<P>Each of these functions reads a single character from the current position of a file; in the case of <B>fgetc</B> and <B>fgetwc</B>, this is the file associated with <I>stream</I>. The function then increments the associated file pointer (if defined) to point to the next character. If the stream is at end of file, the end-of-file indicator for the stream is set. Routine-specific remarks follow.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=19%><B>Routine</B></TD>
<TD class=label width=81%><B>Remarks</B></TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>fgetc</B></TD>
<TD width=81%>Equivalent to <B>getc</B>, but implemented only as a function, rather than as a function and a macro.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>fgetwc</B></TD>
<TD width=81%>Wide-character version of <B>fgetc</B>. Reads <I>c</I> as a multibyte character or a wide character according to whether <I>stream</I> is opened in text mode or binary mode. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>_fgetchar</B></TD>
<TD width=81%>Equivalent to <B>fgetc( stdin )</B>. Also equivalent to <B>getchar</B>, but implemented only as a function, rather than as a function and a macro. Microsoft-specific; not ANSI-compatible.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>_fgetwchar</B></TD>
<TD width=81%>Wide-character version of <B>_fgetchar</B>. Reads <I>c</I> as a multibyte character or a wide character according to whether <I>stream</I> is opened in text mode or binary mode. Microsoft-specific; not ANSI-compatible.</TD>
</TR>
</TABLE><BR>

<P>For more information about processing wide characters and multibyte characters in text and binary modes, see <A HREF="_crt_unicode.99_.stream_i.2f.o_in_text_and_binary_modes.htm">Unicode Stream I/O in Text and Binary Modes</A>.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_fgettc</TD>
<TD width=29%>fgetc</TD>
<TD width=26%>fgetc</TD>
<TD width=28%>fgetwc</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_fgettchar</TD>
<TD width=29%>fgetchar</TD>
<TD width=26%>fgetchar</TD>
<TD width=28%>_fgetwchar</TD>
</TR>
</TABLE><BR>

<P class=label><B>Example</B></P>

<PRE><CODE>/* FGETC.C: This program uses getc to read the first
 * 80 input characters (or until the end of input)
 * and place them into a string named buffer.
 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void main( void )
{
   FILE *stream;
   char buffer[81];
   int  i, ch;

   /* Open file to read line from: */
   if( (stream = fopen( "fgetc.c", "r" )) == NULL )
      exit( 0 );

   /* Read in first 80 characters and place them in "buffer": */
   ch = fgetc( stream );
   for( i=0; (i &lt; 80 ) &amp;&amp; ( feof( stream ) == 0 ); i++ )
   {
      buffer[i] = (char)ch;
      ch = fgetc( stream );
   }

   /* Add null to end string */
   buffer[i] = '\0';
   printf( "%s\n", buffer );
   fclose( stream );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>/* FGETC.C: This program uses getc to read the first
 * 80 input characters (or

</CODE></PRE>

<P><A HREF="_crt_stream_i.2f.o.htm">Stream I/O Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_fputc.2c_.fputwc.2c_._fputchar.2c_._fputwchar.htm">fputc</A>, <A HREF="_crt_getc.2c_.getwc.2c_.getchar.2c_.getwchar.htm">getc</A></P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>asctime, _wasctime</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_asctime.2c_._wasctime"></A><SUP></SUP>asctime, _wasctime</H1>

<P>Converts a <B>tm </B>time structure to a character string.</P>

<P><B>char</B> <B>*asctime(</B> <B>const</B> <B>struct</B> <B>tm</B> <B>*</B><I>timeptr</I> <B>);</B></P>

<P><B>wchar_t</B> <B>*_wasctime(</B> <B>const</B> <B>struct</B> <B>tm</B> <B>*</B><I>timeptr</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=22%><B>Routine</B></TD>
<TD class=label width=30%><B>Required Header</B></TD>
<TD class=label width=48%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>asctime</B></TD>
<TD width=30%>&lt;time.h&gt;</TD>
<TD width=48%>ANSI, Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>_wasctime</B></TD>
<TD width=30%>&lt;time.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=48%>Win 95, Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P><B>asctime</B> returns a pointer to the character string result; <B>_wasctime</B> returns a pointer to the wide-character string result. There is no error return value.</P>

<P class=label><B>Parameter</B></P>

<P class=dt><I>timeptr</I></P>

<P class=indent>Time/date structure</P>

<P class=label><B>Remarks</B></P>

<P>The <B>asctime</B> function converts a time stored as a structure to a character string. The <I>timeptr</I> value is usually obtained from a call to <B>gmtime</B> or <B>localtime</B>, which both return a pointer to a <B>tm</B> structure, defined in TIME.H.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=24%><B><I>timeptr</I> Field</B></TD>
<TD class=label width=76%><B>Value</B></TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>tm_hour</B></TD>
<TD width=76%>Hours since midnight (0 – 23)</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>tm_isdst</B></TD>
<TD width=76%>Positive if daylight saving time is in effect; 0 if daylight saving time is not in effect; negative if status of daylight saving time is unknown. The C run-time library assumes the United States’s rules for implementing the calculation of Daylight Saving Time (DST). </TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>tm_mday</B></TD>
<TD width=76%>Day of month (1 – 31)</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>tm_min</B></TD>
<TD width=76%>Minutes after hour (0 – 59)</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>tm_mon</B></TD>
<TD width=76%>Month (0 – 11; January = 0)</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>tm_sec</B></TD>
<TD width=76%>Seconds after minute (0 – 59)</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>tm_wday</B></TD>
<TD width=76%>Day of week (0 – 6; Sunday = 0)</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>tm_yday</B></TD>
<TD width=76%>Day of year (0 – 365; January 1 = 0)</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>tm_year</B></TD>
<TD width=76%>Year (current year minus 1900)</TD>
</TR>
</TABLE><BR>

<P>The converted character string is also adjusted according to the local time zone settings. See the <A HREF="_crt_time.htm">time</A>, <A HREF="_crt__ftime.htm">_ftime</A>, and <A HREF="_crt_localtime.htm">localtime</A> functions for information on configuring the local time and the <A HREF="_crt__tzset.htm">_tzset</A> function for details about defining the time zone environment and global variables. </P>

<P>The string result produced by <B>asctime</B> contains exactly 26 characters and has the form <CODE>Wed Jan 02 02:03:55 1980\n\0</CODE>. A 24-hour clock is used. All fields have a constant width. The newline character and the null character occupy the last two positions of the string. <B>asctime</B> uses a single, statically allocated buffer to hold the return string. Each call to this function destroys the result of the previous call.</P>

<P><B>_wasctime</B> is a wide-character version of <B>asctime</B>. <B>_wasctime</B> and <B>asctime</B> behave identically otherwise.</P>

<P class=label><B>Generic-Text Routine Mapping:</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=17%><B>TCHAR.H Routine </B></TD>
<TD class=label width=29%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=26%><B>_MBCS Defined</B></TD>
<TD class=label width=28%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>_tasctime</TD>
<TD width=29%>asctime</TD>
<TD width=26%>asctime</TD>
<TD width=28%>_wasctime</TD>
</TR>
</TABLE><BR>

<P class=label><B>Example</B></P>

<PRE><CODE>/* ASCTIME.C: This program places the system time
 * in the long integer aclock, translates it into the
 * structure newtime and then converts it to string
 * form for output, using the asctime function.
 */

#include &lt;time.h&gt;
#include &lt;stdio.h&gt;

struct tm *newtime;
time_t aclock;

void main( void )
{
   time( &amp;aclock );                 /* Get time in seconds */

   newtime = localtime( &amp;aclock );  /* Convert time to struct */
                                    /* tm form */

   /* Print local time as a string */
   printf( "The current date and time are: %s", asctime( newtime ) );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>The current date and time are: Sun May 01 20:27:01 1994

</CODE></PRE>

<P><A HREF="_crt_time_management.htm">Time Management Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_ctime.2c_._wctime.htm">ctime</A>, <A HREF="_crt__ftime.htm">_ftime</A>, <A HREF="_crt_gmtime.htm">gmtime</A>, <A HREF="_crt_localtime.htm">localtime</A>, <A HREF="_crt_time.htm">time</A>, <B>_</B><A HREF="_crt__tzset.htm">tzset</A></P>
</font>
</BODY>
</HTML>

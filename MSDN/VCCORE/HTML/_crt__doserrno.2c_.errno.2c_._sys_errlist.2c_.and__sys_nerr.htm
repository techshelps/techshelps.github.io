<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_doserrno, errno, _sys_errlist, and _sys_nerr</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__doserrno.2c_.errno.2c_._sys_errlist.2c_.and__sys_nerr"></A><SUP></SUP>_doserrno, errno, _sys_errlist, and _sys_nerr</H1>

<P>These global variables hold error codes used by the <A HREF="_crt_perror.2c_._wperror.htm">perror</A> and <A HREF="_crt_strerror.2c_._strerror.htm">strerror</A> functions for printing error messages. Manifest constants for these variables are declared in STDLIB.H as follows:</P>

<P><B>extern int _doserrno;</B></P>

<P><B>extern int errno;</B></P>

<P><B>extern char *_sys_errlist[ ];</B></P>

<P><B>extern int _sys_nerr;</B></P>

<P><B>errno</B> is set on an error in a system-level call. Because <B>errno</B> holds the value for the last call that set it, this value may be changed by succeeding calls. Always check <B>errno</B> immediately before and after a call that may set it. All <B>errno</B> values, defined as manifest constants in ERRNO.H, are UNIX-compatible. The values valid for 32-bit Windows applications are a subset of these UNIX values. </P>

<P>On an error, <B>errno</B> is not necessarily set to the same value as the error code returned by a system call. For I/O operations only, use <B>_doserrno</B> to access the operating-system error-code equivalents of <B>errno</B> codes. For other operations the value of <B>_doserrno</B> is undefined.</P>

<P>Each <B>errno</B> value is associated with an error message that can be printed using <B>perror</B> or stored in a string using <B>strerror</B>. <B>perror</B> and <B>strerror</B> use the <B>_sys_errlist</B> array and <B>_sys_nerr</B>, the number of elements in <B>_sys_errlist</B>, to process error information.</P>

<P>Library math routines set <B>errno</B> by calling <A HREF="_crt__matherr.htm">_matherr</A>. To handle math errors differently, write your own routine according to the <B>_matherr</B> reference description and name it <B>_matherr</B>.</P>

<P>The following <B>errno</B> values are compatible with 32-bit Windows applications. Only <B>ERANGE</B> and <B>EDOM</B> are specified in the ANSI standard.</P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=22%><B>Constant</B></TD>
<TD class=label width=43%><B>System Error Message</B></TD>
<TD class=label width=35%><B>Value</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>E2BIG</B></TD>
<TD width=43%>Argument list too long</TD>
<TD width=35%>7</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>EACCES</B></TD>
<TD width=43%>Permission denied</TD>
<TD width=35%>13</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>EAGAIN</B></TD>
<TD width=43%>No more processes or not enough memory or maximum nesting level reached</TD>
<TD width=35%>11</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>EBADF</B></TD>
<TD width=43%>Bad file number</TD>
<TD width=35%>9</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>ECHILD</B></TD>
<TD width=43%>No spawned processes</TD>
<TD width=35%>10</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>EDEADLOCK</B></TD>
<TD width=43%>Resource deadlock would occur</TD>
<TD width=35%>36</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>EDOM</B></TD>
<TD width=43%>Math argument</TD>
<TD width=35%>33</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>EEXIST</B></TD>
<TD width=43%>File exists</TD>
<TD width=35%>17</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>EINVAL</B></TD>
<TD width=43%>Invalid argument</TD>
<TD width=35%>22</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>EMFILE</B></TD>
<TD width=43%>Too many open files</TD>
<TD width=35%>24</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>ENOENT</B></TD>
<TD width=43%>No such file or directory</TD>
<TD width=35%>2</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>ENOEXEC</B></TD>
<TD width=43%>Exec format error</TD>
<TD width=35%>8</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>ENOMEM</B></TD>
<TD width=43%>Not enough memory</TD>
<TD width=35%>12</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>ENOSPC</B></TD>
<TD width=43%>No space left on device</TD>
<TD width=35%>28</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>ERANGE</B></TD>
<TD width=43%>Result too large</TD>
<TD width=35%>34</TD>
</TR>

<TR VALIGN="top">
<TD width=22%><B>EXDEV</B></TD>
<TD width=43%>Cross-device link</TD>
<TD width=35%>18</TD>
</TR>
</TABLE><BR>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exceptions: Using MFC Macros and C++ Exceptions</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_exceptions.3a_.using_mfc_macros_and_c.2b2b_.exceptions"></A>Exceptions: Using MFC Macros and C++ Exceptions</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_exception_handling_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.frequently_asked_questions.htm">FAQ</A></P>

<P>This article discusses considerations for writing code that uses both the MFC exception-handling macros and the C++ exception-handling keywords.</P>

<P>This article covers the following topics:

<UL type=disc>
	<LI><A HREF="#_core_mixing_exception_keywords_and_macros">Mixing exception keywords and macros</A><BR><BR></LI>

	<LI><A HREF="#_core_try_blocks_inside_catch_blocks">Try blocks inside catch blocks</A></LI>
</UL>



<H2><A NAME="_core_mixing_exception_keywords_and_macros"></A>Mixing Exception Keywords and Macros</H2>

<P>You can mix MFC exception macros and C++ exception keywords in the same program. But you cannot mix MFC macros with C++ exception keywords in the same block because the macros delete exception objects automatically when they go out of scope, whereas code using the exception-handling keywords does not. For more information, see the article <A HREF="_core_exceptions.3a_.catching_and_deleting_exceptions.htm">Exceptions: Catching and Deleting Exceptions</A>. </P>

<P>The main difference between the macros and the keywords is that the macros “automatically” delete a caught exception when the exception goes out of scope. Code using the keywords does not; exceptions caught in a catch block must be explicitly deleted. Mixing macros and C++ exception keywords can cause memory leaks when an exception object is not deleted, or heap corruption when an exception is deleted twice.</P>

<P>The following code, for example, invalidates the exception pointer:</P>

<PRE><CODE>TRY
{
    TRY
    {
        // Do something to throw an exception.
    }
    CATCH(CException, e)  // The "inner" catch block
    {
        throw;  // Invalid attempt to throw exception
                 // to the outer catch block below.
    }
    END_CATCH
}
CATCH(CException, e)  // The "outer" catch block
{
     // Pointer e is invalid because
     // it was deleted in the inner catch block.
}
END_CATCH
</CODE></PRE>

<P>The problem occurs because <CODE>e</CODE> is deleted when execution passes out of the “inner” <B>CATCH</B> block. Using the <B>THROW_LAST</B> macro instead of the <B>THROW</B> statement will cause the “outer” <B>CATCH</B> block to receive a valid pointer:</P>

<PRE><CODE>TRY
{
    TRY
    {
        // Do something to throw an exception.
    }
    CATCH(CException, e)  // The "inner" catch block
    {
        THROW_LAST(); // Throw exception to the outer catch block below.
    }
    END_CATCH
}
CATCH(CException, e)  // The "outer" catch block
{
     // Pointer e is valid because
     // THROW_LAST() was used.
}
END_CATCH
</CODE></PRE>



<H2><A NAME="_core_try_blocks_inside_catch_blocks"></A>Try Blocks Inside Catch Blocks</H2>

<P>You cannot re-throw the current exception from within a <B>try</B> block that is inside a <B>CATCH</B> block. The following example is invalid:</P>

<PRE><CODE>TRY
{
    // Do something to throw an exception.
}
CATCH(CException, e)
{
    try
    {
        throw;  // Wrong.  Causes e (the exception 
                // being thrown) to be deleted.
    }
    catch(CException exception)
    {
    }
}
END_CATCH
</CODE></PRE>

<P>For related information, see <A HREF="_core_exceptions.3a_.examining_exception_contents.htm">Exceptions: Examining Exception Contents</A>. </P>
</font>
</BODY>
</HTML>

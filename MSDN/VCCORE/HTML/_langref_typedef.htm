<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>typedef</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_langref_typedef"></A><SUP></SUP>typedef</H1>

<P><B>typedef</B> <I>type-declaration synonym</I><B>;</B></P>

<P>The <B>typedef</B> keyword defines a synonym for the specified <I>type-declaration</I>. The identifier in the <I>type-declaration</I> becomes another name for the type, instead of naming an instance of the type. You cannot use the <B>typedef</B> specifier inside a function definition.</P>

<P>A <B>typedef</B> declaration introduces a name that, within its scope, becomes a synonym for the type given by the <I>decl</I>-<I>specifiers</I> portion of the declaration. In contrast to the <B>class</B>, <B>struct</B>, <B>union</B>, and <B>enum</B> declarations, <B>typedef</B> declarations do not introduce new types — they introduce new names for existing types.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>// Example of the typedef keyword
typedef unsigned long ulong;

ulong ul;     // Equivalent to "unsigned long ul;"

typedef struct mystructtag
{
   int   i;
   float f;
   char  c;
} mystruct;

mystruct ms;   // Equivalent to "struct mystructtag ms;"

typedef int (*funcptr)();  // funcptr is synonym for "pointer
                           //    to function returning int"

funcptr table[10];   // Equivalent to "int (*table[10])();"</CODE></PRE>
</font>
</BODY>
</HTML>

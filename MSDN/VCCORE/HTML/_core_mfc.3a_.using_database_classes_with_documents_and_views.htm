<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MFC: Using Database Classes with Documents and Views</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_sample_mfc_ENROLL">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Daoenrol tutorial">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_CFormView">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_mfc.3a_.using_database_classes_with_documents_and_views"></A>MFC: Using Database Classes with Documents and Views</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_databases.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_database_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_databases.3a_.frequently_asked_questions.htm">FAQ</A>&nbsp;&nbsp;&nbsp;|&nbsp; <A HREF="_core_odbc_driver_list.htm">ODBC Driver List</A></P>

<P>You can use the MFC database classes&nbsp;? DAO or ODBC&nbsp;? with or without the document/view architecture. This article emphasizes working with documents and views. It explains:

<UL type=disc>
	<LI><A HREF="#_core_writing_a_form.2d.based_application">How to write a form-based application</A> using a <B>CRecordView</B> or <B>CDaoRecordView</B> object as the main view on your document. <BR><BR></LI>

	<LI><A HREF="#_core_using_recordsets_in_documents_and_views">How to use recordset objects in your documents and views</A>.<BR><BR></LI>

	<LI><A HREF="#_core_other_factors">Other considerations</A>.</LI>
</UL>

<P>For alternatives, see the article <A HREF="_core_mfc.3a_.using_database_classes_without_documents_and_views.htm">MFC: Using Database Classes Without Documents and Views</A>. </P>

<H2><A NAME="_core_writing_a_form.2d.based_application"></A>Writing a Form-Based Application</H2>

<P>Many data-access applications are based on forms. The user interface is a form containing controls in which the user examines, enters, or edits data. To make your application form-based, use class <B>CRecordView</B> or <B>CDaoRecordView</B>. You can specify <B>CRecordView</B> or <B>CDaoRecordView</B> for your view class when you run AppWizard, or you can use ClassWizard later to create a <B>CRecordView</B>-derived or <B>CDaoRecordview</B>-derived class.</P>

<P>In a form-based application, each record view object stores a pointer to a <B>CRecordset</B> or <B>CDaoRecordset</B> object. The framework’s record field exchange (RFX) mechanism exchanges data between the recordset and the data source. The dialog data exchange (DDX) mechanism exchanges data between the field data members of the recordset object and the controls on the form. <B>CRecordView</B> or <B>CDaoRecordView</B> also provides default command handler functions for navigating from record to record on the form. </P>

<P class=label><B>To create a form-based application with AppWizard</B>

<UL type=disc>
	<LI>See the article <A HREF="_core_overview.3a_.creating_a_program_that_supports_a_database.htm">Overview: Creating a Program That Supports a Database</A>. </LI>
</UL>

<P class=label><B>To add a database form to your application with ClassWizard</B>

<UL type=disc>
	<LI>See the article <A HREF="_core_classwizard.3a_.creating_a_database_form.htm">ClassWizard: Creating a Database Form</A>. </LI>
</UL>

<P>For a full discussion of forms, see the article <A HREF="_core_record_views.htm">Record Views</A>. For an example of an application with multiple record views on a database, see the MFC tutorial sample <A HREF="JavaScript:hhobj_2.Click()">ENROLL</A>, Step 4. Step 4 is not covered in the <A HREF="JavaScript:hhobj_3.Click()">Data Access Objects (DAO) Tutorial</A>, but you can examine the code in the sample.</P>

<H2><A NAME="_core_using_recordsets_in_documents_and_views"></A>Using Recordsets in Documents and Views</H2>

<P>Many simple form-based applications don’t need “documents.” If your application is more complex, you’ll probably want to use a document as a proxy for the database, storing a <B>CDatabase</B> or <B>CDaoDatabase</B> object that connects to the data source. Form-based applications usually store a pointer to a recordset object in the view. Other kinds of database applications store recordsets and <B>CDatabase</B> or <B>CDaoDatabase</B> objects in the document. Here are some possibilities for using documents in database applications:

<UL type=disc>
	<LI>If you’re accessing a recordset in a local context, create <B>CRecordset</B> or <B>CDaoRecordset</B> objects locally in member functions of the document or the view, as needed.
<P class=tl>Declare a recordset object as a local variable in a function. Pass <B>NULL</B> to the constructor, which causes the framework to create and open a temporary <B>CDatabase</B> or <B>CDaoDatabase</B> object for you. As an alternative, pass a pointer to a <B>CDatabase</B> or <B>CDaoDatabase</B> object. Use the recordset within the function and let it be destroyed automatically when the function exits.</P>
<P class=tl>When you pass <B>NULL</B> to a recordset constructor, the framework uses information returned by the recordset’s <B>GetDefaultConnect</B> member function to create a <B>CDatabase</B> or <B>CDaoDatabase</B> object and open it. The wizards implement <B>GetDefaultConnect</B> for you.</P></LI>

	<LI>If you’re accessing a recordset during the lifetime of your document, embed one or more <B>CRecordset</B> or <B>CDaoRecordset</B> objects in your document.
<P class=tl>Construct the recordset objects either when you initialize the document or as needed. You might write a function that returns a pointer to the recordset if it already exists, or constructs and opens the recordset if it doesn’t exist yet. Close, delete, and re-create the recordset as needed, or call its <B>Requery</B> member function to refresh the records.</P></LI>

	<LI>If you’re accessing a data source during the lifetime of your document, embed a <B>CDatabase</B> or <B>CDaoDatabase</B> object or store a pointer to a <B>CDatabase</B> or <B>CDaoDatabase</B> object in it.
<P class=tl>The <B>CDatabase</B> or <B>CDaoDatabase</B> object manages a connection to your data source. The object is constructed automatically during document construction, and you call its <B>Open</B> member function when you initialize the document. When you construct recordset objects in document member functions, you pass a pointer to the document’s <B>CDatabase</B> or <B>CDaoDatabase</B> object. This associates each recordset with its data source. The database object is usually destroyed when the document closes. The recordset objects are typically destroyed when they exit the scope of a function.</P></LI>
</UL>

<H2><A NAME="_core_other_factors"></A>Other Factors</H2>

<P>Form-based applications often do not have any use for the framework’s document serialization mechanism, so you might want to remove, disable, or replace the New and Open commands on the File menu. See the article <A HREF="_core_serialization.3a_.serialization_vs.._database_input.2f.output.htm">Serialization: Serialization vs. Database Input/Output</A>. </P>

<P>You might also want to make use of the many user-interface possibilities that the framework can support. For example, you could use multiple <B>CRecordView</B> or <B>CDaoRecordView</B> objects in a splitter window, open multiple recordsets in different multiple document interface (MDI) child windows, and so on.</P>

<P>You might want to implement printing of whatever is in your view — whether it’s a form implemented with <B>CRecordView</B> or <B>CDaoRecordView</B> or something else. As classes derived from <B>CFormView</B>, <B>CRecordView</B> and <B>CDaoRecordView</B> don’t support printing, but you can override the <B>OnPrint</B> member function to allow printing. For more information, see class <A HREF="JavaScript:hhobj_4.Click()">CFormView</A>.</P>

<P>You might not want to use documents and views at all. In that case, see the article <A HREF="_core_mfc.3a_.using_database_classes_without_documents_and_views.htm">MFC: Using Database Classes Without Documents and Views</A>. </P>
</font>
</BODY>
</HTML>

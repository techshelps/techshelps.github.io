<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Callback Fields in a Date and Time Picker Control</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_GetTextExtentPoint32">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_using_callback_fields_in_a_date_time_picker_control"></A>Using Callback Fields in a Date and Time Picker Control</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_using_cdatetimectrl.htm">Overview</A>  |&nbsp; <A HREF="_core_common_control_sample_list.htm">Sample</A></P>

<P>In addition to the standard format characters that define date and time picker fields, you can customize your output by specifying certain parts of a custom format string as callback fields. To declare a callback field, include one or more "X" characters (ASCII Code 88) anywhere in the body of the format string. For example, the following string "'Today is: 'yy'/'MM'/'dd' (Day 'X')'"causes the date and time picker control to display the current value as the year followed by the month, date, and finally the day of the year.</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The number of X's in a callback field does not correspond to the number of characters that will be displayed.</P>

<P>You can distinguish between multiple callback fields in a custom string by repeating the "X" character. Thus, the format string "XXddddMMMdd', 'yyyXXX" contains two unique callback fields, "XX" and "XXX".</P>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Callback fields are treated as valid fields, so your application must be prepared to handle <B>DTN_WMKEYDOWN </B>notification messages.</P>

<P>Implementing callback fields in your date and time picker control consists of three parts:

<UL type=disc>
	<LI>Initializing the custom format string<BR><BR></LI>

	<LI>Handling the <B>DTN_FORMATQUERY</B> notification<BR><BR></LI>

	<LI>Handling the <B>DTN_FORMAT</B> notification</LI>
</UL>

<H3>Initializing the Custom Format String</H3>

<P>Initialize the custom string with a call to <B>CDateTimeCtrl::SetFormat</B>. For more information, see <A HREF="_core_using_custom_format_strings_in_a_date_time_picker_control.htm">Using Custom Format Strings in a Date and Time Picker Control</A>. A common place to set the custom format string is in the <B>OnInitDialog</B> function of your containing dialog class or <B>OnInitalUpdate</B> function of your containing view class.</P>

<H3>Handling the DTN_FORMATQUERY Notification</H3>

<P>When the control parses the format string and encounters a callback field, the application sends <B>DTN_FORMAT</B> and <B>DTN_FORMATQUERY</B> notification messages. The callback field string is included with the notifications so you can determine which callback field is being queried.</P>

<P>The <B>DTN_FORMATQUERY</B> notification is sent to retrieve the maximum allowable size in pixels of the string that will be displayed in the current callback field.</P>

<P>To properly calculate this value, you must calculate the height and width of the string, to be substituted for the field, using the control's display font. The actual calculation of the string is easily achieved with a call to the <A HREF="JavaScript:hhobj_2.Click()">::GetTextExtentPoint32</A> Win32 function. Once the size is determined, pass the value back to the application and exit the handler function.</P>

<P>The following example is one method of supplying the size of the callback string:</P>

<PRE><CODE>NMDATETIMEFORMATQUERY* pDTFormatQuery= (NMDATETIMEFORMATQUERY *)pNMHDR;
CDC* pDC;
CFont* pFont;
CFont* pOrigFont;

//  Prepare the device context for the GetTextExtentPoint32 call.
pDC= GetDC();

pFont= GetFont();
if(!pFont)
     pFont-&gt;CreateStockObject(DEFAULT_GUI_FONT);


pOrigFont = pDC-&gt;SelectObject(pFont);

// Check to see if this is the callback segment desired. If so,
// use the longest text segment to determine the maximum 
// width of the callback field, and then place the information into 
// the NMDATETIMEFORMATQUERY structure.
if(!lstrcmp("X",pDTFormatQuery-&gt;pszFormat))
     ::GetTextExtentPoint32 (pDC-&gt;m_hDC, "366",
          3, &amp;pDTFormatQuery-&gt;szMax);

// Reset the font in the device context then release the context.
pDC-&gt;SelectObject(pOrigFont);
ReleaseDC(pDC);

*pResult = 0;
</CODE></PRE>

<P>Once the size of the current callback field has been calculated, you must supply a value for the field. This is done in the handler for the <B>DTN_FORMAT </B>notification.</P>

<H3>Handling the DTN_FORMAT Notification</H3>

<P>The <B>DTN_FORMAT</B> notification is used by the application to request the character string that will be substituted. The following example demonstrates one possible method:</P>

<PRE><CODE>NMDATETIMEFORMAT* pDTFormat= (NMDATETIMEFORMAT *)pNMHDR;

COleDateTime oCurTime;
m_dtPicker.GetTime(oCurTime);

wsprintf(pDTFormat-&gt;pszDisplay,
    "%d",oCurTime.GetDayOfYear());

*pResult = 0;
</CODE></PRE>

<P class=indent><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;The pointer to the <B>NMDATETIMEFORMAT </B>structure is found by casting the first parameter of the notification handler to the proper type.</P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_core_control_topics.htm#_core_windows_common_controls_and_mfc_classes">Windows Common Controls and MFC Classes</A></P>
</font>
</BODY>
</HTML>

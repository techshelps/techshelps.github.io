<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_spawnvp, _wspawnvp</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__spawnvp.2c_._wspawnvp"></A><SUP></SUP>_spawnvp, _wspawnvp</H1>

<P>Create and execute a new process.</P>

<P><B>int</B> <B>_spawnvp(</B> <B>int</B> <I>mode</I><B>,</B> <B>const</B> <B>char</B> <B>*</B><I>cmdname</I><B>,</B> <B>const</B> <B>char</B> <B>*const</B> <B>*</B><I>argv</I> <B>);</B></P>

<P><B>int</B> <B>_wspawnvp(</B> <B>int</B> <I>mode</I><B>,</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>cmdname</I><B>,</B> <B>const</B> <B>wchar_t</B> <B>*const</B> <B>*</B><I>argv</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=19%><B>Routine</B></TD>
<TD class=label width=26%><B>Required Header</B></TD>
<TD class=label width=55%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>_spawnvp</B></TD>
<TD width=26%>&lt;stdio.h&gt; or &lt;process.h&gt;</TD>
<TD width=55%>Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>_wspawnvp</B></TD>
<TD width=26%>&lt;stdio.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=55%>Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>The return value from a synchronous <B>_spawnvp</B> or <B>_wspawnvp</B> (<B>_P_WAIT</B> specified for <I>mode</I>) is the exit status of the new process. The return value from an asynchronous <B>_spawnvp</B> or <B>_wspawnvp</B> (<B>_P_NOWAIT</B> or <B>_P_NOWAITO</B> specified for <I>mode</I>) is the process handle. The exit status is 0 if the process terminated normally. You can set the exit status to a nonzero value if the spawned process specifically calls the <B>exit</B> routine with a nonzero argument. If the new process did not explicitly set a positive exit status, a positive exit status indicates an abnormal exit with an abort or an interrupt. A return value of –1 indicates an error (the new process is not started). In this case, <B>errno</B> is set to one of the following values:</P>

<P class=dt><B>E2BIG</B></P>

<P class=indent>Argument list exceeds 1024 bytes</P>

<P class=dt><B>EINVAL</B></P>

<P class=indent><I>mode</I> argument is invalid</P>

<P class=dt><B>ENOENT</B></P>

<P class=indent>File or path is not found</P>

<P class=dt><B>ENOEXEC</B></P>

<P class=indent>Specified file is not executable or has invalid executable-file format</P>

<P class=dt><B>ENOMEM</B></P>

<P class=indent>Not enough memory is available to execute new process</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>mode</I></P>

<P class=indent>Execution mode for calling process</P>

<P class=dt><I>cmdname</I></P>

<P class=indent>Path of file to be executed</P>

<P class=dt><I>argv</I></P>

<P class=indent>Array of pointers to arguments</P>

<P class=label><B>Remarks</B></P>

<P>Each of these functions creates and executes a new process, passing an array of pointers to command-line arguments and using the the <B>PATH</B> environment variable to find the file to execute.</P>

<P><A HREF="_crt_process_and_environment_control.htm">Process and Environment Control Routines</A>  |&nbsp; <A HREF="_crt__spawn.2c_._wspawn_functions.htm">_spawn Functions Overview</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_abort.htm">abort</A>, <A HREF="_crt_atexit.htm">atexit</A>, <A HREF="_crt__exec.2c_._wexec_functions.htm">_exec Functions</A>, <A HREF="_crt_exit.2c_._exit.htm">exit</A>, <A HREF="_crt__flushall.htm">_flushall</A>, <A HREF="_crt__getmbcp.htm">_getmbcp</A>, <A HREF="_crt__onexit.htm">_onexit</A>, <A HREF="_crt__setmbcp.htm">_setmbcp</A>, <A HREF="_crt_system.2c_._wsystem.htm">system</A></P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* SPAWN.C: This program accepts a number in the range
 * 1-8 from the command line. Based on the number it receives,
 * it executes one of the eight different procedures that
 * spawn the process named child. For some of these procedures,
 * the CHILD.EXE file must be in the same directory; for
 * others, it only has to be in the same path.
 */

#include &lt;stdio.h&gt;
#include &lt;process.h&gt;

char *my_env[] =
{
   "THIS=environment will be",
   "PASSED=to child.exe by the",
   "_SPAWNLE=and",
   "_SPAWNLPE=and",
   "_SPAWNVE=and",
   "_SPAWNVPE=functions",
   NULL
};

void main( int argc, char *argv[] )
{
   char *args[4];

   /* Set up parameters to be sent: */
   args[0] = "child";
   args[1] = "spawn??";
   args[2] = "two";
   args[3] = NULL;

   if (argc &lt;= 2)
   {
      printf( "SYNTAX: SPAWN &lt;1-8&gt; &lt;childprogram&gt;\n" );
      exit( 1 );
   }

   switch (argv[1][0])   /* Based on first letter of argument */
   {
   case '1':
      _spawnl( _P_WAIT, argv[2], argv[2], "_spawnl", "two", NULL );
      break;
   case '2':
      _spawnle( _P_WAIT, argv[2], argv[2], "_spawnle", "two", 
               NULL, my_env );
      break;
   case '3':
      _spawnlp( _P_WAIT, argv[2], argv[2], "_spawnlp", "two", NULL );
      break;
   case '4':
      _spawnlpe( _P_WAIT, argv[2], argv[2], "_spawnlpe", "two", 
                NULL, my_env );
      break;
   case '5':
      _spawnv( _P_OVERLAY, argv[2], args );
      break;
   case '6':
      _spawnve( _P_OVERLAY, argv[2], args, my_env );
      break;
   case '7':
      _spawnvp( _P_OVERLAY, argv[2], args );
      break;
   case '8':
      _spawnvpe( _P_OVERLAY, argv[2], args, my_env );
      break;
   default:
      printf( "SYNTAX: SPAWN &lt;1-8&gt; &lt;childprogram&gt;\n" );
      exit( 1 );
   }
   printf( "from SPAWN!\n" );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>SYNTAX: SPAWN &lt;1-8&gt; &lt;childprogram&gt;
 
</CODE></PRE>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Strings: Basic CString Operations</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_CString">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MFC_CString">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_strings.3a_.basic_cstring_operations"></A>Strings: Basic CString Operations</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_strings.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_string_handling_tasks.htm">How Do I</A></P>

<P>This article explains basic <A HREF="JavaScript:hhobj_2.Click()">CString</A> operations, including:

<UL type=disc>
	<LI><A HREF="#_core_creating_cstring_objects_from_standard_c_literal_strings">Creating CString objects from standard C literal strings</A><BR><BR></LI>

	<LI><A HREF="#_core_accessing_individual_characters_in_a_cstring">Accessing individual characters in a CString</A><BR><BR></LI>

	<LI><A HREF="#_core_concatenating_two_cstring_objects">Concatenating two CString objects</A><BR><BR></LI>

	<LI><A HREF="#_core_comparing_cstring_objects">Comparing CString objects</A></LI>
</UL>

<P>The <B>CString</B> class provides member functions and overloaded operators that duplicate and, in some cases, surpass the string services of the C run-time libraries (for example, <B>strcat</B>). </P>



<H2><A NAME="_core_creating_cstring_objects_from_standard_c_literal_strings"></A>Creating CString Objects from Standard C Literal Strings</H2>

<P>You can assign C-style literal strings to a <B>CString</B> just as you can assign one <B>CString</B> object to another:

<UL type=disc>
	<LI>Assign the value of a C literal string to a <B>CString</B> object:
<PRE><CODE>CString myString = "This is a test";
</CODE></PRE>
</LI>

	<LI>Assign the value of one <B>CString</B> to another <B>CString</B> object:
<PRE><CODE>CString oldString = "This is a test";
CString newString = oldString;
</CODE></PRE>

<P class=tl>The contents of a <B>CString</B> object are copied when one <B>CString</B> object is assigned to another. Thus, the two strings do not share a reference to the actual characters that make up the string. For more information on using <B>CString</B> objects as values, see the article <A HREF="_core_strings.3a_.cstring_semantics.htm">Strings: CString Semantics</A>. </P></LI>
</UL>

<P class=indent><B><B>Tip</B></B>&nbsp;&nbsp;&nbsp;To write your application so that it can be compiled for Unicode or for ANSI, code literal strings using the <B>_T</B> macro. For more information, see the article <A HREF="_core_strings.3a_.unicode_and_multibyte_character_set_.28.mbcs.29_.support.htm">Strings: Unicode and Multibyte Character Set (MBCS) Support</A>. </P>



<H2><A NAME="_core_accessing_individual_characters_in_a_cstring"></A>Accessing Individual Characters in a CString</H2>

<P>You can access individual characters within a <B>CString</B> object with the <B>GetAt</B> and <B>SetAt</B> member functions. You can also use the array element, or subscript, operator ( <B>[</B> <B>]</B> ) instead of <B>GetAt</B> to get individual characters (this is similar to accessing array elements by index, as in standard C-style strings). Index values for <B>CString</B> characters are zero-based.</P>



<H2><A NAME="_core_concatenating_two_cstring_objects"></A>Concatenating Two CString Objects</H2>

<P>To concatenate two <B>CString</B> objects, use the concatenation operators (<B>+</B> or <B>+=</B>) as follows:</P>

<PRE><CODE>CString s1 = "This ";        //Cascading concatenation
s1 += "is a ";
CString s2 = "test";
CString message = s1 + "big " + s2;  
//Message contains "This is a big test".
</CODE></PRE>

<P>At least one of the arguments to the concatenation operators (<B>+</B> or <B>+=</B>) must be a <B>CString</B> object, but you can use a constant character string (such as <CODE>"big"</CODE>) or a <B>char</B> (such as ‘x’) for the other argument.</P>



<H2><A NAME="_core_comparing_cstring_objects"></A>Comparing CString Objects</H2>

<P>The <B>Compare</B> member function and the <B>==</B> operator for <B>CString</B> are equivalent. <B>Compare</B>, <B>operator==</B>, and <B>CompareNoCase</B> are MBCS- and Unicode-aware; <B>CompareNoCase</B> is also case insensitive. The <B>Collate</B> member function of <B>CString</B> is locale sensitive and is often slower than <B>Compare</B>. <B>Collate</B> should be used only where it is necessary to abide by the sorting rules as specified by the current locale.</P>

<P>The following table shows the available <A HREF="JavaScript:hhobj_3.Click()">CString</A> comparison functions and their equivalent Unicode/MBCS-portable functions in the C run-time library:</P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=31%><B>CString function</B></TD>
<TD class=label width=34%><B>MBCS function</B></TD>
<TD class=label width=35%><B>Unicode function</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>Compare</B></TD>
<TD width=34%><B>_mbscmp</B></TD>
<TD width=35%><B>wcscmp</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>CompareNoCase</B></TD>
<TD width=34%><B>_mbsicmp</B></TD>
<TD width=35%><B>_wcsicmp</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><B>Collate</B></TD>
<TD width=34%><B>_mbscoll</B></TD>
<TD width=35%><B>wcscoll</B></TD>
</TR>
</TABLE><BR>

<P>The <B>CString</B> class overrides the relational operators (<B>&lt;</B>, <B>&lt;=</B>, <B>&gt;=</B>, <B>&gt;</B>, <B>==</B>, and <B>!=</B>).You can compare two <B>CStrings</B> using these operators, as shown here:</P>

<PRE><CODE>CString s1( "Tom" );
CString s2( "Jerry" );
if( s1 &lt; s2 )
    ...
</CODE></PRE>
</font>
</BODY>
</HTML>

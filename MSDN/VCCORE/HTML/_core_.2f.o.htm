<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>/O options (Optimize Code)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_compiling_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_.2f.o"></A><SUP></SUP>/O options (Optimize Code)</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_overviews.3a_.compiling_and_linking.htm">Overview</A>  |&nbsp; <A HREF="_core_set_compiler_options.htm">How Do I</A>  |&nbsp; <A HREF="_core_compiler_reference.htm">Compiler Options</A></P>

<P class=indent><B><B>Feature Only in Professional and Enterprise Editions</B></B>&nbsp;&nbsp;&nbsp;Code optimization is supported only in Visual C++ Professional and Enterprise Editions. For more information, see <A HREF="JavaScript:hhobj_2.Click()">Visual C++ Editions</A>.</P>

<P>The Optimizations (/O) options determine how the compiler fine-tunes the performance of your program. Four of the five optimization categories (Default, Disable (Debug), Maximize Speed, and Minimize Size) in the Optimizations drop-down list box require no further optimization on your part. If you select the fifth optimization category, Customize, you can set specific optimizations using the selections in the Optimizations list box.</P>

<P>Use <A HREF="_core_.2f.od.htm">/Od</A> to disable optimization, speed compilation, and simplify debugging. Use <A HREF="_core_.2f.og.htm">/Og</A> to enable fundamental global optimizations.</P>

<P>The following table summarizes the optimizations. Click a command name for more detail. </P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=19%><B>Command Line</B></TD>
<TD class=label width=29%><B>Project Settings</B></TD>
<TD class=label width=52%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=19%><A HREF="_core_.2f.o1.2c_2f.o2.htm">/O1</A></TD>
<TD width=29%>Minimize Size</TD>
<TD width=52%>Creates the smallest code in the majority of cases. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><A HREF="_core_.2f.o1.2c_2f.o2.htm">/O2</A></TD>
<TD width=29%>Maximize Speed</TD>
<TD width=52%>Creates the fastest code in the majority of cases. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><A HREF="_core_.2f.oa.2c_2f.ow.htm">/Oa</A></TD>
<TD width=29%>Assume No Aliasing</TD>
<TD width=52%>Tells the compiler that your program does not use aliasing. An alias is a name that refers to a memory location that is already referred to by a different name. Using this option allows the compiler to apply optimizations it couldn’t otherwise use, such as storing variables in registers and performing loop optimizations. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><A HREF="_core_.2f.oa.2c_2f.ow.htm">/Ow</A></TD>
<TD width=29%>Assume Aliasing Across Function Calls</TD>
<TD width=52%>Tells the compiler that no aliasing occurs within function bodies but might occur across function calls. After each function call, pointer variables must be reloaded from memory. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><A HREF="_core_.2f.ob.htm">/Ob</A></TD>
<TD width=29%>Inline Function Expansion</TD>
<TD width=52%>Controls which functions become expanded. Expanding a function inline makes the program faster because it does not incur the overhead of calling the function.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><A HREF="_core_.2f.og.htm">/Og</A></TD>
<TD width=29%>Global Optimizations</TD>
<TD width=52%>Provides local and global optimizations, automatic-register allocation, and loop optimization. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><A HREF="_core_.2f.od.htm">/Od</A></TD>
<TD width=29%>Disable (Debug)</TD>
<TD width=52%>Turns off all optimizations in the program and speeds compilation. This option simplifies debugging because it suppresses code movement. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><A HREF="_core_.2f.oi.htm">/Oi</A></TD>
<TD width=29%>Generate Intrinsic Functions</TD>
<TD width=52%>Replaces some function calls with intrinsic or otherwise special forms of the function that help your application run faster. Programs that use intrinsic functions are faster because they do not have the overhead of function calls, but may be larger because of the additional code created. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><A HREF="_core_.2f.op.htm">/Op</A></TD>
<TD width=29%>Improve Float Consistency</TD>
<TD width=52%>Improves the consistency of floating-point tests for equality and inequality by disabling optimizations that could change the precision of floating-point calculations. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><A HREF="_core_.2f.os.htm">/Os</A></TD>
<TD width=29%>Favor Small Code</TD>
<TD width=52%>Minimizes the size of .EXE files or DLLs by instructing the compiler to favor size over speed. The compiler can reduce many C and C++ constructs to functionally similar sequences of machine code. Occasionally these differences offer trade-offs of size versus speed. If you do not select this option, code may be larger and may be faster. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><A HREF="_core_.2f.ot.htm">/Ot</A></TD>
<TD width=29%>Favor Fast Code; Default</TD>
<TD width=52%>Maximizes the speed of .EXE files and DLLs by instructing the compiler to favor speed over size. The compiler can reduce many C and C++ constructs to functionally similar sequences of machine code. Occasionally these differences offer trade-offs of size versus speed. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><A HREF="_core_.2f.ox.htm">/Ox</A></TD>
<TD width=29%>Full Optimization</TD>
<TD width=52%>Combines optimizing options to produce the fastest possible program. </TD>
</TR>

<TR VALIGN="top">
<TD width=19%><A HREF="_core_.2f.oy.htm">/Oy</A></TD>
<TD width=29%>Frame-Pointer Omission</TD>
<TD width=52%>Suppresses creation of frame pointers on the call stack. This option speeds function calls, because no frame pointers need to be set up and removed. It also frees one more register, <B>x86 Specific —&gt;</B>EBP on the Intel 386 (or later), <B>END x86 Specific </B>for storing frequently used variables and subexpressions. </TD>
</TR>
</TABLE><BR>

<P>To find this option in the development environment, click <B>Settings</B> on the <B>Project</B> menu. Then click the <B>C/C++</B> tab, and click <B>Optimizations </B>in the <B>Category </B>box. </P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>/Oy   (Frame-Pointer Omission)</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_compiling_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_.2f.oy"></A>/Oy&nbsp;&nbsp;&nbsp;(Frame-Pointer Omission)</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_overviews.3a_.compiling_and_linking.htm">Overview</A>  |&nbsp; <A HREF="_core_set_compiler_options.htm">How Do I</A>  |&nbsp; <A HREF="_core_compiler_reference.htm">Compiler Options</A></P>

<P class=indent><B><B>Feature Only in Professional and Enterprise Editions</B></B>&nbsp;&nbsp;&nbsp;Code optimization is supported only in Visual C++ Professional and Enterprise Editions. For more information, see <A HREF="JavaScript:hhobj_2.Click()">Visual C++ Editions</A>.</P>

<P>The /Oy option suppresses creation of frame pointers on the call stack. This option speeds function calls, since no frame pointers need to be set up and removed. It also frees one more register, <B>x86 Specific —&gt;</B>EBP on the Intel 386 or later, <B>END x86 Specific</B> for storing frequently used variables and subexpressions. </P>

<P>To find this option in the development environment, click <B>Settings</B> on the <B>Project</B> menu. Then click the <B>C/C++</B> tab, and click <B>Optimizations </B>in the <B>Category </B>box. Under <B>Optimizations</B>, click <B>Customize</B>. </P>

<P><B>x86 Specific —&gt;</B> If your code requires EBP-based addressing, you can specify the /Oy– option after the /Ox option or use <A HREF="_predir_optimize.htm">#pragma optimize</A> with the "<B>y</B>" and <B>off</B> arguments to gain maximum optimization with EBP-based addressing. The compiler detects most situations where EBP-based addressing is required (for instance, with the _alloca and setjmp functions and with structured exception handling). <B>END x86 Specific</B></P>

<P>The <A HREF="_core_.2f.ox.htm">/Ox</A> (Full Optimization) and <A HREF="_core_.2f.o1.2c_2f.o2.htm">/O1 and /O2</A> (Fast Code) options imply /Oy. Specifying /Oy– in the Common|Project|Source File Options text box (or on the command line) after the /Ox, /O1, or /O2 option disables /Oy, whether it is explicit or implied.</P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Upgrade to an Active Document Server</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_porting_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="Scribble OLE Server">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_upgrade_to_an_active_document_server"></A>Upgrade to an Active Document Server</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_overviews.3a_.porting_and_upgrading.htm">Overview</A>  |&nbsp; <A HREF="_core_how_do_i.3a_.porting_and_upgrading.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions.3a_.porting_and_upgrading.htm">FAQ</A>  |&nbsp; <A HREF="_core_details.3a_.porting_and_upgrading.htm">Details</A></P>

<P>If your application was created with a version of Visual C++ prior to version 4.2 and is already an in-place server, you can add Active document support by following the procedure below. If your application is not already an in-place server, you must first add this support as described in the tutorial, <A HREF="JavaScript:hhobj_2.Click()">Creating an OLE Server</A>, and then follow the steps described. </P>

<P class=label><B>To add Active document support to an existing server</B>

<OL>
	<LI>In your project’s stdafx.h, add the following line of code to include document object support:
<PRE><CODE>#include &lt;afxdocob.h&gt;</CODE></PRE>
</LI>

	<LI>In your <B>CWinApp</B>-derived class, change the parameter to <B>UpdateRegistry</B> from <CODE>OAT_INPLACE_SERVER</CODE> to <CODE>OAT</CODE>_<CODE>DOC_OBJECT</CODE>_<CODE>SERVER</CODE>:
<PRE><CODE>m_server.UpdateRegistry(OAT_DOC_OBJECT_SERVER);</CODE></PRE>
</LI>

	<LI>In your in-place frame class, change its derived class from <CODE>COleIPFrameWnd</CODE> to <CODE>COleDocIPFrameWnd</CODE>. You will need to make changes in both the .H file and in the .CPP file.
<UL type=disc>
	<LI>In the header file, derive your in-place frame class from <B>COleDocIPFrameWnd</B>: 
<PRE><CODE>class CInPlaceFrame : public COleDocIPFrameWnd</CODE></PRE>
</LI>

	<LI>In the .CPP file, search for <CODE>COleIPFrameWnd</CODE> and replace each occurrence with <CODE>COleDocIPFrameWnd</CODE>. </LI>
</UL>
</LI>

	<LI>In your item class, change its derived class to <CODE>CDocObjectServerItem</CODE>:
<PRE><CODE>class CMyItem : public CDocObjectServerItem</CODE></PRE>

<P class=tl>In the .CPP file, search for <CODE>COleServerItem</CODE> and replace each occurrence with <CODE>CDocObjectServerItem</CODE>.</P></LI>

	<LI>In your document class header file, insert the following line to add a parse map to route OLE menu commands such as Print between the container and your server. (Add the line in the message map function section, after the line <CODE>DECLARE_MESSAGE_MAP</CODE>.)
<PRE><CODE>DECLARE_OLECMD_MAP()</CODE></PRE>

<P class=tl>In the document class .CPP file, use the <CODE>BEGIN_OLECMD_MAP</CODE> macro, add macro entries for each of your message-handler functions, and add the <CODE>END_OLECMD_MAP</CODE> macro. An AppWizard-generated application contains the following map:</P>
<PRE><CODE>BEGIN_OLECMD_MAP(CMyDoc, COleServerDoc)
ON_OLECMD_PAGESETUP()
ON_OLECMD_PRINT()
END_OLECMD_MAP()</CODE></PRE>

<P class=tl>This OLE command map routes the Print and Page Setup commands to their handler functions using standard IDs <CODE>ID_FILE_PRINT</CODE> and <CODE>ID_FILE_PAGE_SETUP</CODE>. You must have command maps for these functions in your code, for example:</P>
<PRE><CODE>ON_COMMAND (ID_FILE_PRINT, OnFilePrint)</CODE></PRE>
</LI>

	<LI>In your document class header file, add a function declaration in the public section of your document class:
<PRE><CODE>CDocObjectServer* GetDocObjectServer(LPOLEDOCUMENTSITE pSite);</CODE></PRE>

<P class=tl>In your document class header file, implement the function as follows:</P>
<PRE><CODE>CDocObjectServer* CMyDoc::GetDocObjectServer(LPOLEDOCUMENTSITE pSite)
{
return new CDocObjectServer(this, pSite);
}</CODE></PRE>
</LI>
</OL>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls: Using Data Binding in an ActiveX Control</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addui_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="circle sample start">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_COleControl.3a3a.BoundPropertyRequestEdit">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_mfc_COleControl.3a3a.BoundPropertyChanged">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_activex_controls.3a_.using_data_binding_in_an_activex_control"></A>ActiveX Controls: Using Data Binding in an ActiveX Control</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_activex_controls.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_activex_control_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions_about_activex_controls.htm">FAQ</A>  |&nbsp; <A HREF="JavaScript:hhobj_2.Click()">Tutorial</A>  |&nbsp; <A HREF="_core_activex_control_sample_list.htm">Sample</A></P>

<P>One of the more powerful uses of ActiveX controls is data binding, which allows a property of the control to bind with a specific field in a database. When this control property is modified by the control user, the control notifies the database that the value has changed and requests that the record field be updated. The database then notifies the control of the success or failure of the request. </P>

<P>This article covers the control side of your task. Implementing the data binding interactions with the database is the responsibility of the control container. How you manage the database interactions in your container is beyond the scope of this documentation. How you prepare the control for data binding is explained in the rest of this article.</P>

<P>This article covers the following topics:

<UL type=disc>
	<LI><A HREF="#_core_how_data_binding_works">How data binding works</A><BR><BR></LI>

	<LI><A HREF="#_core_defining_a_bindable_property">Defining a bindable property</A></LI>
</UL>



<H2><A NAME="_core_how_data_binding_works"></A>How Data Binding Works</H2>

<P>Data binding allows a database entry, such as a record field, to be linked to a property of an ActiveX control. This control is typically used in a form view and provides a visual interface to the current record state. The figure below shows a conceptual representation of this linkage. In this example, the ActiveX control is an edit box which has bound its Text property to the Name field of a record. When modifications are made to the control’s Text property, these changes are communicated to the database.</P>

<P class=label><B>Conceptual Diagram of a Data Bound Control</B></P>

<P><IMG SRC="d12bind.gif" ALT="" BORDER=0></P>

<P>When an ActiveX control property is bound, the developer must make sure that the control is able to send notifications to the database when the property changes. The notification is sent to an interface provided by the control container, which processes it and returns the database’s response to the control.</P>

<P>The <B>COleControl</B> class provides two member functions that make data binding an easy process to implement. The first function, <A HREF="JavaScript:hhobj_3.Click()">BoundPropertyRequestEdit</A> is used to request permission to change the property value. <A HREF="JavaScript:hhobj_4.Click()">BoundPropertyChanged</A>, the second function, is called after the property value has been successfully changed.</P>



<H2><A NAME="_core_defining_a_bindable_property"></A>Defining a Bindable Property</H2>

<P>If the control was created using ControlWizard, data binding is automatically enabled. Once you have successfully compiled your ActiveX control, you can use ClassWizard to incorporate data binding. ClassWizard allows you to choose which properties to make bindable and provides several binding options.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=32%><B>Binding option</B></TD>
<TD class=label width=68%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>Sends OnRequestEdit</B></TD>
<TD width=68%>The property requests permission from the database before modifying the value.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>Visible to the End User</B></TD>
<TD width=68%>The container displays the property in a property binding dialog.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%><B>Default Bindable Property</B></TD>
<TD width=68%>Makes the bindable property the control container’s default choice.</TD>
</TR>
</TABLE><BR>

<P>The following procedure demonstrates adding a text property to an existing control that subclasses an edit box. This property can then be bound to a record field. The figure below shows the Data Binding dialog box.</P>

<P class=label><B>The Data Binding Dialog Box</B></P>

<P><IMG SRC="d12bdlg.gif" ALT="" BORDER=0></P>

<P class=label><B>To add a bound property using ClassWizard</B>

<OL>
	<LI>With your control project open, click <B>ClassWizard</B> on the <B>View</B> menu.<BR><BR></LI>

	<LI>Click the <B>Automation</B> tab.<BR><BR></LI>

	<LI>In the <B>Class Name</B> box, select the name of your control class.<BR><BR></LI>

	<LI>Click <B>Add Property</B>.<BR><BR></LI>

	<LI>In the <B>External name</B> box, type the external name of the property. For this example, use <CODE>RecordName</CODE>.<BR><BR></LI>

	<LI>In the <B>Implementation </B>box, click <B>Get/Set Methods</B>.
<P class=atl><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Data binding is not supported for properties implemented as member variables.</p></LI>

	<LI>In the <B>Type</B> box, select the property’s type. For this example, select <B>BSTR</B>.
<P class=atl><B><B>Note</B></B>&nbsp;&nbsp;&nbsp;Do this step after setting the <B>Implementation</B> option. If you try to do it before, the <B>BSTR</B> type is not available in the <B>Type</B> box.</p></LI>

	<LI>Type unique names for your Get and Set Functions or accept the default names.<BR><BR></LI>

	<LI>Click <B>OK </B>to confirm your choices and close the <B>Add Property</B> dialog box.<BR><BR></LI>

	<LI>Click <B>Data Binding</B>.<BR><BR></LI>

	<LI>Select the <B>Bindable Property</B> check box.<BR><BR></LI>

	<LI>Set any other data binding options you desire.<BR><BR></LI>

	<LI>Click <B>OK </B>to confirm your choices and close the <B>Data Binding</B> dialog box.<BR><BR></LI>

	<LI>Click <B>OK </B>to confirm your choices and close <B>ClassWizard</B>.</LI>
</OL>

<P>After completing this process you will have a property called <CODE>RecordName</CODE> that can be bound to a string-valued field in a database.</P>

<H3><A NAME="_core_code_changes_related_to_data_bound_property"></A>Code Changes Related to Data Bound Property</H3>

<P>Implementing a bound property requires code changes in some of the control project files.</P>

<P>The following code is added to the control declaration file (.H) between the dispatch map comments:</P>

<PRE><CODE>   afx_msg BSTR GetRecordName( );
   afx_msg void SetRecordName( LPCTSTR lpszNewValue );
</CODE></PRE>

<P>In addition, changes will be made to the control implementation file. The following sample shows what would be added if you followed the example in the procedure:</P>

<PRE><CODE>BSTR CSampleCtrl::GetRecordName()
{
   CString strResult;
   // TODO: Add your property handler here

   return strResult.AllocSysString();
}

void CSampleCtrl::SetRecordName(LPCTSTR lpszNewValue)
{
   // TODO: Add your property handler here

   SetModifiedFlag( );
}
</CODE></PRE>

<P>To fully implement the control data binding you have to modify the <CODE>GetRecordName</CODE> and <CODE>SetRecordName</CODE> functions. For example, in the <CODE>SetRecordName</CODE> function, you would make a call to <B>BoundPropertyRequestEdit</B> to obtain permission to change the value of the bound property. If it was successful, you would save the new value and handle any other actions needed before notifying the container that the property has changed. This notification would be done by calling <B>BoundPropertyChanged</B>. The following code sample demonstrates this:</P>

<PRE><CODE>void CSampleCtrl::SetRecordName( LPCTSTR lpszNewValue )
{
 if( !BoundPropertyRequestEdit( dispidRecordName) )
    SetNotPermitted( );
//TODO: Actually set property value.
 BoundPropertyChanged( dispidRecordName);
 SetModifiedFlag( );

}
</CODE></PRE>
</font>
</BODY>
</HTML>

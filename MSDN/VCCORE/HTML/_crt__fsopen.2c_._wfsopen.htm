<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_fsopen, _wfsopen</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__fsopen.2c_._wfsopen"></A><SUP></SUP>_fsopen, _wfsopen</H1>

<P>Open a stream with file sharing.</P>

<P><B>FILE</B> <B>*_fsopen(</B> <B>const</B> <B>char</B> <B>*</B><I>filename</I><B>, const</B> <B>char</B> <B>*</B><I>mode</I><B>, int</B> <I>shflag</I> <B>);</B></P>

<P><B>FILE</B> <B>*_wfsopen(</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>filename</I><B>, const</B> <B>wchar_t</B> <B>*</B><I>mode</I><B>, int</B> <I>shflag</I> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Function</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=27%><B>Optional Headers</B></TD>
<TD class=label width=30%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_fsopen</B></TD>
<TD width=27%>&lt;stdio.h&gt;</TD>
<TD width=27%>&lt;share.h&gt;<SUP>1</SUP></TD>
<TD width=30%>Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_wfsopen</B></TD>
<TD width=27%>&lt;stdio.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=27%>&lt;share.h&gt;<SUP>1</SUP></TD>
<TD width=30%>Win NT</TD>
</TR>
</TABLE><BR>

<P class=mini><SUP>1</SUP>  For manifest constant for <I>shflag</I> parameter.</P>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>Each of these functions returns a pointer to the stream. A <B>NULL</B> pointer value indicates an error.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>filename</I></P>

<P class=indent>Name of file to open</P>

<P class=dt><I>mode</I></P>

<P class=indent>Type of access permitted</P>

<P class=dt><I>shflag</I></P>

<P class=indent>Type of sharing allowed</P>

<P class=label><B>Remarks</B></P>

<P>The <B>_fsopen</B> function opens the file specified by <I>filename</I> as a stream and prepares the file for subsequent shared reading or writing, as defined by the mode and <I>shflag</I> arguments. <B>_wfsopen</B> is a wide-character version of <B>_fsopen</B>; the <I>filename</I> and <I>mode</I> arguments to <B>_wfsopen</B> are wide-character strings. <B>_wfsopen</B> and <B>_fsopen</B> behave identically otherwise.</P>

<P class=label><B>Generic-Text Routine Mappings</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=14%><B>TCHAR.H Routine </B></TD>
<TD class=label width=30%><B>_UNICODE &amp; _MBCS Not Defined</B></TD>
<TD class=label width=24%><B>_MBCS Defined</B></TD>
<TD class=label width=32%><B>_UNICODE Defined</B></TD>
</TR>

<TR VALIGN="top">
<TD width=14%>_tfsopen</TD>
<TD width=30%>_fsopen</TD>
<TD width=24%>_fsopen</TD>
<TD width=32%>_wfsopen</TD>
</TR>
</TABLE><BR>

<P>The character string <I>mode</I> specifies the type of access requested for the file, as follows:</P>

<P class=dt><B>"r"</B></P>

<P class=indent>Opens for reading. If the file does not exist or cannot be found, the <B>_fsopen</B> call fails.</P>

<P class=dt><B>"w"</B></P>

<P class=indent>Opens an empty file for writing. If the given file exists, its contents are destroyed.</P>

<P class=dt><B>"a"</B></P>

<P class=indent>Opens for writing at the end of the file (appending); creates the file first if it does not exist.</P>

<P class=dt><B>"r+"</B></P>

<P class=indent>Opens for both reading and writing. (The file must exist.)</P>

<P class=dt><B>"w+"</B></P>

<P class=indent>Opens an empty file for both reading and writing. If the given file exists, its contents are destroyed.</P>

<P class=dt><B>"a+"</B></P>

<P class=indent>Opens for reading and appending; creates the file first if it does not exist.</P>

<P>Use the <B>"w"</B> and <B>"w+"</B> types with care, as they can destroy existing files.</P>

<P>When a file is opened with the <B>"a"</B> or <B>"a+"</B> access type, all write operations occur at the end of the file. The file pointer can be repositioned using <B>fseek</B> or <B>rewind</B>, but is always moved back to the end of the file before any write operation is carried out. Thus existing data cannot be overwritten. When the <B>"r+"</B>, <B>"w+"</B>, or <B>"a+"</B> access type is specified, both reading and writing are allowed (the file is said to be open for “update”). However, when switching between reading and writing, there must be an intervening <A HREF="_crt_fsetpos.htm">fsetpos</A>, <A HREF="_crt_fseek.htm">fseek</A>, or <A HREF="_crt_rewind.htm">rewind</A> operation. The current position can be specified for the <B>fsetpos</B> or <B>fseek</B> operation, if desired. In addition to the above values, one of the following characters can be included in <I>mode</I> to specify the translation mode for new lines:</P>

<P class=dt><B>t</B></P>

<P class=indent>Opens a file in text (translated) mode. In this mode, carriage return–linefeed (CR-LF) combinations are translated into single linefeeds (LF) on input and LF characters are translated to CR-LF combinations on output. Also, CTRL+Z is interpreted as an end-of-file character on input. In files opened for reading or reading/writing, <B>_fsopen</B> checks for a CTRL+Z at the end of the file and removes it, if possible. This is done because using <B>fseek</B> and <B>ftell</B> to move within a file that ends with a CTRL+Z may cause <B>fseek</B> to behave improperly near the end of the file.</P>

<P class=dt><B>b</B></P>

<P class=indent>Opens a file in binary (untranslated) mode; the above translations are suppressed.</P>

<P>If <B>t</B> or <B>b</B> is not given in <I>mode,</I> the translation mode is defined by the default-mode variable <B>_fmode</B>. If <B>t</B> or <B>b</B> is prefixed to the argument, the function fails and returns <B>NULL</B>. For a discussion of text and binary modes, see <A HREF="_crt_text_and_binary_mode_file_i.2f.o.htm">Text and Binary Mode File I/O</A>. </P>

<P>The argument <I>shflag</I> is a constant expression consisting of one of the following manifest constants, defined in SHARE.H:</P>

<P class=dt><B>_SH_COMPAT</B></P>

<P class=indent>Sets Compatibility mode for 16-bit applications</P>

<P class=dt><B>_SH_DENYNO</B></P>

<P class=indent>Permits read and write access</P>

<P class=dt><B>_SH_DENYRD</B></P>

<P class=indent>Denies read access to file</P>

<P class=dt><B>_SH_DENYRW</B></P>

<P class=indent>Denies read and write access to file</P>

<P class=dt><B>_SH_DENYWR</B></P>

<P class=indent>Denies write access to file</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* FSOPEN.C:
 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;share.h&gt;

void main( void )
{
   FILE *stream;

   /* Open output file for writing. Using _fsopen allows us to
    * ensure that no one else writes to the file while we are
    * writing to it.
    */
   if( (stream = _fsopen( "outfile", "wt", _SH_DENYWR )) != NULL )
   {
      fprintf( stream, "No one else in the network can write "
                       "to this file until we are done.\n" );
      fclose( stream );
   }
   /* Now others can write to the file while we read it. */
   system( "type outfile" );
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>No one else in the network can write to this file until we are done.

</CODE></PRE>

<P><A HREF="_crt_stream_i.2f.o.htm">Stream I/O Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_fclose.2c_._fcloseall.htm">fclose</A>, <A HREF="_crt__fdopen.2c_._wfdopen.htm">_fdopen</A>, <A HREF="_crt_ferror.htm">ferror</A>, <A HREF="_crt__fileno.htm">_fileno</A>, <A HREF="_crt_fopen.2c_._wfopen.htm">fopen</A>, <A HREF="_crt_freopen.2c_._wfreopen.htm">freopen</A>, <A HREF="_crt__open.2c_._wopen.htm">_open</A>, <A HREF="_crt__setmode.htm">_setmode</A>, <A HREF="_crt__sopen.2c_._wsopen.htm">_sopen</A></P>
</font>
</BODY>
</HTML>

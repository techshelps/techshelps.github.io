<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing C or C++ Data in __asm Blocks</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_accessing_c_or_c.2b2b_.data_in___asm_blocks"></A>Accessing C or C++ Data in __asm Blocks</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_assembler_.28.inline.293a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_assembler_.28.inline.29_.tasks.htm">How Do I</A></P>

<P>A great convenience of inline assembly is the ability to refer to C or C++ variables by name. An <B>__asm</B> block can refer to any symbols, including variable names, that are in scope where the block appears. For instance, if the C variable <CODE>var</CODE> is in scope, the instruction</P>

<PRE><CODE>__asm mov eax, var
</CODE></PRE>

<P>stores the value of <CODE>var</CODE> in EAX.</P>

<P>If a class, structure, or union member has a unique name, an <B>__asm</B> block can refer to it using only the member name, without specifying the variable or <B>typedef</B> name before the period (<B>.</B>) operator. If the member name is not unique, however, you must place a variable or <B>typedef</B> name immediately before the period operator. For example, the following structure types share <CODE>same_name</CODE> as their member name: </P>

<PRE><CODE>struct first_type
{
   char *weasel;
   int same_name;
};

struct second_type
{
   int wonton;
   long same_name;
};
</CODE></PRE>

<P>If you declare variables with the types</P>

<PRE><CODE>struct first_type hal;
struct second_type oat;
</CODE></PRE>

<P>all references to the member <CODE>same_name</CODE> must use the variable name because <CODE>same_name</CODE> is not unique. But the member <CODE>weasel</CODE> has a unique name, so you can refer to it using only its member name:</P>

<PRE><CODE>__asm
{
   mov ebx, OFFSET hal
   mov ecx, [ebx]hal.same_name ; Must use 'hal'
   mov esi, [ebx].weasel       ; Can omit 'hal'
}
</CODE></PRE>

<P>Note that omitting the variable name is merely a coding convenience. The same assembly instructions are generated whether or not the variable name is present. </P>

<P>You can access data members in C++ without regard to access restrictions. However, you cannot call member functions. </P>
</font>
</BODY>
</HTML>

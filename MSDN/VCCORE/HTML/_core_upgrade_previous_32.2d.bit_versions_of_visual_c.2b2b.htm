<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Upgrade Previous 32-Bit Versions of Visual C++</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_porting_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_upgrade_previous_32.2d.bit_versions_of_visual_c.2b2b"></A>Upgrade Previous 32-Bit Versions of Visual C++</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_overviews.3a_.porting_and_upgrading.htm">Overview</A>  |&nbsp; <A HREF="_core_how_do_i.3a_.porting_and_upgrading.htm">How Do I</A>  |&nbsp; <A HREF="_core_frequently_asked_questions.3a_.porting_and_upgrading.htm">FAQ</A>  |&nbsp; <A HREF="_core_details.3a_.porting_and_upgrading.htm">Details</A></P>

<P>Projects built in previous 32-bit versions of Visual C++ can be opened and saved in Visual C++ projects automatically.</P>

<P>However, if you have built a 32-bit Visual C++ project from the command line with your own makefile, the Visual C++ development environment does not recognize project data in your file. Instead, the development environment offers to wrap your makefile. If you choose this option, a project is created with one file in it, your makefile, but the project will still build and run within the development environment. See <A HREF="_core_port_a_project_made_with_nmake_to_the_developer_studio_environment.htm">port a project made with NMAKE to the development environment</A> or <A HREF="_core_port_an_external_project_made_without_nmake_to_the_developer_studio_environment.htm">port a project made without NMAKE to the development environment</A> for step-by-step instructions. To take advantage of wizards and integrated debugging features, it would be better for you to create a new project in the development environment, add your existing files to it, then build and save it as an up-to-date project. </P>

<P class=label><B>To convert projects built in previous versions of the Visual C++ development environment</B>

<OL>
	<LI>From the <B>File</B> menu, click <B>Open Workspace</B>.
<P class=tl>The <B>Open Project Workspace</B> dialog box appears.</P></LI>

	<LI>In the <B>Files of Type</B> drop-down list, select All Files (*.*) to display all files.<BR><BR></LI>

	<LI>Select the drive and directory containing the previous makefile or project file.<BR><BR></LI>

	<LI>Select the makefile or project file from the list and click <B>Open</B>.
<P class=tl>A message box appears asking if you want to convert to the new project format.</P></LI>

	<LI>Click <B>Yes</B>.
<P class=tl>A new project workspace file (.DSW) and a new project options file (.OPT) are created with your old project workspace name.&nbsp; In addition a project build file (.DSP) will be created in each project directory for each project in the workspace.&nbsp; For the example of a single-project workspace called MYAPP.MDP, then MYAPP.DSW, MYAPP.DSP, and MYAPP.OPT are created and saved to the same directory.&nbsp; In the more complicated example of a two project workspace called MYAPP2.MDP, which also includes a subproject MYDLL2, then MYAPP2.DSW, MYAPP2.DSP, and MYAPP2.OPT are created and saved to the same directory and MYDLL2.DSP is created in the MYDLL2 directory.</P>
<P class=tl>After the new files are written, the new project workspace opens in the development environment. </P></LI>

	<LI>To recompile and link your application, click <B>Build</B> or <B>Rebuild All</B> from the <B>Build</B> menu.</LI>
</OL>

<P>You may want or need to modify the new project:

<UL type=disc>
	<LI><A HREF="_core_port_to_the_standard_c.2b2b_.library.htm">To use the Standard C++ iostream library instead of a previous version of the iostream library</A><BR><BR></LI>

	<LI><A HREF="_core_changes_in_mfc_versions.htm">To work with the current MFC library</A></LI>
</UL>



<H2><A NAME="vchowcoexistingwithpreviousversionsofvisualc"></A>Coexisting with Previous Versions of Visual C++</H2>

<P>Installing Visual C++ 6.0 overwrites library DLLs and PDBs used by previous Visual C++ versions (4.2 and 5.0). Visual C++ 4.2 and 5.0 cannot read the new-format debugging information in these DLLs. If you need to use Visual C++ 6.0 and Visual C++ 4.2/5.0, you can:

<UL type=disc>
	<LI>Run Visual C++ 6.0 and the older version on separate machines.<BR><BR></LI>

	<LI>Run Visual C++ 6.0 and the older version on separate installations of the operating system on the same machine.<BR><BR></LI>

	<LI>Use the Visual C++ 6.0 debugger for debugging in the new DLLs.<BR><BR></LI>

	<LI>Copy the old versions of the affected files into your Visual C++ 5.0 or 4.2 project Debug directory. (Do this before you install Visual C++ 6.0 or get the old versions from the \MSDEV\DEBUG directory of the Visual C++ 4.2 or 5.0 CD.)</LI>
</UL>

<P>None of these workarounds allow you to debug release builds with the 4.2 or 5.0 debugger.</P>

<P>The affected CRT files are:

<UL type=disc>
	<LI>MSVCRTd.dll <BR><BR></LI>

	<LI>MSVCRTd.pdb <BR><BR></LI>

	<LI>MSVCIRTd.dll <BR><BR></LI>

	<LI>MSVCIRTd.pdb</LI>
</UL>

<P>The affected MFC files are:

<UL type=disc>
	<LI>MFC42d.dll <BR><BR></LI>

	<LI>MFC42d.pdb <BR><BR></LI>

	<LI>MFC42u.pdb <BR><BR></LI>

	<LI>MFC42ud.dll <BR><BR></LI>

	<LI>MFC42ud.pdb <BR><BR></LI>

	<LI>MFCd42d.dll <BR><BR></LI>

	<LI>MFCd42d.pdb <BR><BR></LI>

	<LI>MFCd42ud.dll <BR><BR></LI>

	<LI>MFCd42ud.pdb <BR><BR></LI>

	<LI>MFCn42d.dll<BR><BR></LI>

	<LI>MFCn42d.pdb <BR><BR></LI>

	<LI>MFCn42ud.dll <BR><BR></LI>

	<LI>MFCn42ud.pdb <BR><BR></LI>

	<LI>MFCo42d.dll <BR><BR></LI>

	<LI>MFCo42d.pdb <BR><BR></LI>

	<LI>MFCo42ud.dll <BR><BR></LI>

	<LI>MFCo42ud.pdb </LI>
</UL>

<P>Do not replace the new versions of MFC42.dll, MFC42u.dll, and MSVCRT.dll with the older versions. If you do, you may break other applications dependent on the new versions of these DLLs. The Visual C++ 6.0 development environment, for example, requires the current version of MFC42.dll.</P>

<P>If you need to use Visual C++ 6.0 to generate import libraries in Visual C++ 5.0 format, you can use the <A HREF="vcreflink50compat(backwardscompatibility).htm">/LINK50COMPAT</A> option.</P>
</font>
</BODY>
</HTML>

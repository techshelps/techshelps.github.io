<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>vprintf Functions</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_vprintf_functions"></A><SUP></SUP>vprintf Functions</H1>

<P>Each of the <B>vprintf</B> functions takes a pointer to an argument list, then formats and writes the given data to a particular destination.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=29%><A HREF="_crt_vfprintf.2c_.vfwprintf.htm">vfprintf, vfwprintf</A></TD>
<TD width=71%><A HREF="_crt__vsnprintf.2c_._vsnwprintf.htm">_vsnprintf, _vsnwprintf</A></TD>
</TR>

<TR VALIGN="top">
<TD width=29%><A HREF="_crt_vprintf.2c_.vwprintf.htm">vprintf, vwprintf</A></TD>
<TD width=71%><A HREF="_crt_vsprintf.2c_.vswprintf.htm">vsprintf, vswprintf</A></TD>
</TR>
</TABLE><BR>

<P class=label><B>Remarks</B></P>

<P>The <B>vprintf</B> functions are similar to their counterpart functions as listed in the following table. However, each <B>vprintf</B> function accepts a pointer to an argument list, whereas each of the counterpart functions accepts an argument list. </P>

<P>These functions format data for output to destinations as follows.</P>

<TABLE border=1 cellpadding=5 cols=3 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=21%><B><BR>
Function</B></TD>
<TD class=label width=21%><B>Counterpart <BR>
Function</B></TD>
<TD class=label width=58%><B><BR>
Output Destination</B></TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>vfprintf</B></TD>
<TD width=21%><A HREF="_crt_fprintf.2c_.fwprintf.htm">fprintf</A></TD>
<TD width=58%><I>stream</I></TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>vfwprintf</B></TD>
<TD width=21%><A HREF="_crt_fprintf.2c_.fwprintf.htm">fwprintf</A></TD>
<TD width=58%><I>stream</I></TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>vprintf</B></TD>
<TD width=21%><A HREF="_crt_printf.2c_.wprintf.htm">printf</A></TD>
<TD width=58%><B>stdout</B></TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>vwprintf</B></TD>
<TD width=21%><A HREF="_crt_printf.2c_.wprintf.htm">wprintf</A></TD>
<TD width=58%><B>stdout</B></TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>vsprintf</B></TD>
<TD width=21%><A HREF="_crt_sprintf.2c_.swprintf.htm">sprintf</A></TD>
<TD width=58%>memory pointed to by <I>buffer</I></TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>vswprintf</B></TD>
<TD width=21%><A HREF="_crt_sprintf.2c_.swprintf.htm">swprintf</A></TD>
<TD width=58%>memory pointed to by <I>buffer</I></TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>_vsnprintf</B></TD>
<TD width=21%><A HREF="_crt__snprintf.2c_._snwprintf.htm">_snprintf</A></TD>
<TD width=58%>memory pointed to by <I>buffer</I></TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>_vsnwprintf</B></TD>
<TD width=21%><A HREF="_crt__snprintf.2c_._snwprintf.htm">_snwprintf</A></TD>
<TD width=58%>memory pointed to by <I>buffer</I></TD>
</TR>
</TABLE><BR>

<P>The <I>argptr</I> argument has type <B>va_list</B>, which is defined in VARARGS.H and STDARG.H. The <I>argptr</I> variable must be initialized by <B>va_start,</B> and may be reinitialized by subsequent <B>va_arg</B> calls; <I>argptr</I> then points to the beginning of a list of arguments that are converted and transmitted for output according to the corresponding specifications in the <I>format</I> argument. <I>format</I> has the same form and function as the <I>format</I> argument for <A HREF="_crt_printf.2c_.wprintf.htm">printf</A>. None of these functions invokes <B>va_end</B>. For a more complete description of each <B>vprintf</B> function, see the description of its counterpart function as listed in the preceding table.</P>

<P><B>_vsnprintf</B> differs from <B>vsprintf</B> in that it writes no more than <I>count</I> bytes to <I>buffer</I>.</P>

<P><B>vfwprintf</B>, <B>_vsnwprintf</B>, <B>vswprintf</B>, and <B>vwprintf</B> are wide-character versions of <B>vfprintf</B>, <B>_vsnprintf</B>, <B>vsprintf,</B> and <B>vprintf</B>, respectively; in each of these wide-character functions, <I>buffer</I> and <I>format</I> are wide-character strings. Otherwise, each wide-character function behaves identically to its SBCS counterpart function.</P>

<P>For <B>vsprintf</B>, <B>vswprintf</B>, <B>_vsnprintf</B> and <B>_vsnwprintf</B>, if copying occurs between strings that overlap, the behavior is undefined.</P>

<P><A HREF="_crt_stream_i.2f.o.htm">Stream I/O Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_fprintf.2c_.fwprintf.htm">fprintf</A>, <A HREF="_crt_printf.2c_.wprintf.htm">printf</A>,<A HREF="_crt_sprintf.2c_.swprintf.htm"> sprintf</A>, <A HREF="_crt_va_arg.2c_.va_end.2c_.va_start.htm">va_arg</A></P>
</font>
</BODY>
</HTML>

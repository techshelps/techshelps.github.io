<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>strtod, strtol, strtoul Functions</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt_strtod.2c_.strtol.2c_.strtoul_functions"></A>strtod, strtol, strtoul Functions</H1>

<P><A HREF="_crt_strtod.2c_.wcstod.htm">strtod, wcstod</A></P>

<P><A HREF="_crt_strtol.2c_.wcstol.htm">strtol, wcstol</A></P>

<P><A HREF="_crt_strtoul.2c_.wcstoul.htm">strtoul, wcstoul</A></P>

<P class=label><B>Return Value</B></P>

<P><B>strtod</B> returns the value of the floating-point number, except when the representation would cause an overflow, in which case the function returns +/–<B>HUGE_VAL</B>. The sign of <B>HUGE_VAL</B> matches the sign of the value that cannot be represented. <B>strtod</B> returns 0 if no conversion can be performed or an underflow occurs.</P>

<P><B>strtol</B> returns the value represented in the string <I>nptr</I>, except when the representation would cause an overflow, in which case it returns <B>LONG_MAX</B> or <B>LONG_MIN</B>. <B>strtoul</B> returns the converted value, if any, or <B>ULONG_MAX</B> on overflow. Each of these functions returns 0 if no conversion can be performed.</P>

<P><B>wcstod</B>, <B>wcstol</B>, and <B>wcstoul</B> return values analogously to <B>strtod</B>, <B>strtol</B>, and <B>strtoul,</B> respectively.</P>

<P>For all six functions in this group, <B>errno</B> is set to <B>ERANGE</B> if overflow or underflow occurs.</P>

<P class=label><B>Parameters</B></P>

<P class=dt><I>nptr</I></P>

<P class=indent>Null-terminated string to convert </P>

<P class=dt><I>endptr</I></P>

<P class=indent>Pointer to character that stops scan</P>

<P class=dt><I>base</I></P>

<P class=indent>Number base to use</P>

<P class=label><B>Remarks</B></P>

<P>The <B>strtod</B>, <B>strtol</B>, and <B>strtoul</B> functions convert <I>nptr</I> to a double-precision value, a long-integer value, or an unsigned long-integer value, respectively.</P>

<P>The input string <I>nptr</I> is a sequence of characters that can be interpreted as a numerical value of the specified type. Each function stops reading the string <I>nptr</I> at the first character it cannot recognize as part of a number. This may be the terminating null character. For <B>strtol</B> or <B>strtoul</B>, this terminating character can also be the first numeric character greater than or equal to <I>base</I>. </P>

<P>For all six functions in the <B>strtod</B> group, the current locale’s <B>LC_NUMERIC</B> category setting determines recognition of the radix character in <I>nptr;</I> for more information, see <A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A>. If <I>endptr</I> is not <B>NULL</B>, a pointer to the character that stopped the scan is stored at the location pointed to by <I>endptr</I>. If no conversion can be performed (no valid digits were found or an invalid base was specified), the value of <I>nptr</I> is stored at the location pointed to by <I>endptr</I>.</P>

<P><B>strtod</B> expects <I>nptr</I> to point to a string of the following form:</P>

<P>[<I>whitespace</I>] [<I>sign</I>] [<I>digits</I>] [<B>.</B><I>digits</I>] [ {<B>d</B> | <B>D</B> | <B>e</B> | <B>E</B>}[<I>sign</I>]<I>digits</I>]</P>

<P>A <I>whitespace</I> may consist of space or tab characters, which are ignored; <I>sign</I> is either plus (<B>+</B>) or minus (<B>–</B>); and <I>digits</I> are one or more decimal digits. If no digits appear before the radix character, at least one must appear after the radix character. The decimal digits can be followed by an exponent, which consists of an introductory letter (<B>d</B>, <B>D</B>, <B>e</B>, or <B>E</B>) and an optionally signed integer. If neither an exponent part nor a radix character appears, a radix character is assumed to follow the last digit in the string. The first character that does not fit this form stops the scan.</P>

<P>The <B>strtol</B> and <B>strtoul</B> functions expect <I>nptr</I> to point to a string of the following form:</P>

<P>[<I>whitespace</I>] [{<B>+</B> | <B>–</B>}] [<B>0</B> [{ <B>x</B> | <B>X</B> }]] [<I>digits</I>]</P>

<P>If <I>base</I> is between 2 and 36, then it is used as the base of the number. If <I>base</I> is 0, the initial characters of the string pointed to by <I>nptr</I> are used to determine the base. If the first character is 0 and the second character is not 'x' or 'X', the string is interpreted as an octal integer; otherwise, it is interpreted as a decimal number. If the first character is '0' and the second character is 'x' or 'X', the string is interpreted as a hexadecimal integer. If the first character is '1' through '9', the string is interpreted as a decimal integer. The letters 'a' through 'z' (or 'A' through 'Z') are assigned the values 10 through 35; only letters whose assigned values are less than <I>base</I> are permitted. <B>strtoul</B> allows a plus (<B>+</B>) or minus (<B>–</B>) sign prefix; a leading minus sign indicates that the return value is negated.</P>

<P><B>wcstod</B>, <B>wcstol</B>, and <B>wcstoul</B> are wide-character versions of <B>strtod</B>, <B>strtol</B>, and <B>strtoul,</B> respectively; the <I>nptr</I> argument to each of these wide-character functions is a wide-character string. Otherwise, each of these wide-character functions behaves identically to its single-byte–character counterpart.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* STRTOD.C: This program uses strtod to convert a
 * string to a double-precision value; strtol to
 * convert a string to long integer values; and strtoul
 * to convert a string to unsigned long-integer values.
 */

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

void main( void )
{
   char   *string, *stopstring;
   double x;
   long   l;
   int    base;
   unsigned long ul;
   string = "3.1415926This stopped it";
   x = strtod( string, &amp;stopstring );
   printf( "string = %s\n", string );
   printf("   strtod = %f\n", x );
   printf("   Stopped scan at: %s\n\n", stopstring );
   string = "-10110134932This stopped it";
   l = strtol( string, &amp;stopstring, 10 );
   printf( "string = %s", string );
   printf("   strtol = %ld", l );
   printf("   Stopped scan at: %s", stopstring );
   string = "10110134932";
   printf( "string = %s\n", string );
   /* Convert string using base 2, 4, and 8: */
   for( base = 2; base &lt;= 8; base *= 2 )
   {
      /* Convert the string: */
      ul = strtoul( string, &amp;stopstring, base );
      printf( "   strtol = %ld (base %d)\n", ul, base );
      printf( "   Stopped scan at: %s\n", stopstring );
   }
}

</CODE></PRE>

<P class=label><B>Output</B></P>

<PRE><CODE>string = 3.1415926This stopped it
   strtod = 3.141593
   Stopped scan at: This stopped it

string = -10110134932This stopped it   strtol = -2147483647   Stopped scan at: This stopped itstring = 10110134932
   strtol = 45 (base 2)
   Stopped scan at: 34932
   strtol = 4423 (base 4)
   Stopped scan at: 4932
   strtol = 2134108 (base 8)
   Stopped scan at: 932

</CODE></PRE>

<P><A HREF="_crt_data_conversion.htm">Data Conversion Routines</A>  |&nbsp; <A HREF="_crt_floating.2d.point_support.htm">Floating-Point Support Routines</A>  |&nbsp; <A HREF="_crt_locale.htm">Locale Routines</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_atof.2c_.atoi.2c_._atoi64.2c_.atol.htm">atof</A>, <A HREF="_crt_localeconv.htm">localeconv</A>, <A HREF="_crt_setlocale.2c_._wsetlocale.htm">setlocale</A></P>
</font>
</BODY>
</HTML>

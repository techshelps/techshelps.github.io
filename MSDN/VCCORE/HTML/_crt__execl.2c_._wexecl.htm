<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_execl, _wexecl</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_crt__execl.2c_._wexecl"></A><SUP></SUP>_execl, _wexecl</H1>

<P>Load and execute new child processes.</P>

<P><B>int</B> <B>_execl(</B> <B>const</B> <B>char</B> <B>*</B><I>cmdname</I><B>,</B> <B>const</B> <B>char</B> <B>*</B><I>arg0</I><B>,</B> <I>...</I> <B>const</B> <B>char</B> <B>*</B><I>argn</I><B>,</B> <B>NULL</B> <B>);</B></P>

<P><B>int</B> <B>_wexecl(</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>cmdname</I><B>,</B> <B>const</B> <B>wchar_t</B> <B>*</B><I>arg0</I><B>,</B> <I>...</I> <B>const</B> <B>wchar_t</B> <B>*</B><I>argn</I><B>,</B> <B>NULL</B> <B>);</B></P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=16%><B>Function</B></TD>
<TD class=label width=27%><B>Required Header</B></TD>
<TD class=label width=27%><B>Optional Headers</B></TD>
<TD class=label width=30%><B>Compatibility</B></TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_execl</B></TD>
<TD width=27%>&lt;process.h&gt;</TD>
<TD width=27%>&lt;errno.h&gt;</TD>
<TD width=30%>Win 95, Win NT</TD>
</TR>

<TR VALIGN="top">
<TD width=16%><B>_wexecl</B></TD>
<TD width=27%>&lt;process.h&gt; or &lt;wchar.h&gt;</TD>
<TD width=27%>&lt;errno.h&gt;</TD>
<TD width=30%>Win NT</TD>
</TR>
</TABLE><BR>

<P>For additional compatibility information, see <A HREF="_crt_compatibility.htm">Compatibility</A> in the Introduction.</P>

<P class=label><B>Libraries</B></P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=24%>LIBC.LIB</TD>
<TD width=76%>Single thread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>LIBCMT.LIB</TD>
<TD width=76%>Multithread static library, retail version</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>MSVCRT.LIB</TD>
<TD width=76%>Import library for MSVCRT.DLL, retail version</TD>
</TR>
</TABLE><BR>

<P class=label><B>Return Value</B></P>

<P>If successful, these functions do not return to the calling process. A return value of –1 indicates an error, in which case the <B>errno</B> global variable is set.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=21%><B>errno Value</B></TD>
<TD class=label width=79%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>E2BIG</B></TD>
<TD width=79%>The space required for the arguments and environment settings exceeds 32K.</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>EACCES</B></TD>
<TD width=79%>The specified file has a locking or sharing violation.</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>EMFILE</B></TD>
<TD width=79%>Too many files open (the specified file must be opened to determine whether it is executable).</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>ENOENT</B></TD>
<TD width=79%>File or path not found.</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>ENOEXEC</B></TD>
<TD width=79%>The specified file is not executable or has an invalid executable-file format.</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>ENOMEM</B></TD>
<TD width=79%>Not enough memory is available to execute the new process; or the available memory has been corrupted; or an invalid block exists, indicating that the calling process was not allocated properly.</TD>
</TR>
</TABLE><BR>

<P class=label><B>Parameters</B></P>

<P class=dt><I>cmdname</I></P>

<P class=indent>Path of file to be executed</P>

<P class=dt><I>arg0</I>, <I>... argn</I></P>

<P class=indent>List of pointers to parameters</P>

<P class=label><B>Remarks</B></P>

<P>Each of these functions loads and executes a new process, passing each command-line argument as a separate parameter.</P>

<P class=label><B>Example</B></P>

<PRE><CODE>/* EXEC.C illustrates the different versions of exec including:
 *      _execl          _execle          _execlp          _execlpe
 *      _execv          _execve          _execvp          _execvpe
 *
 * Although EXEC.C can exec any program, you can verify how 
 * different versions handle arguments and environment by 
 * compiling and specifying the sample program ARGS.C. See 
 * SPAWN.C for examples of the similar spawn functions.
 */

#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include &lt;process.h&gt;

char *my_env[] =                /* Environment for exec?e */
{
   "THIS=environment will be",
   "PASSED=to new process by",
   "the EXEC=functions",
   NULL
};

void main()
{
   char *args[4], prog[80];
   int ch;

   printf( "Enter name of program to exec: " );
   gets( prog );
   printf( " 1. _execl  2. _execle  3. _execlp  4. _execlpe\n" );
   printf( " 5. _execv  6. _execve  7. _execvp  8. _execvpe\n" );
   printf( "Type a number from 1 to 8 (or 0 to quit): " );
   ch = _getche();
   if( (ch &lt; '1') || (ch &gt; '8') )
       exit( 1 );
   printf( "\n\n" );

   /* Arguments for _execv? */
   args[0] = prog;
   args[1] = "exec??";
   args[2] = "two";
   args[3] = NULL;

   switch( ch )
   {
   case '1':
      _execl( prog, prog, "_execl", "two", NULL );
      break;
   case '2':
      _execle( prog, prog, "_execle", "two", NULL, my_env );
      break;
   case '3':
      _execlp( prog, prog, "_execlp", "two", NULL );
      break;
   case '4':
      _execlpe( prog, prog, "_execlpe", "two", NULL, my_env );
      break;
   case '5':
      _execv( prog, args );
      break;
   case '6':
      _execve( prog, args, my_env );
      break;
   case '7':
      _execvp( prog, args );
      break;
   case '8':
      _execvpe( prog, args, my_env );
      break;
   default:
      break;
   }

   /* This point is reached only if exec fails. */
   printf( "\nProcess was not execed." );
   exit( 0 );
}
 

</CODE></PRE>

<P><A HREF="_crt_process_and_environment_control.htm">Process and Environment Control Routines</A>  |&nbsp; <A HREF="_crt__exec.2c_._wexec_functions.htm">_exec, _wexec_Function Overview</A></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;<A HREF="_crt_abort.htm">abort</A>, <A HREF="_crt_atexit.htm">atexit</A>, <A HREF="_crt_exit.2c_._exit.htm">exit</A>, <A HREF="_crt__onexit.htm">_onexit</A>, <A HREF="_crt__spawn.2c_._wspawn_functions.htm">_spawn Function Overview</A>, <A HREF="_crt_system.2c_._wsystem.htm">system</A> </P>
</font>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cleaning up Resources</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_cleaning_up_resources"></A><SUP></SUP>Cleaning up Resources</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_exception_handling_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.frequently_asked_questions.htm">FAQ</A></P>

<P>During termination-handler execution, you may not know which resources are actually allocated before the termination handler was called. It is possible that the <B>__try</B> statement block was interrupted before all resources were allocated, so that not all resources were opened.</P>

<P>Therefore, to be safe, you should check to see which resources are actually open before proceeding with termination-handling cleanup. A recommended procedure is to:

<OL>
	<LI>Initialize handles to NULL.<BR><BR></LI>

	<LI>In the <B>__try</B> statement block, allocate resources. Handles are set to positive values as the resource is allocated.<BR><BR></LI>

	<LI>In the <B>__finally</B> statement block, release each resource whose corresponding handle or flag variable is nonzero or not NULL.</LI>
</OL>

<P>For example, the following code uses a termination handler to close three files and a memory block that were allocated in the <B>__try</B> statement block. Before cleaning up a resource, the code first checks to see if the resource was allocated.</P>

<PRE><CODE>void    FileOps()
{
   FILE *fp1, *fp2, *fp3;
    LPVOID  lpvoid;

    lpvoid = fp1 = fp2 = fp3 = NULL;
    __try {
        lpvoid = malloc( BUFFERSIZE );
        fp1 = fopen( "ADDRESS.DAT", "w+" );
        fp2 = fopen( "NAMES.DAT", "w+" );
        fp3 = fopen( "CARS.DAT", "w+" );
        .
        .
        .
    }
    __finally {
        if ( fp1 ) fclose( fp1 );
        if ( fp2 ) fclose( fp2 );
        if ( fp3 ) fclose( fp3 );
        if ( lpvoid ) free( lpvoid );
    }
}
</CODE></PRE>
</font>
</BODY>
</HTML>

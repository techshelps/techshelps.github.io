<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiler Error C2065</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="c2065"></A><SUP></SUP>Compiler Error C2065</H1>

<P class=dt><B>'identifier' : undeclared identifier</B></P>

<P>The specified identifier was not declared.</P>

<P>A variable’s type must be specified in a declaration before it can be used. The parameters that a function uses must be specified in a declaration, or prototype, before the function can be used.</P>

<P class=label><B>Tips</B>

<UL type=disc>
	<LI>Make sure any include file containing the required declaration is not omitted.<BR><BR></LI>

	<LI>Make sure you are including any necessary header files if you have defined VC_EXTRALEAN, WIN32_LEAN_AND_MEAN, or WIN32_EXTRA_LEAN. Defining these symbols excludes some functionality (certain header files are excluded) from windows.h and afxv_w32.h (for MFC applications) to speed compiles. Search windows.h and afxv_w32.h for these symbols for the most up-to-date description of what is excluded.<BR><BR></LI>

	<LI>Make sure the identifier name is spelled correctly.<BR><BR></LI>

	<LI>Make sure the identifier is using the correct upper- and lowercase letters.<BR><BR></LI>

	<LI>Make sure all string constants have closing quotes.<BR><BR></LI>

	<LI>This error can be caused by having a newline character in a string constant without a continuation character. For example:
<PRE><CODE>#include &lt;stdio.h&gt;
main() {
printf("\n %s
%s    // error: 's' : undeclared identifier
%s",
"this", "is", "it");
}
</CODE></PRE>
</LI>

	<LI>Special considerations must be taken when splitting a constant string over several lines. The most common method is to change the format string. Strings separated only by whitespace (spaces, tabs, newlines) are concatenated. For example:
<PRE><CODE>#include &lt;stdio.h&gt;
main() {
printf("\n %s"
 " %s"
 " %s",
 "this", "is", "it");
 }
</CODE></PRE>
</LI>

	<LI>An older, less-preferred method is to use line continuation by typing a backslash at the end of a line. For example:
<PRE><CODE>printf("\n %s\
 %s\
 %s",
 "this", "is", "it");
</CODE></PRE>

<P class=tl>This method is not often used because the spaces at the beginning of each continued line become part of the string.</P></LI>

	<LI>Make sure you're using proper namespace scope. For example, in order to properly resolve ANSI C++ Standard Library functions and operators, you must state that you're using the std namespace with the using directive.
<P class=tl>For example, unless the using directive is uncommented, the following sample will fail to compile because the cout stream is defined in the std namespace:</P>
<PRE><CODE>#include &lt;iostream&gt;
// using namespace std;    
void main()
{
     cout &lt;&lt; "Hello" &lt;&lt; endl;
}
</CODE></PRE>
</LI>
</UL>
</font>
</BODY>
</HTML>

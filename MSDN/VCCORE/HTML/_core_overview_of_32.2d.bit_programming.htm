<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overview of 32-Bit Programming</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_overview_of_32.2d.bit_programming"></A><SUP></SUP>Overview of 32-Bit Programming</H1>

<P>The 32-bit API was designed to minimize the impact on existing code so that 16-bit applications could be adapted as easily as possible. However, some changes were mandated by the larger address space. Pointers are all 32 bits wide and no longer <B>near</B> or <B>far</B>, and your code cannot make assumptions based on segmented memory.</P>

<P>Items which have increased to 32 bits include:

<UL type=disc>
	<LI>Window handles<BR><BR></LI>

	<LI>Handles to other objects, such as pens, brushes, and menus<BR><BR></LI>

	<LI>Graphics coordinates</LI>
</UL>

<P>These size differences are generally resolved in WINDOWS.H or by the C language, but some changes to source code are necessary. Because the different sizes can change the way information is packed in some message parameters, you must rewrite code that handles these messages. The larger size of graphics coordinates also affects a number of function calls.</P>

<P>Some source code changes are required because Win32 uses higher-level mechanisms for certain operations, such as MS-DOS calls. With these mechanisms, the 32-bit API is adaptable to many platforms, and it supports powerful new features such as multiple threads of execution.</P>

<P>Although Windows 3.<I>x</I> and Win32 were designed to be as compatible as possible, you may need to carefully review large amounts of source code. Where do you start? The top-down approach is recommended:

<OL>
	<LI>Compile the application for 32 bits, and note the compiler-generated errors.<BR><BR></LI>

	<LI>Replace complex procedures that are difficult to port, and procedures written in assembly language, with stub procedures (which do nothing except return).<BR><BR></LI>

	<LI>Fix errors in the main portion of the application, using the techniques described in this chapter.<BR><BR></LI>

	<LI>Individually fill each stub procedure with portable code after the main portion of the application compiles and runs correctly.</LI>
</OL>
</font>
</BODY>
</HTML>

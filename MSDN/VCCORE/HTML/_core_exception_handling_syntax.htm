<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exception Handling Syntax</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_addpf_home">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_exception_handling_syntax"></A>Exception Handling Syntax</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_exception_handling_tasks.htm">How Do I</A>  |&nbsp; <A HREF="_core_exception_handling.3a_.frequently_asked_questions.htm">FAQ</A></P>

<P>The structure for C++ exception handling is represented by the following syntax:</P>

<P><I>try-block</I> :<BR>
&nbsp;&nbsp;&nbsp;<B>try</B> <I>compound-statement handler-list</I></P>

<P><I>handler-list</I> :<BR>
&nbsp;&nbsp;&nbsp;<I>handler handler-list</I><SUB>opt</SUB></P>

<P><I>handler</I> :<BR>
&nbsp;&nbsp;&nbsp;<B>catch</B> ( <I>exception-declaration</I> ) <I>compound-statement</I></P>

<P><I>exception-declaration</I> :<BR>
&nbsp;&nbsp;&nbsp;<I>type-specifier-list declarator</I><BR>
&nbsp;&nbsp;&nbsp;<I>type-specifier-list abstract-declarator</I><BR>
&nbsp;&nbsp;&nbsp;<I>type-specifier-list</I><BR>
&nbsp;&nbsp;&nbsp;<B>...</B></P>

<P><I>throw-expression</I> :<BR>
&nbsp;&nbsp;&nbsp;<B>throw</B> <I>assignment-expression</I><SUB>opt</SUB></P>

<P>The <I>compound-statement</I> after the <B>try</B> clause is the guarded section of code. The <I>throw-expression</I> throws an exception. The <I>compound-statement</I> after the <B>catch</B> clause is the exception handler, and catches the exception thrown by the <B>throw</B>-expression. The <I>exception-declaration</I> statement after the <B>catch</B> clause indicates the type of exception the clause handles. The type can be any valid data type, including a C++ class.</P>

<P>If the exception-declaration statement is an ellipsis (...), the catch clause handles any type of exception, including C exceptions as well as system-generated and application-generated exceptions. This includes exceptions such as memory protection, divide-by-zero, and floating-point violations. An ellipsis catch handler must be the last handler for its try block.</P>

<P>The operand of <B>throw</B> is syntactically similar to the operand of a <B>return</B> statement.</P>

<P><B>Microsoft Specific —&gt;</B></P>

<P>Microsoft C++ does not support the function exception specification mechanism, as described in section 15.4 of the ANSI C++ draft.</P>

<P><B>END Microsoft Specific</B></P>
</font>
</BODY>
</HTML>

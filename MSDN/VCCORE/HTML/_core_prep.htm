<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PREP</TITLE>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_vc_perf_home">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink">
	<PARAM NAME="DefaultTopic" VALUE="_topic_not_found.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="vceditions">
</OBJECT>
</TD></TR></TABLE>


<font face="verdana,arial,helvetica" size="2">
<H1><A NAME="_core_prep"></A>PREP</H1>

<P><A HREF="JavaScript:hhobj_1.Click()">Home</A>  |&nbsp; <A HREF="_core_profiling.3a_.overview.htm">Overview</A>  |&nbsp; <A HREF="_core_procedures_for_performance_tuning.htm">How Do I</A></P>

<P class=indent><B><B>Feature Only in Professional and Enterprise Editions</B></B>&nbsp;&nbsp;&nbsp;Profiling is supported only in Visual C++ Professional and Enterprise Editions. For more information, see <A HREF="JavaScript:hhobj_2.Click()">Visual C++ Editions</A>.</P>

<P>The PREP program runs twice during a normal profiling operation. In Phase I, it reads an executable (.EXE) file and then creates .PBI and .PBT files. In Phase II, it reads .PBT and .PBO files and then writes a new .PBT file for PLIST.</P>

<H4>Syntax</H4>

<P>PREP [<I>options</I>] [<I>programname1</I>] [<I>programname2</I>...<I>programname8</I>]</P>

<P>PREP reads the command line from left to right, so the rightmost options override contradictory options to the left. None of the options is case sensitive. You must prefix options with a forward slash (/) or a dash (–), and options must be separated by spaces.</P>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=29%><B>Parameter</B></TD>
<TD class=label width=71%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=29%><I>options</I></TD>
<TD width=71%>See <A HREF="#_core_prep_options">Options</A> below. </TD>
</TR>

<TR VALIGN="top">
<TD width=29%><I>programname1</I></TD>
<TD width=71%>Filename of primary program to profile (.DBG, .EXE, or .DLL). PROFILE adds the .EXE extension if no extension is given. This parameter must be specified for PREP Phase I, but not for Phase II.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><I>programname2...<BR>
programname8</I></TD>
<TD width=71%>Additional programs to profile. These parameters can be specified for PREP Phase I only.</TD>
</TR>
</TABLE><BR>

<P>&nbsp;An ‘X’ in the following <A HREF="#_core_prep_options">Options</A> table indicates that a PREP command-line option applies to a particular phase.</P>

<H4><A NAME="_core_prep_options"></A>Options</H4>

<P>PREP Phase I options can be issued either from the <B>Profiler </B>dialog box or from the command line. PREP Phase II options can be issued only at the command line.</P>

<TABLE border=1 cellpadding=5 cols=4 frame=below rules=rows>

<TR VALIGN="top">
<TD class=label width=22%><B>Option</B></TD>
<TD class=label width=7%><B>I</B></TD>
<TD class=label width=7%><B>II</B></TD>
<TD class=label width=64%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/AT</TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>Collects attribution data for function timing and function counting. Function attribution reports which function called another function. See the /STACK switch later in this list.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/CB</TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>Used with function timing, allows you to set the calibrated overhead of profiler calls in the event that your function timing calls have varied because of varied calibrated overhead values. The calibrated overhead is displayed in default (non-tab-delimited) PLIST output.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/EXC</TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>Excludes a specified module from the profile. You can also exclude part of a module. For example, /EXC test.cpp(9-18).</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/EXCALL</TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>Excludes all modules from the profile (see <A HREF="#_core_prep_remarks">Remarks</A>). Used with /INC.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/FC</TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>Selects function count profiling.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/FT</TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>Selects function timing profiling. This option causes the profiler to generate count information as well. This is the default setting from the command line.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/FV</TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>Selects function coverage profiling.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/INC</TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>Includes in profile (see <A HREF="#_core_prep_remarks">Remarks</A>). Used in conjunction with /EXCALL.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/H[ELP]</TD>
<TD width=7%>X</TD>
<TD width=7%>X</TD>
<TD width=64%>Provides a short summary of PREP options.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/IO <I>filename</I></TD>
<TD width=7%>&nbsp;</TD>
<TD width=7%>X</TD>
<TD width=64%>Merges an existing .PBO file (PROFILE output). Up to eight .PBO files can be merged at a time. The default extension is .PBO.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/IT <I>filename</I></TD>
<TD width=7%>&nbsp;</TD>
<TD width=7%>X</TD>
<TD width=64%>Merges an existing .PBT file (PREP Phase I output). Up to eight .PBT files can be merged at a time. You cannot merge .PBT files from different profiling methods. The default extension is .PBT.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/LC</TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>Selects line count profiling.&nbsp; May take a long time.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/LV</TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>Selects line coverage profiling.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/M <I>filename</I></TD>
<TD width=7%>&nbsp;</TD>
<TD width=7%>X</TD>
<TD width=64%>Substitutes for the /IT, /IO, and /OT options.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/NOLOGO</TD>
<TD width=7%>X</TD>
<TD width=7%>X</TD>
<TD width=64%>Suppresses the PREP copyright message.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/OI <I>filename</I></TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>Creates a .PBI file. The default extension is .PBI. If /OI is not specified, the output .PBI file is&nbsp; <I>programname1</I>.PBI.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/OM</TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>Creates a self-profiling file with an _XE or _LL extension for function timing, function counting, and function coverage. Without this option, the executable code is stored in the .PBI file. This option speeds up profiling.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/OT <I>filename</I></TD>
<TD width=7%>X</TD>
<TD width=7%>X</TD>
<TD width=64%>Specifies the output .PBT file. The default extension is .PBT. If /OT is not specified, the output .PBT file is <I>programname1</I>.PBT.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/SF <I>function</I></TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>Starts profiling with <I>function</I>. The <I>function </I>name must correspond to an entry in the .MAP file.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/STACK <I>dpt</I></TD>
<TD width=7%>X</TD>
<TD width=7%>&nbsp;</TD>
<TD width=64%>When using the /AT switch, you can also set the stack depth (<I>dpt</I>) to which functions will have their attribution data recorded.</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>/?</TD>
<TD width=7%>X</TD>
<TD width=7%>X</TD>
<TD width=64%>Provides a short summary of PREP options.</TD>
</TR>
</TABLE><BR>

<H4>Environment Variable</H4>

<TABLE border=1 cellpadding=5 cols=2 frame=below rules=rows>

<TR VALIGN="top">
<TD width=12%>PREP</TD>
<TD width=88%>Specifies default command-line options.</TD>
</TR>
</TABLE><BR>

<P>If a value for the PREP environment variable is not specified, the default options for PREP are:</P>

<PRE><CODE>/FT /OI filename /OT filename
</CODE></PRE>

<P>where <I>filename</I> is set to the <I>programname1</I> parameter value.</P>



<H4><A NAME="_core_prep_remarks"></A>Remarks</H4>

<P>The /INC and /EXC options specify individual library (.LIB), object (.OBJ), and application source (.C, .CPP, or .CXX) files. For line counting and line coverage, you can specify line numbers with source files as:</P>

<PRE><CODE>/EXCALL /INC test.cpp(3-41,50-67)
</CODE></PRE>

<P>This example includes only lines 3 through 41 and lines 50 through 67 from the source file TEST.CPP. Note the absence of spaces in the source specification.</P>

<P>To specify all source lines in a particular module, specify the .OBJ file as:</P>

<PRE><CODE>/EXCALL /INC test.obj
</CODE></PRE>

<P>or by using the source filename with zero line numbers like this:</P>

<PRE><CODE>/EXCALL /INC test.cpp(0-0)
</CODE></PRE>

<P>The following statement profiles from line 50 to the end of the file:</P>

<PRE><CODE>/EXCALL /INC test.cpp(50-0)
</CODE></PRE>
</font>
</BODY>
</HTML>

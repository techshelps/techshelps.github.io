<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing an Individual Property in the Property Cache</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_ds_accessing_an_individual_property_in_the_property_cache"></a>Accessing an Individual Property in the Property Cache</h3>
<p>
Individual properties in the property cache can be referenced in several ways. From Automation languages, you use the property name directly. This is the ADSI property name, for example, <b>Name</b> or <b>Class</b>, both properties defined on <b>IADs</b>. You can also use the property names as it is defined in the schema object. Then you can use the <b>IADs::Get </b>or any of its related interfaces, <b>GetEx</b>, <b>Put</b>, and <b>PutEx</b>. In each of these cases, you pass the name of the property as it is defined in the schema as the first parameter. </p>
<p>
From non-Automation languages, you can also use the <b>IADs::Get</b> method and its related methods as described above. In addition, you can use the <b>get_<i>propertyname</i></b> and <b>put_<i>propertyname</i> </b>methods supported on all ADSI interfaces.</p>
<p>
To find the property names supported by an object, first get the <b>IADs</b> interface pointer for that object. Use <b>IADs::Schema</b> to find the schema object, and <b>IADs::Class</b> to look up the class definition. Using the <b>IADsClass</b> interface on the class definition, use property methods <b>MandatoryProperties</b> and <b>OptionalProperties</b> to see the list of properties defined for each object of this type. </p>
<p>
<b>Note</b>&nbsp;&nbsp;In the following discussion, "get methods" include <b>IADs::Get</b>, <b>IADs::GetEx</b>, and any <b>get_</b> property method defined on an ADSI interface. Similarly, "put methods" include <b>IADs::Put</b>, <b>IADs::PutEx</b>, and any <b>put_</b> property method defined on an ADSI interface. </p>
<p>
When an object is created, its property cache is empty. You can force all the properties to load by calling <b>GetInfo</b>. When you call one of the get methods and the cache is empty, an implicit <b>GetInfo</b> occurs. Once the cache is filled, all subsequent <b>get</b> and <b>put</b> requests are filled from the current contents of the cache, eliminating network calls. Only another explicit <b>GetInfo</b> refreshes the cache. </p>
<p>
One consequence of this design occurs for the following scenario:</p>
<p>
If the cache already has values, and you then set a previously undefined property in the underlying directory service, and you <b>get</b> that property, the cache will not have the value and the error return is E_ADS_PROPERTY_NOT_FOUND. You must explicitly call <b>GetInfo</b> to see the new value. </p>
<p>
If you use a put method to change a value in the cache for a property and subsequently use a get method for that property, you retrieve the value you just put there. If you explicitly call <b>GetInfo </b>after you have changed values in the cache but before you call <b>SetInfo</b>, the values in the cache are refreshed from the underlying directory service and any changes you made are over-written. </p>
<p>
<b>SetInfo</b> is always an explicit call, never called implicitly. </p>
<p>
For more information, see <b>IADs</b>. </p>

<p>
<a name="_ds_get_and_put_methods"></a>Examples of get and put methods for properties for Automation clients include the following:
<dl>
<dt>
<b>MyObject.xxxx </b></dt>
<dd>
Get by using <i>object.property</i> syntax on the right side of an assignment operation (=) or in an expression. Put by using <i>object.property</i> syntax on the left side of an assignment operator (=). </dd>
<dt>
<b>Value=(User.FullName)</b></dt>
<dd>
<b>Get</b> by passing the name of the property. Use <b>GetEx</b> for multivalued properties. </dd>
<dt>
<b>MyObject.Put("Property_X", value)</b></dt>
<dd>
<b>Put</b> by passing the name of the property. Use <b>PutEx</b> for multivalued properties. 
</dd>
</dl>
<p>
The following Automation example shows both styles of setting the <b>IADsUser::FullName</b> property in the cache. </p>
<pre><code>' Visual Basic example
Dim User as IADsUser
Dim MyObject as IADs
Dim Name as Variant

Set FullName as "John Q. Public"
Set User = GetObject("WinNT://MSFT/Users/John")

//Set using IADsUser::put_Fullname property method
User.FullName = Name

//Set using IADs::PutMethod
User.Put("FullName",Name)
 </code></pre>

<p>
<a name="_ds_get_methods"></a>Examples of get methods for properties for non-Automation clients include the following:
<dl>
<dt>
<b>IADs<i>XXXX</i>::get_<i>xxxx</i></b></dt>
<dd>
An interface's compile-time property method beginning with <b>get_</b> on a named property. </dd>
<dt>
<b>IADs::Get("Property_X")</b></dt>
<dd>
A runtime get by property name. 
</dd>
</dl>
<pre><code>// For non-Automation clients
IADsUser     *pUser; 
IADs         *PObject;
ADsGetObject(
     TEXT("WinNT://MSFT/Users/John"), 
     IID_IADsUser, 
     (void**) &amp;pUser);
// Set using IADsUser::put_FullName property method
pUser-&gt;put_FullName(TEXT("John Q. Public"));
// Set using IADs::Put method
pUser-&gt;QueryInterface(IID_IADs,(void **) &amp;pObject);
pObject-&gt;Put("FullName",TEXT("John Q. Public"))
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

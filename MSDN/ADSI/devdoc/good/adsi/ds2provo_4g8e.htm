<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Core Implementation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_ds_core_implementation"></a>Core Implementation</h2>
<p>
An ADSI provider supports the following features. 
<ul>
<li>
ADsPath strings in both COM and URL format. By definition, an Active Directory object can always be retrieved using an ADsPath. For the ADsPath syntax definition, see <a href="ds2cli_2igj.htm"><b>ADsPaths</b></a>. Providers support whatever syntax their directory service requires using the <b>ParseDisplayName</b> implementation described in the next bulleted item.  </li>
<li>
A top-level Namespace object that supports <b>IParseDisplayName::ParseDisplayName </b>and <a href="ds2_if_0e5w.htm"><b>IADsOpenDSObject</b></a>. This object contains the root nodes for this namespace. Part of the <b>ParseDisplayName</b> implementation must include a parser that checks for syntax errors for its own namespace. This object must also support <b>IADs</b> and <a href="ds2_if_0e5w.htm"><b>IADsOpenDSObject</b></a>. </li>
<li>
The <a href="ds2_if_74s3.htm"><b>IADs</b></a> interface. This includes a simple <a href="ds2cli_65et.htm"><b>property cache</b></a> implementation through <b>IADs::GetInfo</b> and <b>IADs::SetInfo</b>. Operations that get or set object properties occur in cached mode. Cache values are written to the underlying directory store during <b>SetInfo</b>. An ADSI method, however, is not cached, but executes immediately. </li>
<li>
The <a href="ds2_if_6ptg.htm"><b>IADsPropertyList</b></a><b>, <a href="ds2_if_0x6h.htm">IADsPropertyEntry</a></b> and <a href="ds2_if_0a05.htm"><b>IADsPropertyValue</b></a> interfaces for directly accessing and enumerating the properties in the <b>property cache</b>. For directory services that do not expose a schema, this interface allows you to manipulate the properties of an object. </li>
<li>
The <a href="ds2_if_0blg.htm"><b>IDirectoryObject</b></a> interface for non-Automation clients. This uses on-the-wire protocol for maximum performance and bypasses the property cache. </li>
<li>
The <a href="ds2_if_325u.htm"><b>IADsContainer</b></a> interface. Every Active Directory object has a parent container that controls its lifetime. Note that on ADs container objects, GetInfo affects only the container properties and not its contents. SetInfo on ADs container objects affects only newly created objects and the container properties, and does not affect objects that already exist within the container.</li>
<li>
The <b>IDispatch</b> interface. This is the Automation interface for languages like Java and Visual Basic that do not use compile-time binding. Related to this is the type library information that a provider must supply. For more information, see <a href="ds2prov_0c4z.htm"><b>Implementation Issues for ADSI Providers</b></a>.</li>
<li>
A schema class container object and the appropriate syntax, property, and schema class objects that support <a href="ds2_if_1i2g.htm"><b>IADsSyntax</b></a>, <a href="ds2_if_0rnd.htm"><b>IADsProperty</b></a>, and <a href="ds2_if_89tf.htm"><b>IADsClass</b></a> respectively. At a minimum, each root node must contain its own schema class container object. </li>
<li>
The <a href="ds2_if_4703.htm"><b>IADsMembers</b></a> interface, if any supported attributes are collections of ADSI objects, such as security groups. </li>
<li>
The <a href="ds2_if_2zzi.htm"><b>IADsCollection</b></a> interface, if any supported attributes are collections of the same directory element type with <b>Add</b> and <b>Remove</b> capability. </li>
<li>
The <b>IEnumXXXX</b> enumeration support for all specific enumerator objects.</li>
<li>
Routines to map syntax and convert native data to the VARIANT data type. <font face="Symbol">·</font>Follow ADSI conventions for provider-supplied ADSI objects. Include help files and type libraries documenting the interface properties and methods. See </li>
<li>
Meta-Schema Interfaces, a minimal implementation required. Because you map your directory service names for the appropriate attributes to the ADSI property names when implementing the meta-interfaces, client applications can display directory service objects in a uniform manner across all directory services. </li>
<li>
As with any COM implementation, you must return E_NOTIMPL for unimplemented interfaces and E_ADS_PROPERTY_NOT_SUPPORTED for unimplemented properties. For more information about dual interfaces and how they affect property implementation, see <a href="ds2provo_4iib.htm"><b>Dual Interfaces</b></a>. </li>
</ul>
<p>&nbsp;</p></body>
</HTML>

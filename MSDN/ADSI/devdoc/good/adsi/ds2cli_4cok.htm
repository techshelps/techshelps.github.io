<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Binding to an Object</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_ds_binding_to_an_object"></a>Binding to an Object</h2>

<p>
<a name="_ds_binding_to_a_directory_object"></a>Binding to a directory object through ADSI is simple. In languages that support Automation, such as Java or Visual Basic®, use the GetObject function with a fully specified ADsPath.</p>
<pre><code>Binding to user objects from different directory services
Dim MyObject1 As IADsUser
Dim MyObject2 As IADsUser
Set MyObject1 = GetObject("WinNT://MyDomain/MyAccount,User")
Set MyObject2 = GetObject("LDAP://MyLdapSvr/O=Internet/DC=Redmond/CN=MarySmith")
 </code></pre>
<p>
In C or C++, the binding looks very similar:</p>
<pre><code>IADsUser *pMyObject1, *pMyObject2;
ADsGetObject(TEXT("WinNT://MyDomain/MyAccount,User"),
              IID_IADsUser,
              (void) ** &amp;pMyObject1);
ADsGetObject(TEXT(
              "LDAP://MyLdapSvr/O=Internet/DC=Redmond/CN=MarySmith"),
              IID_IADsUser,
              (void) ** &amp;pMyObject2);
 </code></pre>
<p>
In each case, the client application calls either ADsGetObject or Visual Basic® GetObject to obtain a pointer or a reference respectively, to an interface on an ADSI object that represents an end-user. </p>
<p>
ADSI uses the ProgID in the first part of the string to load the appropriate ADSI provider DLL to process the bind request. </p>
<p>
When credentials need to be established when passing a bind request to a directory service, you can use <a href="ds2_func_0bp0.htm"><b>ADsOpenObject</b></a>. In Automation environments, the Namespace object supports the <a href="ds2_if_0e5w.htm"><b>IADsOpenDSObject</b></a> interface to supply the same functionality. </p>
<p>
The following Visual Basic code fragment supplies credentials when binding to an object: </p>
<pre><code>Dim MyObject as Object
Dim MyNamespace as IADsOpenDSObject
 
Set MyNamespace = GetObject("LDAP:")
Set MyObject = MyNamespace.OpenDSObject("LDAP://MyLdapSvr/O=Internet",
       "Mary Smith","LandOfOz",0x1);
 </code></pre>
<p>
C and C++ programmers can use <b>ADsOpenObject</b> as shown below:</p>
<p>
<code>hr = ADsOpenObject(</code></p>
<p>
<code>LDAP://MyLdapSvr/O=Internet,</code></p>
<p>
<code>"Mary Smith",</code></p>
<p>
<code>"LandOfOz",</code></p>
<p>
<code>0x1,</code></p>
<p>
<code>IID_IADs,</code></p>
<p>
<code>(void **)&amp;pIADs</code></p>
<p>
<code>);</code></p>
<p>
For more information, see <a href="ds2prov_04ry.htm"><b>ADSI Component Interaction</b></a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Directory Definition</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ds_directory_definition"></a>Directory Definition</h1>
<p>
The example provider component has a relatively simple directory design to clarify the relationship of the components with each other and to show the minimum requirements necessary to be an ADSI provider. </p>
<p>
The "directory" for the example provider component consists of two root nodes: "Seattle" and "Toronto"<i>. </i>Seattle contains two more sublevels, "Bellevue" and "Redmond". Each of those entries contains several user accounts. The "Toronto" entry has no further sublevels, but directly contains several user accounts. The following figure shows these two root nodes connected with a network. </p>
<p>
<img src="images/dssmdo.gif" border=0></p>
<p>
<b>ADSI Example Provider Component Directory </b></p>
<p>
In hierarchical terms, the Namespace node contains "Seattle" and "Toronto". "Seattle" contains "Bellevue" and "Redmond". "Bellevue" and "Redmond" each contain a set of user accounts. "Toronto" directly contains the user accounts with no intermediate organizational nodes.</p>
<p>
The example provider component represents this structure with only two Active Directory object types: a container object and a leaf object. "Seattle", "Toronto", "Bellevue", and "Redmond" are container objects and each user account is a leaf object.</p>
<p>
The example provider component creates a schema class called "Organizational Unit" for a container object type and a schema class called "User" for a user account. </p>
<p>
The properties for each schema class, their methods, and the rules that govern the containment relationships for these objects are all defined in <a href="ds2samp_2ol0.htm"><b>Schema Management</b></a>. </p>
<p>&nbsp;</p></body>
</HTML>

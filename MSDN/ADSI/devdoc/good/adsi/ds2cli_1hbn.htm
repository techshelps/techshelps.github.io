<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADSI for Clients</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ds_adsi_for_clients"></a>ADSI for Clients</h1>
<p>
Active Directory Service Interfaces are COM interfaces that isolate client applications from underlying network specific API calls to a directory service. Client applications that use these interfaces or the COM Automation objects that expose <b>IADs</b> and the other Active Directory Service interfaces benefit from the layered insulation of the underlying directory services. </p>
<p>
You can write ADSI client applications in many languages, For the majority of administrative tasks, ADSI defines interfaces and objects accessible from Automation-compliant languages like Microsoft® Visual Basic®, Microsoft® Visual Basic® Scripting Edition (VBScript), and Java to the more performance and efficiency-conscious languages such as C and C++. </p>
<p>
Smooth integration with Active Server Pages and VBScript make it easy to write Internet applications that access directory services. For integration with OLE DB applications, ADSI supplies an OLE DB provider by supporting a subset of the OLE DB query interfaces. For Internet applications, using scripting in .asp files (Active Server Pages) can create and manipulate ADSI objects on the server and display the results in a Web page. In Microsoft® Management Console, directory-service administration snap-ins can use ADSI to find directory services of interest. In short, Active Directory Service Interfaces can provide access to a broad and diverse set of directory services — including those not yet built.</p>
<p>
For tasks that require high performance and low overhead, the ADSI architecture defines low-level, non-Automation interfaces accessible from languages like C and C++ that are little more than COM wrappers for on-the-wire protocols to a directory service.</p>
<p>
Coding to the published interfaces allows your application to reach directory services for all installed ADSI providers and integrate the resulting information. Without recompiling or amending your code, your application can continue to access additional directory services on your network as new ADSI providers are installed. </p>
<p>
The following figure shows how ADSI fits into an application environment. Whether the application is written in Java, Visual Basic, C/C++, VBScript, Microsoft® JScript™, or as a web application using Active Server Pages, Active Directory Service Interfaces provide a clean and easy-to-use access to the underlying directory services without having to use the native network APIs.</p>
<p>
<img src="images/ds2layr.gif" border=0></p>
<p>
As shown in the preceding figure, non-Automation clients have access to all ADSI interfaces, including both pure COM interfaces with the naming convention <b>IDirectory<i>XXX</i></b> and Automation COM interfaces with the naming convention <b>IADs<i>XXX</i>. </b>Because clients predominantly request information from directory services, ADSI's flexible query model through OLE DB and <b>IDirectorySearch</b> is especially powerful. </p>
<p>&nbsp;</p></body>
</HTML>

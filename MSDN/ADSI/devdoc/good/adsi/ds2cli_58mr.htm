<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using IADs</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_ds_using_iads"></a>Using IADs</h3>
<p>
In the ADSI environment, each element of a directory service is represented by an ADSI object, which is a Component Object Model (COM) object that supports the standard COM <b>IUnknown</b> interface as well as <b>IDispatch</b> and <a href="ds2_if_74s3.htm"><b>IADs</b></a>. <b>IADs</b> supplies the basic house-keeping functions for ADSI objects.</p>
<p>
<img src="images/ds2iads.gif" border=0></p>
<p>
The preceding figure shows a generic ADSI object supporting the fundamental interfaces <a href="ds2_if_74s3.htm"><b>IADs</b></a>, <a href="ds2_if_6ptg.htm"><b>IADsPropertyList</b></a>, <b>IUnknown</b>, <a href="ds2_if_0blg.htm"><b>IDirectoryObject</b></a>, and <b>IDispatch</b>. An ADSI object such as this manages data from the data store of the underlying directory service through the interfaces it supports. This data is known as the <i>properties</i> of the object, and the routines that retrieve and set these properties are known as <i>property methods</i>. Read-only properties have one property method that sets the value of the property. Read-write properties have two methods: one that sets the value and one that gets the value. Properties are implemented on each ADSI object using a <a href="ds2cli_65et.htm"><b>property cache</b></a>. <a href="ds2_if_65bn.htm"><b>IADs::get_ADsPath</b></a> and <b>IADs::put_ADsPath</b> are examples of property methods. Property methods are not apparent to Visual Basic and other Automation clients that allow direct references to the property. For example, Visual Basic refers to <b>IADS::ADsPath</b> directly using the Object<b>.ADsPath</b> syntax. For more information, see <a href="ds2_if_56yb.htm"><b>Interface Property Methods</b></a>. </p>
<p>
In addition, an ADSI object interacts with other ADSI objects and directly to a namespace through <i>methods. </i>Methods execute immediately Examples of methods include <a href="ds2_if_4tf3.htm"><b>IADs::SetInfo</b></a>, <a href="ds2_if_2a5r.htm"><b>IADs::GetInfo</b></a>, and <a href="ds2_if_5wkl.htm"><b>IADsPrintJobOperations::Pause</b></a>. </p>
<p>
Properties, property methods, and methods are all accessed through standard COM interfaces. </p>
<p>
An ADSI object is uniquely identified by its <a href="ds2cli_2igj.htm"><b>ADsPath</b></a>. An example of an ADsPath for the LDAP namespace is "LDAP://MyServer/OU=Seattle". For programmers familiar with COM monikers, this is conceptually similar to the COM moniker display name. </p>
<p>
Any ADSI object that contains other ADSI objects (an ADSI container object) also supports the <a href="ds2_if_325u.htm"><b>IADsContainer</b></a> interface, which provides methods and properties that manage the creation, deletion, and enumeration of ADSI objects that are contained by the object. The following figure shows an <a href="ds2_obj_9i5w.htm"><b>ADSI container object</b></a>. </p>
<p>
<img src="images/dsiadsc.gif" border=0></p>
<p>
Almost all ADSI objects are contained by other objects. The only ADSI object with no parent container is the top-level <a href="ds2_obj_6ab8.htm"><b>ADSI Namespaces object</b></a> ("ADS:"). </p>
<p>
The <a href="ds2_if_4tf3.htm"><b>IADs::SetInfo</b></a> method on a container object persistently stores the cached properties of the ADSI container object to storage in addition to any objects that have been created with the<a href="ds2_if_5d5x.htm"> <b>IADsContainer::Create</b></a> method. <a href="ds2_if_4c85.htm"><b>IADsContainer::Delete</b></a>does not affect the property cache but deletes the underlying namespace directory element represented by this object immediately. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property Cache</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_ds_property_cache"></a>Property Cache</h2>
<p>
The ADSI object model provides a client-side property cache for each ADSI object. An object's property cache enables client applications to set multiple properties in a single call. This capability is critical for clients written in languages, such as Microsoft Visual Basic, that have no native batching mechanism for setting properties. Without the ADSI property cache, such clients would have to hit the wire for each and every <b>put</b> call, with a predictable drop in performance.</p>
<p>
Think of the cache as a table in memory that contains the names and values of all an object's properties. When an object is created, its property cache is empty. Calling <b>IADs::GetInfo</b> loads the object's properties from the underlying directory service. If a property is multi-valued, use the <b>GetInfoEx</b> method instead. If the cache is empty, calling <b>get</b> or <b>get_<i>propertymethod </i></b>from a client written in C or C++, or calling  <b>.<i>propertymethod</i></b> from an Automation client,<b><i> </i></b>, forces an implicit <b>GetInfo</b>. Once the cache is filled, all <b>get</b> and <b>put</b> calls work on the contents of the cache only. You change the property values in the tables as necessary for your application using <b>IADs</b> methods or <b>IADsPropertyList</b> methods, then write the changes back out to the directory service when they are in a consistent state using <b>SetInfo</b>. After the <b>SetInfo </b>is called, the cache values remain until they are explicitly refreshed with a <b>GetInfo</b>. The following figure shows the different methods used to operate on the cache. </p>
<p>
<img src="images/ds2propc.gif" border=0></p>
<p>
As shown in the preceding figure, while the property values are in the cache, you can access them in two ways:</p>
<p>
<a href="ds2cli_7k6d.htm"><b>Accessing an Individual Property in the Property Cache</b></a></p>
<p>
<a href="ds2cli_14o5.htm"><b>Accessing All Properties in the Property Cache</b></a> </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

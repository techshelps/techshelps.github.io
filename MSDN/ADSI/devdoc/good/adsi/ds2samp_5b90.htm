<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Binding to an Active Directory Object</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ds_binding_to_an_active_directory_object"></a>Binding to an Active Directory Object</h1>
<p>
The most common way binding to an Active Directory object, by using the GetObject function, happens between an ADSI client and an ADSI provider and is also the easiest way to show how the provider component receives requests and services them. Both the ADSI API function <a href="ds2_func_1a2c.htm"><b>ADsGetObject</b></a> or the Visual Basic <b>GetObject</b> follow the same steps. </p>
<p>
For this example, assume the ADSI client is an ADSI viewer application that has received the ADsPath "Sample://Seattle/Redmond/AnneA" from its user interface (1). The following figure details the sequence of events by numbering the flow arrows.</p>
<p>
<img src="images/dscsex.gif" border=0></p>
<p>
<b>ADSI Components: Detailed View</b></p>
<p>
In the preceding figure, the client initiates the request for an interface pointer on the Active Directory object represented by the ADsPath "Sample://Seattle/Redmond/AnneA" from the ADSI services (2). The services software, during its initialization, populated a table of installed provider programmatic identifiers (ProgIDs) from the registry ("LDAP:","Sample:", "WinNT:","NDS:", etc.) and paired them with the matching CLSIDs, which identify the appropriate software module. </p>
<p>
The ADSI server makes sure the ProgID, in this case "Sample:", exists in the ADsPath. It then creates a bind context to optimize further references to this object, and calls the standard COM function <b>MkParseDisplayName </b>to create a COM moniker that can be used to find and bind to the object representing user "AnneA". </p>
<p>
(In the following discussion, the file names of the example provider component source code are included in parentheses where appropriate.)</p>
<p>
As in other COM server implementations, <b>MkParseDisplayName</b> examines the ProgID, and looks up the proper CLSID in the registry (3) to find the corresponding provider-supplied class factory code (cprovcf.cpp) in the appropriate provider implementation (4). This code creates an initial object that implements the <b>IParseDisplayName::ParseDisplayName</b> method (cprov.cpp). The provider's implementation of <b>ParseDisplayName</b> resolves the path name in the provider's own namespace. This eventually calls ADsObject and invokes the parser supplied with the provider component (parse.cpp)<b> </b>to check that the ADsPath is syntactically correct for this namespace.</p>
<p>
GetObject then determines if the object being requested is a top-level object, a schema object, or some other type of object. If either of the first two, that type of schema class object is created and the appropriate interface pointer retrieved. Otherwise the Sample directory path is created from the ADsPath (for example, "\Seattle\Redmond\AnneA", but in a different directory service it might have had to be "\OU=Seattle\OU=Redmond\CN=AnneA") and control passes to SampleDSOpenObject which opens the object in the example data storage and also retrieves its object type (in this case, "User") (5). </p>
<p>
With the information gathered so far, a new object is created (6) to represent the item described by the ADsPath, and a pointer to the <b>IUnknown</b> interface on that object is retrieved. In this case, a generic Active Directory object is created that supports the <b>IUnknown </b>and <a href="ds2_if_74s3.htm"><b>IADs</b></a> methods (cgenobj.cpp, core.cpp). The CSampleDSGenObject::AllocateGenObject routine reads the type library information to create the proper dispatch entries for these new objects in order to support <b>IDispatch</b>.</p>
<p>
Wrapping this interface pointer into a moniker completes the ResolvePathName (cprov.cpp) function and parsing the display name is done. </p>
<p>
All the COM objects created during this process are cached for performance reasons and managed through the binding context. This improves performance for other operations on the same object that immediately follows the moniker binding.</p>
<p>
This well-formed Active Directory object is now queried for the interface identifier requested for the initial <a href="ds2_func_1a2c.htm"><b>ADsGetObject</b></a> call and a pointer to that interface is retrieved (7) and passed back through the ADSI server to the client (8). From then on, the client works directly with the provider component through the interface methods until the initial request is satisfied (9). </p>
<p>
Further requests for information about this object from the client usually take the form of requests for property gets and puts, all of which are optimized through the provider's implementation of a property cache (cprops.cpp). Intelligently packing and unpacking data (often including copying and freeing structures and strings) between the native data types on the example provider component's operating system and the Automation VARIANT type supported by ADSI takes place before the properties are loaded into the cache (smpoper.cpp).</p>
<p>
The example provider component is designed so that the actual calls to the operating system are logically isolated from the rest of the provider component, creating software that's easily portable to more than one operating system (RegDSAPI.cpp). </p>
<p>&nbsp;</p></body>
</HTML>

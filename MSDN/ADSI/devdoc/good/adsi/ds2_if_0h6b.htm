<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IADsUser Property Methods</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_ds_iadsuser_property_methods"></a>IADsUser Property Methods</h3>
<p>
Property methods take the form of either <b>get_&lt;property&gt;</b> or <b>put_&lt;property&gt;</b>. The property methods of the <b>IADsUser</b> interface get or set the properties described below. For more information, see <a href="ds2_if_56yb.htm"><b>Interface Property Methods</b></a>.</p>
<h4>Properties in Vtable Order</h4>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=41%>Property</th>
<th align=left width=16%>Access</th>
<th align=left width=43%>Method Prototype</th>
</tr>
<tr valign=top>
<td colspan=3 width=100%></td>
</tr>
<tr valign=top>
<td width=41%><b>AccountDisabled</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_AccountDisabled <br>
([out] BOOLEAN *<i>pbAccountDisabled</i>);<p>
HRESULT put_AccountDisabled <br>
([in] BOOLEAN <i>bAccountDisabled</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>AccountExpirationDate</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_AccountExpirationDate <br>
([out] DATE *<i>pdateAccountExpirationDate</i>);<p>
HRESULT put_AccountExpirationDate <br>
([in] DATE <i>dateAccountExpirationDate</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>BadLoginAddress</b></td>
<th align=left width=16%>R/O</th>
<th align=left width=43%>HRESULT get_BadLoginAddress <br>
([out] BSTR *<i>pbstrBadLoginAddress</i>);</th>
</tr>
<tr valign=top>
<td width=41%><b>BadLoginCount</b></td>
<th align=left width=16%>R/O</th>
<th align=left width=43%>HRESULT get_BadLoginCount <br>
([out] LONG *<i>plBadLoginCount</i>);</th>
</tr>
<tr valign=top>
<td width=41%><b>Department</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_Department <br>
([out] BSTR *<i>pbstrDepartment</i>);<p>
HRESULT put_Department <br>
([in] BSTR <i>bstrDepartment</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>DepartmentNumber</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_DepartmentNumber <br>
([out] BSTR *<i>pbstrDepartmentNumber</i>);<p>
HRESULT put_DepartmentNumber <br>
([in] BSTR <i>bstrDepartmentNumber</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>Description</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_Description<br>
([out] BSTR *<i>pbstrDescription</i>);<p>
HRESULT put_Description <br>
([in] BSTR <i>bstrDescription</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>Division</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_Division <br>
([out] BSTR *<i>pbstrDivision</i>);<p>
HRESULT put_Division <br>
([in] BSTR <i>bstrDivision</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>EmailAddress</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_EmailAddress<br>
([out] BSTR *<i>pbstrEmailAddress</i>);<p>
HRESULT put_EmailAddress<br>
([in] BSTR <i>bstrEmailAddress</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>EmployeeID</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_EmployeeID <br>
([out] BSTR *<i>pbstrEmployeeID</i>);<p>
HRESULT put_EmployeeID <br>
([in] BSTR <i>bstrEmployeeID</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>FaxNumber</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_FaxNumber <br>
([out] VARIANT *<i>pvarFaxNumber</i>);<p>
HRESULT put_FaxNumber <br>
([in] VARIANT <i>varFaxNumber</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>FirstName</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_FirstName <br>
([out] BSTR *<i>pbstrFirstName</i>);<p>
HRESULT put_FirstName <br>
([in] BSTR <i>bstrFirstName</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>FullName</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_FullName <br>
([out] BSTR *<i>pbstrFullName</i>);<p>
HRESULT put_FullName <br>
([in] BSTR <i>bstrFullName</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>GraceLoginsAllowed</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_GraceLoginsAllowed <br>
([out] LONG *<i>plGraceLoginsAllowed</i>);<p>
HRESULT put_GraceLoginsAllowed <br>
([in] LONG <i>lGraceLoginsAllowed</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>GraceLoginsRemaining</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_GraceLoginsRemaining <br>
([out] LONG *<i>plGraceLoginsRemaining</i>);<p>
HRESULT put_GraceLoginsRemaining <br>
([in] LONG <i>lGraceLoginsRemaining</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>HomeDirectory</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_HomeDirectory<br>
([out] BSTR *<i>pbstrHomeDirectory</i>);<p>
HRESULT put_HomeDirectory<br>
([in] BSTR <i>bstrHomeDirectory</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>HomePage</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_HomePage<br>
([out] BSTR *<i>pbstrHomePage</i>);<p>
HRESULT put_HomePage<br>
([in] BSTR <i>bstrHomePage</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>IsAccountLocked</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_IsAccountLocked <br>
([out] BOOLEAN *<i>pbIsAccountLocked</i>);<p>
HRESULT put_IsAccountLocked <br>
([in] BOOLEAN <i>bIsAccountLocked</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>Languages</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_Languages<br>
([out] VARIANT *<i>pvLanguages</i>);<p>
HRESULT put_Languages<br>
([in] VARIANT <i>vLanguages</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>LastFailedLogin</b></td>
<th align=left width=16%>R/O</th>
<th align=left width=43%>HRESULT get_LastFailedLogin <br>
([out] DATE *<i>pdateLastFailedLogin</i>);</th>
</tr>
<tr valign=top>
<td width=41%><b>LastLogin</b></td>
<th align=left width=16%>R/O</th>
<th align=left width=43%>HRESULT get_LastLogin <br>
([out] DATE *<i>pdateLastLogin</i>);</th>
</tr>
<tr valign=top>
<td width=41%><b>LastLogoff</b></td>
<th align=left width=16%>R/O</th>
<th align=left width=43%>HRESULT get_LastLogoff <br>
([out] DATE *<i>pdateLastLogoff</i>);</th>
</tr>
<tr valign=top>
<td width=41%><b>LastName</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_LastName <br>
([out] BSTR *<i>pbstrLastName</i>);<p>
HRESULT put_LastName <br>
([in] BSTR <i>bstrLastName</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>LoginHours</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_LoginHours <br>
([out] VARIANT *<i>pvLoginHours</i>);<p>
HRESULT put_LoginHours <br>
([in] VARIANT <i>vLoginHours</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>LoginScript</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_LoginScript<br>
([out] BSTR *<i>pbstrLoginScript</i>);<p>
HRESULT put_LoginScript<br>
([in] BSTR <i>bstrLoginScript</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>LoginWorkstations</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_LoginWorkstations <br>
([out] VARIANT *<i>pvLoginWorkstations</i>);<p>
HRESULT put_LoginWorkstations <br>
([in] VARIANT <i>vLoginWorkstations</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>Manager</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_Manager <br>
([out] BSTR *<i>pbstrManager</i>);<p>
HRESULT put_Manager <br>
([in] BSTR <i>bstrManager</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>MaxLogins</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_MaxLogins <br>
([out] LONG *<i>plMaxLogins</i>);<p>
HRESULT put_MaxLogins <br>
([in] LONG <i>lMaxLogins</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>MaxStorage</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_MaxStorage <br>
([out] LONG *<i>plMaxStorage</i>);<p>
HRESULT put_MaxStorage <br>
([in] LONG <i>lMaxStorage</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>NamePrefix</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_NamePrefix <br>
([out] BSTR *<i>pbstrNamePrefix</i>);<p>
HRESULT put_NamePrefix <br>
([in] BSTR <i>bstrNamePrefix</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>NameSuffix</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_NameSuffix <br>
([out] BSTR *<i>pbstrNameSuffix</i>);<p>
HRESULT put_NameSuffix <br>
([in] BSTR <i>bstrNameSuffix</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>OfficeLocations</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_OfficeLocations <br>
([out] VARIANT *<i>pvOfficeLocations</i>);<p>
HRESULT put_OfficeLocations <br>
([in] VARIANT <i>vOfficeLocations</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>OtherName</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_OtherName <br>
([out] BSTR *<i>pbstrOtherName</i>);<p>
HRESULT put_OtherName <br>
([in] BSTR <i>bstrOtherName</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>PasswordExpirationDate</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_PasswordExpirationDate <br>
([out] DATE *<i>pdatePasswordExpirationDate</i>);<p>
HRESULT put_PasswordExpirationDate <br>
([in] DATE <i>datePasswordExpirationDate</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>PasswordLastChanged</b></td>
<th align=left width=16%>R/O</th>
<th align=left width=43%>HRESULT get_PasswordLastChanged <br>
([out] DATE *<i>pdatePasswordLastChanged</i>);</th>
</tr>
<tr valign=top>
<td width=41%><b>PasswordMinimumLength</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_PasswordMinimumLength <br>
([out] LONG *<i>plPasswordMinimumLength</i>);<p>
HRESULT put_PasswordMinimumLength <br>
([in] LONG <i>lPasswordMinimumLength</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>PasswordRequired</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_PasswordRequired <br>
([out] BOOLEAN *<i>plPasswordRequired</i>);<p>
HRESULT put_PasswordRequired <br>
([in] BOOLEAN <i>lPasswordRequired</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>Picture</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_Picture <br>
([out] VARIANT *<i>pvarPicture</i>);<p>
HRESULT put_Picture <br>
([in] VARIANT <i>varPicture</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>PostalAddresses</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_PostalAddresses <br>
([out] VARIANT *<i>pvPostalAddresses</i>);<p>
HRESULT put_PostalAddresses <br>
([in] VARIANT <i>vPostalAddresses</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>PostalCodes</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_PostalCodes <br>
([out] VARIANT *<i>pvPostalCodes</i>);<p>
HRESULT put_PostalCodes <br>
([in] VARIANT <i>vPostalCodes</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>Profile</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_Profile<br>
([out] BSTR *<i>pbstrProfile</i>);<p>
HRESULT put_Profile<br>
([in] BSTR <i>bstrProfile</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>RequireUniquePassword</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_RequireUniquePassword <br>
([out] BOOLEAN *<i>plRequireUniquePassword</i>);<p>
HRESULT put_RequireUniquePassword <br>
([in] BOOLEAN <i>lRequireUniquePassword</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>SeeAlso</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_SeeAlso <br>
([out] VARIANT *<i>pvSeeAlso</i>);<p>
HRESULT put_SeeAlso <br>
([in] VARIANT <i>vSeeAlso</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>TelephoneHome</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_TelephoneHome <br>
([out] VARIANT *<i>pvarTelephoneHome</i>);<p>
HRESULT put_TelephoneHome <br>
([in] VARIANT <i>varTelephoneHome</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>TelephoneMobile</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_TelephoneMobile <br>
([out] VARIANT *<i>pvarTelephoneMobile </i>);<p>
HRESULT put_TelephoneMobile <br>
([in] VARIANT <i>varTelephoneMobile </i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>TelephoneNumber</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_TelephoneNumber <br>
([out] VARIANT *<i>pvarTelephoneNumber</i>);<p>
HRESULT put_TelephoneNumber <br>
([in] VARIANT <i>varTelephoneNumber</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>TelephonePager</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_TelephonePager <br>
([out] VARIANT *<i>pvarTelephonePager</i>);<p>
HRESULT put_TelephonePager <br>
([in] VARIANT <i>varTelephonePager</i>);</p>
</th>
</tr>
<tr valign=top>
<td width=41%><b>Title</b></td>
<th align=left width=16%>R/W</th>
<th align=left width=43%>HRESULT get_Title <br>
([out] BSTR *<i>pbstrTitle</i>);<p>
HRESULT put_Title <br>
([in] BSTR <i>bstrTitle</i>);</p>
</th>
</tr>
</table><br>
<h4>Property Descriptions</h4>
<dl>
<dt>
<b>AccountDisabled</b></dt>
<dd>
Gets and sets if the account is or should be disabled.</dd>
<dt>
<b>AccountExpirationDate</b></dt>
<dd>
Gets and sets the date and time after which the user cannot log in.</dd>
<dt>
<b>BadLoginAddress</b></dt>
<dd>
Gets the address of last node that is considered an Intruder (kept if Intruder detection is active).</dd>
<dt>
<b>BadLoginCount</b></dt>
<dd>
If Intruder detection is active, gets the number of bad logon attempts since the last reset time.</dd>
<dt>
<b>Department</b></dt>
<dd>
Gets and sets the department (OU or Organizational Unit) within the company to which the user belongs.</dd>
<dt>
<b>DepartmentNumber</b></dt>
<dd>
Gets and sets department's charge number.</dd>
<dt>
<b>Description</b></dt>
<dd>
Gets and sets the text description of the user.</dd>
<dt>
<b>Division</b></dt>
<dd>
Gets and sets the division within a company (Organization).</dd>
<dt>
<b>EmailAddress</b></dt>
<dd>
Gets and sets the user's e-mail address.</dd>
<dt>
<b>EmployeeID</b></dt>
<dd>
Gets and sets the user's employee ID.</dd>
<dt>
<b>FaxNumber</b></dt>
<dd>
Gets and sets the user's fax number.</dd>
<dt>
<b>FirstName</b></dt>
<dd>
Gets and sets the user's first name.</dd>
<dt>
<b>FullName</b></dt>
<dd>
Gets and sets the user's full name.</dd>
<dt>
<b>GraceLoginsAllowed</b></dt>
<dd>
Gets and sets the number of times the user can log on after the password has expired.</dd>
<dt>
<b>GraceLoginsRemaining</b></dt>
<dd>
Gets and sets how many grace logons are left before the account is locked.</dd>
<dt>
<b>HomeDirectory</b></dt>
<dd>
Gets and sets the user's home directory.</dd>
<dt>
<b>HomePage</b></dt>
<dd>
Gets and sets a string containing the URL of a home page for this user.</dd>
<dt>
<b>IsAccountLocked</b></dt>
<dd>
Gets and sets if account is locked because of intruder detection.</dd>
<dt>
<b>Languages</b></dt>
<dd>
Gets and sets an array of BSTR language names for the user.</dd>
<dt>
<b>LastName</b></dt>
<dd>
Gets and sets the user's last name.</dd>
<dt>
<b>LoginHours</b></dt>
<dd>
Gets and sets time periods for each day of the week during which logons are permitted for the user. Represented as a table of Booleans for the week, each indicating if that time slot is a valid logon time.</dd>
<dt>
<b>LoginScript</b></dt>
<dd>
Gets and sets the logon script path.</dd>
<dt>
<b>LoginWorkstations</b></dt>
<dd>
Gets and sets an array of BSTR addresses (or names) of workstations and net numbers at which the user can log on.</dd>
<dt>
<b>Manager</b></dt>
<dd>
Gets and sets the user's manager.</dd>
<dt>
<b>MaxLogins</b></dt>
<dd>
Gets and sets the number of simultaneous login sessions allowed.</dd>
<dt>
<b>MaxStorage</b></dt>
<dd>
Gets and sets the maximum amount of disk space a user can have. Expressed in Kbytes.</dd>
<dt>
<b>NamePrefix</b></dt>
<dd>
Prefix for the user's name, for example "Ms.", "Hon."</dd>
<dt>
<b>NameSuffix</b></dt>
<dd>
Suffix for the user's name, for example "Jr.", "III".</dd>
<dt>
<b>OfficeLocations</b></dt>
<dd>
Gets and sets an array of BSTR user locations.</dd>
<dt>
<b>OtherName</b></dt>
<dd>
Gets and sets an additional name (for example, middle name) for the user.</dd>
<dt>
<b>PasswordExpirationDate</b></dt>
<dd>
Gets and sets the date and time at which the password expires.</dd>
<dt>
<b>PasswordLastChanged</b></dt>
<dd>
Gets the last time the password was changed.</dd>
<dt>
<b>PasswordMinimumLength</b></dt>
<dd>
Gets and sets the minimum password length.</dd>
<dt>
<b>PasswordRequired</b></dt>
<dd>
Gets and sets if the password is required.</dd>
<dt>
<b>Picture</b></dt>
<dd>
Gets and sets an OctetString array of bytes that hold an image.</dd>
<dt>
<b>PostalAddresses</b></dt>
<dd>
Gets and sets an array of BSTR postal addresses, multivalued in the case where the user has more than one address. The internal format of a PostalAddress should comply with CCITT F.401 as referenced in X.521-1993, which defines a PostalAddress as six elements of 30 bytes each, holding a street address, (optionally) Post Office Box, city or locality, state or province, Postal Code, and Country. </dd>
<dt>
<b>PostalCodes</b></dt>
<dd>
Gets and sets an array of BSTR postal codes. Postal codes are positionally linked to the PostalAddresses array.</dd>
<dt>
<b>Profile</b></dt>
<dd>
Gets and sets the path of user's profile.</dd>
<dt>
<b>RequireUniquePassword</b></dt>
<dd>
Gets and sets if a new password must be different than those known through a password history.</dd>
<dt>
<b>SeeAlso</b></dt>
<dd>
Gets and sets an array of ADsPaths of other objects related to this user.</dd>
<dt>
<b>TelephoneHome</b></dt>
<dd>
Gets and sets an array of home telephone numbers for the user.</dd>
<dt>
<b>TelephoneMobile</b></dt>
<dd>
Gets and sets an array of mobile telephone numbers for the user. </dd>
<dt>
<b>TelephonePager</b></dt>
<dd>
Gets and sets an array of pager numbers for the user.</dd>
<dt>
<b>TelephoneNumber</b></dt>
<dd>
Gets and sets an array of (usually work-related) telephone numbers associated with the user.</dd>
<dt>
<b>Title</b></dt>
<dd>
Gets and sets the user's title.
</dd>
</dl>
<h4>See Also</h4>
<p>
<a href="ds2_obj_2p4k.htm"><b>ADSI User Object</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADSI SQL Grammar</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_ds_adsi_sql_grammar"></a>ADSI SQL Grammar</h3>
<p>
The following are examples of ADSI queries using SQL:</p>
<pre><code>Select ADsPath, Cn FROM 'LDAP://O=Internet/DC=COM/DC=MICROSOFT/DC=NTDEV' where objectClass='group' :  Select all group objects

Select AdsPath, cn, revision FROM 
'LDAP://nw01t1/O=Internet/DC=COM/DC=MICROSOFT/DC=NTDEV/dc=nwparent' where objectClass='*' AND revision &gt;= 10 : All user objects which have the property revision greater than or equal to 10

Select AdsPath, cn, revision FROM 'LDAP://nw01t1/O=Internet/DC=COM/DC=MICROSOFT/DC=NTDEV/dc=nwparent' where objectClass='*' AND (cn = 'a*' OR cn = 'b*'):  All Computer objects which have name attribute starting with "a" or "b"
</code></pre>

<p>
<a name="_ds_formal_grammar_for_the_sql_queries"></a>The formal grammar for the SQL queries is defined in the following way. (All keywords are case insensitive.)</p>
<p>
statement ::= select-statement</p>
<p>
select-statement ::= SELECT [ALL] select-list FROM table-identifier    [WHERE search-condition] </p>
<p>
select-list ::= * | select-sublist [, select-sublist]... </p>
<p>
select-sublist ::= column-identifier</p>
<p>
column-identifier ::= user-defined-name </p>
<p>
table-identifier ::= string-literal</p>
<p>
search-condition ::= boolean-term [OR search-condition]</p>
<p>
boolean-term ::= boolean-factor [AND boolean-term]</p>
<p>
boolean-factor ::= [NOT] boolean-primary</p>
<p>
boolean-primary ::= comparison-predicate |  (search-condition)</p>
<p>
comparison-predicate ::= column-identifier comparison-operator literal</p>
<p>
comparison-operator ::= &lt; | &gt; | &lt;= | &gt;= | = | &lt;&gt;</p>
<p>
user-defined-name ::= letter [letter | digit]...</p>
<p>
literal ::= string-literal | numeric-literal  | boolean-literal </p>
<p>
string-literal ::= '{character}...'    (Any sequence of characters delimited by quotes)</p>
<p>
numeric-literal ::= digits [fraction] [exponent]</p>
<p>
digits ::= digit [digit]...</p>
<p>
fraction ::= . digits </p>
<p>
exponent ::= E  digits</p>
<p>
boolean-literal ::= TRUE | FALSE | YES | NO | ON | OFF </p>
<p>&nbsp;</p></body>
</HTML>

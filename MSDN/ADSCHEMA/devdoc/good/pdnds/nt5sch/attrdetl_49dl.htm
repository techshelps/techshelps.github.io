<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading a Schema Attribute Entry</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_nt5sch_reading_a_schema_attribute_entry"></a>Reading a Schema Attribute Entry</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Attributes are defined by <a href="clasdetl_7orl.htm"><b>Attribute-Schema</b></a> objects. Like all other directory service (DS) objects, each Attribute-Schema object has attributes that define it. If this seems confusing, that's because it is. If you haven't done so, now would be a good time to look at the <a href="class_3wl5.htm"><b>Directory Service Terminology</b></a><b> </b>section. </p>
<p>
An entry in the attribute table has the following attribute-value pairs (with one exception) that describe the Attribute. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=28%><a href="attrdetl_0yed.htm">Common-Name</a></td>
<td width=72%>Every object in the DS has a naming attribute from which its Relative Distinguished Name (RDN) is formed. The Naming Attribute for Attribute-Schema objects is Common-Name. The value assigned to Common-Name is the value that the Attribute-Schema will have as its Relative Distinguished Name, in this case "Access Permissions". </td>
</tr>
<tr valign=top>
<td width=28%><a href="attrdetl_8cv9.htm">Admin-Display-Name</a></td>
<td width=72%>The Common-Name of a given object might not be descriptive enough for use in administration tools. Admin-Display-Name is available for tools to use as a display name for an attribute when the naming attribute is not appropriate. </td>
</tr>
<tr valign=top>
<td width=28%><a href="attrdetl_6jhq.htm">Admin-Description</a></td>
<td width=72%>Can hold additional descriptive text for use by an administrative application. Generally this attribute is identical in value to the Admin-Display-Name. </td>
</tr>
<tr valign=top>
<td width=28%><a href="attrdetl_5r1v.htm">Object-Class</a></td>
<td width=72%>Every object in the DS is an instance of a known Object Class. Attribute definitions are all of Object Class Attribute-Schema. </td>
</tr>
<tr valign=top>
<td width=28%><a href="attrdetl_5fvo.htm">Attribute-ID</a></td>
<td width=72%>An OID uniquely identifying this attribute. OIDs are discussed in the DS Terminology section. </td>
</tr>
<tr valign=top>
<td width=28%><a href="attrdetl_4gc8.htm">OM-Syntax</a></td>
<td width=72%>Syntax of this attribute as defined by the XAPIA XOM (X/Open Object Model) specification. This model provides a relatively fine-grained definition of syntax. For example, there are distinct OM-Syntaxes to distinguish among several types of printable strings, based on the supported character set, whether case is significant, etc. XOM provides a further refinement in OM-Syntax - "Object". "Object" syntax uses a third attribute, OM-Object-Class (an OID), to uniquely identify the type of object referred to. </td>
</tr>
<tr valign=top>
<td width=28%><a href="attrdetl_3rnc.htm">Attribute-Syntax</a></td>
<td width=72%>Syntax of this attribute. Attribute-Syntax may be further refined by OM-Syntax. In practice, the Attribute-Syntaxes used in the NTDS each map onto a unique OM-Syntax, so further clarification is not needed. Attribute-Syntaxes that identify attributes with a complex structure have an OM-Syntax of 127, indicating an "object", and an OM-Object-Identifier that identifies the object in question. </td>
</tr>
<tr valign=top>
<td width=28%><a href="attrdetl_15pv.htm">OM-Object-Class</a></td>
<td width=72%>If the OM-Syntax of the attribute is 127, indicating an "object" syntax, the OM-Object-Class is an OID identifying the "object" syntax in question. </td>
</tr>
<tr valign=top>
<td width=28%><a href="attrdetl_43ad.htm">LDAP-Display-Name</a></td>
<td width=72%>The name of this attribute as known to the LDAP agent for the NTDS. This is the name LDAP clients must use to read or write this attribute. Note that <b>Active Directory</b> clients access the NTDS using LDAP, so these names are the names to use with Active Directory when reading and writing attributes via the Active Directory Get and Put methods.  </td>
</tr>
<tr valign=top>
<td width=28%>Single- or Multi-Valued</td>
<td width=72%><b>The Exception. </b>Stored in the DS as Single-Valued=TRUE or FALSE, the Schema Browser reports this as "single-valued." or "multi-valued" rather than as an attribute-value pair. Attributes in the NTDS may be single-valued or multi-valued. A multi-valued attribute can contain multiple values, all of uniform syntax. </td>
</tr>
<tr valign=top>
<td width=28%><a href="attrdetl_5pbt.htm">System-Only</a></td>
<td width=72%>System-only properties can only be changed by the Directory System Agent (DSA). System-only properties are those that Windows NT and the NTDS depend on for normal operations. For example, Attribute-ID and Governs-ID OIDs in the schema are system-only properties.  </td>
</tr>
<tr valign=top>
<td width=28%><a href="attrdetl_0f50.htm">Schema-ID-GUID</a></td>
<td width=72%>A Globally Unique Identifier (GUID) that uniquely identifies all classes and attributes in the schema. Unlike OIDs, which are issued by a central authority, GUIDs are generated by a special algorithm. GUIDs are fixed length and can be dealt with more efficiently than OIDs. The NTDS uses OIDs for interoperability with external clients and GUIDs internally for efficiency. </td>
</tr>
<tr valign=top>
<td width=28%>Comment</td>
<td width=72%>A brief explanation of what the attribute is used for. This is not stored in the schema, it is stored in the schema source and included in the documentation. </td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

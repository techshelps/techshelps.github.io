<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Directory Service Terminology</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_nt5sch_directory_service_terminology"></a>Directory Service Terminology</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> 
<dl>
<dt>
Attribute</dt>
<dd>
Attributes, or properties, are data items used to describe the objects that are represented by the classes definedin the schema. Attributes are defined in the schema separately from the classes; this allows a single attribute definition to be applied to many classes. For example, "Description" is an attribute that can be applied to any class in the schema. The "Description" attribute is defined once in the Schema, assuring consistency, rather than having a different definition for "Description" of a User and "Description" of a Printer. </dd>
<dt>
Attribute Instance</dt>
<dd>
An occurence of an attribute that is defined in the Schema. This term is used to distinguish betwen the definition of an attribute and a discrete occurance of the attribute. For example, storing a User object for "James Smith" with the common-name attribute set to "James Smith" creates an <b>instance</b> of common-name. </dd>
<dt>
Class</dt>
<dd>
A Class is a formal description of a discrete, identifiable type of object that can be stored in the DS. For example, User, Print-Queue, and Group are all <i>classes</i>. </dd>
<dt>
Class Instance</dt>
<dd>
An occurence of an Class that is defined in the Schema. This term is used to distinguish betwen the definition of a class and a discrete occurance of the class. For example, storing a User object for "James Smith" in the DS creates an instance of User. </dd>
<dt>
Content Rules</dt>
<dd>
Content rules define the possible contents of the class instances stored in the DS. In the NTDS the content rules are completely expressed by the must-have and may-have attributes of the schema definitions for each class.</dd>
<dt>
Derivation</dt>
<dd>
See <i>Inheritance. </i></dd>
<dt>
Directory Information Tree</dt>
<dd>
The Directory Information Tree, or "DIT" is the directory itself, represented as a tree structure in which the vertices are the directory entries (class instances) and the connecting lines the parent-child relationships between the entries. </dd>
<dt>
DIT </dt>
<dd>
See <i>Directory Information Tree</i>.</dd>
<dt>
Inheritance</dt>
<dd>
Inheritance is the ability to build new object classes from existing object classes. The new object is defined as a subclass of the parent object. The parent object becomes a superclass of the new object. A subclass inherits the attributes of the parent, including structure rules and content rules. </dd>
<dt>
<b>LDAP</b> </dt>
<dd>
The Lightweight Directory Access Protocol. The standard Internet communications protocol used to communicate with the NTDS. Both Version 2 and Version 3 of LDAP are supported. </dd>
<dt>
Object </dt>
<dd>
The unit of storage in the DS. DS "objects" are not to be confused with "COM Objects" or other Object-oriented system objects, which have an executable component and run-time behavior. DS Objects consist only of data. A DS object is defined by a Class-Schema object and a group of Attribute-Schema objects referenced by the Class-Schema object.Class-Schema and Attribute-Schema objects are themselves DS Objects, and have definitions in the schema like any other objects. See <i>Class</i>. </dd>
<dt>
Object Identifier </dt>
<dd>
Object Identifiers are unique numeric values, issued by various "Issuing Authorities" to uniquely identify data elements, syntaxes, and various other parts of distributed applications. OIDs are found in OSI applications, X.500 Directories, SNMP, and other applications where uniqueness is important. OIDs are based on a tree structure, in which a superior issuing authority (such as the ISO) allocates a "branch" of the tree to a subauthority, who in turn can allocate sub-branches. OIDs in the NTDS include some issued by the ISO for X.500 classes and attributes, and some issued by Microsoft. OID notation is a dotted string of numbers, for example 1.2.840.113556.1.5.4, which breaks down as follows: 

<table cellspacing=4 cols=3>
<tr valign=top>
<td width=10%>1</td>
<td width=30%>ISO</td>
<td width=60%>The root authority.  Issued 1.2 to ANSI</td>
</tr>
<tr valign=top>
<td width=10%>2</td>
<td width=30%>ANSI</td>
<td width=60%>Issued 1.2.840 to USA</td>
</tr>
<tr valign=top>
<td width=10%>840</td>
<td width=30%>USA</td>
<td width=60%>Issued 1.2.840.113556 to Microsoft</td>
</tr>
<tr valign=top>
<td width=10%>113<p>
556</p>
</td>
<td width=30%>Microsoft</td>
<td width=60%>Microsoft internally manages several OID branches under 1.2.840.113556</td>
</tr>
<tr valign=top>
<td width=10%>1</td>
<td width=30%>Microsoft DS</td>
<td width=60%></td>
</tr>
<tr valign=top>
<td width=10%>5</td>
<td width=30%>NTDS Classes</td>
<td width=60%></td>
</tr>
<tr valign=top>
<td width=10%>4</td>
<td width=30%>Built-in Domain</td>
<td width=60%></td>
</tr>
</table><br>

</dd>
<dt>
OID</dt>
<dd>
See <i>Object Identifier</i>. </dd>
<dt>
Schema</dt>
<dd>
The Schema contains a formal definition of the Directory Service contents and structure. The schema defines all attributes and classes. For each class, the possible superior, must-have, and may-have properties are defined. "Possible superiors" defines the possible tree structures for the DS by specifying what classes can be the parent for any given class. Must-have and May-have list the attributes for a class that must be present to store the class and what additional attributes may optionally be present.</dd>
<dt>
Structure Rules</dt>
<dd>
Structure rules define the possible tree structure(s). In the NTDS, the structure rules are completely expressed by the <b>Poss-superiors</b> attribute present on each <b>Class-Schema</b> object. See <i>Schema</i>.</dd>
<dt>
Subclass</dt>
<dd>
A <b>Class-Schema</b> object that inherits from some other Class-Schema object. See <i>Inheritance</i>.</dd>
<dt>
Superclass</dt>
<dd>
A Class-Schema object from which one or more other Class-Schema objects inherit. See <i>Inheritance</i>. </dd>
<dt>
Tree</dt>
<dd>
See <i>Directory Information Tree</i>.</dd>
<dt>
X.500</dt>
<dd>
A family of standards developed jointly by the ISO and ITU (formerly known as the CCITT) that specify the naming, information representation, and communications protocols for a directory service. 
</dd>
</dl>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

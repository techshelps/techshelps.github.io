<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>9.3.2 Examples of Field Declarations</title>
<META NAME=MS-HAID CONTENT="9_3_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>9.3.2	 Examples of Field Declarations</h3>
<a name="40595"></a>
<p>
<a name="40743"></a>
The following example illustrates some (possibly subtle) points about field declarations.
<p><a name="40596"></a>
<h4>9.3.2.1	 Ambiguous Inherited Fields</h4>
<p>
<a name="40648"></a>
If two fields with the same name are inherited by an interface because, for example, two of its direct superinterfaces declare fields with that name, then a single 
<i>ambiguous member</i> results. Any use of this ambiguous member will result in a 
compile-time error. Thus in the example:
<p><pre><a name="40649"></a>
interface BaseColors {
<a name="40650"></a>	int RED = 1, GREEN = 2, BLUE = 4;
<a name="40651"></a>}
<br><a name="40652"></a>
interface RainbowColors extends BaseColors {
<a name="40653"></a>	int YELLOW = 3, ORANGE = 5, INDIGO = 6, VIOLET = 7;
<a name="40654"></a>}
<br><a name="40655"></a>
interface PrintColors extends BaseColors {
<a name="40656"></a>	int YELLOW = 8, CYAN = 16, MAGENTA = 32;
<a name="40657"></a>}
<br><a name="40658"></a>
interface LotsOfColors extends RainbowColors, PrintColors {
<a name="40659"></a>	int FUCHSIA = 17, VERMILION = 43, CHARTREUSE = RED+90;
<a name="40660"></a>}
</pre><p><a name="40661"></a>
the interface <code>LotsOfColors</code> inherits two fields named <code>YELLOW</code>. This is all right as 
long as the interface does not contain any reference by simple name to the field 
<code>YELLOW</code>. (Such a reference could occur within a variable initializer for a field.)
<p><a name="40696"></a>
Even if interface <code>PrintColors</code> were to give the value <code>3</code> to <code>YELLOW</code> rather than the value <code>8</code>, a reference to field <code>YELLOW</code> within interface <code>LotsOfColors</code> would still be considered ambiguous.<p>
<a name="40599"></a>
<h4>9.3.2.2	 Multiply Inherited Fields</h4>
<p>
<a name="236005"></a>
If a single field is inherited multiple times from the same interface because, for 
example, both this interface and one of this interface's direct superinterfaces 
extend the interface that declares the field, then only a single member results. This 
situation does not in itself cause a compile-time error. 
<p><a name="236006"></a>
In the example in the previous section, the fields <code>RED</code>, <code>GREEN</code>, and <code>BLUE</code> are inherited by interface <code>LotsOfColors</code> in more than one way, through interface <code>RainbowColors</code> and also through interface <code>PrintColors</code>, but the reference to field <code>RED</code> in interface <code>LotsOfColors</code> is not considered ambiguous because only one actual declaration of the field <code>RED</code> is involved.<p>


</Font></body></html>

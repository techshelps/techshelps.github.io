<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>8.1 Class Declaration</title>
<META NAME=MS-HAID CONTENT="8_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h2>8.1	 Class Declaration</h2>
<a name="15372"></a>
<p>
<a name="23643"></a>
A <i>class declaration</i> specifies a new reference type:
<p><pre>
<i><i>ClassDeclaration:<br>
</i>	<i>ClassModifier</i>sopt<code> class </code><i>Identifier</i><code> </code>Superopt<code> </code>Interfacesopt<code> </code><i>ClassBody
</i></i></pre><p><a name="29516"></a>
If a class is declared in a named package <a href="7_4_1.htm#26621">(&#167;7.4.1)</a> with fully qualified name <i>P</i> 
<a href="6_7.htm#25430">(&#167;6.7)</a>, then the class has the fully qualified name <i>P</i><code>.</code><i>Identifier</i>. If the class is in an 
unnamed package <a href="7_4_2.htm#26639">(&#167;7.4.2)</a>, then the class has the fully qualified name <i>Identifier</i>. 
In the example:
<p><pre><a name="29524"></a>class Point { int x, y; }
</pre><p><a name="29525"></a>
the class <code>Point</code> is declared in a compilation unit with no <code>package</code> statement, and 
thus <code>Point</code> is its fully qualified name, whereas in the example:
<p><pre><a name="29526"></a>
package vista;
<a name="29527"></a>class Point { int x, y; }
</pre><p><a name="29528"></a>
the fully qualified name of the class <code>Point</code> is <code>vista.Point</code>. (The package name 
<code>vista</code> is suitable for local or personal use; if the package were intended to be 
widely distributed, it would be better to give it a unique package name <a href="7_7.htm#40169">(&#167;7.7)</a>.)
<p><a name="77906"></a>
A compile-time error occurs if the <em>Identifier </em>naming a class appears as the name of any other class type or interface type declared in the same package <a href="7_6.htm#26783">(&#167;7.6)</a>.<p>
<a name="28418"></a>
A compile-time error occurs if the <i>Identifier</i> naming a class is also declared as a type by a single-type-import declaration <a href="7_5_1.htm#26699">(&#167;7.5.1)</a> in the compilation unit <a href="7_3.htm#40031">(&#167;7.3)</a> containing the class declaration.<p>
<a name="227770"></a>
In the example:<p>
<pre><a name="18901"></a>
package test;
<br><a name="33758"></a>import java.util.Vector;
<br><a name="25534"></a>
class Point {
<a name="25538"></a>	int x, y;
<a name="25539"></a>}
<br><a name="25535"></a>
interface Point {											// compile-time error #1
<a name="25540"></a>	int getR();
<a name="25548"></a>	int getTheta();
<a name="25541"></a>}
<br><a name="18906"></a>class Vector { Point[] pts; }											// compile-time error #2
</pre><p><a name="22257"></a>
the first compile-time error is caused by the duplicate declaration of the name 
<code>Point</code> as both a <code>class</code> and an <code>interface</code> in the same package. A second error 
detected at compile time is the attempt to declare the name <code>Vector</code> both by a class 
type declaration and by a single-type-import declaration.
<p><a name="35887"></a>
Note, however, that it is not an error for the <i>Identifier</i> that names a class also to name a type that otherwise might be imported by a type-import-on-demand declaration <a href="7_5_2.htm#26725">(&#167;7.5.2)</a> in the compilation unit <a href="7_3.htm#40031">(&#167;7.3)</a> containing the class declaration. In the example:<p>
<pre><a name="35908"></a>
package test;
<br><a name="35909"></a>import java.util.*;
<br><a name="35917"></a>class Vector { Point[] pts; }											// not a compile-time error
</pre><p><a name="35926"></a>
the declaration of the class <code>Vector</code> is permitted even though there is also a class 
<code>java.util.Vector</code>. Within this compilation unit, the simple name <code>Vector</code> refers 
to the class <code>test.Vector</code>, not to <code>java.util.Vector</code> (which can still be referred 
to by code within the compilation unit, but only by its fully qualified name).
<p>

</Font></body></html>

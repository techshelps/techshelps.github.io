<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>11.5 The Exception Hierarchy</title>
<META NAME=MS-HAID CONTENT="11_5">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>11.5	 The Exception Hierarchy</h2>
<a name="44278"></a>
<p>
<a name="44279"></a>
The possible exceptions in a Java program are organized in a hierarchy of classes, 
rooted at class <code>Throwable</code> (<a href="20_22.htm#14470">&#167;20.22</a>), a direct subclass of <code>Object</code>. The 
classes <code>Exception</code> and <code>Error</code> are direct subclasses of <code>Throwable</code>. The class 
<code>RuntimeException</code> is a direct subclass of <code>Exception</code>.
<p><a name="47875"></a>
The exception classes declared by the standard packages java.lang, java.util, java.io and java.net are called the <i>standard exception classes</i>.<p>
<a name="44283"></a>
Java programs can use the pre-existing exception classes in <code>throw</code> statements, or define additional exception classes, as subclasses of <code>Throwable</code> or of any of its subclasses, as appropriate. To take advantage of Java's compile-time checking for exception handlers, it is typical to define most new exception classes as checked exception classes, specifically as subclasses of <code>Exception</code> that are not subclasses of <code>RuntimeException</code>.<p>


</body></html>

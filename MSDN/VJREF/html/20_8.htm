<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>20.8 The Class java.lang.Long</title>
<META NAME=MS-HAID CONTENT="20_8">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>20.8	 The Class java.lang.Long</h1>
<a name="13841"></a>
<p>
<pre><a name="14432"></a>public final class <code><b>Long</b></code> extends Number {
<a name="2405"></a>	public static final long <code><b>MIN_VALUE</b></code> = 0x8000000000000000L;
<a name="2406"></a>	public static final long <code><b>MAX_VALUE</b></code> = 0x7fffffffffffffffL;
<a name="2407"></a>	public <code><b>Long</b></code>(long value);
<a name="2408"></a>	public <code><b>Long</b></code>(String s)<br>
		throws NumberFormatException;
<a name="2409"></a>	public String <code><b>toString</b></code>();
<a name="2410"></a>	public boolean <code><b>equals</b></code>(Object obj);
<a name="2411"></a>	public int <code><b>hashCode</b></code>();
<a name="2412"></a>	public int <code><b>intValue</b></code>();
<a name="2413"></a>	public long <code><b>longValue</b></code>();
<a name="2414"></a>	public float <code><b>floatValue</b></code>();
<a name="2415"></a>	public double <code><b>doubleValue</b></code>();
<a name="2416"></a>	public static String <code><b>toString</b></code>(long i);
<a name="2417"></a>	public static String <code><b>toString</b></code>(long i, int radix);
<a name="7185"></a>	public static String <code><b>toHexString</b></code>(long i);
<a name="7189"></a>	public static String <code><b>toOctalString</b></code>(long i);
<a name="7193"></a>	public static String <code><b>toBinaryString</b></code>(long i);
<a name="2418"></a>	public static long <code><b>parseLong</b></code>(String s)<br>
		throws NumberFormatException;
<a name="2462"></a>	public static long <code><b>parseLong</b></code>(String s, int radix)<br>
		throws NumberFormatException;
<a name="2467"></a>	public static Long <code><b>valueOf</b></code>(String s)<br>
		throws NumberFormatException;
<a name="2473"></a>	public static Long <code><b>valueOf</b></code>(String s, int radix)<br>
		throws NumberFormatException;
<a name="2422"></a>	public static Long <code><b>getLong</b></code>(String nm);
<a name="2423"></a>	public static Long <code><b>getLong</b></code>(String nm, long val);
<a name="2424"></a>	public static Long <code><b>getLong</b></code>(String nm, Long val);
<a name="2427"></a>}
</pre><p><a name="2397"></a>
<p><strong>20.8.1	</strong> <code>public static final long MIN_VALUE = 0x8000000000000000L;</code>
<p>
<a name="3482"></a>
The constant value of this field is the lowest value of type <code>long</code>.
<p><a name="14434"></a>
<p><strong>20.8.2	</strong> <code>public static final long MAX_VALUE = 0x7fffffffffffffffL;</code>
<p>
<a name="3486"></a>
The constant value of this field is the highest value of type <code>long</code>.
<p><a name="1388"></a>
<p><strong>20.8.3	</strong> <code>public Long(long value)</code>
<p>
<a name="3667"></a>
This constructor initializes a newly created <code>Long</code> object so that it represents the 
primitive value that is the argument.
<p><a name="1389"></a>
<p><strong>20.8.4	</strong> <code>public Long(String s) throws NumberFormatException</code>
<p>
<a name="3737"></a>
This constructor initializes a newly created <code>Long</code> object so that it represents the 
integer represented by the string in decimal form. The string is converted to a 
<code>long</code> value in exactly the manner used by the <code>parseLong</code> method <a href="20_8.htm#14437">(&#167;20.8.17)</a> for 
radix 10.
<p><a name="1390"></a>
<p><strong>20.8.5	</strong> <code>public String toString()</code>
<p>
<a name="3933"></a>
The <code>long</code> integer value represented by this <code>Long</code> object is converted to signed decimal representation and returned as a string, exactly as if the integer value were 
given as an argument to the <code>toString</code> method that takes one argument <a href="20_7.htm#1459">(&#167;20.7.12)</a>.
<p><a name="3957"></a>
Overrides the <code>toString</code> method of <code>Object</code> <a href="20_1.htm#1152">(&#167;20.1.2)</a>.<p>
<a name="1391"></a>
<p><strong>20.8.6	</strong> <code>public boolean equals(Object obj)</code>
<p>
<a name="4634"></a>
The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>Long</code> object that 
represents the same <code>long</code> value as this <code>Long</code> object.
<p><a name="3995"></a>
Overrides the <code>equals</code> method of <code>Object</code> <a href="20_1.htm#14865">(&#167;20.1.3)</a>.<p>
<a name="1392"></a>
<p><strong>20.8.7	</strong> <code>public int hashCode()</code>
<p>
<a name="4714"></a>
The result is the exclusive OR of the two halves of the primitive <code>long</code> value represented by this <code>Long</code> object. That is, the hashcode is the value of the expression:
<p><pre><a name="4715"></a>(int)(this.longValue()^(this.longValue()&gt;&gt;&gt;32))
</pre><p><a name="4719"></a>
Overrides the <code>hashCode</code> method of <code>Object</code> <a href="20_1.htm#13784">(&#167;20.1.4)</a>.<p>
<a name="1393"></a>
<p><strong>20.8.8	</strong> <code>public int intValue()</code>
<p>
<a name="4506"></a>
The <code>long</code> value represented by this <code>Long</code> object is converted <a href="5_1_3.htm#175672">(&#167;5.1.3)</a> to type <code>int</code> 
and the result of the conversion is returned.
<p><a name="4265"></a>
Overrides the <code>intValue</code> method of <code>Number</code> <a href="20_6.htm#3376">(&#167;20.6.1)</a>.<p>
<a name="1394"></a>
<p><strong>20.8.9	</strong> <code>public long longValue()</code>
<p>
<a name="4479"></a>
The <code>long</code> value represented by this <code>Long</code> object is returned.
<p><a name="4399"></a>
Overrides the <code>longValue</code> method of <code>Number</code> <a href="20_6.htm#3434">(&#167;20.6.2)</a>.<p>
<a name="1395"></a>
<p><strong>20.8.10	</strong> <code>public float floatValue()</code>
<p>
<a name="4521"></a>
The <code>long</code> value represented by this <code>Long</code> object is converted <a href="5_1_2.htm#25222">(&#167;5.1.2)</a> to type 
<code>float</code> and the result of the conversion is returned.
<p><a name="4390"></a>
Overrides the <code>floatValue</code> method of <code>Number</code> <a href="20_6.htm#3384">(&#167;20.6.3)</a>.<p>
<a name="1396"></a>
<p><strong>20.8.11	</strong> <code>public double doubleValue()</code>
<p>
<a name="4528"></a>
The <code>long</code> value represented by this <code>Long</code> object is converted <a href="5_1_2.htm#25222">(&#167;5.1.2)</a> to type 
<code>double</code> &#32;and the result of the conversion is returned.
<p><a name="4381"></a>
Overrides the <code>doubleValue</code> method of <code>Number</code> <a href="20_6.htm#3412">(&#167;20.6.4)</a>.<p>
<a name="1452"></a>
<p><strong>20.8.12	</strong> <code>public static String toString(long i)</code>
<p>
<a name="3925"></a>
The argument is converted to signed decimal representation and returned as a 
string, exactly as if the argument and the radix <code>10</code> were given as arguments to the 
<code>toString</code> method that takes two arguments <a href="20_8.htm#1453">(&#167;20.8.13)</a>.
<p><a name="1453"></a>
<p><strong>20.8.13	</strong> <code>public static String toString(long i, int radix)</code>
<p>
<a name="3901"></a>
The first argument is converted to a signed representation in the radix specified by 
the second argument; this representation is returned as a string.
<p><a name="24775"></a>
If the <code>radix</code> is smaller than <code>Character.MIN_RADIX</code> <a href="20_5.htm#1300">(&#167;20.5.3)</a> or larger than <code>Character.MAX_RADIX</code> <a href="20_5.htm#1311">(&#167;20.5.4)</a>, then the value <code>10</code> is used instead.<p>
<a name="24783"></a>
If the first argument is negative, the first character of the result will be the character <code>'-'</code> (<code>'\u002d'</code>). If the first argument is not negative, no sign character appears in the result.<p>
<a name="24784"></a>
The remaining characters of the result represent the magnitude of the first argument. If the magnitude is zero, it is represented by a single zero character <code>'0'</code> (<code>'\u0030'</code>); otherwise, the first character of the representation of the magnitude will not be the zero character. The following ASCII characters are used as digits:<p>
<pre><a name="24786"></a><code>0123456789abcdefghijklmnopqrstuvwxyz
</code></pre><p><a name="3908"></a>
These are <code>'\u0030'</code> through <code>'\u0039'</code> and <code>'\u0061'</code> through <code>'\u007a'</code>. If the 
<code>radix</code> is <i>N</i>, then the first <i>N</i> of these characters are used as radix-<i>N</i> digits in the 
order shown. Thus, the digits for hexadecimal (radix 16) are <code>0123456789abcdef</code>. 
If uppercase letters are desired, the <code>toUpperCase</code> method <a href="20_12.htm#14011">(&#167;20.12.36)</a> of class 
<code>String</code> may be called on the result:
<p><pre><a name="3916"></a>Long.toString(n, 16).toUpperCase()
</pre><p><a name="7198"></a>
<p><strong>20.8.14	</strong> <code>public static String toHexString(long i)</code>
<p>
<a name="7204"></a>
The argument is converted to an unsigned representation in hexadecimal radix 
(base 16); this representation is returned as a string.
<p><a name="7212"></a>
The result represents the unsigned magnitude of the argument. This equals the argument plus <img src="laanc5.gif">if the argument is negative; otherwise, it equals the argument.<p>
<a name="7242"></a>
If the unsigned magnitude is zero, it is represented by a single zero character <code>'0'</code> (<code>'\u0030'</code>); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as hexadecimal digits:<p>
<pre><a name="7213"></a><code>0123456789abcdef
</code></pre><p><a name="7214"></a>
These are the characters <code>'\u0030'</code> through <code>'\u0039'</code> and <code>'\u0061'</code> through 
<code>'\u0066'</code>. If uppercase letters are desired, the <code>toUpperCase</code> method <a href="20_12.htm#14011">(&#167;20.12.36)</a> 
of class <code>String</code> may be called on the result:
<p><pre><a name="7218"></a>Long.toHexString(n).toUpperCase()
</pre><p><a name="7251"></a>
<p><strong>20.8.15	</strong> <code>public static String toOctalString(long i)</code>
<p>
<a name="7252"></a>
The argument is converted to an unsigned representation in octal radix (base 8); 
this representation is returned as a string.
<p><a name="24807"></a>
The result represents the unsigned magnitude of the argument. This equals the argument plus <img src="laanc6.gif">if the argument is negative; otherwise, it equals the argument.<p>
<a name="7257"></a>
If the unsigned magnitude is zero, it is represented by a single zero character <code>'0'</code> (<code>'\u0030'</code>); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as octal digits:<p>
<pre><a name="7258"></a><code>01234567
</code></pre><p><a name="7259"></a>
These are the characters <code>'\u0030'</code> through <code>'\u0037'</code>.
<p><a name="7299"></a>
<p><strong>20.8.16	</strong> <code>public static String toBinaryString(long i)</code>
<p>
<a name="7300"></a>
The argument is converted to an unsigned representation in binary radix (base 2); 
this representation is returned as a string.
<p><a name="24814"></a>
The result represents the unsigned magnitude of the argument. This equals the argument plus <img src="laanc7.gif">if the argument is negative; otherwise, it equals the argument.<p>
<a name="7305"></a>
If the unsigned magnitude is zero, it is represented by a single zero character <code>'0'</code> (<code>'\u0030'</code>); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The characters <code>'0'</code> (<code>'\u0030'</code>) and <code>'1'</code> (<code>'\u0031'</code>) are used as binary digits.<p>
<a name="14437"></a>
<p><strong>20.8.17	</strong> <code>public static long parseLong(String s)<br>throws NumberFormatException</code>
<p>
<a name="5339"></a>
The argument is interpreted as representing a signed decimal integer. The components of the string must all be decimal digits, except that the first character may be 
<code>'-'</code> (<code>'\u002d'</code>) to indicate a negative value. The resulting <code>long</code> value is returned, 
exactly as if the argument and the radix <code>10</code> were given as arguments to the 
<code>parseLong</code> method that takes two arguments <a href="20_8.htm#2483">(&#167;20.8.18)</a>.
<p><a name="24849"></a>
Note that neither <code>L</code> nor <code>l</code> is permitted to appear at the end of the string as a type indicator, as would be permitted in Java source code <a href="3_10_1.htm#48282">(&#167;3.10.1)</a>.<p>
<a name="2483"></a>
<p><strong>20.8.18	</strong> <code>public static long parseLong(String s, int radix)<br>throws NumberFormatException</code>
<p>
<a name="5349"></a>
The first argument is interpreted as representing a signed integer in the radix specified by the second argument. The components of the string must all be digits of 
the specified radix (as determined by whether <code>Character.digit</code> <a href="20_5.htm#13834">(&#167;20.5.23)</a> 
returns a nonnegative value), except that the first character may be <code>'-'</code> 
(<code>'\u002d'</code>) to indicate a negative value. The resulting <code>long</code> value is returned.
<p><a name="24839"></a>
Note that neither <code>L</code> nor <code>l</code> is permitted to appear at the end of the string as a type indicator, as would be permitted in Java source code <a href="3_10_1.htm#48282">(&#167;3.10.1)</a>-except that either <code>L</code> or <code>l</code> may appear as a digit for a radix greater than <code>22</code>.<p>
<a name="5353"></a>
An exception of type <code>NumberFormatException</code> is thrown if any of the following situations occurs:<p>
<ul><a name="5354"></a>
<li>The first argument is <code>null</code> or is a string of length zero.
<a name="24749"></a>
<li>The <code>radix</code> is either smaller than <code>Character.MIN_RADIX</code> <a href="20_5.htm#1300">(&#167;20.5.3)</a> or larger than <code>Character.MAX_RADIX</code> <a href="20_5.htm#1311">(&#167;20.5.4)</a>.
<a name="5355"></a>
<li>The first character of the string is not a digit of the specified <code>radix</code> and is not a minus sign <code>'-'</code> (<code>'\u002d'</code>).
<a name="5356"></a>
<li>The first character of the string is a minus sign and the string is of length 1.
<a name="5357"></a>
<li>Any character of the string after the first is not a digit of the specified <code>radix</code>.
<a name="5358"></a>
<li>The integer value represented by the string cannot be represented as a value of type <code>long</code>.
</ul><p><a name="5366"></a>
Examples:<p>
<pre><a name="5367"></a>
parseLong("0", 10) returns 0L
<a name="5368"></a>parseLong("473", 10) returns 473L
<a name="5369"></a>parseLong("-0", 10) returns 0L
<a name="5370"></a>parseLong("-FF", 16) returns -255L
<a name="5371"></a>parseLong("1100110", 2) returns 102L
<a name="5375"></a>parseLong("99", 8) throws a NumberFormatException
<a name="5376"></a>parseLong("Hazelnut", 10) throws a NumberFormatException
<a name="5377"></a>parseLong("Hazelnut", 36) returns <code>1356099454469L
</code></pre><p><a name="14442"></a>
<p><strong>20.8.19	</strong> <code>public static Long valueOf(String s)<br>throws NumberFormatException</code>
<p>
<a name="5447"></a>
The argument is interpreted as representing a signed decimal integer, exactly as if 
the argument were given to the <code>parseLong</code> method that takes one argument 
<a href="20_8.htm#14437">(&#167;20.8.17)</a>. The result is a <code>Long</code> object that represents the integer value specified 
by the string.
<p><a name="5451"></a>
In other words, this method returns a <code>Long</code> object equal to the value of:<p>
<pre><a name="5452"></a>new Long(Long.parseLong(s))
</pre><p><a name="2489"></a>
<p><strong>20.8.20	</strong> <code>public static Long valueOf(String s, int radix)<br>throws NumberFormatException</code>
<p>
<a name="5466"></a>
The first argument is interpreted as representing a signed integer in the radix specified by the second argument, exactly as if the arguments were given to the 
<code>parseLong</code> method that takes two arguments <a href="20_8.htm#2483">(&#167;20.8.18)</a>. The result is a <code>Long</code> 
object that represents the integer value specified by the string.
<p><a name="5470"></a>
In other words, this method returns a <code>Long</code> object equal to the value of:<p>
<pre><a name="5471"></a>new Long(Long.parseLong(s, radix))
</pre><p><a name="14454"></a>
<p><strong>20.8.21	</strong> <code>public static Long getLong(String nm)</code>
<p>
<a name="5485"></a>
The first argument is treated as the name of a system property to be obtained as if 
by the method <code>System.getProperty</code> (&#167;20.18.9)</a>. The string value of this property is then interpreted as an integer value and a <code>Long</code> object representing this 
value is returned. If there is no property of the specified name, or if the property 
does not have the correct numeric format, then <code>null</code> is returned.
<p><a name="5493"></a>
In other words, this method returns a <code>Long</code> object equal to the value of:<p>
<pre><a name="5494"></a>getLong(nm, null)
</pre><p><a name="14455"></a>
<p><strong>20.8.22	</strong> <code>public static Long getLong(String nm, long val)</code>
<p>
<a name="5509"></a>
The first argument is treated as the name of a system property to be obtained as if 
by the method <code>System.getProperty</code> (&#167;20.18.9)</a>. The string value of this property is then interpreted as an integer value and a <code>Long</code> object representing this 
value is returned. If there is no property of the specified name, or if the property 
does not have the correct numeric format, then a <code>Long</code> object that represents the 
value of the second argument is returned.
<p><a name="5517"></a>
In other words, this method returns a <code>Long</code> object equal to the value of:<p>
<pre><a name="5518"></a>getLong(nm, new Long(val))
</pre><p><a name="5519"></a>
but in practice it may be implemented in a manner such as:
<p><pre><a name="5520"></a>
Long result = getLong(nm, null);
<a name="5521"></a>return (result == null) ? new Long(val) : result;
</pre><p><a name="5522"></a>
to avoid the unnecessary allocation of a <code>Long</code> object when the default value is not 
needed.
<p><a name="14456"></a>
<p><strong>20.8.23	</strong> <code>public static Long getLong(String nm, Long val)</code>
<p>
<a name="5555"></a>
The first argument is treated as the name of a system property to be obtained as if 
by the method <code>System.getProperty</code> (&#167;20.18.9)</a>. The string value of this property is then interpreted as an integer value and a <code>Long</code> object representing this 
value is returned.
<p><ul><a name="34299"></a>
<li>If the property value begins with the two ASCII characters <code>0x</code> or the ASCII character <code>#</code>, not followed by a minus sign, then the rest of it is parsed as a hexadecimal integer exactly as for the method <code>Long.valueOf</code> <a href="20_7.htm#14370">(&#167;20.7.20)</a> with radix <code>16</code>.
</ul><ul><a name="24878"></a>
<li>If the property value begins with the character <code>0</code> followed by another character, it is parsed as an octal integer exactly as for the method <code>Long.valueOf</code> <a href="20_7.htm#14370">(&#167;20.7.20)</a> with radix <code>8</code>.
<a name="24882"></a>
<li>Otherwise the property value is parsed as a decimal integer exactly as for the method <code>Long.valueOf</code> <a href="20_7.htm#14370">(&#167;20.7.20)</a> with radix <code>10</code>.
</ul><p><a name="5571"></a>
Note that, in every case, neither <code>L</code> nor <code>l</code> is permitted to appear at the end of the property value as a type indicator, as would be permitted in Java source code <a href="3_10_1.htm#48282">(&#167;3.10.1)</a>.<p>
<a name="5595"></a>
The second argument serves as a default value. If there is no property of the specified name, or if the property does not have the correct numeric format, then the second argument is returned.<p>


</body></html>

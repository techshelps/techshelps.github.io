<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>21.11 The Class java.util.Vector</title>
<META NAME=MS-HAID CONTENT="21_11">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>21.11	 The Class java.util.Vector</h1>
<a name="7669"></a>
<p>
<a name="22449"></a>
A <code>Vector</code>, like an array, contains items that can be accessed using an integer 
index. However, the size of a <code>Vector</code> can grow and shrink as needed to accommodate adding and removing items after the <code>Vector</code> has been created.
<p><pre><a name="7670"></a>public class <code><b>Vector</b></code> implements Cloneable {
<a name="7671"></a>	protected Object[] <code><b>elementData</b></code>;
<a name="7672"></a>	protected int <code><b>elementCount</b></code>;
<a name="7673"></a>	protected int <code><b>capacityIncrement</b></code>;
<a name="7674"></a>	public <code><b>Vector</b></code>(int initialCapacity, int capacityIncrement);
<a name="7675"></a>	public <code><b>Vector</b></code>(int initialCapacity);
<a name="7676"></a>	public <code><b>Vector</b></code>();
<a name="22275"></a>	public final String <code><b>toString</b></code>();
<a name="22281"></a>	public Object <code><b>clone</b></code>();
<a name="22287"></a>	public final Object <code><b>elementAt</b></code>(int index)
<a name="22521"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="22328"></a>	public final void <code><b>setElementAt</b></code>(Object obj, int index)
<a name="22526"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="22288"></a>	public final Object <code><b>firstElement</b></code>()
<a name="22531"></a>		throws NoSuchElementException;
<a name="22533"></a>	public final Object <code><b>lastElement</b></code>()
<a name="22289"></a>		throws NoSuchElementException;
<a name="22334"></a>	public final void <code><b>addElement</b></code>(Object obj);
<a name="22292"></a>	public final void <code><b>insertElementAt</b></code>(Object obj, int index)
<a name="22584"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="22346"></a>	public final boolean <code><b>removeElement</b></code>(Object obj);
<a name="22340"></a>	public final void <code><b>removeElementAt</b></code>(int index)
<a name="22589"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="22295"></a>	public final void <code><b>removeAllElements</b></code>();
<a name="22322"></a>	public final boolean <code><b>isEmpty</b></code>();
<a name="22310"></a>	public final int <code><b>size</b></code>();
<a name="22301"></a>	public final void <code><b>setSize</b></code>(int newSize);
<a name="22302"></a>	public final int <code><b>capacity</b></code>();
<a name="22316"></a>	public final void <code><b>ensureCapacity</b></code>(int minCapacity);
<a name="7678"></a>	public final void <code><b>trimToSize</b></code>();
<a name="22757"></a>	public final void <code><b>copyInto</b></code>(Object anArray[])
<a name="22459"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="7684"></a>	public final Enumeration <code><b>elements</b></code>();
<a name="7685"></a>	public final boolean <code><b>contains</b></code>(Object elem);
<a name="7686"></a>	public final int <code><b>indexOf</b></code>(Object elem);
<a name="22752"></a>	public final int <code><b>indexOf</b></code>(Object elem, int index)
<a name="7687"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="7688"></a>	public final int <code><b>lastIndexOf</b></code>(Object elem);
<a name="22747"></a>	public final int <code><b>lastIndexOf</b></code>(Object elem, int index)
<a name="7689"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="7701"></a>}
</pre><p><a name="7702"></a>
<p><strong>21.11.1	</strong> <code>protected Object[] elementData;</code>
<p>
<a name="22468"></a>
Internally, a <code>Vector</code> keeps its elements in an array that is at least large enough to 
contain all the elements.
<p><a name="7703"></a>
<p><strong>21.11.2	</strong> <code>protected int elementCount;</code>
<p>
<a name="22469"></a>
This field holds the number of items currently in this <code>Vector</code> object. Components 
<code>elementData[0]</code> through <code>elementData[elementCount-1]</code> are the actual items.
<p><a name="7704"></a>
<p><strong>21.11.3	</strong> <code>protected int capacityIncrement;</code>
<p>
<a name="22476"></a>
When the method <code>ensureCapacity</code> <a href="21_11.htm#22436">(&#167;21.11.22)</a> must increase the size of the data 
array in the field <code>elementData</code> (by creating a new array), it increases the size by 
at least the amount in <code>capacityIncrement</code>; but if <code>capacityIncrement</code> is zero, 
then it at least doubles the size of the data array.
<p><a name="7705"></a>
<p><strong>21.11.4	</strong> <code>public Vector(int initialCapacity, int capacityIncrement)</code>
<p>
<a name="22482"></a>
This constructor initializes a newly created <code>Vector</code> so that its internal data array 
has size <code>initialCapacity</code> and its standard capacity increment is the value of 
<code>capacityIncrement</code>. Initially, the <code>Vector</code> contains no items.
<p><a name="7706"></a>
<p><strong>21.11.5	</strong> <code>public Vector(int initialCapacity)</code>
<p>
<a name="22494"></a>
This constructor initializes a newly created <code>Vector</code> so that its internal data array 
has size <code>initialCapacity</code> and its standard capacity increment is zero. Initially, 
the <code>Vector</code> contains no items.
<p><a name="7707"></a>
<p><strong>21.11.6	</strong> <code>public Vector()</code>
<p>
<a name="22500"></a>
This constructor initializes a newly created <code>Vector</code> so that its internal data array 
has size <code>10</code> and its standard capacity increment is zero. Initially the <code>Vector</code> contains no items.
<p><a name="22354"></a>
<p><strong>21.11.7	</strong> <code>public final String toString()</code>
<p>
<a name="22810"></a>
This <code>Vector</code> is represented in string form as a list of its items, enclosed in ASCII 
square brackets and separated by the ASCII characters "<code>, </code>" (comma and space). 
The <code>toString</code> method is used to convert the items to strings; a null reference is 
rendered as the string "<code>null</code>".
<p><a name="22846"></a>
The example fragment:<p>
<pre><a name="22847"></a>
Vector v = new Vector();
<a name="22850"></a>v.addElement("Canberra");
<a name="22854"></a>v.addElement("Cancun");
<a name="22858"></a>v.addElement("Canandaigua");
<a name="25569"></a>System.out.println(v.toString());
<a name="25570"></a>
</pre><p><a name="25565"></a>
produces the output:
<p><pre><a name="22865"></a>[Canberra, Cancun, Canandaigua]
</pre><p><a name="22814"></a>
Overrides the <code>toString</code> method of <code>Object</code> <a href="20_1.htm#1152">(&#167;20.1.2)</a>.<p>
<a name="22363"></a>
<p><strong>21.11.8	</strong> <code>public Object clone()</code>
<p>
<a name="22808"></a>
A copy of this <code>Vector</code> is constructed and returned. The copy will contains a reference to a clone of the internal data array, not a reference to the original internal 
data array of this <code>Vector</code>.
<p><a name="22829"></a>
Overrides the <code>clone</code> method of <code>Object</code> <a href="20_1.htm#14934">(&#167;20.1.5)</a>.<p>
<a name="22392"></a>
<p><strong>21.11.9	</strong> <code>public final Object elementAt(int index)<br>throws IndexOutOfBoundsException</code>
<p>
<a name="22511"></a>
The item of this <code>Vector</code> with the specified <code>index</code> is returned.
<p><a name="22516"></a>
If the <code>index</code> is negative or not less than the current size of this <code>Vector</code>, an <code>IndexOutOfBoundsException</code> is thrown.<p>
<a name="22393"></a>
<p><strong>21.11.10	</strong> <code>public final void setElementAt(Object obj, int index)<br>throws IndexOutOfBoundsException</code>
<p>
<a name="22550"></a>
The item of this <code>Vector</code> with the specified <code>index</code> is replaced with <code>obj</code>, so that <code>obj</code> 
is now the item at the specified <code>index</code> within this <code>Vector</code>.
<p><a name="22551"></a>
If the <code>index</code> is negative or not less than the current size of this <code>Vector</code>, an <code>IndexOutOfBoundsException</code> is thrown.<p>
<a name="22394"></a>
<p><strong>21.11.11	</strong> <code>public final Object firstElement()<br>throws NoSuchElementException</code>
<p>
<a name="22556"></a>
If this <code>Vector</code> is empty, a <code>NoSuchElementException</code> is thrown. Otherwise, the 
first item (the item at index <code>0</code>) is returned.
<p><a name="22395"></a>
<p><strong>21.11.12	</strong> <code>public final Object lastElement()<br>throws NoSuchElementException</code>
<p>
<a name="22558"></a>
If this <code>Vector</code> is empty, a <code>NoSuchElementException</code> is thrown. Otherwise, the 
last item (the item at index <code>size()-1</code>) is returned.
<p><a name="22408"></a>
<p><strong>21.11.13	</strong> <code>public final void addElement(Object obj)</code>
<p>
<a name="22564"></a>
The size of this <code>Vector</code> is increased by <code>1</code> and <code>obj</code> becomes the new last item.
<p><a name="22397"></a>
<p><strong>21.11.14	</strong> <code>public final void insertElementAt(Object obj, int index)<br>throws IndexOutOfBoundsException</code>
<p>
<a name="22566"></a>
The size of this <code>Vector</code> is increased by <code>1</code> and <code>obj</code> becomes the new item at the 
specified <code>index</code>. Any item in this <code>Vector</code> that was previously at index <code>k</code> is first 
moved to index <code>k+1</code> if and only if <code>k</code> is not less than <code>index</code>.
<p><a name="22400"></a>
<p><strong>21.11.15	</strong> <code>public final boolean removeElement(Object obj)</code>
<p>
<a name="22803"></a>
If this <code>Vector</code> contains an occurrence of <code>obj</code>, then the first (lowest-indexed) such 
occurrence is removed, as if by the method <code>removeElementAt</code> <a href="21_11.htm#22414">(&#167;21.11.16)</a>, and 
<code>true</code> is returned. If this <code>Vector</code> contains no occurrence of <code>obj</code>, this <code>Vector</code> is not 
modified and <code>false</code> is returned.
<p><a name="22414"></a>
<p><strong>21.11.16	</strong> <code>public final void removeElementAt(int index)<br>throws IndexOutOfBoundsException</code>
<p>
<a name="22599"></a>
The size of this <code>Vector</code> is decreased by <code>1</code> and the item at the specified <code>index</code> is 
removed from this <code>Vector</code>. Any item in this <code>Vector</code> that was previously at index 
<code>k</code> is first moved to index <code>k-1</code> if and only if <code>k</code> is greater than <code>index</code>.
<p><a name="22401"></a>
<p><strong>21.11.17	</strong> <code>public final void removeAllElements()</code>
<p>
<a name="22609"></a>
All elements are removed from this <code>Vector</code>, making it empty.
<p><a name="22442"></a>
<p><strong>21.11.18	</strong> <code>public final boolean isEmpty()</code>
<p>
<a name="22610"></a>
The result is <code>true</code> if and only if this <code>Vector</code> is empty, that is, its size is zero.
<p><a name="22430"></a>
<p><strong>21.11.19	</strong> <code>public final int size()</code>
<p>
<a name="22611"></a>
The size of this <code>Vector</code> (the number of items it currently contains) is returned.
<p><a name="22421"></a>
<p><strong>21.11.20	</strong> <code>public final void setSize(int newSize)</code>
<p>
<a name="22614"></a>
The size of this <code>Vector</code> is changed to <code>newSize</code>. If the new size is smaller than the 
old size, then items are removed from the end and discarded. If the new size is 
larger than the old size, then the new items are set to <code>null</code>.
<p><a name="22612"></a>
<p><strong>21.11.21	</strong> <code>public final int capacity()</code>
<p>
<a name="22632"></a>
The current capacity of this <code>Vector</code> (the length of its internal data array, kept in 
the field <code>elementData</code>) is returned.
<p><a name="22436"></a>
<p><strong>21.11.22	</strong> <code>public final void ensureCapacity(int minCapacity)</code>
<p>
<a name="22655"></a>
If the current capacity of this <code>Vector</code> is less than <code>minCapacity</code>, then its capacity 
is increased by replacing its internal data array, kept in the field <code>elementData</code> 
<a href="21_11.htm#7702">(&#167;21.11.1)</a>, with a larger one. The size of the new data array will be the old size 
plus <code>capacityIncrement</code> <a href="21_11.htm#7704">(&#167;21.11.3)</a>, unless the value of <code>capacityIncrement</code> is 
nonpositive, in which case the new capacity will be twice the old capacity; but if 
this new size is still smaller than <code>minCapacity</code>, then the new capacity will be 
<code>minCapacity</code>.
<p><a name="22659"></a>
<p><strong>21.11.23	</strong> <code>public final void trimToSize()</code>
<p>
<a name="22663"></a>
If the capacity of this <code>Vector</code> is larger than its current <code>size</code> <a href="21_11.htm#22430">(&#167;21.11.19)</a>, then the 
capacity is changed to equal the size by replacing its internal data array, kept in 
the field <code>elementData</code>, with a smaller one.
<p><a name="22660"></a>
<p><strong>21.11.24	</strong> <code>public final void copyInto(Object anArray[])<br>throws IndexOutOfBoundsException</code>
<p>
<a name="22684"></a>
All the items in this <code>Vector</code> are copied into the array <code>anArray</code>. The item at index 
<code>k</code> in this <code>Vector</code> is copied into component <code>k</code> of <code>anArray</code>. If the length of <code>anArray</code> 
is smaller than the size of this <code>Vector</code>, an <code>IndexOutOfBoundsException</code> is 
thrown.
<p><a name="7715"></a>
<p><strong>21.11.25	</strong> <code>public final Enumeration elements()</code>
<p>
<a name="22685"></a>
An <code>Enumeration</code> <a href="21_1.htm#23147">(&#167;21.1)</a> is returned that will generate all items in this <code>Vector</code>. 
The first item generated is the item at index <code>0</code>, then the item at index <code>1</code>, and so on.
<p><a name="7716"></a>
<p><strong>21.11.26	</strong> <code>public final boolean contains(Object elem)</code>
<p>
<a name="22695"></a>
The result is <code>true</code> if and only if some item in this <code>Vector</code> is the same as <code>elem</code>, as 
determined by the <code>equals</code> method <a href="20_1.htm#14865">(&#167;20.1.3)</a>.
<p><a name="7717"></a>
<p><strong>21.11.27	</strong> <code>public final int indexOf(Object elem)</code>
<p>
<a name="22703"></a>
If an item equal to <code>elem</code> is in this <code>Vector</code>, then the index of the first such occurrence is returned, that is, the smallest value <code>k</code> such that:
<p><pre><a name="22704"></a><code>elem.equals(elementData[k])
</code></pre><p><a name="22705"></a>
is <code>true</code>. If no such item occurs in this <code>Vector</code>, then <code>-1</code> is returned.<p>
<a name="7718"></a>
<p><strong>21.11.28	</strong> <code>public final int indexOf(Object elem, int index)<br>throws IndexOutOfBoundsException</code>
<p>
<a name="22724"></a>
If an item equal to <code>elem</code> is in this <code>Vector</code> at position <code>k</code> or higher, then the index of 
the first such occurrence is returned, that is, the smallest value <code>k</code> such that:
<p><pre><a name="22725"></a><code>elem.equals(elementData[k]) &amp;&amp; (k &gt;= index)
</code></pre><p><a name="22726"></a>
is <code>true</code>. If no such item occurs in this <code>Vector</code>, then <code>-1</code> is returned.<p>
<a name="7719"></a>
<p><strong>21.11.29	</strong> <code>public final int lastIndexOf(Object elem)</code>
<p>
<a name="22762"></a>
If an item equal to <code>elem</code> is in this <code>Vector</code>, then the index of the last such occurrence is returned, that is, the largest value <code>k</code> such that:
<p><pre><a name="22763"></a><code>elem.equals(elementData[k])
</code></pre><p><a name="22764"></a>
is <code>true</code>. If no such item occurs in this <code>Vector</code>, then <code>-1</code> is returned.<p>
<a name="7720"></a>
<p><strong>21.11.30	</strong> <code>public final int lastIndexOf(Object elem, int index)<br>throws IndexOutOfBoundsException</code>
<p>
<a name="22775"></a>
If an item equal to <code>elem</code> is in this <code>Vector</code> at position <code>k</code> or lower, then the index of 
the last such occurrence is returned, that is, the largest value <code>k</code> such that:
<p><pre><a name="22776"></a><code>elem.equals(elementData[k]) &amp;&amp; (k &lt;= index)
</code></pre><p><a name="22777"></a>
is <code>true</code>. If no such item occurs in this <code>Vector</code>, then <code>-1</code> is returned.<p>


</body></html>

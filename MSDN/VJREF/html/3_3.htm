<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.3 Unicode Escapes</title>
<META NAME=MS-HAID CONTENT="3_3">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>3.3	 Unicode Escapes</h2>
<a name="100850"></a>
<p>
<a name="48089"></a>
Java implementations first recognize <i>Unicode escapes</i> in their input, translating 
the ASCII characters <code>\u</code> followed by four hexadecimal digits to the Unicode character with the indicated hexadecimal value, and passing all other characters 
unchanged. This translation step results in a sequence of Unicode input characters:
<p><pre>
<i>UnicodeInputCharacter:<br>
	UnicodeEscape<br>
	RawInputCharacter
</i>
<i>UnicodeEscape:<br>
<code>	\ </code><i>UnicodeMarker</i><code> </code>HexDigit<code> </code>HexDigit<code> </code>HexDigit<code> </code>HexDigit
</i>
<i>UnicodeMarker:<br>
	<code>u<br>
</code>	UnicodeMarker<code> u
</code></i>
<i>RawInputCharacter:<br>
	any Unicode character
</i>
<i>HexDigit: one of<br>
<code>	0&#32;1&#32;2&#32;3&#32;4&#32;5&#32;6&#32;7&#32;8&#32;9&#32;a&#32;b&#32;c&#32;d&#32;e&#32;f&#32;A&#32;B&#32;C&#32;D&#32;E&#32;F
</code></i></pre><p><a name="229834"></a>
The <code>\</code>, <code>u</code>, and hexadecimal digits here are all ASCII characters.<p>
<a name="231557"></a>
In addition to the processing implied by the grammar, for each raw input character that is a backslash <code>\</code>, input processing must consider how many other <code>\</code> characters contiguously precede it, separating it from a non-<code>\</code> character or the start of the input stream. If this number is even, then the <code>\</code> is eligible to begin a Unicode escape; if the number is odd, then the <code>\</code> is not eligible to begin a Unicode escape. For example, the raw input <code>"\\u2297=\u2297"</code> results in the eleven characters <code>"</code> &#32;<code>\</code> <code>\</code> <code>u</code> <code>2</code> <code>2</code> <code>9</code> <code>7</code> <code>=</code> <img src="chars/circmult.gif"> <code>"</code> (<code>\u2297</code> is the Unicode encoding of the character "<img src="chars/circmult.gif">")<code>.</code><p>
<a name="229835"></a>
If an eligible <code>\</code> is not followed by <code>u</code>, then it is treated as a <i>RawInputCharacter</i> and remains part of the escaped Unicode stream. If an eligible <code>\</code> is followed by <code>u</code>, or more than one <code>u</code>, and the last <code>u</code> is not followed by four hexadecimal digits, then a compile-time error occurs.<p>
<a name="48098"></a>
The character produced by a Unicode escape does not participate in further Unicode escapes. For example, the raw input <code>\u005cu005a</code> results in the six characters <code>\</code> <code>u</code> <code>0</code> <code>0</code> <code>5</code> <code>a</code>, because <code>005c</code> is the Unicode value for <code>\</code>.<code> </code>It does not result in the character <code>Z</code>, which is Unicode character <code>005a</code>, because the <code>\</code> that resulted from the <code>\u005c</code> is not interpreted as the start of a further Unicode escape.<p>
<a name="228824"></a>
Java specifies a standard way of transforming a Unicode Java program into ASCII that changes a Java program into a form that can be processed by ASCII-based tools. The transformation involves converting any Unicode escapes in the source text of the program to ASCII by adding an extra <code>u</code>-for example, <code>\u</code><i>xxxx</i> becomes <code>\uu</code><i>xxxx</i>-while simultaneously converting non-ASCII characters in the source text to a <code>\u</code><i>xxxx</i> escape containing a single <code>u</code>. This transformed version is equally acceptable to a Java compiler and represents the exact same program. The exact Unicode source can later be restored from this ASCII form by converting each escape sequence where multiple <code>u</code>'s are present to a sequence of Unicode characters with one fewer <code>u</code>, while simultaneously converting each escape sequence with a single <code>u</code> to the corresponding single Unicode character.<p>
<a name="231569"></a>
Java systems should use the <code>\u</code><i>xxxx</i> notation as an output format to display Unicode characters when a suitable font is not available.<p>


</body></html>

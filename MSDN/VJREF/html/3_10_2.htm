<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.10.2 Floating-Point Literals</title>
<META NAME=MS-HAID CONTENT="3_10_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>3.10.2	 Floating-Point Literals</h3>
<a name="230798"></a>
<p>
<a name="232095"></a>
See <a href="4_2_3.htm#9208">&#167;4.2.3</a> for a general discussion of the floating-point types and values.
<p><a name="232096"></a>
A <i>floating-point literal</i> has the following parts: a whole-number part, a decimal point (represented by an ASCII period character), a fractional part, an exponent, and a type suffix. The exponent, if present, is indicated by the ASCII letter <code>e</code> or <code>E</code> followed by an optionally signed integer.<p>
<a name="48344"></a>
At least one digit, in either the whole number or the fraction part, and either a decimal point, an exponent, or a float type suffix are required. All other parts are optional.<p>
<a name="76707"></a>
A floating-point literal is of type <code>float</code> if it is suffixed with an ASCII letter <code>F</code> or <code>f</code>; otherwise its type is <code>double</code> and it can optionally be suffixed with an ASCII letter <code>D</code> or <code>d</code>.<p>
<pre>
<i><i>FloatingPointLiteral</i>:<br>
<i>	Digits</i><code> . </code><i>Digits</i>opt<code> </code><i>ExponentPart</i>opt<code> </code>FloatTypeSuffixopt<br>
	<code>. </code><i>Digits</i><code> </code><i>ExponentPart</i>opt<code> </code>FloatTypeSuffixopt<br>
	<i>Digits</i><code> </code><i>ExponentPart</i><code> </code>FloatTypeSuffixopt<br>
	Digits<code> </code>ExponentPartopt<code> </code>FloatTypeSuffix
</i>
<i><i>ExponentPart</i>:<br>
	ExponentIndicator<code> </code>SignedInteger
</i>
<i>ExponentIndicator: one of<br>
	<code>e E
</code></i>
<i>SignedInteger:<br>
	Signopt<code> </code>Digits
</i>
<i>Sign: one of<br>
	<code>+ -
</code></i>
<i>FloatTypeSuffix: one of<br>
	<code>f F d D
</code></i></pre><p><a name="230642"></a>
The Java types <code>float</code> and <code>double</code> are IEEE 754 32-bit single-precision and 64-bit double-precision binary floating-point values, respectively.<p>
<a name="230643"></a>
The details of proper input conversion from a Unicode string representation of a floating-point number to the internal IEEE 754 binary floating-point representation are described for the methods <code>valueOf</code> of class <code>Float</code> <a href="20_9.htm#7256">(&#167;20.9.17)</a> and class <code>Double</code> <a href="20_10.htm#1541">(&#167;20.10.16)</a> of the package <code>java.lang</code>.<p>
<a name="76740"></a>
The largest positive finite <code>float</code> literal is <code>3.40282347e+38f</code>. The smallest positive finite nonzero literal of type <code>float</code> is <code>1.40239846e-45f</code>. The largest positive finite <code>double</code> literal is <code>1.79769313486231570e+308</code>. The smallest positive finite nonzero literal of type <code>double</code> is <code>4.94065645841246544e-324</code>.<p>
<a name="229595"></a>
See <code>Float.MIN_VALUE</code> <a href="20_9.htm#14404">(&#167;20.9.1)</a> and <code>Float.MAX_VALUE </code><a href="20_9.htm#2303">(&#167;20.9.2)</a>; see also <code>Double.MIN_VALUE</code> <a href="20_10.htm#3571">(&#167;20.10.1)</a> and <code>Double.MAX_VALUE </code><a href="20_10.htm#3573">(&#167;20.10.2)</a>.<p>
<a name="50569"></a>
A compile-time error occurs if a nonzero floating-point literal is too large, so that on rounded conversion to its internal representation it becomes an IEEE 754 infinity. A Java program can represent infinities without producing a compile-time error by using constant expressions such as <code>1f/0f</code> or <code>-1d/0d</code> or by using the predefined constants <code>POSITIVE_INFINITY</code> and <code>NEGATIVE_INFINITY</code> of the classes <code>Float</code> <a href="20_9.htm#14394">(&#167;20.9)</a> and <code>Double</code> <a href="20_10.htm#14390">(&#167;20.10)</a>.<p>
<a name="229608"></a>
A compile-time error occurs if a nonzero floating-point literal is too small, so that, on rounded conversion to its internal representation, it becomes a zero. A compile-time error does not occur if a nonzero floating-point literal has a small value that, on rounded conversion to its internal representation, becomes a nonzero denormalized number.<p>
<a name="26899"></a>
Predefined constants representing Not-a-Number values are defined in the classes <code>Float</code> and <code>Double</code> as <code>Float.NaN</code> <a href="20_9.htm#1411">(&#167;20.9.5)</a> and <code>Double.NaN</code> <a href="20_10.htm#13844">(&#167;20.10.5)</a>.<p>
<a name="26906"></a>
Examples of <code>float</code> literals:<p>
<pre><a name="51298"></a>	1e1f			2.f			.3f		0f		3.14f			6.022137e+23f
</pre><p><a name="48365"></a>
Examples of <code>double</code> literals:<p>
<pre><a name="48366"></a>	1e1			2.			.3		0.0		3.14			1e-9d		1e137
</pre><p><a name="23781"></a>
There is no provision for expressing floating-point literals in other than decimal radix. However, method <code>intBitsToFloat</code> <a href="20_9.htm#5683">(&#167;20.9.23)</a> of class <code>Float</code> and method <code>longBitsToDouble</code> <a href="20_10.htm#13864">(&#167;20.10.22)</a> of class <code>Double</code> provide a way to express floating-point values in terms of hexadecimal or octal integer literals. For example, the value of:<p>
<pre><a name="23788"></a>Double.longBitsToDouble(0x400921FB54442D18L)
</pre><p><a name="231039"></a>
is equal to the value of <code>Math.PI</code> 
<a href="20_11.htm#13944">(&#167;20.11.2)</a>.
<p>

</body></html>

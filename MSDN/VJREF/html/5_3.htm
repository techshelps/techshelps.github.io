<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.3 Method Invocation Conversion</title>
<META NAME=MS-HAID CONTENT="5_3">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>5.3	 Method Invocation Conversion</h2>
<a name="12687"></a>
<p>
<a name="53171"></a>
<i>Method invocation conversion</i> is applied to each argument value in a method or 
constructor invocation (<a href="15_8.htm#41147">&#167;15.8</a>, <a href="15_11.htm#20448">&#167;15.11</a>): the type of the argument expression must 
be converted to the type of the corresponding parameter. Method invocation contexts allow the use of an identity conversion <a href="5_1_1.htm#25209">(&#167;5.1.1)</a>, a widening primitive conversion <a href="5_1_2.htm#25222">(&#167;5.1.2)</a>, or a widening reference conversion <a href="5_1_4.htm#25215">(&#167;5.1.4)</a>.
<p><a name="26526"></a>
Method invocation conversions specifically do not include the implicit narrowing of integer constants which is part of assignment conversion <a href="5_2.htm#170768">(&#167;5.2)</a>. The Java designers felt that including these implicit narrowing conversions would add additional complexity to the overloaded method matching resolution process <a href="15_11_2.htm#21693">(&#167;15.11.2)</a>. Thus, the example:<p>
<pre><a name="12738"></a>
class Test {
<br><a name="13070"></a>	static int m(byte a, int b) { return a+b; }
<br><br><a name="20310"></a>	static int m(short a, short b) { return a-b; }
<br><a name="13071"></a>	public static void main(String[] args) {
<a name="13072"></a>		System.out.println(m(12, 2));										// compile-time error
<a name="20350"></a>	}
<br><a name="13077"></a>}
</pre><p><a name="20230"></a>
causes a compile-time error because the integer literals <code>12</code> and <code>2</code> have type <code>int</code>, so 
neither method <code>m</code> matches under the rules of <a href="15_11_2.htm#21693">(&#167;15.11.2)</a>. A language that included 
implicit narrowing of integer constants would need additional rules to resolve 
cases like this example.
<p>

</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.5 Determining the Meaning of a Name</title>
<META NAME=MS-HAID CONTENT="6_5">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>6.5	 Determining the Meaning of a Name</h2>
<a name="20569"></a>
<p>
<a name="22344"></a>
The meaning of a name in Java depends on the context in which it is used. The 
determination of the meaning of a name requires three steps. First, context causes 
a name syntactically to fall into one of five categories: <i>PackageName</i>, <i>TypeName</i>, 
<i>ExpressionName</i>, <i>MethodName</i>, or <i>AmbiguousName</i>. Second, a name that is initially classified by its context as an <i>AmbiguousName</i> is then reclassified by certain 
scoping rules to be a <i>PackageName</i>, <i>TypeName</i>, or <i>ExpressionName</i>. Third, the 
resulting category then dictates the final determination of the meaning of the name 
(or a compilation error if the name has no meaning).
<p><pre>
<i>PackageName:<br>
	Identifier<br>
	PackageName<code> . </code>Identifier
</i>
<i>TypeName:<br>
	Identifier<br>
	PackageName<code> . </code>Identifier
</i>
<i>ExpressionName:<br>
	Identifier<br>
	AmbiguousName<code> . </code>Identifier
</i>
<i>MethodName:<br>
	Identifier<br>
	AmbiguousName<code> . </code>Identifier
</i>
<i>AmbiguousName:<br>
	Identifier<br>
	AmbiguousName<code> . </code>Identifier
</i></pre><p><a name="32744"></a>
Java's use of context helps to minimize name conflicts between entities of different kinds. Such conflicts will be rare if the naming conventions described in <a href="6_8.htm#11186">&#167;6.8</a> are followed. Nevertheless, conflicts may arise unintentionally as types developed by different programmers or different organizations evolve. For example, types, methods, and fields may have the same name. Java never has trouble distinguishing between a method and a field with the same name, since the context of a use always tells whether a method or a field is intended.<p>


</body></html>

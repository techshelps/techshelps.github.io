<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>15.4 Expressions and Run-Time Checks</title>
<META NAME=MS-HAID CONTENT="15_4">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>15.4	 Expressions and Run-Time Checks</h2>
<a name="233992"></a>
<p>
<a name="233993"></a>
If the type of an expression is a primitive type, then the value of the expression is 
of that same primitive type. But if the type of an expression is a reference type, 
then the class of the referenced object, or even whether the value is a reference to 
an object rather than <code>null</code>, is not necessarily known at compile time. There are a 
few places in the Java language where the actual class of a referenced object 
affects program execution in a manner that cannot be deduced from the type of the 
expression. They are as follows:
<p><ul><a name="79422"></a>
<li>Method invocation <a href="15_11.htm#20448">(&#167;15.11)</a>. The particular method used for an invocation <code>o.m(</code>...<code>)</code> is chosen based on the methods that are part of the class or interface that is the type of <code>o</code>. For instance methods, the class of the object referenced by the run-time value of <code>o</code> participates because a subclass may override a specific method already declared in a parent class so that this overriding method is invoked. (The overriding method may or may not choose to further invoke the original overridden <code>m</code> method.)
<a name="79436"></a>
<li>The <code>instanceof</code> operator <a href="15_19_2.htm#80289">(&#167;15.19.2)</a>. An expression whose type is a reference type may be tested using <code>instanceof</code> to find out whether the class of the object referenced by the run-time value of the expression is assignment compatible <a href="5_2.htm#170768">(&#167;5.2)</a> with some other reference type.
<a name="35797"></a>
<li>Casting (<a href="5_4.htm#176921">&#167;5.4</a>, <a href="15_15.htm#238146">&#167;15.15</a>). The class of the object referenced by the run-time value of the operand expression might not be compatible with the type specified by the cast. For reference types, this may require a run-time check that throws an error if the class of the referenced object, as determined at run time, is not assignment &#32;compatible <a href="5_2.htm#170768">(&#167;5.2)</a> with the target type.
<a name="35800"></a>
<li>Assignment to an array component of reference type (<a href="10_10.htm#11430">&#167;10.10</a>, <a href="15_12.htm#239587">&#167;15.12</a>, <a href="15_25_1.htm#5295">&#167;15.25.1</a>). The type-checking rules allow the array type <i>S</i><code>[]</code> to be treated as a subtype of <i>T</i><code>[]</code> if <i>S</i> is a subtype of <i>T</i>, but this requires a run-time check for assignment to an army component, similar to the check performed for a cast.
<a name="79438"></a>
<li>Exception handling <a href="14_18.htm#79311">(&#167;14.18)</a>. An exception is caught by a <code>catch</code> clause only if the class of the thrown exception object is an <code>instanceof</code> the type of the formal parameter of the <code>catch</code> clause.
</ul><p><a name="35847"></a>
The first two of the cases just listed ought never to result in detecting a type error. 
Thus, a Java run-time type error can occur only in these situations:
<p><ul><a name="79443"></a>
<li>In a cast, when the actual class of the object referenced by the value of the operand expression is not compatible with the target type specified by the cast operator (<a href="5_4.htm#176921">&#167;5.4</a>, <a href="15_15.htm#238146">&#167;15.15</a>); in this case a <code>ClassCastException</code> is thrown.
<a name="79444"></a>
<li>In an assignment to an array component of reference type, when the actual class of the object referenced by the value to be assigned is not compatible with the actual run-time component type of the array (<a href="10_10.htm#11430">&#167;10.10</a>, <a href="15_12.htm#239587">&#167;15.12</a>, <a href="15_25_1.htm#5295">&#167;15.25.1</a>); in this case an <code>ArrayStoreException</code> is thrown.
<a name="79445"></a>
<li>When an exception is not caught by any <code>catch</code> handler <a href="11_3.htm#44153">(&#167;11.3)</a>; in this case the thread of control that encountered the exception first invokes the method <code>uncaughtException</code> &#32;<a href="20_21.htm#2901">(&#167;20.21.31)</a> for its thread group and then terminates.
</ul><p>

</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>16.2.11 break, continue, return, and throw Statements</title>
<META NAME=MS-HAID CONTENT="16_2_11">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>16.2.11	 break, continue, return, and throw Statements</h3>
<a name="26235"></a>
<p>
<a name="44050"></a>
<p>
<ul><a name="26236"></a>
<li>By convention, we say that <i>V</i><i></i> is definitely assigned after any <code>break</code>, <code>continue</code>, <code>return</code>, or <code>throw</code> statement. The notion that a variable is "definitely assigned after" a statement or expression really means "is definitely assigned after the statement or expression completes normally". Because a <code>break</code>, <code>continue</code>, <code>return</code>, or <code>throw</code> statement never completes normally, it vacuously satisfies this notion.
<a name="26237"></a>
<li>In a <code>return</code> statement with an expression or a <code>throw</code> statement, <i>V</i><i></i> is definitely assigned before the expression iff <i>V</i><i></i> is definitely assigned before the <code>return</code> or <code>throw</code> statement.
</ul><p>

</body></html>

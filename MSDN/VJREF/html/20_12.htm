<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>20.12 The Class java.lang.String</title>
<META NAME=MS-HAID CONTENT="20_12">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>20.12	 The Class java.lang.String</h1>
<a name="14460"></a>
<p>
<a name="3996"></a>
An object of type <code>String</code>, once created, is immutable. It represents a fixed-length 
sequence of characters. Compare this to the class <code>StringBuffer</code> <a href="20_13.htm#14461">(&#167;20.13)</a>, which 
represents a modifiable, variable-length sequence of characters.
<p><a name="3997"></a>
The class <code>String</code> has methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, for creating a copy of a string with all characters translated to uppercase or to lowercase, and so on.<p>
<pre><a name="13978"></a>public final class <code><b>String</b></code> {
<a name="2914"></a>	public <code><b>String</b></code>();
<a name="31197"></a>	public <code><b>String</b></code>(String value)
<a name="2915"></a>		throws NullPointerException;
<a name="31200"></a>	public <code><b>String</b></code>(StringBuffer buffer)
<a name="2916"></a>		throws NullPointerException;
<a name="31190"></a>	public <code><b>String</b></code>(char[] value)
<a name="2917"></a>		throws NullPointerException;
<a name="2918"></a>	public <code><b>String</b></code>(char[] value, int offset, int count)
<a name="25471"></a>		throws <code>NullPointerException</code>, IndexOutOfBoundsException;
<a name="2919"></a>	public <code><b>String</b></code>(byte[] ascii, int hibyte)
<a name="31215"></a>		throws NullPointerException;
<a name="2920"></a>	public <code><b>String</b></code>(byte[] ascii, int hibyte,
<a name="25148"></a>			int offset, int count)
<a name="25476"></a>		throws <code>NullPointerException</code>, IndexOutOfBoundsException;
<a name="2921"></a>	public String <code><b>toString</b></code>();
<a name="2922"></a>	public boolean <code><b>equals</b></code>(Object anObject);
<a name="2923"></a>	public int <code><b>hashCode</b></code>();
<a name="2924"></a>	public int <code><b>length</b></code>();
<a name="2925"></a>	public char <code><b>charAt</b></code>(int index);
<a name="2926"></a>	public void <code><b>getChars</b></code>(int srcBegin, int srcEnd,
<a name="31148"></a>			char dst[], int dstBegin)<br>
		throws NullPointerException, IndexOutOfBoundsException;
<a name="2927"></a>	public void <code><b>getBytes</b></code>(int srcBegin, int srcEnd,
<a name="31145"></a>			byte dst[], int dstBegin)
<a name="31140"></a>		throws NullPointerException, IndexOutOfBoundsException;
<a name="2928"></a>	public char[] <code><b>toCharArray</b></code>();
<a name="2929"></a>	public boolean <code><b>equalsIgnoreCase</b></code>(String anotherString);
<a name="2930"></a>	public int <code><b>compareTo</b></code>(String anotherString)
<a name="31155"></a>		throws NullPointerException;
<a name="31157"></a>	public boolean <code><b>regionMatches</b></code>(int toffset, String other,<br>
			int ooffset, int len)
<a name="2931"></a>		throws NullPointerException;
<a name="31160"></a>	public boolean <code><b>regionMatches</b></code>(boolean ignoreCase, int toffset,<br>
			String other, int ooffset, int len)
<a name="2932"></a>		throws NullPointerException;
<a name="31163"></a>	public boolean <code><b>startsWith</b></code>(String prefix)
<a name="2933"></a>		throws NullPointerException;
<a name="31166"></a>	public boolean <code><b>startsWith</b></code>(String prefix, int toffset)
<a name="2934"></a>		throws NullPointerException;
<a name="31169"></a>	public boolean <code><b>endsWith</b></code>(String suffix)
<a name="2935"></a>		throws NullPointerException;
<a name="2936"></a>	public int <code><b>indexOf</b></code>(int ch);
<a name="2937"></a>	public int <code><b>indexOf</b></code>(int ch, int fromIndex);
<a name="31172"></a>	public int <code><b>indexOf</b></code>(String str)
<a name="2938"></a>		throws NullPointerException;
<a name="31175"></a>	public int <code><b>indexOf</b></code>(String str, int fromIndex)
<a name="2939"></a>		throws NullPointerException;
<a name="2940"></a>	public int <code><b>lastIndexOf</b></code>(int ch);
<a name="2941"></a>	public int <code><b>lastIndexOf</b></code>(int ch, int fromIndex);
<a name="31178"></a>	public int <code><b>lastIndexOf</b></code>(String str)
<a name="2942"></a>		throws NullPointerException;
<a name="31181"></a>	public int <code><b>lastIndexOf</b></code>(String str, int fromIndex)
<a name="2943"></a>		throws NullPointerException;
<a name="2944"></a>	public String <code><b>substring</b></code>(int beginIndex);
<a name="2945"></a>	public String <code><b>substring</b></code>(int beginIndex, int endIndex);
<a name="31184"></a>	public String <code><b>concat</b></code>(String str)
<a name="2946"></a>		throws NullPointerException;
<a name="2947"></a>	public String <code><b>replace</b></code>(char oldChar, char newChar);
<a name="2948"></a>	public String <code><b>toLowerCase</b></code>();
<a name="2949"></a>	public String <code><b>toUpperCase</b></code>();
<a name="2950"></a>	public String <code><b>trim</b></code>();
<a name="2951"></a>	public static String <code><b>valueOf</b></code>(Object obj);
<a name="31187"></a>	public static String <code><b>valueOf</b></code>(char[] data)
<a name="2952"></a>		throws NullPointerException;
<a name="2953"></a>	public static String <code><b>valueOf</b></code>(char[] data,
<a name="25149"></a>			int offset, int count)
<a name="25466"></a>		throws <code>NullPointerException</code>, IndexOutOfBoundsException;
<a name="2956"></a>	public static String <code><b>valueOf</b></code>(boolean b);
<a name="2957"></a>	public static String <code><b>valueOf</b></code>(char c);
<a name="2958"></a>	public static String <code><b>valueOf</b></code>(int i);
<a name="2959"></a>	public static String <code><b>valueOf</b></code>(long l);
<a name="2960"></a>	public static String <code><b>valueOf</b></code>(float f);
<a name="2961"></a>	public static String <code><b>valueOf</b></code>(double d);
<a name="2962"></a>	public String <code><b>intern</b></code>();
<a name="2974"></a>}
</pre><p><a name="13979"></a>
<p><strong>20.12.1	</strong> <code>public String()</code>
<p>
<a name="4006"></a>
This constructor initializes a newly created <code>String</code> object so that it represents an 
empty character sequence.
<p><a name="13980"></a>
<p><strong>20.12.2	</strong> <code>public String(String value)</code>
<p>
<a name="31205"></a>
This constructor initializes a newly created <code>String</code> object so that it represents the 
same sequence of characters as the argument; in other words, the newly created 
string is a copy of the argument string.
<p><a name="31206"></a>
<p><strong>20.12.3	</strong> <code>public String(StringBuffer buffer)<br>throws NullPointerException</code>
<p>
<a name="31207"></a>
This constructor initializes a newly created <code>String</code> object so that it represents the 
sequence of characters that is currently contained in the <code>StringBuffer</code> argument 
<a href="20_13.htm#14461">(&#167;20.13)</a>. The contents of the string buffer are copied; subsequent modification of 
the string buffer does not affect the newly created string.
<p><a name="31239"></a>
If <code>buffer</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="4024"></a>
<p><strong>20.12.4	</strong> <code>public String(char[] data)<br>throws NullPointerException</code>
<p>
<a name="4044"></a>
This constructor initializes a newly created <code>String</code> object so that it represents the 
sequence of characters currently contained in the character array argument. The 
contents of the character array are copied; subsequent modification of the character array does not affect the newly created string.
<p><a name="31243"></a>
If <code>data</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="34330"></a>
<p><strong>20.12.5	</strong> <code>public String(char[] data, int offset, int count)<br>throws NullPointerException,  &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="34331"></a>
This constructor initializes a newly created <code>String</code> object so that it represents the 
sequence of characters currently contained in a subarray of the character array 
argument. The <code>offset</code> argument is the index of the first character of the subarray 
and the <code>count</code> argument specifies the length of the subarray. The contents of the 
subarray are copied; subsequent modification of the character array does not affect 
the newly created string.
<p><a name="25495"></a>
If <code>data</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="25496"></a>
If <code>offset</code> is negative, or <code>count</code> is negative, or <code>offset+count</code> is larger than <code>data.length</code>, then an <code>IndexOutOfBoundsException</code> is thrown.<p>
<a name="4041"></a>
<p><strong>20.12.6	</strong> <code>public String(byte[] ascii, int hibyte)<br>throws NullPointerException</code>
<p>
<a name="4137"></a>
This constructor initializes a newly created <code>String</code> object so that it represents a 
sequence of characters constructed from an array of 8-bit integer values. Each 
character <code>c</code> in the result string is constructed from the corresponding element <code>b</code> of 
the byte array in such a way that:
<p><pre><a name="4144"></a><i>c</i> == ((hibyte &amp; 0xff) &lt;&lt; 8) | (<i>b</i> &amp; 0xff)
</pre><p><a name="31245"></a>
If <code>ascii</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="4151"></a>
<p><strong>20.12.7	</strong> <code>public String(byte[] ascii, int hibyte,<br> &#32; &#32; &#32;int offset, int count) <br>throws NullPointerException,<br> &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="4174"></a>
This constructor initializes a newly created <code>String</code> object so that it represents the 
sequence of characters constructed from a subarray of an array of 8-bit integer 
values. The <code>offset</code> argument is the index of the first byte of the subarray and the 
<code>count</code> argument specifies the length of the subarray. Each character <code>c</code> in the result 
string is constructed from the corresponding element <code>b</code> of the byte subarray in 
such a way that:
<p><pre><a name="4175"></a><i>c</i> == ((hibyte &amp; 0xff) &lt;&lt; 8) | (<i>b</i> &amp; 0xff)
</pre><p><a name="25504"></a>
If <code>ascii</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="25505"></a>
If <code>offset</code> is negative, or <code>count</code> is negative, or <code>offset+count</code> is larger than <code>ascii.length</code>, then an <code>IndexOutOfBoundsException</code> is thrown.<p>
<a name="4156"></a>
<p><strong>20.12.8	</strong> <code>public String toString()</code>
<p>
<a name="4153"></a>
A reference to this object (which is, after all, already a <code>String</code>) is returned.
<p><a name="4074"></a>
Overrides the <code>toString</code> method of <code>Object</code> <a href="20_1.htm#1152">(&#167;20.1.2)</a>.<p>
<a name="2573"></a>
<p><strong>20.12.9	</strong> <code>public boolean equals(Object anObject)</code>
<p>
<a name="4078"></a>
The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>String</code> object 
that represents the same sequence of characters as this <code>String</code> object.
<p><a name="4082"></a>
Overrides the <code>equals</code> method of <code>Object</code> <a href="20_1.htm#14865">(&#167;20.1.3)</a>.<p>
<a name="4108"></a>
See also the methods <code>equalsIgnoreCase</code> <a href="20_12.htm#13990">(&#167;20.12.16)</a> and <code>compareTo</code> <a href="20_12.htm#13991">(&#167;20.12.17)</a>.<p>
<a name="2574"></a>
<p><strong>20.12.10	</strong> <code>public int hashCode()</code>
<p>
<a name="4181"></a>
The hashcode for a <code>String</code> object is computed in one of two ways, depending on 
its length. Let <i>n</i> be the length <a href="20_12.htm#13985">(&#167;20.12.11)</a> of the character sequence and let <img src="laanc42.gif"> 
mean the character with index <i>i</i>.
<p><ul><a name="4202"></a>
<li>If <img src="laanc43.gif">, then the hashcode is computed as<img src="laanc44.gif"><br> using <code>int</code> arithmetic.
<a name="4212"></a>
<li>If <img src="laanc45.gif">, then the hashcode is computed as<img src="laanc46.gif"><br>using <code>int</code> arithmetic, where <img src="laanc47.gif"> and <img src="laanc48.gif">, sampling only eight or nine characters of the string.
</ul><p><a name="4099"></a>
Overrides the <code>hashCode</code> method of <code>Object</code> <a href="20_1.htm#13784">(&#167;20.1.4)</a>.<p>
<a name="13985"></a>
<p><strong>20.12.11	</strong> <code>public int length()</code>
<p>
<a name="4123"></a>
The length of the sequence of characters represented by this <code>String</code> object is 
returned.
<p><a name="13986"></a>
<p><strong>20.12.12	</strong> <code>public char charAt(int index)<br>throws IndexOutOfBoundsException</code>
<p>
<a name="4241"></a>
This method returns the character indicated by the <code>index</code> argument within the 
sequence of characters represented by this <code>String</code>. The first character of the 
sequence is at index <code>0</code>, the next at index <code>1</code>, and so on, as for array indexing. If the 
<code>index</code> argument is negative or not less than the length <a href="20_12.htm#13985">(&#167;20.12.11)</a> of this string, 
then an <code>IndexOutOfBoundsException</code> is thrown.
<p><a name="4251"></a>
<p><strong>20.12.13	</strong> <code>public void getChars(int srcBegin, int srcEnd,<br>	 &#32; &#32; &#32;char dst[], int dstBegin)<br>throws NullPointerException,<br> &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="4268"></a>
Characters are copied from this <code>String</code> object into the destination character array 
<code>dst</code>. The first character to be copied is at index <code>srcBegin</code>; the last character to be 
copied is at index <code>srcEnd-1</code> (thus the total number of characters to be copied is 
<code>srcEnd-srcBegin</code>). The characters are copied into the subarray of <code>dst</code> starting at 
index <code>dstBegin</code> and ending at index <code>dstbegin+(srcEnd-srcBegin)-1</code>.
<p><a name="31249"></a>
If <code>dst</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="31263"></a>
An <code>IndexOutOfBoundsException</code> is thrown if any of the following is true:<p>
<ul><a name="31250"></a>
<li><code>srcBegin</code> is negative
<a name="31268"></a>
<li><code>srcBegin</code> is greater than <code>srcEnd</code>
<a name="31276"></a>
<li><code>srcEnd</code> is greater than the length of this String
<a name="31280"></a>
<li><code>dstBegin</code> is negative
<a name="31283"></a>
<li><code>dstBegin+(srcEnd-srcBegin)</code> is larger than <code>dst.length</code>
</ul><p><a name="4252"></a>
<p><strong>20.12.14	</strong> <code>public void getBytes(int srcBegin, int srcEnd,<br> &#32; &#32; &#32;byte dst[], int dstBegin)<br>throws NullPointerException, <br> &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="4273"></a>
Characters are copied from this <code>String</code> object into the destination byte array <code>dst</code>. 
Each byte receives only the eight low-order bits of the corresponding character. 
The eight high-order bits of each character are not copied and do not participate in 
the transfer in any way. The first character to be copied is at index <code>srcBegin</code>; the 
last character to be copied is at index <code>srcEnd-1</code> (thus the total number of characters to be copied is <code>srcEnd-srcBegin</code>). The characters, converted to bytes, are 
copied into the subarray of <code>dst</code> starting at index <code>dstBegin</code> and ending at index 
<code>dstbegin+(srcEnd-srcBegin)-1</code>.
<p><a name="31285"></a>
If <code>dst</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="31286"></a>
An <code>IndexOutOfBoundsException</code> is thrown if any of the following is true:<p>
<ul><a name="31287"></a>
<li><code>srcBegin</code> is negative
<a name="31288"></a>
<li><code>srcBegin</code> is greater than <code>srcEnd</code>
<a name="31289"></a>
<li><code>srcEnd</code> is greater than the length of this String
<a name="31290"></a>
<li><code>dstBegin</code> is negative
<a name="31291"></a>
<li><code>dstBegin+(srcEnd-srcBegin)</code> is larger than <code>dst.length</code>
</ul><p><a name="2612"></a>
<p><strong>20.12.15	</strong> <code>public char[] toCharArray()</code>
<p>
<a name="4279"></a>
A new character array is created and returned. The length of the array is equal to 
the length <a href="20_12.htm#13985">(&#167;20.12.11)</a> of this <code>String</code> object. The array is initialized to contain the 
character sequence represented by this <code>String</code> object.
<p><a name="13990"></a>
<p><strong>20.12.16	</strong> <code>public boolean equalsIgnoreCase(String anotherString)</code>
<p>
<a name="4299"></a>
The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>String</code> object 
that represents the same sequence of characters as this <code>String</code> object, where case 
is ignored.
<p><a name="4302"></a>
Two characters are considered the same, ignoring case, if at least one of the following is true:<p>
<ul><a name="4303"></a>
<li>The two characters are the same (as compared by the <code>==</code> operator).
<a name="4307"></a>
<li>Applying the method <code>Character.toUppercase</code> <a href="20_5.htm#9154">(&#167;20.5.21)</a> to each character produces the same result.
<a name="4311"></a>
<li>Applying the method <code>Character.toLowercase</code> <a href="20_5.htm#20313">(&#167;20.5.20)</a> to each character produces the same result.
</ul><p><a name="4357"></a>
Two sequences of characters are the same, ignoring case, if the sequences have the same length and corresponding characters are the same, ignoring case.<p>
<a name="4117"></a>
See also the method <code>equals</code> <a href="20_12.htm#2573">(&#167;20.12.9)</a>.<p>
<a name="13991"></a>
<p><strong>20.12.17	</strong> <code>public int compareTo(String anotherString)<br>throws NullPointerException</code>
<p>
<a name="4362"></a>
The character sequence represented by this <code>String</code> object is compared lexicographically to the character sequence represented by the argument string. The 
result is a negative integer if this <code>String</code> object lexicographically precedes the 
argument string. The result is a positive integer if this <code>String</code> object lexicographically follows the argument string. The result is zero if the strings are equal; <code>compareTo</code> returns <code>0</code> exactly when the <code>equals</code> method <a href="20_15.htm#29026">(&#167;20.12.9)</a> would return <code>true</code>.
<p><a name="31297"></a>
If <code>anotherString</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="4387"></a>
This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at some index that is a valid index for both strings, or their lengths are different, or both. If they have different characters at one or more index positions, let <i>k</i> be the smallest such index; then the string whose character at position <i>k</i> has the smaller value, as determined by using the <code>&lt;</code> operator, lexicographically precedes the other string. In this case, <code>compareTo</code> returns the difference of the two character values at position <i>k</i> in the two strings- that is, the value:<p>
<pre><a name="4394"></a>this.charAt(<i>k</i>)-anotherString.charAt(<i>k</i>)
</pre><p><a name="4395"></a>
If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case, <code>compareTo</code> returns the difference of the lengths of the strings-that is, the value:
<p><pre><a name="25174"></a>this.length()-anotherString.length()
</pre><p><a name="4360"></a>
<p><strong>20.12.18	</strong> <code>public boolean regionMatches(int toffset,<br> &#32; &#32; &#32;String other, int ooffset, int len)<br>throws NullPointerException</code>
<p>
<a name="4866"></a>
A substring of this <code>String</code> object is compared to a substring of the argument 
<code>other</code>. The result is <code>true</code> if these substrings represent identical character 
sequences. The substring of this <code>String</code> object to be compared begins at index 
<code>toffset</code> and has length <code>len</code>. The substring of <code>other</code> to be compared begins at 
index <code>ooffset</code> and has length <code>len</code>. The result is <code>false</code> if and only if at least one 
of the following is true:
<p><ul><a name="4882"></a>
<li><code>toffset</code> is negative.
<a name="4876"></a>
<li><code>ooffset</code> is negative.
<a name="4883"></a>
<li><code>toffset+len</code> is greater than the length of this <code>String</code> object.
<a name="4884"></a>
<li><code>ooffset+len</code> is greater than the length of the <code>other</code> argument.
<a name="4885"></a>
<li>There is some nonnegative integer <i>k</i> less than <code>len</code> such that:
<a name="4886"></a>this.charAt(toffset+<i>k</i>) != other.charAt(ooffset+<i>k</i>)
</ul><p><a name="31301"></a>
If <code>other</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.
<p><a name="13993"></a>
<p><strong>20.12.19	</strong> <code>public boolean regionMatches(boolean ignoreCase,<br> &#32; &#32; &#32;int toffset, String other, int ooffset, int len)<br>throws NullPointerException</code>
<p>
<a name="4893"></a>
A substring of this <code>String</code> object is compared to a substring of the argument 
<code>other</code>. The result is <code>true</code> if these substrings represent character sequences that 
are the same, ignoring case if and only if <code>ignoreCase</code> is true. The substring of 
this <code>String</code> object to be compared begins at index <code>toffset</code> and has length <code>len</code>. 
The substring of <code>other</code> to be compared begins at index <code>ooffset</code> and has length 
<code>len</code>. The result is <code>false</code> if and only if at least one of the following is true:
<p><ul><a name="4894"></a>
<li><code>toffset</code> is negative.
<a name="4895"></a>
<li><code>ooffset</code> is negative.
<a name="4896"></a>
<li><code>toffset+len</code> is greater than the length of this <code>String</code> object.
<a name="4897"></a>
<li><code>ooffset+len</code> is greater than the length of the <code>other</code> argument.
<a name="4909"></a>
<li>There is some nonnegative integer <i>k</i> less than <code>len</code> such that:
<a name="4910"></a>this.charAt(toffset+<i>k</i>) != other.charAt(ooffset+<i>k</i>)
<a name="4923"></a>
<li><code>ignoreCase</code> is <code>true</code> and there is some nonnegative integer <i>k</i> less than <code>len</code> such that:
</ul><pre><a name="4924"></a>
Character.toLowerCase(this.charAt(toffset+<i>k</i>)) !=
<a name="31309"></a>	Character.toLowerCase(other.charAt(ooffset+<i>k</i>))
</pre><p><ul><a name="4928"></a>
<br><br><code>and</code>:
</ul><pre><a name="4929"></a>
Character.toUpperCase(this.charAt(toffset+<i>k</i>)) !=
<a name="31308"></a>	Character.toUpperCase(other.charAt(ooffset+<i>k</i>))
</pre><p><a name="31305"></a>
If <code>other</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.
<p><a name="2586"></a>
<p><strong>20.12.20	</strong> <code>public boolean startsWith(String prefix)<br>throws NullPointerException</code>
<p>
<a name="4405"></a>
The result is <code>true</code> if and only if the character sequence represented by the argument is a prefix of the character sequence represented by this <code>String</code> object.
<p><a name="4449"></a>
If <code>prefix</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.<p>
<a name="4416"></a>
Note that the result will be <code>true</code> if the argument is an empty string or is equal to this <code>String</code> object as determined by the <code>equals</code> method <a href="20_12.htm#2573">(&#167;20.12.9)</a>.<p>
<a name="13994"></a>
<p><strong>20.12.21	</strong> <code>public boolean startsWith(String prefix, int toffset)<br>throws NullPointerException</code>
<p>
<a name="4418"></a>
The result is <code>true</code> if and only if the character sequence represented by the argument is a prefix of the substring of this <code>String</code> object starting at index <code>toffset</code>.
<p><a name="4443"></a>
If <code>prefix</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="4430"></a>
The result is <code>false</code> if <code>toffset</code> is negative or greater than the length of this <code>String</code> object; otherwise, the result is the same as the result of the expression<p>
<pre><a name="4429"></a>this.subString(toffset).startsWith(prefix)
</pre><p><a name="13996"></a>
<p><strong>20.12.22	</strong> <code>public boolean endsWith(String suffix)<br>throws NullPointerException</code>
<p>
<a name="4629"></a>
The result is <code>true</code> if and only if the character sequence represented by the argument is a suffix of the character sequence represented by this <code>String</code> object.
<p><a name="4630"></a>
If <code>suffix</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="4631"></a>
Note that the result will be <code>true</code> if the argument is an empty string or is equal to this <code>String</code> object as determined by the <code>equals</code> method <a href="20_15.htm#29026">(&#167;20.12.9)</a>.<p>
<a name="13998"></a>
<p><strong>20.12.23	</strong> <code>public int indexOf(int ch)</code>
<p>
<a name="4452"></a>
If a character with value <code>ch</code> occurs in the character sequence represented by this 
<code>String</code> object, then the index of the first such occurrence is returned-that is, the 
smallest value <i>k</i> such that:
<p><pre><a name="4478"></a><code>this.charAt(</code><i>k</i><code>) == ch
</code></pre><p><a name="4479"></a>
is <code>true</code>. If no such character occurs in this string, then <code>-1</code> is returned.<p>
<a name="13999"></a>
<p><strong>20.12.24	</strong> <code>public int indexOf(int ch, int fromIndex)</code>
<p>
<a name="4460"></a>
If a character with value <code>ch</code> occurs in the character sequence represented by this 
<code>String</code> object at an index no smaller than <code>fromIndex</code>, then the index of the first 
such occurrence is returned-that is, the smallest value <i>k</i> such that:
<p><pre><a name="4480"></a><code>(this.charAt(</code><i>k</i><code>) == ch) &amp;&amp; (</code><i>k</i><code> &gt;= fromIndex)
</code></pre><p><a name="4481"></a>
is <code>true</code>. If no such character occurs in this string at or after position <code>fromIndex</code>, then <code>-1</code> is returned.<p>
<a name="4526"></a>
There is no restriction on the value of <code>fromIndex</code>. If it is negative, it has the same effect as if it were zero: this entire string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: <code>-1</code> is returned.<p>
<a name="4459"></a>
<p><strong>20.12.25	</strong> <code>public int indexOf(String str)<br>throws NullPointerException</code>
<p>
<a name="4483"></a>
If the string <code>str</code> occurs as a substring of this <code>String</code> object, then the index of the 
first character of the first such substring is returned-that is, the smallest value <i>k</i> 
such that:
<p><pre><a name="30900"></a><code>this.startsWith(str, </code><i>k</i><code>)
</code></pre><p><a name="30901"></a>
is <code>true</code>. If <code>str</code> does not occur as a substring of this string, then <code>-1</code> is returned.<p>
<a name="31313"></a>
If <code>str</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.<p>
<a name="30903"></a>
<p><strong>20.12.26	</strong> <code>public int indexOf(String str, int fromIndex)<br>throws NullPointerException</code>
<p>
<a name="4494"></a>
If the string <code>str</code> occurs as a substring of this <code>String</code> object starting at an index no 
smaller than <code>fromIndex</code>, then the index of the first character of the first such substring is returned-that is, the smallest value <i>k</i> such that:
<p><pre><a name="4495"></a><code>this.startsWith(str, </code><i>k</i><code>) &amp;&amp; (</code><i>k</i><code> &gt;= fromIndex)
</code></pre><p><a name="4496"></a>
is <code>true</code>. If <code>str</code> does not occur as a substring of this string at or after position <code>fromIndex</code>, &#32;then <code>-1</code> is returned.<p>
<a name="4528"></a>
There is no restriction on the value of <code>fromIndex</code>. If it is negative, it has the same effect as if it were zero: this entire string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: <code>-1</code> is returned.<p>
<a name="31321"></a>
If <code>str</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.<p>
<a name="14000"></a>
<p><strong>20.12.27	</strong> <code>public int lastIndexOf(int ch)</code>
<p>
<a name="4539"></a>
If a character with value <code>ch</code> occurs in the character sequence represented by this 
<code>String</code> object, then the index of the last such occurrence is returned-that is, the 
largest value <i>k</i> such that:
<p><pre><a name="4540"></a><code>this.charAt(</code><i>k</i><code>) == ch
</code></pre><p><a name="4541"></a>
is true. If no such character occurs in this string, then <code>-1</code> is returned.<p>
<a name="14001"></a>
<p><strong>20.12.28	</strong> <code>public int lastIndexOf(int ch, int fromIndex)</code>
<p>
<a name="4553"></a>
If a character with value <code>ch</code> occurs in the character sequence represented by this 
<code>String</code> object at an index no larger than <code>fromIndex</code>, then the index of the last 
such occurrence is returned-that is, the largest value <i>k</i> such that:
<p><pre><a name="4554"></a><code>(this.charAt(</code><i>k</i><code>) == ch) &amp;&amp; (</code><i>k</i><code> &lt;= fromIndex)
</code></pre><p><a name="4555"></a>
is true. If no such character occurs in this string at or before position <code>fromIndex</code>, then <code>-1</code> is returned.<p>
<a name="4556"></a>
There is no restriction on the value of <code>fromIndex</code>. If it is greater than or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were <code>-1</code>: <code>-1</code> is returned.<p>
<a name="14004"></a>
<p><strong>20.12.29	</strong> <code>public int lastIndexOf(String str)<br>throws NullPointerException</code>
<p>
<a name="4586"></a>
If the string <code>str</code> occurs as a substring of this <code>String</code> object, then the index of the 
first character of the last such substring is returned-that is, the largest value <i>k</i> 
such that:
<p><pre><a name="4587"></a><code>this.startsWith(str, </code><i>k</i><code>)
</code></pre><p><a name="4588"></a>
is true. If <code>str</code> does not occur as a substring of this string, then <code>-1</code> is returned.<p>
<a name="31323"></a>
If <code>str</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.<p>
<a name="4608"></a>
<p><strong>20.12.30	</strong> <code>public int lastIndexOf(String str, int fromIndex)<br>throws NullPointerException</code>
<p>
<a name="4609"></a>
If the string <code>str</code> occurs as a substring of this <code>String</code> object starting at an index no 
larger than <code>fromIndex</code>, then the index of the first character of the last such substring is returned-that is, the largest value <i>k</i> such that:
<p><pre><a name="4599"></a><code>this.startsWith(str, </code><i>k</i><code>) &amp;&amp; (</code><i>k</i><code> &lt;= fromIndex)
</code></pre><p><a name="4600"></a>
is <code>true</code>. If <code>str</code> does not occur as a substring of this string at or before position <code>fromIndex</code>, then <code>-1</code> is returned.<p>
<a name="4625"></a>
There is no restriction on the value of <code>fromIndex</code>. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were <code>-1</code>: <code>-1</code> is returned.<p>
<a name="31325"></a>
If <code>str</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.<p>
<a name="4668"></a>
<p><strong>20.12.31	</strong> <code>public String substring(int beginIndex)<br>throws IndexOutOfBoundsException</code>
<p>
<a name="4669"></a>
The result is a newly created <code>String</code> object that represents a subsequence of the 
character sequence represented by this <code>String</code> object; this subsequence begins 
with the character at position <code>beginIndex</code> and extends to the end of the character 
sequence.
<p><a name="4660"></a>
If <code>beginIndex</code> is negative or larger than the length of this <code>String</code> object, then an <code>IndexOutOfBoundsException</code> is thrown.<p>
<a name="25364"></a>
Examples:<p>
<pre><br><a name="25365"></a>"unhappy".substring(2) returns "happy"
<br><br><a name="25374"></a>"Harbison".substring(3) returns "bison"
<br><a name="30913"></a>"emptiness".substring(9) returns "" (an empty string)
</pre><p><a name="14007"></a>
<p><strong>20.12.32	</strong> <code>public String substring(int beginIndex, int endIndex)<br>throws IndexOutOfBoundsException</code>
<p>
<a name="4652"></a>
The result is a newly created <code>String</code> object that represents a subsequence of the 
character sequence represented by this <code>String</code> object; this subsequence begins 
with the character at position <code>beginIndex</code> and ends with the character at position 
<code>endIndex-1</code>. Thus, the length of the subsequence is <code>endIndex-beginIndex</code>.
<p><a name="4686"></a>
If <code>beginIndex</code> is negative, or <code>endIndex</code> is larger than the length of this <code>String</code> object, or <code>beginIndex</code> is larger than <code>endIndex</code>, then this method throws an <code>IndexOutOfBoundsException</code>.<p>
<a name="25371"></a>
Examples:<p>
<pre><br><a name="25372"></a>"hamburger".substring(4, 8) returns "urge"
<br><a name="25378"></a>"smiles".substring(1, 5) returns "mile"
</pre><p><a name="14008"></a>
<p><strong>20.12.33	</strong> <code>public String concat(String str)<br>throws NullPointerException</code>
<p>
<a name="4689"></a>
If the length of the argument string is zero, then a reference to this <code>String</code> object 
is returned. Otherwise, a new <code>String</code> object is created, representing a character 
sequence that is the concatenation of the character sequence represented by this 
<code>String</code> object and the character sequence represented by the argument string.
<p><a name="25355"></a>
Examples:<p>
<pre><a name="25357"></a>
"cares".concat("s") returns "caress"
<a name="25356"></a>"to".concat("get").concat("her") returns "together"
</pre><p><a name="31327"></a>
If <code>str</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.
<p><a name="14009"></a>
<p><strong>20.12.34	</strong> <code>public String replace(char oldChar, char newChar)</code>
<p>
<a name="30707"></a>
If the character <code>oldChar</code> does not occur in the character sequence represented by 
this <code>String</code> object, then a reference to this <code>String</code> object is returned. Otherwise, 
a new <code>String</code> object is created that represents a character sequence identical to 
the character sequence represented by this <code>String</code> object, except that every occurrence of <code>oldChar</code> is replaced by an occurrence of <code>newChar</code>.
<p><a name="30710"></a>
Examples:<p>
<pre><a name="30721"></a>
"mesquite in your cellar".replace('e', 'o')
<a name="30722"></a>					returns "mosquito in your collar"
<a name="30724"></a>"the war of baronets".replace('r', 'y')
<a name="30725"></a>					returns "the way of bayonets"
<a name="30727"></a>"sparring with a purple porpoise".replace('p', 't')
<a name="30728"></a>					returns "starring with a turtle tortoise"
<a name="30712"></a>"JonL".replace('q', 'x') returns "JonL" (no change)
</pre><p><a name="30708"></a>
<p><strong>20.12.35	</strong> <code>public String toLowerCase()</code>
<p>
<a name="4708"></a>
If this <code>String</code> object does not contain any character that is mapped to a different 
character by the method <code>Character.toLowerCase</code> <a href="20_5.htm#20313">(&#167;20.5.20)</a>, then a reference 
to this <code>String</code> object is returned. Otherwise, this method creates a new <code>String</code> 
object that represents a character sequence identical in length to the character 
sequence represented by this <code>String</code> object, with every character equal to the 
result of applying the method <code>Character.toLowerCase</code> to the corresponding 
character of this <code>String</code> object.
<p><a name="25399"></a>
Examples:<p>
<pre><a name="25400"></a>
"French Fries".toLowerCase() returns "french fries"
<a name="25405"></a>"<img src="chars/capiota.gif"><img src="chars/capchi.gif"><img src="chars/captheta.gif"><img src="chars/capupsil.gif"><img src="chars/capsigma.gif">".toLowerCase() returns "<img src="chars/iota.gif"><img src="chars/chi.gif"><img src="chars/theta.gif"><img src="chars/upsilon.gif"><img src="chars/sigma1.gif">"
</pre><p><a name="14011"></a>
<p><strong>20.12.36	</strong> <code>public String toUpperCase()</code>
<p>
<a name="22805"></a>
If this <code>String</code> object does not contain any character that is mapped to a different 
character by the method <code>Character.toUpperCase</code> <a href="20_5.htm#9154">(&#167;20.5.21)</a>, then a reference 
to this <code>String</code> object is returned. Otherwise, this method creates a new <code>String</code> 
object representing a character sequence identical in length to the character 
sequence represented by this <code>String</code> object and with every character equal to the 
result of applying the method <code>Character.toUpperCase</code> to the corresponding 
character of this <code>String</code> object.
<p><a name="25418"></a>
Examples:<p>
<pre><br><a name="25419"></a>"Fahrvergn&uuml;gen".toUpperCase() returns "FAHRVERGN&Uuml;GEN"
<br><a name="25420"></a>"Visit Ljubinje!".toUpperCase() returns "VISIT LJUBINJE!"
</pre><p><a name="14012"></a>
<p><strong>20.12.37	</strong> <code>public String trim()</code>
<p>
<a name="4737"></a>
If this <code>String</code> object represents an empty character sequence, or the first and last 
characters of character sequence represented by this <code>String</code> object both have 
codes greater than <code>\u0020</code> (the space character), then a reference to this <code>String</code> 
object is returned.
<p><a name="4745"></a>
Otherwise, if there is no character with a code greater than <code>\u0020</code> in the string, then a new <code>String</code> object representing an empty string is created and returned.<p>
<a name="4754"></a>
Otherwise, let <i>k</i> be the index of the first character in the string whose code is greater than <code>\u0020</code>, and let <i>m</i> be the index of the last character in the string whose code is greater than <code>\u0020</code>. A new <code>String</code> object is created, representing the substring of this string that begins with the character at index <i>k</i> and ends with the character at index <i>m</i>-that is, the result of <code>this.substring(</code><i>k</i><code>, </code><i>m</i><code>+1)</code>.<p>
<a name="4768"></a>
This method may be used to trim whitespace <a href="20_5.htm#13831">(&#167;20.5.19)</a> from the beginning and end of a string; in fact, it trims all ASCII control characters as well.<p>
<a name="14015"></a>
<p><strong>20.12.38	</strong> <code>public static String valueOf(Object obj)</code>
<p>
<a name="4776"></a>
If the argument is <code>null</code>, then a string equal to <code>"null"</code> is returned. Otherwise, the 
value of <code>obj.toString()</code> is returned. See the <code>toString</code> method <a href="20_1.htm#1152">(&#167;20.1.2)</a>.
<p><a name="4778"></a>
<p><strong>20.12.39	</strong> <code>public static String valueOf(char[] data)<br>throws NullPointerException</code>
<p>
<a name="4796"></a>
A string is created and returned. The string represents the sequence of characters 
currently contained in the character array argument. The contents of the character 
array are copied; subsequent modification of the character array does not affect 
the newly created string.
<p><a name="33348"></a>
<p><strong>20.12.40	</strong> <code>public static String valueOf(char[] data,<br> &#32; &#32; &#32;int offset, int count) <br>throws NullPointerException, <br> &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="4805"></a>
A string is created and returned. The string represents the sequence of characters 
currently contained in a subarray of the character array argument. The <code>offset</code> 
argument is the index of the first character of the subarray and the <code>count</code> argument specifies the length of the subarray. The contents of the subarray are copied; 
subsequent modification of the character array does not affect the newly created 
string.
<p><a name="25485"></a>
If <code>data</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="25493"></a>
If <code>offset</code> is negative, or <code>count</code> is negative, or <code>offset+count</code> is larger than <code>data.length</code>, then an <code>IndexOutOfBoundsException</code> is thrown.<p>
<a name="14020"></a>
<p><strong>20.12.41	</strong> <code>public static String valueOf(boolean b)</code>
<p>
<a name="21730"></a>
A string representation of <code>b</code> is returned.
<p><a name="4813"></a>
If the argument is <code>true</code>, the string <code>"true"</code> is returned.<p>
<a name="4814"></a>
If the argument is <code>false</code>, the string <code>"false"</code> is returned.<p>
<a name="14021"></a>
<p><strong>20.12.42	</strong> <code>public static String valueOf(char c)</code>
<p>
<a name="4790"></a>
A string is created and returned. The string contains one character, equal to <code>c</code>.
<p><a name="14022"></a>
<p><strong>20.12.43	</strong> <code>public static String valueOf(int i)</code>
<p>
<a name="4819"></a>
A string is created and returned. The string is computed exactly as if by the 
method <code>Integer.toString</code> of one argument <a href="20_7.htm#1459">(&#167;20.7.12)</a>.
<p><a name="14023"></a>
<p><strong>20.12.44	</strong> <code>public static String valueOf(long l)</code>
<p>
<a name="4831"></a>
A string is created and returned. The string is computed exactly as if by the 
method <code>Long.toString</code> of one argument <a href="20_8.htm#1452">(&#167;20.8.12)</a>.
<p><a name="14024"></a>
<p><strong>20.12.45	</strong> <code>public static String valueOf(float f)</code>
<p>
<a name="4838"></a>
A string is created and returned. The string is computed exactly as if by the 
method <code>Float.toString</code> of one argument <a href="20_9.htm#1466">(&#167;20.9.16)</a>.
<p><a name="14025"></a>
<p><strong>20.12.46	</strong> <code>public static String valueOf(double d)</code>
<p>
<a name="4845"></a>
A string is created and returned. The string is computed exactly as if by the 
method <code>Double.toString</code> of one argument <a href="20_10.htm#5899">(&#167;20.10.15)</a>.
<p><a name="14026"></a>
<p><strong>20.12.47	</strong> <code>public String intern()</code>
<p>
<a name="4858"></a>
A pool of strings, initially empty, is maintained privately by the class <code>String</code>.
<p><a name="4859"></a>
When the intern method is invoked, if the pool already contains a string equal to this <code>String</code> object as determined by the <code>equals</code> method <a href="20_12.htm#2573">(&#167;20.12.9)</a>, then the string from the pool is returned. Otherwise, this <code>String</code> object is added to the pool and a reference to this <code>String</code> object is returned.<p>
<a name="4863"></a>
It follows that for any two strings <code>s</code> and <code>t</code>, <code>s.intern() == t.intern()</code> is <code>true</code> if and only if <code>s.equals(t)</code> is <code>true</code>.<p>
<a name="32459"></a>
All literal strings and string-valued constant expressions are interned <a href="3_10_5.htm#101083">(&#167;3.10.5)</a>.<p>


</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>9.4 Abstract Method Declarations</title>
<META NAME=MS-HAID CONTENT="9_4">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h2>9.4	 Abstract Method Declarations</h2>
<a name="78651"></a>
<p>
<pre>
<i>AbstractMethodDeclaration:<br>
	AbstractMethodModifiersopt<code> </code>ResultType<code> </code>MethodDeclarator<code> </code>Throwsopt<code> ;
</code></i>
<i>AbstractMethodModifiers:<br>
	AbstractMethodModifier<br>
	AbstractMethodModifiers<code> </code>AbstractMethodModifier
</i>
<i>AbstractMethodModifier: one of<br>
	<code>public&#32;abstract
</code></i></pre><p><a name="36046"></a>
The access modifier <code>public</code> is discussed in <a href="6_6.htm#33916">&#167;6.6</a>. A compile-time error occurs if 
the same modifier appears more than once in an abstract method declaration.
<p><a name="78653"></a>
Every method declaration in the body of an interface is implicitly <code>abstract</code>, so its body is always represented by a semicolon, not a block. For compatibility with older versions of Java, it is permitted but discouraged, as a matter of style, to redundantly specify the <code>abstract</code> modifier for methods declared in interfaces.<p>
<a name="78654"></a>
Every method declaration in the body of an interface is implicitly <code>public</code>. It is permitted, but strongly discouraged as a matter of style, to redundantly specify the <code>public</code> modifier for interface methods.<p>
<a name="38687"></a>
Note that a method declared in an interface must not be declared <code>static</code>, or a compile-time error occurs, because in Java <code>static</code> methods cannot be <code>abstract</code>.<p>
<a name="38689"></a>
Note that a method declared in an interface must not be declared <code>native</code> or <code>synchronized</code>, or a compile-time error occurs, because those keywords describe implementation properties rather than interface properties. However, a method declared in an interface may be implemented by a method that is declared <code>native</code> or <code>synchronized</code> in a class that implements the interface.<p>
<a name="38671"></a>
Note that a method declared in an interface must not be declared <code>final</code> or a compile-time error occurs. However, a method declared in an interface may be implemented by a method that is declared <code>final</code> in a class that implements the interface.<p>


</Font></body></html>

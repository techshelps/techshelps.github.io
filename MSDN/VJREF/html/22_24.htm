<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>22.24 The Class java.io.File</title>
<META NAME=MS-HAID CONTENT="22_24">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>22.24	 The Class java.io.File</h1>
<a name="29705"></a>
<p>
<a name="29706"></a>
A <code>File</code> object contains a <i>path</i>, which is a character string that can be used to identify a file within a file system. A path is assumed to consist of two parts, the <i>directory</i> and the <i>file name</i>, separated by the last occurrence within the path of a 
particular character known as the <i>separator character</i>. Some methods provide 
access to parts of the path string; other methods operate on the file that is identified by the path string. The details of such operations on files are to some extent 
dependent on the implementation of the host file system. The <code>File</code> class is 
designed to provide a set of abstract operations that are reasonably portable across 
otherwise incompatible file systems.
<p><pre><a name="29707"></a>public class <code><b>File</b></code> {
<a name="29708"></a>	public static final String <code><b>separator</b></code> =
<a name="29709"></a>		System.getProperty("file.separator");
<a name="29710"></a>	public static final char <code><b>separatorChar</b></code> =
<a name="29711"></a>		separator.charAt(0);
<a name="29712"></a>	public static final String <code><b>pathSeparator</b></code> =
<a name="29713"></a>		System.getProperty("path.separator");
<a name="33484"></a>	public static final char <code><b>pathSeparatorChar</b></code> =
<a name="33485"></a>		pathSeparator.charAt(0);
<a name="33486"></a>	public <code><b>File</b></code>(String path) throws NullPointerException;
<a name="29717"></a>	public <code><b>File</b></code>(String dirname, String name)
<a name="32555"></a>		throws NullPointerException
<a name="29718"></a>	public <code><b>File</b></code>(File dir, String name)
<a name="32556"></a>		throws NullPointerException
<a name="29719"></a>	public String <code><b>toString</b></code>();
<a name="29720"></a>	public boolean <code><b>equals</b></code>(Object obj);
<a name="29721"></a>	public int <code><b>hashCode</b></code>();
<a name="29722"></a>	public String <code><b>getName</b></code>();
<a name="29723"></a>	public String <code><b>getPath</b></code>();
<a name="29724"></a>	public String <code><b>getAbsolutePath</b></code>();
<a name="29725"></a>	public String <code><b>getParent</b></code>();
<a name="29726"></a>	public native boolean <code><b>isAbsolute</b></code>();
<a name="29727"></a>	public boolean <code><b>exists</b></code>() throws SecurityException;
<a name="29728"></a>	public boolean <code><b>canRead</b></code>() throws SecurityException;
<a name="29729"></a>	public boolean <code><b>canWrite</b></code>() throws SecurityException;
<a name="29730"></a>	public boolean <code><b>isFile</b></code>() throws SecurityException;
<a name="29731"></a>	public boolean <code><b>isDirectory</b></code>() throws SecurityException;
<a name="29732"></a>	public long <code><b>lastModified</b></code>() throws SecurityException;
<a name="29733"></a>	public long <code><b>length</b></code>() throws SecurityException;
<a name="29734"></a>	public boolean <code><b>mkdir</b></code>() throws SecurityException;
<a name="29735"></a>	public boolean <code><b>mkdirs</b></code>() throws SecurityException;
<a name="29736"></a>	public String[] <code><b>list</b></code>() throws SecurityException;
<a name="29737"></a>	public String[] <code><b>list</b></code>(FilenameFilter filter)
<a name="30850"></a>		throws SecurityException;
<a name="29738"></a>	public boolean <code><b>delete</b></code>() throws SecurityException;
<a name="29739"></a>	public boolean <code><b>renameTo</b></code>(File dest) throws SecurityException;
<a name="29740"></a>}
</pre><p><a name="29741"></a>
<p><strong>22.24.1	</strong> <code>public static final String separator = System.getProperty("file.separator");</code>
<p>
<a name="29742"></a>
This string should consist of a single character, whose value is also available in 
the field <code>separatorChar</code>; the string is provided merely for convenience.
<p><a name="29744"></a>
<p><strong>22.24.2	</strong> <code>public static final char separatorChar = separator.charAt(0);</code>
<p>
<a name="29745"></a>
The last occurrence of this character in a path string is assumed to separate the 
directory part of the path from the file name part of the path. On UNIX systems 
this character is typically <code>'/'</code>.
<p><a name="29746"></a>
<p><strong>22.24.3	</strong> <code>public static final String pathSeparator = System.getProperty("path.separator");</code>
<p>
<a name="29747"></a>
This string should consist of a single character, whose value is also available in 
the field <code>pathSeparatorChar</code>; the string is provided merely for convenience.
<p><a name="29748"></a>
<p><strong>22.24.4	</strong> <code>public static final char pathSeparatorChar = pathSeparator.charAt(0);</code>
<p>
<a name="29749"></a>
The first occurrence of this character in a string is sometimes assumed to separate 
a host name from a path name. On UNIX systems this character is typically <code>':'</code>.
<p><a name="29750"></a>
<p><strong>22.24.5	</strong> <code>public File(String path) throws NullPointerException</code>
<p>
<a name="29751"></a>
This constructor initializes a newly created <code>File</code> so that it represents the path indicated by the argument <code>path</code>.
<p><a name="32569"></a>
If the <code>path</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.<p>
<a name="29752"></a>
<p><strong>22.24.6	</strong> <code>public File(String dirname, String name)<br>throws NullPointerException</code>
<p>
<a name="29753"></a>
This constructor initializes a newly created <code>File</code> so that it represents the path 
whose directory part is specified by the argument <code>dirname</code> and whose file name 
part is specified by the argument <code>name</code>. If the <code>dirname</code> argument is <code>null</code>, the <code>name</code> 
is used as the path; otherwise the concatenation of <code>dirname</code>, the <code>separatorChar</code> 
<a href="22_24.htm#29744">(&#167;22.24.2)</a>, and the <code>name</code> is used as the path.
<p><a name="32567"></a>
If the <code>name</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.<p>
<a name="29757"></a>
<p><strong>22.24.7	</strong> <code>public File(File dir, String name)<br>throws NullPointerException</code>
<p>
<a name="29758"></a>
This constructor initializes a newly created <code>File</code> so that it represents the path 
whose directory part is specified by the <code>File</code> object <code>dir</code> and whose file name part 
is specified by the argument <code>name</code>.
<p><a name="32568"></a>
If the <code>name</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.<p>
<a name="29759"></a>
<p><strong>22.24.8	</strong> <code>public String toString()</code>
<p>
<a name="29760"></a>
The result is a <code>String</code> equal to the path represented by this <code>File</code> object.
<p><a name="29764"></a>
Overrides the <code>toString</code> method of <code>Object</code> <a href="20_1.htm#1152">(&#167;20.1.2)</a>.<p>
<a name="29765"></a>
<p><strong>22.24.9	</strong> <code>public boolean equals(Object obj)</code>
<p>
<a name="29766"></a>
The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>File</code> object that 
represents the same path as this <code>File</code> object. In other words, two <code>File</code> objects are 
equal if and only if the strings returned by the <code>getPath</code> method <a href="22_24.htm#29786">(&#167;22.24.12)</a> are 
equal.
<p><a name="29773"></a>
Overrides the <code>equals</code> method of <code>Object</code> <a href="20_1.htm#14865">(&#167;20.1.3)</a>.<p>
<a name="29774"></a>
<p><strong>22.24.10	</strong> <code>public int hashCode()</code>
<p>
<a name="29779"></a>
The hash code of this <code>File</code> object is equal to the exclusive OR of the hash code of 
its path string and the decimal value <code>1234321</code>:
<p><pre><a name="30545"></a>this.getPath().hashcode() ^ 1234321
</pre><p><a name="30544"></a>
Overrides the <code>hashCode</code> method of <code>Object</code> <a href="20_1.htm#13784">(&#167;20.1.4)</a>.<p>
<a name="29780"></a>
<p><strong>22.24.11	</strong> <code>public String getName()</code>
<p>
<a name="29784"></a>
If the path string contains the <code>separatorChar</code> character <a href="22_24.htm#29744">(&#167;22.24.2)</a>, this method 
returns the substring of the path that follows the last occurrence of the separator 
character; otherwise, the entire path string is returned.
<p><a name="29786"></a>
<p><strong>22.24.12	</strong> <code>public String getPath()</code>
<p>
<a name="29787"></a>
The result is a <code>String</code> equal to the path represented by this <code>File</code> object.
<p><a name="29788"></a>
<p><strong>22.24.13	</strong> <code>public String getAbsolutePath()</code>
<p>
<a name="29789"></a>
The result is a <code>String</code> equal to the result of converting to "absolute form" the path 
represented by this <code>File</code> object.
<p><a name="29790"></a>
<p><strong>22.24.14	</strong> <code>public String getParent()</code>
<p>
<a name="29791"></a>
If the path has a parent directory, a <code>String</code> representing the path of that parent 
directory is returned; otherwise, <code>null</code> is returned.
<p><a name="29792"></a>
<p><strong>22.24.15	</strong> <code>public boolean isAbsolute()</code>
<p>
<a name="29793"></a>
The result is <code>true</code> if and only if the path represented by the File object is in absolute form, indicating a complete name that starts from the root of the directory 
hierarchy, rather than a name relative to some implied directory.
<p><a name="29795"></a>
<p><strong>22.24.16	</strong> <code>public boolean exists() throws SecurityException</code>
<p>
<a name="29799"></a>
First, if there is a security manager, its <code>checkRead</code> method <a href="20_17.htm#14115">(&#167;20.17.19)</a> is called 
with the path represented by this <code>File</code> object as its argument.
<p><a name="29800"></a>
The result is <code>true</code> if and only if the file system actually contains a file that is specified by the path of the <code>File</code> object.<p>
<a name="29802"></a>
<p><strong>22.24.17	</strong> <code>public boolean canRead() throws SecurityException</code>
<p>
<a name="29806"></a>
First, if there is a security manager, its <code>checkRead</code> method <a href="20_17.htm#14115">(&#167;20.17.19)</a> is called 
with the path represented by this <code>File</code> object as its argument.
<p><a name="29807"></a>
The result is <code>true</code> if and only if both of the following are true:<p>
<ul><a name="31770"></a>
<li>The file system actually contains a file specified by the path of the <code>File</code> object.
<a name="31771"></a>
<li>The file so specified can be read.
</ul><p><a name="29809"></a>
<p><strong>22.24.18	</strong> <code>public boolean canWrite() throws SecurityException</code>
<p>
<a name="29813"></a>
First, if there is a security manager, its <code>checkWrite</code> method <a href="20_17.htm#14117">(&#167;20.17.21)</a> is called 
with the path represented by this <code>File</code> object as its argument.
<p><a name="31776"></a>
The result is <code>true</code> if and only if both of the following are true:<p>
<ul><a name="31777"></a>
<li>The file system actually contains a file specified by the path of the <code>File</code> object.
<a name="31778"></a>
<li>The file so specified can be written.
</ul><p><a name="29816"></a>
<p><strong>22.24.19	</strong> <code>public boolean isFile() throws SecurityException</code>
<p>
<a name="29820"></a>
First, if there is a security manager, its <code>checkRead</code> method <a href="20_17.htm#14115">(&#167;20.17.19)</a> is called 
with the path represented by this <code>File</code> object as its argument.
<p><a name="31784"></a>
The result is <code>true</code> if and only if both of the following are true:<p>
<ul><a name="31785"></a>
<li>The file system actually contains a file specified by the path of the <code>File</code> object.
<a name="31786"></a>
<li>The file so specified is a data file rather than a directory.
</ul><p><a name="29823"></a>
<p><strong>22.24.20	</strong> <code>public boolean isDirectory() throws SecurityException</code>
<p>
<a name="29827"></a>
First, if there is a security manager, its <code>checkRead</code> method <a href="20_17.htm#14115">(&#167;20.17.19)</a> is called 
with the path represented by this <code>File</code> object as its argument.
<p><a name="31792"></a>
The result is <code>true</code> if and only if both of the following are true:<p>
<ul><a name="31793"></a>
<li>The file system actually contains a file specified by the path of the <code>File</code> object.
<a name="31794"></a>
<li>The file so specified is a directory rather than a data file.
</ul><p><a name="33515"></a>
<p>
<a name="29830"></a>
<p><strong>22.24.21	</strong> <code>public long lastModified() throws SecurityException</code>
<p>
<a name="29834"></a>
First, if there is a security manager, its <code>checkRead</code> method <a href="20_17.htm#14115">(&#167;20.17.19)</a> is called 
with the path represented by this <code>File</code> object as its argument.
<p><a name="29835"></a>
An abstract modification time is returned. If two values returned by this method are compared, whether for the same file or for two different files, the smaller value represents an earlier modification time. Abstract modification times do not necessarily bear any relationship, even monotonicity, to times returned by the method <code>System.currentTimeMillis</code> <a href="20_18.htm#5984">(&#167;20.18.6)</a>.<p>
<a name="29840"></a>
<p><strong>22.24.22	</strong> <code>public long length() throws SecurityException</code>
<p>
<a name="29844"></a>
First, if there is a security manager, its <code>checkRead</code> method <a href="20_17.htm#14115">(&#167;20.17.19)</a> is called 
with the path represented by this <code>File</code> object as its argument.
<p><a name="29845"></a>
The length of the file, measured in bytes, is returned.<p>
<a name="29847"></a>
<p><strong>22.24.23	</strong> <code>public boolean mkdir() throws SecurityException</code>
<p>
<a name="29851"></a>
First, if there is a security manager, its <code>checkWrite</code> method <a href="20_17.htm#14117">(&#167;20.17.21)</a> is called 
with the path represented by this <code>File</code> object as its argument.
<p><a name="29852"></a>
An attempt is made to create the directory specified by the path represented by this <code>File</code> object; the result is true if and only if the creation operation succeeds.<p>
<a name="29854"></a>
<p><strong>22.24.24	</strong> <code>public boolean mkdirs() throws SecurityException</code>
<p>
<a name="29858"></a>
First, if there is a security manager, its <code>checkRead</code> method <a href="20_17.htm#14115">(&#167;20.17.19)</a> is called 
with the path represented by this <code>File</code> object as its argument.
<p><a name="30558"></a>
If the directory name represented by this <code>File</code> object has a parent directory name <a href="22_24.htm#29790">(&#167;22.24.14)</a>, an attempt is first made to create the parent directory; if this attempt fails, the result is <code>false</code>. Otherwise, once the parent directory has been determined to exist, or if the path has no parent, an attempt is made to create the directory specified by this <code>File</code> object. The result is <code>true</code> if and only if the creation operation succeeds.<p>
<a name="29861"></a>
<p><strong>22.24.25	</strong> <code>public String[] list() throws SecurityException</code>
<p>
<a name="29865"></a>
First, if there is a security manager, its <code>checkRead</code> method <a href="20_17.htm#14115">(&#167;20.17.19)</a> is called 
with the path represented by this <code>File</code> object as its argument.
<p><a name="30575"></a>
If the path represented by this <code>File</code> object does not correspond to a directory in the file system, then <code>null</code> is returned. Otherwise, an array of strings is returned, one for each file in the directory (on UNIX systems, the names "<code>.</code>" and "<code>..</code>" are not included). Each string is a file name, not a complete path. There is no guarantee that the strings will appear in any particular order within the array; for example, they are not guaranteed to appear in alphabetical order.<p>
<a name="29868"></a>
<p><strong>22.24.26	</strong> <code>public String[] list(FilenameFilter filter)<br>throws SecurityException</code>
<p>
<a name="29872"></a>
First, if there is a security manager, its <code>checkRead</code> method <a href="20_17.htm#14115">(&#167;20.17.19)</a> is called 
with the path represented by this <code>File</code> object as its argument.
<p><a name="30594"></a>
If the path represented by this <code>File</code> object does not correspond to a directory in the file system, then <code>null</code> is returned. Otherwise, an array of strings is returned, one for each file in the directory (on UNIX systems, the names "<code>.</code>" and "<code>..</code>" are not included) whose name satisfies the given <code>filter</code>. Each string is a file name, not a complete path. There is no guarantee that the strings will appear in any particular order within the array; for example, they are not guaranteed to appear in alphabetical order. A file name satisfies the filter if and only if the value <code>true</code> results when the <code>accept</code> method <a href="22_25.htm#30155">(&#167;22.25.1)</a> of the filter is called with this <code>File</code> object and the name as arguments.<p>
<a name="29875"></a>
<p><strong>22.24.27	</strong> <code>public boolean renameTo(File dest)<br>throws SecurityException</code>
<p>
<a name="29879"></a>
First, if there is a security manager, its <code>checkWrite</code> method <a href="20_17.htm#14117">(&#167;20.17.21)</a> is called 
twice, first with the path represented by this <code>File</code> object as its argument and again 
with the path of <code>dest</code> as its argument.
<p><a name="30622"></a>
An attempt is made to rename the file specified by the path represented by this <code>File</code> object to the name specified by <code>dest</code>; the result is <code>true</code> if and only if the renaming operation succeeds.<p>
<a name="29882"></a>
<p><strong>22.24.28	</strong> <code>public boolean delete() throws SecurityException</code>
<p>
<a name="29886"></a>
First, if there is a security manager, its <code>checkDelete</code> method <a href="20_17.htm#14118">(&#167;20.17.22)</a> is called 
with the path represented by this <code>File</code> object as its argument.
<p><a name="30604"></a>
An attempt is made to delete the file specified by the path represented by this <code>File</code> object; the result is <code>true</code> if and only if the deletion operation succeeds.<p>


</body></html>

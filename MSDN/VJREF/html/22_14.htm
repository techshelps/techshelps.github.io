<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>22.14 The Class java.io.StreamTokenizer</title>
<META NAME=MS-HAID CONTENT="22_14">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>22.14	 The Class java.io.StreamTokenizer</h1>
<a name="29287"></a>
<p>
<a name="29288"></a>
A <code>StreamTokenizer</code> takes an input stream and parses it into "tokens," allowing 
the tokens to be read one at a time. The parsing process is controlled by a table 
and a number of flags that can be set to various states, allowing recognition of 
identifiers, numbers, quoted strings, and comments in a standard style.
<p><pre><a name="29289"></a>public class <code><b>StreamTokenizer</b></code> {
<a name="29290"></a>	public static final int <code><b>TT_EOF</b></code> = -1;
<a name="29291"></a>	public static final int <code><b>TT_EOL</b></code> = '\n';
<a name="29292"></a>	public static final int <code><b>TT_NUMBER</b></code> = -2;
<a name="29293"></a>	public static final int <code><b>TT_WORD</b></code> = -3;
<a name="29294"></a>	public int <code><b>ttype</b></code>;
<a name="29295"></a>	public String <code><b>sval</b></code>;
<a name="29296"></a>	public double <code><b>nval</b></code>;
<a name="29297"></a>	public <code><b>StreamTokenizer</b></code> (InputStream in);
<a name="29298"></a>	public void <code><b>resetSyntax</b></code>();
<a name="29299"></a>	public void <code><b>wordChars</b></code>(int low, int hi);
<a name="29300"></a>	public void <code><b>whitespaceChars</b></code>(int low, int hi);
<a name="29301"></a>	public void <code><b>ordinaryChars</b></code>(int low, int hi);
<a name="29302"></a>	public void <code><b>ordinaryChar</b></code>(int ch);
<a name="29303"></a>	public void <code><b>commentChar</b></code>(int ch);
<a name="29304"></a>	public void <code><b>quoteChar</b></code>(int ch);
<a name="29305"></a>	public void <code><b>parseNumbers</b></code>();
<a name="29306"></a>	public void <code><b>eolIsSignificant</b></code>(boolean flag);
<a name="29307"></a>	public void <code><b>slashStarComments</b></code>(boolean flag);
<a name="29308"></a>	public void <code><b>slashSlashComments</b></code>(boolean flag);
<a name="29309"></a>	public void <code><b>lowerCaseMode</b></code>(boolean flag);
<a name="29310"></a>	public int <code><b>nextToken</b></code>() throws IOException;
<a name="29311"></a>	public void <code><b>pushBack</b></code>();
<a name="29312"></a>	public int <code><b>lineno</b></code>();
<a name="29313"></a>	public String <code><b>toString</b></code>();
<a name="29314"></a>}
</pre><p><a name="29315"></a>
Each byte read from the input stream is regarded as a character in the range <code>'\u0000'</code> through <code>'\u00FF'</code>. The character value is used to look up five possible attributes of the character: whitespace, alphabetic, numeric, string quote, and comment character (a character may have more than one of these attributes, or none at all). In addition, there are three flags controlling whether line terminators are to be recognized as tokens, whether Java-style end-of-line comments that start with <code>//</code> should be recognized and skipped, and whether Java-style "traditional" comments delimited by <code>/*</code> and <code>*/</code> should be recognized and skipped. One more flag controls whether all the characters of identifiers are converted to lowercase.<p>
<a name="31827"></a>
Here is a simple example of the use of a <code>StreamTokenizer</code>. The following code merely reads all the tokens in the standard input stream and prints an identification of each one. Changes in the line number are also noted.<p>
<pre><a name="31833"></a>import java.io.StreamTokenizer;
<a name="31834"></a>import java.io.IOException;
</pre><p><pre><a name="31836"></a>
class Tok {
<a name="31837"></a>	public static void main(String[] args) {
<a name="31838"></a>		StreamTokenizer st = new StreamTokenizer(System.in);
<a name="31839"></a>		st.ordinaryChar('/');
<a name="31840"></a>		int lineNum = -1;
<a name="31841"></a>		try {
<a name="31842"></a>			for (int tokenType = st.nextToken();
<a name="31843"></a>					tokenType != StreamTokenizer.TT_EOF;
<a name="31844"></a>					tokenType = st.nextToken()) {
<a name="31845"></a>				int newLineNum = st.lineno();
<a name="31846"></a>				if (newLineNum != lineNum) {
<a name="31847"></a>					System.out.println("[line " + newLineNum
<a name="31871"></a>											+ "]");
<a name="31848"></a>					lineNum = newLineNum;
<a name="31849"></a>				}
<a name="31850"></a>				switch(tokenType) {
<a name="31851"></a>				case StreamTokenizer.TT_NUMBER:
<a name="31852"></a>					System.out.println("the number " + st.nval);
<a name="31853"></a>					break;
<a name="31854"></a>				case StreamTokenizer.TT_WORD:
<a name="31855"></a>					System.out.println("identifier " + st.sval);
<a name="31856"></a>					break;
<a name="31857"></a>				default:
<a name="31858"></a>					System.out.println("  operator "
<a name="31870"></a>											+ (char)tokenType);
<a name="31859"></a>				}
<a name="31860"></a>			}
<a name="31861"></a>		} catch (IOException e) {
<a name="31868"></a>			System.out.println("I/O failure");
<a name="31869"></a>		}
<a name="31862"></a>	}
<a name="31863"></a>}
</pre><p><a name="31828"></a>
If the input stream contains this data:
<p><pre><a name="31878"></a>
10 LET A = 4.5
<a name="31879"></a>20 LET B = A*A
<a name="31880"></a>30 PRINT A, B
</pre><p><a name="31874"></a>
then the resulting output is:
<p><pre><a name="31885"></a>
[line 1]
<a name="31886"></a>the number 10.0
<a name="31887"></a>identifier LET
<a name="31888"></a>identifier A
<a name="31889"></a>  operator =
<a name="31890"></a>the number 4.5
<a name="31891"></a>[line 2]
<a name="31892"></a>the number 20.0
<a name="31893"></a>identifier LET
<a name="31894"></a>identifier B
<a name="31895"></a>  operator =
<a name="31896"></a>identifier A
<a name="31897"></a>  operator *
<a name="31898"></a>identifier A
<a name="31899"></a>[line 3]
<a name="31900"></a>the number 30.0
<a name="31901"></a>identifier PRINT
<a name="31902"></a>identifier A
<a name="31903"></a>  operator ,
<a name="31904"></a>identifier B
</pre><p><a name="29316"></a>
<p><strong>22.14.1	</strong> <code>public static final int TT_EOF = -1;</code>
<p>
<a name="29317"></a>
A constant that indicates end of file was reached.
<p><a name="29318"></a>
<p><strong>22.14.2	</strong> <code>public static final int TT_EOL = '\n';</code>
<p>
<a name="29319"></a>
A constant that indicates that a line terminator was recognized.
<p><a name="29320"></a>
<p><strong>22.14.3	</strong> <code>public static final int TT_NUMBER = -2;</code>
<p>
<a name="29321"></a>
A constant that indicates that a number was recognized.
<p><a name="29322"></a>
<p><strong>22.14.4	</strong> <code>public static final int TT_WORD = -3;</code>
<p>
<a name="29323"></a>
A constant that indicates that a word (identifier) was recognized.
<p><a name="29324"></a>
<p><strong>22.14.5	</strong> <code>public int ttype;</code>
<p>
<a name="29325"></a>
The type of the token that was last recognized by this <code>StreamTokenizer</code>. This 
will be <code>TT_EOF</code>, <code>TT_EOL</code>, <code>TT_NUMBER</code>, <code>TT_WORD</code>, or a nonnegative byte value that 
was the first byte of the token (for example, if the token is a string token, then 
<code>ttype</code> has the quote character that started the string).
<p><a name="29326"></a>
<p><strong>22.14.6	</strong> <code>public String sval;</code>
<p>
<a name="29327"></a>
If the value of <code>ttype</code> is <code>TT_WORD</code> or a string quote character, then the value of 
<code>sval</code> is a <code>String</code> that contains the characters of the identifier or of the string 
(without the delimiting string quotes). For all other types of tokens recognized, 
the value of <code>sval</code> is <code>null</code>.
<p><a name="29328"></a>
<p><strong>22.14.7	</strong> <code>public double nval;</code>
<p>
<a name="29329"></a>
If the value of <code>ttype</code> is <code>TT_NUMBER</code>, then the value of <code>nval</code> is the numerical value 
of the number.
<p><a name="29330"></a>
<p><strong>22.14.8	</strong> <code>public StreamTokenizer(InputStream in)</code>
<p>
<a name="29331"></a>
This constructor initializes a newly created <code>StreamTokenizer</code> by saving its argument, the input stream <code>in</code>, for later use. The <code>StreamTokenizer</code> is also initialized 
to the following default state:
<p><ul><a name="29332"></a>
<li>All byte values <code>'A'</code> through <code>'Z'</code>, <code>'a'</code> through <code>'z'</code>, and <code>0xA0</code> through <code>0xFF</code> are considered to be alphabetic.
<a name="29333"></a>
<li>All byte values <code>0x00</code> through <code>0x20</code> are considered to be whitespace.
<a name="29334"></a>
<li><code>'/'</code> is a comment character.
<a name="29335"></a>
<li>Single quote <code>'\''</code> and double quote <code>'"'</code> are string quote characters.
<a name="29336"></a>
<li>Numbers are parsed.
<a name="29337"></a>
<li>End of line is not significant.
<a name="29338"></a>
<li><code>//</code> comments and <code>/*</code> comments are not recognized.
</ul><p><a name="29339"></a>
<p><strong>22.14.9	</strong> <code>public void resetSyntax()</code>
<p>
<a name="29340"></a>
The syntax table for this <code>StreamTokenizer</code> is reset so that every byte value is 
"ordinary"; thus, no character is recognized as being a whitespace, alphabetic, 
numeric, string quote, or comment character. Calling this method is therefore 
equivalent to:
<p><pre><a name="29341"></a>ordinaryChars(0x00, 0xff)
</pre><p><a name="29342"></a>
The three flags controlling recognition of line terminators, <code>//</code> comments, and <code>/*</code> 
comments are unaffected.
<p><a name="29343"></a>
<p><strong>22.14.10	</strong> <code>public void wordChars(int low, int hi)</code>
<p>
<a name="29344"></a>
The syntax table for this <code>StreamTokenizer</code> is modified so that every character in 
the range <code>low</code> through <code>hi</code> has the "alphabetic" attribute.
<p><a name="29345"></a>
<p><strong>22.14.11	</strong> <code>public void whitespaceChars(int low, int hi)</code>
<p>
<a name="29346"></a>
The syntax table for this <code>StreamTokenizer</code> is modified so that every character in 
the range <code>low</code> through <code>hi</code> has the "whitespace" attribute.
<p><a name="29347"></a>
<p><strong>22.14.12	</strong> <code>public void ordinaryChars(int low, int hi)</code>
<p>
<a name="29348"></a>
The syntax table for this <code>StreamTokenizer</code> is modified so that every character in 
the range <code>low</code> through <code>hi</code> has no attributes.
<p><a name="29349"></a>
<p><strong>22.14.13	</strong> <code>public void ordinaryChar(int ch)</code>
<p>
<a name="29350"></a>
The syntax table for this <code>StreamTokenizer</code> is modified so that the character <code>ch</code> 
has no attributes.
<p><a name="29351"></a>
<p><strong>22.14.14	</strong> <code>public void commentChar(int ch)</code>
<p>
<a name="29352"></a>
The syntax table for this <code>StreamTokenizer</code> is modified so that the character <code>ch</code> 
has the "comment character" attribute.
<p><a name="29353"></a>
<p><strong>22.14.15	</strong> <code>public void quoteChar(int ch)</code>
<p>
<a name="29354"></a>
The syntax table for this <code>StreamTokenizer</code> is modified so that the character <code>ch</code> 
has the "string quote" attribute.
<p><a name="29355"></a>
<p><strong>22.14.16	</strong> <code>public void parseNumbers()</code>
<p>
<a name="29356"></a>
The syntax table for this <code>StreamTokenizer</code> is modified so that each of the twelve 
characters
<p><pre><a name="29357"></a>0 1 2 3 4 5 6 7 8 9 . -
</pre><p><a name="29358"></a>
has the "numeric" attribute.
<p><a name="29359"></a>
<p><strong>22.14.17	</strong> <code>public void eolIsSignificant(boolean flag)</code>
<p>
<a name="29360"></a>
This <code>StreamTokenizer</code> henceforth recognizes line terminators as tokens if and 
only if the <code>flag</code> argument is <code>true</code>.
<p><a name="29361"></a>
<p><strong>22.14.18	</strong> <code>public void slashStarComments(boolean flag)</code>
<p>
<a name="32384"></a>
This <code>StreamTokenizer</code> henceforth recognizes and skips Java-style "traditional" 
comments, which are delimited by <code>/*</code> and <code>*/</code> and do not nest, if and only if the 
<code>flag</code> argument is <code>true</code>.
<p><a name="29363"></a>
<p><strong>22.14.19	</strong> <code>public void slashSlashComments(boolean flag)</code>
<p>
<a name="32380"></a>
This <code>StreamTokenizer</code> henceforth recognizes and skips Java-style end-of-line 
comments that start with <code>//</code> if and only if the <code>flag</code> argument is <code>true</code>.
<p><a name="29365"></a>
<p><strong>22.14.20	</strong> <code>public void lowerCaseMode(boolean flag)</code>
<p>
<a name="29366"></a>
This <code>StreamTokenizer</code> henceforth converts all the characters in identifiers to 
lowercase if and only if the <code>flag</code> argument is <code>true</code>.
<p><a name="29367"></a>
<p><strong>22.14.21	</strong> <code>public int nextToken() throws IOException</code>
<p>
<a name="29371"></a>
If the previous token was pushed back <a href="22_14.htm#29383">(&#167;22.14.22)</a>, then the value of <code>ttype</code> is 
returned, effectively causing that same token to be reread.
<p><a name="29372"></a>
Otherwise, this method parses the next token in the contained input stream. The type of the token is returned; this same value is also made available in the <code>ttype</code> field, and related data may be made available in the <code>sval</code> and <code>nval</code> fields.<p>
<a name="29373"></a>
First, whitespace characters are skipped, except that if a line terminator is encountered and this <code>StreamTokenizer</code> is currently recognizing line terminators, then the type of the token is <code>TT_EOL</code>.<p>
<a name="29375"></a>
If a numeric character is encountered, then an attempt is made to recognize a number. If the first character is <code>'-'</code> and the next character is not numeric, then the <code>'-'</code> is considered to be an ordinary character and is recognized as a token in its own right. Otherwise, a number is parsed, stopping before the next occurrence of <code>'-'</code>, the second occurrence of <code>'.'</code>, the first nonnumeric character encountered, or end of file, whichever comes first. The type of the token is <code>TT_NUMBER</code> and its value is made available in the field <code>nval</code>.<p>
<a name="29376"></a>
If an alphabetic character is encountered, then an identifier is recognized, consisting of that character and all following characters up to, but not including, the first character that is neither alphabetic nor numeric, or up to end of file, whichever comes first. The characters of the identifier may be converted to lowercase if this <code>StreamTokenizer</code> is in lowercase mode.<p>
<a name="29377"></a>
If a comment character is encountered, then all subsequent characters are skipped and ignored, up to but not including the next line terminator or end of file. Then another attempt is made to recognize a token. If this <code>StreamTokenizer</code> is currently recognizing line terminators, then a line terminator that ends a comment will be recognized as a token in the same manner as any other line terminator in the contained input stream.<p>
<a name="29378"></a>
If a string quote character is encountered, then a string is recognized, consisting of all characters after (but not including) the string quote character, up to (but not including) the next occurrence of that same string quote character, or a line terminator, or end of file. The usual escape sequences <a href="3_10_6.htm#101089">(&#167;3.10.6)</a> such as <code>\n</code> and <code>\t</code> are recognized and converted to single characters as the string is parsed.<p>
<a name="29379"></a>
If <code>//</code> is encountered and this <code>StreamTokenizer</code> is currently recognizing <code>//</code> comments, then all subsequent characters are skipped and ignored, up to but not including the next line terminator or end of file. Then another attempt is made to recognize a token. (If this <code>StreamTokenizer</code> is currently recognizing line terminators, then a line terminator that ends a comment will be recognized as a token in the same manner as any other line terminator in the contained input stream.)<p>
<a name="29380"></a>
If <code>/*</code> is encountered and this <code>StreamTokenizer</code> is currently recognizing <code>/*</code> comments, then all subsequent characters are skipped and ignored, up to and including the next occurrence of <code>*/</code> or end of file. Then another attempt is made to recognize a token.<p>
<a name="29381"></a>
If none of the cases listed above applies, then the only other possibility is that the first non-whitespace character encountered is an ordinary character. That character is considered to be a token and is stored in the <code>ttype</code> field and returned.<p>
<a name="29383"></a>
<p><strong>22.14.22	</strong> <code>public void pushBack()</code>
<p>
<a name="29384"></a>
Calling this method "pushes back" the current token; that is, it causes the next call 
to <code>nextToken</code> to return the same token that it just provided. Note that this method 
does <i>not</i> restore the line number to its previous value, so if the method <code>lineno</code> is 
called after a call to <code>pushBack</code> but before the next call to <code>nextToken</code>, an incorrect 
line number may be returned.
<p><a name="29385"></a>
<p><strong>22.14.23	</strong> <code>public int lineno()</code>
<p>
<a name="29386"></a>
The number of the line on which the current token appeared is returned. The first 
token in the input stream, if not a line terminator, is considered to appear on line <code>1</code>. 
A line terminator token is considered to appear on the line that it precedes, not on 
the line it terminates; thus, the first line terminator in the input stream is considered to be on line <code>2</code>.
<p><a name="29387"></a>
<p><strong>22.14.24	</strong> <code>public String toString()</code>
<p>
<a name="33254"></a>
The current token and the current line number are converted to a string of the 
form:
<p><pre><a name="33255"></a>"Token[<i>x</i>], line <i>m</i>"
</pre><p><a name="33256"></a>
where <i>m</i> is the current line number in decimal form and <i>x</i> depends on the type of 
the current token:
<p><ul><a name="32713"></a>
<li>If the token type is <code>TT_EOF</code>, then <i>x</i> is "<code>EOF</code>".
<a name="32715"></a>
<li>If the token type is <code>TT_EOL</code>, then <i>x</i> is "<code>EOL</code>".
<a name="32717"></a>
<li>If the token type is <code>TT_WORD</code>, then <i>x</i> is the current value of <code>sval</code> <a href="22_14.htm#29326">(&#167;22.14.6)</a>.
<a name="32719"></a>
<li>If the token type is <code>TT_NUMBER</code>, then <i>x</i> is "<code>n=</code>" followed by the result of converting the current value of <code>nval</code> <a href="22_14.htm#29328">(&#167;22.14.7)</a> to a string <a href="20_10.htm#5899">(&#167;20.10.15)</a>.
</ul><p><a name="32709"></a>
Overrides the <code>toString</code> method of <code>Object</code> <a href="20_1.htm#1152">(&#167;20.1.2)</a>.<p>


</body></html>

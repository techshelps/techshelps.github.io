<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>20.17 The Class java.lang.SecurityManager</title>
<META NAME=MS-HAID CONTENT="20_17">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>20.17	 The Class java.lang.SecurityManager</h1>
<a name="14464"></a>
<p>
<pre><a name="14098"></a>public abstract class <code><b>SecurityManager</b></code> {
<a name="3125"></a>	protected boolean <code><b>inCheck</b></code>;
<a name="3126"></a>	protected <code><b>SecurityManager</b></code>()<br>
		throws SecurityException;
<a name="3127"></a>	protected Class[] <code><b>getClassContext</b></code>();
<a name="3129"></a>	protected int <code><b>classDepth</b></code>(String name);
<a name="30021"></a>	protected boolean <code><b>inClass</b></code>(String name);
<a name="30015"></a>	protected ClassLoader <code><b>currentClassLoader</b></code>();
<a name="3130"></a>	protected int <code><b>classLoaderDepth</b></code>();
<a name="3132"></a>	protected boolean <code><b>inClassLoader</b></code>();
<a name="29969"></a>	public boolean <code><b>getInCheck</b></code>();
<a name="3134"></a>	public void <code><b>checkCreateClassLoader</b></code>()<br>
		throws SecurityException;
<a name="3135"></a>	public void <code><b>checkAccess</b></code>(Thread t)<br>
		throws SecurityException;
<a name="3136"></a>	public void <code><b>checkAccess</b></code>(ThreadGroup g)<br>
		throws SecurityException;
<a name="3137"></a>	public void <code><b>checkExit</b></code>(int status)<br>
		throws SecurityException;
<a name="3138"></a>	public void <code><b>checkExec</b></code>(String cmd)<br>
		throws SecurityException;
<a name="29903"></a>	public void <code><b>checkPropertiesAccess</b></code>()<br>
		throws SecurityException;
<a name="29904"></a>	public void <code><b>checkPropertyAccess</b></code>(String key)<br>
		throws SecurityException;
<a name="3139"></a>	public void <code><b>checkLink</b></code>(String libname)<br>
		throws SecurityException;
<a name="3140"></a>	public void <code><b>checkRead</b></code>(int fd)<br>
		throws SecurityException;
<a name="3141"></a>	public void <code><b>checkRead</b></code>(String file)<br>
		throws SecurityException;
<a name="3142"></a>	public void <code><b>checkWrite</b></code>(int fd)<br>
		throws SecurityException;
<a name="3143"></a>	public void <code><b>checkWrite</b></code>(String file)<br>
		throws SecurityException;
<a name="3144"></a>	public void <code><b>checkDelete</b></code>(String file)<br>
		throws SecurityException;
<a name="3145"></a>	public void <code><b>checkConnect</b></code>(String host, int port)<br>
		throws SecurityException;
<a name="3146"></a>	public void <code><b>checkListen</b></code>(int port)<br>
		throws SecurityException;
<a name="3147"></a>	public void <code><b>checkAccept</b></code>(String host, int port)<br>
		throws SecurityException;
<a name="3154"></a>	public void <code><b>checkSetFactory</b></code>()<br>
		throws SecurityException;
<a name="29910"></a>	public boolean <code><b>checkTopLevelWindow</b></code>()<br>
		throws SecurityException;
<a name="30111"></a>	public void <code><b>checkPackageAccess</b></code>(String packageName)<br>
		throws SecurityException;
<a name="30115"></a>	public void <code><b>checkPackageDefinition</b></code>(String packageName)<br>
		throws SecurityException;
<a name="3160"></a>}
</pre><p><a name="5903"></a>
A running Java program may have a security manager, which is an instance of class <code>SecurityManager</code>. The current security manager is the one returned by the method invocation <code>System.getSecurityManager()</code> <a href="20_18.htm#3205">(&#167;20.18.4)</a>.<p>
<a name="5917"></a>
The <code>SecurityManager</code> class contains a large number of methods whose names begin with "<code>check</code>". They are called by various methods throughout the Java libraries before those methods perform certain sensitive operations. The invocation of such a check method typically looks like this:<p>
<pre><a name="5921"></a>
SecurityManager security = System.getSecurityManager();
<a name="5922"></a>if (security != null) {
<a name="5933"></a>	security.check<i>XXX</i>(<i>arguments</i>);
<a name="5924"></a>}
</pre><p><a name="5918"></a>
The security manager is thereby given an opportunity to prevent completion of the operation by throwing an exception. The usual convention is that a security manager checking routine simply returns if the operation is permitted, or throws a <code>SecurityException</code> if the operation is not permitted. In one case, namely <code>checkTopLevelWindow</code> <a href="20_17.htm#29924">(&#167;20.17.27)</a>, the checking routine must return a <code>boolean</code> value to indicate one of two levels of permission.<p>
<a name="5906"></a>
<p><strong>20.17.1	</strong> <code>protected boolean inCheck = false;</code>
<p>
<a name="29935"></a>
By convention, this field should be assigned the value <code>true</code> whenever a security 
check is in progress. This matters when one of the checking routines needs to call 
outside code to do its work. Outside code can then use the method <code>getInCheck</code> 
<a href="20_17.htm#29978">(&#167;20.17.9)</a> to test the status of this flag.
<p><a name="14101"></a>
<p><strong>20.17.2	</strong> <code>protected SecurityManager()<br>throws SecurityException</code>
<p>
<a name="29985"></a>
This constructor checks to see whether a security manager has already been 
installed <a href="20_18.htm#14133">(&#167;20.18.5)</a>; if so, creation of another security manager is not permitted, 
and so a <code>SecurityException</code> is thrown.
<p><a name="14102"></a>
<p><strong>20.17.3	</strong> <code>protected Class[] getClassContext()</code>
<p>
<a name="30083"></a>
This utility method for security managers scans the execution stack for the current 
thread and returns an array with one component for each stack frame. The component at position <code>0</code> corresponds to the top of the stack. If a component is a <code>Class</code> 
object, then the corresponding stack frame is for an invocation of a method of the 
class represented by that <code>Class</code> object.
<p><a name="30009"></a>
<p><strong>20.17.4	</strong> <code>protected int classDepth(String name)</code>
<p>
<a name="30063"></a>
This utility method for security managers searches the execution stack for the current thread to find the most recently invoked method whose execution has not yet 
completed and whose class has <code>name</code> as its fully qualified name. If such a method 
is found, its distance from the top of the stack is returned as a nonnegative integer; 
otherwise, <code>-1</code> is returned.
<p><a name="30027"></a>
<p><strong>20.17.5	</strong> <code>protected boolean inClass(String name)</code>
<p>
<a name="30075"></a>
This utility method for security managers searches the execution stack for the current thread to find the most recently invoked method whose execution has not yet 
completed and whose class has <code>name</code> as its fully qualified name. If such a method 
is found, <code>true</code> is returned; otherwise, <code>false</code> is returned.
<p><a name="14103"></a>
<p><strong>20.17.6	</strong> <code>protected ClassLoader currentClassLoader()</code>
<p>
<a name="29991"></a>
This utility method for security managers searches the execution stack for the current thread to find the most recently invoked method whose execution has not yet 
completed and whose class was created by a class loader <a href="20_14.htm#14462">(&#167;20.14)</a>. If such a 
method is found, a reference to the <code>ClassLoader</code> object for its class is returned; 
otherwise, <code>null</code> is returned.
<p><a name="14105"></a>
<p><strong>20.17.7	</strong> <code>protected int classLoaderDepth()</code>
<p>
<a name="30031"></a>
This utility method for security managers searches the execution stack for the current thread to find the most recently invoked method whose execution has not yet 
completed and whose class was created by a class loader <a href="20_14.htm#14462">(&#167;20.14)</a>. If such a 
method is found, its distance from the top of the stack is returned as a nonnegative 
integer; otherwise, <code>-1</code> is returned.
<p><a name="14107"></a>
<p><strong>20.17.8	</strong> <code>protected boolean inClassLoader()</code>
<p>
<a name="30043"></a>
This utility method for security managers searches the execution stack for the current thread to find the most recently invoked method whose execution has not yet 
completed and whose class was created by a class loader <a href="20_14.htm#14462">(&#167;20.14)</a>. If such a 
method is found, <code>true</code> is returned; otherwise <code>false</code> is returned.
<p><a name="29978"></a>
<p><strong>20.17.9	</strong> <code>public boolean getInCheck()</code>
<p>
<a name="29982"></a>
The value of the <code>inCheck</code> field <a href="20_17.htm#5906">(&#167;20.17.1)</a> is returned.
<p><a name="14108"></a>
<p><strong>20.17.10	</strong> <code>public void checkCreateClassLoader()<br>throws SecurityException</code>
<p>
<a name="19929"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if creation of a class loader is not permitted.
<p><a name="19933"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by the constructor for class <code>ClassLoader</code> <a href="20_14.htm#14060">(&#167;20.14.1)</a>.<p>
<a name="19940"></a>
The <code>checkCreateClassLoader</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if a class loader creation operation is to be permitted with a security manager installed.<p>
<a name="14109"></a>
<p><strong>20.17.11	</strong> <code>public void checkAccess(Thread t)<br>throws SecurityException</code>
<p>
<a name="19955"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if an operation that would modify the thread <code>t</code> is not permitted.
<p><a name="19959"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by method <code>checkAccess</code> <a href="20_20.htm#8265">(&#167;20.20.12)</a> of class <code>Thread</code>.<p>
<a name="19960"></a>
The <code>checkAccess</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if a thread modification operation is to be permitted with a security manager installed.<p>
<a name="14110"></a>
<p><strong>20.17.12	</strong> <code>public void checkAccess(ThreadGroup g)<br>throws SecurityException</code>
<p>
<a name="19964"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if an operation that would modify the thread group <code>g</code> is not permitted.
<p><a name="19968"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by method <code>checkAccess</code> <a href="20_21.htm#27041">(&#167;20.21.4)</a> of class <code>ThreadGroup</code>.<p>
<a name="19969"></a>
The <code>checkAccess</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if a thread group modification operation is to be permitted with a security manager installed.<p>
<a name="14111"></a>
<p><strong>20.17.13	</strong> <code>public void checkExit(int status)<br>throws SecurityException</code>
<p>
<a name="5946"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if an exit operation that would terminate the running Java Virtual Machine is not 
permitted.
<p><a name="5949"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by method <code>exit</code> <a href="20_16.htm#34351">(&#167;20.16.2)</a> of class <code>Runtime</code>.<p>
<a name="5950"></a>
The <code>checkExit</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if the exit operation is to be permitted with a security manager installed.<p>
<a name="14112"></a>
<p><strong>20.17.14	</strong> <code>public void checkExec(String cmd)<br>throws SecurityException</code>
<p>
<a name="19973"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if a command <code>exec</code> operation is not permitted. The argument <code>cmd</code> is the name of 
the command to be executed.
<p><a name="19977"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by method <code>exec</code> <a href="20_16.htm#6806">(&#167;20.16.6)</a> of class <code>Runtime</code>.<p>
<a name="19978"></a>
The <code>checkExec</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if a command <code>exec</code> operation is to be permitted with a security manager installed.<p>
<a name="29869"></a>
<p><strong>20.17.15	</strong> <code>public void checkPropertiesAccess()<br>throws SecurityException</code>
<p>
<a name="29870"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if getting or setting the system properties data structure is not permitted.
<p><a name="29874"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by the methods <code>getProperties</code> <a href="20_18.htm#6014">(&#167;20.18.7)</a> and <code>setProperties</code> <a href="20_18.htm#5986">(&#167;20.18.8)</a> of class <code>System</code>.<p>
<a name="29881"></a>
The <code>checkPropertiesAccess</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if a properties access operation is to be permitted with a security manager installed.<p>
<a name="29883"></a>
<p><strong>20.17.16	</strong> <code>public void checkPropertyAccess(String key)<br>throws SecurityException</code>
<p>
<a name="29884"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if getting the value of the system property named by the <code>key</code> is not permitted.
<p><a name="29888"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by the methods <code>getProperty</code> of one argument (<a href="20_18.htm#5965">&#167;20.18.9)</a> and <code>getProperty</code> of two arguments <a href="20_18.htm#5966">(&#167;20.18.10)</a> of class <code>System</code>.<p>
<a name="29895"></a>
The <code>checkPropertyAccess</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if accessing the value of a system property is to be permitted with a security manager installed.<p>
<a name="14113"></a>
<p><strong>20.17.17	</strong> <code>public void checkLink(String libname)<br>throws SecurityException</code>
<p>
<a name="6989"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if dynamic linking of the specified library code file is not permitted. The argument 
may be a simple library name or a complete file name.
<p><a name="6993"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by methods <code>load</code> <a href="20_16.htm#30190">(&#167;20.16.14)</a> and <code>loadLibrary</code> <a href="20_16.htm#6954">(&#167;20.16.13)</a> of class <code>Runtime</code>.<p>
<a name="7000"></a>
The <code>checkLink</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if a dynamic code linking operation is to be permitted with a security manager installed.<p>
<a name="14114"></a>
<p><strong>20.17.18	</strong> <code>public void checkRead(int fd)<br>throws SecurityException</code>
<p>
<a name="19982"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if creating an input stream using the specified file descriptor is not permitted.
<p><a name="19986"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by one constructor for <code>java.io.FileInputStream</code> <a href="22_4.htm#28263">(&#167;22.4.3)</a>.<p>
<a name="19987"></a>
The <code>checkRead</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if creating an input stream from an existing file descriptor is to be permitted with a security manager installed.<p>
<a name="14115"></a>
<p><strong>20.17.19	</strong> <code>public void checkRead(String file)<br>throws SecurityException</code>
<p>
<a name="19991"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if reading the specified file or directory, or examining associated file-system information, or testing for its existence, is not permitted.
<p><a name="19995"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by two constructors for <code>java.io.FileInputStream</code> (<a href="22_4.htm#28248">&#167;22.4.1</a>, <a href="22_4.htm#28256">&#167;22.4.2</a>); by two constructors for <code>java.io.RandomAccessFile</code> (<a href="22_23.htm#27788">&#167;22.23.1</a>, <a href="22_23.htm#27799">&#167;22.23.2</a>); and by methods <code>exists</code> <a href="22_24.htm#29795">(&#167;22.24.16)</a>, <code>canRead</code> <a href="22_24.htm#29802">(&#167;22.24.17)</a>, <code>isFile</code> <a href="22_24.htm#29816">(&#167;22.24.19)</a>, <code>isDirectory</code> <a href="22_24.htm#29823">(&#167;22.24.20)</a>, <code>lastModified</code> <a href="22_24.htm#29830">(&#167;22.24.21)</a>, <code>length</code> <a href="22_24.htm#29840">(&#167;22.24.22)</a>, <code>list</code> with no arguments <a href="22_24.htm#29861">(&#167;22.24.25)</a>, and <code>list</code> with one argument <a href="22_24.htm#29868">(&#167;22.24.26)</a> of the class <code>java.io.File</code>.<p>
<a name="21906"></a>
The <code>checkRead</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if read access to a file is to be permitted with a security manager installed.<p>
<a name="14116"></a>
<p><strong>20.17.20	</strong> <code>public void checkWrite(int fd)<br>throws SecurityException</code>
<p>
<a name="20000"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if creating an output stream using the specified file descriptor is not permitted.
<p><a name="21916"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by one constructor for <code>java.io.FileOutputStream</code> <a href="22_16.htm#29525">(&#167;22.16.3)</a>.<p>
<a name="21920"></a>
The <code>checkWrite</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if creating an output stream from an existing file descriptor is to be permitted with a security manager installed.<p>
<a name="14117"></a>
<p><strong>20.17.21	</strong> <code>public void checkWrite(String file)<br>throws SecurityException</code>
<p>
<a name="20009"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if writing, modifying, creating (for output), or renaming the specified file or directory is not permitted.
<p><a name="20013"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by two constructors for <code>java.io.FileOutputStream</code> (<a href="22_16.htm#29510">&#167;22.16.1</a>, <a href="22_16.htm#29518">&#167;22.16.2</a>); by two constructors for <code>java.io.RandomAccessFile</code> (<a href="22_23.htm#27788">&#167;22.23.1</a>, <a href="22_23.htm#27799">&#167;22.23.2</a>); and by methods <code>canWrite</code> <a href="22_24.htm#29809">(&#167;22.24.18)</a>, <code>mkdir</code> <a href="22_24.htm#29847">(&#167;22.24.23)</a>, and <code>renameTo</code> <a href="22_24.htm#29875">(&#167;22.24.27)</a> of class <code>java.io.File</code>.<p>
<a name="21924"></a>
The <code>checkWrite</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if write access to a file is to be permitted with a security manager installed.<p>
<a name="14118"></a>
<p><strong>20.17.22	</strong> <code>public void checkDelete(String file)<br>throws SecurityException</code>
<p>
<a name="20018"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if deleting the specified file is not permitted.
<p><a name="20022"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by method <code>delete</code> <a href="22_24.htm#29882">(&#167;22.24.28)</a> of class <code>java.io.File</code>.<p>
<a name="20023"></a>
The <code>checkDelete</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if a file deletion operation is to be permitted with a security manager installed.<p>
<a name="14119"></a>
<p><strong>20.17.23	</strong> <code>public void checkConnect(String host, int port)<br>	throws SecurityException</code>
<p>
<a name="20030"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if connecting to the indicated <code>port</code> of the indicated network <code>host</code> is not permitted.
<p><a name="29737"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by two constructors for class <code>java.net.Socket</code>, methods <code>send</code> and <code>receive</code> of class <code>java.net.DatagramSocket</code>, and methods <code>getByName</code> and <code>getAllByName</code> of class <code>java.net.InetAddress</code>. (These classes are not documented in this specification. See <i>The Java Application Programming Interface</i>.)<p>
<a name="20035"></a>
The <code>checkConnect</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if a network connection is to be permitted with a security manager installed.<p>
<a name="14120"></a>
<p><strong>20.17.24	</strong> <code>public void checkListen(int port)<br>throws SecurityException</code>
<p>
<a name="20039"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if listening to the specified local network <code>port</code> is not permitted.
<p><a name="29786"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by the constructor of one argument for class <code>java.net.DatagramSocket</code> and by the constructors for class <code>java.net.ServerSocket</code>. (These classes are not documented in this specification. See <i>The Java Application Programming Interface</i>.)<p>
<a name="20044"></a>
The <code>checkListen</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if listening to a local network port is to be permitted with a security manager installed.<p>
<a name="14121"></a>
<p><strong>20.17.25	</strong> <code>public void checkAccept(String host, int port)<br>throws SecurityException</code>
<p>
<a name="29810"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if accepting a connection from the indicated <code>port</code> of the indicated network <code>host</code> 
is not permitted.
<p><a name="20052"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by method <code>accept</code> of class <code>java.net.ServerSocket</code>. (This class is not documented in this specification. See <i>The Java Application Programming Interface</i>.)<p>
<a name="20053"></a>
The <code>checkAccept</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if accepting a network connection is to be permitted with a security manager installed.<p>
<a name="14128"></a>
<p><strong>20.17.26	</strong> <code>public void checkSetFactory()<br>throws SecurityException</code>
<p>
<a name="20088"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if installing a "factory" for a socket, server socket, URL, or URL connection is not 
permitted.
<p><a name="20092"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by:<p>
<pre><a name="29846"></a>	method setSocketFactory of class java.net.ServerSocket
<a name="29848"></a>	method setSocketImplFactory of class java.net.Socket
<a name="29849"></a>	method setURLStreamHandlerFactory of class java.net.URL
<a name="29852"></a>	method setContentHandlerFactory of class java.net.URLConnection
</pre><p><a name="20093"></a>
(These classes are not documented in this specification. See <i>The Java Application 
Programming Interface</i>.)
<p><a name="29916"></a>
The <code>checkSetFactory</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if a factory installation operation is to be permitted with a security manager installed.<p>
<a name="29924"></a>
<p><strong>20.17.27	</strong> <code>public boolean checkTopLevelWindow()<br>throws SecurityException</code>
<p>
<a name="29925"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if creation of a top-level window is not permitted. If creation of a top-level window is permitted, then this method should return <code>false</code> if the window ought to 
bear a clear warning that it is a window for an executable applet. A returned value 
of <code>true</code> means that the security manager places no restriction on window creation.
<p><a name="29929"></a>
This method is invoked for the current security manager <a href="20_18.htm#3205">(&#167;20.18.4)</a> by the constructors for class <code>java.awt.Window</code>. (This class is not documented in this specification. See <i>The Java Application Programming Interface</i>.)<p>
<a name="29930"></a>
The <code>checkTopLevelWindow</code> method defined by class <code>SecurityManager</code> always returns <code>false</code>. A subclass must override this method if a window creation operation is to be unrestricted or forbidden with a security manager installed.<p>
<a name="36460"></a>
<p><strong>20.17.28	</strong> <code>public void checkPackageAccess(String packageName)<br>throws SecurityException</code>
<p>
<a name="36453"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if the current applet is not permitted to access the package named by the argument. This method is intended for use by Java-capable web browsers.
<p><a name="36483"></a>
The <code>checkPackageAccess</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if package access by an applet is to be permitted with a security manager installed.<p>
<a name="36488"></a>
<p><strong>20.17.29	</strong> <code>public void checkPackageDefinition(String packageName)<br>throws SecurityException</code>
<p>
<a name="36489"></a>
The general contract of this method is that it should throw a <code>SecurityException</code> 
if the current applet is not permitted to define a class (or interface) in the package 
named by the argument. This method is intended for use by Java-capable web 
browsers.
<p><a name="36490"></a>
The <code>checkPackageAccess</code> method defined by class <code>SecurityManager</code> always throws a <code>SecurityException</code>. A subclass must override this method if class definition by an applet is to be permitted with a security manager installed.<p>


</body></html>

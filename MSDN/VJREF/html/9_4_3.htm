<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>9.4.3 Examples of Abstract Method Declarations</title>
<META NAME=MS-HAID CONTENT="9_4_3">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>9.4.3	 Examples of Abstract Method Declarations</h3>
<a name="40248"></a>
<p>
<a name="40738"></a>
The following examples illustrate some (possibly subtle) points about abstract 
method declarations.
<p><a name="40734"></a>
<h4>9.4.3.1	 Example: Overriding</h4>
<p>
<a name="40251"></a>
Methods declared in interfaces are <code>abstract</code> and thus contain no implementation. 
About all that can be accomplished by an overriding method declaration, other 
than to affirm a method signature, is to restrict the exceptions that might be thrown 
by an implementation of the method. Here is a variation of the example shown in 
<a href="8_4_3.htm#34484">&#167;8.4.3.1</a>:
<p><pre><a name="40258"></a>
class BufferEmpty extends Exception {
<a name="40259"></a>	BufferEmpty() { super(); }
<a name="40260"></a>	BufferEmpty(String s) { super(s); }
<a name="40261"></a>}
<br><a name="40262"></a>
class BufferError extends Exception {
<a name="40263"></a>	BufferError() { super(); }
<a name="40264"></a>	BufferError(String s) { super(s); }
<a name="40265"></a>}
<br><a name="40266"></a>
public interface Buffer {
<a name="40267"></a>	char get() throws BufferEmpty, BufferError;
<a name="40268"></a>}
<br><a name="40269"></a>
public interface InfiniteBuffer extends Buffer {
<a name="40270"></a>	 char get() throws BufferError;												// override
<a name="40271"></a>}
</pre><p><a name="40735"></a>
<h4>9.4.3.2	 Example: Overloading</h4>
<p>
<a name="40788"></a>
In the example code:
<p><pre><a name="40767"></a>
interface PointInterface {
<a name="40768"></a>	void move(int dx, int dy);
<a name="40770"></a>}
<br><a name="40772"></a>
interface RealPointInterface extends PointInterface {
<a name="40781"></a>	void move(float dx, float dy);
<a name="40783"></a>	void move(double dx, double dy);
<a name="40775"></a>}
</pre><p><a name="236063"></a>
the method name <code>move</code> is overloaded in interface <code>RealPointInterface</code> with 
three different signatures, two of them declared and one inherited. Any class that 
implements interface <code>RealPointInterface</code> must provide implementations of all 
three method signatures.
<p><i>Death, life, and sleep, reality and thought,<br>
Assist me, God, their boundaries to know . . .<br>
</i>&#151;William Wordsworth, <i>Maternal Grief</i></p>
<p><a name="40748"></a>

<p>

<hr>
<p>
<br>
</font>
</Font></body></html>

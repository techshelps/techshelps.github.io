<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.6.2 Binary Numeric Promotion</title>
<META NAME=MS-HAID CONTENT="5_6_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>5.6.2	 Binary Numeric Promotion</h3>
<a name="170983"></a>
<p>
<a name="170985"></a>
When an operator applies <i>binary numeric promotion</i> to a pair of operands, each of 
which must denote a value of a numeric type, the following rules apply, in order, 
using widening conversion <a href="5_1_2.htm#25222">(&#167;5.1.2)</a> to convert operands as necessary:
<p><ul><a name="170986"></a>
<li>If either operand is of type <code>double</code>, the other is converted to <code>double</code>.
<a name="170987"></a>
<li>Otherwise, if either operand is of type <code>float</code>, the other is converted to <code>float</code>.
<a name="170988"></a>
<li>Otherwise, if either operand is of type <code>long</code>, the other is converted to <code>long</code>.
<a name="170989"></a>
<li>Otherwise, both operands are converted to type <code>int</code>.
</ul><p><a name="170990"></a>
Binary numeric promotion is performed on the operands of certain operators:
<p><ul><a name="170994"></a>
<li>The multiplicative operators <code>*</code>, <code>/</code> and <code>%</code> <a href="15_16.htm#239829">(&#167;15.16)</a>
<a name="170998"></a>
<li>The addition and subtraction operators for numeric types <code>+</code> and <code>- </code><a href="15_17_2.htm#13510">(&#167;15.17.2)</a>
<a name="171002"></a>
<li>The numerical comparison operators <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code> <a href="15_19_1.htm#153654">(&#167;15.19.1)</a>
<a name="171006"></a>
<li>The numerical equality operators <code>==</code> and <code>!=</code> <a href="15_20_1.htm#5198">(&#167;15.20.1)</a>
<a name="171010"></a>
<li>The integer bitwise operators <code>&amp;</code>, <code>^</code>, and <code>|</code> <a href="15_21_1.htm#5233">(&#167;15.21.1)</a>
<a name="171014"></a>
<li>In certain cases, the conditional operator <code>?&#32;:</code> <a href="15_24.htm#5257">(&#167;15.24)</a>
</ul><p><a name="7306"></a>
An example of binary numeric promotion appears above in <a href="5_1.htm#170671">&#167;5.1</a>. Here is another:
<p><pre><a name="13528"></a>
class Test {
<a name="13529"></a>	public static void main(String[] args) {
<a name="13538"></a>		int i = 0;
<a name="13550"></a>		float f = 1.0f;
<a name="13551"></a>		double d = 2.0;
<br><a name="13552"></a>
		// First i*f promoted to float*float, then
<a name="13558"></a>		// float==double is promoted to double==double:
<a name="13553"></a>		if (i * f == d)
<a name="13554"></a>			System.out.println("oops");
<br><a name="13561"></a>
		// A char&amp;byte is promoted to int&amp;int:
<a name="13569"></a>		byte b = 0x1f;
<a name="174808"></a>		char c = 'G';
<a name="174809"></a>		int control = c &amp; b;
<a name="174810"></a>		System.out.println(Integer.toHexString(control));
<br><a name="174811"></a>
		// A int:float promoted to float:float:
<a name="13575"></a>		f = (b==0) ? f : 4.0f;
<a name="17464"></a>		System.out.println(1.0/f);
<br><a name="17463"></a>	}
<br><a name="13539"></a>}
</pre><p><a name="17465"></a>
which produces the output:
<p><pre><a name="29583"></a>
7
<a name="7307"></a>0.25
</pre><p><a name="174310"></a>
The example converts the ASCII character <code>G</code> to the ASCII control-G (BEL), by 
masking off all but the low 5 bits of the character. The <code>7</code> is the numeric value of 
this control character.

<p><i>O suns! O grass of graves! O perpetual transfers and promotions!<br>
</i>&#151;Walt Whitman,<i> Walt Whitman (1855)</i> 
in <i>Leaves of Grass</i></p>

<p>

<hr>
<p>
<br>
</font>
</body></html>

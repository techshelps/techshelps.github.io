<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.2.2 Integer Operations</title>
<META NAME=MS-HAID CONTENT="4_2_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>4.2.2	 Integer Operations</h3>
<a name="51035"></a>
<p>
<a name="29775"></a>
Java provides a number of operators that act on integral values:
<p><ul><a name="10358"></a>
<li>The comparison operators, which result in a value of type <code>boolean</code>:
<ul>
<a name="9181"></a>
<li>The numerical comparison operators <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code> <a href="15_19_1.htm#153654">(&#167;15.19.1)</a>
<a name="17601"></a>
<li>The numerical equality operators <code>==</code> and <code>!=</code> <a href="15_20_1.htm#5198">(&#167;15.20.1)</a>
</ul>
<a name="10365"></a>
<li>The numerical operators, which result in a value of type <code>int</code> or <code>long</code>:
<ul>
<a name="18334"></a>
<li>The unary plus and minus operators <code>+</code> and <code>-</code> (<a href="15_14_3.htm#24924">&#167;15.14.3</a>, <a href="15_14_4.htm#236345">&#167;15.14.4</a>)
<a name="17539"></a>
<li>The multiplicative operators <code>*</code>, <code>/</code>, and <code>%</code> <a href="15_16.htm#239829">(&#167;15.16)</a>
<a name="19482"></a>
<li>The additive operators <code>+</code> and <code>-</code> <a href="15_17_2.htm#13510">(&#167;15.17.2)</a>
<a name="24026"></a>
<li>The increment operator <code>++</code>, both prefix <a href="15_14_1.htm#39547">(&#167;15.14.1)</a> and postfix <a href="15_13_2.htm#39438">(&#167;15.13.2)</a>
<a name="24036"></a>
<li>The decrement operator <code>--</code>, both prefix <a href="15_14_2.htm#239136">(&#167;15.14.2)</a> and postfix <a href="15_13_3.htm#4987">(&#167;15.13.3)</a>
<a name="19496"></a>
<li>The signed and unsigned shift operators <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, and <code>&gt;&gt;&gt;</code> <a href="15_18.htm#5121">(&#167;15.18)</a>
<a name="51061"></a>
<li>The bitwise complement operator <code>~</code> <a href="15_14_5.htm#5017">(&#167;15.14.5)</a>
<a name="17770"></a>
<li>The integer bitwise operators <code>&amp;</code>, <code>|</code>, and <code>^</code> <a href="15_21_1.htm#5233">(&#167;15.21.1)</a>
</ul>
<a name="19469"></a>
<li>The conditional operator <code>? :</code> <a href="15_24.htm#5257">(&#167;15.24)</a>
<a name="18373"></a>
<li>The cast operator, which can convert from an integral value to a value of any specified numeric type (<a href="5_4.htm#176921">&#167;5.4</a>, <a href="15_15.htm#238146">&#167;15.15</a>)
<a name="17774"></a>
<li>The string concatenation operator <code>+</code> <a href="15_17_1.htm#39990">(&#167;15.17.1)</a>, which, when given a <code>String</code> operand and an integral operand, will convert the integral operand to a <code>String</code> representing its value in decimal form, and then produce a newly created <code>String</code> that is the concatenation of the two strings
</ul><p><a name="51025"></a>
Other useful constructors, methods, and constants are predefined in the classes 
<code>Integer</code> <a href="20_7.htm#14348">(&#167;20.7)</a>, <code>Long</code> <a href="20_8.htm#13841">(&#167;20.8)</a>, and <code>Character</code> <a href="20_5.htm#14345">(&#167;20.5)</a>.
<p><a name="28057"></a>
If an integer operator other than a shift operator has at least one operand of type <code>long</code>, then the operation is carried out using 64-bit precision, and the result of the numerical operator is of type <code>long</code>. If the other operand is not <code>long</code>, it is first widened <a href="5_1_2.htm#25222">(&#167;5.1.2)</a> to type <code>long</code> by numeric promotion <a href="5_6.htm#26917">(&#167;5.6)</a>. Otherwise, the operation is carried out using 32-bit precision, and the result of the numerical operator is of type <code>int</code>. If either operand is not an <code>int</code>, it is first widened to type <code>int</code> by numeric promotion.<p>
<a name="9194"></a>
The built-in integer operators do not indicate overflow or underflow in any way. The only numeric operators that can throw an exception <a href="chap11.htm">(&#167;11)</a> are the integer divide operator <code>/</code> <a href="15_16_2.htm#5047">(&#167;15.16.2)</a> and the integer remainder operator <code>%</code> <a href="15_16_3.htm#24956">(&#167;15.16.3)</a>, which throw an <code>ArithmeticException</code> if the right-hand operand is zero. <p>
<a name="86654"></a>
The example:<p>
<pre><a name="51117"></a>
class Test {
<a name="51118"></a>	public static void main(String[] args) {
<a name="51119"></a>		int i = 1000000;
<a name="51254"></a>		System.out.println(i * i);
<a name="51216"></a>		long l = i;
<a name="86535"></a>		System.out.println(l * l);
<a name="86536"></a>		System.out.println(20296 / (l - i));
<a name="86537"></a>	}
<a name="86538"></a>}
</pre><p><a name="51131"></a>
produces the output:
<p><pre><a name="51149"></a>
-727379968
<a name="51133"></a>1000000000000
</pre><p><a name="51199"></a>
and then encounters an <code>ArithmeticException</code> in the division by <code>l</code> <code>-</code> <code>i</code>, because 
<code>l</code> <code>-</code> <code>i</code> is zero. The first multiplication is performed in 32-bit precision, whereas the 
second multiplication is a <code>long</code> multiplication. The value <code>-727379968</code> is the decimal value of the low 32 bits of the mathematical result, <code>1000000000000</code>, which is 
a value too large for type <code>int</code>.
<p><a name="51203"></a>
Any value of any integral type may be cast to or from any numeric type. There are no casts between integral types and the type <code>boolean</code>.<p>


</body></html>

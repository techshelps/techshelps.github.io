<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>21.3 The Class java.util.Date</title>
<META NAME=MS-HAID CONTENT="21_3">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>21.3	 The Class java.util.Date</h1>
<a name="7433"></a>
<p>
<a name="8613"></a>
The class <code>Date</code> provides a system-independent abstraction of dates and times, to a 
millisecond precision. Dates may be constructed from a year, month, date (day of 
month), hour, minute, and second; those six components and the day of the week, 
may be extracted; and dates may be compared and converted to a readable string.
<p><pre><a name="7434"></a>public class <code><b>Date</b></code> {
<a name="7435"></a>	public <code><b>Date</b></code>();
<a name="7436"></a>	public <code><b>Date</b></code>(long time);
<a name="7437"></a>	public <code><b>Date</b></code>(int year, int month, int date);
<a name="7438"></a>	public <code><b>Date</b></code>(int year, int month, int date,
<a name="25071"></a>			int hours, int minutes);
<a name="7439"></a>	public <code><b>Date</b></code>(int year, int month, int date,
<a name="20368"></a>			int hours, int minutes, int seconds);
<a name="7440"></a>	public <code><b>Date</b></code>(String s) throws IllegalArgumentException;
<a name="8534"></a>	public String <code><b>toString</b></code>();
<a name="8535"></a>	public boolean <code><b>equals</b></code>(Object obj);
<a name="8536"></a>	public int <code><b>hashCode</b></code>();
<a name="7443"></a>	public int <code><b>getYear</b></code>();
<a name="7444"></a>	public void <code><b>setYear</b></code>(int year);
<a name="7445"></a>	public int <code><b>getMonth</b></code>();
<a name="7446"></a>	public void <code><b>setMonth</b></code>(int month);
<a name="7447"></a>	public int <code><b>getDate</b></code>();
<a name="7448"></a>	public void <code><b>setDate</b></code>(int date);
<a name="7449"></a>	public int <code><b>getDay</b></code>();
<a name="7450"></a>	public int <code><b>getHours</b></code>();
<a name="7451"></a>	public void <code><b>setHours</b></code>(int hours);
<a name="7452"></a>	public int <code><b>getMinutes</b></code>();
<a name="7453"></a>	public void <code><b>setMinutes</b></code>(int minutes);
<a name="7454"></a>	public int <code><b>getSeconds</b></code>();
<a name="7455"></a>	public void <code><b>setSeconds</b></code>(int seconds);
<a name="7456"></a>	public long <code><b>getTime</b></code>();
<a name="7457"></a>	public void <code><b>setTime</b></code>(long time);
<a name="7458"></a>	public boolean <code><b>before</b></code>(Date when);
<a name="7459"></a>	public boolean <code><b>after</b></code>(Date when);
<a name="7463"></a>	public String <code><b>toLocaleString</b></code>();
<a name="7464"></a>	public String <code><b>toGMTString</b></code>();
<a name="7465"></a>	public int <code><b>getTimezoneOffset</b></code>();
<a name="8542"></a>	public static long <code><b>UTC</b></code>(int year, int month, int date,
<a name="20367"></a>			int hours, int minutes, int seconds);
<a name="25066"></a>	public static long <code><b>parse</b></code>(String s)
<a name="25067"></a>		throws IllegalArgumentException;
<a name="25068"></a>}
</pre><p><a name="8657"></a>
Examples:
<p><ul><a name="25556"></a>
<li>To print today's date:
<a name="8662"></a>	System.out.println("today = " + new Date());
<a name="8648"></a>
<li>To find out the day of the week for some particular date, for example, January 16, 1963:
<a name="8650"></a>	new Date(63, 0, 16).getDay()
</ul><p><a name="8735"></a>
While the <code>Date</code> class is intended to reflect UTC (Coordinated Universal Time), it may not do so exactly, depending on the host environment of the Java system. Nearly all modern operating systems assume that 1 day = <img src="utanc1.gif"> = 86400 seconds in all cases. In UTC, however, about once every year or two there is an extra second, called a "leap second." The leap second is always added as the last second of the day, and nearly always on December 31 or June 30. For example, the last minute of the year 1995 was 61 seconds long, thanks to an added leap second.<p>
<a name="23606"></a>
Most computer clocks are currently not accurate enough to be able to reflect the leap-second distinction. Some computer standards are defined in terms of GMT (Greenwich Mean Time), which is equivalent to UT (Universal Time).  GMT is the "civil" name for the standard; UT is the "scientific" name for the same standard. The distinction between UTC and UT is that UTC is based on an atomic clock and UT is based on astronomical observations, which for all practical purposes is an invisibly fine hair to split. Because the earth's rotation is not uniform-it slows down and speeds up in complicated ways-UT does not always flow uniformly. Leap seconds are introduced as needed into UTC so as to keep UTC within 0.9 seconds of UT1, which is a version of UT with certain corrections applied. There are other time and date systems as well; for example, the time scale used by GPS (the satellite-based Global Positioning System) is synchronized to UTC but is <i>not</i> adjusted for leap seconds. An interesting source of further information is the U. S. Naval Observatory, particularly the Directorate of Time at:<p>
<a name="8743"></a>
<a href="http://tycho.usno.navy.mil/">http://tycho.usno.navy.mil/</a>
<p><a name="8746"></a>
and their definitions of "Systems of Time" at:<p>
<a name="8747"></a><a href="http://tycho.usno.navy.mil/systime.html">http://tycho.usno.navy.mil/systime.html</a>
<p><a name="8643"></a>
In all methods of class <code>Date</code> that accept or return year, month, day of month, hours, minutes, and seconds values, the following representations are used:<p>
<ul><a name="8787"></a>
<li>A year <i>y</i> is represented by the integer <img src="utanc2.gif">.
<a name="8795"></a>
<li>A month is represented by an integer form 0 to 11; 0 is January, 1 is February, and so on; thus 11 is December.
<a name="8799"></a>
<li>A date (day of month) is represented by an integer from 1 to 31 in the usual manner.
<a name="8800"></a>
<li>An hour is represented by an integer from 0 to 23. Thus the hour from midnight to 1 AM is hour 0, and the hour from noon to 1 PM is hour 12.
<a name="8801"></a>
<li>A minute is represented by an integer from 0 to 59 in the usual manner.
<a name="8802"></a>
<li>A second is represented by an integer from 0 to 61. The values 60 and 61 will occur only for leap seconds, and even then only in Java implementations that actually track leap seconds correctly. Because of the manner in which leap seconds are currently introduced, it is extremely unlikely that two leap seconds will occur in the same minute, but this specification follows the date and time conventions for ISO C.
</ul><p><a name="8803"></a>
In all cases, arguments given to methods for these purposes need not fall within 
the indicated ranges; for example, a date may be specified as January 32 and will 
be interpreted as meaning February 1.
<p><a name="7467"></a>
<p><strong>21.3.1	</strong> <code>public Date()</code>
<p>
<a name="8754"></a>
This constructor initializes a newly created <code>Date</code> object so that it represents the 
instant of time that it was created, measured to the nearest millisecond.
<p><a name="7468"></a>
<p><strong>21.3.2	</strong> <code>public Date(long time)</code>
<p>
<a name="8772"></a>
This constructor initializes a newly created <code>Date</code> object so that it represents the 
instant of time that is <code>time</code> milliseconds after the standard base time known as 
"the epoch," namely 00:00:00 GMT on January 1, 1970. See also the method 
<code>currentTimeMillis</code> <a href="20_18.htm#5984">(&#167;20.18.6)</a> of class <code>System</code>.
<p><a name="7469"></a>
<p><strong>21.3.3	</strong> <code>public Date(int year, int month, int date)</code>
<p>
<a name="8804"></a>
This constructor initializes a newly created <code>Date</code> object so that it represents midnight at the beginning of the day specified by the <code>year</code>, <code>month</code>, and <code>date</code> arguments, in the local time zone. Thus, it has the same effect as the constructor call 
<a href="21_3.htm#7471">(&#167;21.3.5)</a>:
<p><pre><a name="8878"></a><code>Date(year, month, date, 0, 0, 0)</code> 
</pre><p><a name="7470"></a>
<p><strong>21.3.4	</strong> <code>public Date(int year, int month, int date,<br> &#32; &#32; &#32;int hours, int minutes)</code>
<p>
<a name="8820"></a>
This constructor initializes a newly created <code>Date</code> object so that it represents the 
instant at the start of the minute specified by the <code>year</code>, <code>month</code>, <code>date</code>, <code>hours</code>, and 
<code>minutes</code> arguments, in the local time zone. Thus, it has the same effect as the constructor call <a href="21_3.htm#7471">(&#167;21.3.5)</a>:
<p><pre><a name="8854"></a><code>Date(year, month, date, hours, minutes, 0)
</code></pre><p><a name="7471"></a>
<p><strong>21.3.5	</strong> <code>public Date(int year, int month, int date,<br> &#32; &#32; &#32;int hours, int minutes, int seconds)</code>
<p>
<a name="8845"></a>
This constructor initializes a newly created <code>Date</code> object so that it represents the 
instant at the start of the second specified by the <code>year</code>, <code>month</code>, <code>date</code>, <code>hours</code>, 
<code>minutes</code>, &#32;and <code>seconds</code> arguments, in the local time zone.
<p><a name="8901"></a>
<p><strong>21.3.6	</strong> <code>public Date(String s)<br>throws IllegalArgumentException</code>
<p>
<a name="8906"></a>
This constructor initializes a newly created <code>Date</code> object so that it represents the 
date and time indicated by the string s, which is interpreted as if by the <code>parse</code> 
method <a href="21_3.htm#21075">(&#167;21.3.31)</a>.
<p><a name="8902"></a>
<p><strong>21.3.7	</strong> <code>public String toString()</code>
<p>
<a name="8915"></a>
This <code>Date</code> object is converted to a <code>String</code> of the form:
<p><pre><a name="20387"></a>"dow mon dd hh:mm:ss zzz yyyy"
</pre><p><a name="20391"></a>
where:<p>
<ul><a name="20401"></a>
<li><code>dow</code> is the day of the week (<code>Sun</code>, <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thu</code>, <code>Fri</code>, <code>Sat</code>).
<a name="20405"></a>
<li><code>mon</code> is the month (<code>Jan</code>, <code>Feb</code>, <code>Mar</code>, <code>Apr</code>, <code>May</code>, <code>Jun</code>, <code>Jul</code>, <code>Aug</code>, <code>Sep</code>, <code>Oct</code>, <code>Nov</code>, <code>Dec</code>).
<a name="20472"></a>
<li><code>dd</code> is the day of the month (<code>01</code> through <code>31</code>), as two decimal digits.
<a name="20514"></a>
<li><code>hh</code> is the hour of the day (<code>00</code> through <code>23</code>), as two decimal digits.
<a name="20518"></a>
<li><code>mm</code> is the minute within the hour (<code>00</code> through <code>59</code>), as two decimal digits.
<a name="20522"></a>
<li><code>ss</code> is the second within the minute (<code>00</code> through <code>61</code>), as two decimal digits.
<a name="20545"></a>
<li><code>zzz</code> is the time zone (and may reflect daylight saving time). Standard time zone abbreviations include those recognized by the method <code>parse</code> <a href="21_3.htm#21075">(&#167;21.3.31)</a>. If time zone information is not available, then <code>zzz</code> is empty-that is, it consists of no characters at all.
<a name="20546"></a>
<li><code>yyyy</code> is the year, as four decimal digits.
</ul><p><a name="20397"></a>
See also methods <code>toLocaleString</code> <a href="21_3.htm#7495">(&#167;21.3.27)</a> and <code>toGMTString</code> <a href="21_3.htm#7496">(&#167;21.3.28)</a>.<p>
<a name="8949"></a>
Overrides the <code>toString</code> method of <code>Object</code> <a href="20_1.htm#1152">(&#167;20.1.2)</a>.<p>
<a name="8903"></a>
<p><strong>21.3.8	</strong> <code>public boolean equals(Object obj)</code>
<p>
<a name="8977"></a>
The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>Date</code> object that 
represents the same point in time, to the millisecond, as this <code>Date</code> object. Thus 
two <code>Date</code> objects are equal if and only if the <code>getTime</code> method <a href="21_3.htm#7488">(&#167;21.3.23)</a> returns 
the same <code>long</code> value from both.
<p><a name="8958"></a>
Overrides the <code>equals</code> method of <code>Object</code> <a href="20_1.htm#14865">(&#167;20.1.3)</a>.<p>
<a name="8576"></a>
<p><strong>21.3.9	</strong> <code>public int hashCode()</code>
<p>
<a name="8991"></a>
The result is the exclusive OR of the two halves of the primitive <code>long</code> value 
returned by the <code>getTime</code> method <a href="21_3.htm#7488">(&#167;21.3.23)</a>. That is, the hash code is the value of 
the expression:
<p><pre><a name="8992"></a>(int)(this.getTime()^(this.getTime()&gt;&gt;&gt;32))
</pre><p><a name="8965"></a>
Overrides the <code>hashCode</code> method of <code>Object</code> <a href="20_1.htm#13784">(&#167;20.1.4)</a>.<p>
<a name="7475"></a>
<p><strong>21.3.10	</strong> <code>public int getYear()</code>
<p>
<a name="9008"></a>
The returned value is the result of subtracting 1900 from the year that contains or 
begins with the instant in time represented by this <code>Date</code> object, as interpreted in 
the local time zone.
<p><a name="7476"></a>
<p><strong>21.3.11	</strong> <code>public void setYear(int year)</code>
<p>
<a name="9009"></a>
This <code>Date</code> object is modified so that it represents a point in time within the specified year, with the month, date, hour, minute, and second the same as before, as 
interpreted in the local time zone. (Of course, if the date was February 29, for 
example, and the year is set to a non-leap year, then the new date will be treated 
as if it were on March 1.)
<p><a name="7477"></a>
<p><strong>21.3.12	</strong> <code>public int getMonth()</code>
<p>
<a name="20577"></a>
The returned value is a number (<code>0</code> through <code>11</code>) representing the month that contains or begins with the instant in time represented by this <code>Date</code> object, as interpreted in the local time zone.
<p><a name="7478"></a>
<p><strong>21.3.13	</strong> <code>public void setMonth(int month)</code>
<p>
<a name="20675"></a>
This <code>Date</code> object is modified so that it represents a point in time within the specified month, with the year, date, hour, minute, and second the same as before, as 
interpreted in the local time zone. If the date was October 31, for example, and the 
month is set to June, then the new date will be treated as if it were on July 1, 
because June has only 30 days.
<p><a name="7479"></a>
<p><strong>21.3.14	</strong> <code>public int getDate()</code>
<p>
<a name="20584"></a>
The returned value is a number (<code>1</code> through <code>31</code>) representing day of the month that 
contains or begins with the instant in time represented by this <code>Date</code> object, as 
interpreted in the local time zone.
<p><a name="20697"></a>
<p><strong>21.3.15	</strong> <code>public void setDate(int date)</code>
<p>
<a name="20710"></a>
This <code>Date</code> object is modified so that it represents a point in time within the specified day of the month, with the year, month, hour, minute, and second the same as 
before, as interpreted in the local time zone.If the date was April 30, for example, 
and the date is set to 31, then it will be treated as if it were on May 1, because 
April has only 30 days.
<p><a name="20698"></a>
<p><strong>21.3.16	</strong> <code>public int getDay()</code>
<p>
<a name="20699"></a>
The returned value (<code>0</code> = Sunday, <code>1</code> = Monday, <code>2</code> = Tuesday, <code>3</code> = Wednesday, <code>4</code> = 
Thursday, <code>5</code> = Friday, <code>6</code> = Saturday) represents the day of the week that contains or 
begins with the instant in time represented by this <code>Date</code> object, as interpreted in 
the local time zone.
<p><a name="7482"></a>
<p><strong>21.3.17	</strong> <code>public int getHours()</code>
<p>
<a name="20592"></a>
The returned value is a number (<code>0</code> through <code>23</code>) representing the hour within the 
day that contains or begins with the instant in time represented by this <code>Date</code> 
object, as interpreted in the local time zone.
<p><a name="20739"></a>
<p><strong>21.3.18	</strong> <code>public void setHours(int hours)</code>
<p>
<a name="20744"></a>
This <code>Date</code> object is modified so that it represents a point in time within the specified hour of the day, with the year, month, date, minute, and second the same as 
before, as interpreted in the local time zone.
<p><a name="20740"></a>
<p><strong>21.3.19	</strong> <code>public int getMinutes()</code>
<p>
<a name="20741"></a>
The returned value is a number (<code>0</code> through <code>59</code>) representing the minute within the 
hour that contains or begins with the instant in time represented by this <code>Date</code> 
object, as interpreted in the local time zone.
<p><a name="7485"></a>
<p><strong>21.3.20	</strong> <code>public void setMinutes(int minutes)</code>
<p>
<a name="20754"></a>
This <code>Date</code> object is modified so that it represents a point in time within the specified minute of the hour, with the year, month, date, hour, and second the same as 
before, as interpreted in the local time zone.
<p><a name="7486"></a>
<p><strong>21.3.21	</strong> <code>public int getSeconds()</code>
<p>
<a name="20600"></a>
The returned value is a number (<code>0</code> through <code>61</code>) representing the second within the 
minute that contains or begins with the instant in time represented by this <code>Date</code> 
object, as interpreted in the local time zone.
<p><a name="7487"></a>
<p><strong>21.3.22	</strong> <code>public void setSeconds(int seconds)</code>
<p>
<a name="20762"></a>
This <code>Date</code> object is modified so that it represents a point in time within the specified second of the minute, with the year, month, date, hour, and minute the same 
as before, as interpreted in the local time zone.
<p><a name="7488"></a>
<p><strong>21.3.23	</strong> <code>public long getTime()</code>
<p>
<a name="20780"></a>
This method returns the time represented by this <code>Date</code> object, represented as the 
distance, measured in milliseconds, of that time from the epoch (00:00:00 GMT 
on January 1, 1970).
<p><a name="7489"></a>
<p><strong>21.3.24	</strong> <code>public void setTime(long time)</code>
<p>
<a name="20796"></a>
This <code>Date</code> object is modified so that it represents a point in time that is <code>time</code> milliseconds after the epoch (00:00:00 GMT on January 1, 1970).
<p><a name="7490"></a>
<p><strong>21.3.25	</strong> <code>public boolean before(Date when)</code>
<p>
<a name="20806"></a>
The result is <code>true</code> if and only if the instant represented by this <code>Date</code> object is 
strictly earlier than the instant represented by <code>when</code>.
<p><a name="7491"></a>
<p><strong>21.3.26	</strong> <code>public boolean after(Date when)</code>
<p>
<a name="20808"></a>
The result is <code>true</code> if and only if the instant represented by this <code>Date</code> object is 
strictly later than the instant represented by <code>when</code>.
<p><a name="7495"></a>
<p><strong>21.3.27	</strong> <code>public String toLocaleString()</code>
<p>
<a name="20815"></a>
This <code>Date</code> object is converted to a <code>String</code> of an implementation-dependent form. 
The general intent is that the form should be familiar to the user of the Java application, wherever it may happen to be running. The intent is comparable to that of 
the <code>%c</code> format supported by the <code>strftime</code> function of ISO C.
<p><a name="20840"></a>
See also methods <code>toString</code> <a href="21_3.htm#8902">(&#167;21.3.7)</a> and <code>toGMTString</code> <a href="21_3.htm#7496">(&#167;21.3.28)</a>.<p>
<a name="7496"></a>
<p><strong>21.3.28	</strong> <code>public String toGMTString()</code>
<p>
<a name="20852"></a>
This <code>Date</code> object is converted to a <code>String</code> of length 23 or 24 of the form:
<p><pre><a name="20853"></a>"<i>d</i> <i>mon</i> <i>yyyy</i> <i>hh</i>:<i>mm</i>:<i>ss</i> <i>GMT</i>"
</pre><p><a name="20854"></a>
where:<p>
<ul><a name="23618"></a>
<li><i>d</i> is the day of the month (<code>1</code> through <code>31</code>), as one or two decimal digits.
<a name="23619"></a>
<li><i>mon</i> is the month (<code>Jan</code>, <code>Feb</code>, <code>Mar</code>, <code>Apr</code>, <code>May</code>, <code>Jun</code>, <code>Jul</code>, <code>Aug</code>, <code>Sep</code>, <code>Oct</code>, <code>Nov</code>, <code>Dec</code>).
<a name="23620"></a>
<li><i>yyyy</i> is the year, as four decimal digits.
<a name="23621"></a>
<li><i>hh</i> is the hour of the day (<code>00</code> through <code>23</code>), as two decimal digits.
<a name="20859"></a>
<li><i>mm</i> is the minute within the hour (<code>00</code> through <code>59</code>), as two decimal digits.
<a name="20860"></a>
<li><i>ss</i> is the second within the minute (<code>00</code> through <code>61</code>), as two decimal digits.
<a name="20861"></a>
<li><i>GMT</i> is exactly the ASCII letters "<code>GMT</code>" to indicate Greenwich Mean Time.
</ul><p><a name="20830"></a>
The result does not depend on the local time zone.<p>
<a name="20987"></a>
See also methods <code>toString</code> <a href="21_3.htm#8902">(&#167;21.3.7)</a> and <code>toLocaleString</code> <a href="21_3.htm#7495">(&#167;21.3.27)</a>.<p>
<a name="7497"></a>
<p><strong>21.3.29	</strong> <code>public int getTimezoneOffset()</code>
<p>
<a name="20988"></a>
This method returns the offset, measured in minutes, for the local time zone relative to UTC that is appropriate for the time represented by this <code>Date</code> object.
<p><a name="20989"></a>
For example, in Massachusetts, five time zones west of Greenwich:<p>
<pre><a name="20990"></a>new Date(96, 1, 14).getTimezoneOffset() returns 300
</pre><p><a name="20995"></a>
because on February 14, 1996, standard time (Eastern Standard Time) is in use, which is offset five hours from UTC; but:<p>
<pre><a name="20998"></a>new Date(96, 5, 1).getTimezoneOffset() returns 240
</pre><p><a name="20999"></a>
because on May 1, 1996, daylight saving time (Eastern Daylight Time) is in use, which is offset only four hours from UTC.<p>
<a name="21070"></a>
This method produces the same result as if it computed:<p>
<pre><a name="21071"></a>
(this.getTime() - UTC(this.getYear(),
<a name="21072"></a>							this.getMonth(),
<a name="21058"></a>							this.getDate(),
<a name="21066"></a>							this.getHours(),
<a name="21063"></a>							this.getMinutes(),
<a name="21067"></a>							this.getSeconds())) / (60 * 1000)
</pre><p><a name="20922"></a>
<p><strong>21.3.30	</strong> <code>public static long UTC(int year, int month, int date,<br> &#32; &#32; &#32;int hours, int minutes, int seconds)</code>
<p>
<a name="21083"></a>
The arguments are interpreted as a year, month, day of the month, hour of the day, 
minute within the hour, and second within the minute, exactly as for the <code>Date</code> constructor of six arguments <a href="21_3.htm#7471">(&#167;21.3.5)</a>, except that the arguments are interpreted relative to UTC rather than to the local time zone. The time indicated is returned 
represented as the distance, measured in milliseconds, of that time from the epoch 
(00:00:00 GMT on January 1, 1970).
<p><a name="21075"></a>
<p><strong>21.3.31	</strong> <code>public static long parse(String s)<br>throws IllegalArgumentException</code>
<p>
<a name="21097"></a>
An attempt is made to interpret the string <code>s</code> as a representation of a date and time. 
If the attempt is successful, the time indicated is returned represented as the distance, measured in milliseconds, of that time from the epoch (00:00:00 GMT on 
January 1, 1970). If the attempt fails, an <code>IllegalArgumentException</code> is thrown.
<p><a name="21133"></a>
The string <code>s</code> is processed from left to right, looking for data of interest.<p>
<a name="21109"></a>
Any material in <code>s</code> that is within the ASCII parenthesis characters <code>(</code> and <code>)</code> is ignored. Parentheses may be nested. Otherwise, the only characters permitted within <code>s</code> are these ASCII characters:<p>
<pre><a name="21113"></a>
abcdefghijklmnopqrstuvwxyz
<a name="21117"></a>ABCDEFGHIJKLMNOPQRSTUVWXYZ
<a name="21120"></a>0123456789,+-:/
</pre><p><a name="21121"></a>
and whitespace characters <a href="20_5.htm#13831">(&#167;20.5.19)</a>.<p>
<a name="21127"></a>
A consecutive sequence of decimal digits is treated as a decimal number:<p>
<ul><a name="21128"></a>
<li>If a number is preceded by <code>+</code> or <code>-</code> and a year has already been recognized, then the number is a time-zone offset. If the number is less than 24, it is an offset measured in hours. Otherwise, it is regarded as an offset in minutes, expressed in 24-hour time format without punctuation. A preceding <code>+</code> means an eastward offset and a preceding <code>-</code> means a westward offset. Time zone offsets are always relative to UTC (Greenwich). Thus, for example, <code>-5</code> occurring in the string would mean "five hours west of Greenwich" and <code>+0430</code> would mean "four hours and thirty minutes east of Greenwich." It is permitted for the string to specify <code>GMT</code>, <code>UT</code>, or <code>UTC</code> redundantly-for example, <code>GMT-5</code> or <code>utc+0430</code>.
<a name="21146"></a>
<li>If a number is greater than 70, it is regarded as a year number. It must be followed by a space, comma, slash, or end of string. If it is greater than 1900, then 1900 is subtracted from it.
<a name="21150"></a>
<li>If the number is followed by a colon, it is regarded as an hour, unless an hour has already been recognized, in which case it is regarded as a minute.
<a name="21153"></a>
<li>If the number is followed by a slash, it is regarded as a month (it is decreased by <code>1</code> to produce a number in the range <code>0</code> to <code>11</code>), unless a month has already been recognized, in which case it is regarded as a day of the month.
<a name="21165"></a>
<li>If the number is followed by whitespace, a comma, a hyphen, or end of string, then if an hour has been recognized but not a minute, it is regarded as a minute; otherwise, if a minute has been recognized but not a second, it is regarded as a second; otherwise, it is regarded as a day of the month.
</ul><p><a name="23635"></a>
A consecutive sequence of letters is regarded as a word and treated as follows:<p>
<ul><a name="23636"></a>
<li>A word that matches <code>AM</code>, ignoring case, is ignored (but the parse fails if an hour has not been recognized or is less than <code>1</code> or greater than <code>12</code>).
<a name="21181"></a>
<li>A word that matches <code>PM</code>, ignoring case, adds <code>12</code> to the hour (but the parse fails if an hour has not been recognized or is less than <code>1</code> or greater than <code>12</code>).
<a name="21182"></a>
<li>Any word that matches any prefix of <code>SUNDAY</code>, <code>MONDAY</code>, <code>TUESDAY</code>, <code>WEDNESDAY</code>, <code>THURSDAY</code>, <code>FRIDAY</code>, or <code>SATURDAY</code>, ignoring case, is ignored. For example, <code>sat</code>, <code>Friday</code>, <code>TUE</code>, and <code>Thurs</code> are ignored.
<a name="21189"></a>
<li>Otherwise, any word that matches any prefix of <code>JANUARY</code>, <code>FEBRUARY</code>, <code>MARCH</code>, <code>APRIL</code>, <code>MAY</code>, <code>JUNE</code>, <code>JULY</code>, <code>AUGUST</code>, <code>SEPTEMBER</code>, <code>OCTOBER</code>, <code>NOVEMBER</code>, or <code>DECEMBER</code>, &#32;ignoring case, and considering them in the order given here, is recognized &#32;as specifying a month and is converted to a number (<code>0</code> to <code>11</code>). For example, <code>aug</code>, <code>Sept</code>, <code>april</code>, and <code>NOV</code> are recognized as months. So is <code>Ma</code>, which is recognized as <code>MARCH</code>, not <code>MAY</code>.
<a name="21192"></a>
<li>Any word that matches <code>GMT</code>, <code>UT</code>, or <code>UTC</code>, ignoring case, is treated as referring to UTC.
<a name="21195"></a>
<li>Any word that matches <code>EST</code>, <code>CST</code>, <code>MST</code>, or <code>PST</code>, ignoring case, is recognized as referring to the time zone in North America that is five, six, seven, or eight hours west of Greenwich, respectively. Any word that matches <code>EDT</code>, <code>CDT</code>, <code>MDT</code>, or <code>PDT</code>, ignoring case, is recognized as referring to the same time zone, respectively, during daylight saving time. (In the future, this method may be upgraded to recognize other time zone designations.)
</ul><p><a name="21210"></a>
Once the entire string <code>s</code> has been scanned, it is converted to a time result in one of two ways. If a time zone or time-zone offset has been recognized, then the year, month, day of month, hour, minute, and second are interpreted in UTC <a href="21_3.htm#20922">(&#167;21.3.30)</a> and then the time-zone offset is applied. Otherwise, the year, month, day of month, hour, minute, and second are interpreted in the local time zone.<p>


</body></html>

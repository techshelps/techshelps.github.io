<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>18.4.1 The @see Tag</title>
<META NAME=MS-HAID CONTENT="18_4_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>18.4.1	 The @see Tag</h3>
<a name="27008"></a>
<p>
<a name="27009"></a>
The following are examples of <code>@see</code> paragraphs, which may be used in any documentation comment to indicate a cross-reference to a class, interface, method, 
constructor, field, or URL:
<p><pre><a name="27010"></a>
@see java.lang.String
<a name="27084"></a>@see String
<a name="27080"></a>@see java.io.InputStream;
<a name="27012"></a>@see String#equals
<a name="27091"></a>@see java.lang.Object#wait(int)
<a name="27095"></a>@see java.io.RandomAccessFile#RandomAccessFile(File, String)
<a name="27087"></a>@see Character#MAX_RADIX
<a name="27014"></a>@see &lt;a href="spec.html"&gt;Java Spec&lt;/a&gt;
</pre><p><a name="27020"></a>
The character <code>#</code> separates the name of a class from the name of one of its fields, 
methods, or constructors. One of several overloaded methods or constructors may 
be selected by including a parenthesized list of argument types after the method or 
constructor name.
<p><a name="27126"></a>
A documentation comment may contain more than one <code>@see</code> tag.<p>


</body></html>

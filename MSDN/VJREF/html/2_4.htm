<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.4 Grammar Notation</title>
<META NAME=MS-HAID CONTENT="2_4">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>2.4	 Grammar Notation</h2>
<a name="90767"></a>
<p>
<a name="48048"></a>
Terminal symbols are shown in <code>fixed</code> <code>width</code> font in the productions of the lexical 
and syntactic grammars, and throughout this specification whenever the text is 
directly referring to such a terminal symbol. These are to appear in a program 
exactly as written. 
<p><a name="139619"></a>
Nonterminal symbols are shown in <i>italic</i> type. The definition of a nonterminal is introduced by the name of the nonterminal being defined followed by a colon. One or more alternative right-hand sides for the nonterminal then follow on succeeding lines. For example, the syntactic definition:<p>
<pre>
<i>IfThenStatement:<br>
	<code>if ( </code>Expression<code> )&#32;</code>Statement
</i></pre><p><a name="48054"></a>
states that the nonterminal <i>IfThenStatement </i>represents the token <code>if</code>, followed by a 
left parenthesis token, followed by an <i>Expression</i>, followed by a right parenthesis 
token, followed by a <i>Statement</i>. As another example, the syntactic definition:
<p><pre>
<i>ArgumentList:<br>
	Argument<br>
	ArgumentList<code> , </code>Argument
</i></pre><p><a name="139922"></a>
states that an <i>ArgumentList</i> may represent either a single <i>Argument</i> or an 
<i>ArgumentList</i>, &#32;followed by a comma, followed by an <i>Argument</i>. This definition of 
<i>ArgumentList</i> is <i>recursive</i>, that is to say, it is defined in terms of itself. The result 
is that an <i>ArgumentList</i> may contain any positive number of arguments. Such 
recursive definitions of nonterminals are common.
<p><a name="137950"></a>
The subscripted suffix "<i>opt</i>", which may appear after a terminal or nonterminal, indicates an <i>optional symbol</i>. The alternative containing the optional symbol actually specifies two right-hand sides, one that omits the optional element and one that includes it. This means that:<p>
<pre>
<i>BreakStatement:<br>
	<code>break </code>Identifieropt<code> ;
</code></i></pre><p><a name="48059"></a>
is a convenient abbreviation for:
<p><pre>
<i>BreakStatement:<br>
	<code>break ;<br>
</code>	<code>break </code>Identifier<code> ;
</code></i></pre><p><a name="48061"></a>
and that:
<p><pre>
<i><i>ForStatement</i>:<br>
	<code>for ( </code>ForInitopt<code> ; </code>Expressionopt<code> ; </code>ForUpdateopt<code> ) </code>Statement
</i></pre><p><a name="44856"></a>
is a convenient abbreviation for:
<p><pre>
<i><i>ForStatement</i>:<br>
<code>	for ( ; </code>Expressionopt<code> ; </code>ForUpdateopt<code> ) </code>Statement<br>
<code>	for ( </code>ForInit<code> ; </code>Expressionopt<code> ; </code>ForUpdateopt<code> ) </code>Statement
</i></pre><p><a name="49500"></a>
which in turn is an abbreviation for:
<p><pre>
<i><i>ForStatement</i>:<br>
<code>	for ( ; ; </code>ForUpdateopt<code> ) </code>Statement<br>
<code>	for ( ; </code>Expression<code> ; </code>ForUpdateopt<code> ) </code>Statement<br>
<code>	for ( </code>ForInit<code> ; ; </code>ForUpdateopt<code> ) </code>Statement<br>
<code>	for ( </code>ForInit<code> ; </code>Expression<code> ; </code>ForUpdateopt<code> ) </code>Statement
</i></pre><p><a name="49529"></a>
which in turn is an abbreviation for:
<p><pre>
<i><i>ForStatement</i>:<br>
<code>	for ( ; ; ) </code>Statement<br>
<code>	for ( ; ; </code>ForUpdate<code> ) </code>Statement<br>
<code>	for ( ; </code>Expression<code> ; ) </code>Statement<br>
<code>	for ( ; </code>Expression<code> ; </code>ForUpdate<code> ) </code>Statement<br>
	<code>for ( </code>ForInit<code> ; ; ) </code>Statement<br>
<code>	for ( </code>ForInit<code> ; ; </code>ForUpdate<code> ) </code>Statement<br>
<code>	for ( </code>ForInit<code> ; </code>Expression<code> ; ) </code>Statement<br>
<code>	for ( </code>ForInit<code> ; </code>Expression<code> ; </code>ForUpdate<code> ) </code>Statement
</i></pre><p><a name="48067"></a>
so the nonterminal <i>ForStatement</i> actually has eight alternative right-hand sides.
<p><a name="27547"></a>
A very long right-hand side may be continued on a second line by substantially indenting this second line, as in:<p>
<pre>
<i><i>ConstructorDeclaration</i>:<br>
<i>	ConstructorModifiers</i>opt<code>&#32;</code><i>ConstructorDeclarator<br>
</i>		Throwsopt<code>&#32;</code>ConstructorBody
</i></pre><p><a name="27550"></a>
which defines one right-hand side for the nonterminal <i>ConstructorDeclaration</i>. 
(This right-hand side is an abbreviation for four alternative right-hand sides, 
because of the two occurrences of "opt".)
<p><a name="139949"></a>
When the words "one of" follow the colon in a grammar definition, they signify that each of the terminal symbols on the following line or lines is an alternative definition. For example, the lexical grammar for Java contains the production:<p>
<pre>
<i>ZeroToThree: one of<br>
	<code>0 1 2 3
</code></i></pre><p><a name="46646"></a>
which is merely a convenient abbreviation for:
<p><pre>
<i>ZeroToThree:<br>
	<code>0<br>
</code>	<code>1<br>
</code>	<code>2<br>
</code>	<code>3
</code></i></pre><p><a name="46654"></a>
When an alternative in a lexical production appears to be a token, it represents the sequence of characters that would make up such a token. Thus, the definition:<p>
<pre>
<i>BooleanLiteral: one of<br>
<code>	true&#32;false
</code></i></pre><p><a name="7071"></a>
in a lexical grammar production is shorthand for:
<p><pre>
<i>BooleanLiteral:<br>
<code>	t r u e<br>
	f a l s e
</code></i></pre><p><a name="19987"></a>
The right-hand side of a lexical production may specify that certain expansions are not permitted by using the phrase "but not" and then indicating the expansions to be excluded, as in the productions for <i>InputCharacter</i> <a href="3_4.htm#231571">(&#167;3.4)</a> and <i>Identifier</i> <a href="3_8.htm#40625">(&#167;3.8)</a>:<p>
<pre>
<i>InputCharacter:<br>
	UnicodeInputCharacter but not CR or LF
</i>
<i>Identifier:<br>
	IdentifierName but not a Keyword or BooleanLiteral or NullLiteral
</i></pre><p><a name="23502"></a>
Finally, a few nonterminal symbols are described by a descriptive phrase in roman type in cases where it would be impractical to list all the alternatives:<p>
<pre>
<i>RawInputCharacter:<br>
	any Unicode character
</i></pre><p>

<hr>
<p>
<br>
</font>
</body></html>

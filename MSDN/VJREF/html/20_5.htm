<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>20.5 The Class java.lang.Character</title>
<META NAME=MS-HAID CONTENT="20_5">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<a name="14345"></a>
<h1>20.5	 The Class java.lang.Character</h1>
<p>
<a name="34800"></a>
<p><i>Here is the whole set! a character dead at every word. </i><br>
<a name="36295"></a>
&#151;Richard Brinsley Sheridan, The School for Scandal, Act 2, scene 2</p>
<p>
<a name="2134"></a>
Objects of type <code>Character</code> represent primitive values of type <code>char</code>.
<p><pre><a name="13825"></a>public final class <code><b>Character</b></code> {
<a name="1806"></a>	public static final char <code><b>MIN_VALUE</b></code> = '\u0000';
<a name="23316"></a>	public static final char <code><b>MAX_VALUE</b></code> = '\uffff';
<a name="1810"></a>	public static final int <code><b>MIN_RADIX</b></code> = 2;
<a name="1821"></a>	public static final int <code><b>MAX_RADIX</b></code> = 36;
<a name="1832"></a>	public <code><b>Character</b></code>(char value);
<a name="1834"></a>	public String <code><b>toString</b></code>();
<a name="1836"></a>	public boolean <code><b>equals</b></code>(Object obj);
<a name="1839"></a>	public int <code><b>hashCode</b></code>();
<a name="1841"></a>	public char <code><b>charValue</b></code>();
<a name="9133"></a>	public static boolean <code><b>isDefined</b></code>(char ch);
<a name="1843"></a>	public static boolean <code><b>isLowerCase</b></code>(char ch);
<a name="9112"></a>	public static boolean <code><b>isUpperCase</b></code>(char ch);
<a name="9116"></a>	public static boolean <code><b>isTitleCase</b></code>(char ch);
<a name="1845"></a>	public static boolean <code><b>isDigit</b></code>(char ch);
<a name="9124"></a>	public static boolean <code><b>isLetter</b></code>(char ch);
<a name="9120"></a>	public static boolean <code><b>isLetterOrDigit</b></code>(char ch);
<a name="9128"></a>	public static boolean <code><b>isJavaLetter</b></code>(char ch);
<a name="9129"></a>	public static boolean <code><b>isJavaLetterOrDigit</b></code>(char ch);)
<a name="1846"></a>	public static boolean <code><b>isSpace</b></code>(char ch);
<a name="1847"></a>	public static char <code><b>toLowerCase</b></code>(char ch);
<a name="1848"></a>	public static char <code><b>toUpperCase</b></code>(char ch);
<a name="9139"></a>	public static char <code><b>toTitleCase</b></code>(char ch);
<a name="1850"></a>	public static int <code><b>digit</b></code>(char ch, int radix);
<a name="1852"></a>	public static char <code><b>forDigit</b></code>(int digit, int radix);
<a name="2147"></a>}
</pre><p><a name="36549"></a>
Many of the methods of class <code>Character</code> are defined in terms of a "Unicode attribute table" that specifies a name for every defined Unicode character as well as other possible attributes, such as a decimal value, an uppercase equivalent, a lowercase equivalent, and/or a titlecase equivalent. Prior to Java 1.1, these methods were internal to the Java compiler and based on Unicode 1.1.5, as described here. The most recent versions of these methods should be used in Java compilers that are to run on Java systems that do not yet include these methods.<p>
<a name="36550"></a>
The Unicode 1.1.5 attribute table is available on the World Wide Web as:<p>
<pre><a name="4847"></a>ftp://unicode.org/pub/MappingTables/UnicodeData-1.1.5.txt
</pre><p><a name="4848"></a>
However, this file contains a few errors. The term "Unicode attribute table" in the 
following sections refers to the contents of this file after the following corrections 
have been applied:
<p><ul><a name="4857"></a>
<li>The following entries should have titlecase mappings as shown here:
<a name="4859"></a>
<p><font size=-1>03D0;GREEK BETA SYMBOL;Ll;0;L;;;;;N;GREEK SMALL LETTER CURLED BETA;;0392;;0392</font><p>
<a name="4860"></a>
<p><font size=-1>03D1;GREEK THETA SYMBOL;Ll;0;L;;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398</font><p>
<a name="4861"></a>
<p><font size=-1>03D5;GREEK PHI SYMBOL;Ll;0;L;;;;;N;GREEK SMALL LETTER SCRIPT PHI;;03A6;;03A6</font><p>
<a name="4862"></a>
<p><font size=-1>03D6;GREEK PI SYMBOL;Ll;0;L;;;;;N;GREEK SMALL LETTER OMEGA PI;;03A0;;03A0</font><p>
<a name="4863"></a>
<p><font size=-1>03F0;GREEK KAPPA SYMBOL;Ll;0;L;;;;;N;GREEK SMALL LETTER SCRIPT KAPPA;;039A;;039A</font><p>
<a name="4864"></a>
<p><font size=-1>03F1;GREEK RHO SYMBOL;Ll;0;L;;;;;N;GREEK SMALL LETTER TAILED RHO;;03A1;;03A1</font><p>
<a name="4866"></a>
<li>The following entries should have numeric values as shown here:
<a name="4868"></a>
<p><font size=-1>FF10;FULLWIDTH DIGIT ZERO;Nd;0;EN;0030;0;0;0;N;;;;;</font><p>
<a name="4869"></a>
<p><font size=-1>FF11;FULLWIDTH DIGIT ONE;Nd;0;EN;0031;1;1;1;N;;;;;</font><p>
<a name="4870"></a>
<p><font size=-1>FF12;FULLWIDTH DIGIT TWO;Nd;0;EN;0032;2;2;2;N;;;;;</font><p>
<a name="4871"></a>
<p><font size=-1>FF13;FULLWIDTH DIGIT THREE;Nd;0;EN;0033;3;3;3;N;;;;;</font><p>
<a name="4872"></a>
<p><font size=-1>FF14;FULLWIDTH DIGIT FOUR;Nd;0;EN;0034;4;4;4;N;;;;;</font><p>
<a name="4873"></a>
<p><font size=-1>FF15;FULLWIDTH DIGIT FIVE;Nd;0;EN;0035;5;5;5;N;;;;;</font><p>
<a name="4874"></a>
<p><font size=-1>FF16;FULLWIDTH DIGIT SIX;Nd;0;EN;0036;6;6;6;N;;;;;</font><p>
<a name="4875"></a>
<p><font size=-1>FF17;FULLWIDTH DIGIT SEVEN;Nd;0;EN;0037;7;7;7;N;;;;;</font><p>
<a name="4876"></a>
<p><font size=-1>FF18;FULLWIDTH DIGIT EIGHT;Nd;0;EN;0038;8;8;8;N;;;;;</font><p>
<a name="4877"></a>
<p><font size=-1>FF19;FULLWIDTH DIGIT NINE;Nd;0;EN;0039;9;9;9;N;;;;;</font><p>
<a name="4879"></a>
<li>The following entries should have no lowercase equivalents:
<a name="4881"></a>
<p><font size=-1>03DA;GREEK LETTER STIGMA;Lu;0;L;;;;;N;GREEK CAPITAL LETTER STIGMA;;;;</font><p>
<a name="4882"></a>
<p><font size=-1>03DC;GREEK LETTER DIGAMMA;Lu;0;L;;;;;N;GREEK CAPITAL LETTER DIGAMMA;;;;</font><p>
<a name="4883"></a>
<p><font size=-1>03DE;GREEK LETTER KOPPA;Lu;0;L;;;;;N;GREEK CAPITAL LETTER KOPPA;;;;</font><p>
<a name="4884"></a>
<p><font size=-1>03E0;GREEK LETTER SAMPI;Lu;0;L;;;;;N;GREEK CAPITAL LETTER SAMPI;;;;</font><p>
<a name="4886"></a>
<li>This entry should have uppercase and titlecase equivalents as shown here:
<a name="4888"></a>
<p><font size=-1>03C2;GREEK SMALL LETTER FINAL SIGMA;Ll;0;L;;;;;N;;;03A3;;03A3</font><p>
</ul><p><a name="32371"></a>
It is anticipated that these problems will be corrected for Unicode version 2.0.
<p><a name="32372"></a>
Java 1.1 will include the methods defined here, either based on Unicode 1.1.5 or, we hope, updated versions of the methods that use the newer Unicode 2.0. The character attribute table for Unicode 2.0 is currently available on the World Wide Web as the file:<p>
<pre><a name="30276"></a>ftp://unicode.org/pub/MappingTables/UnicodeData-2.0.12.txt
</pre><p><a name="33816"></a>
If you are implementing a Java compiler or system, please refer to the page:
<p><a name="33819"></a><a href="http://java.sun.com/Series/">http://java.sun.com/Series/</a>
<p><a name="33820"></a>
which will be updated with information about the Unicode-dependent methods.
<p><a name="36558"></a>
The biggest change in Unicode 2.0 is a complete rearrangement of the Korean Hangul characters. There are numerous smaller improvements as well.<p>
<a name="33888"></a>
It is our intention that Java will track Unicode as it evolves over time. Given that full Unicode support is just emerging in the marketplace, and that changes in Unicode are in areas which are not yet widely used, this should cause minimal problems and further Java's goal of worldwide language support.<p>
<a name="1296"></a>
<p><strong>20.5.1	</strong> <code>public static final char MIN_VALUE = '\u0000';</code>
<p>
<a name="1297"></a>
The constant value of this field is the smallest value of type <code>char</code>.
<p><a name="23312"></a>
[This field is scheduled for introduction in Java version 1.1.]<p>
<a name="1298"></a>
<p><strong>20.5.2	</strong> <code>public static final char MAX_VALUE = '\uffff';</code>
<p>
<a name="1299"></a>
The constant value of this field is the smallest value of type <code>char</code>.
<p><a name="23342"></a>
[This field is scheduled for introduction in Java version 1.1.]<p>
<a name="1300"></a>
<p><strong>20.5.3	</strong> <code>public static final int MIN_RADIX = 2;</code>
<p>
<a name="1301"></a>
The constant value of this field is the smallest value permitted for the radix argument in radix-conversion methods such as the <code>digit</code> method <a href="20_5.htm#13834">(&#167;20.5.23)</a>, the 
<code>forDigit</code> &#32;method <a href="20_5.htm#13835">(&#167;20.5.24)</a>, and the <code>toString</code> method of class <code>Integer</code> 
<a href="20_7.htm#14348">(&#167;20.7)</a>.
<p><a name="1311"></a>
<p><strong>20.5.4	</strong> <code>public static final int MAX_RADIX = 36;</code>
<p>
<a name="1312"></a>
The constant value of this field is the largest value permitted for the radix argument in radix-conversion methods such as the <code>digit</code> method <a href="20_5.htm#13834">(&#167;20.5.23)</a>, the <code>forDigit</code> method <a href="20_5.htm#13835">(&#167;20.5.24)</a>, and the <code>toString</code> method of class <code>Integer</code> <a href="20_7.htm#14348">(&#167;20.7)</a>.
<p><a name="15390"></a>
<p><strong>20.5.5	</strong> <code>public Character(char value)</code>
<p>
<a name="15399"></a>
This constructor initializes a newly created <code>Character</code> object so that it represents 
the primitive value that is the argument.
<p><a name="1273"></a>
<p><strong>20.5.6	</strong> <code>public String toString()</code>
<p>
<a name="20210"></a>
The result is a <code>String</code> whose length is <code>1</code> and whose sole component is the primitive <code>char</code> value represented by this <code>Character</code> object.
<p><a name="20214"></a>
Overrides the <code>toString</code> method of <code>Object</code> <a href="20_1.htm#1152">(&#167;20.1.2)</a>.<p>
<a name="20216"></a>
<p><strong>20.5.7	</strong> <code>public boolean equals(Object obj)</code>
<p>
<a name="20217"></a>
The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>Character</code> 
object that represents the same <code>char</code> value as this <code>Character</code> object.
<p><a name="4009"></a>
Overrides the <code>equals</code> method of <code>Object</code> <a href="20_1.htm#14865">(&#167;20.1.3)</a>.<p>
<a name="15394"></a>
<p><strong>20.5.8	</strong> <code>public int hashCode()</code>
<p>
<a name="15432"></a>
The result is the primitive <code>char</code> value represented by this <code>Character</code> object, cast 
to type <code>int</code>.
<p><a name="4033"></a>
Overrides the <code>hashCode</code> method of <code>Object</code> <a href="20_1.htm#13784">(&#167;20.1.4)</a>.<p>
<a name="1280"></a>
<p><strong>20.5.9	</strong> <code>public char charValue()</code>
<p>
<a name="1281"></a>
The primitive <code>char</code> value represented by this <code>Character</code> object is returned.
<p><a name="9149"></a>
<p><strong>20.5.10	</strong> <code>public static boolean isDefined(char ch)</code>
<p>
<a name="9649"></a>
The result is <code>true</code> if and only if the character argument is a defined Unicode character.
<p><a name="9642"></a>
A character is a defined Unicode character if and only if at least one of the following is true:<p>
<ul><a name="9643"></a>
<li>It has an entry in the Unicode attribute table.
<a name="9644"></a>
<li>It is not less than <code>\u3040</code> and not greater than <code>\u9FA5</code>.
<a name="9645"></a>
<li>It is not less than <code>\uF900</code> and not greater than <code>\uFA2D</code>.
</ul><p><a name="19284"></a>
It follows, then, that for Unicode 1.1.5 as corrected above, the defined Unicode characters are exactly those with codes in the following list, which contains both single codes and inclusive ranges:<code> 0000-01F5, 01FA-0217, 0250-02A8, 02B0-02DE, 02E0-02E9, 0300-0345, 0360-0361, 0374-0375, 037A, 037E, 0384-038A, 038C, 038E-03A1, 03A3-03CE, 03D0-03D6, 03DA, 03DC, 03DE, 03E0, 03E2-03F3, 0401-040C, 040E-044F, 0451-045C, 045E-0486, 0490-04C4, 04C7-04C8, 04CB-04CC, 04D0-04EB, 04EE-04F5, 04F8-04F9, 0531-0556, 0559-055F, 0561-0587, 0589, 05B0-05B9, 05BB-05C3, 05D0-05EA, 05F0-05F4, 060C, 061B, 061F, 0621-063A, 0640-0652, 0660-066D, 0670-06B7, 06BA-06BE, 06C0-06CE, 06D0-06ED, 06F0-06F9, 0901-0903, 0905-0939, 093C-094D, 0950-0954, 0958-0970, 0981-0983, 0985-098C, 098F-0990, 0993-09A8, 09AA-09B0, 09B2, 09B6-09B9, 09BC, 09BE-09C4, 09C7-09C8, 09CB-09CD, 09D7, 09DC-09DD, 09DF-09E3, 09E6-09FA, 0A02, 0A05-0A0A, 0A0F-0A10, 0A13-0A28, 0A2A-0A30, 0A32-0A33, 0A35-0A36, 0A38-0A39, 0A3C, 0A3E-0A42, 0A47-0A48, 0A4B-0A4D, 0A59-0A5C, 0A5E, 0A66-0A74, 0A81-0A83, 0A85-0A8B, 0A8D, 0A8F-0A91, 0A93-0AA8, 0AAA-0AB0, 0AB2-0AB3, 0AB5-0AB9, 0ABC-0AC5, 0AC7-0AC9, 0ACB-0ACD, 0AD0, 0AE0, 0AE6-0AEF, 0B01-0B03, 0B05-0B0C, 0B0F-0B10, 0B13-0B28, 0B2A-0B30, 0B32-0B33, 0B36-0B39, 0B3C-0B43, 0B47-0B48, 0B4B-0B4D, 0B56-0B57, 0B5C-0B5D, 0B5F-0B61, 0B66-0B70, 0B82-0B83, 0B85-0B8A, 0B8E-0B90, 0B92-0B95, 0B99-0B9A, 0B9C, 0B9E-0B9F, 0BA3-0BA4, 0BA8-0BAA, 0BAE-0BB5, 0BB7-0BB9, 0BBE-0BC2, 0BC6-0BC8, 0BCA-0BCD, 0BD7, 0BE7-0BF2, 0C01-0C03, 0C05-0C0C, 0C0E-0C10, 0C12-0C28, 0C2A-0C33, 0C35-0C39, 0C3E-0C44, 0C46-0C48, 0C4A-0C4D, 0C55-0C56, 0C60-0C61, 0C66-0C6F, 0C82-0C83, 0C85-0C8C, 0C8E-0C90, 0C92-0CA8, 0CAA-0CB3, 0CB5-0CB9, 0CBE-0CC4, 0CC6-0CC8, 0CCA-0CCD, 0CD5-0CD6, 0CDE, 0CE0-0CE1, 0CE6-0CEF, 0D02-0D03, 0D05-0D0C, 0D0E-0D10, 0D12-0D28, 0D2A-0D39, 0D3E-0D43, 0D46-0D48, 0D4A-0D4D, 0D57, 0D60-0D61, 0D66-0D6F, 0E01-0E3A, 0E3F-0E5B, 0E81-0E82, 0E84, 0E87-0E88, 0E8A, 0E8D, 0E94-0E97, 0E99-0E9F, 0EA1-0EA3, 0EA5, 0EA7, 0EAA-0EAB, 0EAD-0EB9, 0EBB-0EBD, 0EC0-0EC4, 0EC6, 
0EC8-0ECD, 0ED0-0ED9, 0EDC-0EDD, 10A0-10C5, 10D0-10F6, 10FB, 1100-1159, 115F-11A2, 11A8-11F9, 1E00-1E9A, 1EA0-1EF9, 1F00-1F15, 1F18-1F1D, 1F20-1F45, 1F48-1F4D, 1F50-1F57, 1F59, 1F5B, 1F5D, 1F5F-1F7D, 1F80-1FB4, 1FB6-1FC4, 1FC6-1FD3, 1FD6-1FDB, 1FDD-1FEF, 1FF2-1FF4, 1FF6-1FFE, 2000-202E, 2030-2046, 206A-2070, 2074-208E, 20A0-20AA, 20D0-20E1, 2100-2138, 2153-2182, 2190-21EA, 2200-22F1, 2300, 2302-237A, 2400-2424, 2440-244A, 2460-24EA, 2500-2595, 25A0-25EF, 2600-2613, 261A-266F, 2701-2704, 2706-2709, 270C-2727, 2729-274B, 274D, 274F-2752, 2756, 2758-275E, 2761-2767, 2776-2794, 2798-27AF, 27B1-27BE, 3000-3037, 303F, 3041-3094, 3099-309E, 30A1-30FE, 3105-312C, 3131-318E, 3190-319F, 3200-321C, 3220-3243, 3260-327B, 327F-32B0, 32C0-32CB, 32D0-32FE, 3300-3376, 337B-33DD, 33E0-33FE, 3400-9FA5, F900-FA2D, FB00-FB06, FB13-FB17, FB1E-FB36, FB38-FB3C, FB3E, FB40-FB41, FB43-FB44, FB46-FBB1, FBD3-FD3F, FD50-FD8F, FD92-FDC7, FDF0-FDFB, FE20-FE23, FE30-FE44, FE49-FE52, FE54-FE66, FE68-FE6B, FE70-FE72, FE74, FE76-FEFC, FEFF, FF01-FF5E, FF61-FFBE, FFC2-FFC7, FFCA-FFCF, FFD2-FFD7, FFDA-FFDC, FFE0-FFE6, FFE8-FFEE, FFFD</code>.<p>
<a name="23397"></a>
[This method is scheduled for introduction in Java version 1.1, either as defined here, or updated for Unicode 2.0; see <a href="20_5.htm#14345">&#167;20.5</a>.]<p>
<a name="15330"></a>
<p><strong>20.5.11	</strong> <code>public static boolean isLowerCase(char ch)</code>
<p>
<a name="9100"></a>
The result is <code>true</code> if and only if the character argument is a lowercase character.
<p><a name="9169"></a>
A character is considered to be lowercase if and only if all of the following are true:<p>
<ul><a name="19546"></a>
<li>The character <code>ch</code> is not in the range <code>\u2000</code> through <code>\u2FFF</code>.
<a name="19547"></a>
<li>The Unicode attribute table does not specify a mapping to lowercase for this character (the purpose of this requirement is to exclude titlecase characters).
<a name="9177"></a>
<li>At least one of the following is true:
<ul>
<a name="19550"></a>
<li>The Unicode attribute table specifies a mapping to uppercase for this character.
<a name="19551"></a>
<li>The name for the character in the Unicode attribute table contains the words <code>SMALL</code> <code>LETTER</code> or the words <code>SMALL</code> <code>LIGATURE</code>.
</ul>
</ul><p><a name="9220"></a>
It follows, then, that for Unicode 1.1.5 as corrected above, the lowercase Unicode characters are exactly those with codes in the following list, which contains both single codes and inclusive ranges:<code> 0061</code>-<code>007A</code>, <code>00DF</code>-<code>00F6</code>, <code>00F8</code>-<code>00FF</code>, <code>0101</code>-<code>0137</code> (odds only), <code>0138</code>-<code>0148</code> (evens only), <code>0149</code>-<code>0177</code> (odds only), <code>017A</code>-<code>017E</code> (evens only), <code>017F</code>-<code>0180</code>, <code>0183</code>, <code>0185</code>, <code>0188</code>, <code>018C</code>-<code>018D</code>, <code>0192</code>, <code>0195</code>, <code>0199</code>-<code>019B</code>, <code>019E</code>, <code>01A1</code>-<code>01A5</code> (odds only), <code>01A8</code>, <code>01AB</code>, <code>01AD</code>, <code>01B0</code>, <code>01B4</code>, <code>01B6</code>, <code>01B9</code>-<code>01BA</code>, <code>01BD</code>, <code>01C6</code>, <code>01C9</code>, <code>01CC</code>-<code>01DC</code> (evens only), <code>01DD</code>-<code>01EF</code> (odds only), <code>01F0</code>, <code>01F3</code>, <code>01F5</code>, <code>01FB</code>-<code>0217</code> (odds only), <code>0250</code>-<code>0261</code>, <code>0263</code>-<code>0269</code>, <code>026B</code>-<code>0273</code>, <code>0275</code>, <code>0277</code>-<code>027F</code>, <code>0282</code>-<code>028E</code>, <code>0290</code>-<code>0293</code>, <code>029A</code>, <code>029D</code>-<code>029E</code>, <code>02A0</code>, <code>02A3</code>-<code>02A8</code>, <code>0390</code>, <code>03AC</code>-<code>03CE</code>, <code>03D0</code>-<code>03D1</code>, <code>03D5</code>-<code>03D6</code>, <code>03E3</code>-<code>03EF</code> (odds only), <code>03F0</code>-<code>03F1</code>, <code>0430</code>-<code>044F</code>, <code>0451</code>-<code>045C</code>, <code>045E</code>-<code>045F</code>, <code>0461</code>-<code>0481</code> (odds only), <code>0491</code>-<code>04BF</code> (odds only), <code>04C2</code>, <code>04C4</code>, <code>04C8</code>, 
<code>04CC</code>, <code>04D1</code>-<code>04EB</code> (odds only), <code>04EF</code>-<code>04F5</code> (odds only), <code>04F9</code>, <code>0561</code>-<code>0587</code>, <code>1E01</code>-<code>1E95</code> (odds only), <code>1E96</code>-<code>1E9A</code>, <code>1EA1</code>-<code>1EF9</code> (odds only), <code>1F00</code>-<code>1F07</code>, <code>1F10</code>-<code>1F15</code>, <code>1F20</code>-<code>1F27</code>, <code>1F30</code>-<code>1F37</code>, <code>1F40</code>-<code>1F45</code>, <code>1F50</code>-<code>1F57</code>, <code>1F60</code>-<code>1F67</code>, <code>1F70</code>-<code>1F7D</code>, <code>1F80</code>-<code>1F87</code>, <code>1F90</code>-<code>1F97</code>, <code>1FA0</code>-<code>1FA7</code>, <code>1FB0</code>-<code>1FB4</code>, <code>1FB6</code>-<code>1FB7</code>, <code>1FC2</code>-<code>1FC4</code>, <code>1FC6</code>-<code>1FC7</code>, <code>1FD0</code>-<code>1FD3</code>, <code>1FD6</code>-<code>1FD7</code>, <code>1FE0</code>-<code>1FE7</code>, <code>1FF2</code>-<code>1FF4</code>, <code>1FF6</code>-<code>1FF7</code>, <code>FB00</code>-<code>FB06</code>, <code>FB13</code>-<code>FB17</code>, <code>FF41</code>-<code>FF5A</code>.<p>
<a name="9170"></a>
Of the first 128 Unicode characters, exactly 26 are considered to be lowercase:<p>
<pre><a name="9108"></a>abcdefghijklmnopqrstuvwxyz
</pre><p><a name="23376"></a>
[This specification for the method <code>isLowerCase</code> is scheduled for introduction in Java version 1.1, either as defined here, or updated for Unicode 2.0; see <a href="20_5.htm#14345">&#167;20.5</a>. In previous versions of Java, this method returns <code>false</code> for all arguments larger than <code>\u00FF</code>.]<p>
<a name="9225"></a>
<p><strong>20.5.12	</strong> <code>public static boolean isUpperCase(char ch)</code>
<p>
<a name="9234"></a>
The result is <code>true</code> if and only if the character argument is an uppercase character.
<p><a name="19556"></a>
A character is considered to be uppercase if and only if all of the following are true:<p>
<ul><a name="19557"></a>
<li>The character <code>ch</code> is not in the range <code>\u2000</code> through <code>\u2FFF</code>.
<a name="19558"></a>
<li>The Unicode attribute table does not specify a mapping to uppercase for this character (the purpose of this requirement is to exclude titlecase characters).
<a name="9238"></a>
<li>At least one of the following is true:
<ul>
<a name="9239"></a>
<li>The Unicode attribute table specifies a mapping to lowercase for this character.
<a name="9240"></a>
<li>	The name for the character in the Unicode attribute table contains the words <code>CAPITAL</code> <code>LETTER</code> or the words <code>CAPITAL</code> <code>LIGATURE</code>.
</ul>
</ul><p><a name="12803"></a>
It follows, then, that for Unicode 1.1.5 as corrected above, the uppercase Unicode characters are exactly those with codes in the following list, which contains both single codes and inclusive ranges:<code> 0041</code>-<code>005A</code>, <code>00C0</code>-<code>00D6</code>, <code>00D8</code>-<code>00DE</code>, <code>0100</code>-<code>0136</code> (evens only), <code>0139</code>-<code>0147</code> (odds only), <code>014A</code>-<code>0178</code> (evens only), <code>0179</code>-<code>017D</code> (odds only), <code>0181</code>-<code>0182</code>, <code>0184</code>, <code>0186</code>, <code>0187</code>, <code>0189</code>-<code>018B</code>, <code>018E</code>-<code>0191</code>, <code>0193</code>-<code>0194</code>, <code>0196</code>-<code>0198</code>, <code>019C</code>-<code>019D</code>, <code>019F</code>-<code>01A0</code>, <code>01A2</code>, <code>01A4</code>, <code>01A7</code>, <code>01A9</code>, <code>01AC</code>, <code>01AE</code>, <code>01AF</code>, <code>01B1</code>-<code>01B3</code>, <code>01B5</code>, <code>01B7</code>, <code>01B8</code>, <code>01BC</code>, <code>01C4</code>, <code>01C7</code>, <code>01CA</code>, <code>01CD</code>-<code>01DB</code> (odds only), <code>01DE</code>-<code>01EE</code> (evens only), <code>01F1</code>, <code>01F4</code>, <code>01FA</code>-<code>0216</code> (evens only), <code>0386</code>, <code>0388</code>-<code>038A</code>, <code>038C</code>, <code>038E</code>, <code>038F</code>, <code>0391</code>-<code>03A1</code>, <code>03A3</code>-<code>03AB</code>, <code>03E2</code>-<code>03EE</code> (evens only), <code>0401</code>-<code>040C</code>, <code>040E</code>-<code>042F</code>, <code>0460</code>-<code>0480</code> (evens only), <code>0490</code>-<code>04BE</code> (evens only), <code>04C1</code>, <code>04C3</code>, <code>04C7</code>, <code>04CB</code>, <code>04D0</code>-<code>04EA</code> (evens only), <code>04EE</code>-<code>04F4</code> (evens only), <code>04F8</code>, <code>0531</code>-<code>0556</code>, <code>10A0</code>-<code>10C5</code>, <code>1E00</code>-<code>1E94</code> (evens only), 
<code>1EA0</code>-<code>1EF8</code> (evens only), <code>1F08</code>-<code>1F0F</code>, <code>1F18</code>-<code>1F1D</code>, <code>1F28</code>-<code>1F2F</code>, <code>1F38</code>-<code>1F3F</code>, <code>1F48</code>-<code>1F4D</code>, <code>1F59</code>-<code>1F5F</code> (odds only), <code>1F68</code>-<code>1F6F</code>, <code>1F88</code>-<code>1F8F</code>, <code>1F98</code>-<code>1F9F</code>, <code>1FA8</code>-<code>1FAF</code>, <code>1FB8</code>-<code>1FBC</code>, <code>1FC8</code>-<code>1FCC</code>, <code>1FD8</code>-<code>1FDB</code>, <code>1FE8</code>-<code>1FEC</code>, <code>1FF8</code>-<code>1FFC</code>, <code>FF21</code>-<code>FF3A</code>.<p>
<a name="9243"></a>
Of the first 128 Unicode characters, exactly 26 are considered to be uppercase:<p>
<pre><a name="9244"></a>ABCDEFGHIJKLMNOPQRSTUVWXYZ
</pre><p><a name="23383"></a>
[This specification for the method <code>isUpperCase</code> is scheduled for introduction in Java version 1.1, either as defined here, or updated for Unicode 2.0; see <a href="20_5.htm#14345">&#167;20.5</a>. In previous versions of Java, this method returns <code>false</code> for all arguments larger than <code>\u00FF</code>.]<p>
<a name="9230"></a>
<p><strong>20.5.13	</strong> <code>public static boolean isTitleCase(char ch)</code>
<p>
<a name="9273"></a>
The result is <code>true</code> if and only if the character argument is a titlecase character.
<p><a name="9274"></a>
The notion of "titlecase" was introduced into Unicode to handle a peculiar situation: there are single Unicode characters whose appearance in each case looks exactly like two ordinary Latin letters. For example, there is a single Unicode character `LJ' (<code>\u01C7</code>) that looks just like the characters `L' and `J' put together. There is a corresponding lowercase letter `lj' (<code>\u01C9</code>) as well. These characters are present in Unicode primarily to allow one-to-one translations from the Cyrillic alphabet, as used in Serbia, for example, to the Latin alphabet. Now suppose the word "LJUBINJE" (which has <i>six</i> characters, not eight, because two of them are the single Unicode characters `LJ' and `NJ', perhaps produced by one-to-one translation from the Cyrillic) is to be written as part of a book title, in capitals and lowercase. The strategy of making the first letter uppercase and the rest lowercase results in "LJubinje"-most unfortunate. The solution is that there must be a third form, called a <i>titlecase</i> form. The titlecase form of `LJ' is `Lj' (<code>\u01C8</code>) and the titlecase form of `NJ' is `Nj'. A word for a book title is then best rendered by converting the first letter to titlecase if possible, otherwise to uppercase; the remaining letters are then converted to lowercase.<p>
<a name="9321"></a>
A character is considered to be titlecase if and only if both of the following are true:<p>
<ul><a name="9275"></a>
<li>The character <code>ch</code> is not in the range <code>\u2000</code> through <code>\u2FFF</code>.
<a name="9290"></a>
<li>The Unicode attribute table specifies a mapping to uppercase <i>and</i> a mapping to lowercase for this character.
</ul><p><a name="9301"></a>
There are exactly four Unicode 1.1.5 characters for which <code>isTitleCase</code> returns 
<code>true</code>:
<p><pre><a name="9318"></a>
\u01C5	 &#32; &#32;LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON
<a name="9304"></a>\u01C8	 &#32; &#32;LATIN CAPITAL LETTER L WITH SMALL LETTER J
<a name="9305"></a>\u01CB	 &#32; &#32;LATIN CAPITAL LETTER N WITH SMALL LETTER J
<a name="9299"></a>\u01F2	 &#32; &#32;LATIN CAPITAL LETTER D WITH SMALL LETTER Z
</pre><p><a name="23403"></a>
[This method is scheduled for introduction in Java version 1.1, either as defined here, or updated for Unicode 2.0; see <a href="20_5.htm#14345">&#167;20.5</a>.]<p>
<a name="13830"></a>
<p><strong>20.5.14	</strong> <code>public static boolean isDigit(char ch)</code>
<p>
<a name="9351"></a>
The result is <code>true</code> if and only if the character argument is a digit.
<p><a name="9352"></a>
A character is considered to be a digit if and only if both of the following are true:<p>
<ul><a name="9353"></a>
<li>The character <code>ch</code> is not in the range <code>\u2000</code> through <code>\u2FFF</code>.
<a name="9358"></a>
<li>The name for the character in the Unicode attribute table contains the word <code>DIGIT</code>.
</ul><p><a name="9359"></a>
The digits are those characters with the following codes:<p>
<pre><a name="31051"></a><code>0030</code>-<code>0039</code>	ISO-Latin-1 (and ASCII) digits (<code>'</code>0<code>'</code>-<code>'</code>9<code>'</code>)
<a name="31052"></a><code>0660</code>-<code>0669</code>	Arabic-Indic digits
<a name="31053"></a><code>06F0</code>-<code>06F9	</code>Eastern Arabic-Indic digits
<a name="9733"></a><code>0966</code>-<code>096F</code>	Devanagari digits
<a name="9734"></a><code>09E6</code>-<code>09EF</code>	Bengali digits
<a name="9735"></a><code>0A66</code>-<code>0A6F</code>	Gurmukhi digits
<a name="9813"></a><code>0AE6</code>-<code>0AEF</code>	Gujarati digits
<a name="9814"></a><code>0B66</code>-<code>0B6F</code>	Oriya digits
<a name="9815"></a><code>0BE7</code>-<code>0BEF</code>	Tamil digits (there are only nine of these-no zero digit)
<a name="9820"></a><code>0C66</code>-<code>0C6F</code>	Telugu digits
<a name="9821"></a><code>0CE6</code>-<code>0CEF</code>	Kannada digits
<a name="9822"></a><code>0D66</code>-<code>0D6F</code>	Malayalam digits
<a name="9742"></a><code>0E50</code>-<code>0E59</code>	Thai digits
<a name="9743"></a><code>0ED0</code>-<code>0ED9</code>	Lao digits
<a name="9744"></a><code>FF10</code>-<code>FF19</code>	Fullwidth digits
</pre><p><a name="9728"></a>
Of the first 128 Unicode characters, exactly 10 are considered to be digits:
<p><pre><a name="9361"></a>0123456789
</pre><p><a name="23387"></a>
[This specification for the method <code>isDigit</code> is scheduled for introduction in Java version 1.1, either as defined here, or updated for Unicode 2.0; see <a href="20_5.htm#14345">&#167;20.5</a>. In previous versions of Java, this method returns <code>false</code> for all arguments larger than <code>\u00FF</code>.]<p>
<a name="9163"></a>
<p><strong>20.5.15	</strong> <code>public static boolean isLetter(char ch)</code>
<p>
<a name="9669"></a>
The result is <code>true</code> if and only if the character argument is a letter.
<p><a name="9676"></a>
A character is considered to be a letter if and only if it is a letter or digit <a href="20_5.htm#9501">(&#167;20.5.16)</a> but is not a digit <a href="20_5.htm#13830">(&#167;20.5.14)</a>.<p>
<a name="23415"></a>
[This method is scheduled for introduction in Java version 1.1, either as defined here, or updated for Unicode 2.0; see <a href="20_5.htm#14345">&#167;20.5</a>.]<p>
<a name="9501"></a>
<p><strong>20.5.16	</strong> <code>public static boolean isLetterOrDigit(char ch)</code>
<p>
<a name="9607"></a>
The result is <code>true</code> if and only if the character argument is a letter-or-digit.
<p><a name="9612"></a>
A character is considered to be a letter-or-digit if and only if it is a defined Unicode character <a href="20_5.htm#9149">(&#167;20.5.10)</a> and its code lies in one of the following ranges:<p>
<pre><a name="9520"></a><code>0030</code>-<code>0039</code>	ISO-Latin-1 (and ASCII) digits (<code>'0'</code>-<code>'9'</code>)
<a name="9521"></a><code>0041</code>-<code>005A</code>	ISO-Latin-1 (and ASCII) uppercase Latin letters (<code>'A'-'Z'</code>)
<a name="9522"></a><code>0061</code>-<code>007A</code>	ISO-Latin-1 (and ASCII) lowercase Latin letters (<code>'a'-'z'</code>)
<a name="9523"></a><code>00C0</code>-<code>00D6</code>	ISO-Latin-1 supplementary letters
<a name="9524"></a><code>00D8</code>-<code>00F6</code>	ISO-Latin-1 supplementary letters
<a name="9525"></a><code>00F8</code>-<code>00FF</code>	ISO-Latin-1 supplementary letters
<a name="9526"></a><code>0100</code>-<code>1FFF</code>	Latin extended-A, Latin extended-B, IPA extensions, 
spacing modifier letters, combining diacritical marks, basic 
Greek, Greek symbols and Coptic, Cyrillic, Armenian, 
Hebrew extended-A, Basic Hebrew, Hebrew extended-B, 
Basic Arabic, Arabic extended, Devanagari, Bengali, 
Gurmukhi, Gujarati, Oriya, Tamil, Telugu, Kannada, 
Malayalam, Thai, Lao, Basic Georgian, Georgian extended, 
Hanguljamo, Latin extended additional, Greek extended
<a name="9527"></a><code>3040</code>-<code>9FFF</code>	Hiragana, Katakana, Bopomofo, Hangul compatibility 
Jamo, CJK miscellaneous, enclosed CJK characters and 
months, CJK compatibility, Hangul, Hangul 
supplementary-A, Hangul supplementary-B, CJK unified 
ideographs
<a name="9528"></a><code>F900</code>-<code>FDFF</code>	CJK compatibility ideographs, alphabetic presentation 
forms, Arabic presentation forms-A
<a name="9529"></a><code>FE70</code>-<code>FEFE</code>	Arabic presentation forms-B
<a name="9530"></a><code>FF10</code>-<code>FF19</code>	Fullwidth digits
<a name="9531"></a><code>FF21</code>-<code>FF3A</code>	Fullwidth Latin uppercase
<a name="9532"></a><code>FF41</code>-<code>FF5A</code>	Fullwidth Latin lowercase
<a name="9515"></a><code>FF66</code>-<code>FFDC</code>	Halfwidth Katakana and Hangul
</pre><p><a name="12978"></a>
<p>It follows, then, that for Unicode 1.1.5 as corrected above, the Unicode letters and digits are exactly those with codes in the following list, which contains both single codes and inclusive ranges:<p>
0030-0039, 0041-005A, 0061-007A, 00C0-00D6, 00D8-00F6, 00F8-01F5, 01FA-0217, 0250-02A8, 02B0-02DE, 02E0-02E9, 0300-0345, 0360-0361, 0374-0375, 037A, 037E, 0384-038A, 038C, 038E, 038F-03A1, 03A3-03CE, 03D0-03D6, 03DA-03E2, 03DA, 03DC, 03DE, 03E0, 03E2-03F3, 0401-040C, 040E-044F, 0451-045C, 045E-0486, 0490-04C4, 04C7-04C8, 04CB-04CC, 04D0-04EB, 04EE-04F5, 04F8-04F9, 0531-0556, 0559-055F, 0561-0587, 0589, 05B0-05B9, 05BB-05C3, 05D0-05EA, 05F0-05F4, 060C, 061B, 061F, 0621, 0622-063A, 0640-0652, 0660-066D, 0670-06B7, 06BA-06BE, 06C0-06CE, 06D0-06ED, 
06F0-06F9, 0901-0903, 0905-0939, 093C-094D, 0950-0954, 0958-0970, 0981-0983, 0985-098C, 098F-0990, 0993-09A8, 09AA-09B0, 09B2, 09B6-09B9, 09BC, 09BE, 09BF-09C4, 09C7-09C8, 09CB-09CD, 09D7, 09DC-09DD, 09DF-09E3, 09E6-09FA, 0A02, 0A05-0A0A, 0A0F-0A10, 0A13-0A28, 0A2A-0A30, 0A32-0A33, 0A35-0A36, 0A38-0A39, 0A3C, 0A3E, 0A3F-0A42, 0A47-0A48, 0A4B-0A4D, 0A59-0A5C, 0A5E, 0A66-0A74, 0A81-0A83, 0A85-0A8B, 0A8D, 0A8F, 0A90-0A91, 0A93-0AA8, 0AAA-0AB0, 0AB2-0AB3, 0AB5-0AB9, 0ABC-0AC5, 0AC7-0AC9, 0ACB-0ACD, 0AD0, 0AE0, 0AE6-0AEF, 0B01-0B03, 0B05-0B0C, 0B0F-0B10, 0B13-0B28, 0B2A-0B30, 0B32-0B33, 0B36-0B39, 0B3C-0B43, 
0B47-0B48, 0B4B-0B4D, 0B56-0B57, 0B5C-0B5D, 0B5F-0B61, 0B66-0B70, 0B82-0B83, 0B85-0B8A, 0B8E-0B90, 0B92-0B95, 0B99-0B9A, 0B9C, 0B9E, 0B9F, 0BA3-0BA4, 0BA8-0BAA, 0BAE-0BB5, 0BB7-0BB9, 0BBE-0BC2, 0BC6-0BC8, 0BCA-0BCD, 0BD7, 0BE7-0BF2, 0C01-0C03, 0C05-0C0C, 0C0E-0C10, 0C12-0C28, 0C2A-0C33, 0C35-0C39, 0C3E-0C44, 0C46-0C48, 0C4A-0C4D, 0C55-0C56, 0C60-0C61, 0C66-0C6F, 0C82-0C83, 0C85-0C8C, 0C8E-0C90, 0C92-0CA8, 0CAA-0CB3, 0CB5-0CB9, 0CBE-0CC4, 0CC6-0CC8, 0CCA-0CCD, 0CD5-0CD6, 0CDE, 0CE0, 0CE1, 0CE6-0CEF, 0D02-0D03, 0D05-0D0C, 0D0E-0D10, 0D12-0D28, 0D2A-0D39, 0D3E-0D43, 0D46-0D48, 0D4A-0D4D, 0D57, 0D60-0D61, 
0D66-0D6F, 0E01-0E3A, 0E3F-0E5B, 0E81-0E82, 0E84, 0E87-0E88, 0E8A, 0E8D, 0E94-0E97, 0E99-0E9F, 0EA1-0EA3, 0EA5, 0EA7, 0EAA-0EAB, 0EAD-0EB9, 0EBB-0EBD, 0EC0-0EC4, 0EC6, 0EC8, 0EC9-0ECD, 0ED0-0ED9, 0EDC-0EDD, 10A0-10C5, 10D0-10F6, 10FB, 1100-1159, 115F-11A2, 11A8-11F9, 1E00-1E9A, 1EA0-1EF9, 1F00-1F15, 1F18-1F1D, 1F20-1F45, 1F48-1F4D, 1F50-1F57, 1F59, 1F5B, 1F5D, 1F5F-1F7D, 1F80-1FB4, 1FB6-1FC4, 1FC6-1FD3, 1FD6-1FDB, 1FDD-1FEF, 1FF2-1FF4, 1FF6-1FFE, 3041-3094, 3099-309E, 30A1-30FE, 3105-312C, 3131-318E, 3190-319F, 3200-321C, 3220-3243, 3260-327B, 327F-32B0, 32C0-32CB, 32D0-32FE, 3300-3376, 337B-33DD, 
33E0-33FE, 
3400-9FA5, F900-FA2D, FB00-FB06, FB13-FB17, FB1E-FB36, FB38-FB3C, FB3E, FB40, FB41, FB43, FB44, FB46, FB47-FBB1, FBD3-FD3F, FD50-FD8F, FD92-FDC7, FDF0-FDFB, FE70-FE72, FE74, FE76, FE77-FEFC, FF10-FF19, FF21-FF3A, FF41-FF5A, FF66-FFBE, FFC2-FFC7, FFCA-FFCF, FFD2-FFD7, FFDA-FFDC.
<p>
<a name="23419"></a>
<p>[This method is scheduled for introduction in Java version 1.1, either as defined here, or updated for Unicode 2.0; see <a href="20_5.htm#14345">&#167;20.5</a>.]<p>
<a name="9516"></a>
<p><strong>20.5.17	</strong> <code>public static boolean isJavaLetter(char ch)</code>
<p>
<a name="9838"></a>
The result is true if and only if the character argument is a character that can begin 
a Java identifier.
<p><a name="9842"></a>
A character is considered to be a Java letter if and only if it is a letter <a href="20_5.htm#9163">(&#167;20.5.15)</a> or is the dollar sign character <code>'$'</code> (<code>\u0024</code>) or the underscore ("low line") character <code>'_'</code> (<code>\u005F</code>).<p>
<a name="23362"></a>
[This method is scheduled for introduction in Java version 1.1, either as defined here, or updated for Unicode 2.0; see <a href="20_5.htm#14345">&#167;20.5</a>.]<p>
<a name="9166"></a>
<p><strong>20.5.18	</strong> <code>public static boolean isJavaLetterOrDigit(char ch)</code>
<p>
<a name="9858"></a>
The result is true if and only if the character argument is a character that can occur 
in a Java identifier after the first character.
<p><a name="9862"></a>
A character is considered to be a Java letter-or-digit if and only if it is a letter-or-digit <a href="20_5.htm#9501">(&#167;20.5.16)</a> or is the dollar sign character <code>'$'</code> (<code>\u0024</code>) or the underscore ("low line") character <code>'_'</code> (<code>\u005F</code>).<p>
<a name="23366"></a>
[This method is scheduled for introduction in Java version 1.1, either as defined here, or updated for Unicode 2.0; see <a href="20_5.htm#14345">&#167;20.5</a>.]<p>
<a name="13831"></a>
<p><strong>20.5.19	</strong> <code>public static boolean isSpace(char ch)</code>
<p>
<a name="18843"></a>
The result is <code>true</code> if the argument <code>ch</code> is one of the following characters:
<p><pre><a name="18847"></a>
<code>'</code>\t<code>'</code>		\u0009			HT		HORIZONTAL TABULATION
<a name="18848"></a><code>'</code>\n<code>'</code>		\u000A			LF		LINE FEED (also known as <code>NEW LINE</code>)
<a name="18849"></a><code>'</code>\f<code>'</code>		\u000C			FF		FORM FEED
<a name="18862"></a><code>'</code>\r<code>'</code>		\u000D			CR		CARRIAGE RETURN
<a name="18863"></a><code>'</code> <code>'</code>		\u0020			SP		SPACE
</pre><p><a name="18844"></a>
Otherwise, the result is <code>false</code>.
<p><a name="20313"></a>
<p><strong>20.5.20	</strong> <code>public static char toLowerCase(char ch)</code>
<p>
<a name="20314"></a>
If the character <code>ch</code> has a lowercase equivalent specified in the Unicode attribute 
table, then that lowercase equivalent character is returned. Otherwise, the argument <code>ch</code> is returned.
<p><a name="16175"></a>
The lowercase equivalents specified in the Unicode attribute table, for Unicode 1.1.5 as corrected above, are as follows, where character codes to the right of arrows are the lowercase equivalents of character codes to the left of arrows: 0041-005A<img src="chars/arrwdbrt.gif">0061-007A, 00C0-00D6<img src="chars/arrwdbrt.gif">00E0-00F6, 00D8-00DE<img src="chars/arrwdbrt.gif">00F8-00FE, 0100-012E<img src="chars/arrwdbrt.gif">0101-012F (evens to odds), 0132-0136<img src="chars/arrwdbrt.gif">0133-0137 (evens to odds), 0139-0147<img src="chars/arrwdbrt.gif">013A-0148 (odds to evens), 014A-0176<img src="chars/arrwdbrt.gif">014B-0177 (evens to odds), 0178<img src="chars/arrwdbrt.gif">00FF, 0179-017D<img src="chars/arrwdbrt.gif">017A-017E (odds to evens), 0181<img src="chars/arrwdbrt.gif">0253, 0182<img src="chars/arrwdbrt.gif">0183, 0184<img src="chars/arrwdbrt.gif">0185, 0186<img src="chars/arrwdbrt.gif">0254, 0187<img src="chars/arrwdbrt.gif">0188, 018A<img src="chars/arrwdbrt.gif">0257, 018B<img src="chars/arrwdbrt.gif">018C, 018E<img src="chars/arrwdbrt.gif">0258, 018F<img src="chars/arrwdbrt.gif">0259, 0190<img src="chars/arrwdbrt.gif">025B, 0191<img src="chars/arrwdbrt.gif">0192, 0193<img src="chars/arrwdbrt.gif">0260, 
0194<img src="chars/arrwdbrt.gif">0263, 0196<img src="chars/arrwdbrt.gif">0269, 0197<img src="chars/arrwdbrt.gif">0268, 0198<img src="chars/arrwdbrt.gif">0199, 019C<img src="chars/arrwdbrt.gif">026F, 019D<img src="chars/arrwdbrt.gif">0272, 01A0-01A4<img src="chars/arrwdbrt.gif">01A1-01A5 (evens to odds), 01A7<img src="chars/arrwdbrt.gif">01A8, 01A9<img src="chars/arrwdbrt.gif">0283, 01AC<img src="chars/arrwdbrt.gif">01AD, 01AE<img src="chars/arrwdbrt.gif">0288, 01AF<img src="chars/arrwdbrt.gif">01B0, 01B1<img src="chars/arrwdbrt.gif">028A, 01B2<img src="chars/arrwdbrt.gif">028B, 01B3<img src="chars/arrwdbrt.gif">01B4, 01B5<img src="chars/arrwdbrt.gif">01B6, 01B7<img src="chars/arrwdbrt.gif">0292, 01B8<img src="chars/arrwdbrt.gif">01B9, 01BC<img src="chars/arrwdbrt.gif">01BD, 01C4<img src="chars/arrwdbrt.gif">01C6, 01C5<img src="chars/arrwdbrt.gif">01C6, 01C7<img src="chars/arrwdbrt.gif">01C9, 01C8<img src="chars/arrwdbrt.gif">01C9, 01CA<img src="chars/arrwdbrt.gif">01CC, 01CB-01DB<img src="chars/arrwdbrt.gif">01CC-01DC (odds to evens), 01DE-01EE<img src="chars/arrwdbrt.gif">01DF-01EF (evens to odds), 01F1<img src="chars/arrwdbrt.gif">01F3, 01F2<img src="chars/arrwdbrt.gif">01F3, 
01F4<img src="chars/arrwdbrt.gif">01F5, 
01FA-0216<img src="chars/arrwdbrt.gif">01FB-0217 (evens to odds), 0386<img src="chars/arrwdbrt.gif">03AC, 0388-038A<img src="chars/arrwdbrt.gif">03AD-03AF, 038C<img src="chars/arrwdbrt.gif">03CC, 038E<img src="chars/arrwdbrt.gif">03CD, 038F<img src="chars/arrwdbrt.gif">03CE, 0391-03A1<img src="chars/arrwdbrt.gif">03B1-03C1, 03A3-03AB<img src="chars/arrwdbrt.gif">03C3-03CB, 03E2-03EE<img src="chars/arrwdbrt.gif">03E3-03EF (evens to odds), 0401-040C<img src="chars/arrwdbrt.gif">0451-045C, 040E<img src="chars/arrwdbrt.gif">045E, 040F<img src="chars/arrwdbrt.gif">045F, 0410-042F<img src="chars/arrwdbrt.gif">0430-044F, 0460-0480<img src="chars/arrwdbrt.gif">0461-0481 (evens to odds), 0490-04BE<img src="chars/arrwdbrt.gif">0491-04BF (evens to odds), 04C1<img src="chars/arrwdbrt.gif">04C2, 04C3<img src="chars/arrwdbrt.gif">04C4, 04C7<img src="chars/arrwdbrt.gif">04C8, 04CB<img src="chars/arrwdbrt.gif">04CC, 04D0-04EA<img src="chars/arrwdbrt.gif">04D1-04EB (evens to odds), 04EE-04F4<img src="chars/arrwdbrt.gif">04EF-04F5 (evens to odds), 04F8<img src="chars/arrwdbrt.gif">04F9, 0531-0556<img src="chars/arrwdbrt.gif">0561-0586, 
10A0-10C5<img src="chars/arrwdbrt.gif">10D0-10F5, 1E00-1E94<img src="chars/arrwdbrt.gif">1E01-1E95 (evens to odds), 1EA0-1EF8<img src="chars/arrwdbrt.gif">1EA1-1EF9 (evens to odds), 1F08-1F0F<img src="chars/arrwdbrt.gif">1F00-1F07, 1F18-1F1D<img src="chars/arrwdbrt.gif">1F10-1F15, 1F28-1F2F<img src="chars/arrwdbrt.gif">1F20-1F27, 1F38-1F3F<img src="chars/arrwdbrt.gif">1F30-1F37, 1F48-1F4D<img src="chars/arrwdbrt.gif">1F40-1F45, 1F59<img src="chars/arrwdbrt.gif">1F51, 1F5B<img src="chars/arrwdbrt.gif">1F53, 1F5D<img src="chars/arrwdbrt.gif">1F55, 1F5F<img src="chars/arrwdbrt.gif">1F57, 1F68-1F6F<img src="chars/arrwdbrt.gif">1F60-1F67, 1F88-1F8F<img src="chars/arrwdbrt.gif">1F80-1F87, 1F98-1F9F<img src="chars/arrwdbrt.gif">1F90-1F97, 1FA8-1FAF<img src="chars/arrwdbrt.gif">1FA0-1FA7, 1FB8<img src="chars/arrwdbrt.gif">1FB0, 1FB9<img src="chars/arrwdbrt.gif">1FB1, 1FBA<img src="chars/arrwdbrt.gif">1F70, 1FBB<img src="chars/arrwdbrt.gif">1F71, 1FBC<img src="chars/arrwdbrt.gif">1FB3, 1FC8-1FCB<img src="chars/arrwdbrt.gif">1F72-1F75, 1FCC<img src="chars/arrwdbrt.gif">1FC3, 
1FD8<img src="chars/arrwdbrt.gif">1FD0,
 1FD9<img src="chars/arrwdbrt.gif">1FD1, 1FDA<img src="chars/arrwdbrt.gif">1F76, 1FDB<img src="chars/arrwdbrt.gif">1F77, 1FE8<img src="chars/arrwdbrt.gif">1FE0, 1FE9<img src="chars/arrwdbrt.gif">1FE1, 1FEA<img src="chars/arrwdbrt.gif">1F7A, 1FEB<img src="chars/arrwdbrt.gif">1F7B, 1FEC<img src="chars/arrwdbrt.gif">1FE5, 1FF8<img src="chars/arrwdbrt.gif">1F78, 1FF9<img src="chars/arrwdbrt.gif">1F79, 1FFA<img src="chars/arrwdbrt.gif">1F7C, 1FFB<img src="chars/arrwdbrt.gif">1F7D, 1FFC<img src="chars/arrwdbrt.gif">1FF3, 2160-216F<img src="chars/arrwdbrt.gif">2170-217F, 24B6-24CF<img src="chars/arrwdbrt.gif">24D0-24E9, FF21-FF3A<img src="chars/arrwdbrt.gif">FF41-FF5A.<p>
<a name="10603"></a>
Note that the method <code>isLowerCase</code> <a href="20_16.htm#30199">(&#167;20.5.11)</a> will not necessarily return <code>true</code> when given the result of the <code>toLowerCase</code> method.<p>
<a name="23423"></a>
[This specification for the method <code>toLowerCase</code> is scheduled for introduction in Java version 1.1, either as defined here, or updated for Unicode 2.0; see <a href="20_5.htm#14345">&#167;20.5</a>. In previous versions of Java, this method returns its argument for all arguments larger than <code>\u00FF</code>.]<p>
<a name="9154"></a>
<p><strong>20.5.21	</strong> <code>public static char toUpperCase(char ch)</code>
<p>
<a name="10596"></a>
If the character <code>ch</code> has an uppercase equivalent specified in the Unicode attribute 
table, then that uppercase equivalent character is returned. Otherwise, the argument <code>ch</code> is returned.
<p><a name="16156"></a>
The uppercase equivalents specified in the Unicode attribute table for Unicode 1.1.5 as corrected above, are as follows, where character codes to the right of arrows are the uppercase equivalents of character codes to the left of arrows:<p>
0061-007A<img src="chars/arrwdbrt.gif">0041-005A, 00E0-00F6<img src="chars/arrwdbrt.gif">00C0-00D6, 00F8-00FE<img src="chars/arrwdbrt.gif">00D8-00DE, 00FF<img src="chars/arrwdbrt.gif">0178, 0101-012F<img src="chars/arrwdbrt.gif">0100-012E (odds to evens), 0133-0137<img src="chars/arrwdbrt.gif">0132-0136 (odds to evens), 013A-0148<img src="chars/arrwdbrt.gif">0139-0147 (evens to odds), 014B-0177<img src="chars/arrwdbrt.gif">014A-0176 (odds to evens), 017A-017E<img src="chars/arrwdbrt.gif">0179-017D (evens to odds), 017F<img src="chars/arrwdbrt.gif">0053, 0183-0185<img src="chars/arrwdbrt.gif">0182-0184 (odds to evens), 0188<img src="chars/arrwdbrt.gif">0187, 018C<img src="chars/arrwdbrt.gif">018B, 0192<img src="chars/arrwdbrt.gif">0191, 0199<img src="chars/arrwdbrt.gif">0198, 01A1-01A5<img src="chars/arrwdbrt.gif">01A0-01A4 (odds to evens), 01A8<img src="chars/arrwdbrt.gif">01A7, 01AD<img src="chars/arrwdbrt.gif">01AC, 01B0<img src="chars/arrwdbrt.gif">01AF, 01B4<img src="chars/arrwdbrt.gif">01B3, 
01B6<img src="chars/arrwdbrt.gif">01B5, 01B9<img src="chars/arrwdbrt.gif">01B8, 01BD<img src="chars/arrwdbrt.gif">01BC, 01C5<img src="chars/arrwdbrt.gif">01C4, 01C6<img src="chars/arrwdbrt.gif">01C4, 01C8<img src="chars/arrwdbrt.gif">01C7, 01C9<img src="chars/arrwdbrt.gif">01C7, 01CB<img src="chars/arrwdbrt.gif">01CA, 01CC<img src="chars/arrwdbrt.gif">01CA, 01CE-01DC<img src="chars/arrwdbrt.gif">01CD-01DB (evens to odds), 01DF-01EF<img src="chars/arrwdbrt.gif">01DE-01EE (odds to evens), 01F2<img src="chars/arrwdbrt.gif">01F1, 01F3<img src="chars/arrwdbrt.gif">01F1, 01F5<img src="chars/arrwdbrt.gif">01F4, 01FB-0217<img src="chars/arrwdbrt.gif">01FA-0216 (odds to evens), 0253<img src="chars/arrwdbrt.gif">0181, 0254<img src="chars/arrwdbrt.gif">0186, 0257<img src="chars/arrwdbrt.gif">018A, 0258<img src="chars/arrwdbrt.gif">018E, 0259<img src="chars/arrwdbrt.gif">018F, 025B<img src="chars/arrwdbrt.gif">0190, 0260<img src="chars/arrwdbrt.gif">0193, 0263<img src="chars/arrwdbrt.gif">0194, 0268<img src="chars/arrwdbrt.gif">0197, 0269<img src="chars/arrwdbrt.gif">0196, 026F<img src="chars/arrwdbrt.gif">019C, 0272<img src="chars/arrwdbrt.gif">019D, 0283<img src="chars/arrwdbrt.gif">01A9, 
0288<img src="chars/arrwdbrt.gif">01AE, 028A<img src="chars/arrwdbrt.gif">01B1, 028B<img src="chars/arrwdbrt.gif">01B2, 0292<img src="chars/arrwdbrt.gif">01B7, 03AC<img src="chars/arrwdbrt.gif">0386, 03AD-03AF<img src="chars/arrwdbrt.gif">0388-038A, 03B1-03C1<img src="chars/arrwdbrt.gif">0391-03A1, 03C2<img src="chars/arrwdbrt.gif">03A3, 03C3-03CB<img src="chars/arrwdbrt.gif">03A3-03AB, 03CC<img src="chars/arrwdbrt.gif">038C, 03CD<img src="chars/arrwdbrt.gif">038E, 03CE<img src="chars/arrwdbrt.gif">038F, 03D0<img src="chars/arrwdbrt.gif">0392, 03D1<img src="chars/arrwdbrt.gif">0398, 03D5<img src="chars/arrwdbrt.gif">03A6, 03D6<img src="chars/arrwdbrt.gif">03A0, 03E3-03EF<img src="chars/arrwdbrt.gif">03E2-03EE (odds to evens), 03F0<img src="chars/arrwdbrt.gif">039A, 03F1<img src="chars/arrwdbrt.gif">03A1, 0430-044F<img src="chars/arrwdbrt.gif">0410-042F, 0451-045C<img src="chars/arrwdbrt.gif">0401-040C, 045E<img src="chars/arrwdbrt.gif">040E, 045F<img src="chars/arrwdbrt.gif">040F, 0461-0481<img src="chars/arrwdbrt.gif">0460-0480 (odds to evens), 0491-04BF<img src="chars/arrwdbrt.gif">0490-04BE (odds to evens), 
04C2<img src="chars/arrwdbrt.gif">04C1, 
04C4<img src="chars/arrwdbrt.gif">04C3, 04C8<img src="chars/arrwdbrt.gif">04C7, 04CC<img src="chars/arrwdbrt.gif">04CB, 04D1-04EB<img src="chars/arrwdbrt.gif">04D0-04EA (odds to evens), 04EF-04F5<img src="chars/arrwdbrt.gif">04EE-04F4 (odds to evens), 04F9<img src="chars/arrwdbrt.gif">04F8, 0561-0586<img src="chars/arrwdbrt.gif">0531-0556, 1E01-1E95<img src="chars/arrwdbrt.gif">1E00-1E94 (odds to evens), 1EA1-1EF9<img src="chars/arrwdbrt.gif">1EA0-1EF8 (odds to evens), 1F00-1F07<img src="chars/arrwdbrt.gif">1F08-1F0F, 1F10-1F15<img src="chars/arrwdbrt.gif">1F18-1F1D, 1F20-1F27<img src="chars/arrwdbrt.gif">1F28-1F2F, 1F30-1F37<img src="chars/arrwdbrt.gif">1F38-1F3F, 1F40-1F45<img src="chars/arrwdbrt.gif">1F48-1F4D, 1F51<img src="chars/arrwdbrt.gif">1F59, 1F53<img src="chars/arrwdbrt.gif">1F5B, 1F55<img src="chars/arrwdbrt.gif">1F5D, 1F57<img src="chars/arrwdbrt.gif">1F5F, 1F60-1F67<img src="chars/arrwdbrt.gif">1F68-1F6F, 1F70<img src="chars/arrwdbrt.gif">1FBA, 1F71<img src="chars/arrwdbrt.gif">1FBB, 1F72-1F75<img src="chars/arrwdbrt.gif">1FC8-1FCB, 1F76<img src="chars/arrwdbrt.gif">1FDA, 
1F77<img src="chars/arrwdbrt.gif">1FDB, 
1F78<img src="chars/arrwdbrt.gif">1FF8, 1F79<img src="chars/arrwdbrt.gif">1FF9, 1F7A<img src="chars/arrwdbrt.gif">1FEA, 1F7B<img src="chars/arrwdbrt.gif">1FEB, 1F7C<img src="chars/arrwdbrt.gif">1FFA, 1F7D<img src="chars/arrwdbrt.gif">1FFB, 1F80-1F87<img src="chars/arrwdbrt.gif">1F88-1F8F, 1F90-1F97<img src="chars/arrwdbrt.gif">1F98-1F9F, 1FA0-1FA7<img src="chars/arrwdbrt.gif">1FA8-1FAF, 1FB0<img src="chars/arrwdbrt.gif">1FB8, 1FB1<img src="chars/arrwdbrt.gif">1FB9, 1FB3<img src="chars/arrwdbrt.gif">1FBC, 1FC3<img src="chars/arrwdbrt.gif">1FCC, 1FD0<img src="chars/arrwdbrt.gif">1FD8, 1FD1<img src="chars/arrwdbrt.gif">1FD9, 1FE0<img src="chars/arrwdbrt.gif">1FE8, 1FE1<img src="chars/arrwdbrt.gif">1FE9, 1FE5<img src="chars/arrwdbrt.gif">1FEC, 1FF3<img src="chars/arrwdbrt.gif">1FFC, 2170-217F<img src="chars/arrwdbrt.gif">2160-216F, 24D0-24E9<img src="chars/arrwdbrt.gif">24B6-24CF, FF41-FF5A<img src="chars/arrwdbrt.gif">FF21-FF3A.<p>
<a name="10611"></a>
Note that the method <code>isUpperCase</code> <a href="20_5.htm#9225">(&#167;20.5.12)</a> will not necessarily return <code>true</code> when given the result of the <code>toUpperCase</code> method.<p>
<a name="23439"></a>
[This specification for the method <code>toUpperCase</code> is scheduled for introduction in Java version 1.1, either as defined here, or updated for Unicode 2.0; see <a href="20_5.htm#14345">&#167;20.5</a>. In previous versions of Java, this method returns its argument for all arguments larger than <code>\u00FE</code>. Note that although <code>\u00FF</code> is a lowercase character, its uppercase equivalent is <code>\u0178</code>; <code>toUpperCase</code> in versions of Java prior to version 1.1 simply do not consistently handle or use Unicode character codes above <code>\u00FF</code>.]<p>
<a name="9159"></a>

<p><strong>20.5.22	</strong> <code>public static char toTitleCase(char ch)</code>
<p>
<a name="10600"></a>
If the character <code>ch</code> has a titlecase equivalent specified in the Unicode attribute 
table, then that titlecase equivalent character is returned; otherwise, the argument 
<code>ch</code> is returned.
<p><a name="10618"></a>
Note that the method <code>isTitleCase</code> <a href="20_5.htm#9230">(&#167;20.5.13)</a> will not necessarily return <code>true</code> when given the result of the <code>toTitleCase</code> method. The Unicode attribute table always has the titlecase attribute equal to the uppercase attribute for characters that have uppercase equivalents but no separate titlecase form.<p>
<a name="23510"></a>
Example: <code>Character.toTitleCase('a') </code>returns <code>'A'</code><p>
<a name="23514"></a>
Example: <code>Character.toTitleCase('Q') </code>returns <code>'Q'</code><p>
<a name="31056"></a>
Example: <code>Character.toTitleCase('lj') </code>returns <code>'Lj'</code> where <code>'lj'</code> is the Unicode character <code>\u01C9</code> and <code>'Lj'</code> is its titlecase equivalent character <code>\u01C8</code>.<p>
<a name="31057"></a>
[This method is scheduled for introduction in Java version 1.1.]<p>
<a name="13834"></a>
<p><strong>20.5.23	</strong> <code>public static int digit(char ch, int radix)</code>
<p>
<a name="12808"></a>
Returns the numeric value of the character <code>ch</code> considered as a digit in the specified 
radix. If the value of <code>radix</code> is not a valid radix, or the character <code>ch</code> is not a valid 
digit in the specified radix, then <code>-1</code> is returned.
<p><a name="12812"></a>
A radix is valid if and only if its value is not less than <code>Character.MIN_RADIX</code> <a href="20_5.htm#1300">(&#167;20.5.3)</a> and not greater than <code>Character.MAX_RADIX</code> <a href="20_5.htm#1311">(&#167;20.5.4)</a>.<p>
<a name="12815"></a>
A character is a valid digit if and only if one of the following is true:<p>
<ul><a name="12816"></a>
<li>The method <code>isDigit</code> returns <code>true</code> for the character, and the decimal digit value of the character, as specified in the Unicode attribute table, is less than the specified radix. In this case, the decimal digit value is returned.
<a name="12819"></a>
<li>The character is one of the uppercase Latin letters <code>'A'</code>-<code>'Z'</code> (<code>\u0041</code>-<code>\u005A</code>) and its code is less than <code>radix+'A'-10</code>. In this case <code>ch-'A'+10</code> is returned.
<a name="12910"></a>
<li>The character is one of the lowercase Latin letters <code>'</code>a<code>'</code>-<code>'z'</code> (<code>\u0061</code>-<code>\u007A</code>) and its code is less than <code>radix+'a'-10</code>. In this case <code>ch-'a'+10</code> is returned.
</ul><p><a name="23453"></a>
[This specification for the method <code>digit</code> is scheduled for introduction in Java version 1.1, either as defined here, or updated for Unicode 2.0; see <a href="20_5.htm#14345">&#167;20.5</a>. In previous versions of Java, this method returns <code>-1</code> for all character codes larger than <code>\u00FF</code>.]<p>
<a name="13835"></a>
<p><strong>20.5.24	</strong> <code>public static char forDigit(int digit, int radix)</code>
<p>
<a name="18866"></a>
Returns a character that represents the given digit in the specified radix. If the 
value of <code>radix</code> is not a valid radix, or the value of <code>digit</code> is not a valid digit in the 
specified radix, the null character <code>'\u0000'</code> is returned.
<p><a name="18883"></a>
A radix is valid if and only if its value is not less than <code>Character.MIN_RADIX</code> <a href="20_5.htm#1300">(&#167;20.5.3)</a> and not greater than <code>Character.MAX_RADIX</code> <a href="20_5.htm#1311">(&#167;20.5.4)</a>.<p>
<a name="18864"></a>
A digit is valid if and only if it is nonnegative and less than the <code>radix</code>.<p>
<a name="18889"></a>
If the digit is less than <code>10</code>, then the character value <code>'0'+digit</code> is returned; otherwise, <code>'a'+digit-10</code> is returned. Thus, the digits produced by <code>forDigit</code>, in increasing order of value, are the ASCII characters:<p>
<pre><a name="18892"></a>0123456789abcdefghijklmnopqrstuvwxyz
</pre><p><a name="18898"></a>
(these are <code>'\u0030'</code> through <code>'\u0039'</code> and <code>'\u0061'</code> through <code>'\u007a'</code>). If 
uppercase letters are desired, the <code>toUpperCase</code> method may be called on the 
result:
<p><pre><a name="18902"></a>Character.toUpperCase(Character.forDigit(digit, radix))
</pre><p>


</body></html>

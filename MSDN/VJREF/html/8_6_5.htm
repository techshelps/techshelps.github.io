<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>8.6.5 Constructor Body</title>
<META NAME=MS-HAID CONTENT="8_6_5">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>8.6.5	 Constructor Body</h3>
<a name="78435"></a>
<p>
<a name="42051"></a>
The first statement of a constructor body may be an explicit invocation of another 
constructor of the same class, written as <code>this</code> followed by a parenthesized argument list, or an explicit invocation of a constructor of the direct superclass, written 
as <code>super</code> followed by a parenthesized argument list.
<p><pre>
<i><i>ConstructorBody:<br>
</i>	<code>{ </code>ExplicitConstructorInvocationopt<code> </code><i>BlockStatements</i>opt<code> }
</code></i>
<i><i>ExplicitConstructorInvocation:<br>
	</i><code>this ( </code><i>ArgumentList</i>opt<code> ) ;<br>
	super ( </code><i>ArgumentList</i>opt<code> ) ;
</code></i></pre><p><a name="230283"></a>
It is a compile-time error for a constructor to directly or indirectly invoke itself through a series of one or more explicit constructor invocations involving <code>this</code>.<p>
<a name="229836"></a>
If a constructor body does not begin with an explicit constructor invocation and the constructor being declared is not part of the primordial class <code>Object</code>, then the constructor body is implicitly assumed by the compiler to begin with a superclass constructor invocation "<code>super();</code>", an invocation of the constructor of its direct superclass that takes no arguments.<p>
<a name="30734"></a>
Except for the possibility of explicit constructor invocations, the body of a constructor is like the body of a method <a href="8_4_5.htm#37316">(&#167;8.4.5)</a>. A <code>return</code> statement <a href="14_15.htm#6767">(&#167;14.15)</a> may be used in the body of a constructor if it does not include an expression.<p>
<a name="42056"></a>
In the example:<p>
<pre><a name="42057"></a>
class Point {
<br><a name="16855"></a>	int x, y;
<br><br><a name="40008"></a>	Point(int x, int y) { this.x = x; this.y = y; }
<br><a name="16859"></a>}
<br><a name="16860"></a>
class ColoredPoint extends Point {
<br><a name="16863"></a>	static final int WHITE = 0, BLACK = 1;
<br><br><a name="16861"></a>	int color;
<br><a name="16862"></a>
	ColoredPoint(int x, int y) {
<a name="16868"></a>		this(x, y, WHITE);
<a name="16869"></a>	}
<br><a name="16866"></a>
	ColoredPoint(int x, int y, int color) {
<a name="16867"></a>		super(x, y);<br>
		this.color = color;<br>
	}
<br><a name="16870"></a>}
</pre><p><a name="16871"></a>
the first constructor of <code>ColoredPoint</code> invokes the second, providing an additional 
argument; the second constructor of <code>ColoredPoint</code> invokes the constructor of its 
superclass <code>Point</code>, passing along the coordinates.
<p><a name="42065"></a>
An explicit constructor invocation statement may not refer to any instance variables or instance methods declared in this class or any superclass, or use <code>this</code> or <code>super</code> in any expression; otherwise, a compile-time error occurs. For example, if the first constructor of <code>ColoredPoint</code> in the example above were changed to:<p>
<pre><a name="16892"></a>
	ColoredPoint(int x, int y) {
<a name="16893"></a>		this(x, y, color);
<a name="16894"></a>	}
</pre><p><a name="16895"></a>
then a compile-time error would occur, because an instance variable cannot be 
used within a superclass constructor invocation.
<p><a name="229257"></a>
An invocation of the constructor of the direct superclass, whether it actually appears as an explicit constructor invocation statement or is provided automatically <a href="8_6_7.htm#16823">(&#167;8.6.7)</a>, performs an additional implicit action after a normal return of control from the constructor: all instance variables that have initializers are initialized at that time, in the textual order in which they appear in the class declaration. An invocation of another constructor in the same class using the keyword <code>this</code> does not perform this additional implicit action.<p>
<a name="229264"></a>
<a href="12_5.htm#44670">&#167;12.5</a> describes the creation and initialization of new class instances.<p>


</Font></body></html>

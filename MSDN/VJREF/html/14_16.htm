<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>14.16 The throw Statement</title>
<META NAME=MS-HAID CONTENT="14_16">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>14.16	 The throw Statement</h2>
<a name="237350"></a>
<p>
<a name="79254"></a>
<meta name="MS-HKWD" content="throw">
A <code>throw</code> statement causes an exception <a href="chap11.htm">(&#167;11)</a> to be thrown. The result is an immediate transfer of control <a href="11_3.htm#44153">(&#167;11.3)</a> that may exit multiple statements and multiple 
constructor, static and field initializer evaluations, and method invocations until a 
<code>try</code> statement <a href="14_18.htm#79311">(&#167;14.18)</a> is found that catches the thrown value. If no such <code>try</code> 
statement is found, then execution of the thread (<a href="chap17.htm">&#167;17</a>, <a href="20_20.htm#2658">&#167;20.20</a>) that executed the 
<code>throw</code> is terminated <a href="11_3.htm#44153">(&#167;11.3)</a> after invocation of the <code>UncaughtException</code> method 
<a href="20_21.htm#2901">(&#167;20.21.31)</a> for the thread group to which the thread belongs.
<p><pre>
<i>ThrowStatement:<br>
	<code>throw </code>Expression<code> ;
</code></i></pre><p><a name="236072"></a>
The <i>Expression</i> in a throw statement must denote a variable or value of a reference type which is assignable <a href="5_2.htm#170768">(&#167;5.2)</a> to the type <code>Throwable</code>, or a compile-time error occurs. Moreover, at least one of the following three conditions must be true, or a compile-time error occurs:<p>
<ul><a name="236073"></a>
<li>The exception is not a checked exception <a href="11_2.htm#44121">(&#167;11.2)</a>-specifically, one of the following situations is true:
<ul>
<a name="39922"></a>
<li>The type of the <i>Expression</i> is the class <code>RuntimeException</code> or a subclass of <code>RuntimeException</code>.
<a name="236074"></a>
<li>The type of the <i>Expression</i> is the class <code>Error</code> or a subclass of <code>Error</code>.
</ul>
<a name="236078"></a>
<li>The <code>throw</code> statement is contained in the <code>try</code> block of a <code>try</code> statement <a href="14_18.htm#79311">(&#167;14.18)</a> and the type of the <i>Expression</i> is assignable <a href="5_2.htm#170768">(&#167;5.2)</a> to the type of the parameter of at least one <code>catch</code> clause of the <code>try</code> statement. (In this case we say the thrown value is <i>caught</i> by the <code>try</code> statement.)
<a name="236082"></a>
<li>The <code>throw</code> statement is contained in a method or constructor declaration and the type of the <i>Expression</i> is assignable <a href="5_2.htm#170768">(&#167;5.2)</a> to at least one type listed in the <code>throws</code> clause (<a href="8_4_4.htm#78323">&#167;8.4.4</a>, <a href="8_6_4.htm#78427">&#167;8.6.4</a>) of the declaration.
</ul><p><a name="236055"></a>
A <code>throw</code> statement first evaluates the <i>Expression</i>. If the evaluation of the <i>Expression</i> completes abruptly for some reason, then the <code>throw</code> completes abruptly for that reason. If evaluation of the <i>Expression</i> completes normally, producing a value <i>V</i>, then the <code>throw</code> statement completes abruptly, the reason being a <code>throw</code> with value <i>V</i>.<p>
<a name="43545"></a>
It can be seen, then, that a <code>throw</code> statement always completes abruptly.<p>
<a name="43541"></a>
If there are any enclosing <code>try</code> statements <a href="14_18.htm#79311">(&#167;14.18)</a> whose <code>try</code> blocks contain the <code>throw</code> statement, then any <code>finally</code> clauses of those <code>try</code> statements are executed as control is transferred outward, until the thrown value is caught. Note that abrupt completion of a <code>finally</code> clause can disrupt the transfer of control initiated by a <code>throw</code> statement.<p>
<a name="79283"></a>
If a <code>throw</code> statement is contained in a method declaration, but its value is not caught by some <code>try</code> statement that contains it, then the invocation of the method completes abruptly because of the <code>throw</code>.<p>
<a name="79284"></a>
If a <code>throw</code> statement is contained in a constructor declaration, but its value is not caught by some <code>try</code> statement that contains it, then the class instance creation expression (or the method invocation of method <code>newInstance</code> of class <code>Class</code>) that invoked the constructor will complete abruptly because of the <code>throw</code>.<p>
<a name="43567"></a>
If a <code>throw</code> statement is contained in a static initializer <a href="8_5.htm#39245">(&#167;8.5)</a>, then a compile-time check ensures that either its value is always an unchecked exception or its value is always caught by some <code>try</code> statement that contains it. If, despite this check, the value is not caught by some <code>try</code> statement that contains the <code>throw</code> statement, then the value is rethrown if it is an instance of class <code>Error</code> or one of its subclasses; otherwise, it is wrapped in an <code>ExceptionInInitializerError</code> object, which is then thrown <a href="12_4_2.htm#44630">(&#167;12.4.2)</a>.<p>
<a name="79285"></a>
By convention, user-declared throwable types should usually be declared to be subclasses of class <code>Exception</code>, which is a subclass of class <code>Throwable</code> (<a href="11_5.htm#44278">&#167;11.5</a>, <a href="20_22.htm#14470">&#167;20.22</a>).<p>


</body></html>

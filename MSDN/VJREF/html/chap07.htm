</Font></body></html>
<html>
<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>7. Packages</title>
<META NAME=MS-HAID CONTENT="chap07">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
</head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">  
<hr><br>
 
<p><strong>
CHAPTER
 7 </strong></p>

<h1> Packages</h1>
<a name="60384"></a>
<p>
<a name="34412"></a>
<a name="61540"></a>
<meta name="MS-HKWD" content="package">
<p><i>Good things come in small packages.</i><br>
<a name="61546"></a>
&#151;Traditional &#32;proverb</p>
<p>
<a name="61541"></a>
Java programs are organized as sets of packages. Each package has its own set 
of names for types, which helps to prevent name conflicts. A type is accessible 
<a href="6_6.htm#33916">(&#167;6.6)</a> outside the package that declares it only if the type is declared <code>public</code>.
<p><a name="26517"></a>
The naming structure for packages is hierarchical <a href="7_1.htm#26535">(&#167;7.1)</a>. The members of a package are class and interface types <a href="7_6.htm#26783">(&#167;7.6)</a>, which are declared in compilation units of the package, and subpackages, which may contain compilation units and subpackages of their own.<p>
<a name="40294"></a>
A package can be stored in a file system <a href="7_2_1.htm#37546">(&#167;7.2.1)</a> or in a database <a href="7_2_2.htm#37739">(&#167;7.2.2)</a>. Packages that are stored in a file system have certain constraints on the organization of their compilation units to allow a simple implementation to find classes easily. In either case, the set of packages available to a Java program is determined by the host system, but must always include at least the three standard packages <code>java.lang</code>, <code>java.util</code>, and <code>java.io</code> as specified in Chapters <a href="chap20.htm">20</a>, <a href="chap21.htm">21</a>, and <a href="chap22.htm">22</a>. In most host environments, the standard packages <code>java.applet</code>, <code>java.awt</code>, and <code>java.net</code>, which are not described in this specification, are also available to Java programs.<p>
<a name="26522"></a>
A package consists of a number of compilation units <a href="7_3.htm#40031">(&#167;7.3)</a>. A compilation unit automatically has access to all types declared in its package and also automatically imports<i> </i>each of the types declared in the predefined package<i> </i><code>java.lang</code>.<p>
<a name="35454"></a>
A compilation unit has three parts, each of which is optional:<p>
<ul><a name="13571"></a>
<li>A <code>package</code> declaration <a href="7_4.htm#26619">(&#167;7.4)</a>, giving the fully qualified name <a href="6_7.htm#25430">(&#167;6.7)</a> of the package to which the compilation unit belongs
<a name="13599"></a>
<li><code>import</code> declarations <a href="7_5.htm#26656">(&#167;7.5)</a> that allow types from other packages to be referred to using their simple names
<a name="13606"></a>
<li>Type declarations <a href="7_6.htm#26783">(&#167;7.6)</a> of class and interface types
</ul><p><a name="26526"></a>
For small programs and casual development, a package can be unnamed <a href="7_4_2.htm#26639">(&#167;7.4.2)</a> or have a simple name, but if Java code is to be widely distributed, unique package names should be chosen <a href="7_7.htm#40169">(&#167;7.7)</a>. This can prevent the conflicts that would otherwise occur if two development groups happened to pick the same package name and these packages were later to be used in a single program.<p>


</Font></body></html>

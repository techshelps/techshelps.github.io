<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>19.1.1 Problem #1: Names Too Specific</title>
<META NAME=MS-HAID CONTENT="19_1_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>19.1.1	 Problem #1: Names Too Specific</h3>
<a name="44469"></a>
<p>
<a name="44470"></a>
Consider the two groups of productions:
<p><pre>
<i>PackageName:<br>
	Identifier<br>
	PackageName<code> . </code>Identifier
</i>
<i>TypeName:<br>
	Identifier<br>
	PackageName<code> . </code>Identifier
</i></pre><p><a name="44473"></a>
and:
<p><pre>
<i>MethodName:<br>
	Identifier<br>
	AmbiguousName<code> . </code>Identifier
</i>
<i>AmbiguousName:<br>
	Identifier<br>
	AmbiguousName<code> . </code>Identifier
</i></pre><p><a name="44476"></a>
Now consider the partial input:
<p><pre><a name="44477"></a>class Problem1 { int m() { hayden.
</pre><p><a name="44478"></a>
When the parser is considering the token <code>hayden</code>, with one-token lookahead to 
symbol "<code>.</code>", it cannot yet tell whether <code>hayden</code> should be a <i>PackageName</i> that 
qualifies a type name, as in:
<p><pre><a name="44479"></a>hayden.Dinosaur rex = new Hayden.Dinosaur(2);
</pre><p><a name="44480"></a>
or an <i>AmbiguousName</i> that qualifies a method name, as in:
<p><pre><a name="44481"></a>hayden.print("Dinosaur Rex!");
</pre><p><a name="44482"></a>
Therefore, the productions shown above result in a grammar that is not LALR(1). 
There are also other problems with drawing distinctions among different kinds of 
names in the grammar.
<p><a name="44483"></a>
The solution is to eliminate the nonterminals <i>PackageName</i>, <i>TypeName</i>, <i>ExpressionName</i>, <i>MethodName</i>, and <i>AmbiguousName</i>, replacing them all with a single nonterminal <i>Name</i>:<p>
<pre>
<i><i>Name:<br>
	SimpleName<br>
	QualifiedName
</i></i>
<i><i>SimpleName:<br>
	Identifier
</i></i>
<i><i>QualifiedName:<br>
	Name</i><code> . </code><i>Identifier
</i></i></pre><p><a name="44487"></a>
A later stage of compiler analysis then sorts out the precise role of each name or 
name qualifier.
<p><a name="44578"></a>
For related reasons, these productions in <a href="4_3.htm#9317">&#167;4.3</a>:<p>
<pre>
<i>ClassOrInterfaceType:<br>
	ClassType<br>
	InterfaceType
</i>
<i>ClassType:<br>
	TypeName
</i>
<i>InterfaceType:<br>
	TypeName
</i></pre><p><a name="44679"></a>
were changed to:
<p><pre>
<i>ClassOrInterfaceType:<br>
	Name
</i>
<i>ClassType:<br>
<code>	</code>ClassOrInterfaceType
</i>
<i>InterfaceType:<br>
<code>	</code>ClassOrInterfaceType
</i></pre><p>

</body></html>

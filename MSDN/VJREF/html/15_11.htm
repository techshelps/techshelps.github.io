<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>15.11 Method Invocation Expressions</title>
<META NAME=MS-HAID CONTENT="15_11">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>15.11	 Method Invocation Expressions</h2>
<a name="20448"></a>
<p>
<a name="37518"></a>
A method invocation expression is used to invoke a class or instance method.
<p><pre>
<i>MethodInvocation:<br>
	MethodName<code> ( </code>ArgumentListopt<code> )<br>
</code>	Primary<code> . </code>Identifier<code> ( </code>ArgumentListopt<code> )<br>
	super . </code>Identifier<code> ( </code>ArgumentListopt<code> )
</code></i></pre><p><a name="8506"></a>
The definition of <i>ArgumentList</i> from <a href="15_8.htm#41147">&#167;15.8</a> is repeated here for convenience:
<p><pre>
<i>ArgumentList:<br>
	Expression<br>
	ArgumentList<code> , </code>Expression
</i></pre><p><a name="228339"></a>
Resolving a method name at compile time is more complicated than resolving a field name because of the possibility of method overloading. Invoking a method at run time is also more complicated than accessing a field because of the possibility of instance method overriding.<p>
<a name="38751"></a>
Determining the method that will be invoked by a method invocation expression involves several steps. The following three sections describe the compile-time processing of a method invocation; the determination of the type of the method invocation expression is described in <a href="15_11_3.htm#23617">&#167;15.11.3</a>.<p>


</body></html>

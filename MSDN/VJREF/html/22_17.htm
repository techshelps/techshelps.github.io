<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>22.17 The Class java.io.PipedOutputStream</title>
<META NAME=MS-HAID CONTENT="22_17">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>22.17	 The Class java.io.PipedOutputStream</h1>
<a name="29449"></a>
<p>
<a name="29450"></a>
A piped output stream should be connected to a piped input stream; the piped 
input stream then provides whatever data bytes are written to the piped output 
stream. Typically, data is written to a <code>PipeOutputStream</code> object by one thread 
and data is read from the corresponding <code>PipedInputStream</code> <a href="22_5.htm#28307">(&#167;22.5)</a> by some 
other thread. Attempting to use both objects from a single thread is not recommended, as it may deadlock the thread.
<p><pre><a name="29451"></a>public class <code><b>PipedOutputStream</b></code> extends OutputStream {
<a name="29452"></a>	public <code><b>PipedOutputStream</b></code>(PipedInputStream snk)
<a name="29453"></a>		throws IOException;
<a name="29454"></a>	public <code><b>PipedOutputStream</b></code>();
<a name="29455"></a>	public void <code><b>connect</b></code>(PipedInputStream snk)
<a name="29456"></a>		throws IOException;
<a name="29457"></a>	public void <code><b>write</b></code>(int b) throws IOException;
<a name="29458"></a>	public void <code><b>write</b></code>(byte[] b, int off, int len)
<a name="29459"></a>		throws IOException, NullPointerException,
<a name="32406"></a>			IndexOutOfBoundsException;
<a name="29460"></a>	public void <code><b>close</b></code>() throws IOException;
<a name="29461"></a>}
</pre><p><a name="29462"></a>
<p><strong>22.17.1	</strong> <code>public PipedOutputStream(PipedInputStream snk)<br>throws IOException</code>
<p>
<a name="29463"></a>
This constructor initializes a newly created <code>PipedOutputStream</code> so that it is connected to the piped input stream <code>snk</code>. Data bytes written to this stream will then be 
available as input from <code>snk</code>.
<p><a name="29464"></a>
<p><strong>22.17.2	</strong> <code>public PipedOutputStream()</code>
<p>
<a name="29465"></a>
This constructor initializes a newly created <code>PipedOutputStream</code> so that it is not 
yet connected. It must be connected to a <code>PipedInputStream</code> before being used.
<p><a name="29466"></a>
<p><strong>22.17.3	</strong> <code>public void connect(PipedInputStream snk)<br>throws IOException</code>
<p>
<a name="29467"></a>
The <code>connect</code> method causes this piped output stream to be connected to the piped 
input stream <code>snk</code>. If this object is already connected to some other piped input 
stream, an <code>IOException</code> is thrown.
<p><a name="29468"></a>
If <code>snk</code> is an unconnected piped input stream and <code>src</code> is an unconnected piped output stream, they may be connected by either the call:<p>
<pre><a name="29469"></a>src.connect(snk)
</pre><p><a name="29470"></a>
or the call:
<p><pre><a name="29471"></a>snk.connect(src)
</pre><p><a name="29472"></a>
The two calls have the same effect.
<p><a name="29473"></a>
<p><strong>22.17.4	</strong> <code>public void write(int b) throws IOException</code>
<p>
<a name="29474"></a>
If a thread was reading data bytes from the connected piped input stream, but the 
thread is no longer alive, then an <code>IOException</code> is thrown.
<p><a name="29478"></a>
Implements the <code>write</code> method of <code>OutputStream</code> <a href="22_15.htm#29411">(&#167;22.15.1)</a>.<p>
<a name="32412"></a>
<p><strong>22.17.5	</strong> <code>public void write(byte[] b, int off, int len)<br>throws IOException, NullPointerException,			 &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="32414"></a>
If a thread was reading data bytes from the connected piped input stream, but the 
thread is no longer alive, then an <code>IOException</code> is thrown.
<p><a name="29484"></a>
Overrides the <code>write</code> method of <code>OutputStream</code> <a href="22_15.htm#29426">(&#167;22.15.3)</a>.<p>
<a name="29485"></a>
<p><strong>22.17.6	</strong> <code>public void close() throws IOException</code>
<p>
<a name="29486"></a>
This piped output stream is closed and may no longer be used for writing bytes.
<p><a name="29490"></a>
Overrides the <code>close</code> method of <code>OutputStream</code> <a href="22_15.htm#29445">(&#167;22.15.5)</a>.<p>


</body></html>

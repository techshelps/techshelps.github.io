<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.5.4 Meaning of Type Names</title>
<META NAME=MS-HAID CONTENT="6_5_4">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>6.5.4	 Meaning of Type Names</h3>
<a name="21721"></a>
<p>
<a name="32763"></a>
The meaning of a name classified as a <i>TypeName</i> is determined as follows.
<p><a name="21810"></a>
<h4>6.5.4.1	 Simple Type Names</h4>
<p>
<a name="32799"></a>
If a type name consists of a single <i>Identifier</i>, then the identifier must occur in the 
scope of a declaration of a type with this name, or a compile-time error occurs. It 
is possible that the identifier occurs within the scope of more than one type with 
that name, in which case the type denoted by the name is determined as follows:
<p><ul><a name="21741"></a>
<li>If a type with that name is declared in the current compilation unit <a href="7_3.htm#40031">(&#167;7.3)</a>, either by a single-type-import declaration <a href="7_5_1.htm#26699">(&#167;7.5.1)</a> or by a declaration of a class or interface &#32;type <a href="7_6.htm#26783">(&#167;7.6)</a>, then the simple type name denotes that type.
<a name="21751"></a>
<li>Otherwise, if a type with that name is declared in another compilation unit <a href="7_3.htm#40031">(&#167;7.3)</a> of the package <a href="7_1.htm#26535">(&#167;7.1)</a> containing the identifier, then the identifier denotes that type. Note that, in systems that store compilation units in a file system, such a compilation unit must have a file name that is the name of the type <a href="7_6.htm#26783">(&#167;7.6)</a>.
<a name="21758"></a>
<li>Otherwise, if a type of that name is declared by exactly one type-import-on-demand declaration <a href="7_5_2.htm#26725">(&#167;7.5.2)</a> of the compilation unit containing the identifier, then the simple type name denotes that type.
<a name="32932"></a>
<li>Otherwise, if a type of that name is declared by more than one type-import-on-demand declaration of the compilation unit, then the name is ambiguous as a type name; a compile-time error occurs.
<a name="32933"></a>
<li>Otherwise, the name is undefined as a type name; a compile-time error occurs.
</ul><p><a name="32934"></a>
This order for considering type declarations is designed to choose the most 
explicit of two or more applicable type declarations.
<p><a name="21811"></a>
<h4>6.5.4.2	 Qualified Type Names</h4>
<p>
<a name="32818"></a>
If a type name is of the form <i>Q</i><code>.</code><i>Id</i>, then <i>Q</i> must be a package name. The type 
name <i>Q</i><code>.</code><i>Id</i> names a type that is the member named <i>Id</i> within the package named 
by <i>Q</i>. If <i>Q</i> does not name an accessible package, or <i>Id</i> does not name a type within 
that package, or the type named <i>Id</i> within that package is not accessible <a href="6_6.htm#33916">(&#167;6.6)</a>, 
then a compile-time error occurs.
<p><a name="32816"></a>
The example:<p>
<pre><a name="21789"></a>package wnj.test;
</pre><p><pre><a name="21790"></a>
class Test {
<a name="21791"></a>	public static void main(String[] args) {
<a name="21792"></a>		java.util.Date date =
<a name="21793"></a>			new java.util.Date(System.currentTimeMillis());
<a name="21794"></a>		System.out.println(date.toLocaleString());
<a name="21795"></a>	}
<a name="21796"></a>}
</pre><p><a name="21797"></a>
produced the following output the first time it was run:
<p><pre><a name="21798"></a>Sun Jan 21 22:56:29 1996
</pre><p><a name="21799"></a>
In this example:
<p><ul><a name="21800"></a>
<li>The name <code>wnj.test</code> must name a package on the host system. It is resolved by first looking for the package <code>wnj</code>, using the procedure described in <a href="6_5_3.htm#22481">&#167;6.5.3.1</a>, and then making sure that the subpackage <code>test</code> of this package is accessible.
<a name="21807"></a>
<li>The name <code>java.util.Date</code> <a href="21_3.htm#7433">(&#167;21.3)</a> must denote a type, so we first use the procedure recursively to determine if <code>java.util</code> is an accessible package, which it is, and then look to see if the type <code>Date</code> is accessible in this package.
</ul><p>

</Font></body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>12.8 Unloading of Classes and Interfaces</title>
<META NAME=MS-HAID CONTENT="12_8">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>12.8	 Unloading of Classes and Interfaces</h2>
<a name="44850"></a>
<p>
<a name="44851"></a>
A Java Virtual Machine may provide mechanisms whereby classes are <i>unloaded</i>. 
The details of such mechanisms are not specified in this version of the Java Language Specification. In general, groups of related class and interface types will be 
unloaded together. This can be used, for example, to unload a group of related 
types that have been loaded using a particular class loader. Such a group might 
consist of all the classes implementing a single applet in a Java-based browser 
such as HotJava, for example.
<p><a name="48002"></a>
A class may not be unloaded while any instance of it is still reachable <a href="12_6.htm#44748">(&#167;12.6)</a>. A class or interface may not be unloaded while the <code>Class</code> object that represents it is still reachable.<p>
<a name="44855"></a>
Classes that declare class finalizers <a href="12_7.htm#48744">(&#167;12.7)</a> will have these finalizers run before they are unloaded.<p>


</body></html>

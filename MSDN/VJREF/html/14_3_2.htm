<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>14.3.2 Scope of Local Variable Declarations</title>
<META NAME=MS-HAID CONTENT="14_3_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>14.3.2	 Scope of Local Variable Declarations</h3>
<a name="32644"></a>
<p>
<a name="45940"></a>
The scope of a local variable declared in a block is the rest of the block, including 
its own initializer. The name of the local variable parameter may not be redeclared 
as a local variable or exception parameter within its scope, or a compile-time error 
occurs; that is, hiding the name of a local variable is not permitted.
<p><a name="45944"></a>
A local variable cannot be referred to using a qualified name <a href="6_6.htm#33916">(&#167;6.6)</a>, only a simple name.<p>
<a name="45938"></a>
The example:<p>
<pre><a name="32598"></a>
class Test {
<a name="32601"></a>	static int x;
<a name="32599"></a>	public static void main(String[] args) {
<a name="32600"></a>		int x = x;
<a name="32602"></a>	}
<a name="32603"></a>}
</pre><p><a name="32604"></a>
causes a compile-time error because the initialization of <code>x</code> is within the scope of 
the declaration of <code>x</code> as a local variable, and the local <code>x</code> does not yet have a value 
and cannot be used.
<p><a name="32610"></a>
The following program does compile:<p>
<pre><a name="32613"></a>
class Test {
<a name="32614"></a>	static int x;
<a name="32615"></a>	public static void main(String[] args) {
<a name="32616"></a>		int x = (x=2)*2;
<a name="32619"></a>		System.out.println(x);
<a name="32617"></a>	}
<a name="32618"></a>}
</pre><p><a name="32611"></a>
because the local variable <code>x</code> is definitely assigned <a href="15_27.htm#25979">(&#167;16)</a> before it is used. It prints:
<p><pre><a name="236246"></a>4
</pre><p><a name="5925"></a>
Here is another example:<p>
<pre><a name="5926"></a>
class Test {
<a name="32622"></a>	public static void main(String[] args) {
<a name="50177"></a>		System.out.print("2+1=");
<a name="5927"></a>		int two = 2, three = two + 1;
<a name="5928"></a>		System.out.println(three);
<a name="50179"></a>	}
<a name="5929"></a>}
</pre><p><a name="17863"></a>
which compiles correctly and produces the output:
<p><pre><a name="17864"></a>2+1=3
</pre><p><a name="7616"></a>
The initializer for <code>three</code> can correctly refer to the variable <code>two</code> declared in an earlier declarator, and the method invocation in the next line can correctly refer to the 
variable <code>three</code> declared earlier in the block.
<p><a name="35349"></a>
The scope of a local variable declared in a <code>for</code> statement is the rest of the <code>for</code> statement, including its own initializer.<p>
<a name="32558"></a>
If a declaration of an identifier as a local variable appears within the scope of a parameter or local variable of the same name, a compile-time error occurs. Thus the following example does not compile:<p>
<pre><a name="32645"></a>
class Test {
<a name="32646"></a>	public static void main(String[] args) {
<a name="50181"></a>		int i;
<a name="32663"></a>		for (int i = 0; i &lt; 10; i++)
<a name="32664"></a>			System.out.println(i);
<a name="32652"></a>	}
<a name="32653"></a>}
</pre><p><a name="32559"></a>
This restriction helps to detect some otherwise very obscure bugs. (A similar 
restriction on hiding of members by local variables was judged impractical, 
because the addition of a member in a superclass could cause subclasses to have to 
rename local variables.)
<p><a name="35322"></a>
On the other hand, local variables with the same name may be declared in two separate blocks or <code>for</code> statements neither of which contains the other. Thus:<p>
<pre><a name="17888"></a>
class Test {
<a name="17889"></a>	public static void main(String[] args) {
<a name="17890"></a>		for (int i = 0; i &lt; 10; i++)
<a name="17891"></a>			System.out.print(i + " ");
<a name="17892"></a>		for (int i = 10; i &gt; 0; i--)
<a name="17893"></a>			System.out.print(i + " ");
<a name="17894"></a>		System.out.println();
<a name="17895"></a>	}
<a name="17896"></a>}
</pre><p><a name="17897"></a>
compiles without error and, when executed, produces the output:
<p><pre><a name="17881"></a>0 1 2 3 4 5 6 7 8 9 10 9 8 7 6 5 4 3 2 1
</pre><p>

</body></html>

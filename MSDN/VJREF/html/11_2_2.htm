<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>11.2.2 Why Runtime Exceptions are Not Checked</title>
<META NAME=MS-HAID CONTENT="11_2_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>11.2.2	 Why Runtime Exceptions are Not Checked</h3>
<a name="44149"></a>
<p>
<a name="44150"></a>
The <i>runtime exception classes</i> (<code>RuntimeException</code> and its subclasses) are 
exempted from compile-time checking because, in the judgment of the designers 
of Java, having to declare such exceptions would not aid significantly in establishing the correctness of Java programs. Many of the operations and constructs of the 
Java language can result in runtime exceptions. The information available to a 
Java compiler, and the level of analysis the compiler performs, are usually not sufficient to establish that such runtime exceptions cannot occur, even though this 
may be obvious to the Java programmer. Requiring such exception classes to be 
declared would simply be an irritation to Java programmers.
<p><a name="44151"></a>
For example, certain code might implement a circular data structure that, by construction, can never involve <code>null</code> references; the programmer can then be certain &#32;that a <code>NullPointerException</code> cannot occur, but it would be difficult for a compiler to prove it. The theorem-proving technology that is needed to establish such global properties of data structures is beyond the scope of this Java Language Specification.<p>


</body></html>

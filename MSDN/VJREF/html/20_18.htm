<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>20.18 The Class java.lang.System</title>
<META NAME=MS-HAID CONTENT="20_18">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>20.18	 The Class java.lang.System</h1>
<a name="36485"></a>
<p>
<a name="5969"></a>
The <code>System</code> class contains a number of useful class variables and class methods. 
It cannot be instantiated. Among the facilities provided by the <code>System</code> class are 
standard input, output, and error output streams; access to externally defined 
"properties"; a means of loading files and libraries; and a utility method for 
quickly copying a portion of an array.
<p><pre><a name="14129"></a>public final class <code><b>System</b></code> {
<a name="3162"></a>	public static InputStream <code><b>in</b></code>;
<a name="3163"></a>	public static PrintStream <code><b>out</b></code>;
<a name="3164"></a>	public static PrintStream <code><b>err</b></code>;
<a name="3199"></a>	public static SecurityManager <code><b>getSecurityManager</b></code>();
<a name="3165"></a>	public static void <code><b>setSecurityManager</b></code>(SecurityManager s)
<a name="6441"></a>		throws SecurityException;
<a name="3167"></a>	public static long <code><b>currentTimeMillis</b></code>();
<a name="3172"></a>	public static Properties <code><b>getProperties</b></code>()
<a name="6410"></a>		throws SecurityException;
<a name="6412"></a>	public static void <code><b>setProperties</b></code>(Properties props)
<a name="3173"></a>		throws SecurityException;
<a name="6417"></a>	public static String <code><b>getProperty</b></code>(String key)
<a name="5957"></a>		throws SecurityException;
<a name="6422"></a>	public static String <code><b>getProperty</b></code>(String key, String default)
<a name="5958"></a>		throws SecurityException;
<a name="6427"></a>	public static void <code><b>exit</b></code>(int status) throws SecurityException;
<a name="3176"></a>	public static void <code><b>gc</b></code>();
<a name="3177"></a>	public static void <code><b>runFinalization</b></code>();
<a name="6432"></a>	public static void <code><b>load</b></code>(String filename)
<a name="3178"></a>		throws SecurityException, UnsatisfiedLinkError;
<a name="6437"></a>	public static void <code><b>loadLibrary</b></code>(String libname)
<a name="3179"></a>		throws SecurityException, UnsatisfiedLinkError;
<a name="3189"></a>	public static void <code><b>arraycopy</b></code>(Object src, int srcOffset,
<a name="3193"></a>			Object dst, int dstOffset, int length)<br>
		throws NullPointerException,
<a name="6408"></a>			ArrayStoreException, IndexOutOfBoundsException;
<a name="3187"></a>}
</pre><p><a name="14130"></a>
<p><strong>20.18.1	</strong> <code>public static InputStream in;</code>
<p>
<a name="6343"></a>
The initial value of this variable is a "standard" input stream, already open and 
ready to supply input data. Typically, this corresponds to keyboard input or 
another input source specified by the host environment or user. Note that this field 
is not <code>final</code>, so its value may be updated if necessary.
<p><a name="14131"></a>
<p><strong>20.18.2	</strong> <code>public static PrintStream out;</code>
<p>
<a name="6348"></a>
The initial value of this variable is a "standard" output stream, already open and 
ready to accept output data. Typically, this corresponds to display output or 
another output destination specified by the host environment or user. Note that this 
field is not <code>final</code>, so its value may be updated if necessary.
<p><a name="6360"></a>
For simple Java applications, a typical way to write a line of output data is:<p>
<pre><a name="6361"></a>System.out.println(data)
</pre><p><a name="6362"></a>
See the <code>println</code> method of class <code>PrintStream</code> <a href="22_22.htm#29906">(&#167;22.22)</a>.<p>
<a name="14132"></a>
<p><strong>20.18.3	</strong> <code>public static PrintStream err;</code>
<p>
<a name="6368"></a>
The initial value of this variable is a "standard" error output stream, already open 
and ready to accept output data. Typically, this corresponds to display output or 
another output destination specified by the host environment or user. By convention, this output stream is used to display error messages or other information that 
should come to the immediate attention of a user even if the principal output 
stream, the value of the variable <code>out</code>, has been redirected to a file or other destination that is typically not continuously monitored. Note that this field is not <code>final</code>, 
so its value may be updated if necessary.
<p><a name="3205"></a>
<p><strong>20.18.4	</strong> <code>public static SecurityManager getSecurityManager()</code>
<p>
<a name="5970"></a>
If a security manager has already been established for the currently running Java 
system, a reference to that security manager is returned. Otherwise, <code>null</code> is 
returned.
<p><a name="14133"></a>
<p><strong>20.18.5	</strong> <code>public static void setSecurityManager(SecurityManager s)<br>throws SecurityException</code>
<p>
<a name="5972"></a>
If a security manager has already been established for the currently running Java 
system, a <code>SecurityException</code> is thrown. Otherwise, the argument is established 
as the current security manager. If the argument is <code>null</code> and no security manager 
has been established, then no action is taken and the method simply returns normally.
<p><a name="5984"></a>
<p><strong>20.18.6	</strong> <code>public static long currentTimeMillis()</code>
<p>
<a name="6012"></a>
Returns the difference, measured in milliseconds, between the current time and 
the standard base time known as "the epoch," 00:00:00 GMT on January 1, 1970. 
See the description of the class <code>Date</code> <a href="21_3.htm#7433">(&#167;21.3)</a> for a discussion of slight discrepancies that may arise between "computer time" and UTC (Coordinated Universal 
Time).
<p><a name="6014"></a>
<p><strong>20.18.7	</strong> <code>public static Properties getProperties()<br>throws SecurityException</code>
<p>
<a name="6372"></a>
First, if there is a security manager, its <code>checkPropertiesAccess</code> method 
<a href="20_17.htm#29869">(&#167;20.17.15)</a> is called with no arguments.
<p><a name="6473"></a>
The current set of system properties for use by the <code>getProperty</code> method is returned as a Properties object <a href="21_6.htm#23061">(&#167;21.6)</a>. If there is no current set of system properties, a set of system properties is first created and initialized. This set of system properties always includes values for the following keys:<p>
<pre><a name="6554"></a><i>Key</i>							<i>Description of associated value
</i><a name="6513"></a>java.version							Java version number
<a name="6514"></a>java.vendor							Java-vendor-specific string
<a name="6515"></a>java.vendor.url							Java vendor URL
<a name="6516"></a>java.home							Java installation directory
<a name="6517"></a>java.class.version							Java class format version number
<a name="6518"></a>java.class.path							Java classpath
<a name="6519"></a>os.name							Operating system name
<a name="6520"></a>os.arch							Operating system architecture
<a name="6521"></a>os.version							Operating system version
<a name="6522"></a>file.separator							File separator (<code>/</code> on UNIX)
<a name="6523"></a>path.separator							Path separator (<code>:</code> on UNIX)
<a name="6524"></a>line.separator							Line separator (<code>\n</code> on UNIX)
<a name="6525"></a>user.name							User account name
<a name="6526"></a>user.home							User home directory
<a name="6527"></a>user.dir							User's current working directory
</pre><p><a name="6626"></a>
Note that even if the security manager does not permit the <code>getProperties</code> operation, it may choose to permit the <code>getProperty</code> operation <a href="20_18.htm#5965">(&#167;20.18.9)</a>.<p>
<a name="5986"></a>
<p><strong>20.18.8	</strong> <code>public static void setProperties(Properties props)<br>throws SecurityException</code>
<p>
<a name="6383"></a>
First, if there is a security manager, its <code>checkPropertiesAccess</code> method 
<a href="20_17.htm#29869">(&#167;20.17.15)</a> is called with no arguments.
<p><a name="6470"></a>
The argument becomes the current set of system properties for use by the <code>getProperty</code> method. See the class <code>Properties</code> <a href="21_6.htm#23061">(&#167;21.6)</a>. If the argument is <code>null</code>, then the current set of system properties is forgotten.<p>
<a name="5965"></a>
<p><strong>20.18.9	</strong> <code>public static String getProperty(String key)<br>throws SecurityException</code>
<p>
<a name="6390"></a>
First, if there is a security manager, its <code>checkPropertyAccess</code> method 
<a href="20_17.htm#29883">(&#167;20.17.16)</a> is called with the <code>key</code> as its argument.
<p><a name="6501"></a>
If there is no current set of system properties, a set of system properties is first created and initialized in the same manner as for the <code>getProperties</code> method <a href="20_18.htm#6014">(&#167;20.18.7)</a>.<p>
<a name="6542"></a>
The system property value associated with the specified <code>key</code> string is returned. If there is no property with that key, then <code>null</code> is returned.<p>
<a name="5966"></a>
<p><strong>20.18.10	</strong> <code>public static String getProperty(String key,<br> &#32; &#32; &#32;String default)<br>throws SecurityException</code>
<p>
<a name="6401"></a>
First, if there is a security manager, its <code>checkPropertyAccess</code> method 
<a href="20_17.htm#29883">(&#167;20.17.16)</a> is called with the <code>key</code> as its argument.
<p><a name="6536"></a>
If there is no current set of system properties, a set of system properties is first created and initialized in the same manner as for the <code>getProperties</code> method <a href="20_18.htm#6014">(&#167;20.18.7)</a>.<p>
<a name="6547"></a>
The system property value associated with the specified <code>key</code> string is returned. If there is no property with that key, then the argument <code>default</code> is returned.<p>
<a name="14142"></a>
<p><strong>20.18.11	</strong> <code>public static void exit(int status)<br>throws SecurityException</code>
<p>
<a name="6215"></a>
This method terminates the currently running Java Virtual Machine. The argument 
serves as a status code; by convention, a nonzero status code indicates abnormal 
termination.
<p><a name="6735"></a>
This method never returns normally.<p>
<a name="6216"></a>
The call <code>System.exit(n)</code> is effectively equivalent to the call:<p>
<pre><a name="6228"></a>Runtime.getRuntime().exit(n)
</pre><p><a name="6221"></a>
For a more complete description, see the <code>exit</code> method of class <code>Runtime</code> 
<a href="20_16.htm#34351">(&#167;20.16.2)</a>.
<p><a name="14143"></a>
<p><strong>20.18.12	</strong> <code>public static void gc()</code>
<p>
<a name="6233"></a>
Calling this method suggests that the Java Virtual Machine expend effort toward 
recycling discarded objects in order to make the memory they currently occupy 
available for quick reuse. When control returns from the method call, the Java Virtual Machine has made a best effort to recycle all discarded objects.
<p><a name="6234"></a>
The call <code>System.gc()</code> is effectively equivalent to the call:<p>
<pre><a name="6235"></a>Runtime.getRuntime().gc()
</pre><p><a name="6239"></a>
For a more complete description, see the <code>gc</code> method of class <code>Runtime</code> <a href="20_16.htm#14090">(&#167;20.16.9)</a>.
<p><a name="14144"></a>
<p><strong>20.18.13	</strong> <code>public static void runFinalization()</code>
<p>
<a name="6252"></a>
Calling this method suggests that the Java Virtual Machine expend effort toward 
running the finalization methods of objects that have been found to be discarded 
but whose finalization methods have not yet been run. When control returns from 
the method call, the Java Virtual Machine has made a best effort to complete all 
outstanding finalizations.
<p><a name="6253"></a>
The call <code>System.runFinalization()</code> is effectively equivalent to the call:<p>
<pre><a name="6254"></a>Runtime.getRuntime().<code>runFinalization</code>()
</pre><p><a name="6258"></a>
For a more complete description, see the <code>runFinalization</code> method of class 
<code>Runtime</code> <a href="20_16.htm#7413">(&#167;20.16.10)</a>.
<p><a name="14145"></a>
<p><strong>20.18.14	</strong> <code>public static void load(String filename)<br>throws SecurityException, UnsatisfiedLinkError</code>
<p>
<a name="6285"></a>
This method loads a code file with the specified file name from the local file system.
<p><a name="6286"></a>
The call <code>System.load(name)</code> is effectively equivalent to the call:<p>
<pre><a name="6287"></a>Runtime.getRuntime().load(name)
</pre><p><a name="6291"></a>
For a more complete description, see the <code>load</code> method of class <code>Runtime</code> 
<a href="20_16.htm#30190">(&#167;20.16.14)</a>.
<p><a name="14146"></a>
<p><strong>20.18.15	</strong> <code>public static void loadLibrary(String libname)<br>throws SecurityException, UnsatisfiedLinkError</code>
<p>
<a name="6315"></a>
This method loads a library code file with the specified library name from the 
local file system.
<p><a name="6316"></a>
The call <code>System.loadLibrary(name)</code> is effectively equivalent to the call<p>
<pre><a name="6317"></a>Runtime.getRuntime().<code>loadLibrary</code>(name)
</pre><p><a name="6321"></a>
For a more complete description, see the <code>loadLibrary</code> method of class <code>Runtime</code> 
<a href="20_16.htm#6954">(&#167;20.16.13)</a>.
<p><a name="3211"></a>
<p><strong>20.18.16	</strong> <code>public static void arraycopy(Object src, int srcOffset,<br> &#32; &#32; &#32;Object dst, int dstOffset, int length)<br>throws NullPointerException, ArrayStoreException,<br> &#32; &#32; &#32;	IndexOutOfBoundsException</code>
<p>
<a name="6019"></a>
A subsequence of array components is copied from the source array referenced by 
<code>src</code> to the destination array referenced by <code>dst</code>. The number of components copied 
is equal to the <code>length</code> argument. The components at the positions <code>srcOffset</code> 
through <code>srcOffset+length-1</code> in the source array are copied into the positions 
<code>dstOffset</code> through <code>dstOffset+length-1</code>, respectively, of the destination array.
<p><a name="25874"></a>
If the <code>src</code> and <code>dst</code> arguments refer to the same array object, then copying is performed as if the components of the source array at positions <code>srcOffset</code> through <code>srcOffset+length-1</code> were first copied to a temporary array of length <code>length</code> and then the contents of the temporary array were copied into positions <code>dstOffset</code> through <code>dstOffset+length-1</code> of the destination array.<p>
<a name="25887"></a>
If <code>dst</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="6195"></a>
If <code>src</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown and the destination array is not modified.<p>
<a name="6067"></a>
Otherwise, if any of the following is true, then an <code>ArrayStoreException</code> is thrown and the destination is not modified:<p>
<ul><a name="6073"></a>
<li>The <code>src</code> argument refers to an object that is not an array.
<a name="6077"></a>
<li>The <code>dst</code> argument refers to an object that is not an array.
<a name="6111"></a>
<li>The <code>src</code> argument and <code>dst</code> argument refer to arrays whose component types are different primitive types.
<a name="6121"></a>
<li>The <code>src</code> argument refers to an array of primitive component type and the <code>dst</code> argument refers to an array of reference component type.
<a name="6125"></a>
<li>The <code>src</code> argument refers to an array of reference component type and the <code>dst</code> argument refers to an array of primitive component type.
</ul><p><a name="6136"></a>
Otherwise, if any of the following is true, an <code>IndexOutOfBoundsException</code> is thrown and the destination is not modified:<p>
<ul><a name="6137"></a>
<li>The <code>srcOffset</code> argument is negative.
<a name="6138"></a>
<li>The <code>dstOffset</code> argument is negative.
<a name="6145"></a>
<li>The <code>length</code> argument is negative.
<a name="6151"></a>
<li><code>srcOffset+length</code> is greater than <code>src.length</code>, the length of the <code>src</code> array.
<a name="6155"></a>
<li><code>dstOffset+length</code> is greater than <code>dst.length</code>, the length of the <code>dst</code> array.
</ul><p><a name="6161"></a>
Otherwise, if the actual value of any component of the source array from position <code>srcOffset</code> through <code>srcOffset+length-1</code> cannot be converted to the component type of the destination array by assignment conversion, then an <code>ArrayStoreException</code> is thrown. In this case, let <i>k</i> be the smallest nonnegative integer less than length such that <code>src[srcOffset+</code><i>k</i><code>]</code> cannot be converted to the component type of the destination array. When the exception is thrown, the source array components from positions <code>srcOffset</code> through <code>srcOffset+</code><i>k</i><code>-1</code> have been copied to destination array positions <code>dstOffset</code> through <code>dstOffset+</code><i>k</i><code>-1</code> and no other positions of the destination array will have been modified. (Because of the restrictions already itemized, this paragraph effectively applies only to the situation where both arrays have component types that are reference types.)<p>


</body></html>

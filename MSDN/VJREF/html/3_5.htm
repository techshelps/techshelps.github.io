<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.5 Input Elements and Tokens</title>
<META NAME=MS-HAID CONTENT="3_5">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>3.5	 Input Elements and Tokens</h2>
<a name="25687"></a>
<p>
<a name="25688"></a>
The input characters and line terminators that result from escape processing <a href="3_3.htm#100850">(&#167;3.3)</a> 
and then input line recognition <a href="3_4.htm#231571">(&#167;3.4)</a> are reduced to a sequence of <i>input elements</i>. 
Those input elements that are not white space <a href="3_6.htm#95710">(&#167;3.6)</a> or comments <a href="3_7.htm#48125">(&#167;3.7)</a> are 
<i>tokens</i>. The tokens are the terminal symbols of the Java syntactic grammar <a href="2_3.htm#140845">(&#167;2.3)</a>.
<p><a name="95675"></a>
This process is specified by the following productions:<p>
<pre>
<i>Input:<br>
	InputElementsopt<code> </code>Subopt
</i>
<i>InputElements:<br>
	InputElement<br>
	InputElements<code> </code>InputElement
</i>
<i>InputElement:<br>
	WhiteSpace<br>
	Comment<br>
	Token
</i>
<i>Token:<br>
	Identifier<br>
	Keyword<br>
	Literal<br>
	Separator<br>
	Operator
</i>
<i>Sub:<br>
	the ASCII SUB character, also known as "control-Z"
</i></pre><p><a name="95707"></a>
White space <a href="3_6.htm#95710">(&#167;3.6)</a> and comments <a href="3_7.htm#48125">(&#167;3.7)</a> can serve to separate tokens that, if adjacent, might be tokenized in another manner. For example, the ASCII characters <code>-</code> and <code>=</code> in the input can form the operator token <code>-=</code> <a href="3_12.htm#230663">(&#167;3.12)</a> only if there is no intervening white space or comment.<p>
<a name="25733"></a>
As a special concession for compatibility with certain operating systems, the ASCII SUB character (<code>\u001a</code>, or control-Z) is ignored if it is the last character in the escaped input stream.<p>
<a name="230834"></a>
Consider two tokens <i>x</i> and <i>y</i> in the resulting input stream. If <i>x</i> precedes <i>y</i>, then we say that <i>x</i> is <i>to the left of</i> <i>y</i> and that <i>y</i> is <i>to the right of</i> <i>x</i>. For example, in this simple piece of Java code:<p>
<pre><a name="230839"></a>
class Empty {
<a name="230840"></a>}
</pre><p><a name="230846"></a>
we say that the <code>}</code> token is to the right of the <code>{</code> token, even though it appears, in this 
two-dimensional representation on paper, downward and to the left of the <code>{</code> token. 
This convention about the use of the words left and right allows us to speak, for 
example, of the right-hand operand of a binary operator or of the left-hand side of 
an assignment.
<p>

</body></html>

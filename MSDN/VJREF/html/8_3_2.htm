<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>8.3.2 Initialization of Fields</title>
<META NAME=MS-HAID CONTENT="8_3_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>8.3.2	 Initialization of Fields</h3>
<a name="24510"></a>
<p>
<a name="41082"></a>
If a field declarator contains a <i>variable initializer</i>, then it has the semantics of an 
assignment <a href="15_25.htm#5281">(&#167;15.25)</a> to the declared variable, and:
<p><ul><a name="37635"></a>
<li>If the declarator is for a class variable (that is, a <code>static</code> field), then the variable initializer is evaluated and the assignment performed exactly once, when the class is initialized <a href="12_4.htm#44557">(&#167;12.4)</a>.
<a name="37639"></a>
<li>If the declarator is for an instance variable (that is, a field that is not <code>static</code>), then the variable initializer is evaluated and the assignment performed each time an instance of the class is created <a href="12_5.htm#44670">(&#167;12.5)</a>. 
</ul><p><a name="38002"></a>
The example:<p>
<pre><a name="30354"></a>
class Point {
<a name="30355"></a>	int x = 1, y = 5;
<a name="30356"></a>}
<br><a name="30357"></a>class Test {
<a name="30358"></a>	public static void main(String[] args) {
<a name="30359"></a>		Point p = new Point();
<a name="30360"></a>		System.out.println(p.x + ", " + p.y);
<a name="30361"></a>	}
<a name="30362"></a>}
</pre><p><a name="30363"></a>
produces the output:
<p><pre><a name="30377"></a>1, 5
</pre><p><a name="30378"></a>
because the assignments to <code>x</code> and <code>y</code> occur whenever a new <code>Point</code> is created.
<p><a name="30370"></a>
Variable initializers are also used in local variable declaration statements <a href="14_3.htm#5920">(&#167;14.3)</a>, where the initializer is evaluated and the assignment performed each time the local variable declaration statement is executed.<p>
<a name="38006"></a>
It is a compile-time error if the evaluation of a variable initializer for a field of a class (or interface) can complete abruptly with a checked exception <a href="11_2.htm#44121">(&#167;11.2)</a>.<p>
<a name="38010"></a>
<h4>8.3.2.1	 Initializers for Class Variables</h4>
<p>
<a name="229741"></a>
A compile-time error occurs if an initialization expression for a class variable contains a use by a simple name of that class variable or of another class variable 
whose declaration occurs to its right (that is, textually later) in the same class. 
Thus:
<p><pre><a name="229742"></a>
class Test {
<a name="229743"></a>	static float f = j;							// compile-time error: forward reference
<a name="229744"></a>	static int j = 1;
<a name="229745"></a>	static int k = k+1;							// compile-time error: forward reference
<a name="229746"></a>}
</pre><p><a name="229747"></a>
causes two compile-time errors, because <code>j</code> is referred to in the initialization of <code>f</code> 
before <code>j</code> is declared and because the initialization of <code>k</code> refers to <code>k</code> itself.
<p><a name="37971"></a>
If a reference by simple name to any instance variable occurs in an initialization expression for a class variable, then a compile-time error occurs.<p>
<a name="37934"></a>
If the keyword <code>this</code> <a href="15_7_2.htm#31980">(&#167;15.7.2)</a> or the keyword <code>super</code> (<a href="15_10_2.htm#20860">&#167;15.10.2</a>, <a href="15_11.htm#20448">&#167;15.11</a>) occurs in an initialization expression for a class variable, then a compile-time error occurs.<p>
<a name="229548"></a>
(One subtlety here is that, at run time, <code>static</code> variables that are <code>final</code> and that are initialized with compile-time constant values are initialized first. This also applies to such fields in interfaces <a href="9_3_1.htm#40720">(&#167;9.3.1)</a>. These variables are "constants" that will never be observed to have their default initial values <a href="4_5_4.htm#10931">(&#167;4.5.4)</a>, even by devious programs. See <a href="12_4_2.htm#44630">&#167;12.4.2</a> and <a href="13_4_8.htm#45139">&#167;13.4.8</a> for more discussion.)<p>
<a name="38013"></a>
<h4>8.3.2.2	 Initializers for Instance Variables</h4>
<p>
<a name="30374"></a>
A compile-time error occurs if an initialization expression for an instance variable 
contains a use by a simple name of that instance variable or of another instance 
variable whose declaration occurs to its right (that is, textually later) in the same 
class. Thus:
<p><pre><a name="27881"></a>
class Test {
<a name="27882"></a>	float f = j;
<a name="27883"></a>	int j = 1;
<a name="37876"></a>	int k = k+1;
<a name="27884"></a>}
</pre><p><a name="27885"></a>
causes two compile-time errors, because <code>j</code> is referred to in the initialization of <code>f</code> 
before <code>j</code> is declared and because the initialization of <code>k</code> refers to <code>k</code> itself.
<p><a name="37982"></a>
Initialization expressions for instance variables may use the simple name of any <code>static</code> variable declared in or inherited by the class, even one whose declaration occurs textually later. Thus the example:<p>
<pre><a name="37983"></a>
class Test {
<a name="37984"></a>	float f = j;
<a name="37985"></a>	static int j = 1;
<a name="37987"></a>}
</pre><p><a name="37988"></a>
compiles without error; it initializes <code>j</code> to <code>1</code> when class <code>Test</code> is initialized, and initializes <code>f</code> to the current value of <code>j</code> every time an instance of class <code>Test</code> is created.
<p><a name="40409"></a>
Initialization expressions for instance variables are permitted to refer to the current object <code>this</code> <a href="15_7_2.htm#31980">(&#167;15.7.2)</a> and to use the keyword <code>super</code> (<a href="15_10_2.htm#20860">&#167;15.10.2</a>, <a href="15_11.htm#20448">&#167;15.11</a>).<p>


</Font></body></html>

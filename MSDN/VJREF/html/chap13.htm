</Font></body></html>
<html>
<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>13. Binary Compatibility</title>
<META NAME=MS-HAID CONTENT="chap13">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
</head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"> 
<hr><br>
 
<p><strong>
CHAPTER
 13 </strong></p>

<h1> Binary Compatibility</h1>
<a name="44872"></a>
<p>
<a name="44871"></a>
<a name="44873"></a>
<p>
<a name="44874"></a>
Java development tools should support automatic recompilation as necessary 
whenever source code is available. Particular implementations of Java may also 
store the source and binary of types in a versioning database and implement a 
<code>ClassLoader</code> <a href="20_14.htm#14462">(&#167;20.14)</a> that uses integrity mechanisms of the database to prevent 
linkage errors by providing binary-compatible versions of types to clients.
<p><a name="44878"></a>
Developers of packages and classes that are to be widely distributed face a different set of problems. In the Internet, which is our favorite example of a widely distributed system, it is often impractical or impossible to automatically recompile the pre-existing binaries that directly or indirectly depend on a type that is to be changed. Instead, Java defines a set of changes that developers are permitted to make to a package or to a class or interface type while preserving (not breaking) compatibility with existing binaries.<p>
<a name="44879"></a>
The paper quoted above appears in <i>Proceedings of OOPSLA '95</i>, published as <i>ACM SIGPLAN Notices</i>, Volume 30, Number 10, October 1995, pages 426-438. Within the framework of that paper, Java binaries are binary (release-to-release) compatible under all relevant transformations that the authors identify. Using their scheme, here is a list of some important binary compatible changes that Java supports:<p>
<ul><a name="44880"></a>
<li>Reimplementing existing methods, constructors, and initializers to improve performance.
<a name="44881"></a>
<li>Changing methods or constructors to return values on inputs for which they previously either threw exceptions that normally should not occur or failed by going into an infinite loop or causing a deadlock.
<a name="44882"></a>
<li>Adding new fields, methods, or constructors to an existing class or interface.
<a name="44883"></a>
<li>Deleting <code>private</code> fields, methods, or constructors of a class or interface.
<a name="44884"></a>
<li>When an entire package is updated, deleting default (package-only) access fields, methods, or constructors of classes and interfaces in the package.
<a name="44885"></a>
<li>Reordering the fields, methods, or constructors in an existing type declaration.
<a name="44886"></a>
<li>Moving a method upward in the class hierarchy, provided a forwarding method is left in its place.
<a name="44887"></a>
<li>Reordering the list of direct superinterfaces of a class or interface.
<a name="44888"></a>
<li>Inserting new class or interface types in the type hierarchy.
</ul><p><a name="44889"></a>
This chapter specifies minimum standards for binary compatibility guaranteed by all Java implementations. Java guarantees compatibility when binaries of classes and interfaces are mixed that are not known to be from compatible sources, but whose sources have been modified in the compatible ways described here.<p>
<a name="44891"></a>
We encourage Java development systems to provide facilities that alert developers to the impact of changes on pre-existing binaries that cannot be recompiled.<p>
<a name="44892"></a>
This chapter first specifies some properties that any Java binary format must have <a href="13_1.htm#44909">(&#167;13.1)</a>. It next defines binary compatibility, explaining what it is and what it is not <a href="13_2.htm#44952">(&#167;13.2)</a>. It finally enumerates a large set of possible changes to packages <a href="13_3.htm#47338">(&#167;13.3)</a>, classes <a href="13_4.htm#44977">(&#167;13.4)</a> and interfaces <a href="13_5.htm#45337">(&#167;13.5)</a>, specifying which changes are guaranteed to preserve binary compatibility and which are not.<p>


</Font></body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>11.3.2 Handling Asynchronous Exceptions</title>
<META NAME=MS-HAID CONTENT="11_3_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>11.3.2	 Handling Asynchronous Exceptions</h3>
<a name="44202"></a>
<p>
<a name="44203"></a>
Most exceptions in Java occur synchronously as a result of an action by the thread 
in which they occur, and at a point in the Java program that is specified to possibly 
result in such an exception. An asynchronous exception is, by contrast, an exception that can potentially occur at any point in the execution of a Java program.
<p><a name="47137"></a>
Asynchronous exceptions are rare in Java. They occur only as a result of:<p>
<ul><a name="44205"></a>
<li>An invocation of the <code>stop</code> methods of class <code>Thread</code> (<a href="20_20.htm#8095">&#167;20.20.15</a>, <a href="20_20.htm#8096">&#167;20.20.16</a>) or <code>ThreadGroup</code> (<a href="20_21.htm#2885">&#167;20.21.8</a>, <a href="20_21.htm#2886">&#167;20.21.9</a>)
<a name="44209"></a>
<li>An <code>InternalError</code> <a href="11_5_2.htm#44395">(&#167;11.5.2.2)</a> in the Java Virtual Machine
</ul><p><a name="44210"></a>
The <code>stop</code> methods may be invoked by one thread to affect another thread or all the 
threads in a specified thread group. They are asynchronous because they may 
occur at any point in the execution of the other thread or threads. An 
<code>InternalError</code> &#32;is considered asynchronous so that it may be handled using the 
same mechanism that handles the <code>stop</code> method, as will now be described.
<p><a name="44211"></a>
Java permits a small but bounded amount of execution to occur before an asynchronous exception is thrown. This delay is permitted to allow optimized code to detect and throw these exceptions at points where it is practical to handle them while obeying the semantics of the Java language.<p>
<a name="44212"></a>
A simple implementation might poll for asynchronous exceptions at the point of each control transfer instruction. Since a Java program has a finite size, this provides a bound on the total delay in detecting an asynchronous exception. Since no asynchronous exception will occur between control transfers, the code generator has some flexibility to reorder computation between control transfers for greater performance.<p>
<a name="46637"></a>
The paper <i>Polling Efficiently on Stock Hardware </i>by Mark Feeley, <i>Proc. 1993 Conference on Functional Programming and Computer Architecture</i>, Copenhagen, Denmark, pp. 179-187, is recommended as further reading.<p>
<a name="44216"></a>
Like all exceptions, asynchronous exceptions are precise <a href="11_3_1.htm#44199">(&#167;11.3.1)</a>.<p>


</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>8.4.7 Overloading</title>
<META NAME=MS-HAID CONTENT="8_4_7">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>8.4.7	 Overloading</h3>
<a name="227768"></a>
<p>
<a name="39587"></a>
If two methods of a class (whether both declared in the same class, or both inherited by a class, or one declared and one inherited) have the same name but different signatures, then the method name is said to be <i>overloaded</i>. This fact causes no 
difficulty and never of itself results in a compile-time error. There is no required 
relationship between the return types or between the <code>throws</code> clauses of two methods with the same name but different signatures.
<p><a name="39909"></a>
Methods are overridden on a signature-by-signature basis. If, for example, a class declares two <code>public</code> methods with the same name, and a subclass overrides one of them, the subclass still inherits the other method. In this respect, Java differs from C++.<p>
<a name="39591"></a>
When a method is invoked <a href="15_11.htm#20448">(&#167;15.11)</a>, the number of actual arguments and the compile-time types of the arguments are used, at compile time, to determine the signature of the method that will be invoked <a href="15_11_2.htm#21693">(&#167;15.11.2)</a>. If the method that is to be invoked is an instance method, the actual method to be invoked will be determined at run time, using dynamic method lookup <a href="15_11_4.htm#45677">(&#167;15.11.4)</a>.<p>


</Font></body></html>

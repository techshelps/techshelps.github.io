<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.6.1 Unary Numeric Promotion</title>
<META NAME=MS-HAID CONTENT="5_6_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>5.6.1	 Unary Numeric Promotion</h3>
<a name="170952"></a>
<p>
<a name="170954"></a>
Some operators apply <i>unary numeric promotion</i> to a single operand, which must 
produce a value of a numeric type:
<p><ul><a name="20278"></a>
<li>If the operand is of compile-time type <code>byte</code>, <code>short</code>, or <code>char</code>, unary numeric promotion promotes it to a value of type <code>int</code> by a widening conversion <a href="5_1_2.htm#25222">(&#167;5.1.2)</a>.
<a name="20279"></a>
<li>Otherwise, a unary numeric operand remains as is and is not converted.
</ul><p><a name="23183"></a>
Unary numeric promotion is performed on expressions in the following situations:
<p><ul><a name="175745"></a>
<li>The dimension expression in array creations <a href="15_9.htm#46168">(&#167;15.9)</a>
<a name="23187"></a>
<li>The index expression in array access expressions <a href="15_12.htm#239587">(&#167;15.12)</a>
<a name="170969"></a>
<li>Operands of the unary operators plus <code>+</code> <a href="15_14_3.htm#24924">(&#167;15.14.3)</a> and minus <code>-</code> <a href="15_14_4.htm#236345">(&#167;15.14.4)</a>
<a name="170977"></a>
<li>The operand of the bitwise complement operator <code>~</code> <a href="15_14_5.htm#5017">(&#167;15.14.5)</a>
<a name="170981"></a>
<li>Each operand, separately, of the shift operators <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, and <code>&lt;&lt;</code> <a href="15_18.htm#5121">(&#167;15.18)</a>, so that a <code>long</code> shift distance (right operand) does not promote the value being shifted (left operand) to <code>long</code>
</ul><p><a name="53322"></a>
Here is a test program that includes examples of unary numeric promotion:
<p><pre><a name="7300"></a>
class Test {
<a name="13473"></a>	public static void main(String[] args) {
<a name="13474"></a>		byte b = 2;
<a name="47059"></a>		int a[] = new int[b];							// dimension expression promotion
<a name="47060"></a>		char c = '\u0001';
<a name="47061"></a>		a[c] = 1;							// index expression promotion
<a name="13490"></a>		a[0] = -c;							// unary - promotion
<a name="17404"></a>		System.out.println("a: " + a[0] + "," + a[1]);
<a name="13522"></a>
		b = -1;
<a name="39072"></a>		int i = ~b;							// bitwise complement promotion
<a name="17405"></a>		System.out.println("~0x" + Integer.toHexString(b)
<a name="174297"></a>							+ "==0x" + Integer.toHexString(i));
<a name="13523"></a>
		i = b &lt;&lt; 4L;							// shift promotion (left operand)
<a name="17411"></a>		System.out.println("0x" + Integer.toHexString(b)
<a name="174298"></a>					 + "&lt;&lt;4L==0x" + Integer.toHexString(i));
<a name="13525"></a>	}
<a name="13526"></a>}
</pre><p><a name="30172"></a>
This test program produces the output:
<p><pre><a name="39118"></a>
a: -1,1
<a name="39119"></a>~0xffffffff==0x0
<a name="30173"></a>0xffffffff&lt;&lt;4L==0xfffffff0
</pre><p>

</body></html>

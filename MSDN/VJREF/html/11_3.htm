<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>11.3 Handling of an Exception</title>
<META NAME=MS-HAID CONTENT="11_3">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>11.3	 Handling of an Exception</h2>
<a name="44153"></a>
<p>
<a name="44154"></a>
When an exception is thrown, control is transferred from the code that caused the 
exception to the nearest dynamically-enclosing <code>catch</code> clause of a <code>try</code> statement 
<a href="14_18.htm#79311">(&#167;14.18)</a> that handles the exception.
<p><a name="44158"></a>
A statement or expression is <i>dynamically enclosed</i> by a <code>catch</code> clause if it appears within the <code>try</code> block of the <code>try</code> statement of which the <code>catch</code> clause is a part, or if the caller of the statement or expression is dynamically enclosed by the <code>catch</code> clause.<p>
<a name="44159"></a>
The <i>caller</i> of a statement or expression depends on where it occurs:<p>
<ul><a name="44160"></a>
<li>If within a method, then the caller is the method invocation expression <a href="15_11.htm#20448">(&#167;15.11)</a> that was executed to cause the method to be invoked.
<a name="44164"></a>
<li>If within a constructor or the initializer for an instance variable, then the caller is the class instance creation expression <a href="15_8.htm#41147">(&#167;15.8)</a> or the method invocation of <code>newInstance</code> that was executed to cause an object to be created.
<a name="44168"></a>
<li>If within a static initializer or an initializer for a <code>static</code> variable, then the caller is the expression that used the class or interface so as to cause it to be initialized.
</ul><p><a name="44169"></a>
Whether a particular <code>catch</code> clause <i>handles</i> an exception is determined by comparing the class of the object that was thrown to the declared type of the parameter of the <code>catch</code> clause. The <code>catch</code> clause handles the exception if the type of its parameter is the class of the exception or a superclass of the class of the exception. Equivalently, a <code>catch</code> clause will catch any exception object that is an <code>instanceof</code> <a href="15_19_2.htm#80289">(&#167;15.19.2)</a> the declared parameter type.<p>
<a name="44173"></a>
The control transfer that occurs when an exception is thrown causes abrupt completion of expressions <a href="15_5.htm#79448">(&#167;15.5)</a> and statements <a href="14_1.htm#5894">(&#167;14.1)</a> until a <code>catch</code> clause is encountered that can handle the exception; execution then continues by executing the block of that <code>catch</code> clause. The code that caused the exception is never resumed.<p>
<a name="44180"></a>
If no <code>catch</code> clause handling an exception can be found, then the current thread (the thread that encountered the exception) is terminated, but only after all <code>finally</code> clauses have been executed and the method <code>uncaughtException</code> <a href="20_21.htm#2901">(&#167;20.21.31)</a> has been invoked for the <code>ThreadGroup</code> that is the parent of the current thread.<p>
<a name="44184"></a>
In situations where it is desirable to ensure that one block of code is always executed after another, even if that other block of code completes abruptly, a <code>try</code> statement with a <code>finally</code> clause <a href="14_18_2.htm#236653">(&#167;14.18.2)</a> may be used. If a <code>try</code> or <code>catch</code> block in a <code>try</code>-<code>finally</code> or <code>try</code>-<code>catch</code>-<code>finally</code> statement completes abruptly, then the <code>finally</code> clause is executed during propagation of the exception, even if no matching <code>catch</code> clause is ultimately found. If a <code>finally</code> clause is executed because of abrupt completion of a <code>try</code> block and the <code>finally</code> clause itself completes abruptly, then the reason for the abrupt completion of the <code>try</code> block is discarded and the new reason for abrupt completion is propagated from there.<p>
<a name="44188"></a>
The exact rules for abrupt completion and for the catching of exceptions are specified in detail with the specification of each statement in <a href="chap14.htm">&#167;14</a> and for expressions in <a href="chap15.htm">&#167;15</a> (especially <a href="15_5.htm#79448">&#167;15.5</a>).<p>


</body></html>

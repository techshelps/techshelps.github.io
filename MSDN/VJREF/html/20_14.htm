<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>20.14 The Class java.lang.ClassLoader</title>
<META NAME=MS-HAID CONTENT="20_14">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<a name="14462"></a>
<h1>20.14	 The Class java.lang.ClassLoader</h1>
<p>
<a name="28743"></a>
A class loader is an object that is responsible for loading classes. Given the name 
of a class, it should attempt to locate or generate data that constitutes a definition 
for the class. A typical strategy is to transform the name into a file name and then 
read a "class file" of that name from a file system.
<p><a name="28756"></a>
Every <code>Class</code> object contains a reference to the <code>ClassLoader</code> that defined it <a href="20_3.htm#13804">(&#167;20.3.7)</a>. Whenever executable Java code needs to use a class that has not yet been loaded, the <code>loadClass</code> method is invoked for the class loader of the class containing the code in question.<p>
<a name="36892"></a>
Class objects for array classes are not created by class loaders, but are created automatically as required by the Java runtime. The class loader for an array class, as returned by the <code>getClassLoader</code> method of class <code>Class</code> <a href="20_3.htm#13804">(&#167;20.3.7)</a>, is the same as the class loader for its element type; if the element type is a primitive type, then the array class has no class loader.<p>
<a name="28770"></a>
Class loaders may typically be used by security managers <a href="20_17.htm#14464">(&#167;20.17)</a> to indicate security domains: two classes may considered to be "friendly" or "related" to each other only if they were defined by the same class loader.<p>
<pre><a name="14059"></a>public abstract class <code><b>ClassLoader</b></code> {
<a name="3359"></a>	protected <code><b>ClassLoader</b></code>()<br>
		throws SecurityException;
<a name="28812"></a>	protected abstract Class <code><b>loadClass</b></code>(String name,
<a name="25729"></a>		 &#32; &#32; &#32;boolean resolve)<br>
		throws ClassNotFoundException;
<a name="3077"></a>	protected final Class <code><b>defineClass</b></code>(byte data[],
<a name="28873"></a>		 &#32; &#32; &#32;int offset, int length)<br>
		throws NullPointerException, IndexOutOfBoundsException,
<a name="28876"></a>			ClassFormatError;
<a name="3078"></a>	protected final void <code><b>resolveClass</b></code>(Class c);
<a name="3079"></a>	protected final Class <code><b>findSystemClass</b></code>(String name)<br>
		throws ClassNotFoundException;
<a name="3083"></a>}
</pre><p><a name="14060"></a>
<p><strong>20.14.1	</strong> <code>protected ClassLoader() throws SecurityException</code>
<p>
<a name="28792"></a>
This constructor is invoked for every newly created class loader. Because the class 
<code>ClassLoader</code> is <code>abstract</code>, it is not possible to create a new instance of the class 
<code>ClassLoader</code> itself; however, every constructor for a subclass of <code>ClassLoader</code> 
necessarily invokes this constructor, explicitly or implicitly, directly or indirectly.
<p><a name="28823"></a>
All this constructor does is to enforce a security check: if there is a security manager, its <code>checkCreateClassLoader</code> method <a href="20_17.htm#14108">(&#167;20.17.10)</a> is called.<p>
<a name="14061"></a>
<p><strong>20.14.2	</strong> <code>protected abstract Class loadClass(String name,<br> &#32; &#32; &#32;boolean link)<br>throws ClassNotFoundException</code>
<p>
<a name="28824"></a>
Every subclass of <code>ClassLoader</code> that is not itself abstract must provide an implementation of the method <code>loadClass</code>.
<p><a name="28825"></a>
The general contract of <code>loadClass</code> is that, given the <code>name</code> of a class, it either returns the <code>Class</code> object for the class or throws a <code>ClassNotFoundException</code>.<p>
<a name="28845"></a>
If a <code>Class</code> object is to be returned and <code>link</code> is <code>true</code>, then the <code>Class</code> object should be linked (<a href="12_3.htm#44487">&#167;12.3</a>, <a href="20_14.htm#28858">&#167;20.14.4</a>) before it is returned.<p>
<a name="35725"></a>
In most cases, it is wise for a subclass of <code>ClassLoader</code> <a href="20_14.htm#14462">(&#167;20.14)</a> to implement the <code>loadClass</code> method as a <code>synchronized</code> method.<p>
<a name="35720"></a>
<p>
<a name="14063"></a>
<p><strong>20.14.3	</strong> <code>protected final Class defineClass(byte data[],<br> &#32; &#32; &#32;int offset, int length)<br>throws NullPointerException,  &#32; &#32; &#32;IndexOutOfBoundsException, ClassFormatError</code>
<p>
<a name="14064"></a>
This method may be used by a class loader to define a new class.
<p><a name="28867"></a>
The bytes in the array <code>data</code> in positions <code>offset</code> through <code>offset+length-1</code> should have the format of a valid class file as defined by the <i>Java Virtual Machine Specification</i>.<p>
<a name="28878"></a>
If <code>data</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="28879"></a>
An <code>IndexOutOfBoundsException</code> is thrown if any of the following are true:<p>
<ul><a name="28880"></a>
<li><code>offset</code> is negative
<a name="28881"></a>
<li><code>length</code> is negative
<a name="28882"></a>
<li><code>offset+length</code> is greater than <code>data.length</code>
</ul><p><a name="28883"></a>
If the indicated bytes of <code>data</code> do not constitute a valid class definition, then a <code>ClassFormatError</code> is thrown. Otherwise, this method creates and returns a <code>Class</code> object as described by the data bytes<p>
<a name="28858"></a>
<p><strong>20.14.4	</strong> <code>protected final void resolveClass(Class c)<br>throws NullPointerException</code>
<p>
<a name="28889"></a>
This (misleadingly named) method may be used by a class loader to link (<a href="12_3.htm#44487">&#167;12.3</a>, 
<a href="20_14.htm#28858">&#167;20.14.4</a>) a class.
<p><a name="28905"></a>
If <code>c</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="28903"></a>
If the <code>Class</code> object <code>c</code> has already been linked, then this method simply returns.<p>
<a name="28912"></a>
Otherwise, the class is linked as described in <a href="12_3.htm#44487">&#167;12.3</a>.<p>
<a name="28911"></a>
<p>
<a name="14065"></a>
<p><strong>20.14.5	</strong> <code>protected final Class findSystemClass(String name)<br>throws ClassNotFoundException</code>
<p>
<a name="28925"></a>
This method may be used by a class loader to locate a class that has no class 
loader. This includes built-in classes such as <code>java.lang.Object</code>, as well as 
classes that the host implementation may keep in, for example, a local file system.
<p><a name="28929"></a>
Given the <code>name</code> of a class, this method, like the <code>loadClass</code> method, either returns the <code>Class</code> object for the class or throws a <code>ClassNotFoundException</code>.<p>


</body></html>

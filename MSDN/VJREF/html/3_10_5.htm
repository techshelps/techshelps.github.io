<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.10.5 String Literals</title>
<META NAME=MS-HAID CONTENT="3_10_5">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>3.10.5	 String Literals</h3>
<a name="101083"></a>
<p>
<a name="101084"></a>
A <i>string literal</i> consists of zero or more characters enclosed in double quotes. 
Each character may be represented by an escape sequence.
<p><a name="229653"></a>
A string literal is always of type <code>String</code> (<a href="4_3_3.htm#26992">&#167;4.3.3</a>, <a href="20_12.htm#14460">&#167;20.12</a>). A string literal always refers to the same instance <a href="4_3_1.htm#12028">(&#167;4.3.1)</a> of class <code>String</code>.<p>
<pre>
<i>StringLiteral:<br>
	<code>" </code>StringCharactersopt<code> "
</code></i>
<i>StringCharacters:<br>
	StringCharacter<br>
	StringCharacters<code> </code>StringCharacter
</i>
<i>StringCharacter:<br>
<code>	</code>InputCharacter but not <code>"</code> or <code>\<br>
	</code>EscapeSequence
</i></pre><p><a name="22983"></a>
The escape sequences are described in <a href="3_10_6.htm#101089">&#167;3.10.6</a>.
<p><a name="19350"></a>
As specified in <a href="3_4.htm#231571">&#167;3.4</a>, neither of the characters CR and LF is ever considered to be an <i>InputCharacter</i>; each is recognized as constituting a <i>LineTerminator</i>.<p>
<a name="21405"></a>
It is a compile-time error for a line terminator to appear after the opening <code>"</code> and before the closing matching <code>"</code>. A long string literal can always be broken up into shorter pieces and written as a (possibly parenthesized) expression using the string concatenation operator <code>+</code> <a href="15_17_1.htm#39990">(&#167;15.17.1)</a>.<p>
<a name="229156"></a>
The following are examples of string literals:<p>
<pre><a name="229157"></a>
"" 							// the empty string
<a name="229158"></a>"\""							// a string containing " alone
<a name="229159"></a>"This is a string"							// a string containing 16 characters
<br><a name="229160"></a>"This is a " +							// actually a string-valued constant expression,
<a name="229161"></a>	"two-line string"						//		formed from two string literals
</pre><p><a name="25884"></a>
Because Unicode escapes are processed very early, it is not correct to write <code>"\u000a"</code> for a string literal containing a single linefeed (LF); the Unicode escape <code>\u000a</code> is transformed into an actual linefeed in translation step 1 <a href="3_3.htm#100850">(&#167;3.3)</a> and the linefeed becomes a <i>LineTerminator</i> in step 2 <a href="3_4.htm#231571">(&#167;3.4)</a>, and so the string literal is not valid in step 3. Instead, one should write <code>"\n"</code> <a href="3_10_6.htm#101089">(&#167;3.10.6)</a>. Similarly, it is not correct to write <code>"\u000d"</code> for a string literal containing a single carriage return (CR). Instead use <code>"\r"</code>.<p>
<a name="19369"></a>
Each string literal is a reference <a href="4_3.htm#9317">(&#167;4.3)</a> to an instance (<a href="4_3_1.htm#12028">&#167;4.3.1</a>, <a href="12_5.htm#44670">&#167;12.5</a>) of class <code>String</code> (<a href="4_3_3.htm#26992">&#167;4.3.3</a>,<a href="20_12.htm#14460">&#167;20.12</a>). <code>String</code> objects have a constant value. String literals-or, more generally, strings that are the values of constant expressions <a href="15_27.htm#5313">(&#167;15.27)</a>-are "interned" so as to share unique instances, using the method <code>String.intern</code> <a href="20_12.htm#14026">(&#167;20.12.47)</a>.<p>
<a name="231331"></a>
Thus, the test program consisting of the compilation unit <a href="7_3.htm#40031">(&#167;7.3)</a>:<p>
<pre><br><a name="23253"></a>package testPackage;
<br></pre><p><pre><a name="229782"></a>
class Test {
<a name="23254"></a>	public static void main(String[] args) {
<a name="23255"></a>		String hello = "Hello", lo = "lo";
<a name="229801"></a>		System.out.print((hello == "Hello") + " ");
<a name="229787"></a>		System.out.print((Other.hello == hello) + " ");
<a name="229789"></a>		System.out.print((other.Other.hello == hello) + " ");
<a name="23837"></a>		System.out.print((hello == ("Hel"+"lo")) + " ");
<a name="23845"></a>		System.out.print((hello == ("Hel"+lo)) + " ");
<a name="23275"></a>		System.out.println(hello == ("Hel"+lo).intern());
<a name="23276"></a>	}
<a name="23260"></a>}
<br><a name="229785"></a>class Other { static String hello = "Hello"; }
</pre><p><a name="229778"></a>
and the compilation unit:
<p><pre><br><a name="229779"></a>package other;
<br><a name="229773"></a>public class Other { static String hello = "Hello"; }
<br></pre><p><a name="23261"></a>
produces the output:
<p><pre><a name="50713"></a>true true true true false true
</pre><p><a name="50715"></a>
This example illustrates six points:
<p><ul><a name="229805"></a>
<li>Literal strings within the same class <a href="chap08.htm">(&#167;8)</a> in the same package <a href="chap07.htm">(&#167;7)</a> represent references to the same <code>String</code> object <a href="4_3_1.htm#12028">(&#167;4.3.1)</a>.
<a name="229807"></a>
<li>Literal strings within different classes in the same package represent references to the same <code>String</code> object.
<a name="229797"></a>
<li>Literal strings within different classes in different packages likewise represent references to the same <code>String</code> object.
<a name="23858"></a>
<li>Strings computed by constant expressions <a href="15_27.htm#5313">(&#167;15.27)</a> are computed at compile time and then treated as if they were literals.
<a name="23859"></a>
<li>Strings computed at run time are newly created and therefore distinct.
<a name="23865"></a>
<li>The result of explicitly interning a computed string is the same string as any pre-existing literal string with the same contents.
</ul><p>

</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.5.5 Meaning of Expression Names</title>
<META NAME=MS-HAID CONTENT="6_5_5">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>6.5.5	 Meaning of Expression Names</h3>
<a name="21650"></a>
<p>
<a name="32767"></a>
The meaning of a name classified as an <i>ExpressionName</i> is determined as follows.
<p><a name="22022"></a>
<h4>6.5.5.1	 Simple Expression Names</h4>
<p>
<a name="22023"></a>
If an expression name consists of a single <i>Identifier</i>, then:
<p><ul><a name="22030"></a>
<li>If the <i>Identifier</i> appears within the scope <a href="6_3.htm#33623">(&#167;6.3)</a> of a local variable declaration <a href="14_3.htm#5920">(&#167;14.3)</a> or parameter declaration (<a href="8_4_1.htm#38698">&#167;8.4.1</a>, <a href="8_6_1.htm#29488">&#167;8.6.1</a>, <a href="14_18.htm#79311">&#167;14.18</a>) with that name, then the expression name denotes a variable, that is, that local variable or parameter. Local variables and parameters are never hidden (<a href="6_3.htm#33623">&#167;6.3</a>, <a href="6_3_1.htm#34133">&#167;6.3.1</a>, <a href="14_3.htm#5920">&#167;14.3</a>), so there is necessarily at most one such local variable or parameter. The type of the expression name is the declared type of the local variable or parameter.
<a name="22052"></a>
<li>Otherwise, if the <i>Identifier</i> appears within a class declaration <a href="chap08.htm">(&#167;8)</a>:
<ul>
<a name="22062"></a>
<li>If there is not exactly one member of that class <a href="8_2.htm#21831">(&#167;8.2)</a> that is a field with that name, then a compile-time error results.
<a name="22063"></a>
<li>Otherwise, if the single member field with that name is declared <code>final</code> <a href="8_3_1.htm#35962">(&#167;8.3.1.2)</a>, then the expression name denotes the value of the field. The type of the expression name is the declared type of the field. If the <i>Identifier</i> appears in a context that requires a variable and not a value, then a compile-time error occurs.
<a name="22077"></a>
<li>Otherwise, the expression name denotes a variable, the single member field with that name. The type of the expression name is the field's declared type.
</ul>
</ul>
<p>
<a name="60351"></a>
<p>If the field is an instance variable <a href="8_3_1.htm#37544">(&#167;8.3.1.1)</a>, the expression name must appear within the declaration of an instance method <a href="8_4.htm#40420">(&#167;8.4)</a>, constructor <a href="8_6.htm#41652">(&#167;8.6)</a>, or instance variable initializer <a href="8_3_2.htm#38013">(&#167;8.3.2.2)</a>. If it appears within a <code>static</code> method <a href="8_4_3.htm#229128">(&#167;8.4.3.2)</a>, static initializer <a href="8_5.htm#39245">(&#167;8.5)</a>, or initializer for a <code>static</code> variable (<a href="8_3_1.htm#37544">&#167;8.3.1.1</a>, <a href="12_4_2.htm#44630">&#167;12.4.2</a>), then a compile-time error occurs.
<p><ul><a name="60376"></a>
<li>Otherwise, the identifier appears within an interface declaration <a href="chap09.htm">(&#167;9)</a>:
<ul>
<a name="60380"></a>
<li>If there is not exactly one member of that interface <a href="9_2.htm#32392">(&#167;9.2)</a> that is a field with that name, then a compile-time error results.
<a name="32963"></a>
<li>Otherwise, the expression name denotes the value of the single member field of that name. The type of the expression name is the declared type of the field. If the <i>Identifier</i> appears in a context that requires a variable and not a value, then a compile-time error occurs.
</ul>
</ul><p><a name="22118"></a>
In the example:
<p><pre><a name="22119"></a>
class Test {
<br><a name="22120"></a>	static int v;
<br><br><a name="61612"></a>	static final int f = 3;
<br><a name="61613"></a>
	public static void main(String[] args) {
<a name="61614"></a>		int i;
<a name="22124"></a>		i = 1;
<a name="22125"></a>		v = 2;
<a name="22126"></a>		f = 33;										// compile-time error
<a name="22127"></a>		System.out.println(i + " " + v + " " + f);
<a name="22128"></a>	}
<br><a name="22129"></a>}
</pre><p><a name="22130"></a>
the names used as the left-hand-sides in the assignments to <code>i</code>, <code>v</code>, and <code>f</code> denote the 
local variable <code>i</code>, the field <code>v</code>, and the value of <code>f</code> (not the variable <code>f</code>, because <code>f</code> is a 
<code>final</code> variable). The example therefore produces an error at compile time 
because the last assignment does not have a variable as its left-hand side. If the 
erroneous assignment is removed, the modified code can be compiled and it will 
produce the output:
<p><pre><a name="22131"></a>1 2 3
</pre><p><a name="22133"></a>
<h4>6.5.5.2	 Qualified Expression Names</h4>
<p>
<a name="33085"></a>
If an expression name is of the form <i>Q</i><code>.</code><i>Id</i>, then <i>Q</i> has already been classified as a 
package name, a type name, or an expression name:
<p><ul><a name="22747"></a>
<li>If <i>Q</i> is a package name, then a compile-time error occurs.
<a name="22294"></a>
<li>If <i>Q</i> is a type name that names a class type <a href="chap08.htm">(&#167;8)</a>, then:
<ul>
<a name="22298"></a>
<li>If there is not exactly one accessible <a href="6_6.htm#33916">(&#167;6.6)</a> member of the class type that is a field named <i>Id</i>, then a compile-time error occurs.
<a name="22299"></a>
<li>Otherwise, if the single accessible member field is not a class variable (that is, it is not declared <code>static</code>), then a compile-time error occurs.
<a name="41289"></a>
<li>Otherwise, if the class variable is declared <code>final</code>, then <i>Q</i><code>.</code><i>Id</i> denotes the value of the class variable. The type of the expression <i>Q</i><code>.</code><i>Id</i> is the declared type of the class variable. If <i>Q</i><code>.</code><i>Id</i> appears in a context that requires a variable and not a value, then a compile-time error occurs.
<a name="22303"></a>
<li>Otherwise, <i>Q</i><code>.</code><i>Id</i> denotes the class variable. The type of the expression <i>Q</i><code>.</code><i>Id</i> is the declared type of the class variable.
</ul>
<a name="22145"></a>
<li>If <i>Q</i> is a type name that names an interface type <a href="chap09.htm">(&#167;9)</a>, then:
<ul>
<a name="33167"></a>
<li>If there is not exactly one accessible <a href="6_6.htm#33916">(&#167;6.6)</a> member of the interface type that is a field named <i>Id</i>, then a compile-time error occurs.
<a name="33169"></a>
<li>Otherwise, <i>Q</i><code>.</code><i>Id</i> denotes the value of the field. The type of the expression <i>Q</i><code>.</code><i>Id</i> is the declared type of the field. If <i>Q</i><code>.</code><i>Id</i> appears in a context that requires a variable and not a value, then a compile-time error occurs.
</ul>
<a name="22165"></a>
<li>If <i>Q</i> is an expression name, let <i>T</i> be the type of the expression <i>Q</i>:
<ul>
<a name="22169"></a>
<li>If <i>T</i> is not a reference type, a compile-time error occurs.
<a name="33185"></a>
<li>If there is not exactly one accessible <a href="6_6.htm#33916">(&#167;6.6)</a> member of the type <i>T</i> that is a field named <i>Id</i>, then a compile-time error occurs.
<a name="22170"></a>
<li>Otherwise, if this field is any of the following:
<ul>
<a name="33204"></a>
<li>A field of an interface type
<a name="33205"></a>
<li>A <code>final</code> field of a class type (which may be either a class variable or an instance variable)
<a name="33208"></a>
<li>The <code>final</code> field <code>length</code> of an array type
<a name="33211"></a>
	 then <i>Q</i><code>.</code><i>Id</i> denotes the value of the field. The type of the expression <i>Q</i><code>.</code><i>Id</i> is the declared type of the field. If <i>Q</i><code>.</code><i>Id</i> appears in a context that requires a variable and not a value, then a compile-time error occurs.<p>
</ul>
<a name="22173"></a>
<li>Otherwise, <i>Q</i><code>.</code><i>Id</i> denotes a variable, the field <i>Id</i> of class <i>T</i>, which may be either a class variable or an instance variable. The type of the expression <i>Q</i><code>.</code><i>Id</i> is the declared type of the field
</ul>
</ul><p><a name="62391"></a>
The example:
<p><pre><a name="22175"></a>
class Point {
<a name="22176"></a>	int x, y;
<a name="22177"></a>	static int nPoints;
<a name="22178"></a>}
<a name="22179"></a>
class Test {
<a name="22180"></a>	public static void main(String[] args) {
<a name="22181"></a>		int i = 0;
<a name="22182"></a>		i.x++;								// compile-time error
<a name="22183"></a>		Point p = new Point();
<a name="22184"></a>		p.nPoints();								// compile-time error
<a name="22185"></a>	}
<a name="22186"></a>}
</pre><p><a name="22187"></a>
encounters two compile-time errors, because the <code>int</code> variable <code>i</code> has no members, 
and because <code>nPoints</code> is not a method of class <code>Point</code>.
<p>

</Font></body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>15.16.3 Remainder Operator %</title>
<META NAME=MS-HAID CONTENT="15_16_3">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>15.16.3	 Remainder Operator %</h3>
<a name="24956"></a>
<p>
<a name="45771"></a>
<p><i>And on the pedestal these words appear:<br>
<a name="45794"></a>
"My name is Ozymandias, king of kings:<br>
<a name="45776"></a>
Look on my works, ye Mighty, and despair!"<br>
<a name="45775"></a>
Nothing beside remains.</i><br>
<a name="45778"></a>
&#151;Percy Bysshe Shelley, <i>Ozymandias</i> (1817)</p>
<a name="24958"></a>
<p>The binary <code>%</code> operator is said to yield the remainder of its operands from an 
implied division; the left-hand operand is the dividend and the right-hand operand 
is the divisor.
<p><a name="40092"></a>
In C and C++, the remainder operator accepts only integral operands, but in Java, it also accepts floating-point operands.<p>
<a name="15723"></a>
The remainder operation for operands that are integers after binary numeric promotion <a href="5_6_2.htm#170983">(&#167;5.6.2)</a> produces a result value such that <code>(a/b)*b+(a%b)</code> is equal to <code>a</code>. This identity holds even in the special case that the dividend is the negative integer of largest possible magnitude for its type and the divisor is <code>-1</code> (the remainder is <code>0</code>). It follows from this rule that the result of the remainder operation can be negative only if the dividend is negative, and can be positive only if the dividend is positive; moreover, the magnitude of the result is always less than the magnitude of the divisor. If the value of the divisor for an integer remainder operator is <code>0</code>, then an <code>ArithmeticException</code> is thrown.<p>
<a name="40096"></a>
Examples:<p>
<pre><a name="40099"></a>
5%3 produces 2		(note that 5/3 produces 1)
<a name="40103"></a>5%(-3) produces 2		(note that 5/(-3) produces -1)
<a name="40107"></a>(-5)%3 produces -2		(note that (-5)/3 produces -1)
<a name="40111"></a>(-5)%(-3) produces -2		(note that (-5)/(-3) produces 1)
</pre><p><a name="5067"></a>
The result of a floating-point remainder operation as computed by the <code>%</code> operator is <i>not</i> the same as that produced by the remainder operation defined by IEEE 754. The IEEE 754 remainder operation computes the remainder from a rounding division, not a truncating division, and so its behavior is <i>not</i> analogous to that of the usual integer remainder operator. Instead, the Java language defines <code>%</code> on floating-point operations to behave in a manner analogous to that of the Java integer remainder operator; this may be compared with the C library function <code>fmod</code>. The IEEE 754 remainder operation may be computed by the Java library routine <code>Math.IEEEremainder</code> <a href="20_11.htm#13956">(&#167;20.11.14)</a>.<p>
<a name="5068"></a>
The result of a Java floating-point remainder operation is determined by the rules of IEEE arithmetic:<p>
<ul><a name="5069"></a>
<li>If either operand is NaN, the result is NaN.
<a name="5070"></a>
<li>If the result is not NaN, the sign of the result equals the sign of the dividend.
<a name="5071"></a>
<li>If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.
<a name="5072"></a>
<li>If the dividend is finite and the divisor is an infinity, the result equals the dividend.
<a name="5073"></a>
<li>If the dividend is a zero and the divisor is finite, the result equals the dividend.
<a name="5074"></a>
<li>In the remaining cases, where neither an infinity, nor a zero, nor NaN is involved, the floating-point remainder <i>r</i> from the division of a dividend <i>n</i> by a divisor <i>d</i> is defined by the mathematical relation <img src="15anc6.gif"> where <i>q</i> is an integer that is negative only if <img src="15anc7.gif"> is negative and positive only if <img src="15anc8.gif"> is positive, and whose magnitude is as large as possible without exceeding the magnitude of the true mathematical quotient of <i>n</i> and <i>d</i>.
</ul><p><a name="5084"></a>
Evaluation of a floating-point remainder operator <code>%</code> never throws a run-time exception, even if the right-hand operand is zero. Overflow, underflow, or loss of precision cannot occur.<p>
<a name="40146"></a>
Examples:<p>
<pre><a name="40147"></a>
5.0%3.0 produces 2.0
<a name="40148"></a>5.0%(-3.0) produces 2.0
<a name="40149"></a>(-5.0)%3.0 produces -2.0
<a name="40150"></a>(-5.0)%(-3.0) produces -2.0
</pre><p>

</body></html>

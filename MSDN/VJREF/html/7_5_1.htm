<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>7.5.1 Single-Type-Import Declaration</title>
<META NAME=MS-HAID CONTENT="7_5_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>7.5.1	 Single-Type-Import Declaration</h3>
<a name="26699"></a>
<p>
<a name="13275"></a>
A <i>single-type-import declaration </i>imports a single type by giving its fully qualified 
name, making it available under a simple name in the class and interface declarations of its compilation unit.
<p><pre>
<i>SingleTypeImportDeclaration:<br>
<code>	import </code>TypeName<code> ;
</code></i></pre><p><a name="29086"></a>
The <i>TypeName</i> must be the fully qualified name of a class or interface type; a 
compile-time error occurs if the named type does not exist. If the named type is 
not in the current package, then it must be accessible <a href="6_6.htm#33916">(&#167;6.6)</a>-in an accessible 
package and declared <code>public</code> (<a href="8_1_2.htm#21613">&#167;8.1.2</a>, <a href="9_1_2.htm#235947">&#167;9.1.2</a>)-or a compile-time error occurs.
<p><a name="37971"></a>
The example:<p>
<pre><a name="26702"></a>import java.util.Vector;
</pre><p><a name="45771"></a>
causes the simple name <code>Vector</code> to be available within the class and interface declarations in a compilation unit. Thus, the simple name <code>Vector</code> refers to the type 
<code>Vector</code> in the package <code>java.util</code> in all places where it is not hidden <a href="6_3.htm#33623">(&#167;6.3)</a> by a 
declaration of a field, parameter, or local variable with the same name.
<p><a name="29151"></a>
If two single-type-import declarations in the same compilation unit attempt to import types with the same simple name, then a compile-time error occurs, unless the two types are the same type, in which case the duplicate declaration is ignored. If another type with the same name is otherwise declared in the current compilation unit except by a type-import-on-demand declaration <a href="7_5_2.htm#26725">(&#167;7.5.2)</a>, then a compile-time error occurs. <p>
<a name="29134"></a>
So the sample program:<p>
<pre><br><a name="29135"></a>import java.util.Vector;
<br><a name="29136"></a>class Vector { Object[] vec; }
</pre><p><a name="29137"></a>
causes a compile-time error because of the duplicate declaration of <code>Vector</code>, as 
does:
<p><pre><br><a name="29138"></a>import java.util.Vector;
<br><a name="29139"></a>import myVector.Vector;
</pre><p><a name="29140"></a>
where <code>myVector</code> is a package containing the compilation unit:
<p><pre><br><a name="29141"></a>package myVector;
<br><a name="29142"></a>public class Vector { Object[] vec; }
</pre><p><a name="29113"></a>
The compiler keeps track of types by their fully qualified names <a href="6_7.htm#25430">(&#167;6.7)</a>. Simple names and fully qualified names may be used interchangeably whenever they are both available.<p>
<a name="60471"></a>
Note that an import statement cannot import a subpackage, only a type. For example, it does not work to try to import <code>java.util</code> and then use the name <code>util.Random</code> to refer to the type <code>java.util.Random</code>:<p>
<pre><br><a name="60474"></a>import java.util;										// incorrect: compile-time error
<br><a name="60475"></a>class Test { util.Random generator; }
</pre><p>

</Font></body></html>

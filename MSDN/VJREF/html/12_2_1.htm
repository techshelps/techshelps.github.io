<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>12.2.1 The Loading Process</title>
<META NAME=MS-HAID CONTENT="12_2_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>12.2.1	 The Loading Process</h3>
<a name="47907"></a>
<p>
<a name="44471"></a>
The loading process is implemented by the class <code>ClassLoader</code> <a href="20_14.htm#14462">(&#167;20.14)</a> and its 
subclasses. Different subclasses of <code>ClassLoader</code> may implement different loading policies. In particular, a class loader may cache binary representations of 
classes and interfaces, prefetch them based on expected usage, or load a group of 
related classes together. These activities may not be completely transparent to a 
running Java application if, for example, a newly compiled version of a class is 
not found because an older version is cached by a class loader. It is the responsibility of a class loader, however, to reflect loading errors only at points in the program they could have arisen without prefetching or group loading.
<p><a name="44476"></a>
If an error occurs during class loading, then an instance of one of the following subclasses of class <code>LinkageError</code> will be thrown at any point in the Java program that (directly or indirectly) uses the type:<p>
<ul><a name="44477"></a>
<li><code>ClassCircularityError</code>: A class or interface could not be loaded because it would be its own superclass or superinterface <a href="13_4_4.htm#44994">(&#167;13.4.4)</a>.
<a name="44481"></a>
<li><code>ClassFormatError</code>: The binary data that purports to specify a requested compiled class or interface is malformed.
<a name="44482"></a>
<li><code>NoClassDefFoundError</code>: No definition for a requested class or interface could be found by the relevant class loader.
</ul><p><a name="46207"></a>
Because loading involves the allocation of new data structures, it may fail with an <code>OutOfMemoryError</code>.<p>


</body></html>

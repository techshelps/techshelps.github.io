<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>20.13 The Class java.lang.StringBuffer</title>
<META NAME=MS-HAID CONTENT="20_13">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>20.13	 The Class java.lang.StringBuffer</h1>
<a name="14461"></a>
<p>
<a name="2616"></a>
A string buffer is like a <code>String</code> <a href="20_12.htm#14460">(&#167;20.12)</a>, but can be modified. At any point in 
time it contains some particular sequence of characters, but the length and content 
of the sequence can be changed through certain method calls.
<p><pre><a name="14027"></a>public class <code><b>StringBuffer</b></code> {
<a name="2985"></a>	public <code><b>StringBuffer</b></code>();
<a name="2986"></a>	public <code><b>StringBuffer</b></code>(int length)<br>
		throws NegativeArraySizeException;
<a name="2987"></a>	public <code><b>StringBuffer</b></code>(String str);
<a name="2988"></a>	public String <code><b>toString</b></code>();
<a name="2989"></a>	public int <code><b>length</b></code>();
<a name="3023"></a>	public void <code><b>setLength</b></code>(int newLength)
<a name="5141"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="2990"></a>	public int <code><b>capacity</b></code>();
<a name="2991"></a>	public void <code><b>ensureCapacity</b></code>(int minimumCapacity);
<a name="2993"></a>	public char <code><b>charAt</b></code>(int index)
<a name="5136"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="5680"></a>	public void <code><b>setCharAt</b></code>(int index, char ch)
<a name="5681"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="2994"></a>	public void <code><b>getChars</b></code>(int srcBegin, int srcEnd,
<a name="5129"></a>			char[] dst, int dstBegin)<br>
		throws NullPointerException, <code>IndexOutOfBoundsException</code>;
<a name="2996"></a>	public StringBuffer <code><b>append</b></code>(Object obj);
<a name="2997"></a>	public StringBuffer <code><b>append</b></code>(String str);
<a name="2998"></a>	public StringBuffer <code><b>append</b></code>(char[] str)
<a name="25589"></a>		throws NullPointerException;
<a name="2999"></a>	public StringBuffer <code><b>append</b></code>(char[] str, int offset, int len)
<a name="25572"></a>		throws NullPointerException, <code>IndexOutOfBoundsException</code>;
<a name="3000"></a>	public StringBuffer <code><b>append</b></code>(boolean b);
<a name="3001"></a>	public StringBuffer <code><b>append</b></code>(char c);
<a name="3002"></a>	public StringBuffer <code><b>append</b></code>(int i);
<a name="3003"></a>	public StringBuffer <code><b>append</b></code>(long l);
<a name="3004"></a>	public StringBuffer <code><b>append</b></code>(float f);
<a name="3005"></a>	public StringBuffer <code><b>append</b></code>(double d);
<a name="5147"></a>	public StringBuffer <code><b>insert</b></code>(int offset, Object obj)
<a name="3006"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="5152"></a>	public StringBuffer <code><b>insert</b></code>(int offset, String str)
<a name="3007"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="5157"></a>	public StringBuffer <code><b>insert</b></code>(int offset, char[] str)
<a name="3008"></a>		throws NullPointerException, <code>IndexOutOfBoundsException</code>;
<a name="5162"></a>	public StringBuffer <code><b>insert</b></code>(int offset, boolean b)
<a name="3009"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="5167"></a>	public StringBuffer <code><b>insert</b></code>(int offset, char c)
<a name="3010"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="5172"></a>	public StringBuffer <code><b>insert</b></code>(int offset, int i)
<a name="3011"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="5177"></a>	public StringBuffer <code><b>insert</b></code>(int offset, long l)
<a name="3012"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="5182"></a>	public StringBuffer <code><b>insert</b></code>(int offset, float f)
<a name="3013"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="5187"></a>	public StringBuffer <code><b>insert</b></code>(int offset, double d)
<a name="3014"></a>		throws <code>IndexOutOfBoundsException</code>;
<a name="30697"></a>	public StringBuffer <code><b>reverse</b></code>();
<a name="30699"></a>}
</pre><p><a name="4964"></a>
A string buffer has a <i>capacity</i>. As long as the length of the character sequence contained in the string buffer does not exceed the capacity, it is not necessary to create a new internal buffer array.<p>
<a name="5017"></a>
String buffers are safe for use by multiple threads. The methods are synchronized where necessary so that all the operations on any particular instance behave as if they occur in some serial order that is consistent with the order of the method calls made by each of the individual threads involved.<p>
<a name="4965"></a>
String buffers can be used by a compiler to implement the binary string concatenation operator <code>+</code> <a href="15_17_1.htm#39990">(&#167;15.17.1)</a>. For example, suppose <code>k</code> has type <code>int</code> and <code>a</code> has type <code>Object</code>. Then the expression:<p>
<pre><a name="4966"></a><code>k + "/" + a
</code></pre><p><a name="4967"></a>
can be compiled as if it were the expression:<p>
<pre><a name="4968"></a>new StringBuffer().append(k).append("/").<br>
										append(a).toString()
</pre><p><a name="4975"></a>
which creates a new string buffer (initially empty), appends the string representation of each operand to the string buffer in turn, and then converts the contents of the string buffer to a string. Overall, this avoids creating many temporary strings.<p>
<a name="5233"></a>
The principal operations on a <code>StringBuffer</code> are the <code>append</code> and <code>insert</code> methods, which are overloaded so as to accept data of any type. Each effectively converts a given datum to a string and then adds the characters of that string to the contents of the string buffer. The <code>append</code> method always adds these characters at the end of the buffer; the <code>insert</code> method adds the characters at a specified point.<p>
<a name="30693"></a>
For example, if <code>z</code> refers to a string buffer object whose current contents are the characters "<code>start</code>", then the method call <code>z.append("le")</code> would alter the string buffer to contain the characters "<code>startle</code>", but <code>z.insert(4, "le")</code> would alter the string buffer to contain the characters "<code>starlet</code>".<p>
<a name="5240"></a>
In general, if <code>sb</code> refers to an instance of a <code>StringBuffer</code>, then <code>sb.append(x)</code> has the same effect as <code>sb.insert(sb.length(), x)</code>.<p>
<a name="14028"></a>
<p><strong>20.13.1	</strong> <code>public StringBuffer()</code>
<p>
<a name="5006"></a>
This constructor initializes a newly created <code>StringBuffer</code> object so that it initially represents an empty character sequence and has capacity 16.
<p><a name="14029"></a>
<p><strong>20.13.2	</strong> <code>public StringBuffer(int length)<br>throws NegativeArraySizeException</code>
<p>
<a name="5019"></a>
This constructor initializes a newly created <code>StringBuffer</code> object so that it initially represents an empty character sequence, but has the capacity specified by 
the argument.
<p><a name="5031"></a>
If the argument is negative, a <code>NegativeArraySizeException</code> is thrown.<p>
<a name="14030"></a>
<p><strong>20.13.3	</strong> <code>public StringBuffer(String str)</code>
<p>
<a name="5010"></a>
This constructor initializes a newly created <code>StringBuffer</code> object so that it represents the same sequence of characters as the argument; in other words, the initial 
contents of the string buffer is a copy of the argument string. The initial capacity 
of the string buffer is 16 plus the length of the argument string.
<p><a name="2620"></a>
<p><strong>20.13.4	</strong> <code>public String toString()</code>
<p>
<a name="5039"></a>
A new <code>String</code> object is created and initialized to contain the character sequence 
currently represented by the string buffer; the new <code>String</code> is then returned. Any 
subsequent changes to the string buffer do not affect the contents of the returned 
string.
<p><a name="5043"></a>
Implementation advice: This method can be coded so as to create a new <code>String</code> object without allocating new memory to hold a copy of the character sequence. Instead, the string can share the memory used by the string buffer. Any subsequent operation that alters the content or capacity of the string buffer must then make a copy of the internal buffer at that time. This strategy is effective for reducing the amount of memory allocated by a string concatenation operation <a href="15_17_1.htm#39990">(&#167;15.17.1)</a> when it is implemented using a string buffer.<p>
<a name="5050"></a>
Overrides the <code>toString</code> method of <code>Object</code> <a href="20_1.htm#1152">(&#167;20.1.2)</a>.<p>
<a name="14031"></a>
<p><strong>20.13.5	</strong> <code>public int length()</code>
<p>
<a name="5054"></a>
This method returns the length of the sequence of characters currently represented 
by this <code>StringBuffer</code> object.
<p><a name="14032"></a>
<p><strong>20.13.6	</strong> <code>public int capacity()</code>
<p>
<a name="5057"></a>
The current capacity of this <code>StringBuffer</code> object is returned.
<p><a name="14034"></a>
<p><strong>20.13.7	</strong> <code>public void ensureCapacity(int minimumCapacity)</code>
<p>
<a name="5058"></a>
If the current capacity of this <code>StringBuffer</code> object is less than the argument, then 
a new internal buffer is created with greater capacity. The new capacity will be the 
larger of:
<p><ul><a name="5073"></a>
<li>the <code>minimumCapacity</code> argument
<a name="5074"></a>
<li>twice the old capacity, plus <code>2</code>
</ul><p><a name="5081"></a>
If the <code>minimumCapacity</code> argument is nonpositive, this method takes no action and simply returns.<p>
<a name="5075"></a>
<p><strong>20.13.8	</strong> <code>public void setLength(int newLength)<br>throws IndexOutOfBoundsException</code>
<p>
<a name="5082"></a>
This string buffer is altered to represent a new character sequence whose length is 
specified by the argument. For every nonnegative index <i>k</i> less than <code>newLength</code>, 
the character at index <i>k</i> in the new character sequence is the same as the character 
at index <i>k</i> in the old sequence if <i>k</i> is less than the length of the old character 
sequence; otherwise, it is the null character <code>'\u0000'</code>. This method also calls the 
<code>ensureCapacity</code> method <a href="20_13.htm#14034">(&#167;20.13.7)</a> with argument <code>newLength</code>.
<p><a name="5087"></a>
If the argument is negative, an <code>IndexOutOfBoundsException</code> is thrown.<p>
<a name="14036"></a>
<p><strong>20.13.9	</strong> <code>public char charAt(int index)<br>throws IndexOutOfBoundsException</code>
<p>
<a name="5106"></a>
The specified character of the sequence currently represented by the string buffer, 
as indicated by the <code>index</code> argument, is returned. The first character of the 
sequence is at index <code>0</code>, the next at index <code>1</code>, and so on, as for array indexing.
<p><a name="5654"></a>
If the <code>index</code> argument is negative or not less than the current length <a href="20_13.htm#14031">(&#167;20.13.5)</a> of the string buffer, an <code>IndexOutOfBoundsException</code> is thrown.<p>
<a name="14038"></a>
<p><strong>20.13.10	</strong> <code>public void setCharAt(int index, char ch)<br>throws IndexOutOfBoundsException</code>
<p>
<a name="5647"></a>
The string buffer is altered to represent a new character sequence that is identical 
to the old character sequence, except that it contains the character <code>ch</code> at position 
<code>index</code>.
<p><a name="25561"></a>
If the <code>index</code> argument is negative or not less than the current length <a href="20_13.htm#14031">(&#167;20.13.5)</a> of the string buffer, an <code>IndexOutOfBoundsException</code> is thrown.<p>
<a name="33349"></a>
<p><strong>20.13.11	</strong> <code>public void getChars(int srcBegin, int srcEnd,<br> &#32; &#32; &#32;char[] dst, int dstBegin)<br>throws NullPointerException, <br> &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="5668"></a>
Characters are copied from this <code>StringBuffer</code> object into the destination array 
<code>dst</code>. The first character to be copied is at index <code>srcBegin</code>; the last character to be 
copied is at index <code>srcEnd-1</code> (thus, the total number of characters to be copied is 
<code>srcEnd-srcBegin</code>). The characters are copied into the subarray of <code>dst</code> starting at 
index <code>dstBegin</code> and ending at index <code>dstbegin+(srcEnd-srcBegin)-1</code>.
<p><a name="25644"></a>
If <code>dst</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="25655"></a>
Otherwise, if any of the following is true, an <code>IndexOutOfBoundsException</code> is thrown and the destination is not modified:<p>
<ul><a name="25656"></a>
<li>The <code>srcBegin</code> argument is negative.
<a name="25657"></a>
<li>The <code>srcBegin</code> argument is greater than the <code>srcEnd</code> argument.
<a name="25659"></a>
<li><code>srcEnd</code> is greater than <code>this.length()</code>, the current length of this string buffer.
<a name="25660"></a>
<li><code>dstBegin+srcEnd-srcBegin</code> is greater than <code>dst.length</code>.
</ul><p><a name="14039"></a>
<p><strong>20.13.12	</strong> <code>public StringBuffer append(Object obj)</code>
<p>
<a name="5262"></a>
The argument is converted to a string as if by the method <code>String.valueOf</code> 
<a href="20_12.htm#14015">(&#167;20.12.38)</a> and the characters of that string are then appended <a href="20_13.htm#14040">(&#167;20.13.13)</a> to this 
<code>StringBuffer</code> object. A reference to this <code>StringBuffer</code> object is returned.
<p><a name="14040"></a>
<p><strong>20.13.13	</strong> <code>public StringBuffer append(String str)</code>
<p>
<a name="5419"></a>
The characters of the <code>String</code> argument are appended, in order, to the contents of 
this string buffer, increasing the length of this string buffer by the length of the 
argument. If <code>str</code> is <code>null</code>, then the four characters "<code>null</code>" are appended to this 
string buffer. The method <code>ensureCapacity</code> <a href="20_13.htm#14034">(&#167;20.13.7)</a> is first called with this new 
string buffer length as its argument. A reference to this <code>StringBuffer</code> object is 
returned.
<p><a name="5434"></a>
Let <i>n</i> be the length of the old character sequence, the one contained in the string buffer just prior to execution of the <code>append</code> method. Then the character at index <i>k</i> in the new character sequence is equal to the character at index <i>k</i> in the old character sequence, if <i>k</i> is less than <i>n</i>; otherwise, it is equal to the character at index <i>k</i><code>-</code><i>n</i> in the argument <code>str</code>.<p>
<a name="5429"></a>
<p><strong>20.13.14	</strong> <code>public StringBuffer append(char[] str)<br>throws NullPointerException</code>
<p>
<a name="5354"></a>
The characters of the array argument are appended, in order, to the contents of this 
string buffer, increasing the length of this string buffer by the length of the argument. The method <code>ensureCapacity</code> <a href="20_13.htm#14034">(&#167;20.13.7)</a> is first called with this new string 
buffer length as its argument. A reference to this <code>StringBuffer</code> object is 
returned.
<p><a name="7094"></a>
The overall effect is exactly as if the argument were converted to a string by the method <code>String.valueOf</code> <a href="20_12.htm#4778">(&#167;20.12.39)</a> and the characters of that string were then appended <a href="20_13.htm#14040">(&#167;20.13.13)</a> to this <code>StringBuffer</code> object.<p>
<a name="14042"></a>
<p><strong>20.13.15	</strong> <code>public StringBuffer append(char[] str,<br> &#32; &#32; &#32;int offset, int len)<br>throws NullPointerException, <br> &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="5373"></a>
Characters of the character array <code>str</code>, starting at index <code>offset</code>, are appended, in 
order, to the contents of this string buffer, increasing the length of this string 
buffer by <code>len</code>. The method <code>ensureCapacity</code> <a href="20_13.htm#14034">(&#167;20.13.7)</a> is first called with this 
new string buffer length as its argument. A reference to this <code>StringBuffer</code> object 
is returned.
<p><a name="7095"></a>
The overall effect is exactly as if the arguments were converted to a string by the method <code>String.valueOf</code> of three arguments <a href="20_12.htm#33348">(&#167;20.12.40)</a> and the characters of that string were then appended <a href="20_13.htm#14040">(&#167;20.13.13)</a> to this <code>StringBuffer</code> object.<p>
<a name="14043"></a>
<p><strong>20.13.16	</strong> <code>public StringBuffer append(boolean b)</code>
<p>
<a name="5275"></a>
The argument is converted to a string as if by the method <code>String.valueOf</code> 
<a href="20_12.htm#14020">(&#167;20.12.41)</a> and the characters of that string are then appended <a href="20_13.htm#14040">(&#167;20.13.13)</a> to this 
<code>StringBuffer</code> object. A reference to this <code>StringBuffer</code> object is returned.
<p><a name="14044"></a>
<p><strong>20.13.17	</strong> <code>public StringBuffer append(char c)</code>
<p>
<a name="5337"></a>
The argument is appended to the contents of this string buffer, increasing the 
length of this string buffer by <code>1</code>. The method <code>ensureCapacity</code> <a href="20_13.htm#14034">(&#167;20.13.7)</a> is first 
called with this new string buffer length as its argument. A reference to this 
<code>StringBuffer</code> object is returned.
<p><a name="7105"></a>
The overall effect is exactly as if the argument were converted to a string by the method <code>String.valueOf</code> <a href="20_12.htm#14021">(&#167;20.12.42)</a> and the character in that string were then appended <a href="20_13.htm#14040">(&#167;20.13.13)</a> to this <code>StringBuffer</code> object.<p>
<a name="14045"></a>
<p><strong>20.13.18	</strong> <code>public StringBuffer append(int i)</code>
<p>
<a name="5288"></a>
The argument is converted to a string as if by the method <code>String.valueOf</code> 
<a href="20_12.htm#14022">(&#167;20.12.43)</a> and the characters of that string are then appended <a href="20_13.htm#14040">(&#167;20.13.13)</a> to this 
<code>StringBuffer</code> object. A reference to this <code>StringBuffer</code> object is returned.
<p><a name="14046"></a>
<p><strong>20.13.19	</strong> <code>public StringBuffer append(long l)</code>
<p>
<a name="5298"></a>
The argument is converted to a string as if by the method <code>String.valueOf</code> 
<a href="20_12.htm#14023">(&#167;20.12.44)</a> and the characters of that string are then appended <a href="20_13.htm#14040">(&#167;20.13.13)</a> to this 
<code>StringBuffer</code> object. A reference to this <code>StringBuffer</code> object is returned.
<p><a name="14047"></a>
<p><strong>20.13.20	</strong> <code>public StringBuffer append(float f)</code>
<p>
<a name="5308"></a>
The argument is converted to a string as if by the method <code>String.valueOf</code> 
<a href="20_12.htm#14024">(&#167;20.12.45)</a> and the characters of that string are then appended <a href="20_13.htm#14040">(&#167;20.13.13)</a> to this 
<code>StringBuffer</code> object. A reference to this <code>StringBuffer</code> object is returned.
<p><a name="14048"></a>
<p><strong>20.13.21	</strong> <code>public StringBuffer append(double d)</code>
<p>
<a name="5318"></a>
The argument is converted to a string as if by the method <code>String.valueOf</code> 
<a href="20_12.htm#14025">(&#167;20.12.46)</a> and the characters of that string are then appended <a href="20_13.htm#14040">(&#167;20.13.13)</a> to this 
<code>StringBuffer</code> object. A reference to this <code>StringBuffer</code> object is returned.
<p><a name="5192"></a>
<p><strong>20.13.22	</strong> <code>public StringBuffer insert(int offset, Object obj)<br>	throws IndexOutOfBoundsException</code>
<p>
<a name="5444"></a>
The argument is converted to a string as if by the method <code>String.valueOf</code> 
<a href="20_12.htm#14015">(&#167;20.12.38)</a> and the characters of that string are then inserted <a href="20_13.htm#14050">(&#167;20.13.23)</a> into this 
<code>StringBuffer</code> object at the position indicated by <code>offset</code>. A reference to this 
<code>StringBuffer</code> object is returned.
<p><a name="14050"></a>
<p><strong>20.13.23	</strong> <code>public StringBuffer insert(int offset, String str)<br>	throws IndexOutOfBoundsException</code>
<p>
<a name="5548"></a>
The characters of the <code>String</code> argument are inserted, in order, into the string buffer 
at the position indicated by <code>offset</code>, moving up any characters originally above 
that position and increasing the length of the string buffer by the length of the 
argument. If <code>str</code> is <code>null</code>, then the four characters "<code>null</code>" are inserted into this 
string buffer. The method <code>ensureCapacity</code> <a href="20_13.htm#14034">(&#167;20.13.7)</a> is first called with this new 
string buffer length as its argument. A reference to this <code>StringBuffer</code> object is 
returned.
<p><a name="5552"></a>
Let <i>n</i> be the length of the old character sequence, the one contained in the string buffer just prior to execution of the <code>append</code> method. Then the character at index <i>k</i> in the new character sequence is equal to:<p>
<ul><a name="5626"></a>
<li>the character at index <i>k</i> in the old character sequence, if <i>k</i> is less than <code>offset</code>
<a name="5631"></a>
<li>the character at index <i>k</i><code>-offset</code> in the argument <code>str</code>, if <i>k</i> is not less than <code>offset</code> &#32;but is less than <code>offset+str.length()</code>
<a name="5636"></a>
<li>the character at index <i>k</i><code>-str.length()</code> in the old character sequence, if <i>k</i> is not less than <code>offset+str.length()</code>
</ul><p><a name="14051"></a>
<p><strong>20.13.24	</strong> <code>public StringBuffer insert(int offset, char[] str) <br>throws NullPointerException,<br> &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="5556"></a>
The characters of the array argument, taken in order, are inserted into this string 
buffer, increasing the length of the string buffer by the length of the argument. The 
method <code>ensureCapacity</code> <a href="20_13.htm#14034">(&#167;20.13.7)</a> is first called with this new string buffer 
length as its argument. A reference to this <code>StringBuffer</code> object is returned.
<p><a name="7135"></a>
The overall effect is exactly as if the argument were converted to a string by the method <code>String.valueOf</code> <a href="20_12.htm#4778">(&#167;20.12.39)</a> and the characters of that string were then inserted <a href="20_13.htm#14050">(&#167;20.13.23)</a> into this <code>StringBuffer</code> object at the position indicated by <code>offset</code>.<p>
<a name="5568"></a>
Note that while the <code>StringBuffer</code> class provides an <code>append</code> method that takes an offset, a character array, and two other arguments <a href="20_13.htm#14042">(&#167;20.13.15)</a>, it does not currently provide an <code>insert</code> method that takes an offset, a character array, and two other arguments.<p>
<a name="14052"></a>
<p><strong>20.13.25	</strong> <code>public StringBuffer insert(int offset, boolean b)<br>	throws IndexOutOfBoundsException</code>
<p>
<a name="5457"></a>
The argument is converted to a string as if by the method <code>String.valueOf</code> 
<a href="20_12.htm#14020">(&#167;20.12.41)</a> and the characters of that string are then inserted <a href="20_13.htm#14050">(&#167;20.13.23)</a> into this 
<code>StringBuffer</code> object at the position indicated by <code>offset</code>. A reference to this 
<code>StringBuffer</code> object is returned.
<p><a name="14053"></a>
<p><strong>20.13.26	</strong> <code>public StringBuffer insert(int offset, char c)<br>	throws IndexOutOfBoundsException</code>
<p>
<a name="5464"></a>
The argument is inserted into the contents of this string buffer at the position indicated by <code>offset</code>, increasing the length of this string buffer by <code>1</code>. The method 
<code>ensureCapacity</code> <a href="20_13.htm#14034">(&#167;20.13.7)</a> is first called with this new string buffer length as its 
argument. A reference to this <code>StringBuffer</code> object is returned.
<p><a name="7145"></a>
The overall effect is exactly as if the argument were converted to a string by the method <code>String.valueOf</code> <a href="20_12.htm#14021">(&#167;20.12.42)</a> and the character in that string were then inserted <a href="20_13.htm#14050">(&#167;20.13.23)</a> into this <code>StringBuffer</code> object at the position indicated by <code>offset</code>.<p>
<a name="14054"></a>
<p><strong>20.13.27	</strong> <code>public StringBuffer insert(int offset, int i)<br>	throws IndexOutOfBoundsException</code>
<p>
<a name="5480"></a>
The argument is converted to a string as if by the method <code>String.valueOf</code> 
<a href="20_12.htm#14022">(&#167;20.12.43)</a> and the characters of that string are then inserted <a href="20_13.htm#14050">(&#167;20.13.23)</a> into this 
<code>StringBuffer</code> object at the position indicated by <code>offset</code>. A reference to this 
<code>StringBuffer</code> object is returned.
<p><a name="14055"></a>
<p><strong>20.13.28	</strong> <code>public StringBuffer insert(int offset, long l)<br>	throws IndexOutOfBoundsException</code>
<p>
<a name="5499"></a>
The argument is converted to a string as if by the method <code>String.valueOf</code> 
<a href="20_12.htm#14023">(&#167;20.12.44)</a> and the characters of that string are inserted <a href="20_13.htm#14050">(&#167;20.13.23)</a> into this 
<code>StringBuffer</code> object at the position indicated by <code>offset</code>. A reference to this 
<code>StringBuffer</code> object is returned.
<p><a name="14056"></a>
<p><strong>20.13.29	</strong> <code>public StringBuffer insert(int offset, float f)<br>	throws IndexOutOfBoundsException</code>
<p>
<a name="5509"></a>
The argument is converted to a string as if by the method <code>String.valueOf</code> 
<a href="20_12.htm#14024">(&#167;20.12.45)</a> and the characters of that string are then inserted <a href="20_13.htm#14050">(&#167;20.13.23)</a> into this 
<code>StringBuffer</code> object at the position indicated by <code>offset</code>. A reference to this 
<code>StringBuffer</code> object is returned.
<p><a name="14057"></a>
<p><strong>20.13.30	</strong> <code>public StringBuffer insert(int offset, double d)<br>	throws IndexOutOfBoundsException</code>
<p>
<a name="5520"></a>
The argument is converted to a string as if by the method <code>String.valueOf</code> 
<a href="20_12.htm#14025">(&#167;20.12.46)</a> and the characters of that string are then inserted <a href="20_13.htm#14050">(&#167;20.13.23)</a> into this 
<code>StringBuffer</code> object at the position indicated by <code>offset</code>. A reference to this 
<code>StringBuffer</code> object is returned.
<p><a name="7079"></a>
<p><strong>20.13.31	</strong> <code>public StringBuffer reverse()</code>
<p>
<a name="7162"></a>
The character sequence contained in this <code>StringBuffer</code> object is replaced by the 
reverse of that sequence. A reference to this <code>StringBuffer</code> object is returned.
<p><a name="7168"></a>
Let <i>n</i> be the length of the old character sequence, the one contained in the string buffer just prior to execution of the <code>reverse</code> method. Then the character at index <i>k</i> in the new character sequence is equal to the character at index <i>n</i><code>-</code><i>k</i><code>-1</code> in the old character sequence.<p>


</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>12.2.2 Implications for Code Generation</title>
<META NAME=MS-HAID CONTENT="12_2_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>12.2.2	 Implications for Code Generation</h3>
<a name="44484"></a>
<p>
<a name="44485"></a>
A cooperating class loader can enable a code generator to generate code for a 
group of class and interface types-perhaps an entire package-by loading the 
binary code for these types as a group. A format can be designed that allows all 
the internal symbolic references in such a group to be resolved, before the group is 
loaded. Such a strategy may also allow the generated code to be optimized before 
loading based on the known concrete types in the group. This approach may be 
useful in specific cases, but is discouraged as a general technique, since such a 
class file format is unlikely to be widely understood.
<p>

</body></html>

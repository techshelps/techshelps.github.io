<html>
<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>7.2.1 Storing Packages in a File System</title>
<META NAME=MS-HAID CONTENT="7_2_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>7.2.1	 Storing Packages in a File System</h3>
<a name="37546"></a>
<p>
<a name="37463"></a>
As an extremely simple example, all the Java packages and source and binary 
code on a system might be stored in a single directory and its subdirectories. Each 
immediate subdirectory of this directory would represent a top-level package, that 
is, one whose fully qualified name consists of a single simple name. The directory 
might contain the following immediate subdirectories:
<p><pre><a name="37473"></a>
COM
<a name="13211"></a>gls
<a name="13212"></a>jag
<a name="13213"></a>java
<a name="13214"></a>wnj
</pre><p><a name="37477"></a>
where directory <code>java</code> would contain the standard Java Application Programming 
Interface packages that are part of every standard Java system; the directories <code>jag</code>, 
<code>gls</code>, and <code>wnj</code> might contain packages that the three authors of this specification 
created for their personal use and to share with each other within this small group; 
and the directory <code>COM</code> would contain packages procured from companies that used 
the conventions described in <a href="7_7.htm#40169">&#167;7.7</a> to generate unique names for their packages.
<p><a name="37480"></a>
Continuing the example, the directory <code>java</code> would probably contain at least the following subdirectories:<p>
<pre><a name="37481"></a>
applet	
<a name="13215"></a>awt
<a name="13216"></a>io
<a name="13217"></a>lang
<a name="13218"></a>net
<a name="13219"></a>util
</pre><p><a name="37490"></a>
corresponding to the standard packages <code>java.applet</code>, <code>java.awt</code>, <code>java.io</code>, 
<code>java.lang</code>, <code>java.net</code>, and <code>java.util</code> that are defined as part of the standard 
Java Application Programming Interface.
<p><a name="37491"></a>
Still continuing the example, if we were to look inside the directory <code>util</code>, we might see the following files:<p>
<pre><a name="37492"></a>
BitSet.java										Observable.java
<a name="37493"></a>BitSet.class										Observable.class
<a name="37494"></a>Date.java										Observer.java
<a name="37495"></a>Date.class										Observer.class
<a name="37496"></a>Dictionary.java										Properties.java
<a name="37497"></a>Dictionary.class										Properties.class
<a name="37500"></a>EmptyStackException.java										Random.java
<a name="37501"></a>EmptyStackException.class										Random.class
<a name="37502"></a>Enumeration.java										Stack.java
<a name="37503"></a>Enumeration.class										Stack.class
<a name="37504"></a>Hashtable.java										StringTokenizer.java
<a name="37505"></a>Hashtable.class										StringTokenizer.class
<a name="37506"></a>NoSuchElementException.java										Vector.java
<a name="37507"></a>NoSuchElementException.class										Vector.class
</pre><p><a name="37466"></a>
where each of the <code>.java</code> files contains the source for a compilation unit <a href="7_3.htm#40031">(&#167;7.3)</a> 
that contains the definition of a class or interface whose binary compiled form is 
contained in the corresponding <code>.class</code> file.
<p><a name="37599"></a>
Under this simple organization of packages, an implementation of Java would transform a package name into a pathname by concatenating the components of the package name, placing a file name separator (directory indicator) between adjacent components. For example, if this simple organization were used on a UNIX system, where the file name separator is <code>/</code>, the package name:<p>
<pre><a name="37600"></a>jag.scrabble.board
</pre><p><a name="37601"></a>
would be transformed into the directory name:
<p><pre><a name="37602"></a>jag/scrabble/board
</pre><p><a name="37603"></a>
and:
<p><pre><a name="37604"></a>COM.Sun.sunsoft.DOE
</pre><p><a name="37605"></a>
would be transformed to the directory name:
<p><pre><a name="37606"></a><code>COM/Sun/sunsoft/DOE
</code></pre><p><a name="37608"></a>
In fact, the standard JavaSoft Java Developer's Kit on UNIX differs from the very simple discipline described here only in that it provides a <code>CLASSPATH</code> environment variable that specifies a set of directories, each of which is treated like the single directory described here. These directories are searched in order for definitions of named packages and types.<p>
<a name="37709"></a>
A package name component or class name might contain a character that cannot correctly appear in a host file system's ordinary directory name, such as a Unicode character on a system that allows only ASCII characters in file names. As a convention, the character can be escaped by using, say, the <code>@</code> character followed by four hexadecimal digits giving the numeric value of the character, as in the <code>\u</code><i>xxxx</i> escape <a href="3_3.htm#100850">(&#167;3.3)</a>, so that the package name:<p>
<pre><a name="37613"></a>children.activities.crafts.papierM\u00e2ch\u00e9
</pre><p><a name="37614"></a>
which can also be written using full Unicode as:
<p><pre><a name="37615"></a>children.activities.crafts.papierMache;
</pre><p><a name="37616"></a>
might be mapped to the directory name:
<p><pre><a name="37617"></a>children/activities/crafts/papierM@00e2ch@00e9
</pre><p><a name="37618"></a>
If the <code>@</code> character is not a valid character in a file name for some given host file 
system, then some other character that is not valid in a Java identifier could be 
used instead.
<p>

</Font></body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>22.5 The Class java.io.PipedInputStream</title>
<META NAME=MS-HAID CONTENT="22_5">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>22.5	 The Class java.io.PipedInputStream</h1>
<a name="28307"></a>
<p>
<a name="28308"></a>
A piped input stream should be connected to a piped output stream; the piped 
input stream then provides whatever data bytes are written to the piped output 
stream. Typically, data is read from a <code>PipedInputStream</code> object by one thread 
and data is written to the corresponding <code>PipedOutputStream</code> <a href="22_17.htm#29449">(&#167;22.17)</a> by some 
other thread. Attempting to use both objects from a single thread is not recommended, as it may deadlock the thread. The piped input stream contains a buffer, 
decoupling read operations from write operations, within limits.
<p><pre><a name="28309"></a>public class <code><b>PipedInputStream</b></code> extends InputStream {
<a name="28310"></a>	public <code><b>PipedInputStream</b></code> (PipedOutputStream src)
<a name="28311"></a>		throws IOException;
<a name="28312"></a>	public <code><b>PipedInputStream</b></code> ();
<a name="28313"></a>	public void <code><b>connect</b></code>(PipedOutputStream src)
<a name="28314"></a>		throws IOException;
<a name="28315"></a>	public int <code><b>read</b></code>()  throws IOException;
<a name="28316"></a>	public int <code><b>read</b></code>(byte[] b, int off, int len) 
<a name="28317"></a>		throws IOException, NullPointerException,
<a name="32303"></a>			IndexOutOfBoundsException;
<a name="28318"></a>	public void <code><b>close</b></code>() throws IOException;
<a name="28319"></a>}
</pre><p><a name="28320"></a>
<p><strong>22.5.1	</strong> <code>public PipedInputStream(PipedOutputStream src)<br>throws IOException</code>
<p>
<a name="28321"></a>
This constructor initializes a newly created <code>PipedInputStream</code> so that it is connected to the piped output stream <code>src</code>. Data bytes written to <code>src</code> will then be 
available as input from this stream.
<p><a name="28322"></a>
<p><strong>22.5.2	</strong> <code>public PipedInputStream()</code>
<p>
<a name="28323"></a>
This constructor initializes a newly created <code>PipedInputStream</code> so that it is not 
yet connected. It must be connected to a <code>PipedOutputStream</code> before being used.
<p><a name="28324"></a>
<p><strong>22.5.3	</strong> <code>public void connect(PipedOutputStream src)<br>throws IOException</code>
<p>
<a name="28325"></a>
The <code>connect</code> method causes this piped input stream to be connected to the piped 
output stream <code>src</code>. If this object is already connected to some other piped output 
stream, an <code>IOException</code> is thrown.
<p><a name="28326"></a>
If <code>src</code> is an unconnected piped output stream and <code>snk</code> is an unconnected piped input stream, they may be connected by either the call:<p>
<pre><a name="28327"></a>snk.connect(src)
</pre><p><a name="28328"></a>
or the call:
<p><pre><a name="28329"></a>src.connect(snk)
</pre><p><a name="28330"></a>
The two calls have the same effect.
<p><a name="28331"></a>
<p><strong>22.5.4	</strong> <code>public int read() throws IOException</code>
<p>
<a name="28332"></a>
If a thread was providing data bytes to the connected piped output stream, but the 
thread is no longer alive, then an <code>IOException</code> is thrown.
<p><a name="28336"></a>
Implements the <code>read</code> method of <code>InputStream</code> <a href="22_3.htm#28142">(&#167;22.3.1)</a>.<p>
<a name="28337"></a>
<p><strong>22.5.5	</strong> <code>public int read(byte[] b, int off, int len)<br>throws IOException, NullPointerException,  &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="28338"></a>
If a thread was providing data bytes to the connected piped output stream, but the 
thread is no longer alive, then an <code>IOException</code> is thrown.
<p><a name="28342"></a>
Overrides the <code>read</code> method of <code>InputStream</code> <a href="22_3.htm#28164">(&#167;22.3.3)</a>.<p>
<a name="28343"></a>
<p><strong>22.5.6	</strong> <code>public void close() throws IOException</code>
<p>
<a name="28344"></a>
This piped input stream is closed and may no longer be used for reading bytes.
<p><a name="28348"></a>
Overrides the <code>close</code> method of <code>InputStream</code> <a href="22_3.htm#28187">(&#167;22.3.6)</a>.<p>


</body></html>

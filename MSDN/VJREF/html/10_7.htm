<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>10.7 Array Members</title>
<META NAME=MS-HAID CONTENT="10_7">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>10.7	 Array Members</h2>
<a name="11364"></a>
<p>
<a name="25782"></a>
The members of an array type are all of the following:
<p><ul><a name="25783"></a>
<li>The <code>public</code> <code>final</code> field <code>length</code>, which contains the number of components of the array (<code>length</code> may be positive or zero)
<a name="42464"></a>
<li>The <code>public</code> method <code>clone</code>, which overrides the method of the same name in class <code>Object</code> and throws no checked exceptions
<a name="25784"></a>
<li>All the members inherited from class <code>Object</code>; the only method of <code>Object</code> that is not inherited is its <code>clone</code> method
</ul><p><a name="29781"></a>
An array thus has the same methods as the following class:
<p><pre><a name="29785"></a>
class A implements Cloneable {
<a name="29786"></a>	public final int length = <i>X</i>;
<a name="29787"></a>	public Object clone() {
<a name="50155"></a>		try {
<a name="29797"></a>			return super.clone();
<a name="50157"></a>		} catch (CloneNotSupportedException e) {
<a name="29798"></a>			throw new InternalError(e.getMessage());
<a name="29793"></a>		}
<a name="29794"></a>	}
<br><a name="29790"></a>}
</pre><p><a name="25789"></a>
Every array implements interface <code>Cloneable</code>. That arrays are cloneable is shown 
by the test program:
<p><pre><a name="25795"></a>
class Test {
<a name="25796"></a>	public static void main(String[] args) {
<a name="25801"></a>		int ia1[] = { 1, 2 };
<a name="25802"></a>		int ia2[] = (int[])ia1.clone();
<a name="25803"></a>		System.out.print((ia1 == ia2) + " ");
<a name="25810"></a>		ia1[1]++;
<a name="25811"></a>		System.out.println(ia2[1]);
<a name="25804"></a>	}
<a name="25805"></a>}
</pre><p><a name="25812"></a>
which prints:
<p><pre><a name="25813"></a>false 2
</pre><p><a name="25815"></a>
showing that the components of the arrays referenced by <code>ia1</code> and <code>ia2</code> are different 
variables. (In some early implementations of Java this example failed to compile 
because the compiler incorrectly believed that the clone method for an array could 
throw a <code>CloneNotSupportedException</code>.)
<p><a name="25833"></a>
A <code>clone</code> of a multidimensional array is shallow, which is to say that it creates only a single new array. Subarrays are shared, as shown by the example program:<p>
<pre><a name="25843"></a>
class Test {
<a name="25844"></a>	public static void main(String[] args) throws Throwable {
<a name="25845"></a>		int ia[][] = { { 1 , 2}, null };
<a name="25846"></a>		int ja[][] = (int[][])ia.clone();
<a name="25858"></a>		System.out.print((ia == ja) + " ");
<a name="25847"></a>		System.out.println(ia[0] == ja[0] &amp;&amp; ia[1] == ja[1]);
<a name="25849"></a>	}
<a name="25850"></a>}
</pre><p><a name="25855"></a>
which prints:
<p><pre><a name="25856"></a>false true
</pre><p><a name="28553"></a>
showing that the <code>int[]</code> array that is <code>ia[0]</code> and the <code>int[]</code> array that is <code>ja[0]</code> are 
the same array.
<p>

</body></html>

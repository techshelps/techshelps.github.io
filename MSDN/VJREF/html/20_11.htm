<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>20.11 The Class java.lang.Math</title>
<META NAME=MS-HAID CONTENT="20_11">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>20.11	 The Class java.lang.Math</h1>
<a name="15518"></a>
<p>
<a name="34223"></a>
<p><i>Oh, back to the days that were free from care in the 'Ology 'varsity shop,<br>
With nothing to do but analyse air in an anemometrical top,<br>
Or the differentiation of the trigonometrical pow'rs<br>
Of the constant pi that made me sigh in those happy days of ours!</i><br>
<a name="36302"></a>
&#151;I. W. Litchfield, <i>Take Me Back to Tech</i> (1885)</p>
<p>
<a name="7093"></a>
The class <code>Math</code> contains useful basic numerical constants and methods.
<p><pre><a name="15519"></a>public final class <code><b>Math</b></code> {
<a name="15520"></a>	public static final double <code><b>E</b></code> = 2.7182818284590452354;
<a name="15444"></a>	public static final double <code><b>PI</b></code> = 3.14159265358979323846;
<a name="15445"></a>	public static double <code><b>sin</b></code>(double a);
<a name="15446"></a>	public static double <code><b>cos</b></code>(double a);
<a name="15447"></a>	public static double <code><b>tan</b></code>(double a);
<a name="15448"></a>	public static double <code><b>asin</b></code>(double a);
<a name="15449"></a>	public static double <code><b>acos</b></code>(double a);
<a name="15450"></a>	public static double <code><b>atan</b></code>(double a);
<a name="6145"></a>	public static double <code><b>atan2</b></code>(double a, double b);
<a name="15451"></a>	public static double <code><b>exp</b></code>(double a);
<a name="15452"></a>	public static double <code><b>log</b></code>(double a);
<a name="15453"></a>	public static double <code><b>sqrt</b></code>(double a);
<a name="6139"></a>	public static double <code><b>pow</b></code>(double a, double b);
<a name="15454"></a>	public static double <code><b>IEEEremainder</b></code>(double f1, double f2);
<a name="15455"></a>	public static double <code><b>ceil</b></code>(double a);
<a name="15456"></a>	public static double <code><b>floor</b></code>(double a);
<a name="15457"></a>	public static double <code><b>rint</b></code>(double a);
<a name="15460"></a>	public static int <code><b>round</b></code>(float a);
<a name="15461"></a>	public static long <code><b>round</b></code>(double a);
<a name="15462"></a>	public static double <code><b>random</b></code>();
<a name="15463"></a>	public static int <code><b>abs</b></code>(int a);
<a name="15464"></a>	public static long <code><b>abs</b></code>(long a);
<a name="15465"></a>	public static float <code><b>abs</b></code>(float a);
<a name="15466"></a>	public static double <code><b>abs</b></code>(double a);
<a name="6830"></a>	public static int <code><b>min</b></code>(int a, int b);
<a name="6831"></a>	public static long <code><b>min</b></code>(long a, long b);
<a name="6832"></a>	public static float <code><b>min</b></code>(float a, float b);
<a name="6833"></a>	public static double <code><b>min</b></code>(double a, double b);
<a name="15467"></a>	public static int <code><b>max</b></code>(int a, int b);
<a name="15468"></a>	public static long <code><b>max</b></code>(long a, long b);
<a name="15469"></a>	public static float <code><b>max</b></code>(float a, float b);
<a name="15470"></a>	public static double <code><b>max</b></code>(double a, double b);
<a name="15523"></a>}
</pre><p><a name="7097"></a>
To ensure portability of Java programs, the specifications of many of the numerical functions in this package require that they produce the same results as certain published algorithms. These algorithms are available from the well-known network library <code>netlib</code> as the package <code>fdlibm</code> ("Freely Distributable Math Library"). These algorithms, which are written in the C programming language, are to be understood as if executed in Java execution order with all floating-point operations following the rules of Java floating-point arithmetic.<p>
<a name="7101"></a>
The network library may be found at 
<a href="http://netlib.att.com/">http://netlib.att.com/</a> on 
the World Wide Web; then perform a keyword search for <code>fdlibm</code>. The library may also be retrieved by E-mail; to begin the process, send a message containing the line:<p>
<pre><a name="7106"></a>send index from fdlibm
</pre><p><a name="7107"></a>
to <code>netlib@research.att.com</code>. The Java math library is defined with respect to 
the version of <code>fdlibm</code> dated 95/01/04. Where <code>fdlibm</code> provides more than one definition for a function (such as <code>acos</code>), the "IEEE754 core function" version is to be 
used (residing in a file whose name begins with the letter <code>e</code>).
<p><a name="24987"></a>
A complete and self-contained description of the algorithms to be used for these functions will be provided in a future version of this specification. It is also anticipated that the algorithms will be coded in Java to provide a reference implementation that is not tied to <code>fdlibm</code>.<p>
<a name="13943"></a>
<p><strong>20.11.1	</strong> <code>public static final double E = 2.7182818284590452354;</code>
<p>
<a name="5934"></a>
The constant value of this field is the <code>double</code> value that is closer than any other 
to &#32;<i>e</i>, the base of the natural logarithms.
<p><a name="13944"></a>
<p><strong>20.11.2	</strong> <code>public static final double PI = 3.14159265358979323846;</code>
<p>
<a name="5938"></a>
The constant value of this field is the <code>double</code> value that is closer than any other 
to &#32;<img src="chars/pi.gif">, the ratio of the circumference of a circle to its diameter.
<p><a name="13945"></a>
<p><strong>20.11.3	</strong> <code>public static double sin(double a)</code>
<p>
<a name="5955"></a>
This method computes an approximation to the sine of the argument, using the 
<code>sin</code> algorithm as published in <code>fdlibm</code> (see the introduction to this section).
<p><a name="30355"></a>
Special cases:<p>
<ul><a name="6037"></a>
<li>If the argument is NaN or an infinity, then the result is NaN.
<a name="6038"></a>
<li>If the argument is positive zero, then the result is positive zero; if the argument is negative zero, then the result is negative zero.
</ul><p><a name="13946"></a>
<p><strong>20.11.4	</strong> <code>public static double cos(double a)</code>
<p>
<a name="5957"></a>
This method computes an approximation to the cosine of the argument, using the 
<code>cos</code> algorithm as published in <code>fdlibm</code> (see the introduction to this section).
<p><a name="30357"></a>
Special case:<p>
<ul><a name="6040"></a>
<li>If the argument is NaN or an infinity, then the result is NaN.
</ul><p><a name="13947"></a>
<p><strong>20.11.5	</strong> <code>public static double tan(double a)</code>
<p>
<a name="5961"></a>
This method computes an approximation to the tangent of the argument, using the 
<code>tan</code> algorithm as published in <code>fdlibm</code> (see the introduction to this section).
<p><a name="30359"></a>
Special cases:<p>
<ul><a name="6044"></a>
<li>If the argument is NaN or an infinity, then the result is NaN.
<a name="6064"></a>
<li>If the argument is positive zero, then the result is positive zero; if the argument is negative zero, then the result is negative zero.
</ul><p><a name="13948"></a>
<p><strong>20.11.6	</strong> <code>public static double asin(double a)</code>
<p>
<a name="5965"></a>
This method computes an approximation to the arc sine of the argument, using the 
a<code>sin</code> algorithm as published in <code>fdlibm</code> (see the introduction to this section).
<p><a name="30361"></a>
Special cases:<p>
<ul><a name="6054"></a>
<li>If the argument is NaN or its absolute value is greater than 1, then the result is NaN.
<a name="6068"></a>
<li>If the argument is positive zero, then the result is positive zero; if the argument is negative zero, then the result is negative zero.
</ul><p><a name="13949"></a>
<p><strong>20.11.7	</strong> <code>public static double acos(double a)</code>
<p>
<a name="5969"></a>
This method computes an approximation to the arc cosine of the argument, using 
the <code>acos</code> algorithm as published in <code>fdlibm</code> (see the introduction to this section).
<p><a name="30363"></a>
Special case:<p>
<ul><a name="6048"></a>
<li>If the argument is NaN or its absolute value is greater than 1, then the result is NaN.
</ul><p><a name="13950"></a>
<p><strong>20.11.8	</strong> <code>public static double atan(double a)</code>
<p>
<a name="5973"></a>
This method computes an approximation to the arc tangent of the argument, using 
the a<code>tan</code> algorithm as published in <code>fdlibm</code> (see the introduction to this section).
<p><a name="30365"></a>
Special cases:<p>
<ul><a name="6058"></a>
<li>If the argument is NaN, then the result is NaN.
<a name="6072"></a>
<li>If the argument is positive zero, then the result is positive zero; if the argument is negative zero, then the result is negative zero.
</ul><p><a name="6151"></a>
<p><strong>20.11.9	</strong> <code>public static double atan2(double y, double x)</code>
<p>
<a name="6155"></a>
This method computes an approximation to the arc tangent of the quotient <img src="laanc26.gif"> of 
the arguments, using the a<code>tan2</code> algorithm as published in <code>fdlibm</code> (see the introduction to this section).
<p><a name="30367"></a>
Special cases:<p>
<ul><a name="6178"></a>
<li>If either argument is NaN, then the result is NaN.
<a name="6199"></a>
<li>If the first argument is positive zero and the second argument is positive, or the first argument is positive and finite and the second argument is positive infinity, then the result is positive zero.
<a name="6200"></a>
<li>If the first argument is negative zero and the second argument is positive, or the first argument is negative and finite and the second argument is positive infinity, then the result is negative zero.
<a name="6204"></a>
<li>If the first argument is positive zero and the second argument is negative, or the first argument is positive and finite and the second argument is negative infinity, then the result is the <code>double</code> value closest to <img src="laanc27.gif">.
<a name="6217"></a>
<li>If the first argument is negative zero and the second argument is negative, or the first argument is negative and finite and the second argument is negative infinity, then the result is the <code>double</code> value closest to <img src="laanc28.gif">.
<a name="6241"></a>
<li>If the first argument is positive and the second argument is positive zero or negative zero, or the first argument is positive infinity and the second argument is finite, then the result is the <code>double</code> value closest to <img src="laanc29.gif">.
<a name="6248"></a>
<li>If the first argument is negative and the second argument is positive zero or negative zero, or the first argument is negative infinity and the second argument is finite, then the result is the <code>double</code> value closest to <img src="laanc30.gif">.
<a name="6354"></a>
<li>If both arguments are positive infinity, then the result is the <code>double</code> value closest to <img src="laanc31.gif">.
<a name="6369"></a>
<li>If the first argument is positive infinity and the second argument is negative infinity, then the result is the <code>double</code> value closest to <img src="laanc32.gif">.
<a name="6376"></a>
<li>If the first argument is negative infinity and the second argument is positive infinity, then the result is the <code>double</code> value closest to <img src="laanc33.gif">.
<a name="6345"></a>
<li>If both arguments are negative infinity, then the result is the <code>double</code> value closest to <img src="laanc34.gif">.
</ul><p><a name="6176"></a>
<p><strong>20.11.10	</strong> <code>public static double exp(double a)</code>
<p>
<a name="5977"></a>
This method computes an approximation to the exponential function of the argument (<i>e</i> raised to the power of the argument, where <i>e</i> is the base of the natural logarithms <a href="20_11.htm#13943">(&#167;20.11.1)</a>), using the <code>exp</code> algorithm as published in <code>fdlibm</code> (see the 
introduction to this section).
<p><a name="30369"></a>
Special cases:<p>
<ul><a name="6076"></a>
<li>If the argument is NaN, then the result is NaN.
<a name="6091"></a>
<li>If the argument is positive infinity, then the result is positive infinity.
<a name="6122"></a>
<li>If the argument is negative infinity, then the result is positive zero.
</ul><p><a name="6123"></a>
<p><strong>20.11.11	</strong> <code>public static double log(double a)</code>
<p>
<a name="5981"></a>
This method computes an approximation to the natural logarithm of the argument, 
using the <code>log</code> algorithm as published in <code>fdlibm</code> (see the introduction to this section).
<p><a name="30371"></a>
Special cases:<p>
<ul><a name="6101"></a>
<li>If the argument is NaN or less than zero, then the result is NaN.
<a name="6102"></a>
<li>If the argument is positive infinity, then the result is positive infinity.
<a name="34319"></a>
<li>If the argument is positive zero or negative zero, then the result is negative infinity.
</ul><p><a name="34739"></a>
<p><strong>20.11.12	</strong> <code>public static double sqrt(double a)</code>
<p>
<a name="31585"></a>
<p><i>Whan that Aprill with his shoures soote</i><br>
<a name="31596"></a>
<i>The droghte of March hath perced to the roote . . .</i><br>
<a name="31597"></a>
&#151;Geoffrey Chaucer (1328-1400), <i>The Canterbury Tales</i>, General Prologue</p>
<p>
<a name="5985"></a>
This method computes an approximation to the square root of the argument.
<p><a name="30373"></a>
Special cases:<p>
<ul><a name="6399"></a>
<li>If the argument is NaN or less than zero, then the result is NaN.
<a name="6402"></a>
<li>If the argument is positive infinity, then the result is positive infinity.
<a name="6403"></a>
<li>If the argument is positive zero or negative zero, then the result is the same as the argument.
</ul><p><a name="6400"></a>
Otherwise, the result is the <code>double</code> value closest to the true mathematical square 
root of the argument value.
<p><a name="6127"></a>
<p><strong>20.11.13	</strong> <code>public static double pow(double a, double b)</code>
<p>
<a name="30340"></a>
This method computes an approximation to the mathematical operation of raising 
the first argument to the power of the second argument, using the <code>pow</code> algorithm as 
published in <code>fdlibm</code> (see the introduction to this section).
<p><a name="30375"></a>
Special cases:<p>
<ul><a name="6410"></a>
<li>If the second argument is positive or negative zero, then the result is <code>1.0</code>.
<a name="6433"></a>
<li>If the second argument is <code>1.0</code>, then the result is the same as the first argument.
<a name="6434"></a>
<li>If the second argument is NaN, then the result is NaN.
<a name="6435"></a>
<li>If the first argument is NaN and the second argument is nonzero, then the result is NaN.
<a name="6414"></a>
<li>If the absolute value of the first argument is greater than 1 and the second argument is positive infinity, or the absolute value of the first argument is less than &#32;1 and the second argument is negative infinity, then the result is positive infinity.
<a name="6448"></a>
<li>If the absolute value of the first argument is greater than 1 and the second argument is negative infinity, or the absolute value of the first argument is less than 1 and the second argument is positive infinity, then the result is positive zero.
<a name="6456"></a>
<li>If the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN.
<a name="6462"></a>
<li>If the first argument is positive zero and the second argument is greater than zero, or the first argument is positive infinity and the second argument is less than zero, then the result is positive zero.
<a name="6466"></a>
<li>If the first argument is positive zero and the second argument is less than zero, or the first argument is positive infinity and the second argument is greater than zero, then the result is positive infinity.
<a name="6475"></a>
<li>If the first argument is negative zero and the second argument is greater than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is less than zero but not a finite odd integer, then the result is positive zero.
<a name="6483"></a>
<li>If the first argument is negative zero and the second argument is a positive finite odd integer, or the first argument is negative infinity and the second argument is a negative finite odd integer, then the result is negative zero.
<a name="6476"></a>
<li>If the first argument is negative zero and the second argument is less than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is greater than zero but not a finite odd integer, then the result is positive infinity.
<a name="6487"></a>
<li>If the first argument is negative zero and the second argument is a negative finite odd integer, or the first argument is negative infinity and the second argument is a positive finite odd integer, then the result is negative infinity.
<a name="6576"></a>
<li>If the first argument is less than zero and the second argument is a finite even integer, then the result is equal to the result of raising the absolute value of the first argument to the power of the second argument.
<a name="6580"></a>
<li>If the first argument is less than zero and the second argument is a finite odd integer, then the result is equal to the negative of the result of raising the absolute value of the first argument to the power of the second argument.
<a name="6428"></a>
<li>If the first argument is finite and less than zero and the second argument is finite and not an integer, then the result is NaN.
<a name="6408"></a>
<li>If both arguments are integers, then the result is exactly equal to the mathematical result of raising the first argument to the power of the second argument if that result can in fact be represented exactly as a <code>double</code> value.
</ul><p><a name="6586"></a>
(In the foregoing descriptions, a floating-point value is considered to be an integer 
if and only if it is a fixed point of the method <code>ceil</code> <a href="20_11.htm#13957">(&#167;20.11.15)</a> or, which is the 
same thing, a fixed point of the method <code>floor</code> <a href="20_11.htm#13958">(&#167;20.11.16)</a>. A value is a fixed 
point of a one-argument method if and only if the result of applying the method to 
the value is equal to the value.)
<p><a name="13956"></a>
<p><strong>20.11.14	</strong> <code>public static double IEEEremainder(double x, double y)</code>
<p>
<a name="6638"></a>
This method computes the remainder operation on two arguments as prescribed 
by the IEEE 754 standard: the remainder value is mathematically equal to 
<img src="laanc35.gif"> where <img src="laanc36.gif"> is the mathematical integer closest to the exact mathematical 
value of the quotient <img src="laanc37.gif">; if two mathematical integers are equally close to <img src="laanc38.gif"> 
then <i>n</i> is the integer that is even. If the remainder is zero, its sign is the same as the 
sign of the first argument.
<p><a name="30376"></a>
Special cases:<p>
<ul><a name="6662"></a>
<li>If either argument is NaN, or the first argument is infinite, or the second argument is positive zero or negative zero, then the result is NaN.
<a name="6667"></a>
<li>If the first argument is finite and the second argument is infinite, then the result is the same as the first argument.
</ul><p><a name="13957"></a>
<p><strong>20.11.15	</strong> <code>public static double ceil(double a)</code>
<p>
<a name="6622"></a>
The result is the smallest (closest to negative infinity) <code>double</code> value that is not less 
than the argument and is equal to a mathematical integer.
<p><a name="30378"></a>
Special cases:<p>
<ul><a name="6623"></a>
<li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument.
<a name="6606"></a>
<li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.
<a name="30381"></a>
<li>If the argument value is less than zero but greater than <code>-1.0</code>, then the result is negative zero.
</ul><p><a name="30565"></a>
Note that the value of <code>Math.ceil(x)</code> is exactly the value of <code>-Math.floor(-x)</code>.
<p><a name="13958"></a>
<p><strong>20.11.16	</strong> <code>public static double floor(double a)</code>
<p>
<a name="6625"></a>
The result is the largest (closest to positive infinity) <code>double</code> value that is not 
greater than the argument and is equal to a mathematical integer.
<p><a name="30380"></a>
Special cases:<p>
<ul><a name="6626"></a>
<li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument.
<a name="6610"></a>
<li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.
</ul><p><a name="13959"></a>
<p><strong>20.11.17	</strong> <code>public static double rint(double a)</code>
<p>
<a name="7052"></a>
The result is the <code>double</code> value that is closest in value to the argument and is equal 
to a mathematical integer. If two <code>double</code> values that are mathematical integers are 
equally close to the value of the argument, the result is the integer value that is 
even.
<p><a name="30553"></a>
Special cases:<p>
<ul><a name="7066"></a>
<li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument.
<a name="7067"></a>
<li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.
</ul><p><a name="13963"></a>
<p><strong>20.11.18	</strong> <code>public static int round(float a)</code>
<p>
<a name="31536"></a>
<p><i>Round numbers are always false.</i><br>
<a name="36309"></a>
&#151;Samuel Johnson (1709-1784)</p>
<p>
<a name="6922"></a>
The result is rounded to an integer by adding <img src="laanc39.gif">, taking the floor of the result, 
and casting the result to type <code>int</code>.
<p><a name="6927"></a>
In other words, the result is equal to the value of the expression:<p>
<pre><a name="6928"></a>(int)Math.floor(a + 0.5f)
</pre><p><a name="30555"></a>
Special cases:<p>
<ul><a name="6935"></a>
<li>If the argument is NaN, the result is <code>0</code>.
<a name="6979"></a>
<li>If the argument is negative infinity, or indeed any value less than or equal to the value of <code>Integer.MIN_VALUE</code> <a href="20_7.htm#2390">(&#167;20.7.1)</a>, the result is equal to the value of <code>Integer.MIN_VALUE</code>.
<a name="6936"></a>
<li>If the argument is positive infinity, or indeed any value greater than or equal to the value of <code>Integer.MAX_VALUE</code> <a href="20_7.htm#2391">(&#167;20.7.2)</a>, the result is equal to the value of <code>Integer.MAX_VALUE</code>.
</ul><p><a name="13964"></a>
<p><strong>20.11.19	</strong> <code>public static long round(double a)</code>
<p>
<a name="6989"></a>
The result is rounded to an integer by adding <img src="laanc40.gif">, taking the floor of the result, 
and casting the result to type <code>long</code>.
<p><a name="6990"></a>
In other words, the result is equal to the value of the expression:<p>
<pre><a name="6991"></a>(long)Math.floor(a + 0.5d)
</pre><p><a name="30557"></a>
Special cases:<p>
<ul><a name="6992"></a>
<li>If the argument is NaN, the result is <code>0</code>.
<a name="6993"></a>
<li>If the argument is negative infinity, or indeed any value less than or equal to the value of <code>Long.MIN_VALUE</code> <a href="20_7.htm#2390">(&#167;20.7.1)</a>, the result is equal to the value of <code>Long.MIN_VALUE</code>.
<a name="6997"></a>
<li>If the argument is positive infinity, or indeed any value greater than or equal to the value of <code>Long.MAX_VALUE</code> <a href="20_7.htm#2391">(&#167;20.7.2)</a>, the result is equal to the value of <code>Long.MAX_VALUE</code>.
</ul><p><a name="13965"></a>
<p><strong>20.11.20	</strong> <code>public static double random()</code>
<p>
<a name="7085"></a>
The result is a double value with positive sign, greater than or equal to zero but 
less than <code>1.0</code>, chosen pseudorandomly with (approximately) uniform distribution 
from that range.
<p><a name="7073"></a>
When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression<p>
<pre><a name="7077"></a>new java.util.Random()
</pre><p><a name="7078"></a>
This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else.<p>
<a name="7086"></a>
This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom number generator.<p>
<a name="6676"></a>
<p><strong>20.11.21	</strong> <code>public static int abs(int a)</code>
<p>
<a name="6677"></a>
The result is the absolute value of the argument, if possible.
<p><a name="30562"></a>
If the argument is not negative, the argument is returned.<p>
<a name="6681"></a>
If the argument is negative, the negation of the argument is returned. Note that if the argument is equal to the value of <code>Integer.MIN_VALUE</code> <a href="20_7.htm#2390">(&#167;20.7.1)</a>, the most negative representable <code>int</code> value, the result will be that same negative value.<p>
<a name="6678"></a>
<p><strong>20.11.22	</strong> <code>public static long abs(long a)</code>
<p>
<a name="30564"></a>
The result is the absolute value of the argument, if possible.
<p><a name="34323"></a>
If the argument is not negative, the argument is returned.<p>
<a name="34324"></a>
If the argument is negative, the negation of the argument is returned. Note that if the argument is equal to the value of <code>Long.MIN_VALUE</code> <a href="20_8.htm#2397">(&#167;20.8.1)</a>, the most negative representable <code>long</code> value, the result will be that same negative value.<p>
<a name="13968"></a>
<p><strong>20.11.23	</strong> <code>public static float abs(float a)</code>
<p>
<a name="6703"></a>
The argument is returned with its sign changed to be positive.
<p><a name="30576"></a>
Special cases:<p>
<ul><a name="19835"></a>
<li>If the argument is positive zero or negative zero, the result is positive zero.
<a name="7334"></a>
<li>If the argument is infinite, the result is positive infinity.
<a name="6724"></a>
<li>If the argument is NaN, the result is NaN.
</ul><p><a name="6753"></a>
In other words, the result is equal to the value of the expression:
<p><pre><a name="6754"></a>Float.intBitsToFloat(0x7fffffff &amp; Float.floatToIntBits(a))
</pre><p><a name="25025"></a>
[This specification for the method <code>abs</code> is scheduled for introduction in Java version 1.1. In previous versions of Java, <code>abs(-0.0f)</code> returns <code>-0.0f</code>, which is not correct.]<p>
<a name="13969"></a>
<p><strong>20.11.24	</strong> <code>public static double abs(double a)</code>
<p>
<a name="6736"></a>
The argument is returned with its sign changed to be positive.
<p><a name="30578"></a>
Special cases:<p>
<ul><a name="6737"></a>
<li>If the argument is positive zero or negative zero, the result is positive zero.
<a name="6738"></a>
<li>If the argument is infinite, the result is positive infinity.
<a name="6739"></a>
<li>If the argument is NaN, the result is NaN.
</ul><p><a name="6757"></a>
In other words, the result is equal to the value of the expression:
<p><pre><a name="6758"></a>Double.longBitsToDouble((Double.doubleToLongBits(a)&lt;&lt;1)&gt;&gt;&gt;1)
</pre><p><a name="25041"></a>
[This specification for the method <code>abs</code> is scheduled for introduction in Java version 1.1. In previous versions of Java, <code>abs(-0.0d)</code> returns <code>-0.0d</code>, which is not correct.]<p>
<a name="13974"></a>
<p><strong>20.11.25	</strong> <code>public static int min(int a, int b)</code>
<p>
<a name="31557"></a>
<p><i>E duobus malis minimum eligendum.</i><br>
<a name="36313"></a>
&#151;Marcus Tullius Cicero (106-43 B. C.), <i>De officiis</i>, iii</p>
<a name="6787"></a>
<p>The result is the smaller of the two arguments-that is, the one closer to the value 
of <code>Integer.MIN_VALUE</code> <a href="20_7.htm#2390">(&#167;20.7.1)</a>. If the arguments have the same value, the 
result is that same value.
<p><a name="13975"></a>
<p><strong>20.11.26	</strong> <code>public static long min(long a, long b)</code>
<p>
<a name="31542"></a>
<p><i>Of harmes two the lesse is for to cheese.</i><br>
<a name="36318"></a>
&#151;Geoffrey Chaucer (1328-1400), <i>Troilus and Criseyde</i>, Book ii</p>
<p>
<a name="6796"></a>
The result is the smaller of the two arguments-that is, the one closer to the value 
of <code>Long.MIN_VALUE</code> <a href="20_8.htm#2397">(&#167;20.8.1)</a>. If the arguments have the same value, the result is 
that same value.
<p><a name="13976"></a>
<p><strong>20.11.27	</strong> <code>public static float min(float a, float b)</code>
<p>
<a name="31561"></a>
<p><i>Of two evils, the less is always to be chosen.</i><br>
<a name="36319"></a>
&#151;Thomas a Kempis (1380-1471), <i>Imitation of Christ</i>, Book iii, chapter 12</p>
<p>
<a name="6837"></a>
The result is the smaller of the two arguments-that is, the one closer to negative 
infinity. If the arguments have the same value, the result is that same value.
<p><a name="30580"></a>
Special cases:<p>
<ul><a name="6903"></a>
<li>If one argument is positive zero and the other is negative zero, the result is negative zero.
<a name="6845"></a>
<li>If either argument is NaN, the result is NaN.
</ul><p><a name="25085"></a>
[This specification for the method <code>min</code> is scheduled for introduction in Java version 1.1. In previous versions of Java, <code>min(0.0f,</code> <code>-0.0f)</code> returns <code>0.0f</code>, which is not correct.]<p>
<a name="13977"></a>
<p><strong>20.11.28	</strong> <code>public static double min(double a, double b)</code>
<p>
<a name="6847"></a>
<p><i>Of two evils I have chose the least.</i><br>
<a name="36320"></a>
&#151;Matthew Prior (1664-1721), <i>Imitation of Horace</i></p>
<p>
<a name="31572"></a>
The result is the smaller of the two arguments-that is, the one closer to negative 
infinity. If the arguments have the same value, the result is that same value.
<p><a name="30582"></a>
Special cases:<p>
<ul><a name="6911"></a>
<li>If one argument is positive zero and the other is negative zero, the result is negative zero.
<a name="6848"></a>
<li>If either argument is NaN, the result is NaN.
</ul><p><a name="25094"></a>
[This specification for the method <code>min</code> is scheduled for introduction in Java version 1.1. In previous versions of Java, <code>min(0.0d,</code> <code>-0.0d)</code> returns <code>0.0d</code>, which is not correct.]<p>
<a name="6813"></a>
<p><strong>20.11.29	</strong> <code>public static int max(int a, int b)</code>
<p>
<a name="6814"></a>
The result is the larger of the two arguments-that is, the one closer to the value of 
<code>Integer.MAX_VALUE</code> <a href="20_7.htm#2391">(&#167;20.7.2)</a>. If the arguments have the same value, the result 
is that same value.
<p><a name="6818"></a>
<p><strong>20.11.30	</strong> <code>public static long max(long a, long b)</code>
<p>
<a name="6819"></a>
The result is the larger of the two arguments-that is, the one closer to the value of 
<code>Long.MAX_VALUE</code> <a href="20_8.htm#14434">(&#167;20.8.2)</a>. If the arguments have the same value, the result is 
that same value.
<p><a name="6823"></a>
<p><strong>20.11.31	</strong> <code>public static float max(float a, float b)</code>
<p>
<a name="6852"></a>
The result is the larger of the two arguments-that is, the one closer to positive 
infinity. If the arguments have the same value, the result is that same value.
<p><a name="30584"></a>
Special cases:<p>
<ul><a name="6915"></a>
<li>If one argument is positive zero and the other is negative zero, the result is positive zero.
<a name="6853"></a>
<li>If either argument is NaN, the result is NaN.
</ul><p><a name="25110"></a>
[This specification for the method <code>max</code> is scheduled for introduction in Java version 1.1. In previous versions of Java, <code>max(-0.0f,</code> <code>0.0f)</code> returns <code>-0.0f</code>, which is not correct.]<p>
<a name="6824"></a>
<p><strong>20.11.32	</strong> <code>public static double max(double a, double b)</code>
<p>
<a name="6858"></a>
The result is the larger of the two arguments-that is, the one closer to positive 
infinity. If the arguments have the same value, the result is that same value.
<p><a name="30586"></a>
Special cases:<p>
<ul><a name="6919"></a>
<li>If one argument is positive zero and the other is negative zero, the result is positive zero.
<a name="6859"></a>
<li>If either argument is NaN, the result is NaN.
</ul><p><a name="31504"></a>
[This specification for the method 
<code>max</code> is scheduled for introduction in Java version 1.1. 
In previous versions of 
Java, <code>max(-0.0d,</code> <code>0.0d)</code> returns <code>-0.0d</code>, which is not correct.].
<p><i>In mathematics he was greater<br>
Than Tycho Brahe or Erra Pater<br>
For he, by geometric scale,<br>
Could take the size of pots of ale;<br>
Resolve, by sines and tangents straight<br>
Whether bread or butter wanted weight;<br>
And wisely tell what hour o' the day<br>
The clock does strike, by algebra.<br>
</i>&#151;Samuel Butler, <i>Hudibras</i>, Part I, canto i</p>
<p>
<a name="25132"></a>
<p>


</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>22.22 The Class java.io.PrintStream</title>
<META NAME=MS-HAID CONTENT="22_22">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>22.22	 The Class java.io.PrintStream</h1>
<a name="29906"></a>
<p>
<a name="29907"></a>
A <code>PrintStream</code> adds functionality to another output stream-namely, the ability 
to print representations of various data values conveniently. Two other features are 
provided as well. Unlike other output streams, a <code>PrintStream</code> never throws an 
<code>IOException</code>; instead, exceptional situations merely set an internal flag that can 
be tested by the <code>checkError</code> method. Optionally, a <code>PrintStream</code> can be created 
so as to "autoflush"; this means that after an array of bytes is written, or after a 
single byte equal to <code>'\n'</code> is written, the <code>flush</code> method is automatically invoked.
<p><pre><a name="29908"></a>public class <code><b>PrintStream</b></code> extends FilterOutputStream {
<a name="29909"></a>	public <code><b>PrintStream</b></code>(OutputStream out);
<a name="29910"></a>	public <code><b>PrintStream</b></code>(OutputStream out, boolean autoflush);
<a name="29911"></a>	public void <code><b>write</b></code>(int b);
<a name="29912"></a>	public void <code><b>write</b></code>(byte[] b, int off, int len)
<a name="32497"></a>		throws NullPointerException, IndexOutOfBoundsException;
<a name="29913"></a>	public void <code><b>flush</b></code>();
<a name="29914"></a>	public void <code><b>close</b></code>();
<a name="29915"></a>	public boolean <code><b>checkError</b></code>();
<a name="29916"></a>	public void <code><b>print</b></code>(Object obj);
<a name="29917"></a>	public void <code><b>print</b></code>(String s);
<a name="29918"></a>	public void <code><b>print</b></code>(char[] s) throws NullPointerException;
<a name="29919"></a>	public void <code><b>print</b></code>(char c);
<a name="29920"></a>	public void <code><b>print</b></code>(int i);
<a name="29921"></a>	public void <code><b>print</b></code>(long l);
<a name="29922"></a>	public void <code><b>print</b></code>(float f);
<a name="29923"></a>	public void <code><b>print</b></code>(double d);
<a name="29924"></a>	public void <code><b>print</b></code>(boolean b);
<a name="29925"></a>	public void <code><b>println</b></code>();
<a name="29926"></a>	public void <code><b>println</b></code>(Object obj);
<a name="31652"></a>	public void <code><b>println</b></code>(String s);
<a name="31653"></a>	public void <code><b>println</b></code>(char[] s) throws NullPointerException;
<a name="31654"></a>	public void <code><b>println</b></code>(char c);
<a name="29930"></a>	public void <code><b>println</b></code>(int i);
<a name="29931"></a>	public void <code><b>println</b></code>(long l);
<a name="29932"></a>	public void <code><b>println</b></code>(float f);
<a name="29933"></a>	public void <code><b>println</b></code>(double d);
<a name="29934"></a>	public void <code><b>println</b></code>(boolean b);
<a name="29935"></a>}
</pre><p><a name="29936"></a>
<p><strong>22.22.1	</strong> <code>public PrintStream(OutputStream out)</code>
<p>
<a name="29937"></a>
This constructor initializes a newly created <code>PrintStream</code> by saving its argument, 
the output stream <code>out</code>, for later use. This stream will not autoflush.
<p><a name="29941"></a>
<p><strong>22.22.2	</strong> <code>public PrintStream(OutputStream out, boolean autoflush)</code>
<p>
<a name="29942"></a>
This constructor initializes a newly created <code>PrintStream</code> by saving its argument, 
the output stream <code>out</code>, for later use. This stream will autoflush if and only if 
<code>autoflush</code> is <code>true</code>.
<p><a name="29947"></a>
<p><strong>22.22.3	</strong> <code>public void write(int b)</code>
<p>
<a name="29951"></a>
See the general contract of the <code>write</code> method of <code>OutputStream</code> <a href="22_15.htm#29411">(&#167;22.15.1)</a>.
<p><a name="29955"></a>
Overrides the <code>write</code> method of <code>FilterOutputStream</code> <a href="22_19.htm#29666">(&#167;22.19.3)</a>.<p>
<a name="29956"></a>
<p><strong>22.22.4	</strong> <code>public void write(byte[] b, int off, int len)<br>throws NullPointerException,  &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="29960"></a>
See the general contract of the <code>write</code> method of <code>OutputStream</code> <a href="22_15.htm#29426">(&#167;22.15.3)</a>.
<p><a name="29964"></a>
Overrides the <code>write</code> method of <code>FilterOutputStream</code> <a href="22_19.htm#29680">(&#167;22.19.5)</a>.<p>
<a name="29965"></a>
<p><strong>22.22.5	</strong> <code>public void flush()</code>
<p>
<a name="29969"></a>
See the general contract of the <code>flush</code> method of <code>OutputStream</code> <a href="22_15.htm#29440">(&#167;22.15.4)</a>.
<p><a name="29973"></a>
Overrides the <code>flush</code> method of <code>FilterOutputStream</code> <a href="22_19.htm#29687">(&#167;22.19.6)</a>.<p>
<a name="29974"></a>
<p><strong>22.22.6	</strong> <code>public void close()</code>
<p>
<a name="29978"></a>
See the general contract of the <code>close</code> method of <code>OutputStream</code> <a href="22_15.htm#29445">(&#167;22.15.5)</a>.
<p><a name="29982"></a>
Overrides the <code>close</code> method of <code>FilterOutputStream</code> <a href="22_19.htm#29694">(&#167;22.19.7)</a>.<p>
<a name="29983"></a>
<p><strong>22.22.7	</strong> <code>public boolean checkError()</code>
<p>
<a name="29984"></a>
The result is <code>true</code> if and only if this output stream has ever encountered any kind 
of trouble-that is, if any operation on the contained output stream has ever 
resulted in an <code>IOException</code> other than an <code>InterruptedIOException</code>. If an 
operation &#32;on the contained output stream throws an <code>InterruptedIOException</code>, 
then the <code>PrintStream</code> class converts the exception back to an interrupt by doing:
<p><pre><a name="29985"></a>Thread.currentThread().interrupt();
</pre><p><a name="29986"></a>
or the equivalent.
<p><a name="29988"></a>
<p><strong>22.22.8	</strong> <code>public void print(Object obj)</code>
<p>
<a name="29989"></a>
The low-order bytes of the characters in the <code>String</code> that would be produced by 
<code>String.valueOf(obj)</code> <a href="20_12.htm#14015">(&#167;20.12.38)</a> are written, in order, to the contained output 
stream in exactly the manner of the <code>write</code> method <a href="22_22.htm#29947">(&#167;22.22.3)</a>.
<p><a name="29997"></a>
<p><strong>22.22.9	</strong> <code>public void print(String s)</code>
<p>
<a name="29998"></a>
The low-order bytes of the characters in the string <code>s</code> are written, in order, to the 
contained output stream in exactly the manner of the <code>write</code> method <a href="22_22.htm#29947">(&#167;22.22.3)</a>. 
If &#32;<code>s</code> is <code>null</code>, then the low-order bytes of the four characters <code>n</code>, <code>u</code>, <code>l</code>, <code>l</code> are written to 
the contained output stream.
<p><a name="30003"></a>
<p><strong>22.22.10	</strong> <code>public void print(char[] s) throws NullPointerException</code>
<p>
<a name="31623"></a>
The low-order bytes of the characters in the character array <code>s</code> are written, in order, 
to the contained output stream in exactly the manner of the <code>write</code> method 
<a href="22_22.htm#29947">(&#167;22.22.3)</a>.
<p><a name="31646"></a>
If <code>s</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.<p>
<a name="31628"></a>
<p><strong>22.22.11	</strong> <code>public void print(boolean b)</code>
<p>
<a name="30010"></a>
The low-order bytes of the characters in the <code>String</code> that would be produced by 
<code>String.valueOf(b)</code> <a href="20_12.htm#14020">(&#167;20.12.41)</a> as a string are written, in order, to the contained 
output stream in exactly the manner of the <code>write</code> method <a href="22_22.htm#29947">(&#167;22.22.3)</a>.
<p><a name="30018"></a>
<p><strong>22.22.12	</strong> <code>public void print(char c)</code>
<p>
<a name="30019"></a>
The low-order byte of the character <code>c</code> is written to the contained output stream in 
exactly the manner of the <code>write</code> method <a href="22_22.htm#29947">(&#167;22.22.3)</a>.
<p><a name="30024"></a>
<p><strong>22.22.13	</strong> <code>public void print(int i)</code>
<p>
<a name="30025"></a>
The low-order bytes of the characters in the <code>String</code> that would be produced by 
<code>String.valueOf(i)</code> <a href="20_12.htm#14022">(&#167;20.12.43)</a> as a string are written, in order, to the contained 
output stream in exactly the manner of the <code>write</code> method <a href="22_22.htm#29947">(&#167;22.22.3)</a>.
<p><a name="30033"></a>
<p><strong>22.22.14	</strong> <code>public void print(long l)</code>
<p>
<a name="30034"></a>
The low-order bytes of the characters in the <code>String</code> that would be produced by 
<code>String.valueOf(l)</code> <a href="20_12.htm#14023">(&#167;20.12.44)</a> as a string are written, in order, to the contained 
output stream in exactly the manner of the <code>write</code> method <a href="22_22.htm#29947">(&#167;22.22.3)</a>.
<p><a name="30042"></a>
<p><strong>22.22.15	</strong> <code>public void print(float f)</code>
<p>
<a name="30043"></a>
The low-order bytes of the characters in the <code>String</code> that would be produced by 
<code>String.valueOf(f)</code> <a href="20_12.htm#14024">(&#167;20.12.45)</a> as a string are written, in order, to the contained 
output stream in exactly the manner of the <code>write</code> method <a href="22_22.htm#29947">(&#167;22.22.3)</a>.
<p><a name="30051"></a>
<p><strong>22.22.16	</strong> <code>public void print(double d)</code>
<p>
<a name="30052"></a>
The low-order bytes of the characters in the <code>String</code> that would be produced by 
<code>String.valueOf(d)</code> <a href="20_12.htm#14025">(&#167;20.12.46)</a> as a string are written, in order, to the contained 
output stream in exactly the manner of the <code>write</code> method <a href="22_22.htm#29947">(&#167;22.22.3)</a>.
<p><a name="30059"></a>
<p><strong>22.22.17	</strong> <code>public void println()</code>
<p>
<a name="30060"></a>
The low-order byte of the newline character <code>'\n'</code> is written to the contained output stream in exactly the manner of the <code>write</code> method <a href="22_22.htm#29947">(&#167;22.22.3)</a>.
<p><a name="30064"></a>
<p><strong>22.22.18	</strong> <code>public void println(Object obj)</code>
<p>
<a name="30068"></a>
This is exactly the same as <code>print(obj)</code> <a href="22_22.htm#29988">(&#167;22.22.8)</a> followed by writing the low-
order byte of the newline character <code>'\n'</code> to the contained output stream.
<p><a name="30070"></a>
<p><strong>22.22.19	</strong> <code>public void println(String s)</code>
<p>
<a name="30074"></a>
This is exactly the same as <code>print(s)</code> <a href="22_22.htm#29997">(&#167;22.22.9)</a> followed by writing the low-
order byte of the newline character <code>'\n'</code> to the contained output stream.
<p><a name="30075"></a>
<p><strong>22.22.20	</strong> <code>public void println(char[] s) throws NullPointerException</code>
<p>
<a name="30079"></a>
This is exactly the same as <code>print(s)</code> <a href="22_22.htm#30003">(&#167;22.22.10)</a> followed by writing the low-
order byte of the newline character <code>'\n'</code> to the contained output stream.
<p><a name="31645"></a>
If <code>s</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.<p>
<a name="30080"></a>
<p><strong>22.22.21	</strong> <code>public void println(boolean b)</code>
<p>
<a name="30084"></a>
This is exactly the same as <code>print(b)</code> <a href="22_22.htm#31628">(&#167;22.22.11)</a> followed by writing the low-
order byte of the newline character <code>'\n'</code> to the contained output stream.
<p><a name="30085"></a>
<p><strong>22.22.22	</strong> <code>public void println(char c)</code>
<p>
<a name="30089"></a>
This is exactly the same as <code>print(c)</code> <a href="22_22.htm#30018">(&#167;22.22.12)</a> followed by writing the low-
order byte of the newline character <code>'\n'</code> to the contained output stream.
<p><a name="30090"></a>
<p><strong>22.22.23	</strong> <code>public void println(int i)</code>
<p>
<a name="30094"></a>
This is exactly the same as <code>print(i)</code> <a href="22_22.htm#30024">(&#167;22.22.13)</a> followed by writing the low-
order byte of the newline character <code>'\n'</code> to the contained output stream.
<p><a name="30095"></a>
<p><strong>22.22.24	</strong> <code>public void println(long l)</code>
<p>
<a name="30099"></a>
This is exactly the same as <code>print(l)</code> <a href="22_22.htm#30033">(&#167;22.22.14)</a> followed by writing the low-
order byte of the newline character <code>'\n'</code> to the contained output stream.
<p><a name="30100"></a>
<p><strong>22.22.25	</strong> <code>public void println(float f)</code>
<p>
<a name="30104"></a>
This is exactly the same as <code>print(f)</code> <a href="22_22.htm#30042">(&#167;22.22.15)</a> followed by writing the low-
order byte of the newline character <code>'\n'</code> to the contained output stream.
<p><a name="30105"></a>
<p><strong>22.22.26	</strong> <code>public void println(double d)</code>
<p>
<a name="30109"></a>
This is exactly the same as <code>print(d)</code> <a href="22_22.htm#30051">(&#167;22.22.16)</a> followed by writing the low-
order byte of the newline character <code>'\n'</code> to the contained output stream.
<p>

</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>12.4.3 Implications for Code Generation</title>
<META NAME=MS-HAID CONTENT="12_4_3">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>12.4.3	 Implications for Code Generation</h3>
<a name="44667"></a>
<p>
<a name="44668"></a>
Code generators need to preserve the points of possible initialization of a class or 
interface, inserting an invocation of the initialization procedure just described. If 
this initialization procedure completes normally and the <code>Class</code> object is fully initialized and ready for use, then the invocation of the initialization procedure is no 
longer necessary and it may be eliminated from the code-for example, by patching it out or otherwise regenerating the code.
<p><a name="46847"></a>
Compile-time analysis may, in some cases, be able to eliminate many of the checks that a type has been initialized from the generated code, if an initialization order for a group of related types can be determined. Such analysis must, however, fully account for the fact that Java is concurrent and that initialization code is unrestricted.<p>


</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.5.3 Kinds of Variables</title>
<META NAME=MS-HAID CONTENT="4_5_3">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>4.5.3	 Kinds of Variables</h3>
<a name="28536"></a>
<p>
<a name="10883"></a>
There are seven kinds of variables:
<p><ul>
<a name="10884"></a>
<li>A <i>class variable</i> is a field declared using the keyword <code>static</code> within a class declaration <a href="8_3_1.htm#37544">(&#167;8.3.1.1)</a>, or with or without the keyword <code>static</code> within an interface declaration <a href="9_3.htm#78642">(&#167;9.3)</a>. A class variable is created when its class or interface is loaded <a href="12_2.htm#44459">(&#167;12.2)</a> and is initialized to a default value <a href="4_5_4.htm#10931">(&#167;4.5.4)</a>. The class variable effectively ceases to exist when its class or interface is unloaded <a href="12_8.htm#44850">(&#167;12.8)</a>, after any necessary finalization of the class or interface <a href="12_6.htm#44748">(&#167;12.6)</a> has been completed.
<a name="51516"></a>
<li>An <i>instance variable</i> is a field declared within a class declaration without using the keyword <code>static</code> <a href="8_3_1.htm#37544">(&#167;8.3.1.1)</a>. If a class <code>T</code> has a field <i>a</i> that is an instance variable, then a new instance variable <i>a</i> is created and initialized to a default value <a href="4_5_4.htm#10931">(&#167;4.5.4)</a> as part of each newly created object of class <code>T</code> or of any class that is a subclass of <code>T</code> <a href="8_1_3.htm#21723">(&#167;8.1.3)</a>. The instance variable effectively ceases to exist when the object of which it is a field is no longer referenced, after any necessary finalization of the object <a href="12_6.htm#44748">(&#167;12.6)</a> has been completed.
<a name="10895"></a>
<li><i>Array components</i> are unnamed variables that are created and initialized to default values <a href="4_5_4.htm#10931">(&#167;4.5.4)</a> whenever a new object that is an array is created <a href="15_9.htm#46168">(&#167;15.9)</a>. The array components effectively cease to exist when the array is no longer referenced. See <a href="chap10.htm">&#167;10</a> for a description of arrays.
<a name="24632"></a>
<li><i>Method parameters</i> <a href="8_4_1.htm#38698">(&#167;8.4.1)</a> name argument values passed to a method. For every parameter declared in a method declaration, a new parameter variable is created each time that method is invoked <a href="15_11.htm#20448">(&#167;15.11)</a>. The new variable is initialized with the corresponding argument value from the method invocation. The method parameter effectively ceases to exist when the execution of the body of the method is complete.
<a name="24657"></a>
<li><i>Constructor parameters</i> <a href="8_6_1.htm#29488">(&#167;8.6.1)</a> name argument values passed to a constructor. For every parameter declared in a constructor declaration, a new parameter variable is created each time a class instance creation expression <a href="15_8.htm#41147">(&#167;15.8)</a> or explicit constructor invocation <a href="8_6_5.htm#78435">(&#167;8.6.5)</a> invokes that constructor. The new variable is initialized with the corresponding argument value from the creation expression or constructor invocation. The constructor parameter effectively ceases to exist when the execution of the body of the constructor is complete.
<a name="10903"></a>
<li>An <i>exception-handler parameter</i> is created each time an exception is caught by a <code>catch</code> clause of a <code>try</code> statement <a href="14_18.htm#79311">(&#167;14.18)</a>. The new variable is initialized with the actual object associated with the exception (<a href="11_3.htm#44153">&#167;11.3</a>, <a href="14_16.htm#237350">&#167;14.16</a>). The exception-handler parameter effectively ceases to exist when execution of the block associated with the <code>catch</code> clause is complete.
<a name="24801"></a>
<li><i>Local variables</i> are declared by local variable declaration statements <a href="14_3.htm#5920">(&#167;14.3)</a>. Whenever the flow of control enters a block <a href="14_2.htm#24644">(&#167;14.2)</a> or <code>for</code> statement <a href="14_12.htm#24588">(&#167;14.12)</a>, a new variable is created for each local variable declared in a local variable declaration statement immediately contained within that block or <code>for</code> statement. A local variable declaration statement may contain an expression which initializes the variable. The local variable with an initializing expression is not initialized, however, until the local variable declaration statement that declares it is executed. (The rules of definite assignment <a href="chap16.htm">(&#167;16)</a> prevent the value of a local variable from being used before it has been initialized or otherwise assigned a value.) The local variable effectively ceases to exist when the execution of the block or <code>for</code> statement is complete.
</ul>
<a name="24816"></a>
<p>Were it not for one exceptional situation, a local variable could always be regarded as being created when its local variable declaration statement is executed. The exceptional situation involves the <code>switch</code> statement <a href="14_9.htm#35518">(&#167;14.9)</a>, where it is possible for control to enter a block but bypass execution of a local variable declaration statement. Because of the restrictions imposed by the rules of definite assignment <a href="chap16.htm">(&#167;16)</a>, however, the local variable declared by such a bypassed local variable declaration statement cannot be used before it has been definitely assigned a value by an assignment expression <a href="15_25.htm#5281">(&#167;15.25)</a>.
<p><a name="24836"></a>
The following example contains several different kinds of variables:<p>
<pre><a name="10918"></a>
class Point {
<a name="45636"></a>	static int numPoints;								// numPoints is a class variable
<a name="50087"></a>	int x, y;								// x and y are instance variables
<a name="50089"></a>	int[] w = new int[10];								// w[0] is an array component
<a name="52523"></a>	int setX(int x) {								// x is a method parameter
<a name="52524"></a>		int oldx = this.x;							// oldx is a local variable
<a name="10925"></a>		this.x = x;
<a name="10926"></a>		return oldx;
<a name="10927"></a>	}
<a name="10928"></a>}
</pre><p>

</body></html>

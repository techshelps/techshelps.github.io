<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>7.4.2 Unnamed Packages</title>
<META NAME=MS-HAID CONTENT="7_4_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>7.4.2	 Unnamed Packages</h3>
<a name="26639"></a>
<p>
<a name="26640"></a>
A compilation unit that has no package declaration is part of an unnamed package. 
As an example, the compilation unit:
<p><pre><a name="35107"></a>
class FirstCall {
<a name="35108"></a>	public static void main(String[] args) {
<a name="35110"></a>		System.out.println("Mr. Watson, come here. "
<a name="35111"></a>									+ "I want you.");
<a name="35112"></a>	}
<a name="35113"></a>}
</pre><p><a name="35114"></a>
defines a very simple compilation unit as part of an unnamed package.
<p><a name="26641"></a>
A Java system must support at least one unnamed package; it may support more than one unnamed package but is not required to do so. Which compilation units are in each unnamed package is determined by the host system.<p>
<a name="35086"></a>
In Java systems that use a hierarchical file system for storing packages, one typical strategy is to associate an unnamed package with each directory; only one unnamed package is available at a time, namely the one that is associated with the "current working directory." The precise meaning of "current working directory" depends on the host system.<p>
<a name="35134"></a>
Unnamed packages are provided by Java principally for convenience when developing small or temporary applications or when just beginning development.<p>
<a name="37842"></a>
Caution must be taken when using unnamed packages. It is possible for a compilation unit in a named package to import a type from an unnamed package, but the compiled version of this compilation unit will likely then work only when that particular unnamed package is "current." For this reason, it is strongly recommended that compilation units of named packages never import types from unnamed packages. It is also recommended that any type declared in an unnamed package not be declared <code>public</code>, to keep them from accidentally being imported by a named package.<p>
<a name="35133"></a>
It is recommended that a Java system provide safeguards against unintended consequences in situations where compilation units of named packages import types from unnamed packages. One strategy is to provide a way to associate with each named package at most one unnamed package, and then to detect and warn about situations in which a named package is used by more than one unnamed package. It is specifically not required-indeed, it is strongly discouraged-for an implementation to support use of a named package by more than one unnamed package by maintaining multiple compiled versions of the named package.<p>


</Font></body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>12.3.4 Implications for Code Generation</title>
<META NAME=MS-HAID CONTENT="12_3_4">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>12.3.4	 Implications for Code Generation</h3>
<a name="44547"></a>
<p>
<a name="44548"></a>
The symbolic references within a group of types may be resolved even before the 
group is loaded <a href="12_2_2.htm#44484">(&#167;12.2.2)</a>, in an implementation that uses a special (non-standard) 
binary format <a href="13_1.htm#44909">(&#167;13.1)</a>. This corresponds to the traditional practice of "linkage 
editing." Even if this is not done, a Java implementation has a lot of flexibility. It 
may resolve all symbolic references from a type at the point of the first linkage 
activity on the type, or defer the resolution of each symbolic reference to the first 
use of that reference.
<p><a name="44555"></a>
We note that the flexibility accorded the Java implementation in the linkage process does not affect correctly formed Java programs, which should never encounter linkage errors.<p>


</body></html>

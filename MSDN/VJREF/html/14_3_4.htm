<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>14.3.4 Execution of Local Variable Declarations</title>
<META NAME=MS-HAID CONTENT="14_3_4">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>14.3.4	 Execution of Local Variable Declarations</h3>
<a name="32717"></a>
<p>
<a name="32574"></a>
A local variable declaration statement is an executable statement. Every time it is 
executed, the declarators are processed in order from left to right. If a declarator 
has an initialization expression, the expression is evaluated and its value is 
assigned to the variable. If a declarator does not have an initialization expression, 
then a Java compiler must prove, using exactly the algorithm given in <a href="chap16.htm">&#167;16</a>, that 
every reference to the variable is necessarily preceded by execution of an assignment to the variable. If this is not the case, then a compile-time error occurs.
<p><a name="32578"></a>
Each initialization (except the first) is executed only if the evaluation of the preceding initialization expression completes normally. Execution of the local variable declaration completes normally only if evaluation of the last initialization expression completes normally; if the local variable declaration contains no initialization expressions, then executing it always completes normally.<p>


</body></html>

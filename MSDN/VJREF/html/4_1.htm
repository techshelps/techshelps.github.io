<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.1 The Kinds of Types and Values</title>
<META NAME=MS-HAID CONTENT="4_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>4.1	 The Kinds of Types and Values</h2>
<a name="11128"></a>
<p>
<a name="10737"></a>
There are two kinds of <i>types</i> in Java: primitive types <a href="4_2.htm#85587">(&#167;4.2)</a> and reference types 
<a href="4_3.htm#9317">(&#167;4.3)</a>. There are, correspondingly, two kinds of data values that can be stored in 
variables, passed as arguments, returned by methods, and operated on: primitive 
values <a href="4_2.htm#85587">(&#167;4.2)</a> and reference values <a href="4_3.htm#9317">(&#167;4.3)</a>.
<p><pre>
<i>Type:<br>
<code>	</code>PrimitiveType<br>
	ReferenceType
</i></pre><p><a name="23953"></a>
There is also a special <i>null type</i>, the type of the expression <code>null</code>, which has no name. Because the null type has no name, it is impossible to declare a variable of the null type or to cast to the null type. The null reference is the only possible value of an expression of null type. The null reference can always be cast to any reference type. In practice, the Java programmer can ignore the null type and just pretend that <code>null</code> is merely a special literal that can be of any reference type.<p>


</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>15.6.1 Left-Hand Operand First</title>
<META NAME=MS-HAID CONTENT="15_6_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>15.6.1	 Left-Hand Operand First</h3>
<a name="18498"></a>
<p>
<a name="4781"></a>
The left-hand operand of a binary operator appears to be fully evaluated before 
any part of the right-hand operand is evaluated. For example, if the left-hand operand contains an assignment to a variable and the right-hand operand contains a 
reference to that same variable, then the value produced by the reference will 
reflect the fact that the assignment occurred first.
<p><a name="18540"></a>
Thus:<p>
<pre><a name="18537"></a>
class Test {
<a name="45395"></a>	public static void main(String[] args) {
<a name="18572"></a>		int i = 2;
<a name="18538"></a>		int j = (i=3) * i;
<a name="18573"></a>		System.out.println(j);
<a name="18574"></a>	}
<a name="18575"></a>}
</pre><p><a name="18539"></a>
prints:
<p><pre><a name="45398"></a><code>9
</code></pre><p><a name="35994"></a>
It is not permitted for it to print <code>6</code> instead of <code>9</code>.
<p><a name="240786"></a>
If the operator is a compound-assignment operator <a href="15_25_2.htm#5304">(&#167;15.25.2)</a>, then evaluation of the left-hand operand includes both remembering the variable that the left-hand operand denotes and fetching and saving that variable's value for use in the implied combining operation. So, for example, the test program:<p>
<pre><a name="18711"></a>
class Test {
<a name="18712"></a>	public static void main(String[] args) {
<a name="18713"></a>		int a = 9;
<a name="18714"></a>		a += (a = 3);									// first example
<a name="18715"></a>		System.out.println(a);
<a name="18716"></a>		int b = 9;
<a name="18717"></a>		b = b + (b = 3);									// second example
<a name="18718"></a>		System.out.println(b);
<a name="18719"></a>	}
<a name="18720"></a>}
</pre><p><a name="18725"></a>
prints:
<p><pre><a name="18726"></a>
12
<a name="18727"></a>12
</pre><p><a name="18728"></a>
because the two assignment statements both fetch and remember the value of the 
left-hand operand, which is <code>9</code>, before the right-hand operand of the addition is 
evaluated, thereby setting the variable to <code>3</code>. It is not permitted for either example 
to produce the result <code>6</code>. Note that both of these examples have unspecified behavior in C, according to the ANSI/ISO standard.
<p><a name="4782"></a>
If evaluation of the left-hand operand of a binary operator completes abruptly, no part of the right-hand operand appears to have been evaluated.<p>
<a name="18857"></a>
Thus, the test program:<p>
<pre><a name="18860"></a>
class Test {
<a name="18861"></a>
	public static void main(String[] args) {
<a name="18877"></a>
		int j = 1;
<a name="18863"></a>
		try {
<a name="18864"></a>			int i = forgetIt() / (j = 2);
<a name="18865"></a>		} catch (Exception e) {
<a name="36034"></a>			System.out.println(e);
<a name="18866"></a>			System.out.println("Now j = " + j);
<a name="18867"></a>		}
<a name="18868"></a>	}
<a name="18869"></a>
	static int forgetIt() throws Exception {
<a name="50187"></a>		throw new Exception("I'm outta here!");
<a name="50189"></a>	}
<a name="18870"></a>}
</pre><p><a name="18858"></a>
prints:
<p><pre><a name="36046"></a>
java.lang.Exception: I'm outta here!
<a name="36047"></a>Now j = 1
</pre><p><a name="18885"></a>
because the left-hand operand <code>forgetIt()</code> of the operator <code>/</code> throws an exception 
before the right-hand operand and its embedded assignment of <code>2</code> to <code>j</code> occurs.
<p>

</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>8.2 Class Members</title>
<META NAME=MS-HAID CONTENT="8_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h2>8.2	 Class Members</h2>
<a name="21831"></a>
<p>
<a name="228354"></a>
<a name="230297"></a>
<a name="40942"></a>
The members of a class type are all of the following:
<p><ul><a name="40946"></a>
<li>Members inherited from its direct superclass <a href="8_1_3.htm#21723">(&#167;8.1.3)</a>, except in class <code>Object</code>, which has no direct superclass
<a name="45862"></a>
<li>Members inherited from any direct superinterfaces <a href="8_1_4.htm#34031">(&#167;8.1.4)</a>
<a name="45866"></a>
<li>Members declared in the body of the class <a href="8_1_5.htm#18988">(&#167;8.1.5)</a>
</ul><p><a name="30394"></a>
Members of a class that are declared <code>private</code> are not inherited by subclasses of that class. Only members of a class that are declared <code>protected</code> or <code>public</code> are inherited by subclasses declared in a package other than the one in which the class is declared.<p>
<a name="230007"></a>
Constructors and static initializers are not members and therefore are not inherited.<p>
<a name="36731"></a>
The example:<p>
<pre><a name="14608"></a>
class Point {
<a name="14609"></a>	int x, y;
<a name="36739"></a>	private Point() { reset(); }
<a name="14610"></a>	Point(int x, int y) { this.x = x; this.y = y; }
<a name="16317"></a>	private void reset() { this.x = 0; this.y = 0; }
<a name="14611"></a>}
<br><a name="14612"></a>
class ColoredPoint extends Point {
<a name="36760"></a>	int color;
<a name="36761"></a>	void clear() { reset(); }														// error
<a name="36762"></a>}
<br><a name="14615"></a>
class Test {
<a name="14616"></a>	public static void main(String[] args) {
<a name="14617"></a>		ColoredPoint c = new ColoredPoint(0, 0);													// error
<a name="16316"></a>		c.reset();													// error
<a name="14618"></a>	}
<a name="14619"></a>}
</pre><p><a name="14620"></a>
causes four compile-time errors:
<p><ul><a name="16328"></a>
<li>An error occurs because <code>ColoredPoint</code> has no constructor declared with two integer parameters, as requested by the use in <code>main</code>. This illustrates the fact that <code>ColoredPoint</code> does not inherit the constructors of its superclass <code>Point</code>.
<a name="16329"></a>
<li>Another error occurs because <code>ColoredPoint</code> declares no constructors, and therefore a default constructor for it is automatically created <a href="8_6_7.htm#16823">(&#167;8.6.7)</a>, and this default constructor is equivalent to:
<a name="14624"></a>	ColoredPoint() { super(); }
</ul>
<p>
<a name="14625"></a>
which invokes the constructor, with no arguments, for the direct superclass of the class <code>ColoredPoint</code>. The error is that the constructor for <code>Point</code> that takes no arguments is <code>private</code>, and therefore is not accessible outside the class <code>Point</code>, even through a superclass constructor invocation <a href="8_6_5.htm#78435">(&#167;8.6.5)</a>.
<p>
<ul><a name="16327"></a>
<li>Two more errors occur because the method <code>reset</code> of class <code>Point</code> is <code>private</code>, and therefore is not inherited by class <code>ColoredPoint</code>. The method invocations in method <code>clear</code> of class <code>ColoredPoint</code> and in method <code>main</code> of class <code>Test</code> are therefore not correct.
</ul><p>

</Font></body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.2 Names</title>
<META NAME=MS-HAID CONTENT="6_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>6.2	 Names</h2>
<a name="31692"></a>
<p>
<a name="61760"></a>
A <i>name</i> is used to refer to an entity declared in a Java program.
<p><a name="61763"></a>
There are two forms of names: simple names and qualified names. A <i>simple name</i> is a single identifier. A <i>qualified name</i> consists of a name, a "<code>.</code>" token, and an identifier.<p>
<a name="21637"></a>
In determining the meaning of a name <a href="6_5.htm#20569">(&#167;6.5)</a>, the Java language takes into account the context in which the name appears. It distinguishes among contexts where a name must denote (refer to) a package <a href="6_5_3.htm#22349">(&#167;6.5.3)</a>, a type <a href="6_5_4.htm#21721">(&#167;6.5.4)</a>, a variable or value in an expression <a href="6_5_5.htm#21650">(&#167;6.5.5)</a>, or a method <a href="6_5_6.htm#21652">(&#167;6.5.6)</a>.<p>
<a name="33483"></a>
Not all identifiers in Java programs are a part of a name. Identifiers are also used in the following situations:<p>
<ul><a name="33485"></a>
<li>In declarations <a href="6_1.htm#33757">(&#167;6.1)</a>, where an identifier may occur to specify the name by which the declared entity will be known
<a name="33490"></a>
<li>In field access expressions <a href="15_10.htm#41267">(&#167;15.10)</a>, where an identifier occurs after a "<code>.</code>" token to indicate a member of an object that is the value of an expression or the keyword <code>super</code> that appears before the "<code>.</code>" token
<a name="33491"></a>
<li>In some method invocation expressions <a href="15_11.htm#20448">(&#167;15.11)</a>, where an identifier may occur after a "<code>.</code>" token and before a "<code>(</code>" token to indicate a method to be invoked for an object that is the value of an expression or the keyword <code>super</code> that appears before the "<code>.</code>" token
<a name="33492"></a>
<li>As labels in labeled statements <a href="14_6.htm#78993">(&#167;14.6)</a> and in <code>break</code> <a href="14_13.htm#6842">(&#167;14.13)</a> and <code>continue</code> <a href="14_14.htm#6122">(&#167;14.14)</a> statements that refer to statement labels
</ul><p><a name="38317"></a>
In the example:
<p><pre><a name="38318"></a>
class Test {
<a name="38319"></a>	public static void main(String[] args) {
<a name="31441"></a>		Class c = System.out.getClass();
<a name="38320"></a>		System.out.println(c.toString().length() +
<a name="31466"></a>								args[0].length() + args.length);
<a name="38324"></a>	}
<a name="38325"></a>}
</pre><p><a name="61602"></a>
the identifiers <code>Test</code>, <code>main</code>, and the first occurrences of <code>args</code> and <code>c</code> are not names; 
rather, they are used in declarations to specify the names of the declared entities. 
The names <code>String</code>, <code>Class</code>, <code>System.out.getClass,</code> <code>System.out.println</code>, 
<code>c.toString</code>, <code>args</code>, and <code>args.length</code> appear in the example. The first occurrence of <code>length</code> is not a name, but rather an identifier appearing in a method invocation expression <a href="15_11.htm#20448">(&#167;15.11)</a>. The second occurrence of <code>length</code> is not a name, but 
rather an identifier appearing in a method invocation expression <a href="15_11.htm#20448">(&#167;15.11)</a>.
<p><a name="61609"></a>
The identifiers used in labeled statements and their associated <code>break</code> and <code>continue</code> statements are completely separate from those used in declarations. Thus, the following code is valid:<p>
<pre><a name="38178"></a>
class TestString {
<br><a name="38277"></a>	char[] value;
<br><br><a name="38278"></a>	int offset, count;
<br><a name="38262"></a>	int indexOf(TestString str, int fromIndex) {
<a name="38179"></a>		char[] v1 = value, v2 = str.value;
<a name="38309"></a>		int max = offset + (count - str.count);
<a name="31499"></a>		int start = offset + ((fromIndex &lt; 0) ? 0 : fromIndex);
<a name="38310"></a>	i:
<a name="38312"></a>		for (int i = start; i &lt;= max; i++)<br>
		{
<a name="38184"></a>			int n = str.count, j = i, k = str.offset;
<a name="38187"></a>			while (n-- != 0) {
<a name="38188"></a>				if (v1[j++] != v2[k++])
<a name="38189"></a>					continue i;
<a name="38191"></a>			} 
<a name="38241"></a>			return i - offset;
<a name="38251"></a>		}
<a name="38194"></a>		return -1;
<a name="38266"></a>	}
<a name="38274"></a>}
</pre><p><a name="54045"></a>
This code was taken from a version of the class <code>String</code> and its method <code>indexOf</code> 
<a href="20_12.htm#30903">(&#167;20.12.26)</a>, where the label was originally called <code>test</code>. Changing the label to 
have the same name as the local variable <code>i</code> does not hide the label in the scope of 
the declaration of <code>i</code>. The identifier <code>max</code> could also have been used as the statement 
label; the label would not hide the local variable <code>max</code> within the labeled statement.
<p>

</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>14.19 Unreachable Statements</title>
<META NAME=MS-HAID CONTENT="14_19">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>14.19	 Unreachable Statements</h2>
<a name="236365"></a>
<p>
<a name="236370"></a>
<p><i>That looks like a path.<br>
Is that the way to reach the top from here?</i><br>
<a name="238493"></a>
&#151;Robert Frost, <i>The Mountain</i> (1915)</p>
<a name="237365"></a>
<p>It is a compile-time error if a statement cannot be executed because it is <i>unreachable</i>. Every Java compiler must carry out the conservative flow analysis specified 
here to make sure all statements are reachable.
<p><a name="237366"></a>
This section is devoted to a precise explanation of the word "reachable." The idea is that there must be some possible execution path from the beginning of the constructor, method, or static initializer that contains the statement to the statement itself. The analysis takes into account the structure of statements. Except for the special treatment of <code>while</code>, <code>do</code>, and <code>for</code> statements whose condition expression has the constant value <code>true</code>, the values of expressions are not taken into account in the flow analysis. For example, a Java compiler will accept the code:<p>
<pre><a name="79345"></a>
{
<a name="79347"></a>	int n = 5;
<a name="79348"></a>	while (n &gt; 7) n = 2;
<a name="79349"></a>}
</pre><p><a name="79350"></a>
even though the value of <code>n</code> is known at compile time and in principle it can be 
known at compile time that the assignment to <code>k</code> can never be executed. A Java 
compiler must operate according to the rules laid out in this section.
<p><a name="79351"></a>
The rules in this section define two technical terms:<p>
<ul><a name="79352"></a>
<li>whether a statement is <i>reachable</i>
<a name="79353"></a>
<li>whether a statement <i>can complete normally</i>
</ul><p><a name="79354"></a>
The definitions here allow a statement to complete normally only if it is reachable.
<p><a name="236611"></a>
To shorten the description of the rules, the customary abbreviation "iff" is used to mean "if and only if."<p>
<a name="236612"></a>
The rules are as follows:<p>
<ul><a name="236613"></a>
<li>The block that is the body of a constructor, method, or static initializer is reachable.
<a name="160362"></a>
<li>An empty block that is not a switch block can complete normally iff it is reachable. A nonempty block that is not a switch block can complete normally iff the last statement in it can complete normally. The first statement<i></i> in a nonempty block that is not a switch block is reachable iff the block is reachable. Every other statement <i>S</i><i></i> in a nonempty block that is not a switch block is reachable iff the statement preceding <i>S</i><i></i> can complete normally.
<a name="160365"></a>
<li>A local variable declaration statement can complete normally iff it is reachable.
<a name="79357"></a>
<li>An empty statement can complete normally iff it is reachable.
<a name="79359"></a>
<li>A labeled statement can complete normally if at least one of the following is true:
<ul>
<a name="21184"></a>
<li>The contained statement can complete normally.
<a name="21188"></a>
<li>There is a reachable <code>break</code> statement that exits the labeled statement.
</ul>
</ul>
<p><a name="21187"></a>
The contained statement is reachable iff the labeled statement is reachable.
<p><ul><a name="79360"></a>
<li>An expression statement can complete normally iff it is reachable.
<a name="236410"></a>
<li>The <code>if</code> statement, whether or not it has an <code>else</code> part, is handled in an unusual manner. For this reason, it is discussed separately at the end of this section.
<a name="79366"></a>
<li>A <code>switch</code> statement can complete normally iff at least one of the following is true:
<ul>
<a name="79367"></a>
<li>The last statement in the switch block can complete normally.
<a name="237563"></a>
<li>The switch block is empty or contains only switch labels.
<a name="237564"></a>
<li>There is at least one switch label after the last switch block statement group.
<a name="79368"></a>
<li>There is a reachable <code>break</code> statement that exits the <code>switch</code> statement.
</ul>
<a name="237548"></a>
<li>A switch block is reachable iff its <code>switch</code> statement is reachable.
<a name="237550"></a>
<li>A statement in a switch block is reachable iff its <code>switch</code> statement is reachable and at least one of the following is true:
<ul>
<a name="79370"></a>
<li>It bears a <code>case</code> or <code>default</code> label.
<a name="79371"></a>
<li>There is a statement preceding it in the <code>switch</code> block and that preceding statement can complete normally.
</ul>
<a name="79372"></a>
<li>A <code>while</code> statement can complete normally iff at least one of the following is true:
<ul>
<a name="79373"></a>
<li>The <code>while</code> statement is reachable and the condition expression is not a constant expression with value <code>true</code>.
<a name="79374"></a>
<li>There is a reachable <code>break</code> statement that exits the <code>while</code> statement.
</ul>
</ul>
<a name="79375"></a>
<p>
The contained statement is reachable iff the <code>while</code> statement is reachable and the condition expression is not a constant expression whose value is <code>false</code>.
<p>
<ul><a name="79376"></a>
<li>A <code>do</code> statement can complete normally iff at least one of the following is true:
<ul>
<a name="79377"></a>
<li>The contained statement can complete normally and the condition expression is not a constant expression with value <code>true</code>.
<a name="79378"></a>
<li>There is a reachable <code>break</code> statement that exits the <code>do</code> statement.
</ul>
</ul>
<a name="79379"></a>
<p>
The contained statement is reachable iff the <code>do</code> statement is reachable.
<p>
<ul><a name="79380"></a>
<li>A <code>for</code> statement can complete normally iff at least one of the following is true:
<ul>
<a name="79381"></a>
<li>The <code>for</code> statement is reachable, there is a condition expression, and the condition expression is not a constant expression with value <code>true</code>.
<a name="79382"></a>
<li>There is a reachable <code>break</code> statement that exits the <code>for</code> statement.
</ul>
</ul>
<a name="79383"></a>
<p>The contained statement is reachable iff the <code>for</code> statement is reachable and the condition expression is not a constant expression whose value is <code>false</code>.
<p>
<ul><a name="79384"></a>
<li>A <code>break</code>, <code>continue</code>, <code>return</code>, or <code>throw</code> statement cannot complete normally.
<a name="79385"></a>
<li>A <code>synchronized</code> statement can complete normally iff the contained statement can complete normally. The contained statement is reachable iff the <code>synchronized</code> statement is reachable.
<a name="79386"></a>
<li>A <code>try</code> statement can complete normally iff both of the following are true:
<ul>
<a name="79387"></a>
<li>The <code>try</code> block can complete normally or any <code>catch</code> block can complete <code>normally</code>.
<a name="79388"></a>
<li>If the <code>try</code> statement has a <code>finally</code> block, then the <code>finally</code> block can complete normally.
</ul>
<a name="79389"></a>
<li>The <code>try</code> block is reachable iff the <code>try</code> statement is reachable.
<a name="79390"></a>
<li>A <code>catch</code> block <i>C</i> is reachable iff both of the following are true:
<ul>
<a name="79391"></a>
<li>Some expression or <code>throw</code> statement in the <code>try</code> block is reachable and can throw an exception whose type is assignable to the parameter of the <code>catch</code> clause <i>C</i>. (An expression is considered reachable iff the innermost statement containing it is reachable.)
<a name="79392"></a>
<li>There is no earlier <code>catch</code> block <i>A</i> in the <code>try</code> statement such that the type of <i>C</i>'s parameter is the same as or a subclass of the type of <i>A</i>'s parameter.
</ul>
<a name="236212"></a>
<li>If a <code>finally</code> block is present, it is reachable iff the <code>try</code> statement is reachable.
</ul><p><a name="236419"></a>
One might expect the <code>if</code> statement to be handled in the following manner, but these are not the rules that Java actually uses:<p>
<ul><a name="236554"></a>
<li>HYPOTHETICAL: An <code>if-then</code> statement can complete normally iff at least one of the following is <code>true</code>:
<ul>
<a name="236555"></a>
<li>The <code>if</code>-<code>then</code> statement is reachable and the condition expression is not a constant expression whose value is <code>true</code>.
<a name="236407"></a>
<li>The <code>then</code>-statement can complete normally.
</ul>
</ul>
<a name="236408"></a>
<p>
The <code>then</code>-statement is reachable iff the <code>if</code>-<code>then</code> statement is reachable and the condition expression is not a constant expression whose value is <code>false</code>.
<p>
<ul><a name="236409"></a>
<li>HYPOTHETICAL: An <code>if</code>-<code>then</code>-<code>else</code> statement can complete normally iff the <code>then</code>-statement can complete normally or the <code>else</code>-statement can complete normally. The <code>then</code>-statement is reachable iff the <code>if</code>-<code>then</code>-<code>else</code> statement is reachable and the condition expression is not a constant expression whose value is <code>false</code>. The <code>else</code> statement is reachable iff the <code>if</code>-<code>then</code>-<code>else </code>statement is reachable and the condition expression is not a constant expression whose value is <code>true</code>.
</ul><p><a name="236422"></a>
This approach would be consistent with the treatment of other control structures 
in Java. However, in order to allow the if statement to be used conveniently for 
"conditional compilation" purposes, the actual rules are as follows:
<p><ul><a name="236424"></a>
<li>ACTUAL: An <code>if</code>-<code>then</code> statement can complete normally iff it is reachable. The <code>then</code>-statement is reachable iff the <code>if</code>-<code>then</code> statement is reachable.
<a name="236428"></a>
<li>ACTUAL: An <code>if</code>-<code>then</code>-<code>else</code> statement can complete normally iff the <code>then</code>-statement can complete normally or the <code>else</code>-statement can complete normally. The <code>then</code>-statement is reachable iff the <code>if</code>-<code>then</code>-<code>else</code> statement is reachable. The <code>else</code>-statement is reachable iff the <code>if</code>-<code>then</code>-<code>else</code> statement is reachable.
</ul><p><a name="236451"></a>
As an example, the following statement results in a compile-time error:
<p><pre><a name="236452"></a>while (false) { x=3; }
</pre><p><a name="236453"></a>
because the statement <code>x=3;</code> is not reachable; but the superficially similar case:
<p><pre><a name="236456"></a>if (false) { x=3; }
</pre><p><a name="236454"></a>
does not result in a compile-time error. An optimizing compiler may realize that 
the statement <code>x=3;</code> will never be executed and may choose to omit the code for 
that statement from the generated <code>class</code> file, but the statement <code>x=3;</code> is not 
regarded as "unreachable" in the technical sense specified here.
<p><a name="238244"></a>
The rationale for this differing treatment is to allow programmers to define "flag variables" such as:<p>
<pre><a name="236464"></a>static final boolean DEBUG = false;
</pre><p><a name="236471"></a>
and then write code such as:
<p><pre><a name="236466"></a>if (DEBUG) { x=3; }
</pre><p><a name="236477"></a>
The idea is that it should be possible to change the value of <code>DEBUG</code> from <code>false</code> to 
<code>true</code> or from <code>true</code> to <code>false</code> and then compile the code correctly with no other 
changes to the program text.
<p><a name="238425"></a>
This ability to "conditionally compile" has a significant impact on, and relationship to, binary compatibility <a href="chap13.htm">(&#167;13)</a>. If a set of classes that use such a "flag" variable are compiled and conditional code is omitted, it does not suffice later to distribute just a new version of the class or interface that contains the definition of the flag. A change to the value of a flag is, therefore, not binary compatible with preexisting binaries <a href="13_4_8.htm#45139">(&#167;13.4.8)</a>. (There are other reasons for such incompatibility as well, such as the use of constants in <code>case</code> labels in <code>switch</code> statements; see <a href="13_4_8.htm#45139">&#167;13.4.8</a>.)
<p><i>One ought not to be thrown into confusion<br>
By a plain statement of relationship . . .<br>
</i>&#151;Robert Frost, <i>The Generations of Men</i> (1914)</p>


<hr>
<p>
<br>
</font>
</body></html>

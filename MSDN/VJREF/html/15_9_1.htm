<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>15.9.1 Run-time Evaluation of Array Creation Expressions</title>
<META NAME=MS-HAID CONTENT="15_9_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>15.9.1	 Run-time Evaluation of Array Creation Expressions</h3>
<a name="23605"></a>
<p>
<a name="36668"></a>
At run time, evaluation of an array creation expression behaves as follows.
<p><a name="23552"></a>
First, the dimension expressions are evaluated, left-to-right. If any of the expression evaluations completes abruptly, the expressions to the right of it are not evaluated.<p>
<a name="23543"></a>
Next, the values of the dimension expressions are checked. If the value of any <i>DimExpr</i> expression is less than zero, then an <code>NegativeArraySizeException</code> is thrown.<p>
<a name="36922"></a>
Next, space is allocated for the new array. If there is insufficient space to allocate the array, evaluation of the array creation expression completes abruptly by throwing an <code>OutOfMemoryError</code>.<p>
<a name="23658"></a>
Then, if a single <i>DimExpr</i> appears, a single-dimensional array is created of the specified length, and each component of the array is initialized to its standard default value <a href="4_5_4.htm#10931">(&#167;4.5.4)</a>.<p>
<a name="23640"></a>
If an array creation expression contains <i>N</i> <i>DimExpr</i> expressions, then it effectively executes a set of nested loops of depth <img src="15anc.gif"> to create the implied arrays of arrays. For example, the declaration:<p>
<pre><a name="23641"></a><code>float[][] matrix = new float[3][3];
</code></pre><p><a name="23642"></a>
is equivalent in behavior to:
<p><pre><a name="23643"></a>
float[][] matrix = new float[3][];
<a name="23644"></a>for (int <i>d</i> = 0; <i>d</i> &lt; matrix.length; <i>d</i>++)
<a name="50206"></a>	matrix[<i>d</i>] = new float[3];
</pre><p><a name="23645"></a>
and:
<p><pre><a name="23646"></a>Age[][][][][] Aquarius = new Age[6][10][8][12][];
</pre><p><a name="23647"></a>
is equivalent to:
<p><pre><a name="23648"></a>
Age[][][][][] Aquarius = new Age[6][][][][];
<a name="23649"></a>for (int <i>d1</i> = 0; <i>d1</i> &lt; Aquarius.length; <i>d1</i>++) {
<a name="237599"></a>	Aquarius[<i>d1</i>] = new Age[8][][][];
<a name="237600"></a>	for (int <i>d2</i> = 0; <i>d2</i> &lt; Aquarius[<i>d1</i>].length; <i>d2</i>++) {
<a name="237601"></a>		Aquarius[<i>d1</i>][<i>d2</i>] = new Age[10][][];
<a name="50214"></a>		for (int <i>d3</i> = 0; <i>d3</i> &lt; Aquarius[<i>d1</i>][<i>d2</i>].length; <i>d3</i>++) {
<a name="50216"></a>			Aquarius[<i>d1</i>][<i>d2</i>][<i>d3</i>] = new Age[12][];
<a name="50218"></a>		}
<a name="50220"></a>	}
<a name="50222"></a>}
</pre><p><a name="36995"></a>
with <i>d,</i> <i>d1</i>, <i>d2</i> and <i>d3</i> replaced by names that are not already locally declared. 
Thus, a single <code>new</code> expression actually creates one array of length 6, 6 arrays of 
length 10, <img src="15anc1.gif"> arrays of length 8, and <img src="15anc2.gif"> arrays of length 
12. This example leaves the fifth dimension, which would be arrays containing the 
actual array elements (references to <code>Age</code> objects), initialized only to null references. These arrays can be filled in later by other code, such as:
<p><pre><a name="36991"></a>
Age[] Hair = { new Age("quartz"), new Age("topaz") };
<a name="36992"></a>Aquarius[1][9][6][9] = Hair;
</pre><p><a name="23652"></a>
A multidimensional array need not have arrays of the same length at each level; thus, a triangular matrix may be created by:<p>
<pre><a name="23653"></a>
float triang[][] = new float[100][];
<a name="23654"></a>for (int i = 0; i &lt; triang.length; i++)
<a name="50224"></a>	triang[i] = new float[i+1];
</pre><p><a name="23655"></a>
There is, however, no way to get this effect with a single creation expression.
<p>

</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>15.25.1 Simple Assignment Operator =</title>
<META NAME=MS-HAID CONTENT="15_25_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>15.25.1	 Simple Assignment Operator =</h3>
<a name="5295"></a>
<p>
<a name="22840"></a>
A compile-time error occurs if the type of the right-hand operand cannot be converted to the type of the variable by assignment conversion <a href="5_2.htm#170768">(&#167;5.2)</a>.
<p><a name="41396"></a>
At run time, the expression is evaluated in one of two ways. If the left-hand operand expression is not an array access expression, then three steps are required:<p>
<ul><a name="238369"></a>
<li>First, the left-hand operand is evaluated to produce a variable. If this evaluation completes abruptly, then the assignment expression completes abruptly for the same reason; the right-hand operand is not evaluated and no assignment occurs.
<a name="238371"></a>
<li>Otherwise, the right-hand operand is evaluated. If this evaluation completes abruptly, then the assignment expression completes abruptly for the same reason and no assignment occurs.
<a name="238384"></a>
<li>Otherwise, the value of the right-hand operand is converted to the type of the left-hand variable and the result of the conversion is stored into the variable.
</ul><p><a name="238191"></a>
If the left-hand operand expression is an array access expression <a href="15_12.htm#239587">(&#167;15.12)</a>, then 
many steps are required:
<p><ul><a name="238214"></a>
<li>First, the array reference subexpression of the left-hand operand array access expression is evaluated. If this evaluation completes abruptly, then the assignment expression completes abruptly for the same reason; the index subexpression (of the left-hand operand array access expression) and the right-hand operand are not evaluated and no assignment occurs.
<a name="238234"></a>
<li>Otherwise, the index subexpression of the left-hand operand array access expression is evaluated. If this evaluation completes abruptly, then the assignment expression completes abruptly for the same reason and the right-hand operand is not evaluated and no assignment occurs.
<a name="238236"></a>
<li>Otherwise, the right-hand operand is evaluated. If this evaluation completes abruptly, then the assignment expression completes abruptly for the same reason and no assignment occurs.
<a name="238216"></a>
<li>Otherwise, if the value of the array reference subexpression is <code>null</code>, then no assignment occurs and a <code>NullPointerException</code> &#32;is thrown.
<a name="238217"></a>
<li>Otherwise, the value of the array reference subexpression indeed refers to an array. If the value of the index subexpression is less than zero, or greater than &#32;or equal to the length of the array, then no assignment occurs and an <code>IndexOutOfBoundsException</code> &#32;is thrown.
<a name="238218"></a>
<li>Otherwise, the value of the index subexpression is used to select a component of the array referred to by the value of the array reference subexpression. This component is a variable; call its type <i>SC</i><i></i>. Also, let <i>TC</i> be the type of the left-hand operand of the assignment operator as determined at compile time.
<ul>
<a name="238255"></a>
<li>If <i>TC</i> is a primitive type, then <i>SC</i> is necessarily the same as <i>TC</i>. The value of the right-hand operand is converted to a value of type <i>TC</i> and stored into the selected array component.
<a name="238261"></a>
<li>If <i>T</i> is a reference type, then <i>SC</i> may not be the same as <i>T</i>, but rather a type that extends or implements <i>TC</i>. Let <i>RC</i> be the class of the object referred to by the value of the right-hand operand at run time.
<a name="238306"></a>
	 The compiler may be able to prove at compile time that the array component will be of type <i>TC</i> exactly (for example, <i>TC</i> might be <code>final</code>). But if the compiler cannot prove at compile time that the array component will be of type <i>TC</i> exactly, then a check must be performed at run time to ensure that the class <i>RC</i> is assignment compatible <a href="5_2.htm#170768">(&#167;5.2)</a> with the actual type <i>SC</i> of the array component. This check is similar to a narrowing cast (<a href="5_4.htm#176921">&#167;5.4</a>, <a href="15_15.htm#238146">&#167;15.15</a>), except that if the check fails, an <code>ArrayStoreException</code> is thrown rather than a <code>ClassCastException</code>. Therefore:<p>
<ul>
<a name="238321"></a>
<li>If class <i>RC</i> is not assignable to type <i>SC</i>, then no assignment occurs and an <code>ArrayStoreException</code> is thrown.
<a name="238334"></a>
<li>Otherwise, the reference value of the right-hand operand is stored into the selected array component.
</ul>
</ul>
</ul><p><a name="238526"></a>
The rules for assignment to an array component are illustrated by the following 
example program:
<p><pre><br><a name="238650"></a>class ArrayReferenceThrow extends RuntimeException { }
<br><br><a name="238651"></a>class IndexThrow extends RuntimeException { }
<br><br><a name="238652"></a>class RightHandSideThrow extends RuntimeException { }
<br></pre><p><pre><a name="238654"></a>
class IllustrateSimpleArrayAssignment {
<br><a name="238656"></a>	static Object[] objects = { new Object(), new Object() };
<br><br><a name="238657"></a>	static Thread[] threads = { new Thread(), new Thread() };
<br><a name="238658"></a>
	static Object[] arrayThrow() {
<a name="238738"></a>		throw new ArrayReferenceThrow();
<a name="238739"></a>	}
<br><br><a name="238659"></a>	static int indexThrow() { throw new IndexThrow(); }
<br><a name="238660"></a>
	static Thread rightThrow() {
<a name="238743"></a>		throw new RightHandSideThrow();
<a name="238744"></a>	}
<br><a name="238661"></a>
	static String name(Object q) {
<a name="238662"></a>		String sq = q.getClass().getName();
<a name="238663"></a>		int k = sq.lastIndexOf('.');
<a name="238664"></a>		return (k &lt; 0) ? sq : sq.substring(k+1);
<a name="238665"></a>	}
<br></pre><p><pre><a name="238666"></a>
	static void testFour(Object[] x, int j, Object y) {
<a name="238667"></a>		String sx = x == null ? "null" : name(x[0]) + "s";
<a name="238668"></a>		String sy = name(y);
<a name="238669"></a>		System.out.println();
<a name="238670"></a>		try {
<a name="238671"></a>			System.out.print(sx + "[throw]=throw =&gt; ");
<a name="238672"></a>			x[indexThrow()] = rightThrow();
<a name="238673"></a>			System.out.println("Okay!");
<a name="238674"></a>		} catch (Throwable e) { System.out.println(name(e)); }
<a name="238675"></a>		try {
<a name="238676"></a>			System.out.print(sx + "[throw]=" + sy + " =&gt; ");
<a name="238677"></a>			x[indexThrow()] = y;
<a name="238678"></a>			System.out.println("Okay!");
<a name="238679"></a>		} catch (Throwable e) { System.out.println(name(e)); }
<a name="238680"></a>		try {
<a name="238681"></a>			System.out.print(sx + "[" + j + "]=throw =&gt; ");
<a name="238682"></a>			x[j] = rightThrow();
<a name="238683"></a>			System.out.println("Okay!");
<a name="238684"></a>		} catch (Throwable e) { System.out.println(name(e)); }
<a name="238685"></a>		try {
<a name="238686"></a>			System.out.print(sx + "[" + j + "]=" + sy + " =&gt; ");
<a name="238687"></a>			x[j] = y;
<a name="238688"></a>			System.out.println("Okay!");
<a name="238689"></a>		} catch (Throwable e) { System.out.println(name(e)); }
<a name="238690"></a>	}
<br><a name="238691"></a>
	public static void main(String[] args) {
<a name="238692"></a>		try {
<a name="238693"></a>			System.out.print("throw[throw]=throw =&gt; ");
<a name="238694"></a>			arrayThrow()[indexThrow()] = rightThrow();
<a name="238695"></a>			System.out.println("Okay!");
<a name="238696"></a>		} catch (Throwable e) { System.out.println(name(e)); }
<a name="238697"></a>		try {
<a name="238698"></a>			System.out.print("throw[throw]=Thread =&gt; ");
<a name="238699"></a>			arrayThrow()[indexThrow()] = new Thread();
<a name="238700"></a>			System.out.println("Okay!");
<a name="238701"></a>		} catch (Throwable e) { System.out.println(name(e)); }
<a name="238702"></a>		try {
<a name="238703"></a>			System.out.print("throw[1]=throw =&gt; ");
<a name="238704"></a>			arrayThrow()[1] = rightThrow();
<a name="238705"></a>			System.out.println("Okay!");
<a name="238706"></a>		} catch (Throwable e) { System.out.println(name(e)); }
<a name="238707"></a>		try {
<a name="238708"></a>			System.out.print("throw[1]=Thread =&gt; ");
<a name="238709"></a>			arrayThrow()[1] = new Thread();
<a name="238710"></a>			System.out.println("Okay!");
<a name="238711"></a>		} catch (Throwable e) { System.out.println(name(e)); }
<a name="238712"></a>
		testFour(null, 1, new StringBuffer());
<a name="238713"></a>		testFour(null, 1, new StringBuffer());
<a name="238714"></a>		testFour(null, 9, new Thread());
<a name="238715"></a>		testFour(null, 9, new Thread());
<a name="238716"></a>		testFour(objects, 1, new StringBuffer());
<a name="238717"></a>		testFour(objects, 1, new Thread());
<a name="238718"></a>		testFour(objects, 9, new StringBuffer());
<a name="238719"></a>		testFour(objects, 9, new Thread());
<a name="238720"></a>		testFour(threads, 1, new StringBuffer());
<a name="238721"></a>		testFour(threads, 1, new Thread());
<a name="238722"></a>		testFour(threads, 9, new StringBuffer());
<a name="238723"></a>		testFour(threads, 9, new Thread());
<a name="238724"></a>	}
<br><a name="238725"></a>}
</pre><p><a name="238532"></a>
This program prints:
<p><pre><a name="238746"></a>
throw[throw]=throw =&gt; ArrayReferenceThrow
<a name="238747"></a>throw[throw]=Thread =&gt; ArrayReferenceThrow
<a name="238748"></a>throw[1]=throw =&gt; ArrayReferenceThrow
<a name="238749"></a>throw[1]=Thread =&gt; ArrayReferenceThrow
<br><a name="238751"></a>
null[throw]=throw =&gt; IndexThrow
<a name="238752"></a>null[throw]=StringBuffer =&gt; IndexThrow
<a name="238753"></a>null[1]=throw =&gt; RightHandSideThrow
<a name="238754"></a>null[1]=StringBuffer =&gt; NullPointerException
<br><a name="238756"></a>
null[throw]=throw =&gt; IndexThrow
<a name="238757"></a>null[throw]=StringBuffer =&gt; IndexThrow
<a name="238758"></a>null[1]=throw =&gt; RightHandSideThrow
<a name="238759"></a>null[1]=StringBuffer =&gt; NullPointerException
<br><a name="238761"></a>
null[throw]=throw =&gt; IndexThrow
<a name="238762"></a>null[throw]=Thread =&gt; IndexThrow
<a name="238763"></a>null[9]=throw =&gt; RightHandSideThrow
<a name="238764"></a>null[9]=Thread =&gt; NullPointerException
<br><a name="238766"></a>
null[throw]=throw =&gt; IndexThrow
<a name="238767"></a>null[throw]=Thread =&gt; IndexThrow
<a name="238768"></a>null[9]=throw =&gt; RightHandSideThrow
<a name="238769"></a>null[9]=Thread =&gt; NullPointerException
<br><a name="238771"></a>
Objects[throw]=throw =&gt; IndexThrow
<a name="238772"></a>Objects[throw]=StringBuffer =&gt; IndexThrow
<a name="238773"></a>Objects[1]=throw =&gt; RightHandSideThrow
<a name="238774"></a>Objects[1]=StringBuffer =&gt; Okay!
<br><a name="238776"></a>
Objects[throw]=throw =&gt; IndexThrow
<a name="238777"></a>Objects[throw]=Thread =&gt; IndexThrow
<a name="238778"></a>Objects[1]=throw =&gt; RightHandSideThrow
<a name="238779"></a>Objects[1]=Thread =&gt; Okay!
<br><a name="238781"></a>
Objects[throw]=throw =&gt; IndexThrow
<a name="238782"></a>Objects[throw]=StringBuffer =&gt; IndexThrow
<a name="238783"></a>Objects[9]=throw =&gt; RightHandSideThrow
<a name="238784"></a>Objects[9]=StringBuffer =&gt; IndexOutOfBoundsException
<br><a name="238786"></a>
Objects[throw]=throw =&gt; IndexThrow
<a name="238787"></a>Objects[throw]=Thread =&gt; IndexThrow
<a name="238788"></a>Objects[9]=throw =&gt; RightHandSideThrow
<a name="238789"></a>Objects[9]=Thread =&gt; IndexOutOfBoundsException
<br><a name="238791"></a>
Threads[throw]=throw =&gt; IndexThrow
<a name="238792"></a>Threads[throw]=StringBuffer =&gt; IndexThrow
<a name="238793"></a>Threads[1]=throw =&gt; RightHandSideThrow
<a name="238794"></a>Threads[1]=StringBuffer =&gt; ArrayStoreException
<br><a name="238796"></a>
Threads[throw]=throw =&gt; IndexThrow
<a name="238797"></a>Threads[throw]=Thread =&gt; IndexThrow
<a name="238798"></a>Threads[1]=throw =&gt; RightHandSideThrow
<a name="238799"></a>Threads[1]=Thread =&gt; Okay!
<br><a name="238801"></a>
Threads[throw]=throw =&gt; IndexThrow
<a name="238802"></a>Threads[throw]=StringBuffer =&gt; IndexThrow
<a name="238803"></a>Threads[9]=throw =&gt; RightHandSideThrow
<a name="238804"></a>Threads[9]=StringBuffer =&gt; IndexOutOfBoundsException
<br><a name="238806"></a>
Threads[throw]=throw =&gt; IndexThrow
<a name="238807"></a>Threads[throw]=Thread =&gt; IndexThrow
<a name="238808"></a>Threads[9]=throw =&gt; RightHandSideThrow
<a name="238809"></a>Threads[9]=Thread =&gt; IndexOutOfBoundsException
</pre><p><a name="238840"></a>
The most interesting case of the lot is the one thirteenth from the end:
<p><pre><a name="238843"></a>Threads[1]=StringBuffer =&gt; ArrayStoreException
</pre><p><a name="238841"></a>
which indicates that the attempt to store a reference to a <code>StringBuffer</code> into an 
array whose components are of type <code>Thread</code> throws an <code>ArrayStoreException</code>. 
The code is type-correct at compile time: the assignment has a left-hand side of 
type <code>Object[]</code> and a right-hand side of type <code>Object</code>. At run time, the first actual 
argument to method <code>testFour</code> is a reference to an instance of "array of <code>Thread</code>" 
and the third actual argument is a reference to an instance of class <code>StringBuffer</code>.
<p>

</body></html>

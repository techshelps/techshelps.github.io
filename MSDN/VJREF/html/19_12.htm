<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>19.12 Grammar from &#167;15: Expressions  <a href="chap15.htm">&#167;15</a></title>
<META NAME=MS-HAID CONTENT="19_12">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>19.12	 Grammar from &#167;15: Expressions  <a href="chap15.htm">&#167;15</a></h2>
<a name="26586"></a>
<p>
<a name="43932"></a>
<p>
<pre>
<i>Primary:<br>
	PrimaryNoNewArray<br>
	ArrayCreationExpression
</i>
<i>PrimaryNoNewArray:<br>
	Literal<br>
<code>	this<br>
</code>	<code>( </code>Expression<code> )<br>
</code>	ClassInstanceCreationExpression<br>
	FieldAccess<br>
	MethodInvocation<br>
	ArrayAccess
</i>
<i>ClassInstanceCreationExpression:<br>
	<code>new </code>Class<i>Type</i><code> ( </code>ArgumentListopt<code> )
</code></i>
<i>ArgumentList:<br>
	Expression<br>
	ArgumentList<code> , </code>Expression
</i>
<i>ArrayCreationExpression:<br>
	<code>new </code>PrimitiveType<code> </code>DimExprs<code> </code>Dimsopt<br>
	<code>new </code>ClassOrInterfaceType<code> </code>DimExprs<code> </code>Dimsopt
</i>
<i>DimExprs:<br>
	DimExpr<br>
	DimExprs<code> </code>DimExpr
</i>
<i>DimExpr:<br>
	<code>[ </code>Expression<code> ]
</code></i>
<i>Dims:<br>
	<code>[ ]<br>
</code>	Dims<code> [ ]
</code></i>
<i>FieldAccess:<br>
	Primary<code> . </code>Identifier<br>
	<code>super . </code>Identifier
</i>
<i>MethodInvocation:<br>
	Name<code> ( </code>ArgumentListopt<code> )<br>
</code>	Primary<code> . </code>Identifier<code> ( </code>ArgumentListopt<code> )<br>
	super . </code>Identifier<code> ( </code>ArgumentListopt<code> )
</code></i>
<i>ArrayAccess:<br>
	Name<code> [ </code>Expression<code> ]<br>
</code>	PrimaryNoNewArray<code> [ </code>Expression<code> ]
</code></i>
<i>PostfixExpression:<br>
	Primary<br>
	Name<br>
<code>	</code>PostIncrementExpression<br>
	PostDecrementExpression
</i>
<i>PostIncrementExpression:<br>
	PostfixExpression<code> ++
</code></i>
<i>PostDecrementExpression:<br>
	PostfixExpression<code> --
</code></i>
<i>UnaryExpression<code>:<br>
	</code>PreIncrementExpression<br>
<code>	</code>PreDecrementExpression<br>
<code>	+ </code>UnaryExpression<br>
	<code>- </code>UnaryExpression<br>
	UnaryExpressionNotPlusMinus
</i>
<i>PreIncrementExpression:<br>
<code>	++ </code>UnaryExpression
</i>
<i>PreDecrementExpression:<br>
	<code>-- </code>UnaryExpression
</i>
<i>UnaryExpressionNotPlusMinus<code>:<br>
	</code>PostfixExpression<br>
<code>	~ </code>UnaryExpression<br>
	<code>! </code>UnaryExpression<br>
<code>	</code>CastExpression
</i>
<i>CastExpression:<br>
<code>	( </code><i>PrimitiveType</i><code> </code>Dimsopt<code> ) </code><i>UnaryExpression<br>
</i><code>	( </code>Expression<code> ) </code>U<i>naryExpressionNotPlusMinus<br>
	</i><code>( </code>Name<code> </code>Dims<code> ) </code>U<i>naryExpressionNotPlusMinus
</i></i>
<i>MultiplicativeExpression:<br>
	UnaryExpression<br>
	MultiplicativeExpression<code> * </code>UnaryExpression<br>
	MultiplicativeExpression<code> / </code>UnaryExpression<br>
	MultiplicativeExpression<code> % </code>UnaryExpression
</i>
<i>AdditiveExpression:<br>
	MultiplicativeExpression<br>
	AdditiveExpression<code> + </code>MultiplicativeExpression<br>
<code>	</code>AdditiveExpression<code> - </code>MultiplicativeExpression
</i>
<i>ShiftExpression:<br>
	AdditiveExpression<br>
	ShiftExpression<code> &lt;&lt; </code>AdditiveExpression<br>
	ShiftExpression<code> &gt;&gt; </code>AdditiveExpression<br>
	ShiftExpression<code> &gt;&gt;&gt; </code>AdditiveExpression
</i>
<i>RelationalExpression:<br>
	ShiftExpression<br>
	RelationalExpression<code> &lt; </code>ShiftExpression<br>
	RelationalExpression<code> &gt; </code>ShiftExpression<br>
	RelationalExpression<code> &lt;= </code>ShiftExpression<br>
	RelationalExpression<code> &gt;= </code>ShiftExpression<br>
	RelationalExpression<code> instanceof </code>ReferenceType
</i>
<i>EqualityExpression:<br>
	RelationalExpression<br>
	EqualityExpression<code> == </code>RelationalExpression<br>
	EqualityExpression<code> != </code>RelationalExpression
</i>
<i>AndExpression:<br>
	EqualityExpression<br>
	AndExpression<code> &amp; </code>EqualityExpression
</i>
<i>ExclusiveOrExpression:<br>
	AndExpression<br>
	ExclusiveOrExpression<code> ^ </code>AndExpression
</i>
<i>InclusiveOrExpression:<br>
	ExclusiveOrExpression<br>
	InclusiveOrExpression<code> | </code>ExclusiveOrExpression
</i>
<i>ConditionalAndExpression:<br>
	InclusiveOrExpression<br>
	ConditionalAndExpression<code> &amp;&amp; </code>InclusiveOrExpression
</i>
<i>ConditionalOrExpression:<br>
	ConditionalAndExpression<br>
	ConditionalOrExpression<code> || </code>ConditionalAndExpression
</i>
<i>ConditionalExpression:<br>
	ConditionalOrExpression<br>
	ConditionalOrExpression<code> ? </code>Expression<code> : </code>ConditionalExpression
</i>
<i>AssignmentExpression:<br>
	ConditionalExpression<br>
	Assignment
</i>
<i>Assignment:<br>
	LeftHandSide<code> </code>AssignmentOperator<code> </code>AssignmentExpression
</i>
<i>LeftHandSide:<br>
	Name<br>
	FieldAccess<br>
	ArrayAccess
</i>
<i>AssignmentOperator: one of<br>
	<code>=&#32;*=&#32;/=&#32;%=&#32;+=&#32;-=&#32;&lt;&lt;=&#32;&gt;&gt;=&#32;&gt;&gt;&gt;=&#32;&amp;=&#32;^=&#32;|=
</code></i>
<i>Expression:<br>
	AssignmentExpression
</i>
<i>ConstantExpression:<br>
	Expression
</i></pre><p>


<hr>
<p>
<br>
</font>
</body></html>

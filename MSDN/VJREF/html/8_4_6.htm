<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>8.4.6 Inheritance, Overriding, and Hiding</title>
<META NAME=MS-HAID CONTENT="8_4_6">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>8.4.6	 Inheritance, Overriding, and Hiding</h3>
<a name="228745"></a>
<p>
<a name="227926"></a>
A class <i>inherits</i> from its direct superclass and direct superinterfaces all the methods (whether <code>abstract</code> or not) of the superclass and superinterfaces that are 
accessible to code in the class and are neither overridden <a href="8_4_6.htm#227927">(&#167;8.4.6.1)</a> nor hidden 
<a href="8_4_6.htm#227928">(&#167;8.4.6.2)</a> by a declaration in the class.
<p><a name="227927"></a>
<h4>8.4.6.1	 Overriding (By Instance Methods)</h4>
<p>
<a name="39521"></a>
If a class declares an instance method, then the declaration of that method is said 
to <i>override</i> any and all methods with the same signature in the superclasses and 
superinterfaces of the class that would otherwise be accessible to code in the class. 
Moreover, if the method declared in the class is not <code>abstract</code>, then the declaration of that method is said to <i>implement</i> any and all declarations of <code>abstract</code> 
methods with the same signature in the superclasses and superinterfaces of the 
class that would otherwise be accessible to code in the class.
<p><a name="227929"></a>
A compile-time error occurs if an instance method overrides a <code>static</code> method. In this respect, overriding of methods differs from hiding of fields <a href="8_3.htm#40898">(&#167;8.3)</a>, for it is permissible for an instance variable to hide a <code>static</code> variable.<p>
<a name="227988"></a>
An overridden method can be accessed by using a method invocation expression <a href="15_11.htm#20448">(&#167;15.11)</a> that contains the keyword <code>super</code>. Note that a qualified name or a cast to a superclass type is not effective in attempting to access an overridden method; in this respect, overriding of methods differs from hiding of fields. See <a href="15_11_4.htm#239751">&#167;15.11.4.10</a> for discussion and examples of this point.<p>
<a name="227928"></a>
<h4>8.4.6.2	 Hiding (By Class Methods)</h4>
<p>
<a name="227961"></a>
If a class declares a <code>static</code> method, then the declaration of that method is said to 
<i>hide</i> any and all methods with the same signature in the superclasses and superinterfaces of the class that would otherwise be accessible to code in the class. A 
compile-time error occurs if a <code>static</code> method hides an instance method. In this 
respect, hiding of methods differs from hiding of fields <a href="8_3.htm#40898">(&#167;8.3)</a>, for it is permissible 
for a <code>static</code> variable to hide an instance variable.
<p><a name="227976"></a>
A hidden method can be accessed by using a qualified name or by using a method invocation expression <a href="15_11.htm#20448">(&#167;15.11)</a> that contains the keyword <code>super</code> or a cast to a superclass type. In this respect, hiding of methods is similar to hiding of fields.<p>
<a name="227965"></a>
<h4>8.4.6.3	 Requirements in Overriding and Hiding</h4>
<p>
<a name="227966"></a>
If a method declaration overrides or hides the declaration of another method, then 
a compile-time error occurs if they have different return types or if one has a 
return type and the other is <code>void</code>. Moreover, a method declaration must not have a 
<code>throws</code> clause that conflicts <a href="8_4_4.htm#78323">(&#167;8.4.4)</a> with that of any method that it overrides or 
hides; otherwise, &#32;a compile-time error occurs. In these respects, overriding of 
methods differs from hiding of fields <a href="8_3.htm#40898">(&#167;8.3)</a>, for it is permissible for a field to hide 
a field of another type.
<p><a name="39548"></a>
The access modifier <a href="6_6.htm#33916">(&#167;6.6)</a> of an overriding or hiding method must provide at least as much access as the overridden or hidden method, or a compile-time error occurs. In more detail:<p>
<ul><a name="39549"></a>
<li>If the overridden or hidden method is <code>public</code>, then the overriding or hiding method must be <code>public</code>; otherwise, a compile-time error occurs.
<a name="39550"></a>
<li>If the overridden or hidden method is <code>protected</code>, then the overriding or hiding method must be <code>protected</code> or <code>public</code>; otherwise, a compile-time error occurs.
<a name="39551"></a>
<li>If the overridden or hidden method has default (package) access, then the overriding or hiding method must not be <code>private</code>; otherwise, a compile-time error occurs.
</ul><p><a name="39552"></a>
Note that a <code>private</code> method is never accessible to subclasses and so cannot be 
hidden or overridden in the technical sense of those terms. This means that a subclass can declare a method with the same signature as a <code>private</code> method in one of 
its superclasses, and there is no requirement that the return type or <code>throws</code> clause 
of such a method bear any relationship to those of the <code>private</code> method in the 
superclass.
<p><a name="227941"></a>
<h4>8.4.6.4	 Inheriting Methods with the Same Signature</h4>
<p>
<a name="39557"></a>
It is possible for a class to inherit more than one method with the same signature 
<a href="8_4_6.htm#227941">(&#167;8.4.6.4)</a>. Such a situation does not in itself cause a compile-time error. There are 
then two possible cases:
<p><ul><a name="39561"></a>
<li>If one of the inherited methods is not <code>abstract</code>, then there are two subcases:
<ul>
<a name="39562"></a>
<li>If the method that is not <code>abstract</code> is <code>static</code>, a compile-time error occurs.
<a name="39563"></a>
<li>Otherwise, the method that is not <code>abstract</code> is considered to override, and therefore to implement, all the other methods on behalf of the class that inherits it. A compile-time error occurs if, comparing the method that is not <code>abstract</code> with each of the other of the inherited methods, for any such pair, either they have different return types or one has a return type and the other is <code>void</code>. Moreover, a compile-time error occurs if the inherited method that is not <code>abstract</code> has a <code>throws</code> clause that conflicts <a href="8_4_4.htm#78323">(&#167;8.4.4)</a> with that of any other of the inherited methods.
</ul>
<a name="39567"></a>
<li>If none of the inherited methods is not <code>abstract</code>, then the class is necessarily an <code>abstract</code> class and is considered to inherit all the <code>abstract</code> methods. A compile-time error occurs if, for any two such inherited methods, either they have different return types or one has a return type and the other is <code>void</code>. (The <code>throws</code> clauses do not cause errors in this case.)
</ul><p><a name="39568"></a>
It is not possible for two or more inherited methods with the same signature not to 
be <code>abstract</code>, because methods that are not <code>abstract</code> are inherited only from the 
direct superclass, not from superinterfaces.
<p><a name="39569"></a>
There might be several paths by which the same method declaration might be inherited from an interface. This fact causes no difficulty and never, of itself, results in a compile-time error.<p>


</Font></body></html>

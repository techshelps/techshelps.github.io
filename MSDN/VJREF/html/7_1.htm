<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>7.1 Package Members</title>
<META NAME=MS-HAID CONTENT="7_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h2>7.1	 Package Members</h2>
<a name="26535"></a>
<p>
<a name="37172"></a>
A<i> package</i> can have members of either or both of the following kinds:
<p><ul><a name="29038"></a>
<li>Subpackages of the package
<a name="29031"></a>
<li>Types declared in the compilation units <a href="7_3.htm#40031">(&#167;7.3)</a> of the package
</ul><p><a name="37558"></a>
For example, in the standard Java Application Programming Interface:
<p><ul><a name="37559"></a>
<li>The package <code>java</code> has subpackages <code>awt</code>, <code>applet</code>, <code>io</code>, <code>lang</code>, <code>net</code>, and <code>util</code>, but no compilation units.
<a name="37560"></a>
<li>The package <code>java.awt</code> has a subpackage named <code>image</code>, as well as a number of compilation units containing declarations of class and interface types.
</ul><p><a name="13127"></a>
If the fully qualified name <a href="6_7.htm#25430">(&#167;6.7)</a> of a package is <i>P</i><i></i>, and <i>Q</i> is a subpackage of <i>P</i>, 
then <i>P</i><code>.</code><i>Q</i> is the fully qualified name of the subpackage.
<p><a name="37562"></a>
The subpackages of package <code>java</code> named <code>lang</code>, <code>util</code>, and <code>io</code> (whose fully qualified package names are therefore <code>java.lang</code>, <code>java.util</code>, and <code>java.io</code>) are a standard part of every Java implementation and are specified in Chapters <a href="chap20.htm">20</a>, <a href="chap21.htm">21</a>, and <a href="chap22.htm">22</a>. Many Java implementations will include the entire set of <code>java</code> packages defined in the series of books <i>The Java Application Programming Interface</i>.<p>
<a name="37573"></a>
A package may not contain a type declaration and a subpackage of the same name, or a compile-time error results. Here are some examples:<p>
<ul><a name="37575"></a>
<li>Because the package <code>java.awt</code> has a subpackage <code>image</code>, it cannot (and does not) contain a declaration of a class or interface type named <code>image</code>.
<a name="37576"></a>
<li>If there is a package named <code>mouse</code> and a type <code>Button</code> in that package (which then might be referred to as <code>mouse.Button</code>), then there cannot be any package with the fully qualified name <code>mouse.Button</code> or <code>mouse.Button.Click</code>.
<a name="61007"></a>
<li>If <code>COM.Sun.java.jag</code> is the fully qualified name of a type, then there cannot be any package whose fully qualified name is either <code>COM.Sun.java.jag</code> or <code>COM.Sun.java.jag.scrabble</code>.
</ul><p><a name="61009"></a>
The hierarchical naming structure for packages is intended to be convenient for organizing related packages in a conventional manner, but has no significance in the Java language itself other than the prohibition against a package having a subpackage with the same simple name as a type declared in that package. There is no special access relationship in the Java language between a package named <code>oliver</code> and another package named <code>oliver.twist</code>, or between packages named <code>evelyn.wood</code> and <code>evelyn.Waugh</code>. For example, the code in a package named <code>oliver.twist</code> has no better access to the types declared within package <code>oliver</code> than code in any other package.<p>


</Font></body></html>

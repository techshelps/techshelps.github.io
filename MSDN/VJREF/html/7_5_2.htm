<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>7.5.2 Type-Import-on-Demand Declaration</title>
<META NAME=MS-HAID CONTENT="7_5_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>7.5.2	 Type-Import-on-Demand Declaration</h3>
<a name="26725"></a>
<p>
<a name="26727"></a>
A <i>type-import-on-demand declaration</i> allows all <code>public</code> types declared in the 
package named by a fully qualified name to be imported as needed.
<p><pre>
<i>TypeImportOnDemandDeclaration:<br>
<i>	</i><code>import </code>Package<i>Name</i><code> . * ;
</code></i></pre><p><a name="29163"></a>
It is a compile-time error for a type-import-on-demand declaration to name a 
package that is not accessible <a href="6_6.htm#33916">(&#167;6.6)</a>, as determined by the host system <a href="7_2.htm#37758">(&#167;7.2)</a>. 
Two or more type-import-on-demand declarations in the same compilation unit 
may name the same package; the effect is as if there were exactly one such declaration. It is not a compile-time error to name the current package or <code>java.lang</code> in 
a type-import-on-demand declaration, even though they are already imported; the 
duplicate type-import-on-demand declaration is ignored.
<p><a name="35214"></a>
The example:<p>
<pre><a name="35215"></a>import java.util.*;
</pre><p><a name="35216"></a>
causes the simple names of all <code>public</code> types declared in the package <code>java.util</code> 
to be available within the class and interface declarations of the compilation unit. 
Thus, the simple name <code>Vector</code> refers to the type <code>Vector</code> in the package 
<code>java.util</code> in all places where it is not hidden <a href="6_3.htm#33623">(&#167;6.3)</a> by a single-type-import declaration of a type whose simple name is <code>Vector</code>; by a type named <code>Vector</code> and 
declared in the package to which the compilation unit belongs; or by a declaration 
of a field, parameter, or local variable named <code>Vector</code>. (It would be unusual for any 
of these conditions to occur.)
<p>

</Font></body></html>

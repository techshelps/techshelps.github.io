<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>11.5.2 The Class Error</title>
<META NAME=MS-HAID CONTENT="11_5_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>11.5.2	 The Class Error</h3>
<a name="44367"></a>
<p>
<a name="44368"></a>
The class <code>Error</code> and its standard subclasses are exceptions from which ordinary 
programs are not ordinarily expected to recover. The class <code>Error</code> is a separate 
subclass of <code>Throwable</code>, distinct from <code>Exception</code> in the class hierarchy, to allow 
programs to use the idiom:
<p><pre><a name="44369"></a>} catch (Exception e) {
</pre><p><a name="44370"></a>
to catch all exceptions from which recovery may be possible without catching 
errors from which recovery is typically not possible.
<p><a name="44371"></a>
Package <code>java.lang</code> defines all the error classes described here. These classes, like all other classes in package <code>java.lang</code>, are implicitly imported and therefore may be referred to by their simple names.<p>
<a name="44372"></a>
<h4>11.5.2.1	 Loading and Linkage Errors</h4>
<p>
<a name="44373"></a>
A Java Virtual Machine throws an object that is an instance of a subclass of 
<code>LinkageError</code> &#32;when a loading, linkage, preparation, verification or initialization 
error occurs:
<p><ul><a name="44377"></a>
<li>The loading process is described in <a href="12_2.htm#44459">&#167;12.2</a>. The errors <code>ClassFormatError</code>, <code>ClassCircularityError</code>, and <code>NoClassDefFoundError</code> are described there.
<a name="47893"></a>
<li>The linking process is described in <a href="12_3.htm#44487">&#167;12.3</a>. The linking errors are described there. These errors include <code>IllegalAccessError</code>,<code> InstantiationError</code>, <code>NoSuchFieldError</code>, and <code>NoSuchMethodError</code>, all of which are subclasses of <code>IncompatibleClassChangeError</code>, and, also, <code>UnsatisfiedLinkError</code>.
<a name="47897"></a>
<li>The class verification process is described in <a href="12_3_1.htm#44491">&#167;12.3.1</a>. The verification failure error <code>VerifyError</code> is described there.
<a name="44389"></a>
<li>The class preparation process is described in <a href="12_3_2.htm#47979">&#167;12.3.2</a>. The preparation error described there is <code>AbstractMethodError</code>.
<a name="44393"></a>
<li>The class initialization process is described in <a href="12_4.htm#44557">&#167;12.4</a>. A virtual machine will throw the error <code>ExceptionInInitializerError</code> if execution of a static initializer or of an initializer for a <code>static</code> field results in an exception that is not an <code>Error</code> or a subclass of <code>Error</code>.
</ul><p><a name="44395"></a>
<h4>11.5.2.2	 Virtual Machine Errors</h4>
<p>
<a name="44396"></a>
A Java Virtual Machine throws an object that is an instance of a subclass of the 
class <code>VirtualMachineError</code> when an internal error or resource limitation prevents it from implementing the semantics of the Java Language. This language 
specification and the Java Virtual Machine Specification define the following virtual machine errors:
<p><ul><a name="44397"></a>
<li><code>InternalError</code>: An internal error has occurred in a Java Virtual Machine, because of a fault in the software implementing the virtual machine, a fault in the underlying host system software, or a fault in the hardware. This error is delivered asynchronously when it is detected, and may occur at any point in a Java program.
<a name="44398"></a>
<li><code>OutOfMemoryError</code>: A Java Virtual Machine has run out of either virtual or physical memory, and the automatic storage manager wasn't able to reclaim enough memory to satisfy an object creation request.
<a name="44399"></a>
<li><code>StackOverflowError</code>: A Java Virtual Machine has run out of stack space for a thread, typically because the thread is doing an unbounded number of recursive invocations due to a fault in the executing program.
<a name="44400"></a>
<li><code>UnknownError</code>: An exception or error has occurred but, for some reason, a Java Virtual Machine is unable to report the actual exception or error.
</ul><p><a name="44401"></a>
A sophisticated Java program may be designed to handle <code>OutOfMemoryError</code> and 
attempt to recover from it, perhaps by carefully dropping references to objects.
<p><a name="47538"></a>
We are exploring enhancements to Java to simplify handling of out-of-memory conditions. One possibility would be to support automatic suspension of a thread which encounters an <code>OutOfMemoryError</code> and allow another thread to handle the <code>error</code> situation. Such a technique might also permit a Java program to recover from a <code>StackOverflowError</code> if this overflow does not result from a nonterminating recursion. Suggestions for other approaches are welcomed.
<p><i>No rule is so general, which admits not some exception.<br>
</i>&#151;Robert Burton (1576-1640)</p>


<hr>
<p>
<br>
</font>
</body></html>

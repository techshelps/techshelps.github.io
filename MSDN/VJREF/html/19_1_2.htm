<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>19.1.2 Problem #2: Modifiers Too Specific</title>
<META NAME=MS-HAID CONTENT="19_1_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>19.1.2	 Problem #2: Modifiers Too Specific</h3>
<a name="44488"></a>
<p>
<a name="44489"></a>
Consider the two groups of productions:
<p><pre>
<i><i>FieldDeclaration:<br>
	Field</i>Modifiersopt<code> </code><i>Type</i><code> </code><i>VariableDeclarators</i><code> ;
</code></i>
<i>FieldModifiers:<br>
	FieldModifier<br>
	FieldModifiers<code> </code>FieldModifier
</i>
<i>FieldModifier: one of<br>
	<code>public</code>&#32;<code>protected</code>&#32;<code>private<br>
	final&#32;static&#32;transient&#32;volatile
</code></i></pre><p><a name="44493"></a>
and:
<p><pre>
<i>MethodHeader:<br>
	MethodModifiersopt<code> </code>ResultType<code> </code>MethodDeclarator<code> </code>Throwsopt
</i>
<i>MethodModifiers:<br>
	MethodModifier<br>
	MethodModifiers<code> </code>MethodModifier
</i>
<i>MethodModifier: one of<br>
	<code>public</code>&#32;<code>protected</code>&#32;<code>private<br>
	static<br>
	abstract&#32;final&#32;native&#32;synchronized
</code></i></pre><p><a name="44497"></a>
Now consider the partial input:
<p><pre><a name="44498"></a>class Problem2 { public static int
</pre><p><a name="44499"></a>
When the parser is considering the token <code>static</code>, with one-token lookahead to 
symbol <code>int</code>-or, worse yet, considering the token <code>public</code> with lookahead to 
<code>static</code>-it cannot yet tell whether this will be a field declaration such as:
<p><pre><a name="44500"></a>public static int maddie = 0;
</pre><p><a name="44501"></a>
or a method declaration such as:
<p><pre><a name="44502"></a>public static int maddie(String art) { return art.length(); }
</pre><p><a name="44503"></a>
Therefore, the parser cannot tell with only one-token lookahead whether <code>static</code> 
(or, similarly, <code>public</code>) should be reduced to <i>FieldModifier</i> or <i>MethodModifier</i>. 
Therefore, the productions shown above result in a grammar that is not LALR(1). 
There are also other problems with drawing distinctions among different kinds of 
modifiers in the grammar.
<p><a name="44504"></a>
While not all contexts provoke the problem, the simplest solution is to combine all contexts in which such modifiers are used, eliminating all six of the nonterminals &#32;<i>ClassModifiers </i><a href="8_1_2.htm#21613">(&#167;8.1.2)</a>, <i>FieldModifiers </i><a href="8_3_1.htm#78091">(&#167;8.3.1)</a>, <i>MethodModifiers </i><a href="8_4_3.htm#78188">(&#167;8.4.3)</a>, <i>ConstructorModifiers </i><a href="8_6_3.htm#42018">(&#167;8.6.3)</a>, <i>InterfaceModifiers </i><a href="9_1_2.htm#235947">(&#167;9.1.2)</a>, and <i>ConstantModifiers</i> &#32;<a href="9_3.htm#78642">(&#167;9.3)</a> from the grammar, replacing them all with a single nonterminal <i>Modifiers</i>:<p>
<pre>
<i><i>Modifiers:<br>
	Modifier<br>
	Modifiers</i><code> </code><i>Modifier
</i></i>
<i><i>Modifier: one of<br>
	</i><code>public protected private<br>
	static<br>
	abstract final native synchronized transient volatile
</code></i></pre><p><a name="44525"></a>
A later stage of compiler analysis then sorts out the precise role of each modifier 
and whether it is permitted in a given context.
<p>

</body></html>

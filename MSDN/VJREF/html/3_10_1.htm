<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.10.1 Integer Literals</title>
<META NAME=MS-HAID CONTENT="3_10_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>3.10.1	 Integer Literals</h3>
<a name="48282"></a>
<p>
<a name="46750"></a>
See <a href="4_2_1.htm#9151">&#167;4.2.1</a> for a general discussion of the integer types and values.
<p><a name="7117"></a>
An <i>integer literal</i> may be expressed in decimal (base 10), hexadecimal (base &#32;16), or octal (base 8):<p>
<pre>
<i><i>IntegerLiteral</i>:<br>
<i>	DecimalIntegerLiteral<br>
	HexIntegerLiteral	<br>
	OctalIntegerLiteral
</i></i>
<i><i>DecimalIntegerLiteral</i>:<br>
<i>	DecimalNumeral</i><code> </code><i>IntegerTypeSuffix</i>opt
</i>
<i><i>HexIntegerLiteral</i>:<br>
<i>	HexNumeral</i><code> </code><i>IntegerTypeSuffix</i>opt
</i>
<i><i>OctalIntegerLiteral</i>:<i>	<br>
	OctalNumeral</i><code> </code><i>IntegerTypeSuffix</i>opt
</i>
<i>IntegerTypeSuffix: one of<br>
	<code>l&#32;L
</code></i></pre><p><a name="19247"></a>
An integer literal is of type <code>long</code> if it is suffixed with an ASCII letter <code>L</code> or <code>l</code> (ell); otherwise it is of type <code>int</code> <a href="4_2_1.htm#9151">(&#167;4.2.1)</a>. The suffix <code>L</code> is preferred, because the letter <code>l</code> (ell) is often hard to distinguish from the digit <code>1</code> (one).<p>
<a name="48345"></a>
A decimal numeral is either the single ASCII character <code>0</code>, representing the integer zero, or consists of an ASCII digit from <code>1</code> to <code>9</code>, optionally followed by one or more ASCII digits from <code>0</code> to <code>9</code>, representing a positive integer:<p>
<pre>
<i><i>DecimalNumeral:<br>
	</i><code>0<br>
</code>	<i>NonZeroDigit</i><code> </code><i>Digits</i>opt
</i>
<i><i>Digits:<br>
	Digit<br>
	Digits</i><code> </code><i>Digit
</i></i>
<i><i>Digit</i>:<br>
<code>	0<br>
</code><i>	NonZeroDigit
</i></i>
<i><i>NonZeroDigit: one of<br>
</i><code>	1&#32;2&#32;3&#32;4&#32;5&#32;6&#32;7&#32;8&#32;9
</code></i></pre><p><a name="44312"></a>
A hexadecimal numeral consists of the leading ASCII characters <code>0x</code> or <code>0X</code> followed by one or more ASCII hexadecimal digits and can represent a positive, zero, or negative integer. Hexadecimal digits with values 10 through 15 are represented by the ASCII letters <code>a</code> through <code>f</code> or <code>A</code> through <code>F</code>, respectively; each letter used as a hexadecimal digit may be uppercase or lowercase.<p>
<pre>
<i><i>HexNumeral</i>:<br>
<code>	0 x </code>HexDigit<br>
	<code>0 X </code>HexDigit<br>
<code>	</code>HexNumeral<code> </code>HexDigit
</i></pre><p><a name="229443"></a>
The following production from <a href="3_3.htm#100850">&#167;3.3</a> is repeated here for clarity:
<p><pre>
<i>HexDigit: one of<br>
<code>	0&#32;1&#32;2&#32;3&#32;4&#32;5&#32;6&#32;7&#32;8&#32;9&#32;a&#32;b&#32;c&#32;d&#32;e&#32;f&#32;A&#32;B&#32;C&#32;D&#32;E&#32;F
</code></i></pre><p><a name="48298"></a>
An octal numeral consists of an ASCII digit <code>0</code> followed by one or more of the ASCII digits <code>0</code> through <code>7</code> and can represent a positive, zero, or negative integer.<p>
<pre>
<i><i>OctalNumeral</i>:<br>
<code>	0 </code><i>OctalDigit<br>
	OctalNumeral</i><code> </code><i>OctalDigit
</i></i>
<i>OctalDigit: one of<br>
<code>	0&#32;1&#32;2&#32;3&#32;4&#32;5&#32;6&#32;7
</code></i><a name="231741"></a>
 <p>
</pre><p><a name="231738"></a>
Note that octal numerals are always consist of two or more digits; <code>0</code> is always considered to be a decimal numeral-not that it matters much in practice, for the numerals <code>0</code>, <code>00</code>, and <code>0x0</code> all represent exactly the same integer value.<p>
<a name="231836"></a>
The largest decimal literal of type <code>int</code> is <code>2147483648</code> (<img src="3anc.gif">). All decimal literals from <code>0</code> to <code>2147483647</code> may appear anywhere an <code>int</code> literal may appear, but the literal <code>2147483648</code> may appear only as the operand of the unary negation operator <code>-</code>.<p>
<a name="229493"></a>
The largest positive hexadecimal and octal literals of type <code>int</code> are <code>0x7fffffff</code> and <code>017777777777</code>, respectively, which equal <code>2147483647</code> (<img src="3anc1.gif">). The most negative hexadecimal and octal literals of type <code>int</code> are <code>0x80000000</code> and <code>020000000000</code>, respectively, each of which represents the decimal value <code>-2147483648</code> (<img src="3anc2.gif">). The hexadecimal and octal literals <code>0xffffffff</code> and <code>037777777777</code>, respectively, represent the decimal value <code>-1</code>.<p>
<a name="229508"></a>
See also <code>Integer.MIN_VALUE</code> <a href="20_7.htm#2390">(&#167;20.7.1)</a> and <code>Integer.MAX_VALUE</code> <a href="20_7.htm#2391">(&#167;20.7.2)</a>.<p>
<a name="48314"></a>
A compile-time error occurs if a decimal literal of type <code>int</code> is larger than <code>2147483648</code> (<img src="3anc3.gif">), or if the literal <code>2147483648</code> appears anywhere other than as the operand of the unary <code>-</code> operator, or if a hexadecimal or octal <code>int</code> literal does not fit in 32 bits.<p>
<a name="48319"></a>
Examples of <code>int</code> literals:<p>
<pre><a name="48320"></a>	0		2		0372			0xDadaCafe					1996		0x00FF00FF
</pre><p><a name="21371"></a>
The largest decimal literal of type <code>long</code> is <code>9223372036854775808L</code> (<img src="3anc4.gif">). All decimal literals from <code>0L</code> to <code>9223372036854775807L</code> may appear anywhere a <code>long</code> literal may appear, but the literal <code>9223372036854775808L</code> may appear only as the operand of the unary negation operator <code>-</code>.<p>
<a name="21372"></a>
The largest positive hexadecimal and octal literals of type <code>long</code> are <code>0x7fffffffffffffffL</code> and <code>0777777777777777777777L</code>, respectively, which equal <code>9223372036854775807L</code> (<img src="3anc5.gif">). The literals <code>0x8000000000000000L</code> and <code>01000000000000000000000L</code> are the most negative <code>long</code> hexadecimal and octal literals, respectively. Each has the decimal value<code> -9223372036854775808L</code> (<img src="3anc6.gif">). The hexadecimal and octal literals <code>0xffffffffffffffffL</code> and <code>01777777777777777777777L</code>, respectively, represent the decimal value <code>-1L</code>.<p>
<a name="229516"></a>
See also <code>Long.MIN_VALUE</code> <a href="20_8.htm#2397">(&#167;20.8.1)</a> and <code>Long.MAX_VALUE</code> <a href="20_8.htm#14434">(&#167;20.8.2)</a>.<p>
<a name="76695"></a>
A compile-time error occurs if a decimal literal of type <code>long</code> is larger than <code>9223372036854775808L</code> (<img src="3anc7.gif">), or if the literal <code>9223372036854775808L</code> appears anywhere other than as the operand of the unary <code>-</code> operator, or if a hexadecimal or octal <code>long</code> literal does not fit in 64 bits.<p>
<a name="46763"></a>
Examples of <code>long</code> literals:<p>
<pre><a name="46765"></a>	0l		0777L			0x100000000L					2147483648L				  &#32;0xC0B0L
</pre><p>

</body></html>

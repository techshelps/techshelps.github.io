<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>21.7 The Class java.util.Observable</title>
<META NAME=MS-HAID CONTENT="21_7">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>21.7	 The Class java.util.Observable</h1>
<a name="7569"></a>
<p>
<a name="21698"></a>
Each instance of class <code>Observable</code> maintains a set of "observers" that are notified 
whenever the <code>Observable</code> object changes in some significant way. An observer 
may be any object that implements interface <code>Observer</code> <a href="21_8.htm#7590">(&#167;21.8)</a>.
<p><a name="23819"></a>
Note that this notification mechanism is has nothing to do with threads <a href="20_20.htm#2658">(&#167;20.20)</a> and is completely separate from the <code>wait</code> and <code>notify</code> mechanism of class <code>Object</code> <a href="20_1.htm#14533">(&#167;20.1)</a>.<p>
<pre><a name="7570"></a>public class <code><b>Observable</b></code> {
<a name="7571"></a>	public void <code><b>addObserver</b></code>(Observer o);
<a name="7572"></a>	public void <code><b>deleteObserver</b></code>(Observer o);
<a name="21752"></a>	public void <code><b>deleteObservers</b></code>();
<a name="21758"></a>	public int <code><b>countObservers</b></code>();
<a name="7573"></a>	public void <code><b>notifyObservers</b></code>();
<a name="7574"></a>	public void <code><b>notifyObservers</b></code>(Object arg);
<a name="7576"></a>	protected void <code><b>setChanged</b></code>();
<a name="7577"></a>	protected void <code><b>clearChanged</b></code>();
<a name="7578"></a>	public boolean <code><b>hasChanged</b></code>();
<a name="21702"></a>}
</pre><p><a name="21703"></a>
When an observable object is newly created, its set of observers is empty.<p>
<a name="21707"></a>
Two observers are considered the same if and only if the <code>equals</code> method <a href="20_1.htm#14865">(&#167;20.1.3)</a> returns <code>true</code> for them.<p>
<a name="21704"></a>
<p><strong>21.7.1	</strong> <code>public void addObserver(Observer o)</code>
<p>
<a name="21711"></a>
The observer <code>o</code> is added to this <code>Observable</code> object's set of observers, provided 
that it is not the same as some observer already in the set.
<p><a name="7582"></a>
<p><strong>21.7.2	</strong> <code>public void deleteObserver(Observer o)</code>
<p>
<a name="21717"></a>
The observer <code>o</code> is removed from this <code>Observable</code> object's set of observers.
<p><a name="21746"></a>
<p><strong>21.7.3	</strong> <code>public void deleteObservers()</code>
<p>
<a name="21788"></a>
All observers are removed from this <code>Observable</code> object's set of observers.
<p><a name="21784"></a>
<p><strong>21.7.4	</strong> <code>public int countObservers()</code>
<p>
<a name="21794"></a>
The number of observers in this <code>Observable</code> object's set of observers is returned.
<p><a name="7583"></a>
<p><strong>21.7.5	</strong> <code>public void notifyObservers()</code>
<p>
<a name="21725"></a>
If this <code>Observable</code> object has been marked as changed, this method causes all 
observers to be notified with <code>null</code> as the second argument; in other words, this 
method is equivalent to:
<p><pre><a name="21726"></a>notifyObservers(null)
</pre><p><a name="7584"></a>
<p><strong>21.7.6	</strong> <code>public void notifyObservers(Object arg)</code>
<p>
<a name="21731"></a>
If this <code>Observable</code> object has been marked as changed <a href="21_7.htm#7588">(&#167;21.7.9)</a>, this method 
causes all observers to be notified with <code>arg</code> as the second argument. An observer 
is notified by calling its <code>update</code> method <a href="21_8.htm#7594">(&#167;21.8.1)</a> on two arguments: this 
<code>Observable</code> object and <code>arg</code>. The mark on this object is then cleared <a href="21_7.htm#7587">(&#167;21.7.8)</a>.
<p><a name="7586"></a>
<p><strong>21.7.7	</strong> <code>protected void setChanged()</code>
<p>
<a name="21773"></a>
This <code>Observable</code> object is marked as having been changed; the <code>hasChanged</code> 
method will now return <code>true</code>.
<p><a name="7587"></a>
<p><strong>21.7.8	</strong> <code>protected void clearChanged()</code>
<p>
<a name="21775"></a>
This <code>Observable</code> object is marked as not having been changed; the <code>hasChanged</code> 
method will now return <code>false</code>.
<p><a name="7588"></a>
<p><strong>21.7.9	</strong> <code>public boolean hasChanged()</code>
<p>
<a name="21780"></a>
The result is true if and only if the <code>setChanged</code> method has been called for this 
<code>Observable</code> object more recently than either the <code>clearChanged</code> method or the 
<code>notifyObservers</code> method.
<p>

</body></html>

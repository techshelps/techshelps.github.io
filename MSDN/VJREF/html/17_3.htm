<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>17.3 Rules about Variables</title>
<META NAME=MS-HAID CONTENT="17_3">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>17.3	 Rules about Variables</h2>
<a name="28654"></a>
<p>
<a name="28308"></a>
Let <i>T</i> be a thread and <i>V</i><i></i> be a variable. There are certain constraints on the actions 
performed by <i>T</i><em></em> with respect to <i>V</i>:
<p><ul><a name="28309"></a>
<li>An <i>use</i> or <i>assign</i> by <i>T</i><em></em> of <i>V</i><i></i> is permitted only when dictated by execution by <i>T</i><em></em> of the Java program according to the standard Java execution model. For example, an occurrence of <i>V</i><i></i> as an operand of the <code>+</code> operator requires that a single <i>use</i> action occur on <i>V</i><i></i>; an occurrence of <i>V</i><i></i> as the left-hand operand of the assignment operator <code>=</code> requires that a single <i>assign</i> action occur. All <i>use</i> and <i>assign</i> actions by a given thread must occur in the order specified by the program being executed by the thread. If the following rules forbid <i>T</i><em></em> to perform a required <i>use</i> as its next action, it may be necessary for <i>T</i><em></em> to perform a <i>load </i>first in order to make progress.
<a name="28310"></a>
<li>A <i>store</i> action by <i>T</i><em></em> on <i>V</i><i></i> must intervene between an <i>assign</i> by <i>T</i><em></em> of <i>V</i><i></i> and a subsequent <i>load</i> by <i>T</i><em></em> of <i>V</i><i></i>. (Less formally: a thread is not permitted to lose its most recent assign.)
<a name="28312"></a>
<li>An <i>assign</i> action by <i>T</i><em></em> on <i>V</i><i></i> must intervene between a <i>load</i> or <i>store</i> by <i>T</i><em></em> of <i>V</i> and a subsequent <i>store</i> by <i>T</i><em></em> of <i>V</i><i></i>. (Less formally: a thread is not permitted to write data from its working memory back to main memory for no reason.)
<a name="28313"></a>
<li>After a thread is created, it must perform an <i>assign</i> or <i>load</i> action on a variable before performing a <i>use</i> or <i>store</i> action on that variable. (Less formally: a new thread starts with an empty working memory.)
</ul><ul><a name="28314"></a>
<li>After a variable is created, every thread must perform an <i>assign</i> or <i>load</i> action on that variable before performing a <i>use</i> or <i>store</i> action on that variable. (Less formally: a new variable is created only in main memory and is not initially in any thread's working memory.)
</ul><p><a name="28315"></a>
Provided that all the constraints above and below are obeyed, a <i>load</i> or <i>store</i> action may be issued at any time by any thread on any variable, at the whim of the implementation.<p>
<a name="28317"></a>
There are also certain constraints on the <i>read</i> and <i>write</i> actions performed by main memory:<p>
<ul><a name="28318"></a>
<li>For every <i>load</i> action performed by any thread <i>T</i><em></em> on its working copy of a variable <i>V</i><i></i>, there must be a corresponding preceding <i>read</i> action by the main memory on the master copy of <i>V</i><i></i>, and the <i>load</i> action must put into the working copy the data transmitted by the corresponding <i>read</i> action.
<a name="28319"></a>
<li>For every <i>store</i> action performed by any thread <i>T</i><em></em> on its working copy of a variable <i>V</i><i></i>, there must be a corresponding following <i>write</i> action by the main memory on the master copy of <i>V</i><i></i>, and the <i>write</i> action must put into the master copy the data transmitted by the corresponding <i>store</i> action.
<a name="28786"></a>
<li>Let action <i>A</i> be a <i>load</i> or <i>store</i> by thread <i>T</i><em></em> on variable <i>V</i><i></i>, and let action <i>P</i> be the corresponding <i>read</i> or <i>write</i> by the main memory on variable <i>V</i><i></i>. Similarly, let action <i>B</i><i> </i>be some other <i>load</i> or <i>store</i> by thread <i>T</i><em></em> on that same variable <i>V</i><i></i>, and let action <i>Q</i> be the corresponding <i>read</i> or <i>write</i> by the main memory on variable <i>V</i><i></i>. If <i>A</i> precedes <i>B</i>, then <i>P</i> must precede <i>Q</i>. (Less formally: actions on the master copy of any given variable on behalf of a thread are performed by the main memory in exactly the order that the thread requested.)
</ul><p><a name="28817"></a>
Note that this last rule applies <i>only</i> to actions by a thread on the <i>same</i> variable. 
However, there is a more stringent rule for <code>volatile</code> variables <a href="17_7.htm#28330">(&#167;17.7)</a>.
<p>

</body></html>

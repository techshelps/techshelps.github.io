<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>7.6 Type Declarations</title>
<META NAME=MS-HAID CONTENT="7_6">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h2>7.6	 Type Declarations</h2>
<a name="26783"></a>
<p>
<a name="26790"></a>
A type declaration declares a class type <a href="chap08.htm">(&#167;8)</a> or an interface type <a href="chap09.htm">(&#167;9)</a>:
<p><pre>
<i>TypeDeclaration:<br>
	ClassDeclaration<br>
	InterfaceDeclaration<br>
	<code>;
</code></i></pre><p><a name="61526"></a>
A Java compiler must ignore extra "<code>;</code>" tokens appearing at the level of type declarations. Stray semicolons are permitted in Java solely as a concession to C++ programmers who are used to writing:<p>
<pre><a name="61527"></a>class date { int month, day, year; };
</pre><p><a name="61528"></a>
(In C++, but not in Java, one can provide a comma-separated list of identifiers in 
order to declare variables between the "<code>}</code>" and the "<code>;</code>".) Extra semicolons should 
not be used in new Java code. Software that reformats Java code can delete them.
<p><a name="37662"></a>
By default, the types declared in a package are accessible only within the compilation units of that package, but a type may be declared to be <code>public</code> to grant access to the type from code in other packages (<a href="6_6.htm#33916">&#167;6.6</a>, <a href="8_1_2.htm#21613">&#167;8.1.2</a>, <a href="9_1_2.htm#235947">&#167;9.1.2</a>).<p>
<a name="26802"></a>
A Java implementation must keep track of types within packages by their fully qualified names <a href="6_7.htm#25430">(&#167;6.7)</a>. Multiple ways of naming a type must be expanded to fully qualified names to make sure that such names are understood as referring to the same type. For example, if a compilation unit contains the single-type-import declaration <a href="7_5_1.htm#26699">(&#167;7.5.1)</a>:<p>
<pre><a name="26806"></a>import java.util.Vector;
</pre><p><a name="26807"></a>
then within that compilation unit the simple name <code>Vector</code> and the fully qualified 
name <code>java.util.Vector</code> refer to the same type.
<p><a name="40154"></a>
When Java packages are stored in a file system <a href="7_2_1.htm#37546">(&#167;7.2.1)</a>, the host system may choose to enforce the restriction that it is a compile-time error if a type is not found in a file under a name composed of the type name plus an extension (such as <code>.java</code> or <code>.jav</code>) if either of the following is true:<p>
<ul><a name="40155"></a>
<li>The type is referred to by code in other compilation units of the package in which the type is declared.
<a name="40159"></a>
<li>The type is declared <code>public</code> (and therefore is potentially accessible from code in other packages).
</ul><p><a name="40156"></a>
This restriction implies that there must be at most one such type per compilation 
unit. This restriction makes it easy for a Java compiler and Java Virtual Machine 
to find a named class within a package; for example, the source code for a <code>public</code> 
type <code>wet.sprocket.Toad</code> would be found in a file <code>Toad.java</code> in the directory 
<code>wet/sprocket</code>, and the corresponding object code would be found in the file 
<code>Toad.class</code> in the same directory.
<p><a name="20150"></a>
When Java packages are stored in a database <a href="7_2_2.htm#37739">(&#167;7.2.2)</a>, the host system need not enforce such restrictions.<p>
<a name="40175"></a>
In practice, many Java programmers choose to put each class or interface type in its own compilation unit, whether or not it is <code>public</code> or is referred to by code in other compilation units.<p>


</Font></body></html>

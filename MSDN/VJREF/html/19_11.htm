<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>19.11 Grammar from &#167;14: Blocks and Statements  <a href="chap14.htm">&#167;14</a></title>
<META NAME=MS-HAID CONTENT="19_11">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>19.11	 Grammar from &#167;14: Blocks and Statements  <a href="chap14.htm">&#167;14</a></h2>
<a name="26499"></a>
<p>
<a name="43971"></a>
<p>
<pre>
<i>Block:<br>
	<code>{ </code>BlockStatementsopt<code> }
</code></i>
<i>BlockStatements:<br>
<code>	</code>BlockStatement<br>
<code>	</code>BlockStatements<code> </code>BlockStatement
</i>
<i>BlockStatement:<br>
	LocalVariableDeclarationStatement<br>
	Statement
</i>
<i>LocalVariableDeclarationStatement:<br>
	LocalVariableDeclaration<code> ;
</code></i>
<i>LocalVariableDeclaration:<br>
	Type<code> </code>VariableDeclarators
</i>
<i>Statement:<br>
	StatementWithoutTrailingSubstatement<br>
	LabeledStatement<br>
	IfThenStatement<br>
	IfThenElseStatement<br>
	WhileStatement<br>
	ForStatement
</i>
<i>StatementNoShortIf:<br>
	StatementWithoutTrailingSubstatement<br>
	LabeledStatementNoShortIf<br>
	IfThenElseStatementNoShortIf<br>
	WhileStatementNoShortIf<br>
	ForStatementNoShortIf
</i>
<i>StatementWithoutTrailingSubstatement:<br>
	Block<br>
	EmptyStatement<br>
	ExpressionStatement<br>
	SwitchStatement<br>
	DoStatement<br>
	BreakStatement<br>
	ContinueStatement<br>
	ReturnStatement<br>
	SynchronizedStatement<br>
	ThrowStatement<br>
	TryStatement
</i>
<i>EmptyStatement:<br>
	<code>;
</code></i>
<i>LabeledStatement:<br>
	Identifier<code> : </code>Statement
</i>
<i>LabeledStatementNoShortIf:<br>
	Identifier<code> : </code>StatementNoShortIf
</i>
<i>ExpressionStatement:<br>
	StatementExpression<code> ;
</code></i>
<i>StatementExpression:<br>
	Assignment<br>
	PreIncrementExpression<br>
	PreDecrementExpression<br>
	PostIncrementExpression<br>
	PostDecrementExpression<br>
	MethodInvocation<br>
<code>	</code>ClassInstanceCreationExpression
</i></pre><p><pre>
<i>IfThenStatement:<br>
	<code>if ( </code>Expression<code> ) </code>Statement
</i>
<i>IfThenElseStatement:<br>
	<code>if ( </code>Expression<code> ) </code>StatementNoShortIf<code> else </code>Statement
</i>
<i>IfThenElseStatementNoShortIf:<br>
	<code>if ( </code>Expression<code> ) </code>StatementNoShortIf<code> else </code>StatementNoShortIf
</i>
<i>SwitchStatement:<br>
<code>	switch ( </code>Expression<code> ) </code><i>Switch</i>Block
</i>
<i>SwitchBlock:<br>
	<code>{ </code>SwitchBlockStatementGroupsopt<code> </code>SwitchLabelsopt<code> }
</code></i>
<i>SwitchBlockStatementGroups:<br>
<code>	</code>SwitchBlockStatementGroup<br>
<code>	</code>SwitchBlockStatementGroups<code> </code>SwitchBlockStatementGroup
</i>
<i>SwitchBlockStatementGroup:<br>
	SwitchLabels<code> </code>BlockStatements
</i>
<i>SwitchLabels:<br>
	SwitchLabel<br>
	SwitchLabels<code> </code>SwitchLabel
</i>
<i>SwitchLabel:<br>
<code>	case </code>ConstantExpression<code> :<br>
	default :
</code></i>
<i>WhileStatement:<br>
	<code>while ( </code>Expression<code> ) </code>Statement
</i>
<i>WhileStatementNoShortIf:<br>
	<code>while ( </code>Expression<code> ) </code>StatementNoShortIf
</i>
<i>DoStatement:<br>
<code>	do </code>Statement<code> while ( </code>Expression<code> ) ;
</code></i></pre><p><pre>
<i>ForStatement:<br>
	<code>for ( </code>ForInitopt<code> ; </code>Expressionopt<code> ; </code>ForUpdateopt<code> )<br>
</code>		Statement
</i>
<i>ForStatementNoShortIf:<br>
	<code>for ( </code>ForInitopt<code> ; </code>Expressionopt<code> ; </code>ForUpdateopt<code> )<br>
		</code>StatementNoShortIf
</i>
<i>ForInit:<br>
<code>	</code>StatementExpressionList<br>
	LocalVariableDeclaration
</i>
<i>ForUpdate:<br>
	StatementExpressionList
</i>
<i>StatementExpressionList:<br>
	StatementExpression<br>
	StatementExpressionList<code> , </code>StatementExpression
</i>
<i>BreakStatement:<br>
	<code>break </code>Identifieropt<code> ;
</code></i>
<i>ContinueStatement:<br>
	<code>continue </code>Identifieropt<code> ;
</code></i>
<i>ReturnStatement:<br>
	<code>return </code>Expressionopt<code> ;
</code></i>
<i>ThrowStatement:<br>
	<code>throw </code>Expression<code> ;
</code></i>
<i>SynchronizedStatement:<br>
	<code>synchronized ( </code><i>Expression</i><code> ) </code><i>Block
</i></i>
<i>TryStatement:<br>
<code>	try </code>Block<code> </code>Catches<br>
<i>	</i><code>try </code>Block<code> </code>Catchesopt<code> </code>Finally
</i>
<i>Catches:<br>
	CatchClause<br>
	Catches<code> </code>CatchClause
</i>
<i>CatchClause:<br>
	<code>catch ( </code>FormalParameter<code> ) </code>Block
</i>
<i>Finally:<br>
<code>	finally </code>Block
</i></pre><p>

</body></html>

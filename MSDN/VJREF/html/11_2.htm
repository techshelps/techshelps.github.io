<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>11.2 Compile-Time Checking of Exceptions</title>
<META NAME=MS-HAID CONTENT="11_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>11.2	 Compile-Time Checking of Exceptions</h2>
<a name="44121"></a>
<p>
<a name="44122"></a>
The Java language checks, at compile time, that a Java program contains handlers 
for <i>checked exceptions</i>, by analyzing which checked exceptions can result from 
execution of a method or constructor. For each checked exception which is a possible result, the <code>throws</code> clause for the method <a href="8_4_4.htm#78323">(&#167;8.4.4)</a> or constructor <a href="8_6_4.htm#78427">(&#167;8.6.4)</a> 
must mention the class of that exception or one of the superclasses of the class of 
that exception. This compile-time checking for the presence of exception handlers 
is designed to reduce the number of exceptions which are not properly handled.
<p><a name="44129"></a>
The <i>unchecked exceptions classes</i> are the class <code>RuntimeException</code> and its subclasses, and the class <code>Error</code> and its subclasses. All other exception classes are <i>checked exception classes</i>. The standard Java API defines a number of exception classes, both checked and unchecked. Additional exception classes, both checked and unchecked, may be declared by Java programmers. See <a href="11_5.htm#44278">&#167;11.5</a> for a description of the Java exception class hierarchy and the exception classes defined by the standard Java API and Java Virtual Machine.<p>
<a name="44133"></a>
The checked exception classes named in the <code>throws</code> clause are part of the contract between the implementor and user of the method or constructor. The <code>throws</code> clause of an overriding method may not specify that this method will result in throwing any checked exception which the overridden method is not permitted, by its <code>throws</code> clause, to throw. When interfaces are involved, more than one method declaration may be overridden by a single overriding declaration. In this case, the overriding declaration must have a <code>throws</code> clause that is compatible with <i>all</i> the overridden declarations <a href="9_4.htm#78651">(&#167;9.4)</a>.<p>
<a name="44146"></a>
Variable initializers for fields <a href="8_3_2.htm#24510">(&#167;8.3.2)</a> and static initializers <a href="8_5.htm#39245">(&#167;8.5)</a> must not result in a checked exception; if one does, a compile-time error occurs.<p>


</body></html>

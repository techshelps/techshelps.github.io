<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>20.21 The Class java.lang.ThreadGroup</title>
<META NAME=MS-HAID CONTENT="20_21">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>20.21	 The Class java.lang.ThreadGroup</h1>
<a name="14469"></a>
<p>
<a name="26636"></a>
A thread group is a set of threads and thread groups. Every thread belongs to 
exactly one thread group, and every thread group but one (called the "system 
thread group") belongs to some other thread group. Thus thread groups form a 
tree with the system thread group at the root.
<p><a name="26640"></a>
Thread groups provide a way to manage threads and to impose security boundaries; for example, a thread may always create a new thread within its own thread group, but creating a thread in another thread group requires the approval of the security manager <a href="20_17.htm#14464">(&#167;20.17)</a>, as does the creation of a new thread group.<p>
<pre><a name="14195"></a>public class <code><b>ThreadGroup</b></code> {
<a name="14196"></a>	public <code><b>ThreadGroup</b></code>(String name)
<a name="26901"></a>		throws SecurityException;
<a name="14197"></a>	public <code><b>ThreadGroup</b></code>(ThreadGroup parent, String name)
<a name="26896"></a>		throws <code>NullPointerExpression</code>, SecurityException,
<a name="27290"></a>			<code>IllegalThreadStateException</code>;
<a name="2786"></a>	public String <code><b>toString</b></code>();
<a name="27073"></a>	public final void <code><b>checkAccess</b></code>();
<a name="14198"></a>	public final String <code><b>getName</b></code>();
<a name="14199"></a>	public final ThreadGroup <code><b>getParent</b></code>();
<a name="2807"></a>	public final boolean <code><b>parentOf</b></code>(ThreadGroup g);
<a name="31409"></a>	public final void <code><b>stop</b></code>()
<a name="2798"></a>		throws <code>SecurityException</code>;
<a name="31412"></a>	public final void <code><b>suspend</b></code>()
<a name="2799"></a>		throws <code>SecurityException</code>;
<a name="31415"></a>	public final void <code><b>resume</b></code>()
<a name="2800"></a>		throws <code>SecurityException</code>;
<a name="2801"></a>	public final void <code><b>destroy</b></code>()
<a name="29311"></a>		throws <code>SecurityException</code>, <code>IllegalThreadStateException</code>;
<a name="2845"></a>	public final int <code><b>getMaxPriority</b></code>();
<a name="2846"></a>	public final void <code><b>setMaxPriority</b></code>(int <code>newMaxPriority</code>)
<a name="27567"></a>		throws <code>SecurityException</code>, IllegalArgumentException;
<a name="2847"></a>	public final boolean <code><b>isDaemon</b></code>();
<a name="2848"></a>	public final void <code><b>setDaemon</b></code>(boolean daemon)
<a name="27572"></a>		throws <code>SecurityException</code>;
<a name="29481"></a>	public 	int <code><b>threadsCount</b></code>();
<a name="29482"></a>	public int <code><b>allThreadsCount</b></code>()		;
<a name="29483"></a>	public int <code><b>groupsCount</b></code>();
<a name="29484"></a>	public int <code><b>allGroupsCount</b></code>();
<a name="29485"></a>	public Thread[] <code><b>threads</b></code>();
<a name="29486"></a>	public ThreadGroup[] <code><b>groups</b></code>();
<a name="29487"></a>	public 	Thread[] <code><b>allThreads</b></code>();
<a name="29488"></a>	public 	ThreadGroup[] <code><b>allGroups</b></code>();
<a name="14206"></a>	public int <code><b>activeCount</b></code>();															// deprecated
<a name="2792"></a>	public int <code><b>activeGroupCount</b></code>();															// deprecated
<a name="14207"></a>	public int <code><b>enumerate</b></code>(Thread list[]);															// deprecated
<a name="14208"></a>	public int <code><b>enumerate</b></code>(Thread list[],															// deprecated
<a name="29295"></a>			boolean recurse);
<a name="14210"></a>	public int <code><b>enumerate</b></code>(ThreadGroup list[]);															// deprecated
<a name="14211"></a>	public int <code><b>enumerate</b></code>(ThreadGroup list[],															// deprecated
<a name="29304"></a>			boolean recurse);
<a name="14216"></a>	public void <code><b>list</b></code>();
<a name="14217"></a>	public void <code><b>uncaughtException</b></code>(Thread t, Throwable e);
<a name="27427"></a>}
</pre><p><a name="27460"></a>
Every thread group has a <i>maximum priority</i>. The priority of a thread cannot be set <a href="20_20.htm#14175">(&#167;20.20.23)</a> higher than the maximum priority of its thread group.<p>
<a name="27454"></a>
Each thread group may or may not be marked as a <i>daemon</i>. When a new <code>ThreadGroup</code> object is created, the newly created thread group is marked as a daemon thread group if and only if the thread group to which it belongs is currently a daemon thread group. But the daemonhood of a thread group <i>G</i> may be changed at any time by calling the <code>setDaemon</code> method of the <code>ThreadGroup</code> object that represents <i>G</i> (provided that the security manager <a href="20_17.htm#14110">(&#167;20.17.12)</a> approves execution of the <code>setDaemon</code> operation).<p>
<a name="27433"></a>
Every thread group has a name, which is a <code>String</code>, for identification purposes. More than one thread group may have the same name.<p>
<a name="27437"></a>
Creation of a thread group requires the approval of the <code>checkAccess</code> method <a href="20_21.htm#27041">(&#167;20.21.4)</a> of its proposed parent thread group, which forwards the decision to the security manager <a href="20_17.htm#14109">(&#167;20.17.11)</a>.<p>
<a name="27429"></a>
<p><strong>20.21.1	</strong> <code>public ThreadGroup(String name)<br>throws SecurityException</code>
<p>
<a name="26914"></a>
First, the <code>checkAccess</code> method <a href="20_21.htm#27041">(&#167;20.21.4)</a> of the thread group to which the current thread belongs is called with no arguments.
<p><a name="26680"></a>
This constructor initializes a newly created <code>ThreadGroup</code> object so that it has the specified <code>name</code> as its name and belongs to the same thread group as the thread that is creating the new thread group.<p>
<a name="26865"></a>
This constructor has exactly the same effect as the explicit constructor call <code>this(Thread.currentThread().getThreadGroup(),</code> <code>name) </code><a href="20_21.htm#2880">(&#167;20.21.2)</a>.<p>
<a name="2880"></a>
<p><strong>20.21.2	</strong> <code>public ThreadGroup(ThreadGroup parent, String name)<br>throws NullPointerExpression, SecurityException,  &#32; &#32; &#32;IllegalThreadStateException</code>
<p>
<a name="26645"></a>
First, the <code>checkAccess</code> method <a href="20_21.htm#27041">(&#167;20.21.4)</a> of the <code>parent</code> thread group is called 
with no arguments.
<p><a name="26871"></a>
If <code>parent</code> is <code>null</code>, then a <code>NullPointerExpression</code> is thrown. If <code>parent</code> is a <code>ThreadGroup</code> that has been destroyed by method <code>destroy</code> <a href="20_21.htm#2888">(&#167;20.21.11)</a>, then an <code>IllegalThreadStateException</code> is thrown.<p>
<a name="26646"></a>
This constructor initializes a newly created <code>ThreadGroup</code> object so that it has the specified <code>name</code> as its name and belongs to the thread group represented by <code>parent</code>.<p>
<a name="26967"></a>
The maximum priority for the newly created thread group is set equal to the maximum priority of <code>parent</code>. The method <code>setMaxPriority</code> <a href="20_21.htm#2890">(&#167;20.21.13)</a> may be used to change the maximum priority to a lower value.<p>
<a name="26971"></a>
The newly created thread group is initially marked as being a daemon thread group if and only <code>parent</code> is a daemon thread group. The method <code>setDaemon </code><a href="20_21.htm#2892">(&#167;20.21.15)</a> may be used to change whether or not a thread group is a daemon thread group.<p>
<a name="2881"></a>
<p><strong>20.21.3	</strong> <code>public String toString()</code>
<p>
<a name="26657"></a>
The returned value is a concatenation of the following six strings:
<p><ul><a name="26662"></a>
<li>The name of the class of this thread group object
<a name="26663"></a>
<li><code>"[name="</code>
<a name="26723"></a>
<li>The name <a href="20_21.htm#2882">(&#167;20.21.5)</a> of this thread group
<a name="26668"></a>
<li><code>",maxpri="</code>
<a name="26716"></a>
<li>The current maximum priority <a href="20_21.htm#27398">(&#167;20.21.12)</a> for this thread group, as a decimal numeral
<a name="26676"></a>
<li><code>"]"</code>
</ul><p><a name="26704"></a>
All literal characters mentioned above are from the ASCII subset of Unicode.
<p><a name="26764"></a>
Overrides the <code>toString</code> method of <code>Object</code> <a href="20_1.htm#14865">(&#167;20.1.3)</a>.<p>
<a name="27041"></a>
<p><strong>20.21.4	</strong> <code>public final void checkAccess()</code>
<p>
<a name="30819"></a>
If there is a security manager, its <code>checkAccess</code> method <a href="20_17.htm#14110">(&#167;20.17.12)</a> is called with 
this <code>ThreadGroup</code> object as its argument. This may result in throwing, in the current thread, a <code>SecurityException</code>.
<p><a name="27049"></a>
This method is called by methods <code>stop</code> <a href="20_21.htm#2885">(&#167;20.21.8)</a>, <code>suspend</code> <a href="20_21.htm#2886">(&#167;20.21.9)</a>, <code>resume</code> <a href="20_21.htm#2887">(&#167;20.21.10)</a>, <code>destroy</code> <a href="20_21.htm#2888">(&#167;20.21.11)</a>, <code>setMaxPriority</code> <a href="20_21.htm#2890">(&#167;20.21.13)</a>, and <code>setDaemon</code> <a href="20_21.htm#2892">(&#167;20.21.15)</a>.<p>
<a name="2882"></a>
<p><strong>20.21.5	</strong> <code>public final String getName()</code>
<p>
<a name="26688"></a>
The current name of this <code>ThreadGroup</code> object is returned as a <code>String</code>.
<p><a name="2883"></a>
<p><strong>20.21.6	</strong> <code>public final ThreadGroup getParent()</code>
<p>
<a name="27007"></a>
This method returns the <code>ThreadGroup</code> object that represents the thread group to 
which this thread group belongs. If this thread group is the system thread group, 
which is at the root of the thread group hierarchy, then <code>null</code> is returned.
<p><a name="2884"></a>
<p><strong>20.21.7	</strong> <code>public final boolean parentOf(ThreadGroup g)</code>
<p>
<a name="27003"></a>
This method returns <code>true</code> if and only if either this thread group is <code>g</code> or this method 
is <code>true</code> when applied to the parent of <code>g</code>. In other words, this method says whether 
this thread group is an ancestor of <code>g</code> or perhaps <code>g</code> itself.
<p><a name="26992"></a>
(This method arguably is misnamed; a more accurate, if clumsy and abstruse, name would be <code>parentOfReflexiveTransitiveClosure</code>.)<p>
<a name="2885"></a>
<p><strong>20.21.8	</strong> <code>public final void stop() throws SecurityException</code>
<p>
<a name="27139"></a>
First, the <code>checkAccess</code> method <a href="20_21.htm#27041">(&#167;20.21.4)</a> of this <code>ThreadGroup</code> object is called 
with no arguments. This may result in a <code>SecurityException</code> being thrown (in 
the current thread).
<p><a name="27224"></a>
Every thread in this thread group or any of its subgroups is stopped. More precisely, &#32;the method <code>stop</code> is called for every <code>ThreadGroup</code> and every <code>Thread</code> <a href="20_20.htm#8095">(&#167;20.20.15)</a> that belongs to this <code>ThreadGroup</code>.<p>
<a name="2886"></a>
<p><strong>20.21.9	</strong> <code>public final void suspend() throws SecurityException</code>
<a name="34922"></a>
<a name="36334"></a>
<p>
<a name="27189"></a>
First, the <code>checkAccess</code> method <a href="20_21.htm#27041">(&#167;20.21.4)</a> of this <code>ThreadGroup</code> object is called 
with no arguments. This may result in a <code>SecurityException</code> being thrown (in 
the current thread).
<p><a name="27228"></a>
Every thread in this thread group or any of its subgroups is suspended. More precisely, the method <code>suspend</code> is called for every <code>ThreadGroup</code> and every <code>Thread</code> <a href="20_20.htm#8097">(&#167;20.20.17)</a> that belongs to this <code>ThreadGroup</code>.<p>
<a name="2887"></a>
<p><strong>20.21.10	</strong> <code>public final void resume() throws SecurityException</code>
<p>
<a name="27196"></a>
First, the <code>checkAccess</code> method <a href="20_21.htm#27041">(&#167;20.21.4)</a> of this <code>ThreadGroup</code> object is called 
with no arguments. This may result in a <code>SecurityException</code> being thrown (in 
the current thread).
<p><a name="27232"></a>
Every thread in this thread group or any of its subgroups is resumed. More precisely, the method <code>resume</code> is called for every <code>ThreadGroup</code> and every <code>Thread</code> <a href="20_20.htm#8098">(&#167;20.20.18)</a> that belongs to this <code>ThreadGroup</code>.<p>
<a name="2888"></a>
<p><strong>20.21.11	</strong> <code>public final void destroy()<br>throws SecurityException, IllegalThreadStateException</code>
<p>
<a name="27203"></a>
First, the <code>checkAccess</code> method <a href="20_21.htm#27041">(&#167;20.21.4)</a> of this <code>ThreadGroup</code> object is called 
with no arguments. This may result in a <code>SecurityException</code> being thrown (in 
the current thread).
<p><a name="27256"></a>
This thread group is destroyed. If it has already been destroyed, or if any threads belong to it directly, then an <code>IllegalThreadStateException</code> is thrown. Otherwise, this method is called recursively for every thread group that belongs to this thread group, and this thread group is removed from its parent thread group.<p>
<a name="27396"></a>
A thread group that is currently marked as a daemon thread group is destroyed automatically if both of the following conditions are true:<p>
<ul><a name="27403"></a>
<li>A thread or thread group has just been removed from it (because the thread has died or the thread group has been destroyed).
<a name="27411"></a>
<li>The thread group now contains no more threads or thread groups.
</ul><p><a name="27398"></a>
<p><strong>20.21.12	</strong> <code>public final int getMaxPriority()</code>
<p>
<a name="27511"></a>
The current maximum priority of this <code>ThreadGroup</code> object is returned.
<p><a name="2890"></a>
<p><strong>20.21.13	</strong> <code>public final void setMaxPriority(int newMaxPriority)<br>throws SecurityException, IllegalArgumentException</code>
<p>
<a name="27210"></a>
First, the <code>checkAccess</code> method <a href="20_21.htm#27041">(&#167;20.21.4)</a> of this <code>ThreadGroup</code> object is called 
with no arguments. This may result in a <code>SecurityException</code> being thrown (in 
the current thread).
<p><a name="27529"></a>
If the <code>newMaxPriority</code> argument is less than <code>MIN_PRIORITY</code> <a href="20_20.htm#14148">(&#167;20.20.1)</a> or greater than <code>MAX_PRIORITY</code> <a href="20_20.htm#2662">(&#167;20.20.2)</a>, then an <code>IllegalArgumentException</code> is thrown.<p>
<a name="27533"></a>
Otherwise, the priority of this <code>ThreadGroup</code> object is set to the smaller of the specified <code>newMaxPriority</code> and the maximum permitted priority <a href="20_21.htm#27398">(&#167;20.21.12)</a> of the parent of this thread group <a href="20_21.htm#27398">(&#167;20.21.12)</a>. (If this thread group is the system thread group, which has no parent, then its maximum priority is simply set to <code>newMaxPriority</code>.) Then this method is called recursively, with <code>newMaxPriority</code> as its argument, for every thread group that belongs to this thread group.<p>
<a name="2891"></a>
<p><strong>20.21.14	</strong> <code>public final boolean isDaemon()</code>
<p>
<a name="27515"></a>
The result is <code>true</code> if and only if this thread group is currently marked as a daemon 
thread group.
<p><a name="2892"></a>
<p><strong>20.21.15	</strong> <code>public final void setDaemon(boolean daemon)<br>throws SecurityException</code>
<p>
<a name="27217"></a>
First, the <code>checkAccess</code> method <a href="20_21.htm#27041">(&#167;20.21.4)</a> of this <code>ThreadGroup</code> object is called 
with no arguments. This may result in a <code>SecurityException</code> being thrown (in 
the current thread).
<p><a name="27588"></a>
This thread group is marked as being a daemon thread group if the argument is <code>true</code>, and as not being a daemon thread group if the argument is <code>false</code>.<p>
<a name="29427"></a>
<p><strong>20.21.16	</strong> <code>public 	int threadsCount()</code>
<p>
<a name="29516"></a>
This method returns the number of threads that directly belong to this thread 
group.
<p><a name="29428"></a>
<p><strong>20.21.17	</strong> <code>public int allThreadsCount()		</code>
<p>
<a name="29518"></a>
This method returns the number of threads that belong to this thread group or to 
any of its subgroups.
<p><a name="29429"></a>
<p><strong>20.21.18	</strong> <code>public int groupsCount()</code>
<p>
<a name="29525"></a>
This method returns the number of thread groups that directly belong to this 
thread group.
<p><a name="29430"></a>
<p><strong>20.21.19	</strong> <code>public int allGroupsCount()</code>
<p>
<a name="29529"></a>
This method returns the number of thread groups that belong to this thread group 
or to any of its subgroups.
<p><a name="29504"></a>
<p><strong>20.21.20	</strong> <code>public Thread[] threads()</code>
<p>
<a name="29537"></a>
This method returns a newly created array containing the <code>Thread</code> objects for all 
threads that directly belong to this thread group.
<p><a name="29554"></a>
<p><strong>20.21.21	</strong> <code>public 	Thread[] allThreads()</code>
<p>
<a name="29592"></a>
This method returns a newly created array containing the <code>Thread</code> objects for all 
threads that belong to this thread group or to any of its subgroups.
<p><a name="29511"></a>
<p><strong>20.21.22	</strong> <code>public ThreadGroup[] groups()</code>
<p>
<a name="29548"></a>
This method returns a newly created array containing the <code>ThreadGroup</code> objects 
for all thread groups that directly belong to this thread group.
<p><a name="29513"></a>
<p><strong>20.21.23	</strong> <code>public 	ThreadGroup[] allGroups()</code>
<p>
<a name="29600"></a>
This method returns a newly created array containing the <code>ThreadGroup</code> objects 
for all thread groups that belong to this thread group or to any of its subgroups.
<p><a name="2894"></a>
<p><strong>20.21.24	</strong> <code>public int activeCount()</code>
<p>
<a name="29316"></a>
[This method is deprecated for use in new code after Java version 1.1 becomes 
available. Use the equivalent method <code>allThreadsCount</code> instead.]
<p><a name="2895"></a>
<p><strong>20.21.25	</strong> <code>public int activeGroupCount()</code>
<p>
<a name="29327"></a>
[This method is deprecated for use in new code after Java version 1.1 becomes 
available. Use the equivalent method <code>allGroupsCount</code> instead.]
<p><a name="2896"></a>
<p><strong>20.21.26	</strong> <code>public int enumerate(Thread list[])</code>
<p>
<a name="29331"></a>
[This method is deprecated for use in new code after Java version 1.1 becomes 
available. Use the method <code>allThreads</code> instead.]
<p><a name="2897"></a>
<p><strong>20.21.27	</strong> <code>public int enumerate(Thread list[], boolean recurse)</code>
<p>
<a name="29340"></a>
[This method is deprecated for use in new code after Java version 1.1 becomes 
available. Use the method <code>threads</code> or <code>allThreads</code> instead.]
<p><a name="2898"></a>
<p><strong>20.21.28	</strong> <code>public int enumerate(ThreadGroup list[])</code>
<p>
<a name="29350"></a>
[This method is deprecated for use in new code after Java version 1.1 becomes 
available. Use the method <code>allGroups</code> instead.]
<p><a name="2899"></a>
<p><strong>20.21.29	</strong> <code>public int enumerate(ThreadGroup list[], boolean recurse)</code>
<p>
<a name="29344"></a>
[This method is deprecated for use in new code after Java version 1.1 becomes 
available. Use the method <code>groups</code> or <code>allGroups</code> instead.]
<p><a name="2900"></a>
<p><strong>20.21.30	</strong> <code>public void list()</code>
<p>
<a name="27595"></a>
This method prints a detailed description of this thread group to the output stream 
<code>System.out</code> <a href="20_18.htm#14131">(&#167;20.18.2)</a>. It is intended as a convenient utility for debugging.
<p><a name="27599"></a>
The output is a series of lines; each line contains some space characters (for indentation) followed by the <code>toString</code> representation of one thread <a href="20_20.htm#2680">(&#167;20.20.11)</a> or one thread group <a href="20_21.htm#2881">(&#167;20.21.3)</a>.<p>
<a name="27612"></a>
The first line gives the <code>toString</code> representation for this thread group, with no indentation spaces. Following lines are then generated by a recursive rule: whenever a line is printed for a thread group <i>G</i> with <i>n</i> leading spaces, it is immediately followed by one line for each thread that directly belongs to <i>G</i>, with <img src="laanc50.gif"> spaces of indentation; then one line is printed for each thread group that directly belongs to <i>G</i>, with <img src="laanc51.gif"> spaces of indentation, using the recursive case.<p>
<a name="2901"></a>
<p><strong>20.21.31	</strong> <code>public void uncaughtException(Thread t, Throwable e)</code>
<p>
<a name="34939"></a>
<p>
<a name="2877"></a>
The general contract of <code>uncaughtException</code> is that it is called whenever a thread 
that belongs directly to this thread group dies because an exception was thrown in 
that thread and not caught. The arguments are the <code>Thread</code> object for the thread in 
question and the <code>Throwable</code> object that was thrown. The <code>uncaughtException</code> 
method may then take any appropriate action.
<p><a name="27656"></a>
The call to <code>uncaughtException</code> is performed by the thread that failed to catch the exception, so <code>t</code> is the current thread. The call to <code>uncaughtException</code> is the last action of the thread before it dies. If the call to <code>uncaughtException</code> itself results in an (uncaught) exception, this fact is ignored and the thread merely goes on to die.<p>
<a name="27667"></a>
The method <code>uncaughtException</code> defined by class <code>ThreadGroup</code> takes one of two actions. If this thread group has a parent thread group, then this method is invoked for that parent thread group, with the same arguments. If this thread group is the system thread group (which has no parent), then if the exception <code>e</code> is not an instance of <code>ThreadDeath</code> <a href="20_22.htm#14470">(&#167;20.22)</a>, a stack trace <a href="20_22.htm#10058">(&#167;20.22.6)</a> for <code>e</code> is printed on the error output stream that is the value of the field <code>System.err</code> <a href="20_18.htm#14132">(&#167;20.18.3)</a>.<p>
<a name="27858"></a>
Subclasses of <code>ThreadGroup</code> may override the <code>uncaughtException</code> method.<p>


</body></html>

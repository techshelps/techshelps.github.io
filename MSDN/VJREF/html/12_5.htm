<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>12.5 Creation of New Class Instances</title>
<META NAME=MS-HAID CONTENT="12_5">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>12.5	 Creation of New Class Instances</h2>
<a name="44670"></a>
<p>
<a name="44671"></a>
A new class instance is explicitly created when one of the following situations 
occurs:
<p><ul><a name="44675"></a>
<li>Evaluation of a class instance creation expression <a href="15_8.htm#41147">(&#167;15.8)</a> creates a new instance of the class whose name appears in the expression.
<a name="44679"></a>
<li>Invocation of the <code>newInstance</code> method <a href="20_3.htm#15088">(&#167;20.3.6)</a> of class <code>Class</code> creates a new instance of the class represented by the <code>Class</code> object for which the method was invoked.
</ul><p><a name="44680"></a>
A new class instance may be implicitly created in the following situations:
<p><ul><a name="44684"></a>
<li>Loading of a class or interface that contains a <code>String</code> literal <a href="3_10_5.htm#101083">(&#167;3.10.5)</a> may create a new <code>String</code> object <a href="20_12.htm#14460">(&#167;20.12)</a> to represent that literal. (This might not occur if the same <code>String</code> has previously been interned <a href="3_10_5.htm#101083">(&#167;3.10.5)</a>.)
<a name="44691"></a>
<li>Execution of a string concatenation operator <a href="15_17_1.htm#39990">(&#167;15.17.1)</a> that is not part of a constant expression sometimes creates a new <code>String</code> object to represent the result. String concatenation operators may also create temporary wrapper objects for a value of a primitive type.
</ul><p><a name="44692"></a>
Each of these situations identifies a particular constructor to be called with specified arguments (possibly none) as part of the class instance creation process.
<p><a name="44693"></a>
Whenever a new class instance is created, memory space is allocated for it with room for all the instance variables declared in the class type and all the instance variables declared in each superclass of the class type, including all the instance variables that may be hidden. If there is not sufficient space available to allocate memory for the object, then creation of the class instance completes abruptly with an <code>OutOfMemoryError</code>. Otherwise, all the instance variables in the new object, including those declared in superclasses, are initialized to their default values <a href="4_5_4.htm#10931">(&#167;4.5.4)</a>. Just before a reference to the newly created object is returned as the result, the indicated constructor is processed to initialize the new object using the following procedure:<p>
<ol>
<a name="44697"></a>
<li>Assign the arguments for the constructor to newly created parameter variables for this constructor invocation.
<a name="44698"></a>
<li>If this constructor begins with an explicit constructor invocation of another constructor in the same class (using <code>this</code>), then evaluate the arguments and process that constructor invocation recursively using these same five steps. If that constructor invocation completes abruptly, then this procedure completes abruptly for the same reason; otherwise, continue with step 5.
<a name="44699"></a>
<li>This constructor does not begin with an explicit constructor invocation of another constructor in the same class (using <code>this</code>). If this constructor is for a class other than <code>Object</code>, then this constructor will begin with a explicit or implicit invocation of a superclass constructor (using <code>super</code>). Evaluate the arguments and process that superclass constructor invocation recursively using these same five steps. If that constructor invocation completes abruptly, then this procedure completes abruptly for the same reason. Otherwise, continue with step 4.
<a name="44700"></a>
<li>Execute the instance variable initializers for this class, assigning their values to the corresponding instance variables, in the left-to-right order in which they appear textually in the source code for the class. If execution of any of these initializers results in an exception, then no further initializers are processed and this procedure completes abruptly with that same exception. Otherwise, continue with step 5. (In some early Java implementations, the compiler incorrectly omitted the code to initialize a field if the field initializer expression was a constant expression whose value was equal to the default initialization value for its type.)
<a name="44701"></a>
<li>Execute the rest of the body of this constructor. If that execution completes abruptly, then this procedure completes abruptly for the same reason. Otherwise, this procedure completes normally.
</ol>
<a name="44702"></a>
In the example:
<p><pre><a name="44703"></a>
class Point {
<a name="44704"></a>	int x, y;
<a name="44705"></a>	Point() { x = 1; y = 1; }
<a name="44706"></a>}
<a name="44707"></a>
class ColoredPoint extends Point {
<a name="44708"></a>	int color = 0xFF00FF;
<a name="44709"></a>}
<a name="44710"></a>
class Test {
<a name="44711"></a>	public static void main(String[] args) {
<a name="44712"></a>		ColoredPoint cp = new ColoredPoint();
<a name="44713"></a>		System.out.println(cp.color);
<a name="44714"></a>	}
<a name="44715"></a>}
</pre><p><a name="44716"></a>
a new instance of <code>ColoredPoint</code> is created. First, space is allocated for the new 
<code>ColoredPoint</code>, to hold the fields <code>x</code>, <code>y</code>, and <code>color</code>. All these fields are then initialized to their default values (in this case, <code>0</code> for each field). Next, the <code>ColoredPoint</code> 
constructor with no arguments is first invoked. Since <code>ColoredPoint</code> declares no 
constructors, a default constructor of the form:
<p><pre><a name="44717"></a>ColoredPoint() { super(); }
</pre><p><a name="44718"></a>
is provided for it automatically by the Java compiler.
<p><a name="44719"></a>
This constructor then invokes the <code>Point</code> constructor with no arguments. The <code>Point</code> constructor does not begin with an invocation of a constructor, so the compiler provides an implicit invocation of its superclass constructor of no arguments, as though it had been written:<p>
<pre><a name="44720"></a>Point() { super(); x = 1; y = 1; }
</pre><p><a name="44721"></a>
Therefore, the constructor for <code>Object</code> which takes no arguments is invoked.
<p><a name="46262"></a>
The class <code>Object</code> has no superclass, so the recursion terminates here. Next, any instance variable initializers and static initializers of <code>Object</code> are invoked. Next, the body of the constructor of <code>Object</code> that takes no arguments is executed. No such constructor is declared in <code>Object</code>, so the compiler supplies a default one, which in this special case is:<p>
<pre><a name="44722"></a>Object() { }
</pre><p><a name="44723"></a>
This constructor executes without effect and returns.
<p><a name="44724"></a>
Next, all initializers for the instance variables of class <code>Point</code> are executed. As it happens, the declarations of <code>x</code> and <code>y</code> do not provide any initialization expressions, so no action is required for this step of the example. Then the body of the <code>Point</code> constructor is executed, setting <code>x</code> to <code>1</code> and <code>y</code> to <code>1</code>.<p>
<a name="44725"></a>
Next, the initializers for the instance variables of class <code>ColoredPoint</code> are executed. This step assigns the value <code>0xFF00FF</code> to <code>color</code>. Finally, the rest of the body of the <code>ColoredPoint</code> constructor is executed (the part after the invocation of <code>super</code>); there happen to be no statements in the rest of the body, so no further action is required and initialization is complete.<p>
<a name="44726"></a>
Unlike C++, the Java language does not specify altered rules for method dispatch during the creation of a new class instance. If methods are invoked that are overridden in subclasses in the object being initialized, then these overriding methods are used, even before the new object is completely initialized. Thus, compiling and running the example:<p>
<pre><a name="44727"></a>
class Super {
<a name="44728"></a>	Super() { printThree(); }
<a name="44729"></a>	void printThree() { System.out.println("three"); }
<a name="44730"></a>}
</pre><p><pre><a name="48312"></a>
class Test extends Super {
<a name="44732"></a>	int indiana = (int)Math.PI;													// That is, 3
<a name="44733"></a>
	public static void main(String[] args) {
<a name="44734"></a>		Test t = new Test();
<a name="44735"></a>		t.printThree();
<a name="44736"></a>	}
<a name="44737"></a>	void printThree() { System.out.println(indiana); }
<a name="44738"></a>}
</pre><p><a name="44739"></a>
produces the output:
<p><pre><a name="44740"></a>
<code>0
</code><a name="44741"></a>3
</pre><p><a name="44742"></a>
This shows that the invocation of <code>printThree</code> in the constructor for class <code>Super</code> 
does not invoke the definition of <code>printThree</code> in class <code>Super</code>, but rather invokes 
the overriding definition of <code>printThree</code> in class <code>Test</code>. This method therefore 
runs before the field initializers of <code>Test</code> have been executed, which is why the first 
value output is <code>0</code>, the default value to which the field <code>three</code> of <code>Test</code> is initialized. 
The later invocation of <code>printThree</code> in method <code>main</code> invokes the same definition 
of <code>printThree</code>, but by that point the initializer for instance variable <code>three</code> has 
been executed, and so the value <code>3</code> is printed.
<p><a name="44746"></a>
See <a href="8_6.htm#41652">&#167;8.6</a> for more details on constructor declarations.<p>


</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>14.13 The break Statement</title>
<META NAME=MS-HAID CONTENT="14_13">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>14.13	 The break Statement</h2>
<a name="6842"></a>
<p>
<a name="35540"></a>
<meta name="MS-HKWD" content="break">
A break statement transfers control out of an enclosing statement.
<p><pre>
<i>BreakStatement:<br>
	<code>break </code>Identifieropt<code> ;
</code></i></pre><p><a name="43392"></a>
A <code>break</code> statement with no label attempts to transfer control to the innermost enclosing <code>switch</code>, <code>while</code>, <code>do</code>, or <code>for</code> statement; this statement, which is called the <i>break target</i>, then immediately completes normally. To be precise, a <code>break</code> statement with no label always completes abruptly, the reason being a <code>break</code> with no label. If no <code>switch</code>, <code>while</code>, <code>do</code>, or <code>for</code> statement encloses the <code>break</code> statement, a compile-time error occurs.<p>
<a name="79188"></a>
A <code>break</code> statement with label <i>Identifier</i> attempts to transfer control to the enclosing labeled statement <a href="14_6.htm#78993">(&#167;14.6)</a> that has the same <i>Identifier</i> as its label; this statement, which is called the <i>break target</i>, then immediately completes normally. In this case, the <code>break</code> target need not be a <code>while</code>, <code>do</code>, <code>for</code>, or <code>switch</code> statement. To be precise, a <code>break</code> statement with label <i>Identifier</i> always completes abruptly, the reason being a <code>break</code> with label <i>Identifier</i>. If no labeled statement with <i>Identifier</i> &#32;as its label encloses the <code>break</code> statement, a compile-time error occurs.<p>
<a name="43504"></a>
It can be seen, then, that a <code>break</code> statement always completes abruptly.<p>
<a name="43404"></a>
The preceding descriptions say "attempts to transfer control" rather than just "transfers control" because if there are any <code>try</code> statements <a href="14_18.htm#79311">(&#167;14.18)</a> within the break target whose <code>try</code> blocks contain the <code>break</code> statement, then any <code>finally</code> clauses of those <code>try</code> statements are executed, in order, innermost to outermost, before control is transferred to the break target. Abrupt completion of a <code>finally</code> clause can disrupt the transfer of control initiated by a <code>break</code> statement.<p>
<a name="18004"></a>
In the following example, a mathematical graph is represented by an array of arrays. A graph consists of a set of nodes and a set of edges; each edge is an arrow that points from some node to some other node, or from a node to itself. In this example it is assumed that there are no redundant edges; that is, for any two nodes <i>P</i> and <i>Q</i>, where <i>Q</i> may be the same as <i>P</i>, there is at most one edge from <i>P</i> to <i>Q</i>. Nodes are represented by integers, and there is an edge from node <i>i</i> to node <code>edges[</code><i>i</i><code>][</code><i>j</i><code>]</code> for every <i>i</i> and <i>j</i> for which the array reference <code>edges[</code><i>i</i><code>][</code><i>j</i><code>]</code> does not throw an <code>IndexOutOfBoundsException</code>.<p>
<a name="42801"></a>
The task of the method <code>loseEdges</code>, given integers <i>i</i> and <i>j</i>, is to construct a new graph by copying a given graph but omitting the edge from node <i>i</i> to node <i>j</i>, if any, and the edge from node <i>j</i> to node <i>i</i>, if any:<p>
<pre><a name="42813"></a>
class Graph {
<a name="42814"></a>	int edges[][];
<a name="42816"></a>	public Graph(int[][] edges) { this.edges = edges; }
<a name="42818"></a>
	public Graph loseEdges(int i, int j) {
<a name="42819"></a>		int n = edges.length;
<a name="42820"></a>		int[][] newedges = new int[n][];
<a name="42821"></a>		for (int k = 0; k &lt; n; ++k) {
<a name="42822"></a>
			edgelist: {
<a name="42823"></a>				int z;
<a name="42824"></a>
				search: {
<a name="42825"></a>					if (k == i) {
<a name="42826"></a>						for (z = 0; z &lt; edges[k].length; ++z)
<a name="42827"></a>							if (edges[k][z] == j)
<a name="42828"></a>								break search;
<a name="42829"></a>					} else if (k == j) {
<a name="42831"></a>						for (z = 0; z &lt; edges[k].length; ++z)
<a name="42832"></a>							if (edges[k][z] == i)
<a name="42833"></a>								break search;
<a name="42834"></a>					}
<a name="42835"></a>					// No edge to be deleted; share this list.
<a name="42836"></a>					newedges[k] = edges[k];
<a name="42837"></a>					break edgelist;
<a name="42838"></a>				}//search
<a name="42839"></a>				// Copy the list, omitting the edge at position z.
<a name="42840"></a>				int m = edges[k].length - 1;
<a name="42841"></a>				int ne[] = new int[m];
<a name="42842"></a>				System.arraycopy(edges[k], 0, ne, 0, z);
<a name="42843"></a>				System.arraycopy(edges[k], z+1, ne, z, m-z);
<a name="42879"></a>				newedges[k] = ne;
<a name="42844"></a>			}//edgelist
<a name="42845"></a>		}
<a name="42846"></a>		return new Graph(newedges);
<a name="42847"></a>	}
<a name="42848"></a>}
</pre><p><a name="42887"></a>
Note the use of two statement labels, <code>edgelist</code> and <code>search</code>, and the use of <code>break</code> 
statements. This allows the code that copies a list, omitting one edge, to be shared 
between two separate tests, the test for an edge from node <i>i</i> to node <i>j</i>, and the test 
for an edge from node <i>j</i> to node <i>i</i>.
<p>

</body></html>

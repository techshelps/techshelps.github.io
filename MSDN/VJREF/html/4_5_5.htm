<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.5.5 Variables Have Types, Objects Have Classes</title>
<META NAME=MS-HAID CONTENT="4_5_5">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>4.5.5	 Variables Have Types, Objects Have Classes</h3>
<a name="24887"></a>
<p>
<a name="24888"></a>
Every object belongs to some particular class: the class that was mentioned in the 
creation expression that produced the object, the class whose class object was 
used to invoke the <code>newInstance</code> method <a href="20_3.htm#15088">(&#167;20.3.6)</a> to produce the object, or the 
<code>String</code> class for objects implicitly created by the string concatenation operator <code>+ 
</code><a href="15_17_1.htm#39990">(&#167;15.17.1)</a>. This class is called the <i>class of the object</i>. (Arrays also have a class, as 
described at the end of this section.) An object is said to be an instance of its class 
and of all superclasses of its class.
<p><a name="24900"></a>
(Sometimes a variable or expression is said to have a "run-time type" but that is an abuse of terminology; it refers to the class of the object referred to by the value of the variable or expression at run time, assuming that the value is not <code>null</code>. Properly speaking, type is a compile-time notion. A variable or expression has a type; an object or array has no type, but belongs to a class.)<p>
<a name="24901"></a>
The type of a variable is always declared, and the type of an expression can be deduced at compile time. The type limits the possible values that the variable can hold or the expression can produce at run time. If a run-time value is a reference that is not <code>null</code>, it refers to an object or array that has a class (not a type), and that class will necessarily be compatible with the compile-time type.<p>
<a name="24895"></a>
Even though a variable or expression may have a compile-time type that is an interface type, there are no instances of interfaces. A variable or expression whose type is an interface type can reference any object whose class implements <a href="8_1_4.htm#34031">(&#167;8.1.4)</a> that interface.<p>
<a name="24918"></a>
Here is an example of creating new objects and of the distinction between the type of a variable and the class of an object:<p>
<pre><a name="52597"></a>
public interface Colorable {
<a name="24921"></a>	void setColor(byte r, byte g, byte b);
<a name="24922"></a>}
<br><a name="52598"></a>class Point { int x, y; }
<a name="52599"></a>
class ColoredPoint extends Point implements Colorable {
<br><a name="52600"></a>	byte r, g, b;
<br><a name="52601"></a>
	public void setColor(byte rv, byte gv, byte bv) {
<a name="23360"></a>		r = rv; g = gv; b = bv;
<a name="23361"></a>	}
<br><a name="52604"></a>}
<br><a name="52605"></a>
class Test {
<a name="52606"></a>	public static void main(String[] args) {
<a name="52607"></a>		Point p = new Point();
<a name="52608"></a>		ColoredPoint cp = new ColoredPoint();
<a name="52609"></a>		p = cp;
<a name="52610"></a>		Colorable c = cp;
<a name="23366"></a>	}
<a name="52611"></a>}
</pre><p><a name="52612"></a>
In this example:
<p><ul><a name="52613"></a>
<li>The local variable <code>p</code> of the method <code>main</code> of class <code>Test</code> has type <code>Point</code> and is initially assigned a reference to a new instance of class <code>Point</code>.
<a name="52614"></a>
<li>The local variable <code>cp</code> similarly has as its type <code>ColoredPoint</code>, and is initially assigned a reference to a new instance of class <code>ColoredPoint</code>.
<a name="52615"></a>
<li>The assignment of the value of <code>cp</code> to the variable <code>p</code> causes <code>p</code> to hold a reference to a <code>ColoredPoint</code> object. This is permitted because <code>ColoredPoint</code> is a subclass of <code>Point</code>, so the class <code>ColoredPoint</code> is assignment compatible <a href="5_2.htm#170768">(&#167;5.2)</a> with the type <code>Point</code>. A <code>ColoredPoint</code> object includes support for all the methods of a <code>Point</code>. In addition to its particular fields <code>r</code>, <code>g</code>, and <code>b</code>, it has the fields of class <code>Point</code>, namely <code>x</code> and <code>y</code>.
<a name="52586"></a>
<li>The local variable <code>c</code> has as its type the interface type <code>Colorable</code>, so it can hold a reference to any object whose class implements <code>Colorable</code>; specifically, it can hold a reference to a <code>ColoredPoint</code>.
<a name="24972"></a>
<li>Note that an expression such as "<code>new Colorable()</code>" is not valid because it is not possible to create an instance of an interface, only of a class.
</ul><p><a name="24976"></a>
Every array also has a class; the method <code>getClass</code> <a href="20_1.htm#13783">(&#167;20.1.1)</a>, when invoked for an array object, will return a class object (of class <code>Class</code>) that represents the class of the array. The classes for arrays have strange names that are not valid Java identifiers; for example, the class for an array of <code>int</code> components has the name "<code>[I</code>" and so the value of the expression:<p>
<pre><a name="24985"></a>new int[10].getClass().getName()
</pre><p><a name="85679"></a>
is the string <code>"[I"</code>; see <a href="20_1.htm#13783">&#167;20.1.1</a> for details.
<p><i>Oft on the dappled turf at ease<br>
I sit, and play with similes,<br>
Loose types of things through all degrees.<br>
</i>&#151;William Wordsworth,<i> To the Same Flower</i></p>
<p>

<hr>
<p>
<br>
</font>
</body></html>

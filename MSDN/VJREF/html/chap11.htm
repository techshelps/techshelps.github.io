</Font></body></html>
<html>
<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>11. Exceptions</title>
<META NAME=MS-HAID CONTENT="chap11">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
</head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<hr><br>
 
<p><strong>
CHAPTER
 11 </strong></p>

<h1> Exceptions</h1>
<a name="44044"></a>
<p>
<a name="44043"></a>
<a name="44045"></a>
<p><i>If anything can go wrong, it will.</i><br>
<a name="47577"></a>
&#151;Finagle's Law (often incorrectly attributed to Murphy, 
whose law is<br>rather different&#151;which only goes to show that Finagle was right)</p>
<p>
<a name="44046"></a>
When a Java program violates the semantic constraints of the Java language, a 
Java Virtual Machine signals this error to the program as an <i>exception</i>. An example of such a violation is an attempt to index outside the bounds of an array. Some 
programming languages and their implementations react to such errors by 
peremptorily terminating the program; other programming languages allow an 
implementation to react in an arbitrary or unpredictable way. Neither of these 
approaches is compatible with the design goals of Java: to provide portability and 
robustness. Instead, Java specifies that an exception will be thrown when semantic 
constraints are violated and will cause a non-local transfer of control from the 
point where the exception occurred to a point that can be specified by the programmer. An exception is said to be <i>thrown</i> from the point where it occurred and 
is said to be <i>caught</i> at the point to which control is transferred.
<p><a name="44047"></a>
Java programs can also throw exceptions explicitly, using <code>throw</code> statements <a href="14_16.htm#237350">(&#167;14.16)</a>. This provides an alternative to the old-fashioned style of handling error conditions by returning funny values, such as the integer value <code>-1</code> where a negative value would not normally be expected. Experience shows that too often such funny values are ignored or not checked for by callers, leading to programs that are not robust, exhibit undesirable behavior, or both.<p>
<a name="44051"></a>
Every exception is represented by an instance of the class <code>Throwable</code> or one of its subclasses; such an object can be used to carry information from the point at which an exception occurs to the handler that catches it. Handlers are established by <code>catch</code> clauses of <code>try</code> statements <a href="14_18.htm#79311">(&#167;14.18)</a>. During the process of throwing an exception, a Java Virtual Machine abruptly completes, one by one, any expressions, statements, method and constructor invocations, static initializers, and field initialization expressions that have begun but not completed execution in the current thread. This process continues until a handler is found that indicates that it handles that particular exception by naming the class of the exception or a superclass of the class of the exception. If no such handler is found, then the method <code>uncaughtException</code> <a href="20_21.htm#2901">(&#167;20.21.31)</a> is invoked for the <code>ThreadGroup</code> that is the parent of the current thread-thus every effort is made to avoid letting an exception go unhandled.<p>
<a name="44058"></a>
The Java exception mechanism is integrated with the Java synchronization model <a href="chap17.htm">(&#167;17)</a>, so that locks are released as <code>synchronized</code> statements <a href="14_17.htm#79287">(&#167;14.17)</a> and invocations of <code>synchronized</code> methods (<a href="8_4_3.htm#55408">&#167;8.4.3.5</a>, <a href="15_11.htm#20448">&#167;15.11</a>) complete abruptly.<p>
<a name="44074"></a>
This chapter describes the different causes of exceptions <a href="11_1.htm#44088">(&#167;11.1)</a>. It details how exceptions are checked at compile time <a href="11_2.htm#44121">(&#167;11.2)</a> and processed at run time <a href="11_3.htm#44153">(&#167;11.3)</a>. A detailed example <a href="11_4.htm#44218">(&#167;11.4)</a> is then followed by an explanation of the exception hierarchy and the standard exception classes <a href="11_5.htm#44278">(&#167;11.5)</a>.<p>


</Font></body></html>

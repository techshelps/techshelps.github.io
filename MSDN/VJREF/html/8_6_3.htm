<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>8.6.3 Constructor Modifiers</title>
<META NAME=MS-HAID CONTENT="8_6_3">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>8.6.3	 Constructor Modifiers</h3>
<a name="42018"></a>
<p>
<pre>
<i><i>ConstructorModifiers:<br>
	ConstructorModifier<br>
	ConstructorModifiers</i><code> </code><i>ConstructorModifier
</i></i>
<i><i>ConstructorModifier: one of<br>
	</i><code>public&#32;protected&#32;private
</code></i></pre><p><a name="36010"></a>
The access modifiers <code>public</code>, <code>protected</code>, and <code>private</code> are discussed in <a href="6_6.htm#33916">&#167;6.6</a>. 
A &#32;compile-time error occurs if the same modifier appears more than once in a 
constructor declaration, or if a constructor declaration has more than one of the 
access modifiers <code>public</code>, <code>protected</code>, and <code>private</code>.
<p><a name="228488"></a>
Unlike methods, a constructor cannot be <code>abstract</code>, <code>static</code>, <code>final</code>, <code>native</code>, or <code>synchronized</code>. A constructor is not inherited, so there is no need to declare it <code>final</code> and an <code>abstract</code> constructor could never be implemented. A constructor is always invoked with respect to an object, so it makes no sense for a constructor to be <code>static</code>. There is no practical need for a constructor to be <code>synchronized</code>, because it would lock the object under construction, which is normally not made available to other threads until all constructors for the object have completed their work. The lack of <code>native</code> constructors is an arbitrary language design choice that makes it easy for an implementation of the Java Virtual Machine to verify that superclass constructors are always properly invoked during object creation.<p>


</Font></body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>8.5 Static Initializers</title>
<META NAME=MS-HAID CONTENT="8_5">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h2>8.5	 Static Initializers</h2>
<a name="39245"></a>
<p>
<a name="39251"></a>
<meta name="MS-HKWD" content="static">
Any <i>static initializers </i>declared in a class are executed when the class is initialized 
and, together with any field initializers <a href="8_3_2.htm#24510">(&#167;8.3.2)</a> for class variables, may be used to 
initialize the class variables of the class <a href="12_4.htm#44557">(&#167;12.4)</a>.
<p><pre>
<i><i>StaticInitializer</i>:<br>
	<code>static </code>Block
</i></pre><p><a name="41620"></a>
It is a compile-time error for a static initializer to be able to complete abruptly (<a href="14_1.htm#5894">&#167;14.1</a>, <a href="15_5.htm#79448">&#167;15.5</a>) with a checked exception <a href="11_2.htm#44121">(&#167;11.2)</a>.<p>
<a name="16723"></a>
The static initializers and class variable initializers are executed in textual order and may not refer to class variables declared in the class whose declarations appear textually after the use, even though these class variables are in scope. This restriction is designed to catch, at compile time, circular or otherwise malformed initializations. Thus, both:<p>
<pre><a name="24644"></a>
class Z {
<a name="24645"></a>	static int i = j + 2; 
<a name="24646"></a>	static int j = 4;
<a name="24647"></a>}
</pre><p><a name="24648"></a>
and:
<p><pre><a name="24649"></a>
class Z {
<a name="24651"></a>	static { i = j + 2; }
<a name="229866"></a>	static int i, j;
<a name="24652"></a>	static { j = 4; }
<a name="24653"></a>}
</pre><p><a name="24654"></a>
result in compile-time errors. 
<p><a name="229805"></a>
Accesses to class variables by methods are not checked in this way, so:
<p><pre><a name="45892"></a>
class Z {
<a name="25680"></a>	static int peek() { return j; }<br>
	static int i = peek();
<a name="41686"></a>	static int j = 1;
<a name="41687"></a>}
<br><a name="41688"></a>
class Test {
<a name="25681"></a>	public static void main(String[] args) {
<a name="41689"></a>		System.out.println(Z.i);
<a name="41690"></a>	}<br>
}
</pre><p><a name="41691"></a>
produces the output:
<p><pre><a name="41692"></a>0
</pre><p><a name="41693"></a>
because the variable initializer for <code>i</code> uses the class method <code>peek</code> to access the 
value of the variable <code>j</code> before <code>j</code> has been initialized by its variable initializer, at 
which point it still has its default value <a href="4_5_4.htm#10931">(&#167;4.5.4)</a>.
<p><a name="41700"></a>
If a <code>return</code> statement <a href="14_15.htm#6767">(&#167;14.15)</a> appears anywhere within a static initializer, then a compile-time error occurs.<p>
<a name="39966"></a>
If the keyword <code>this</code> <a href="15_7_2.htm#31980">(&#167;15.7.2)</a> or the keyword <code>super</code> (<a href="15_10.htm#41267">&#167;15.10</a>, <a href="15_11.htm#20448">&#167;15.11</a>) appears anywhere within a static initializer, then a compile-time error occurs.<p>


</Font></body></html>

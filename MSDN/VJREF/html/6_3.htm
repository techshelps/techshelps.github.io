<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.3 Scope of a Simple Name</title>
<META NAME=MS-HAID CONTENT="6_3">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>6.3	 Scope of a Simple Name</h2>
<a name="33623"></a>
<p>
<a name="34028"></a>
The <i>scope</i> of a declaration is the region of the program within which the entity 
declared by the declaration can be referred to using a simple name:
<p><ul><a name="56405"></a>
<li>The scope of a package, as introduced by a <code>package</code> declaration, is determined by the host system <a href="7_4_3.htm#13180">(&#167;7.4.3)</a>. All Java code is within the scope of the standard package named <code>java</code>, so the package <code>java</code> can always be referred to by Java code.
<a name="31532"></a>
<li>The scope of a type imported by a single-type-import declaration <a href="7_5_1.htm#26699">(&#167;7.5.1)</a> or type-import-on-demand declaration <a href="7_5_2.htm#26725">(&#167;7.5.2)</a> is all the class and interface type declarations <a href="7_6.htm#26783">(&#167;7.6)</a> in the compilation unit in which the import declaration appears.
<a name="56422"></a>
<li>The scope of a type introduced by a class type declaration <a href="8_1_1.htm#39196">(&#167;8.1.1)</a> or interface type declaration <a href="9_1_1.htm#39713">(&#167;9.1.1)</a> is the declarations of all class and interface types in all the compilation units <a href="7_3.htm#40031">(&#167;7.3)</a> of the package in which it is declared.
<a name="19824"></a>
<li>The scope of a member declared in or inherited by a class type <a href="8_2.htm#21831">(&#167;8.2)</a> or interface type <a href="9_2.htm#32392">(&#167;9.2)</a> is the entire declaration of the class or interface type. The declaration of a member needs to appear before it is used only when the use is in a field initialization expression (<a href="8_3_2.htm#24510">&#167;8.3.2</a>, <a href="12_4_2.htm#44630">&#167;12.4.2</a>, <a href="12_5.htm#44670">&#167;12.5</a>). This means that a compile-time error results from the test program:
</ul><pre><a name="19834"></a>
	class Test {
<a name="19835"></a>		int i = j;				// compile-time error: incorrect forward reference
<a name="19836"></a>		int j = 1;
<a name="19837"></a>	}
</pre><p><ul><a name="19838"></a>
<br><br>whereas the following example compiles without error:
</ul><pre><a name="19839"></a>
	class Test {
<a name="19840"></a>		Test() { k = 2; }
<a name="19841"></a>		int j = 1;
<a name="19842"></a>		int i = j;
<a name="19843"></a>		int k;
<a name="19844"></a>	}
</pre><p>
<a name="19848"></a>
<p>even though the constructor <a href="8_6.htm#41652">(&#167;8.6)</a> for <code>Test</code> refers to the field <code>k</code> that is declared three lines later.
<p>
<ul><a name="31556"></a>
<li>The scope of a parameter of a method <a href="8_4_1.htm#38698">(&#167;8.4.1)</a> is the entire body of the method.
</ul><ul><a name="31566"></a>
<li>The scope of a parameter of a constructor <a href="8_6_1.htm#29488">(&#167;8.6.1)</a> is the entire body of the constructor.
<a name="19941"></a>
<li>The scope of a local variable declaration in a block <a href="14_3_2.htm#32644">(&#167;14.3.2)</a> is the rest of the block in which the declaration appears, starting with its own initializer <a href="14_3.htm#5920">(&#167;14.3)</a> and including any further declarators to the right in the local variable declaration statement.
<a name="56450"></a>
<li>The scope of a local variable declared in the <i>ForInit</i> part of a <code>for</code> statement <a href="14_12.htm#24588">(&#167;14.12)</a> includes all of the following:
<ul>
<a name="23092"></a>
<li>Its own initializer
<a name="56451"></a>
<li>Any further declarators to the right in the <i>ForInit</i> part of the <code>for</code> statement
<a name="56452"></a>
<li>The <i>Expression</i> and <i>ForUpdate</i> parts of the <code>for</code> statement
<a name="56453"></a>
<li>The contained <i>Statement</i>
</ul>
<a name="56454"></a>
<li>The scope of a parameter of an exception handler that is declared in a <code>catch</code> clause of a <code>try</code> statement <a href="14_18.htm#79311">(&#167;14.18)</a> is the entire block associated with the <code>catch</code>.
</ul><p><a name="56458"></a>
These rules imply that declarations of class and interface types need not appear 
before uses of the types.
<p><a name="20278"></a>
In the example:<p>
<pre><a name="56459"></a>package points;
</pre><p><pre><a name="56460"></a>
class Point {
<a name="56461"></a>	int x, y;
<a name="56462"></a>	PointList list;
<a name="56463"></a>	Point next;
<a name="56464"></a>}
<a name="56465"></a>
class PointList {
<a name="56466"></a>	Point first;
<a name="56468"></a>}
</pre><p><a name="34047"></a>
the use of <code>PointList</code> in class <code>Point</code> is correct, because the scope of the class type 
name <code>PointList</code> includes both class <code>Point</code> and class <code>PointList</code>, as well as any 
other type declarations in other compilation units of package <code>points</code>.
<p>

</body></html>

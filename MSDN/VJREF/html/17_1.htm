<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>17.1 Terminology and Framework</title>
<META NAME=MS-HAID CONTENT="17_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>17.1	 Terminology and Framework</h2>
<a name="28287"></a>
<p>
<a name="28288"></a>
A <i>variable</i> is any location within a Java program that may be stored into. This 
includes not only class variables and instance variables but also components of 
arrays. Variables are kept in a <i>main memory</i> that is shared by all threads. Because 
it is impossible for one thread to access parameters or local variables of another 
thread, it doesn't matter whether parameters and local variables are thought of as 
residing in the shared main memory or in the working memory of the thread that 
owns them.
<p><a name="45672"></a>
Every thread has a <i>working memory</i> in which it keeps its own <i>working copy</i> of variables that it must use or assign. As the thread executes a Java program, it operates on these working copies. The main memory contains the <i>master copy</i> of every variable. There are rules about when a thread is permitted or required to transfer the contents of its working copy of a variable into the master copy or vice versa<p>
<a name="28291"></a>
The main memory also contains <i>locks</i>; there is one lock associated with each object. Threads may compete to acquire a lock.<p>
<a name="28292"></a>
For the purposes of this chapter, the verbs <i>use</i>, <i>assign</i>, <i>load</i>, <i>store</i>, <i>lock</i>, and <i>unlock</i> name <i>actions</i> that a thread can perform. The verbs <i>read</i>, <i>write</i>, <i>lock</i>, and <i>unlock</i> name actions that the main memory subsystem can perform. Each of these actions is <i>atomic</i> (indivisible). <p>
<a name="28293"></a>
A <i>use</i> or <i>assign</i> action is a tightly coupled interaction between a thread's execution engine and the thread's working memory. A <i>lock</i> or <i>unlock</i> action is a tightly coupled interaction between a thread's execution engine and the main memory. But the transfer of data between the main memory and a thread's working memory is loosely coupled. When data is copied from the main memory to a working memory, two actions must occur: a <i>read</i> action performed by the main memory followed some time later by a corresponding <i>load</i> action performed by the working memory. When data is copied from a working memory to the main memory, two actions must occur: a <i>store</i> action performed by the working memory followed some time later by a corresponding <i>write</i> action performed by the main memory. There may be some transit time between main memory and a working memory, and the transit time may be different for each transaction; thus actions initiated by a thread on different variables may viewed by another thread as occurring in a different order. For each variable, however, the actions in main memory on behalf of any one thread are performed in the same order as the corresponding actions by that thread. (This is explained in greater detail below.)<p>
<a name="28294"></a>
A single Java thread issues a stream of <i>use</i>, <i>assign</i>, <i>lock</i>, and <i>unlock</i> actions as dictated by the semantics of the Java program it is executing. The underlying Java implementation is then required additionally to perform appropriate <i>load</i>, <i>store</i>, <i>read</i>, and <i>write</i> actions so as to obey a certain set of constraints, explained below. If the Java implementation correctly follows these rules and the Java application programmer follows certain other rules of programming, then data can be reliably transferred between threads through shared variables. The rules are designed to be "tight" enough to make this possible but "loose" enough to allow hardware and software designers considerable freedom to improve speed and throughput through such mechanisms as registers, queues, and caches.<p>
<a name="28295"></a>
Here are the detailed definitions of each of the actions:<p>
<ul><a name="28296"></a>
<li>A <i>use</i> action (by a thread) transfers the contents of the thread's working copy of a variable to the thread's execution engine. This action is performed whenever a thread executes a virtual machine instruction that uses the value of a variable.
<a name="28297"></a>
<li>An <i>assign</i> action (by a thread) transfers a value from the thread's execution engine into the thread's working copy of a variable. This action is performed whenever a thread executes a virtual machine instruction that assigns to a variable.
<a name="28298"></a>
<li>A <i>read</i> action (by the main memory) transmits the contents of the master copy of a variable to a thread's working memory for use by a later <i>load</i> action.
<a name="28299"></a>
<li>A <i>load </i>action (by a thread) puts a value transmitted from main memory by a <i>read</i> action into the thread's working copy of a variable.
<a name="28300"></a>
<li>A <i>store </i>action (by a thread) transmits the contents of the thread's working copy of a variable to main memory for use by a later <i>write</i> action.
<a name="28301"></a>
<li>A <i>write</i> action (by the main memory) puts a value transmitted from the thread's working memory by a <i>store</i> action into the master copy of a variable in main memory.
<a name="28303"></a>
<li>A <i>lock</i> action (by a thread tightly synchronized with main memory) causes a thread to acquire one claim on a particular lock.
<a name="28304"></a>
<li>An <i>unlock</i> action (by a thread tightly synchronized with main memory) causes a thread to release one claim on a particular lock.
</ul><p><a name="28305"></a>
Thus the interaction of a thread with a variable over time consists of a sequence of <i>use</i>, <i>assign</i>, <i>load</i>, and <i>store</i> actions. Main memory performs a <i>read</i> action for every <i>load</i> and a <i>write</i> action for every <i>store</i>. A thread's interactions with a lock over time consists of a sequence of <i>lock</i> and <i>unlock</i> actions. All the globally visible behavior of a thread thus comprises all the thread's actions on variables and locks.<p>


</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>12.1.2 Link Test: Verify, Prepare, (Optionally) Resolve</title>
<META NAME=MS-HAID CONTENT="12_1_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>12.1.2	 Link Test: Verify, Prepare, (Optionally) Resolve</h3>
<a name="46620"></a>
<p>
<a name="47121"></a>
After <code>Test</code> is loaded, it must be initialized before <code>main</code> can be invoked. And <code>Test</code>, 
like all (class or interface) types, must be linked before it is initialized. Linking 
involves verification, preparation and (optionally) resolution. Linking is described 
further in <a href="12_3.htm#44487">&#167;12.3</a>.
<p><a name="47125"></a>
Verification checks that the loaded representation of <code>Test</code> is well-formed, with a proper symbol table. Verification also checks that the code that implements <code>Test</code> obeys the semantic requirements of Java and the Java Virtual Machine. If a problem is detected during verification, then an error is thrown. Verification is described further in <a href="12_3_1.htm#44491">&#167;12.3.1</a>.<p>
<a name="48984"></a>
Preparation involves allocation of static storage and any data structures that are used internally by the virtual machine, such as method tables. If a problem is detected during preparation, then an error is thrown. Preparation is described further in <a href="12_3_2.htm#47979">&#167;12.3.2</a>.<p>
<a name="46935"></a>
Resolution is the process of checking symbolic references from <code>Test</code> to other classes and interfaces, by loading the other classes and interfaces that are mentioned and checking that the references are correct.<p>
<a name="48724"></a>
The resolution step is optional at the time of initial linkage. An implementation may resolve symbolic references from a class or interface that is being linked very early, even to the point of resolving all symbolic references from the classes and interfaces that are further referenced, recursively. (This resolution may result in errors from these further loading and linking steps.) This implementation choice represents one extreme and is similar to the kind of "static" linkage that has been done for many years in simple implementations of the C language. (In these implementations, a compiled program is typically represented as an "<code>a.out</code>" file that contains &#32;a fully-linked version of the program, including completely resolved links to library routines used by the program. Copies of these library routines are included in the "<code>a.out</code>" file.)<p>
<a name="46603"></a>
An implementation may instead choose to resolve a symbolic reference only when it is actively used; consistent use of this strategy for all symbolic references would represent the "laziest" form of resolution. In this case, if <code>Test</code> had several symbolic references to another class, then the references might be resolved one at a time, as they are used, or perhaps not at all, if these references were never used during execution of the program.<p>
<a name="46604"></a>
The only requirement on when resolution is performed is that any errors detected during resolution must be thrown at a point in the program where some action is taken by the program that might, directly or indirectly, require linkage to the class or interface involved in the error. Using the "static" example implementation choice described above, loading and linkage errors could occur before the program is executed if they involved a class or interface mentioned in the class <code>Test</code> or any of the further, recursively referenced, classes and interfaces. In a system &#32;that implemented the "laziest" resolution, these errors would be thrown only when an incorrect symbolic reference is actively used.<p>
<a name="46607"></a>
The resolution process is described further in <a href="12_3_3.htm#44524">&#167;12.3.3</a>.<p>


</body></html>

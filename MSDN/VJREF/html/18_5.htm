<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>18.5 Example</title>
<META NAME=MS-HAID CONTENT="18_5">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>18.5	 Example</h2>

<a name="26035"></a>
<p>
<a name="45314"></a>
Here, as an example, is a version of the source code for the class <code>Object</code> of the 
package <code>java.lang</code>, including its documentation comments.
<p><pre><a name="44320"></a>
/*
<a name="44321"></a> * @(#)Object.java 1.37 96/06/26
<a name="44322"></a> *
<a name="44323"></a> * Copyright (c) 1994, 1995, 1996 Sun Microsystems, Inc.
<a name="44324"></a> * All Rights Reserved.
<a name="44325"></a> *
<a name="44326"></a> * Permission to use, copy, modify, and distribute this
<a name="44327"></a> * software and its documentation for NON-COMMERCIAL purposes
<a name="44328"></a> * and without fee is hereby granted provided that this
<a name="44329"></a> * copyright notice appears in all copies. Please refer to
<a name="44330"></a> * the file "copyright.html" for further important copyright
<a name="44331"></a> * and licensing information.
<a name="44332"></a> *
<a name="44333"></a> * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE
<a name="44334"></a> * SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED,
<a name="44335"></a> * INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
<a name="44336"></a> * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
<a name="44337"></a> * NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR ANY DAMAGES
<a name="44338"></a> * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
<a name="44339"></a> * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
<a name="44340"></a> */
<br><br><a name="44342"></a>package java.lang;
<br><a name="44344"></a>
/**
<a name="44345"></a> * The root of the Class hierarchy.  Every Class in the
<a name="44346"></a> * system has Object as its ultimate parent.  Every variable
<a name="44347"></a> * and method defined here is available in every Object. 
<a name="44348"></a> * @see				Class
<a name="44349"></a> * @version				1.37, 26 Jun 1996
<a name="44350"></a> */
<br><a name="44351"></a>
public class Object {
<a name="44352"></a>	/**
<a name="44353"></a>	 * Returns the Class of this Object. Java has a runtime
<a name="44354"></a>	 * representation for classes--a descriptor of type Class
<a name="44355"></a>	 * --which the method getClass() returns for any Object.
<a name="44356"></a>	 */
<a name="44357"></a>	public final native Class getClass();
<br><a name="44359"></a>
	/**
<a name="44360"></a>	 * Returns a hashcode for this Object.
<a name="44361"></a>	 * Each Object in the Java system has a hashcode.
<a name="44362"></a>	 * The hashcode is a number that is usually different
<a name="44363"></a>	 * for different Objects. It is used when storing Objects
<a name="44364"></a>	 * in hashtables.
<a name="44365"></a>	 * Note: hashcodes can be negative as well as positive.
<a name="44366"></a>	 * @see				java.util.Hashtable
<a name="44367"></a>	 */
<a name="44368"></a>	public native int hashCode();
<br><a name="44370"></a>
	/**
<a name="44371"></a>	 * Compares two Objects for equality.
<a name="44372"></a>	 * Returns a boolean that indicates whether this Object
<a name="44373"></a>	 * is equivalent to the specified Object. This method is
<a name="44374"></a>	 * used when an Object is stored in a hashtable.
<a name="44375"></a>	 * @param				obj			the Object to compare with
<a name="44376"></a>	 * @return				true if these Objects are equal;
<a name="44377"></a>	 * 					false otherwise.
<a name="44378"></a>	 * @see				java.util.Hashtable
<a name="44379"></a>	 */
<a name="44380"></a>	public boolean equals(Object obj) {
<a name="44381"></a>		return (this == obj);
<a name="44382"></a>	}
<br><a name="44384"></a>
	/**
<a name="44385"></a>	 * Creates a clone of the object. A new instance is
<a name="44386"></a>	 * allocated and a bitwise clone of the current object
<a name="44387"></a>	 * is placed in the new object.
<a name="44388"></a>	 * @return				a clone of this Object.
<a name="44389"></a>	 * @exception					OutOfMemoryError If there is not enough
<a name="44390"></a>	 * 						memory.
<a name="44391"></a>	 * @exception					CloneNotSupportedException Object
<a name="44392"></a>	 * 						explicitly does not want to be
<a name="44393"></a>	 * 						cloned, or it does not support
<a name="44394"></a>	 * 						the Cloneable interface.
<a name="44395"></a>	 */
<a name="44396"></a>	protected native Object clone()
<a name="44397"></a>		throws CloneNotSupportedException;
<br></pre><p><a name="45327"></a>
<p>
<a name="45328"></a>
<p>
<pre><a name="44399"></a>
	/**
<a name="44400"></a>	 * Returns a String that represents this Object.
<a name="44401"></a>	 * It is recommended that all subclasses override
<a name="44402"></a>	 * this method.
<a name="44403"></a>	 */
<a name="44404"></a>	public String toString() {
<a name="44405"></a>		return getClass().getName() + "@" +
<a name="44406"></a>			Integer.toHexString(hashCode());
<a name="44407"></a>	}
<br><a name="44409"></a>
	/**
<a name="44410"></a>	 * Notifies a single waiting thread on a change in
<a name="44411"></a>	 * condition of another thread. The thread effecting
<a name="44412"></a>	 * the change notifies the waiting thread using notify().
<a name="44413"></a>	 * Threads that want to wait for a condition to change
<a name="44414"></a>	 * before proceeding can call wait(). &lt;p&gt;
<a name="44415"></a>	 * &lt;em&gt;The method notify() can be called only by the
<a name="44416"></a>	 * thread that is the owner of the current object's
<a name="44417"></a>	 * monitor lock.&lt;/em&gt;
<a name="44418"></a>	 *
<a name="44419"></a>	 * @exception					IllegalMonitorStateException If the
<a name="44420"></a>	 * 						current thread is not the owner
<a name="44421"></a>	 * 						of the Object's monitor lock.
<a name="44422"></a>	 * @see				Object#wait
<a name="44423"></a>	 * @see				Object#notifyAll
<a name="44424"></a>	 */
<a name="44425"></a>	public final native void notify();
<br><a name="44427"></a>
	/**
<a name="44428"></a>	 * Notifies all the threads waiting for a condition to
<a name="44429"></a>	 * change. Threads that are waiting are generally waiting
<a name="44430"></a>	 * for another thread to change some condition. Thus, the
<a name="44431"></a>	 * thread effecting a change that more than one thread is
<a name="44432"></a>	 * waiting for notifies all the waiting threads using
<a name="44433"></a>	 * the method notifyAll(). Threads that want to wait for
<a name="44434"></a>	 * a condition to change before proceeding can call
<a name="44435"></a>	 * wait(). &lt;p&gt;
<a name="44436"></a>	 * &lt;em&gt;The method notifyAll() can be called only by the
<a name="44437"></a>	 * thread that is the owner of the current object's
<a name="44438"></a>	 * monitor lock.&lt;/em&gt;
<a name="44439"></a>	 *
<a name="44555"></a>	 * @exception					IllegalMonitorStateException If the
<a name="44556"></a>	 * 						current thread is not the owner
<a name="44557"></a>	 * 						of the Object's monitor lock.
<a name="44443"></a>	 * @see				Object#wait
<a name="44444"></a>	 * @see				Object#notify
<a name="44445"></a>	 */
<a name="44446"></a>	public final native void notifyAll();
<br></pre><p><pre><a name="44448"></a>
	/**
<a name="44449"></a>	 * Causes a thread to wait until it is notified or the
<a name="44450"></a>	 * specified timeout expires. &lt;p&gt;
<a name="44451"></a>	 * &lt;em&gt;The method wait(millis) can be called only by
<a name="44452"></a>	 * the thread that is the owner of the current object's
<a name="44453"></a>	 * monitor lock.&lt;/em&gt;
<a name="44454"></a>	 *
<a name="44455"></a>	 * @param 				millis			the maximum time to wait,
<a name="44456"></a>	 * 								in milliseconds
<a name="44559"></a>	 * @exception					IllegalMonitorStateException If the
<a name="44560"></a>	 * 						current thread is not the owner
<a name="44561"></a>	 * 						of the Object's monitor lock.
<a name="44460"></a>	 * @exception 					InterruptedException Another thread has
<a name="44461"></a>	 * 						interrupted this thread. 
<a name="44462"></a>	 */
<a name="44463"></a>	public final native void wait(long millis)
<a name="44464"></a>		throws InterruptedException;
<br><a name="44466"></a>
	/**
<a name="44467"></a>	 * More accurate wait.
<a name="44468"></a>	 * &lt;em&gt;The method wait(millis, nanos) can be called only
<a name="44469"></a>	 * by the thread that is the owner of the current
<a name="44470"></a>	 * object's monitor lock.&lt;/em&gt;
<a name="44471"></a>	 *
<a name="44472"></a>	 * @param millis						the maximum time to wait,
<a name="44473"></a>	 * 							in milliseconds
<a name="44474"></a>	 * @param nano						additional time to wait,
<a name="44475"></a>	 * 							in nanoseconds
<a name="44476"></a>	 * 							(range 0-999999)
<a name="44563"></a>	 * @exception					IllegalMonitorStateException If the
<a name="44564"></a>	 * 						current thread is not the owner
<a name="44565"></a>	 * 						of the Object's monitor lock.
<a name="44566"></a>	 * @exception 					InterruptedException Another thread has
<a name="44567"></a>	 * 						interrupted this thread. 
<a name="44543"></a>	 */
<a name="44483"></a>	public final void wait(long millis, int nanos)
<a name="44484"></a>		throws InterruptedException
<a name="44485"></a>	{
<a name="44486"></a>		if (nanos &gt;= 500000 || (nanos != 0 &amp;&amp; millis==0))
<a name="44487"></a>			timeout++;
<a name="44488"></a>		wait(timeout);
<a name="44489"></a>	}
<br><a name="44491"></a>
	/**
<a name="44492"></a>	 * Causes a thread to wait forever until it is notified.
<a name="44493"></a>	 * &lt;p&gt;
<a name="44494"></a>	 * &lt;em&gt;The method wait() can be called only by the
<a name="44495"></a>	 * thread that is the owner of the current object's
<a name="44496"></a>	 * monitor lock.&lt;/em&gt;
<a name="44497"></a>	 *
</pre><p><pre><a name="44569"></a>	 * @exception					IllegalMonitorStateException If the
<a name="44570"></a>	 * 						current thread is not the owner
<a name="44571"></a>	 * 						of the Object's monitor lock.
<a name="44572"></a>	 * @exception 					InterruptedException Another thread has
<a name="44573"></a>	 * 						interrupted this thread. 
<a name="44503"></a>	 */
<a name="44504"></a>	public final void wait() throws InterruptedException {
<a name="44505"></a>		wait(0);
<a name="44506"></a>	}
<br></pre><p><pre><a name="44508"></a>
	/**
<a name="44509"></a>	 * Code to perform when this object is garbage collected.
<a name="44510"></a>	 * The default is that nothing needs to be performed.
<a name="44511"></a>	 * 
<a name="44512"></a>	 * Any exception thrown by a finalize method causes the
<a name="44513"></a>	 * finalization to halt.  But otherwise, it is ignored.
<a name="44514"></a>	 */
<a name="44515"></a>	protected void finalize() throws Throwable { }
<br><a name="44516"></a>}
</pre><p><a name="44904"></a>


From this source code, the <code>javadoc</code> tool produced the following HTML file, 
which is available for browsing at 
<a href="http://java.sun.com/Series/">http://java.sun.com/Series/</a>, our Java 
Series web site:

<pre>
<p><a name="44575"></a>
<p>&lt;!--NewPage--&gt;
<a name="44576"></a>
<p>&lt;html&gt;
<a name="44577"></a>
<p>&lt;head&gt;
<a name="44578"></a>
<p>&lt;!-- Generated by javadoc on Wed Jun 26 11:40:38 EDT 1996 --&gt;
<a name="44579"></a>
<p>&lt;a name="_top_"&gt;&lt;/a&gt;
<a name="44580"></a>
<p>&lt;title&gt;
<a name="44581"></a>
<p>  Class java.lang.Object
<a name="44582"></a>
<p>&lt;/title&gt;
<a name="44583"></a>
<p>&lt;/head&gt;
<a name="44584"></a>
<p>&lt;body&gt;
<a name="44585"></a>
<p>&lt;pre&gt;
<a name="44919"></a>
<p>&lt;a href="packages.html"&gt;All Packages&lt;/a&gt;  &lt;a href="tree.html"&gt;Class Hierarchy&#172;<br>&lt;/a&gt;  &lt;a href="Package-java.lang.html"&gt;This Package&lt;/a&gt;  &lt;a href="java.lang.N&#172;<br>umber.html#_top_"&gt;Previous&lt;/a&gt;  &lt;a href="java.lang.OutOfMemoryError.html#_top&#172;<br>_"&gt;Next&lt;/a&gt;  &lt;a href="AllNames.html"&gt;Index&lt;/a&gt;&lt;/pre&gt;
<a name="44920"></a>
<p>&lt;hr&gt;
<a name="44588"></a>
<p>&lt;h1&gt;
<a name="44589"></a>
<p>  Class java.lang.Object
<a name="44590"></a>
<p>&lt;/h1&gt;
<a name="44591"></a>
<p>&lt;pre&gt;
<a name="44592"></a>
<p>java.lang.Object
<a name="44593"></a>
<p>&lt;/pre&gt;
<a name="44594"></a>
<p>&lt;hr&gt;
<a name="44595"></a>
<p>&lt;dl&gt;
<a name="44596"></a>
<p>  &lt;dt&gt; public class &lt;b&gt;Object&lt;/b&gt;
<a name="44597"></a>
<p>&lt;/dl&gt;
<a name="44598"></a>
<p>The root of the Class hierarchy.  Every Class in the
<a name="44599"></a>
<p>system has Object as its ultimate parent.  Every variable
<a name="44600"></a>
<p>and method defined here is available in every Object.
<a name="44601"></a>
<p>&lt;dl&gt;
<a name="44602"></a>
<p>  &lt;dt&gt; &lt;b&gt;Version:&lt;/b&gt;
<a name="44603"></a>
<p>  &lt;dd&gt; 1.37, 26 Jun 1996
<a name="44604"></a>
<p>    &lt;dt&gt; &lt;b&gt;See Also:&lt;/b&gt;
<a name="44605"></a>
<p>    &lt;dd&gt; &lt;a href="java.lang.Class.html#_top_"&gt;Class&lt;/a&gt;
<a name="44606"></a>
<p>&lt;/dl&gt;
<a name="44607"></a>
<p>&lt;hr&gt;
<a name="44608"></a>
<p>&lt;a name="index"&gt;&lt;/a&gt;
<a name="44938"></a>
<p>&lt;h2&gt;
<a name="44939"></a>
<p>  &lt;img src="images/constructor-index.gif" width=275 height=38 alt="Constructo&#172;<br>r Index"&gt;
<a name="44926"></a>
<p>&lt;/h2&gt;
<a name="44612"></a>
<p>&lt;dl&gt;
<a name="44613"></a>
<p>  &lt;dt&gt; &lt;img src="images/yellow-ball-small.gif" width=6 height=6 alt=" o "&gt;
<a name="44614"></a>
<p>	&lt;a href="#Object()"&gt;&lt;b&gt;Object&lt;/b&gt;&lt;/a&gt;()
<a name="44615"></a>
<p>  &lt;dd&gt; 
<a name="44616"></a>
<p>&lt;/dl&gt;
<a name="44617"></a>
<p>&lt;h2&gt;
<a name="44618"></a>
<p>  &lt;img src="images/method-index.gif" width=207 height=38 alt="Method Index"&gt;
<a name="44619"></a>
<p>&lt;/h2&gt;
<a name="44620"></a>
<p>&lt;dl&gt;
<a name="44621"></a>
<p>  &lt;dt&gt; &lt;img src="images/red-ball-small.gif" width=6 height=6 alt=" o "&gt;
<a name="44622"></a>
<p>	&lt;a href="#clone()"&gt;&lt;b&gt;clone&lt;/b&gt;&lt;/a&gt;()
<a name="44623"></a>
<p>  &lt;dd&gt; Creates a clone of the object.
<a name="44624"></a>
<p>  &lt;dt&gt; &lt;img src="images/red-ball-small.gif" width=6 height=6 alt=" o "&gt;
<a name="44625"></a>
<p>	&lt;a href="#equals(java.lang.Object)"&gt;&lt;b&gt;equals&lt;/b&gt;&lt;/a&gt;(Object)
<a name="44626"></a>
<p>  &lt;dd&gt; Compares two Objects for equality.
<a name="44627"></a>
<p>  &lt;dt&gt; &lt;img src="images/red-ball-small.gif" width=6 height=6 alt=" o "&gt;
<a name="44628"></a>
<p>	&lt;a href="#finalize()"&gt;&lt;b&gt;finalize&lt;/b&gt;&lt;/a&gt;()
<a name="44629"></a>
<p>  &lt;dd&gt; Code to perform when this object is garbage collected.
<a name="44630"></a>
<p>  &lt;dt&gt; &lt;img src="images/red-ball-small.gif" width=6 height=6 alt=" o "&gt;
<a name="44631"></a>
<p>	&lt;a href="#getClass()"&gt;&lt;b&gt;getClass&lt;/b&gt;&lt;/a&gt;()
<a name="44632"></a>
<p>  &lt;dd&gt; Returns the Class of this Object.
<a name="44633"></a>
<p>  &lt;dt&gt; &lt;img src="images/red-ball-small.gif" width=6 height=6 alt=" o "&gt;
<a name="44634"></a>
<p>	&lt;a href="#hashCode()"&gt;&lt;b&gt;hashCode&lt;/b&gt;&lt;/a&gt;()
<a name="44635"></a>
<p>  &lt;dd&gt; Returns a hashcode for this Object.
<a name="44636"></a>
<p>  &lt;dt&gt; &lt;img src="images/red-ball-small.gif" width=6 height=6 alt=" o "&gt;
<a name="44637"></a>
<p>	&lt;a href="#notify()"&gt;&lt;b&gt;notify&lt;/b&gt;&lt;/a&gt;()
<a name="44638"></a>
<p>  &lt;dd&gt; Notifies a single waiting thread on a change in
<a name="44639"></a>
<p>condition of another thread.
<a name="44640"></a>
<p>  &lt;dt&gt; &lt;img src="images/red-ball-small.gif" width=6 height=6 alt=" o "&gt;
<a name="44641"></a>
<p>	&lt;a href="#notifyAll()"&gt;&lt;b&gt;notifyAll&lt;/b&gt;&lt;/a&gt;()
<a name="44642"></a>
<p>  &lt;dd&gt; Notifies all the threads waiting for a condition to
<a name="44643"></a>
<p>change.
<a name="44644"></a>
<p>  &lt;dt&gt; &lt;img src="images/red-ball-small.gif" width=6 height=6 alt=" o "&gt;
<a name="44645"></a>
<p>	&lt;a href="#toString()"&gt;&lt;b&gt;toString&lt;/b&gt;&lt;/a&gt;()
<a name="44646"></a>
<p>  &lt;dd&gt; Returns a String that represents this Object.
<a name="44647"></a>
<p>  &lt;dt&gt; &lt;img src="images/red-ball-small.gif" width=6 height=6 alt=" o "&gt;
<a name="44648"></a>
<p>	&lt;a href="#wait()"&gt;&lt;b&gt;wait&lt;/b&gt;&lt;/a&gt;()
<a name="44649"></a>
<p>  &lt;dd&gt; Causes a thread to wait forever until it is notified.
<a name="44650"></a>
<p>  &lt;dt&gt; &lt;img src="images/red-ball-small.gif" width=6 height=6 alt=" o "&gt;
<a name="44651"></a>
<p>	&lt;a href="#wait(long)"&gt;&lt;b&gt;wait&lt;/b&gt;&lt;/a&gt;(long)
<a name="44652"></a>
<p>  &lt;dd&gt; Causes a thread to wait until it is notified or the
<a name="44653"></a>
<p>specified timeout expires.
<a name="44654"></a>
<p>  &lt;dt&gt; &lt;img src="images/red-ball-small.gif" width=6 height=6 alt=" o "&gt;
<a name="44655"></a>
<p>	&lt;a href="#wait(long, int)"&gt;&lt;b&gt;wait&lt;/b&gt;&lt;/a&gt;(long, int)
<a name="44656"></a>
<p>  &lt;dd&gt; More accurate wait.
<a name="44657"></a>
<p>&lt;/dl&gt;
<a name="44658"></a>
<p>&lt;a name="constructors"&gt;&lt;/a&gt;
<a name="44659"></a>
<p>&lt;h2&gt;
<a name="44660"></a>
<p>  &lt;img src="images/constructors.gif" width=231 height=38 alt="Constructors"&gt;
<a name="44661"></a>
<p>&lt;/h2&gt;
<a name="44952"></a>
<p>&lt;a name="Object"&gt;&lt;/a&gt;
<a name="44953"></a>
<p>&lt;a name="Object()"&gt;&lt;img src="images/yellow-ball.gif" width=12 height=12 alt="&#172;<br>o "&gt;&lt;/a&gt;
<a name="44949"></a>
<p>&lt;b&gt;Object&lt;/b&gt;
<a name="44665"></a>
<p>&lt;pre&gt;
<a name="44666"></a>
<p>  public Object()
<a name="44667"></a>
<p>&lt;/pre&gt;
<a name="44668"></a>
<p>&lt;a name="methods"&gt;&lt;/a&gt;
<a name="44669"></a>
<p>&lt;h2&gt;
<a name="44670"></a>
<p>  &lt;img src="images/methods.gif" width=151 height=38 alt="Methods"&gt;
<a name="44671"></a>
<p>&lt;/h2&gt;
<a name="44672"></a>
<p>&lt;a name="getClass()"&gt;&lt;img src="images/red-ball.gif" width=12 height=12 alt=" &#172;<br>o "&gt;&lt;/a&gt;
<a name="44673"></a>
<p>&lt;a name="getClass"&gt;&lt;b&gt;getClass&lt;/b&gt;&lt;/a&gt;
<a name="44674"></a>
<p>&lt;pre&gt;
<a name="44675"></a>
<p>  public final &lt;a href="java.lang.Class.html#_top_"&gt;Class&lt;/a&gt; getClass()
<a name="44676"></a>
<p>&lt;/pre&gt;
<a name="44677"></a>
<p>&lt;dl&gt;
<a name="44678"></a>
<p>  &lt;dd&gt; Returns the Class of this Object. Java has a runtime
<a name="44679"></a>
<p>representation for classes--a descriptor of type Class
<a name="44680"></a>
<p>--which the method getClass() returns for any Object.
<a name="44681"></a>
<p>&lt;/dl&gt;
<a name="44682"></a>
<p>&lt;a name="hashCode()"&gt;&lt;img src="images/red-ball.gif" width=12 height=12 alt=" &#172;<br>o "&gt;&lt;/a&gt;
<a name="44683"></a>
<p>&lt;a name="hashCode"&gt;&lt;b&gt;hashCode&lt;/b&gt;&lt;/a&gt;
<a name="44684"></a>
<p>&lt;pre&gt;
<a name="44685"></a>
<p>  public int hashCode()
<a name="44686"></a>
<p>&lt;/pre&gt;
<a name="44687"></a>
<p>&lt;dl&gt;
<a name="44688"></a>
<p>  &lt;dd&gt; Returns a hashcode for this Object.
<a name="44689"></a>
<p>Each Object in the Java system has a hashcode.
<a name="44690"></a>
<p>The hashcode is a number that is usually different
<a name="44691"></a>
<p>for different Objects. It is used when storing Objects
<a name="44692"></a>
<p>in hashtables.
<a name="44693"></a>
<p>Note: hashcodes can be negative as well as positive.
<a name="44694"></a>
<p>  &lt;dl&gt;
<a name="44695"></a>
<p>    &lt;dt&gt; &lt;b&gt;See Also:&lt;/b&gt;
<a name="44696"></a>
<p>    &lt;dd&gt; &lt;a href="java.util.Hashtable.html#_top_"&gt;Hashtable&lt;/a&gt;
<a name="44697"></a>
<p>  &lt;/dl&gt;
<a name="44698"></a>
<p>&lt;/dl&gt;
<a name="44986"></a>
<p>&lt;a name="equals(java.lang.Object)"&gt;&lt;img src="images/red-ball.gif" width=12 he&#172;<br>ight=12 alt=" o "&gt;&lt;/a&gt;
<a name="44987"></a>
<p>&lt;a name="equals"&gt;&lt;b&gt;equals&lt;/b&gt;&lt;/a&gt;
<a name="44701"></a>
<p>&lt;pre&gt;
<a name="44702"></a>
<p>  public boolean equals(&lt;a href="#_top_"&gt;Object&lt;/a&gt; obj)
<a name="44703"></a>
<p>&lt;/pre&gt;
<a name="44704"></a>
<p>&lt;dl&gt;
<a name="44705"></a>
<p>  &lt;dd&gt; Compares two Objects for equality.
<a name="44706"></a>
<p>Returns a boolean that indicates whether this Object
<a name="44707"></a>
<p>is equivalent to the specified Object. This method is
<a name="44708"></a>
<p>used when an Object is stored in a hashtable.
<a name="44709"></a>
<p>  &lt;dl&gt;
<a name="44710"></a>
<p>    &lt;dt&gt; &lt;b&gt;Parameters:&lt;/b&gt;
<a name="44711"></a>
<p>    &lt;dd&gt; obj - the Object to compare with
<a name="44712"></a>
<p>    &lt;dt&gt; &lt;b&gt;Returns:&lt;/b&gt;
<a name="44713"></a>
<p>    &lt;dd&gt; true if these Objects are equal;
<a name="44714"></a>
<p>			false otherwise.
<a name="44715"></a>
<p>    &lt;dt&gt; &lt;b&gt;See Also:&lt;/b&gt;
<a name="44716"></a>
<p>    &lt;dd&gt; &lt;a href="java.util.Hashtable.html#_top_"&gt;Hashtable&lt;/a&gt;
<a name="44717"></a>
<p>  &lt;/dl&gt;
<a name="44993"></a>
<p>&lt;/dl&gt;
<a name="44994"></a>
<p>&lt;a name="clone()"&gt;&lt;img src="images/red-ball.gif" width=12 height=12 alt=" o "&#172;<br>&gt;&lt;/a&gt;
<a name="44720"></a>
<p>&lt;a name="clone"&gt;&lt;b&gt;clone&lt;/b&gt;&lt;/a&gt;
<a name="44721"></a>
<p>&lt;pre&gt;
<a name="45065"></a>
<p>  protected &lt;a href="#_top_"&gt;Object&lt;/a&gt; clone() throws &lt;a href="java.lang.Clo&#172;<br>neNotSupportedException.html#_top_"&gt;CloneNotSupportedException&lt;/a&gt;
<a name="44723"></a>
<p>&lt;/pre&gt;
<a name="44724"></a>
<p>&lt;dl&gt;
<a name="44725"></a>
<p>  &lt;dd&gt; Creates a clone of the object. A new instance is
<a name="44726"></a>
<p>allocated and a bitwise clone of the current object
<a name="44727"></a>
<p>is placed in the new object.
<a name="44728"></a>
<p>  &lt;dl&gt;
<a name="44729"></a>
<p>    &lt;dt&gt; &lt;b&gt;Returns:&lt;/b&gt;
<a name="44730"></a>
<p>    &lt;dd&gt; a clone of this Object.
<a name="45004"></a>
<p>    &lt;dt&gt; &lt;b&gt;Throws:&lt;/b&gt; &lt;a href="java.lang.OutOfMemoryError.html#_top_"&gt;OutOf&#172;<br>MemoryError&lt;/a&gt;
<a name="45005"></a>
<p>    &lt;dd&gt; If there is not enough
<a name="44733"></a>
<p>			memory.
<a name="45078"></a>
<p>    &lt;dt&gt; &lt;b&gt;Throws:&lt;/b&gt; &lt;a href="java.lang.CloneNotSupportedException.html#_t&#172;<br>op_"&gt;CloneNotSupportedException&lt;/a&gt;
<a name="45079"></a>
<p>    &lt;dd&gt; Object
<a name="44736"></a>
<p>			explicitly does not want to be
<a name="44737"></a>
<p>			cloned, or it does not support
<a name="44738"></a>
<p>			the Cloneable interface.
<a name="44739"></a>
<p>  &lt;/dl&gt;
<a name="44740"></a>
<p>&lt;/dl&gt;
<a name="44741"></a>
<p>&lt;a name="toString()"&gt;&lt;img src="images/red-ball.gif" width=12 height=12 alt=" &#172;<br>o "&gt;&lt;/a&gt;
<a name="44742"></a>
<p>&lt;a name="toString"&gt;&lt;b&gt;toString&lt;/b&gt;&lt;/a&gt;
<a name="44743"></a>
<p>&lt;pre&gt;
<a name="44744"></a>
<p>  public &lt;a href="java.lang.String.html#_top_"&gt;String&lt;/a&gt; toString()
<a name="44745"></a>
<p>&lt;/pre&gt;
<a name="44746"></a>
<p>&lt;dl&gt;
<a name="44747"></a>
<p>  &lt;dd&gt; Returns a String that represents this Object.
<a name="44748"></a>
<p>It is recommended that all subclasses override
<a name="44749"></a>
<p>this method.
<a name="44750"></a>
<p>&lt;/dl&gt;
<a name="45016"></a>
<p>&lt;a name="notify()"&gt;&lt;img src="images/red-ball.gif" width=12 height=12 alt=" o &#172;<br>"&gt;&lt;/a&gt;
<a name="45017"></a>
<p>&lt;a name="notify"&gt;&lt;b&gt;notify&lt;/b&gt;&lt;/a&gt;
<a name="44753"></a>
<p>&lt;pre&gt;
<a name="44754"></a>
<p>  public final void notify()
<a name="44755"></a>
<p>&lt;/pre&gt;
<a name="44756"></a>
<p>&lt;dl&gt;
<a name="44757"></a>
<p>  &lt;dd&gt; Notifies a single waiting thread on a change in
<a name="44758"></a>
<p>condition of another thread. The thread effecting
<a name="44759"></a>
<p>the change notifies the waiting thread using notify().
<a name="44760"></a>
<p>Threads that want to wait for a condition to change
<a name="44761"></a>
<p>before proceeding can call wait(). &lt;p&gt;
<a name="44762"></a>
<p>&lt;em&gt;The method notify() can be called only by the
<a name="44763"></a>
<p>thread that is the owner of the current object's
<a name="44764"></a>
<p>monitor lock.&lt;/em&gt;
<a name="44765"></a>
<p>  &lt;dl&gt;
<a name="45092"></a>
<p>    &lt;dt&gt; &lt;b&gt;Throws:&lt;/b&gt; &lt;a href="java.lang.IllegalMonitorStateException.html#&#172;<br>_top_"&gt;IllegalMonitorStateException&lt;/a&gt;
<a name="45093"></a>
<p>    &lt;dd&gt; If the
<a name="44768"></a>
<p>			current thread is not the owner
<a name="44769"></a>
<p>			of the Object's monitor lock.
<a name="44770"></a>
<p>    &lt;dt&gt; &lt;b&gt;See Also:&lt;/b&gt;
<a name="44771"></a>
<p>    &lt;dd&gt; &lt;a href="#wait"&gt;wait&lt;/a&gt;, &lt;a href="#notifyAll"&gt;notifyAll&lt;/a&gt;
<a name="44772"></a>
<p>  &lt;/dl&gt;
<a name="45022"></a>
<p>&lt;/dl&gt;
<a name="45023"></a>
<p>&lt;a name="notifyAll()"&gt;&lt;img src="images/red-ball.gif" width=12 height=12 alt="&#172;<br>o "&gt;&lt;/a&gt;
<a name="44775"></a>
<p>&lt;a name="notifyAll"&gt;&lt;b&gt;notifyAll&lt;/b&gt;&lt;/a&gt;
<a name="44776"></a>
<p>&lt;pre&gt;
<a name="44777"></a>
<p>  public final void notifyAll()
<a name="44778"></a>
<p>&lt;/pre&gt;
<a name="44779"></a>
<p>&lt;dl&gt;
<a name="44780"></a>
<p>  &lt;dd&gt; Notifies all the threads waiting for a condition to
<a name="44781"></a>
<p>change. Threads that are waiting are generally waiting
<a name="44782"></a>
<p>for another thread to change some condition. Thus, the
<a name="44783"></a>
<p>thread effecting a change that more than one thread is
<a name="44784"></a>
<p>waiting for notifies all the waiting threads using
<a name="44785"></a>
<p>the method notifyAll(). Threads that want to wait for
<a name="44786"></a>
<p>a condition to change before proceeding can call
<a name="44787"></a>
<p>wait(). &lt;p&gt;
<a name="44788"></a>
<p>&lt;em&gt;The method notifyAll() can be called only by the
<a name="44789"></a>
<p>thread that is the owner of the current object's
<a name="44790"></a>
<p>monitor lock.&lt;/em&gt;
<a name="44791"></a>
<p>  &lt;dl&gt;
<a name="44792"></a>
<p>    &lt;dt&gt; &lt;b&gt;Throws:&lt;/b&gt; &lt;a href="java.lang.IllegalMonitorStateException.html#&#172;<br>_top_"&gt;IllegalMonitorStateException&lt;/a&gt;
<a name="44793"></a>
<p>    &lt;dd&gt; If the
<a name="44794"></a>
<p>			current thread is not the owner
<a name="44795"></a>
<p>			of the Object's monitor lock.
<a name="44796"></a>
<p>    &lt;dt&gt; &lt;b&gt;See Also:&lt;/b&gt;
<a name="44797"></a>
<p>    &lt;dd&gt; &lt;a href="#wait"&gt;wait&lt;/a&gt;, &lt;a href="#notify"&gt;notify&lt;/a&gt;
<a name="44798"></a>
<p>  &lt;/dl&gt;
<a name="45046"></a>
<p>&lt;/dl&gt;
<a name="45047"></a>
<p>&lt;a name="wait(long)"&gt;&lt;img src="images/red-ball.gif" width=12 height=12 alt=" &#172;<br>o "&gt;&lt;/a&gt;
<a name="45042"></a>
<p>&lt;a name="wait"&gt;&lt;b&gt;wait&lt;/b&gt;&lt;/a&gt;
<a name="44802"></a>
<p>&lt;pre&gt;
<a name="45108"></a>
<p>  public final void wait(long millis) throws &lt;a href="java.lang.InterruptedEx&#172;<br>ception.html#_top_"&gt;InterruptedException&lt;/a&gt;
<a name="45109"></a>
<p>&lt;/pre&gt;
<a name="44805"></a>
<p>&lt;dl&gt;
<a name="44806"></a>
<p>  &lt;dd&gt; Causes a thread to wait until it is notified or the
<a name="44807"></a>
<p>specified timeout expires. &lt;p&gt;
<a name="44808"></a>
<p>&lt;em&gt;The method wait(millis) can be called only by
<a name="44809"></a>
<p>the thread that is the owner of the current object's
<a name="44810"></a>
<p>monitor lock.&lt;/em&gt;
<a name="44811"></a>
<p>  &lt;dl&gt;
<a name="44812"></a>
<p>    &lt;dt&gt; &lt;b&gt;Parameters:&lt;/b&gt;
<a name="44813"></a>
<p>    &lt;dd&gt; millis - the maximum time to wait,
<a name="44814"></a>
<p>				in milliseconds
<a name="45118"></a>
<p>    &lt;dt&gt; &lt;b&gt;Throws:&lt;/b&gt; &lt;a href="java.lang.IllegalMonitorStateException.html#&#172;<br>_top_"&gt;IllegalMonitorStateException&lt;/a&gt;
<a name="45119"></a>
<p>    &lt;dd&gt; If the
<a name="44817"></a>
<p>			current thread is not the owner
<a name="44818"></a>
<p>			of the Object's monitor lock.
<a name="45124"></a>
<p>    &lt;dt&gt; &lt;b&gt;Throws:&lt;/b&gt; &lt;a href="java.lang.InterruptedException.html#_top_"&gt;I&#172;<br>nterruptedException&lt;/a&gt;
<a name="45125"></a>
<p>    &lt;dd&gt; Another thread has
<a name="44821"></a>
<p>			interrupted this thread.
<a name="44822"></a>
<p>  &lt;/dl&gt;
<a name="44823"></a>
<p>&lt;/dl&gt;
<a name="45052"></a>
<p>&lt;a name="wait(long, int)"&gt;&lt;img src="images/red-ball.gif" width=12 height=12 a&#172;<br>lt=" o "&gt;&lt;/a&gt;
<a name="45053"></a>
<p>&lt;a name="wait"&gt;&lt;b&gt;wait&lt;/b&gt;&lt;/a&gt;
<a name="44826"></a>
<p>&lt;pre&gt;
<a name="45142"></a>
<p>  public final void wait(long millis,
<a name="45143"></a>
<p>                         int nanos) throws &lt;a href="java.lang.InterruptedExce&#172;<br>ption.html#_top_"&gt;InterruptedException&lt;/a&gt;
<a name="45139"></a>
<p>&lt;/pre&gt;
<a name="44830"></a>
<p>&lt;dl&gt;
<a name="44831"></a>
<p>  &lt;dd&gt; More accurate wait.
<a name="44832"></a>
<p>&lt;em&gt;The method wait(millis, nanos) can be called only
<a name="44833"></a>
<p>by the thread that is the owner of the current
<a name="44834"></a>
<p>object's monitor lock.&lt;/em&gt;
<a name="44835"></a>
<p>  &lt;dl&gt;
<a name="44836"></a>
<p>    &lt;dt&gt; &lt;b&gt;Parameters:&lt;/b&gt;
<a name="44837"></a>
<p>    &lt;dd&gt; millis - the maximum time to wait,
<a name="44838"></a>
<p>				in milliseconds
<a name="44839"></a>
<p>    &lt;dd&gt; nano - additional time to wait,
<a name="44840"></a>
<p>				in nanoseconds
<a name="44841"></a>
<p>				(range 0-999999)
<a name="45148"></a>
<p>    &lt;dt&gt; &lt;b&gt;Throws:&lt;/b&gt; &lt;a href="java.lang.IllegalMonitorStateException.html#&#172;<br>_top_"&gt;IllegalMonitorStateException&lt;/a&gt;
<a name="45149"></a>
<p>    &lt;dd&gt; If the
<a name="44844"></a>
<p>			current thread is not the owner
<a name="44845"></a>
<p>			of the Object's monitor lock.
<a name="45158"></a>
<p>    &lt;dt&gt; &lt;b&gt;Throws:&lt;/b&gt; &lt;a href="java.lang.InterruptedException.html#_top_"&gt;I&#172;<br>nterruptedException&lt;/a&gt;
<a name="45159"></a>
<p>    &lt;dd&gt; Another thread has
<a name="44848"></a>
<p>			interrupted this thread.
<a name="44849"></a>
<p>  &lt;/dl&gt;
<a name="44850"></a>
<p>&lt;/dl&gt;
<a name="44851"></a>
<p>&lt;a name="wait()"&gt;&lt;img src="images/red-ball.gif" width=12 height=12 alt=" o "&gt;&#172;<br>&lt;/a&gt;
<a name="44852"></a>
<p>&lt;a name="wait"&gt;&lt;b&gt;wait&lt;/b&gt;&lt;/a&gt;
<a name="44853"></a>
<p>&lt;pre&gt;
<a name="45164"></a>
<p>  public final void wait() throws &lt;a href="java.lang.InterruptedException.htm&#172;<br>l#_top_"&gt;InterruptedException&lt;/a&gt;
<a name="45165"></a>
<p>&lt;/pre&gt;
<a name="44856"></a>
<p>&lt;dl&gt;
<a name="44857"></a>
<p>  &lt;dd&gt; Causes a thread to wait forever until it is notified.
<a name="44858"></a>
<p>&lt;p&gt;
<a name="44859"></a>
<p>&lt;em&gt;The method wait() can be called only by the
<a name="44860"></a>
<p>thread that is the owner of the current object's
<a name="44861"></a>
<p>monitor lock.&lt;/em&gt;
<a name="44862"></a>
<p>  &lt;dl&gt;
<a name="45170"></a>
<p>    &lt;dt&gt; &lt;b&gt;Throws:&lt;/b&gt; &lt;a href="java.lang.IllegalMonitorStateException.html#&#172;<br>_top_"&gt;IllegalMonitorStateException&lt;/a&gt;
<a name="45171"></a>
<p>    &lt;dd&gt; If the
<a name="44865"></a>
<p>			current thread is not the owner
<a name="44866"></a>
<p>			of the Object's monitor lock.
<a name="45184"></a>
<p>    &lt;dt&gt; &lt;b&gt;Throws:&lt;/b&gt; &lt;a href="java.lang.InterruptedException.html#_top_"&gt;I&#172;<br>nterruptedException&lt;/a&gt;
<a name="45185"></a>
<p>    &lt;dd&gt; Another thread has
<a name="44869"></a>
<p>			interrupted this thread.
<a name="44870"></a>
<p>  &lt;/dl&gt;
<a name="44871"></a>
<p>&lt;/dl&gt;
<a name="44872"></a>
<p>&lt;a name="finalize()"&gt;&lt;img src="images/red-ball.gif" width=12 height=12 alt=" &#172;<br>o "&gt;&lt;/a&gt;
<a name="44873"></a>
<p>&lt;a name="finalize"&gt;&lt;b&gt;finalize&lt;/b&gt;&lt;/a&gt;
<a name="44874"></a>
<p>&lt;pre&gt;
<a name="45190"></a>
<p>  protected void finalize() throws &lt;a href="java.lang.Throwable.html#_top_"&gt;T&#172;<br>hrowable&lt;/a&gt;
<a name="45191"></a>
<p>&lt;/pre&gt;
<a name="44877"></a>
<p>&lt;dl&gt;
<a name="44878"></a>
<p>  &lt;dd&gt; Code to perform when this object is garbage collected.
<a name="44879"></a>
<p>The default is that nothing needs to be performed.
<a name="44880"></a>
<p>Any exception thrown by a finalize method causes the
<a name="44881"></a>
<p>finalization to halt.  But otherwise, it is ignored.
<a name="44882"></a>
<p>&lt;/dl&gt;
<a name="44883"></a>
<p>&lt;hr&gt;
<a name="44884"></a>
<p>&lt;pre&gt;
<a name="45209"></a>
<p>&lt;a href="packages.html"&gt;All Packages&lt;/a&gt;  &lt;a href="tree.html"&gt;Class Hierarchy&#172;<br>&lt;/a&gt;  &lt;a href="Package-java.lang.html"&gt;This Package&lt;/a&gt;  &lt;a href="java.lang.N&#172;<br>umber.html#_top_"&gt;Previous&lt;/a&gt;  &lt;a href="java.lang.OutOfMemoryError.html#_top&#172;<br>_"&gt;Next&lt;/a&gt;  &lt;a href="AllNames.html"&gt;Index&lt;/a&gt;&lt;/pre&gt;
<a name="44886"></a>
<p>&lt;/body&gt;
<a name="44887"></a>
<p>&lt;/html&gt;
</pre>
<a name="44145"></a>
<p>
</pre>
<p>
Many of the lines in this HTML file are far too long to fit onto these 
pages. We have used the character "<code>&#172;</code>" at the end of 
a line to indicate that the following line 
of text on the page is part of the same line in the generated file.
<a name="45218"></a>
<p>
This generated HTML file is meant only as an example, not as a specification of the behavior of the <code>javadoc</code> tool, which may be changed over time to improve the HTML presentation of the documentation information.
<p>

<a name="43926"></a>

<p><i>Very few facts are able to tell their own story,<br>
without comments to bring out their meaning.<br>
</i>&#151;John Stuart Mill, <i>On Liberty</i> (1869)</p>

<hr>
<p>
<br>
</font>
</body></html>

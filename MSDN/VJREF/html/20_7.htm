<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>20.7 The Class java.lang.Integer</title>
<META NAME=MS-HAID CONTENT="20_7">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>20.7	 The Class java.lang.Integer</h1>
<a name="14348"></a>
<p>
<pre><a name="14361"></a>public final class <code><b>Integer</b></code> extends Number {
<a name="2355"></a>	public static final int <code><b>MIN_VALUE</b></code> = 0x80000000;
<a name="2356"></a>	public static final int <code><b>MAX_VALUE</b></code> = 0x7fffffff;
<a name="2357"></a>	public <code><b>Integer</b></code>(int value);
<a name="2358"></a>	public <code><b>Integer</b></code>(String s)<br>
		throws NumberFormatException;
<a name="2359"></a>	public String <code><b>toString</b></code>();
<a name="2360"></a>	public boolean <code><b>equals</b></code>(Object obj);
<a name="2361"></a>	public int <code><b>hashCode</b></code>();
<a name="2362"></a>	public int <code><b>intValue</b></code>();
<a name="2363"></a>	public long <code><b>longValue</b></code>();
<a name="2364"></a>	public float <code><b>floatValue</b></code>();
<a name="2365"></a>	public double <code><b>doubleValue</b></code>();
<a name="2366"></a>	public static String <code><b>toString</b></code>(int i);
<a name="2367"></a>	public static String <code><b>toString</b></code>(int i, int radix);
<a name="7371"></a>	public static String <code><b>toHexString</b></code>(long i);
<a name="7372"></a>	public static String <code><b>toOctalString</b></code>(long i);
<a name="7373"></a>	public static String <code><b>toBinaryString</b></code>(long i);
<a name="2431"></a>	public static int <code><b>parseInt</b></code>(String s)<br>
		throws NumberFormatException;
<a name="2368"></a>	public static int <code><b>parseInt</b></code>(String s, int radix)<br>
		throws NumberFormatException;
<a name="2371"></a>	public static Integer <code><b>valueOf</b></code>(String s)<br>
		throws NumberFormatException;
<a name="2437"></a>	public static Integer <code><b>valueOf</b></code>(String s, int radix)<br>
		throws NumberFormatException;
<a name="2372"></a>	public static Integer <code><b>getInteger</b></code>(String nm);
<a name="2373"></a>	public static Integer <code><b>getInteger</b></code>(String nm, int val);
<a name="2389"></a>	public static Integer <code><b>getInteger</b></code>(String nm, Integer val);
<a name="2394"></a>}
</pre><p><a name="2390"></a>
<p><strong>20.7.1	</strong> <code>public static final int MIN_VALUE = 0x80000000;</code>
<p>
<a name="3467"></a>
The constant value of this field is <code>-2147483648</code>, the lowest value of type <code>int</code>.
<p><a name="2391"></a>
<p><strong>20.7.2	</strong> <code>public static final int MAX_VALUE = 0x7fffffff;</code>
<p>
<a name="3471"></a>
The constant value of this field is <code>2147483647</code>, the highest value of type <code>int</code>.
<p><a name="1327"></a>
<p><strong>20.7.3	</strong> <code>public Integer(int value)</code>
<p>
<a name="3659"></a>
This constructor initializes a newly created <code>Integer</code> object so that it represents 
the primitive value that is the argument.
<p><a name="1328"></a>
<p><strong>20.7.4	</strong> <code>public Integer(String s) 	throws NumberFormatException</code>
<p>
<a name="3711"></a>
This constructor initializes a newly created <code>Integer</code> object so that it represents 
the integer represented by the string in decimal form. The string is converted to an 
<code>int</code> in exactly the manner used by the <code>parseInt</code> method <a href="20_7.htm#4930">(&#167;20.7.18)</a> for radix 10.
<p><a name="3709"></a>
<p><strong>20.7.5	</strong> <code>public String toString()</code>
<p>
<a name="1346"></a>
The integer value represented by this <code>Integer</code> object is converted to signed decimal representation and returned as a string, exactly as if the integer value were 
given as an argument to the <code>toString</code> method that takes one argument <a href="20_7.htm#1459">(&#167;20.7.12)</a>.
<p><a name="3950"></a>
Overrides the <code>toString</code> method of <code>Object</code> <a href="20_1.htm#1152">(&#167;20.1.2)</a>.<p>
<a name="3797"></a>
<p><strong>20.7.6	</strong> <code>public boolean equals(Object obj)</code>
<p>
<a name="4624"></a>
The result is <code>true</code> if and only if the argument is not <code>null</code> and is an <code>Integer</code> 
object that represents the same <code>int</code> value as this <code>Integer</code> object.
<p><a name="4002"></a>
Overrides the <code>equals</code> method of <code>Object</code> <a href="20_1.htm#14865">(&#167;20.1.3)</a>.<p>
<a name="4207"></a>
<p><strong>20.7.7	</strong> <code>public int hashCode()</code>
<p>
<a name="4678"></a>
The result is the primitive <code>int</code> value represented by this <code>Integer</code> object.
<p><a name="4211"></a>
Overrides the <code>hashCode</code> method of <code>Object</code> <a href="20_1.htm#13784">(&#167;20.1.4)</a>.<p>
<a name="4213"></a>
<p><strong>20.7.8	</strong> <code>public int intValue()</code>
<p>
<a name="4429"></a>
The <code>int</code> value represented by this <code>Integer</code> object is returned.
<p><a name="4234"></a>
Overrides the <code>intValue</code> method of <code>Number</code> <a href="20_6.htm#3376">(&#167;20.6.1)</a>.<p>
<a name="1330"></a>
<p><strong>20.7.9	</strong> <code>public long longValue()</code>
<p>
<a name="4431"></a>
The <code>int</code> value represented by this <code>Integer</code> object is converted <a href="5_1_2.htm#25222">(&#167;5.1.2)</a> to type 
<code>long</code> and the result of the conversion is returned.
<p><a name="4426"></a>
Overrides the <code>longValue</code> method of <code>Number</code> <a href="20_6.htm#3434">(&#167;20.6.2)</a>.<p>
<a name="1331"></a>
<p><strong>20.7.10	</strong> <code>public float floatValue()</code>
<p>
<a name="4461"></a>
The <code>int</code> value represented by this <code>Integer</code> object is converted <a href="5_1_2.htm#25222">(&#167;5.1.2)</a> to type 
<code>float</code> and the result of the conversion is returned.
<p><a name="4417"></a>
Overrides the <code>floatValue</code> method of <code>Number</code> <a href="20_6.htm#3384">(&#167;20.6.3)</a>.<p>
<a name="1332"></a>
<p><strong>20.7.11	</strong> <code>public double doubleValue()</code>
<p>
<a name="4468"></a>
The <code>int</code> value represented by this <code>Integer</code> object is converted <a href="5_1_2.htm#25222">(&#167;5.1.2)</a> to type 
<code>double</code> and the result of the conversion is returned.
<p><a name="4408"></a>
Overrides the <code>doubleValue</code> method of <code>Number</code> <a href="20_6.htm#3412">(&#167;20.6.4)</a>.<p>
<a name="1459"></a>
<p><strong>20.7.12	</strong> <code>public static String toString(int i)</code>
<p>
<a name="3806"></a>
The argument is converted to signed decimal representation and returned as a 
string, exactly as if the argument and the radix <code>10</code> were given as arguments to the 
<code>toString</code> method that takes two arguments <a href="20_7.htm#1460">(&#167;20.7.13)</a>.
<p><a name="1460"></a>
<p><strong>20.7.13	</strong> <code>public static String toString(int i, int radix)</code>
<p>
<a name="3824"></a>
The first argument is converted to a signed representation in the radix specified by 
the second argument; this representation is returned as a string.
<p><a name="24639"></a>
If the <code>radix</code> is smaller than <code>Character.MIN_RADIX</code> <a href="20_5.htm#1300">(&#167;20.5.3)</a> or larger than <code>Character.MAX_RADIX</code> <a href="20_5.htm#1311">(&#167;20.5.4)</a>, then the value <code>10</code> is used instead.<p>
<a name="3838"></a>
If the first argument is negative, the first character of the result will be the character <code>'-'</code> (<code>'\u002d'</code>). If the first argument is not negative, no sign character appears in the result.<p>
<a name="3891"></a>
The remaining characters of the result represent the magnitude of the first argument. If the magnitude is zero, it is represented by a single zero character <code>'0'</code> (<code>'\u0030'</code>); otherwise, the first character of the representation of the magnitude will not be the zero character.The following ASCII characters are used as digits:<p>
<pre><a name="3892"></a><code>0123456789abcdefghijklmnopqrstuvwxyz
</code></pre><p><a name="3893"></a>
These are <code>'\u0030'</code> through <code>'\u0039'</code> and <code>'\u0061'</code> through <code>'\u007a'</code>. If the 
<code>radix</code> is <i>N</i>, then the first <i>N</i> of these characters are used as radix-<i>N</i> digits in the 
order shown. Thus, the digits for hexadecimal (radix 16) are <code>0123456789abcdef</code>. 
If uppercase letters are desired, the <code>toUpperCase</code> method <a href="20_12.htm#14011">(&#167;20.12.36)</a> of class 
<code>String</code> may be called on the result:
<p><pre><a name="3897"></a>Integer.toString(n, 16).toUpperCase()
</pre><p><a name="7332"></a>
<p><strong>20.7.14	</strong> <code>public static String toHexString(int i)</code>
<p>
<a name="7333"></a>
The argument is converted to an unsigned representation in hexadecimal radix 
(base 16); this representation is returned as a string.
<p><a name="7334"></a>
The result represents the unsigned magnitude of the argument. This equals the argument plus <img src="laanc2.gif">if the argument is negative; otherwise, it equals the argument.<p>
<a name="7338"></a>
If the unsigned magnitude is zero, it is represented by a single zero character <code>'0'</code> (<code>'\u0030'</code>); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as hexadecimal digits:<p>
<pre><a name="7339"></a><code>0123456789abcdef
</code></pre><p><a name="7340"></a>
These are the characters <code>'\u0030'</code> through <code>'\u0039'</code> and <code>'\u0061'</code> through 
<code>'\u0066'</code>. If uppercase letters are desired, the <code>toUpperCase</code> method <a href="20_12.htm#14011">(&#167;20.12.36)</a> 
of class <code>String</code> may be called on the result:
<p><pre><a name="7344"></a>Long.toHexString(n).toUpperCase()
</pre><p><a name="7345"></a>
<p><strong>20.7.15	</strong> <code>public static String toOctalString(int i)</code>
<p>
<a name="7346"></a>
The argument is converted to an unsigned representation in octal radix (base 8); 
this representation is returned as a string.
<p><a name="24668"></a>
The result represents the unsigned magnitude of the argument. This equals the argument plus <img src="laanc3.gif">if the argument is negative; otherwise, it equals the argument.<p>
<a name="7351"></a>
If the unsigned magnitude is zero, it is represented by a single zero character <code>'0'</code> (<code>'\u0030'</code>); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The octal digits are:<p>
<pre><a name="7352"></a><code>01234567
</code></pre><p><a name="7353"></a>
These are the characters <code>'\u0030'</code> through <code>'\u0037'</code>.
<p><a name="7354"></a>
<p><strong>20.7.16	</strong> <code>public static String toBinaryString(int i)</code>
<p>
<a name="7355"></a>
The argument is converted to an unsigned representation in binary radix (base 2); 
this representation is returned as a string.
<p><a name="24675"></a>
The result represents the unsigned magnitude of the argument. This equals the argument plus <img src="laanc40.gif">if the argument is negative; otherwise, it equals the argument.<p>
<a name="3839"></a>
If the unsigned magnitude is zero, it is represented by a single zero character <code>'0'</code> (<code>'\u0030'</code>); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The characters <code>'0'</code> (<code>'\u0030'</code>) and <code>'1'</code> (<code>'\u0031'</code>) are used as binary digits.<p>
<a name="19810"></a>
<p><strong>20.7.17	</strong> <code>public static int parseInt(String s)<br>	throws NumberFormatException</code>
<p>
<a name="19811"></a>
The argument is interpreted as representing a signed decimal integer. The components of the string must all be decimal digits, except that the first character may be 
<code>'-'</code> (<code>'\u002d'</code>) to indicate a negative value. The resulting integer value is 
returned, exactly as if the argument and the radix <code>10</code> were given as arguments to 
the <code>parseInt</code> method that takes two arguments <a href="20_7.htm#4930">(&#167;20.7.18)</a>.
<p><a name="4930"></a>
<p><strong>20.7.18	</strong> <code>public static int parseInt(String s, int radix)<br>	throws NumberFormatException</code>
<p>
<a name="4947"></a>
The first argument is interpreted as representing a signed integer in the radix specified by the second argument. The components of the string must all be digits of 
the specified radix (as determined by whether <code>Character.digit</code> <a href="20_5.htm#13834">(&#167;20.5.23)</a> 
returns a nonnegative value), except that the first character may be <code>'-'</code> 
(<code>'\u002d'</code>) to indicate a negative value. The resulting integer value is returned.
<p><a name="5009"></a>
An exception of type <code>NumberFormatException</code> is thrown if any of the following situations occurs:<p>
<ul><a name="24728"></a>
<li>The first argument is <code>null</code> or is a string of length zero.
<a name="24739"></a>
<li>The <code>radix</code> is either smaller than <code>Character.MIN_RADIX</code> <a href="20_5.htm#1300">(&#167;20.5.3)</a> or larger than <code>Character.MAX_RADIX</code> <a href="20_5.htm#1311">(&#167;20.5.4)</a>.
<a name="24730"></a>
<li>Any character of the string is not a digit of the specified <code>radix</code>, except that the first character may <code>be </code>a minus sign <code>'-'</code> (<code>'\u002d'</code>) provided that the string is longer than length 1.
<a name="5049"></a>
<li>The integer value represented by the string is not a value of type <code>int</code>.
</ul><p><a name="5103"></a>
Examples:<p>
<pre><a name="5118"></a>
parseInt("0", 10) returns 0
<a name="5122"></a>parseInt("473", 10) returns 473
<a name="5126"></a>parseInt("-0", 10) returns 0
<a name="5130"></a>parseInt("-FF", 16) returns -255
<a name="5134"></a>parseInt("1100110", 2) returns 102
<a name="5180"></a>parseInt("2147483647", 10) returns 2147483647
<a name="5184"></a>parseInt("-2147483648", 10) returns -2147483648
<a name="5176"></a>parseInt("2147483648", 10) throws a NumberFormatException
<a name="5205"></a>parseInt("99", 8) throws a NumberFormatException
<a name="5215"></a>parseInt("Kona", 10) throws a NumberFormatException
<a name="5219"></a>parseInt("Kona", 27) returns 411787
</pre><p><a name="2452"></a>
<p><strong>20.7.19	</strong> <code>public static Integer valueOf(String s)<br>	throws NumberFormatException</code>
<p>
<a name="5053"></a>
The argument is interpreted as representing a signed decimal integer, exactly as if 
the argument were given to the <code>parseInt</code> method that takes one argument 
<a href="20_7.htm#19810">(&#167;20.7.17)</a>. The result is an <code>Integer</code> object that represents the integer value specified by the string.
<p><a name="5070"></a>
In other words, this method returns an <code>Integer</code> object equal to the value of:<p>
<pre><a name="5071"></a>new Integer(Integer.parseInt(s))
</pre><p><a name="14370"></a>
<p><strong>20.7.20	</strong> <code>public static Integer valueOf(String s, int radix)<br>throws NumberFormatException</code>
<p>
<a name="5080"></a>
The first argument is interpreted as representing a signed integer in the radix specified by the second argument, exactly as if the arguments were given to the 
<code>parseInt</code> method that takes two arguments <a href="20_7.htm#4930">(&#167;20.7.18)</a>. The result is an <code>Integer</code> 
object that represents the integer value specified by the string.
<p><a name="5084"></a>
In other words, this method returns an <code>Integer</code> object equal to the value of:<p>
<pre><a name="5085"></a>new Integer(Integer.parseInt(s, radix))
</pre><p><a name="14384"></a>
<p><strong>20.7.21	</strong> <code>public static Integer getInteger(String nm)</code>
<p>
<a name="5322"></a>
The first argument is treated as the name of a system property to be obtained as if 
by the method <code>System.getProperty</code> (&#167;20.18.9)</a>. The string value of this property is then interpreted as an integer value and an <code>Integer</code> object representing this 
value is returned. If there is no property of the specified name, or if the property 
does not have the correct numeric format, then <code>null</code> is returned.
<p><a name="5330"></a>
In other words, this method returns an <code>Integer</code> object equal to the value of:<p>
<pre><a name="5331"></a>getInteger(nm, null)
</pre><p><a name="14385"></a>
<p><strong>20.7.22	</strong> <code>public static Integer getInteger(String nm, int val)</code>
<p>
<a name="5276"></a>
The first argument is treated as the name of a system property to be obtained as if 
by the method <code>System.getProperty</code> (&#167;20.18.9)</a>. The string value of this property is then interpreted as an integer value and an <code>Integer</code> object representing this 
value is returned. If the property does not have the correct numeric format, then an 
<code>Integer</code> object that represents the value of the second argument is returned.
<p><a name="5293"></a>
In other words, this method returns an <code>Integer</code> object equal to the value of:<p>
<pre><a name="5294"></a>getInteger(nm, new Integer(val))
</pre><p><a name="5304"></a>
but in practice it may be implemented in a manner such as:
<p><pre><a name="5308"></a>
Integer result = getInteger(nm, null);
<a name="5305"></a>return (result == null) ? new Integer(val) : result;
</pre><p><a name="5306"></a>
to avoid the unnecessary allocation of an <code>Integer</code> object when the default value is 
not needed.
<p><a name="14386"></a>
<p><strong>20.7.23	</strong> <code>public static Integer getInteger(String nm, Integer val)</code>
<p>
<a name="5227"></a>
The first argument is treated as the name of a system property to be obtained as if 
by the method <code>System.getProperty</code> (&#167;20.18.9)</a>. The string value of this property is then interpreted as an integer value and an <code>Integer</code> object representing this 
value is returned.
<p><ul><a name="5237"></a>
<li>If the property value begins with the two ASCII characters <code>0x</code> or the ASCII character <code>#</code>, not followed by a minus sign, then the rest of it is parsed as a hexadecimal integer exactly as for the method <code>Integer.valueOf</code> <a href="20_7.htm#14370">(&#167;20.7.20)</a> with radix <code>16</code>.
<a name="5244"></a>
<li>If the property value begins with the ASCII character <code>0</code> followed by another character, it is parsed as an octal integer exactly as for the method <code>Integer.valueOf</code> <a href="20_7.htm#14370">(&#167;20.7.20)</a> with radix <code>8</code>.
<a name="5251"></a>
<li>Otherwise, the property value is parsed as a decimal integer exactly as for the method <code>Integer.valueOf</code> <a href="20_7.htm#14370">(&#167;20.7.20)</a> with radix <code>10</code>.
</ul><p><a name="5268"></a>
The second argument serves as a default value. If there is no property of the specified name, or if the property does not have the correct numeric format, then the second argument is returned.<p>


</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>22.15 The Class java.io.OutputStream</title>
<META NAME=MS-HAID CONTENT="22_15">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>22.15	 The Class java.io.OutputStream</h1>
<a name="29399"></a>
<p>
<a name="33840"></a>
An output stream accepts output bytes and sends them to some sink.
<p><pre><a name="29400"></a>public abstract class <code><b>OutputStream</b></code> {
<a name="29401"></a>	public abstract void <code><b>write</b></code>(int b) throws IOException;
<a name="29402"></a>	public void <code><b>write</b></code>(byte[] b)
<a name="29403"></a>		throws IOException, NullPointerException;
<a name="29404"></a>	public void <code><b>write</b></code>(byte[] b, int off, int len)
<a name="29405"></a>		throws IOException, NullPointerException,
<a name="29406"></a>			IndexOutOfBoundsException;
<a name="29407"></a>	public void <code><b>flush</b></code>() throws IOException;
<a name="29408"></a>	public void <code><b>close</b></code>() throws IOException;
<a name="29409"></a>}
</pre><p><a name="29411"></a>
<p><strong>22.15.1	</strong> <code>public abstract void write(int b) throws IOException</code>
<p>
<a name="29412"></a>
The general contract for <code>write</code> is that one byte is written to the output stream. The 
byte to be written is the eight low-order bits of the argument <code>b</code>. The 24 high-order 
bits of <code>b</code> are ignored.
<p><a name="29413"></a>
If the byte cannot be written for any reason, an <code>IOException</code> is thrown. In particular, an <code>IOException</code> may be thrown if the output stream has been closed <a href="22_15.htm#29445">(&#167;22.15.5)</a>.<p>
<a name="29419"></a>
<p><strong>22.15.2	</strong> <code>public void write(byte[] b)<br>throws IOException, NullPointerException</code>
<p>
<a name="29420"></a>
The general contract for <code>write(b)</code> is that it should have exactly the same effect as 
the call <code>write(b,</code> <code>0,</code> <code>b.length)</code> <a href="22_15.htm#29426">(&#167;22.15.3)</a>.
<p><a name="29424"></a>
The <code>write(b)</code> method for class <code>OutputStream</code> in fact makes such a call.<p>
<a name="29426"></a>
<p><strong>22.15.3	</strong> <code>public void write(byte[] b, int off, int len)<br>throws IOException, NullPointerException,  &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="29427"></a>
The general contract for <code>write(b, off, len)</code> is that some of the bytes in the 
array <code>b</code> are written to the output stream as if one at a time, in order; element 
<code>b[off]</code> is the first byte written and <code>b[off+len-1]</code> is the last byte written by this 
operation.
<p><a name="29428"></a>
If <code>b</code> is <code>null</code>, a <code>NullPointerException</code> is thrown.<p>
<a name="29429"></a>
If <code>off</code> is negative, or <code>len</code> is negative, or <code>off+len</code> is greater than the length of the array <code>b</code>, then an IndexOutOfBoundsException is thrown.<p>
<a name="29430"></a>
If the byte cannot be written for any reason, an <code>IOException</code> is thrown. In particular, an <code>IOException</code> is thrown if the output stream has been closed <a href="22_15.htm#29445">(&#167;22.15.5)</a>.<p>
<a name="29434"></a>
The <code>write(b, off,</code> <code>len)</code> method for class <code>OutputStream</code> simply calls the method <code>write</code> <a href="22_15.htm#29411">(&#167;22.15.1)</a> repeatedly, once for each byte in <code>b</code> to be written.<p>
<a name="29440"></a>
<p><strong>22.15.4	</strong> <code>public void flush() throws IOException</code>
<p>
<a name="29441"></a>
The general contract of <code>flush</code> is that calling it is an indication that, if any bytes 
previously written have been buffered by the implementation of the output stream, 
such bytes should immediately be written to their intended destination.
<p><a name="29442"></a>
The <code>flush</code> method for class <code>OutputStream</code> does nothing and simply returns.<p>
<a name="29445"></a>
<p><strong>22.15.5	</strong> <code>public void close() throws IOException</code>
<p>
<a name="29446"></a>
The general contract of <code>close</code> is that it closes the output stream. A closed stream 
cannot perform output operations and cannot be reopened.
<p><a name="29447"></a>
The <code>close</code> method for class <code>OutputStream</code> does nothing and simply returns.<p>


</body></html>

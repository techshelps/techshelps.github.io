</Font></body></html>
<html>
<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>21. The Package java.util</title>
<META NAME=MS-HAID CONTENT="chap21">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
</head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
 
<hr><br>
 
<a name="23983"></a>
<p><strong>
CHAPTER
 21 </strong></p>

<h1> The Package java.util</h1>
<a name="23984"></a>
<p>
<a name="23985"></a>
The <code>java.util</code> package contains various utility classes and interfaces.
<p><a name="22947"></a>
Notable among these utilities is the <code>Enumeration</code> interface. An object that implements this interface will generate a series of items, delivering them on demand, one by one. Container classes such as <code>Dictionary</code> and <code>Vector</code> provide one or more methods that return an <code>Enumeration</code>.<p>
<a name="22949"></a>
A <code>BitSet</code> contains an indexed collection of bits that may be used to represent a set of nonnegative integers.<p>
<a name="22953"></a>
The class <code>Date</code> provides a convenient way to represent and manipulate time and date information. Dates may be constructed from a year, month, day of month, hour, minute, and second, and those six components, as well as the day of the week, may be extracted from a date. Time zones and daylight saving time are properly accounted for.<p>
<a name="22960"></a>
The <code>abstract</code> class <code>Dictionary</code> represents a collection of key-value pairs and allows a value to be fetched given the key. The class <code>Hashtable</code> is one concrete implementation of <code>Dictionary</code>. The class <code>Properties</code> extends <code>Hashtable</code> by allowing one table to provide default values for another and by providing standard means for reading entries from files and writing entries to files.<p>
<a name="22965"></a>
The class <code>Observable</code> provides a mechanism for notifying other objects, called "observers," whenever an <code>Observable</code> object is changed. An observer object may be any object that implements the <code>Observer</code> interface. (This notification mechanism is distinct from that provided by the <code>wait</code> and <code>notify</code> methods of class <code>Object</code> <a href="20_1.htm#14533">(&#167;20.1)</a> and is not connected with the thread scheduling mechanism.)<p>
<a name="22966"></a>
The class <code>Random</code> provides an extensive set of methods for pseudorandomly generating numeric values of various primitive types and with various distributions. Each instance of class <code>Random</code> is an independent pseudorandom generator.<p>
<a name="22987"></a>
A <code>StringTokenizer</code> provides an easy way to divide strings into tokens. The set of characters that delimit tokens is programmable. The tokenizing method is much simpler than the one used by the class <code>java.io.StreamTokenizer</code>. For example, a <code>StringTokenizer</code> does not distinguish among identifiers, numbers, and quoted strings; moreover, it does not recognize and skip comments.<p>
<a name="22971"></a>
The classes <code>Vector</code> and <code>Stack</code> are simple container classes that provide extensions to the capabilities of Java arrays. A <code>Vector</code>, unlike a Java array, can change its size, and many convenient methods are provided for adding, removing, and searching for items. A <code>Stack</code> is a <code>Vector</code> with additional operations such as <code>push</code> and <code>pop</code>.<p>
<a name="22937"></a>
The hierarchy of classes defined in package <code>java.util</code> is as follows. (Classes whose names are shown here in <code><b>boldface</b></code> are in package <code>java.util</code>; the others are in package <code>java.lang</code> and are shown here to clarify subclass relationships.)<p>

<pre><a name="23291"></a>Object	<a href="20_1.htm#14533">&#167;20.1</a>
<a name="22927"></a>	interface <code><b>Enumeration	<a href="21_1.htm#23147">&#167;21.1</a>
</b></code><a name="22870"></a>	<code><b>BitSet	<a href="21_2.htm#7404">&#167;21.2</a>
</b></code><a name="22871"></a>	<code><b>Date	<a href="21_3.htm#7433">&#167;21.3</a>
</b></code><a name="22872"></a>	<code><b>Dictionary	<a href="21_4.htm#7498">&#167;21.4</a>
</b></code><a name="22896"></a>		<code><b>Hashtable	<a href="21_5.htm#23193">&#167;21.5</a>
</b></code><a name="22899"></a>			<code><b>Properties	<a href="21_6.htm#23061">&#167;21.6</a>
</b></code><a name="22877"></a>	<code><b>Observable	<a href="21_7.htm#7569">&#167;21.7</a>
</b></code><a name="24801"></a>	interface <code><b>Observer	<a href="21_8.htm#7590">&#167;21.8</a>
</b></code><a name="22881"></a>	<code><b>Random	<a href="21_9.htm#7616">&#167;21.9</a>
</b></code><a name="22933"></a>	<code><b>StringTokenizer	<a href="21_10.htm#7648">&#167;21.10</a>
</b></code><a name="22882"></a>	<code><b>Vector	<a href="21_11.htm#7669">&#167;21.11</a>
</b></code><a name="22921"></a>		<code><b>Stack	<a href="21_12.htm#24949">&#167;21.12</a>
</b></code><a name="23296"></a>	Throwable<code><b>	</b></code><a href="20_22.htm#14470">&#167;20.22</a>
<a name="23297"></a>		Exception
<a name="23298"></a>			RuntimeException
<a name="22906"></a>				<code><b>EmptyStackException	<a href="21_13.htm#26490">&#167;21.13</a>
</b></code><a name="22913"></a>				<code><b>NoSuchElementException	<a href="21_14.htm#23170">&#167;21.14</a>
</b></code></pre><p>

</Font></body></html>

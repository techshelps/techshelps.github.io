<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>14.18.2 Execution of try-catch-finally</title>
<META NAME=MS-HAID CONTENT="14_18_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>14.18.2	 Execution of try-catch-finally</h3>
<a name="236653"></a>
<p>
<a name="236320"></a>
<p><i>After the great captains and engineers have accomplish'd their work,<br>
After the noble inventors&#151;after the scientists, the chemist,<br>
the geologist, ethnologist,<br>
Finally shall come the Poet . . .</i><br>
<a name="238489"></a>
&#151;Walt Whitman, <i>Passage to India</i> (1870)</p>
<a name="79326"></a>
<p>A <code>try</code> statement with a <code>finally</code> block is executed by first executing the <code>try</code> 
block. Then there is a choice:
<p><ul><a name="79327"></a>
<li>If execution of the <code>try</code> block completes normally, then the <code>finally</code> block is executed, and then there is a choice:
<ul>
<a name="160341"></a>
<li>If the <code>finally</code> block completes normally, then the <code>try</code> statement completes normally.
<a name="160342"></a>
<li>If the <code>finally</code> block completes abruptly for reason <i>S</i>, then the <code>try</code> statement completes abruptly for reason <i>S</i><i></i>.
</ul>
<a name="79328"></a>
<li>If execution of the <code>try</code> block completes abruptly because of a <code>throw</code> of a value <i>V</i>, then there is a choice:
<ul>
<a name="79329"></a>
<li>If the run-time type of <i>V</i><i></i> is assignable to the parameter of any <code>catch</code> clause of the <code>try</code> statement, then the first (leftmost) such <code>catch</code> clause is selected. The value <i>V</i><i></i> is assigned to the parameter of the selected <code>catch</code> clause, and the <i>Block</i> of that <code>catch</code> clause is executed. Then there is a choice:
<ul>
<a name="79330"></a>
<li>If the <code>catch</code> block completes normally, then the <code>finally</code> block is executed. Then there is a choice:
<ul>
<a name="160348"></a>
<li>If the <code>finally</code> block completes normally, then the <code>try</code> statement completes normally.
<a name="160349"></a>
<li>If the <code>finally</code> block completes abruptly for any reason, then the <code>try</code> statement completes abruptly for the same reason.
</ul>
<a name="79331"></a>
<li>If the <code>catch</code> block completes abruptly for reason <i>R</i><i></i>, then the <code>finally</code> block is executed. Then there is a choice:
<ul>
<a name="79332"></a>
<li>If the <code>finally</code> block completes normally, then the <code>try</code> statement completes abruptly for reason <i>R</i><i></i>.
<a name="79333"></a>
<li>If the <code>finally</code> block completes abruptly for reason <i>S</i>, then the <code>try</code> statement completes abruptly for reason <i>S</i><i></i> (and reason <i>R</i><i></i> is discarded).
</ul>
</ul>
<a name="79334"></a>
<li>If the run-time type of <i>V</i><i></i> is not assignable to the parameter of any <code>catch</code> clause of the <code>try</code> statement, then the <code>finally</code> block is executed. Then there is a choice:
<ul>
<a name="79335"></a>
<li>If the <code>finally</code> block completes normally, then the <code>try</code> statement completes abruptly because of a <code>throw</code> of the value <i>V</i>.
<a name="79336"></a>
<li>If the <code>finally</code> block completes abruptly for reason <i>S</i>, then the <code>try</code> statement completes abruptly for reason <i>S</i><i></i> (and the <code>throw</code> of value <i>V</i><i></i> is discarded and forgotten).
</ul>
</ul>
<a name="79337"></a>
<li>If execution of the <code>try</code> block completes abruptly for any other reason <i>R</i><i></i>, then the <code>finally</code> block is executed. Then there is a choice:
<ul>
<a name="79338"></a>
<li>If the <code>finally</code> block completes normally, then the <code>try</code> statement completes abruptly for reason <i>R</i><i></i>.
<a name="79339"></a>
<li>If the <code>finally</code> block completes abruptly for reason <i>S</i>, then the <code>try</code> statement completes abruptly for reason <i>S</i><i></i> (and reason <i>R</i><i></i> is discarded).
</ul>
</ul><p><a name="18069"></a>
The example:
<p><pre><a name="236658"></a>class BlewIt extends Exception {
<a name="236659"></a>	BlewIt() { }
<a name="236660"></a>	BlewIt(String s) { super(s); }
<a name="236661"></a>}
</pre><p><pre><a name="236662"></a>
class Test {
<a name="236663"></a>
	static void blowUp() throws BlewIt {<br>
		throw new NullPointerException();<br>
	}
<a name="236664"></a>
	public static void main(String[] args) {
<a name="236665"></a>		try {
<a name="236666"></a>			blowUp();
<a name="236669"></a>		} catch (BlewIt b) {
<a name="236670"></a>			System.out.println("BlewIt");
<a name="236671"></a>		} finally {
<a name="236685"></a>			System.out.println("Uncaught Exception");
<a name="236686"></a>		}
<a name="236672"></a>	}
<br><a name="236673"></a>}
</pre><p><a name="18070"></a>
produces the output:
<p><pre><a name="236697"></a>
Uncaught Exception
<a name="236698"></a>java.lang.NullPointerException
<a name="236699"></a>	at Test.blowUp(Test.java:7)
<a name="236700"></a>	at Test.main(Test.java:11)
</pre><p><a name="236703"></a>
The <code>NullPointerException</code> (which is a kind of <code>RuntimeException</code>) that is 
thrown by method <code>blowUp</code> is not caught by the <code>try</code> statement in <code>main</code>, because a 
<code>NullPointerException</code> is not assignable to a variable of type <code>BlewIt</code>. This 
causes the <code>finally</code> clause to execute, after which the thread executing <code>main</code>, 
which is the only thread of the test program, terminates because of an uncaught 
exception <a href="20_21.htm#2901">(&#167;20.21.31)</a>, which results in printing the exception name and a simple 
backtrace.
<p>

</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>20.10 The Class java.lang.Double</title>
<META NAME=MS-HAID CONTENT="20_10">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>20.10	 The Class java.lang.Double</h1>
<a name="14390"></a>
<p>
<pre><a name="14389"></a>public final class <code><b>Double</b></code> extends Number {
<a name="3591"></a>	public static final double <code><b>MIN_VALUE</b></code> =<br>
			5e-324;
<a name="3592"></a>	public static final double <code><b>MAX_VALUE</b></code> =
<a name="31096"></a>		 &#32; &#32; &#32;1.7976931348623157e+308;
<a name="2521"></a>	public static final double <code><b>NEGATIVE_INFINITY</b></code> = -1.0/0.0;
<a name="3585"></a>	public static final double <code><b>POSITIVE_INFINITY</b></code> = 1.0/0.0;
<a name="2522"></a>	public static final double <code><b>NaN</b></code> = 0.0/0.0;
<a name="2525"></a>	public <code><b>Double</b></code>(double value);
<a name="2526"></a>	public <code><b>Double</b></code>(String s)<br>
		throws NumberFormatException;
<a name="2527"></a>	public String <code><b>toString</b></code>();
<a name="2528"></a>	public boolean <code><b>equals</b></code>(Object obj);
<a name="2529"></a>	public int <code><b>hashCode</b></code>();
<a name="2530"></a>	public int <code><b>intValue</b></code>();
<a name="2531"></a>	public long <code><b>longValue</b></code>();
<a name="2532"></a>	public float <code><b>floatValue</b></code>();
<a name="2533"></a>	public double <code><b>doubleValue</b></code>();
<a name="5907"></a>	public static String <code><b>toString</b></code>(double d);
<a name="2534"></a>	public static Double <code><b>valueOf</b></code>(String s)<br>
		throws NullPointerException, NumberFormatException;
<a name="2535"></a>	public boolean <code><b>isNaN</b></code>();
<a name="2536"></a>	public static boolean <code><b>isNaN</b></code>(double v);
<a name="2537"></a>	public boolean <code><b>isInfinite</b></code>();
<a name="2538"></a>	public static boolean <code><b>isInfinite</b></code>(double v);
<a name="2547"></a>	public static long <code><b>doubleToLongBits</b></code>(double value);
<a name="2548"></a>	public static double <code><b>longBitsToDouble</b></code>(long bits);
<a name="2555"></a>}
</pre><p><a name="3571"></a>
<p><strong>20.10.1	</strong> <code>public static final double MIN_VALUE = 5e-324;</code>
<p>
<a name="3572"></a>
The constant value of this field is the smallest positive nonzero value of type 
<code>double</code>. &#32;It is equal to the value returned by <code>Double.longBitsToDouble(0x1L)</code>.
<p><a name="3573"></a>
<p><strong>20.10.2	</strong> <code>public static final double MAX_VALUE =  &#32; &#32; &#32;1.7976931348623157e+308;</code>
<p>
<a name="31109"></a>
The constant value of this field is the largest positive finite value of type <code>double</code>. 
It is equal to the returned by:
<p><pre><a name="31114"></a><code>Double.longBitsToDouble(0x7fefffffffffffffL)
</code></pre><p><a name="31110"></a>
<p><strong>20.10.3	</strong> <code>public static final double NEGATIVE_INFINITY = -1.0/0.0;</code>
<p>
<a name="3623"></a>
The constant value of this field is the negative infinity of type <code>double</code>. It is equal 
to the value returned by <code>Double.longBitsToDouble(0xfff0000000000000L)</code>.
<p><a name="3579"></a>
<p><strong>20.10.4	</strong> <code>public static final double POSITIVE_INFINITY = 1.0/0.0;</code>
<p>
<a name="3633"></a>
The constant value of this field is the positive infinity of type <code>double</code>. It is equal to 
the value returned by <code>Double.longBitsToDouble(0x7ff0000000000000L)</code>.
<p><a name="13844"></a>
<p><strong>20.10.5	</strong> <code>public static final double NaN = 0.0/0.0;</code>
<p>
<a name="3637"></a>
The constant value of this field is the Not-a-Number of type <code>double</code>. It is equal to 
the value returned by <code>Double.longBitsToDouble(0x7ff8000000000000L)</code>.
<p><a name="1496"></a>
<p><strong>20.10.6	</strong> <code>public Double(double value)</code>
<p>
<a name="3696"></a>
This constructor initializes a newly created <code>Double</code> object so that it represents the 
primitive value that is the argument.
<p><a name="1497"></a>
<p><strong>20.10.7	</strong> <code>public Double(String s)<br>throws NumberFormatException</code>
<p>
<a name="3779"></a>
This constructor initializes a newly created <code>Double</code> object so that it represents the 
floating-point value of type <code>double</code> represented by the string. The string is converted to a <code>double</code> value in exactly the manner used by the <code>valueOf</code> method 
<a href="20_9.htm#7256">(&#167;20.9.17)</a>.
<p><a name="1517"></a>
<p><strong>20.10.8	</strong> <code>public String toString()</code>
<p>
<a name="7320"></a>
The primitive <code>double</code> value represented by this <code>Double</code> object is converted to a 
string exactly as if by the method <code>toString</code> of one argument <a href="20_10.htm#5899">(&#167;20.10.15)</a>.
<p><a name="3971"></a>
Overrides the <code>toString</code> method of <code>Object</code> <a href="20_1.htm#1152">(&#167;20.1.2)</a>.<p>
<a name="1518"></a>
<p><strong>20.10.9	</strong> <code>public boolean equals(Object obj)</code>
<p>
<a name="4658"></a>
The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>Double</code> object 
that represents the same <code>double</code> value as this <code>Double</code> object. For this purpose, 
two <code>double</code> values are considered to be the same if and only if the method 
<code>doubleToLongBits</code> &#32;<a href="20_10.htm#13863">(&#167;20.10.21)</a> returns the same <code>long</code> value when applied to 
each. Note that even though the <code>==</code> operator returns <code>false</code> if both operands are 
NaN, this <code>equals</code> method will return <code>true</code> if this <code>Double</code> object and the argument 
are both <code>Double</code> objects that represent NaN. On the other hand, even though the 
<code>==</code> operator returns <code>true</code> if one operand is positive zero and the other is negative 
zero, this <code>equals</code> method will return <code>false</code> if this <code>Double</code> object and the argument represent zeroes of different sign. This allows hashtables to operate properly.
<p><a name="3978"></a>
Overrides the <code>equals</code> method of <code>Object</code> <a href="20_1.htm#14865">(&#167;20.1.3)</a>.<p>
<a name="1519"></a>
<p><strong>20.10.10	</strong> <code>public int hashCode()</code>
<p>
<a name="4745"></a>
The result is the exclusive OR of the two halves of the long integer bit representation, exactly as produced by the method <code>doubleToLongBits</code> <a href="20_10.htm#13863">(&#167;20.10.21)</a>, of the 
primitive <code>double</code> value represented by this <code>Double</code> object. That is, the hashcode is 
the value of the expression:
<p><pre><a name="4746"></a>(int)(v^(v&gt;&gt;&gt;32))
</pre><p><a name="4767"></a>
where <code>v</code> is defined by:
<p><pre><a name="4768"></a>long v = Double.doubleToLongBits(this.longValue());
</pre><p><a name="4061"></a>
Overrides the <code>hashCode</code> method of <code>Object</code> <a href="20_1.htm#13784">(&#167;20.1.4)</a>.<p>
<a name="1520"></a>
<p><strong>20.10.11	</strong> <code>public int intValue()</code>
<p>
<a name="4588"></a>
The <code>double</code> value represented by this <code>Double</code> object is converted <a href="5_1_3.htm#175672">(&#167;5.1.3)</a> to type 
<code>int</code> and the result of the conversion is returned.
<p><a name="4306"></a>
Overrides the <code>intValue</code> method of <code>Number</code> <a href="20_6.htm#3376">(&#167;20.6.1)</a>.<p>
<a name="1521"></a>
<p><strong>20.10.12	</strong> <code>public long longValue()</code>
<p>
<a name="4599"></a>
The <code>double</code> value represented by this <code>Double</code> object is converted <a href="5_1_3.htm#175672">(&#167;5.1.3)</a> to type 
<code>long</code> and the result of the conversion is returned.
<p><a name="4336"></a>
Overrides the <code>longValue</code> method of <code>Number</code> <a href="20_6.htm#3434">(&#167;20.6.2)</a>.<p>
<a name="1522"></a>
<p><strong>20.10.13	</strong> <code>public float floatValue()</code>
<p>
<a name="4609"></a>
The <code>double</code> value represented by this <code>Double</code> object is converted <a href="5_1_3.htm#175672">(&#167;5.1.3)</a> to type 
<code>float</code> and the result of the conversion is returned.
<p><a name="4345"></a>
Overrides the <code>floatValue</code> method of <code>Number</code> <a href="20_6.htm#3384">(&#167;20.6.3)</a>.<p>
<a name="1523"></a>
<p><strong>20.10.14	</strong> <code>public double doubleValue()</code>
<p>
<a name="4495"></a>
The <code>double</code> value represented by this <code>Double</code> object is returned.
<p><a name="4327"></a>
Overrides the <code>doubleValue</code> method of <code>Number</code> <a href="20_6.htm#3412">(&#167;20.6.4)</a>.<p>
<a name="5899"></a>
<p><strong>20.10.15	</strong> <code>public static String toString(double d)</code>
<p>
<a name="24962"></a>
The argument is converted to a readable string format as follows. All characters 
mentioned below are ASCII characters.
<p><ul><a name="7264"></a>
<li>If the argument is NaN, the result is the string <code>"NaN"</code>.
<a name="7265"></a>
<li>Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. If the sign is negative, the first character of the result is <code>'-'</code> (<code>'\u002d'</code>); if the sign is positive, no sign character appears in the result. As for the magnitude <i>m</i>:
<ul>
<a name="7266"></a>
<li>If <i>m</i> is infinity, it is represented by the characters <code>"Infinity"</code>; thus, positive infinity produces the result <code>"Infinity"</code> and negative infinity produces the result <code>"-Infinity"</code>.
<a name="7267"></a>
<li>If <i>m</i> is zero, it is represented by the characters <code>"0.0"</code>; thus, negative zero produces the result <code>"-0.0"</code> and positive zero produces the result <code>"0.0"</code>.
<a name="7274"></a>
<li>If <i>m</i> is greater than or equal to <img src="laanc17.gif"> but less than <img src="laanc18.gif">, then it is represented as the integer part of <i>m</i>, in decimal form with no leading zeroes, followed by <code>'.'</code> (<code>\u002E</code>), followed by one or more decimal digits representing the fractional part of <i>m</i>.
<a name="7281"></a>
<li>If <i>m</i> is less than <img src="laanc19.gif"> or not less than <img src="laanc20.gif">, then it is represented in so-called "computerized scientific notation." Let <i>n</i> be the unique integer such that <img src="laanc21.gif">; then let <i>a</i> be the mathematically exact quotient of <i>m</i> and <img src="laanc22.gif"> so that <img src="laanc23.gif">. The magnitude is then represented as the integer part of <i>a</i>, as a single decimal digit, followed by <code>'.'</code> (<code>\u002E</code>), followed by decimal digits representing the fractional part of <i>a</i>, followed by the letter <code>'E'</code> (<code>\u0045</code>), followed by a representation of <i>n</i> as a decimal integer, as produced by the method <code>Integer.toString</code> of one argument <a href="20_7.htm#1459">(&#167;20.7.12)</a>.
</ul>
</ul><p><a name="7297"></a>
How many digits must be printed for the fractional part of <i>m</i> or <i>a</i>? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type <code>double</code>. That is, suppose that <i>x</i> is the exact mathematical value represented by the decimal representation produced by this method for a finite nonzero argument <i>d</i>. Then <i>d </i>must be the <code>double</code> value nearest to <i>x</i>; or if two <code>double</code> values are equally close to <i>x</i>, then <i>d </i>must be one of them and the least significant bit of the significand of <i>d </i>must be <code>0</code>.<p>
<a name="28580"></a>
[This specification for the method <code>toString</code> is scheduled for introduction in Java version 1.1. In previous versions of Java, this method produces <code>Inf</code> instead of <code>Infinity</code> for infinite values. Also, it rendered finite values in the same form as the <code>%g</code> format of the <code>printf</code> function in the C programming language, which can lose information because it produces at most six digits after the decimal point.]<p>
<a name="1541"></a>
<p><strong>20.10.16	</strong> <code>public static Double valueOf(String s)<br>throws NullPointerException, NumberFormatException</code>
<p>
<a name="28707"></a>
The string <code>s</code> is interpreted as the representation of a floating-point value and a 
<code>Double</code> object representing that value is created and returned.
<p><a name="28708"></a>
If <code>s</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.<p>
<a name="28712"></a>
Leading and trailing whitespace <a href="20_5.htm#13831">(&#167;20.5.19)</a> characters in <code>s</code> are ignored. The rest of <code>s</code> should constitute a <i>FloatValue</i> as described by the lexical syntax rule:<p>
<pre>
<i><i>FloatValue</i>:<br>
<i>	</i>Signopt<i> Digits</i><code> . </code><i>Digits</i>opt<code> </code><i>ExponentPart</i>opt<br>
	Signopt<i> </i><code>. </code><i>Digits</i><code> </code><i>ExponentPart</i>opt
</i></pre><p><a name="28718"></a>
where <i>Sign</i>, <i>Digits</i>, and <i>ExponentPart</i> are as defined in <a href="3_10_2.htm#230798">&#167;3.10.2</a>. If it does not have 
the form of a <i>FloatValue</i>, then a <code>NumberFormatException</code> is thrown. Otherwise, 
it is regarded as representing an exact decimal value in the usual "computerized 
scientific notation"; this exact decimal value is then conceptually converted to an 
"infinitely precise" binary value that is then rounded to type <code>double</code> by the usual 
round-to-nearest rule of IEEE 754 floating-point arithmetic. Finally, a new object 
of class <code>Double</code> is created to represent the <code>double</code> value.
<p><a name="28719"></a>
Note that neither <code>D</code> nor <code>d</code> is permitted to appear in <code>s</code> as a type indicator, as would be permitted in Java source code <a href="3_10_1.htm#48282">(&#167;3.10.1)</a>.<p>
<a name="13852"></a>
<p><strong>20.10.17	</strong> <code>public boolean isNaN()</code>
<p>
<a name="4797"></a>
The result is <code>true</code> if and only if the value represented by this <code>Double</code> object is 
NaN.
<p><a name="1529"></a>
<p><strong>20.10.18	</strong> <code>public static boolean isNaN(double v)</code>
<p>
<a name="4802"></a>
The result is <code>true</code> if and only if the value of the argument is NaN.
<p><a name="13853"></a>
<p><strong>20.10.19	</strong> <code>public boolean isInfinite()</code>
<p>
<a name="4808"></a>
The result is <code>true</code> if and only if the value represented by this <code>Double</code> object is 
positive infinity or negative infinity.
<p><a name="1535"></a>
<p><strong>20.10.20	</strong> <code>public static boolean isInfinite(double v)</code>
<p>
<a name="4814"></a>
The result is <code>true</code> if and only if the value of the argument is positive infinity or 
negative infinity.
<p><a name="13863"></a>
<p><strong>20.10.21	</strong> <code>public static long doubleToLongBits(double value)</code>
<p>
<a name="5855"></a>
The result is a representation of the floating-point argument according to the IEEE 
754 floating-point "double format" bit layout:
<p><ul><a name="5856"></a>
<li>Bit 63 (the bit that is selected by the mask <code>0x8000000000000000L</code>) represents the sign of the floating-point number.
<a name="5857"></a>
<li>Bits 62-52 (the bits that are selected by the mask <code>0x7ff0000000000000L</code>) represent the exponent.
<a name="5858"></a>
<li>Bits 51-0 (the bits that are selected by the mask <code>0x000fffffffffffffL</code>) represent the significand (sometimes called the mantissa) of the floating-point number.
<a name="5859"></a>
<li>If the argument is positive infinity, the result will be <code>0x7ff0000000000000L</code>.
<a name="5860"></a>
<li>If the argument is negative infinity, the result will be <code>0xfff0000000000000L</code>.
<a name="5861"></a>
<li>If the argument is NaN, the result will be <code>0x7ff8000000000000L</code>.
</ul><p><a name="5862"></a>
In all cases, the result is a <code>long</code> integer that, when given to the <code>longBitsToDouble</code> &#32;method <a href="20_10.htm#13864">(&#167;20.10.22)</a>, will produce a floating-point value equal to the argument to <code>doubleToLongBits</code>.<p>
<a name="13864"></a>
<p><strong>20.10.22	</strong> <code>public static double longBitsToDouble(long bits)</code>
<p>
<a name="5869"></a>
The argument is considered to be a representation of a floating-point value according to the IEEE 754 floating-point "double format" bit layout. That floating-point 
value is returned as the result.
<p><ul><a name="5870"></a>
<li>If the argument is <code>0x7f80000000000000L</code>, the result will be positive infinity.
<a name="5871"></a>
<li>If the argument is <code>0xff80000000000000L</code>, the result will be negative infinity.
<a name="5872"></a>
<li>If the argument is any value in the range <code>0x7ff0000000000001L</code> through <code>0x7fffffffffffffffL</code> or in the range <code>0xfff0000000000001L</code> through <code>0xffffffffffffffffL</code>, the result will be NaN. (All IEEE 754 NaN values are, in effect, lumped together by the Java language into a single value called NaN.)
<a name="5873"></a>
<li>In all other cases, let <i>s</i>, <i>e</i>, and <i>m</i> be three values that can be computed from the argument:
</ul><pre><a name="5913"></a>
int s = ((bits &gt;&gt; 63) == 0) ? 1 : -1;
<a name="5930"></a>int e = (int)((bits &gt;&gt; 52) &amp; 0x7ffL);
<a name="5915"></a>long m = (e == 0) ?
<a name="5916"></a>		(bits &amp; 0xfffffffffffffL) &lt;&lt; 1 :
<a name="5879"></a>		(bits &amp; 0xfffffffffffffL) | 0x10000000000000L;
</pre><p><a name="34836"></a>
Then the floating-point result equals the value of the mathematical expression 
<img src="laanc24.gif">.
<p><i>Let beeves and home-bred kine partake<br>
The sweets of Burn-mill meadow;<br>
The swan on still St. Mary's Lake<br>
Float double, swan and shadow!<br>
</i>&#151;William Wordsworth, <i>Yarrow Unvisited</i> (1803)</p>
<p>

</body></html>

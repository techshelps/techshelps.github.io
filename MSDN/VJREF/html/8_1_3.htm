<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>8.1.3 Superclasses and Subclasses</title>
<META NAME=MS-HAID CONTENT="8_1_3">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>8.1.3	 Superclasses and Subclasses</h3>
<a name="21723"></a>
<p>
<a name="29771"></a>
<meta name="MS-HKWD" content="extends">
The optional <code>extends</code> clause in a class declaration specifies the <i>direct superclass</i> 
of the current class. A class is said to be a <i>direct subclass</i> of the class it extends. 
The direct superclass is the class from whose implementation the implementation 
of the current class is derived. The <code>extends</code> clause must not appear in the definition of the class <code>java.lang.Object</code> <a href="20_1.htm#14533">(&#167;20.1)</a>, because it is the primordial class 
and has no direct superclass. If the class declaration for any other class has no 
<code>extends</code> clause, then the class has the class <code>java.lang.Object</code> as its implicit 
direct superclass.
<p><pre>
<i>Super:<br>
	<code>extends </code>ClassType
</i></pre><p><a name="229540"></a>
The following is repeated from <a href="4_3.htm#9317">&#167;4.3</a> to make the presentation here clearer:
<p><pre>
<i>ClassType:<br>
	TypeName
</i></pre><p><a name="29813"></a>
The <i>ClassType</i> must name an accessible <a href="6_6.htm#33916">(&#167;6.6)</a> class type, or a compile-time error occurs. All classes in the current package are accessible. Classes in other packages are accessible if the host system permits access to the package <a href="7_2.htm#37758">(&#167;7.2)</a> and the class is declared <code>public</code>. If the specified <i>ClassType </i>names a class that is <code>final</code> <a href="8_1_2.htm#54727">(&#167;8.1.2.2)</a>, then a compile-time error occurs; <code>final</code> classes are not allowed to have subclasses.<p>
<a name="34088"></a>
In the example:<p>
<pre><br><a name="34089"></a>class Point { int x, y; }
<br><br><a name="34090"></a>final class ColoredPoint extends Point { int color; }
<br><a name="34094"></a>class Colored3DPoint extends ColoredPoint { int z; } // error
</pre><p><a name="29322"></a>
the relationships are as follows:
<p><ul><a name="29323"></a>
<li>The class <code>Point</code> is a direct subclass of <code>java.lang.Object</code><i></i>.
<a name="29324"></a>
<li>The class <code>java.lang.Object</code> is the direct superclass of the class <code>Point</code><i></i>.
<a name="35258"></a>
<li>The class <code>ColoredPoint</code> is a direct subclass of class <code>Point</code><i></i>.
<a name="35261"></a>
<li>The class <code>Point</code> is the direct superclass of class <code>ColoredPoint</code>.
</ul><p><a name="35273"></a>
The declaration of class <code>Colored3dPoint</code> causes a compile-time error because it 
attempts to extend the <code>final</code> class <code>ColoredPoint</code>.
<p><a name="34079"></a>
The <i>subclass </i>relationship is the transitive closure of the direct subclass relationship. A class <i>A</i><i></i> is a subclass of class <i>C</i><i></i> if either of the following is true:<p>
<ul><a name="34080"></a>
<li><i>A</i> is the direct subclass of <i>C</i>.
<a name="34081"></a>
<li>There exists a class <i>B</i><i></i> such that <i>A</i><i></i> is a subclass of <i>B</i><i></i>, and <i>B</i><i></i> is a subclass of <i>C</i><i></i>, applying this definition recursively.
</ul><p><a name="34082"></a>
Class <i>C</i><i></i> is said to be a <i>superclass </i>of class <i>A</i><i></i> whenever <i>A</i><i> </i>is a subclass of <i>C</i><i></i>.
<p><a name="36594"></a>
In the example:<p>
<pre><br><a name="34023"></a>class Point { int x, y; }
<br><br><a name="34039"></a>class ColoredPoint extends Point { int color; }
<br><a name="34040"></a>final class Colored3dPoint extends ColoredPoint { int z; }
</pre><p><a name="35276"></a>
the relationships are as follows:
<p><ul><a name="36602"></a>
<li>The class <code>Point</code> is a superclass of class <code>ColoredPoint</code>.
<a name="36604"></a>
<li>The class <code>Point</code> is a superclass of class <code>Colored3dPoint</code><i></i>.
<a name="36611"></a>
<li>The class <code>ColoredPoint</code> is a subclass of class <code>Point</code>.
<a name="36613"></a>
<li>The class <code>ColoredPoint</code> is a superclass of class <code>Colored3dPoint</code><i></i>.
<a name="36619"></a>
<li>The class <code>Colored3dPoint</code> is a subclass of class <code>ColoredPoint</code>.
<a name="36621"></a>
<li>The class <code>Colored3dPoint</code> is a subclass of class <code>Point</code>.
</ul><p><a name="21739"></a>
A compile-time error occurs if a class is declared to be a subclass of itself. For 
example:
<p><pre><br><a name="34029"></a>class Point extends ColoredPoint { int x, y; }
<br><a name="45856"></a>class ColoredPoint extends Point { int color; }
</pre><p><a name="25374"></a>
causes a compile-time error. If circularly declared classes are detected at run time, 
as classes are loaded <a href="12_2.htm#44459">(&#167;12.2)</a>, then a <code>ClassCircularityError</code> is thrown.
<p>

</Font></body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>12.1 Virtual Machine Start-Up</title>
<META NAME=MS-HAID CONTENT="12_1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>12.1	 Virtual Machine Start-Up</h2>
<a name="44444"></a>
<p>
<a name="44445"></a>
A Java Virtual Machine starts execution by invoking the method <code>main</code> of some 
specified class, passing it a single argument, which is an array of strings. In the 
examples in this specification, this first class is typically called <code>Test</code>.
<p><a name="46661"></a>
The manner in which the initial class is specified to the Java Virtual Machine is beyond the scope of this specification, but it is typical, in host environments that use command lines, for the fully-qualified name of the class to be specified as a command-line argument and for following command-line arguments to be used as strings to be provided as the argument to the method <code>main</code>. For example, in a UNIX implementation, the command line:<p>
<pre><a name="46662"></a>java Test reboot Bob Dot Enzo
</pre><p><a name="46663"></a>
will typically start a Java Virtual Machine by invoking method <code>main</code> of class <code>Test</code> 
(a class in an unnamed package), passing it an array containing the four strings 
<code>"reboot"</code>, <code>"Bob"</code>, <code>"Dot"</code>, and <code>"Enzo"</code>.
<p><a name="46666"></a>
We now outline the steps the virtual machine may take to execute <code>Test</code>, as an example of the loading, linking, and initialization processes that are described further in later sections.<p>


</body></html>

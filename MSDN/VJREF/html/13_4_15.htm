<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>13.4.15 abstract Methods</title>
<META NAME=MS-HAID CONTENT="13_4_15">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>13.4.15	 abstract Methods</h3>
<a name="45214"></a>
<p>
<a name="45215"></a>
Changing a method that is declared <code>abstract</code> to no longer be declared <code>abstract</code> 
does not break compatibility with pre-existing binaries.
<p><a name="45216"></a>
Changing a method that is not declared <code>abstract</code> to be declared <code>abstract</code> will break compatibility with pre-existing binaries that previously invoked the method, causing an <code>AbstractMethodError</code>. If the example program:<p>
<pre><a name="45217"></a>
class Super { void out() { System.out.println("Out"); } }
<a name="45220"></a>
class Test extends Super {
<a name="45221"></a>	public static void main(String[] args) {
<a name="45222"></a>		Test t = new Test();
<a name="45223"></a>		System.out.println("Way ");
<a name="45224"></a>		t.out();
<a name="45225"></a>	}
<a name="45226"></a>}
</pre><p><a name="45227"></a>
is compiled and executed, it produces the output:
<p><pre><a name="45228"></a>
Way
<a name="45229"></a>Out
</pre><p><a name="45230"></a>
Suppose that a new version of class <code>Super</code> is produced:
<p><pre><a name="45231"></a>
abstract class Super {
<a name="45232"></a>	abstract void out();
<a name="45233"></a>}
</pre><p><a name="45234"></a>
If <code>Super</code> is recompiled but not <code>Test</code>, then running the new binary with the existing binary of <code>Test</code> results in a <code>AbstractMethodError</code>, because class <code>Test</code> has no 
implementation of the method <code>out</code>, and is therefore is (or should be) abstract. (An 
early version of Java incorrectly produced the output:
<p><pre><a name="45235"></a>Way
</pre><p><a name="45236"></a>
before encountering an <code>AbstractMethodError</code> while invoking the method <code>out</code>, 
incorrectly allowing the class <code>Test</code> to be prepared even though it has an <code>abstract</code> 
method and is not declared <code>abstract</code>.)
<p>

</body></html>

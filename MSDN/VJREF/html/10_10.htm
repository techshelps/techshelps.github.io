<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>10.10 Array Store Exception</title>
<META NAME=MS-HAID CONTENT="10_10">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>10.10	 Array Store Exception</h2>
<a name="11430"></a>
<p>
<a name="26003"></a>
If an array variable <i>v</i><i></i> has type <i>A</i><i></i><code>[]</code>, where <i>A</i><i></i> is a reference type, then <i>v</i><i></i> can hold a 
reference to an instance of any array type <i>B</i><code>[]</code>, provided <i>B</i><i></i> can be assigned to <i>A</i><i></i>.
<p><a name="53134"></a>
Thus, the example:<p>
<pre><a name="26004"></a>
class Point { int x, y; }
<br><a name="53558"></a>class ColoredPoint extends Point { int color; }
<br></pre><p><pre><a name="53993"></a>
class Test {
<a name="26007"></a>	public static void main(String[] args) {
<a name="26008"></a>		ColoredPoint[] cpa = new ColoredPoint[10];
<a name="26009"></a>		Point[] pa = cpa;
<a name="26010"></a>		System.out.println(pa[1] == null);
<a name="26011"></a>		try {
<a name="26012"></a>			pa[0] = new Point();
<a name="26013"></a>		} catch (ArrayStoreException e) {
<a name="26014"></a>			System.out.println(e);
<a name="26015"></a>		}
<a name="26016"></a>	}
<a name="26017"></a>}
</pre><p><a name="25743"></a>
produces the output:
<p><pre><a name="25746"></a>
true
<a name="25744"></a>java.lang.ArrayStoreException
</pre><p><a name="26018"></a>
Here the variable <code>pa</code> has type <code>Point[]</code> and the variable <code>cpa</code> has as its value a reference to an object of type <code>ColoredPoint[]</code>. A <code>ColoredPoint</code> can be assigned 
to a <code>Point</code>; therefore, the value of <code>cpa</code> can be assigned to <code>pa</code>.
<p><a name="26025"></a>
A reference to this array <code>pa</code>, for example, testing whether <code>pa[1]</code> is <code>null</code>, will not result in a run-time type error. This is because the element of the array of type <code>ColoredPoint[]</code> is a <code>ColoredPoint</code>, and every <code>ColoredPoint</code> can stand in for a <code>Point</code>, since <code>Point</code> is the superclass of <code>ColoredPoint</code>.<p>
<a name="26035"></a>
On the other hand, an assignment to the array <code>pa</code> can result in a run-time error. At compile time, an assignment to an element of <code>pa</code> is checked to make sure that the value assigned is a <code>Point</code>. But since <code>pa</code> holds a reference to an array of <code>ColoredPoint</code>, &#32;the assignment is valid only if the type of the value assigned at run-time is, more specifically, a <code>ColoredPoint</code>.<p>
<a name="26044"></a>
Java checks for such a situation at run-time to ensure that the assignment is valid; if not, an <code>ArrayStoreException</code> is thrown. More formally: an assignment to an element of an array whose type is <i>A</i><code>[]</code>, where <i>A</i> is a reference type, is checked at run-time to ensure that the value assigned can be assigned to the actual element type of the array, where the actual element type may be any reference type that is assignable to <i>A</i>.
<p><i>At length burst in the argent revelry,<br>
With plume, tiara, and all rich array . . .<br>
</i>&#151;John Keats, <i>The Eve of St. Agnes</i> (1819)</p>
<a name="26055"></a>
<i></i><p>


<hr>
<p>
<br>
</font>
</body></html>

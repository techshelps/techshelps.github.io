<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>14.18 The try statement</title>
<META NAME=MS-HAID CONTENT="14_18">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>14.18	 The try statement</h2>
<a name="79311"></a>
<p>
<a name="45782"></a>
<meta name="MS-HKWD" content="try">
<meta name="MS-HKWD" content="catch">
<meta name="MS-HKWD" content="finally">
<p><i>These are the times that try men's souls.</i><br>
<a name="238483"></a>
&#151;Thomas Paine, <i>The American Crisis</i> (1780)</p>
<a name="45780"></a>
<p><i>. . . and they all fell to playing the game of catch as catch can,<br>
till the gunpowder ran out at the heels of their boots.</i><br>
<a name="238484"></a>
&#151;Samuel Foote</p>
<a name="79312"></a>
<p>A <code>try</code> statement executes a block. If a value is thrown and the <code>try</code> statement has 
one or more <code>catch</code> clauses that can catch it, then control will be transferred to the 
first such <code>catch</code> clause. If the <code>try</code> statement has a <code>finally</code> clause, then another 
block of code is executed, no matter whether the <code>try</code> block completes normally or 
abruptly, and no matter whether a <code>catch</code> clause is first given control.
<p><pre>
<i>TryStatement:<br>
<code>	try </code>Block<code> </code>Catches<br>
<code>	try </code>Block<code> </code>Catchesopt<code> </code>Finally
</i>
<i>Catches:<br>
	CatchClause<br>
	Catches<code> </code>CatchClause
</i>
<i>CatchClause:<br>
	<code>catch ( </code>FormalParameter<code> ) </code>Block
</i>
<i>Finally:<br>
<code>	finally </code>Block
</i></pre><p><a name="45818"></a>
The following is repeated from <a href="8_4_1.htm#38698">&#167;8.4.1</a> to make the presentation here clearer:
<p><pre>
<i>FormalParameter:<br>
	Type<code> </code>VariableDeclaratorId
</i></pre><p><a name="237406"></a>
The following is repeated from <a href="8_3.htm#40898">&#167;8.3</a> to make the presentation here clearer:
<p><pre>
<i>VariableDeclaratorId:<br>
	Identifier<br>
	VariableDeclaratorId<code> [ ]
</code></i></pre><p><a name="79317"></a>
The <i>Block</i> immediately after the keyword <code>try</code> is called the <code>try</code> block of the <code>try</code> statement. The <i>Block</i> immediately after the keyword <code>finally</code> is called the <code>finally</code> block of the <code>try</code> statement.<p>
<a name="79318"></a>
A <code>try</code> statement may have <code>catch</code> clauses (also called <i>exception handlers</i>). A &#32;<code>catch</code> clause must have exactly one parameter (which is called an <i>exception parameter</i>); the declared type of the exception parameter must be the class <code>Throwable</code> or a subclass of <code>Throwable</code>, or a compile-time error occurs. The scope of the parameter variable is the <i>Block</i> of the <code>catch</code> clause. An exception parameter must not have the same name as a local variable or parameter in whose scope it is declared, or a compile-time error occurs.<p>
<a name="45876"></a>
The scope of the name of an exception parameter is the <i>Block</i> of the <code>catch</code> clause. The name of the parameter may not be redeclared as a local variable or exception parameter within the <i>Block</i> of the <code>catch</code> clause; that is, hiding the name of an exception parameter is not permitted.<p>
<a name="45880"></a>
Exception parameters cannot be referred to using qualified names <a href="6_6.htm#33916">(&#167;6.6)</a>, only by simple names.<p>
<a name="24142"></a>
Exception handlers are considered in left-to-right order: the earliest possible <code>catch</code> clause accepts the exception, receiving as its actual argument the thrown exception object.<p>
<a name="24143"></a>
A <code>finally</code> clause ensures that the <code>finally</code> block is executed after the <code>try</code> block and any <code>catch</code> block that might be executed, no matter how control leaves the <code>try</code> block or <code>catch</code> block.<p>
<a name="79319"></a>
Handling of the <code>finally</code> block is rather complex, so the two cases of a <code>try</code> statement with and without a <code>finally</code> block are described separately.<p>


</body></html>

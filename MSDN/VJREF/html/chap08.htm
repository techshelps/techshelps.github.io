</Font></body></html>
<html>
<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>8. Classes</title>
<META NAME=MS-HAID CONTENT="chap08">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
</head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"> 
<hr><br>
 
<p><strong>
CHAPTER
 8 </strong></p>

<h1> Classes</h1>
<a name="44365"></a>
<p>
<a name="3857"></a>
<a name="41186"></a>
<meta name="MS-HKWD" content="class">
<p><i>class 1. The noun <i>class</i> derives from Medieval French 
and French <i>classe</i> from Latin <i>classis</i>, 
probably originally a summons, hence a summoned collection of 
persons, a group liable to be summoned: perhaps for <i>callassis</i> 
from <i>calare</i>, to call, hence to summon.</i><br>
<a name="230293"></a>
&#151;Eric Partridge, Origins: A Short Etymological Dictionary of Modern English</p>
<p>
<a name="228205"></a>
Class declarations define new reference types and describe how they are 
implemented <a href="8_1.htm#15372">(&#167;8.1)</a>.
<p><a name="228209"></a>
The name of a class has as its scope all type declarations in the package in which the class is declared <a href="8_1_1.htm#39196">(&#167;8.1.1)</a>. A class may be declared <code>abstract</code> <a href="8_1_2.htm#34944">(&#167;8.1.2.1)</a> and must be declared <code>abstract</code> if it is incompletely implemented; such a class cannot be instantiated, but can be extended by subclasses. A class may be declared <code>final</code> <a href="8_1_2.htm#54727">(&#167;8.1.2.2)</a>, in which case it cannot have subclasses. If a class is declared <code>public</code>, then it can be referred to from other packages.<p>
<a name="35674"></a>
Each class except <code>Object</code> is an extension of (that is, a subclass of) a single existing class <a href="8_1_3.htm#21723">(&#167;8.1.3)</a> and may implement interfaces <a href="8_1_4.htm#34031">(&#167;8.1.4)</a>.<p>
<a name="15689"></a>
The body of a class declares members (fields and methods), static initializers, and constructors <a href="8_1_5.htm#18988">(&#167;8.1.5)</a>. The scope of the name of a member is the entire declaration of the class to which the member belongs. Field, method, and constructor declarations may include the access modifiers <a href="6_6.htm#33916">(&#167;6.6)</a> <code>public</code>, <code>protected</code>, or <code>private</code>. The members of a class include both declared and inherited members <a href="8_2.htm#21831">(&#167;8.2)</a>. Newly declared fields can hide fields declared in a superclass or superinterface. Newly declared methods can hide, implement, or override methods declared in a superclass or superinterface.<p>
<a name="15807"></a>
Field declarations <a href="8_3.htm#40898">(&#167;8.3)</a> describe class variables, which are incarnated once, and instance variables, which are freshly incarnated for each instance of the class. A field may be declared <code>final</code> <a href="8_3_1.htm#35962">(&#167;8.3.1.2)</a>, in which case it cannot be assigned to except as part of its declaration. Any field declaration may include an initializer; the declaration of a <code>final</code> field must include an initializer.<p>
<a name="35821"></a>
Method declarations <a href="8_4.htm#40420">(&#167;8.4)</a> describe code that may be invoked by method invocation expressions <a href="15_11.htm#20448">(&#167;15.11)</a>. A class method is invoked relative to the class type; an instance method is invoked with respect to some particular object that is an instance of the class type. A method whose declaration does not indicate how it is implemented must be declared <code>abstract</code>. A method may be declared <code>final</code> <a href="8_4_3.htm#11246">(&#167;8.4.3.3)</a>, in which case it cannot be hidden or overridden. A method may be implemented by platform-dependent <code>native</code> code <a href="8_4_3.htm#31125">(&#167;8.4.3.4)</a>. A <code>synchronized</code> method <a href="8_4_3.htm#55408">(&#167;8.4.3.5)</a> automatically locks an object before executing its body and automatically unlocks the object on return, as if by use of a <code>synchronized</code> statement <a href="14_17.htm#79287">(&#167;14.17)</a>, thus allowing its activities to be synchronized with those of other threads <a href="chap17.htm">(&#167;17)</a>.<p>
<a name="227762"></a>
Method names may be overloaded <a href="8_4_7.htm#227768">(&#167;8.4.7)</a>.<p>
<a name="35837"></a>
Static initializers <a href="8_5.htm#39245">(&#167;8.5)</a> are blocks of executable code that may be used to help initialize a class when it is first loaded <a href="12_4.htm#44557">(&#167;12.4)</a>.<p>
<a name="35735"></a>
Constructors <a href="8_6.htm#41652">(&#167;8.6)</a> are similar to methods, but cannot be invoked directly by a method call; they are used to initialize new class instances. Like methods, they may be overloaded <a href="8_6_6.htm#229266">(&#167;8.6.6)</a>.<p>


</Font></body></html>

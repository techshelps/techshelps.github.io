<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.6.5 Example: Default-Access Fields, Methods, and Constructors</title>
<META NAME=MS-HAID CONTENT="6_6_5">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>6.6.5	 Example: Default-Access Fields, Methods, and Constructors</h3>
<a name="36154"></a>
<p>
<a name="36155"></a>
If none of the access modifiers <code>public</code>, <code>protected</code>, or <code>private</code> are specified, a 
class member or constructor is accessible throughout the package that contains the 
declaration of the class in which the class member is declared, but the class member or constructor is not accessible in any other package. If a <code>public</code> class has a 
method or constructor with default access, then this method or constructor is not 
accessible to or inherited by a subclass declared outside this package.
<p><a name="60607"></a>
For example, if we have:<p>
<pre><br><a name="36156"></a>package points;
<br></pre><p><pre><a name="36157"></a>
public class Point {
<a name="36158"></a>	public int x, y;
<a name="36159"></a>	void move(int dx, int dy) { x += dx; y += dy; }
<a name="61627"></a>	public void moveAlso(int dx, int dy) { move(dx, dy); }
<a name="36160"></a>}
</pre><p><a name="36161"></a>
then a subclass in another package may declare an unrelated <code>move</code> method, with 
the same signature <a href="8_4_2.htm#38649">(&#167;8.4.2)</a> and return type, but because the original <code>move</code> method 
is not accessible from package <code>morepoints</code> <code>super</code> may not be used:
<p><pre><br><a name="36165"></a>package morepoints;
<br></pre><p><pre><a name="36166"></a>
public class PlusPoint extends points.Point {
<a name="36167"></a>	public void move(int dx, int dy) {
<a name="61624"></a>		super.move(dx, dy);								// compile-time error
<a name="36170"></a>		moveAlso(dx, dy);
<a name="61628"></a>	}
<a name="36171"></a>}
</pre><p><a name="61629"></a>
Because move of <code>Point</code> is not overridden by <code>move</code> in <code>PlusPoint</code>, the method 
<code>moveAlso</code> in <code>Point</code> never calls the method move in <code>PlusPoint</code>.
<p><a name="61639"></a>
Thus if you delete the <code>super.move</code> call from <code>PlusPoint</code> and execute the test program:<p>
<pre><a name="61642"></a>
import points.Point;
<a name="61643"></a>
import morepoints.PlusPoint;
<a name="61644"></a>
class Test {
<a name="61645"></a>
    public static void main(String[] args) {
<a name="61646"></a>        PlusPoint pp = new PlusPoint();
<a name="61647"></a>        pp.move(1, 1);
<a name="61648"></a>    }
<br><a name="61649"></a>}
</pre><p><a name="61640"></a>
it terminates normally. If move of <code>Point</code> were overridden by <code>move</code> in <code>PlusPoint</code>, 
then this program would recurse infinitely, until a <code>StackoverflowError</code> 
occurred.
<p>

</Font></body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.4.2 The Members of a Class Type</title>
<META NAME=MS-HAID CONTENT="6_4_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>6.4.2	 The Members of a Class Type</h3>
<a name="34757"></a>
<p>
<a name="34765"></a>
The members of a class type <a href="8_2.htm#21831">(&#167;8.2)</a> are fields and methods. The members of a 
class type are all of the following:
<p><ul><a name="34768"></a>
<li>Members inherited from its direct superclass <a href="8_1_3.htm#21723">(&#167;8.1.3)</a>, if it has one (the class <code>Object</code> has no direct superclass)
<a name="34777"></a>
<li>Members inherited from any direct superinterfaces <a href="8_1_4.htm#34031">(&#167;8.1.4)</a>
<a name="34778"></a>
<li>Members declared in the body of the class <a href="8_1_5.htm#18988">(&#167;8.1.5)</a>
</ul><p><a name="62337"></a>
Constructors <a href="8_6.htm#41652">(&#167;8.6)</a> are not members.
<p><a name="31685"></a>
There is no restriction against a field and a method of a class type having the same simple name.<p>
<a name="56650"></a>
A class may have two or more fields with the same simple name if they are declared in different interfaces and inherited. An attempt to refer to any of the fields by its simple name results in a compile-time error (<a href="6_5_6.htm#54547">&#167;6.5.6.2</a>, <a href="8_2.htm#21831">&#167;8.2</a>).<p>
<a name="31689"></a>
In the example:<p>
<pre><a name="25284"></a>
interface Colors {
<a name="25285"></a>	int WHITE = 0, BLACK = 1;
<a name="25286"></a>}
<a name="31681"></a>
interface Separates {
<a name="25287"></a>	int CYAN = 0, MAGENTA = 1, YELLOW = 2, BLACK = 3;
<a name="25288"></a>}
<a name="25289"></a>
class Test implements Colors, Separates {
<a name="25290"></a>	public static void main(String[] args) {
<a name="25291"></a>		System.out.println(BLACK); // compile-time error: ambiguous
<a name="25292"></a>	}
<a name="25293"></a>}
</pre><p><a name="25294"></a>
the name <code>BLACK</code> in the method <code>main</code> is ambiguous, because class <code>Test</code> has two 
members named <code>BLACK</code>, one inherited from <code>Colors</code> and one from <code>Separates</code>.
<p><a name="23306"></a>
A class type may have two or more methods with the same simple name if the methods have different signatures <a href="8_4_2.htm#38649">(&#167;8.4.2)</a>, that is, if they have different numbers of parameters or different parameter types in at least one parameter position. Such a method member name is said to be <i>overloaded</i>.<p>
<a name="31700"></a>
A class type may contain a declaration for a method with the same name and the same signature as a method that would otherwise be inherited from a superclass or superinterface. In this case, the method of the superclass or superinterface is not inherited. If the method not inherited is <code>abstract</code>, then the new declaration is said to <i>implement</i> it; if the method not inherited is not <code>abstract</code>, then the new declaration is said to <i>override</i> it.<p>
<a name="31699"></a>
In the example:<p>
<pre><a name="38566"></a>
class Point {
<a name="38567"></a>	float x, y;
<a name="38568"></a>	void move(int dx, int dy) { x += dx; y += dy; }
<a name="31704"></a>	void move(float dx, float dy) { x += dx; y += dy; }
<a name="31705"></a>	public String toString() { return "("+x+","+y+")"; }
<a name="31706"></a>}
</pre><p><a name="31707"></a>
the class <code>Point</code> has two members that are methods with the same name, <code>move</code>. 
The overloaded <code>move</code> method of class <code>Point</code> chosen for any particular method 
invocation is determined at compile time by the overloading resolution procedure 
given in <a href="15_11.htm#20448">&#167;15.11</a>.
<p><a name="62345"></a>
In this example, the members of the class <code>Point</code> are the <code>float</code> instance variables <code>x</code> and <code>y</code> declared in <code>Point</code>, the two declared <code>move</code> methods, the declared <code>toString</code> method, and the members that <code>Point</code> inherits from its implicit direct superclass <code>Object</code> <a href="4_3_2.htm#11055">(&#167;4.3.2)</a>, such as the method <code>hashCode</code> <a href="20_1.htm#13784">(&#167;20.1.4)</a>. Note that <code>Point</code> does not inherit the <code>toString</code> method <a href="20_1.htm#1152">(&#167;20.1.2)</a> of class <code>Object</code> because that method is overridden by the declaration of the <code>toString</code> method in class <code>Point</code>.<p>


</body></html>

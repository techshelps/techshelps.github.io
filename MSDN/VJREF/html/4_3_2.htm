<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.3.2 The Class Object</title>
<META NAME=MS-HAID CONTENT="4_3_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>4.3.2	 The Class Object</h3>
<a name="11055"></a>
<p>
<a name="26999"></a>
The standard class <code>Object</code> is a superclass <a href="8_1.htm#15372">(&#167;8.1)</a> of all other classes. A variable of 
type <code>Object</code> can hold a reference to any object, whether it is an instance of a class 
or an array <a href="chap10.htm">(&#167;10)</a>. All class and array types inherit the methods of class <code>Object</code>, 
which are summarized here and completely specified in <a href="20_1.htm#14533">&#167;20.1</a>:
<p><pre><a name="12035"></a>package java.lang;
</pre><p><pre><a name="45609"></a>
public class Object {
<a name="51634"></a>	public final Class getClass() { . . . }
<a name="51635"></a>	public String toString() { . . . }
<a name="51636"></a>	public boolean equals(Object obj) { . . . }
<a name="51637"></a>	public int hashCode() { . . . }
<a name="51638"></a>	protected Object clone()
<a name="86088"></a>		throws CloneNotSupportedException { . . . }
<a name="87378"></a>	public final void wait()<br>
		throws IllegalMonitorStateException,<br>
			InterruptedException { . . . }
<a name="51641"></a>	public final void wait(long millis)
<a name="87381"></a>		throws IllegalMonitorStateException,
<a name="87383"></a>			InterruptedException { . . . }
<a name="51642"></a>	public final void wait(long millis, int nanos) { . . . }
<a name="87385"></a>		throws IllegalMonitorStateException,
<a name="87386"></a>			InterruptedException { . . . }
<a name="87373"></a>	public final void notify() { . . . }
<a name="87374"></a>		throws IllegalMonitorStateException
<a name="87387"></a>	public final void notifyAll() { . . . }
<a name="87389"></a>		throws IllegalMonitorStateException
<a name="51644"></a>	protected void finalize()
<a name="86090"></a>		throws Throwable { . . . }
<a name="51645"></a>}
</pre><p><a name="45610"></a>
The members of <code>Object</code> are as follows:
<p><ul><a name="12048"></a>
<li>The method <code>getClass</code> returns the <code>Class</code> <a href="20_3.htm#14342">(&#167;20.3)</a> object that represents the class of the object. A <code>Class</code> object exists for each reference type. It can be used, for example, to discover the fully qualified name of a class, its members, its immediate superclass, and any interfaces that it implements. A class method that is declared <code>synchronized</code> <a href="8_4_3.htm#55408">(&#167;8.4.3.5)</a> synchronizes on the lock associated with the <code>Class</code> object of the class.
<a name="12066"></a>
<li>The method <code>toString</code> returns a <code>String</code> representation of the object.
<a name="12104"></a>
<li>The methods <code>equals</code> and <code>hashCode</code> are declared for the benefit of hashtables such as <code>java.util.Hashtable</code> <a href="21_7.htm#7569">(&#167;21.7)</a>. The method <code>equals</code> defines a notion of object equality, which is based on value, not reference, comparison.
<a name="12115"></a>
<li>The method <code>clone</code> is used to make a duplicate of an object.
<a name="12116"></a>
<li>The methods <code>wait</code>, <code>notify</code>, and <code>notifyAll</code> are used in concurrent programming using threads, as described in <a href="chap17.htm">&#167;17</a>.
<a name="12117"></a>
<li>The method <code>finalize</code> is run just before an object is destroyed and is described in <a href="12_6.htm#44748">&#167;12.6</a>.
</ul><p>

</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>14.4 Statements</title>
<META NAME=MS-HAID CONTENT="14_4">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>14.4	 Statements</h2>
<a name="32584"></a>
<p>
<a name="32588"></a>
There are many kinds of statements in the Java language. Most correspond to 
statements in the C and C++ languages, but some are unique to Java.
<p><a name="5958"></a>
As in C and C++, the Java <code>if</code> statement suffers from the so-called "dangling <code>else</code> problem," illustrated by this misleadingly formatted example:<p>
<pre><a name="17933"></a>
if (door.isOpen())
<a name="5960"></a>	if (resident.isVisible())
<a name="35428"></a>		resident.greet("Hello!");
<a name="5961"></a>else door.bell.ring();								// A "dangling else"
</pre><p><a name="5962"></a>
The problem is that both the outer <code>if</code> statement and the inner <code>if</code> statement might 
conceivably own the <code>else</code> clause. In this example, one might surmise that the programmer intended the <code>else</code> clause to belong to the outer <code>if</code> statement. The Java 
language, like C and C++ and many languages before them, arbitrarily decree that 
an <code>else</code> clause belongs to the innermost <code>if</code> to which it might possibly belong. 
This rule is captured by the following grammar:
<p><pre>
<i>Statement:<br>
	StatementWithoutTrailingSubstatement<br>
	LabeledStatement<br>
	IfThenStatement<br>
	IfThenElseStatement<br>
	WhileStatement<br>
	ForStatement
</i>
<i>StatementNoShortIf:<br>
	StatementWithoutTrailingSubstatement<br>
	LabeledStatementNoShortIf<br>
	IfThenElseStatementNoShortIf<br>
	WhileStatementNoShortIf<br>
	ForStatementNoShortIf
</i>
<i>StatementWithoutTrailingSubstatement:<br>
	Block<br>
	EmptyStatement<br>
	ExpressionStatement<br>
	SwitchStatement<br>
	DoStatement<br>
	BreakStatement<br>
	ContinueStatement<br>
	ReturnStatement<br>
	SynchronizedStatement<br>
	ThrowStatement<br>
	TryStatement
</i></pre><p><a name="8344"></a>
The following are repeated from <a href="14_8.htm#5991">&#167;14.8</a> to make the presentation here clearer:
<p><pre>
<i>IfThenStatement:<br>
	<code>if ( </code>Expression<code> ) </code>Statement
</i>
<i>IfThenElseStatement:<br>
	<code>if ( </code>Expression<code> ) </code>StatementNoShortIf<code> else </code>Statement
</i>
<i>IfThenElseStatementNoShortIf:<br>
	<code>if ( </code>Expression<code> ) </code>StatementNoShortIf<code> else </code>StatementNoShortIf
</i></pre><p><a name="5969"></a>
Statements are thus grammatically divided into two categories: those that might end in an <code>if</code> statement that has no <code>else</code> clause (a "short <code>if</code> statement") and those that definitely do not. Only statements that definitely do not end in a short <code>if</code> statement may appear as an immediate substatement before the keyword <code>else</code> in an <code>if</code> statement that does have an <code>else</code> clause. This simple rule prevents the "dangling <code>else</code>" problem. The execution behavior of a statement with the "no short <code>if</code>" restriction is identical to the execution behavior of the same kind of statement without the "no short <code>if</code>" restriction; the distinction is drawn purely to resolve the syntactic difficulty.<p>


</body></html>

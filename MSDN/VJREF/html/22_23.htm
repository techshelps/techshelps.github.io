<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>22.23 The Class java.io.RandomAccessFile</title>
<META NAME=MS-HAID CONTENT="22_23">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>22.23	 The Class java.io.RandomAccessFile</h1>
<a name="27738"></a>
<p>
<a name="27739"></a>
A random access file behaves like a large array of bytes stored in the file system. 
There is a kind of cursor, or index into the implied array, called the <i>file pointer</i>; 
input operations read bytes starting at the file pointer and advance the file pointer 
past the bytes read. If the random access file is created in read/write mode, then 
output operations are also available; output operations write bytes starting at the 
file pointer and advance the file pointer past the bytes written. Output operations 
that write past the current end of the implied array cause the array to be extended. 
The file pointer can be read by the <code>getFilePointer</code> method and set by the <code>seek</code> 
method.
<p><pre><a name="27740"></a>public class <code><b>RandomAccessFile</b></code> implements DataOutput, DataInput {
<a name="27741"></a>	public <code><b>RandomAccessFile</b></code>(String path, String mode)
<a name="27742"></a>		throws SecurityException, IOException,
<a name="30735"></a>			IllegalArgumentException;
<a name="27743"></a>	public <code><b>RandomAccessFile</b></code>(File file, String mode)
<a name="27744"></a>		throws SecurityException, IOException,
<a name="30736"></a>			IllegalArgumentException;
<a name="27745"></a>	public final FileDescriptor <code><b>getFD</b></code>() throws IOException;
<a name="27746"></a>	public native long <code><b>getFilePointer</b></code>() throws IOException;
<a name="27747"></a>	public native void <code><b>seek</b></code>(long pos) throws IOException;
<a name="27748"></a>	public native long <code><b>length</b></code>() throws IOException;
<a name="27749"></a>	public native void <code><b>close</b></code>() throws IOException;
<a name="27750"></a>	public native int <code><b>read</b></code>() throws IOException;
<a name="27751"></a>	public int <code><b>read</b></code>(byte[] b)
<a name="32511"></a>		throws IOException, NullPointerException;
<a name="27752"></a>	public int <code><b>read</b></code>(byte[] b, int off, int len)
<a name="27753"></a>		throws IOException, NullPointerException,
<a name="32506"></a>			IndexOutOfBoundsException;
<a name="27754"></a>	// The methods that implement interface DataInput:
<a name="27755"></a>	public final void <code><b>readFully</b></code>(byte[] b)
<a name="32519"></a>		throws IOException, NullPointerException;
<a name="27756"></a>	public final void <code><b>readFully</b></code>(byte[] b, int off, int len)
<a name="27757"></a>		throws IOException, NullPointerException,
<a name="32514"></a>			IndexOutOfBoundsException;
<a name="27758"></a>	public int <code><b>skipBytes</b></code>(int n) throws IOException;
<a name="27759"></a>	public final boolean <code><b>readBoolean</b></code>() throws IOException;
<a name="27760"></a>	public final byte <code><b>readByte</b></code>() throws IOException;
<a name="27761"></a>	public final int <code><b>readUnsignedByte</b></code>() throws IOException;
<a name="27762"></a>	public final short <code><b>readShort</b></code>() throws IOException;
<a name="27763"></a>	public final int <code><b>readUnsignedShort</b></code>() throws IOException;
<a name="27764"></a>	public final char <code><b>readChar</b></code>() throws IOException;
<a name="27765"></a>	public final int <code><b>readInt</b></code>() throws IOException;
<a name="27766"></a>	public final long <code><b>readLong</b></code>() throws IOException;
<a name="27767"></a>	public final float <code><b>readFloat</b></code>() throws IOException;
<a name="27768"></a>	public final double <code><b>readDouble</b></code>() throws IOException;
<a name="27769"></a>	public final String <code><b>readLine</b></code>() throws IOException;
<a name="27770"></a>	public final String <code><b>readUTF</b></code>() throws IOException;
<a name="27771"></a>	// The methods that implement interface DataOutput:
<a name="27772"></a>	public native void <code><b>write</b></code>(int b) throws IOException;
<a name="27773"></a>	public void <code><b>write</b></code>(byte[] b)
<a name="32527"></a>		throws IOException, NullPointerException;
<a name="27774"></a>	public void <code><b>write</b></code>(byte[] b, int off, int len)
<a name="27775"></a>		throws IOException, NullPointerException,
<a name="32522"></a>			IndexOutOfBoundsException;
<a name="27776"></a>	public final void <code><b>writeBoolean</b></code>(boolean v) throws IOException;
<a name="27777"></a>	public final void <code><b>writeByte</b></code>(int v) throws IOException;
<a name="27778"></a>	public final void <code><b>writeShort</b></code>(int v) throws IOException;
<a name="27779"></a>	public final void <code><b>writeChar</b></code>(int v) throws IOException;
<a name="27780"></a>	public final void <code><b>writeInt</b></code>(int v) throws IOException;
<a name="27781"></a>	public final void <code><b>writeLong</b></code>(long v) throws IOException;
<a name="27782"></a>	public final void <code><b>writeFloat</b></code>(float v) throws IOException;
<a name="27783"></a>	public final void <code><b>writeDouble</b></code>(double v) throws IOException;
<a name="27784"></a>	public final void <code><b>writeBytes</b></code>(String s) throws IOException;
<a name="27785"></a>	public final void <code><b>writeChars</b></code>(String s) throws IOException;
<a name="27786"></a>	public final void <code><b>writeUTF</b></code>(String str) throws IOException;
<a name="27787"></a>}
</pre><p><a name="31735"></a>
It is generally true of all the reading routines in this class that if end of file is reached before the desired number of bytes has been read, an <code>EOFException</code> (which is a kind of <code>IOException</code>) is thrown. If any byte cannot be read for any reason other than end of file, an <code>IOException</code> other than <code>EOFException</code> is thrown. In particular, an <code>IOException</code> may be thrown if the stream has been closed <a href="22_23.htm#27822">(&#167;22.23.7)</a>.<p>
<a name="27788"></a>
<p><strong>22.23.1	</strong> <code>public RandomAccessFile(String path, String mode)<br>throws SecurityException, IOException,  &#32; &#32; &#32;IllegalArgumentException</code>
<p>
<a name="27789"></a>
This constructor initializes a newly created <code>RandomAccessFile</code> by opening a 
connection to an actual file, the file named by the path name <code>path</code> in the file system. A new <code>FileDescriptor</code> object is created to represent this file connection.
<p><a name="27793"></a>
First, if there is a security manager, its <code>checkRead</code> method <a href="20_17.htm#14115">(&#167;20.17.19)</a> is called with the <code>path</code> argument as its argument.<p>
<a name="27794"></a>
Next, if <code>mode</code> is <code>"rw"</code> and there is a security manager, its <code>checkWrite</code> method <a href="20_17.htm#14117">(&#167;20.17.21)</a> is called with the <code>path</code> argument as its argument.<p>
<a name="27798"></a>
If <code>mode</code> is <code>"rw"</code>, then the file may be both read and written. If <code>mode</code> is <code>"r"</code>, then the file may be read but may not be written (every write method for this object will simply throw an <code>IOException</code>). If <code>mode</code> is not <code>"r"</code> or <code>"rw"</code>, then this constructor throws an <code>IllegalArgumentException</code>.<p>
<a name="27799"></a>
<p><strong>22.23.2	</strong> <code>public RandomAccessFile(File file, String mode)<br>throws SecurityException, IOException,  &#32; &#32; &#32;IllegalArgumentException</code>
<p>
<a name="27800"></a>
This constructor initializes a newly created <code>RandomAccessFile</code> by opening a 
connection to an actual file, the file named by <code>file</code> in the file system. A new 
<code>FileDescriptor</code> object is created to represent this file connection.
<p><a name="27804"></a>
First, if there is a security manager, its <code>checkRead</code> method <a href="20_17.htm#14115">(&#167;20.17.19)</a> is called with the path represented by the <code>file</code> argument as its argument.<p>
<a name="27805"></a>
Next, if <code>mode</code> is <code>"rw"</code> and there is a security manager, its <code>checkWrite</code> method <a href="20_17.htm#14117">(&#167;20.17.21)</a> is called with the path represented by the <code>file</code> argument as its argument.<p>
<a name="27809"></a>
If <code>mode</code> is <code>"rw"</code>, then the file may be both read and written. If <code>mode</code> is <code>"r"</code>, then the file may be read but may not be written (every write method for this object will simply throw an <code>IOException</code>). If <code>mode</code> is not <code>"r"</code> or <code>"rw"</code>, then this constructor throws an <code>IllegalArgumentException</code>.<p>
<a name="27810"></a>
<p><strong>22.23.3	</strong> <code>public final FileDescriptor getFD() throws IOException</code>
<p>
<a name="30417"></a>
This method returns the <code>FileDescriptor</code> object <a href="22_26.htm#29890">(&#167;22.26)</a> that represents the connection to the actual file in the file system being used by this <code>RandomAccessFile</code>.
<p><a name="27815"></a>
<p><strong>22.23.4	</strong> <code>public long getFilePointer() throws IOException</code>
<p>
<a name="27816"></a>
The current file pointer for this random access file is returned. An <code>IOException</code> is 
thrown if the file pointer cannot be read for any reason.
<p><a name="27817"></a>
<p><strong>22.23.5	</strong> <code>public void seek(long pos) throws IOException</code>
<p>
<a name="27818"></a>
The file pointer for this random access file is set to <code>pos</code>, which is a position within 
the file, measured in bytes. Position <code>0</code> is the start of the file. An <code>IOException</code> is 
thrown if <code>pos</code> is less than zero or greater than the length of the file, or if the file 
pointer cannot be set for any other reason.
<p><a name="27819"></a>
<p><strong>22.23.6	</strong> <code>public long length() throws IOException</code>
<p>
<a name="27820"></a>
The length of this random access file, measured in bytes, is returned.
<p><a name="31749"></a>
An <code>IOException</code> is thrown if the length cannot be read for any reason.<p>
<a name="27822"></a>
<p><strong>22.23.7	</strong> <code>public void close() throws IOException</code>
<p>
<a name="27823"></a>
This random access file is closed. A closed random access file cannot perform 
input or output operations and cannot be reopened.
<p><a name="27824"></a>
<p><strong>22.23.8	</strong> <code>public int read() throws IOException</code>
<p>
<a name="27825"></a>
This method reads one byte from the random access file. The byte is returned as 
an integer in the range 0 to 255 (<code>0x00</code>-<code>0xff</code>). If no byte is available because the 
file pointer is at end of file, the value <code>-1</code> is returned.
<p><a name="27826"></a>
If the byte cannot be read for any reason other than end of file, an <code>IOException</code> is thrown. In particular, an <code>IOException</code> is thrown if the input stream has been closed <a href="22_23.htm#27822">(&#167;22.23.7)</a>.<p>
<a name="27830"></a>
Although <code>RandomAccessFile</code> is not a subclass of <code>InputStream</code>, this method behaves in exactly the same way as the <code>read</code> method of <code>InputStream</code> <a href="22_3.htm#28142">(&#167;22.3.1)</a>.<p>
<a name="27834"></a>
<p><strong>22.23.9	</strong> <code>public int read(byte[] b)<br>throws IOException, NullPointerException</code>
<p>
<a name="27835"></a>
Although <code>RandomAccessFile</code> is not a subclass of <code>InputStream</code>, this method 
behaves in exactly the same way as the <code>read</code> method of <code>InputStream</code> <a href="22_3.htm#28150">(&#167;22.3.2)</a>.
<p><a name="27839"></a>
<p><strong>22.23.10	</strong> <code>public int read(byte[] b, int off, int len)<br>throws IOException, NullPointerException,  &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="27840"></a>
Although <code>RandomAccessFile</code> is not a subclass of <code>InputStream</code>, this method 
behaves in exactly the same way as the <code>read</code> method of <code>InputStream</code> <a href="22_3.htm#28164">(&#167;22.3.3)</a>.
<p><a name="27844"></a>
<p><strong>22.23.11	</strong> <code>public final void readFully(byte[] b)<br>throws IOException, NullPointerException</code>
<p>
<a name="27848"></a>
See the general contract of the <code>readFully</code> method of <code>DataInput</code> <a href="22_1.htm#28801">(&#167;22.1.1)</a>.
<p><a name="27849"></a>
Bytes for this operation are read from the random access file, starting at the current file pointer.<p>
<a name="27850"></a>
<p><strong>22.23.12	</strong> <code>public final void readFully(byte[] b, int off, int len) throws IOException, NullPointerException,  &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="27854"></a>
See the general contract of the <code>readFully</code> method of <code>DataInput</code> <a href="22_1.htm#28807">(&#167;22.1.2)</a>.
<p><a name="27855"></a>
Bytes for this operation are read from the random access file, starting at the current file pointer.<p>
<a name="27856"></a>
<p><strong>22.23.13	</strong> <code>public int skipBytes(int n) throws IOException</code>
<p>
<a name="27860"></a>
See the general contract of the <code>skipBytes</code> method of <code>DataInput</code> <a href="22_1.htm#28814">(&#167;22.1.3)</a>.
<p><a name="27861"></a>
Bytes for this operation are read from the random access file, starting at the current file pointer.<p>
<a name="27862"></a>
<p><strong>22.23.14	</strong> <code>public final boolean readBoolean() throws IOException</code>
<p>
<a name="27866"></a>
See the general contract of the <code>readBoolean</code> method of <code>DataInput</code> <a href="22_1.htm#28817">(&#167;22.1.4)</a>.
<p><a name="27867"></a>
The byte for this operation is read from the random access file, starting at the current file pointer.<p>
<a name="27868"></a>
<p><strong>22.23.15	</strong> <code>public final byte readByte() throws IOException</code>
<p>
<a name="27872"></a>
See the general contract of the <code>readByte</code> method of <code>DataInput</code> <a href="22_1.htm#28824">(&#167;22.1.5)</a>.
<p><a name="27873"></a>
The byte for this operation is read from the random access file, starting at the current file pointer.<p>
<a name="27874"></a>
<p><strong>22.23.16	</strong> <code>public final int readUnsignedByte() throws IOException</code>
<p>
<a name="27878"></a>
See the general contract of the <code>readUnsignedByte</code> method of <code>DataInput</code> 
<a href="22_1.htm#28831">(&#167;22.1.6)</a>.
<p><a name="27879"></a>
The byte for this operation is read from the random access file, starting at the current file pointer.<p>
<a name="27880"></a>
<p><strong>22.23.17	</strong> <code>public final short readShort() throws IOException</code>
<p>
<a name="27884"></a>
See the general contract of the <code>readShort</code> method of <code>DataInput</code> <a href="22_1.htm#28838">(&#167;22.1.7)</a>.
<p><a name="27885"></a>
Bytes for this operation are read from the random access file, starting at the current file pointer.<p>
<a name="27886"></a>
<p><strong>22.23.18	</strong> <code>public final int readUnsignedShort() throws IOException</code>
<p>
<a name="27890"></a>
See the general contract of the <code>readUnsignedShort</code> method of <code>DataInput</code> 
<a href="22_22.htm#29998">(&#167;22.1.8)</a>.
<p><a name="27891"></a>
Bytes for this operation are read from the random access file, starting at the current file pointer.<p>
<a name="27892"></a>
<p><strong>22.23.19	</strong> <code>public final char readChar() throws IOException</code>
<p>
<a name="27896"></a>
See the general contract of the <code>readChar</code> method of <code>DataInput</code> <a href="22_1.htm#28853">(&#167;22.1.9)</a>.
<p><a name="30263"></a>
Bytes for this operation are read from the random access file, starting at the current file pointer.<p>
<a name="30264"></a>
<p><strong>22.23.20	</strong> <code>public final int readInt() throws IOException</code>
<p>
<a name="30268"></a>
See the general contract of the <code>readInt</code> method of <code>DataInput</code> <a href="22_1.htm#28860">(&#167;22.1.10)</a>.
<p><a name="30269"></a>
Bytes for this operation are read from the random access file, starting at the current file pointer.<p>
<a name="27904"></a>
<p><strong>22.23.21	</strong> <code>public final long readLong() throws IOException</code>
<p>
<a name="27908"></a>
See the general contract of the <code>readLong</code> method of <code>DataInput</code> <a href="22_1.htm#28871">(&#167;22.1.11)</a>.
<p><a name="27909"></a>
Bytes for this operation are read from the random access file, starting at the current file pointer.<p>
<a name="27910"></a>
<p><strong>22.23.22	</strong> <code>public final float readFloat() throws IOException</code>
<p>
<a name="27914"></a>
See the general contract of the <code>readFloat</code> method of <code>DataInput</code> <a href="22_1.htm#28886">(&#167;22.1.12)</a>.
<p><a name="27915"></a>
Bytes for this operation are read from the random access file, starting at the current file pointer.<p>
<a name="27916"></a>
<p><strong>22.23.23	</strong> <code>public final double readDouble() throws IOException</code>
<p>
<a name="27920"></a>
See the general contract of the <code>readDouble</code> method of <code>DataInput</code> <a href="22_1.htm#28899">(&#167;22.1.13)</a>.
<p><a name="27921"></a>
Bytes for this operation are read from the random access file, starting at the current file pointer.<p>
<a name="27922"></a>
<p><strong>22.23.24	</strong> <code>public final String readLine() throws IOException</code>
<p>
<a name="27926"></a>
See the general contract of the <code>readLine</code> method of <code>DataInput</code> <a href="22_1.htm#28912">(&#167;22.1.14)</a>.
<p><a name="27927"></a>
Bytes for this operation are read from the random access file, starting at the current file pointer.<p>
<a name="27928"></a>
<p><strong>22.23.25	</strong> <code>public final String readUTF() throws IOException</code>
<p>
<a name="27932"></a>
See the general contract of the <code>readUTF</code> method of <code>DataInput</code> <a href="22_1.htm#28916">(&#167;22.1.15)</a>.
<p><a name="27933"></a>
Bytes for this operation are read from the random access file, starting at the current file pointer.<p>
<a name="27934"></a>
<p><strong>22.23.26	</strong> <code>public void write(int b) throws IOException;</code>
<p>
<a name="27938"></a>
See the general contract of the <code>write</code> method of <code>DataOutput</code> <a href="22_2.htm#28962">(&#167;22.2.1)</a>.
<p><a name="27939"></a>
The byte for this operation is written to the random access file, starting at the current file pointer.<p>
<a name="27940"></a>
<p><strong>22.23.27	</strong> <code>public void write(byte[] b)<br>throws IOException, NullPointerException</code>
<p>
<a name="27944"></a>
See the general contract of the <code>write</code> method of <code>DataOutput</code> <a href="22_2.htm#28964">(&#167;22.2.2)</a>.
<p><a name="27945"></a>
Bytes for this operation are written to the random access file, starting at the current file pointer.<p>
<a name="27946"></a>
<p><strong>22.23.28	</strong> <code>public void write(byte[] b, int off, int len)<br>throws IOException, NullPointerException,  &#32; &#32; &#32;IndexOutOfBoundsException</code>
<p>
<a name="27950"></a>
See the general contract of the <code>write</code> method of <code>DataOutput</code> <a href="22_2.htm#28968">(&#167;22.2.3)</a>.
<p><a name="27951"></a>
Bytes for this operation are written to the random access file, starting at the current file pointer.<p>
<a name="27952"></a>
<p><strong>22.23.29	</strong> <code>public final void writeBoolean(boolean v)<br>throws IOException</code>
<p>
<a name="27956"></a>
See the general contract of the <code>writeBoolean</code> method of <code>DataOutput</code> <a href="22_2.htm#28974">(&#167;22.2.4)</a>.
<p><a name="27957"></a>
The byte for this operation is written to the random access file, starting at the current file pointer.<p>
<a name="27958"></a>
<p><strong>22.23.30	</strong> <code>public final void writeByte(int v) throws IOException</code>
<p>
<a name="27962"></a>
See the general contract of the <code>writeByte</code> method of <code>DataOutput</code> <a href="22_2.htm#28981">(&#167;22.2.5)</a>.
<p><a name="27963"></a>
The byte for this operation is written to the random access file, starting at the current file pointer.<p>
<a name="27964"></a>
<p><strong>22.23.31	</strong> <code>public final void writeShort(int v) throws IOException</code>
<p>
<a name="27968"></a>
See the general contract of the <code>writeShort</code> method of <code>DataOutput</code> <a href="22_2.htm#28988">(&#167;22.2.6)</a>.
<p><a name="27969"></a>
Bytes for this operation are written to the random access file, starting at the current file pointer.<p>
<a name="27970"></a>
<p><strong>22.23.32	</strong> <code>public final void writeChar(int v) throws IOException</code>
<p>
<a name="27974"></a>
See the general contract of the <code>writeChar</code> method of <code>DataOutput</code> <a href="22_2.htm#28997">(&#167;22.2.7)</a>.
<p><a name="27975"></a>
Bytes for this operation are written to the random access file, starting at the current file pointer.<p>
<a name="27976"></a>
<p><strong>22.23.33	</strong> <code>public final void writeInt(int v) throws IOException</code>
<p>
<a name="27980"></a>
See the general contract of the <code>writeInt</code> method of <code>DataOutput</code> <a href="22_2.htm#29006">(&#167;22.2.8)</a>.
<p><a name="27981"></a>
Bytes for this operation are written to the random access file, starting at the current file pointer.<p>
<a name="27982"></a>
<p><strong>22.23.34	</strong> <code>public final void writeLong(long v) throws IOException</code>
<p>
<a name="27986"></a>
See the general contract of the <code>writeLong</code> method of <code>DataOutput</code> <a href="22_2.htm#29017">(&#167;22.2.9)</a>.
<p><a name="27987"></a>
Bytes for this operation are written to the random access file, starting at the current file pointer.<p>
<a name="27988"></a>
<p><strong>22.23.35	</strong> <code>public final void writeFloat(float v) throws IOException</code>
<p>
<a name="27992"></a>
See the general contract of the <code>writeFloat</code> method of <code>DataOutput</code> <a href="22_2.htm#29032">(&#167;22.2.10)</a>.
<p><a name="27993"></a>
Bytes for this operation are written to the random access file, starting at the current file pointer.<p>
<a name="27994"></a>
<p><strong>22.23.36	</strong> <code>public final void writeDouble(double v)<br>throws IOException</code>
<p>
<a name="27998"></a>
See the general contract of the <code>writeDouble</code> method of <code>DataOutput</code> <a href="22_2.htm#29045">(&#167;22.2.11)</a>.
<p><a name="27999"></a>
Bytes for this operation are written to the random access file, starting at the current file pointer.<p>
<a name="28000"></a>
<p><strong>22.23.37	</strong> <code>public final void writeBytes(String s) throws IOException</code>
<p>
<a name="28004"></a>
See the general contract of the <code>writeBytes</code> method of <code>DataOutput</code> <a href="22_2.htm#29058">(&#167;22.2.12)</a>.
<p><a name="28005"></a>
Bytes for this operation are written to the random access file, starting at the current file pointer.<p>
<a name="28006"></a>
<p><strong>22.23.38	</strong> <code>public final void writeChars(String s) throws IOException</code>
<p>
<a name="28010"></a>
See the general contract of the <code>writeChars</code> method of <code>DataOutput</code> <a href="22_2.htm#29066">(&#167;22.2.13)</a>.
<p><a name="28011"></a>
Bytes for this operation are written to the random access file, starting at the current file pointer.<p>
<a name="28012"></a>
<p><strong>22.23.39	</strong> <code>public final void writeUTF(String str) throws IOException</code>
<p>
<a name="28016"></a>
See the general contract of the <code>writeUTF</code> method of <code>DataOutput</code> <a href="22_2.htm#29074">(&#167;22.2.14)</a>.
<p><a name="28017"></a>
Bytes for this operation are written to the random access file, starting at the current file pointer.<p>


</body></html>

<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>10.2 Array Variables</title>
<META NAME=MS-HAID CONTENT="10_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h2>10.2	 Array Variables</h2>
<a name="25891"></a>
<p>
<a name="17235"></a>
A variable of array type holds a reference to an object. Declaring a variable of 
array type does not create an array object or allocate any space for array components. It creates only the variable itself, which can contain a reference to an array. 
However, the initializer part of a declarator <a href="8_3.htm#40898">(&#167;8.3)</a> may create an array, a reference 
to which then becomes the initial value of the variable.
<p><a name="17236"></a>
Because an array's length is not part of its type, a single variable of array type may contain references to arrays of different lengths.<p>
<a name="25894"></a>
Here are examples of declarations of array variables that do not create arrays:<p>
<pre><a name="25895"></a>
int[] ai;							// array of int
<a name="25896"></a>short[][] as;							// array of array of short
<a name="25897"></a>Object[]			ao,				// array of Object
<a name="25898"></a>			otherAo;				// array of Object
<a name="25899"></a>short		s,					// scalar short 
<a name="25901"></a>		aas[][];					// array of array of short
</pre><p><a name="25902"></a>
Here are some examples of declarations of array variables that create array 
objects:
<p><pre><a name="25903"></a>
Exception ae[] = new Exception[3]; 
<a name="25904"></a>Object aao[][] = new Exception[2][3];
<a name="25905"></a>int[] factorial = { 1, 1, 2, 6, 24, 120, 720, 5040 };
<a name="25906"></a>char ac[] = { 'n', 'o', 't', ' ', 'a', ' ',
<a name="25907"></a>				 '<code>S</code>', 't', 'r', 'i', 'n', 'g' }; 
<a name="25908"></a>String[] aas = { "array", "of", "String", };
</pre><p><a name="25909"></a>
The <code>[]</code> may appear as part of the type at the beginning of the declaration, or as 
part of the declarator for a particular variable, or both, as in this example:
<p><pre><a name="25910"></a>byte[] rowvector, colvector, matrix[];
</pre><p><a name="25911"></a>
This declaration is equivalent to:
<p><pre><a name="25929"></a>byte rowvector[], colvector[], matrix[][];
</pre><p><a name="25915"></a>
Once an array object is created, its length never changes. To make an array variable refer to an array of different length, a reference to a different array must be 
assigned to the variable.
<p><a name="25953"></a>
If an array variable <i>v</i><i></i> has type <i>A</i><i></i><code>[]</code>, where <i>A</i><i></i> is a reference type, then <i>v</i><i></i> can hold a reference to an instance of any array type <i>B</i><code>[]</code>, provided <i>B</i><i></i> can be assigned to <i>A</i><i></i>. This may result in a run-time exception on a later assignment; see <a href="10_10.htm#11430">&#167;10.10</a> for a discussion.<p>


</body></html>

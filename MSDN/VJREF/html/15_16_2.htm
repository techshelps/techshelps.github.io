<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>15.16.2 Division Operator /</title>
<META NAME=MS-HAID CONTENT="15_16_2">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h3>15.16.2	 Division Operator /</h3>
<a name="5047"></a>
<p>
<a name="45768"></a>
<p><i>Gallia est omnis divisa in partes tres.</i><br>
<a name="240914"></a>
&#151;Julius Caesar, <i>Commentaries on the Gallic Wars</i> (58 B.C.)</p>
<a name="5048"></a>
<p>The binary <code>/</code> operator performs division, producing the quotient of its operands. 
The left-hand operand is the dividend and the right-hand operand is the divisor.
<p><a name="45471"></a>
Integer division rounds toward <code>0</code>. That is, the quotient produced for operands <i>n</i> and <i>d</i> that are integers after binary numeric promotion <a href="5_6_2.htm#170983">(&#167;5.6.2)</a> is an integer value <i>q</i> whose magnitude is as large as possible while satisfying <img src="15anc3.gif">; moreover, <i>q </i>is positive when <img src="15anc4.gif">and <i>n</i> and <i>d</i> have the same sign, but <i>q</i> is negative when <img src="15anc5.gif">and <i>n</i> and <i>d </i>have opposite signs. There is one special case that does not satisfy this rule: if the dividend is the negative integer of largest possible magnitude for its type, and the divisor is <code>-1</code>, then integer overflow occurs and the result is equal to the dividend. Despite the overflow, no exception is thrown in this case. On the other hand, if the value of the divisor in an integer division is <code>0</code>, then an <code>ArithmeticException</code> is thrown.<p>
<a name="45481"></a>
The result of a floating-point division is determined by the specification of IEEE arithmetic:<p>
<ul><a name="5054"></a>
<li>If either operand is NaN, the result is NaN.
<a name="5055"></a>
<li>If the result is not NaN, the sign of the result is positive if both operands have the same sign, negative if the operands have different signs.
<a name="5056"></a>
<li>Division of an infinity by an infinity results in NaN.
<a name="5057"></a>
<li>Division of an infinity by a finite value results in a signed infinity. The sign is determined by the rule stated above.
<a name="5058"></a>
<li>Division of a finite value by an infinity results in a signed zero. The sign is determined by the rule stated above.
<a name="236610"></a>
<li>Division of a zero by a zero results in NaN; division of zero by any other finite value results in a signed zero. The sign is determined by the rule stated above.
<a name="236611"></a>
<li>Division of a nonzero finite value by a zero results in a signed infinity. The sign is determined by the rule stated above.
<a name="236612"></a>
<li>In the remaining cases, where neither an infinity, nor a zero, nor NaN is involved, the quotient is computed. If the magnitude of the quotient is too large to represent, we say the operation overflows; the result is then an infinity of appropriate sign. If the magnitude is too small to represent, we say the operation underflows and the result is then a zero of appropriate sign. Otherwise, the quotient is rounded to the nearest representable value using IEEE 754 round-to-nearest mode. The Java language requires support of gradual underflow as defined by IEEE 754 <a href="4_2_4.htm#9249">(&#167;4.2.4)</a>.
</ul><p><a name="5062"></a>
Despite the fact that overflow, underflow, division by zero, or loss of information may occur, evaluation of a floating-point division operator <code>/</code> never throws a run-time exception.<p>


</body></html>

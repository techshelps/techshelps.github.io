<html>
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>20.15 The Class java.lang.Process</title>
<META NAME=MS-HAID CONTENT="20_15">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></head>
<body bgcolor=#ffffff>

<h1>20.15	 The Class java.lang.Process</h1>
<a name="14463"></a>
<p>
<a name="28945"></a>
The method <code>exec</code> <a href="20_16.htm#14080">(&#167;20.16.3)</a> of class <code>Runtime</code> returns a reference to a <code>Process</code> 
object. The class <code>Process</code> provides methods for performing input from the process, performing output to the process, waiting for the process to complete, checking the exit status of the process, and destroying (killing) the process.
<p><a name="28951"></a>
Dropping the last reference to a <code>Process</code> instance, thus allowing the <code>Process</code> object to be reclaimed, does <i>not</i> automatically kill the associated process. <p>
<a name="29009"></a>
There is no requirement that a process represented by a <code>Process</code> object execute asynchronously or concurrently with respect to the Java process that owns the <code>Process</code> object.<p>
<pre><a name="14067"></a>
<a name="28957"></a>public abstract class <code><b>Process</b></code> {
<a name="3085"></a>	public abstract OutputStream <code><b>getOutputStream</b></code>();
<a name="3086"></a>	public abstract InputStream <code><b>getInputStream</b></code>();
<a name="3087"></a>	public abstract InputStream <code><b>getErrorStream</b></code>();
<a name="3088"></a>	public abstract int <code><b>waitFor</b></code>()<br>
		throws InterruptedException;
<a name="3089"></a>	public abstract int <code><b>exitValue</b></code>()<br>
		throws <code>IllegalThreadStateException</code>;
<a name="3090"></a>	public abstract void <code><b>destroy</b></code>();
<a name="3093"></a>}
</pre><p><a name="14068"></a>
<p><strong>20.15.1	</strong> <code>public abstract OutputStream getOutputStream()</code>
<p>
<a name="29022"></a>
This method returns an <code>OutputStream</code>. Output to the stream is piped into the 
standard input stream of the process represented by this <code>Process</code> object.
<p><a name="29026"></a>
Implementation note: It is a good idea for the output stream to be buffered.<p>
<a name="14069"></a>
<p><strong>20.15.2	</strong> <code>public abstract InputStream getInputStream()</code>
<p>
<a name="29028"></a>
This method returns an <code>InputStream</code>. The stream obtains data piped from the 
standard output stream of the process represented by this <code>Process</code> object.
<p><a name="29029"></a>
Implementation note: It is a good idea for the input stream to be buffered.<p>
<a name="14070"></a>
<p><strong>20.15.3	</strong> <code>public abstract InputStream getErrorStream()</code>
<p>
<a name="29063"></a>
This method returns an <code>InputStream</code>. The stream obtains data piped from the 
error output stream of the process represented by this <code>Process</code> object.
<p><a name="29064"></a>
Implementation note: It is a good idea for the input stream to be buffered.<p>
<a name="14071"></a>
<p><strong>20.15.4	</strong> <code>public abstract int waitFor()<br>throws InterruptedException</code>
<p>
<a name="29070"></a>
This method causes the current thread to wait, if necessary, until the process represented by this <code>Process</code> object has terminated. Then the exit value of the process 
is returned. By convention, the value <code>0</code> indicates normal termination.
<p><a name="29173"></a>
If the current thread is interrupted <a href="20_20.htm#29179">(&#167;20.20.31)</a> by another thread while it is waiting, then the wait is ended and an <code>InterruptedException</code> is thrown.<p>
<a name="14073"></a>
<p><strong>20.15.5	</strong> <code>public abstract int exitValue()<br>throws IllegalThreadStateException</code>
<p>
<a name="29085"></a>
If the process represented by this <code>Process</code> object has not yet terminated, then an 
<code>IllegalThreadStateException</code> is thrown. Otherwise, the exit value of the process is returned. By convention, the value <code>0</code> indicates normal termination.
<p><a name="14074"></a>
<p><strong>20.15.6	</strong> <code>public abstract void destroy()</code>
<p>
<a name="36435"></a>
The process represented by this <code>Process</code> object is forcibly terminated.
<p><i>It was my hint to speak&#151;such was the process.<br>
</i>&#151;William Shakespeare, <i>Othello</i>, Act I, scene iii</p>
<p><a name="29075"></a>

<p>

</body></html>

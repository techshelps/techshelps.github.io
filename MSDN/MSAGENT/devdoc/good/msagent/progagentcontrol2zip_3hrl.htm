<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Command Object</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="progagentcontrol2zip_81"></a>The Command Object</h2>
<p>
A <b>Command</b> object is an item in a <b>Commands</b> collection. The server provides the user access to your <b>Command</b> objects when your client application becomes input-active.</p>
<p>
To access the property of a <b>Command</b> object, you reference it in its collection using its <b>Name</b> property. In VBScript and Visual Basic you can use the <b>Name</b> property directly:</p>
<pre><code><i>    agent</i><b>.Characters(</b>"<i>CharacterID</i>"<b>).Commands(</b>"<i>Name</i>"<b>).</b><i>property</i> [= <i>value</i>]
</code></pre>
<p>
For programming languages that don't support collections, use the <b>Command</b> method:</p>
<pre><code><i>    agent</i><b>.Characters(</b>"<i>CharacterID</i>"<b>).Commands.Command(</b>"<i>Name</i>"<b>).</b><i>property</i> [= <i>value</i>]
</code></pre>
<p>
You can also reference a Command object by creating a reference to it. In Visual Basic, declare an object variable and use the Set statement to create the reference:</p>
<pre><code>    Dim Cmd1 as Object
    …
    Set Cmd1 = Agent.Characters("MyCharacterID").Commands("SampleCommand")
    …
    Cmd1.Enabled = True
</code></pre>
<p>
In Visual Basic 5.0, you can also declare the object as type <b>IAgentCtlCommand</b> and create the reference. This convention enables early binding, which results in better performance:</p>
<pre><code>    Dim Cmd1 as IAgentCtlCommand
    …
    Set Cmd1 = Agent.Characters("MyCharacterID").Commands("SampleCommand")
    …
    Cmd1.Enabled = True
</code></pre>
<p>
In VBScript, you can declare a reference as a particular type, but you can still declare the variable and set it to the <b>Command</b> in the collection:</p>
<pre><code>    Dim Cmd1
    …
    Set Cmd1 = Agent.Characters("MyCharacterID").Commands("SampleCommand")
    …
    Cmd1.Enabled = True
</code></pre>
<p>
A command may appear in either the character's pop-up menu and the Commands Window, or in both. To appear in the pop-up menu it must have a caption and have the <b>Visible</b> property set to <b>True</b>. In addition, its Commands collection object <b>Visible</b> property must also be set to <b>True</b>. To appear in the Commands Window, a <b>Command</b> must have its <b>Caption</b> and <b>Voice</b> properties set. Note that a character's pop-up menu entries do not change while the menu displays. If you add or remove commands or change their properties while the character's pop-up menu is displayed, the menu displays those changes whenever the user next displays it. However, the Commands Window dynamically reflects any changes you make.</p>
<p>
The following table summarizes how the properties of a <b>Command</b> affect its presentation:</p>
<table cellspacing=4 cols=6>
<tr valign=top>
<td width=13%><b>Caption Property</b></td>
<td width=14%><b>Voice Property </b></td>
<td width=14%><b>Visible Property</b></td>
<td width=15%><b>Enabled Property</b></td>
<td width=20%><b>Appears in Character's Pop-up Menu</b></td>
<td width=24%><b>Appears in Commands Window</b></td>
</tr>
<tr valign=top>
<td width=13%>Yes</td>
<td width=14%>Yes</td>
<td width=14%>True</td>
<td width=15%>True</td>
<td width=20%>Normal</td>
<td width=24%>Yes</td>
</tr>
<tr valign=top>
<td width=13%>Yes</td>
<td width=14%>Yes</td>
<td width=14%>True</td>
<td width=15%>False</td>
<td width=20%>Disabled</td>
<td width=24%>No</td>
</tr>
<tr valign=top>
<td width=13%>Yes</td>
<td width=14%>Yes</td>
<td width=14%>False</td>
<td width=15%>True</td>
<td width=20%>Does not appear</td>
<td width=24%>Yes</td>
</tr>
<tr valign=top>
<td width=13%>Yes</td>
<td width=14%>Yes</td>
<td width=14%>False</td>
<td width=15%>False</td>
<td width=20%>Does not appear</td>
<td width=24%>No</td>
</tr>
<tr valign=top>
<td width=13%>Yes</td>
<td width=14%>No</td>
<td width=14%>True</td>
<td width=15%>True</td>
<td width=20%>Normal</td>
<td width=24%>No</td>
</tr>
<tr valign=top>
<td width=13%>Yes</td>
<td width=14%>No</td>
<td width=14%>True</td>
<td width=15%>False</td>
<td width=20%>Disabled</td>
<td width=24%>No</td>
</tr>
<tr valign=top>
<td width=13%>Yes</td>
<td width=14%>No</td>
<td width=14%>False</td>
<td width=15%>True</td>
<td width=20%>Does not appear</td>
<td width=24%>No</td>
</tr>
<tr valign=top>
<td width=13%>Yes</td>
<td width=14%>No</td>
<td width=14%>False</td>
<td width=15%>False</td>
<td width=20%>Does not appear</td>
<td width=24%>No</td>
</tr>
<tr valign=top>
<td width=13%>No</td>
<td width=14%>Yes</td>
<td width=14%>True </td>
<td width=15%>True</td>
<td width=20%>Does not appear</td>
<td width=24%>No*</td>
</tr>
<tr valign=top>
<td width=13%>No</td>
<td width=14%>Yes</td>
<td width=14%>True</td>
<td width=15%>False</td>
<td width=20%>Does not appear</td>
<td width=24%>No</td>
</tr>
<tr valign=top>
<td width=13%>No</td>
<td width=14%>Yes</td>
<td width=14%>False</td>
<td width=15%>True</td>
<td width=20%>Does not appear</td>
<td width=24%>No*</td>
</tr>
<tr valign=top>
<td width=13%>No</td>
<td width=14%>Yes</td>
<td width=14%>False</td>
<td width=15%>False</td>
<td width=20%>Does not appear</td>
<td width=24%>No</td>
</tr>
<tr valign=top>
<td width=13%>No</td>
<td width=14%>No</td>
<td width=14%>True</td>
<td width=15%>True</td>
<td width=20%>Does not appear</td>
<td width=24%>No</td>
</tr>
<tr valign=top>
<td width=13%>No</td>
<td width=14%>No</td>
<td width=14%>True</td>
<td width=15%>False</td>
<td width=20%>Does not appear</td>
<td width=24%>No</td>
</tr>
<tr valign=top>
<td width=13%>No</td>
<td width=14%>No</td>
<td width=14%>False</td>
<td width=15%>True</td>
<td width=20%>Does not appear</td>
<td width=24%>No</td>
</tr>
<tr valign=top>
<td width=13%>No</td>
<td width=14%>No</td>
<td width=14%>False</td>
<td width=15%>False</td>
<td width=20%>Does not appear</td>
<td width=24%>No</td>
</tr>
</table><br>
<p>
*The command is still voice-accessible.</p>
<p>
Generally, if you define commands with <b>Voice</b> settings, you also define <b>Caption</b> and <b>Voice</b> settings for its associated <b>Commands</b> collection. If a <b>Commands</b> collection has no <b>Voice</b> or no <b>Caption</b> setting and is currently input-active, but its <b>Command </b>objects do have <b>Caption</b> and <b>Voice</b> settings and their <b>Enabled</b> properties are <b>True</b>, the <b>Command</b> objects appear in the Commands Window tree view under "(undefined command)" when your client application becomes input-active. </p>
<p>
When the server receives input for one of your commands, it sends a <b>Command</b> event, and passes back the name of the <b>Command</b> as an attribute of the <b>UserInput</b> object. You can then use conditional statements to match and process the <b>Command</b>.</p>
<p>&nbsp;</p></body>
</HTML>

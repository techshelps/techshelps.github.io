<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Methods in Vtable Order</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="progagentsinterface2zip_21"></a>Methods in Vtable Order</h2>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=31%><b>IAgentNotifySink</b></td>
<td width=69%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=31%><b>Command</b></td>
<td width=69%>Occurs when the server processes a client-defined command.</td>
</tr>
<tr valign=top>
<td width=31%><b>ActivateInputState</b></td>
<td width=69%>Occurs when a character becomes or ceases to be input-active.</td>
</tr>
<tr valign=top>
<td width=31%><b>Restart</b></td>
<td width=69%>Occurs when the server restarts.</td>
</tr>
<tr valign=top>
<td width=31%><b>Shutdown</b></td>
<td width=69%>Occurs when the user exits the server.</td>
</tr>
<tr valign=top>
<td width=31%><b>VisibleState</b></td>
<td width=69%>Occurs when the character's <b>Visible</b> state changes.</td>
</tr>
<tr valign=top>
<td width=31%><b>Click</b></td>
<td width=69%>Occurs when a character is clicked.</td>
</tr>
<tr valign=top>
<td width=31%><b>DblClick</b></td>
<td width=69%>Occurs when a character is double-clicked.</td>
</tr>
<tr valign=top>
<td width=31%><b>DragStart</b></td>
<td width=69%>Occurs when a user starts dragging a character.</td>
</tr>
<tr valign=top>
<td width=31%><b>DragComplete</b></td>
<td width=69%>Occurs when a user stops dragging a character. </td>
</tr>
<tr valign=top>
<td width=31%><b>RequestStart</b></td>
<td width=69%>Occurs when the server begins processing a <b>Request</b> object.</td>
</tr>
<tr valign=top>
<td width=31%><b>RequestComplete</b></td>
<td width=69%>Occurs when the server completes processing a <b>Request</b> object.</td>
</tr>
<tr valign=top>
<td width=31%><b>Bookmark</b></td>
<td width=69%>Occurs when the server processes a bookmark.</td>
</tr>
<tr valign=top>
<td width=31%><b>Idle</b></td>
<td width=69%>Occurs when the server starts or ends idle processing.</td>
</tr>
<tr valign=top>
<td width=31%><b>Move</b></td>
<td width=69%>Occurs when a character has been moved.</td>
</tr>
<tr valign=top>
<td width=31%><b>Size</b></td>
<td width=69%>Occurs when a character has been resized.</td>
</tr>
<tr valign=top>
<td width=31%><b>BalloonVisibleState</b></td>
<td width=69%>Occurs when the visibility state of a character's word balloon changes.</td>
</tr>
</table><br>
<p>
<b>IAgentNotifySink::ActivateInputState</b></p>
<pre><code>HRESULT ActivateInputState(
   long dwCharID,   // character ID
   long bActivated  // input activation flag
);                          
</code></pre>
<p>
Notifies a client application that a character's input active state changed. 
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwCharID</i></p>
<p class=indent1>
Identifier of the character whose input activation state changed. </p>
<p>
<i>bActivated</i></p>
<p class=indent1>
Input active flag. This Boolean value is TRUE if the character referred to by <i>dwCharID</i> became input active; and FALSE if the character lost its input active state.</p>
<p>
See also <b>IAgentCharacter::SetInputActive</b>, <b>IAgentCharacter::GetInputActive</b></p>
<p>
</p>
<p>
<b>IAgentNotifySink:: BalloonVisibleState</b></p>
<pre><code>HRESULT BalloonVisibleState(
   long dwCharID,  // character ID
   long bVisible   // visibility flag
);                          
</code></pre>
<p>
Notifies a client application when the visibility state of the character's word balloon changes.
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwCharID</i></p>
<p class=indent1>
Identifier of the character whose word balloon's visibility state has changed.</p>
<p>
<i>bVisible</i></p>
<p class=indent1>
Visibility flag. This Boolean value is TRUE when character's word balloon becomes visible; and FALSE when it becomes hidden.</p>
<p>
This event is sent to all clients of the character.</p>
<p>
<b>IAgentNotifySink::Bookmark</b></p>
<pre><code>HRESULT Bookmark(
   long dwBookMarkID  // bookmark ID
);                          
</code></pre>
<p>
Notifies a client application when its bookmark completes.
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwBookMarkID</i></p>
<p class=indent1>
Identifier of the bookmark that resulted in triggering the event. </p>
<p>
When you include bookmark tags in a <b>Speak</b> method, you can track when they occur with this event.</p>
<p>
See also <b>IAgentCharacter::Speak</b>, Speech Output Tags</p>
<p>
</p>
<p>
<b>IAgentNotifySink::Click</b></p>
<pre><code>HRESULT Click(
   long dwCharID,  // character ID
   short fwKeys,   // mouse button and modifier key state
   long x,         // x coordinate of mouse pointer
   long y          // y coordinate of mouse pointer
);                          
</code></pre>
<p>
Notifies a client application when the user clicks a character.
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwCharID</i></p>
<p class=indent1>
Identifier of the clicked character. </p>
<p>
<i>fwKeys</i></p>
<p class=indent1>
A parameter that indicates the mouse button and modifier key state. The parameter can return any combination of the following:</p>
<p class=indent1>
0x0001   Left Button</p>
<p class=indent1>
0x0010   Middle Button</p>
<p class=indent1>
0x0002   Right Button</p>
<p class=indent1>
0x0004   Shift Key Down</p>
<p class=indent1>
0x0008   Control Key Down</p>
<p class=indent1>
0x0020   Alt Key Down</p>
<p>
x</p>
<p class=indent1>
The x-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</p>
<p>
y</p>
<p class=indent1>
The y-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</p>
<p>
</p>
<p>
<b>IAgentNotifySink::Command</b></p>
<pre><code>HRESULT Command(
   long dwCommandID,         // Command ID of the best match
   IUnknown * punkUserInput  // address of IAgentUserInput object 
);                          
</code></pre>
<p>
Notifies a client application that a Command was selected by the user. 
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwCommandID</i></p>
<p class=indent1>
Identifier of the best match command alternative.</p>
<p>
<i>punkUserInput</i></p>
<p class=indent1>
Address of the IUnknown interface for the <b>IAgentUserInput</b> object.</p>
<p>
Use QueryInterface to retrieve the <b>IAgentUserInput</b> interface. </p>
<p>
See also <b>IAgentUserInput</b></p>
<p>
</p>
<p>
<b>IAgentNotifySink::DblClick</b></p>
<pre><code>HRESULT DblClick(
   long dwCharID,  // character ID
   short fwKeys,   // mouse button and modifier key state
   long x,         // x coordinate of mouse pointer
   long y          // y coordinate of mouse pointer
);                          
</code></pre>
<p>
Notifies a client application when the user double-clicks a character.
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwCharID</i></p>
<p class=indent1>
Identifier of the double-clicked character. </p>
<p>
<i>fwKeys</i></p>
<p class=indent1>
A parameter that indicates the mouse button and modifier key state. The parameter can return any combination of the following:</p>
<p class=indent1>
</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>0x0001   </td>
<td width=59%>Left Button</td>
</tr>
<tr valign=top>
<td width=41%>0x0010   </td>
<td width=59%>Middle Button</td>
</tr>
<tr valign=top>
<td width=41%>0x0002   </td>
<td width=59%>Right Button</td>
</tr>
<tr valign=top>
<td width=41%>0x0004   </td>
<td width=59%>Shift Key Down</td>
</tr>
<tr valign=top>
<td width=41%>0x0008   </td>
<td width=59%>Control Key Down</td>
</tr>
<tr valign=top>
<td width=41%>0x0020   </td>
<td width=59%>Alt Key Down</td>
</tr>
</table><br>
<p>
x</p>
<p class=indent1>
The x-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</p>
<p>
y</p>
<p class=indent1>
The y-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</p>
<p>
</p>
<p>
<b>IAgentNotifySink::DragComplete</b></p>
<pre><code>HRESULT DragComplete(
   long dwCharID,  // character ID
   short fwKeys,   // mouse button and modifier key state
   long x,         // x-coordinate of mouse pointer
   long y          // y-coordinate of mouse pointer
);                          
</code></pre>
<p>
Notifies a client application when the user stops dragging a character.
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwCharID</i></p>
<p class=indent1>
Identifier of the dragged character. </p>
<p>
<i>fwKeys</i></p>
<p class=indent1>
A parameter that indicates the mouse button and modifier key state. The parameter can return any combination of the following:</p>
<p class=indent1>
</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=40%>0x0001   </td>
<td width=60%>Left Button</td>
</tr>
<tr valign=top>
<td width=40%>0x0010   </td>
<td width=60%>Middle Button</td>
</tr>
<tr valign=top>
<td width=40%>0x0002   </td>
<td width=60%>Right Button</td>
</tr>
<tr valign=top>
<td width=40%>0x0004   </td>
<td width=60%>Shift Key Down</td>
</tr>
<tr valign=top>
<td width=40%>0x0008   </td>
<td width=60%>Control Key Down</td>
</tr>
<tr valign=top>
<td width=40%>0x0020   </td>
<td width=60%>Alt Key Down</td>
</tr>
</table><br>
<p>
x</p>
<p class=indent1>
The x-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</p>
<p>
y</p>
<p class=indent1>
The y-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</p>
<p>
</p>
<p>
<b>IAgentNotifySink::DragStart</b></p>
<pre><code>HRESULT DragStart(
   long dwCharID,  // character ID
   short fwKeys,   // mouse button and modifier key state
   long x,         // x-coordinate of mouse pointer
   long y          // y-coordinate of mouse pointer
);                          
</code></pre>
<p>
Notifies a client application when the user starts dragging a character.
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwCharID</i></p>
<p class=indent1>
Identifier of the dragged character. </p>
<p>
<i>fwKeys</i></p>
<p class=indent1>
A parameter that indicates the mouse button and modifier key state. The parameter can return any combination of the following:</p>
<p class=indent1>
</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>0x0001   </td>
<td width=59%>Left Button</td>
</tr>
<tr valign=top>
<td width=41%>0x0010   </td>
<td width=59%>Middle Button</td>
</tr>
<tr valign=top>
<td width=41%>0x0002   </td>
<td width=59%>Right Button</td>
</tr>
<tr valign=top>
<td width=41%>0x0004   </td>
<td width=59%>Shift Key Down</td>
</tr>
<tr valign=top>
<td width=41%>0x0008   </td>
<td width=59%>Control Key Down</td>
</tr>
<tr valign=top>
<td width=41%>0x0020   </td>
<td width=59%>Alt Key Down</td>
</tr>
</table><br>
<p>
<i>x</i></p>
<p class=indent1>
The x-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</p>
<p>
<i>y</i></p>
<p class=indent1>
The y-coordinate of the mouse pointer in pixels, relative to the screen origin (upper left).</p>
<p>
</p>
<p>
<b>IAgentNotifySink::Idle</b></p>
<pre><code>HRESULT Idle(
   long dwCharID,  // character ID
   long bStart     // start flag
);                          
</code></pre>
<p>
Notifies a client application when a character's <b>Idling</b> state has changed.
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwCharID</i></p>
<p class=indent1>
Identifier of the request that started. </p>
<p>
<i>bStart</i></p>
<p class=indent1>
Start flag. This Boolean value is TRUE when the character begins idling and FALSE when it stops idling.</p>
<p>
This event enables you to track when the Microsoft Agent server starts or stops idle processing for a character.</p>
<p>
See also <b>IAgentCharacter::GetIdleOn</b>, <b>IAgentCharacter::SetIdleOn</b></p>
<p>
<b>IAgentNotifySink:: Move</b></p>
<pre><code>HRESULT Move(
   long dwCharID,  // character ID
   long x,         // x-coordinate of new location
   long y,         // y-coordinate of new location
   long dwCause    // cause of move state
);                          
</code></pre>
<p>
Notifies a client application when the character has been moved.
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwCharID</i></p>
<p class=indent1>
Identifier of the character that has been moved.</p>
<p>
<i>x</i></p>
<p class=indent1>
The x-coordinate of the new position in pixels, relative to the screen origin (upper left). The location of a character is based on the upper left corner of its animation frame.</p>
<p>
<i>y</i></p>
<p class=indent1>
The y-coordinate of the new position in pixels, relative to the screen origin (upper left). The location of a character is based on the upper left corner of its animation frame.</p>
<p>
<i>dwCause</i></p>
<p class=indent1>
The cause of the character move. The parameter may be one of the following:</p>
<p class=indent1>
</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=53%><b>const unsigned short NeverMoved = 0;</b></td>
<td width=47%>Character has not been moved.</td>
</tr>
<tr valign=top>
<td width=53%><b>const unsigned short UserMoved = 1;</b></td>
<td width=47%>User dragged the character.</td>
</tr>
<tr valign=top>
<td width=53%><b>const unsigned short ProgramMoved = 2;</b></td>
<td width=47%>Your application moved the character.</td>
</tr>
<tr valign=top>
<td width=53%><b>const unsigned short OtherProgramMoved = 3;</b></td>
<td width=47%>Another application moved the character.</td>
</tr>
</table><br>
<p>
This event is sent to all clients of the character.</p>
<p>
See also <b>IAgentCharacter::GetMoveCause</b>, <b>IAgentCharacter::MoveTo</b></p>
<p>
<b>IAgentNotifySink::RequestComplete</b></p>
<pre><code>HRESULT RequestComplete(
   long dwRequestID,  // request ID
   long hrStatus      // status code
);                          
</code></pre>
<p>
Notifies a client application when a request completes.
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwRequestID</i></p>
<p class=indent1>
Identifier of the request that started. </p>
<p>
<i>hrStatus</i></p>
<p class=indent1>
Status code. This parameters returns the status code for the request. </p>
<p>
This event enables you to track when a queued method completes.</p>
<p>
See also <b>IAgentNotifySink::RequestStart</b>, <b>IAgent::Load</b>, <b>IAgentCharacter::GestureAt</b>, <b>IAgentCharacter::Hide</b>, <b>IAgentCharacter::Interrupt</b>, <b>IAgentCharacter::MoveTo</b>, <b>IAgentCharacter::Prepare</b>, <b>IAgentCharacter::Play</b>, <b>IAgentCharacter::Show</b>, <b>IAgentCharacter::Speak</b>, <b>IAgentCharacter::Wait</b></p>
<p>
</p>
<p>
<b>IAgentNotifySink::RequestStart</b></p>
<pre><code>HRESULT RequestStart(
   long dwRequestID  // request ID
);                          
</code></pre>
<p>
Notifies a client application when a request begins.
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwRequestID</i></p>
<p class=indent1>
Identifier of the request that started. </p>
<p>
This event enables you to track when a queued request begins.</p>
<p>
See also <b>IAgentNotifySink::RequestComplete</b>, <b>IAgent::Load</b>, <b>IAgentCharacter::GestureAt</b>, <b>IAgentCharacter::Hide</b>, <b>IAgentCharacter::Interrupt</b>, <b>IAgentCharacter::MoveTo</b>, <b>IAgentCharacter::Prepare</b>, <b>IAgentCharacter::Play</b>, <b>IAgentCharacter::Show</b>, <b>IAgentCharacter::Speak</b>, <b>IAgentCharacter::Wait</b></p>
<p>
</p>
<p>
<b>IAgentNotifySink::Restart</b></p>
<pre><code>HRESULT Restart();                          
</code></pre>
<p>
Notifies a client application that the Microsoft Agent server restarted. 
<ul>
<li>
No return value.</li>
</ul>
<p>
See also <b>IAgentNotifySink::Shutdown</b></p>
<p>
</p>
<p>
<b>IAgentNotifySink::Shutdown</b></p>
<pre><code>HRESULT Shutdown();                          
</code></pre>
<p>
Notifies a client application that the Microsoft Agent server shut down. 
<ul>
<li>
No return value.</li>
</ul>
<p>
This event fires only when the user explicitly chooses the Exit command on the pop-up menu of the Microsoft Agent taskbar icon. Requests sent after the server shuts down will fail.</p>
<p>
See also <b>IAgentNotifySink::Restart</b></p>
<p>
<b>IAgentNotifySink:: Size</b></p>
<pre><code>HRESULT Size(
   long dwCharID,  // character ID
   long lWidth,    // new width
   long lHeight,   // new height
);                          
</code></pre>
<p>
Notifies a client application when the character has been resized.
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwCharID</i></p>
<p class=indent1>
Identifier of the character that has been resized.</p>
<p>
<i>lWidth</i></p>
<p class=indent1>
The width of the character's animation frame in pixels.</p>
<p>
<i>lHeight</i></p>
<p class=indent1>
The height of the character's animation frame in pixels.</p>
<p>
This event is sent to all clients of the character.</p>
<p>
See also <b>IAgentCharacter::GetSize</b>, <b>IAgentCharacter::SetSize</b></p>
<p>
</p>
<p>
<b>IAgentNotifySink::VisibleState</b></p>
<pre><code>HRESULT VisibleState(
   long dwCharID,  // character ID
   long bVisible,  // visibility flag
   long dwCause,   // cause of visible state
);                          
</code></pre>
<p>
Notifies a client application when the visibility state of the character changes.
<ul>
<li>
No return value.</li>
</ul>
<p>
<i>dwCharID</i></p>
<p class=indent1>
Identifier of the character whose visibility state is changed. </p>
<p>
<i>bVisible</i></p>
<p class=indent1>
Visibility flag.  This Boolean value is TRUE when character becomes visible and FALSE when the character becomes hidden.</p>
<p>
<i>dwCause</i></p>
<p class=indent1>
Cause of last change to the character's visibility state. The parameter may be one of the following:</p>
<p class=indent1>
</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=59%><b>const unsigned short NeverShown = 0;</b></td>
<td width=41%>Character has not been shown.</td>
</tr>
<tr valign=top>
<td width=59%><b>const unsigned short UserHid = 1;</b></td>
<td width=41%>User hid the character.</td>
</tr>
<tr valign=top>
<td width=59%><b>const unsigned short UserShowed = 2;</b></td>
<td width=41%>User showed the character.</td>
</tr>
<tr valign=top>
<td width=59%><b>const unsigned short ProgramHid = 3;</b></td>
<td width=41%>Your application hid the character.</td>
</tr>
<tr valign=top>
<td width=59%><b>const unsigned short ProgramShowed = 4;</b></td>
<td width=41%>Your application showed the character.</td>
</tr>
<tr valign=top>
<td width=59%><b>const unsigned short OtherProgramHid = 5;</b></td>
<td width=41%>Another application hid the character.</td>
</tr>
<tr valign=top>
<td width=59%><b>const unsigned short OtherProgramShowed = 6;</b></td>
<td width=41%>Another application showed the character.</td>
</tr>
</table><br>
<p>
See also <b>IAgentCharacter::GetVisible</b>, <b>IAgentCharacter::SetVisible</b>, <b>IAgentCharacter::GetVisibilityCause</b></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

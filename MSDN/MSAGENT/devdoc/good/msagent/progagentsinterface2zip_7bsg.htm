<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IAgent</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="progagentsinterface2zip_10"></a>IAgent</h2>
<p>
<b>IAgent</b> defines an interface that allows applications to load characters, receive events, and check the current state of the Microsoft Agent Server.</p>
<h4>Methods in Vtable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=33%><b>IAgent Methods</b></td>
<td width=67%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%><b>Load</b></td>
<td width=67%>Loads a character's data file.</td>
</tr>
<tr valign=top>
<td width=33%><b>Unload</b></td>
<td width=67%>Unloads a character's data file.</td>
</tr>
<tr valign=top>
<td width=33%><b>Register</b></td>
<td width=67%>Registers a notification sink for the client.</td>
</tr>
<tr valign=top>
<td width=33%><b>Unregister</b></td>
<td width=67%>Unregisters a client's notification sink.</td>
</tr>
<tr valign=top>
<td width=33%><b>GetCharacter</b></td>
<td width=67%>Returns the IAgentCharacter interface for a loaded character.</td>
</tr>
<tr valign=top>
<td width=33%><b>GetSuspended</b></td>
<td width=67%>Returns whether the server is currently suspended.</td>
</tr>
</table><br>
<p>
<b>IAgent::GetCharacter</b></p>
<pre><code>HRESULT GetCharacter(
   long dwCharID  // character ID
);
</code></pre>
<p>
Retrieves the <b>IAgentCharacter</b> for a loaded character. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>DwCharID </i></p>
<p class=indent1>
The character's ID.</p>
<p>
<b>IAgent::GetSuspended</b></p>
<pre><code>HRESULT GetSuspended(
   long * pbSuspended  // address of variable for suspended flag
);
</code></pre>
<p>
Retrieves whether the Microsoft Agent server is currently suspended.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbSuspended</i></p>
<p class=indent1>
Address of a variable that receives TRUE if the Microsoft Agent server is in the suspended state and FALSE if not.</p>
<p>
Microsoft Agent loads in a suspended state when a client application attempts to start it up after the user has previously quit (by choosing the Exit command on the Microsoft Agent taskbar icon). In the suspended state Microsoft Agent handles connection requests, but returns failure on any animation methods. Therefore, a character cannot be displayed in this state. Client applications can advise users to restart the server (by choosing Restart on the taskbar pop-up menu), but cannot restart the server directly.</p>
<p>
</p>
<p>
<b>IAgent::Load</b></p>
<pre><code>HRESULT Load(
   VARIANT vLoadKey,  // data provider
   long * pdwCharID,  // address of a variable for character ID
   long * pdwReqID    // address of a variable for request ID
);
</code></pre>
<p>
Loads a character into the <b>Characters</b> collection. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>vLoadKey</i></p>
<p class=indent1>
A variant datatype that must be one of the following:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=19%><i>filespec</i></td>
<td width=81%>The local file location of the specified character's definition file.</td>
</tr>
<tr valign=top>
<td width=19%><i>URL</i></td>
<td width=81%>The HTTP address for the character's definition file.</td>
</tr>
<tr valign=top>
<td width=19%><i>provider</i></td>
<td width=81%>An alternate character definition provider.</td>
</tr>
</table><br>
<p>
<i>pdwCharID</i></p>
<p class=indent1>
Address of a variable that receives the character's ID.</p>
<p>
<i>pdwReqID</i></p>
<p class=indent1>
Address of a variable that receives  the <b>Load</b> request ID.</p>
<p>
Microsoft Agent's data provider supports loading character data stored as a single structured file (.ACS) with character data and animation data together, or as separate character data (.ACF) and animation (.AAF) files. Generally, use the single structured .ACS file to load a character that is stored on a local disk drive or network and accessed using conventional file protocol (such as UNC pathnames). Use the separate .ACF and .AAF files when you want to load the animation files individually from a remote site where they are accessed using HTTP protocol. </p>
<p>
For .ACS files, using the <b>Load</b> method provides access a character's animations. For .ACF files, you also use the <b>Prepare</b> method to load animation data. The <b>Load</b> method does not support downloading .ACS files from an HTTP site.</p>
<p>
Loading a character does not automatically display the character. Use the <b>Show</b> method first to make the character visible.</p>
<p>
The <i>vLoadKey</i> parameter also enables you specify your own data provider (that would be loaded separately) that can have its own methods for loading animation data. You need to create a data provider object only if you supply character data in special formats. </p>
<p>
</p>
<p>
<b>IAgent::Register</b></p>
<pre><code>HRESULT Register(
   IUnknown * punkNotifySink  // IUnknown address for client notification sink
   long * pdwSinkID           // address of the notification sink ID
);
</code></pre>
<p>
Registers a notification sink for the client application. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>IUnknown</i></p>
<p class=indent1>
Address of <b>IUnknown</b> for your notification sink interface.</p>
<p>
<i>pdwSinkID</i></p>
<p class=indent1>
Address of notification sink ID (used to unregister the notification sink).</p>
<p>
You need to register your notification sink (also known as a notify sink or event sink) to receive events from the Microsoft Agent server.</p>
<p>
See also <b>IAgent::Unregister</b></p>
<p>
</p>
<p>
<b>IAgent::UnLoad</b></p>
<pre><code>HRESULT UnLoad(
   long * dwCharID  //character ID
);
</code></pre>
<p>
Unloads the character data for the specified character from the <b>Characters</b> collection. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>dwCharID</i></p>
<p class=indent1>
The character's ID.</p>
<p>
Use this method when you no longer need a character, to free up memory used to store information about the character. If you access the character again, use the <b>Load</b> method.</p>
<p>
See also <b>IAgent::Load</b></p>
<p>
</p>
<p>
<b>IAgent::Unregister</b></p>
<pre><code>HRESULT Unregister(
   long dwSinkID  //notification sink ID
);
</code></pre>
<p>
Unloads the character data for the specified character from the <b>Characters</b> collection. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>dwSinkID</i></p>
<p class=indent1>
The notification sink ID.</p>
<p>
Use this method when you no longer need Microsoft Agent services, such as when your application shuts down.</p>
<p>
See also <b>IAgent::Register</b></p>
<p>&nbsp;</p></body>
</HTML>

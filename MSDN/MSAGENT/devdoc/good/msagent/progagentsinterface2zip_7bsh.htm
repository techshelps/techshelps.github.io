<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IAgentCharacter</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="progagentsinterface2zip_11"></a>IAgentCharacter</h2>
<p>
<b>IAgentCharacter</b> defines an interface that allows applications to query character properties and play animations.</p>
<h4>Methods in Vtable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=31%><b>IAgentCharacter Methods</b></td>
<td width=69%>Description</td>
</tr>
<tr valign=top>
<td width=31%><b>GetVisible</b></td>
<td width=69%>Returns whether the character (frame) is currently visible.</td>
</tr>
<tr valign=top>
<td width=31%><b>SetPosition</b></td>
<td width=69%>Sets the position of the character frame.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetPosition</b></td>
<td width=69%>Returns the position of the character frame.</td>
</tr>
<tr valign=top>
<td width=31%><b>SetSize</b></td>
<td width=69%>Sets the size of the character frame.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetSize</b></td>
<td width=69%>Returns the size of the character frame.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetName</b></td>
<td width=69%>Returns the name of the character.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetDescription</b></td>
<td width=69%>Returns the description for the character.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetTTSSpeed</b></td>
<td width=69%>Returns the current TTS output speed setting for the character.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetTTSPitch</b></td>
<td width=69%>Returns the current TTS pitch setting for the character.</td>
</tr>
<tr valign=top>
<td width=31%><b>Activate</b></td>
<td width=69%>Sets whether a client is active or a character is topmost.</td>
</tr>
<tr valign=top>
<td width=31%><b>SetIdleOn</b></td>
<td width=69%>Sets the server's idle processing.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetIdleOn</b></td>
<td width=69%>Returns the setting of the server's idle processing.</td>
</tr>
<tr valign=top>
<td width=31%><b>Prepare</b></td>
<td width=69%>Retrieves animation data for the character.</td>
</tr>
<tr valign=top>
<td width=31%><b>Play</b></td>
<td width=69%>Plays a specified animation.</td>
</tr>
<tr valign=top>
<td width=31%><b>Stop</b></td>
<td width=69%>Stops an animation for a character.</td>
</tr>
<tr valign=top>
<td width=31%><b>StopAll</b></td>
<td width=69%>Stops all animations for a character.</td>
</tr>
<tr valign=top>
<td width=31%><b>Wait</b></td>
<td width=69%>Holds the character's animation queue.</td>
</tr>
<tr valign=top>
<td width=31%><b>Interrupt</b></td>
<td width=69%>Interrupts a character's animation.</td>
</tr>
<tr valign=top>
<td width=31%><b>Show</b></td>
<td width=69%>Displays the character and plays the character's <b>Showing</b> state animation.</td>
</tr>
<tr valign=top>
<td width=31%><b>Hide</b></td>
<td width=69%>Plays the character's <b>Hiding</b> state animation and hides the character's frame.</td>
</tr>
<tr valign=top>
<td width=31%><b>Speak</b></td>
<td width=69%>Plays spoken output for the character.</td>
</tr>
<tr valign=top>
<td width=31%><b>MoveTo</b></td>
<td width=69%>Moves the character frame to the specified location.</td>
</tr>
<tr valign=top>
<td width=31%><b>GestureAt</b></td>
<td width=69%>Plays a gesturing animation based on the specified location.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetMoveCause</b></td>
<td width=69%>Retrieves the cause of the character's last move.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetVisibilityCause</b></td>
<td width=69%>Retrieves the cause of the last change to the character's visibility state.</td>
</tr>
<tr valign=top>
<td width=31%><b>HasOtherClients</b></td>
<td width=69%>Retrieves whether the character has other current clients.</td>
</tr>
<tr valign=top>
<td width=31%><b>SetSoundEffectsOn</b></td>
<td width=69%>Determines whether a character animation's sound effects play.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetSoundEffectsOn</b></td>
<td width=69%>Retrieves whether a character's sound effects setting is enabled.</td>
</tr>
<tr valign=top>
<td width=31%><b>SetName</b></td>
<td width=69%>Sets the character's name.</td>
</tr>
<tr valign=top>
<td width=31%><b>SetDescription</b></td>
<td width=69%>Sets the character's description.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetExtraData</b></td>
<td width=69%>Retrieves additional data stored with the character.</td>
</tr>
</table><br>
<p>
<b>IAgentCharacter::Activate</b></p>
<pre><code>HRESULT Activate(
   short sState, // topmost character or client setting
);
</code></pre>
<p>
Sets whether a client is active or a character is topmost.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
<li>
Returns S_FALSE to indicate the operation was not successful.</li>
</ul>
<p>
<i>sState</i></p>
<p class=indent1>
You can specify the following values for this parameter:</p>
<p class=indent1>
0Set as not the active client.</p>
<p class=indent1>
1Set as the active client. </p>
<p class=indent1>
2Make the topmost character.</p>
<p>
When multiple characters are visible, only one of the characters receives speech input at a time. Similarly, when multiple client applications share the same character, only one of the clients receives mouse input (for example, Microsoft Agent control click or drag events) at a time. The character set to receive mouse and speech input is the topmost character and the client that receives input is the character's active client. (The topmost character's window also appears at the top of the character window's z-order.) Typically, the user determines which character is topmost by explicitly selecting it. However, topmost activation also changes when a character is shown or hidden (the character becomes or is no longer topmost, respectively.) </p>
<p>
You can also use this method to explicitly manage when your client receives input directed to the character, such as when your application itself becomes active. For example, setting <b>State</b> to 2 makes the character topmost, and your client receives all mouse and speech input events generated from user interaction with the character. Therefore, it also makes your client the input-active client of the character. However, you can also set the active client for a character without making the character topmost, by setting <b>State</b> to 1. This enables your client to receive input directed to that character when the character becomes topmost. Similarly, you can set your client to not be the active client (to not receive input) when the character becomes topmost, by setting <b>State</b> to 0. You can determine if a character has other current clients using <b>IAgentCharacter::HasOtherClients</b>.</p>
<p>
Avoid calling this method directly after a <b>Show</b> method. <b>Show</b> automatically sets the input-active client. When the character is hidden, the <b>Activate</b> call may fail if it gets processed before the <b>Show</b> method completes.</p>
<p>
If you call this method to a function, it returns a Boolean value that indicates whether the method succeeded. Attempting to call this method with the <b>State</b> parameter set to 2 when the specified character is hidden will fail. Similarly, if you set <b>State</b> to 0 and your application is the only client, this call fails because a character must always have a topmost client.</p>
<p>
See also <b>IAgentCharacter::HasOtherClients</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::GestureAt</b></p>
<pre><code>HRESULT GestureAt(
   short x,         // x-coordinate of specified location
   short y,         // y-coordinate of specified location
   long * pdwReqID  // address of a request ID
);
</code></pre>
<p>
Plays the associated <b>Gesturing</b> state animation based on the specified location. 
<ul>
<li>
Returns S_OK to indicate the operation was successful. When the function returns, <i>pdwReqID</i> contains the ID of the request.</li>
</ul>
<p>
<i>x</i></p>
<p class=indent1>
The x-coordinate of the specified location in pixels, relative to the screen origin (upper left). </p>
<p>
<i>y</i></p>
<p class=indent1>
The y-coordinate of the specified location in pixels, relative to the screen origin (upper left). </p>
<p>
<i>pdwReqID</i></p>
<p class=indent1>
Address of a variable that receives the <b>GestureAt</b> request ID.</p>
<p>
The server automatically determines and plays the appropriate gesturing animation based on the character's current position and the specified location. When using the HTTP protocol to access character and animation data, use the <b>Prepare</b> method to ensure that the animations are available before calling this method. </p>
<p>
</p>
<p>
<b>IAgentCharacter::GetDescription</b></p>
<pre><code>HRESULT GetDescription(
   BSTR * pbszDescription   // address of buffer for character description
); 
</code></pre>
<p>
Retrieves the description of the character.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbszDescription</i></p>
<p class=indent1>
The address of a BSTR that receives the value of the description for the character. A character's description is defined when it is compiled with the Microsoft Agent Character Editor. The description setting is optional and may not be supplied for all characters.</p>
<p class=indent1>
</p>
<p>
<b>IAgentCharacter::GetExtraData</b></p>
<pre><code>HRESULT GetExtraData(
   BSTR * pbszExtraData   // address of buffer for additional character data
); 
</code></pre>
<p>
Retrieves additional data stored as part of the character.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbszExtraData</i></p>
<p class=indent1>
The address of a BSTR that receives the value of the additional data for the character. A character's additional data is defined when it is compiled with the Microsoft Agent Character Editor. A character developer can supply this string by editing the .ACD file for a character. The setting is optional and may not be supplied for all characters, nor can the data be defined or changed at run time. In addition, the meaning of the data supplied is defined by the character developer.</p>
<p>
<b>IAgentCharacter::GetIdleOn</b></p>
<pre><code>HRESULT GetIdleOn(
   long * pbOn  // address of idle processing flag
);
</code></pre>
<p>
Indicates the automatic idle processing state for a character.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbOn</i></p>
<p class=indent1>
Address of a variable that receives TRUE if the Microsoft Agent server automatically plays <b>Idling </b>state animations for a character and FALSE if not.</p>
<p>
See also <b>IAgentCharacter::SetIdleOn</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::GetMoveCause</b></p>
<pre><code>HRESULT GetMoveCause(
   long * pdwCause  // address of variable for cause of character move
);
</code></pre>
<p>
Retrieves the cause of the character's last move.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pdwCause</i></p>
<p class=indent1>
Address of a variable that receives the cause of the character's last move and will be one of the following:</p>
<p class=indent1>
</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=57%><b>const unsigned short NeverMoved = 0;</b></td>
<td width=43%>Character has not been moved.</td>
</tr>
<tr valign=top>
<td width=57%><b>const unsigned short UserMoved = 1;</b></td>
<td width=43%>User dragged the character.</td>
</tr>
<tr valign=top>
<td width=57%><b>const unsigned short ProgramMoved = 2;</b></td>
<td width=43%>Your application moved the character.</td>
</tr>
<tr valign=top>
<td width=57%><b>const unsigned short OtherProgramMoved = 3;</b></td>
<td width=43%>Another application moved the character.</td>
</tr>
</table><br>
<p>
See also <b>IAgentNotifySink::Move</b></p>
<p>
<b>IAgentCharacter::GetName</b></p>
<pre><code>HRESULT GetName(
   BSTR * pbszName   // address of buffer for character name
);
</code></pre>
<p>
Retrieves the name of the character.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbszName</i></p>
<p class=indent1>
The address of a BSTR that receives the value of the name for the character. A character's default name is defined when it is compiled with the Microsoft Agent Character Editor. The name setting is optional and may not be supported for all characters. You can also set the character's name using <b>IAgentCharacter:SetName</b>; however, this changes the name for all current clients of the character.</p>
<p>
See also <b>IAgentCharacter::SetName</b> </p>
<p>
<b>IAgentCharacter::GetPosition</b></p>
<pre><code>HRESULT GetPosition(
   long * plLeft,  // address of variable for left edge of character 
   long * plTop    // address of variable for top edge of character 
);
</code></pre>
<p>
Retrieves the character's animation frame position. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>plLeft</i></p>
<p class=indent1>
Address of a variable that receives the screen coordinate of the character animation frame's left edge in pixels, relative to the screen origin (upper left).</p>
<p>
<i>plTop</i></p>
<p class=indent1>
Address of a variable that receives the screen coordinate of the character animation frame's top edge in pixels, relative to the screen origin (upper left).</p>
<p>
Even though the character appears in an irregularly shaped region window, the location of the character is based on its rectangular animation frame.</p>
<p>
See also <b>IAgentCharacter::SetPosition</b>, <b>IAgentCharacter::GetSize</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::GetSize</b></p>
<pre><code>HRESULT GetSize(
   long * plWidth,  // address of variable for character width 
   long * plHeight  // address of variable for character height
);
</code></pre>
<p>
Retrieves the size of the character's animation frame.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>plWidth</i></p>
<p class=indent1>
Address of a variable that receives the width of the character animation frame in pixels, relative to the screen origin (upper left).</p>
<p>
<i>plHeight</i></p>
<p class=indent1>
Address of a variable that receives the height of the character animation frame in pixels, relative to the screen origin (upper left).</p>
<p>
Even though the character appears in an irregularly shaped region window, the location of the character is based on its rectangular animation frame.</p>
<p>
See also <b>IAgent::SetSize</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::GetSoundEffectsOn</b></p>
<pre><code>HRESULT GetSoundEffectsOn(
   long * pbOn  // address of variable for sound effects setting 
);
</code></pre>
<p>
Retrieves whether the character's sound effects setting is enabled.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbOn</i></p>
<p class=indent1>
Address of a variable that receives TRUE if the character's sound effects setting is enabled, FALSE if disabled.</p>
<p>
The character's sound effects setting determines whether sound effects compiled as a part of the character are played when you play an associated animation. The setting is subject to the user's global sound effects setting in <b>IAgentAudioOutputProperties::GetUsingSoundEffects</b>.</p>
<p>
See also <b>IAgentCharacter::SetSoundEffectsOn</b>, <b>IAgentAudioOutputProperties::GetUsingSoundEffects</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::GetTTSPitch</b></p>
<pre><code>HRESULT GetTTSPitch(
   long * pdwPitch  // address of variable for character TTS pitch
);
</code></pre>
<p>
Retrieves the character's TTS output pitch setting.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pdwPitch</i></p>
<p class=indent1>
Address of a variable that receives the character's current TTS pitch setting in Hertz. </p>
<p>
Although your application cannot write this value, you can include pitch tags in your output text that will temporarily increase the pitch for a particular utterance. This method applies only to characters configured for TTS output. If the speech synthesis (TTS) engine is not enabled (or installed) or the character does not support TTS output, this method returns zero (0).</p>
<p>
</p>
<p>
<b>IAgentCharacter::GetTTSSpeed</b></p>
<pre><code>HRESULT GetTTSSpeed(
   long * pdwSpeed  // address of variable for character TTS output speed
);
</code></pre>
<p>
Retrieves the character's TTS output speed setting.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pdwSpeed</i></p>
<p class=indent1>
Address of a variable that receives the output speed of the character in words per minute. </p>
<p>
Although your application cannot write this value, you can include speed tags in your output text that will temporarily speed up the output for a particular utterance.</p>
<p>
This property returns the current speaking output speed setting for the character. For characters using TTS output, the property returns the actual TTS output for the character. If TTS is not enabled or the character does not support TTS output, the setting reflects the user setting for output speed. </p>
<p>
</p>
<p>
<b>IAgentCharacter::GetVisibilityCause</b></p>
<pre><code>HRESULT GetVisibilityCause(
   long * pdwCause  // address of variable for cause of character visible state
);
</code></pre>
<p>
Retrieves the cause of the character's visible state.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pdwCause</i></p>
<p class=indent1>
Address of a variable that receives the cause of the character's last visibility state change and will be one of the following:</p>
<p class=indent1>
</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=57%><b>const unsigned short NeverShown = 0;</b></td>
<td width=43%>Character has not been shown.</td>
</tr>
<tr valign=top>
<td width=57%><b>const unsigned short UserHid = 1;</b></td>
<td width=43%>User hid the character.</td>
</tr>
<tr valign=top>
<td width=57%><b>const unsigned short UserShowed = 2;</b></td>
<td width=43%>User showed the character.</td>
</tr>
<tr valign=top>
<td width=57%><b>const unsigned short ProgramHid = 3;</b></td>
<td width=43%>Your application hid the character.</td>
</tr>
<tr valign=top>
<td width=57%><b>const unsigned short ProgramShowed = 4;</b></td>
<td width=43%>Your application showed the character.</td>
</tr>
<tr valign=top>
<td width=57%><b>const unsigned short OtherProgramHid = 5;</b></td>
<td width=43%>Another application hid the character.</td>
</tr>
<tr valign=top>
<td width=57%><b>const unsigned short OtherProgramShowed = 6;</b></td>
<td width=43%>Another application showed the character.</td>
</tr>
</table><br>
<p>
See also <b>IAgentNotifySink::Hide</b>, <b>IAgentNotifySink::Show</b></p>
<p>
<b>IAgentCharacter::GetVisible</b></p>
<pre><code>HRESULT GetVisible(
   long * pbVisible  // address of variable for character Visible setting
);
</code></pre>
<p>
Determines whether the character's animation frame is currently visible. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbVisible</i></p>
<p class=indent1>
Address of a variable that receives TRUE if the character's frame is visible and FALSE if hidden.</p>
<p>
You can use this method to determine whether the character's frame is currently visible. To make a character visible, use the <b>Show</b> method. To hide a character, use the <b>Hide</b> method.</p>
<p>
</p>
<p>
<b>IAgentCharacter::HasOtherClients</b></p>
<pre><code>HRESULT HasOtherClients(
   long * pbHasOtherClients  // address of variable for whether character has
);                           // other clients
</code></pre>
<p>
Retrieves whether a character has other clients.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbHasOtherClients</i></p>
<p class=indent1>
Address of a variable that receives TRUE if the character has other clients and FALSE if not.</p>
<p>
<b>IAgentCharacter::Hide</b></p>
<pre><code>HRESULT Hide(
   long bFast,      // play Hiding state animation flag
   long * pdwReqID  // address of request ID
);
</code></pre>
<p>
Hides the character.
<ul>
<li>
Returns S_OK to indicate the operation was successful. When the function returns, <i>pdwReqID</i> contains the ID of the request.</li>
</ul>
<p>
<i>bFast</i></p>
<p class=indent1>
<b>Hiding</b> state animation flag. If this parameter is TRUE, the <b>Hiding</b> animation does not play before the character frame is hidden; if FALSE, the animation plays.</p>
<p>
<i>pdwReqID</i></p>
<p class=indent1>
Address of a variable that receives the <b>Hide</b> request ID.</p>
<p>
The server queues the animation associated with the <b>Hide</b> method in the character's queue. This allows you to use it to hide the character after a sequence of other animations. You can play the action immediately by using the <b>Stop</b> method before calling the <b>Hide</b> method.</p>
<p>
When using the HTTP protocol to access character and animation data, use the <b>Prepare</b> method to ensure the availability of the <b>Hiding</b> state animation before calling this method. </p>
<p>
Hiding a character can also result in triggering the <b>ActivateInput</b> event of another visible character. </p>
<p>
Hidden characters cannot access the audio channel. The server will pass back a failure status in the <b>RequestComplete</b> event if you generate an animation request and the character is hidden. </p>
<p>
See also <b>IAgentCharacter::Show</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::Interrupt</b></p>
<pre><code>HRESULT Interrupt(
   long dwReqID,    // request ID to interrupt
   long * pdwReqID  // address of request ID
);
</code></pre>
<p>
Interrupts the specified animation (request) of another character. 
<ul>
<li>
Returns S_OK to indicate the operation was successful. When the function returns, <i>pdwReqID</i> contains the ID of the request.</li>
</ul>
<p>
<i>dwReqID</i></p>
<p class=indent1>
An ID of the request to interrupt.</p>
<p>
<i>pdwReqID</i></p>
<p class=indent1>
Address of a variable that receives the <b>Interrupt</b> request ID.</p>
<p>
You can use this method to sync up animation between characters. For example, if another character is in a looping animation, this method will stop the looping animation and start the next animation in the character's queue. </p>
<p>
<b>Interrupt</b> halts the existing animation, but does not flush the character's animation queue. It starts the next animation in the character's queue. To halt and flush a character's queue, use the <b>Stop</b> method.</p>
<p>
You cannot use this method to have a character interrupt itself because the Microsoft Agent server queues the <b>Interrupt</b> method in the character's animation queue. Therefore, you can only use <b>Interrupt</b> to halt the animation of another character you have loaded. </p>
<p>
</p>
<p>
<b>IAgentCharacter::MoveTo</b></p>
<pre><code>HRESULT MoveTo(
   short x,         // x-coordinate of new location
   short y,         // y-coordinate of new location
   long lSpeed,     // speed to move the character
   long * pdwReqID  // address of request ID
);
</code></pre>
<p>
Plays the associated <b>Moving</b> state animation and moves the character frame to the specified location. 
<ul>
<li>
Returns S_OK to indicate the operation was successful. When the function returns, this variable contains the ID of the request.</li>
</ul>
<p>
<i>x</i></p>
<p class=indent1>
The x-coordinate of the new position in pixels, relative to the screen origin (upper left). The location of a character is based on the upper left corner of its animation frame. </p>
<p>
<i>y</i></p>
<p class=indent1>
The y-coordinate of the new position in pixels, relative to the screen origin (upper left). The location of a character is based on the upper left corner of its animation frame. </p>
<p>
<i>lSpeed</i></p>
<p class=indent1>
A parameter specifying in milliseconds how quickly the character's frame moves. The recommended  value is 1000. Specifying zero (0) moves the frame without playing an animation.</p>
<p>
<i>pdwReqID</i></p>
<p class=indent1>
Address of a variable that receives the <b>MoveTo</b> request ID.</p>
<p>
When using the HTTP protocol to access character and animation data, use the <b>Prepare</b> method to ensure the availability of the <b>Moving</b> state animations before calling this method. Even if the animation is not loaded, the server still moves the frame.</p>
<p>
See also <b>IAgentCharacter::SetPosition</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::Play</b></p>
<pre><code>HRESULT Play(
   BSTR bszAnimation,  // name of an animation
   long * pdwReqID     // address of request ID
);
</code></pre>
<p>
Plays the specified animation. 
<ul>
<li>
Returns S_OK to indicate the operation was successful. When the function returns, <i>pdwReqID</i> contains the ID of the request.</li>
</ul>
<p>
<i>bszAnimation</i></p>
<p class=indent1>
The name of an animation.</p>
<p>
<i>pdwReqID</i></p>
<p class=indent1>
Address of a variable that receives the <b>Play</b> request ID.</p>
<p>
An animation's name is defined when the character is compiled with the Microsoft Agent Character Editor. Before playing the specified animation, the server attempts to play the <b>Return</b> animation for the previous animation (if one has been assigned).</p>
<p>
When a character's animation data is stored on the user's local machine, you can use the <b>Play</b> method and specify the name of the animation. When using the HTTP protocol to access animation data, use the <b>Prepare</b> method to ensure the availability of the animation before calling this method.</p>
<p>
See also <b>IAgentCharacter::Prepare</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::Prepare</b></p>
<pre><code>HRESULT Prepare(
   long dwType,     // type of animation data to load
   BSTR bszName,    // name of the animation 
   long bQueue,     // queue the request
   long * pdwReqID  // address of request ID
);
</code></pre>
<p>
Retrieves animation data for a character. 
<ul>
<li>
Returns S_OK to indicate the operation was successful. When the function returns, <i>pdwReqID</i> contains the ID of the request.</li>
</ul>
<p>
<i>dwType</i></p>
<p class=indent1>
A value that indicates the animation data type to load that must be one of the following:</p>
<p class=indent1>
</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=58%><b>const unsigned short PREPARE_ANIMATION = 0;</b></td>
<td width=42%>A character's animation data. </td>
</tr>
<tr valign=top>
<td width=58%><b>const unsigned short PREPARE_STATE = 1;</b></td>
<td width=42%>A character's state data. </td>
</tr>
<tr valign=top>
<td width=58%><b>const unsigned short PREPARE_WAVE = 2</b></td>
<td width=42%>A character's sound file (.WAV or .LWV) for spoken output. </td>
</tr>
</table><br>
<p>
<i>bszName</i></p>
<p class=indent1>
The name of the animation or state. </p>
<p class=indent1>
The animation name is based on that defined for the character when it was saved using the Microsoft Agent Character Editor. </p>
<p class=indent1>
For states, the value can be one of the following:</p>
<p class=indent1>
</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=35%><b>"Gesturing"</b></td>
<td width=65%>To retrieve all <b>Gesturing</b> state animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"GesturingDown"</b></td>
<td width=65%>To retrieve <b>GesturingDown</b> animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"GesturingLeft"</b></td>
<td width=65%>To retrieve <b>GesturingLeft</b> animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"GesturingRight"</b></td>
<td width=65%>To retrieve <b>GesturingRight</b> animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"GesturingUp"</b></td>
<td width=65%>To retrieve <b>GesturingUp</b> animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"Hiding"</b></td>
<td width=65%>To retrieve the <b>Hiding</b> state animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"Hearing"</b></td>
<td width=65%>To retrieve the <b>Hearing</b> state animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"Idling"</b></td>
<td width=65%>To retrieve all <b>Idling</b> state animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"IdlingLevel1"</b></td>
<td width=65%>To retrieve all <b>IdlingLevel1</b> animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"IdlingLevel2"</b></td>
<td width=65%>To retrieve all <b>IdlingLevel2</b> animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"IdlingLevel3"</b></td>
<td width=65%>To retrieve all <b>IdlingLevel3</b> animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"Listening"</b></td>
<td width=65%>To retrieve the <b>Listening</b> state animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"Moving"</b></td>
<td width=65%>To retrieve all <b>Moving</b> state animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"MovingDown"</b></td>
<td width=65%>To retrieve all <b>Moving</b> animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"MovingLeft"</b></td>
<td width=65%>To retrieve all <b>MovingLeft</b> animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"MovingRight"</b></td>
<td width=65%>To retrieve all <b>MovingRight</b> animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"MovingUp"</b></td>
<td width=65%>To retrieve all <b>MovingUp</b> animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"Showing"</b></td>
<td width=65%>To retrieve the <b>Showing</b> state animations.</td>
</tr>
<tr valign=top>
<td width=35%><b>"Speaking"</b></td>
<td width=65%>To retrieve the <b>Speaking</b> state animations.</td>
</tr>
</table><br>
<p class=indent1>
For .WAV files, set <i>bszName</i> to the URL or file specification for the .WAV file. If the specification is not complete, it is interpreted as being relative to the specification used in the <b>Load</b> method. </p>
<p>
<i>bQueue</i></p>
<p class=indent1>
A Boolean specifying whether the server queues the <b>Prepare</b> request. TRUE queues the request and causes any animation request that follows it to wait until the animation data it specifies is loaded. FALSE retrieves the animation data asynchronously.</p>
<p>
<i>pdwReqID</i></p>
<p class=indent1>
Address of a variable that receives the <b>Prepare</b> request ID.</p>
<p>
You can specify multiple animations and states by separating them with commas. However, you cannot mix types in the same <b>Prepare</b> statement.</p>
<p>
</p>
<p>
<b>IAgentCharacter::SetDescription</b></p>
<pre><code>HRESULT SetDescription(
   BSTR bszDescription   // character description
); 
</code></pre>
<p>
Sets the description of the character.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>bszDescription</i></p>
<p class=indent1>
A BSTR that sets the description for the character. A character's default description is defined when it is compiled with the Microsoft Agent Character Editor. The description setting is optional and may not be supplied for all characters. You can change the character's description using <b>IAgentCharacter::SetDescription</b>; however, this value is not persistent (stored permanently). The character's description reverts to its default setting whenever the character is first loaded by a client.</p>
<p>
See also <b>IAgentCharacter::GetDescription</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::SetIdleOn</b></p>
<pre><code>HRESULT SetIdleOn(
   long bOn  // idle processing flag
);
</code></pre>
<p>
Sets automatic idle processing for a character.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>bOn</i></p>
<p class=indent1>
Idle processing flag. If this parameter is TRUE, the Microsoft Agent automatically plays <b>Idling</b> state animations. </p>
<p>
The server automatically sets a time out after the last animation played for a character. When this timer's interval is complete, the server begins the <b>Idling</b> states for a character, playing its associated <b>Idling</b> animations at regular intervals. If you want to manage the <b>Idling</b> state animations yourself, set the property to FALSE.</p>
<p>
See also <b>IAgentCharacter::GetIdleOn</b></p>
<p>
<b>IAgentCharacter::SetName</b></p>
<pre><code>HRESULT SetName(
   BSTR bszName   // character name
);
</code></pre>
<p>
Sets the name of the character.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>bszName</i></p>
<p class=indent1>
A BSTR that sets the character's name. A character's default name is defined when it is compiled with the Microsoft Agent Character Editor. You can change it using <b>IAgentCharacter::SetName</b>; however, this changes the character name for all current clients of the character. This property is not persistent (stored permanently). The character's name reverts to its default name whenever the character is first loaded by a client.</p>
<p class=indent1>
The server uses the character's name setting in parts of the Microsoft Agent's interface, such as the Commands Window title when the character is input-active and in the Microsoft Agent taskbar pop-up menu.</p>
<p>
See also <b>IAgentCharacter::GetName</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::SetPosition</b></p>
<pre><code>HRESULT SetPosition(
   long lLeft,  // screen coordinate of the left edge of character 
   long lTop    // screen coordinate of the top edge of character 
);
</code></pre>
<p>
Sets the position of the character's animation frame. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>lLeft</i></p>
<p class=indent1>
Screen coordinate of the character animation frame's left edge in pixels, relative to the screen origin (upper left).</p>
<p>
<i>lTop</i></p>
<p class=indent1>
Screen coordinate of the character animation frame's top edge in pixels, relative to the screen origin (upper left).</p>
<p>
Even though the character appears in an irregularly shaped region window, the location of the character is based on its rectangular animation frame.</p>
<p>
<b>Note</b>Unlike the <b>MoveTo</b> method, this function is not queued.</p>
<p>
See also <b>IAgent::GetPosition</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::SetSize</b></p>
<pre><code>HRESULT SetSize(
   long * lWidth,  // width of the character frame
   long * lHeight  // height of the character frame
);
</code></pre>
<p>
Sets the size of the character's animation frame.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>lWidth</i></p>
<p class=indent1>
The width of the character's animation frame in pixels.</p>
<p>
<i>lHeight</i></p>
<p class=indent1>
The height of the character's animation frame in pixels.</p>
<p>
Changing the character's frame size scales the character to the size set with this method.</p>
<p>
Even though the character appears in an irregularly shaped region window, the location of the character is based on its rectangular animation frame.</p>
<p>
See also <b>IAgentCharacter::GetSize</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::SetSoundEffectsOn</b></p>
<pre><code>HRESULT SetSoundEffectsOn(
   long bOn  // character sound effects setting 
);
</code></pre>
<p>
Determines whether the character's sound effects are played.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>bOn</i></p>
<p class=indent1>
Sound effects setting. If this parameter is TRUE, the sound effects for animations are played when the animation plays; if FALSE, sound effects are not played.</p>
<p>
This setting determines whether sound effects compiled as a part of the character are played when you play an associated animation. The setting is subject to the user's global sound effects setting in <b>IAgentAudioOutputProperties::GetUsingSoundEffects</b>.</p>
<p>
See also <b>IAgentCharacter::GetSoundEffectsOn</b>, <b>IAgentAudioOutputProperties::GetUsingSoundEffects</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::Show</b></p>
<pre><code>HRESULT Show(
   long bFast,      // play Showing state animation flag
   long * pdwReqID  // address of request ID
);
</code></pre>
<p>
Displays a character.
<ul>
<li>
Returns S_OK to indicate the operation was successful. When the function returns, <i>pdwReqID</i> contains the ID of the request.</li>
</ul>
<p>
<i>bFast</i></p>
<p class=indent1>
Showing state animation flag. If this parameter is TRUE, the <b>Showing</b> state animation plays after making the character visible; if FALSE, the animation does not play.</p>
<p>
<i>pdwReqID</i></p>
<p class=indent1>
Address of a variable that receives the <b>Show</b> request ID.</p>
<p>
Avoid setting the <i>bFast</i> parameter to TRUE without playing an animation beforehand, otherwise, the character frame may be displayed, but have no image to display. In particular, note that that if you call <b>MoveTo</b> when the character is not visible, it does not play any animation. Therefore, if you call the <b>Show</b> method with <i>bFast</i> set to TRUE, no image will be displayed. Similarly, if you call <b>Hide</b> then <b>Show</b> with <i>bFast</i> set to TRUE, there will be no visible image.</p>
<p>
When using the HTTP protocol to access character and animation data, use the <b>Prepare</b> method to ensure the availability of the <b>Showing</b> state animation before calling this method.</p>
<p>
See also <b>IAgentCharacter::Hide</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::Speak</b></p>
<pre><code>HRESULT Speak(
   BSTR bszText,    // text to speak
   BSTR bszURL,     // URL of a file to speak
   long * pdwReqID  // address of a request ID
);
</code></pre>
<p>
Speaks the 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>bszText</i></p>
<p class=indent1>
The text the character is to speak.</p>
<p>
<i>bszURL</i></p>
<p class=indent1>
The URL (or file specification) of a sound file to use for spoken output. This can be a standard sound file (.WAV) or linguistically enhanced sound file (.LWV). </p>
<p>
<i>pdwReqID</i></p>
<p class=indent1>
Address of a variable that receives the <b>Speak</b> request ID.</p>
<p>
To use this method with a character configured to speak using a text-to-speech (TTS) engine; simply provide the <i>bszText</i> parameter. You can include vertical bar characters (|) in the <i>bszText</i> parameter to designate alternative strings, so that each time the server processes the method, it randomly choose a different string. Support of TTS output is defined when the character is compiled using the Microsoft Agent Character Editor. </p>
<p>
If you want to use sound file output for the character, specify the location for the file in the <i>bszURL</i> parameter. When using the HTTP protocol to download a sound file, use the <b>Prepare</b> method to ensure the availability of the file before using this method. You can use the <i>bszText</i> parameter to specify the words that appear in the character's word balloon. If you specify a linguistically enhanced sound file (.LWV) for the <i>bszURL</i> parameter and do not specify text, the <i>bszText</i> parameter uses the text stored in the file. </p>
<p>
The <b>Speak</b> method uses the last animation played to determine which speaking animation to play. For example, if you precede the <b>Speak</b> command with a <b>Play</b> "<b>GestureRight</b>", the server will play <b>GestureRight</b> and then the <b>GestureRight</b> speaking animation. </p>
<p>
If you call <b>Speak</b> and the audio channel is busy, the character's audio output will not be heard, but the text will display in the word balloon. The word balloon's <b>Enabled</b> property must also be TRUE for the text to display. </p>
<p>
See also <b>IAgentCharacter::Play</b>, <b>IAgentBalloon::Enabled</b>, <b>IAgentCharacter::Prepare</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::Stop</b></p>
<pre><code>HRESULT Stop(
   long dwReqID  // request ID
);
</code></pre>
<p>
Stops the specified animation (request) and removes it from the character's animation queue. 
<ul>
<li>
Returns S_OK to indicate the operation was successful. </li>
</ul>
<p>
<i>dwReqID</i></p>
<p class=indent1>
The ID of the request to stop.</p>
<p>
<b>Stop</b> can also be used to halt any queued <b>Prepare</b> calls.</p>
<p>
See also <b>IAgentCharacter::Prepare</b>, <b>IAgentCharacter::StopAll</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::StopAll</b></p>
<pre><code>HRESULT StopAll();
   long lType,  // request type
</code></pre>
<p>
Stops all animations (requests) and removes them from the character's animation queue. </p>
<p>
<i>lType</i></p>
<p class=indent1>
A bit field that indicates the types of requests to stop (and remove from the character's queue), comprised from the following:</p>
<p class=indent1>
</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=76%><b>const unsigned long STOP_TYPE_ALL = 0xFFFFFFFF;</b></td>
<td width=24%>Stops all animation requests, including non-queued <b>Prepare</b> requests.</td>
</tr>
<tr valign=top>
<td width=76%><b>const unsigned long STOP_TYPE_PLAY = 0x00000001;</b></td>
<td width=24%>Stops all <b>Play</b> requests.</td>
</tr>
<tr valign=top>
<td width=76%><b>const unsigned long STOP_TYPE_MOVE = 0x00000002;</b></td>
<td width=24%>Stops all <b>Move</b> requests.</td>
</tr>
<tr valign=top>
<td width=76%><b>const unsigned long STOP_TYPE_SPEAK = 0x00000004;</b></td>
<td width=24%>Stops all <b>Speak</b> requests.</td>
</tr>
<tr valign=top>
<td width=76%><b>const unsigned long STOP_TYPE_PREPARE = 0x00000008;</b></td>
<td width=24%>Stops all queued <b>Prepare</b> requests.</td>
</tr>
<tr valign=top>
<td width=76%><b>const unsigned long STOP_TYPE_NONQUEUEDPREPARE = 0x00000010;</b></td>
<td width=24%>Stops all non-queued <b>Prepare</b> requests.</td>
</tr>
<tr valign=top>
<td width=76%><b>const unsigned long STOP_TYPE_VISIBLE = 0x00000020;</b></td>
<td width=24%>Stops all <b>Hide</b> or <b>Show</b> requests.</td>
</tr>
</table><br>
<p>
See also <b>IAgentCharacter::Stop</b></p>
<p>
</p>
<p>
<b>IAgentCharacter::Wait</b></p>
<pre><code>HRESULT Wait(
   long dwReqID,    // request ID
   long * pdwReqID  // address of request ID
);
</code></pre>
<p>
Holds the character's animation queue at the specified animation (request) until another request for another character completes. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>dwReqID</i></p>
<p class=indent1>
The ID of the request to wait for.</p>
<p>
<i>pdwReqID</i></p>
<p class=indent1>
Address of a variable that receives the <b>Wait</b> request ID.</p>
<p>
Use this method only when you support multiple (simultaneous) characters and want to sequence their interaction (as a single client). (For a single character, each animation request is played sequentially--after the previous request completes.) If you have two characters and want one character's animation request to wait until the other character's animation completes, set the <b>Wait</b> method to the other character's animation request ID.</p>
<p>&nbsp;</p></body>
</HTML>

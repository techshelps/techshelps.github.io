<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connected Property</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="progagentcontrol2zip_15"></a>Connected Property</h2>
<h4>Description</h4>
<p>
Returns or sets whether the current control is connected to the Microsoft Agent server. </p>
<h4>Syntax</h4>
<p>
<i>agent.</i><b>Connected </b>[= <i>boolean</i>]</p>
<p>
</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=24%><b>Part</b></td>
<td width=76%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=24%><i>boolean</i></td>
<td width=76%>A Boolean expression specifying whether the control is connected.<p>
<b>True   </b>The control is connected.</p>
<p>
<b>False   </b>The control is not connected.</p>
</td>
</tr>
</table><br>
<p>
</p>
<h4>Remarks</h4>
<p>
In many situations, specifying the control automatically creates a connection with the Microsoft Agent server. For example, specifying the Microsoft Agent control's CLSID in the &lt;OBJECT&gt; tag in a Web page automatically opens a server connection and exiting the page closes the connection. Similarly, for Visual Basic or other languages that enable you to drop a control on a form, running the program automatically opens a connection and exiting the program closes the connection. If the server isn't currently running, it automatically starts.</p>
<p>
However, if you want to create an Agent control at run time, you may also need to explicitly open a new connection to the server using the <b>Connected</b> property. For example, in Visual Basic you can create an ActiveX object at run time using the Set statement with the <b>New</b> keyword (or <b>CreateObject</b> function). While this creates the object, it will not create the connection to the server, so you must use the <b>Connected </b>property before any code that calls into Microsoft Agent's programming interface, as shown in the following example:</p>
<pre><code>    ' Declare a global variable for the control
    Dim MyAgent as Agent

    ' Create an instance of the control using New
    Set MyAgent = New Agent

    ' Open a connection to the server
    MyAgent.Connected = True

    ' Load a character
    MyAgent.Characters.Load "Genie", "C:\Some Directory\Genie.acs"

    ' Display the character
    MyAgent.Characters("Genie").Show

</code></pre>
<p>
Note that creating a control using this technique does not expose the Agent control's events. In Visual Basic 5.0, you can access the control's events by including the control in your project's references, and use the <b>WithEvents</b> keyword in your variable declaration:</p>
<pre><code>    Dim WithEvents <i>agent</i> as Agent

    ' Create an instance of the control using New
    Set MyAgent = New Agent
</code></pre>
<p>
Using <b>WithEvents</b> to create an instance of the Agent control at run time automatically opens the connection with the Microsoft Agent server. Therefore, you don't need to include a <b>Connected</b> statement. </p>
<p>
You can close your control's connection to the server at run time by setting the <b>Connected</b> property to <b>False</b>. However, you must first release all references you defined to objects created by the server. In particular, you must release any references you created to character and command objects. In Visual Basic, you can disassociate a reference to an object by setting the reference to <b>Nothing</b>:</p>
<pre><code>    Dim Genie as IAgentCtlCharacter
    
    Sub LoadCharacter

    ' Load the character into the Characters collection
    Agent1.Characters.Load "Genie", _
    "C:\Program Files\Microsoft Agent\Characters\Genie.acs"

    ' Create a reference to the character
    Set Genie = Agent1.Characters("Genie")

    End Sub

    Sub CloseConnection

    ' Release the reference to the character object
    Set Genie = Nothing

    ' Close the connection with the server
    Agent1.Connected = False

    End Sub
</code></pre>
<p>
Although you can reopen your connection by resetting the <b>Connected</b> property to <b>True</b>, not all information established with the server in the original connection will be preserved. For example, if you loaded a character, you will have to reload it again before you can play any of its animations. </p>
<p>
Setting the <b>Connected</b> property to <b>False</b> does not destroy your instance of the control. You must use the syntax supported by your programming language for releasing the object. For example, in Visual Basic, you set the control to <b>Nothing</b>:</p>
<pre><code>    Set Agent1 = Nothing
</code></pre>
<p>
Attempting to query or set the <b>Connected</b> property before creating the control will raise an error. </p>
<p>
--------------------------------------------------------</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Request Object</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="progagentcontrol2zip_12"></a>The Request Object</h1>
<p>
The server processes some methods, such as <b>Load</b>, <b>Get</b>, <b>Play</b>, and <b>Speak</b>, asynchronously. This enables your application code to continue while the method is completing. When a client application calls one of these methods, the control creates and returns a <b>Request</b> object for the request. You can use the <b>Request</b> object to track the status of the method by assigning an object variable to the method. In VBScript and Visual Basic, first declare an object variable:</p>
<pre><code>    Dim MyRequest as Object
</code></pre>
<p>
In VBScript, you don't include the variable type in your declaration:</p>
<pre><code>    Dim MyRequest
</code></pre>
<p>
And use Visual Basic's Set statement to assign the variable to the method call:</p>
<pre><code>    Set Request = agent.Characters("CharacterID").method (parameter[s])
</code></pre>
<p>
This adds a reference to the <b>Request</b> object. The <b>Request</b> object will be destroyed when there are no more references to it. Where you declare the <b>Request</b> object and how you use it determines its lifetime. If the object is declared local to a subroutine or function, it will be destroyed when it goes out of scope; that is, when the subroutine or function is complete. If the object is declared globally, it will not be destroyed until either the program terminates or a new value (or a value set to "empty") is assigned to the object.</p>
<p>
The <b>Request</b> object provides several properties you can query. For example, the <b>Status</b> property returns the current status of the request. You can use this property to check the status of your request:</p>
<pre><code>    Dim MyRequest
    
    Set MyRequest = Agent1.Characters.Load ("Genie", _
        "<u>http://agent.microsoft.com/characters/genie/genie.acf</u>")

    If (MyRequest.Status = Pending) then
        'do something

    Else If (MyRequest.Status = Complete) then
        'do something right away

    End If
</code></pre>
<p>
The <b>Status</b> property returns the status of a <b>Request</b> object as a Long integer value.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=15%><b>Status</b></td>
<td width=85%><b>Definition</b></td>
</tr>
<tr valign=top>
<td width=15%>0</td>
<td width=85%>Request successfully completed.</td>
</tr>
<tr valign=top>
<td width=15%>1</td>
<td width=85%>Request failed.</td>
</tr>
<tr valign=top>
<td width=15%>2</td>
<td width=85%>Request pending (in the queue, but not complete).</td>
</tr>
<tr valign=top>
<td width=15%>3</td>
<td width=85%>Request interrupted.</td>
</tr>
<tr valign=top>
<td width=15%>4</td>
<td width=85%>Request in progress.</td>
</tr>
</table><br>
<p>
The <b>Request</b> object also includes a Long integer value in the <b>Number</b> property that returns the error or cause of the <b>Status</b> code. If none, this value is zero (0). The <b>Description</b> property contains a string value that corresponds to the error number. If the string doesn't exist, <b>Description</b> contains "Application-defined or object-defined error".</p>
<p>
For the values and meaning returned by the <b>Number</b> property, see <b>Error Codes</b>. </p>
<p>
The server places animation requests in the specified character's queue. This enables the server to play the animation on a separate thread, and your application's code can continue while animations play. If you create a <b>Request</b> object reference, the server automatically notifies you when an animation request has started or completed through the <b>RequestStart</b> and <b>RequestComplete</b> events. Because methods that return <b>Request</b> objects are asynchronous and may not complete during the scope of the calling function, declare your reference to the <b>Request</b> object globally.</p>
<p>
The following methods can be used to return a <b>Request</b> object: <b>GestureAt</b>, <b>Get</b>, <b>Hide</b>, <b>Interrupt</b>, <b>Load</b>, <b>MoveTo</b>, <b>Play</b>, <b>Show</b>, <b>Speak</b>, <b>Wait</b>. </p>
<p>
--------------------------------------------------------</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IAgentBalloon</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="progagentsinterface2zip_19"></a>IAgentBalloon</h2>
<p>
<b>IAgentBalloon</b> defines an interface that allows applications to query properties for the Microsoft Agent word balloon.</p>
<p>
Initial defaults for a character's word balloon are set in the Microsoft Agent Character Editor, but once the application is running, the user may override the Enabled and font properties. If a user changes the balloon's properties, the change affects all characters.</p>
<h4>Methods in Vtable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=31%><b>IAgentBalloon Methods</b></td>
<td width=69%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=31%><b>GetEnabled</b></td>
<td width=69%>Returns whether the word balloon is enabled.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetNumLines</b></td>
<td width=69%>Returns the number of lines displayed in the word balloon.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetNumCharsPerLine </b></td>
<td width=69%>Returns the average number of characters per line displayed in the word balloon.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetFontName</b></td>
<td width=69%>Returns the name of the font displayed in the word balloon.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetFontSize </b></td>
<td width=69%>Returns the size of the font displayed in the word balloon.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetFontBold</b></td>
<td width=69%>Returns whether the font displayed in the word balloon is bold.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetFontItalic</b></td>
<td width=69%>Returns whether the font displayed in the word balloon is italic.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetFontStrkethru</b></td>
<td width=69%>Returns whether the font displayed in the word balloon is displayed as strikethrough.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetFontUnderline</b></td>
<td width=69%>Returns whether the font displayed in the word balloon is underlined.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetForeColor  </b></td>
<td width=69%>Returns the foreground color displayed in the word balloon.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetBackColor  </b></td>
<td width=69%>Returns the background color displayed in the word balloon.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetBorderColor  </b></td>
<td width=69%>Returns the border color displayed in the word balloon.</td>
</tr>
<tr valign=top>
<td width=31%><b>SetVisible</b></td>
<td width=69%>Sets the word balloon to be visible.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetVisible</b></td>
<td width=69%>Returns the visibility setting for the word balloon.</td>
</tr>
<tr valign=top>
<td width=31%><b>SetFontName</b></td>
<td width=69%>Sets the font used in the word balloon.</td>
</tr>
<tr valign=top>
<td width=31%><b>SetFontSize</b></td>
<td width=69%>Sets the font size used in the word balloon.</td>
</tr>
<tr valign=top>
<td width=31%><b>SetFontCharSet</b></td>
<td width=69%>Sets the character set used in the word balloon.</td>
</tr>
<tr valign=top>
<td width=31%><b>GetFontCharSet</b></td>
<td width=69%>Returns the character set used in the word balloon.</td>
</tr>
</table><br>
<p>
<b>IAgentBalloon::GetBackColor</b></p>
<pre><code>HRESULT GetBackColor(
   long * plBGColor  // address of variable for background color displayed
);                   // in word balloon
</code></pre>
<p>
Retrieves the value for the background color displayed in a word balloon. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>plBGColor</i></p>
<p class=indent1>
The address of a variable that receives the color setting for the balloon background. </p>
<p>
The background color used in a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can change the background color of the word balloons for all characters through the Microsoft Agent property sheet.</p>
<p>
See also <b>IAgentBalloon::GetForeColor</b></p>
<p>
</p>
<p>
<b>IAgentBalloon::GetBorderColor</b></p>
<pre><code>HRESULT GetBorderColor (
  long * plBorderColor// address of variable for border color displayed
);                    // for word balloon
</code></pre>
<p>
Retrieves the value for the border color displayed for a word balloon. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>plBorderColor</i></p>
<p class=indent1>
The address of a variable that receives the color setting for the balloon border. </p>
<p>
The border color for a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can change the border color of the word balloons for all characters through the Microsoft Agent property sheet.</p>
<p>
See also <b>IAgentBalloon::GetBackColor, IAgentBalloon::GetForeColor</b></p>
<p>
</p>
<p>
<b>IAgentBalloon::GetEnabled</b></p>
<pre><code>HRESULT GetEnabled(
  long * pbEnabled  // address of variable for Enabled setting 
);                  // for word balloon
</code></pre>
<p>
Retrieves the value of the <b>Enabled</b> property for a word balloon. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbEnabled</i></p>
<p class=indent1>
The address of a variable that receives TRUE when the word balloon is enabled and FALSE when it is disabled. </p>
<p>
The Microsoft Agent server automatically displays the word balloon for spoken output, unless it is disabled. The word balloon can be disabled for a character in the Microsoft Agent Character Editor, or for all characters by the user, in the Microsoft Agent property sheet. If the user disables the word balloon, the client cannot restore it.</p>
<p>
</p>
<p>
<b>IAgentBalloon::GetFontBold</b></p>
<pre><code>HRESULT GetFontBold(
   long * pbFontBold  // address of variable for bold setting for
);                    // font displayed in word balloon 
</code></pre>
<p>
Indicates whether the font used in a word balloon is bold. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbFontBold</i></p>
<p class=indent1>
The address of a value that receives TRUE if the font is bold and FALSE if not bold. </p>
<p>
The font style used in a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can override the font settings for all characters through the Microsoft Agent property sheet.</p>
<p>
</p>
<p>
<b>IAgentBalloon::GetFontCharSet</b></p>
<pre><code>HRESULT GetFontCharSet(
   short * psFontCharSet  // character set displayed in word balloon
); 
</code></pre>
<p>
Indicates the character set of the font displayed in a word balloon.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>psFontCharSet</i></p>
<p>
The address of a value that receives the font's character set. The following are some common settings for value:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=10%>0</td>
<td width=90%>Standard Windows® characters (ANSI).</td>
</tr>
<tr valign=top>
<td width=10%>1</td>
<td width=90%>Default character set.</td>
</tr>
<tr valign=top>
<td width=10%>2</td>
<td width=90%>The symbol character set.</td>
</tr>
<tr valign=top>
<td width=10%>128</td>
<td width=90%>Double-byte character set (DBCS) unique to the Japanese version of Windows.</td>
</tr>
<tr valign=top>
<td width=10%>129</td>
<td width=90%>Double-byte character set (DBCS) unique to the Korean version of Windows.</td>
</tr>
<tr valign=top>
<td width=10%>134</td>
<td width=90%>Double-byte character set (DBCS) unique to the Simplified Chinese version of Windows.</td>
</tr>
<tr valign=top>
<td width=10%>136</td>
<td width=90%>Double-byte character set (DBCS) unique to the Traditional Chinese version of Windows.</td>
</tr>
<tr valign=top>
<td width=10%>255</td>
<td width=90%>Extended characters normally displayed by DOS applications.</td>
</tr>
</table><br>
<p>
For other character set values, consult the Microsoft Win32® documentation.</p>
<p>
The default character set used in a character's word balloon is defined in the Microsoft Agent Character Editor. You can change it using <b>IAgentBalloon::SetFontCharSet</b>. However, the user can override the character set setting for all characters using the Microsoft Agent property sheet.</p>
<p>
See also <b>IAgentBalloon::SetFontCharSet</b></p>
<p>
<b>IAgentBalloon::GetFontItalic</b></p>
<pre><code>HRESULT GetFontItalic(
   long * pbFontItalic  // address of variable for italic setting for 
);                      // font displayed in word balloon 
</code></pre>
<p>
Indicates whether the font used in a word balloon is italic. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbFontItalic</i></p>
<p class=indent1>
The address of a value that receives TRUE if the font is italic and FALSE if not italic. </p>
<p>
The font style used in a character's word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can override the font settings for all characters through the Microsoft Agent property sheet.</p>
<p>
</p>
<p>
<b>IAgentBalloon::GetFontName</b></p>
<pre><code>HRESULT GetFontName(
   BSTR * pbszFontName  // address of variable for font displayed 
);                      // in word balloon
                   
</code></pre>
<p>
Retrieves the value for the font displayed in a word balloon. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbszFontName</i></p>
<p class=indent1>
The address of a BSTR that receives the font name displayed in a word balloon. </p>
<p>
The default font used in a character word balloon is defined in the Microsoft Agent Character Editor. You can change it with <b>IAgentBalloon::SetFontName</b>. The user can override the font setting for all characters using the Microsoft Agent property sheet.</p>
<p>
</p>
<p>
<b>IAgentBalloon::GetFontSize</b></p>
<pre><code>HRESULT GetFontSize(
   long * plFontSize  // address of variable for font size 
);                    // for font displayed in word balloon 
</code></pre>
<p>
Retrieves the value for the size of the font displayed in a word balloon.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>plFontSize</i></p>
<p class=indent1>
The address of a value that receives the size of the font. </p>
<p>
The default font size used in a character word balloon is defined in the Microsoft Agent Character Editor. You can change it with <b>IAgentBalloon::SetFontSize</b>. However, the user can override also the font size settings for all characters using the Microsoft Agent property sheet.</p>
<p>
</p>
<p>
<b>IAgentBalloon::GetFontStrikethru</b></p>
<pre><code>HRESULT GetFontStrikethru(
   long * pbFontStrikethru  // address of variable for strikethrough setting 
);                          // for font displayed in word balloon 
</code></pre>
<p>
Indicates whether the font used in a word balloon has the strikethrough style set. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbFontStrikethru</i></p>
<p class=indent1>
The address of a value that receives TRUE if the font strikethrough style is set and FALSE if not. </p>
<p>
The font style used in a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can override the font settings for all characters using the Microsoft Agent property sheet.</p>
<p>
</p>
<p>
<b>IAgentBalloon::GetFontUnderline</b></p>
<pre><code>HRESULT GetFontUnderline(
   long * pbFontUnderline  // address of variable for underline setting
);                         // for font displayed in word balloon 
</code></pre>
<p>
Indicates whether the font used in a word balloon has the underline style set. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbFontUnderline</i></p>
<p class=indent1>
The address of a value that receives TRUE if the font underline style is set and FALSE if not. </p>
<p>
The font style used in a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can override the font settings for all characters using the Microsoft Agent property sheet.</p>
<p>
</p>
<p>
<b>IAgentBalloon::GetForeColor</b></p>
<pre><code>HRESULT GetForeColor(
   long * plFGColor // address of variable for foreground color displayed
);                  // in word balloon
</code></pre>
<p>
Retrieves the value for the foreground color displayed in a word balloon. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>plFGColor</i></p>
<p class=indent1>
The address of a variable that receives the color setting for the balloon foreground. </p>
<p>
The foreground color used in a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application. However, the user can override the  foreground color of the word balloons for all characters through the Microsoft Agent property sheet.</p>
<p>
See also <b>IAgentBalloon::GetBackColor</b></p>
<p>
</p>
<p>
<b>IAgentBalloon::GetNumCharsPerLine</b></p>
<pre><code>HRESULT GetNumCharsPerLine(
   long * plCharsPerLine  // address of variable for characters per line
);                        // displayed in word balloon
</code></pre>
<p>
Retrieves the value for the average number of characters per line displayed in a word balloon. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbCharsPerLine</i></p>
<p class=indent1>
The address of a variable that receives the number of characters per line. </p>
<p>
The Microsoft Agent server automatically scrolls the lines displayed for spoken output in the word balloon. The average number of characters per line for a character's word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application.</p>
<p>
See also <b>IAgentBalloon::GetNumLines</b></p>
<p>
</p>
<p>
<b>IAgentBalloon::GetNumLines</b></p>
<pre><code>HRESULT GetNumLines(
   long * pbcLines  // address of variable for number of lines 
);                  // displayed in word balloon
</code></pre>
<p>
Retrieves the value of the number of lines displayed in a word balloon. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbcLines</i></p>
<p class=indent1>
The address of a variable that receives the number of lines displayed. </p>
<p>
The Microsoft Agent server automatically scrolls the lines displayed for spoken output in the word balloon. The number of lines for a character word balloon is defined in the Microsoft Agent Character Editor. It cannot be changed by an application.</p>
<p>
See also <b>IAgentBalloon::GetNumCharsPerLine</b></p>
<p>
<b>IAgentBalloon::GetVisible</b></p>
<pre><code>HRESULT GetVisible(
   long * pbVisible  // address of variable for word balloon
);                   // Visible setting
</code></pre>
<p>
Determines whether the word balloon is visible or hidden.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>pbVisible</i></p>
<p class=indent1>
Address of a variable that receives TRUE if the word balloon is visible and FALSE if hidden.</p>
<p>
See also <b>IAgentBalloon::SetVisible</b></p>
<p>
<b>IAgentBalloon::SetFontCharSet</b></p>
<pre><code>HRESULT SetFontCharSet(
   short sFontCharSet  // character set displayed in word balloon
); 
</code></pre>
<p>
Sets the character set of the font displayed in the word balloon.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>sFontCharSet</i></p>
<p class=indent1>
The character set of the font. The following are some common settings for value:</p>
<p class=indent1>
</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=17%>0</td>
<td width=83%>Standard Windows characters (ANSI).</td>
</tr>
<tr valign=top>
<td width=17%>1</td>
<td width=83%>Default character set.</td>
</tr>
<tr valign=top>
<td width=17%>2</td>
<td width=83%>The symbol character set.</td>
</tr>
<tr valign=top>
<td width=17%>128</td>
<td width=83%>Double-byte character set (DBCS) unique to the Japanese version of Windows.</td>
</tr>
<tr valign=top>
<td width=17%>129</td>
<td width=83%>Double-byte character set (DBCS) unique to the Korean version of Windows.</td>
</tr>
<tr valign=top>
<td width=17%>134</td>
<td width=83%>Double-byte character set (DBCS) unique to the Simplified Chinese version of Windows.</td>
</tr>
<tr valign=top>
<td width=17%>136</td>
<td width=83%>Double-byte character set (DBCS) unique to the Traditional Chinese version of Windows.</td>
</tr>
<tr valign=top>
<td width=17%>255</td>
<td width=83%>Extended characters normally displayed by DOS applications.</td>
</tr>
</table><br>
<p>
For other character set values, consult the Microsoft Win32 documentation.</p>
<p class=indent1>
</p>
<p>
The default character set used in a character's word balloon is defined in the Microsoft Agent Character Editor. You can change it with <b>IAgentBalloon::SetFontCharSet</b>. However, the user can override the character set setting for all characters using the Microsoft Agent property sheet.</p>
<p>
See also <b>IAgentBalloon::GetFontCharSet</b></p>
<p>
<b>IAgentBalloon::SetFontName</b></p>
<pre><code>HRESULT SetFontName(
   BSTR bszFontName  // font displayed in word balloon
);
                   
</code></pre>
<p>
Sets the font displayed in the word balloon. 
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>bszFontName</i></p>
<p class=indent1>
A BSTR that sets the font displayed in the word balloon. </p>
<p>
The default font used in a character's word balloon is defined in the Microsoft Agent Character Editor. You can change it with <b>IAgentBalloon::SetFontName</b>. However, the user can override the font setting for all characters using the Microsoft Agent property sheet.</p>
<p>
See also <b>IAgentBalloon::GetVisible</b></p>
<p>
<b>IAgentBalloon::SetFontSize</b></p>
<pre><code>HRESULT SetFontSize(
   long lFontSize  // font size displayed in word balloon
); 
</code></pre>
<p>
Sets the size of the font displayed in the word balloon.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>lFontSize</i></p>
<p class=indent1>
The size of the font. </p>
<p>
The default font size used in a character's word balloon is defined in the Microsoft Agent Character Editor. You can change it with <b>IAgentBalloon::SetFontSize</b>. However, the user can override the font size setting for all characters using the Microsoft Agent property sheet.</p>
<p>
See also <b>IAgentBalloon::GetFontSize</b></p>
<p>
<b>IAgentBalloon::SetVisible</b></p>
<pre><code>HRESULT SetVisible(
   long bVisible  // word balloon Visible setting 
);
</code></pre>
<p>
Sets the <b>Visible</b> property for the word balloon.
<ul>
<li>
Returns S_OK to indicate the operation was successful.</li>
</ul>
<p>
<i>bVisible</i></p>
<p class=indent1>
Visible property setting. A value of TRUE displays the word balloon; a value of FALSE hides it. </p>
<p>
See also <b>IAgentBalloon::GetVisibleEvents</b></p>
<p>
Microsoft Agent provides several events for tracking user interaction and server states. This section describes the event methods exposed by the <b>IAgentNotifySink</b> interface.</p>
<p>&nbsp;</p></body>
</HTML>

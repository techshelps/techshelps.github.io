<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Wscript.GetObject</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_wsh_wscript.getobject"></a>Wscript.GetObject</h1>
<p>
The <b>GetObject</b> method retrieves an Automation object from a file, or an object specified by <i>strProgID</i> parameter. Use the <b>GetObject</b> method when there is a current instance of the object, or if you want to create the object from a file that is already loaded. If there is no current instance and you don't want the object started from a file that is already loaded, use the <a href="wshobj_9sqc.htm"><b>CreateObject</b> method</a>.</p>
<h4>Syntax</h4>
<pre><code><b>Wscript.GetObject</b>(<i>strPathname</i> [,<i>strProgID</i>] ], [<i>strPrefix</i>]) = <i>objObject</i>
<b> </b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>strPathname</i></dt>
<dd>
The full path and the name of the file containing the object to retrieve. The <i>strPathname</i> parameter is required.</dd>
<dt>
<i>strProgID</i></dt>
<dd>
A string representing the program identifier (ProgID) of the object.</dd>
<dt>
<i>strPrefix</i></dt>
<dd>
If the <i>strPrefix</i> parameter is specified, Windows Scripting Host connects the object's outgoing interface to the script file after creating the object. When the object fires an event, Windows Scripting Host calls a subroutine named <i>strPrefix</i> and the event name. 
<p>
For example, if strPrefix is "MYOBJ_" and the object fires an event named "OnBegin", Windows Scripting Host calls the "MYOBJ_OnBegin" subroutine located in the script.
</dd>
</dl>
<h4>Return</h4>
<dl>
<dt>
<i>objObject</i></dt>
<dd>
The Automation object retrieved.</dd>
</dl>
<h4>Remarks</h4>
<p>
If an object has registered itself as a single-instance object (for example, the Word.Basic object in Microsoft Word 7.0), only one instance of the object is created, no matter how many times <b>CreateObject</b> is executed. In addition, with a single-instance object, <b>GetObject</b> always returns the same instance when called with the zero-length string syntax (""), and it causes an error if the path parameter is omitted. You can't use <b>GetObject</b> to obtain a reference to a Visual Basic® class created with Visual Basic 4.0 or earlier.</p>
<p>
<b>GetObject</b> works with all COM classes, independent of the language used to create the object.</p>
<h4>Examples</h4>
<pre><code>Dim MyObject As Object
    Set MyObject = GetObject(""C:\CAD\SCHEMA.CAD"")
    = MyCAD.Application
 </code></pre>
<p>
When this code is executed, the application associated with the specified <i>strPathname</i> is started, and the object in the specified file is activated.</p>
<p>
If <i>strPathname</i> is a zero-length string (""), <b>GetObject</b> returns a new object instance of the specified type. If the <i>strPathname</i> parameter is omitted entirely, <b>GetObject</b> returns a currently active object of the specified type. If no object of the specified type exists, an error occurs.</p>
<p>
Some applications allow you to activate part of a file. To do this, add an exclamation point (!) to the end of the file name and follow it with a string that identifies the part of the file you want to activate. For information on how to create this string, see the documentation for the application that created the object. For example, in a drawing application you might have multiple layers of a drawing stored in a file. You could use the following code to activate a layer within a drawing file called schema.cad:</p>
<pre><code>Set LayerObject = GetObject("C:\CAD\SCHEMA.CAD!Layer3")
 </code></pre>
<p>
If you do not specify the object's class, COM determines the application to start and the object to activate according to the file name you provide. Some files however, may support more than one class of object. For example, a drawing might support three different types of objects: an application object, a drawing object, and a toolbar object, all of which are part of the same file. To specify which object in a file you want to activate, use the optional class parameter. For example:</p>
<pre><code>Dim MyObject As Object
Set MyObject = GetObject("C:\DRAWINGS\SAMPLE.DRW", "FIGMENT.DRAWING")
 </code></pre>
<p>
In the preceding example, <code>FIGMENT</code> is the name of a drawing application and <code>DRAWING</code> is one of the object types it supports.</p>
<p>
After an object is activated, you reference it in code using the object variable you defined. In the preceding example, you access properties and methods of the new object using the object variable <code>MyObject</code>. For example:</p>
<pre><code>MyObject.Line 9, 90
MyObject.InsertText 9, 100, "Hello, world."
MyObject.SaveAs "C:\DRAWINGS\SAMPLE.DRW"
 </code></pre>
<h4>See Also</h4>
<p>
<a href="wshobj_9sqc.htm"><b>Wscript.CreateObject</b> method</a>, <a href="wshobj_6o50.htm"><b>Wscript.DisconnectObject</b> method</a></p>
<p>&nbsp;</p></body>
</HTML>

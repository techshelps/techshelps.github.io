<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Object</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_application_object"></a>Application Object</h1>
<p>
You can use the <b>Application</b> object to share information among all users of a given application. An ASP-based application is defined as all the .asp files in a virtual directory and its subdirectories. Because the <b>Application</b> object can be shared by more than one user, there are <b>Lock</b> and <b>Unlock </b>methods to ensure that multiple users do not try to alter a property simultaneously.</p>
<h4>Syntax</h4>
<pre><code><b>Application.</b><i>method</i> 
 </code></pre>
<h4>Collections</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%><a href="introbj_129a.htm"><b>Contents</b></a></td>
<td width=52%>Contains all of the items that have been added to the Application through script commands.</td>
</tr>
<tr valign=top>
<td width=48%><a href="introbj_5uem.htm"><b>StaticObjects</b></a></td>
<td width=52%>Contains all of the objects added to the session with the &lt;OBJECT&gt; tag. </td>
</tr>
</table><br>
<h4>Methods</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=25%><a href="introbj_84h7.htm"><b>Lock</b></a></td>
<td width=75%>The <b>Lock </b>method prevents other clients from modifying <b>Application </b>object properties.</td>
</tr>
<tr valign=top>
<td width=25%><a href="introbj_51gr.htm"><b>Unlock</b></a></td>
<td width=75%>The <b>Unlock </b>method allows other clients to modify <b>Application </b>object properties.</td>
</tr>
</table><br>
<h4>Events</h4>
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><a href="global_6zc4.htm"><b>Application_OnEnd</b></a></td>
</tr>
<tr valign=top>
<td width=100%><a href="global_4f78.htm"><b>Application_OnStart</b></a></td>
</tr>
</table><br>
<p>
Scripts for the preceding events are declared in the global.asa file. For more information about these events and the global.asa file, see the <a href="global_63vp.htm"><b>Global.asa Reference</b></a>.</p>
<h4>Remarks</h4>
<p>
You can store values in the <a href="introbj_3z77.htm"><b>Application</b> <b>Collections</b></a>. Information stored in the <b>Application </b>collections<b> </b>is available throughout the application and has application scope. The following script demonstrates storage of two types of variables.</p>
<pre><code>&lt;% 
Application("greeting") = "Welcome to My Web World!"
Application("num") = 25
%&gt;
 </code></pre>
<p>
Each of these variables would be members of the <a href="introbj_129a.htm"><b>Application Contents Collection</b></a>. </p>
<p>
You can also assign a component instance to a variable that has application scope. If you assign a component instance to a variable with the <b>Server.CreateObject</b> method, the variable will be a member of the <b>Application.Contents</b> collection. If the variable is assigned with the &lt;OBJECT&gt; tag, the variable will be a member of the <a href="introbj_5uem.htm"><b>Application StaticObjects Collection</b></a>.</p>
<p>
You should be careful about assigning component instances to variables with application scope., as some components are not designed to be given application scope. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_determining_component_scope">
</object><a href=JavaScript:alink_1.Click()><b>Determining</b> <b>Component</b> <b>Scope</b></a> in the Creating Components for ASP section of the Programmer's Reference.</p>
<p>
If you assign a component instance to a variable in the <a href="introbj_129a.htm"><b>Application</b> <b>Contents Collection</b></a>, and use Visual Basic® Scripting Edition as your primary scripting language, you must use the <b>Set </b>keyword. This is illustrated in the following script. </p>
<pre><code>&lt;% Set Application("Obj1") = Server.CreateObject("MyComponent") %&gt;
 </code></pre>
<p>
You can then reference the methods and properties of <code>MyComponent</code> on subsequent Web pages by using this script</p>
<pre><code>&lt;% Application("Obj1").MyObjMethod %&gt;
 </code></pre>
<p>
or by extracting a local copy of the object and using the following</p>
<pre><code>&lt;% 
Set MyLocalObj1 = Application("Obj1") 
MyLocalObj1.MyObjMethod
%&gt;
 </code></pre>
<p>
Another way to create objects with application scope is by using the &lt;OBJECT&gt; tag in the global.asa file. For more information, see the <a href="global_63vp.htm"><b>Global.asa Reference</b></a>.</p>
<p>
You cannot store a built-in object in the <b>Application </b>object. For example, each of the following lines returns an error.</p>
<pre><code>&lt;%
Set Application("var1") = Session
Set Application("var2") = Request
Set Application("var3") = Response
Set Application("var4") = Server
Set Application("var5") = Application
Set Application("var6") = ObjectContext
%&gt;
 </code></pre>
<p>
You should be aware of the threading model used by any components you give application scope. The threading model used to develop the component will have a significant impact on whether a component instance should be assigned to a variable in one of the <b>Application </b>collections. For more information, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_component_design_guidelines">
</object><a href=JavaScript:alink_2.Click()><b>Component</b> <b>Design</b> <b>Guidelines</b></a>.</p>
<p>
If you store an array in a <b>Application </b>object, you should not attempt to alter the elements of the stored array directly. For example, the following script does not work</p>
<pre><code>&lt;% Application("StoredArray")(3) = "new value" %&gt;
 </code></pre>
<p>
This is because the <b>Application </b>object is implemented as a collection. The array element <code>StoredArray(3)</code> does not receive the new value. Instead, the value would be included in the <b>Application</b> object collection, and would overwrite any information that had previously been stored at that location. </p>
<p>
It is strongly recommended that if you store an array in the <b>Application </b>object, you retrieve a copy of the array before retrieving or changing any of the elements of the array. When you are done with the array, you should store the array in the <b>Application </b>object all over again, so that any changes you made are saved. This is demonstrated in the following scripts.</p>
<pre><code>---file1.asp---
&lt;%
'Creating and initializing the array
dim MyArray()
Redim MyArray(5)
MyArray(0) = "hello"
MyArray(1) = "some other string"

'Storing the array in the Application object
Application.Lock
Application("StoredArray") = MyArray
Application.Unlock

Response.Redirect("file2.asp")
%&gt;

---file2.asp---
&lt;%
'Retrieving the array from the Application Object
'and modifying its second element
LocalArray = Application("StoredArray")
LocalArray(1) = " there"

'printing out the string "hello there"
Response.Write(LocalArray(0)&amp;LocalArray(1))

'Re-storing the array in the Application object
'This overwrites the values in StoredArray with the new values
Application.Lock
Application("StoredArray") = LocalArray
Application.Unlock
%&gt;
 </code></pre>
<h4>Example</h4>
<p>
The following example uses the application variable <code>NumVisits</code> to store the number of times that a particular page has been accessed. The <b>Lock</b> method is called to ensure that only the current client can access or alter <code>NumVisits</code>. Calling the <b>Unlock</b> method then enables other users to access the <b>Application</b> object.</p>
<pre><code>&lt;%
Application.Lock
Application("NumVisits") = Application("NumVisits") + 1
Application.Unlock
%&gt; 
 
This application page has been visited 
&lt;%= Application("NumVisits") %&gt; times!
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

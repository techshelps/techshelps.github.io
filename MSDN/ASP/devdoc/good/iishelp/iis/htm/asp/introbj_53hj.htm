<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>QueryString</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_querystring"></a>QueryString</h1>
<p>
The <b>QueryString </b>collection retrieves the values of the variables in the HTTP query string. The HTTP query string is specified by the values following the question mark (?). Several different processes can generate a query string. For example, the anchor tag </p>
<p>
&lt;A HREF= "example?string=this is a sample"&gt;string sample&lt;/A&gt;</p>
<p>
generates a variable named string with the value "this is a sample". Query strings are also generated by sending a form, or by a user typing a query into the address box of their browser.</p>
<h4>Syntax</h4>
<pre><code><b>Request.QueryString(</b><i>variable</i><b>)</b>[<b>(</b><i>index</i><b>)</b>|<b>.Count</b>] 
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>variable</i></dt>
<dd>
Specifies the name of the variable in the HTTP query string to retrieve.</dd>
<dt>
<i>index</i></dt>
<dd>
An optional parameter that enables you to retrieve one of multiple values for <i>variable</i>. It can be any integer value in the range 1 to <b>Request.QueryString(</b><i>variable</i><b>).Count</b>.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>QueryString</b> collection is a parsed version of the QUERY_STRING variable in the <b>ServerVariables</b> collection. It enables you to retrieve the QUERY_STRING variables by name. The value of <b>Request.QueryString(</b><i>parameter</i><b>)</b> is an array of all of the values of <i>parameter</i> that occur in QUERY_STRING. You can determine the number of values of a parameter by calling <b>Request.QueryString(</b><i>parameter</i><b>).Count</b>. If a variable does not have multiple data sets associated with it, the count is 1. If the variable is not found, the count is 0.</p>
<p>
To reference a <b>QueryString </b>variable in one of multiple data sets, you specify a value for <i>index</i>. The <i>index </i>parameter may be any value between 1 and <b>Request.QueryString(</b><i>variable</i><b>).Count</b>. If you reference one of multiple <b>QueryString</b> variables without specifying a value for <i>index</i>, the data is returned as a comma-delimited string.</p>
<p>
When you use parameters with <b>Request.QueryString</b>, the server parses the parameters sent to the request and returns the specified data. If your application requires unparsed <b>QueryString</b> data, you can retrieve it by calling <b>Request.QueryString</b> without any parameters.</p>
<p>
You can use an iterator to loop through all the data values in a query string. For example, if the following request is sent</p>
<pre><code>http://NAMES.ASP?Q=Fred&amp;Q=Sally
 </code></pre>
<p>
and <code>Names.asp</code> contained the following script,</p>
<pre><code>---NAMES.ASP---
&lt;%
For Each item In Request.QueryString("Q")
  Response.Write item &amp; "&lt;BR&gt;"
Next
%&gt;
 </code></pre>
<p>
<code>Names.asp</code> would display the following.</p>
<pre><code>Fred
Sally
 </code></pre>
<p>
The preceding script could also have been written using <b>Count</b>.</p>
<pre><code>&lt;%
For I = 1 To Request.QueryString("Q").Count    
  Response.Write Request.QueryString("Q")(I) &amp; "&lt;BR&gt;"
Next
%&gt;
 </code></pre>
<h4>Example</h4>
<p>
The client request</p>
<pre><code>/scripts/directory-lookup.asp?name=fred&amp;age=22
 </code></pre>
<p>
results in the following QUERY_STRING value. </p>
<pre><code>name=fred&amp;age=22.
 </code></pre>
<p>
The <b>QueryString</b> collection would then contain two members, <code>name</code> and <code>age.</code> You can then use the following script. </p>
<pre><code>Welcome,  &lt;%= Request.QueryString("name") %&gt;. 
Your age is  &lt;%= Request.QueryString("age") %&gt;.
 </code></pre>
<p>
The output would be </p>
<pre><code>Welcome, Fred. Your age is 22.
 </code></pre>
<p>
If the following script is used</p>
<pre><code>The unparsed query string is:  &lt;%=Request.QueryString %&gt;
 </code></pre>
<p>
The output would be</p>
<pre><code>The unparsed query string is: name=fred&amp;age=22
 </code></pre>
<h4>Applies To</h4>
<p>
<a href="introbj_5ulw.htm"><b>Request Object</b></a> </p>
<h4>See Also</h4>
<p>
<a href="introbj_8q5h.htm"><b>ClientCertificate</b></a>, <a href="introbj_0z3o.htm"><b>Cookies</b></a>, <a href="introbj_4fl9.htm"><b>Form</b></a>, <a href="introbj_5vsj.htm"><b>ServerVariables</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cookies</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cookies_response"></a>Cookies</h1>
<p>
The <b>Cookies </b>collection sets the value of a cookie. If the specified cookie does not exist, it is created. If the cookie exists, it takes the new value and the old value is discarded.</p>
<h4>Syntax</h4>
<pre><code><b>Response.Cookies(</b><i>cookie</i><b>)</b>[<b>(</b><i>key</i><b>)</b>|<b>.</b><i>attribute</i>]<b> =</b> <i>value</i> 
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>cookie</i></dt>
<dd>
The name of the cookie.</dd>
<dt>
<i>key</i></dt>
<dd>
An optional parameter. If <i>key</i> is specified, cookie is a dictionary, and <i>key</i> is set to <i>value</i>.</dd>
<dt>
<i>attribute</i></dt>
<dd>
Specifies information about the cookie itself. The attribute parameter can be one of the following.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%>Name</th>
<th align=left width=75%>Description</th>
</tr>
<tr valign=top>
<td width=25%>Domain</td>
<td width=75%>Write-only. If specified, the cookie is sent only to requests to this domain.</td>
</tr>
<tr valign=top>
<td width=25%>Expires</td>
<td width=75%>Write-only. The date on which the cookie expires. This date must be set in order for the cookie to be stored on the client's disk after the session ends. If this attribute is not set to a date beyond the current date, the cookie will expire when the session ends.</td>
</tr>
<tr valign=top>
<td width=25%>HasKeys</td>
<td width=75%>Read-only. Specifies whether the cookie contains keys.</td>
</tr>
<tr valign=top>
<td width=25%>Path </td>
<td width=75%>Write-only. If specified, the cookie is sent only to requests to this path. If this attribute is not set, the application path is used.</td>
</tr>
<tr valign=top>
<td width=25%>Secure</td>
<td width=75%>Write-only. Specifies whether the cookie is secure.</td>
</tr>
</table><br>

</dd>
<dt>
<i>Value</i></dt>
<dd>
Specifies the value to assign to <i>key </i>or <i>attribute</i>.
</dd>
</dl>
<h4>Remarks</h4>
<p>
If a cookie with a key is created, as in the following script,</p>
<pre><code>&lt;% 
Response.Cookies("mycookie")("type1") = "sugar"
Response.Cookies("mycookie")("type2") = "ginger snap"
%&gt; 
 </code></pre>
<p>
this header is sent.</p>
<pre><code>Set-Cookie:MYCOOKIE=TYPE1=sugar&amp;TYPE2=ginger+snap
 </code></pre>
<p>
A subsequent assignment to <code>myCookie</code><i> </i>without specifying a key, would destroy <code>type1</code><i> </i>and <code>type2</code>. This is shown in the following example.</p>
<pre><code>&lt;% Response.Cookies("myCookie") = "chocolate chip" %&gt; 
 </code></pre>
<p>
In the preceding example, the keys <code>type1</code> and <code>type2</code> are destroyed and their values are discarded. The <code>myCookie</code> cookie now has the value <code>chocolate chip</code>. </p>
<p>
Conversely, if you call a cookie with a key, it destroys any nonkey values the cookie contained. For example, if after the preceding code you call <b>Response.Cookies</b> with the following</p>
<pre><code>&lt;% Response.Cookies("myCookie")("newType") = "peanut butter" %&gt; 
 </code></pre>
<p>
The value <code>chocolate chip</code> is discarded and <code>newType</code> would be set to <code>peanut butter</code>.</p>
<p>
To determine whether a cookie has keys, use the following syntax.</p>
<pre><code>&lt;%= Response.Cookies("myCookie").HasKeys %&gt; 
 </code></pre>
<p>
If <code>myCookie</code> is a cookie dictionary, the preceding value is TRUE. Otherwise, it is FALSE.</p>
<p>
You can use an iterator to set cookie attributes. For example, to set all of the cookies to expire on a particular date, use the following syntax.</p>
<pre><code>&lt;% 
For Each cookie in Response.Cookies
  Response.Cookie(cookie).Expires = #July 4, 1997#
Next
%&gt; 
 </code></pre>
<p>
You can also use an iterator to set the values of all the cookies in a collection, or all the keys in a cookie. However, the iterator, when invoked on a cookie that does not have keys, does not execute. To avoid this, you can first use the <b>.HasKeys</b> syntax to check whether a cookie has any keys. This is demonstrated in the following example. </p>
<pre><code>&lt;% 
If Not cookie.HasKeys Then
  'Set the value of the cookie 
  Response.Cookies(cookie) = ""
Else
  'Set the value for each key in the cookie collection
  For Each key in Response.Cookies(cookie)
    Response.Cookies(cookie)(key) = ""
  Next key
%&gt; 
 </code></pre>
<h4>Examples</h4>
<p>
The following examples demonstrate how you can set a value for a cookie and assign values to its attributes. </p>
<pre><code>&lt;% 
Response.Cookies("Type") = "Chocolate Chip"
Response.Cookies("Type").Expires = "July 31, 1997"
Response.Cookies("Type").Domain = "msn.com"
Response.Cookies("Type").Path = "/www/home/"
Response.Cookies("Type").Secure = FALSE
%&gt; 
 </code></pre>
<h4>Applies To</h4>
<p>
<a href="introbj_5sj8.htm"><b>Response Object</b></a> </p>
<h4>See Also</h4>
<p>
<a href="introbj_0z3o.htm"><b>Request.Cookies</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

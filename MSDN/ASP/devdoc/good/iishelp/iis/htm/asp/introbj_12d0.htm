<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Session Object</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_session_object"></a>Session Object</h1>
<p>
You can use the <b>Session</b> object to store information needed for a particular user-session. Variables stored in the <b>Session </b>object are not discarded when the user jumps between pages in the application; instead, these variables persist for the entire user-session. </p>
<p>
The Web server automatically creates a <b>Session </b>object when a Web page from the application is requested by a user who does not already have a session. The server destroys the <b>Session </b>object when the session expires or is abandoned. </p>
<p>
One common use for the <b>Session </b>object is to store user preferences. For example, if a user indicates that they prefer not to view graphics, you could store that information in the <b>Session</b> object. For more information on using the <b>Session </b>object, see <a href="../../../iis/htm/asp/iiapsess.htm">Managing Sessions</a> in the ASP Applications section.</p>
<p>
<b>Note</b>&nbsp;&nbsp;Session state is only maintained for browsers that support cookies.</p>
<h4>Syntax</h4>
<pre><code><b>Session.</b><i>collection</i>|<i>property</i>|<i>method</i>
<i> </i></code></pre>
<h4>Collections</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=25%><a href="introbj_8my6.htm"><b>Contents</b></a></td>
<td width=75%>Contains the items that you have added to the session with script commands. </td>
</tr>
<tr valign=top>
<td width=25%><a href="introbj_5ovi.htm"><b>StaticObjects</b></a></td>
<td width=75%>Contains the objects created with the &lt;OBJECT&gt; tag and given session scope.</td>
</tr>
</table><br>
<h4>Properties</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=25%><a href="introbj_4ht1.htm"><b>CodePage</b></a></td>
<td width=75%>The codepage that will be used for symbol mapping.</td>
</tr>
<tr valign=top>
<td width=25%><a href="introbj_72uc.htm"><b>LCID</b></a></td>
<td width=75%>The locale identifier.</td>
</tr>
<tr valign=top>
<td width=25%><a href="introbj_8b6s.htm"><b>SessionID</b></a></td>
<td width=75%>Returns the session identification for this user. </td>
</tr>
<tr valign=top>
<td width=25%><a href="introbj_04vo.htm"><b>Timeout</b></a></td>
<td width=75%>The timeout period for the session state for this application, in minutes.</td>
</tr>
</table><br>
<h4>Methods</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=25%><a href="introbj_5tpq.htm"><b>Abandon</b></a></td>
<td width=75%>This method destroys a <b>Session</b> object and releases its resources.</td>
</tr>
</table><br>
<h4>Events </h4>
<p>
Scripts for the following events are declared in the global.asa file. </p>
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><a href="global_2y90.htm"><b>Session_OnEnd</b></a></td>
</tr>
<tr valign=top>
<td width=100%><a href="global_6t84.htm"><b>Session_OnStart</b></a></td>
</tr>
</table><br>
<p>
For more information about these events and the global.asa file, see the <a href="global_63vp.htm"><b>Global.asa Reference</b></a>.</p>
<h4>Remarks</h4>
<p>
You can store values in the <b>Session </b>object. Information stored in the <b>Session </b>object is available throughout the session and has session scope. The following script demonstrates storage of two types of variables.</p>
<pre><code>&lt;% 
Session("username") = "Janine"
Session("age") = 24
%&gt;
 </code></pre>
<p>
However, if you store an object in the <b>Session</b> object and use VBScript as your primary scripting language, you must use the <b>Set</b> keyword. This is illustrated in the following script.</p>
<pre><code>&lt;% Set Session("Obj1") = Server.CreateObject("MyComponent.class1") %&gt;
 </code></pre>
<p>
You can then call the methods and properties exposed by <code>MyComponent.class1</code><i> </i>on subsequent Web pages, by using the following.</p>
<pre><code>&lt;% Session("Obj1").MyMethod %&gt;
 </code></pre>
<p>
Or by extracting a local copy of the object and using the following.</p>
<pre><code>&lt;% 
Set MyLocalObj1 = Session("Obj1") 
MyLocalObj1.MyObjMethod
%&gt;
 </code></pre>
<p>
Another way to create objects with session scope is to use the &lt;OBJECT&gt; tags in the global.asa file. </p>
<p>
You cannot, however, store a built-in object in a <b>Session </b>object. For example, each of the following lines would return an error.</p>
<pre><code>&lt;%
Set Session("var1") = Session
Set Session("var2") = Request
Set Session("var3") = Response
Set Session("var4") = Server
Set Session("var5") = Application
%&gt;
 </code></pre>
<p>
Before you store an object in the <b>Session </b>object, you should know what threading model it uses. Only objects marked as both can be stored in the <b>Session</b> object without locking the session to a single thread. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_selecting_a_threading_model">
</object><a href=JavaScript:alink_1.Click()><b>Selecting a</b> <b>Threading Model</b></a> in <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_creating_components_for_asp">
</object><a href=JavaScript:alink_2.Click()><b>Creating Components for ASP</b></a>.</p>
<p>
If you store an array in a <b>Session</b> object, you should not attempt to alter the elements of the stored array directly. For example, the following script will not work.</p>
<pre><code>&lt;% Session("StoredArray")(3) = "new value" %&gt;
 </code></pre>
<p>
This is because the <b>Session</b> object is implemented as a collection. The array element <code>StoredArray(3)</code> does not receive the new value. Instead, the value is indexed into the collection, overwriting any information stored at that location. </p>
<p>
It is strongly recommended that if you store an array in the <b>Session </b>object, you retrieve a copy of the array before retrieving or changing any of the elements of the array. When you are done with the array, you should store the array in the <b>Session </b>object all over again so that any changes you made are saved. This is demonstrated in the following example.</p>
<pre><code>---file1.asp---
&lt;%
'Creating and initializing the array
Dim MyArray()
Redim MyArray(5)
MyArray(0) = "hello"
MyArray(1) = "some other string"

'Storing the array in the Session object
Session("StoredArray") = MyArray

Response.Redirect("file2.asp")
%&gt;

---file2.asp---
&lt;%
'Retrieving the array from the Session Object
'and modifying its second element
LocalArray = Session("StoredArray")
LocalArray(1) = " there"

'printing out the string "hello there"
Response.Write(LocalArray(0)&amp;LocalArray(1))

'Re-storing the array in the Session object
'This overwrites the values in StoredArray with the new values
Session("StoredArray") = LocalArray
%&gt;
 </code></pre>
<h4>Examples</h4>
<p>
The following code assigns the string <code>MyName</code> to a session variable called <code>name</code>, assigns a value to a session variable called <code>year,</code> and assigns an instance of the <code>some.Obj</code> component to a variable called <code>myObj</code>. </p>
<pre><code>Session("name") = "MyName" 
Session("year") = 96 
Set Session("myObj") = Server.CreateObject("someObj") 
 %&gt; 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

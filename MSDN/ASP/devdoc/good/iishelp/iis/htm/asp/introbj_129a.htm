<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Contents Collection</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_application_contents_collection"></a>Application Contents Collection</h1>
<p>
The <b>Contents</b> collection is a group all of the items that have been added to the application through a script command. You can use the <b>Contents</b> collection to obtain a list of items that have been given application scope, or to specify a particular item to be the target of an operation.</p>
<h4>Syntax</h4>
<pre><code><b>Application.Contents</b>(<i>Key</i>)
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>Key</i></dt>
<dd>
Specifies the name of the item to retrieve.</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>Application.Contents</b> collection contains those items that have been declared at the application level without using the &lt;OBJECT&gt; tags. This would include both objects created with <b>Server.CreateObject</b> as well as scalar variables established through an <b>Application </b>declaration. In the following script, for example, both<code> MyVar</code> and <code>MyObj</code> would be members of the <b>Application.Contents</b> collection:</p>
<pre><code>&lt;% 
   Application("MyVar") = "Hello"
   Set Application("MyObj") = Server.CreateObject("MyComponent") %&gt;
</code></pre>
<p>
The <b>Application.Contents</b> collection supports <b>For...Each </b>and <b>For...Next </b>iteration. The following two scripts illustrate each of these methods of iterating through the <b>Application.Contents</b> collection.</p>
<pre><code>&lt;%
For Each Key in Application.Contents
  Response.Write ("Key")
Next Key 
%&gt;
&lt;% 
For i = 1 to Application.Contents.Count
  Response.Write ("Key")
Next Key 
%&gt;</code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Permission Checker Component</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_permission_checker_component"></a>Permission Checker Component</h1>
<p>
The Permission Checker component creates a <b>PermissionChecker</b> object that uses the password authentication protocols provided in Microsoft® Internet Information Server (IIS) to determine whether a Web user has been granted permissions to read a file. </p>
<p>
You can use the Permission Checker component to customize an ASP-based page for different types of users. For example, if a Web page contains hyperlinks, you can use the Permission Checker component to test whether the user has permissions for the target Web pages. If the user does not have the proper permissions, you can then omit or alter the hyperlinks to those pages the user may not access.</p>
<h4>Syntax</h4>
<pre><code><b>Set</b> <i>oVar</i> <b>= Server.CreateObject("MSWC.PermissionChecker")</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>oVar</i></dt>
<dd>
Specifies the name of the <b>PermissionChecker</b> object created by the call to <b>Server.CreateObject</b>. </dd>
</dl>
<h4>Registry Entries</h4>
<p>
None.</p>
<h4>Methods</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%><a href="permchk_87ub.htm"><b>HasAccess</b></a></td>
<td width=52%>Determines whether the user has permissions to access a specified file.</td>
</tr>
</table><br>
<h4>Examples</h4>
<p>
The following example uses the <b>HasAccess</b> method to test whether the current user has access to a specified file. Note that you can specify either a physical or virtual path.</p>
<pre><code>&lt;% Set pmck = Server.CreateObject("MSWC.PermissionChecker") %&gt;
 
Physical Path Access = &lt;%= pmck.HasAccess("c:\pages\abc\default.htm") %&gt;
Virtual Path  Access = &lt;%= pmck.HasAccess("/abc/default.htm") %&gt;
 </code></pre>
<h4>Remarks</h4>
<p>
IIS supports the following three types of password authentication in any combination:
<ul>
<li>
Anonymous</li>
<li>
Basic</li>
<li>
Windows NT® Challenge/Response (NTLM)</li>
</ul>
<p>
When anonymous password authentication is enabled, all users are initially logged on under the IIS anonymous user account. Because anonymous users all share the same account, the Permissions Checker component cannot authenticate individual users when anonymous access is allowed.</p>
<p>
For applications where all users have individual accounts, such as intranet-only Web sites, it is recommended that you disable anonymous authentication so that the Permissions Checker component can authenticate individual users.</p>
<p>
For applications where some pages must be available to anonymous users and other pages need to be secure, such as mixed Internet and intranet Web sites, you should enable anonymous authentication and at least one other password authentication method, either NTLM or Basic. Then if you deny anonymous access to a specific page, the server will attempt to authenticate the user by using either NTLM or Basic password authentication.</p>
<p>
You can use either of the following two methods to deny anonymous access to a specific page.
<ul>
<li>
Set the Access Control List for the ASP-based file to exclude the anonymous user account.</li>
<li>
In the ASP script, check for the anonymous user account (if the LOGON_USER server variable is empty) and set <b>Response.Status</b> to the <code>401 Unauthorized </code>error message. This will cause IIS to attempt to identify the user by using NTLM or Basic authentication. <p>
This is illustrated in the following example.
<pre><code>&lt;% 
If Request("LOGON_USER") = "" Then
    Response.Status = "401 Unauthorized"
End if
%&gt;
 </code></pre>
</li>
</ul>
<p>
If all the files in your application must be available to anonymous users, the Permission Checker component will not able to distinguish individual user accounts. You can still use it, however, to ensure that the specified Web page exists and test whether the anonymous user account has access permissions for that page.</p>
<p>
<b>Note</b>&nbsp;&nbsp;NTLM password authentication is currently supported only by Microsoft Internet Explorer, and may not work over a proxy server. Thus, if users connect to your site with browsers other than Internet Explorer or through a proxy server and your application requires a non-anonymous user context, you must also enable Basic password authentication.</p>
<p>
<b>Note</b>&nbsp;&nbsp;This component is not installed with IIS. You can install it from the Microsoft Web site at: <a href="http://www.microsoft.com/iis/"><b>http://www.microsoft.com/iis/</b></a>, or from the CD included with the IIS Resource Kit.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step-By-Step: Building a Web Design-time Control with MFC</TITLE>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<basefont face="verdana,arial,helvetica" size=2 color="#000000">
<!--DocHeaderStart-->
<BODY leftmargin=8 bgcolor="#FFFFFF" VLINK="#666666" LINK="#FF0000" TEXT="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<!--DocHeaderEnd-->
<!-- This is a PANDA Generated HTML file. The source is a WinWord Document. -->
<font size=6>Step-by-Step: Building a Web Design-time Control with MFC</font>

<P>October 6, 1996


<P><h4>Contents</h4>
<b><A HREF="#CREATE">Create an ActiveX control</A></b>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="#STEP1">Step 1:  Use MFC OLE ControlWizard to create your control</A>
<BR><b><A HREF="#ADD">Add Web design-time control support</A></b>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="#STEP2">Step 2:  Add IActiveDesigner interface to class definition</A>
<BR>&nbsp;&nbsp;&nbsp;<A HREF="#STEP3">Step 3: Implement IActiveDesigner interface</A>
<P><h4>Summary</h4>   <p>This document is a step-by-step tutorial for creating the BGSound Web design-time ActiveX control using MFC.
<P><h3><A NAME="CREATE"></A> Create an ActiveX control</h3>
<P><h4><A NAME="STEP1"></A> Step 1:  Use MFC OLE ControlWizard to create your control</H4><OL type=A>
<b><LI>Create new project workspace and run OleControlWizard, creating a project named &quot;BGSound.&quot; Set to Windowless activation in advanced options<LI>Add Design-time Control SDK include directory to INCLUDE Path</b><PRE><FONT FACE="COURIER" SIZE="2">
c:\progra~1\dcsdk\Samples\Mfc\include
</FONT></PRE>
<b><LI>Use View.ClassWizard to add Property Get/Set methods</b><PRE><FONT FACE="COURIER" SIZE="2">
BSTR Source
short Loop
</FONT></PRE>
<b><LI>Add Member Variables (in bgsoundctl.h)</b><PRE><FONT FACE="COURIER" SIZE="2">
// control properties
short m_nLoop;
CString m_strSource;
</FONT></PRE>
<b><LI>Add Get/Set Methods (in bgsoundctl.cpp)</b><PRE><FONT FACE="COURIER" SIZE="2">
short CBGSoundCtrl::GetLoop() 
{
      return m_nLoop;
}

void CBGSoundCtrl::SetLoop(short nNewValue) 
{
      // verify loop property is valid
      if (nNewValue &gt;= -1)
      {
             // set our internal loop value
             m_nLoop = nNewValue;

             // notify container that a property was modified
             SetModifiedFlag();

             // notify property browsers that this property changed
             BoundPropertyChanged(dispidLoop);
      }
      else
      {
             ThrowError(CTL_E_INVALIDPROPERTYVALUE, 
                            _T(&quot;Loop must be an integer greater than or equal to -1&quot;));
      }
}

BSTR CBGSoundCtrl::GetSource() 
{
      return m_strSource.AllocSysString();
}

void CBGSoundCtrl::SetSource(LPCTSTR lpszNewValue) 
{
    // set our internal source string
    m_strSource = lpszNewValue;

    // notify container that a property was modified
    SetModifiedFlag();

    // notify property browsers that this property changed
    BoundPropertyChanged(dispidSource);

    // make sure we get repainted since 'Source' is our caption
    InvalidateControl();
}
</FONT></PRE>
<b><LI>Add Support to persist properties (in CBGSoundCtrl::DoPropExchange)</b><PRE><FONT FACE="COURIER" SIZE="2">
// persist our properties
PX_String(pPX, _T(&quot;Source&quot;), m_strSource, _T(&quot;&quot;));
PX_Short(pPX, _T(&quot;Loop&quot;), m_nLoop, -1);
</FONT></PRE>
<b><LI>Add Drawing Code (in CBGSoundCtrl::OnDraw)</b><PRE><FONT FACE="COURIER" SIZE="2">
void CBGSoundCtrl::OnDraw(
                    CDC* pdc, const CRect&amp; rcBounds, const CRect&amp; rcInvalid)
{
    CFont fnt;
    CRect rcText;

    // get text rect;
    rcText = rcBounds;
    rcText.left += 2;
    rcText.right -= 2;
    rcText.top += 2;
    rcText.bottom -= 2;

    // create font
    fnt.CreatePointFont(160, _T(&quot;MS Sans Serif&quot;), pdc);
    CFont* pOldFont = pdc-&gt;SelectObject(&amp;fnt);
    pdc-&gt;SetBkMode(TRANSPARENT);

    // fill our rect with gray
    pdc-&gt;FillRect(rcBounds,                                                                               CBrush::FromHandle((HBRUSH)GetStockObject(LTGRAY_BRUSH)));

    // draw an edge
    pdc-&gt;DrawEdge(&amp;(RECT)rcBounds, EDGE_RAISED, BF_RECT);

    // draw the Source text
    pdc-&gt;DrawText(_T(&quot;\&quot;&quot;) + m_strSource + _T(&quot;\&quot;&quot;), &amp;(RECT)rcText, DT_WORDBREAK | DT_CENTER); 

    // return to old font
    pdc-&gt;SelectObject(pOldFont);
}
</FONT></PRE></OL><h3><A NAME="ADD"></A> Add Web design-time control support</h3>
<P><h4><A NAME="STEP2"></A> Step 2:  Add IActiveDesigner interface to class definition</H4><OL type=A>
<b><LI>Add IActiveDesigner interface definition (in bgsoundctl.h)</b><PRE><FONT FACE="COURIER" SIZE="2">
#include &quot;designer.h&quot;
#include &quot;webdc.h&quot;
</FONT></PRE>
<b><LI>Declare Interface_Map and IActiveDesigner interface (in bgsoundctl.h - protected)</b><PRE><FONT FACE="COURIER" SIZE="2">
// Interface maps
DECLARE_INTERFACE_MAP();

// IActiveDesigner Interface
BEGIN_INTERFACE_PART(ActiveDesigner, IActiveDesigner)
   STDMETHOD(GetRuntimeClassID)(CLSID *pclsid);
   STDMETHOD(GetRuntimeMiscStatusFlags)(DWORD *dwMiscFlags);
   STDMETHOD(QueryPersistenceInterface)(REFIID riidPersist);
   STDMETHOD(SaveRuntimeState)(REFIID riidPersist, REFIID riidObjStgMed, void *pObjStgMed);
   STDMETHOD(GetExtensibilityObject)(IDispatch **ppvObjOut);
END_INTERFACE_PART(ActiveDesigner)

virtual HRESULT GetRuntimeText(CString&amp; strText);
</FONT></PRE></OL><h4><A NAME="STEP3"></A> Step 3: Implement IActiveDesigner interface</H4><OL type=A>
<b><LI>Add intialization of IActiveDesigner GUIDs (in bgsoundctl.cpp after stdafx.h)</b><PRE><FONT FACE="COURIER" SIZE="2">
// Define and initialize required GUIDs
#include &lt;initguid.h&gt;
#include &quot;designer.h&quot;
#include &quot;webdc.h&quot;
</FONT></PRE>
<b><LI>Add Interface Map (in bgsoundctl.cpp)</b><PRE><FONT FACE="COURIER" SIZE="2">
////////////////////////////////////////////////////////////////////////
// Interface Map

BEGIN_INTERFACE_MAP(CBGSoundCtrl, COleControl)
      INTERFACE_PART(CBGSoundCtrl, IID_IActiveDesigner, ActiveDesigner)
END_INTERFACE_MAP()

</FONT></PRE>
<b><LI>Add IActiveDesigner interface implementation (in bgsoundctl.cpp)</b><PRE><FONT FACE="COURIER" SIZE="2">
////////////////////////////////////////////////////////////////////////
// CBGSoundCtrl::XActiveDesigner - IActiveDesigner interface
//
// The following functions represent the implementation of the IActiveDesigner
// interface. For the most part, these functions can be left as is. The
// SaveRuntimeState() function will call the CBGSoundCtrl::GetRuntimeText()
// function when it needs to generate run-time text.

STDMETHODIMP_(ULONG) CBGSoundCtrl::XActiveDesigner::AddRef(void)
{
      METHOD_MANAGE_STATE(CBGSoundCtrl, ActiveDesigner)
      return (ULONG)pThis-&gt;ExternalAddRef();
}

STDMETHODIMP_(ULONG) CBGSoundCtrl::XActiveDesigner::Release(void)
{
      METHOD_MANAGE_STATE(CBGSoundCtrl, ActiveDesigner)
      return (ULONG)pThis-&gt;ExternalRelease();
}

STDMETHODIMP CBGSoundCtrl::XActiveDesigner::QueryInterface(REFIID iid,
                                                                                          LPVOID far* ppvObj)
{
      METHOD_MANAGE_STATE(CBGSoundCtrl, ActiveDesigner)
      return (HRESULT)pThis-&gt;ExternalQueryInterface(&amp;iid, ppvObj);
}

STDMETHODIMP CBGSoundCtrl::XActiveDesigner::GetRuntimeClassID(CLSID *pclsid)
{
    *pclsid = CLSID_NULL;
    return S_FALSE;
}

STDMETHODIMP CBGSoundCtrl::XActiveDesigner::GetRuntimeMiscStatusFlags(DWORD *pdwMiscFlags)
{
      if (!pdwMiscFlags)
             return E_INVALIDARG;
      *pdwMiscFlags = NULL;
      return E_UNEXPECTED;
}

STDMETHODIMP CBGSoundCtrl::XActiveDesigner::QueryPersistenceInterface(REFIID riid)
{
      if (riid == IID_IPersistTextStream)
             return S_OK;
      return S_FALSE;
}

STDMETHODIMP CBGSoundCtrl::XActiveDesigner::SaveRuntimeState
(
      REFIID riidPersist,
      REFIID riidObjStgMed,
      void  *pObjStgMed
)
{
      HRESULT  hr;
      CString  cstrText;
      BSTR     bstrText;

      METHOD_MANAGE_STATE(CBGSoundCtrl, ActiveDesigner)

      if (riidPersist != IID_IPersistTextStream)
             return E_NOINTERFACE;

      if (riidObjStgMed != IID_IStream)
             return E_NOINTERFACE;

      hr = pThis-&gt;GetRuntimeText(cstrText);
      if (SUCCEEDED(hr))
      {
             bstrText = cstrText.AllocSysString();
             if (bstrText)
             {
                    hr = ((IStream *)pObjStgMed)-&gt;Write(bstrText,                                     SysStringByteLen(bstrText) + sizeof(OLECHAR), NULL);
                 SysFreeString(bstrText);
             }
             else
                 hr = E_OUTOFMEMORY;
      }

      return hr;
}

STDMETHODIMP CBGSoundCtrl::XActiveDesigner::GetExtensibilityObject(IDispatch **ppvObjOut)
{
      if (!ppvObjOut)
             return E_INVALIDARG;
      return this-&gt;QueryInterface(IID_IDispatch, (void **)ppvObjOut);
}

////////////////////////////////////////////////////////////////////////
// CBGSoundCtrl::GetRuntimeText - Generates run-time text for the control
//
// GetRuntimeText() is called whenever the container needs to update the
// run-time text after property changes or other state changes are made.

HRESULT CBGSoundCtrl::GetRuntimeText(CString&amp; strText)
{
    // our run-time Text template
    CString strTemplate = _T(&quot;&lt;BGSOUND SRC=\&quot;%s\&quot; LOOP=%d&gt;&quot;);

    // format our string with our properties
      strText.Format(strTemplate, m_strSource, m_nLoop);

      return S_OK;
}
<!--DocFooterStart-->
</FONT>
<FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
&#169; 1997 Microsoft Corporation. All rights reserved. <A HREF="legal.htm" target="_top">Legal Notices</a>.</FONT>
<!--DocFooterEnd-->
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Event Procedures</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">


<p>&nbsp;</p>

<p><a name="_Toc383926434"><font face="Arial"><b><i>Event
Procedures</i></b></font></a></p>

<p><font size="2">After placing a control on the form or report
design surface, a user can view the code behind the form by
selecting the <i>View | Code</i> menu item. Select the control
name in the left-hand side Object dropdown in the code window,
and each of the event procedures listed in the right-hand side
Event Procedure dropdown. In addition to the event procedures
exposed by the control through its type-library, the
extender-object that Access wraps around the custom control also
exposes a few event procedures as well. These events are <i>Enter,
Exit, GotFocus, LostFocus, </i>and<i> Updated</i>. Currently,
there is a bug that will cause a GPF if you attempt to build an
event procedure for a control that contains an event name that
conflicts with one of the five extender-object event names.</font></p>

<p><font size="2">Verify that the parameter types are correct for
each of the event procedures. For some parameter types, Access
will convert to the keyword object. For example, if your event
procedure has a parameter of type Node that is defined (for an
example, see the Visual Basic TreeView ActiveX Control's <i>Expand</i>
event) in the control's type-library, Access will build the event
procedure as: </font></p>

<p><font size="2"></font>&nbsp;</p>

<blockquote>
    <blockquote>
        <p><font size="2" face="Courier New">Private Sub
        ActiveXCtl1_Expand(ByVal Node As Object)</font></p>
        <p><font size="2"></font>&nbsp;</p>
    </blockquote>
</blockquote>

<p><font size="2">This is a slightly different behavior than
you'll see building the same event procedure for the control in
Visual Basic 5.0: </font></p>

<p><font size="2" face="Courier New"></font>&nbsp;</p>

<blockquote>
    <blockquote>
        <p><font size="2" face="Courier New">Private Sub
        TreeView1_Expand(ByVal Node As ComctlLib.Node)</font></p>
        <p><font size="2"></font>&nbsp;</p>
    </blockquote>
</blockquote>

<p><font size="2">Or, in Visual Basic 4.0 as: </font></p>

<p><font size="2" face="Courier New"></font>&nbsp;</p>

<blockquote>
    <blockquote>
        <p><font size="2" face="Courier New">Private Sub
        TreeView1_Expand(ByVal Node As Node)</font></p>
        <p><font size="2"></font>&nbsp;</p>
    </blockquote>
</blockquote>

<p><font size="2">Regardless, you'll see some variation here, so
make sure your control's event procedures work correctly with
non-standard types and that the correct parameter passing
convention is used based on your expectations.</font></p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls Test Plan</TITLE><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY bgcolor="#FFFFFF">

<h1>ActiveX Controls Test Plan</h1>
<h2>VC++ V5.0</h2>
<h2>06-Jan-97</h2>
<h2>(Modified from the 06-Sept-96 draft)</h2>
<h2>Overview</h2>
<p>
This plan describes basic test coverage for the ActiveX Controls within VC++ V5.0.  The ActiveX containers to be tested are:</p>
<ol>
<li>
Resource Editor (Dialog)<p>
</li>
<li>
Resource Editor Test Menu Item<p>
</li>
<li>
MFC Test Container</li>
</ol>
<h2>Methodology &amp; Acceptance Criteria</h2>
<p>
<b>Functionality:</b></p>
<p>
In order to pass for acceptance, the controls must do the following:</p>
<ol>
<li>
Controls can be inserted using the resource editor.<p>
</li>
<li>
Property pages can be viewed using the resource editor.<p>
</li>
<li>
Test function within the resource editor can be used to view the control.<p>
</li>
<li>
Controls generate wrappers correctly(via Component Gallery) and compile.<p>
</li>
<li>
Controls can be inserted and executed within the MFC Test Container.</li>
</ol>
<p>
<b>Usability and Performance:</b></p>
<p>
The tests in this document are compatibility tests between ActiveX controls and containers in VC++.  It is outside the scope of this plan to test for usability or performance.</p>
<p>
<b>Area:  Resource Editor Hosting</b></p>
<p>
Ensure that the resource editor can insert, host, test, and compile the controls.  This subsumes the first four functionality items listed above.</p>
<ol>
<li>
In a single app, insert all controls in one or more dialog boxes, using the Component Gallery to generate the wrapper classes and add the control to the resource editor (Dialog).<p>
</li>
<li>
For each control, scroll through the property pages.<p>
</li>
<li>
Run in Test mode and list through all of the controls.<p>
</li>
<li>
Compile and run the app.<p>
</li>
<li>
Observe for compilation warnings and errors.  (Common warnings include first chance exceptions and SetExtent warnings.)</li>
</ol>
<p>
<B>What this suite does not test:</B>
<ul>
<li>
Programmatic creation/execution of the controls.<p>
</li>
<li>
Insertion of controls via context menu in the resource (dialog) editor.  In this scenario, wrapper classes for the controls are not generated.</li>
</ul>
<p>
<b>Area:  Databinding </b></p>
<p>
Ensure that databinding controls can access SQL Server and Oracle databases and correctly populate the databound controls.</p>
<ol>
<li>
Create an app that hosts the databound controls.<p>
</li>
<li>
Connect the Remote Data Control to a SQL Server or Oracle Database.  Let the active query include a join.<p>
</li>
<li>
Bind the controls to the Remote Data Control.<p>
</li>
<li>
For List/Combobox styled controls, ensure that the lists populate by setting the ListSource and ListField properties.<p>
</li>
<li>
For single entry style controls like MaskedEdit, RichText and DBGrid, ensure that the MSRDC scrolls and updates the control properly.<p>
</li>
<li>
For Calendar type controls, query against a date field.</li>
</ol><p>
<B>What this suite does not test:</B>

<ul>
<li>
Views, synonyms, stored procedures, and other non tabular data.<p>
</li>
<li>
Non-text data.<p>
</li>
<li>
Boundary conditions.</li>
</ul>
<h2>MBCS Considerations</h2>
<p>
The controls are not necessarily localized.  This test will not do localization testing.</p>
<h2>Notes/Open Issues</h2>
<ul>
<li>
Programmatic testing is minimal and does not exercise all code paths.</li>
</ul>
</BODY>
</HTML>

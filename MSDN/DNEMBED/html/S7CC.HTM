<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Static SQL Statements</TITLE><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica"SIZE="2">

<H3>Static SQL Statements</H3><P CLASS="t">An entire Transact-SQL transaction, including variable declarations, control-of-flow language, and calls to stored procedures, can be coded as a single static SQL statement.</P>
<P CLASS="t">Static SQL statements can contain C-program host variables for input values and for output data. Host variables are defined by the host C application and are accessible to the C and Embedded SQL sections of your application. For more information about declaring and using host variables, see "Using Host Variables"  and "Using the SQLDA Data Structure," later in this chapter. </P>
<P CLASS="t">When an SQL statement uses input host variables, the values of these variables are inserted in the statement before the statement runs. Output host variables are filled with the values that are returned after the statement runs.</P>
<P></P>
<P CLASS="nh"><B>Important</B></P>
<P CLASS="nt">Because Embedded SQL does not support alternate format rows, COMPUTE and COMPUTE BY<B> </B>clauses are ignored. If a statement returns multiple results sets, only the first results set is recognized; subsequent results sets are discarded. Also, unless a cursor is used, if a statement returns more than one row, only the first row is recognized; subsequent rows are discarded.</P>
<P></P>
<P CLASS="t">At compile time, static SQL statements can be compiled as stored procedures into an access plan or executed as dynamic SQL statements. (Access plans and their alternatives are described in "Access Plans and Bind Files" and "Building Applications",) When a static SQL statement contains only a single transaction-management command, such as<B> </B>BEGIN TRANSACTION,<B> </B>COMMIT TRANSACTION, ROLLBACK TRANSACTION, or<B> </B>SAVE TRANSACTION, the static SQL statement is not compiled into an access plan because stored procedures cannot contain unbalanced transaction-management statements. In these cases, at run time, the application issues unmatched transaction-management statements as dynamic SQL statements.</P>
<P CLASS="t">The rules for Transact-SQL stored procedures apply to static SQL statements. For more information, see the <I>Microsoft SQL Server Transact-SQL Reference.</I> </P>
</FONT>
</BODY>
</HTML>

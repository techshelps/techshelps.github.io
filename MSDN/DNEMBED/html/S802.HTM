<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Precompiler Syntax</TITLE><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica"SIZE="2">

<H3>Precompiler Syntax</H3><P CLASS="t">You can use either a slash (/) or a hyphen (-) to designate a <B>sqlprep</B> precompiler option. For example, <B>/DB</B> <I>server_name</I><B>.</B><I>database_name</I> and <B>-DB</B> <I>server_name</I><B>.</B><I>database_name</I> are equivalent. </P>
<P CLASS="t">The <B>sqlprep</B> syntax is as follows:</P>
<P CLASS="syn"><B>sqlprep</B> <I>program_filename</I> [<B>/SQLACCESS</B> | <B>/NOSQLACCESS</B>]<BR>    [<B>/FLAGGER </B>{<B>ENTRY</B> | <B>NONE</B>}] [<B>/DB</B> [<I>server_name</I><B>.</B>]<I>database_name <BR>    </I><B>/PASS</B> <I>login</I>[<B>.</B><I>password</I>]] [<B>/BIND</B> <I>filename</I>] [<B>/MSG</B> <I>filename</I>] [<B>/NOLOGO</B>]     [<B>/PLAN</B> <I>name</I>] [<B>/NOLINES</B>]<B> </B>[<B>/</B>user_defined_option]</P>
<P CLASS="t">where</P>
<P CLASS="term1"><I>program_filename</I></P>
<P CLASS="dt1">Is the filename (without the extension) of the Embedded SQL program for precompiling. The precompiler searches for the file name and the file extension .SQC. For example, if you run <B>sqlprep</B> <B>myprogrm</B>, <B>sqlprep</B> searches for MYPROGRM.SQC and precompiles it if it is found.</P>
<P CLASS="term1"><B>/SQLACCESS</B></P>
<P CLASS="dt1">Specifies that <B>sqlprep</B> will automatically create stored procedures for static embedded SQL sections of the program. You must also include <B>/DB</B> and <B>/PASS</B> to specify a direct connection to SQL Server for creating the stored procedures, or <B>/BIND</B> to create a bind file for later loading of the stored procedures. Note that for standard cursors, the original SELECT statement is used directly, and the stored procedures that were created by the <B>/SQLACCESS </B>option are not used.</P>
<P CLASS="term1"><B>/NOSQLACCESS</B></P>
<P CLASS="dt1">Specifies that <B>sqlprep</B> will <I>not</I> automatically create stored procedures for static embedded SQL sections of the program. If you also include <B>/DB</B> and <B>/PASS</B> to specify a direct connection to SQL Server, <B>sqlprep</B> responds as follows: </P>
<UL><LI> <FONT FACE="Symbol"></FONT>    Issues a message</LI><LI> <FONT FACE="Symbol"></FONT>    Connects to SQL Server</LI><LI> <FONT FACE="Symbol"></FONT>    Drops stored procedures that were created from a previous precompile of the same program</LI><LI> <FONT FACE="Symbol"></FONT>    Completes the precompile without creating new stored procedures</LI></UL><P CLASS="term1"><B>/FLAGGER</B></P>
<P CLASS="dt1">Specifies sending static SQL statements to the server at compile time for syntax checking. Syntax or compilation error messages that are generated from the server are displayed on the screen. If you specify the <B>/FLAGGER</B> option, you must also specify the <B>/DB</B> and <B>/PASS</B> options. You cannot use the <B>/PLAN</B> or <B>/SQLACCESS</B> options with the <B>/FLAGGER</B> option.</P>
<P CLASS="term2"><B>ENTRY</B></P>
<P CLASS="dt2">Specifies that the static SQL sections are also checked for FIPS 127-2 SQL compliance. If the precompiler encounters SQL statements that do not conform to the specified FIPS level of support, an error message is displayed on the screen or stored in the file specified by the <B>/MSG</B> option. Program output is generated the same as when you use the <B>/NOSQLACCESS</B> option (that is, stored procedures are not created). </P>
<P CLASS="term2"><B>NONE</B></P>
<P CLASS="dt2">Specifies that the static SQL sections are not checked for FIPS 127-2 SQL compliance but are checked for correct syntax. The existence of database objects that the sections refer to is also verified.</P>
<P CLASS="term1"><B>/DB</B></P>
<P CLASS="dt1">Specifies a database, and optionally a SQL Server, in which to put stored procedures for the access plan. If SQL&nbsp;Server is running on your local computer, you need to supply only the <I>database_name</I>. Whenever you use the <B>/DB</B> option, you must also use the <B>/PASS</B> option. For more information about using <B>/DB</B> see "Access Plan and Bind File Options," later in this chapter.</P>
<P CLASS="term2">[<I>server_name</I><B><I>.</I></B>]<I>database_name</I></P>
<P CLASS="dt2">Is the same server name and/or database name that is in the Embedded SQL CONNECT TO statement in the program.</P>
<P CLASS="term1"><B>/PASS</B></P>
<P CLASS="dt1">Specifies $INTEGRATED support for the <I>login</I>[<B>.</B><I>password</I>] parameter, so that the precompiler can use integrated security regardless of the server's security mode. The compile-time connection is force integrated. Any implicit run-time connection is also force integrated. Whenever you use the <B>/PASS</B> option, you must also use the <B>/DB</B> option. For more information about using <B>/PASS,</B> see "Access Plan and Bind File Options," later in this chapter.</P>
<P CLASS="term2"><I>login</I>[<B>.</B><I>password</I>]</P>
<P CLASS="dt2">Is a user's login ID and password, or a user's login ID only. </P>
<P CLASS="term1"><B>/BIND</B> </P>
<P CLASS="dt1">Specifies that the extension .BND be automatically appended to the <I>filename</I>. The bind file is an <B>isql</B> script that can be used to create the desired stored procedures (it includes CREATE PROCEDURE statements). For more information about using <B>/BIND</B>, see "Access Plan and Bind File Options," later in this chapter.</P>
<P CLASS="dt1">When you create a bind file, you must use the Embedded SQL CONNECT TO statement to connect to the server. If you use this option and no stored procedure is created, the bind file is deleted.</P>
<P CLASS="term2"><I>filename</I></P>
<P CLASS="dt2">Is the name of a bind file (without an extension) to create in place of access plans. </P>
<P CLASS="term1"><B>/MSG</B> </P>
<P CLASS="dt1">Specifies that the extension .MSG be automatically appended to the <I>filename</I>. If the file has a length of 0 after precompile, it is deleted.</P>
<P CLASS="term2"><I>filename</I></P>
<P CLASS="dt2">Is the name of a file (without an extension) to create to store error messages that are sent by the <B>sqlprep</B> precompiler. </P>
<P CLASS="term1"><B>/NOLOGO</B></P>
<P CLASS="dt1">Specifies suppression of the <B>sqlprep</B> banner and the compiler banner (<B>sqlprep</B> invokes the compiler).</P>
<P CLASS="term1"><B>/PLAN</B> <I>name</I></P>
<P CLASS="dt1">Specifies a non-default name for an access plan. (The default name is the <I>program_filename</I> without an SQL extension.) </P>
<P CLASS="term1"><B>/NOLINES</B></P>
<P CLASS="dt1">Specifies that the generated .C file be displayed for debugging instead of the .SQC file. You must use the <B>/NOLINES </B>option if the .SQC source code contains C language code that appears on the same line after an EXEC SQL statement.</P>
<P CLASS="term1"><B>/user_defined_option</B></P>
<P CLASS="dt1">Is a user-defined option to be passed to the C compiler.</P>
</FONT>
</BODY>
</HTML>

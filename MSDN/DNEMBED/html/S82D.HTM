<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UPDATE and DELETE Statements</TITLE><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica"SIZE="2">

<H2>UPDATE and DELETE Statements</H2><P CLASS="t">Positioned UPDATE<B> </B>and<B> </B>DELETE statements are used in conjunction with cursors and include WHERE CURRENT OF clauses instead of search condition clauses. The WHERE CURRENT OF clause specifies the location of the corresponding cursor. </P>
<P CLASS="t">Before a cursor can be used by a positioned UPDATE or DELETE statement, the SELECT statement in the cursor declaration must contain the FOR BROWSE option. (The SQL&nbsp;Server FOR BROWSE option is similar to the FOR<B> </B>UPDATE option in other SQL databases, but you must use SQL&nbsp;Server syntax.) To use the FOR BROWSE option, the table must have both a unique index and a timestamp column. </P>
<P CLASS="t">When performing a positioned UPDATE or DELETE statement, a method called <I>optimistic concurrency control</I> helps to prevent conflicts with other users. Optimistic concurrency control allows users to share data with less interference than they would experience with locking, which is the alternative concurrency control method. </P>
<P CLASS="t">Although optimistic concurrency control minimizes the likelihood of conflicts with other users, write your application so that it can handle updates to tables that are rejected due to locking conflicts or other problems. Use the SQLCODE field in the SQL communications area (SQLCA) data structure to detect conflicts with other users. (A SQLCODE value of –532 means that the positioned UPDATE or DELETE statement failed because of a conflict with another user.) For more information about the<I> </I>SQLCODE field, see "Using the SQLCA Data Structure," in Chapter 2, "Embedded SQL Programming." For more information about browse-mode processing, see Appendix A, "Advanced Programming." </P>
<P CLASS="t">A positioned update can be performed twice on the same row. To do this, use the FETCH statement to obtain the row, begin a transaction by using BEGIN TRANSACTION, and update a non-key column to itself. This locks the row and prevents other users from reading or updating it until a COMMIT TRANSACTION statement is issued.</P>
</FONT>
</BODY>
</HTML>

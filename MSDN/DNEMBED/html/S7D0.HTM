<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Host Variables and Null Values</TITLE><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica"SIZE="2">

<H3>Host Variables and Null Values</H3><P CLASS="t">Unlike SQL, the C language does not support variables with null (unknown or missing) values. Embedded SQL enables you to store and retrieve null values from a database by using host indicator variables. Together, a host variable and its companion indicator variable specify a single SQL value. Each of the variables must be preceded by a colon (<B>:</B>). When a host variable is NULL, its indicator variable has the value –1. When a host variable is not NULL, the value of the indicator variable specifies the maximum length of the host variable data.</P>
<P CLASS="t">Place indicator variables immediately after the corresponding host variable that is specified in the Embedded SQL statement. For example, the following embedded UPDATE statement uses a <I>saleprice</I> host variable with a companion <I>saleprice_null </I>indicator variable:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="NEW COURIER" SIZE= "3">EXEC SQL UPDATE closeoutsale
    SET temp_price = :saleprice :saleprice_null, listprice = :oldprice;
</FONT></PRE>
<P CLASS="t">Optionally, you can precede an indicator variable with the INDICATOR keyword when using a host variable and its associated indicator variable. For example, the following embedded UPDATE statement uses the INDICATOR keyword to more easily identify the indicator variable <I>saleprice_null</I>:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="NEW COURIER" SIZE= "3">EXEC SQL UPDATE closeoutsale
    SET temp_price = :saleprice INDICATOR :saleprice_null;
</FONT></PRE>
<P CLASS="t">In this example, if <I>saleprice_null</I> has a value of –1, when the UPDATE statement executes, Embedded SQL will change the statement to:</P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="NEW COURIER" SIZE= "3">EXEC SQL UPDATE closeoutsale
    SET temp_price = null, listprice = :oldprice;
</FONT></PRE>
<P CLASS="t">You cannot use indicator variables in a search condition. For example, you cannot use the following Embedded SQL statement: </P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="NEW COURIER" SIZE= "3">EXEC SQL DELETE FROM closeoutsale
    WHERE temp_price = :saleprice :saleprice_null;
</FONT></PRE>
<P CLASS="t">However, you can use the following technique to search for null values: </P>
<P CLASS="spacing"><BR></P>
<PRE><FONT FACE="NEW COURIER" SIZE= "3">if (saleprice_null == –1)<BR>{<BR>    EXEC SQL DELETE FROM CLOSEOUTSALE
        WHERE temp_price is null;<BR>}<BR>else<BR>{<BR>    EXEC SQL DELETE FROM CLOSEOUTSALE<BR>        WHERE temp_price = :saleprice;<BR>}
</FONT></PRE></BODY></HTML>

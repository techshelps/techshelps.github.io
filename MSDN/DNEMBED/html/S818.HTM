<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Datatype Mapping</TITLE><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF" link=#003399 vlink=#996699>
<FONT FACE="Verdana, Arial, Helvetica"SIZE="2">

<H2>Datatype Mapping</H2><P CLASS="t">Embedded SQL maps C datatypes to SQL&nbsp;Server datatypes, and vice versa. Conversions are supported for all datatypes except <I>datetime</I> or <I>smalldatetime,</I> <I>money</I> or <I>smallmoney</I>, and <I>decimal</I> or <I>numeric</I> in some instances. The following table lists C datatypes and the SQL Server datatypes they map to. Datatypes that can be converted to <I>datetime</I> or <I>smalldatetime</I>, <I>money</I> or <I>smallmoney</I>, and <I>decimal</I> or <I>numeric</I> are listed with a corresponding T in the respective columns of the following table.</P>

<TABLE COLS="5" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="60pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="72pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD COLSPAN="5" VALIGN="TOP"><P CLASS="tr"></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="thf"><B><BR>C <BR>datatype</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Assigned <BR>SQL&nbsp;Server <BR>datatype</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B><BR><I>datetime</I> or<BR><I>smalldatetime</I></B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B><BR><I>money</I> or<BR><I>smallmoney</I></B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B><I><BR>decimal</I> or <I>numeric</I></B></P></TD></TR><TR><TD COLSPAN="5" VALIGN="TOP"><P CLASS="tr"></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt"><I>short </I></P></TD><TD VALIGN="TOP"><P CLASS="tt"><I>smallint</I></P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt"><I>int </I></P></TD><TD VALIGN="TOP"><P CLASS="tt"><I>smallint</I></P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt"><I>long</I></P></TD><TD VALIGN="TOP"><P CLASS="tt"><I>int</I></P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt"><I>float</I></P></TD><TD VALIGN="TOP"><P CLASS="tt"><I>real</I></P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt"><I>double</I></P></TD><TD VALIGN="TOP"><P CLASS="tt"><I>float</I></P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt"><I>char</I></P></TD><TD VALIGN="TOP"><P CLASS="tt"><I>varchar</I>[<I>x</I>]1</P></TD><TD VALIGN="TOP"><P CLASS="tt">T</P></TD><TD VALIGN="TOP"><P CLASS="tt">T</P></TD><TD VALIGN="TOP"><P CLASS="tt">T</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt"><I>void *p</I></P></TD><TD VALIGN="TOP"><P CLASS="tt"><I>binary</I>2</P></TD><TD VALIGN="TOP"><P CLASS="tt">T</P></TD><TD VALIGN="TOP"><P CLASS="tt">T</P></TD><TD VALIGN="TOP"><P CLASS="tt">T</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt"><I>char byte</I></P></TD><TD VALIGN="TOP"><P CLASS="tt"><I>tinyint</I></P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD><TD VALIGN="TOP"><P CLASS="tt">F</P></TD></TR><TR><TD COLSPAN="5" VALIGN="TOP"><P CLASS="tr"></P></TD></TR><TR><TD COLSPAN="5" VALIGN="TOP"><P CLASS="tft">1    For more information, see "Mapping Character Datatypes," later in this chapter. </P>
<P CLASS="tft">2    For more information, see "Pointers as Host Variables," later in this chapter. </P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">Output data is truncated if the receiving datatype is too short. This causes an exception (warning), and the SQLCODE field of the SQLCA data structure is set to +1. Input data can be truncated if the receiving SQL&nbsp;Server column is too short. However, in this case, no exception is generated.</P>
<P CLASS="t">Because <I>text</I> datatypes are not allowed in stored procedures, you cannot use C fields that are more than 255 bytes long in static SQL statements that are compiled into access plans.</P>
</FONT>
</BODY>
</HTML>

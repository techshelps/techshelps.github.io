<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Remote Applications and Productivity Applications</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>
<h1><a name="remoteapplicationsproductivityapplications"></a>Remote Applications and Productivity Applications</h1>
<p>
From the client/server example beginning on page 68, you can see how easily a thin-client/server solution using WinFrame can fit into your existing environment with little or no change in how users access the applications. These same features can be applied to applications accessed on the LAN as well as remotely, regardless of whether the application is a client/server application or a productivity application.</p>
<p class=indent>
You can launch any type of application from a WinFrame server.</p>
<p>
The same steps used for the test.exe example could have easily been used to run Microsoft Excel, Microsoft Word, Microsoft Internet Explorer, Netscape Navigator, or the Lotus SmartSuite applications under the same scenario. If transport exists between the user’s workstation and the WinFrame server, you can create an icon on the user’s desktop to take the actions listed at the top of the following page.
<ul type=disc>
<li>
Automatically launch the ICA client<br><br></li>
<li>
Connect to the specific WinFrame server (or group of servers if using load balancing)<br><br></li>
<li>
Automatically log on the user<br><br></li>
<li>
Automatically launch the program</li>
</ul>
</BODY>
</HTML>

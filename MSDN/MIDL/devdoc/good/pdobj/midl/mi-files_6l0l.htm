<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Generating a Proxy DLL and a Type Library From a Single IDL File</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_generating_a_proxy_dll_and_a_type_library_from_a_single_idl_file"></a>Generating a Proxy DLL and a Type Library From a Single IDL File</h1>
<p>
You can use a single IDL file to generate both the proxy stubs and header files for marshaling code, and a type library. You do this by defining an interface outside the library block and then referencing that interface from inside the library block, as shown in this example:</p>
<pre><code>//file: AllKnown.idl

[object, uuid(. . .), &lt;other interface attributes&gt;]
interface IKnown : IUnknown {
import "unknwn.idl";
&lt;declarations, etc. for IKnown interface go here&gt;
};

[&lt;library attributes&gt;]library KnownLibrary {

//reference interface IKnown:
interface IKnown;

//or create a new class:
  [&lt;coclass attributes&gt;] coclass KnowMore {
   interface IKnown;
  };
};
 </code></pre>
<h4>See Also</h4>
<p>
<a href="mi-files_5wz7.htm">Marshaling OLE Data Types</a>, <a href="mi-files_8z95.htm">Additional Files Required To Generate a Type Library</a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

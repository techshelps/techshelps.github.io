<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>represent_as</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_represent_as"></a>represent_as</h1>
<p>
<b>typedef&nbsp;[represent_as(</b><i>repr-type</i><b>)</b><i>&nbsp;</i>[&nbsp;<b>,</b>&nbsp;<i>type-attribute-list&nbsp;</i>]&nbsp;<b>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b><i>named-type</i><b>;</b>&nbsp;</p>
<p>
<b>void&nbsp;__RPC_USER&nbsp;</b><i>named-type</i><b>_from_local&nbsp;(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b><i>repr-type&nbsp;</i><b>__RPC_FAR&nbsp;*&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b><i>named-type&nbsp;</i><b>__RPC_FAR&nbsp;*&nbsp;__RPC_FAR&nbsp;*&nbsp;);</b></p>
<p>
<b>void&nbsp;__RPC_USER&nbsp;</b><i>named-type</i><b>_to_local&nbsp;(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b><i>named-type&nbsp;</i><b>__RPC_FAR&nbsp;*&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b><i>repr-type&nbsp;</i><b>__RPC_FAR&nbsp;*&nbsp;);</b></p>
<p>
<b>void&nbsp;__RPC_USER&nbsp;</b><i>named-type</i><b>_free_inst&nbsp;(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b><i>named-type&nbsp;</i><b>__RPC_FAR&nbsp;*&nbsp;);</b></p>
<p>
<b>void&nbsp;__RPC_USER&nbsp;</b><i>named-type</i><b>_free_local&nbsp;(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b><i>repr-type</i><b>__RPC_FAR&nbsp;*&nbsp;);</b>
<dl>
<dt>
<i>named-type</i></dt>
<dd>
Specifies the named transfer data type that is transferred between client and server.</dd>
<dt>
<i>type-attribute-list</i></dt>
<dd>
Specifies one or more attributes that apply to the type. Separate multiple attributes with commas.</dd>
<dt>
<i>repr-type</i></dt>
<dd>
Specifies the represented local type in the target language that is presented to the client and server applications.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>//these data types defined in .IDL or elsewhere
typedef struct  _lbox { 
    long         data; 
    struct _lbox *next; 
} lbox; 
typedef [ref] lbox *PBOX_LOC; 
typedef long LONG4[4]; 
</code> 
<code>//in .ACF file :</code>
<code>interfaceFoo </code>

<code>{ </code>
<code>typedef  [ represent_as(PBOX_LOC) ]  LONG4; </code>
<code>}</code>
<code> </code></pre>
<h4>Remarks</h4>
<p>
The <b>represent_as</b> attribute associates a named local type in the target language <i>repr-type </i>with a transfer type <i>named-type</i> that is transferred between client and server. You must supply routines that convert between the local and the transfer types and that free memory used to hold the converted data. The <b>represent_as</b> attribute instructs the stubs to call the user-supplied conversion routines.</p>
<p>
The transferred type <i>named-type</i> must resolve to a MIDL base type, predefined type, or to a type identifier. For more information, see <a href="mi-laref_20du.htm"><b>base_types</b></a>.</p>
<p>
You must supply the following routines:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>Routine name</th>
<th align=left width=64%>Description</th>
</tr>
<tr valign=top>
<td width=36%><i>named_type</i><b>_from_local</b></td>
<td width=64%>Allocates an instance of the network type and converts from the local type to the network type</td>
</tr>
<tr valign=top>
<td width=36%><i>named_type</i><b>_to_local</b></td>
<td width=64%>Converts from the network type to the local type</td>
</tr>
<tr valign=top>
<td width=36%><i>named_type</i><b>_free_local</b></td>
<td width=64%>Frees memory allocated by a call to the <i>named_type</i><b>_to_local</b> routine, but not the type itself</td>
</tr>
<tr valign=top>
<td width=36%><i>named_type</i><b>_free_inst</b></td>
<td width=64%>Frees storage for the network type (both sides)</td>
</tr>
</table><br>
<p>
The client stub calls <i>named-type</i><b>_from_local</b> to allocate space for the transmitted type and to translate the data from the local type to the network type. The server stub allocates space for the original data type and calls <i>named-type</i><b>_to_local</b> to translate the data from the network type to the local type.</p>
<p>
Upon return from the application code, the client and server stubs call <i>named-type</i><b>_free_inst</b> to deallocate the storage for network type. The client stub calls <i>named-type</i><b>_free_local</b> to deallocate storage returned by the routine.</p>
<p>
The following types cannot have a <b>represent_as</b> attribute:
<ul>
<li>
Conformant, varying, or conformant varying arrays.</li>
<li>
Structures in which the last member is a conformant array (a conformant structure).</li>
<li>
Pointers or types that contain a pointer.</li>
<li>
Predefined types <b>handle_t</b>, <b>void</b>.</li>
<li>
A type cannot have both the <b>represent_as </b>attribute and the <b>handle </b>attribute.</li>
</ul>
<h4>See Also</h4>
<p>
<a href="mi-laref_1e5o.htm"><b>ACF</b></a>, <a href="mi-laref_0vzl.htm"><b>arrays</b></a>, <a href="mi-laref_20du.htm"><b>base_types</b></a>, <a href="mi-laref_9l7q.htm"><b>typedef</b></a></p>
<p>&nbsp;</p></body>
</HTML>

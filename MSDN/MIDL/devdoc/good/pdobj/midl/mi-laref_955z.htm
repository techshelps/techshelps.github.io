<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>string</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_string"></a>string</h1>
<p>
<b>typedef</b>&nbsp;<b>[&nbsp;string&nbsp;</b>[&nbsp;<b>,&nbsp;</b><i>type-attribute-list&nbsp;</i>]&nbsp;<b>]</b>&nbsp;<i>type-specifier&nbsp;declarator-list</i><b>;</b>&nbsp;<br>
<br>
<b>typedef</b>&nbsp;<i>struct-or-union-declarator&nbsp;</i><b>{</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>[&nbsp;string&nbsp;</b>[&nbsp;<b>,&nbsp;</b><i>field-attribute-list&nbsp;</i>]&nbsp;<b>]</b>&nbsp;<i>type-specifier</i>&nbsp;<i>declarator-list</i><b>;</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>...}<br>
<br>
[&nbsp;string&nbsp;</b>[&nbsp;<b>,&nbsp;</b><i>function-attribute-list</i><b>&nbsp;</b>]&nbsp;<b>]&nbsp;</b><i>type-specifier&nbsp;ptr-decl</i>&nbsp;<i>function-name</i><b>(</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;<b>[&nbsp;</b><i>parameter-attribute-list</i>&nbsp;<b>]&nbsp;</b>]<b>&nbsp;</b><i>type-specifier&nbsp;</i>[<i>declarator</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;<b>...</b><br>
<b>);<br>
</b>[<b>&nbsp;[&nbsp;</b><i>function-attribute-list</i><b>&nbsp;]&nbsp;</b>]&nbsp;<i>type-specifier&nbsp;</i>[<i>ptr-decl</i>]&nbsp;<i>function-name</i><b>(</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>[&nbsp;string&nbsp;</b>[&nbsp;<b>,</b>&nbsp;<i>parameter-attribute-list</i>&nbsp;]&nbsp;<b>]&nbsp;</b><i>type-specifier&nbsp;</i>[<i>declarator</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;<b>...<br>
);</b>
<dl>
<dt>
<i>type-attribute-list</i></dt>
<dd>
Specifies one or more attributes that apply to a type. Valid type attributes include <b>handle</b>, <b>switch_type</b>, <b>transmit_as</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>context_handle</b>, <b>string</b>, and <b>ignore</b>. Separate multiple attributes with commas.</dd>
<dt>
<i>type-specifier</i></dt>
<dd>
Specifies a <b>base_type</b>, <b>struct</b>, <b>union</b>, or <b>enum</b> type or type identifier. An optional storage specification can precede <i>type-specifier</i>.</dd>
<dt>
<i>declarator </i>and<i> declarator-list</i></dt>
<dd>
Specify standard C declarators, such as identifiers, pointer declarators, and array declarators. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_pointers">
</object><a href=JavaScript:alink_1.Click()><b>pointers</b></a> and <a href="mi-laref_0vzl.htm"><b>arrays</b></a>. The <i>declarator-list</i> consists of one or more declarators separated by commas. The parameter-name identifier in the function declarator is optional.</dd>
<dt>
<i>struct-or-union-declarator</i></dt>
<dd>
Specifies a MIDL <a href="mi-laref_06k4.htm"><b>struct</b></a> or <a href="mi-laref_76i6.htm"><b>union</b></a> declarator.  </dd>
<dt>
<i>field-attribute-list</i></dt>
<dd>
Specifies zero or more field attributes that apply to the structure, union member, or function parameter. Valid field attributes include <b>first_is</b>, <b>last_is</b>, <b>length_is</b>, <b>max_is</b>, <b>size_is</b>; the usage attributes <b>string</b>, <b>ignore</b>, and <b>context_handle</b>, the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>, and the union attribute <b>switch_type</b>. Separate multiple field attributes with commas.</dd>
<dt>
<i>function-attribute-list</i></dt>
<dd>
Specifies zero or more attributes that apply to the function. Valid function attributes are <b>callback</b>, <b>local</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>string</b>, <b>ignore</b>, and <b>context_handle</b>.</dd>
<dt>
<i>ptr-decl</i></dt>
<dd>
Specifies an optional pointer declarator to which the <b>string</b> attribute applies. A pointer declarator is the same as the pointer declarator used in C; it is constructed from the <b>*</b> designator, modifiers such as <b>far</b>, and the qualifier <b>const</b>.</dd>
<dt>
<i>function-name</i></dt>
<dd>
Specifies the name of the remote procedure.</dd>
<dt>
<i>parameter-attribute-list</i></dt>
<dd>
Consists of zero or more attributes appropriate for the specified parameter type. Parameter attributes can take the directional attributes <b>in</b> and <b>out</b>; the field attributes <b>first_is</b>, <b>last_is</b>, <b>length_is</b>, <b>max_is</b>, <b>size_is</b>, and <b>switch_type</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>context_handle</b> and <b>string</b>. The usage attribute <b>ignore</b> cannot be used as a parameter attribute. Separate multiple attributes with commas.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>/* a string type that can hold up to 80 characters */ 
typedef [string] char line[81]; 
 
HRESULT Proc1([in, string] char * pszName); 
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>string</b> attribute indicates that the one-dimensional <b>char</b>, <b>wchar_t</b>, <b>byte</b> (or equivalent) array or the pointer to such an array must be treated as a string.</p>
<p>
The string can also be an array (or a pointer to an array) of constructs whose fields are all of the type "byte."</p>
<p>
If the <b>string</b> attribute is used with an array whose bounds are determined at run time, you must also specify a <b>size_is</b> or <b>max_is</b> attribute.</p>
<p>
The <b>string</b> attribute cannot be used with attributes that specify the range of transmitted elements, such as <b>first_is</b>, <b>last_is</b>, and <b>length_is</b>.</p>
<p>
When used on multidimensional arrays, the <b>string</b> attribute applies to the rightmost array.</p>
<p>
To define a counted string, do not use the <b>string</b> attribute. Use a character array or character-based pointer such as the following:</p>
<pre><code>typedef struct { 
    unsigned short size; 
    unsigned short length; 
    [size_is(size), length_is(length)] char string[*]; 
} counted_string; 
 </code></pre>
<p>
The <b>string</b> attribute specifies that the stub should use a language-supplied method to determine the length of strings.</p>
<p>
When declaring strings in C, you must allocate space for an extra character that marks the end of the string.</p>
<h4>See Also</h4>
<p>
<a href="mi-laref_0vzl.htm"><b>arrays</b></a>, <a href="mi-laref_0e3w.htm"><b>char</b></a>, <a href="mi-laref_3wz8.htm"><b>wchar_t</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>handle</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_handle"></a>handle</h1>
<p>
<b>typedef [handle]</b> <i>typename</i><b>;</b> <br>
<b>handle_t __RPC_USER</b> <i>typename</i><b>_bind (</b><i>typename</i><b>);</b><br>
<b>void __RPC_USER</b> <i>typename</i><b>_unbind (</b><i>typename</i><b>, handle_t);</b>
<dl>
<dt>
<i>typename</i></dt>
<dd>
Specifies the name of the user-defined binding-handle type.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>typedef [handle] struct { 
    char machine[8]; 
    char nmpipe[256]; 
 } h_service; 
 
handle_t __RPC_USER h_service_bind(h_service); 
void __RPC_USER h_service_unbind(h_service, handle_t); 
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>handle</b> attribute specifies a user-defined or "customized" handle type. User-defined handles permit developers to design handles that are meaningful to the application.</p>
<p>
A user-defined handle can only be defined in a type declaration, not in a function declarator.</p>
<p>
A parameter of a type defined by the <b>handle</b> attribute is used to determine the binding for the call and is transmitted to the called procedure.</p>
<p>
The user must provide binding and unbinding routines to convert between primitive and user-defined handle types. Given a user-defined handle of type <i>typename</i>, the user must supply the routines <i>typename</i>_<b>bind</b> and <i>typename</i>_<b>unbind</b>. For example, if the user-defined handle type is named MYHANDLE, the routines are named MYHANDLE_<b>bind</b> and MYHANDLE_<b>unbind</b>.</p>
<p>
If successful, the <i>typename</i>_<b>bind</b> routine should return a valid primitive binding handle. If unsuccessful, the routine should return a NULL. If the routine returns NULL, the <i>typename</i>_<b>unbind</b> routine will not be called. If the binding routine returns an invalid binding handle different from NULL, the stub behavior is undefined.</p>
<p>
When the remote procedure has a user-defined handle as a parameter or as an implicit handle, the client stubs call the binding routine before calling the remote procedure. The client stubs call the unbinding routine after the remote call.</p>
<p>
In DCE IDL, a parameter with the <b>handle</b> attribute must appear as the first parameter in the remote procedure argument list. Subsequent parameters, including other <b>handle</b> attributes, are treated as ordinary parameters. Microsoft supports an extension to DCE IDL that allows the user-defined <b>handle</b> parameter to appear in positions other than the first parameter.</p>
<h4>See Also</h4>
<p>
<a href="mi-laref_6mcz.htm"><b>handles</b></a>, <a href="mi-laref_49v0.htm"><b>IDL</b></a>, <a href="mi-laref_8y91.htm"><b>implicit_handle</b></a>, <a href="mi-laref_9l7q.htm"><b>typedef</b></a></p>
<p>&nbsp;</p></body>
</HTML>

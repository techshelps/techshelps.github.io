<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>dispinterface</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_dispinterface"></a>dispinterface</h1>
<p>
<b>[</b><i>attributes</i><b>]dispinterface</b> <i>intfname</i> <b>{</b> &nbsp;&nbsp; <b>properties:</b><i>proplist</i> &nbsp;&nbsp; <b>methods:</b> &nbsp;&nbsp; <i>methlist</i><b>};</b></p>
<p>
<b>[</b><i>attributes</i><b>]dispinterface</b> <i>intfname</i> <b>{</b> &nbsp;&nbsp; <b>interface</b> <i>interfacename</i><b>};</b>
<dl>
<dt>
<i>attributes</i></dt>
<dd>
Specifies attributes that apply to the entire <b>dispinterface</b>. The following attributes are accepted: <b>helpstring</b>,<b> helpcontext</b>,<b> helpfile</b>,<b> hidden</b>, <b>nonextensible</b>, <b>oleautomation</b>, <b>restricted</b>,<b> uuid</b>, <b>version</b>.</dd>
<dt>
<i>intfname</i></dt>
<dd>
The name by which the <b>dispinterface</b> is known in the type library. This name must be unique within the type library.</dd>
<dt>
<i>interfacename</i></dt>
<dd>
(Syntax 2) The name of the interface to declare as an <b>IDispatch</b> interface.</dd>
<dt>
<i>proplist</i></dt>
<dd>
(Syntax 1) An optional list of properties supported by the object, declared in the form of variables. This is the short form for declaring the property functions in the methods list. See the comments section for details.</dd>
<dt>
<i>methlist</i></dt>
<dd>
(Syntax 1) A list comprising a function prototype for each method and property in the <b>dispinterface</b>. Any number of function definitions can appear in <i>methlist</i>. A function in <i>methlist </i>has the following form:
<p>
<b>[</b><i>attributes</i><b>]</b> <i>returntype</i> <i>methname</i><b>(</b><i>params</i><b>);</b>

<p>
The following attributes are accepted on a method in a <b>dispinterface</b>: <b>helpstring</b>, <b>helpcontext</b>, <b>string</b>, <b>bindable</b>, <b>defaultbind</b>, <b>displaybind</b>, <b>propget</b>, <b>propput</b>, <b>propputref</b>, and <b>vararg</b>. If <b>vararg</b> is specified, the last parameter must be a safe array of VARIANT type.

<p>
The parameter list is a comma-delimited list, each element of which has the following form:

<p>
<b>[</b><i>attributes</i><b>]</b> <i>type</i> <i>paramname</i>

<p>
The <i>type </i>can be any declared or built-in type, or a pointer to any type. Attributes on parameters are:

<p>
<b>in</b>, <b>out</b>, <b>optional</b>, <b>string</b>

</dd>
</dl>
<p>
The MIDL compiler accepts the following parameter ordering (from left-to-right):
<ol>
<li>
Required parameters (parameters that do not have the <b>defaultvalue </b>or <b>optional</b> attributes),</li>
<li>
optional parameters with or without the <b>defaultvalue</b> attribute,</li>
<li>
parameters with the <a href="mi-laref_7wh8.htm"><b>optional</b></a> attribute and without the <b>defaultvalue</b> attribute,</li>
<li>
<a href="mi-laref_0ap0.htm"><b>lcid</b></a> parameter, if any,</li>
<li>
<a href="mi-laref_3kx8.htm"><b>retval</b></a> parameter</li>
</ol>
<h4>Examples</h4>
<pre><code>[ uuid(. . .), version(1.0), helpstring("Useful help string."), helpcontext(2480)] 
dispinterface MyDispatchObject { 
    properties: 
        [id(1)] int x;    //An integer property named x 
        [id(2)] BSTR y;   //A string property named y 
    methods: 
        [id(3)] HRESULT show();    //No arguments, no result 
        [id(11)] int computeit(int inarg, double *outarg); 
}; 
 
[uuid(. . .)] 
dispinterface MyObject 
{ 
    properties: 
    methods: 
        [id(1), propget, bindable, defaultbind, displaybind] 
        long x(); 
 
        [id(1), propput, bindable, defaultbind, displaybind] 
        HRESULT x(long rhs); 
} 
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>dispinterface</b> statement defines a set of properties and methods on which you can call <b>IDispatch::Invoke</b>. A dispinterface may be defined by explicitly listing the set of supported methods and properties (Syntax 1), or by listing a single interface (Syntax 2).</p>
<p>
Method functions are specified exactly as described in the reference page for <a href="mi-laref_9hb9.htm"><b>module</b></a> except that the <b>entry</b> attribute is not allowed. Note that STDOLE32.TLB (STDOLE.TLB on 16-bit systems) must be imported, because a <b>dispinterface</b> inherits from <b>IDispatch</b>.</p>
<p>
You can declare properties in either the properties or methods lists. Declaring properties in the properties list does not indicate the type of access the property supports (that is, get, put, or putref). Specify the <b>readonly</b> attribute for properties that don't support put or putref. If you declare the property functions in the methods list, functions for one property all have the same ID.</p>
<p>
Using the first syntax, the <b>properties:</b> and <b>methods:</b> tags are required. The <b>id</b> attribute is also required on each member. For example:</p>
<pre><code>properties: 
    [id(0)] int Value;    // Default property. 
methods: 
    [id(1)] HRESULT Show(); 
 </code></pre>
<p>
Unlike <b>interface</b> members, <b>dispinterface</b> members cannot use the <b>retval</b> attribute to return a value in addition to an HRESULT error code. The <b>lcid</b> attribute is likewise invalid for dispinterfaces, because <b>IDispatch::Invoke</b> passes an LCID. However, it is possible to redeclare an interface that uses these attributes.</p>
<p>
Using the second syntax, interfaces that support <b>IDispatch</b> and are declared earlier in an ODL script can be redeclared as <b>IDispatch</b> interfaces as follows:</p>
<pre><code>dispinterface helloPro { 
    interface hello; 
}; 
 </code></pre>
<p>
The preceding example declares all the members of <code>hello</code> and all the members that <code>hello</code> inherits as supporting <b>IDispatch</b>. In this case, if <code>hello</code> were declared earlier with <b>lcid</b> and <b>retval</b> members that returned HRESULTs, MkTypLib would remove each <b>lcid</b> parameter and HRESULT return type, and instead mark the return type as that of the <b>retval</b> parameter.</p>
<p>
The properties and methods of a dispinterface are not part of the VTBL of the dispinterface. Consequently, <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_createstddispatch">
</object><a href=JavaScript:alink_1.Click()><b>CreateStdDispatch</b></a> and <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_dispinvoke">
</object><a href=JavaScript:alink_2.Click()><b>DispInvoke</b></a> cannot be used to implement <b>IDispatch::Invoke</b>. The dispinterface is used when an application needs to expose existing non-VTBL functions through OLE Automation. These applications can implement <b>IDispatch::Invoke</b> by examining the <i>dispidMember </i>parameter and directly calling the corresponding function.</p>
<h4>See Also</h4>
<p>
<a href="mi-laref_1hut.htm"><b>interface</b></a>, <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_typeflags">
</object><a href=JavaScript:alink_3.Click()>TYPEFLAGS</a>, <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_odl_file_syntax">
</object><a href=JavaScript:alink_4.Click()>ODL File Syntax</a>, <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_odl_file_example">
</object><a href=JavaScript:alink_5.Click()>ODL File Example</a>, <a href="mi-files_7jl8.htm">Generating a Type Library With MIDL</a></p>
<p>&nbsp;</p></body>
</HTML>

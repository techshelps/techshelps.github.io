<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDL</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_idl"></a>IDL</h1>
<p>
<b>[ </b><i>interface-attribute-list</i><b> ] interface</b> <i>interface-name</i><br>
<b>{</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;[ <b>import </b><i>import-file-list</i><b> ;</b> <b>... </b>] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[ <b>cpp_quote(</b>"<i>string</i>"<i>)</i><b> ... </b>] <br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;[ <b>const</b> <i>const-type identifier</i> <b>=</b> <i>const-expression</i><b> ; ... </b>]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;[ [ <b>typedef</b> ] [ <b>[</b><i>type-attribute-list</i><b>]</b> ] <i>type-specifier declarator-list</i><b>;</b> <b>...</b>]<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;&nbsp;&nbsp;[ <b>[</b><i>function-attr-list</i><b>] </b>] <i>type-specifier </i>[<i>pointer-declarator</i>] <i>function-name</i><b>(</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ <b>[</b><i>parameter-attribute-list</i><b>]</b> ] <i>type-specifier </i>[<i>declarator</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>,</b> <b>...</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>);<br>
</b>&nbsp;&nbsp;&nbsp;&nbsp;<b>...<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b>]<br>
<b>}</b>
<dl>
<dt>
<i>interface-attribute-list</i></dt>
<dd>
Specifies either the attribute <b>uuid</b> or the attribute <b>local</b> and other optional attributes that apply to the interface as a whole. The attributes <b>endpoint</b>, <b>version</b>, and <b>pointer_default</b> are optional. When you compile with the <b>/app_config</b> switch, either <b>implicit_handle</b> or <b>auto_handle</b> can also be present. Separate multiple attributes with commas. The <i>interface-attribute-list</i> does not have to be present for imported IDL files, but must be present for the base IDL file.</dd>
<dt>
<i>interface-name</i></dt>
<dd>
Specifies the name of the interface. The name cannot be that of any other identifier (for example a type name or another interface). The same interface name must be supplied in the ACF, except when you compile with the <b>/acf</b> switch.</dd>
<dt>
<i>import-file-list</i></dt>
<dd>
Specifies one or more IDL files to import. Separate filenames with commas.</dd>
<dt>
<i>string</i></dt>
<dd>
Specifies a string that is emitted in the generated header file.</dd>
<dt>
<i>const-type</i></dt>
<dd>
Specifies the name of an integer, character, <b>boolean</b>, <b>void</b> <b>*</b>, <b>byte</b>, or string (<b>char</b> <b>*</b>, <b>byte *</b>, <b>wchar_t *</b>) type. Only these types can be assigned <b>const</b> values in the IDL file. </dd>
<dt>
<i>identifier</i></dt>
<dd>
Specifies a valid MIDL identifier. Valid MIDL identifiers consist of up to 31 alphanumeric and/or underscore characters and must start with an alphabetic or underscore character.</dd>
<dt>
<i>const-expression</i></dt>
<dd>
Specifies a constant declaration. The <i>const-expression</i> must evaluate to the type specified by <i>const-type. </i>For more information, see <a href="mi-laref_0jw4.htm"><b>const</b></a>. </dd>
<dt>
<i>type-attribute-list</i></dt>
<dd>
Specifies one or more attributes that apply to the type. Valid type attributes include <b>handle</b>, <b>switch_type</b>, <b>transmit_as</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>context_handle</b>, <b>ignore</b>, and <b>string</b>. Separate multiple attributes with commas.</dd>
<dt>
<i>type-specifier</i></dt>
<dd>
Specifies a <b>base_type</b>, <b>struct</b>, <b>union</b>, <b>enum</b> type, or type identifier. An optional storage specification can precede <i>type-specifier</i>.</dd>
<dt>
<i>declarator </i>and<i> declarator-list</i></dt>
<dd>
Specify standard C declarators, such as identifiers, pointer declarators, and array declarators. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_pointers">
</object><a href=JavaScript:alink_1.Click()><b>pointers</b></a> and <a href="mi-laref_0vzl.htm"><b>arrays</b></a>. The <i>declarator-list</i> consists of one or more declarators separated by commas. The parameter declarator in the function declarator, such as the parameter name, is optional.</dd>
<dt>
<i>function-attr-list</i></dt>
<dd>
Specifies zero or more attributes that apply to the function. Valid function attributes are <b>callback</b>, <b>local</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>string</b>, <b>ignore</b>, and <b>context_handle</b>.</dd>
<dt>
<i>pointer-declarator</i></dt>
<dd>
Specifies zero or more pointer declarators. A pointer declarator is the same as the pointer declarator used in C and is is constructed from the <b>*</b> designator, modifiers such as <b>far</b> and the qualifier <b>const</b>.</dd>
<dt>
<i>function-name</i></dt>
<dd>
Specifies the name of the remote procedure.</dd>
<dt>
<i>parameter-attribute-list</i></dt>
<dd>
Specifies zero or more attributes appropriate for the specified parameter type. Parameter attributes can take the directional attributes <b>in</b> and <b>out</b>; the field attributes <b>first_is</b>, <b>last_is</b>, <b>length_is</b>, <b>max_is</b>, <b>size_is</b>, and <b>switch_type</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>context_handle</b> and <b>string</b>. The usage attribute <b>ignore</b> cannot be used as a parameter attribute. Separate multiple attributes with commas.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>[ uuid(12345678-1234-1234-1234-123456789ABC), 
  version(3.1), 
  pointer_default(unique) 
] interface IdlGrammarExample 
{ 
import "windows.idl", "other.idl"; 
const wchar_t * NAME = L"Example Program"; 
typedef char * PCHAR; 
 
HRESULT DictCheckSpelling( 
     [in, string] PCHAR   word,     // word to look up 
     [out]        short * isPresent // 0 if not present 
); 
} 
 </code></pre>
<h4>Remarks</h4>
<p>
The IDL file contains the specification for the interface. The interface includes the set of data types and the set of functions to be executed from a remote location. Interfaces specify the function prototypes for remote functions and for many aspects of their behavior from the point of view of interface users.</p>
<p>
Another file, the application configuration file (ACF), contains attributes that tailor the application for a specific operating environment. For more information, see <a href="mi-laref_1e5o.htm"><b>ACF</b></a>. </p>
<p>
An interface specification consists of an interface header followed by an interface body. The interface header includes an attribute list describing characteristics that apply to the interface as a whole. The interface body contains the remote data types and function prototypes. The interface body also contains zero or more import lists, constant declarations, general declarations, and function declarators.</p>
<p>
In Microsoft RPC, an IDL file can contain multiple interfaces and these interfaces can be forward declared (within the IDL file that defines them). For example:</p>
<pre><code>interface ITwo; //forward declaration
interface IOne {
...uses ITwo...
}
interface ITwo {
...uses IOne...
}
 </code></pre>
<p>
Type definitions, construct declarations, and imports can occur outside of the interface body. All definitions from the main IDL file will appear in the generated header file, and all the procedures from all the interfaces in the main IDL file will generate stub routines. This enables applications that support multiple interfaces to merge IDL files into a single, combined IDL file. </p>
<p>
As a result, it requires less time to compile the files and also allows MIDL to reduce redundancies in the generated stubs. This can significantly improve <b>object</b> interfaces through the ability to share common code for base interfaces and derived interfaces. For non-<b>object</b> interfaces, the procedure names must be unique across all the interfaces. For <b>object</b> interfaces, the procedure names only need to be unique within an interface. Note that multiple interfaces are not permitted when you use the /<b>osf</b> switch.</p>
<p>
The syntax for declarative constructs in the IDL file is similar to that for C. MIDL supports all Microsoft C/C++ declarative constructs except:
<ul>
<li>
Older style declarators that allow a declarator to be specified without a type specifier, such as:<pre><code>x (y) 
short x (y) 
 </code></pre>
</li>
<li>
Declarations with initializers (MIDL only accepts declarations that conform to the MIDL <b>const </b>syntax).</li>
</ul>
<p>
The <b>import</b> keyword specifies the names of one or more IDL files to import. The import directive is similar to the C <b>include</b> directive, except that only data types are assimilated into the importing IDL file.</p>
<p>
The constant declaration specifies <b>boolean</b>, integer, character, wide-character, string, and <b>void</b> <b>*</b> constants. For more information, see <a href="mi-laref_0jw4.htm"><b>const</b></a>. </p>
<p>
A general declaration is similar to the C <b>typedef</b> statement with the addition of IDL type attributes. Except in /<b>osf</b> mode, the MIDL compiler also allows an implicit declaration in the form of a variable definition. </p>
<p>
The function declarator is a special case of the general declaration. You can use IDL attributes to specify the behavior of the function return type and each of the parameters.</p>
<h4>See Also</h4>
<p>
<a href="mi-laref_0vzl.htm"><b>arrays</b></a>, <a href="mi-laref_0jw4.htm"><b>const</b></a>, <a href="mi-laref_1y5p.htm"><b>enum</b></a>, <a href="mi-laref_156c.htm"><b>import</b></a>, <a href="mi-laref_081a.htm"><b>in</b></a>, <a href="mi-laref_1hut.htm"><b>interface</b></a>, <a href="mi-laref_1r1h.htm"><b>MIDL Language Reference</b></a>, <a href="mi-laref_48vg.htm"><b>out</b></a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_pointers">
</object><a href=JavaScript:alink_2.Click()><b>pointers</b></a>, <a href="mi-laref_06k4.htm"><b>struct</b></a>, <a href="mi-laref_76i6.htm"><b>union</b></a></p>
<p>&nbsp;</p></body>
</HTML>

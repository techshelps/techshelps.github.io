<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>module</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_module"></a>module</h1>
<p>
<b>[</b><i>attributes</i><b>]&nbsp;module&nbsp;</b><i>modulename</i>&nbsp;<b>{</b><i>elementlist</i><b>};</b>
<dl>
<dt>
<i>attributes</i></dt>
<dd>
The <b>uuid</b>, <b>version</b>, <b>helpstring</b>, <b>helpcontext</b>, <b>hidden</b>, and <b>dllname</b> attributes are accepted before a <b>module</b> statement. See "<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_attribute_descriptions">
</object><a href=JavaScript:alink_1.Click()>Attribute Descriptions</a>," in the Ole Automation book, for more information on the attributes accepted before a module definition. The <b>dllname</b> attribute is required. If the <b>uuid</b> attribute is omitted, the module is not uniquely specified in the system.</dd>
<dt>
<i>modulename</i></dt>
<dd>
The name of the module.</dd>
<dt>
<i>elementlist</i></dt>
<dd>
List of constant definitions and function prototypes for each function in the DLL. Any number of function definitions can appear in the function list. A function in the function list has the following form:
<p>
<b>[</b><i>attributes</i><b>]</b> <i>returntype</i> <b>[</b><i>calling</i> <i>convention</i><b>]</b> <i>funcname</i><b>(</b><i>params</i><b>);</b><br>
<b>[</b><i>attributes</i><b>]</b> <b>const</b> <i>constname <b>=</b> constval</i><b>;</b>


<p>
Only the <b>helpstring</b> and <b>helpcontext</b> attributes are accepted for a <b>const</b>.

<p>
The following attributes are accepted on a function in a module: <b>helpstring</b>, <b>helpcontext</b>, <b>string</b>, <b>entry</b>, <b>propget</b>, <b>propput</b>, <b>propputref</b>, <b>vararg</b>. If <b>vararg</b> is specified, the last parameter must be a safe array of VARIANT type.

<p>
The optional <i>calling convention</i> can be one of <b>__pascal/_pascal</b>/<b>pascal</b>, <b>__cdecl/_cdecl</b>/<b>cdecl</b>, or <b>__stdcall/_stdcall</b>/<b>stdcall</b>. The <i>calling</i> <i>convention</i> can include up to two leading underscores.

<p>
The parameter list is a comma-delimited list of:

<p>
<b>[</b><i>attributes</i><b>]</b> <i>type</i> <i>paramname</i>


<p>
The <i>type </i>can be any previously declared type or built-in type, a pointer to any type, or a pointer to a built-in type. Attributes on parameters are:

<p>
<b>in</b>, <b>out</b>, <b>optional</b>

<p>
If <a href="mi-laref_7wh8.htm"><b>optional</b></a> is used, the types of those parameters must be VARIANT or VARIANT *.

</dd>
</dl>
<h4>Examples</h4>
<pre><code>[uuid(. . .), 
    helpstring("This is not GDI.EXE"), helpcontext(190), 
    dllname("MATH.DLL")] 
module somemodule{ 
    [helpstring("Color for the frame")] unsigned long const COLOR_FRAME 
        = 0xH80000006; 
    [helpstring("Not a rectangle but a square"), entry(1)] pascal double square([in] double x); 
}; 
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>module</b> statement defines a group of functions, typically a set of DLL entry points. The header file (.H) output for modules is a series of function prototypes. The <b>module</b> keyword and surrounding brackets are stripped from the header (.H) file output, but a comment (// <b>module</b> <i>modulename</i>) is inserted before the prototypes. The keyword <b>extern</b> is inserted before the declarations.</p>
<h4>See Also</h4>
<p>
<a href="mi-files_7jl8.htm">Generating a Type Library With MIDL</a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_contents_of_a_type_library">
</object><a href=JavaScript:alink_2.Click()>Contents of a Type Library</a>, <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_odl_file_syntax">
</object><a href=JavaScript:alink_3.Click()>ODL File Syntax</a>, <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_typeflags">
</object><a href=JavaScript:alink_4.Click()>TYPEFLAGS</a> </p>
<p>&nbsp;</p></body>
</HTML>

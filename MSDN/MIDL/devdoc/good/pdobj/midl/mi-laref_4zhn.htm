<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>callback</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_callback"></a>callback</h1>
<p>
<b>[callback </b>[ <b>,</b> <i>function-attr-list</i>] <b>] </b><i>type-specifier </i>[<i>ptr-declarator</i>] <i>function-name</i><b>(</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ <b>[</b><i>parameter-attribute-list</i><b>]</b> ] <i>type-specifier </i>[<i>declarator</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>,</b> <b>...</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>);</b>
<dl>
<dt>
<i>function-attr-list</i></dt>
<dd>
Specifies zero or more attributes that apply to the function. Valid function attributes are <b>local</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>string</b>, <b>ignore</b>, and <b>context_handle</b>. Separate multiple attributes with commas.</dd>
<dt>
<i>type-specifier</i></dt>
<dd>
Specifies a <b>base_type</b>, <b>struct</b>, <b>union</b>, <b>enum</b> type, or type identifier. An optional storage specification can precede <i>type-specifier</i>.</dd>
<dt>
<i>ptr-declarator</i></dt>
<dd>
Specifies zero or more pointer declarators. A pointer declarator is the same as the pointer declarator used in C; it is constructed from the <b>*</b> designator, modifiers such as <b>far</b>, and the qualifier <b>const</b>.</dd>
<dt>
<i>function-name</i></dt>
<dd>
Specifies the name of the remote procedure.</dd>
<dt>
<i>parameter-attribute-list</i></dt>
<dd>
Specifies zero or more directional attributes, field attributes, usage attributes, and pointer attributes appropriate for the specified parameter type. Separate multiple attributes with commas.</dd>
<dt>
<i>declarator</i></dt>
<dd>
Specifies a standard C declarator such as identifiers, pointer declarators, and array declarators. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_pointers">
</object><a href=JavaScript:alink_1.Click()><b>pointers</b></a> and <a href="mi-laref_0vzl.htm"><b>arrays</b></a>. The parameter-name identifier is optional.
</dd>
</dl>
<h4>Example</h4>
<pre><code>[callback] HRESULT DisplayString([in, string] char * p1); 
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>callback</b> attribute declares a static callback function that exists on the client side of the distributed application. Callback functions provide a way for the server to execute code on the client.</p>
<p>
The callback function is useful when the server must obtain information from the client. If server applications were supported on Windows 3.<i>x</i>, the server could make a call to a remote procedure on the Windows 3.<i>x</i> server to obtain the needed information. The callback function accomplishes the same purpose and lets the server query the client for information in the context of the original call.</p>
<p>
Callbacks are special cases of remote calls that execute as part of a single thread. A callback is issued in the context of a remote call. Any remote procedure defined as part of the same interface as the static callback function can call the callback function.</p>
<p>
Only the connection-oriented and local protocol sequences support the callback attribute. If an RPC interface uses a connectionless (datagram) protocol sequence, calls to procedures with the callback attribute will fail.</p>
<p>
Handles cannot be used as parameters in callback functions. Because callbacks always execute in the context of a call, the binding handle used by the client to make the call to the server is also used as the binding handle from the server to the client.</p>
<p>
Callbacks can nest to any depth.</p>
<h4>See Also</h4>
<p>
<a href="mi-laref_49v0.htm"><b>IDL</b></a>, <a href="mi-cmdln_4tk6.htm"><b>/osf</b></a></p>
<p>&nbsp;</p></body>
</HTML>

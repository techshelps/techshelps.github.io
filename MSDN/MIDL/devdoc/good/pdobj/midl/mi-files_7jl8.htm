<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Generating a Type Library With MIDL</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_generating_a_type_library_with_midl"></a>Generating a Type Library With MIDL</h1>
<p>
Microsoft's Interface Definition Language (IDL) now includes the complete Object Definition Language (ODL) syntax. This allows you to use the 32-bit MIDL compiler instead of MKTYPLIB.EXE to generate a type library and optional header files for a COM application.</p>
<p>
<b>Note</b>&nbsp;&nbsp;When the documentation refers to an ODL file, this means a file that MKTYPLIB can parse. When it refers to an IDL file, this means a file that MIDL parses. This is strictly a naming convention. The MIDL compiler will parse an input file regardless of its filename extension.</p>
<p>
The top-level element of the ODL syntax is the library statement (library block). Every other ODL statement, with the exception of the attributes that are applied to the library statement, must be defined within the library block.When the MIDL compiler sees a library block it generates a type library in much the same way as MKTYPLIB does. With a few exceptions, described in <a href="mi-files_6q3m.htm">Differences Between MIDL and MKTYPLIB</a>, the statements within the library block should follow the same syntax as in the ODL language and MKTYPLIB.</p>
<p>
You can apply ODL attributes to elements that are defined either inside or outside the library block. These attributes have no effect outside the library block unless the element they are applied to is referenced from within the library block. Statements inside the library block can reference an outside element either by using it as a base type, inheriting from it, or by referencing it on a line as shown:</p>
<pre><code>&lt;some IDL definitions including definitions for interface IFoo and struct bar&gt;
[&lt;some attributes&gt;]
library a
{
interface IFoo;
struct bar;
...
};
 </code></pre>
<p>
If an element defined outside the library block is referenced within the library block, then its definition will be put into the generated type library.</p>
<p>
The MIDL compiler treats the statements outside of a library block as a typical IDL file and parses those statements as it has always done. Normally, this means generating C-language stubs for an RPC application.</p>
<p>
For more information about the general syntax for an ODL file see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_odl_file_syntax">
</object><a href=JavaScript:alink_1.Click()>ODL File Syntax</a>.</p>
<p>&nbsp;</p></body>
</HTML>

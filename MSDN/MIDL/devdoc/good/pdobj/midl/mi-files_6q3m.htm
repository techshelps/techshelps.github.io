<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Differences Between MIDL and MKTYPLIB</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_differences_between_midl_and_mktyplib"></a>Differences Between MIDL and MKTYPLIB</h2>
<p>
There are a few key areas in which the MIDL compiler differs from MKTYPLIB. Most of these differences arise because MIDL is oriented more toward C-syntax than MKTYPLIB. </p>
<p>
In general, you will want to use the MIDL syntax in your IDL files. However, if you need to compile an existing ODL file, or otherwise maintain compatibility with MKTYPLIB, use the <a href="mi-cmdln_52gj.htm"><b>/mktyplib203</b></a> MIDL compiler option to force MIDL to behave like MKTYPLIB.EXE, version 2.03. (This is the last release of the MKTYPLIB tool.) Specifically, the /<b>mktyplib203</b> option resolves these differences:
<ul>
<li>
<b>typedef syntax for complex data types</b><p>
In MKTYPLIB, both of the following definitions generate a TKIND_RECORD for "bar" in the type library. The tag "foo" is optional and, if used, will not show up in the type library.
<pre><code>typedef struct foo { ... } bar;
typedef struct { ... } bar;
 </code></pre>
<p>
If an optional tag is missing, MIDL will generate it, effectively adding a tag to the definition supplied by the user. Since the first definition has a tag, MIDL will generate a TKIND_RECORD for "foo" and a TKIND_ALIAS for "bar" (defining "bar" as an alias for "foo"). Because the tag is missing in the second definition, MIDL will generate a TKIND_RECORD for a mangled name, internal to MIDL, that is not meaningful to the user and a TKIND_ALIAS for "bar". This has potential implications for type library browsers that simply show the name of a record in their user interface. If you expect a TKIND_RECORD to have a real name, unrecognizable names could appear in the user interface.This behavior also applies to <b>union</b> and <b>enum</b> definitions, with the MIDL compiler generating TKIND_UNIONs and TKIND_ENUMs, respectively.
<p>
MIDL also allows C-style <b>struct</b>, <b>union</b> and <b>enum</b> definitions. For example, the following definition is legal in MIDL:
<pre><code>struct foo { ... };
typedef struct foo bar;
 </code></pre>
</li>
<li>
<b>boolean data types</b><p>
In MKTYPLIB, the <b>boolean</b> base type and the MKTYPLIB data type BOOL equate to VT_BOOL, which maps to VARIANT_BOOL, and which is defined as a <b>short</b>. In MIDL, the <b>boolean</b> base type is equivalent to VT_UI1, which is defined as an <b>unsigned char</b>, and the BOOL data type is defined as a <b>long</b>. This leads to difficulties if you mix IDL syntax and ODL syntax in the same file while still trying to maintain compatibility with MKTYPLIB. Because the data types are different sizes, the marshaling code will not match what is described in the type information. If you want a VT_BOOL in your type library, you should use the VARIANT_BOOL data type. 
</li>
<li>
<b>GUID definitions in header files</b><p>
In MKTYPLIB, GUIDs are defined in the header file with a macro that can be conditionally compiled to generate either a GUID predefinition or an instantiated GUID. MIDL normally puts GUID predefinitions in its generated header files and GUID instantiations only in the file generated by the /<b>iid</b> switch. 
</li>
</ul>
<p>
The following differences in behavior can not be resolved by using the /mktyplib203 switch:
<ul>
<li>
<b>Scope of symbols in an enum declaration</b><p>
In MKTYPLIB the scope of symbols in an enum is local. In MIDL, the scope of symbols in an enum is global, as it is in C. For example, the following code will compile in MKTYPLIB, but will generate a duplicate name error in MIDL:
<pre><code>typedef struct { ... } a;
enum {a=1, b=2, c=3};
 </code></pre>
</li>
<li>
<b>Scope of public attribute</b><p>
If you apply the <b>public </b>attribute to an interface block, MKTYPLIB treats every typdef inside that interface block as public. MIDL requires that you explicitly apply the <b>public</b> attribute to those typedefs that you want public.
</li>
<li>
<b>Importlib search order</b><p>
If you import more than one type library, and if these libraries contain duplicate references, MKTYPLIB resolves this by using the first reference that it finds. MIDL will use the last reference that it finds. For example, given the following ODL syntax, library C will use the FOO typedef from library A if you compile with MKTYPLIB, and the FOO typedef from library B if you compile with MIDL:
<pre><code>[...]library A
{
    typedef struct tagFOO
    {...}FOO
}

[...]library B
{
    typedef struct tagFOO
    {...} FOO
}

[...]library C
{
    importlib (A.TLB)
    importlib (B.TLB)
    typedef struct tagBAR
    {FOO y;}BAR
}
 </code></pre>
<p>
The appropriate workaround for this is to qualify each such reference with the correct import library name, like this: 
<pre><code>typedef struct tagBAR
    {A.FOO y;}BAR
 </code></pre>
</li>
<li>
<b>VOID data type not recognized</b><p>
MIDL recognizes the C-language <b>void</b> data type and does not recognize the OLE Automation VOID data type. If you have an ODL file that uses VOID, place this definition at the top of the file:
<pre><code>#define VOID void
 </code></pre>
</li>
<li>
<b>Exponential notation</b><p>
MIDL requires that values expressed in exponential notation be contained within quotation marks. For example, "-2.5E+3".
</li>
<li>
<b>LCID values and constants</b><p>
Normally MIDL does not consider the LCID when parsing files. To force this behavior for a value, or if you need to use locale-specific notation when defining a constant, enclose the value or constant in quotation marks.
</li>
</ul>
<h4>See Also</h4>
<p>
<a href="mi-cmdln_52gj.htm">/mktyplib203</a>, <a href="mi-cmdln_4a3o.htm">/iid</a>, <a href="mi-files_5wz7.htm">Marshaling OLE Data Types</a></p>
<p>&nbsp;</p></body>
</HTML>

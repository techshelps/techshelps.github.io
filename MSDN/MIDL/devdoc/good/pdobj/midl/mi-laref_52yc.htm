<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>object</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_object"></a>object</h1>
<p>
<b>[&nbsp;object,&nbsp;uuid(</b><i>string-uuid</i><b>)</b>[&nbsp;<b>,&nbsp;</b><i>interface-attribute-list</i>]&nbsp;<b>]&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interface</b>&nbsp;<i>interface-name</i>&nbsp;<b>:</b>&nbsp;<i>base-interface</i>
<dl>
<dt>
<i>string-uuid</i></dt>
<dd>
Specifies a UUID string generated by the <b>uuidgen</b> utility. You can enclose the UUID string in quotes, except when you use the MIDL compiler switch <b>/osf</b>.</dd>
<dt>
<i>interface-attribute-list</i></dt>
<dd>
Specifies other attributes that apply to the interface as a whole.</dd>
<dt>
<i>interface-name</i></dt>
<dd>
Specifies the name of the interface.</dd>
<dt>
<i>base-interface</i></dt>
<dd>
Specifies the name of an OLE interface from which this derived interface inherits member functions, status codes, and interface attributes. All OLE interfaces are derived from the <b>IUnknown</b> interface or another OLE interface.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>object</b> interface attribute identifies a custom OLE interface. An interface attribute list that does not include the <b>object</b> attribute indicates a DCE RPC interface. An interface attribute list for an OLE interface must include the <b>uuid</b> attribute, but it cannot include the <b>version</b> attribute. </p>
<p>
By default, compiling an OLE interface with the MIDL compiler generates the files needed to build a proxy DLL. This DLL contains the code to support the use of the custom OLE interface by both client applications and object servers. However, if the interface attribute list for an OLE interface specifies the <b>local</b> attribute, the MIDL compiler generates only the interface header file.</p>
<p>
The MIDL compiler automatically generates an interface data type for an OLE interface. As an alternative, you can use <b>typedef</b> with the <b>interface</b> keyword to explicitly define an interface data type. The interface specification can then use the interface data type in function parameters and return values, <b>struct</b> and <b>union</b> members, and other type declarations. The following example illustrates the use of an automatically generated <b>IStream</b> data type:</p>
<pre><code>[object, uuid (ABCDEFOO-1234-1234-5678-ABCDEF123456)] 
    interface IStream : IUnknown{ 
        typedef IStream * LPSTREAM; 
} 
 </code></pre>
<p>
In an OLE interface, all the interface member functions are assumed to be virtual functions. A virtual function has an implicit <b>this</b> pointer as the first parameter. The virtual function table contains an entry for each interface member function.</p>
<p>
Non-[<b>local</b>] object interface member functions must have a return value of HRESULT or SCODE. (Note that earlier versions of MIDL allowed member functions to return <b>void</b>. However, beginning with MIDL version 3.0, returning <b>void</b> generates a compiler error.) Having a return value of HRESULT or SCODE means that if an exception is generated during a remote call, the generated proxies catch the exception and return the exception code in the return value. If your application can afford to ignore errors that occur during a remote procedure call, you can specify HRESULT as the return type without checking the return value after the call.</p>
<p>
If you are recompiling an old application, changing the return types can introduce backward compatibility problems when the server sends the newly introduced result to the client. As an alternative to changing the return type, you can label the function that returns <b>void</b> with the <b>[call_as]</b> attribute, thus making it a local function. Then define a related remote function with the same parameters but with the return type of HRESULT. The local function can raise an exception based on that HRESULT value, if necessary. </p>
<p>
The <b>object</b> attribute is not available when you compile using the MIDL compiler <b>/osf</b> switch.</p>
<h4>See Also</h4>
<p>
<a href="mi-laref_49v0.htm"><b>IDL</b></a>, <a href="mi-laref_3xdf.htm"><b>iid_is</b></a>, <a href="mi-laref_5woc.htm"><b>local</b></a>, <a href="mi-cmdln_4tk6.htm"><b>/osf</b></a>, <a href="mi-laref_2g10.htm"><b>uuid</b></a>, <a href="mi-laref_1df2.htm"><b>version</b></a></p>
<p>&nbsp;</p></body>
</HTML>

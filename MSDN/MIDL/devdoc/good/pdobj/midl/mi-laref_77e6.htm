<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>encapsulated_union</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_encapsulated_union"></a>encapsulated_union</h1>
<p>
<b>typedef </b>[ <b>[</b><i>type-attribute-list</i><b>]</b> ]<b><br>
&nbsp;&nbsp;&nbsp;&nbsp;union </b>[ <i>struct-name</i> ] <b>switch (</b><i>switch-type switch-name</i><b>) </b>[ <i>union-name </i>] <b>{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ case (</b><i>limited-expression-list</i> <b>) ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b>[ <b>[ </b><i>field-attribute-list </i><b>]</b> ]<b> </b><i>type-specifier declarator-list </i><b>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;&nbsp;&nbsp;}</b>
<dl>
<dt>
<i>type-attribute-list</i></dt>
<dd>
Specifies zero or more attributes that apply to the union type. Valid type attributes include <b>handle</b>, <b>transmit_as</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>context_handle</b> and <b>ignore</b>. Separate multiple attributes with commas.</dd>
<dt>
<i>struct-name</i></dt>
<dd>
Specifies an optional tag that names the structure generated by the MIDL compiler.</dd>
<dt>
<i>switch-type</i></dt>
<dd>
Specifies an <b>int</b>, <b>char</b>, <b>enum</b> type, or an identifier that resolves to one of these types.</dd>
<dt>
<i>switch-name</i></dt>
<dd>
Specifies the name of the variable of type <i>switch-type</i> that acts as the union discriminant.</dd>
<dt>
<i>union-name</i></dt>
<dd>
Specifies an optional identifier that names the union in the structure, generated by the MIDL compiler, that contains the union and the discriminant.</dd>
<dt>
<i>limited-expression-list</i></dt>
<dd>
Specifies one or more C-language expressions. The MIDL compiler supports conditional expressions, logical expressions, relational expressions, and arithmetic expressions. MIDL does not allow function invocations in expressions and does not allow increment and decrement operators.</dd>
<dt>
<i>field-attribute-list</i></dt>
<dd>
Specifies zero or more field attributes that apply to the union member. Valid field attributes include <b>first_is</b>, <b>last_is</b>, <b>length_is</b>, <b>max_is</b>, <b>size_is</b>; the usage attributes <b>string</b>, <b>ignore</b>, and <b>context_handle</b>; the pointer attribute <b>unique</b> or <b>ptr</b>; and, for members that are tnonencapsulated unions, the union attribute <b>switch_type</b>. Separate multiple field attributes with commas.</dd>
<dt>
<i>type-specifier</i></dt>
<dd>
Specifies a <b>base_type</b>, <b>struct</b>, <b>union</b>, <b>enum</b> type, or type identifier. An optional storage specification can precede <i>type-specifier</i>.</dd>
<dt>
<i>declarator-list</i></dt>
<dd>
One or more standard C declarators, such as identifiers, pointer declarators, and array declarators. (Function declarators and bit-field declarations are not allowed in unions that are transmitted in remote procedure calls. Except when you use the MIDL compiler switch <b>/osf</b>, these declarators are allowed in unions that are not transmitted.) Separate multiple declarators with commas.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>typedef union _S1_TYPE switch (long l1) U1_TYPE { 
    case 1024: 
        float f1; 
    case 2048: 
        double d2; 
} S1_TYPE; 
 
/* in generated header file */ 
typedef struct _S1_TYPE { 
    long l1; 
    union { 
        float f1; 
        double d2; 
    } U1_TYPE; 
} S1_TYPE; 
 </code></pre>
<h4>Remarks</h4>
<p>
The encapsulated union is indicated by the presence of the <b>switch</b> keyword. This type of union is so named because the MIDL compiler automatically encapsulates the union and its discriminant in a structure for transmission during a remote procedure call. </p>
<p>
If the union tag is missing (U1_TYPE in the example above), the compiler will generate the structure with the union field named <i>tagged_union</i>.</p>
<p>
The shape of unions must be the same across platforms to ensure interconnectivity.</p>
<h4>See Also</h4>
<p>
<a href="mi-laref_49v0.htm"><b>IDL</b></a>, <a href="mi-laref_5rfm.htm"><b>ms_union</b></a>, <a href="mi-laref_9jji.htm"><b>non-encapsulated_union</b></a>, <a href="mi-laref_4a43.htm"><b>switch_is</b></a>, <a href="mi-laref_765h.htm"><b>switch_type</b></a>, <a href="mi-laref_76i6.htm"><b>union</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>size_is</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_size_is"></a>size_is</h1>
<p>
<b>[&nbsp;size_is(</b><i>limited-expression-list</i><b>)</b>&nbsp;<b>]</b>
<dl>
<dt>
<i>limited-expression-list</i></dt>
<dd>
Specifies one or more C-language expressions. Each expression evaluates to a non-negative integer that represents the amount of memory allocated to a sized pointer or an array. In the case of an array, specifies a single expression that represents the maximum allocation size, in elements, of the first dimension of that array. The MIDL compiler supports conditional expressions, logical expressions, relational expressions, and arithmetic expressions. MIDL does not allow function invocations in expressions and does not allow increment and decrement operators. Use commas as placeholders for implicit parameters, or to separate multiple expressions.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>HRESULT Proc1(
    [in] short m;
    [in, size_is(m)] short a[]);  // if m = 10, a[10]
HRESULT Proc2(
    [in] short m;
    [in, size_is(m)] short b[][20]);  // if m = 10, b[10][20]
HRESULT Proc3(
    [in] short m;
    [size_is(m)] short * pshort); //specifies a pointer
                      // to an m-sized block of shorts
HRESULT Proc4(
    [in] short m;
    [size_is( , m)] short ** ppshort); /*specifies a pointer 
                               to a pointer to an m-sized 
                                       block of shorts */
HRESULT Proc5(
    [in] short m;
    [size_is(m ,)] short ** ppshort); /*specifies an
            m-sized block of pointers to shorts */
HRESULT Proc6(
    [in] short m;
    [in] short n;
    [size_is(m,n)] short ** ppshort); /* specifies a 
            pointer to an m-sized block of pointers, 
                 each of which points to an n-sized 
                                  block of shorts.*/
 HRESULT Proc7(
     [out] long  * pSize,
     [out, size_is( , *pSize)] BAR ** ppBar); /* specifies
            a pointer to a sized pointer, which points to a
            block of BARs, whose size is unknown when the 
            stub calls the server. */
 </code></pre>
<h4>Remarks</h4>
<p>
You can use the <b>size_is</b> attribute to specify the size of memory allocated for sized pointers, sized pointers to sized pointers, and single- or multi-dimensional arrays. However, if you are using array [ ] notation, only the first dimension of a multi-dimensional array can be determined at run time.</p>
<p>
For more information on using the <b>size_is</b> attribute with multiple levels of pointers to enable a server to return a dynamically-sized array of data to a client, as shown in the example Proc7, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_multiple_levels_of_pointers">
</object><a href=JavaScript:alink_1.Click()>Multiple Levels of Pointers</a>.</p>
<p>
You can use either <b>size_is</b> or <b>max_is</b> (but not both in the same attribute list) to specify the size of an array whose upper bounds are determined at run time. Note, however, that the <b>size_is</b> attribute cannot be used on array dimensions that are fixed. The <b>max_is</b> attribute specifies the maximum valid array index. As a result, specifying <b>size_is(</b><i>n</i><b>)</b> is equivalent to specifying <b>max_is</b>(<i>n</i>-1).</p>
<p>
An <b>in</b> or <b>in</b>, <b>out</b> conformant-array parameter with the <b>string</b> attribute need not have the <b>size_is</b> or <b>max_is</b> attribute. In this case, the size of the allocation is determined from the null terminator of the input string. All other conformant arrays with the <b>string</b> attribute must have a <b>size_is</b> or <b>max_is</b> attribute.</p>
<p>
While it is legal to use the <b>size_is</b> attribute with a constant, doing so is inefficient and unnecessary. For example, use a fixed size array:</p>
<pre><code>HRESULT Proc3([in] short Arr[MAX_SIZE]);
 </code></pre>
<p>
instead of:</p>
<pre><code>// legal but marshalling code is much slower
HRESULT Proc3([in size_is(MAX_SIZE)] short Arr[] );
 </code></pre>
<h4>See Also</h4>
<p>
<a href="mi-laref_0vzl.htm"><b>arrays</b></a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_field_attributes">
</object><a href=JavaScript:alink_2.Click()><b>field_attributes</b></a>, <a href="mi-laref_2rzn.htm"><b>first_is</b></a>, <a href="mi-laref_49v0.htm"><b>IDL</b></a>, <a href="mi-laref_0v5f.htm"><b>last_is</b></a>, <a href="mi-laref_2njn.htm"><b>length_is</b></a>, <a href="mi-laref_5lpv.htm"><b>max_is</b></a>, <a href="mi-laref_662b.htm"><b>min_is</b></a></p>
<p>&nbsp;</p></body>
</HTML>

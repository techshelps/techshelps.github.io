<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>transmit_as</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_transmit_as"></a>transmit_as</h1>
<p>
<b>typedef&nbsp;[transmit_as(</b><i>xmit-type</i><b>)</b><i>&nbsp;</i>[&nbsp;<b>,</b>&nbsp;<i>type-attribute-list&nbsp;</i>]&nbsp;<b>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b><i>type-specifier&nbsp;declarator-list</i><b>;</b>&nbsp;<br>
<br>
<b>void&nbsp;__RPC_USER&nbsp;</b><i>type-id</i><b>_to_xmit&nbsp;(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b><i>type-id&nbsp;</i><b>__RPC_FAR&nbsp;*,<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b><i>xmit-type&nbsp;</i><b>__RPC_FAR&nbsp;*&nbsp;__RPC_FAR&nbsp;*);<br>
<br>
void&nbsp;__RPC_USER&nbsp;</b><i>type-id</i><b>_from_xmit&nbsp;(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b><i>xmit-type&nbsp;</i><b>__RPC_FAR&nbsp;*,<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b><i>type-id&nbsp;</i><b>__RPC_FAR&nbsp;*);<br>
<br>
void&nbsp;__RPC_USER&nbsp;</b><i>type-id</i><b>_free_inst&nbsp;(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b><i>type-id&nbsp;</i><b>__RPC_FAR&nbsp;*);</b><br>
<br>
void&nbsp;__RPC_USER&nbsp;<i>type-id</i>_free_xmit&nbsp;(<br>
&nbsp;&nbsp;&nbsp;&nbsp;<i>xmit-type</i>__RPC_FAR&nbsp;*);
<dl>
<dt>
<i>xmit-type</i></dt>
<dd>
Specifies the data type that is transmitted between client and server.</dd>
<dt>
<i>type-attribute-list</i></dt>
<dd>
Specifies one or more attributes that apply to the type. Valid type attributes include <b>handle</b>, <b>switch_type</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>string</b> and <b>ignore</b>. Separate multiple attributes with commas.</dd>
<dt>
<i>type-specifier</i></dt>
<dd>
Specifies a <b>base_type</b>, <b>struct</b>, <b>union</b>, <b>enum</b> type, or type identifier. An optional storage specification can precede <i>type-specifier</i>.</dd>
<dt>
<i>declarator-list</i></dt>
<dd>
Specifies standard C declarators, such as identifiers, pointer declarators, and array declarators. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_pointers">
</object><a href=JavaScript:alink_1.Click()><b>pointers</b></a> and <a href="mi-laref_0vzl.htm"><b>arrays</b></a>. The <i>declarator-list</i> consists of one or more declarators separated by commas. The parameter declarator in the function declarator, such as the parameter name, is optional.</dd>
<dt>
<i>type-id</i></dt>
<dd>
Specifies the name of the data type that is presented to the client and server applications.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>typedef struct _TREE_NODE_TYPE { 
    unsigned short data; 
    struct _TREE_NODE_TYPE * left; 
    struct _TREE_NODE_TYPE * right; 
} TREE_NODE_TYPE; 
 
typedef [transmit_as(TREE_XMIT_TYPE)] TREE_NODE_TYPE * TREE_TYPE; 
 
void __RPC_USER TREE_TYPE_to_xmit( 
    TREE_TYPE __RPC_FAR * , 
    TREE_XMIT_TYPE __RPC_FAR * __RPC_FAR *); 
 
void __RPC_USER TREE_TYPE_from_xmit ( 
    TREE_XMIT_TYPE __RPC_FAR *, 
    TREE_TYPE __RPC_FAR *); 
 
void __RPC_USER TREE_TYPE_free_inst( 
    TREE_TYPE __RPC_FAR *); 
 
void __RPC_USER TREE_TYPE_free_xmit( 
    TREE_XMIT_TYPE __RPC_FAR *); 
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>transmit_as</b> attribute instructs the compiler to associate <i>type-id, </i>a presented type that client and server applications manipulate, with a transmitted type <i>xmit-type</i>. The user must supply routines that convert data between the presented and the transmitted types; these routines must also free memory used to hold the converted data. The <b>transmit_as</b> attribute instructs the stubs to call the user-supplied conversion routines.</p>
<p>
The transmitted type <i>xmit-type</i> must resolve to a MIDL base type, predefined type, or a type identifier. For more information, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_base_types">
</object><a href=JavaScript:alink_2.Click()><b>base_types</b></a>.</p>
<p>
The user must supply the following routines:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=29%>Routine name</th>
<th align=left width=71%>Description</th>
</tr>
<tr valign=top>
<td width=29%><i>type-id</i><b>_to_xmit</b></td>
<td width=71%>Converts data from the presented type to the transmitted type</td>
</tr>
<tr valign=top>
<td width=29%><i>type-id</i><b>_from_xmit</b></td>
<td width=71%>Converts data from the transmitted type to the presented type</td>
</tr>
<tr valign=top>
<td width=29%><i>type-id</i><b>_free_inst</b></td>
<td width=71%>Frees storage used by the callee for the presented type</td>
</tr>
<tr valign=top>
<td width=29%><i>type-id</i><b>_free_xmit</b></td>
<td width=71%>Frees storage used by the caller for the transmitted type</td>
</tr>
</table><br>
<p>
The client stub calls <i>type-id</i><b>_to_xmit</b> to allocate space for the transmitted type and to translate the data into objects of type <i>xmit-type.</i> The server stub allocates space for the original data type and calls <i>type-id</i><b>_from_xmit</b> to translate the data from its transmitted type to the presented type.</p>
<p>
Upon return from the application code, the server stub calls <i>type-id</i><b>_free_inst</b> to deallocate the storage for <i>type-id</i> on the server side. The client stub calls <i>type-id</i><b>_free_xmit</b> to deallocate the <i>xmit-type</i> storage on the client side.</p>
<p>
The following types cannot have a <b>transmit_as</b> attribute:
<ul>
<li>
Context handles (types with the <b>context_handle</b> type attribute and types that are used as parameters with the <b>context_handle</b> attribute)</li>
<li>
Parameters that are conformant, varying, or open arrays</li>
<li>
Structures that contain conformant arrays</li>
<li>
The predefined type <b>handle_t</b>,<b> void</b></li>
</ul>
<p>
When a pointer attribute appears as one of the type attributes with the <b>transmit_as</b> attribute, the pointer attribute is applied to the <i>xmit_type</i> parameter of the <i>type-id-</i><b>to_xmit</b> and <i>type-id-</i><b>from_xmit</b> routines.</p>
<h4>See Also</h4>
<p>
<a href="mi-laref_0vzl.htm"><b>arrays</b></a>, <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_base_types">
</object><a href=JavaScript:alink_3.Click()><b>base_types</b></a>, <a href="mi-laref_1w85.htm"><b>context_handle</b></a>, <a href="mi-laref_49v0.htm"><b>IDL</b></a>, <a href="mi-laref_9l7q.htm"><b>typedef</b></a></p>
<p>&nbsp;</p></body>
</HTML>

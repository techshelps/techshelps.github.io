<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Interface Proxy File</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_the_interface_proxy_file"></a>The Interface Proxy File</h2>
<p>
The interface proxy file (<i>name</i>_P.C) is a C file that contains routines equivalent to those in the client stub, server stub, and client and server files of an RPC interface. This file contains implementations of <b>CProxyInterface</b> and <b>CStubInterface</b> classes that are derived from the <b>CProxy</b> and <b>CStub</b> classes of the base interface. For example, an interface named ISomeInterface derived from the <b>IUnknown</b> interface is implemented in the CProxyISomeInterface<i> </i>and CStubISomeInterface classes derived from the <b>CProxyIUnknown</b> and <b>CStubIUnknown</b><i> </i>classes.</p>
<p>
The interface proxy file includes the following sections:
<ul>
<li>
The implementation of a <b>CProxyInterface</b> class.<p>
The virtual member functions of this class provide a client application's surrogate entry points for each of the interface functions. These member functions marshal the input arguments into a transmittable form, transmit the marshalled arguments along with information that identifies the interface and the operation, and then unmarshal the return value and any output arguments when the transmitted operation returns.
</li>
<li>
The implementation of a <b>CStubInterface</b> class.<p>
The virtual member functions of this class provide an object server's surrogate entry points for each of the interface functions. These member functions unmarshal the input arguments, invoke the server's implementation of the interface function, and then marshal and transmit the return value and any output arguments. A <b>CStubInterface</b> class also includes a member function that is invoked by the RPC run-time library when a client application calls one of the interface functions. This routine calls the surrogate routine specified by the RPC message. 
</li>
<li>
Marshalling and unmarshalling support routines for complex data types.</li>
</ul>
<p>
Use the <a href="mi-cmdln_283d.htm"><b>/proxy</b></a> MIDL compiler switch to override the default name of the interface proxy file. The <a href="mi-cmdln_3xpy.htm"><b>/env</b></a> and <a href="mi-cmdln_4to4.htm"><b>/out</b></a> switches affect this file.</p>
<p>&nbsp;</p></body>
</HTML>

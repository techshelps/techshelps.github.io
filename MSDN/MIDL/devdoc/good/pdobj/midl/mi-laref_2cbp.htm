<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ignore</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_ignore"></a>ignore</h1>
<p>
<b>[ignore]</b> <i>pointer-member-type pointer-name</i><b>;</b>
<dl>
<dt>
<i>pointer-member-type</i></dt>
<dd>
Specifies the type of the pointer member of the structure or union.</dd>
<dt>
<i>pointer-name</i></dt>
<dd>
Specifies the name of the pointer member that is to be ignored during marshalling.
</dd>
</dl>
<h4>Example</h4>
<pre><code>typedef struct _DBL_LINK_NODE_TYPE { 
    long value; 
    struct _DBL_LINK_NODE_TYPE * next; 
    [ignore] struct _DBL_LINK_NODE_TYPE * previous; 
} DBL_LINK_NODE_TYPE; 
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>ignore</b> attribute designates that a pointer contained in a structure or union and the object indicated by the pointer is not transmitted. The <b>ignore</b> attribute is restricted to pointer members of structures or unions.</p>
<p>
The value of a structure member with the <b>ignore</b> attribute is undefined at the destination. An <b>in</b> parameter is not defined at the remote computer. An <b>out</b> parameter is not defined at the local computer.</p>
<p>
The <b>ignore</b> attribute allows you to prevent transmisison of data. This is useful in situations such as a double-linked list. The following example includes a double-linked list that introduces data aliasing:</p>
<pre><code>/* IDL file */ 
typedef struct _DBL_LINK_NODE_TYPE { 
    long value; 
    struct _DBL_LINK_NODE_TYPE * next; 
    struct _DBL_LINK_NODE_TYPE * previous; 
} DBL_LINK_NODE_TYPE; 
 
HRESULT remote_op([in] DBL_LINK_NODE_TYPE * list_head); 
 
/* application */ 
DBL_LINK_NODE_TYPE * p, * q 
 
p = (DBL_LINK_NODE_TYPE *) 
    midl_user_allocate(sizeof(DBL_LINK_NODE_TYPE)); 
q = (DBL_LINK_NODE_TYPE *) 
    midl_user_allocate(sizeof(DBL_LINK_NODE_TYPE)); 
 
p-&gt;next = q;  
q-&gt;previous = p; 
p-&gt;previous = q-&gt;next = NULL; 
.. 
remote_op(p); 
 </code></pre>
<p>
Aliasing occurs in the preceding example because the same memory area is available from two different pointers in the function <b>p</b> and <b>p-&gt;next-&gt;previous</b>. </p>
<p>
Note that <b>ignore</b> cannot be used as a type attribute. </p>
<h4>See Also</h4>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_pointers">
</object><a href=JavaScript:alink_1.Click()><b>pointers</b></a>, <a href="mi-laref_4ws2.htm"><b>ptr</b></a>, <a href="mi-laref_52cm.htm"><b>ref</b></a>, <a href="mi-laref_9r1h.htm"><b>unique</b></a></p>
<p>&nbsp;</p></body>
</HTML>

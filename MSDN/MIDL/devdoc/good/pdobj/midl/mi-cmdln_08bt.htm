<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>/Oi</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_oi"></a>/Oi</h1>
<p>
<b>midl /{Oi | Oic | Oif | Oicf}</b>
<dl>
<dt>
<b>/Oi</b> </dt>
<dd>
Specifies the fully-interpreted method for marshalling stub code passed between client and server.</dd>
<dt>
<b>/Oic </b></dt>
<dd>
Specifies the codeless proxy method of marshaling that provides all the features of <b>/Oi </b>and also further reduces the size of the client stub code for object interfaces.</dd>
<dt>
<b>/Oif </b>or<b> /Oicf </b></dt>
<dd>
Specifies the codeless proxy method of marshaling that includes all the features provided by <b>/Oi</b> and <b>/Oic</b> but uses a new interpreter ("fast format strings") that provides better performance than <b>/Oi </b>or <b>/Oic</b>. 
</dd>
</dl>
<p>
Please note the restrictions related to supporting platforms, below. </p>
<h4>Examples</h4>
<pre><code>midl /Oi filename.idl 
midl /Oic filename.idl
midl /Oif filename.idl
 </code></pre>
<h4>Remarks</h4>
<p>
The MIDL 3.0 compiler provides two methods for marshalling code: fully-interpreted (<b>/Oi</b>, <b>/Oic</b> and <b>/Oif</b>) and mixed-mode (<b>/Os</b>). Mixed-mode is the default. Some language features are not supported in some modes. In this case, the compiler automatically switches to the appropriate mode and issues a warning. </p>
<p>
If performance is a concern, the mixed-mode (<b>/Os</b>) method can be the best approach. In this mode, the compiler chooses to marshall some parameters inline in the generated stubs. While this results in larger stub size, it offers increased performance.</p>
<p>
The fully-interpreted method marshals data completely offline. This considerably reduces the size of the stub code, but results in decreased performance. Also, with the fully-interpreted method, there is a limit of 16 parameters for each procedure. Any procedure containing more than 16 parameters will automatically be processed in <b>/Os</b> mode. Among the interpreted modes, <b>/Oif</b> offers the best performance and <b>/Oi</b> offers the best backward compatibility. </p>
<p>
If your application uses OLE object interfaces and if it will never run on a version of Microsoft Windows NT earlier than 3.51, you can reduce the size of your client stub code for object interfaces by using the <b>/Oic</b> option. With this option the MIDL compiler does not generate any client-side stub code. Since object interface calls are through vtable pointers, the compiler generates the proper vtable structures and the application calls the stubs through them.</p>
<p>
If your application will be run <i>only</i> on Microsoft Windows NT 4.0 or later, you can use the faster <b>/Oif</b> option. Specifically, you may want to use the <b>/Oif</b> option if your application uses MIDL features that were introduced with MIDL 3.0, such as the <a href="mi-laref_1p2k.htm"><b>wire_marshal</b></a> and <a href="mi-laref_96ss.htm"><b>user_marshal</b></a> attributes. If your application uses <a href="ov-pipes_1pv7.htm">pipes</a> you <i>must</i> use the /<b>Oif </b>option; if you specify another mode, the MIDL compiler will switch to /<b>Oif</b>.</p>
<p>
To fine-tune the way your stub code is marshalled, Microsoft RPC provides an ACF <a href="mi-laref_69d1.htm"><b>optimize</b></a> attribute. This attribute is used as an interface attribute or operation attribute to select the marshalling mode for individual interfaces or for individual operations.</p>
<h4>Calling Conventions</h4>
<p>
Stubs generated by the MIDL compiler in the interpreted method using the <b>/Oi</b>, /<b>Oic</b>, or <b>/Oif</b> switches must be compiled as either a stdcall or a cdecl procedure during the C compilation. A PASCAL or Fastcall calling convention will not work. Additionally, the server stub must be compiled as stdcall.</p>
<h4>Supporting Platforms</h4>
<p>
<b>/Oi</b> is supported on Windows NT 3.5 or later and Windows 95<br>
<b>/Oic</b> is supported on Windows NT 3.51 or later and Windows 95<br>
<b>/Oif</b> is supported on Windows NT 4.0.</p>
<h4>See Also</h4>
<p>
<a href="mi-cmdln_2xbs.htm">General MIDL Command-line Syntax</a>, <a href="mi-cmdln_08c3.htm"><b>/Os</b></a>, <a href="mi-laref_69d1.htm"><b>optimize</b></a>, <a href="mi-cmdln_527o.htm"><b>/no_format_opt</b></a></p>
<p>&nbsp;</p></body>
</HTML>

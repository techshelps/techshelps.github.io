<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C-Compiler Requirements for Callbacks in Microsoft Windows 3.x</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_c_compiler_requirements_for_callbacks_in_microsoft_windows_3.x"></a>C-Compiler Requirements for Callbacks in Microsoft Windows 3.<i>x</i></h2>
<p>
When you use Microsoft 16-bit Visual C/C++ to develop your RPC application for Microsoft Windows 3.x platforms, compile with the <b>/GA</b> switch. The <b>/GA</b> switch directs the compiler to generate code that loads the DS register from the SS register on entry to a far exported function in a protected-mode application based on Windows 3.x.</p>
<p>
For protected-mode, 16-bit Windows applications, the <b>/GA</b> switch allows the C compiler to generate the code for performing the housekeeping chores required when switching between tasks. This code is needed when your RPC interface contains one or more callback functions. Without this code, these callback functions can fail at run time due to an incorrect DS value. </p>
<p>
When you use compilers other than Microsoft 16-bit Visual C/C++, use the compiler switch that is equivalent to <b>/GA</b>.</p>
<p>
Previous versions of the Microsoft C compiler and 16-bit Windows used calls to the Windows 3.<i>x</i> function <b>MakeProcInstance</b>, and the <b>/Gw</b> switch to generate this code. The <b>/GA</b> switch is a more efficient way to accomplish the same tasks.</p>
<p>
When you do not compile using the <b>/GA</b> switch (for example, when you are using a compiler that does not support the <b>/GA</b> switch), your application must:
<ol>
<li>
Compile using the <b>/Gw</b> switch (or its equivalent).</li>
<li>
Add the client stub functions to the EXPORTS section of the application's DEF file.</li>
<li>
Replace function pointers in the the client stub function dispatch table with function pointers returned by <b>MakeProcInstance</b>.</li>
</ol>
<p>
The function dispatch table is part of the <b>RPC_CLIENT_INTERFACE</b> structure defined in the RPC header file RPCDCEP.H. For example, step 3 can be implemented using the following C code:</p>
<pre><code>#include "hello.h"   // generated stub file
RPC_DISPATCH_FUNCTION Old, New;
HINSTANCE hInst;
RPC_CLIENT_INTERFACE * If = Hello_ClientIfHandle;
...
    for (i = 0; i &lt; If-&gt;DispatchTable-&gt;DispatchTableCount; i++)
    {
       Old = If-&gt;DispatchTable-&gt;DispatchTable[i];
       New = (RPC_DISPATCH_FUNCTION) MakeProcInstance(Old, hInst);
       If-&gt;DispatchTable-&gt;DispatchTable[i] = New; // overwrite
    }
...
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>wire_marshal</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_wire_marshal"></a>wire_marshal</h1>
<p>
<b>typedef&nbsp;[wire_marshal(</b><i>wire_type</i><b>)]&nbsp;</b><i>type-specifier&nbsp;userm-type</i><b>;</b>&nbsp;</p>
<p>
<b>unsigned&nbsp;long&nbsp;__RPC_USER&nbsp;</b>&nbsp;&lt;<i>&nbsp;userm_type</i>&nbsp;&gt;<b>_UserSize</b>(<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>unsigned&nbsp;long</b>&nbsp;<b>__RPC_FAR</b>&nbsp;*<i>pFlags</i>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>unsigned&nbsp;long</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>StartingSize</i>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;<i>&nbsp;userm_type</i>&nbsp;&gt;&nbsp;<b>&nbsp;__RPC_FAR</b>&nbsp;*<i>&nbsp;pUser_typeObject&nbsp;</i>);</p>
<p>
<b>unsigned&nbsp;char</b>&nbsp;_<b>_RPC_FAR&nbsp;*&nbsp;__RPC_USER&nbsp;&nbsp;&lt;</b><i>&nbsp;userm_type</i><b>&nbsp;&gt;_UserMarshal</b>(<b><br>
</b>&nbsp;&nbsp;&nbsp;&nbsp;<b>unsigned&nbsp;long&nbsp;&nbsp;__RPC_FAR&nbsp;*</b>&nbsp;<i>pFlags</i>,<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;unsigned</b>&nbsp;<b>char&nbsp;__RPC_FAR&nbsp;</b>*&nbsp;<i>Buffer</i>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;<i>&nbsp;userm_type</i>&nbsp;&gt;&nbsp;&nbsp;<b>__RPC_FAR</b>&nbsp;*&nbsp;<i>pUser_typeObject</i>);</p>
<p>
<b>unsigned&nbsp;char&nbsp;__RPC_FAR</b>&nbsp;<b>*&nbsp;__RPC_USER</b>&nbsp;&nbsp;&lt;<i>&nbsp;userm_type</i>&nbsp;&gt;<b>_UserUnmarshal</b>(<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>unsigned&nbsp;long&nbsp;&nbsp;__RPC_FAR&nbsp;*</b>&nbsp;&nbsp;<i>pFlags</i>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>unsigned&nbsp;char&nbsp;__RPC_FAR&nbsp;*</b>&nbsp;&nbsp;<i>Buffer</i>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;<i>&nbsp;userm_type</i>&nbsp;&gt;&nbsp;<b>&nbsp;__RPC_FAR&nbsp;</b>*&nbsp;<i>pUser_typeObject</i>);</p>
<p>
<b>void&nbsp;__RPC_USER</b>&nbsp;&nbsp;&lt;<i>&nbsp;userm_type</i>&nbsp;&gt;<b>_UserFree</b>(<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>unsigned&nbsp;long</b>&nbsp;&nbsp;<b>__RPC_FAR</b>&nbsp;*&nbsp;<i>pFlags</i>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;<i>&nbsp;userm_type</i>&nbsp;&gt;&nbsp;&nbsp;<b>__RPC_FAR</b>&nbsp;*&nbsp;<i>pUser_typeObject</i>);
<dl>
<dt>
<i>userm-type</i></dt>
<dd>
Specifies the id of the user data type to be marshaled. It can be any type, as given by the <i>type-specifier</i>,.as long as it has a well-defined size. The <i>userm-type</i> need not be remotable but must be a type known to the MIDL compiler.</dd>
<dt>
<i>wire-type</i></dt>
<dd>
Specifies the named transfer data type that is actually transferred between client and server. The <i>wire-type</i> must be a MIDL base type, predefined type, or a type identifier of a remotable type. </dd>
<dt>
<i>pFlags</i></dt>
<dd>
Specifies a pointer to a flag field (unsigned long). The high-order word specifies NDR data representation flags as defined by DCE for floating point, big- or little-endian, and character representation. The low-order word specifies a marshaling context flag. The exact layout of the flags is described in <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_the_type_usersize_function">
</object><a href=JavaScript:alink_1.Click()>The type_UserSize Function</a>.</dd>
<dt>
<i>StartingSize</i></dt>
<dd>
Specifies the current buffer size (offset) before sizing the object.</dd>
<dt>
<i>Buffer</i></dt>
<dd>
Specifies the current buffer pointer.</dd>
<dt>
<i>pUser_typeObject</i></dt>
<dd>
Specifies a pointer to an object of <i>userm_type.</i>
</dd>
</dl>
<h4>Examples</h4>
<pre><code>typedef unsigned long _FOUR_BYTE_DATA;

    typedef struct _TWO_X_TWO_BYTE_DATA {
        unsigned short low;
        unsigned short high;
        } TWO_X_TWO_BYTE_DATA;

    typedef [wire_marshal(TWO_X_TWO_BYTE_DATA)] _FOUR_BYTE_DATA FOUR_BYTE_DATA; 
//Marshaling functions:
unsigned long __RPC_USER FOUR_BYTE_DATA_UserSize( 
    ULONG __RPC_FAR * pulFlags, 
    char __RPC_FAR * pBufferStart, 
    FOUR_BYTE_DATA __RPC_FAR * pul 
    );//calculate size that converted data will 
      // require in the buffer
unsigned long __RPC_USER FOUR_BYTE_DATA_UserMarshal( 
    ULONG __RPC_FAR *pulFlags, 
    char __RPC_FAR * pBufferStart, 
    FOUR_BYTE_DATA __RPC_FAR * pul 
    );//copy FOUR_BYTE_DATA into buffer as 
      //TWO_X_TWO_BYTE_DATA
unsigned long __RPC_USER FOUR_BYTE_DATA_UserUnmarshal( 
    ULONG __RPC_FAR * pulFlags, 
    char __RPC_FAR * pBufferStart, 
    FOUR_BYTE_DATA __RPC_FAR * pul 
    );//recreate FOUR_BYTE_DATA from TWO_X_TWO_BYTE_DATA 
      //in buffer
void __RPC_USER FOUR_BYTE_DATA_UserFree( 
    ULONG __RPC_FAR * pulFlags, 
    FOUR_BYTE_DATA __RPC_FAR * pul 
    );//nothing to do here as the engine frees the top 
      //node and FOUR_BYTE_DATA is a flat data type.
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>wire_marshal</b> attribute specifies a data type that will be used for transmission (the <i>wire-type</i>) instead of an application-specific data type (the <i>userm-type</i>). Each <i>userm-type</i> has a one-to-one correspondence with a <i>wire-type</i> that defines the wire representation of the type. You must supply routines to size the data for marshaling, to marshal and unmarshal the data, and to free memory. Note that if there are embedded types in your data that are also defined with <b>wire_marshal</b> or <b>user_marshal</b>, you need to manage the servicing of those embedded types also. For more information on these routines, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_the_wire_marshal_attribute">
</object><a href=JavaScript:alink_2.Click()>The wire_marshal Attribute</a>.</p>
<p>
The <i>wire-type</i> cannot be an interface pointer or a full pointer. The <i>wire-type</i> must have a well-defined memory size. See <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_marshaling_rules_for_user_marshal_and_wire_marshal">
</object><a href=JavaScript:alink_3.Click()>Marshaling Rules for user_marshal and wire_marshal</a> for details on how to marshal a given <i>wire-type</i>.</p>
<p>
The <i>userm-type</i> should not be an interface pointer because these can be marshaled directly. If the user type is a full pointer, you must manage the aliasing yourself.</p>
<p>
You cannot use the <b>wire_marshal</b> attribute with the <b>allocate</b> attribute, either directly or indirectly, because the NDR engine does not control memory allocation for the transmitted type.</p>
<h4>See Also</h4>
<p>
<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_the_wire_marshal_attribute">
</object><a href=JavaScript:alink_4.Click()><b>The wire_marshal Attribute</b></a>, <a href="mi-laref_96ss.htm"><b>user_marshal</b></a>, <a href="mi-laref_8do3.htm"><b>transmit_as</b></a>, <a href="mi-laref_20du.htm"><b>base_types</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACF</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_acf_idl"></a>ACF</h1>
<p>
<b>[ </b><i>interface-attribute-list</i><b> ] interface</b> <i>interface-name</i><br>
<b>{<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b>[ <b>include</b> <i>filename-list </i><b>; ...</b> ] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[ <b>typedef [</b><i>type-attribute-list</i><b>]</b> <i>typename</i><b>;</b> <b>...</b> ] <br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;&nbsp;&nbsp;&nbsp;[ <b>[</b><i>function-attribute-list</i><b>] </b>] <i>function-name</i><b>(</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ [ <b>[</b><i>parameter-attribute-list</i><b>]</b> ] <i>parameter-name </i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>...</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;</b>]<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;...<br>
}</b>
<dl>
<dt>
<i>interface-attribute-list</i></dt>
<dd>
Specifies a list of one or more attributes that apply to the interface as a whole. Valid attributes include <b>auto_handle</b>, <b>implicit_handle</b>, <b>explicit_handle</b>, and <b>optimize</b>, <b>code</b>, or <b>nocode</b>. When two or more interface attributes are present, they must be separated by commas. </dd>
<dt>
<i>interface-name</i></dt>
<dd>
Specifies the name of the interface. In DCE-compatibility mode, the interface name must match the name of the interface specified in the IDL file. When you use the MIDL compiler switch <b>/acf</b>, the interface name in the ACF and the interface name in the IDL file can be different.</dd>
<dt>
<i>filename-list</i></dt>
<dd>
Specifies a list of one or more C-language header filenames, separated by commas. The full filename, including the extension, must be supplied.</dd>
<dt>
<i>type-attribute-list</i></dt>
<dd>
Specifies a list of one or more attributes, separated by commas, that apply to the specified type. Valid type attributes include <b>allocate</b> or <b>represent_as</b>.</dd>
<dt>
<i>typename</i></dt>
<dd>
Specifies a type defined in the IDL file. Type attributes in the ACF can only be applied to types previously defined in the IDL file.</dd>
<dt>
<i>function-attribute-list</i></dt>
<dd>
Specifies a list of one or more attributes, separated by commas, that apply to the function-return type. Valid function attributes include <b>allocate</b>, <b>optimize</b>, call_as, <b>code</b> or <b>nocode</b>.</dd>
<dt>
<i>function-name</i></dt>
<dd>
Specifies the name of the function in the IDL file.</dd>
<dt>
<i>parameter-attribute-list</i></dt>
<dd>
Specifies a list of zero or more attributes, separated by commas, that apply to the specified parameter. Valid parameter attributes include <b>byte_count</b>.</dd>
<dt>
<i>parameter-name</i></dt>
<dd>
Specifies the name of the parameter in the IDL file. Only the name of the parameter must match the IDL file specification. The sequence of parameters is not significant.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>/* example 1 */ 
[auto_handle] interface foo1 { }  
 
/* example 2 */ 
[implicit_handle(handle_t h), code] interface foo2 {} 
 
/* example 3 */ 
[code]  
interface foo3; 
{ 
    include "foo3a.h", "foo3b.h"; 
    typedef [allocate(all_nodes)] TREETYPE1; 
    typedef [allocate(all_nodes, dont_free)] TREETYPE2; 
    f1([byte_count(length)] pBuffer); 
} 
 </code></pre>
<h4>Remarks</h4>
<p>
The application configuration file, or ACF, is one of two files that define the interface for your distributed application. The second interface-defining file is the IDL file. The IDL file contains type definitions and function prototypes that describe how data is transmitted on the network. The ACF configures your application for a particular operating environment without affecting its network characteristics.</p>
<p>
By using the IDL and ACF files, you separate the interface specification from environment-specific settings. The IDL file is meant to be portable to any other computer. When you move your distributed application to another computer, you should be able to reuse the IDL file. Environment-specific changes are made in the ACF.</p>
<p>
Many distributed applications require no special configuration. For such applications, use the MIDL compiler switch <a href="mi-cmdln_3yqv.htm"><b>/app_config</b></a> to supply the ACF keywords <b>auto_handle</b> and <b>implicit_handle</b> in the IDL file and omit the ACF. </p>
<p>
The ACF corresponds to the IDL file in the following ways:
<ul>
<li>
The interface name in the ACF must be the same as the interface name in the IDL file, unless you compile with the MIDL compiler switch <b>/acf</b>.</li>
<li>
All type names and function names in the ACF must refer to types and functions defined in the IDL file.</li>
<li>
Function parameters do not need to appear in the same sequence in the ACF as in the IDL file, but parameter names in the ACF must match names in the IDL file.</li>
</ul>
<p>
As with the IDL file, the ACF consists of a header portion and a body portion and, except in /<b>osf</b> mode, can contain multiple interfaces.</p>
<h4>See Also</h4>
<p>
<a href="mi-cmdln_3yqv.htm"><b>/app_config</b></a>, <a href="mi-laref_9e1x.htm"><b>auto_handle</b></a>, <a href="mi-laref_0rxh.htm"><b>code</b></a>, <a href="mi-laref_2vhh.htm"><b>explicit_handle</b></a>, <a href="mi-laref_49v0.htm"><b>IDL</b></a>, <a href="mi-laref_8y91.htm"><b>implicit_handle</b></a>, <a href="mi-laref_5vqd.htm"><b>include</b></a>, <a href="mi-laref_1r1h.htm"><b>midl</b></a>, <a href="mi-laref_7c6d.htm"><b>nocode</b></a>, <a href="mi-laref_69d1.htm"><b>optimize</b></a>, <a href="mi-laref_535f.htm"><b>represent_as</b></a>, <a href="mi-laref_9l7q.htm"><b>typedef</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

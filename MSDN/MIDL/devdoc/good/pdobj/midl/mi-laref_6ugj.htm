<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>call_as</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_call_as"></a>call_as</h1>
<p>
<b>[call_as (</b><i>local-proc</i><b>),</b> [ <b>,</b> <i>operation-attribute-list</i> ] ] <i>operation-name</i><b> ;</b> 
<dl>
<dt>
<i>local-proc</i></dt>
<dd>
Specifies an operation-defined routine.</dd>
<dt>
<i>operation-attribute-list</i></dt>
<dd>
Specifies one or more attributes that apply to the operation. Separate multiple attributes with commas.</dd>
<dt>
<i>operation-name</i></dt>
<dd>
Specifies the named operation presented to the application.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>call_as</b> attribute enables a nonremotable function to be mapped to a remote function. This is particularly helpful in interfaces that have numerous nonremotable types as parameters. Rather than using many <b>represent_as</b> and <b>transmit_as</b> types, you can combine all the conversions using <b>call_as</b> routines. You supply the two <b>call_as</b> routines (client side and server side) to bind the routine between the application calls and the remote calls. The <b>call_as</b> attribute can be used for object interfaces, where the interface definition can be used for local calls as well as remote calls because it allows a nonremotable interface to be remoted transparently. The <b>call_as</b> attribute cannot be used with /<b>osf</b> mode.</p>
<p>
For example, assume that the routine <b>f1</b> in object interface <b>IFace</b> requires numerous conversions between the user calls and what is actually transmitted. The following examples describe the IDL and ACF files for interface <b>IFace</b>:</p>
<p>
In the IDL file for interface <b>IFace</b>:</p>
<pre><code>[local] HRESULT f1 ( &lt;<i>users parameter list</i>&gt; ) 
[call_as( f1 )] long Remf1 ( &lt;<i>remotable parameter list</i>&gt; ); 
 </code></pre>
<p>
In the ACF for interface <b>IFace</b>:</p>
<pre><code>[call_as( f1 )] Remf1(); 
 </code></pre>
<p>
This would cause the generated header file to define the interface using the definition of f1, yet it would also provide stubs for Remf1:</p>
<p>
Generated Vtable in the header file for interface <b>IFace</b>:</p>
<pre><code>struct IFace_vtable
        { 
        .. 
        HRESULT ( * f1) ( &lt;users parameter list&gt;); 
        .. 
        }; 
 </code></pre>
<p>
The client-side proxy would then have a typical MIDL-generated proxy for Remf1, while the server side stub for Remf1 would be the same as the typical MIDL-generated stub:</p>
<pre><code>HRESULT IFace_Remf1_Stub ( . . .) 
    { 
    .. 
    invoke IFace_f1_Stub ( &lt;remotable parameter list&gt; )    /* instead 
            of IFace_f1 */ 
    .. 
    } 
 </code></pre>
<p>
Then, the two <b>call_as</b> bond routines (client side and server side) must be manually coded:</p>
<pre><code>HRESULT f1_Proxy ( &lt;users parameter list&gt; ) 
    { 
    .. 
    Remf1_Proxy ( &lt;remotable parameter list&gt; ); 
    .. 
    } 
 
long IFace_f1_Stub ( &lt;remotable parameter list&gt; ) 
    { 
    .. 
    IFace_f1 ( &lt;users parameter list&gt; ); 
    .. 
    } 
 </code></pre>
<p>
For object interfaces, these are the prototypes for the bond routines.</p>
<p>
For client side:</p>
<pre><code>&lt;local_return_type&gt;  &lt;interface&gt;_&lt;local_routine&gt;_proxy 
( &lt;local_parameter_list&gt; ); 
 </code></pre>
<p>
For server side:</p>
<pre><code>&lt;remote_return_type&gt;  &lt;interface&gt;_&lt;local_routine&gt;_stub 
( &lt;remote_parameter_list&gt; ); 
 </code></pre>
<p>
For nonobject interfaces, these are the prototypes for the bond routines.</p>
<p>
For client side:</p>
<pre><code>&lt;local_return_type&gt;  &lt;local_routine&gt; ( &lt;local_parameter_list&gt; ); 
 </code></pre>
<p>
For server side:</p>
<pre><code>&lt;local_return_type&gt;  &lt;interface&gt;_v&lt;maj&gt;_&lt;min&gt;_&lt;local_routine&gt; 
( &lt;remote_parameter_list&gt; ); 
 </code></pre>
<h4>See Also</h4>
<p>
<a href="mi-laref_535f.htm"><b>represent_as</b></a>, <a href="mi-laref_8do3.htm"><b>transmit_as</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>int</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_int"></a>int</h1>
<p>
[<i>type-specifier</i>] [ <b>signed | unsigned </b>]<b> </b><i>integer-modifier </i>[ <b>int </b>]<b> </b><i>declarator-list</i><b>;</b>
<dl>
<dt>
<i>type-specifier</i></dt>
<dd>
Specifies a <b>base_type</b>, <b>struct</b>, <b>union</b>, <b>enum</b> type, or type identifier. An optional storage specification can precede <i>type-specifier</i>.</dd>
<dt>
<i>integer-modifier</i></dt>
<dd>
Specifies the keyword <b>small</b>, <b>short</b>, <b>long</b>, or <b>hyper</b>, which selects the size of the integer data. On 16-bit platforms, the size qualifier must be present.</dd>
<dt>
<i>declarator-list</i></dt>
<dd>
Specifies one or more standard C declarators, such as identifiers, pointer declarators, and array declarators. (Function declarators and bit-field declarations are not allowed in structures that are transmitted in remote procedure calls. These declarators are allowed in structures that are not transmitted.) Separate multiple declarators with commas.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>signed short int i = 0; 
int j = i; 
typedef struct { 
    small int         i1; 
    short             i2; 
    unsigned long int i3; 
} INTSIZETYPE; 
 
HRESULT MyFunc([in] long int lCount); 
 </code></pre>
<h4>Remarks</h4>
<p>
On 32-bit platforms, the keyword <b>int</b> specifies a 32-bit signed integer. On 16-bit platforms, the keyword <b>int</b> is an optional keyword that can accompany the keywords <b>small</b>, <b>short</b>, and <b>long</b>.</p>
<p>
Integer types are among the base types of the interface definition language (IDL). They can appear as type specifiers in <b>typedef</b> declarations, general declarations, and function declarators (as a function-return-type specifier and as a parameter-type specifier). For the context in which type specifiers appear, see <a href="mi-laref_49v0.htm"><b>IDL</b></a>. </p>
<p>
If no integer sign specification is provided, the integer type defaults to <b>signed</b>.</p>
<p>
DCE IDL compilers do not allow the keyword <b>signed</b> to specify the sign of integer types. Therefore, this feature is not available when you use the MIDL compiler /<b>osf</b> switch.</p>
<h4>See Also</h4>
<p>
<a href="mi-laref_20du.htm"><b>base_types</b></a>, <a href="mi-laref_1cvb.htm"><b>long</b></a>, <a href="mi-cmdln_4tk6.htm"><b>/osf</b></a>, <a href="mi-laref_4t84.htm"><b>short</b></a>, <a href="mi-laref_1o18.htm"><b>small</b></a></p>
<p>&nbsp;</p></body>
</HTML>

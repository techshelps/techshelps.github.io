<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiler Errors</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_compiler_errors"></a>Compiler Errors</h1>
<p>
The following error messages are generated during MIDL compilation:</p>

<dl>
<dt>
<a name="_rpc_midl2000"></a><b>MIDL2000 : must specify /c_ext for abstract declarators</b></dt>
<dd>
Abstract declarators represent a Microsoft extension to RPC and are not defined in DCE RPC. Therefore, if your file includes abstract declarators, you cannot compile with the <b>/osf</b> switch, which enforces strict DCE compatibility. MIDL versions 3.0 and later use the <b>/c_ext</b> switch as the default; the /<b>osf </b>switch turns off the <b>/c_ext</b> switch.</dd>
<dt>
<a name="_rpc_midl2001"></a><b>MIDL2001 : instantiation of data is illegal; you must use "extern" or "static"</b></dt>
<dd>
Declaration and initialization in the IDL file are not compatible with DCE RPC. This feature is a Microsoft extension and is not available when you compile in DCE-compatibility (/<b>osf</b>) mode.</dd>
<dt>
<a name="_rpc_midl2002"></a><b>MIDL2002 : compiler stack overflow</b></dt>
<dd>
The compiler ran out of stack space while processing the IDL file. This problem can occur when the compiler is processing a complex declaration or expression. To solve the problem, simplify the complex declaration or expression.</dd>
<dt>
<a name="_rpc_midl2003"></a><b>MIDL2003 : redefinition</b></dt>
<dd>
This error message can appear under the following circumstances: a type has been redefined; a procedure prototype has been redefined; a member of a structure or union of the same name already exists; a parameter of the same name already exists in the prototype.</dd>
<dt>
<a name="_rpc_midl2004"></a><b>MIDL2004 : [auto_handle] binding will be used for procedure </b></dt>
<dd>
No handle type has been defined as the default handle type. The compiler assumes that an auto handle will be used as the binding handle for the specified procedure.</dd>
<dt>
<a name="_rpc_midl2005"></a><b>MIDL2005 : out of memory</b></dt>
<dd>
The compiler ran out of memory during compilation. Reduce the size or complexity of the IDL file or allocate more memory to the process.</dd>
<dt>
<a name="_rpc_midl2006"></a><b>MIDL2006 : recursive definition</b></dt>
<dd>
A structure or union has been recursively defined. This error can occur when a pointer specification in a nested structure definition is missed.</dd>
<dt>
<a name="_rpc_midl2007"></a><b>MIDL2007 : import ignored; file already imported </b></dt>
<dd>
Importing an IDL file is an idempotent operation. All but the first import operation are ignored.</dd>
<dt>
<a name="_rpc_midl2008"></a><b>MIDL2008 : sparse enums require /c_ext or /ms_ext switch</b></dt>
<dd>
Assigning to enumeration constants is not compatible with DCE RPC. If you want to use the Microsoft extensions to MIDL that permit assigning values to enumeration constants,you cannot compile with the <b>/osf</b> switch, which enforces strict DCE compatibility. MIDL versions 3.0 and later use the <b>/c_ext</b> and <b>/ms_ext </b>switches as the default; the /<b>osf </b>switch turns off these extension switches.</dd>
<dt>
<a name="_rpc_midl2009"></a><b>MIDL2009 : undefined symbol</b></dt>
<dd>
An undefined symbol has been used in an expression. This error can occur when you use an <b>enum</b> label that is not defined.</dd>
<dt>
<a name="_rpc_midl2010"></a><b>MIDL2010 : type used in ACF file not defined in IDL file</b></dt>
<dd>
An undefined type is being used.</dd>
<dt>
<a name="_rpc_midl2011"></a><b>MIDL2011 : unresolved type declaration</b></dt>
<dd>
The type reported in the additional-information field has not been defined elsewhere in the IDL file.</dd>
<dt>
<a name="_rpc_midl2012"></a><b>MIDL2012 : use of wide-character constants requires /ms_ext or /c_ext</b></dt>
<dd>
Wide-character constants are a Microsoft extension to DCE IDL. To use the data type <b>wchar_t</b>, you cannot compile with the <b>/osf </b>switch, which overrides the MIDL compiler default switches–<b>/ms_ext</b> and <b>/c_ext</b>.</dd>
<dt>
<a name="_rpc_midl2013"></a><b>MIDL2013 : use of wide-character strings requires /ms_ext or /c_ext</b></dt>
<dd>
Wide-character string constants are a Microsoft extension to DCE IDL. To use the data type <b>wchar_t</b>, you cannot compile with the <b>/osf </b>switch, which overrides the MIDL compiler default switches–<b>/ms_ext</b> and <b>/c_ext</b>.</dd>
<dt>
<a name="_rpc_midl2014"></a><b>MIDL2014 : inconsistent redefinition of type wchar_t</b></dt>
<dd>
The type <b>wchar_t</b> has been redefined as a type that is not equivalent to <b>unsigned</b> <b>short</b>.</dd>
<dt>
<a name="_rpc_midl2015"></a><b>MIDL2015 : importlib not found</b></dt>
<dd>
The compiler could not find the type library specified by the <b>importlib</b> directive. Check to make sure the path and name of the library are correct.</dd>
<dt>
<a name="_rpc_midl2016"></a><b>MIDL2016 : two library blocks</b></dt>
<dd>
Two library blocks (even with different names) in the same source file are illegal. Combine all the elements into a single library block.</dd>
<dt>
<b> <a name="_rpc_midl2017"></a>MIDL2017 : the dispinterface statement requires a definition for IDispatch</b></dt>
<dd>
 </dd>
<dt>
<a name="_rpc_midl2018"></a><b>MIDL2018 : error accessing type library</b></dt>
<dd>
The compiler could not find the specified type library. Check to make sure that you have specified the path correctly.</dd>
<dt>
<a name="_rpc_midl2019"></a><b>MIDL2019 : error accessing type info</b></dt>
<dd>
?</dd>
<dt>
<a name="_rpc_midl2020"></a><b>MIDL2020 : error generating type library</b></dt>
<dd>
?</dd>
<dt>
<a name="_rpc_midl2021"></a><b>MIDL2021 : duplicate id</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2022"></a><b>MIDL2022 : illegal or missing value for entry attribute</b></dt>
<dd>
The argument for the entry attribute may be either a string that specifies a named entry point, or an ordinal number that defines the entry point. The argument is either missing, or contains an invalid value.</dd>
<dt>
<a name="_rpc_midl2023"></a><b>MIDL2023 : error recovery assumes</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2024"></a><b>MIDL2024 : error recovery discards</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2025"></a><b>MIDL2025 : syntax error</b></dt>
<dd>
The compiler detected a syntax error at the specified line.</dd>
<dt>
<a name="_rpc_midl2026"></a><b>MIDL2026 : cannot recover from earlier syntax errors; aborting compilation</b></dt>
<dd>
The MIDL compiler automatically tries to recover from syntax errors by adding or removing syntactic elements. This message indicates that despite these attempts to recover, the compiler detected too many errors. Correct the specified error(s) and recompile.</dd>
<dt>
<a name="_rpc_midl2027"></a><b>MIDL2027 : unknown pragma option</b></dt>
<dd>
The specified C pragma is not supported in MIDL. Remove the pragma from the IDL file.</dd>
<dt>
<a name="_rpc_midl2028"></a><b>MIDL2028 : feature not implemented</b></dt>
<dd>
The MIDL feature, although part of the language definition, is not implemented in Microsoft RPC and is not supported by the MIDL compiler. For example, the following language features are not implemented: bitset, pipe, and the international character type. The unimplemented language feature appears in the additional-information field of the error message.</dd>
<dt>
<a name="_rpc_midl2029"></a><b>MIDL2029 : type not implemented</b></dt>
<dd>
The specified data type, although a legal MIDL keyword, is not implemented in Microsoft RPC. </dd>
<dt>
<a name="_rpc_midl2030"></a><b>MIDL2030 : non-pointer used in a dereference operation</b></dt>
<dd>
A data type that is not a pointer has been associated with pointer operations. You cannot access the object through the specified non-pointer.</dd>
<dt>
<a name="_rpc_midl2031"></a><b>MIDL2031 : expression has a divide by zero</b></dt>
<dd>
The constant expression contains a divide by zero.</dd>
<dt>
<a name="_rpc_midl2032"></a><b>MIDL2032 : expression uses incompatible types</b></dt>
<dd>
The left and right sides of the operator in an expression are of incompatible types.</dd>
<dt>
<a name="_rpc_midl2033"></a><b>MIDL2033 : non-array expression uses index operator</b></dt>
<dd>
The expression uses the array-indexing operation on a data item that is not of the array type.</dd>
<dt>
<a name="_rpc_midl2034"></a><b>MIDL2034 : left-hand side of expression does not evaluate to struct/union/enum</b></dt>
<dd>
The direct or indirect reference operator "." or "-&gt;" has been applied to a data object that is not a structure, union, or <b>enum</b>. You cannot obtain a direct or indirect reference using the specified object.</dd>
<dt>
<a name="_rpc_midl2035"></a><b>MIDL2035 : constant expression expected</b></dt>
<dd>
A constant expression was expected in the syntax. For example, array bounds require a constant expression. The compiler issues this error message when the array bound is defined with a variable or undefined symbol.</dd>
<dt>
<a name="_rpc_midl2036"></a><b>MIDL2036 : expression cannot be evaluated at compile time</b></dt>
<dd>
The compiler cannot evaluate an expression at compile time.</dd>
<dt>
<a name="_rpc_midl2037"></a><b>MIDL2037 : expression not implemented</b></dt>
<dd>
A feature that was supported in previous releases of the MIDL compiler is not supported in the version of the compiler supplied with Microsoft RPC. Remove the specified feature.</dd>
<dt>
<a name="_rpc_midl2038"></a><b>MIDL2038 : no [pointer_default] specified, assuming [unique] for all unattributed pointers</b></dt>
<dd>
The MIDL compiler offers three different default cases for pointers that do not have pointer attributes. Function parameters that are top-level pointers default to <b>ref</b> pointers. Pointers embedded in structures and pointers to other pointers (not top-level pointers) default to the type specified by the <b>pointer_default</b> attribute. When no <b>pointer_default</b> attribute is supplied, these non-top-level pointers default to unique pointers. This error message indicates the last case: no <b>pointer_default</b> attribute is supplied and there is at least one non-top-level pointer that will be treated as a unique pointer.</dd>
<dt>
<a name="_rpc_midl2039"></a><b>MIDL2039 : interface does not conform to [oleautomation] attribute</b></dt>
<dd>
The interface does not meet the requirements for and Automation interface. Check to make sure the interface is derived from <b>IUnknown</b> or <b>IDispatch</b>.</dd>
<dt>
<a name="_rpc_midl2040"></a><b>MIDL2040 : [out] only parameter cannot be a pointer to an open structure</b></dt>
<dd>
An <b>out</b>-only parameter has been used as a pointer to a structure, known as an open structure, whose transmitted range and size are determined at run time. The server stub does not know how much space to allocate for an open structure. Use a pointer to a pointer to the open structure and ensure that the server application allocates sufficient space for it.</dd>
<dt>
<a name="_rpc_midl2041"></a><b>MIDL2041 : [out] only parameter cannot be an unsized string </b></dt>
<dd>
An array with the string attribute has been declared as an <b>out</b>-only parameter without any size specification. The server stub needs size information to allocate memory for the string. You can remove the string attribute and add the <b>size_is</b> attribute, or you can change the parameter to an <b>in, out</b> parameter. </dd>
<dt>
<a name="_rpc_midl2042"></a><b>MIDL2042 : [out] parameter is not a pointer </b></dt>
<dd>
All <b>out</b> parameters must be pointers, in keeping with the call-by-value convention of the C programming language. The <b>out</b> directional parameter indicates that the server transmits a value to the client. With the call-by-value convention, the server can transmit data to the client only if the function argument is a pointer.</dd>
<dt>
<a name="_rpc_midl2043"></a><b>MIDL2043 : open structure cannot be a parameter </b></dt>
<dd>
A structure or union is truncated when the last element of that structure or union is a conformant array.</dd>
<dt>
<a name="_rpc_midl2044"></a><b>MIDL2044 : [out] context handle/generic handle must be specified as a pointer to that handle type </b></dt>
<dd>
A context-handle or user-defined handle parameter with the <b>out</b> directional attribute must be a pointer to a pointer.</dd>
<dt>
<a name="_rpc_midl2045"></a><b>MIDL2045 : [context_handle] must not derive from a type that has the [transmit_as] attribute </b></dt>
<dd>
Context handles must be transmitted as context-handle types. They cannot be transmitted as other types.</dd>
<dt>
<a name="_rpc_midl2046"></a><b>MIDL2046 : cannot specify a variable number of arguments to a remote procedure </b></dt>
<dd>
Remote procedure calls that specify the number of variable arguments at compile time are not compatible with the DCE RPC definition. You cannot use a variable number of arguments in Microsoft RPC.</dd>
<dt>
<a name="_rpc_midl2047"></a><b>MIDL2047 : named parameter cannot be "void"</b></dt>
<dd>
A parameter with the base type <b>void</b> is specified with a name.</dd>
<dt>
<a name="_rpc_midl2048"></a><b>MIDL2048 : parameter derives from "coclass"</b></dt>
<dd>
The <b>coclass</b> specifies a top-level object that contains interfaces and dispinterfaces. It cannot be passed as a parameter.</dd>
<dt>
<a name="_rpc_midl2049"></a><b>MIDL2049 : only the first parameter can be a binding handle; you must specify the /ms_ext switch</b></dt>
<dd>
DCE RPC requires that only the first parameter can be a binding handle. Compiling with the /<b>osf</b> switch turns off the default <b>/ms_ext </b>switch that supports multiple handle parameters and handle parameters in other than the left-most position.</dd>
<dt>
<a name="_rpc_midl2050"></a><b>MIDL2050 : cannot use [comm_status] on both a parameter and a return type </b></dt>
<dd>
Both the procedure and one of its parameters have the <b>comm_status </b>attribute. The <b>comm_status</b> attribute specifies that only one data object can be of type <b>error_status_t</b> at a time.</dd>
<dt>
<a name="_rpc_midl2051"></a><b>MIDL2051 : [local] attribute on a procedure requires /ms_ext </b></dt>
<dd>
The <b>local </b>attribute is a Microsoft extension to DCE IDL. To use this attribute on a function you cannot compile with the <b>/osf </b>switch, which overrides the MIDL compiler default switches–<b>/ms_ext</b> and <b>/c_ext</b>.</dd>
<dt>
<a name="_rpc_midl2052"></a><b>MIDL2052 : property attributes may only be used with procedures</b></dt>
<dd>
Improper usage of a <b>propget</b>, <b>propput,</b> or <b>propputref</b> attribute. Check to be sure you have spelled the property's function name correctly and that the property and function have the same name.</dd>
<dt>
<a name="_rpc_midl2053"></a><b>MIDL2053 : a procedure may not have more than one property attribute</b></dt>
<dd>
At most, one of <b>propget</b>, <b>propput</b> and <b>propputref</b> attributes can be specified for a function.</dd>
<dt>
<a name="_rpc_midl2054"></a><b>MIDL2054 : the procedure has an illegal combination of operation attributes</b></dt>
<dd>
Certain attributes cannot be used in connection with other attributes. Check the MIDL Language Reference for the exact requirements and syntax of the attributes used in this procedure.</dd>
<dt>
<a name="_rpc_midl2055"></a><b>MIDL2055 : field deriving from a conformant array must be the last member of the structure </b></dt>
<dd>
The structure contains a conformant array that is not the last element in the structure. The conformant array must appear as the last structure element.</dd>
<dt>
<a name="_rpc_midl2056"></a><b>MIDL2056 : duplicate [case] label </b></dt>
<dd>
A duplicate case label has been specified. The duplicate label is displayed.</dd>
<dt>
<a name="_rpc_midl2057"></a><b>MIDL2057 : no [default] case specified for discriminated union </b></dt>
<dd>
A discriminated union has been specified without a default case.</dd>
<dt>
<a name="_rpc_midl2058"></a><b>MIDL2058 : attribute expression cannot be resolved </b></dt>
<dd>
The expression associated with the attribute cannot be resolved. This error usually occurs when a variable that appears in the expression is not defined. For example, the error can occur when the variable <i>s</i> is not defined and is used by the attribute <b>size_is</b>(<i>s</i>).</dd>
<dt>
<a name="_rpc_midl2059"></a><b>MIDL2059 : attribute expression must be of integral, non hyper type </b></dt>
<dd>
The specified attribute variable or expression must be an integral type. This error occurs when the attribute-expression type does not resolve to an integer.</dd>
<dt>
<a name="_rpc_midl2060"></a><b>MIDL2060 : [byte_count] requires /ms_ext </b></dt>
<dd>
The <b>byte_count</b> attribute is a Microsoft extension to DCE IDL. To use this attribute you cannot compile with the <b>/osf </b>switch, which overrides the MIDL compiler default switches–<b>/ms_ext</b> and <b>/c_ext</b>.</dd>
<dt>
<a name="_rpc_midl2061"></a><b>MIDL2061 : [byte_count] can be applied only to out parameters of pointer type </b></dt>
<dd>
The <b>byte_count</b> attribute can only be applied to <b>out</b> parameters, and all <b>out</b> parameters must be pointer types.</dd>
<dt>
<a name="_rpc_midl2062"></a><b>MIDL2062 : [byte_count] cannot be specified on a pointer to a conformant array or structure</b></dt>
<dd>
The <b>byte_count</b> attribute cannot be applied to a conformant array or structure.</dd>
<dt>
<a name="_rpc_midl2063"></a><b>MIDL2063 : parameter specifying the byte count is not [in] </b></dt>
<dd>
The value associated with the <b>byte_count</b> must be transmitted from the client to the server; it must be an <b>in</b> parameter. The <b>byte_count</b> parameter does not need to be an <b>in, out</b> parameter.</dd>
<dt>
<a name="_rpc_midl2064"></a><b>MIDL2064 : parameter specifying the byte count is not an integral type</b></dt>
<dd>
The value associated with the byte count must be the integer type <b>int</b>, <b>small</b>, <b>short</b>, or <b>long</b>.</dd>
<dt>
<a name="_rpc_midl2065"></a><b>MIDL2065 : [byte_count] cannot be specified on a parameter with size attributes </b></dt>
<dd>
The <b>byte_count</b> attribute cannot be used with other size attributes such as <b>size_is</b> or <b>length_is</b>.</dd>
<dt>
<a name="_rpc_midl2066"></a><b>MIDL2066 : [case] expression is not constant</b></dt>
<dd>
The expression specified for the case label is not a constant.</dd>
<dt>
<a name="_rpc_midl2067"></a><b>MIDL2067 : [case] expression is not of integral type</b></dt>
<dd>
The expression specified for the case label is not an integer type.</dd>
<dt>
<a name="_rpc_midl2068"></a><b>MIDL2068 : specifying [context handle] on a type other than void * requires /ms_ext </b></dt>
<dd>
For DCE RPC compatibility, the context handle must be a pointer of type <b>void *</b>. If you want the context handles to be associated with types other than <b>void *</b>, do not use the MIDL compiler switch <b>/osf, </b>which overrides the MIDL compiler default switch <b>/ms_ext</b>.</dd>
<dt>
<a name="_rpc_midl2069"></a><b>MIDL2069 : cannot specify more than one parameter with each of comm_status/fault_status </b></dt>
<dd>
The <b>comm_status </b>attribute may only appear once, and the <b>fault_status </b>attribute may only appear once per procedure.</dd>
<dt>
<a name="_rpc_midl2070"></a><b>MIDL2070 : comm_status/fault_status parameter must be an [out] only pointer parameter </b></dt>
<dd>
The error-code types <b>comm_status</b> and <b>fault_status</b> are transmitted from server to client and therefore must be specified as an <b>out</b> parameter. Due to the constraints in the C programming language, all <b>out</b> parameters must be pointers.</dd>
<dt>
<a name="_rpc_midl2071"></a><b>MIDL2071 : endpoint syntax error </b></dt>
<dd>
The endpoint syntax is incorrect. </dd>
<dt>
<a name="_rpc_midl2072"></a><b>MIDL2072 : inapplicable attribute </b></dt>
<dd>
The specified attribute cannot be applied in this construct. For example, the string attribute applies to <b>char</b> arrays or <b>char</b> pointers and cannot be applied to a structure that consists of two <b>short</b> integers: </dd>
</dl>

<pre><code>typedef [string] struct foo {
    short x;
    short y;
};
 </code></pre>

<dl>
<dt>
<a name="_rpc_midl2073"></a><b>MIDL2073 : [allocate] requires /ms_ext </b></dt>
<dd>
The <b>allocate</b> attribute represents a Microsoft extension that is not defined as part of DCE RPC. To use this attribute, you cannot compile with the <b>/osf </b>switch<b>, </b>which overrides the MIDL compiler default switch <b>/ms_ext</b></dd>
<dt>
<a name="_rpc_midl2074"></a><b>MIDL2074 : invalid [allocate] mode </b></dt>
<dd>
An invalid mode for the <b>allocate</b> attribute construct has been specified. The four valid modes are <b>single_node</b>, <b>all_nodes</b>, <b>on_null</b>, and <b>always</b>.</dd>
<dt>
<a name="_rpc_midl2075"></a><b>MIDL2075 : length attributes cannot be applied with string attribute </b></dt>
<dd>
When the string attribute is used, the generated stub files call the <b>strlen</b> function to determine the string length. Don't use the length attribute and the string attribute for the same variable.</dd>
<dt>
<a name="_rpc_midl2076"></a><b>MIDL2076 : [last_is] and [length_is] cannot be specified at the same time </b></dt>
<dd>
Both <b>last_is</b> and <b>length_is</b> have been specified for the same array. These attributes are related as follows: length = last - first + 1. Because each value can be derived from the other, don't specify both.</dd>
<dt>
<a name="_rpc_midl2077"></a><b>MIDL2077 : [max_is] and [size_is] cannot be specified at the same time </b></dt>
<dd>
Both <b>max_is</b> and <b>size_is</b> have been specified for the same array. These attributes are related as follows: max = size + 1. Because each value can be derived from the other, don't specify both.</dd>
<dt>
<a name="_rpc_midl2078"></a><b>MIDL2078 : no [switch_is] attribute specified at use of union </b></dt>
<dd>
No discriminant has been specified for the union. The <b>switch_is</b> attribute indicates the discriminant used to select among the union fields.</dd>
<dt>
<a name="_rpc_midl2079"></a><b>MIDL2079 : no [uuid] specified for interface </b></dt>
<dd>
No UUID has been specified for the interface.</dd>
<dt>
<a name="_rpc_midl2080"></a><b>MIDL2080 : uuid ignored on [local] interface</b></dt>
<dd>
Using the <b>[local]</b> attribute on an object interface causes the MIDL compiler to ignore the <b>[uuid]</b> attribute. You cannot use both attributes on an RPC interface.</dd>
<dt>
<a name="_rpc_midl2081"></a><b>MIDL2081 : type mismatch between length and size attribute expressions</b></dt>
<dd>
The length and size attribute expressions must be of the same types. For example, this warning is issued when the attribute variable for the <b>size_is</b> expression is of type <b>unsigned long</b> and the attribute variable for the <b>length_is</b> expression is of type <b>long</b>.</dd>
<dt>
<a name="_rpc_midl2082"></a><b>MIDL2082 : [string] attribute must be specified "byte", "char", or "wchar_t" array or pointer </b></dt>
<dd>
A string attribute cannot be applied to a pointer or array whose base type is not a <b>byte</b>, <b>char</b>, or <b>struct</b> in which the members are all of the <b>byte</b> or <b>char</b> type.</dd>
<dt>
<a name="_rpc_midl2083"></a><b>MIDL2083 : mismatch between the type of the [switch_is] expression and the switch type of the union </b></dt>
<dd>
If the union <b>switch_type</b> is not specified, the switch type is the same type as the <b>switch_is</b> field.</dd>
<dt>
<a name="_rpc_midl2084"></a><b>MIDL2084 : [transmit_as] cannot be applied to a type that derives from a context handle </b></dt>
<dd>
Context handles cannot be transmitted as other types.</dd>
<dt>
<a name="_rpc_midl2085"></a><b>MIDL2085 : [transmit_as] must specify a transmissible type</b></dt>
<dd>
The specified <b>transmit_as</b> type derives from a type that cannot be transmitted by Microsoft RPC, such as <b>void</b>, <b>void *</b>, or <b>int</b>. Use a defined RPC base type; in the case of <b>int</b>, add size specifiers like <b>small</b>, <b>short</b>, or <b>long</b> to qualify the <b>int</b>.</dd>
<dt>
<a name="_rpc_midl2086"></a><b>MIDL2086 : transmitted type must not be a pointer or derive from a pointer </b></dt>
<dd>
The transmitted type cannot be a pointer or derive from a pointer.</dd>
<dt>
<a name="_rpc_midl2087"></a><b>MIDL2087 : presented type must not derive from a conformant/varying array, its pointer equivalent, or a conformant/varying structure </b></dt>
<dd>
The type to which <b>transmit_as</b> has been applied cannot derive from a conformant array or structure (an array or structure whose size is determined at run time).</dd>
<dt>
<a name="_rpc_midl2088"></a><b>MIDL2088 : [uuid] format is incorrect </b></dt>
<dd>
The UUID format does not conform to specification. The UUID must be a string that consists of five sequences of hexadecimal digits of length 8, 4, 4, 4, and 12 digits. "12345678-1234-ABCD-EF01-28A49C28F17D" is a valid UUID. Use the function <b>UuidCreate</b> or a utility to generate a valid UUID.</dd>
<dt>
<a name="_rpc_midl2089"></a><b>MIDL2089 : uuid is not a hex number</b></dt>
<dd>
The UUID specified for the interface contains characters that are invalid in a hexadecimal number representation. The characters 0 through 9 and A through F are valid in a hexadecimal representation.</dd>
<dt>
<a name="_rpc_midl2090"></a><b>MIDL2090 : optional parameters must come at the end of the parameter list</b></dt>
<dd>
For a description of the ordering of parameter lists, see <a href="mi-laref_7wh8.htm"><b>optional</b></a> in the MIDL Language Reference.</dd>
<dt>
<a name="_rpc_midl2091"></a><b>MIDL2091 : [dllname] required when [entry] is used</b></dt>
<dd>
If you are specifying an entry point into a DLL you must also specify the name of that DLL, by using the [dllname(<i>str</i>)] attribute.</dd>
<dt>
<a name="_rpc_midl2092"></a><b>MIDL2092 : [bindable] is invalid without [propget], [propput] or [propputref]</b></dt>
<dd>
The <b>[bindable]</b> attribute is valid only on a property, therefore you must also specify one of the property accessing or setting functions.</dd>
<dt>
<a name="_rpc_midl2093"></a><b>MIDL2093 : procedures with [propput], [propget] or [propref] must have at least one parameter</b></dt>
<dd>
A <b>[propput]</b> or <b>[propputref]</b> procedure must have at least an <b>[in] </b> parameter with the property to set; a <b>[propget]</b> procedure must have at least an <b>[out, retval]</b> paramter to receive the property or reference.</dd>
<dt>
<a name="_rpc_midl2094"></a><b>MIDL2094 : [id] attribute is required</b></dt>
<dd>
This member function, because of the <b>dispinterface</b> syntax used, requires a DISPID, which you specify by using the <b>[id] </b>attribute. When you specify a <b>dispinterface</b> by using properties and methods you must specify a DISPID for every property and method.</dd>
<dt>
<a name="_rpc_midl2095"></a><b>MIDL2095 : interface name specified in the ACF file does not match that specified in the IDL file </b></dt>
<dd>
In this compiler mode, the name that follows the interface keyword in the ACF must be the same as the name that follows the interface keyword in the IDL file. The interface names in the IDL and ACF files can be different when you compile with the MIDL compiler switch <b>/acf</b>.</dd>
<dt>
<a name="_rpc_midl2096"></a><b>MIDL2096 : duplicated attribute </b></dt>
<dd>
Duplicated or conflicting attributes have been specified. This error often occurs when two attributes are mutually exclusive. For example, the attributes <b>code</b> and <b>nocode</b> cannot be used at the same time.</dd>
<dt>
<a name="_rpc_midl_2097"></a><b>MIDL 2097 : parameter with [comm_status] or [fault_status] attribute must be a pointer to type error_status_t.</b></dt>
<dd>
When <b>fault_status</b> or <b>comm_status </b>is used as a parameter attribute, the parameter must be an <b>out</b> parameter of type <b>error_status_t</b>. If a server error occurs, the parameter is set to the error code. When the remote call is successfully completed, the procedure sets the value.</dd>
<dt>
<a name="_rpc_midl2098"></a><b>MIDL2098 : [local] procedure cannot be specified in ACF file </b></dt>
<dd>
A local procedure has been specified in the ACF. The local procedure can only be specified in the IDL file.</dd>
<dt>
<a name="_rpc_midl2099"></a><b>MIDL2099 : specified type is not defined as a handle </b></dt>
<dd>
The type specified in the <b>implicit_handle</b> attribute is not defined as a handle type. Change the type definition or the type name specified by the attribute.</dd>
<dt>
<a name="_rpc_midl2100"></a><b>MIDL2100 : procedure undefined </b></dt>
<dd>
An attribute has been applied to a procedure in the ACF and that procedure is not defined in the IDL file.</dd>
<dt>
<a name="_rpc_midl2101"></a><b>MIDL2101 : this parameter does not exist in the IDL file </b></dt>
<dd>
A parameter specified in the ACF does not exist in the definition in the IDL file. All parameters, functions, and type definitions that appear in the ACF must correspond to parameters, functions, and types previously defined in the IDL file.</dd>
<dt>
<a name="_rpc_midl2102"></a><b>MIDL2102 : this array bounds construct is not supported </b></dt>
<dd>
MIDL currently supports array-bounds constructs of the form <i>Array[Lower .. Upper]</i> only when the constant that specifies the lower bound of the array resolves to the value zero.</dd>
<dt>
<a name="_rpc_midl2103"></a><b>MIDL2103 : array bound specification is illegal </b></dt>
<dd>
The user specification of array bounds for the fixed-size array is illegal. For example:</dd>
</dl>

<pre><code>typedef short Array[-1]
 </code></pre>

<dl>
<dt>
<a name="_rpc_midl2104"></a><b>MIDL2104 : pointer to a conformant array or an array that contains a conformant array is not supported</b></dt>
<dd>
Illegal conformant array usage. See the RPC Programmer's Guide for rules governing conformant arrays.</dd>
<dt>
<a name="_rpc_midl2105"></a><b>MIDL2105 : pointee / array does not derive any size </b></dt>
<dd>
A conformant array has been specified without any size specification. You can specify the size with the <b>max_is</b> or <b>size_is</b> attribute.</dd>
<dt>
<a name="_rpc_midl2106"></a><b>MIDL2106 : only fixed arrays and SAFEARRAYs are legal in a type library</b></dt>
<dd>
You have used an array type inside a library statement that cannot be used in a type library.</dd>
<dt>
<a name="_rpc_midl2107"></a><b>MIDL2107 : SAFEARRAYs are only legal inside a library block</b></dt>
<dd>
The MIDL compiler does not recognize SAFEARRAYs as a valid data type except when generating a type library.</dd>
<dt>
<a name="_rpc_midl210"></a><b>MIDL2108: badly formed character constant </b></dt>
<dd>
The end-of-line character is not allowed in character constants.</dd>
<dt>
<a name="_rpc_midl2109"></a><b>MIDL2109 : end of file found in comment </b></dt>
<dd>
The end-of-file character has been encountered in a comment.</dd>
<dt>
<a name="_rpc_midl2110"></a><b>MIDL2110 : end of file found in string </b></dt>
<dd>
The end-of-file character has been encountered in a string.</dd>
<dt>
<a name="_rpc_midl2111"></a><b>MIDL2111 : identifier length exceeds 31 characters </b></dt>
<dd>
Identifiers are limited to 31 alphanumeric characters. Identifier names longer than 31 characters are truncated.</dd>
<dt>
<a name="_rpc_midl2112"></a><b>MIDL2112 : end of line found in string </b></dt>
<dd>
The end-of-line character has been encountered in the string. Verify that you have included the double-quote character that terminates the string.</dd>
<dt>
<a name="_rpc_midl2113"></a><b>MIDL2113 : string constant exceeds limit of 255 characters </b></dt>
<dd>
The string exceeded the maximum allowable length of 255 characters.</dd>
<dt>
<a name="_rpc_midl2114"></a><b>MIDL2114 : identifier exceeds limit of 255 characters</b></dt>
<dd>
The identifier exceeded the maximum allowable length of 255 characters and has been truncated.</dd>
<dt>
<a name="_rpc_midl2115"></a><b>MIDL2115 : constant too big </b></dt>
<dd>
The constant is too large to be represented internally.</dd>
<dt>
<a name="_rpc_midl2116"></a><b>MIDL2116 :  numerical parsing error</b></dt>
<dd>
The compiler could not parse the numerical identifier.</dd>
<dt>
<a name="_rpc_midl2117"></a><b>MIDL2117 : error in opening file </b></dt>
<dd>
The operating system reported an error while trying to open an output file. This error can be caused by a name that is too long for the file system or by a duplicate filename.</dd>
<dt>
<a name="_rpc_midl2118"></a><b>MIDL2118 : error binding to function</b></dt>
<dt>
<a name="_rpc_midl2119"></a><b>MIDL2119 : error initializing OLE</b></dt>
<dt>
<a name="_rpc_midl2120"></a><b>MIDL2120 : error loading library</b></dt>
<dt>
<a name="_rpc_midl2121"></a><b>MIDL2121 : [out] only parameter must not derive from a top-level [unique] or [ptr] pointer/array </b></dt>
<dd>
A unique pointer cannot be an <b>out</b>-only parameter. By definition, a unique pointer can change from null to non-null. No information about the <b>out</b>-only parameter is passed from client to server. </dd>
<dt>
<a name="_rpc_midl2122"></a><b>MIDL2122 : attribute is not applicable to this non-rpcable union </b></dt>
<dd>
The <b>switch_is</b> and <b>switch_type</b> attributes apply to a union that is transmitted as part of a remote procedure call.</dd>
<dt>
<a name="_rpc_midl2123"></a><b>MIDL2123 : expression used for a size attribute must not derive from an [out] only parameter </b></dt>
<dd>
The value of an <b>out</b>-only parameter is not transmitted to the server and cannot be used to determine the length or size of the <b>in</b> parameter.</dd>
<dt>
<a name="_rpc_midl2124"></a><b>MIDL2124 : expression used for a length attribute for an [in] parameter cannot derive from an [out] only parameter </b></dt>
<dd>
The value of an <b>out</b>-only parameter is not transmitted to the server and cannot be used to determine the length or size of the <b>in</b> parameter.</dd>
<dt>
<a name="_rpc_midl2125"></a><b>MIDL2125 : use of "int" needs /c_ext </b></dt>
<dd>
MIDL is a strongly typed language. All parameters transmitted over the network must be derived from one of the MIDL base types. The type <b>int</b> is not defined as part of MIDL. Transmitted data must include a size specifier: <b>small</b>, <b>short</b>, or <b>long</b>. Data that is not transmitted over the network can be included in an interface; use the <b>/c_ext</b> switch.</dd>
<dt>
<a name="_rpc_midl2126"></a><b>MIDL2126 : struct/union field must not be void </b></dt>
<dd>
Fields in a structure or union must be declared to be of a specific base type supported by MIDL or a type that is derived from the base types. <b>Void</b> types are not allowed in remote operations.</dd>
<dt>
<a name="_rpc_midl2127"></a><b>MIDL2127 : array element must not be void </b></dt>
<dd>
An array element cannot be void.</dd>
<dt>
<a name="_rpc_midl2128"></a><b>MIDL2128 : use of type qualifiers and/or modifiers needs /c_ext </b></dt>
<dd>
Type modifiers such as <b>_cdecl</b> and <b>_far</b> can be compiled only if you specify the <b>/c_ext</b> switch.</dd>
<dt>
<a name="_rpc_midl2129"></a><b>MIDL2129 : struct/union field must not derive from a function </b></dt>
<dd>
The fields of a structure or union must be MIDL base types or types that are derived from these base types. Functions are not legal in structure or union fields.</dd>
<dt>
<a name="_rpc_midl2130"></a><b>MIDL2130 : array element must not be a function </b></dt>
<dd>
An array element cannot be a function.</dd>
<dt>
<a name="_rpc_midl2131"></a><b>MIDL2131 : parameter must not be a function </b></dt>
<dd>
The parameter to a remote procedure must be a variable of a specified type. A function cannot be a parameter to the remote procedure.</dd>
<dt>
<a name="_rpc_midl2132"></a><b>MIDL2132 : struct/union with bit fields needs /c_ext </b></dt>
<dd>
You must specify the MIDL compiler switch <b>/c_ext</b> to allow bit fields on data that is not transmitted in a remote procedure call.</dd>
<dt>
<a name="_rpc_midl2133"></a><b>MIDL2133 : bit field specification on a type other that "int" is a non ANSI-compatible extension </b></dt>
<dd>
The ANSI C programming language specification does not allow bit fields to be applied to non-integer types. </dd>
<dt>
<a name="_rpc_midl2134"></a><b>MIDL2134 : bit field specification can be applied only to simple, integral types </b></dt>
<dd>
The ANSI C programming language specification does not allow bit fields to be applied to non-integer types. </dd>
<dt>
<a name="_rpc_midl2135"></a><b>MIDL2135 : struct/union field must not derive from handle_t or a context_handle </b></dt>
<dd>
Context handles cannot be transmitted as part of another structure. They must be transmitted as context handles. </dd>
<dt>
<a name="_rpc_midl2136"></a><b>MIDL2136 : array element must not derive from handle_t or a context handle </b></dt>
<dd>
Context handles cannot be transmitted as part of an array. </dd>
<dt>
<a name="_rpc_midl2137"></a><b>MIDL2137 : this specification of union needs /c_ext </b></dt>
<dd>
A union that appears in the interface definition must be associated with the discriminant or declared as local. Data that is not transmitted over the network can be implicitly declared as local when you use the <b>/c_ext</b> switch, which is the MIDL default. You cannot compile this IDL with the <b>/osf </b>switch. </dd>
<dt>
<a name="_rpc_midl2138"></a><b>MIDL2138 : parameter deriving from an "int" must have size specifier "small", "short", or "long" with the "int" </b></dt>
<dd>
The type <b>int</b> is only a valid MIDL type on 32-bit platforms, on 16-bit systems <b>int </b>must be accompanied by a size specification. Use one of the size specifiers <b>small</b>, <b>short</b>, or <b>long</b>. </dd>
<dt>
<a name="_rpc_midl2139"></a><b>MIDL2139 : type of the parameter cannot derive from void or void*</b></dt>
<dd>
MIDL is a strongly typed language. All parameters transmitted over the network must be derived from one of the MIDL base types. MIDL does not support <b>void</b> as a base type. You must change the declaration to a valid MIDL type.</dd>
<dt>
<a name="_rpc_midl2140"></a><b>MIDL2140 : parameter deriving from a struct/union containing bit fields is not supported </b></dt>
<dd>
Bit fields are not defined as a valid data type by DCE RPC. </dd>
<dt>
<a name="_rpc_midl2141"></a><b>MIDL2141 : use of a parameter deriving from a type containing type-modifiers/type-qualifiers needs /c_ext </b></dt>
<dd>
The use of  keywords such as  <b>far</b>, <b>near</b>, <b>const</b>, and <b>volatile</b> in the IDL file is a Microsoft extension to DCE RPC and, as such, is not available when you compile with the <b>/osf</b> switch which turns off the default  <b>/c_ext</b> extension switch. </dd>
<dt>
<a name="_rpc_midl2142"></a><b>MIDL2142 : parameter must not derive from a pointer to a function </b></dt>
<dd>
The RPC run-time libraries transmit a pointer and its associated data between client and server. Pointers to functions cannot be transmitted as parameters because the function cannot be transmitted over the network. </dd>
<dt>
<a name="_rpc_midl2143"></a><b>MIDL2143 : parameter must not derive from a non-rpcable union</b></dt>
<dd>
The union must be associated with a discriminant. Use the <b>switch_is </b>and <b>switch_type</b> attributes.</dd>
<dt>
<a name="_rpc_midl2144"></a><b>MIDL2144 : return type derives from an "int". You must use size specifiers with the "int"</b></dt>
<dd>
On 16-bit systems, the type <b>int</b> is not a valid MIDL type unless it is accompanied by a size specification. Use one of the size specifiers <b>small</b>, <b>short</b>, or <b>long</b>. </dd>
<dt>
<a name="_rpc_midl2145"></a><b>MIDL2145 : return type must not derive from a void pointer </b></dt>
<dd>
MIDL is a strongly typed language. All parameters transmitted over the network must be derived from one of the MIDL base types. <b>Void</b> types are not defined as part of MIDL. You must change the declaration to a valid MIDL type. </dd>
<dt>
<a name="_rpc_midl2146"></a><b>MIDL2146 : return type must not derive from a struct/union containing bit-fields </b></dt>
<dd>
Bit fields are not defined as a valid data type by DCE RPC. </dd>
<dt>
<a name="_rpc_midl2147"></a><b>MIDL2147 : return type must not derive from a non-rpcable union</b></dt>
<dd>
The union must be associated with a discriminant. Use the <b>switch_is</b> and <b>switch_type</b> attributes.</dd>
<dt>
<a name="_rpc_midl2148"></a><b>MIDL2148 : return type must not derive from a pointer to a function</b></dt>
<dd>
The RPC run-time libraries transmit a pointer and its associated data between client and server. Pointers to functions cannot be transmitted as parameters because RPC does not define a method to transmit the associated function over the network.</dd>
<dt>
<a name="_rpc_midl2149"></a><b>MIDL2149 : compound initializers are not supported </b></dt>
<dd>
DCE RPC supports simple initialization only. The structure or array cannot be initialized in the IDL file.</dd>
<dt>
<a name="_rpc_midl2150"></a><b>MIDL2150 : ACF attributes in the IDL file need the /app_config switch </b></dt>
<dd>
A Microsoft extension allows you to specify ACF attributes in the IDL file. Use the <b>/app_config</b> switch to activate this extension. </dd>
<dt>
<a name="_rpc_midl2151"></a><b>MIDL2151 : single line comment needs /ms_ext or /c_ext </b></dt>
<dd>
Single-line comments that use two slash characters (//) represent a Microsoft extension to DCE RPC. You cannot use singleline comments if you are compiling with the <b>/osf </b>switch.</dd>
<dt>
<a name="_rpc_midl2152"></a><b>MIDL2152 : [version] format is incorrect </b></dt>
<dd>
The interface version number in the interface header must be specified in the format <i>major</i><b>.</b><i>minor</i>, where each number can range from 0 to 65535.</dd>
<dt>
<a name="_rpc_midl2153"></a><b>MIDL2153 : "signed" needs /ms_ext or /c_ext </b></dt>
<dd>
The use of the <b>signed</b> keyword is a Microsoft extension to DCE RPC. You cannot use the <b>/osf</b> switch if you want to use this feature. </dd>
<dt>
<a name="_rpc_midl2154"></a><b>MIDL2154 : mismatch in assignment type </b></dt>
<dd>
The type of the variable does not match the type of the value that is assigned to the variable. </dd>
<dt>
<a name="_rpc_midl2155"></a><b>MIDL2155 : declaration must be of the form: const &lt;type&gt;&lt;declarator&gt; = &lt;initializing expression&gt; </b></dt>
<dd>
The declaration is not compatible with DCE RPC syntax. Use the <b>/ms_ext </b>or <b>/c_ext</b> MIDL compiler mode switch.</dd>
<dt>
<a name="_rpc_midl2156"></a><b>MIDL2156 : declaration must have "const"</b></dt>
<dd>
Declarations in the IDL file must be constant expressions that use the keyword <b>const</b>. For example:</dd>
</dl>

<pre><code>const short x = 2;
 </code></pre>

<dl>
<dt>
<a name="_rpc_midl2157"></a><b>MIDL2157 : struct/union/enum must not be defined in a parameter type specification </b></dt>
<dd>
The structure, union, or enumerated type must be explicitly specified outside of the function prototype. </dd>
<dt>
<a name="_rpc_midl2158"></a><b>MIDL2158 : [allocate] attribute must be applied only on non-void pointer types </b></dt>
<dd>
The <b>allocate</b> attribute is designed for complex pointer-based data structures. When the <b>allocate</b> attribute is specified, the stub file traverses the data structure to compute the total size of all objects accessible from the pointer and all other pointers in the data structure. Change the type to a non-void pointer type or remove the <b>allocate</b> attribute and use another method to determine its allocation size, such as the <b>sizeof</b> operator.</dd>
<dt>
<a name="_rpc_midl2159"></a><b>MIDL2159 : array or equivalent pointer construct cannot derive from a non-encapsulated union </b></dt>
<dd>
Each union must be associated with a discriminant. Arrays of unions are not permitted because they do not provide the associated discriminant. Arrays of structures are permitted because each structure consists of the union and its discriminant. </dd>
<dt>
<a name="_rpc_midl2160"></a><b>MIDL2160 : field must not derive from an error_status_t type </b></dt>
<dd>
The <b>error_status_t</b> type can only be used as a parameter or a return type. It cannot be embedded in the field of a structure or union. </dd>
<dt>
<a name="_rpc_midl2161"></a><b>MIDL2161 : union has at least one arm without a case label </b></dt>
<dd>
The union declaration does not match the required MIDL syntax for the union. Each union arm requires a case label or default label that selects that union arm.</dd>
<dt>
<a name="_rpc_midl2162"></a><b>MIDL2162 : a parameter or a return value must not derive from a type that has [ignore] applied to it </b></dt>
<dd>
The <b>ignore</b> attribute is a field attribute that can only be applied to fields, such as fields of structures and arrays. The <b>ignore</b> attribute indicates that the stub should not dereference the pointer during transmission and is not allowed when it conflicts with other attributes that must be dereferenced, such as <b>out</b> parameters and function return values. </dd>
<dt>
<a name="_rpc_midl2163"></a><b>MIDL2163 : pointer already has a pointer-attribute applied to it </b></dt>
<dd>
Only one of the pointer attributes, <b>ref</b>, <b>unique</b>, or <b>ptr</b>, can be applied to a pointer. </dd>
<dt>
<a name="_rpc_midl2164"></a><b>MIDL2164 : field/parameter must not derive from a structure that is recursive through a ref pointer</b></dt>
<dd>
By definition, a reference pointer cannot be set to NULL. A recursive data structure defined with a reference pointer has no null elements and by convention is non-terminating. Use a <b>unique</b> pointer attribute to allow the data structure to specify a null element or redefine the data structure as a non-recursive data structure. </dd>
<dt>
<a name="_rpc_midl2165"></a><b>MIDL2165 : use of field deriving from a void pointer needs /c_ext </b></dt>
<dd>
The type <b>void *</b> and other types and type qualifiers that are not supported by DCE IDL are only allowed in the IDL file when you use the MIDL default compiler settings. Using the <b>/osf </b>switch overrides this default. If you must compile in osf-compatibility mode you will need to redefine the pointer type </dd>
<dt>
<a name="_rpc_midl2166"></a><b>MIDL2166 : use of this attribute needs /ms_ext </b></dt>
<dd>
This language feature is a Microsoft extension to DCE IDL. You cannot use this feature if you are compiling in osf-compatibility mode ( <b>/osf</b> ). </dd>
<dt>
<a name="_rpc_midl2167"></a><b>MIDL2167 : this attribute only allowed with new format type libraries</b></dt>
<dd>
The version of OLEAUT32.DLL provided with Windows NT 4.0 is needed in order for you to use this attribute.</dd>
<dt>
<a name="_rpc_midl2168"></a><b>MIDL2168 : use of wchar_t needs /ms_ext or /c_ext </b></dt>
<dd>
The wide-character type represents an extension to DCE IDL. The MIDL compiler does not accept the wide-character type when you specify the <b>/osf</b> switch.</dd>
<dt>
<a name="_rpc_midl2169"></a><b>MIDL2169 : unnamed fields need /ms_ext or /c_ext</b></dt>
<dd>
DCE IDL does not support the use of unnamed structures or unions embedded in other structures or unions. In DCE IDL, all such embedded fields must be named. The MIDL compiler does not accept ththis feature when you specify the <b>/osf</b> switch.</dd>
<dt>
<a name="_rpc_midl2170"></a><b>MIDL2170 : unnamed fields can derive only from struct/union types </b></dt>
<dd>
The Microsoft extension to the DCE IDL that supports unnamed fields applies only to structures and unions. You must assign a name to the field or redefine the field to comply with this restriction. </dd>
<dt>
<a name="_rpc_midl2171"></a><b>MIDL2171 : field of a union cannot derive from a varying/conformant array or its pointer equivalent </b></dt>
<dd>
The conformant array cannot appear alone in the union but must be accompanied by the value that specifies the size of the array. Instead of using the array as the union arm, use a structure that consists of the conformant array and the identifier that specifies the size.</dd>
<dt>
<a name="_rpc_midl2172"></a><b>MIDL2172 : no [pointer_default] attribute specified, assuming [ptr] for all unattributed pointers in interface</b></dt>
<dd>
The DCE IDL implementation specifies that all pointers in each IDL file must be associated with pointer attributes. When an explicit pointer attribute is not assigned to the parameter or pointer type and no <b>pointer_default</b> attribute is specified in the IDL file, the full pointer attribute <b>ptr</b> is associated with the pointer. You can change the pointer attributes by using explicit pointer attributes, by specifying a <b>pointer_default</b> attribute, or by specifying the <b>/ms_ext</b> switch to change the default for unattributed pointers to <b>unique</b>.</dd>
<dt>
<a name="_rpc_midl2173"></a><b>MIDL2173 : initializing expression must resolve to a constant expression</b></dt>
<dd>
The use of initializing expressions is limited to constant expressions in all MIDL compiler modes. The expression must be resolvable at compile time. Specify a literal constant, or an expression that resolves to a constant, rather than a variable.</dd>
<dt>
<a name="_rpc_midl2174"></a><b>MIDL2174 : attribute expression must be of type integer, char, byte, boolean or enum</b></dt>
<dd>
The specified type does not resolve to a valid switch type. Use an integer, character, <b>byte</b>, <b>boolean</b>, or <b>enum</b> type, or a type that is derived from one of these types.</dd>
<dt>
<a name="_rpc_midl2175"></a><b>MIDL2175 : illegal constant</b></dt>
<dd>
The specified constant is out of the valid range for the specified type.</dd>
<dt>
<a name="_rpc_midl2176"></a><b>MIDL2176 : attribute not implemented; ignored</b></dt>
<dd>
The attribute specified is not implemented in this release of Microsoft RPC. The MIDL compiler continues processing the IDL file as if the attribute were not present.</dd>
<dt>
<a name="_rpc_midl2177"></a><b>MIDL2177 : return value must not derive from a [ref] pointer</b></dt>
<dd>
Function return values that are defined to be pointer types must be specified as unique or full pointers. Reference pointers cannot be used.</dd>
<dt>
<a name="_rpc_midl2178"></a><b>MIDL2178 : attribute expression must be a variable name or a pointer dereference expression in this mode. You must specify the /ms_ext switch</b></dt>
<dd>
The DCE IDL compiler requires the size associated with the <b>size_is</b> attribute to be specified by a variable or pointer variable. If you want to take advantage of  the Microsoft extension that allows the <b>size_is</b> attribute to be defined by a constant expression, you cannot use the /<b>osf</b> compiler switch..</dd>
<dt>
<a name="_rpc_midl2179"></a><b>MIDL2179 : parameter must not derive from a recursive non-encapsulated union</b></dt>
<dd>
A union must include a discriminant, so a union cannot have another union as an element. A union can be embedded in another union only when it is part of a structure that includes the discriminant.</dd>
<dt>
<a name="_rpc_midl2180"></a><b>MIDL2180 : binding-handle parameter cannot be [out] only</b></dt>
<dd>
The handle parameter identified by the MIDL compiler as the binding handle for this operation must be an <b>in</b> parameter. <b>Out</b>-only parameters are undefined on the client stub, and the binding handle must be defined on the client.</dd>
<dt>
<a name="_rpc_midl2181"></a><b>MIDL2181 : pointer to a handle cannot be [unique] or [ptr]</b></dt>
<dd>
The unique and full pointer attributes allow the value NULL. The binding handle cannot be null. Use the <b>ref</b> attribute to derive the binding-handle parameter from reference pointers.</dd>
<dt>
<a name="_rpc_midl2182"></a><b>MIDL2182 : parameter that is not a binding handle must not derive from handle_t</b></dt>
<dd>
The primitive handle type <b>handle_t</b> is not a valid data type that is transmitted over the network. Change the parameter type to a type other than <b>handle_t </b>or remove the parameter. </dd>
<dt>
<a name="_rpc_midl2183"></a><b>MIDL2183 : unexpected end of file found</b></dt>
<dd>
The MIDL compiler found the end of the file before it was able to successfully resolve all syntactical elements of the file. Verify that the terminating right brace character (}) is present at the end of the file, or check the syntax.</dd>
<dt>
<a name="_rpc_midl2184"></a><b>MIDL2184 : type deriving from handle_t must not have [transmit_as] applied to it</b></dt>
<dd>
The primitive handle type <b>handle_t</b> is not transmitted over the network.</dd>
<dt>
<a name="_rpc_midl2185"></a><b>MIDL2185 : [context_handle] must not be applied to a type that has [handle] applied to it</b></dt>
<dd>
The <b>context_handle</b> and <b>handle</b> attributes cannot be applied to the same type.</dd>
<dt>
<a name="_rpc_midl2186"></a><b>MIDL2186 : [handle] must not be specified on a type deriving from void or void *</b></dt>
<dd>
A type specified with the <b>handle</b> attribute can be transmitted over the network, but the type <b>void *</b> is not a transmissible type. The handle type must resolve to a type that derives from the valid base types.</dd>
<dt>
<a name="_rpc_midl2187"></a><b>MIDL2187 : parameter must have either [in], [out] or [in,out] in this mode. You must specify /ms_ext or /c_ext </b></dt>
<dd>
The DCE IDL compiler requires all parameters to have explicit directional parameters. To use the Microsoft extensions to DCE IDL, you cannot use the <b>/osf</b> switch which overrides <b>/ms_ext  </b>and <b>/c_ext</b>. </dd>
<dt>
<a name="_rpc_midl2188"></a><b>MIDL2188 : [transmit_as] must not be specified on void type </b></dt>
<dd>
The <b>transmit_as</b> attribute applies only to pointer types. Use the type <b>void *</b> in place of <b>void</b>. </dd>
<dt>
<a name="_rpc_midl2189"></a><b>MIDL2189 : void must be specified on the first and only parameter specification </b></dt>
<dd>
The keyword <b>void</b> incorrectly appears with other function parameters. To specify a function without parameters, the keyword <b>void</b> must be the only element of the parameter list, as in the following example: </dd>
</dl>

<pre><code>void Foo(void)
 </code></pre>

<dl>
<dt>
<a name="_rpc_midl2190"></a><b>MIDL2190 : [switch_is] must be specified only on a type deriving from a non-encapsulated union </b></dt>
<dd>
The <b>switch_is</b> keyword is incorrectly applied. It can only be used with non-encapsulated union types. For more information, see the syntax section in the reference entry for <a href="mi-laref_9jji.htm">non-encapsulated unions</a>. </dd>
<dt>
<a name="_rpc_midl2191"></a><b>MIDL2191 : stringable structures are not implemented in this version </b></dt>
<dd>
DCE IDL allows the attribute string to apply to a structure whose elements consist only of characters, bytes, or types that resolve to characters or bytes. This functionality is not supported in Microsoft RPC. The string attribute cannot be applied to the structure as a whole; it can be applied to each individual array. </dd>
<dt>
<a name="_rpc_midl2192"></a><b>MIDL2192 : switch type can only be integral, char, byte, boolean or enum </b></dt>
<dd>
The specified type does not resolve to a valid switch type. Use an integer, character, <b>byte</b>, <b>boolean</b>, or <b>enum</b> type, or a type that is derived from one of these types. </dd>
<dt>
<a name="_rpc_midl2193"></a><b>MIDL2193 : [handle] must not be specified on a type deriving from handle_t </b></dt>
<dd>
A handle type must be defined using one and only one of the handle types or attributes. Use the primitive type <b>handle_t </b>or the attribute <b>handle</b>, but not both. The user-defined handle type must be transmissible, but the <b>handle_t</b> type is not transmitted on the network.</dd>
<dt>
<a name="_rpc_midl2194"></a><b>MIDL2194 : parameter deriving from handle_t must not be an [out] parameter </b></dt>
<dd>
A handle of the primitive type <b>handle_t</b> is meaningful only to the side of the application in which it is defined. The type <b>handle_t</b> is not transmitted on the network.</dd>
<dt>
<a name="_rpc_midl2195"></a><b>MIDL2195 : attribute expression derives from [unique] or [ptr] pointer dereference </b></dt>
<dd>
Although the unique and full pointer attributes allow pointers to have null values, the expression that defines the size or length attribute must never have a null value. When pointers are used, MIDL constrains expressions to <b>ref</b> pointers.</dd>
<dt>
<a name="_rpc_midl2196"></a><b>MIDL2196 : "cpp_quote" requires /ms_ext </b></dt>
<dd>
The <b>cpp_quote</b> attribute is a Microsoft extension to DCE IDL. Do not use the MIDL compiler switch /<b>osf</b>, which overrides <b>/ms_ext</b>.</dd>
<dt>
<a name="_rpc_midl2197"></a><b>MIDL2197 : quoted uuid requires /ms_ext </b></dt>
<dd>
The ability to specify a UUID value within quotation marks is a Microsoft extension to DCE IDL. Do not use the MIDL compiler switch /<b>osf</b>, which overrides <b>/ms_ext</b>.</dd>
<dt>
<a name="_rpc_midl2198"></a><b>MIDL2198 : return type cannot derive from a non-encapsulated union </b></dt>
<dd>
The non-encapsulated union cannot be used as a function return type. To return the union type, specify the union type as an <b>out</b> or <b>in, out</b> parameter.</dd>
<dt>
<a name="_rpc_midl2199"></a><b>MIDL2199 : return type cannot derive from a conformant structure </b></dt>
<dd>
The size of the return type must be a constant. You cannot specify as a return type a structure that contains a conformant array even when the structure also includes its size specifier. To return the conformant structure, specify the structure as an <b>out</b> or <b>in, out</b> parameter.</dd>
<dt>
<a name="_rpc_midl2200"></a><b>MIDL2200 : [transmit_as] must not be applied to a type deriving from a generic handle </b></dt>
<dd>
In this release, the <b>handle</b> and <b>transmit_as</b> attributes cannot be combined on the same type. </dd>
<dt>
<a name="_rpc_midl2201"></a><b>MIDL2201 : [handle] must not be applied to a type that has [transmit_as] applied to it </b></dt>
<dd>
In this release, the <b>handle</b> and <b>transmit_as</b> attributes cannot be combined on the same type. </dd>
<dt>
<a name="_rpc_midl2202"></a><b>MIDL2202 : type specified for the const declaration is invalid </b></dt>
<dd>
<b>Const</b> declarations are limited to integer, character, wide-character, string, and boolean types.</dd>
<dt>
<a name="_rpc_midl2203"></a><b>MIDL2203 : operand to the sizeof operator is not supported </b></dt>
<dd>
The MIDL compiler supports the <b>sizeof </b>operation for simple types only.</dd>
<dt>
<a name="_rpc_midl2204"></a><b>MIDL2204 : this name already used as an const identifier name </b></dt>
<dd>
The identifier has previously been used to identify a constant in a <b>const</b> declaration. Change the name of one of the identifiers so that the identifiers are unique.</dd>
<dt>
<a name="_rpc_midl2205"></a><b>MIDL2205 : inconsistent redefinition of type error_status_t </b></dt>
<dd>
The type <b>error_status_t</b> must resolve to the type <b>unsigned long</b>. Other type definitions cannot be used.</dd>
<dt>
<a name="_rpc_midl2206"></a><b>MIDL2206 : [case] value out of range of switch type </b></dt>
<dd>
The value associated with the switch statement case is out of range for the specified switch type. For example, this error occurs when a long integer value is used in the case statement for a short integer type.</dd>
<dt>
<a name="_rpc_midl2207"></a><b>MIDL2207 : parameter deriving from wchar_t needs /ms_ext </b></dt>
<dd>
The wide-character type <b>wchar_t </b>is a Microsoft extension to DCE IDL. Do not use the MIDL compiler switch /<b>osf</b>, which overrides <b>/ms_ext</b></dd>
<dt>
<a name="_rpc_midl2208"></a><b>MIDL2208 : this interface has only callbacks </b></dt>
<dd>
Callbacks are valid only in the context of a remote procedure call. The interface must include at least one function prototype for a remote procedure call that does not include the <b>callback</b> attribute.</dd>
<dt>
<a name="_rpc_midl2209"></a><b>MIDL2209 : redundantly specified attribute; ignored </b></dt>
<dd>
The specified attribute has been applied more than once. Multiple instances of the same attribute are ignored.</dd>
<dt>
<a name="_rpc_midl2210"></a><b>MIDL2210 : context handle type used for an implicit handle </b></dt>
<dd>
A type that was defined using the <b>context_handle</b> attribute has been specified as the handle type in an <b>implicit_handle</b> attribute. The attributes cannot be combined in this way.</dd>
<dt>
<a name="_rpc_midl2211"></a><b>MIDL2211 : conflicting options specified for [allocate] </b></dt>
<dd>
The options specified for the ACF attribute <b>allocate </b>represent conflicting directives. For example, specify either the option <b>all_nodes</b> or the option <b>single_node</b>, but not both. </dd>
<dt>
<a name="_rpc_midl2212"></a><b>MIDL2212 : error while writing to file </b></dt>
<dd>
An error occurred while writing to the file. This condition can be caused by errors relating to disk space, file handles, file-access restrictions, and hardware failures.</dd>
<dt>
<a name="_rpc_midl2213"></a><b>MIDL2213 : no switch type found at definition of union, using the [switch_is] type </b></dt>
<dd>
The union definition does not include an explicit <b>switch_type</b> attribute. The type of the variable specified by the <b>switch_is</b> attribute is used as the switch type.</dd>
<dt>
<a name="_rpc_midl2214"></a><b>MIDL2214 : semantic check incomplete due to previous errors </b></dt>
<dd>
The MIDL compiler makes two passes over the input file(s) to resolve any forward declarations. Due to errors encountered during the first pass, checking for the second pass has not been performed. Unreported errors relating to forward declarations may still be present in the file.</dd>
<dt>
<a name="_rpc_midl2215"></a><b>MIDL2215 : handle parameter or return type is not supported on a [callback] procedure </b></dt>
<dd>
A callback procedure occurs in the context of a call from a client to the server and uses the same binding handle as the original call. Explicit binding-handle parameters or return types are not permitted in callback functions.</dd>
<dt>
<a name="_rpc_midl2216"></a><b>MIDL2216 : [ptr] does not support aliasing in this version</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2217"></a><b>MIDL2217 : parameter already defined as a context handle</b></dt>
<dd>
The parameter was previously defined as a context handle.</dd>
<dt>
<a name="_rpc_midl2218"></a><b>MIDL2218 : [context_handle] must not derive from handle_t </b></dt>
<dd>
The three handle characteristics&nbsp;—&nbsp;the type <b>handle_t</b>, the attribute <b>handle</b>, and the attribute <b>context_handle</b>&nbsp;—&nbsp;are mutually exclusive. Only one can be applied to a type or parameter at a time.</dd>
<dt>
<a name="_rpc_midl2219"></a><b>MIDL2219 : array size exceeds 65536 bytes </b></dt>
<dd>
On some Microsoft platforms, the maximum transmissible data size is 64K. Redesign your application so that all transmitted data fits within the maximum transmissible size.</dd>
<dt>
<a name="_rpc_midl2220"></a><b>MIDL2220 : struct size exceeds 65536 bytes</b></dt>
<dd>
On some Microsoft platforms, the maximum transmissible data size is 64K. Redesign your application so that all transmitted data fits within the maximum transmissible size.</dd>
<dt>
<a name="_rpc_midl2221"></a><b>MIDL2221 : field of a non-encapsulated union cannot be another non-encapsulated union</b></dt>
<dd>
Unions that are transmitted as part of a remote procedure call require an associated data item, the discriminant, that selects the union arm. Unions nested in other unions do not offer a discriminant; as a result, they cannot be transmitted in this form. Create a structure that consists of the union and its discriminant. </dd>
<dt>
<a name="_rpc_midl2222"></a><b>MIDL2222 : pointer attribute(s) applied on an embedded array; ignored </b></dt>
<dd>
A pointer attribute can be applied to an array only when the array is a top-level parameter. Other pointer attributes applied to arrays embedded in other data structures are ignored.</dd>
<dt>
<a name="_rpc_midl2223"></a><b>MIDL2223 : [allocate] is illegal on a type that has [transmit_as] applied to it </b></dt>
<dd>
The <b>transmit_as</b> and <b>allocate</b> attributes cannot both be applied to the same type. The <b>transmit_as</b> attribute distinguishes between presented and transmitted types, while the <b>allocate</b> attribute assumes that the presented type is the same as the transmitted type.</dd>
<dt>
<a name="_rpc_midl2224"></a><b>MIDL2224 : [switch_type] must be specified in this import mode</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2225"></a><b>MIDL2225 : [implicit_handle] type undefined; assuming primitive handle </b></dt>
<dd>
The handle type specified in the ACF is not defined in the IDL file. The MIDL compiler assumes that the handle type resolves to the primitive handle type <b>handle_t</b>. Add the <b>handle</b> attribute to the type definition if you want the handle to behave like a user-defined, or generic, handle.</dd>
<dt>
<a name="_rpc_midl2226"></a><b>MIDL2226 : array element must not derive from error_status_t </b></dt>
<dd>
In this release of Microsoft RPC, the type <b>error_status_t</b> can only appear as a parameter or a return type. It cannot appear in arrays.</dd>
<dt>
<a name="_rpc_midl2227"></a><b>MIDL2227 : [allocate] illegal on a type deriving from a primitive/generic/context handle </b></dt>
<dd>
By design, the ACF attribute <b>allocate</b> cannot be applied to handle types.</dd>
<dt>
<a name="_rpc_midl2228"></a><b>MIDL2228 : transmitted or presented type must not derive from error_status_t </b></dt>
<dd>
In this release of Microsoft RPC, the type <b>error_status_t</b> cannot be used with the <b>transmit_as</b> attribute.</dd>
<dt>
<a name="_rpc_midl2229"></a><b>MIDL2229 : discriminant of a union must not derive from a field with [ignore] applied to it </b></dt>
<dd>
A union used in a remote procedure call must be associated with another data item, called the discriminant, that selects the union arm. The discriminant must be transmitted. The <b>ignore</b> attribute cannot be applied to the union discriminant.</dd>
<dt>
<a name="_rpc_midl2230"></a><b>MIDL2230 : [nocode] must be specified with "/server none" in this mode </b></dt>
<dd>
Some DCE IDL compilers generate an error when the <b>nocode</b> attribute is applied to a procedure in an interface for which server stub files are being generated. Because the server must support all operations, <b>nocode</b> must not be applied to a procedure in this mode or you must use the MIDL compiler switch <b>/server none</b> to explicitly specify that no server routines are to be generated.</dd>
<dt>
<a name="_rpc_midl2231"></a><b>MIDL2231 : no remote procedures specified, no client/server stubs will be generated</b></dt>
<dd>
The provided interface does not have any remote procedures, so only header files will be generated. </dd>
<dt>
<a name="_rpc_midl2232"></a><b>MIDL2232 : too many default cases specified for encapsulated union </b></dt>
<dd>
An encapsulated union may only have one default: arm. </dd>
<dt>
<a name="_rpc_midl2233"></a><b>MIDL2233 : too many default interface specified for coclass</b></dt>
<dd>
A <b>coclass</b> may have at most two <b>default</b> members, one to represent the outgoing (source) interface or dispinterface, and one to represent the incoming (sink) interface or dispinterface.</dd>
<dt>
<a name="_rpc_midl2234"></a><b>MIDL2234 : items with [defaultvtable] must also have [source]</b></dt>
<dd>
The defaultvtable interface creates a second source interface for an object, one that lets sinks receive events through the VTBL.</dd>
<dt>
<a name="_rpc_midl2235"></a><b>MIDL2235 : union specification with no fields is illegal </b></dt>
<dd>
Unions must have at least one field. </dd>
<dt>
<a name="_rpc_midl2236"></a><b>MIDL2236 : value out of range </b></dt>
<dd>
The provided case value is out of the range of the switch type. </dd>
<dt>
<a name="_rpc_midl2237"></a><b>MIDL2237 : [context_handle] must be applied on a pointer type </b></dt>
<dd>
Context handles must always be pointer types. DCE specifies that all context handles must be typed as "void *". </dd>
<dt>
<a name="_rpc_midl2238"></a><b>MIDL2238 : return type must not derive from handle_t </b></dt>
<dd>
Handle_t may not be returned. </dd>
<dt>
<a name="_rpc_midl2239"></a><b>MIDL2239 : [handle] must not be applied to a type deriving from a context handle </b></dt>
<dd>
A type may not be both a context handle and a generic handle. </dd>
<dt>
<a name="_rpc_midl2240"></a><b>MIDL2240 : field deriving from an \"int\" must have size specifier \"small\", \"short\", or \"long\" with the \"int\" </b></dt>
<dd>
The use of "int" is not remotableon 16-bit systems, since the size of "int" may be different across machines. </dd>
<dt>
<a name="_rpc_midl2241"></a><b>MIDL2241 : field must not derive from a void or void *</b></dt>
<dd>
Void and void * are not remotable types. </dd>
<dt>
<a name="_rpc_midl2242"></a><b>MIDL2242 : field must not derive from a struct containing bit-fields </b></dt>
<dd>
bit fields in structs are not remotable. </dd>
<dt>
<a name="_rpc_midl2243"></a><b>MIDL2243 : field must not derive from a non-rpcable union </b></dt>
<dd>
A union must be specified as a non-encapsulated union or encapsulated union in order to be remoted. Ordinary C unions lack the discriminant needed to remote the union. </dd>
<dt>
<a name="_rpc_midl2244"></a><b>MIDL2244 : field must not derive from a pointer to a function </b></dt>
<dd>
Pointers to functions may not be remoted. </dd>
<dt>
<a name="_rpc_midl2245"></a><b>MIDL2245 : cannot use [fault_status] on both a parameter and a return type </b></dt>
<dd>
[fault_status] may only be used once per procedure, although [comm_status] may be used independently. </dd>
<dt>
<a name="_rpc_midl2246"></a><b>MIDL2246 : return type too complicated for /Oi, using /Os </b></dt>
<dd>
Large by-value return types may only be handled by /Os optimization stubs. The stubs for this routine will be generated using /Os optimization. </dd>
<dt>
<a name="_rpc_midl2247"></a><b>MIDL2247 : generic handle type too large for /Oi, using /Os </b></dt>
<dd>
Large by-value generic handle types may only be handled by /Os optimization stubs. The stubs for this routine will be generated using /Os optimization. </dd>
<dt>
<a name="_rpc_midl2248"></a><b>MIDL2248 : [allocate(all_nodes)] on an [in,out] parameter may orphan the original memory </b></dt>
<dd>
Use of [allocate(all_nodes)] on an [in,out] parameter must re-allocate contiguous memory for the [out] direction, thus orphaning the [in] parameter. This usage is not recommended. </dd>
<dt>
<a name="_rpc_midl2249"></a><b>MIDL2249 : cannot have a [ref] pointer as a union arm </b></dt>
<dd>
Ref pointers must always point to valid memory, but an [in,out] union with a ref pointer may return a ref pointer when the [in] direction used another type. </dd>
<dt>
<a name="_rpc_midl2250"></a><b>MIDL2250 : return of context handles not supported for /Oi modes, using /Os</b></dt>
<dd>
MIDL doesn't support context handles in the fully interpreted optimization modes. Switching to mixed-mode optimization.</dd>
<dt>
<a name="_rpc_midl2251"></a><b>MIDL2251 : use of [comm_status] or [fault_status] not supported for /Oi, using /Os </b></dt>
<dd>
[comm_status] and [fault_status] may only be handled by /Os optimization stubs. The stubs for this routine will be generated using /Os optimization. </dd>
<dt>
<a name="_rpc_midl2252"></a><b>MIDL2252 : use of an unknown type for [represent_as] not supported for /Oi, using /Os </b></dt>
<dd>
Use of a represent_as with a local type that is not defined in the idl file or an imported idl file may only be handled by /Os optimization stubs. The stubs for this routine will be generated using /Os optimization. </dd>
<dt>
<a name="_rpc_midl2253"></a><b>MIDL2253 : array types with [transmit_as] or [represent_as] not supported on return type for /Oi, using /Os</b></dt>
<dd>
Returning an array with [transmit_as] or [represent_as] applied may only be handled by /Os optimization stubs. The stubs for this routine will be generated using /Os optimization. </dd>
<dt>
<a name="_rpc_midl2254"></a><b>MIDL2254 : array types with [transmit_as] or [represents_as] not supported pass-by-value for /Oi modes, using /Os</b></dt>
<dd>
This action is not supported for fully-interpreted optimization. Switching to mixed-mode optimization.</dd>
<dt>
<a name="_rpc_midl2255"></a><b>MIDL2255 : [callback] requires /ms_ext</b></dt>
<dd>
[callback] is a Microsoft extension and requires that the /ms_ext switch be enabled. Do not compile with /<b>osf</b>, which overrides /<b>ms_ext</b>. </dd>
<dt>
<a name="_rpc_midl2256"></a><b>MIDL2256 : circular interface dependency</b></dt>
<dd>
This interface uses itself (directly or indirectly) as a base interface. </dd>
<dt>
<a name="_rpc_midl2257"></a><b>MIDL2257 : only IUnknown may be used as the root interface</b></dt>
<dd>
Currently, all interfaces must have IUnknown as the root interface. </dd>
<dt>
<a name="_rpc_midl2258"></a><b>MIDL2258 : [IID_IS] may only be applied to pointers to interfaces</b></dt>
<dd>
[iid_is] can only be applied to interface pointers, although they may be specified as IUnknown *. </dd>
<dt>
<a name="_rpc_midl2259"></a><b>MIDL2259 : interfaces may only be used in pointer-to-interface constructs</b></dt>
<dd>
Interface names may not be used except as base interfaces or interface pointers. </dd>
<dt>
<a name="_rpc_midl2260"></a><b>MIDL2260 : interface pointers must have a UUID/IID</b></dt>
<dd>
The base type of the iid_is expression must be a UUID/GUID/IID type. </dd>
<dt>
<a name="_rpc_midl2261"></a><b>MIDL2261 : definitions and declarations outside of interface body requires /ms_ext</b></dt>
<dd>
Putting declarations and definitions outside of any interface body is a Microsoft extension and requires the use of the /ms_ext switch. </dd>
<dt>
<a name="_rpc_midl2262"></a><b>MIDL2262 : multiple interfaces in one file requires /ms_ext</b></dt>
<dd>
Using multiple interfaces in a single idl file is a Microsoft extension and is not available when you compile in <b>/osf</b> mode. </dd>
<dt>
<a name="_rpc_midl2263"></a><b>MIDL2263 : only one of [implicit_handle], [auto_handle], or [explicit_handle] allowed</b></dt>
<dd>
Each interface may only have one of the above.</dd>
<dt>
<a name="_rpc_midl2264"></a><b>MIDL2264 : [implicit_handle] references a type which is not a handle</b></dt>
<dd>
Implicit handles must be of one of the handle types. </dd>
<dt>
<a name="_rpc_midl2265"></a><b>MIDL2265 : [object] procs may only be used with "/env win32 or /env powermac"</b></dt>
<dd>
[object] interfaces may not be used with 16-bit environments. </dd>
<dt>
<a name="_rpc_midl2266"></a><b>MIDL2266 : [callback] with -env dos/win16 not supported for /Oi, using /Os</b></dt>
<dd>
Callbacks in 16-bit environments may only be handled by /Os optimization stubs. The stubs for this routine will be generated using /Os optimization. </dd>
<dt>
<a name="_rpc_midl2267"></a><b>MIDL2267 : float/double not supported as top-level parameter for /Oi, using /Os</b></dt>
<dd>
Float and double as parameters may only be handled by /Os optimization stubs. The stubs for this routine will be generated using /Os optimization. Float and double within structs/arrays/etc. May still be handled with /Oi. </dd>
<dt>
<a name="_rpc_midl2268"></a><b>MIDL2268 : pointers to context handles may not be used as return values</b></dt>
<dd>
Context handles must be used as direct return values, not indirect return values. </dd>
<dt>
<a name="_rpc_midl2269"></a><b>MIDL2269 : procedures in an object interface must return an HRESULT</b></dt>
<dd>
All non-[local] procedures in an object interface must return an HRESULT/SCODE.</dd>
<dt>
<a name="_rpc_midl2270"></a><b>MIDL2270 : duplicate UUID</b></dt>
<dd>
UUIDs must be unique. </dd>
<dt>
<a name="_rpc_midl2271"></a><b>MIDL2271 : [object] interfaces must derive from other [object] interfaces</b></dt>
<dd>
Interface inheritance is only allowed using object interfaces. </dd>
<dt>
<a name="_rpc_midl2272"></a><b>MIDL2272 : interfaces must derive from another interface</b></dt>
<dd>
Object interfaces must derive from Iunknown or some other base OLE interface.</dd>
<dt>
<a name="_rpc_midl2273"></a><b>MIDL2273 : [IID_IS] expression must be a pointer to IID structure</b></dt>
<dd>
The base type of the iid_is expression must be a UUID/GUID/IID type. </dd>
<dt>
<a name="_rpc_midl2274"></a><b>MIDL2274 : [call_as] type must be a [local] procedure</b></dt>
<dd>
Tthe target of a call_as, if defined, must have [local] applied. </dd>
<dt>
<a name="_rpc_midl2275"></a><b>MIDL2275 : undefined [call_as] must not be used in an object interface </b></dt>
<dd>
You must define the target of a [<b>call_as</b>] type. Make sure you have supplied <b>call_as</b> routines for both the  calling and called applications.</dd>
<dt>
<a name="_rpc_midl2276"></a><b>MIDL2276 : [auto_handle] may not be used with [encode] or [decode]</b></dt>
<dd>
[encode] and [decode] may only be used with explicit handles or implicit handles. </dd>
<dt>
<a name="_rpc_midl2277"></a><b>MIDL2277 : normal procs are not allowed in an interface with [encode] or [decode]</b></dt>
<dd>
Interfaces containing [encode] or [decode] procedures may not also have remoted procedures. </dd>
<dt>
<a name="_rpc_midl2278"></a><b>MIDL2278 : top-level conformance or variance not allowed with [encode] or [decode]</b></dt>
<dd>
Types that have top-level conformance or variance may not use type serialization, since there is no way to provide sizing/lengthing. Structs containing them are, however, allowed. </dd>
<dt>
<a name="_rpc_midl2279"></a><b>MIDL2279 : [out] parameters may not have \"const\"</b></dt>
<dd>
Since an [out] parameter is altered, it may not have const. </dd>
<dt>
<a name="_rpc_midl2280"></a><b>MIDL2280 : return values may not have \"const\"</b></dt>
<dd>
Since a function value is set, it must not have const. </dd>
<dt>
<a name="_rpc_midl2281"></a><b>MIDL2281 : invalid use of retval attribute</b></dt>
<dd>
Check to make sure you have not used the <b>optional</b> attribute and that the <b>retval </b>parameter is the last parameter in the list.</dd>
<dt>
<a name="_rpc_midl2282"></a><b>MIDL2282 : multiple calling conventions illegal</b></dt>
<dd>
Only one calling convention may be applied to a single procedure. </dd>
<dt>
<a name="_rpc_midl2283"></a><b>MIDL2283 : attribute illegal on [object] procedure</b></dt>
<dd>
The above attribute only applies to procedures in interfaces that do not have [object]. </dd>
<dt>
<a name="_rpc_midl2284"></a><b>MIDL2284 : [out] interface pointers must use double indirection</b></dt>
<dd>
Since the altered value is the pointer to the interface, there must be another level of indirection above it to allow it to be returned. </dd>
<dt>
<a name="_rpc_midl2285"></a><b>MIDL2285 : procedure used twice as the caller in [call_as]</b></dt>
<dd>
A given [local] procedure may only be used once as the target of a [call_as], in order to avoid name clashes. </dd>
<dt>
<a name="_rpc_midl2286"></a><b>MIDL2286 : [call_as] target must have [local] in an object interface</b></dt>
<dd>
The target of a call_as must be a defined, [local] procedure in the current interface. </dd>
<dt>
<a name="_rpc_midl2287"></a><b>MIDL2287 : [code] and [nocode] may not be used together</b></dt>
<dd>
These two attributes are contradictory, and may not be used together. </dd>
<dt>
<a name="_rpc_midl2288"></a><b>MIDL2288 : [maybe] procedures may not have a return value or [out] params</b></dt>
<dd>
Since [maybe] procedures may never return, there is no way to get returned values. </dd>
<dt>
<a name="_rpc_midl2289"></a><b>MIDL2289 : pointer to function must be used</b></dt>
<dd>
Although function type definitions are allowed in /c_ext mode, they may only be used as pointers to functions (and may never be remoted). </dd>
<dt>
<a name="_rpc_midl2290"></a><b>MIDL2290 : functions may not be passed in an RPC operation</b></dt>
<dd>
Functions and function pointers may not be remoted. </dd>
<dt>
<a name="_rpc_midl2291"></a><b>MIDL2291 : hyper/double not supported as return value for /Oi, using /Os</b></dt>
<dd>
Hyper and double return values may only be handled by /Os optimization stubs. The stubs for this routine will be generated using /Os optimization. </dd>
<dt>
<a name="_rpc_midl2292"></a><b>MIDL2292 : #pragma pack( pop ) without matching #pragma pack( push )</b></dt>
<dd>
#pragma pack(push) and #pragma pack(pop) must appear in matching pairs. At least one too many #pragma pack(push)'s were specified. </dd>
<dt>
<a name="_rpc_midl2293"></a><b>MIDL2293 : stringable structure fields must be byte/char/wchar_t</b></dt>
<dd>
[string] may only be applied to a struct whose fields are all of type byte, or a type definition equivalent of byte. </dd>
<dt>
<a name="_rpc_midl2294"></a><b>MIDL2294 : [notify] not supported for /Oi, using /Os</b></dt>
<dd>
The [notify] attribute may only be processed by /Os optimization stubs. </dd>
<dt>
<a name="_rpc_midl2295"></a><b>MIDL2295 : handle parameter or return type is not supported on a procedure in an [object] interface</b></dt>
<dd>
Handles may not be used with [object] interfaces. </dd>
<dt>
<a name="_rpc_midl2296"></a><b>MIDL2296 : ANSI C only allows the leftmost array bound to be unspecified</b></dt>
<dd>
In a conformant array, ANSI C only allows the leftmost ( most significant ) array bound to be unspecified. If multiple dimensions are conformant, MIDL will attempt to put a "1" in the other conformant dimensions. If the other dimensions are defined in a different typedef, this may not be possible. Try putting all the array dimensions on the use of the array to avoid this. In any case, beware of the array indexing calculations done by the compiler; you may need to do your own calculations using the actual sizes. </dd>
<dt>
<a name="_rpc_midl_2297"></a><b>MIDL 2297 : by-value union parameters not supported for /Oi modes, using /Os</b></dt>
<dd>
This action is not supported for fully-interpreted optimization. Switching to mixed-mode optimization.</dd>
<dt>
<a name="_rpc_midl2298"></a><b>MIDL2298 : [version] attribute is ignored on an [object] interface</b></dt>
<dd>
An object interface must have a </dd>
<dt>
<a name="_rpc_midl2299"></a><b>MIDL2299 : [size_is] or [max_is] attribute is invalid on a fixed array</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2300"></a><b>MIDL2300 : [encode] or [decode] are invalid in an [object] interface</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2301"></a><b>MIDL2301 :  [encode] or [decode] on a type requires /ms_ext</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2302"></a><b>MIDL2302 : int not supported on /env win16 or /env dos</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2303"></a><b>MIDL2303 : [bstring] may only be applied to a pointer to char or whchar_t</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2304"></a><b>MIDL2304 : attribute invalid on a proc in an [object] interface</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2305"></a><b>MIDL2305 : attribute invalid on an [object] interface</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2306"></a><b>MIDL2306 : too many parameters or stack too big for /Oi modes, using /Os</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2307"></a><b>MIDL2307 : no attributes on ACF file typedef so no effect</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2308"></a><b>MIDL2308 : calling conventions other than __stdcall or __cdecl not supported for Oi modes, using /Os</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2309"></a><b>MIDL2309 : more than 64 delegated methods not supported</b></dt>
<dt>
<a name="_rpc_midl2310"></a><b>MIDL2310 : auto handles not supported with /env mac or /env powermac</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2311"></a><b>MIDL2311 : statements outside library block are illegal in mktyplib compatibility mode</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2312"></a><b>MIDL2312 : illegal syntax unless using mktyplib compatibility mode</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2313"></a><b>MIDL2313 : illegal definition, must use typedef in mktyplib compatibility mode</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2314"></a><b>MIDL2314 : explicit pointer attribute [ptr] [ref] ignored for interface pointers</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2315"></a><b>MIDL2315 : /Oi modes not implemented for PowerMac, switching to /Os</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2316"></a><b>MIDL2316 : illegal expression type used in attribute</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2317"></a><b>MIDL2317 : illegal type used in pipe</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2318"></a><b>MIDL2318 : procedure uses pipes, using /Oicf</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2319"></a><b>MIDL2319 : procedure uses pipes, using /Oicf</b></dt>
<dt>
<a name="_rpc_midl2320"></a><b>MIDL2320 : procedure's parameters are too complex to include pipes - simplify other parameters or don't use pipes</b></dt>
<dt>
<a name="_rpc_midl2321"></a><b>MIDL2321 : pipe cannot be a member of a struct or a union, nor an array element</b></dt>
<dt>
<a name="_rpc_midl2322"></a><b>MIDL2322 :  invalid pipe usage</b></dt>
<dd>
</dd>
<dt>
<a name="_rpc_midl2323"></a><b>MIDL2323 : feature requires the advanced interpreted optimization option; use /Oicf</b></dt>
<dt>
<a name="_rpc_midl2324"></a><b>MIDL2324 : feature requires the advanced interpreted optimization option; use /Oicf</b></dt>
<dt>
<a name="_rpc_midl2329"></a><b>MIDL2329 : the optimization option is being phased out, use /Oic:</b></dt>
<dt>
<a name="_rpc_midl2330"></a><b>MIDL2330 : the optimization option is being phased out, use /Oicf</b></dt>
<dt>
<a name="_rpc_midl2331"></a><b>MIDL2331 : the optimization option is being phased out, use /ic</b></dt>
<dt>
<a name="_rpc_midl2332"></a><b>MIDL2332 : the optimization option is being phased out, use /icf</b></dt>
<dt>
<a name="_rpc_midl2333"></a><b>MIDL2333 : the /old and /new switches are obsolete, use /oldtlb and /newtlb</b></dt>
<dt>
<a name="_rpc_midl2334"></a><b>MIDL2334 : illegal argument value</b></dt>
<dt>
<a name="_rpc_midl2335"></a><b>MIDL2335 : illegal expression type in constant</b></dt>
<dt>
<a name="_rpc_midl2336"></a><b>MIDL2336 : illegal expression type in enum</b></dt>
<dt>
<a name="_rpc_midl2337"></a><b>MIDL2337 : unsatisfied forward declaration</b></dt>
<dt>
<a name="_rpc_midl2338"></a><b>MIDL2338 :switches are contradictory</b></dt>
<dt>
<a name="_rpc_midl2339"></a><b>MIDL2339 : MIDL cannot generate HOOKOLE information for the non-rpc-able union</b></dt>
<dt>
<a name="_rpc_midl2340"></a><b>MIDL2340 : no case expression found for union</b></dt>
<dt>
<a name="_rpc_midl2341"></a><b>MIDL2341 : [user_marshal] and [wire_marshal] not supported with /Oi and /Oic flags, use /Os or /Oicf</b></dt>
<dd>
The user_marshal and wire_marshal attributes require the specific optimization features available only in /Oicf (codeless proxy with fast format strings)or /Os (mixed mode marshaling).</dd>
<dt>
<a name="_rpc_midl2342"></a><b>MIDL2342 : pipes can't be used with data serialization, i.e. [encode] and/or [decode]</b></dt>
<dt>
<a name="_rpc_midl2343"></a><b>MIDL2343 : all pipe interface pointers must use single indirection</b></dt>
<dt>
<a name="_rpc_midl2344"></a><b>MIDL2344 : [iid_is()] cannot be used with a pipe interface pointer</b></dt>
<dt>
<a name="_rpc_midl2345"></a><b>MIDL2345 : invalid or inapplicable /lcid switch: </b></dt>
<dt>
<a name="_rpc_midl2346"></a><b>MIDL2346 : the specified lcid is different from previous specification</b></dt>
<dt>
<a name="_rpc_midl2347"></a><b>MIDL2347 : importlib is not allowed outside of a library block</b></dt>
<dt>
<a name="_rpc_midl2348"></a><b>MIDL2348 : invalid floating point value</b></dt>
<dt>
<a name="_rpc_midl2349"></a><b>MIDL2349 : invalid member</b></dt>
<dt>
<a name="_rpc_midl2350"></a><b>MIDL2350 : possible invalid member</b></dt>
<dt>
<a name="_rpc_midl2351"></a><b>MIDL2351 : mismatch in pipe and interface types</b></dt>
<dt>
<a name="_rpc_midl9008"></a><b>MIDL9008: internal compiler problem &lt;system error code&gt; - the compiler cannot continue for an unknown reason. See documentation for suggestions on how to find a workaround.</b></dt>
<dd>
The compiler could not continue and the cause of the error is unknown. The hexadecimal error number is a Windows NT or Windows 95 system-error identifier. The compile may have failed because of an external problem, such as an out-of-memory condition. In that case, you may find more information regarding your particular error in the winerror.h or ntstatus.h files. 
<p>
There are two situations that usually generate this error:

<p>
<font face="Symbol">·</font>The MIDL compiler failed to recover after detecting an error in the IDL file. If MIDL returned any error messages about your IDL file, try fixing them and recompiling. If there are no error messages, the compiler may have failed before it could report an error. Look for a syntax error on the line for which the internal compiler error is reported.

<p>
<font face="Symbol">·</font>The MIDL compiler could not generate correct code under a specified optimization option. Try changing compiler modes, compiling in mixed-mode optimization (/Os), or removing all optimizations. Or, recompile using the /no_format_opt flag to suppress MIDL's default optimization of procedure and type descriptors.

<p>
Occasionally this error occurs even when the IDL file is correct and no optimization options are being used. If this is the case, try rewriting the section of code in the vicinity of where the error was reported by removing any recent modifications, simplifying or rearranging data types, changing prototypes, or begin to comment out portions of the IDL file to locate the problem code. 

<p>
If none of these options works, or if you think the problem may be related to a bug in MIDL.EXE, please notify Microsoft, giving all the relevant details.
</dd>
</dl>

<p>
</p>
<p>&nbsp;</p></body>
</HTML>

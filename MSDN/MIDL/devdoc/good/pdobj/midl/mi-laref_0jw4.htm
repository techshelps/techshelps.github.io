<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>const</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_const"></a>const</h1>
<p>
<b>const</b> <i>const-type identifier</i> <b>=</b> <i>const-expression</i><b> ;</b></p>
<p>
/* IDL file <b>typedef</b> syntax */<br>
<b>[ typedef</b> [ , <i>type-attribute-list</i> ] <b>]</b> <b>const</b> <i>const-type declarator-list</i><b>;<br>
[ typedef</b> [ , <i>type-attribute-list</i> ] <b>]</b> <i>pointer-type </i><b>const</b> <i>declarator-list</i><b>;</b></p>
<p>
[ <b>[ </b><i>function-attr-list</i> <b>] </b>] <i>type-specifier </i>[ <i>ptr-decl</i> ] <i>function-name</i><b>(</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;[ <b>[ </b><i>parameter-attribute-list</i> <b>] </b>] <b>const</b> <i>const-type </i>[<i>declarator</i>]<b>,</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;[ <b>[ </b><i>parameter-attribute-list</i> <b>] </b>] <i>pointer-type </i><b>const</b> [<i>declarator</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>,</b> <b>...</b><br>
<b>);</b>
<dl>
<dt>
<i>const-type</i></dt>
<dd>
Specifies a valid MIDL integer, character, string, or boolean type. Valid MIDL types include <b>small</b>, <b>short</b>, <b>long</b>, <b>char</b>, <b>char *</b>, <b>wchar_t</b>, <b>wchar_t *</b>, <b>byte</b>, <b>byte</b>&nbsp;<b>*</b>, and <b>void *</b>. The integer and character types can be <b>signed</b> or <b>unsigned</b>.</dd>
<dt>
<i>identifier</i></dt>
<dd>
Specifies a valid MIDL identifier. Valid MIDL identifiers consist of up to 31 alphanumeric and/or underscore characters and must start with an alphabetic or underscore character.</dd>
<dt>
<i>const-expression</i></dt>
<dd>
Specifies an expression, identifier, or numeric or character constant appropriate for the specified type: constant integer literals or constant integer expressions for integer constants; boolean expressions that can be computed at compilation for <b>boolean</b> types; single-character constants for <b>character</b> types; and string constants for <b>string</b> types. The <b>void *</b> type can be initialized only to NULL.</dd>
<dt>
<i>type-attribute-list</i></dt>
<dd>
Specifies one or more attributes that apply to the type.</dd>
<dt>
<i>pointer-type</i></dt>
<dd>
Specifies a valid MIDL pointer type.</dd>
<dt>
<i>declarator </i>and<i> declarator-list</i></dt>
<dd>
Specifies standard C declarators, such as identifiers, pointer declarators, and array declarators. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_pointers">
</object><a href=JavaScript:alink_1.Click()><b>pointers</b></a> and <a href="mi-laref_0vzl.htm"><b>arrays</b></a>. The <i>declarator-list</i> consists of one or more declarators, separated by commas. The parameter-name identifier in the function declarator is optional. </dd>
<dt>
<i>function-attr-list</i></dt>
<dd>
Specifies zero or more attributes that apply to the function. Valid function attributes are <b>callback</b>, <b>local</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>string</b>, <b>ignore</b>, and <b>context_handle</b>.</dd>
<dt>
<i>type-specifier</i></dt>
<dd>
Specifies a <b>base_type</b>, <b>struct</b>, <b>union</b>, <b>enum</b> type, or type identifier. An optional storage specification can precede <i>type-specifier</i>.</dd>
<dt>
<i>ptr-decl</i></dt>
<dd>
Specifies zero or more pointer declarators. A pointer declarator is the same as the pointer declarator used in C. It is constructed from the <b>*</b> designator, modifiers such as <b>far</b>, and the qualifier <b>const</b>.</dd>
<dt>
<i>function-name</i></dt>
<dd>
Specifies the name of the remote procedure.</dd>
<dt>
<i>parameter-attribute-list</i></dt>
<dd>
Specifies zero or more directional attributes, field attributes, usage attributes, and pointer attributes appropriate for the specified parameter type. Separate multiple attributes with commas.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>const void *  p1        = NULL; 
const char    my_char1  = 'a'; 
const char    my_char2  = my_char1; 
const wchar_t my_wchar3 = L'a'; 
const wchar_t * pszNote = L"Note"; 
const unsigned short int x = 123; 
 
typedef [string] const char *LPCSTR; 
 
HRESULT GetName([out] wchar_t * const pszName ); 
 </code></pre>
<h4>Remarks</h4>
<p>
MIDL allows you to declare constant integer, character, string, and boolean types in the interface body of the IDL file. You can use the <b>const</b> keyword to modify the type of a type declaration or the type of a function parameter. <b>Const</b> type declarations are reproduced in the generated header file as <b>#define</b> directives.</p>
<p>
DCE IDL compilers do not support constant expressions. Therefore this feature is not available when you use the MIDL compiler /<b>osf</b> switch.</p>
<p>
A previously defined constant can be used as the assigned value of a subsequent constant. The value of a constant integral expression is automatically converted to the respective integer type in accordance with C conversion rules.</p>
<p>
The value of a character constant must be a single-quoted ASCII character. When the character constant is the single-quote character itself ('), the backslash character (\) must precede the single-quote character, as in \'.</p>
<p>
The value of a character-string constant (<b>char</b> <b>*</b>) must be a double-quoted string. Within a string, the backslash (<b>\</b>) character must precede a literal double-quote character ( <b>"</b> ), as in <b>\"</b>. Within a string, the backslash character (<b>\</b>) represents an escape character. String constants can consist of up to 255 characters.</p>
<p>
The value NULL is the only valid value for constants of type <b>void</b> <b>*</b>. Any attributes associated with the <b>const</b> declaration are ignored.</p>
<p>
The MIDL compiler does not check for range errors in <b>const</b> initialization. For example, when you specify "const short x = 0xFFFFFFFF;" the MIDL compiler does not report an error and the initializer is reproduced in the generated header file.</p>
<h4>See Also</h4>
<p>
<a href="mi-laref_20du.htm"><b>base_types</b></a>, <a href="mi-laref_49v0.htm"><b>IDL</b></a>, <a href="mi-cmdln_4tk6.htm"><b>/osf</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>allocate</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_allocate"></a>allocate</h1>
<p>
<b>typedef [allocate (</b><i>allocate-option-list</i><b>) </b>[<b>, </b><i>type-attribute-list</i>] <b>] </b><i>type-name</i><b>;</b>
<dl>
<dt>
<i>allocate-option-list</i></dt>
<dd>
Specifies one or more memory-allocation options. Select one of either <b>single_node</b> or <b>all_nodes</b>, or one of either <b>free</b> or <b>dont_free</b>, or one from each group. When you specify more than one option, separate the options with commas.</dd>
<dt>
<i>type-attribute-list</i></dt>
<dd>
Specifies other optional ACF type attributes. When you specify more than one type attribute, separate the options with commas.</dd>
<dt>
<i>type-name</i></dt>
<dd>
Specifies a type defined in the IDL file.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>/* ACF file */ 
typedef [allocate(all_nodes, dont_free)] PTYPE1; 
typedef [allocate(all_nodes)] PTYPE2; 
typedef [allocate(dont_free)] PTYPE3; 
 </code></pre>
<h4>Remarks</h4>
<p>
The ACF type attribute <b>allocate</b> lets you customize memory allocation and deallocation for a type defined in the IDL file. These are the valid options:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=20%>Option</th>
<th align=left width=80%>Description</th>
</tr>
<tr valign=top>
<td width=20%><b>all_nodes</b></td>
<td width=80%>Makes one call to allocate and free memory for all nodes.</td>
</tr>
<tr valign=top>
<td width=20%><b>single_node</b></td>
<td width=80%>Makes many individual calls to allocate and free each node of memory.</td>
</tr>
<tr valign=top>
<td width=20%><b>free</b></td>
<td width=80%>Frees memory on return from the server stub.</td>
</tr>
<tr valign=top>
<td width=20%><b>dont_free</b></td>
<td width=80%>Does not free memory on return from the server stub.</td>
</tr>
</table><br>
<p>
By default, the stubs may allocate storage for data referenced by a unique or full pointer by calling <b>midl_user_allocate</b> and <b>midl_user_free</b> individually for each pointer.</p>
<p>
You can optimize the speed of your application by specifying the option <b>all_nodes</b>. This option directs the stub to compute the size of all memory referenced through the pointer of the specified type and to make a single call to <b>midl_user_allocate</b>. The stub releases the memory by making one call to <b>midl_user_free</b>.</p>
<p>
The <b>dont_free</b> option directs the MIDL compiler to generate a server stub that does not call <b>midl_user_free</b> for the specified type. The <b>dont_free</b> option allows the pointer structures to remain accessible to the server application after the remote procedure call has completed and returned to the client.</p>
<p>
Note that when applied to types used for <b>in</b>, <b>out</b> parameters, any parameter that is a pointer to a type qualified with the <b>all_nodes</b> option will cause a reallocation when the data is unmarshalled. It is the responsibility of the application to free the previously allocated memory corresponding to this parameter. For example:</p>
<pre><code>typedef struct foo 
{ 
[string] char * PFOO;<b> </b> 
} * PFOO<b> </b> 
HRESULT proc1 ( [in,out] PFOO * ppfoo); 
 </code></pre>
<p>
The data type PFOO will be reallocated in the <b>out</b> direction by the stub before "unmarshalling." Therefore, the previously allocated area must be freed by the application or a memory leak will occur.</p>
<h4>See Also</h4>
<p>
<a href="mi-laref_1e5o.htm"><b>ACF</b></a>, <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_midl_user_allocate">
</object><a href=JavaScript:alink_1.Click()><b>midl_user_allocate</b></a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_midl_user_free">
</object><a href=JavaScript:alink_2.Click()><b>midl_user_free</b></a>, <a href="mi-laref_9l7q.htm"><b>typedef</b></a></p>
<p>&nbsp;</p></body>
</HTML>

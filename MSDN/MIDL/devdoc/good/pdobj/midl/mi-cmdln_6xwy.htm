<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>/error</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_error"></a>/error</h1>
<p>
<b>midl /error { allocation | stub_data | ref | bounds_check </b>| <b>none | all }</b>
<dl>
<dt>
<b>allocation </b></dt>
<dd>
Checks whether <b>midl_user_allocate</b> returns a null value, indicating an out-of-memory error.</dd>
<dt>
<b>stub_data</b></dt>
<dd>
Generates a stub that catches unmarshalling exceptions on the server side and propogates them back to the client.</dd>
<dt>
<b>ref</b></dt>
<dd>
Generates code that checks at run time to ensure that no NULL [ref] pointers are being passed to the client stubs and raises an RPC_X_NULL_REF_POINTER exception if it finds any.</dd>
<dt>
<b>bounds_check</b></dt>
<dd>
Checks size of conformant-varying and varying arrays against transmission length specification.</dd>
<dt>
<b>none</b></dt>
<dd>
Performs no error checking.</dd>
<dt>
<b>all</b></dt>
<dd>
Performs all error checking.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>midl /error allocation filename.idl 
midl /error none filename.idl 
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>/error</b> switch selects the amount of error checking to be performed by the generated stub files.</p>
<p>
By default, the MIDL compiler generates code that checks for enum and certain memory-access errors. The enum errors that are checked are truncation errors caused by conversion between <b>long enum</b> types (32-bit integers) and <b>short enum</b> types (the network-data representation of <b>enum</b>) and the number of identifiers in an enumeration exceeding 32,767. The memory-access error checking is for pointers that exceed the end of the buffer in marshalling code and for conformant arrrays whose size is less than zero. Use the /<b>error bounds_check</b> flag to check for other invalid array bounds. </p>
<p>
When you specify <b>/error allocate</b>, the stubs include code that raises an exception when <b>midl_user_allocate</b> returns 0.</p>
<p>
The <b>/error stub_data</b> option prevents client data from crashing the server during unmarshalling; in effect providing a more robust method of handling the unmarshalling operation.</p>
<h4>See Also</h4>
<p>
<a href="mi-cmdln_2xbs.htm">General MIDL Command-line Syntax</a></p>
<p>&nbsp;</p></body>
</HTML>

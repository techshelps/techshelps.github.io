<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>importlib</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_importlib"></a>importlib</h1>
<p>
<b>library </b>(<i>library-name</i>)<b>{<i> </i>importlib</b>(<i>file-to-import</i>); . . . <b>}</b>
<dl>
<dt>
<i>file-to-import</i></dt>
<dd>
The name and location of the imported file at MIDL compile-time.
</dd>
</dl>
<h4>Example</h4>
<pre><code>library BrowseHelper 
{ 
    importlib("stdole32.tlb"); 
    importlib("mydisp.tlb"); 
//remainder of library definition 
}; 
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>importlib</b> directive makes types that have already been compiled into another type library available to the type library being created. All <b>importlib</b> directives must precede the other type descriptions in the library. Note that the imported library, as well as the generated library, must be distributed with the application so that it is available at run time.</p>
<p>
In most cases you should use the MIDL <a href="mi-laref_156c.htm"><b>import</b></a> directive to reference definitions from another .IDL file in your .IDL file. This method provides your type library with all the information from the original file, whereas <b>importlib </b>only brings in the contents of the type library. </p>
<p>
<b>Note</b>&nbsp;&nbsp;The <b>importlib</b> directive makes any type defined in the imported library accessible from within the library being compiled. To avoid ambiguity when there are duplicate references, we recommend that you qualify each such reference with the appropriate library name, as follows:</p>
<pre><code>library_name.type
 </code></pre>
<p>
In the absence of such qualification, MIDL resolves duplicate reference ambiguity as follows:
<ul>
<li>
Effective with version 3.1, MIDL uses the first reference it finds. This is the same way that MKTYPLIB handled duplicate references.</li>
<li>
Version 3.0 of MIDL, the first version of MIDL that could generate type libraries, uses the last reference it found.</li>
</ul>
<h4>See Also</h4>
<p>
<a href="mi-laref_8ttl.htm"><b>library</b></a>, <a href="mi-laref_156c.htm"><b>import</b></a>, <a href="ov-iface_87cj.htm">Importing System Header Files</a>, <a href="ov-iface_5ws3.htm">Importing Files and Type Libraries</a>, <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_odl_file_syntax">
</object><a href=JavaScript:alink_1.Click()>ODL File Syntax</a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_odl_file_example">
</object><a href=JavaScript:alink_2.Click()>ODL File Example</a>, <a href="mi-files_7jl8.htm">Generating a Type Library With MIDL</a></p>
<p>&nbsp;</p></body>
</HTML>

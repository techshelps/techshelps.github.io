<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>pipe</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_pipe"></a>pipe</h1>
<p>
<b>typedef</b>&nbsp;<b>pipe</b>&nbsp;<i>element-type&nbsp;pipe-declarator</i><b>;</b>
<dl>
<dt>
<i>element-type</i></dt>
<dd>
Defines the size of a single element in the transfer buffer. The <i>element-type</i> can be a <b>base_type</b>, <b>predefined_type</b>, <b>struct</b>, <b>enum</b>, or type identifier. Several restrictions apply to <i>element-types</i>, as described in <b>Remarks</b>, below.</dd>
<dt>
<i>pipe-declarator</i></dt>
<dd>
Specifies one or more identifiers or pointers to identifiers. Separate multiple declarators with commas.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>typedef pipe unsigned char UCHAR_PIPE1, UCHAR_PIPE2;
 
//SIMPLE_STRUCT defined elsewhere
typedef pipe SIMPLE_STRUCT SIMPLE_STRUCT_PIPE;
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>pipe</b> type constructor makes it possible to transmit an open-ended stream of typed data across a remote procedure call. An <b>in</b> pipe parameter allows the server to pull the data stream from the client during a remote procedure call. An <b>out</b> pipe parameter allows the server to push the data stream back to the client. You supply the client-side routines to push and pull the data stream and to allocate a global buffer for the data. The client and server stub routines marshal and unmarshal data and pass a reference to the buffer back to the application.</p>
<p>
The following restrictions apply to pipes:
<ul>
<li>
A pipe element cannot be or contain a pointer, a conformant or varying array, a handle, or a context handle. In this (MIDL 3.0) implementation of pipes, a pipe element cannot be or contain a <b>union</b>.</li>
<li>
You cannot apply the <b>transmit_as</b>, <b>represent_as</b>, <b>wire_marshal</b>, or <b>user_marshal</b> attributes to a pipe type or to the <i>element-type</i>. </li>
<li>
A pipe type cannot be a member of a structure or union, the target of a pointer, or the base type of an array. </li>
<li>
A data type declared to be a pipe type can only be used as a parameter of a remote call. </li>
<li>
You can pass a pipe parameter in either direction by value or by reference (<b>ref</b> pointer). However you cannot apply the <b>ptr</b> attribute to a pipe that is passed by reference. You cannot specify a pipe parameter with a <b>unique</b> or a full pointer, regardless of direction.</li>
<li>
You cannot use pipes in <b>object</b> interfaces.</li>
<li>
You cannot apply the <b>idempotent</b> attribute to a routine that has a pipe parameter.</li>
<li>
You cannot use the serialization attributes, <b>encode</b> and <b>decode</b> with pipes.</li>
<li>
You cannot use automatic handles, either by default, or with the <b>auto_handle </b>attribute, with pipes.</li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;The MIDL 3.0 compiler supports pipes in <a href="mi-cmdln_08bt.htm">/<b>Oi2</b></a> mode only. </p>
<p>
For more information on implementing routines with pipe parameters, see <a href="ov-pipes_1pv7.htm">Pipes</a> in the RPC Programmer's Guide and Reference.</p>
<p>&nbsp;</p></body>
</HTML>

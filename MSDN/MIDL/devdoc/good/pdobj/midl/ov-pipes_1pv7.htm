<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pipes</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_pipes"></a>Pipes</h1>
<p>
The pipe type constructor is a highly efficient mechanism for passing large amounts of data, or any quantity of data that is not all available in memory at one time, during a remote procedure call. When you use a pipe, the RPC runtime handles the actual data transfer, thus you eliminate the overhead associated with repeated remote procedure calls.</p>
<p>
You define a pipe type in the interface definition and then use that type as a parameter in remote procedure calls. You use the pipe with the <b>in</b> attribute parameter to <i>pull</i>, or transfer data from the client to the server. You use the pipe with the <b>out</b> parameter to <i>push</i>, or transfer data from the server to the client. </p>
<p>
In relation to the input and output parameters, this <i>push</i> and <i>pull</i> terminology may seem counter-intuitive. It is helpful to keep in mind that the server application and the client stub are the active agents, working in concert to pull the data from the client application for an input parameter, and to push the data back to the client application for an output parameter. The server stub and the client application are passive parties to this exchange. The terms <i>push</i> and <i>pull</i>, then, describe the server application's action on the data. </p>
<p>
The following topics discuss how to use the pipe type constructor in the IDL interface, the client application, and the server application. For more information on pipe syntax and restrictions, see <a href="mi-laref_3b39.htm">pipe</a> in the MIDL Language Reference. The PIPES sample program in the Win32 SDK directory samples\rpc demonstrates how to use [in,out] pipes to transfer data between a client and a server.</p>
<p>&nbsp;</p></body>
</HTML>

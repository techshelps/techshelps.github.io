<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>base_types</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_base_types_2"></a>base_types</h1>
<h4>Remarks</h4>
<p>
All data transmitted on the network during a remote procedure call must resolve to a base type or predefined type.</p>
<p>
MIDL supports the following base types: <b>int</b>, <b>boolean</b>, <b>byte</b>, <b>char</b>, <b>double</b>, <b>float</b>, <b>handle_t</b>, <b>hyper</b>, <b>long</b>, <b>short</b>, <b>small</b>, and <b>void</b> <b>*</b>. The keywords <b>signed</b> and <b>unsigned</b> can be used to qualify integer and character types. MIDL also provides the predefined types <b>error_status_t</b> and <b>wchar_t</b>.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The <b>boolean</b> base type is not compatible with the <b>oleautomation</b> attribute. Use VARIANT_BOOL in your Automation-compatible interfaces.</p>
<p>
Base types can appear as type specifiers in <b>const</b> declarations, <b>typedef</b> declarations, general declarations, and as parameter type specifiers in function declarators.</p>
<p>
The base and predefined types have the following default signs and sizes:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=19%>Base type</th>
<th align=left width=29%>Default sign</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=19%><b>boolean</b></td>
<td width=29%><b>unsigned</b></td>
<td width=52%>8-bit data item</td>
</tr>
<tr valign=top>
<td width=19%><b>byte</b></td>
<td width=29%>- (not applicable)</td>
<td width=52%>8-bit data item</td>
</tr>
<tr valign=top>
<td width=19%><b>char</b></td>
<td width=29%><b>unsigned</b></td>
<td width=52%>8-bit unsigned data item</td>
</tr>
<tr valign=top>
<td width=19%><b>double</b></td>
<td width=29%>-</td>
<td width=52%>64-bit floating-point number</td>
</tr>
<tr valign=top>
<td width=19%><b>float</b></td>
<td width=29%>-</td>
<td width=52%>32-bit floating-point number</td>
</tr>
<tr valign=top>
<td width=19%><b>handle_t</b></td>
<td width=29%>-</td>
<td width=52%>Primitive handle type</td>
</tr>
<tr valign=top>
<td width=19%><b>hyper</b></td>
<td width=29%><b>signed</b></td>
<td width=52%>64-bit signed integer</td>
</tr>
<tr valign=top>
<td width=19%><b>int</b></td>
<td width=29%><b>signed</b></td>
<td width=52%>32-bit signed integer</td>
</tr>
<tr valign=top>
<td width=19%><b>long</b></td>
<td width=29%><b>signed</b></td>
<td width=52%>32-bit signed integer</td>
</tr>
<tr valign=top>
<td width=19%><b>short</b></td>
<td width=29%><b>signed</b></td>
<td width=52%>16-bit signed integer</td>
</tr>
<tr valign=top>
<td width=19%><b>small</b></td>
<td width=29%><b>signed</b></td>
<td width=52%>8-bit signed integer</td>
</tr>
<tr valign=top>
<td width=19%><b>void *</b></td>
<td width=29%>-</td>
<td width=52%>32-bit context handle pointer type</td>
</tr>
<tr valign=top>
<td width=19%><b>wchar_t</b></td>
<td width=29%><b>unsigned</b></td>
<td width=52%>16-bit unsigned data item</td>
</tr>
</table><br>
<p>
Any other types in the interface must be derived from these base or predefined types. The following restrictions apply to data types in interfaces:
<ul>
<li>
On 16-bit platforms, the type <b>int</b> cannot appear in remote functions without a size qualifier such as <b>short</b>,<b> small</b>, <b>long </b>or<b> hyper</b>.</li>
<li>
The type <b>void * </b>cannot appear in remote functions except when it is used to define a context handle.</li>
<li>
DCE IDL compilers do not recognize the keyword <b>signed</b>. Therefore, this feature is not available when you use the MIDL compiler /<b>osf</b> switch.</li>
</ul>
<h4>See Also</h4>
<p>
<a href="mi-laref_621x.htm"><b>byte</b></a>, <a href="mi-laref_0e3w.htm"><b>char</b></a>, <a href="mi-laref_3q5w.htm"><b>handle_t</b></a>, <a href="mi-laref_1cvb.htm"><b>long</b></a>, <a href="mi-cmdln_4tk6.htm"><b>/osf</b></a>, <a href="mi-laref_4t84.htm"><b>short</b></a>, <a href="mi-laref_1o18.htm"><b>small</b></a>, <a href="mi-laref_3wz8.htm"><b>wchar_t</b></a></p>
<p>&nbsp;</p></body>
</HTML>

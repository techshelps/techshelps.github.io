<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>context_handle</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_context_handle"></a>context_handle</h1>
<p>
<b>typedef</b> <b>[context_handle</b> [ <b>,</b> <i>type-attribute-list </i>] <b>]</b> <i>type-specifier declarator-list</i><b>;</b><br>
<br>
<b>[context_handle </b>[<b>, </b><i>function-attr-list </i>] <b>] </b><i>type-specifier </i>[<i>ptr-decl</i>] <i>function-name</i><b>(</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;[ <b>[</b><i>parameter-attribute-list</i><b>]</b> ] <i>type-specifier </i>[<i>declarator</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>,</b> <b>...</b><br>
<b>);<br>
</b><br>
[ <b>[ </b><i>function-attr-list </i><b>] </b>] <i>type-specifier </i>[ <i>ptr-decl </i>] <i>function-name</i><b>(</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>[context_handle </b>[ <b>,</b> <i>parameter-attribute-list </i>] <b>]</b> <i>type-specifier </i>[<i>declarator</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>,</b> <b>...</b><br>
<b>);<br>
<br>
</b>[<b> void</b> <b>__RPC_USER </b><i>context-handle-type</i><b>_rundown</b> (<i>context-handle-type</i>); ]
<dl>
<dt>
<i>type-attribute-list</i></dt>
<dd>
Specifies one or more attributes that apply to the type.</dd>
<dt>
<i>type-specifier</i></dt>
<dd>
Specifies a pointer type or a type identifier. An optional storage specification can precede <i>type-specifier</i>.</dd>
<dt>
<i>declarator </i>and<i> declarator-list</i></dt>
<dd>
Specifies standard C declarators, such as identifiers, pointer declarators, and array declarators. The declarator for a context handle must include at least one pointer declarator. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_pointers">
</object><a href=JavaScript:alink_1.Click()><b>pointers</b></a> and <a href="mi-laref_0vzl.htm"><b>arrays</b></a>. The <i>declarator-list</i> consists of one or more declarators, separated by commas. The parameter-name identifier in the function declarator is optional. </dd>
<dt>
<i>function-attr-list</i></dt>
<dd>
Specifies zero or more attributes that apply to the function. Valid function attributes are <b>callback</b>, <b>local</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>string</b>, <b>ignore</b>, and <b>context_handle</b>.</dd>
<dt>
<i>ptr-decl</i></dt>
<dd>
Specifies zero or more pointer declarators. A pointer declarator is the same as the pointer declarator used in C; it is constructed from the <b>*</b> designator, modifiers such as <b>far</b>, and the qualifier <b>const</b>.</dd>
<dt>
<i>function-name</i></dt>
<dd>
Specifies the name of the remote procedure.</dd>
<dt>
<i>parameter-attribute-list</i></dt>
<dd>
Specifies zero or more directional attributes, field attributes, usage attributes, and pointer attributes appropriate for the specified parameter type. Separate multiple attributes with commas.</dd>
<dt>
<i>context-handle-type</i></dt>
<dd>
Specifies the identifier that specifies the context handle type as defined in a <b>typedef</b> declaration that takes the <b>context_handle</b> attribute. The rundown routine is optional.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>typedef [context_handle] void * PCONTEXT_HANDLE_TYPE; 
short RemoteFunc1([out] PCONTEXT_HANDLE_TYPE * pCxHandle); 
short RemoteFunc2([in, out] PCONTEXT_HANDLE_TYPE * pCxHandle); 
void __RPC_USER PCONTEXT_HANDLE_TYPE_rundown (PCONTEXT_HANDLE_TYPE); 
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>context_handle</b> attribute identifies a binding handle that maintains context, or state information, on the server between remote procedure calls. The attribute can appear as an IDL <b>typedef</b> type attribute, as a function return type attribute, or as a parameter attribute.</p>
<p>
When you apply the <b>context_handle </b>attribute to a type definition, you must also provide a context rundown routine.  See <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_server_context_rundown_routine">
</object><a href=JavaScript:alink_2.Click()>Server Context Rundown Routine</a> for details.</p>
<p>
When you use the MIDL compiler in default (/<b>ms_ext</b>) mode, a context handle can be any pointer type selected by the user, as long as it complies with the requirements for context handles described here. The data associated with such a context handle type is not transmitted on the network and should only be manipulated by the server application. DCE IDL compilers restrict context handles to pointers of type <b>void</b> <b>*</b>. Therefore this feature is not available when you use the MIDL compiler /<b>osf</b> switch.</p>
<p>
As with other handle types, the context handle is opaque to the client application and any data associated with it is not transmitted. On the server, the context handle serves as a handle on active context and all data associated with the context handle type is accessible.</p>
<p>
To create a context handle, the client passes to the server an <b>out</b>, <b>ref</b> pointer to a context handle. (The context handle itself can have a null or non-null value, as long as its value is consistent with its pointer attributes. For example, when the context handle type has the <b>ref</b> attribute applied to it, it cannot have a null value.) Another binding handle must be supplied to accomplish the binding until the context handle is created. When no explicit handle is specified, implicit binding is used. When no <b>implicit_handle</b> attribute is present, an auto handle is used.</p>
<p>
The remote procedure on the server creates an active context handle. The client must use that context handle as an <b>in</b> or <b>in</b>, <b>out</b> parameter in subsequent calls. An <b>in</b>-only context handle can be used as a binding handle, so it must have a non-null value. An <b>in</b>-only context handle does not reflect state changes on the server.</p>
<p>
On the server, the called procedure can interpret the context handle as needed. For example, the called procedure can allocate heap storage and use the context handle as a pointer to this storage.</p>
<p>
To close a context handle, the client passes the context handle as an <b>in</b>, <b>out</b> argument. The server must return a null context handle when it is no longer maintaining context on behalf of the caller. For example, if the context handle represents an open file and the call closes the file, the server must set the context handle to NULL and return it to the client. A null value is invalid as a binding handle on subsequent calls.</p>
<p>
A context handle is only valid for one server. When a function has two handle parameters and the context handle is not null, the binding handles must refer to the same address space.</p>
<p>
When a function has an <b>in</b> or an <b>in</b>, <b>out</b> context handle, its context handle can be used as the binding handle. In this case, implicit binding is not used and the <b>implicit_handle</b> or <b>auto_handle</b> attribute is ignored.</p>
<p>
The following restrictions apply to context handles:
<ul>
<li>
Context handles cannot be array elements, structure members, or union members. They can only be parameters.</li>
<li>
Context handles cannot have the <b>transmit_as</b> or <b>represent_as</b> attribute.</li>
<li>
Parameters that are pointers to <b>out </b>context handles must be <b>ref</b> pointers.</li>
<li>
An <b>in</b> context handle can be used as the binding handle and cannot be null.</li>
<li>
An <b>in</b>, <b>out</b> context handle can be null on input, but only if the procedure has another explicit handle parameter.</li>
<li>
A context handle cannot be used with callbacks.</li>
</ul>
<h4>See Also</h4>
<p>
<a href="mi-laref_9e1x.htm"><b>auto_handle</b></a>, <a href="mi-laref_9sh1.htm"><b>handle</b></a>, <a href="mi-laref_6mcz.htm"><b>handles</b></a>, <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_context_handles">
</object><a href=JavaScript:alink_3.Click()><b>Context Handles</b></a>, <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_server_context_rundown_routine">
</object><a href=JavaScript:alink_4.Click()><b>Server Context Rundown Routine</b></a>, <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_multi_threaded_clients_and_context_handles">
</object><a href=JavaScript:alink_5.Click()>Multi-threaded Clients and Context Handles</a>, <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_client_context_reset">
</object><a href=JavaScript:alink_6.Click()><b>Client Context Reset</b></a>,<b> <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_rpcssdestroyclientcontext">
</object><a href=JavaScript:alink_7.Click()>RpcSsDestroyClientContext</a></b></p>
<p>&nbsp;</p></body>
</HTML>

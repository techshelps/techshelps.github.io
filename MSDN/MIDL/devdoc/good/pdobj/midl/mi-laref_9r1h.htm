<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>unique</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_unique"></a>unique</h1>
<p>
<b>pointer_default(unique)<br>
<br>
typedef</b>&nbsp;<b>[&nbsp;unique&nbsp;</b>[&nbsp;<b>,&nbsp;</b><i>type-attribute-list&nbsp;</i>]&nbsp;<b>]</b>&nbsp;<i>type-specifier&nbsp;declarator-list</i><b>;</b>&nbsp;<br>
<br>
<b>typedef</b>&nbsp;<i>struct-or-union-declarator&nbsp;</i><b>{</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>[&nbsp;unique&nbsp;</b>[&nbsp;<b>,&nbsp;</b><i>field-attribute-list&nbsp;</i>]&nbsp;<b>]</b>&nbsp;<i>type-specifier</i>&nbsp;<i>declarator-list</i><b>;</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>...}<br>
<br>
[&nbsp;unique&nbsp;</b>[&nbsp;<b>,&nbsp;</b><i>function-attribute-list</i><b>&nbsp;</b>]&nbsp;<b>]&nbsp;</b><i>type-specifier&nbsp;ptr-decl</i>&nbsp;<i>function-name</i><b>(</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;<b>[&nbsp;</b><i>parameter-attribute-list</i>&nbsp;<b>]&nbsp;</b>]<b>&nbsp;</b><i>type-specifier&nbsp;</i>[<i>declarator</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>,&nbsp;...</b><br>
<b>);<br>
</b>[<b>&nbsp;[&nbsp;</b><i>function-attribute-list</i><b>&nbsp;]&nbsp;</b>]&nbsp;<i>type-specifier&nbsp;</i>[<i>ptr-decl</i>]&nbsp;<i>function-name</i><b>(</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>[&nbsp;unique&nbsp;</b>[&nbsp;<b>,</b>&nbsp;<i>parameter-attribute-list</i>&nbsp;]&nbsp;<b>]&nbsp;</b><i>type-specifier&nbsp;</i>[<i>declarator</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>,&nbsp;...</b><br>
<b>);</b>
<dl>
<dt>
<i>type-attribute-list</i></dt>
<dd>
Specifies one or more attributes that apply to the type. Valid type attributes include <b>handle</b>, <b>switch_type</b>, <b>transmit_as</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>context_handle</b>, <b>string</b>, and <b>ignore</b>. Separate multiple attributes with commas.</dd>
<dt>
<i>type-specifier</i></dt>
<dd>
Specifies a <b>base_type</b>, <b>struct</b>, <b>union</b>, <b>enum</b> type, or type identifier. An optional storage specification can precede <i>type-specifier</i>.</dd>
<dt>
<i>declarator </i>and<i> declarator-list</i></dt>
<dd>
Specifies standard C declarators, such as identifiers, pointer declarators, and array declarators. For more information, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_pointers">
</object><a href=JavaScript:alink_1.Click()><b>pointers</b></a> and <a href="mi-laref_0vzl.htm"><b>arrays</b></a>. The <i>declarator-list</i> consists of one or more declarators separated by commas. The parameter-name identifier in the function declarator is optional.</dd>
<dt>
<i>struct-or-union-declarator</i></dt>
<dd>
Specifies a MIDL <a href="mi-laref_06k4.htm"><b>struct</b></a> or <a href="mi-laref_76i6.htm"><b>union</b></a> declarator.  </dd>
<dt>
<i>field-attribute-list</i></dt>
<dd>
Specifies zero or more field attributes that apply to the structure member, union member, or function parameter. Valid field attributes include <b>first_is</b>, <b>last_is</b>, <b>length_is</b>, <b>max_is</b>, <b>size_is</b>; the usage attributes <b>string</b>, <b>ignore</b>, and <b>context_handle</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the union attribute <b>switch_type</b>. Separate multiple field attributes with commas.</dd>
<dt>
<i>function-attribute-list</i></dt>
<dd>
Specifies zero or more attributes that apply to the function. Valid function attributes are <b>callback</b>, <b>local</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>string</b>, <b>ignore</b>, and <b>context_handle</b>.</dd>
<dt>
<i>ptr-decl</i></dt>
<dd>
Specifies at least one pointer declarator to which the <b>unique</b> attribute applies. A pointer declarator is the same as the pointer declarator used in C; it is constructed from the <b>*</b> designator, modifiers such as <b>far</b>, and the qualifier <b>const</b>.</dd>
<dt>
<i>function-name</i></dt>
<dd>
Specifies the name of the remote procedure.</dd>
<dt>
<i>parameter-attribute-list</i></dt>
<dd>
Consists of zero or more attributes appropriate for the specified parameter type. Parameter attributes can take the directional attributes <b>in</b> and <b>out</b>; the field attributes <b>first_is</b>, <b>last_is</b>, <b>length_is</b>, <b>max_is</b>, <b>size_is</b>, and <b>switch_type</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>context_handle</b> and <b>string</b>. The usage attribute <b>ignore</b> cannot be used as a parameter attribute. Separate multiple attributes with commas.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>pointer_default(unique) 
 
typedef [unique, string] unsigned char * MY_STRING_TYPE; 
 
[unique] char * MyFunction([in, out, unique] long * plNumber); 
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>unique</b> attribute specifies a unique pointer.</p>
<p>
Pointer attributes can be applied as a type attribute; as a field attribute that applies to a structure member, union member, or parameter; or as a function attribute that applies to the function return type. The pointer attribute can also appear with the <b>pointer_default</b> keyword.</p>
<p>
A unique pointer has the following characteristics:
<ul>
<li>
Can have the value NULL.</li>
<li>
Can change during a call from NULL to non-null, from non-null to NULL, or from one non-null value to another. </li>
<li>
Can allocate new memory on the client. When the unique pointer changes from NULL to non-null, data returned from the server is written into new storage. </li>
<li>
Can use existing memory on the client without allocating new memory. When a unique pointer changes during a call from one non-null value to another, the pointer is assumed to point to a data object of the same type. Data returned from the server is written into existing storage specified by the value of the unique pointer before the call.</li>
<li>
Can orphan memory on the client. Memory referenced by a non-null unique pointer may never be freed if the unique pointer changes to NULL during a call and the client does not have another means of dereferencing the storage.</li>
<li>
Does not cause aliasing. Like storage pointed to by a reference pointer, storage pointed to by a unique pointer cannot be reached from any other name in the function.</li>
</ul>
<p>
The stubs call the user-supplied memory-management functions <b>midl_user_allocate</b> and <b>midl_user_free</b> to allocate and deallocate memory required for unique pointers and their referents.</p>
<p>
The following restrictions apply to unique pointers:
<ul>
<li>
The <b>unique</b> attribute cannot be applied to binding-handle parameters (<b>handle_t</b>) and context-handle parameters.</li>
<li>
The <b>unique</b> attribute cannot be applied to <b>out</b>-only top-level pointer parameters (parameters that have only the <b>out</b> directional attribute).</li>
<li>
Unique pointers cannot be used to describe the size of an array or union arm because unique pointers can have the value NULL. This restriction prevents the error that results if a null value is used as the array size or the union-arm size.</li>
</ul>
<h4>See Also</h4>
<p>
<a href="mi-laref_3cdw.htm"><b>pointer_default</b></a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_pointers">
</object><a href=JavaScript:alink_2.Click()><b>pointers</b></a>, <a href="mi-laref_4ws2.htm"><b>ptr</b></a>, <a href="mi-laref_52cm.htm"><b>ref</b></a></p>
<p>&nbsp;</p></body>
</HTML>

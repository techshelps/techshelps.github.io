<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>switch_is</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_switch_is"></a>switch_is</h1>
<p>
<b>typedef</b>&nbsp;<b>struct</b>&nbsp;[&nbsp;<i>struct-tag&nbsp;</i>]&nbsp;<b>{</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>[&nbsp;switch_is(</b><i>limited-expr</i><b>)&nbsp;</b>[&nbsp;<b>,&nbsp;</b><i>field-attr-list&nbsp;</i>]&nbsp;<b>]</b>&nbsp;<i>union-type-specifier</i>&nbsp;<i>declarator</i><b>;</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>...</b><br>
<b>}<br>
<br>
</b>[&nbsp;<b>[</b><i>function-attribute-list</i><b>]&nbsp;</b>]&nbsp;<i>type-specifier&nbsp;</i>[<i>pointer-declarator</i>]&nbsp;<i>function-name</i><b>(</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>[&nbsp;switch_is(</b><i>limited-expr</i><b>)&nbsp;</b>[&nbsp;<b>,&nbsp;</b><i>param-attr-list</i>&nbsp;]&nbsp;<b>]&nbsp;</b><i>union-type&nbsp;</i>[<i>declarator</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>,&nbsp;...</b><br>
<b>);</b>
<dl>
<dt>
<i>struct-tag</i></dt>
<dd>
Specifies an optional tag for a structure.</dd>
<dt>
<i>limited-expr</i></dt>
<dd>
Specifies a C-language expression supported by MIDL. Almost all C-language expressions are supported. The MIDL compiler supports conditional expressions, logical expressions, relational expressions, and arithmetic expressions. MIDL does not allow function invocations in expressions and does not allow pre- and post-increment and -decrement operators.</dd>
<dt>
<i>field-attr-list</i></dt>
<dd>
Specifies zero or more field attributes that apply to a union member. Valid field attributes include <b>first_is</b>, <b>last_is</b>, <b>length_is</b>, <b>max_is</b>, <b>size_is</b>; the usage attributes <b>string</b>, <b>ignore</b>, and <b>context_handle</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and for members that are themselves unions, the union attribute <b>switch_type</b>. Separate multiple field attributes with commas.</dd>
<dt>
<i>union-type-specifier</i></dt>
<dd>
Specifies the <b>union</b> type identifier. An optional storage specification can precede <i>type-specifier</i>.</dd>
<dt>
<i>declarator </i>and <i>declarator-list</i></dt>
<dd>
Specifies a standard C declarator, such as an identifier, pointer declarator, and array declarator. (Function declarators and bit-field declarations are not allowed in unions that are transmitted in remote procedure calls. These declarators are allowed in unions that are not transmitted.) Separate multiple declarators with commas.</dd>
<dt>
<i>function-attribute-list</i></dt>
<dd>
Specifies zero or more attributes that apply to the function. Valid function attributes are <b>callback</b>, <b>local</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>string</b>, <b>ignore</b>, and <b>context_handle</b>.</dd>
<dt>
<i>type-specifier</i></dt>
<dd>
Specifies a <b>base_type</b>, <b>struct</b>, <b>union</b>, <b>enum</b> type, or type identifier. An optional storage specification can precede <i>type-specifier</i>.</dd>
<dt>
<i>pointer-declarator</i></dt>
<dd>
Specifies zero or more pointer declarators. A pointer declarator is the same as the pointer declarator used in C; it is constructed from the <b>*</b> designator, modifiers such as <b>far</b>, and the qualifier <b>const</b>.</dd>
<dt>
<i>function-name</i></dt>
<dd>
Specifies the name of the remote procedure.</dd>
<dt>
<i>param-attr-list</i></dt>
<dd>
Specifies zero or more attributes appropriate for the specified parameter type. Parameter attributes can take the directional attributes <b>in</b> and <b>out</b>, the field attributes <b>first_is</b>, <b>last_is</b>, <b>length_is</b>, <b>max_is</b>, <b>size_is</b>, and <b>switch_type</b>; the pointer attribute <b>ref</b>, <b>unique</b>, or <b>ptr</b>; and the usage attributes <b>context_handle</b> and <b>string</b>. The usage attribute <b>ignore</b> cannot be used as a parameter attribute. Separate multiple attributes with commas.</dd>
<dt>
<i>union-type</i></dt>
<dd>
Identifies the <b>union</b> type specifier.
</dd>
</dl>
<h4>Examples</h4>
<pre><code>typedef [switch_type(short)] union _WILLIE_UNION_TYPE { 
    [case(24)] 
        float fMays; 
    [case(25)] 
        double dMcCovey; 
    [default] 
        ; 
} WILLIE_UNION_TYPE; 
 
typedef struct _WINNER_TYPE { 
    [switch_is(sUniformNumber)] WILLIE_UNION_TYPE w; 
    short sUniformNumber; 
} WINNER_TYPE; 
 </code></pre>
<h4>Remarks</h4>
<p>
The <b>switch_is</b> attribute specifies the expression or identifier acting as the union discriminant that selects the union member. The discriminant associated with the <b>switch_is</b> attribute must be defined at the same logical level as the union:
<ul>
<li>
When the union is a parameter, the union discriminant must be another parameter.</li>
<li>
When the union is a field of a structure, the discriminant must be another field of the same structure.</li>
</ul>
<p>
The sequence in a structure or a function parameter list is not significant. The union can either precede or follow the discriminant.</p>
<p>
The <b>switch_is</b> attribute can appear as a field attribute or as a parameter attribute.</p>
<h4>See Also</h4>
<p>
<a href="mi-laref_77e6.htm"><b>encapsulated_union</b></a>, <a href="mi-laref_9jji.htm"><b>non-encapsulated_union</b></a>, <a href="mi-laref_765h.htm"><b>switch_type</b></a>, <a href="mi-laref_76i6.htm"><b>union</b></a></p>
<p>&nbsp;</p></body>
</HTML>

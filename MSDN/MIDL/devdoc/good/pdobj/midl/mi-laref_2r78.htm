<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>error_status_t</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_error_status_t"></a>error_status_t</h1>
<h4>Remarks</h4>
<p>
The <b>error_status_t</b> keyword designates a type for an object that contains communication-status or fault-status information.</p>
<p>
The <b>error_status_t</b> type is used as a part of the exception handling architecture in IDL. This type maps to an unsigned long. Applications that catch error situations have an <b>out</b> parameter or a return type of a procedure specified as <b>error_status_t</b>, and qualify the <b>error_status_t</b> with the <a href="mi-laref_4zhv.htm"><b>comm_status</b></a> or <a href="mi-laref_8qsz.htm"><b>fault_status</b></a> attributes in the ACF. If the parameter or return type was not qualified with the <b>comm_status</b> or <b>fault_status</b> attributes, then the parameter operates as though it were an unsigned long.</p>
<p>
The MIDL 2.0 compiler generates stubs that contain the proper error handling architecture. However, earlier versions of the MIDL compiler handled a parameter or return type of <b>error_status_t</b> as though the <b>comm_status</b> and <b>fault_status</b> attributes were applied, even if they were not. With the MIDL 2.0 compiler, you must explicitly apply the <b>comm_status</b> and <b>fault_status</b> attributes to the parameter or procedure in the ACF.</p>
<p>
The <b>error_status_t</b> type is one of the predefined types of the interface definition language. Predefined types can appear as type specifiers in <b>typedef</b> declarations, in general declarations, and in function declarators (either as the function-return-type or as parameter-type specifiers). </p>
<h4>See Also</h4>
<p>
<a href="mi-laref_4zhv.htm"><b>comm_status</b></a>, <a href="mi-laref_8qsz.htm"><b>fault_status</b></a>, <a href="mi-laref_49v0.htm"><b>IDL</b></a></p>
<p>&nbsp;</p></body>
</HTML>

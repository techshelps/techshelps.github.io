<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C-Preprocessor Requirements for MIDL</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_c_preprocessor_requirements_for_midl"></a>C-Preprocessor Requirements for MIDL</h2>
<p>
The MIDL compiler uses the C preprocessor during initial processing of the IDL file. The operating system used when you compile the IDL files is associated with a default C preprocessor. If you want to use a different C-preprocessor name, the MIDL compiler switch <a href="mi-cmdln_2r38.htm"><b>/cpp_cmd</b></a> allows you to override the default C-preprocessor name:</p>
<p>
<b>midl /cpp_cmd</b> cl386 <i>filename</i>
<dl>
<dt>
<i>filename</i></dt>
<dd>
Specifies the name of the IDL file.
</dd>
</dl>
<p>
During initial processing, the C preprocessor removes all preprocessor directives in the IDL file. After preprocessing, the only directive that can appear in a file is the <b>#line</b> directive in one of the following forms:</p>
<pre><code>#line digit-sequence "filename" new-line
 
# digit-sequence "filename" new-line
 </code></pre>
<p>
Other directives should not appear in either the IDL file or any header file included by the IDL file. These other directives are not supported by the MIDL compiler and can cause errors. For a complete description of the <b>line</b> directive and other preprocessor directives, see your C-compiler documentation.</p>
<p>
The MIDL compiler requires the C preprocessor to observe the following conventions:
<ul>
<li>
The input file must be the last argument on the command line.</li>
<li>
The preprocessor must direct output to the standard output device, <i>stdout</i>.</li>
</ul>
<p>
Preprocessor directives present in the IDL file do not appear in the header file generated by the MIDL compiler. For example, any values defined in the IDL file with the C <b>#define</b> statement are removed by the C preprocessor. These <b>#define</b> statements will not appear in the header file generated by the MIDL compiler. If such values are defined only in the MIDL file and are required by C source files, the C compiler will report errors when it tries to compile these source files.</p>
<p>
These are the four workarounds that are recommended:
<ul>
<li>
Use <a href="mi-laref_4kpx.htm"><b>cpp_quote</b></a> to reproduce <b>#define</b> in the generated header file.</li>
<li>
Use <a href="mi-laref_0jw4.htm"><b>const</b></a> declaration specification.</li>
<li>
Use header files that are included in the IDL file and the C source code.</li>
<li>
Use enumeration constants in the IDL file.</li>
</ul>
<p>
To get a declaration in the generated header file with <b>cpp_quote</b>, use the following statement:</p>
<pre><code>cpp_quote ("#define ARRSIZE 10");
 </code></pre>
<p>
This statement results in the following line being generated in the header file:</p>
<pre><code>#define ARRSIZE 10
 </code></pre>
<p>
You can reproduce manifest constants using the constant-declaration syntax:</p>
<pre><code>const short ARRSIZE = 10
 </code></pre>
<p>
This syntax results in the following line being generated in the header file:</p>
<pre><code>#define ARRSIZE 10
 </code></pre>
<p>
You can define separate header files that contain only preprocessor directives and include them in both the IDL file and the C source files. Although the directives will not be available in the header file generated by the MIDL compiler, the C source program can include the separate header file.</p>
<p>
You can also use enumeration constants in the IDL file. Enumeration constants are not removed during the early phases of MIDL compilation by the C-compiler preprocessor, so these constants are available in the header file generated by the MIDL compiler. For example, the statement</p>
<pre><code>typedef enum midlworkaround { MAXSTRINGCOUNT = 300 };
 </code></pre>
<p>
will not be removed during MIDL compilation by the C preprocessor. The constant MAXSTRINGCOUNT is available to C source programs that include the header file generated by the MIDL compiler.</p>
<p>&nbsp;</p></body>
</HTML>

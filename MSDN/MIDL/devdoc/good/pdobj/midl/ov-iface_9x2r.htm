<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Interface Definitions and Type Libraries</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_interface_definitions_and_type_libraries"></a>Interface Definitions and Type Libraries</h1>
<p>
In distributed computing, an interface is a collection of definitions and functions that enables two or more elements to interoperate. In an RPC application, this interface specifies how the client and server applications will identify themselves to each other, the remote procedures that the client application can call, the data types for the parameters and return values of those procedures, and how the data is transmitted between client and server. In MIDL, an RPC application can have one or many interfaces, each specifying a unique network contract between client and server.</p>
<p>
COM uses this RPC model to allow component objects to communicate with each other. Thus, a COM (or DCOM) interface defines the identity and external characteristics of a COM object — the means by which clients can gain access to the object's methods and data. With DCOM, this access is possible regardless of whether the objects exist in the same process, different processes on the same machine, or on different machines. As with RPC client/server interfaces, a COM object can expose its functionality in a number of different ways, through multiple interfaces.</p>
<p>
A type library (.TLB) is a binary file that stores information about a COM object's properties and methods in a form that is accessible to other applications at run time. Using a type library, an application or browser can determine what interfaces an object supports, and invoke an object's interface methods, even if the object and client applications were written in different languages. The COM run-time environment can also use a type library to provide automatic cross-apartment/process/machine marshaling for interfaces described in type libraries.</p>
<p>
You define the characteristics of an interface in an interface definition (IDL) file and an optional application configuration (ACF) file. The IDL file specifies the characteristics of your application's interfaces "on the wire," that is, how data is to be transmitted between client and server, or between COM objects. The ACF file specifies interface characteristics, such as binding handles, that pertain only to the local operating environment. You can also use the ACF file to specify how to marshal and transmit a complex data structure in a machine-independent form.</p>
<p>
The IDL and ACF files are scripts written in Microsoft® Interface Definition Language (MIDL), which is Microsoft's implementation and extension of the OSF-DCE interface definition language. (The Microsoft extensions to the language allow you to create COM interfaces and type libraries.) The compiler, Midl.exe, uses these scripts to generate C-language stubs and header files as well as type library files.</p>
<p>
Depending on the contents of your IDL file, the MIDL compiler will generate any of the following:
<ul>
<li>
A C-language proxy/stub file, an interface identifier file, a DLL data file, and a related header file for a custom COM interface. The MIDL compiler generates these files when it encounters the <b>object</b> attribute in an interface attribute list. For more information on these files, see Files Generated for an COM Interface. For more information on using MIDL to define COM interfaces, see Designing COM Interfaces.</li>
<li>
A compiled type library (.tlb) file and related header file. MIDL generates these files when it encounters a <b>library</b> statement in the IDL file. For general information about type libraries, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_oa96_contents_of_a_type_library">
</object><a href=JavaScript:alink_1.Click()>Contents of a Type Library</a>, in the Automation Programmer's Reference.</li>
<li>
C/C++-language client and server stub files and related header file for an RPC interface. These files are generated when there are interfaces in the IDL file that do not have the <b>object</b> attribute. For more information on these files, see <a href="mi-files_6b6t.htm">Files Generated for an RPC Interface</a>.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

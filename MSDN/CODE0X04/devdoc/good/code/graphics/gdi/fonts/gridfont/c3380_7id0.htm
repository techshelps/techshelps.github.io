<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FONT.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3384"></a>FONT.CXX</h2>
<pre><code>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;memory.h&gt; <br>#include "app.h" <br> <br>#include "font.hxx" <br>//+-------------------------------------------------------- <br>// Class:       CFont <br>// <br>// Purpose:     Abstract a font <br>// <br>// History:     22-Jan-1993     asmusf  created <br>//---------------------------------------------------------- <br>CFont::CFont(HFONT hfont) <br>{ <br>    _hfont = hfont; <br>    _fDel = FALSE;       // owned elsewhere <br>} <br> <br>CFont::CFont(TCHAR *szFace, int iHeight, BOOL fBold, BOOL fItalic, BOOL fUnder) <br>{ <br>    LOGFONT lf; <br>    _fDel = FALSE;      // not initialized <br>  <br>    memset(&amp;lf,0,sizeof (LOGFONT)); <br>    // rude but effective: truncate <br>    if( lstrlen( szFace ) &gt; sizeof(lf.lfFaceName) ) <br>    { <br>        szFace[sizeof(lf.lfFaceName)] = 0; <br>    } <br>    lstrcpy(lf.lfFaceName, szFace); <br> <br>    lf.lfHeight = iHeight * 20;         // twips internal, points in API <br>     <br>    if( fBold ) <br>    { <br>        lf.lfWeight = FW_BOLD; <br>    } <br>    lf.lfItalic = fItalic; <br>    lf.lfUnderline = fUnder; <br>    Create(lf); <br>} <br> <br>BOOL CFont::Create(LOGFONT &amp;lf) <br>{ <br>    if( _fDel )    <br>    { <br>        DeleteObject(_hfont); <br>        _fDel = FALSE; <br>    } <br>    if( _hfont = CreateFontIndirect(&amp;lf) ) <br>    { <br>        _fDel = TRUE; <br>        return TRUE; <br>    } <br>    return FALSE; <br>} <br>                                            <br>CFont::~CFont() <br>{ <br>    if( _fDel ) <br>    { <br>        DeleteObject(_hfont); <br>    } <br>} <br> <br>BOOL CFont::Update(int iHeight, BOOL fBold) <br>{ <br>    LOGFONT lf; <br>    GetObject(_hfont, sizeof(LOGFONT), &amp;lf); <br>    lf.lfWeight = (fBold ? FW_BOLD : FW_NORMAL ); <br> <br>    lf.lfHeight = iHeight * 20;         // twips internal, points in API <br> <br> <br>    return Create(lf); <br>} <br> <br> <br>BOOL CFont::Choose(HWND hwnd) <br>{ <br>    CHOOSEFONT cf ; <br>    LOGFONT lf ; <br> <br>    GetObject(_hfont, sizeof(LOGFONT), &amp;lf); <br> <br> <br>    // match from TWIPS to LOGPIXELS used in common Dialog <br>    CScreenCanvas canvas(NULL); <br>    lf.lfHeight = MulDiv(lf.lfHeight,GetDeviceCaps(canvas, LOGPIXELSY),INCH1);   <br>     <br>    lf.lfCharSet = ANSI_CHARSET; <br> <br>    cf.lStructSize      = sizeof (CHOOSEFONT) ; <br>    cf.hwndOwner        = hwnd ; <br>    cf.hDC              = NULL ; <br>    cf.lpLogFont        = &amp;lf ; <br>    cf.iPointSize       = 0 ; <br>    cf.Flags            = CF_INITTOLOGFONTSTRUCT | CF_SCREENFONTS <br>                                                 | CF_EFFECTS ; <br>    cf.rgbColors        = 0L ; <br>    cf.lCustData        = 0L ; <br>    cf.lpfnHook         = NULL ; <br>    cf.lpTemplateName   = NULL ; <br>    cf.hInstance        = NULL ; <br>    cf.lpszStyle        = NULL ; <br>    cf.nFontType        = 0 ;               // Returned from ChooseFont <br>    cf.nSizeMin         = 0 ; <br>    cf.nSizeMax         = 0 ; <br> <br>    if( !ChooseFont (&amp;cf) ) <br>    { <br>        return FALSE; <br>    } <br>//    MessageBox( hwnd, lf.lfFaceName, TEXT("Font Chosen"), MB_OK ); <br>     <br>    // adjust back to using TWIPS <br>    lf.lfHeight = MulDiv(lf.lfHeight,INCH1,GetDeviceCaps(canvas, LOGPIXELSY));   <br>    lf.lfWidth=0;               // font mapper knows best <br>     <br>    // create the font    <br>    return Create(lf); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

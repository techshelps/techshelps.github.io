<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BOX.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3382"></a>BOX.CXX</h2>
<pre><code>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include "app.h" <br>#include "box.hxx" <br> <br>CTextField::CTextField(TCHAR *sz) <br>{ <br>    _sz = sz; <br>} <br> <br>void CTextField::Paint(CCanvas &amp;canvas, int x, int y) <br>{ <br>    SetTextAlign(canvas, TA_LEFT | TA_BASELINE ); <br>    CFontSelect fs(canvas, _font); <br>    canvas.Text(x, y, _sz, lstrlen(_sz) ); <br>} <br> <br>void CTextField::GetExtent(CCanvas &amp;canvas, SIZE *pSize) <br>{ <br>CFontSelect fs(canvas, _font); <br>    GetTextExtentPoint(canvas, _sz, lstrlen(_sz), pSize); <br>} <br> <br>void CTextField::SetFont(HFONT hfont) <br>{ <br>    _font = hfont;       <br>} <br> <br>//----------------------------------------------- <br>CBoxFormat::CBoxFormat(SIZE sizeChar) : <br>        _fontAlias(TEXT("Arial Narrow"), -10, FALSE), <br>#ifdef CHARBITS <br>        _fontCtype(TEXT("Arial"), 12, TRUE, FALSE, TRUE) <br>#else <br>        _fontCtype(TEXT("Arial"), 7, TRUE, FALSE, FALSE) <br>#endif <br> <br>{ <br>        _size = sizeChar; <br>} <br> <br>//----------------------------------------------- <br>CBox::CBox( CBoxFormat &amp;bxf, UINT iChar, HFONT hfont ) : <br>        _fontBlock( hfont ), <br>        _Block(1, 1, iChar, bxf ), <br>        _bxf(bxf), <br>#ifdef CHARBITS <br>        _Alias(TEXT("Character Type Bits:")), <br> <br>#else <br>_Alias(TEXT("Character Decomposition: ")), <br>#endif <br>_fuFormat(HEXADECIMAL) <br>{ <br>     <br>    _fontBlock.Update( -40, TRUE); <br>    _Block.SetFont(_fontBlock);  <br> <br>    _sizeBox.cx = bxf._size.cx+100; // shadow 100/20 poitns <br>    _sizeBox.cy = bxf._size.cy+100; <br> <br>#ifdef UNICODE <br>    _sizeBox.cx += INCH4; <br>    _sizeBox.cy += INCH4; <br>#endif <br> <br> <br>    _Alias.SetFont(bxf._fontAlias); <br>    _iChar = iChar; <br>} <br>         <br> <br>void CBox::Paint(CCanvas &amp;canvas, POINT pt, RECT rc) <br>{ <br>    int x = pt.x; <br>    int y = pt.y; <br> <br>#ifdef UNICODE <br>    // adjust to length of header <br> <br>    SIZE size; <br>    _Alias.GetExtent(canvas, &amp;size); <br>    _sizeBox.cx += size.cx; <br>#endif <br>    // make rc large enough <br>    rc.left = pt.x; <br>    rc.top = pt.y; <br>    rc.right = pt.x+_sizeBox.cx-100; <br>    rc.bottom = pt.y+_sizeBox.cy-100; <br> <br>    OffsetRect( &amp;rc, 100, 100 ); <br>    FillRect(canvas, &amp;rc, GetStockBrush(GRAY_BRUSH)); <br>    OffsetRect( &amp;rc, -100, -100 ); <br>    FillRect(canvas, &amp;rc, GetStockBrush(WHITE_BRUSH)); <br> <br>#ifdef UNICODE <br>    CBlackPen pen(canvas, PS_SOLID, 20); <br>    Rectangle(canvas, rc.left, rc.top, rc.right, rc.bottom); <br> <br>    pt.x += INCH8; <br>    pt.y += INCH8; <br>#endif <br> <br>    _Block.SetFormat(_fuFormat); <br>    _Block.Paint(canvas, rc, pt); <br> <br>#ifdef UNICODE <br>    _Alias.Paint(canvas, x+=(INCH1-INCH10), y+= INCH4); <br>    _Alias.GetExtent(canvas, &amp;size); <br> <br>    pt.x = x; <br>    pt.y = y+INCH10; <br> <br>    USHORT uTemp[2]={_iChar, 0}; <br> <br>    SetTextColor(canvas, RGB(0,128,0)); <br>#ifdef CHARBITS <br> <br>    USHORT uType[2]; <br> <br>    for( int i = 0; i &lt; 3; i++ ) <br>    { <br>        pt.y += size.cy; <br> <br>        GetStringTypeW(1&lt;&lt;i, uTemp, 2, uType ); <br>        CCodeGrid Ctype(1,1, size, uType[0]); <br>        Ctype.SetFont(_bxf._fontCtype); <br>Ctype.SetFormat(HEXADECIMAL, 4); <br>        Ctype.Paint(canvas, rc, pt); <br>    } <br>#else // ifdef DECOMP <br>int cch =FoldString(MAP_COMPOSITE, (LPCTSTR) &amp;_iChar, 1, NULL, 0); <br> <br>LPTSTR pch = new TCHAR[cch]; <br>FoldString(MAP_COMPOSITE, (LPCTSTR) &amp;_iChar, 1, pch, cch); <br>SIZE sizedecomp; <br>sizedecomp.cx = _bxf._size.cx/2; <br>sizedecomp.cy = _bxf._size.cy/2; <br>    // pt.y += sizedecomp.cy; <br> <br>CFont fontDecomp(_fontBlock); <br>fontDecomp.Update(-20, TRUE); <br> <br>for(int i=0; i &lt; cch; i++ ) <br>{ <br>CCharGrid Decomp(1,1,sizedecomp, pch[i] ); <br>Decomp.SetCharTable();// exclude char images not in font <br>        Decomp.SetFont(fontDecomp); <br>        Decomp.Paint(canvas, rc, pt); <br> <br>CCodeGrid Code(1,1,sizedecomp, pch[i] ); <br>// but don't exclude their code nums <br>        Code.SetFont(_bxf._fontCtype); <br>     Code.SetTextOrg(sizedecomp.cx/2, 9*sizedecomp.cy/10); <br>Code.SetFormat(HEXADECIMAL, 4); <br>        Code.Paint(canvas, rc, pt); <br> <br>        pt.x += sizedecomp.cx; <br>}     <br>delete pch; <br>#endif <br>    SetTextColor(canvas, RGB(0,0,0)); <br>#endif <br>} <br> <br>/* <br>*/ <br> <br> <br>UINT CBox::Hittest(CCanvas &amp;canvas, POINT pt) <br>{ <br>     return 0x00C5; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

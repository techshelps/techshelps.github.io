<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TOOLBAR.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3393"></a>TOOLBAR.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1992 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/**************************************************************************\ <br>*  toolbar.c -- module for the "toolbar" on top of the main window. <br>*   Includes the window procedure and an initialization routine. <br>\**************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include "ttfonts.h" <br> <br> <br>/* for the initial positioning of the buttons within the toolbar. */ <br>#define SPACEBUTTON 8 <br>#define CXBUTTON ((GetSystemMetrics (SM_CXFULLSCREEN)) /5 -2*SPACEBUTTON) <br>#define BUTTONTOP    TOOLBARHEIGHT/8 <br>#define BUTTONHEIGHT TOOLBARHEIGHT*3/4 <br>#define BUTTONLEFT(x) ((2*x+1)*SPACEBUTTON + x*CXBUTTON) <br> <br>#define BORDER     2 <br> <br> <br> <br>int initTB (HWND hwndParent) <br>{ <br>WNDCLASS  wc; <br> <br>  wc.style = 0; <br>  wc.lpfnWndProc = (WNDPROC)ToolBarWndProc; <br>  wc.cbClsExtra = 0; <br>  wc.cbWndExtra = 0; <br>  wc.hInstance = hInst; <br>  wc.hIcon = NULL; <br>  wc.hCursor = LoadCursor(NULL, IDC_ARROW); <br>  wc.hbrBackground = GetStockObject(LTGRAY_BRUSH); <br>  wc.lpszMenuName = NULL; <br>  wc.lpszClassName = TEXT("ToolBar"); <br> <br>  if (!RegisterClass(&amp;wc)) return (FALSE); <br> <br>  hwndTB = CreateWindow( <br>      TEXT("ToolBar"), <br>      NULL, <br>      WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE, <br>      0,0, <br>      GetSystemMetrics (SM_CXFULLSCREEN), <br>      TOOLBARHEIGHT, <br>      hwndParent, NULL, hInst, NULL); <br> <br>  if (!hwndTB) return (FALSE); <br> <br>  return TRUE; <br>} <br> <br> <br>/**************************************************************************\ <br>* <br>*  function:  ToolBarWndProc <br>* <br>*  input parameters:  normal window procedure parameters. <br>* <br>*  global variables: <br>*   hwndMain - parent of the toolbar. <br>* <br>* When the window is created, create the various buttons.  When those <br>*  buttons send WM_COMMAND messages later, send the messages back to hwndMain. <br>* <br>\**************************************************************************/ <br>LRESULT CALLBACK ToolBarWndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>static HWND  hwndButton, hwndEnumPrinter; <br>  switch (message) { <br> <br>    /**********************************************************************\ <br>    *  WM_CREATE <br>    * <br>    * Create the various buttons which are on the toolbar.  Once the buttons <br>    *  are created, set the window ID so that the WM_COMMANDS may be <br>    *  distinguished. <br>    \**********************************************************************/ <br>    case WM_CREATE: { <br>      hwndButton = CreateWindow( <br>        TEXT("BUTTON"),TEXT("EnumFonts"), <br>        WS_CHILD | WS_VISIBLE, <br>        BUTTONLEFT(0),BUTTONTOP, CXBUTTON, BUTTONHEIGHT, <br>        hwnd, NULL, hInst, NULL); <br>      SetWindowLong (hwndButton, GWL_ID, TBID_ENUM); <br> <br>      hwndButton = CreateWindow( <br>        TEXT("BUTTON"),TEXT("CreateFont"), <br>        WS_CHILD | WS_VISIBLE, <br>        BUTTONLEFT(1),BUTTONTOP, CXBUTTON, BUTTONHEIGHT, <br>        hwnd, NULL, hInst, NULL); <br>      SetWindowLong (hwndButton, GWL_ID, TBID_CREATE); <br> <br>      hwndButton = CreateWindow( <br>        TEXT("BUTTON"),TEXT("GetMetrics"), <br>        WS_CHILD | WS_VISIBLE , <br>        BUTTONLEFT(2),BUTTONTOP, CXBUTTON, BUTTONHEIGHT, <br>        hwnd, NULL, hInst, NULL); <br>      SetWindowLong (hwndButton, GWL_ID, TBID_GETTM); <br> <br>      hwndButton = CreateWindow( <br>        TEXT("BUTTON"),TEXT("GetFontData"), <br>        WS_CHILD | WS_VISIBLE , <br>        BUTTONLEFT(3),BUTTONTOP, CXBUTTON, BUTTONHEIGHT, <br>        hwnd, NULL, hInst, NULL); <br>      SetWindowLong (hwndButton, GWL_ID, TBID_GETFONTDATA); <br> <br>      hwndEnumPrinter = CreateWindow( <br>        TEXT("BUTTON"),TEXT("Enum(Printer)"), <br>        WS_CHILD | WS_VISIBLE, <br>        BUTTONLEFT(4),BUTTONTOP, CXBUTTON, BUTTONHEIGHT, <br>        hwnd, NULL, hInst, NULL); <br>      SetWindowLong (hwndEnumPrinter, GWL_ID, TBID_PRINT); <br> <br>    } break; <br> <br> <br>    /**********************************************************************\ <br>    *  WM_COMMAND <br>    * <br>    * Send the command messages back to hwndMain. <br>    *  except for the one to disable the printer button. <br>    \**********************************************************************/ <br>    case WM_COMMAND: <br>      if (wParam == IDU_NOPRINTER) <br>        EnableWindow (hwndEnumPrinter, FALSE); <br>      else <br>        PostMessage (hwndMain,message, wParam, lParam); <br>    break; <br> <br> <br>    /**********************************************************************\ <br>    *  WM_PAINT <br>    * <br>    * Paint two rectangular strips, one on top, one on bottom. <br>    \**********************************************************************/ <br>    case WM_PAINT : { <br>      PAINTSTRUCT ps; <br>      RECT rect; <br>      HDC hdc; <br> <br>      hdc = BeginPaint(hwnd, &amp;ps); <br>      GetClientRect (hwnd, &amp;rect); <br>      rect.right --; <br>      rect.bottom --; <br> <br>      SelectObject (hdc, GetStockObject (BLACK_PEN)); <br>      MoveToEx (hdc, rect.right, rect.top, NULL); <br>      LineTo (hdc, rect.right, rect.bottom); <br>      LineTo (hdc, rect.left, rect.bottom); <br>      SelectObject (hdc, GetStockObject (WHITE_PEN)); <br>      LineTo (hdc, rect.left, rect.top); <br>      LineTo (hdc, rect.right, rect.top); <br> <br>      EndPaint (hwnd, &amp;ps); <br>    } break; <br> <br> <br>  } /* end switch */ <br>  return (DefWindowProc(hwnd, message, wParam, lParam)); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

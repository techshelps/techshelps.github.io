<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>APP.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3386"></a>APP.CXX</h2>
<pre><code>//+-------------------------------------------------------- <br>// File:        App.cxx <br>// <br>// Classes:     CController <br>// <br>// Functions:   WinMain <br>//              WndProc <br>//              MakeWindowClass <br>//              AboutDlgProc <br>//PropDlgProc <br>// <br>// History:     22-Jan-1993     asmusf  created <br>//---------------------------------------------------------- <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include "app.hxx" <br> <br>// global for use by PropDlgProc <br>CCTypeSet * pCSet = NULL; <br> <br> <br>//+-------------------------------------------------------- <br>// Class:       CController <br>// <br>// Purpose:     Controlling the application, UI handler <br>// <br>// History:     22-Jan-1993     asmusf  created <br>//---------------------------------------------------------- <br> <br>void CController::Create(HWND hwnd, LONG lParam ) <br>{ <br>    HANDLE handle = ((LPCREATESTRUCT) lParam)-&gt;hInstance; <br>    _hInst = (HINSTANCE)handle; <br>    _funAbout = (DLGPROC) MakeProcInstance((FARPROC)AboutDlgProc, _hInst); <br>_funProp = (DLGPROC) MakeProcInstance((FARPROC) PropDlgProc, _hInst ); <br> <br>    // Set up the Main View <br>    _pView = new CScrollableView(((LPCREATESTRUCT) lParam)-&gt;cx, <br>                                ((LPCREATESTRUCT) lParam)-&gt;cy); <br>    _pView-&gt;SetScale(100); <br> <br>    SetScrollRange(hwnd, SB_VERT, 0, PAGEHEIGHT, FALSE); <br>    SetScrollRange(hwnd, SB_HORZ, 0, PAGEWIDTH, FALSE); <br> <br>    SetScrollPos(hwnd, SB_HORZ, 0, TRUE ); <br>    SetScrollPos(hwnd, SB_VERT, 0, TRUE ); <br> <br>    // Set up the Model <br>    _pModel= new CModel(_hInst, hwnd, HEXADECIMAL, USEDONLY); <br> <br>    // Set up the initial state of the Menu <br>    Page(hwnd, IDM_FIRSTPAGE); <br> <br>    // initially no pop-up character box <br>    _pBox = 0; <br>} <br> <br>void CController::Destroy() <br>{ <br> <br>    FreeProcInstance((FARPROC)AboutDlgProc); <br> <br>    delete _pView; <br>    delete _pModel; <br>    PostQuitMessage(0); <br>} <br> <br>void CController::Size ( LONG lParam ) <br>{ <br>   _pView-&gt;SetSize ( LOWORD(lParam), HIWORD(lParam) ); <br>} <br> <br>// Message Box with text from resource file <br>void CController::AlertBox( HWND hwnd, UINT idsText, UINT fuStyle) <br>{ <br>    TCHAR szText[100]; <br>    TCHAR szCaption[100]; <br> <br>    LoadString(_hInst, idsText, (LPTSTR)szText, 100); <br>    LoadString(_hInst, IDS_MSGCAPTION, (LPTSTR)szCaption, 100); <br> <br>    ::MessageBox (hwnd, (LPTSTR)szText, (LPTSTR)szCaption, fuStyle) ; <br>}; <br> <br>// Menu commands processing <br> <br>void CController::Command ( HWND hwnd, WPARAM wID ) <br>{ <br>    switch ( wID ) <br>    { <br>      // File Menu <br>      case IDM_PRINT: <br>           { <br>                CPrintRequest job(hwnd, 1, _pModel-&gt;GetMaxPage()); <br> <br>                if(!job.Cancelled() &amp;&amp; !job.Error()) <br>                { <br>                    CPrintCanvas canvas (job); <br>                    job.Print (_hInst, canvas, _pModel); <br>                     <br>                    if(job.Error()) <br>                    { <br>                        AlertBox (hwnd, IDS_PRINTERR, MB_OK | MB_ICONEXCLAMATION) ; <br>                    } <br>                } <br>           } <br>           break; <br>      case IDM_EXIT: <br>           SendMessage ( hwnd, WM_CLOSE, 0L, 0L ); <br>           break; <br> <br>      // View Menu <br>      case IDM_NEXTPAGE: <br>           Page(hwnd, IDM_NEXTPAGE); <br>           break; <br>      case IDM_PREVPAGE: <br>           Page(hwnd, IDM_PREVPAGE); <br>           break; <br>      case IDM_NEXTSECTION: <br>           Page(hwnd, IDM_NEXTSECTION); <br>           break; <br>      case IDM_PREVSECTION: <br>           Page(hwnd, IDM_PREVSECTION); <br>           break; <br>      case IDM_ZOOMIN: <br>           { <br>               UINT iScale; <br>               _pView-&gt;GetScale(iScale); <br>               iScale -= (iScale &gt; 50 ? 25 : 0); <br>               _pView-&gt;SetScale(iScale); <br>               _pView-&gt;Invalidate(hwnd); <br>           } <br>           break; <br>      case IDM_ZOOMOUT: <br>           { <br>               UINT iScale; <br>               _pView-&gt;GetScale(iScale); <br>               iScale += (iScale &lt; 200 ? 25 : 0); <br>               _pView-&gt;SetScale(iScale); <br>               _pView-&gt;Invalidate(hwnd); <br>           } <br>           break; <br> <br>      // Options Menu <br>      case IDM_FONT: <br>           _pModel-&gt;ChooseFont(hwnd); <br>           _pView-&gt;Invalidate(hwnd); <br>           break; <br>     case IDM_DECIMAL: <br>           { <br>               UINT fuFormat; <br>               _pModel-&gt;GetFormat(fuFormat); <br>               fuFormat ^= DECIMAL; <br>               CheckMenuItem (GetMenu(hwnd), IDM_DECIMAL,  <br>                        fuFormat &amp; DECIMAL ? MF_CHECKED : MF_UNCHECKED ) ; <br>              _pModel-&gt;SetFormat(fuFormat); <br>           } <br>           _pView-&gt;Invalidate(hwnd); <br>           break; <br>      case IDM_ALLPAGES: <br>           { <br>               UINT fPageMode; <br>               _pModel-&gt;GetPageMode(fPageMode); <br>               fPageMode ^= ALLPAGES; <br>               CheckMenuItem (GetMenu(hwnd), IDM_ALLPAGES,  <br>                        fPageMode &amp; ALLPAGES ? MF_CHECKED : MF_UNCHECKED ) ; <br>               _pModel-&gt;SetPageMode(fPageMode); <br>           } <br>           _pView-&gt;Invalidate(hwnd); <br>           break; <br> <br>  case IDM_SHOWPROP: <br>     { <br>   DialogBox( _hInst, TEXT("PROPERTIES"),hwnd, _funProp ); <br>   _pModel-&gt;SetCSet(pCSet); <br>   } <br>           _pView-&gt;Invalidate(hwnd); <br>   break; <br> <br>      // Help Menu <br>      case IDM_HELP: <br>           AlertBox ( hwnd, IDS_NOTIMPLEM, MB_ICONINFORMATION | MB_OK); <br>           break; <br>      case IDM_ABOUT: <br>           DialogBox ( _hInst, TEXT("AboutBox"), hwnd, _funAbout ); <br>           break; <br>     } <br>} <br> <br>void CController::Page(HWND hwnd, WPARAM wParam) <br>{ <br>    UINT iPage = _pModel-&gt;GetPage(); <br>    switch (wParam) <br>    { <br>    case IDM_PREVPAGE:  <br>        _pModel-&gt;PrevPage(); <br>        break;   <br>    case IDM_NEXTPAGE: <br>        _pModel-&gt;NextPage(); <br>        break;   <br>    case IDM_NEXTSECTION: <br>        _pModel-&gt;NextSection(); <br>        break; <br>    case IDM_PREVSECTION: <br>        _pModel-&gt;PrevSection(); <br>        break; <br>    case IDM_FIRSTPAGE: <br>        _pModel-&gt;SetPage( 0 ); <br>        break;   <br>    case IDM_LASTPAGE: <br>        _pModel-&gt;SetPage( _pModel-&gt;GetMaxPage() -1 ); <br>        break;   <br>    } <br>    if (iPage != _pModel-&gt;GetPage()) <br>    {    <br>        _pView-&gt;Invalidate(hwnd); <br>    } <br>    HMENU hmenu = GetMenu(hwnd); <br> <br>    EnableMenuItem (hmenu, IDM_PREVPAGE, _pModel-&gt;CanPrevPage()  ? <br>                      MF_ENABLED : MF_DISABLED | MF_GRAYED ) ; <br>    EnableMenuItem (hmenu, IDM_NEXTPAGE, _pModel-&gt;CanNextPage() ? <br>                      MF_ENABLED : MF_DISABLED | MF_GRAYED ) ; <br>    EnableMenuItem (hmenu, IDM_NEXTSECTION, _pModel-&gt;CanNextSection() ? <br>                      MF_ENABLED : MF_DISABLED | MF_GRAYED ) ; <br>    EnableMenuItem (hmenu, IDM_PREVSECTION,_pModel-&gt;CanPrevSection() ? <br>                      MF_ENABLED : MF_DISABLED | MF_GRAYED ) ; <br>} <br> <br>void CController::ButtonDown(HWND hwnd, LONG lParam ) <br>{ <br>    static RECT rc; <br>    SetCapture (hwnd); <br> <br>// second mouse click removes pop-up box <br>    if( _pBox ) <br>    { <br>        delete _pBox; <br>        _pBox = 0; <br>_pView-&gt;Invalidate(hwnd, &amp;rc); <br>        return; <br>    } <br>     <br>// locate character selected <br>    CScreenCanvas canvas(hwnd); <br>     <br>    POINT pt = {LOWORD(lParam), HIWORD(lParam)}; <br> <br>    UINT iChar = _pView-&gt;Hittest(canvas, pt, _pModel); <br>     <br>    if( iChar == 0xFFFF ) <br>    { <br>        return;  // no char selected <br>    } <br> <br>// create the pop-up box <br>    SIZE size = { 4*(INCH1-INCH8)/5, INCH1}; <br>    CBoxFormat bxf(size); <br> <br>    HFONT hfont = _pModel-&gt;GetFont(); <br>    _pBox = new CBox(bxf, iChar, hfont);  <br> <br> <br>// match current format <br>    UINT fuFormat; <br>_pModel-&gt;GetFormat(fuFormat); <br>_pBox-&gt;SetFormat(fuFormat &amp; DECIMAL); <br> <br> <br>    canvas.DPtoLP(&amp;pt); <br>    pt.x -= size.cx/2; <br>    pt.y -= size.cy/2; <br>#ifdef UNICODE <br>    pt.x -= size.cx; // accommodate wider popup <br>#endif <br> <br>    GetClientRect(hwnd, &amp;rc); <br> <br>// show it <br>    _pBox-&gt;Paint(canvas, pt, rc); <br> <br>//--- dead code.... <br>    size = _pBox-&gt;GetSize(); <br>     <br>POINT ptSize; <br>ptSize.x = size.cx; <br>ptSize.y = size.cy; <br>canvas.LPtoDP(&amp;ptSize); <br>pt.x+=ptSize.x; <br>pt.y+=ptSize.y; <br>} <br> <br>void CController::ButtonUp(HWND hwnd, LONG lParam ) <br>{ <br>    ReleaseCapture(); <br>} <br> <br>void CController::KeyDown(HWND hwnd, WPARAM wParam, LPARAM lParam) <br>{ <br>    switch( wParam ) <br>    { <br>    case VK_PRIOR: <br>         Page(hwnd, IDM_PREVPAGE); <br>         break; <br>    case VK_NEXT: <br>         Page(hwnd, IDM_NEXTPAGE); <br>         break; <br>    case VK_HOME: <br>         Page(hwnd, IDM_FIRSTPAGE); <br>         break; <br>    case VK_END: <br>         Page(hwnd, IDM_LASTPAGE); <br>         break; <br>    case VK_UP: <br>         _pView-&gt;SetVScrollPos(hwnd, SB_LINEUP, lParam, _pModel);        <br>         break; <br>    case VK_DOWN: <br>         _pView-&gt;SetVScrollPos(hwnd, SB_LINEDOWN, lParam, _pModel);      <br>         break; <br>    case VK_LEFT: <br>         _pView-&gt;SetHScrollPos(hwnd, SB_LINEUP, lParam, _pModel);        <br>         break; <br>    case VK_RIGHT: <br>         _pView-&gt;SetHScrollPos(hwnd, SB_LINEDOWN, lParam, _pModel);      <br>         break; <br>    } <br>} <br> <br>void CController::KeyUp(HWND hwnd, WPARAM wParam, LPARAM lParam) <br>{ <br>} <br> <br>void CController::HScroll(HWND hwnd, WPARAM wParam, LPARAM lParam) <br>{ <br>if (_pBox) <br>{ <br>// Remove box by simulating second mouse click <br>ButtonDown(hwnd, 0);  <br>UpdateWindow(hwnd); <br>} <br>    _pView-&gt;SetHScrollPos(hwnd, wParam, lParam, _pModel);        <br>} <br> <br>void CController::VScroll(HWND hwnd, WPARAM wParam, LPARAM lParam) <br>{ <br>if (_pBox) <br>{ <br>// Remove box by simulating second mouse click <br>ButtonDown(hwnd, 0);  <br>UpdateWindow(hwnd); <br>} <br>    _pView-&gt;SetVScrollPos(hwnd, wParam, lParam, _pModel);        <br>} <br> <br>// Main application <br> <br>// WinMain - Main window funtion <br>// <br>int WINAPI WinMain <br>   ( HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR cmdParam, int cmdShow ) <br>{ <br>    TCHAR  szAppName [] = TEXT("Grid") ; <br>    TCHAR  szCaption [] = TEXT("Character Grid") ; <br> <br>    // Create Window Class <br>  <br>    if ( hPrevInst == 0 ) <br>    { <br>        MakeWindowClass ( WndProc, szAppName, hInst ); <br>    } <br> <br>    // Create Window <br>     <br>    CWindow win ( szCaption, szAppName, hInst ); <br>     <br>    win.Show ( cmdShow ); <br>     <br>    MSG  msg; <br>     <br>    while ( GetMessage (&amp;msg, NULL, 0, 0 ) ) <br>    { <br>        TranslateMessage ( &amp;msg ); <br>        DispatchMessage ( &amp;msg ); <br>    } <br>     <br>    return msg.wParam; <br>} <br> <br>// Make Window Class <br>// <br>void MakeWindowClass ( WNDPROC WndProc, LPTSTR szAppName, HINSTANCE hInst ) <br>{ <br>    WNDCLASS cl; <br>    <br>    cl.style = CS_HREDRAW | CS_VREDRAW; <br>    cl.lpfnWndProc = WndProc; <br>    cl.cbClsExtra = 0; <br>    cl.cbWndExtra = 0; <br>    cl.hInstance = hInst; <br>    cl.hIcon = LoadIcon ( hInst, szAppName ); <br>    cl.hCursor = LoadCursor ( NULL, IDC_ARROW ); <br>    cl.hbrBackground = GetStockBrush ( WHITE_BRUSH ); <br>    cl.lpszMenuName = szAppName; <br>    cl.lpszClassName = szAppName; <br>    <br>    RegisterClass (&amp;cl); <br>} <br> <br>// Window Proc <br>// <br> <br>LRESULT CALLBACK WndProc ( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam ) <br>{ <br>    static CController ctrl; <br> <br>    switch (message) <br>    { <br>        case WM_CREATE: <br>            ctrl.Create(hwnd, lParam); <br>            return 0; <br>        case WM_SIZE: <br>            ctrl.Size(lParam); <br>            return 0; <br>        case WM_PAINT: <br>            ctrl.Paint(hwnd); <br>            return 0; <br>        case WM_COMMAND: <br>            ctrl.Command(hwnd, wParam); <br>            return 0; <br>        case WM_LBUTTONUP: <br>            ctrl.ButtonUp(hwnd, lParam); <br>            return 0; <br>        case WM_LBUTTONDOWN: <br>            ctrl.ButtonDown(hwnd, lParam); <br>            return 0; <br>        case WM_KEYUP: <br>            ctrl.KeyUp(hwnd, wParam, lParam); <br>            return 0; <br>        case WM_KEYDOWN: <br>            ctrl.KeyDown(hwnd, wParam, lParam); <br>            return 0; <br>        case WM_VSCROLL: <br>            ctrl.VScroll(hwnd, wParam, lParam ); <br>            return 0; <br>        case WM_HSCROLL: <br>            ctrl.HScroll(hwnd, wParam, lParam ); <br>            return 0; <br>        case WM_DESTROY: <br>            ctrl.Destroy(); <br>            return 0; <br> <br>    } <br>    return DefWindowProc (hwnd, message, wParam, lParam ); <br>} <br> <br>// "About" dialog box procedure <br>// Process messages from dialog box <br>// <br> <br>BOOL CALLBACK AboutDlgProc <br>   ( HWND hwnd, UINT message, WPARAM wParam, LONG lParam ) <br>{ <br> <br>    switch(message) <br>    { <br>       case WM_INITDIALOG: <br>            return TRUE; <br>       case WM_COMMAND: <br>            switch (wParam) //Command ID <br>            { <br>               case IDOK: <br>               case IDCANCEL: <br>                    EndDialog(hwnd, 0); <br>                    return TRUE; <br>            } <br>            break; <br>    } <br>    return FALSE; <br>} <br> <br>extern CPrintAux PrGlobal; <br> <br>//======== PrintDlgProc =========================================== <br> <br>BOOL CALLBACK PrintDlgProc <br>   ( HWND hwndDlg, UINT message, WPARAM wParam, LPARAM lParam ) <br>{ <br>    switch (message) <br>    { <br>        case WM_INITDIALOG: <br>             SetWindowText (hwndDlg, (TCHAR *)lParam) ; <br>             EnableMenuItem (GetSystemMenu (hwndDlg, FALSE), SC_CLOSE, MF_GRAYED) ; <br>             return TRUE ; <br> <br>        case WM_COMMAND: <br>             PrGlobal._bUserAbort = TRUE ; <br>             EnableWindow (GetParent (hwndDlg), TRUE) ; <br>             DestroyWindow (hwndDlg) ; <br>             PrGlobal._hDlgPrint = 0 ; <br>             return TRUE ; <br>    } <br>    return FALSE ; <br>} <br> <br>//======== AbortProc =========================================== <br> <br>BOOL CALLBACK AbortProc(HDC hdcPrn, short nCode) <br>{ <br>    MSG   msg ; <br> <br>    while (!PrGlobal._bUserAbort &amp;&amp; PeekMessage (&amp;msg, NULL, 0, 0, PM_REMOVE)) <br>    { <br>        if (!PrGlobal._hDlgPrint  <br>                ||  <br>            !IsDialogMessage (PrGlobal._hDlgPrint, &amp;msg)) <br>        { <br>            TranslateMessage (&amp;msg) ; <br>            DispatchMessage (&amp;msg) ; <br>        } <br>    } <br>    return !PrGlobal._bUserAbort ; <br>} <br> <br> <br>//======== PropDlgProc =========================================== <br>struct t_Ctype <br>{ <br>WORD fVal[3]; <br>LPTSTRpszName; <br>} vCtype [] =  { <br> 0x0001,0,0, TEXT("UPPER "),  // A <br> 0x0002,0,0, TEXT("LOWER "),  //a <br> 0x0004,0,0, TEXT("DIGIT "),  //1 <br> 0x0008,0,0, TEXT("SPACE "),  //_ <br> 0x0010,0,0, TEXT("PUNCT "),  //! <br> 0x0020,0,0, TEXT("CNTRL "), <br> 0x0040,0,0, TEXT("BLANK "), <br> 0x0080,0,0, TEXT("XDIGIT "),//x <br> 0x0100,0,0, TEXT("ALPHA "),  //alpha <br> <br> 0, 0x0001,0, TEXT("LEFTTORIGHT "), //&gt; <br> 0, 0x0002,0, TEXT("RIGHTTOLEFT "), //&lt; <br> 0, 0x0003,0, TEXT("EUROPENUMBER "), <br> 0, 0x0004,0, TEXT("EUROPESEPARATOR "), <br> 0, 0x0005,0, TEXT("EUROPETERMINATOR "), <br> 0, 0x0006,0, TEXT("ARABICNUMBER "), <br> 0, 0x0007,0, TEXT("COMMONSEPARATOR "), <br> 0, 0x0008,0, TEXT("BLOCKSEPARATOR "), <br> 0, 0x0009,0, TEXT("SEGMENTSEPARATOR "), <br> 0, 0x000a,0, TEXT("WHITESPACE "),  // _ <br> 0, 0x000b,0, TEXT("OTHERNEUTRAL "),  //&lt;&gt; <br> <br> 0,0,0x0001, TEXT("NONSPACING "), <br> 0,0,0x0002, TEXT("DIACRITIC "),  //  " <br> 0,0,0x0004, TEXT("VOWELMARK "), <br> 0,0,0x0008, TEXT("SYMBOL "),  //  = <br> 0,0,0x0010, TEXT("KATAKANA "),  //  katakana a <br> 0,0,0x0020, TEXT("HIRAGANA "),  //  hiragana a <br> 0,0,0x0040, TEXT("HALFWIDTH "),  //  han <br> 0,0,0x0080, TEXT("FULLWIDTH "),  //  zen <br> 0,0,0x0100, TEXT("IDEOGRAPH "),  //  kan <br> 0,0,0x0200, TEXT("KASHIDA "), <br> 0,0,0x0400, TEXT("LEXICAL "), <br> 0,0,0x8000, TEXT("C3ALPHA ")//  alpha <br>}; <br> <br> <br>BOOL CALLBACK PropDlgProc <br>   ( HWND hwndDlg, UINT message, WPARAM wParam, LPARAM lParam ) <br>{ <br>int i; <br>    switch (message) <br>    { <br>       case WM_INITDIALOG: <br>   for( i=0; i&lt;sizeof vCtype/sizeof t_Ctype; i++) <br>{ <br>   SendDlgItemMessage(hwndDlg, IDC_PROPLIST, LB_ADDSTRING, i, (LPARAM) vCtype[i].pszName); <br>} <br>            return TRUE; <br>       case WM_COMMAND: <br>            switch (wParam) //Command ID <br>            { <br>               case IDOK: <br>   if( pCSet ) <br>   { <br>delete pCSet; <br>} <br>   i = SendDlgItemMessage(hwndDlg, IDC_PROPLIST, LB_GETCARETINDEX, 0, 0); <br>   pCSet = new CCTypeSet(vCtype[i].fVal[0],vCtype[i].fVal[1], vCtype[i].fVal[2]); <br>                    EndDialog(hwndDlg, 0); <br>return TRUE; <br>               case IDCANCEL: <br>   if( pCSet ) <br>{ <br>delete pCSet; <br>} <br>                    EndDialog(hwndDlg, 0); <br>                    return TRUE; <br>            } <br>            break; <br>    } <br>    return FALSE ; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GETCAPS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3434"></a>GETCAPS.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/******************************************************************************\ <br>* <br>*  PROGRAM:     GETCAPS.C <br>* <br>*  PURPOSE:     Handles display of information returned by call to <br>*               GetDeviceCaps. GetDeviceCaps is called for the <br>*               currently selected deivce (in the tool bar comobobox), <br>*               and the results are formatted and displayed in a dialog <br>*               box. <br>* <br>*  FUNTIONS:    GetDeviceCapsDlgProc - handles messages for dialog <br>*               DisplayDeviceCapsInfo- retrieves device caps info <br>*               TranslateDeviceCaps  - displays a capability in listbox <br>*               ComplexDeviceCapsLine- formats a bitfield capability <br>* <br>\******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;winspool.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;winspool.h&gt; <br>#include "common.h" <br>#include "getcaps.h" <br>#include "resource.h" <br> <br>/******************************************************************************\ <br>* <br>*  FUNCTION:    GetDeviceCapsDlgProc (standard dialog procedure INPUTS/RETURNS) <br>* <br>*  COMMENTS:    Processes messages for GetDeviceCaps dialog box <br>* <br>\******************************************************************************/ <br> <br>LRESULT CALLBACK   GetDeviceCapsDlgProc (HWND   hwnd, UINT msg, WPARAM wParam, <br>                                         LPARAM lParam) <br>{ <br>  switch (msg) <br>  { <br>    case WM_INITDIALOG: <br>    { <br>      BOOL bReturn; <br>      char buf[BUFSIZE]; <br> <br>      SendDlgItemMessage (hwnd, DID_LISTBOX, WM_SETFONT, (WPARAM)GetStockObject(ANSI_FIXED_FONT), (LPARAM)0); <br> <br>  ghwndDevCaps = hwnd; <br> <br>      // <br>      // shove all the caps info in the list box <br>      // <br> <br>      SetCursor (LoadCursor (NULL, IDC_WAIT)); <br>      bReturn = DisplayDeviceCapsInfo (); <br>      SetCursor (LoadCursor (NULL, IDC_ARROW)); <br> <br>      if (!bReturn) <br>      { <br>        EndDialog (hwnd, TRUE); <br>      } <br> <br>      // <br>      // set window title to reflect current device <br>      // <br> <br>      else <br>      { <br>        sprintf (buf, "GetDeviceCaps: %s;%s;%s", gszDeviceName, gszPort, <br>                 gszDriverName); <br> <br>        SetWindowText (hwnd, (LPCSTR) buf); <br>      } <br> <br>      break; <br>    } <br> <br>    case WM_COMMAND: <br> <br>      switch (LOWORD (wParam)) <br>      { <br>        case DID_OK: <br> <br>          EndDialog (hwnd, TRUE); <br>          return 1; <br>      } <br>      break; <br>  } <br>  return 0; <br>} <br> <br> <br> <br>/******************************************************************************\ <br>* <br>*  FUNCTION:    DisplayDeviceCapsInfo <br>* <br>*  RETURNS:     TRUE if successful, <br>*               FALSE otherwise <br>* <br>*  COMMENTS:    Retrieves all device caps for current deivce &amp; calls <br>*                 TranslateCaps to insert them in the dialog's listbox. <br>* <br>\******************************************************************************/ <br> <br>BOOL DisplayDeviceCapsInfo () <br>{ <br>HDC hdc; <br>int i, iValue; <br> <br>if (!strcmp (gszDeviceName, "Display")) <br>{ <br>if (!(hdc = GetDC (ghwndDevCaps))) <br>{ <br>ErrMsgBox (GetStringRes(IDS_GETDCFAIL), ERR_MOD_NAME); <br>return FALSE; <br>} <br>} <br> <br>else <br>{ <br>if (!(hdc = CreateDC (gszDriverName, gszDeviceName, gszPort, NULL))) <br>{ <br>char buf[BUFSIZE]; <br> <br>sprintf (buf, GetStringRes(IDS_FMT_CREDCFAIL), <br>gszDriverName, gszDeviceName, gszPort); <br>ErrMsgBox (buf, ERR_MOD_NAME); <br>return FALSE; <br>} <br>} <br> <br>for (i = 0; i &lt; MAX_DEVICE_CAPS; i++) <br>{ <br>iValue = GetDeviceCaps (hdc, gaCaps[i].iValue); <br>TranslateDeviceCaps (i, gaCaps[i].iValue, iValue); <br>} <br> <br>if (!strcmp (gszDeviceName, "Display")) <br>ReleaseDC(ghwndDevCaps, hdc); <br>else <br>DeleteDC (hdc); <br> <br>return TRUE; <br>} <br> <br> <br> <br>/******************************************************************************\ <br>* <br>*  FUNCTION:    TranslateDeviceCaps <br>* <br>*  INPUTS:      arrayIndex - index into gaCaps[] <br>*               capIndex   - devcap index (eg. TECHNOLOGY, CURVECAPS) <br>*               iValue     - value returned by GetDeviceCaps <br>* <br>*  COMMENTS:    For simple devcaps (eg. tjose with single numeric return <br>*               value), appends caps value to string and inserts into <br>*               listbox. For "complex" caps (those returning multiple <br>*               bit-values) calls ComplexCapsLine which handles text <br>*               formattting &amp; insertion. <br>* <br>\******************************************************************************/ <br> <br>void TranslateDeviceCaps (int arrayIndex, int capIndex, int iValue) <br>{ <br>  char buf[BUFSIZE]; <br> <br>  strcpy (buf, gaCaps[arrayIndex].szValue); <br> <br>  switch (capIndex) <br>  { <br>    case TECHNOLOGY: <br>    { <br>      int     i; <br>       <br>      for (i = 0; i &lt; MAX_TECHNOLOGY_CAPS; i++) <br>        if (iValue == (gaTechnologyCaps + i)-&gt;iValue) <br>        { <br>          strcat(buf, (gaTechnologyCaps + i)-&gt;szValue); <br>          SendDlgItemMessage (ghwndDevCaps, DID_LISTBOX, LB_INSERTSTRING, <br>                              (UINT)-1, (LONG) buf); <br>          break; <br>        } <br>             <br>      break; <br>    } <br> <br>    case CURVECAPS: <br> <br>      ComplexDeviceCapsLine (buf, gaCurveCaps, MAX_CURVE_CAPS, iValue); <br>      break; <br> <br>    case LINECAPS: <br> <br>      ComplexDeviceCapsLine (buf, gaLineCaps, MAX_LINE_CAPS, iValue); <br>      break; <br> <br>    case POLYGONALCAPS: <br> <br>      ComplexDeviceCapsLine (buf, gaPolygonCaps, MAX_POLYGON_CAPS, iValue); <br>      break; <br> <br>    case TEXTCAPS: <br> <br>      ComplexDeviceCapsLine (buf, gaTextCaps, MAX_TEXT_CAPS, iValue); <br>      break; <br> <br>    case CLIPCAPS: <br> <br>      ComplexDeviceCapsLine (buf, gaClipCaps, MAX_CLIP_CAPS, iValue); <br>      break; <br> <br>    case RASTERCAPS: <br> <br>      ComplexDeviceCapsLine (buf, gaRasterCaps, MAX_RASTER_CAPS, iValue); <br>      break; <br> <br>    default: <br> <br>      wsprintf(buf, gaCaps[arrayIndex].szValue, iValue); <br> <br>      SendDlgItemMessage (ghwndDevCaps, DID_LISTBOX, LB_INSERTSTRING, <br>                          (UINT)-1, (LONG) buf); <br>      break; <br>  } <br>} <br> <br> <br> <br>/******************************************************************************\ <br>* <br>*  FUNCTION:     ComplexDeviceCapsLine <br>* <br>*  INPUTS:       pbuf        - pointer to buffer containing a cap-type <br>*                              string <br>*                pLkUp       - pointer to a CAPSLOOKUP table <br>*                iMaxEntries - # of enries in table pointed at by pLkUp <br>*                iValue      - an integer containing 1+ bit-value flags. <br>* <br>*  COMMENTS:     This function is used to expand an int containing <br>*                multiple bit-values into a set of strings which are <br>*                inserted into the DevCapsDlg listbox. The iValue <br>*                parameter is checked against each iIndex entry in the <br>*                CAPSLOOKUP table pointed at by pLkUp, and when matches <br>*                are found the corresponding (lpszValue) string is <br>*                inserted. <br>* <br>*                The buffer pointed to by pbuf will be destroyed. <br>* <br>\******************************************************************************/ <br> <br>void ComplexDeviceCapsLine (char *pbuf, CAPSLOOKUP *pLkUp, int iMaxEntries, <br>                     int iValue) <br>{ <br>  int  i; <br>  BOOL bNewLine = FALSE; <br> <br>  for (i = 0; i &lt; iMaxEntries; i++) <br> <br>    if (iValue &amp; (pLkUp + i)-&gt;iValue) <br>    { <br>      if (bNewLine) <br>      { <br>        // <br>        // Keep the first symbolic constant on the same line as the <br>        //   cap type, eg:  "TECHNOLOGY:     DT_RASDISPLAY". <br>        // <br> <br>        strcpy (pbuf, BLANKS); <br>        strcat (pbuf, (pLkUp + i)-&gt;szValue); <br>      } <br>      else <br>      { <br>        // <br>        // Put symbolic constant on new line, eg: <br>        //                  "                DT_RASPRINTER". <br>        // <br> <br>        strcat (pbuf, (pLkUp + i)-&gt;szValue); <br>        bNewLine = TRUE; <br>      } <br>      SendDlgItemMessage (ghwndDevCaps, DID_LISTBOX, LB_INSERTSTRING, <br>                          (UINT)-1, (LONG) pbuf); <br>   } <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

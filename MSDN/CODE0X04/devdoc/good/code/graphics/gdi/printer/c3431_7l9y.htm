<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GETPDRIV.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3436"></a>GETPDRIV.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/******************************************************************************\ <br>* <br>*  PROGRAM:     GETPDRIV.C <br>* <br>*  PURPOSE:     Handles display of information returned by call to <br>*               GetPrinterDriver. GetPrinterDriver is called for the <br>*               currently selected printer (in the tool bar comobobox), <br>*               and the results are formatted and displayed in a dialog <br>*               box. <br>* <br>*  FUNTIONS:    GetPrinterDriverDlgProc - handles messages for dialog <br>*               DisplayPrinterDriverInfo- retrieves &amp; displays printer <br>*                                           driver info <br>* <br>\******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;winspool.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;winspool.h&gt; <br>#include "common.h" <br>#include "getpdriv.h" <br>#include "resource.h" <br> <br>/******************************************************************************\ <br>* <br>*  FUNCTION:    GetPrinterDriverDlgProc (standard dlg proc INPUTS/RETURNS) <br>* <br>*  COMMENTS:    Processes messages for getPrinterDriver dialog box <br>* <br>\******************************************************************************/ <br> <br>LRESULT CALLBACK GetPrinterDriverDlgProc (HWND   hwnd,   UINT msg, <br>                                          WPARAM wParam, LPARAM lParam) <br>{ <br>  switch (msg) <br>  { <br>    case WM_INITDIALOG: <br>    { <br>      BOOL bReturn; <br>      char buf[BUFSIZE]; <br> <br>  // <br>      // shove all the printer driver info in the list box <br>      // <br>   <br>      SetCursor (LoadCursor (NULL, IDC_WAIT)); <br>      bReturn = DisplayPrinterDriverInfo (hwnd); <br>      SetCursor (LoadCursor (NULL, IDC_ARROW)); <br> <br>      if (!bReturn) <br>      { <br>        EndDialog (hwnd, TRUE); <br>      } <br> <br>      // <br>      // set window title to reflect current device <br>      // <br> <br>      else <br>      { <br>        sprintf (buf, "GetPrinterDriver: %s;%s;%s", gszDeviceName, gszPort, <br>                 gszDriverName); <br> <br>        SetWindowText (hwnd, (LPCSTR) buf); <br>      } <br> <br>      break; <br>    } <br> <br>    case WM_COMMAND: <br> <br>      switch (LOWORD (wParam)) <br>      { <br>        case DID_OK: <br> <br>          EndDialog (hwnd, TRUE); <br>          return 1; <br>      } <br>      break; <br>  } <br>  return 0; <br>} <br> <br> <br> <br>/******************************************************************************\ <br>* <br>*  FUNCTION:    DisplayPrinterDriverInfo <br>* <br>*  INPUTS:      hwnd - handle of GetPrinterDriver dialog box <br>* <br>*  RETURNS:     TRUE if successful, <br>*               FALSE otherwise <br>* <br>\******************************************************************************/ <br> <br> <br>BOOL DisplayPrinterDriverInfo (HWND hwnd) <br>{ <br>  HANDLE        hPrinter; <br>  DWORD         dwBytesNeeded; <br>  DRIVER_INFO_1 *pDriverInfo1; <br>  DRIVER_INFO_2 *pDriverInfo2; <br>  char          buf[BUFSIZE]; <br>  char          pEnvironment[BUFSIZE] = ""; <br>  BOOL          bReturn = TRUE; <br> <br>  // <br>  // open selected printer &amp; alloc buffers &amp; get sundry info, close printer <br>  // <br> <br>  OpenPrinter (gszDeviceName, &amp;hPrinter, NULL); <br> <br>  if (!hPrinter) <br>  { <br>    char buf[BUFSIZE]; <br> <br>    sprintf (buf, GetStringRes(IDS_FMT_OPNPRTFAIL), gszDeviceName); <br>    ErrMsgBox ((LPCSTR) buf, ERR_MOD_NAME); <br>    bReturn  = FALSE; <br>    goto display_prt_drv_info_done1; <br>  } <br> <br>  GetPrinterDriver (hPrinter, pEnvironment, 1, NULL, 0, &amp;dwBytesNeeded); <br> <br>  // <br>  // simple error checking, if these work assume rest will too <br>  // <br> <br>  if (!(pDriverInfo1 = (DRIVER_INFO_1 *) LocalAlloc (LPTR, dwBytesNeeded))) <br>  { <br>    ErrMsgBox (GetStringRes(IDS_LALLOCFAIL), ERR_MOD_NAME); <br>    bReturn = FALSE; <br>    goto display_prt_drv_info_done1; <br>  } <br> <br>  if (!GetPrinterDriver (hPrinter, pEnvironment, 1, (LPBYTE) pDriverInfo1, <br>                         dwBytesNeeded, &amp;dwBytesNeeded)) <br>  { <br>    ErrMsgBox (GetStringRes(IDS_GETPRTDRVFAIL), ERR_MOD_NAME); <br>    bReturn = FALSE; <br>    goto display_prt_drv_info_done2; <br>  } <br> <br>  GetPrinterDriver (hPrinter, pEnvironment, 2, NULL, 0, &amp;dwBytesNeeded); <br>  pDriverInfo2 = (DRIVER_INFO_2 *) LocalAlloc (LPTR, dwBytesNeeded); <br>  GetPrinterDriver (hPrinter, pEnvironment, 2, (LPBYTE) pDriverInfo2, <br>                    dwBytesNeeded, &amp;dwBytesNeeded); <br> <br>  ClosePrinter (hPrinter); <br> <br>  // <br>  // shove info in listbox <br>  // <br> <br>  sprintf (buf, gaDrvInfo[0]); <br>  outstr(); <br> <br>  sprintf (buf, gaDrvInfo[1], pDriverInfo1-&gt;pName); <br>  outstr(); <br> <br>  sprintf (buf, gaDrvInfo[2]); <br>  outstr(); <br> <br>  sprintf (buf, gaDrvInfo[3], pDriverInfo2-&gt;cVersion); <br>  outstr(); <br> <br>  sprintf (buf, gaDrvInfo[4], pDriverInfo2-&gt;pName); <br>  outstr(); <br> <br>  sprintf (buf, gaDrvInfo[5], pDriverInfo2-&gt;pEnvironment); <br>  outstr(); <br> <br>  sprintf (buf, gaDrvInfo[6], pDriverInfo2-&gt;pDriverPath); <br>  outstr(); <br> <br>  sprintf (buf, gaDrvInfo[7], pDriverInfo2-&gt;pDataFile); <br>  outstr(); <br> <br>  sprintf (buf, gaDrvInfo[8], pDriverInfo2-&gt;pConfigFile); <br>  outstr(); <br> <br>  LocalFree (LocalHandle (pDriverInfo2)); <br> <br>display_prt_drv_info_done2: <br> <br>  LocalFree (LocalHandle (pDriverInfo1)); <br> <br>display_prt_drv_info_done1: <br> <br>  return bReturn; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRINTER.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3441"></a>PRINTER.H</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/******************************************************************************\ <br>* <br>*                                PRINTER.H <br>* <br>\******************************************************************************/ <br> <br>#define MAX_MAP_MODES             8    // # items in gaMMLookup <br>#define MAX_PENWIDTHS             8    // # items in gaPenWidths <br>#define MAX_PENSTYLES             7    // # items in gaPenStyles <br>#define MAX_BRUSHSTYLES           6    // # items in gaBrushStyles <br> <br>#define ERR_MOD_NAME             IDS_ERR_PRINTER <br> <br>/******************************************************************************\ <br>*                                 TYPEDEFS <br>\******************************************************************************/ <br> <br>typedef struct tagMAPMODELOOKUP <br>{ <br>  WORD   wMenuItem; <br>  int    iMapMode; <br> <br>} MAPMODELOOKUP; <br> <br>typedef struct tagGRAPHICLOOKUP <br>{ <br>  WORD   wMenuItem; <br>  DWORD  dwGraphic; <br> <br>} GRAPHICLOOKUP; <br> <br>typedef struct tagPENWIDTHLOOKUP <br>{ <br>  WORD   wMenuItem; <br>  int    iPenWidth; <br> <br>} PENWIDTHLOOKUP; <br> <br>typedef struct tagPENSTYLELOOKUP <br>{ <br>  WORD   wMenuItem; <br>  int    iPenStyle; <br> <br>} PENSTYLELOOKUP; <br> <br>typedef struct tagBRUSHSTYLELOOKUP <br>{ <br>  WORD   wMenuItem; <br>  int    iBrushStyle; <br> <br>} BRUSHSTYLELOOKUP; <br> <br>typedef struct tagSTATUSBARLOOKUP <br>{ <br>  WORD   wMenuItem; <br>  LPCSTR szText; <br> <br>} STATUSBARLOOKUP; <br> <br> <br> <br>/******************************************************************************\ <br>*                                GLOBAL VARS <br>\******************************************************************************/ <br> <br>HANDLE  ghInst;                        // app instance handle <br>HWND    ghwndMain;                     // main app window handle <br>HWND    ghwndAbort;                    // Abort dialog handle <br>LONG    glcyMenu;                      // menu height <br>DWORD   gdwGraphicsOptions = DRAWAXIS; // current graphic options (to display) <br>int     giMapMode = MM_TEXT;           // current map mode <br>HDC     ghdc;                          // device context to print on <br>BOOL    gbAbort;                       // AbortProc return code <br> <br>char    gszDeviceName[BUFSIZE];        // current device name <br>char    gszPort      [BUFSIZE];        // current port <br>char    gszDriverName[BUFSIZE];        // current driver name <br> <br>DWORD   gdwPenColor   = 0x00ff00;      // current pen color <br>DWORD   gdwBrushColor = 0x0000ff;      // current brush color <br>DWORD   gdwTextColor =  0xff0000;      // current text color <br> <br>int     giPenStyle   = PS_SOLID;       // current pen style <br>int     giPenWidth   = 1;              // current pen width <br>int     giBrushStyle = HS_HORIZONTAL;    // current brush style <br> <br>MAPMODELOOKUP gaMMLookup[] = <br> <br>    { { IDM_HIENGLISH  , MM_HIENGLISH   }, <br>      { IDM_HIMETRIC   , MM_HIMETRIC    }, <br>      { IDM_LOENGLISH  , MM_LOENGLISH   }, <br>      { IDM_LOMETRIC   , MM_LOMETRIC    }, <br>      { IDM_TWIPS      , MM_TWIPS       }, <br>      { IDM_ISOTROPIC  , MM_ISOTROPIC   }, <br>      { IDM_ANISOTROPIC, MM_ANISOTROPIC }, <br>      { IDM_TEXT       , MM_TEXT        } }; <br> <br>GRAPHICLOOKUP gaGraphicLookup[] = <br> <br>    { { IDM_ARC        , ARC         }, <br>      { IDM_ELLIPSE    , ELLIPSE     }, <br>      { IDM_LINETO     , LINETO      }, <br>      { IDM_PIE        , PIE         }, <br>      { IDM_PLGBLT     , PLG_BLT     }, <br>      { IDM_POLYBEZIER , POLYBEZIER  }, <br>      { IDM_POLYGON    , POLYGON     }, <br>      { IDM_POLYLINE   , POLYLINE    }, <br>      { IDM_POLYPOLYGON, POLYPOLYGON }, <br>      { IDM_RECTANGLE  , RECTANGLE   }, <br>      { IDM_ROUNDRECT  , ROUNDRECT   }, <br>      { IDM_STRETCHBLT , STRETCH_BLT } }; <br> <br>PENWIDTHLOOKUP gaPenWidths[] = <br> <br>    { { IDM_PENWIDTH_1, 1 }, <br>      { IDM_PENWIDTH_2, 2 }, <br>      { IDM_PENWIDTH_3, 3 }, <br>      { IDM_PENWIDTH_4, 4 }, <br>      { IDM_PENWIDTH_5, 5 }, <br>      { IDM_PENWIDTH_6, 6 }, <br>      { IDM_PENWIDTH_7, 7 }, <br>      { IDM_PENWIDTH_8, 8 } }; <br> <br>PENSTYLELOOKUP gaPenStyles[] = <br> <br>    { { IDM_PENCOLOR_SOLID      , PS_SOLID      }, <br>      { IDM_PENCOLOR_DASH       , PS_DASH       }, <br>      { IDM_PENCOLOR_DOT        , PS_DOT        }, <br>      { IDM_PENCOLOR_DASHDOT    , PS_DASHDOT    }, <br>      { IDM_PENCOLOR_DASHDOTDOT , PS_DASHDOTDOT }, <br>      { IDM_PENCOLOR_NULL       , PS_NULL       }, <br>      { IDM_PENCOLOR_INSIDEFRAME, PS_INSIDEFRAME} }; <br> <br>BRUSHSTYLELOOKUP gaBrushStyles[] = <br> <br>    { { IDM_BRUSHSTYLE_HORIZONTAL     , HS_HORIZONTAL     }, <br>      { IDM_BRUSHSTYLE_VERTICAL       , HS_VERTICAL       }, <br>      { IDM_BRUSHSTYLE_FDIAGONAL      , HS_FDIAGONAL      }, <br>      { IDM_BRUSHSTYLE_BDIAGONAL      , HS_BDIAGONAL      }, <br>      { IDM_BRUSHSTYLE_CROSS          , HS_CROSS          }, <br>      { IDM_BRUSHSTYLE_DIAGCROSS      , HS_DIAGCROSS      } }; <br> <br> <br> <br> <br>/******************************************************************************\ <br>*                            FUNCTION PROTOTYPES <br>\******************************************************************************/ <br> <br>LRESULT CALLBACK MainWndProc   (HWND, UINT, WPARAM, LPARAM); <br>LRESULT CALLBACK AboutDlgProc  (HWND, UINT, WPARAM, LPARAM); <br>LRESULT CALLBACK AbortDlgProc  (HWND, UINT, WPARAM, LPARAM); <br> <br>BOOL    CALLBACK AbortProc     (HDC, int); <br> <br>void    InvalidateClient       (void); <br>void    RefreshPrinterCombobox (HWND); <br>void    PrintThread            (LPVOID); </code></pre>
<p>&nbsp;</p></body>
</HTML>

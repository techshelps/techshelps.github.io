<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WININFO.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3409"></a>WININFO.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*---------------------------------------------------------------------------*\ <br>| WINDOW INFORMATION MODULE <br>|   This module contains the routines which deal with obtaining the extra <br>|   object information associated with a window.  For these to work, the <br>|   window class must reserve the 0th word of the win-class object to be <br>|   used to hold global-memory handle. <br>\*---------------------------------------------------------------------------*/ <br> <br>#include &lt;windows.h&gt; <br>#include "gdidemo.h" <br> <br>/*---------------------------------------------------------------------------*\ <br>| ALLOC WINDOW INFO <br>|   This routine allocates memory out of the application heap for storing <br>|   extra memory for the window.  It is alway referenced as offset 0. <br>\*---------------------------------------------------------------------------*/ <br>BOOL FAR AllocWindowInfo(HWND hWnd, WORD wSize) <br>{ <br>    HANDLE hsd; <br> <br> <br>    if(hsd = LocalAlloc(LHND,(WORD)wSize)) <br>    { <br>        SetWindowLong(hWnd,0,(LONG)hsd); <br>        return(TRUE); <br>    } <br>    return(FALSE); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| LOCK WINDOW INFO <br>|   This routine de-references the extra-memory associated with the window. <br>|   it locks the object and gives the caller a pointer to the memory. <br>\*---------------------------------------------------------------------------*/ <br>PVOID FAR LockWindowInfo(HWND hWnd) <br>{ <br>    HANDLE hMem; <br>    PVOID  pMem; <br> <br> <br>    pMem = NULL; <br>    if(hMem = (HANDLE)GetWindowLong(hWnd,0)) <br>        pMem = (PVOID)LocalLock(hMem); <br> <br>    return(pMem); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| UNLOCK WINDOW INFO <br>|   This routine unlocks the memory the caller has previously locked. <br>\*---------------------------------------------------------------------------*/ <br>BOOL FAR UnlockWindowInfo(HWND hWnd) <br>{ <br>    HANDLE hMem; <br> <br> <br>    if(hMem = (HANDLE)GetWindowLong(hWnd,0)) <br>        if(!LocalUnlock(hMem)) <br>            return(TRUE); <br> <br>    return(FALSE); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| FREE WINDOW INFO <br>|   This routine frees the object memory associated with the window. <br>\*---------------------------------------------------------------------------*/ <br>BOOL FAR FreeWindowInfo(HWND hWnd) <br>{ <br>    LOCALHANDLE hMem; <br> <br> <br>    if(hMem = (HANDLE)GetWindowLong(hWnd,0)) <br>        LocalFree(hMem); <br>    return(TRUE); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INIT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3403"></a>INIT.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*---------------------------------------------------------------------------*\ <br>| INITIALIZATION MODULE <br>|   This module contains startup-routines for the creation of windows for this <br>|   application. <br>| <br>|   RegisterAppClass <br>|   UnregisterAppClass <br>|   CreateAppWindow <br>|   CreateMDIClientWindow <br>| <br>\*---------------------------------------------------------------------------*/ <br> <br>#include &lt;windows.h&gt; <br>#include "gdidemo.h" <br>#include "poly.h" <br>#include "xform.h" <br>#include "maze.h" <br>#include "draw.h" <br>#include "bounce.h" <br> <br>/*---------------------------------------------------------------------------*\ <br>| REGISTER APPLICATION CLASS <br>|   This routine registers all classes necessary for the application. <br>\*---------------------------------------------------------------------------*/ <br>BOOL FAR RegisterAppClass(HANDLE hInstance) <br>{ <br>    WNDCLASS wndClass; <br> <br> <br>    /* <br>    ** Set the common wndClass information.  This is common to all windows <br>    ** of this application. <br>    */ <br>    wndClass.style         = CS_HREDRAW | CS_VREDRAW; <br>    wndClass.cbClsExtra    = 0; <br>    wndClass.cbWndExtra    = sizeof(LONG); <br>    wndClass.hCursor       = LoadCursor(NULL,IDC_ARROW); <br>    wndClass.hInstance     = hInstance; <br> <br> <br>    /* <br>    ** Register the main top-level window (frame). <br>    */ <br>    wndClass.lpfnWndProc   = WndProc; <br>    wndClass.hIcon         = LoadIcon(hInstance,MAKEINTRESOURCE(APPICON)); <br>    wndClass.hbrBackground = GetStockObject(WHITE_BRUSH); <br>    wndClass.lpszMenuName  = MAKEINTRESOURCE(APPMENU); <br>    wndClass.lpszClassName = APPCLASS; <br> <br>    if(!RegisterClass(&amp;wndClass)) <br>        return(FALSE); <br> <br> <br>    /* <br>    ** Register the polybezier demo window. <br>    */ <br>    wndClass.lpfnWndProc   = PolyProc; <br>    wndClass.hIcon         = LoadIcon(NULL,IDI_APPLICATION); <br>    wndClass.hbrBackground = GetStockObject(BLACK_BRUSH); <br>    wndClass.lpszMenuName  = NULL; <br>    wndClass.lpszClassName = POLYCLASS; <br> <br>    if(!RegisterClass(&amp;wndClass)) <br>    { <br>        UnregisterClass(APPCLASS,hInstance); <br>        return(FALSE); <br>    } <br> <br> <br>    /* <br>    ** Register the xform demo window. <br>    */ <br>    wndClass.lpfnWndProc   = XFormProc; <br>    wndClass.hIcon         = LoadIcon(NULL,IDI_APPLICATION); <br>    wndClass.hbrBackground = GetStockObject(BLACK_BRUSH); <br>    wndClass.lpszMenuName  = NULL; <br>    wndClass.lpszClassName = XFORMCLASS; <br> <br>    if(!RegisterClass(&amp;wndClass)) <br>    { <br>        UnregisterClass(APPCLASS ,hInstance); <br>        UnregisterClass(POLYCLASS,hInstance); <br>        return(FALSE); <br>    } <br> <br> <br>    /* <br>    ** Register the maze demo window. <br>    */ <br>    wndClass.lpfnWndProc   = MazeProc; <br>    wndClass.hIcon         = LoadIcon(NULL,IDI_APPLICATION); <br>    wndClass.hbrBackground = GetStockObject(BLACK_BRUSH); <br>    wndClass.lpszMenuName  = NULL; <br>    wndClass.lpszClassName = MAZECLASS; <br> <br>    if(!RegisterClass(&amp;wndClass)) <br>    { <br>        UnregisterClass(APPCLASS  ,hInstance); <br>        UnregisterClass(POLYCLASS ,hInstance); <br>        UnregisterClass(XFORMCLASS,hInstance); <br>        return(FALSE); <br>    } <br> <br> <br>    /* <br>    ** Register the random draw demo window. <br>    */ <br>    wndClass.lpfnWndProc   = DrawProc; <br>    wndClass.hIcon         = LoadIcon(NULL,IDI_APPLICATION); <br>    wndClass.hbrBackground = GetStockObject(WHITE_BRUSH); <br>    wndClass.lpszMenuName  = NULL; <br>    wndClass.lpszClassName = DRAWCLASS; <br> <br>    if(!RegisterClass(&amp;wndClass)) <br>    { <br>        UnregisterClass(APPCLASS  ,hInstance); <br>        UnregisterClass(POLYCLASS ,hInstance); <br>        UnregisterClass(XFORMCLASS,hInstance); <br>        UnregisterClass(MAZECLASS ,hInstance); <br>        return(FALSE); <br>    } <br> <br> <br>    /* <br>    ** Register the bouncing ball demo window. <br>    */ <br>    wndClass.lpfnWndProc   = BounceProc; <br>    wndClass.hIcon         = LoadIcon(NULL,IDI_APPLICATION); <br>    wndClass.hbrBackground = GetStockObject(WHITE_BRUSH); <br>    wndClass.lpszMenuName  = NULL; <br>    wndClass.lpszClassName = BOUNCECLASS; <br> <br>    if(!RegisterClass(&amp;wndClass)) <br>    { <br>        UnregisterClass(APPCLASS  ,hInstance); <br>        UnregisterClass(POLYCLASS ,hInstance); <br>        UnregisterClass(XFORMCLASS,hInstance); <br>        UnregisterClass(MAZECLASS ,hInstance); <br>        UnregisterClass(DRAWCLASS ,hInstance); <br>        return(FALSE); <br>    } <br> <br>    return(TRUE); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| UNREGISTER APPLICATION CLASS <br>|   This routine unregisters all classes registered for the application. <br>|   It is typically called upon termination of the application. <br>\*---------------------------------------------------------------------------*/ <br>VOID FAR UnregisterAppClass(HANDLE hInstance) <br>{ <br>    UnregisterClass(APPCLASS   ,hInstance); <br>    UnregisterClass(POLYCLASS  ,hInstance); <br>    UnregisterClass(XFORMCLASS ,hInstance); <br>    UnregisterClass(MAZECLASS  ,hInstance); <br>    UnregisterClass(DRAWCLASS  ,hInstance); <br>    UnregisterClass(BOUNCECLASS,hInstance); <br> <br>    return; <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| CREATE APPLICATION WINDOW <br>|   This routine creates the main top-level window. <br>\*---------------------------------------------------------------------------*/ <br>HWND FAR CreateAppWindow(HANDLE hInstance) <br>{ <br>    /* <br>    ** Upon creation of the window, initialize the extra object information. <br>    */ <br>    return(CreateWindow(APPCLASS,APPTITLE,WS_OVERLAPPEDWINDOW | WS_CLIPCHILDREN, <br>            CW_USEDEFAULT,CW_USEDEFAULT,CW_USEDEFAULT,CW_USEDEFAULT, <br>            NULL,NULL,hInstance,NULL)); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| CREATE MDI CLIENT WINDOW <br>|   This routine creates the client window which handles the MDI windows. <br>|   The window will eventually be size to fit into the frame-window's client <br>|   area. <br>\*---------------------------------------------------------------------------*/ <br>HWND FAR CreateMDIClientWindow(HWND hWndFrame) <br>{ <br>    HWND               hWndClient; <br>    HANDLE             hInstance; <br>    CLIENTCREATESTRUCT ccs; <br> <br> <br>    /* <br>    ** Initialize the client struct to point to define the menu and child <br>    ** identifiers.  The menu item specifies the parent menu in which the <br>    ** the list of MDI childs will be appended to this menu. <br>    */ <br>    ccs.hWindowMenu  = NULL; <br>    ccs.idFirstChild = 0; <br> <br> <br>    hInstance = GETINSTANCE(hWndFrame); <br> <br>    hWndClient = CreateWindow("MDICLIENT",NULL,WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE, <br>            0,0,1,1,hWndFrame,NULL,hInstance,(LPVOID)&amp;ccs); <br> <br>    return(hWndClient); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAZE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3404"></a>MAZE.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*---------------------------------------------------------------------------*\ <br>| MAZE MODULE <br>\*---------------------------------------------------------------------------*/ <br> <br>#include &lt;windows.h&gt; <br>#include "gdidemo.h" <br>#include  "maze.h" <br> <br>/*---------------------------------------------------------------------------*\ <br>| CREATE MAZE WINDOW PROCEDURE <br>\*---------------------------------------------------------------------------*/ <br>HWND FAR CreateMazeWindow(HWND hWndClient, int nItem) <br>{ <br>    HANDLE          hInstance; <br>    MDICREATESTRUCT mcs; <br>    static char buffer[256]; <br> <br> <br>    hInstance = GETINSTANCE(hWndClient); <br>    LoadString (hInstance, MAZETITLE, buffer, 256); <br> <br>    /* <br>    ** Initialize the MDI create struct for creation of the <br>    ** test window. <br>    */ <br>    mcs.szClass = MAZECLASS; <br>    mcs.szTitle = buffer; <br>    mcs.hOwner  = hInstance; <br>    mcs.x       = CW_USEDEFAULT; <br>    mcs.y       = CW_USEDEFAULT; <br>    mcs.cx      = CW_USEDEFAULT; <br>    mcs.cy      = CW_USEDEFAULT; <br>    mcs.style   = 0l; <br>    mcs.lParam  = (LONG)nItem; <br> <br>    return((HWND)SendMessage(hWndClient,WM_MDICREATE,0,(LONG)(LPMDICREATESTRUCT)&amp;mcs)); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| MAZE WINDOW PROCEDURE <br>\*---------------------------------------------------------------------------*/ <br>LONG APIENTRY MazeProc(HWND hWnd, UINT wMsg, WPARAM wParam, LONG lParam) <br>{ <br>    switch(wMsg) <br>    { <br>        case WM_CREATE: <br>            MazeCreateProc(hWnd); <br>            break; <br> <br> <br>        case WM_COMMAND: <br>            MazeCommandProc(hWnd,wParam,lParam); <br>            break; <br> <br>        case WM_TIMER: <br>            DrawMaze(hWnd); <br>            break; <br> <br> <br>        case WM_PAINT: <br>            MazePaintProc(hWnd); <br>            break; <br> <br> <br>        case WM_DESTROY: <br>            MazeDestroyProc(hWnd); <br>            break; <br> <br> <br>        default: <br>            return(DefMDIChildProc(hWnd,wMsg,wParam,lParam)); <br>    } <br>    return(0l); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| MAZE CREATE PROCEDURE <br>\*---------------------------------------------------------------------------*/ <br>BOOL MazeCreateProc(HWND hWnd) <br>{ <br>    PMAZEDATA ppd; <br> <br> <br>    if(AllocWindowInfo(hWnd,sizeof(MAZEDATA))) <br>    { <br>        if(ppd = (PMAZEDATA)LockWindowInfo(hWnd)) <br>        { <br>            UnlockWindowInfo(hWnd); <br>            return(TRUE); <br>        } <br>        FreeWindowInfo(hWnd); <br>    } <br>    return(FALSE); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| MAZE COMMAND PROCEDURE <br>\*---------------------------------------------------------------------------*/ <br>BOOL MazeCommandProc(HWND hWnd, WPARAM wParam, LONG lParam) <br>{ <br>    hWnd   = hWnd; <br>    wParam = wParam; <br>    lParam = lParam; <br> <br>    return(TRUE); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| MAZE PAINT PROCEDURE <br>\*---------------------------------------------------------------------------*/ <br>VOID MazePaintProc(HWND hWnd) <br>{ <br>    HDC         hDC; <br>    PAINTSTRUCT ps; <br> <br> <br>    if(hDC = BeginPaint(hWnd,&amp;ps)) <br>        EndPaint(hWnd,&amp;ps); <br> <br>    return; <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| MAZE DESTROY PROCEDURE <br>\*---------------------------------------------------------------------------*/ <br>VOID MazeDestroyProc(HWND hWnd) <br>{ <br>    KillTimer(hWnd,1); <br>    FreeWindowInfo(hWnd); <br>    return; <br>} <br> <br> <br>VOID DrawMaze(HWND hWnd) <br>{ <br>    hWnd = hWnd; <br> <br>    return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

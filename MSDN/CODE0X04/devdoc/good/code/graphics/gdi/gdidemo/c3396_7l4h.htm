<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GDIDEMO.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3401"></a>GDIDEMO.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*---------------------------------------------------------------------------*\ <br>| GDIDEMO MODULE <br>|   This is the main entry-point module for the GDIDEMO application.  It is <br>|   intended to provide simple demonstrations of graphical functionality of <br>|   WIN32.  This module is only concerned with the FRAME-WINDOW object. <br>\*---------------------------------------------------------------------------*/ <br> <br>#include &lt;windows.h&gt; <br>#include "gdidemo.h" <br>#include "poly.h" <br>#include "xform.h" <br>#include "maze.h" <br>#include "draw.h" <br>#include "bounce.h" <br> <br>HWND hWndMDIClient = NULL; /* Handle to MDI client */ <br> <br>/*---------------------------------------------------------------------------*\ <br>| WINDOWS MAIN PROCEDURE <br>|   This is the process entry-point routine.  This is the basis for all <br>|   application events. <br>\*---------------------------------------------------------------------------*/ <br>int PASCAL WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR lpszLine, int nShow) <br>{ <br>    HWND hWndFrame; <br>    MSG  msg; <br> <br>    lpszLine = lpszLine; <br> <br>    /* <br>    ** If there's a previous instance of this application, then we do not need <br>    ** to register it again. <br>    */ <br>    if(!hPrevInst) <br>        if(!RegisterAppClass(hInst)) <br>            return(1); <br> <br> <br>    /* <br>    ** Enter the application message-polling loop.  This is the anchor for <br>    ** the application. <br>    */ <br>    msg.wParam = 1; <br>    if(hWndFrame = CreateAppWindow(hInst)) <br>    { <br>ShowWindow(hWndFrame,nShow); <br>        UpdateWindow(hWndFrame); <br> <br>        while(GetMessage(&amp;msg,NULL,0,0)) <br>        { <br>            if(!TranslateMDISysAccel(hWndMDIClient,&amp;msg)) { <br>                TranslateMessage(&amp;msg); <br>                DispatchMessage(&amp;msg); <br>            } <br>        } <br>    } <br>    UnregisterAppClass(hInst); <br> <br>    return(msg.wParam); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| CLIENT WINDOW PROCEDURE <br>|   This is the main window function for the client-window created.  This is <br>|   the frame window which encompasses the MDI control window. <br>\*---------------------------------------------------------------------------*/ <br>LONG APIENTRY WndProc(HWND hWndFrame, UINT wMsg, WPARAM wParam, LONG lParam) <br>{ <br>    HWND hWndClient; <br> <br> <br>    switch(wMsg) <br>    { <br>        /* <br>        ** Set up any pre-display stuff.  This is where we create the MDI <br>        ** control window. <br>        */ <br>        case WM_CREATE: <br>            CreateProc(hWndFrame); <br>/* <br>** DEMO MODE - These PostMessages Are for Demonstration Only <br>*/ <br>            PostMessage(hWndFrame,WM_COMMAND,IDM_DEMO_DRAW,0); <br>            PostMessage(hWndFrame,WM_COMMAND,IDM_DEMO_POLYBEZIER,0); <br>            PostMessage(hWndFrame,WM_COMMAND,IDM_DEMO_BOUNCE,0); <br>            PostMessage(hWndFrame,WM_COMMAND,IDM_WINDOW_TILE,0); <br> <br>            break; <br> <br> <br>        /* <br>        ** Paint the background of the frame.  This really is a NOP since <br>        ** the MDI control is displayed over the frame's client window. <br>        */ <br>        case WM_PAINT: <br>            PaintProc(hWndFrame); <br>            break; <br> <br> <br>        /* <br>        ** Time to die. <br>        */ <br>        case WM_DESTROY: <br>            DestroyProc(hWndFrame); <br>            break; <br> <br> <br>        /* <br>        ** Process the frame-commands.  We need to let the default handler <br>        ** have this event, since the MDI control handles the <br>        ** commands as well. <br>        */ <br>        case WM_COMMAND: <br>            CommandProc(hWndFrame,wParam,lParam); <br> <br> <br>        /* <br>        ** Since this is the frame-window, we need to grab the MDI client <br>        ** control window to pass to the MDI control.  We store this as <br>        ** part of the extra-object information for the frame-window. <br>        */ <br>        default: <br>            hWndClient = (HWND)GetWindowLong(hWndFrame,CLIENTWND); <br>            return(DefFrameProc(hWndFrame,hWndClient,wMsg,wParam,lParam)); <br>    } <br>    return(0l); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| CLIENT CREATE PROCEDURE <br>|   This is the main event-handler for the WM_CREATE message.  It is here <br>|   we create the MDI control window for the application.  We store this <br>|   information as part of the frame-window extra object information. <br>\*---------------------------------------------------------------------------*/ <br>BOOL CreateProc(HWND hWndFrame) <br>{ <br>    /* <br>    ** Set the window information to contain the child window. <br>    */ <br>    if(hWndMDIClient = CreateMDIClientWindow(hWndFrame)) <br>        SetWindowLong(hWndFrame,CLIENTWND,(LONG)hWndMDIClient); <br> <br>    return(TRUE); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| COMMAND PROCEDURE <br>|   This is the main event-handler for the WM_COMMAND event for the window <br>|   application.  All we really do is process the MENU commands for creating <br>|   the DEMO windows. <br>\*---------------------------------------------------------------------------*/ <br>BOOL CommandProc(HWND hWndFrame, WPARAM wParam, LONG lParam) <br>{ <br>    HWND hWndClient; <br> <br>    lParam = lParam; <br> <br>    switch(wParam) <br>    { <br>        /* <br>        ** Demo the poly-bezier window. <br>        */ <br>        case IDM_DEMO_POLYBEZIER: <br>            if(hWndClient = (HWND)GetWindowLong(hWndFrame,CLIENTWND)) <br>                CreatePolyWindow(hWndClient,0); <br>            break; <br> <br> <br>        /* <br>        ** Demo the xform's. <br>        */ <br>        case IDM_DEMO_XFORM: <br>            if(hWndClient = (HWND)GetWindowLong(hWndFrame,CLIENTWND)) <br>                CreateXFormWindow(hWndClient,0); <br>            break; <br> <br> <br>        /* <br>        ** Demo the maze. <br>        */ <br>        case IDM_DEMO_MAZE: <br>            if(hWndClient = (HWND)GetWindowLong(hWndFrame,CLIENTWND)) <br>                CreateMazeWindow(hWndClient,0); <br>            break; <br> <br> <br>        /* <br>        ** Demo random drawing objects. <br>        */ <br>        case IDM_DEMO_DRAW: <br>            if(hWndClient = (HWND)GetWindowLong(hWndFrame,CLIENTWND)) <br>                CreateDrawWindow(hWndClient,0); <br>            break; <br> <br> <br>        /* <br>        ** Demo bouncing region balls. <br>        */ <br>        case IDM_DEMO_BOUNCE: <br>            if(hWndClient = (HWND)GetWindowLong(hWndFrame,CLIENTWND)) <br>                CreateBounceWindow(hWndClient,0); <br>            break; <br> <br> <br>        /* <br>        ** MDI cascade the demo windows. <br>        */ <br>        case IDM_WINDOW_CASCADE: <br>            if(hWndClient = (HWND)GetWindowLong(hWndFrame,CLIENTWND)) <br>                SendMessage(hWndClient,WM_MDICASCADE,0,0l); <br>            break; <br> <br> <br>        /* <br>        ** MDI tile the demo windows. <br>        */ <br>        case IDM_WINDOW_TILE: <br>            if(hWndClient = (HWND)GetWindowLong(hWndFrame,CLIENTWND)) <br>                SendMessage(hWndClient,WM_MDITILE,0,0l); <br>            break; <br> <br> <br>        /* <br>        ** MDI arrange the MDI icons. <br>        */ <br>        case IDM_WINDOW_ICON: <br>            if(hWndClient = (HWND)GetWindowLong(hWndFrame,CLIENTWND)) <br>                SendMessage(hWndClient,WM_MDIICONARRANGE,0,0l); <br>            break; <br> <br> <br>        /* <br>        ** Display the about box. <br>        */ <br>        case IDM_HELP_ABOUT: <br>    DisplayDialogBox(hWndFrame,MAKEINTRESOURCE(ABOUTBOX),(WNDPROC)AboutDlgProc,0l); <br>            break; <br> <br> <br>        /* <br>        ** Command not recognized. <br>        */ <br>        default: <br>            return(FALSE); <br>    } <br>    return(TRUE); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| CLIENT PAINT PROCEDURE <br>|   This is the main event-handler for the WM_PAINT message. <br>\*---------------------------------------------------------------------------*/ <br>VOID PaintProc(HWND hWndFrame) <br>{ <br>    HDC         hDC; <br>    PAINTSTRUCT ps; <br> <br> <br>    if(hDC = BeginPaint(hWndFrame,&amp;ps)) <br>        EndPaint(hWndFrame,&amp;ps); <br> <br>    return; <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| CLIENT DESTROY PROCEDURE <br>|   This routine is called to cleanup global resources upon exit of the <br>|   application. <br>\*---------------------------------------------------------------------------*/ <br>VOID DestroyProc(HWND hWndFrame) <br>{ <br>    hWndFrame = hWndFrame; <br> <br>    PostQuitMessage(0); <br> <br>    return; <br>} <br> <br> <br> <br>DWORD FAR lRandom(VOID) <br>{ <br>    static DWORD glSeed = (DWORD)-365387184; <br> <br>    glSeed *= 69069; <br>    return(++glSeed); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

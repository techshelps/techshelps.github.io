<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>POLY.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3406"></a>POLY.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*---------------------------------------------------------------------------*\ <br>| POLYBEZIER MODULE <br>|   This module contains the routines for demo <br>\*---------------------------------------------------------------------------*/ <br> <br>#include &lt;windows.h&gt; <br>#include "gdidemo.h" <br>#include  "poly.h" <br> <br>/*---------------------------------------------------------------------------*\ <br>| CREATE BEZIER WINDOW PROCEDURE <br>|   Create the bezier MDI-child window. <br>\*---------------------------------------------------------------------------*/ <br>HWND FAR CreatePolyWindow(HWND hWndClient, int nItem) <br>{ <br>    HANDLE          hInstance; <br>    MDICREATESTRUCT mcs; <br>    static char buffer[256]; <br> <br> <br>    hInstance = GETINSTANCE(hWndClient); <br>    LoadString (hInstance, POLYTITLE, buffer, 256); <br> <br>    /* <br>    ** Initialize the MDI create struct for creation of the <br>    ** test window. <br>    */ <br>    mcs.szClass = POLYCLASS; <br>    mcs.szTitle = buffer; <br>    mcs.hOwner  = hInstance; <br>    mcs.x       = CW_USEDEFAULT; <br>    mcs.y       = CW_USEDEFAULT; <br>    mcs.cx      = CW_USEDEFAULT; <br>    mcs.cy      = CW_USEDEFAULT; <br>    mcs.style   = 0l; <br>    mcs.lParam  = (LONG)nItem; <br> <br>    return((HWND)SendMessage(hWndClient,WM_MDICREATE,0,(LONG)(LPMDICREATESTRUCT)&amp;mcs)); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| POLYBEZIER WINDOW PROCEDURE <br>|   This is the main window function for the polybezier demo window. <br>\*---------------------------------------------------------------------------*/ <br>LONG APIENTRY PolyProc(HWND hWnd, UINT wMsg, WPARAM wParam, LONG lParam) <br>{ <br>    switch(wMsg) <br>    { <br>        case WM_CREATE: <br>            PolyCreateProc(hWnd); <br>            break; <br> <br> <br>        case WM_COMMAND: <br>            PolyCommandProc(hWnd,wParam,lParam); <br>            break; <br> <br>        case WM_MOVE: <br>            PolyRedraw(hWnd); <br>            break; <br> <br> <br>        case WM_TIMER: <br>            PolyDrawBez(hWnd); <br>            break; <br> <br> <br>        case WM_PAINT: <br>            PolyPaintProc(hWnd); <br>            break; <br> <br> <br>        case WM_DESTROY: <br>            PolyDestroyProc(hWnd); <br>            break; <br> <br> <br>        default: <br>            return(DefMDIChildProc(hWnd,wMsg,wParam,lParam)); <br>    } <br>    return(0l); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| POLYBEZIER CREATE PROCEDURE <br>|   Create the polybezier window for the demo application.  This is a child <br>|   of the MDI client window.  Allocate the extra object information for <br>|   handling of the polybezier demo. <br>\*---------------------------------------------------------------------------*/ <br>BOOL PolyCreateProc(HWND hWnd) <br>{ <br>    PPOLYDATA ppd; <br> <br> <br>    if(AllocWindowInfo(hWnd,sizeof(POLYDATA))) <br>    { <br>        if(ppd = (PPOLYDATA)LockWindowInfo(hWnd)) <br>        { <br>            ppd-&gt;nBezTotal  = 20; <br>            ppd-&gt;nBezCurr   = 0; <br>            ppd-&gt;nColor     = 0; <br>            ppd-&gt;hBezBuffer = GlobalAlloc(GHND,(DWORD)(sizeof(BEZBUFFER) * MAX_BEZIER)); <br> <br>            UnlockWindowInfo(hWnd); <br> <br>            PolyInitPoints(hWnd); <br> <br>            SetTimer(hWnd,1,50,NULL); <br>            return(TRUE); <br>        } <br>        FreeWindowInfo(hWnd); <br>    } <br>    return(FALSE); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| POLYBEZIER COMMAND PROCEDURE <br>|   Process polybezier commands.  This is a NOP for now.  But who knows what <br>|   tomorrow may bring. <br>\*---------------------------------------------------------------------------*/ <br>BOOL PolyCommandProc(HWND hWnd, WPARAM wParam, LONG lParam) <br>{ <br>    hWnd   = hWnd; <br>    wParam = wParam; <br>    lParam = lParam; <br> <br>    return(TRUE); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| POLYBEZIER PAINT PROCEDURE <br>|   Repaint the bezier window.  All we really do here is validate our window, <br>|   and reset the array of bezier objects. <br>\*---------------------------------------------------------------------------*/ <br>VOID PolyPaintProc(HWND hWnd) <br>{ <br>    HDC         hDC; <br>    PAINTSTRUCT ps; <br> <br> <br>    if(hDC = BeginPaint(hWnd,&amp;ps)) <br>        EndPaint(hWnd,&amp;ps); <br> <br>    PolyRedraw(hWnd); <br> <br>    return; <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| POLYBEZIER DESTROY PROCEDURE <br>|   Kill the polybezier demo.  Free up the resources allocated on behalf of <br>|   this object. <br>\*---------------------------------------------------------------------------*/ <br>VOID PolyDestroyProc(HWND hWnd) <br>{ <br>    PPOLYDATA ppd; <br> <br> <br>    KillTimer(hWnd,1); <br>    if(ppd = (PPOLYDATA)LockWindowInfo(hWnd)) <br>    { <br>        GlobalFree(ppd-&gt;hBezBuffer); <br>        UnlockWindowInfo(hWnd); <br>    } <br>    FreeWindowInfo(hWnd); <br> <br>    return; <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| GET NEW VELOCITY <br>|   This routine creates a new velocity for the bezier points.  Each bezier <br>|   point is randomly chosen.  The two inside points should have a speed <br>|   less then the endpoints (most of the time-better effect). <br>\*---------------------------------------------------------------------------*/ <br>int PolyNewVel(int i) <br>{ <br>    int nRet; <br> <br> <br>    if ((i == 1) || (i == 2)) <br>        nRet = (int)((lRandom() % VELMAX) / 3) + VELMIN; <br>    else <br>        nRet = (int)(lRandom() % VELMAX) + VELMIN; <br> <br>    return((nRet &lt; 0) ? -nRet : nRet); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| INITIALIZE POLYBEZIER POINTS <br>|   This routine initializes the polybezier points for the first object.  This <br>|   is performed on startup of the window. <br>\*---------------------------------------------------------------------------*/ <br>VOID PolyInitPoints(HWND hWnd) <br>{ <br>    PPOLYDATA   ppd; <br>    LPBEZBUFFER lpBez; <br>    int         idx; <br>    RECT        rect; <br> <br> <br>    if(ppd = (PPOLYDATA)LockWindowInfo(hWnd)) <br>    { <br>        if(lpBez = (LPBEZBUFFER)GlobalLock(ppd-&gt;hBezBuffer)) <br>        { <br>            GetClientRect(hWnd,&amp;rect); <br> <br>            for(idx=0; idx &lt; BEZ_PTS-1; idx++) <br>            { <br>                lpBez-&gt;pPts[idx].x = lRandom() % rect.right; <br>                lpBez-&gt;pPts[idx].y = lRandom() % rect.bottom; <br> <br>                ppd-&gt;pVel[idx].x = PolyNewVel(idx); <br>                ppd-&gt;pVel[idx].y = PolyNewVel(idx); <br>            } <br>            GlobalUnlock(ppd-&gt;hBezBuffer); <br>        } <br>        UnlockWindowInfo(hWnd); <br>    } <br>    return; <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| POLYBEZIER REDRAW <br>|   This routine resets the bezier curves and redraws the poly-bezier client <br>|   area. <br>\*---------------------------------------------------------------------------*/ <br>VOID PolyRedraw(HWND hWnd) <br>{ <br>    PPOLYDATA   ppd; <br>    LPBEZBUFFER lpBez,lpCurr; <br>    HDC         hDC; <br>    int         i,j; <br>    RECT        rect; <br> <br> <br>    if(ppd = (PPOLYDATA)LockWindowInfo(hWnd)) <br>    { <br>        if(lpBez = (LPBEZBUFFER)GlobalLock(ppd-&gt;hBezBuffer)) <br>        { <br>            if(hDC = GetDC(hWnd)) <br>            { <br>                /* <br>                ** Save the current bezier.  Set the first bezier in the <br>                ** array to that curve, and use it as a basis for the next <br>                ** series. <br>                */ <br>                lpCurr        = lpBez+ppd-&gt;nBezCurr; <br>                *lpBez        = *lpCurr; <br>                ppd-&gt;nBezCurr = 0; <br> <br> <br>                /* <br>                ** Clean the curves (all but the first curve). <br>                */ <br>                for(j=1; j &lt; ppd-&gt;nBezTotal; j++) <br>                { <br>                    for(i=0; i &lt; BEZ_PTS; i++) <br>                    { <br>                        (lpBez+j)-&gt;pPts[i].x = -1; <br>                        (lpBez+j)-&gt;pPts[i].y = 0; <br>                    } <br>                } <br> <br> <br> <br>                /* <br>                ** Clear the display. <br>                */ <br>                GetClientRect(hWnd,&amp;rect); <br>                BitBlt(hDC,0,0,rect.right, rect.bottom,(HDC)0,0,0,0); <br> <br> <br>                /* <br>                ** Draw the first curve in the bezier array. <br>                */ <br>#if defined(_WIN32) &amp;&amp; defined(WIN32) <br>                PolyBezier(hDC,lpBez-&gt;pPts,BEZ_PTS); <br>#else <br>                Polyline(hDC,lpBez-&gt;pPts,BEZ_PTS); <br>#endif <br>                ReleaseDC(hWnd,hDC); <br>            } <br>            GlobalUnlock(ppd-&gt;hBezBuffer); <br>        } <br>        UnlockWindowInfo(hWnd); <br>    } <br>    return; <br>} <br> <br> <br> <br> <br>VOID PolyDrawBez(HWND hWnd) <br>{ <br>    PPOLYDATA   ppd; <br>    LPBEZBUFFER lpBez,lpCurr,lpPrev; <br>    int         idx,x,y; <br>    RECT        rect; <br>    HDC         hDC; <br>    HPEN        hPen; <br> <br>static COLORREF crColor[] = {0x000000FF,0x0000FF00,0x00FF0000,0x0000FFFF, <br>                             0x00FF00FF,0x00FFFF00,0x00FFFFFF,0x00000080, <br>                             0x00008000,0x00800000,0x00008080,0x00800080, <br>                             0x00808000,0x00808080,0x000000FF,0x0000FF00, <br>                             0x00FF0000,0x0000FFFF,0x00FF00FF,0x00FFFF00}; <br> <br> <br>    if(ppd = (PPOLYDATA)LockWindowInfo(hWnd)) <br>    { <br>        if(lpBez = (LPBEZBUFFER)GlobalLock(ppd-&gt;hBezBuffer)) <br>        { <br>            if(hDC = GetDC(hWnd)) <br>            { <br>                GetClientRect(hWnd,&amp;rect); <br> <br>                lpPrev = lpBez+ppd-&gt;nBezCurr; <br> <br>                ppd-&gt;nBezCurr += 1; <br> <br>                if(ppd-&gt;nBezCurr &gt;= ppd-&gt;nBezTotal) <br>                { <br>                    ppd-&gt;nBezCurr = 0; <br>                    ppd-&gt;nColor  = (++ppd-&gt;nColor % 20); <br>                } <br>                lpCurr = lpBez+ppd-&gt;nBezCurr; <br> <br> <br>                if(lpCurr-&gt;pPts[0].x != -1) <br>                { <br>                    hPen = SelectObject(hDC,GetStockObject(BLACK_PEN)); <br>#if defined(_WIN32) &amp;&amp; defined(WIN32) <br>                    PolyBezier(hDC,lpCurr-&gt;pPts,BEZ_PTS); <br>#else <br>                    Polyline(hDC,lpCurr-&gt;pPts,BEZ_PTS); <br>#endif <br>                    SelectObject(hDC,hPen); <br>                } <br> <br>                for(idx=0; idx &lt; BEZ_PTS; idx++) <br>                { <br>                    x  = lpPrev-&gt;pPts[idx].x; <br>                    y  = lpPrev-&gt;pPts[idx].y; <br>                    x += ppd-&gt;pVel[idx].x; <br>                    y += ppd-&gt;pVel[idx].y; <br> <br>                    if(x &gt;= rect.right) <br>                    { <br>                        x = rect.right - ((x - rect.right)+1); <br>                        ppd-&gt;pVel[idx].x = -PolyNewVel(idx); <br>                    } <br> <br>                    if(x &lt;= rect.left) <br>                    { <br>                        x = rect.left + ((rect.left - x)+1); <br>                        ppd-&gt;pVel[idx].x = PolyNewVel(idx); <br>                    } <br> <br>                    if(y &gt;= rect.bottom) <br>                    { <br>                        y = rect.bottom - ((y - rect.bottom)+1); <br>                        ppd-&gt;pVel[idx].y = -PolyNewVel(idx); <br>                    } <br> <br>                    if(y &lt;= rect.top) <br>                    { <br>                        y = rect.top + ((rect.top - y)+1); <br>                        ppd-&gt;pVel[idx].y = PolyNewVel(idx); <br>                    } <br> <br>                    lpCurr-&gt;pPts[idx].x = x; <br>                    lpCurr-&gt;pPts[idx].y = y; <br> <br>                } <br> <br>                hPen = SelectObject(hDC,CreatePen(PS_SOLID,1,crColor[ppd-&gt;nColor])); <br>#if defined(_WIN32) &amp;&amp; defined(WIN32) <br>                PolyBezier(hDC,lpCurr-&gt;pPts,BEZ_PTS); <br>#else <br>                Polyline(hDC,lpCurr-&gt;pPts,BEZ_PTS); <br>#endif <br>                DeleteObject(SelectObject(hDC,hPen)); <br> <br>#if defined(_WIN32) &amp;&amp; defined(WIN32) <br>                SetROP2(hDC,R2_COPYPEN); <br>#endif <br>                ReleaseDC(hWnd,hDC); <br>            } <br>            GlobalUnlock(ppd-&gt;hBezBuffer); <br>        } <br>        UnlockWindowInfo(hWnd); <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DRAW.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3399"></a>DRAW.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/*---------------------------------------------------------------------------*\ <br>| RANDOM OBJECTS MODULE <br>\*---------------------------------------------------------------------------*/ <br> <br>#include &lt;windows.h&gt; <br>#include "gdidemo.h" <br>#include "draw.h" <br> <br>/*---------------------------------------------------------------------------*\ <br>| CREATE DRAW WINDOW PROCEDURE <br>\*---------------------------------------------------------------------------*/ <br>HWND FAR CreateDrawWindow(HWND hWndClient, int nItem) <br>{ <br>    HANDLE          hInstance; <br>    MDICREATESTRUCT mcs; <br>    static char buffer[256]; <br> <br> <br>    hInstance = GETINSTANCE(hWndClient); <br>    LoadString (hInstance, DRAWTITLE, buffer, 256); <br> <br>    /* <br>    ** Initialize the MDI create struct for creation of the <br>    ** test window. <br>    */ <br>    mcs.szClass = DRAWCLASS; <br>    mcs.szTitle = buffer; <br>    mcs.hOwner  = hInstance; <br>    mcs.x       = CW_USEDEFAULT; <br>    mcs.y       = CW_USEDEFAULT; <br>    mcs.cx      = CW_USEDEFAULT; <br>    mcs.cy      = CW_USEDEFAULT; <br>    mcs.style   = 0l; <br>    mcs.lParam  = (LONG)nItem; <br> <br>    return((HWND)SendMessage(hWndClient,WM_MDICREATE,0,(LONG)(LPMDICREATESTRUCT)&amp;mcs)); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| DRAW WINDOW PROCEDURE <br>\*---------------------------------------------------------------------------*/ <br>LONG APIENTRY DrawProc(HWND hWnd, UINT wMsg, WPARAM wParam, LONG lParam) <br>{ <br>    switch(wMsg) <br>    { <br>        case WM_CREATE: <br>            DrawCreateProc(hWnd); <br>            break; <br> <br> <br>        case WM_COMMAND: <br>            DrawCommandProc(hWnd,wParam,lParam); <br>            break; <br> <br> <br>        case WM_TIMER: <br>            DrawObject(hWnd); <br>            break; <br> <br> <br>        case WM_PAINT: <br>            DrawPaintProc(hWnd); <br>            break; <br> <br> <br>        case WM_DESTROY: <br>            DrawDestroyProc(hWnd); <br>            break; <br> <br> <br>        default: <br>            return(DefMDIChildProc(hWnd,wMsg,wParam,lParam)); <br>    } <br>    return(0l); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| DRAW CREATE PROCEDURE <br>\*---------------------------------------------------------------------------*/ <br>BOOL DrawCreateProc(HWND hWnd) <br>{ <br>    PDRAWDATA pdd; <br> <br> <br>    if(AllocWindowInfo(hWnd,sizeof(DRAWDATA))) <br>    { <br>        if(pdd = (PDRAWDATA)LockWindowInfo(hWnd)) <br>        { <br>            pdd-&gt;nObject = 0; <br> <br>            UnlockWindowInfo(hWnd); <br> <br>            SetTimer(hWnd,1,50,NULL); <br>            return(TRUE); <br>        } <br>        FreeWindowInfo(hWnd); <br>    } <br>    return(FALSE); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| DRAW COMMAND PROCEDURE <br>\*---------------------------------------------------------------------------*/ <br>BOOL DrawCommandProc(HWND hWnd, WPARAM wParam, LONG lParam) <br>{ <br>    hWnd   = hWnd; <br>    wParam = wParam; <br>    lParam = lParam; <br> <br>    return(TRUE); <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| DRAW PAINT PROCEDURE <br>\*---------------------------------------------------------------------------*/ <br>VOID DrawPaintProc(HWND hWnd) <br>{ <br>    HDC         hDC; <br>    PAINTSTRUCT ps; <br> <br> <br>    if(hDC = BeginPaint(hWnd,&amp;ps)) <br>        EndPaint(hWnd,&amp;ps); <br> <br>    return; <br>} <br> <br> <br>/*---------------------------------------------------------------------------*\ <br>| DRAW DESTROY PROCEDURE <br>\*---------------------------------------------------------------------------*/ <br>VOID DrawDestroyProc(HWND hWnd) <br>{ <br>    KillTimer(hWnd,1); <br>    FreeWindowInfo(hWnd); <br>    return; <br>} <br> <br> <br>VOID DrawObject(HWND hWnd) <br>{ <br>    PDRAWDATA pdd; <br>    RECT      rect; <br>    HDC       hDC; <br>    int       x1,y1,x2,y2,x3,y3,x4,y4,r,g,b,nObject; <br>    HBRUSH    hBrush; <br>    char      szDebug[80]; <br> <br> <br>    if(pdd = (PDRAWDATA)LockWindowInfo(hWnd)) <br>    { <br>        if(hDC = GetDC(hWnd)) <br>        { <br>            GetClientRect(hWnd,&amp;rect); <br> <br>            // avoid divide by zero errors when the window is small. <br>            if ( rect.right== 0) rect.right++; <br>            if ( rect.bottom== 0) rect.bottom++; <br> <br>            r = lRandom() % 255; <br>            g = lRandom() % 255; <br>            b = lRandom() % 255; <br> <br>            if(hBrush = SelectObject(hDC,CreateSolidBrush(RGB(r,g,b)))) <br>            { <br>                x1 = lRandom() % rect.right; <br>                y1 = lRandom() % rect.bottom; <br>                x2 = lRandom() % rect.right; <br>                y2 = lRandom() % rect.bottom; <br>                x3 = lRandom() % rect.right; <br>                y3 = lRandom() % rect.bottom; <br>                x4 = lRandom() % rect.right; <br>                y4 = lRandom() % rect.bottom; <br> <br> <br>                nObject = lRandom() % 5; <br> <br>                switch(nObject) <br>                { <br>                    default: <br>                    case OBJ_RECTANGLE: <br>                        wsprintf(szDebug,"Rectangle(%d,%d,%d,%d)\n",x1,y1,x2,y2); <br>                        DEBUGOUT(szDebug); <br>                        Rectangle(hDC,x1,y1,x2,y2); <br>                        break; <br> <br>                    case OBJ_ELLIPSE: <br>                        wsprintf(szDebug,"Ellipse(%d,%d,%d,%d)\n",x1,y1,x2,y2); <br>                        DEBUGOUT(szDebug); <br>                        Ellipse(hDC,x1,y1,x2,y2); <br>                        break; <br> <br> <br> <br>                    case OBJ_ROUNDRECT: <br>                        wsprintf(szDebug,"RoundRect(%d,%d,%d,%d,%d,%d)\n",x1,y1,x2,y2,x3,y3); <br>                        DEBUGOUT(szDebug); <br>                        RoundRect(hDC,x1,y1,x2,y2,x3,y3); <br>                        break; <br> <br>                    case OBJ_CHORD: <br>                        wsprintf(szDebug,"Chord(%d,%d,%d,%d,%d,%d,%d,%d)\n",x1,y1,x2,y2,x3,y3,x4,y4); <br>                        DEBUGOUT(szDebug); <br>                        Chord(hDC,x1,y1,x2,y2,x3,y3,x4,y4); <br>                        break; <br> <br>                    case OBJ_PIE: <br>                        wsprintf(szDebug,"Pie(%d,%d,%d,%d,%d,%d,%d,%d)\n",x1,y1,x2,y2,x3,y3,x4,y4); <br>                        DEBUGOUT(szDebug); <br>                        Pie(hDC,x1,y1,x2,y2,x3,y3,x4,y4); <br>                        break; <br> <br>                } <br> <br>                DeleteObject(SelectObject(hDC,hBrush)); <br>            } <br>            ReleaseDC(hWnd,hDC); <br>        } <br>        UnlockWindowInfo(hWnd); <br>    } <br>    return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

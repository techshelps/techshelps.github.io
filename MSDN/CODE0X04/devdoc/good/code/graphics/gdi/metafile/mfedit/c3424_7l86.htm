<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MFEDIT.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3426"></a>MFEDIT.H</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: mfedit.h <br>* <br>* Header file for mfedit <br>* <br>* Copyright 1996 - 1998 Microsoft Corporation <br>* <br>* Contains all the definitions, global variables, structures, etc <br>* <br>* Dependencies: <br>* <br>\**************************************************************************/ <br>#define LIGHTGRAY               RGB(192, 192, 192) <br>#define DARKGRAY                RGB(128, 128, 128) <br>#define MAX_POINTS              256 <br>#define MAX_POINTS_MF           3 <br>#define MAX_POINTS_BMP          3 <br>#define MAX_FRAME               800 <br>#define MAX_FILE                800 <br>#define MAX_ERR_STRING          128 <br> <br>// <br>// String ID's <br>// <br>#define IDS_INITAPPFAIL16 <br>#define IDS_LOADACCFAIL17 <br>#define IDS_MFDEMOCL18 <br>#define IDS_NOMFFORCPY19 <br>#define IDS_CNVEMFTO3X20 <br>#define IDS_GETWMFBTSFAIL21 <br>#define IDS_MALLOCFAIL22 <br>#define IDS_GETWMFBTSFAIL223 <br>#define IDS_MALLOCFAIL224 <br>#define IDS_CPY3XMFTOCLP25 <br>#define IDS_GETWMFBTSFAIL2X26 <br>#define IDS_CNVFAIL27 <br>#define IDS_CPYEMFTOCLP28 <br>#define IDS_PST3XMF29 <br>#define IDS_NOINFO3XMFX30 <br> <br>#define IDS_SAVEMF32 <br>#define IDS_FILEOPNFAIL33 <br>#define IDS_MAPFCREFAIL34 <br>#define IDS_MAPVWMAPFOFAIL35 <br>#define IDS_GET3XFRMCLPFAIL36 <br>#define IDS_PSTEMF37 <br>#define IDS_GETEMFFROMCLPFAIL38 <br>#define IDS_ERROR39 <br>#define IDS_NOMFLDFORHTST40 <br>#define IDS_DLGABOUTCREFAIL41 <br> <br>#define IDS_LDMSKBM43 <br>#define IDS_LDBM44 <br>#define IDS_SVDRAWSFASBM45 <br>#define IDS_LDMF46 <br>#define IDS_MUSTESCHTSTMD47 <br>#define IDS_REC48 <br>#define IDS_CREMFDCFAIL49 <br>#define IDS_ADDCMNTFAIL50 <br> <br>#define IDS_STOP55 <br>#define IDS_FMT_PLAYMF56 <br>#define IDS_CREPALFAIL57 <br> <br>#define IDS_NOMFFORPLAY61 <br>#define IDS_ALDUSMF62 <br>#define IDS_DRAWSFCLR63 <br>#define IDS_PEN64 <br>#define IDS_TXT65 <br>#define IDS_RECT66 <br>#define IDS_FILLRECT67 <br>#define IDS_ELLIPSE68 <br>#define IDS_FILLELLIPSE69 <br>#define IDS_LN70 <br>#define IDS_MSTLBCLKFORBZ71 <br>#define IDS_MUST3CLKFORBM72 <br>#define IDS_MUST3CLKFORXMF73 <br>#define IDS_NOMFFORPRT74 <br> <br>#define IDS_CREPRTTHRDFAIL76 <br>#define IDS_CREPNTFAIL77 <br>#define IDS_CREPBYTEFAIL78 <br>#define IDS_NOBMFOREMBED79 <br>#define IDS_NOMFFOREMBED80 <br>#define IDS_FT_DIB81 <br>#define IDS_FM_DIB82 <br>#define IDS_FT_RLE83 <br>#define IDS_FM_RLE84 <br>#define IDS_FT_EPS85 <br>#define IDS_FM_EPS86 <br>#define IDS_FT_EMF87 <br>#define IDS_FM_EMF88 <br>#define IDS_FT_WMF89 <br>#define IDS_FM_WMF90 <br> <br>#define IDS_SAVEMFAS92 <br>#define IDS_LDMFMTFILEFAIL93 <br>#define IDS_CREMAPFILEFAIL94 <br>#define IDS_MAPVWOFMAPFOFAIL95 <br>#define IDS_NOTDIBBMFILE96 <br>#define IDS_GETMFBTSXFAIL97 <br>#define IDS_GETMFBTSXFAIL298 <br>#define IDS_LDMSK99 <br>#define IDS_MALLOCFAILNOHIT100 <br> <br>#define IDS_NULLRGNHTSTFAIL102 <br>#define IDS_EMF103 <br>#define IDS_NOHIT104 <br>#define IDS_NOMFTOPRT105 <br>#define IDS_ESCPRT106 <br>#define IDS_CREPRTDCFAIL107 <br>#define IDS_PRT108 <br> <br>#define IDS_PRTTHRDDONE111 <br>#define IDS_ALLOCPALFAIL112 <br> <br>#define IDS_HFTONEPALNULL114 <br>#define IDS_PALNULL115 <br>#define IDS_MUSTMSKMCHROMEBM116 <br>#define IDS_NOPALENTRYFORCPY117 <br>#define IDS_CPYPALFAIL118 <br> <br>#define IDS_NULLPTR121 <br>#define IDS_NOTADOBE122 <br>#define IDS_SKPTOEOL123 <br>#define IDS_MUSTNOTEOF124 <br>#define IDS_GETBNDLFTFAIL125 <br>#define IDS_GETBNDTOPFAIL126 <br>#define IDS_GETBNDRGTFAIL127 <br>#define IDS_GETBNDBOTFAIL128 <br>#define IDS_SETADVGRPHMDFAIL129 <br> <br>#define IDS_FMT_HIT131 <br>#define IDS_FMT_NOHTST132 <br>#define IDS_FMT_PLAYEMFFAIL133 <br>#define IDS_FMT_FILEOPNFAIL134 <br>#define IDS_FMT_CREMAPFILEFAIL135 <br>#define IDS_FMT_MAPVWMAPFOFAIL136 <br>#define IDS_FMT_SETWMFBTSFAIL137 <br>#define IDS_FMT_SETWMFBTSXFAIL138 <br>#define IDS_FMT_PLAYMFFAIL139 <br>#define IDS_FMT_GETMFFAIL140 <br> <br>// <br>// Menu ID's <br>// <br>#define MM_LOAD                 7001 <br>#define MM_RECORD               7002 <br>#define MM_PRINT                7003 <br>#define MM_PAGESETUP            7004 <br>#define MM_PRINTSETUP           7005 <br>#define MM_ABOUT                7006 <br>#define MM_CUT                  7007 <br>#define MM_COPY                 7008 <br>#define MM_PASTE                7009 <br>#define MM_DEL                  7010 <br>#define MM_LOAD_BMP             7011 <br>#define MM_SAVE_BMP             7012 <br>#define MM_LOAD_MASKBMP         7013 <br>#define MM_REMOVE               7014 <br>#define MM_INSERT               7015 <br>#define MM_HITTEST              7016 <br>#define MM_REPEAT               7017 <br>#define MM_INCREASE             7018 <br>#define MM_NORMAL               7019 <br>#define MM_DECREASE             7020 <br>#define MM_PEN                  7021 <br>#define MM_BRUSH                7022 <br>#define MM_FONT                 7023 <br>#define MM_LEABOUT              7024 <br>#define MM_FIT2WND              7025 <br>#define MM_IMPORT_3X            7026 <br>#define MM_EXPORT_3X            7027 <br>#define MM_TTOUTLN_STROKEFILL   7028 <br>#define MM_TTOUTLN_POLYDRAW     7029 <br>#define MM_C_WND_MF             7030 <br>#define MM_C_BEGIN_GP           7031 <br>#define MM_C_END_GP             7032 <br>#define MM_C_MLTFMTS            7033 <br> <br>#define SIZEOFCAPTIONTEXT20 <br> <br>#define ACCEL_ID                100 <br>#define APP_ICON                 100 <br> <br>// <br>// Control Panel ID's <br>// <br>#define OD_BTN_CNT              5 <br>#define DID_CTRLPANEL           100 <br>#define DID_ZERO                1000 <br>#define DID_ONE                 1001 <br>#define DID_TWO                 1002 <br>#define DID_THREE               1003 <br>#define DID_FOUR                1004 <br>#define DID_FIVE                1005 <br>#define DID_SIX                 1006 <br>#define DID_SEVEN               1007 <br>#define DID_EIGHT               1008 <br>#define DID_NINE                1009 <br>#define DID_TEN_PLUS            1010 <br>#define ID_OD_BTN_BASE          1011 <br>#define DID_OPEN                1011 <br>#define DID_RECORD              1012 <br>#define DID_STOP                1013 <br>#define DID_PLAY                1014 <br>#define DID_FF                  1015 <br>#define DID_CLEAR               1016 <br>#define DID_COUNTER             1017 <br>#define DID_TMP                 1018 <br> <br>// <br>// Control Panel's Owner draw bitmaps <br>// <br>#define BMID_BASED              1011 <br>#define BMID_OPEND              1011 <br>#define BMID_RECORDD            1012 <br>#define BMID_STOPD              1013 <br>#define BMID_PLAYD              1014 <br>#define BMID_FFD                1015 <br>#define BMID_BASEU              2011 <br>#define BMID_OPENU              2011 <br>#define BMID_RECORDU            2012 <br>#define BMID_STOPU              2013 <br>#define BMID_PLAYU              2014 <br>#define BMID_FFU                2015 <br> <br>// <br>// Tools ID's <br>// <br>#define OD_TOOL_CNT             10 <br>#define ID_OD_TOOL_BASE         3001 <br>#define DID_PEN                 3001 <br>#define DID_TEXT                3002 <br>#define DID_RECT                3003 <br>#define DID_FILLRECT            3004 <br>#define DID_ELLIPSE             3005 <br>#define DID_FILLELLIPSE         3006 <br>#define DID_LINE                3007 <br>#define DID_BEZIER              3008 <br>#define DID_BMPOBJ              3009 <br>#define DID_METAF               3010 <br> <br>// <br>// Tools Owner Draw bitmaps <br>// <br>#define BMID_TOOLBASED          3001 <br>#define BMID_PEND               3001 <br>#define BMID_TEXTD              3002 <br>#define BMID_RECTD              3003 <br>#define BMID_FILLRECTD          3004 <br>#define BMID_ELLIPSED           3005 <br>#define BMID_FILLELLIPSED       3006 <br>#define BMID_LINED              3007 <br>#define BMID_BEZIERD            3008 <br>#define BMID_BMPOBJD            3009 <br>#define BMID_METAFD             3010 <br>#define BMID_TOOLBASEU          4001 <br>#define BMID_PENU               4001 <br>#define BMID_TEXTU              4002 <br>#define BMID_RECTU              4003 <br>#define BMID_FILLRECTU          4004 <br>#define BMID_ELLIPSEU           4005 <br>#define BMID_FILLELLIPSEU       4006 <br>#define BMID_LINEU              4007 <br>#define BMID_BEZIERU            4008 <br>#define BMID_BMPOBJU            4009 <br>#define BMID_METAFU             4010 <br> <br>// <br>// some handy macros <br>// <br>#define GET_WM_CTLCOLOR_HDC(wp, lp, msg)        (HDC)(wp) <br>#define GET_WM_CTLCOLOR_HWND(wp, lp, msg)       (HWND)(lp) <br>#define GET_WM_CTLCOLOR_TYPE(wp, lp, msg)       (WORD)(msg - WM_CTLCOLORMSGBOX) <br> <br>#define META32_SIGNATURE        0x464D4520      // ' EMF' <br>#define ALDUS_ID0x9AC6CDD7 <br> <br>#define CARET_HEIGHT    16 <br> <br>typedef struct <br>  { <br>  DWORD   key; <br>  WORD          hmf; <br>  SMALL_RECT    bbox; <br>  WORD    inch; <br>  DWORD   reserved; <br>  WORD    checksum; <br>  } APMFILEHEADER; <br>typedef APMFILEHEADER * PAPMFILEHEADER; <br>#define APMSIZE 22 <br> <br> <br>#ifndef RC_INVOKED <br>#pragma pack(2) <br>typedef struct tagMETA16HEADER <br>{ <br>    WORDmtType; <br>    WORDmtHeaderSize; <br>    WORDmtVersion; <br>    DWORDmtSize; <br>    WORDmtNoObjects; <br>    DWORDmtMaxRecord; <br>    WORDmtNoParameters; <br>} META16HEADER, LPMETA16HEADER; <br>#pragma pack() <br> <br>#endif // RC_INVOKED <br> <br> <br>typedef struct _playinfo { <br>    int iRecord; <br>    BOOL bPlayContinuous; <br>} PLAYINFO; <br> <br>typedef struct _metalookup { <br>    LPSTR   szGDIName; <br>    int     iMRNumber; <br>} METALOOKUP; <br> <br>typedef struct _htdata { <br>    POINT   point; <br>    int     iRecord; <br>} HTDATA; <br> <br>METALOOKUP rgMetaName[] = <br>{ <br>   { "                           ", 0                              }, <br>   { "HEADER                     ", EMR_HEADER                     }, <br>   { "POLYBEZIER                 ", EMR_POLYBEZIER                 }, <br>   { "POLYGON                    ", EMR_POLYGON                    }, <br>   { "POLYLINE                   ", EMR_POLYLINE                   }, <br>   { "POLYBEZIERTO               ", EMR_POLYBEZIERTO               }, <br>   { "POLYLINETO                 ", EMR_POLYLINETO                 }, <br>   { "POLYPOLYLINE               ", EMR_POLYPOLYLINE               }, <br>   { "POLYPOLYGON                ", EMR_POLYPOLYGON                }, <br>   { "SETWINDOWEXTEX             ", EMR_SETWINDOWEXTEX             }, <br>   { "SETWINDOWORGEX             ", EMR_SETWINDOWORGEX             }, <br>   { "SETVIEWPORTEXTEX           ", EMR_SETVIEWPORTEXTEX           }, <br>   { "SETVIEWPORTORGEX           ", EMR_SETVIEWPORTORGEX           }, <br>   { "SETBRUSHORGEX              ", EMR_SETBRUSHORGEX              }, <br>   { "EOF                        ", EMR_EOF                        }, <br>   { "SETPIXELV                  ", EMR_SETPIXELV                  }, <br>   { "SETMAPPERFLAGS             ", EMR_SETMAPPERFLAGS             }, <br>   { "SETMAPMODE                 ", EMR_SETMAPMODE                 }, <br>   { "SETBKMODE                  ", EMR_SETBKMODE                  }, <br>   { "SETPOLYFILLMODE            ", EMR_SETPOLYFILLMODE            }, <br>   { "SETROP2                    ", EMR_SETROP2                    }, <br>   { "SETSTRETCHBLTMODE          ", EMR_SETSTRETCHBLTMODE          }, <br>   { "SETTEXTALIGN               ", EMR_SETTEXTALIGN               }, <br>   { "SETCOLORADJUSTMENT         ", EMR_SETCOLORADJUSTMENT         }, <br>   { "SETTEXTCOLOR               ", EMR_SETTEXTCOLOR               }, <br>   { "SETBKCOLOR                 ", EMR_SETBKCOLOR                 }, <br>   { "OFFSETCLIPRGN              ", EMR_OFFSETCLIPRGN              }, <br>   { "MOVETOEX                   ", EMR_MOVETOEX                   }, <br>   { "SETMETARGN                 ", EMR_SETMETARGN                 }, <br>   { "EXCLUDECLIPRECT            ", EMR_EXCLUDECLIPRECT            }, <br>   { "INTERSECTCLIPRECT          ", EMR_INTERSECTCLIPRECT          }, <br>   { "SCALEVIEWPORTEXTEX         ", EMR_SCALEVIEWPORTEXTEX         }, <br>   { "SCALEWINDOWEXTEX           ", EMR_SCALEWINDOWEXTEX           }, <br>   { "SAVEDC                     ", EMR_SAVEDC                     }, <br>   { "RESTOREDC                  ", EMR_RESTOREDC                  }, <br>   { "SETWORLDTRANSFORM          ", EMR_SETWORLDTRANSFORM          }, <br>   { "MODIFYWORLDTRANSFORM       ", EMR_MODIFYWORLDTRANSFORM       }, <br>   { "SELECTOBJECT               ", EMR_SELECTOBJECT               }, <br>   { "CREATEPEN                  ", EMR_CREATEPEN                  }, <br>   { "CREATEBRUSHINDIRECT        ", EMR_CREATEBRUSHINDIRECT        }, <br>   { "DELETEOBJECT               ", EMR_DELETEOBJECT               }, <br>   { "ANGLEARC                   ", EMR_ANGLEARC                   }, <br>   { "ELLIPSE                    ", EMR_ELLIPSE                    }, <br>   { "RECTANGLE                  ", EMR_RECTANGLE                  }, <br>   { "ROUNDRECT                  ", EMR_ROUNDRECT                  }, <br>   { "ARC                        ", EMR_ARC                        }, <br>   { "CHORD                      ", EMR_CHORD                      }, <br>   { "PIE                        ", EMR_PIE                        }, <br>   { "SELECTPALETTE              ", EMR_SELECTPALETTE              }, <br>   { "CREATEPALETTE              ", EMR_CREATEPALETTE              }, <br>   { "SETPALETTEENTRIES          ", EMR_SETPALETTEENTRIES          }, <br>   { "RESIZEPALETTE              ", EMR_RESIZEPALETTE              }, <br>   { "REALIZEPALETTE             ", EMR_REALIZEPALETTE             }, <br>   { "EXTFLOODFILL               ", EMR_EXTFLOODFILL               }, <br>   { "LINETO                     ", EMR_LINETO                     }, <br>   { "ARCTO                      ", EMR_ARCTO                      }, <br>   { "POLYDRAW                   ", EMR_POLYDRAW                   }, <br>   { "SETARCDIRECTION            ", EMR_SETARCDIRECTION            }, <br>   { "SETMITERLIMIT              ", EMR_SETMITERLIMIT              }, <br>   { "BEGINPATH                  ", EMR_BEGINPATH                  }, <br>   { "ENDPATH                    ", EMR_ENDPATH                    }, <br>   { "CLOSEFIGURE                ", EMR_CLOSEFIGURE                }, <br>   { "FILLPATH                   ", EMR_FILLPATH                   }, <br>   { "STROKEANDFILLPATH          ", EMR_STROKEANDFILLPATH          }, <br>   { "STROKEPATH                 ", EMR_STROKEPATH                 }, <br>   { "FLATTENPATH                ", EMR_FLATTENPATH                }, <br>   { "WIDENPATH                  ", EMR_WIDENPATH                  }, <br>   { "SELECTCLIPPATH             ", EMR_SELECTCLIPPATH             }, <br>   { "ABORTPATH                  ", EMR_ABORTPATH                  }, <br>   { "UNKNOWN                    ", 69                             }, <br>   { "GDICOMMENT                 ", EMR_GDICOMMENT                 }, <br>   { "FILLRGN                    ", EMR_FILLRGN                    }, <br>   { "FRAMERGN                   ", EMR_FRAMERGN                   }, <br>   { "INVERTRGN                  ", EMR_INVERTRGN                  }, <br>   { "PAINTRGN                   ", EMR_PAINTRGN                   }, <br>   { "EXTSELECTCLIPRGN           ", EMR_EXTSELECTCLIPRGN           }, <br>   { "BITBLT                     ", EMR_BITBLT                     }, <br>   { "STRETCHBLT                 ", EMR_STRETCHBLT                 }, <br>   { "MASKBLT                    ", EMR_MASKBLT                    }, <br>   { "PLGBLT                     ", EMR_PLGBLT                     }, <br>   { "SETDIBITSTODEVICE          ", EMR_SETDIBITSTODEVICE          }, <br>   { "STRETCHDIBITS              ", EMR_STRETCHDIBITS              }, <br>   { "EXTCREATEFONTINDIRECTW     ", EMR_EXTCREATEFONTINDIRECTW     }, <br>   { "EXTTEXTOUTA                ", EMR_EXTTEXTOUTA                }, <br>   { "EXTTEXTOUTW                ", EMR_EXTTEXTOUTW                }, <br>   { "POLYBEZIER16               ", EMR_POLYBEZIER16               }, <br>   { "POLYGON16                  ", EMR_POLYGON16                  }, <br>   { "POLYLINE16                 ", EMR_POLYLINE16                 }, <br>   { "POLYBEZIERTO16             ", EMR_POLYBEZIERTO16             }, <br>   { "POLYLINETO16               ", EMR_POLYLINETO16               }, <br>   { "POLYPOLYLINE16             ", EMR_POLYPOLYLINE16             }, <br>   { "POLYPOLYGON16              ", EMR_POLYPOLYGON16              }, <br>   { "POLYDRAW16                 ", EMR_POLYDRAW16                 }, <br>   { "CREATEMONOBRUSH            ", EMR_CREATEMONOBRUSH            }, <br>   { "CREATEDIBPATTERNBRUSHPT    ", EMR_CREATEDIBPATTERNBRUSHPT    }, <br>   { "EXTCREATEPEN               ", EMR_EXTCREATEPEN               }, <br>   { "POLYTEXTOUTA               ", EMR_POLYTEXTOUTA               }, <br>   { "POLYTEXTOUTW               ", EMR_POLYTEXTOUTW               }, <br>   { "SETICMMODE                 ", EMR_SETICMMODE                 }, <br>   { "CREATECOLORSPACE           ", EMR_CREATECOLORSPACE           }, <br>   { "SETCOLORSPACE              ", EMR_SETCOLORSPACE              }, <br>   { "DELETECOLORSPACE           ", EMR_DELETECOLORSPACE           }, <br>#ifdef OPENGL_EMF <br>   { "GLSRECORD                  ", EMR_GLSRECORD                  }, <br>   { "GLSBOUNDEDRECORD           ", EMR_GLSBOUNDEDRECORD           }, <br>   { "PIXELFORMAT                ", EMR_PIXELFORMAT                }, <br>#endif <br>}; <br> <br>typedef struct _PRTDATA { <br>    BOOL            bFit2Wnd; <br>    HENHMETAFILE    hMetaf; <br>} PRTDATA, *PPRTDATA; <br> <br>PROC    gpfnGetEnhMetaFilePixelFormat = (PROC)NULL; <br> <br>HANDLE  ghModule; <br>HWND    ghwndMain   = NULL; <br>HWND    ghwndClient = NULL; <br>HWND    ghwndDrawSurf = NULL; <br>HWND    ghwndCtrlPanel = NULL; <br>HWND    ghwndTools = NULL; <br>HWND    ghTextWnd = NULL; <br>HPALETTE ghPal = NULL; <br>HPALETTE ghHT = NULL; <br> <br>LONG    glcyStatus; <br>BOOL    gbRecording = FALSE; <br>BOOL    gbHitTest = FALSE; <br> <br>#if 0   // STRICT doesn't like this <br>HWND    grHwndCtrlBtn[OD_BTN_CNT]; <br>HWND    grHwndToolBtn[OD_TOOL_CNT]; <br>#endif <br>PVOID   grHwndCtrlBtn[OD_BTN_CNT]; <br>PVOID   grHwndToolBtn[OD_TOOL_CNT]; <br> <br>DWORD   gdwCurCtrl = DID_STOP; <br>DWORD   gdwCurTool = DID_PEN; <br> <br>HFONT    ghCurFont = (HFONT)NULL; <br>LOGFONT  glf; <br>COLORREF gCrText=0;                         // Black <br> <br>HMENU   hMenu,      hMenuWindow; <br>HMENU   hChildMenu, hChildMenuWindow; <br>HDC     ghDCMem; <br>HDC     ghDCMetaf = (HDC) NULL; <br>HENHMETAFILE ghMetaf = NULL; <br>HMETAFILE ghmf=NULL; <br> <br>HBITMAP ghBmp = NULL, ghBmpMask = NULL; <br> <br>#if 0   // STRICT doesn't like this <br>HBITMAP ghBmpDn[OD_BTN_CNT], ghBmpUp[OD_BTN_CNT]; <br>HBITMAP ghToolBmpDn[OD_TOOL_CNT], ghToolBmpUp[OD_TOOL_CNT]; <br>#endif <br>PVOID   ghBmpDn[OD_BTN_CNT], ghBmpUp[OD_BTN_CNT]; <br>PVOID   ghToolBmpDn[OD_TOOL_CNT], ghToolBmpUp[OD_TOOL_CNT]; <br> <br>HBRUSH  ghbrRed; <br>HBRUSH  ghbrCur = (HBRUSH)NULL; <br>HPEN    ghpnCur = (HPEN)NULL; <br>HBRUSH  ghbrAppBkgd; <br>HPEN    ghpnWide; <br> <br>HWND    ghwndNext = NULL; <br>BOOL    gbFit2Wnd = TRUE; <br>BOOL    gbImport3X = FALSE; <br>BOOL    gbExport3X = FALSE; <br>BOOL    gbSFOutln = FALSE; <br>BOOL    gbPDOutln = FALSE; <br>BOOL    gbTT = FALSE; <br>BOOL    gb3D = FALSE; <br>BOOL    gbRCSet = FALSE; <br>BOOL    gbDebug = FALSE; <br>BOOL    gbUseMfPFD = TRUE; <br>BOOL    gbDB = FALSE; <br> <br>BOOL    gbUseDIB = FALSE; <br> <br>typedef struct _FileInfo{ <br>    HANDLE      hFile; <br>    HANDLE      hMapFile; <br>    LPVOID      lpvMapView; <br>} FILEINFO, *PFILEINFO; <br> <br>typedef struct _DIBDATA{ <br>    ULONG           ulFiles; <br>    ULONG           ulFrames; <br>    FILEINFO        rgFileInfo[MAX_FILE]; <br>    PBYTE           rgpjFrame[MAX_FRAME]; <br>    PBITMAPINFO     rgpbmi[MAX_FILE]; <br>    BOOL            rgbCoreHdr[MAX_FILE]; <br>} DIBDATA, *PDIBDATA; <br> <br>DIBDATA gDib; <br> <br>typedef struct tagCMTMLTFMT { <br>    DWORD       ident; <br>    DWORD       iComment; <br>    RECTL       rclOutput; <br>    DWORD       nFormats; <br>    EMRFORMAT   aemrformat[1]; <br>} CMTMLTFMT; <br> <br>#define GDICOMMENT_IDENTIFIER   0x43494447 <br>#define GDICOMMENT_MULTIFORMATS 0x40000004 <br> <br>#define BLACK               PALETTERGB(0,0,0) <br>#define WHITE               PALETTERGB(255,255,255) <br>#define NUM_STATIC_COLORS   (COLOR_BTNHIGHLIGHT - COLOR_SCROLLBAR + 1) <br> <br>// Maximum color distance with 8-bit components <br>#define MAX_COL_DIST (3*256*256L) <br> <br>// Number of static colors <br>#define STATIC_COLORS 20 <br> <br>// Flags used when matching colors <br>#define EXACT_MATCH 1 <br>#define COLOR_USED 1 <br> <br>// TRUE if app wants to take over palette <br>static BOOL gbUseStaticColors = FALSE; <br> <br>// TRUE if static system color settings have been replaced with B&amp;W settings. <br>static BOOL gbSystemColorsInUse = FALSE; <br> <br>// TRUE if static colors have been saved <br>static BOOL gbStaticSaved = FALSE; <br> <br>// saved system static colors <br>static COLORREF gacrSave[NUM_STATIC_COLORS]; <br> <br>// new B&amp;W system static colors <br>static COLORREF gacrBlackAndWhite[NUM_STATIC_COLORS] = { <br>    WHITE,  // COLOR_SCROLLBAR <br>    BLACK,  // COLOR_BACKGROUND <br>    BLACK,  // COLOR_ACTIVECAPTION <br>    WHITE,  // COLOR_INACTIVECAPTION <br>    WHITE,  // COLOR_MENU <br>    WHITE,  // COLOR_WINDOW <br>    BLACK,  // COLOR_WINDOWFRAME <br>    BLACK,  // COLOR_MENUTEXT <br>    BLACK,  // COLOR_WINDOWTEXT <br>    WHITE,  // COLOR_CAPTIONTEXT <br>    WHITE,  // COLOR_ACTIVEBORDER <br>    WHITE,  // COLOR_INACTIVEBORDER <br>    WHITE,  // COLOR_APPWORKSPACE <br>    BLACK,  // COLOR_HIGHLIGHT <br>    WHITE,  // COLOR_HIGHLIGHTTEXT <br>    WHITE,  // COLOR_BTNFACE <br>    BLACK,  // COLOR_BTNSHADOW <br>    BLACK,  // COLOR_GRAYTEXT <br>    BLACK,  // COLOR_BTNTEXT <br>    BLACK,  // COLOR_INACTIVECAPTIONTEXT <br>    BLACK   // COLOR_BTNHIGHLIGHT <br>    }; <br>static INT gaiStaticIndex[NUM_STATIC_COLORS] = { <br>    COLOR_SCROLLBAR          , <br>    COLOR_BACKGROUND         , <br>    COLOR_ACTIVECAPTION      , <br>    COLOR_INACTIVECAPTION    , <br>    COLOR_MENU               , <br>    COLOR_WINDOW             , <br>    COLOR_WINDOWFRAME        , <br>    COLOR_MENUTEXT           , <br>    COLOR_WINDOWTEXT         , <br>    COLOR_CAPTIONTEXT        , <br>    COLOR_ACTIVEBORDER       , <br>    COLOR_INACTIVEBORDER     , <br>    COLOR_APPWORKSPACE       , <br>    COLOR_HIGHLIGHT          , <br>    COLOR_HIGHLIGHTTEXT      , <br>    COLOR_BTNFACE            , <br>    COLOR_BTNSHADOW          , <br>    COLOR_GRAYTEXT           , <br>    COLOR_BTNTEXT            , <br>    COLOR_INACTIVECAPTIONTEXT, <br>    COLOR_BTNHIGHLIGHT <br>    }; <br> <br>static VOID SaveStaticEntries(HDC); <br>static VOID UseStaticEntries(HDC); <br> <br>// <br>// Forward declarations. <br>// <br>BOOL InitializeApp   (void); <br>LONG APIENTRY MainWndProc     (HWND, UINT, DWORD, LONG); <br>LONG APIENTRY DrawSurfWndProc (HWND, UINT, DWORD, LONG); <br>BOOL CALLBACK About           (HWND, UINT, DWORD, LONG); <br>LONG APIENTRY TextWndProc     (HWND, UINT, DWORD, LONG); <br>LONG APIENTRY CtrlPanelDlgProc(HWND, UINT, DWORD, LONG); <br>BOOL bDrawStuff      (HDC, INT, INT, INT, INT, BOOL, BOOL, BOOL, LPSTR); <br>HENHMETAFILE hemfLoadMetafile(HWND); <br>HDC  hDCRecordMetafileAs(HWND, LPSTR); <br>BOOL APIENTRY bPlayRecord(HDC, LPHANDLETABLE, LPENHMETARECORD, UINT, LPVOID); <br>BOOL APIENTRY bDoHitTest(HDC, LPHANDLETABLE, LPENHMETARECORD, UINT, LPVOID); <br>BOOL bHitTest(HDC, INT, INT); <br>HBITMAP hBmpLoadBitmapFile(HDC, PSTR); <br>BOOL bGetBMP(HWND, BOOL); <br>BOOL bChooseNewFont(HWND, PLOGFONT, COLORREF * ); <br>BOOL bChooseNewColor(HWND, LPDWORD); <br>BOOL bPrintMf(PPRTDATA); <br>HBRUSH hBrCreateBrush(HDC, DWORD); <br>BOOL bSelectDIBPal(HDC, LPBITMAPINFO, BOOL); <br>BOOL bFreeDibFile(PDIBDATA); <br>BOOL bPlgBlt(HDC, LPPOINT); <br>HPALETTE CopyPalette(HPALETTE hPalSrc); <br>int CALLBACK iTT(LPLOGFONT, LPTEXTMETRIC, DWORD, LPARAM); <br>CMTMLTFMT *pLoadMltFmtFile(VOID); <br>HLOCAL Free(CMTMLTFMT *pMfmt); <br>BOOL bGetEPSBounds(LPVOID, RECTL *); <br>BOOL bIsAdobe(char *szStr); <br>BOOL bIsEPS(char *szStr); <br>BOOL bIsBndBox(char *szStr); <br>BOOL bIsEOF(char *szStr); <br>//BOOL bGetWord(LPVOID, char *, char **); <br>//BOOL bGoNextLine(LPVOID, char **); <br>BOOL bGetWord(LPVOID, char *, int*); <br>BOOL bGoNextLine(LPVOID, int*); <br>BOOL bSetAdvancedGraphics(HDC hdc); <br> <br>extern unsigned char __stdcall ComponentFromIndex(INT, INT, INT); <br>extern int aiDefaultOverride[20]; <br>extern PALETTEENTRY apeDefaultPalEntry[20]; <br> <br>BOOL bCleanUpRC(VOID); <br>BOOL bSetupRC(HDC hDC, PIXELFORMATDESCRIPTOR *ppfdIn); <br> <br>// <br>// function prototype for looking up string resources <br>// <br> <br>LPTSTR GetStringRes (int); <br>LPTSTR GetStringRes2 (int); <br>LPTSTR BuildFilterStrs(int); </code></pre>
<p>&nbsp;</p></body>
</HTML>

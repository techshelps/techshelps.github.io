<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIALOGS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3467"></a>DIALOGS.C</h2>
<pre><code>//*********************************************************************** <br>// <br>// dialogs.c <br>// <br>// Contains all the dialog procedures for WinCap Windows Screen Capture <br>// Program. <br>// <br>// Dialog Functions: <br>// <br>// AboutDlgProc()         // About Box <br>// PrintDlgProc()         // Print Options Dialog <br>// SavingDlgProc()        // Dialog which displays "Saving to file..." <br>// <br>// Written by Microsoft Product Support Services, Developer Support. <br>// Copyright 1991-1998 Microsoft Corporation. All rights reserved. <br>//*********************************************************************** <br> <br>#define     STRICT      // enable strict type checking <br> <br>#include &lt;windows.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include "WINCAP.h" <br>#include "DIALOGS.h" <br>#include "commdlg.h" <br>#include "resource.h" <br> <br>// Global variables which are set in main program  <br> <br>extern char         szAppName[20];  /// Name of app <br>extern HINSTANCE    ghInst;         /// Handle to instance <br>extern HWND         ghWndMain;      /// Handle to main window <br>extern BOOL         gbNowCapturing; <br>extern BOOLgbCaptRect; <br> <br>//********************************************************************** <br>// <br>//"About" Dialog Box Window Procedure <br>// <br>// Notable features:  This dialog box draws the application's icon <br>// in the dialog box itself. The icon is actually stretched larger to <br>// fit in the specified area, which must be done manually. <br>// See WM_PAINT case. <br>// <br>// <br>//*********************************************************************** <br> <br>BOOL APIENTRY AboutDlgProc(HWND hWndDlg, UINT Message, WPARAM wParam, LONG <br>        lParam) <br>{ <br>    static HBITMAP  ghAboutBmp = NULL; <br> <br>    switch (Message) <br>    { <br>        // Set focus on the OK button.  Since we set focus, return FALSE <br> <br>        case WM_INITDIALOG: <br>            SetFocus(GetDlgItem(hWndDlg, IDOK)); <br>            ghAboutBmp = LoadBitmap(ghInst, "ABOUTBMP"); <br>            return FALSE; <br> <br>        //Closing the Dialog behaves the same as Cancel <br> <br>        case WM_CLOSE: <br>            PostMessage(hWndDlg, WM_COMMAND, IDCANCEL, 0L); <br>            break; <br> <br>        case WM_COMMAND: <br>            switch (wParam) <br>            { <br>                case IDOK: <br> <br>                case IDCANCEL: <br>                    EndDialog(hWndDlg, FALSE); <br>                    if (ghAboutBmp) <br>                        DeleteObject(ghAboutBmp); <br> <br>                    break; <br>            } <br>            break;    //End of WM_COMMAND <br> <br>        // Paint our bitmap in the about box in the WM_PAINT case <br> <br>        case WM_PAINT: <br>        { <br>            HBITMAP     hbm; <br>            HDC         hdcMem; <br>            PAINTSTRUCT ps;    <br>            RECT        r1;        // Coordinates of TEXT1 control <br>            POINT       p1;        // Used to convert screen to client coords <br>            BITMAP      bm;        // For getting info about "About" bitmap <br> <br>            BeginPaint(hWndDlg, &amp;ps); <br> <br>            // Place screen coords of TEXT1 in r1 <br> <br>            GetWindowRect(GetDlgItem(hWndDlg, IDC_TEXT1), &amp;r1); <br>            p1.x = r1.left; <br>            p1.y = r1.top; <br> <br>            ScreenToClient(hWndDlg, &amp;p1); <br> <br>            // p1 now describes the location of upper-left corner <br>            // for the top text in the dialog.  Let's use this <br>            // to make sure we don't draw our bitmap over the text <br> <br>            r1.left = 12; <br>            r1.top = p1.y; <br>            r1.right = p1.x - 25; <br>            r1.bottom = r1.top + (r1.right - r1.left); // Make it square <br> <br>            if (hdcMem = CreateCompatibleDC(ps.hdc)) <br>            { <br>                GetObject(ghAboutBmp, sizeof(BITMAP), (LPVOID)&amp;bm); <br>                hbm = SelectObject(hdcMem, ghAboutBmp); <br>                StretchBlt(ps.hdc, r1.left, r1.top, r1.right, r1.bottom, hdcMem, <br>                        0, 0, bm.bmWidth, bm.bmHeight, SRCCOPY); <br>                SelectObject(hdcMem, hbm); <br>                DeleteDC(hdcMem); <br>            } <br> <br>            EndPaint(hWndDlg, &amp;ps); <br>            break; <br>        } <br>     <br>        default: <br>            return FALSE; <br>    } <br> <br>    return TRUE; <br>} // End of DIALOGSMsgProc <br> <br> <br>//*********************************************************************** <br>// <br>// "Print" Dialog Box Window Procedure <br>// <br>// This procedure takes care of the processing for the "Print" dialog <br>// box, which contains the printing options. <br>// <br>// This Dialog Box Procedure is called using DialogBoxParam.  This <br>// allows us to pass a parameter into the dialog box procedure -- the <br>// parameter that gets passed in here is a LPSTR to a structure holding <br>// all the options that the user specified in this dialog box.  This <br>// allows passing the options back to the main program WITHOUT using <br>// global variables. <br>// <br>//*********************************************************************** <br> <br>BOOL APIENTRY PrintDlgProc(HWND hWndDlg, UINT Message, WPARAM wParam, <br>        LPARAM lParam) <br>{ <br>    static LPOPTIONSTRUCT   lpOS; <br> <br>    switch (Message) <br>    { <br>        case WM_INITDIALOG: <br>        { <br> <br>            // Because DialogBoxParam() was used to invoke this dialog box, <br>            // lParam contains a pointer to the OPTIONSTRUCT. <br>            // Place user input in this structure before returning. <br> <br>            lpOS = (LPOPTIONSTRUCT)lParam; <br> <br>            // Check the default button -- "BEST FIT" <br> <br>            CheckRadioButton(hWndDlg, IDC_BESTFIT, IDC_STRETCHTOPAGE, IDC_BESTFIT); <br> <br>            // Gray out the stuff under "SCALE" <br> <br>            EnableWindow(GetDlgItem(hWndDlg, IDC_XAXIS), FALSE); <br>            EnableWindow(GetDlgItem(hWndDlg, IDC_YAXIS), FALSE); <br>            EnableWindow(GetDlgItem(hWndDlg, IDC_XTEXT), FALSE); <br>            EnableWindow(GetDlgItem(hWndDlg, IDC_YTEXT), FALSE); <br>            break; <br>        } <br> <br>        // Closing the Dialog should behave the same as Cancel <br> <br>        case WM_CLOSE:         <br>            PostMessage(hWndDlg, WM_COMMAND, IDCANCEL, 0L); <br>            break; <br> <br>        case WM_COMMAND: <br>            switch (wParam) <br>            { <br>                case IDC_BESTFIT: <br> <br>                case IDC_STRETCHTOPAGE:                 <br> <br>                case IDC_SCALE: <br> <br>                    // Check the correct button <br> <br>                    CheckRadioButton(hWndDlg, IDC_BESTFIT, IDC_SCALE, wParam); <br> <br>                    // And enable or disable the options under "Scale", <br>                    // depending on whether or not the IDC_SCALE button <br>                    // is checked <br> <br>                    EnableWindow(GetDlgItem(hWndDlg, IDC_XAXIS), <br>                            (BOOL)(wParam == IDC_SCALE)); <br>                    EnableWindow(GetDlgItem(hWndDlg, IDC_YAXIS), <br>                            (BOOL)(wParam == IDC_SCALE)); <br>                    EnableWindow(GetDlgItem(hWndDlg, IDC_XTEXT), <br>                            (BOOL)(wParam == IDC_SCALE)); <br>                    EnableWindow(GetDlgItem(hWndDlg, IDC_YTEXT), <br>                            (BOOL)(wParam == IDC_SCALE)); <br>                    break; <br> <br>                case IDOK: <br>                { <br>                    char    szTmp[100]; <br> <br>                    // Save the user's selection into the OPTIONSTRUCT <br> <br>                    if (!lpOS) <br>                    { <br>                        EndDialog(hWndDlg, FALSE); <br>                        break; <br>                    } <br> <br>                    if (IsDlgButtonChecked(hWndDlg, IDC_BESTFIT)) <br>                        lpOS-&gt;iOption = IDC_BESTFIT; <br> <br>                    if (IsDlgButtonChecked(hWndDlg, IDC_STRETCHTOPAGE)) <br>                        lpOS-&gt;iOption = IDC_STRETCHTOPAGE; <br> <br>                    if (IsDlgButtonChecked(hWndDlg, IDC_SCALE)) <br>                        lpOS-&gt;iOption = IDC_SCALE; <br> <br>                    if (GetDlgItemText(hWndDlg, IDC_XAXIS, (LPSTR)szTmp, 100)) <br>                        lpOS-&gt;iXScale = atoi(szTmp); <br> <br>                    if (GetDlgItemText(hWndDlg, IDC_YAXIS, (LPSTR)szTmp, 100)) <br>                        lpOS-&gt;iYScale = atoi(szTmp); <br> <br>                    EndDialog(hWndDlg, TRUE); <br>                    break; <br>                } <br>          <br> <br>                case IDCANCEL: <br>                    EndDialog(hWndDlg, FALSE); <br>                    break; <br>            } // End of WM_COMMAND <br> <br>            break; <br>                 <br>        default: <br>            return FALSE; <br>    } <br> <br>    return TRUE; <br>} <br> <br> <br>//*********************************************************************** <br>// <br>// "Saving file to..." Dialog Box Window Procedure <br>// <br>// This is a modeless dialog box which is called when we save the bitmap <br>// to a file (so the user dosen't think his machine has hung). <br>// <br>//*********************************************************************** <br> <br>BOOL APIENTRY SavingDlgProc(HWND hDlg, UINT message, WPARAM wParam, <br>        LPARAM lParam) <br>{ <br>    switch (message) <br>    { <br>        case WM_SETFOCUS: <br>            MessageBeep(0); <br>            break; <br> <br>        case WM_INITDIALOG: <br> <br>            // Set the text of the filename in the dialog box.  This dialog <br>            // should be called with DialogBoxParam, and the parameter should <br>            // be a pointer to the filename.  It shows up as the lParam here. <br> <br>            SetDlgItemText(hDlg, IDC_FILETEXT, (LPSTR)lParam); <br>            return TRUE; <br>            break; <br> <br>        case WM_DESTROY: <br>            return TRUE; <br>            break; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br>//*********************************************************************** <br>// <br>// Selection Help Dialog Box Window Procedure <br>// <br>// This is a modeless dialog box which displays how to select a window to <br>// be captured <br>// <br>//*********************************************************************** <br>BOOL APIENTRY SelectDlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM <br>        lParam) <br>{ <br>    switch (message) <br>    { <br>        case WM_INITDIALOG: <br>        { <br>            HGLOBAL     hMem; <br>            char        *szText; <br> <br>            hMem = GlobalAlloc(GHND, 200); <br>            szText = (char *)GlobalLock(hMem); <br>            if(szText == NULL) <br>                return TRUE; <br> <br>            LoadString(ghInst, IDS_SELECT2, szText, 200); <br>            SetDlgItemText(hDlg, IDC_STATIC_SELECT2, szText); <br>            LoadString(ghInst, IDS_SELECT3, szText, 200); <br>            SetDlgItemText(hDlg, IDC_STATIC_SELECT3, szText); <br> <br>            GlobalUnlock(hMem); <br>            GlobalFree(hMem); <br> <br>            return TRUE; <br>        } <br> <br>        case WM_COMMAND: <br>            if ((wParam) != IDCANCEL) <br>                return FALSE; <br>            else <br>            { <br>                ShowWindow(hDlg, SW_HIDE); <br>                gbNowCapturing = FALSE; <br>                return TRUE; <br>            } <br> <br>        case WM_SYSCOMMAND: <br>            if(wParam == SC_CLOSE) <br>            { <br>                ShowWindow(hDlg, SW_HIDE); <br>                gbNowCapturing = FALSE; <br>                return TRUE; <br>            } <br>            else <br>                return FALSE; <br> <br>        case WM_DESTROY: <br>            return TRUE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} <br> <br> <br>//*********************************************************************** <br>// <br>// Selection Help Dialog Box Window Procedure <br>// <br>// This is a modeless dialog box which displays how to select a window to <br>// be captured <br>// <br>//*********************************************************************** <br>BOOL APIENTRY RectangleDlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM <br>        lParam) <br>{ <br>    switch (message) <br>    { <br>        case WM_INITDIALOG: <br>        { <br>            HGLOBAL     hMem; <br>            char        *szText; <br> <br>            hMem = GlobalAlloc(GHND, 200); <br>            szText = (char *)GlobalLock(hMem); <br>            if(szText == NULL) <br>                return TRUE; <br> <br>            LoadString(ghInst, IDS_RECT2, szText, 200); <br>            SetDlgItemText(hDlg, IDC_STATIC_RECT2, szText); <br>            LoadString(ghInst, IDS_RECT3, szText, 200); <br>            SetDlgItemText(hDlg, IDC_STATIC_RECT3, szText); <br> <br>            GlobalUnlock(hMem); <br>            GlobalFree(hMem); <br> <br>            return TRUE; <br>        } <br> <br>        case WM_COMMAND: <br>            if ((wParam) != IDCANCEL) <br>                return FALSE; <br>            else <br>            { <br>                ShowWindow(hDlg, SW_HIDE); <br>                gbNowCapturing = FALSE; <br>gbCaptRect = FALSE; <br>                return TRUE; <br>            } <br> <br>        case WM_SYSCOMMAND: <br>            if(wParam == SC_CLOSE) <br>            { <br>                ShowWindow(hDlg, SW_HIDE); <br>                gbNowCapturing = FALSE; <br>                return TRUE; <br>            } <br>            else <br>                return FALSE; <br> <br>        case WM_DESTROY: <br>            return TRUE; <br> <br>        default: <br>            return FALSE; <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

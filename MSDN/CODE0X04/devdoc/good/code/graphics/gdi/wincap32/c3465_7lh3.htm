<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HOOK.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3477"></a>HOOK.C</h2>
<pre><code>//*********************************************************************** <br>// <br>// hook.c <br>// <br>// Source file for Keyboard Hook function and support procedures.  Defines <br>// the following exported functions: <br>//   <br>// InstallHook()       - Installs/Removes keyboard hook for app's hotkeys <br>// KeyboardHook()      - Keyboard Hook Procedure <br>// <br>// This file should go into a DLL. <br>// <br>// This file, although not officially containing DIB functions, is part  <br>// of the DIBAPI.DLL because: <br>//   1) System-wide Hook Procedures in 3.1 need to be in a DLL, and  <br>//   2) I didn't want the user to have 2 DLLs to worry about for WINCAP.  <br>// <br>// <br>// Written by Microsoft Product Support Services, Developer Support. <br>// Copyright 1991-1998 Microsoft Corporation. All rights reserved. <br>//*********************************************************************** <br> <br>#define     STRICT      // enable strict type checking <br> <br>#include &lt;windows.h&gt; <br>#include "wincap.h" <br> <br>// Globals for this module <br> <br>extern HWND     ghWndMain;      // Handle to main window -- used to post msgs <br> <br>static HHOOK    hHook;          // A handle to our installed hook <br>static BOOL     bHookInstalled; // TRUE if hook has been installed <br> <br> <br>// External variables <br> <br>extern HANDLE ghDLLInst;   // Handle to the DLL's instance.  Set in DllMain. <br> <br>// Local function.  Although this function is exported from our DLL (Windows <br>// needs to call it directly), no other app needs to call this, so we can <br>// just prototype it here.  <br> <br>LRESULT CALLBACK KeyboardHook (int nCode, WORD wParam, DWORD lParam ); <br> <br>//********************************************************************** <br>// InstallHook() <br>// <br>// Installs/Removes Filter function for the WH_KEYBOARD hook. <br>// <br>// Parameters: <br>// HWND hWnd      Handle to main window to receive posted messages.  See <br>//                KeyboardHook() for more info on how it works. <br>//  <br>// BOOL bCode     TRUE to hook, FALSE to unhook <br>// <br>// Returns: <br>// 1 if successful, 0 if not. <br>// <br>//********************************************************************** <br> <br>int APIENTRY InstallHook (HWND hWnd, BOOL bCode ) <br>{ <br> <br>    int nReturn = 1; <br> <br>    ghWndMain = hWnd;  // Store app's window handle in DLL global variable <br> <br>    // Make sure that we are installing/removing in the proper order <br> <br>    if (bCode == bHookInstalled) <br>        return 0; <br> <br>    if (bCode) <br>    { <br>        hHook = (HHOOK)SetWindowsHookEx(WH_KEYBOARD,(HOOKPROC)KeyboardHook, <br>            ghDLLInst, 0); <br> <br>        if (!hHook) <br>            return 0; <br> <br>        bHookInstalled = TRUE; <br>    } <br>    else <br>    { <br>        nReturn = UnhookWindowsHookEx(hHook); <br>        bHookInstalled = FALSE; <br>    } <br>    return nReturn; <br>} <br> <br> <br> <br> <br>//********************************************************************** <br>// <br>// KeyboardHook() <br>// <br>// This is the Keyboard Hook function which windows will call every <br>// time it gets a keyboard message.  In this function, we check to <br>// see if the key pressed was Ctrl+Alt+F[8,9,10], and if it is, we post <br>// the proper message to our main window which will do the right <br>// thing.   <br>// <br>// Note that the window handle that we post from was set by a call to <br>// InstallHook() above. <br>// <br>// Parameters/return value: <br>// <br>// Standard 3.1 KeyboardProc.  See docs for "KeyboardProc". <br>// <br>//********************************************************************* <br> <br>LRESULT CALLBACK KeyboardHook (int nCode, WORD wParam, DWORD lParam ) <br>{ <br> <br>    if ( nCode &gt;= 0 ) <br>    { <br> <br>        // Check to see if it's a key we're looking for <br> <br>        if (GetKeyState(VK_SHIFT) &lt; 0 &amp;&amp; GetKeyState(VK_CONTROL) &lt; 0) <br>        { <br>            switch (wParam) <br>            { <br> <br>//      MENUITEM    "&amp;Active Window \aCtrl+Shift+F9",  IDM_ACTIVEWINDOW <br>//      MENUITEM    "&amp;Desktop\aCtrl+Shift+F10",       IDM_DESKTOP <br> <br>                case VK_F9: <br>                    if (HIWORD(lParam) &amp; 0x8000) <br>                        PostMessage(ghWndMain, WM_COMMAND, IDM_ACTIVEWINDOW, 0L); <br>                    return 1; <br> <br>                case VK_F10: <br> <br>                    if (HIWORD(lParam) &amp; 0x8000) <br>                        PostMessage(ghWndMain, WM_COMMAND, IDM_DESKTOP, 0L); <br>                    return 1; <br>            } <br>        } <br>   } <br> <br>   // <br>   // If we haven't returned 1 by the time we get here, then we <br>   // need to pass on the message to CallNextHookEx. <br>   // <br>   return (int)CallNextHookEx(hHook, nCode, wParam, lParam); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRINT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3455"></a>PRINT.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/******************************************************************************* <br> *                                                                             * <br> *  MODULE      : Print.c                                                      * <br> *                                                                             * <br> *  DESCRIPTION : Routines used for printing.                                  * <br> *                                                                             * <br> *  FUNCTIONS   : GetPrinterDC()   - Gets default printer from WIN.INI and     * <br> *                                   creates a DC for it.                      * <br> *                                                                             * <br> *                InitPrinting()   - Initializes print job.                    * <br> *                                                                             * <br> *                TermPrinting()   - Terminates print job.                     * <br> *                                                                             * <br> *                PrintDlgProc()   - Dialog function for the "Cancel Printing" * <br> *                                   dialog.                                   * <br> *                                                                             * <br> *                AbortProc()      - Peeks at message queue for messages from  * <br> *                                   the print dialog.                         * <br> *                                                                             * <br> *******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;commdlg.h&gt; <br>#define _MBCS <br>#include &lt;mbstring.h&gt; <br>#include "showdib.h" <br> <br>FARPROC  lpfnAbortProc    = NULL; <br>FARPROC  lpfnPrintDlgProc = NULL; <br>HWND     hWndParent       = NULL; <br>HWND     hDlgPrint        = NULL; <br>BOOL     bError; <br>BOOL     bUserAbort; <br> <br> <br>BOOL APIENTRY AbortProc (HDC, SHORT); <br>BOOL APIENTRY PrintDlgProc (HWND, WORD, UINT, DWORD); <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : GetPrinterDC()                                             * <br> *                                                                          * <br> *  PURPOSE    : Read WIN.INI for default printer and create a DC for it.   * <br> *                                                                          * <br> *  RETURNS    : A handle to the DC if successful or NULL otherwise.        * <br> *                                                                          * <br> ****************************************************************************/ <br>HDC PASCAL GetPrinterDC() { <br> <br>    PRINTDLG pd; <br> <br>    memset(&amp;pd, 0, sizeof(PRINTDLG)); <br>    pd.lStructSize = sizeof(PRINTDLG); <br>    pd.Flags = PD_RETURNDC; <br>    pd.hwndOwner = hWndApp; <br>    pd.hInstance = (HANDLE) NULL; <br> <br>    // Display the PRINT dialog box. */ <br> <br>    if( PrintDlg(&amp;pd) == TRUE ) { <br>        return( pd.hDC );         <br>    } <br>    else <br>        return( NULL ); <br> <br>} <br> <br>// <br>// Getting the printer DC the old fashion way... <br>// called to enable or disable the IDM_PRINT menu item. <br>// <br>HDC PASCAL GetPrinterDC1() <br>{ <br>    static CHAR szPrinter [80]; <br>    CHAR    *szDevice, *szDriver, *szOutput; <br> <br>    GetProfileString ("windows", "device", "", szPrinter, sizeof(szPrinter)); <br> <br>    if ((szDevice = _mbstok (szPrinter, "," )) &amp;&amp; <br>        (szDriver = _mbstok (NULL,      ", ")) &amp;&amp; <br>        (szOutput = _mbstok (NULL,      ", "))) <br> <br>        return CreateDC (szDriver, szDevice, szOutput, NULL) ; <br> <br>    return NULL; <br>} <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   : InitPrinting(HDC hDC, HWND hWnd, HANDLE hInst, LPSTR msg)  * <br> *                                                                          * <br> *  PURPOSE    : Makes preliminary driver calls to set up print job.        * <br> *                                                                          * <br> *  RETURNS    : TRUE  - if successful.                                     * <br> *               FALSE - otherwise.                                         * <br> *                                                                          * <br> ****************************************************************************/ <br>BOOL PASCAL InitPrinting(HDC hDC, HWND hWnd, HANDLE hInst, LPSTR msg) <br>{ <br>    DOCINFO         DocInfo; <br> <br>    bError     = FALSE;     /* no errors yet */ <br>    bUserAbort = FALSE;     /* user hasn't aborted */ <br> <br>    hWndParent = hWnd;      /* save for Enable at Term time */ <br> <br>    lpfnPrintDlgProc = (DLGPROC) MakeProcInstance (PrintDlgProc, hInst); <br>    lpfnAbortProc    = (WNDPROC) MakeProcInstance (AbortProc, hInst); <br> <br>    hDlgPrint = CreateDialog (hInst, "PRTDLG", hWndParent,  <br>    (DLGPROC)lpfnPrintDlgProc); <br> <br>    if (!hDlgPrint) <br>        return FALSE; <br> <br>    SetWindowText (hDlgPrint, msg); <br>    EnableWindow (hWndParent, FALSE);        /* disable parent */ <br> <br>// <br>// Use new printing APIs...Petrus Wong 12-May-1993 <br>// <br>    if (SetAbortProc(hDC, (ABORTPROC)lpfnAbortProc) &lt;= 0) { <br>        bError = TRUE; <br>        return FALSE; <br>    } <br> <br>    memset(&amp;DocInfo, 0, sizeof(DOCINFO)); <br>    DocInfo.cbSize      = sizeof(DOCINFO); <br>    DocInfo.lpszDocName = (LPTSTR) msg; <br>    DocInfo.lpszOutput  = NULL; <br> <br>    if (StartDoc(hDC, &amp;DocInfo) &lt;= 0) { <br>        bError = TRUE; <br>        return FALSE; <br>    } <br>    bError = FALSE; <br> <br>    /* might want to call the abort proc here to allow the user to <br>     * abort just before printing begins */ <br>    return TRUE; <br>} <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   :  TermPrinting(HDC hDC)                                     * <br> *                                                                          * <br> *  PURPOSE    :  Terminates print job.                                     * <br> *                                                                          * <br> ****************************************************************************/ <br>VOID PASCAL TermPrinting(HDC hDC) <br>{ <br>// <br>// Use new printing APIs...Petrus Wong 12-May-1993 <br>// <br>    if (!bError) <br>        EndDoc(hDC); <br> <br>    if (bUserAbort) <br>        AbortDoc(hDC); <br>    else { <br>        EnableWindow(hWndParent, TRUE); <br>        DestroyWindow(hDlgPrint); <br>    } <br> <br>    FreeProcInstance(lpfnAbortProc); <br>    FreeProcInstance(lpfnPrintDlgProc); <br>} <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   :PrintDlgProc (HWND, unsigned , WORD , DWORD )               * <br> *                                                                          * <br> *  PURPOSE    :Dialog function for the "Cancel Printing" dialog. It sets   * <br> *              the abort flag if the user presses &lt;Cancel&gt;.                * <br> *                                                                          * <br> ****************************************************************************/ <br>BOOL APIENTRY PrintDlgProc (HWND hDlg, WORD iMessage, UINT wParam, DWORD lParam) <br>{ <br>    switch (iMessage) { <br>    case WM_INITDIALOG: <br> <br>            EnableMenuItem (GetSystemMenu (hDlg, FALSE), (WORD)SC_CLOSE, (WORD)MF_GRAYED); <br>            break; <br> <br>    case WM_COMMAND: <br>            bUserAbort = TRUE; <br>            EnableWindow (hWndParent, TRUE); <br>            DestroyWindow (hDlg); <br>            hDlgPrint = 0; <br>            break; <br> <br>    default: <br>            return FALSE; <br>    } <br>    return TRUE; <br>        UNREFERENCED_PARAMETER(wParam); <br>        UNREFERENCED_PARAMETER(lParam); <br>} <br> <br>/**************************************************************************** <br> *                                                                          * <br> *  FUNCTION   :AbortProc (HDC hPrnDC, short nCode)                         * <br> *                                                                          * <br> *  PURPOSE    :Checks message queue for messages from the "Cancel Printing"* <br> *              dialog. If it sees a message, (this will be from a print    * <br> *              cancel command), it terminates.                             * <br> *                                                                          * <br> *  RETURNS    :Inverse of Abort flag                                       * <br> *                                                                          * <br> ****************************************************************************/ <br>BOOL APIENTRY AbortProc (HDC hPrnDC, SHORT nCode) <br>{ <br>    MSG   msg; <br> <br>    while (!bUserAbort &amp;&amp; PeekMessage (&amp;msg, NULL, 0, 0, PM_REMOVE)) { <br>        if (!hDlgPrint || !IsDialogMessage(hDlgPrint, &amp;msg)) { <br>            TranslateMessage (&amp;msg); <br>            DispatchMessage (&amp;msg); <br>        } <br>    } <br>    return !bUserAbort; <br>        UNREFERENCED_PARAMETER(hPrnDC); <br>        UNREFERENCED_PARAMETER(nCode); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

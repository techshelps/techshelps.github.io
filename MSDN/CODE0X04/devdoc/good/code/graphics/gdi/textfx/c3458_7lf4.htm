<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GUIDE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3460"></a>GUIDE.C</h2>
<pre><code>/*****************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples. <br>*       Copyright 1992 - 1998 Microsoft Corporation. <br>*       All rights reserved. <br>*       This source code is only intended as a supplement to <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the <br>*       Microsoft samples programs. <br>\*****************************************************************************/ <br>/***************************************************************************** <br> * * <br> *FX.C                              * <br> * * <br> *PURPOSE:  Routines for rendering text with stange effects                * <br> * * <br> *  GetGuideLine       - Retrieves a guide line from the user.  A guide line * <br> * is just an array of line segments.    * <br> * * <br> *  ShowGuide   - Displays a guide line into a DC                     * <br> * * <br> *****************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include "guide.h" <br> <br>/********************************************************************** <br> *                                                                    * <br> * FUNCTION:  GetGuideLine(HWND, LPPOINT, LPDWORD)                    * <br> *  * <br> * PURPOSE:   Gets a guide line that is entered by the user.  This is * <br> *            initiated on a WM_LBUTTONDOWN.                          * <br> *                                                                    * <br> *********************************************************************/ <br>BOOL GetGuideLine(HWND hWnd, LPPOINT *lpPoint, LPDWORD lpdwNumPts) <br>{ <br>    MSG msg; <br>    HDC hDC = GetDC(hWnd); <br>    BOOL bFirstTime = TRUE; <br>    DWORD dwPos = 0; <br>    RECT rect; <br> <br>    SetCapture(hWnd); <br>    GetClientRect(hWnd, &amp;rect); <br>     <br>    // Allocate enough room for a reasonable line <br>    *lpPoint = (LPPOINT)GlobalAlloc(GPTR, MAXGUIDESEGMENTS * sizeof(POINT)); <br> <br>    /* Eat mouse messages until a WM_LBUTTONUP is encountered. Meanwhile <br>     * continue to draw a line that follows the mouse <br>     */ <br>    for (;;){ <br>        WaitMessage(); <br>        if (PeekMessage(&amp;msg,NULL,WM_MOUSEFIRST,WM_MOUSELAST,PM_REMOVE)) { <br>                         <br>            // Make sure we are still tracking in our client area <br>            if ((LOWORD(msg.lParam) &lt; rect.right) &amp;&amp; (HIWORD(msg.lParam) &lt; rect.bottom)) { <br>             <br>                // Set the CP to our starting position if we are starting <br>                if (bFirstTime) { <br>                  bFirstTime = FALSE; <br>      MoveToEx(hDC, LOWORD(msg.lParam), HIWORD(msg.lParam), NULL); <br>    } <br>                           <br>                // If we dont have more points than we want... <br>                if (dwPos &lt; MAXGUIDESEGMENTS) { <br>         <br>            // Store the point in our array <br>            (*lpPoint)[dwPos].x = LOWORD(msg.lParam); <br>            (*lpPoint)[dwPos].y = HIWORD(msg.lParam); <br>                 <br>            // Draw from the last point to this one <br>            LineTo(hDC, (*lpPoint)[dwPos].x, (*lpPoint)[dwPos].y); <br> <br>            // Increment our "number of points" counter <br>            dwPos++; <br>    } <br>            } <br> <br>            // Bail when the user lets the left button up <br>            if (msg.message == WM_LBUTTONUP) <br>               break;                        <br>        } <br>        else <br>            continue; <br>    } <br> <br>    *lpdwNumPts = dwPos; <br> <br>    ReleaseDC(hWnd, hDC); <br>    <br>    ReleaseCapture(); <br> <br>    return TRUE; <br>} <br> <br>/********************************************************************** <br> *                                                                    * <br> * FUNCTION:  ShowGuide(HDC, LPPOINT, DWORD)                          * <br> *  * <br> * PURPOSE:   Draws a guide line into a DC  * <br> *                                                                    * <br> *********************************************************************/ <br>BOOL ShowGuide(HDC hDC, LPPOINT lpPoints, DWORD dwNumPts) <br>{ <br>  HPEN hOldBrush; <br>    <br>  // Draw the line <br>  Polyline(hDC, lpPoints, dwNumPts); <br> <br>  // Draw green circle to indicate line starting point <br>  hOldBrush = SelectObject(hDC, CreateSolidBrush(RGB(0,255,0)));  <br>  Ellipse(hDC, lpPoints[0].x-5, lpPoints[0].y-5,  <br>               lpPoints[0].x+5, lpPoints[0].y+5); <br>   <br>  // Draw red circle to indicate line ending point <br>  DeleteObject(SelectObject(hDC, CreateSolidBrush(RGB(255,0,0))));  <br>  Ellipse(hDC, lpPoints[dwNumPts-1].x-5, lpPoints[dwNumPts-1].y-5,  <br>               lpPoints[dwNumPts-1].x+5, lpPoints[dwNumPts-1].y+5); <br>  DeleteObject(SelectObject(hDC, hOldBrush));  <br>   <br>  return TRUE; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

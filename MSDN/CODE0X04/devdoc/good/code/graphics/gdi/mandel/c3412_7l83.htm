<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAVEBMP.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3423"></a>SAVEBMP.C</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: savebmp.c <br>* <br>* <br>* Created: 06-Jan-1992 10:59:36 <br>* <br>* Copyright 1993 - 1998 Microsoft Corporation <br>* <br>* Contains the main routine, SaveBitmapFile, for saving a DDB into file <br>* in DIB format. <br>* <br>* Dependencies: <br>* <br>*   (#defines) <br>*   (#includes) <br>*       #include &lt;windows.h&gt; <br>*       #include "jtypes.h" <br>* <br>\**************************************************************************/ <br>#include &lt;windows.h&gt; <br>#include "julia.h" <br> <br>extern HPALETTE ghPal; <br>extern HWND ghwndMain; <br>extern char   gtext[256]; <br>BOOL SaveBitmapFile(HDC, HBITMAP, PSTR); <br>// void ErrorOut(char errstring[30]); <br> <br>/******************************Public*Routine******************************\ <br>* SaveBitmapFile <br>* <br>* <br>* Effects: Save pInfo-&gt;hBmpSaved into disk specified by pszFileName <br>* <br>* Warnings: assumes hBmpSaved is not selected into window's DC other than <br>*           pInfo-&gt;hwnd's DC <br>* <br>\**************************************************************************/ <br> <br>BOOL SaveBitmapFile(HDC hDC, HBITMAP hBmp, PSTR pszFileName) <br>{ <br>    int         hFile; <br>    OFSTRUCT    ofReOpenBuff; <br>    HBITMAP     hTmpBmp, hBmpOld; <br>    BOOL        bSuccess; <br>    BITMAPFILEHEADER    bfh; <br>    PBITMAPINFO pbmi; <br>    PBYTE       pBits; <br>    BITMAPINFO  bmi; <br>    PBYTE pjTmp, pjTmpBmi; <br>    ULONG sizBMI; <br> <br> <br>    bSuccess = TRUE; <br>#if 0 <br>    if (ghPal) { <br>        SelectPalette(hDC, ghPal, FALSE); <br>        RealizePalette(hDC); <br>    } <br>#endif <br>    if (!hBmp) { <br>        MessageBox(ghwndMain,  <br>       GetStringRes (IDS_NO_BITMAP_TO_SAVE), <br>   NULL, MB_OK); <br>        return FALSE; <br>    } <br> <br>    // <br>    // Let the graphics engine to retrieve the dimension of the bitmap for us <br>    // GetDIBits uses the size to determine if it's BITMAPCOREINFO or BITMAPINFO <br>    // if BitCount != 0, color table will be retrieved <br>    // <br>    bmi.bmiHeader.biSize = 0x28;              // GDI need this to work <br>    bmi.bmiHeader.biBitCount = 0;             // don't get the color table <br>    if ((GetDIBits(hDC, hBmp, 0, 0, (LPSTR)NULL, &amp;bmi, DIB_RGB_COLORS)) == 0) { <br>       return FALSE; <br>    } <br> <br>    // <br>    // Now that we know the size of the image, alloc enough memory to retrieve <br>    // the actual bits <br>    // <br>    if ((pBits = (PBYTE)GlobalAlloc(GMEM_FIXED | GMEM_ZEROINIT, <br>                bmi.bmiHeader.biSizeImage)) == NULL) { <br>        return FALSE; <br>    } <br> <br>    // <br>    // Note: 24 bits per pixel has no color table.  So, we don't have to <br>    // allocate memory for retrieving that.  Otherwise, we do. <br>    // <br>    pbmi = &amp;bmi;                                      // assume no color table <br> <br>    switch (bmi.bmiHeader.biBitCount) { <br>        case 24:                                      // has color table <br>            sizBMI = sizeof(BITMAPINFOHEADER); <br>            break; <br>        case 16: <br>        case 32: <br>            sizBMI = sizeof(BITMAPINFOHEADER)+sizeof(DWORD)*3; <br>            break; <br>        default: <br>            sizBMI = sizeof(BITMAPINFOHEADER)+sizeof(RGBQUAD)*(1&lt;&lt;bmi.bmiHeader.biBitCount); <br>            break; <br> <br>    } <br> <br>    // <br>    // Allocate memory for color table if it is not 24bpp... <br>    // <br>    if (sizBMI != sizeof(BITMAPINFOHEADER)) { <br>        ULONG       sizTmp; <br>        // <br>        // I need more memory for the color table <br>        // <br>        if ((pbmi = (PBITMAPINFO)GlobalAlloc(GMEM_FIXED | GMEM_ZEROINIT, sizBMI )) == NULL) { <br>            bSuccess = FALSE; <br>            goto ErrExit1; <br>        } <br>        // <br>        // Now that we've a bigger chunk of memory, let's copy the Bitmap <br>        // info header data over <br>        // <br>        pjTmp = (PBYTE)pbmi; <br>        pjTmpBmi = (PBYTE)&amp;bmi; <br>        sizTmp = sizeof(BITMAPINFOHEADER); <br> <br>        while(sizTmp--) <br>        { <br>            *(((PBYTE)pjTmp)++) = *((pjTmpBmi)++); <br>        } <br>    } <br> <br>    // <br>    // Let's open the file and get ready for writing <br>    // <br>    if ((hFile = OpenFile(pszFileName, (LPOFSTRUCT)&amp;ofReOpenBuff, <br>                 OF_CREATE | OF_WRITE)) == -1) { <br>        MessageBox(ghwndMain, GetStringRes(IDS_FILE_OPEN_FAILED),  <br>   NULL, MB_OK); <br>        goto ErrExit2; <br>    } <br> <br>    // <br>    // But first, fill in the info for the BitmapFileHeader <br>    // <br>    bfh.bfType = 0x4D42;                            // 'BM' <br>    bfh.bfSize = sizeof(BITMAPFILEHEADER)+sizeof(BITMAPINFOHEADER)+sizBMI+ <br>        pbmi-&gt;bmiHeader.biSizeImage; <br>    bfh.bfReserved1 = <br>    bfh.bfReserved2 = 0; <br>    bfh.bfOffBits = sizeof(BITMAPFILEHEADER)+sizBMI; <br> <br>    // <br>    // Write out the file header now <br>    // <br>    if (_lwrite(hFile, (LPSTR)&amp;bfh, sizeof(BITMAPFILEHEADER)) == -1) { <br>        bSuccess = FALSE; <br>        goto ErrExit3; <br>    } <br> <br>    // <br>    // Bitmap can't be selected into a DC when calling GetDIBits <br>    // Assume that the hDC is the DC where the bitmap would have been selected <br>    // if indeed it has been selected <br>    // <br>    if (hTmpBmp = CreateCompatibleBitmap(hDC, pbmi-&gt;bmiHeader.biWidth, pbmi-&gt;bmiHeader.biHeight)) { <br>        hBmpOld = SelectObject(hDC, hTmpBmp); <br>        if ((GetDIBits(hDC, hBmp, 0, pbmi-&gt;bmiHeader.biHeight, (LPSTR)pBits, pbmi, DIB_RGB_COLORS))==0){ <br>            bSuccess = FALSE; <br>            goto ErrExit4; <br>        } <br>    } else { <br>        MessageBox(ghwndMain,  <br>GetStringRes (IDS_BITMAP_NOT_CREATED), <br>NULL, MB_OK); <br>        bSuccess = FALSE; <br>        goto ErrExit3; <br>    } <br> <br>    // <br>    // Now write out the BitmapInfoHeader and color table, if any <br>    // <br>    if (_lwrite(hFile, (LPSTR)pbmi, sizBMI) == -1) { <br>        bSuccess = FALSE; <br>        goto ErrExit4; <br>    } <br> <br>    // <br>    // write the bits also <br>    // <br>    if (_lwrite(hFile, (LPSTR)pBits, pbmi-&gt;bmiHeader.biSizeImage) == -1) { <br>        bSuccess = FALSE; <br>        goto ErrExit4; <br>    } <br> <br> <br>ErrExit4: <br>    SelectObject(hDC, hBmpOld); <br>    DeleteObject(hTmpBmp); <br>ErrExit3: <br>    _lclose(hFile); <br>ErrExit2: <br>    GlobalFree(pbmi); <br>ErrExit1: <br>    GlobalFree(pBits); <br>    return bSuccess; <br>} <br> <br> <br>#if 0  <br>/************************************************************************ <br> * void ErrorOut(char errstring[30]) <br> * <br> * Purpose: Print out an meainful error code by means of <br> *  GetLastError and printf <br> * <br> * Inputs:  errstring - the action that failed, passed by the <br> *      calling proc. <br> * <br> * Returns: none <br> * <br> * Calls:   GetLastError <br> * <br> * History: <br> * 09-13-91 Pete Grey   Created. <br> * <br>\************************************************************************/ <br> <br> <br>void ErrorOut(char errstring[30]) <br>{ <br>DWORD Error; <br>CHAR  str[80]; <br> <br>Error= GetLastError(); <br>wsprintf((LPSTR) str, "Error on %s = %d\n", errstring, Error); <br>OutputDebugString(str); <br>} <br> <br>#endif <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

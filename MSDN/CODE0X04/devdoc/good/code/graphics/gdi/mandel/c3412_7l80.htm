<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRINTER.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3420"></a>PRINTER.C</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: printer.c <br>* <br>* Contains functions for enermerating printers <br>* <br>* Created: 16-Apr-1992 11:19:00 <br>* <br>* Copyright 1993 - 1998 Microsoft Corporation <br>* <br>* Before printing the bInitPrinter is called for enumerating printers <br>* and doing the setup for printing <br>* <br>* When Mandelbrot Dream exits, bCleanupPrinter is called to free up <br>* memory <br>* <br>* Dependencies: <br>* <br>*   (#defines) <br>*   (#includes) <br>* <br>\**************************************************************************/ <br>#include &lt;windows.h&gt; <br>#include &lt;winspool.h&gt; <br>#include &lt;drivinit.h&gt; <br>#include "julia.h" <br>#include "printer.h" <br> <br>// <br>// Globals for printing <br>// <br>PPRINTER_INFO_1     gpPrinters       = NULL; <br>PSZ                *gpszPrinterNames = NULL; <br>PSZ                *gpszDeviceNames  = NULL; <br> <br>extern HMENU  hPrinterMenu; <br>extern INT    giNPrinters; <br>extern HWND   ghwndMain; <br> <br>BOOL bInitPrinter(HWND); <br>BOOL bCleanupPrinter(VOID); <br> <br> <br>/******************************Public*Routine******************************\ <br>* <br>* bInitPrinter <br>* <br>* Effects: Enumerating printers... <br>* <br>* Warnings: Globals alert!! <br>* <br>\**************************************************************************/ <br> <br>BOOL bInitPrinter(HWND hwnd) { <br>    BOOL        bSuccess; <br>    DWORD       cbPrinters; <br>    DWORD       cbNeeded, cReturned, j; <br>    int         i; <br> <br> <br>    bSuccess = TRUE; <br>    cbPrinters = 4096L; <br>     <br>    if (!(gpPrinters = (PPRINTER_INFO_1)LocalAlloc((LMEM_FIXED | LMEM_ZEROINIT), <br>                                                  cbPrinters))) <br>    { <br>        OutputDebugString( "InitPrint: LocalAlloc for gpPrinters failed."); <br>        return (FALSE); <br>    } <br> <br>    if (!EnumPrinters(PRINTER_ENUM_LOCAL|PRINTER_ENUM_CONNECTIONS, NULL, 1, (LPBYTE)gpPrinters, <br>                      cbPrinters, &amp;cbNeeded, &amp;cReturned)) <br>    { <br>        if (GetLastError() == ERROR_INSUFFICIENT_BUFFER)  <br>        { <br>            LocalFree((LOCALHANDLE)gpPrinters); <br>            gpPrinters = (PPRINTER_INFO_1)LocalAlloc((LMEM_FIXED | LMEM_ZEROINIT), <br>                                               cbNeeded); <br>            cbPrinters = cbNeeded; <br> <br>            if (!EnumPrinters(PRINTER_ENUM_LOCAL|PRINTER_ENUM_CONNECTIONS, NULL, 1, (LPBYTE)gpPrinters, <br>                              cbPrinters, &amp;cbNeeded, &amp;cReturned)) <br>            { <br>                MessageBox(ghwndMain,  <br>       GetStringRes (IDS_ERR_CANT_ENUM_PRINTERS), <br>       NULL, MB_OK); <br>                return (FALSE); <br>            } <br> <br>        }  <br>        else  <br>        { <br>            MessageBox(ghwndMain,  <br>       GetStringRes (IDS_ERR_CANT_ENUM_PRINTERS), <br>   NULL, MB_OK); <br>            return (FALSE); <br>        } <br>    } <br> <br>    // allocate some memory. <br> <br>    gpszPrinterNames = (PSZ *)LocalAlloc((LMEM_FIXED | LMEM_ZEROINIT), <br>                                        cReturned * (DWORD)sizeof(PSZ)); <br> <br>    gpszDeviceNames = (PSZ *)LocalAlloc((LMEM_FIXED | LMEM_ZEROINIT), <br>                                        cReturned * (DWORD)sizeof(PSZ)); <br> <br>    if (giNPrinters != 0) { <br>        for (i = 0; i &lt; giNPrinters; i++) { <br>            RemoveMenu(hPrinterMenu, 3, MF_BYPOSITION); <br>        } <br>        giNPrinters = 0; <br>    } <br> <br>    // insert each printer name into the menu. <br> <br>    j = giNPrinters = cReturned; <br>    for (i = 0; i &lt; (INT) cReturned; i++) <br>    { <br>        // insert into menu from bottom up. <br> <br>        j--;         <br>        InsertMenu(hPrinterMenu, 4, MF_BYCOMMAND | MF_STRING, <br>                   MM_PRINTER + i, (LPSTR)gpPrinters[j].pName); <br> <br>        // save a list of printer names, so we can associate them <br>        // with their menu indices later. <br> <br>        gpszPrinterNames[i] = gpPrinters[j].pName; <br>        gpszDeviceNames[i] = gpPrinters[j].pDescription; <br>    } <br>#if 0 <br>    // <br>    // Use this if this is called in the MDI child instead <br>    // <br>    DrawMenuBar(GetParent(GetParent(hwnd))); <br>#endif <br>    // <br>    // Use this instead if this is called in InitializeApp <br>    // <br>    DrawMenuBar(hwnd); <br>    return (bSuccess); <br>} <br> <br> <br> <br> <br>/******************************Public*Routine******************************\ <br>* <br>* bCleanupPrinter <br>* <br>* Effects:  Local freeing <br>* <br>* Warnings: globals!!! <br>* <br>\**************************************************************************/ <br> <br>BOOL bCleanupPrinter(VOID) <br>{ <br>    if (gpPrinters != NULL) <br>        LocalFree((LOCALHANDLE)gpPrinters); <br>    if (gpszPrinterNames != NULL) <br>        LocalFree((LOCALHANDLE)gpszPrinterNames); <br>    if (gpszDeviceNames  != NULL) <br>        LocalFree((LOCALHANDLE)gpszDeviceNames); <br> <br>    return TRUE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

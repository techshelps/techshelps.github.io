<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3447"></a>README.TXT</h2>
<pre><code>Dynamically Changing the Display Settings <br> <br> <br>The SetDisp sample creates a taskbar notification icon that you can use to <br>dynamically change your display settings. You can change resolution, color <br>depth, and refresh rate. <br> <br>The core functions used are: <br>                                                               <br>   EnumDisplaySettings -- to get the display settings that are supported by <br>  the video driver <br> <br>   ChangeDisplaySettings -- to test and set the display  settings dynamically <br>  and to update the registry with these settings <br> <br>   Shell_NotifyIcon -- to create and maintain the tray icon    <br> <br>   TrackPopupMenu   -- to implement the icon resolution context menu <br> <br> <br>Usage <br>------ <br> <br>To use the sample after building it with NMAKE, run SetDisp.EXE.  This will <br>display a dialog box with a menu of possible resolutions and a will create a <br>tray icon. If you right mouse click on the tray icon the dialog will get <br>the focus.  If you hide the dialog, you can bring it back up with this <br>technique.  If you left mouse click the tray icon, you will get the list of <br>available settings. To remove the tray icon, you must close the main dialog. <br> <br>When SetDisp starts up, it enumerates all of the device modes that the current <br>or default display driver supports.  A #define controls filtering low frequency <br>refresh rates and limits the number of settings SetDisp reads in.  After <br>enumerating the settings, they are added to the menu. On NT, we can easily <br>obtain the current setting with ENUM_CURRENT_SETTINGS, so we set the check <br>mark on the menu and bold the setting that was in use when SetDisp was <br>started. <br> <br>When you select a new setting, SetDisp test to be sure the DEVMODE selected <br>has one of the display attributes set.All of the DEVMODEs used in SetDisp <br>should have these set since they came from the system.It then tests to see if <br>the system believes the DEVMODE is valid. If the change requires a system <br>reboot, a dialog notifies the user that this is not implemented. If the screen <br>change can be dynamic, a resolution changed is attempted.  The user is prompted <br>to see if the new resolution is acceptable.  This is important since the driver <br>may support a setting but the monitor is not able to display it correctly.  To <br>ensure the user does not get stuck with a bad setting, a timer is used to <br>cancel the change if the user does not respond. The default time out is 10 <br>seconds and is controlled by a #define.If the new setting is accepted, the <br>registry is updated.  All of this is done using ChangeDisplaySettings. <br> <br> <br>Notes <br>----- <br> <br>On Windows 95, you cannot use EnumDisplaySettings to get the current settings. <br>In this sample, this causes the check mark to not be displayed and the <br>current setting to not be made bold. Also on Windows 95, color depth changes  <br>require a reboot. <br> <br>Of the possible returns from ChangeDisplaySettings, only success and a reboot <br>required are currently handled.For success, a dynamic resolution change is <br>done.  For a reboot required change, a message is displayed indicating that <br>the sample does not support a reboot. <br> <br>If your driver has many resolutions, the menu may not fit on some resolutions. <br>This could be resolved with the use of sub menus for different settings <br>such as color depth or frequencies. </code></pre>
<p>&nbsp;</p></body>
</HTML>

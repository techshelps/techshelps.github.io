<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HIER2.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3221"></a>HIER2.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: hier2.c <br> * <br> ***************************************************************************/ <br> <br>/* <br> * D3D RM Tutorial program frame hierarchy 2 <br> */ <br> <br>#include "rmdemo.h" <br> <br>BOOL <br>BuildScene(LPDIRECT3DRMDEVICE dev, LPDIRECT3DRMVIEWPORT view, <br>   LPDIRECT3DRMFRAME scene, LPDIRECT3DRMFRAME camera) <br>{ <br>    D3DRMRENDERQUALITY quality = D3DRMRENDER_FLAT; <br>    LPDIRECT3DRMLIGHT l1 = NULL; <br>    LPDIRECT3DRMLIGHT l2 = NULL; <br>    LPDIRECT3DRMFRAME lights = NULL; <br>    LPDIRECT3DRMMESHBUILDER torus_builder = NULL; <br>    LPDIRECT3DRMMESHBUILDER sphere_builder = NULL; <br>    LPDIRECT3DRMMESHBUILDER cube1_builder = NULL; <br>    LPDIRECT3DRMMESHBUILDER cube2_builder = NULL; <br>    LPDIRECT3DRMMESH cube1_mesh = NULL; <br>    LPDIRECT3DRMMESH cube2_mesh = NULL; <br>    LPDIRECT3DRMMESH torus_mesh = NULL; <br>    LPDIRECT3DRMMESH sphere_mesh = NULL; <br>    LPDIRECT3DRMFRAME torus = NULL; <br>    LPDIRECT3DRMFRAME sphere = NULL; <br>    LPDIRECT3DRMFRAME cube1 = NULL; <br>    LPDIRECT3DRMFRAME cube2 = NULL; <br>    HRESULT rval; <br>    view = view;/* not used */ <br> <br>    /* <br>     * This Demo shows a more complex hierarchy of frames <br>     */ <br> <br>    if (FAILED(dev-&gt;lpVtbl-&gt;SetQuality(dev, quality))) <br>goto generic_error; <br>    if (FAILED(dev-&gt;lpVtbl-&gt;SetShades(dev, 16))) <br>goto generic_error; <br> <br>    /* <br>     * initialize the lights in the scene <br>     */ <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;lights))) <br>goto generic_error; <br>    if (FAILED(lights-&gt;lpVtbl-&gt;SetPosition(lights, scene, D3DVAL(5), D3DVAL(5), <br>                                -D3DVAL(5)))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_POINT, D3DVAL(0.9), <br>                                  D3DVAL(0.8), D3DVAL(0.7), &amp;l1))) <br>  goto generic_error; <br>    if (FAILED(lights-&gt;lpVtbl-&gt;AddLight(lights, l1))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_AMBIENT, D3DVAL(0.1), <br>                                  D3DVAL(0.1), D3DVAL(0.1), &amp;l2))) <br>  goto generic_error; <br>    if (FAILED(scene-&gt;lpVtbl-&gt;AddLight(scene, l2))) <br>goto generic_error; <br>    /* <br>     * load mesh files <br>     */ <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;torus_builder))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;sphere_builder))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;cube1_builder))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;cube2_builder))) <br>goto generic_error; <br>    rval = torus_builder-&gt;lpVtbl-&gt;Load(torus_builder, "torus.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load torus.x.\n"); <br>goto ret_with_error; <br>    } <br>    rval = sphere_builder-&gt;lpVtbl-&gt;Load(sphere_builder, "sphere4.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load sphere4.x.\n"); <br>goto ret_with_error; <br>    } <br>    rval = cube1_builder-&gt;lpVtbl-&gt;Load(cube1_builder, "cube.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load cube.x.\n"); <br>goto ret_with_error; <br>    } <br>    rval = cube2_builder-&gt;lpVtbl-&gt;Load(cube2_builder, "cube.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load cube.x.\n"); <br>goto ret_with_error; <br>    } <br> <br>    if (FAILED(cube1_builder-&gt;lpVtbl-&gt;Scale(cube1_builder, D3DVAL(0.25), D3DVAL(0.5), <br>                                 D3DVAL(1.0)))) <br> goto generic_error; <br>    if (FAILED(cube2_builder-&gt;lpVtbl-&gt;Scale(cube2_builder, D3DVAL(0.5), D3DVAL(1.5), <br>                                 D3DVAL(1.0)))) <br> goto generic_error; <br> <br>    if (FAILED(cube1_builder-&gt;lpVtbl-&gt;SetColorRGB(cube1_builder, D3DVAL(0.7),  <br>                                        D3DVAL(0.0), D3DVAL(0.8)))) <br>goto generic_error; <br>    if (FAILED(cube2_builder-&gt;lpVtbl-&gt;SetColorRGB(cube2_builder, D3DVAL(0.0), <br>                                        D3DVAL(1.0), D3DVAL(0.5)))) <br>goto generic_error; <br>    if (FAILED(torus_builder-&gt;lpVtbl-&gt;SetColorRGB(torus_builder, D3DVAL(0.2), <br>                                        D3DVAL(1.0), D3DVAL(0.8)))) <br>goto generic_error; <br> <br>    if (FAILED(torus_builder-&gt;lpVtbl-&gt;CreateMesh(torus_builder, &amp;torus_mesh))) <br>goto generic_error; <br>    if (FAILED(sphere_builder-&gt;lpVtbl-&gt;CreateMesh(sphere_builder, &amp;sphere_mesh))) <br>goto generic_error; <br>    if (FAILED(cube1_builder-&gt;lpVtbl-&gt;CreateMesh(cube1_builder, &amp;cube1_mesh))) <br>goto generic_error; <br>    if (FAILED(cube2_builder-&gt;lpVtbl-&gt;CreateMesh(cube2_builder, &amp;cube2_mesh))) <br>goto generic_error; <br>    RELEASE(torus_builder); <br>    RELEASE(sphere_builder); <br>    RELEASE(cube1_builder); <br>    RELEASE(cube2_builder); <br> <br>    /* <br>     * create a torus frame within the scene create torus frame within <br>     * frame of sphere cube frame within frame of torus <br>     */ <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;sphere))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, sphere, &amp;torus))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, torus, &amp;cube1))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, torus, &amp;cube2))) <br>goto generic_error; <br> <br>    /* <br>     * add the loaded mesh into the frame <br>     */ <br> <br>    if (FAILED(torus-&gt;lpVtbl-&gt;AddVisual(torus, (LPDIRECT3DRMVISUAL) torus_mesh))) <br>goto generic_error; <br>    if (FAILED(sphere-&gt;lpVtbl-&gt;AddVisual(sphere, (LPDIRECT3DRMVISUAL) sphere_mesh))) <br>goto generic_error; <br>    if (FAILED(cube1-&gt;lpVtbl-&gt;AddVisual(cube1, (LPDIRECT3DRMVISUAL) cube1_mesh))) <br>goto generic_error; <br>    if (FAILED(cube2-&gt;lpVtbl-&gt;AddVisual(cube2, (LPDIRECT3DRMVISUAL) cube2_mesh))) <br>goto generic_error; <br> <br>    /* <br>     * set up the frames position, orientation and rotations <br>     */ <br> <br>    if (FAILED(camera-&gt;lpVtbl-&gt;SetPosition(camera, scene, D3DVAL(0), D3DVAL(0), -D3DVAL(25)))) <br>goto generic_error; <br>    if (FAILED(sphere-&gt;lpVtbl-&gt;SetPosition(sphere, scene, D3DVAL(0), D3DVAL(0), D3DVAL(0)))) <br>goto generic_error; <br>    if (FAILED(torus-&gt;lpVtbl-&gt;SetPosition(torus, sphere, D3DVAL(6), D3DVAL(0), D3DVAL(0)))) <br>goto generic_error; <br>    if (FAILED(cube1-&gt;lpVtbl-&gt;SetPosition(cube1, torus, D3DVAL(0), D3DVAL(4), D3DVAL(0)))) <br>goto generic_error; <br>    if (FAILED(cube2-&gt;lpVtbl-&gt;SetPosition(cube2, torus, D3DVAL(0), -D3DVAL(4), D3DVAL(0)))) <br>goto generic_error; <br> <br>    if (FAILED(sphere-&gt;lpVtbl-&gt;SetRotation(sphere, scene, D3DVAL(0), D3DVAL(0), D3DVAL(1),D3DVAL(0.01)))) <br>goto generic_error; <br>    if (FAILED(torus-&gt;lpVtbl-&gt;SetRotation(torus, sphere, D3DVAL(1), D3DVAL(0), D3DVAL(0), D3DVAL(0.02)))) <br>goto generic_error; <br>    if (FAILED(cube1-&gt;lpVtbl-&gt;SetRotation(cube1, torus, D3DVAL(0.1), D3DVAL(0.2), <br>                               D3DVAL(0.7), D3DVAL(0.03)))) <br>       goto generic_error; <br>    if (FAILED(cube2-&gt;lpVtbl-&gt;SetRotation(cube2, torus, D3DVAL(0.7), D3DVAL(0.1), <br>                               D3DVAL(0.2), D3DVAL(0.03)))) <br>       goto generic_error; <br> <br>    RELEASE(lights); <br>    RELEASE(torus_mesh); <br>    RELEASE(sphere_mesh); <br>    RELEASE(cube1_mesh); <br>    RELEASE(cube2_mesh); <br>    RELEASE(torus); <br>    RELEASE(sphere); <br>    RELEASE(cube1); <br>    RELEASE(cube2); <br>    RELEASE(l1); <br>    RELEASE(l2); <br>    return TRUE; <br>generic_error: <br>    Msg("A failure occurred while building the scene.\n"); <br>ret_with_error: <br>    RELEASE(l1); <br>    RELEASE(l2); <br>    RELEASE(lights); <br>    RELEASE(torus_builder); <br>    RELEASE(sphere_builder); <br>    RELEASE(cube1_builder); <br>    RELEASE(cube2_builder); <br>    RELEASE(cube1_mesh); <br>    RELEASE(cube2_mesh); <br>    RELEASE(torus_mesh); <br>    RELEASE(sphere_mesh); <br>    RELEASE(torus); <br>    RELEASE(sphere); <br>    RELEASE(cube1); <br>    RELEASE(cube2); <br>    return FALSE; <br>} <br> <br>void <br>OverrideDefaults(Defaults* defaults) <br>{ <br>    defaults-&gt;bNoTextures = TRUE; <br>    defaults-&gt;bConstRenderQuality = TRUE; <br>    lstrcpy(defaults-&gt;Name, "Frame Hierarchy II D3D RM Example"); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

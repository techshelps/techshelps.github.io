<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COMM.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3129"></a>COMM.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       comm.c <br> *  Content:    DirectPlay related code <br> * <br> * <br> ***************************************************************************/ <br>#include "comm.h" <br>#include "lobby.h" <br> <br>/* <br> * Externals <br> */ <br>extern LPGUIDglpGuid;// duel's guid <br>extern LPDPLCONNECTIONglpdplConnection;// connection settings <br> <br>/* <br> * Globals <br> */ <br>LPDPSESSIONDESC2glpdpSD;// current session description <br>LPDIRECTPLAY2glpDP= NULL;// directplay object pointer <br>LPDIRECTPLAY3AglpDP3A= NULL; <br> <br>/* <br> * DPlayClose <br> * <br> * Wrapper for DirectPlay Close API <br> */ <br>HRESULT DPlayClose(void) <br>{ <br>HRESULT hr=E_FAIL; <br> <br>if (glpDP)  <br>hr = IDirectPlay2_Close(glpDP); <br> <br>return hr; <br>} <br> <br>/* <br> * DPlayCreate <br> * <br> * Wrapper for DirectPlay Create API. Retrieves a DirectPlay2/DirectPlay2A interface <br> * based on the UNICODE flag <br> *  <br> */ <br>HRESULT DPlayCreate(LPVOID lpCon) <br>{ <br>HRESULThr= E_FAIL; <br>LPDIRECTPLAY3lpDP3= NULL; <br> <br>hr = CoCreateInstance(&amp;CLSID_DirectPlay, NULL, CLSCTX_INPROC_SERVER, <br>&amp;IID_IDirectPlay3A, (LPVOID *) &amp;glpDP3A ); <br> <br>if ( DP_OK == hr ) <br>{ <br>if (lpCon) <br>{ <br>hr = IDirectPlay3_InitializeConnection( glpDP3A, lpCon, 0); <br>} <br> <br>// query for a DirectPlay2(A) interface <br>#ifdef UNICODE <br>hr = IDirectPlay_QueryInterface(glpDP3A,&amp;IID_IDirectPlay2,(LPVOID *)&amp;glpDP); <br>#else <br>hr = IDirectPlay_QueryInterface(glpDP3A,&amp;IID_IDirectPlay2A,(LPVOID *)&amp;glpDP); <br>#endif <br> <br>} <br> <br>return hr; <br>} <br> <br>/* <br> * DPlayCreatePlayer <br> * <br> * Wrapper for DirectPlay CreatePlayer API.  <br> */ <br> <br>HRESULT DPlayCreatePlayer(LPDPID lppidID, LPTSTR lptszPlayerName, HANDLE hEvent,  <br>  LPVOID lpData, DWORD dwDataSize) <br>{ <br>HRESULT hr=E_FAIL; <br>DPNAME name; <br> <br>ZeroMemory(&amp;name,sizeof(name)); <br>name.dwSize = sizeof(DPNAME); <br> <br>#ifdef UNICODE <br>name.lpszShortName = lptszPlayerName; <br>#else <br>name.lpszShortNameA = lptszPlayerName; <br>#endif <br> <br>if (glpDP) <br>hr = IDirectPlay2_CreatePlayer(glpDP, lppidID, &amp;name, hEvent, lpData,  <br>  dwDataSize, 0); <br> <br>return hr; <br>} <br> <br>/* <br> * DPlayCreateSession <br> * <br> * Wrapper for DirectPlay CreateSession API.Uses the global application guid (glpGuid). <br> */ <br>HRESULT DPlayCreateSession(LPTSTR lptszSessionName) <br>{ <br>HRESULT hr = E_FAIL; <br>DPSESSIONDESC2 dpDesc; <br> <br>    ZeroMemory(&amp;dpDesc, sizeof(dpDesc)); <br>    dpDesc.dwSize = sizeof(dpDesc); <br>dpDesc.dwFlags = DPSESSION_MIGRATEHOST | DPSESSION_KEEPALIVE; <br> <br>#ifdef UNICODE <br>dpDesc.lpszSessionName = lptszSessionName; <br>#else <br>dpDesc.lpszSessionNameA = lptszSessionName; <br>#endif <br> <br>// set the application guid <br>if (glpGuid) <br>dpDesc.guidApplication = *glpGuid; <br> <br>if (glpDP) <br>hr = IDirectPlay2_Open(glpDP, &amp;dpDesc, DPOPEN_CREATE); <br> <br>return hr; <br>} <br> <br>/* <br> * DPlayDestroyPlayer <br> *  <br> * Wrapper for DirectPlay DestroyPlayer API.  <br> */ <br>HRESULT DPlayDestroyPlayer(DPID pid) <br>{ <br>HRESULT hr=E_FAIL; <br> <br>    if (glpDP) <br>hr = IDirectPlay2_DestroyPlayer(glpDP, pid); <br> <br>return hr; <br>} <br> <br>/* <br> * DPlayEnumPlayers <br> * <br> * Wrapper for DirectPlay API EnumPlayers <br> */ <br>HRESULT DPlayEnumPlayers(LPGUID lpSessionGuid, LPDPENUMPLAYERSCALLBACK2 lpEnumCallback,  <br> LPVOID lpContext, DWORD dwFlags) <br>{ <br>HRESULT hr=E_FAIL; <br> <br>if (glpDP) <br>hr = IDirectPlay2_EnumPlayers(glpDP, lpSessionGuid, lpEnumCallback, lpContext, dwFlags); <br> <br>return hr; <br>} <br> <br>/* <br> * DPlayEnumSessions <br> * <br> * Wrapper for DirectPlay EnumSessions API. <br> */ <br>HRESULT DPlayEnumSessions(DWORD dwTimeout, LPDPENUMSESSIONSCALLBACK2 lpEnumCallback,  <br>  LPVOID lpContext, DWORD dwFlags) <br>{ <br>HRESULT hr = E_FAIL; <br>    DPSESSIONDESC2 dpDesc; <br> <br>ZeroMemory(&amp;dpDesc, sizeof(dpDesc)); <br>dpDesc.dwSize = sizeof(dpDesc); <br>if (glpGuid) <br>dpDesc.guidApplication = *glpGuid; <br> <br>if (glpDP) <br>hr = IDirectPlay2_EnumSessions(glpDP, &amp;dpDesc, dwTimeout, lpEnumCallback, <br>lpContext, dwFlags); <br> <br> <br>return hr; <br>} <br> <br>/* <br> * DPlayGetPlayerData <br> *  <br> * Wrapper for DirectPlay GetPlayerData API. <br> */ <br>HRESULT DPlayGetPlayerData(DPID pid, LPVOID lpData, LPDWORD lpdwDataSize, DWORD dwFlags) <br>{ <br>HRESULT hr=E_FAIL; <br> <br>if (glpDP)  <br>hr = IDirectPlay2_GetPlayerData(glpDP, pid, lpData, lpdwDataSize, dwFlags); <br> <br>return hr; <br>} <br> <br>/* <br> * DPlayGetSessionDesc <br> * <br> * Wrapper for DirectPlay GetSessionDesc API.  <br> */ <br>HRESULT DPlayGetSessionDesc(void) <br>{ <br>HRESULT hr=E_FAIL; <br>DWORD dwSize; <br> <br>// free old session desc, if any <br>if (glpdpSD) <br>{ <br>free(glpdpSD); <br>glpdpSD = NULL; <br>} <br> <br>if (glpDP) <br>{ <br>// first get the size for the session desc <br>if ((hr = IDirectPlay2_GetSessionDesc(glpDP, NULL, &amp;dwSize)) == DPERR_BUFFERTOOSMALL) <br>{ <br>// allocate memory for it <br>glpdpSD = (LPDPSESSIONDESC2) malloc(dwSize); <br>if (glpdpSD) <br>{ <br>// now get the session desc <br>hr = IDirectPlay2_GetSessionDesc(glpDP, glpdpSD, &amp;dwSize); <br>} <br>else <br>{ <br>hr = E_OUTOFMEMORY; <br>} <br>} <br>} <br> <br>return hr; <br>} <br> <br>/* <br> * IsDPlay <br> * <br> * Returns TRUE if a DirectPlay interface exists, otherwise FALSE. <br> */ <br>BOOL IsDPlay(void) <br>{ <br>return (glpDP ? TRUE:FALSE); <br>} <br> <br>/* <br> * DPlayOpenSession <br> * <br> * Wrapper for DirectPlay OpenSession API.  <br> */ <br>HRESULT DPlayOpenSession(LPGUID lpSessionGuid) <br>{ <br>HRESULT hr = E_FAIL; <br>DPSESSIONDESC2 dpDesc; <br> <br>    ZeroMemory(&amp;dpDesc, sizeof(dpDesc)); <br>    dpDesc.dwSize = sizeof(dpDesc); <br> <br>// set the session guid <br>if (lpSessionGuid) <br>dpDesc.guidInstance = *lpSessionGuid; <br>// set the application guid <br>if (glpGuid) <br>dpDesc.guidApplication = *glpGuid; <br> <br>// open it <br>if (glpDP) <br>hr = IDirectPlay2_Open(glpDP, &amp;dpDesc, DPOPEN_JOIN); <br> <br>return hr; <br>} <br> <br> <br>/* <br> * DPlayReceive <br> * <br> * Wrapper for DirectPlay Receive API <br> */ <br>HRESULT DPlayReceive(LPDPID lpidFrom, LPDPID lpidTo, DWORD dwFlags, LPVOID lpData, LPDWORD lpdwDataSize) <br>{ <br>HRESULT hr = E_FAIL; <br> <br>if (glpDP) <br>hr = IDirectPlay2_Receive(glpDP, lpidFrom, lpidTo, dwFlags, lpData, lpdwDataSize); <br> <br>return hr; <br>} <br> <br>/* <br> * DPlayRelease <br> * <br> * Wrapper for DirectPlay Release API. <br> */ <br>HRESULT DPlayRelease(void) <br>{ <br>HRESULT hr = E_FAIL; <br> <br>if (glpDP) <br>{ <br>// free session desc, if any <br>if (glpdpSD)  <br>{ <br>free(glpdpSD); <br>glpdpSD = NULL; <br>} <br> <br>// free connection settings structure, if any (lobby stuff) <br>if (glpdplConnection) <br>{ <br>free(glpdplConnection); <br>glpdplConnection = NULL; <br>} <br>// release dplay <br>hr = IDirectPlay2_Release(glpDP); <br>glpDP = NULL; <br>} <br> <br>if (glpDP3A) <br>{ <br>hr = IDirectPlay3_Release(glpDP3A); <br>glpDP3A = NULL; <br>} <br> <br>return hr; <br>} <br> <br>/* <br> * DPlaySend <br> *  <br> * Wrapper for DirectPlay Send API. <br> */ <br>HRESULT DPlaySend(DPID idFrom, DPID idTo, DWORD dwFlags, LPVOID lpData, DWORD dwDataSize) <br>{ <br>HRESULT hr = E_FAIL; <br> <br>if (glpDP) <br>hr = IDirectPlay2_Send(glpDP, idFrom, idTo, dwFlags, lpData, dwDataSize); <br> <br>return hr; <br>} <br> <br>/* <br> * DPlaySetPlayerData <br> * <br> * Wrapper for DirectPlay SetPlayerData API <br> */ <br>HRESULT DPlaySetPlayerData(DPID pid, LPVOID lpData, DWORD dwSize, DWORD dwFlags) <br>{ <br>HRESULT hr=E_FAIL; <br> <br>if (glpDP) <br>hr = IDirectPlay2_SetPlayerData(glpDP, pid, lpData, dwSize, dwFlags); <br> <br>return hr; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

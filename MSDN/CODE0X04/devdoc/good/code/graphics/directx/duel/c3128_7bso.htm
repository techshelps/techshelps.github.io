<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GAMEPROC.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3138"></a>GAMEPROC.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:gameproc.h <br> *  Content:game processing info. include file <br> * <br> * <br> ***************************************************************************/ <br>#define IDIRECTPLAY2_OR_GREATER <br>#include &lt;ddraw.h&gt; <br>#include &lt;dplay.h&gt; <br>#include &lt;dsound.h&gt; <br>#include "sfx.h" <br>#include "duel.h" <br> <br>// align on single byte boundaries <br>// this is a stop-gap measure until the structures can be re-arranged. <br>#pragma pack(1) <br> <br>#define     MAX_SHIP_X     (MAX_SCREEN_X - 32) <br>#define     MAX_SHIP_Y     (MAX_SCREEN_Y - 32) <br>#define     MAX_SHIP_FRAME 40 <br>#define     MAX_BULLET_X    (MAX_SCREEN_X - 3) <br>#define     MAX_BULLET_Y    (MAX_SCREEN_Y - 3) <br>#define     MAX_BULLET_FRAME 400 <br> <br>#defineNUM_SHIP_TYPES 4 <br> <br>#defineDEF_SHOW_DELAY     (2000) <br>#defineMAX_BUFFER_SIZE   256 <br> <br>#define     UPDATE_INTERVAL     40      // interval between position updates in milliseconds (25 FPS) <br>#define     SYNC_INTERVAL       1000    // synchronize once every second <br>#define     HIDE_TIMEOUT        5000    // time for which a ship is disabled after a hit <br> <br>/* <br> * keyboard commands <br> */ <br> <br>#define KEY_STOP        0x00000001l <br>#define KEY_DOWN        0x00000002l <br>#define KEY_LEFT        0x00000004l <br>#define KEY_RIGHT       0x00000008l <br>#define KEY_UP          0x00000010l <br>#define KEY_FIRE        0x00000020l <br>#define KEY_ENGINEOFF   0x00000040l <br> <br>/* <br> * Offsets for the bullet bitmap <br> */ <br> <br>#define     BULLET_X    304 <br>#define     BULLET_Y    0 <br> <br>typedef struct _frag <br>{ <br>    doubledPosX; <br>    doubledPosY; <br>    LPDIRECTDRAWSURFACE surf; <br>    RECT        src; <br>    double      dVelX; <br>    double      dVelY; <br>    BOOL        valid; <br>} FRAG, *LPFRAG; <br> <br>/* <br> * structures <br> */ <br> <br>typedef struct _SHIP <br>{ <br>    doubledPosX, dPosY;// ship x and y position <br>    doubledBulletPosX, dBulletPosY;// bullet x and y position <br>    DWORDdwBulletFrame;// bullet frame <br>    char cFrame;// current ship frame <br>BYTEbyType;// ship type  <br>    BOOL                bEnable;// is this ship active? <br>    BOOL                bBulletEnable;// Is there an active bullet? <br> <br>    doubledVelX, dVelY;// ship x and y velocity (pixels/millisecond) <br>    doubledBulletVelX, dBulletVelY;// bullet x and y velocity (pixels/millisecond) <br>    DWORDdwScore;// current score <br>    DWORD               dwLastTick;// most recent time stamp <br>    BOOL                bIgnore;                // flag used to synchronize ship explosions <br>intiCountDown;                 // enable time-out             <br>    DWORD               dwFrameCount;               // number of frames since beginning of time <br>    /* DSOUND members */ <br>    LPDIRECTSOUNDBUFFER   lpDirectSoundBuffer  [MAX_SOUNDS]; // SoundBuffer interface <br>    LPDIRECTSOUND3DBUFFER lpDirectSound3DBuffer[MAX_SOUNDS]; // 3D interface (to same buffer)   <br>    DWORD                 dwKeys;                            // the keyboard state <br>    BOOL                  bEngineRunning;                    // These BOOLs keep track of the ship's <br>    BOOL                  bMoving;                           //   last condition so we can play sounds <br>    BOOL                  bBounced;                          //   when they change <br>    BOOL                  bBlockHit; <br>    BOOL                  bDeath; <br>    BOOL                  bFiring; <br>    /* DSOUND members */ <br> <br>} SHIP, *LPSHIP; <br> <br>typedef struct _BLOCKS <br>{ <br>    BYTE        bits[30][5]; <br>} BLOCKS, *LPBLOCKS; <br> <br>//---------------------------------------------------------- <br>// communication packet structures <br>//---------------------------------------------------------- <br>#define MSG_HOST        0x11    // message containing field layout, sent by host <br>#define MSG_BLOCKHIT    0x22    // block hit message <br>#define MSG_SHIPHIT     0x33    // ship hit message <br>#define MSG_ADDBLOCK0x44    // add block message <br>#define MSG_CONTROL     0x55    // game keys message <br>#define MSG_SYNC        0x66    // synchronization message containing the rendezvous location <br> <br>typedef struct _GENERICMSG <br>{ <br>    BYTE        byType; <br>} GENERICMSG, *LPGENERICMSG; <br> <br>typedef struct _HOSTMSG <br>{ <br>    BYTE        byType; <br>    BLOCKS      Blocks; <br>} HOSTMSG, *LPHOSTMSG; <br> <br>typedef struct _BLOCKHITMSG <br>{ <br>    BYTE        byType; <br>    BYTE        byRow; <br>    BYTE        byCol; <br>    BYTE        byMask; <br>} BLOCKHITMSG, *LPBLOCKHITMSG; <br> <br>typedef struct _SHIPHITMSG <br>{ <br>    BYTE        byType; <br>    DPID        Id; <br>} SHIPHITMSG, *LPSHIPHITMSG; <br> <br>typedef struct _ADDBLOCKMSG <br>{ <br>    BYTE        byType; <br>    BYTE        byX; <br>    BYTE        byY; <br>} ADDBLOCKMSG, *LPADDBLOCKMSG; <br> <br>typedef struct _CONTROLMSG <br>{ <br>    BYTE        byType; <br>    BYTE        byState; <br>} CONTROLMSG, *LPCONTROLMSG; <br> <br>typedef struct _SYNCMSG <br>{ <br>    BYTE        byType; <br>    BYTE        byShipType;     // this is needed only when sends are unreliable <br>    char        cFrame; <br>    double      dPosX; <br>    double      dPosY; <br>} SYNCMSG, *LPSYNCMSG; <br> <br>/* <br> * Prototypes <br> */ <br>voidLaunchGame(void); <br>voidExitGame(void); <br>HRESULT InitOurShip(void); <br> <br>HRESULT InitLocalSoundData(void); <br>void InitPlayerLocalSoundData(LPSHIP lpShip, BOOL bOurShip); <br>BOOL WINAPI SetPlayerLocalSoundDataCB(DPID dpId, DWORD dwPlayerType, LPCDPNAME lpName,  <br>                     DWORD dwFlags, LPVOID lpContext); <br> <br>void ReleaseLocalData(void); <br>void ReleasePlayerLocalSoundData(LPSHIP lpShip); <br>BOOL WINAPI ReleasePlayerLocalDataCB(DPID dpId, DWORD dwPlayerType, LPCDPNAME lpName, <br>                 DWORD dwFlags, LPVOID lpContext); <br> <br>void    UpdateState(LPSHIP lpShip, DWORD dwControls); <br>void    SendSync(LPSHIP lpShip); <br>void    UpdateDisplayStatus(LPSHIP lpShip); <br>void    UpdatePosition( DPID dpId, LPSHIP ship ); <br>BOOL    IsHit( int x, int y ); <br>void    InitField(void); <br>BOOL    setBlock( int x, int y ); <br>void    AddFrag(LPSHIP lpShip, int offX, int offY); <br>void    UpdateFragment(int i); <br>void    DestroyShip( LPSHIP lpShip); <br>voidDestroyGame( void ); <br>BOOLUpdateFrame( void ); <br> <br>void    ProcessSoundFlags(LPSHIP lpShip); <br>BOOL WINAPI RenderPlayerCB(DPID dpId, DWORD dwPlayerType, LPCDPNAME lpName,  <br>                     DWORD dwFlags, LPVOID lpContext); <br>BOOLDrawScreen( void ); <br>BOOL    DrawScore( void ); <br>void    DrawShip( LPSHIP lpShip ); <br>void    DrawBlock( int x, int y ); <br>void    DrawBullet( LPSHIP lpShip ); <br>void    DrawFragments( void ); <br>void    DisplayFrameRate( void ); <br> <br>voidGetConnection(void); <br>HRESULT ReceiveMessages( void ); <br>voidDoSystemMessage( LPDPMSG_GENERIC lpMsg, DWORD dwMsgSize, DPID idFrom, DPID idTo ); <br>void    DoApplicationMessage( LPGENERICMSG lpMsg, DWORD dwMsgSize, DPID idFrom, DPID idTo ); <br>void    SendGameMessage( LPGENERICMSG lpMsg, DPID idTo ); <br>voidCleanupComm(void); <br> <br> <br>// restore default alignment <br>#pragma pack() </code></pre>
<p>&nbsp;</p></body>
</HTML>

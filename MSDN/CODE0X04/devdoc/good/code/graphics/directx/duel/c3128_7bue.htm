<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SFX.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3146"></a>SFX.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       sfx.c <br> *  Content:    Routines <br> * <br> * <br> ***************************************************************************/ <br>#include "resource.h" <br>#include "duel.h" <br>#include "ds3dutil.h" <br>#include "sfx.h" <br> <br>/***************************** EXTERNALS ***************************/ <br>extern  HWND ghWndMain; <br> <br>/******************************* GLOBAL VARIABLES ***************************/ <br>LPDIRECTSOUND                           glpDirectSound; <br>LPDIRECTSOUND3DLISTENER                      glpDirectSound3DListener; <br>LPDIRECTSOUNDBUFFER                     glpPrimaryBuffer; <br>LPWAVEDATA                              gSoundEffect[MAX_SOUNDS]; <br> <br>_TCHAR *szResourceName[MAX_SOUNDS] = <br>{_T("BFIRE"),  //Bullet Firing <br> _T("SBOOM"),  //Ship Exploding <br> _T("SENGINE"),//Ship Engine <br> _T("SSTART"), //Starting Engine <br> _T("SSTOP"),  //Stopping Engine (key 5) <br> _T("SBOUNCE"),//Bouncing off a block or window edge <br> _T("LBOOM")}; //Block destruction <br> <br>BOOL gbSoundInitialized = FALSE; //did the sound engine initialize or not? <br> <br>/***************************** FUNCTION PROTOTYPES **************************/ <br>BOOL Init_Sounds(void); <br>void Free_Sounds(void); <br>BOOL Init_Globals(void); <br>void Free_Globals(void); <br> <br>/**************************************************************************** <br>FUNCTION:   InitSfx <br> <br> <br>PURPOSE:    Initializes global variables, then loads the gSoundEffect "objects" <br>            with sound data.  This should always return TRUE.  If for some reason <br>            sound can't be initialized, then it will note that fact and still <br>            return TRUE. <br>*****************************************************************************/ <br>BOOL InitSfx(void) <br>{ <br>if (Init_Globals()) <br>    { <br>    if (Init_Sounds()) <br>        { <br>        gbSoundInitialized=TRUE; <br>        return TRUE; <br>        } <br>    Free_Globals(); <br>    } <br>gbSoundInitialized = FALSE; <br>return TRUE; <br>}; <br> <br> <br> <br>/**************************************************************************** <br>FUNCTION:   CleanupSfx <br> <br>PURPOSE:    Frees everything that was allocated by InitSfx, if it was  <br>            successfully initialized in the beginning. <br>*****************************************************************************/ <br>void CleanupSfx(void) <br>{ <br>if (gbSoundInitialized) <br>    { <br>    Free_Sounds(); <br>    Free_Globals(); <br>    } <br>}; <br> <br>/**************************************************************************** <br>FUNCTION:   Init_Globals <br> <br>PURPOSE:    Initializes the three main global variables. After this is done, <br>            we should have allocated: <br>            a. A DirectSound Object <br>            b. A DirectSound3DListener Object <br>            c. A Primary Buffer (16 bit, stereo, 22050khz) <br> <br>            These are all global. <br>*****************************************************************************/ <br>BOOL Init_Globals(void) <br>{ <br>PCMWAVEFORMAT pcmwf; <br>DSBUFFERDESC dsbdesc; <br> <br>if (DS_OK == DirectSoundCreate(NULL, &amp;glpDirectSound, NULL)) <br>    { <br>    memset(&amp;pcmwf, 0, sizeof(PCMWAVEFORMAT)); <br>    pcmwf.wf.wFormatTag = WAVE_FORMAT_PCM; <br>    pcmwf.wf.nChannels = 2; <br>    pcmwf.wf.nSamplesPerSec = 22050; <br>    pcmwf.wf.nBlockAlign = 4; <br>    pcmwf.wf.nAvgBytesPerSec = pcmwf.wf.nSamplesPerSec * pcmwf.wf.nBlockAlign; <br>    pcmwf.wBitsPerSample = 16; <br>    memset(&amp;dsbdesc, 0, sizeof(DSBUFFERDESC)); <br>    dsbdesc.dwSize = sizeof(DSBUFFERDESC); <br>    dsbdesc.dwFlags = DSBCAPS_PRIMARYBUFFER | DSBCAPS_CTRL3D; <br>    dsbdesc.dwBufferBytes = 0; //dwBufferBytes and lpwfxFormat must be set this way. <br>    dsbdesc.lpwfxFormat = NULL; <br> <br>    if (DS_OK== IDirectSound_SetCooperativeLevel(glpDirectSound, ghWndMain,DSSCL_NORMAL))     <br>        { <br>        if (DS_OK== IDirectSound_CreateSoundBuffer(glpDirectSound, &amp;dsbdesc, &amp;glpPrimaryBuffer, NULL)) <br>            { <br>            if (DS_OK==glpPrimaryBuffer-&gt;lpVtbl-&gt;QueryInterface(glpPrimaryBuffer, &amp;IID_IDirectSound3DListener, (void **)&amp;glpDirectSound3DListener)) <br>                { <br>                if (DS_OK==IDirectSound3DListener_SetPosition(glpDirectSound3DListener, 0.f, 0.f, -1.f, DS3D_DEFERRED)) <br>                    { <br>                    if (DS_OK==IDirectSound3DListener_SetDopplerFactor(glpDirectSound3DListener, 9.9f ,DS3D_DEFERRED)) <br>                        { <br>                        if (DS_OK==IDirectSound3DListener_SetRolloffFactor(glpDirectSound3DListener, 0.25f ,DS3D_DEFERRED)) <br>                            { <br>                            if (DS_OK==IDirectSound3DListener_CommitDeferredSettings(glpDirectSound3DListener)) <br>                                { <br>                                return TRUE; <br>                                } <br>                            } <br>                        } <br>                    } <br>                IDirectSound3DListener_Release(glpDirectSound3DListener); <br>                } <br>            glpPrimaryBuffer-&gt;lpVtbl-&gt;Release(glpPrimaryBuffer); <br>            }         <br>        } <br>    IDirectSound_Release(glpDirectSound); <br>    } <br>return (FALSE); <br>}; <br> <br> <br>/***************************************************************************** <br>FUNCTION:   Free_Globals <br> <br>PURPOSE:    Frees up all three of the global interfaces that were created by <br>            Init_Globabls. <br> <br>    NOTES:      Free_Sounds MUST be called before this. <br>*****************************************************************************/ <br>void Free_Globals(void) <br>{ <br>if (glpPrimaryBuffer!=NULL) <br>    glpPrimaryBuffer-&gt;lpVtbl-&gt;Release(glpPrimaryBuffer); <br>if (glpDirectSound3DListener!=NULL) <br>    IDirectSound3DListener_Release(glpDirectSound3DListener); <br>if (glpDirectSound!=NULL) <br>    IDirectSound_Release(glpDirectSound); <br>}; <br> <br> <br>/**************************************************************************** <br>FUNCTION:   Init_Sounds <br> <br>PURPOSE:    Loads the gSoundEffect array (of sound objects) with the correct <br>            data from the WAVE resources, so that only a GetBuffers call needs <br>            to be made to get access to the sound effects. <br> <br>NOTES:      If this fails, all sound objects will end up uninitialized. <br>            Init_Globals MUST be called before this function. <br>*****************************************************************************/ <br>BOOL Init_Sounds(void) <br>{ <br>int i; <br> <br>for (i=0; i&lt;MAX_SOUNDS; i++) <br>    { <br>    if (FALSE==WaveInit(&amp;gSoundEffect[i], glpDirectSound, szResourceName[i]))     <br>        { <br>        gSoundEffect[i] = NULL; <br>        for (--i; i&gt;=0; i--) <br>            { <br>            WaveFree(gSoundEffect[i]); <br>            gSoundEffect[i] = NULL; <br>            } <br>        ShowError(IDS_DSOUND_LOADWAVES); <br>        return FALSE; <br>        } <br>    } <br>return TRUE; <br>}; <br> <br>/***************************************************************************** <br>FUNCTION:   Free_Sounds <br> <br>PURPOSE:    Frees up any sound objects that were loaded into memory. <br>*****************************************************************************/ <br>void Free_Sounds(void) <br>{int i; <br> <br>for (i=0; i&lt;MAX_SOUNDS; i++) <br>    { <br>    if (gSoundEffect[i]!=NULL) <br>        { <br>        WaveFree(gSoundEffect[i]); <br>        gSoundEffect[i] = NULL; <br>        } <br>    } <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

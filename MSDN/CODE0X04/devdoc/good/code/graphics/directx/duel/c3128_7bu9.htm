<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INPUT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3141"></a>INPUT.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       input.c <br> *  Content:    DirectInput functionality for Multi-player duel <br> * <br> * <br> ***************************************************************************/ <br> <br> <br>#include "input.h" <br>#include "gameproc.h" <br> <br>extern HINSTANCEghinst;// program instance <br>extern HWND                     ghWndMain;              // app window handle <br> <br>static LPDIRECTINPUTlpdi;// DirectInput interface <br>static LPDIRECTINPUTDEVICE      lpdiKeyboard;           // keyboard device interface <br>static BOOLfKeybdAcquired;// has the keyboard been acquired? <br> <br>extern DWORDgdwKeys;// gameplay keys <br> <br>/* <br>* <br>* InitInput <br>* <br>* Initialize DirectInput objects &amp; devices <br>* <br>*/ <br>BOOL InitInput(void) <br>{ <br>GUIDguid = GUID_SysKeyboard; <br>   HRESULT  hRes; <br> <br>// try to create di object (DIRECTINPUT_VERSION == DX5) <br>if(DirectInputCreate(ghinst, DIRECTINPUT_VERSION, &amp;lpdi, NULL) != DI_OK) <br>{ <br>      // creation failed, try DX3 compatibility <br>      if(DirectInputCreate(ghinst, 0x0300, &amp;lpdi, NULL) != DI_OK) <br>      { <br>         ShowError(IDS_DINPUT_ERROR_DIC); <br>         return FALSE; <br>      } <br>} <br> <br> <br>// try to create keyboard device <br>        if(lpdi-&gt;lpVtbl-&gt;CreateDevice(lpdi, &amp;guid, &amp;lpdiKeyboard, NULL) !=DI_OK) <br>{ <br>ShowError(IDS_DINPUT_ERROR_CD); <br>return FALSE; <br>} <br> <br>        // Tell DirectInput that we want to receive data in keyboard format <br>        if (lpdiKeyboard-&gt;lpVtbl-&gt;SetDataFormat(lpdiKeyboard, &amp;c_dfDIKeyboard) != DI_OK) <br>        { <br>                ShowError(IDS_DINPUT_ERROR_DF); <br>                return FALSE; <br>        } <br> <br>        // set cooperative level <br>        if(lpdiKeyboard-&gt;lpVtbl-&gt;SetCooperativeLevel(lpdiKeyboard, ghWndMain, <br>                         DISCL_NONEXCLUSIVE | DISCL_FOREGROUND) != DI_OK) <br>{ <br>ShowError(IDS_DINPUT_ERROR_SP); <br>return FALSE; <br>        } <br> <br>// try to acquire the keyboard <br>   hRes = lpdiKeyboard-&gt;lpVtbl-&gt;Acquire(lpdiKeyboard); <br>   if(SUCCEEDED(hRes)) <br>   { <br>      // keyboard was acquired <br>      fKeybdAcquired = TRUE; <br>} <br>   else <br>   { <br>      // keyboard was NOT acquired <br>      fKeybdAcquired = FALSE; <br>   } <br> <br>// if we get here, all objects were created successfully <br>return TRUE; <br> <br>} <br> <br> <br>/* <br>* <br>* DI_ReadKeys <br>* <br>* Use DirectInput to read game-play keys <br>* <br>*/ <br>void DI_ReadKeys(void) <br>{ <br>BYTE rgbKeybd[256]; <br>   HRESULT hRes; <br> <br>   hRes = lpdiKeyboard-&gt;lpVtbl-&gt;GetDeviceState(lpdiKeyboard, sizeof(rgbKeybd), rgbKeybd); <br>   if(hRes != DI_OK) <br>{ <br>      if(hRes == DIERR_INPUTLOST) <br>      { <br>         // we lost control of the keyboard, reacquire <br>         fKeybdAcquired = FALSE; <br>         if(SUCCEEDED(lpdiKeyboard-&gt;lpVtbl-&gt;Acquire(lpdiKeyboard))) <br>         { <br>            fKeybdAcquired = TRUE; <br>         } <br>      } <br> <br>      // failed to read the keyboard, just return <br>return; <br>} <br> <br>// reset key states <br>gdwKeys = gdwKeys ^ gdwKeys; <br> <br>// check &amp; update key states <br>if(rgbKeybd[DIK_NUMPAD5] &amp; 0x80) <br>gdwKeys |= KEY_STOP; <br> <br>if((rgbKeybd[DIK_NUMPAD2] &amp; 0x80) || (rgbKeybd[DIK_DOWN] &amp; 0x80)) <br>gdwKeys |= KEY_DOWN; <br> <br>if((rgbKeybd[DIK_NUMPAD4] &amp; 0x80) || (rgbKeybd[DIK_LEFT] &amp; 0x80)) <br>gdwKeys |= KEY_LEFT; <br> <br>if((rgbKeybd[DIK_NUMPAD6] &amp; 0x80) || (rgbKeybd[DIK_RIGHT] &amp; 0x80)) <br>gdwKeys |= KEY_RIGHT; <br> <br>if((rgbKeybd[DIK_NUMPAD8] &amp; 0x80) || (rgbKeybd[DIK_UP] &amp; 0x80)) <br>gdwKeys |= KEY_UP; <br> <br>if(rgbKeybd[DIK_SPACE] &amp; 0x80) <br>gdwKeys |= KEY_FIRE; <br> <br>} <br> <br>/* <br>* <br>* CleanupInput <br>* <br>* Cleans up DirectInput objects <br>* <br>*/ <br>void CleanupInput(void) <br>{ <br>if(fKeybdAcquired) <br>{ <br>lpdiKeyboard-&gt;lpVtbl-&gt;Unacquire(lpdiKeyboard); <br>fKeybdAcquired = FALSE; <br>} <br> <br>if(lpdiKeyboard != NULL) <br>lpdiKeyboard-&gt;lpVtbl-&gt;Release(lpdiKeyboard); <br> <br>if(lpdi!= NULL) <br>lpdi-&gt;lpVtbl-&gt;Release(lpdi); <br> <br>} <br> <br> <br>/* <br>* <br>* ReacquireInputDevices <br>* <br>* Reacquires DirectInput devices as needed <br>* <br>*/ <br>BOOL ReacquireInputDevices(void) <br>{ <br>// try to acquire the keyboard <br>        if(lpdiKeyboard != NULL) <br>        { <br>                lpdiKeyboard-&gt;lpVtbl-&gt;Acquire(lpdiKeyboard); <br>     } <br>        else <br>        { <br>                // keyboard device has not been created. <br>                fKeybdAcquired = FALSE; <br>                return FALSE; <br>        } <br> <br>        // if we get here, we are acquired again <br>        fKeybdAcquired = TRUE; <br>        return TRUE; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

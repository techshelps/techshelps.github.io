<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D3DAPP.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3338"></a>D3DAPP.H</h2>
<pre><code>/* <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: d3dapp.h <br> * <br> *  Header to be included in source using D3DApp.  Contains D3DApp function <br> *  prototypes and defines. <br> * <br> *  D3DApp is a collection of helper functions for Direct3D applications. <br> *  D3DApp consists of the following files: <br> *d3dapp.h    Main D3DApp header to be included by application <br> *      d3dappi.h   Internal header <br> *      d3dapp.c    D3DApp functions seen by application. <br> *      ddcalls.c   All calls to DirectDraw objects except textures <br> *      d3dcalls.c  All calls to Direct3D objects except textures <br> *      texture.c   Texture loading and managing texture list <br> *      misc.c    Miscellaneous calls <br> */ <br> <br>#ifndef __D3DAPP_H__ <br>#define __D3DAPP_H__ <br> <br>#define INITGUID <br> <br>#include &lt;ddraw.h&gt; <br>#include &lt;d3d.h&gt; <br> <br>#ifdef __cplusplus <br>extern "C" { <br>#endif <br> <br>/* <br> * DEFINES <br> */ <br>#define D3DAPP_WINDOWMINIMUM 50    /* smallest buffer size allowed */ <br>#define D3DAPP_DEFAULTWINDOWDIM 320 /* replaces window size if invalid */ <br>#define D3DAPP_MINBUFFERSIZE 15360  /* minimum "maximum buffer size" for a <br>       D3D driver to be accepted */ <br>#define D3DAPP_MINVERTEXCOUNT 320   /* minimum "maximum vertex count" for a <br>       D3D driver to be accepted */ <br>#define D3DAPP_MAXD3DDRIVERS 5    /* maximum Direct3D drivers ever expected <br>       to find */ <br>#define D3DAPP_MAXTEXTUREFORMATS 50 /* maximum texture formats */ <br>#define D3DAPP_MAXMODES 50    /* maximum display modes ever expected to <br>       be reported by DirectDraw */ <br>#define D3DAPP_MAXTEXTURES 15    /* maximum number of textures that wil be <br>       loaded and managed */ <br>#define D3DAPP_MAXCLEARRECTS 30    /* maximum num. rectangles (ie extents) <br>       for clearing */ <br>#define D3DAPP_BOGUS -100    /* unused parameters accept this */ <br>#define D3DAPP_YOUDECIDE -25    /* Use this for certain parameters to <br>       have D3DApp decide an appropriate <br>       value for you */ <br>#define D3DAPP_USEWINDOW -24    /* Used in place of fullscreen mode */ <br> <br>/* <br> * DATA STRUCTURES <br> */ <br> <br>/* <br> * D3DAppD3DDriver structure <br> * Describes a D3D driver <br> */ <br>typedef struct tagD3DAppD3DDriver { <br>    char Name[30];/* short name of the driver */ <br>    char About[50];/* short string about the driver */ <br>    D3DDEVICEDESC Desc; /* D3DDEVICEDESC for complete information */ <br>    GUID Guid;/* it's GUID */ <br>    BOOL bIsHardware;/* does this driver represent a hardware device? */ <br>    BOOL bDoesTextures; /* does this driver do texture mapping? */ <br>    BOOL bDoesZBuffer;  /* can this driver use a z-buffer? */ <br>    BOOL bCanDoWindow;/* can it render to Window's display depth? */ <br>} D3DAppD3DDriver; <br> <br>/* <br> * D3DAppTextureFormat stucture <br> * Describes a texture format <br> */ <br>typedef struct tagD3DAppTextureFormat { <br>    DDSURFACEDESC ddsd;/* DDSURFACEDESC for complete information */ <br>    BOOL bPalettized;/* is this format palettized */ <br>    int RedBPP;/* number of red, */ <br>    int BlueBPP;/*                blue, */ <br>    int GreenBPP;/*                      and green bits per pixel */ <br>    int IndexBPP;/* number of bits in palette index */ <br>} D3DAppTextureFormat; <br> <br>/* <br> * D3DAppMode structure <br> * Describes a display mode <br> */ <br>typedef struct tagD3DAppMode { <br>    int     w;      /* width */ <br>    int    h;      /* height */ <br>    int    bpp;      /* bits per pixel */ <br>    BOOL    bThisDriverCanDo; /*can current D3D driver render in this mode?*/ <br>} D3DAppMode; <br> <br>/* <br> * D3DAppInfo structure <br> * Contains all the information D3DApp makes available to the application. A <br> * pointer to the internal, read only copy is returned by the initializing <br> * function. <br> */ <br>typedef struct tagD3DAppInfo { <br>    HWND    hwnd;   /*handle of window being managed*/ <br>    /* <br>     * Direct3D objects and information <br>     */ <br>    LPDIRECT3D2    lpD3D;   /* D3D object */ <br>    LPDIRECT3DDEVICE2    lpD3DDevice;   /* D3D device */ <br>    LPDIRECT3DVIEWPORT2    lpD3DViewport; /* D3D viewport, created by <br>      application */ <br>    int    NumDrivers;   /* number of D3D drivers avail. */ <br>    int    CurrDriver;   /* number of curr. D3D driver */ <br>    D3DAppD3DDriver    Driver[D3DAPP_MAXD3DDRIVERS]; /* avail. drivers*/ <br>    D3DAppD3DDriver    ThisDriver;   /* description of this driver, <br>   identical to Driver[CurrDriver] */ <br> <br>    int    NumTextureFormats; /* num texture formats avail*/ <br>    int    CurrTextureFormat; /* current texture format <br>  will only change if driver changes or when app changes it*/ <br>    D3DAppTextureFormat     TextureFormat[D3DAPP_MAXTEXTUREFORMATS]; <br>      /* description of all avail. formats */ <br>    D3DAppTextureFormat     ThisTextureFormat; /* description of this format, <br>     identical to TextureFormat[CurrTextureFormat] */ <br> <br>    int    NumTextures;    /* number of textures in D3DApp's <br>       texture list */ <br>    char    ImageFile[D3DAPP_MAXTEXTURES][50]; /* files */ <br>    D3DTEXTUREHANDLE    TextureHandle[D3DAPP_MAXTEXTURES]; /* handles */ <br>    LPDIRECTDRAWSURFACE    lpTextureSurf[D3DAPP_MAXTEXTURES]; /* surfaces */ <br>    LPDIRECT3DTEXTURE2    lpTexture[D3DAPP_MAXTEXTURES]; /* texture objs */ <br>    int    NumUsableTextures; /* the number of currently usable <br>  textures (e.g. for a hardware <br>  device there may not be enough <br>          video memory*/ <br>    /* <br>     * DirectDraw objects and information <br>     */ <br>    LPDIRECTDRAW    lpDD;   /* DirectDraw object */ <br>    BOOL    bIsPrimary;    /* Is this the primary DD device? <br>       If FALSE, we're using a hardware DD device that cannot <br>       display a window and so only fullscreen modes are available */ <br>    LPDIRECTDRAWSURFACE    lpFrontBuffer; /* front buffer surface */ <br>    LPDIRECTDRAWSURFACE    lpBackBuffer;  /* back buffer surface */ <br>    LPDIRECTDRAWSURFACE    lpZBuffer;     /* z-buffer surface */ <br>    BOOL    bBackBufferInVideo; /* back buf in video mem? */ <br>    BOOL    bZBufferInVideo;/* is Z-buf in video mem? */ <br> <br>    int    NumModes; /* number of available display modes */ <br>    int    CurrMode; /* number of current display mode (only <br>         when fullscreen) */ <br>    D3DAppMode    Mode[D3DAPP_MAXMODES]; /* desc avail modes */ <br>    D3DAppMode    ThisMode; /* description of this mode, identical <br> to Mode[CurrMode] */ <br>    BOOL    bFullscreen; /* in fullscreen exclusive mode? */ <br>    D3DAppMode    WindowsDisplay; /* current Windows disply mode */ <br> <br>    SIZE    szClient;      /* dimensions of client win */ <br>    POINT    pClientOnPrimary; /* position of client win */ <br> <br>    BOOL    bPaused;       /* the app is paused */ <br>    BOOL    bAppActive;       /* the app is active */ <br>    BOOL    bTexturesDisabled; /* textures are disabled */ <br>    BOOL    bOnlySystemMemory; /* all surfaces forced into <br>  system memory */ <br>    BOOL    bOnlyEmulation;    /* no hardware DD or D3D <br>  devices allowed */ <br>    BOOL    bMinimized;       /* app window is minimized */ <br>    BOOL    bRenderingIsOK;    /* All objects etc. necessary <br>  for rendering are in ok */ <br>} D3DAppInfo; <br> <br>/* <br> * D3DAppRenderState structure <br> * The "render state" is the status of this collection of D3D options and <br> * variables.  This structure is used to get and set the render state.  The <br> * render state will only change during program initialization and when <br> * the application sets it. <br> */ <br>typedef struct tagD3DAppRenderState { <br>    BOOL             bZBufferOn;    /* Z buffer is on */ <br>    BOOL             bPerspCorrect; /* perspective correction is on */ <br>    D3DSHADEMODE     ShadeMode;     /* flat, gouraud, phong? */ <br>    D3DTEXTUREFILTER TextureFilter; /* linear or bi-linear texture filter */ <br>    D3DTEXTUREBLEND  TextureBlend;  /* Use shade mode or copy mode? */ <br>    D3DFILLMODE      FillMode;    /* solid, lines or points? */ <br>    BOOL             bDithering;    /* dithering is on */ <br>    BOOL             bSpecular;    /* specular highlights are on */ <br>    BOOL             bAntialiasing; /* anti-aliasing is on */ <br> <br>    BOOL     bFogEnabled;   /* fog is on */ <br>    D3DCOLOR     FogColor;    /* fog color */ <br>    D3DFOGMODE     FogMode;    /* linear, exp. etc. */ <br>    D3DVALUE     FogStart;    /* begining depth */ <br>    D3DVALUE     FogEnd;    /* ending depth */ <br>} D3DAppRenderState; <br> <br>/* <br> * FUNCTION PROTOTYPES <br> */ <br> <br>/* <br> * D3DAppCreateFromHWND <br> * <br> * Call this before all other D3DApp functions (except AddTexture).   <br> * Initializes all DD and D3D objects necessary for rendering, enumerates the <br> * available display modes and drivers and loads textures specified by prior <br> * AddTexture() calls.  Caller passes the handle of the window to be manged <br> * and callback functions to execute for device creation and destruction. <br> *  <br> * DeviceCreateCallback is executed AFTER the creation of D3D device and all <br> * objects D3DApp created using the device.  This allows an application to <br> * reconstruct the scene and create any additional objects.  The callback <br> * must create and return (in the variable provided) the DIRECT3DVIEWPORT <br> * from the given width and height.  The returned pointer is stored in the <br> * D3DAppInfo structure and used for clearing and setting the render state. <br> * A NULL pointer is fine if D3DApp is not used for either of these <br> * functions. The create callback will always be called before any calls to <br> * the destroy callback.  The boolean returned indicates success or failure. <br> * <br> * DeviceDestroyCallback is executed BEFORE the D3D device and objects <br> * created by D3DApp using the device are released.  This allows an <br> * application to save data regarding the scene or release any objects <br> * created from the device before it is destroyed.  The DIRECT3DVIEWPORT <br> * should be released in this callback.  The boolean returned indicates the <br> * success or failure. <br> * <br> * A pointer to the internal D3DAppInfo data structure is returned.  This <br> * should be READ ONLY! <br> * <br> * The DirectDraw device, Direct3D driver, display mode and texture format <br> * will all be chosen by D3DApp.  Hardware DD and D3D devices are prefered. <br> * Mono lighting D3D drivers are prefered.  Paletted texture formats are <br> * prefered.  If possible, the current window size will be used, otherwise <br> * a fullscreen mode will be selected. <br> * <br> * Call AddTexture() to add textures to be loaded upon initialization. <br> * <br> * Valid flags: <br> *    D3DAPP_ONLYSYSTEMMEMORY  Force all surfaces into system memory.  Also <br> *                             disables hardware DD and D3D drivers. <br> *    D3DAPP_ONLYD3DEMULATION  Disable D3D hardware <br> *    D3DAPP_ONLYDDEMULATION   Disable DD hardware <br> */ <br>#define D3DAPP_ONLYSYSTEMMEMORY 0x00000001 <br>#define D3DAPP_ONLYD3DEMULATION0x00000002 <br>#define D3DAPP_ONLYDDEMULATION0x00000004 <br>BOOL D3DAppCreateFromHWND(DWORD flags, HWND hwnd, <br>  BOOL(*DeviceCreateCallback)(int, int, <br>      LPDIRECT3DVIEWPORT2*, <br>      LPVOID), <br>  LPVOID lpCreateContext, <br>  BOOL(*DeviceDestroyCallback)(LPVOID), <br>  LPVOID lpDestroyContext, <br>  D3DAppInfo** D3DApp); <br> <br>/* <br> * D3DAppWindowProc <br> * To be truly effective, D3DApp should be allowed to trap incoming window <br> * messages such as WM_SIZE.  Call D3DAppWindowProc at the begining of the <br> * application's main window WindowProc with the message information.  If <br> * bStopProcessing is set to TRUE, stop processing the message and return <br> * lresult. <br> */ <br>BOOL D3DAppWindowProc(BOOL* bStopProcessing, LRESULT* lresult, HWND hwnd, <br>      UINT message, WPARAM wParam, LPARAM lParam); <br> <br>/* <br> * D3DAppFullscreen <br> * Places the app in a fullscreen mode using the current driver. <br> */ <br>BOOL D3DAppFullscreen(int mode); <br> <br>/* <br> * D3DAppWindow <br> * Places the application in windowed mode at the given client size.  If w <br> * and h are D3DAPP_YOUDECIDE, D3DApp will decide on a suitable client size. <br> * If called while in fullscreen, restores the display mode and returns the <br> * hooked window to the size it was before a call to D3DAppFullscreen or to <br> * the size specified. <br> */ <br>BOOL D3DAppWindow(int w, int h); <br> <br>/* <br> * D3DAppChangeDriver  <br> * Changes the driver.  If the current display mode is incompatible with the <br> * driver, a new one will be selected and employed.  A new texture format is <br> * selected and textures are reloaded, hence their handles may change.  By <br> * default, paletted formats are prefered. <br> */ <br>BOOL D3DAppChangeDriver(int driver, DWORD flags); <br> <br>/* <br> * D3DAppAddTexture <br> * D3DApp has an internal list of textures which it maintains.  The image <br> * files will be reloaded when necessary and the texture handles, objects and <br> * surfaces will always be up to date and available in the D3DAppInfo <br> * structure.  D3DAppAddTextures adds the given PPM image file to this <br> * list. <br> * <br> * This is the only function which can be called before CreateD3DAppFromHWND. <br> * Use it to create a list of textures to load during this creation function. <br> * <br> * The handles and texture objects will change when the device or texture <br> * format changes.  To react to changes in the texture objects and surfaces, <br> * use the callback for D3D device creation/release and make necessary <br> * changes whenever calling D3DAppChangeTextureFormat. <br> * <br> * Image files are searched for in the current directory, D3DPATH env var,  <br> * and the "Software\Microsoft\Direct3D\4.0\D3D Path" registry entry. <br> * <br> */ <br>BOOL D3DAppAddTexture(const char* imagefile); <br> <br>/* <br> * D3DAppChangeTextureFormat <br> * Changes all textures to the given format.  Texture handles and objects <br> * will change. <br> */ <br>BOOL D3DAppChangeTextureFormat(int format); <br> <br>/* <br> * D3DAppDisableTextures <br> * Disables the textures by turning handles to NULL.  If the driver changes, <br> * textures are not loaded until this state is toggled by another call with a <br> * TRUE flag. <br> */ <br>BOOL D3DAppDisableTextures(BOOL flag); <br> <br>/* <br> * D3DAppSwapTextures <br> * Swaps first texture with the second, second with third, etc. while keeping <br> * the handles array the same. <br> */ <br>BOOL D3DAppSwapTextures(void); <br> <br>/* <br> * D3DAppSetRenderState <br> * Uses a D3D execute buffer to set the render state.  If lpState is NULL, <br> * the current settings are reset. <br> */ <br>BOOL D3DAppSetRenderState(D3DAppRenderState* lpState); <br> <br>/* <br> * D3DAppGetRenderState <br> * Returns the current render state. <br> */ <br>BOOL D3DAppGetRenderState(D3DAppRenderState* lpState); <br> <br>/* <br> * D3DAppShowBackBuffer <br> * Blts or flips the back buffer to the primary surface.  In the windowed <br> * case, only the dirty portion of the front buffer is blt'ed over.  The <br> * dirty region of front and back buffers is maintained by calls to <br> * D3DAppRenderExtents(). D3DAPP_SHOWALL will force the entire front buffer <br> * to be updated. <br> */ <br>#define D3DAPP_SHOWALL 0x00000001 <br>BOOL D3DAppShowBackBuffer(DWORD flags); <br> <br>/* <br> * D3DAppRenderExtents <br> * Tells D3DApp the extents of all regions updated on the back buffer as a <br> * list of D3DRECTs (no more than D3DAPP_MAXCLEARRECTS).  Call this before <br> * clearing the back buffer.  If the D3DAPP_CLEARALL flag is set, the extents <br> * are ignored and the entire back buffer is assumed to have changed. <br> */ <br>#define D3DAPP_CLEARALL 0x00000001 <br>BOOL D3DAppRenderExtents(DWORD dwCount, LPD3DRECT extent, DWORD flags); <br> <br>/* <br> * D3DAppClearBackBuffer <br> * Clears the back buffer and Z-buffer (if enabled).  D3DAPP_CLEARALL can be <br> * used to clear the entire back buffer. <br> */ <br>#define D3DAPP_CLEARALL 0x00000001 <br>BOOL D3DAppClearBackBuffer(DWORD flags); <br> <br>/* <br> * D3DAppCheckForLostSurfaces <br> * Checks all surfaces D3DApp has allocated and restores them if necessary. <br> * An error is returned on any type of failure, but it may be best to ignore <br> * it since restoring surface can fail for non-fatal reasons and the app may <br> * just want to spin. <br> */ <br>BOOL D3DAppCheckForLostSurfaces(void); <br> <br>/* <br> * D3DAppPause <br> * Use D3DAppPause(TRUE) to pause the app and D3DAppPause(FALSE) to unpause. <br> * When fullscreen, the menu bar is redrawn.  bPaused is updated to reflect <br> * the current status. <br> */ <br>BOOL D3DAppPause(BOOL flag); <br> <br>/* <br> * D3DAppErrorToString <br> * Converts a DirectDraw, Direct3D or Direct3D RM error code to a string. <br> */ <br>char* D3DAppErrorToString(HRESULT error); <br> <br>/* <br> * D3DAppCreateSurface <br> * Creates a surface described by ddsd.  Will force the surface into <br> * systemmemory if D3DApp was initialized with D3DAPP_ONLYSYSTEMMEMORY. <br> */ <br>BOOL D3DAppCreateSurface(DDSURFACEDESC *ddsd, LPDIRECTDRAWSURFACE *lplpSurf); <br> <br>/* <br> * D3DAppLastError <br> * D3DAppLastErrorString <br> * Returns the last D3DApp error as a string and HRESULT. <br> */ <br>HRESULT D3DAppLastError(void); <br>char* D3DAppLastErrorString(void); <br> <br>/* <br> * D3DAppDestroy <br> * Destroys all objects including Direct Draw.  Call before program <br> * termination. <br> */ <br>BOOL D3DAppDestroy(void); <br> <br>#ifdef __cplusplus <br>}; <br>#endif <br> <br>#endif // __D3DAPP_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

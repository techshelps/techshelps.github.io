<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D3DMATH.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3345"></a>D3DMATH.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: d3dmath.h <br> * <br> ***************************************************************************/ <br>#ifndef __D3DMATH_H__ <br>#define __D3DMATH_H__ <br> <br>#include &lt;math.h&gt; <br> <br>#ifdef __cplusplus <br>extern "C" { <br>#endif <br>/* <br> * Normalises the vector v <br> */ <br>LPD3DVECTOR D3DVECTORNormalise(LPD3DVECTOR v); <br> <br>/* <br> * Calculates cross product of a and b. <br> */ <br>LPD3DVECTOR D3DVECTORCrossProduct(LPD3DVECTOR lpd, LPD3DVECTOR lpa, LPD3DVECTOR lpb); <br> <br>/* <br> * lpDst = lpSrc1 * lpSrc2 <br> * lpDst can be equal to lpSrc1 or lpSrc2 <br> */ <br>LPD3DMATRIX MultiplyD3DMATRIX(LPD3DMATRIX lpDst, LPD3DMATRIX lpSrc1,  <br>                              LPD3DMATRIX lpSrc2); <br>/* <br> * -1 d = a <br> */ <br>LPD3DMATRIX D3DMATRIXInvert(LPD3DMATRIX d, LPD3DMATRIX a); <br> <br>/* <br> * Set the rotation part of a matrix such that the vector lpD is the new <br> * z-axis and lpU is the new y-axis. <br> */ <br>LPD3DMATRIX D3DMATRIXSetRotation(LPD3DMATRIX lpM, LPD3DVECTOR lpD, LPD3DVECTOR lpU); <br> <br>/* <br> * Calculates a point along a B-Spline curve defined by four points. p <br> * n output, contain the point. t Position <br> * along the curve between p2 and p3.  This position is a float between 0 <br> * and 1. p1, p2, p3, p4    Points defining spline curve. p, at parameter <br> * t along the spline curve <br> */ <br>void spline(LPD3DVECTOR p, float t, LPD3DVECTOR p1, LPD3DVECTOR p2, <br>            LPD3DVECTOR p3, LPD3DVECTOR p4); <br> <br>#ifdef __cplusplus <br>}; <br>#endif <br> <br>#endif // __D3DMATH_H__ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

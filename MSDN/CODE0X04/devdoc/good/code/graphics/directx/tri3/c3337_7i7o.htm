<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TRIANGLE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3354"></a>TRIANGLE.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: triangle.c <br> * <br> ***************************************************************************/ <br> <br>#include &lt;math.h&gt; <br>#include &lt;d3d.h&gt; <br>#include "d3ddemo.h" <br> <br>LPDIRECT3DMATERIAL2 lpBmat, lpMat1; <br>#define NUM_SQUARESTRIP 50 <br>#define NUM_VERTICES (4 + (NUM_SQUARESTRIP + 1) * 2) <br>#define NUM_TRIANGLES 1 <br>#define NUM_TSTRIPIDX ((NUM_SQUARESTRIP + 1) * 2 ) <br>#define NUM_TFANIDX (NUM_TSTRIPIDX + 1) <br>#define NUM_INDICES (NUM_TSTRIPIDX + NUM_TFANIDX) <br>D3DTLVERTEX src_v[NUM_VERTICES]; <br>WORD src_t[NUM_INDICES]; <br>DWORD hTex; <br>DWORD hMat; <br> <br>void CreateGridStrip(int x) <br>{ <br>} <br> <br>void <br>OverrideDefaults(Defaults* defaults) <br>{ <br>    lstrcpy(defaults-&gt;Name, "Triangle D3D Example"); <br>    defaults-&gt;rs.bPerspCorrect = FALSE; <br>    defaults-&gt;bResizingDisabled = FALSE; <br>} <br> <br>BOOL <br>RenderScene(LPDIRECT3DDEVICE2 lpDev, LPDIRECT3DVIEWPORT2 lpView, <br>            LPD3DRECT lpExtent) <br>{ <br>LPD3DTLVERTEX tstrip_v = src_v+3; <br>        D3DCLIPSTATUS status={D3DCLIPSTATUS_EXTENTS2, 0, 2048.0f, 0.0f, 2048.0f, 0.0f, 0.0f, 0.0f}; <br> <br>    if (lpDev-&gt;lpVtbl-&gt;BeginScene(lpDev) != D3D_OK) <br>        return FALSE; <br>    if (lpDev-&gt;lpVtbl-&gt;SetLightState(lpDev, D3DLIGHTSTATE_MATERIAL, hMat) != D3D_OK) <br>        return FALSE;  <br>    if (lpDev-&gt;lpVtbl-&gt;SetRenderState(lpDev, D3DRENDERSTATE_TEXTUREHANDLE, hTex) != D3D_OK) <br>        return FALSE;  <br>    if (lpDev-&gt;lpVtbl-&gt;SetClipStatus(lpDev, &amp;status) != D3D_OK) <br>        return FALSE;  <br>/*if (lpDev-&gt;lpVtbl-&gt;DrawIndexedPrimitive(lpDev, D3DPT_TRIANGLELIST,  <br>   D3DVT_TLVERTEX, (LPVOID)src_v, 3, (LPWORD)src_t,  <br>                                           NUM_TRIANGLES*3, D3DDP_WAIT) != D3D_OK) <br>return FALSE; <br>if (lpDev-&gt;lpVtbl-&gt;DrawIndexedPrimitive(lpDev, D3DPT_TRIANGLESTRIP,  <br>   D3DVT_TLVERTEX, (LPVOID)tstrip_v, NUM_TSTRIPIDX, (LPWORD)src_t,  <br>                                           NUM_TSTRIPIDX, D3DDP_WAIT) != D3D_OK) <br>return FALSE; <br>if (lpDev-&gt;lpVtbl-&gt;DrawIndexedPrimitive(lpDev, D3DPT_TRIANGLEFAN,  <br>   D3DVT_TLVERTEX, (LPVOID)tstrip_v, NUM_TSTRIPIDX + 1, (LPWORD)src_t + NUM_TSTRIPIDX,  <br>                                           NUM_TFANIDX, D3DDP_WAIT) != D3D_OK) <br>return FALSE;*/ <br>if (lpDev-&gt;lpVtbl-&gt;DrawPrimitive(lpDev, D3DPT_TRIANGLEFAN,  <br>                                           D3DVT_TLVERTEX, (LPVOID)tstrip_v, NUM_TSTRIPIDX, D3DDP_WAIT) != D3D_OK) <br>return FALSE; <br>/*if (lpDev-&gt;lpVtbl-&gt;DrawPrimitive(lpDev, D3DPT_TRIANGLESTRIP,  <br>                                           D3DVT_TLVERTEX, (LPVOID)tstrip_v, NUM_TSTRIPIDX, D3DDP_WAIT) != D3D_OK) <br>return FALSE; <br>if (lpDev-&gt;lpVtbl-&gt;DrawPrimitive(lpDev, D3DPT_TRIANGLELIST,  <br>                                           D3DVT_TLVERTEX, (LPVOID)src_v, 3, D3DDP_WAIT) != D3D_OK) <br>return FALSE;*/ <br>    if (lpDev-&gt;lpVtbl-&gt;GetClipStatus(lpDev, &amp;status) != D3D_OK) <br>        return FALSE;  <br>    if (lpDev-&gt;lpVtbl-&gt;EndScene(lpDev) != D3D_OK) <br>        return FALSE; <br>lpExtent-&gt;x1 = (LONG)floor((double)status.minx); <br>lpExtent-&gt;x2 = (LONG)ceil((double)status.maxx); <br>lpExtent-&gt;y1 = (LONG)floor((double)status.miny); <br>lpExtent-&gt;y2 = (LONG)ceil((double)status.maxy); <br>    return TRUE; <br>} <br> <br>void <br>ReleaseScene(void) <br>{ <br>    return; <br>} <br> <br>void <br>ReleaseView(LPDIRECT3DVIEWPORT2 lpView) <br>{ <br>    lpView; <br>    RELEASE(lpMat1); <br>    RELEASE(lpBmat); <br>} <br> <br>BOOL <br>InitScene(void) <br>{ <br>int i; <br>LPD3DTLVERTEX tstrip_v = src_v+3; <br> <br>    /* <br>     * Setup vertices for single triangle <br>     */ <br>    memset(&amp;src_v[0], 0, sizeof(D3DVERTEX) * NUM_VERTICES); <br>    src_v[0].sx = D3DVAL(10.0); <br>    src_v[0].sy = D3DVAL(10.0); <br>    src_v[0].sz = D3DVAL(0.1); <br>    src_v[0].rhw = D3DVAL(1.0); <br>    src_v[0].color = RGBA_MAKE(255, 0, 255, 255); <br>    src_v[0].specular = RGB_MAKE(0, 0, 255); <br>    src_v[0].tu = D3DVAL(0.0); <br>    src_v[0].tv = D3DVAL(0.0); <br>    src_v[1].sx = D3DVAL(300.0); <br>    src_v[1].sy = D3DVAL(50.0); <br>    src_v[1].sz = D3DVAL(0.9); <br>    src_v[1].rhw = D3DVAL(2.0); <br>    src_v[1].color = RGBA_MAKE(255, 255, 255, 255); <br>    src_v[1].specular = RGB_MAKE(0, 0, 0); <br>    src_v[1].tu = D3DVAL(1.0); <br>    src_v[1].tv = D3DVAL(1.0); <br>    src_v[2].sx = D3DVAL(150.0); <br>    src_v[2].sy = D3DVAL(180.0); <br>    src_v[2].sz = D3DVAL(0.6); <br>    src_v[2].rhw = D3DVAL(1.0); <br>    src_v[2].color = RGBA_MAKE(255, 255, 0, 255); <br>    src_v[2].specular = RGB_MAKE(0, 0, 0); <br>    src_v[2].tu = D3DVAL(0.0); <br>    src_v[2].tv = D3DVAL(1.0); <br> <br>    /* <br>     * Setup vertices for triangle strip <br>     */ <br>for (i=0; i&lt;=NUM_SQUARESTRIP; ++i) <br>{ <br>tstrip_v[i*2].sx = i*300.0f/NUM_SQUARESTRIP; <br>tstrip_v[i*2].sy = 200.0f; <br>tstrip_v[i*2].sz = .5f; <br>tstrip_v[i*2].rhw = 1.0f; <br>tstrip_v[i*2].color = RGBA_MAKE(255, 255, 255, 255); <br>tstrip_v[i*2].specular = RGB_MAKE(0, 0, 0); <br>tstrip_v[i*2].tu = (float)i/NUM_SQUARESTRIP; <br>tstrip_v[i*2].tv = 0.0f; <br>tstrip_v[i*2+1].sx = i*300.0f/NUM_SQUARESTRIP; <br>tstrip_v[i*2+1].sy = 0.0f; <br>tstrip_v[i*2+1].sz = .5f; <br>tstrip_v[i*2+1].rhw = 1.0f; <br>tstrip_v[i*2+1].color = RGBA_MAKE(255, 255, 255, 255); <br>tstrip_v[i*2+1].specular = RGB_MAKE(0, 0, 0); <br>tstrip_v[i*2+1].tu = (float)i/NUM_SQUARESTRIP; <br>tstrip_v[i*2+1].tv = 1.0f; <br>} <br>/* Set up base vertex for trifan */ <br>tstrip_v[i*2].sx = 0.0f; <br>tstrip_v[i*2].sy = 100.0f; <br>tstrip_v[i*2].sz = .5f; <br>tstrip_v[i*2].rhw = 1.0f; <br>tstrip_v[i*2].color = RGBA_MAKE(255, 255, 255, 255); <br>tstrip_v[i*2].specular = RGB_MAKE(0, 0, 0); <br>tstrip_v[i*2].tu = 0.0f; <br>tstrip_v[i*2].tv = 0.5f; <br> <br>/* <br> * Set Up Triangle strip indices &amp; base Tri Fan index <br> */ <br>for (i=0; i&lt;=NUM_TSTRIPIDX; ++i) <br>src_t[i]=i; <br>/* <br> * Set Up Triangle fan indices <br> */ <br>for (i=0; i&lt;=NUM_SQUARESTRIP; ++i) <br>{ <br>src_t[NUM_TSTRIPIDX+1+i]=i*2+1; <br>src_t[NUM_INDICES-1-i]=i*2; <br>} <br>    return TRUE; <br>} <br> <br>BOOL <br>InitView(LPDIRECTDRAW lpDD, LPDIRECT3D2 lpD3D, LPDIRECT3DDEVICE2 lpDev, <br>   LPDIRECT3DVIEWPORT2 lpView, int NumTextures, <br>   LPD3DTEXTUREHANDLE TextureHandle) <br>{ <br>    D3DMATERIAL bmat, mat; <br>    D3DMATERIALHANDLE hBmat, hMat1; <br> <br>    if (lpD3D-&gt;lpVtbl-&gt;CreateMaterial(lpD3D, &amp;lpBmat, NULL) != D3D_OK) { <br>return FALSE; <br>    } <br>    memset(&amp;bmat, 0, sizeof(D3DMATERIAL)); <br>    bmat.dwSize = sizeof(D3DMATERIAL); <br>    bmat.diffuse.r = (D3DVALUE)1.0; <br>    bmat.diffuse.g = (D3DVALUE)1.0; <br>    bmat.diffuse.b = (D3DVALUE)1.0; <br>    bmat.ambient.r = (D3DVALUE)1.0; <br>    bmat.ambient.g = (D3DVALUE)1.0; <br>    bmat.ambient.b = (D3DVALUE)1.0; <br>    bmat.hTexture = TextureHandle[0]; <br>    bmat.dwRampSize = 1; <br>    lpBmat-&gt;lpVtbl-&gt;SetMaterial(lpBmat, &amp;bmat); <br>    lpBmat-&gt;lpVtbl-&gt;GetHandle(lpBmat, lpDev, &amp;hBmat); <br>    lpView-&gt;lpVtbl-&gt;SetBackground(lpView, hBmat); <br> <br>    if (lpD3D-&gt;lpVtbl-&gt;CreateMaterial(lpD3D, &amp;lpMat1, NULL) != D3D_OK) { <br>return FALSE; <br>    } <br>    memset(&amp;mat, 0, sizeof(D3DMATERIAL)); <br>    mat.dwSize = sizeof(D3DMATERIAL); <br>    mat.diffuse.r = (D3DVALUE)1.0; <br>    mat.diffuse.g = (D3DVALUE)1.0; <br>    mat.diffuse.b = (D3DVALUE)1.0; <br>    mat.ambient.r = (D3DVALUE)1.0; <br>    mat.ambient.g = (D3DVALUE)1.0; <br>    mat.ambient.b = (D3DVALUE)1.0; <br>#define SPECULAR <br>#ifdef SPECULAR <br>    mat.specular.r = (D3DVALUE)1.0; <br>    mat.specular.g = (D3DVALUE)1.0; <br>    mat.specular.b = (D3DVALUE)1.0; <br>    mat.power = (float)40.0; <br>#else <br>    mat.specular.r = (D3DVALUE)0.0; <br>    mat.specular.g = (D3DVALUE)0.0; <br>    mat.specular.b = (D3DVALUE)0.0; <br>    mat.power = (float)0.0; <br>#endif     <br>    mat.hTexture = TextureHandle[1]; <br>    mat.dwRampSize = 16; <br>    lpMat1-&gt;lpVtbl-&gt;SetMaterial(lpMat1, &amp;mat); <br>    lpMat1-&gt;lpVtbl-&gt;GetHandle(lpMat1, lpDev, &amp;hMat1); <br>hMat= (DWORD) hMat1; <br>hTex=TextureHandle[1]; <br>    return TRUE; <br>} <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

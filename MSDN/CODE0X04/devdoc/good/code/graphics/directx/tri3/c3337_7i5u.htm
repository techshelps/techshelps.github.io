<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D3DMACS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3342"></a>D3DMACS.H</h2>
<pre><code>/* <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: d3dmacs.h <br> * <br> *  Useful macros for generating execute buffers.  Consult the D3D sample <br> *  code for examples of their usage. <br> * <br> *  Use OP_NOP to QWORD align triangle and line instructions. <br> */ <br> <br>#ifndef __D3DMACS_H__ <br>#define __D3DMACS_H__ <br> <br>#undef RELEASE <br> <br>#ifndef __cplusplus <br>#define MAKE_MATRIX(lpDev, handle, data) do { \ <br>    if (lpDev-&gt;lpVtbl-&gt;CreateMatrix(lpDev, &amp;handle) != D3D_OK) \ <br>    return FALSE; \ <br>    if (lpDev-&gt;lpVtbl-&gt;SetMatrix(lpDev, handle, &amp;data) != D3D_OK) \ <br>        return FALSE; \ <br>  } while (0) <br>#define RELEASE(x) if (x != NULL) {x-&gt;lpVtbl-&gt;Release(x); x = NULL;} <br>#endif <br> <br>#ifdef __cplusplus <br>#define MAKE_MATRIX(lpDev, handle, data) do { \ <br>    if (lpDev-&gt;CreateMatrix(&amp;handle) != D3D_OK) \ <br>    return FALSE; \ <br>    if (lpDev-&gt;SetMatrix(handle, &amp;data) != D3D_OK) \ <br>        return FALSE; \ <br>  } while (0) <br>#define RELEASE(x) if (x != NULL) {x-&gt;Release(); x = NULL;} <br>#endif <br> <br>#define PUTD3DINSTRUCTION(op, sz, cnt, ptr) do { \ <br>    ((LPD3DINSTRUCTION) ptr)-&gt;bOpcode = op; \ <br>    ((LPD3DINSTRUCTION) ptr)-&gt;bSize = sz; \ <br>    ((LPD3DINSTRUCTION) ptr)-&gt;wCount = cnt; \ <br>    ptr = (void *)(((LPD3DINSTRUCTION) ptr) + 1); \ <br>  } while (0) <br> <br>#define VERTEX_DATA(loc, cnt, ptr) do { \ <br>    if ((ptr) != (loc)) memcpy((ptr), (loc), sizeof(D3DVERTEX) * (cnt)); \ <br>    ptr = (void *)(((LPD3DVERTEX) (ptr)) + (cnt)); \ <br>  } while (0) <br> <br>// OP_MATRIX_MULTIPLY size: 4 (sizeof D3DINSTRUCTION) <br>#define OP_MATRIX_MULTIPLY(cnt, ptr) \ <br>    PUTD3DINSTRUCTION(D3DOP_MATRIXMULTIPLY, sizeof(D3DMATRIXMULTIPLY), cnt, ptr) <br> <br>// MATRIX_MULTIPLY_DATA size: 12 (sizeof MATRIXMULTIPLY) <br>#define MATRIX_MULTIPLY_DATA(src1, src2, dest, ptr) do { \ <br>    ((LPD3DMATRIXMULTIPLY) ptr)-&gt;hSrcMatrix1 = src1; \ <br>    ((LPD3DMATRIXMULTIPLY) ptr)-&gt;hSrcMatrix2 = src2; \ <br>    ((LPD3DMATRIXMULTIPLY) ptr)-&gt;hDestMatrix = dest; \ <br>    ptr = (void *)(((LPD3DMATRIXMULTIPLY) ptr) + 1); \ <br>  } while (0) <br> <br>// OP_STATE_LIGHT size: 4 (sizeof D3DINSTRUCTION) <br>#define OP_STATE_LIGHT(cnt, ptr) \ <br>    PUTD3DINSTRUCTION(D3DOP_STATELIGHT, sizeof(D3DSTATE), cnt, ptr) <br> <br>// OP_STATE_TRANSFORM size: 4 (sizeof D3DINSTRUCTION) <br>#define OP_STATE_TRANSFORM(cnt, ptr) \ <br>    PUTD3DINSTRUCTION(D3DOP_STATETRANSFORM, sizeof(D3DSTATE), cnt, ptr) <br> <br>// OP_STATE_RENDER size: 4 (sizeof D3DINSTRUCTION) <br>#define OP_STATE_RENDER(cnt, ptr) \ <br>    PUTD3DINSTRUCTION(D3DOP_STATERENDER, sizeof(D3DSTATE), cnt, ptr) <br> <br>// STATE_DATA size: 8 (sizeof D3DSTATE) <br>#define STATE_DATA(type, arg, ptr) do { \ <br>    ((LPD3DSTATE) ptr)-&gt;drstRenderStateType = (D3DRENDERSTATETYPE)type; \ <br>    ((LPD3DSTATE) ptr)-&gt;dwArg[0] = arg; \ <br>    ptr = (void *)(((LPD3DSTATE) ptr) + 1); \ <br>  } while (0) <br> <br>// OP_PROCESS_VERTICES size: 4 (sizeof D3DINSTRUCTION) <br>#define OP_PROCESS_VERTICES(cnt, ptr) do { \ <br>    PUTD3DINSTRUCTION(D3DOP_PROCESSVERTICES, sizeof(D3DPROCESSVERTICES), cnt, ptr); \ <br>  } while (0) <br> <br>// PROCESSVERTICES_DATA size: 16 (sizeof D3DPROCESSVERTICES) <br>#define PROCESSVERTICES_DATA(flgs, strt, cnt, ptr) do { \ <br>    ((LPD3DPROCESSVERTICES) ptr)-&gt;dwFlags = flgs; \ <br>    ((LPD3DPROCESSVERTICES) ptr)-&gt;wStart = strt; \ <br>    ((LPD3DPROCESSVERTICES) ptr)-&gt;wDest = strt; \ <br>    ((LPD3DPROCESSVERTICES) ptr)-&gt;dwCount = cnt; \ <br>    ((LPD3DPROCESSVERTICES) ptr)-&gt;dwReserved = 0; \ <br>    ptr = (void *)(((LPD3DPROCESSVERTICES) ptr) + 1); \ <br>  } while (0) <br> <br>// OP_TRIANGLE_LIST size: 4 (sizeof D3DINSTRUCTION) <br>#define OP_TRIANGLE_LIST(cnt, ptr) \ <br>    PUTD3DINSTRUCTION(D3DOP_TRIANGLE, sizeof(D3DTRIANGLE), cnt, ptr) <br> <br>#define TRIANGLE_LIST_DATA(loc, count, ptr) do { \ <br>    if ((ptr) != (loc)) memcpy((ptr), (loc), sizeof(D3DTRIANGLE) * (count)); \ <br>    ptr = (void *)(((LPD3DTRIANGLE) (ptr)) + (count)); \ <br>  } while (0) <br> <br>// OP_LINE_LIST size: 4 (sizeof D3DINSTRUCTION) <br>#define OP_LINE_LIST(cnt, ptr) \ <br>    PUTD3DINSTRUCTION(D3DOP_LINE, sizeof(D3DLINE), cnt, ptr) <br> <br>#define LINE_LIST_DATA(loc, count, ptr) do { \ <br>    if ((ptr) != (loc)) memcpy((ptr), (loc), sizeof(D3DLINE) * (count)); \ <br>    ptr = (void *)(((LPD3DLINE) (ptr)) + (count)); \ <br>  } <br> <br>// OP_POINT_LIST size: 8 (sizeof D3DINSTRUCTION + sizeof D3DPOINT) <br>#define OP_POINT_LIST(first, cnt, ptr) do { \ <br>    PUTD3DINSTRUCTION(D3DOP_POINT, sizeof(D3DPOINT), 1, ptr); \ <br>    ((LPD3DPOINT)(ptr))-&gt;wCount = cnt; \ <br>    ((LPD3DPOINT)(ptr))-&gt;wFirst = first; \ <br>    ptr = (void*)(((LPD3DPOINT)(ptr)) + 1); \ <br>  } while (0) <br> <br>// OP_SPAN_LIST size: 8 (sizeof D3DINSTRUCTION + sizeof D3DSPAN) <br>#define OP_SPAN_LIST(first, cnt, ptr) do { \ <br>    PUTD3DINSTRUCTION(D3DOP_SPAN, sizeof(D3DSPAN), 1, ptr); \ <br>    ((LPD3DSPAN)(ptr))-&gt;wCount = cnt; \ <br>    ((LPD3DSPAN)(ptr))-&gt;wFirst = first; \ <br>    ptr = (void*)(((LPD3DSPAN)(ptr)) + 1); \ <br>  } while (0) <br> <br>// OP_BRANCH_FORWARD size: 18 (sizeof D3DINSTRUCTION + sizeof D3DBRANCH) <br>#define OP_BRANCH_FORWARD(tmask, tvalue, tnegate, toffset, ptr) do { \ <br>    PUTD3DINSTRUCTION(D3DOP_BRANCHFORWARD, sizeof(D3DBRANCH), 1, ptr); \ <br>    ((LPD3DBRANCH) ptr)-&gt;dwMask = tmask; \ <br>    ((LPD3DBRANCH) ptr)-&gt;dwValue = tvalue; \ <br>    ((LPD3DBRANCH) ptr)-&gt;bNegate = tnegate; \ <br>    ((LPD3DBRANCH) ptr)-&gt;dwOffset = toffset; \ <br>    ptr = (void *)(((LPD3DBRANCH) (ptr)) + 1); \ <br>  } while (0) <br> <br>// OP_SET_STATUS size: 20 (sizeof D3DINSTRUCTION + sizeof D3DSTATUS) <br>#define OP_SET_STATUS(flags, status, _x1, _y1, _x2, _y2, ptr) do { \ <br>    PUTD3DINSTRUCTION(D3DOP_SETSTATUS, sizeof(D3DSTATUS), 1, ptr); \ <br>    ((LPD3DSTATUS)(ptr))-&gt;dwFlags = flags; \ <br>    ((LPD3DSTATUS)(ptr))-&gt;dwStatus = status; \ <br>    ((LPD3DSTATUS)(ptr))-&gt;drExtent.x1 = _x1; \ <br>    ((LPD3DSTATUS)(ptr))-&gt;drExtent.y1 = _y1; \ <br>    ((LPD3DSTATUS)(ptr))-&gt;drExtent.x2 = _x2; \ <br>    ((LPD3DSTATUS)(ptr))-&gt;drExtent.y2 = _y2; \ <br>    ptr = (void *)(((LPD3DSTATUS) (ptr)) + 1); \ <br>  } while (0) <br> <br>// OP_NOP size: 4 <br>#define OP_NOP(ptr) \ <br>    PUTD3DINSTRUCTION(D3DOP_TRIANGLE, sizeof(D3DTRIANGLE), 0, ptr) <br> <br>#define OP_EXIT(ptr) \ <br>    PUTD3DINSTRUCTION(D3DOP_EXIT, 0, 0, ptr) <br> <br>#define QWORD_ALIGNED(ptr) \ <br>    ( ! ( 0x00000007L &amp; (ULONG) (ptr) ) ) <br> <br>#endif // __D3DMACS_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

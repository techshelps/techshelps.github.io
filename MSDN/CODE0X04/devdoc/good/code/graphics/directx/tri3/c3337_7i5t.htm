<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D3DDEMO.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3341"></a>D3DDEMO.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: d3ddemo.h <br> * <br> ***************************************************************************/ <br>#ifndef __D3DDEMO_H__ <br>#define __D3DDEMO_H__ <br> <br>#include &lt;ddraw.h&gt; <br>#include &lt;d3d.h&gt; <br>#include "d3dapp.h" <br>#include "d3dmath.h" <br>#include "d3dsphr.h" <br>#include "d3dmacs.h" <br> <br>#ifdef __cplusplus <br>extern "C" { <br>#endif <br>    /* <br>     * SetMouseCallback <br>     * Called in an example to set a callback function for all WM messages <br>     * dealing with the mouse.  The handler should return whether or not <br>     * it handled the message. <br>     */ <br>    BOOL SetMouseCallback(BOOL(*)(UINT, WPARAM, LPARAM)); <br>    /* <br>     * SetKeyDownCallback <br>     * Called in an example to set a callback function for keyboard <br>     * messages. The handler should return whether or not it handled the <br>     * message. <br>     */ <br>    BOOL SetKeyboardCallback(BOOL(*)(UINT, WPARAM, LPARAM)); <br> <br>/* <br> * These functions are found in the source for each example. <br> */ <br>    /* <br>     * RenderScene <br>     * Clears the viewport and viewport Z-buffer and render the scene. <br>     * The extent of rendering is returned in the rectangle. <br>     */ <br>    BOOL RenderScene(LPDIRECT3DDEVICE2 lpDev, LPDIRECT3DVIEWPORT2 lpView, <br>     LPD3DRECT lpExtent); <br>    /* <br>     * InitScene <br>     * Builds the model which will be rendered. <br>     */ <br>    BOOL InitScene(void); <br> <br>    /* <br>     * InitView <br>     * Builds execute buffer and all components needed to be added to viewport. <br>     */ <br>    BOOL InitView(LPDIRECTDRAW lpDD, <br>  LPDIRECT3D2 lpD3D, <br>  LPDIRECT3DDEVICE2 lpDev, <br>  LPDIRECT3DVIEWPORT2 lpView, <br>  int NumTextures, <br>  LPD3DTEXTUREHANDLE TextureHandle); <br>    /* <br>     * Release all objects and free all memory allocated in InitScene <br>     */ <br>    void ReleaseScene(void); <br> <br>    /* <br>     * Release all objects and free all memory allocated in InitView <br>     */ <br>    void ReleaseView(LPDIRECT3DVIEWPORT2 lpView); <br> <br>    typedef struct Defaultstag { <br>D3DAppRenderState rs; <br>BOOL bTexturesDisabled; <br>BOOL bResizingDisabled; <br>BOOL bClearsOn; <br>char Name[30]; <br>    } Defaults; <br> <br>    /* <br>     * Allows each example to begin with different defaults <br>     */ <br>    void OverrideDefaults(Defaults* defaults); <br> <br>#ifdef __cplusplus <br>}; <br>#endif <br> <br>#endif // __D3DDEMO_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

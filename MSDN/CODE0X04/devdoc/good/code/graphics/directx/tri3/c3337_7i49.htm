<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D3DAPPI.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3339"></a>D3DAPPI.H</h2>
<pre><code>/* <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: d3dappi.h <br> * <br> *  Internal header.  Part of D3DApp. <br> * <br> *  D3DApp is a collection of helper functions for Direct3D applications. <br> *  D3DApp consists of the following files: <br> *d3dapp.h    Main D3DApp header to be included by application <br> *      d3dappi.h   Internal header <br> *      d3dapp.c    D3DApp functions seen by application. <br> *      ddcalls.c   All calls to DirectDraw objects except textures <br> *      d3dcalls.c  All calls to Direct3D objects except textures <br> *      texture.c   Texture loading and managing texture list <br> *      misc.c    Miscellaneous calls <br> */ <br> <br>#ifndef __D3DAPPI_H__ <br>#define __D3DAPPI_H__ <br> <br>/* <br> * INCLUDED HEADERS <br> */ <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;time.h&gt; <br>#include &lt;search.h&gt; <br>#include &lt;ddraw.h&gt; <br>#include &lt;d3d.h&gt; <br>#include "d3dapp.h" <br>#include "d3dmacs.h" <br>#include "lclib.h"  /* lclib is a override for standard string lib */ <br> <br>#ifdef __cplusplus <br>extern "C" { <br>#endif <br> <br>/* <br> * MACROS <br> */ <br>#undef ATTEMPT <br>#define ATTEMPT(x) if (!(x)) goto exit_with_error <br>#undef RELEASE <br>#define RELEASE(x) if (x) { x-&gt;lpVtbl-&gt;Release(x); x = NULL; } <br>#undef MAX <br>#define MAX(x, y) ((x) &gt; (y)) ? (x) : (y) <br>#undef MIN <br>#define MIN(x, y) ((x) &gt; (y)) ? (y) : (x) <br>#undef ZEROMEM <br>#define ZEROMEM(x) memset(&amp;x, 0, sizeof(x)) <br> <br>/* <br> * GLOBAL VARIABLES <br> *    see d3dapp.c for descriptions <br> */ <br>extern D3DAppInfo d3dappi; <br>extern D3DAppRenderState d3dapprs; <br>extern BOOL bD3DAppInitialized; <br>extern HRESULT LastError; <br>extern LPDIRECTDRAWCLIPPER lpClipper; <br>extern LPDIRECTDRAWPALETTE lpPalette; <br>extern BOOL(*D3DDeviceDestroyCallback)(LPVOID); <br>extern LPVOID D3DDeviceDestroyCallbackContext; <br>extern BOOL(*D3DDeviceCreateCallback)(int, int, LPDIRECT3DVIEWPORT2*, LPVOID); <br>extern LPVOID D3DDeviceCreateCallbackContext; <br>extern BOOL bPrimaryPalettized; <br>extern BOOL bPaletteActivate; <br>extern BOOL bIgnoreWM_SIZE; <br>extern PALETTEENTRY ppe[256]; <br>extern PALETTEENTRY Originalppe[256]; <br>extern char LastErrorString[256]; <br>extern SIZE szLastClient; <br>extern SIZE szBuffers; <br>extern int NumDirtyClientRects, NumDirtyBackRects, NumDirtyZRects; <br>extern D3DRECT DirtyClient[D3DAPP_MAXCLEARRECTS]; <br>extern D3DRECT DirtyBack[D3DAPP_MAXCLEARRECTS]; <br>extern D3DRECT DirtyZ[D3DAPP_MAXCLEARRECTS]; <br>extern D3DTEXTUREHANDLE MasterTextureHandle[D3DAPP_MAXTEXTURES]; <br>extern int CallbackRefCount; <br> <br>#ifdef __cplusplus <br>}; <br>#endif <br> <br>/* <br> * INTERNAL FUNCTION PROTOTYPES <br> */ <br>BOOL D3DAppISetRenderState(void); <br>BOOL D3DAppIEnumDevices(void); <br>BOOL D3DAppIPickDriver(int* driver, DWORD depths); <br>BOOL D3DAppICreateD3D(void); <br>BOOL D3DAppIEnumTextureFormats(void); <br>BOOL D3DAppICreateZBuffer(int w, int h, int driver); <br>BOOL D3DAppICreateDevice(int driver); <br>BOOL D3DAppILoadTextureSurf(int n, BOOL* bInVideo); <br>BOOL D3DAppIGetTextureHandle(int n); <br>BOOL D3DAppILoadAllTextures(void); <br>void D3DAppIReleaseTexture(int n); <br>void D3DAppIReleaseAllTextures(void); <br>BOOL D3DAppIReloadTextureSurf(int n); <br>BOOL D3DAppISetCoopLevel(HWND hwnd, BOOL bFullscreen); <br>BOOL D3DAppISetDisplayMode(int w, int h, int bpp); <br>BOOL D3DAppICheckForPalettized(void); <br>BOOL D3DAppIRestoreDispMode(void); <br>BOOL D3DAppIVerifyDriverAndMode(int* lpdriver, int* lpmode); <br>BOOL D3DAppIFilterDrivers(int mode); <br>DWORD D3DAppTotalVideoMemory(void); <br>BOOL D3DAppIEnumDisplayModes(void); <br>BOOL D3DAppIPickDisplayMode(int* mode, DWORD depths); <br>BOOL D3DAppISetDispMode(int w, int h, int bpp); <br>BOOL D3DAppICreateDD(DWORD flags); <br>BOOL D3DAppIFilterDisplayModes(int driver); <br>HRESULT D3DAppICreateSurface(LPDDSURFACEDESC lpDDSurfDesc, <br>                LPDIRECTDRAWSURFACE FAR *lpDDSurface); <br>HRESULT D3DAppIGetSurfDesc(LPDDSURFACEDESC lpDDSurfDesc, <br>   LPDIRECTDRAWSURFACE lpDDSurf); <br>BOOL D3DAppICreateBuffers(HWND hwnd, int w, int h, int bpp, BOOL bFullscreen, BOOL bIsHardware); <br>BOOL D3DAppIRememberWindowsMode(void); <br>BOOL D3DAppIClearBuffers(void); <br>DWORD D3DAppIBPPToDDBD(int bpp); <br>void D3DAppIReleasePathList(void); <br>LPDIRECTDRAWSURFACE D3DAppILoadSurface(LPDIRECTDRAW lpDD, LPCSTR lpName, <br>       LPDDSURFACEDESC lpFormat, <br>       DWORD memoryflag); <br>void D3DAppISetClientSize(HWND hwnd, int w,int h,BOOL bReturnFromFullscreen); <br>void D3DAppIGetClientWin(HWND hwnd); <br>void D3DAppISetDefaults(void); <br>BOOL D3DAppICallDeviceDestroyCallback(void); <br>BOOL D3DAppICallDeviceCreateCallback(int w, int h); <br>void D3DAppIMergeRectLists(int* dstnum, LPD3DRECT dst, int src1num, <br>   LPD3DRECT src1, int src2num, LPD3DRECT src2); <br>void D3DAppICopyRectList(int* dstnum, LPD3DRECT dst, int srcnum, <br> LPD3DRECT src); <br>void D3DAppIValidateDirtyRects(void); <br>BOOL D3DAppIHandleWM_SIZE(LRESULT* lresult, HWND hwnd, UINT message, <br>  WPARAM wParam, LPARAM lParam); <br>void D3DAppISetErrorString( LPSTR fmt, ... ); <br> <br>void __cdecl dpf( LPSTR fmt, ... ); <br> <br> <br>#endif // __D3DAPPI_H__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

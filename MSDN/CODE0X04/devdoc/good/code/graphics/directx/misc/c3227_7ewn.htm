<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3227"></a>README.TXT</h2>
<pre><code>DirectX Samples MISC Directory Readme <br>Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> <br>1. D3DUtils <br> <br>        d3dutils.h, d3dutils.inl and d3dutils.cpp implement a set <br>of helper functions for C++ programmers for the following tasks: <br> <br> <br>1a. Matrix construction <br> <br>D3DMATRIX ZeroMatrix(); <br>        Returns the zero matrix. <br> <br>D3DMATRIX IdentityMatrix(); <br>        Returns the identity matrix. <br> <br>D3DMATRIX ProjectionMatrix(const float Zn, const float Zf, <br>        const float fov); <br>        Returns the projection matrix: <br> <br>        [c      0       0       0 <br>         0      c       0       0 <br>         0      0       Q       s <br>         0      0       -QZn    0] <br> <br>                s = sin(fov/2) <br>                c = cos(fov/2) <br>                Q = s / (1 - Zn/Zf) <br>        Zn and Zf specify the near and far clipping planes. <br>        fov specifies the field of view angle in radians. <br> <br>D3DMATRIX RotateXMatrix(const float rads); <br>D3DMATRIX RotateYMatrix(const float rads); <br>D3DMATRIX RotateZMatrix(const float rads); <br>        Constructs a matrix that rotates about the given axis <br>by rads radians. <br> <br>D3DMATRIX TranslateMatrix(const float dx, const float dy, <br>        const float dz); <br>D3DMATRIX TranslateMatrix(const D3DVECTOR&amp; v); <br>        Constructs a matrix to translate by the given vector. <br> <br>D3DMATRIX ViewMatrix(const D3DVECTOR&amp; from, const D3DVECTOR&amp; at, <br>        const D3DVECTOR&amp; up, const float roll); <br> <br>        from is the location of the eye <br>        at is the location of the eye's point of interest <br>        up is the global "up" vector <br>        roll is a roll angle about the axis of the viewer <br> <br>        Constructs a view matrix to translate and rotate such that <br>the viewer is looking down the +Z axis from the origin. <br> <br>D3DMATRIX ScaleMatrix(const float size); <br>D3DMATRIX ScaleMatrix(const float a, const float b, const float c); <br>D3DMATRIX ScaleMatrix(const D3DVECTOR&amp; v); <br>        Uniform and nonuniform scale matrices. <br> <br>D3DMATRIX MatrixMult (const D3DMATRIX&amp; a, const D3DMATRIX&amp; b); <br>        Returns a*b <br> <br>D3DMATRIX MatrixInverse (const D3DMATRIX&amp; a); <br>        Returns the inverse of a. <br> <br>D3DMATRIX MatrixTranspose(const D3DMATRIX&amp; a); <br>        Returns the transpose of a. <br> <br>D3DVECTOR TransformVector(const D3DVECTOR&amp; v, const D3DMATRIX&amp; m); <br>        Returns v*m. Divides the result through by the <br>perspective component of v*m. <br> <br>D3DVECTOR TransformNormal(const D3DVECTOR&amp; v, const D3DMATRIX&amp; m); <br>        Returns v*MatrixTranspose(MatrixInverse(m)). This is the <br>correct way to transform a normal vector. <br>        Note, this routine should not be used to transform batches <br>of vectors because it would repeatedly perform the transpose and <br>inverse operations on the input matrix. <br> <br> <br>1b. Light management <br> <br>Data Members <br> <br>        D3DLIGHT2       light; <br>                Structure describing the light. <br> <br>        LPDIRECT3DLIGHT lpD3DLight; <br>                Interface pointer for the light. <br> <br>        int             changed; <br>                Dirty bit for the light. <br> <br>Member Functions <br> <br>HRESULT AddToViewport(LPDIRECT3DVIEWPORT2 lpView); <br>        Adds the light to the viewport. <br> <br>HRESULT RemoveFromViewport(LPDIRECT3DVIEWPORT2 lpView); <br>        Removes the light from the viewport. <br> <br>HRESULT Set(); <br>        Forces the light to be updated through SetLight. <br> <br>The Set*/Get* functions enable the application to update the light's <br>properties with single function calls. The Set* functions set <br>the dirty bit so the light will be updated when necessary. <br> <br>SetColor/GetColor <br>SetPosition/GetPosition <br>SetDirection/GetDirection <br>SetAttenuation/GetAttenuation <br>SetRange/GetRange <br>SetFalloff/GetFalloff <br>SetUmbra/GetUmbra <br>SetPenumbra/GetPenumbra <br>SetFlags/GetFlags <br> <br>Several classes are derived from Light. This is basically to <br>simplify construction, since some elements of D3DLIGHT2 are <br>not relevant to certain light types. <br> <br>DirectionalLight(LPDIRECT3D2 lpD3D, <br>                 const D3DVECTOR&amp; color, <br>                 const D3DVECTOR&amp; direction); <br>ParallelPointLight(LPDIRECT3D2 lpD3D, <br>                   const D3DVECTOR&amp; color, <br>                   const D3DVECTOR&amp; position); <br>PointLight(LPDIRECT3D2 lpD3D, <br>           const D3DVECTOR&amp; color, <br>           const D3DVECTOR&amp; position); <br>SpotLight(LPDIRECT3D2 lpD3D, <br>          const D3DVECTOR&amp; color, <br>          const D3DVECTOR&amp; position, <br>          const D3DVECTOR&amp; direction, <br>          const float umbra_angle, <br>          const float penumbra_angle); <br> <br>1c. Material management <br> <br>        The Material class simplifies dealing with Direct3D <br>materials. <br> <br>Data Members <br> <br>        D3DMATERIAL     Mat; <br>                Structure describing the material. <br> <br>        D3DMATERIALHANDLE hMat; <br>                The material's handle. <br> <br>LPDIRECT3DMATERIAL2 lpMat; <br>                Pointer to the material's interface. <br> <br>        int             changed; <br>                Dirty bit for the material. <br> <br>Member Functions <br> <br>HRESULT SetAsCurrent(LPDIRECT3DDEVICE2 lpDev); <br>        Sets the material as current to the device. <br> <br>HRESULT SetAsBackground(LPDIRECT3DDEVICE2 lpDev); <br>        Sets the material as the current background on the device. <br> <br>HRESULT Set(void); <br>        Forces the material to be updated using SetMaterial. <br> <br>The Set*/Get* functions enable the application to update the various <br>material properties with single function calls. The Set* functions <br>set the dirty bit so the material will be updated when necessary. <br>        SetDiffuse/GetDiffuse <br>        SetAlpha/GetAlpha <br>        SetAmbient/GetAmbient <br>        SetEmissive/GetEmissive <br>        SetSpecular/GetSpecular <br>        SetPower/GetPower <br>        SetRampSize/GetRampSize <br>        SetTextureHandle/GetTextureHandle <br> <br>See boids and pplane for examples of how to use the Material class. <br> <br>2. D3DTexture <br> <br>        d3dtex.h and d3dtex.cpp implement the D3DTexture class, which <br>simplifies texture managment.  D3DTexture's features are as follows: <br>        - Keeps a system memory copy of the texture to restore the surface. <br>        - Enables loading textures from bitmaps <br>        - Uses DirectDraw's GetDC function to access GDI's support <br>          for color-converting blts to load the textures. <br>          Note, D3DTexture does not currently support textures with <br>          alpha because GDI does not support bitmaps with alpha. <br> <br>        See boids and flip3d for examples of how to use D3DTexture. <br> <br> <br>3.  GetDXVersion <br> <br>    getdxver.cpp implements sample code showing how to detect which <br>version of DirectX is currently running (1.0, 2.0, ..., 5.0). <br> <br>        See boids and flip3d for examples of how to use GetDXVersion. <br>        <br> <br>4.1 RMMain <br> <br>Uses D3DRM to setup a window for rendering, ask the sample to build <br>it's scene and then renders the scene. <br> <br>rmmain.cpp <br> <br>Main source file which includes WinMain and message handler.  Creates <br>D3DRM, uses it to setup the window for rendering and then asks the <br>sample to build it's scene. <br> <br>rmmain.h <br> <br>Header for rmmain.cpp. <br> <br>rmmain.rc <br> <br>Resource file for rmmain.cpp. <br> <br>rmerror.cpp <br> <br>D3DRM error code to string and error message box. <br> <br>rmerror.h <br> <br>Header for rmerror.cpp. <br> <br>rmdemo.h <br> <br>Because the samples do not create and manage all DirectDraw and <br>Direct3D objects themselves, the source is much simpler than the <br>immediate mode samples, but they can only run in a window. <br>Optionally, the D3DRM samples can be linked to D3DApp via another <br>harness.  This will allow them to enter fullscreen modes.  Fly is <br>linked to these files. <br> <br>rmfull.cpp <br> <br>Main source file which includes WinMain and message handler.  Uses <br>D3DApp to setup rendering. <br> <br>rmfull.h <br> <br>Header for rmfull.cpp. <br> <br>rmfull.rc <br> <br>Defines menus and keyboard accelerator. <br> <br>rmfullrc.h <br> <br>Header for rmfull.rc. <br> <br>rmstats.cpp <br> <br>Calculates and displays frame rate and other information. </code></pre>
<p>&nbsp;</p></body>
</HTML>

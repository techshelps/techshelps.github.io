<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LBPRINTF.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3242"></a>LBPRINTF.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright 1995 - 1998 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       lbprintf.c <br> *  Content:    Routines to display text in a listbox <br> * <br> ***************************************************************************/ <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;ddraw.h&gt; <br>#include "lbprintf.h" <br> <br>static HWNDhWndListBox; <br>static DWORDdwPos; <br> <br>/* <br> * LBCreate <br> * <br> * Create a list box on a given parent window <br> */ <br>void LBCreate( HWND hWnd, DWORD pos ) <br>{ <br>    hWndListBox = CreateWindow( <br>"listbox",// class <br>NULL,// caption <br>WS_BORDER | WS_CHILDWINDOW | WS_VSCROLL | LBS_NOINTEGRALHEIGHT,// style <br>0,// x pos <br>0,// y pos <br>0,// width <br>0,// height <br>hWnd,// parent window <br>NULL,// menu  <br>GetWindowInstance( hWnd ), // instance <br>NULL// parms <br>); <br> <br>    ShowWindow( hWndListBox, SW_NORMAL ); <br>    UpdateWindow( hWndListBox ); <br> <br>    dwPos = pos; <br>    if( dwPos &gt; 100 ) <br>    { <br>dwPos = 100; <br>    } <br> <br>} /* LBCreate */ <br> <br>/* <br> * LBSize <br> * <br> * New size for the listbox.   Should be called whenever the parent window <br> * is resized <br> */ <br>void LBSize( DWORD width, DWORD height ) <br>{ <br>    DWORDy; <br> <br>    y = (height*(100-dwPos))/100; <br>    MoveWindow( hWndListBox, 0, y, width-1, height-y-1, TRUE ); <br> <br>} /* LBSize */ <br> <br>/* <br> * LBClear <br> * <br> * Clear the listbox <br> */ <br>void LBClear( void ) <br>{ <br>    SendMessage( hWndListBox, LB_RESETCONTENT, 0, 0L ); <br> <br>} /* LBClear */ <br> <br>/* <br> * LBPrintf <br> */ <br>void __cdecl LBPrintf( LPSTR fmt, ... ) <br>{ <br>    charbuff[512]; <br>    UINTsel; <br> <br>    va_list marker; <br>    va_start (marker,fmt); <br> <br>    wvsprintf( buff, fmt, marker ); <br>    SendMessage( hWndListBox, LB_ADDSTRING, 0, (LONG) (LPSTR) buff ); <br>    sel = (UINT) SendMessage( hWndListBox, LB_GETCOUNT, 0, 0L ); <br>    if( sel != LB_ERR ) <br>    { <br>SendMessage( hWndListBox, LB_SETCURSEL, sel-1, 0L ); <br>    } <br> <br>} /* LBPrintf */ <br> <br>typedef struct <br>{ <br>    HRESULTrval; <br>    LPSTRstr; <br>} ERRLIST; <br> <br>static ERRLIST elErrors[] = <br>{ <br>    { DD_OK, "DD_OK" }, <br>    { DDERR_ALREADYINITIALIZED, "DDERR_ALREADYINITIALIZED" }, <br>    { DDERR_CANNOTATTACHSURFACE, "DDERR_CANNOTATTACHSURFACE" }, <br>    { DDERR_CANNOTDETACHSURFACE, "DDERR_CANNOTDETACHSURFACE" }, <br>    { DDERR_CURRENTLYNOTAVAIL, "DDERR_CURRENTLYNOTAVAIL" }, <br>    { DDERR_EXCEPTION, "DDERR_EXCEPTION" }, <br>    { DDERR_GENERIC, "DDERR_GENERIC" }, <br>    { DDERR_HEIGHTALIGN, "DDERR_HEIGHTALIGN" }, <br>    { DDERR_INCOMPATIBLEPRIMARY, "DDERR_INCOMPATIBLEPRIMARY" }, <br>    { DDERR_INVALIDCAPS, "DDERR_INVALIDCAPS" }, <br>    { DDERR_INVALIDCLIPLIST, "DDERR_INVALIDCLIPLIST" }, <br>    { DDERR_INVALIDMODE, "DDERR_INVALIDMODE" }, <br>    { DDERR_INVALIDOBJECT, "DDERR_INVALIDOBJECT" }, <br>    { DDERR_INVALIDPARAMS, "DDERR_INVALIDPARAMS" }, <br>    { DDERR_INVALIDPIXELFORMAT, "DDERR_INVALIDPIXELFORMAT" }, <br>    { DDERR_INVALIDRECT, "DDERR_INVALIDRECT" }, <br>    { DDERR_LOCKEDSURFACES, "DDERR_LOCKEDSURFACES" }, <br>    { DDERR_NO3D, "DDERR_NO3D" }, <br>    { DDERR_NOALPHAHW, "DDERR_NOALPHAHW" }, <br>    { DDERR_NOCLIPLIST, "DDERR_NOCLIPLIST" }, <br>    { DDERR_NOCOLORCONVHW, "DDERR_NOCOLORCONVHW" }, <br>    { DDERR_NOCOOPERATIVELEVELSET, "DDERR_NOCOOPERATIVELEVELSET" }, <br>    { DDERR_NOCOLORKEY, "DDERR_NOCOLORKEY" }, <br>    { DDERR_NOCOLORKEYHW, "DDERR_NOCOLORKEYHW" }, <br>    { DDERR_NOEXCLUSIVEMODE, "DDERR_NOEXCLUSIVEMODE" }, <br>    { DDERR_NOFLIPHW, "DDERR_NOFLIPHW" }, <br>    { DDERR_NOGDI, "DDERR_NOGDI" }, <br>    { DDERR_NOMIRRORHW, "DDERR_NOMIRRORHW" }, <br>    { DDERR_NOTFOUND, "DDERR_NOTFOUND" }, <br>    { DDERR_NOOVERLAYHW, "DDERR_NOOVERLAYHW" }, <br>    { DDERR_NORASTEROPHW, "DDERR_NORASTEROPHW" }, <br>    { DDERR_NOROTATIONHW, "DDERR_NOROTATIONHW" }, <br>    { DDERR_NOSTRETCHHW, "DDERR_NOSTRETCHHW" }, <br>    { DDERR_NOT4BITCOLOR, "DDERR_NOT4BITCOLOR" }, <br>    { DDERR_NOT4BITCOLORINDEX, "DDERR_NOT4BITCOLORINDEX" }, <br>    { DDERR_NOT8BITCOLOR, "DDERR_NOT8BITCOLOR" }, <br>    { DDERR_NOTEXTUREHW, "DDERR_NOTEXTUREHW" }, <br>    { DDERR_NOVSYNCHW, "DDERR_NOVSYNCHW" }, <br>    { DDERR_NOZBUFFERHW, "DDERR_NOZBUFFERHW" }, <br>    { DDERR_NOZOVERLAYHW, "DDERR_NOZOVERLAYHW" }, <br>    { DDERR_OUTOFCAPS, "DDERR_OUTOFCAPS" }, <br>    { DDERR_OUTOFMEMORY, "DDERR_OUTOFMEMORY" }, <br>    { DDERR_OUTOFVIDEOMEMORY, "DDERR_OUTOFVIDEOMEMORY" }, <br>    { DDERR_OVERLAYCANTCLIP, "DDERR_OVERLAYCANTCLIP" }, <br>    { DDERR_OVERLAYCOLORKEYONLYONEACTIVE, "DDERR_OVERLAYCOLORKEYONLYONEACTIVE" }, <br>    { DDERR_PALETTEBUSY, "DDERR_PALETTEBUSY" }, <br>    { DDERR_COLORKEYNOTSET, "DDERR_COLORKEYNOTSET" }, <br>    { DDERR_SURFACEALREADYATTACHED, "DDERR_SURFACEALREADYATTACHED" }, <br>    { DDERR_SURFACEALREADYDEPENDENT, "DDERR_SURFACEALREADYDEPENDENT" }, <br>    { DDERR_SURFACEBUSY, "DDERR_SURFACEBUSY" }, <br>    { DDERR_SURFACEISOBSCURED, "DDERR_SURFACEISOBSCURED" }, <br>    { DDERR_SURFACELOST, "DDERR_SURFACELOST" }, <br>    { DDERR_SURFACENOTATTACHED, "DDERR_SURFACENOTATTACHED" }, <br>    { DDERR_TOOBIGHEIGHT, "DDERR_TOOBIGHEIGHT" }, <br>    { DDERR_TOOBIGSIZE, "DDERR_TOOBIGSIZE" }, <br>    { DDERR_TOOBIGWIDTH, "DDERR_TOOBIGWIDTH" }, <br>    { DDERR_UNSUPPORTED, "DDERR_UNSUPPORTED" }, <br>    { DDERR_UNSUPPORTEDFORMAT, "DDERR_UNSUPPORTEDFORMAT" }, <br>    { DDERR_UNSUPPORTEDMASK, "DDERR_UNSUPPORTEDMASK" }, <br>    { DDERR_VERTICALBLANKINPROGRESS, "DDERR_VERTICALBLANKINPROGRESS" }, <br>    { DDERR_WASSTILLDRAWING, "DDERR_WASSTILLDRAWING" }, <br>    { DDERR_XALIGN, "DDERR_XALIGN" }, <br>    { DDERR_INVALIDDIRECTDRAWGUID, "DDERR_INVALIDDIRECTDRAWGUID" }, <br>    { DDERR_DIRECTDRAWALREADYCREATED, "DDERR_DIRECTDRAWALREADYCREATED" }, <br>    { DDERR_NODIRECTDRAWHW, "DDERR_NODIRECTDRAWHW" }, <br>    { DDERR_PRIMARYSURFACEALREADYEXISTS, "DDERR_PRIMARYSURFACEALREADYEXISTS" }, <br>    { DDERR_NOEMULATION, "DDERR_NOEMULATION" }, <br>    { DDERR_REGIONTOOSMALL, "DDERR_REGIONTOOSMALL" }, <br>    { DDERR_CLIPPERISUSINGHWND, "DDERR_CLIPPERISUSINGHWND" }, <br>    { DDERR_NOCLIPPERATTACHED, "DDERR_NOCLIPPERATTACHED" }, <br>    { DDERR_NOHWND, "DDERR_NOHWND" }, <br>    { DDERR_HWNDSUBCLASSED, "DDERR_HWNDSUBCLASSED" }, <br>    { DDERR_HWNDALREADYSET, "DDERR_HWNDALREADYSET" }, <br>    { DDERR_NOPALETTEATTACHED, "DDERR_NOPALETTEATTACHED" }, <br>    { DDERR_NOPALETTEHW, "DDERR_NOPALETTEHW" }, <br>    { DDERR_BLTFASTCANTCLIP, "DDERR_BLTFASTCANTCLIP" }, <br>    { DDERR_NOBLTHW, "DDERR_NOBLTHW" }, <br>    { DDERR_NODDROPSHW, "DDERR_NODDROPSHW" }, <br>    { DDERR_OVERLAYNOTVISIBLE, "DDERR_OVERLAYNOTVISIBLE" }, <br>    { DDERR_NOOVERLAYDEST, "DDERR_NOOVERLAYDEST" }, <br>    { DDERR_INVALIDPOSITION, "DDERR_INVALIDPOSITION" }, <br>    { DDERR_NOTAOVERLAYSURFACE, "DDERR_NOTAOVERLAYSURFACE" }, <br>    { DDERR_EXCLUSIVEMODEALREADYSET, "DDERR_EXCLUSIVEMODEALREADYSET" }, <br>    { DDERR_NOTFLIPPABLE, "DDERR_NOTFLIPPABLE" }, <br>    { DDERR_CANTDUPLICATE, "DDERR_CANTDUPLICATE" }, <br>    { DDERR_NOTLOCKED, "DDERR_NOTLOCKED" }, <br>    { DDERR_CANTCREATEDC, "DDERR_CANTCREATEDC" }, <br>    { DDERR_NODC, "DDERR_NODC" }, <br>    { DDERR_WRONGMODE, "DDERR_WRONGMODE" }, <br>    { DDERR_IMPLICITLYCREATED, "DDERR_IMPLICITLYCREATED" }, <br>}; <br> <br>/* <br> * getErrorString <br> */ <br>static LPSTR getErrorString( HRESULT ddrval ) <br>{ <br>    inti; <br> <br>    for( i=0;i&lt;sizeof( elErrors )/sizeof( elErrors[0] );i++ ) <br>    { <br>if( ddrval == elErrors[i].rval ) <br>{ <br>    return elErrors[i].str; <br>} <br>    } <br>    return "Unknown Error Code"; <br> <br> <br>} /* getErrorString */ <br> <br>/* <br> * LBPrintfDDRC <br> * <br> * Display a DirectDraw error code in human readable form <br> */ <br>void __cdecl LBPrintfDDRC( HRESULT ddrval, LPSTR fmt, ... ) <br>{ <br>    charbuff[512]; <br> <br>    va_list marker; <br>    va_start (marker,fmt); <br> <br>    wvsprintf( buff, fmt, marker ); <br>    LBPrintf( "%s, rc=%ld (0x%08lx:%s)", buff, LOWORD( ddrval ), <br>ddrval, getErrorString( ddrval ) ); <br> <br>} /* LBPrintfDDRC */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

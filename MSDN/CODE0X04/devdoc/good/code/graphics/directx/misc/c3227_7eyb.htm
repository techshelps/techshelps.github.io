<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DDMM.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3233"></a>DDMM.CPP</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright 1995 - 1998 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       ddmm.cpp <br> *  Content:    Routines for using DirectDraw on a multimonitor system <br> * <br> ***************************************************************************/ <br> <br>#define WIN32_LEAN_AND_MEAN <br>#define WINVER 0x0400 <br>#define _WIN32_WINDOWS 0x0400 <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;ddraw.h&gt; <br>#include "ddmm.h" <br> <br>#define COMPILE_MULTIMON_STUBS <br>#include "multimon.h" <br> <br>/* <br> *  OneMonitorCallback <br> */ <br>BOOL CALLBACK OneMonitorCallback(HMONITOR hMonitor, HDC hdc, LPRECT prc, LPARAM lParam) <br>{ <br>    HMONITOR *phMonitorFound = (HMONITOR *)lParam; <br> <br>    if (*phMonitorFound == 0) <br>        *phMonitorFound = hMonitor; <br>    else <br>        *phMonitorFound = (HMONITOR) INVALID_HANDLE_VALUE; <br> <br>    return TRUE; <br>} <br> <br>/* <br> *  OneMonitorFromWindow <br> * <br> *  similar to the Win32 function MonitorFromWindow, except <br> *  only returns a HMONITOR if a window is on a single monitor. <br> * <br> *  if the window handle is NULL, the primary monitor is returned <br> *  if the window is not visible returns NULL <br> *  if the window is on a single monitor returns its HMONITOR <br> *  if the window is on more than on monitor returns INVALID_HANDLE_VALUE <br> */ <br>HMONITOR OneMonitorFromWindow(HWND hwnd) <br>{ <br>    HMONITOR hMonitor = NULL; <br>    RECT rc; <br> <br>    if (hwnd) <br>    { <br>        GetClientRect(hwnd, &amp;rc); <br>        ClientToScreen(hwnd, (LPPOINT)&amp;rc); <br>        ClientToScreen(hwnd, (LPPOINT)&amp;rc+1); <br>    } <br>    else <br>    { <br>        //SetRect(&amp;rc,0,0,1,1); <br>        SetRectEmpty(&amp;rc); <br>    } <br> <br>    EnumDisplayMonitors(NULL, &amp;rc, OneMonitorCallback, (LPARAM)&amp;hMonitor); <br>    return hMonitor; <br>} <br> <br>/* <br> * FindDeviceCallback <br> */ <br>typedef struct { <br>    LPSTR   szDevice; <br>    GUID*   lpGUID; <br>    GUID    GUID; <br>    BOOL    fFound; <br>}   FindDeviceData; <br> <br>BOOL CALLBACK FindDeviceCallback(GUID* lpGUID, LPSTR szName, LPSTR szDevice, LPVOID lParam) <br>{ <br>    FindDeviceData *p = (FindDeviceData*)lParam; <br> <br>    if (lstrcmpi(p-&gt;szDevice, szDevice) == 0) <br>    { <br>if (lpGUID) <br>{ <br>    p-&gt;GUID = *lpGUID; <br>    p-&gt;lpGUID = &amp;p-&gt;GUID; <br>} <br>else <br>{ <br>    p-&gt;lpGUID = NULL; <br>} <br>p-&gt;fFound = TRUE; <br>return FALSE; <br>    } <br>    return TRUE; <br>} <br> <br>/* <br> * DirectDrawCreateFromDevice <br> * <br> * create a DirectDraw object for a particular device <br> */ <br>IDirectDraw * DirectDrawCreateFromDevice(LPSTR szDevice) <br>{ <br>    IDirectDraw*    pdd = NULL; <br>    FindDeviceData  find; <br> <br>    find.szDevice = szDevice; <br>    find.fFound   = FALSE; <br>    DirectDrawEnumerate(FindDeviceCallback, (LPVOID)&amp;find); <br> <br>    if (find.fFound) <br>    { <br>        DirectDrawCreate(find.lpGUID, &amp;pdd, NULL); <br>    } <br> <br>    return pdd; <br>} <br> <br>/* <br> * DirectDrawDeviceFromWindow <br> * <br> * find the direct draw device that should be used for a given window <br> * <br> * the return code is a "unique id" for the device, it should be used <br> * to determine when your window moves from one device to another. <br> * <br> *      case WM_MOVE: <br> *          if (MyDevice != DirectDrawDeviceFromWindow(hwnd,NULL,NULL)) <br> *          { <br> *              // handle moving to a new device. <br> *          } <br> * <br> */ <br>int DirectDrawDeviceFromWindow(HWND hwnd, LPSTR szDevice, RECT *prc) <br>{ <br>    HMONITOR hMonitor; <br> <br>    if (GetSystemMetrics(SM_CMONITORS) &lt;= 1) <br>    { <br>        if (prc) SetRect(prc,0,0,GetSystemMetrics(SM_CXSCREEN),GetSystemMetrics(SM_CYSCREEN)); <br>        if (szDevice) lstrcpy(szDevice, "DISPLAY"); <br>        return -1; <br>    } <br> <br>    hMonitor = OneMonitorFromWindow(hwnd); <br> <br>    if (hMonitor == NULL || hMonitor == INVALID_HANDLE_VALUE) <br>    { <br>if (prc) SetRectEmpty(prc); <br>if (szDevice) *szDevice=0; <br>        return 0; <br>    } <br>    else <br>    { <br>if (prc != NULL || szDevice != NULL) <br>{ <br>    MONITORINFOEX mi; <br>    mi.cbSize = sizeof(mi); <br>    GetMonitorInfo(hMonitor, &amp;mi); <br>    if (prc) *prc = mi.rcMonitor; <br>    if (szDevice) lstrcpy(szDevice, mi.szDevice); <br>} <br>        return (int)hMonitor; <br>    } <br>} <br> <br>/* <br> * DirectDrawCreateFromWindow <br> */ <br>IDirectDraw * DirectDrawCreateFromWindow(HWND hwnd) <br>{ <br>    IDirectDraw *pdd; <br>    char szDevice[80]; <br> <br>    // <br>    // if there is only one monitor, just create a DD object! <br>    // <br>    if (GetSystemMetrics(SM_CMONITORS) &lt;= 1) <br>    { <br>DirectDrawCreate(NULL, &amp;pdd, NULL); <br>        return pdd; <br>    } <br> <br>    // <br>    // find the direct draw device that the window is on <br>    // <br>    if (DirectDrawDeviceFromWindow(hwnd, szDevice, NULL)) <br>    { <br>// <br>// the window is only on one device, <br>// do a create for only that device <br>// <br>        return DirectDrawCreateFromDevice(szDevice); <br>    } <br>    else <br>    { <br>// <br>// the window is off the screen or spans two <br>// monitors, do a DirectDrawCreate(NULL) <br>        // <br>        DirectDrawCreate(NULL, &amp;pdd, NULL); <br>return pdd; <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DSUTIL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3240"></a>DSUTIL.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       dsutil.cpp <br> *  Content:    Routines for dealing with sounds from resources <br> * <br> * <br> ***************************************************************************/ <br> <br>#ifdef __cplusplus <br>extern "C" { <br>#endif <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// DSLoadSoundBuffer    Loads an IDirectSoundBuffer from a Win32 resource in <br>//                      the current application. <br>// <br>// Params: <br>//  pDS         -- Pointer to an IDirectSound that will be used to create <br>//                 the buffer. <br>// <br>//  lpName      -- Name of WAV resource to load the data from.  Can be a <br>//                 resource id specified using the MAKEINTRESOURCE macro. <br>// <br>// Returns an IDirectSoundBuffer containing the wave data or NULL on error. <br>// <br>// example: <br>//  in the application's resource script (.RC file) <br>//      Turtle WAV turtle.wav <br>// <br>//  some code in the application: <br>//      IDirectSoundBuffer *pDSB = DSLoadSoundBuffer(pDS, "Turtle"); <br>// <br>//      if (pDSB) <br>//      { <br>//          IDirectSoundBuffer_Play(pDSB, 0, 0, DSBPLAY_TOEND); <br>//          /* ... */ <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>IDirectSoundBuffer *DSLoadSoundBuffer(IDirectSound *pDS, LPCTSTR lpName); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// DSReloadSoundBuffer  Reloads an IDirectSoundBuffer from a Win32 resource in <br>//                      the current application. normally used to handle <br>//                      a DSERR_BUFFERLOST error. <br>// Params: <br>//  pDSB        -- Pointer to an IDirectSoundBuffer to be reloaded. <br>// <br>//  lpName      -- Name of WAV resource to load the data from.  Can be a <br>//                 resource id specified using the MAKEINTRESOURCE macro. <br>// <br>// Returns a BOOL indicating whether the buffer was successfully reloaded. <br>// <br>// example: <br>//  in the application's resource script (.RC file) <br>//      Turtle WAV turtle.wav <br>// <br>//  some code in the application: <br>//  TryAgain: <br>//      HRESULT hres = IDirectSoundBuffer_Play(pDSB, 0, 0, DSBPLAY_TOEND); <br>// <br>//      if (FAILED(hres)) <br>//      { <br>//          if ((hres == DSERR_BUFFERLOST) &amp;&amp; <br>//              DSReloadSoundBuffer(pDSB, "Turtle")) <br>//          { <br>//              goto TryAgain; <br>//          } <br>//          /* deal with other errors... */ <br>//      } <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>BOOL DSReloadSoundBuffer(IDirectSoundBuffer *pDSB, LPCTSTR lpName); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// DSGetWaveResource    Finds a WAV resource in a Win32 module. <br>// <br>// Params: <br>//  hModule     -- Win32 module handle of module containing WAV resource. <br>//                 Pass NULL to indicate current application. <br>// <br>//  lpName      -- Name of WAV resource to load the data from.  Can be a <br>//                 resource id specified using the MAKEINTRESOURCE macro. <br>// <br>//  ppWaveHeader-- Optional pointer to WAVEFORMATEX * to receive a pointer to <br>//                 the WAVEFORMATEX header in the specified WAV resource. <br>//                 Pass NULL if not required. <br>// <br>//  ppbWaveData -- Optional pointer to BYTE * to receive a pointer to the <br>//                 waveform data in the specified WAV resource.  Pass NULL if <br>//                 not required. <br>// <br>//  pdwWaveSize -- Optional pointer to DWORD to receive the size of the <br>//                 waveform data in the specified WAV resource.  Pass NULL if <br>//                 not required. <br>// <br>// Returns a BOOL indicating whether a valid WAV resource was found. <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>BOOL DSGetWaveResource(HMODULE hModule, LPCTSTR lpName, <br>    WAVEFORMATEX **ppWaveHeader, BYTE **ppbWaveData, DWORD *pdwWaveSize); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// HSNDOBJ             Handle to a SNDOBJ object. <br>// <br>//  SNDOBJs are implemented in dsutil as an example layer built on top <br>//      of DirectSound. <br>// <br>//      A SNDOBJ is generally used to manage individual <br>//      sounds which need to be played multiple times concurrently.  A <br>//      SNDOBJ represents a queue of IDirectSoundBuffer objects which <br>//      all refer to the same buffer memory. <br>// <br>//      A SNDOBJ also automatically reloads the sound resource when <br>//      DirectSound returns a DSERR_BUFFERLOST <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>#ifndef _HSNDOBJ_DEFINED <br>DECLARE_HANDLE32(HSNDOBJ); <br>#endif <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// SndObjCreate     Loads a SNDOBJ from a Win32 resource in <br>//    the current application. <br>// <br>// Params: <br>//  pDS         -- Pointer to an IDirectSound that will be used to create <br>//                 the SNDOBJ. <br>// <br>//  lpName      -- Name of WAV resource to load the data from.  Can be a <br>//                 resource id specified using the MAKEINTRESOURCE macro. <br>// <br>//  iConcurrent -- Integer representing the number of concurrent playbacks of <br>//                 to plan for.  Attempts to play more than this number will <br>//                 succeed but will restart the least recently played buffer <br>//                 even if it is not finished playing yet. <br>// <br>// Returns an HSNDOBJ or NULL on error. <br>// <br>// NOTES: <br>//      SNDOBJs automatically restore and reload themselves as required. <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>HSNDOBJ SndObjCreate(IDirectSound *pDS, LPCTSTR lpName, int iConcurrent); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// SndObjDestroy  Frees a SNDOBJ and releases all of its buffers. <br>// <br>// Params: <br>//  hSO         -- Handle to a SNDOBJ to free. <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>void SndObjDestroy(HSNDOBJ hSO); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// SndObjPlayPlays a buffer in a SNDOBJ. <br>// <br>// Params: <br>//  hSO         -- Handle to a SNDOBJ to play a buffer from. <br>// <br>//  dwPlayFlags -- Flags to pass to IDirectSoundBuffer::Play.  It is not <br>//                 legal to play an SndObj which has more than one buffer <br>//                 with the DSBPLAY_LOOPING flag.  Pass 0 to stop playback. <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>BOOL SndObjPlay(HSNDOBJ hSO, DWORD dwPlayFlags); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// SndObjStopStops one or more buffers in a SNDOBJ. <br>// <br>// Params: <br>//  hSO         -- Handle to a SNDOBJ to play a buffer from. <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>BOOL SndObjStop(HSNDOBJ hSO); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// SndObjGetFreeBuffer    returns one of the cloned buffers that is <br>//    not currently playing <br>// <br>// Params: <br>//  hSO -- Handle to a SNDOBJ <br>// <br>// NOTES: <br>//  This function is provided so that callers can set things like pan etc <br>//  before playing the buffer. <br>// <br>// EXAMPLE: <br>//  ... <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>IDirectSoundBuffer *SndObjGetFreeBuffer(HSNDOBJ hSO); <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// helper routines <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br> <br>BOOL DSFillSoundBuffer(IDirectSoundBuffer *pDSB, BYTE *pbWaveData, DWORD dwWaveSize); <br>BOOL DSParseWaveResource(void *pvRes, WAVEFORMATEX **ppWaveHeader, BYTE **ppbWaveData, DWORD *pdwWaveSize); <br> <br>#ifdef __cplusplus <br>} <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GLOBE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3217"></a>GLOBE.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: globe.c <br> * <br> ***************************************************************************/ <br> <br>#include "rmdemo.h" <br> <br>D3DRMRENDERQUALITY quality = D3DRMRENDER_GOURAUD; <br> <br>LPDIRECT3DRMANIMATION anim; <br>int motion_points = 17; <br> <br>D3DVECTOR motion[17] = <br>{{-D3DVAL(14), D3DVAL(4), D3DVAL(45)}, <br>{D3DVAL(9), -D3DVAL(3), D3DVAL(36)}, <br>{D3DVAL(5), D3DVAL(0), D3DVAL(5)}, <br>{-D3DVAL(5), D3DVAL(8), D3DVAL(25)}, <br>{D3DVAL(0), D3DVAL(3), D3DVAL(20)}, <br>{-D3DVAL(3), -D3DVAL(4), D3DVAL(10)}, <br>{D3DVAL(8), D3DVAL(10), D3DVAL(15)}, <br>{D3DVAL(16), D3DVAL(0), D3DVAL(30)}, <br>{D3DVAL(10), -D3DVAL(4), D3DVAL(42)}, <br>{-D3DVAL(15), D3DVAL(0), D3DVAL(37)}, <br>{-D3DVAL(5), -D3DVAL(7), D3DVAL(15)}, <br>{D3DVAL(5), D3DVAL(5), D3DVAL(20)}, <br>{D3DVAL(5), D3DVAL(10), D3DVAL(30)}, <br>{D3DVAL(13), D3DVAL(8), D3DVAL(50)}, <br>{D3DVAL(0), D3DVAL(8), D3DVAL(25)}, <br>{D3DVAL(0), D3DVAL(0), D3DVAL(20)}, <br>{-D3DVAL(14), D3DVAL(4), D3DVAL(45)} <br>}; <br> <br>static void CDECL cleanupPath(LPDIRECT3DRMOBJECT obj, void* arg) <br>{ <br>    anim-&gt;lpVtbl-&gt;Release(anim); <br>} <br> <br>static void CDECL moveCamera(LPDIRECT3DRMFRAME frame, void *arg, D3DVALUE delta) <br>{ <br>    static D3DVALUE t = D3DVAL(0.0); <br>    LPDIRECT3DRMFRAME world_frame = (LPDIRECT3DRMFRAME) arg; <br>    LPDIRECT3DRMFRAME scene; <br> <br>    frame-&gt;lpVtbl-&gt;GetScene(frame, &amp;scene); <br> <br>    t += D3DVAL(0.08); <br>    anim-&gt;lpVtbl-&gt;SetFrame(anim, frame); <br>    anim-&gt;lpVtbl-&gt;SetTime(anim, t); <br> <br>    frame-&gt;lpVtbl-&gt;LookAt(frame, world_frame, scene, D3DRMCONSTRAIN_Z); <br> <br>    scene-&gt;lpVtbl-&gt;Release(scene); <br>} <br> <br>/* <br> * world_scene <br> */ <br>BOOL <br>run_world_scene(LPDIRECT3DRMFRAME scene, LPDIRECT3DRMFRAME camera) <br>{ <br>    LPDIRECT3DRMFRAME light1 = NULL; <br>    LPDIRECT3DRMFRAME world_frame = NULL; <br>    LPDIRECT3DRMLIGHT l1 = NULL; <br>    LPDIRECT3DRMLIGHT l2 = NULL; <br>    LPDIRECT3DRMTEXTURE tex = NULL; <br>    LPDIRECT3DRMWRAP wrap = NULL; <br>    LPDIRECT3DRMMESHBUILDER sphere3_builder = NULL; <br>    LPDIRECT3DRMMATERIAL mat = NULL; <br>    HRESULT rval; <br>    D3DRMBOX box; <br>    D3DVALUE miny, maxy, height; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;light1))) <br>goto generic_error; <br>    if (FAILED(light1-&gt;lpVtbl-&gt;SetPosition(light1, scene, D3DVAL(2), D3DVAL(0.0), D3DVAL(22)))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_DIRECTIONAL, D3DVAL(0.9), <br>                                  D3DVAL(0.9), D3DVAL(0.9), &amp;l1))) <br>  goto generic_error; <br>    if (FAILED(light1-&gt;lpVtbl-&gt;AddLight(light1, l1))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_AMBIENT, D3DVAL(0.1), <br>                                  D3DVAL(0.1), D3DVAL(0.1), &amp;l2))) <br>  goto generic_error; <br>    if (FAILED(scene-&gt;lpVtbl-&gt;AddLight(scene, l2))) <br>goto generic_error; <br>    if (FAILED(camera-&gt;lpVtbl-&gt;SetPosition(camera, scene, D3DVAL(0.0), D3DVAL(0.0), D3DVAL(0.0)))) <br>goto generic_error; <br>    if (FAILED(camera-&gt;lpVtbl-&gt;SetOrientation(camera, scene, D3DVAL(0.0), D3DVAL(0.0), D3DVAL(1), D3DVAL(0.0), <br>D3DVAL(1), D3DVAL(0.0)))) <br>goto generic_error; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;world_frame))) <br>goto generic_error; <br>    if (FAILED(world_frame-&gt;lpVtbl-&gt;SetPosition(world_frame, scene, D3DVAL(0.0), D3DVAL(0.0), D3DVAL(30)))) <br>goto generic_error; <br>    if (FAILED(world_frame-&gt;lpVtbl-&gt;SetOrientation(world_frame, scene, D3DVAL(0.0), D3DVAL(0.0), D3DVAL(1), <br>                                        D3DVAL(0.0), D3DVAL(1), D3DVAL(0.0)))) <br>goto generic_error; <br>    if (FAILED(world_frame-&gt;lpVtbl-&gt;SetRotation(world_frame, scene, D3DVAL(0.03),  <br>                                     D3DVAL(0.1), D3DVAL(0.0), D3DVAL(0.1)))) <br>     goto generic_error; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;sphere3_builder))) <br>goto generic_error; <br>    rval = sphere3_builder-&gt;lpVtbl-&gt;Load(sphere3_builder, "sphere3.x", <br>    NULL, D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>Msg("Failed to load sphere3.x.\n%s", D3DRMErrorToString(rval)); <br>goto ret_with_error; <br>    } <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMaterial(lpD3DRM, D3DVAL(20.0), &amp;mat))) <br>goto generic_error; <br>    if (FAILED(sphere3_builder-&gt;lpVtbl-&gt;SetMaterial(sphere3_builder, mat))) <br>goto generic_error; <br>    mat-&gt;lpVtbl-&gt;Release(mat); mat = NULL; <br>    if (FAILED(sphere3_builder-&gt;lpVtbl-&gt;Scale(sphere3_builder, <br>       D3DVAL(2), D3DVAL(2), D3DVAL(2)))) <br>   goto generic_error; <br> <br>    if (FAILED(sphere3_builder-&gt;lpVtbl-&gt;SetColorRGB(sphere3_builder, D3DVAL(1), D3DVAL(1), D3DVAL(1)))) <br>goto generic_error; <br>    if (FAILED(sphere3_builder-&gt;lpVtbl-&gt;GetBox(sphere3_builder, &amp;box))) <br>goto generic_error; <br>    maxy = box.max.y; <br>    miny = box.min.y; <br>    height = maxy - miny; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateWrap <br>(lpD3DRM, D3DRMWRAP_CYLINDER, NULL, <br> D3DVAL(0.0), D3DVAL(0.0), D3DVAL(0.0), <br> D3DVAL(0.0), D3DVAL(1.0), D3DVAL(0.0), <br> D3DVAL(0.0), D3DVAL(0.0), D3DVAL(1.0), <br> D3DVAL(0.0), D3DDivide(miny, height), <br> D3DVAL(1.0), D3DDivide(-D3DVAL(1.0), height), <br> &amp;wrap <br>))) <br>goto generic_error; <br>    if (FAILED(wrap-&gt;lpVtbl-&gt;Apply(wrap, (LPDIRECT3DRMOBJECT) sphere3_builder))) <br>goto generic_error; <br> <br>    rval = lpD3DRM-&gt;lpVtbl-&gt;LoadTexture(lpD3DRM, "tex1.ppm", &amp;tex); <br>    if (rval != D3DRM_OK) { <br>Msg("Failed to load tex1.ppm\n%s", D3DRMErrorToString(rval)); <br>goto ret_with_error; <br>    } <br>    if (FAILED(tex-&gt;lpVtbl-&gt;SetShades(tex, 32))) <br>goto generic_error; <br>    if (FAILED(sphere3_builder-&gt;lpVtbl-&gt;SetTexture(sphere3_builder, tex))) <br>goto generic_error; <br> <br>    if (FAILED(world_frame-&gt;lpVtbl-&gt;AddVisual(world_frame, (LPDIRECT3DRMVISUAL) sphere3_builder))) <br>goto generic_error; <br> <br>    if (FAILED(camera-&gt;lpVtbl-&gt;AddMoveCallback(camera, moveCamera,  <br>    (void *) world_frame))) <br>    goto generic_error; <br>    if (FAILED(camera-&gt;lpVtbl-&gt;AddDestroyCallback(camera, cleanupPath, NULL))) <br>goto generic_error; <br> <br>    RELEASE(light1); <br>    RELEASE(world_frame); <br>    RELEASE(sphere3_builder); <br>    RELEASE(l1); <br>    RELEASE(l2); <br>    RELEASE(tex); <br>    RELEASE(wrap); <br>    return TRUE; <br>generic_error: <br>    Msg("An error occurred while building the scene.\n"); <br>ret_with_error: <br>    RELEASE(light1); <br>    RELEASE(world_frame); <br>    RELEASE(l1); <br>    RELEASE(l2); <br>    RELEASE(tex); <br>    RELEASE(wrap); <br>    RELEASE(sphere3_builder); <br>    RELEASE(mat); <br>    return FALSE; <br>} <br> <br>BOOL <br>BuildScene(LPDIRECT3DRMDEVICE dev, LPDIRECT3DRMVIEWPORT view, <br>   LPDIRECT3DRMFRAME scene, LPDIRECT3DRMFRAME camera) <br>{ <br>    int i; <br> <br>    view = view;/* not used */ <br> <br>    /* <br>     * This example flys a camera around a globe. The path taken is <br>     * defined by a spline curve. <br>     */ <br> <br> <br>    if (FAILED(dev-&gt;lpVtbl-&gt;SetQuality(dev, quality))) <br>goto generic_error; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateAnimation(lpD3DRM, &amp;anim))) <br>goto generic_error; <br>    if (FAILED(anim-&gt;lpVtbl-&gt;SetOptions(anim, D3DRMANIMATION_CLOSED | D3DRMANIMATION_LINEARPOSITION | D3DRMANIMATION_POSITION))) <br>goto generic_error; <br>    for (i = 0; i &lt; motion_points; i++) { <br>        if (FAILED(anim-&gt;lpVtbl-&gt;AddPositionKey(anim, D3DVAL(i), motion[i].x, motion[i].y, <br>                         motion[i].z/2))) <br> goto generic_error; <br>    } <br>    if (!run_world_scene(scene, camera)) <br>goto ret_with_error; <br>    return TRUE; <br>generic_error: <br>    Msg("A failure occurred while building the scene.\n"); <br>ret_with_error: <br>    return FALSE; <br>} <br> <br>void <br>OverrideDefaults(Defaults* defaults) <br>{ <br>    lstrcpy(defaults-&gt;Name, "Globe Direct3DRM Example"); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

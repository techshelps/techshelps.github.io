<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DSSTREAM.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3120"></a>DSSTREAM.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:DSStream.h <br> *  Content:DirectSound Stream Sample Application Header <br> * <br> ***************************************************************************/ <br>#ifndef __DSSTREAM_INCLUDED__ <br>#define __DSSTREAM_INCLUDED__ <br> <br>#include &lt;dsound.h&gt; <br>#include "resource.h" <br>#include "debug.h" <br> <br> <br>#define NUM_PLAY_NOTIFICATIONS4// number of notifications *not* including stop. <br> <br>#define DSSTREAM_STOPF_NOREOPEN0x0001 <br>#define DSSTREAM_STOPF_NOEXIT0x0002// Prevent the stop code from calling exit <br> <br>#define ERR_WAVE_OPEN_FAILED-100 <br>#define ERR_WAVE_INVALID_FORMAT-101 <br>#define ERR_CREATEDSB_FAILED-102 <br>#define ERR_WAVE_CORRUPTED_FILE-103 <br> <br> <br>#define BORDER_SPACE_CX10 <br>#define BORDER_SPACE_CY10 <br>#define CONTROL_SPACE_CX4 <br>#define CONTROL_SPACE_CY4 <br>#define TEXT_SPACE_CY0 <br>#define TEXT_SPACE_CX2 <br> <br>#define BUTTON_CX70 <br>#define BUTTON_CY32 <br>#define CHECK_CX70 <br>#define CHECK_CY22 <br>#define BUTTON_SPACE_CY6 <br> <br>#define PAN_TEXT_CX             140 <br>#define VOL_TEXT_CX             140 <br>#define FREQ_TEXT_CX            140 <br>#define PROG_TEXT_CX            140 <br> <br>#define PAN_TB_CX200 <br>#define PAN_TB_CY30 <br>#define VOL_TB_CX200 <br>#define VOL_TB_CY30 <br>#define FREQ_TB_CX200 <br>#define FREQ_TB_CY30 <br>#define PROG_TB_CX200 <br>#define PROG_TB_CY30 <br> <br>// The values for PAN may change in range... <br> <br>//#define PAN_TB_MIN              0 <br>//#define PAN_TB_MAX              2000 <br>//#define PAN_TB_CENTER           1000 <br>//#define PAN_MULTIPLIER          1 <br>#define PAN_MIN                 0 <br>#define PAN_MAX                 800 <br>#define PAN_CENTER              400 <br>#define PAN_SHIFT               (-400) <br>#define PAN_PAGESIZE            10 <br>#define PAN_DIV                 10 <br>#define PAN_MULT                10 <br> <br>//#define PAN_DSB_MIN           (-400) <br>//#define PAN_DSB_MAX           400 <br>//#define PAN_DSB_CENTER0 <br> <br>//#define VOL_TB_MIN              0 <br>//#define VOL_TB_MAX              1000 <br>//#define VOL_MULTIPLIER          1 <br>#define VOL_SHIFT               (-400) <br>#define VOL_MIN0 <br>#define VOL_MAX                 400 <br>#define VOL_PAGESIZE            10 <br>#define VOL_DIV                 10 <br>#define VOL_MULT                10 <br>#define FREQ_MIN441 <br>#define FREQ_MAX4410 <br>#define FREQ_PAGESIZE100 <br>#define FREQ_MULTIPLIER10 <br>#define PROG_MIN0 <br>#define PROG_MAX10000 <br>#define PROG_MULTIPLIER         100 <br> <br> <br>/* WAVE I/O subsystem defines */ <br> <br>#define WAVEVERSION 1 <br> <br>#ifndef ER_MEM <br>#define ER_MEM 0xe000 <br>#endif <br> <br>#ifndef ER_CANNOTOPEN <br>#define ER_CANNOTOPEN 0xe100 <br>#endif <br> <br>#ifndef ER_NOTWAVEFILE <br>#define ER_NOTWAVEFILE 0xe101 <br>#endif <br> <br>#ifndef ER_CANNOTREAD <br>#define ER_CANNOTREAD 0xe102 <br>#endif <br> <br>#ifndef ER_CORRUPTWAVEFILE <br>#define ER_CORRUPTWAVEFILE0xe103 <br>#endif <br> <br>#ifndef ER_CANNOTWRITE <br>#define ER_CANNOTWRITE0xe104 <br>#endif <br> <br>/* Streaming communication defines and structures */ <br> <br>#define WM_DSSTREAM_DONEWM_USER + 0x100/* Make our own app messages */ <br>#define WM_DSSTREAM_DEBUGWM_USER + 0x101 <br>#define WM_DSSTREAM_PROGRESSWM_USER + 0x102 <br> <br>#define DEBUGF_PLAYPOSITION0x0300 <br>#define DEBUGF_WRITEPOSITION0x0301 <br>#define DEBUGF_NEXTWRITE0x0302 <br>#define DEBUGF_SKIP0x0303 <br> <br>/* <br> * This structure keeps all the data that the TimeFunc callback uses in one <br> * place.  In this implementation, that means the global data segement.  This <br> * is setup so that if you wanted to put your callback in a DLL, all you'd need <br> * to do is pass the address of this structure as a parameter. <br> */ <br> <br>typedef struct waveinfoca_tag <br>{ <br>    WAVEFORMATEX         *pwfx;    /* Wave Format data structure */ <br>    HMMIO                hmmio;    /* MM I/O handle for the WAVE */ <br>    MMCKINFO             mmck;    /* Multimedia RIFF chunk */ <br>    MMCKINFO             mmckInRIFF;    /* Use in opening a WAVE file */ <br>    LPDIRECTSOUNDBUFFER  lpDSBStreamBuffer; /* Points to DirectSoundBuffer */ <br>    DWORD                dwBufferSize;    /* Size of the entire buffer */ <br>DWORD dwNotifySize;// size of each notification period. <br>    DWORD                dwNextWriteOffset; /* Offset to next buffer segment */ <br>    DWORD                dwProgress;    /* Used with above to show prog. */ <br>DWORD dwLastPos;// the last play position returned by GetCurrentPos(). <br>    //DWORD                dwBytesRemaining;  /* Bytes 'til timer shutdown */ <br>    BOOL                 bDonePlaying;    /* Signals early abort to timer */ <br>    BOOL                 bLoopFile;    /* Should we loop playback? */ <br>    BOOL                 bFoundEnd;    /* Timer found file end */ <br>} WAVEINFOCA, *LPWAVEINFOCA; <br> <br>// Notify events. We deal with 2 notifications. <br>HANDLE hNotifyEvent[2]; <br>int SetupNotifications(void); <br>DWORD HandleNotifications(LPVOID); <br> <br>/* Function declarations */ <br> <br>LRESULT CALLBACK MainWindowProc( HWND, unsigned, WPARAM, LPARAM ); <br>BOOL CALLBACK DLG_About( HWND, UINT, WPARAM, LPARAM ); <br>void CALLBACK TimeFunc( UINT, UINT, DWORD, DWORD, DWORD ); <br>BOOL CALLBACK DSEnumDlgProc( HWND, UINT, WPARAM, LPARAM ); <br>BOOL CALLBACK DSEnumProc( LPGUID, LPSTR, LPSTR, LPVOID ); <br> <br>void ErrorMessageBox( UINT, DWORD ); <br>void HandlePanScroll( int, int ); <br>void HandleVolScroll( int, int ); <br>void HandleFreqScroll( int, int ); <br>void ResetWavePlayer( void ); <br>void UpdateFromControls( void ); <br> <br>int CreateChildren( RECT ); <br>int HandleCommDlgError( DWORD ); <br>int StreamBufferSetup( void ); <br> <br>BOOL DoDSoundEnumerate( LPGUID ); <br> <br>int WaveOpenFile(char *, HMMIO *, WAVEFORMATEX **, MMCKINFO *); <br>int WaveStartDataRead(HMMIO *, MMCKINFO *, MMCKINFO *); <br>int WaveReadFile(HMMIO, UINT, BYTE *, MMCKINFO *, UINT *); <br>int WaveCloseReadFile(HMMIO *, WAVEFORMATEX **); <br> <br>int WaveCreateFile(char *, HMMIO *, WAVEFORMATEX *, MMCKINFO *, MMCKINFO *); <br>int WaveStartDataWrite(HMMIO *, MMCKINFO *, MMIOINFO *); <br>int WaveWriteFile(HMMIO, UINT, BYTE *, MMCKINFO *, UINT *, MMIOINFO *); <br>int WaveCloseWriteFile(HMMIO *, MMCKINFO *, MMCKINFO *, MMIOINFO *, DWORD); <br> <br>int WaveLoadFile(char *, UINT *, DWORD *, WAVEFORMATEX **, BYTE **); <br>int WaveSaveFile(char *, UINT, DWORD, WAVEFORMATEX *, BYTE *); <br> <br>int WaveCopyUselessChunks(HMMIO *, MMCKINFO *, MMCKINFO *, HMMIO *, <br>MMCKINFO *, MMCKINFO *); <br>BOOL riffCopyChunk(HMMIO, HMMIO, const LPMMCKINFO); <br> <br>#endif /* __DSSTREAM_INCLUDED__ */ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

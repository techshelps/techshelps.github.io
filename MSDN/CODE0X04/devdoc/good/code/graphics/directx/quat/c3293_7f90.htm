<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>QUAT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3294"></a>QUAT.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: quat.c <br> * <br> ***************************************************************************/ <br> <br>/* <br> * demonstration of representation of orientation using quaternions <br> */ <br> <br>#include "rmdemo.h" <br> <br>#define PI2 6.28318 <br>#define XPOS 2.0 <br>#define INTERPOLATE_STEP 0.05 <br> <br>static D3DRMQUATERNION q; <br> <br>static int view_width, view_height; <br> <br>void ReadMouse(int* buttons, int* x, int* y); <br> <br>void CDECL <br>UserControl(LPDIRECT3DRMFRAME frame, void* arg, D3DVALUE delta) <br>{ <br>    int mx, my, mb; <br>    LPDIRECT3DRMFRAME scene; <br>    D3DVALUE angle; <br>    D3DVECTOR vx = {D3DVAL(1), D3DVAL(0), D3DVAL(0)}, <br>     vy = {D3DVAL(0), D3DVAL(1), D3DVAL(0)}; <br>    D3DRMQUATERNION qx, qy; <br>    D3DRMMATRIX4D mat; <br> <br>    arg = arg; <br> <br>    ReadMouse(&amp;mb, &amp;mx, &amp;my); <br>    angle = D3DMultiply((-D3DVAL(0.5) + D3DDivide(D3DVAL(my), <br>                       D3DVAL(view_height))), D3DVAL(PI2)); <br>    D3DRMQuaternionFromRotation(&amp;qx, &amp;vx, angle); <br>    angle = D3DMultiply((-D3DVAL(0.5) + D3DDivide(D3DVAL(mx), <br>                       D3DVAL(view_width))), D3DVAL(PI2)); <br>    D3DRMQuaternionFromRotation(&amp;qy, &amp;vy, angle); <br>    D3DRMQuaternionMultiply(&amp;q, &amp;qx, &amp;qy); <br>    D3DRMMatrixFromQuaternion(mat, &amp;q); <br>    frame-&gt;lpVtbl-&gt;AddTransform(frame, D3DRMCOMBINE_REPLACE, mat); <br>    frame-&gt;lpVtbl-&gt;GetScene(frame, &amp;scene); <br>    frame-&gt;lpVtbl-&gt;SetPosition(frame, scene, D3DVAL(-XPOS), D3DVAL(0), <br>                               D3DVAL(0)); <br> <br>    RELEASE(scene); <br>} <br> <br>void CDECL <br>Follow(LPDIRECT3DRMFRAME frame, void* arg, D3DVALUE delta) <br>{ <br>    LPDIRECT3DRMFRAME scene; <br>    int mx, my, mb; <br>    static D3DRMQUATERNION qstart = {D3DVAL(1), {D3DVAL(0), D3DVAL(0),D3DVAL(0)}}, <br>                                 qend; <br>    static D3DVALUE alpha = D3DVAL(0); <br> <br>    arg = arg; <br> <br>    ReadMouse(&amp;mb, &amp;mx, &amp;my); <br>    if (mb &amp;&amp; alpha == D3DVAL(0)) { <br>qend = q; <br>alpha = D3DVAL(INTERPOLATE_STEP); <br>    } <br>    if (alpha &gt; D3DVAL(0)) { <br>D3DRMQUATERNION interp; <br>D3DRMMATRIX4D mat; <br> <br>D3DRMQuaternionSlerp(&amp;interp, &amp;qstart, &amp;qend, alpha); <br>D3DRMMatrixFromQuaternion(mat, &amp;interp); <br> <br>if (alpha &gt;= D3DVAL(1)) { <br>    D3DRMMatrixFromQuaternion(mat, &amp;qend); <br>    alpha = D3DVAL(0); <br>    qstart = qend; <br>} else <br>    alpha += D3DVAL(INTERPOLATE_STEP); <br> <br>frame-&gt;lpVtbl-&gt;AddTransform(frame, D3DRMCOMBINE_REPLACE, mat); <br>frame-&gt;lpVtbl-&gt;GetScene(frame, &amp;scene); <br>frame-&gt;lpVtbl-&gt;SetPosition(frame, scene, D3DVAL(XPOS), D3DVAL(0), D3DVAL(0)); <br>RELEASE(scene); <br>    } <br>} <br> <br>BOOL <br>BuildScene(LPDIRECT3DRMDEVICE dev, LPDIRECT3DRMVIEWPORT view, <br>   LPDIRECT3DRMFRAME scene, LPDIRECT3DRMFRAME camera) <br>{ <br>    D3DRMRENDERQUALITY quality = D3DRMRENDER_FLAT; <br>    LPDIRECT3DRMFRAME lights = NULL; <br>    LPDIRECT3DRMFRAME user = NULL; <br>    LPDIRECT3DRMFRAME follower = NULL; <br>    LPDIRECT3DRMMESHBUILDER builder = NULL; <br>    LPDIRECT3DRMMESH mesh = NULL; <br>    LPDIRECT3DRMLIGHT l1 = NULL; <br>    LPDIRECT3DRMLIGHT l2 = NULL; <br>    HRESULT rval; <br> <br>    if (FAILED(dev-&gt;lpVtbl-&gt;SetQuality(dev, quality))) <br>goto generic_error; <br> <br>    view_width = view-&gt;lpVtbl-&gt;GetWidth(view); <br>    view_height = view-&gt;lpVtbl-&gt;GetHeight(view); <br> <br>    /* <br>     * initialize the lights in the scene <br>     */ <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;lights))) <br>goto generic_error; <br>    if (FAILED(lights-&gt;lpVtbl-&gt;SetOrientation(lights, scene, <br>   D3DVAL(-1), D3DVAL(-1), D3DVAL(0), D3DVAL(0), D3DVAL(1), D3DVAL(0)))) <br>   goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_DIRECTIONAL, D3DVAL(0.8), <br>                                  D3DVAL(0.6), D3DVAL(0.7), &amp;l1))) <br>  goto generic_error; <br>    if (FAILED(lights-&gt;lpVtbl-&gt;AddLight(lights, l1))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_AMBIENT, D3DVAL(0.1), <br>                                  D3DVAL(0.1), D3DVAL(0.1), &amp;l2))) <br>  goto generic_error; <br>    if (FAILED(scene-&gt;lpVtbl-&gt;AddLight(scene, l2))) <br>goto generic_error; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;builder))) <br>goto generic_error; <br>    rval = builder-&gt;lpVtbl-&gt;Load(builder, "dropship.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load dropship.x.\n%s", D3DRMErrorToString(rval)); <br>goto ret_with_error; <br>    } <br>    if (FAILED(builder-&gt;lpVtbl-&gt;Scale(builder, D3DVAL(0.1), <br>                                     D3DVAL(0.08), D3DVAL(0.1)))) <br>     goto generic_error; <br>    if (FAILED(builder-&gt;lpVtbl-&gt;CreateMesh(builder, &amp;mesh))) <br>goto generic_error; <br>    RELEASE(builder); <br> <br>    if (FAILED(camera-&gt;lpVtbl-&gt;SetPosition(camera, scene, D3DVAL(0), D3DVAL(0),  <br>                                D3DVAL(-12)))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;user))) <br>goto generic_error; <br>    if (FAILED(user-&gt;lpVtbl-&gt;AddVisual(user, (LPDIRECT3DRMVISUAL) mesh))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;follower))) <br>goto generic_error; <br>    if (FAILED(follower-&gt;lpVtbl-&gt;AddVisual(follower, (LPDIRECT3DRMVISUAL) mesh))) <br>goto generic_error; <br> <br>    if (FAILED(follower-&gt;lpVtbl-&gt;SetPosition(follower, scene, D3DVAL(XPOS), D3DVAL(0), <br>                                  D3DVAL(0)))) <br>  goto generic_error; <br> <br>    if (FAILED(user-&gt;lpVtbl-&gt;AddMoveCallback(user, UserControl, NULL))) <br>goto generic_error; <br>    if (FAILED(follower-&gt;lpVtbl-&gt;AddMoveCallback(follower, Follow, NULL))) <br>goto generic_error; <br> <br>    RELEASE(lights); <br>    RELEASE(user); <br>    RELEASE(follower); <br>    RELEASE(mesh); <br>    RELEASE(l1); <br>    RELEASE(l2); <br>    return TRUE; <br>generic_error: <br>    Msg("A failure occurred while building the scene.\n"); <br>ret_with_error: <br>    RELEASE(lights); <br>    RELEASE(user); <br>    RELEASE(follower); <br>    RELEASE(builder); <br>    RELEASE(mesh); <br>    RELEASE(l1); <br>    RELEASE(l2); <br>    return FALSE; <br>} <br> <br>void <br>OverrideDefaults(Defaults* defaults) <br>{ <br>    defaults-&gt;bNoTextures = TRUE; <br>    defaults-&gt;bConstRenderQuality = TRUE; <br>    lstrcpy(defaults-&gt;Name, "Quaternion Direct3DRM Example"); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

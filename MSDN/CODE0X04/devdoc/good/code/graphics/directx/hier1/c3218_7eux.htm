<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HIER1.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3219"></a>HIER1.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: hier1.c <br> * <br> ***************************************************************************/ <br> <br>/* <br> * RL Tutorial program 2 frame hierarchy <br> */ <br> <br>#include "rmdemo.h" <br> <br>BOOL <br>BuildScene(LPDIRECT3DRMDEVICE dev, LPDIRECT3DRMVIEWPORT view, <br>   LPDIRECT3DRMFRAME scene, LPDIRECT3DRMFRAME camera) <br>{ <br>    D3DRMRENDERQUALITY quality = D3DRMRENDER_FLAT; <br>    LPDIRECT3DRMFRAME lights = NULL; <br>    LPDIRECT3DRMFRAME axis = NULL; <br>    LPDIRECT3DRMMESH torus_mesh = NULL; <br>    LPDIRECT3DRMMESH sphere_mesh = NULL; <br>    LPDIRECT3DRMFRAME torus = NULL; <br>    LPDIRECT3DRMFRAME sphere = NULL; <br>    LPDIRECT3DRMLIGHT lp = NULL; <br>    LPDIRECT3DRMLIGHT la = NULL; <br>    LPDIRECT3DRMMESHBUILDER builder = NULL; <br>    HRESULT rval; <br> <br>    view = view;/* not used */ <br> <br>    /* <br>     * This Demo shows a simple hierarchy of frames <br>     */ <br> <br>    if (FAILED(dev-&gt;lpVtbl-&gt;SetQuality(dev, quality))) <br>goto generic_error; <br> <br>    /* <br>     * initialize the lights in the scene <br>     */ <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;lights))) <br>goto generic_error; <br>    if (FAILED(lights-&gt;lpVtbl-&gt;SetPosition(lights, scene, D3DVAL(5), D3DVAL(5),  <br>                                -D3DVAL(9)))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_POINT, D3DVAL(0.9),  <br>                                  D3DVAL(0.8), D3DVAL(0.7), &amp;lp))) <br>  goto generic_error; <br>    if (FAILED(lights-&gt;lpVtbl-&gt;AddLight(lights, lp))) <br>goto generic_error; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_AMBIENT, D3DVAL(0.1),  <br>                                  D3DVAL(0.1), D3DVAL(0.1), &amp;la))) <br>  goto generic_error; <br>    if (FAILED(scene-&gt;lpVtbl-&gt;AddLight(scene, la))) <br>goto generic_error; <br> <br> <br>    /* <br>     * load mesh files <br>     */ <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;builder))) <br>goto generic_error; <br>    rval = builder-&gt;lpVtbl-&gt;Load(builder, "torus.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load torus.x\n%s", D3DRMErrorToString(rval)); <br>goto ret_with_error; <br>    } <br>    if (FAILED(builder-&gt;lpVtbl-&gt;CreateMesh(builder, &amp;torus_mesh))) <br>goto generic_error; <br>    RELEASE(builder); <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;builder))) <br>goto generic_error; <br>    rval = builder-&gt;lpVtbl-&gt;Load(builder, "sphere2.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load sphere2.x\n%s", D3DRMErrorToString(rval)); <br>goto ret_with_error; <br>    } <br>    if (FAILED(builder-&gt;lpVtbl-&gt;CreateMesh(builder, &amp;sphere_mesh))) <br>goto generic_error; <br>    RELEASE(builder); <br> <br>    if (FAILED(torus_mesh-&gt;lpVtbl-&gt;SetGroupColorRGB(torus_mesh, -1, D3DVAL(0.0),  <br>                                            D3DVAL(0.0), D3DVAL(1.0)))) <br>    goto generic_error; <br> <br>    /* <br>     * create a torus frame within the scene create axis frame within <br>     * frame of sphere create torus frame within frame of axis <br>     */ <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;sphere))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, sphere, &amp;axis))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, axis, &amp;torus))) <br>goto generic_error; <br> <br>    { <br>/* <br> * load a texture and wrap it onto the sphere <br> */ <br>LPDIRECT3DRMTEXTURE tex; <br>LPDIRECT3DRMWRAP wrap; <br>D3DVALUE height; <br> <br>D3DRMBOX box; <br>D3DVALUE miny, maxy; <br>if (FAILED(sphere_mesh-&gt;lpVtbl-&gt;GetBox(sphere_mesh, &amp;box))) <br>    goto generic_error; <br>maxy = box.max.y; <br>miny = box.min.y; <br>height = maxy - miny; <br> <br>if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateWrap(lpD3DRM, D3DRMWRAP_CYLINDER, NULL, D3DVAL(0.0), <br>                          D3DVAL(0.0), D3DVAL(0.0), D3DVAL(0.0), <br>                          D3DVAL(0.0), D3DVAL(1.0), D3DVAL(0.0), <br>                          D3DVAL(1.0), D3DVAL(0.0), D3DVAL(0.0), <br>                          D3DDivide(maxy, height), D3DVAL(1.0), <br>                          D3DDivide(D3DVAL(1), height), &amp;wrap))) <br>  goto generic_error; <br>if (FAILED(wrap-&gt;lpVtbl-&gt;Apply(wrap, (LPDIRECT3DRMOBJECT)sphere_mesh))) <br>    goto generic_error; <br>RELEASE(wrap); <br> <br>rval = lpD3DRM-&gt;lpVtbl-&gt;LoadTexture(lpD3DRM, "tex2.ppm", &amp;tex); <br>if (rval != D3DRM_OK) { <br>            Msg("Failed to load tex2.ppm\n%s", D3DRMErrorToString(rval)); <br>    goto ret_with_error; <br>} <br>if (FAILED(tex-&gt;lpVtbl-&gt;SetColors(tex, 16))) <br>    goto generic_error; <br>if (FAILED(tex-&gt;lpVtbl-&gt;SetShades(tex, 8))) <br>    goto generic_error; <br>if (FAILED(sphere_mesh-&gt;lpVtbl-&gt;SetGroupTexture(sphere_mesh, -1, tex))) <br>    goto generic_error; <br>RELEASE(tex); <br>    } <br>    /* <br>     * add the loaded mesh into the frame <br>     */ <br>    if (FAILED(torus-&gt;lpVtbl-&gt;AddVisual(torus, (LPDIRECT3DRMVISUAL) torus_mesh))) <br>goto generic_error; <br>    if (FAILED(sphere-&gt;lpVtbl-&gt;AddVisual(sphere, (LPDIRECT3DRMVISUAL) sphere_mesh))) <br>goto generic_error; <br> <br>    /* <br>     * set up the frames position, orientation and rotation <br>     */ <br>    if (FAILED(camera-&gt;lpVtbl-&gt;SetPosition(camera, scene, D3DVAL(0), D3DVAL(0), -D3DVAL(10)))) <br>goto generic_error; <br>    if (FAILED(sphere-&gt;lpVtbl-&gt;SetPosition(sphere, scene, D3DVAL(0), D3DVAL(0), D3DVAL(0)))) <br>goto generic_error; <br>    if (FAILED(axis-&gt;lpVtbl-&gt;SetPosition(axis, sphere, D3DVAL(2), D3DVAL(0), D3DVAL(0)))) <br>goto generic_error; <br>    if (FAILED(torus-&gt;lpVtbl-&gt;SetPosition(torus, axis, D3DVAL(1.0), D3DVAL(0), D3DVAL(0)))) <br>goto generic_error; <br> <br>    if (FAILED(sphere-&gt;lpVtbl-&gt;SetRotation(sphere, scene, D3DVAL(0), D3DVAL(1.0), D3DVAL(0.5),D3DVAL(0.05)))) <br>goto generic_error; <br>    if (FAILED(axis-&gt;lpVtbl-&gt;SetRotation(axis, sphere, D3DVAL(1), D3DVAL(0), D3DVAL(0), D3DVAL(0.01)))) <br>goto generic_error; <br>    if (FAILED(torus-&gt;lpVtbl-&gt;SetRotation(torus, axis, D3DVAL(0), D3DVAL(0), D3DVAL(1), -D3DVAL(0.05)))) <br>goto generic_error; <br> <br>    RELEASE(lights); <br>    RELEASE(axis); <br>    RELEASE(torus_mesh); <br>    RELEASE(sphere_mesh); <br>    RELEASE(torus); <br>    RELEASE(sphere); <br>    RELEASE(lp); <br>    RELEASE(la); <br>    return TRUE; <br>generic_error: <br>    Msg("A failure occurred while building the scene.\n"); <br>ret_with_error: <br>    RELEASE(lights); <br>    RELEASE(axis); <br>    RELEASE(torus_mesh); <br>    RELEASE(sphere_mesh); <br>    RELEASE(torus); <br>    RELEASE(sphere); <br>    RELEASE(lp); <br>    RELEASE(la); <br>    RELEASE(builder); <br>    return FALSE; <br>} <br> <br>void <br>OverrideDefaults(Defaults* defaults) <br>{ <br>    defaults-&gt;bConstRenderQuality = TRUE; <br>    lstrcpy(defaults-&gt;Name, "Frame Hierarchy D3D RM Example"); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

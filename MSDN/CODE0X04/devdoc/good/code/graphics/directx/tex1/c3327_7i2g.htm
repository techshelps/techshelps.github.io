<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TEX1.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3328"></a>TEX1.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: tex1.c <br> * <br> ***************************************************************************/ <br> <br>/* <br> * A texture mapping example using a cylindrical mapping. <br> */ <br> <br>#include "rmdemo.h" <br> <br>BOOL <br>BuildScene(LPDIRECT3DRMDEVICE dev, LPDIRECT3DRMVIEWPORT view, <br>   LPDIRECT3DRMFRAME scene, LPDIRECT3DRMFRAME camera) <br>{ <br>    LPDIRECT3DRMMESH mesh = NULL; <br>    LPDIRECT3DRMMESHBUILDER builder = NULL; <br>    LPDIRECT3DRMFRAME frame = NULL; <br>    LPDIRECT3DRMTEXTURE tex = NULL; <br>    LPDIRECT3DRMMATERIAL mat = NULL; <br>    LPDIRECT3DRMWRAP wrap = NULL; <br>    LPDIRECT3DRMLIGHT l1 = NULL; <br>    LPDIRECT3DRMLIGHT l2 = NULL; <br>    D3DRMBOX box; <br>    D3DVALUE miny, maxy; <br>    D3DVALUE height; <br>    HRESULT rval; <br> <br>    dev; <br>    view; <br>    camera; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_AMBIENT, D3DVAL(0.2), <br>                                  D3DVAL(0.2), D3DVAL(0.2), &amp;l1))) <br>  goto generic_error; <br>    if (FAILED(scene-&gt;lpVtbl-&gt;AddLight(scene, l1))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;frame))) <br>goto generic_error; <br>    if (FAILED(frame-&gt;lpVtbl-&gt;SetOrientation(frame, scene, -D3DVAL(1), -D3DVAL(1), <br>                                  D3DVAL(1), D3DVAL(0), D3DVAL(1), D3DVAL(0)))) <br>  goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_DIRECTIONAL, D3DVAL(1), <br>                                  D3DVAL(1), D3DVAL(1), &amp;l2))) <br>  goto generic_error; <br>    if (FAILED(frame-&gt;lpVtbl-&gt;AddLight(frame, l2))) <br>goto generic_error; <br>    RELEASE(frame); <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;frame))) <br>goto generic_error; <br>    if (FAILED(frame-&gt;lpVtbl-&gt;SetPosition(frame, scene, D3DVAL(0), D3DVAL(0), D3DVAL(15)))) <br>goto generic_error; <br>    if (FAILED(frame-&gt;lpVtbl-&gt;SetRotation(frame, scene, D3DVAL(1.1), D3DVAL(0.3),  <br>                               D3DVAL(0.0), D3DVAL(0.04)))) <br>       goto generic_error; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;builder))) <br>goto generic_error; <br>    rval = builder-&gt;lpVtbl-&gt;Load(builder, "sphere4.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load sphere4.x.\n%s", D3DRMErrorToString(rval)); <br>goto ret_with_error; <br>    } <br> <br>    rval = lpD3DRM-&gt;lpVtbl-&gt;LoadTexture(lpD3DRM, "tex7.ppm", &amp;tex); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load tex7.ppm.\n%s", D3DRMErrorToString(rval)); <br>goto ret_with_error; <br>    } <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMaterial(lpD3DRM, D3DVAL(10.0), &amp;mat))) <br>goto generic_error; <br> <br>    if (FAILED(builder-&gt;lpVtbl-&gt;SetTexture(builder, tex))) <br>goto generic_error; <br>    if (FAILED(builder-&gt;lpVtbl-&gt;SetMaterial(builder, mat))) <br>goto generic_error; <br>    if (FAILED(builder-&gt;lpVtbl-&gt;SetColorRGB(builder, D3DVAL(1.0), D3DVAL(1.0), D3DVAL(1.0)))) <br>goto generic_error; <br> <br>    if (FAILED(builder-&gt;lpVtbl-&gt;CreateMesh(builder, &amp;mesh))) <br>goto generic_error; <br>    RELEASE(builder); <br> <br>    if (FAILED(mesh-&gt;lpVtbl-&gt;GetBox(mesh, &amp;box))) <br>goto generic_error; <br>    maxy = box.max.y; <br>    miny = box.min.y; <br>    height = maxy - miny; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateWrap(lpD3DRM, D3DRMWRAP_CYLINDER, NULL, D3DVAL(0.0), <br>                              D3DVAL(0.0), D3DVAL(0.0), D3DVAL(0.0), <br>                              D3DVAL(1.0), D3DVAL(0.0), D3DVAL(0.0), <br>                              D3DVAL(0.0), D3DVAL(1.0), D3DVAL(0.0), <br>                              D3DDivide(miny, height), D3DVAL(1.0), <br>                              D3DDivide(-D3DVAL(1.0), height), &amp;wrap))) <br>      goto generic_error; <br> <br>    if (FAILED(wrap-&gt;lpVtbl-&gt;Apply(wrap, (LPDIRECT3DRMOBJECT)mesh))) <br>goto generic_error; <br>    if (FAILED(frame-&gt;lpVtbl-&gt;AddVisual(frame, (LPDIRECT3DRMVISUAL) mesh))) <br>goto generic_error; <br> <br>    RELEASE(frame); <br>    RELEASE(wrap); <br>    RELEASE(mesh); <br>    RELEASE(tex); <br>    RELEASE(mat); <br>    RELEASE(l1); <br>    RELEASE(l2); <br>    return TRUE; <br>generic_error: <br>    Msg("A failure occurred while building the scene.\n"); <br>ret_with_error: <br>    RELEASE(mesh); <br>    RELEASE(builder); <br>    RELEASE(frame); <br>    RELEASE(tex); <br>    RELEASE(mat); <br>    RELEASE(wrap); <br>    RELEASE(l1); <br>    RELEASE(l2); <br>    return FALSE; <br>} <br> <br>void <br>OverrideDefaults(Defaults* defaults) <br>{ <br>    defaults-&gt;bConstRenderQuality = TRUE; <br>    lstrcpy(defaults-&gt;Name, "Texture Mapping Direct3DRM Example"); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

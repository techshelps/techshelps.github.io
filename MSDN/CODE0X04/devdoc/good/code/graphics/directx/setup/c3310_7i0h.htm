<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DINSTALL.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3311"></a>DINSTALL.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright 1995 - 1998 Microsoft Corporation.  All Rights Reserved. <br> * <br> *  File:       dinstall.c <br> *  Content:    Game SDK sample setup program <br> ***************************************************************************/ <br> <br>#include &lt;stdio.h&gt;      // for sprintf <br>#include &lt;windows.h&gt; <br>#include &lt;shellapi.h&gt;   // for SHFileOperation <br>#include &lt;shlobj.h&gt;     // for SHBroweForFolder <br>#include "dsetup.h" <br>#include "dinstall.h" <br> <br>/* <br> * global constants and macros <br> */ <br>#define BUFFER_SIZE 512 <br> <br>#define LoadStrFromRes(uID,lpBuffer) \ <br>LoadString (GetModuleHandle(NULL),\ <br>            (uID),\ <br>            (lpBuffer),\ <br>            sizeof((lpBuffer))); <br> <br> <br>/* <br> * list of files that will be copied from the source directory to <br> * to the directory the game is created in <br> */ <br>static char* copy_list [] = <br>{ <br>        "ROCKEM3D.EXE", <br>        "ARENA.X", <br>        "BLOCK1.WAV", <br>        "BLOCK2.WAV", <br>        "BLOCK3.WAV", <br>        "CBOO.WAV", <br>        "CLOOP.WAV", <br>        "CYEAH.WAV", <br>        "DEBRIS_B.X", <br>        "DEBRIS_R.X", <br>        "DEFEND1.WAV", <br>        "DEFEND2.WAV", <br>        "DEMECH.X", <br>        "DEMECHBK.PPM", <br>        "DEMECHBT.PPM", <br>        "DEMECHCH.PPM", <br>        "DEMECHGR.PPM", <br>        "DEMECHH1.PPM", <br>        "DEMECHH2.PPM", <br>        "DEMECHHD.PPM", <br>        "DEMECHHN.PPM", <br>        "DEMECHLA.PPM", <br>        "DEMECHLL.PPM", <br>        "DEMECHUA.PPM", <br>        "DEMECHUL.PPM", <br>        "GDK_FILL.PPM", <br>        "HEAD.WAV", <br>        "INTRO.WAV", <br>        "PUNCH.WAV", <br>        "PUNCH1.WAV", <br>        "PUNCH2.WAV", <br>        "PUNCH3.WAV", <br>        "PUNCH4.WAV", <br>        "REVDN1.WAV", <br>        "REVDN2.WAV", <br>        "REVDN3.WAV", <br>        "REVUP1.WAV", <br>        "REVUP2.WAV", <br>        "REVUP3.WAV", <br>        "RANDOM1.WAV", <br>        "RANDOM2.WAV", <br>        "RANDOM3.WAV", <br>        "RANDOM4.WAV", <br>        "RANDOM5.WAV", <br>        "RANDOM6.WAV", <br>        "ROCKEM3D.BIN", <br>        "ROCKEM3D.MID", <br>        "ROCKEM3D.PAL", <br>        "SKMECH.X", <br>        "SKMECHBK.PPM", <br>        "SKMECHBT.PPM", <br>        "SKMECHCH.PPM", <br>        "SKMECHGR.PPM", <br>        "SKMECHHN.PPM", <br>        "SKMECHJD.PPM", <br>        "SKMECHLA.PPM", <br>        "SKMECHLL.PPM", <br>        "SKMECHUA.PPM", <br>        "SKMECHUL.PPM", <br>        "SPLASH.PAL", <br>        "WALK0.WAV", <br>        "WALK1.WAV", <br>        "WHOOSH1.WAV", <br>        "WHOOSH2.WAV", <br>}; <br> <br>static char       szTitle[BUFFER_SIZE]; <br> <br>/* <br> * prototypes <br> */ <br>BOOL FAR PASCAL masterDlgProc( HWND hdlg,DWORD message,DWORD wparam,DWORD lparam ); <br> <br>/* <br> * globals <br> */ <br>static HANDLE   hinst; <br>static char     GameDirectory[MAX_PATH];    // where the user wants the game <br>static char     SetupDirectory[MAX_PATH];     // where the user ran setup from <br> <br>/* <br> * support functions <br> */ <br>void catpath(char *dst, char *src) <br>{ <br>        int len = lstrlen(dst); <br>        if (len &gt; 0 &amp;&amp; (dst[len-1] != '\\' &amp;&amp; dst[len-1] != '/')) <br>                lstrcat(dst,"\\"); <br>        lstrcat(dst,src); <br> <br>        // SHFileOperation needs a double null string. <br>        len = lstrlen(dst); <br>        dst[len+1] = 0; <br>} <br> <br>/* <br> * set a bitmap into a static control <br> */ <br>void SetBitmap(HWND hDlg, int id, char *szBitmap, int w, int h) <br>{ <br>        HBITMAP hbm; <br>        HWND hwnd; <br> <br>        hwnd = GetDlgItem(hDlg, id); <br> <br>        if (hwnd == NULL) <br>                return; <br> <br>        hbm = (HBITMAP)LoadImage(hinst, szBitmap, IMAGE_BITMAP, w, h, <br>                LR_LOADTRANSPARENT | LR_LOADMAP3DCOLORS | LR_CREATEDIBSECTION); <br> <br>        if (hbm) <br>                hbm = (HBITMAP)SendMessage(hwnd, STM_SETIMAGE, IMAGE_BITMAP, (LPARAM)hbm); <br> <br>        if (hbm) <br>                DeleteObject(hbm); <br>} <br> <br>void SetInfoText(HWND hDlg, char *sz, ...) <br>{ <br>        char ach[128]; <br>        va_list marker; <br>        va_start (marker,sz); <br>        wvsprintf(ach, sz, marker); <br>        SetDlgItemText(hDlg, IDC_INFO, ach); <br>} <br> <br>void _SHFree(void *p) <br>{ <br>        IMalloc *pm; <br>        SHGetMalloc(&amp;pm); <br>        if (pm) <br>        { <br>                pm-&gt;lpVtbl-&gt;Free(pm,p); <br>                pm-&gt;lpVtbl-&gt;Release(pm); <br>        } <br>} <br> <br>/* <br> * build a shortcut in the start menu <br> */ <br>void MakeShortcut() <br>{ <br>        char buf[512]; <br>        char szSetupIni[MAX_PATH]; <br>        char szExeFile[MAX_PATH]; <br>        int len; <br>        int fh; <br>        char szGroupName[BUFFER_SIZE]; <br>        char szLinkName[BUFFER_SIZE]; <br> <br>        static char setup_ini[] = <br>                "[progman.groups]\r\n" <br>                "groupX=%s\r\n" <br>                "[groupX]\r\n" <br>                "\"%s\",\"%s\",,,,\"%s\"\r\n"; <br> <br>        GetWindowsDirectory(szSetupIni, sizeof(szSetupIni)); <br>        catpath(szSetupIni, "SETUP.INI"); <br> <br>        lstrcpy(buf, GameDirectory); <br>        catpath(buf, copy_list[0]); <br>        GetShortPathName(buf, szExeFile, sizeof(szExeFile)); <br> <br>//  lstrcpy(buf, GameDirectory); <br>//  GetShortPathName(buf, szWork, sizeof(szWork)); <br> <br>        LoadStrFromRes( IDS_GROUP_NAME, szGroupName ); <br>        LoadStrFromRes( IDS_LINK_NAME, szLinkName ); <br>        len = wsprintf(buf, setup_ini, szGroupName, szLinkName, <br>                szExeFile, GameDirectory); <br> <br>        fh = _lcreat(szSetupIni, 0); <br> <br>        if (fh != -1) <br>        { <br>                _lwrite(fh, buf, len); <br>                _lclose(fh); <br>                WinExec("grpconv -o", SW_HIDE); <br>        } <br>} <br> <br>/* <br> * dlg proc for wizard dialog box, the setup is controlled from here. <br> */ <br>BOOL FAR PASCAL masterDlgProc(HWND hDlg,DWORD dwMessage,DWORD wParam,DWORD lParam) <br>{ <br>        int             result; <br>        static int  system_restart; <br>        static int      current_dialog; <br>        static int  busy; <br> <br>        char        src[MAX_PATH]; <br>        char        dst[MAX_PATH]; <br>        SHFILEOPSTRUCT fileop; <br> <br>        char       szBuffer[BUFFER_SIZE]; <br> <br>    switch(dwMessage) <br>    { <br>    case WM_INITDIALOG: <br>                busy = 0; <br>                current_dialog = 0; <br> <br>                LoadStrFromRes( IDS_TITLE, szTitle ); <br>                SetWindowText( hDlg, szTitle ); <br>                EnableWindow( GetDlgItem(hDlg, IDC_B), FALSE ); <br>                EnableWindow( GetDlgItem(hDlg, IDC_H), FALSE ); <br> <br>                /* <br>                 * set the signon bitmap into our static control <br>                 */ <br>                LoadStrFromRes( IDS_SIGNON_BITMAP_NAME, szBuffer ); <br>                SetBitmap( hDlg, IDC_STATIC, szBuffer, 175, 195 ); <br> <br>                /* <br>                 * limit the size of the input of this text field to the length of a path <br>                 * put the default directory to install the game into in it <br>                 * select the whole thing to make it easy for people to replace it <br>                 * set the focus to it <br>                 */ <br>                SendDlgItemMessage( hDlg, IDC_EDIT, EM_LIMITTEXT, MAX_PATH, 0L); <br>                LoadStrFromRes( IDS_DEFAULT_GAME_DIR, szBuffer ); <br>                        SetDlgItemText( hDlg, IDC_EDIT, szBuffer ); <br>                SendDlgItemMessage( hDlg, IDC_EDIT, EM_SETSEL, 0, MAKELONG(256, 256) ); <br>                        SetFocus( GetDlgItem(hDlg, IDC_EDIT) ); <br>                /* <br>                 * return 0 here indicating we have set the focus for the dialog box <br>                 * and it doesn't need to help us <br>                 */ <br>                return 0; <br> <br>    case WM_SETCURSOR: <br>        if (busy) <br>        { <br>            SetCursor(LoadCursor(NULL, IDC_WAIT)); <br>            return TRUE; <br>        } <br>        break; <br> <br>    case WM_COMMAND: <br>                switch(wParam) <br>                { <br>                case IDOK: <br>                        if( busy &gt; 0 ) <br>                        { <br>                                /* <br>                                 * busy bit keeps us from taking input while we are off doing <br>                                 * things that can create other dialog boxes and end up causing <br>                                 * us to be reentered. <br>                                 */ <br>                                break; <br>                        } <br>                        else if( current_dialog == 0 ) <br>                        { <br>                                        int     i; <br> <br>                                        busy++; <br>                                        EnableWindow(GetDlgItem(hDlg,IDOK), FALSE); <br>                                        EnableWindow(GetDlgItem(hDlg,IDCANCEL), FALSE); <br>                                        SetCursor(LoadCursor(NULL, IDC_WAIT)); <br> <br>                                        /* <br>                                         * get the directory the user typed <br>                                         */ <br>                                        GetWindowText( GetDlgItem( hDlg,IDC_EDIT ), GameDirectory, sizeof(GameDirectory)); <br> <br>                                        /* <br>                                         * verify that the typed in directory is valid <br>                                         * by having the SHELL copy WIN.INI to this directory <br>                                         * it will also create the directory for us. <br>                                         */ <br>                                        LoadStrFromRes( IDS_CREATE_MSG, szBuffer ); <br>                                        SetInfoText(hDlg, szBuffer); <br> <br>                                        GetWindowsDirectory(src, sizeof(src)); <br>                                        catpath(src,"WIN.INI"); <br> <br>                                        lstrcpy(dst,GameDirectory); <br>                                        catpath(dst,"SMAG.INI"); <br> <br>                                        fileop.hwnd     = hDlg; <br>                                        fileop.wFunc    = FO_COPY; <br>                                        fileop.pFrom    = src; <br>                                        fileop.pTo      = dst; <br>                                        fileop.fFlags   = FOF_SILENT | FOF_NOCONFIRMATION; <br> <br>                                        if (SHFileOperation(&amp;fileop) != 0) <br>                                        { <br>                                                // failed, the shell gave the user a error. <br>                                                SetInfoText(hDlg, ""); <br>                                                EnableWindow(GetDlgItem(hDlg,IDOK), TRUE); <br>                                                EnableWindow(GetDlgItem(hDlg,IDCANCEL), TRUE); <br>                                                busy--; <br>                                                break; <br>                                        } <br> <br>                                        /* <br>                                         * the directory is valid now delete the bogus file <br>                                         */ <br>                                        fileop.hwnd     = hDlg; <br>                                        fileop.wFunc    = FO_DELETE; <br>                                        fileop.pFrom    = dst; <br>                                        fileop.pTo      = NULL; <br>                                        fileop.fFlags   = FOF_SILENT | FOF_NOCONFIRMATION; <br> <br>                                        SHFileOperation(&amp;fileop); <br>                                        SetInfoText(hDlg, ""); <br> <br>                                        /* <br>                                         * check if there is enough space to install the game <br>                                         * NOTE: there is always enough space at the moment :-) <br>                                         */ <br> <br>                                        LoadStrFromRes( IDS_DISK_MSG, szBuffer ); <br>                                        SetInfoText(hDlg, szBuffer); <br> <br>                                        if( 0 ) <br>                                        { <br>                                                /* your code goes here */ <br>                                        } <br>                                        SetInfoText(hDlg, ""); <br> <br>                                        /* <br>                                         * now setup DirectX <br>                                         */ <br>                                        LoadStrFromRes( IDS_INSTALL_MSG, szBuffer ); <br>                                        SetInfoText(hDlg, szBuffer); <br> <br>                                        result = DirectXSetup( hDlg, NULL, DSETUP_DIRECTX ); <br> <br>                                        SetInfoText(hDlg, ""); <br> <br>                                        if( result &lt; 0 ) <br>                                        { <br>                                                if (result == DSETUPERR_NOTPREINSTALLEDONNT) <br>                                                { <br>                                                        /* <br>                                                         *  DirectX comes preinstalled on NT, and can only <br>                                                         *  be installed in an NT release or Service Pack. <br>                                                         *  If this error code is returned, then the required <br>                                                         *  version of DirectX is not preinstalled on this <br>                                                         *  NT machine.  The user will have to go get <br>                                                         *  the NT version or Service Pack required, or this <br>                                                         *  game will not run.  Note that any application <br>                                                         *  can redistribute an NT Service Pack as long as <br>                                                         *  it is distributed in its entirety.  Check out <br>                                                         *  ftp://ftp.microsoft.com/bussys/winnt/winnt-public/fixes <br>                                                         */ <br>                                                        LoadStrFromRes( IDS_NTFAILED_MSG, szBuffer ); <br>                                                        MessageBox( hDlg, szBuffer, szTitle, 0 ); <br>                                                } <br>                                                else <br>                                                { <br>                                                        LoadStrFromRes( IDS_FAILED_MSG, szBuffer ); <br>                                                        MessageBox( hDlg, szBuffer, szTitle, 0 ); <br>                                                } <br>                                                EndDialog(hDlg, result); <br>                                                break; <br>                                        } <br>                                        else if( result == 0 ) <br>                                        { <br>                                                /* <br>                                                 *  Check the post-install DirectX Version number, <br>                                                 *  to check if the game will be able to run. <br>                                                 * <br>                                                 *  DirectXSetupGetVersion will get the version <br>                                                 *  and revision info about the current installation. <br>                                                 *  Note that since we're calling this after <br>                                                 *  DirectXSetup, the "current" installation is the <br>                                                 *  post-install version of DirectX. <br>                                                 * <br>                                                 *  Since we don't care about the revision number, <br>                                                 *  we're leaving that parameter as NULL. <br>                                                 */ <br> <br>                                                DWORD dwVersion; <br> <br>                                                if( DirectXSetupGetVersion(&amp;dwVersion, NULL) ) <br>                                                { <br>                                                        /*  we need DirectX 3.0 or better, so we're going <br>                                                         *  to make sure that dwVersion is at least equal <br>                                                         *  to 0x00040003.  If we needed DirectX 5.0 <br>                                                         *  functionality, we'd check for 0x00040005. <br>                                                         * <br>                                                         *  If your game needs specific DX functionality, <br>                                                         *  this is a good place to check to ensure that <br>                                                         *  the correct version of DirectX is available. <br>                                                         * <br>                                                         *  On Windows NT, DirectX is pre-installed, so <br>                                                         *  this check will allow notification of NT users <br>                                                         *  that they'll need to update through a service <br>                                                         *  pack, or they won't be able to run the game. <br>                                                         */ <br> <br>                                                        if( dwVersion &lt; (DWORD)0x00040003 ) <br>                                                        { <br>                                                                sprintf(szBuffer, <br>                                                                        "Your system is preinstalled with version %d.%d " <br>                                                                        "of DirectX.  This game requires DirectX version " <br>                                                                        "4.3 or better to run.\n\n" <br>                                                                        "Do you want to install the game anyway?", <br>                                                                        HIWORD(dwVersion), LOWORD(dwVersion)); <br> <br>                                                                result = MessageBox( hDlg, szBuffer, szTitle, MB_YESNO); <br> <br>                                                                if( result == IDNO ) <br>                                                                { <br>                                                                        MessageBox( hDlg, <br>                                                                        "You've chosen not to install the game.\n\n" <br>                                                                        "Click \"OK\" to end Setup.", <br>                                                                        szTitle, MB_OK); <br>                                                                        EndDialog( hDlg, 0 ); <br>                                                                        break; <br>                                                                } <br>                                                        } <br>                                                } <br>                                        } <br> <br>                                        /* <br>                                         * check if there is enough space to install the game <br>                                         * NOTE: there is always enough space at the moment :-) <br>                                         */ <br>                                        LoadStrFromRes( IDS_DISK_MSG, szBuffer ); <br>                                        SetInfoText(hDlg, szBuffer); <br>                                        if( 0 ) <br>                                        { <br>                                                /* your code goes here */ <br>                                        } <br>                                        SetInfoText(hDlg, ""); <br> <br>                                        /* <br>                                         * now copy the files. <br>                                         */ <br>                                        system_restart = result; <br> <br>                                        LoadStrFromRes( IDS_COPYING_MSG, szBuffer ); <br>                                        SetInfoText(hDlg, szBuffer); <br> <br>                                        for( i = 0; i &lt; sizeof( copy_list )/sizeof( copy_list[0] ); i++ ) <br>                                        { <br>                                                lstrcpy( src, SetupDirectory ); <br>                                                catpath( src, copy_list[i] ); <br> <br>                                                lstrcpy( dst, GameDirectory ); <br>                                                catpath( dst, copy_list[i] ); <br> <br>                                                LoadStrFromRes( IDS_CURRENT_FILE_MSG, szBuffer ); <br>                                                SetInfoText(hDlg, szBuffer, copy_list[i]); <br> <br>                                                fileop.hwnd     = hDlg; <br>                                                fileop.wFunc    = FO_COPY; <br>                                                fileop.pFrom    = src; <br>                                                fileop.pTo      = dst; <br>                                                fileop.fFlags   = FOF_SILENT | FOF_NOCONFIRMATION; <br> <br>                                                while (result = SHFileOperation(&amp;fileop)) <br>                                                { <br>                                                        char errorText[MAX_PATH+BUFFER_SIZE]; <br> <br>                                                        LoadStrFromRes( IDS_SETUP_FAILURE_MSG, szBuffer ); <br>                                                        wsprintf(errorText, szBuffer, copy_list[i] ); <br>                                                        result = MessageBox( hDlg, errorText, szTitle, MB_RETRYCANCEL ); <br> <br>                                                        if( result == IDCANCEL ) <br>                                                        { <br>                                                                result = -1; <br>                                                                break; <br>                                                        } <br>                                                } <br> <br>                                                if( result == 0 ) <br>                                                { <br>                                                        SetFileAttributes( dst, FILE_ATTRIBUTE_NORMAL ); <br>                                                } <br>                                        } <br>                                        SetInfoText(hDlg, ""); <br> <br>                                        LoadStrFromRes( IDS_STARTUP_MSG, szBuffer ); <br>                                        SetInfoText(hDlg, szBuffer); <br>                                        MakeShortcut(); <br>                                        SetInfoText(hDlg, ""); <br> <br>                                        if( result &gt;= 0 ) <br>                                        { <br>                                                /* <br>                                                 * hide current controls <br>                                                 */ <br>                                                ShowWindow( GetDlgItem(hDlg, IDC_EDIT), SW_HIDE ); <br>                                                ShowWindow( GetDlgItem(hDlg, IDC_DIRECTIONS1), SW_HIDE ); <br>                                                ShowWindow( GetDlgItem(hDlg, IDC_DIRECTIONS2), SW_HIDE ); <br>                                                ShowWindow( GetDlgItem(hDlg, IDC_EDITTEXT), SW_HIDE ); <br>                                                ShowWindow( GetDlgItem(hDlg, IDC_INFO), SW_HIDE ); <br>                                                ShowWindow( GetDlgItem(hDlg, IDC_BROWSE), SW_HIDE ); <br> <br>                                                if( system_restart ) <br>                                                { <br>                                                        /* <br>                                                         * show new dialogs <br>                                                         */ <br>                                                        ShowWindow( GetDlgItem(hDlg, IDC_REBOOT1), SW_SHOW ); <br>                                                        ShowWindow( GetDlgItem(hDlg, IDC_REBOOT2), SW_SHOW ); <br>                                                        LoadStrFromRes( IDS_REBOOT_BUTTON, szBuffer ); <br>                                                        SetWindowText( GetDlgItem(hDlg, IDOK), szBuffer ); <br> <br>                                                        /* <br>                                                         * set the reboot bitmap into our static control <br>                                                         */ <br>                                                        LoadStrFromRes( IDS_REBOOT_BITMAP_NAME, szBuffer ); <br>                                                        SetBitmap(hDlg, IDC_STATIC, szBuffer, 270, 195); <br>                                                        current_dialog++; <br>                                                } <br>                                                else <br>                                                { <br>                                                        ShowWindow( GetDlgItem(hDlg, IDC_SUCCESS), SW_SHOW ); <br>                                                        LoadStrFromRes( IDS_FINISH_BUTTON, szBuffer ); <br>                                                        SetWindowText( GetDlgItem(hDlg, IDOK), szBuffer ); <br>                                                        current_dialog++; <br>                                                        EnableWindow(GetDlgItem(hDlg,IDOK), TRUE); <br>                                                        busy--; <br>                                                        break; <br>                                                } <br>                                        } <br> <br>                                        EnableWindow(GetDlgItem(hDlg,IDOK), TRUE); <br>                                        EnableWindow(GetDlgItem(hDlg,IDCANCEL), TRUE); <br>                                        busy--; <br> <br>                                        if( result &lt; 0 ) <br>                                        { <br>                                                EndDialog( hDlg, result ); <br>                                        } <br>                                } <br>                                else if (current_dialog == 1) <br>                                { <br>                                        /* <br>                                         * restart windows, kill apps that aren't responding, reboot <br>                                         */ <br>                                        if( system_restart ) <br>                                        { <br>                                                ExitWindowsEx( EWX_REBOOT, 0 ); <br>                                        } <br>                                        else <br>                                        { <br>                                                EndDialog( hDlg, 0 ); <br>                                        } <br>                                } <br>                                break; <br> <br>                        case IDCANCEL: <br>                                if( !busy ) <br>                                { <br>                                        /* <br>                                         * only allow cancel if we aren't doing anything else <br>                                         */ <br>                                        EndDialog( hDlg, -1 ); <br>                                } <br>                                break; <br> <br>                        case IDC_BROWSE: <br>                                if( current_dialog == 0 ) <br>                                { <br>                                        BROWSEINFO bi; <br>                                        LPITEMIDLIST pidl; <br>                                        char ach[MAX_PATH]; <br> <br>                                        bi.hwndOwner      = hDlg; <br>                                        bi.pidlRoot       = NULL; <br>                                        bi.pszDisplayName = ach; <br>                                        bi.lpszTitle      = NULL; <br>                                        bi.ulFlags        = BIF_RETURNONLYFSDIRS; <br>                                        bi.lpfn           = NULL; <br>                                        bi.lParam         = 0; <br>                                        bi.iImage         = 0; <br> <br>                                        pidl = SHBrowseForFolder(&amp;bi); <br> <br>                                        if (pidl) <br>                                        { <br>                                                SHGetPathFromIDList(pidl, ach); <br>                                                SetDlgItemText(hDlg, IDC_EDIT, ach); <br>                                                _SHFree(pidl); <br>                                        } <br>                                } <br>                                break; <br>                } <br>    } <br>    return 0; <br>} <br> <br>/* **************************************************************** */ <br>int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrev, LPSTR szCmdLine, int nCmdShow) <br>{ <br>        TCHAR * p; <br>        TCHAR * x; <br>        hinst = hInstance; <br> <br>        /* <br>         * get our fullpath name and strip the file name <br>         */ <br>        GetModuleFileName(hInstance, SetupDirectory, sizeof(SetupDirectory)); <br> <br>        for (x=p=SetupDirectory; *p; p=AnsiNext(p)) <br>        { <br>                if ((*p == '\\') || (*p == '/')) <br>                        x = p; <br>        } <br>        *x = 0; <br> <br>        /* <br>         * do the setup thing, it is all one big dialog box that you show <br>         * and hide things from depending on the screen </code></pre>
<p>
</p>
<pre><code>* we just sign on, ask where to install, and install <br>         */ <br>        DialogBox( hInstance, "DLG_MASTER", NULL, (DLGPROC)masterDlgProc ); <br> <br>        return 0; <br>} /* WinMain */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

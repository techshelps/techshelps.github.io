<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TEX5.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3334"></a>TEX5.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: tex5.c <br> * <br> ***************************************************************************/ <br> <br>/* <br> * A texture mapping example showing the use of chrome mapping and decals. <br> */ <br> <br>#include "rmdemo.h" <br> <br>void CDECL  <br>applyWrap(LPDIRECT3DRMFRAME frame, void* arg, D3DVALUE delta) <br>{ <br>    LPDIRECT3DRMWRAP wrap = (LPDIRECT3DRMWRAP) arg; <br>    LPDIRECT3DRMVISUALARRAY visuals; <br>    LPDIRECT3DRMVISUAL v; <br>    int count, i; <br> <br>    frame-&gt;lpVtbl-&gt;GetVisuals(frame, &amp;visuals); <br>    if (visuals) { <br>count = visuals-&gt;lpVtbl-&gt;GetSize(visuals); <br> <br>for (i = 0; i &lt; count; i++) { <br>    visuals-&gt;lpVtbl-&gt;GetElement(visuals, i, &amp;v); <br>    wrap-&gt;lpVtbl-&gt;ApplyRelative(wrap, frame, (LPDIRECT3DRMOBJECT) v); <br>    v-&gt;lpVtbl-&gt;Release(v); <br>} <br> <br>visuals-&gt;lpVtbl-&gt;Release(visuals); <br>    } <br>} <br> <br>void CDECL  <br>toggleDecalScale(LPDIRECT3DRMFRAME frame, void* arg, D3DVALUE delta) <br>{ <br>    LPDIRECT3DRMTEXTURE decal = (LPDIRECT3DRMTEXTURE) arg; <br>    static int i = 0; <br> <br>    i++; <br>    if (i == 20) { <br>int scale; <br> <br>i = 0; <br> <br>scale = decal-&gt;lpVtbl-&gt;GetDecalScale(decal); <br>decal-&gt;lpVtbl-&gt;SetDecalScale(decal, !scale); <br>    } <br>} <br> <br>void CDECL  <br>cleanupWrap(LPDIRECT3DRMOBJECT obj, void* arg) <br>{ <br>    LPDIRECT3DRMWRAP wrap = (LPDIRECT3DRMWRAP) arg; <br>    obj; <br> <br>    wrap-&gt;lpVtbl-&gt;Release(wrap); <br>} <br> <br>BOOL <br>BuildScene(LPDIRECT3DRMDEVICE dev, LPDIRECT3DRMVIEWPORT view, <br>   LPDIRECT3DRMFRAME scene, LPDIRECT3DRMFRAME camera) <br>{ <br>    LPDIRECT3DRMMESH mesh = NULL; <br>    LPDIRECT3DRMFRAME frame = NULL; <br>    LPDIRECT3DRMFRAME axis = NULL; <br>    LPDIRECT3DRMFRAME orbit = NULL; <br>    LPDIRECT3DRMTEXTURE tex = NULL; <br>    LPDIRECT3DRMWRAP wrap = NULL; <br>    LPDIRECT3DRMLIGHT light1 = NULL; <br>    LPDIRECT3DRMLIGHT light2 = NULL; <br>    LPDIRECT3DRMMESHBUILDER builder = NULL; <br>    HRESULT rval; <br> <br>    dev; <br>    view; <br>    camera; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_AMBIENT, D3DVAL(0.2), <br>                                  D3DVAL(0.2), D3DVAL(0.2), &amp;light1))) <br>  goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_DIRECTIONAL, D3DVAL(1), <br>                                  D3DVAL(1), D3DVAL(1), &amp;light2))) <br>  goto generic_error; <br>    if (FAILED(scene-&gt;lpVtbl-&gt;AddLight(scene, light1))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;frame))) <br>goto generic_error; <br>    if (FAILED(frame-&gt;lpVtbl-&gt;SetOrientation(frame, scene, -D3DVAL(1), -D3DVAL(1), <br>                                  D3DVAL(1), D3DVAL(0), D3DVAL(1), D3DVAL(0)))) <br>  goto generic_error; <br>    if (FAILED(frame-&gt;lpVtbl-&gt;AddLight(frame, light2))) <br>goto generic_error; <br>    RELEASE(frame); <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;frame))) <br>goto generic_error; <br>    if (FAILED(frame-&gt;lpVtbl-&gt;SetPosition(frame, scene, D3DVAL(0), D3DVAL(0), D3DVAL(15)))) <br>goto generic_error; <br>    if (FAILED(frame-&gt;lpVtbl-&gt;SetOrientation(frame, scene, D3DVAL(0), D3DVAL(1.0), D3DVAL(0), <br>    D3DVAL(0), D3DVAL(0), D3DVAL(1)))) <br>goto generic_error; <br>    if (FAILED(frame-&gt;lpVtbl-&gt;SetRotation(frame, scene, D3DVAL(0), D3DVAL(0.9), D3DVAL(1.0), <br>                               D3DVAL(0.04)))) <br>       goto generic_error; <br> <br>    rval = lpD3DRM-&gt;lpVtbl-&gt;LoadTexture(lpD3DRM, "lake.ppm", &amp;tex); <br>    if (rval != D3DRM_OK) { <br>Msg("Failed to load lake.ppm.\n"); <br>goto ret_with_error; <br>    } <br>    if (FAILED(tex-&gt;lpVtbl-&gt;SetColors(tex, 256))) <br>goto generic_error; <br>    if (FAILED(tex-&gt;lpVtbl-&gt;SetShades(tex, 1))) <br>goto generic_error; <br>    if (FAILED(tex-&gt;lpVtbl-&gt;SetDecalScale(tex, TRUE))) <br>goto generic_error; <br>    if (FAILED(tex-&gt;lpVtbl-&gt;SetDecalOrigin(tex, 128, 128))) <br>goto generic_error; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;builder))) <br>goto generic_error; <br>    rval = builder-&gt;lpVtbl-&gt;Load(builder, "torus.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load torus.x.\n"); <br>goto ret_with_error; <br>    } <br>    if (FAILED(builder-&gt;lpVtbl-&gt;SetTexture(builder, tex))) <br>goto generic_error; <br>    if (FAILED(builder-&gt;lpVtbl-&gt;SetQuality(builder, D3DRMRENDER_GOURAUD))) <br>goto generic_error; <br>    if (FAILED(builder-&gt;lpVtbl-&gt;CreateMesh(builder, &amp;mesh))) <br>goto generic_error; <br>    RELEASE(builder); <br>     <br>     <br>    if (FAILED(mesh-&gt;lpVtbl-&gt;SetGroupColorRGB(mesh, 0, D3DVAL(0.7), D3DVAL(0.3), D3DVAL(0.3)))) <br>goto generic_error; <br>    if (FAILED(mesh-&gt;lpVtbl-&gt;SetGroupColorRGB(mesh, 1, D3DVAL(1.0), D3DVAL(1.0), D3DVAL(1.0)))) <br>goto generic_error; <br> <br>    if (FAILED(frame-&gt;lpVtbl-&gt;AddVisual(frame, (LPDIRECT3DRMVISUAL) mesh))) <br>goto generic_error; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateWrap <br>(lpD3DRM, D3DRMWRAP_CHROME, camera, <br> D3DVAL(0.0), D3DVAL(0.0), D3DVAL(0.0), <br> D3DVAL(0.0), D3DVAL(1.0), D3DVAL(0.0), <br> D3DVAL(0.0), D3DVAL(0.0), -D3DVAL(1.0), <br> D3DVAL(0.0), D3DVAL(0.0), D3DVAL(1.0), <br> -D3DVAL(1.0), &amp;wrap))) <br> goto generic_error; <br> <br>    if (FAILED(frame-&gt;lpVtbl-&gt;AddMoveCallback(frame, applyWrap, (void *) wrap))) <br>goto generic_error; <br>    if (FAILED(frame-&gt;lpVtbl-&gt;AddDestroyCallback(frame, cleanupWrap, wrap))) <br>goto generic_error; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, frame, &amp;axis))) <br>goto generic_error; <br>    if (FAILED(axis-&gt;lpVtbl-&gt;SetRotation(axis, frame, D3DVAL(0), D3DVAL(1), D3DVAL(0), D3DVAL(0.04)))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, axis, &amp;orbit))) <br>goto generic_error; <br>    if (FAILED(orbit-&gt;lpVtbl-&gt;SetPosition(orbit, axis, D3DVAL(2.6), D3DVAL(0), D3DVAL(0)))) <br>goto generic_error; <br>    if (FAILED(orbit-&gt;lpVtbl-&gt;AddVisual(orbit, (LPDIRECT3DRMVISUAL) tex))) <br>goto generic_error; <br>    //orbit-&gt;lpVtbl-&gt;AddMoveCallback(orbit, toggleDecalScale, (void*) tex); <br>    if (FAILED(scene-&gt;lpVtbl-&gt;SetSceneBackgroundImage(scene, tex))) <br>goto generic_error; <br> <br>    RELEASE(mesh); <br>    RELEASE(frame); <br>    RELEASE(axis); <br>    RELEASE(orbit); <br>    RELEASE(tex); <br>    RELEASE(light1); <br>    RELEASE(light2); <br>    /* don't release the wrap */ <br>    return TRUE; <br>generic_error: <br>    Msg("A failure occurred while building the scene.\n"); <br>ret_with_error: <br>    RELEASE(mesh); <br>    RELEASE(frame); <br>    RELEASE(axis); <br>    RELEASE(orbit); <br>    RELEASE(tex); <br>    RELEASE(wrap); <br>    RELEASE(light1); <br>    RELEASE(light2); <br>    RELEASE(builder); <br>    return FALSE; <br>} <br> <br>void <br>OverrideDefaults(Defaults* defaults) <br>{ <br>    defaults-&gt;bConstRenderQuality = TRUE; <br>    lstrcpy(defaults-&gt;Name, "Texture Mapping V Direct3DRM Example"); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

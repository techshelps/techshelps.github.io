<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RLDS3D.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3080"></a>RLDS3D.H</h2>
<pre><code>#ifndef ___RLDS3D_HEADER_FILE <br>#define ___RLDS3D_HEADER_FILE <br> <br>#include "d3drmwin.h" <br> <br>/* <br>** This is an interface between the viewer and the RL/DS3D APIs which provides the <br>**   functionality required by the viewer in simplified form. <br>** <br>** Note: This is not an object-oriented API since there should only be need for one <br>**   copy at a time and this way C++ to C conversions should be fairly easy <br>** <br>** DESCRIPTION: The user interfaces the 3D world and objects therein by selecting items <br>**   with the mouse (on the screen) and performing operations on that item.  The user will <br>**   also be able to perform operations on the camera and a few global operations applied <br>**   to all objects. <br>** <br>** USAGE: Create the interface using RLDS3D_Initialize() (returns FALSE if not created) <br>**   and remove it using RLDS3D_Deinitialize().  The RLDS3D_Render() functionality draws the world <br>**   on the screen. <br>*/ <br> <br>/* <br>************************  INITIALIZATION/DEINITIALIZATION **************************** <br>*/ <br> <br>/* <br>** Initialize will attach itself to the passed window.  Call initialize after <br>**  getting a handle for your window but before you display it. <br>** <br>** Initialize will initialize the RL API and return false if it fails.  It will <br>**  also attempt to initialize a DirectSound3D API, but failing this does not <br>**  justify a failed Initialize (since the 3D sound isn't a necessary part of <br>**  the viewer) <br>*/ <br> <br>BOOL RLDS3D_Initialize(HWND hwndPW, HINSTANCE this_inst); <br> <br>/* <br>** Deinitializes where necessary (assumes program quits after calling this otherwise it'd free up memory, etc...) <br>*/ <br> <br>void RLDS3D_Deinitialize(); <br> <br>/* <br>***************************  ADDING/REMOVING/EDITING OBJECTS  ********************************* <br>*/ <br> <br>/* <br>** Loads XOF file into the RL world (with textures) <br>*/ <br> <br>void RLDS3D_LoadXOF(char* file); <br> <br>/* <br>** Sets/Gets whether or not boxes are shown around selected item <br>*/ <br> <br>BOOL RLDS3D_GetBoxes(void); <br>void RLDS3D_SetBoxes(BOOL new_val); <br> <br>/* <br>** Updates the bounding box around the selected visual (this could be done using a render callback function to compare the <br>**   frame's scaling and transform functions instead) <br>*/ <br> <br>void RLDS3D_UpdateSelectionBox(void); <br> <br>/* <br>** Deselects the currently selected 3D visual. <br>*/ <br> <br>void RLDS3D_DeselectVisual(); <br> <br>/* <br>** Given coordinates it selects the first visual under those coordinates in the window's viewport <br>*/ <br> <br>void RLDS3D_FindAndSelectVisual(int x, int y, LPBOOL changed = NULL); <br> <br>/* <br>** Cuts the current selection to the clipboard <br>*/ <br> <br>void RLDS3D_CutVisual(); <br> <br>/* <br>** Copies the current selection to the clipboard <br>*/ <br> <br>void RLDS3D_CopyVisual(); <br> <br>/* <br>** Pastes the current selection to the window <br>*/ <br> <br>void RLDS3D_PasteVisual(); <br> <br>/* <br>** Deletes the current selection from the world without copying to the clipboard <br>*/ <br> <br>void RLDS3D_DeleteVisual(); <br> <br>/* <br>** Add a directional light <br>*/ <br>void RLDS3D_AddDirectionalLight(); <br> <br>/* <br>** Add a parallel point light <br>*/ <br>void RLDS3D_AddParallelPointLight(); <br> <br>/* <br>** Add Point Light <br>*/ <br>void RLDS3D_AddPointLight(); <br> <br>/* <br>** Add a spotlight <br>*/ <br>void RLDS3D_AddSpotlight(); <br> <br>/* <br>***********************************  OBJECT MOTION/SCALING/COLOURING  **************************************** <br>*/ <br> <br>/* <br>** Sets the selected object's colour <br>*/ <br> <br>void RLDS3D_SetSelColour(); <br> <br>/* <br>** Moves the camera relative to itself by providing scalars to multiply against the CAMERA-RELATIVE unit vectors <br>**   forwards/up/right. <br>*/ <br> <br>void RLDS3D_SetCamVelRelToCam(D3DVALUE forward, D3DVALUE up, D3DVALUE right); <br> <br>/* <br>** Rotates the camera around its three axis <br>** <br>** forward_axis is roll, up_axis is yaw, right_axis is pitch <br>** (Only one affects at a time) <br>*/ <br> <br>void RLDS3D_SetCamRotForward(D3DVALUE forward_axis); <br>void RLDS3D_SetCamRotUp(D3DVALUE up_axis); <br>void RLDS3D_SetCamRotRight(D3DVALUE right_axis); <br> <br>/* <br>** Scales the selected object in the x/y/z axis of it's orientation by the specified values <br>*/ <br> <br>void RLDS3D_ScaleSelected(D3DVALUE sx, D3DVALUE sy, D3DVALUE sz); <br> <br>/* <br>** Moves the currently selected object in the 3D world relative to the camera <br>*/ <br> <br>void RLDS3D_SetSelectedVelRelToCam(D3DVALUE forward, D3DVALUE up, D3DVALUE right); <br> <br>/* <br>** Rotates the currently selected object relative to the camera's frame when passed <br>**   a vector for the axis and an angle of rotation. <br>** This is useful because the AXIS which is specified is relative to what appears on the screen with it's origin at the camera <br>**   (ie: (0,0,1) will be an axis straight into the screen and thus things will spin around the centre of the screen) <br>*/ <br> <br>void RLDS3D_SetSelectedRotRelToCam(D3DVALUE AxisX, D3DVALUE AxisY, D3DVALUE AxisZ, D3DVALUE angle); <br> <br>/* <br>** Moves the currently selected object by x/y pixels on the screen from it's relative position.  Allows a user <br>**   to drag objects around the screen using the mouse.  Assumes that the distance from the frame to the screen <br>**   will remain constant <br>*/ <br> <br>void RLDS3D_MoveSelectedPosByScreenCoords(double delta_x, double delta_y); <br> <br>/* <br>** Orbits the selected object around the camera <br>*/ <br> <br>void RLDS3D_OrbitSelected(void); <br>void RLDS3D_StopOrbitSelected(); <br> <br>/* <br>** Bullets it towards the camera <br>*/ <br> <br>void RLDS3D_BulletSelected(void); <br> <br>/* <br>**********************  DIRECTSOUND 3D INTERFACE  ****************************** <br>*/ <br> <br>/* <br>** Stops all sounds from playing <br>*/ <br> <br>void RLDS3D_StopAllSounds(); <br> <br>/* <br>** Removes all of the sounds <br>*/ <br> <br>void RLDS3D_RemoveAllSounds(); <br> <br>/* <br>** Plays the sound associated with the currently selected object <br>*/ <br> <br>void RLDS3D_PlaySound(BOOL bIsLooping); <br> <br>/* <br>** Stops the sound associated with the currently selected object <br>*/ <br> <br>void RLDS3D_StopSelectedSound(); <br> <br>/* <br>** Removes the sound from the currently selected object <br>*/ <br> <br>void RLDS3D_RemoveSound(); <br>/* <br>** Attaches a sound (filename provided) to the selected frame <br>*/ <br> <br>void RLDS3D_AttachSound(char* filename); <br> <br>/* <br>** Global parameter mods <br>*/ <br>void RLDS3D_GetDistanceFactor(D3DVALUE *temp); <br>void RLDS3D_GetDopplerFactor(D3DVALUE *temp); <br>void RLDS3D_GetRolloffFactor(D3DVALUE *temp); <br>void RLDS3D_SetDistanceFactor(D3DVALUE temp); <br>void RLDS3D_SetDopplerFactor(D3DVALUE temp); <br>void RLDS3D_SetRolloffFactor(D3DVALUE temp); <br> <br>void RLDS3D_CommitDeferredSettings(void); <br> <br>/* <br>** Selected sound parameter modifications <br>*/ <br> <br>BOOL RLDS3D_SoundSelected(void); <br>void RLDS3D_GetSelConeAngles(LPDWORD inner, LPDWORD outer); <br>void RLDS3D_GetSelConeOutsideVolume(LPLONG temp); <br>void RLDS3D_GetSelMinimumDistance(D3DVALUE *temp); <br>void RLDS3D_GetSelMaximumDistance(D3DVALUE *temp); <br>void RLDS3D_SetSelConeAngles(DWORD inner, DWORD outer); <br>void RLDS3D_SetSelConeOutsideVolume(LONG temp); <br>void RLDS3D_SetSelMinimumDistance(D3DVALUE temp); <br>void RLDS3D_SetSelMaximumDistance(D3DVALUE temp); <br> <br>/* <br>*************************************  MISC. MAINTENANCE FUNCTIONS  ************************************** <br>*/ <br> <br>/* <br>** Allows external users access to the RL Device to deal with Windows-related issues <br>**   (See case WM_ACTIVATE: and case WM_PAINT: in viewer source for examples of HandleActivate() and HandlePaint()) <br>** Design note: This was done to save time from the conversion from the old version of the viewer rather than <br>**   having RLDS3D_HandleActivate(), etc. <br>*/ <br> <br>LPDIRECT3DRMDEVICE RLDS3D_WinDevice(); <br> <br>// Handles window activation (pass the wparam from the winproc) <br>void RLDS3D_HandleActivate(WPARAM wparam); <br> <br>// Handles paint messages from the window.  Pass this one the paintstructure created using BeginPaint <br>void RLDS3D_HandlePaint(PAINTSTRUCT* ps); <br> <br>// Tells whether or not something is currently selected <br> <br>BOOL RLDS3D_FrameSelected(); <br> <br>/* <br>** Renders the scene's next frame into the viewport. <br>*/ <br> <br>void RLDS3D_Render(D3DVALUE time_delta); <br> <br>/* <br> * Resize the viewport and device when the window size changes. <br> */ <br> <br>void RLDS3D_ResizeViewport(int width, int height); <br> <br>/* <br>** Returns whether or not the 3D Sound API was actually initialized properly <br>*/ <br> <br>BOOL RLDS3D_SoundInitialized(); <br> <br>/* <br>** Sets/Gets the current polygon fill mode <br>*/ <br> <br>D3DRMFILLMODE RLDS3D_GetPolygonFillMode(void); <br>void RLDS3D_SetPolygonFillMode(D3DRMFILLMODE quality); <br> <br>/* <br>** Sets/Gets the current polygon shade mode <br>*/ <br> <br>void RLDS3D_SetPolygonShadeMode(D3DRMSHADEMODE quality); <br>D3DRMSHADEMODE RLDS3D_GetPolygonShadeMode(void); <br> <br>/* <br>** Sets/Gets the colour model for the viewport (RGB or ramp) <br>*/ <br> <br>D3DRMCOLORMODEL RLDS3D_GetColourModel(void); <br>void RLDS3D_SetColourModel(D3DRMCOLORMODEL model); <br> <br>/* <br>** Sets/Gets whether or not the lights affect the visuals <br>*/ <br> <br>void RLDS3D_SetLighting(BOOL new_val); <br>BOOL RLDS3D_GetLighting(void); <br> <br>/* <br>** Sets/Gets whether or not dithering is on <br>*/ <br> <br>BOOL RLDS3D_GetDither(void); <br>void RLDS3D_SetDither(BOOL dither); <br> <br>/* <br>** Sets/Gets texture quality (only relevant for RGB modes) <br>*/ <br> <br>D3DRMTEXTUREQUALITY RLDS3D_GetTextureQuality(void); <br>void RLDS3D_SetTextureQuality(D3DRMTEXTUREQUALITY new_quality); <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

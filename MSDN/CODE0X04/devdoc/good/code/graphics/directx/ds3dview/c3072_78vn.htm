<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VIEWER.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3083"></a>VIEWER.CPP</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright 1995 - 1998 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: viewer.cpp <br> * <br> ***************************************************************************/ <br> <br> <br> <br>#define INITGUID <br>#include "d3drmwin.h" <br>#include "resource.h" <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;malloc.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;direct.h&gt; <br> <br>#include "rlds3d.h" <br>#include "file.h" <br> <br> <br>static char ViewerClass[32] = "ViewerClass"; <br> <br>static BOOL FirstInstance(HINSTANCE); <br>static BOOL AnyInstance(HINSTANCE, HWND*); <br>long FAR PASCAL WindowProc(HWND, UINT, WPARAM, LPARAM); <br>static void Idle(); <br> <br>BOOL CALLBACK WaitBoxDlgProc(HWND, UINT, WPARAM, LPARAM); <br> <br>BOOL AboutBoxOn = FALSE; <br> <br> <br>/* <br> * Initialization, message loop <br> */ <br> <br>int PASCAL WinMain <br>    (HINSTANCE this_inst, HINSTANCE prev_inst, LPSTR cmdline, int cmdshow) <br>{ <br>    MSG         msg; <br>    int         idle; <br>    int         done = FALSE; <br>    HACCEL      accel; <br> <br> <br>DWORDprev_tick; <br>DWORDthis_tick; <br>D3DVALUEtime_delta; <br> <br>    prev_inst = prev_inst; <br>    cmdline = cmdline; <br> <br>// Register our class if necessary <br>    if (!prev_inst) { <br>// Do the stuff for if this is the first instance of the program. <br>if (!FirstInstance(this_inst)) return FALSE; <br>} <br> <br>// Create our window and get it's handle (needs to be done whether we're first or not) <br>HWND win; <br>    if (!AnyInstance(this_inst, &amp;win)) return FALSE; <br> <br>// Initialize the RLDS3D interface <br>if (!RLDS3D_Initialize(win, this_inst)) { <br>// If it doesn't initialize then we don't have anything we need to clean up, so we just exit <br>exit(-1); <br>} <br> <br>// Show our window! <br>    ShowWindow(win, cmdshow); <br>    UpdateWindow(win); <br> <br>// Load accelerators <br>    accel = LoadAccelerators(this_inst, "ViewerAccel"); <br> <br>prev_tick = timeGetTime(); <br> <br> <br>    while (!done) <br>    {   idle = TRUE; <br>        while (PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE)) <br>        {   idle = FALSE; <br>            if (msg.message == WM_QUIT) <br>            {   done = TRUE; <br>                break; <br>            } <br> <br>            if (!TranslateAccelerator(msg.hwnd, accel, &amp;msg)) <br>            { <br>                TranslateMessage(&amp;msg); <br>                DispatchMessage(&amp;msg); <br>            } <br> <br>        } <br>if (idle) Idle(); <br>this_tick = timeGetTime(); <br>time_delta = D3DVAL((float)((this_tick - prev_tick)/1000.0)); <br>prev_tick = this_tick; <br>RLDS3D_Render(time_delta); <br>    } <br>RLDS3D_Deinitialize(); <br>return msg.wParam; <br>} <br> <br>/* <br> * Register window class for the application, and do any other <br> * application initialization <br> */ <br>static BOOL FirstInstance(HINSTANCE this_inst) <br>{ <br>    WNDCLASS    wc; <br>    BOOL        rc; <br> <br>    /* <br>     * set up and register window class <br>     */ <br>    wc.style = CS_HREDRAW | CS_VREDRAW; <br>    wc.lpfnWndProc = WindowProc; <br>    wc.cbClsExtra = 0; <br>    wc.cbWndExtra = 0; <br>    wc.hInstance = this_inst; <br>    wc.hIcon = LoadIcon(this_inst, "ViewerIcon"); <br>    wc.hCursor = LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground = (HBRUSH) GetStockObject(WHITE_BRUSH); <br>    wc.lpszMenuName = "ViewerMenu"; <br>    wc.lpszClassName = ViewerClass; <br>    rc = RegisterClass(&amp;wc); <br> <br>    return rc; <br>} <br> <br>/* <br> * Do work required for every instance of the application: <br> * create the window, initialize data <br> */ <br>static BOOL AnyInstance(HINSTANCE this_inst, HWND* window_handle) <br>{ <br>    HWND win; <br>    char szCaption[] = "DirectSound3D Demo"; <br> <br>    /* <br>     * create main window <br>     */ <br>    win = <br>        CreateWindow <br>        (   ViewerClass,                /* class */ <br>            szCaption,                  /* caption */ <br>            WS_OVERLAPPEDWINDOW,        /* style */ <br>            CW_USEDEFAULT,              /* init. x pos */ <br>            CW_USEDEFAULT,              /* init. y pos */ <br>            400,                        /* init. x size */ <br>            400,                        /* init. y size */ <br>            NULL,                       /* parent window */ <br>            NULL,                       /* menu handle */ <br>            this_inst,                  /* program handle */ <br>            NULL                        /* create parms */ <br>        ); <br> <br> <br>    if (!win) return FALSE; <br>*window_handle = win; <br>    return TRUE; <br>} <br> <br>/* <br> * Processes messages for the about dialog. <br> */ <br>BOOL WINAPI AboutDlgProc <br>    (HWND win, unsigned msg, WPARAM wparam, LPARAM lparam) <br>{ <br>    lparam = lparam; <br> <br>    switch (msg) <br>    { <br>    case WM_INITDIALOG: <br>        return TRUE; <br> <br>    case WM_COMMAND: <br>        if (wparam == IDOK) <br>        { <br>            AboutBoxOn = FALSE; <br>            EndDialog(win, TRUE); <br>            return TRUE; <br>        } <br>        break; <br>    case WM_CLOSE: <br>        { <br>            AboutBoxOn = FALSE; <br>            EndDialog(win, TRUE); <br>            return FALSE; <br>        } <br>        break; <br>    } <br>    return FALSE; <br>} <br> <br>static int <br>    left_drag = FALSE, right_drag = FALSE, <br>    last_x, last_y; <br> <br>static void Idle() <br>{ <br>// Stop selected item being dragged from rotating/moving <br>    if (left_drag) { <br>RLDS3D_SetSelectedRotRelToCam(D3DVAL(0.0), D3DVAL(1.0), D3DVAL(0.0), D3DVAL(0.0)); <br>} <br>    if (right_drag) { <br>RLDS3D_SetSelectedVelRelToCam(D3DVAL(0.0), D3DVAL(0.0), D3DVAL(0.0)); <br>} <br>} <br> <br>static int FillModeToMenuItem(D3DRMFILLMODE fm) <br>{ <br>    switch (fm) { <br>    case D3DRMFILL_POINTS: <br>        return 2; <br> <br>    case D3DRMFILL_WIREFRAME: <br>        return 3; <br> <br>    case D3DRMFILL_SOLID: <br>        return 4; <br>    } <br>    return -1; <br>} <br> <br>// Sets the polygon fill mode and checks/unchecks the appropriate menu items <br>static void SetFillMode(HWND win, D3DRMFILLMODE fm) <br>{ <br>    HMENU menu; <br>    D3DRMFILLMODE oldfm = RLDS3D_GetPolygonFillMode(); <br>    menu = GetMenu(win); <br>    menu = GetSubMenu(menu, 2); <br>    CheckMenuItem(menu, FillModeToMenuItem(oldfm), <br>                  MF_BYPOSITION|MF_UNCHECKED); <br>    CheckMenuItem(menu, FillModeToMenuItem(fm), <br>                  MF_BYPOSITION|MF_CHECKED); <br>RLDS3D_SetPolygonFillMode(fm); <br>} <br> <br>static int ShadeModeToMenuItem(D3DRMSHADEMODE sm) <br>{ <br>    switch (sm) { <br>    case D3DRMSHADE_FLAT: <br>        return 6; <br> <br>    case D3DRMSHADE_GOURAUD: <br>        return 7; <br> <br>    case D3DRMSHADE_PHONG: <br>        return 8; <br>    } <br>    return -1; <br>} <br> <br>// Sets the polygon shade mode and checks/unchecks the appropriate menu items <br>static void SetShadeMode(HWND win, D3DRMSHADEMODE sm) <br>{ <br>    HMENU menu; <br>    D3DRMSHADEMODE oldsm = RLDS3D_GetPolygonShadeMode(); <br> <br>    menu = GetMenu(win); <br>    menu = GetSubMenu(menu, 2); <br>    CheckMenuItem(menu, ShadeModeToMenuItem(oldsm), <br>                  MF_BYPOSITION|MF_UNCHECKED); <br>    CheckMenuItem(menu, ShadeModeToMenuItem(sm), <br>                  MF_BYPOSITION|MF_CHECKED); <br>RLDS3D_SetPolygonShadeMode(sm); <br>} <br> <br>// Sets the rendering model and checks/unchecks the appropriate menu items <br>static void SetModel(HWND win, D3DRMCOLORMODEL model) <br>{ <br>    HMENU menu; <br>    D3DRMCOLORMODEL oldModel = RLDS3D_GetColourModel(); <br> <br>    if (oldModel == model) return; <br> <br>    RLDS3D_SetColourModel(model); <br>     <br>    menu = GetMenu(win); <br>    menu = GetSubMenu(menu, 2); <br>    CheckMenuItem(menu, 9 + (int) oldModel, MF_BYPOSITION|MF_UNCHECKED); <br>    CheckMenuItem(menu, 9 + (int) model, MF_BYPOSITION|MF_CHECKED); <br>} <br> <br>// Toggles dithering and checks/unchecks menu item <br>static void ToggleDither(HWND win) <br>{ <br>    HMENU menu; <br>    int dither = RLDS3D_GetDither(); <br>    int checked; <br>    dither = !dither; <br>RLDS3D_SetDither(dither); <br> <br>    menu = GetMenu(win); <br>    menu = GetSubMenu(menu, 2); <br> <br>    if (dither) checked = MF_CHECKED; <br>    else checked = MF_UNCHECKED; <br> <br>    CheckMenuItem(menu, 13, MF_BYPOSITION|checked); <br>} <br> <br>// Toggles texture filtering and checks/unchecks menu item <br>static void ToggleTextureFiltering(HWND win) <br>{ <br>    HMENU menu; <br>    D3DRMTEXTUREQUALITY tq = RLDS3D_GetTextureQuality(); <br>    int checked; <br>    if (tq == D3DRMTEXTURE_NEAREST) <br>        tq = D3DRMTEXTURE_LINEAR; <br>    else <br>        tq = D3DRMTEXTURE_NEAREST; <br> <br>    RLDS3D_SetTextureQuality(tq); <br>    menu = GetMenu(win); <br>    menu = GetSubMenu(menu, 2); <br> <br>    if (tq == D3DRMTEXTURE_LINEAR) checked = MF_CHECKED; <br>    else checked = MF_UNCHECKED; <br> <br>    CheckMenuItem(menu, 14, MF_BYPOSITION|checked); <br>} <br> <br>// Ditto for lighting <br>static void ToggleLighting(HWND win) <br>{ <br>    HMENU menu; <br>    menu = GetMenu(win); <br>    menu = GetSubMenu(menu, 2); <br>    if (RLDS3D_GetLighting()) { <br>    CheckMenuItem(menu, 0, (MF_BYPOSITION | MF_UNCHECKED)); <br>RLDS3D_SetLighting(FALSE); <br>} <br>else { <br>    CheckMenuItem(menu, 0, (MF_BYPOSITION | MF_CHECKED)); <br>RLDS3D_SetLighting(TRUE); <br>} <br>} <br> <br>/* <br>** Windows procs for the sound param dlg boxes <br>*/ <br> <br>BOOL CALLBACK WaitBoxDlgProc(HWND win, UINT msg, WPARAM wparam, LPARAM lparam) { <br>return FALSE; <br>}; <br> <br>BOOL CALLBACK GlobalParamDlgProc(HWND win, UINT msg, WPARAM wparam, LPARAM lparam) <br>{ <br>    lparam = lparam; <br> <br>    char lpszTS[100]; <br> <br>    switch (msg) <br>    { <br>case WM_INITDIALOG: <br>{ <br>// Set up our edit fields appropriately <br>                D3DVALUE temp; <br>RLDS3D_GetDistanceFactor(&amp;temp); <br>sprintf(lpszTS, "%f",temp); <br>SendDlgItemMessage(win, IDC_DISTANCEFACTOR, WM_SETTEXT, 0, (LPARAM) lpszTS); <br>SendDlgItemMessage(win, IDC_DISTANCEFACTOR, EM_SETLIMITTEXT, 10, 0); <br>RLDS3D_GetRolloffFactor(&amp;temp); <br>sprintf(lpszTS, "%f",temp); <br>SendDlgItemMessage(win, IDC_ROLLOFFFACTOR, WM_SETTEXT, 0, (LPARAM) lpszTS); <br>SendDlgItemMessage(win, IDC_ROLLOFFFACTOR, EM_SETLIMITTEXT, 10, 0); <br>RLDS3D_GetDopplerFactor(&amp;temp); <br>sprintf(lpszTS, "%f",temp); <br>SendDlgItemMessage(win, IDC_DOPPLERFACTOR, WM_SETTEXT, 0, (LPARAM) lpszTS); <br>SendDlgItemMessage(win, IDC_DOPPLERFACTOR, EM_SETLIMITTEXT, 10, 0); <br>return TRUE; <br>} <br>case WM_CLOSE: <br>EndDialog(win, TRUE); <br>return FALSE; <br> <br>case WM_COMMAND: <br>            { <br>                if (HIWORD(wparam) == EN_UPDATE &amp;&amp; LOWORD(wparam) == IDC_DOPPLERFACTOR) { <br>// Get value from edit box (get length, check lenth, set first char to length, request string, end it with 0) <br>                    int stringlength = SendDlgItemMessage(win, IDC_DOPPLERFACTOR, EM_LINELENGTH, 0, 0); <br>                    if (stringlength &gt; 10) return TRUE; <br>                    lpszTS[0] = (char)stringlength; <br>                    SendDlgItemMessage(win, IDC_DOPPLERFACTOR, EM_GETLINE, 0, (LPARAM) lpszTS); <br>                    lpszTS[stringlength] = 0; <br>// Set value in RLDS3D (convert string to long and go crazy with the bad boy) <br>// No real need for error checking 'cause the edit field is numbers only <br>RLDS3D_SetDopplerFactor(D3DVAL(atof(lpszTS))); <br>                    return TRUE; <br>                } <br>                else if (HIWORD(wparam) == EN_UPDATE &amp;&amp; LOWORD(wparam) == IDC_ROLLOFFFACTOR) { <br>// Get value from edit box (get length, check lenth, set first char to length, request string, end it with 0) <br>                    int stringlength = SendDlgItemMessage(win, IDC_ROLLOFFFACTOR, EM_LINELENGTH, 0, 0); <br>                    if (stringlength &gt; 10) return TRUE; <br>                    lpszTS[0] = (char)stringlength; <br>                    SendDlgItemMessage(win, IDC_ROLLOFFFACTOR, EM_GETLINE, 0, (LPARAM) lpszTS); <br>                    lpszTS[stringlength] = 0; <br>// Set value in RLDS3D (convert string to long and go crazy with the bad boy) <br>RLDS3D_SetRolloffFactor(D3DVAL(atof(lpszTS))); <br>                    return TRUE; <br>                } <br>                else if (HIWORD(wparam) == EN_UPDATE &amp;&amp; LOWORD(wparam) == IDC_DISTANCEFACTOR) { <br>// Get value from edit box (get length, check lenth, set first char to length, request string, end it with 0) <br>                    int stringlength = SendDlgItemMessage(win, IDC_DISTANCEFACTOR, EM_LINELENGTH, 0, 0); <br>                    if (stringlength &gt; 10) return TRUE; <br>                    lpszTS[0] = (char)stringlength; <br>                    SendDlgItemMessage(win, IDC_DISTANCEFACTOR, EM_GETLINE, 0, (LPARAM) lpszTS); <br>                    lpszTS[stringlength] = 0; <br>// Set value in RLDS3D (convert string to long and go crazy with the bad boy) <br>RLDS3D_SetDistanceFactor(D3DVAL(atof(lpszTS))); <br>                    return TRUE; <br>                } <br>                else return FALSE; <br>            }                <br>        break; <br>    } <br>    return FALSE; <br>} <br> <br>HWND hSelCfgDlg = 0; <br> <br>BOOL CALLBACK SelectedParamDlgProc(HWND win, UINT msg, WPARAM wparam, LPARAM lparam) <br>{ <br>    lparam = lparam; <br> <br>    char lpszTS[100]; <br> <br>    switch (msg) <br>    { <br>case WM_INITDIALOG: <br>{ <br>// Set up our edit fields appropriately <br>                D3DVALUE temp; <br>LONG temp2; <br>DWORD temp3, temp4; <br>// Ignores the out side cone angle for now, which is fine, because elsewhere we <br>// set it to equal the inside angle <br>RLDS3D_GetSelConeAngles(&amp;temp3, &amp;temp4); <br>sprintf(lpszTS, "%i",temp3); <br>SendDlgItemMessage(win, IDC_CONEANGLE, WM_SETTEXT, 0, (LPARAM) lpszTS); <br>SendDlgItemMessage(win, IDC_CONEANGLE, EM_SETLIMITTEXT, 10, 0); <br>RLDS3D_GetSelConeOutsideVolume(&amp;temp2); <br>sprintf(lpszTS, "%i",temp2); <br>SendDlgItemMessage(win, IDC_CONEOUTSIDEVOLUME, WM_SETTEXT, 0, (LPARAM) lpszTS); <br>SendDlgItemMessage(win, IDC_CONEOUTSIDEVOLUME, EM_SETLIMITTEXT, 10, 0); <br>RLDS3D_GetSelMaximumDistance(&amp;temp); <br>sprintf(lpszTS, "%f",temp); <br>SendDlgItemMessage(win, IDC_MAXIMUMDISTANCE, WM_SETTEXT, 0, (LPARAM) lpszTS); <br>SendDlgItemMessage(win, IDC_MAXIMUMDISTANCE, EM_SETLIMITTEXT, 10, 0); <br>RLDS3D_GetSelMinimumDistance(&amp;temp); <br>sprintf(lpszTS, "%f",temp); <br>SendDlgItemMessage(win, IDC_MINIMUMDISTANCE, WM_SETTEXT, 0, (LPARAM) lpszTS); <br>SendDlgItemMessage(win, IDC_MINIMUMDISTANCE, EM_SETLIMITTEXT, 10, 0); <br>hSelCfgDlg = win; <br>return TRUE; <br>} <br> <br>case WM_CLOSE: <br>EndDialog(win, TRUE); <br>hSelCfgDlg = 0; <br>return FALSE; <br> <br>case WM_COMMAND: <br>            { <br>                if (HIWORD(wparam) == EN_UPDATE &amp;&amp; LOWORD(wparam) == IDC_CONEANGLE) { <br>// Get value from edit box (get length, check lenth, set first char to length, request string, end it with 0) <br>                    int stringlength = SendDlgItemMessage(win, IDC_CONEANGLE, EM_LINELENGTH, 0, 0); <br>                    if (stringlength &gt; 10) return TRUE; <br>                    lpszTS[0] = (char)stringlength; <br>                    SendDlgItemMessage(win, IDC_CONEANGLE, EM_GETLINE, 0, (LPARAM) lpszTS); <br>                    lpszTS[stringlength] = 0; <br>// Set value in RLDS3D (convert string to long and go crazy with the bad boy) <br>// No real need for error checking 'cause the edit field is numbers only <br>RLDS3D_SetSelConeAngles((DWORD)atol(lpszTS), (DWORD)atol(lpszTS)); <br>                    return TRUE; <br>                } <br>                else if (HIWORD(wparam) == EN_UPDATE &amp;&amp; LOWORD(wparam) == IDC_CONEOUTSIDEVOLUME) { <br>// Get value from edit box (get length, check lenth, set first char to length, request string, end it with 0) <br>                    int stringlength = SendDlgItemMessage(win, IDC_CONEOUTSIDEVOLUME, EM_LINELENGTH, 0, 0); <br>                    if (stringlength &gt; 10) return TRUE; <br>                    lpszTS[0] = (char)stringlength; <br>                    SendDlgItemMessage(win, IDC_CONEOUTSIDEVOLUME, EM_GETLINE, 0, (LPARAM) lpszTS); <br>                    lpszTS[stringlength] = 0; <br>// Set value in RLDS3D (convert string to long and go crazy with the bad boy) <br>RLDS3D_SetSelConeOutsideVolume(atol(lpszTS)); <br>                    return TRUE; <br>                } <br>                else if (HIWORD(wparam) == EN_UPDATE &amp;&amp; LOWORD(wparam) == IDC_MAXIMUMDISTANCE) { <br>// Get value from edit box (get length, check lenth, set first char to length, request string, end it with 0) <br>                    int stringlength = SendDlgItemMessage(win, IDC_MAXIMUMDISTANCE, EM_LINELENGTH, 0, 0); <br>                    if (stringlength &gt; 10) return TRUE; <br>                    lpszTS[0] = (char)stringlength; <br>                    SendDlgItemMessage(win, IDC_MAXIMUMDISTANCE, EM_GETLINE, 0, (LPARAM) lpszTS); <br>                    lpszTS[stringlength] = 0; <br>// Set value in RLDS3D (convert string to long and go crazy with the bad boy) <br>RLDS3D_SetSelMaximumDistance(D3DVAL(atof(lpszTS))); <br>                    return TRUE; <br>                } <br>                else if (HIWORD(wparam) == EN_UPDATE &amp;&amp; LOWORD(wparam) == IDC_MINIMUMDISTANCE) { <br>// Get value from edit box (get length, check lenth, set first char to length, request string, end it with 0) <br>                    int stringlength = SendDlgItemMessage(win, IDC_MINIMUMDISTANCE, EM_LINELENGTH, 0, 0); <br>                    if (stringlength &gt; 10) return TRUE; <br>                    lpszTS[0] = (char)stringlength; <br>                    SendDlgItemMessage(win, IDC_MINIMUMDISTANCE, EM_GETLINE, 0, (LPARAM) lpszTS); <br>                    lpszTS[stringlength] = 0; <br>// Set value in RLDS3D (convert string to long and go crazy with the bad boy) <br>RLDS3D_SetSelMinimumDistance(D3DVAL(atof(lpszTS))); <br>                    return TRUE; <br>                } <br>                else return FALSE; <br>            }                <br>        break; <br>    } <br>    return FALSE; <br>} <br> <br>#define SIGN_EXTEND(w)    ((((int)(w)) &lt;&lt; 16) &gt;&gt; 16) <br> <br>/* <br> * Handle messages for the main application window <br> */ <br> <br>LONG FAR PASCAL WindowProc(HWND win, UINT msg, WPARAM wparam, LPARAM lparam) <br>{ <br>    HINSTANCE inst_handle; <br>    static HCURSOR oldCursor = NULL; <br> <br>    switch (msg) <br>    { <br>    case WM_KEYDOWN: <br>        {    <br>            switch (wparam) <br>            { <br> <br>            case 'A': <br>   RLDS3D_SetCamVelRelToCam(D3DVAL(5.0), D3DVAL(0.0), D3DVAL(0.0)); <br>                break; <br> <br>            case 'Z': <br>RLDS3D_SetCamVelRelToCam(D3DVAL(-5.0), D3DVAL(0.0), D3DVAL(0.0)); <br>                break; <br> <br>            case VK_RIGHT: <br>RLDS3D_SetCamRotUp(D3DVAL(1.0)); <br>                break; <br>            case VK_LEFT: <br>RLDS3D_SetCamRotUp(D3DVAL(-1.0)); <br>                break; <br>case VK_UP: <br>RLDS3D_SetCamRotRight(D3DVAL(1.0)); <br>break; <br>case VK_DOWN: <br>RLDS3D_SetCamRotRight(D3DVAL(-1.0)); <br>break; <br>} <br>        } <br>        break; <br> <br>    case WM_KEYUP: <br>        switch (wparam) <br>        { <br>case VK_LEFT: <br>case VK_RIGHT: <br>        case VK_UP: <br>        case VK_DOWN: <br>// Stop the camera from rotating completely <br>RLDS3D_SetCamRotForward(D3DVAL(0.0)); <br>break; <br>             <br>case 'A': <br>case 'Z': <br>RLDS3D_SetCamVelRelToCam(D3DVAL(0.0), D3DVAL(0.0), D3DVAL(0.0)); <br>            break; <br>        } <br>        break; <br> <br>    case WM_LBUTTONDOWN: <br>        {   HCURSOR hCur; <br>            int x = LOWORD(lparam); <br>            int y = HIWORD(lparam); <br>            last_x = x; <br>            last_y = y; <br>BOOL bChanged = FALSE; <br>            RLDS3D_FindAndSelectVisual(x, y, &amp;bChanged); <br>// Get rid of the Selected Object Cfg dialog if we've selected a new object <br>if (bChanged &amp;&amp; hSelCfgDlg) EndDialog(hSelCfgDlg, TRUE); <br>            left_drag = TRUE; <br>            SetCapture(win); <br>            /* change to a groovy cursor */ <br>            hCur = LoadCursor(NULL, IDC_ARROW); <br>            if (hCur) oldCursor = SetCursor(hCur); <br>            else oldCursor = NULL; <br>        } <br>        break; <br> <br>    case WM_LBUTTONUP: <br>        ReleaseCapture(); <br>        left_drag = FALSE; <br>        if (oldCursor) SetCursor(oldCursor); <br>        break; <br> <br>    case WM_RBUTTONDOWN: <br>        { <br>            HCURSOR hCur; <br>            int x = LOWORD(lparam); <br>            int y = HIWORD(lparam); <br>            last_x = x; <br>            last_y = y; <br>BOOL bChanged = FALSE; <br>            RLDS3D_FindAndSelectVisual(x, y, &amp;bChanged); <br>// Get rid of the Selected Object Cfg dialog if we've selected a new object <br>if (bChanged &amp;&amp; hSelCfgDlg) EndDialog(hSelCfgDlg, TRUE); <br>            right_drag = TRUE; <br>            SetCapture(win); <br>            /* change to a groovy cursor */ <br>            hCur = LoadCursor(NULL, IDC_ARROW); <br>            if (hCur) oldCursor = SetCursor(hCur); <br>            else oldCursor = NULL; <br>        } <br>        break; <br> <br>    case WM_RBUTTONUP: <br>        right_drag = FALSE; <br>        ReleaseCapture(); <br>        if (oldCursor) SetCursor(oldCursor); <br>        break; <br> <br>    case WM_MOUSEMOVE: <br>        if ((wparam &amp; MK_LBUTTON) &amp;&amp; left_drag) <br>        {   double delta_x, delta_y; <br>            delta_x = SIGN_EXTEND(LOWORD(lparam)) - last_x; <br>            delta_y = -SIGN_EXTEND((HIWORD(lparam)) - last_y); <br>            last_x = SIGN_EXTEND(LOWORD(lparam)); <br>            last_y = SIGN_EXTEND(HIWORD(lparam)); <br>            { <br>                double delta_r = sqrt(delta_x * delta_x + delta_y * delta_y); <br>                double radius = 50; <br>                double denom; <br> <br>                denom = 0.05 * sqrt(radius * radius + delta_r * delta_r); <br> <br>                if (delta_r == 0 || denom == 0) break; <br>RLDS3D_SetSelectedRotRelToCam(D3DDivide(D3DVAL((float) delta_y), D3DVAL((float) delta_r)), <br>  D3DDivide(D3DVAL((float) -delta_x), D3DVAL((float) delta_r)), <br>  D3DVAL(0.0), <br>  D3DDivide(D3DVAL((float) delta_r), D3DVAL((float) denom))); <br>            } <br>        } <br>        else if ((wparam &amp; MK_RBUTTON) &amp;&amp; right_drag) <br>        {   double delta_x, delta_y; <br> <br>            delta_x = SIGN_EXTEND(LOWORD(lparam)) - last_x; <br>            delta_y = SIGN_EXTEND(HIWORD(lparam)) - last_y; <br>            last_x = SIGN_EXTEND(LOWORD(lparam)); <br>            last_y = SIGN_EXTEND(HIWORD(lparam)); <br>RLDS3D_MoveSelectedPosByScreenCoords(delta_x, delta_y); <br>        } <br>        break; <br>    case WM_COMMAND: <br>        switch( wparam &amp; 0xffff ) <br>        { <br>case MENU_MOTION_ORBITSELECTEDOBJECT: <br>{ <br>RLDS3D_OrbitSelected(); <br>} <br>break; <br>case MENU_MOTION_BULLETSELECTEDOBJECT: <br>{ <br>RLDS3D_BulletSelected(); <br>} <br>break; <br>case MENU_SOUND_ATTACHSOUND: <br>{ <br>if (RLDS3D_SoundInitialized()) <br>{ <br>if (RLDS3D_FrameSelected()) { <br>char* file = OpenNewSoundFile(win); <br>if (file) RLDS3D_AttachSound(file); <br>} <br>else MessageBox(win, "No object selected to attach a sound to!", "Doh!", MB_ICONEXCLAMATION); <br>} <br>else MessageBox(win, "Sound not initialized!", "Doh!", MB_ICONEXCLAMATION); <br>} <br>break; <br>case MENU_SOUND_REMOVESOUND: <br>RLDS3D_RemoveSound(); <br>break; <br>case MENU_SOUND_REMOVEALLSOUNDS: <br>RLDS3D_RemoveAllSounds(); <br>break; <br> <br>case MENU_SOUND_PLAYSOUND: <br>RLDS3D_PlaySound(FALSE); <br>break; <br>case MENU_SOUND_PLAYSOUNDLOOPING: <br>RLDS3D_PlaySound(TRUE); <br>break; <br>case MENU_SOUND_STOPSOUND: <br>RLDS3D_StopSelectedSound(); <br>break; <br> <br>case MENU_SOUND_STOPALLSOUNDS: <br>RLDS3D_StopAllSounds(); <br>break; <br> <br>case MENU_SOUND_SELECTEDSOUNDPROPERTIES: <br>{ <br>if (RLDS3D_SoundInitialized()) { <br>if (RLDS3D_SoundSelected()) { <br>inst_handle = (HINSTANCE) GetWindowLong(win, GWL_HINSTANCE); <br>HWND mydial = CreateDialog(inst_handle, "SelectedParamBox", win, SelectedParamDlgProc); <br>if (mydial) { <br>ShowWindow(mydial, SW_SHOW); <br>UpdateWindow(mydial); <br>} <br>} <br>else MessageBox(win, "No sound currently selected", "Doh!", MB_ICONEXCLAMATION); <br>} <br>else MessageBox(win, "Sound not initialized!", "Doh!", MB_ICONEXCLAMATION); <br>} <br>break; <br>case MENU_SOUND_GLOBALPROPERTIES: <br>{ <br>if (RLDS3D_SoundInitialized()) { <br>inst_handle = (HINSTANCE) GetWindowLong(win, GWL_HINSTANCE); <br>HWND mydial = CreateDialog(inst_handle, "GlobalParamBox", win, GlobalParamDlgProc); <br>if (mydial) { <br>ShowWindow(mydial, SW_SHOW); <br>UpdateWindow(mydial); <br>} <br>} <br>else MessageBox(win, "Sound not initialized!", "Doh!", MB_ICONEXCLAMATION); <br>} <br>break; <br> <br>case MENU_FILE_ABOUT: <br>{ <br>inst_handle = (HINSTANCE) GetWindowLong(win, GWL_HINSTANCE); <br>DialogBox(inst_handle,"AboutBox", win, AboutDlgProc); <br>} <br>            break; <br> <br>        case MENU_FILE_OPEN: <br>            {    <br>                char *file = OpenNewFile(win); <br>if (file) { <br>RLDS3D_LoadXOF(file); <br>                } <br>            } <br>            break; <br> <br>        case MENU_FILE_EXIT: <br>            PostQuitMessage(0); <br>            break; <br> <br>        case MENU_EDIT_CUT: <br>            RLDS3D_CutVisual(); <br>            break; <br> <br>        case MENU_EDIT_COPY: <br>            RLDS3D_CopyVisual(); <br>            break; <br> <br>        case MENU_EDIT_PASTE: <br>            RLDS3D_PasteVisual(); <br>            break; <br> <br>        case MENU_EDIT_DELETE: <br>            RLDS3D_DeleteVisual(); <br>            break; <br> <br>        case MENU_EDIT_COLOUR: <br>// Currently everything is handled there but the selection wheel maybe should be out here? <br>RLDS3D_SetSelColour(); <br>            break; <br> <br>        case MENU_EDIT_BOXES: <br>            { <br>                HMENU menu; <br>if (RLDS3D_GetBoxes() == TRUE) RLDS3D_SetBoxes(FALSE); else RLDS3D_SetBoxes(TRUE); <br>                int checked = (RLDS3D_GetBoxes()==TRUE) ? MF_CHECKED : MF_UNCHECKED; <br>                menu = GetMenu(win); <br>                menu = GetSubMenu(menu, 1); <br>                CheckMenuItem(menu, MENU_EDIT_BOXES, MF_BYCOMMAND|checked); <br>            } <br>            break; <br> <br>case MENU_QUALITY_LIGHTING: <br>ToggleLighting(win); <br>break; <br> <br>// Fill Modes <br>case MENU_QUALITY_POINTS: <br>SetFillMode(win, D3DRMFILL_POINTS); <br>break; <br> <br>        case MENU_QUALITY_WIREFRAME: <br>            SetFillMode(win, D3DRMFILL_WIREFRAME); <br>            break; <br> <br>        case MENU_QUALITY_SOLID: <br>            SetFillMode(win, D3DRMFILL_SOLID); <br>            break; <br> <br>// Shading modes <br>        case MENU_QUALITY_FLAT: <br>            SetShadeMode(win, D3DRMSHADE_FLAT); <br>            break; <br> <br>        case MENU_QUALITY_GOURAUD: <br>            SetShadeMode(win, D3DRMSHADE_GOURAUD); <br>            break; <br> <br>        case MENU_QUALITY_PHONG: <br>            SetShadeMode(win, D3DRMSHADE_PHONG); <br>            break; <br> <br>// Color models <br>        case MENU_MODEL_MONO: <br>            SetModel(win, D3DCOLOR_MONO); <br>            break; <br> <br>        case MENU_MODEL_RGB: <br>            SetModel(win, D3DCOLOR_RGB); <br>            break; <br> <br>        case MENU_DITHER: <br>            ToggleDither(win); <br>            break; <br> <br>        case MENU_TEXTURE_FILTERING: <br>            ToggleTextureFiltering(win); <br>            break; <br> <br>        case MENU_LIGHT_DIRECTIONAL: <br>RLDS3D_AddDirectionalLight(); <br>break; <br>        case MENU_LIGHT_PARALLEL_POINT: <br>RLDS3D_AddParallelPointLight(); <br>break; <br>        case MENU_LIGHT_POINT: <br>RLDS3D_AddPointLight(); <br>break; <br>        case MENU_LIGHT_SPOT: <br>RLDS3D_AddSpotlight(); <br>break; <br>        } <br>        break; <br> <br>    case WM_DESTROY: <br>        PostQuitMessage( 0 ); <br>        break; <br> <br>    case WM_SIZE: <br>        { <br>            int width = LOWORD(lparam); <br>            int height = HIWORD(lparam); <br>            RLDS3D_ResizeViewport(width, height); <br>        } <br>        break; <br> <br>    case WM_ACTIVATE: <br>{ <br>RLDS3D_HandleActivate(wparam); <br>} <br>        break; <br> <br>    case WM_PAINT: <br>if (RLDS3D_WinDevice()) <br>{ <br>RECT r; <br>            PAINTSTRUCT ps; <br> <br>            if (GetUpdateRect(win, &amp;r, FALSE)) <br>            {   BeginPaint(win, &amp;ps); <br>RLDS3D_HandlePaint(&amp;ps); <br>                EndPaint(win, &amp;ps); <br>            } <br>        } <br>        else return DefWindowProc(win, msg, wparam, lparam); <br> <br>    default: <br>        return DefWindowProc(win, msg, wparam, lparam); <br>    } <br>    return 0L; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DS3DVI.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3077"></a>DS3DVI.H</h2>
<pre><code>/************************************************************************************************************ <br> <br>  Direct3DRM and DirectSound 3D interface designed for the Viewer Sample Application <br> <br>  (c) 1996 Microsoft Corporation <br> <br>************************************************************************************************************/ <br> <br>#ifndef ___DS3DVIEWER_INTERNAL <br>#define ___DS3DVIEWER_INTERNAL <br> <br>// "Internal" structure definitions and other include information used by <br>// the DS3DVIEW application.  We put this stuff here so other modules can <br>// access it without great pain. <br> <br>// Info for the 3D3RM  (RL info) <br>typedef struct _AppInfo <br>{    <br>        // The parent frame  <br>        LPDIRECT3DRMFRAME scene; <br>        // The frame for the camera (a child of the scene) <br>        LPDIRECT3DRMFRAME camera; <br>         <br>        // Device for Windows <br>    LPDIRECT3DRMDEVICE dev; <br>        // Defines how the 3D scene is rendered into the 2D window <br>    LPDIRECT3DRMVIEWPORT view; <br>         <br>        // Defines which color model (RGB/Ramp) is used for rendering - used when creating a device <br>        //  from the RL api <br>    D3DRMCOLORMODEL model; <br> <br>        // Whether or not the window is minimized (modified by the resizing handler) <br>        BOOL bMinimized; <br>} AppInfo; <br> <br> <br> <br>/* <br>** Error Checking code <br>*/ <br>BOOL D3DRM_SUCCEED(HRESULT result, int force_critical = -1, char* info = NULL); <br>BOOL DS3D_SUCCEED(HRESULT result, int force_critical = -1, char* info = NULL); <br> <br> <br>/****** DirectSound3D Helper Stuff ************************************/ <br> <br>// Simple thing to copy vectors to each other independant of type <br>#define RLV_TO_DSV(in,out) out.x = in.x;\ <br>                                                   out.y = in.y;\ <br>                                                   out.z = in.z; <br> <br> <br>#endif <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

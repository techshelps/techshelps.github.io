<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3367"></a>README.TXT</h2>
<pre><code>(NOTE: this file contains extended ASCII and may not appear <br>       correctly if your font does not support extended ASCII <br>       characters.  This file will appear correctly in the <br>       MS-DOS Editor.) <br> <br>This effect uses palette animation. <br> <br>Here is how it works: <br> <br>Imagine a 4x4 display using 4 colors.  We could set the colors <br>up to look something like this: <br> <br>   1 2 3 4 <br>   1 2 3 4 <br>   1 2 3 4 <br>   1 2 3 4 <br> <br>Now we can cycle all of the colors in each row to the right. (The <br>one on the right will wrap-around to the left.) <br> <br>   4 1 2 3 <br>   4 1 2 3 <br>   4 1 2 3 <br>   4 1 2 3 <br> <br>If we continue this cycling we would get animated lines moving <br>to the right.  The same can be done to animate the lines going <br>down. i.e. <br> <br>   1 1 1 1      4 4 4 4 <br>   2 2 2 2  -&gt;  1 1 1 1 <br>   3 3 3 3  -&gt;  2 2 2 2 <br>   4 4 4 4      3 3 3 3 <br> <br>Now if we expand our palette to 16 color we can combine moving <br>down and right at the same time. <br> <br>   Move right: <br> <br>       1  2  3  4       4  1  2  3 <br>       5  6  7  8  -&gt;   8  5  6  7 <br>       9 10 11 12  -&gt;  12  9 10 11 <br>      13 14 15 16      16 13 14 15 <br> <br>   Move down: <br> <br>       1  2  3  4      13 14 15 16 <br>       5  6  7  8  -&gt;   1  2  3  4 <br>       9 10 11 12  -&gt;   5  6  7  8 <br>      13 14 15 16       9 10 11 12 <br> <br>   Move right and down: <br> <br>       1  2  3  4       4  1  2  3      16 13 14 15 <br>       5  6  7  8  -&gt;   8  5  6  7  -&gt;   4  1  2  3 <br>       9 10 11 12  -&gt;  12  9 10 11  -&gt;   8  5  6  7 <br>      13 14 15 16      16 13 14 15      12  9 10 11 <br> <br>Now if you tile these 4x4 blocks end to end and cycle the colors <br>as above, you get a moving checkerboard. <br> <br>     <br>                                                                  <br>                                                                 <br>                                                                 <br>                      -&gt;                    -&gt;                   <br>                      -&gt;                    -&gt;                    <br>                                                                 <br>                                                                 <br>                                                                  <br> <br> <br>Wormhole does the same thing, except it uses 15x15 blocks (225 <br>colors) and instead of tiling the blocks end to end on a flat <br>plane, it tiles them in 3D converging at the center of the <br>wormhole. <br> <br>The following code will generate the 3D wormhole using the  <br>aforementioned 15x15 grids. <br> <br>//Do all the work! <br>//convert r,theta,z to x,y,x to screen x,y <br>//plot the point <br>//z=-1.0+(log(2.0*j/DIVS) is the line that sets the math eqn for plot <br>//Feel free to try other functions! <br>//Cylindrical coordinates, i.e. z=f(r,theta) <br> <br>#define STRETCH 25 <br>#define PI      3.14159265358979323846 <br>#define XCENTER 160 <br>#define YCENTER 50 <br>#define DIVS    1200 <br>#define SPOKES  2400 <br> <br>void transarray(void) <br>{ <br>float x,y,z; <br>int i,j,color; <br>for(j=1;j&lt;DIVS+1;j++) <br>for(i=0;i&lt;SPOKES;i++) <br>{ <br>z=-1.0+(log(2.0*j/DIVS)); <br>x=(320.0*j/DIVS*cos(2*PI*i/SPOKES)); <br>y=(240.0*j/DIVS*sin(2*PI*i/SPOKES)); <br>y=y-STRETCH*z; <br>x+=XCENTER; <br>y+=YCENTER; <br>color=((i/8)%15)+15*((j/6)%15)+1; <br>if ((x&gt;=0)&amp;&amp;(x&lt;=320)&amp;&amp;(y&gt;=0)&amp;&amp;(y&lt;=200)) <br>plot((int) x,(int) y,color); <br>} <br>} <br> <br>After loading the bitmap to a direct draw surface, all that is <br>left to do is rotate the colors and you have a wormhole! <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

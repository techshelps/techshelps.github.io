<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DPSLOTS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3067"></a>DPSLOTS.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1997 Microsoft Corporation.  All Rights Reserved. <br> * <br> *  File:       dpslots.h <br> *  Content:common dpslots headers <br> * <br> ***************************************************************************/ <br> <br>#define IDIRECTPLAY2_OR_GREATER <br>#include &lt;dplay.h&gt; <br>#include &lt;dplobby.h&gt; <br> <br>// constants <br>#define NUMWHEELS    3// no. wheels <br>#define SLOTSPERWHEEL    6// no. slots per wheel <br>#define MAXSTRLEN200// max size of a string <br>#define DEFAULTDATABASE"slotsdb.txt" // default name of database file <br> <br>// flags to use when creating players <br>#define CLIENTPLAYERFLAGS0 <br>#define SERVERPLAYERFLAGS(DPPLAYER_SERVERPLAYER) <br> <br>// flags to use when sending messages <br>#define NONSECURESENDFLAGS(DPSEND_GUARANTEED) <br>#define SECURESENDFLAGS(DPSEND_GUARANTEED |\ <br> DPSEND_SIGNED |\ <br> DPSEND_ENCRYPTED) <br>#define SENDFLAGS(bIsSecure)((bIsSecure) ? SECURESENDFLAGS : NONSECURESENDFLAGS) <br> <br>// flags to use when creating sessions <br>#define NONSECURESESSIONFLAGS(DPSESSION_KEEPALIVE |\ <br> DPSESSION_CLIENTSERVER) <br>#define SECURESESSIONFLAGS(DPSESSION_KEEPALIVE |\ <br> DPSESSION_CLIENTSERVER |\ <br> DPSESSION_SECURESERVER) <br>#define SESSIONFLAGS(bIsSecure)((bIsSecure) ? SECURESESSIONFLAGS : NONSECURESESSIONFLAGS) <br> <br>// client messages <br>#define BALANCEREQUEST300// request for account balance <br>#define SPINREQUEST302// request for spin <br> <br>// server messages <br>#define BALANCERESPONSE400// account balance reply <br>#define SPINRESPONSE401// spin reply <br> <br>// structure used to store DirectPlay information <br>typedef struct { <br>LPDIRECTPLAY3AlpDirectPlay3A;// IDirectPlay3A interface pointer <br>HANDLEhPlayerEvent;// player event to use <br>DPIDdpidPlayer;// ID of player created <br>BOOLbIsHost;// TRUE if we are hosting the session <br>BOOLbIsSecure;// TRUE if session is secure <br>} DPLAYINFO, *LPDPLAYINFO; <br> <br>// message structures <br> <br>// used to request the results of a wager <br>typedef struct { <br>    DWORD   dwType;// message type <br>    DWORD   dwAmountBet;// amount to wager <br>} MSG_SPINREQUEST, *LPMSG_SPINREQUEST; <br> <br>// response to wager request <br>typedef struct { <br>    DWORD   dwType;// message type <br>HRESULThr;// result of request <br>LONGdwAmountWonOrLost;// amount won or lost <br>    DWORD   dwBalance;// current balance after wager <br>    DWORD   dwIndex[NUMWHEELS];// slot settings <br>} MSG_SPINRESPONSE, *LPMSG_SPINRESPONSE; <br> <br>// used to request current balance <br>typedef struct { <br>    DWORDdwType;// message type <br>} MSG_BALANCEREQUEST, *LPMSG_BALANCEREQUEST; <br> <br>// response to balance request <br>typedef struct { <br>    DWORDdwType;// message type <br>HRESULThr;// result of request <br>    DWORDdwBalance;// current balance <br>} MSG_BALANCERESPONSE, *LPMSG_BALANCERESPONSE; <br> <br>// guid for this application <br>// {EC4F7AA0-E1E0-11d0-9C50-00A0C905425E} <br>DEFINE_GUID(DPSLOTS_GUID,  <br>0xec4f7aa0, 0xe1e0, 0x11d0, 0x9c, 0x50, 0x0, 0xa0, 0xc9, 0x5, 0x42, 0x5e); <br> <br>// globals <br>extern HINSTANCEghInstance;// instance of application <br>extern CHARgszDatabaseName[MAXSTRLEN]; <br> <br>// common prototypes <br>extern HRESULTConnectUsingLobby(LPDPLAYINFO lpDPInfo); <br>extern HRESULTConnectUsingDialog(HINSTANCE hInstance, LPDPLAYINFO lpDPInfo); <br>extern voidErrorBox(LPSTR lpszErrorStr, HRESULT hr); <br>extern voidCheckDlgItem(HWND hDlg, int nIDDlgItem, BOOL bCheck); <br>extern BOOLDlgItemIsChecked(HWND hDlg, int nIDDlgItem); <br>extern voidEnableDlgButton(HWND hDlg, int nIDDlgItem, BOOL bEnable); <br> <br>// client prototypes <br>extern BOOL CALLBACKClientWndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam); <br>extern voidClientSystemMessage(LPDPLAYINFO lpDPInfo, LPDPMSG_GENERIC lpMsg, DWORD dwMsgSize, <br>DPID idFrom, DPID idTo); <br>extern voidClientApplicationMessage(LPDPLAYINFO lpDPInfo, LPDPMSG_GENERIC lpMsg, DWORD dwMsgSize, <br> DPID idFrom, DPID idTo); <br>// server prototypes <br>extern BOOL CALLBACKServerWndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam); <br>extern voidServerSystemMessage(LPDPLAYINFO lpDPInfo, LPDPMSG_GENERIC lpMsg, DWORD dwMsgSize, <br>DPID idFrom, DPID idTo); <br>extern voidServerApplicationMessage(LPDPLAYINFO lpDPInfo, LPDPMSG_GENERIC lpMsg, DWORD dwMsgSize, <br> DPID idFrom, DPID idTo); </code></pre>
<p>&nbsp;</p></body>
</HTML>

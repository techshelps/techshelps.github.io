<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DPSLOTS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3066"></a>DPSLOTS.CPP</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1997 Microsoft Corporation.  All Rights Reserved. <br> * <br> *  File:       dpslots.cpp <br> *  Content:common dpslots code <br> * <br> ***************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>#include "dpslots.h" <br>#include "resource.h" <br> <br>// globals <br>HANDLEghReceiveThread = NULL;// handle of receive thread <br>DWORDgidReceiveThread = 0;// id of receive thread <br>HANDLEghKillReceiveEvent = NULL;// event used to kill receive thread <br>HINSTANCEghInstance = NULL;// application instance <br>CHARgszDatabaseName[MAXSTRLEN];// database name <br> <br>// prototypes <br>HRESULTSetupConnection(HINSTANCE hInstance, LPDPLAYINFO lpDPInfo); <br>HRESULTShutdownConnection(LPDPLAYINFO lpDPInfo); <br>DWORD WINAPIReceiveThread(LPVOID lpThreadParameter); <br>HRESULTReceiveMessage(LPDPLAYINFO lpDPInfo); <br>voidHandleSystemMessage(LPDPLAYINFO lpDPInfo, LPDPMSG_GENERIC lpMsg, DWORD dwMsgSize, <br>DPID idFrom, DPID idTo); <br>voidHandleApplicationMessage(LPDPLAYINFO lpDPInfo, LPDPMSG_GENERIC lpMsg, DWORD dwMsgSize, <br> DPID idFrom, DPID idTo); <br> <br>int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, <br>   LPSTR lpCmdLine, int nCmdShow ) <br>{ <br>DPLAYINFODPInfo; <br>intiResult = 0; <br>HRESULThr; <br> <br>ghInstance = hInstance; <br>srand(GetTickCount()); <br>lstrcpy(gszDatabaseName, DEFAULTDATABASE); <br> <br>// Initialize COM library <br>hr = CoInitialize(NULL); <br>if (FAILED(hr)) <br>goto FAILURE; <br> <br>// setup the connection <br>hr = SetupConnection(hInstance, &amp;DPInfo); <br>if FAILED(hr) <br>goto FAILURE; <br> <br>// show the server window <br>if (DPInfo.bIsHost) <br>{ <br>iResult = DialogBoxParam(hInstance, MAKEINTRESOURCE(IDD_SERVERDIALOG), NULL, (DLGPROC) ServerWndProc, (LPARAM) &amp;DPInfo); <br>} <br> <br>// show the client window <br>else <br>{ <br>iResult = DialogBoxParam(hInstance, MAKEINTRESOURCE(IDD_CLIENTDIALOG), NULL, (DLGPROC) ClientWndProc, (LPARAM) &amp;DPInfo); <br>} <br> <br>FAILURE: <br>// shut down the connection <br>hr = ShutdownConnection(&amp;DPInfo); <br> <br>// Uninitialize the COM library <br>CoUninitialize(); <br> <br>return (iResult); <br>} <br> <br>HRESULT SetupConnection(HINSTANCE hInstance, LPDPLAYINFO lpDPInfo) <br>{ <br>HRESULThr; <br> <br>ZeroMemory(lpDPInfo, sizeof(DPLAYINFO)); <br> <br>// create event used by DirectPlay to signal a message has arrived <br>lpDPInfo-&gt;hPlayerEvent = CreateEvent(NULL,// no security <br> FALSE,// auto reset <br> FALSE,// initial event reset <br> NULL);// no name <br>if (lpDPInfo-&gt;hPlayerEvent == NULL) <br>{ <br>hr = DPERR_NOMEMORY; <br>goto FAILURE; <br>} <br> <br>// create event used to signal that the receive thread should exit <br>ghKillReceiveEvent = CreateEvent(NULL,// no security <br> FALSE,// auto reset <br> FALSE,// initial event reset <br> NULL);// no name <br>if (ghKillReceiveEvent == NULL) <br>{ <br>hr = DPERR_NOMEMORY; <br>goto FAILURE; <br>} <br> <br>// create thread to receive player messages <br>ghReceiveThread = CreateThread(NULL,// default security <br>   0,// default stack size <br>   ReceiveThread,// pointer to thread routine <br>   lpDPInfo,// argument for thread <br>   0,// start it right away <br>   &amp;gidReceiveThread); <br>if (ghReceiveThread == NULL) <br>{ <br>hr = DPERR_NOMEMORY; <br>goto FAILURE; <br>} <br> <br>// try to connect using the lobby <br>hr = ConnectUsingLobby(lpDPInfo); <br>if FAILED(hr) <br>{ <br>// if the error returned is DPERR_NOTLOBBIED, that means we <br>// were not launched by a lobby and we should ask the user for <br>// connection settings. If any other error is returned it means <br>// we were launched by a lobby but there was an error making the <br>// connection. <br> <br>if (hr != DPERR_NOTLOBBIED) <br>ErrorBox("Could not connect using lobby because of error 0x%08X", hr); <br> <br>// if there is no lobby connection, ask the user for settings <br>hr = ConnectUsingDialog(hInstance, lpDPInfo); <br>if FAILED(hr) <br>goto FAILURE; <br>} <br> <br>return (DP_OK); <br> <br>FAILURE: <br>ShutdownConnection(lpDPInfo); <br> <br>return (hr); <br>} <br> <br>HRESULT ShutdownConnection(LPDPLAYINFO lpDPInfo) <br>{ <br>if (ghReceiveThread) <br>{ <br>// wake up receive thread and wait for it to quit <br>SetEvent(ghKillReceiveEvent); <br>WaitForSingleObject(ghReceiveThread, INFINITE); <br> <br>CloseHandle(ghReceiveThread); <br>ghReceiveThread = NULL; <br>} <br> <br>if (ghKillReceiveEvent) <br>{ <br>CloseHandle(ghKillReceiveEvent); <br>ghKillReceiveEvent = NULL; <br>} <br> <br>if (lpDPInfo-&gt;lpDirectPlay3A) <br>{ <br>if (lpDPInfo-&gt;dpidPlayer) <br>{ <br>lpDPInfo-&gt;lpDirectPlay3A-&gt;DestroyPlayer(lpDPInfo-&gt;dpidPlayer); <br>lpDPInfo-&gt;dpidPlayer = 0; <br>} <br>lpDPInfo-&gt;lpDirectPlay3A-&gt;Close(); <br>lpDPInfo-&gt;lpDirectPlay3A-&gt;Release(); <br>lpDPInfo-&gt;lpDirectPlay3A = NULL; <br>} <br> <br>if (lpDPInfo-&gt;hPlayerEvent) <br>{ <br>CloseHandle(lpDPInfo-&gt;hPlayerEvent); <br>lpDPInfo-&gt;hPlayerEvent = NULL; <br>} <br> <br>return (DP_OK); <br>} <br> <br>DWORD WINAPI ReceiveThread(LPVOID lpThreadParameter) <br>{ <br>    LPDPLAYINFOlpDPInfo = (LPDPLAYINFO) lpThreadParameter; <br>HANDLEeventHandles[2]; <br> <br>eventHandles[0] = lpDPInfo-&gt;hPlayerEvent; <br>eventHandles[1] = ghKillReceiveEvent; <br> <br>// loop waiting for player events. If the kill event is signaled <br>// the thread will exit <br>while (WaitForMultipleObjects(2, eventHandles, FALSE, INFINITE) == WAIT_OBJECT_0) <br>{ <br>// receive any messages in the queue <br>ReceiveMessage(lpDPInfo); <br>} <br> <br>ExitThread(0); <br> <br>return (0); <br>} <br> <br>HRESULT ReceiveMessage(LPDPLAYINFO lpDPInfo) <br>{ <br>DPIDidFrom, idTo; <br>LPVOIDlpvMsgBuffer; <br>DWORDdwMsgBufferSize; <br>HRESULThr; <br> <br>lpvMsgBuffer = NULL; <br>dwMsgBufferSize = 0; <br> <br>// loop to read all messages in queue <br>do <br>{ <br>// loop until a single message is successfully read <br>do <br>{ <br>// read messages from any player, including system player <br>idFrom = 0; <br>idTo = 0; <br> <br>hr = lpDPInfo-&gt;lpDirectPlay3A-&gt;Receive(&amp;idFrom, &amp;idTo, DPRECEIVE_ALL, <br>   lpvMsgBuffer, &amp;dwMsgBufferSize); <br> <br>// not enough room, so resize buffer <br>if (hr == DPERR_BUFFERTOOSMALL) <br>{ <br>if (lpvMsgBuffer) <br>GlobalFreePtr(lpvMsgBuffer); <br>lpvMsgBuffer = GlobalAllocPtr(GHND, dwMsgBufferSize); <br>if (lpvMsgBuffer == NULL) <br>hr = DPERR_OUTOFMEMORY; <br>} <br>} while (hr == DPERR_BUFFERTOOSMALL); <br> <br>if ((SUCCEEDED(hr)) &amp;&amp;// successfully read a message <br>(dwMsgBufferSize &gt;= sizeof(DPMSG_GENERIC)))// and it is big enough <br>{ <br>// check for system message <br>if (idFrom == DPID_SYSMSG) <br>{ <br>HandleSystemMessage(lpDPInfo, (LPDPMSG_GENERIC) lpvMsgBuffer, <br>dwMsgBufferSize, idFrom, idTo); <br>} <br>else <br>{ <br>HandleApplicationMessage(lpDPInfo, (LPDPMSG_GENERIC) lpvMsgBuffer, <br> dwMsgBufferSize, idFrom, idTo); <br>} <br>} <br>} while (SUCCEEDED(hr)); <br> <br>// free any memory we created <br>if (lpvMsgBuffer) <br>GlobalFreePtr(lpvMsgBuffer); <br> <br>return (DP_OK); <br>} <br> <br>void HandleSystemMessage(LPDPLAYINFO lpDPInfo, LPDPMSG_GENERIC lpMsg, DWORD dwMsgSize, <br> DPID idFrom, DPID idTo) <br>{ <br>if (lpDPInfo-&gt;bIsHost) <br>{ <br>ServerSystemMessage(lpDPInfo, lpMsg, dwMsgSize, idFrom, idTo); <br>} <br>else <br>{ <br>ClientSystemMessage(lpDPInfo, lpMsg, dwMsgSize, idFrom, idTo); <br>} <br>} <br> <br>void HandleApplicationMessage(LPDPLAYINFO lpDPInfo, LPDPMSG_GENERIC lpMsg, DWORD dwMsgSize, <br>  DPID idFrom, DPID idTo) <br>{ <br>// When using a secure session we should not get any messages here <br>// because encrypted messages come through as system messages. Therefore, <br>// it is a security hole to process messages here. <br> <br>if (lpDPInfo-&gt;bIsSecure) <br>return; <br> <br>if (lpDPInfo-&gt;bIsHost) <br>{ <br>ServerApplicationMessage(lpDPInfo, lpMsg, dwMsgSize, idFrom, idTo); <br>} <br>else <br>{ <br>ClientApplicationMessage(lpDPInfo, lpMsg, dwMsgSize, idFrom, idTo); <br>} <br>} <br> <br>void ErrorBox(LPSTR lpszErrorStr, HRESULT hr) <br>{ <br>CHARszStr[200]; <br> <br>wsprintf(szStr, lpszErrorStr, hr); <br> <br>MessageBox(NULL, szStr, "Error", MB_OK); <br>} <br> <br>void CheckDlgItem(HWND hDlg, int nIDDlgItem, BOOL bCheck) <br>{ <br>SendDlgItemMessage(hDlg, nIDDlgItem, BM_SETCHECK, <br>   (WPARAM) ((bCheck) ?  BST_CHECKED : BST_UNCHECKED), (LPARAM) 0); <br>} <br> <br>BOOL DlgItemIsChecked(HWND hDlg, int nIDDlgItem) <br>{ <br>return ((SendDlgItemMessage(hDlg, nIDDlgItem, BM_GETCHECK, (WPARAM) 0, (LPARAM) 0) == BST_CHECKED) ? TRUE : FALSE); <br>} <br> <br>void EnableDlgButton(HWND hDlg, int nIDDlgItem, BOOL bEnable) <br>{ <br>EnableWindow(GetDlgItem(hDlg, nIDDlgItem), bEnable); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

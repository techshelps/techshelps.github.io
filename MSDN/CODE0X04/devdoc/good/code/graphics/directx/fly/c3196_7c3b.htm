<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FLY.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3197"></a>FLY.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: fly.c <br> * <br> ***************************************************************************/ <br> <br>/* <br> * landscape fly by <br> */ <br> <br>#include &lt;math.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include "rmdemo.h" <br> <br>typedef struct PATHINFO { <br>    D3DVALUE t; <br>    LPDIRECT3DRMFRAME chase; <br>    LPDIRECT3DRMFRAME plane_frame; <br>    LPDIRECT3DRMANIMATION flight_path; <br>} pathInfo; <br> <br>#define NUM_SMOKE 7 <br>int smoke_num = 0; <br>int done_all = 0; <br> <br>LPDIRECT3DRMFRAME smoke[NUM_SMOKE]; <br> <br>static void CDECL cleanupObjects(LPDIRECT3DRMOBJECT obj, void* arg) <br>{ <br>    pathInfo *info = (pathInfo*) arg; <br>    int i; <br> <br>    for (i = 0; i &lt; NUM_SMOKE; i++) <br>smoke[i]-&gt;lpVtbl-&gt;Release(smoke[i]); <br>    info-&gt;chase-&gt;lpVtbl-&gt;Release(info-&gt;chase); <br>    info-&gt;plane_frame-&gt;lpVtbl-&gt;Release(info-&gt;plane_frame); <br>    info-&gt;flight_path-&gt;lpVtbl-&gt;Release(info-&gt;flight_path); <br>} <br> <br>static void CDECL moveCamera(LPDIRECT3DRMFRAME camera, void *arg, D3DVALUE delta) <br>{ <br>    D3DVECTOR dir, up; <br>    D3DVECTOR dirCam, upCam; <br>    struct PATHINFO *info; <br>    LPDIRECT3DRMFRAME scene; <br>    D3DVALUE a_bit; <br> <br>    info = (struct PATHINFO *) arg; <br>    camera-&gt;lpVtbl-&gt;GetScene(camera, &amp;scene); <br>    info-&gt;t += D3DVAL(0.04); <br>    info-&gt;flight_path-&gt;lpVtbl-&gt;SetFrame(info-&gt;flight_path, camera); <br>    info-&gt;flight_path-&gt;lpVtbl-&gt;SetTime(info-&gt;flight_path, info-&gt;t); <br> <br>    info-&gt;flight_path-&gt;lpVtbl-&gt;SetFrame(info-&gt;flight_path, info-&gt;plane_frame); <br>    info-&gt;flight_path-&gt;lpVtbl-&gt;SetTime(info-&gt;flight_path, info-&gt;t + D3DVAL(0.5)); <br> <br>    info-&gt;flight_path-&gt;lpVtbl-&gt;SetFrame(info-&gt;flight_path, info-&gt;chase); <br>    info-&gt;flight_path-&gt;lpVtbl-&gt;SetTime(info-&gt;flight_path, info-&gt;t + D3DVAL(1.0)); <br> <br>    camera-&gt;lpVtbl-&gt;LookAt(camera, info-&gt;plane_frame, scene, D3DRMCONSTRAIN_Z); <br>    info-&gt;plane_frame-&gt;lpVtbl-&gt;LookAt(info-&gt;plane_frame, info-&gt;chase,scene, <br>                                      D3DRMCONSTRAIN_Y); <br>    camera-&gt;lpVtbl-&gt;GetOrientation(camera, scene, &amp;dirCam, &amp;upCam); <br>    info-&gt;plane_frame-&gt;lpVtbl-&gt;GetOrientation(info-&gt;plane_frame, scene, <br>                                              &amp;dir, &amp;up); <br>    up.x = dir.x - dirCam.x; <br>    up.y = dir.y - dirCam.y + D3DVAL(1.0); <br>    up.z = dir.z - dirCam.z; <br>                 <br>    info-&gt;plane_frame-&gt;lpVtbl-&gt;SetOrientation(info-&gt;plane_frame, scene, <br>      dir.x, dir.y, dir.z, <br>      up.x, up.y, up.z); <br> <br>    if (done_all &lt; NUM_SMOKE) { <br>scene-&gt;lpVtbl-&gt;AddVisual(scene, (LPDIRECT3DRMVISUAL) smoke[smoke_num]); <br>done_all++; <br>    } else { <br>if (smoke_num == NUM_SMOKE) { <br>    smoke_num = 0; <br>} <br>    } <br>    a_bit = D3DDivide(D3DDivide(D3DVAL(smoke_num), D3DVAL(NUM_SMOKE)), <br>                     D3DVAL(10.0)); <br>    info-&gt;flight_path-&gt;lpVtbl-&gt;SetFrame(info-&gt;flight_path, smoke[smoke_num]); <br>    info-&gt;flight_path-&gt;lpVtbl-&gt;SetTime(info-&gt;flight_path,  <br>                                       info-&gt;t + D3DVAL(0.4) - a_bit); <br>    smoke[smoke_num]-&gt;lpVtbl-&gt;SetOrientation(smoke[smoke_num], scene, <br>     dir.x, dir.y, dir.z, <br>     up.x, up.y, up.z); <br>    smoke_num++; <br>    scene-&gt;lpVtbl-&gt;Release(scene); <br>} <br> <br>BOOL <br>BuildScene(LPDIRECT3DRMDEVICE dev, LPDIRECT3DRMVIEWPORT view, <br>   LPDIRECT3DRMFRAME scene, LPDIRECT3DRMFRAME camera) <br>{ <br>    LPDIRECT3DRMFRAME lights = NULL; <br>    D3DRMBOX box; <br>    LPDIRECT3DRMMESHBUILDER plane_builder = NULL; <br>    LPDIRECT3DRMMESHBUILDER mesh_builder = NULL; <br>    LPDIRECT3DRMMESHBUILDER smoke_builder = NULL; <br>    LPDIRECT3DRMMESH plane = NULL; <br>    LPDIRECT3DRMMESH mesh = NULL; <br>    LPDIRECT3DRMMESH smokemesh = NULL; <br>    LPDIRECT3DRMLIGHT ambient = NULL; <br>    LPDIRECT3DRMLIGHT parallel = NULL; <br>    D3DCOLOR smokec; <br>    LPDIRECT3DRMFRAME frame = NULL; <br>    LPDIRECT3DRMFRAME sl = NULL; <br>    LPDIRECT3DRMFRAME sr = NULL; <br>    HRESULT rval; <br>    int i; <br>    int numPts = 11; <br>    D3DVECTOR path[] = { <br>-D3DVAL(8.0), D3DVAL(3.0), -D3DVAL(12.0), <br>-D3DVAL(4.0), D3DVAL(2.0), -D3DVAL(8.0), <br>-D3DVAL(2.0), D3DVAL(0.0), -D3DVAL(4.0), <br>D3DVAL(9.0), -D3DVAL(1.0), D3DVAL(7.0), <br>D3DVAL(4.0), D3DVAL(6.0), D3DVAL(10.0), <br>-D3DVAL(4.0), D3DVAL(5.0), D3DVAL(9.0), <br>D3DVAL(5.5), D3DVAL(3.5), -D3DVAL(6.5), <br>D3DVAL(2.0), D3DVAL(5.0), -D3DVAL(10.0), <br>D3DVAL(0.0), D3DVAL(4.0), -D3DVAL(15.0), <br>-D3DVAL(5.0), D3DVAL(4.0), -D3DVAL(15.0), <br>-D3DVAL(8.0), D3DVAL(3.0), -D3DVAL(12.0) <br>    }; <br>    D3DVALUE path_t[] = { <br>        D3DVAL(0), D3DVAL(1), D3DVAL(2), D3DVAL(3), D3DVAL(4), D3DVAL(5), D3DVAL(6), D3DVAL(7), D3DVAL(8), D3DVAL(9), D3DVAL(10) <br>    }; <br>    static pathInfo info; <br> <br>    if (FAILED(view-&gt;lpVtbl-&gt;SetField(view, D3DVAL(0.8)))) <br>goto generic_error; <br>    if (FAILED(dev-&gt;lpVtbl-&gt;SetQuality(dev, D3DRMRENDER_GOURAUD))) <br>goto generic_error; <br>#ifdef FOG <br>    if (FAILED(dev-&gt;lpVtbl-&gt;SetDither(dev, TRUE))) <br>goto generic_error; <br>    if (FAILED(scene-&gt;lpVtbl-&gt;SetFogEnable(scene, TRUE))) <br>goto generic_error; <br>    if (FAILED(scene-&gt;lpVtbl-&gt;SetFogParams(scene, 1, 30, 1))) <br>goto generic_error; <br>#endif <br> <br>    /* <br>     * This Demo flies a plane through a small landscape, followed by a <br>     * camera. The paths are spline curves. <br>     */ <br> <br>    /* <br>     * Initialise smoke trail <br>     */ <br>    smokec = D3DRMCreateColorRGBA(D3DVAL(0.6), D3DVAL(0.6), D3DVAL(0.6), <br>D3DVAL(0.5)); <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;smoke_builder))) <br>goto generic_error; <br>    rval = smoke_builder-&gt;lpVtbl-&gt;Load(smoke_builder, "sphere0.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load sphere0.x.\n%s", D3DRMErrorToString(rval)); <br>goto ret_with_error; <br>    } <br>    if (FAILED(smoke_builder-&gt;lpVtbl-&gt;Scale(smoke_builder, D3DVAL(0.015), D3DVAL(0.015), <br>                                 D3DVAL(0.015)))) <br> goto generic_error; <br> <br>    if (FAILED(smoke_builder-&gt;lpVtbl-&gt;CreateMesh(smoke_builder, &amp;smokemesh))) <br>goto generic_error; <br>    for (i = 0; i &lt; NUM_SMOKE; i++) { <br>if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;smoke[i]))) <br>    goto generic_error; <br>if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, smoke[i], &amp;sl))) <br>    goto generic_error; <br>if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, smoke[i], &amp;sr))) <br>    goto generic_error; <br> <br>if (FAILED(sl-&gt;lpVtbl-&gt;AddVisual(sl, (LPDIRECT3DRMVISUAL) smokemesh))) <br>    goto generic_error; <br>if (FAILED(sr-&gt;lpVtbl-&gt;AddVisual(sr, (LPDIRECT3DRMVISUAL) smokemesh))) <br>    goto generic_error; <br>if (FAILED(sr-&gt;lpVtbl-&gt;SetPosition(sr, smoke[i], D3DVAL(-0.1), D3DVAL(0.0), <br>                                   D3DVAL(0.0)))) <br>   goto generic_error; <br>if (FAILED(smoke[i]-&gt;lpVtbl-&gt;SetMaterialMode(smoke[i], D3DRMMATERIAL_FROMFRAME))) <br>    goto generic_error; <br>if (FAILED(smoke[i]-&gt;lpVtbl-&gt;SetColor(smoke[i], smokec))) <br>    goto generic_error; <br>if (FAILED(sl-&gt;lpVtbl-&gt;SetMaterialMode(sl, D3DRMMATERIAL_FROMPARENT))) <br>    goto generic_error; <br>if (FAILED(sr-&gt;lpVtbl-&gt;SetMaterialMode(sr, D3DRMMATERIAL_FROMPARENT))) <br>    goto generic_error; <br>RELEASE(sl); <br>RELEASE(sr); <br>    } <br>    /* <br>     * initialize the lights in the scene <br>     */ <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;lights))) <br>goto generic_error; <br>    if (FAILED(lights-&gt;lpVtbl-&gt;SetPosition(lights, scene, D3DVAL(5.0), D3DVAL(5.0), <br>    -D3DVAL(5.0)))) <br>goto generic_error; <br>                                 <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_PARALLELPOINT, D3DVAL(0.8), <br>D3DVAL(0.6), D3DVAL(0.7), &amp;parallel))) <br>goto generic_error; <br>                                   <br>    if (FAILED(lights-&gt;lpVtbl-&gt;AddLight(lights, parallel))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_AMBIENT, D3DVAL(0.1), <br>                                  D3DVAL(0.1), D3DVAL(0.1), &amp;ambient))) <br>  goto generic_error; <br>    if (FAILED(scene-&gt;lpVtbl-&gt;AddLight(scene, ambient))) <br>goto generic_error; <br> <br>    /* <br>     * load mesh file <br>     */ <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;frame))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;mesh_builder))) <br>goto generic_error; <br>    if (FAILED(mesh_builder-&gt;lpVtbl-&gt;Load(mesh_builder, "land4.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL))) <br>goto generic_error; <br>    if (FAILED(mesh_builder-&gt;lpVtbl-&gt;Scale(mesh_builder, D3DVAL(10.0), D3DVAL(8.0), <br>                                D3DVAL(10.0)))) <br>goto generic_error; <br>    if (FAILED(mesh_builder-&gt;lpVtbl-&gt;GetBox(mesh_builder, &amp;box))) <br>goto generic_error; <br> <br>    /* <br>     * Color the landscape's faces. <br>     */ <br>    if (mesh_builder) { <br>LPDIRECT3DRMFACEARRAY faces; <br>LPDIRECT3DRMFACE this_face; <br>int face_count, vertex_count; <br>int j; <br>D3DVALUE range, height; <br>D3DVECTOR *coords; <br> <br>if (FAILED(mesh_builder-&gt;lpVtbl-&gt;GetFaces(mesh_builder, &amp;faces))) <br>    goto generic_error; <br>face_count = faces-&gt;lpVtbl-&gt;GetSize(faces); <br>     <br>range = box.max.y - box.min.y; <br> <br>/* <br> * color the faces according to the height <br> */ <br>for (i = 0; i &lt; face_count; i++) { <br>    faces-&gt;lpVtbl-&gt;GetElement(faces, i, &amp;this_face); <br>    vertex_count = this_face-&gt;lpVtbl-&gt;GetVertexCount(this_face); <br>    coords = (LPD3DVECTOR) malloc(vertex_count * sizeof(D3DVECTOR)); <br>    this_face-&gt;lpVtbl-&gt;GetVertices(this_face, &amp;vertex_count, <br>                                   coords, NULL); <br>    if (vertex_count) { <br>/* <br> * find maximum height of the face <br> */ <br>height = coords[0].y; <br>for (j = 1; j &lt; vertex_count; j++) { <br>    if (coords[j].y &gt; height) <br>height = coords[j].y; <br>} <br>height = D3DDivide((height - box.min.y), range); <br> <br>if (height &lt; D3DVAL(0.03))/* water */ <br>    this_face-&gt;lpVtbl-&gt;SetColorRGB(this_face, <br>     D3DVAL(0.2), D3DVAL(0.2), D3DVAL(0.5)); <br>else if (height &lt; D3DVAL(0.3))/* greenery */ <br>    this_face-&gt;lpVtbl-&gt;SetColorRGB(this_face, <br>     D3DVAL(0.1), D3DVAL(0.8), D3DVAL(0.1)); <br>else if (height &lt; D3DVAL(0.5))/* rocks */ <br>    this_face-&gt;lpVtbl-&gt;SetColorRGB(this_face, D3DVAL(0.6), <br>                                    D3DVAL(0.3),D3DVAL(0.3)); <br>else if (height &lt; D3DVAL(0.7))/* dirty snow */ <br>    this_face-&gt;lpVtbl-&gt;SetColorRGB(this_face, D3DVAL(0.8), <br>                                    D3DVAL(0.65), <br>                                    D3DVAL(0.65)); <br>else/* snow */ <br>    this_face-&gt;lpVtbl-&gt;SetColorRGB(this_face, D3DVAL(1.0), <br>                                    D3DVAL(1.0),D3DVAL(1.0)); <br>    } <br>    free(coords); <br>    RELEASE(this_face); <br>} <br>RELEASE(faces); <br>    } <br>    if (FAILED(mesh_builder-&gt;lpVtbl-&gt;CreateMesh(mesh_builder, &amp;mesh))) <br>goto generic_error; <br>    if (FAILED(frame-&gt;lpVtbl-&gt;AddVisual(frame, (LPDIRECT3DRMVISUAL) mesh))) <br>goto generic_error; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;plane_builder))) <br>goto generic_error; <br>    rval = plane_builder-&gt;lpVtbl-&gt;Load(plane_builder, "dropship.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load dropship.x.\n%s", D3DRMErrorToString(rval)); <br>goto ret_with_error; <br>    } <br>    if (FAILED(plane_builder-&gt;lpVtbl-&gt;Scale(plane_builder, D3DVAL(0.015), <br>                                 D3DVAL(0.008), D3DVAL(0.015)))) <br> goto generic_error; <br>    if (FAILED(plane_builder-&gt;lpVtbl-&gt;CreateMesh(plane_builder, &amp;plane))) <br>goto generic_error; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateAnimation(lpD3DRM, &amp;info.flight_path))) <br>goto generic_error; <br>    info.flight_path-&gt;lpVtbl-&gt;SetOptions(info.flight_path, D3DRMANIMATION_CLOSED <br>     | D3DRMANIMATION_SPLINEPOSITION <br> | D3DRMANIMATION_POSITION); <br>    for (i = 0; i &lt; numPts; i++) <br>info.flight_path-&gt;lpVtbl-&gt;AddPositionKey(info.flight_path, path_t[i],  <br>                                                 path[i].x, <br>                                         path[i].y, path[i].z); <br> <br>    info.t = D3DVAL(0.0); <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;info.chase))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;info.plane_frame))) <br>goto generic_error; <br>    if (FAILED(info.plane_frame-&gt;lpVtbl-&gt;AddVisual(info.plane_frame, <br>                                        (LPDIRECT3DRMVISUAL) plane))) <br>goto generic_error; <br> <br>    if (FAILED(camera-&gt;lpVtbl-&gt;AddMoveCallback(camera, moveCamera, (void *) &amp;info))) <br>goto generic_error; <br>    if (FAILED(camera-&gt;lpVtbl-&gt;AddDestroyCallback(camera, cleanupObjects, &amp;info))) <br>goto generic_error; <br> <br>    RELEASE(lights); <br>    RELEASE(plane_builder); <br>    RELEASE(mesh_builder); <br>    RELEASE(smoke_builder); <br>    RELEASE(plane); <br>    RELEASE(mesh); <br>    RELEASE(smokemesh); <br>    RELEASE(ambient); <br>    RELEASE(parallel); <br>    RELEASE(frame); <br>    return TRUE; <br> <br>generic_error: <br>    Msg("A failure has occurred while building the scene.\n"); <br>ret_with_error: <br>    RELEASE(lights); <br>    RELEASE(plane_builder); <br>    RELEASE(mesh_builder); <br>    RELEASE(smoke_builder); <br>    RELEASE(plane); <br>    RELEASE(mesh); <br>    RELEASE(smokemesh); <br>    RELEASE(ambient); <br>    RELEASE(parallel); <br>    RELEASE(frame); <br>    RELEASE(sl); <br>    RELEASE(sr); <br>    return FALSE; <br>} <br> <br>void <br>OverrideDefaults(Defaults* defaults) <br>{ <br>    defaults-&gt;bNoTextures = TRUE; <br>    defaults-&gt;bConstRenderQuality = TRUE; <br>    lstrcpy(defaults-&gt;Name, "Fly Direct3DRM Example"); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

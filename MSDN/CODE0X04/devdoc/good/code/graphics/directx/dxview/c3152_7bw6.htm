<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DINPUT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3156"></a>DINPUT.C</h2>
<pre><code>/**************************************************************************** <br> <br>    Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> <br>    PROGRAM: dinput.c <br> <br>    PURPOSE: DirectX Device Viewer - DirectInput module <br> <br>    FUNCTIONS: <br> <br>    COMMENTS: <br> <br>****************************************************************************/ <br> <br>#include "dxview.h" <br> <br>#define DICAPDEF(name,val,flag) {name, FIELD_OFFSET(DIDEVCAPS,val), flag} <br>#define DIVALDEF(name,val)      {name, FIELD_OFFSET(DIDEVCAPS,val), 0} <br> <br>/**************************************************************************** <br> * <br> *  DI_CreateDI <br> * <br> *  Create a DirectInput pointer.  Try the current DirectInput version <br> *  first; if that doesn't work, try version 3.0. <br> * <br> ****************************************************************************/ <br> <br>LPDIRECTINPUT <br>DI_CreateDI(void) <br>{ <br>    LPDIRECTINPUT pdi; <br> <br>    if (SUCCEEDED(DirectInputCreate(g_hInstance, DIRECTINPUT_VERSION, <br>                                    &amp;pdi, NULL))) { <br>    } else <br>    if (SUCCEEDED(DirectInputCreate(g_hInstance, 0x0300, <br>                                    &amp;pdi, NULL))) { <br>    } else { <br>        pdi = 0; <br>    } <br> <br>    return pdi; <br>} <br> <br>/**************************************************************************** <br> * <br> *  DI_CreateDevice <br> * <br> *  Create a device with the specified instance GUID. <br> * <br> ****************************************************************************/ <br> <br>LPDIRECTINPUTDEVICE <br>DI_CreateDevice(LPCGUID pguid) <br>{ <br>    LPDIRECTINPUT pdi; <br>    LPDIRECTINPUTDEVICE pdev; <br> <br>    pdi = DI_CreateDI(); <br>    if (pdi) { <br>        if (SUCCEEDED(IDirectInput_CreateDevice(pdi, pguid, &amp;pdev, NULL))) { <br>        } else { <br>            pdev = 0; <br>        } <br>        IDirectInput_Release(pdi); <br>    } else { <br>        pdev = 0; <br>    } <br>    return pdev; <br>} <br> <br>/**************************************************************************** <br> * <br> *  DI3Info <br> * <br> *      Structure that describes the caps maintained by DIDEVCAPS <br> *      that existed in DirectX 3. <br> * <br> ****************************************************************************/ <br> <br>CAPDEF DI3Info[] = <br>{ <br>    DIVALDEF("Axes",                dwAxes), <br>    DIVALDEF("Buttons",             dwButtons), <br>    DIVALDEF("POVs",                dwPOVs), <br> <br>    DICAPDEF("ATTACHED",            dwFlags,        DIDC_ATTACHED), <br>    DICAPDEF("POLLEDDEVICE",        dwFlags,        DIDC_POLLEDDEVICE), <br>    DICAPDEF("EMULATED",            dwFlags,        DIDC_EMULATED), <br> <br>    {"", 0, 0} <br>}; <br> <br>/**************************************************************************** <br> * <br> *  DI5Info <br> * <br> *      Structure that describes the caps maintained by DIDEVCAPS <br> *      that exist in DirectX 5 and were't in DirectX 3. <br> * <br> ****************************************************************************/ <br> <br>CAPDEF DI5Info[] = <br>{ <br>    DICAPDEF("FORCEFEEDBACK",       dwFlags,        DIDC_FORCEFEEDBACK), <br>    DICAPDEF("FFATTACK",            dwFlags,        DIDC_FFATTACK), <br>    DICAPDEF("FFFADE",              dwFlags,        DIDC_FFFADE), <br>    DICAPDEF("SATURATION",          dwFlags,        DIDC_SATURATION), <br>    DICAPDEF("POSNEGCOEFFICIENTS",  dwFlags,        DIDC_POSNEGCOEFFICIENTS), <br>    DICAPDEF("POSNEGSATURATION",    dwFlags,        DIDC_POSNEGSATURATION), <br> <br>    DIVALDEF("FFSamplePeriod",      dwFFSamplePeriod), <br>    DIVALDEF("FFMinTimeResolution", dwFFMinTimeResolution), <br>    {"", 0, 0} <br>}; <br> <br>/**************************************************************************** <br> * <br> *  DISubTypeList <br> * <br> *      List of various DirectInput device subtypes and their names. <br> * <br> ****************************************************************************/ <br> <br>typedef struct SUBTYPEINFO { <br>    DWORD dwDevType; <br>    LPCTSTR pszName; <br>} SUBTYPEINFO; <br> <br>#define SUBTYPE(type, subtype, name)    \ <br>    {   MAKEWORD(DIDEVTYPE_##type, \ <br>        DIDEVTYPE##type##_##subtype), \ <br>        TEXT("%d - ") TEXT(name) } <br> <br>SUBTYPEINFO DISubTypes[] = { <br>    SUBTYPE(MOUSE,          UNKNOWN,            "Unknown"), <br>    SUBTYPE(MOUSE,          TRADITIONAL,        "Traditional"), <br>    SUBTYPE(MOUSE,          FINGERSTICK,        "Fingerstick"), <br>    SUBTYPE(MOUSE,          TOUCHPAD,           "Touchpad"), <br>    SUBTYPE(MOUSE,          TRACKBALL,          "Trackball"), <br> <br>    SUBTYPE(KEYBOARD,       UNKNOWN,            "Unknown"), <br>    SUBTYPE(KEYBOARD,       PCXT,               "XT"), <br>    SUBTYPE(KEYBOARD,       OLIVETTI,           "Olivetti"), <br>    SUBTYPE(KEYBOARD,       PCAT,               "AT"), <br>    SUBTYPE(KEYBOARD,       PCENH,              "Enhanced"), <br>    SUBTYPE(KEYBOARD,       NOKIA1050,          "Nokia 1050"), <br>    SUBTYPE(KEYBOARD,       NOKIA9140,          "Nokia 9140"), <br>    SUBTYPE(KEYBOARD,       NEC98,              "NEC98"), <br>    SUBTYPE(KEYBOARD,       NEC98LAPTOP,        "NEC98 Laptop"), <br>    SUBTYPE(KEYBOARD,       NEC98106,           "NEC98 106"), <br>    SUBTYPE(KEYBOARD,       JAPAN106,           "Japan 106"), <br>    SUBTYPE(KEYBOARD,       JAPANAX,            "Japan AX"), <br>    SUBTYPE(KEYBOARD,       J3100,              "J3100"), <br> <br>    SUBTYPE(JOYSTICK,       UNKNOWN,            "Unknown"), <br>    SUBTYPE(JOYSTICK,       TRADITIONAL,        "Traditional"), <br>    SUBTYPE(JOYSTICK,       FLIGHTSTICK,        "Flightstick"), <br>    SUBTYPE(JOYSTICK,       GAMEPAD,            "Gamepad"), <br>    SUBTYPE(JOYSTICK,       RUDDER,             "Rudder"), <br>    SUBTYPE(JOYSTICK,       WHEEL,              "Wheel"), <br>    SUBTYPE(JOYSTICK,       HEADTRACKER,        "Head tracker"), <br>    { 0, 0 }, <br>}; <br> <br>/**************************************************************************** <br> * <br> *  DIAddRow <br> * <br> *  Add a row to the growing two-column listview or printer. <br> * <br> *      lpInfo = print context or NULL if adding to listview <br> *      pszName = name of cap <br> *      pszFormat = wsprintf-style format string <br> *      ... = inserts for wsprintf <br> * <br> ****************************************************************************/ <br> <br>BOOL __cdecl <br>DIAddRow(PRINTCBINFO *lpInfo, LPCTSTR pszName, LPCTSTR pszFormat, ...) <br>{ <br>    BOOL fRc; <br>    TCHAR szBuf[1024]; <br>    int cch; <br>    va_list ap; <br> <br>    va_start(ap, pszFormat); <br>    cch = wvsprintf(szBuf, pszFormat, ap); <br>    va_end(ap); <br> <br>    if (lpInfo == NULL) { <br>        LVAddText(g_hwndLV, 0, pszName, 0); <br>        LVAddText(g_hwndLV, 1, TEXT("%s"), szBuf); <br>    } else { <br>        int xName, xVal, yLine; <br> <br>        // Calculate Name and Value column x offsets <br>        xName   = (lpInfo-&gt;dwCurrIndent * DEF_TAB_SIZE * lpInfo-&gt;dwCharWidth); <br>        xVal    = xName + (32 * lpInfo-&gt;dwCharWidth); <br>        yLine = lpInfo-&gt;dwCurrLine * lpInfo-&gt;dwLineHeight; <br> <br>        // Print name <br>        fRc = PrintLine(xName, yLine, pszName, lstrlen(pszName), lpInfo); <br>        if (!fRc) goto done; <br> <br>        // Print value <br>        fRc = PrintLine(xVal, yLine, szBuf, cch, lpInfo); <br>        if (!fRc) goto done; <br> <br>        // Advance to next line on page <br>        fRc = PrintNextLine(lpInfo); <br>        if (!fRc) goto done; <br>    } <br> <br>    fRc = TRUE; <br> <br>done:; <br>    return fRc; <br>} <br> <br>/**************************************************************************** <br> * <br> *  DIAddTypes <br> * <br> *  Emit the device type information to the output device. <br> * <br> *      lpInfo = print context or NULL if adding to listview <br> *      dwDevType = device type to decode <br> * <br> ****************************************************************************/ <br> <br>BOOL DIAddTypes(PRINTCBINFO *lpInfo, DWORD dwDevType) <br>{ <br>    BOOL fRc; <br>    DWORD dwType; <br>    LPCTSTR pszValue; <br>    SUBTYPEINFO *psti; <br> <br>    /* <br>     *  Add the type code. <br>     */ <br> <br>    dwType = GET_DIDEVICE_TYPE(dwDevType); <br>    switch (dwType) { <br>    case DIDEVTYPE_MOUSE:   pszValue = TEXT("%d - Mouse"); break; <br>    case DIDEVTYPE_KEYBOARD:pszValue = TEXT("%d - Keyboard"); break; <br>    case DIDEVTYPE_JOYSTICK:pszValue = TEXT("%d - Joystick"); break; <br>    default:                pszValue = TEXT("%d"); break; <br>    } <br> <br>    fRc = DIAddRow(lpInfo, "Type", pszValue, dwType); <br>    if (!fRc) goto done; <br> <br>    /* <br>     *  Add the sub type code. <br>     */ <br> <br>    pszValue = TEXT("%d"); <br>    for (psti = DISubTypes; psti-&gt;dwDevType; psti++) { <br>        if (psti-&gt;dwDevType == (dwDevType &amp; 0xFFFF)) { <br>            pszValue = psti-&gt;pszName; <br>            break; <br>        } <br>    } <br> <br>    fRc = DIAddRow(lpInfo, TEXT("Subtype"), pszValue, <br>                   GET_DIDEVICE_SUBTYPE(dwDevType)); <br>    if (!fRc) goto done; <br> <br>    fRc = TRUE; <br>done:; <br>    return fRc; <br>} <br> <br>/**************************************************************************** <br> * <br> *  DIAddCapsToTarget <br> * <br> *  Add the caps either to the listview or to the printer. <br> * <br> *      lpInfo = print context or NULL if adding to listview <br> *      pcd = pointer to CAPDEF array describing the caps <br> *      pv = pointer to structure to be parsed <br> * <br> ****************************************************************************/ <br> <br>BOOL <br>DIAddCapsToTarget(PRINTCBINFO *lpInfo, CAPDEF *pcd, LPVOID pv) <br>{ <br>    BOOL fRc; <br> <br>    if (lpInfo) { <br>        fRc = PrintCapsToDC(pcd, pv, lpInfo); <br>    } else { <br>        AddMoreCapsToLV(pcd, pv); <br>        fRc = TRUE; <br>    } <br>    return fRc; <br>} <br> <br>/**************************************************************************** <br> * <br> *  DIPrintCaps <br> * <br> *      lpInfo = print context or NULL if adding to listview <br> *      lParam1 = state info recorded by DIEnumDevCallback (LPGUID) <br> *      lParam2 = refdata (not used) <br> * <br> ****************************************************************************/ <br> <br>BOOL <br>DIPrintCaps(LPARAM lParam1, LPARAM lParam2, PRINTCBINFO *lpInfo) <br>{ <br>    BOOL fRc; <br>    LPGUID pguid = (LPGUID)lParam1; <br>    LPDIRECTINPUTDEVICE pdev; <br> <br>    if (lpInfo == NULL) { <br>        AddColsToLV(); <br>    } <br> <br>    fRc = TRUE; <br> <br>    pdev = DI_CreateDevice(pguid); <br> <br>    if (pdev) { <br>        DIDEVCAPS caps; <br>        HRESULT hres; <br> <br>        /* <br>         *  First use the DX3 caps. <br>         */ <br>        caps.dwSize = sizeof(DIDEVCAPS_DX3); <br> <br>        hres = IDirectInputDevice_GetCapabilities(pdev, &amp;caps); <br>        if (SUCCEEDED(hres)) { <br> <br>            fRc = DIAddTypes(lpInfo, caps.dwDevType) &amp;&amp; <br>                  DIAddCapsToTarget(lpInfo, DI3Info, &amp;caps); <br>        } <br> <br>        /* <br>         *  Now get the DX5 caps if we haven't cancelled printing yet. <br>         */ <br>        if (fRc) { <br>            caps.dwSize = sizeof(DIDEVCAPS); <br> <br>            hres = IDirectInputDevice_GetCapabilities(pdev, &amp;caps); <br>            if (SUCCEEDED(hres)) { <br> <br>                fRc = DIAddCapsToTarget(lpInfo, DI5Info, &amp;caps); <br>            } <br>        } <br> <br>        IDirectInputDevice_Release(pdev); <br>    } <br>    return fRc; <br>} <br> <br>/**************************************************************************** <br> * <br> *  DIAddCaps <br> * <br> *      lParam1 = state info recorded by DIEnumDevCallback (LPGUID) <br> *      lParam2 = refdata (not used) <br> * <br> ****************************************************************************/ <br> <br>void <br>DIAddCaps(LPARAM lParam1, LPARAM lParam2) <br>{ <br>    DIPrintCaps(lParam1, lParam2, NULL); <br>} <br> <br>/**************************************************************************** <br> * <br> *  DIEnumEffCallback <br> * <br> *  Add the enumerated DirectInput effect to the listview. <br> * <br> ****************************************************************************/ <br> <br>BOOL CALLBACK <br>DIEnumEffCallback(LPCDIEFFECTINFO pei, LPVOID lpInfo) <br>{ <br>    BOOL fRc; <br>    const GUID *pguid = &amp;pei-&gt;guid; <br> <br>    fRc = DIAddRow(lpInfo, pei-&gt;tszName, <br>                   TEXT("{%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}"), <br>                    pguid-&gt;Data1, pguid-&gt;Data2, pguid-&gt;Data3, <br>                    pguid-&gt;Data4[0], pguid-&gt;Data4[1], <br>                    pguid-&gt;Data4[2], pguid-&gt;Data4[3], <br>                    pguid-&gt;Data4[4], pguid-&gt;Data4[5], <br>                    pguid-&gt;Data4[6], pguid-&gt;Data4[7]); <br>    if (fRc) { <br>        return DIENUM_CONTINUE; <br>    } else { <br>        return DIENUM_STOP; <br>    } <br>} <br> <br>/**************************************************************************** <br> * <br> *  DIPrintEffects <br> * <br> *      lpInfo = print context or NULL if adding to listview <br> *      lParam1 = state info recorded by DIEnumDevCallback (LPGUID) <br> *      lParam2 = refdata (not used) <br> * <br> ****************************************************************************/ <br> <br>BOOL <br>DIPrintEffects(LPARAM lParam1, LPARAM lParam2, PRINTCBINFO *lpInfo) <br>{ <br>    BOOL fRc; <br>    LPGUID pguid = (LPGUID)lParam1; <br>    LPDIRECTINPUTDEVICE pdev; <br> <br>    /* <br>     *  The effects are not a simple name/value thing. <br>     *  But DXView doesn't like multiple nesting levels, <br>     *  so we mash it into the name/value paradigm <br>     *  because I'm lazy.  Someday I won't be quite so <br>     *  lazy and do it right. <br>     */ <br> <br>    if (lpInfo == NULL) { <br>        AddColsToLV(); <br>    } <br> <br>    fRc = TRUE; <br>    pdev = DI_CreateDevice(pguid); <br> <br>    if (pdev) { <br>        LPDIRECTINPUTDEVICE2 pdev2; <br>        HRESULT hres; <br> <br>        hres = IDirectInputDevice_QueryInterface( <br>                        pdev, &amp;IID_IDirectInputDevice2, (LPVOID *)&amp;pdev2); <br> <br>        if (SUCCEEDED(hres)) { <br>            /* <br>             *  Enumerate the effects and add them to the listview. <br>             */ <br>            IDirectInputDevice2_EnumEffects(pdev2, <br>                                            DIEnumEffCallback, lpInfo, <br>                                            DIEFT_ALL); <br> <br>            IDirectInputDevice2_Release(pdev2); <br>        } <br> <br>        IDirectInputDevice_Release(pdev); <br>    } <br> <br>    return fRc; <br>} <br> <br>/**************************************************************************** <br> * <br> *  DIAddEffects <br> * <br> *      lParam1 = state info recorded by DIEnumDevCallback (LPGUID) <br> *      lParam2 = refdata (not used) <br> * <br> ****************************************************************************/ <br> <br>void <br>DIAddEffects(LPARAM lParam1, LPARAM lParam2) <br>{ <br>    DIPrintEffects(lParam1, lParam2, NULL); <br>} <br> <br>/**************************************************************************** <br> ***************************************************************************/ <br> <br>CAPDEFS DICapDefs[] = <br>{ <br>    {"",                    DIAddCaps,          0,              DIPrintCaps}, <br>    {"Effects",             DIAddEffects,       0,              DIPrintEffects}, <br>    {NULL, 0, 0, NULL} <br>}; <br> <br>/**************************************************************************** <br> * <br> *  DIEnumDevCallback <br> * <br> *  Add the enumerated DirectInput device to the treeview. <br> * <br> ****************************************************************************/ <br> <br>BOOL CALLBACK <br>DIEnumDevCallback(LPCDIDEVICEINSTANCE pinst, LPVOID pv) <br>{ <br>    HTREEITEM hParent = pv; <br>    TCHAR     szText[MAX_PATH + 2 + MAX_PATH + 2]; <br>    LPGUID    pguid; <br> <br>    pguid = LocalAlloc(LPTR, sizeof(GUID)); <br>    if (pguid == NULL) { <br>        return DIENUM_STOP; <br>    } <br> <br>    *pguid = pinst-&gt;guidInstance; <br> <br>    wsprintf(szText, "%s (%s)", pinst-&gt;tszInstanceName, <br>                                pinst-&gt;tszProductName); <br> <br>    DICapDefs[0].szName = szText; <br>    AddCapsToTV(hParent, DICapDefs, (LPARAM)pguid); <br> <br>    return(DIENUM_CONTINUE); <br>} <br> <br>/**************************************************************************** <br> * <br> *  DI_FillTree <br> * <br> *  Add the DirectInput nodes to the treeview. <br> * <br> ****************************************************************************/ <br> <br>void <br>DI_FillTree(void) <br>{ <br>    LPDIRECTINPUT pdi; <br>    HTREEITEM hTree; <br> <br>    // Add direct input devices if DInput is found <br> <br>    pdi = DI_CreateDI(); <br>    if (pdi) { <br> <br>        hTree = TVAddNode(TVI_ROOT, "DirectInput Devices", TRUE, <br>                          IDI_DIRECTX, NULL, 0, 0, NULL); <br> <br>        IDirectInput_EnumDevices(pdi, 0, DIEnumDevCallback, hTree, <br>                                 DIEDFL_ALLDEVICES); <br> <br>        TreeView_Expand(g_hwndTV, hTree, TVE_EXPAND); <br> <br>        IDirectInput_Release(pdi); <br>    } <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

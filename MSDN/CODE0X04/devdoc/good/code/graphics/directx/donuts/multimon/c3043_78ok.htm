<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DONUTS.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3044"></a>DONUTS.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       donuts.h <br> *  Content:    main include file <br> * <br> *@@BEGIN_MSINTERNAL <br> *  History: <br> *   Date       By      Reason <br> *   ====       ==      ====== <br> *   12-jul-95  kylej   Initial Creation <br> *   15-sep-97  t-craigs Multimon <br> *@@END_MSINTERNAL <br> * <br> ***************************************************************************/ <br> <br>#ifndef DONUTS_INCLUDED <br>#define DONUTS_INCLUDED <br> <br>//#define USE_DSOUND <br> <br>#undef WIN32_LEAN_AND_MEAN <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;io.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;ddraw.h&gt; <br> <br>#ifdef USE_DSOUND <br>#include &lt;dsound.h&gt; <br>#endif <br> <br>#include "resource.h" <br>#include "ddutil.h" <br>#include "input.h" <br>#include "util.h" <br>#include "monitor.h" <br> <br>#ifdef USE_DSOUND <br>#include "dsutil.h" <br>#endif <br> <br> <br>#define DEF_SHOW_DELAY     (2000) <br> <br> <br>// program states <br>enum <br>{ <br>    PS_SPLASH, <br>    PS_ACTIVE, <br>    PS_BEGINREST, <br>    PS_REST <br>}; <br> <br> <br> <br> <br>class CObject <br>{ <br>public: <br>CObject( int nMaxFrame, int nSize ); <br> <br>int  GetMonitorX(); <br>int  GetMonitorY(); <br>void UpdateRect(); <br>void Blt(); <br>BOOL CheckPosition( DWORD tickDiff ); <br>void DeleteFromList(); <br> <br>// virtual fcts <br>virtual void Init( double x, double y ); <br>virtual BOOL CheckFrame(); <br>virtual void UpdateFrame( DWORD tickDiff ); <br>virtual BOOL CanBeBullet() { return FALSE; }; <br>virtual BOOL CanBeTarget() { return FALSE; }; <br> <br>// pure virtual - must be implemented by derived classes <br>virtual void UpdateSrcRect() = 0; <br>virtual int  Hit( double l, double t ) = 0; <br> <br>virtual LPDIRECTDRAWSURFACE GetSurface() = 0; <br> <br>// constants <br>int km_iMaxFrame; <br>int km_iSize; <br> <br>// data <br>CObject*next; <br>CObject*prev; <br>    double              posx, posy; // actual x and y position <br>    double              velx, vely; // x and y velocity (pixels/millisecond) <br>    double              frame;      // current frame <br>    double              delay;    <br>    RECT                src, dst; <br>intiMonitor; <br>}; <br> <br>class CDonut : public CObject <br>{ <br>public: <br>CDonut(); <br> <br>virtual void UpdateSrcRect(); <br>virtual LPDIRECTDRAWSURFACE GetSurface(); <br>virtual int  Hit( double l, double t ); <br> <br>virtual void Init( double x, double y ); <br>virtual BOOL CanBeTarget() { return TRUE; }; <br>}; <br> <br>class CPyramid : public CObject <br>{ <br>public: <br>CPyramid(); <br> <br>virtual void UpdateSrcRect(); <br>virtual LPDIRECTDRAWSURFACE GetSurface(); <br>virtual int  Hit( double l, double t ); <br> <br>virtual void Init( double x, double y ); <br>virtual BOOL CanBeTarget() { return TRUE; }; <br>}; <br> <br>class CCube : public CObject <br>{ <br>public: <br>CCube(); <br> <br>virtual void UpdateSrcRect(); <br>virtual LPDIRECTDRAWSURFACE GetSurface(); <br>virtual int  Hit( double l, double t ); <br> <br>virtual void Init( double x, double y ); <br>virtual BOOL CanBeTarget() { return TRUE; }; <br>}; <br> <br>class CSphere : public CObject <br>{ <br>public: <br>CSphere(); <br> <br>virtual void UpdateSrcRect(); <br>virtualLPDIRECTDRAWSURFACE GetSurface(); <br>virtual int  Hit( double l, double t ); <br> <br>virtual void Init( double x, double y ); <br>virtual BOOL CanBeTarget() { return TRUE; }; <br>}; <br> <br>class CShip : public CObject <br>{ <br>public: <br>CShip(); <br> <br>virtual void UpdateSrcRect(); <br>virtual LPDIRECTDRAWSURFACE GetSurface(); <br>virtual int  Hit( double l, double t ); <br> <br>virtual void Init(); <br>virtual void UpdateFrame( DWORD tickDiff ); <br>virtual BOOL CanBeBullet() { return TRUE; }; <br> <br>BOOLlastShield; <br>}; <br> <br>class CBullet : public CObject <br>{ <br>enum { <br>BULLET_X = 304, <br>BULLET_Y = 0 <br>}; <br>public: <br>CBullet(); <br> <br>virtual void UpdateSrcRect(); <br>virtual LPDIRECTDRAWSURFACE GetSurface(); <br>virtual int  Hit( double l, double t ); <br> <br>virtual void Init( double x, double y ); <br>virtual BOOL CheckFrame(); <br>virtual BOOL CanBeBullet() { return TRUE; }; <br>}; <br> <br> <br> <br>/* <br> * fn prototypes <br> */ <br>voidAppPause(void); <br>voidAppUnpause(void); <br>voidCheckOneMenuItem(HMENU hmenu, UINT idc, BOOL fCheck); <br>voidCheckMenuItems(HWND hwnd); <br> <br>BOOLInitApplication( HANDLE hInstance, int nCmdShow ); <br>BOOLInitializeGame( void ); <br>voidInitLevel( int level ); <br>voidSetupGame(); <br> <br>voidUpdateFrame( void ); <br>voidUpdateDisplayList( void ); <br>voidCheckForHits( void ); <br>voidDrawDisplayList( void ); <br> <br>voidDisplayFrameRate( void ); <br>voidDisplayLevel( void ); <br>voidBltScore( char *num, int x, int y ); <br>voidBltSplash( void ); <br>BOOLEraseScreen( void ); <br>BOOL FlipScreen( void ); <br>BOOLCleanupAndExit( char *err ); <br>BOOLCleanupAndExit( char *err, HRESULT ddrval ); <br> <br>#ifdef USE_DSOUND <br>voidPlayPanned(HSNDOBJ hSO, double posx); <br>voidInitializeSound( void ); <br>voidDestroySound( void ); <br>#endif <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

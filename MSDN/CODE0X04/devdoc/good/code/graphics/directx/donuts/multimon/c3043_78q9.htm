<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MONITOR.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3051"></a>MONITOR.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       monitor.h <br> * <br> *@@BEGIN_MSINTERNAL <br> *  History: <br> *   Date       By        Reason <br> *   ====       ==        ====== <br> *   15-sep-97  t-craigs  Created <br> *@@END_MSINTERNAL <br> * <br> ***************************************************************************/ <br> <br> <br>#ifndef MONITOR_H <br>#define MONITOR_H <br> <br>#undef WIN32_LEAN_AND_MEAN <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br> <br>#include "multimon.h"// make sure to include this before ddraw.h for multimon <br>#include &lt;ddraw.h&gt; <br> <br>#include "resource.h" <br>#include "ddutil.h" <br> <br>// <br>// The CMonitor class encapsulates basic functionality <br>// for programming graphical display output. <br>// It is multimonitor aware and DirectDraw enabled. <br>// <br>// The static Initialize routine assumes the existance <br>// of a global array of CMonitor objects, and employs the new <br>// DirectDrawEnumerateEx fct. to set up descriptive data structures. <br>//  <br>// CMonitor also supports a bare-bones DirectDraw framework: <br>// an IDirectDraw interface and an IDirectDrawSurface primary <br>// surface with one back buffer. The three surface-related <br>// functions (DDInit, RestoreSurfaces, and Release) are virtual <br>// to allow a derived class to support any number of <br>// additional surfaces while remaining compatible with the <br>// generic Blank and Flip routines. <br>// <br>class CMonitor <br>{ <br>public: <br>CMonitor(); <br>~CMonitor(); <br> <br>static intiNumberOfMonitors; <br> <br>// Initializes the common data of global Monitor array <br>static HRESULTInitialize(); <br> <br>// Uninitializes all monitors in the global Monitor array <br>static voidUninit(); <br> <br>// Basic DirectDraw initialization <br>virtual HRESULTDDInit( HWND hWnd, BOOL bEnableMultiMon ); <br> <br>// Restores the primary surface <br>virtual HRESULT RestoreSurfaces(); <br> <br>// Releases the primary surface and DirectDraw object <br>virtual voidRelease(); <br> <br>// Fills the back buffer with the specified color <br>HRESULTBlank( DWORD dwFillColor ); <br> <br>// Flips the back buffer to the front buffer <br>HRESULTFlip(); <br> <br>// descriptive data structures <br>    HMONITORhMonitor; <br>    GUID*lpGUID; <br>    MONITORINFOEXMonitorInfo; <br>LPRECTlpMonitorRect; <br>DWORDdwWidth; <br>DWORDdwHeight; <br>DWORDScreenBpp; <br> <br>// use this to return detailed error messages <br>charszErrMsg[256]; <br> <br>// DDraw interface pointers <br>LPDIRECTDRAW            lpDD; <br>LPDIRECTDRAWSURFACE     lpFrontBuffer; <br>LPDIRECTDRAWSURFACE     lpBackBuffer; <br>}; <br> <br> <br>typedef struct { <br>    RGNDATAHEADER hdr; <br>    RECT rgndata[4]; <br>} CLIPLIST, *LPCLIPLIST; <br> <br> <br>// <br>// The CMyMonitor derives from CMonitor and builds <br>// upon that foundation to implement additional graphical <br>// display functionality specific to this application (Donuts2). <br>// <br>// The Initialize routine now calculates the monitor boundary <br>// locations where there is monitor adjacency as defined in <br>// the Display/Settings tab of the Control Panel, and DrawBorder <br>// displays a white line around the monitor edges except at <br>// these points of adjacency. <br>// <br>// DDInit, RestoreSurfaces, and Release have been extended to <br>// support all the off-screen sprite bitmaps. <br>// <br>class CMyMonitor : public CMonitor <br>{ <br>public: <br>CMyMonitor(); <br> <br>static DWORD    dwFillColor; <br> <br>static HRESULT  Initialize(); <br>static voidUninit(); <br> <br>virtual HRESULTDDInit( HWND hwnd, BOOL bEnableMultiMon ); <br>virtual HRESULT RestoreSurfaces(); <br>virtual voidRelease(); <br> <br>HRESULTBlank(); <br>HRESULTDrawBorder(); <br> <br>// data <br>intiNumLines; <br>RECTLine[9]; <br> <br>// more DDraw objects <br>CLIPLISTClipList; <br>LPDIRECTDRAWSURFACE     lpDonut; <br>LPDIRECTDRAWSURFACE     lpPyramid; <br>LPDIRECTDRAWSURFACE     lpCube; <br>LPDIRECTDRAWSURFACE     lpSphere; <br>LPDIRECTDRAWSURFACE     lpShip; <br>LPDIRECTDRAWSURFACE     lpNum; <br>LPDIRECTDRAWPALETTE     lpArtPalette; <br>LPDIRECTDRAWPALETTE     lpSplashPalette; <br>LPDIRECTDRAWCLIPPER     lpDDClipper; <br>LPDIRECTDRAWSURFACElpBackground; <br>}; <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

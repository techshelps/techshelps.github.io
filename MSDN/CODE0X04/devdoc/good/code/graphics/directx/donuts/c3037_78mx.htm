<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DONUTS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3039"></a>DONUTS.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       donuts.h <br> *  Content:    main include file <br> * <br> * <br> ***************************************************************************/ <br> <br>#ifndef DONUTS_INCLUDED <br>#define DONUTS_INCLUDED <br> <br>#undef WIN32_LEAN_AND_MEAN <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;ddraw.h&gt; <br>#ifdef USE_DSOUND <br>#include &lt;dsound.h&gt; <br>#endif <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;io.h&gt; <br>#include "resource.h" <br>#include "ddutil.h" <br>#ifdef USE_DSOUND <br>#include "dsutil.h" <br>#endif <br>#include "input.h" <br> <br>#define DEF_SHOW_DELAY     (2000) <br> <br>#define IS_NUM(c)     ((c) &gt;= '0' &amp;&amp; (c) &lt;= '9') <br>#define IS_SPACE(c)   ((c) == ' ' || (c) == '\r' || (c) == '\n' || (c) == '\t' || (c) == 'x') <br> <br> <br>enum <br>{ <br>    OBJ_DONUT = 0, <br>    OBJ_PYRAMID, <br>    OBJ_CUBE, <br>    OBJ_SPHERE, <br>    OBJ_SHIP, <br>    OBJ_BULLET <br>}; <br> <br> <br>// program states <br>enum <br>{ <br>    PS_SPLASH, <br>    PS_ACTIVE, <br>    PS_BEGINREST, <br>    PS_REST <br>}; <br> <br>#define     MAX_SCREEN_X    (ScreenX-1) <br>#define     MAX_SCREEN_Y    (ScreenY-1) <br>#define     MAX_DONUT_X     MAX_SCREEN_X - 64 <br>#define     MAX_DONUT_Y     MAX_SCREEN_Y - 64 <br>#define     MAX_DONUT_FRAME 30 <br>#define     MAX_PYRAMID_X     MAX_SCREEN_X - 32 <br>#define     MAX_PYRAMID_Y     MAX_SCREEN_Y - 32 <br>#define     MAX_PYRAMID_FRAME 40 <br>#define     MAX_SPHERE_X     MAX_SCREEN_X - 16 <br>#define     MAX_SPHERE_Y     MAX_SCREEN_Y - 16 <br>#define     MAX_SPHERE_FRAME 40 <br>#define     MAX_CUBE_X     MAX_SCREEN_X - 16 <br>#define     MAX_CUBE_Y     MAX_SCREEN_Y - 16 <br>#define     MAX_CUBE_FRAME 40 <br>#define     MAX_SHIP_X     MAX_SCREEN_X - 32 <br>#define     MAX_SHIP_Y     MAX_SCREEN_Y - 32 <br>#define     MAX_SHIP_FRAME 40 <br>#define     MAX_BULLET_X    MAX_SCREEN_X - 3; <br>#define     MAX_BULLET_Y    MAX_SCREEN_Y - 3; <br>#define     MAX_BULLET_FRAME 400 <br> <br> <br>// Offsets for the bullet bitmap <br>#define     BULLET_X    304 <br>#define     BULLET_Y    0 <br> <br> <br>/* <br> * structures <br> */ <br> <br>/* <br> * DBLNODE - a node in a generic doubly-linked list <br> */ <br>typedef struct _DBLNODE <br>{ <br>    struct  _DBLNODE    FAR *next;  // link to next node <br>    struct  _DBLNODE    FAR *prev;  // link to previous node <br>    SHORT               type;       // type of object <br>    double              posx, posy; // actual x and y position <br>    double              velx, vely; // x and y velocity (pixels/millisecond) <br>    double              frame;      // current frame <br>    double              delay;      // frame/millisecond <br>    RECT                src, dst;   // source and destination rects <br>    LPDIRECTDRAWSURFACE surf;       // surface containing bitmap <br>} DBLNODE; <br>typedef DBLNODE FAR *LPDBLNODE; <br> <br>double      Dirx[40] = <br>{ <br>    0.000000, <br>    0.156434, <br>    0.309017, <br>    0.453991, <br>    0.587785, <br>    0.707107, <br>    0.809017, <br>    0.891007, <br>    0.951057, <br>    0.987688, <br>    1.000000, <br>    0.987688, <br>    0.951057, <br>    0.891007, <br>    0.809017, <br>    0.707107, <br>    0.587785, <br>    0.453990, <br>    0.309017, <br>    0.156434, <br>    0.000000, <br>    -0.156435, <br>    -0.309017, <br>    -0.453991, <br>    -0.587785, <br>    -0.707107, <br>    -0.809017, <br>    -0.891007, <br>    -0.951057, <br>    -0.987688, <br>    -1.000000, <br>    -0.987688, <br>    -0.951056, <br>    -0.891006, <br>    -0.809017, <br>    -0.707107, <br>    -0.587785, <br>    -0.453990, <br>    -0.309017, <br>    -0.156434 <br>}; <br> <br>double      Diry[40] = <br>{ <br>    -1.000000, <br>    -0.987688, <br>    -0.951057, <br>    -0.891007, <br>    -0.809017, <br>    -0.707107, <br>    -0.587785, <br>    -0.453990, <br>    -0.309017, <br>    -0.156434, <br>    0.000000, <br>    0.156434, <br>    0.309017, <br>    0.453991, <br>    0.587785, <br>    0.707107, <br>    0.809017, <br>    0.891007, <br>    0.951057, <br>    0.987688, <br>    1.000000, <br>    0.987688, <br>    0.951057, <br>    0.891006, <br>    0.809017, <br>    0.707107, <br>    0.587785, <br>    0.453990, <br>    0.309017, <br>    0.156434, <br>    0.000000, <br>    -0.156435, <br>    -0.309017, <br>    -0.453991, <br>    -0.587785, <br>    -0.707107, <br>    -0.809017, <br>    -0.891007, <br>    -0.951057, <br>    -0.987688 <br>}; <br> <br> <br>/* <br> * fn prototypes <br> */ <br>void    DestroyGame( void ); <br>BOOL    InitializeGame( void ); <br>void    makeFontStuff( void ); <br>void    UpdateFrame( void ); <br>BOOL    CleanupAndExit( char *err ); <br>BOOL    RestoreSurfaces( void ); <br>BOOL    isDisplayListEmpty( void ); <br>void    initShip( BOOL delay ); <br>void    initLevel( int level ); <br>void    addObject( SHORT type, double x, double y, double vx, double vy ); <br>void    linkObject( LPDBLNODE new ); <br>void    linkLastObject( LPDBLNODE new ); <br>void    UpdateDisplayList( void ); <br>void    DrawDisplayList( void ); <br>int     randInt( int low, int high ); <br>double  randDouble( double low, double high ); <br>void    DeleteFromList( LPDBLNODE this ); <br>void    CheckForHits( void ); <br>void    bltScore( char *num, int x, int y ); <br>void    DisplayFrameRate( void ); <br>void    bltSplash( void ); <br>void    EraseScreen( void ); <br>void    FlipScreen( void ); <br>void    DisplayLevel( void ); <br>void    InitializeSound( void ); <br>void    DestroySound( void ); <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

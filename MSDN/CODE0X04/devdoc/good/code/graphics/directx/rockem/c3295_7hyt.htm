<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WINMAIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3305"></a>WINMAIN.CPP</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright 1995 - 1998 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: winmain.cpp <br> * <br> ***************************************************************************/ <br> <br>// Defines.... <br>#define CLASS_NAME                              "RockEm3D_Class" <br> <br>// Includes.... <br>#include "windows.h" <br>#include "resource.h" <br>#include "winmain.h" <br> <br>#include "directx.h" <br>#include "rm.h" <br> <br>#include "control.h" <br> <br>#include "midi.h" <br> <br>// Globals.... <br>HINSTANCE       g_hInst = NULL; <br>HWND            g_hWnd  = NULL; <br> <br>BOOL            g_bActive       = FALSE; <br>BOOL            g_bFirstActive  = TRUE; <br>BOOL            g_bErrorOccured = FALSE; <br>char            g_sError[2048]; <br>BOOL            g_bShowStats    = FALSE; <br>BOOL            g_bMusicPaused  = FALSE; <br>BOOL            g_bSoundPaused  = FALSE; <br> <br>// Externals.... <br>extern DWORD    g_dwCurrMode; // Defined in DIRECTX.CPP <br> <br>//------------------------------------------------------------------ <br>//  <br>// Function     : RegError() <br>// <br>// Purpose      : Registers an error <br>// <br>//------------------------------------------------------------------ <br> <br>void RegError(char *sErr) <br>{ <br>    sprintf(g_sError, "%s\r\n", sErr); <br>    OutputDebugString(g_sError); <br>    g_bErrorOccured = TRUE; <br>} <br> <br> <br>//------------------------------------------------------------------ <br>//  <br>// Function     : InitClass() <br>// <br>// Purpose      : Initialises and registers window class <br>// <br>//------------------------------------------------------------------ <br> <br>BOOL InitClass(HINSTANCE hInst) <br>{ <br>    WNDCLASS    wndClass; <br> <br>    // Fill out WNDCLASS info <br>    wndClass.style              = CS_HREDRAW | CS_VREDRAW; <br>    wndClass.lpfnWndProc        = WndProc; <br>    wndClass.cbClsExtra         = 0; <br>    wndClass.cbWndExtra         = 0; <br>    wndClass.hInstance          = hInst; <br>    wndClass.hIcon              = LoadIcon(hInst, "ROCKEM3D"); <br>    wndClass.hCursor            = LoadCursor(NULL, IDC_ARROW); <br>    wndClass.hbrBackground      = (HBRUSH) GetStockObject(BLACK_BRUSH); <br>    wndClass.lpszMenuName       = NULL; <br>    wndClass.lpszClassName      = CLASS_NAME; <br>     <br>    if (!RegisterClass(&amp;wndClass)) return FALSE; <br> <br>    // Everything's perfect <br>    return TRUE; <br>} <br> <br>//------------------------------------------------------------------ <br>//  <br>// Function     : InitWindow() <br>// <br>// Purpose      : Initialises and creates the main window <br>// <br>//------------------------------------------------------------------ <br> <br>BOOL InitWindow(HINSTANCE hInst, int nCmdShow) <br>{ <br>    // Create a window <br>    g_hWnd = CreateWindowEx(WS_EX_APPWINDOW, <br>                            CLASS_NAME,  <br>                            "RockEm3D Demo", <br>                            WS_POPUP | WS_SYSMENU, <br>                            0, 0, <br>                            GetSystemMetrics(SM_CXSCREEN), <br>                            GetSystemMetrics(SM_CYSCREEN), <br>                            NULL, <br>                            NULL, <br>                            hInst, <br>                            NULL); <br> <br>    // Return false if window creation failed <br>    if (!g_hWnd) return FALSE; <br>     <br>    // Show the window <br>    ShowWindow(g_hWnd, SW_SHOWNORMAL); <br> <br>    // Update the window <br>    UpdateWindow(g_hWnd); <br>     <br>    // Everything's perfect <br>    return TRUE; <br>} <br> <br>//------------------------------------------------------------------ <br>//  <br>// Function     : WndProc() <br>// <br>// Purpose      : Windows procedure to handle messages <br>// <br>//------------------------------------------------------------------ <br> <br>long FAR PASCAL WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>// D3DVECTOR used for 3D position of sound <br>static D3DVECTOR d3dvPos= {D3DVAL(0), D3DVAL(0), D3DVAL(0)}; <br> <br>    // Handle messages <br>    switch (message) <br>    { <br>        case WM_KEYDOWN: <br>        { <br>            switch (wParam) <br>            { <br>                case VK_ESCAPE: <br>                {                                                        <br>                    // Time to quit.... <br>                    PostMessage(g_hWnd, WM_CLOSE ,0 ,0); <br>                } <br>                break; <br> <br>                case VK_F5: <br>                { <br>                    // Toggle stats <br>                    g_bShowStats = !g_bShowStats; <br>                } <br>                break; <br> <br>                case 'M': <br>                { <br>                    // Toggle music <br>                    if (GetAsyncKeyState(VK_CONTROL) &amp; 0x8000) <br>                    { <br>                        if (!g_bMusicPaused) <br>                        { <br>                            PauseMidi(); <br>                        } <br>                        else <br>                        { <br>                            ResumeMidi(); <br>                        } <br>                        g_bMusicPaused = !g_bMusicPaused; <br>                    } <br>                } <br>                break; <br>                 <br>                case 'S': <br>                { <br>                    // Toggle sound <br>                    if (GetAsyncKeyState(VK_CONTROL) &amp; 0x8000) <br>                    { <br>                        g_bSoundPaused = !g_bSoundPaused; <br> <br>                        if (g_bSoundPaused) <br>                        { <br>                            // Kill all the sound effects <br>                            StopAllSounds(); <br>                        } <br>                        else <br>                        { <br>                            // Start the crowd noise looping <br>                         PlaySoundDS(CROWD_LOOP,d3dvPos, DSBPLAY_LOOPING); <br>                        } <br>                    } <br>                } <br>                break; <br> <br>                case VK_F6 : <br>                { <br>                    // Go up a video mode <br>                    if(!EnterNextVideoMode())  <br>PostMessage(g_hWnd, WM_CLOSE ,0 ,0); <br>                } <br>                break; <br> <br>                case VK_F7 : <br>                { <br>                    // Go down a video mode <br>                    if(!EnterPrevVideoMode()) <br>PostMessage(g_hWnd, WM_CLOSE ,0 ,0); <br>                } <br>                break; <br> <br>                case VK_END : <br>                { <br>                    // Go to highest video mode <br>                    if(!EnterLowestVideoMode()) <br>PostMessage(g_hWnd, WM_CLOSE ,0 ,0); <br>                } <br>                break; <br> <br>                case VK_HOME : <br>                { <br>                    // Go to lowest video mode <br>                    if(!EnterHighestVideoMode())  <br>PostMessage(g_hWnd, WM_CLOSE ,0 ,0); <br>                } <br>                break; <br>            } <br>        } <br>        break; <br> <br>        case WM_SYSCOMMAND: <br>        { <br>            switch (wParam) <br>            { <br>                // Trap ALT so it doesn't pause the app <br>                case SC_KEYMENU : <br>                { <br>                    return 0; <br>                } <br>                break; <br>            } <br>        }        <br>         <br>        case WM_ACTIVATEAPP: <br>        { <br>            // Determine whether app is being activated or not <br>            g_bActive = (BOOL)wParam ? TRUE : FALSE; <br> <br>            if (g_bActive) <br>            { <br>                while (ShowCursor(FALSE) &gt; 0) { }; <br>                if (!g_bMusicPaused) ResumeMidi(); <br>            } <br>            else <br>            { <br>                ShowCursor(TRUE); <br>                PauseMidi(); <br>            } <br>        } <br>        break; <br>         <br>        case WM_CLOSE: <br>        {                        <br>            DestroyWindow(g_hWnd); <br>        } <br>        break; <br> <br>        case WM_DESTROY: <br>        {                        <br>            // Stop midi music <br>            StopMidi(); <br> <br>            // Destroy scene <br>            TermScene(); <br>             <br>            // Terminate all the DirectX objects, surfaces devices etc <br>            TermDirectX(); <br> <br>            // Show the mouse <br>            ShowCursor(TRUE); <br> <br>            // Time to leave this mortal coil <br>            PostQuitMessage(0); <br>        } <br>        break; <br>         <br>        case MCI_NOTIFY: <br>        { <br>            if (wParam == MCI_NOTIFY_SUCCESSFUL) <br>            { <br>                ReplayMidi(); <br>            } <br>        } <br>        break; <br>    } <br>     <br>    return DefWindowProc(hWnd, message, wParam, lParam); <br>} <br> <br>//------------------------------------------------------------------ <br>//  <br>// Function     : WinMain() <br>// <br>// Purpose      : Entry point to application <br>// <br>//------------------------------------------------------------------ <br> <br>int FAR PASCAL WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR lpCmdLine, int nCmdShow) <br>{ <br>    MSG msg; <br> <br>    // Set global handle <br>    g_hInst = hInst;     <br> <br>    // Initialise window class <br>    if (!InitClass(hInst)) return 1; <br> <br>    // Initialise window <br>    if (!InitWindow(hInst, nCmdShow)) return 1; <br> <br>    // Initialise DirectX objects (Termination is handled in WM_DESTROY) <br>    if (!InitDirectX()) <br>    { <br>            DestroyWindow(g_hWnd); <br>            return 1; <br>    } <br> <br>    // Show the splash screen <br>    DoSplashScreen(2000); <br> <br>    // Load the scene <br>    if (!InitScene())  <br>    { <br>            DestroyWindow(g_hWnd); <br>            return 1; <br>    } <br> <br>    // Release the splash screen <br>    ReleaseSplashScreen(); <br> <br>    // Set DirectDraw exclusive mode here so that the splash could stay <br>    // up during initialisation if we are using a different DirectDraw device <br>    // that could not support 640x480x8 for hardware rendering. <br>    if (!SetDirectDrawExclusiveMode()) <br>    { <br>            RegError("Could not set exclusive mode!"); <br>            return FALSE; <br>    } <br> <br>    // Hide the mouse <br>    ShowCursor(FALSE); <br> <br>    // Enter video mode set in g_dwCurMode <br>    if (!EnterVideoMode(g_dwCurrMode)) <br>    { <br>            DestroyWindow(g_hWnd); <br>            return 1; <br>    } <br> <br>    // Load accelerators <br>    HACCEL hAccel = LoadAccelerators(hInst, MAKEINTRESOURCE(IDR_ACCEL)); <br> <br>    // Start the music! <br>    PlayMidi("RockEm3D.mid"); <br> <br>    // Pump messages via a PeekMessage loop <br>    while (TRUE) <br>    { <br>        while (PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE)) <br>        { <br>            if (msg.message == WM_QUIT) <br>            {                                                            <br>                PostQuitMessage(msg.wParam); <br>                return 1; <br>            } <br> <br>            if (hAccel &amp;&amp; (msg.hwnd == g_hWnd)) <br>            { <br>                TranslateAccelerator(g_hWnd, hAccel, &amp;msg); <br>            } <br> <br>            TranslateMessage(&amp;msg); <br>            DispatchMessage(&amp;msg); <br>        } <br> <br>        // Perform any neccessary updating during idle time <br>        if (g_bActive) <br>        { <br>            // Update everything <br>            CheckInputAndUpdate(); <br>             <br>            // Render the current scene <br>            if (!RenderScene()) <br>            { <br>                DestroyWindow(g_hWnd); <br>                return 1; <br>            } <br>        } <br>    } <br> <br>    // Exit WinMain and terminate the app.... <br>    return msg.wParam; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

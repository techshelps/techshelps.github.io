<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONTROL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3297"></a>CONTROL.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: control.h <br> * <br> ***************************************************************************/ <br> <br>#ifndef __CONTROL_H_ <br>#define __CONTROL_H_ <br> <br>// Type to define what app is currently doing <br>typedef enum <br>{ <br>    DOING_INTRO, <br>    PLAYING_DEMO, <br>    BETWEEN_CAM_VIEWS, <br>} <br>AppState; <br> <br>// Type to define what state the opponent is in <br>typedef enum <br>{ <br>    DEFENSIVE, <br>    CAUTIOUS, <br>    AGGRESSIVE, <br>} <br>PlayerState; <br> <br>// Type to define what kind of camera angles were using <br>typedef enum <br>{ <br>    OVER_SHOULDER, <br>    BOTH_IN_VIEW, <br>    PILOT_VIEW, <br>} <br>CameraState; <br> <br>// Type to define what action the player is doing <br>typedef enum <br>{ <br>    BOBBING, <br>    WALKING, <br>    PUNCHING, <br>    BLOCKING, <br>    BEEN_HIT, <br>    DEAD, <br>    VICTORY, <br>    DISABLED, <br>} <br>PlayerActionState; <br> <br>// Structures <br>struct AnimArgs <br>{ <br>    LPDIRECT3DRMANIMATIONSETlpAnimSet; <br>    D3DVALUEtime; <br>}; <br> <br>void Player1AnimationCallback(LPDIRECT3DRMFRAME obj, void* arg, D3DVALUE delta); <br>void Player2AnimationCallback(LPDIRECT3DRMFRAME obj, void* arg, D3DVALUE delta); <br> <br>void CheckInputAndUpdate(); <br>void UpdateOpponent(); <br>void UpdateDebris(); <br>void RunIntro(); <br>void PositionCamera(); <br>void TransitionCamera(); <br>void AddDebris(D3DVECTOR vOrg, D3DVECTOR vVel, LPDIRECT3DRMMESHBUILDER pDebris); <br> <br>#endif <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIRECTX.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3299"></a>DIRECTX.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: directx.h <br> * <br> ***************************************************************************/ <br> <br>#ifndef __DIRECTX_H_ <br>#define __DIRECTX_H_ <br> <br>// Includes.... <br>#include "d3drmwin.h" <br>#include "dsound.h"      <br>#include "stdio.h" <br> <br>// Defines.... <br>#define NUM_SOUNDS      30 <br> <br>#define INTRO           0 <br>#define PLAYER1_PUNCH1  1 <br>#define PLAYER1_PUNCH2  2 <br>#define PLAYER2_PUNCH1  3 <br>#define PLAYER2_PUNCH2  4 <br>#define PLAYER1_WALK    5 <br>#define PLAYER2_WALK    6 <br>#define WHOOSH1         7 <br>#define WHOOSH2         8 <br>#define PLAYER1_OUCH    9 <br>#define PLAYER2_OUCH    10 <br>#define HEAD_SPRING     11       <br>#define BLOCK1          12 <br>#define BLOCK2          13 <br>#define BLOCK3          14 <br>#define VICTORY_BOO     15 <br>#define VICTORY_YEAH    16 <br>#define CROWD_LOOP      17 <br>#define SERVO_DOWN_1    18 <br>#define SERVO_DOWN_2    19 <br>#define SERVO_DOWN_3    20 <br>#define SERVO_UP_1      21 <br>#define SERVO_UP_2      22 <br>#define SERVO_UP_3      23 <br>#define RANDOM124 <br>#define RANDOM225 <br>#define RANDOM326 <br>#define RANDOM4 27 <br>#define RANDOM528 <br>#define RANDOM629 <br> <br>#define NUM_VID_MODES   50 <br> <br>// Macros <br> <br>// The following macros are used for proper error handling for DirectDraw, <br>// DirectSound, Direct3D and Direct3D retained mode <br>#define TRY_DD(exp) { { HRESULT rval = exp; if (rval != DD_OK) { TraceErrorDD(rval, __FILE__, __LINE__); return FALSE; } } } <br>#define TRY_DS(exp) { { HRESULT rval = exp; if (rval != DS_OK) { TraceErrorDS(rval, __FILE__, __LINE__); return FALSE; } } } <br>#define TRY_D3D(exp) { { HRESULT rval = exp; if (rval != D3D_OK) { TraceErrorD3D(rval, __FILE__, __LINE__); return FALSE; } } } <br>#define TRY_D3DRM(exp) { { HRESULT rval = exp; if (rval != D3DRM_OK) { TraceErrorD3DRM(rval, __FILE__, __LINE__); return FALSE; } } } <br> <br>// Structures.... <br>typedef struct _D3DDeviceInfo <br>{ <br>    D3DCOLORMODEL cm; <br>    LPGUID        lpHWGuid; <br>    D3DDEVICEDESC HWDeviceDesc; <br>    LPGUID        lpSWGuid; <br>    D3DDEVICEDESC SWDeviceDesc; <br>} D3DDeviceInfo; <br> <br>#pragma pack(1) <br>struct WaveHeader <br>{ <br>    BYTE        RIFF[4];          // "RIFF" <br>    DWORD       dwSize;           // Size of data to follow <br>    BYTE        WAVE[4];          // "WAVE" <br>    BYTE        fmt_[4];          // "fmt " <br>    DWORD       dw16;             // 16 <br>    WORD        wOne_0;           // 1 <br>    WORD        wChnls;           // Number of Channels <br>    DWORD       dwSRate;          // Sample Rate <br>    DWORD       BytesPerSec;      // Sample Rate <br>    WORD        wBlkAlign;        // 1 <br>    WORD        BitsPerSample;    // Sample size <br>    BYTE        DATA[4];          // "DATA" <br>    DWORD       dwDSize;          // Number of Samples <br>}; <br>#pragma pack() <br> <br>struct VideoMode <br>{ <br>    int         width; <br>    int         height; <br>    int         bpp; <br>    BOOL        bUsable; <br>}; <br> <br>// Prototypes.... <br> <br>// Error handling <br>void TraceErrorDD(HRESULT hErr, char *sFile, int nLine); <br>void TraceErrorDS(HRESULT hErr, char *sFile, int nLine); <br>void TraceErrorD3D(HRESULT hErr, char *sFile, int nLine); <br>void TraceErrorD3DRM(HRESULT hErr, char *sFile, int nLine); <br> <br>// Callbacks <br>BOOL FAR PASCAL  DDEnumCallback(GUID FAR* lpGUID, LPSTR lpDriverDesc, LPSTR lpDriverName, LPVOID lpContext); <br>HRESULT CALLBACK DDEnumDisplayModesCallback(LPDDSURFACEDESC pddsd, LPVOID Context); <br>HRESULT WINAPI   D3DEnumDeviceCallBack(LPGUID lpGuid, LPSTR lpDeviceDescription, LPSTR lpDeviceName,  <br>                                                                           LPD3DDEVICEDESC lpHWDesc,  LPD3DDEVICEDESC lpHELDesc, LPVOID lpContext); <br> <br>// Initialisation <br>BOOL InitD3DDevice(); <br> <br>BOOL InitDirectX(); <br>BOOL SetDirectDrawExclusiveMode(); <br> <br>// Termination <br>void TermDirectX(); <br> <br>void SortDisplayModes(); <br> <br>BOOL EnterVideoMode(int mode); <br>BOOL EnterVideoModeWHBD(int width, int height, int bitdepth); <br>BOOL EnterNextVideoMode(); <br>BOOL EnterPrevVideoMode(); <br>BOOL EnterLowestVideoMode(); <br>BOOL EnterHighestVideoMode(); <br>BOOL ReenterCurrentVideoMode(); <br>void CleanUp(); <br> <br>BOOL DoSplashScreen(DWORD delay); <br>void ReleaseSplashScreen(); <br> <br>BOOL RestoreSurfaces(); <br> <br>BOOL CreateSoundBuffer(DWORD dwBuf, DWORD dwBufSize, DWORD dwFreq, DWORD dwBitsPerSample, DWORD dwBlkAlign, BOOL bStereo, BOOL bStaticBuf); <br>BOOL ReadData(LPDIRECTSOUNDBUFFER lpDSB, FILE* pFile, DWORD dwSize, DWORD dwPos); <br>BOOL CreateBufferFromWaveFile(char* FileName, DWORD dwBuf); <br>BOOL StopAllSounds(); <br>BOOL PlaySoundDS(DWORD dwSound, D3DVECTOR d3dvPos, DWORD dwFlags = 0); <br>IDirectSoundBuffer *CreateSoundBuffer3D(void); <br>VOID CALLBACK PlayRandomWave( HWND hwnd, UINT uMsg,UINT idEvent, DWORD dwTime ); <br>void RecalcPowerBars(DWORD player1health, DWORD player2health); <br> <br>#endif <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

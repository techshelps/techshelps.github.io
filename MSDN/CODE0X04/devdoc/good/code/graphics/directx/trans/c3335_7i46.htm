<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TRANS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3336"></a>TRANS.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: trans.c <br> * <br> ***************************************************************************/ <br> <br>#include "rmdemo.h" <br> <br>unsigned char check[] = { <br>    1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, <br>    1, 1, 1, 1, 2, 2, 2, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, <br>    1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, <br>    1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, <br>    1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, <br>    1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, <br>    2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 3, 3, 2, 1, 0, 0, 1, <br>    2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, <br>    2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, <br>    2, 3, 3, 2, 1, 0, 0, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, <br>    2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, <br>    1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, <br>    1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, <br>    1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, <br>    1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 1, 1, 1, 2, 2, 2, 2, <br>    1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, <br>    2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, <br>    2, 2, 2, 2, 1, 1, 1, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, <br>    2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, <br>    2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, <br>    2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, <br>    2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, <br>    1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 0, 0, 1, 2, 3, 3, 2, <br>    1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, <br>    1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, <br>    1, 0, 0, 1, 2, 3, 3, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, <br>    1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, <br>    2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, <br>    2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, <br>    2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, <br>    2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 2, 2, 2, 1, 1, 1, 1, <br>    2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, <br>    1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, <br>    1, 1, 1, 1, 2, 2, 2, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, <br>    1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, <br>    1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, <br>    1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, <br>    1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, <br>    2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 3, 3, 2, 1, 0, 0, 1, <br>    2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, <br>    2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, 2, 3, 3, 2, 1, 0, 0, 1, <br>    2, 3, 3, 2, 1, 0, 0, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, <br>    2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, <br>}; <br> <br>D3DRMPALETTEENTRY checkPal[] = { <br>    {0, 0, 0, D3DRMPALETTE_READONLY}, <br>    {127, 255, 127, D3DRMPALETTE_READONLY}, <br>    {0, 0, 255, D3DRMPALETTE_READONLY}, <br>    {255, 255, 127, D3DRMPALETTE_READONLY}, <br>    {255, 255, 255, D3DRMPALETTE_READONLY}, <br>}; <br> <br>D3DRMIMAGE checkImage = { <br>    32, 32, <br>    1, 1, <br>    8, FALSE, <br>    32, <br>    check, NULL, <br>    0xff, 0xff, 0xff, 0xff, <br>    5, checkPal, <br>}; <br> <br>static void CDECL mutateTexture(LPDIRECT3DRMFRAME frame, void* arg, D3DVALUE delta) <br>{ <br>    LPDIRECT3DRMTEXTURE tex = (LPDIRECT3DRMTEXTURE) arg; <br>    static int col = -1; <br>    static int delay = 10; <br>    static int count = 0; <br>    int i; <br> <br>    if (--delay) <br>return; <br>    delay = 10; <br> <br>    if (col &gt;= 0) <br>for (i = 0; i &lt; sizeof(check); i++) <br>    if (check[i] == 4) <br>check[i] = col; <br> <br>    count++; <br>    col = count &amp; 3; <br> <br>    for (i = 0; i &lt; sizeof(check); i++) <br>if (check[i] == col) <br>    check[i] = 4; <br> <br>    tex-&gt;lpVtbl-&gt;Changed(tex, TRUE, FALSE); <br>} <br> <br>BOOL <br>BuildScene(LPDIRECT3DRMDEVICE dev, LPDIRECT3DRMVIEWPORT view, <br>   LPDIRECT3DRMFRAME scene, LPDIRECT3DRMFRAME camera) <br>{ <br>    LPDIRECT3DRMFRAME box1 = NULL; <br>    LPDIRECT3DRMFRAME box2 = NULL; <br>    LPDIRECT3DRMFRAME sphere = NULL; <br>    LPDIRECT3DRMFRAME decal = NULL; <br>    LPDIRECT3DRMFRAME light = NULL; <br>    LPDIRECT3DRMMESH obj = NULL; <br>    LPDIRECT3DRMLIGHT dlight = NULL; <br>    LPDIRECT3DRMLIGHT alight = NULL; <br>    LPDIRECT3DRMTEXTURE tex = NULL; <br>    LPDIRECT3DRMMESHBUILDER builder = NULL; <br>    LPDIRECT3DRMWRAP wrap = NULL; <br>    LPDIRECT3DRMTEXTURE sphereTex = NULL; <br>    LPDIRECT3DRMTEXTURE decalTex = NULL; <br>    LPDIRECT3DRMMATERIAL mat = NULL; <br>    D3DRMBOX box; <br>    D3DVALUE miny, maxy; <br>    D3DVALUE height; <br>    HRESULT rval; <br> <br>    view = view; <br>    dev = dev; <br>    camera = camera;/* unused */ <br> <br>    if (FAILED(scene-&gt;lpVtbl-&gt;SetSceneBackground(scene, D3DRGB(D3DVAL(0.2), D3DVAL(0.2), <br>                                      D3DVAL(0.2))))) <br>      goto generic_error; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;light))) <br>goto generic_error; <br>    if (FAILED(light-&gt;lpVtbl-&gt;SetPosition(light, scene, D3DVAL(2.0), D3DVAL(3.0), <br>                               D3DVAL(8.0)))) <br>       goto generic_error; <br>    if (FAILED(light-&gt;lpVtbl-&gt;SetOrientation(light, scene, D3DVAL(-1.0), D3DVAL(-1.0), <br>                                  D3DVAL(1.0), D3DVAL(0.0), D3DVAL(1.0), D3DVAL(0.0)))) <br>  goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_DIRECTIONAL, D3DVAL(1), <br>                                  D3DVAL(1), D3DVAL(1), &amp;dlight))) <br>  goto generic_error; <br>    if (FAILED(light-&gt;lpVtbl-&gt;AddLight(light, dlight))) <br>goto generic_error; <br>    RELEASE(dlight); <br>    RELEASE(light); <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateLightRGB(lpD3DRM, D3DRMLIGHT_AMBIENT, D3DVAL(0.1), <br>                                  D3DVAL(0.1), D3DVAL(0.1), &amp;alight))) <br>  goto generic_error; <br>    if (FAILED(scene-&gt;lpVtbl-&gt;AddLight(scene, alight))) <br>goto generic_error; <br>    RELEASE(alight); <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;box1))) <br>goto generic_error; <br>    if (FAILED(box1-&gt;lpVtbl-&gt;SetRotation(box1, scene, D3DVAL(0.0), D3DVAL(1.0), D3DVAL(0.0), <br>      D3DVAL(-0.02)))) <br>      goto generic_error; <br>    if (FAILED(box1-&gt;lpVtbl-&gt;SetPosition(box1, scene, D3DVAL(2.0), D3DVAL(0.0), D3DVAL(7.0)))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;builder))) <br>goto generic_error; <br>    rval = builder-&gt;lpVtbl-&gt;Load(builder, "ncube.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load ncube.x.\n"); <br>goto ret_with_error; <br>    } <br>    if (FAILED(builder-&gt;lpVtbl-&gt;SetPerspective(builder, TRUE))) <br>goto generic_error; <br>    if (FAILED(builder-&gt;lpVtbl-&gt;CreateMesh(builder, &amp;obj))) <br>goto generic_error; <br>    RELEASE(builder); <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateTexture(lpD3DRM, &amp;checkImage, &amp;tex))) <br>goto generic_error; <br>    if (FAILED(obj-&gt;lpVtbl-&gt;SetGroupTexture(obj, D3DRMGROUP_ALLGROUPS, tex))) <br>goto generic_error; <br>    if (FAILED(obj-&gt;lpVtbl-&gt;SetGroupMapping(obj, D3DRMGROUP_ALLGROUPS, D3DRMMAP_PERSPCORRECT))) <br>goto generic_error; <br>    if (FAILED(box1-&gt;lpVtbl-&gt;AddVisual(box1, (LPDIRECT3DRMVISUAL) obj))) <br>goto generic_error; <br>    if (FAILED(box1-&gt;lpVtbl-&gt;AddMoveCallback(box1, mutateTexture, tex))) <br>goto generic_error; <br>    RELEASE(obj); <br>    RELEASE(tex); <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;box2))) <br>goto generic_error; <br>    if (FAILED(box2-&gt;lpVtbl-&gt;SetRotation(box2, scene, D3DVAL(0.1), D3DVAL(1.0), D3DVAL(0.0), <br>                              D3DVAL(0.1)))) <br>      goto generic_error; <br>    if (FAILED(box2-&gt;lpVtbl-&gt;SetPosition(box2, box1, D3DVAL(-4.0), D3DVAL(0.0), D3DVAL(0.0)))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;builder))) <br>goto generic_error; <br>    rval = builder-&gt;lpVtbl-&gt;Load(builder, "ncube.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load ncube.x.\n"); <br>goto ret_with_error; <br>    } <br>    //builder-&gt;lpVtbl-&gt;Scale(builder, D3DVAL(2.0), D3DVAL(2.0), D3DVAL(2.0)); <br>    if (FAILED(builder-&gt;lpVtbl-&gt;SetPerspective(builder, TRUE))) <br>goto generic_error; <br>    if (FAILED(builder-&gt;lpVtbl-&gt;CreateMesh(builder, &amp;obj))) <br>goto generic_error; <br>    RELEASE(builder); <br>    rval = lpD3DRM-&gt;lpVtbl-&gt;LoadTexture(lpD3DRM, "checker.ppm", &amp;tex); <br>    if (rval != D3DRM_OK) { <br>Msg("Failed to load checker.ppm.\n"); <br>goto ret_with_error; <br>    } <br>    if (FAILED(tex-&gt;lpVtbl-&gt;SetDecalTransparency(tex, TRUE))) <br>goto generic_error; <br> <br>    if (FAILED(obj-&gt;lpVtbl-&gt;SetGroupTexture(obj, D3DRMGROUP_ALLGROUPS, tex))) <br>goto generic_error; <br>    if (FAILED(obj-&gt;lpVtbl-&gt;SetGroupMapping(obj, D3DRMGROUP_ALLGROUPS, D3DRMMAP_PERSPCORRECT))) <br>goto generic_error; <br>    if (FAILED(box2-&gt;lpVtbl-&gt;AddVisual(box2, (LPDIRECT3DRMVISUAL) obj))) <br>goto generic_error; <br>    RELEASE(obj); <br>    RELEASE(tex); <br>    RELEASE(box2); <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMeshBuilder(lpD3DRM, &amp;builder))) <br>goto generic_error; <br>    rval = builder-&gt;lpVtbl-&gt;Load(builder, "sphere3.x", NULL, <br>    D3DRMLOAD_FROMFILE, NULL, NULL); <br>    if (rval != D3DRM_OK) { <br>        Msg("Failed to load sphere3.x.\n"); <br>goto ret_with_error; <br>    } <br>    if (FAILED(builder-&gt;lpVtbl-&gt;CreateMesh(builder, &amp;obj))) <br>goto generic_error; <br>    RELEASE(builder); <br>    if (FAILED(obj-&gt;lpVtbl-&gt;GetBox(obj, &amp;box))) <br>goto generic_error; <br>    maxy = box.max.y; <br>    miny = box.min.y; <br>    height = maxy - miny; <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateWrap(lpD3DRM, D3DRMWRAP_CYLINDER, NULL, <br>      D3DVAL(0.0), D3DVAL(0.0), D3DVAL(0.0), <br>      D3DVAL(0.0), D3DVAL(1.0), D3DVAL(0.0), <br>      D3DVAL(0.0), D3DVAL(0.0), D3DVAL(1.0), <br>      D3DVAL(0.0), D3DDivide(miny, height), <br>              D3DVAL(1.0), D3DDivide(D3DVAL(-1.0),height), <br>              &amp;wrap))) <br>      goto generic_error; <br>    if (FAILED(wrap-&gt;lpVtbl-&gt;Apply(wrap, (LPDIRECT3DRMOBJECT) obj))) <br>goto generic_error; <br>    RELEASE(wrap); <br> <br>    rval = lpD3DRM-&gt;lpVtbl-&gt;LoadTexture(lpD3DRM, "tex3.ppm", &amp;sphereTex); <br>    if (rval != D3DRM_OK) { <br>Msg("Failed to load tex3.ppm.\n"); <br>goto ret_with_error; <br>    } <br>    if (FAILED(sphereTex-&gt;lpVtbl-&gt;SetColors(sphereTex, 16))) <br>goto generic_error; <br>    if (FAILED(obj-&gt;lpVtbl-&gt;SetGroupTexture(obj, D3DRMGROUP_ALLGROUPS, sphereTex))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateMaterial(lpD3DRM, D3DVAL(16.0), &amp;mat))) <br>goto generic_error; <br>    if (FAILED(obj-&gt;lpVtbl-&gt;SetGroupMaterial(obj, D3DRMGROUP_ALLGROUPS, mat))) <br>goto generic_error; <br>    RELEASE(sphereTex); <br>    RELEASE(mat); <br> <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, scene, &amp;sphere))) <br>goto generic_error; <br>    if (FAILED(sphere-&gt;lpVtbl-&gt;AddVisual(sphere, (LPDIRECT3DRMVISUAL) obj))) <br>goto generic_error; <br>    RELEASE(obj); <br>    if (FAILED(sphere-&gt;lpVtbl-&gt;SetPosition(sphere, scene, D3DVAL(0.0), D3DVAL(0.0), D3DVAL(8.0)))) <br>goto generic_error; <br>    if (FAILED(sphere-&gt;lpVtbl-&gt;SetRotation(sphere, scene, D3DVAL(-0.1), D3DVAL(1.0), <br>                        D3DVAL(0.0), D3DVAL(0.02)))) <br>goto generic_error; <br>    if (FAILED(lpD3DRM-&gt;lpVtbl-&gt;CreateFrame(lpD3DRM, sphere, &amp;decal))) <br>goto generic_error; <br> <br>    rval = lpD3DRM-&gt;lpVtbl-&gt;LoadTexture(lpD3DRM, "checker.ppm", &amp;decalTex); <br>    if (rval != D3DRM_OK) { <br>Msg("Failed to load checker.ppm.\n"); <br>goto ret_with_error; <br>    } <br>    if (FAILED(decalTex-&gt;lpVtbl-&gt;SetDecalScale(decalTex, TRUE))) <br>goto generic_error; <br>    if (FAILED(decalTex-&gt;lpVtbl-&gt;SetDecalSize(decalTex, D3DVAL(2.0), D3DVAL(2.0)))) <br>goto generic_error; <br>    if (FAILED(decalTex-&gt;lpVtbl-&gt;SetDecalOrigin(decalTex, 4, 4))) <br>goto generic_error; <br>    if (FAILED(decalTex-&gt;lpVtbl-&gt;SetDecalTransparency(decalTex, TRUE))) <br>goto generic_error; <br>    if (FAILED(decal-&gt;lpVtbl-&gt;SetPosition(decal, sphere, D3DVAL(0.0), D3DVAL(0.0), D3DVAL(2.0)))) <br>goto generic_error; <br>    if (FAILED(decal-&gt;lpVtbl-&gt;AddVisual(decal, (LPDIRECT3DRMVISUAL) decalTex))) <br>goto generic_error; <br>    RELEASE(decalTex); <br> <br>    RELEASE(box1); <br>    RELEASE(decal); <br>    RELEASE(sphere); <br>    return TRUE; <br>generic_error: <br>    Msg("A failure occurred while building the scene.\n"); <br>ret_with_error: <br>    RELEASE(box1); <br>    RELEASE(box2); <br>    RELEASE(sphere); <br>    RELEASE(decal); <br>    RELEASE(light); <br>    RELEASE(obj); <br>    RELEASE(dlight); <br>    RELEASE(alight); <br>    RELEASE(tex); <br>    RELEASE(builder); <br>    RELEASE(wrap); <br>    RELEASE(sphereTex); <br>    RELEASE(decalTex); <br>    RELEASE(mat); <br>    return FALSE; <br>} <br> <br>void <br>OverrideDefaults(Defaults* defaults) <br>{ <br>    defaults-&gt;bConstRenderQuality = TRUE; <br>    lstrcpy(defaults-&gt;Name, "Transparency Direct3DRM Example"); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

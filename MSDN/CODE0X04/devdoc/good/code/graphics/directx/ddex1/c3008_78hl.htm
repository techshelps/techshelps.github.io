<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DDEX1.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3009"></a>DDEX1.CPP</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       ddex1.cpp <br> *  Content:    Direct Draw example program 1.  Creates a Direct Draw  <br> *              object and then a primary surface with a back buffer. <br> *              Slowly flips between the primary surface and the back <br> *              buffer.  Press F12 to terminate the program. <br> * <br> ***************************************************************************/ <br> <br>#define NAME "DDExample1" <br>#define TITLE "Direct Draw Example 1" <br> <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;ddraw.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdarg.h&gt; <br>#include "resource.h" <br> <br>#define TIMER_ID        1 <br>#define TIMER_RATE      500 <br> <br>LPDIRECTDRAW            lpDD;           // DirectDraw object <br>LPDIRECTDRAWSURFACE     lpDDSPrimary;   // DirectDraw primary surface <br>LPDIRECTDRAWSURFACE     lpDDSBack;      // DirectDraw back surface <br>BOOL                    bActive;        // is application active? <br> <br>/* <br> * finiObjects <br> * <br> * finished with all objects we use; release them <br> */ <br>static void finiObjects( void ) <br>{ <br>    if( lpDD != NULL ) <br>    { <br>if( lpDDSPrimary != NULL ) <br>{ <br>    lpDDSPrimary-&gt;Release(); <br>    lpDDSPrimary = NULL; <br>} <br>lpDD-&gt;Release(); <br>lpDD = NULL; <br>    } <br>} /* finiObjects */ <br> <br>char szMsg[] = "Page Flipping Test: Press F12 to exit"; <br>char szFrontMsg[] = "Front buffer (F12 to quit)"; <br>char szBackMsg[] = "Back buffer (F12 to quit)"; <br> <br>long FAR PASCAL WindowProc( HWND hWnd, UINT message,  <br>    WPARAM wParam, LPARAM lParam ) <br>{ <br>    PAINTSTRUCT ps; <br>    RECT        rc; <br>    SIZE        size; <br>    static BYTE phase = 0; <br>    HDC         hdc; <br> <br>    switch( message ) <br>    { <br>    case WM_ACTIVATEAPP: <br>bActive = wParam; <br>break; <br> <br>    case WM_CREATE: <br>break; <br> <br>    case WM_SETCURSOR: <br>SetCursor(NULL); <br>return TRUE; <br> <br>    case WM_TIMER: <br>// Flip surfaces <br>if( bActive ) <br>{ <br>    if (lpDDSBack-&gt;GetDC(&amp;hdc) == DD_OK) <br>    { <br>SetBkColor( hdc, RGB( 0, 0, 255 ) ); <br>SetTextColor( hdc, RGB( 255, 255, 0 ) ); <br>if( phase ) <br>{ <br>    TextOut( hdc, 0, 0, szFrontMsg, lstrlen(szFrontMsg) ); <br>    phase = 0; <br>} <br>else <br>{ <br>    TextOut( hdc, 0, 0, szBackMsg, lstrlen(szBackMsg) ); <br>    phase = 1; <br>} <br>lpDDSBack-&gt;ReleaseDC(hdc); <br>    } <br> <br>    while( 1 ) <br>    { <br>HRESULT ddrval; <br>ddrval = lpDDSPrimary-&gt;Flip( NULL, 0 ); <br>if( ddrval == DD_OK ) <br>{ <br>    break; <br>} <br>if( ddrval == DDERR_SURFACELOST ) <br>{ <br>    ddrval = lpDDSPrimary-&gt;Restore(); <br>    if( ddrval != DD_OK ) <br>    { <br>break; <br>    } <br>} <br>if( ddrval != DDERR_WASSTILLDRAWING ) <br>{ <br>    break; <br>} <br>    } <br>} <br>break; <br>  <br>    case WM_KEYDOWN: <br>switch( wParam ) <br>{ <br>case VK_ESCAPE: <br>case VK_F12: <br>    PostMessage(hWnd, WM_CLOSE, 0, 0); <br>    break; <br>} <br>break; <br> <br>    case WM_PAINT: <br>BeginPaint( hWnd, &amp;ps ); <br>GetClientRect(hWnd, &amp;rc); <br>GetTextExtentPoint( ps.hdc, szMsg, lstrlen(szMsg), &amp;size ); <br>SetBkColor( ps.hdc, RGB( 0, 0, 255 ) ); <br>SetTextColor( ps.hdc, RGB( 255, 255, 0 ) ); <br>TextOut( ps.hdc, (rc.right - size.cx)/2, (rc.bottom - size.cy)/2, <br>    szMsg, sizeof( szMsg )-1 ); <br>EndPaint( hWnd, &amp;ps ); <br>break; <br> <br>    case WM_DESTROY: <br>finiObjects(); <br>PostQuitMessage( 0 ); <br>break; <br>    } <br> <br>    return DefWindowProc(hWnd, message, wParam, lParam); <br> <br>} /* WindowProc */ <br> <br>/* <br> * doInit - do work required for every instance of the application: <br> *                create the window, initialize data <br> */ <br>static BOOL doInit( HINSTANCE hInstance, int nCmdShow ) <br>{ <br>    HWND                hwnd; <br>    WNDCLASS            wc; <br>    DDSURFACEDESC       ddsd; <br>    DDSCAPS             ddscaps; <br>    HRESULT             ddrval; <br>    HDC                 hdc; <br>    char                buf[256]; <br> <br>    /* <br>     * set up and register window class <br>     */ <br>    wc.style = CS_HREDRAW | CS_VREDRAW; <br>    wc.lpfnWndProc = WindowProc; <br>    wc.cbClsExtra = 0; <br>    wc.cbWndExtra = 0; <br>    wc.hInstance = hInstance; <br>    wc.hIcon = LoadIcon( hInstance, IDI_APPLICATION ); <br>    wc.hCursor = LoadCursor( NULL, IDC_ARROW ); <br>    wc.hbrBackground = NULL; <br>    wc.lpszMenuName = NAME; <br>    wc.lpszClassName = NAME; <br>    RegisterClass( &amp;wc ); <br>     <br>    /* <br>     * create a window <br>     */ <br>    hwnd = CreateWindowEx( <br>WS_EX_TOPMOST, <br>NAME, <br>TITLE, <br>WS_POPUP, <br>0, 0, <br>GetSystemMetrics( SM_CXSCREEN ), <br>GetSystemMetrics( SM_CYSCREEN ), <br>NULL, <br>NULL, <br>hInstance, <br>NULL ); <br> <br>    if( !hwnd ) <br>    { <br>return FALSE; <br>    } <br> <br>    ShowWindow( hwnd, nCmdShow ); <br>    UpdateWindow( hwnd ); <br> <br>    /* <br>     * create the main DirectDraw object <br>     */ <br>    ddrval = DirectDrawCreate( NULL, &amp;lpDD, NULL ); <br>    if( ddrval == DD_OK ) <br>    { <br>// Get exclusive mode <br>ddrval = lpDD-&gt;SetCooperativeLevel( hwnd, <br>DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN ); <br>if(ddrval == DD_OK ) <br>{ <br>    ddrval = lpDD-&gt;SetDisplayMode( 640, 480, 8 ); <br>    if( ddrval == DD_OK ) <br>    { <br>// Create the primary surface with 1 back buffer <br>ddsd.dwSize = sizeof( ddsd ); <br>ddsd.dwFlags = DDSD_CAPS | DDSD_BACKBUFFERCOUNT; <br>ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE | <br>      DDSCAPS_FLIP |  <br>      DDSCAPS_COMPLEX; <br>ddsd.dwBackBufferCount = 1; <br>ddrval = lpDD-&gt;CreateSurface( &amp;ddsd, &amp;lpDDSPrimary, NULL ); <br>if( ddrval == DD_OK ) <br>{ <br>    // Get a pointer to the back buffer <br>    ddscaps.dwCaps = DDSCAPS_BACKBUFFER; <br>    ddrval = lpDDSPrimary-&gt;GetAttachedSurface(&amp;ddscaps,  <br>  &amp;lpDDSBack); <br>    if( ddrval == DD_OK ) <br>    { <br>// draw some text. <br>if (lpDDSPrimary-&gt;GetDC(&amp;hdc) == DD_OK) <br>{ <br>    SetBkColor( hdc, RGB( 0, 0, 255 ) ); <br>    SetTextColor( hdc, RGB( 255, 255, 0 ) ); <br>    TextOut( hdc, 0, 0, szFrontMsg, lstrlen(szFrontMsg) ); <br>    lpDDSPrimary-&gt;ReleaseDC(hdc); <br>} <br> <br>if (lpDDSBack-&gt;GetDC(&amp;hdc) == DD_OK) <br>{ <br>    SetBkColor( hdc, RGB( 0, 0, 255 ) ); <br>    SetTextColor( hdc, RGB( 255, 255, 0 ) ); <br>    TextOut( hdc, 0, 0, szBackMsg, lstrlen(szBackMsg) ); <br>    lpDDSBack-&gt;ReleaseDC(hdc); <br>} <br> <br>// Create a timer to flip the pages <br>if( SetTimer( hwnd, TIMER_ID, TIMER_RATE, NULL ) ) <br>{ <br>     return TRUE; <br>} <br>    } <br>} <br>    } <br>} <br>    } <br> <br>    wsprintf(buf, "Direct Draw Init Failed (%08lx)\n", ddrval ); <br>    MessageBox( hwnd, buf, "ERROR", MB_OK ); <br>    finiObjects(); <br>    DestroyWindow( hwnd ); <br>    return FALSE; <br>} /* doInit */ <br> <br>/* <br> * WinMain - initialization, message loop <br> */ <br>int PASCAL WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, <br>LPSTR lpCmdLine, int nCmdShow) <br>{ <br>    MSG         msg; <br> <br>    lpCmdLine = lpCmdLine; <br>    hPrevInstance = hPrevInstance; <br> <br>    if( !doInit( hInstance, nCmdShow ) ) <br>    { <br>return FALSE; <br>    } <br> <br>    while (GetMessage(&amp;msg, NULL, 0, 0)) <br>    { <br>TranslateMessage(&amp;msg); <br>DispatchMessage(&amp;msg); <br>    } <br> <br>    return msg.wParam; <br> <br>} /* WinMain */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

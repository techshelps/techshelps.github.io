<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILEINFO.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3104"></a>FILEINFO.H</h2>
<pre><code>#ifndef __FILEINFO_H__ <br>#define __FILEINFO_H__ <br> <br> <br>#include &lt;windows.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;dsound.h&gt; <br> <br>#define FREQ_SLIDER_PAGESIZE_HZ     1000    // Move 1000 Hz per page <br>#define FREQ_SLIDER_MAX        100000 <br>#define FREQ_SLIDER_MIN        100 <br> <br>#define VOL_SLIDER_FACTOR        100    // Scaling factor <br>#define VOL_SLIDER_SHIFT        10000   // Offset (guarantees &gt;0 range) <br>#define VOL_SLIDER_PAGE        500 <br>#define VOL_MIN            -10000 <br>#define VOL_MAX            0 <br> <br>#define PAN_SLIDER_FACTOR        100    // Scaling factor <br>#define PAN_SLIDER_SHIFT        10000   // Offset (guarantees &gt;0 range) <br>#define PAN_SLIDER_PAGE        500 <br>#define PAN_MIN            -10000 <br>#define PAN_MAX            10000 <br> <br>#define NOTIFY_MAX                  10000 <br> <br>#define PROGRESS_MIN    0 <br>#define PROGRESS_MAX    10000 <br>#define PROGRESS_TIC    1000 <br> <br>// Internal class state flags <br>#define FI_INTERNALF_3D    0x00000001 <br>#define FI_INTERNALF_HARDWARE0x00000002 <br>#define FI_INTERNALF_LOOPED    0x00000004 <br>#define FI_INTERNALF_PLAYING0x00000008 <br>#define FI_INTERNALF_LOST    0x00000010 <br>#define FI_INTERNALF_LOADED    0x00000020 <br>#define FI_INTERNALF_STATIC    0x00000040 <br>#define FI_INTERNALF_STREAMING0x00000080 <br>#define FI_INTERNALF_USEGETPOS20x00000100 <br>#define FI_INTERNALF_INTERFACE0x00000200 <br>#define FI_INTERNALF_STICKY    0x00000400 <br>#define FI_INTERNALF_GLOBAL    0x00000800 <br>#define FI_INTERNALF_MUTEMAX0x00001000 <br>#define FI_INTERNALF_NOTIFY0x00002000 <br> <br>typedef struct tag_hwtable <br>{ <br>    HWND    hLoopedCheck; <br>    HWND    hProgressSlider, hProgressText, hProgressSpin; <br>    HWND    hFreqText, hFreqSlider; <br>    HWND    hVolText, hVolSlider; <br>    HWND    hPanText, hPanSlider; <br>    HWND    hDataFormatText; <br>    HWND    hPlayCursorText, hWriteCursorText; <br>    HWND    hBufferTypeText, hFocusModeText, hGetPosModeText; <br>    HWND    hNotifyText, hNotifySlider, hNotifyFrame; <br>    HWND    hPlayButton; <br> <br>} HWNDTABLE, *PHWNDTABLE; <br> <br>class FileInfo <br>{ <br>friend BOOL CALLBACK FileInfoDlgProc( HWND, UINT, WPARAM, LPARAM ); <br> <br>// Useful protected member functions <br>protected: <br>    virtual BOOL OnInitDialog( HWND, WPARAM ); <br>    virtual BOOL OnInitMenu( WPARAM, LPARAM ); <br>    virtual BOOL OnCommand( WPARAM, LPARAM ); <br>    virtual BOOL OnHScroll( WORD, LONG, HWND ); <br>    virtual BOOL OnContextMenu( HWND, int, int ); <br>    virtual void OnDestroy(); <br> <br>    virtual BOOL CreateInterface( HWND ); <br>    virtual void UpdateFileName( void ); <br>    void UpdatePlayButton( void ); <br> <br>    virtual void SetSliders( void ); <br> <br>    void UpdateProgressUI( DWORD ); <br>    void UpdateVolUI( LONG, BOOL ); <br>    void UpdatePanUI( LONG, BOOL ); <br>    void UpdateFreqUI( DWORD, BOOL ); <br> <br>    void HandleFreqSliderScroll( WORD, LONG ); <br>    void HandleVolSliderScroll( WORD, LONG ); <br>    void HandlePanSliderScroll( WORD, LONG ); <br>    void HandleProgressSliderScroll( WORD, LONG ); <br>    void HandleProgressSpinScroll( WORD, LONG ); <br>    void HandleNotifySliderScroll( WORD, LONG ); <br>    void UpdateNotifySignal(void); <br> <br>    BOOL HandleFreqContext( WPARAM ); <br>    BOOL HandleVolContext( WPARAM ); <br>    BOOL HandlePanContext( WPARAM ); <br> <br>    inline void SetInternalFlag( BOOL fSet, DWORD dwVal ) <br>    { if( fSet ) m_dwInternalFlags |= dwVal; <br>    else m_dwInternalFlags &amp;= ~dwVal; } <br> <br>public: <br>    FileInfo( class MainWnd *pmw = NULL ); <br>    virtual ~FileInfo(); <br> <br>    int LoadWave( LPSTR lpszFile, int nIndx ); <br>    virtual int NewDirectSoundBuffer( void ); <br>    void SetFileName( LPTSTR lpsz, int nIndx ); <br>    void PlayBuffer( void ); <br>    void StopBuffer( void ); <br> <br>    void Close( void ); <br> <br>    virtual void UpdateUI( void ); <br>    virtual void Duplicate( FileInfo * ); <br> <br>    void CascadeWindow( void ); <br>    void ResetCascade( void ); <br>    void MinimizeWindow( void ); <br>    void RestoreWindow( void ); <br> <br>    void SetOwner( class MainWnd *pmw )   { if( pmw ) m_pmwOwner = pmw; } <br> <br>    inline void Set3D( BOOL fNew ) <br>    { SetInternalFlag( fNew, FI_INTERNALF_3D ); } <br> <br>    inline void SetNotify( BOOL fNew ) <br>    { SetInternalFlag( fNew, FI_INTERNALF_NOTIFY ); } <br> <br>    inline void SetPlaying( BOOL fNew ) <br>    { SetInternalFlag( fNew, FI_INTERNALF_PLAYING ); } <br> <br>    inline void SetSticky( BOOL fNew ) <br>    { SetInternalFlag( fNew, FI_INTERNALF_STICKY ); } <br> <br>    inline void SetGlobal( BOOL fNew ) <br>    { SetInternalFlag( fNew, FI_INTERNALF_GLOBAL ); } <br> <br>    inline void SetLooped( BOOL fNew ) <br>    { SetInternalFlag( fNew, FI_INTERNALF_LOOPED ); } <br> <br>    inline void SetUseGetPos2( BOOL fNew ) <br>    { SetInternalFlag( fNew, FI_INTERNALF_USEGETPOS2 ); } <br> <br>    inline void SetMuteAtMax( BOOL fNew ) <br>    { SetInternalFlag( fNew, FI_INTERNALF_MUTEMAX ); } <br> <br>    inline BOOL Is3D() <br>    { return (m_dwInternalFlags &amp; FI_INTERNALF_3D); } <br> <br>    inline BOOL IsNotifyOn() <br>    { return (m_dwInternalFlags &amp; FI_INTERNALF_NOTIFY); } <br> <br>    inline BOOL IsPlaying() <br>    { return (m_dwInternalFlags &amp; FI_INTERNALF_PLAYING ); } <br> <br>    inline BOOL IsLooped() <br>    { return (m_dwInternalFlags &amp; FI_INTERNALF_LOOPED ); } <br> <br>    inline BOOL IsSticky() <br>    { return (m_dwInternalFlags &amp; FI_INTERNALF_STICKY ); } <br> <br>    inline BOOL IsGlobal() <br>    { return (m_dwInternalFlags &amp; FI_INTERNALF_GLOBAL ); } <br> <br>    inline BOOL IsHardware() <br>    { return (m_dwInternalFlags &amp; FI_INTERNALF_HARDWARE ); } <br> <br>    inline BOOL IsUsingGetPos2() <br>    { return (m_dwInternalFlags &amp; FI_INTERNALF_USEGETPOS2 ); } <br> <br>    inline BOOL IsMutedAtMax() <br>    { return (m_dwInternalFlags &amp; FI_INTERNALF_MUTEMAX ); } <br> <br>    // Send a request to the owner MainWnd object that this object be <br>    // destroyed, which may involve more than a simple delete (like removal <br>    // from a list or something). <br>    void SendDestroyRequest( void ); <br> <br>// Member data <br>protected: <br>    LPBYTE          m_pbData;// Pointer to actual data of file. <br>    UINT            m_cbDataSize;// Size of data. <br>    LPWAVEFORMATEX  m_pwfx;// Pointer to waveformatex structure. <br>    DSBUFFERDESC    m_dsbd; <br> <br>    DWORD        m_dwFreqSliderFactor;   // Scaling factor <br> <br>    DWORD        m_dwInternalFlags;  // A bit field of flags <br> <br>    HWND        m_hwndInterface; <br>    HWNDTABLE    m_ht;// A table of all the control HWND's <br> <br>    BOOL        m_fPlayButtonSaysPlay; <br> <br>    TCHAR           m_szFileName[MAX_PATH]; <br>    int             m_nFileIndex;// Index to filename, without dir. <br> <br>    class MainWnd*  m_pmwOwner; <br> <br>    LPDIRECTSOUNDBUFFER    m_pDSB;     // Pointer to direct sound buffer. <br>    LPDIRECTSOUNDNOTIFY     m_pDSN;     // pointer to direct sound notify instance <br> <br>    DSBPOSITIONNOTIFY       m_dsbPosNotify; <br>//    BOOL                    m_fNotifying; <br>    UINT                    m_dwTimeNotified; <br> <br>    static int    m_xNextPos, m_yNextPos; <br>}; <br> <br>typedef FileInfo *PFILEINFO; <br> <br>BOOL CALLBACK FileInfoDlgProc( HWND, UINT, WPARAM, LPARAM ); <br> <br>BOOL IsValidHandle(HANDLE h); <br>void SafeCloseHandle(HANDLE* pH); <br> <br>#endif// __FILEINFO_H__ <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

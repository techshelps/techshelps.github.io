<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LSNRINFO.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3108"></a>LSNRINFO.CPP</h2>
<pre><code>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;dsound.h&gt; <br>#include &lt;commctrl.h&gt; <br> <br>#include "DSShow3D.h" <br>#include "debug.h" <br>#include "GVars.h" <br>#include "LsnrInfo.h" <br>#include "finfo3d.h" <br> <br> <br>ListenerInfo::ListenerInfo() <br>    { <br>    m_hDistanceEdit = m_hDopplerEdit = m_hRolloffEdit = NULL; <br>    m_hXSlider = m_hYSlider = m_hZSlider = NULL; <br>    m_hXText = m_hYText = m_hZText = NULL; <br> <br>    m_vPos.x = m_vPos.y = m_vPos.z = (D3DVALUE)0.0; <br>    } <br> <br> <br>ListenerInfo::~ListenerInfo() <br>    { <br>    } <br> <br> <br>BOOL ListenerInfo::OnInitDialog( HWND hDlg, WPARAM wParam ) <br>    { <br>    m_hDistanceEdit = GetDlgItem( hDlg, IDC_LISTENER_DISTANCEFACTOR_EDIT ); <br>    m_hDopplerEdit = GetDlgItem( hDlg, IDC_LISTENER_DOPPLERFACTOR_EDIT ); <br>    m_hRolloffEdit = GetDlgItem( hDlg, IDC_LISTENER_ROLLOFFFACTOR_EDIT ); <br> <br>    m_hXSlider = GetDlgItem( hDlg, IDC_LISTENER_X_SLIDER ); <br>    m_hYSlider = GetDlgItem( hDlg, IDC_LISTENER_Y_SLIDER ); <br>    m_hZSlider = GetDlgItem( hDlg, IDC_LISTENER_Z_SLIDER ); <br> <br>    m_hXText = GetDlgItem( hDlg, IDC_LISTENER_X_TEXT ); <br>    m_hYText = GetDlgItem( hDlg, IDC_LISTENER_Y_TEXT ); <br>    m_hZText = GetDlgItem( hDlg, IDC_LISTENER_Z_TEXT ); <br> <br>    // Initialize the distance factor to metres <br>    Edit_SetText( m_hDistanceEdit, "1.0" ); <br>    Edit_SetText( m_hDopplerEdit, "1.0" ); <br>    Edit_SetText( m_hRolloffEdit, "1.0" ); <br> <br>    gp3DListener-&gt;SetPosition( D3DVAL(0.0f), D3DVAL(0.0f), D3DVAL(-10.0f), DS3D_IMMEDIATE ); <br>//    gp3DListener-&gt;CommitDeferredSettings(); <br> <br>    SetSliders(); <br> <br>    return TRUE; <br>    } <br> <br> <br>void ListenerInfo::UpdateUI( void ) <br>    { <br>    UpdateXSliderUI( 0, TRUE ); <br>    UpdateYSliderUI( 0, TRUE ); <br>    UpdateZSliderUI( 0, TRUE ); <br>    } <br> <br> <br>BOOL ListenerInfo::OnCommand( WPARAM wParam, LPARAM lParam ) <br>    { <br>    TCHAR   szEdit[16]; <br> <br>    if( HIWORD(wParam) == EN_CHANGE ) <br>{ <br>if( (HWND)lParam == m_hDistanceEdit ) <br>    { <br>    Edit_GetText( m_hDistanceEdit, szEdit, sizeof(szEdit)); <br> <br>    ASSERT( NULL != gp3DListener ); <br>    DPF( 3, "Setting Distance Factor: %s", szEdit ); <br>    gp3DListener-&gt;SetDistanceFactor(D3DVAL(atof(szEdit)), DS3D_IMMEDIATE ); <br>    } <br>else if((HWND)lParam == m_hDopplerEdit ) <br>    { <br>    Edit_GetText( m_hDopplerEdit, szEdit, sizeof(szEdit)); <br> <br>    ASSERT( NULL != gp3DListener ); <br>    DPF( 3, "Setting Doppler Factor: %s", szEdit ); <br>    gp3DListener-&gt;SetDopplerFactor(D3DVAL(atof(szEdit)), DS3D_IMMEDIATE ); <br>    } <br>else if((HWND)lParam == m_hRolloffEdit ) <br>    { <br>    Edit_GetText( m_hRolloffEdit, szEdit, sizeof(szEdit)); <br> <br>    ASSERT( NULL != gp3DListener ); <br>    DPF( 3, "Setting Rolloff Factor: %s", szEdit ); <br>    gp3DListener-&gt;SetRolloffFactor(D3DVAL(atof(szEdit)), DS3D_IMMEDIATE ); <br>    } <br>} <br>    return FALSE; <br>    } <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// OnHScroll() <br>// <br>//    Main message handler for the WM_HSCROLL message.  this function basically <br>// figures out which horizontal scrolling control is responsible for sending <br>// the message and passes on handling to an appropriate function for handling. <br>// <br>BOOL ListenerInfo::OnHScroll( WORD wNotification, LONG lPos, HWND hControl ) <br>    { <br>    if( !hControl ) <br>return FALSE; <br>     <br>    if( hControl == m_hXSlider ) <br>{ <br>HandleXSliderScroll( wNotification, lPos ); <br>return TRUE; <br>} <br>    else if( hControl == m_hYSlider ) <br>{ <br>HandleYSliderScroll( wNotification, lPos ); <br>return TRUE; <br>} <br>    else if( hControl == m_hZSlider ) <br>{ <br>HandleZSliderScroll( wNotification, lPos ); <br>return TRUE; <br>} <br>    else <br>return FALSE; <br>    } <br> <br> <br>void ListenerInfo::OnDestroy( void ) <br>    { <br>    } <br> <br> <br>BOOL CALLBACK ListenerInfoDlgProc( HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam ) <br>    { <br>    PLISTENERINFO   pli; <br> <br>    switch( message ) <br>{ <br>case WM_INITDIALOG: <br>    ASSERT( lParam != NULL ); <br>    pli = (PLISTENERINFO)lParam; <br>    SetWindowLong( hDlg, DWL_USER, (LONG)pli ); <br> <br>    if( !pli-&gt;OnInitDialog( hDlg, wParam )) <br>DestroyWindow( hDlg ); <br>    return TRUE; <br> <br>case WM_HSCROLL: <br>    pli = (PLISTENERINFO)GetWindowLong( hDlg, DWL_USER ); <br>    ASSERT( NULL != pli ); <br>    return !pli-&gt;OnHScroll( LOWORD(wParam), (LONG)HIWORD(wParam), (HWND)lParam ); <br> <br>case WM_COMMAND: <br>    pli = (PLISTENERINFO)GetWindowLong( hDlg, DWL_USER ); <br>    // It's possible to get child notifications before the <br>    // INITDIALOG message, so we'll handle a NULL class item <br>    // here a less stringently <br>    if( !pli ) <br>return FALSE; <br>    return !pli-&gt;OnCommand( wParam, lParam ); <br> <br>case WM_DESTROY: <br>    pli = (PLISTENERINFO)GetWindowLong( hDlg, DWL_USER ); <br>    ASSERT( NULL != pli ); <br>    pli-&gt;OnDestroy(); <br>    return TRUE; <br> <br>default: <br>    return FALSE; <br>} <br>    } <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// <br>// <br>// <br>void ListenerInfo::SetSliders( void ) <br>    { <br>    SendMessage( m_hXSlider, TBM_SETRANGEMIN, FALSE, <br>(LPARAM)(LISTENER_SLIDER_MIN + LISTENER_SLIDER_SHIFT) / LISTENER_SLIDER_FACTOR ); <br>    SendMessage( m_hXSlider, TBM_SETRANGEMAX, FALSE, <br>(LPARAM)(LISTENER_SLIDER_MAX + LISTENER_SLIDER_SHIFT) / LISTENER_SLIDER_FACTOR ); <br>    SendMessage( m_hXSlider, TBM_SETPAGESIZE, 0, LISTENER_SLIDER_FACTOR); <br> <br>    SendMessage( m_hYSlider, TBM_SETRANGEMIN, FALSE, <br>(LPARAM)(LISTENER_SLIDER_MIN + LISTENER_SLIDER_SHIFT) / LISTENER_SLIDER_FACTOR ); <br>    SendMessage( m_hYSlider, TBM_SETRANGEMAX, FALSE, <br>(LPARAM)(LISTENER_SLIDER_MAX + LISTENER_SLIDER_SHIFT) / LISTENER_SLIDER_FACTOR ); <br>    SendMessage( m_hYSlider, TBM_SETPAGESIZE, 0, LISTENER_SLIDER_FACTOR); <br> <br>    SendMessage( m_hZSlider, TBM_SETRANGEMIN, FALSE, <br>(LPARAM)(LISTENER_SLIDER_MIN + LISTENER_SLIDER_SHIFT) / LISTENER_SLIDER_FACTOR ); <br>    SendMessage( m_hZSlider, TBM_SETRANGEMAX, FALSE, <br>(LPARAM)(LISTENER_SLIDER_MAX + LISTENER_SLIDER_SHIFT) / LISTENER_SLIDER_FACTOR ); <br>    SendMessage( m_hZSlider, TBM_SETPAGESIZE, 0, LISTENER_SLIDER_FACTOR); <br> <br>    UpdateUI(); <br>    } <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// <br>// <br>// <br>void ListenerInfo::HandleXSliderScroll( WORD wNot, LONG lPos ) <br>    { <br>    HRESULT hr; <br>    BOOL fUpdate = TRUE; <br> <br>    switch( wNot ) <br>{ <br>case TB_THUMBTRACK: <br>    break; <br> <br>case TB_ENDTRACK: <br>case TB_LINEDOWN: <br>case TB_LINEUP: <br>case TB_PAGEDOWN: <br>case TB_PAGEUP: <br>    lPos = SendMessage( m_hXSlider, TBM_GETPOS, 0, 0 ); <br>    break; <br> <br>default: <br>    fUpdate = FALSE; <br>} <br>     <br>    if( fUpdate &amp;&amp; NULL != gp3DListener ) <br>{ <br>m_vPos.x = D3DVAL(lPos * LISTENER_SLIDER_FACTOR) - LISTENER_SLIDER_SHIFT; <br>DPF( 3, "Setting listener pos: (%i, %i, %i)", (int)m_vPos.x, (int)m_vPos.y, (int)m_vPos.z ); <br>if( FAILED( hr = gp3DListener-&gt;SetPosition( m_vPos.x, m_vPos.y, <br>m_vPos.z, DS3D_IMMEDIATE ))) <br>    DPF( 0, "IDirectSound3DListener::SetPosition returned : %s", TranslateDSError(hr)); <br>UpdateXSliderUI((lPos * LISTENER_SLIDER_FACTOR) - LISTENER_SLIDER_SHIFT, FALSE ); <br>} <br>    } <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// <br>// <br>// <br>void ListenerInfo::HandleYSliderScroll( WORD wNot, LONG lPos ) <br>    { <br>    HRESULT hr; <br>    BOOL fUpdate = TRUE; <br> <br>    switch( wNot ) <br>{ <br>case TB_THUMBTRACK: <br>    break; <br> <br>case TB_ENDTRACK: <br>case TB_LINEDOWN: <br>case TB_LINEUP: <br>case TB_PAGEDOWN: <br>case TB_PAGEUP: <br>    lPos = SendMessage( m_hYSlider, TBM_GETPOS, 0, 0 ); <br>    break; <br> <br>default: <br>    fUpdate = FALSE; <br>} <br>     <br>    if( fUpdate &amp;&amp; NULL != gp3DListener ) <br>{ <br>m_vPos.y = D3DVAL(lPos * LISTENER_SLIDER_FACTOR) - LISTENER_SLIDER_SHIFT; <br>DPF( 3, "Setting listener pos: (%i, %i, %i)", (int)m_vPos.x, (int)m_vPos.y, (int)m_vPos.z ); <br>if( FAILED( hr = gp3DListener-&gt;SetPosition( m_vPos.x, m_vPos.y, <br>m_vPos.z, DS3D_IMMEDIATE ))) <br>    DPF( 0, "IDirectSound3DListener::SetPosition returned : %s", TranslateDSError(hr)); <br>UpdateYSliderUI((lPos * LISTENER_SLIDER_FACTOR) - LISTENER_SLIDER_SHIFT, FALSE ); <br>} <br>    } <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// <br>// <br>// <br>// <br>void ListenerInfo::HandleZSliderScroll( WORD wNot, LONG lPos ) <br>    { <br>    HRESULT hr; <br>    BOOL fUpdate = TRUE; <br> <br>    switch( wNot ) <br>{ <br>case TB_THUMBTRACK: <br>    break; <br> <br>case TB_ENDTRACK: <br>case TB_LINEDOWN: <br>case TB_LINEUP: <br>case TB_PAGEDOWN: <br>case TB_PAGEUP: <br>    lPos = SendMessage( m_hZSlider, TBM_GETPOS, 0, 0 ); <br>    break; <br> <br>default: <br>    fUpdate = FALSE; <br>} <br>     <br>    if( fUpdate &amp;&amp; NULL != gp3DListener ) <br>{ <br>m_vPos.z = D3DVAL(lPos * LISTENER_SLIDER_FACTOR) - LISTENER_SLIDER_SHIFT; <br>DPF( 3, "Setting listener pos: (%i, %i, %i)", (int)m_vPos.x, (int)m_vPos.y, (int)m_vPos.z ); <br>if( FAILED( hr = gp3DListener-&gt;SetPosition( m_vPos.x, m_vPos.y, <br>m_vPos.z, DS3D_IMMEDIATE ))) <br>    DPF( 0, "IDirectSound3DListener::SetPosition returned : %s", TranslateDSError(hr)); <br>UpdateZSliderUI((lPos * LISTENER_SLIDER_FACTOR) - LISTENER_SLIDER_SHIFT, FALSE ); <br>} <br>    } <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// UpdateXSliderUI() <br>// <br>//    Update anything that displays the position of the X slider in some manner <br>// to reflect the new position, either from the buffer or from the parameter. <br>// <br>void ListenerInfo::UpdateXSliderUI( LONG lForcePos, BOOL fFromInterface ) <br>    { <br>    TCHAR   szText[8]; <br>    LONG    lPos; <br> <br>    if( fFromInterface ) <br>        { <br>if( NULL != gp3DListener ) <br>    { <br>    gp3DListener-&gt;GetPosition( &amp;m_vPos ); <br>    lPos = (LONG)m_vPos.x; <br>    } <br>else <br>    lPos = 0; <br>} <br>    else <br>lPos = lForcePos; <br> <br>    SendMessage( m_hXSlider, TBM_SETPOS, (WPARAM)TRUE, <br>    (LPARAM)(lPos + LISTENER_SLIDER_SHIFT) / LISTENER_SLIDER_FACTOR ); <br>    wsprintf( szText, "%i", lPos ); <br>    Static_SetText( m_hXText, szText ); <br>    } <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// UpdateYSliderUI() <br>// <br>//    Update anything that displays the position of the Y slider in some manner <br>// to reflect the new position, either from the buffer or from the parameter. <br>// <br>void ListenerInfo::UpdateYSliderUI( LONG lForcePos, BOOL fFromInterface ) <br>    { <br>    TCHAR   szText[8]; <br>    LONG    lPos; <br> <br>    if( fFromInterface ) <br>        { <br>if( NULL != gp3DListener ) <br>    { <br>    gp3DListener-&gt;GetPosition( &amp;m_vPos ); <br>    lPos = (LONG)m_vPos.y; <br>    } <br>else <br>    lPos = 0; <br>} <br>    else <br>lPos = lForcePos; <br> <br>    SendMessage( m_hYSlider, TBM_SETPOS, (WPARAM)TRUE, <br>    (LPARAM)(lPos + LISTENER_SLIDER_SHIFT) / LISTENER_SLIDER_FACTOR ); <br>    wsprintf( szText, "%i", lPos ); <br>    Static_SetText( m_hYText, szText ); <br>    } <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>// UpdateZSliderUI() <br>// <br>//    Update anything that displays the position of the Z slider in some manner <br>// to reflect the new position, either from the buffer or from the parameter. <br>// <br>void ListenerInfo::UpdateZSliderUI( LONG lForcePos, BOOL fFromInterface ) <br>    { <br>    TCHARszText[8]; <br>    LONGlPos; <br> <br>    if( fFromInterface ) <br>        { <br>if( NULL != gp3DListener ) <br>    { <br>    gp3DListener-&gt;GetPosition( &amp;m_vPos ); <br>    lPos = (LONG)m_vPos.z; <br>    } <br>else <br>    lPos = 0; <br>} <br>    else <br>lPos = lForcePos; <br> <br>    SendMessage( m_hZSlider, TBM_SETPOS, (WPARAM)TRUE, <br>    (LPARAM)(lPos + LISTENER_SLIDER_SHIFT) / LISTENER_SLIDER_FACTOR ); <br>    wsprintf( szText, "%i", lPos ); <br>    Static_SetText( m_hZText, szText ); <br>    } <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DBLIST.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3096"></a>DBLIST.H</h2>
<pre><code>#ifndef __DBLIST_H__ <br>#define __DBLIST_H__ <br> <br>#include "debug.h" <br> <br>#ifndef __cplusplus <br>#error DBList.h included from a C file! <br>#endif <br> <br>//forward declaration of template used as friend class <br>template &lt;class T&gt; class DbLinkedList; <br> <br>template&lt;class A&gt; <br>class DblNode <br>{ <br>friend class DbLinkedList&lt;A&gt;; <br> <br>private: <br>    class DblNode&lt;A&gt;    *pNext; <br>    class DblNode&lt;A&gt;    *pPrev; <br> <br>    A       value; <br>}; <br> <br>template &lt;class T&gt; <br>class DbLinkedList <br>{ <br>private: <br> <br>public: <br>    DbLinkedList(); <br>    DbLinkedList( T emptyElt ); <br>    ~DbLinkedList(); <br> <br>    inline void SetEmpty( T emptyElt ) { m_emptyT = emptyElt; } <br> <br>    inline BOOL IsAtTail()  { ASSERT( NULL != m_pCurrent ); <br>                    return (m_pCurrent-&gt;pNext == NULL); } <br> <br>    void Clear( void ); <br>    void RemoveCurrent(); <br>    void Remove( T ); <br>    BOOL InsertAfterCurrent( T val ); <br>    BOOL InsertBeforeCurrent( T val ); <br>    T GetCurrent(); <br>    void Append( T ); <br> <br>    inline void SetAtHead()     { m_pCurrent = m_pHead; } <br>    inline void SetAtTail()     { m_pCurrent = m_pTail; } <br> <br>    void AssertValid(); <br> <br>    inline int GetElementCount( void )  { return m_nElementCount; } <br> <br>    DbLinkedList&lt;T&gt; &amp;operator++() <br>        { if( m_pCurrent &amp;&amp; m_pCurrent-&gt;pNext ) m_pCurrent = m_pCurrent-&gt;pNext; return *this; } <br>    DbLinkedList&lt;T&gt; &amp;operator++( int ) <br>        { if( m_pCurrent &amp;&amp; m_pCurrent-&gt;pNext ) m_pCurrent = m_pCurrent-&gt;pNext; return *this; } <br>    DbLinkedList&lt;T&gt; &amp;operator--() <br>        { if( m_pCurrent &amp;&amp; m_pCurrent-&gt;pPrev ) m_pCurrent = m_pCurrent-&gt;pPrev; return *this; } <br>    DbLinkedList&lt;T&gt; &amp;operator--( int ) <br>        { if( m_pCurrent &amp;&amp; m_pCurrent-&gt;pPrev ) m_pCurrent = m_pCurrent-&gt;pPrev; return *this; } <br> <br> <br>protected: <br>    DblNode&lt;T&gt;  *m_pHead; <br>    DblNode&lt;T&gt;  *m_pTail; <br>    DblNode&lt;T&gt;  *m_pCurrent; <br> <br>    int m_nElementCount; <br>    T   m_emptyT; <br>}; <br> <br> <br>// Because of the way templates work, we must include the code from the <br>// header file. <br>#include "DbList.cpp" <br> <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

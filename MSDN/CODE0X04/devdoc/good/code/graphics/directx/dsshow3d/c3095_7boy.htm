<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DBLIST.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3112"></a>DBLIST.CPP</h2>
<pre><code>#include &lt;windows.h&gt; <br>#include "debug.h" <br> <br>template&lt;class T&gt; <br>DbLinkedList&lt;T&gt;::DbLinkedList() <br>{ <br>    m_pTail = m_pHead = m_pCurrent = NULL; <br>} <br> <br> <br>template&lt;class T&gt; <br>DbLinkedList&lt;T&gt;::DbLinkedList( T emptyElt ) <br>{ <br>    m_pTail = m_pHead = m_pCurrent = NULL; <br>    m_emptyT = emptyElt; <br>} <br> <br> <br>template&lt;class T&gt; <br>DbLinkedList&lt;T&gt;::~DbLinkedList() <br>{ <br>    Clear(); <br>} <br> <br> <br>template&lt;class T&gt; <br>void DbLinkedList&lt;T&gt;::Clear( void ) <br>{ <br>    DblNode&lt;T&gt;*pTemp; <br> <br>    while( m_nElementCount ) <br>    { <br>pTemp = m_pHead-&gt;pNext; <br>delete m_pHead; <br>m_pHead = pTemp; <br>m_nElementCount--; <br>    } <br> <br>    m_pHead = m_pTail = m_pCurrent = NULL; <br>} <br> <br> <br>template&lt;class T&gt; <br>void DbLinkedList&lt;T&gt;::Remove( T val ) <br>{ <br>    DblNode&lt;T&gt;*pTemp = m_pHead; <br> <br>    while( pTemp ) <br>    { <br>if( pTemp-&gt;value == val ) <br>{ <br>    if( pTemp-&gt;pNext ) <br>    pTemp-&gt;pNext-&gt;pPrev = pTemp-&gt;pPrev; <br>    if( pTemp-&gt;pPrev ) <br>    pTemp-&gt;pPrev-&gt;pNext = pTemp-&gt;pNext; <br>    if( m_pHead == pTemp ) <br>    m_pHead = pTemp-&gt;pNext; <br>    if( m_pTail == pTemp ) <br>    m_pTail = pTemp-&gt;pPrev; <br> <br>    delete pTemp; <br> <br>    m_nElementCount--; <br>    pTemp = NULL; <br>    return; <br>} <br> <br>pTemp = pTemp-&gt;pNext; <br>    } <br>} <br> <br>template&lt;class T&gt; <br>void DbLinkedList&lt;T&gt;::RemoveCurrent() <br>{ <br>    if( m_pCurrent ) <br>    { <br>ASSERT( m_nElementCount &gt; 0 ); <br> <br>if( m_pCurrent-&gt;pNext ) <br>m_pCurrent-&gt;pNext-&gt;pPrev = m_pCurrent-&gt;pPrev; <br>if( m_pCurrent-&gt;pPrev ) <br>m_pCurrent-&gt;pPrev-&gt;pNext = m_pCurrent-&gt;pNext; <br>if( m_pHead == m_pCurrent ) <br>m_pHead = m_pCurrent-&gt;pNext; <br>if( m_pTail == m_pCurrent ) <br>m_pTail = m_pCurrent-&gt;pPrev; <br> <br>delete m_pCurrent; <br> <br>m_nElementCount--; <br>m_pCurrent = NULL; <br>    } <br>} <br> <br>template&lt;class T&gt; <br>T DbLinkedList&lt;T&gt;::GetCurrent() <br>{ <br>    if( m_pCurrent ) <br>    { <br>ASSERT( m_nElementCount &gt; 0 ); <br> <br>return m_pCurrent-&gt;value; <br>    } <br>    return m_emptyT; <br>} <br> <br>// TRUE == success, FALSE == failure <br>template&lt;class T&gt; <br>BOOL DbLinkedList&lt;T&gt;::InsertAfterCurrent( T val ) <br>{ <br>    DblNode&lt;T&gt; *pTemp = new DblNode&lt;T&gt;; <br> <br>    if( NULL == pTemp ) <br>return FALSE; <br> <br>    if( NULL == m_pCurrent ) <br>    { <br>AssertValid(); <br>if( NULL != m_pHead ) <br>   { <br>pTemp-&gt;value = val; <br>pTemp-&gt;pPrev = m_pHead; <br>pTemp-&gt;pNext = m_pHead-&gt;pNext; <br>if( m_pHead-&gt;pNext ) <br>    m_pHead-&gt;pNext-&gt;pPrev = pTemp; <br>if( m_pTail == m_pHead ) <br>    m_pTail = pTemp; <br>   } <br>    } else { <br>pTemp-&gt;value = val; <br>pTemp-&gt;pPrev = m_pCurrent; <br>pTemp-&gt;pNext = m_pCurrent-&gt;pNext; <br>if( m_pCurrent-&gt;pNext ) <br>    m_pCurrent-&gt;pNext-&gt;pPrev = pTemp; <br>// If we were pointing at the tail, we are no longer pointing <br>// at it because we put a new element after the current one. <br>if( m_pTail == m_pCurrent ) <br>    m_pTail = pTemp; <br>    } <br> <br>    return TRUE; <br>} <br> <br> <br>// TRUE == success, FALSE == failure <br>template&lt;class T&gt; <br>BOOL DbLinkedList&lt;T&gt;::InsertBeforeCurrent( T val ) <br>{ <br>    DblNode&lt;T&gt; *pTemp = new DblNode&lt;T&gt;; <br> <br>    if( NULL == pTemp ) <br>return FALSE; <br> <br>    if( NULL == m_pCurrent ) <br>    { <br>AssertValid(); <br>if( NULL != m_pHead ) <br>   { <br>pTemp-&gt;value = val; <br>pTemp-&gt;pPrev = m_pHead; <br>pTemp-&gt;pNext = m_pHead-&gt;pNext; <br>if( m_pHead-&gt;pNext ) <br>    m_pHead-&gt;pNext-&gt;pPrev = pTemp; <br>if( m_pTail == m_pHead ) <br>    m_pTail = pTemp; <br>   } <br>    } else { <br>pTemp-&gt;value = val; <br>pTemp-&gt;pPrev = m_pCurrent; <br>pTemp-&gt;pNext = m_pCurrent-&gt;pNext; <br>if( m_pCurrent-&gt;pNext ) <br>    m_pCurrent-&gt;pNext-&gt;pPrev = pTemp; <br>// If we were pointing at the tail, we are no longer pointing <br>// at it because we put a new element after the current one. <br>if( m_pTail == m_pCurrent ) <br>    m_pTail = pTemp; <br>    } <br> <br>    return TRUE; <br>} <br> <br> <br>template&lt;class T&gt; <br>void DbLinkedList&lt;T&gt;::Append( T val ) <br>{ <br>    DblNode&lt;T&gt; *pNode = new DblNode&lt;T&gt;; <br> <br>    if( NULL == pNode ) <br>return; <br> <br>    AssertValid(); <br>     <br>    pNode-&gt;value = val; <br>    pNode-&gt;pNext = NULL; <br>    pNode-&gt;pPrev = m_pTail; <br> <br>    if( m_pTail ) <br>m_pTail-&gt;pNext = pNode; <br>    if( !m_pHead ) <br>m_pHead = pNode; <br>    m_pTail = pNode; <br>    m_nElementCount++; <br> <br>    // If there were no elements in the list, the m_pCurrent will be NULL <br>    if( NULL == m_pCurrent ) <br>    { <br>ASSERT( m_nElementCount == 1 ); <br>m_pCurrent = m_pHead; <br>    } <br>} <br> <br> <br>// Do some assertions that determine whether or not this object is in a valid <br>// state.  If it's not, one of these will fire. <br>template&lt;class T&gt; <br>void DbLinkedList&lt;T&gt;::AssertValid( void ) <br>{ <br>    if( m_nElementCount ) <br>    { <br>// If there are elements, then both these pointers should point <br>        // at a legitimate DblNode object, or the list is corrupted <br>ASSERT( NULL != m_pHead ); <br>ASSERT( NULL != m_pTail ); <br>ASSERT( NULL != m_pCurrent ); <br>    } <br>    else <br>    { <br>ASSERT( NULL == m_pHead ); <br>ASSERT( NULL == m_pTail ); <br>ASSERT( NULL == m_pCurrent ); <br>    } <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TILE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3214"></a>TILE.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> *  Copyright (C) 1994-1995 ATI Technologies Inc. All Rights Reserved. <br> * <br> *  File:tile.c <br> *  Content:tile loading and initialization functions <br> * <br> ***************************************************************************/ <br>#include "foxbear.h" <br> <br>/* <br> * CreateTiles <br> */ <br>HBITMAPLIST *CreateTiles( HBITMAPLIST *phBitmapList, USHORT n ) <br>{ <br>    HBITMAPLIST *hTileList; <br>    USHORT i; <br> <br>    hTileList = CMemAlloc( n, sizeof (HBITMAPLIST) ); <br> <br>    if( hTileList == NULL ) <br>    { <br>ErrorMessage( "hTileList in CreateTiles" ); <br>    } <br> <br>    for( i = 0; i &lt; n; ++i ) <br>    { <br>hTileList[i].hBM = phBitmapList[i].hBM; <br>    } <br>    return hTileList; <br> <br>} /* CreateTiles */ <br> <br>/* <br> * DestroyTiles <br> */ <br>BOOL DestroyTiles( HBITMAPLIST *phTileList ) <br>{ <br>    MemFree( phTileList ); <br> <br>    return TRUE; <br> <br>} /* DestroyTiles */ <br> <br>/* <br> * getData <br> */ <br>LPSTR getData(LPSTR fileName) <br>{ <br>    LPSTR       p = NULL; <br>    HRSRChRes; <br> <br>    hRes = FindResource(NULL, fileName, RT_RCDATA); <br> <br>    if( hRes != NULL ) <br>    { <br>        p = LockResource(LoadResource(NULL, hRes)); <br>    } <br> <br>    return p; <br> <br>} /* getData */ <br> <br>/* <br> * CreatePosList <br> */ <br>HPOSLIST *CreatePosList( LPSTR fileName, USHORT width, USHORT height ) <br>{ <br>    HPOSLIST*hPosList; <br>    USHORTpos; <br>    LPSTRp; <br> <br>    p = getData( fileName ); <br> <br>    if( p == NULL ) <br>    { <br>ErrorMessage( "p in CreatePosList" ); <br>    } <br> <br>    hPosList = CMemAlloc( width * height, sizeof (USHORT) ); <br> <br>    if( hPosList == NULL ) <br>    { <br>ErrorMessage( "posList in CreatePosList" ); <br>    } <br> <br>    for( pos = 0; pos &lt; width * height; ++pos ) <br>    { <br>hPosList[pos] = (USHORT) getint(&amp;p, 0) - 1; <br>    } <br> <br>    return hPosList; <br> <br>} /* CreatePosList */ <br> <br>/* <br> * CreateSurfaceList <br> */ <br>HSURFACELIST *CreateSurfaceList( LPSTR fileName, USHORT width, USHORT height ) <br>{ <br>    HSURFACELIST*hSurfaceList; <br>    USHORTpos; <br>    USHORTvalue; <br>    LPSTRp; <br> <br>    p = getData( fileName ); <br> <br>    if( p == NULL ) <br>    { <br>ErrorMessage( "p in CreateSurfaceList" ); <br>    } <br> <br>    hSurfaceList = CMemAlloc( width * height, sizeof (HSURFACELIST) ); <br> <br>    if( hSurfaceList == NULL ) <br>    { <br>ErrorMessage( "posList in CreateSurfaceList" ); <br>    } <br> <br>    for( pos = 0; pos &lt; width * height; ++pos ) <br>    { <br>value = (USHORT) getint(&amp;p, 0); <br> <br>if( value == 0 ) <br>{ <br>    hSurfaceList[pos] = FALSE; <br>} <br>else <br>{ <br>    hSurfaceList[pos] = TRUE; <br>} <br>    } <br> <br>    return hSurfaceList; <br> <br>} /* CreateSurfaceList */ <br> <br>/* <br> * DestoryPosList <br> */ <br>BOOL DestroyPosList ( HPOSLIST *posList ) <br>{ <br>    if( posList == NULL ) <br>    { <br>ErrorMessage( "posList in DestroyPosList" ); <br>    } <br> <br>    MemFree( posList ); <br>    return TRUE; <br> <br>} /* DestroyPosList */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

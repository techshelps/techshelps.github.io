<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GAMEPROC.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3205"></a>GAMEPROC.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> *  Copyright (C) 1994-1995 ATI Technologies Inc. All Rights Reserved. <br> * <br> *  File:gameproc.c <br> *  Content:Game processing routines <br> * <br> ***************************************************************************/ <br>#include "foxbear.h" <br>     <br>GFX_HBMhBuffer; <br>HBITMAPLIST*hBitmapList; <br>HBITMAPLIST*hTileList; <br>HPOSLIST*hForePosList; <br>HPOSLIST*hMidPosList; <br>HPOSLIST*hBackPosList; <br>HSURFACELIST*hSurfaceList; <br>HPLANE*hForeground; <br>HPLANE*hMidground; <br>HPLANE*hBackground; <br>HSPRITE*hFox; <br>HSPRITE*hBear; <br>HSPRITE*hApple; <br>USHORTchewCount; <br>LONGchewDif; <br> <br>/* <br> * ErrorMessage <br> */ <br>void ErrorMessage( CHAR *pText ) <br>{ <br>    char ach[128]; <br> <br>    wsprintf( ach, "FOXBEAR FATAL ERROR: %s\r\n", pText ); <br>    OutputDebugString(ach); <br>    gfxEnd( hBuffer ); <br>    exit( 0 ); <br> <br>} /* ErrorMessage */ <br> <br>/* <br> * InitBuffer <br> */ <br>BOOL InitBuffer( GFX_HBM *hBuffer ) <br>{ <br>    *hBuffer = gfxBegin(); <br> <br>    if( *hBuffer == NULL ) <br>    { <br>        ErrorMessage( "gfxBegin failed" ); <br>        return FALSE; <br>    } <br>    return TRUE; <br> <br>} /* InitBuffer */ <br> <br>/* <br> * DestroyBuffer  <br> */ <br>void DestroyBuffer ( GFX_HBM hBuffer ) <br>{ <br>    if( gfxEnd( hBuffer ) == FALSE ) <br>    { <br>        ErrorMessage( "gfxEnd in DestroyBuffer" ); <br>    } <br> <br>} /* DestroyBuffer */ <br> <br>/* <br> * LoadBitmaps <br> */ <br>HBITMAPLIST *LoadBitmaps( void ) <br>{ <br>    HBITMAPLIST *hBitmapList; <br>    CHAR fileName[32]; <br>    USHORT i; <br>    USHORT n; <br>    BOOL     bInitDone = TRUE; <br> <br>    if( !FastFileInit( "foxbear.art", 5 ) ) <br>    { <br>        Msg( "Could not load art file err=%08lX" , GetLastError()); <br>        IDirectDraw_FlipToGDISurface(lpDD); <br>        MessageBox(hWndMain,"Could not load art file","Error",MB_OK); <br>        return NULL; <br>    } <br>    hBitmapList = CMemAlloc( C_TILETOTAL + C_FBT + C_BBT, sizeof (HBITMAPLIST) ); <br>     <br>    Msg( "Loading tiles" ); <br>    for( i = 0; i &lt; C_TILETOTAL; ++i ) <br>    { <br>        wsprintf( fileName, "%03u.BMP", i + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n = C_TILETOTAL; <br> <br>    Msg( "Loading FoxWalk" ); <br>    for( i = n; i &lt; n + C_FOXWALK; ++i ) <br>    { <br>        wsprintf( fileName, "FW%02uR.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXWALK; <br> <br>    Msg( "Loading FoxWalk2" ); <br>    for( i = n; i &lt; n + C_FOXWALK; ++i ) <br>    { <br>        wsprintf( fileName, "FW%02uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXWALK; <br> <br>    Msg( "Loading FoxRun" ); <br>    for( i = n; i &lt; n + C_FOXRUN; ++i ) <br>    { <br>        wsprintf( fileName, "FR%02uR.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXRUN; <br> <br>    Msg( "Loading FoxRun2" ); <br>    for( i = n; i &lt; n + C_FOXRUN; ++i ) <br>    { <br>        wsprintf( fileName, "FR%02uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXRUN; <br> <br>    Msg( "Loading FoxStill" ); <br>    for( i = n; i &lt; n + C_FOXSTILL; ++i ) <br>    { <br>        wsprintf( fileName, "FS%1uR.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXSTILL; <br> <br>    Msg( "Loading FoxStill2" ); <br>    for( i = n; i &lt; n + C_FOXSTILL; ++i ) <br>    { <br>        wsprintf( fileName, "FS%1uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXSTILL; <br> <br>    Msg( "Loading FoxStunned" ); <br>    for( i = n; i &lt; n + C_FOXSTUNNED; ++i ) <br>    { <br>        wsprintf( fileName, "FK%1uR.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXSTUNNED; <br> <br>    Msg( "Loading FoxStunned2" ); <br>    for( i = n; i &lt; n + C_FOXSTUNNED; ++i ) <br>    { <br>        wsprintf( fileName, "FK%1uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXSTUNNED; <br> <br>    Msg( "Loading FoxCrouch" ); <br>    for( i = n; i &lt; n + C_FOXCROUCH; ++i ) <br>    { <br>        wsprintf( fileName, "FC%1uR.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXCROUCH; <br> <br>    Msg( "Loading FoxCrouch2" ); <br>    for( i = n; i &lt; n + C_FOXCROUCH; ++i ) <br>    { <br>        wsprintf( fileName, "FC%1uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXCROUCH; <br> <br>    Msg( "Loading FoxStop" ); <br>    for( i = n; i &lt; n + C_FOXSTOP; ++i ) <br>    { <br>        wsprintf( fileName, "FCD%1uR.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXSTOP; <br> <br>    Msg( "Loading FoxStop2" ); <br>    for( i = n; i &lt; n + C_FOXSTOP; ++i ) <br>    { <br>        wsprintf( fileName, "FCD%1uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXSTOP; <br> <br>    Msg( "Loading FoxThrow" ); <br>    for( i = n; i &lt; n + C_FOXTHROW; ++i ) <br>    { <br>        wsprintf( fileName, "FT%1uR.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXTHROW; <br> <br>    Msg( "Loading FoxThrow2" ); <br>    for( i = n; i &lt; n + C_FOXTHROW; ++i ) <br>    { <br>        wsprintf( fileName, "FT%1uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXTHROW; <br> <br>    Msg( "Loading FoxJumpThrow" ); <br>    for( i = n; i &lt; n + C_FOXJUMPTHROW; ++i ) <br>    { <br>        wsprintf( fileName, "FJT%1uR.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXJUMPTHROW; <br> <br>    Msg( "Loading FoxJumpThrow2" ); <br>    for( i = n; i &lt; n + C_FOXJUMPTHROW; ++i ) <br>    { <br>        wsprintf( fileName, "FJT%1uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXJUMPTHROW; <br> <br>    Msg( "Loading FoxJump" ); <br>    for( i = n; i &lt; n + C_FOXJUMP; ++i ) <br>    { <br>        wsprintf( fileName, "FJ%1uR.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXJUMP; <br> <br>    Msg( "Loading FoxJump2" ); <br>    for( i = n; i &lt; n + C_FOXJUMP; ++i ) <br>    { <br>        wsprintf( fileName, "FJ%1uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXJUMP; <br> <br>    Msg( "Loading FoxCrouchWalk" ); <br>    for( i = n; i &lt; n + C_FOXCROUCHWALK; ++i ) <br>    { <br>        wsprintf( fileName, "FCW%02uR.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXCROUCHWALK; <br> <br>    Msg( "Loading FoxCrouchWalk2" ); <br>    for( i = n; i &lt; n + C_FOXCROUCHWALK; ++i ) <br>    { <br>        wsprintf( fileName, "FCW%02uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXCROUCHWALK; <br> <br>    Msg( "Loading FoxBlurr" ); <br>    for( i = n; i &lt; n + C_FOXBLURR; ++i ) <br>    { <br>        wsprintf( fileName, "FB%02uR.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXBLURR; <br> <br>    Msg( "Loading FoxBlurr2" ); <br>    for( i = n; i &lt; n + C_FOXBLURR; ++i ) <br>    { <br>        wsprintf( fileName, "FB%02uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_FOXBLURR; <br> <br>    Msg( "Loading BearMiss" ); <br>    for( i = n; i &lt; n + C_BEARMISS; ++i ) <br>    { <br>        wsprintf( fileName, "BM%1uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_BEARMISS; <br> <br>    Msg( "Loading BearStrike" ); <br>    for( i = n; i &lt; n + C_BEARSTRIKE; ++i ) <br>    { <br>        wsprintf( fileName, "BS%02uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_BEARSTRIKE; <br> <br>    Msg( "Loading BearWalk" ); <br>    for( i = n; i &lt; n + C_BEARWALK; ++i ) <br>    { <br>        wsprintf( fileName, "BW%02uL.BMP", i - n + 1 ); <br>        hBitmapList[i].hBM = gfxLoadBitmap( fileName ); <br>        if(hBitmapList[i].hBM == NULL) <br>            bInitDone = FALSE; <br>    } <br>    n += C_BEARWALK; <br> <br>    FastFileFini(); <br> <br>    if(bInitDone == FALSE) <br>    { <br>        Msg("Error while loading Bitmaps"); <br>        return NULL; <br>    } <br> <br>    return hBitmapList; <br> <br>} /* LoadBitmaps */ <br> <br>/* <br> * InitTiles <br> */ <br>void InitTiles( <br>              HBITMAPLIST **hTileList, <br>              HBITMAPLIST *hBitmapList, <br>              USHORT tileCount ) <br>{ <br>    *hTileList = CreateTiles( hBitmapList, tileCount ); <br> <br>} /* InitTiles */ <br> <br>/* <br> * InitPlane <br> */ <br>void InitPlane( <br>  HPLANE **hPlane, <br>              HPOSLIST **hPosList, <br> LPSTR szFileName, <br>              USHORT width, <br>              USHORT height, <br>              USHORT denom ) <br>{ <br>    *hPlane   = CreatePlane( width, height, denom ); <br>    *hPosList = CreatePosList( szFileName, width, height ); <br> <br>} /* InitPlane */ <br> <br>/* <br> * InitSurface <br> */ <br>void InitSurface( <br>        HSURFACELIST **pphSurfaceList, <br>        CHAR *szFileName, <br>        USHORT width, <br>        USHORT height ) <br>{ <br>    *pphSurfaceList = CreateSurfaceList( szFileName, width, height ); <br> <br>} /* InitSurface */ <br> <br>/* <br> * InitFox <br> */ <br>void InitFox ( HSPRITE **pphFox, HBITMAPLIST *phBitmapList ) <br>{ <br>    GFX_HBM   hBM; <br>    GFX_HBM   hBM_src; <br>    ACTION    action; <br>    DIRECTION direction; <br>    USHORT    i; <br> <br>    LONG      startX= C_FOX_STARTX; <br>    LONG      startY= C_FOX_STARTY; <br>    USHORT    boundW= 108; <br>    USHORT    boundH= 105; <br>    LONG      as=   6; <br>    SHORT     x[C_FBT]= {  7, 15, 18, 11,  6, 3,  7, 15, 17, 11,  6, 3, <br>                         7, 15, 18, 11,  6, 3,  7, 15, 17, 11,  6, 3, <br>                        10, 3,  5, 16,  9, 13, 31, 24,  9, 3,  5, 16, 10, 13, 33, 23, <br>                        10, 3,  5, 16,  9, 13, 31, 24,  9, 3,  5, 16, 10, 13, 33, 23, <br>                        11, 11, 31, 31,  7, 7, 27, 27,  8, 10,  8, 10, <br>                        26, 6, 26, 6, 17, 21, 21, 24, 17, 21, 21, 24, <br>                         1, 0,  0, 1,  0, 0,  1, 0,  0, 1,  1, 1, <br>                         1, 0,  0, 1,  0, 0,  1, 0,  0, 1,  1, 1, <br>                         2, 2, -1, 0,  2, 2, -1, 0 }; <br>    SHORT     y[C_FBT]= { 20, 24, 26, 25, 27, 19, 20, 25, 26, 25, 29, 21, <br>                        20, 24, 26, 25, 27, 19, 20, 25, 26, 25, 29, 21, <br>                        42, 42, 31, 19, 13, 11, 20, 33, 40, 43, 31, 19, 14, 12, 20, 33, <br>                        42, 42, 31, 19, 13, 11, 20, 33, 40, 43, 31, 19, 14, 12, 20, 33, <br>                        14, 14, 20, 20, 58, 58, 26, 26, 20, 24, 20, 24, <br>                         0, 9,  0, 9, 20, 11, 10, 9, 20, 11, 10, 9, <br>                        61, 61, 61, 61, 60, 60, 61, 61, 61, 61, 60, 60, <br>                        61, 61, 61, 61, 60, 60, 61, 61, 61, 61, 60, 60, <br>                        45, 45, 45, 45, 45, 45, 45, 45 }; <br>    USHORT    w[C_FBT]= { 75, 73, 73, 82, 92, 84, 74, 74, 73, 81, 91, 84,  <br>                        75, 73, 73, 82, 92, 84, 74, 74, 73, 81, 91, 84, <br>                        88, 92, 88, 78, 80, 78, 70, 84, 88, 92, 88, 78, 79, 79, 68, 85, <br>                        88, 92, 88, 78, 80, 78, 70, 84, 88, 92, 88, 78, 79, 79, 68, 85, <br>                        65, 65, 61, 61, 88, 88, 72, 72, 57, 86, 57, 86,  <br>                        54, 92, 54, 92, 59, 57, 57, 52, 59, 57, 57, 52, <br>                        98, 99, 99, 99,100,100, 98,101,100, 99,100, 98, <br>                        98, 99, 99, 99,100,100, 98,101,100, 99,100, 98, <br>                        94, 94, 97, 96, 94, 94, 97, 96 }; <br>    USHORT    h[C_FBT]= { 78, 74, 72, 73, 71, 79, 78, 73, 72, 73, 69, 77,  <br>                        78, 74, 72, 73, 71, 79, 78, 73, 72, 73, 69, 77, <br>                        56, 56, 67, 79, 85, 87, 78, 65, 58, 55, 67, 79, 84, 86, 78, 65, <br>                        56, 56, 67, 79, 85, 87, 78, 65, 58, 55, 67, 79, 84, 86, 78, 65, <br>                        84, 84, 85, 85, 40, 40, 72, 72, 78, 74, 78, 74, <br>                        88, 82, 88, 82, 84, 87, 86, 85, 84, 87, 86, 85, <br>                        37, 37, 37, 37, 38, 38, 37, 37, 37, 37, 38, 38, <br>                        37, 37, 37, 37, 38, 38, 37, 37, 37, 37, 38, 38, <br>                        54, 53, 51, 54, 54, 53, 51, 54 }; <br> <br>    *pphFox = CreateSprite( C_FBT, startX, startY, boundW, boundH, C_FORE_W * C_TILE_W, C_FORE_H * C_TILE_H, (SHORT) as, TRUE ); <br> <br>    for( i = 0; i &lt; C_FBT; ++i ) <br>    { <br>        hBM_src = phBitmapList[i + C_TILETOTAL].hBM; <br> <br>        if( i &lt; 12 ) <br>        { <br>            action = WALK; <br>            direction = RIGHT; <br>        } <br>        else if( (i &gt;= 12) &amp;&amp; (i &lt; 24) ) <br>        { <br>            action = WALK; <br>            direction = LEFT; <br>        } <br>        else if( (i &gt;= 24) &amp;&amp; (i &lt; 40) ) <br>        { <br>            action = RUN; <br>            direction = RIGHT; <br>        } <br>        else if( (i &gt;= 40) &amp;&amp; (i &lt; 56) ) <br>        { <br>            action = RUN; <br>            direction = LEFT; <br>        } <br>        else if( i == 56 ) <br>        { <br>            action = STILL; <br>            direction = RIGHT; <br>        } <br>        else if( i == 57 ) <br>        { <br>            action = STILL; <br>            direction = LEFT; <br>        } <br>        else if( i == 58 ) <br>        { <br>            action = STUNNED; <br>            direction = RIGHT; <br>        } <br>        else if( i == 59 ) <br>        { <br>            action = STUNNED; <br>            direction = LEFT; <br>        } <br>        else if( i == 60 ) <br>        { <br>            action = CROUCH; <br>            direction = RIGHT; <br>        } <br>        else if( i == 61 ) <br>        { <br>            action = CROUCH; <br>            direction = LEFT; <br>        } <br>        else if( i == 62 ) <br>        { <br>            action = STOP; <br>            direction = RIGHT; <br>        } <br>        else if( i == 63 ) <br>        { <br>            action = STOP; <br>            direction = LEFT; <br>        } <br>        else if( (i &gt;= 64) &amp;&amp; (i &lt; 66) ) <br>        { <br>            action = THROW; <br>            direction = RIGHT; <br>        } <br>        else if( (i &gt;= 66) &amp;&amp; (i &lt; 68) ) <br>        { <br>            action = THROW; <br>            direction = LEFT; <br>        } <br>        else if( (i &gt;= 68) &amp;&amp; (i &lt; 70) ) <br>        { <br>            action = JUMPTHROW; <br>            direction = RIGHT; <br>        } <br>        else if( (i &gt;= 70) &amp;&amp; (i &lt; 72) ) <br>        { <br>            action = JUMPTHROW; <br>            direction = LEFT; <br>        } <br>        else if( (i &gt;= 72) &amp;&amp; (i &lt; 76) ) <br>        { <br>            action = JUMP; <br>            direction = RIGHT; <br>        } <br>        else if( (i &gt;= 76) &amp;&amp; (i &lt; 80) ) <br>        { <br>            action = JUMP; <br>            direction = LEFT; <br>        } <br>        else if( (i &gt;= 80) &amp;&amp; (i &lt; 92) ) <br>        { <br>            action = CROUCHWALK; <br>            direction = RIGHT; <br>        } <br>        else if( (i &gt;= 92) &amp;&amp; (i &lt; 104) ) <br>        { <br>            action = CROUCHWALK; <br>            direction = LEFT; <br>        } <br>        else if( (i &gt;= 104) &amp;&amp; (i &lt; 108) ) <br>        { <br>            action = BLURR; <br>            direction = RIGHT; <br>        } <br>        else if( (i &gt;= 108) &amp;&amp; (i &lt; 112) ) <br>        { <br>            action = BLURR; <br>            direction = LEFT; <br>        } <br> <br>        hBM = hBM_src; <br> <br>        BitBltSprite(  <br>            *pphFox, <br>            hBM,  <br>            action, <br>            direction, <br>            x[i],  <br>            y[i],  <br>            w[i],  <br>            h[i] ); <br>    } <br>    SetSpriteAction( *pphFox, STILL, RIGHT ); <br> <br>} /* InitFox */ <br> <br>/* <br> * InitBear <br> */ <br>void InitBear( HSPRITE **pphBear, HBITMAPLIST *phBitmapList ) <br>{ <br>    GFX_HBM   hBM_src; <br>    ACTION    action; <br>    DIRECTION direction; <br>    USHORT    i; <br> <br>    LONG      startX= C_BEAR_STARTX; <br>    LONG      startY= C_BEAR_STARTY; <br>    USHORT    boundW= 196; <br>    USHORT    boundH=  88; <br>    LONG      as=   6; <br>    USHORT    x[C_BBT]= { 14, 10, <br>                         8, 12, 13, 14, 10, 10,  9, 9,  9, 9,  8, 9, <br>                        11, 6,  1, 0,  3, 13, 11, 7,  1, 1,  3, 14 }; <br>    USHORT    y[C_BBT]= {  7, 7, <br>                         3, 8,  9, 7,  7, 3,  3, 3,  3, 3,  3, 3,        <br>                         1, 1,  2, 2,  3, 1,  0, 1,  1, 2,  3, 2 }; <br>    USHORT    w[C_BBT]= {127,129, <br>                       127,153,183,153,129,138,146,150,152,151,143,139, <br>                       131,136,140,141,136,125,131,135,140,140,136,126 }; <br>    USHORT    h[C_BBT]= { 80, 80, <br>                        84, 79, 78, 80, 80, 84, 84, 84, 84, 84, 84, 84, <br>                        86, 86, 86, 85, 84, 86, 87, 86, 87, 85, 84, 86 }; <br> <br>    *pphBear = CreateSprite( C_BBT, startX, startY, boundW, boundH, C_FORE_W * C_TILE_W, C_FORE_H * C_TILE_H, (SHORT) as, TRUE ); <br> <br>    for( i = 0; i &lt; C_BBT; ++i ) <br>    { <br>        hBM_src = phBitmapList[i + C_TILETOTAL + C_FBT].hBM; <br> <br>        if( i &lt; 2 ) <br>        { <br>            action = MISS; <br>            direction = LEFT; <br>        } <br>        else if( (i &gt;= 2) &amp;&amp; (i &lt; 8) ) <br>        { <br>            action = STRIKE; <br>            direction = LEFT; <br>        } <br>        else if( (i &gt;= 8) &amp;&amp; (i &lt; 14) ) <br>        { <br>            action = CHEW; <br>            direction = LEFT; <br>        } <br>        else if( (i &gt;= 14) &amp;&amp; (i &lt; 26) ) <br>        { <br>            action = WALK; <br>            direction = LEFT; <br>        }        <br> <br>        BitBltSprite (  <br>            *pphBear, <br>            hBM_src, <br>            action,  <br>            direction, <br>            x[i],  <br>            y[i],  <br>            w[i],  <br>            h[i] ); <br>    } <br> <br>    SetSpriteAction( *pphBear, WALK, LEFT ); <br>    SetSpriteVelX( *pphBear, -C_BEAR_WALKMOVE, P_ABSOLUTE ); <br>    SetSpriteSwitch( *pphBear, C_BEAR_WALKSWITCH, P_ABSOLUTE ); <br> <br>} /* InitBear */ <br> <br>/* <br> * InitApple <br> */ <br>VOID InitApple ( HSPRITE **pphApple, HBITMAPLIST *phBitmapList ) <br>{ <br>    *pphApple = CreateSprite( 1, 50 * C_UNIT, 390 * C_UNIT, 32, 32, C_FORE_W * C_TILE_W, C_FORE_H * C_TILE_H, 0, FALSE ); <br> <br>    BitBltSprite( *pphApple, phBitmapList[61].hBM, NONE, RIGHT, 0, 0, 32, 32 ); <br> <br>    SetSpriteAction( *pphApple, NONE, RIGHT ); <br> <br>} /* InitApple */ <br> <br> <br>/* <br> * PreInitializeGame <br> */ <br>BOOL PreInitializeGame( void ) <br>{ <br>    return InitBuffer( &amp;hBuffer); <br> <br>} /* PreInitializeGame */ <br> <br> <br>/* <br> * InitializeGame <br> */ <br>BOOL InitializeGame ( void ) <br>{ <br>    Splash(); <br> <br>    hBitmapList = LoadBitmaps(); <br>    if( hBitmapList == NULL ) <br>    { <br>        return FALSE; <br>    } <br> <br>    InitTiles( &amp;hTileList, hBitmapList, C_TILETOTAL ); <br>         <br>    InitPlane( &amp;hForeground, &amp;hForePosList, "FORELIST", C_FORE_W, C_FORE_H, C_FORE_DENOM ); <br>    TilePlane( hForeground, hTileList, hForePosList ); <br> <br>    InitPlane( &amp;hMidground, &amp;hMidPosList, "MIDLIST", C_MID_W, C_MID_H, C_MID_DENOM ); <br>    TilePlane( hMidground, hTileList, hMidPosList ); <br> <br>    InitPlane( &amp;hBackground, &amp;hBackPosList, "BACKLIST", C_BACK_W, C_BACK_H, C_BACK_DENOM ); <br>    TilePlane( hBackground, hTileList, hBackPosList ); <br> <br>    InitSurface( &amp;hSurfaceList, "SURFLIST", C_FORE_W, C_FORE_H ); <br>    SurfacePlane( hForeground, hSurfaceList ); <br> <br>    InitFox( &amp;hFox, hBitmapList ); <br>    InitBear( &amp;hBear, hBitmapList ); <br>    InitApple( &amp;hApple, hBitmapList ); <br> <br>    DDClear();      // clear all the backbuffers. <br> <br>    return TRUE; <br> <br>} /* InitializeGame */ <br> <br>extern void DisplayFrameRate( void ); <br> <br>/* <br> * NewGameFrame <br> */ <br>int NewGameFrame( void ) <br>{ <br> <br>    SetSpriteX( hFox, 0, P_AUTOMATIC ); <br>    SetSpriteY( hFox, 0, P_AUTOMATIC ); <br>                                     <br>    SetPlaneVelX( hBackground, GetSpriteVelX(hFox), P_ABSOLUTE ); <br>    SetPlaneVelX( hMidground,  GetSpriteVelX(hFox), P_ABSOLUTE ); <br>    SetPlaneVelX( hForeground, GetSpriteVelX(hFox), P_ABSOLUTE ); <br> <br>    SetPlaneX( hBackground, 0, P_AUTOMATIC ); <br>    SetPlaneX( hMidground,  0, P_AUTOMATIC ); <br>    SetPlaneX( hForeground, 0, P_AUTOMATIC ); <br> <br>    SetSpriteX( hBear,0, P_AUTOMATIC ); <br>    SetSpriteX( hApple, 0, P_AUTOMATIC ); <br>    SetSpriteY( hApple, 0, P_AUTOMATIC ); <br> <br>    /* <br>     * once all sprites are processed, display them <br>     * <br>     * If we are using destination transparency instead of source <br>     * transparency, we need to paint the background with the color key <br>     * and then paint our sprites and planes in reverse order. <br>     * <br>     * Since destination transparency will allow you to only write pixels <br>     * on the destination if the transparent color is present, reversing <br>     * the order (so that the topmost bitmaps are drawn first instead of <br>     * list) causes everything to come out ok. <br>     */ <br>    if( bTransDest ) <br>    { <br>        gfxFillBack( dwColorKey ); <br> <br>        DisplayFrameRate(); <br> <br>        DisplaySprite( hBuffer, hApple, GetPlaneX(hForeground) ); <br>        DisplaySprite( hBuffer, hBear,  GetPlaneX(hForeground) ); <br>        DisplaySprite( hBuffer, hFox,   GetPlaneX(hForeground) ); <br> <br>        DisplayPlane( hBuffer, hForeground ); <br>        DisplayPlane( hBuffer, hMidground ); <br>        DisplayPlane( hBuffer, hBackground ); <br>    } <br>    else <br>    { <br>        DisplayPlane( hBuffer, hBackground ); <br>        DisplayPlane( hBuffer, hMidground ); <br>        DisplayPlane( hBuffer, hForeground ); <br>     <br>        DisplaySprite( hBuffer, hFox,   GetPlaneX(hForeground) ); <br>        DisplaySprite( hBuffer, hBear,  GetPlaneX(hForeground) ); <br>        DisplaySprite( hBuffer, hApple, GetPlaneX(hForeground) ); <br> <br>        DisplayFrameRate(); <br>    } <br>                                                       <br>    gfxSwapBuffers(); <br> <br>    return 0; <br> <br>} /* NewGameFrame */ <br> <br>/* <br> * DestroyGame <br> */ <br>void DestroyGame() <br>{ <br>    if (hBuffer) <br>    { <br>        DestroyTiles( hTileList ); <br>        DestroyPlane( hForeground ); <br>        DestroyPlane( hMidground ); <br>        DestroyPlane( hBackground ); <br>        DestroyBuffer( hBuffer ); <br>        DestroySound(); <br> <br>        hTileList   = NULL; <br>        hForeground = NULL; <br>        hMidground  = NULL; <br>        hBackground = NULL; <br>        hBuffer     = NULL; <br>    } <br> <br>} /* DestroyGame */ <br> <br>/* <br> * ProcessInput <br> */ <br>BOOL ProcessInput( SHORT input ) <br>{ <br>    static BOOL fBearPlaying = FALSE; <br>    LONG      foxSpeedX; <br>    LONG      foxSpeedY; <br>    LONG      foxX; <br>    LONG      foxY; <br>    LONG      bearX; <br>    LONG      bearY; <br>    LONG      appleX; <br>    LONG      appleY; <br>    ACTION    foxAction; <br>    DIRECTION foxDir; <br>    BOOL      cont = TRUE; <br> <br>    foxSpeedX = GetSpriteVelX( hFox ); <br>    foxAction = GetSpriteAction( hFox ); <br>    foxDir    = GetSpriteDirection( hFox ); <br> <br>    if( (GetSpriteActive(hFox) == FALSE) &amp;&amp; (input != 4209) ) <br>    { <br>        input = 0; <br>    } <br>    switch( input ) <br>    { <br>    case KEY_DOWN: <br>        if( foxAction == STOP ) <br>        { <br>            break; <br>        } <br>        else if( foxAction == STILL ) <br>        { <br>            SetSpriteAction( hFox, CROUCH, SAME ); <br>        } <br>        else if( foxAction == WALK ) <br>        { <br>            SetSpriteAction( hFox, CROUCHWALK, SAME ); <br>        } <br>        break; <br> <br>    case KEY_LEFT: <br>        if( foxAction == STOP ) <br>        { <br>            break; <br>        } <br>        else if( foxSpeedX == 0 ) <br>        { <br>            if( foxAction == STILL ) <br>            { <br>              if( foxDir == RIGHT ) <br>              { <br>                  ChangeSpriteDirection( hFox ); <br>                  SetPlaneSlideX( hForeground, -C_BOUNDDIF, P_RELATIVE ); <br>                  SetPlaneSlideX( hMidground, -C_BOUNDDIF, P_RELATIVE ); <br>                  SetPlaneSlideX( hBackground, -C_BOUNDDIF, P_RELATIVE ); <br>                  SetPlaneIncremX( hForeground, C_BOUNDINCREM, P_ABSOLUTE ); <br>                  SetPlaneIncremX( hBackground, C_BOUNDINCREM, P_ABSOLUTE ); <br>                  SetPlaneIncremX( hMidground, C_BOUNDINCREM, P_ABSOLUTE ); <br>              } <br>              else <br>              { <br>                  SetSpriteAction( hFox, WALK, LEFT ); <br>                  SetSpriteSwitch( hFox, C_FOX_WALKSWITCH, P_ABSOLUTE ); <br>                  SetSpriteVelX( hFox, -C_FOX_XMOVE, P_RELATIVE ); <br>              } <br>            } <br>            else if( foxAction == CROUCH ) <br>            { <br>              if( foxDir == RIGHT ) <br>              { <br>                  ChangeSpriteDirection( hFox ); <br>                  SetPlaneSlideX( hForeground, -C_BOUNDDIF, P_RELATIVE ); <br>                  SetPlaneSlideX( hMidground, -C_BOUNDDIF, P_RELATIVE ); <br>                  SetPlaneSlideX( hBackground, -C_BOUNDDIF, P_RELATIVE ); <br>                  SetPlaneIncremX( hForeground, C_BOUNDINCREM, P_ABSOLUTE ); <br>                  SetPlaneIncremX( hBackground, C_BOUNDINCREM, P_ABSOLUTE ); <br>                  SetPlaneIncremX( hMidground, C_BOUNDINCREM, P_ABSOLUTE ); <br>              } <br>              else <br>              { <br>                  SetSpriteAction( hFox, CROUCHWALK, LEFT ); <br>                  SetSpriteSwitch( hFox, C_FOX_WALKSWITCH, P_ABSOLUTE ); <br>                  SetSpriteVelX( hFox, -C_FOX_XMOVE, P_RELATIVE ); <br>              } <br>            } <br>            else <br>            { <br>              SetSpriteVelX( hFox, -C_FOX_XMOVE, P_RELATIVE ); <br>            } <br>        } else { <br>            SetSpriteVelX( hFox, -C_FOX_XMOVE, P_RELATIVE ); <br>        } <br>        break; <br> <br>    case KEY_RIGHT: <br>        if( foxAction == STOP ) <br>        { <br>            break; <br>        } <br>        else if( foxSpeedX == 0 ) <br>        { <br>            if( foxAction == STILL ) <br>            { <br>              if( foxDir == LEFT ) <br>              { <br>                  ChangeSpriteDirection( hFox ); <br>                  SetPlaneSlideX( hForeground, C_BOUNDDIF, P_RELATIVE ); <br>                  SetPlaneSlideX( hMidground, C_BOUNDDIF, P_RELATIVE ); <br>                  SetPlaneSlideX( hBackground, C_BOUNDDIF, P_RELATIVE ); <br>                  SetPlaneIncremX( hForeground, C_BOUNDINCREM, P_ABSOLUTE ); <br>                  SetPlaneIncremX( hBackground, C_BOUNDINCREM, P_ABSOLUTE ); <br>                  SetPlaneIncremX( hMidground, C_BOUNDINCREM, P_ABSOLUTE ); <br>              } <br>              else <br>              { <br>                  SetSpriteAction( hFox, WALK, RIGHT ); <br>                  SetSpriteSwitch( hFox, C_FOX_WALKSWITCH, P_ABSOLUTE ); <br>                  SetSpriteVelX( hFox, C_FOX_XMOVE, P_RELATIVE ); <br>              } <br>            } <br>            else if( foxAction == CROUCH ) <br>            { <br>              if( foxDir == LEFT ) <br>              { <br>                  ChangeSpriteDirection( hFox ); <br>                  SetPlaneSlideX( hForeground, C_BOUNDDIF, P_RELATIVE ); <br>                  SetPlaneSlideX( hMidground, C_BOUNDDIF, P_RELATIVE ); <br>                  SetPlaneSlideX( hBackground, C_BOUNDDIF, P_RELATIVE ); <br>                  SetPlaneIncremX( hForeground, C_BOUNDINCREM, P_ABSOLUTE ); <br>                  SetPlaneIncremX( hBackground, C_BOUNDINCREM, P_ABSOLUTE ); <br>                  SetPlaneIncremX( hMidground, C_BOUNDINCREM, P_ABSOLUTE ); <br>              } <br>              else <br>              { <br>                  SetSpriteAction( hFox, CROUCHWALK, RIGHT ); <br>                  SetSpriteSwitch( hFox, C_FOX_WALKSWITCH, P_ABSOLUTE ); <br>                  SetSpriteVelX( hFox, C_FOX_XMOVE, P_RELATIVE ); <br>              } <br>            } <br>            else <br>            { <br>              SetSpriteVelX( hFox, C_FOX_XMOVE, P_RELATIVE ); <br>            } <br>        } <br>        else <br>        { <br>            SetSpriteVelX( hFox, C_FOX_XMOVE, P_RELATIVE ); <br>        } <br>        break; <br> <br>    case KEY_STOP: <br>        if( foxAction == STOP ) <br>        { <br>            break; <br>        } <br>        else if( (foxAction == RUN) || (foxAction == BLURR) ) </code></pre>
<p>
</p>
<pre><code>{ <br>            SetSpriteAction( hFox, STOP, SAME ); <br>            SetSpriteAccX( hFox, -foxSpeedX / 25, P_ABSOLUTE ); <br>            SoundPlayEffect( SOUND_STOP ); <br>        } else { <br>            SetSpriteVelX( hFox, 0, P_ABSOLUTE ); <br>        } <br>        break; <br> <br>    case KEY_UP:  <br>        if( foxAction == STOP ) <br>        { <br>            break; <br>        } <br>        else if( foxAction == CROUCH ) <br>        { <br>            SetSpriteAction( hFox, STILL, SAME ); <br>        } <br>        else if( foxAction == CROUCHWALK ) <br>        { <br>            SetSpriteAction( hFox, WALK, SAME ); <br>        } <br>        break; <br> <br>    case KEY_JUMP: <br>        if( foxAction == STOP ) <br>        { <br>            break; <br>        } <br>        else <br>        if( (foxAction == STILL) || (foxAction == WALK) || <br>            (foxAction == RUN) || (foxAction == CROUCH) || <br>            (foxAction == CROUCHWALK) ) <br>        { <br>            SetSpriteAction( hFox, JUMP, SAME ); <br>            SetSpriteSwitchType( hFox, TIME ); <br>            SetSpriteSwitch( hFox, C_FOX_JUMPSWITCH, P_ABSOLUTE ); <br>            SetSpriteVelY( hFox, -C_FOX_JUMPMOVE, P_ABSOLUTE ); <br>            SetSpriteAccY( hFox, C_UNIT / 2, P_ABSOLUTE ); <br>            SoundPlayEffect( SOUND_JUMP ); <br>        } <br>        break; <br> <br>    case KEY_THROW: <br>        if( foxAction == STOP ) <br>        { <br>            break; <br>        } <br>        else if( (foxAction == STILL) || (foxAction == WALK) || <br>               (foxAction == RUN) || (foxAction == CROUCH) || <br>               (foxAction == CROUCHWALK) ) <br>        { <br>            SetSpriteAction( hFox, THROW, SAME ); <br>            SetSpriteSwitch( hFox, C_FOX_THROWSWITCH, P_ABSOLUTE ); <br>            SetSpriteVelX( hFox, 0, P_ABSOLUTE ); <br>            SetSpriteSwitchType( hFox, TIME ); <br>        } <br>        else if( foxAction == JUMP ) <br>        { <br>            SetSpriteAccY( hFox, 0, P_ABSOLUTE ); <br>            SetSpriteSwitch( hFox, C_FOX_THROWSWITCH, P_ABSOLUTE ); <br>            SetSpriteAction( hFox, JUMPTHROW, SAME ); <br>            SetSpriteVelY( hFox, 0, P_ABSOLUTE ); <br>            SetSpriteSwitchDone( hFox, FALSE ); <br>            SetSpriteSwitchForward( hFox, TRUE ); <br>        } <br>        break; <br> <br>    default:  <br>        break; <br>    } <br> <br>    /* <br>     * Fox actions follow... <br>     */ <br>    if( GetSpriteActive(hFox) == FALSE ) <br>    { <br>        goto bearActions; <br>    } <br> <br>    if( abs(GetSpriteVelX( hFox )) &lt; C_FOX_XMOVE ) <br>    { <br>        SetSpriteVelX( hFox, 0, P_ABSOLUTE ); <br>    } <br> <br>    foxAction = GetSpriteAction( hFox ); <br> <br>    if( GetSpriteVelY(hFox) == 0 ) <br>    { <br>        if( GetSurface( hForeground, hFox ) == FALSE ) <br>        { <br>            if( (foxAction == WALK) || (foxAction == RUN) || <br>            (foxAction == CROUCHWALK) ) <br>            { <br>              SetSpriteAccY( hFox, C_UNIT / 2, P_ABSOLUTE ); <br>            } <br>            else if( foxAction == STOP ) <br>            { <br>              SetSpriteAccY( hFox, C_UNIT / 2, P_ABSOLUTE ); <br>              SetSpriteAccX( hFox, 0, P_ABSOLUTE ); <br>            } <br>        } <br>    } <br>    else if( GetSpriteVelY(hFox) &gt; 2 * C_UNIT ) <br>    { <br>        if( (foxAction == WALK) || (foxAction == RUN) || <br>            (foxAction == CROUCHWALK) ) <br>        { <br>            SetSpriteSwitchForward( hFox, FALSE ); <br>            SetSpriteAction( hFox, JUMP, SAME ); <br>            SetSpriteSwitchType( hFox, TIME ); <br>            SetSpriteSwitch( hFox, C_FOX_JUMPSWITCH, P_ABSOLUTE ); <br>        } <br>        if( foxAction == STOP ) <br>        { <br>            SetSpriteAction( hFox, STUNNED, SAME ); <br>            SetSpriteAccX( hFox, -GetSpriteVelX(hFox) / 25, P_ABSOLUTE ); <br>            SoundPlayEffect( SOUND_STUNNED ); <br>        } <br>    } <br>     <br>    foxSpeedX = GetSpriteVelX( hFox ); <br>    foxSpeedY = GetSpriteVelY( hFox ); <br>    foxAction = GetSpriteAction( hFox ); <br>    foxDir    = GetSpriteDirection( hFox ); <br> <br>    switch( foxAction ) { <br>    case STUNNED: <br>        if( (GetSpriteVelY(hFox) &gt;= 0) &amp;&amp; <br>            (!GetSurface( hForeground, hFox ) == FALSE) ) <br>        { <br>            SetSpriteAccY( hFox, 0, P_ABSOLUTE ); <br>            SetSpriteAction( hFox, STOP, SAME ); <br>            SetSpriteVelY( hFox, 0, P_ABSOLUTE ); <br>            SetSpriteAccX( hFox, -foxSpeedX / 25, P_ABSOLUTE ); <br>            // SetSurface( hForeground, hFox ); <br>            SoundPlayEffect( SOUND_STOP ); <br>        } <br>        break; <br> <br>    case CROUCHWALK: <br>        if( foxSpeedX == 0 ) <br>        { <br>            SetSpriteAction( hFox, CROUCH, SAME ); <br>        } <br>        else if( foxSpeedX &gt; C_FOX_WALKMOVE ) <br>        { <br>            SetSpriteVelX( hFox, C_FOX_WALKMOVE, P_ABSOLUTE ); <br>        } <br>        else if( foxSpeedX &lt; -C_FOX_WALKMOVE ) <br>        { <br>            SetSpriteVelX( hFox, -C_FOX_WALKMOVE, P_ABSOLUTE ); <br>        } <br>        break; <br>         <br>    case STOP:   <br>        if( foxSpeedX == 0 ) <br>        { <br>            SetSpriteAction( hFox, STILL, SAME ); <br>            SetSpriteAccX( hFox, 0, P_ABSOLUTE ); <br>        } <br>        break; <br>         <br>    case RUN: <br>        if( (foxSpeedX &lt; C_FOX_WALKTORUN ) &amp;&amp; (foxSpeedX &gt; 0) ) <br>        { <br>            SetSpriteAction( hFox, WALK, RIGHT ); <br>            SetSpriteSwitch( hFox, C_FOX_WALKSWITCH, P_ABSOLUTE ); <br>        } <br>        else if( foxSpeedX &gt; C_FOX_RUNTOBLURR ) <br>        { <br>            SetSpriteAction( hFox, BLURR, RIGHT ); <br>            SetSpriteSwitch( hFox, C_FOX_BLURRSWITCH, P_ABSOLUTE ); <br>        } <br>        else if( (foxSpeedX &gt; -C_FOX_WALKTORUN ) &amp;&amp; (foxSpeedX &lt; 0) ) <br>        { <br>            SetSpriteAction( hFox, WALK, LEFT ); <br>            SetSpriteSwitch( hFox, C_FOX_WALKSWITCH, P_ABSOLUTE ); <br>        } <br>        else if( foxSpeedX &lt; -C_FOX_RUNTOBLURR ) <br>        { <br>            SetSpriteAction( hFox, BLURR, LEFT ); <br>            SetSpriteSwitch( hFox, C_FOX_BLURRSWITCH, P_ABSOLUTE ); <br>        } <br>        break; <br> <br>    case WALK: <br>        if( foxSpeedX == 0 ) <br>        { <br>            SetSpriteAction( hFox, STILL, SAME ); <br>        } <br>        else if( foxSpeedX &gt; C_FOX_WALKTORUN ) <br>        { <br>            SetSpriteAction( hFox, RUN, RIGHT ); <br>            SetSpriteSwitch( hFox, C_FOX_RUNSWITCH, P_ABSOLUTE ); <br>        } <br>        else if( foxSpeedX &lt; -C_FOX_WALKTORUN ) <br>        { <br>            SetSpriteAction( hFox, RUN, LEFT ); <br>            SetSpriteSwitch( hFox, C_FOX_RUNSWITCH, P_ABSOLUTE ); <br>        } <br>        break; <br> <br>    case BLURR: <br>        if( (foxSpeedX &lt; C_FOX_RUNTOBLURR ) &amp;&amp; (foxSpeedX &gt; C_FOX_WALKTORUN) ) <br>        { <br>            SetSpriteAction( hFox, RUN, RIGHT ); <br>            SetSpriteSwitch( hFox, C_FOX_RUNSWITCH, P_ABSOLUTE ); <br>        } <br>        else if( (foxSpeedX &gt; -C_FOX_RUNTOBLURR ) &amp;&amp; (foxSpeedX &lt; -C_FOX_WALKTORUN) ) <br>        { <br>            SetSpriteAction( hFox, RUN, LEFT ); <br>            SetSpriteSwitch( hFox, C_FOX_RUNSWITCH, P_ABSOLUTE ); <br>        } <br>        break; <br> <br>    case JUMPTHROW: <br>        if( !GetSpriteSwitchDone(hFox) == FALSE ) <br>        { <br>            SetSpriteSwitchForward( hFox, FALSE ); <br>            SetSpriteAction( hFox, JUMP, SAME ); <br>            SetSpriteSwitch( hFox, C_FOX_JUMPSWITCH, P_ABSOLUTE ); <br>            SetSpriteSwitchDone( hFox, FALSE ); <br>            SetSpriteAccY( hFox, C_UNIT / 2, P_ABSOLUTE ); <br>            SoundPlayEffect( SOUND_THROW ); <br>        } <br>        else <br>        if( (GetSpriteBitmap(hFox) == 1) &amp;&amp; <br>            (GetSpriteDirection(hFox) == RIGHT) ) <br>        { <br>            SetSpriteActive( hApple, TRUE ); <br>            SetSpriteX( hApple, GetSpriteX(hFox) + 60 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteY( hApple, GetSpriteY(hFox) + 30 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteVelX( hApple, 8 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteVelY( hApple, -4 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteAccX( hApple, 0, P_ABSOLUTE ); <br>            SetSpriteAccY( hApple, C_UNIT / 4, P_ABSOLUTE ); <br>        } <br>        else if( (GetSpriteBitmap(hFox) == 1) &amp;&amp; <br>                 (GetSpriteDirection(hFox) == LEFT) ) <br>        { <br>            SetSpriteActive( hApple, TRUE ); <br>            SetSpriteX( hApple, GetSpriteX(hFox) + 15 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteY( hApple, GetSpriteY(hFox) + 30 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteVelX( hApple, -8 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteVelY( hApple, -4 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteAccX( hApple, 0, P_ABSOLUTE ); <br>            SetSpriteAccY( hApple, C_UNIT / 4, P_ABSOLUTE ); <br>        } <br>        break; <br> <br>    case THROW: <br>        if( !GetSpriteSwitchDone(hFox) == FALSE ) <br>        { <br>            SetSpriteAction( hFox, STILL, SAME ); <br>            SetSpriteSwitchType( hFox, HOR ); <br>            SetSpriteSwitch( hFox, 0, P_ABSOLUTE ); <br>            SetSpriteSwitchDone( hFox, FALSE ); <br>            SoundPlayEffect( SOUND_THROW ); <br>        } <br>        else if( (GetSpriteBitmap(hFox) == 1) &amp;&amp; <br>                 (GetSpriteDirection(hFox) == RIGHT) ) <br>        { <br>            SetSpriteActive( hApple, TRUE ); <br>            SetSpriteX( hApple, GetSpriteX(hFox) + 60 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteY( hApple, GetSpriteY(hFox) + 50 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteVelX( hApple, 8 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteVelY( hApple, -4 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteAccX( hApple, 0, P_ABSOLUTE ); <br>            SetSpriteAccY( hApple, C_UNIT / 4, P_ABSOLUTE ); <br>        } <br>        else if( (GetSpriteBitmap(hFox) == 1) &amp;&amp; <br>                 (GetSpriteDirection(hFox) == LEFT) ) <br>        { <br>            SetSpriteActive( hApple, TRUE ); <br>            SetSpriteX( hApple, GetSpriteX(hFox) + 20 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteY( hApple, GetSpriteY(hFox) + 50 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteVelX( hApple, -8 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteVelY( hApple, -4 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteAccX( hApple, 0, P_ABSOLUTE ); <br>            SetSpriteAccY( hApple, C_UNIT / 4, P_ABSOLUTE ); <br>        } <br>        break; <br> <br>    case JUMP: <br>        if( (foxSpeedY &gt;= 0) &amp;&amp; (!GetSpriteSwitchForward( hFox ) == FALSE) ) <br>        { <br>            SetSpriteSwitchForward( hFox, FALSE ); <br>        } <br>        else if( GetSpriteSwitchForward( hFox ) == FALSE ) <br>        { <br>            if( (!GetSurface( hForeground, hFox ) == FALSE) || <br>            (!GetSurface( hForeground, hFox ) == FALSE) ) <br>            { <br>              if( foxSpeedX &gt;= C_FOX_RUNMOVE ) <br>              { <br>                  SetSpriteAction( hFox, RUN, SAME ); <br>                  SetSpriteSwitch( hFox, C_FOX_RUNSWITCH, P_ABSOLUTE ); <br>              } <br>              else if( foxSpeedX == 0 ) <br>              { <br>                  SetSpriteAction( hFox, STILL, SAME ); <br>                  SetSpriteSwitch( hFox, C_FOX_WALKSWITCH, P_ABSOLUTE ); <br>              } <br>              else <br>              { <br>                  SetSpriteAction( hFox, WALK, SAME ); <br>                  SetSpriteSwitch( hFox, C_FOX_WALKSWITCH, P_ABSOLUTE ); <br>              } <br> <br>              SetSpriteAccY( hFox, 0, P_ABSOLUTE ); <br>              SetSpriteVelY( hFox, 0, P_ABSOLUTE ); <br>              SetSpriteSwitchType( hFox, HOR );      <br>              SetSpriteSwitchForward( hFox, TRUE ); <br>//SetSurface( hForeground, hFox ); <br>              SetSpriteSwitchDone( hFox, FALSE ); <br>            } <br>        } <br>        break; <br> <br>    } <br> <br>    /* <br>     * Bear Actions <br>     */ <br>    bearActions: <br> <br>    foxX   = GetSpriteX( hFox ); <br>    foxY   = GetSpriteY( hFox ); <br>    bearX  = GetSpriteX( hBear ); <br>    bearY  = GetSpriteY( hBear ); <br>    appleX = GetSpriteX( hApple ); <br>    appleY = GetSpriteY( hApple ); <br> <br>    switch( GetSpriteAction( hBear ) ) { <br>    case STRIKE: <br>        if( GetSpriteBitmap( hBear ) == 2 ) <br>        { <br>            if( (bearX &gt; foxX - C_UNIT * 30) &amp;&amp; (bearX &lt; foxX + C_UNIT * 40) &amp;&amp; <br>                (bearY &lt; foxY + C_UNIT * 60) ) <br>            { <br>              SetSpriteActive( hFox, FALSE ); <br>                if( !fBearPlaying ) <br>                { <br>                    SoundPlayEffect( SOUND_BEARSTRIKE ); <br>                    fBearPlaying = TRUE; <br>                } <br>            } <br>            else <br>            { <br>              SetSpriteAction( hBear, MISS, SAME ); <br>              SetSpriteSwitch( hBear, C_BEAR_MISSSWITCH, P_ABSOLUTE ); <br>              SetSpriteSwitchDone( hBear, FALSE ); <br>            } <br>        } <br>        else if( !GetSpriteSwitchDone( hBear ) == FALSE ) <br>        { <br>            SetSpriteAction( hBear, CHEW, SAME ); <br>            SetSpriteSwitchDone( hBear, FALSE ); <br>            chewCount = 0; <br>            fBearPlaying = FALSE; <br>        } <br>        break; <br> <br>    case MISS: <br>        if( !fBearPlaying ) <br>        { <br>            SoundPlayEffect( SOUND_BEARMISS ); <br>            fBearPlaying = TRUE; <br>        } <br>        if( !GetSpriteSwitchDone( hBear ) == FALSE ) <br>        { <br>            SetSpriteAction( hBear, WALK, SAME ); <br>            SetSpriteVelX( hBear, -C_BEAR_WALKMOVE, P_ABSOLUTE ); <br>            SetSpriteSwitch( hBear, C_BEAR_WALKSWITCH, P_ABSOLUTE ); <br>            SetSpriteSwitchType( hBear, HOR ); <br>            fBearPlaying = FALSE; <br>        } <br>        break; <br> <br>    case WALK: <br>        if( (!GetSpriteActive(hApple) == FALSE) &amp;&amp; (appleX &gt; bearX) &amp;&amp; <br>            (appleX &gt; bearX + 80 * C_UNIT) &amp;&amp; (appleY &gt; bearY + 30 * C_UNIT) ) <br>        { <br>            SetSpriteAction( hBear, STRIKE, SAME ); <br>            SetSpriteVelX( hBear, 0, P_ABSOLUTE ); <br>            SetSpriteSwitchType( hBear, TIME ); <br>            SetSpriteSwitch( hBear, C_BEAR_STRIKESWITCH, P_ABSOLUTE ); <br>            SetSpriteSwitchDone( hBear, FALSE ); <br>        } <br>        else if( (bearX &gt; foxX - C_UNIT * 30) &amp;&amp; <br>                 (bearX &lt; foxX + C_UNIT * 30) &amp;&amp; <br>               (bearY &lt; foxY + C_UNIT * 60) ) <br>        { <br>            SetSpriteAction( hBear, STRIKE, SAME ); <br>            SetSpriteVelX( hBear, 0, P_ABSOLUTE ); <br>            SetSpriteSwitchType( hBear, TIME ); <br>            SetSpriteSwitch( hBear, C_BEAR_STRIKESWITCH, P_ABSOLUTE ); <br>            SetSpriteSwitchDone( hBear, FALSE ); <br>        } <br>        break; <br> <br>    case CHEW: <br>        ++chewCount; <br>        if( chewCount &gt;= 200 ) <br>        { <br>            SetSpriteAction( hBear, STRIKE, SAME ); <br>            SetSpriteSwitch( hBear, C_BEAR_STRIKESWITCH, P_ABSOLUTE ); <br>            SetSpriteVelX( hBear, 0, P_ABSOLUTE ); <br>            SetSpriteSwitchDone( hBear, FALSE ); <br> <br>            if( GetSpriteDirection(hFox) == RIGHT ) <br>            { <br>              SetPlaneSlideX( hForeground, -C_BOUNDDIF, P_RELATIVE ); <br>              SetPlaneSlideX( hMidground,  -C_BOUNDDIF, P_RELATIVE ); <br>              SetPlaneSlideX( hBackground, -C_BOUNDDIF, P_RELATIVE ); <br>            } <br> <br>            chewDif = GetSpriteX(hFox); <br> <br>            SetSpriteActive( hFox, TRUE ); <br>            SetSpriteAction( hFox, STUNNED, LEFT ); <br>            SetSpriteX( hFox, GetSpriteX(hBear), P_ABSOLUTE ); <br>            SetSpriteY( hFox, GetSpriteY(hBear), P_ABSOLUTE ); <br>            SetSpriteAccX( hFox, 0, P_ABSOLUTE ); <br>            SetSpriteAccY( hFox, C_UNIT / 2, P_ABSOLUTE ); <br>            SetSpriteVelX( hFox, -8 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteVelY( hFox, -10 * C_UNIT, P_ABSOLUTE ); <br>            SetSpriteSwitch( hFox, 0, P_ABSOLUTE ); <br>            SoundPlayEffect( SOUND_STUNNED ); <br> <br>            chewDif -= GetSpriteX(hFox); <br> <br>            SetPlaneSlideX( hForeground, -chewDif, P_RELATIVE ); <br>            SetPlaneSlideX( hMidground, -chewDif, P_RELATIVE ); <br>            SetPlaneSlideX( hBackground, -chewDif, P_RELATIVE ); <br>            SetPlaneIncremX( hForeground, C_BOUNDINCREM, P_ABSOLUTE ); <br>            SetPlaneIncremX( hMidground,  C_BOUNDINCREM, P_ABSOLUTE ); <br>            SetPlaneIncremX( hBackground, C_BOUNDINCREM, P_ABSOLUTE ); <br>        } <br>        break; <br>    } <br> <br>    /* <br>     * Apple actions... <br>     */ <br>    if( (GetSpriteVelY(hApple) != 0) &amp;&amp; (GetSpriteY(hApple) &gt;= 420 * C_UNIT) ) <br>    { <br>        SetSpriteX( hApple, 0, P_ABSOLUTE ); <br>        SetSpriteY( hApple, 0, P_ABSOLUTE ); <br>        SetSpriteAccX( hApple, 0, P_ABSOLUTE ); <br>        SetSpriteAccY( hApple, 0, P_ABSOLUTE ); <br>        SetSpriteVelX( hApple, 0, P_ABSOLUTE ); <br>        SetSpriteVelY( hApple, 0, P_ABSOLUTE ); <br>        SetSpriteActive( hApple, FALSE ); <br>    } <br> <br>    return cont; <br> <br>} /* ProcessInput */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

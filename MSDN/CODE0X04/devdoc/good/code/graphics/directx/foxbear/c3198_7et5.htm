<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PLANE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3209"></a>PLANE.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> *  Copyright (C) 1994-1995 ATI Technologies Inc. All Rights Reserved. <br> * <br> *  File:       plane.c <br> *  Content:    plane manipulation functions <br> * <br> ***************************************************************************/ <br>#include "foxbear.h" <br> <br>/* <br> * CreatePlane <br> */ <br>HPLANE *CreatePlane ( USHORT width, USHORT height, USHORT denom ) <br>{ <br>    HPLANE      *hPlane; <br>    USHORT      num_elems; <br>    USHORT      elem_size; <br> <br>    num_elems = width * height; <br>    elem_size = sizeof (GFX_HBM); <br> <br>    hPlane = MemAlloc( sizeof (HPLANE) ); <br>    if( hPlane == NULL ) <br>    { <br>ErrorMessage( "hPlane in CreatePlane" ); <br>    } <br> <br>    hPlane-&gt;hBM  = CMemAlloc( num_elems, elem_size ); <br>    hPlane-&gt;surface = CMemAlloc( num_elems, sizeof hPlane-&gt;surface ); <br>    hPlane-&gt;x = 0; <br>    hPlane-&gt;y = 0; <br>    hPlane-&gt;width = width; <br>    hPlane-&gt;height = height; <br>    hPlane-&gt;denom = denom; <br>    hPlane-&gt;xslide = 0; <br>    hPlane-&gt;xincrem = 0; <br>    hPlane-&gt;xv = 0; <br> <br>    if( hPlane-&gt;hBM == NULL ) <br>    { <br>MemFree( hPlane ); <br>ErrorMessage( "hPlane-&gt;hBM in CreatePlane" ); <br>    } <br> <br>    return hPlane; <br> <br>} /* CreatePlane */ <br> <br> <br>/* <br> * TilePlane <br> */ <br>BOOL TilePlane( HPLANE *hPlane, HBITMAPLIST *hTileList, HPOSLIST *posList ) <br>{ <br>    USHORT i; <br> <br>    for( i = 0; i &lt; hPlane-&gt;width * hPlane-&gt;height; ++i ) <br>    { <br>hPlane-&gt;surface[i] = FALSE; <br> <br>if( posList[i] &gt;= 0 ) <br>{ <br>    hPlane-&gt;hBM[i] = hTileList[ posList[i] ].hBM; <br>} <br>else <br>{ <br>    hPlane-&gt;hBM[i] = NULL; <br>} <br>    } <br> <br>    return TRUE; <br> <br>} /* TilePlane */ <br> <br>/* <br> * SurfacePlane <br> */ <br>BOOL SurfacePlane( HPLANE *hPlane, HSURFACELIST *hSurfaceList ) <br>{ <br>    USHORT i; <br> <br>    for( i = 0; i &lt; hPlane-&gt;width * hPlane-&gt;height; ++i ) <br>    { <br>if( hSurfaceList[i] == FALSE ) <br>{ <br>    hPlane-&gt;surface[i] = FALSE; <br>} <br>else <br>{ <br>    hPlane-&gt;surface[i] = TRUE; <br>} <br>    } <br> <br>    return TRUE; <br> <br>} /* SurfacePlane */ <br> <br>/* <br> * SetSurface <br> */ <br>BOOL SetSurface( HPLANE  *hPlane, HSPRITE *hSprite ) <br>{ <br>    SHORT c; <br>    SHORT n; <br>    SHORT x; <br>    SHORT y; <br> <br>    c = hSprite-&gt;currentBitmap; <br>    x = (hSprite-&gt;x &gt;&gt; 16) / C_TILE_W; <br>    y = (SHORT) hSprite-&gt;y &gt;&gt; 16; <br> <br>    y += hSprite-&gt;hSBM[c].y + hSprite-&gt;hSBM[c].height; <br>    y /= C_TILE_H; <br> <br>    n = (x % hPlane-&gt;width) + y * hPlane-&gt;width; <br> <br>    if( hPlane-&gt;surface[n] == FALSE ) <br>    { <br>if( !hPlane-&gt;surface[n + hPlane-&gt;width] == FALSE ) <br>{ <br>    y += 1; <br>} <br>if( !hPlane-&gt;surface[n - hPlane-&gt;width] == FALSE ) <br>{ <br>    y -= 1; <br>} <br>    } <br>     <br>    y *= C_TILE_H; <br>    y -= hSprite-&gt;hSBM[c].y + hSprite-&gt;hSBM[c].height; <br> <br>    SetSpriteY( hSprite, y &lt;&lt; 16, P_ABSOLUTE ); <br> <br>    return TRUE; <br> <br>} /* SetSurface */ <br> <br>/* <br> * GetSurface <br> */ <br>BOOL GetSurface( HPLANE *hPlane, HSPRITE *hSprite ) <br>{    <br>    SHORT  c; <br>    SHORT  x; <br>    SHORT  y; <br> <br>    c = hSprite-&gt;currentBitmap; <br>    x = ((hSprite-&gt;x &gt;&gt; 16) + hSprite-&gt;width / 2) / C_TILE_H; <br>    y = ((hSprite-&gt;y &gt;&gt; 16) + hSprite-&gt;hSBM[c].y + hSprite-&gt;hSBM[c].height) / C_TILE_W; <br> <br>    return hPlane-&gt;surface[(x % hPlane-&gt;width) + y * hPlane-&gt;width]; <br> <br>} /* GetSurface */ <br> <br>/* <br> * SetPlaneX <br> */ <br>BOOL SetPlaneX( HPLANE *hPlane, LONG x, POSITION position ) <br>{ <br>    LONG xincrem;     <br> <br>    if( position == P_ABSOLUTE ) <br>    { <br>hPlane-&gt;x = x; <br>    } <br>    else if( position == P_RELATIVE ) <br>    { <br>hPlane-&gt;x += x; <br>    } <br>    else if( position == P_AUTOMATIC ) <br>    { <br>if( hPlane-&gt;xslide &gt; 0 ) <br>{ <br>    xincrem = hPlane-&gt;xincrem; <br>} <br>else if( hPlane-&gt;xslide &lt; 0 ) <br>{ <br>    xincrem = -hPlane-&gt;xincrem; <br>} <br>else <br>{ <br>    xincrem = 0; <br>} <br> <br>hPlane-&gt;x += (hPlane-&gt;xv + xincrem) / hPlane-&gt;denom; <br>hPlane-&gt;xslide -= xincrem; <br>hPlane-&gt;xv = 0; <br> <br>if( abs(hPlane-&gt;xslide) &lt; hPlane-&gt;xincrem ) <br>{ <br>    hPlane-&gt;x += hPlane-&gt;xslide / hPlane-&gt;denom; <br>    hPlane-&gt;xslide = 0; <br>    hPlane-&gt;xincrem = 0; <br>} <br>    } <br> <br>    if( hPlane-&gt;x &lt; 0 ) <br>    { <br>hPlane-&gt;x += (hPlane-&gt;width * C_TILE_W) &lt;&lt; 16; <br>    } <br>    else if( hPlane-&gt;x &gt;= (hPlane-&gt;width * C_TILE_W) &lt;&lt; 16 ) <br>    { <br>hPlane-&gt;x -= (hPlane-&gt;width * C_TILE_W) &lt;&lt; 16; <br>    } <br> <br>    return TRUE; <br> <br>} /* SetPlaneX */ <br> <br>/* <br> * GetPlaneX <br> */ <br>LONG GetPlaneX( HPLANE *hPlane ) <br>{ <br>    return hPlane-&gt;x; <br> <br>} /* GetPlaneX */ <br> <br>/* <br> * SetPlaneY <br> */ <br>BOOL SetPlaneY( HPLANE *hPlane, LONG y, POSITION position ) <br>{ <br>    if( position == P_ABSOLUTE ) <br>    { <br>hPlane-&gt;y = y; <br>    } <br>    else <br>    { <br>hPlane-&gt;y += y; <br>    } <br> <br>    if( hPlane-&gt;y &lt; 0 ) <br>    { <br>hPlane-&gt;y += (hPlane-&gt;height * C_TILE_H) &lt;&lt; 16; <br>    } <br>    else if( hPlane-&gt;y &gt;= (hPlane-&gt;height * C_TILE_H) &lt;&lt; 16 ) <br>    { <br>hPlane-&gt;y -= (hPlane-&gt;height * C_TILE_H) &lt;&lt; 16; <br>    } <br> <br>    return TRUE; <br> <br>} /* SetPlaneY */ <br> <br>/* <br> * GetPlaneY <br> */ <br>LONG GetPlaneY( HPLANE *hPlane ) <br>{ <br>    return hPlane-&gt;y; <br> <br>} /* GetPlaneY */ <br> <br>/* <br> * SetPlaneSlideX <br> */ <br>BOOL SetPlaneSlideX( HPLANE *hPlane, LONG xslide, POSITION position ) <br>{ <br>    if( position == P_ABSOLUTE ) <br>    { <br>hPlane-&gt;xslide = xslide; <br>    } <br>    else if( position == P_RELATIVE ) <br>    { <br>hPlane-&gt;xslide += xslide; <br>    } <br>    return TRUE; <br> <br>} /* SetPlaneSlideX */ <br> <br>/* <br> * SetPlaneVelX <br> */ <br>BOOL SetPlaneVelX( HPLANE *hPlane, LONG xv, POSITION position ) <br>{ <br>    if( position == P_ABSOLUTE ) <br>    { <br>hPlane-&gt;xv = xv; <br>    } <br>    else if( position == P_RELATIVE ) <br>    { <br>hPlane-&gt;xv += xv; <br>    } <br> <br>    return TRUE; <br>} /* SetPlaneVelX */ <br> <br>/* <br> * SetPlaneIncremX <br> */ <br>BOOL SetPlaneIncremX( HPLANE *hPlane, LONG xincrem, POSITION position ) <br>{ <br>    if( position == P_ABSOLUTE ) <br>    { <br>hPlane-&gt;xincrem = xincrem; <br>    } <br>    else if( position == P_RELATIVE ) <br>    { <br>hPlane-&gt;xincrem += xincrem; <br>    } <br> <br>    return TRUE; <br> <br>} /* SetPlaneIncremX */ <br> <br>/* <br> * ScrollPlane <br> */ <br>BOOL ScrollPlane( HSPRITE *hSprite ) <br>{ <br>    if( (GetSpriteX(hSprite) &lt;= C_FOX_STARTX) &amp;&amp; (GetSpriteVelX(hSprite) &lt; 0) ) <br>    { <br>return TRUE; <br>    } <br> <br>    if( (GetSpriteX(hSprite) &gt;= C_FOX_STARTX) &amp;&amp; (GetSpriteVelX(hSprite) &gt; 0) ) <br>    { <br>return TRUE; <br>    } <br>    return FALSE; <br> <br>} /* ScrollPlane */ <br> <br> <br>/* <br> * DisplayPlane <br> */ <br>BOOL DisplayPlane ( GFX_HBM  hBuffer, HPLANE *hPlane ) <br>{ <br>    USHORT      n; <br>    USHORT      i; <br>    USHORT      j; <br>    USHORT      x1; <br>    USHORT      y1; <br>    USHORT      x2; <br>    USHORT      y2; <br>    USHORT      xmod; <br>    USHORT      ymod; <br>    POINT       src; <br>    RECT        dst; <br> <br> <br>    x1 = (hPlane-&gt;x &gt;&gt; 16) / C_TILE_W;           <br>    y1 = (hPlane-&gt;y &gt;&gt; 16) / C_TILE_H; <br>    x2 = x1 + C_SCREEN_W / C_TILE_W; <br>    y2 = y1 + C_SCREEN_H / C_TILE_H; <br>    xmod = (hPlane-&gt;x &gt;&gt; 16) % C_TILE_W; <br>    ymod = (hPlane-&gt;y &gt;&gt; 16) % C_TILE_H; <br> <br>    for( j = y1; j &lt; y2; ++j ) <br>    { <br>for( i = x1; i &lt;= x2; ++i ) <br>{ <br>    n = (i % hPlane-&gt;width) + j * hPlane-&gt;width; <br>    if( hPlane-&gt;hBM[n] != NULL ) <br>    { <br>if( i == x1 ) <br>{ <br>    dst.left  = 0; <br>    dst.right = dst.left + C_TILE_W - xmod; <br>    src.x     = xmod; <br>} <br>else if( i == x2 ) <br>{ <br>    dst.left  = (i - x1) * C_TILE_W - xmod; <br>    dst.right = dst.left + xmod; <br>    src.x     = 0; <br>} else { <br>    dst.left  = (i - x1) * C_TILE_W - xmod; <br>    dst.right = dst.left + C_TILE_W; <br>    src.x     = 0; <br>} <br>     <br>if( j == y1 ) <br>{ <br>    dst.top    = 0; <br>    dst.bottom = dst.top + C_TILE_H - ymod; <br>    src.y      = ymod; <br>} <br>else if( j == y2 ) <br>{ <br>    dst.top    = (j - y1) * C_TILE_H - ymod; <br>    dst.bottom = dst.top + ymod; <br>    src.y      = 0; <br>} else { <br>    dst.top    = (j - y1) * C_TILE_H - ymod; <br>    dst.bottom = dst.top + C_TILE_H; <br>    src.y      = 0; <br>} <br>  <br>gfxBlt(&amp;dst,hPlane-&gt;hBM[n],&amp;src); <br>    } <br>} <br>    } <br> <br>    return TRUE; <br> <br>} /* DisplayPlane */ <br> <br>/* <br> * DestroyPlane <br> */ <br>BOOL DestroyPlane ( HPLANE *hPlane ) <br>{ <br>    if( hPlane == NULL ) <br>    { <br>ErrorMessage( "hPlane in DestroyPlane" ); <br>    } <br> <br>    if( hPlane-&gt;hBM == NULL ) <br>    { <br>ErrorMessage( "hPlane-&gt;hBM in DestroyPlane" ); <br>    } <br> <br>    MemFree( hPlane-&gt;hBM ); <br>    MemFree( hPlane ); <br> <br>    return TRUE; <br> <br>} /* DestroyPlane */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

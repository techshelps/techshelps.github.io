<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FBSOUND.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3201"></a>FBSOUND.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       fbsound.c <br> *  Content:Game sound effect routines <br> * <br> ***************************************************************************/ <br>#include "foxbear.h" <br>     <br>/* <br> * Array of pointers to our sound effects <br> */ <br>LPDIRECTSOUNDlpDS; <br>LPDIRECTSOUNDBUFFER     lpSoundEffects[NUM_SOUND_EFFECTS]; <br> <br>char szSoundEffects[NUM_SOUND_EFFECTS][MAX_PATH] = <br>{ <br>    "STOP", <br>    "THROW", <br>    "JUMP", <br>    "STUNNED", <br>    "STRIKE02", <br>    "MISS02" <br>}; <br> <br>/* <br> * DSEnable <br> * <br> * Figures out whether or not to use DirectSound, based on an entry <br> * in WIN.INI.  Sets a module-level flag and goes about creating the <br> * DirectSound object if necessary.  Returns TRUE if successful. <br> */ <br>BOOL DSEnable( HWND hwnd ) <br>{ <br>    HRESULTdsrval; <br>    BOOL                bUseDSound; <br> <br>    bUseDSound = GetProfileInt("FoxBear", "use_dsound", bWantSound); <br> <br>    if (!bUseDSound) <br>    { <br>        lpDS = NULL; <br>        return TRUE; <br>    } <br> <br>    if (lpDS != NULL) <br>    { <br>        Msg( "DSEnable, already enabled" ); <br>        return TRUE; <br>    } <br> <br>    dsrval = DirectSoundCreate(NULL, &amp;lpDS, NULL); <br> <br>    if (dsrval != DS_OK) <br>    { <br>        Msg("DirectSoundCreate FAILED"); <br>        return FALSE; <br>    } <br> <br> <br>    dsrval = IDirectSound_SetCooperativeLevel(lpDS, hwnd, DSSCL_NORMAL); <br> <br>    if (dsrval != DS_OK) <br>    { <br>        DSDisable(); <br>        Msg("SetCooperativeLevel FAILED"); <br>        return FALSE; <br>    } <br> <br>    return TRUE; <br> <br>} /* DSEnable */ <br> <br> <br>/* <br> * DSDisable <br> * <br> * Turn off DirectSound <br> */ <br>BOOL DSDisable( void ) <br>{ <br>    if (lpDS == NULL) <br>    { <br>return TRUE; <br>    } <br> <br>    IDirectSound_Release(lpDS); <br>    lpDS = NULL; <br> <br>    return TRUE; <br> <br>} /* DSDisable */ <br> <br>/* <br> * InitSound <br> * <br> * Sets up the DirectSound object and loads all sounds into secondary <br> * DirectSound buffers.  Returns FALSE on error, or TRUE if successful <br> */ <br>BOOL InitSound( HWND hwndOwner ) <br>{ <br>    int idx; <br>    DSBUFFERDESC dsBD; <br>    IDirectSoundBuffer *lpPrimary; <br> <br>    DSEnable(hwndOwner); <br> <br>    if (lpDS == NULL) <br>        return TRUE; <br> <br>    /* <br>     * Load all sounds -- any that can't load for some reason will have NULL <br>     * pointers instead of valid SOUNDEFFECT data, and we will know not to <br>     * play them later on. <br>     */ <br>    for( idx = 0; idx &lt; NUM_SOUND_EFFECTS; idx++ ) <br>    { <br>        if (SoundLoadEffect((EFFECT)idx)) <br>        { <br>            DSBCAPS  caps; <br> <br>            caps.dwSize = sizeof(caps); <br>            IDirectSoundBuffer_GetCaps(lpSoundEffects[idx], &amp;caps); <br> <br>            if (caps.dwFlags &amp; DSBCAPS_LOCHARDWARE) <br>                Msg( "Sound effect %s in hardware", szSoundEffects[idx]); <br>            else <br>                Msg( "Sound effect %s in software", szSoundEffects[idx]); <br>        } <br>        else <br>        { <br>            Msg( "cant load sound effect %s", szSoundEffects[idx]); <br>        } <br>    } <br> <br>    /* <br>     * get the primary buffer and start it playing <br>     * <br>     * by playing the primary buffer, DirectSound knows to keep the <br>     * mixer active, even though we are not making any noise. <br>     */ <br> <br>    ZeroMemory( &amp;dsBD, sizeof(DSBUFFERDESC) ); <br>    dsBD.dwSize = sizeof(dsBD); <br>    dsBD.dwFlags = DSBCAPS_PRIMARYBUFFER; <br> <br>    if (SUCCEEDED(IDirectSound_CreateSoundBuffer(lpDS, &amp;dsBD, &amp;lpPrimary, NULL))) <br>    { <br>        if (!SUCCEEDED(IDirectSoundBuffer_Play(lpPrimary, 0, 0, DSBPLAY_LOOPING))) <br>        { <br>            Msg("Unable to play Primary sound buffer"); <br>        } <br> <br>        IDirectSoundBuffer_Release(lpPrimary); <br>    } <br>    else <br>    { <br>        Msg("Unable to create Primary sound buffer"); <br>    } <br> <br>    return TRUE; <br> <br>} /* InitSound */ <br> <br>/* <br> * DestroySound <br> * <br> * Undoes everything that was done in a InitSound call <br> */ <br>BOOL DestroySound( void ) <br>{ <br>    DWORDidxKill; <br>     <br>    for( idxKill = 0; idxKill &lt; NUM_SOUND_EFFECTS; idxKill++ ) <br>    { <br>SoundDestroyEffect( (EFFECT)idxKill ); <br>    } <br> <br>    DSDisable(); <br>    return TRUE; <br> <br>} /* DestroySound */ <br> <br>/* <br> * SoundDestroyEffect <br> * <br> * Frees up resources associated with a sound effect <br> */ <br>BOOL SoundDestroyEffect( EFFECT sfx ) <br>{ <br>    if(lpSoundEffects[sfx]) <br>    { <br>        IDirectSoundBuffer_Release(lpSoundEffects[sfx]); <br>        lpSoundEffects[sfx] = NULL; <br>    } <br>    return TRUE; <br> <br>} /* SoundDestryEffect */ <br> <br>/* <br> * SoundLoadEffect <br> * <br> * Initializes a sound effect by loading the WAV file from a resource <br> */ <br>BOOL SoundLoadEffect( EFFECT sfx ) <br>{ <br>    if (lpDS &amp;&amp; lpSoundEffects[sfx] == NULL &amp;&amp; *szSoundEffects[sfx]) <br>    { <br>        // <br>        //  use DSLoadSoundBuffer (in ..\misc\dsutil.c) to load <br>        //  a sound from a resource. <br>        // <br>        lpSoundEffects[sfx] = DSLoadSoundBuffer(lpDS, szSoundEffects[sfx]); <br>    } <br> <br>    return lpSoundEffects[sfx] != NULL; <br> <br>} /* SoundLoadEffect */ <br> <br>/* <br> * SoundPlayEffect <br> * <br> * Plays the sound effect specified.   <br> * Returns TRUE if succeeded. <br> */ <br>BOOL SoundPlayEffect( EFFECT sfx ) <br>{ <br>    HRESULT     dsrval; <br>    IDirectSoundBuffer *pdsb = lpSoundEffects[sfx]; <br>     <br>    if( !lpDS || !pdsb ) <br>    { <br>return FALSE; <br>    } <br>     <br>    /* <br>     * Rewind the play cursor to the start of the effect, and play <br>     */ <br>    IDirectSoundBuffer_SetCurrentPosition(pdsb, 0); <br>    dsrval = IDirectSoundBuffer_Play(pdsb, 0, 0, 0); <br> <br>    if (dsrval == DSERR_BUFFERLOST) <br>    { <br>        Msg("** %s needs restored", szSoundEffects[sfx]); <br> <br>        dsrval = IDirectSoundBuffer_Restore(pdsb); <br> <br>        if (dsrval == DS_OK) <br>        { <br>            if (DSReloadSoundBuffer(pdsb, szSoundEffects[sfx])) <br>            { <br>                Msg("** %s has been restored", szSoundEffects[sfx]); <br>                IDirectSoundBuffer_SetCurrentPosition(pdsb, 0); <br>                dsrval = IDirectSoundBuffer_Play(pdsb, 0, 0, 0); <br>            } <br>            else <br>            { <br>                dsrval = E_FAIL; <br>            } <br>        } <br>    } <br> <br>    return (dsrval == DS_OK); <br> <br>} /* SoundPlayEffect */ <br> <br>/* <br> * SoundStopEffect <br> * <br> * Stops the sound effect specified. <br> * Returns TRUE if succeeded. <br> */ <br>BOOL SoundStopEffect( EFFECT sfx ) <br>{ <br>    HRESULTdsrval; <br> <br>    if( !lpDS || !lpSoundEffects[sfx] ) <br>    { <br>return FALSE; <br>    } <br> <br>    dsrval = IDirectSoundBuffer_Stop(lpSoundEffects[sfx]); <br> <br>    return SUCCEEDED(dsrval); <br> <br>} /* SoundStopEffect */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

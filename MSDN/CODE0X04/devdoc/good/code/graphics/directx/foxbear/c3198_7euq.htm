<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SPRITE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3212"></a>SPRITE.C</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> *  Copyright (C) 1994-1995 ATI Technologies Inc. All Rights Reserved. <br> * <br> *  File:sprite.c <br> *  Content:sprite manipulation functions <br> * <br> ***************************************************************************/ <br>#include "foxbear.h" <br> <br>/* <br> * CreateSprite <br> */ <br>HSPRITE *CreateSprite ( <br>    USHORT    bitmapCount, <br>    LONG      x, <br>    LONG      y, <br>    USHORT    width, <br>    USHORT    height, <br>    USHORT    xmax, <br>    USHORT    ymax, <br>    SHORT     as, <br>    BOOL      active ) <br>{ <br>    HSPRITE *hSprite; <br>    USHORT   i; <br> <br>    hSprite = MemAlloc( sizeof (HSPRITE) ); <br>    if( hSprite == NULL ) <br>    { <br>        ErrorMessage( "hSprite in CreateSprite" ); <br>    } <br> <br>    hSprite-&gt;hSBM = CMemAlloc( bitmapCount, sizeof (HSPRITE_BM) ); <br>    if( hSprite-&gt;hSBM == NULL ) <br>    { <br>        MemFree( hSprite ); <br>        ErrorMessage( "hSprite-&gt;hSBM in CreateSprite" ); <br>    } <br>     <br>    hSprite-&gt;active        = active; <br>    hSprite-&gt;bitmapCount   = bitmapCount; <br>    hSprite-&gt;x             = x; <br>    hSprite-&gt;y             = y; <br>    hSprite-&gt;width         = width; <br>    hSprite-&gt;height        = height; <br>    hSprite-&gt;xv            = 0; <br>    hSprite-&gt;yv            = 0; <br>    hSprite-&gt;xa            = 0; <br>    hSprite-&gt;ya            = 0; <br>    hSprite-&gt;xmax          = xmax; <br>    hSprite-&gt;ymax          = ymax; <br>    hSprite-&gt;absSwitch     = as; <br>    hSprite-&gt;relSwitch     = 0; <br>    hSprite-&gt;switchType    = HOR; <br>    hSprite-&gt;switchForward = TRUE; <br>    hSprite-&gt;switchDone    = FALSE; <br> <br>    for( i = 0; i &lt; bitmapCount; ++i ) <br>    { <br>        hSprite-&gt;hSBM[i].hBM = NULL; <br>    } <br> <br>    return hSprite; <br> <br>} /* CreateSprite */ <br> <br>/* <br> * BitBltSprite <br> */ <br>BOOL BitBltSprite ( <br>    HSPRITE   *hSprite, <br>    GFX_HBM    hBM, <br>    ACTION     action, <br>    DIRECTION  direction, <br>    SHORT      x, <br>    SHORT      y, <br>    USHORT     w, <br>    USHORT     h ) <br>{ <br>    USHORT count; <br> <br>    if( hSprite == NULL ) <br>    { <br>        ErrorMessage( "hSprite in BitBltSprite" ); <br>    } <br> <br>    if( hBM == NULL ) <br>    { <br>        ErrorMessage( "hBM in BitBltSprite" ); <br>    } <br> <br>    if( (x &gt;= hSprite-&gt;width) || (y &gt;= hSprite-&gt;height) ) <br>    { <br>        ErrorMessage( "x or y in BitBltSprite" ); <br>    } <br> <br>    count = 0; <br>    while( hSprite-&gt;hSBM[count].hBM != NULL ) <br>    { <br>        count++; <br>        if( count &gt;= hSprite-&gt;bitmapCount ) <br>    { <br>            ErrorMessage( "Bitmap overflow in BitBltSprite" ); <br>        } <br>    } <br> <br>    hSprite-&gt;hSBM[count].hBM       = hBM; <br>    hSprite-&gt;hSBM[count].action    = action; <br>    hSprite-&gt;hSBM[count].direction = direction; <br>    hSprite-&gt;hSBM[count].x         = x; <br>    hSprite-&gt;hSBM[count].y         = y; <br>    hSprite-&gt;hSBM[count].width     = w;  <br>    hSprite-&gt;hSBM[count].height    = h;  <br> <br>    return TRUE; <br> <br>} /* BitBltSprite */ <br> <br>/* <br> * SetSpriteAction <br> */ <br>BOOL SetSpriteAction ( HSPRITE *hSprite, ACTION action, DIRECTION direction ) <br>{ <br>    USHORT c; <br> <br>    c = 0; <br> <br>    if( direction == SAME ) <br>    { <br>        direction = hSprite-&gt;currentDirection; <br>    } <br> <br>    while( (hSprite-&gt;hSBM[c].action != action) || (hSprite-&gt;hSBM[c].direction != direction) ) <br>    { <br>        ++c; <br>    } <br> <br>    hSprite-&gt;currentAction    = action; <br>    hSprite-&gt;currentDirection = direction; <br>    hSprite-&gt;currentBitmap    = c; <br>    hSprite-&gt;relSwitch        = 0; <br> <br>    return TRUE; <br> <br>} /* SetSpriteAction */ <br> <br>/* <br> * ChangeSpriteDirection <br> */ <br>BOOL ChangeSpriteDirection( HSPRITE *hSprite ) <br>{ <br>    DIRECTION direction; <br> <br>    if( hSprite-&gt;currentDirection == RIGHT ) <br>    { <br>        direction = LEFT; <br>    } <br>    else <br>    { <br>        direction = RIGHT; <br>    } <br> <br>    SetSpriteAction( hSprite, hSprite-&gt;currentAction, direction ); <br> <br>    return TRUE; <br> <br>} /* ChangeSpriteDirection */ <br> <br>/* <br> * GetSpriteAction <br> */ <br>ACTION GetSpriteAction( HSPRITE *hSprite ) <br>{ <br>    return hSprite-&gt;currentAction; <br> <br>} /* GetSpriteAction */ <br> <br> <br>/* <br> * GetSpriteDirection <br> */ <br>DIRECTION GetSpriteDirection( HSPRITE *hSprite )          <br>{ <br>    return hSprite-&gt;currentDirection; <br> <br>} /* GetSpriteDirection */ <br> <br>/* <br> * SetSpriteActive <br> */ <br>BOOL SetSpriteActive( HSPRITE *hSprite, BOOL active ) <br>{ <br>    hSprite-&gt;active = active; <br>     <br>    if( active == FALSE ) <br>    { <br>        hSprite-&gt;xv = 0; <br>        hSprite-&gt;yv = 0; <br>        hSprite-&gt;xa = 0; <br>        hSprite-&gt;ya = 0; <br>    } <br> <br>    return TRUE; <br> <br>} /* SetSpriteActive */ <br> <br>/* <br> * GetSpriteActive <br> */ <br>BOOL GetSpriteActive( HSPRITE *hSprite ) <br>{ <br>    return hSprite-&gt;active; <br> <br>} /* GetSpriteActive */ <br> <br>/* <br> * SetSpriteVelX <br> */ <br>BOOL SetSpriteVelX( HSPRITE *hSprite, LONG xv, POSITION position ) <br>{ <br>    if( hSprite-&gt;active == FALSE ) <br>    { <br>        return FALSE; <br>    } <br> <br>    if( position == P_ABSOLUTE ) <br>    { <br>        hSprite-&gt;xv = xv; <br>    } <br>    else if( position == P_RELATIVE ) <br>    { <br>        hSprite-&gt;xv += xv; <br>    } <br> <br>    return TRUE; <br> <br>} /* SetSpriteVelX */ <br> <br>/* <br> * GetSpriteVelX <br> */ <br>LONG GetSpriteVelX( HSPRITE *hSprite ) <br>{ <br>    return hSprite-&gt;xv; <br> <br>} /* GetSpriteVelX */ <br> <br>/* <br> * SetSpriteVelY <br> */ <br>BOOL SetSpriteVelY( HSPRITE *hSprite, LONG  yv, POSITION position ) <br>{ <br>    if( hSprite-&gt;active == FALSE ) <br>    { <br>        return FALSE; <br>    } <br> <br>    if( position == P_ABSOLUTE ) <br>    { <br>        hSprite-&gt;yv = yv; <br>    } <br>    else if( position == P_RELATIVE ) <br>    { <br>        hSprite-&gt;yv += yv; <br>    } <br> <br>    return TRUE; <br> <br>} /* SetSpriteVelY */ <br> <br>/* <br> * GetSpriteVelY <br> */ <br>LONG GetSpriteVelY( HSPRITE *hSprite ) <br>{ <br>    return hSprite-&gt;yv; <br> <br>} /* GetSpriteVelY */ <br> <br>/* <br> * SetSpriteAccX <br> */ <br>BOOL SetSpriteAccX ( HSPRITE *hSprite, LONG xa, POSITION position ) <br>{ <br>    if( position == P_ABSOLUTE ) <br>    { <br>        hSprite-&gt;xa = xa; <br>    } <br>    else if( position == P_RELATIVE ) <br>    { <br>        hSprite-&gt;xa += xa; <br>    } <br>    return TRUE; <br> <br>} /* SetSpriteAccX */ <br> <br>/* <br> * GetSpriteAccX <br> */ <br>LONG GetSpriteAccX( HSPRITE *hSprite ) <br>{ <br>    return hSprite-&gt;xa; <br> <br>} /* GetSpriteAccX */ <br> <br>/* <br> * SetSpriteAccY <br> */ <br>BOOL SetSpriteAccY ( HSPRITE *hSprite, LONG ya, POSITION position ) <br>{ <br>    if( position == P_ABSOLUTE ) <br>    { <br>        hSprite-&gt;ya = ya; <br>    } <br>    else if( position == P_RELATIVE ) <br>    { <br>        hSprite-&gt;ya += ya; <br>    } <br>    return TRUE; <br> <br>} /* SetSpriteAccY */ <br> <br>/* <br> * GetSpriteAccY <br> */ <br>LONG GetSpriteAccY( HSPRITE *hSprite ) <br>{ <br>    return hSprite-&gt;ya; <br> <br>} /* GetSpriteAccY */ <br> <br>/* <br> * SetSpriteX <br> */ <br>BOOL SetSpriteX( HSPRITE *hSprite, LONG x, POSITION position ) <br>{ <br>    if( hSprite-&gt;active == FALSE ) <br>    { <br>        return FALSE; <br>    } <br> <br>    if( position == P_AUTOMATIC ) <br>    { <br>        hSprite-&gt;xv += hSprite-&gt;xa; <br>        hSprite-&gt;x  += hSprite-&gt;xv; <br>    } <br>    else if( position == P_ABSOLUTE ) <br>    { <br>        hSprite-&gt;x = x; <br>    } <br>    else if( position == P_RELATIVE ) <br>    { <br>        hSprite-&gt;x += x; <br>    } <br> <br>    if( hSprite-&gt;x &lt; 0 ) <br>    { <br>        hSprite-&gt;x += hSprite-&gt;xmax &lt;&lt; 16; <br>    } <br>    else if( hSprite-&gt;x &gt;= hSprite-&gt;xmax &lt;&lt; 16 ) <br>    { <br>        hSprite-&gt;x -= hSprite-&gt;xmax &lt;&lt; 16; <br>    } <br>    return TRUE; <br> <br>} /* SetSpriteX */ <br> <br>/* <br> * GetSpriteX <br> */ <br>LONG GetSpriteX( HSPRITE *hSprite ) <br>{ <br>    return hSprite-&gt;x; <br> <br>} /* GetSpriteX */ <br> <br>/* <br> * SetSpriteY <br> */ <br>BOOL SetSpriteY ( HSPRITE *hSprite, LONG y, POSITION position ) <br>{ <br>    if( hSprite-&gt;active == FALSE ) <br>    { <br>        return FALSE; <br>    } <br> <br>    if( position == P_AUTOMATIC ) <br>    { <br>        hSprite-&gt;yv += hSprite-&gt;ya; <br>        hSprite-&gt;y  += hSprite-&gt;yv; <br>    } <br>    else if( position == P_ABSOLUTE ) <br>    { <br>        hSprite-&gt;y = y; <br>    } <br>    else if( position == P_RELATIVE ) <br>    { <br>        hSprite-&gt;y += y; <br>    } <br> <br>    if( hSprite-&gt;y &lt; 0 ) <br>    { <br>        hSprite-&gt;y += hSprite-&gt;ymax &lt;&lt; 16; <br>    } <br>    else if( hSprite-&gt;y &gt;= hSprite-&gt;ymax &lt;&lt; 16 ) <br>    { <br>        hSprite-&gt;y -= hSprite-&gt;ymax &lt;&lt; 16; <br>    } <br> <br>    return TRUE; <br> <br>} /* SetSpriteY */ <br> <br>/* <br> * GetSpriteY <br> */ <br>LONG GetSpriteY( HSPRITE *hSprite ) <br>{ <br>    return hSprite-&gt;y; <br> <br>} /* GetSpriteY */ <br> <br>/* <br> * SetSpriteSwitch <br> */ <br>BOOL SetSpriteSwitch ( HSPRITE *hSprite, LONG absSwitch, POSITION position )                <br>{ <br>    if( position == P_ABSOLUTE ) <br>    { <br>        hSprite-&gt;absSwitch = absSwitch; <br>    } <br>    else if( position == P_RELATIVE ) <br>    { <br>        hSprite-&gt;absSwitch += absSwitch; <br>    } <br>    return TRUE; <br> <br>} /* SetSpriteSwitch */ <br> <br> <br>/* <br> * IncrementSpriteSwitch <br> */ <br>BOOL IncrementSpriteSwitch ( HSPRITE *hSprite, LONG n ) <br>{ <br>    hSprite-&gt;relSwitch += n; <br>    return TRUE; <br> <br>} /* IncrementSpriteSwitch */ <br> <br>/* <br> * SetSpriteSwitchType <br> */ <br>BOOL SetSpriteSwitchType( HSPRITE *hSprite, SWITCHING switchType ) <br>{ <br>    hSprite-&gt;switchType = switchType; <br>    hSprite-&gt;relSwitch  = 0; <br>    return TRUE; <br> <br>} /* SetSpriteSwitchType */ <br> <br> <br>/* <br> * GetSpriteSwitchType <br> */ <br>SWITCHING GetSpriteSwitchType ( HSPRITE *hSprite ) <br>{ <br>    return hSprite-&gt;switchType; <br> <br>} /* GetSpriteSwitchType */ <br> <br>/* <br> * SetSpriteSwitchForward <br> */ <br>BOOL SetSpriteSwitchForward( HSPRITE *hSprite, BOOL switchForward ) <br>{ <br>    hSprite-&gt;switchForward = switchForward; <br> <br>    return TRUE; <br> <br>} /* SetSpriteSwitchForward */ <br> <br>/* <br> * GetSpriteSwitchForward <br> */ <br>BOOL GetSpriteSwitchForward( HSPRITE *hSprite ) <br>{ <br>    return hSprite-&gt;switchForward; <br> <br>} /* GetSpriteSwitchForward */ <br> <br>/* <br> * SetSpriteSwitchDone <br> */ <br>BOOL SetSpriteSwitchDone( HSPRITE *hSprite, BOOL switchDone ) <br>{ <br>    hSprite-&gt;switchDone = switchDone; <br>    return TRUE; <br> <br>} /* SetSpriteSwitchDone */ <br> <br> <br>/* <br> * GetSpriteSwitchDone <br> */ <br>BOOL GetSpriteSwitchDone( HSPRITE *hSprite ) <br>{ <br>    return hSprite-&gt;switchDone; <br> <br>} /* GetSpriteSwitchDone */ <br> <br>/* <br> * SetSpriteBitmap <br> */ <br>BOOL SetSpriteBitmap ( HSPRITE *hSprite, USHORT currentBitmap ) <br>{ <br>    USHORT c; <br> <br>    c = 0; <br>    while( (hSprite-&gt;currentAction != hSprite-&gt;hSBM[c].action) || <br>           (hSprite-&gt;currentDirection != hSprite-&gt;hSBM[c].direction) ) <br>    { <br>        ++c; <br>    } <br>    hSprite-&gt;currentBitmap = c + currentBitmap; <br>    return TRUE; <br> <br>} /* SetSpriteBitmap */ <br> <br>/* <br> * GetSpriteBitmap <br> */ <br>USHORT GetSpriteBitmap( HSPRITE *hSprite ) <br>{ <br>    USHORT count; <br> <br>    count = 0; <br>    while( (hSprite-&gt;currentAction != hSprite-&gt;hSBM[count].action) || <br>       (hSprite-&gt;currentDirection != hSprite-&gt;hSBM[count].direction) ) <br>    { <br>        ++count; <br>    } <br>    return hSprite-&gt;currentBitmap - count; <br> <br>} /* GetSpriteBitmap */ <br> <br>/* <br> * advanceSpriteBitmap <br> */ <br>static BOOL advanceSpriteBitmap( HSPRITE *hSprite ) <br>{ <br>    SHORTc; <br>    SHORTn; <br>    ACTIONcurAct; <br>    ACTIONact; <br>    DIRECTIONcurDir; <br>    DIRECTIONdir; <br> <br>    curAct = hSprite-&gt;currentAction; <br>    curDir = hSprite-&gt;currentDirection; <br> <br>// <br>// See if we're cycling forward or backward though the images. <br>// <br>    if( hSprite-&gt;switchForward ) // Are we cycling forward? <br>    { <br>        c   = hSprite-&gt;currentBitmap + 1; <br> <br>// Does the next image exceed the number of images we have? <br>        if( c &gt;= hSprite-&gt;bitmapCount ) <br>{ <br>// if the next image is past the end of the list, <br>// we need to set it to the start of the series. <br>            SetSpriteBitmap( hSprite, 0 ); <br>c   = hSprite-&gt;currentBitmap; <br>        } <br>else <br>{ <br>act = hSprite-&gt;hSBM[c].action; <br>dir = hSprite-&gt;hSBM[c].direction; <br> <br>// By examining the action and direction fields we can tell <br>// if we've past the current series of images and entered  <br>// another series. <br>if( (curAct != act) || (curDir != dir) ) <br>{ <br>SetSpriteBitmap( hSprite, 0 ); <br>}  <br>else // We're still in the series, use the next image. <br>{ <br>hSprite-&gt;currentBitmap = c; <br>} <br>} <br>    } <br>else //cycling backwards <br>{ <br>        c   = hSprite-&gt;currentBitmap - 1; <br> <br>        if( c &lt; 0 ) // Is the next image past the beginning of the list? <br>{ <br>            n = 0; <br> <br>// Find the last bitmap in the series <br>            while( (n &lt;= hSprite-&gt;bitmapCount) &amp;&amp; <br>       (curAct == hSprite-&gt;hSBM[n].action) &amp;&amp; <br>           (curDir == hSprite-&gt;hSBM[n].direction) ) <br>{ <br>++n; <br>} <br> <br>            hSprite-&gt;currentBitmap = n - 1; <br>        } <br> <br>else <br>{ <br>act = hSprite-&gt;hSBM[c].action; <br>dir = hSprite-&gt;hSBM[c].direction; <br>// Is the next image past the of the series <br>if( (curAct != act) || (curDir != dir) )  <br>{ <br>n = c + 1; <br>while( (n &lt;= hSprite-&gt;bitmapCount) &amp;&amp; <br>   (curAct == hSprite-&gt;hSBM[n].action) &amp;&amp; <br>       (curDir == hSprite-&gt;hSBM[n].direction) ) <br>{ <br>++n; <br>} <br> <br>hSprite-&gt;currentBitmap = n - 1; <br>} <br>else  // The next image is fine, use it. <br>{ <br>hSprite-&gt;currentBitmap = c; <br>} <br>} <br>    } <br>    return TRUE; <br> <br>} /* advanceSpriteBitmap */ <br> <br>/* <br> * DisplaySprite <br> */ <br>BOOL DisplaySprite ( GFX_HBM hBuffer, HSPRITE *hSprite, LONG xPlane ) <br>{ <br>    USHORTcount; <br>    SHORTleft; <br>    SHORTright; <br>    SHORTshortx; <br>    SHORTshorty; <br>    SHORTplanex; <br>    POINT       src; <br>    RECT        dst; <br> <br>    if( hSprite-&gt;active == FALSE ) <br>    { <br>        return FALSE; <br>    } <br> <br>    count = hSprite-&gt;currentBitmap; <br>    shortx = (SHORT) (hSprite-&gt;x &gt;&gt; 16); <br>    shorty = (SHORT) (hSprite-&gt;y &gt;&gt; 16); <br>    planex = (SHORT) (xPlane &gt;&gt; 16); <br>    src.x = 0; <br>    src.y = 0; <br> <br>    if( shortx &lt; planex - C_SCREEN_W ) <br>    { <br>        shortx += hSprite-&gt;xmax; <br>    } <br>    else if( shortx &gt;= planex + C_SCREEN_W ) <br>    { <br>        shortx -= hSprite-&gt;xmax; <br>    } <br> <br>    left = shortx - planex; <br>     <br>    if( hSprite-&gt;currentDirection == RIGHT ) <br>    { <br>        left += hSprite-&gt;hSBM[count].x; <br>    } <br>    else <br>    { <br>        left += hSprite-&gt;width - hSprite-&gt;hSBM[count].x - hSprite-&gt;hSBM[count].width; <br>    } <br> <br>    right = left + hSprite-&gt;hSBM[count].width; <br> <br>    if( left &gt; C_SCREEN_W ) <br>    { <br>        left = C_SCREEN_W; <br>    } <br>    else if( left &lt; 0 ) <br>    { <br>        src.x = -left; <br>        left = 0; <br>    } <br> <br>    if( right &gt; C_SCREEN_W ) <br>    { <br>        right = C_SCREEN_W; <br>    } <br>    else if( right &lt; 0 ) <br>    { <br>        right = 0; <br>    } <br> <br>    dst.left   = left; <br>    dst.right  = right; <br>    dst.top    = shorty + hSprite-&gt;hSBM[count].y; <br>    dst.bottom = dst.top + hSprite-&gt;hSBM[count].height; <br> <br>    gfxBlt(&amp;dst,hSprite-&gt;hSBM[count].hBM,&amp;src); <br> <br>    if( hSprite-&gt;switchType == HOR ) <br>    { <br>        hSprite-&gt;relSwitch += abs(hSprite-&gt;xv); <br> <br>        if( hSprite-&gt;relSwitch &gt;= hSprite-&gt;absSwitch ) <br>{ <br>            hSprite-&gt;relSwitch = 0; <br>            advanceSpriteBitmap( hSprite ); <br>        } <br>    } <br>    else if( hSprite-&gt;switchType == VER ) <br>    { <br>        hSprite-&gt;relSwitch += abs(hSprite-&gt;yv); <br> <br>        if( hSprite-&gt;relSwitch &gt;= hSprite-&gt;absSwitch ) <br>    { <br>            hSprite-&gt;relSwitch = 0; <br>            advanceSpriteBitmap( hSprite ); <br> <br>            if( GetSpriteBitmap( hSprite ) == 0 ) <br>        { <br>                SetSpriteSwitchDone( hSprite, TRUE ); <br>            } <br>        } <br>    } <br>    else if( hSprite-&gt;switchType == TIME ) <br>    { <br>        hSprite-&gt;relSwitch += C_UNIT; <br> <br>        if( hSprite-&gt;relSwitch &gt;= hSprite-&gt;absSwitch ) <br>    { <br>            hSprite-&gt;relSwitch = 0; <br>            advanceSpriteBitmap( hSprite ); <br>             <br>            if( GetSpriteBitmap( hSprite ) == 0 ) <br>        { <br>                SetSpriteSwitchDone( hSprite, TRUE ); <br>            } <br>        } <br>    } <br> <br>    return TRUE; <br> <br>} /* DisplaySprite */ <br> <br>/* <br> * DestroySprite <br> */ <br>BOOL DestroySprite ( HSPRITE *hSprite ) <br>{ <br>    USHORT i; <br> <br>    if( hSprite == NULL ) <br>    { <br>        ErrorMessage( "hSprite in DestroySprite" ); <br>    } <br> <br>    if( hSprite-&gt;hSBM == NULL ) <br>    { <br>        ErrorMessage( "hSprite-&gt;hSBM in DestroySprite" ); <br>    } <br> <br>    for( i = 0; i &lt; hSprite-&gt;bitmapCount; ++i ) <br>    { <br>        if( !gfxDestroyBitmap( hSprite-&gt;hSBM[i].hBM ) ) <br>    { <br>            ErrorMessage( "gfxDestroyBitmap (hBM) in DestroySprite" ); <br>        } <br>    } <br> <br>    MemFree( hSprite-&gt;hSBM ); <br>    MemFree( hSprite ); <br> <br>    return TRUE; <br> <br>} /* DestroySprite */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

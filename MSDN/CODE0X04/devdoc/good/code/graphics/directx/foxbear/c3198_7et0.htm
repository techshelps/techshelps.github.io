<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FOXBEAR.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3204"></a>FOXBEAR.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> *  Copyright (C) 1994-1995 ATI Technologies Inc. All Rights Reserved. <br> * <br> *  File:foxbear.h <br> *  Content:main include file <br> * <br> ***************************************************************************/ <br>#ifndef __FOXBEAR_INCLUDED__ <br>#define __FOXBEAR_INCLUDED__ <br> <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt;  <br>#include &lt;mmsystem.h&gt; <br>#include &lt;ddraw.h&gt; <br>#include &lt;dsound.h&gt; <br>#include "gfx.h" <br>#include "fbsound.h" <br>#include "gameproc.h" <br>#include "fastfile.h" <br>#include "dsutil.h" <br> <br>int getint(char**p, int def); <br> <br>#define QUOTE(x) #x <br>#define QQUOTE(y) QUOTE(y) <br>#define REMIND(str) __FILE__ "(" QQUOTE(__LINE__) "):" str <br> <br>/* <br> * keyboard commands <br> */ <br>enum <br>{ <br>    KEY_STOP = 1, <br>    KEY_DOWN, <br>    KEY_LEFT, <br>    KEY_RIGHT, <br>    KEY_UP, <br>    KEY_JUMP, <br>    KEY_THROW <br>}; <br> <br>/* <br> * global data <br> */ <br>extern LPDIRECTDRAWlpDD; <br>extern LPDIRECTDRAW2lpDD2; <br>extern LPDIRECTDRAWSURFACElpFrontBuffer; <br>extern LPDIRECTDRAWSURFACElpBackBuffer; <br>extern LPDIRECTDRAWSURFACE      lpStretchBuffer; <br>extern LPDIRECTDRAWCLIPPER      lpClipper; <br>extern DWORDlastKey; <br>extern BOOL                     bModeX;     // we are in a modex mode <br>extern BOOL                     bColorFill;     // device supports color fill <br>extern BOOL                     bTransDest;     // we should use dest color key <br>extern BOOL                     bColorFill;     // device supports color fill <br>extern int                      nBufferCount;   // buffer count <br>extern int                      CmdLineBufferCount;   // buffer count <br>extern BOOL                     bStretch;       // stretch <br>extern BOOL                     bFullscreen;    // run in fullscreen mode <br>extern BOOL                     bStress;        // just keep running <br>extern BOOL                     bUseEmulation;  // dont use HW use SW <br>extern RECT                     GameRect;       // game is here <br>extern SIZE                     GameSize;       // game is this size <br>extern SIZE                     GameMode;       // display mode size <br>extern UINT                     GameBPP;        // the bpp we want <br>extern DWORD                    dwColorKey;     // the color key <br>extern HWND                     hWndMain;       // the foxbear window <br>extern RECT                     rcWindow;       // where the FoxBear window is. <br>extern BOOL                     bIsActive;      // we are the active app. <br>extern BOOL                     bPaused;        // <br>extern BOOLbWantSound;     // Set the default action in DSEnable <br> <br>/* <br> * list of display modes <br> */ <br>struct {int w, <br>            h, <br>            bpp;  <br>        DWORD dwFlags; <br>} ModeList[100]; <br> <br>int NumModes; <br> <br>/* <br> * map a point that assumes 640x480 to the current game size. <br> */ <br>#define MapDX(x) (((x) * GameSize.cx) / C_SCREEN_W) <br>#define MapDY(y) (((y) * GameSize.cy) / C_SCREEN_H) <br>#define MapX(x)  (GameRect.left + MapDX(x)) <br>#define MapY(y)  (GameRect.top  + MapDY(y)) <br>#define MapRX(x) ((GameSize.cx == C_SCREEN_W) ? x : MapDX(x)+1) <br>#define MapRY(y) ((GameSize.cy == C_SCREEN_H) ? y : MapDY(y)+1) <br> <br>void PauseGame(void); <br>void UnPauseGame(void); <br> <br> <br>/* <br> * fn prototypes <br> */ <br>/* ddraw.c */ <br>extern BOOL DDInit( void ); <br>extern BOOL DDEnable( void ); <br>extern BOOL DDDisable( BOOL ); <br>extern LPDIRECTDRAWSURFACE DDCreateSurface( DWORD width, DWORD height, BOOL sysmem, BOOL trans ); <br>extern BOOL DDCreateFlippingSurface( void ); <br>extern BOOL DDClear( void ); <br>extern DWORD DDColorMatch(IDirectDrawSurface *pdds, COLORREF rgb); <br>extern void Splash( void ); <br> <br>extern LPVOID CMemAlloc( UINT cnt, UINT isize ); <br>extern LPVOID MemAlloc( UINT size ); <br>extern void   MemFree( LPVOID ptr ); <br> <br>extern void __cdecl Msg( LPSTR fmt, ... ); <br> <br>LPDIRECTDRAWPALETTE ReadPalFile( char *fname ); <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

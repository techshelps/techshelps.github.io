<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3161"></a>README.TXT</h2>
<pre><code>FastFile <br>-------- <br>FastFile provides a way to create a very fast way to access large numbers <br>of files. <br> <br>You use FFCREATE.EXE to create a single flat file.   Just run FFCREATE in <br>the directory that contains all of the files you wish to access.   A file <br>will be created at the root (RESULT.FF) that is the FastFile.  (you can  <br>specify a filename on the command line to override the default of RESULT.FF; <br>if you do so, make sure that the result file is NOT generated in the <br>current directory). <br> <br>Once you have created your FastFile, you can use the FastFile routines to <br>access it: <br> <br>BOOL FastFileInit( LPSTR fname, int max_handles ): <br>Call to initialize access to a FastFile. <br>    fname      : name of FastFile <br>    max_handles: maximum number of file handles you want to have open at the <br> same time. <br>    returns TRUE if succeeds, FALSE otherwise <br> <br>void FastFileFini( void ): <br>Call when you are finished accessing your FastFile <br> <br>HFASTFILE FastFileOpen( LPSTR name ): <br>Call to open an individual file in a FastFile (read-only access is supported) <br>    name: name if individual file <br>    returns a handle, or NULL if fail <br>     <br>BOOL FastFileClose( HFASTFILE hff ): <br>Call to close an individual file  <br>    hff: handle to an individual file <br>    returns TRUE if succeeded, FALSE otherwise <br>     <br>BOOL FastFileRead( HFASTFILE hff, LPVOID ptr, int size ) <br>Call to read from an individual file <br>    hff:  handle to an individual file <br>    ptr:  buffer to copy data <br>    size: size of data to copy <br>    returns TRUE if succeeded, FALSE otherwise <br>     <br>BOOL FastFileSeek( HFASTFILE hff, int off, int type ) <br>Call to seek to an offset in an individual file <br>    hff:  handle to an individual file <br>    off:  offset to seek to <br>    type: seek type: SEEK_SET (from start), SEEK_CUR (from current pos), <br>      or SEEK_END (from end) <br>    returns TRUE if succeeded, FALSE otherwise <br>     <br>long FastFileTell( HFASTFILE hff ) <br>Call to get the current position in an individual file <br>    hff:  handle to an individual file <br>    returns current position if succeeded, -1 otherwise </code></pre>
<p>&nbsp;</p></body>
</HTML>

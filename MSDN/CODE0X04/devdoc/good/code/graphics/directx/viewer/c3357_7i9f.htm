<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SEL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3363"></a>SEL.CPP</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995, 1996 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File: sel.cpp <br> * <br> ***************************************************************************/ <br> <br>#include &lt;math.h&gt; <br>#include &lt;d3drmwin.h&gt; <br>#include "sel.h" <br>#include "rodcone.h" <br>#include "viewer.h" <br> <br>static int showBoxes = FALSE; <br>static LPDIRECT3DRMFRAME sFrame = NULL; <br>static LPDIRECT3DRMVISUAL sVisual = NULL; <br>static LPDIRECT3DRMLIGHT sLight = NULL; <br>static LPDIRECT3DRMMESH selectionBox = NULL; <br>static LPDIRECT3DRMMESHBUILDER makeBox(D3DRMBOX*); <br> <br>LPDIRECT3DRMFRAME clipboardFrame = NULL; <br>LPDIRECT3DRMVISUAL clipboardVisual = NULL; <br> <br>void ShowBoxes(int show) <br>{ <br>    showBoxes = show; <br>    SelectVisual(sVisual, sFrame); <br>} <br> <br>int ToggleBoxes() <br>{ <br>    ShowBoxes(!showBoxes); <br>    return showBoxes; <br>} <br> <br>LPDIRECT3DRMFRAME SelectedFrame() <br>{ <br>    return sFrame; <br>} <br> <br>LPDIRECT3DRMVISUAL SelectedVisual() <br>{ <br>    return sVisual; <br>} <br> <br>LPDIRECT3DRMLIGHT SelectedLight() <br>{ <br>    return sLight; <br>} <br> <br>void DeselectVisual() <br>{ <br>    if (sFrame &amp;&amp; selectionBox) <br>sFrame-&gt;DeleteVisual(selectionBox); <br>    sFrame = NULL; <br>    sVisual = NULL; <br>    selectionBox = NULL; <br>} <br> <br>void SelectVisual(LPDIRECT3DRMVISUAL visual, LPDIRECT3DRMFRAME frame) <br>{ <br>    DeselectVisual(); <br>    sVisual = visual; <br>    sFrame = frame; <br> <br>    if (sVisual) <br>    {LPDIRECT3DRMLIGHTARRAY lights; <br> <br>sLight = 0; <br>sFrame-&gt;GetLights(&amp;lights); <br>if (lights) <br>{   if (lights-&gt;GetSize()) <br>    {lights-&gt;GetElement(0, &amp;sLight); <br>sLight-&gt;Release(); /* reinstate reference count */ <br>    } <br>    lights-&gt;Release(); <br>} <br> <br>if (showBoxes &amp;&amp; visual) <br>{   D3DRMBOX box; <br>    LPDIRECT3DRMMESHBUILDER lpMeshVis; <br>    LPDIRECT3DRMPROGRESSIVEMESH lpProgMeshVis; <br>    LPDIRECT3DRMMESHBUILDER builder; <br> <br>    if (SUCCEEDED(visual-&gt;QueryInterface(IID_IDirect3DRMProgressiveMesh, <br> (LPVOID*) &amp;lpProgMeshVis))) <br>    { <br>lpProgMeshVis-&gt;GetBox(&amp;box); <br>lpProgMeshVis-&gt;Release(); <br>    } <br> <br>    if (SUCCEEDED(visual-&gt;QueryInterface(IID_IDirect3DRMMeshBuilder, <br>     (LPVOID*) &amp;lpMeshVis))) <br>    {    <br>lpMeshVis-&gt;GetBox(&amp;box); <br>lpMeshVis-&gt;Release(); <br>    } <br>    builder = makeBox(&amp;box); <br>    builder-&gt;CreateMesh(&amp;selectionBox); <br>    sFrame-&gt;AddVisual(selectionBox); <br>    selectionBox-&gt;Release(); <br>} <br>    } <br>} <br> <br>void SelectPM(LPDIRECT3DRMPROGRESSIVEMESH lpPM) <br>{ <br>    float fVal; <br>    HRESULT hres; <br>    HWND win = active_window-&gt;win; <br> <br>    if (!lpPM) <br>    { <br>if (active_window-&gt;lpPM) <br>{ <br>    active_window-&gt;lpPM-&gt;Release(); <br>    active_window-&gt;lpPM = NULL; <br>    EnableScrollBar(win, SB_VERT, ESB_DISABLE_BOTH); <br>} <br>return; <br>    } <br>     <br>    lpPM-&gt;AddRef(); <br>     <br>    if (active_window-&gt;lpPM) <br>    { <br>active_window-&gt;lpPM-&gt;Release(); <br>    } <br> <br>    active_window-&gt;lpPM = lpPM; <br> <br>    hres = lpPM-&gt;GetDetail(&amp;fVal); <br>    if (SUCCEEDED(hres)) <br>    { <br>SetScrollPos(win, SB_VERT, (DWORD)(100.0 - (DWORD)(fVal * 100.0)), TRUE); <br>gfVal = fVal; <br>    } <br>     <br>    EnableScrollBar(win, SB_VERT, ESB_ENABLE_BOTH); <br>} <br> <br>void FindAndSelectVisual(LPDIRECT3DRMVIEWPORT view, int x, int y) <br>{ <br>    LPDIRECT3DRMVISUAL visual; <br>    LPDIRECT3DRMFRAME frame; <br>    LPDIRECT3DRMPICKEDARRAY picked; <br>    LPDIRECT3DRMFRAMEARRAY frames; <br>    LPDIRECT3DRMMESHBUILDER mesh; <br> <br>    /* <br>     * Make sure we don't try to select the selection box of the current <br>     * selection. <br>     */ <br>    DeselectVisual(); <br> <br>    view-&gt;Pick(x, y, &amp;picked); <br>    if (picked) <br>    {if (picked-&gt;GetSize()) <br>{ <br>    LPDIRECT3DRMPROGRESSIVEMESH pm; <br> <br>    picked-&gt;GetPick(0, &amp;visual, &amp;frames, 0); <br>    frames-&gt;GetElement(frames-&gt;GetSize() - 1, &amp;frame); <br> <br>    if (SUCCEEDED(visual-&gt;QueryInterface(IID_IDirect3DRMProgressiveMesh, <br> (LPVOID*) &amp;pm))) { <br>SelectPM(pm); <br>        pm-&gt;Release(); <br>        SelectVisual(pm, frame); <br>    } <br> <br>    if (SUCCEEDED(visual-&gt;QueryInterface(IID_IDirect3DRMMeshBuilder, (void **) &amp;mesh))) <br>    {    <br>SelectPM(NULL); <br>SelectVisual(mesh, frame); <br>mesh-&gt;Release(); <br>    } <br> <br>    frame-&gt;Release(); <br>    frames-&gt;Release(); <br>    visual-&gt;Release(); <br>} <br>picked-&gt;Release(); <br>    } <br>} <br> <br>void CutVisual() <br>{ <br>    LPDIRECT3DRMFRAME frame; <br> <br>    if (clipboardFrame) <br>clipboardFrame-&gt;Release(); <br> <br>    if (sFrame) { <br>clipboardFrame = sFrame; <br>clipboardVisual = sVisual; <br> <br>DeselectVisual(); <br> <br>clipboardFrame-&gt;AddRef(); <br>clipboardFrame-&gt;GetParent(&amp;frame); <br>if (frame) { <br>    frame-&gt;DeleteChild(clipboardFrame); <br>    frame-&gt;Release(); <br>} <br>    } <br>} <br> <br>void CopyVisual() <br>{ <br>    LPDIRECT3DRMFRAME frame; <br> <br>    if (clipboardFrame) <br>clipboardFrame-&gt;Release(); <br> <br>    if (sFrame) { <br>sFrame-&gt;Clone(0, IID_IDirect3DRMFrame, (void **) &amp;clipboardFrame); <br>sVisual-&gt;Clone(0, IID_IDirect3DRMVisual, (void **) &amp;clipboardVisual); <br> <br>clipboardFrame-&gt;AddVisual(clipboardVisual); <br>clipboardVisual-&gt;Release(); <br> <br>clipboardFrame-&gt;GetParent(&amp;frame); <br>if (frame) { <br>    frame-&gt;DeleteChild(clipboardFrame); <br>    frame-&gt;Release(); <br>} <br>    } <br>} <br> <br>void PasteVisual(LPDIRECT3DRMFRAME scene) <br>{ <br>    if (clipboardFrame) <br>    { <br>LPDIRECT3DRMFRAME frame; <br>LPDIRECT3DRMVISUAL visual; <br> <br>clipboardFrame-&gt;Clone(0, IID_IDirect3DRMFrame, (void **) &amp;frame); <br>clipboardVisual-&gt;Clone(0, IID_IDirect3DRMVisual, (void **) &amp;visual); <br> <br>frame-&gt;AddVisual(visual); <br>scene-&gt;AddChild(frame); <br>visual-&gt;Release(); <br>frame-&gt;Release(); <br>    } <br>} <br> <br>void DeleteVisual() <br>{ <br>    if (sFrame) <br>    { <br>LPDIRECT3DRMFRAME parent, frame = sFrame; <br> <br>DeselectVisual(); <br>SelectPM(NULL); <br>frame-&gt;GetParent(&amp;parent); <br>parent-&gt;DeleteChild(frame); <br>parent-&gt;Release(); <br>    } <br>} <br> <br>void ClearClipboard() <br>{ <br>    if (clipboardFrame) <br>clipboardFrame-&gt;Release(); <br>} <br> <br>static LPDIRECT3DRMMESHBUILDER makeBox(D3DRMBOX* box) <br>{ <br>    LPDIRECT3DRMMESHBUILDER2 mesh; <br>    static D3DVECTOR zero = {D3DVAL(0.0), D3DVAL(0.0), D3DVAL(0.0)}; <br>    static D3DVECTOR dir = {D3DVAL(0.0), D3DVAL(0.0), D3DVAL(0.0)}; <br>    D3DVECTOR a, b; <br> <br>    lpD3DRM-&gt;CreateMeshBuilder(&amp;mesh); <br> <br>    dir.z = box-&gt;max.z + D3DVAL(1.0); <br>    AddRod(mesh, D3DVAL(0.05), zero, dir); <br>    a = dir; <br>    a.z += D3DVAL(0.6); <br>    AddCone(mesh, D3DVAL(0.2), dir, a); <br>    a = box-&gt;min; <br>    b = a; <br>    b.y = box-&gt;max.y; <br>    AddRod(mesh, D3DVAL(0.05), a, b); <br>    a = b; b.x = box-&gt;max.x; <br>    AddRod(mesh, D3DVAL(0.05), a, b); <br>    a = b; b.y = box-&gt;min.y; <br>    AddRod(mesh, D3DVAL(0.05), a, b); <br>    a = b; b.x = box-&gt;min.x; <br>    AddRod(mesh, D3DVAL(0.05), a, b); <br>    a = b; b.z = box-&gt;max.z; <br>    AddRod(mesh, D3DVAL(0.05), a, b); <br>    a = b; b.x = box-&gt;max.x; <br>    AddRod(mesh, D3DVAL(0.05), a, b); <br>    a = b; b.y = box-&gt;max.y; <br>    AddRod(mesh, D3DVAL(0.05), a, b); <br>    a = b; b.x = box-&gt;min.x; <br>    AddRod(mesh, D3DVAL(0.05), a, b); <br>    a = b; b.y = box-&gt;min.y; <br>    AddRod(mesh, D3DVAL(0.05), a, b); <br>    b.y = box-&gt;max.y; a = b; b.z = box-&gt;min.z; <br>    AddRod(mesh, D3DVAL(0.05), a, b); <br>    a = b = box-&gt;max; b.z = box-&gt;min.z; <br>    AddRod(mesh, D3DVAL(0.05), a, b); <br>    a.y = box-&gt;min.y; b = a; b.z = box-&gt;min.z; <br>    AddRod(mesh, D3DVAL(0.05), a, b); <br> <br>    mesh-&gt;SetColor(D3DRMCreateColorRGB(D3DVAL(1.0), D3DVAL(1.0), D3DVAL(1.0))); <br>    return mesh; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

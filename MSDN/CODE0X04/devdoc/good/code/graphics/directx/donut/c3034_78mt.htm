<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DONUT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3035"></a>DONUT.CPP</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       donut.cpp <br> * <br> ***************************************************************************/ <br> <br>#define NAME "Donut" <br>#define TITLE "Donut" <br> <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;ddraw.h&gt; <br>#include "resource.h" <br>#include "ddutil.h" <br> <br>char szBitmap[] = "DONUT"; <br> <br>int             gPos = 0; <br>BOOL            gExclusive = FALSE; <br>int             gMode = 0; <br>HWND            hwnd; <br> <br>LPDIRECTDRAW            lpDD;           // DirectDraw object <br>LPDIRECTDRAWSURFACE     lpDDSPrimary;   // DirectDraw primary surface <br>LPDIRECTDRAWSURFACE     lpDDSOne;       // Offscreen surface 1 <br>LPDIRECTDRAWSURFACE     lpDDSTwo;       // Offscreen surface 2 <br>LPDIRECTDRAWPALETTE     lpDDPal;        // DirectDraw palette <br>BOOL                    bActive;        // is application active? <br> <br>/* <br> * restoreAll <br> * <br> * restore all lost objects <br> */ <br>HRESULT restoreAll( void ) <br>{ <br>    HRESULT     ddrval; <br> <br>    ddrval = lpDDSPrimary-&gt;Restore(); <br>    if( ddrval == DD_OK ) <br>    { <br>ddrval = lpDDSOne-&gt;Restore(); <br>if( ddrval == DD_OK ) <br>{ <br>    ddrval = lpDDSTwo-&gt;Restore(); <br>    if( ddrval == DD_OK ) <br>    { <br>DDReLoadBitmap(lpDDSOne, szBitmap); <br>    } <br>} <br>    } <br>    return ddrval; <br> <br>} /* restoreAll */ <br> <br>/* <br> * updateFrame <br> *  <br> * Decide what needs to be blitted next, wait for flip to complete, <br> * then flip the buffers. <br> */ <br>void updateFrame( void ) <br>{ <br>    static DWORD        lastTickCount = 0; <br>    static int          currentFrame = 0; <br>    static BOOL         haveBackground = FALSE; <br>    DWORD               thisTickCount; <br>    RECT                rcRect; <br>    DWORD               delay = 17; <br>    HRESULT             ddrval; <br>    int                 pos; <br> <br>    thisTickCount = GetTickCount(); <br>    if((thisTickCount - lastTickCount) &lt;= delay) <br>    { <br>return; <br>    } <br> <br>    switch( gPos ) <br>    { <br>case 0: pos = 0; break; <br>case 1: pos = 64; break; <br>case 2: pos = 128; break; <br>    } <br>    rcRect.left = 0; <br>    rcRect.top = 0; <br>    rcRect.right = 64; <br>    rcRect.bottom = 64; <br> <br>    // restore a previously saved patch <br>    while( haveBackground ) <br>    { <br>ddrval = lpDDSPrimary-&gt;BltFast( pos, 0, lpDDSTwo, &amp;rcRect, FALSE ); <br>if( ddrval == DD_OK ) <br>{ <br>    haveBackground = TRUE; <br>    break; <br>} <br>if( ddrval == DDERR_SURFACELOST ) <br>{ <br>    ddrval = restoreAll(); <br>    if( ddrval != DD_OK ) <br>    { <br>return; <br>    } <br>} <br>if( ddrval != DDERR_WASSTILLDRAWING ) <br>{ <br>    return; <br>} <br>    } <br> <br>    rcRect.left = pos; <br>    rcRect.right = pos+64; <br>    // Save the current primary surface that we are about to overwrite <br>    while( 1 ) <br>    { <br>haveBackground = FALSE; <br>ddrval = lpDDSTwo-&gt;BltFast( 0, 0, lpDDSPrimary, <br>    &amp;rcRect, DDBLTFAST_NOCOLORKEY); <br> <br>if( ddrval == DD_OK ) <br>{ <br>    haveBackground = TRUE; <br>    break; <br>} <br>if( ddrval == DDERR_SURFACELOST ) <br>{ <br>    ddrval = restoreAll(); <br>    if( ddrval != DD_OK ) <br>    { <br>return; <br>    } <br>} <br>if( ddrval != DDERR_WASSTILLDRAWING ) <br>{ <br>    return; <br>} <br>    } <br>     <br>    thisTickCount = GetTickCount(); <br>    if((thisTickCount - lastTickCount) &gt; delay) <br>    { <br>// Move to next frame; <br>lastTickCount = thisTickCount; <br>currentFrame++; <br>if(currentFrame &gt; 59) <br>{ <br>    currentFrame = 0; <br>} <br>    } <br> <br>    // Blit the stuff for the next frame <br>    rcRect.left   = currentFrame%10*64; <br>    rcRect.top    = currentFrame/10*64; <br>    rcRect.right  = currentFrame%10*64 + 64; <br>    rcRect.bottom = currentFrame/10*64 + 64; <br> <br>    while( 1 ) <br>    { <br>ddrval = lpDDSPrimary-&gt;BltFast( pos, 0, lpDDSOne, <br>    &amp;rcRect, DDBLTFAST_SRCCOLORKEY); <br> <br>if( ddrval == DD_OK ) <br>{ <br>    break; <br>} <br>if( ddrval == DDERR_SURFACELOST ) <br>{ <br>    ddrval = restoreAll(); <br>    if( ddrval != DD_OK ) <br>    { <br>return; <br>    } <br>} <br>if( ddrval != DDERR_WASSTILLDRAWING ) <br>{ <br>    return; <br>} <br>    } <br>    if(ddrval != DD_OK) <br>    { <br>return; <br>    } <br>} /* updateFrame */ <br> <br> <br>/* <br> * finiObjects <br> * <br> * finished with all objects we use; release them <br> */ <br>static void finiObjects( void ) <br>{ <br>    if( lpDD != NULL ) <br>    { <br>if( lpDDSPrimary != NULL ) <br>{ <br>    lpDDSPrimary-&gt;Release(); <br>    lpDDSPrimary = NULL; <br>} <br>if( lpDDSOne != NULL ) <br>{ <br>    lpDDSOne-&gt;Release(); <br>    lpDDSOne = NULL; <br>} <br>if( lpDDPal != NULL ) <br>{ <br>    lpDDPal-&gt;Release(); <br>    lpDDPal = NULL; <br>} <br>lpDD-&gt;Release(); <br>lpDD = NULL; <br>    } <br>    // Clean up the screen on exit <br>    RedrawWindow( NULL, NULL, NULL, RDW_INVALIDATE | RDW_ERASE | <br>     RDW_ALLCHILDREN ); <br> <br>} /* finiObjects */ <br> <br>long FAR PASCAL WindowProc( HWND hWnd, UINT message,  <br>    WPARAM wParam, LPARAM lParam ) <br>{ <br>    hwnd = hWnd; <br>    switch( message ) <br>    { <br>    case WM_ACTIVATEAPP: <br>bActive = wParam; <br>break; <br> <br>    case WM_SETCURSOR: <br>SetCursor(NULL); <br>return TRUE; <br> <br>    case WM_PALETTECHANGED: <br>if ((HWND)wParam == hWnd) <br>    break; <br>// fall through to WM_QUERYNEWPALETTE <br>    case WM_QUERYNEWPALETTE: <br>// install our palette here <br>if (lpDDPal) <br>{ <br>    lpDDSPrimary-&gt;SetPalette(lpDDPal); <br>} <br>DDReLoadBitmap(lpDDSOne, szBitmap); <br>break; <br> <br>    case WM_CREATE: <br>break; <br> <br>    case WM_KEYDOWN: <br>switch( wParam ) <br>{ <br>case VK_ESCAPE: <br>case VK_F12: <br>    PostMessage(hWnd,WM_CLOSE,0,0); <br>    break; <br>} <br>break; <br> <br>    case WM_DESTROY: <br>finiObjects(); <br>PostQuitMessage( 0 ); <br>break; <br>    } <br> <br>    return DefWindowProc(hWnd, message, wParam, lParam); <br> <br>} /* WindowProc */ <br> <br>/* <br> * This function is called if the initialization function fails <br> */ <br>BOOL initFail( HWND hwnd ) <br>{ <br>    finiObjects(); <br>    MessageBox( hwnd, "DirectDraw Init FAILED", TITLE, MB_OK ); <br>    DestroyWindow( hwnd ); <br>    return FALSE; <br> <br>} /* initFail */ <br> <br>/* <br> * doInit - do work required for every instance of the application: <br> *                create the window, initialize data <br> */ <br>static BOOL doInit( HINSTANCE hInstance, int nCmdShow ) <br>{ <br>    HWND                hwnd; <br>    WNDCLASS            wc; <br>    DDSURFACEDESC       ddsd; <br>    HRESULT             ddrval; <br> <br>    /* <br>     * set up and register window class <br>     */ <br>    wc.style = CS_HREDRAW | CS_VREDRAW; <br>    wc.lpfnWndProc = WindowProc; <br>    wc.cbClsExtra = 0; <br>    wc.cbWndExtra = 0; <br>    wc.hInstance = hInstance; <br>    wc.hIcon = LoadIcon( hInstance, IDI_APPLICATION ); <br>    wc.hCursor = LoadCursor( NULL, IDC_ARROW ); <br>    wc.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH); <br>    wc.lpszMenuName = NAME; <br>    wc.lpszClassName = NAME; <br>    RegisterClass( &amp;wc ); <br>     <br>    /* <br>     * create a window <br>     */ <br>    hwnd = CreateWindowEx( <br>0, <br>NAME, <br>TITLE, <br>WS_POPUP, <br>0, <br>0, <br>1, <br>1, <br>NULL, <br>NULL, <br>hInstance, <br>NULL ); <br> <br>    if( !hwnd ) <br>    { <br>return FALSE; <br>    } <br> <br>    ShowWindow( hwnd, nCmdShow ); <br>    UpdateWindow( hwnd ); <br> <br>    /* <br>     * create the main DirectDraw object <br>     */ <br>    ddrval = DirectDrawCreate( NULL, &amp;lpDD, NULL ); <br>    if( ddrval != DD_OK ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    // Get exclusive mode if requested <br>    if(gExclusive) <br>    { <br>ddrval = lpDD-&gt;SetCooperativeLevel( hwnd, DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN ); <br>    } <br>    else <br>    { <br>ddrval = lpDD-&gt;SetCooperativeLevel( hwnd, DDSCL_NORMAL ); <br>    } <br>    if( ddrval != DD_OK ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    // Set the video mode to 640x480x8 <br>    switch( gMode ) <br>    { <br>case 1:  ddrval = lpDD-&gt;SetDisplayMode( 640, 480, 8); break; <br>case 2:  ddrval = lpDD-&gt;SetDisplayMode( 800, 600, 8); break; <br>case 3:  ddrval = lpDD-&gt;SetDisplayMode( 1024, 768, 8); break; <br>case 4:  ddrval = lpDD-&gt;SetDisplayMode( 1280, 1024, 8); break; <br>    } <br>    if( ddrval != DD_OK ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    // Create the primary surface <br>    ddsd.dwSize = sizeof( ddsd ); <br>    ddsd.dwFlags = DDSD_CAPS; <br>    ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE; <br> <br>    ddrval = lpDD-&gt;CreateSurface( &amp;ddsd, &amp;lpDDSPrimary, NULL ); <br>    if( ddrval != DD_OK ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    lpDDPal = DDLoadPalette(lpDD, szBitmap); <br> <br>    if (lpDDPal) <br>    { <br>lpDDSPrimary-&gt;SetPalette(lpDDPal); <br>    } <br> <br>    lpDDSOne = DDLoadBitmap(lpDD, szBitmap, 0, 0); <br>    if( lpDDSOne == NULL ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    // set color key to black <br>    DDSetColorKey(lpDDSOne, RGB(0,0,0)); <br> <br>    ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH; <br>    ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN; <br>    ddsd.dwHeight = 64; <br>    ddsd.dwWidth = 64; <br>    ddrval = lpDD-&gt;CreateSurface( &amp;ddsd, &amp;lpDDSTwo, NULL ); <br>    if( ddrval != DD_OK ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    return TRUE; <br>} /* doInit */ <br> <br>/* <br> * WinMain - initialization, message loop <br> */ <br>int PASCAL WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, <br>LPSTR lpCmdLine, int nCmdShow) <br>{ <br>    MSG         msg; <br>    LPSTR       c; <br> <br>    for(c=lpCmdLine; *c != '\0'; c++) <br>    { <br>switch( *c ) <br>{ <br>    case '0': gPos = 0; break; <br>    case '1': gPos = 1; break; <br>    case '2': gPos = 2; break; <br>    case 'X': gExclusive = TRUE; break; <br>    case 'A': gExclusive = TRUE; gMode = 1; break; <br>    case 'B': gExclusive = TRUE; gMode = 2; break; <br>    case 'C': gExclusive = TRUE; gMode = 3; break; <br>    case 'D': gExclusive = TRUE; gMode = 4; break; <br>} <br>    } <br>     <br>    if( !doInit( hInstance, nCmdShow ) ) <br>    { <br>return FALSE; <br>    } <br> <br>    while( 1 ) <br>    { <br>if( PeekMessage( &amp;msg, NULL, 0, 0, PM_NOREMOVE ) ) <br>{ <br>    if( !GetMessage( &amp;msg, NULL, 0, 0 ) ) <br>return msg.wParam; <br>    TranslateMessage(&amp;msg);  <br>    DispatchMessage(&amp;msg); <br>} <br>else if( !gExclusive || bActive ) <br>{ <br>    updateFrame(); <br>} <br>else <br>{ <br>    WaitMessage(); <br>} <br>    } <br>} /* WinMain */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

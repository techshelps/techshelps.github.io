<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D3DWIN.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2988"></a>D3DWIN.H</h2>
<pre><code>#ifndef D3DWIN_H <br>#define D3DWIN_H <br>/* <br>**----------------------------------------------------------------------------- <br>**  Name:       D3DWin.h <br>**  Purpose:    Sample D3D framework <br>** <br>**Copyright (C) 1995 - 1997 Microsoft Corporation. All Rights Reserved. <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>/* <br>**----------------------------------------------------------------------------- <br>**  Includes <br>**----------------------------------------------------------------------------- <br>*/ <br>#include "Common.h" <br>#include "DrvMgr.h" <br> <br> <br>/* <br>**----------------------------------------------------------------------------- <br>**  Defines <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>// Windows messages <br>#define D3DWIN_GET_VALID    (WM_USER+1000) <br>#define D3DWIN_GET_POINTER  (WM_USER+1001) <br>#define D3DWIN_GET_SURFACE  (WM_USER+1002) <br> <br>#define D3DWIN_INIT  (WM_USER+2000) <br>#define D3DWIN_FINI  (WM_USER+2001) <br>#define D3DWIN_CHANGED_DRIVER  (WM_USER+2002) <br>#define D3DWIN_CHANGED_MODE  (WM_USER+2003) <br>#define D3DWIN_CHANGED_DEVICE  (WM_USER+2004) <br> <br>#define D3DWIN_MIN_SIZE     64 <br> <br> <br> <br>/* <br>**----------------------------------------------------------------------------- <br>**  Typedefs <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>class D3DScene;// Prevent having to include D3DScene.h <br>typedef D3DScene * LPD3DScene; <br> <br>class D3DWindow;                    // Forward declaration <br>typedef D3DWindow * LPD3DWindow; <br> <br> <br> <br>/* <br>**----------------------------------------------------------------------------- <br>**  Classes <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>/* <br>**----------------------------------------------------------------------------- <br>**  Name:       D3DWindow <br>**  Purpose:    Encapsulates D3D rendering info for a window <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>class D3DWindow { <br>protected: <br>// <br>    // Flags <br>// <br>    enum { <br>DWF_FULLSCREEN= 0x00000001, <br>        DWF_VISIBLE= 0x00000002, <br>        DWF_ZBUFFER= 0x00000004, <br>DWF_ACTIVE= 0x00000008, <br>    } Attributes; <br> <br>    enum { <br>        DWF_VALID_INTERFACE = 0x00000001, <br>DWF_VALID_FULLSCREEN= 0x00000002, <br>DWF_VALID_PRIMARY= 0x00000004, <br>DWF_VALID_RENDER    = 0x00000008, <br>DWF_VALID_VIEWPORT  = 0x00000010, <br>DWF_VALID_SCENE= 0x00000020, <br> <br>DWF_VALID    = 0x0000001F, // INTERFACE | FULLSCREEN | PRIMARY | RENDER | VIEWPORT <br>    } Validates; <br> <br> <br>public: <br> <br>// <br>    // Creation Methods <br>// <br>    D3DWindow (void); <br>    ~D3DWindow (void); <br> <br>HRESULT D3DWindow::Create ( <br>HWND   hWnd, <br>LPGUID lpDDGuid= NULL, <br>DWORD  dwW= 0L, <br>DWORD  dwH= 0L, <br>DWORD  dwBPP= 0L, <br>DWORD  dwRefresh= 0L, <br>LPGUID lpGuidD3D= NULL, <br>BOOL   fUseZBuffer= TRUE); <br>    HRESULT Init (void); <br>HRESULT Fini (void); <br> <br>// <br>    // Window Methods <br>    // <br>    HRESULT DrawFrame (void); <br> <br>    HRESULT Move (long x, long y); <br>    HRESULT Resize (DWORD w, DWORD h); <br> <br>HRESULT RealizePalette (void); <br> <br>HRESULT toGDI (void); <br>HRESULT fromGDI (void); <br> <br>    BOOL    isPaused (void)             { return (dwPaused != 0); } <br>    HRESULT Pause (BOOL fOn);       <br> <br>BOOL    isFullscreen (void){ return ((fValid &amp; DWF_VALID_FULLSCREEN) ? TRUE : FALSE); } <br> <br>    HRESULT Restore (void ); <br> <br>// Window State <br>BOOL    isActive (void){ return ((fAttribs &amp; DWF_ACTIVE) ? TRUE : FALSE); } <br>    voidturnActiveOn (void){ fAttribs |= DWF_ACTIVE; } <br>    voidturnActiveOff (void){ fAttribs &amp;= ~DWF_ACTIVE; } <br> <br> <br>// <br>// Scene Methods <br>// <br>HRESULT   AttachScene (LPD3DScene lpNewScene); <br>HRESULT    DetachScene (void); <br> <br>     <br>// <br>    // Driver Methods <br>    // <br>HRESULT ChangeDesktop (void); <br>    HRESULT ChangeDriver (LPGUID lpGuid, LPD3DDevInfo lpDevHint = NULL, <br>  LPDDModeInfo lpModeHint = NULL); <br>    HRESULT ChangeDevice (LPGUID lpGuid, LPDDModeInfo lpModeHint = NULL); <br>    HRESULT ChangeMode (DWORD w, DWORD h, DWORD bpp, DWORD refresh); <br> <br> <br>// <br>// Misc. Methods <br>// <br>BOOL isValid (void)         { return (((fValid &amp; DWF_VALID) == DWF_VALID) ? TRUE : FALSE); } <br> <br>    BOOL isCreateZBuffer (void) { return (fAttribs &amp; DWF_ZBUFFER); } <br>    void createZBufferOn (void) { fAttribs |= DWF_ZBUFFER; } <br>    void createZBufferOff (void){ fAttribs &amp;= ~DWF_ZBUFFER; } <br>     <br> <br>// <br>// Member methods <br>// <br>HWND  GetWindow (void){ return hWindow; } <br>HCURSOR  GetCursor (void){ return hCursorOld; } <br>void  SetCursor (HCURSOR hNew){ hCursorOld = hNew; } <br> <br>LPDDDrvInfo  GetDriverInfo (void){ return lpCurrDriver; } <br>LPDDModeInfo  GetModeInfo (void){ return lpCurrMode; } <br>LPD3DDevInfo  GetDeviceInfo (void){ return lpCurrDevice; } <br> <br>LPGUID  GetDDGuid (void){ return ((lpCurrDriver) ? lpCurrDriver-&gt;GetGuid () : NULL); } <br>BOOL  GetModeInfo (DWORD &amp; w, DWORD &amp; h,  <br>   DWORD &amp; bpp, DWORD &amp; refresh) <br>{ <br>if (! lpCurrMode) <br>return FALSE; <br> <br>lpCurrMode-&gt;GetMode (w, h , bpp, refresh); <br>return TRUE; <br>} <br>LPGUID  GetD3DGuid (void){ return ((lpCurrDevice) ? &amp;(lpCurrDevice-&gt;guid) : NULL); } <br> <br>LPDIRECTDRAW  GetDD (void){ return lpDD; } <br>LPDIRECTDRAW2 GetDD2 (void){ return lpDD2; } <br>LPDIRECT3D2   GetD3D (void){ return lpD3D; } <br> <br>LPDIRECTDRAWSURFACE GetPrimary (void){ return lpddsPrimary; } <br>LPDIRECTDRAWSURFACE GetFrontBuffer (void){ return lpddsPrimary; } <br>LPDIRECTDRAWSURFACE GetBackBuffer (void){ return lpddsRender; } <br>LPDIRECTDRAWPALETTEGetPalette (void){ return lpddpPalette; } <br> <br>LPDIRECTDRAWSURFACE GetRender (void){ return lpddsRender; } <br>LPDIRECTDRAWSURFACE GetZBuffer (void){ return lpddsZBuff; } <br>LPDIRECT3DDEVICE2   GetD3DDevice (void){ return lpd3dDevice; } <br>LPDIRECT3DVIEWPORT2GetViewport (void){ return lpd3dViewport; } <br> <br>HRESULT GetSurfaceRect (RECT &amp; rSurface); <br>    HRESULT GetPrimaryRect (RECT &amp; rPrimary); <br> <br>LPD3DScene GetScene (void){ return lpd3dScene; } <br> <br>protected: <br> <br>// <br>// Protected Methods <br>// <br> <br>    HRESULT ValidateDefaults (void); <br> <br>HRESULT CreateInterfaces (LPGUID lpGuidDD); <br>    HRESULT InitInterfaces (void); <br>    HRESULT FiniInterfaces (void); <br> <br>HRESULT InitWindow (void); <br>HRESULT FiniWindow (void); <br> <br>HRESULT InitFullscreenMode (void); <br>HRESULT FiniFullscreenMode (void); <br> <br>HRESULT InitPrimary (void); <br>    HRESULT FiniPrimary (void); <br> <br>    HRESULT InitPalette (void); <br>    HRESULT FiniPalette (void); <br> <br>    HRESULT CreateRender (LPGUID lpD3DGuid); <br>HRESULT InitRender (void); <br>    HRESULT FiniRender (void); <br> <br>HRESULT InitViewport (void); <br>HRESULT FiniViewport (void); <br>HRESULT UpdateViewport (void); <br> <br>// Track initialization process <br>    void turnValidInterfaceOn (void){ fValid |= DWF_VALID_INTERFACE; } <br>    void turnValidInterfaceOff(void){ fValid &amp;= ~DWF_VALID_INTERFACE; } <br> <br>    void turnValidPrimaryOn (void){ fValid |= DWF_VALID_PRIMARY; } <br>    void turnValidPrimaryOff (void){ fValid &amp;= ~DWF_VALID_PRIMARY; } <br> <br>    void turnValidFullscreenOn (void){ fValid |= DWF_VALID_FULLSCREEN; } <br>    void turnValidFullscreenOff (void){ fValid &amp;= ~DWF_VALID_FULLSCREEN; } <br> <br>    void turnValidRenderOn (void){ fValid |= DWF_VALID_RENDER; } <br>    void turnValidRenderOff(void){ fValid &amp;= ~DWF_VALID_RENDER; } <br> <br>    void turnValidViewportOn (void){ fValid |= DWF_VALID_VIEWPORT; } <br>    void turnValidViewportOff(void){ fValid &amp;= ~DWF_VALID_VIEWPORT; } <br> <br>void turnValidSceneOn (void){ fValid |= DWF_VALID_SCENE; } <br>void turnValidSceneOff (void){ fValid &amp;= ~DWF_VALID_SCENE;} <br> <br>    // Flags <br>    BOOL isValidDefaults (void){ return ((lpCurrDriver &amp;&amp; lpCurrMode &amp;&amp; lpCurrDevice) ? TRUE : FALSE); } <br>    BOOL isValidInterface (void){ return ((fValid &amp; DWF_VALID_INTERFACE) ? TRUE : FALSE); } <br>    BOOL isValidFullscreen (void){ return ((fValid &amp; DWF_VALID_FULLSCREEN) ? TRUE : FALSE); } <br>    BOOL isValidPrimary (void){ return ((fValid &amp; DWF_VALID_PRIMARY) ? TRUE : FALSE); } <br>    BOOL isValidRender (void){ return ((fValid &amp; DWF_VALID_RENDER) ? TRUE : FALSE); } <br>BOOL isValidViewport (void){ return ((fValid &amp; DWF_VALID_VIEWPORT) ? TRUE : FALSE); } <br>BOOL isValidScene (void){ return ((fValid &amp; DWF_VALID_SCENE) ? TRUE : FALSE); } <br> <br>    HRESULT CalcRects (void); <br> <br> <br>// <br>// Protected Data <br>// <br>    DWORD           dwSize;             // Structure Size <br>    DWORD           fAttribs;           // Attribute Flags <br>    DWORD           fChecks;            // Programming flags <br>DWORDfValid;// Validation flags <br> <br>    // Window Data <br>HWND            hWindow;            // Window handle <br>    DWORD           dwPaused;           // Paused Semaphore <br>HCURSORhCursorOld;// Old Cursor <br> <br>    // Driver Defaults <br>LPDDDrvInfolpCurrDriver;// Current Driver <br>LPDDModeInfolpCurrMode;// Current Mode <br>LPD3DDevInfolpCurrDevice;// Current Device <br>     <br>// Interfaces <br>    LPDIRECTDRAW    lpDD;               // DirectDraw Interface <br>    LPDIRECTDRAW2   lpDD2;              // DirectDraw2 Interface <br>    LPDIRECT3D2     lpD3D;              // Direct3D2 Interface <br>     <br>    // Primary Surface <br>    LPDIRECTDRAWSURFACE  lpddsPrimary;  // Primary Surface <br>    LPDIRECTDRAWPALETTE  lpddpPalette;  // Primary Palette <br>DWORD cPalette;// Count of palette entries <br>    PALETTEENTRY *       lppeSystem;    // Saved System palette entries <br>PALETTEENTRY *       lppeCurr;// Current palette entries <br> <br>    // Render Surface <br>    LPDIRECTDRAWSURFACE  lpddsRender;   // Rendering surface <br>    LPDIRECTDRAWSURFACE  lpddsZBuff;    // Z-Buffer surface <br>    LPDIRECT3DDEVICE2    lpd3dDevice;// D3D Device <br>LPDIRECT3DVIEWPORT2  lpd3dViewport;// D3D Viewport <br> <br>    // Misc. <br>    RECT                rPrim;          // Current primary pos,size <br>    RECT                rSurf;          // Current surface pos,size <br> <br>// D3D Scene <br>LPD3DScenelpd3dScene;// D3D Scene <br> <br>// Friends <br>friendclass D3DScene; <br> <br>}; // End D3DWindow <br> <br> <br>    <br>/* <br>**----------------------------------------------------------------------------- <br>**  End of File <br>**----------------------------------------------------------------------------- <br>*/ <br>#endif // D3DWIN_H <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

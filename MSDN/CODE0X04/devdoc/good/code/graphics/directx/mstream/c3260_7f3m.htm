<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MIDSTUFF.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3262"></a>MIDSTUFF.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:midstuff.h <br> *  Content:MIDI structures and definitions used by the MSTREAM sample <br> *              application in converting a MID file to a MIDI stream for <br> *              playback using the midiStream API. <br> * <br> ***************************************************************************/ <br>#ifndef __MIDSTUFF_H__ <br>#define __MIDSTUFF_H__ <br> <br>// MIDI file constants <br>// <br>#define MThd0x6468544D// Start of file <br>#define MTrk0x6B72544D// Start of track <br> <br>#define MIDI_SYSEX((BYTE)0xF0)// SysEx begin <br>#define MIDI_SYSEXEND((BYTE)0xF7)// SysEx begin <br>#define MIDI_META((BYTE)0xFF)// Meta event begin <br>#define MIDI_META_TEMPO((BYTE)0x51)// Tempo change <br>#define MIDI_META_EOT((BYTE)0x2F)// End-of-track <br> <br>#define MIDI_NOTEOFF((BYTE)0x80)// + note + velocity <br>#define MIDI_NOTEON((BYTE)0x90)// + note + velocity <br>#define MIDI_POLYPRESS  ((BYTE)0xA0)// + pressure (2 bytes) <br>#define MIDI_CTRLCHANGE ((BYTE)0xB0)// + ctrlr + value <br>#define MIDI_PRGMCHANGE((BYTE)0xC0)// + new patch <br>#define MIDI_CHANPRESS((BYTE)0xD0)// + pressure (1 byte) <br>#define MIDI_PITCHBEND((BYTE)0xE0)// + pitch bend (2 bytes) <br> <br>#define NUM_CHANNELS16 <br> <br>#define MIDICTRL_VOLUME((BYTE)0x07) <br>#define MIDICTRL_VOLUME_LSB((BYTE)0x27) <br>#define MIDICTRL_PAN((BYTE)0x0A) <br> <br>#define MIDIEVENT_CHANNEL(dw)(dw &amp; 0x0000000F) <br>#define MIDIEVENT_TYPE(dw)(dw &amp; 0x000000F0) <br>#define MIDIEVENT_DATA1(dw)((dw &amp; 0x0000FF00) &gt;&gt; 8) <br>#define MIDIEVENT_VOLUME(dw)((dw &amp; 0x007F0000) &gt;&gt; 16) <br> <br>// Macros for swapping hi/lo-endian data <br>// <br>#define WORDSWAP(w)(((w) &gt;&gt; 8) | \ <br>(((w) &lt;&lt; 8) &amp; 0xFF00)) <br> <br>#define DWORDSWAP(dw) (((dw) &gt;&gt; 24) |\ <br>(((dw) &gt;&gt; 8) &amp; 0x0000FF00) |\ <br>(((dw) &lt;&lt; 8) &amp; 0x00FF0000) |\ <br>(((dw) &lt;&lt; 24) &amp; 0xFF000000)) <br> <br>// In debug builds, TRACKERR will show us where the parser died <br>// <br>#ifdef DEBUG <br>#define TRACKERR(p,sz) ShowTrackError(p,sz); <br>#else <br>#define TRACKERR(p,sz) <br>#endif <br> <br> <br>// Make a little distinction here so the various structure members are a bit <br>// more clearly labelled -- we have offsets and byte counts to keep track of <br>// that deal with both in-memory buffers and the file on disk <br> <br>#defineFILEOFFDWORD <br> <br> <br>// These structures are stored in MIDI files; they need to be byte aligned. <br>// <br>#pragma pack(1) <br> <br>// Chunk header. dwTag is either MTrk or MThd. <br>// <br>typedef struct <br>{ <br>    DWORDdwTag;// Type <br>    DWORDdwChunkLength;// Length (hi-lo) <br>} MIDICHUNK; <br> <br>// Contents of MThd chunk. <br>typedef struct <br>{ <br>    WORDwFormat;// Format (hi-lo) <br>    WORDwTrackCount;// # tracks (hi-lo) <br>    WORDwTimeDivision;// Time division (hi-lo) <br>} MIDIFILEHDR; <br> <br>#pragma pack() // End of need for byte-aligned structures <br> <br> <br>// Temporary event structure which stores event data until we're ready to <br>// dump it into a stream buffer <br>// <br>typedef struct <br>{ <br>    DWORDtkEvent;// Absolute time of event <br>    BYTEbyShortData[4];// Event type and parameters if channel msg <br>    DWORDdwEventLength;// Length of data which follows if meta or sysex <br>    LPBYTEpLongData;// -&gt; Event data if applicable <br>} TEMPEVENT, *PTEMPEVENT; <br> <br>#define ITS_F_ENDOFTRK0x00000001 <br> <br>// Description of a track open for read <br>// <br>typedef struct <br>{ <br>    DWORDfdwTrack;// Track status <br>    DWORDdwTrackLength;// Total bytes in track <br>    DWORDdwLeftInBuffer;// Bytes left unread in track buffer <br>    LPBYTEpTrackStart;// -&gt; start of track data buffer <br>    LPBYTEpTrackCurrent;// -&gt; next byte to read in buffer <br>    DWORDtkNextEventDue;// Absolute time of next event in track <br>    BYTEbyRunningStatus;// Running status from last channel msg <br> <br>    FILEOFFfoTrackStart;// Start of track -- used for walking the file <br>    FILEOFFfoNextReadStart;// File offset of next read from disk <br>    DWORDdwLeftOnDisk;// Bytes left unread on disk <br>#ifdef DEBUG <br>    DWORDnTrack;// # of this track for debugging <br>#endif <br>} INTRACKSTATE, *PINTRACKSTATE; <br> <br>// Description of the input MIDI file <br>// <br>typedef struct <br>{ <br>    DWORDcbFileLength;// Total bytes in file <br>    DWORDdwTimeDivision;// Original time division <br>    DWORDdwFormat;// Original format <br>    DWORDdwTrackCount;// Track count (specifies pitsTracks size) <br>    INTRACKSTATE *pitsTracks;// -&gt; array of tracks in this file <br>} INFILESTATE, *PINFILESTATE; <br> <br>#endif <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

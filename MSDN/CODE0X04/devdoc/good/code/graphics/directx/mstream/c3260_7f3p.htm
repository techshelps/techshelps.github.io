<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSTREAM.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3265"></a>MSTREAM.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:MStream.h <br> *  Content:Main header file for the MSTREAM sample application <br> * <br> ***************************************************************************/ <br>#ifndef __MSTREAM_INCLUDED__ <br>#define __MSTREAM_INCLUDED__ <br> <br>/*****************************************************************************/ <br>/* Controls for buffer size, etc. */ <br> <br>#define TRACK_BUFFER_SIZE1024 <br>#define OUT_BUFFER_SIZE                 1024 // Max stream buffer size in bytes <br>#define BUFFER_TIME_LENGTH60   // Amount to fill in milliseconds <br>#define NUM_STREAM_BUFFERS              2 <br> <br>#define DEBUG_CALLBACK_TIMEOUT2000// Wait 2 seconds for callback <br> <br>/*****************************************************************************/ <br>/* A bunch of constants used for calculating position */ <br>/* and size of child controls for the main window.    */ <br> <br>#define BORDER_SPACE_CX10 <br>#define BORDER_SPACE_CY10 <br>#define CONTROL_SPACE_CX4 <br>#define CONTROL_SPACE_CY4 <br>#define TEXT_SPACE_CY3 <br>#define TEXT_SPACE_CX2 <br> <br>#define BUTTON_CX68 <br>#define BUTTON_CY26 <br>#define CHECK_CX68 <br>#define CHECK_CY26 <br>#define BUTTON_SPACE_CX4 <br>#define BUTTON_SPACE_CY4 <br>#define CHECK_SPACE_CY4 <br> <br>#define TEMPO_TB_CX150 <br>#define TEMPO_TB_CY             32 <br>#define VOL_TB_CX150 <br>#define VOL_TB_CY               32 <br> <br>#define TEMPO_TEXT_CXTEMPO_TB_CX <br>#define VOL_TEXT_CXVOL_TB_CX <br> <br>#define VOL_TB_MIN0 <br>#define VOL_TB_MAX1000 <br>#define VOL_PAGESIZE10 <br>#define VOL_MIN0 <br>#define VOL_MAX127 <br>#define VOL_CACHE_INIT100 <br>#define TEMPO_MIN1 <br>#define TEMPO_MAX500 <br>#define TEMPO_PAGESIZE10 <br> <br> <br>#define WM_MSTREAM_PROGRESS(WM_USER + 100) <br>#define WM_MSTREAM_UPDATEVOLUME(WM_USER + 101) <br> <br>/*****************************************************************************/ <br>/* All sorts of bit flags and error codes for */ <br>/* communicating between various subsystems.  */ <br> <br>#define MSTREAM_STOPF_NOREOPEN0x0001 <br> <br>#define STREAMF_BUFFER_WARNING0x00000002 <br> <br>#define CONVERTF_RESET0x00000001 <br> <br>#define CONVERTF_STATUS_DONE0x00000001 <br>#define CONVERTF_STATUS_STUCK0x00000002 <br>#define CONVERTF_STATUS_GOTEVENT0x00000004 <br> <br>#define CONVERTERR_NOERROR0// No error occured <br>#define CONVERTERR_CORRUPT-101// The input file is corrupt <br>// The converter has already encountered a corrupt file and cannot convert any <br>// more of this file -- you must reset the converter <br>#define CONVERTERR_STUCK-102 <br>#define CONVERTERR_DONE-103// Converter is done <br>#define CONVERTERR_BUFFERFULL-104// The buffer is full <br>#define CONVERTERR_METASKIP-105// Skipping unknown meta event <br> <br>#define STATUS_KILLCALLBACK100// Signals that the callback should die <br>#define STATUS_CALLBACKDEAD200// Signals callback is done processing <br>#define STATUS_WAITINGFOREND300    // Callback's waiting for buffers to play <br> <br>#define VOLUME_BUFFER3567// Random value which acts as a buffer id <br> <br> <br>#ifdef DEBUG <br>#define DebugPrint( sz )        DPF( 3, sz ) <br>#else <br>#define DebugPrint( sz ) <br>#endif <br> <br> <br> <br>/* <br> *   This structure is used to pass information to the ConvertToBuffer() <br> * system and then internally by that function to send information about the <br> * target stream buffer and current state of the conversion process to lower <br> * level conversion routines internal to the MSTRCONV module.  See that source <br> * file for specific details. <br> */ <br>typedef struct _ConvertInfo <br>{ <br>    MIDIHDRmhBuffer;    // Standard Windows stream buffer header <br>    DWORDdwStartOffset;    // Start offset from mhStreamBuffer.lpStart <br>    DWORDdwMaxLength;    // Max length to convert on this pass <br> <br>    DWORDdwBytesRecorded;    // Used internally by the MSTRCONV module <br>    DWORDtkStart;    // Used internally by the MSTRCONV module <br>    BOOLbTimesUp;    // Used internally by the MSTRCONV module <br>} CONVERTINFO, *LPCONVERTINFO; <br> <br> <br>/*****************************************************************************/ <br>/* Function declarations */ <br> <br>LRESULT CALLBACK MainWindowProc( HWND, unsigned, WPARAM, LPARAM ); <br>BOOL CALLBACK DLG_About( HWND, UINT, WPARAM, LPARAM ); <br>void CALLBACK MidiProc( HMIDIIN, UINT, DWORD, DWORD, DWORD ); <br> <br>void BuildTitleBarText( void ); <br>void ErrorMessageBox( UINT, DWORD ); <br>void HandleTempoScroll( int, int ); <br>void HandleVolScroll( int, int ); <br>void MidiErrorMessageBox( MMRESULT ); <br>void SetAllChannelVolumes( DWORD dwVolumePercent ); <br>void SetChannelVolume( DWORD dwChannel, DWORD dwVolumePercent ); <br>void UpdateFromControls( void ); <br> <br>int CreateChildren( RECT ); <br>int HandleCommDlgError( DWORD ); <br>BOOL StreamBufferSetup( void ); <br> <br>BOOL ConverterInit( LPSTR szInFile ); <br>void ConverterCleanup( void ); <br>intConvertToBuffer( DWORD, LPCONVERTINFO ); <br> <br>#endif /* __MSTREAM_INCLUDED__ */ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

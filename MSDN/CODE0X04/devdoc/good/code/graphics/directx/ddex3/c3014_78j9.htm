<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DDEX3.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3015"></a>DDEX3.CPP</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       ddex3.cpp <br> *  Content:    Direct Draw example program 3.  Adds functionality to  <br> *              example program 2.  Creates two offscreen surfaces in  <br> *              addition to the primary surface and back buffer.  Loads <br> *              a bitmap file into each offscreen surface.  Uses BltFast <br> *              to copy the contents of an offscreen surface to the back <br> *              buffer and then flips the buffers and copies the next  <br> *              offscreen surface to the back buffer.  Press F12 to exit <br> *              the program.  This program requires at least 1.2 Megs of  <br> *              video ram. <br> * <br> ***************************************************************************/ <br> <br>#define NAME "DDExample3" <br>#define TITLE "Direct Draw Example 3" <br> <br>#define WIN32_LEAN_AND_MEAN <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;ddraw.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdarg.h&gt; <br>#include "resource.h" <br>#include "ddutil.h"         // DDLoadPalette, DDCopyBitmap <br> <br>// Name of our bitmap resource. <br>char szBitmap[] = "DDEX3"; <br> <br>BOOL InitSurfaces( void ); <br> <br>#define TIMER_ID        1 <br>#define TIMER_RATE      500 <br> <br>LPDIRECTDRAW            lpDD;           // DirectDraw object <br>LPDIRECTDRAWSURFACE     lpDDSPrimary;   // DirectDraw primary surface <br>LPDIRECTDRAWSURFACE     lpDDSBack;      // DirectDraw back surface <br>LPDIRECTDRAWSURFACE     lpDDSOne;       // Offscreen surface 1 <br>LPDIRECTDRAWSURFACE     lpDDSTwo;       // Offscreen surface 2 <br>LPDIRECTDRAWPALETTE     lpDDPal;        // DirectDraw palette <br>BOOL                    bActive;        // is application active? <br> <br>/* <br> * finiObjects <br> * <br> * finished with all objects we use; release them <br> */ <br>static void finiObjects( void ) <br>{ <br>    if( lpDD != NULL ) <br>    { <br>if( lpDDSPrimary != NULL ) <br>{ <br>    lpDDSPrimary-&gt;Release(); <br>    lpDDSPrimary = NULL; <br>} <br>if( lpDDSOne != NULL ) <br>{ <br>    lpDDSOne-&gt;Release(); <br>    lpDDSOne = NULL; <br>} <br>if( lpDDSTwo != NULL ) <br>{ <br>    lpDDSTwo-&gt;Release(); <br>    lpDDSTwo = NULL; <br>} <br>if( lpDDPal != NULL ) <br>{ <br>    lpDDPal-&gt;Release(); <br>    lpDDPal = NULL; <br>} <br>lpDD-&gt;Release(); <br>lpDD = NULL; <br>    } <br>} /* finiObjects */ <br> <br>/* <br> * restoreAll <br> * <br> * restore all lost objects <br> */ <br>HRESULT restoreAll( void ) <br>{ <br>    HRESULT     ddrval; <br> <br>    ddrval = lpDDSPrimary-&gt;Restore(); <br>    if( ddrval == DD_OK ) <br>    { <br>ddrval = lpDDSOne-&gt;Restore(); <br>if( ddrval == DD_OK ) <br>{ <br>    ddrval = lpDDSTwo-&gt;Restore(); <br>    if( ddrval == DD_OK ) <br>    { <br>InitSurfaces(); <br>    } <br>} <br>    } <br>    return ddrval; <br> <br>} /* restoreAll */ <br> <br>long FAR PASCAL WindowProc( HWND hWnd, UINT message,  <br>    WPARAM wParam, LPARAM lParam ) <br>{ <br>    static  int phase = 0; <br>    RECT        rcRect; <br> <br>    switch( message ) <br>    { <br>    case WM_ACTIVATEAPP: <br>bActive = wParam; <br>break; <br> <br>    case WM_CREATE: <br>break; <br> <br>    case WM_SETCURSOR: <br>SetCursor(NULL); <br>return TRUE; <br> <br>    case WM_TIMER: <br>if( bActive ) <br>{ <br>    HRESULT             ddrval; <br>    LPDIRECTDRAWSURFACE pdds; <br> <br>    rcRect.left = 0; <br>    rcRect.top = 0; <br>    rcRect.right = 640; <br>    rcRect.bottom = 480; <br>    if(phase) <br>    { <br>pdds = lpDDSTwo; <br>phase = 0; <br>    } <br>    else <br>    { <br>pdds = lpDDSOne; <br>phase = 1; <br>    } <br>    while( 1 ) <br>    { <br>ddrval = lpDDSBack-&gt;BltFast( 0, 0, pdds, &amp;rcRect, FALSE ); <br>if( ddrval == DD_OK ) <br>{ <br>    break; <br>} <br>if( ddrval == DDERR_SURFACELOST ) <br>{ <br>    ddrval = restoreAll(); <br>    if( ddrval != DD_OK ) <br>    { <br>break; <br>    } <br>} <br>if( ddrval != DDERR_WASSTILLDRAWING ) <br>{ <br>    break; <br>} <br>    } <br>     <br>    // Flip surfaces <br>    while( 1 ) <br>    { <br>ddrval = lpDDSPrimary-&gt;Flip( NULL, 0 ); <br>if( ddrval == DD_OK ) <br>{ <br>    break; <br>} <br>if( ddrval == DDERR_SURFACELOST ) <br>{ <br>    ddrval = restoreAll(); <br>    if( ddrval != DD_OK ) <br>    { <br>break; <br>    } <br>} <br>if( ddrval != DDERR_WASSTILLDRAWING ) <br>{ <br>    break; <br>} <br>    } <br>} <br>break; <br>  <br>    case WM_KEYDOWN: <br>switch( wParam ) <br>{ <br>case VK_ESCAPE: <br>case VK_F12: <br>    PostMessage(hWnd, WM_CLOSE, 0, 0); <br>    break; <br>} <br>break; <br> <br>    case WM_DESTROY: <br>finiObjects(); <br>PostQuitMessage( 0 ); <br>break; <br>    } <br> <br>    return DefWindowProc(hWnd, message, wParam, lParam); <br> <br>} /* WindowProc */ <br> <br>/* <br> * This function is called if the initialization function fails <br> */ <br>BOOL initFail( HWND hwnd ) <br>{ <br>    finiObjects(); <br>    MessageBox( hwnd, "DirectDraw Init FAILED", TITLE, MB_OK ); <br>    DestroyWindow( hwnd ); <br>    return FALSE; <br> <br>} /* initFail */ <br> <br>/* <br> * doInit - do work required for every instance of the application: <br> *                create the window, initialize data <br> */ <br>static BOOL doInit( HINSTANCE hInstance, int nCmdShow ) <br>{ <br>    HWND                hwnd; <br>    WNDCLASS            wc; <br>    DDSURFACEDESC       ddsd; <br>    DDSCAPS             ddscaps; <br>    HRESULT             ddrval; <br> <br>    /* <br>     * set up and register window class <br>     */ <br>    wc.style = CS_HREDRAW | CS_VREDRAW; <br>    wc.lpfnWndProc = WindowProc; <br>    wc.cbClsExtra = 0; <br>    wc.cbWndExtra = 0; <br>    wc.hInstance = hInstance; <br>    wc.hIcon = LoadIcon( hInstance, IDI_APPLICATION ); <br>    wc.hCursor = LoadCursor( NULL, IDC_ARROW ); <br>    wc.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH); <br>    wc.lpszMenuName = NAME; <br>    wc.lpszClassName = NAME; <br>    RegisterClass( &amp;wc ); <br>     <br>    /* <br>     * create a window <br>     */ <br>    hwnd = CreateWindowEx( <br>0, <br>NAME, <br>TITLE, <br>WS_POPUP, <br>0, <br>0, <br>GetSystemMetrics(SM_CXSCREEN), <br>GetSystemMetrics(SM_CYSCREEN), <br>NULL, <br>NULL, <br>hInstance, <br>NULL ); <br> <br>    if( !hwnd ) <br>    { <br>return FALSE; <br>    } <br> <br>    ShowWindow( hwnd, nCmdShow ); <br>    UpdateWindow( hwnd ); <br> <br>    /* <br>     * create the main DirectDraw object <br>     */ <br>    ddrval = DirectDrawCreate( NULL, &amp;lpDD, NULL ); <br>    if( ddrval != DD_OK ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    // Get exclusive mode <br>    ddrval = lpDD-&gt;SetCooperativeLevel( hwnd, DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN ); <br>    if( ddrval != DD_OK ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    // Set the video mode to 640x480x8 <br>    ddrval = lpDD-&gt;SetDisplayMode( 640, 480, 8); <br>    if( ddrval != DD_OK ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    // Create the primary surface with 1 back buffer <br>    ddsd.dwSize = sizeof( ddsd ); <br>    ddsd.dwFlags = DDSD_CAPS | DDSD_BACKBUFFERCOUNT; <br>    ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE | <br>  DDSCAPS_FLIP | <br>  DDSCAPS_COMPLEX; <br>    ddsd.dwBackBufferCount = 1; <br>    ddrval = lpDD-&gt;CreateSurface( &amp;ddsd, &amp;lpDDSPrimary, NULL ); <br>    if( ddrval != DD_OK ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    ddscaps.dwCaps = DDSCAPS_BACKBUFFER; <br>    ddrval = lpDDSPrimary-&gt;GetAttachedSurface(&amp;ddscaps, &amp;lpDDSBack); <br>    if( ddrval != DD_OK ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    // Create a offscreen bitmap. <br>    ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH; <br>    ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN; <br>    ddsd.dwHeight = 480; <br>    ddsd.dwWidth = 640; <br>    ddrval = lpDD-&gt;CreateSurface( &amp;ddsd, &amp;lpDDSOne, NULL ); <br>    if( ddrval != DD_OK ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    // Create another offscreen bitmap. <br>    ddrval = lpDD-&gt;CreateSurface( &amp;ddsd, &amp;lpDDSTwo, NULL ); <br>    if( ddrval != DD_OK ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    // Create a Direct Draw Palette and associate it with the front buffer <br>    lpDDPal = DDLoadPalette(lpDD, szBitmap); <br> <br>    if (lpDDPal) <br>lpDDSPrimary-&gt;SetPalette( lpDDPal ); <br> <br>    if( !InitSurfaces() ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    // Create a timer to flip the pages <br>    if( !SetTimer( hwnd, TIMER_ID, TIMER_RATE, NULL ) ) <br>    { <br>return initFail(hwnd); <br>    } <br> <br>    return TRUE; <br> <br>} /* doInit */ <br> <br>/* <br> * WinMain - initialization, message loop <br> */ <br>int PASCAL WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, <br>LPSTR lpCmdLine, int nCmdShow) <br>{ <br>    MSG         msg; <br> <br>    lpCmdLine = lpCmdLine; <br>    hPrevInstance = hPrevInstance; <br> <br>    if( !doInit( hInstance, nCmdShow ) ) <br>    { <br>return FALSE; <br>    } <br> <br>    while( GetMessage( &amp;msg, NULL, 0, 0 ) ) <br>    { <br>TranslateMessage(&amp;msg); <br>DispatchMessage(&amp;msg); <br>    } <br> <br>    return msg.wParam; <br> <br>} /* WinMain */ <br> <br>/* <br> * InitSurfaces - This function reads the bitmap file FRNTBACK.BMP <br> * and stores half of it in offscreen surface 1 and the other half in  <br> * offscreen surface 2. <br> */ <br>BOOL InitSurfaces( void ) <br>{ <br>    HBITMAP hbm; <br> <br>    // Load our bitmap resource. <br>    hbm = (HBITMAP)LoadImage(GetModuleHandle(NULL), szBitmap, IMAGE_BITMAP, 0, 0, LR_CREATEDIBSECTION); <br> <br>    if (hbm == NULL) <br>return FALSE; <br> <br>    DDCopyBitmap(lpDDSOne, hbm, 0, 0,   640, 480); <br>    DDCopyBitmap(lpDDSTwo, hbm, 0, 480, 640, 480); <br>    DeleteObject(hbm); <br> <br>    return TRUE; <br> <br>} /* readBMPIntoSurfaces */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

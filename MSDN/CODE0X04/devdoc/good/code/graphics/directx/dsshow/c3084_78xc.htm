<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SHELL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3090"></a>SHELL.H</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       shell.h <br> *  Content:    DirectSound shell header <br> * <br> ***************************************************************************/ <br>#ifndef __SHELL_INCLUDED__ <br>#define __SHELL_INCLUDED__ <br>// If this is defined, then an extra text string under the filename will show <br>// if the file is stopped or playing. <br>#define SHOWSTATUS <br> <br>#define MAXCONTROLS             8 <br> <br>// For setting the ranges on the freq, vol, etc. <br>// dwFreq*FREQMUL+FREQADD = # to show on screen. <br> <br>#define FREQFACTOR              (5)                    <br>#define FREQADD                 (0) <br>#define FREQPAGE                (100) <br>#define PANPAGE                 (5) <br> <br>#define MINFREQ_TB              0 <br>#define MAXFREQ_TB              100000 <br>#define MINPAN_TB               0 <br>#define MIDPAN_TB               400 <br>#define MAXPAN_TB               800 <br>#define SHIFTPAN_TB             (-400) <br>#define MULTPAN_TB              (10L) <br>#define MINPAN_VAL              (-400) <br>#define MIDPAN_VAL              0 <br>#define MAXPAN_VAL              400 <br>#define MINVOL_TB               0 <br>#define MAXVOL_TB               400 <br>#define SHIFTVOL_TB             (-400) <br>#define MULTVOL_TB              (10L) <br>#define MINVOL_VAL              -400 <br>#define MAXVOL_VAL              0 <br> <br> <br>// Id code deltas <br>#define idFreqTB                1 <br>#define idPanTB                 2 <br>#define idVolLTB                3 <br>#define idVolRTB                4 <br>#define idVolMTB                5 <br>#define idLoopedBN              6 <br>#define idPlayBN                7 <br>#define idRemoveBN              8 <br> <br> <br>// UI stuff. <br> <br> <br>#define DX_WIN_BORDER           30 <br>#define DY_WIN_BORDER           30 <br>#define DX_MINWINDOW            640 <br>#define DY_MINWINDOW            450// Was 560 Must tweek to keep above the taskbar &lt;= 450 <br> <br>#define DX_CONTROLSPACING       150 <br>#define DY_CONTROLSPACING       0 <br> <br>#define DX_LINEEDGE             (DX_CONTROLSPACING - 20) <br>#define DY_LINEEDGE             (1) <br> <br> <br>#define COX_STARTCONTROL        (20)// Defines the left edge of the first file window <br>#define COY_STARTCONTROL        (10)// Defines the upper edge of the first file window <br> <br>#define DX_TEXTSPACING          5 <br>#define DY_TEXTSPACING          10 <br> <br>#define DX_LOOPEDSPACING        0  //Relative horizontal offset of top four areas <br>#define DY_LOOPEDSPACING        -6//Space offset around lines  <br> <br>#define DX_STATUSSPACING        0 <br> <br>#ifdef SHOWSTATUS <br>#define DY_STATUSSPACING        8 <br>#else <br>#define DY_STATUSSPACING        0 <br>#endif <br> <br> <br>#define DX_FREQSPACING          0 <br>#define DY_FREQSPACING          10 <br> <br>#define DY_PANSPACING           10 <br>#define DY_VOLSPACING           10 <br> <br>//Establish the Widths of various windows: <br>#define DX_FILENAME_TXT         120//Filename window <br>#define DX_STATUS_TXT           120//Status window <br>#define DX_FREQ_TXT             120//Frequency window <br>#define DX_PAN_TXT              100//Pan window <br>#define DX_VOL_TXT              100//Volume window <br>#define DX_LOOPED_TXT           100//Checkbox + 'Looped' window <br> <br>//Establish slider sizes: <br>#define DX_FREQ_TB              130//Frequency slider width <br>#define DY_FREQ_TB              40//Frequency slider height <br>#define DX_PAN_TB130//Pan slider width <br>#define DY_PAN_TB               40//Pan slider height <br>#define DX_VOL_TB               40//Master volume slider width <br>#define DY_VOL_TB               100//Master volume slider height <br>#define DX_VOLSPACING_TB        5//Distance between master volume and its label <br> <br>#define DX_VOLUMECHAR           15 <br>#define DY_VOLSPACINGY          -5//Distance between channel mixers and L &amp; R labels  <br> <br>#define DX_BUTTONSPACING        61//Width of the Play and Remove buttons <br>#define DY_BUTTONSPACING        10 <br>#define DY_BEFOREFIRSTBUTTON    18//Distance above and below Volume-&gt;buttons line <br>#define DY_BETWEENBUTTONS       5//Vertical space between buttons <br> <br>#define DX_FRAMEEDGE            10//Distance between leftmost control and the window edge <br>#define DY_FRAMEEDGE            10//Distance between outermost contol and the window edge <br>#define DX_FRAMEEDGEINNER       4//Distance between file windows <br> <br> <br>// To check for stopping of sounds, a timer is set...use this for the rate. <br>#define TIMERPERIOD500// In milliseconds <br> <br>// In Options/Output Type, there are strings to pick the format...Here are the number of them. <br>#define C_DROPDOWNPCMFORMATS    16 <br> <br>typedef struct _fileinfo <br>    { <br>    BYTE                *pbData;        // Pointer to actual data of file. <br>    UINT                cbSize;         // Size of data. <br>    WAVEFORMATEX*pwfx;          // Pointer to waveformatex structure. <br> <br>    DWORD               dwFreq;         // Frequency. <br>    DWORD               dwPan;          // Panning info. <br>    DWORD               dwVol;          // Total volume. <br>    BOOL                fLooped;        // Looped? <br> <br>    BOOL                fPlaying;       // Is this one playing? <br>    BOOL                fLost;          // Is this one lost? <br>    BOOL                fHardware;      // Is this a hardware buffer? <br>    BOOL                fSticky;        // Is this a sticky buffer? <br> <br>    intcox;            // Coordinates of where the structure is <br>    intcoy;            // printed. <br> <br>    // HWND's needed. <br>    HWND                hWndFileName_TXT;   // Filename text string. <br>    HWND                hWndFreq_TB;        // Trackbar handle. <br>    HWND                hWndFreq_TXT;       // Text string for freq. <br>    HWND                hWndPan_TB;         // Trackbar handle. <br>    HWND                hWndPan_TXT;        // Text string for pan. <br>    HWND                hWndVol_TXT;        // Text string for volume. <br>    HWND                hWndVolL_TB;        // Trackbar for volume left. <br>    HWND                hWndVolR_TB;        // Trackbar for volume right. <br>    HWND                hWndVolM_TB;        // Main volume. <br>    HWND                hWndLooped_BN;      // Looped <br>    HWND                hWndPlay_BN;        // Play <br>    HWND                hWndRemove_BN;      // Remove. <br>     <br>    HWND                hWndFileName_EDGE;  // The line under filename. <br>    HWND                hWndLooped_EDGE;    // The line under looped. <br>    HWND                hWndFreq_EDGE;      // The line under freq. <br>    HWND                hWndPan_EDGE;       // The line under pan. <br>    HWND                hWndVol_EDGE;       // The line under volume. <br>    HWND                hWndWhole_EDGE;     // The whole surrounding edge. <br>    HWND                hWndVolL_TXT;       // For the L <br>    HWND                hWndVolR_TXT;       // For the R <br> <br>    #ifdef SHOWSTATUS <br>    HWND                hWndStatus_TXT;     // For status. <br>    HWND                hWndStatus_EDGE; <br>    HWND                hWndPlayPosition_TXT; <br>    HWND                hWndPlayPosition_EDGE; <br>    HWND                hWndWritePosition_TXT; <br>    HWND                hWndWritePosition_EDGE; <br>    #endif <br> <br>    LPDIRECTSOUNDBUFFER pDSB;               // Pointer to direct sound buffer. <br> <br>    int                 nFileName;          // Index to filename, not including dir. <br>    char                szFileName[MAX_PATH]; <br>    struct _fileinfo    *pNext;             // Pointer to next file. <br> <br>    } FILEINFO; <br> <br> <br>char            szAppName[]     = "Direct Sound Demo"; <br>char            szMessage[]     = "Direct Sound Demo"; <br> <br>char gszCDStartPath[MAX_PATH];        // The path to start the Open dialog in <br> <br>// Registry Key and Value names that allow us to retrive a path something like <br>// "C:\DXSDK\SDK\MEDIA", but matching the current install. <br>const TCHAR gszRegKeyDirect3D[] = TEXT("Software\\Microsoft\\Direct3D"); <br>const TCHAR gszRegValueD3DPath[] = TEXT("D3D Path"); <br> <br>HANDLE          hInst; <br>HWND            hWndMain        = NULL; <br>DWORD           dwTimer         = 0;    // Timer handle. <br>GUID                    guID; <br>BOOL                    fEnumDrivers = FALSE; <br> <br>/*  This is the main head of the linked list, but its only used for the <br>    pNext which will point to the first FILEINFO structure, or NULL if there <br>    are no files loaded  */ <br>FILEINFO        FileInfoFirst;              // Start of linked list. <br> <br>char            szFreq[]        = "Freq"; <br>char            szPan[]         = "Pan"; <br>char            szVolume[]      = "Volume"; <br>char            szLooped[]      = "Looped"; <br>char            szPlay[]        = "Play"; <br>char            szStop[]        = "Stop"; <br>char            szRemove[]      = "Close"; <br> <br>#ifdef SHOWSTATUS <br>char            szFmtPlayPosition[] = "Play %d"; <br>char            szFmtWritePosition[]    = "Write %d"; <br>char            szPlaying[]     = "Playing"; <br>char            szStopped[]     = "Stopped"; <br>char            szSticky[]      = "Sticky"; <br>char                    szLost[]        = "Lost"; <br>char            szHW[]          = "HW-"; <br>char                    szSW[]                  = "SW-"; <br>#endif <br> <br> <br>char *rgszTypes[C_DROPDOWNPCMFORMATS] =  <br>    {                                       // Index <br>    "8.000 kHz, 8-Bit, Mono",               // 0 <br>    "8.000 kHz, 8-Bit, Stereo",             // 1 <br>    "8.000 kHz, 16-Bit, Mono",              // 2 <br>    "8.000 kHz, 16-Bit, Stereo",            // 3 <br>    "11.025 kHz, 8-Bit, Mono",              // 4 <br>    "11.025 kHz, 8-Bit, Stereo",            // 5 <br>    "11.025 kHz, 16-Bit, Mono",             // 6 <br>    "11.025 kHz, 16-Bit, Stereo",           // 7 <br>    "22.050 kHz, 8-Bit, Mono",              // 8 <br>    "22.050 kHz, 8-Bit, Stereo",            // 9 <br>    "22.050 kHz, 16-Bit, Mono",             // 10 <br>    "22,050 kHz, 16-Bit, Stereo",           // 11 <br>    "44.100 kHz, 8-Bit, Mono",              // 12 <br>    "44.100 kHz, 8-Bit, Stereo",            // 13 <br>    "44.100 kHz, 16-Bit, Mono",             // 14 <br>    "44.100 kHz, 16-Bit, Stereo"            // 15 <br>    };                                       <br> <br>BOOL                    rgfcoxAvail[MAXCONTROLS]; <br> <br>LPDIRECTSOUND           gpds            = NULL; <br> <br> <br>long FAR PASCAL WndProc(HWND, unsigned, WPARAM, LPARAM); <br>long FAR PASCAL DLGHelpAbout(HWND, UINT, WPARAM, LPARAM); <br>long FAR PASCAL DLGOutputBufferType(HWND, UINT, WPARAM, LPARAM); <br>long FAR PASCAL DLGCheckLatency(HWND, UINT, WPARAM, LPARAM); <br>UINT CALLBACK FileOpenCustomTemplateDlgProc(HWND, UINT, WPARAM, LPARAM); <br> <br>BOOL ClassInit(HANDLE); <br>void PD_FileOpen(HWND); <br>BOOL OpenFileDialog(HWND, LPSTR, int *, LPBOOL); <br>BOOL IsValidWave(LPSTR); <br>void GetMediaStartPath(void); <br> <br>int CreateControl(HWND, FILEINFO *, DWORD, DWORD, DWORD); <br>void GetNextControlCoords(FILEINFO *, int *, int *); <br>int AddToList(FILEINFO *, FILEINFO *); <br>int FreeAllList(HWND, FILEINFO *); <br>int RemoveFromList(FILEINFO *, FILEINFO *); <br>int GetNumControls(FILEINFO *); <br>int StartDSound(HWND, FILEINFO *); <br>int StopDSound(HWND, FILEINFO *); <br>int StopAllDSounds(HWND, FILEINFO *); <br> <br>BOOL UIMainWindowVSBHandler(HWND, WPARAM, LPARAM);  <br>BOOL UIMainWindowHSBHandler(HWND, WPARAM, LPARAM);  <br>BOOL UIMainWindowCMDHandler(HWND, WPARAM, LPARAM);  <br>BOOL UIMainWindowTimerHandler(HWND, WPARAM, LPARAM);  <br>void SetAllText(FILEINFO *); <br>void UpdateLRVolume(FILEINFO *); <br> <br>void AppDestroy(HWND); <br>BOOL AppInit(HWND); <br>BOOL ParseCommandLine(PSTR); <br>BOOL BatchOpenFiles(PSTR *,int,BOOL,BOOL); <br> <br>int NewDirectSoundBuffer(FILEINFO *); <br>int ReleaseDirectSoundBuffer(FILEINFO *); <br>int ChangeOutputPan(FILEINFO *); <br>int ChangeOutputFreq(FILEINFO *); <br>int ChangeOutputVol(FILEINFO *); <br> <br>int FormatToIndex(HWND, FILEINFO *); <br>int IndexToFormat(HWND, FILEINFO *, int); <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

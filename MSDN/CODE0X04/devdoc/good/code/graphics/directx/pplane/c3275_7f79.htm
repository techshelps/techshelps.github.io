<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GETDXVER.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3285"></a>GETDXVER.CPP</h2>
<pre><code>/************************************************************************** <br> <br>    GetDXVer.cpp <br> <br>    Demonstrates how applications can detect what version of DirectX <br>    is installed. <br> <br> **************************************************************************/ <br>/************************************************************************** <br> <br>    (C) Copyright 1995-1997 Microsoft Corp.  All rights reserved. <br> <br>    You have a royalty-free right to use, modify, reproduce and <br>    distribute the Sample Files (and/or any modified version) in <br>    any way you find useful, provided that you agree that <br>    Microsoft has no warranty obligations or liability for any <br>    Sample Application Files which are modified. <br> <br> **************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;ddraw.h&gt; <br>#include &lt;dinput.h&gt; <br> <br>/**************************************************************************** <br> * <br> *      GetDXVersion <br> * <br> *  This function returns two arguments: <br> *dwDXVersion: <br> *    0    No DirectX installed <br> *    0x100   DirectX version 1 installed <br> *    0x200   DirectX 2 installed <br> *    0x300   DirectX 3 installed <br> *    0x500   At least DirectX 5 installed. <br> *    0x501   At least DirectX 5a installed. <br> *dwDXPlatform: <br> *    0                            Unknown (This is a failure case. Should never happen) <br> *    VER_PLATFORM_WIN32_WINDOWS    Windows 9X platform <br> *    VER_PLATFORM_WIN32_NT    Windows NT platform <br> * <br> ****************************************************************************/ <br> <br>typedef HRESULT (WINAPI *DIRECTDRAWCREATE)(GUID *, LPDIRECTDRAW *, IUnknown *); <br>typedef HRESULT (WINAPI *DIRECTINPUTCREATE)(HINSTANCE, DWORD, LPDIRECTINPUT *, IUnknown *); <br> <br>void GetDXVersion (LPDWORD pdwDXVersion, LPDWORD pdwDXPlatform) <br>{ <br>    HRESULT    hr; <br>    HINSTANCE    DDHinst = 0; <br>    HINSTANCE    DIHinst = 0; <br>    LPDIRECTDRAW    pDDraw = 0; <br>    LPDIRECTDRAW2    pDDraw2 = 0; <br>    DIRECTDRAWCREATE    DirectDrawCreate = 0; <br>    DIRECTINPUTCREATE    DirectInputCreate = 0; <br>    OSVERSIONINFO    osVer; <br>    LPDIRECTDRAWSURFACE    pSurf = 0; <br>    LPDIRECTDRAWSURFACE3    pSurf3 = 0; <br> <br>    /* <br>     * First get the windows platform <br>     */ <br>    osVer.dwOSVersionInfoSize = sizeof(osVer); <br>    if (!GetVersionEx(&amp;osVer)) <br>    { <br>*pdwDXVersion = 0; <br>*pdwDXPlatform = 0; <br>return; <br>    } <br> <br>    if (osVer.dwPlatformId == VER_PLATFORM_WIN32_NT) <br>    { <br>*pdwDXPlatform = VER_PLATFORM_WIN32_NT; <br>/* <br> * NT is easy... NT 4.0 is DX2, 4.0 SP3 is DX3, 5.0 is DX5 <br> * and no DX on earlier versions. <br> */ <br>if (osVer.dwMajorVersion &lt; 4) <br>{ <br>    *pdwDXPlatform = 0;//No DX on NT3.51 or earlier <br>    return; <br>} <br>if (osVer.dwMajorVersion == 4) <br>{ <br>    /* <br>     * NT4 up to SP2 is DX2, and SP3 onwards is DX3, so we are at least DX2 <br>     */ <br>    *pdwDXVersion = 0x200; <br> <br>            /* <br>             * We're not supposed to be able to tell which SP we're on, so check for dinput <br>             */ <br>            DIHinst = LoadLibrary("DINPUT.DLL"); <br>            if (DIHinst == 0)  <br>            { <br>                /* <br>                 * No DInput... must be DX2 on NT 4 pre-SP3 <br>                 */ <br>                OutputDebugString("Couldn't LoadLibrary DInput\r\n"); <br>        return; <br>            } <br> <br>            DirectInputCreate = (DIRECTINPUTCREATE) <br>                                    GetProcAddress(DIHinst, "DirectInputCreateA"); <br>            FreeLibrary(DIHinst); <br> <br>            if (DirectInputCreate == 0)  <br>            { <br>                /* <br>                 * No DInput... must be pre-SP3 DX2 <br>                 */ <br>                OutputDebugString("Couldn't GetProcAddress DInputCreate\r\n"); <br>        return; <br>            } <br> <br>    /* <br>     * It must be NT4, DX2 <br>     */ <br>    *pdwDXVersion = 0x300; //DX3 on NT4 SP3 or higher <br>    return; <br>} <br>/* <br> * Else it's NT5 or higher, and it's DX5a or higher: <br> */ <br>*pdwDXVersion = 0x501; //DX5a on NT5 <br>return; <br>    } <br> <br>    /* <br>     * Not NT... must be Win9x <br>     */ <br>    *pdwDXPlatform = VER_PLATFORM_WIN32_WINDOWS; <br> <br>    /* <br>     * If we are on Memphis or higher, then we are at least DX5a <br>     */ <br>    if ( (osVer.dwBuildNumber &amp; 0xffff) &gt; 1353) //Check for higher than developer release <br>    { <br>*pdwDXVersion = 0x501; //DX5a on Memphis or higher <br>return; <br>    } <br> <br>    /* <br>     * Now we know we are in Windows 9x (or maybe 3.1), so anything's possible. <br>     * First see if DDRAW.DLL even exists. <br>     */ <br>    DDHinst = LoadLibrary("DDRAW.DLL"); <br>    if (DDHinst == 0)  <br>    { <br>*pdwDXVersion = 0; <br>*pdwDXPlatform = 0; <br>FreeLibrary(DDHinst); <br>return; <br>    } <br> <br>    /* <br>     *  See if we can create the DirectDraw object. <br>     */ <br>    DirectDrawCreate = (DIRECTDRAWCREATE) <br>                            GetProcAddress(DDHinst, "DirectDrawCreate"); <br>    if (DirectDrawCreate == 0)  <br>    { <br>*pdwDXVersion = 0; <br>*pdwDXPlatform = 0; <br>FreeLibrary(DDHinst); <br>        OutputDebugString("Couldn't LoadLibrary DDraw\r\n"); <br>return; <br>    } <br> <br>    hr = DirectDrawCreate(NULL, &amp;pDDraw, NULL); <br>    if (FAILED(hr))  <br>    { <br>*pdwDXVersion = 0; <br>*pdwDXPlatform = 0; <br>FreeLibrary(DDHinst); <br>        OutputDebugString("Couldn't create DDraw\r\n"); <br>return; <br>    } <br> <br>    /* <br>     *  So DirectDraw exists.  We are at least DX1. <br>     */ <br>    *pdwDXVersion = 0x100; <br> <br>    /* <br>     *  Let's see if IID_IDirectDraw2 exists. <br>     */ <br>    hr = pDDraw-&gt;QueryInterface(IID_IDirectDraw2, (LPVOID *)&amp;pDDraw2); <br>    if (FAILED(hr))  <br>    { <br>/* <br> * No IDirectDraw2 exists... must be DX1 <br> */ <br>pDDraw-&gt;Release(); <br>FreeLibrary(DDHinst); <br>        OutputDebugString("Couldn't QI DDraw2\r\n"); <br>return; <br>    } <br>    /* <br>     * IDirectDraw2 exists. We must be at least DX2 <br>     */ <br>    pDDraw2-&gt;Release(); <br>    *pdwDXVersion = 0x200; <br> <br>    /* <br>     *  See if we can create the DirectInput object. <br>     */ <br>    DIHinst = LoadLibrary("DINPUT.DLL"); <br>    if (DIHinst == 0)  <br>    { <br>        /* <br>         * No DInput... must be DX2 <br>         */ <br>        OutputDebugString("Couldn't LoadLibrary DInput\r\n"); <br>pDDraw-&gt;Release(); <br>FreeLibrary(DDHinst); <br>return; <br>    } <br> <br>    DirectInputCreate = (DIRECTINPUTCREATE) <br>                            GetProcAddress(DIHinst, "DirectInputCreateA"); <br>    FreeLibrary(DIHinst); <br> <br>    if (DirectInputCreate == 0)  <br>    { <br>        /* <br>         * No DInput... must be DX2 <br>         */ <br>FreeLibrary(DDHinst); <br>pDDraw-&gt;Release(); <br>        OutputDebugString("Couldn't GetProcAddress DInputCreate\r\n"); <br>return; <br>    } <br> <br>    /* <br>     * DirectInputCreate exists. That's enough to tell us that we are at least DX3 <br>     */ <br>    *pdwDXVersion = 0x300; <br> <br>    /* <br>     * Checks for 3a vs 3b? <br>     */ <br> <br>    /* <br>     * We can tell if DX5 is present by checking for the existence of IDirectDrawSurface3. <br>     * First we need a surface to QI off of. <br>     */ <br>    DDSURFACEDESC desc; <br> <br>    ZeroMemory(&amp;desc, sizeof(desc)); <br>    desc.dwSize = sizeof(desc); <br>    desc.dwFlags = DDSD_CAPS; <br>    desc.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE; <br> <br>    hr = pDDraw-&gt;SetCooperativeLevel(NULL,DDSCL_NORMAL); <br>    if (FAILED(hr))  <br>    { <br>/* <br> * Failure. This means DDraw isn't properly installed. <br> */ <br>pDDraw-&gt;Release(); <br>FreeLibrary(DDHinst); <br>*pdwDXVersion = 0; <br>        OutputDebugString("Couldn't Set coop level\r\n"); <br>return; <br>    } <br> <br>    hr = pDDraw-&gt;CreateSurface(&amp;desc, &amp;pSurf, NULL); <br>    if (FAILED(hr))  <br>    { <br>/* <br> * Failure. This means DDraw isn't properly installed. <br> */ <br>pDDraw-&gt;Release(); <br>FreeLibrary(DDHinst); <br>*pdwDXVersion = 0; <br>        OutputDebugString("Couldn't CreateSurface\r\n"); <br>return; <br>    } <br> <br>    /* <br>     * Try for the IDirectDrawSurface3 interface. If it works, we're on DX5 at least <br>     */ <br>    if ( FAILED(pSurf-&gt;QueryInterface(IID_IDirectDrawSurface3,(LPVOID*)&amp;pSurf3)) ) <br>    { <br>        pDDraw-&gt;Release(); <br>        FreeLibrary(DDHinst); <br> <br>        return; <br>    } <br> <br>    /* <br>     * QI for IDirectDrawSurface3 succeeded. We must be at least DX5 <br>     */ <br>    *pdwDXVersion = 0x500; <br> <br>    pSurf-&gt;Release(); <br>    pDDraw-&gt;Release(); <br>    FreeLibrary(DDHinst); <br> <br>    return; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

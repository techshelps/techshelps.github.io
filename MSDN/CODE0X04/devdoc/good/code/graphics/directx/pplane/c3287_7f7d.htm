<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WINMAIN.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3289"></a>WINMAIN.CPP</h2>
<pre><code>/* <br>**----------------------------------------------------------------------------- <br>**  File:       WinMain.cpp <br>**  Purpose:    D3D sample showing DrawPrimitive functionality  <br>**  Notes: <br>** <br>**  Copyright (c) 1995 - 1997 by Microsoft, all rights reserved <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>/* <br>**----------------------------------------------------------------------------- <br>**  Include files <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>// Note:  Define INITGUID in one and only one file!!! <br>#define  INITGUID <br>#include "Common.h" <br>#include "Debug.h" <br>#include "WinMain.h" <br>#include "WinProc.h" <br>#include "DrvMgr.h" <br>#include "D3DWin.h" <br>#include "D3DScene.h" <br> <br> <br>/* <br>**----------------------------------------------------------------------------- <br>**  Global Variables <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>// Application variables <br>HINSTANCEg_hMainInstance= NULL; <br>HWND        g_hMainWindow       = NULL; <br>HACCEL      g_hMainAccel        = NULL; <br> <br>LPCTSTR     g_szMainName        = TEXT ("PPlane"); <br>LPCTSTR     g_szMainClass= TEXT ("PPlaneClass"); <br>LPCTSTR     g_szMainTitle= TEXT ("Paper Plane Sample"); <br>LPCTSTR     g_szPaused          = TEXT ("Paused"); <br> <br>INT         g_nExitCode         = 0L; <br> <br> <br>// <br>//D3D variables <br>// <br> <br>// Driver Management (enumeration of drivers, modes, D3D devices) <br>DDDrvMgrg_DrvMgr; <br> <br>// D3D Window management <br>LPD3DWindowg_lpd3dWin; <br> <br>// D3D Sample Scene <br>LPD3DSceneg_lpd3dScene; <br>                                                     <br> <br> <br>/* <br>**----------------------------------------------------------------------------- <br>**  Local Function Prototypes <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>HRESULT CreateD3DWindow ( <br>DWORDdwStyleEx,/* In:  Standard CreateWindowEx parameters */ <br>LPCTSTRlpszClass,  <br>    LPCTSTRlpszName,  <br>DWORDdwStyle, <br>intx,  <br>inty,  <br>intnWidth,  <br>intnHeight, <br>HWNDhParent,  <br>HMENUhMenu, <br>HINSTANCEhInstance,  <br>LPVOIDlpParam,  <br> <br>BOOL        fUseZBuffer,/* In:  Use Z-buffer */ <br>HWND *lphWnd,/* Out:Window handle */ <br>LPD3DWindow * lpd3dWnd);/* Out: Created D3DWindow pointer */ <br> <br>HRESULT DestroyD3DWindow (void); <br> <br>extern void GetDXVersion (LPDWORD pdwDXVersion, LPDWORD pdwDXPlatform); <br> <br> <br>/* <br>**----------------------------------------------------------------------------- <br>**  Function Definitions <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>/* <br>**----------------------------------------------------------------------------- <br>**  Name:       InitMain <br>**  Purpose:Initialize Application <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>BOOL InitMain (void) <br>{ <br>    DWORD dwDxVersion  = 0L; <br>    DWORD dwDxPlatform = 0L; <br> <br>    DPF (DEBUG_DETAILS, TEXT("InitMain")); <br> <br>    // Get hInstance handle <br>    g_hMainInstance = (HINSTANCE) GetModuleHandle (NULL); <br>    if (NULL == g_hMainInstance) <br>    { <br>// Error - GetModule Handle  <br> <br>DPF (DEBUG_CRITICAL, TEXT("InitMain - GetModuleHandle() failed.")); <br>        return FALSE; <br>    } <br> <br>    // Check for DX5.0 or greater <br>    GetDXVersion (&amp;dwDxVersion, &amp;dwDxPlatform); <br>    if (dwDxVersion &lt; 0x500) <br>    { <br>        MessageBox (NULL, TEXT("This App requires DX 5.0 or greater\r\nin order to run."), TEXT("Error"), MB_OK); <br>        return FALSE; <br>    } <br> <br>    // Init main window <br>    if (! InitMainWindow ()) <br>        return FALSE; <br> <br>    DPF (DEBUG_DETAILS, TEXT("InitMain - Success")); <br> <br>    // Success <br>    return TRUE; <br>} // End InitMain <br> <br> <br> <br>/* <br>**----------------------------------------------------------------------------- <br>**  Name:       FiniMain <br>**  Purpose:Cleanup Application <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>void FiniMain (void) <br>{ <br>DestroyD3DWindow (); <br>    UnregisterClass (g_szMainClass, g_hMainInstance); <br>} // End FiniMain <br>   <br> <br> <br>/* <br>**----------------------------------------------------------------------------- <br>**  Name:       RunMain <br>**  Purpose:    Main Message Pump <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>void RunMain (void) <br>{ <br>    MSG msg; <br> <br>    DPF (DEBUG_DETAILS, TEXT("RunMain - Enter")); <br> <br>    if ((! g_hMainInstance) || (! g_hMainWindow)) <br>    { <br>        return; <br>    } <br> <br>    g_hMainAccel = LoadAccelerators (g_hMainInstance, MAKEINTRESOURCE (IDR_MAIN_ACCEL)); <br>   <br>    // <br>    //  The Main Message loop <br>    // <br>    //  Note:  In order to catch Idle behavior we use PeekMessage instead of GetMessage <br>    // <br>    while (TRUE) <br>    { <br>        while (TRUE) <br>        { <br> <br>            if (! PeekMessage (&amp;msg, NULL, 0, 0, PM_REMOVE)) <br>            { <br>                // App is Idle <br>                break; <br>            } <br> <br>            // Exit App ?!? <br>            if (msg.message == WM_QUIT) <br>            { <br>                DPF (DEBUG_DETAILS, TEXT("RunMain - Exit")); <br>                g_nExitCode = msg.wParam; <br>                return; <br>            } <br> <br>            if (g_hMainAccel) <br>            { <br>                if (! TranslateAccelerator (g_hMainWindow, g_hMainAccel, &amp;msg)) <br>                { <br>                    TranslateMessage (&amp;msg); <br>                    DispatchMessage (&amp;msg); <br>                } <br>            } <br>            else <br>            { <br>                TranslateMessage (&amp;msg); <br>                DispatchMessage (&amp;msg); <br>            } <br>        } <br>       <br>        // Do some Idle processing <br>        OnIdle (g_hMainWindow); <br>    } // End While <br> <br>} // End RunMain <br> <br> <br>   <br>/* <br>**----------------------------------------------------------------------------- <br>**  Name:       WinMain <br>**  Purpose:    Application EntryPoint <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>INT WINAPI WinMain( <br>    HINSTANCE   hInstance,    // handle to current instance <br>    HINSTANCE   hPrevInstance,// handle to previous instance <br>    LPSTR       lpCmdLine,    // pointer to command line <br>    INT         nShowCmd)     // show state of window <br>{ <br>    g_nExitCode = 0; <br>     <br>    DPF (DEBUG_DETAILS, TEXT("WinMain - Enter")); <br> <br>    // Initialize App <br>    if (! InitMain ()) <br>        return g_nExitCode; <br> <br>    // Main Message Loop <br>    RunMain (); <br> <br>    // Cleanup App <br>    FiniMain (); <br> <br>    // Success <br>    DPF (DEBUG_DETAILS, TEXT("WinMain - Exit, status = %08lX"), (DWORD)g_nExitCode); <br>    return g_nExitCode; <br>} // End WinMain <br> <br> <br> <br> /* <br>**----------------------------------------------------------------------------- <br>**  Name:       InitMainWindow <br>**  Purpose:     <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>BOOL InitMainWindow (void) <br>{ <br>HRESULThResult; <br>    WNDCLASS    wc; <br>    HWND        hWnd; <br>RECTrWin; <br>DWORDdwStyle, dwStyleEx; <br>DWORDdwWidth, dwHeight; <br> <br>    DPF (DEBUG_DETAILS, TEXT("InitMainWindow - Enter")); <br> <br>    // Register Main Window Class <br>    wc.style            = CS_DBLCLKS;  <br>    wc.lpfnWndProc      = (WNDPROC)D3DWindowProc;// D3D Window proc <br>    wc.cbClsExtra       = 0;  <br>    wc.cbWndExtra       = 4;// Reserve space for lpd3dWindow pointer <br>    wc.hInstance        = g_hMainInstance;  <br>    wc.hIcon            = LoadIcon (g_hMainInstance, MAKEINTRESOURCE (IDI_MAIN_ICON)); <br>    wc.hCursor          = LoadCursor ((HINSTANCE)NULL, IDC_ARROW);  <br>    wc.hbrBackground    = (HBRUSH)GetStockObject (WHITE_BRUSH); <br>    wc.lpszMenuName     = MAKEINTRESOURCE (IDR_MAIN_MENU); <br>    wc.lpszClassName    = g_szMainClass;  <br> <br>    if (! RegisterClass (&amp;wc)) <br>    { <br>        // Error - Register class failed <br>        DPF (DEBUG_CRITICAL, TEXT("InitMainWindow - RegisterClass failed.")); <br>        return FALSE; <br>    } <br> <br>// Calculate Initial window size to  <br>// support client area of 256 x 256 <br>rWin.left= 0; <br>rWin.top= 0; <br>rWin.right  = DEF_WIN_SIZE_X; <br>rWin.bottom= DEF_WIN_SIZE_Y; <br> <br>// Setup a normal window with the following exceptions <br>//- No Minimize button (not supported yet...) <br>//- No Maximize button (not supported yet...) <br>dwStyleEx = WS_EX_OVERLAPPEDWINDOW; <br>dwStyle   = WS_OVERLAPPED | WS_CAPTION | WS_THICKFRAME | WS_SYSMENU; <br>AdjustWindowRectEx (&amp;rWin, dwStyle, TRUE, dwStyleEx); <br> <br>dwWidth = rWin.right - rWin.left; <br>dwHeight = rWin.bottom - rWin.top; <br> <br>// <br>    // Create Main Window <br>// <br>hResult = CreateD3DWindow (dwStyleEx,  <br>   g_szMainClass, <br>   g_szMainTitle, <br>   dwStyle, <br>   CW_USEDEFAULT, CW_USEDEFAULT, <br>   dwWidth, dwHeight, <br>   NULL, <br>   NULL, <br>   g_hMainInstance, <br>   NULL, <br>   TRUE,// Use Z-Buffer <br>   &amp;hWnd, <br>   &amp;g_lpd3dWin); <br>if (FAILED (hResult)) <br>    { <br>        // Error - CreateWindow failed <br>        DPF (DEBUG_CRITICAL, TEXT("InitMainWindow - CreateWindow failed.")); <br>        return FALSE; <br>    } <br> <br>// <br>// Create our D3D scene <br>// <br> <br>g_lpd3dScene = new D3DScene; <br>if (! g_lpd3dScene) <br>{ <br>        // Error - Construct D3D Scene failed <br>        DPF (DEBUG_CRITICAL, TEXT("InitMainWindow - Not enough memory for D3D scene.")); <br>        return FALSE; <br>} <br> <br>// Attach our D3DScene to the Window <br>hResult = g_lpd3dWin-&gt;AttachScene (g_lpd3dScene); <br>if (FAILED (hResult)) <br>{ <br>        // Error - Attaching our D3D Scene to our D3D Window failed <br>        DPF (DEBUG_CRITICAL, TEXT("InitMainWindow - AttachScene failed.")); <br>        return FALSE; <br>} <br> <br>    g_hMainWindow = hWnd; <br> <br>    // Success <br>    DPF (DEBUG_DETAILS, TEXT("InitMainWindow - Success")); <br>    return TRUE; <br>} // End InitMainWindow <br> <br>   <br>/* <br>**----------------------------------------------------------------------------- <br>**  DD/D3D Function Definitions <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>/* <br>**----------------------------------------------------------------------------- <br>** Name:    CreateD3DWindow <br>** Purpose: Creates a simple D3D window  <br>** Notes:    <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>HRESULT CreateD3DWindow ( <br>DWORDdwStyleEx,/* In:  CreateWindowEx parameters */ <br>LPCTSTRlpszClass,  <br>    LPCTSTRlpszName,  <br>DWORDdwStyle, <br>intx,  <br>inty,  <br>intnWidth,  <br>intnHeight, <br>HWNDhParent,  <br>HMENUhMenu, <br>HINSTANCEhInstance,  <br>LPVOIDlpParam,  <br> <br>BOOL        fUseZBuffer,/* In:  Use Z-buffer */ <br>HWND *lphWindow,/* Out:Window handle */ <br>LPD3DWindow * lpd3dWindow)/* Out: Created D3DWindow pointer */ <br>{ <br>    HRESULT             hResult; <br>    HWND                hWnd; <br>    LPD3DWindow         lpd3dWin; <br> <br>// Check Parameters <br>if (! lpszClass) <br>{ <br>REPORTERR (DDERR_INVALIDPARAMS); <br>return DDERR_INVALIDPARAMS; <br>} <br> <br>// Fill in defaults, if missing <br>if (! hInstance) <br>hInstance = GetModuleHandle (NULL); <br> <br>if (! hParent) <br>hParent = GetDesktopWindow (); <br> <br>    // Create D3D Window  <br>    lpd3dWin = new D3DWindow (); <br>    if (! lpd3dWin) <br>    { <br>// Error, not enough memory <br>REPORTERR (DDERR_OUTOFMEMORY); <br>        return DDERR_OUTOFMEMORY; <br>    } <br> <br>    // Create Extended Window <br>    hWnd = CreateWindowEx ( <br>                dwStyleEx,// extended window style <br>                lpszClass,// window class <br>                lpszName,    // window name (title) <br>                dwStyle,// window style <br>                x,// horizontal position of window <br>                y,// vertical position of window <br>                nWidth,// window width <br>                nHeight,            // window height <br>                hParent,// handle to parent window <br>                hMenu,                  // handle to menu <br>                hInstance,              // handle to app instance <br>                lpParam);               // Extra Data <br>    if (! hWnd) <br>    { <br>        // Error, unable to create window <br>        delete lpd3dWin; <br>REPORTERR (DDERR_GENERIC); <br>        return DDERR_GENERIC; <br>    } <br> <br> <br>    // <br>    //  Gotcha:  You must Show the window before you switch to Fullscreen <br>    //           Otherwise the following can happen. <br>    //   1. SetCooperativeLevel (DDSCL_EXCLUSIVE) works <br>    //             2. SetDisplayMode (w,h,bpp) loses the exclusive mode state <br>    //                because the window is not fully initialized. <br>    //                (DDraw gets confused by the responses it gets from the window) <br>    //             3. CreateSurface (PRIMARY | FLIP) fails with DDERR_NOEXCLUSIVEMODE. <br>    //                As the exlusive mode state has been lost <br>    // <br> <br>    // Show the Window and Paint it's contents <br>    ShowWindow (hWnd, SW_SHOWDEFAULT); <br>    UpdateWindow (hWnd); <br> <br>    // Create D3DWindow from hWnd <br>    hResult = lpd3dWin-&gt;Create (hWnd); <br>    if (FAILED (hResult)) <br>    { <br>        // Error, unable to create window <br>        delete lpd3dWin; <br>        DestroyWindow (hWnd); <br>        return hResult; <br>    } <br> <br>    // Return results <br>    if (lphWindow) <br>        *lphWindow = hWnd; <br>    if (lpd3dWindow) <br>        *lpd3dWindow = lpd3dWin; <br> <br>    // Success <br>    return DD_OK; <br>} // End CreateD3DWindow <br> <br> <br> <br>/* <br>**----------------------------------------------------------------------------- <br>** Name:    DestroyD3DWindow <br>** Purpose: Destroys a D3DWindow (window and D3DWindow object) <br>**----------------------------------------------------------------------------- <br>*/ <br> <br>HRESULT DestroyD3DWindow (void) <br>{ <br>// Check Parameters <br>    if ((g_hMainWindow) &amp;&amp; (IsWindow (g_hMainWindow))) <br>{ <br>DestroyWindow (g_hMainWindow); <br>g_hMainWindow = NULL; <br>} <br> <br>    // Free memory associated with D3DWindow Object <br>    if (g_lpd3dWin) <br>{ <br>        delete g_lpd3dWin; <br>g_lpd3dWin = NULL; <br>} <br> <br>// Sucess <br>    return DD_OK; <br>} // End DestroyD3DWindow <br> <br> <br>/* <br>**----------------------------------------------------------------------------- <br>**  End of File <br>**----------------------------------------------------------------------------- <br>*/ <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DRVPROC.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3811"></a>DRVPROC.C</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br> * <br> **************************************************************************/ <br>/**************************************************************************** <br> * <br> *   drvproc.c <br> * <br> ***************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;vfw.h&gt; <br> <br>#include "TxtOut.h" <br> <br>HMODULE ghModule; <br> <br>/*************************************************************************** <br> * <br> * DriverProc The entry point for an installable driver. <br> * <br> ***************************************************************************/ <br> <br>LRESULT WINAPI DriverProc( <br>DWORD dwDriverID, <br>HDRVR hDriver, <br>UINT uiMessage, <br>LPARAM lParam1, <br>LPARAM lParam2) <br>{ <br>INSTINFO *pi = (INSTINFO *)(UINT)dwDriverID; <br> <br>switch (uiMessage) <br>{ <br>case DRV_LOAD: <br>return (LRESULT) Load(); <br> <br>case DRV_FREE: <br>Free(); <br>return (LRESULT)1L; <br> <br>case DRV_OPEN: <br>// if being opened with no open struct, then return a non-zero <br>// value without actually opening <br>if (lParam2 == 0L) <br>return 0xFFFF0000; <br> <br>return (LRESULT)(DWORD)(UINT)Open((ICOPEN FAR *) lParam2); <br> <br>      case DRV_CLOSE: <br>      if (dwDriverID != 0xFFFF0000) <br>          Close(pi); <br> <br>return (LRESULT)1L; <br> <br>/********************************************************************* <br> <br>state messages <br> <br>*********************************************************************/ <br> <br>case DRV_QUERYCONFIGURE: // configuration from drivers applet <br>return (LRESULT)0L; <br> <br>case DRV_CONFIGURE: <br>return DRV_OK; <br> <br>case ICM_CONFIGURE: <br>// <br>// return ICERR_OK if you will do a configure box, error otherwise <br>// <br>if (lParam1 == -1) <br>return QueryConfigure(pi) ? ICERR_OK : ICERR_UNSUPPORTED; <br>else <br>return Configure(pi, (HWND)lParam1); <br> <br>case ICM_ABOUT: <br>// <br>// return ICERR_OK if you will do a about box, error otherwise <br>// <br>if (lParam1 == -1) <br>return QueryAbout(pi) ? ICERR_OK : ICERR_UNSUPPORTED; <br>else <br>return About(pi, (HWND)lParam1); <br> <br>case ICM_GETSTATE: <br>return GetState(pi, (LPVOID)lParam1, (DWORD)lParam2); <br> <br>case ICM_SETSTATE: <br>return SetState(pi, (LPVOID)lParam1, (DWORD)lParam2); <br> <br>case ICM_GETINFO: <br>return GetInfo(pi, (ICINFO FAR *)lParam1, (DWORD)lParam2); <br> <br>/********************************************************************* <br> <br>draw messages <br> <br>*********************************************************************/ <br> <br>case ICM_DRAW_QUERY: <br>return DrawQuery(pi, (LPVOID FAR *)lParam1); <br> <br>case ICM_DRAW_BEGIN: <br>return DrawBegin(pi,(ICDRAWBEGIN FAR *)lParam1, (DWORD)lParam2); <br> <br>case ICM_DRAW: <br>return Draw(pi,(ICDRAW FAR *)lParam1, (DWORD)lParam2); <br> <br>case ICM_DRAW_END: <br>return DrawEnd(pi); <br> <br>/********************************************************************* <br> <br>standard driver messages <br> <br>*********************************************************************/ <br> <br>case DRV_DISABLE: <br>case DRV_ENABLE: <br>return (LRESULT)1L; <br> <br>case DRV_INSTALL: <br>case DRV_REMOVE: <br>return (LRESULT)DRV_OK; <br>} <br> <br>if (uiMessage &lt; DRV_USER) <br>return DefDriverProc(dwDriverID, hDriver, uiMessage, <br>lParam1,lParam2); <br>else <br>return ICERR_UNSUPPORTED; <br>} <br> <br>/**************************************************************************** <br> * <br> * DllMain Library initialization code. <br> * <br> ***************************************************************************/ <br>APIENTRY DllMain(HANDLE, DWORD, LPVOID); <br>APIENTRY DllMain( <br>HANDLE hModule, <br>DWORD dwReason, <br>LPVOID lpReserved ) <br>{ <br>switch( dwReason) <br>{ <br>case DLL_PROCESS_ATTACH: <br>if(ghModule == NULL) <br>ghModule = (HMODULE)hModule; <br>break; <br>case DLL_THREAD_ATTACH: <br>break; <br>case DLL_THREAD_DETACH: <br>break; <br>case DLL_PROCESS_DETACH: <br>break; <br>} <br>return TRUE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

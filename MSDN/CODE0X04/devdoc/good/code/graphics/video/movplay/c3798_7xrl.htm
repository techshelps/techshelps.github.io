<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MOVPLAY2.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3801"></a>MOVPLAY2.C</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br> * <br> **************************************************************************/ <br>/*-------------------------------------------------------------------- <br>| <br>| MovPlay2.c - Sample Win app to play AVI movies using mciSendString <br>| <br>| Movie Functions supported: <br>|Play/Pause <br>|Home/End <br>|Step/ReverseStep <br>| <br>+--------------------------------------------------------------------*/ <br> <br>#define  STRICT <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;direct.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;digitalv.h&gt; <br>#include "movplay.h" <br> <br>//---------------------------------------------------------------------------- <br>#define BUFSIZE 260 <br>#define MOVPLAY_CLASS "movplay" <br>#define AVI_VIDEO "avivideo" <br>#define OPEN_AVI_VIDEO "open avivideo" <br>#define CLOSE_AVI_VIDEO "close avivideo" <br>#define MOV_REALIZE "realize mov" <br>#define MOV_SEEK_TO_START "seek mov to start" <br>#define MOV_SEEK_TO_END "seek mov to end" <br>#define MOV_CLOSE "close mov" <br>#define MOV_SOURCE "where mov source" <br>#define MOV_OPEN_FORMAT "open %s alias mov style child parent %d" <br>#define MOV_SHOW "window mov state show" <br>#define MOV_HANDLE "status mov window handle" <br>#define MOV_REVERSE "play mov reverse notify" <br>#define MOV_FORWARD "play mov notify" <br>#define MOV_PAUSE "pause mov" <br>#define MOV_FORWARD_STEP "step mov by 1" <br>#define MOV_REVERSE_STEP "step mov reverse by 1" <br>//---------------------------------------------------------------------------- <br>//function declarations <br> <br>LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam); <br>BOOL CALLBACK    AboutDlgProc(HWND hwnd, UINT msg, WPARAM wParam,LPARAM lParam); <br> <br>static BOOL initAVI(void); <br>static void termAVI(void); <br>static HWND initApp(HINSTANCE, HINSTANCE, int); <br>static void menubarUpdate(HWND); <br>static void titlebarUpdate(HWND hWnd, LPSTR lpstrMovie); <br>static void positionMovie(HWND); <br>static void fileCloseMovie(HWND); <br>static void fileOpenMovie(HWND); <br>static void playMovie(HWND, int); <br>static void seekMovie(HWND, int); <br>static void stepMovie(HWND, int); <br>static BOOL FormatFilterString(UINT, LPSTR); <br>static void MovPlay_OnInitMenuPopup(HWND, HMENU, int, BOOL); <br>static void MovPlay_OnCommand(HWND, int, HWND, UINT); <br>static void MovPlay_OnSize(HWND, UINT, int, int); <br>static void MovPlay_OnDestroy(HWND); <br> <br> <br>//---------------------------------------------------------------------------- <br>//AVI stuff to keep around <br> <br>HINSTANCE ghInst; <br>WORD gwMCIDeviceID = 0;/* MCI Device ID for the AVI file */ <br>HWND ghwndMovie;/* window handle of the movie */ <br>BOOL gfPlaying = FALSE;/* Play flag: TRUE == playing, FALSE == paused */ <br>BOOL gfMovieOpen = FALSE;/* Open flag: TRUE == movie open, FALSE = none */ <br>HANDLE ghAccel = NULL;/* accelerator table */ <br>HMENU ghMenuBar = NULL;/* menu bar handle */ <br>char gszBuffer[BUFSIZE]; <br> <br>//---------------------------------------------------------------------------- <br> <br>/*--------------------------------------------------------------+ <br>| initAVI - initialize avi libraries| <br>|| <br>+--------------------------------------------------------------*/ <br>static BOOL initAVI( <br>void) <br>{ <br>return mciSendString(OPEN_AVI_VIDEO, NULL, 0, NULL) == 0; <br>} <br> <br>/*--------------------------------------------------------------+ <br>| termAVI - Closes the opened AVI file and the opened device    | <br>|           type.                                               | <br>|                                                               | <br>+--------------------------------------------------------------*/ <br>void termAVI( <br>void) <br>{ <br>mciSendString(CLOSE_AVI_VIDEO, NULL, 0, NULL); <br>} <br>/*--------------------------------------------------------------+ <br>| initApp - initialize the app overall.| <br>|| <br>| Returns the Window handle for the app on success, NULL if| <br>| there is a failure.| <br>|| <br>+--------------------------------------------------------------*/ <br>HWND initApp( <br>HINSTANCE hInstance, <br>HINSTANCE hPrevInstance, <br>int nCmdShow) <br>{ <br>HWNDhWnd;/* window handle to return */ <br>        char szAppName[BUFSIZE]; <br> <br>        ghInst = hInstance; <br> <br>if (!hPrevInstance){ <br>WNDCLASS    wndclass; <br> <br>wndclass.style= CS_DBLCLKS | CS_HREDRAW | CS_VREDRAW; <br>wndclass.lpfnWndProc= WndProc; <br>wndclass.cbClsExtra= 0; <br>wndclass.cbWndExtra= 0; <br>wndclass.hInstance= hInstance; <br>wndclass.hIcon= LoadIcon (hInstance, "AppIcon"); <br>wndclass.hCursor= LoadCursor (NULL, IDC_ARROW); <br>wndclass.hbrBackground= (HBRUSH) (COLOR_WINDOW + 1); <br>wndclass.lpszMenuName= MOVPLAY_CLASS; <br>wndclass.lpszClassName= MOVPLAY_CLASS; <br> <br>if (!RegisterClass(&amp;wndclass)){ <br>        LoadString( ghInst, IDS_APPERR, szAppName, BUFSIZE ); <br>LoadString( ghInst, IDS_REGCLSFAILED, gszBuffer, BUFSIZE ); <br>MessageBox(NULL, gszBuffer, szAppName, MB_OK); <br>return NULL; <br>} <br>} <br> <br>        LoadString( ghInst, IDS_APPNAME, szAppName, BUFSIZE ); <br> <br>/* create the main window for the app */ <br>hWnd = CreateWindow(MOVPLAY_CLASS, szAppName, WS_OVERLAPPEDWINDOW | <br>WS_CLIPCHILDREN, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, <br>CW_USEDEFAULT, NULL, NULL, hInstance, NULL); <br> <br>if (hWnd == NULL){ <br>        LoadString( ghInst, IDS_APPERR, szAppName, BUFSIZE ); <br>LoadString( ghInst, IDS_CRTWNDFAILED, gszBuffer, BUFSIZE ); <br>MessageBox(NULL, gszBuffer, szAppName, MB_OK); <br>return NULL; <br>} <br> <br>ghMenuBar = GetMenu(hWnd);/* get the menu bar handle */ <br>menubarUpdate(hWnd);/* update menu bar to disable Movie menu */ <br> <br>/* Show the main window */ <br>ShowWindow(hWnd, nCmdShow); <br>UpdateWindow(hWnd); <br> <br>/* load the accelerator table */ <br>ghAccel = LoadAccelerators(hInstance, MOVPLAY_CLASS); <br> <br>return hWnd; <br>} <br> <br> <br>/*--------------------------------------------------------------+ <br>| WinMain - main routine.| <br>|| <br>+--------------------------------------------------------------*/ <br>int PASCAL WinMain( <br>HINSTANCE hInstance, <br>HINSTANCE hPrevInstance, <br>LPSTR lpszCmdParam, <br>int nCmdShow) <br>{ <br>HWND        hWnd; <br>MSG         msg; <br> <br>if (!initAVI()) <br>return 0; <br> <br>if ((hWnd = initApp(hInstance, hPrevInstance, nCmdShow)) == NULL) <br>return 0;/* died initializing, bail out */ <br> <br>/* main message loop, be sure to handle accelerators */ <br>while (GetMessage(&amp;msg, NULL, 0, 0)){ <br>if (!TranslateAccelerator(hWnd, ghAccel, &amp;msg)) { <br>TranslateMessage(&amp;msg); <br>DispatchMessage(&amp;msg); <br>} <br>} <br>return msg.wParam; <br>} <br> <br>/*--------------------------------------------------------------+ <br>| MovPlay_OnInitMenuPopup - Message handler for WM_INITMENUPOPUP| <br>|| <br>+--------------------------------------------------------------*/ <br>static void MovPlay_OnInitMenuPopup( <br>HWND hwnd, <br>HMENU hMenu, <br>int item, <br>BOOL fSystemMenu) <br>{ <br>UINT uEnable; <br>/* be sure this isn't the system menu */ <br>if (fSystemMenu) <br>return; <br> <br>switch (item){ <br>case 0: /* file menu */ <br>/* turn on/off CLOSE &amp; PLAY */ <br>if(gfMovieOpen) <br>uEnable = MF_ENABLED|MF_BYCOMMAND; <br>else <br>uEnable = MF_GRAYED|MF_BYCOMMAND; <br>EnableMenuItem(hMenu, IDM_CLOSE, uEnable); <br>break; <br> <br>case 1:/* Movie menu */ <br>/* check or uncheck the PLAY menu item */ <br>if (gfPlaying) <br>uEnable = MF_CHECKED|MF_BYCOMMAND; <br>else <br>uEnable = MF_UNCHECKED|MF_BYCOMMAND; <br>CheckMenuItem(hMenu, IDM_PLAY, uEnable); <br>break; <br>} /* switch */ <br>return; <br>} <br>/*--------------------------------------------------------------+ <br>| MovPlay_OnCommand - Message handler for WM_COMMAND| <br>|                                                               | <br>+--------------------------------------------------------------*/ <br>static void MovPlay_OnCommand( <br>HWND hWnd, <br>int id, <br>HWND hwndCtl, <br>UINT codeNotify) <br>{ <br>/* handle the menu commands */ <br>switch (id) { <br>                case IDM_ABOUT: <br>                        DialogBox(ghInst, MAKEINTRESOURCE(IDD_ABOUT), hWnd, AboutDlgProc); <br>                        break; <br>/* File Menu */ <br>case IDM_OPEN: <br>fileOpenMovie(hWnd); <br>break; <br>case IDM_CLOSE: <br>fileCloseMovie(hWnd); <br>break; <br>case IDM_EXIT: <br>PostMessage(hWnd, WM_CLOSE, 0, 0L); <br>break; <br>/* Movie Menu - note some of these are by */ <br>/* keyboard only, especially the REVERSE  */ <br>/* commands.  */ <br>case IDM_PLAY: <br>case IDM_RPLAY: <br>playMovie(hWnd, id); <br>break; <br>case IDM_HOME: <br>case IDM_END: <br>seekMovie(hWnd, id); <br>break; <br>case IDM_STEP: <br>case IDM_RSTEP: <br>stepMovie(hWnd,id); <br>break; <br>} <br>return; <br>} <br>/*--------------------------------------------------------------+ <br>| MovPlay_OnSize - Message handler for WM_SIZE| <br>|| <br>+--------------------------------------------------------------*/ <br>static void MovPlay_OnSize( <br>HWND hWnd, <br>UINT state, <br>int cx, <br>int cy) <br>{ <br>positionMovie(hWnd);/* re-center the movie */ <br>return; <br>} <br>/*--------------------------------------------------------------+ <br>| MovPlay_OnDestroy - Message handler for WM_DESTROY| <br>|| <br>+--------------------------------------------------------------*/ <br>static void MovPlay_OnDestroy( <br>HWND hWnd) <br>{ <br>if (gfMovieOpen) <br>fileCloseMovie(hWnd); <br>termAVI(); <br>PostQuitMessage(0); <br>return; <br>} <br>/*--------------------------------------------------------------+ <br>| WndProc - window proc for the app| <br>|| <br>+--------------------------------------------------------------*/ <br>LRESULT CALLBACK WndProc( <br>HWND hWnd, <br>UINT message, <br>WPARAM wParam, <br>LPARAM lParam) <br>{ <br>switch (message){ <br>case WM_INITMENUPOPUP: <br>return HANDLE_WM_INITMENUPOPUP(hWnd, wParam, lParam, MovPlay_OnInitMenuPopup); <br>break; <br> <br>case WM_COMMAND: <br>return HANDLE_WM_COMMAND(hWnd, wParam, lParam, MovPlay_OnCommand); <br>break; <br> <br>case WM_SIZE: <br>return HANDLE_WM_SIZE(hWnd, wParam, lParam, MovPlay_OnSize); <br>break; <br> <br>case WM_DESTROY: <br>return HANDLE_WM_DESTROY(hWnd, wParam, lParam, MovPlay_OnDestroy); <br>break; <br> <br>        // We need to realize the AVI's palette <br>case WM_QUERYNEWPALETTE: <br>case WM_PALETTECHANGED: <br>case WM_ACTIVATE: <br>            mciSendString(MOV_REALIZE, NULL, 0, NULL); <br>    break; <br> <br>case MM_MCINOTIFY: <br>/* This is where we check the status of an AVI*/ <br>/* movie that might have been playing.  We do*/ <br>/* the play with MCI_NOTIFY on so we should get*/ <br>/* a MCI_NOTIFY_SUCCESSFUL if the play*/ <br>/* completes on it's own.*/ <br>switch(wParam){ <br>case MCI_NOTIFY_SUCCESSFUL: <br>/* the play finished, let's rewind */ <br>/* and clear our flag.   */ <br>gfPlaying = FALSE; <br>mciSendString(MOV_SEEK_TO_START, NULL, 0, NULL); <br>return 0; <br>} <br>} /* switch */ <br>return DefWindowProc(hWnd, message, wParam, lParam); <br>} <br> <br>/*--------------------------------------------------------------+ <br>| menubarUpdate - update the menu bar based on the &lt;gfMovieOpen&gt; | <br>|  flag value.  This will turn on/off the| <br>|  Movie menu.| <br>|| <br>+--------------------------------------------------------------*/ <br>static void menubarUpdate( <br>HWND hWnd) <br>{ <br>WORD w; <br> <br>if (gfMovieOpen){ <br>w = MF_ENABLED|MF_BYPOSITION; <br>} else { <br>w = MF_GRAYED|MF_BYPOSITION; <br>} <br>EnableMenuItem(ghMenuBar, 1, w);/* change the Movie menu (#1) */ <br>DrawMenuBar(hWnd);/* re-draw the menu bar */ <br>} <br> <br>/*--------------------------------------------------------------+ <br>| titlebarUpdate - update the title bar to include the name| <br>|   of the movie playing.| <br>|| <br>+--------------------------------------------------------------*/ <br>static void titlebarUpdate( <br>HWND hWnd, <br>LPSTR lpstrMovie) <br>{ <br>char szNewTitle[2*BUFSIZE];// space for the title <br>char szAppName[BUFSIZE]; <br> <br>LoadString( ghInst, IDS_APPNAME, szAppName, BUFSIZE ); <br> <br>if (lpstrMovie != NULL) <br>wsprintf(szNewTitle,"%s - %s", (LPSTR)szAppName,(LPSTR)lpstrMovie); <br>else <br>lstrcpy(szNewTitle, szAppName); <br>SetWindowText(hWnd, szNewTitle); <br>} <br> <br>/*--------------------------------------------------------------+ <br>| positionMovie - sets the movie rectange &lt;rcMovie&gt; to be| <br>|centered within the app's window.| <br>|| <br>+--------------------------------------------------------------*/ <br>static VOID positionMovie( <br>HWND hWnd) <br>{ <br>RECT rcMovie; <br>RECT rcClient; <br>RECT rcMovieBounds; <br>char achRect[128]; <br>char *p; <br> <br>/* if there is no movie yet then just get out of here */ <br>if (!gfMovieOpen) <br>return; <br> <br>GetClientRect(hWnd, &amp;rcClient);/* get the parent windows rect */ <br> <br>/* get the original size of the movie */ <br>mciSendString(MOV_SOURCE, achRect, sizeof(achRect), NULL); <br> <br>SetRectEmpty(&amp;rcMovieBounds);// zero out movie rect <br>p = achRect;// point to rectangle string returned by where command <br>while (*p == ' ') p++;// skip over starting spaces <br>while (*p != ' ') p++;// skip over the x (which is 0) <br>while (*p == ' ') p++;// skip over spaces between x and y <br>while (*p != ' ') p++;// skip over the y (which is 0) <br>while (*p == ' ') p++;// skip over the spaces between y and width <br> <br>/* now find the width */ <br>for (; *p &gt;= '0' &amp;&amp; *p &lt;= '9'; p++) <br>rcMovieBounds.right = (10 * rcMovieBounds.right) + (*p - '0'); <br>while (*p == ' ') p++;// skip spaces between width and height <br> <br>/* now find the height */ <br>for (; *p &gt;= '0' &amp;&amp; *p &lt;= '9'; p++) <br>rcMovieBounds.bottom = (10 * rcMovieBounds.bottom) + (*p - '0'); <br> <br>/* figure out where to position the window at */ <br>rcMovie.left = (rcClient.right/2) - (rcMovieBounds.right / 2); <br>rcMovie.top = (rcClient.bottom/2) - (rcMovieBounds.bottom / 2); <br>rcMovie.right = rcMovie.left + rcMovieBounds.right; <br>rcMovie.bottom = rcMovie.top + rcMovieBounds.bottom; <br> <br>/* reposition the playback (child) window */ <br>MoveWindow(ghwndMovie, rcMovie.left, rcMovie.top, <br>rcMovieBounds.right, rcMovieBounds.bottom, TRUE); <br>} <br> <br>/*--------------------------------------------------------------+ <br>| fileCloseMovie - close the movie and anything associated| <br>|   with it.| <br>|| <br>| This function clears the &lt;gfPlaying&gt; and &lt;gfMovieOpen&gt; flags| <br>|| <br>+--------------------------------------------------------------*/ <br>static void fileCloseMovie(HWND hWnd) <br>{ <br>mciSendString(MOV_CLOSE, NULL, 0, NULL); <br> <br>gfPlaying = FALSE;// can't be playing any longer <br>gfMovieOpen = FALSE;// no more movies open <br> <br>titlebarUpdate(hWnd, NULL);// title bar back to plain <br>menubarUpdate(hWnd);// update menu bar <br> <br>/* cause a total repaint to occur */ <br>InvalidateRect(hWnd, NULL, TRUE); <br>UpdateWindow(hWnd); <br>} <br> <br> <br>/*--------------------------------------------------------------+ <br>| fileOpenMovie - open an AVI movie. Use CommDlg open box to| <br>|        open and then handle the initialization to| <br>|show the movie and position it properly.  Keep| <br>|the movie paused when opened.| <br>|| <br>|Sets &lt;gfMovieOpened&gt; on success.| <br>+--------------------------------------------------------------*/ <br>static void fileOpenMovie( <br>HWND hWnd) <br>{ <br>OPENFILENAME ofn; <br> <br>static char szFile [BUFSIZE]; <br>static char szFileTitle [BUFSIZE]; <br>static int  nLastFilter = 1;  /* keep last file-type opened */ <br>static char szFilter [BUFSIZE]; <br> <br>FormatFilterString( IDS_FILTERSTRING, szFilter ); <br> <br>/* use the OpenFile dialog to get the filename */ <br>memset(&amp;ofn, 0, sizeof(ofn)); <br>ofn.lStructSize = sizeof(ofn); <br>ofn.hwndOwner = hWnd; <br>ofn.lpstrFilter = szFilter; <br>ofn.nFilterIndex = nLastFilter; <br>ofn.lpstrFile = szFile; <br>ofn.nMaxFile = sizeof(szFile); <br>ofn.lpstrFileTitle = szFileTitle; <br>ofn.nMaxFileTitle = sizeof(szFileTitle); <br>ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST; <br> <br>/* use CommDlg to get our filename */ <br>if (GetOpenFileName(&amp;ofn)){ <br>char szCommand[BUFSIZE]; <br>DWORD  dw; <br> <br>/* we got a filename, now close any old movie and open */ <br>/* the new one.*/ <br>if (gfMovieOpen) <br>fileCloseMovie(hWnd); <br> <br>/* we have a .AVI movie to open, use MCI */ <br>/* <br>| build up the string - <br>| open alias mov parent HWND FILENAME <br>| to pass to mciSendString <br>*/ <br>wsprintf(szCommand,MOV_OPEN_FORMAT, (LPSTR)ofn.lpstrFile, (int)hWnd); <br> <br>/* try to open the file */ <br>if (mciSendString(szCommand, NULL, 0, NULL) == 0){ <br>gfMovieOpen = TRUE; <br>/* we opened the file o.k., now set up to */ <br>/* play it.   */ <br>mciSendString(MOV_SHOW, NULL, 0, NULL); <br>/* get the window handle */ <br>if ((dw = mciSendString(MOV_HANDLE, szCommand, sizeof(szCommand), <br>NULL)) == 0L) <br>ghwndMovie = (HWND)atoi(szCommand); <br>else { <br>mciGetErrorString(dw, szCommand, sizeof(szCommand)); <br>MessageBox(hWnd, szCommand, NULL, MB_ICONEXCLAMATION|MB_OK); <br>} <br>/* now get the movie centered */ <br>positionMovie(hWnd); <br>} else { <br>/* generic error for open */ <br>LoadString( ghInst, IDS_NOOPEN, gszBuffer, BUFSIZE ); <br>MessageBox(hWnd, gszBuffer, NULL, MB_ICONEXCLAMATION|MB_OK); <br>gfMovieOpen = FALSE; <br>} <br>} <br>/* update menu and title bars */ <br>if (gfMovieOpen) <br>titlebarUpdate(hWnd, (LPSTR)ofn.lpstrFileTitle); <br>else <br>titlebarUpdate(hWnd, NULL); <br>menubarUpdate(hWnd); <br> <br>/* cause an update to occur */ <br>InvalidateRect(hWnd, NULL, FALSE); <br>UpdateWindow(hWnd); <br>} <br> <br>/*--------------------------------------------------------------+ <br>| playMovie - play/pause the movie depending on the state| <br>|of the &lt;gfPlaying&gt; flag.| <br>|| <br>| This function sets the &lt;gfPlaying&gt; flag appropriately when done| <br>|| <br>+--------------------------------------------------------------*/ <br>static void playMovie( <br>HWND hWnd, <br>int nDirection) <br>{ <br>gfPlaying = !gfPlaying;/* swap the play flag */ <br>if(!nDirection) <br>gfPlaying = FALSE;/* nDirection == NULL means PAUSE */ <br> <br>/* play/pause the AVI movie */ <br>if (gfPlaying){ <br>if (nDirection == IDM_RPLAY){ <br>mciSendString(MOV_REVERSE, NULL, 0, hWnd); <br>} else { <br>mciSendString(MOV_FORWARD, NULL, 0, hWnd); <br>} <br>} else { <br>/* tell it to pause */ <br>mciSendString(MOV_PAUSE, NULL, 0, NULL); <br>} <br>} <br> <br>/*--------------------------------------------------------------+ <br>| seekMovie - seek in the movie depending on the wAction.| <br>|      Possible actions are IDM_HOME (start of movie) or| <br>|      IDM_END (end of movie)| <br>|| <br>|      Always stop the play before seeking.| <br>|| <br>+--------------------------------------------------------------*/ <br>static void seekMovie( <br>HWND hWnd, <br>int nAction) <br>{ <br>/* first stop the movie from playing if it is playing */ <br>if (gfPlaying){ <br>playMovie(hWnd, 0); <br>} <br> <br>if (nAction == IDM_HOME){ <br>/* home the movie */ <br>mciSendString(MOV_SEEK_TO_START, NULL, 0, NULL); <br>} else if (nAction == IDM_END){ <br>/* go to the end of the movie */ <br>mciSendString(MOV_SEEK_TO_END, NULL, 0, NULL); <br>} <br>} <br> <br>/*--------------------------------------------------------------+ <br>| stepMovie - step forward or reverse in the movie.  wDirection| <br>|can be IDM_STEP (forward) or IDM_RSTEP (reverse)| <br>|| <br>|Again, stop the play if one is in progress.| <br>|| <br>+--------------------------------------------------------------*/ <br>static void stepMovie( <br>HWND hWnd, <br>int nDirection) <br>{ <br>if (gfPlaying) <br>playMovie(hWnd, 0);  /* turn off the movie */ <br> <br>if (nDirection == IDM_STEP) <br>mciSendString(MOV_FORWARD_STEP, NULL, 0, NULL); <br>else <br>mciSendString(MOV_REVERSE_STEP, NULL,0, NULL); <br>} <br>/*--------------------------------------------------------------+ <br>| FormatFilterString | <br>|| <br>+--------------------------------------------------------------*/ <br>static BOOL FormatFilterString( <br>UINT uID, <br>LPSTR lpszString ) <br>{ <br>int nLength, nCtr = 0; <br>char chWildCard; <br> <br>*lpszString = 0; <br> <br>nLength = LoadString( ghInst, uID, lpszString, BUFSIZE ); <br> <br>chWildCard = lpszString[nLength-1]; <br> <br>while( lpszString[nCtr] ) { <br>if( lpszString[nCtr] == chWildCard ) <br>lpszString[nCtr] = 0; <br>nCtr++; <br>} <br> <br>return TRUE; <br>} <br> <br>/* AboutDlgProc() <br> * <br> * Dialog Procedure for the "about" dialog box. <br> * <br> */ <br> <br>BOOL CALLBACK AboutDlgProc( <br>HWNDhwnd, <br>UINTmsg, <br>WPARAMwParam, <br>LPARAMlParam) <br>{ <br>switch (msg) { <br>case WM_COMMAND: <br>EndDialog(hwnd, TRUE); <br>return TRUE; <br>case WM_INITDIALOG: <br>return TRUE; <br>} <br>return FALSE; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROFILE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3820"></a>PROFILE.C</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br> * <br> **************************************************************************/ <br>/**************************************************************************** <br> * <br> *   profile.c: Stores profile info in the Registry  <br> * <br> *   Vidcap32 Source code <br> * <br> ***************************************************************************/ <br> <br>/* <br> * win32/win16 utility functions to read and write profile items <br> * for multimedia tools <br> */ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br> <br>#ifdef _WIN32 <br>#define KEYNAME     "Software\\Microsoft\\Multimedia Tools\\" <br>#define ROOTKEY     HKEY_CURRENT_USER <br>#else <br>#define INIFILE    "mmtools.ini" <br>#endif <br> <br> <br>/* <br> * read a BOOL flag from the profile, or return default if <br> * not found. <br> */ <br>BOOL <br>mmGetProfileFlag(LPSTR appname, LPSTR valuename, BOOL bDefault) <br>{ <br>#ifdef _WIN32 <br>    char achName[MAX_PATH]; <br>    HKEY hkey; <br>    DWORD dwType; <br>    BOOL bValue = bDefault; <br>    DWORD dwData; <br>    int cbData; <br> <br> <br>    lstrcpy(achName, KEYNAME); <br>    lstrcat(achName, appname); <br>    if (RegOpenKey(ROOTKEY, achName, &amp;hkey) != ERROR_SUCCESS) { <br>        return(bDefault); <br>    } <br> <br>    cbData = sizeof(dwData); <br>    if (RegQueryValueEx( <br>        hkey, <br>        valuename, <br>        NULL, <br>        &amp;dwType, <br>        (PBYTE) &amp;dwData, <br>        &amp;cbData) == ERROR_SUCCESS) { <br>            if (dwType == REG_DWORD) { <br>                if (dwData) { <br>                    bValue = TRUE; <br>                } else { <br>                    bValue = FALSE; <br>                } <br>            } <br>    } <br> <br>    RegCloseKey(hkey); <br> <br>    return(bValue); <br>#else <br>    char ach[10]; <br> <br>    GetPrivateProfileString(appname, valuename, "X", ach, sizeof(ach), <br>            INIFILE); <br> <br>    switch(ach[0]) { <br>    case 'N': <br>    case 'n': <br>    case '0': <br>        return(FALSE); <br> <br>    case 'Y': <br>    case 'y': <br>    case '1': <br>        return(TRUE); <br> <br>    default: <br>        return(bDefault); <br>    } <br>#endif <br>} <br> <br> <br>/* <br> * write a boolean value to the registry, if it is not the <br> * same as the default or the value already there <br> */ <br>VOID <br>mmWriteProfileFlag(LPSTR appname, LPSTR valuename, BOOL bValue, BOOL bDefault) <br>{ <br>    if (mmGetProfileFlag(appname, valuename, bDefault) == bValue) { <br>        return; <br>    } <br> <br>#ifdef _WIN32 <br>    { <br>        char achName[MAX_PATH]; <br>        HKEY hkey; <br> <br>        lstrcpy(achName, KEYNAME); <br>        lstrcat(achName, appname); <br>        if (RegCreateKey(ROOTKEY, achName, &amp;hkey) == ERROR_SUCCESS) { <br>            RegSetValueEx( <br>                hkey, <br>                valuename, <br>                0, <br>                REG_DWORD, <br>                (PBYTE) &amp;bValue, <br>                sizeof(bValue) <br>            ); <br> <br>            RegCloseKey(hkey); <br>        } <br>    } <br> <br>#else <br>    WritePrivateProfileString( <br>        appname, <br>        valuename, <br>        bValue ? "1" : "0", <br>        INIFILE); <br>#endif <br>} <br> <br>/* <br> * read a UINT from the profile, or return default if <br> * not found. <br> */ <br>UINT <br>mmGetProfileInt(LPSTR appname, LPSTR valuename, UINT uDefault) <br>{ <br>#ifdef _WIN32 <br>    char achName[MAX_PATH]; <br>    HKEY hkey; <br>    DWORD dwType; <br>    UINT value = uDefault; <br>    DWORD dwData; <br>    int cbData; <br> <br> <br>    lstrcpy(achName, KEYNAME); <br>    lstrcat(achName, appname); <br>    if (RegOpenKey(ROOTKEY, achName, &amp;hkey) != ERROR_SUCCESS) { <br>        return(uDefault); <br>    } <br> <br>    cbData = sizeof(dwData); <br>    if (RegQueryValueEx( <br>        hkey, <br>        valuename, <br>        NULL, <br>        &amp;dwType, <br>        (PBYTE) &amp;dwData, <br>        &amp;cbData) == ERROR_SUCCESS) { <br>            if (dwType == REG_DWORD) { <br>                value = (UINT)dwData; <br>            } <br>    } <br> <br>    RegCloseKey(hkey); <br> <br>    return(value); <br>#else <br>    return(GetPrivateProfileInt(appname, valuename, uDefault, INIFILE); <br>#endif <br>} <br> <br> <br>/* <br> * write a UINT to the profile, if it is not the <br> * same as the default or the value already there <br> */ <br>VOID <br>mmWriteProfileInt(LPSTR appname, LPSTR valuename, UINT uValue, UINT uDefault) <br>{ <br>    if (mmGetProfileInt(appname, valuename, uDefault) == uValue) { <br>        return; <br>    } <br> <br>#ifdef _WIN32 <br>    { <br>        char achName[MAX_PATH]; <br>        HKEY hkey; <br>        DWORD dwData = uValue; <br> <br>        lstrcpy(achName, KEYNAME); <br>        lstrcat(achName, appname); <br>        if (RegCreateKey(ROOTKEY, achName, &amp;hkey) == ERROR_SUCCESS) { <br>            RegSetValueEx( <br>                hkey, <br>                valuename, <br>                0, <br>                REG_DWORD, <br>                (PBYTE) &amp;dwData, <br>                sizeof(dwData) <br>            ); <br> <br>            RegCloseKey(hkey); <br>        } <br>    } <br> <br>#else <br>    char ach[12]; <br> <br>    wsprintf(ach, "%d", uValue); <br> <br>    WritePrivateProfileString( <br>        appname, <br>        valuename, <br>        ach, <br>        INIFILE); <br>#endif <br>} <br> <br> <br>/* <br> * read a string from the profile into pResult. <br> * result is number of bytes written into pResult <br> */ <br>DWORD <br>mmGetProfileString( <br>    LPSTR appname, <br>    LPSTR valuename, <br>    LPSTR pDefault, <br>    LPSTR pResult, <br>    int cbResult <br>) <br>{ <br>#ifdef _WIN32 <br>    char achName[MAX_PATH]; <br>    HKEY hkey; <br>    DWORD dwType; <br> <br> <br>    lstrcpy(achName, KEYNAME); <br>    lstrcat(achName, appname); <br>    if (RegOpenKey(ROOTKEY, achName, &amp;hkey) == ERROR_SUCCESS) { <br> <br>        if (RegQueryValueEx( <br>            hkey, <br>            valuename, <br>            NULL, <br>            &amp;dwType, <br>            pResult, <br>            &amp;cbResult) == ERROR_SUCCESS) { <br> <br>                if (dwType == REG_SZ) { <br>                    // cbResult is set to the size including null <br>                    RegCloseKey(hkey); <br>                    return(cbResult - 1); <br>                } <br>        } <br> <br> <br>        RegCloseKey(hkey); <br>    } <br> <br>    // if we got here, we didn't find it, or it was the wrong type - return <br>    // the default string <br>    lstrcpy(pResult, pDefault); <br>    return(lstrlen(pDefault)); <br> <br>#else <br>    return GetPrivateProfileString( <br>                appname, <br>                valuename, <br>                pDefault, <br>                pResult, <br>                cbResult <br>                INIFILE); <br>#endif <br>} <br> <br> <br>/* <br> * write a string to the profile <br> */ <br>VOID <br>mmWriteProfileString(LPSTR appname, LPSTR valuename, LPSTR pData) <br>{ <br>#ifdef _WIN32 <br>    char achName[MAX_PATH]; <br>    HKEY hkey; <br> <br>    lstrcpy(achName, KEYNAME); <br>    lstrcat(achName, appname); <br>    if (RegCreateKey(ROOTKEY, achName, &amp;hkey) == ERROR_SUCCESS) { <br>        RegSetValueEx( <br>            hkey, <br>            valuename, <br>            0, <br>            REG_SZ, <br>            pData, <br>            lstrlen(pData) + 1 <br>        ); <br> <br>        RegCloseKey(hkey); <br>    } <br> <br>#else <br>    WritePrivateProfileString( <br>        appname, <br>        valuename, <br>        pData, <br>        INIFILE); <br>#endif <br>} <br> <br>/* <br> * read binary values from the profile into pResult. <br> * result is number of bytes written into pResult <br> */ <br>DWORD <br>mmGetProfileBinary( <br>    LPSTR appname, <br>    LPSTR valuename, <br>    LPVOID pDefault,   <br>    LPVOID pResult,   // if NULL, return the required size <br>    int cbSize <br>) <br>{ <br>    char achName[MAX_PATH]; <br>    HKEY hkey; <br>    DWORD dwType; <br>    int cbResult = cbSize; <br> <br>    lstrcpy(achName, KEYNAME); <br>    lstrcat(achName, appname); <br>    if (RegOpenKey(ROOTKEY, achName, &amp;hkey) == ERROR_SUCCESS) { <br> <br>        if (RegQueryValueEx( <br>            hkey, <br>            valuename, <br>            NULL, <br>            &amp;dwType, <br>            pResult, <br>            &amp;cbResult) == ERROR_SUCCESS) { <br> <br>                if (dwType == REG_BINARY) { <br>                    // cbResult is the size <br>                    RegCloseKey(hkey); <br>                    return(cbResult); <br>                } <br>        } <br> <br> <br>        RegCloseKey(hkey); <br>    } <br> <br>    // if we got here, we didn't find it, or it was the wrong type - return <br>    // the default values (use MoveMemory, since src could equal dst) <br>    MoveMemory (pResult, pDefault, cbSize); <br>    return cbSize; <br> <br>} <br> <br> <br>/* <br> * write binary data to the profile <br> */ <br>VOID <br>mmWriteProfileBinary(LPSTR appname, LPSTR valuename, LPVOID pData, int cbData) <br>{ <br>    char achName[MAX_PATH]; <br>    HKEY hkey; <br> <br>    lstrcpy(achName, KEYNAME); <br>    lstrcat(achName, appname); <br>    if (RegCreateKey(ROOTKEY, achName, &amp;hkey) == ERROR_SUCCESS) { <br>        RegSetValueEx( <br>            hkey, <br>            valuename, <br>            0, <br>            REG_BINARY, <br>            pData, <br>            cbData <br>        ); <br> <br>        RegCloseKey(hkey); <br>    } <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

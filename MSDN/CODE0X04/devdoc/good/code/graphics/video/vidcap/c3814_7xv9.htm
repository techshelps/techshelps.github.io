<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STATUS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3825"></a>STATUS.C</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br> * <br> **************************************************************************/ <br>/**************************************************************************** <br> * <br> *   status.c: Status bar window <br> * <br> *   Vidcap32 Source code <br> * <br> ***************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>//#include &lt;win32.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include "status.h" <br> <br>/* for compiling under win3.0 - we don't have this attribute */ <br>#ifndef COLOR_BTNHIGHLIGHT <br>#define COLOR_BTNHIGHLIGHT 20 <br>#endif <br> <br>#ifdef _WIN32 <br>typedef WNDPROC LPWNDPROC; <br>#else <br>typedef long (FAR PASCAL *LPWNDPROC)(); <br>#endif <br> <br> <br> <br>// class names for status bar and static text windows <br>charszStatusClass[] = "StatusClass"; <br>charszText[]   = "SText"; <br>int gStatusStdHeight;   // based on font metrics <br> <br>static HANDLE ghFont; <br>static HBRUSH ghbrHL, ghbrShadow; <br> <br> <br>/* Function Prototypes */ <br>LONG FAR PASCAL statusWndProc(HWND hwnd, unsigned msg, <br>UINT wParam, LONG lParam); <br>LONG FAR PASCAL fnText(HWND, unsigned, UINT, LONG); <br>static VOID NEAR PASCAL PaintText(HWND hwnd, HDC hdc); <br> <br> <br> <br> <br>/* <br> * create the brushes we need <br> */ <br>void <br>statusCreateTools(void) <br>{ <br>    HDC hdc; <br>    TEXTMETRIC tm; <br>    HFONT hfont; <br> <br>    ghbrHL = CreateSolidBrush(GetSysColor(COLOR_BTNHIGHLIGHT)); <br>    ghbrShadow = CreateSolidBrush(GetSysColor(COLOR_BTNSHADOW)); <br> <br>    /* Create the font we'll use for the status bar - use system as default */ <br>    ghFont = CreateFont(12, 0,// height, width <br>                0, 0,// escapement, orientation <br>                FW_NORMAL,// weight, <br>                FALSE, FALSE, FALSE,// attributes <br>                ANSI_CHARSET,// charset <br>                OUT_DEFAULT_PRECIS,// output precision <br>                CLIP_DEFAULT_PRECIS,// clip precision <br>                DEFAULT_QUALITY,// quality <br>                VARIABLE_PITCH | FF_MODERN, <br>                "Helv"); <br> <br>    if (ghFont == NULL) { <br>        ghFont = GetStockObject(SYSTEM_FONT); <br>    } <br> <br>    // find the char size to calc standard status bar height <br>    hdc = GetDC(NULL); <br>    hfont = SelectObject(hdc, ghFont); <br>    GetTextMetrics(hdc, &amp;tm); <br>    SelectObject(hdc, hfont); <br>    ReleaseDC(NULL, hdc); <br> <br>    gStatusStdHeight = tm.tmHeight * 3 / 2; <br> <br>} <br> <br>void <br>statusDeleteTools(void) <br>{ <br>    DeleteObject(ghbrHL); <br>    DeleteObject(ghbrShadow); <br> <br>    DeleteObject(ghFont); <br>} <br> <br> <br> <br> <br>/*--------------------------------------------------------------+ <br>| statusInit - initialize for status window, register the| <br>|       Window's class.| <br>|| <br>+--------------------------------------------------------------*/ <br>#pragma alloc_text(INIT_TEXT, statusInit) <br>BOOL statusInit(HANDLE hInst, HANDLE hPrev) <br>{ <br>  WNDCLASS  cls; <br> <br>  statusCreateTools(); <br> <br>  if (!hPrev){ <br>  cls.hCursor= LoadCursor(NULL, IDC_ARROW); <br>  cls.hIcon= NULL; <br>  cls.lpszMenuName= NULL; <br>  cls.lpszClassName= szStatusClass; <br>  cls.hbrBackground     = (HBRUSH) (COLOR_BTNFACE + 1); <br>  cls.hInstance= hInst; <br>  cls.style= CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS; <br>  cls.lpfnWndProc= statusWndProc; <br>  cls.cbClsExtra= 0; <br>  cls.cbWndExtra= 0; <br> <br>  if (!RegisterClass(&amp;cls)) <br>  return FALSE; <br> <br>  cls.hCursor        = LoadCursor(NULL,IDC_ARROW); <br>  cls.hIcon          = NULL; <br>  cls.lpszMenuName   = NULL; <br>  cls.lpszClassName  = (LPSTR)szText; <br>  cls.hbrBackground  = (HBRUSH) (COLOR_BTNFACE + 1); <br>  cls.hInstance      = hInst; <br>  cls.style          = CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS; <br>  cls.lpfnWndProc    = (LPWNDPROC)fnText; <br>  cls.cbClsExtra     = 0; <br>  cls.cbWndExtra     = 0; <br>  if (!RegisterClass(&amp;cls)) <br>return FALSE; <br>  } <br> <br> <br>  return TRUE; <br>} <br> <br>/* <br> * returns the recommended height for a status bar based on the <br> * character dimensions of the font used <br> */ <br>int <br>statusGetHeight(void) <br>{ <br>    return(gStatusStdHeight); <br>} <br> <br> <br>/*--------------------------------------------------------------+ <br>| statusUpdateStatus - update the status line| <br>|| <br>| The argument can either be NULL, a string, or a resource ID| <br>| cast to a LPCSTR with MAKEINTRESOURCE.| <br>+--------------------------------------------------------------*/ <br>void statusUpdateStatus(HWND hwnd, LPCSTR lpsz) <br>{ <br>    charach[80]; <br>    HWND hwndtext; <br> <br>    if ((lpsz != NULL) &amp;&amp; (HIWORD((DWORD) lpsz) == 0)) { <br>LoadString(GetWindowInstance(hwnd), LOWORD((DWORD) lpsz), ach, sizeof(ach)); <br>lpsz = ach; <br>    } <br> <br>    hwndtext = GetDlgItem(hwnd, 1); <br>    if (!lpsz || *lpsz == '\0') { <br>SetWindowText(hwndtext,""); <br>    } else { <br>SetWindowText(hwndtext, lpsz); <br>    } <br>} <br> <br>/*--------------------------------------------------------------+ <br>| statusWndProc - window proc for status window| <br>|| <br>+--------------------------------------------------------------*/ <br>LONG FAR PASCAL  <br>statusWndProc(HWND hwnd, unsigned msg, UINT wParam, LONG lParam) <br>{ <br>  PAINTSTRUCTps; <br>  HDChdc; <br>  HWND          hwndSText; <br> <br>  switch(msg){ <br>    case WM_CREATE: <br> <br>    /* we need to create the static text control for the status bar */ <br>    hwndSText = CreateWindow( <br>                            szText, <br>                            "", <br>                            WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS, <br>            0, 0, 0, 0, <br>                            hwnd, <br>                            (HMENU) 1,  // child id <br>                            GetWindowInstance(hwnd), <br>                            NULL); <br> <br>    if (!hwndSText) { <br>    return -1; <br>            } <br>    break; <br> <br>    case WM_DESTROY: <br>            statusDeleteTools(); <br>    break; <br> <br>    case WM_SIZE: <br>        { <br>            RECT rc; <br> <br>            GetClientRect(hwnd, &amp;rc); <br> <br>            MoveWindow( <br>                GetDlgItem(hwnd, 1),    // get child window handle <br>                2, 1,                   // xy just inside <br>                rc.right - 4, <br>                rc.bottom - 2, <br>                TRUE); <br> <br>    break; <br>        } <br> <br>    case WM_PAINT: <br>    hdc = BeginPaint(hwnd, &amp;ps); <br> <br>            // only the background and the child window need painting <br> <br>    EndPaint(hwnd, &amp;ps); <br>    break; <br> <br>    case WM_SYSCOLORCHANGE: <br>        statusDeleteTools(); <br>        statusCreateTools(); <br>        break; <br> <br>    case WM_ERASEBKGND: <br>        break; <br> <br>  } <br>  return DefWindowProc(hwnd, msg, wParam, lParam); <br>} <br> <br>/* <br> * window proc for static text window <br> */ <br>LONG FAR PASCAL  <br>fnText(HWND hwnd, UINT msg, UINT wParam, LONG lParam ) <br>{ <br>PAINTSTRUCT ps; <br> <br>switch (msg) { <br>case WM_SETTEXT: <br>DefWindowProc(hwnd, msg, wParam, lParam); <br>InvalidateRect(hwnd,NULL,FALSE); <br>UpdateWindow(hwnd); <br>return 0L; <br> <br>case WM_ERASEBKGND: <br>return 0L; <br> <br>case WM_PAINT: <br>BeginPaint(hwnd, &amp;ps); <br>PaintText(hwnd, ps.hdc); <br>EndPaint(hwnd, &amp;ps); <br>return 0L; <br>        } <br> <br>return DefWindowProc(hwnd, msg, wParam, lParam); <br>} <br> <br>/*--------------------------------------------------------------+ <br>| PaintText - paint the shadowed static text field.| <br>|| <br>+--------------------------------------------------------------*/ <br>VOID NEAR PASCAL <br>PaintText(HWND hwnd, HDC hdc) <br>{ <br>  RECT rc; <br>  char        ach[128]; <br>  int  len; <br>  intdx, dy; <br>  RECTrcFill; <br>  HFONThfontOld; <br>  HBRUSH hbrSave; <br> <br>  GetClientRect(hwnd, &amp;rc); <br> <br>  len = GetWindowText(hwnd,ach,sizeof(ach)); <br> <br>  SetBkColor(hdc, GetSysColor(COLOR_BTNFACE)); <br>  SetTextColor(hdc, GetSysColor(COLOR_BTNTEXT)); <br> <br>  hfontOld = SelectObject(hdc, ghFont); <br> <br>  rcFill.left = rc.left + 1; <br>  rcFill.right = rc.right - 1; <br>  rcFill.top = rc.top + 1; <br>  rcFill.bottom = rc.bottom - 1; <br> <br>  /* move in some and do background and text in one swoosh */ <br>  ExtTextOut(hdc,4,1,ETO_OPAQUE,&amp;rcFill,ach,len,NULL); <br> <br>  dx = rc.right - rc.left; <br>  dy = rc.bottom - rc.top; <br> <br>  hbrSave = SelectObject(hdc, ghbrShadow); <br>  PatBlt(hdc, rc.left, rc.top, 1, dy, PATCOPY); <br>  PatBlt(hdc, rc.left, rc.top, dx, 1, PATCOPY); <br> <br>  SelectObject(hdc, ghbrHL); <br>  PatBlt(hdc, rc.right-1, rc.top+1, 1, dy-1, PATCOPY); <br>  PatBlt(hdc, rc.left+1, rc.bottom -1, dx-1, 1,  PATCOPY); <br> <br>  if (hfontOld) <br>  SelectObject(hdc, hfontOld); <br>  if (hbrSave) <br>  SelectObject(hdc, hbrSave); <br>  return ; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

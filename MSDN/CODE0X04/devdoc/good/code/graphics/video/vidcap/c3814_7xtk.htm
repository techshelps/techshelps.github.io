<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HELP.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3818"></a>HELP.C</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br> * <br> **************************************************************************/ <br>/**************************************************************************** <br> * <br> *   help.c: Help system interface <br> * <br> *   Vidcap32 Source code <br> * <br> ***************************************************************************/ <br> <br>/* <br> * supports F1 key help in app and in dialog by installing a hook, <br> * <br> * Keep track of which dialog is currently displayed in a global: <br> * dialog ids are also topic ids in the help file. <br> */ <br> <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;string.h&gt; <br> <br>#include "help.h" <br> <br>int CurrentDialogID = 0; <br> <br> <br>// app info passed to helpinit <br>HINSTANCE hInstance; <br>char HelpFile[MAX_PATH]; <br>HWND hwndApp; <br> <br>//hook proc and old msg filter <br>#ifdef _WIN32 <br>HHOOK hOurHook; <br>#else <br>FARPROC fnOldMsgFilter = NULL; <br>FARPROC fnMsgHook = NULL; <br>#endif <br> <br> <br>// call DialogBoxParam, but ensuring correct help processing: <br>// assumes that each Dialog Box ID is a context number in the help file. <br>// calls MakeProcInstance as necessary. Uses instance data passed to <br>// HelpInit(). <br>int <br>DoDialog( <br>   HWND hwndParent,     // parent window <br>   int DialogID,        // dialog resource id <br>   DLGPROC fnDialog,    // dialog proc <br>   long lParam          // passed as lparam in WM_INITDIALOG <br>) <br>{ <br>    int olddialog; <br>    DLGPROC fn; <br>    int result; <br> <br>    // remember current id (for nested dialogs) <br>    olddialog = CurrentDialogID; <br> <br>    // save the current id so the hook proc knows what help to display <br>    CurrentDialogID = DialogID; <br> <br>    fn = (DLGPROC) MakeProcInstance(fnDialog, hInstance); <br>    result = DialogBoxParam( <br>                hInstance, <br>                MAKEINTRESOURCE(CurrentDialogID), <br>                hwndParent, <br>                fn, <br>                lParam); <br>    FreeProcInstance(fn); <br>    CurrentDialogID = olddialog; <br> <br>    return result; <br>} <br> <br> <br>// set the help context id for a dialog displayed other than by DoDialog <br>// (eg by GetOpenFileName). Returns the old help context that you must <br>// restore by a further call to this function <br>int <br>SetCurrentHelpContext(int DialogID) <br>{ <br>    int oldid = CurrentDialogID; <br>    CurrentDialogID = DialogID; <br>    return(oldid); <br>} <br> <br> <br> <br>// return TRUE if lpMsg is a non-repeat F1 key message <br>BOOL <br>IsHelpKey(LPMSG lpMsg) <br>{ <br>    return lpMsg-&gt;message == WM_KEYDOWN &amp;&amp; <br>               lpMsg-&gt;wParam == VK_F1 &amp;&amp; <br>               !(HIWORD(lpMsg-&gt;lParam) &amp; KF_REPEAT) &amp;&amp; <br>               GetKeyState(VK_SHIFT) &gt;= 0 &amp;&amp; <br>               GetKeyState(VK_CONTROL) &gt;= 0 &amp;&amp; <br>               GetKeyState(VK_MENU) &gt;= 0; <br>} <br> <br> <br> <br>LRESULT CALLBACK <br>HelpMsgHook(int nCode, WPARAM wParam, LPARAM lParam) <br>{ <br>    if (nCode &gt;= 0) { <br>        if (IsHelpKey((LPMSG)lParam)) { <br>            if (CurrentDialogID != 0) { <br>                WinHelp(hwndApp, HelpFile, HELP_CONTEXT, CurrentDialogID); <br>            } else { <br>                WinHelp(hwndApp, HelpFile, HELP_CONTENTS, 0); <br>            } <br>        } <br>    } <br>#ifdef _WIN32 <br>    return CallNextHookEx(hOurHook, nCode, wParam, lParam); <br>#else <br>    return DefHookProc(nCode, wParam, lParam, fnOldMsgFilter); <br>#endif <br> <br>} <br> <br> <br> <br> <br> <br>// help init - initialise the support for the F1 key help <br>BOOL <br>HelpInit(HINSTANCE hinstance, LPSTR helpfilepath, HWND hwnd) <br>{ <br>    LPSTR pch; <br> <br>    // save app details <br>    hwndApp = hwnd; <br>    hInstance = hinstance; <br> <br>    // assume that the help file is in the same directory as the executable- <br>    // get the executable path, and replace the filename with the help <br>    // file name. <br>    GetModuleFileName(hinstance, HelpFile, sizeof(HelpFile)); <br> <br>    // find the final backslash, and append the help file name there <br>    pch = _fstrrchr(HelpFile, '\\'); <br>    pch++; <br>    lstrcpy(pch, helpfilepath); <br> <br>    // install a hook for msgs and save old one <br>#ifdef _WIN32 <br>    hOurHook = SetWindowsHookEx( <br>                        WH_MSGFILTER, <br>                        (HOOKPROC) HelpMsgHook, <br>                        NULL, GetCurrentThreadId()); <br>#else <br>    fnMsgHook = (FARPROC) MakeProcInstance(HelpMsgHook, hInstance); <br>    fnOldMsgFilter = SetWindowsHook(WH_MSGFILTER, (HOOKPROC) fnMsgHook); <br>#endif <br> <br>    return(TRUE); <br>} <br> <br> <br> <br>// shutdown the help system <br>void <br>HelpShutdown(void) <br>{ <br>#ifdef _WIN32 <br>    UnhookWindowsHookEx(hOurHook); <br>#else <br>    if (fnOldMsgFilter) { <br>        UnhookWindowsHook(WH_MSGFILTER, fnMsgHook); <br>        FreeProcInstance(fnMsgHook); <br>    } <br>#endif <br> <br>    WinHelp(hwndApp, HelpFile, HELP_QUIT, 0); <br>} <br> <br> <br>// start help at the contents page <br>void <br>HelpContents(void) <br>{ <br>    WinHelp(hwndApp, HelpFile, HELP_CONTENTS, 0); <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

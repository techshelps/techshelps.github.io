<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LANGPLAY.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3797"></a>LANGPLAY.C</h2>
<pre><code>/*-------------------------------------------------------------------- <br>| <br>| LangPlay.c - Sample Win app to play AVI movies using MCIWnd. Handles <br>|       multiple language track movies and lets the <br>|       user select the track to listen to at playback. <br>| <br>| <br>+--------------------------------------------------------------------*/ <br>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> *  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br> * <br> **************************************************************************/ <br>#define INC_OLE2 <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;direct.h&gt; <br>#include &lt;digitalv.h&gt; <br>#include &lt;vfw.h&gt; <br>#include "langplay.h" <br> <br> <br>/************************************************************** <br>************************ GLOBALS ****************************** <br>**************************************************************/ <br>/* AVI stuff to keep around */ <br>HWND hwndMovie;                 /* window handle of the movie */ <br>BOOL fMovieOpen = FALSE;        /* Open flag: TRUE == movie open, FALSE = none */ <br>HMENU hMenuBar = NULL;          /* menu bar handle */ <br>char szAppName [] = "LangPlay"; <br> <br>// struct for handling multi-language support <br>typedef struct langs_tag { <br>        WORD            wLangTag;       // language type tag <br>        char            achName[64];    // stream name  (limited to 64 chars by AVIStreamInfo) <br>} LANGS, FAR *LPLANGS; <br> <br>#define         NOAUDIO         0       // no audio stream <br>int             iCurLang;               // current language selected (0 == NONE) <br> <br> <br>/* function declarations */ <br>long FAR PASCAL WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam); <br>void fileOpenMovie(HWND hWnd); <br>void menubarUpdate(HWND hWnd); <br>void titlebarUpdate(HWND hWnd, LPSTR lpstrMovie); <br>BOOL CALLBACK AboutDlgProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam); <br> <br>/* language specific functions */ <br>BOOL enumLangs(HWND hwnd, LPSTR lpstrMovie); <br>void buildLangMenu(HWND hwnd, LPLANGS lpLangs, DWORD dwLangs); <br>void switchLang(HWND hWnd, int iLangStream); <br> <br> <br>/******************************************************************** <br>************************** FUNCTIONS ******************************** <br>********************************************************************/ <br> <br> <br>/*--------------------------------------------------------------+ <br>| initApp - initialize the app overall.                         | <br>|                                                               | <br>| Returns the Window handle for the app on success, NULL if     | <br>| there is a failure.                                           | <br>|                                                               | <br>+--------------------------------------------------------------*/ <br>HWND initApp(HINSTANCE hInstance, HINSTANCE hPrevInstance, int nCmdShow) <br>{ <br>        HWND            hWnd;   /* window handle to return */ <br>        int             iWinHeight; <br>        WORD    wVer; <br> <br>        /* first let's make sure we are running on 1.1 */ <br>        wVer = HIWORD(VideoForWindowsVersion()); <br>        if (wVer &lt; 0x010a){ <br>                /* oops, we are too old, blow out of here */ <br>                MessageBeep(MB_ICONHAND); <br>                MessageBox(NULL, "Video for Windows version is too old", <br>                          "LangPlay Error", MB_OK|MB_ICONSTOP); <br>                return FALSE; <br>        } <br> <br>        if (!hPrevInstance){ <br>                WNDCLASS    wndclass; <br> <br>                wndclass.style         = CS_DBLCLKS | CS_HREDRAW | CS_VREDRAW; <br>                wndclass.lpfnWndProc   = WndProc; <br>                wndclass.cbClsExtra    = 0; <br>                wndclass.cbWndExtra    = 0; <br>                wndclass.hInstance     = hInstance; <br>                wndclass.hIcon         = LoadIcon (hInstance, "AppIcon"); <br>                wndclass.hCursor       = LoadCursor (NULL, IDC_ARROW); <br>                wndclass.hbrBackground = (HBRUSH) (COLOR_WINDOW + 1); <br>                wndclass.lpszMenuName  = szAppName; <br>                wndclass.lpszClassName = szAppName; <br> <br>                if (!RegisterClass(&amp;wndclass)){ <br>                        MessageBox(NULL, "RegisterClass failure", szAppName, MB_OK); <br>                        return NULL; <br>                } <br>        } <br> <br>        iWinHeight = GetSystemMetrics(SM_CYCAPTION) + GetSystemMetrics(SM_CYMENU) + <br>                        (GetSystemMetrics(SM_CYFRAME) * 2); <br> <br>        /* create the main window for the app */ <br>        hWnd = CreateWindow(szAppName, szAppName, WS_OVERLAPPEDWINDOW | <br>                WS_CLIPCHILDREN, CW_USEDEFAULT, CW_USEDEFAULT, 180, iWinHeight, <br>                NULL, NULL, hInstance, NULL); <br> <br>        if (hWnd == NULL){ <br>                MessageBox(NULL, "CreateWindow failure", szAppName, MB_OK); <br>                return NULL; <br>        } <br> <br>        hMenuBar = GetMenu(hWnd);       /* get the menu bar handle */ <br>        menubarUpdate(hWnd);            /* update menu bar to disable Movie menu */ <br> <br>        /* Show the main window */ <br>        ShowWindow(hWnd, nCmdShow); <br>        UpdateWindow(hWnd); <br> <br>        /* create the movie window using MCIWnd that has no file open initially */ <br>        hwndMovie = MCIWndCreate(hWnd, hInstance, WS_CHILD |WS_VISIBLE | MCIWNDF_NOOPEN | <br>                                MCIWNDF_NOERRORDLG | MCIWNDF_NOTIFYSIZE, NULL); <br> <br>        if (!hwndMovie){ <br>                /* we didn't get the movie window, destroy the app's window and bail out */ <br>                DestroyWindow(hWnd); <br>                return NULL; <br>        } <br>        return hWnd; <br>} <br> <br> <br> <br> <br>/*--------------------------------------------------------------+ <br>| WinMain - main routine.                                       | <br>|                                                               | <br>+--------------------------------------------------------------*/ <br>int PASCAL WinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance, <br>                                LPSTR lpszCmdParam, int nCmdShow) <br>{ <br>        HWND        hWnd; <br>        MSG         msg; <br> <br>        if ((hWnd = initApp(hInstance, hPrevInstance,nCmdShow)) == NULL) <br>                return 0;       /* died initializing, bail out */ <br> <br>        while (GetMessage(&amp;msg, NULL, 0, 0)){ <br>                TranslateMessage(&amp;msg); <br>                DispatchMessage(&amp;msg); <br>        } <br>        return msg.wParam; <br>} <br> <br> <br>/*--------------------------------------------------------------+ <br>| WndProc - window proc for the app                             | <br>|                                                               | <br>+--------------------------------------------------------------*/ <br>long FAR PASCAL WndProc (HWND hWnd, UINT message, WPARAM wParam, <br>                                                LPARAM lParam) <br>{ <br>        PAINTSTRUCT ps; <br>        WORD w; <br>        WORD    wMenu; <br>        RECT    rc; <br> <br>        switch (message){ <br>                case WM_CREATE: <br>                        return 0; <br> <br>                case WM_INITMENUPOPUP: <br>                        /* be sure this isn't the system menu */ <br>                        if (HIWORD(lParam)) <br>                                return DefWindowProc(hWnd, WM_INITMENUPOPUP, <br>                                                wParam, lParam); <br> <br>                        wMenu = LOWORD(lParam); <br>                        switch (wMenu){ <br>                                case 0:   /* file menu */ <br>                                        /* turn on/off CLOSE &amp; PLAY */ <br>                                        if (fMovieOpen) w = MF_ENABLED|MF_BYCOMMAND; <br>                                        else            w = MF_GRAYED|MF_BYCOMMAND; <br>                                        EnableMenuItem((HMENU)wParam, IDM_CLOSE, w); <br>                                        break; <br>                        } /* switch */ <br>                        break; <br> <br>                case WM_COMMAND: <br>                        if (wParam &gt;= IDM_STREAM){ <br>                                // the command is to switch the audio stream <br>                                switchLang(hWnd, wParam - IDM_STREAM + 1); <br>                                return 0; <br>                        } <br>                        /* handle the menu commands */ <br>                        switch (wParam) { <br>                                /* File Menu */ <br>                                case IDM_OPEN: <br>                                        fileOpenMovie(hWnd); <br>                                        break; <br>                                case IDM_CLOSE: <br>                                        fMovieOpen = FALSE; <br>                                        MCIWndClose(hwndMovie);         // close the movie <br>                                        ShowWindow(hwndMovie, SW_HIDE); //hide the window <br>                                        menubarUpdate(hWnd); <br>                                        titlebarUpdate(hWnd, NULL);     // title bar back to plain <br>                                        break; <br>                                case IDM_EXIT: <br>                                        PostMessage(hWnd, WM_CLOSE, 0, 0L); <br>                                        break; <br> <br>                                /* audio menu */ <br>                                case IDM_NONE: <br>                                        switchLang(hWnd, NOAUDIO); <br>                                        break; <br> <br>                                case IDM_ABOUT: <br>                                        DialogBox((HANDLE)GetWindowInstance(hWnd), <br>                                                  MAKEINTRESOURCE(IDD_ABOUT), <br>                                                  hWnd, <br>                                                  AboutDlgProc); <br>                                        break; <br> <br>                        } <br>                        return 0; <br> <br>                case WM_PAINT: <br>                        BeginPaint(hWnd, &amp;ps); <br>                        EndPaint(hWnd, &amp;ps); <br>                        return 0; <br> <br>                case WM_SIZE: <br>                        if (!IsIconic(hWnd) &amp;&amp; hwndMovie &amp;&amp; fMovieOpen) <br>                                MoveWindow(hwndMovie,0,0,LOWORD(lParam),HIWORD(lParam),TRUE); <br>                        break; <br> <br>                case WM_DESTROY: <br>                        if (fMovieOpen) <br>                                MCIWndClose(hwndMovie);  // close an open movie <br>                        MCIWndDestroy(hwndMovie);    // now destroy the MCIWnd window <br>                        PostQuitMessage(0); <br>                        return 0; <br> <br>                case MCIWNDM_NOTIFYSIZE: <br>if (!IsIconic(hWnd)) { <br>                            if (fMovieOpen){ <br>                                /* adjust to size of the movie window */ <br>                                GetWindowRect(hwndMovie, &amp;rc); <br>                                AdjustWindowRect(&amp;rc, GetWindowLong(hWnd, GWL_STYLE), TRUE); <br>                                SetWindowPos(hWnd, NULL, 0, 0, rc.right - rc.left, <br>                                        rc.bottom - rc.top, <br>                                        SWP_NOZORDER | SWP_NOACTIVATE | SWP_NOMOVE); <br>                            } else { <br>                                /* movie closed, adjust to the default size */ <br>                                int iWinHeight; <br> <br>                                iWinHeight = GetSystemMetrics(SM_CYCAPTION) + <br>                                                GetSystemMetrics(SM_CYMENU) + <br>                                                (GetSystemMetrics(SM_CYFRAME) * 2); <br>                                SetWindowPos(hWnd, NULL, 0, 0, 180, iWinHeight, <br>                                        SWP_NOZORDER | SWP_NOACTIVATE | SWP_NOMOVE); <br>    } <br>                        } <br>                        break; <br> <br>                case WM_ACTIVATE: <br>                case WM_QUERYNEWPALETTE: <br>                case WM_PALETTECHANGED: <br>                        // <br>                        // Forward palette-related messages through to the MCIWnd, <br>                        // so it can do the right thing. <br>                        // <br>                        if (hwndMovie) <br>                                return SendMessage(hwndMovie, message, wParam, lParam); <br>                        break; <br>        } /* switch */ <br>        return DefWindowProc(hWnd, message, wParam, lParam); <br>} <br> <br>/*--------------------------------------------------------------+ <br>| menubarUpdate - update the menu bar based on the &lt;fMovieOpen&gt; | <br>|                 flag value.  This will turn on/off the        | <br>|                 Movie menu.                                   | <br>|                                                               | <br>+--------------------------------------------------------------*/ <br>void menubarUpdate(HWND hWnd) <br>{ <br>        WORD w; <br> <br>        if (fMovieOpen){ <br>                w = MF_ENABLED|MF_BYPOSITION; <br>        } else { <br>                w = MF_GRAYED|MF_BYPOSITION; <br>        } <br>        EnableMenuItem(hMenuBar, 1, w); /* change the Movie menu (#1) */ <br>        DrawMenuBar(hWnd);      /* re-draw the menu bar */ <br>} <br> <br>/*--------------------------------------------------------------+ <br>| titlebarUpdate - update the title bar to include the name     | <br>|                  of the movie playing.                        | <br>|                                                               | <br>+--------------------------------------------------------------*/ <br>void titlebarUpdate(HWND hWnd, LPSTR lpstrMovie) <br>{ <br>        char achNewTitle[BUFFER_LENGTH];        // space for the title <br> <br>        if (lpstrMovie != NULL) <br>                wsprintf((LPSTR)achNewTitle,"%s - %s", (LPSTR)szAppName,lpstrMovie); <br>        else <br>                lstrcpy((LPSTR)achNewTitle, (LPSTR)szAppName); <br>        SetWindowText(hWnd, (LPSTR)achNewTitle); <br>} <br> <br>/*--------------------------------------------------------------+ <br>| fileOpenMovie - open an AVI movie. Use CommDlg open box to    | <br>|               open and then handle the initialization to      | <br>|               show the movie and position it properly.  Keep  | <br>|               the movie paused when opened.                   | <br>|                                                               | <br>|               Sets &lt;fMovieOpened&gt; on success.                 | <br>+--------------------------------------------------------------*/ <br>void fileOpenMovie(HWND hWnd) <br>{ <br>        OPENFILENAME ofn; <br> <br>        static char szFile [BUFFER_LENGTH]; <br>        static char szFileTitle [BUFFER_LENGTH]; <br> <br>        /* use the OpenFile dialog to get the filename */ <br>        memset(&amp;ofn, 0, sizeof(ofn)); <br>        ofn.lStructSize = sizeof(ofn); <br>        ofn.hwndOwner = hWnd; <br>        ofn.lpstrFilter = "Video for Windows\0*.avi\0\0"; <br>        ofn.lpstrFile = szFile; <br>        ofn.nMaxFile = sizeof(szFile); <br>        ofn.lpstrFileTitle = szFileTitle; <br>        ofn.nMaxFileTitle = sizeof(szFileTitle); <br>        ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST; <br> <br>        /* use CommDlg to get our filename */ <br>        if (GetOpenFileName(&amp;ofn)){ <br> <br>                /* we got a filename, now close any old movie and open */ <br>                /* the new one.                                 */ <br>                if (fMovieOpen) <br>                        MCIWndClose(hwndMovie); <br> <br>                enumLangs(hWnd, ofn.lpstrFile); // find out the languages used in the file. <br> <br>                /* try to open the file */ <br>                fMovieOpen = TRUE;              // assume the best <br>                if (MCIWndOpen(hwndMovie, ofn.lpstrFile, 0) == 0){ <br>                        /* we opened the file o.k., now set up to */ <br>                        /* play it.                                */ <br>                        ShowWindow(hwndMovie, SW_SHOW); <br>                } else { <br>                        /* generic error for open */ <br>                        MessageBox(hWnd, "Unable to open Movie", NULL, <br>                              MB_ICONEXCLAMATION|MB_OK); <br>                        fMovieOpen = FALSE; <br>                } <br>        } <br>        /* update menu bar */ <br>        menubarUpdate(hWnd); <br>        if (fMovieOpen) <br>                titlebarUpdate(hWnd, (LPSTR)ofn.lpstrFileTitle); <br>        else <br>                titlebarUpdate(hWnd, NULL); <br> <br>        /* cause an update to occur */ <br>        InvalidateRect(hWnd, NULL, FALSE); <br>        UpdateWindow(hWnd); <br>} <br> <br> <br> <br>/*--------------------------------------------------------------+ <br>| enumLangs - enumerate the audio streams in a file and set up  | <br>|             the global ghLangs as a handle to the array of    | <br>|             language streams.                                 |                                                               | <br>|                                                               | <br>| To do this:                                                   | <br>|       1. Open the file using AVIFileOpen().                   | <br>|       2. Open all Audio Streams, getting the pavi for it      | <br>|       3. Get the stream info on all audio streams to get names| <br>|       4. If names don't exist use "Audio Strean n"            | <br>|       5. Close the file                                       | <br>|       6. Build the audio stream menu                          | <br>|                                                               | <br>| Return TRUE if successfully set up menu, FALSE on any error   | <br>|                                                               | <br>+--------------------------------------------------------------*/ <br>BOOL enumLangs(HWND hWnd, LPSTR lpstrMovie) <br>{ <br>        PAVIFILE        pFile; <br>        PAVISTREAM      pStream; <br>        AVIFILEINFO aviInfo; <br>        AVISTREAMINFO aviStream; <br>        DWORD           dwNumStreams; <br>        DWORD           dwNumAudioStreams = 0L; <br>        LPLANGS         lpLangs; <br>        LPLANGS         lpLang; <br>        HANDLE          hLangs; <br> <br>        DWORD           dw; <br> <br> <br>        AVIFileInit(); <br> <br>        // go open the file <br>        if (AVIFileOpen((PAVIFILE far *)&amp;pFile, lpstrMovie, OF_READ, NULL) != 0) <br>                return FALSE; <br> <br>        // get the file information <br>        AVIFileInfo(pFile, (LPAVIFILEINFO)&amp;aviInfo, sizeof(aviInfo)); <br>        dwNumStreams = aviInfo.dwStreams;               // grab the number of streams <br> <br>        // loop through the streams and find the # of audio streams <br>        for (dw = 0L; dw &lt; dwNumStreams; dw++){ <br>                AVIFileGetStream(pFile, (PAVISTREAM far *)&amp;pStream, 0, dw); <br>                AVIStreamInfo(pStream, (LPAVISTREAMINFO)&amp;aviStream, sizeof(aviStream)); <br>                if (aviStream.fccType == streamtypeAUDIO) <br>                        dwNumAudioStreams++; <br>                AVIStreamClose(pStream); <br> <br>        } <br> <br>        // we now know how many audio streams we are dealing with, we need to allocate <br>        // enough memory for the Langs array and then get all the audio stream information <br>        // again. <br>        hLangs = GlobalAlloc(GHND, (sizeof(LANGS) *  dwNumAudioStreams)); <br>        if (hLangs == NULL) <br>                return FALSE; <br> <br>        lpLangs = (LPLANGS)GlobalLock(hLangs);  // get the memory <br> <br>        // loop through the audio streams and fill out the array <br>        for (dw = 0L, lpLang = lpLangs; dw &lt; dwNumAudioStreams; dw++, lpLang++) { <br>                AVIFileGetStream(pFile, (PAVISTREAM far *)&amp;pStream, streamtypeAUDIO, dw); <br>                AVIStreamInfo(pStream, (LPAVISTREAMINFO)&amp;aviStream, sizeof(aviStream)); <br>                if (aviStream.szName &amp;&amp; *aviStream.szName != '\0') <br>                        lstrcpy((LPSTR)lpLang-&gt;achName, (LPSTR)aviStream.szName); <br>                else <br>                        wsprintf((LPSTR)lpLang-&gt;achName, "Audio Stream %lu",dw); <br>                AVIStreamClose(pStream); <br> <br>        } <br> <br>        // now build the menu for this <br>        buildLangMenu(hWnd, lpLangs, dwNumAudioStreams); <br> <br>        // close up and deallocate resources <br>        AVIFileClose(pFile); <br>        AVIFileExit(); <br> <br>        GlobalUnlock(hLangs); <br>        GlobalFree(hLangs); <br> <br>        return TRUE; <br>} <br> <br> <br>/*--------------------------------------------------------------+ <br>| buildLangMenu - build up the language menu for the audio      | <br>|                                 streams available.            | <br>|                                                               | <br>| hwnd is the main application window handle                    | <br>| lang points to an array of LANGSTRUCT entries already filled  | <br>|      in by the caller.                                        | <br>+--------------------------------------------------------------*/ <br>void buildLangMenu(HWND hwnd, LPLANGS lpLangs, DWORD dwLangs) <br>{ <br>        UINT    i; <br>        HMENU   hMenu; <br>        LPLANGS lplang; <br>        UINT    uNumMenus; <br> <br>        // go through menu chain and get the Audio Stream pop-up menu <br>        hMenu = GetMenu(hwnd);                  // get the menu bar <br>        hMenu = GetSubMenu(hMenu, 1);   // get the Audio Stream menu <br> <br>        uNumMenus = GetMenuItemCount(hMenu);    // how many items are on this menu? <br>        if (uNumMenus &gt; 1){ <br>                // we've got a menu with items already, time to delete all of them <br>                // except for the first one (NONE).  NOTE: Item 0 == first item <br>                // be sure to delete in reverse order so you get them all. <br>                for ( --uNumMenus; uNumMenus; uNumMenus--) { <br>                        DeleteMenu(hMenu, uNumMenus, MF_BYPOSITION); <br>                } <br>        } <br> <br>        // loop through the languages and add menus to the existing menu <br>        for (i=0, lplang = lpLangs; i&lt;dwLangs; i++, lplang++){ <br>                AppendMenu(hMenu, MF_ENABLED | MF_STRING, IDM_STREAM+i, lplang-&gt;achName); <br>        } <br> <br>        // get default set up <br>        if (dwLangs) <br>                iCurLang = 1;           // use first audio stream <br>        else <br>                iCurLang = NOAUDIO;     // else none <br> <br>        /* set up the checkmark initially */ <br>        CheckMenuItem(hMenu, (iCurLang), MF_BYPOSITION | MF_CHECKED); <br>} <br> <br> <br>/*------------------------------------------------------------------+ <br>| switchLang - switch audio stream playback                                                     | <br>|                                                                                                                                       | <br>| iLangStream == the audio stream to switch to (-1 == NONE)                     | <br>| Be sure to update iCurrLang global to be the current audio stream     | <br>| selected.                                                                                                                     | <br>|                                                                                                                                       | <br>+------------------------------------------------------------------*/ <br>void switchLang(HWND hWnd, int iLangStream) <br>{ <br>        HMENU                                   hMenu; <br>        char                                    achStrBuff[256]; <br> <br> <br>        // if user just picked the same stream then just get out of here <br>        if (iCurLang == iLangStream) <br>                return; <br> <br>        // go through menu chain and get the Audio Stream pop-up menu <br>        hMenu = GetMenu(hWnd);          // get the menu bar <br>        hMenu = GetSubMenu(hMenu, 1);   // get the Audio Stream menu <br> <br>        // turn off the checkmark from the old item <br>        CheckMenuItem(hMenu, (iCurLang), MF_BYPOSITION | MF_UNCHECKED); <br> <br>        // turn on the checkmark on the new item <br>        CheckMenuItem(hMenu, (iLangStream), MF_BYPOSITION | MF_CHECKED); <br> <br>        if (iLangStream == NOAUDIO){ <br>                // turn off all audio <br>                MCIWndSendString(hwndMovie, "setaudio off"); <br>        } else { <br>                // turn on audio &amp; the specific stream <br>                wsprintf(achStrBuff, "setaudio stream to %d", iLangStream); <br> <br>                // send the command <br>                MCIWndSendString(hwndMovie, achStrBuff); <br> <br> <br>                if (iCurLang == NOAUDIO){ <br>                        // audio was off, turn it on <br>                        MCIWndSendString(hwndMovie, "setaudio on"); <br>                } <br>        } <br> <br>        iCurLang = iLangStream;         // set the current stream <br>} <br> <br>/* AboutDlgProc() <br> * <br> * Dialog Procedure for the "about" dialog box. <br> * <br> */ <br> <br>BOOL CALLBACK AboutDlgProc( <br>        HWND    hwnd, <br>        UINT    msg, <br>        WPARAM  wParam, <br>        LPARAM  lParam) <br>{ <br>        switch (msg) { <br>        case WM_COMMAND: <br>                EndDialog(hwnd, TRUE); <br>                return TRUE; <br>        case WM_INITDIALOG: <br>                return TRUE; <br>        } <br>        return FALSE; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

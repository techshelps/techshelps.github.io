<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REGOBJS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3784"></a>REGOBJS.CPP</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br> * <br> **************************************************************************/ <br> <br>#define INC_OLE2 <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#ifndef WIN32 <br>#include &lt;ole2.h&gt; <br>#endif <br>#include &lt;string.h&gt; <br>#include &lt;vfw.h&gt; <br>#include "aviview.h" <br>#include "regobjs.h" <br> <br>/* <br>** The usage counter keeps track of the overall usage of objects based on <br>** implementations provided by the component. This allows one to determine <br>** when the implementation is no longer in use. <br>*/ <br> <br>UINTuUseCount; <br>BOOLfLocked; <br> <br> <br>IClassFactory FAR * gpCF; <br>DWORD    gdwRegistered; <br> <br>extern "C" BOOL RegisterObjects(void); <br>extern "C" void RevokeObjects(void); <br> <br>BOOL RegisterObjects(void) <br>{ <br>#if 0 <br>    HRESULT hresult; <br>#endif <br> <br>    // OleInitialize(NULL); <br>#if 0 <br>    CAppCF::MakeInst(CLSID_ACMCmprsStream, IID_IClassFactory, <br>   (void FAR * FAR *) &amp;gpCF); <br> <br>    hresult = CoRegisterClassObject(CLSID_ACMCmprsStream, <br>  gpCF, <br>  CLSCTX_INPROC_SERVER, <br>  REGCLS_MULTIPLEUSE, <br>  &amp;gdwRegistered); <br>    if (FAILED(GetScode(hresult))) { <br>delete gpCF; <br>gpCF = NULL; <br>return FALSE; <br>    } <br>#endif <br> <br>    return TRUE; <br>} <br> <br>void RevokeObjects(void) <br>{ <br>#if 0 <br>    CoRevokeClassObject(gdwRegistered); <br>#endif <br> <br>    // OleUninitialize(); <br>} <br>/*--------*/ <br> <br>HRESULT CAppCF::MakeInst( <br>const CLSID FAR&amp;rclsid, <br>const IID FAR&amp;riid, <br>void FAR* FAR*ppv) <br>{ <br>CAppCF FAR*pAppCF; <br>IUnknown FAR*pUnknown; <br>HRESULT hresult; <br> <br>pAppCF = new FAR CAppCF(rclsid, &amp;pUnknown); <br>if (pAppCF == NULL) <br>return ResultFromScode(E_OUTOFMEMORY); <br>hresult = pUnknown-&gt;QueryInterface(riid, ppv); <br>if (FAILED(GetScode(hresult))) <br>delete pAppCF; <br>return hresult; <br>} <br> <br>/*--------*/ <br> <br>CAppCF::CAppCF( <br>const CLSID FAR&amp;rclsid, <br>IUnknown FAR* FAR*ppUnknown) <br>{ <br>m_clsid = rclsid; <br>m_refs = 0; <br>*ppUnknown = this; <br>} <br> <br>/*--------*/ <br> <br>STDMETHODIMP CAppCF::QueryInterface( <br>const IID FAR&amp;iid, <br>void FAR* FAR*ppv) <br>{ <br>if (iid == IID_IUnknown) <br>*ppv = this; <br>else if (iid == IID_IClassFactory) <br>*ppv = this; <br>else <br>return ResultFromScode(E_NOINTERFACE); <br>AddRef(); <br>return NULL; <br>} <br> <br>/*--------*/ <br> <br>STDMETHODIMP_(ULONG) CAppCF::AddRef() <br>{ <br>return ++m_refs; <br>} <br> <br>/*--------*/ <br> <br>STDMETHODIMP_(ULONG) CAppCF::Release() <br>{ <br>if (!--m_refs) { <br>delete this; <br>return 0; <br>} <br>return m_refs; <br>} <br> <br>/*--------*/ <br> <br>STDMETHODIMP CAppCF::CreateInstance( <br>IUnknown FAR*pUnknownOuter, <br>const IID FAR&amp;riid, <br>void FAR* FAR*ppv) <br>{ <br>#if 0 <br>if (IsEqualCLSID(m_clsid, CLSID_ACMCmprsStream)) { <br>return CACMCmpStream::MakeInst(pUnknownOuter, riid, ppv); <br>} <br>else <br>#endif <br>{ <br>return ResultFromScode(CO_E_CANTDETERMINECLASS); // !!! <br>} <br>} <br> <br>/*--------*/ <br> <br>STDMETHODIMP CAppCF::LockServer( <br>BOOLfLock) <br>{ <br>fLocked = fLock; <br>return NULL; <br>} <br> <br>/*--------*/ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HANDLER.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3793"></a>HANDLER.H</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br> * <br> **************************************************************************/ <br>extern HMODULE ghModule; // = NULL; // global HMODULE/HINSTANCE for resource access <br> <br>// Comment out the following line to disable the custom marshalling code.... <br>#define CUSTOMMARSHAL <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>#define CFactoryImpl    CI      // MSC7 Can't handle long exported names <br>#define CAVIFileImpl    CF      // MSC7 Can't handle long exported names <br>#define CAVIStreamImpl  CS      // MSC7 Can't handle long exported names <br> <br>/* Remove warning of using object during initialization. */ <br>#pragma warning(disable:4355) <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>#define implement       struct <br>#define implementations private <br> <br>/* <br>** _StdClassImplementations <br>** Defines the standard implementations for a class object. <br>*/ <br> <br>#define _StdClassImplementations(Impl)  \ <br>        STDMETHODIMP QueryInterface(const IID FAR&amp; riid, void FAR* FAR* ppv);   \ <br>        STDMETHODIMP_(ULONG) AddRef();  \ <br>        STDMETHODIMP_(ULONG) Release() <br> <br> <br>// non-member function prototypes <br>EXTERN_C BOOL PASCAL FAR LibMain( <br>        HINSTANCE       hInstance, <br>        HGLOBAL segDS, <br>        UINT    cbHeapSize, <br>        LPCSTR  pszCmdLine); <br>EXTERN_C BOOL FAR PASCAL WEP( <br>        BOOL    fSystemExit); <br>STDAPI DllCanUnloadNow( <br>        void); <br>STDAPI DllGetClassObject( <br>        const CLSID FAR&amp;        rclsid, <br>        const IID FAR&amp;  riid, <br>        void FAR* FAR*  ppv); <br>LPSTR FAR FileName( <br>        LPCSTR lszPath); <br> <br>/*      -       -       -       -       -       -       -       -       */ <br>class FAR CAVIFileCF : IClassFactory { <br>public: <br>        static HRESULT Create(const CLSID FAR&amp; rclsid, const IID FAR&amp; riid, void FAR* FAR* ppv); <br>private: <br>        CAVIFileCF(const CLSID FAR&amp; rclsid, IUnknown FAR* FAR* ppUnknown); <br>        _StdClassImplementations(CFactoryImpl); <br>        CFactoryImpl(CAVIFileCF FAR* pAVIFileCF); <br>        STDMETHODIMP CreateInstance(IUnknown FAR* pUnknownOuter, const IID FAR&amp; riid, void FAR* FAR* ppv); <br>        STDMETHODIMP LockServer(BOOL fLock); <br> <br>        ULONG   m_refs; <br>        CLSID   m_clsid; <br>}; <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>class FAR CAVIFile { <br>public: <br>        static HRESULT Create(IUnknown FAR* pUnknownOuter, const IID FAR&amp; riid, void FAR* FAR* ppv); <br>        HRESULT NEAR PASCAL LoadFrame(LONG lPos); <br>        HRESULT NEAR PASCAL WriteFrame(LONG lPos, LPVOID lp, LONG cb); <br> <br>private: <br>        CAVIFile(IUnknown FAR* pUnknownOuter, IUnknown FAR* FAR* ppUnknown); <br> <br>implementations: <br>        implement CUnknownImpl : IUnknown { <br>        public: <br>                _StdClassImplementations( <br>                        CUnknownImpl); <br>                CUnknownImpl( <br>                        CAVIFile FAR* pAVIFile); <br>        private: <br>                CAVIFile FAR*   m_pAVIFile; <br>                ULONG   m_refs; <br>        }; <br>        implement CAVIFileImpl : IAVIFile { <br>        public: <br>                _StdClassImplementations( <br>                        CAVIFileImpl); <br>                CAVIFileImpl( <br>                        CAVIFile FAR* pAVIFile); <br>                ~CAVIFileImpl(); <br>                STDMETHODIMP Info( <br>                        THIS_ <br>                        AVIFILEINFOW * pfi, <br>                        LONG lSize); <br>                STDMETHODIMP GetStream( <br>                        THIS_ <br>                        PAVISTREAM FAR * ppStream, <br>                        DWORD fccType, <br>                        LONG lParam); <br>                STDMETHODIMP CreateStream( <br>                        THIS_ <br>                        PAVISTREAM FAR * ppStream, <br>                        AVISTREAMINFOW * psi); <br>                STDMETHODIMP WriteData( <br>                        THIS_ <br>                        DWORD ckid, <br>                        LPVOID lpData, <br>                        LONG cbData); <br>                STDMETHODIMP ReadData( <br>                        THIS_ <br>                        DWORD ckid, <br>                        LPVOID lpData, <br>                        LONG FAR *lpcbData); <br>                STDMETHODIMP EndRecord( <br>                        THIS); <br>                STDMETHODIMP DeleteStream(THIS_ <br>                                            DWORD fccType, <br>                                            LONG lParam); <br>        private: <br>                // private functions here? <br>                CAVIFile FAR*   m_pAVIFile; <br>        }; <br>        implement CAVIStreamImpl : IAVIStream { <br>        public: <br>                _StdClassImplementations( <br>                        CAVIStreamImpl); <br>                CAVIStreamImpl( <br>                        CAVIFile FAR* pAVIFile); <br>                ~CAVIStreamImpl(); <br>                STDMETHODIMP Create( <br>                        THIS_ <br>                        LPARAM lParam1, <br>                        LPARAM lParam2); <br>                STDMETHODIMP Info( <br>                        THIS_ <br>                        AVISTREAMINFOW FAR * psi, <br>                        LONG lSize); <br>                STDMETHODIMP_(LONG) FindSample( <br>                        THIS_ <br>                        LONG lPos, <br>                        LONG lFlags); <br>                STDMETHODIMP ReadFormat( <br>                        THIS_ <br>                        LONG lPos, <br>                        LPVOID lpFormat, <br>                        LONG FAR *cbFormat); <br>                STDMETHODIMP SetFormat( <br>                        THIS_ <br>                        LONG lPos, <br>                        LPVOID lpFormat, <br>                        LONG cbFormat); <br>                STDMETHODIMP Read( <br>                        THIS_ <br>                        LONG lStart, <br>                        LONG lSamples, <br>                        LPVOID lpBuffer, <br>                        LONG cbBuffer, <br>                        LONG FAR * plBytes, <br>                        LONG FAR * plSamples); <br>                STDMETHODIMP Write( <br>                        THIS_ <br>                        LONG lStart, <br>                        LONG lSamples, <br>                        LPVOID lpBuffer, <br>                        LONG cbBuffer, <br>                        DWORD dwFlags, <br>                        LONG FAR *plSampWritten, <br>                        LONG FAR *plBytesWritten); <br>                STDMETHODIMP Delete( <br>                        THIS_ <br>                        LONG lStart, <br>                        LONG lSamples); <br>                STDMETHODIMP ReadData( <br>                        THIS_ <br>                        DWORD fcc, <br>                        LPVOID lp, <br>                        LONG FAR *lpcb); <br>                STDMETHODIMP WriteData( <br>                        THIS_ <br>                        DWORD fcc, <br>                        LPVOID lp, <br>                        LONG cb); <br>                STDMETHODIMP SetInfo(AVISTREAMINFOW FAR * lpInfo, LONG cbInfo); <br>        private: <br>                // private functions here? <br>                CAVIFile FAR*   m_pAVIFile; <br>        }; <br> <br>        implement CPersistFileImpl : IPersistFile { <br>        public: <br>            CPersistFileImpl(CAVIFile FAR* pAVIFile); <br>            STDMETHODIMP QueryInterface(REFIID riid, LPVOID FAR* ppv); <br>            STDMETHODIMP_(ULONG) AddRef(); <br>            STDMETHODIMP_(ULONG) Release(); <br> <br>            // *** IPersist methods *** <br>            STDMETHODIMP GetClassID (LPCLSID lpClassID); <br> <br>            // *** IPersistFile methods *** <br>            STDMETHODIMP IsDirty (); <br>            STDMETHODIMP Load (LPCOLESTR lpszFileName, DWORD grfMode); <br>            STDMETHODIMP Save (LPCOLESTR lpszFileName, BOOL fRemember); <br>            STDMETHODIMP SaveCompleted (LPCOLESTR lpszFileName); <br>            STDMETHODIMP GetCurFile (LPOLESTR FAR * lplpszFileName); <br> <br>        private: <br>            CAVIFile FAR*       m_pAVIFile; <br>        }; <br> <br> <br>#ifdef CUSTOMMARSHAL <br>        implement CMarshalImpl : IMarshal { <br>        public: <br>                _StdClassImplementations( <br>                        CMarshalImpl); <br>                CMarshalImpl( <br>                        CAVIFile FAR* pAVIFile); <br>                // *** IMarshal methods *** <br>                STDMETHODIMP GetUnmarshalClass ( <br>                        THIS_ <br>                        REFIID riid, <br>                        LPVOID pv, <br>                        DWORD dwDestContext, <br>                        LPVOID pvDestContext, <br>                        DWORD mshlflags, <br>                        LPCLSID pCid); <br>                STDMETHODIMP GetMarshalSizeMax ( <br>                        THIS_ <br>                        REFIID riid, <br>                        LPVOID pv, <br>                        DWORD dwDestContext, <br>                        LPVOID pvDestContext, <br>                        DWORD mshlflags, <br>                        LPDWORD pSize); <br>                STDMETHODIMP MarshalInterface( <br>                        THIS_ <br>                        LPSTREAM pStm, <br>                        REFIID riid, <br>                        LPVOID pv, <br>                        DWORD dwDestContext, <br>                        LPVOID pvDestContext, <br>                        DWORD mshlflags); <br>                STDMETHODIMP UnmarshalInterface ( <br>                        THIS_ <br>                        LPSTREAM pStm, <br>                        REFIID riid, <br>                        LPVOID FAR* ppv); <br>                STDMETHODIMP ReleaseMarshalData ( <br>                        THIS_ <br>                        LPSTREAM pStm); <br>                STDMETHODIMP DisconnectObject ( <br>                THIS_ <br>                DWORD dwReserved); <br>        private: <br>                CAVIFile FAR*   m_pAVIFile; <br>        }; <br>#endif <br>public: <br>        CUnknownImpl    m_Unknown; <br>        CAVIFileImpl    m_AVIFile; <br>        CAVIStreamImpl  m_AVIStream; <br>        CPersistFileImpl m_Persist; <br>#ifdef CUSTOMMARSHAL <br>        CMarshalImpl    m_Marshal; <br>#endif <br>public: <br>        IUnknown FAR*   m_pUnknownOuter; <br> <br>        // <br>        // DIB Sequence instance data <br>        // <br>        DWORD   dwFirstFrame; <br>        DWORD   dwMaxValue; <br>#ifndef _MAX_PATH <br>        #define _MAX_PATH       260 <br>#else <br>        #if _MAX_PATH !=        260     // Error check <br>                #error <br>        #endif <br>#endif <br>        char    achFilenameTemplate[_MAX_PATH]; <br>        LONG    lCurFrame; <br>        AVIFILEINFO     finfo; <br>        AVISTREAMINFOW sinfo; <br> <br>        BOOL    fStreamPresent; <br>        LPVOID  lpFormat;       // stream format <br>        LONG    cbFormat; <br>        LONG    cbFormatBuffer; <br>        LPVOID  lpFrame; <br>        LONG    cbFrame; <br>        LONG    cbFrameBuffer; <br>        BOOL    fDirty; <br>        UINT    mode; <br>}; <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>/* <br>** The usage counter keeps track of the overall usage of objects based on <br>** implementations provided by the component. This allows one to determine <br>** when the implementation is no longer in use. <br>*/ <br> <br>extern UINT     uUseCount; <br>extern BOOL     fLocked; <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br> <br>DEFINE_AVIGUID(CLSID_DIBSEQFileReader, 0x00020006, 0, 0); </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FACTORY.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3792"></a>FACTORY.CPP</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br> * <br> **************************************************************************/ <br> <br> <br>#define _INC_OLE <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;ole2.h&gt; <br> <br>#define INITGUID <br>#include &lt;initguid.h&gt; <br>// Bring in the external GUIDs we need.... <br>//DEFINE_OLEGUID(IID_IUnknown,            0x00000000L, 0, 0); <br>//DEFINE_OLEGUID(IID_IClassFactory,       0x00000001L, 0, 0); <br>//DEFINE_OLEGUID(IID_IMarshal,            0x00000003L, 0, 0); <br> <br>#include &lt;vfw.h&gt; <br>#include "handler.h" <br> <br>HMODULE ghModule = NULL;        // global HMODULE/HINSTANCE for resource access <br> <br>/*      -       -       -       -       -       -       -       -       */ <br>EXTERN_C BOOL APIENTRY DllMain(HANDLE, DWORD, LPVOID); <br>EXTERN_C BOOL APIENTRY DllMain( <br>HANDLE hModule, <br>DWORD dwReason, <br>LPVOID lpReserved ) <br>{ <br>        switch( dwReason) <br>        { <br>                case DLL_PROCESS_ATTACH: <br>                        if(ghModule == NULL) <br>                                ghModule = (HMODULE)hModule; <br>                        break; <br>                case DLL_THREAD_ATTACH: <br>                        break; <br>                case DLL_THREAD_DETACH: <br>                        break; <br>                case DLL_PROCESS_DETACH: <br>                        break; <br>        } <br>        return TRUE; <br>} <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>EXTERN_C BOOL FAR PASCAL WEP( <br>        BOOL    fSystemExit) <br>{ <br>        return TRUE; <br>} <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>STDAPI DllCanUnloadNow( <br>        void) <br>{ <br>        return ResultFromScode((fLocked || uUseCount) ? S_FALSE : S_OK); <br>} <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>STDAPI DllGetClassObject( <br>        const CLSID FAR&amp;        rclsid, <br>        const IID FAR&amp;  riid, <br>        void FAR* FAR*  ppv) <br>{ <br>        HRESULT hresult; <br> <br>        hresult = CAVIFileCF::Create(rclsid, riid, ppv); <br>        return hresult; <br>} <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>HRESULT CAVIFileCF::Create( <br>        const CLSID FAR&amp;        rclsid, <br>        const IID FAR&amp;  riid, <br>        void FAR* FAR*  ppv) <br>{ <br>        CAVIFileCF FAR* pAVIFileCF; <br>        IUnknown FAR*   pUnknown; <br>        HRESULT hresult; <br> <br>        pAVIFileCF = new FAR CAVIFileCF(rclsid, &amp;pUnknown); <br>        if (pAVIFileCF == NULL) <br>                return ResultFromScode(E_OUTOFMEMORY); <br>        hresult = pUnknown-&gt;QueryInterface(riid, ppv); <br>        if (FAILED(GetScode(hresult))) <br>                delete pAVIFileCF; <br>        return hresult; <br>} <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>CAVIFileCF::CAVIFileCF( <br>        const CLSID FAR&amp;        rclsid, <br>        IUnknown FAR* FAR*      ppUnknown) <br>{ <br>        m_clsid = rclsid; <br>        m_refs = 0; <br>        *ppUnknown = this; <br>} <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>STDMETHODIMP CAVIFileCF::QueryInterface( <br>        const IID FAR&amp;  iid, <br>        void FAR* FAR*  ppv) <br>{ <br>        if (iid == IID_IUnknown) <br>                *ppv = this; <br>        else if (iid == IID_IClassFactory) <br>                *ppv = this; <br>        else <br>                return ResultFromScode(E_NOINTERFACE); <br>        AddRef(); <br>        return NULL; <br>} <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>STDMETHODIMP_(ULONG) CAVIFileCF::AddRef() <br>{ <br>        return ++m_refs; <br>} <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>STDMETHODIMP_(ULONG) CAVIFileCF::Release() <br>{ <br>        if (!--m_refs) { <br>                delete this; <br>                return 0; <br>        } <br>        return m_refs; <br>} <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>STDMETHODIMP CAVIFileCF::CreateInstance( <br>        IUnknown FAR*   pUnknownOuter, <br>        const IID FAR&amp;  riid, <br>        void FAR* FAR*  ppv) <br>{ <br>        HRESULT hresult; <br>        // Actually create a real object using the CAVIFile class.... <br> <br>        // !!! We should really make sure they're using IAVIFile or IMarshal! <br>        if (m_clsid == CLSID_DIBSEQFileReader) { <br>                hresult = CAVIFile::Create(pUnknownOuter, riid, ppv); <br>                return hresult; <br>        } else { <br>                return ResultFromScode(E_UNEXPECTED); <br>        } <br>} <br> <br>/*      -       -       -       -       -       -       -       -       */ <br> <br>STDMETHODIMP CAVIFileCF::LockServer( <br>        BOOL    fLock) <br>{ <br>        fLocked = fLock; <br>        return NULL; <br>} <br> <br>/*      -       -       -       -       -       -       -       -       */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

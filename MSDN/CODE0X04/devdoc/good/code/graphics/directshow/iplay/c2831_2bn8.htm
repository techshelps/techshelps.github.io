<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INDEO.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2834"></a>INDEO.CPP</h2>
<pre><code>// This code and information is provided "as is" without warranty of <br>// any kind, either expressed or implied, including but not limited to <br>// the implied warranties of merchantability and/or fitness for a <br>// particular purpose. <br> <br>// Copyright (C) 1996 - 1997 Intel corporation.  All rights reserved. <br> <br>// Indeo.cpp : implementation file <br>// <br> <br>#include "stdafx.h" <br>#include "IPlay.h" <br>#include "Indeo.h" <br>#include "IPlayDoc.h" <br>#include "Ax_Spec.h" <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>const int BCS_MAX = 128;// used by trackbar controls <br>const int BCS_TICS = 16;         <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CIndeo <br> <br>IMPLEMENT_DYNCREATE(CIndeo, CFormView) <br> <br>CIndeo::CIndeo() <br>: CFormView(CIndeo::IDD) <br>{ <br>//{{AFX_DATA_INIT(CIndeo) <br>m_bAccessKey = FALSE; <br>m_dwDecodeHeight = 0; <br>m_dwDecodeWidth = 0; <br>m_dwDecodeX = 0; <br>m_dwDecodeY = 0; <br>m_dwKeyValue = 0; <br>m_dwViewHeight = 0; <br>m_dwViewWidth = 0; <br>m_dwViewX = 0; <br>m_dwViewY = 0; <br>m_intBrightness = 0; <br>m_intContrast = 0; <br>m_intSaturation = 0; <br>m_dwDecodeTime = 0; <br>m_bAltLine = FALSE; <br>m_intGreen = 0; <br>m_intRed = 0; <br>m_intBlue = 0; <br>m_bDontDropFrames = FALSE; <br>m_bDontDropQuality = FALSE; <br>m_bViewOrigin = -1; <br>m_bTransFill = -1; <br>//}}AFX_DATA_INIT <br> <br>m_dwInitTransRGBVal = 0; <br>m_bViewOrigin = 0; <br>} <br> <br>CIndeo::~CIndeo() <br>{ <br>} <br> <br>void CIndeo::DoDataExchange(CDataExchange* pDX) <br>{ <br>CFormView::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CIndeo) <br>DDX_Control(pDX, IDC_CUSTOM_COLORS, m_btnCustomColors); <br>DDX_Control(pDX, IDC_DONT_DROP_QUALITY, m_checkDontDropQuality); <br>DDX_Control(pDX, IDC_DONT_DROP_FRAMES, m_checkDontDropFrames); <br>DDX_Control(pDX, IDC_SATURATION_TEXT, m_editSaturation); <br>DDX_Control(pDX, IDC_CONTRAST_TEXT, m_editContrast); <br>DDX_Control(pDX, IDC_BRIGHTNESS_TEXT, m_editBrightness); <br>DDX_Control(pDX, IDC_GREEN_EDIT, m_editTransFillGreen); <br>DDX_Control(pDX, IDC_BLUE_EDIT, m_editTransFillBlue); <br>DDX_Control(pDX, IDC_RED_EDIT, m_editTransFillRed); <br>DDX_Control(pDX, IDC_ALTLINE, m_checkAltLine); <br>DDX_Control(pDX, IDC_DECODE_TIME, m_editDecodeTime); <br>DDX_Control(pDX, IDC_VIEW_WIDTH, m_editViewWidth); <br>DDX_Control(pDX, IDC_VIEW_Y, m_editViewY); <br>DDX_Control(pDX, IDC_VIEW_X, m_editViewX); <br>DDX_Control(pDX, IDC_VIEW_HEIGHT, m_editViewHeight); <br>DDX_Control(pDX, IDC_KEY_VALUE, m_editKeyValue); <br>DDX_Control(pDX, IDC_DECODE_Y, m_editDecodeY); <br>DDX_Control(pDX, IDC_DECODE_X, m_editDecodeX); <br>DDX_Control(pDX, IDC_DECODE_WIDTH, m_editDecodeWidth); <br>DDX_Control(pDX, IDC_ACCESSKEY, m_checkAccessKey); <br>DDX_Control(pDX, ID_INDEO_DEFAULTS, m_btnDefaults); <br>DDX_Control(pDX, ID_INDEO_APPLY, m_btnApply); <br>DDX_Control(pDX, IDC_DECODE_HEIGHT, m_editDecodeHeight); <br>DDX_Control(pDX, IDC_TB_COLORCONTROL_SATURATION, m_tbSaturation); <br>DDX_Control(pDX, IDC_TB_COLORCONTROL_CONTRAST, m_tbContrast); <br>DDX_Control(pDX, IDC_TB_COLORCONTROL_BRIGHTNESS, m_tbBrightness); <br>DDX_Check(pDX, IDC_ACCESSKEY, m_bAccessKey); <br>DDX_Text(pDX, IDC_DECODE_HEIGHT, m_dwDecodeHeight); <br>DDX_Text(pDX, IDC_DECODE_WIDTH, m_dwDecodeWidth); <br>DDX_Text(pDX, IDC_DECODE_X, m_dwDecodeX); <br>DDX_Text(pDX, IDC_DECODE_Y, m_dwDecodeY); <br>DDX_Text(pDX, IDC_KEY_VALUE, m_dwKeyValue); <br>DDX_Text(pDX, IDC_VIEW_HEIGHT, m_dwViewHeight); <br>DDX_Text(pDX, IDC_VIEW_WIDTH, m_dwViewWidth); <br>DDX_Text(pDX, IDC_VIEW_X, m_dwViewX); <br>DDX_Text(pDX, IDC_VIEW_Y, m_dwViewY); <br>DDX_Text(pDX, IDC_BRIGHTNESS_TEXT, m_intBrightness); <br>DDV_MinMaxInt(pDX, m_intBrightness, -128, 128); <br>DDX_Text(pDX, IDC_CONTRAST_TEXT, m_intContrast); <br>DDV_MinMaxInt(pDX, m_intContrast, -128, 128); <br>DDX_Text(pDX, IDC_SATURATION_TEXT, m_intSaturation); <br>DDV_MinMaxInt(pDX, m_intSaturation, -128, 128); <br>DDX_Text(pDX, IDC_DECODE_TIME, m_dwDecodeTime); <br>DDX_Control(pDX, IDC_TRANS_FILL, m_radTransFill); <br>DDX_Control(pDX, IDC_TRANS_NOFILL, m_radTransNoFill); <br>DDX_Check(pDX, IDC_ALTLINE, m_bAltLine); <br>DDX_Text(pDX, IDC_GREEN_EDIT, m_intGreen); <br>DDV_MinMaxInt(pDX, m_intGreen, 0, 255); <br>DDX_Text(pDX, IDC_RED_EDIT, m_intRed); <br>DDV_MinMaxInt(pDX, m_intRed, 0, 255); <br>DDX_Text(pDX, IDC_BLUE_EDIT, m_intBlue); <br>DDV_MinMaxInt(pDX, m_intBlue, 0, 255); <br>DDX_Check(pDX, IDC_DONT_DROP_FRAMES, m_bDontDropFrames); <br>DDX_Check(pDX, IDC_DONT_DROP_QUALITY, m_bDontDropQuality); <br>DDX_Control(pDX, IDC_FRAME_ORIGIN, m_radFrameOrigin); <br>DDX_Control(pDX, IDC_VIEW_ORIGIN, m_radViewOrigin); <br>DDX_Radio(pDX, IDC_FRAME_ORIGIN, m_bViewOrigin); <br>DDX_Radio(pDX, IDC_TRANS_NOFILL, m_bTransFill); <br>//}}AFX_DATA_MAP <br>} <br> <br> <br>BEGIN_MESSAGE_MAP(CIndeo, CFormView) <br>//{{AFX_MSG_MAP(CIndeo) <br>ON_BN_CLICKED(ID_INDEO_APPLY, OnIndeoApply) <br>ON_BN_CLICKED(ID_INDEO_DEFAULTS, OnIndeoDefaults) <br>ON_EN_CHANGE(IDC_DECODE_HEIGHT, OnChangeDecodeHeight) <br>ON_EN_CHANGE(IDC_DECODE_WIDTH, OnChangeDecodeWidth) <br>ON_EN_CHANGE(IDC_DECODE_X, OnChangeDecodeX) <br>ON_EN_CHANGE(IDC_DECODE_Y, OnChangeDecodeY) <br>ON_EN_CHANGE(IDC_VIEW_HEIGHT, OnChangeViewHeight) <br>ON_EN_CHANGE(IDC_VIEW_WIDTH, OnChangeViewWidth) <br>ON_EN_CHANGE(IDC_VIEW_X, OnChangeViewX) <br>ON_EN_CHANGE(IDC_VIEW_Y, OnChangeViewY) <br>ON_BN_CLICKED(IDC_ACCESSKEY, OnAccesskey) <br>ON_EN_CHANGE(IDC_DECODE_TIME, OnChangeDecodeTime) <br>ON_EN_CHANGE(IDC_KEY_VALUE, OnChangeKeyValue) <br>ON_BN_CLICKED(IDC_TRANS_FILL, OnTransFill) <br>ON_BN_CLICKED(IDC_TRANS_NOFILL, OnTransNofill) <br>ON_BN_CLICKED(IDC_ALTLINE, OnAltline) <br>ON_WM_HSCROLL() <br>ON_EN_CHANGE(IDC_GREEN_EDIT, OnChangeGreenEdit) <br>ON_EN_CHANGE(IDC_RED_EDIT, OnChangeRedEdit) <br>ON_EN_CHANGE(IDC_BLUE_EDIT, OnChangeBlueEdit) <br>ON_BN_CLICKED(IDC_DONT_DROP_FRAMES, OnDontDropFrames) <br>ON_BN_CLICKED(IDC_DONT_DROP_QUALITY, OnDontDropQuality) <br>ON_BN_CLICKED(IDC_VIEW_ORIGIN, OnViewOrigin) <br>ON_BN_CLICKED(IDC_FRAME_ORIGIN, OnFrameOrigin) <br>ON_BN_CLICKED(IDC_CUSTOM_COLORS, OnCustomColors) <br>ON_EN_UPDATE(IDC_BRIGHTNESS_TEXT, OnUpdateBSCText) <br>ON_WM_TIMER() <br>ON_EN_UPDATE(IDC_CONTRAST_TEXT, OnUpdateBSCText) <br>ON_EN_UPDATE(IDC_SATURATION_TEXT, OnUpdateBSCText) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CIndeo diagnostics <br> <br>#ifdef _DEBUG <br>void CIndeo::AssertValid() const <br>{ <br>CFormView::AssertValid(); <br>} <br> <br>void CIndeo::Dump(CDumpContext&amp; dc) const <br>{ <br>CFormView::Dump(dc); <br>} <br>#endif //_DEBUG <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CIndeo message handlers <br> <br>void CIndeo::OnInitialUpdate()  <br>{ <br>CIPlayDoc *pDoc; <br> <br>CFormView::OnInitialUpdate(); <br> <br>// Initialize trackbars <br>m_tbBrightness.SetRange(-BCS_MAX, BCS_MAX); <br>m_tbBrightness.SetTicFreq(BCS_TICS); <br> <br>m_tbContrast.SetRange(-BCS_MAX, BCS_MAX); <br>m_tbContrast.SetTicFreq(BCS_TICS); <br> <br>m_tbSaturation.SetRange(-BCS_MAX, BCS_MAX); <br>m_tbSaturation.SetTicFreq(BCS_TICS); <br> <br>// Is the movie an Indeo movie? <br>pDoc = (CIPlayDoc *)GetDocument(); <br>if ( pDoc-&gt;IsIndeo() ){ <br>EnableAllOptions(); <br> <br>pDoc-&gt;GetBCS(m_intBrightness, m_intContrast, m_intSaturation); <br>m_tbBrightness.SetPos(m_intBrightness); <br>m_tbContrast.SetPos(m_intContrast); <br>m_tbSaturation.SetPos(m_intSaturation); <br> <br>pDoc-&gt;GetTransFillRGB(m_intRed, m_intGreen, m_intBlue); <br> <br>m_dwInitTransRGBVal = RGB(m_intRed, m_intGreen, m_intBlue); <br> <br>pDoc-&gt;GetDecodeTime(m_dwDecodeTime); <br>pDoc-&gt;GetDecodeRect(m_dwDecodeX, m_dwDecodeY, m_dwDecodeWidth, <br>m_dwDecodeHeight); <br>pDoc-&gt;GetViewRect(m_dwViewX, m_dwViewY, m_dwViewWidth, m_dwViewHeight); <br> <br>pDoc-&gt;GetSequenceOptions(m_bAltLine, m_bDontDropFrames, m_bDontDropQuality, m_bTransFill, m_bAccessKey, <br>m_dwKeyValue); <br> <br>// Update dialog controls from member variables <br>UpdateData(FALSE); <br>} <br>else { <br>if (pDoc-&gt;IsInitialized())  <br>MessageBox("This is not an IV41 movie so Indeo options will not be available.", <br>"Not an Indeo Movie", MB_OK); <br>DisableAllOptions(); <br>}        <br> <br>} <br> <br>void CIndeo::OnUpdate(CView* pSender, LPARAM lHint, CObject* pHint)  <br>{ <br>CIPlayDoc *pDoc; <br> <br>pDoc = (CIPlayDoc *)GetDocument(); <br> <br>// Sequence options can only be changed when the movie <br>// is stopped (they can actually be changed any time, but <br>// will not take effect until the movie is stoppped and  <br>// restarted). <br>if (pDoc-&gt;IsIndeo()) { <br>if (pDoc-&gt;m_State == pDoc-&gt;Stopped) <br>EnableSeqOptions(); <br>else <br>DisableSeqOptions(); <br>} <br>} <br> <br>void CIndeo::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar)  <br>{ <br>int origBrightness = m_intBrightness; <br>int origContrast = m_intContrast; <br>int origSaturation = m_intSaturation; <br> <br>if ( ! pScrollBar){ <br>CFormView::OnHScroll( nSBCode, nPos, pScrollBar ); <br>return; <br>} <br> <br>switch (nSBCode) { <br>case TB_LINEUP: <br> <br> if (pScrollBar-&gt;m_hWnd == m_tbBrightness.m_hWnd) {  <br>if (m_intBrightness &gt; -128) <br>m_intBrightness--; <br>} <br>else if (pScrollBar-&gt;m_hWnd == m_tbContrast.m_hWnd) { <br>if (m_intContrast &gt; -128) <br>m_intContrast--; <br>} <br>else if (pScrollBar-&gt;m_hWnd == m_tbSaturation.m_hWnd) { <br>if (m_intSaturation &gt; -128) <br>m_intSaturation--; <br>} <br>break; <br> <br>case TB_LINEDOWN: <br> <br> if (pScrollBar-&gt;m_hWnd == m_tbBrightness.m_hWnd) {  <br>if (m_intBrightness &lt; 128) <br>m_intBrightness++; <br>} <br>else if (pScrollBar-&gt;m_hWnd == m_tbContrast.m_hWnd){ <br>if (m_intContrast &lt; 128) <br>m_intContrast++; <br>} <br>else if (pScrollBar-&gt;m_hWnd == m_tbSaturation.m_hWnd) { <br>if (m_intSaturation &lt; 128) <br>m_intSaturation++; <br>} <br>break; <br> <br>case TB_THUMBPOSITION:  <br>case TB_THUMBTRACK: <br> <br>if (pScrollBar-&gt;m_hWnd == m_tbBrightness.m_hWnd)  <br>m_intBrightness = (int)nPos; <br> <br>else if (pScrollBar-&gt;m_hWnd == m_tbContrast.m_hWnd) <br>m_intContrast = (int)nPos; <br> <br>else if (pScrollBar-&gt;m_hWnd == m_tbSaturation.m_hWnd) <br>m_intSaturation = (int)nPos; <br>break; <br> <br>case TB_PAGEUP: <br>case TB_PAGEDOWN: <br> <br>if (pScrollBar-&gt;m_hWnd == m_tbBrightness.m_hWnd)  <br>m_intBrightness = (int)m_tbBrightness.GetPos(); <br> <br>else if (pScrollBar-&gt;m_hWnd == m_tbContrast.m_hWnd) <br>m_intContrast = (int)m_tbContrast.GetPos(); <br> <br>else if (pScrollBar-&gt;m_hWnd == m_tbSaturation.m_hWnd) <br>m_intSaturation = (int)m_tbSaturation.GetPos(); <br>break; <br>} <br>if ((origBrightness != m_intBrightness) <br>|| (origContrast != m_intContrast) <br>|| (origSaturation != m_intSaturation)) <br>   m_btnApply.EnableWindow(TRUE); <br> <br>UpdateData(FALSE); <br> <br>return; <br> <br>} <br> <br>void CIndeo::OnIndeoApply()  <br>{ <br>CIPlayDoc *pDoc; <br>CRect rd, rv; <br> <br>LONG lScalTemp; <br> <br>// Update member variables from dialog controls <br>UpdateData(TRUE); <br> <br>pDoc = (CIPlayDoc *)GetDocument(); <br> <br>//Make sure the decode rect is within the video rect <br>if ( m_dwDecodeX + m_dwDecodeWidth &gt; pDoc-&gt;VideoWidth() ) {  <br>AfxMessageBox(IDS_DECODERECT_TOO_BIG, MB_ICONEXCLAMATION | MB_OK); <br>m_editDecodeWidth.SetFocus(); <br>m_editDecodeWidth.SetSel((DWORD)((-1 &lt;&lt; 16) &amp; 0xFFFF0000));  <br>return; <br>} <br> <br>if ( m_dwDecodeY + m_dwDecodeHeight &gt; pDoc-&gt;VideoHeight() ) { <br>AfxMessageBox(IDS_DECODERECT_TOO_BIG, MB_ICONEXCLAMATION | MB_OK); <br>m_editDecodeHeight.SetFocus(); <br>m_editDecodeHeight.SetSel((DWORD)((-1 &lt;&lt; 16) &amp; 0xFFFF0000));  <br>return; <br>} <br> <br>// Make sure view rect is in decode rect and video rect; if not, return <br>rd = CRect(m_dwDecodeX,  <br>          m_dwDecodeY,  <br>          m_dwDecodeX + m_dwDecodeWidth,  <br>          m_dwDecodeY + m_dwDecodeHeight); <br> <br>rv = CRect(m_dwViewX, <br>           m_dwViewY, <br>   m_dwViewX + m_dwViewWidth, <br>   m_dwViewY + m_dwViewHeight); <br> <br>if ( rv != CRect(0,0,0,0) ) { <br>     <br>if ( rd == CRect(0,0,0,0) ) { <br>if ( (m_dwViewX + m_dwViewWidth &gt; pDoc-&gt;VideoWidth()) || <br>         (m_dwViewY + m_dwViewHeight &gt; pDoc-&gt;VideoHeight()) ) { <br>AfxMessageBox(IDS_VIEWRECT_TOO_BIG, MB_ICONEXCLAMATION | MB_OK); <br>m_editViewX.SetFocus(); <br>m_editViewX.SetSel((DWORD)((-1 &lt;&lt; 16) &amp; 0xFFFF0000));  <br>return; <br>} <br>} <br>/*else if ( rd &amp; rv != rv ) { <br>AfxMessageBox(IDS_VIEWRECT_TOO_BIG, MB_ICONEXCLAMATION | MB_OK); <br>m_editViewX.SetFocus(); <br>m_editViewX.SetSel((DWORD)((-1 &lt;&lt; 16) &amp; 0xFFFF0000));  <br>return; <br>} */ <br> <br>}      <br> <br> <br>pDoc-&gt;SetTransFillRGB( RGB(m_intBlue, m_intGreen, m_intRed) ); <br> <br>pDoc-&gt;SetDecodeTime(m_dwDecodeTime); <br> <br>pDoc-&gt;SetDecodeRect(m_dwDecodeX, m_dwDecodeY, m_dwDecodeWidth, <br>            m_dwDecodeHeight); <br> <br>pDoc-&gt;SetViewRect(m_bViewOrigin, m_dwViewX, m_dwViewY, m_dwViewWidth, m_dwViewHeight); <br> <br>pDoc-&gt;SetBCS(m_intBrightness, m_intContrast, m_intSaturation); <br> <br>if (!pDoc-&gt;CanStop()) // movie is Stopped <br>{ <br>if (m_bDontDropFrames &amp;&amp; ! m_bDontDropQuality) <br>lScalTemp = SC_DONT_DROP_FRAMES; <br>else if (m_bDontDropQuality &amp;&amp; ! m_bDontDropFrames)  <br>lScalTemp = SC_DONT_DROP_QUALITY; <br>else if (m_bDontDropFrames &amp;&amp; m_bDontDropQuality) <br>lScalTemp = SC_OFF; <br>else <br>lScalTemp = SC_ON; <br> <br>pDoc-&gt;SetSequenceOptions(m_bAltLine, lScalTemp, m_bTransFill, m_bAccessKey, <br>m_dwKeyValue); <br>} <br> <br>// Disable Apply button until there is something to apply <br>   m_btnApply.EnableWindow(FALSE); <br>} <br> <br>void CIndeo::OnIndeoDefaults()  <br>{ <br>CIPlayDoc *pDoc; <br> <br>pDoc = (CIPlayDoc *)GetDocument(); <br> <br>pDoc-&gt;GetFrameDefaults(m_intBrightness, m_intContrast, m_intSaturation, m_dwDecodeTime, m_dwDecodeX,  <br>   m_dwDecodeY, m_dwDecodeWidth, m_dwDecodeHeight, m_dwViewX, m_dwViewY, m_dwViewWidth,  <br>   m_dwViewHeight); <br> <br>//Get the Initial color of the Transparency Fill Color <br>m_intRed   = (m_dwInitTransRGBVal&amp;0x000000FF); <br>m_intGreen = (m_dwInitTransRGBVal&amp;0x0000FF00)&gt;&gt;8; <br>m_intBlue  = (m_dwInitTransRGBVal&amp;0x00FF0000)&gt;&gt;16; <br> <br>m_bViewOrigin = FALSE; <br> <br>if (!pDoc-&gt;CanStop())  // movie is Stopped <br>pDoc-&gt;GetSeqDefaults(m_bAltLine, m_bDontDropFrames, m_bDontDropQuality, m_bTransFill, m_bAccessKey, <br>m_dwKeyValue); <br> <br>// Update trackbars <br>pDoc-&gt;SetBCS(m_intBrightness, m_intContrast, m_intSaturation); <br>m_tbBrightness.SetPos(m_intBrightness); <br>m_tbContrast.SetPos(m_intContrast); <br>m_tbSaturation.SetPos(m_intSaturation); <br> <br>// Update visiblity of Access Key value <br>if (m_bAccessKey) <br>m_editKeyValue.ShowWindow(SW_SHOW); <br>else <br>m_editKeyValue.ShowWindow(SW_HIDE); <br> <br>// Update dialog controls from member variables <br>UpdateData(FALSE); <br> <br>OnIndeoApply(); <br>} <br> <br>void CIndeo::OnAccesskey()  <br>{ <br> <br>UpdateData(TRUE); <br> <br>if (m_bAccessKey) { <br>m_editKeyValue.ShowWindow(SW_SHOW); <br>m_editKeyValue.SetFocus(); <br>m_editKeyValue.SetSel((DWORD)((-1 &lt;&lt; 16) &amp; 0xFFFF0000)); <br>} <br>else <br>m_editKeyValue.ShowWindow(SW_HIDE); <br> <br>m_btnApply.EnableWindow(TRUE); <br> <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CIndeo helper functions <br> <br>void CIndeo::EnableAllOptions() <br>{ <br>m_editBrightness.EnableWindow(TRUE); <br>m_editContrast.EnableWindow(TRUE); <br>m_editSaturation.EnableWindow(TRUE); <br> <br>m_tbBrightness.EnableWindow(TRUE); <br>m_tbContrast.EnableWindow(TRUE); <br>m_tbSaturation.EnableWindow(TRUE); <br> <br>m_editDecodeTime.EnableWindow(TRUE); <br>m_editDecodeX.EnableWindow(TRUE); <br>m_editDecodeY.EnableWindow(TRUE); <br>m_editDecodeHeight.EnableWindow(TRUE); <br>m_editDecodeWidth.EnableWindow(TRUE); <br> <br>m_editViewX.EnableWindow(TRUE); <br>m_editViewY.EnableWindow(TRUE); <br>m_editViewHeight.EnableWindow(TRUE); <br>m_editViewWidth.EnableWindow(TRUE); <br> <br>m_editTransFillRed.EnableWindow(TRUE); <br>m_editTransFillGreen.EnableWindow(TRUE); <br>m_editTransFillBlue.EnableWindow(TRUE); <br>m_btnCustomColors.EnableWindow(TRUE); <br> <br>m_radFrameOrigin.EnableWindow(TRUE); <br>m_radViewOrigin.EnableWindow(TRUE); <br> <br>m_btnDefaults.EnableWindow(TRUE); <br> <br>// Apply button will not be enabled until something changes <br> <br>EnableSeqOptions(); <br>} <br> <br>void CIndeo::DisableAllOptions() <br>{ <br> <br>m_editBrightness.EnableWindow(FALSE); <br>m_editContrast.EnableWindow(FALSE); <br>m_editSaturation.EnableWindow(FALSE); <br> <br>m_tbBrightness.EnableWindow(FALSE); <br>m_tbContrast.EnableWindow(FALSE); <br>m_tbSaturation.EnableWindow(FALSE); <br> <br>m_editDecodeTime.EnableWindow(FALSE); <br>m_editDecodeX.EnableWindow(FALSE); <br>m_editDecodeY.EnableWindow(FALSE); <br>m_editDecodeHeight.EnableWindow(FALSE); <br>m_editDecodeWidth.EnableWindow(FALSE); <br> <br>m_editViewX.EnableWindow(FALSE); <br>m_editViewY.EnableWindow(FALSE); <br>m_editViewHeight.EnableWindow(FALSE); <br>m_editViewWidth.EnableWindow(FALSE); <br> <br>m_editTransFillRed.EnableWindow(FALSE); <br>m_editTransFillGreen.EnableWindow(FALSE); <br>m_editTransFillBlue.EnableWindow(FALSE); <br>m_btnCustomColors.EnableWindow(FALSE); <br> <br>m_radFrameOrigin.EnableWindow(FALSE); <br>m_radViewOrigin.EnableWindow(FALSE); <br> <br>m_btnDefaults.EnableWindow(FALSE); <br>m_btnApply.EnableWindow(FALSE); <br> <br>DisableSeqOptions(); <br>} <br> <br>void CIndeo::EnableSeqOptions() <br>{ <br>m_checkAltLine.EnableWindow(TRUE); <br> <br>m_checkDontDropFrames.EnableWindow(TRUE); <br>m_checkDontDropQuality.EnableWindow(TRUE); <br> <br>m_checkAccessKey.EnableWindow(TRUE); <br>m_editKeyValue.EnableWindow(TRUE); <br> <br>m_radTransFill.EnableWindow(TRUE); <br>m_radTransNoFill.EnableWindow(TRUE); <br> <br>if (m_bAccessKey) <br>m_editKeyValue.ShowWindow(SW_SHOW); <br>else <br>m_editKeyValue.ShowWindow(SW_HIDE); <br>} <br> <br>void CIndeo::DisableSeqOptions() <br>{ <br>m_checkAltLine.EnableWindow(FALSE); <br> <br>m_checkDontDropFrames.EnableWindow(FALSE); <br>m_checkDontDropQuality.EnableWindow(FALSE); <br> <br>m_checkAccessKey.EnableWindow(FALSE); <br>m_editKeyValue.EnableWindow(FALSE); <br>m_radTransFill.EnableWindow(FALSE); <br>m_radTransNoFill.EnableWindow(FALSE); <br>m_editKeyValue.EnableWindow(FALSE); <br> <br>if (m_bAccessKey) <br>m_editKeyValue.ShowWindow(SW_SHOW); <br>else <br>m_editKeyValue.ShowWindow(SW_HIDE); <br>} <br> <br> <br>///////////////////////////////////////////////////////////////////// <br>// The following message handlers simply enable the Apply button when <br>// something changes. <br> <br>void CIndeo::OnChangeDecodeHeight()  <br>{ <br>   m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnChangeDecodeWidth()  <br>{ <br>   m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnChangeDecodeX()  <br>{ <br>   m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnChangeDecodeY()  <br>{ <br>   m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnChangeViewHeight()  <br>{ <br>   m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnChangeViewWidth()  <br>{ <br>   m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnChangeViewX()  <br>{ <br>   m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnChangeViewY()  <br>{ <br>   m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnChangeDecodeTime()  <br>{ <br>   m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnChangeKeyValue()  <br>{ <br>m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnUpdateBSCText()  <br>{ <br>UpdateData(TRUE); <br>m_btnApply.EnableWindow(TRUE); <br>m_tbBrightness.SetPos(m_intBrightness); <br>m_tbContrast.SetPos(m_intContrast); <br>m_tbSaturation.SetPos(m_intSaturation); <br>} <br> <br>void CIndeo::OnTransFill()  <br>{ <br>m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnTransNofill()  <br>{ <br>m_btnApply.EnableWindow(TRUE); <br>} <br> <br> <br>void CIndeo::OnAltline()  <br>{ <br>m_btnApply.EnableWindow(TRUE); <br>} <br> <br> <br>void CIndeo::OnChangeRedEdit()  <br>{ <br>m_btnApply.EnableWindow(TRUE); <br>} <br> <br> <br>void CIndeo::OnChangeGreenEdit()  <br>{ <br>m_btnApply.EnableWindow(TRUE); <br>} <br> <br> <br>void CIndeo::OnChangeBlueEdit()  <br>{ <br>m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnDontDropFrames()  <br>{ <br>m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnDontDropQuality()  <br>{ <br>m_btnApply.EnableWindow(TRUE); <br>} <br> <br>void CIndeo::OnViewOrigin()  <br>{ <br>m_btnApply.EnableWindow(TRUE); <br>OnIndeoApply(); <br>} <br> <br>void CIndeo::OnFrameOrigin()  <br>{ <br>m_btnApply.EnableWindow(TRUE); <br>OnIndeoApply(); <br>} <br> <br>void CIndeo::OnCustomColors()  <br>{ <br> <br>CHOOSECOLOR TransCC;     // common dialog box structure <br> <br>TransCC.lStructSize = sizeof(CHOOSECOLOR);  <br>TransCC.hwndOwner = NULL; <br>TransCC.lpCustColors = (LPDWORD) m_clrefUserCustClrs; <br>TransCC.rgbResult = RGB(m_intRed, m_intGreen, m_intBlue); <br>TransCC.Flags = CC_RGBINIT | CC_FULLOPEN;  <br> <br>if (ChooseColor(&amp;TransCC)) // pointer to structure with initialization data <br>{ <br>SetDlgItemInt( IDC_RED_EDIT, (TransCC.rgbResult&amp;0x000000FF), FALSE ); <br>SetDlgItemInt( IDC_GREEN_EDIT, (TransCC.rgbResult&amp;0x0000FF00)&gt;&gt;8, FALSE ); <br>SetDlgItemInt( IDC_BLUE_EDIT, (TransCC.rgbResult&amp;0x00FF0000)&gt;&gt;16, FALSE ); <br> <br>OnIndeoApply(); <br>} <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

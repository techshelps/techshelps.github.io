<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAINFRM.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2840"></a>MAINFRM.CPP</h2>
<pre><code>// This code and information is provided "as is" without warranty of <br>// any kind, either expressed or implied, including but not limited to <br>// the implied warranties of merchantability and/or fitness for a <br>// particular purpose. <br> <br>// Copyright (C) 1996 - 1997 Intel corporation.  All rights reserved. <br> <br>// mainfrm.cpp : implementation of the CMainFrame class <br>// <br> <br>#include "stdafx.h" <br>#include "IPlay.h" <br>#include "IPlayDoc.h" <br> <br>#include "mainfrm.h" <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame <br> <br>IMPLEMENT_DYNCREATE(CMainFrame, CFrameWnd) <br> <br>BEGIN_MESSAGE_MAP(CMainFrame, CFrameWnd) <br>//{{AFX_MSG_MAP(CMainFrame) <br>ON_WM_CREATE() <br>ON_COMMAND(ID_MEDIA_INDEO, OnMediaIndeo) <br>ON_UPDATE_COMMAND_UI(ID_MEDIA_INDEO, OnUpdateMediaIndeo) <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// arrays of IDs used to initialize control bars <br> <br>// toolbar buttons - IDs are command buttons <br>static UINT BASED_CODE buttons[] = <br>{ <br>// same order as in the bitmap 'toolbar.bmp' <br>ID_FILE_OPEN, <br>ID_SEPARATOR, <br>ID_MEDIA_PLAY, <br>ID_MEDIA_PAUSE, <br>ID_MEDIA_STOP, <br>ID_SEPARATOR, <br>ID_MEDIA_LOOP, <br>ID_MEDIA_ZOOMX2, <br>ID_SEPARATOR, <br>ID_SEPARATOR, <br>ID_SEPARATOR, <br>ID_MEDIA_INDEO <br>}; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame construction/destruction <br> <br>CMainFrame::CMainFrame() <br>{ <br>    EnableDocking(CBRS_FLOAT_MULTI); <br>} <br> <br>CMainFrame::~CMainFrame() <br>{ <br>} <br> <br>int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct) <br>{ <br> <br>if (CFrameWnd::OnCreate(lpCreateStruct) == -1) <br>return -1; <br> <br>if (!m_wndToolBar.Create(this) || <br>!m_wndToolBar.LoadBitmap(IDR_MAINFRAME) || <br>!m_wndToolBar.SetButtons(buttons, <br>  sizeof(buttons)/sizeof(UINT))) <br>{ <br>TRACE0("Failed to create toolbar\n"); <br>return -1;      // fail to create <br>} <br> <br>    m_wndToolBar.SetSizes( CSize( 40, 40 ), CSize( 32, 32 ) ); <br>m_wndToolBar.EnableDocking(CBRS_ALIGN_TOP); <br> <br>// Enable tool tips <br>m_wndToolBar.SetBarStyle(m_wndToolBar.GetBarStyle() | <br>CBRS_TOOLTIPS | CBRS_FLYBY); <br> <br>// Position window in upper, left corner <br>    SetWindowPos( NULL, 0, 0, 424, 96, SWP_NOZORDER ); <br>m_bIndeo = FALSE; <br>return 0; <br>} <br> <br> <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame diagnostics <br> <br>#ifdef _DEBUG <br>void CMainFrame::AssertValid() const <br>{ <br>CFrameWnd::AssertValid(); <br>} <br> <br>void CMainFrame::Dump(CDumpContext&amp; dc) const <br>{ <br>CFrameWnd::Dump(dc); <br>} <br> <br>#endif //_DEBUG <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame message handlers <br> <br> <br> <br>BOOL CMainFrame::PreCreateWindow(CREATESTRUCT&amp; cs)  <br>{ <br>// Set optimum size for view <br>cs.cx = 422; <br>cs.cy = 524; <br> <br>cs.style = WS_OVERLAPPED | WS_CAPTION | <br>           WS_THICKFRAME | WS_SYSMENU | WS_MINIMIZEBOX; <br> <br>return CFrameWnd::PreCreateWindow(cs); <br>} <br> <br> <br>void CMainFrame::OnMediaIndeo()  <br>{ <br>m_bIndeo = !m_bIndeo; <br>if (m_bIndeo)  <br>SetWindowPos(NULL, 0, 0, 422, 524, SWP_NOMOVE | SWP_NOZORDER ); <br>else <br>SetWindowPos(NULL, 0, 0, 422, 96, SWP_NOMOVE | SWP_NOZORDER ); <br> <br>} <br> <br>void CMainFrame::OnUpdateMediaIndeo(CCmdUI* pCmdUI)  <br>{ <br>pCmdUI-&gt;SetCheck( m_bIndeo ); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

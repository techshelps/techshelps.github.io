<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BALL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2721"></a>BALL.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>class CBall <br>{ <br>public: <br> <br>    CBall(int iImageWidth = 320, int iImageHeight = 240, int iBallSize = 10); <br> <br>    // Plots the square ball in the image buffer, at the current location. <br>    // Use BallPixel[] as pixel value for the ball. <br>    // Plots zero in all 'background' image locations. <br>    // iPixelSize - the number of bytes in a pixel (size of BallPixel[]) <br>    void PlotBall(BYTE pFrame[], BYTE BallPixel[], int iPixelSize); <br> <br>    // Moves the ball 1 pixel in each of the x and y directions <br>    void MoveBall(CRefTime rt); <br> <br>private: <br> <br>    enum xdir { LEFT = -1, RIGHT = 1 }; <br>    enum ydir { UP = 1, DOWN = -1 }; <br> <br>    // The dimensions we can plot in, allowing for the width of the ball <br>    int m_iAvailableHeight, m_iAvailableWidth; <br> <br>    int m_iImageHeight;         // The image height <br>    int m_iImageWidth;// The image width <br>    int m_iBallSize;// The diameter of the ball <br>    int m_iRandX, m_iRandY;     // For a bit of randomness <br>    xdir m_xDir;        // Direction the ball <br>    ydir m_yDir;        // Likewise vertically <br> <br>    // The x position, in pixels, of the ball in the frame <br>    // (0 &lt; x &lt; m_iAvailableWidth) <br>    int m_x; <br> <br>    // the y position, in pixels, of the ball in the frame <br>    // (0 &lt; y &lt; m_iAvailableHeight) <br>    int m_y; <br> <br>    // Return the 1-dimensional position of the ball at time t millisecs <br>    int BallPosition(int iPixelTime, int iLength, int time, int iOffset); <br> <br>    /// tests a given pixel to see if it should be plotted <br>    BOOL WithinCircle(int x, int y); <br> <br>}; // CBall <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

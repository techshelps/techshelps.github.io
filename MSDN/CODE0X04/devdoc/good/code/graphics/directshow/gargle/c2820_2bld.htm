<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GARGPROP.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2821"></a>GARGPROP.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>// GargProp.cpp <br>// <br> <br>#include &lt;streams.h&gt; <br> <br>// Eliminate two expected level 4 warnings from the Microsoft compiler. <br>// The class does not have an assignment or copy operator, and so cannot <br>// be passed by value.  This is normal.  This file compiles clean at the <br>// highest (most picky) warning level (-W4). <br>#pragma warning(disable: 4511 4512) <br> <br>#include &lt;commctrl.h&gt; <br>#include &lt;olectl.h&gt; <br>#include &lt;memory.h&gt; <br>#include &lt;math.h&gt; <br> <br>#include "resource.h" <br>#include "igargle.h" <br>#include "gargprop.h" <br> <br> <br>// <br>// CreateInstance <br>// <br>// Override CClassFactory method. <br>// Set lpUnk to point to an IUnknown interface on a new CGargleProperties object <br>// <br>CUnknown * WINAPI CGargleProperties::CreateInstance(LPUNKNOWN lpunk, HRESULT *phr) <br>{ <br> <br>    CUnknown *punk = new CGargleProperties(lpunk, phr); <br>    if (punk == NULL) { <br>        *phr = E_OUTOFMEMORY; <br>    } <br> <br>    return punk; <br>} // CreateInstance <br> <br> <br>// <br>// CGargleProperties constructor <br>// <br>// initialise a CGargleProperties object. <br>// <br>CGargleProperties::CGargleProperties(LPUNKNOWN lpunk, HRESULT *phr) <br>    : CBasePropertyPage( NAME("Gargle Property Page") <br>                       , lpunk, IDD_GARGPROP, IDS_NAME) <br>    , m_pGargle(NULL) <br>{ <br> <br>} // (constructor) <br> <br> <br>// <br>// SetButtonText <br>// <br>// Utility function to set the text of the button to reflect the curent <br>// waveform being used <br>// <br>void SetButtonText(HWND hwnd, int iShape) <br>{ <br>    if (iShape==0) { <br>        SetDlgItemText(hwnd, IDB_SQUARE_TRIANGLE, "Triangle wave-&gt;square"); <br>    } else { <br>        SetDlgItemText(hwnd, IDB_SQUARE_TRIANGLE, "Square wave-&gt;triangle"); <br>    } <br> <br>} // SetButtonText <br> <br> <br>// <br>// ConvertToPosition <br>// <br>// Convert a frequency f which is the gargle rate to a slider position. <br>// f runs from 1 to 1000. <br>// p runs from 0 to 300. <br>// f = 10**(p/100) <br>// p = 100*log10(f) <br>// <br>int ConvertToPosition(int f) <br>{ <br>    // protect against stupidity - should not occur <br>    if (f&lt;1) f = 1; <br>    if (f&gt;1000) f = 1000; <br> <br>    double x = f; <br>    x = 100.0*log10(x); <br> <br>    // protect against rounding at the ends <br>    int p = (int)x; <br>    if (p&lt;0) p = 0; <br>    if (p&gt;300) p = 300; <br> <br>    return p; <br> <br>} // ConvertToPosition <br> <br> <br>// <br>// ConvertToFrequency <br>// <br>// Convert a slider position p to a frequency (gargle rate). <br>// f runs from 1 to 1000. <br>// p runs from 0 to 300. <br>// f = 10**(p/100) <br>// p = 100*log10(f) <br>// <br>int ConvertToFrequency(int p) <br>{ <br>    // protect against stupidity - should not occur <br>    if (p&lt;0) p = 0; <br>    if (p&gt;300) p = 300; <br> <br>    double x = p; <br> <br>    x = pow(10.0, x/100.0); <br> <br>    // protect against rounding at the ends <br>    int f = (int)x; <br>    if (f&lt;1) f = 1; <br>    if (f&gt;1000) f = 1000; <br> <br>    return f; <br> <br>} // ConvertToFrequency <br> <br> <br>// <br>// OnReceiveMessage <br>// <br>// Override CBasePropertyPage method. <br>// Handle windows messages for the dialog of the property sheet. <br>// <br>BOOL CGargleProperties::OnReceiveMessage <br>                            (HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>    UNREFERENCED_PARAMETER(lParam); <br>    switch (uMsg) { <br> <br>        case WM_INITDIALOG: <br> <br>            m_hwndSlider = CreateSlider(hwnd); <br>            SetButtonText(hwnd, m_iGargleShape); <br>            ASSERT(m_hwndSlider); <br>            return TRUE;                // I don't call setfocus... <br> <br>        case WM_VSCROLL: <br> <br>            ASSERT(m_hwndSlider); <br>            OnSliderNotification(wParam); <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            if (LOWORD(wParam) == IDB_SQUARE_TRIANGLE) { <br> <br>                // Cycle through shapes.  See note below. <br>                // <br>                int iShape; <br>                m_pGargle-&gt;get_GargleShape(&amp;iShape);  // find what we now have <br>                iShape = 1-iShape;                            // change shapes <br>                m_pGargle-&gt;put_GargleShape(iShape);             // put it back <br>                SetButtonText(hwnd, iShape);              // reflect in dialog <br> <br>            } else if (LOWORD(wParam) == IDB_DEFAULT) { <br> <br>                // Restore the default settings. <br> <br>                // Set the filter. <br>                // <br>                m_pGargle-&gt;put_DefaultGargleRate(); <br>                m_pGargle-&gt;put_GargleShape(0); <br> <br>                // Set the slider position on the screen to match. <br>                // <br>                int iPos; <br>                m_pGargle-&gt;get_GargleRate(&amp;iPos); <br>                iPos = ConvertToPosition(iPos); <br>                SendMessage(m_hwndSlider, TBM_SETPOS, TRUE, iPos); <br> <br>                // Set the button text to match. <br>                // <br>                int iShape; <br>                m_pGargle-&gt;get_GargleShape(&amp;iShape);  // find out what we now have <br>                SetButtonText(hwnd, iShape); <br> <br>            } else { <br> <br>                // Should not occur - debug! <br>                // <br>                char Buff[100]; <br>                wsprintf(Buff, "wParam=%08x", wParam); <br> <br>                #ifdef DEBUG <br>                    DbgBreakPoint( Buff, TEXT(__FILE__), __LINE__ ); <br>                #else <br>                    ASSERT(!"Should not occur - debug!"); <br>                #endif <br> <br>            } <br> <br>            return TRUE; <br> <br>        case WM_DESTROY: <br> <br>            DestroyWindow(m_hwndSlider); <br>            return TRUE; <br> <br>        default: <br> <br>            return FALSE; <br> <br>    } // switch <br> <br>} // OnReceiveMessage <br> <br> <br>// <br>// OnConnect <br>// <br>// Override CBasePropertyPage method. <br>// Get the interface to the filter. <br>// Set the member variables m_iGargleRate and m_iGargleShape. <br>// <br>HRESULT CGargleProperties::OnConnect(IUnknown * punk) <br>{ <br>    // Get IGargle interface <br>    // <br>    if (punk == NULL) { <br>        DbgBreak("You can't call me with a NULL pointer!!"); <br>        return(E_POINTER); <br>    } <br> <br>    ASSERT(m_pGargle == NULL); <br> <br>    HRESULT hr = punk-&gt;QueryInterface(IID_IGargle, (void **) &amp;m_pGargle); <br>    if (FAILED(hr)) { <br>        DbgBreak("Can't get IGargle interface."); <br>        return E_NOINTERFACE; <br>    } <br> <br>    ASSERT(m_pGargle); <br> <br>    m_pGargle-&gt;get_GargleRate(&amp;m_iGargleRate); <br>    m_pGargle-&gt;get_GargleShape(&amp;m_iGargleShape); <br>    return NOERROR; <br> <br>} // OnConnect <br> <br> <br>// <br>// OnDisconnect <br>// <br>// Override CBasePropertyPage method. <br>// Release the private interface. <br>// <br>HRESULT CGargleProperties::OnDisconnect() <br>{ <br>    // <br>    // Release the interface <br>    // <br>    if (m_pGargle == NULL) { <br>        return( E_UNEXPECTED); <br>    } <br> <br>    m_pGargle-&gt;Release(); <br>    m_pGargle = NULL; <br> <br>    return(NOERROR); <br> <br>} // OnDisconnect <br> <br> <br> <br>// <br>// OnDeactivate <br>// <br>// Destroy the dialog. <br>// <br>HRESULT CGargleProperties::OnDeactivate(void) <br>{ <br> <br>    // <br>    // Remember the Gargle Rate and shape for the next Activate() call <br>    // <br>    m_pGargle-&gt;get_GargleRate(&amp;m_iGargleRate); <br>    m_pGargle-&gt;get_GargleShape(&amp;m_iGargleShape); <br> <br>    return NOERROR; <br> <br>} // OnDeactivate <br> <br> <br> <br>// <br>// CreateSlider <br>// <br>// Create the slider (common control) to allow the user to <br>// adjust the gargling rate. <br>// <br>HWND CGargleProperties::CreateSlider(HWND hwndParent) <br>{ <br> <br>    // Find how to convert dialog units to screen units <br>    // <br>    LONG XUnit = GetDialogBaseUnits(); <br>    LONG YUnit = XUnit&gt;&gt;16; <br>    XUnit = XUnit &amp; 0x0000ffff; <br> <br>    // Create the slider child window at a position which fits the dialog <br>    // <br>    HWND hwndSlider = CreateWindow( TRACKBAR_CLASS <br>                                  , TEXT("") <br>                                  , WS_CHILD | WS_VISIBLE | TBS_VERT | TBS_BOTH <br>                                  , 15*XUnit          // x <br>                                  , 0                 // y <br>                                  , 5*XUnit           // width <br>                                  , 5*YUnit           // Height <br>                                  , hwndParent <br>                                  , NULL              // menu <br>                                  , g_hInst <br>                                  , NULL              // CLIENTCREATESTRUCT <br>                                  ); <br>    if (hwndSlider == NULL) { <br>        DWORD dwErr = GetLastError(); <br>        DbgLog((LOG_ERROR, 1 <br>               , TEXT("Could not create window.  error code: 0x%x"), dwErr)); <br>        return NULL; <br>    } <br> <br>    // Set the range to 0..300 which is converted into Hz as 10**(p/100) <br>    // where p is the slider position.  SeeConvertToFrequency() above. <br>    // <br>    SendMessage(hwndSlider, TBM_SETRANGE, TRUE, MAKELONG(0, 300) ); <br> <br>    // Set a tick at the default of 10Hz which is 100 on the log scale. <br>    // Put another one at 100Hz which corresponds to 200 on the log scale. <br>    // <br>    SendMessage(hwndSlider, TBM_SETTIC, 0, 100L); <br>    SendMessage(hwndSlider, TBM_SETTIC, 0, 200L); <br> <br>    // Set the slider position according to the value we obtain from <br>    // initialisation or from the last Deactivate() call. <br>    // <br>    int iPos = ConvertToPosition(m_iGargleRate); <br>    SendMessage(hwndSlider, TBM_SETPOS, TRUE, iPos); <br> <br>    return hwndSlider; <br> <br>}  // CreateSlider <br> <br> <br>// <br>// OnSliderNotification <br>// <br>// Handle the notification meesages from the slider control <br>// <br>void CGargleProperties::OnSliderNotification(WPARAM wParam) <br>{ <br>    int iPos; <br>    switch (wParam) { <br>        case TB_BOTTOM: <br> <br>            iPos = ConvertToPosition(MinGargleRate); <br>            SendMessage(m_hwndSlider, TBM_SETPOS, TRUE, (LPARAM) iPos); <br>            break; <br> <br>        case TB_TOP: <br> <br>            iPos = ConvertToPosition(MaxGargleRate); <br>            SendMessage(m_hwndSlider, TBM_SETPOS, TRUE, (LPARAM) iPos); <br>            break; <br> <br>        case TB_PAGEDOWN: <br>        case TB_PAGEUP: <br> <br>            break; <br> <br>        case TB_THUMBPOSITION: <br>        case TB_ENDTRACK: <br> <br>            { <br>                int iRate = (int) SendMessage(m_hwndSlider, TBM_GETPOS, 0, 0L); <br>                iRate = ConvertToFrequency(iRate); <br>                m_pGargle-&gt;put_GargleRate(iRate); <br>            } <br>            break; <br> <br>        case TB_THUMBTRACK: // default handling of these messages is ok. <br>        case TB_LINEDOWN: <br>        case TB_LINEUP: <br> <br>            break; <br>    } <br> <br>} // OnSliderNotification <br> <br>#pragma warning(disable: 4514) // "unreferenced inline function has been removed" <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

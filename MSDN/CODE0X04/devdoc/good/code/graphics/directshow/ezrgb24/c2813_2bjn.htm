<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EZPROP.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2813"></a>EZPROP.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;streams.h&gt; <br>#include &lt;commctrl.h&gt; <br>#include &lt;olectl.h&gt; <br>#include &lt;memory.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;tchar.h&gt; <br>#include "resource.h" <br>#include "EZuids.h" <br>#include "iEZ.h" <br>#include "EZrgb24.h" <br>#include "EZprop.h" <br> <br> <br>// <br>// CreateInstance <br>// <br>// Used by the ActiveMovie base classes to create instances <br>// <br>CUnknown *CEZrgb24Properties::CreateInstance(LPUNKNOWN lpunk, HRESULT *phr) <br>{ <br>    CUnknown *punk = new CEZrgb24Properties(lpunk, phr); <br>    if (punk == NULL) { <br>*phr = E_OUTOFMEMORY; <br>    } <br>    return punk; <br> <br>} // CreateInstance <br> <br> <br>// <br>// Constructor <br>// <br>CEZrgb24Properties::CEZrgb24Properties(LPUNKNOWN pUnk, HRESULT *phr) : <br>    CBasePropertyPage(NAME("Special Effects Property Page"), <br>                      pUnk,IDD_EZrgb24PROP,IDS_TITLE), <br>    m_pIPEffect(NULL), <br>    m_bIsInitialized(FALSE) <br>{ <br>    ASSERT(phr); <br> <br>} // (Constructor) <br> <br> <br>// <br>// OnReceiveMessage <br>// <br>// Handles the messages for our property window <br>// <br>BOOL CEZrgb24Properties::OnReceiveMessage(HWND hwnd, <br>                                          UINT uMsg, <br>                                          WPARAM wParam, <br>                                          LPARAM lParam) <br>{ <br>    switch (uMsg) <br>    { <br>        case WM_COMMAND: <br>        { <br>            if (m_bIsInitialized) <br>            { <br>                m_bDirty = TRUE; <br>                if (m_pPageSite) <br>                { <br>                    m_pPageSite-&gt;OnStatusChange(PROPPAGESTATUS_DIRTY); <br>                } <br>            } <br>            return (LRESULT) 1; <br>        } <br> <br>    } <br>    return CBasePropertyPage::OnReceiveMessage(hwnd,uMsg,wParam,lParam); <br> <br>} // OnReceiveMessage <br> <br> <br>// <br>// OnConnect <br>// <br>// Called when we connect to a transform filter <br>// <br>HRESULT CEZrgb24Properties::OnConnect(IUnknown *pUnknown) <br>{ <br>    ASSERT(m_pIPEffect == NULL); <br> <br>    HRESULT hr = pUnknown-&gt;QueryInterface(IID_IIPEffect, (void **) &amp;m_pIPEffect); <br>    if (FAILED(hr)) { <br>        return E_NOINTERFACE; <br>    } <br> <br>    ASSERT(m_pIPEffect); <br> <br>    // Get the initial image FX property <br>    m_pIPEffect-&gt;get_IPEffect(&amp;m_effect, &amp;m_start, &amp;m_length); <br>    m_bIsInitialized = FALSE ; <br>    return NOERROR; <br> <br>} // OnConnect <br> <br> <br>// <br>// OnDisconnect <br>// <br>// Likewise called when we disconnect from a filter <br>// <br>HRESULT CEZrgb24Properties::OnDisconnect() <br>{ <br>    // Release of Interface after setting the appropriate old effect value <br> <br>    if (m_pIPEffect == NULL) { <br>        return E_UNEXPECTED; <br>    } <br> <br>    m_pIPEffect-&gt;Release(); <br>    m_pIPEffect = NULL; <br>    return NOERROR; <br> <br>} // OnDisconnect <br> <br> <br>// <br>// OnActivate <br>// <br>// We are being activated <br>// <br>HRESULT CEZrgb24Properties::OnActivate() <br>{ <br>    TCHAR   sz[60]; <br> <br>    _stprintf(sz, TEXT("%f"), m_length); <br>    Edit_SetText(GetDlgItem(m_Dlg, IDC_LENGTH), sz); <br>    _stprintf(sz, TEXT("%f"), m_start); <br>    Edit_SetText(GetDlgItem(m_Dlg, IDC_START), sz); <br> <br>    CheckRadioButton(m_Dlg, IDC_EMBOSS, IDC_NONE, m_effect); <br>    m_bIsInitialized = TRUE; <br>    return NOERROR; <br> <br>} // OnActivate <br> <br> <br>// <br>// OnDeactivate <br>// <br>// We are being deactivated <br>// <br>HRESULT CEZrgb24Properties::OnDeactivate(void) <br>{ <br>    ASSERT(m_pIPEffect); <br>    m_bIsInitialized = FALSE; <br>    GetControlValues(); <br>    return NOERROR; <br> <br>} // OnDeactivate <br> <br> <br>// <br>// OnApplyChanges <br>// <br>// Apply any changes so far made <br>// <br>HRESULT CEZrgb24Properties::OnApplyChanges() <br>{ <br>    GetControlValues(); <br>    m_pIPEffect-&gt;put_IPEffect(m_effect, m_start, m_length); <br> <br>    return NOERROR; <br>} // OnApplyChanges <br> <br> <br>void CEZrgb24Properties::GetControlValues() <br>{ <br>    ASSERT(m_pIPEffect); <br>    TCHAR sz[STR_MAX_LENGTH]; <br>    REFTIME tmp1, tmp2 ; <br> <br>    // Get the start and effect times <br> <br>    Edit_GetText(GetDlgItem(m_Dlg, IDC_LENGTH), sz, STR_MAX_LENGTH); <br>    tmp2 = COARefTime(atof(sz)); <br> <br>    Edit_GetText(GetDlgItem(m_Dlg, IDC_START), sz, STR_MAX_LENGTH); <br>    tmp1 = COARefTime(atof(sz)); <br> <br>    // Quick validatation of the fields <br> <br>    if (tmp1 &gt;= 0 &amp;&amp; tmp2 &gt;= 0) { <br>        m_start = tmp1; <br>        m_length = tmp2; <br>    } <br> <br>    // Find which special effect we have selected <br> <br>    for (int i = IDC_EMBOSS; i &lt;= IDC_NONE; i++) { <br>        if (IsDlgButtonChecked(m_Dlg, i)) { <br>            m_effect = i; <br>            break; <br>        } <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

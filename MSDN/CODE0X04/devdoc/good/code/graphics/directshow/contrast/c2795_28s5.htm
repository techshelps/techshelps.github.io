<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONTPROP.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2795"></a>CONTPROP.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>// This class implements the property page for the contrast filter <br> <br>#include &lt;streams.h&gt; <br>#include &lt;commctrl.h&gt; <br>#include &lt;olectl.h&gt; <br>#include &lt;memory.h&gt; <br>#include "resource.h" <br>#include "contuids.h" <br>#include "icontrst.h" <br>#include "contrast.h" <br>#include "contprop.h" <br> <br> <br>// <br>// CreateInstance <br>// <br>// This goes in the factory template table to create new filter instances <br>// <br>CUnknown * WINAPI CContrastProperties::CreateInstance(LPUNKNOWN lpunk, HRESULT *phr) <br>{ <br>    CUnknown *punk = new CContrastProperties(lpunk, phr); <br>    if (punk == NULL) { <br>*phr = E_OUTOFMEMORY; <br>    } <br>    return punk; <br> <br>} // CreateInstance <br> <br> <br>// <br>// Constructor <br>// <br>CContrastProperties::CContrastProperties(LPUNKNOWN pUnk, HRESULT *phr) : <br>    CBasePropertyPage(NAME("Contrast Property Page"),pUnk, <br>                      IDD_CONTRASTPROP, <br>                      IDS_TITLE), <br>    m_pContrast(NULL) <br>{ <br>    InitCommonControls(); <br> <br>} // (Constructor) <br> <br> <br>// <br>// SetDirty <br>// <br>// Sets m_bDirty and notifies the property page site of the change <br>// <br>void CContrastProperties::SetDirty() <br>{ <br>    m_bDirty = TRUE; <br>    if (m_pPageSite) { <br>        m_pPageSite-&gt;OnStatusChange(PROPPAGESTATUS_DIRTY); <br>    } <br> <br>} // SetDirty <br> <br> <br>// <br>// OnReceiveMessage <br>// <br>// Virtual method called by base class with Window messages <br>// <br>BOOL CContrastProperties::OnReceiveMessage(HWND hwnd, <br>                                           UINT uMsg, <br>                                           WPARAM wParam, <br>                                           LPARAM lParam) <br>{ <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>        { <br>    m_hwndSlider = CreateSlider(hwnd); <br>    ASSERT(m_hwndSlider); <br>            return (LRESULT) 1; <br>        } <br>        case WM_VSCROLL: <br>        { <br>    ASSERT(m_hwndSlider); <br>    OnSliderNotification(wParam); <br>            return (LRESULT) 1; <br>        } <br> <br>        case WM_COMMAND: <br>        { <br>    if (LOWORD(wParam) == IDB_DEFAULT) <br>            { <br>        pIContrast()-&gt;put_DefaultContrastLevel(); <br>        SendMessage(m_hwndSlider, TBM_SETPOS, TRUE, 0L); <br>                SetDirty(); <br>    } <br>            return (LRESULT) 1; <br>        } <br> <br>        case WM_DESTROY: <br>        { <br>    DestroyWindow(m_hwndSlider); <br>            return (LRESULT) 1; <br>        } <br> <br>    } <br>    return CBasePropertyPage::OnReceiveMessage(hwnd,uMsg,wParam,lParam); <br> <br>} // OnReceiveMessage <br> <br> <br>// <br>// OnConnect <br>// <br>// Called when the property page connects to a filter <br>// <br>HRESULT CContrastProperties::OnConnect(IUnknown *pUnknown) <br>{ <br>    ASSERT(m_pContrast == NULL); <br> <br>    HRESULT hr = pUnknown-&gt;QueryInterface(IID_IContrast, (void **) &amp;m_pContrast); <br>    if (FAILED(hr)) { <br>        return E_NOINTERFACE; <br>    } <br> <br>    ASSERT(m_pContrast); <br> <br>    // Get the initial contrast value <br>    m_pContrast-&gt;get_ContrastLevel(&amp;m_cContrastLevel); <br>    m_cContrastOnExit = m_cContrastLevel; <br>    return NOERROR; <br> <br>} // OnConnect <br> <br> <br>// <br>// OnDisconnect <br>// <br>// Called when we're disconnected from a filter <br>// <br>HRESULT CContrastProperties::OnDisconnect() <br>{ <br>    // Release of Interface after setting the appropriate contrast value <br> <br>    if (m_pContrast == NULL) { <br>        return E_UNEXPECTED; <br>    } <br> <br>    m_pContrast-&gt;put_ContrastLevel(m_cContrastOnExit, 0); <br>    m_pContrast-&gt;Release(); <br>    m_pContrast = NULL; <br>    return NOERROR; <br> <br>} // OnDisconnect <br> <br> <br>// <br>// OnDeactivate <br>// <br>// We are being deactivated <br>// <br>HRESULT CContrastProperties::OnDeactivate(void) <br>{ <br>    // Remember the present contrast level for the next activate <br> <br>    pIContrast()-&gt;get_ContrastLevel(&amp;m_cContrastLevel); <br>    return NOERROR; <br> <br>} // OnDeactivate <br> <br> <br>// <br>// OnApplyChanges <br>// <br>// Changes made should be kept. Change the m_cContrastOnExit variable <br>// <br>HRESULT CContrastProperties::OnApplyChanges() <br>{ <br>    pIContrast()-&gt;get_ContrastLevel(&amp;m_cContrastOnExit); <br>    m_bDirty = FALSE; <br>    return(NOERROR); <br> <br>} // OnApplyChanges <br> <br> <br>// <br>// CreateSlider <br>// <br>// Create the slider (common control) to allow the user to adjust contrast <br>// <br>HWND CContrastProperties::CreateSlider(HWND hwndParent) <br>{ <br>    ULONG Styles = WS_CHILD | WS_VISIBLE | WS_TABSTOP | TBS_VERT | TBS_BOTH | WS_GROUP; <br>    HWND hwndSlider = CreateWindow( TRACKBAR_CLASS, <br>    TEXT(""), <br>    Styles, <br>    62, 35, <br>    39, 100, <br>    hwndParent, <br>    NULL, <br>    g_hInst, <br>    NULL); <br>    if (hwndSlider == NULL) { <br>DWORD dwErr = GetLastError(); <br>return NULL; <br>    } <br> <br>    // Set the initial range for the slider <br>    SendMessage(hwndSlider, TBM_SETRANGE, TRUE, MAKELONG(MinContrastLevel, MaxContrastLevel) ); <br> <br>    // Set a tick at zero <br>    SendMessage(hwndSlider, TBM_SETTIC, 0, 0L); <br> <br>    // Set the initial slider position <br>    SendMessage(hwndSlider, TBM_SETPOS, TRUE, m_cContrastLevel); <br> <br>    return hwndSlider; <br> <br>} // CreateSlider <br> <br> <br>// <br>// OnSliderNotification <br>// <br>// Handle the notification messages from the slider control <br>// <br>void CContrastProperties::OnSliderNotification(WPARAM wParam) <br>{ <br>    switch (wParam) { <br>        case TB_BOTTOM: <br>            SetDirty(); <br>    SendMessage(m_hwndSlider, TBM_SETPOS, TRUE, (LPARAM) MinContrastLevel); <br>    break; <br> <br>        case TB_TOP: <br>            SetDirty(); <br>        SendMessage(m_hwndSlider, TBM_SETPOS, TRUE, (LPARAM) MaxContrastLevel); <br>            break; <br> <br>        case TB_PAGEDOWN: <br>        case TB_PAGEUP: <br>            break; <br> <br>        case TB_THUMBPOSITION: <br>        case TB_ENDTRACK: <br>        { <br>                SetDirty(); <br>                signed char Level = (signed char) SendMessage(m_hwndSlider, TBM_GETPOS, 0, 0L); <br>        pIContrast()-&gt;put_ContrastLevel(Level, 0); <br>        } <br>break; <br> <br>        // Default handling of these messages is ok <br>        case TB_THUMBTRACK: <br>        case TB_LINEDOWN: <br>        case TB_LINEUP: <br>    break; <br>    } <br> <br>} // OnSliderNotification </code></pre>
<p>&nbsp;</p></body>
</HTML>

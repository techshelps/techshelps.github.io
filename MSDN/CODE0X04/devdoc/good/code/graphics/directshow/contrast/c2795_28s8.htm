<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONTRAST.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2798"></a>CONTRAST.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>const signed char MaxContrastLevel = 127; <br>const signed char MinContrastLevel = -127; <br> <br>class CContrast : public CTransformFilter, <br>  public IContrast, <br>  public ISpecifyPropertyPages <br>{ <br> <br>public: <br> <br>    static CUnknown * WINAPI CreateInstance(LPUNKNOWN punk, HRESULT *phr); <br> <br>    // Reveals IContrast &amp; ISpecifyPropertyPages <br>    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv); <br> <br>    DECLARE_IUNKNOWN; <br> <br>    HRESULT Transform(IMediaSample *pIn, IMediaSample *pOut); <br>    HRESULT CheckInputType(const CMediaType *mtIn); <br>    HRESULT CheckTransform(const CMediaType *mtIn,const CMediaType *mtOut); <br>    HRESULT GetMediaType(int iPosition, CMediaType *pMediaType); <br>    HRESULT DecideBufferSize(IMemAllocator *pAlloc, <br>                             ALLOCATOR_PROPERTIES *pProperties); <br> <br>    // IContrast methods <br> <br>    STDMETHODIMP get_ContrastLevel(signed char *ContrastLevel); <br>    STDMETHODIMP put_ContrastLevel(signed char ContrastLevel, unsigned long ChangeTime); <br>    STDMETHODIMP put_DefaultContrastLevel(void); <br> <br>    // ISpecifyPropertyPages method <br> <br>    STDMETHODIMP GetPages(CAUUID *pPages); <br> <br>private: <br> <br>    // Constructor <br>    CContrast(TCHAR *tszName, LPUNKNOWN punk, HRESULT *phr); <br> <br>    // Look after the transformation of media samples <br>    BOOL CanChangeContrastLevel(const CMediaType *pMediaType) const; <br>    HRESULT Copy(IMediaSample *pSource, IMediaSample *pDest) const; <br>    HRESULT Transform(IMediaSample *pMediaSample); <br>    HRESULT Transform(AM_MEDIA_TYPE *pType, const signed char ContrastLevel) const; <br> <br>    // Handle increasing and decreasing contrast <br>    void IncreaseContrast(RGBQUAD *pElem, const int Low, const int High, const float Grad) const; <br>    void IncreaseContrast(BYTE *pByte, const int Low, const int High, const float Grad) const; <br>    void DecreaseContrast(RGBQUAD *pElem, const int Level, const float Grad) const; <br>    void DecreaseContrast(BYTE *pByte, const int Level, const float Grad) const; <br> <br>    // The default (no-change) level <br>    const signed char m_DefaultContrastLevel; <br> <br>    // The current level to set the palette to <br>    signed charm_ContrastLevel; <br> <br>    // The level the last frame's palette was set at <br>    signed charm_PrevLevel; <br> <br>    // The number of buffers to request on the output allocator <br>    const long m_lBufferRequest; <br> <br>    // Non interface locking critical section <br>    CCritSec m_ContrastLock; <br> <br>}; // CContrast <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

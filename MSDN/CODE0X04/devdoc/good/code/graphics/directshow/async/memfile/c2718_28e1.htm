<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MEMFILE.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2719"></a>MEMFILE.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1996 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>// <br>//  Define an internal filter that wraps the base CBaseReader stuff <br>// <br> <br>class CMemStream : public CAsyncStream <br>{ <br>public: <br>    CMemStream(LPBYTE pbData, LONGLONG llLength, DWORD dwKBPerSec = INFINITE) : <br>        m_pbData(pbData), <br>        m_llLength(llLength), <br>        m_llPosition(0), <br>        m_dwKBPerSec(dwKBPerSec) <br>    { <br>        m_dwTimeStart = timeGetTime(); <br>    } <br>    HRESULT SetPointer(LONGLONG llPos) <br>    { <br>        if (llPos &lt; 0 || llPos &gt; m_llLength) { <br>            return S_FALSE; <br>        } else { <br>            m_llPosition = llPos; <br>            return S_OK; <br>        } <br>    } <br>    HRESULT Read(PBYTE pbBuffer, <br>                 DWORD dwBytesToRead, <br>                 BOOL bAlign, <br>                 LPDWORD pdwBytesRead) <br>    { <br>        CAutoLock lck(&amp;m_csLock); <br>        DWORD dwReadLength; <br>        /*  Wait until the bytes are here! */ <br>        DWORD dwTime = timeGetTime(); <br>        if (m_llPosition + dwBytesToRead &gt; m_llLength) { <br>            dwReadLength = (DWORD)(m_llLength - m_llPosition); <br>        } else { <br>            dwReadLength = dwBytesToRead; <br>        } <br>        DWORD dwTimeToArrive = <br>            ((DWORD)m_llPosition + dwReadLength) / m_dwKBPerSec; <br>        if (dwTime - m_dwTimeStart &lt; dwTimeToArrive) { <br>            Sleep(dwTimeToArrive - dwTime + m_dwTimeStart); <br>        } <br>        CopyMemory((PVOID)pbBuffer, (PVOID)(m_pbData + m_llPosition), <br>                   dwReadLength); <br>        m_llPosition += dwReadLength; <br>        *pdwBytesRead = dwReadLength; <br>        return S_OK; <br>    } <br>    LONGLONG Size(LONGLONG *pSizeAvailable) <br>    { <br>        LONGLONG llCurrentAvailable = <br>            Int32x32To64((timeGetTime() - m_dwTimeStart),m_dwKBPerSec); <br>        *pSizeAvailable = min(m_llLength, llCurrentAvailable); <br>        return m_llLength; <br>    } <br>    DWORD Alignment() <br>    { <br>        return 1; <br>    } <br>    void Lock() <br>    { <br>        m_csLock.Lock(); <br>    } <br>    void Unlock() <br>    { <br>        m_csLock.Unlock(); <br>    } <br> <br>private: <br>    CCritSec       m_csLock; <br>    const PBYTE    m_pbData; <br>    const LONGLONG m_llLength; <br>    LONGLONG       m_llPosition; <br>    DWORD          m_dwKBPerSec; <br>    DWORD          m_dwTimeStart; <br>}; <br> <br>class CMemReader : public CAsyncReader <br>{ <br>public: <br> <br>    //  We're not going to be CoCreate'd so we don't need registration <br>    //  stuff etc <br>    STDMETHODIMP Register() <br>    { <br>        return S_OK; <br>    } <br>    STDMETHODIMP Unregister() <br>    { <br>        return S_OK; <br>    } <br>    CMemReader(CMemStream *pStream, CMediaType *pmt, HRESULT *phr) : <br>        CAsyncReader(NAME("Mem Reader"), NULL, pStream, phr) <br>    { <br>        m_mt = *pmt; <br>    } <br>}; <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

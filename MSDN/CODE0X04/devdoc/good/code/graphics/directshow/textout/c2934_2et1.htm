<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TEXTOUT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2935"></a>TEXTOUT.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>// You MUST change this when adapting this sample! <br>// Run uuidgen.exe from any SDK to get a new GUID <br> <br>DEFINE_GUID(CLSID_PlainText, <br>0x48025242, 0x2d39, 0x11ce, 0x87, 0x5d, 0x0, 0x60, 0x8c, 0xb7, 0x80, 0x66); <br> <br>class CTextOutFilter; <br>class CTextOutWindow; <br> <br>// These are our video window styles <br> <br>const LPTSTR TextClassName = TEXT("TextRendererBaseClass"); <br>const DWORD TextClassStyles = (CS_HREDRAW | CS_VREDRAW | CS_BYTEALIGNCLIENT); <br>const DWORD TextWindowStyles = (WS_OVERLAPPEDWINDOW | WS_CLIPCHILDREN); <br> <br>// Derived class handling window interactions. We did have the main renderer <br>// object inheriting from CBaseControlWindow so that we didn't have to have <br>// a separate class but that means there are two many classes derived from <br>// CUnknown, so when in the final text out filter class you call something <br>// like GetOwner it gets really confusing to know who is actually going to <br>// be called. So in the end we made it a separate class for the window. We <br>// have to specialise the base class to provide the PURE virtual method that <br>// returns the class and window information (GetClassWindowStyles). We are <br>// also interested in certain window messages like WM_PAINT and WM_NCHITTEST <br> <br>class CTextOutWindow : public CBaseControlWindow <br>{ <br>    CTextOutFilter *m_pRenderer; <br> <br>public: <br> <br>    CTextOutWindow(TCHAR *pName,                 // Object description <br>                   LPUNKNOWN pUnk,               // Normal COM ownership <br>                   HRESULT *phr,                 // OLE failure code <br>                   CCritSec *pLock,              // Our interface Lock <br>                   CTextOutFilter *pRenderer);   // Delegates locking to <br> <br>    ~CTextOutWindow(); <br>    BOOL OnClose(); <br> <br>    LRESULT OnReceiveMessage(HWND hwnd,             // Window handle <br>                             UINT uMsg,             // Message ID <br>                             WPARAM wParam,         // First parameter <br>                             LPARAM lParam);        // Other parameter <br> <br>    LPTSTR GetClassWindowStyles(DWORD *pClassStyles, <br>                                DWORD *pWindowStyles, <br>                                DWORD *pWindowStylesEx); <br> <br>}; // CTextOutWindow <br> <br>// Overall filter object for the text renderer. We have to provide our own <br>// version of NonDelegatingQueryInterface so that we can expose not only the <br>// interfaces supported by the base renderer but also pass on queries for <br>// IVideoWindow to our window handling class (m_TextWindow). The rest of the <br>// methods we override are pretty dull, dealing with type checking and so on <br> <br>class CTextOutFilter : public CBaseRenderer <br>{ <br>    CTextOutWindow m_TextWindow; <br> <br>public: <br> <br>    static CUnknown * WINAPI CreateInstance(LPUNKNOWN pUnk, HRESULT *phr); <br> <br>    CTextOutFilter(LPUNKNOWN pUnk,HRESULT *phr); <br>    ~CTextOutFilter(); <br>    STDMETHODIMP NonDelegatingQueryInterface(REFIID, void **); <br> <br>    STDMETHODIMP Pause(); <br>    HRESULT BreakConnect(); <br>    HRESULT CheckMediaType(const CMediaType *pmt); <br>    BOOL OnPaint(COLORREF WindowColour); <br>    HRESULT DoRenderSample(IMediaSample *pMediaSample); <br>    void OnReceiveFirstSample(IMediaSample *pMediaSample); <br>    void DrawText(IMediaSample *pMediaSample); <br> <br>}; // CTextOutFilter <br> <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

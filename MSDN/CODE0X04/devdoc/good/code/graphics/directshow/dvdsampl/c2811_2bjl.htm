<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DVDSAMPL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2811"></a>DVDSAMPL.CPP</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright (c) 1993 - 1997  Microsoft Corporation.  All Rights Reserved. <br> * <br> **************************************************************************/ <br> <br>// <br>// DVDSampl.cpp: DvdGraphBuilder test/sample app <br>// <br> <br>#include &lt;streams.h&gt; <br>#include &lt;windows.h&gt; <br>#include &lt;IL21Dec.h&gt; <br>#include &lt;dvdevcod.h&gt; <br> <br>#include "DVDSampl.h" <br> <br>#define APPNAME  TEXT("DVDSampl") <br> <br> <br>// ------------------------------------------------------------------------- <br>//                .... Windows App Requirement starts .... <br>// ------------------------------------------------------------------------- <br> <br>// <br>// Forward declaration of functions <br>// <br>LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) ; <br>LRESULT CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) ; <br>LRESULT CALLBACK SelectLang(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) ; <br>LRESULT CALLBACK SelectViewLevel(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) ; <br>LRESULT CALLBACK MenuProc(HWND hWnd, WPARAM wParam, LPARAM lParam) ; <br>LRESULT CALLBACK KeyProc(HWND hWnd, WPARAM wParam, LPARAM lParam) ; <br> <br>CSampleDVDPlay  Player ;  // global player object <br> <br>int APIENTRY WinMain(HINSTANCE hInstance, <br>     HINSTANCE hPrevInstance, <br>     LPSTR     lpCmdLine, <br>     int       nCmdShow) <br>{ <br>    MSG             msg ; <br>    HACCEL          hAccelTable ; <br> <br>    DbgInitialise(hInstance); <br>    Player.SetAppValues(hInstance, APPNAME, IDS_APP_TITLE) ; <br> <br>    if (! Player.InitApplication() )  <br>    { <br>DbgTerminate(); <br>return (FALSE) ; <br>    }  <br> <br>    // Perform application initialization: <br>    if (! Player.InitInstance(nCmdShow) )  <br>    { <br>DbgTerminate(); <br>return (FALSE) ; <br>    } <br> <br>    hAccelTable = LoadAccelerators(hInstance, Player.GetAppName()) ; <br> <br>    // Main message loop: <br>    while (GetMessage(&amp;msg, NULL, 0, 0)) <br>    { <br>if (! TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg) ) <br>{ <br>    TranslateMessage(&amp;msg) ; <br>    DispatchMessage(&amp;msg) ; <br>} <br>    } <br> <br>    DbgTerminate(); <br>    return (msg.wParam) ; <br>} <br> <br> <br>// A helper function to convert render flags to corresponding menu ids <br>int FlagToMenuID(DWORD dwFlag) <br>{ <br>    dwFlag = (dwFlag &amp; (~AM_DVD_NOVPE)) ;  // strip off VPE flag <br>    switch (dwFlag) <br>    { <br>case AM_DVD_HWDEC_PREFER: <br>    return (IDM_FLAGBASE + 1) ; <br> <br>case AM_DVD_HWDEC_ONLY: <br>    return (IDM_FLAGBASE + 2) ; <br> <br>case AM_DVD_SWDEC_PREFER: <br>    return (IDM_FLAGBASE + 3) ; <br> <br>case AM_DVD_SWDEC_ONLY: <br>    return (IDM_FLAGBASE + 4) ; <br> <br>default:  // huh!!! <br>    return 0 ; <br>    } <br>} <br> <br> <br>LRESULT CALLBACK MenuProc(HWND hWnd, WPARAM wParam, LPARAM lParam) <br>{ <br>    HMENU hMenu = GetMenu(hWnd) ; <br>    int   wmId    = LOWORD(wParam); <br>    int   wmEvent = HIWORD(wParam); <br> <br>    //Parse the menu selections: <br>    switch (wmId) { <br> <br>    case IDM_SELECT: <br>        Player.FileSelect() ;  // if volume has been changed, playback stopped. <br>        break; <br> <br>    case IDM_ABOUT: <br>        DialogBox(Player.GetInstance(), TEXT("AboutBox"), Player.GetWindow(), <br>                  (DLGPROC) About); <br>        break; <br> <br>    case IDM_EXIT: <br>        DestroyWindow(Player.GetWindow()); <br>        break; <br> <br>    case IDM_HWMAX: <br>        if (0 == (Player.GetRenderFlag() &amp; AM_DVD_HWDEC_PREFER)) <br>        { <br>            CheckMenuItem(hMenu, FlagToMenuID(Player.GetRenderFlag()), <br>                          MF_UNCHECKED) ; <br>            Player.SetRenderFlag(AM_DVD_HWDEC_PREFER) ; <br>            CheckMenuItem(hMenu, IDM_HWMAX, MF_CHECKED) ; <br>        } <br>        break; <br> <br>    case IDM_HWONLY: <br>        if (0 == (Player.GetRenderFlag() &amp; AM_DVD_HWDEC_ONLY)) <br>        { <br>            CheckMenuItem(hMenu, FlagToMenuID(Player.GetRenderFlag()), <br>                          MF_UNCHECKED) ; <br>            Player.SetRenderFlag(AM_DVD_HWDEC_ONLY) ; <br>            CheckMenuItem(hMenu, IDM_HWONLY, MF_CHECKED) ; <br>        } <br>        break; <br> <br>    case IDM_SWMAX: <br>        if (0 == (Player.GetRenderFlag() &amp; AM_DVD_SWDEC_PREFER)) <br>        { <br>            CheckMenuItem(hMenu, FlagToMenuID(Player.GetRenderFlag()), <br>                          MF_UNCHECKED) ; <br>            Player.SetRenderFlag(AM_DVD_SWDEC_PREFER) ; <br>            CheckMenuItem(hMenu, IDM_SWMAX, MF_CHECKED) ; <br>        } <br>        break; <br> <br>    case IDM_SWONLY: <br>        if (0 == (Player.GetRenderFlag() &amp; AM_DVD_SWDEC_ONLY)) <br>        { <br>            CheckMenuItem(hMenu, FlagToMenuID(Player.GetRenderFlag()), <br>                          MF_UNCHECKED) ; <br>            Player.SetRenderFlag(AM_DVD_SWDEC_ONLY) ; <br>            CheckMenuItem(hMenu, IDM_SWONLY, MF_CHECKED) ; <br>        } <br>        break; <br> <br>    case IDM_NOVPE: <br>        Player.SetRenderFlag(AM_DVD_NOVPE) ; <br>        CheckMenuItem(hMenu, IDM_NOVPE,  <br>             (Player.GetRenderFlag() &amp; AM_DVD_NOVPE) ? MF_CHECKED : MF_UNCHECKED) ; <br>        break; <br> <br>    case IDM_BUILDGRAPH: <br>        Player.BuildGraph() ; <br>        break ; <br> <br>    case IDM_PLAY: <br>        Player.Play() ; <br>        break; <br> <br>    case IDM_STOP: <br>        Player.Stop() ; <br>        break; <br> <br>    case IDM_PAUSE: <br>        Player.Pause() ; <br>        break; <br> <br>    case IDM_FASTFWD: <br>        Player.FastForward() ; <br>        break; <br> <br>    case IDM_VERYFASTFWD: <br>        Player.VeryFastForward() ; <br>        break; <br> <br>    case IDM_FASTRWND: <br>        Player.FastRewind() ; <br>        break; <br> <br>    case IDM_VERYFASTRWND: <br>        Player.VeryFastRewind() ; <br>        break; <br> <br>    case IDM_MENU: <br>        Player.ShowMenu() ; <br>        break; <br> <br>    case IDM_USER_MENUSTATUS: <br>        // <br>        // This is a custom user message that informs the app to update the <br>        // menu according to the state. <br>        // <br>        ModifyMenu(hMenu, IDM_MENU, MF_STRING, IDM_MENU, <br>                   lParam ? TEXT("Resume") : TEXT("Menu")) ; <br>        break ; <br> <br>    case IDM_LANG: <br>        if (! Player.IsLangKnown() ) <br>        { <br>            MessageBox(Player.GetWindow(),  <br>                    TEXT("Can't specify audio/subpicture language until playback starts."),  <br>                    TEXT("Error"), MB_OK | MB_ICONINFORMATION) ; <br>            break ; <br>        } <br>        DialogBox(Player.GetInstance(), MAKEINTRESOURCE(IDD_LANGUAGE), Player.GetWindow(), <br>                  (DLGPROC) SelectLang); <br>        break; <br> <br>    case IDM_VIEWLEVEL: <br>        if (Playing == Player.GetState()) <br>        { <br>            MessageBox(Player.GetWindow(),  <br>                    TEXT("Can't change parental control level during playback. Please stop first."),  <br>                    TEXT("Error"), MB_OK | MB_ICONINFORMATION) ; <br>            break ; <br>        } <br>        DialogBox(Player.GetInstance(), MAKEINTRESOURCE(IDD_VIEWLEVEL), Player.GetWindow(), <br>                (DLGPROC) SelectViewLevel); <br>        break; <br> <br>    case IDM_CC: <br>        if (Player.ClosedCaption())  // CC turned on <br>            CheckMenuItem(hMenu, IDM_CC, MF_CHECKED) ; <br>        else  // CC turned off <br>            CheckMenuItem(hMenu, IDM_CC, MF_UNCHECKED) ; <br>        break ; <br> <br>    case IDM_FULLSCRN: <br>        if (Player.ShowFullScreen())  // if really in fullscreen mode <br>            CheckMenuItem(hMenu, IDM_FULLSCRN, MF_CHECKED) ; <br>        else  // full screen turned off <br>            CheckMenuItem(hMenu, IDM_FULLSCRN, MF_UNCHECKED) ; <br>        break; <br> <br>    default: <br>        break ; <br>    } <br> <br>    return 0 ; <br>} <br> <br> <br>LRESULT CALLBACK KeyProc(HWND hWnd, WPARAM wParam, LPARAM lParam) <br>{ <br>    switch (wParam) <br>    { <br>case VK_ESCAPE: <br>    { <br>    MessageBeep(MB_OK) ; <br>    HMENU hMenu = GetMenu(hWnd) ; <br>    Player.StopFullScreen() ; <br>    CheckMenuItem(hMenu, IDM_FULLSCRN, MF_UNCHECKED) ;  // no fullscrn anymore <br>    } <br>    break ; <br> <br>case VK_UP: <br>    Player.CursorMove(Cursor_Up) ; <br>    break ; <br> <br>case VK_DOWN: <br>    Player.CursorMove(Cursor_Down) ; <br>    break ; <br> <br>case VK_LEFT: <br>    Player.CursorMove(Cursor_Left) ; <br>    break ; <br> <br>case VK_RIGHT: <br>    Player.CursorMove(Cursor_Right) ; <br>    break ; <br> <br>case VK_RETURN: <br>    Player.CursorSelect() ; <br>    break ; <br> <br>default: <br>    break ; <br>    } <br> <br>    return 0 ; <br>} <br> <br> <br>// <br>// One function to update the menu state based on the player object state. <br>// Used by WM_INITMENUPOPUP message handling. <br>// <br>void UpdateMenuState(void) <br>{ <br>    HMENU  hMenu = GetMenu(Player.GetWindow()) ; <br> <br>    switch (Player.GetState()) <br>    { <br>    case Unknown: <br>        EnableMenuItem(hMenu, IDM_BUILDGRAPH, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_PAUSE, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_PLAY, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_STOP, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_SLOWPLAY, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_FASTFWD, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_VERYFASTFWD, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_FASTRWND, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_VERYFASTRWND, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_MENU, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_LANG, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_VIEWLEVEL, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_CC, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_FULLSCRN, MF_GRAYED) ; <br>        break ; <br> <br>    case Stopped: <br>        EnableMenuItem(hMenu, IDM_BUILDGRAPH, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_STOP, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_PAUSE, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_PLAY, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_SLOWPLAY, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_FASTFWD, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_VERYFASTFWD, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_FASTRWND, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_VERYFASTRWND, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_MENU, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_FULLSCRN, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_LANG, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_VIEWLEVEL, MF_ENABLED) ; <br>    // CC option has been turned on/off above based on Line21Dec presence <br>        break ; <br> <br>    case Paused: <br>        EnableMenuItem(hMenu, IDM_BUILDGRAPH, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_PAUSE, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_STOP, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_PLAY, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_SLOWPLAY, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_FASTFWD, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_VERYFASTFWD, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_FASTRWND, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_VERYFASTRWND, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_MENU, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_FULLSCRN, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_LANG, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_VIEWLEVEL, MF_ENABLED) ; <br>        break ; <br> <br>    case Playing: <br>        EnableMenuItem(hMenu, IDM_BUILDGRAPH, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_PLAY, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_PAUSE, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_STOP, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_SLOWPLAY, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_FASTFWD, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_VERYFASTFWD, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_FASTRWND, MF_ENABLED) ; <br>    EnableMenuItem(hMenu, IDM_VERYFASTRWND, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_MENU, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_FULLSCRN, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_LANG, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_VIEWLEVEL, MF_ENABLED) ; <br>        break ; <br> <br>    case Scanning: <br>        EnableMenuItem(hMenu, IDM_BUILDGRAPH, MF_GRAYED) ; <br>    EnableMenuItem(hMenu, IDM_SLOWPLAY, MF_GRAYED) ; <br>    EnableMenuItem(hMenu, IDM_FASTFWD, MF_GRAYED) ; <br>    EnableMenuItem(hMenu, IDM_VERYFASTFWD, MF_GRAYED) ; <br>    EnableMenuItem(hMenu, IDM_FASTRWND, MF_GRAYED) ; <br>    EnableMenuItem(hMenu, IDM_VERYFASTRWND, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_MENU, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_FULLSCRN, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_LANG, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_VIEWLEVEL, MF_GRAYED) ; <br>        EnableMenuItem(hMenu, IDM_STOP, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_PAUSE, MF_ENABLED) ; <br>        EnableMenuItem(hMenu, IDM_PLAY, MF_ENABLED) ; <br>        break ; <br> <br>    default:  // Huh!!! <br>        break ; <br>    } <br>} <br> <br> <br>LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>    static HDC  hDC ; <br>    static PAINTSTRUCT ps ; <br> <br>    switch (message) { <br> <br>    case WM_INITMENUPOPUP: <br>        UpdateMenuState() ; <br>        break ; <br> <br>case WM_PAINT: <br>        hDC = BeginPaint(hWnd, &amp;ps) ; <br>        ASSERT(hDC) ; <br>        Player.DrawStatus(hDC) ; <br>        EndPaint(hWnd, &amp;ps) ; <br>        break ; <br> <br>case WM_DVDPLAY_EVENT: <br>        Player.OnDVDPlayEvent(wParam, lParam) ; <br>        break ; <br> <br>case WM_KEYUP: <br>        KeyProc(hWnd, wParam, lParam) ; <br>        break ; <br> <br>case WM_COMMAND: <br>        MenuProc(hWnd, wParam, lParam) ; <br>        break; <br> <br>case WM_DESTROY: <br>        PostQuitMessage(0); <br>        break; <br> <br>default: <br>        return (DefWindowProc(hWnd, message, wParam, lParam)); <br>    } <br> <br>    return 0 ; <br>} <br> <br> <br>LRESULT CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>    switch (message) { <br>case WM_INITDIALOG: <br>        return TRUE; <br> <br>case WM_COMMAND: <br>        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL) <br>        { <br>            EndDialog(hDlg, TRUE); <br>            return TRUE; <br>    } <br>        break; <br> <br>default: <br>        break ; <br>    } <br> <br>    return FALSE; <br>} <br> <br> <br>LRESULT CALLBACK SelectLang(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>    switch (message) { <br>case WM_INITDIALOG: <br>    { <br>        Player.MakeAudioStreamList(hDlg, IDD_LANG_AUDIOLANG) ; <br>        Player.MakeSPStreamList(hDlg, IDD_LANG_SPLANG) ; <br>        BOOL bSPOn = IsDlgButtonChecked(hDlg, IDD_LANG_SHOWSUBPIC) ; <br>        EnableWindow(GetDlgItem(hDlg, IDD_LANG_SPLANGTEXT), bSPOn) ; <br>        EnableWindow(GetDlgItem(hDlg, IDD_LANG_SPLANG), bSPOn) ; <br>    } <br>    return TRUE; <br> <br>case WM_COMMAND: <br>        switch (LOWORD(wParam)) <br>        { <br>        case IDD_LANG_SHOWSUBPIC: <br>        { <br>            BOOL bSPOn = IsDlgButtonChecked(hDlg, IDD_LANG_SHOWSUBPIC) ; <br>            EnableWindow(GetDlgItem(hDlg, IDD_LANG_SPLANGTEXT), bSPOn) ; <br>            EnableWindow(GetDlgItem(hDlg, IDD_LANG_SPLANG), bSPOn) ; <br>        } <br>        break ; <br> <br>        case IDOK: <br>        { <br>            LONG   lStream ; <br>            BOOL   bRes ; <br> <br>            // Set the SP choice value &amp; option specified by the user <br>            BOOL bSPOn = IsDlgButtonChecked(hDlg, IDD_LANG_SHOWSUBPIC) ; <br>            if (bSPOn) <br>            { <br>                lStream = SendDlgItemMessage(hDlg, IDD_LANG_SPLANG, CB_GETCURSEL, (WPARAM) 0, (LPARAM) 0) ; <br>                if (CB_ERR == lStream) <br>                    DbgLog((LOG_ERROR, 1,  <br>                        TEXT("WARNING: Couldn't get selected SP stream id (Error %d)"), lStream)) ; <br>                else <br>                { <br>                    bRes = Player.SetSPState(lStream, bSPOn) ; // TRUE <br>                    ASSERT(bRes) ; <br>                } <br>            } <br>            else <br>            { <br>                bRes = Player.SetSPState(SPSTREAM_NOCHANGE, bSPOn) ; // FALSE <br>                ASSERT(bRes) ; <br>            } <br> <br>            // Set the audio choice value specified by the user <br>            lStream = SendDlgItemMessage(hDlg, IDD_LANG_AUDIOLANG, CB_GETCURSEL, (WPARAM) 0, (LPARAM) 0) ; <br>            if (CB_ERR == lStream) <br>                DbgLog((LOG_ERROR, 1, TEXT("WARNING: Couldn't get selected audio stream id (Error %d)"), lStream)) ; <br>            else <br>            { <br>                bRes = Player.SetAudioState(lStream) ; <br>                ASSERT(bRes) ; <br>            } <br>        } <br> <br>        // Now fall through to just end the dialog <br> <br>        case IDCANCEL: <br>            EndDialog(hDlg, TRUE); <br>            return TRUE; <br>        } <br>        break; <br> <br>    default: <br>        break ; <br>    } <br> <br>    return FALSE; <br>} <br> <br> <br>LRESULT CALLBACK SelectViewLevel(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>    switch (message) { <br>    case WM_INITDIALOG: <br>        Player.MakeParentalLevelList(hDlg, IDD_VIEW_LEVELLIST) ; <br>        return TRUE; <br> <br>    case WM_COMMAND: <br>        switch (LOWORD(wParam)) <br>        { <br>        case IDOK: <br>        { <br>            LONG  lLevel ; <br>            lLevel = SendDlgItemMessage(hDlg, IDD_VIEW_LEVELLIST, LB_GETCURSEL, (WPARAM) 0, (LPARAM) 0) ; <br>            if (CB_ERR == lLevel) <br>                DbgLog((LOG_ERROR, 1, TEXT("WARNING: Couldn't get selected parental control level (Error %d)"), lLevel)) ; <br>            else <br>                Player.SetParentalLevel(lLevel) ; <br>        } <br> <br>        // Now fall through to just end the dialog <br> <br>        case IDCANCEL: <br>            EndDialog(hDlg, TRUE); <br>            return TRUE; <br>        } <br>        break; <br> <br>    default: <br>        break ; <br>    } <br> <br>    return FALSE; <br>} <br> <br> <br> <br>// ------------------------------------------------------------------------- <br>//                .... Windows App Requirement ends .... <br>// ------------------------------------------------------------------------- <br> <br> <br>// ------------------------------------------------------------------------- <br>//           ....  CSampleDVDPlay class implementation  .... <br>// ------------------------------------------------------------------------- <br> <br>CSampleDVDPlay::CSampleDVDPlay(void) <br>{ <br>    CoInitialize(NULL) ; <br> <br>    // The app stuff <br>    m_dwRenderFlag = 0 ; <br>    m_bMenuOn = FALSE ; <br>    m_bCCOn = FALSE ; <br>    m_bFullScrnOn = FALSE ; <br>    m_ulSPStream = 0 ; <br>    m_bSPOn = TRUE ; <br>    m_ulAudioStream = 0 ; <br>    m_bStillOn = FALSE ; <br>    m_bLangKnown = FALSE ; <br>    m_eState = Unknown ; <br>    m_ulParentCtrlLevel = 3 ;  // 3 is the index to level 6 which is for "R" <br> <br>    m_pDvdGB = NULL ; <br>    m_pGraph = NULL ; <br>    m_pDvdC = NULL ; <br>    m_pDvdI = NULL ; <br>    m_pVW = NULL ; <br>    m_pMC = NULL ; <br>    m_pME = NULL ; <br> <br>    ZeroMemory(m_achFileName, sizeof(m_achFileName)) ; <br>    ZeroMemory(m_achStillText, sizeof(m_achStillText)) ; <br>    ZeroMemory(m_achTitleText, sizeof(m_achTitleText)) ; <br>    ZeroMemory(m_achChapterText, sizeof(m_achChapterText)) ; <br>    ZeroMemory(m_achTimeText, sizeof(m_achTimeText)) ; <br>} <br> <br> <br>CSampleDVDPlay::~CSampleDVDPlay(void) <br>{ <br>    // Release the DS interfaces we have got <br>    ReleaseInterfaces() ; <br> <br>    if (m_pDvdGB) <br>        m_pDvdGB-&gt;Release() ; <br> <br>    CoUninitialize() ; <br>    DbgLog((LOG_TRACE, 0, TEXT("CSampleDVDPlay d-tor exiting..."))) ; <br>} <br> <br> <br>void CSampleDVDPlay::ReleaseInterfaces(void) <br>{ <br>    if (m_pDvdC) { <br>        m_pDvdC-&gt;Release() ; <br>        m_pDvdC = NULL ; <br>    } <br>    if (m_pDvdI) { <br>        m_pDvdI-&gt;Release() ; <br>        m_pDvdI = NULL ; <br>    } <br>    if (m_pVW) { <br>        m_pVW-&gt;Release() ; <br>        m_pVW = NULL ; <br>    } <br>    if (m_pMC) { <br>        m_pMC-&gt;Release() ; <br>        m_pMC = NULL ; <br>    } <br>    if (m_pME) { <br>        // clear any already set notification arrangement <br>        m_pME-&gt;SetNotifyWindow(NULL, WM_DVDPLAY_EVENT, (ULONG)(LPVOID)m_pME) ; <br>        m_pME-&gt;Release() ; <br>        m_pME = NULL ; <br>    } <br>    if (m_pGraph) { <br>        m_pGraph-&gt;Release() ; <br>        m_pGraph = NULL ; <br>    } <br>} <br> <br> <br>void CSampleDVDPlay::SetAppValues(HINSTANCE hInst, LPTSTR szAppName,  <br>  int iAppTitleResId) <br>{ <br>    // The Windows stuff <br>    m_hInstance = hInst ; <br>    lstrcpy(m_szAppName, APPNAME) ; <br>    LoadString(m_hInstance, IDS_APP_TITLE, m_szTitle, 100) ; <br>} <br> <br> <br>BOOL CSampleDVDPlay::InitApplication(void) <br>{ <br>    WNDCLASSEX  wc ; <br> <br>    // Win32 will always set hPrevInstance to NULL, so lets check <br>    // things a little closer. This is because we only want a single <br>    // version of this app to run at a time <br>    m_hWnd = FindWindow (m_szAppName, m_szTitle) ; <br>    if (m_hWnd) { <br>        // We found another version of ourself. Lets defer to it: <br>        if (IsIconic(m_hWnd)) { <br>            ShowWindow(m_hWnd, SW_RESTORE); <br>        } <br>        SetForegroundWindow(m_hWnd); <br> <br>        // If this app actually had any functionality, we would <br>        // also want to communicate any action that our 'twin' <br>        // should now perform based on how the user tried to <br>        // execute us. <br>        return FALSE; <br>    } <br> <br>    // Register the app main window class <br>    wc.cbSize        = sizeof(wc) ; <br>    wc.style         = CS_HREDRAW | CS_VREDRAW ; <br>    wc.lpfnWndProc   = (WNDPROC) WndProc ; <br>    wc.cbClsExtra    = 0 ; <br>    wc.cbWndExtra    = 0 ; <br>    wc.hInstance     = m_hInstance ; <br>    wc.hIcon         = LoadIcon(m_hInstance, m_szAppName) ; <br>    wc.hCursor       = LoadCursor(NULL, IDC_ARROW) ; <br>    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW+1) ; <br>    wc.lpszMenuName  = m_szAppName ; <br>    wc.lpszClassName = m_szAppName ; <br>    wc.hIconSm       = NULL ; <br>    if (0 == RegisterClassEx(&amp;wc)) <br>    { <br>        DbgLog((LOG_ERROR, 0,  <br>        TEXT("ERROR: RegisterClassEx() for app class failed (Error %ld)"),  <br>        GetLastError())) ; <br>        return FALSE ; <br>    } <br> <br>    return TRUE ; <br>} <br> <br>BOOL CSampleDVDPlay::InitInstance(int nCmdShow) <br>{ <br>    m_hWnd = CreateWindowEx(0, m_szAppName, m_szTitle, WS_OVERLAPPEDWINDOW, <br>                        200, 400, 400, 200, <br>                        NULL, NULL, m_hInstance, NULL); <br>    if (!m_hWnd) { <br>        return FALSE ; <br>    } <br> <br>    ShowWindow(m_hWnd, nCmdShow); <br>    UpdateWindow(m_hWnd) ; <br> <br>    // <br>    // The DirectShow stuff: <br>    //     Now instantiate the DVD Graph Builder object and start working <br>    // <br>    HRESULT hr = CoCreateInstance(CLSID_DvdGraphBuilder, NULL, CLSCTX_INPROC,  <br>IID_IDvdGraphBuilder, (LPVOID *)&amp;m_pDvdGB) ; <br>    if (FAILED(hr) || NULL == m_pDvdGB) <br>    { <br>        MessageBox(m_hWnd,  <br>                TEXT("DirectShow DVD software not installed properly.\nPress OK to end the app."),  <br>                TEXT("Error"), MB_OK | MB_ICONSTOP) ; <br>        return FALSE ; <br>    } <br> <br>    // <br>    // By default we use HW decoding as preferred mode. Set menu option. <br>    // Also we don't turn on CC by default. <br>    m_dwRenderFlag = AM_DVD_HWDEC_PREFER ; <br>    CheckMenuItem(GetMenu(m_hWnd), IDM_HWMAX, MF_CHECKED) ; <br>    CheckMenuItem(GetMenu(m_hWnd), IDM_CC, MF_UNCHECKED) ; <br>    CheckMenuItem(GetMenu(m_hWnd), IDM_FULLSCRN, MF_UNCHECKED) ; <br> <br>    return TRUE; <br>} <br> <br> <br>void CSampleDVDPlay::BuildGraph(void) <br>{ <br>    // First release any existing interface pointer(s) <br>    ReleaseInterfaces() ; <br> <br>    // Check if a DVD-Video volume name has been specified; if so, use that <br>    WCHAR    achwFileName[MAX_PATH] ; <br>    LPCWSTR  lpszwFileName = NULL ;  // by default <br>    if (lstrlen(m_achFileName) &gt; 0)  // if something was specified before <br>    { <br>#ifdef UNICODE <br>        lstrcpy(achwFileName, m_achFileName) ; <br>#else <br>        MultiByteToWideChar(CP_ACP, 0, m_achFileName, -1, achwFileName, MAX_PATH) ; <br>#endif // UNICODE <br> <br>        lpszwFileName = achwFileName ; <br>    } <br> <br>    // Build the graph <br>    AM_DVD_RENDERSTATUS   Status ; <br>    HRESULT hr = m_pDvdGB-&gt;RenderDvdVideoVolume(lpszwFileName, <br>                                    m_dwRenderFlag, &amp;Status) ; <br>    if (FAILED(hr)) <br>    { <br>        AMGetErrorText(hr, m_achBuffer, sizeof(m_achBuffer)) ; <br>        MessageBox(m_hWnd, m_achBuffer, m_szAppName, MB_OK) ; <br>        return ; <br>    } <br>    if (S_FALSE == hr)  // if partial success <br>    { <br>        TCHAR    achStatusText[1000] ; <br>        if (0 == GetStatusText(&amp;Status, achStatusText, sizeof(achStatusText))) <br>        { <br>            lstrcpy(achStatusText, TEXT("An unknown error has occurred")) ; <br>        } <br>        lstrcat(achStatusText, TEXT("\n\nDo you still want to continue?")) ; <br>        if (IDNO == MessageBox(m_hWnd, achStatusText, TEXT("Warning"), MB_YESNO)) <br>        { <br>            return ; <br>        } <br>    } <br> <br>    m_eState = Stopped ;  // graph has been built, however bad it may be <br> <br>    // Now get all the interfaces to playback the DVD-Video volume <br>    hr = m_pDvdGB-&gt;GetFiltergraph(&amp;m_pGraph) ; <br>    ASSERT(SUCCEEDED(hr) &amp;&amp; m_pGraph) ; <br> <br>    hr = m_pGraph-&gt;QueryInterface(IID_IMediaControl, (LPVOID *)&amp;m_pMC) ; <br>    ASSERT(SUCCEEDED(hr) &amp;&amp; m_pMC) ; <br> <br>    hr = m_pGraph-&gt;QueryInterface(IID_IMediaEventEx, (LPVOID *)&amp;m_pME) ; <br>    ASSERT(SUCCEEDED(hr) &amp;&amp; m_pME) ; <br> <br>    // <br>    // Also set up the event notification so that the main window gets <br>    // informed about all that we care about during playback. <br>    // <br>    hr = m_pME-&gt;SetNotifyWindow((OAHWND) m_hWnd, WM_DVDPLAY_EVENT,  <br>(ULONG)(LPVOID)m_pME) ; <br>    ASSERT(SUCCEEDED(hr)) ; <br> <br>    hr = m_pDvdGB-&gt;GetDvdInterface(IID_IDvdControl, (LPVOID *)&amp;m_pDvdC) ; <br>    ASSERT(SUCCEEDED(hr) &amp;&amp; m_pDvdC) ; <br> <br>    hr = m_pDvdGB-&gt;GetDvdInterface(IID_IDvdInfo, (LPVOID *)&amp;m_pDvdI) ; <br>    ASSERT(SUCCEEDED(hr) &amp;&amp; m_pDvdI) ; <br> <br>    IAMLine21Decoder  *pL21Dec ; <br>    hr = m_pDvdGB-&gt;GetDvdInterface(IID_IAMLine21Decoder, (LPVOID *)&amp;pL21Dec) ; <br>    if (pL21Dec) <br>    { <br>    EnableMenuItem(GetMenu(m_hWnd), IDM_CC, MF_ENABLED) ; <br>    pL21Dec-&gt;SetServiceState(m_bCCOn ? AM_L21_CCSTATE_On : AM_L21_CCSTATE_Off) ; <br>    pL21Dec-&gt;Release() ; <br>    } <br>    else <br>    { <br>        EnableMenuItem(GetMenu(m_hWnd), IDM_CC, MF_GRAYED) ; <br>        DbgLog((LOG_TRACE, 2, TEXT("Line21 Decoder interface not found. Can't CC"))) ; <br>    } <br> <br>    // Now change the title of the playback window <br>    hr = m_pDvdGB-&gt;GetDvdInterface(IID_IVideoWindow, (LPVOID *)&amp;m_pVW) ; <br>    if (SUCCEEDED(hr) &amp;&amp; m_pVW) <br>    { <br>        TCHAR   achTitle[40] ; <br>#ifdef UNICODE <br>        LoadString(m_hInstance, IDS_WINDOW_TITLE, achwTitle, sizeof(achwTitle)) ; <br>#else <br>        WCHAR   achwTitle[40] ; <br>        LoadString(m_hInstance, IDS_WINDOW_TITLE, achTitle, sizeof(achTitle)) ; <br>        MultiByteToWideChar(CP_ACP, 0, achTitle, -1, achwTitle, sizeof(achwTitle)) ; <br>#endif // UNICODE <br>        m_pVW-&gt;put_Caption((BSTR)achwTitle) ; <br>    } <br>    else <br>        DbgLog((LOG_ERROR, 1, TEXT("IVideoWindow interface not found. No window title change."))) ; <br> <br>    return ; <br>} <br> <br> <br>BOOL CSampleDVDPlay::Play(void) <br>{ <br>    HRESULT  hr ; <br> <br>    // <br>    // If somehow the still image is On, ask Nav to get just out of that mode <br>    // <br>    if (m_eState != Playing  &amp;&amp;  m_bStillOn  &amp;&amp;  m_pDvdC) <br>    { <br>        if (SUCCEEDED(hr = m_pDvdC-&gt;StillOff())) <br>       { <br>            m_bStillOn = FALSE ; <br>            m_eState = Playing ; <br>            return TRUE ;    // we are done!!! <br>        } <br>        else <br>            DbgLog((LOG_TRACE, 3, TEXT("IDvdControl::StillOff() failed (Error 0x%lx)"), hr)) ; <br>    } <br> <br>    // <br>    // If we are scanning now, just set the scanning speed to normal, i.e, play <br>    // <br>    PLAYER_STATE  State = GetState() ; <br>    if (Scanning == State) <br>    { <br>        hr = m_pDvdC-&gt;ForwardScan(1.0) ; <br>        ASSERT(SUCCEEDED(hr)) ; <br>    } <br>    // <br>    // Parental level needs to be set every time we run, because the Nav flushes its <br>    // settings everytime the graph is "stopped". So we better apply it on transition <br>    // to "play". <br>    // Use the actual value of viewing level rather than list box index <br>    // <br>    else if (Stopped == State)  // if stopped, set parental level again <br>    { <br>        hr = m_pDvdC-&gt;ParentalLevelSelect(m_ViewLevels.GetValue(m_ulParentCtrlLevel)) ; <br>        ASSERT(SUCCEEDED(hr)) ; <br>    } <br> <br>    // <br>    // We need to do some work to play... <br>    // <br>    if (NULL == m_pMC) <br>    { <br>        MessageBox(m_hWnd, TEXT("DVD-Video playback graph hasn't been built yet"), TEXT("Error"), MB_OK) ; <br>        return FALSE ; <br>    } <br>    hr = m_pMC-&gt;Run() ; <br>    if (FAILED(hr)) <br>    { <br>        DbgLog((LOG_ERROR, 0, TEXT("WARNING: IMediaControl::Run() failed (Error 0x%lx)"), hr)) ; <br>        return FALSE ; <br>    } <br> <br>    // Some state changes now <br>    m_eState = Playing ; <br>    m_bStillOn = FALSE ;  // should be, right? <br> <br>    return TRUE ;  // success <br>} <br> <br>BOOL CSampleDVDPlay::Stop(void) <br>{ <br>    if (NULL == m_pMC) <br>    { <br>        MessageBox(m_hWnd, TEXT("DVD-Video playback graph hasn't been built yet"), TEXT("Error"), MB_OK) ; <br>        return FALSE ; <br>    } <br>    HRESULT hr = m_pMC-&gt;Stop() ; <br>    if (FAILED(hr)) <br>    { <br>        DbgLog((LOG_ERROR, 0, TEXT("WARNING: IMediaControl::Stop() failed (Error 0x%lx)"), hr)) ; <br>        return FALSE ; <br>    } <br> <br>    m_eState = Stopped ; <br> <br>    return TRUE ;  // success <br>} <br> <br>BOOL CSampleDVDPlay::Pause(void) <br>{ <br>    if (NULL == m_pMC) <br>    { <br>        MessageBox(m_hWnd, TEXT("DVD-Video playback graph hasn't been built yet"), TEXT("Error"), MB_OK) ; <br>        return FALSE ; <br>    } <br>    HRESULT hr = m_pMC-&gt;Pause() ; <br>    if (FAILED(hr)) <br>    { <br>        DbgLog((LOG_ERROR, 0, TEXT("WARNING: IMediaControl::Pause() failed (Error 0x%lx)"), hr)) ; <br>        return FALSE ; <br>    } <br> <br>    m_eState = Paused ; <br> <br>    return TRUE ;  // success </code></pre>
<p>
</p>
<pre><code>} <br> <br> <br>BOOL CSampleDVDPlay::FastForward(void) <br>{ <br>    if (NULL == m_pDvdC) <br>    { <br>        MessageBox(m_hWnd, TEXT("DVD-Video playback graph hasn't been built yet"), TEXT("Error"), MB_OK) ; <br>        return FALSE ; <br>    } <br>    HRESULT hr = m_pDvdC-&gt;ForwardScan(2.0) ; <br>    if (FAILED(hr)) <br>    { <br>        DbgLog((LOG_ERROR, 0, TEXT("WARNING: IDvdControl::ForwardScan(2.0) failed (Error 0x%lx)"), hr)) ; <br>        return FALSE ; <br>    } <br> <br>    m_eState = Scanning ; <br> <br>    return TRUE ;  // success <br>} <br> <br> <br>BOOL CSampleDVDPlay::VeryFastForward(void) <br>{ <br>    if (NULL == m_pDvdC) <br>    { <br>        MessageBox(m_hWnd, TEXT("DVD-Video playback graph hasn't been built yet"), TEXT("Error"), MB_OK) ; <br>        return FALSE ; <br>    } <br>    HRESULT hr = m_pDvdC-&gt;ForwardScan(8.0) ; <br>    if (FAILED(hr)) <br>    { <br>        DbgLog((LOG_ERROR, 0, TEXT("WARNING: IDvdControl::ForwardScan(8.0) failed (Error 0x%lx)"), hr)) ; <br>        return FALSE ; <br>    } <br> <br>    m_eState = Scanning ; <br> <br>    return TRUE ;  // success <br>} <br> <br> <br>BOOL CSampleDVDPlay::FastRewind(void) <br>{ <br>    if (NULL == m_pDvdC) <br>    { <br>        MessageBox(m_hWnd, TEXT("DVD-Video playback graph hasn't been built yet"), TEXT("Error"), MB_OK) ; <br>        return FALSE ; <br>    } <br>    HRESULT hr = m_pDvdC-&gt;BackwardScan(2.0) ; <br>    if (FAILED(hr)) <br>    { <br>        DbgLog((LOG_ERROR, 0, TEXT("WARNING: IDvdControl::BackwardScan(2.0) failed (Error 0x%lx)"), hr)) ; <br>        return FALSE ; <br>    } <br> <br>    m_eState = Scanning ; <br> <br>    return TRUE ;  // success <br>} <br> <br> <br>BOOL CSampleDVDPlay::VeryFastRewind(void) <br>{ <br>    if (NULL == m_pDvdC) <br>    { <br>        MessageBox(m_hWnd, TEXT("DVD-Video playback graph hasn't been built yet"), TEXT("Error"), MB_OK) ; <br>        return FALSE ; <br>    } <br>    HRESULT hr = m_pDvdC-&gt;BackwardScan(8.0) ; <br>    if (FAILED(hr)) <br>    { <br>        DbgLog((LOG_ERROR, 0, TEXT("WARNING: IDvdControl::BackwardScan(8.0) failed (Error 0x%lx)"), hr)) ; <br>        return FALSE ; <br>    } <br> <br>    m_eState = Scanning ; <br> <br>    return TRUE ;  // success <br>} <br> <br> <br>BOOL CSampleDVDPlay::SlowPlay(void) <br>{ <br>    if (NULL == m_pDvdC) <br>    { <br>        MessageBox(m_hWnd, TEXT("DVD-Video playback graph hasn't been built yet"), TEXT("Error"), MB_OK) ; <br>        return FALSE ; <br>    } <br>    HRESULT hr = m_pDvdC-&gt;ForwardScan(0.5) ; <br>    if (FAILED(hr)) <br>    { <br>        DbgLog((LOG_ERROR, 0, TEXT("WARNING: IDvdControl::ForwardScan(0.5) failed (Error 0x%lx)"), hr)) ; <br>        return FALSE ; <br>    } <br> <br>    m_eState = Scanning ; <br> <br>    return TRUE ;  // success <br>} <br> <br> <br>BOOL CSampleDVDPlay::SetSPState(LONG lSPStream, BOOL bState) <br>{ <br>    HRESULT hr = m_pDvdC-&gt;SubpictureStreamChange(lSPStream, bState) ; <br>    if (SUCCEEDED(hr)) <br>    { <br>        m_bSPOn = bState ; <br>        m_ulSPStream = lSPStream ;  // store new SP stream id <br>        return TRUE ;  // success <br>    } <br> <br>    DbgLog((LOG_ERROR, 0,  <br>            TEXT("WARNING: IDvdControl::SubpictureStreamChange(%ld, %s) failed (Error 0x%lx)"),  <br>            lSPStream, bState ? TEXT("TRUE") : TEXT("FALSE"), hr)) ; <br>    return FALSE ;  // failure <br>} <br> <br> <br>// <br>// On Windows 95 (and OSR2), the locale information is not retrieved properly.  To get <br>// the audio and subpicture language names properly, we have to do a bit of work around. <br>// This should be fixed in Windows 98 making the extra work unnecessary. <br>// <br>int CSampleDVDPlay::MakeSPStreamList(HWND hDlg, int iListID) <br>{ <br>    if (NULL == m_pDvdI) <br>    { <br>        DbgLog((LOG_ERROR, 0, TEXT("WARNING: IDvdInfo interface not available"))) ; <br>        return FALSE ; <br>    } <br> <br>    ULONG  ulStream ; <br>    LCID   lcid ; <br>    TCHAR  achLang[MAX_PATH] ; <br>    int    iRes ; <br>    ULONG  ulNumLang ; <br>    ULONG  ulCurrLang ; <br>    BOOL   bSPOn ; <br> <br>    // First clear the list box of all SP stream names <br>    SendDlgItemMessage(hDlg, iListID, CB_RESETCONTENT, (WPARAM) 0, (LPARAM) 0) ; <br> <br>    // Now add all other available SP streams <br>    HRESULT hr = m_pDvdI-&gt;GetCurrentSubpicture(&amp;ulNumLang, &amp;ulCurrLang, &amp;bSPOn) ; <br>    if (FAILED(hr)) <br>    { <br>        MessageBox(m_hWnd, TEXT("Not ready to find language information"), TEXT("Warning"), MB_OK) ; <br>        return 0 ; <br>    } <br> <br>    for (ulStream = 0 ; ulStream &lt; ulNumLang ; ulStream++) <br>    { <br>        if (SUCCEEDED(m_pDvdI-&gt;GetSubpictureLanguage(ulStream, &amp;lcid))  &amp;&amp; <br>            0 != lcid) <br>        { <br>            iRes = GetLocaleInfo(lcid, LOCALE_SENGLANGUAGE, achLang, MAX_PATH) ; <br>            if (0 == iRes) <br>            { <br>                if (! GetSPLanguage(ulStream, bSPOn, achLang, MAX_PATH) )  // Pre-Win98 <br>                    continue ; <br>            } <br>        } <br>        else  // SP language enum failed <br>        { <br>            if (! GetSPLanguage(ulStream, bSPOn, achLang, MAX_PATH) )  // Pre-Win98 <br>                continue ; <br>        } <br> <br>        // Add to the listbox now <br>        iRes = SendDlgItemMessage(hDlg, iListID, CB_ADDSTRING, (WPARAM) 0, (LPARAM)(LPVOID) achLang) ; <br>        if (CB_ERR == iRes || CB_ERRSPACE == iRes) <br>        { <br>            DbgLog((LOG_ERROR, 1, TEXT("Error (%d) adding SP language '%s' to list"), iRes, achLang)) ; <br>        } <br>    } <br> <br>    // <br>    // GetSPLanguage() method might have changed the currently set SP stream and/or state. <br>    // Let's set it back to what it was before. <br>    // <br>    hr = m_pDvdC-&gt;SubpictureStreamChange(m_ulSPStream, m_bSPOn) ; <br>    ASSERT(SUCCEEDED(hr)) ; <br> <br>    if (ulStream &gt; 0) <br>    { <br>        iRes = SendDlgItemMessage(hDlg, IDD_LANG_SPLANG, CB_SETCURSEL,  <br>                        (WPARAM) m_ulSPStream, (LPARAM) 0) ; <br>        if (CB_ERR == iRes) <br>            DbgLog((LOG_ERROR, 1,  <br>                TEXT("WARNING: Couldn't set %ld as selected SP stream id (Error %d)"), <br>                m_ulSPStream, iRes)) ; <br>    } <br>    CheckDlgButton(hDlg, IDD_LANG_SHOWSUBPIC, m_bSPOn) ; <br> <br>    return ulStream ; <br>} <br> <br> <br>void CSampleDVDPlay::GetSPLangCode(DVD_SubpictureATR *pSPATR, LPTSTR lpszCode) <br>{ <br>    lpszCode[0] = (((LANGINFO *)pSPATR)-&gt;wLang &amp; 0xFF) | 0x20 ;        // get byte &amp; lower case <br>    lpszCode[1] = ((((LANGINFO *)pSPATR)-&gt;wLang &gt;&gt; 8) &amp; 0xFF) | 0x20 ; // get byte &amp; lower case <br>    lpszCode[2] = 0 ; <br>} <br> <br> <br>BOOL CSampleDVDPlay::GetSPLanguage(ULONG ulStream, BOOL bSPOn, LPTSTR lpszLang, int iMaxLang) <br>{ <br>    HRESULT hr = m_pDvdC-&gt;SubpictureStreamChange(ulStream, bSPOn) ; <br>    if (FAILED(hr)) <br>        return FALSE ;  // stream disabled? <br> <br>    DVD_SubpictureATR SPATR ; <br>    hr = m_pDvdI-&gt;GetCurrentSubpictureAttributes(&amp;SPATR) ; <br>    ASSERT(SUCCEEDED(hr)) ; <br>    TCHAR  achCode[3] ; <br>    GetSPLangCode(&amp;SPATR, achCode) ; <br>    BOOL bRes = m_Langs.GetLangString(achCode, lpszLang) ; <br>    ASSERT((bRes &amp;&amp; 0 != lstrcmp(TEXT("Unknown"), lpszLang)) ||  <br>           (0 == lstrcmp(TEXT("Unknown"), lpszLang))) ; <br>    return TRUE ;  // success <br>} <br> <br> <br>BOOL CSampleDVDPlay::SetAudioState(LONG lAudioStream) <br>{ <br>    HRESULT hr = m_pDvdC-&gt;AudioStreamChange(lAudioStream) ; <br>    if (SUCCEEDED(hr)) <br>    { <br>        m_ulAudioStream = lAudioStream ;  // store new audio stream id <br>        return TRUE ;  // success <br>    } <br> <br>    DbgLog((LOG_ERROR, 0,  <br>        TEXT("WARNING: IDvdControl::AudioStreamChange(%ld) failed (Error 0x%lx)"),  <br>        lAudioStream, hr)) ; <br>    return FALSE ;  // failure <br>} <br> <br> <br>int CSampleDVDPlay::MakeAudioStreamList(HWND hDlg, int iListID) <br>{ <br>    if (NULL == m_pDvdI) <br>    { <br>        DbgLog((LOG_ERROR, 0, TEXT("WARNING: IDvdInfo interface not available"))) ; <br>        return FALSE ; <br>    } <br> <br>    ULONG  ulStream ; <br>    LCID   lcid ; <br>    TCHAR  achLang[MAX_PATH] ; <br>    int    iRes ; <br>    ULONG  ulNumLang ; <br>    ULONG  ulCurrLang ; <br> <br>    // First clear the list box of all SP stream names <br>    SendDlgItemMessage(hDlg, iListID, CB_RESETCONTENT, (WPARAM) 0, (LPARAM) 0) ; <br> <br>    // Now add all available audio streams <br>    HRESULT hr = m_pDvdI-&gt;GetCurrentAudio(&amp;ulNumLang, &amp;ulCurrLang) ; <br>    if (FAILED(hr)) <br>    { <br>        MessageBox(m_hWnd, TEXT("Not ready to find language information"), TEXT("Warning"), MB_OK) ; <br>        return 0 ; <br>    } <br> <br>    for (ulStream = 0 ; ulStream &lt; ulNumLang ; ulStream++) <br>    { <br>        if (SUCCEEDED(m_pDvdI-&gt;GetAudioLanguage(ulStream, &amp;lcid))  &amp;&amp; <br>            0 != lcid) <br>        { <br>            iRes = GetLocaleInfo(lcid, LOCALE_SENGLANGUAGE, achLang, MAX_PATH) ; <br>            if (0 == iRes) <br>            { <br>                if (! GetAudioLanguage(ulStream, achLang, MAX_PATH) )  // Pre-Win98 <br>                    continue ; <br>            } <br>        } <br>        else <br>        { <br>            if (! GetAudioLanguage(ulStream, achLang, MAX_PATH) )  // Pre-Win98 <br>                continue ; <br>        } <br> <br>        // Add to the listbox now <br>        iRes = SendDlgItemMessage(hDlg, iListID, CB_ADDSTRING, (WPARAM) 0, (LPARAM)(LPVOID) achLang) ; <br>        if (CB_ERR == iRes || CB_ERRSPACE == iRes) <br>        { <br>            DbgLog((LOG_ERROR, 1, TEXT("Error (%d) adding audio language '%s' to list"), iRes, achLang)) ; <br>        } <br>    } <br> <br>    // <br>    // GetAudioLanguage() method might have changed the currently set audio stream. <br>    // Let's set it back to what it was before. <br>    // <br>    hr = m_pDvdC-&gt;AudioStreamChange(m_ulAudioStream) ; <br>    ASSERT(SUCCEEDED(hr)) ; <br> <br>    if (ulStream &gt; 0) <br>    { <br>        iRes = SendDlgItemMessage(hDlg, iListID, CB_SETCURSEL,  <br>                    (WPARAM) m_ulAudioStream, (LPARAM) 0) ; <br>        if (CB_ERR == iRes) <br>            DbgLog((LOG_ERROR, 1,  <br>                TEXT("WARNING: Couldn't set %ld as selected audio stream id (Error %d)"), <br>                m_ulAudioStream, iRes)) ; <br>    } <br> <br>    return ulStream ; <br>} <br> <br> <br>void CSampleDVDPlay::GetAudioLangCode(DVD_AudioATR *pAudATR, LPTSTR lpszCode) <br>{ <br>    lpszCode[0] = (((LANGINFO *)pAudATR)-&gt;wLang &amp; 0xFF) | 0x20 ;        // get byte &amp; lower case <br>    lpszCode[1] = ((((LANGINFO *)pAudATR)-&gt;wLang &gt;&gt; 8) &amp; 0xFF) | 0x20 ; // get byte &amp; lower case <br>    lpszCode[2] = 0 ; <br>} <br> <br> <br>BOOL CSampleDVDPlay::GetAudioLanguage(ULONG ulStream, LPTSTR lpszLang, int iMaxLang) <br>{ <br>    HRESULT hr = m_pDvdC-&gt;AudioStreamChange(ulStream) ; <br>    if (FAILED(hr)) <br>        return FALSE ;  // stream disabled? <br> <br>    DVD_AudioATR AudATR ; <br>    hr = m_pDvdI-&gt;GetCurrentAudioAttributes(&amp;AudATR) ; <br>    ASSERT(SUCCEEDED(hr)) ; <br>    TCHAR  achCode[3] ; <br>    GetAudioLangCode(&amp;AudATR, achCode) ; <br>    BOOL bRes = m_Langs.GetLangString(achCode, lpszLang) ; <br>    ASSERT((bRes &amp;&amp; 0 != lstrcmp(TEXT("Unknown"), lpszLang)) ||  <br>           (0 == lstrcmp(TEXT("Unknown"), lpszLang))) ; <br>    return TRUE ;  // success <br>} <br> <br> <br>int CSampleDVDPlay::MakeParentalLevelList(HWND hDlg, int iListID) <br>{ <br>    if (NULL == m_pDvdI) <br>    { <br>        DbgLog((LOG_ERROR, 0, TEXT("WARNING: IDvdInfo interface not available"))) ; <br>        return FALSE ; <br>    } <br> <br>    int      iLevels = m_ViewLevels.GetCount() ; <br>    int      iRes ; <br> <br>    // First clear the list box of all SP stream names <br>    SendDlgItemMessage(hDlg, iListID, LB_RESETCONTENT, (WPARAM) 0, (LPARAM) 0) ; <br> <br>    // Now add all other available SP streams <br>    for (int i = 0 ; i &lt; iLevels ; i++) <br>    { <br>        // Add to the listbox now <br>        iRes = SendDlgItemMessage(hDlg, iListID, LB_ADDSTRING, (WPARAM) 0,  <br>                                  (LPARAM)(LPVOID) m_ViewLevels.GetName(i)) ; <br>        if (LB_ERR == iRes || LB_ERRSPACE == iRes) <br>        { <br>            DbgLog((LOG_ERROR, 1,  <br>                TEXT("Error (%d) adding parental level '%s'(%d) to list"),  <br>                iRes, m_ViewLevels.GetName(i), i)) ; <br>        } <br>    } <br> <br>    if (iLevels &gt; 0) <br>    { <br>        iRes = SendDlgItemMessage(hDlg, iListID, LB_SETCURSEL,  <br>                        (WPARAM) m_ulParentCtrlLevel, (LPARAM) 0) ; <br>    if (LB_ERR == iRes) <br>    { <br>            DbgLog((LOG_ERROR, 1,  <br>                TEXT("WARNING: Couldn't set %ld as selected parent level (Error %d)"), <br>                m_ulParentCtrlLevel, iRes)) ; <br>    } <br>    } <br>    return iLevels ; <br>} <br> <br> <br>ULONG CSampleDVDPlay::SetParentalLevel(LONG lLevel) <br>{ <br>m_ulParentCtrlLevel = lLevel ; <br>    return m_ulParentCtrlLevel ; <br>} <br> <br> <br>BOOL CSampleDVDPlay::IsLangKnown(void) <br>{  <br>    if (NULL == m_pDvdI)       // most probably graph hasn't been built yet <br>        return FALSE ; <br> <br>    // Otherwise see if we can find out our current SP stream id; that indicates it <br>    ULONG   ulNumLang ; <br>    ULONG   ulSPLang ; <br>    BOOL    bSPOn ; <br>    HRESULT hr = m_pDvdI-&gt;GetCurrentSubpicture(&amp;ulNumLang, &amp;ulSPLang, &amp;bSPOn) ;  <br>    m_bLangKnown = SUCCEEDED(hr) ; <br> <br>    return m_bLangKnown ; <br>} <br> <br> <br>BOOL CSampleDVDPlay::ShowMenu(void) <br>{ <br>    if (NULL == m_pDvdC || NULL == m_pDvdI) <br>    { <br>        MessageBox(m_hWnd, TEXT("DVD-Video playback graph hasn't been built yet"), TEXT("Error"), MB_OK) ; <br>        return FALSE ; <br>    } <br> <br>    DVD_DOMAIN   Domain ; <br>    HRESULT hr = m_pDvdI-&gt;GetCurrentDomain(&amp;Domain) ; <br>    if (FAILED(hr)) <br>    { <br>        DbgLog((LOG_TRACE, 0, TEXT("IDvdInfo::GetCurentDomain() failed (0x%lx)"), hr)) ; <br>        return FALSE ; <br>    } <br> <br>    // <br>    // Decide what the menu state flag should be <br>    // <br>    switch (Domain) <br>    { <br>        case DVD_DOMAIN_FirstPlay:          // lEvent = 1 <br>        case DVD_DOMAIN_Stop:               // lEvent = 5 <br>            break ; <br> <br>        case DVD_DOMAIN_VideoManagerMenu:   // lEvent = 2 <br>        case DVD_DOMAIN_VideoTitleSetMenu:  // lEvent = 3 <br>            m_bMenuOn = TRUE ; <br>            break ; <br> <br>        case DVD_DOMAIN_Title:              // lEvent = 4 <br>            m_bMenuOn = FALSE ; <br>            break ; <br>    } <br> <br>    if (m_bMenuOn)  // if ON now, turn it OFF <br>    { <br>        m_pDvdC-&gt;Resume() ; <br>        m_bMenuOn = FALSE ; <br>        // Inform the app to update the menu option to show "Menu" again <br>        PostMessage(m_hWnd, WM_COMMAND, IDM_USER_MENUSTATUS, (LPARAM) 0) ; <br>        return m_bMenuOn ; <br>    } <br> <br>    // Turn root menu ON <br>    hr = m_pDvdC-&gt;MenuCall(DVD_MENU_Root) ; <br>    if (SUCCEEDED(hr)) <br>    { <br>        m_bMenuOn = TRUE ; <br>        // Inform the app to update the menu option to show "Resume" now <br>        PostMessage(m_hWnd, WM_COMMAND, IDM_USER_MENUSTATUS, (LPARAM) 1) ; <br>        return m_bMenuOn ; <br>    } <br> <br>    return m_bMenuOn ; <br>} <br> <br> <br>BOOL CSampleDVDPlay::ClosedCaption(void) <br>{ <br>    IAMLine21Decoder  *pL21Dec ; <br>    m_pDvdGB-&gt;GetDvdInterface(IID_IAMLine21Decoder, (LPVOID *)&amp;pL21Dec) ; <br>    if (NULL == pL21Dec)  // we should have not come here at all!! <br>        MessageBox(m_hWnd, TEXT("Line21 Decoder not found.  Can't show Closed Caption"), TEXT("Error"), MB_OK) ; <br>    else <br>    { <br>        m_bCCOn = !m_bCCOn ; <br>        pL21Dec-&gt;SetServiceState(m_bCCOn ?  <br>                        AM_L21_CCSTATE_On : AM_L21_CCSTATE_Off) ; <br>        pL21Dec-&gt;Release() ; <br>    } <br> <br>    return m_bCCOn ; <br>} <br> <br> <br>BOOL CSampleDVDPlay::ShowFullScreen(void) <br>{ <br>    if (NULL == m_pVW) <br>        MessageBox(m_hWnd, TEXT("Video interface not found.  Can't show in full screen mode."), TEXT("Error"), MB_OK) ; <br>    else <br>    { <br>        if (!m_bFullScrnOn)     <br>            StartFullScreen() ; <br>        else <br>            StopFullScreen() ; <br>    } <br> <br>    return m_bFullScrnOn ; <br>} <br> <br> <br>void CSampleDVDPlay::SetRenderFlag(DWORD dwFlag) <br>{ <br>    if (AM_DVD_NOVPE == dwFlag)  // VPE related flag <br>        m_dwRenderFlag ^= dwFlag ; <br>    else                         // HW/SW Dec related flag <br>        m_dwRenderFlag = (dwFlag | (AM_DVD_NOVPE &amp; m_dwRenderFlag)) ; <br>} <br> <br> <br>DWORD CSampleDVDPlay::GetStatusText(AM_DVD_RENDERSTATUS *pStatus,  <br>    LPTSTR lpszStatusText, <br>    DWORD dwMaxText) <br>{ <br>    TCHAR    achBuffer[1000] ; <br> <br>    if (IsBadWritePtr(lpszStatusText, sizeof(*lpszStatusText) * dwMaxText)) <br>    { <br>        DbgLog((LOG_ERROR, 0, TEXT("GetStatusText(): bad text buffer param"))) ; <br>        return 0 ; <br>    } <br> <br>    int    iChars ; <br>    LPTSTR lpszBuff = achBuffer ; <br>    ZeroMemory(achBuffer, sizeof(TCHAR) * 1000) ; <br>    if (pStatus-&gt;iNumStreamsFailed &gt; 0) <br>    { <br>        iChars = wsprintf(lpszBuff,  <br>                        TEXT("* %d out of %d DVD-Video streams failed to render properly\n"),  <br>                        pStatus-&gt;iNumStreamsFailed, pStatus-&gt;iNumStreams) ; <br>        lpszBuff += iChars ; <br> <br>        if (pStatus-&gt;dwFailedStreamsFlag &amp; AM_DVD_STREAM_VIDEO) <br>        { <br>            iChars = wsprintf(lpszBuff, TEXT("    - video stream\n")) ; <br>            lpszBuff += iChars ; <br>        } <br>        if (pStatus-&gt;dwFailedStreamsFlag &amp; AM_DVD_STREAM_AUDIO) <br>        { <br>            iChars = wsprintf(lpszBuff, TEXT("    - audio stream\n")) ; <br>            lpszBuff += iChars ; <br>        } <br>        if (pStatus-&gt;dwFailedStreamsFlag &amp; AM_DVD_STREAM_SUBPIC) <br>        { <br>            iChars = wsprintf(lpszBuff, TEXT("    - subpicture stream\n")) ; <br>            lpszBuff += iChars ; <br>        } <br>    } <br> <br>    if (FAILED(pStatus-&gt;hrVPEStatus)) <br>    { <br>        lstrcat(lpszBuff, "* ") ; <br>        lpszBuff += lstrlen("* ") ; <br>        iChars = AMGetErrorText(pStatus-&gt;hrVPEStatus, lpszBuff, 200) ; <br>        lpszBuff += iChars ; <br>        lstrcat(lpszBuff, "\n") ; <br>        lpszBuff += lstrlen("\n") ; <br>    } <br> <br>    if (pStatus-&gt;bDvdVolInvalid) <br>    { <br>        iChars = wsprintf(lpszBuff, TEXT("* Specified DVD-Video volume was invalid\n")) ; <br>        lpszBuff += iChars ; <br>    } <br>    else if (pStatus-&gt;bDvdVolUnknown) <br>    { <br>        iChars = wsprintf(lpszBuff, TEXT("* No valid DVD-Video volume could be located\n")) ; <br>        lpszBuff += iChars ; <br>    } <br> <br>    if (pStatus-&gt;bNoLine21In) <br>    { <br>        iChars = wsprintf(lpszBuff, TEXT("* The video decoder doesn't produce closed caption data\n")) ; <br>        lpszBuff += iChars ; <br>    } <br>    if (pStatus-&gt;bNoLine21Out) <br>    { <br>        iChars = wsprintf(lpszBuff, TEXT("* Decoded closed caption data not rendered properly\n")) ; <br>        lpszBuff += iChars ; <br>    } <br>     <br>    DWORD dwLength = (lpszBuff - achBuffer) * sizeof(*lpszBuff) ; <br>    dwLength = min(dwLength, dwMaxText) ; <br>    lstrcpyn(lpszStatusText, achBuffer, dwLength) ; <br> <br>    return dwLength ; <br>} <br> <br> <br>BOOL CSampleDVDPlay::FileSelect(void) <br>{ <br>    OPENFILENAME  ofn ; <br>    TCHAR         achFileName[MAX_PATH] ; <br> <br>    // Init the filename buffer with either a filename or *.ifo <br>    if (lstrlen(m_achFileName) &gt; 0) <br>lstrcpy(achFileName, m_achFileName) ; <br>    else <br>lstrcpy(achFileName, TEXT("*.ifo")) ; <br> <br>    ZeroMemory(&amp;ofn, sizeof(OPENFILENAME)) ; <br>    ofn.lStructSize = sizeof(OPENFILENAME) ; <br>    ofn.hwndOwner = m_hWnd ; <br>    ofn.lpstrFilter = TEXT("IFO Files\0*.ifo\0All Files\0*.*\0") ; <br>    ofn.nFilterIndex = 1 ; <br>    ofn.lpstrFile = achFileName ; <br>    ofn.nMaxFile = sizeof(achFileName) ; <br>    ofn.lpstrFileTitle = NULL ; <br>    ofn.lpstrTitle = TEXT("Select DVD-Video Volume") ; <br>    ofn.nMaxFileTitle = 0 ; <br>    ofn.lpstrInitialDir = NULL ; <br>    ofn.Flags = OFN_PATHMUSTEXIST | OFN_HIDEREADONLY ; <br> <br>    if (GetOpenFileName(&amp;ofn)) // user specified a file <br>    { <br>        if (m_pDvdC)  // Graph has already been built; set it now <br>        { <br>            Stop() ;  // first ask player to stop the playback. <br> <br>            // Convert TCHAR filename to WCHAR for COM <br>            WCHAR   achwFileName[MAX_PATH] ; <br>#ifdef UNICODE <br>            lstrcpy(achwFileName, achFileName) ; <br>#else <br>            MultiByteToWideChar(CP_ACP, 0, achFileName, -1, achwFileName, MAX_PATH) ; <br>#endif // UNICODE             <br>            HRESULT hr = m_pDvdC-&gt;SetRoot(achwFileName) ; <br>            if (SUCCEEDED(hr))  // if the new file name is valid DVD-video volume <br>            { <br>                lstrcpy(m_achFileName, achFileName) ;  // store it <br>            } <br>            else <br>                DbgLog((LOG_ERROR, 2, TEXT("WARNING: SetRoot(%s) failed (Error 0x%lx)"), achFileName, hr)) ; <br>        } <br>        else   // graph not yet built; store name and use in graph building <br>        { <br>            lstrcpy(m_achFileName, achFileName) ; <br>        } <br> <br>        return TRUE ;  // DVD-Video volume changed <br>    } <br>     <br>    // Either failed or user hit Esc. <br>    DWORD dw = CommDlgExtendedError() ; <br>    DbgLog((LOG_TRACE, 3, TEXT("GetOpenFileName() cancelled/failed with error %lu"), dw)) ; <br>    return FALSE ; // DVD-Video volume not changed <br>} <br> <br> <br>LPTSTR CSampleDVDPlay::GetStringRes(int id) <br>{ <br>    LoadString(GetModuleHandle(NULL), id, m_achBuffer, 100) ; <br>    return m_achBuffer ; <br>} <br> <br> <br>HRESULT CSampleDVDPlay::OnDVDPlayEvent(WPARAM wParam, LPARAM lParam) <br>{ <br>    ASSERT(lParam == (LONG)(LPVOID) m_pME) ; <br> <br>    LONG     lEvent ; <br>    LONG     lParam1, lParam2 ; <br> <br>    // <br>    //  Because the message mode for IMediaEvent may not be set before <br>    //  we get the first event it's important to read all the events <br>    //  pending when we get a window message to say there are events pending. <br>    //  GetEvent() returns E_ABORT when no more event is left. <br>    // <br>    while (SUCCEEDED(m_pME-&gt;GetEvent(&amp;lEvent, &amp;lParam1, &amp;lParam2, 0))) // no wait <br>    { <br>        switch (lEvent) <br>        { <br>            // <br>            // First the DVD related events <br>            // <br>            case EC_DVD_STILL_ON: <br>        if (1 == lParam1 &amp;&amp; 0xFFFFFFFF == lParam2) <br>                { <br>                    wsprintf(m_achStillText, TEXT("Still On")) ; <br>                    InvalidateRect(m_hWnd, NULL, TRUE) ; <br>                } <br>                break ; <br> <br>            case EC_DVD_STILL_OFF: <br>                wsprintf(m_achStillText, TEXT("Still Off")) ; <br>                InvalidateRect(m_hWnd, NULL, TRUE) ; <br>                break ; <br> <br>            case EC_DVD_DOMAIN_CHANGE: <br>                switch (lParam1) <br>                { <br>                    case DVD_DOMAIN_FirstPlay:  // = 1 <br>                    case DVD_DOMAIN_Stop:       // = 5 <br>                    break ; <br> <br>                    case DVD_DOMAIN_VideoManagerMenu:  // = 2 <br>                    case DVD_DOMAIN_VideoTitleSetMenu: // = 3 <br>                        // Inform the app to update the menu option to show "Resume" now <br>                        PostMessage(m_hWnd, WM_COMMAND, IDM_USER_MENUSTATUS, (LPARAM) 1) ; <br>                        m_bMenuOn = TRUE ;  // now menu is "On" <br>                        break ; <br> <br>                    case DVD_DOMAIN_Title:      // = 4 <br>                        // Inform the app to update the menu option to show "Menu" again <br>                        PostMessage(m_hWnd, WM_COMMAND, IDM_USER_MENUSTATUS, (LPARAM) 0) ; <br>                        m_bMenuOn = FALSE ; // now menu is "Off" <br>                        break ; <br> <br>                    default: // hmmmm... <br>                        break ; <br>                } <br>                break ; <br> <br>            case EC_DVD_BUTTON_CHANGE: <br>                DbgLog((LOG_TRACE, 5, TEXT("DVD Event: Button Changed to %d out of %d"), <br>                        lParam2, lParam1)); <br>                break; <br>     <br>            case EC_DVD_TITLE_CHANGE: <br>                wsprintf(m_achTitleText, TEXT("Title %ld"), lParam1) ; <br>                InvalidateRect(m_hWnd, NULL, TRUE) ; <br>                break ; <br> <br>            case EC_DVD_CHAPTER_START: <br>                wsprintf(m_achChapterText, TEXT("Chapter %ld"), lParam1) ; <br>                InvalidateRect(m_hWnd, NULL, TRUE) ; <br>                break ; <br> <br>            case EC_DVD_CURRENT_TIME: <br>            { <br>                DVD_TIMECODE *pTime = (DVD_TIMECODE *) &amp;lParam1 ; <br>                wsprintf(m_achTimeText, TEXT("Current Time is  %d%d:%d%d:%d%d"), <br>                        pTime-&gt;Hours10, pTime-&gt;Hours1, <br>                        pTime-&gt;Minutes10, pTime-&gt;Minutes1, <br>                        pTime-&gt;Seconds10, pTime-&gt;Seconds1) ; <br>                InvalidateRect(m_hWnd, NULL, TRUE) ; <br>            } <br>            break ; <br> <br>            // <br>            // Then the general DirectShow related events <br>            // <br>            case EC_COMPLETE: <br>                DbgLog((LOG_TRACE, 5, TEXT("DVD Event: Playback complete"))) ; <br>                m_pMC-&gt;Stop() ;  // DShow doesn't stop on end; we should do that <br>                // fall through now... <br> <br>            case EC_USERABORT: <br>            case EC_ERRORABORT: <br>            case EC_FULLSCREEN_LOST: <br>                DbgLog((LOG_TRACE, 5, TEXT("DVD Event: 0x%lx"), lEvent)) ; <br>                StopFullScreen() ;  // we must get out of fullscreen mode now <br>                break ; <br> <br>            default: <br>                DbgLog((LOG_TRACE, 5, TEXT("Unknown DVD Event: 0x%lx"), lEvent)) ; <br>                break ; <br>        } <br> <br>        // <br>        // Remember to free the event params <br>        // <br>        m_pME-&gt;FreeEventParams(lEvent, lParam1, lParam2) ; <br> <br>    }  // end of while (GetEvent()) loop <br> <br>    return 0 ; <br>} <br> <br> <br>void CSampleDVDPlay::DrawStatus(HDC hDC) <br>{ <br>    TextOut(hDC,  10, 10, m_achStillText,   lstrlen(m_achStillText)) ; <br>    TextOut(hDC,  10, 25, m_achTitleText,   lstrlen(m_achTitleText)) ; <br>    TextOut(hDC, 110, 25, m_achChapterText, lstrlen(m_achChapterText)) ; <br>    TextOut(hDC,  10, 40, m_achTimeText,    lstrlen(m_achTimeText)) ; <br>} <br> <br> <br>void CSampleDVDPlay::CursorMove(CURSOR_DIR Dir) <br>{ <br>    if (! m_bMenuOn )  // if menu is not ON, we can't select!! <br>        return ; <br> <br>    switch (Dir) <br>    { <br>        case Cursor_Up: <br>            m_pDvdC-&gt;UpperButtonSelect() ; <br>            break ; <br> <br>        case Cursor_Down: <br>            m_pDvdC-&gt;LowerButtonSelect() ; <br>            break ; <br> <br>        case Cursor_Left: <br>            m_pDvdC-&gt;LeftButtonSelect() ; <br>            break ; <br> <br>        case Cursor_Right: <br>            m_pDvdC-&gt;RightButtonSelect() ; <br>            break ; <br> <br>        default:  // huh!!! <br>            break ; <br>    } <br>} <br> <br> <br>void CSampleDVDPlay::CursorSelect(void) <br>{ <br>    if (m_bMenuOn) <br>        m_pDvdC-&gt;ButtonActivate() ; <br>} <br> <br> <br>BOOL CSampleDVDPlay::StartFullScreen() <br>{ <br>    DbgLog((LOG_TRACE, 5, TEXT("CSampleDVDPlay::StartFullScreen()"))) ; <br> <br>    if (NULL == m_pVW) <br>    { <br>        DbgLog((LOG_ERROR, 0,  <br>                TEXT("CSampleDVDPlay::StartFullScreen() -- no IVideoWindow pointer yet"))) ; <br>        return m_bFullScrnOn ; <br>    } <br> <br>    HRESULT   hr ; <br>    hr = m_pVW-&gt;put_MessageDrain((OAHWND) m_hWnd) ; <br>    if (FAILED(hr)) <br>    { <br>        DbgLog((LOG_ERROR, 0,  <br>                TEXT("CSampleDVDPlay::StartFullScreen() -- IVideoWindow::put_MessageDrain() failed (0x%lx)"), <br>                hr)) ; <br>        return m_bFullScrnOn ; <br>    } <br>    hr = m_pVW-&gt;put_FullScreenMode(OATRUE) ; <br>    if (FAILED(hr)) <br>    { <br>        DbgLog((LOG_ERROR, 0,  <br>            TEXT("CSampleDVDPlay::StartFullScreen() -- IVideoWindow::put_FullScreenMode() failed (0x%lx)"), <br>            hr)) ; <br>        return m_bFullScrnOn ; <br>    } <br> <br>    m_bFullScrnOn = TRUE ;  // we are really in full screen mode <br> <br>    return m_bFullScrnOn ; <br>} <br> <br> <br>BOOL CSampleDVDPlay::StopFullScreen() <br>{ <br>    DbgLog((LOG_TRACE, 5, TEXT("CSampleDVDPlay::StopFullScreen()"))) ; <br> <br>    HRESULT   hr ; <br> <br>    if (NULL == m_pVW) <br>    { <br>        DbgLog((LOG_ERROR, 0,  <br>                TEXT("CSampleDVDPlay::StopFullScreen() -- no IVideoWindow pointer yet"))) ; <br>        return m_bFullScrnOn ; <br>    } <br> <br>    hr = m_pVW-&gt;put_FullScreenMode(OAFALSE) ; <br>    if (FAILED(hr)) <br>    { <br>        DbgLog((LOG_ERROR, 0,  <br>                TEXT("CSampleDVDPlay::StopFullScreen() -- IVideoWindow::put_FullScreenMode() failed (0x%lx)"), <br>                hr)) ; <br>        return m_bFullScrnOn ; <br>    } <br>    hr = m_pVW-&gt;put_MessageDrain((OAHWND) NULL) ; <br>    if (FAILED(hr)) <br>    { <br>        DbgLog((LOG_ERROR, 0,  <br>                TEXT("CSampleDVDPlay::StopFullScreen() -- IVideoWindow::put_MessageDrain() failed (0x%lx)"), <br>                hr)) ; <br>        return m_bFullScrnOn ; <br>    } <br> <br>    m_bFullScrnOn = FALSE ;  // we are no more in full screen mode <br> <br>    return m_bFullScrnOn ; <br>} <br> <br> <br>CViewLevels::CViewLevels() <br>{ <br>    m_iCount = 6 ; <br>    m_alpszNames[0] = TEXT(" G ") ;       m_aiValues[0] = 1 ; <br>    m_alpszNames[1] = TEXT(" PG ") ;      m_aiValues[1] = 3 ; <br>    m_alpszNames[2] = TEXT(" PG-13 ") ;   m_aiValues[2] = 4 ; <br>    m_alpszNames[3] = TEXT(" R ") ;       m_aiValues[3] = 6 ; <br>    m_alpszNames[4] = TEXT(" NC-17 ") ;   m_aiValues[4] = 7 ; <br>    m_alpszNames[5] = TEXT(" Adult ") ;   m_aiValues[5] = 8 ; <br>} <br> <br> <br>// <br>// Only 10 languages have been used here as a sample. The list can be extended to <br>// include any language listed in ISO 639. <br>// <br>CDVDLanguages::CDVDLanguages() <br>{ <br>    m_alpszCodes[0] = TEXT("de") ;    m_alpszLangNames[0] = TEXT("German") ; <br>    m_alpszCodes[1] = TEXT("en") ;    m_alpszLangNames[1] = TEXT("English") ; <br>    m_alpszCodes[2] = TEXT("es") ;    m_alpszLangNames[2] = TEXT("Spanish") ; <br>    m_alpszCodes[3] = TEXT("fr") ;    m_alpszLangNames[3] = TEXT("French") ; <br>    m_alpszCodes[4] = TEXT("ja") ;    m_alpszLangNames[4] = TEXT("Japanese") ; <br>    m_alpszCodes[5] = TEXT("ko") ;    m_alpszLangNames[5] = TEXT("Korean") ; <br>    m_alpszCodes[6] = TEXT("ni") ;    m_alpszLangNames[6] = TEXT("Dutch") ; <br>    m_alpszCodes[7] = TEXT("pt") ;    m_alpszLangNames[7] = TEXT("Portuguese") ; <br>    m_alpszCodes[8] = TEXT("sv") ;    m_alpszLangNames[8] = TEXT("Swedish") ; <br>    m_alpszCodes[9] = TEXT("zh") ;    m_alpszLangNames[9] = TEXT("Chinese") ; <br>} <br> <br>BOOL CDVDLanguages::GetLangString(LPTSTR lpszCode, LPTSTR lpszLang) <br>{ <br>    for (int i = 0 ; i &lt; 10 ; i++) <br>    { <br>        if (0 == lstrcmp(lpszCode, m_alpszCodes[i]))  // match!! <br>        { <br>            lstrcpy(lpszLang, m_alpszLangNames[i]) ; </code></pre>
<p>
</p>
<pre><code>return TRUE ;  // got a match <br>        } <br>    } <br>    lstrcpy(lpszLang, TEXT("Unknown")) ; <br>    return FALSE ;  // didn't get a match <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

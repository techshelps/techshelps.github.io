<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NULLNULL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2881"></a>NULLNULL.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br> <br>//     What This Sample Illustrates <br>// <br>// What is the minimum necessary in a filter. <br>// <br>//     Summary <br>// <br>// A filter which does nothing except pass the data through. <br>// <br>//     Demonstration instructions <br>// <br>// First build the sample and get it registered (see nullnull.reg) <br>// Start GRAPHEDT available in the ActiveMovie SDK tools. Drag and drop into <br>// the tool any WAV file or any MPEG, AVI or MOV file. <br>// A graph will be built to render the file.  From the Graph menu select <br>// Insert filters and insert NullNull.  (If it is not on the list then you <br>// failed to register it properly.  If it fails to load then you either <br>// didn't build it properly or the registration does not correctly point to <br>// the path where nullnull.ax is now found.) <br>// In the graph displayed, pick on a connection.  Disconnect it (click on <br>// the incoming arrow and then press the Delete key). <br>// Create a connection between the same two filters.  (Drag the mouse along <br>// the same path as the arrow follwed from tail to head). <br>// If the nullnull filter is not now included, try it with a different <br>// connection.  (Connections between source filters and parsers normally <br>// do not work, others normally do.  Why is another story). <br>// <br>// <br>//     Implementation <br>// <br>// Does everything possible with the base classes.  That which cannot be so <br>// done (e.g. creating this filter) is done here. <br>// The filter has one input pin, one output pin and does its transform <br>// in-place (i.e. without copying the data) on the push thread (i.e. it <br>// is called with a buffer, which it "transforms" and gives to the next <br>// filter downstream.  It is then blocked until that filter returns. <br>// It then returns to its own caller).  This filter in fact does the null <br>// transform it merely passes the data on unchanged. <br>// <br>// <br>//    Known problems ("features NOT illustrated by this sample"): <br>// <br>// Almost everything!  This is a truly minimal filter. <br>// <br>// <br>//      Files <br>// <br>// nullnull.cpp  The entire implementation <br>// nullnull.def  Lists exports and imports (part of build process) <br>// nullnull.rc   Contains some "boiler-plate" <br>// nullnull.reg  Allows REGEDIT to register this filter.  (Not strictly necessary). <br>// <br>//     Base classes used (refer to docs for diagram of what they inherit): <br>// <br>// CTransInPlaceFilter <br> <br> <br> <br>#include &lt;streams.h&gt;     // Active Movie (includes windows.h) <br>#include &lt;initguid.h&gt;    // declares DEFINE_GUID to declare an EXTERN_C const. <br> <br>// The CLSID used by the minimal, in-place, null filter <br>// DO NOT REUSE IT.  Run uuidgen.exe to create a new one. <br>// {08af6540-4f21-11cf-aacb-0020af0b99a3} <br>DEFINE_GUID(CLSID_NullNull, <br>0x08af6540, 0x4f21, 0x11cf, 0xaa, 0xcb, 0x00, 0x20, 0xaf, 0x0b, 0x99, 0xa3); <br> <br> <br>// setup data - allows the self-registration to work. <br> <br>const AMOVIESETUP_MEDIATYPE sudPinTypes = <br>{ &amp;MEDIATYPE_NULL        // clsMajorType <br>, &amp;MEDIASUBTYPE_NULL };  // clsMinorType <br> <br>const AMOVIESETUP_PIN psudPins[] = <br>{ { L"Input"            // strName <br>  , FALSE               // bRendered <br>  , FALSE               // bOutput <br>  , FALSE               // bZero <br>  , FALSE               // bMany <br>  , &amp;CLSID_NULL         // clsConnectsToFilter <br>  , L""                 // strConnectsToPin <br>  , 1                   // nTypes <br>  , &amp;sudPinTypes        // lpTypes <br>  } <br>, { L"Output"           // strName <br>  , FALSE               // bRendered <br>  , TRUE                // bOutput <br>  , FALSE               // bZero <br>  , FALSE               // bMany <br>  , &amp;CLSID_NULL         // clsConnectsToFilter <br>  , L""                 // strConnectsToPin <br>  , 1                   // nTypes <br>  , &amp;sudPinTypes        // lpTypes <br>  } <br>}; <br> <br> <br>const AMOVIESETUP_FILTER sudNullNull = <br>{ &amp;CLSID_NullNull                  // clsID <br>, L"Minimal Null"                 // strName <br>, MERIT_DO_NOT_USE                // dwMerit <br>, 2                               // nPins <br>, psudPins };                     // lpPin <br> <br>// CNullNull <br>// <br>class CNullNull <br>    : public CTransInPlaceFilter <br>{ <br> <br>public: <br> <br>    static CUnknown *WINAPI CreateInstance(LPUNKNOWN punk, HRESULT *phr); <br> <br>    DECLARE_IUNKNOWN; <br> <br>private: <br> <br>    // Constructor - just calls the base class constructor <br>    CNullNull(TCHAR *tszName, LPUNKNOWN punk, HRESULT *phr) <br>        : CTransInPlaceFilter (tszName, punk, CLSID_NullNull, phr) <br>    { } <br> <br>    // Overrides the PURE virtual Transform of CTransInPlaceFilter base class <br>    // This is where the "real work" is done by altering *pSample. <br>    // We do the Null transform by leaving it alone. <br>    HRESULT Transform(IMediaSample *pSample){ return NOERROR; } <br> <br>    // We accept any input type.  We'd return S_FALSE for any we didn't like. <br>    HRESULT CheckInputType(const CMediaType* mtIn) { return S_OK; } <br>}; <br> <br> <br> <br>// Needed for the CreateInstance mechanism <br>CFactoryTemplate g_Templates[]= <br>    {   { L"Minimal Null" <br>        , &amp;CLSID_NullNull <br>        , CNullNull::CreateInstance <br>        , NULL <br>        , &amp;sudNullNull } <br>    }; <br>int g_cTemplates = sizeof(g_Templates)/sizeof(g_Templates[0]); <br> <br> <br>// <br>// CreateInstance <br>// <br>// Provide the way for COM to create a CNullNull object <br>CUnknown * WINAPI CNullNull::CreateInstance(LPUNKNOWN punk, HRESULT *phr) { <br> <br>    CNullNull *pNewObject = new CNullNull(NAME("Minimal, in-place, null filter"), punk, phr ); <br>    if (pNewObject == NULL) { <br>        *phr = E_OUTOFMEMORY; <br>    } <br> <br>    return pNewObject; <br>} // CreateInstance <br> <br> <br>/******************************Public*Routine******************************\ <br>* exported entry points for registration and <br>* unregistration (in this case they only call <br>* through to default implmentations). <br>* <br>* <br>* <br>* History: <br>* <br>\**************************************************************************/ <br>STDAPI <br>DllRegisterServer() <br>{ <br>  return AMovieDllRegisterServer2( TRUE ); <br>} <br> <br>STDAPI <br>DllUnregisterServer() <br>{ <br>  return AMovieDllRegisterServer2( FALSE ); <br>} <br> <br>// Microsoft C Compiler will give hundreds of warnings about <br>// unused inline functions in header files.  Try to disable them. <br>#pragma warning( disable:4514) <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

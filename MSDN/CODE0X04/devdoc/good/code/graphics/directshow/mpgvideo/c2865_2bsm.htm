<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DECODER.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2866"></a>DECODER.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>/******************************Module*Header*******************************\ <br>* Module Name: Decoder.h <br>* <br>* <br>* <br>* <br>\**************************************************************************/ <br> <br>#ifndef _INC_DECODER_H <br>#define _INC_DECODER_H <br> <br> <br>// ------------------------------------------------------------------------- <br>// Forward declaration to resolve circular reference. <br>// ------------------------------------------------------------------------- <br>// <br>class CMpegVideoCodec; <br> <br>enum { <br>    SEQUENCE_HEADER_CODE = 0x000001B3, <br>    SEQUENCE_END_CODE    = 0x000001B7, <br>    GROUP_START_CODE     = 0x000001B8, <br>    PICTURE_START_CODE   = 0x00000100 <br>}; <br> <br>// ------------------------------------------------------------------------- <br>// Video decoder class <br>// <br>// This class encapsulates a low-level mpeg video decoder. <br>// ------------------------------------------------------------------------- <br>// <br> <br>// Decode control option <br>enum { <br>    DECODE_NULL = 0x0000L,  // Do not Decode any frame. Scan the stream <br>    DECODE_I    = 0x0001L,  // I frames only <br>    DECODE_IP   = 0x0003L,  // I and P frames <br>    DECODE_IPB  = 0x0007L,  // Decode all the frames <br>    DECODE_DIS  = 0x0040L   // No Decode, Convert only - force out last frame. <br>}; <br> <br>// Frame Types <br>enum { <br>    FTYPE_I     = 0x0001L, <br>    FTYPE_P     = 0x0002L, <br>    FTYPE_B     = 0x0003L <br>}; <br> <br>// Function Return Values <br>enum { <br>    DECODE_SUCCESS    = 0x0000L, <br>    DECODE_ERR_MEMORY = 0x0001L, <br>    DECODE_ERR_DATA   = 0x0002L, <br>    DECODE_ERR_PARAM  = 0x0004L, <br>    DECODE_ERR_QUARTZ = 0x0008L     // error from Quartz callback <br>}; <br> <br>struct VideoCtrl { <br>    // <br>    // Decoder Output Fields <br>    // <br>    DWORD   dwGopTimeStamp; // only valid after a GOP, -1 otherwise. <br>    DWORD   dwFrameType; <br>    LPBYTE  pFrameStartPos; <br>    DWORD   dwSkipFlag;     // 1 if the frame was skipped <br>    DWORD   dwTemporalReference; <br> <br> <br>    // <br>    // Output Frame Buffer <br>    // <br>    DWORD   dwOutputFormat; <br>    DWORD   dwOutputBuffNumber; <br>    LPBYTE  pFrameBuff; <br>    DWORD   dwOutStride; <br>    DWORD   dwOutOffset; <br>    DWORD   dwYStride; <br>    DWORD   dwYLines; <br> <br>    // <br>    // Frame decoder control <br>    // <br>    DWORD   dwCtrl; <br> <br>    // <br>    // Input buffer fields <br>    // <br>    LPBYTE  pCmprRead; <br>    LPBYTE  pCmprWrite; <br>}; <br> <br> <br>class CVideoDecoder <br>    : public CCritSec { <br> <br>private: <br>    // <br>    // Back pointer to the object that created us. <br>    // <br>    CMpegVideoCodec *m_pCodec; <br>    VideoCtrl       *m_pCtrl; <br> <br>    DWORD   NextStartCode(); <br>    DWORD   SkipFrame(); <br>    void    Discard32Bits(); <br> <br>public: <br>    CVideoDecoder(CMpegVideoCodec *pMpegCodec); <br> <br>    DWORD   ResetVideo(); <br>    DWORD   DecodeFrame(VideoCtrl *pCtrl); <br>}; <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

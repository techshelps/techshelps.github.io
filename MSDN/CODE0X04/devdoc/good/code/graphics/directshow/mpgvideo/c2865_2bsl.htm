<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DECODER.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2865"></a>DECODER.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>/******************************Module*Header*******************************\ <br>* Module Name: Decoder.cpp <br>* <br>* Implements a prototype Mpeg Video Software codec.  It just consume <br>* the passed in packets. <br>* <br>\**************************************************************************/ <br>#include "MpgVideo.h" <br> <br> <br> <br>/* ------------------------------------------------------------------------- <br>** CVideoDecoder <br>** ------------------------------------------------------------------------- <br>*/ <br> <br>/******************************Public*Routine******************************\ <br>* CVideoDecoder <br>* <br>* Constructor and destructor <br>* <br>\**************************************************************************/ <br>CVideoDecoder::CVideoDecoder(CMpegVideoCodec *pMpegCodec) <br>    : m_pCodec(pMpegCodec) {} <br> <br> <br> <br>/******************************Public*Routine******************************\ <br>* ResetVideo <br>* <br>* <br>* <br>\**************************************************************************/ <br>DWORD <br>CVideoDecoder::ResetVideo() <br>{ <br>    CAutoLock lck(this); <br>    return DECODE_SUCCESS; <br>} <br> <br> <br>/******************************Public*Routine******************************\ <br>* DecodeFrame <br>* <br>* <br>* <br>\**************************************************************************/ <br>DWORD <br>CVideoDecoder::DecodeFrame( <br>    VideoCtrl *pCtrl <br>    ) <br>{ <br>    CAutoLock   lck(this); <br>    BOOL        Done = FALSE; <br>    DWORD       rc = DECODE_SUCCESS; <br> <br> <br>    m_pCtrl = pCtrl; <br> <br>    if ((m_pCtrl-&gt;dwCtrl &amp; 0xffff) == DECODE_DIS) { <br> <br>        LPBYTE lpOutputBuffer = m_pCodec-&gt;GetDecodeBufferAndFormat(); <br> <br>        if (lpOutputBuffer == NULL) { <br>            rc = DECODE_ERR_QUARTZ; <br>        } <br>        return rc; <br>    } <br> <br>    m_pCtrl-&gt;dwSkipFlag = 1; <br>    while (!Done) { <br> <br>        DWORD sc = NextStartCode(); <br> <br>        switch (sc) { <br> <br>        case PICTURE_START_CODE: <br>            DbgLog((LOG_TRACE, 2, TEXT("PICTURE_START_CODE"))); <br>            m_pCtrl-&gt;pFrameStartPos = m_pCtrl-&gt;pCmprRead; <br>            rc = SkipFrame(); <br>            Done = TRUE; <br>            break; <br> <br>        case SEQUENCE_HEADER_CODE: <br>            DbgLog((LOG_TRACE, 2, TEXT("SEQUENCE_HEADER_CODE"))); <br>            Discard32Bits(); <br>            break; <br> <br>        case SEQUENCE_END_CODE: <br>            DbgLog((LOG_TRACE, 2, TEXT("SEQUENCE_END_CODE"))); <br>            Discard32Bits(); <br>            Done = TRUE; <br>            break; <br> <br>        case GROUP_START_CODE: <br>            DbgLog((LOG_TRACE, 2, TEXT("GROUP_START_CODE"))); <br>            Discard32Bits(); <br>            break; <br> <br>        case (DWORD)-1: <br>            // <br>            // We didn't find a valid start code. <br>            // <br>            rc = DECODE_ERR_DATA; <br>            Done = TRUE; <br>            break; <br> <br>        default: <br>            DbgLog((LOG_TRACE, 2, TEXT("Unexpected start code %#X"), sc)); <br>            Discard32Bits(); <br>            break; <br>        } <br>    } <br> <br> <br>    if (!m_pCtrl-&gt;dwSkipFlag) { <br> <br>        LPBYTE lpOutputBuffer = m_pCodec-&gt;GetDecodeBufferAndFormat(); <br> <br>        if (lpOutputBuffer == NULL) { <br>            rc = DECODE_ERR_QUARTZ; <br>        } <br>    } <br> <br>    return rc; <br>} <br> <br> <br>/*****************************Private*Routine******************************\ <br>* NextStartCode <br>* <br>* Returns the next start code of -1 if none found within the buffer limits. <br>* Advances pCmprRead to point to begining of the start code. <br>* <br>\**************************************************************************/ <br>DWORD <br>CVideoDecoder::NextStartCode() <br>{ <br>    LPBYTE  lpCurr = m_pCtrl-&gt;pCmprRead; <br>    LPBYTE  lpEnd = m_pCtrl-&gt;pCmprWrite; <br>    int     sm = 0; <br>    DWORD   StartCode = 0x00000100L; <br> <br>    while ((lpCurr &lt; lpEnd) &amp;&amp; sm &lt; 3) { <br> <br>        switch (sm) { <br>        case 0: <br>            lpCurr = (LPBYTE)memchr(lpCurr, 0, lpEnd - lpCurr); <br>            if (lpCurr != NULL) lpCurr++, sm = 1; <br>            else lpCurr = lpEnd; <br>            break; <br> <br>        case 1: <br>            if (*lpCurr++ == 0) sm = 2; <br>            else sm = 0; <br>            break; <br> <br>        case 2: <br>            if (*lpCurr == 1) sm = 3; <br>            else if (*lpCurr == 0) sm = 2; <br>            else sm = 0; <br>            lpCurr++; <br>            break; <br>        } <br>    } <br> <br>    // <br>    // When we get here we have either run out of buffer or found the first <br>    // 3 bytes of a valid start code. <br>    // <br>    // If we have the first three bytes of the start code.  The next <br>    // byte completes the start code. <br>    // <br>    // Don't forget to put back the start code bytes that we have just <br>    // read otherwise they would be lost forever. <br>    // <br>    if (lpCurr &gt;= lpEnd) { <br>        StartCode = (DWORD)-1; <br>    } <br>    else { <br>        StartCode += *lpCurr; <br>    } <br>    lpCurr -= sm; <br> <br>    m_pCtrl-&gt;pCmprRead = lpCurr; <br>    return StartCode; <br>} <br> <br> <br> <br>/*****************************Private*Routine******************************\ <br>* Discard32Bits <br>* <br>* Throw away the next 32 bits <br>* <br>\**************************************************************************/ <br>void <br>CVideoDecoder::Discard32Bits() <br>{ <br>    m_pCtrl-&gt;pCmprRead += 4; <br>} <br> <br> <br>/*****************************Private*Routine******************************\ <br>* SkipFrame <br>* <br>* <br>* <br>\**************************************************************************/ <br>DWORD <br>CVideoDecoder::SkipFrame() <br>{ <br>    DWORD   dwX; <br> <br>    // <br>    // If there isn't enough room for the information required then <br>    // then return 0L <br>    // <br>    if (m_pCtrl-&gt;pCmprRead &gt; (m_pCtrl-&gt;pCmprWrite - 8)) { <br>        return DECODE_ERR_DATA; <br>    } <br> <br>    Discard32Bits();    // Eat the picyure start code <br> <br>    dwX = ByteSwap(*(UNALIGNED DWORD *)m_pCtrl-&gt;pCmprRead); <br>    m_pCtrl-&gt;pCmprRead += 4; <br> <br>    m_pCtrl-&gt;dwTemporalReference  = (dwX &amp; 0xFFC00000) &gt;&gt; 22; <br>    m_pCtrl-&gt;dwFrameType = (dwX &amp; 0x00380000) &gt;&gt; 19; <br> <br>    switch (m_pCtrl-&gt;dwCtrl &amp; 0xffff) { <br>    case DECODE_NULL: <br>        m_pCtrl-&gt;dwSkipFlag = 1; <br>        break; <br> <br>    case DECODE_I: <br>        m_pCtrl-&gt;dwSkipFlag = (m_pCtrl-&gt;dwFrameType != FTYPE_I); <br>        break; <br> <br>    case DECODE_IP: <br>        m_pCtrl-&gt;dwSkipFlag = (m_pCtrl-&gt;dwFrameType == FTYPE_B); <br>        break; <br> <br>    case DECODE_IPB: <br>        m_pCtrl-&gt;dwSkipFlag = 0; <br>        break; <br>    } <br> <br>    for (; ; ) { <br> <br>        dwX = NextStartCode(); <br> <br>        if (dwX == (DWORD)-1) { <br>            return DECODE_ERR_DATA; <br>        } <br>        else { <br> <br>            BYTE Code = (BYTE)(dwX &amp; 0xFF); <br> <br>            if (Code == 0x00 || Code &gt; 0xAF) { <br>                return DECODE_SUCCESS; <br>            } <br>            else { <br>                Discard32Bits(); <br>            } <br>        } <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DECODER.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2847"></a>DECODER.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>/******************************Module*Header*******************************\ <br>* Module Name: Decoder.cpp <br>* <br>* Implements a prototype Mpeg Audio Software codec.  It just consumes <br>* the passed in audio frames. <br>* <br>* <br>\**************************************************************************/ <br>#include "MpgAudio.h" <br> <br> <br> <br>/* ------------------------------------------------------------------------- <br>** CAudioDecoder <br>** ------------------------------------------------------------------------- <br>*/ <br> <br>/******************************Public*Routine******************************\ <br>* CAudioDecoder <br>* <br>* Constructor and destructor <br>* <br>* <br>\**************************************************************************/ <br>CAudioDecoder::CAudioDecoder(CMpegAudioCodec *pMpegCodec) <br>    : m_pCodec(pMpegCodec) {} <br> <br> <br> <br>/******************************Public*Routine******************************\ <br>* ResetAudio <br>* <br>* <br>\**************************************************************************/ <br>DWORD <br>CAudioDecoder::ResetAudio() <br>{ <br>    CAutoLock lck(this); <br>    return DECODE_SUCCESS; <br>} <br> <br> <br>/******************************Public*Routine******************************\ <br>* DecodeFrame <br>* <br>* <br>\**************************************************************************/ <br>DWORD <br>CAudioDecoder::DecodeAudioFrame( <br>    AudioCtrl *pCtrl <br>    ) <br>{ <br>    CAutoLock   lck(this); <br>    DWORD       rc = DECODE_SUCCESS; <br> <br>    m_pCtrl = pCtrl; <br> <br> <br>    for (DWORD i = 0; i &lt; m_pCtrl-&gt;dwNumFrames; i++) { <br> <br>        // Skip the sync word <br>        m_pCtrl-&gt;pCmprRead += 2; <br> <br>        // skip the rest of the frame <br>        if (!SkipFrame()) { <br>            m_pCtrl-&gt;dwOutBuffUsed = 0L; <br>            return DECODE_ERR_DATA; <br>        } <br>    } <br> <br>    ZeroMemory(m_pCtrl-&gt;pOutBuffer, m_pCtrl-&gt;dwOutBuffSize); <br>    m_pCtrl-&gt;dwOutBuffUsed = m_pCtrl-&gt;dwOutBuffSize; <br> <br>    return rc; <br>} <br> <br> <br>/*****************************Private*Routine******************************\ <br>* SkipFrame <br>* <br>* <br>\**************************************************************************/ <br>BOOL <br>CAudioDecoder::SkipFrame() <br>{ <br>    LPBYTE  lpCurr = m_pCtrl-&gt;pCmprRead; <br>    LPBYTE  lpEnd = m_pCtrl-&gt;pCmprWrite; <br>    int sm = 0; <br> <br>    while (lpCurr &lt; lpEnd &amp;&amp; sm &lt; 2)  { <br> <br>        switch (sm) { <br>        case 0: <br>            sm = (*lpCurr == 0xff); <br>            break; <br> <br>        case 1: <br>            if ((*lpCurr &amp; 0xf0) == 0xf0) sm = 2; /* sync found */ <br>            else sm = (*lpCurr == 0xff); <br>            break; <br>        } <br>        lpCurr++; <br>    } <br> <br>    // <br>    // When we get here we have either run out of buffer or found the first <br>    // "sm" bytes of a valid sync word. <br>    // <br>    // Don't forget to put back the sync word bytes that we have just <br>    // read otherwise they would be lost forever. <br>    // <br>    lpCurr -= sm; <br>    m_pCtrl-&gt;pCmprRead = lpCurr; <br> <br>    if (sm &lt; 2) { <br>        return FALSE;   // sync not found. <br>    } <br> <br>    return TRUE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

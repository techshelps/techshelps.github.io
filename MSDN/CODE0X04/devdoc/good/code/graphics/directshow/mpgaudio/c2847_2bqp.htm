<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MPGAUDIO.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2851"></a>MPGAUDIO.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>/******************************Module*Header*******************************\ <br>* Module Name: MpgAudio.h <br>* <br>* Prototype Mpeg Audio codec <br>* <br>* <br>\**************************************************************************/ <br>#ifndef _INC_MPGAUDIO_H <br>#define _INC_MPGAUDIO_H <br>#include &lt;streams.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;mmreg.h&gt; <br>#include &lt;stddef.h&gt; <br>#include &lt;string.h&gt; <br> <br>#include "decoder.h" <br> <br> <br>class CMpegAudioCodec : public CTransformFilter { <br>public: <br>    // <br>    // --- Com stuff --- <br>    // <br>    static CUnknown * WINAPI CreateInstance(LPUNKNOWN, HRESULT *); <br>    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv); <br>    DECLARE_IUNKNOWN; <br> <br> <br>    // <br>    // --- CTransform overrides --- <br>    // <br>    HRESULT Receive(IMediaSample *pSample); <br>    HRESULT CheckInputType(const CMediaType* mtIn); <br>    HRESULT CheckTransform(const CMediaType* mtIn, const CMediaType* mtOut); <br>    HRESULT DecideBufferSize(IMemAllocator * pAllocator, <br>                             ALLOCATOR_PROPERTIES * pProperties); <br>    HRESULT StartStreaming(); <br>    HRESULT StopStreaming(); <br>    HRESULT SetMediaType(PIN_DIRECTION direction,const CMediaType *pmt); <br>    HRESULT GetMediaType(int iPosition, CMediaType *pMediaType); <br>    HRESULT EndOfStream(void); <br>    HRESULT EndFlush(void); <br> <br>    CMpegAudioCodec(TCHAR *pName, LPUNKNOWN pUnk, HRESULT *pHr); <br>    ~CMpegAudioCodec(); <br> <br>private: <br>    //  Serialize access to the output pin <br>    long            m_FrameSize;        // Frame input size (bytes) <br>    long            m_FrameSizeOutput;  // Frame output size (bytes) <br> <br>    LPBYTE          m_lpStart; <br>    LPBYTE          m_lpCurr; <br>    LPBYTE          m_lpEnd; <br>    BOOL            m_bPayloadOnly; <br> <br>    enum            {MAX_FRAMES_PER_OUTPUT_SAMPLE = 4}; <br>    enum            {AUDIO_BUFF_SIZE = (1024 * 8)}; <br> <br>    DWORD           m_dwCtrl; <br>    AudioCtrl       m_AudioControl; <br>    CAudioDecoder   *m_pAudioDecoder; <br> <br>    CRefTime        m_TimePerFrame; <br>    CRefTime        m_TimeAtLastSyncPoint; <br>    CRefTime        m_TimeSinceLastSyncPoint; <br> <br>    int             m_FreqDiv; <br>    int             m_PrefChan; <br>    int             m_Quality; <br>    int             m_QuarterInt; <br>    int             m_WordSize; <br> <br>    BYTE            m_Buffer[AUDIO_BUFF_SIZE]; <br> <br>    void    ProcessDiscontiuity(IMediaSample *pSample); <br>    void    ProcessSyncPoint(IMediaSample *pSample, BYTE *pSrc); <br>    HRESULT DeliverSample(IMediaSample *pOutSample, CRefTime &amp;TimeDecoded, <br>                          int iSampleSize); <br> <br>    void    ResetAudioDecoder(); <br>    BOOL    LookForSyncWord(); <br>    int     Padding(); <br>    void    GetNextPacketChunk(LPBYTE &amp;lpPacket, <br>                               long &amp;LenLeftInBuffer, long &amp;LenLeftInPacket); <br> <br>    CRefTime        m_tStop; <br>    MPEG1WAVEFORMAT m_Format; <br> <br>}; <br> <br> <br>// ------------------------------------------------------------------------- <br>// Helper functions that can be used by audio and video codecs. <br>// ------------------------------------------------------------------------- <br>// <br> <br>/******************************Public*Routine******************************\ <br>* ByteSwap <br>* <br>* Converts dwX from little endian to big endian and vice-versa. <br>* <br>* <br>\**************************************************************************/ <br>__inline DWORD <br>ByteSwap( <br>    DWORD dwX <br>    ) <br>{ <br>#ifdef _X86_ <br>    _asm    mov     eax, dwX <br>    _asm    bswap   eax <br>    _asm    mov     dwX, eax <br> <br>    return dwX; <br>#else <br>    return _lrotl(((dwX &amp; 0xFF00FF00) &gt;&gt; 8) | ((dwX &amp; 0x00FF00FF) &lt;&lt; 8), 16); <br>#endif <br>} <br> <br>LPBYTE SkipToPacketData(LPBYTE pSrc, long &amp;LenLeftInPacket); <br>int GetDecoderInteger(const TCHAR *pKey,int iDefault); <br> <br>#endif <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

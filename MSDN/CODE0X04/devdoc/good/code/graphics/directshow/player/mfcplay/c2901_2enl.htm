<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAINFRM.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2901"></a>MAINFRM.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>// mainfrm.cpp : implementation of the CMainFrame class <br>// <br> <br>#include "stdafx.h" <br>#include "mfcplay.h" <br> <br>#include "mainfrm.h" <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame <br> <br>IMPLEMENT_DYNCREATE(CMainFrame, CFrameWnd) <br> <br>BEGIN_MESSAGE_MAP(CMainFrame, CFrameWnd) <br>//{{AFX_MSG_MAP(CMainFrame) <br>ON_WM_CREATE() <br>ON_WM_GETMINMAXINFO() <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// arrays of IDs used to initialize control bars <br> <br>// toolbar buttons - IDs are command buttons <br>static UINT BASED_CODE buttons[] = <br>{ <br>// same order as in the bitmap 'toolbar.bmp' <br>ID_MEDIA_PLAY, <br>ID_MEDIA_PAUSE, <br>ID_SEPARATOR, <br>ID_MEDIA_STOP, <br>}; <br> <br>const int nButtons = sizeof(buttons)/sizeof(UINT); <br>const int nButtonImageWidth = 32; <br>const int nButtonImageHeight = 32; <br>const int nButtonBorder = 8; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame construction/destruction <br> <br>CMainFrame::CMainFrame() <br>{ <br>// TODO: add member initialization code here <br>    sizeImage = CSize( nButtonImageWidth, nButtonImageHeight ); <br>    sizeButton = sizeImage + CSize( nButtonBorder, nButtonBorder ); <br> <br>} <br> <br>CMainFrame::~CMainFrame() <br>{ <br>} <br> <br>int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct) <br>{ <br>if (CFrameWnd::OnCreate(lpCreateStruct) == -1) <br>return -1; <br> <br>if (!m_wndToolBar.Create(this) || <br>!m_wndToolBar.LoadBitmap(IDR_MAINFRAME) || <br>!m_wndToolBar.SetButtons(buttons, nButtons)) <br>{ <br>TRACE0("Failed to create toolbar\n"); <br>return -1;      // fail to create <br>} <br> <br> <br>    m_wndToolBar.SetSizes( sizeButton, sizeImage ); <br> <br>    SetWindowPos( NULL, 0, 0, 0, 0, SWP_NOZORDER|SWP_NOMOVE ); <br> <br>// TODO: Remove this if you don't want tool tips <br>m_wndToolBar.SetBarStyle(m_wndToolBar.GetBarStyle() | <br>CBRS_TOOLTIPS | CBRS_FLYBY); <br> <br>return 0; <br>} <br> <br>BOOL CMainFrame::PreCreateWindow(CREATESTRUCT&amp; cs) <br>{ <br>cs.style = WS_OVERLAPPED | WS_CAPTION | FWS_ADDTOTITLE <br>| WS_THICKFRAME | WS_SYSMENU | WS_MINIMIZEBOX; <br> <br>return CFrameWnd::PreCreateWindow(cs); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame diagnostics <br> <br>#ifdef _DEBUG <br>void CMainFrame::AssertValid() const <br>{ <br>CFrameWnd::AssertValid(); <br>} <br> <br>void CMainFrame::Dump(CDumpContext&amp; dc) const <br>{ <br>CFrameWnd::Dump(dc); <br>} <br> <br>#endif //_DEBUG <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CMainFrame message handlers <br> <br>void CMainFrame::OnGetMinMaxInfo(MINMAXINFO FAR* lpMMI) <br>{ <br>    // Find out the default sizes <br>CFrameWnd::OnGetMinMaxInfo(lpMMI); <br> <br>    // Our client area is going to be the toolbar <br>    CRect rectClient = <br>        CRect( CPoint(0, 0), CSize(sizeButton.cx * nButtons, sizeButton.cy) ); <br> <br>    // Adjust for a border around the buttons <br>    rectClient.BottomRight().y += nButtonBorder; <br> <br>    // The windows API AdjustWindowRect (and thus Cwnd::CalcWindowRect) gets its <br>    // sums wrong when you have a WS_OVERLAPPED style. The following line gets <br>    // around this. <br>    AdjustWindowRect( &amp;rectClient, WS_CAPTION|WS_THICKFRAME, TRUE ); <br> <br>    CSize sizeRequired = rectClient.BottomRight() - rectClient.TopLeft(); <br> <br>    lpMMI-&gt;ptMinTrackSize = CPoint( sizeRequired ); <br>    lpMMI-&gt;ptMaxTrackSize.y = sizeRequired.cy; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

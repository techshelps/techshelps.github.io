<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MFCPLAY.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2905"></a>MFCPLAY.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>// player.cpp : Defines the class behaviors for the application. <br>// <br> <br>#include "stdafx.h" <br>#include "mfcplay.h" <br> <br>#include "mainfrm.h" <br>#include "mfcdoc.h" <br>#include "mfcvw.h" <br> <br>#ifdef _DEBUG <br>#undef THIS_FILE <br>static char BASED_CODE THIS_FILE[] = __FILE__; <br>#endif <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPlayerApp <br> <br>BEGIN_MESSAGE_MAP(CPlayerApp, CWinApp) <br>//{{AFX_MSG_MAP(CPlayerApp) <br>ON_COMMAND(ID_APP_ABOUT, OnAppAbout) <br>// NOTE - the ClassWizard will add and remove mapping macros here. <br>//    DO NOT EDIT what you see in these blocks of generated code! <br>//}}AFX_MSG_MAP <br>// Standard file based document commands <br>ON_COMMAND(ID_FILE_NEW, CWinApp::OnFileNew) <br>ON_COMMAND(ID_FILE_OPEN, CWinApp::OnFileOpen) <br>END_MESSAGE_MAP() <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPlayerApp construction <br> <br>CPlayerApp::CPlayerApp() <br>{ <br>// Place all significant initialization in InitInstance <br> <br>    m_pPlayerDoc = NULL; <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// The one and only CPlayerApp object <br> <br>CPlayerApp theApp; <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CPlayerApp initialization <br> <br>BOOL CPlayerApp::InitInstance() <br>{ <br>// Standard initialization <br>// If you are not using these features and wish to reduce the size <br>//  of your final executable, you should remove from the following <br>//  the specific initialization routines you do not need. <br> <br>Enable3dControls(); <br> <br>LoadStdProfileSettings( 0 );  // Load standard INI file options (including MRU) <br> <br>    // Initialize the quartz library <br>    CoInitialize(NULL); <br> <br>// Register the application's document templates.  Document templates <br>//  serve as the connection between documents, frame windows and views. <br> <br>CSingleDocTemplate* pDocTemplate; <br>pDocTemplate = new CSingleDocTemplate( <br>IDR_MAINFRAME, <br>RUNTIME_CLASS(CPlayerDoc), <br>RUNTIME_CLASS(CMainFrame),       // main SDI frame window <br>RUNTIME_CLASS(CPlayerView)); <br>AddDocTemplate(pDocTemplate); <br> <br>// Enable DDE Execute open <br>EnableShellOpen(); <br>RegisterShellFileTypes(); <br> <br>// simple command line parsing <br>if (m_lpCmdLine[0] == '\0') <br>{ <br>// create a new (empty) document <br>OnFileNew(); <br>} <br>else <br>{ <br>// open an existing document <br>if(!OpenDocumentFile(m_lpCmdLine)) <br>                    return FALSE; <br>} <br> <br>// Enable drag/drop open <br>m_pMainWnd-&gt;DragAcceptFiles(); <br> <br>return TRUE; <br>} <br> <br>int CPlayerApp::ExitInstance( ) <br>{ <br>    CoUninitialize(); <br> <br>    return CWinApp::ExitInstance(); <br>} <br> <br>void CPlayerApp::OnDocumentCreated( CPlayerDoc *pPlayerDoc ) <br>{ <br>    // Single documents only <br>    // If you want to convert to an MDI you will need to hold a list <br>    // of all created documents and change CPlayerApp::Run to build <br>    // up a list of event handles to wait for. <br>    ASSERT( m_pPlayerDoc == NULL ); <br>    m_pPlayerDoc = pPlayerDoc; <br> <br>} <br> <br>void CPlayerApp::OnDocumentDestroyed( CPlayerDoc *pPlayerDoc ) <br>{ <br>    // Single documents only <br>    ASSERT( m_pPlayerDoc == pPlayerDoc ); <br>    m_pPlayerDoc = NULL; <br> <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>// CAboutDlg dialog used for App About <br> <br>class CAboutDlg : public CDialog <br>{ <br>public: <br>CAboutDlg(); <br> <br>// Dialog Data <br>//{{AFX_DATA(CAboutDlg) <br>enum { IDD = IDD_ABOUTBOX }; <br>//}}AFX_DATA <br> <br>// Implementation <br>protected: <br>virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support <br>//{{AFX_MSG(CAboutDlg) <br>// No message handlers <br>//}}AFX_MSG <br>DECLARE_MESSAGE_MAP() <br>}; <br> <br>CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD) <br>{ <br>//{{AFX_DATA_INIT(CAboutDlg) <br>//}}AFX_DATA_INIT <br>} <br> <br>void CAboutDlg::DoDataExchange(CDataExchange* pDX) <br>{ <br>CDialog::DoDataExchange(pDX); <br>//{{AFX_DATA_MAP(CAboutDlg) <br>//}}AFX_DATA_MAP <br>} <br> <br>BEGIN_MESSAGE_MAP(CAboutDlg, CDialog) <br>//{{AFX_MSG_MAP(CAboutDlg) <br>// No message handlers <br>//}}AFX_MSG_MAP <br>END_MESSAGE_MAP() <br> <br>// App command to run the dialog <br>void CPlayerApp::OnAppAbout() <br>{ <br>CAboutDlg aboutDlg; <br>aboutDlg.DoModal(); <br>} <br> <br>int CPlayerApp::Run() <br>{   // Overridden to check for Graph events as well as messages <br> <br>if (m_pMainWnd == NULL &amp;&amp; AfxOleGetUserCtrl()) <br>{ <br>// Not launched /Embedding or /Automation, but has no main window! <br>TRACE0("Warning: m_pMainWnd is NULL in CPlayerApp::Run - quitting application.\n"); <br>AfxPostQuitMessage(0); <br>} <br> <br>    BOOL bIdle = TRUE; <br>    LONG lIdleCount = 0; <br>    HANDLE  ahObjects[1];               // handles that need to be waited on <br>    const int cObjects = 1;             // no of objects that we are waiting on <br> <br>    // message loop lasts until we get a WM_QUIT message <br>    // upon which we shall return from the function <br>    while (TRUE) { <br> <br>        // If we don't have an event handle then process idle <br>        // routines until a message arrives or until the idle routines <br>        // stop (when we block until a message arrives). The graph event <br>        // handle can only be created in response to a message <br>        if( (ahObjects[ 0 ] = m_pPlayerDoc-&gt;GetGraphEventHandle()) == NULL ){ <br>    while (    bIdle <br>            &amp;&amp; !::PeekMessage(&amp;m_msgCur, NULL, NULL, NULL, PM_NOREMOVE)) <br>    { <br>    // call OnIdle while in bIdle state <br>    if (!OnIdle(lIdleCount++)){ <br>    bIdle = FALSE; <br>                    WaitMessage(); <br>                } <br>    } <br>        } else { <br>            // wait for any message sent or posted to this queue <br>            // or for a graph notification. If there is no message or event <br>            // and we are idling then we process the idle time routines <br>            DWORD result; <br> <br>            result = MsgWaitForMultipleObjects( cObjects <br>                                              , ahObjects <br>                                              , FALSE <br>                                              , (bIdle ? 0 : INFINITE) <br>                                              , QS_ALLINPUT <br>                                              ); <br>            if( result != (WAIT_OBJECT_0 + cObjects) ){ <br>                // not a message... <br> <br>                if( result == WAIT_OBJECT_0 ) <br>                    m_pPlayerDoc-&gt;OnGraphNotify(); <br> <br>                else if( result == WAIT_TIMEOUT ) <br>                    if(!OnIdle(lIdleCount++)) <br>                        bIdle = FALSE; <br> <br>                continue; <br>            } <br>        } <br> <br> <br>        // When here, we either have a message or no event handle <br>        // has been created yet. <br> <br>        // read all of the messages in this next loop <br>        // removing each message as we read it <br>do <br>{ <br>// pump message, but quit on WM_QUIT <br>if (!PumpMessage()) <br>return ExitInstance(); <br> <br>// reset "no idle" state after pumping "normal" message <br>if (IsIdleMessage(&amp;m_msgCur)) <br>{ <br>bIdle = TRUE; <br>lIdleCount = 0; <br>} <br> <br>} while (::PeekMessage(&amp;m_msgCur, NULL, NULL, NULL, PM_NOREMOVE)); <br> <br>    } // end of the always while-loop <br> <br> <br>} <br>///////////////////////////////////////////////////////////////////////////// <br>// CPlayerApp commands </code></pre>
<p>&nbsp;</p></body>
</HTML>

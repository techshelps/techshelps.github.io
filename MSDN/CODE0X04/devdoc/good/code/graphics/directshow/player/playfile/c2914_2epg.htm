<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PLAYFILE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2914"></a>PLAYFILE.CPP</h2>
<pre><code><br>  //========================================================================= <br>  // <br>  //  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>  //  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>  //  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>  //  PURPOSE. <br>  // <br>  // Copyright (c) 1996 - 1997  Microsoft Corporation.  All Rights Reserved. <br>  // <br>  //========================================================================= <br> <br>  #include &lt;windows.h&gt; <br>  #include &lt;mmsystem.h&gt; <br>  #include &lt;streams.h&gt; <br>  #include "playfile.h" <br> <br>  #define APPLICATIONNAME "PlayFile" <br>  #define CLASSNAME "PlayFile" <br> <br>  #define WM_GRAPHNOTIFY  WM_USER+13 <br> <br>  #define HELPER_RELEASE(x) { if (x) x-&gt;Release(); x = NULL; } <br> <br>  HWND      ghApp; <br>  HINSTANCE ghInst; <br> <br>  HRESULT   hr; <br>  LONG      evCode; <br>  LONG      evParam1; <br>  LONG      evParam2; <br> <br>  // Collection of interfaces <br>  IBaseFilter   *pif   = NULL; <br>  IGraphBuilder *pigb  = NULL; <br>  IMediaControl *pimc  = NULL; <br>  IMediaEventEx *pimex = NULL; <br>  IVideoWindow  *pivw  = NULL; <br> <br>  void PlayFile (LPSTR szFile) <br> <br>    { // PlayFile // <br> <br>      WCHAR wFile[MAX_PATH]; <br>      MultiByteToWideChar( CP_ACP, 0, szFile, -1, wFile, MAX_PATH ); <br> <br>      hr = CoCreateInstance(CLSID_FilterGraph, NULL, CLSCTX_INPROC_SERVER, IID_IGraphBuilder, (void **)&amp;pigb); <br> <br>      if (SUCCEEDED(hr)) <br> <br>      { // Graphbuilder instance <br> <br>        // QueryInterface for some basic interfaces <br>        pigb-&gt;QueryInterface(IID_IMediaControl, (void **)&amp;pimc); <br>        pigb-&gt;QueryInterface(IID_IMediaEventEx, (void **)&amp;pimex); <br>        pigb-&gt;QueryInterface(IID_IVideoWindow, (void **)&amp;pivw); <br> <br>        // Have the graph construct its the appropriate graph automatically <br>        hr = pigb-&gt;RenderFile(wFile, NULL); <br> <br>        // Have the graph signal event via window callbacks for performance <br>        pimex-&gt;SetNotifyWindow((OAHWND)ghApp, WM_GRAPHNOTIFY, 0); <br> <br>        // Run the graph if RenderFile succeeded <br>        if (SUCCEEDED(hr)) <br>          pimc-&gt;Run(); <br> <br>      } // Graphbuilder instance <br> <br>    } // PlayFile // <br> <br>  // --------------------------------------------------------------------------- <br>  // End of multimedia specific code. <br>  // --------------------------------------------------------------------------- <br> <br>  BOOL GetClipFileName(LPSTR szName) <br> <br>    { // GetClipFileName // <br> <br>      OPENFILENAME ofn; <br> <br>      ofn.lStructSize       = sizeof(OPENFILENAME); <br>      ofn.hwndOwner         = ghApp; <br>      ofn.lpstrFilter       = NULL; <br>      ofn.lpstrFilter       = "Video files (*.mpg; *.mpeg; *.avi; *.mov; *.qt)\0*.mpg; *.mpeg; *.avi; *.mov; *.qt\0\0"; <br>      ofn.lpstrCustomFilter = NULL; <br>      ofn.nFilterIndex      = 1; <br>      *szName = 0; <br>      ofn.lpstrFile         = szName; <br>      ofn.nMaxFile          = MAX_PATH; <br>      ofn.lpstrInitialDir   = NULL; <br>      ofn.lpstrTitle        = NULL; <br>      ofn.lpstrFileTitle    = NULL; <br>      ofn.lpstrDefExt       = "MPG"; <br>      ofn.Flags             = OFN_FILEMUSTEXIST | OFN_READONLY | OFN_PATHMUSTEXIST; <br> <br>      return GetOpenFileName((LPOPENFILENAME)&amp;ofn); <br> <br>    } // GetClipFileName // <br> <br>  LRESULT CALLBACK WndMainProc (HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) <br> <br>    { // WndMainProc // <br> <br>      switch(message) <br> <br>        { // Window msgs handling <br> <br>          case WM_COMMAND: <br> <br>            switch(wParam) <br> <br>              { // Menus <br> <br>                case ID_FILE_OPENCLIP: <br> <br>                  TCHAR szFilename[MAX_PATH]; <br> <br>                  if (GetClipFileName(szFilename)) <br>                    PlayFile(szFilename); <br> <br>                  break; <br> <br>                case ID_FILE_EXIT: <br> <br>                  if (pimc) <br>                    pimc-&gt;Stop(); <br> <br>                  if (pivw) <br>                    pivw-&gt;put_Visible(OAFALSE); <br> <br>                  HELPER_RELEASE(pivw); <br>                  HELPER_RELEASE(pif); <br>                  HELPER_RELEASE(pigb); <br>                  HELPER_RELEASE(pimc); <br>                  HELPER_RELEASE(pimex); <br> <br>                  PostQuitMessage(0); <br> <br>                  break; <br> <br>              } // Menus <br> <br>            break; <br> <br>          case WM_GRAPHNOTIFY: <br> <br>            while (SUCCEEDED(pimex-&gt;GetEvent(&amp;evCode, &amp;evParam1, &amp;evParam2, 0))) <br> <br>              { // Spin through the events <br> <br>                hr = pimex-&gt;FreeEventParams(evCode, evParam1, evParam2); <br> <br>                if ((EC_COMPLETE == evCode) || (EC_USERABORT == evCode)) <br> <br>                  { // Finished <br> <br>                    pivw-&gt;put_Visible(OAFALSE); <br> <br>                    HELPER_RELEASE(pivw); <br>                    HELPER_RELEASE(pif); <br>                    HELPER_RELEASE(pigb); <br>                    HELPER_RELEASE(pimc); <br>                    HELPER_RELEASE(pimex); <br> <br>                    break; <br> <br>                  } // Finished <br>               <br>              } // Spin through the events <br> <br>            break; <br> <br>          case WM_DESTROY: <br>            PostQuitMessage(0); <br>            break; <br> <br>          default: <br>          return DefWindowProc(hWnd, message, wParam, lParam); <br> <br>      } // Window msgs handling <br> <br>      return FALSE; <br> <br>    } // WndMainProc // <br> <br>  int PASCAL WinMain(HINSTANCE hInstC, HINSTANCE hInstP, LPSTR lpCmdLine, int nCmdShow) <br> <br>    { // WinMain // <br> <br>      MSG msg; <br>      WNDCLASS wc; <br> <br>      // OLE subsystem requires applications to initialize things first! <br>      CoInitialize(NULL); <br> <br>      ZeroMemory(&amp;wc, sizeof wc); <br>      wc.lpfnWndProc = WndMainProc; <br>      ghInst = wc.hInstance = hInstC; <br>      wc.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH); <br>      wc.lpszClassName = CLASSNAME; <br>      wc.lpszMenuName = MAKEINTRESOURCE(IDR_MENU); <br>      wc.hCursor = LoadCursor(NULL, IDC_ARROW); <br>      wc.hIcon = LoadIcon(hInstC, MAKEINTRESOURCE(IDI_PLAYFILE)); <br>      RegisterClass(&amp;wc); <br> <br>      ghApp = CreateWindow(CLASSNAME, <br>        APPLICATIONNAME, <br>        WS_OVERLAPPEDWINDOW, <br>        CW_USEDEFAULT, <br>        CW_USEDEFAULT, <br>        CW_USEDEFAULT, <br>        CW_USEDEFAULT, <br>        0, <br>        0, <br>        ghInst, <br>        0); <br> <br>      ShowWindow(ghApp, SW_NORMAL); <br>      UpdateWindow(ghApp); <br> <br>      while (GetMessage(&amp;msg,NULL,0,0)) <br> <br>        {  // Message loop <br> <br>           TranslateMessage(&amp;msg); <br>           DispatchMessage(&amp;msg); <br> <br>        }  // Message loop <br> <br>      // Finished with OLE subsystem <br>      CoUninitialize(); <br> <br>      return msg.wParam; <br> <br>    } // WinMain // </code></pre>
<p>&nbsp;</p></body>
</HTML>

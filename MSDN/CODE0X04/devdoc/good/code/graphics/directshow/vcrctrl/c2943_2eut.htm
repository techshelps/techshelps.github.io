<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CTIMECOD.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2945"></a>CTIMECOD.CPP</h2>
<pre><code>//=========================================================================== <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>// KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>// IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>// PURPOSE. <br>// <br>// Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//=========================================================================== <br>// <br>//   filename: ctimecod.cpp <br>// <br>//     SMPTE Timecode support class <br>// <br>//--------------------------------------------------------- <br>// <br>//This code is provided for reference purposes only <br>// <br>//NOTES: <br>// 1. Code is un-optimized for clarity <br>// 2. Minimal error checking. <br>// 3. Negative t/c values not supported <br>// 4. File logging functions are here for illustrative  <br>//purposes but not used. <br>// <br>//--------------------------------------------------------- <br> <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdarg.h&gt; <br>#include &lt;vfw.h&gt; <br>#include &lt;streams.h&gt; <br>#include "ctimecod.h"  <br> <br>// timecode conversion tables <br>#define TC_LENGTH 11*sizeof(TCHAR)// length of a t/c string <br>static long lNDFTable[] = {1080000L,108000L,18000L,1800L,300L,30L,10L,1L}; <br>static long lDFTable[] = {1078920L,107892L,17982L,1798L,300L,30L,10L,1L}; <br>static long l25Table[] = {900000L,90000L,15000L,1500L,250L,25L,10L,1L}; <br>static long l24Table[] = {864000L,86400L,14400L,1440L,240L,24L,10L,1L}; <br> <br>//--------------------------------------------------------- <br>// <br>//ConvertStringToTimecode <br>// <br>// Timecode sample passed in contains desired framerate for conversion <br>// <br>//--------------------------------------------------------- <br>DWORD <br>CTimecode::ConvertStringToTimecode(TCHAR *lpszTimecode,  <br>   PTIMECODE_SAMPLE pTimecodeSample) <br>{ <br>int i, j; <br>long *table; <br>TCHAR temp; <br> <br>// select conversion table <br>switch (pTimecodeSample-&gt;timecode.wFrameRate) <br>{ <br>case AM_TIMECODE_30DROP: <br>table = lDFTable; <br>break; <br>case AM_TIMECODE_30NONDROP: <br>table = lNDFTable; <br>break; <br>case AM_TIMECODE_25: <br>table = l25Table; <br>break; <br>case AM_TIMECODE_24: <br>table = l24Table; <br>break; <br>default: <br>table = lNDFTable; <br>} <br>pTimecodeSample-&gt;timecode.dwFrames = 0L; <br>j = 0; <br>for ( i = 0; lpszTimecode[i]!= 0; i++ ) <br>{ <br>if ( (lpszTimecode[i] &gt; '9') || (lpszTimecode[i] &lt; '0') ) <br>continue; <br>temp = (lpszTimecode[i] - '0'); <br>pTimecodeSample-&gt;timecode.dwFrames += (DWORD)temp * table[j]; <br>j++; <br>} <br>return 0L; <br>} <br>//--------------------------------------------------------- <br>// <br>//ConvertTimecodeToString <br>// <br>//--------------------------------------------------------- <br>DWORD  <br>CTimecode::ConvertTimecodeToString(PTIMECODE_SAMPLE pTimecodeSample,  <br>   TCHAR *lpszTimecode) <br>{ <br>int i, j, temp; <br>long timecode; <br>long *table; <br>WORD wFCM; <br>int flag = 0; <br> <br>// make local copies <br>wFCM = pTimecodeSample-&gt;timecode.wFrameRate; <br>timecode = pTimecodeSample-&gt;timecode.dwFrames; <br> <br>// select conversion table <br>switch (wFCM) <br>{ <br>case AM_TIMECODE_30DROP: <br>table = lDFTable; <br>break; <br>case AM_TIMECODE_30NONDROP: <br>table = lNDFTable; <br>break; <br>case AM_TIMECODE_25: <br>table = l25Table; <br>break; <br>case AM_TIMECODE_24: <br>table = l24Table; <br>break; <br>default: <br>table = lNDFTable; <br>} <br>for ( i=0, j=0; j&lt;(TC_LENGTH); i++, j++ ) <br>{ <br>temp = (int)( timecode / table[i]); <br>lpszTimecode[j] = temp + '0';// ASCII conversion <br>timecode -= temp * table[i]; <br>// if minutesx10, do the drop frame test <br>if ( i == 2 ) { <br>if ( timecode &lt; 2) <br>flag = 1;// this means we are on a 10 minute <br>// boundary and 2 frames should be  <br>// added later <br>else <br>timecode-=2L; <br>} <br>if ( i == 3 ) { <br>// this is where the 2 frames get added in <br>if ( !flag ) <br>timecode+=2L; <br>} <br>// add punctuation <br>if ( 1 == j || 4 == j || 7 == j ) <br>{ <br>j++; <br>if ( 8 == j &amp;&amp; wFCM == AM_TIMECODE_30DROP ) <br>lpszTimecode[j] = ';'; <br>else <br>lpszTimecode[j] = ':'; <br>} <br>} <br>lpszTimecode[j] = 0;// null terminate <br>return 0L; <br>} <br> <br>// eof ctimecod.c </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CTIMECOD.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2946"></a>CTIMECOD.H</h2>
<pre><code>//=========================================================================== <br>// <br>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>// KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>// IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>// PURPOSE. <br>// <br>// Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//=========================================================================== <br>// <br>//filename: ctimecod.h <br>// <br>//header for ctimecod.cpp - basic timecode support class <br>// <br>// <br>// <br>#ifndef CTIMECOD_H <br>#defineCTIMECOD_H1 <br> <br>#include &lt;vfw.h&gt; <br> <br>// Timecode framerate definitions <br>#define AM_TIMECODE_30DROP0// 30 fps, dropframe <br>#define AM_TIMECODE_30NONDROP30// 30 fps, non-dropframe <br>#define AM_TIMECODE_2525// 25 fps (PAL) <br>#define AM_TIMECODE_2424// 24 fps <br> <br>// Timecode flag masks: <br>#defineAM_TIMECODE_FLAG_FCM0x00000001// Frame code mode: <br>//  0=nondrop, 1=drop <br>#defineAM_TIMECODE_FLAG_CF0x00000002// color frame flag <br>#defineAM_TIMECODE_FLAG_FIELD0x00000004// field flag <br>#defineAM_TIMECODE_FLAG_DF0x00000008// drop frame flag -  <br>//  from flags in actual <br>//  timecode <br>#defineAM_TIMECODE_COLORFRAME0x000000f0// which frame in color  <br>//  sequence <br>#defineAM_TIMECODE_COLORSEQUENCE0x00000f00// duration in frames of  <br>//  complete sequence <br>#defineAM_TIMECODE_FILMSEQUENCE_TYPE0x0000f000// One of FILM_SEQUENCE_XXX <br>//  defines <br>// upper 16 bits are reserved for future use - set to 0 <br> <br>// for informational purposes: <br>#define FILM_SEQUENCE_NONE       0 <br>#define FILM_SEQUENCE_AABBBCCDDD 1 <br>#define FILM_SEQUENCE_AAABBCCCDD 2 <br> <br> <br>// <br>//The timecode support class <br>// <br>class CTimecode { <br>public: <br> <br>// convert HH:MM:SS:FFs to binary.  Args are pointer to null-terminated <br>//"HH:MM:SS:FF' string and frame code mode:MC_FORMAT_SMPTE_30 || <br>//MC_FORMAT_SMPTE_30DROP <br>DWORD ConvertStringToTimecode(TCHAR *lpszTimecode,  <br>PTIMECODE_SAMPLE pTimecodeSample); <br> <br>// convert binary frames to HH:MM:SS:FFs.  NOTE: <br>//DF algorithm does not account for mathematicaly-generated <br>//values, i.e., assumes all binary values came from Ascii-converted <br>//DF values. <br>DWORD ConvertTimecodeToString(PTIMECODE_SAMPLE pTimecodeSample,  <br>TCHAR *lpszTimecode); <br>}; <br> <br>#endif// #ifndef CTIMECOD_H <br>// eof ctimecod.h <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

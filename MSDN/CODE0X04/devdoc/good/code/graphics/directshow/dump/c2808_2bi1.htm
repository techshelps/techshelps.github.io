<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DUMP.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2809"></a>DUMP.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>class CDumpInputPin; <br>class CDump; <br>class CDumpFilter; <br> <br>#define BYTES_PER_LINE 20 <br>#define FIRST_HALF_LINE "   %2x %2x %2x %2x %2x %2x %2x %2x %2x %2x" <br>#define SECOND_HALF_LINE " %2x %2x %2x %2x %2x %2x %2x %2x %2x %2x" <br> <br> <br>// Main filter object <br> <br>class CDumpFilter : public CBaseFilter <br>{ <br>    CDump * const m_pDump; <br> <br>public: <br> <br>    // Constructor <br>    CDumpFilter(CDump *pDump, <br>                LPUNKNOWN pUnk, <br>                CCritSec *pLock, <br>                HRESULT *phr); <br> <br>    // Pin enumeration <br>    CBasePin * GetPin(int n); <br>    int GetPinCount(); <br> <br>    // Open and close the file as necessary <br>    STDMETHODIMP Run(REFERENCE_TIME tStart); <br>    STDMETHODIMP Pause(); <br>    STDMETHODIMP Stop(); <br>}; <br> <br> <br>//  Pin object <br> <br>class CDumpInputPin : public CRenderedInputPin <br>{ <br>    CDump    * const m_pDump;           // Main renderer object <br>    CCritSec * const m_pReceiveLock;    // Sample critical section <br>    REFERENCE_TIME m_tLast;             // Last sample receive time <br> <br>public: <br> <br>    CDumpInputPin(CDump *pDump, <br>                  LPUNKNOWN pUnk, <br>                  CBaseFilter *pFilter, <br>                  CCritSec *pLock, <br>                  CCritSec *pReceiveLock, <br>                  HRESULT *phr); <br> <br>    // Do something with this media sample <br>    STDMETHODIMP Receive(IMediaSample *pSample); <br>    STDMETHODIMP EndOfStream(void); <br>    STDMETHODIMP ReceiveCanBlock(); <br>    HRESULT WriteStringInfo(IMediaSample *pSample); <br> <br>    // Check if the pin can support this specific proposed type and format <br>    HRESULT CheckMediaType(const CMediaType *); <br> <br>    // Break connection <br>    HRESULT BreakConnect(); <br> <br>    // Track NewSegment <br>    STDMETHODIMP NewSegment(REFERENCE_TIME tStart, <br>                            REFERENCE_TIME tStop, <br>                            double dRate); <br>}; <br> <br> <br>//  CDump object which has filter and pin members <br> <br>class CDump : public CUnknown, public IFileSinkFilter <br>{ <br>    friend class CDumpFilter; <br>    friend class CDumpInputPin; <br> <br>    CDumpFilter *m_pFilter;         // Methods for filter interfaces <br>    CDumpInputPin *m_pPin;          // A simple rendered input pin <br>    CCritSec m_Lock;                // Main renderer critical section <br>    CCritSec m_ReceiveLock;         // Sublock for received samples <br>    CPosPassThru *m_pPosition;      // Renderer position controls <br>    HANDLE m_hFile;                 // Handle to file for dumping <br>    LPOLESTR m_pFileName;           // The filename where we dump to <br> <br>public: <br> <br>    DECLARE_IUNKNOWN <br> <br>    CDump(LPUNKNOWN pUnk, HRESULT *phr); <br>    ~CDump(); <br> <br>    static CUnknown * WINAPI CreateInstance(LPUNKNOWN punk, HRESULT *phr); <br> <br>    // Write data streams to a file <br>    void WriteString(TCHAR *pString); <br>    HRESULT Write(PBYTE pbData,LONG lData); <br> <br>    // Implements the IFileSinkFilter interface <br>    STDMETHODIMP SetFileName(LPCOLESTR pszFileName,const AM_MEDIA_TYPE *pmt); <br>    STDMETHODIMP GetCurFile(LPOLESTR * ppszFileName,AM_MEDIA_TYPE *pmt); <br> <br>private: <br> <br>    // Overriden to say what interfaces we support where <br>    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void ** ppv); <br> <br>    // Open and write to the file <br>    HRESULT OpenFile(); <br>    HRESULT CloseFile(); <br>}; <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

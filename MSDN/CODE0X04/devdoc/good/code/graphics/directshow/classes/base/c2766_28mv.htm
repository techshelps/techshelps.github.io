<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCHEDULE.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2767"></a>SCHEDULE.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1996 - 1997 Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>//  SCHEDULE.H <br> <br>#ifndef __CAMSchedule__ <br>#define __CAMSchedule__ <br> <br>class CAMSchedule : private CBaseObject <br>{ <br>public: <br>    virtual ~CAMSchedule(); <br>    // ev is the event we should fire if the advise time needs re-evaluating <br>    CAMSchedule( HANDLE ev ); <br> <br>    DWORD GetAdviseCount(); <br>    REFERENCE_TIME GetNextAdviseTime(); <br> <br>    // We need a method for derived classes to add advise packets, we return the cookie <br>    DWORD AddAdvisePacket( const REFERENCE_TIME &amp; time1, const REFERENCE_TIME &amp; time2, HANDLE h, BOOL periodic ); <br>    // And a way to cancel <br>    HRESULT Unadvise(DWORD dwAdviseCookie); <br> <br>    // Tell us the time please, and we'll dispatch the expired events.  We return the time of the next event. <br>    // NB: The time returned will be "useless" if you start adding extra Advises.  But that's the problem of <br>    // whoever is using this helper class (typically a clock). <br>    REFERENCE_TIME Advise( const REFERENCE_TIME &amp; rtTime ); <br> <br>    // Get the event handle which will be set if advise time requires re-evaluation. <br>    HANDLE GetEvent() const { return m_ev; } <br> <br>private: <br>    // We define the nodes that will be used in our singly linked list <br>    // of advise packets.  The list is ordered by time, with the <br>    // elements that will expire first at the front. <br>    class CAdvisePacket <br>    { <br>    public: <br>        CAdvisePacket() <br>        {} <br> <br>        CAdvisePacket * m_next; <br>        DWORD           m_dwAdviseCookie; <br>        REFERENCE_TIME  m_rtEventTime;      // Time at which event should be set <br>        REFERENCE_TIME  m_rtPeriod;         // Periodic time <br>        HANDLE          m_hNotify;          // Handle to event or semephore <br>        BOOL            m_bPeriodic;        // TRUE =&gt; Periodic event <br> <br>        CAdvisePacket( CAdvisePacket * next, LONGLONG time ) : m_next(next), m_rtEventTime(time) <br>        {} <br> <br>        void InsertAfter( CAdvisePacket * p ) <br>        { <br>            p-&gt;m_next = m_next; <br>            m_next    = p; <br>        } <br> <br>        int IsZ() const // That is, is it the node that represents the end of the list <br>    { return m_next == 0; } <br> <br>    CAdvisePacket * RemoveNext() <br>    { <br>        CAdvisePacket *const next = m_next; <br>        CAdvisePacket *const new_next = next-&gt;m_next; <br>        m_next = new_next; <br>        return next; <br>    } <br> <br>    void DeleteNext() <br>    { <br>        delete RemoveNext(); <br>    } <br> <br>    CAdvisePacket * Next() const <br>    { <br>        CAdvisePacket * result = m_next; <br>        if (result-&gt;IsZ()) result = 0; <br>        return result; <br>    } <br> <br>        DWORD Cookie() const <br>        { return m_dwAdviseCookie; } <br>    }; <br> <br>    // Structure is: <br>    // head -&gt; elmt1 -&gt; elmt2 -&gt; z -&gt; null <br>    // So an empty list is:       head -&gt; z -&gt; null <br>    // Having head &amp; z as links makes insertaion, <br>    // deletion and shunting much easier. <br>    CAdvisePacket   head, z;            // z is both a tail and a sentry <br> <br>    volatile DWORD  m_dwNextCookie;     // Strictly increasing <br>    volatile DWORD  m_dwAdviseCount;    // Number of elements on list <br> <br>    CCritSec        m_Serialize; <br> <br>    // AddAdvisePacket: adds the packet, returns the cookie (0 if failed) <br>    DWORD AddAdvisePacket( CAdvisePacket * pPacket ); <br>    // Event that we should set if the packed added above will be the next to fire. <br>    const HANDLE m_ev; <br> <br>    // A Shunt is where we have changed the first element in the <br>    // list and want it re-evaluating (i.e. repositioned) in <br>    // the list. <br>    void ShuntHead(); <br> <br>    // Rather than delete advise packets, we cache them for future use <br>    CAdvisePacket * m_pAdviseCache; <br>    DWORD           m_dwCacheCount; <br>    enum { dwCacheMax = 5 };             // Don't bother caching more than five <br> <br>    void Delete( CAdvisePacket * pLink );// This "Delete" will cache the Link <br> <br>// Attributes and methods for debugging <br>public: <br>#ifdef DEBUG <br>    void DumpLinkedList(); <br>#else <br>    void DumpLinkedList() {} <br>#endif <br> <br>}; <br> <br>#endif // __CAMSchedule__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

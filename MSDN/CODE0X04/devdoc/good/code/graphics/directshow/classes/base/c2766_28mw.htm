<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SEEKPT.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2768"></a>SEEKPT.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>#include &lt;streams.h&gt; <br>#include "seekpt.h" <br> <br>//================================================================== <br>// CreateInstance <br>// This goes in the factory template table to create new instances <br>// If there is already a mapper instance - return that, else make one <br>// and save it in a static variable so that forever after we can return that. <br>//================================================================== <br> <br>CUnknown * CSeekingPassThru::CreateInstance(LPUNKNOWN pUnk, HRESULT *phr) <br>{ <br>    return new CSeekingPassThru(NAME("Silly Seeking Thing"),pUnk, phr); <br>} <br> <br> <br>STDMETHODIMP CSeekingPassThru::NonDelegatingQueryInterface(REFIID riid, void ** ppv) <br>{ <br>    if (riid == IID_ISeekingPassThru) { <br>        return GetInterface((ISeekingPassThru *) this, ppv); <br>    } else { <br>        if (m_pPosPassThru &amp;&amp; <br>            (riid == IID_IMediaSeeking || <br>             riid == IID_IMediaPosition)) { <br>            return m_pPosPassThru-&gt;NonDelegatingQueryInterface(riid,ppv); <br>        } else { <br>            return CUnknown::NonDelegatingQueryInterface(riid, ppv); <br>        } <br>    } <br>} <br> <br> <br>CSeekingPassThru::CSeekingPassThru( TCHAR *pName, LPUNKNOWN pUnk, HRESULT *phr ) <br>                            : CUnknown(pName, pUnk, phr), <br>                            m_pPosPassThru(NULL) <br>{ <br>} <br> <br> <br>CSeekingPassThru::~CSeekingPassThru() <br>{ <br>    delete m_pPosPassThru; <br>} <br> <br>STDMETHODIMP CSeekingPassThru::Init(BOOL bRendererSeeking, IPin *pPin) <br>{ <br>    HRESULT hr = NOERROR; <br>    if (m_pPosPassThru) { <br>        hr = E_FAIL; <br>    } else { <br>        m_pPosPassThru = <br>            bRendererSeeking ? <br>                new CRendererPosPassThru( <br>                    NAME("Render Seeking COM object"), <br>                    (IUnknown *)this, <br>                    &amp;hr, <br>                    pPin) : <br>                new CPosPassThru( <br>                    NAME("Render Seeking COM object"), <br>                    (IUnknown *)this, <br>                    &amp;hr, <br>                    pPin); <br>        if (!m_pPosPassThru) { <br>            hr = E_OUTOFMEMORY; <br>        } else { <br>            if (FAILED(hr)) { <br>                delete m_pPosPassThru; <br>                m_pPosPassThru = NULL; <br>            } <br>        } <br>    } <br>    return hr; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

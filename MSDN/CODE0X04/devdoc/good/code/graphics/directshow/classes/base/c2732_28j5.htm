<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPROP.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2741"></a>CPROP.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>#include &lt;streams.h&gt; <br> <br>// Constructor for the base property page class. As described in the header <br>// file we must be initialised with dialog and title resource identifiers. <br>// The class supports IPropertyPage and overrides AddRef and Release calls <br>// to keep track of the reference counts. When the last count is released <br>// we call SetPageSite(NULL) and SetObjects(0,NULL) to release interfaces <br>// previously obtained by the property page when it had SetObjects called <br> <br>CBasePropertyPage::CBasePropertyPage(TCHAR *pName,      // Debug only name <br>                                     LPUNKNOWN pUnk,    // COM Delegator <br>                                     int DialogId,      // Resource ID <br>                                     int TitleId) :     // To get tital <br>    CUnknown(pName,pUnk), <br>    m_DialogId(DialogId), <br>    m_TitleId(TitleId), <br>    m_hwnd(NULL), <br>    m_Dlg(NULL), <br>    m_pPageSite(NULL), <br>    m_bObjectSet(FALSE), <br>    m_bDirty(FALSE) <br>{ <br>} <br> <br> <br>// Increment our reference count <br> <br>STDMETHODIMP_(ULONG) CBasePropertyPage::NonDelegatingAddRef() <br>{ <br>    LONG lRef = InterlockedIncrement(&amp;m_cRef); <br>    ASSERT(lRef &gt; 0); <br>    return max(ULONG(m_cRef),1ul); <br>} <br> <br> <br>// Release a reference count and protect against reentrancy <br> <br>STDMETHODIMP_(ULONG) CBasePropertyPage::NonDelegatingRelease() <br>{ <br>    // If the reference count drops to zero delete ourselves <br> <br>    if (InterlockedDecrement(&amp;m_cRef) == 0) { <br>        m_cRef++; <br>        SetPageSite(NULL); <br>        SetObjects(0,NULL); <br>        delete this; <br>        return ULONG(0); <br>    } else { <br>        return max(ULONG(m_cRef),1ul); <br>    } <br>} <br> <br> <br>// Expose our IPropertyPage interface <br> <br>STDMETHODIMP <br>CBasePropertyPage::NonDelegatingQueryInterface(REFIID riid,void **ppv) <br>{ <br>    if (riid == IID_IPropertyPage) { <br>        return GetInterface((IPropertyPage *)this,ppv); <br>    } else { <br>        return CUnknown::NonDelegatingQueryInterface(riid,ppv); <br>    } <br>} <br> <br> <br>// Get the page info so that the page site can size itself <br> <br>STDMETHODIMP CBasePropertyPage::GetPageInfo(LPPROPPAGEINFO pPageInfo) <br>{ <br>    CheckPointer(pPageInfo,E_POINTER); <br>    WCHAR wszTitle[STR_MAX_LENGTH]; <br>    WideStringFromResource(wszTitle,m_TitleId); <br>    int Length = (lstrlenW(wszTitle) + 1) * sizeof(WCHAR); <br> <br>    // Allocate dynamic memory for the property page title <br> <br>    LPOLESTR pszTitle = (LPOLESTR) QzTaskMemAlloc(Length); <br>    if (pszTitle == NULL) { <br>        NOTE("No caption memory"); <br>        return E_OUTOFMEMORY; <br>    } <br> <br>    CopyMemory(pszTitle,wszTitle,Length); <br> <br>    pPageInfo-&gt;cb               = sizeof(PROPPAGEINFO); <br>    pPageInfo-&gt;pszTitle         = pszTitle; <br>    pPageInfo-&gt;pszDocString     = NULL; <br>    pPageInfo-&gt;pszHelpFile      = NULL; <br>    pPageInfo-&gt;dwHelpContext    = 0; <br> <br>    // Set defaults in case GetDialogSize fails <br>    pPageInfo-&gt;size.cx          = 340; <br>    pPageInfo-&gt;size.cy          = 150; <br> <br>    GetDialogSize(m_DialogId,(DLGPROC) DialogProc,0L,&amp;pPageInfo-&gt;size); <br>    return NOERROR; <br>} <br> <br> <br>// Handles the messages for our property window <br> <br>BOOL CALLBACK CBasePropertyPage::DialogProc(HWND hwnd, <br>                                            UINT uMsg, <br>                                            WPARAM wParam, <br>                                            LPARAM lParam) <br>{ <br>    CBasePropertyPage *pPropertyPage; <br> <br>    switch (uMsg) { <br> <br>        case WM_INITDIALOG: <br> <br>            SetWindowLong(hwnd, DWL_USER, lParam); <br> <br>            // This pointer may be NULL when calculating size <br> <br>            pPropertyPage = (CBasePropertyPage *) lParam; <br>            if (pPropertyPage == NULL) { <br>                return (LRESULT) 1; <br>            } <br>            pPropertyPage-&gt;m_Dlg = hwnd; <br>    } <br> <br>    // This pointer may be NULL when calculating size <br> <br>    pPropertyPage = (CBasePropertyPage *) GetWindowLong(hwnd, DWL_USER); <br>    if (pPropertyPage == NULL) { <br>        return (LRESULT) 1; <br>    } <br>    return pPropertyPage-&gt;OnReceiveMessage(hwnd,uMsg,wParam,lParam); <br>} <br> <br> <br>// Tells us the object that should be informed of the property changes <br> <br>STDMETHODIMP CBasePropertyPage::SetObjects(ULONG cObjects,LPUNKNOWN *ppUnk) <br>{ <br>    if (cObjects == 1) { <br> <br>        if ((ppUnk == NULL) || (*ppUnk == NULL)) { <br>            return E_POINTER; <br>        } <br> <br>        // Set a flag to say that we have set the Object <br>        m_bObjectSet = TRUE ; <br>        return OnConnect(*ppUnk); <br> <br>    } else if (cObjects == 0) { <br> <br>        // Set a flag to say that we have not set the Object for the page <br>        m_bObjectSet = FALSE ; <br>        return OnDisconnect(); <br>    } <br> <br>    DbgBreak("No support for more than one object"); <br>    return E_UNEXPECTED; <br>} <br> <br> <br>// Create the window we will use to edit properties <br> <br>STDMETHODIMP CBasePropertyPage::Activate(HWND hwndParent, <br>                                         LPCRECT pRect, <br>                                         BOOL fModal) <br>{ <br>    CheckPointer(pRect,E_POINTER); <br> <br>    // Return failure if SetObject has not been called. <br>    if (m_bObjectSet == FALSE) { <br>        return E_UNEXPECTED; <br>    } <br>     <br>    if (m_hwnd) { <br>        return E_UNEXPECTED; <br>    } <br> <br>    m_hwnd = CreateDialogParam(g_hInst, <br>                               MAKEINTRESOURCE(m_DialogId), <br>                               hwndParent, <br>                               DialogProc, <br>                               (LPARAM) this); <br>    if (m_hwnd == NULL) { <br>        return E_OUTOFMEMORY; <br>    } <br> <br>    // Parent should control us so the user can tab out of property page <br> <br>    DWORD dwStyle = GetWindowLong(m_hwnd, GWL_EXSTYLE); <br>    dwStyle = dwStyle | WS_EX_CONTROLPARENT; <br>    SetWindowLong(m_hwnd, GWL_EXSTYLE, dwStyle); <br> <br>    OnActivate(); <br>    Move(pRect); <br>    return Show(SW_SHOWNORMAL); <br>} <br> <br> <br>// Set the position of the property page <br> <br>STDMETHODIMP CBasePropertyPage::Move(LPCRECT pRect) <br>{ <br>    CheckPointer(pRect,E_POINTER); <br> <br>    if (m_hwnd == NULL) { <br>        return E_UNEXPECTED; <br>    } <br> <br>    MoveWindow(m_hwnd,              // Property page handle <br>               pRect-&gt;left,         // x coordinate <br>               pRect-&gt;top,          // y coordinate <br>               WIDTH(pRect),        // Overall window width <br>               HEIGHT(pRect),       // And likewise height <br>               TRUE);               // Should we repaint it <br> <br>    return NOERROR; <br>} <br> <br> <br>// Display the property dialog <br> <br>STDMETHODIMP CBasePropertyPage::Show(UINT nCmdShow) <br>{ <br>   // Have we been activated yet <br> <br>    if (m_hwnd == NULL) { <br>        return E_UNEXPECTED; <br>    } <br> <br>    // Ignore wrong show flags <br> <br>    if ((nCmdShow != SW_SHOW) &amp;&amp; (nCmdShow != SW_SHOWNORMAL) &amp;&amp; (nCmdShow != SW_HIDE)) { <br>        return E_INVALIDARG; <br>    } <br> <br>    ShowWindow(m_hwnd,nCmdShow); <br>    InvalidateRect(m_hwnd,NULL,TRUE); <br>    return NOERROR; <br>} <br> <br> <br>// Destroy the property page dialog <br> <br>STDMETHODIMP CBasePropertyPage::Deactivate(void) <br>{ <br>    if (m_hwnd == NULL) { <br>        return E_UNEXPECTED; <br>    } <br> <br>    // Remove WS_EX_CONTROLPARENT before DestroyWindow call <br> <br>    DWORD dwStyle = GetWindowLong(m_hwnd, GWL_EXSTYLE); <br>    dwStyle = dwStyle &amp; (~WS_EX_CONTROLPARENT); <br>    SetWindowLong(m_hwnd, GWL_EXSTYLE, dwStyle); <br> <br>    OnDeactivate(); <br> <br>    // Destroy the dialog window <br> <br>    DestroyWindow(m_hwnd); <br>    m_hwnd = NULL; <br>    return NOERROR; <br>} <br> <br> <br>// Tells the application property page site <br> <br>STDMETHODIMP CBasePropertyPage::SetPageSite(LPPROPERTYPAGESITE pPageSite) <br>{ <br>    if (pPageSite) { <br> <br>        if (m_pPageSite) { <br>            return E_UNEXPECTED; <br>        } <br> <br>        m_pPageSite = pPageSite; <br>        m_pPageSite-&gt;AddRef(); <br> <br>    } else { <br> <br>        if (m_pPageSite == NULL) { <br>            return E_UNEXPECTED; <br>        } <br> <br>        m_pPageSite-&gt;Release(); <br>        m_pPageSite = NULL; <br>    } <br>    return NOERROR; <br>} <br> <br> <br>// Apply any changes so far made <br> <br>STDMETHODIMP CBasePropertyPage::Apply() <br>{ <br>    // In ActiveMovie 1.0 we used to check whether we had been activated or <br>    // not. This is too constrictive. Apply should be allowed as long as <br>    // SetObject was called to set an object. So we will no longer check to <br>    // see if we have been activated (ie., m_hWnd != NULL), but instead <br>    // make sure that m_bObjectSet is TRUE (ie., SetObject has been called). <br> <br>    if (m_bObjectSet == FALSE) { <br>        return E_UNEXPECTED; <br>    } <br> <br>    // Must have had a site set <br> <br>    if (m_pPageSite == NULL) { <br>        return E_UNEXPECTED; <br>    } <br> <br>    // Has anything changed <br> <br>    if (m_bDirty == FALSE) { <br>        return NOERROR; <br>    } <br> <br>    // Commit derived class changes <br> <br>    HRESULT hr = OnApplyChanges(); <br>    if (SUCCEEDED(hr)) { <br>        m_bDirty = FALSE; <br>    } <br>    return hr; <br>} <br> <br> <br>// Base class definition for message handling <br> <br>BOOL CBasePropertyPage::OnReceiveMessage(HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam) <br>{ <br>    return DefWindowProc(hwnd,uMsg,wParam,lParam); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

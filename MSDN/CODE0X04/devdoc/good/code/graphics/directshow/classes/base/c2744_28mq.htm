<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REFCLOCK.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2762"></a>REFCLOCK.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>//  REFCLOCK.H <br>//  Implements IReferenceClock Interface <br> <br>#ifndef __BASEREFCLOCK__ <br>#define __BASEREFCLOCK__ <br> <br>#include &lt;Schedule.h&gt; <br> <br>const UINT RESOLUTION = 1;                      /* High resolution timer */ <br>const INT ADVISE_CACHE = 4;                     /* Default cache size */ <br>const LONGLONG MAX_TIME = 0x7FFFFFFFFFFFFFFF;   /* Maximum LONGLONG value */ <br> <br>inline LONGLONG WINAPI ConvertToMilliseconds(const REFERENCE_TIME&amp; RT) <br>{ <br>    /* This converts an arbitrary value representing a reference time <br>       into a MILLISECONDS value for use in subsequent system calls */ <br> <br>    return (RT / (UNITS / MILLISECONDS)); <br>} <br> <br>/* This class hierarchy will support an IReferenceClock interface so <br>   that an audio card (or other externally driven clock) can update the <br>   system wide clock that everyone uses. <br> <br>   The interface will be pretty thin with probably just one update method <br>   This interface has not yet been defined. <br> */ <br> <br>/* This abstract base class implements the IReferenceClock <br> * interface.  Classes that actually provide clock signals (from <br> * whatever source) have to be derived from this class. <br> * <br> * The abstract class provides implementations for: <br> * CUnknown support <br> *      locking support (CCritSec) <br> *client advise code (creates a thread) <br> * <br> * Question: what can we do about quality?  Change the timer <br> * resolution to lower the system load?  Up the priority of the <br> * timer thread to force more responsive signals? <br> * <br> * During class construction we create a worker thread that is destroyed during <br> * destuction.  This thread executes a series of WaitForSingleObject calls, <br> * waking up when a command is given to the thread or the next wake up point <br> * is reached.  The wakeup points are determined by clients making Advise <br> * calls. <br> * <br> * Each advise call defines a point in time when they wish to be notified.  A <br> * periodic advise is a series of these such events.  We maintain a list of <br> * advise links and calculate when the nearest event notification is due for. <br> * We then call WaitForSingleObject with a timeout equal to this time.  The <br> * handle we wait on is used by the class to signal that something has changed <br> * and that we must reschedule the next event.  This typically happens when <br> * someone comes in and asks for an advise link while we are waiting for an <br> * event to timeout. <br> * <br> * While we are modifying the list of advise requests we <br> * are protected from interference through a critical section.  Clients are NOT <br> * advised through callbacks.  One shot clients have an event set, while <br> * periodic clients have a semaphore released for each event notification.  A <br> * semaphore allows a client to be kept up to date with the number of events <br> * actually triggered and be assured that they can't miss multiple events being <br> * set. <br> * <br> * Keeping track of advises is taken care of by the CAMSchedule class. <br> */ <br> <br>class CBaseReferenceClock <br>: public CUnknown, public IReferenceClock, public CCritSec <br>{ <br>protected: <br>    virtual ~CBaseReferenceClock();     // Don't let me be created on the stack! <br>public: <br>    CBaseReferenceClock(TCHAR *pName, LPUNKNOWN pUnk, HRESULT *phr, CAMSchedule * pSched = 0 ); <br> <br>    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid,void ** ppv); <br> <br>    DECLARE_IUNKNOWN <br> <br>    /* IReferenceClock methods */ <br>    // Derived classes must implement GetPrivateTime().  All our GetTime <br>    // does is call GetPrivateTime and then check so that time does not <br>    // go backwards.  A return code of S_FALSE implies that the internal <br>    // clock has gone backwards and GetTime time has halted until internal <br>    // time has caught up. (Don't know if this will be much use to folk, <br>    // but it seems silly not to use the return code for something useful.) <br>    STDMETHODIMP GetTime(REFERENCE_TIME *pTime); <br>    // When this is called, it sets m_rtLastGotTime to the time it returns. <br> <br>    /* Provide standard mechanisms for scheduling events */ <br> <br>    /* Ask for an async notification that a time has elapsed */ <br>    STDMETHODIMP AdviseTime( <br>        REFERENCE_TIME baseTime,        // base reference time <br>        REFERENCE_TIME streamTime,      // stream offset time <br>        HEVENT hEvent,                  // advise via this event <br>        DWORD *pdwAdviseCookie          // where your cookie goes <br>    ); <br> <br>    /* Ask for an asynchronous periodic notification that a time has elapsed */ <br>    STDMETHODIMP AdvisePeriodic( <br>        REFERENCE_TIME StartTime,       // starting at this time <br>        REFERENCE_TIME PeriodTime,      // time between notifications <br>        HSEMAPHORE hSemaphore,          // advise via a semaphore <br>        DWORD *pdwAdviseCookie          // where your cookie goes <br>    ); <br> <br>    /* Cancel a request for notification(s) - if the notification was <br>     * a one shot timer then this function doesn't need to be called <br>     * as the advise is automatically cancelled, however it does no <br>     * harm to explicitly cancel a one-shot advise.  It is REQUIRED that <br>     * clients call Unadvise to clear a Periodic advise setting. <br>     */ <br> <br>    STDMETHODIMP Unadvise(DWORD dwAdviseCookie); <br> <br>    /* Methods for the benefit of derived classes or outer objects */ <br> <br>    // GetPrivateTime() is the REAL clock.  GetTime is just a cover for <br>    // it.  Derived classes will probably override this method but not <br>    // GetTime() itself. <br>    // The important point about GetPrivateTime() is it's allowed to go <br>    // backwards.  Our GetTime() will keep returning the LastGotTime <br>    // until GetPrivateTime() catches up. <br>    virtual REFERENCE_TIME GetPrivateTime(); <br> <br>    /* Provide a method for correcting drift */ <br>    STDMETHODIMP SetTimeDelta( const REFERENCE_TIME&amp; TimeDelta ); <br> <br>    CAMSchedule * GetSchedule() const { return m_pSchedule; } <br> <br>private: <br>    REFERENCE_TIME m_rtPrivateTime;     // Current best estimate of time <br>    DWORD          m_dwPrevSystemTime;  // Last vaule we got from timeGetTime <br>    REFERENCE_TIME m_rtLastGotTime;     // Last time returned by GetTime <br>    REFERENCE_TIME m_rtNextAdvise;      // Time of next advise <br>    UINT           m_TimerResolution; <br> <br>#ifdef PERF <br>    int m_idGetSystemTime; <br>#endif <br> <br>// Thread stuff <br>public: <br>    void TriggerThread()                // Wakes thread up.  Need to do this if <br>    {// time to next advise needs reevaluating. <br>EXECUTE_ASSERT(SetEvent(m_pSchedule-&gt;GetEvent())); <br>    } <br> <br> <br>private: <br>    BOOL           m_bAbort;            // Flag used for thread shutdown <br>    HANDLE         m_hThread;           // Thread handle <br> <br>    HRESULT AdviseThread();             // Method in which the advise thread runs <br>    static DWORD __stdcall AdviseThreadFunction(LPVOID); // Function used to get there <br> <br>protected: <br>    CAMSchedule * const m_pSchedule; <br>}; <br> <br>#endif <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

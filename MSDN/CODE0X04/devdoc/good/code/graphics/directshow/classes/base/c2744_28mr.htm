<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REFTIME.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2763"></a>REFTIME.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>// <br>// CRefTime <br>// <br>// Manage reference times. <br>// Shares same data layout as REFERENCE_TIME, but adds some (nonvirtual) <br>// functions providing simple comparison, conversion and arithmetic. <br>// <br>// A reference time (at the moment) is a unit of seconds represented in <br>// 100ns units as is used in the Win32 FILETIME structure. BUT the time <br>// a REFERENCE_TIME represents is NOT the time elapsed since 1/1/1601 it <br>// will either be stream time or reference time depending upon context <br>// <br>// This class provides simple arithmetic operations on reference times <br>// <br>// keep non-virtual otherwise the data layout will not be the same as <br>// REFERENCE_TIME <br> <br> <br>// ----- <br>// note that you are safe to cast a CRefTime* to a REFERENCE_TIME*, but <br>// you will need to do so explicitly <br>// ----- <br> <br> <br>#ifndef __REFTIME__ <br>#define __REFTIME__ <br> <br> <br>const LONGLONG MILLISECONDS = (1000);            // 10 ^ 3 <br>const LONGLONG NANOSECONDS = (1000000000);       // 10 ^ 9 <br>const LONGLONG UNITS = (NANOSECONDS / 100);      // 10 ^ 7 <br> <br>/*  Unfortunately an inline function here generates a call to __allmul <br>    - even for constants! <br>*/ <br>#define MILLISECONDS_TO_100NS_UNITS(lMs) \ <br>    Int32x32To64((lMs), (UNITS / MILLISECONDS)) <br> <br>class CRefTime <br>{ <br>public: <br> <br>    // *MUST* be the only data member so that this class is exactly <br>    // equivalent to a REFERENCE_TIME. <br>    // Also, must be *no virtual functions* <br> <br>    REFERENCE_TIME m_time; <br> <br>    inline CRefTime() <br>    { <br>        // default to 0 time <br>        m_time = 0; <br>    }; <br> <br>    inline CRefTime(LONG msecs) <br>    { <br>        m_time = MILLISECONDS_TO_100NS_UNITS(msecs); <br>    }; <br> <br>    inline CRefTime(REFERENCE_TIME rt) <br>    { <br>        m_time = rt; <br>    }; <br> <br>    inline operator REFERENCE_TIME() const <br>    { <br>        return m_time; <br>    }; <br> <br>    inline CRefTime&amp; operator=(const CRefTime&amp; rt) <br>    { <br>        m_time = rt.m_time; <br>        return *this; <br>    }; <br> <br>    inline CRefTime&amp; operator=(const LONGLONG ll) <br>    { <br>        m_time = ll; <br>        return *this; <br>    }; <br> <br>    inline CRefTime&amp; operator+=(const CRefTime&amp; rt) <br>    { <br>        return (*this = *this + rt); <br>    }; <br> <br>    inline CRefTime&amp; operator-=(const CRefTime&amp; rt) <br>    { <br>        return (*this = *this - rt); <br>    }; <br> <br>    inline LONG Millisecs(void) <br>    { <br>        return (LONG)(m_time / (UNITS / MILLISECONDS)); <br>    }; <br> <br>    inline LONGLONG GetUnits(void) <br>    { <br>        return m_time; <br>    }; <br>}; <br> <br>const LONGLONG TimeZero = 0; <br> <br>#endif /* __REFTIME__ */ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

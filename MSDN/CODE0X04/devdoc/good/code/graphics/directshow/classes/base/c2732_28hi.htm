<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AMVIDEO.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2736"></a>AMVIDEO.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>// Helper functions for bitmap formats, March 1995 <br> <br>#include &lt;streams.h&gt; <br>#include &lt;limits.h&gt; <br> <br>// These are bit field masks for true colour devices <br> <br>const DWORD bits555[] = {0x007C00,0x0003E0,0x00001F}; <br>const DWORD bits565[] = {0x00F800,0x0007E0,0x00001F}; <br>const DWORD bits888[] = {0xFF0000,0x00FF00,0x0000FF}; <br> <br>// This maps bitmap subtypes into a bits per pixel value and also a name <br> <br>const struct { <br>    const GUID *pSubtype; <br>    WORD BitCount; <br>    TCHAR *pName; <br>} BitCountMap[] = { &amp;MEDIASUBTYPE_RGB1,        1,   TEXT("RGB Monochrome"), <br>                    &amp;MEDIASUBTYPE_RGB4,        4,   TEXT("RGB VGA"), <br>                    &amp;MEDIASUBTYPE_RGB8,        8,   TEXT("RGB 8"), <br>                    &amp;MEDIASUBTYPE_RGB565,      16,  TEXT("RGB 565 (16 bit)"), <br>                    &amp;MEDIASUBTYPE_RGB555,      16,  TEXT("RGB 555 (16 bit)"), <br>                    &amp;MEDIASUBTYPE_RGB24,       24,  TEXT("RGB 24"), <br>                    &amp;MEDIASUBTYPE_RGB32,       32,  TEXT("RGB 32"), <br>                    &amp;MEDIASUBTYPE_Overlay,     0,   TEXT("Overlay"), <br>                    &amp;GUID_NULL,                0,   TEXT("UNKNOWN") }; <br> <br> <br>// Return the size of the bitmap as defined by this header <br> <br>STDAPI_(DWORD) GetBitmapSize(const BITMAPINFOHEADER *pHeader) <br>{ <br>    return DIBSIZE(*pHeader); <br>} <br> <br> <br>// This is called if the header has a 16 bit colour depth and needs to work <br>// out the detailed type from the bit fields (either RGB 565 or RGB 555) <br> <br>STDAPI_(const GUID) GetTrueColorType(const BITMAPINFOHEADER *pbmiHeader) <br>{ <br>    BITMAPINFO *pbmInfo = (BITMAPINFO *) pbmiHeader; <br>    ASSERT(pbmiHeader-&gt;biBitCount == 16); <br> <br>    // If its BI_RGB then it's RGB 555 by default <br> <br>    if (pbmiHeader-&gt;biCompression == BI_RGB) { <br>        return MEDIASUBTYPE_RGB555; <br>    } <br> <br>    // Compare the bit fields with RGB 555 <br> <br>    DWORD *pMask = (DWORD *) pbmInfo-&gt;bmiColors; <br>    if (pMask[0] == bits555[0]) { <br>        if (pMask[1] == bits555[1]) { <br>            if (pMask[2] == bits555[2]) { <br>                return MEDIASUBTYPE_RGB555; <br>            } <br>        } <br>    } <br> <br>    // Compare the bit fields with RGB 565 <br> <br>    pMask = (DWORD *) pbmInfo-&gt;bmiColors; <br>    if (pMask[0] == bits565[0]) { <br>        if (pMask[1] == bits565[1]) { <br>            if (pMask[2] == bits565[2]) { <br>                return MEDIASUBTYPE_RGB565; <br>            } <br>        } <br>    } <br>    return GUID_NULL; <br>} <br> <br> <br>// Given a BITMAPINFOHEADER structure this returns the GUID sub type that is <br>// used to describe it in format negotiations. For example a video codec fills <br>// in the format block with a VIDEOINFO structure, it also fills in the major <br>// type with MEDIATYPE_VIDEO and the subtype with a GUID that matches the bit <br>// count, for example if it is an eight bit image then MEDIASUBTYPE_RGB8 <br> <br>STDAPI_(const GUID) GetBitmapSubtype(const BITMAPINFOHEADER *pbmiHeader) <br>{ <br>    ASSERT(pbmiHeader); <br> <br>    // If it's not RGB then create a GUID from the compression type <br> <br>    if (pbmiHeader-&gt;biCompression != BI_RGB) { <br>        if (pbmiHeader-&gt;biCompression != BI_BITFIELDS) { <br>            FOURCCMap FourCCMap(pbmiHeader-&gt;biCompression); <br>            return (const GUID) FourCCMap; <br>        } <br>    } <br> <br>    // Map the RGB DIB bit depth to a image GUID <br> <br>    switch(pbmiHeader-&gt;biBitCount) { <br>        case 1    :   return MEDIASUBTYPE_RGB1; <br>        case 4    :   return MEDIASUBTYPE_RGB4; <br>        case 8    :   return MEDIASUBTYPE_RGB8; <br>        case 16   :   return GetTrueColorType(pbmiHeader); <br>        case 24   :   return MEDIASUBTYPE_RGB24; <br>        case 32   :   return MEDIASUBTYPE_RGB32; <br>    } <br>    return GUID_NULL; <br>} <br> <br> <br>// Given a video bitmap subtype we return the number of bits per pixel it uses <br>// We return a WORD bit count as thats what the BITMAPINFOHEADER uses. If the <br>// GUID subtype is not found in the table we return an invalid USHRT_MAX <br> <br>STDAPI_(WORD) GetBitCount(const GUID *pSubtype) <br>{ <br>    ASSERT(pSubtype); <br>    const GUID *pMediaSubtype; <br>    INT iPosition = 0; <br> <br>    // Scan the mapping list seeing if the source GUID matches any known <br>    // bitmap subtypes, the list is terminated by a GUID_NULL entry <br> <br>    while (TRUE) { <br>        pMediaSubtype = BitCountMap[iPosition].pSubtype; <br>        if (IsEqualGUID(*pMediaSubtype,GUID_NULL)) { <br>            return USHRT_MAX; <br>        } <br>        if (IsEqualGUID(*pMediaSubtype,*pSubtype)) { <br>            return BitCountMap[iPosition].BitCount; <br>        } <br>        iPosition++; <br>    } <br>} <br> <br> <br>// Given a bitmap subtype we return a description name that can be used for <br>// debug purposes. In a retail build this function still returns the names <br>// If the subtype isn't found in the lookup table we return string UNKNOWN <br> <br>STDAPI_(TCHAR *) GetSubtypeName(const GUID *pSubtype) <br>{ <br>    ASSERT(pSubtype); <br>    const GUID *pMediaSubtype; <br>    INT iPosition = 0; <br> <br>    // Scan the mapping list seeing if the source GUID matches any known <br>    // bitmap subtypes, the list is terminated by a GUID_NULL entry <br> <br>    while (TRUE) { <br>        pMediaSubtype = BitCountMap[iPosition].pSubtype; <br>        if (IsEqualGUID(*pMediaSubtype,*pSubtype)) { <br>            return BitCountMap[iPosition].pName; <br>        } <br>        if (IsEqualGUID(*pMediaSubtype,GUID_NULL)) { <br>            return TEXT("UNKNOWN"); <br>        } <br>        iPosition++; <br>    } <br>} <br> <br> <br>// The mechanism for describing a bitmap format is with the BITMAPINFOHEADER <br>// This is really messy to deal with because it invariably has fields that <br>// follow it holding bit fields, palettes and the rest. This function gives <br>// the number of bytes required to hold a VIDEOINFO that represents it. This <br>// count includes the prefix information (like the rcSource rectangle) the <br>// BITMAPINFOHEADER field, and any other colour information on the end. <br>// <br>// WARNING If you want to copy a BITMAPINFOHEADER into a VIDEOINFO always make <br>// sure that you use the HEADER macro because the BITMAPINFOHEADER field isn't <br>// right at the start of the VIDEOINFO (there are a number of other fields), <br>// <br>//     CopyMemory(HEADER(pVideoInfo),pbmi,sizeof(BITMAPINFOHEADER)); <br>// <br> <br>STDAPI_(LONG) GetBitmapFormatSize(const BITMAPINFOHEADER *pHeader) <br>{ <br>    // Everyone has this to start with this   <br>    LONG Size = SIZE_PREHEADER + pHeader-&gt;biSize; <br> <br>    ASSERT(pHeader-&gt;biSize &gt;= sizeof(BITMAPINFOHEADER)); <br>     <br>    // Does this format use a palette, if the number of colours actually used <br>    // is zero then it is set to the maximum that are allowed for that colour <br>    // depth (an example is 256 for eight bits). Truecolour formats may also <br>    // pass a palette with them in which case the used count is non zero <br> <br>    // This would scare me. <br>    ASSERT(pHeader-&gt;biBitCount &lt;= iPALETTE || pHeader-&gt;biClrUsed == 0); <br> <br>    if (pHeader-&gt;biBitCount &lt;= iPALETTE || pHeader-&gt;biClrUsed) { <br>        LONG Entries = (DWORD) 1 &lt;&lt; pHeader-&gt;biBitCount; <br>        if (pHeader-&gt;biClrUsed) { <br>            Entries = pHeader-&gt;biClrUsed; <br>        } <br>        Size += Entries * sizeof(RGBQUAD); <br>    } <br> <br>    // Truecolour formats may have a BI_BITFIELDS specifier for compression <br>    // type which means that room for three DWORDs should be allocated that <br>    // specify where in each pixel the RGB colour components may be found <br> <br>    if (pHeader-&gt;biCompression == BI_BITFIELDS) { <br>        Size += SIZE_MASKS; <br>    } <br> <br>    // A BITMAPINFO for a palettised image may also contain a palette map that <br>    // provides the information to map from a source palette to a destination <br>    // palette during a BitBlt for example, because this information is only <br>    // ever processed during drawing you don't normally store the palette map <br>    // nor have any way of knowing if it is present in the data structure <br> <br>    return Size; <br>} <br> <br> <br>// Returns TRUE if the VIDEOINFO contains a palette <br> <br>STDAPI_(BOOL) ContainsPalette(const VIDEOINFOHEADER *pVideoInfo) <br>{ <br>    if (PALETTISED(pVideoInfo) == FALSE) { <br>        if (pVideoInfo-&gt;bmiHeader.biClrUsed == 0) { <br>            return FALSE; <br>        } <br>    } <br>    return TRUE; <br>} <br> <br> <br>// Return a pointer to the first entry in a palette <br> <br>STDAPI_(const RGBQUAD *) GetBitmapPalette(const VIDEOINFOHEADER *pVideoInfo) <br>{ <br>    if (pVideoInfo-&gt;bmiHeader.biCompression == BI_BITFIELDS) { <br>        return TRUECOLOR(pVideoInfo)-&gt;bmiColors; <br>    } <br>    return COLORS(pVideoInfo); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CACHE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2737"></a>CACHE.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>// Non MFC based generic cache class, January 1995 <br> <br>/* This class implements a simple cache. A cache object is instantiated <br>   with the number of items it is to hold. An item is a pointer to an <br>   object derived from CBaseObject (helps reduce memory leaks). The cache <br>   can then have objects added to it and removed from it. The cache size <br>   is fixed at construction time and may therefore run out or be flooded. <br>   If it runs out it returns a NULL pointer, if it fills up it also returns <br>   a NULL pointer instead of a pointer to the object just inserted */ <br> <br>#include &lt;streams.h&gt; <br> <br>/* Constructor creates an array of pointers (to CBaseObject derived objects) <br>   and then zero fills each position. The cache cannot be resized dynamically <br>   so if the number of objects that you use varies widely during the lifetime <br>   of the cache then there will be some inefficiency. Making the cache resize <br>   would be an expensive operation especially with so little to be gained */ <br> <br>CCache::CCache(TCHAR *pName, INT iItems) : <br>    CBaseObject(pName), <br>    m_iCacheSize(iItems), <br>    m_iUsed(0) <br>{ <br>    ASSERT(iItems &gt; 0); <br> <br>    /* Create the array of pointers and set the cache size, if this does not <br>       succeed then it should probably throw an exception otherwise there is <br>       no way to propogate the error condition back to creating object */ <br> <br>    m_ppObjects = (CBaseObject **) new BYTE[iItems * sizeof(CBaseObject *)]; <br>    ASSERT(m_ppObjects); <br> <br>    ZeroMemory((PVOID) m_ppObjects,iItems * sizeof(CBaseObject *)); <br>} <br> <br> <br>/* Destructor causes the cached objects to be deleted (if not already done) <br>   and then deletes the (variable length) array that was used to hold them */ <br> <br>CCache::~CCache() <br>{ <br>    RemoveAll(); <br>    delete m_ppObjects; <br>} <br> <br> <br>/* Add an item to the cache, if no space is found for it then we return NULL <br>   otherwise we put the object in the free space. The object is meant to be <br>   as small and lightweight as possible so it does not do any multithread <br>   protection. This is assumed to be handled by the owning (list) object */ <br> <br>CBaseObject *CCache::AddToCache(CBaseObject *pObject) <br>{ <br>    /* Have we any room for this object */ <br> <br>    if (m_iUsed == m_iCacheSize) { <br>        return NULL; <br>    } <br> <br>    /* Add the object to the end of the cache */ <br> <br>    m_ppObjects[m_iUsed] = pObject; <br>    m_iUsed++; <br>    return pObject; <br>} <br> <br> <br>/* This is called to retrieve one of the objects we were given to look after <br>   if there are none available then we return NULL otherwise the return the <br>   object. NOTE we do not do any processing on the object so it will be in <br>   exactly the same state when it is handed back as when it is installed */ <br> <br>CBaseObject *CCache::RemoveFromCache() <br>{ <br>    /* Are all the cache positions empty */ <br> <br>    if (m_iUsed == 0) { <br>        return NULL; <br>    } <br> <br>    /* Return the last object put into the cache */ <br> <br>    m_iUsed--; <br>    ASSERT(m_ppObjects[m_iUsed]); <br>    return m_ppObjects[m_iUsed]; <br>} <br> <br> <br>/* Delete all the objects held in the cache, simply scans the list of objects <br>   in the cache and deletes each of them in turn. The list class uses a cache <br>   to manage node objects that are frequently created and destroyed and when <br>   the list is finally deleted we will also go at which point we also delete <br>   any remaining node objects. The objects must be derived from CBaseObject */ <br> <br>void CCache::RemoveAll() <br>{ <br>    while (m_iUsed--) { <br>        ASSERT(m_ppObjects[m_iUsed]); <br>        delete m_ppObjects[m_iUsed]; <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

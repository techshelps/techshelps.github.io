<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPROP.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2742"></a>CPROP.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>#ifndef __CPROP__ <br>#define __CPROP__ <br> <br>// Base property page class. Filters typically expose custom properties by <br>// implementing special control interfaces, examples are IDirectDrawVideo <br>// and IQualProp on renderers. This allows property pages to be built that <br>// use the given interface. Applications such as the ActiveMovie OCX query <br>// filters for the property pages they support and expose them to the user <br>// <br>// This class provides all the framework for a property page. A property <br>// page is a COM object that supports IPropertyPage. We should be created <br>// with a resource ID for the dialog which we will load when required. We <br>// should also be given in the constructor a resource ID for a title string <br>// we will load from the DLLs STRINGTABLE. The property page titles must be <br>// stored in resource files so that they can be easily internationalised <br>// <br>// We have a number of virtual methods (not PURE) that may be overriden in <br>// derived classes to query for interfaces and so on. These functions have <br>// simple implementations here that just return NOERROR. Derived classes <br>// will almost definately have to override the message handler method called <br>// OnReceiveMessage. We have a static dialog procedure that calls the method <br>// so that derived classes don't have to fiddle around with the this pointer <br> <br>class AM_NOVTABLE CBasePropertyPage : public IPropertyPage, public CUnknown <br>{ <br>protected: <br> <br>    LPPROPERTYPAGESITE m_pPageSite;       // Details for our property site <br>    HWND m_hwnd;                          // Window handle for the page <br>    HWND m_Dlg;                           // Actual dialog window handle <br>    BOOL m_bDirty;                        // Has anything been changed <br>    int m_TitleId;                        // Resource identifier for title <br>    int m_DialogId;                       // Dialog resource identifier <br> <br>    static BOOL CALLBACK DialogProc(HWND hwnd, <br>                                    UINT uMsg, <br>                                    WPARAM wParam, <br>                                    LPARAM lParam); <br> <br>private: <br>    BOOL m_bObjectSet ;                  // SetObject has been called or not. <br>public: <br> <br>    CBasePropertyPage(TCHAR *pName,      // Debug only name <br>                      LPUNKNOWN pUnk,    // COM Delegator <br>                      int DialogId,      // Resource ID <br>                      int TitleId);      // To get tital <br> <br>    virtual ~CBasePropertyPage() { }; <br>    DECLARE_IUNKNOWN <br> <br>    // Override these virtual methods <br> <br>    virtual HRESULT OnConnect(IUnknown *pUnknown) { return NOERROR; }; <br>    virtual HRESULT OnDisconnect() { return NOERROR; }; <br>    virtual HRESULT OnActivate() { return NOERROR; }; <br>    virtual HRESULT OnDeactivate() { return NOERROR; }; <br>    virtual HRESULT OnApplyChanges() { return NOERROR; }; <br>    virtual BOOL OnReceiveMessage(HWND hwnd,UINT uMsg,WPARAM wParam,LPARAM lParam); <br> <br>    // These implement an IPropertyPage interface <br> <br>    STDMETHODIMP NonDelegatingQueryInterface(REFIID riid,void **ppv); <br>    STDMETHODIMP_(ULONG) NonDelegatingRelease(); <br>    STDMETHODIMP_(ULONG) NonDelegatingAddRef(); <br>    STDMETHODIMP SetPageSite(LPPROPERTYPAGESITE pPageSite); <br>    STDMETHODIMP Activate(HWND hwndParent,LPCRECT prect,BOOL fModal); <br>    STDMETHODIMP Deactivate(void); <br>    STDMETHODIMP GetPageInfo(LPPROPPAGEINFO pPageInfo); <br>    STDMETHODIMP SetObjects(ULONG cObjects, LPUNKNOWN *ppUnk); <br>    STDMETHODIMP Show(UINT nCmdShow); <br>    STDMETHODIMP Move(LPCRECT prect); <br>    STDMETHODIMP IsPageDirty(void) { return m_bDirty ? S_OK : S_FALSE; } <br>    STDMETHODIMP Apply(void); <br>    STDMETHODIMP Help(LPCWSTR lpszHelpDir) { return E_NOTIMPL; } <br>    STDMETHODIMP TranslateAccelerator(LPMSG lpMsg) { return E_NOTIMPL; } <br>}; <br> <br>#endif // __CPROP__ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DDMM.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2745"></a>DDMM.CPP</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (c) 1995 - 1997  Microsoft Corporation.  All Rights Reserved. <br> * <br> *  File:       ddmm.cpp <br> *  Content:    Routines for using DirectDraw on a multimonitor system <br> * <br> ***************************************************************************/ <br> <br>#include &lt;streams.h&gt; <br>#include &lt;ddraw.h&gt; <br>#include "ddmm.h" <br> <br>/* <br> * FindDeviceCallback <br> */ <br>typedef struct { <br>LPSTR   szDevice; <br>GUID*   lpGUID; <br>GUID    GUID; <br>BOOL    fFound; <br>}   FindDeviceData; <br> <br>BOOL CALLBACK FindDeviceCallback(GUID* lpGUID, LPSTR szName, LPSTR szDevice, LPVOID lParam) <br>{ <br>FindDeviceData *p = (FindDeviceData*)lParam; <br> <br>if (lstrcmpiA(p-&gt;szDevice, szDevice) == 0) { <br>    if (lpGUID) { <br>p-&gt;GUID = *lpGUID; <br>p-&gt;lpGUID = &amp;p-&gt;GUID; <br>    } else { <br>p-&gt;lpGUID = NULL; <br>    } <br>    p-&gt;fFound = TRUE; <br>    return FALSE; <br>} <br>return TRUE; <br>} <br> <br> <br>BOOL CALLBACK FindDeviceCallbackEx(GUID* lpGUID, LPSTR szName, LPSTR szDevice, LPVOID lParam, HANDLE hMonitor) <br>{ <br>FindDeviceData *p = (FindDeviceData*)lParam; <br> <br>if (lstrcmpiA(p-&gt;szDevice, szDevice) == 0) { <br>    if (lpGUID) { <br>p-&gt;GUID = *lpGUID; <br>p-&gt;lpGUID = &amp;p-&gt;GUID; <br>    } else { <br>p-&gt;lpGUID = NULL; <br>    } <br>    p-&gt;fFound = TRUE; <br>    return FALSE; <br>} <br>return TRUE; <br>} <br> <br> <br>/* <br> * DirectDrawCreateFromDevice <br> * <br> * create a DirectDraw object for a particular device <br> */ <br>IDirectDraw * DirectDrawCreateFromDevice(LPSTR szDevice, PDRAWCREATE DirectDrawCreateP, PDRAWENUM DirectDrawEnumerateP) <br>{ <br>IDirectDraw*    pdd = NULL; <br>FindDeviceData  find; <br> <br>if (szDevice == NULL) { <br>DirectDrawCreateP(NULL, &amp;pdd, NULL); <br>return pdd; <br>} <br> <br>find.szDevice = szDevice; <br>find.fFound   = FALSE; <br>DirectDrawEnumerateP(FindDeviceCallback, (LPVOID)&amp;find); <br> <br>if (find.fFound) <br>{ <br>// <br>// In 4bpp mode the following DDraw call causes a message box to be popped <br>// up by DDraw (!?!).  It's DDraw's fault, but we don't like it.  So we <br>// make sure it doesn't happen. <br>// <br>UINT ErrorMode = SetErrorMode(SEM_FAILCRITICALERRORS); <br>DirectDrawCreateP(find.lpGUID, &amp;pdd, NULL); <br>SetErrorMode(ErrorMode); <br>} <br> <br>return pdd; <br>} <br> <br> <br>/* <br> * DirectDrawCreateFromDeviceEx <br> * <br> * create a DirectDraw object for a particular device <br> */ <br>IDirectDraw * DirectDrawCreateFromDeviceEx(LPSTR szDevice, PDRAWCREATE DirectDrawCreateP, LPDIRECTDRAWENUMERATEEXA DirectDrawEnumerateExP) <br>{ <br>IDirectDraw*    pdd = NULL; <br>FindDeviceData  find; <br> <br>if (szDevice == NULL) { <br>DirectDrawCreateP(NULL, &amp;pdd, NULL); <br>return pdd; <br>} <br> <br>find.szDevice = szDevice; <br>find.fFound   = FALSE; <br>DirectDrawEnumerateExP(FindDeviceCallbackEx, (LPVOID)&amp;find, <br>DDENUM_ATTACHEDSECONDARYDEVICES); <br> <br>if (find.fFound) <br>{ <br>// <br>// In 4bpp mode the following DDraw call causes a message box to be popped <br>// up by DDraw (!?!).  It's DDraw's fault, but we don't like it.  So we <br>// make sure it doesn't happen. <br>// <br>UINT ErrorMode = SetErrorMode(SEM_FAILCRITICALERRORS); <br>DirectDrawCreateP(find.lpGUID, &amp;pdd, NULL); <br>SetErrorMode(ErrorMode); <br>} <br> <br>return pdd; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

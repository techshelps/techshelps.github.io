<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CACHE.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2738"></a>CACHE.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>// Non MFC based generic cache class, January 1995 <br> <br>/* This class implements a simple cache. A cache object is instantiated <br>   with the number of items it is to hold. An item is a pointer to an <br>   object derived from CBaseObject (helps reduce memory leaks). The cache <br>   can then have objects added to it and removed from it. The cache size <br>   is fixed at construction time and may therefore run out or be flooded. <br>   If it runs out it returns a NULL pointer, if it fills up it also returns <br>   a NULL pointer instead of a pointer to the object just inserted */ <br> <br>/* Making these classes inherit from CBaseObject does nothing for their <br>   functionality but it allows us to check there are no memory leaks */ <br> <br>/* WARNING Be very careful when using this class, what it lets you do is <br>   store and retrieve objects so that you can minimise object creation <br>   which in turns improves efficiency. However the object you store is <br>   exactly the same as the object you get back which means that it short <br>   circuits the constructor initialisation phase. This means any class <br>   variables the object has (eg pointers) are highly likely to be invalid. <br>   Therefore ensure you reinitialise the object before using it again */ <br> <br> <br>#ifndef __CACHE__ <br>#define __CACHE__ <br> <br> <br>class CCache : CBaseObject { <br> <br>    /* Make copy constructor and assignment operator inaccessible */ <br> <br>    CCache(const CCache &amp;refCache); <br>    CCache &amp;operator=(const CCache &amp;refCache); <br> <br>private: <br> <br>    /* These are initialised in the constructor. The first variable points to <br>       an array of pointers, each of which points to a CBaseObject derived <br>       object. The m_iCacheSize is the static fixed size for the cache and the <br>       m_iUsed defines the number of places filled with objects at any time. <br>       We fill the array of pointers from the start (ie m_ppObjects[0] first) <br>       and then only add and remove objects from the end position, so in this <br>       respect the array of object pointers should be treated as a stack */ <br> <br>    CBaseObject **m_ppObjects; <br>    const INT m_iCacheSize; <br>    INT m_iUsed; <br> <br>public: <br> <br>    CCache(TCHAR *pName,INT iItems); <br>    virtual ~CCache(); <br> <br>    /* Add an item to the cache */ <br>    CBaseObject *AddToCache(CBaseObject *pObject); <br> <br>    /* Remove an item from the cache */ <br>    CBaseObject *RemoveFromCache(); <br> <br>    /* Delete all the objects held in the cache */ <br>    void RemoveAll(void); <br> <br>    /* Return the cache size which is set during construction */ <br>    INT GetCacheSize(void) const {return m_iCacheSize;}; <br>}; <br> <br>#endif /* __CACHE__ */ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FOURCC.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2750"></a>FOURCC.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>// FOURCCMap <br>// <br>// provides a mapping between old-style multimedia format DWORDs <br>// and new-style GUIDs. <br>// <br>// A range of 4 billion GUIDs has been allocated to ensure that this <br>// mapping can be done straightforwardly one-to-one in both directions. <br>// <br>// January 95 <br> <br> <br>#ifndef __FOURCC__ <br>#define __FOURCC__ <br> <br> <br>// Multimedia format types are marked with DWORDs built from four 8-bit <br>// chars and known as FOURCCs. New multimedia AM_MEDIA_TYPE definitions include <br>// a subtype GUID. In order to simplify the mapping, GUIDs in the range: <br>//    XXXXXXXX-0000-0010-8000-00AA00389B71 <br>// are reserved for FOURCCs. <br> <br>class FOURCCMap : public GUID <br>{ <br> <br>public: <br>    FOURCCMap(); <br>    FOURCCMap(DWORD Fourcc); <br>    FOURCCMap(const GUID *); <br> <br> <br>    DWORD GetFOURCC(void); <br>    void SetFOURCC(DWORD fourcc); <br>    void SetFOURCC(const GUID *); <br> <br>private: <br>    void InitGUID(); <br>}; <br> <br>#define GUID_Data2      0 <br>#define GUID_Data3     0x10 <br>#define GUID_Data4_1   0xaa000080 <br>#define GUID_Data4_2   0x719b3800 <br> <br>inline void <br>FOURCCMap::InitGUID() { <br>    Data2 = GUID_Data2; <br>    Data3 = GUID_Data3; <br>    ((DWORD *)Data4)[0] = GUID_Data4_1; <br>    ((DWORD *)Data4)[1] = GUID_Data4_2; <br>} <br> <br>inline <br>FOURCCMap::FOURCCMap() { <br>    InitGUID(); <br>    SetFOURCC( DWORD(0)); <br>} <br> <br>inline <br>FOURCCMap::FOURCCMap(DWORD fourcc) <br>{ <br>    InitGUID(); <br>    SetFOURCC(fourcc); <br>} <br> <br>inline <br>FOURCCMap::FOURCCMap(const GUID * pGuid) <br>{ <br>    InitGUID(); <br>    SetFOURCC(pGuid); <br>} <br> <br>inline void <br>FOURCCMap::SetFOURCC(const GUID * pGuid) <br>{ <br>    FOURCCMap * p = (FOURCCMap*) pGuid; <br>    SetFOURCC(p-&gt;GetFOURCC()); <br>} <br> <br>inline void <br>FOURCCMap::SetFOURCC(DWORD fourcc) <br>{ <br>    Data1 = fourcc; <br>} <br> <br>inline DWORD <br>FOURCCMap::GetFOURCC(void) <br>{ <br>    return Data1; <br>} <br> <br>#endif /* __FOURCC__ */ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

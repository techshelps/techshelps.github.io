<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AMEXTRA.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2732"></a>AMEXTRA.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>#include &lt;streams.h&gt;        // ActiveMovie base class definitions <br>#include &lt;mmsystem.h&gt;       // Needed for definition of timeGetTime <br>#include &lt;limits.h&gt;         // Standard data type limit definitions <br>#include &lt;measure.h&gt;        // Used for time critical log functions <br> <br>#include "amextra.h" <br> <br>#pragma warning(disable:4355) <br> <br>//  Implements CRenderedInputPin class <br> <br>CRenderedInputPin::CRenderedInputPin(TCHAR *pObjectName, <br>                                     CBaseFilter *pFilter, <br>                                     CCritSec *pLock, <br>                                     HRESULT *phr, <br>                                     LPCWSTR pName) : <br>    CBaseInputPin(pObjectName, pFilter, pLock, phr, pName), <br>    m_bAtEndOfStream(FALSE), <br>    m_bCompleteNotified(FALSE) <br>{ <br>} <br> <br> <br>// Flush end of stream condition - caller should do any <br>// necessary stream level locking before calling this <br> <br>STDMETHODIMP CRenderedInputPin::EndOfStream() <br>{ <br>    HRESULT hr = CheckStreaming(); <br> <br>    //  Do EC_COMPLETE handling for rendered pins <br>    if (S_OK == hr  &amp;&amp; !m_bAtEndOfStream) { <br>        m_bAtEndOfStream = TRUE; <br>        FILTER_STATE fs; <br>        EXECUTE_ASSERT(SUCCEEDED(m_pFilter-&gt;GetState(0, &amp;fs))); <br>        if (fs == State_Running) { <br>            DoCompleteHandling(); <br>        } <br>    } <br>    return hr; <br>} <br> <br> <br>// Called to complete the flush <br> <br>STDMETHODIMP CRenderedInputPin::EndFlush() <br>{ <br>    CAutoLock lck(m_pLock); <br> <br>    // Clean up renderer state <br>    m_bAtEndOfStream = FALSE; <br>    m_bCompleteNotified = FALSE; <br> <br>    return CBaseInputPin::EndFlush(); <br>} <br> <br> <br>// Notify of Run() from filter <br> <br>HRESULT CRenderedInputPin::Run(REFERENCE_TIME tStart) <br>{ <br>    UNREFERENCED_PARAMETER(tStart); <br>    m_bCompleteNotified = FALSE; <br>    if (m_bAtEndOfStream) { <br>        DoCompleteHandling(); <br>    } <br>    return S_OK; <br>} <br> <br> <br>//  Clear status on going into paused state <br> <br>HRESULT CRenderedInputPin::Active() <br>{ <br>    m_bAtEndOfStream = FALSE; <br>    m_bCompleteNotified = FALSE; <br>    return CBaseInputPin::Active(); <br>} <br> <br> <br>//  Do stuff to deliver end of stream <br> <br>void CRenderedInputPin::DoCompleteHandling() <br>{ <br>    ASSERT(m_bAtEndOfStream); <br>    if (!m_bCompleteNotified) { <br>        m_bCompleteNotified = TRUE; <br>        m_pFilter-&gt;NotifyEvent(EC_COMPLETE, 0, 0); <br>    } <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

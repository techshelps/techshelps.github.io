<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MTYPE.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2754"></a>MTYPE.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>// Class that holds and manages media type information, December 1994 <br> <br>#ifndef __MTYPE__ <br>#define __MTYPE__ <br> <br>/* Helper class that derived pin objects can use to compare media <br>   types etc. Has same data members as the struct AM_MEDIA_TYPE defined <br>   in the streams IDL file, but also has (non-virtual) functions */ <br> <br>class CMediaType : public _AMMediaType { <br> <br>public: <br> <br>    ~CMediaType(); <br>    CMediaType(); <br>    CMediaType(const GUID * majortype); <br>    CMediaType(const AM_MEDIA_TYPE&amp;); <br>    CMediaType(const CMediaType&amp;); <br> <br>    CMediaType&amp; operator=(const CMediaType&amp;); <br>    CMediaType&amp; operator=(const AM_MEDIA_TYPE&amp;); <br> <br>    BOOL operator == (const CMediaType&amp;) const; <br>    BOOL operator != (const CMediaType&amp;) const; <br> <br>    BOOL IsValid() const; <br> <br>    const GUID *Type() const { return &amp;majortype;} ; <br>    void SetType(const GUID *); <br>    const GUID *Subtype() const { return &amp;subtype;} ; <br>    void SetSubtype(const GUID *); <br> <br>    BOOL IsFixedSize() const {return bFixedSizeSamples; }; <br>    BOOL IsTemporalCompressed() const {return bTemporalCompression; }; <br>    ULONG GetSampleSize() const; <br> <br>    void SetSampleSize(ULONG sz); <br>    void SetVariableSize(); <br>    void SetTemporalCompression(BOOL bCompressed); <br> <br>    // read/write pointer to format - can't change length without <br>    // calling SetFormat, AllocFormatBuffer or ReallocFormatBuffer <br> <br>    BYTE*   Format() const {return pbFormat; }; <br>    ULONG   FormatLength() const { return cbFormat; }; <br> <br>    void SetFormatType(const GUID *); <br>    const GUID *FormatType() const {return &amp;formattype; }; <br>    BOOL SetFormat(BYTE *pFormat, ULONG length); <br>    void ResetFormatBuffer(); <br>    BYTE* AllocFormatBuffer(ULONG length); <br>    BYTE* ReallocFormatBuffer(ULONG length); <br> <br>    void InitMediaType(); <br> <br>    BOOL MatchesPartial(const CMediaType* ppartial) const; <br>    BOOL IsPartiallySpecified(void) const; <br>}; <br> <br> <br>/* General purpose functions to copy and delete a task allocated AM_MEDIA_TYPE <br>   structure which is useful when using the IEnumMediaFormats interface as <br>   the implementation allocates the structures which you must later delete */ <br> <br>void WINAPI DeleteMediaType(AM_MEDIA_TYPE *pmt); <br>AM_MEDIA_TYPE * WINAPI CreateMediaType(AM_MEDIA_TYPE const *pSrc); <br>void WINAPI CopyMediaType(AM_MEDIA_TYPE *pmtTarget, const AM_MEDIA_TYPE *pmtSource); <br>void WINAPI FreeMediaType(AM_MEDIA_TYPE&amp; mt); <br> <br>//  Initialize a media type from a WAVEFORMATEX <br> <br>STDAPI CreateAudioMediaType( <br>    const WAVEFORMATEX *pwfx, <br>    AM_MEDIA_TYPE *pmt, <br>    BOOL bSetFormat); <br> <br>#endif /* __MTYPE__ */ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SYSCLOCK.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2775"></a>SYSCLOCK.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>//  SYSCLOCK.CPP <br>//    Implements a system clock based on IReferenceClock <br> <br>#include &lt;streams.h&gt; <br>#include &lt;limits.h&gt; <br> <br> <br>#ifdef FILTER_DLL <br> <br>/* List of class IDs and creator functions for the class factory. This <br>   provides the link between the OLE entry point in the DLL and an object <br>   being created. The class factory will call the static CreateInstance <br>   function when it is asked to create a CLSID_SystemClock object */ <br> <br>CFactoryTemplate g_Templates[1] = { <br>    {&amp;CLSID_SystemClock, CSystemClock::CreateInstance} <br>}; <br> <br>int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]); <br>#endif <br> <br>/* This goes in the factory template table to create new instances */ <br>CUnknown * WINAPI CSystemClock::CreateInstance(LPUNKNOWN pUnk,HRESULT *phr) <br>{ <br>    return new CSystemClock(NAME("System reference clock"),pUnk, phr); <br>} <br> <br> <br>CSystemClock::CSystemClock(TCHAR *pName,LPUNKNOWN pUnk,HRESULT *phr) : <br>    CBaseReferenceClock(pName, pUnk, phr) <br>{ <br>} <br> <br>STDMETHODIMP CSystemClock::NonDelegatingQueryInterface( <br>    REFIID riid, <br>    void ** ppv) <br>{ <br>    if (riid == IID_IPersist) <br>    { <br>        return GetInterface(static_cast&lt;IPersist *&gt;(this), ppv); <br>    } <br>    else <br>    { <br>        return CBaseReferenceClock::NonDelegatingQueryInterface(riid, ppv); <br>    } <br>} <br> <br>/* Return the clock's clsid */ <br>STDMETHODIMP <br>CSystemClock::GetClassID(CLSID *pClsID) <br>{ <br>    CheckPointer(pClsID,E_POINTER); <br>    ValidateReadWritePtr(pClsID,sizeof(CLSID)); <br>    *pClsID = CLSID_SystemClock; <br>    return NOERROR; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

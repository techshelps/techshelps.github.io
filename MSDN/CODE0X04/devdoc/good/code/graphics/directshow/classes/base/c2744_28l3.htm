<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PSTREAM.CPP</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2757"></a>PSTREAM.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br> <br>#include &lt;streams.h&gt; <br> <br>#ifdef PERF <br>#include &lt;measure.h&gt; <br>#endif <br>// #include "pstream.h"  in streams.h <br> <br>// <br>// Constructor <br>// <br>CPersistStream::CPersistStream(IUnknown *punk, HRESULT *phr) <br>    : mPS_fDirty(FALSE) <br>{ <br>    mPS_dwFileVersion = GetSoftwareVersion(); <br>} <br> <br> <br>// <br>// Destructor <br>// <br>CPersistStream::~CPersistStream() { <br>    // Nothing to do <br>} <br> <br>#if 0 <br>SAMPLE CODE TO COPY - not active at the moment <br> <br>// <br>// NonDelegatingQueryInterface <br>// <br>// This object supports IPersist &amp; IPersistStream <br>STDMETHODIMP CPersistStream::NonDelegatingQueryInterface(REFIID riid, void **ppv) <br>{ <br>    if (riid == IID_IPersist) { <br>        return GetInterface((IPersist *) this, ppv);      // ??? <br>    } <br>    else if (riid == IID_IPersistStream) { <br>        return GetInterface((IPersistStream *) this, ppv); <br>    } <br>    else { <br>        return CUnknown::NonDelegatingQueryInterface(riid, ppv); <br>    } <br>} <br>#endif <br> <br> <br>// <br>// WriteToStream <br>// <br>// Writes to the stream (default action is to write nothing) <br>HRESULT CPersistStream::WriteToStream(IStream *pStream) <br>{ <br>    // You can override this to do things like <br>    // hr = pStream-&gt;Write(MyStructure, sizeof(MyStructure), NULL); <br> <br>    return NOERROR; <br>} <br> <br> <br> <br>HRESULT CPersistStream::ReadFromStream(IStream * pStream) <br>{ <br>    // You can override this to do things like <br>    // hr = pStream-&gt;Read(MyStructure, sizeof(MyStructure), NULL); <br> <br>    return NOERROR; <br>} <br> <br> <br>// <br>// Load <br>// <br>// Load all the data from the given stream <br>STDMETHODIMP CPersistStream::Load(LPSTREAM pStm) <br>{ <br>    HRESULT hr; <br>    // Load the version number then the data <br>    mPS_dwFileVersion = ReadInt(pStm, hr); <br>    if (FAILED(hr)) { <br>        return hr; <br>    } <br> <br>    return ReadFromStream(pStm); <br>}  // Load <br> <br> <br> <br>// <br>// Save <br>// <br>// Save the contents of this Stream. <br>STDMETHODIMP CPersistStream::Save(LPSTREAM pStm, BOOL fClearDirty) <br>{ <br> <br>    HRESULT hr = WriteInt(pStm, GetSoftwareVersion()); <br>    if (FAILED(hr)) { <br>        return hr; <br>    } <br> <br>    hr = WriteToStream(pStm); <br>    if (FAILED(hr)) { <br>        return hr; <br>    } <br> <br>    mPS_fDirty = !fClearDirty; <br> <br>    return hr; <br>} // Save <br> <br> <br>// WriteInt <br>// <br>// Writes an integer to an IStream as 11 UNICODE characters followed by one space. <br>// You could use this for shorts or unsigneds or anything (up to 32 bits) <br>// where the value isn't actually truncated by squeezing it into 32 bits. <br>// Values such as (unsigned) 0x80000000 would come out as -2147483648 <br>// but would then load as 0x80000000 through ReadInt.  Cast as you please. <br> <br>STDAPI WriteInt(IStream *pIStream, int n) <br>{ <br>    WCHAR Buff[13];  // Allows for trailing null that we don't write <br>    wsprintfW(Buff, L"%011d ",n); <br>    return pIStream-&gt;Write(&amp;(Buff[0]), 12*sizeof(WCHAR), NULL); <br>} // WriteInt <br> <br> <br>// ReadInt <br>// <br>// Reads an integer from an IStream. <br>// Read as 4 bytes.  You could use this for shorts or unsigneds or anything <br>// where the value isn't actually truncated by squeezing it into 32 bits <br>// Striped down subset of what sscanf can do (without dragging in the C runtime) <br> <br>STDAPI_(int) ReadInt(IStream *pIStream, HRESULT &amp;hr) <br>{ <br> <br>    int Sign = 1; <br>    unsigned int n = 0;    // result wil be n*Sign <br>    WCHAR wch; <br> <br>    hr = pIStream-&gt;Read( &amp;wch, sizeof(wch), NULL); <br>    if (FAILED(hr)) { <br>        return 0; <br>    } <br> <br>    if (wch==L'-'){ <br>        Sign = -1; <br>        hr = pIStream-&gt;Read( &amp;wch, sizeof(wch), NULL); <br>        if (FAILED(hr)) { <br>            return 0; <br>        } <br>    } <br> <br>    for( ; ; ) { <br>        if (wch&gt;=L'0' &amp;&amp; wch&lt;=L'9') { <br>            n = 10*n+(int)(wch-L'0'); <br>        } else if (  wch == L' ' <br>                  || wch == L'\t' <br>                  || wch == L'\r' <br>                  || wch == L'\n' <br>                  || wch == L'\0' <br>                  ) { <br>            break; <br>        } else { <br>            hr = VFW_E_INVALID_FILE_FORMAT; <br>            return 0; <br>        } <br> <br>        hr = pIStream-&gt;Read( &amp;wch, sizeof(wch), NULL); <br>        if (FAILED(hr)) { <br>            return 0; <br>        } <br>    } <br> <br>    if (n==0x80000000 &amp;&amp; Sign==-1) { <br>        // This is the negative number that has no positive version! <br>        return (int)n; <br>    } <br>    else return (int)n * Sign; <br>} // ReadInt <br> <br> <br>// The microsoft C/C++ compile generates level 4 warnings to the effect that <br>// a particular inline function (from some base class) was not needed. <br>// This line gets rid of hundreds of such unwanted messages and makes <br>// -W4 compilation feasible: <br>#pragma warning(disable: 4514) </code></pre>
<p>&nbsp;</p></body>
</HTML>

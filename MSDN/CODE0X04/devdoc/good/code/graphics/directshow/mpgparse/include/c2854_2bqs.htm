<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ALLOC.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2854"></a>ALLOC.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1996 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>/*  Allocator for sequential buffers <br>    Like CBaseAllocator BUT always allocates the next buffer <br>*/ <br> <br>typedef CMediaSample *LPCMEDIASAMPLE; <br> <br>class CSequentialAllocator : public CMemAllocator <br>{ <br>public: <br>    CSequentialAllocator( <br>        LPUNKNOWN  pUnk, <br>        HRESULT   *phr <br>    ); <br> <br>    ~CSequentialAllocator(); <br> <br>    STDMETHODIMP GetBuffer( <br>        IMediaSample **ppBuffer, <br>        REFERENCE_TIME * pStartTime, <br>        REFERENCE_TIME * pEndTime, <br>        DWORD dwFlags); <br> <br>    HRESULT Alloc(); <br> <br>    /*  Get buffer index */ <br>    int BufferIndex(PBYTE pbBuffer); <br> <br>    /*  Given an address get the IMediaSample pointer - <br>        NB needs optimizing <br>    */ <br>    CMediaSample *SampleFromBuffer(PBYTE pBuffer); <br> <br>    /*  Add a buffer to the valid list */ <br>    void AddBuffer(CMediaSample *pSample); <br> <br>    /*  Step through valid data */ <br>    HRESULT Advance(LONG lAdvance); <br> <br>    /*  Get the valid part */ <br>    PBYTE GetValid(LONG *plValid); <br> <br>    /*  Wrap end to go back to start */ <br>    HRESULT Wrap(void); <br> <br>    /*  Flush the allocator - just discard all the data in it */ <br>    void Flush(); <br> <br>private: <br>    PBYTE           m_pbNext; <br>    LPCMEDIASAMPLE *m_parSamples; <br> <br>    /*  Simple wrap around buffer stuff */ <br>    LONG            m_lValid; <br>    PBYTE           m_pbStartValid; <br>    PBYTE           m_pBuffer;  /* Copy of CMemAllocator's which is private */ <br>}; <br> <br>/*  Allocator for subsamples */ <br>class CSubAllocator : public CBaseAllocator <br>{ <br>public: <br>    CSubAllocator( <br>        LPUNKNOWN  pUnk, <br>        HRESULT   *phr, <br>        CSequentialAllocator *pAlloc <br>    ) : CBaseAllocator(NAME("CSubAllocator"), pUnk, phr), <br>        m_pAlloc(pAlloc) <br>    { <br>    } <br> <br>    CMediaSample *GetSample(PBYTE pbData, DWORD dwLen) <br>    { <br>        HRESULT hr = S_OK; <br>        CMediaSample *pSample = new CMediaSample( <br>                                        NAME("CMediaSample"), <br>                                        this, <br>                                        &amp;hr, <br>                                        pbData, <br>                                        dwLen); <br>        if (pSample != NULL) { <br> <br>            /*  We only need to lock the first buffer because <br>                the super allocator allocates samples sequentially <br>                so it can't allocate subsequent samples until <br>                the first one has been freed <br>            */ <br>            m_pAlloc-&gt;SampleFromBuffer(pbData)-&gt;AddRef(); <br> <br>            /*  AddRef() ourselves too to conform to the rules */ <br>            pSample-&gt;AddRef(); <br> <br>            /*  Make sure WE don't go away too ! */ <br>            AddRef(); <br>        } <br>        return pSample; <br>    } <br> <br>    STDMETHODIMP ReleaseBuffer(IMediaSample * pSample) <br>    { <br>        /*  Free the superallocator's buffer */ <br>        CMediaSample *pMediaSample = (CMediaSample *)pSample; <br>        PBYTE pBuffer; <br>        pSample-&gt;GetPointer(&amp;pBuffer); <br>        m_pAlloc-&gt;SampleFromBuffer(pBuffer)-&gt;Release(); <br>        delete pMediaSample; <br> <br>        Release(); <br>        return NOERROR; <br>    } <br> <br> <br>    /*  Must override Free() */ <br>    void Free() {} <br> <br>private: <br>    CSequentialAllocator *const m_pAlloc; <br>}; <br> <br> <br>/*  Track samples in buffer */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

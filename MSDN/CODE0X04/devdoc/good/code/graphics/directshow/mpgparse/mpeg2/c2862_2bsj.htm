<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MPEG2.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2863"></a>MPEG2.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1996 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>/*  Structures and definitions for MPEG2 filter stuff */ <br> <br>/*  Implement type checking and CompleteConnect */ <br>class CMPEG2SplitterFilter : public CBaseSplitterFilter <br>{ <br>public: <br>    /* This goes in the factory template table to create new instances */ <br>    static CUnknown *CreateInstance(LPUNKNOWN, HRESULT *); <br> <br>    //  Constructor and destructor <br>    CMPEG2SplitterFilter( <br>       LPUNKNOWN pUnk, <br>       HRESULT *phr); <br> <br>    //  Support self-registration <br>    LPAMOVIESETUP_FILTER GetSetupData(); <br> <br>    //  Override type checking <br>    HRESULT CheckInputType(const CMediaType *pmt); <br> <br>    //  Create the parser for this filter <br>    CBaseParser *CreateParser(CParserNotify *pNotify, CMediaType *pType); <br>}; <br> <br>/*  MPEG-2 parsing <br> <br>    We decide which streams we have by a 2-stage process: <br> <br>        We find a system header. <br> <br>        If this lists a program stream map we use that for finding <br>        stream information. <br> <br>        Otherwise we use the list in the system stream header. <br> <br>*/ <br> <br>/*  Parser */ <br>class CMPEG2Parser : public CBaseParser <br>{ <br>public: <br>    CMPEG2Parser(CParserNotify *pNotify, HRESULT *phr) : <br>        CBaseParser(pNotify, phr), <br>        m_bGotFirstPts(FALSE), <br>        m_llFirstPts(0), <br>        m_uCurrentAudioStream(0), <br>        m_uCurrentVideoStream(0), <br>        m_bHasAudio(FALSE), <br>        m_bHasVideo(FALSE), <br>        m_uAudioStreamId(0), <br>        m_uVideoStreamId(0) <br>    { <br>    } <br> <br>    /*  Initialize a parser <br> <br>        pmt     - type of stream if known - can be NULL <br>        pRdr    - way to read the source medium - can be NULL <br>    */ <br>    HRESULT Init(CParseReader *pRdr); <br> <br> <br>    /*  Initialize a stream - make this virtual so we can override <br>        some streams in a derived class <br>    */ <br>    virtual HRESULT InitStream( <br>        UCHAR uStreamId, <br>        const BYTE * pbFirstPacket, <br>        DWORD dwLen <br>    ); <br> <br>    /*  Initialize a stream */ <br>    HRESULT InitAudioStream( <br>        UCHAR uStreamId, <br>        const BYTE * pbFirstPacket, <br>        DWORD dwLen <br>    ); <br> <br>    /*  Initialize a stream */ <br>    HRESULT InitVideoStream( <br>        UCHAR uStreamId, <br>        const BYTE *pbFirstPacket, <br>        DWORD dwLen <br>    ); <br> <br>    /*  Initialize a stream */ <br>    HRESULT InitPrivateStream1( <br>        UCHAR uStreamId, <br>        const BYTE * pbFirstPacket, <br>        DWORD dwLen <br>    ); <br> <br>    /*  Initialize AC3 */ <br>    HRESULT InitAC3( <br>        UCHAR uStreamId, <br>        const BYTE * pbFirstPacket, <br>        DWORD dwLen <br>    ); <br> <br>    /*  Initialize subpicture */ <br>    HRESULT InitSubPicture( <br>        UCHAR uStreamId, <br>        const BYTE * pbFirstPacket, <br>        DWORD dwLen <br>    ); <br> <br>    /*  Get the size and count of buffers preferred based on the <br>        actual content <br>    */ <br>    void GetSizeAndCount(LONG *plSize, LONG *plCount); <br> <br>    /*  Call this to reinitialize for a new stream */ <br>    void StreamReset(); <br> <br>    /*  Call this to pass new stream data : <br> <br>        pbData        - pointer to data <br>        lData         - length of data <br>        plProcessed   - Amount of data consumed <br>    */ <br>    HRESULT Process( <br>        const BYTE * pbData, <br>        LONG lData, <br>        LONG *plProcessed <br>    ); <br> <br>private: <br>    /*  Helper to set timestamps */ <br>    REFERENCE_TIME TimeStamp(LONGLONG llPts) <br>    { <br>        ASSERT(m_bGotFirstPts); <br>        LARGE_INTEGER liPtsOffset; <br>        liPtsOffset.QuadPart = llPts - m_llFirstPts; <br>        liPtsOffset.HighPart &amp;= 1; <br>        liPtsOffset.HighPart = -liPtsOffset.HighPart; <br>        return llMulDiv(liPtsOffset.QuadPart, <br>                        UNITS, <br>                        MPEG_TIME_DIVISOR, <br>                        0); <br>    } <br>private: <br>    /*  Parsing structures */ <br>    class CStream <br>    { <br>    public: <br>        CStream(BYTE uStreamId, BOOL bHasSubId, BYTE uSubId) : <br>                    m_uStreamId(uStreamId), <br>                    m_uSubId(uSubId), <br>                    m_bHasSubId(bHasSubId), <br>                    m_pNotify(NULL), <br>                    m_dwSkip(0), <br>                    m_pNext(NULL) {} <br>        virtual ~CStream() {}          // So we can delete as a CStream <br>        BOOL Initialized() <br>        { <br>            return m_pNotify != NULL &amp;&amp; m_uStreamId != 0xFF; <br>        } <br>        BYTE           m_uStreamId; <br>        BYTE           m_uSubId; <br>        BOOL           m_bHasSubId; <br>        BOOL           m_bDoPES; <br>        DWORD          m_dwSkip; <br>        CStreamNotify *m_pNotify; <br>        CStream       *m_pNext; <br>    }; <br> <br>    HRESULT CreateDefaultStream( <br>        UCHAR   uStreamId, <br>        LPCWSTR lpszName, <br>        CMediaType *pmt, <br>        BOOL  bDoPES = TRUE, <br>        BOOL  bHasSubId = FALSE, <br>        BOOL  buSubId = 0 <br>    ); <br> <br> <br>    /*  Select audio and video streams - there could be multiple of <br>        each <br>    */ <br>    BOOL     m_bHasAudio; <br>    UCHAR    m_uCurrentAudioStream; <br>    BOOL     m_bHasVideo; <br>    UCHAR    m_uCurrentVideoStream; <br> <br>    /*  One stream per possible stream */ <br>    class CStreamInfo { <br>    public: <br>        CStreamInfo() : m_pStream(NULL), m_bExists(FALSE) {} <br>        CStream  *m_pStream; <br>        BOOL      m_bExists; <br> <br>        ~CStreamInfo() <br>        { <br>            while (m_pStream != NULL) { <br>                CStream *pStream = m_pStream; <br>                m_pStream = pStream-&gt;m_pNext; <br>                delete pStream; <br>            } <br>        } <br>        CStream *FindStream(UCHAR uSubId) <br>        { <br>            for (CStream *pSearch = m_pStream; <br>                 pSearch != NULL; <br>                 pSearch = pSearch-&gt;m_pNext) { <br>                if (!pSearch-&gt;m_bHasSubId || pSearch-&gt;m_uSubId == uSubId) { <br>                    /*  Done this one */ <br>                    return pSearch; <br>                } <br>            } <br>            return NULL; <br>        } <br>    }; <br> <br>    /*  Get a stream corresponding to an id */ <br>    CStreamInfo *StreamInfo(UCHAR id) <br>    { <br>        ASSERT(id &gt;= PROGRAM_STREAM_MAP &amp;&amp; <br>               id &lt;= PROGRAM_STREAM_DIRECTORY); <br>        return &amp;m_Streams[id - PROGRAM_STREAM_MAP]; <br>    } <br> <br>    CStreamInfo m_Streams[PROGRAM_STREAM_DIRECTORY - PROGRAM_STREAM_MAP + 1]; <br>    LONGLONG    m_llFirstPts; <br>    BOOL        m_bGotFirstPts; <br> <br>    BYTE        m_uAudioStreamId; <br>    BYTE        m_uVideoStreamId; <br>}; <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MPEG1.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2861"></a>MPEG1.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1996 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>/*  Structures and definitions for MPEG1 filter stuff */ <br> <br>/*  Implement type checking and CompleteConnect */ <br>class CMPEG1SplitterFilter : public CBaseSplitterFilter <br>{ <br>public: <br>    /* This goes in the factory template table to create new instances */ <br>    static CUnknown *CreateInstance(LPUNKNOWN, HRESULT *); <br> <br>    //  Constructor and destructor <br>    CMPEG1SplitterFilter( <br>       LPUNKNOWN pUnk, <br>       HRESULT *phr); <br> <br>    //  Support self-registration <br>    LPAMOVIESETUP_FILTER GetSetupData(); <br> <br>    //  Override type checking <br>    HRESULT CheckInputType(const CMediaType *pmt); <br> <br>    //  Create specific parser <br>    CBaseParser *CreateParser(CParserNotify *pNotify, CMediaType *pType); <br>}; <br> <br>/*  Parser */ <br>class CMPEG1Parser : public CBaseParser <br>{ <br>public: <br>    CMPEG1Parser(CParserNotify *pNotify, HRESULT *phr) : <br>        CBaseParser(pNotify, phr), <br>        m_bGotFirstPts(FALSE), <br>        m_llFirstPts(0) <br>    { <br>    } <br> <br>    /*  Initialize a parser <br> <br>        pmt     - type of stream if known - can be NULL <br>        pRdr    - way to read the source medium - can be NULL <br>    */ <br>    HRESULT Init(CParseReader *pRdr); <br> <br> <br>    /*  Get the size and count of buffers preferred based on the <br>        actual content <br>    */ <br>    void GetSizeAndCount(LONG *plSize, LONG *plCount); <br> <br>    /*  Call this to reinitialize for a new stream */ <br>    void StreamReset(); <br> <br>    /*  Call this to pass new stream data : <br> <br>        pbData        - pointer to data <br>        lData         - length of data <br>        plProcessed   - Amount of data consumed <br>    */ <br>    HRESULT Process( <br>        const BYTE * pbData, <br>        LONG lData, <br>        LONG *plProcessed <br>    ); <br> <br>private: <br>    /*  Helper to set timestamps */ <br>    REFERENCE_TIME TimeStamp(LONGLONG llPts) <br>    { <br>        ASSERT(m_bGotFirstPts); <br>        LARGE_INTEGER liPtsOffset; <br>        liPtsOffset.QuadPart = llPts - m_llFirstPts; <br>        liPtsOffset.HighPart &amp;= 1; <br>        liPtsOffset.HighPart = -liPtsOffset.HighPart; <br>        return llMulDiv(liPtsOffset.QuadPart, <br>                        UNITS, <br>                        MPEG_TIME_DIVISOR, <br>                        0); <br>    } <br>private: <br>    /*  Parsing structures */ <br>    class CStream <br>    { <br>    public: <br>        CStream() : m_uStreamId(0), <br>                    m_pNotify(NULL) {} <br>        BOOL Initialized() <br>        { <br>            return m_pNotify != NULL &amp;&amp; m_uStreamId != 0xFF; <br>        } <br>        BYTE           m_uStreamId; <br>        CStreamNotify *m_pNotify; <br>    }; <br>    CStream  m_Audio; <br>    CStream  m_Video; <br>    LONGLONG m_llFirstPts; <br>    BOOL     m_bGotFirstPts; <br>}; <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

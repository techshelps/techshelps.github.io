<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SETUP.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2925"></a>SETUP.CPP</h2>
<pre><code><br>  //========================================================================= <br>  // <br>  //  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>  //  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>  //  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>  //  PURPOSE. <br>  // <br>  // Copyright (c) 1996 - 1997  Microsoft Corporation.  All Rights Reserved. <br>  // <br>  //========================================================================= <br> <br>  #include &lt;windows.h&gt; <br>  #include "setup.h" <br> <br>  // This sample demonstrates how a 3rd party package can set up the DirectXMedia <br>  // redist. bits from their setup program. This sample assumes the DXMEDIA.EXE <br>  // is sitting in the same directory as the compiled version of this code. <br> <br>  #define TITLE "Sample DXMedia Install Package" <br> <br>  // Forward prototyping <br>  BOOL CALLBACK DialogProc (HWND, UINT, WPARAM, LPARAM); <br> <br>  DWORD ExecuteSynchCmdLine (LPTSTR szProgExe, LPTSTR szCmdLine) <br> <br>    { // ExecuteSynchCmdLine // <br> <br>      DWORD dwTimeout = 30; <br>      DWORD dwRC      = WAIT_TIMEOUT; <br>      MSG   msg; <br>      DWORD dw; <br>      STARTUPINFO StartupInfo; <br>      PROCESS_INFORMATION ProcessInformation; <br> <br>      ZeroMemory(&amp;StartupInfo, sizeof STARTUPINFO); <br>      StartupInfo.cb = sizeof STARTUPINFO;  <br>      StartupInfo.wShowWindow = SW_NORMAL; <br>      ZeroMemory(&amp;ProcessInformation, sizeof PROCESS_INFORMATION); <br> <br>      TCHAR cPad[MAX_PATH]; <br>      lstrcpy(cPad, " "); <br>      lstrcat(cPad, szCmdLine); <br> <br>      if (CreateProcess(szProgExe, cPad, NULL, NULL, NULL, NULL, NULL, NULL, &amp;StartupInfo, &amp;ProcessInformation)) <br> <br>        { // Spin off child process <br> <br>          while (dwRC == WAIT_TIMEOUT) <br> <br>            { // Poll status every 'dwTimeout' milliseconds <br> <br>              dwRC = WaitForSingleObject(ProcessInformation.hProcess, dwTimeout); <br> <br>              while (PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE)) <br>                { <br>                   TranslateMessage(&amp;msg); <br>                   DispatchMessage(&amp;msg); <br>                }     <br> <br>            } // Poll status every 'dwTimeout' milliseconds <br> <br>        } // Spin off child process <br> <br>    GetExitCodeProcess(ProcessInformation.hProcess, &amp;dw); <br> <br>    return dw; <br> <br>    } // ExecuteSynchCmdLine // <br> <br>  int WINAPI WinMain (HINSTANCE a, HINSTANCE b, LPSTR c, int d) <br> <br>  {// WinMain // <br> <br>      HRESULT hr = NOERROR; <br> <br>  // Prompt to install the package <br>      if (!DialogBox(a, MAKEINTRESOURCE(IDD_DIALOG1), GetDesktopWindow(), (DLGPROC)DialogProc)) <br>        return FALSE; // Selected CANCEL <br> <br>      // DXMedia.exe redist. package needs to be in same (current) directory! <br>      hr = ExecuteSynchCmdLine("dxmedia.exe","-id:ExampleIdentifier"); <br> <br>      switch(hr) <br> <br>        { // Most common return codes <br> <br>          case ERROR_SUCCESS: <br>            MessageBox(GetDesktopWindow(), "Redist. package installed successfully; no reboot required.", TITLE, MB_OK); <br>            break; <br> <br>          case ERROR_SUCCESS_REBOOT_REQUIRED: <br>            MessageBox(GetDesktopWindow(), "Redist. package installed successfully; reboot required!", TITLE, MB_ICONHAND); <br>            break; <br> <br>          case E_FAIL: <br>            MessageBox(GetDesktopWindow(), "Redist. package failed to install! Is dxmedia.exe in the same directory?", TITLE, MB_ICONHAND); <br>            break; <br> <br>          default: <br> <br>            TCHAR cDbgMsg[255]; <br>            wsprintf(cDbgMsg, "Redist. package returned an unexpected error code (hr=0x%08X)", hr); <br>            MessageBox(GetDesktopWindow(), cDbgMsg, TITLE, MB_ICONHAND); <br>            break; <br> <br>        } // Most common return codes <br> <br>      return FALSE; <br> <br>    }// WinMain // <br> <br>  BOOL CALLBACK DialogProc (HWND hWnd, UINT mMsg, WPARAM wParam, LPARAM lParam) <br> <br>    { // DialogProc // <br> <br>      switch(mMsg) <br> <br>        { // Msg handling <br> <br>          case WM_COMMAND: <br> <br>            switch(wParam) <br> <br>              { // Command msg handling <br> <br>                case IDOK: <br>                  EndDialog(hWnd,1); <br>                  break; <br> <br>                case IDCANCEL: <br>                  EndDialog(hWnd,0); <br>                  break; <br> <br>              } // Command msg handling <br> <br>            break; <br> <br>        } // Msg handling <br> <br>      return 0; <br> <br>    } // DialogProc // </code></pre>
<p>&nbsp;</p></body>
</HTML>

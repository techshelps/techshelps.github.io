<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SYNTHPRP.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2932"></a>SYNTHPRP.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>// synthprop.cpp - Synthesizer Property Page <br>// <br> <br>#include &lt;windows.h&gt; <br>#include &lt;streams.h&gt; <br>#include &lt;commctrl.h&gt; <br>#include &lt;memory.h&gt; <br>#include &lt;olectl.h&gt; <br> <br>#include "isynth.h" <br>#include "synth.h" <br>#include "synthprp.h" <br>#include "resource.h" <br> <br> <br>// ------------------------------------------------------------------------- <br>// CSynthProperties <br>// ------------------------------------------------------------------------- <br> <br>// <br>// CreateInstance <br>// <br> <br>CUnknown * WINAPI CSynthProperties::CreateInstance(LPUNKNOWN lpunk, HRESULT *phr) <br>{ <br>    CUnknown *punk = new CSynthProperties(lpunk, phr); <br>    if (punk == NULL) { <br>        *phr = E_OUTOFMEMORY; <br>    } <br> <br>    return punk; <br>} <br> <br> <br>// <br>// Constructor <br>// <br>// Creaete a Property page object for the synthesizer <br> <br>CSynthProperties::CSynthProperties(LPUNKNOWN lpunk, HRESULT *phr) <br>    : CBasePropertyPage(NAME("Synth Property Page"), lpunk, <br>        IDD_SYNTHPROP1,IDS_SYNTHPROPNAME) <br>    , m_pSynth(NULL) <br>    , m_iSweepStart(DefaultSweepStart) <br>    , m_iSweepEnd(DefaultSweepEnd) <br>, m_fWindowInActive(TRUE) <br>{ <br>    ASSERT(phr); <br> <br>    InitCommonControls(); <br>} <br> <br>// <br>// OnConnect <br>// <br>// Give us the filter to communicate with <br> <br>HRESULT CSynthProperties::OnConnect(IUnknown *pUnknown) <br>{ <br>    ASSERT(m_pSynth == NULL); <br> <br>    // Ask the filter for it's control interface <br> <br>    HRESULT hr = pUnknown-&gt;QueryInterface(IID_ISynth,(void **)&amp;m_pSynth); <br>    if (FAILED(hr)) { <br>        return E_NOINTERFACE; <br>    } <br> <br>    ASSERT(m_pSynth); <br> <br>    // Get current filter state <br>    m_pSynth-&gt;get_BitsPerSample(&amp;m_iBitsPerSampleOriginal); <br>    m_pSynth-&gt;get_Waveform(&amp;m_iWaveformOriginal); <br>    m_pSynth-&gt;get_Frequency(&amp;m_iFrequencyOriginal); <br>    m_pSynth-&gt;get_Channels(&amp;m_iChannelsOriginal); <br>    m_pSynth-&gt;get_SamplesPerSec(&amp;m_iSamplesPerSecOriginal); <br>    m_pSynth-&gt;get_Amplitude(&amp;m_iAmplitudeOriginal); <br> <br>    return NOERROR; <br>} <br> <br> <br>// <br>// OnDisconnect <br>// <br>// Release the interface <br> <br>HRESULT CSynthProperties::OnDisconnect() <br>{ <br>    // Release the interface <br> <br>    if (m_pSynth == NULL) { <br>        return E_UNEXPECTED; <br>    } <br> <br>    m_pSynth-&gt;put_Waveform(m_iWaveformOriginal); <br>    m_pSynth-&gt;put_Frequency(m_iFrequencyOriginal); <br>    m_pSynth-&gt;put_Amplitude(m_iAmplitudeOriginal); <br> <br>    m_pSynth-&gt;put_Channels(m_iChannelsOriginal); <br>    m_pSynth-&gt;put_BitsPerSample(m_iBitsPerSampleOriginal); <br>    m_pSynth-&gt;put_SamplesPerSec(m_iSamplesPerSecOriginal); <br> <br>    m_pSynth-&gt;Release(); <br>    m_pSynth = NULL; <br>    return NOERROR; <br>} <br> <br> <br>// <br>// OnActivate <br>// <br>// Called on dialog creation <br> <br>HRESULT CSynthProperties::OnActivate(void) <br>{ <br>    InitPropertiesDialog(m_hwnd); <br> <br>    ASSERT(m_hwndFreqSlider); <br> <br>m_fWindowInActive = FALSE; <br>    return NOERROR; <br>} <br> <br>// <br>// OnDeactivate <br>// <br>// Called on dialog destruction <br> <br>HRESULT <br>CSynthProperties::OnDeactivate(void) <br>{ <br>m_fWindowInActive = TRUE; <br>    return NOERROR; <br>} <br> <br> <br>// <br>// OnApplyChanges <br>// <br>// User pressed the Apply button, remember the current settings <br> <br>HRESULT CSynthProperties::OnApplyChanges(void) <br>{ <br>    m_pSynth-&gt;get_BitsPerSample(&amp;m_iBitsPerSampleOriginal); <br>    m_pSynth-&gt;get_Waveform(&amp;m_iWaveformOriginal); <br>    m_pSynth-&gt;get_Frequency(&amp;m_iFrequencyOriginal); <br>    m_pSynth-&gt;get_Channels(&amp;m_iChannelsOriginal); <br>    m_pSynth-&gt;get_SamplesPerSec(&amp;m_iSamplesPerSecOriginal); <br>    m_pSynth-&gt;get_Amplitude(&amp;m_iAmplitudeOriginal); <br> <br>    return NOERROR; <br>} <br> <br> <br>// <br>// OnReceiveMessages <br>// <br>// Handles the messages for our property window <br> <br>BOOL CSynthProperties::OnReceiveMessage( HWND hwnd <br>                                , UINT uMsg <br>                                , WPARAM wParam <br>                                , LPARAM lParam) <br>{ <br> <br>if(m_fWindowInActive) <br>return FALSE; <br> <br>    switch (uMsg) { <br> <br>    case WM_PROPERTYPAGE_ENABLE: <br>        // Our private message that our owning filter sends us when changing to a Run / Stop / Pause <br>        // state.  if lParam, then enable the controls which affect the format; if not lParam, then <br>        // disable the controls that affect the format. <br> <br>        EnableWindow (GetDlgItem (hwnd, IDC_SAMPLINGFREQ11), (BOOL) lParam); <br>        EnableWindow (GetDlgItem (hwnd, IDC_SAMPLINGFREQ22), (BOOL) lParam); <br>        EnableWindow (GetDlgItem (hwnd, IDC_SAMPLINGFREQ44), (BOOL) lParam); <br> <br>        EnableWindow (GetDlgItem (hwnd, IDC_BITSPERSAMPLE8),  (BOOL) lParam); <br>        EnableWindow (GetDlgItem (hwnd, IDC_BITSPERSAMPLE16), (BOOL) lParam); <br> <br>        EnableWindow (GetDlgItem (hwnd, IDC_CHANNELS1), (BOOL) lParam); <br>        EnableWindow (GetDlgItem (hwnd, IDC_CHANNELS2), (BOOL) lParam); <br>        break; <br> <br>    case WM_VSCROLL: <br>        if ((HWND) lParam == m_hwndFreqSlider) <br>            OnFreqSliderNotification(LOWORD (wParam), HIWORD (wParam)); <br>        else if ((HWND) lParam == m_hwndAmplitudeSlider) <br>            OnAmpSliderNotification(LOWORD (wParam), HIWORD (wParam)); <br>        SetDirty(); <br>        return TRUE; <br> <br>    case WM_COMMAND: <br> <br>        switch (LOWORD(wParam)) { <br> <br>        case IDC_FREQUENCYTEXT: <br>        { <br>            int iNotify = HIWORD (wParam); <br> <br>            if (iNotify == EN_KILLFOCUS) { <br>                BOOL fOK; <br> <br>                int iPos = GetDlgItemInt (hwnd, IDC_FREQUENCYTEXT, &amp;fOK, FALSE); <br>                int iMaxFreq; <br> <br>                m_pSynth-&gt;get_SamplesPerSec(&amp;iMaxFreq); <br>                iMaxFreq /= 2; <br> <br>                if (!fOK || (iPos &gt; iMaxFreq || iPos &lt; 0)) { <br>                    int iCurrentFreq; <br>                    m_pSynth-&gt;get_Frequency(&amp;iCurrentFreq); <br>                    SetDlgItemInt (hwnd, IDC_FREQUENCYTEXT, iCurrentFreq, FALSE); <br>                    break; <br>                } <br> <br>   SendMessage(m_hwndFreqSlider, TBM_SETPOS, TRUE, (LPARAM) iMaxFreq - iPos); <br>                m_pSynth-&gt;put_Frequency(iPos); <br>                SetDirty(); <br>            } <br>        } <br>        break; <br> <br>        case IDC_AMPLITUDETEXT: <br>        { <br>            int iNotify = HIWORD (wParam); <br> <br>            if (iNotify == EN_KILLFOCUS) { <br>                BOOL fOK; <br> <br>                int iPos = GetDlgItemInt (hwnd, IDC_AMPLITUDETEXT, &amp;fOK, FALSE); <br> <br>                if (!fOK || (iPos &gt; MaxAmplitude || iPos &lt; 0)) { <br>                    int iCurrentAmplitude; <br> <br>                    m_pSynth-&gt;get_Amplitude(&amp;iCurrentAmplitude); <br>                    SetDlgItemInt (hwnd, IDC_AMPLITUDETEXT, iCurrentAmplitude, FALSE); <br>                    break; <br>                } <br> <br>    SendMessage(m_hwndAmplitudeSlider, TBM_SETPOS, TRUE, (LPARAM) MaxAmplitude - iPos); <br>                m_pSynth-&gt;put_Amplitude(iPos); <br>                SetDirty(); <br>            } <br>        } <br>        break; <br> <br>        case IDC_SAMPLINGFREQ11: <br>            m_pSynth-&gt;put_SamplesPerSec(11025); <br>            RecalcFreqSlider(); <br>            SetDirty(); <br>            break; <br>        case IDC_SAMPLINGFREQ22: <br>            m_pSynth-&gt;put_SamplesPerSec(22050); <br>            RecalcFreqSlider(); <br>            SetDirty(); <br>            break; <br>        case IDC_SAMPLINGFREQ44: <br>            m_pSynth-&gt;put_SamplesPerSec(44100); <br>            RecalcFreqSlider(); <br>            SetDirty(); <br>            break; <br> <br> <br>        case IDC_BITSPERSAMPLE8: <br>            m_pSynth-&gt;put_BitsPerSample(8); <br>            SetDirty(); <br>            break; <br>        case IDC_BITSPERSAMPLE16: <br>            m_pSynth-&gt;put_BitsPerSample(16); <br>            SetDirty(); <br>            break; <br> <br> <br>        case IDC_CHANNELS1: <br>            m_pSynth-&gt;put_Channels(1); <br>            SetDirty(); <br>            break; <br>        case IDC_CHANNELS2: <br>            m_pSynth-&gt;put_Channels(2); <br>            SetDirty(); <br>            break; <br>     <br> <br>        case IDC_WAVESINE: <br>            m_pSynth-&gt;put_Waveform(WAVE_SINE); <br>            SetDirty(); <br>            break; <br>        case IDC_WAVESQUARE: <br>            m_pSynth-&gt;put_Waveform(WAVE_SQUARE); <br>            SetDirty(); <br>            break; <br>        case IDC_WAVESAWTOOTH: <br>            m_pSynth-&gt;put_Waveform(WAVE_SAWTOOTH); <br>            SetDirty(); <br>            break; <br>        case IDC_WAVESWEEP: <br>            m_pSynth-&gt;put_Waveform(WAVE_SINESWEEP); <br>            SetDirty(); <br>            break; <br> <br>        default: <br>            break; <br> <br>        } <br>        return TRUE; <br> <br>    case WM_DESTROY: <br>        return TRUE; <br> <br>    default: <br>        return FALSE; <br> <br>    } <br>    return TRUE; <br>} <br> <br> <br>// <br>// InitPropertiesDialog <br>// <br> <br>void <br>CSynthProperties::InitPropertiesDialog(HWND hwndParent) <br>{ <br>    m_hwndFreqSlider = GetDlgItem (hwndParent, IDC_FREQTRACKBAR); <br>    m_hwndFreqText  = GetDlgItem (hwndParent, IDC_FREQUENCYTEXT); <br>    m_hwndAmplitudeSlider = GetDlgItem (hwndParent, IDC_AMPLITUDETRACKBAR); <br>    m_hwndAmplitudeText  = GetDlgItem (hwndParent, IDC_AMPLITUDETEXT); <br> <br>    // Sampling Frequency <br>    int i; <br>    switch (m_iSamplesPerSecOriginal) { <br>    case 11025: i = IDC_SAMPLINGFREQ11; break; <br>    case 22050: i = IDC_SAMPLINGFREQ22; break; <br>    case 44100: i = IDC_SAMPLINGFREQ44; break; <br>    default: <br>        ASSERT(0); <br>    } <br>    CheckRadioButton(hwndParent, <br>        IDC_SAMPLINGFREQ11, <br>        IDC_SAMPLINGFREQ44, <br>        i); <br> <br>    // BitsPerSample <br>    CheckRadioButton(hwndParent, <br>                IDC_BITSPERSAMPLE8, <br>                IDC_BITSPERSAMPLE16, <br>                IDC_BITSPERSAMPLE8 + m_iBitsPerSampleOriginal / 8 - 1); <br> <br>    // Waveform 0 == sine, 1 == square, ... <br>    CheckRadioButton(hwndParent, <br>                IDC_WAVESINE, <br>                IDC_WAVESWEEP, <br>                IDC_WAVESINE + m_iWaveformOriginal); <br> <br>    // Channels <br>    CheckRadioButton(hwndParent, <br>                IDC_CHANNELS1, <br>                IDC_CHANNELS2, <br>                IDC_CHANNELS1 + m_iChannelsOriginal - 1); <br> <br>    // <br>    // Frequency trackbar <br>    // <br> <br>    RecalcFreqSlider(); <br> <br>    // <br>    //  Amplitude trackbar <br>    // <br> <br>    SendMessage(m_hwndAmplitudeSlider, TBM_SETRANGE, TRUE, <br>        MAKELONG(MinAmplitude, MaxAmplitude) ); <br> <br>    SendMessage(m_hwndAmplitudeSlider, TBM_SETTIC, 0, <br>        ((MinAmplitude + MaxAmplitude) / 2)); <br> <br>    SendMessage(m_hwndAmplitudeSlider, TBM_SETPOS, TRUE, <br>        (LPARAM) (MaxAmplitude - m_iAmplitudeOriginal)); <br> <br>    SetDlgItemInt (hwndParent, IDC_AMPLITUDETEXT, <br>        m_iAmplitudeOriginal, TRUE); <br>} <br> <br> <br>// <br>// RecalcFreqSlider <br>// <br>// Set the range, current settings for the Freq scrollbar <br> <br>void <br>CSynthProperties::RecalcFreqSlider(void) <br>{ <br>    int iPos, iMaxFreq; <br> <br>    // Limit the frequency to one half the sampling frequency <br> <br>    m_pSynth-&gt;get_SamplesPerSec(&amp;iMaxFreq); <br>    iMaxFreq /= 2; <br>    m_pSynth-&gt;get_Frequency(&amp;iPos); <br>    if (iPos &gt; iMaxFreq) <br>        iPos = iMaxFreq; <br> <br>    SendMessage(m_hwndFreqSlider, TBM_SETRANGE, TRUE, <br>        MAKELONG(0, iMaxFreq)); <br> <br>    SendMessage(m_hwndFreqSlider, TBM_SETTIC, 0, <br>        iMaxFreq / 2); <br> <br>    SendMessage(m_hwndFreqSlider, TBM_SETPOS, TRUE, <br>        (LPARAM) (iMaxFreq - iPos)); <br> <br>    SendMessage(m_hwndFreqSlider, TBM_SETPAGESIZE, 0, 10); <br> <br>    SendMessage(m_hwndFreqSlider, TBM_SETSEL, TRUE, <br>        MAKELONG (iMaxFreq - m_iSweepEnd, iMaxFreq - m_iSweepStart)); <br> <br>    SetDlgItemInt (m_hwnd, IDC_FREQUENCYTEXT, <br>        iPos, TRUE); <br> <br>} <br> <br>// <br>// OnFreqSliderNotification <br>// <br>// Handle the notification meesages from the slider control <br> <br>void <br>CSynthProperties::OnFreqSliderNotification(WPARAM wParam, WORD wPosition) <br>{ <br>    int MaxFreq; <br>    int Freq; <br>    int SliderPos; <br> <br>    switch (wParam) { <br> <br>    case TB_ENDTRACK: <br>    case TB_THUMBTRACK: <br>    case TB_LINEDOWN: <br>    case TB_LINEUP: { <br>        // max frequency of slider is half the sampling frequency <br>        m_pSynth-&gt;get_SamplesPerSec (&amp;MaxFreq); <br>        MaxFreq /= 2; <br>        SliderPos = (int) SendMessage(m_hwndFreqSlider, TBM_GETPOS, 0, 0L); <br>        Freq = MaxFreq - SliderPos; <br>        m_pSynth-&gt;put_Frequency (Freq); <br> <br>        // Set the end of sweep to the current slider pos <br>        if (!(GetKeyState (VK_SHIFT) &amp; 0x8000)) { <br>            m_iSweepEnd = Freq; <br>        } <br> <br>        // Set the start of the sweep range if SHIFT key is pressed <br>        if (GetKeyState (VK_SHIFT) &amp; 0x8000) { <br>            m_iSweepStart = Freq; <br>        } <br>        m_pSynth-&gt;put_SweepRange (m_iSweepStart, m_iSweepEnd); <br> <br>        if (m_iSweepEnd &gt; m_iSweepStart) <br>            SendMessage(m_hwndFreqSlider, TBM_SETSEL, TRUE, <br>                MAKELONG (MaxFreq - m_iSweepEnd, MaxFreq - m_iSweepStart)); <br>        else <br>            SendMessage(m_hwndFreqSlider, TBM_SETSEL, TRUE, <br>                MAKELONG (MaxFreq - m_iSweepStart, MaxFreq - m_iSweepEnd)); <br> <br>        SetDlgItemInt (m_hwnd, IDC_FREQUENCYTEXT, Freq, TRUE); <br> <br>    } <br>    break; <br> <br>    } <br>} <br> <br>// <br>// OnAmpSliderNotification <br>// <br>// Handle the notification meesages from the slider control <br> <br>void <br>CSynthProperties::OnAmpSliderNotification(WPARAM wParam, WORD wPosition) <br>{ <br>    switch (wParam) { <br> <br>    case TB_ENDTRACK: <br>    case TB_THUMBTRACK: <br>    case TB_LINEDOWN: <br>    case TB_LINEUP: { <br>        int Level = (int) SendMessage(m_hwndAmplitudeSlider, TBM_GETPOS, 0, 0L); <br>        m_pSynth-&gt;put_Amplitude (MaxAmplitude - Level); <br>        SetDlgItemInt (m_hwnd, IDC_AMPLITUDETEXT, MaxAmplitude - Level, TRUE); <br>    } <br>    break; <br> <br>    } <br>} <br> <br>// <br>// SetDirty <br>// <br>// notifies the property page site of changes <br> <br>void <br>CSynthProperties::SetDirty() <br>{ <br>    m_bDirty = TRUE; <br>    if (m_pPageSite) <br>        m_pPageSite-&gt;OnStatusChange(PROPPAGESTATUS_DIRTY); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

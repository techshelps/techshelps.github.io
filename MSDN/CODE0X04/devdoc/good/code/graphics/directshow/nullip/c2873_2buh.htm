<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TEXTTYPE.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2879"></a>TEXTTYPE.CPP</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright (c) 1992 - 1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>// texttype.cpp <br>// <br> <br>// CTextMediaType <br> <br>#include &lt;windows.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;streams.h&gt; <br> <br>#include &lt;string.h&gt; <br>#include &lt;tchar.h&gt; <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;wchar.h&gt; <br> <br>#include "resource.h" <br>#include "texttype.h" <br> <br> <br>// <br>// AsText <br>// <br>// Return the media type as a text string. Will place szAfterMajor after <br>// the text string for the major type and szAfterOthers after all other <br>// string apart from the last one. <br>// <br>void CTextMediaType::AsText(LPTSTR szType, <br>                            unsigned int iLen, <br>                            LPTSTR szAfterMajor, <br>                            LPTSTR szAfterOthers, <br>                            LPTSTR szAtEnd) <br>{ <br>    ASSERT(szType); <br> <br>    // <br>    // Convert Majortype to string <br>    // <br>    TCHAR szMajorType[100]; <br>    UINT  iMajorType = 100; <br> <br>    CLSID2String(szMajorType, iMajorType, &amp;majortype); <br> <br>    // <br>    // Convert Subtype to string <br>    // <br>    TCHAR szSubType[100]; <br>    UINT  iSubType = 100; <br>    CLSID2String(szSubType, iSubType, &amp;subtype); <br> <br>    // <br>    // Convert Format to string <br>    // <br>    TCHAR szFormat[300]; <br>    UINT  iFormat = 300; <br>    Format2String(szFormat, iFormat, FormatType(), Format(), FormatLength()); <br> <br>    // <br>    // Obtain the strings preceeding the Major Type, Sub Type and Format. <br>    // <br>    TCHAR szPreMajor[50]; <br>    TCHAR szPreSub[50]; <br>    TCHAR szPreFormat[50]; <br> <br>    LoadString(g_hInst, IDS_PREMAJOR, szPreMajor, 50); <br>    LoadString(g_hInst, IDS_PRESUB, szPreSub, 50); <br>    LoadString(g_hInst, IDS_PREFORMAT, szPreFormat, 50); <br> <br>    _sntprintf(szType, iLen, TEXT("%s%s%s%s%s%s%s%s%s"), <br>                szPreMajor,  szMajorType, szAfterMajor, <br>                szPreSub,    szSubType, szAfterOthers, <br>                szPreFormat, szFormat, szAtEnd); <br>} <br> <br> <br>// <br>// CLSID2String <br>// <br>// Find a string description for a given GUID <br>// <br>void CTextMediaType::CLSID2String(LPTSTR szBuffer, <br>                                  UINT iLength, <br>                                  const GUID* pGuid) <br>{ <br>    TCHAR *pGuidName = GuidNames[*pGuid]; <br>    UINT strLength = lstrlen(pGuidName) + 1; <br>    lstrcpyn(szBuffer,pGuidName,min(strLength,iLength)); <br>} <br> <br> <br>// <br>// Format2String <br>// <br>// Converts a format block to a string <br>// <br>void CTextMediaType::Format2String(LPTSTR szBuffer, <br>                                   UINT iLength, <br>                                   const GUID* pFormatType, <br>                                   BYTE* pFormat, <br>                                   ULONG lFormatLength) <br>{ <br>    UNREFERENCED_PARAMETER(lFormatLength); <br> <br>    // <br>    // Get the name of the format <br>    // <br>    TCHAR szName[50]; <br>    UINT iName = 50; <br>    CLSID2String(szName, iName, pFormatType); <br> <br>    // <br>    // Video Format <br>    // <br>    if (IsEqualGUID(*pFormatType, FORMAT_VideoInfo) || <br>        IsEqualGUID(*pFormatType, FORMAT_MPEGVideo)) { <br> <br>        VIDEOINFOHEADER * pVideoFormat = (VIDEOINFOHEADER *) pFormat; <br> <br>        _sntprintf(szBuffer, iLength, TEXT("%4.4hs %dx%d, %d bits") <br>                   , (pVideoFormat-&gt;bmiHeader.biCompression == 0) ? "RGB" : <br>                         ((pVideoFormat-&gt;bmiHeader.biCompression == BI_BITFIELDS) ? "BITF" : <br>                         (LPTSTR) &amp;pVideoFormat-&gt;bmiHeader.biCompression ) <br>                   , pVideoFormat-&gt;bmiHeader.biWidth <br>                   , pVideoFormat-&gt;bmiHeader.biHeight <br>                   , pVideoFormat-&gt;bmiHeader.biBitCount); <br> <br>         return; <br>    } <br> <br>    // <br>    // Audio Format <br>    // <br>    if (IsEqualGUID(*pFormatType, FORMAT_WaveFormatEx)) { <br>        WAVEFORMATEX *pWaveFormat = (WAVEFORMATEX *) pFormat; <br> <br>        // !!! use ACM to get format type name? <br>        _sntprintf(szBuffer, iLength, TEXT("%s: %.3f KHz %d bit %s ") <br>                   , szName <br>                   , (double) pWaveFormat-&gt;nSamplesPerSec / 1000.0 <br>                   , pWaveFormat-&gt;wBitsPerSample <br>                   , pWaveFormat-&gt;nChannels == 1 ? TEXT("mono") : TEXT("stereo") <br>                  ); <br> <br>        return; <br>    } <br>    _sntprintf(szBuffer, iLength, TEXT("%s"), szName); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ANTIPOLY.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3530"></a>ANTIPOLY.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  antipoly.c <br> *  This program draws filled polygons with antialiased <br> *  edges.  The special GL_SRC_ALPHA_SATURATE blending  <br> *  function is used. <br> *  Pressing the left mouse button turns the antialiasing <br> *  on and off. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void CALLBACK toggleSmooth (AUX_EVENTREC *event); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br>void CALLBACK display(void); <br> <br>GLboolean polySmooth; <br> <br>void myinit(void) <br>{ <br>    GLfloat mat_ambient[] = { 0.0, 0.0, 0.0, 1.00 }; <br>    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.00 }; <br>    GLfloat mat_shininess[] = { 15.0 }; <br> <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess); <br> <br>    glEnable (GL_LIGHTING); <br>    glEnable (GL_LIGHT0); <br>    glEnable (GL_BLEND); <br>    glCullFace (GL_BACK); <br>    glEnable (GL_CULL_FACE); <br>    glEnable (GL_POLYGON_SMOOTH); <br>    polySmooth = GL_TRUE; <br> <br>    glClearColor (0.0, 0.0, 0.0, 0.0); <br>} <br> <br>void CALLBACK toggleSmooth (AUX_EVENTREC *event) <br>{ <br>    if (polySmooth) { <br>    polySmooth = GL_FALSE; <br>    glDisable (GL_BLEND); <br>    glDisable (GL_POLYGON_SMOOTH); <br>    glEnable (GL_DEPTH_TEST); <br>    } <br>    else { <br>    polySmooth = GL_TRUE; <br>    glEnable (GL_BLEND); <br>    glEnable (GL_POLYGON_SMOOTH); <br>    glDisable (GL_DEPTH_TEST); <br>    } <br>} <br> <br>/*  Note:  polygons must be drawn from front to back <br> *  for proper blending. <br> */ <br>void CALLBACK display(void) <br>{ <br>    GLfloat position[] = { 0.0, 0.0, 1.0, 0.0 }; <br>    GLfloat mat_cube1[] = { 0.75, 0.75, 0.0, 1.0 }; <br>    GLfloat mat_cube2[] = { 0.0, 0.75, 0.75, 1.0 }; <br> <br>    if (polySmooth) <br>    glClear (GL_COLOR_BUFFER_BIT); <br>    else  <br>    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br> <br>    glPushMatrix (); <br>    glTranslatef (0.0, 0.0, -8.0);     <br>    glLightfv (GL_LIGHT0, GL_POSITION, position); <br> <br>    glBlendFunc (GL_SRC_ALPHA_SATURATE, GL_ONE); <br> <br>    glPushMatrix (); <br>    glRotatef (30.0, 1.0, 0.0, 0.0); <br>    glRotatef (60.0, 0.0, 1.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_cube1); <br>    auxSolidCube (1.0); <br>    glPopMatrix (); <br> <br>    glTranslatef (0.0, 0.0, -2.0);     <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_cube2); <br>    glRotatef (30.0, 0.0, 1.0, 0.0); <br>    glRotatef (60.0, 1.0, 0.0, 0.0); <br>    auxSolidCube (1.0); <br> <br>    glPopMatrix (); <br> <br>    glFlush (); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    h = (h == 0) ? 1 : h; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluPerspective(30.0, (GLfloat) w/(GLfloat) h, 1.0, 20.0); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>/*  Main Loop <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_ALPHA | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 200, 200); <br>    auxInitWindow ("Antialiased Edges"); <br>    auxMouseFunc (AUX_LEFTBUTTON, AUX_MOUSEDOWN, toggleSmooth); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TEAPOTS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3586"></a>TEAPOTS.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  teapots.c <br> *  This program demonstrates lots of material properties. <br> *  A single light source illuminates the objects. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void renderTeapot (GLfloat x, GLfloat y, <br>    GLfloat ambr, GLfloat ambg, GLfloat ambb,  <br>    GLfloat difr, GLfloat difg, GLfloat difb,  <br>    GLfloat specr, GLfloat specg, GLfloat specb, GLfloat shine); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>/*  Initialize depth buffer, projection matrix, light source, <br> *  and lighting model.  Do not specify a material property here. <br> */ <br>void myinit(void) <br>{ <br>    GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 }; <br>    GLfloat diffuse[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat position[] = { 0.0, 3.0, 3.0, 0.0 }; <br>     <br>    GLfloat lmodel_ambient[] = { 0.2, 0.2, 0.2, 1.0 }; <br>    GLfloat local_view[] = { 0.0 }; <br> <br>    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient); <br>    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse); <br>    glLightfv(GL_LIGHT0, GL_POSITION, position); <br>    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient); <br>    glLightModelfv(GL_LIGHT_MODEL_LOCAL_VIEWER, local_view); <br> <br>    glFrontFace (GL_CW); <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>    glEnable(GL_AUTO_NORMAL); <br>    glEnable(GL_NORMALIZE); <br>    glEnable(GL_DEPTH_TEST); <br>    glDepthFunc(GL_LESS); <br>} <br> <br>/*  Move object into position.  Use 3rd through 12th parameters <br> *  to specify the material property.  Draw a teapot. <br> */ <br>void renderTeapot (GLfloat x, GLfloat y,  <br>    GLfloat ambr, GLfloat ambg, GLfloat ambb,  <br>    GLfloat difr, GLfloat difg, GLfloat difb,  <br>    GLfloat specr, GLfloat specg, GLfloat specb, GLfloat shine) <br>{ <br>    float mat[4]; <br> <br>    glPushMatrix(); <br>    glTranslatef (x, y, 0.0); <br>    mat[0] = ambr; mat[1] = ambg; mat[2] = ambb; mat[3] = 1.0;  <br>    glMaterialfv (GL_FRONT, GL_AMBIENT, mat); <br>    mat[0] = difr; mat[1] = difg; mat[2] = difb;     <br>    glMaterialfv (GL_FRONT, GL_DIFFUSE, mat); <br>    mat[0] = specr; mat[1] = specg; mat[2] = specb; <br>    glMaterialfv (GL_FRONT, GL_SPECULAR, mat); <br>    glMaterialf (GL_FRONT, GL_SHININESS, shine*128.0); <br>    auxSolidTeapot(1.0); <br>    glPopMatrix(); <br>} <br> <br>/*  First column:  emerald, jade, obsidian, pearl, ruby, turquoise <br> *  2nd column:  brass, bronze, chrome, copper, gold, silver <br> *  3rd column:  black, cyan, green, red, white, yellow plastic <br> *  4th column:  black, cyan, green, red, white, yellow rubber <br> */ <br>void CALLBACK display(void) <br>{ <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br>    renderTeapot (2.0, 17.0, 0.0215, 0.1745, 0.0215,  <br>    0.07568, 0.61424, 0.07568, 0.633, 0.727811, 0.633, 0.6); <br>    renderTeapot (2.0, 14.0, 0.135, 0.2225, 0.1575, <br>    0.54, 0.89, 0.63, 0.316228, 0.316228, 0.316228, 0.1); <br>    renderTeapot (2.0, 11.0, 0.05375, 0.05, 0.06625, <br>    0.18275, 0.17, 0.22525, 0.332741, 0.328634, 0.346435, 0.3); <br>    renderTeapot (2.0, 8.0, 0.25, 0.20725, 0.20725, <br>    1, 0.829, 0.829, 0.296648, 0.296648, 0.296648, 0.088); <br>    renderTeapot (2.0, 5.0, 0.1745, 0.01175, 0.01175, <br>    0.61424, 0.04136, 0.04136, 0.727811, 0.626959, 0.626959, 0.6); <br>    renderTeapot (2.0, 2.0, 0.1, 0.18725, 0.1745, <br>    0.396, 0.74151, 0.69102, 0.297254, 0.30829, 0.306678, 0.1); <br>    renderTeapot (6.0, 17.0, 0.329412, 0.223529, 0.027451, <br>    0.780392, 0.568627, 0.113725, 0.992157, 0.941176, 0.807843, <br>    0.21794872); <br>    renderTeapot (6.0, 14.0, 0.2125, 0.1275, 0.054, <br>    0.714, 0.4284, 0.18144, 0.393548, 0.271906, 0.166721, 0.2); <br>    renderTeapot (6.0, 11.0, 0.25, 0.25, 0.25,  <br>    0.4, 0.4, 0.4, 0.774597, 0.774597, 0.774597, 0.6); <br>    renderTeapot (6.0, 8.0, 0.19125, 0.0735, 0.0225, <br>    0.7038, 0.27048, 0.0828, 0.256777, 0.137622, 0.086014, 0.1); <br>    renderTeapot (6.0, 5.0, 0.24725, 0.1995, 0.0745, <br>    0.75164, 0.60648, 0.22648, 0.628281, 0.555802, 0.366065, 0.4); <br>    renderTeapot (6.0, 2.0, 0.19225, 0.19225, 0.19225, <br>    0.50754, 0.50754, 0.50754, 0.508273, 0.508273, 0.508273, 0.4); <br>    renderTeapot (10.0, 17.0, 0.0, 0.0, 0.0, 0.01, 0.01, 0.01, <br>    0.50, 0.50, 0.50, .25); <br>    renderTeapot (10.0, 14.0, 0.0, 0.1, 0.06, 0.0, 0.50980392, 0.50980392, <br>    0.50196078, 0.50196078, 0.50196078, .25); <br>    renderTeapot (10.0, 11.0, 0.0, 0.0, 0.0,  <br>    0.1, 0.35, 0.1, 0.45, 0.55, 0.45, .25); <br>    renderTeapot (10.0, 8.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, <br>    0.7, 0.6, 0.6, .25); <br>    renderTeapot (10.0, 5.0, 0.0, 0.0, 0.0, 0.55, 0.55, 0.55, <br>    0.70, 0.70, 0.70, .25); <br>    renderTeapot (10.0, 2.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0, <br>    0.60, 0.60, 0.50, .25); <br>    renderTeapot (14.0, 17.0, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, <br>    0.4, 0.4, 0.4, .078125); <br>    renderTeapot (14.0, 14.0, 0.0, 0.05, 0.05, 0.4, 0.5, 0.5, <br>    0.04, 0.7, 0.7, .078125); <br>    renderTeapot (14.0, 11.0, 0.0, 0.05, 0.0, 0.4, 0.5, 0.4, <br>    0.04, 0.7, 0.04, .078125); <br>    renderTeapot (14.0, 8.0, 0.05, 0.0, 0.0, 0.5, 0.4, 0.4, <br>    0.7, 0.04, 0.04, .078125); <br>    renderTeapot (14.0, 5.0, 0.05, 0.05, 0.05, 0.5, 0.5, 0.5, <br>    0.7, 0.7, 0.7, .078125); <br>    renderTeapot (14.0, 2.0, 0.05, 0.05, 0.0, 0.5, 0.5, 0.4,  <br>    0.7, 0.7, 0.04, .078125); <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    if (w &lt;= h) <br>    glOrtho (0.0, 16.0, 0.0, 16.0*(GLfloat)h/(GLfloat)w,  <br>        -10.0, 10.0); <br>    else <br>    glOrtho (0.0, 16.0*(GLfloat)w/(GLfloat)h, 0.0, 16.0,  <br>        -10.0, 10.0); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 500, 600); <br>    auxInitWindow ("Material Properties"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

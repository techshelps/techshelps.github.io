<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FOGINDEX.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3550"></a>FOGINDEX.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  fogindex.c <br> *  This program demonstrates fog in color index mode.   <br> *  Three cones are drawn at different z values in a linear  <br> *  fog.  32 contiguous colors (from 16 to 47) are loaded  <br> *  with a color ramp. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br>void CALLBACK display(void); <br> <br>/*  Initialize color map and fog.  Set screen clear color <br> *  to end of color ramp. <br> */ <br>#define NMCOLORS 32 <br>#define RAMPSTART 16 <br> <br>void myinit(void) <br>{ <br>    int i; <br> <br>    glEnable(GL_DEPTH_TEST); <br>    glDepthFunc(GL_LESS); <br>    for (i = 0; i &lt; NMCOLORS; i++) { <br>    GLfloat shade; <br>    shade = (GLfloat) (NMCOLORS-i)/(GLfloat) NMCOLORS; <br>    auxSetOneColor (16 + i, shade, shade, shade); <br>    } <br>    glEnable(GL_FOG); <br> <br>    glFogi (GL_FOG_MODE, GL_LINEAR); <br>    glFogi (GL_FOG_INDEX, NMCOLORS); <br>    glFogf (GL_FOG_START, 0.0); <br>    glFogf (GL_FOG_END, 4.0); <br>    glHint (GL_FOG_HINT, GL_NICEST); <br>    glClearIndex((GLfloat) (NMCOLORS+RAMPSTART-1)); <br>} <br> <br>/*  display() renders 3 cones at different z positions. <br> */ <br>void CALLBACK display(void) <br>{ <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br>    glPushMatrix (); <br>    glTranslatef (-1.0, -1.0, -1.0); <br>    glRotatef (-90.0, 1.0, 0.0, 0.0); <br>    glIndexi (RAMPSTART); <br>    auxSolidCone(1.0, 2.0); <br>    glPopMatrix (); <br> <br>    glPushMatrix (); <br>    glTranslatef (0.0, -1.0, -2.25); <br>    glRotatef (-90.0, 1.0, 0.0, 0.0); <br>    glIndexi (RAMPSTART); <br>    auxSolidCone(1.0, 2.0); <br>    glPopMatrix (); <br> <br>    glPushMatrix (); <br>    glTranslatef (1.0, -1.0, -3.5); <br>    glRotatef (-90.0, 1.0, 0.0, 0.0); <br>    glIndexi (RAMPSTART); <br>    auxSolidCone(1.0, 2.0); <br>    glPopMatrix (); <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    if (w &lt;= h) <br>    glOrtho (-2.0, 2.0, -2.0*(GLfloat)h/(GLfloat)w,  <br>        2.0*(GLfloat)h/(GLfloat)w, 0.0, 10.0); <br>    else <br>    glOrtho (-2.0*(GLfloat)w/(GLfloat)h,  <br>        2.0*(GLfloat)w/(GLfloat)h, -2.0, 2.0, 0.0, 10.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity (); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, depth buffer, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_INDEX | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 200, 200); <br>    auxInitWindow ("Fog Using Color Index"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

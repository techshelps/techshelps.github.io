<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FOG.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3549"></a>FOG.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  fog.c <br> *  This program draws 5 red teapots, each at a different  <br> *  z distance from the eye, in different types of fog.   <br> *  Pressing the left mouse button chooses between 3 types of  <br> *  fog:  exponential, exponential squared, and linear.   <br> *  In this program, there is a fixed density value, as well  <br> *  as fixed start and end values for the linear fog. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;GL/glaux.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>void myinit(void); <br>void renderRedTeapot (GLfloat x, GLfloat y, GLfloat z); <br>void CALLBACK cycleFog (AUX_EVENTREC *event); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br>void CALLBACK display(void); <br> <br>GLint fogMode; <br> <br>void CALLBACK cycleFog (AUX_EVENTREC *event) <br>{ <br>    if (fogMode == GL_EXP) { <br>    fogMode = GL_EXP2; <br>    //printf ("Fog mode is GL_EXP2\n"); <br>    } <br>    else if (fogMode == GL_EXP2) { <br>    fogMode = GL_LINEAR; <br>    //printf ("Fog mode is GL_LINEAR\n"); <br>    glFogf (GL_FOG_START, 1.0); <br>    glFogf (GL_FOG_END, 5.0); <br>    } <br>    else if (fogMode == GL_LINEAR) { <br>    fogMode = GL_EXP; <br>    //printf ("Fog mode is GL_EXP\n"); <br>    } <br>    glFogi (GL_FOG_MODE, fogMode); <br>} <br> <br>/*  Initialize z-buffer, projection matrix, light source,  <br> *  and lighting model.  Do not specify a material property here. <br> */ <br>void myinit(void) <br>{ <br>    GLfloat position[] = { 0.0, 3.0, 3.0, 0.0 }; <br>    GLfloat local_view[] = { 0.0 }; <br> <br>    glEnable(GL_DEPTH_TEST); <br>    glDepthFunc(GL_LESS); <br> <br>    glLightfv(GL_LIGHT0, GL_POSITION, position); <br>    glLightModelfv(GL_LIGHT_MODEL_LOCAL_VIEWER, local_view); <br> <br>    glFrontFace (GL_CW); <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>    glEnable(GL_AUTO_NORMAL); <br>    glEnable(GL_NORMALIZE); <br>    glEnable(GL_FOG); <br>    { <br>    GLfloat fogColor[4] = {0.5, 0.5, 0.5, 1.0}; <br> <br>    fogMode = GL_EXP; <br>    glFogi (GL_FOG_MODE, fogMode); <br>    glFogfv (GL_FOG_COLOR, fogColor); <br>    glFogf (GL_FOG_DENSITY, 0.35); <br>    glHint (GL_FOG_HINT, GL_DONT_CARE); <br>    glClearColor(0.5, 0.5, 0.5, 1.0); <br>    } <br>} <br> <br>void renderRedTeapot (GLfloat x, GLfloat y, GLfloat z) <br>{ <br>    float mat[3]; <br> <br>    glPushMatrix(); <br>    glTranslatef (x, y, z); <br>    mat[0] = 0.1745; mat[1] = 0.01175; mat[2] = 0.01175;     <br>    glMaterialfv (GL_FRONT, GL_AMBIENT, mat); <br>    mat[0] = 0.61424; mat[1] = 0.04136; mat[2] = 0.04136;    <br>    glMaterialfv (GL_FRONT, GL_DIFFUSE, mat); <br>    mat[0] = 0.727811; mat[1] = 0.626959; mat[2] = 0.626959; <br>    glMaterialfv (GL_FRONT, GL_SPECULAR, mat); <br>    glMaterialf (GL_FRONT, GL_SHININESS, 0.6*128.0); <br>    auxSolidTeapot(1.0); <br>    glPopMatrix(); <br>} <br> <br>/*  display() draws 5 teapots at different z positions. <br> */ <br>void CALLBACK display(void) <br>{ <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br>    renderRedTeapot (-4.0, -0.5, -1.0); <br>    renderRedTeapot (-2.0, -0.5, -2.0); <br>    renderRedTeapot (0.0, -0.5, -3.0); <br>    renderRedTeapot (2.0, -0.5, -4.0); <br>    renderRedTeapot (4.0, -0.5, -5.0); <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    if (w &lt;= (h*3)) <br>    glOrtho (-6.0, 6.0, -2.0*((GLfloat) h*3)/(GLfloat) w,  <br>        2.0*((GLfloat) h*3)/(GLfloat) w, 0.0, 10.0); <br>    else <br>    glOrtho (-6.0*(GLfloat) w/((GLfloat) h*3),  <br>        6.0*(GLfloat) w/((GLfloat) h*3), -2.0, 2.0, 0.0, 10.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity (); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, depth buffer, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 450, 150); <br>    auxInitWindow ("Fog"); <br>    auxMouseFunc (AUX_LEFTBUTTON, AUX_MOUSEDOWN, cycleFog); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

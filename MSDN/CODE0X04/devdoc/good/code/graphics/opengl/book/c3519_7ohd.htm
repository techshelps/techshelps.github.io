<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CURVE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3541"></a>CURVE.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  curve.c <br> *  This program uses the Utility Library NURBS routines to <br> *  draw a one-dimensional NURBS curve. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br>void CALLBACK display(void); <br> <br>GLUnurbsObj *theNurb; <br> <br>void myinit(void) <br>{ <br>    glShadeModel (GL_FLAT); <br>    theNurb = gluNewNurbsRenderer(); <br>    gluNurbsProperty (theNurb, GLU_SAMPLING_TOLERANCE, 10.0); <br>} <br> <br>/*  This routine draws a B-spline curve.  Try a different  <br> *  knot sequence for a Bezier curve.  For example, <br>    GLfloat knots[8] = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0}; <br> */ <br> <br>void CALLBACK display(void) <br>{ <br>    GLfloat ctlpoints[4][3] = {{-.75, -.75, 0.0},  <br>    {-.5, .75, 0.0}, {.5, .75, 0.0}, {.75, -.75, 0.0}}; <br>    GLfloat knots[8] = {0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0};  <br> <br>    glClear(GL_COLOR_BUFFER_BIT); <br>    glColor3f (1.0, 1.0, 1.0); <br>    gluBeginCurve(theNurb); <br>    gluNurbsCurve(theNurb,  <br>        8, knots, <br>        3, <br>        &amp;ctlpoints[0][0],  <br>        4, <br>        GL_MAP1_VERTEX_3); <br>    gluEndCurve(theNurb); <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    if (w &lt;= h) <br>    gluOrtho2D (-1.0, 1.0, -1.0 * (GLfloat) h/(GLfloat) w,  <br>        1.0 * (GLfloat) h/(GLfloat) w); <br>    else <br>    gluOrtho2D (-1.0 * (GLfloat) w/(GLfloat) h, <br>        1.0 * (GLfloat) w/(GLfloat) h, -1.0, 1.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>} <br> <br>/*  Main Loop  <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB); <br>    auxInitPosition (0, 0, 500, 500); <br>    auxInitWindow ("NURBS Curve"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

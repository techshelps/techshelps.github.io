<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MIPMAP.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3561"></a>MIPMAP.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/*  mipmap.c <br> *  This program demonstrates using mipmaps for texture maps. <br> *  To overtly show the effect of mipmaps, each mipmap reduction <br> *  level has a solidly colored, contrasting texture image. <br> *  Thus, the quadrilateral which is drawn is drawn with several <br> *  different colors. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void makeImages(void); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>GLubyte mipmapImage32[32][32][3]; <br>GLubyte mipmapImage16[16][16][3]; <br>GLubyte mipmapImage8[8][8][3]; <br>GLubyte mipmapImage4[4][4][3]; <br>GLubyte mipmapImage2[2][2][3]; <br>GLubyte mipmapImage1[1][1][3]; <br> <br>void makeImages(void) <br>{ <br>    int i, j; <br>     <br>    for (i = 0; i &lt; 32; i++) { <br>    for (j = 0; j &lt; 32; j++) { <br>        mipmapImage32[i][j][0] = 255; <br>        mipmapImage32[i][j][1] = 255; <br>        mipmapImage32[i][j][2] = 0; <br>    } <br>    } <br>    for (i = 0; i &lt; 16; i++) { <br>    for (j = 0; j &lt; 16; j++) { <br>        mipmapImage16[i][j][0] = 255; <br>        mipmapImage16[i][j][1] = 0; <br>        mipmapImage16[i][j][2] = 255; <br>    } <br>    } <br>    for (i = 0; i &lt; 8; i++) { <br>    for (j = 0; j &lt; 8; j++) { <br>        mipmapImage8[i][j][0] = 255; <br>        mipmapImage8[i][j][1] = 0; <br>        mipmapImage8[i][j][2] = 0; <br>    } <br>    } <br>    for (i = 0; i &lt; 4; i++) { <br>    for (j = 0; j &lt; 4; j++) { <br>        mipmapImage4[i][j][0] = 0; <br>        mipmapImage4[i][j][1] = 255; <br>        mipmapImage4[i][j][2] = 0; <br>    } <br>    } <br>    for (i = 0; i &lt; 2; i++) { <br>    for (j = 0; j &lt; 2; j++) { <br>        mipmapImage2[i][j][0] = 0; <br>        mipmapImage2[i][j][1] = 0; <br>        mipmapImage2[i][j][2] = 255; <br>    } <br>    } <br>    mipmapImage1[0][0][0] = 255; <br>    mipmapImage1[0][0][1] = 255; <br>    mipmapImage1[0][0][2] = 255; <br>} <br> <br>void myinit(void) <br>{     <br>    glEnable(GL_DEPTH_TEST); <br>    glDepthFunc(GL_LESS); <br>    glShadeModel(GL_FLAT); <br> <br>    glTranslatef(0.0, 0.0, -3.6); <br>    makeImages(); <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br>    glTexImage2D(GL_TEXTURE_2D, 0, 3, 32, 32, 0, <br>         GL_RGB, GL_UNSIGNED_BYTE, &amp;mipmapImage32[0][0][0]); <br>    glTexImage2D(GL_TEXTURE_2D, 1, 3, 16, 16, 0, <br>         GL_RGB, GL_UNSIGNED_BYTE, &amp;mipmapImage16[0][0][0]); <br>    glTexImage2D(GL_TEXTURE_2D, 2, 3, 8, 8, 0, <br>         GL_RGB, GL_UNSIGNED_BYTE, &amp;mipmapImage8[0][0][0]); <br>    glTexImage2D(GL_TEXTURE_2D, 3, 3, 4, 4, 0, <br>         GL_RGB, GL_UNSIGNED_BYTE, &amp;mipmapImage4[0][0][0]); <br>    glTexImage2D(GL_TEXTURE_2D, 4, 3, 2, 2, 0, <br>         GL_RGB, GL_UNSIGNED_BYTE, &amp;mipmapImage2[0][0][0]); <br>    glTexImage2D(GL_TEXTURE_2D, 5, 3, 1, 1, 0, <br>         GL_RGB, GL_UNSIGNED_BYTE, &amp;mipmapImage1[0][0][0]); <br>    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT); <br>    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT); <br>    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST); <br>    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,  <br>    GL_NEAREST_MIPMAP_NEAREST); <br>    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL); <br>    glEnable(GL_TEXTURE_2D); <br>} <br> <br>void CALLBACK display(void) <br>{ <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br>    glBegin(GL_QUADS); <br>    glTexCoord2f(0.0, 0.0); glVertex3f(-2.0, -1.0, 0.0); <br>    glTexCoord2f(0.0, 8.0); glVertex3f(-2.0, 1.0, 0.0); <br>    glTexCoord2f(8.0, 8.0); glVertex3f(2000.0, 1.0, -6000.0); <br>    glTexCoord2f(8.0, 0.0); glVertex3f(2000.0, -1.0, -6000.0); <br>    glEnd(); <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluPerspective(60.0, 1.0*(GLfloat)w/(GLfloat)h, 1.0, 30000.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>} <br> <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 500, 500); <br>    auxInitWindow ("Texture Map Using Mipmap"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

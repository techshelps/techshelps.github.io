<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MATERIAL.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3560"></a>MATERIAL.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> * material.c <br> * This program demonstrates the use of the GL lighting model. <br> * Several objects are drawn using different material characteristics. <br> * A single light source illuminates the objects. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>/*  Initialize z-buffer, projection matrix, light source, <br> *  and lighting model.  Do not specify a material property here. <br> */ <br>void myinit(void) <br>{ <br>    GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 }; <br>    GLfloat diffuse[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat position[] = { 0.0, 3.0, 2.0, 0.0 }; <br>    GLfloat lmodel_ambient[] = { 0.4, 0.4, 0.4, 1.0 }; <br>    GLfloat local_view[] = { 0.0 }; <br> <br>    glEnable(GL_DEPTH_TEST); <br>    glDepthFunc(GL_LESS); <br> <br>    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient); <br>    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse); <br>    glLightfv(GL_LIGHT0, GL_POSITION, position); <br>    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient); <br>    glLightModelfv(GL_LIGHT_MODEL_LOCAL_VIEWER, local_view); <br> <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br> <br>    glClearColor(0.0, 0.1, 0.1, 0.0); <br>} <br> <br>/*  Draw twelve spheres in 3 rows with 4 columns.   <br> *  The spheres in the first row have materials with no ambient reflection. <br> *  The second row has materials with significant ambient reflection. <br> *  The third row has materials with colored ambient reflection. <br> * <br> *  The first column has materials with blue, diffuse reflection only. <br> *  The second column has blue diffuse reflection, as well as specular <br> *  reflection with a low shininess exponent. <br> *  The third column has blue diffuse reflection, as well as specular <br> *  reflection with a high shininess exponent (a more concentrated highlight). <br> *  The fourth column has materials which also include an emissive component. <br> * <br> *  glTranslatef() is used to move spheres to their appropriate locations. <br> */ <br> <br>void CALLBACK display(void) <br>{ <br>    GLfloat no_mat[] = { 0.0, 0.0, 0.0, 1.0 }; <br>    GLfloat mat_ambient[] = { 0.7, 0.7, 0.7, 1.0 }; <br>    GLfloat mat_ambient_color[] = { 0.8, 0.8, 0.2, 1.0 }; <br>    GLfloat mat_diffuse[] = { 0.1, 0.5, 0.8, 1.0 }; <br>    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat no_shininess[] = { 0.0 }; <br>    GLfloat low_shininess[] = { 5.0 }; <br>    GLfloat high_shininess[] = { 100.0 }; <br>    GLfloat mat_emission[] = {0.3, 0.2, 0.2, 0.0}; <br> <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br> <br>/*  draw sphere in first row, first column <br> *  diffuse reflection only; no ambient or specular   <br> */ <br>    glPushMatrix(); <br>    glTranslatef (-3.75, 3.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, no_mat); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, no_mat); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess); <br>    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat); <br>    auxSolidSphere(1.0); <br>    glPopMatrix(); <br> <br>/*  draw sphere in first row, second column <br> *  diffuse and specular reflection; low shininess; no ambient <br> */ <br>    glPushMatrix(); <br>    glTranslatef (-1.25, 3.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, no_mat); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, low_shininess); <br>    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat); <br>    auxSolidSphere(1.0); <br>    glPopMatrix(); <br> <br>/*  draw sphere in first row, third column <br> *  diffuse and specular reflection; high shininess; no ambient <br> */ <br>    glPushMatrix(); <br>    glTranslatef (1.25, 3.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, no_mat); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess); <br>    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat); <br>    auxSolidSphere(1.0); <br>    glPopMatrix(); <br> <br>/*  draw sphere in first row, fourth column <br> *  diffuse reflection; emission; no ambient or specular reflection <br> */ <br>    glPushMatrix(); <br>    glTranslatef (3.75, 3.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, no_mat); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, no_mat); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess); <br>    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission); <br>    auxSolidSphere(1.0); <br>    glPopMatrix(); <br> <br>/*  draw sphere in second row, first column <br> *  ambient and diffuse reflection; no specular   <br> */ <br>    glPushMatrix(); <br>    glTranslatef (-3.75, 0.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, no_mat); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess); <br>    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat); <br>    auxSolidSphere(1.0); <br>    glPopMatrix(); <br> <br>/*  draw sphere in second row, second column <br> *  ambient, diffuse and specular reflection; low shininess <br> */ <br>    glPushMatrix(); <br>    glTranslatef (-1.25, 0.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, low_shininess); <br>    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat); <br>    auxSolidSphere(1.0); <br>    glPopMatrix(); <br> <br>/*  draw sphere in second row, third column <br> *  ambient, diffuse and specular reflection; high shininess <br> */ <br>    glPushMatrix(); <br>    glTranslatef (1.25, 0.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess); <br>    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat); <br>    auxSolidSphere(1.0); <br>    glPopMatrix(); <br> <br>/*  draw sphere in second row, fourth column <br> *  ambient and diffuse reflection; emission; no specular <br> */ <br>    glPushMatrix(); <br>    glTranslatef (3.75, 0.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, no_mat); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess); <br>    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission); <br>    auxSolidSphere(1.0); <br>    glPopMatrix(); <br> <br>/*  draw sphere in third row, first column <br> *  colored ambient and diffuse reflection; no specular   <br> */ <br>    glPushMatrix(); <br>    glTranslatef (-3.75, -3.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_color); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, no_mat); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess); <br>    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat); <br>    auxSolidSphere(1.0); <br>    glPopMatrix(); <br> <br>/*  draw sphere in third row, second column <br> *  colored ambient, diffuse and specular reflection; low shininess <br> */ <br>    glPushMatrix(); <br>    glTranslatef (-1.25, -3.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_color); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, low_shininess); <br>    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat); <br>    auxSolidSphere(1.0); <br>    glPopMatrix(); <br> <br>/*  draw sphere in third row, third column <br> *  colored ambient, diffuse and specular reflection; high shininess <br> */ <br>    glPushMatrix(); <br>    glTranslatef (1.25, -3.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_color); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess); <br>    glMaterialfv(GL_FRONT, GL_EMISSION, no_mat); <br>    auxSolidSphere(1.0); <br>    glPopMatrix(); <br> <br>/*  draw sphere in third row, fourth column <br> *  colored ambient and diffuse reflection; emission; no specular <br> */ <br>    glPushMatrix(); <br>    glTranslatef (3.75, -3.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_color); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, no_mat); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, no_shininess); <br>    glMaterialfv(GL_FRONT, GL_EMISSION, mat_emission); <br>    auxSolidSphere(1.0); <br>    glPopMatrix(); <br> <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    if (w &lt;= (h * 2)) <br>    glOrtho (-6.0, 6.0, -3.0*((GLfloat)h*2)/(GLfloat)w,  <br>        3.0*((GLfloat)h*2)/(GLfloat)w, -10.0, 10.0); <br>    else <br>    glOrtho (-6.0*(GLfloat)w/((GLfloat)h*2),  <br>        6.0*(GLfloat)w/((GLfloat)h*2), -3.0, 3.0, -10.0, 10.0); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 600, 450); <br>    auxInitWindow ("Lighting"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

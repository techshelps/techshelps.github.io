<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DISK.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3543"></a>DISK.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  disk.c <br> *  This program demonstrates the use of the quadrics <br> *  Utility Library routines to draw circles and arcs. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br>void CALLBACK display(void); <br> <br>GLUquadricObj * quadObj; <br> <br>/*  Clear the screen.  For each triangle, set the current  <br> *  color and modify the modelview matrix. <br> */ <br>void CALLBACK display(void) <br>{ <br>    glClearColor (0.0, 0.0, 0.0, 1.0); <br>    glClear (GL_COLOR_BUFFER_BIT); <br> <br>    glPushMatrix(); <br>    gluQuadricDrawStyle (quadObj, GLU_FILL); <br>    glColor3f (1.0, 1.0, 1.0); <br>    glTranslatef (10.0, 10.0, 0.0); <br>    gluDisk (quadObj, 0.0, 5.0, 10, 2); <br>    glPopMatrix(); <br> <br>    glPushMatrix(); <br>    glColor3f (1.0, 1.0, 0.0); <br>    glTranslatef (20.0, 20.0, 0.0); <br>    gluPartialDisk (quadObj, 0.0, 5.0, 10, 3, 30.0, 120.0); <br>    glPopMatrix(); <br> <br>    glPushMatrix(); <br>    gluQuadricDrawStyle (quadObj, GLU_SILHOUETTE); <br>    glColor3f (0.0, 1.0, 1.0); <br>    glTranslatef (30.0, 30.0, 0.0); <br>    gluPartialDisk (quadObj, 0.0, 5.0, 10, 3, 135.0, 270.0); <br>    glPopMatrix(); <br> <br>    glPushMatrix(); <br>    gluQuadricDrawStyle (quadObj, GLU_LINE); <br>    glColor3f (1.0, 0.0, 1.0); <br>    glTranslatef (40.0, 40.0, 0.0); <br>    gluDisk (quadObj, 2.0, 5.0, 10, 10); <br>    glPopMatrix(); <br>    glFlush(); <br>} <br> <br>void myinit (void) { <br>    quadObj = gluNewQuadric (); <br>    glShadeModel(GL_FLAT); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    if (w &lt;= h)  <br>    glOrtho (0.0, 50.0,  <br>        0.0, 50.0*(GLfloat)h/(GLfloat)w, -1.0, 1.0); <br>    else  <br>    glOrtho (0.0, 50.0*(GLfloat)w/(GLfloat)h,  <br>        0.0, 50.0, -1.0, 1.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity (); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB); <br>    auxInitPosition (0, 0, 500, 500); <br>    auxInitWindow ("Quadrics"); <br>    myinit (); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

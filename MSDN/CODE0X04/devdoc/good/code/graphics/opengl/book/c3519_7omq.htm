<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ROBOT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3572"></a>ROBOT.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  robot.c <br> *  This program shows how to composite modeling transformations <br> *  to draw translated and rotated hierarchical models. <br> *  Interaction:  pressing the arrow keys alters the rotation  <br> *  of robot arm. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void drawPlane(void); <br>void CALLBACK elbowAdd (void); <br>void CALLBACK elbowSubtract (void); <br>void CALLBACK shoulderAdd (void); <br>void CALLBACK shoulderSubtract (void); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>static int shoulder = 0, elbow = 0; <br> <br>void CALLBACK elbowAdd (void) <br>{ <br>    elbow = (elbow + 5) % 360; <br>} <br> <br>void CALLBACK elbowSubtract (void) <br>{ <br>    elbow = (elbow - 5) % 360; <br>} <br> <br>void CALLBACK shoulderAdd (void) <br>{ <br>    shoulder = (shoulder + 5) % 360; <br>} <br> <br>void CALLBACK shoulderSubtract (void) <br>{ <br>    shoulder = (shoulder - 5) % 360; <br>} <br> <br>void CALLBACK display(void) <br>{ <br> <br>    glClear(GL_COLOR_BUFFER_BIT); <br>    glColor3f (1.0, 1.0, 1.0); <br> <br>    glPushMatrix(); <br>    glTranslatef (-1.0, 0.0, 0.0); <br>    glRotatef ((GLfloat) shoulder, 0.0, 0.0, 1.0); <br>    glTranslatef (1.0, 0.0, 0.0); <br>    auxWireBox(2.0, 0.4, 1.0); <br> <br>    glTranslatef (1.0, 0.0, 0.0); <br>    glRotatef ((GLfloat) elbow, 0.0, 0.0, 1.0); <br>    glTranslatef (1.0, 0.0, 0.0); <br>    auxWireBox(2.0, 0.4, 1.0); <br> <br>    glPopMatrix(); <br>    glFlush(); <br>} <br> <br>void myinit (void)  <br>{ <br>    glShadeModel (GL_FLAT); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluPerspective(65.0, (GLfloat) w/(GLfloat) h, 1.0, 20.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>    glTranslatef (0.0, 0.0, -5.0);  /* viewing transform  */ <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB); <br>    auxInitPosition (0, 0, 400, 400); <br>    auxInitWindow ("Composite Modeling Transformations"); <br> <br>    myinit (); <br> <br>    auxKeyFunc (AUX_LEFT, shoulderSubtract); <br>    auxKeyFunc (AUX_RIGHT, shoulderAdd); <br>    auxKeyFunc (AUX_UP, elbowAdd); <br>    auxKeyFunc (AUX_DOWN, elbowSubtract); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

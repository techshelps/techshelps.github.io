<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AIM.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3523"></a>AIM.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  aim.c <br> *  This program calculates the fovy (field of view angle <br> *  in the y direction), by using trigonometry, given the <br> *  size of an object and its size. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;GL/glaux.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>void myinit(void); <br>GLdouble calculateAngle (double size, double distance); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>void myinit (void) { <br>    glShadeModel (GL_FLAT); <br>} <br> <br>/*  Clear the screen.  Set the current color to white. <br> *  Draw the wire frame cube and sphere. <br> */ <br>void CALLBACK display (void) <br>{ <br>    glClear(GL_COLOR_BUFFER_BIT); <br>    glColor3f (1.0, 1.0, 1.0); <br> <br>    glLoadIdentity (); <br>/*  glTranslatef() as viewing transformation    */ <br>    glTranslatef (0.0, 0.0, -5.0); <br>    auxWireCube(2.0); <br>    auxWireSphere(1.0); <br>    glFlush(); <br>} <br> <br>#define PI  3.1415926535 <br> <br>/*  atan2 () is a system math routine which calculates <br> *  the arctangent of an angle, given length of the  <br> *  opposite and adjacent sides of a right triangle. <br> *  atan2 () is not an OpenGL routine. <br> */ <br>GLdouble calculateAngle (double size, double distance) <br>{ <br>    GLdouble radtheta, degtheta; <br>     <br>    radtheta = 2.0 * atan2 (size/2.0, distance); <br>    degtheta = (180.0 * radtheta) / PI; <br>    //printf ("degtheta is %lf\n", degtheta); <br>    return ((GLdouble) degtheta); <br>} <br> <br>/*  Called when the window is first opened and whenever  <br> *  the window is reconfigured (moved or resized). <br> */ <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    GLdouble theta; <br> <br>    if(!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    theta = calculateAngle (2.0, 5.0); <br>    gluPerspective(theta, (GLfloat) w/(GLfloat) h, 1.0, 20.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB); <br>    auxInitPosition (0, 0, 500, 500); <br>    auxInitWindow ("Field of View Angle"); <br>    myinit (); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

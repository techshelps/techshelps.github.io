<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACCPERSP.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3521"></a>ACCPERSP.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/*  accpersp.c <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;GL/glaux.h&gt; <br>#include "jitter.h" <br> <br>void myinit(void); <br>void accFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, <br>    GLdouble znear, GLdouble zfar, GLdouble pixdx, GLdouble pixdy,  <br>    GLdouble eyedx, GLdouble eyedy, GLdouble focus); <br>void accPerspective(GLdouble fovy, GLdouble aspect, <br>    GLdouble znear, GLdouble zfar, GLdouble pixdx, GLdouble pixdy,  <br>    GLdouble eyedx, GLdouble eyedy, GLdouble focus); <br>void displayObjects(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br>void CALLBACK display(void); <br> <br> <br>#define PI_ 3.14159265358979323846 <br> <br>/*  accFrustum() <br> *  The first 6 arguments are identical to the glFrustum() call. <br> *   <br> *  pixdx and pixdy are anti-alias jitter in pixels.  <br> *  Set both equal to 0.0 for no anti-alias jitter. <br> *  eyedx and eyedy are depth-of field jitter in pixels.  <br> *  Set both equal to 0.0 for no depth of field effects. <br> * <br> *  focus is distance from eye to plane in focus.  <br> *  focus must be greater than, but not equal to 0.0. <br> * <br> *  Note that accFrustum() calls glTranslatef().  You will  <br> *  probably want to insure that your ModelView matrix has been  <br> *  initialized to identity before calling accFrustum(). <br> */ <br>void accFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, <br>    GLdouble znear, GLdouble zfar, GLdouble pixdx, GLdouble pixdy,  <br>    GLdouble eyedx, GLdouble eyedy, GLdouble focus) <br>{ <br>    GLdouble xwsize, ywsize;  <br>    GLdouble dx, dy; <br>    GLint viewport[4]; <br> <br>    glGetIntegerv (GL_VIEWPORT, viewport); <br>     <br>    xwsize = right - left; <br>    ywsize = top - bottom; <br>     <br>    dx = -(pixdx*xwsize/(GLdouble) viewport[2] + eyedx*znear/focus); <br>    dy = -(pixdy*ywsize/(GLdouble) viewport[3] + eyedy*znear/focus); <br>     <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    glFrustum (left + dx, right + dx, bottom + dy, top + dy, znear, zfar); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>    glTranslatef (-eyedx, -eyedy, 0.0); <br>} <br> <br>/*  accPerspective() <br> *  <br> *  The first 4 arguments are identical to the gluPerspective() call. <br> *  pixdx and pixdy are anti-alias jitter in pixels.  <br> *  Set both equal to 0.0 for no anti-alias jitter. <br> *  eyedx and eyedy are depth-of field jitter in pixels.  <br> *  Set both equal to 0.0 for no depth of field effects. <br> * <br> *  focus is distance from eye to plane in focus.  <br> *  focus must be greater than, but not equal to 0.0. <br> * <br> *  Note that accPerspective() calls accFrustum(). <br> */ <br>void accPerspective(GLdouble fovy, GLdouble aspect,  <br>    GLdouble znear, GLdouble zfar, GLdouble pixdx, GLdouble pixdy,  <br>    GLdouble eyedx, GLdouble eyedy, GLdouble focus) <br>{ <br>    GLdouble fov2,left,right,bottom,top; <br> <br>    fov2 = ((fovy*PI_) / 180.0) / 2.0; <br> <br>    top = znear / (cos(fov2) / sin(fov2)); <br>    bottom = -top; <br> <br>    right = top * aspect; <br>    left = -right; <br> <br>    accFrustum (left, right, bottom, top, znear, zfar, <br>    pixdx, pixdy, eyedx, eyedy, focus); <br>} <br> <br>/*  Initialize lighting and other values. <br> */ <br>void myinit(void) <br>{ <br>    GLfloat mat_ambient[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat light_position[] = { 0.0, 0.0, 10.0, 1.0 }; <br>    GLfloat lm_ambient[] = { 0.2, 0.2, 0.2, 1.0 }; <br> <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); <br>    glMaterialf(GL_FRONT, GL_SHININESS, 50.0); <br>    glLightfv(GL_LIGHT0, GL_POSITION, light_position); <br>    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lm_ambient); <br>     <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>    glDepthFunc(GL_LESS); <br>    glEnable(GL_DEPTH_TEST); <br>    glShadeModel (GL_FLAT); <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br>    glClearAccum(0.0, 0.0, 0.0, 0.0); <br>} <br> <br>void displayObjects(void)  <br>{ <br>    GLfloat torus_diffuse[] = { 0.7, 0.7, 0.0, 1.0 }; <br>    GLfloat cube_diffuse[] = { 0.0, 0.7, 0.7, 1.0 }; <br>    GLfloat sphere_diffuse[] = { 0.7, 0.0, 0.7, 1.0 }; <br>    GLfloat octa_diffuse[] = { 0.7, 0.4, 0.4, 1.0 }; <br>     <br>    glPushMatrix (); <br>    glTranslatef (0.0, 0.0, -5.0);  <br>    glRotatef (30.0, 1.0, 0.0, 0.0); <br> <br>    glPushMatrix (); <br>    glTranslatef (-0.80, 0.35, 0.0);  <br>    glRotatef (100.0, 1.0, 0.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, torus_diffuse); <br>    auxSolidTorus (0.275, 0.85); <br>    glPopMatrix (); <br> <br>    glPushMatrix (); <br>    glTranslatef (-0.75, -0.50, 0.0);  <br>    glRotatef (45.0, 0.0, 0.0, 1.0); <br>    glRotatef (45.0, 1.0, 0.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, cube_diffuse); <br>    auxSolidCube (1.5); <br>    glPopMatrix (); <br> <br>    glPushMatrix (); <br>    glTranslatef (0.75, 0.60, 0.0);  <br>    glRotatef (30.0, 1.0, 0.0, 0.0); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, sphere_diffuse); <br>    auxSolidSphere (1.0); <br>    glPopMatrix (); <br> <br>    glPushMatrix (); <br>    glTranslatef (0.70, -0.90, 0.25);  <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, octa_diffuse); <br>    auxSolidOctahedron (1.0); <br>    glPopMatrix (); <br> <br>    glPopMatrix (); <br>} <br> <br>#define ACSIZE  8 <br> <br>void CALLBACK display(void) <br>{ <br>    GLint viewport[4]; <br>    int jitter; <br> <br>    glGetIntegerv (GL_VIEWPORT, viewport); <br> <br>    if(!viewport[3]) return; <br> <br>    glClear(GL_ACCUM_BUFFER_BIT); <br>    for (jitter = 0; jitter &lt; ACSIZE; jitter++) { <br>        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br>        accPerspective (50.0,  <br>            (GLdouble) viewport[2]/(GLdouble) viewport[3],  <br>            1.0, 15.0, j8[jitter].x, j8[jitter].y, <br>            0.0, 0.0, 1.0); <br>        displayObjects (); <br>        glAccum(GL_ACCUM, 1.0/ACSIZE); <br>        glFlush(); <br>        auxSwapBuffers(); <br>    } <br>    glAccum (GL_RETURN, 1.0); <br>    glFlush(); <br>    auxSwapBuffers(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    glViewport(0, 0, w, h); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_DOUBLE | AUX_RGB <br>            | AUX_ACCUM | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 250, 250); <br>    auxInitWindow ("Scene Antialiasing"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

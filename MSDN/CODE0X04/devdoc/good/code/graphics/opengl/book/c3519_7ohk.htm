<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FEEDBACK.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3548"></a>FEEDBACK.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  feedback.c <br> *  This program demonstrates use of OpenGL feedback.  First, <br> *  a lighting environment is set up and a few lines are drawn. <br> *  Then feedback mode is entered, and the same lines are  <br> *  drawn.  The results in the feedback buffer are printed. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>void myinit(void); <br>void drawGeometry (GLenum mode); <br>void print3DcolorVertex (GLint size, GLint *count, GLfloat *buffer); <br>void printBuffer(GLint size, GLfloat *buffer); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br>void CALLBACK display(void); <br> <br>/*  Initialize lighting. <br> */ <br>void myinit(void) <br>{ <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>} <br> <br>/*  Draw a few lines and two points, one of which will  <br> *  be clipped.  If in feedback mode, a passthrough token  <br> *  is issued between the each primitive. <br> */ <br>void drawGeometry (GLenum mode) <br>{ <br>    glBegin (GL_LINE_STRIP); <br>    glNormal3f (0.0, 0.0, 1.0); <br>    glVertex3f (30.0, 30.0, 0.0); <br>    glVertex3f (50.0, 60.0, 0.0); <br>    glVertex3f (70.0, 40.0, 0.0); <br>    glEnd (); <br>    if (mode == GL_FEEDBACK) <br>    glPassThrough (1.0); <br>    glBegin (GL_POINTS); <br>    glVertex3f (-100.0, -100.0, -100.0);    /*  will be clipped  */ <br>    glEnd (); <br>    if (mode == GL_FEEDBACK) <br>    glPassThrough (2.0); <br>    glBegin (GL_POINTS); <br>    glNormal3f (0.0, 0.0, 1.0); <br>    glVertex3f (50.0, 50.0, 0.0); <br>    glEnd (); <br>} <br> <br>/*  Write contents of one vertex to stdout. */ <br>void print3DcolorVertex (GLint size,  <br>    GLint *count, GLfloat *buffer) <br>{ <br>    int i; <br> <br>    //printf ("  "); <br>    for (i = 0; i &lt; 7; i++) { <br>    //printf ("%4.2f ", buffer[size-(*count)]); <br>    *count = *count - 1; <br>    } <br>    //printf ("\n"); <br>} <br> <br>/*  Write contents of entire buffer.  (Parse tokens!)   */ <br>void printBuffer(GLint size, GLfloat *buffer) <br>{ <br>    GLint count; <br>    GLfloat token; <br> <br>    count = size; <br>    while (count) { <br>    token = buffer[size-count]; count--; <br>    if (token == GL_PASS_THROUGH_TOKEN) { <br>        //printf ("GL_PASS_THROUGH_TOKEN\n"); <br>        //printf ("  %4.2f\n", buffer[size-count]); <br>        count--; <br>    } <br>    else if (token == GL_POINT_TOKEN) { <br>        //printf ("GL_POINT_TOKEN\n"); <br>        print3DcolorVertex (size, &amp;count, buffer); <br>    } <br>    else if (token == GL_LINE_TOKEN) { <br>        //printf ("GL_LINE_TOKEN\n"); <br>        print3DcolorVertex (size, &amp;count, buffer); <br>        print3DcolorVertex (size, &amp;count, buffer); <br>    } <br>    else if (token == GL_LINE_RESET_TOKEN) { <br>        //printf ("GL_LINE_RESET_TOKEN\n"); <br>        print3DcolorVertex (size, &amp;count, buffer); <br>        print3DcolorVertex (size, &amp;count, buffer); <br>    } <br>    } <br>} <br> <br>void CALLBACK display(void) <br>{ <br>    GLfloat feedBuffer[1024]; <br>    GLint size; <br> <br>    glMatrixMode (GL_PROJECTION); <br>    glLoadIdentity (); <br>    glOrtho (0.0, 100.0, 0.0, 100.0, 0.0, 1.0); <br> <br>    glClearColor (0.0, 0.0, 0.0, 0.0); <br>    glClear(GL_COLOR_BUFFER_BIT); <br>    drawGeometry (GL_RENDER); <br> <br>    glFeedbackBuffer (1024, GL_3D_COLOR, feedBuffer); <br>    (void) glRenderMode (GL_FEEDBACK); <br>    drawGeometry (GL_FEEDBACK); <br> <br>    size = glRenderMode (GL_RENDER); <br>    printBuffer (size, feedBuffer); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB); <br>    auxInitPosition (0, 0, 100, 100); <br>    auxInitWindow ("Feedback"); <br>    myinit (); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PICKSQR.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3567"></a>PICKSQR.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  picksquare.c <br> *  Use of multiple names and picking are demonstrated.   <br> *  A 3x3 grid of squares is drawn.  When the left mouse  <br> *  button is pressed, all squares under the cursor position  <br> *  have their color changed. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>void myinit(void); <br>void processHits (GLint hits, GLuint buffer[]); <br>void CALLBACK pickSquares(AUX_EVENTREC *event); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>int board[3][3];    /*  amount of color for each square */ <br> <br>/*  Clear color value for every square on the board     */ <br>void myinit(void) <br>{ <br>    int i, j; <br>    for (i = 0; i &lt; 3; i++)  <br>    for (j = 0; j &lt; 3; j ++) <br>        board[i][j] = 0; <br>    glClearColor (0.0, 0.0, 0.0, 0.0); <br>} <br> <br>/*  The nine squares are drawn.  In selection mode, each  <br> *  square is given two names:  one for the row and the  <br> *  other for the column on the grid.  The color of each  <br> *  square is determined by its position on the grid, and  <br> *  the value in the board[][] array. <br> */ <br>void drawSquares(GLenum mode) <br>{ <br>    GLuint i, j; <br>    for (i = 0; i &lt; 3; i++) { <br>    if (mode == GL_SELECT) <br>        glLoadName (i); <br>    for (j = 0; j &lt; 3; j ++) { <br>        if (mode == GL_SELECT) <br>        glPushName (j); <br>        glColor3f ((GLfloat) i/3.0, (GLfloat) j/3.0,  <br>            (GLfloat) board[i][j]/3.0); <br>        glRecti (i, j, i+1, j+1); <br>        if (mode == GL_SELECT) <br>        glPopName (); <br>    } <br>    } <br>} <br> <br>/*  processHits() prints out the contents of the  <br> *  selection array. <br> */ <br>void processHits (GLint hits, GLuint buffer[]) <br>{ <br>    int i, j; <br>    GLint ii, jj, names, *ptr; <br> <br>    //printf ("hits = %d\n", hits); <br>    ptr = (GLuint *) buffer; <br>    for (i = 0; i &lt; hits; i++) {    /*  for each hit  */ <br>    names = *ptr; <br>    //printf (" number of names for this hit = %d\n", names); <br>    ptr++; <br>    //printf ("  z1 is %u;", *ptr); <br>    ptr++; <br>    //printf (" z2 is %u\n", *ptr); <br>    ptr++; <br>    //printf ("   names are "); <br>    for (j = 0; j &lt; names; j++) {   /*  for each name */ <br>        //printf ("%d ", *ptr); <br>        if (j == 0) /*  set row and column  */ <br>        ii = *ptr; <br>        else if (j == 1) <br>        jj = *ptr; <br>        ptr++; <br>    } <br>    //printf ("\n"); <br>    board[ii][jj] = (board[ii][jj] + 1) % 3; <br>    } <br>} <br> <br>/*  pickSquares() sets up selection mode, name stack,  <br> *  and projection matrix for picking.  Then the  <br> *  objects are drawn. <br> */ <br>#define BUFSIZE 512 <br> <br>void CALLBACK pickSquares(AUX_EVENTREC *event) <br>{ <br>    GLuint selectBuf[BUFSIZE]; <br>    GLint hits; <br>    GLint viewport[4]; <br>    int x, y; <br> <br>    x = event-&gt;data[AUX_MOUSEX]; <br>    y = event-&gt;data[AUX_MOUSEY]; <br>    glGetIntegerv (GL_VIEWPORT, viewport); <br> <br>    glSelectBuffer (BUFSIZE, selectBuf); <br>    (void) glRenderMode (GL_SELECT); <br> <br>    glInitNames(); <br>    glPushName((unsigned)-1); <br> <br>    glMatrixMode (GL_PROJECTION); <br>    glPushMatrix (); <br>    glLoadIdentity (); <br>/*  create 5x5 pixel picking region near cursor location    */ <br>    gluPickMatrix ((GLdouble) x, (GLdouble) (viewport[3] - y),  <br>    5.0, 5.0, viewport); <br>    gluOrtho2D (0.0, 3.0, 0.0, 3.0); <br>    drawSquares (GL_SELECT); <br> <br>    glMatrixMode (GL_PROJECTION); <br>    glPopMatrix (); <br>    glFlush (); <br> <br>    hits = glRenderMode (GL_RENDER); <br>    processHits (hits, selectBuf); <br>}  <br> <br>void CALLBACK display(void) <br>{ <br>    glClear(GL_COLOR_BUFFER_BIT); <br>    drawSquares (GL_RENDER); <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluOrtho2D (0.0, 3.0, 0.0, 3.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB); <br>    auxInitPosition (0, 0, 100, 100); <br>    auxInitWindow ("Picking Squares"); <br>    myinit (); <br>    auxMouseFunc (AUX_LEFTBUTTON, AUX_MOUSEDOWN, pickSquares); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

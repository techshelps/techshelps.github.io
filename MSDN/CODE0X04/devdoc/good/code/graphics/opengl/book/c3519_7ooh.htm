<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STENCIL.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3581"></a>STENCIL.C</h2>
<pre><code>/* Copyright (c) Mark J. Kilgard, 1994. */ <br> <br>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> * ALL RIGHTS RESERVED  <br> * Permission to use, copy, modify, and distribute this software for  <br> * any purpose and without fee is hereby granted, provided that the above <br> * copyright notice appear in all copies and that both the copyright notice <br> * and this permission notice appear in supporting documentation, and that  <br> * the name of Silicon Graphics, Inc. not be used in advertising <br> * or publicity pertaining to distribution of the software without specific, <br> * written prior permission.  <br> * <br> * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS" <br> * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE, <br> * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR <br> * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON <br> * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT, <br> * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY <br> * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION, <br> * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF <br> * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN <br> * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON <br> * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE <br> * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE. <br> *  <br> * US Government Users Restricted Rights  <br> * Use, duplication, or disclosure by the Government is subject to <br> * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph <br> * (c)(1)(ii) of the Rights in Technical Data and Computer Software <br> * clause at DFARS 252.227-7013 and/or in similar or successor <br> * clauses in the FAR or the DOD or NASA FAR Supplement. <br> * Unpublished-- rights reserved under the copyright laws of the <br> * United States.  Contractor/manufacturer is Silicon Graphics, <br> * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311. <br> * <br> * OpenGL(TM) is a trademark of Silicon Graphics, Inc. <br> */ <br>/*  stencil.c <br> *  This program draws two rotated tori in a window.   <br> *  A diamond in the center of the window masks out part  <br> *  of the scene.  Within this mask, a different model  <br> *  (a sphere) is drawn in a different color. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>#define YELLOWMAT   1 <br>#define BLUEMAT 2 <br> <br>void myinit (void)  <br>{ <br>    GLfloat yellow_diffuse[] = { 0.7, 0.7, 0.0, 1.0 }; <br>    GLfloat yellow_specular[] = { 1.0, 1.0, 1.0, 1.0 }; <br> <br>    GLfloat blue_diffuse[] = { 0.1, 0.1, 0.7, 1.0 }; <br>    GLfloat blue_specular[] = { 0.1, 1.0, 1.0, 1.0 }; <br> <br>    GLfloat position_one[] = { 1.0, 1.0, 1.0, 0.0 }; <br> <br>    glNewList(YELLOWMAT, GL_COMPILE); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, yellow_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, yellow_specular); <br>    glMaterialf(GL_FRONT, GL_SHININESS, 64.0); <br>    glEndList(); <br> <br>    glNewList(BLUEMAT, GL_COMPILE); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, blue_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, blue_specular); <br>    glMaterialf(GL_FRONT, GL_SHININESS, 45.0); <br>    glEndList(); <br> <br>    glLightfv(GL_LIGHT0, GL_POSITION, position_one); <br> <br>    glEnable(GL_LIGHT0); <br>    glEnable(GL_LIGHTING); <br>    glDepthFunc(GL_LESS); <br>    glEnable(GL_DEPTH_TEST); <br> <br>    glClearStencil(0x0); <br>    glEnable(GL_STENCIL_TEST); <br> <br>} <br> <br>/*  Draw a sphere in a diamond-shaped section in the <br> *  middle of a window with 2 tori. <br> */ <br>GLsizei width, height; <br> <br>void CALLBACK display(void) <br>{ <br>#if 0 <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>#endif <br> <br>    glClear(GL_STENCIL_BUFFER_BIT); <br>/* create a diamond shaped stencil area */ <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    glOrtho(-3.0, 3.0, -3.0, 3.0, -1.0, 1.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br> <br>    glStencilFunc (GL_ALWAYS, 0x1, 0x1); <br>    glStencilOp (GL_REPLACE, GL_REPLACE, GL_REPLACE); <br>    glBegin(GL_QUADS); <br>glVertex3f (-1.0, 0.0, 0.0); <br>glVertex3f (0.0, 1.0, 0.0); <br>glVertex3f (1.0, 0.0, 0.0); <br>glVertex3f (0.0, -1.0, 0.0); <br>    glEnd(); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluPerspective(45.0, (GLfloat) width/(GLfloat) height, 3.0, 7.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>    glTranslatef(0.0, 0.0, -5.0); <br> <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br> <br>/* draw blue sphere where the stencil is 1 */ <br>    glStencilFunc (GL_EQUAL, 0x1, 0x1); <br>    glCallList (BLUEMAT); <br>    auxSolidSphere (0.5); <br> <br>/* draw the tori where the stencil is not 1 */ <br>    glStencilFunc (GL_NOTEQUAL, 0x1, 0x1); <br>    glStencilOp (GL_KEEP, GL_KEEP, GL_KEEP); <br>    glPushMatrix(); <br>glRotatef (45.0, 0.0, 0.0, 1.0); <br>glRotatef (45.0, 0.0, 1.0, 0.0); <br>glCallList (YELLOWMAT); <br>        auxSolidTorus (0.275, 0.85); <br>glPushMatrix(); <br>    glRotatef (90.0, 1.0, 0.0, 0.0); <br>            auxSolidTorus (0.275, 0.85); <br>glPopMatrix(); <br>    glPopMatrix(); <br> <br>    glFlush(); <br>} <br> <br>/*  Whenever the window is reshaped, redefine the  <br> *  coordinate system and redraw the stencil area. <br> */ <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br> <br>    width = w; <br>    height = h; <br> <br>    glClear(GL_STENCIL_BUFFER_BIT); <br>/* create a diamond shaped stencil area */ <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    glOrtho(-3.0, 3.0, -3.0, 3.0, -1.0, 1.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br> <br>    glStencilFunc (GL_ALWAYS, 0x1, 0x1); <br>    glStencilOp (GL_REPLACE, GL_REPLACE, GL_REPLACE); <br>    glBegin(GL_QUADS); <br>glVertex3f (-1.0, 0.0, 0.0); <br>glVertex3f (0.0, 1.0, 0.0); <br>glVertex3f (1.0, 0.0, 0.0); <br>glVertex3f (0.0, -1.0, 0.0); <br>    glEnd(); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluPerspective(45.0, (GLfloat) w/(GLfloat) h, 3.0, 7.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>    glTranslatef(0.0, 0.0, -5.0); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB  <br>    | AUX_DEPTH16 | AUX_STENCIL); <br>    auxInitPosition (0, 0, 400, 400); <br>    auxInitWindow ("Stencil Test"); <br>    myinit (); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

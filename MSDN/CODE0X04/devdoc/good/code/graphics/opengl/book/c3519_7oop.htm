<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TRIM.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3589"></a>TRIM.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  trim.c <br> *  This program draws a NURBS surface in the shape of a  <br> *  symmetrical hill, using both a NURBS curve and pwl <br> *  (piecewise linear) curve to trim part of the surface. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void init_surface(void); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>GLfloat ctlpoints[4][4][3]; <br> <br>GLUnurbsObj *theNurb; <br> <br>/* <br> *  Initializes the control points of the surface to a small hill. <br> *  The control points range from -3 to +3 in x, y, and z <br> */ <br>void init_surface(void) <br>{ <br>    int u, v; <br>    for (u = 0; u &lt; 4; u++) { <br>    for (v = 0; v &lt; 4; v++) { <br>        ctlpoints[u][v][0] = 2.0*((GLfloat)u - 1.5); <br>        ctlpoints[u][v][1] = 2.0*((GLfloat)v - 1.5); <br> <br>        if ( (u == 1 || u == 2) &amp;&amp; (v == 1 || v == 2)) <br>        ctlpoints[u][v][2] = 3.0; <br>        else <br>        ctlpoints[u][v][2] = -3.0; <br>    } <br>    }                <br>}                <br>             <br>/*  Initialize material property and depth buffer. <br> */ <br>void myinit(void) <br>{ <br>    GLfloat mat_diffuse[] = { 0.6, 0.6, 0.6, 1.0 }; <br>    GLfloat mat_specular[] = { 0.9, 0.9, 0.9, 1.0 }; <br>    GLfloat mat_shininess[] = { 128.0 }; <br> <br>    glClearColor (0.0, 0.0, 0.0, 1.0); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess); <br> <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>    glDepthFunc(GL_LESS); <br>    glEnable(GL_DEPTH_TEST); <br>    glEnable(GL_AUTO_NORMAL); <br>    glEnable(GL_NORMALIZE); <br> <br>    init_surface(); <br> <br>    theNurb = gluNewNurbsRenderer(); <br>    gluNurbsProperty(theNurb, GLU_SAMPLING_TOLERANCE, 50.0); <br>    gluNurbsProperty(theNurb, GLU_DISPLAY_MODE, GLU_FILL); <br>} <br> <br>void CALLBACK display(void) <br>{ <br>    GLfloat knots[8] = {0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0}; <br>    GLfloat edgePt[5][2] = /* counter clockwise */ <br>    {{0.0, 0.0}, {1.0, 0.0}, {1.0, 1.0}, {0.0, 1.0}, {0.0, 0.0}}; <br>    GLfloat curvePt[4][2] = /* clockwise */  <br>    {{0.25, 0.5}, {0.25, 0.75}, {0.75, 0.75}, {0.75, 0.5}}; <br>    GLfloat curveKnots[8] =  <br>    {0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0}; <br>    GLfloat pwlPt[4][2] = /* clockwise */  <br>    {{0.75, 0.5}, {0.5, 0.25}, {0.25, 0.5}}; <br> <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br>    glPushMatrix(); <br>    glRotatef(330.0, 1.,0.,0.); <br>    glScalef (0.5, 0.5, 0.5); <br> <br>    gluBeginSurface(theNurb); <br>    gluNurbsSurface(theNurb,  <br>        8, knots, <br>        8, knots, <br>        4 * 3, <br>        3, <br>        &amp;ctlpoints[0][0][0],  <br>        4, 4, <br>        GL_MAP2_VERTEX_3); <br>    gluBeginTrim (theNurb); <br>    gluPwlCurve (theNurb, 5, &amp;edgePt[0][0], 2, GLU_MAP1_TRIM_2); <br>    gluEndTrim (theNurb); <br>    gluBeginTrim (theNurb); <br>    gluNurbsCurve (theNurb, 8, curveKnots, 2,  <br>        &amp;curvePt[0][0], 4, GLU_MAP1_TRIM_2); <br>    gluPwlCurve (theNurb, 3, &amp;pwlPt[0][0], 2, GLU_MAP1_TRIM_2); <br>    gluEndTrim (theNurb); <br>    gluEndSurface(theNurb); <br>         <br>    glPopMatrix(); <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluPerspective (45.0, (GLdouble)w/(GLdouble)h, 3.0, 8.0); <br> <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>    glTranslatef (0.0, 0.0, -5.0); <br>} <br> <br>/*  Main Loop  <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 500, 500); <br>    auxInitWindow ("NURBS Surface"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

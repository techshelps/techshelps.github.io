<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TEXGEN.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3587"></a>TEXGEN.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/*  texgen.c <br> *  This program draws a texture mapped teapot with  <br> *  automatically generated texture coordinates.  The <br> *  texture is rendered as stripes on the teapot. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void makeStripeImage(void); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>#define stripeImageWidth 32 <br>GLubyte stripeImage[3*stripeImageWidth]; <br> <br>void makeStripeImage(void) <br>{ <br>    int j; <br>     <br>    for (j = 0; j &lt; stripeImageWidth; j++) { <br>        stripeImage[3*j] = (j&lt;=4) ? 255 : 0; <br>        stripeImage[3*j+1] = (j&gt;4) ? 255 : 0; <br>        stripeImage[3*j+2] = 0; <br>    } <br>} <br> <br>/* glTexGen stuff: */ <br> <br>GLfloat sgenparams[] = {1.0, 1.0, 1.0, 0.0}; <br> <br>void myinit(void) <br>{ <br>    glClearColor (0.0, 0.0, 0.0, 0.0); <br> <br>    makeStripeImage(); <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br>    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE); <br>    glTexParameterf(GL_TEXTURE_1D, GL_TEXTURE_WRAP_S, GL_REPEAT); <br>    glTexParameterf(GL_TEXTURE_1D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); <br>    glTexParameterf(GL_TEXTURE_1D, GL_TEXTURE_MIN_FILTER, GL_LINEAR); <br>    glTexImage1D(GL_TEXTURE_1D, 0, 3, stripeImageWidth, 0, <br>         GL_RGB, GL_UNSIGNED_BYTE, stripeImage); <br> <br>    glTexGeni(GL_S, GL_TEXTURE_GEN_MODE, GL_OBJECT_LINEAR); <br>    glTexGenfv(GL_S, GL_OBJECT_PLANE, sgenparams); <br> <br>    glEnable(GL_DEPTH_TEST); <br>    glDepthFunc(GL_LESS); <br>    glEnable(GL_TEXTURE_GEN_S); <br>    glEnable(GL_TEXTURE_1D); <br>    glEnable(GL_CULL_FACE); <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>    glEnable(GL_AUTO_NORMAL); <br>    glEnable(GL_NORMALIZE); <br>    glFrontFace(GL_CW); <br>    glCullFace(GL_BACK); <br>    glMaterialf (GL_FRONT, GL_SHININESS, 64.0); <br>} <br> <br>void CALLBACK display(void) <br>{ <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br>    glPushMatrix (); <br>    glRotatef(45.0, 0.0, 0.0, 1.0); <br>    auxSolidTeapot(2.0); <br>    glPopMatrix (); <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    if (w &lt;= h) <br>    glOrtho (-3.5, 3.5, -3.5*(GLfloat)h/(GLfloat)w,  <br>        3.5*(GLfloat)h/(GLfloat)w, -3.5, 3.5); <br>    else <br>    glOrtho (-3.5*(GLfloat)w/(GLfloat)h,  <br>        3.5*(GLfloat)w/(GLfloat)h, -3.5, 3.5, -3.5, 3.5); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>} <br> <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 200, 200); <br>    auxInitWindow ("Texture Map"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

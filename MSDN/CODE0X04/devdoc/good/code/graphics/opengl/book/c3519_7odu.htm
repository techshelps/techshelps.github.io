<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACCUM.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3522"></a>ACCUM.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/*  accum.c <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>void myinit(void); <br>void loaddxdy(void); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>GLsizei width, height; <br> <br>void myinit(void) <br>{ <br>    GLfloat ambient[] = { 0.4, 0.4, 0.4, 1.0 }; <br>    GLfloat diffuse[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat position[] = { 0.0, 2.0, 2.0, 0.0 }; <br>    GLfloat mat_ambient[] = { 0.2, 0.2, 0.2, 1.0 }; <br>    GLfloat mat_diffuse[] = { 0.7, 0.7, 0.7, 1.0 }; <br>    GLfloat mat_specular[] = { 0.9, 0.9, 0.9, 1.0 }; <br>    GLfloat mat_shininess[] = { 50.0 }; <br>    GLfloat lmodel_ambient[] = { 0.2, 0.2, 0.2, 1.0 }; <br>     <br>    glEnable(GL_DEPTH_TEST); <br>    glDepthFunc(GL_LESS); <br> <br>    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient); <br>    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse); <br>    glLightfv(GL_LIGHT0, GL_SPECULAR, specular); <br>    glLightfv(GL_LIGHT0, GL_POSITION, position); <br>     <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess); <br> <br>    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient); <br> <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>    glEnable(GL_AUTO_NORMAL); <br>    glEnable(GL_NORMALIZE); <br> <br>    glEnable(GL_CULL_FACE); <br>    glCullFace(GL_FRONT); <br> <br>    glClearAccum(0.0, 0.0, 0.0, 0.0); <br>} <br> <br>#define ACSIZE 16 <br> <br>GLfloat dx[ACSIZE], dy[ACSIZE]; <br> <br>GLfloat jitter3[3][2] = { <br>    {0.5, 0.5},  <br>    {1.35899e-05, 0.230369},  <br>    {0.000189185, 0.766878},  <br>}; <br> <br>GLfloat jitter11[11][2] = { <br>    {0.5, 0.5}, {0.406537, 0.135858},  <br>    {0.860325, 0.968558}, {0.680141, 0.232877},  <br>    {0.775694, 0.584871}, {0.963354, 0.309056},  <br>    {0.593493, 0.864072}, {0.224334, 0.415055},  <br>    {0.0366643, 0.690884}, {0.139685, 0.0313988},  <br>    {0.319861, 0.767097},  <br>}; <br> <br>GLfloat jitter16[16][2] = { <br>    {0.4375, 0.4375}, {0.1875, 0.5625},  <br>    {0.9375, 1.1875}, {0.4375, 0.9375-1},  <br>    {0.6875, 0.5625}, {0.1875, 0.0625},  <br>    {0.6875, 0.3125}, {0.1875, 0.3125},  <br>    {0.4375, 0.1875}, {0.9375-1, 0.4375},  <br>    {0.6875, 0.8125}, {0.4375, 0.6875},  <br>    {0.6875, 0.0625}, {0.9375, 0.9375},  <br>    {1.1875, 0.8125}, {0.9375, 0.6875},  <br>}; <br> <br>GLfloat jitter29[29][2] = { <br>    {0.5, 0.5}, {0.498126, 0.141363},  <br>    {0.217276, 0.651732}, {0.439503, 0.954859},  <br>    {0.734171, 0.836294}, {0.912454, 0.79952},  <br>    {0.406153, 0.671156}, {0.0163892, 0.631994},  <br>    {0.298064, 0.843476}, {0.312025, 0.0990405},  <br>    {0.98135, 0.965697}, {0.841999, 0.272378},  <br>    {0.559348, 0.32727}, {0.809331, 0.638901},  <br>    {0.632583, 0.994471}, {0.00588314, 0.146344},  <br>    {0.713365, 0.437896}, {0.185173, 0.246584},  <br>    {0.901735, 0.474544}, {0.366423, 0.296698},  <br>    {0.687032, 0.188184}, {0.313256, 0.472999},  <br>    {0.543195, 0.800044}, {0.629329, 0.631599},  <br>    {0.818263, 0.0439354}, {0.163978, 0.00621497},  <br>    {0.109533, 0.812811}, {0.131325, 0.471624},  <br>    {0.0196755, 0.331813},  <br>}; <br> <br>GLfloat jitter90[90][2] = { <br>    {0.5, 0.5}, {0.784289, 0.417355},  <br>    {0.608691, 0.678948}, {0.546538, 0.976002},  <br>    {0.972245, 0.270498}, {0.765121, 0.189392},  <br>    {0.513193, 0.743827}, {0.123709, 0.874866},  <br>    {0.991334, 0.745136}, {0.56342, 0.0925047},  <br>    {0.662226, 0.143317}, {0.444563, 0.928535},  <br>    {0.248017, 0.981655}, {0.100115, 0.771923},  <br>    {0.593937, 0.559383}, {0.392095, 0.225932},  <br>    {0.428776, 0.812094}, {0.510615, 0.633584},  <br>    {0.836431, 0.00343328}, {0.494037, 0.391771},  <br>    {0.617448, 0.792324}, {0.688599, 0.48914},  <br>    {0.530421, 0.859206}, {0.0742278, 0.665344},  <br>    {0.979388, 0.626835}, {0.183806, 0.479216},  <br>    {0.151222, 0.0803998}, {0.476489, 0.157863},  <br>    {0.792675, 0.653531}, {0.0990416, 0.267284},  <br>    {0.776667, 0.303894}, {0.312904, 0.296018},  <br>    {0.288777, 0.691008}, {0.460097, 0.0436075},  <br>    {0.594323, 0.440751}, {0.876296, 0.472043},  <br>    {0.0442623, 0.0693901}, {0.355476, 0.00442787},  <br>    {0.391763, 0.361327}, {0.406994, 0.696053},  <br>    {0.708393, 0.724992}, {0.925807, 0.933103},  <br>    {0.850618, 0.11774}, {0.867486, 0.233677},  <br>    {0.208805, 0.285484}, {0.572129, 0.211505},  <br>    {0.172931, 0.180455}, {0.327574, 0.598031},  <br>    {0.685187, 0.372379}, {0.23375, 0.878555},  <br>    {0.960657, 0.409561}, {0.371005, 0.113866},  <br>    {0.29471, 0.496941}, {0.748611, 0.0735321},  <br>    {0.878643, 0.34504}, {0.210987, 0.778228},  <br>    {0.692961, 0.606194}, {0.82152, 0.8893},  <br>    {0.0982095, 0.563104}, {0.214514, 0.581197},  <br>    {0.734262, 0.956545}, {0.881377, 0.583548},  <br>    {0.0560485, 0.174277}, {0.0729515, 0.458003},  <br>    {0.719604, 0.840564}, {0.325388, 0.7883},  <br>    {0.26136, 0.0848927}, {0.393754, 0.467505},  <br>    {0.425361, 0.577672}, {0.648594, 0.0248658},  <br>    {0.983843, 0.521048}, {0.272936, 0.395127},  <br>    {0.177695, 0.675733}, {0.89175, 0.700901},  <br>    {0.632301, 0.908259}, {0.782859, 0.53611},  <br>    {0.0141421, 0.855548}, {0.0437116, 0.351866},  <br>    {0.939604, 0.0450863}, {0.0320883, 0.962943},  <br>    {0.341155, 0.895317}, {0.952087, 0.158387},  <br>    {0.908415, 0.820054}, {0.481435, 0.281195},  <br>    {0.675525, 0.25699}, {0.585273, 0.324454},  <br>    {0.156488, 0.376783}, {0.140434, 0.977416},  <br>    {0.808155, 0.77305}, {0.282973, 0.188937},  <br>}; <br> <br>void loaddxdy(void) <br>{ <br>    long i; <br>    for (i = 0; i &lt; ACSIZE; i++) { <br>        dx[i] = jitter16[i][0]*10/width; <br>        dy[i] = jitter16[i][1]*10/height; <br>    } <br>} <br> <br>void CALLBACK display(void) <br>{ <br>    int i; <br> <br>    glClear(GL_ACCUM_BUFFER_BIT); <br>    loaddxdy(); <br>    for (i = 0; i &lt; (ACSIZE); i++) { <br>        //printf("Pass %d\n", i); <br>        glPushMatrix(); <br>        glTranslatef(dx[i], dy[i], 0.0); <br>        glRotatef(45.0, 1.0, 1.0, 1.0); <br>        glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT); <br>        auxSolidTeapot(1.0); <br>        glPopMatrix(); <br>        glAccum(GL_ACCUM, 1.0/(ACSIZE)); <br>        glFlush(); <br>        auxSwapBuffers(); <br>    } <br>    //printf("final job\n"); <br>    glAccum(GL_RETURN, 1.0); <br>    //printf("done\n"); <br>    glFlush(); <br>    auxSwapBuffers(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if(!h) return; <br>    width = w; height = h; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    if (w &lt;= h) <br>        glOrtho(-3.0, 3.0, -3.0*(GLfloat) h/(GLfloat) w,  <br>                3.0*(GLfloat) h/(GLfloat) w, -15.0, 15.0); <br>    else <br>        glOrtho(-3.0*(GLfloat) w/(GLfloat) h,  <br>                3.0*(GLfloat) w/(GLfloat) h, -3.0, 3.0, -15.0, 15.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>} <br> <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_DOUBLE | AUX_RGB <br>            | AUX_ACCUM | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 300, 300); <br>    auxInitWindow ("Accumulation Buffer"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NURBS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3564"></a>NURBS.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  nurbs.c <br> *  This program shows a NURBS (Non-uniform rational B-splines) <br> *  surface, shaped like a heart. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>#define S_NUMPOINTS 13 <br>#define S_ORDER     3    <br>#define S_NUMKNOTS  (S_NUMPOINTS + S_ORDER) <br>#define T_NUMPOINTS 3 <br>#define T_ORDER     3  <br>#define T_NUMKNOTS  (T_NUMPOINTS + T_ORDER) <br>#define SQRT2    1.41421356237309504880 <br> <br>/* initialized local data */ <br> <br>GLfloat sknots[S_NUMKNOTS] = <br>    {-1.0, -1.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, <br>      4.0,  5.0,  6.0, 7.0, 8.0, 9.0, 9.0, 9.0}; <br>GLfloat tknots[T_NUMKNOTS] = {1.0, 1.0, 1.0, 2.0, 2.0, 2.0}; <br> <br>GLfloat ctlpoints[S_NUMPOINTS][T_NUMPOINTS][4] = { <br>{   {4.,2.,2.,1.},{4.,1.6,2.5,1.},{4.,2.,3.0,1.}    }, <br>{   {5.,4.,2.,1.},{5.,4.,2.5,1.},{5.,4.,3.0,1.} }, <br>{   {6.,5.,2.,1.},{6.,5.,2.5,1.},{6.,5.,3.0,1.} }, <br>{   {SQRT2*6.,SQRT2*6.,SQRT2*2.,SQRT2}, <br>    {SQRT2*6.,SQRT2*6.,SQRT2*2.5,SQRT2}, <br>    {SQRT2*6.,SQRT2*6.,SQRT2*3.0,SQRT2}  }, <br>{   {5.2,6.7,2.,1.},{5.2,6.7,2.5,1.},{5.2,6.7,3.0,1.}   }, <br>{   {SQRT2*4.,SQRT2*6.,SQRT2*2.,SQRT2}, <br>    {SQRT2*4.,SQRT2*6.,SQRT2*2.5,SQRT2}, <br>    {SQRT2*4.,SQRT2*6.,SQRT2*3.0,SQRT2}  }, <br>{   {4.,5.2,2.,1.},{4.,4.6,2.5,1.},{4.,5.2,3.0,1.}  }, <br>{   {SQRT2*4.,SQRT2*6.,SQRT2*2.,SQRT2}, <br>    {SQRT2*4.,SQRT2*6.,SQRT2*2.5,SQRT2}, <br>    {SQRT2*4.,SQRT2*6.,SQRT2*3.0,SQRT2}  }, <br>{   {2.8,6.7,2.,1.},{2.8,6.7,2.5,1.},{2.8,6.7,3.0,1.}   }, <br>{   {SQRT2*2.,SQRT2*6.,SQRT2*2.,SQRT2}, <br>    {SQRT2*2.,SQRT2*6.,SQRT2*2.5,SQRT2}, <br>    {SQRT2*2.,SQRT2*6.,SQRT2*3.0,SQRT2}  }, <br>{   {2.,5.,2.,1.},{2.,5.,2.5,1.},{2.,5.,3.0,1.} }, <br>{   {3.,4.,2.,1.},{3.,4.,2.5,1.},{3.,4.,3.0,1.} }, <br>{   {4.,2.,2.,1.},{4.,1.6,2.5,1.},{4.,2.,3.0,1.}    } <br>}; <br> <br>GLUnurbsObj *theNurb; <br> <br>/*  Initialize material property, light source, lighting model,  <br> *  and depth buffer. <br> */ <br>void myinit(void) <br>{ <br>    GLfloat mat_ambient[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat mat_diffuse[] = { 1.0, 0.2, 1.0, 1.0 }; <br>    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat mat_shininess[] = { 50.0 }; <br> <br>    GLfloat light0_position[] = { 1.0, 0.1, 1.0, 0.0 }; <br>    GLfloat light1_position[] = { -1.0, 0.1, 1.0, 0.0 }; <br> <br>    GLfloat lmodel_ambient[] = { 0.3, 0.3, 0.3, 1.0 }; <br> <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess); <br>    glLightfv(GL_LIGHT0, GL_POSITION, light0_position); <br>    glLightfv(GL_LIGHT1, GL_POSITION, light1_position); <br>    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient); <br> <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>    glEnable(GL_LIGHT1); <br>    glDepthFunc(GL_LESS); <br>    glEnable(GL_DEPTH_TEST); <br>    glEnable(GL_AUTO_NORMAL); <br> <br>    theNurb = gluNewNurbsRenderer(); <br> <br>    glNewList (1, GL_COMPILE); <br>    gluBeginSurface(theNurb); <br>    gluNurbsProperty(theNurb, GLU_DISPLAY_MODE, GLU_FILL); <br>    gluNurbsSurface(theNurb,  <br>        S_NUMKNOTS, sknots, <br>        T_NUMKNOTS, tknots, <br>        4 * T_NUMPOINTS, <br>        4, <br>        &amp;ctlpoints[0][0][0],  <br>        S_ORDER, T_ORDER, <br>        GL_MAP2_VERTEX_4); <br>    gluEndSurface(theNurb); <br>    glEndList (); <br> <br>} <br> <br>void CALLBACK display(void) <br>{ <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br>    glColor3f(1.0, 1.0, 1.0); <br> <br>    glPushMatrix(); <br>    glTranslatef (4., 4.5, 2.5); <br>    glRotatef (220.0, 1., 0., 0.); <br>    glRotatef (115.0, 0., 1., 0.); <br>    glTranslatef (-4., -4.5, -2.5); <br>    glCallList (1); <br>    glPopMatrix(); <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    glFrustum(-2.0, 2.0, -2.0, 2.0, 0.8, 10.0); <br>    gluLookAt(7.0,4.5,4.0, 4.5,4.5,2.0, 6.0,-3.0,2.0); <br> <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 500, 500); <br>    auxInitWindow ("NURBS Surface"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

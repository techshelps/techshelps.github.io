<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MOVELGHT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3563"></a>MOVELGHT.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  movelight.c <br> *  This program demonstrates when to issue lighting and  <br> *  transformation commands to render a model with a light  <br> *  which is moved by a modeling transformation (rotate or  <br> *  translate).  The light position is reset after the modeling  <br> *  transformation is called.  The eye position does not change. <br> * <br> *  A sphere is drawn using a grey material characteristic.  <br> *  A single light source illuminates the object. <br> * <br> *  Interaction:  pressing the left or middle mouse button <br> *  alters the modeling transformation (x rotation) by 30 degrees.   <br> *  The scene is then redrawn with the light in a new position. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void CALLBACK movelight (AUX_EVENTREC *event); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>static int spin = 0; <br> <br>void CALLBACK movelight (AUX_EVENTREC *event) <br>{ <br>    spin = (spin + 30) % 360; <br>} <br> <br>void myinit (void) <br>{ <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br> <br>    glDepthFunc(GL_LESS); <br>    glEnable(GL_DEPTH_TEST); <br>} <br> <br>/*  Here is where the light position is reset after the modeling <br> *  transformation (glRotated) is called.  This places the  <br> *  light at a new position in world coordinates.  The cube <br> *  represents the position of the light. <br> */ <br>void CALLBACK display(void) <br>{ <br>    GLfloat position[] = { 0.0, 0.0, 1.5, 1.0 }; <br> <br>    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br>    glPushMatrix (); <br>    glTranslatef (0.0, 0.0, -5.0);  <br> <br>    glPushMatrix (); <br>    glRotated ((GLdouble) spin, 1.0, 0.0, 0.0); <br>    glRotated (0.0, 1.0, 0.0, 0.0); <br>    glLightfv (GL_LIGHT0, GL_POSITION, position); <br> <br>    glTranslated (0.0, 0.0, 1.5); <br>    glDisable (GL_LIGHTING); <br>    glColor3f (0.0, 1.0, 1.0); <br>    auxWireCube (0.1); <br>    glEnable (GL_LIGHTING); <br>    glPopMatrix (); <br> <br>    auxSolidTorus (0.275, 0.85); <br>    glPopMatrix (); <br>    glFlush (); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluPerspective(40.0, (GLfloat) w/(GLfloat) h, 1.0, 20.0); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 500, 500); <br>    auxInitWindow ("Moving Light"); <br>    myinit(); <br>    auxMouseFunc (AUX_LEFTBUTTON, AUX_MOUSEDOWN, movelight); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

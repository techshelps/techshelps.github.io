<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STROKE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3582"></a>STROKE.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  stroke.c  <br> *  This program demonstrates some characters of a  <br> *  stroke (vector) font.  The characters are represented <br> *  by display lists, which are given numbers which  <br> *  correspond to the ASCII values of the characters. <br> *  Use of glCallLists() is demonstrated. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>typedef struct charpoint { <br>    GLfloat   x, y; <br>    int    type; <br>} CP; <br> <br>void myinit(void); <br>void drawLetter(CP *l); <br>void printStrokedString(char *s); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>#define PT 1 <br>#define STROKE 2 <br>#define END 3 <br> <br> <br>CP Adata[] = { <br>    { 0, 0, PT}, {0, 9, PT}, {1, 10, PT}, {4, 10, PT},  <br>    {5, 9, PT}, {5, 0, STROKE}, {0, 5, PT}, {5, 5, END} <br>}; <br> <br>CP Edata[] = { <br>    {5, 0, PT}, {0, 0, PT}, {0, 10, PT}, {5, 10, STROKE}, <br>    {0, 5, PT}, {4, 5, END} <br>}; <br> <br>CP Pdata[] = { <br>    {0, 0, PT}, {0, 10, PT},  {4, 10, PT}, {5, 9, PT}, {5, 6, PT},  <br>    {4, 5, PT}, {0, 5, END} <br>}; <br> <br>CP Rdata[] = { <br>    {0, 0, PT}, {0, 10, PT},  {4, 10, PT}, {5, 9, PT}, {5, 6, PT},  <br>    {4, 5, PT}, {0, 5, STROKE}, {3, 5, PT}, {5, 0, END} <br>}; <br> <br>CP Sdata[] = { <br>    {0, 1, PT}, {1, 0, PT}, {4, 0, PT}, {5, 1, PT}, {5, 4, PT},  <br>    {4, 5, PT}, {1, 5, PT}, {0, 6, PT}, {0, 9, PT}, {1, 10, PT},  <br>    {4, 10, PT}, {5, 9, END} <br>}; <br> <br>/*  drawLetter() interprets the instructions from the array <br> *  for that letter and renders the letter with line segments. <br> */ <br>void drawLetter(CP *l) <br>{ <br>    glBegin(GL_LINE_STRIP); <br>    while (1) { <br>    switch (l-&gt;type) { <br>        case PT: <br>        glVertex2fv(&amp;l-&gt;x); <br>        break; <br>        case STROKE: <br>        glVertex2fv(&amp;l-&gt;x); <br>        glEnd(); <br>        glBegin(GL_LINE_STRIP); <br>        break; <br>        case END: <br>        glVertex2fv(&amp;l-&gt;x); <br>        glEnd(); <br>        glTranslatef(8.0, 0.0, 0.0); <br>        return; <br>    } <br>    l++; <br>    } <br>} <br> <br>/*  Create a display list for each of 6 characters  */ <br>void myinit (void) <br>{ <br>    GLuint base; <br> <br>    glShadeModel (GL_FLAT); <br> <br>    base = glGenLists (128); <br>    glListBase(base); <br>    glNewList(base+'A', GL_COMPILE); drawLetter(Adata); glEndList(); <br>    glNewList(base+'E', GL_COMPILE); drawLetter(Edata); glEndList(); <br>    glNewList(base+'P', GL_COMPILE); drawLetter(Pdata); glEndList(); <br>    glNewList(base+'R', GL_COMPILE); drawLetter(Rdata); glEndList(); <br>    glNewList(base+'S', GL_COMPILE); drawLetter(Sdata); glEndList(); <br>    glNewList(base+' ', GL_COMPILE); glTranslatef(8.0, 0.0, 0.0); glEndList(); <br>} <br> <br>char *test1 = "A SPARE SERAPE APPEARS AS"; <br>char *test2 = "APES PREPARE RARE PEPPERS"; <br> <br>void printStrokedString(char *s) <br>{ <br>    GLsizei len = strlen(s); <br>    glCallLists(len, GL_BYTE, (GLbyte *)s); <br>} <br> <br>void CALLBACK display(void) <br>{ <br>    glClear(GL_COLOR_BUFFER_BIT); <br>    glColor3f(1.0, 1.0, 1.0); <br>    glPushMatrix(); <br>    glScalef(2.0, 2.0, 2.0); <br>    glTranslatef(10.0, 30.0, 0.0); <br>    printStrokedString(test1); <br>    glPopMatrix(); <br>    glPushMatrix(); <br>    glScalef(2.0, 2.0, 2.0); <br>    glTranslatef(10.0, 13.0, 0.0); <br>    printStrokedString(test2); <br>    glPopMatrix(); <br>    glFlush(); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB); <br>    auxInitPosition (0, 0, 440, 120); <br>    auxInitWindow ("Stroke Font"); <br>    myinit (); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

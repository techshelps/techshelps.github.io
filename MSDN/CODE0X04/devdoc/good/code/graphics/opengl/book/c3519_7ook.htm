<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TEA.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3584"></a>TEA.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  tea.c <br> *  This program demonstrates two-sided lighting and compares <br> *  it with one-sided lighting.  Three teapots are drawn, with <br> *  a clipping plane to expose the interior of the objects. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>/*  Initialize light source. <br> */ <br>void myinit(void) <br>{ <br>    GLfloat light_ambient[] = { 0.0, 0.0, 0.0, 1.0 }; <br>    GLfloat light_diffuse[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat light_specular[] = { 1.0, 1.0, 1.0, 1.0 }; <br>/*  light_position is NOT default value */ <br>    GLfloat light_position[] = { 1.0, 1.0, 1.0, 0.0 }; <br> <br>    glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient); <br>    glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse); <br>    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular); <br>    glLightfv(GL_LIGHT0, GL_POSITION, light_position); <br>     <br>    glFrontFace (GL_CW); <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>    glEnable(GL_AUTO_NORMAL); <br>    glEnable(GL_NORMALIZE); <br>    glDepthFunc(GL_LESS); <br>    glEnable(GL_DEPTH_TEST); <br>} <br> <br>void CALLBACK display(void) <br>{ <br>    GLdouble eqn[4] = {1.0, 0.0, -1.0, 1.0}; <br>    GLfloat two_side_on[] = { GL_TRUE }; <br>    GLfloat two_side_off[] = { GL_FALSE }; <br>    GLfloat mat_diffuse[] = { 0.8, 0.8, 0.8, 1.0 }; <br>    GLfloat back_diffuse[] = { 0.8, 0.2, 0.8, 1.0 }; <br> <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br> <br>    glPushMatrix (); <br>    glClipPlane (GL_CLIP_PLANE0, eqn);  /*  slice objects   */ <br>    glEnable (GL_CLIP_PLANE0);  <br> <br>    glPushMatrix (); <br>    glTranslatef (0.0, 2.0, 0.0); <br>    auxSolidTeapot(1.0);    /*  one-sided lighting  */ <br>    glPopMatrix (); <br> <br>    /*  two-sided lighting, but same material   */ <br>    glLightModelf (GL_LIGHT_MODEL_TWO_SIDE, GL_TRUE); <br>    glMaterialfv (GL_FRONT_AND_BACK, GL_DIFFUSE, mat_diffuse); <br>    glPushMatrix (); <br>    glTranslatef (0.0, 0.0, 0.0); <br>    auxSolidTeapot(1.0); <br>    glPopMatrix (); <br> <br>    /*  two-sided lighting, two different materials */ <br>    glMaterialfv (GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv (GL_BACK, GL_DIFFUSE, back_diffuse); <br>    glPushMatrix (); <br>    glTranslatef (0.0, -2.0, 0.0); <br>    auxSolidTeapot(1.0); <br>    glPopMatrix (); <br> <br>    glLightModelf (GL_LIGHT_MODEL_TWO_SIDE, GL_FALSE); <br>    glDisable (GL_CLIP_PLANE0); <br>    glPopMatrix (); <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    if (w &lt;= h)  <br>    glOrtho (-4.0, 4.0, -4.0*(GLfloat)h/(GLfloat)w,  <br>        4.0*(GLfloat)h/(GLfloat)w, -10.0, 10.0); <br>    else  <br>    glOrtho (-4.0*(GLfloat)w/(GLfloat)h,  <br>        4.0*(GLfloat)w/(GLfloat)h, -4.0, 4.0, -10.0, 10.0); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 500, 500); <br>    auxInitWindow ("Two Sided Lighting"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

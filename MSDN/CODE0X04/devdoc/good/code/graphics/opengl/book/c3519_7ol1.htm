<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PICKDPTH.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3565"></a>PICKDPTH.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  pickdepth.c <br> *  Picking is demonstrated in this program.  In  <br> *  rendering mode, three overlapping rectangles are  <br> *  drawn.  When the left mouse button is pressed,  <br> *  selection mode is entered with the picking matrix.   <br> *  Rectangles which are drawn under the cursor position <br> *  are "picked."  Pay special attention to the depth  <br> *  value range, which is returned. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>void myinit(void); <br>void drawRects(GLenum mode); <br>void processHits (GLint hits, GLuint buffer[]); <br>void CALLBACK pickRects(AUX_EVENTREC *event); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>void myinit(void) <br>{ <br>    glClearColor (0.0, 0.0, 0.0, 0.0); <br>    glDepthFunc(GL_LESS); <br>    glEnable(GL_DEPTH_TEST); <br>    glShadeModel(GL_FLAT); <br>    glDepthRange (0.0, 1.0);    /*  The default z mapping   */ <br>} <br> <br>/*  The three rectangles are drawn.  In selection mode,  <br> *  each rectangle is given the same name.  Note that  <br> *  each rectangle is drawn with a different z value. <br> */ <br>void drawRects(GLenum mode) <br>{ <br>    if (mode == GL_SELECT) <br>    glLoadName (1); <br>    glBegin (GL_QUADS); <br>    glColor3f (1.0, 1.0, 0.0); <br>    glVertex3i (2, 0, 0); <br>    glVertex3i (2, 6, 0); <br>    glVertex3i (6, 6, 0); <br>    glVertex3i (6, 0, 0); <br>    glColor3f (0.0, 1.0, 1.0); <br>    glVertex3i (3, 2, -1); <br>    glVertex3i (3, 8, -1); <br>    glVertex3i (8, 8, -1); <br>    glVertex3i (8, 2, -1); <br>    glColor3f (1.0, 0.0, 1.0); <br>    glVertex3i (0, 2, -2); <br>    glVertex3i (0, 7, -2); <br>    glVertex3i (5, 7, -2); <br>    glVertex3i (5, 2, -2); <br>    glEnd (); <br>} <br> <br>/*  processHits() prints out the contents of the  <br> *  selection array. <br> */ <br>void processHits (GLint hits, GLuint buffer[]) <br>{ <br>    int i; <br>    GLint names, *ptr; <br> <br>    //printf ("hits = %d\n", hits); <br>    ptr = (GLuint *) buffer; <br>    for (i = 0; i &lt; hits; i++) {    /*  for each hit  */ <br>        names = *ptr; <br>        //printf (" number of names for hit = %d\n", names); ptr++; <br>        //printf ("  z1 is %u;", *ptr); ptr++; <br>        //printf (" z2 is %u\n", *ptr); ptr++; <br>        //printf ("   the name is "); <br>/* <br>        for (j = 0; j &lt; names; j++) { <br>            printf ("%d ", *ptr); ptr++; <br>        } <br>*/ <br>        //printf ("\n"); <br>    } <br>} <br> <br>/*  pickRects() sets up selection mode, name stack,  <br> *  and projection matrix for picking.  Then the objects  <br> *  are drawn. <br> */ <br>#define BUFSIZE 512 <br> <br>void CALLBACK pickRects(AUX_EVENTREC *event) <br>{ <br>    GLuint selectBuf[BUFSIZE]; <br>    GLint hits; <br>    GLint viewport[4]; <br>    int x, y; <br> <br>    x = event-&gt;data[AUX_MOUSEX]; <br>    y = event-&gt;data[AUX_MOUSEY]; <br>    glGetIntegerv (GL_VIEWPORT, viewport); <br> <br>    glSelectBuffer (BUFSIZE, selectBuf); <br>    (void) glRenderMode (GL_SELECT); <br> <br>    glInitNames(); <br>    glPushName((unsigned)-1); <br> <br>    glMatrixMode (GL_PROJECTION); <br>    glPushMatrix (); <br>    glLoadIdentity (); <br>/*  create 5x5 pixel picking region near cursor location    */ <br>    gluPickMatrix ((GLdouble) x, (GLdouble) (viewport[3] - y),  <br>    5.0, 5.0, viewport); <br>    glOrtho (0.0, 8.0, 0.0, 8.0, -0.5, 2.5); <br>    drawRects (GL_SELECT); <br>    glPopMatrix (); <br>    glFlush (); <br> <br>    hits = glRenderMode (GL_RENDER); <br>    //processHits (hits, selectBuf); <br>}  <br> <br>void CALLBACK display(void) <br>{ <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br>    drawRects (GL_RENDER); <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    glOrtho (0.0, 8.0, 0.0, 8.0, 0.0, 2.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, depth buffer, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 100, 100); <br>    auxInitWindow ("Picking Rectangles"); <br>    myinit (); <br>    auxMouseFunc (AUX_LEFTBUTTON, AUX_MOUSEDOWN, pickRects); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

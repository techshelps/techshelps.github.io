<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SELECT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3577"></a>SELECT.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  select.c <br> *  This is an illustration of the selection mode and  <br> *  name stack, which detects whether objects which collide  <br> *  with a viewing volume.  First, four triangles and a  <br> *  rectangular box representing a viewing volume are drawn  <br> *  (drawScene routine).  The green triangle and yellow  <br> *  triangles appear to lie within the viewing volume, but  <br> *  the red triangle appears to lie outside it.  Then the  <br> *  selection mode is entered (selectObjects routine).   <br> *  Drawing to the screen ceases.  To see if any collisions  <br> *  occur, the four triangles are called.  In this example,  <br> *  the green triangle causes one hit with the name 1, and  <br> *  the yellow triangles cause one hit with the name 3. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>void myinit(void); <br>void drawTriangle (GLfloat x1, GLfloat y1, GLfloat x2, <br>    GLfloat y2, GLfloat x3, GLfloat y3, GLfloat z); <br>void drawViewVolume (GLfloat x1, GLfloat x2, GLfloat y1, <br>    GLfloat y2, GLfloat z1, GLfloat z2); <br>void drawScene (void); <br>void processHits (GLint hits, GLuint buffer[]); <br>void selectObjects(void); <br>void CALLBACK display(void); <br> <br>/*  draw a triangle with vertices at (x1, y1), (x2, y2) <br> *  and (x3, y3) at z units away from the origin. <br> */ <br>void drawTriangle (GLfloat x1, GLfloat y1, GLfloat x2,  <br>    GLfloat y2, GLfloat x3, GLfloat y3, GLfloat z) <br>{ <br>    glBegin (GL_TRIANGLES); <br>    glVertex3f (x1, y1, z); <br>    glVertex3f (x2, y2, z); <br>    glVertex3f (x3, y3, z); <br>    glEnd (); <br>} <br> <br>/*  draw a rectangular box with these outer x, y, and z values  */ <br>void drawViewVolume (GLfloat x1, GLfloat x2, GLfloat y1,  <br>    GLfloat y2, GLfloat z1, GLfloat z2) <br>{ <br>    glColor3f (1.0, 1.0, 1.0); <br>    glBegin (GL_LINE_LOOP); <br>    glVertex3f (x1, y1, -z1); <br>    glVertex3f (x2, y1, -z1); <br>    glVertex3f (x2, y2, -z1); <br>    glVertex3f (x1, y2, -z1); <br>    glEnd (); <br> <br>    glBegin (GL_LINE_LOOP); <br>    glVertex3f (x1, y1, -z2); <br>    glVertex3f (x2, y1, -z2); <br>    glVertex3f (x2, y2, -z2); <br>    glVertex3f (x1, y2, -z2); <br>    glEnd (); <br> <br>    glBegin (GL_LINES); /*  4 lines */ <br>    glVertex3f (x1, y1, -z1); <br>    glVertex3f (x1, y1, -z2); <br>    glVertex3f (x1, y2, -z1); <br>    glVertex3f (x1, y2, -z2); <br>    glVertex3f (x2, y1, -z1); <br>    glVertex3f (x2, y1, -z2); <br>    glVertex3f (x2, y2, -z1); <br>    glVertex3f (x2, y2, -z2); <br>    glEnd (); <br>} <br> <br>/*  drawScene() draws 4 triangles and a wire frame <br> *  which represents the viewing volume. <br> */ <br>void drawScene (void) <br>{ <br>    glMatrixMode (GL_PROJECTION); <br>    glLoadIdentity (); <br>    gluPerspective (40.0, 4.0/3.0, 0.01, 100.0); <br> <br>    glMatrixMode (GL_MODELVIEW); <br>    glLoadIdentity (); <br>    gluLookAt (7.5, 7.5, 12.5, 2.5, 2.5, -5.0, 0.0, 1.0, 0.0); <br>    glColor3f (0.0, 1.0, 0.0);  /*  green triangle  */ <br>    drawTriangle (2.0, 2.0, 3.0, 2.0, 2.5, 3.0, -5.0); <br>    glColor3f (1.0, 0.0, 0.0);  /*  red triangle    */ <br>    drawTriangle (2.0, 7.0, 3.0, 7.0, 2.5, 8.0, -5.0); <br>    glColor3f (1.0, 1.0, 0.0);  /*  yellow triangles    */ <br>    drawTriangle (2.0, 2.0, 3.0, 2.0, 2.5, 3.0, 0.0); <br>    drawTriangle (2.0, 2.0, 3.0, 2.0, 2.5, 3.0, -10.0); <br>    drawViewVolume (0.0, 5.0, 0.0, 5.0, 0.0, 10.0); <br>} <br> <br>/*  processHits() prints out the contents of the selection array. <br> */ <br>void processHits (GLint hits, GLuint buffer[]) <br>{ <br>    int i; <br>    GLint names, *ptr; <br> <br>    //printf ("hits = %d\n", hits); <br>    ptr = (GLuint *) buffer; <br>    for (i = 0; i &lt; hits; i++) {    /*  for each hit  */ <br>        names = *ptr; <br>        //printf (" number of names for hit = %d\n", names); ptr++; <br>        //printf ("  z1 is %u;", *ptr); ptr++; <br>        //printf (" z2 is %u\n", *ptr); ptr++; <br>        //printf ("   the name is "); <br>/* <br>        for (j = 0; j &lt; names; j++) { <br>            //printf ("%d ", *ptr); ptr++; <br>        } <br>*/ <br>        //printf ("\n"); <br>    } <br>} <br> <br>/*  selectObjects() "draws" the triangles in selection mode,  <br> *  assigning names for the triangles.  Note that the third <br> *  and fourth triangles share one name, so that if either  <br> *  or both triangles intersects the viewing/clipping volume,  <br> *  only one hit will be registered. <br> */ <br>#define BUFSIZE 512 <br> <br>void selectObjects(void) <br>{ <br>    GLuint selectBuf[BUFSIZE]; <br>    GLint hits; <br> <br>    glSelectBuffer (BUFSIZE, selectBuf); <br>    (void) glRenderMode (GL_SELECT); <br> <br>    glInitNames(); <br>    glPushName((unsigned)-1); <br> <br>    glPushMatrix (); <br>    glMatrixMode (GL_PROJECTION); <br>    glLoadIdentity (); <br>    glOrtho (0.0, 5.0, 0.0, 5.0, 0.0, 10.0); <br>    glMatrixMode (GL_MODELVIEW); <br>    glLoadIdentity (); <br>    glLoadName(1); <br>    drawTriangle (2.0, 2.0, 3.0, 2.0, 2.5, 3.0, -5.0); <br>    glLoadName(2); <br>    drawTriangle (2.0, 7.0, 3.0, 7.0, 2.5, 8.0, -5.0); <br>    glLoadName(3); <br>    drawTriangle (2.0, 2.0, 3.0, 2.0, 2.5, 3.0, 0.0); <br>    drawTriangle (2.0, 2.0, 3.0, 2.0, 2.5, 3.0, -10.0); <br>    glPopMatrix (); <br>    glFlush (); <br> <br>    hits = glRenderMode (GL_RENDER); <br>    processHits (hits, selectBuf); <br>}  <br> <br>void myinit (void)  <br>{ <br>    glDepthFunc(GL_LESS); <br>    glEnable(GL_DEPTH_TEST); <br>    glShadeModel(GL_FLAT); <br>} <br> <br>void CALLBACK display(void) <br>{ <br>    glClearColor (0.0, 0.0, 0.0, 0.0); <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br>    drawScene (); <br>    selectObjects (); <br>    glFlush(); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, depth buffer, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 200, 200); <br>    auxInitWindow ("Selection Mode"); <br>    myinit (); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

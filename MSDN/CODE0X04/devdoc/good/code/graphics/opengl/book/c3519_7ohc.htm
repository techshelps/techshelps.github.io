<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CUBE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3540"></a>CUBE.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  cube.c <br> *  Draws a 3-D cube, viewed with perspective, stretched  <br> *  along the y-axis. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br>void CALLBACK display(void); <br> <br>/*  Clear the screen.  Set the current color to white. <br> *  Draw the wire frame cube. <br> */ <br>void CALLBACK display (void) <br>{ <br>    glClear(GL_COLOR_BUFFER_BIT); <br>    glColor3f (1.0, 1.0, 1.0); <br>    glLoadIdentity ();  /*  clear the matrix    */ <br>    glTranslatef (0.0, 0.0, -5.0);  /*  viewing transformation  */ <br>    glScalef (1.0, 2.0, 1.0);   /*  modeling transformation */ <br>    auxWireCube(1.0);   /*  draw the cube   */ <br>    glFlush(); <br>} <br> <br>void myinit (void) { <br>    glShadeModel (GL_FLAT); <br>} <br> <br>/*  Called when the window is first opened and whenever  <br> *  the window is reconfigured (moved or resized). <br> */ <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    glMatrixMode (GL_PROJECTION);   /*  prepare for and then  */  <br>    glLoadIdentity ();  /*  define the projection  */ <br>    glFrustum (-1.0, 1.0, -1.0, 1.0, 1.5, 20.0);    /*  transformation  */ <br>    glMatrixMode (GL_MODELVIEW);    /*  back to modelview matrix    */ <br>    glViewport (0, 0, w, h);    /*  define the viewport */ <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB); <br>    auxInitPosition (0, 0, 500, 500); <br>    auxInitWindow ("Perspective 3-D Cube"); <br>    myinit (); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

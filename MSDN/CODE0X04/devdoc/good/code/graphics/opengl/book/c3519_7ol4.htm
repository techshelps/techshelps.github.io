<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PLANE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3568"></a>PLANE.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  plane.c <br> *  This program demonstrates the use of local versus  <br> *  infinite lighting on a flat plane. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void drawPlane(void); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>/*  Initialize material property, light source, and lighting model. <br> */ <br>void myinit(void) <br>{ <br>    GLfloat mat_ambient[] = { 0.0, 0.0, 0.0, 1.0 }; <br>/*   mat_specular and mat_shininess are NOT default values  */ <br>    GLfloat mat_diffuse[] = { 0.4, 0.4, 0.4, 1.0 }; <br>    GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat mat_shininess[] = { 15.0 }; <br> <br>    GLfloat light_ambient[] = { 0.0, 0.0, 0.0, 1.0 }; <br>    GLfloat light_diffuse[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat light_specular[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat lmodel_ambient[] = { 0.2, 0.2, 0.2, 1.0 }; <br> <br>    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess); <br>    glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient); <br>    glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse); <br>    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular); <br>    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient); <br> <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>    glDepthFunc(GL_LESS); <br>    glEnable(GL_DEPTH_TEST); <br>} <br> <br>void drawPlane(void) <br>{ <br>    glBegin (GL_QUADS); <br>    glNormal3f (0.0, 0.0, 1.0); <br>    glVertex3f (-1.0, -1.0, 0.0); <br>    glVertex3f (0.0, -1.0, 0.0); <br>    glVertex3f (0.0, 0.0, 0.0); <br>    glVertex3f (-1.0, 0.0, 0.0); <br> <br>    glNormal3f (0.0, 0.0, 1.0); <br>    glVertex3f (0.0, -1.0, 0.0); <br>    glVertex3f (1.0, -1.0, 0.0); <br>    glVertex3f (1.0, 0.0, 0.0); <br>    glVertex3f (0.0, 0.0, 0.0); <br> <br>    glNormal3f (0.0, 0.0, 1.0); <br>    glVertex3f (0.0, 0.0, 0.0); <br>    glVertex3f (1.0, 0.0, 0.0); <br>    glVertex3f (1.0, 1.0, 0.0); <br>    glVertex3f (0.0, 1.0, 0.0); <br> <br>    glNormal3f (0.0, 0.0, 1.0); <br>    glVertex3f (0.0, 0.0, 0.0); <br>    glVertex3f (0.0, 1.0, 0.0); <br>    glVertex3f (-1.0, 1.0, 0.0); <br>    glVertex3f (-1.0, 0.0, 0.0); <br>    glEnd(); <br>} <br> <br>void CALLBACK display (void) <br>{ <br>    GLfloat infinite_light[] = { 1.0, 1.0, 1.0, 0.0 }; <br>    GLfloat local_light[] = { 1.0, 1.0, 1.0, 1.0 }; <br> <br>    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br> <br>    glPushMatrix (); <br>    glTranslatef (-1.5, 0.0, 0.0); <br>    glLightfv (GL_LIGHT0, GL_POSITION, infinite_light); <br>    drawPlane (); <br>    glPopMatrix (); <br> <br>    glPushMatrix (); <br>    glTranslatef (1.5, 0.0, 0.0); <br>    glLightfv (GL_LIGHT0, GL_POSITION, local_light); <br>    drawPlane (); <br>    glPopMatrix (); <br>    glFlush (); <br>} <br> <br>void CALLBACK myReshape (GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport (0, 0, w, h); <br>    glMatrixMode (GL_PROJECTION); <br>    glLoadIdentity (); <br>    if (w &lt;= h)  <br>    glOrtho (-1.5, 1.5, -1.5*(GLdouble)h/(GLdouble)w,  <br>        1.5*(GLdouble)h/(GLdouble)w, -10.0, 10.0); <br>    else  <br>    glOrtho (-1.5*(GLdouble)w/(GLdouble)h,  <br>        1.5*(GLdouble)w/(GLdouble)h, -1.5, 1.5, -10.0, 10.0); <br>    glMatrixMode (GL_MODELVIEW); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 500, 200); <br>    auxInitWindow ("Local vs Infinite Lighting"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

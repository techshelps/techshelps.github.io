<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAPLIGHT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3559"></a>MAPLIGHT.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  maplight.c <br> *  This program demonstrates the use of the GL lighting model. <br> *  A sphere is drawn using a magenta diffuse reflective and <br> *  white specular material property. <br> *  A single light source illuminates the object.  This program <br> *  illustrates lighting in color map mode. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void CALLBACK display(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br> <br>/*  Initialize material property, light source, and lighting model. <br> */ <br>void myinit(void) <br>{ <br>    GLint i; <br> <br>    GLfloat light_position[] = { 1.0, 1.0, 1.0, 0.0 }; <br>    GLfloat mat_colormap[] = { 16.0, 48.0, 79.0 }; <br>    GLfloat mat_shininess[] = { 10.0 }; <br>     <br>    glMaterialfv(GL_FRONT, GL_COLOR_INDEXES, mat_colormap); <br>    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess); <br>    glLightfv(GL_LIGHT0, GL_POSITION, light_position); <br> <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br> <br>    glDepthFunc(GL_LESS); <br>    glEnable(GL_DEPTH_TEST); <br> <br>    for (i = 0; i &lt; 32; i++) { <br>    auxSetOneColor (16 + i, 1.0 * (i/32.0), 0.0, 1.0 * (i/32.0)); <br>    auxSetOneColor (48 + i, 1.0, 1.0 * (i/32.0), 1.0); <br>    } <br>    glClearIndex(0); <br>} <br> <br>void CALLBACK display(void) <br>{ <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br>    auxSolidSphere(1.0); <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    if (w &lt;= h)  <br>    glOrtho (-1.5, 1.5, -1.5*(GLfloat)h/(GLfloat)w,  <br>        1.5*(GLfloat)h/(GLfloat)w, -10.0, 10.0); <br>    else  <br>    glOrtho (-1.5*(GLfloat)w/(GLfloat)h,  <br>        1.5*(GLfloat)w/(GLfloat)h, -1.5, 1.5, -10.0, 10.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar, color  <br> *  index display mode, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_INDEX | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 500, 500); <br>    auxInitWindow ("Lighting in Color Map Mode"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOFNOT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3545"></a>DOFNOT.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/* <br> *  dofnot.c <br> *  This program demonstrates the same scene as dof.c, but <br> *  without use of the accumulation buffer, so everything <br> *  is in focus. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void renderTeapot (GLfloat x, GLfloat y, GLfloat z, <br>    GLfloat ambr, GLfloat ambg, GLfloat ambb,  <br>    GLfloat difr, GLfloat difg, GLfloat difb,  <br>    GLfloat specr, GLfloat specg, GLfloat specb, GLfloat shine); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br>void CALLBACK display(void); <br> <br>void myinit(void) <br>{ <br>    GLfloat ambient[] = { 0.0, 0.0, 0.0, 1.0 }; <br>    GLfloat diffuse[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 }; <br>    GLfloat position[] = { 0.0, 3.0, 3.0, 0.0 }; <br>     <br>    GLfloat lmodel_ambient[] = { 0.2, 0.2, 0.2, 1.0 }; <br>    GLfloat local_view[] = { 0.0 }; <br> <br>    glEnable(GL_DEPTH_TEST); <br>    glDepthFunc(GL_LESS); <br> <br>    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient); <br>    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse); <br>    glLightfv(GL_LIGHT0, GL_POSITION, position); <br>     <br>    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient); <br>    glLightModelfv(GL_LIGHT_MODEL_LOCAL_VIEWER, local_view); <br> <br>    glFrontFace (GL_CW); <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>    glEnable(GL_AUTO_NORMAL); <br>    glEnable(GL_NORMALIZE); <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br>} <br> <br>void renderTeapot (GLfloat x, GLfloat y, GLfloat z,  <br>    GLfloat ambr, GLfloat ambg, GLfloat ambb,  <br>    GLfloat difr, GLfloat difg, GLfloat difb,  <br>    GLfloat specr, GLfloat specg, GLfloat specb, GLfloat shine) <br>{ <br>    float mat[3]; <br> <br>    glPushMatrix(); <br>    glTranslatef (x, y, z); <br>    mat[0] = ambr; mat[1] = ambg; mat[2] = ambb;     <br>    glMaterialfv (GL_FRONT, GL_AMBIENT, mat); <br>    mat[0] = difr; mat[1] = difg; mat[2] = difb;     <br>    glMaterialfv (GL_FRONT, GL_DIFFUSE, mat); <br>    mat[0] = specr; mat[1] = specg; mat[2] = specb; <br>    glMaterialfv (GL_FRONT, GL_SPECULAR, mat); <br>    glMaterialf (GL_FRONT, GL_SHININESS, shine*128.0); <br>    auxSolidTeapot(0.5); <br>    glPopMatrix(); <br>} <br> <br>/*  display() draws 5 teapots into the accumulation buffer  <br> *  several times; each time with a jittered perspective. <br> *  The focal point is at z = 5.0, so the gold teapot will  <br> *  stay in focus.  The amount of jitter is adjusted by the <br> *  magnitude of the accPerspective() jitter; in this example, 0.33. <br> *  In this example, the teapots are drawn 8 times.  See jitter.h <br> */ <br>void CALLBACK display(void) <br>{ <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br> <br>    glPushMatrix (); <br>/*  ruby, gold, silver, emerald, and cyan teapots   */ <br>    renderTeapot (-1.1, -0.5, -4.5, 0.1745, 0.01175, 0.01175, <br>        0.61424, 0.04136, 0.04136, 0.727811, 0.626959, 0.626959, 0.6); <br>    renderTeapot (-0.5, -0.5, -5.0, 0.24725, 0.1995, 0.0745, <br>        0.75164, 0.60648, 0.22648, 0.628281, 0.555802, 0.366065, 0.4); <br>    renderTeapot (0.2, -0.5, -5.5, 0.19225, 0.19225, 0.19225, <br>        0.50754, 0.50754, 0.50754, 0.508273, 0.508273, 0.508273, 0.4); <br>    renderTeapot (1.0, -0.5, -6.0, 0.0215, 0.1745, 0.0215,  <br>        0.07568, 0.61424, 0.07568, 0.633, 0.727811, 0.633, 0.6); <br>    renderTeapot (1.8, -0.5, -6.5, 0.0, 0.1, 0.06, 0.0, 0.50980392,  <br>        0.50980392, 0.50196078, 0.50196078, 0.50196078, .25); <br> <br>    glPopMatrix (); <br>    glFlush(); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode (GL_PROJECTION); <br>    glLoadIdentity (); <br>    gluPerspective (45.0, (GLfloat) w/(GLfloat) h,  <br>        1.0, 15.0); <br>    glMatrixMode (GL_MODELVIEW); <br>    glLoadIdentity (); <br>} <br> <br>/*  Main Loop <br> *  Open window with initial window size, title bar,  <br> *  RGBA display mode, depth buffer, and handle input events. <br> */ <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 400, 400); <br>    auxInitWindow ("Depth-of-Field"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BEZSURF.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3533"></a>BEZSURF.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>/*  bezmesh.c <br> *  This program renders a wireframe Bezier surface, <br> *  using two-dimensional evaluators. <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>void myinit(void); <br>void CALLBACK myReshape(GLsizei w, GLsizei h); <br>void CALLBACK display(void); <br> <br>GLfloat ctrlpoints[4][4][3] = { <br>    {{-1.5, -1.5, 4.0}, {-0.5, -1.5, 2.0},  <br>{0.5, -1.5, -1.0}, {1.5, -1.5, 2.0}},  <br>    {{-1.5, -0.5, 1.0}, {-0.5, -0.5, 3.0},  <br>{0.5, -0.5, 0.0}, {1.5, -0.5, -1.0}},  <br>    {{-1.5, 0.5, 4.0}, {-0.5, 0.5, 0.0},  <br>{0.5, 0.5, 3.0}, {1.5, 0.5, 4.0}},  <br>    {{-1.5, 1.5, -2.0}, {-0.5, 1.5, -2.0},  <br>{0.5, 1.5, 0.0}, {1.5, 1.5, -1.0}} <br>}; <br> <br>void CALLBACK display(void) <br>{ <br>    int i, j; <br> <br>    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); <br>    glColor3f(1.0, 1.0, 1.0); <br>    glPushMatrix (); <br>    glRotatef(85.0, 1.0, 1.0, 1.0); <br>    for (j = 0; j &lt;= 8; j++) { <br>glBegin(GL_LINE_STRIP); <br>        for (i = 0; i &lt;= 30; i++) <br>    glEvalCoord2f((GLfloat)i/30.0, (GLfloat)j/8.0); <br>glEnd(); <br>glBegin(GL_LINE_STRIP); <br>        for (i = 0; i &lt;= 30; i++) <br>    glEvalCoord2f((GLfloat)j/8.0, (GLfloat)i/30.0); <br>glEnd(); <br>    } <br>    glPopMatrix (); <br>    glFlush(); <br>} <br> <br>void myinit(void) <br>{ <br>    glClearColor (0.0, 0.0, 0.0, 1.0); <br>    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, <br>    0, 1, 12, 4, &amp;ctrlpoints[0][0][0]); <br>    glEnable(GL_MAP2_VERTEX_3); <br>    glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0); <br>    glEnable(GL_DEPTH_TEST); <br>    glShadeModel(GL_FLAT); <br>} <br> <br>void CALLBACK myReshape(GLsizei w, GLsizei h) <br>{ <br>    if (!h) return; <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    if (w &lt;= h) <br>glOrtho(-4.0, 4.0, -4.0*(GLfloat)h/(GLfloat)w,  <br>    4.0*(GLfloat)h/(GLfloat)w, -4.0, 4.0); <br>    else <br>glOrtho(-4.0*(GLfloat)w/(GLfloat)h,  <br>    4.0*(GLfloat)w/(GLfloat)h, -4.0, 4.0, -4.0, 4.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>} <br> <br>int main(int argc, char** argv) <br>{ <br>    auxInitDisplayMode (AUX_SINGLE | AUX_RGB | AUX_DEPTH16); <br>    auxInitPosition (0, 0, 500, 500); <br>    auxInitWindow ("Wireframe Bezier Surface"); <br>    myinit(); <br>    auxReshapeFunc (myReshape); <br>    auxMainLoop(display); <br>    return(0); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

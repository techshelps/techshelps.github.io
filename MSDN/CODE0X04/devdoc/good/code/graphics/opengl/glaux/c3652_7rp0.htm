<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XFORM.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3654"></a>XFORM.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> * ALL RIGHTS RESERVED  <br> * Permission to use, copy, modify, and distribute this software for  <br> * any purpose and without fee is hereby granted, provided that the above <br> * copyright notice appear in all copies and that both the copyright notice <br> * and this permission notice appear in supporting documentation, and that  <br> * the name of Silicon Graphics, Inc. not be used in advertising <br> * or publicity pertaining to distribution of the software without specific, <br> * written prior permission.  <br> * <br> * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS" <br> * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE, <br> * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR <br> * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON <br> * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT, <br> * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY <br> * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION, <br> * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF <br> * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN <br> * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON <br> * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE <br> * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE. <br> *  <br> * US Government Users Restricted Rights  <br> * Use, duplication, or disclosure by the Government is subject to <br> * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph <br> * (c)(1)(ii) of the Rights in Technical Data and Computer Software <br> * clause at DFARS 252.227-7013 and/or in similar or successor <br> * clauses in the FAR or the DOD or NASA FAR Supplement. <br> * Unpublished-- rights reserved under the copyright laws of the <br> * United States.  Contractor/manufacturer is Silicon Graphics, <br> * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311. <br> * <br> * OpenGL(TM) is a trademark of Silicon Graphics, Inc. <br> */ <br>#include &lt;windows.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;GL/gl.h&gt; <br>#include "3d.h" <br> <br>#define static <br> <br>#define STACKDEPTH 10 <br> <br>typedef struct { <br>    GLdoublemat[4][4]; <br>    GLdoublenorm[3][3]; <br>} mat_t; <br> <br>static mat_t matstack[STACKDEPTH] = { <br>    {{{1.0, 0.0, 0.0, 0.0}, <br>    {0.0, 1.0, 0.0, 0.0}, <br>    {0.0, 0.0, 1.0, 0.0}, <br>    {0.0, 0.0, 0.0, 1.0}}, <br>    {{1.0, 0.0, 0.0}, <br>    {0.0, 1.0, 0.0}, <br>    {0.0, 0.0, 1.0}}} <br>}; <br>static int identitymat = 1; <br> <br>static int mattop = 0; <br> <br>void m_xformpt(GLdouble pin[3], GLdouble pout[3],  <br>    GLdouble nin[3], GLdouble nout[3]) <br>{ <br>    inti; <br>    GLdoubleptemp[3], ntemp[3]; <br>    mat_t*m = &amp;matstack[mattop]; <br> <br>    if (identitymat) { <br>for (i = 0; i &lt; 3; i++) { <br>    pout[i] = pin[i]; <br>    nout[i] = nin[i]; <br>} <br>return; <br>    } <br>    for (i = 0; i &lt; 3; i++) { <br>ptemp[i] = pin[0]*m-&gt;mat[0][i] + <br>   pin[1]*m-&gt;mat[1][i] + <br>   pin[2]*m-&gt;mat[2][i] + <br>   m-&gt;mat[3][i]; <br>ntemp[i] = nin[0]*m-&gt;norm[0][i] + <br>   nin[1]*m-&gt;norm[1][i] + <br>   nin[2]*m-&gt;norm[2][i]; <br>    } <br>    for (i = 0; i &lt; 3; i++) { <br>pout[i] = ptemp[i]; <br>nout[i] = ntemp[i]; <br>    } <br>    normalize(nout); <br>} <br> <br>void m_xformptonly(GLdouble pin[3], GLdouble pout[3]) <br>{ <br>    inti; <br>    GLdoubleptemp[3]; <br>    mat_t*m = &amp;matstack[mattop]; <br> <br>    if (identitymat) { <br>for (i = 0; i &lt; 3; i++) { <br>    pout[i] = pin[i]; <br>} <br>return; <br>    } <br>     for (i = 0; i &lt; 3; i++) { <br>ptemp[i] = pin[0]*m-&gt;mat[0][i] + <br>   pin[1]*m-&gt;mat[1][i] + <br>   pin[2]*m-&gt;mat[2][i] + <br>   m-&gt;mat[3][i]; <br>    } <br>    for (i = 0; i &lt; 3; i++) { <br>pout[i] = ptemp[i]; <br>    } <br>} <br> <br>void m_pushmatrix(void) <br>{ <br>    if (mattop &lt; STACKDEPTH-1) { <br>matstack[mattop+1] = matstack[mattop]; <br>mattop++; <br>    } else <br>error("m_pushmatrix: stack overflow\n"); <br>} <br> <br>void m_popmatrix(void) <br>{ <br>    if (mattop &gt; 0) <br>mattop--; <br>    else <br>error("m_popmatrix: stack underflow\n"); <br>} <br> <br>void m_translate(GLdouble x, GLdouble y, GLdouble z) <br>{ <br>    inti; <br>    mat_t*m = &amp;matstack[mattop]; <br> <br>    identitymat = 0; <br>    for (i = 0; i &lt; 4; i++) <br>m-&gt;mat[3][i] = x*m-&gt;mat[0][i] + <br> y*m-&gt;mat[1][i] + <br> z*m-&gt;mat[2][i] + <br> m-&gt;mat[3][i]; <br>} <br> <br>void m_scale(GLdouble x, GLdouble y, GLdouble z) <br>{ <br>    inti; <br>    mat_t*m = &amp;matstack[mattop]; <br> <br>    identitymat = 0; <br>    for (i = 0; i &lt; 3; i++) { <br>m-&gt;mat[0][i] *= x; <br>m-&gt;mat[1][i] *= y; <br>m-&gt;mat[2][i] *= z; <br>    } <br>    for (i = 0; i &lt; 3; i++) { <br>m-&gt;norm[0][i] /= x; <br>m-&gt;norm[1][i] /= y; <br>m-&gt;norm[2][i] /= z; <br>    } <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

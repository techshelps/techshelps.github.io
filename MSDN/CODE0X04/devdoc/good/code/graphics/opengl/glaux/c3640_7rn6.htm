<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GLAUX.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3642"></a>GLAUX.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> * ALL RIGHTS RESERVED  <br> * Permission to use, copy, modify, and distribute this software for  <br> * any purpose and without fee is hereby granted, provided that the above <br> * copyright notice appear in all copies and that both the copyright notice <br> * and this permission notice appear in supporting documentation, and that  <br> * the name of Silicon Graphics, Inc. not be used in advertising <br> * or publicity pertaining to distribution of the software without specific, <br> * written prior permission.  <br> * <br> * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS" <br> * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE, <br> * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR <br> * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON <br> * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT, <br> * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY <br> * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION, <br> * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF <br> * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN <br> * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON <br> * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE <br> * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE. <br> *  <br> * US Government Users Restricted Rights  <br> * Use, duplication, or disclosure by the Government is subject to <br> * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph <br> * (c)(1)(ii) of the Rights in Technical Data and Computer Software <br> * clause at DFARS 252.227-7013 and/or in similar or successor <br> * clauses in the FAR or the DOD or NASA FAR Supplement. <br> * Unpublished-- rights reserved under the copyright laws of the <br> * United States.  Contractor/manufacturer is Silicon Graphics, <br> * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311. <br> * <br> * OpenGL(TM) is a trademark of Silicon Graphics, Inc. <br> */ <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br> <br>#include &lt;windows.h&gt; <br>#include &lt;GL/gl.h&gt; <br>#include &lt;gl/glaux.h&gt; <br>#include "tk.h" <br> <br>#define static <br> <br>#if defined(__cplusplus) || defined(c_plusplus) <br>#define class c_class <br>#endif <br> <br> <br>static struct { <br>    int keyField; <br>    void (*KeyFunc)(void); <br>} keyTable[200]; <br> <br>static struct { <br>    int mouseField; <br>    void (*MouseFunc)(AUX_EVENTREC *); <br>} mouseDownTable[20], mouseUpTable[20], mouseLocTable[20]; <br> <br>static int keyTableCount = 0; <br>static int mouseDownTableCount = 0; <br>static int mouseUpTableCount = 0; <br>static int mouseLocTableCount = 0; <br>static GLenum displayModeType = 0; <br>GLenum APIENTRY auxInitWindowAW(LPCSTR title, BOOL bUnicode); <br> <br>static void DefaultHandleReshape(GLsizei w, GLsizei h) <br>{ <br>    glViewport(0, 0, w, h); <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    glOrtho((GLdouble)0.0, (GLdouble)w, (GLdouble)0.0, (GLdouble)h, (GLdouble)-1.0, (GLdouble)1.0); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>} <br> <br>static void DefaultHandleExpose(int w, int h) <br>{ <br>} <br> <br>static GLenum MouseLoc(int x, int y, GLenum button) <br>{ <br>    AUX_EVENTREC info; <br>    GLenum flag; <br>    int i; <br> <br>    flag = GL_FALSE; <br>    for (i = 0; i &lt; mouseLocTableCount; i++) { <br>        if ((int)(button &amp; AUX_LEFTBUTTON) == mouseLocTable[i].mouseField) { <br>    info.event = AUX_MOUSELOC; <br>    info.data[AUX_MOUSEX] = x; <br>    info.data[AUX_MOUSEY] = y; <br>    info.data[AUX_MOUSESTATUS] = AUX_LEFTBUTTON; <br>    (*mouseLocTable[i].MouseFunc)(&amp;info); <br>    flag |= GL_TRUE; <br>} <br>        if ((int)(button &amp; AUX_RIGHTBUTTON) == mouseLocTable[i].mouseField) { <br>    info.event = AUX_MOUSELOC; <br>    info.data[AUX_MOUSEX] = x; <br>    info.data[AUX_MOUSEY] = y; <br>    info.data[AUX_MOUSESTATUS] = AUX_RIGHTBUTTON; <br>    (*mouseLocTable[i].MouseFunc)(&amp;info); <br>    flag |= GL_TRUE; <br>} <br>        if ((int)(button &amp; AUX_MIDDLEBUTTON) == mouseLocTable[i].mouseField) { <br>    info.event = AUX_MOUSELOC; <br>    info.data[AUX_MOUSEX] = x; <br>    info.data[AUX_MOUSEY] = y; <br>    info.data[AUX_MOUSESTATUS] = AUX_MIDDLEBUTTON; <br>    (*mouseLocTable[i].MouseFunc)(&amp;info); <br>    flag |= GL_TRUE; <br>} <br>    } <br>    return flag; <br>} <br> <br>static GLenum MouseUp(int x, int y, GLenum button) <br>{ <br>    AUX_EVENTREC info; <br>    GLenum flag; <br>    int i; <br> <br>    flag = GL_FALSE; <br>    for (i = 0; i &lt; mouseUpTableCount; i++) { <br>        if ((int)(button &amp; AUX_LEFTBUTTON) == mouseUpTable[i].mouseField) { <br>    info.event = AUX_MOUSEUP; <br>    info.data[AUX_MOUSEX] = x; <br>    info.data[AUX_MOUSEY] = y; <br>    info.data[AUX_MOUSESTATUS] = AUX_LEFTBUTTON; <br>    (*mouseUpTable[i].MouseFunc)(&amp;info); <br>    flag |= GL_TRUE; <br>} <br>        if ((int)(button &amp; AUX_RIGHTBUTTON) == mouseUpTable[i].mouseField) { <br>    info.event = AUX_MOUSEUP; <br>    info.data[AUX_MOUSEX] = x; <br>    info.data[AUX_MOUSEY] = y; <br>    info.data[AUX_MOUSESTATUS] = AUX_RIGHTBUTTON; <br>    (*mouseUpTable[i].MouseFunc)(&amp;info); <br>    flag |= GL_TRUE; <br>} <br>        if ((int)(button &amp; AUX_MIDDLEBUTTON) == mouseUpTable[i].mouseField) { <br>    info.event = AUX_MOUSEUP; <br>    info.data[AUX_MOUSEX] = x; <br>    info.data[AUX_MOUSEY] = y; <br>    info.data[AUX_MOUSESTATUS] = AUX_MIDDLEBUTTON; <br>    (*mouseUpTable[i].MouseFunc)(&amp;info); <br>    flag |= GL_TRUE; <br>} <br>    } <br>    return flag; <br>} <br> <br>static GLenum MouseDown(int x, int y, GLenum button) <br>{ <br>    AUX_EVENTREC info; <br>    GLenum flag; <br>    int i; <br> <br>    flag = GL_FALSE; <br>    for (i = 0; i &lt; mouseDownTableCount; i++) { <br>        if ((int)(button &amp; AUX_LEFTBUTTON) == mouseDownTable[i].mouseField) { <br>    info.event = AUX_MOUSEDOWN; <br>    info.data[AUX_MOUSEX] = x; <br>    info.data[AUX_MOUSEY] = y; <br>    info.data[AUX_MOUSESTATUS] = AUX_LEFTBUTTON; <br>    (*mouseDownTable[i].MouseFunc)(&amp;info); <br>    flag |= GL_TRUE; <br>} <br>        if ((int)(button &amp; AUX_RIGHTBUTTON) == mouseDownTable[i].mouseField) { <br>    info.event = AUX_MOUSEDOWN; <br>    info.data[AUX_MOUSEX] = x; <br>    info.data[AUX_MOUSEY] = y; <br>    info.data[AUX_MOUSESTATUS] = AUX_RIGHTBUTTON; <br>    (*mouseDownTable[i].MouseFunc)(&amp;info); <br>    flag |= GL_TRUE; <br>} <br>        if ((int)(button &amp; AUX_MIDDLEBUTTON) == mouseDownTable[i].mouseField) { <br>    info.event = AUX_MOUSEDOWN; <br>    info.data[AUX_MOUSEX] = x; <br>    info.data[AUX_MOUSEY] = y; <br>    info.data[AUX_MOUSESTATUS] = AUX_MIDDLEBUTTON; <br>    (*mouseDownTable[i].MouseFunc)(&amp;info); <br>    flag |= GL_TRUE; <br>} <br>    } <br>    return flag; <br>} <br> <br>static GLenum KeyDown(int key, GLenum status) <br>{ <br>    GLenum flag; <br>    int i; <br> <br>    flag = GL_FALSE; <br>    if (keyTableCount) { <br>for (i = 0; i &lt; keyTableCount; i++) { <br>    if (key == keyTable[i].keyField) { <br>(*keyTable[i].KeyFunc)(); <br>flag |= GL_TRUE; <br>    } <br>} <br>    } <br>    return flag; <br>} <br> <br>void auxExposeFunc(AUXEXPOSEPROC Func) <br>{ <br>    tkExposeFunc(Func); <br>} <br> <br>void auxReshapeFunc(AUXRESHAPEPROC Func) <br>{ <br>    tkExposeFunc((AUXEXPOSEPROC) Func); <br>    tkReshapeFunc(Func); <br>} <br> <br>void auxIdleFunc(AUXIDLEPROC Func) <br>{ <br>    tkIdleFunc(Func); <br>} <br> <br>void auxKeyFunc(int key, AUXKEYPROC Func) <br>{ <br>    keyTable[keyTableCount].keyField = key; <br>    keyTable[keyTableCount++].KeyFunc = Func; <br>} <br> <br>void auxMouseFunc(int mouse, int mode, AUXMOUSEPROC Func) <br>{ <br>    if (mode == AUX_MOUSEDOWN) { <br>mouseDownTable[mouseDownTableCount].mouseField = mouse; <br>mouseDownTable[mouseDownTableCount++].MouseFunc = Func; <br>    } else if (mode == AUX_MOUSEUP) { <br>mouseUpTable[mouseUpTableCount].mouseField = mouse; <br>mouseUpTable[mouseUpTableCount++].MouseFunc = Func; <br>    } else if (mode == AUX_MOUSELOC) { <br>mouseLocTable[mouseLocTableCount].mouseField = mouse; <br>mouseLocTable[mouseLocTableCount++].MouseFunc = Func; <br>    }  <br>} <br> <br>void auxMainLoop(AUXMAINPROC Func) <br>{ <br>    tkDisplayFunc(Func); <br>    tkExec(); <br>} <br> <br>void auxInitPosition(int x, int y, int width, int height) <br>{ <br>    tkInitPosition(x, y, width, height); <br>} <br> <br>void auxInitDisplayMode(GLenum type) <br>{ <br>    displayModeType = type; <br>    tkInitDisplayMode(type); <br>} <br> <br>void auxInitDisplayModePolicy(GLenum type) <br>{ <br>    tkInitDisplayModePolicy(type); <br>} <br> <br>GLenum auxInitDisplayModeID(GLint id) <br>{ <br>    return tkInitDisplayModeID(id); <br>} <br> <br>GLenum APIENTRY auxInitWindowA(LPCSTR title) <br>{ <br>    return auxInitWindowAW(title,FALSE); <br>} <br> <br>GLenum APIENTRY auxInitWindowW(LPCWSTR title) <br>{ <br>    return auxInitWindowAW((LPCSTR)title,TRUE); <br>} <br> <br>GLenum APIENTRY auxInitWindowAW(LPCSTR title, BOOL bUnicode) <br>{ <br>    int useDoubleAsSingle = 0; <br> <br>    if (tkInitWindowAW((char *)title, bUnicode) == GL_FALSE) { <br>if (AUX_WIND_IS_SINGLE(displayModeType)) { <br>    tkInitDisplayMode(displayModeType | AUX_DOUBLE); <br>    if (tkInitWindowAW((char *)title, bUnicode) == GL_FALSE) { <br>return GL_FALSE;    /*  curses, foiled again*/ <br>            } <br>            MESSAGEBOX(GetFocus(), "Can't initialize a single buffer visual. " <br>                                   "Will use a double buffer visual instead, " <br>                                   "only drawing into the front buffer.", <br>                                   "Warning", MB_OK); <br>    displayModeType = displayModeType | AUX_DOUBLE; <br>    useDoubleAsSingle = 1; <br>} <br>    } <br>    tkReshapeFunc(DefaultHandleReshape); <br>    tkExposeFunc(DefaultHandleExpose); <br>    tkMouseUpFunc(MouseUp); <br>    tkMouseDownFunc(MouseDown); <br>    tkMouseMoveFunc(MouseLoc); <br>    tkKeyDownFunc(KeyDown); <br>    auxKeyFunc(AUX_ESCAPE, auxQuit); <br>    glClearColor((GLclampf)0.0, (GLclampf)0.0, (GLclampf)0.0, (GLclampf)1.0); <br>    glClearIndex((GLfloat)0.0); <br>    glLoadIdentity(); <br>    if (useDoubleAsSingle) <br>glDrawBuffer(GL_FRONT); <br>    return GL_TRUE; <br>} <br> <br>void auxCloseWindow(void) <br>{ <br>    tkCloseWindow(); <br>    keyTableCount = 0; <br>    mouseDownTableCount = 0; <br>    mouseUpTableCount = 0; <br>    mouseLocTableCount = 0; <br>} <br> <br>void auxQuit(void) <br>{ <br>    tkQuit(); <br>} <br> <br>void auxSwapBuffers(void) <br>{ <br>    tkSwapBuffers(); <br>} <br> <br>HWND auxGetHWND(void) <br>{ <br>    return tkGetHWND(); <br>} <br> <br>HDC auxGetHDC(void) <br>{ <br>    return tkGetHDC(); <br>} <br> <br>HGLRC auxGetHGLRC(void) <br>{ <br>    return tkGetHRC(); <br>} <br> <br>GLenum auxGetDisplayModePolicy(void) <br>{ <br>    return tkGetDisplayModePolicy(); <br>} <br> <br>GLint auxGetDisplayModeID(void) <br>{ <br>    return tkGetDisplayModeID(); <br>} <br> <br>GLenum auxGetDisplayMode(void) <br>{ <br>    return tkGetDisplayMode(); <br>} <br> <br>void auxSetOneColor(int index, float r, float g, float b) <br>{ <br>    tkSetOneColor(index, r, g, b); <br>} <br> <br>void auxSetFogRamp(int density, int startIndex) <br>{ <br>    tkSetFogRamp(density, startIndex); <br>} <br> <br>void auxSetGreyRamp(void) <br>{ <br>    tkSetGreyRamp(); <br>} <br> <br>void auxSetRGBMap(int size, float *rgb) <br>{ <br>    tkSetRGBMap(size, rgb); <br>} <br> <br>int auxGetColorMapSize(void) <br>{ <br>    return tkGetColorMapSize(); <br>} <br> <br>void auxGetMouseLoc(int *x, int *y) <br>{ <br>    tkGetMouseLoc(x, y); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

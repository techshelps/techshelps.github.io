<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TK.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3649"></a>TK.H</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> * ALL RIGHTS RESERVED  <br> * Permission to use, copy, modify, and distribute this software for  <br> * any purpose and without fee is hereby granted, provided that the above <br> * copyright notice appear in all copies and that both the copyright notice <br> * and this permission notice appear in supporting documentation, and that  <br> * the name of Silicon Graphics, Inc. not be used in advertising <br> * or publicity pertaining to distribution of the software without specific, <br> * written prior permission.  <br> * <br> * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS" <br> * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE, <br> * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR <br> * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON <br> * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT, <br> * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY <br> * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION, <br> * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF <br> * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN <br> * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON <br> * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE <br> * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE. <br> *  <br> * US Government Users Restricted Rights  <br> * Use, duplication, or disclosure by the Government is subject to <br> * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph <br> * (c)(1)(ii) of the Rights in Technical Data and Computer Software <br> * clause at DFARS 252.227-7013 and/or in similar or successor <br> * clauses in the FAR or the DOD or NASA FAR Supplement. <br> * Unpublished-- rights reserved under the copyright laws of the <br> * United States.  Contractor/manufacturer is Silicon Graphics, <br> * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311. <br> * <br> * OpenGL(TM) is a trademark of Silicon Graphics, Inc. <br> */ <br>#include &lt;windows.h&gt; <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br> <br> <br>/* <br>** Window Types <br>*/ <br> <br>#define TK_RGB0 <br>#define TK_INDEX1 <br>#define TK_SINGLE0 <br>#define TK_DOUBLE2 <br>#define TK_DIRECT0 <br>#define TK_INDIRECT4 <br>#define TK_ACCUM8 <br>#define TK_ALPHA16 <br>#define TK_DEPTH        32      /* 32-bit depth buffer */ <br>#define TK_STENCIL      64 <br>#define TK_DEPTH16      256     /* 16-bit depth buffer */ <br>#define TK_FIXED_332_PAL    512 <br> <br>/* <br>** Display Mode Selection Criteria <br>*/ <br> <br>enum { <br>    TK_USE_ID = 1, <br>    TK_EXACT_MATCH, <br>    TK_MINIMUM_CRITERIA <br>}; <br> <br>/*  <br>** Window Masks <br>*/ <br> <br>#define TK_IS_RGB(x)(((x) &amp; TK_INDEX) == 0) <br>#define TK_IS_INDEX(x)(((x) &amp; TK_INDEX) != 0) <br>#define TK_IS_SINGLE(x)(((x) &amp; TK_DOUBLE) == 0) <br>#define TK_IS_DOUBLE(x)(((x) &amp; TK_DOUBLE) != 0) <br>#define TK_HAS_ACCUM(x)(((x) &amp; TK_ACCUM) != 0) <br>#define TK_HAS_ALPHA(x)(((x) &amp; TK_ALPHA) != 0) <br>#define TK_HAS_DEPTH(x)         (((x) &amp; (TK_DEPTH | TK_DEPTH16)) != 0) <br>#define TK_HAS_STENCIL(x)(((x) &amp; TK_STENCIL) != 0) <br>#define TK_IS_DIRECT(x)(((x) &amp; TK_INDIRECT) == 0) <br>#define TK_IS_INDIRECT(x)       (((x) &amp; TK_INDIRECT) != 0) <br>#define TK_USE_FIXED_332_PAL(x) (((x) &amp; TK_FIXED_332_PAL) != 0) <br>#define TK_IS_DEPTH16(x)        (((x) &amp; TK_DEPTH16) != 0) <br> <br>/* <br>** Event Status <br>*/ <br> <br>#defineTK_LEFTBUTTON1 <br>#defineTK_RIGHTBUTTON2 <br>#defineTK_MIDDLEBUTTON4 <br>#defineTK_SHIFT1 <br>#defineTK_CONTROL2 <br> <br>/*  <br>** Key Codes <br>*/ <br> <br>#define TK_RETURN0x0D <br>#define TK_ESCAPE0x1B <br>#define TK_SPACE0x20 <br>#define TK_LEFT0x25 <br>#define TK_UP0x26 <br>#define TK_RIGHT0x27 <br>#define TK_DOWN0x28 <br>#define TK_A'A' <br>#define TK_B'B' <br>#define TK_C'C' <br>#define TK_D'D' <br>#define TK_E'E' <br>#define TK_F'F' <br>#define TK_G'G' <br>#define TK_H'H' <br>#define TK_I'I' <br>#define TK_J'J' <br>#define TK_K'K' <br>#define TK_L'L' <br>#define TK_M'M' <br>#define TK_N'N' <br>#define TK_O'O' <br>#define TK_P'P' <br>#define TK_Q'Q' <br>#define TK_R'R' <br>#define TK_S'S' <br>#define TK_T'T' <br>#define TK_U'U' <br>#define TK_V'V' <br>#define TK_W'W' <br>#define TK_X'X' <br>#define TK_Y'Y' <br>#define TK_Z'Z' <br>#define TK_a'a' <br>#define TK_b'b' <br>#define TK_c'c' <br>#define TK_d'd' <br>#define TK_e'e' <br>#define TK_f'f' <br>#define TK_g'g' <br>#define TK_h'h' <br>#define TK_i'i' <br>#define TK_j'j' <br>#define TK_k'k' <br>#define TK_l'l' <br>#define TK_m'm' <br>#define TK_n'n' <br>#define TK_o'o' <br>#define TK_p'p' <br>#define TK_q'q' <br>#define TK_r'r' <br>#define TK_s's' <br>#define TK_t't' <br>#define TK_u'u' <br>#define TK_v'v' <br>#define TK_w'w' <br>#define TK_x'x' <br>#define TK_y'y' <br>#define TK_z'z' <br>#define TK_0'0' <br>#define TK_1'1' <br>#define TK_2'2' <br>#define TK_3'3' <br>#define TK_4'4' <br>#define TK_5'5' <br>#define TK_6'6' <br>#define TK_7'7' <br>#define TK_8'8' <br>#define TK_9'9' <br> <br>/* <br>** Color Macros - Default Windows Logical palette <br>*/ <br> <br>enum { <br>    TK_BLACK = 0, <br>    TK_RED = 13, <br>    TK_GREEN, <br>    TK_YELLOW, <br>    TK_BLUE, <br>    TK_MAGENTA, <br>    TK_CYAN, <br>    TK_WHITE <br>}; <br> <br>extern float auxRGBMap[20][3]; <br>#define tkRGBMap auxRGBMap <br> <br>#define TK_SETCOLOR(x, y) (TK_IS_RGB((x)) ? \ <br>           glColor3fv(auxRGBMap[(y)]) : glIndexf((y))) <br> <br>/* <br>** RGB Image Structure <br>*/ <br> <br>typedef struct _TK_RGBImageRec { <br>    GLint sizeX, sizeY; <br>    unsigned char *data; <br>} TK_RGBImageRec; <br> <br>/* <br>** Prototypes <br>*/ <br> <br>extern void tkInitDisplayMode(GLenum); <br>extern void tkInitPosition(int, int, int, int); <br>extern void tkInitDisplayModePolicy(GLenum); <br>extern GLenum tkInitDisplayModeID(GLint); <br>extern GLenum tkInitWindow(char *); <br>extern GLenum tkInitWindowAW(char *, BOOL); <br>extern void tkCloseWindow(void); <br>extern void tkQuit(void); <br> <br>extern void tkExec(void); <br>extern void tkExposeFunc(void (*)(int, int)); <br>extern void tkReshapeFunc(void (*)(GLsizei, GLsizei)); <br>extern void tkDisplayFunc(void (*)(void)); <br>extern void tkKeyDownFunc(GLenum (*)(int, GLenum)); <br>extern void tkMouseDownFunc(GLenum (*)(int, int, GLenum)); <br>extern void tkMouseUpFunc(GLenum (*)(int, int, GLenum)); <br>extern void tkMouseMoveFunc(GLenum (*)(int, int, GLenum)); <br>extern void tkIdleFunc(void (*)(void)); <br> <br>extern void tkSwapBuffers(void); <br> <br>extern GLint tkGetColorMapSize(void); <br>extern void tkGetMouseLoc(int *, int *); <br>extern GLint tkGetDisplayModeID(void); <br>extern GLenum tkGetDisplayModePolicy(void); <br>extern GLenum tkGetDisplayMode(void); <br> <br>extern void tkSetOneColor(int, float, float, float); <br>extern void tkSetFogRamp(int, int); <br>extern void tkSetGreyRamp(void); <br>extern void tkSetRGBMap(int, float *); <br> <br>extern TK_RGBImageRec *tkRGBImageLoad(char *); <br>extern TK_RGBImageRec *tkRGBImageLoadAW(char *, BOOL); <br> <br>extern TK_RGBImageRec *tkDIBImageLoad(char *); <br>extern TK_RGBImageRec *tkDIBImageLoadAW(char *, BOOL); <br> <br>extern GLenum tkCreateStrokeFont(GLuint); <br>extern GLenum tkCreateOutlineFont(GLuint); <br>extern GLenum tkCreateFilledFont(GLuint); <br>extern GLenum tkCreateBitmapFont(GLuint); <br>extern void tkDrawStr(GLuint, char *); <br> <br>/* Windows specific routines */ <br>extern HWND  tkGetHWND(void); <br>extern HDC   tkGetHDC(void); <br>extern HGLRC tkGetHRC(void); <br> <br>/* Error popup control */ <br>extern void tkErrorPopups(GLboolean); <br>extern GLboolean tkPopupEnable; <br>#define MESSAGEBOX(a, b, c, d)  if (tkPopupEnable) MessageBoxA((a), (b), (c), (d)) </code></pre>
<p>&nbsp;</p></body>
</HTML>

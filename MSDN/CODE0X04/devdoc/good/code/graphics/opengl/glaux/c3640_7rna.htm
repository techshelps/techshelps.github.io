<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TEAPOT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3646"></a>TEAPOT.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> * ALL RIGHTS RESERVED  <br> * Permission to use, copy, modify, and distribute this software for  <br> * any purpose and without fee is hereby granted, provided that the above <br> * copyright notice appear in all copies and that both the copyright notice <br> * and this permission notice appear in supporting documentation, and that  <br> * the name of Silicon Graphics, Inc. not be used in advertising <br> * or publicity pertaining to distribution of the software without specific, <br> * written prior permission.  <br> * <br> * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS" <br> * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE, <br> * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR <br> * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON <br> * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT, <br> * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY <br> * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION, <br> * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF <br> * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN <br> * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON <br> * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE <br> * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE. <br> *  <br> * US Government Users Restricted Rights  <br> * Use, duplication, or disclosure by the Government is subject to <br> * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph <br> * (c)(1)(ii) of the Rights in Technical Data and Computer Software <br> * clause at DFARS 252.227-7013 and/or in similar or successor <br> * clauses in the FAR or the DOD or NASA FAR Supplement. <br> * Unpublished-- rights reserved under the copyright laws of the <br> * United States.  Contractor/manufacturer is Silicon Graphics, <br> * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311. <br> * <br> * OpenGL(TM) is a trademark of Silicon Graphics, Inc. <br> */ <br>#include &lt;windows.h&gt; <br>#include &lt;GL/gl.h&gt; <br>#include &lt;gl/glaux.h&gt; <br>#include "teapot.h" <br> <br>#define static <br> <br>long GRD; <br> <br>#define TEAPOTSOLID 0 <br>#define TEAPOTWIRE 1 <br> <br>static GLuint teapots[2] = {0, 0}; <br> <br>static float tex[2][2][2] = {{{0, 0},{1, 0}},{{0, 1},{1, 1}}}; <br> <br>static void solidTeapot(long grid, GLdouble scale) <br>{ <br>    float p[4][4][3], q[4][4][3], r[4][4][3], s[4][4][3]; <br>    long i, j, k, l; <br> <br>    if (grid &lt; 2) grid = 7; <br>    GRD = grid; <br>    teapots[TEAPOTSOLID] = glGenLists (1); <br>    glNewList(teapots[TEAPOTSOLID], GL_COMPILE); <br>    glPushMatrix (); <br>    glRotatef ((GLfloat)270.0, (GLfloat)1.0, (GLfloat)0.0, (GLfloat)0.0); <br>    glScalef ((GLdouble)0.5*scale, (GLdouble)0.5*scale, (GLdouble)0.5*scale); <br>    glTranslatef ((GLfloat)0.0, (GLfloat)0.0, (GLfloat)-1.5); <br>    for (i = 0; i &lt; 10; i++) { <br>for (j = 0; j &lt; 4; j++) <br>    for (k = 0; k &lt; 4; k++)  <br>for (l = 0; l &lt; 3; l++) { <br>    p[j][k][l] = cpdata[patchdata[i][j*4+k]][l]; <br>    q[j][k][l] = cpdata[patchdata[i][j*4+(3-k)]][l]; <br>    if (l == 1) q[j][k][l] *= (float)-1.0; <br>    if (i &lt; 6) { <br>r[j][k][l] = cpdata[patchdata[i][j*4+(3-k)]][l]; <br>if (l == 0) r[j][k][l] *= (float)-1.0; <br>s[j][k][l] = cpdata[patchdata[i][j*4+k]][l]; <br>if (l == 0) s[j][k][l] *= (float)-1.0; <br>if (l == 1) s[j][k][l] *= (float)-1.0; <br>    } <br>} <br>glMap2f(GL_MAP2_TEXTURE_COORD_2, 0, 1, 2, 2, 0, 1, 4, 2, &amp;tex[0][0][0]); <br>glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, &amp;p[0][0][0]); <br>glEnable(GL_MAP2_VERTEX_3); glEnable(GL_MAP2_TEXTURE_COORD_2); <br>glMapGrid2f(GRD, (GLfloat)0.0, (GLfloat)1.0, GRD, (GLfloat)0.0, (GLfloat)1.0); <br>glEvalMesh2(GL_FILL, 0, GRD, 0, GRD); <br>glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, &amp;q[0][0][0]); <br>glEvalMesh2(GL_FILL, 0, GRD, 0, GRD); <br>if (i &lt; 6) { <br>    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, &amp;r[0][0][0]); <br>    glEvalMesh2(GL_FILL, 0, GRD, 0, GRD); <br>    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, &amp;s[0][0][0]); <br>    glEvalMesh2(GL_FILL, 0, GRD, 0, GRD); <br>} <br>    } <br>    glDisable(GL_MAP2_VERTEX_3); glDisable(GL_MAP2_TEXTURE_COORD_2); <br>    glPopMatrix (); <br>    glEndList(); <br>} <br> <br>static void wireTeapot(long grid, GLdouble scale) <br>{ <br>    float p[4][4][3], q[4][4][3], r[4][4][3], s[4][4][3]; <br>    long i, j, k, l; <br>     <br>    if (grid &lt; 2) grid = 7; <br>    GRD = grid; <br>    teapots[TEAPOTWIRE] = glGenLists (1); <br>    glNewList(teapots[TEAPOTWIRE], GL_COMPILE); <br>    glPushMatrix (); <br>    glRotatef ((GLfloat)270.0, (GLfloat)1.0, (GLfloat)0.0, (GLfloat)0.0); <br>    glScalef ((GLdouble)0.5*scale, (GLdouble)0.5*scale, (GLdouble)0.5*scale); <br>    glTranslatef ((GLfloat)0.0, (GLfloat)0.0, (GLfloat)-1.5); <br>    for (i = 0; i &lt; 10; i++) { <br>for (j = 0; j &lt; 4; j++) <br>    for (k = 0; k &lt; 4; k++)  <br>for (l = 0; l &lt; 3; l++) { <br>    p[j][k][l] = cpdata[patchdata[i][j*4+k]][l]; <br>    q[j][k][l] = cpdata[patchdata[i][j*4+(3-k)]][l]; <br>    if (l == 1) q[j][k][l] *= (float)-1.0; <br>    if (i &lt; 6) { <br>r[j][k][l] = cpdata[patchdata[i][j*4+(3-k)]][l]; <br>if (l == 0) r[j][k][l] *= (float)-1.0; <br>s[j][k][l] = cpdata[patchdata[i][j*4+k]][l]; <br>if (l == 0) s[j][k][l] *= (float)-1.0; <br>if (l == 1) s[j][k][l] *= (float)-1.0; <br>    } <br>} <br>glMap2f(GL_MAP2_TEXTURE_COORD_2, 0, 1, 2, 2, 0, 1, 4, 2, &amp;tex[0][0][0]); <br>glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, &amp;p[0][0][0]); <br>glEnable(GL_MAP2_VERTEX_3); glEnable(GL_MAP2_TEXTURE_COORD_2); <br>glMapGrid2f(GRD, (GLfloat)0.0, (GLfloat)1.0, GRD, (GLfloat)0.0, (GLfloat)1.0); <br>glEvalMesh2(GL_LINE, 0, GRD, 0, GRD); <br>glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, &amp;q[0][0][0]); <br>glEvalMesh2(GL_LINE, 0, GRD, 0, GRD); <br>if (i &lt; 6) { <br>    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, &amp;r[0][0][0]); <br>    glEvalMesh2(GL_LINE, 0, GRD, 0, GRD); <br>    glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, &amp;s[0][0][0]); <br>    glEvalMesh2(GL_LINE, 0, GRD, 0, GRD); <br>} <br>    } <br>    glDisable(GL_MAP2_VERTEX_3); glDisable(GL_MAP2_TEXTURE_COORD_2); <br>    glPopMatrix (); <br>    glEndList(); <br>} <br> <br>void auxSolidTeapot(GLdouble scale) <br>{ <br>    if (glIsList(teapots[TEAPOTSOLID]) == 0) <br>solidTeapot (14, scale); <br>    glCallList(teapots[TEAPOTSOLID]); <br>} <br> <br>void auxWireTeapot(GLdouble scale) <br>{ <br>    if (glIsList(teapots[TEAPOTWIRE]) == 0) <br>wireTeapot (10, scale); <br>    glCallList(teapots[TEAPOTWIRE]); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COLOR.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3613"></a>COLOR.H</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#ifndef COLOR_H <br>#define COLOR_H <br> <br>class Color { <br> public: <br>  inline Color() {}; <br>  inline Color(GLfloat r, GLfloat g, GLfloat b, GLfloat a = 1.0); <br>   <br>  inline Color operator=(GLfloat *a); <br>  inline Color operator=(GLfloat a); <br>  inline Color operator+(Color a); <br>  inline Color operator+=(Color a); <br>  inline Color operator*(Color a); <br>  inline Color operator*(GLfloat a); <br>  inline Color operator*=(Color a); <br>  inline Color operator*=(GLfloat *a); <br>  inline Color operator*=(GLfloat a); <br>  <br>  inline GLfloat&amp; operator[](int index); <br> <br>  inline Color clamp(); <br>   <br>  inline void glcolor(); <br> <br>  inline void print(); <br>  inline void print(const char *format); <br> <br>  GLfloat c[4]; <br>}; <br> <br>const Color white(1., 1., 1., 1.), black(0., 0., 0., 1.); <br>const Color red(1, 0, 0), green(0, 1, 0), blue(0, 0, 1); <br> <br>inline Color::Color(GLfloat r, GLfloat g, GLfloat b, GLfloat a) <br>{ <br>  c[0] = r; <br>  c[1] = g; <br>  c[2] = b; <br>  c[3] = a; <br>} <br> <br>inline Color Color::operator=(GLfloat a) <br>{ <br>  c[0] = c[1] = c[2] = c[3] = a; <br>  return *this; <br>} <br> <br>inline Color Color::operator=(GLfloat *a) <br>{ <br>  c[0] = a[0]; <br>  c[1] = a[1]; <br>  c[2] = a[2]; <br>  c[3] = a[3]; <br>  return *this; <br>} <br> <br>inline Color Color::operator+(Color a)  <br>{ <br>  Color val; <br>  val.c[0] = c[0] + a.c[0]; <br>  val.c[1] = c[1] + a.c[1]; <br>  val.c[2] = c[2] + a.c[2]; <br>  val.c[3] = c[3] + a.c[3]; <br>  return val; <br>} <br> <br>inline Color Color::operator+=(Color a) <br>{ <br>  c[0] += a.c[0]; <br>  c[1] += a.c[1]; <br>  c[2] += a.c[2]; <br>  c[3] += a.c[3]; <br>  return *this; <br>} <br> <br>inline Color Color::operator*(Color a) <br>{ <br>  Color val; <br>  val.c[0] = c[0] * a.c[0]; <br>  val.c[1] = c[1] * a.c[1]; <br>  val.c[2] = c[2] * a.c[2]; <br>  val.c[3] = c[3] * a.c[3]; <br>  return val; <br>} <br> <br>inline Color Color::operator*(GLfloat a) <br>{ <br>  Color val; <br>  val.c[0] = c[0] * a; <br>  val.c[1] = c[1] * a; <br>  val.c[2] = c[2] * a; <br>  val.c[3] = c[3] * a; <br>  return val; <br>} <br> <br>inline Color Color::operator*=(Color a) <br>{ <br>  c[0] *= a.c[0]; <br>  c[1] *= a.c[1]; <br>  c[2] *= a.c[2]; <br>  return *this; <br>} <br> <br>inline Color Color::operator*=(GLfloat *a)  <br>{ <br>  c[0] *= a[0]; <br>  c[1] *= a[1]; <br>  c[2] *= a[2]; <br>  return *this; <br>} <br> <br>inline Color Color::operator*=(GLfloat a) <br>{ <br>  c[0] *= a; <br>  c[1] *= a; <br>  c[2] *= a; <br>  c[3] *= a; <br>   <br>  return *this; <br>} <br> <br>inline GLfloat&amp; Color::operator[](int index) <br>{ <br>  return c[index]; <br>} <br> <br>inline Color Color::clamp() <br>{ <br>  Color val; <br>  val.c[0] = c[0] &lt; 0.0 ? 0.0 : (c[0] &gt; 1.0 ? 1.0 : c[0]); <br>  val.c[1] = c[1] &lt; 0.0 ? 0.0 : (c[1] &gt; 1.0 ? 1.0 : c[1]); <br>  val.c[2] = c[2] &lt; 0.0 ? 0.0 : (c[2] &gt; 1.0 ? 1.0 : c[2]); <br>  val.c[3] = c[3] &lt; 0.0 ? 0.0 : (c[3] &gt; 1.0 ? 1.0 : c[3]); <br>  return val; <br>} <br> <br>inline void Color::glcolor() <br>{ <br>  glColor4fv(c); <br>} <br> <br>inline void Color::print() <br>{ <br>  print("%f %f %f %f\n"); <br>} <br> <br>inline void Color::print(const char *format) <br>{ <br>  printf(format, c[0], c[1], c[2], c[3]); <br>} <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RING.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3621"></a>RING.CXX</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;GL/glu.h&gt; <br> <br>#ifdef X11 <br>#include &lt;GL/glx.h&gt; <br>#endif <br> <br>#include &lt;math.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>#ifdef WIN32 <br>#include "stonehen.h" <br>#endif <br> <br>#include "Ring.h" <br> <br>inline float radians(float a) {return a * M_PI / 180.0;}; <br> <br>Ring::Ring()  <br>{ <br>  Point sar_dim, lin_dim; <br> <br>  radius = 10; <br> <br>  nstones = 30; <br> <br>  sar_dim.set(.2, .5, 1); <br>  sarcen.set_dimensions(sar_dim); <br>  sarcen.translate(radius, 0, sar_dim.pt[2]); <br> <br>  angle = 360.0 / (float)nstones; <br> <br>  lin_dim.set(.2, .99 * tan(2.0 * M_PI / (float)nstones) *  <br>      (radius - sar_dim.pt[0]) / 2.0, .2); <br>  lintel.set_dimensions(lin_dim); <br>  lintel.translate(radius, 0, 2.*sar_dim.pt[2] + lin_dim.pt[2]); <br>} <br> <br> <br> Ring::~Ring() <br>{ <br>} <br> <br>void Ring::erode(float p) <br>{ <br>  sarcen.erode(p); <br>  lintel.erode(p); <br>} <br> <br>void Ring::draw() <br>{ <br>  draw_sarcens(); <br>  draw_lintels(); <br>} <br> <br>void Ring::draw_sarcens() <br>{ <br>  int i; <br>  for (i = 0; i &lt; nstones; i++) { <br>    glPushMatrix(); <br>    glRotatef(i * angle, 0, 0, 1); <br>    sarcen.draw(); <br>    glPopMatrix(); <br>  } <br>} <br> <br>void Ring::draw_lintels() <br>{ <br>  int i; <br>  glPushMatrix(); <br>  glRotatef(angle / 2.0, 0, 0, 1); <br>  for (i = 0; i &lt; nstones; i++) { <br>    glPushMatrix(); <br>    glRotatef(i * angle, 0, 0, 1); <br>    lintel.draw(); <br>    glPopMatrix(); <br>  } <br>  glPopMatrix(); <br>} <br> <br>void Ring::draw_shadow(Point dlight, GLfloat blur, <br>       Color color, Color diffuse) <br>{ <br>  draw_sarcens_shadows(dlight, blur, color, diffuse); <br>  draw_lintels_shadows(dlight, blur, color, diffuse); <br>} <br> <br>void Ring::draw_sarcens_shadows(Point dlight, GLfloat blur, <br>Color color, Color diffuse) <br>{ <br>  int i; <br>  Stone proto; <br> <br>  proto = sarcen; <br>  for (i = 0; i &lt; nstones; i++) { <br>    proto.rotate_self_aboutz(angle); <br>    proto.draw_shadow(dlight, blur, color, diffuse); <br>  } <br>} <br> <br>void Ring::draw_lintels_shadows(Point dlight, GLfloat blur, <br>Color color, Color diffuse) <br>{   <br>  int i; <br>  Stone proto; <br> <br>  proto = lintel; <br> <br>  proto.rotate_self_aboutz(angle / 2.0); <br> <br>  for (i = 0; i &lt; nstones; i++) { <br>    proto.rotate_self_aboutz(angle); <br>    proto.draw_shadow(dlight, blur, color, diffuse); <br>  } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

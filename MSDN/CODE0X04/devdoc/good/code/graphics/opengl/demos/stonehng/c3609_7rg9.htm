<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ATMOSPHE.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3609"></a>ATMOSPHE.CXX</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;GL/glu.h&gt; <br> <br>#ifdef X11 <br>#include &lt;GL/glx.h&gt; <br>#endif <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br> <br>#ifdef WIN32 <br>#include "stonehen.h" <br>#endif <br> <br>#define ATMOSPHERE_EXTERN <br>#include "atmosphe.h" <br> <br>const Weather clear("Clear", 0.); <br>const Weather foggy("Foggy", .04, .5, white, Color(.6, .6, 1), white); <br>const Weather very_foggy("Very Foggy", .25, .5, white, white, white); <br>const Weather rainy("Rainy", .01, 1., black, Color(.35, .35, .35), black); <br> <br>Weather weathers[nweathers] = {clear, foggy, very_foggy, rainy}; <br> <br>const float root3_2 = sqrt(3.) / 2.; <br> <br>inline float clamp(float a, float min = 0, float max = 1) <br>{ <br>  if (a &lt; min) return min; <br>  else if (a &gt; max) return max; <br>  else return a; <br>} <br> <br>Weather::Weather() <br>{ <br>  strcpy(name, "No name"); <br>  fog_density = 0; <br>  fog_color = white; <br>  fog_spread = 1; <br>  sun_brightness = 1; <br>  light_sun = GL_LIGHT0; <br>  light_ambient = GL_LIGHT1; <br>  sky_top = blue; <br>  sky_bottom = white; <br>} <br> <br>Weather::Weather(const char *n, GLfloat fd, GLfloat fs, Color fc,  <br> Color s1, Color s2, GLfloat sb, <br> GLenum ls, GLenum la) <br>{ <br>  strcpy(name, n); <br>  fog_density = fd; <br>  fog_color = fc; <br>  fog_spread = fs; <br>  sun_brightness = sb; <br>  light_sun = ls; <br>  light_ambient = la; <br>  sky_top = s1; <br>  sky_bottom = s2; <br>} <br> <br>Weather::~Weather() <br>{ <br>} <br> <br>Weather Weather::operator=(Weather a) <br>{ <br>  strcpy(name, a.name); <br> <br>  fog_density = a.fog_density; <br>  fog_color = a.fog_color; <br>  fog_spread = a.fog_spread; <br> <br>  sun_brightness = a.sun_brightness; <br> <br>  light_sun = a.light_sun; <br>  light_ambient = a.light_ambient; <br> <br>  sky_top = a.sky_top; <br>  sky_bottom = a.sky_bottom; <br> <br>  return *this; <br>} <br> <br>void Weather::apply(Point sun) <br>{ <br>  Color c; <br> <br>  if (fog_density != 0) { <br>    glFogf(GL_FOG_DENSITY, fog_density); <br>    glFogfv(GL_FOG_COLOR, fog_color.c); <br>    glFogi(GL_FOG_MODE, GL_EXP2); <br>  } <br>  glLightfv(light_sun, GL_AMBIENT, black.c); <br>  c = white; <br>  c *= sun_brightness; <br>  glLightfv(light_sun, GL_DIFFUSE, c.c); <br>  glLightfv(light_sun, GL_SPECULAR, white.c); <br>  if (sun.pt[2] &gt;= 0.0) glEnable(light_sun); <br>  else glDisable(light_sun); <br> <br>  c = white; <br>  c *= .25; <br>  glLightfv(light_ambient, GL_AMBIENT, c.c); <br>  glLightfv(light_ambient, GL_DIFFUSE, black.c); <br>  glLightfv(light_ambient, GL_SPECULAR, black.c); <br>  glEnable(light_ambient); <br>} <br> <br>void Weather::draw_sky(Point sun) <br>{ <br>  Point p; <br>  float c; <br>  Color bottom, top; <br> <br>  if (sun.pt[2] &gt;= .5) c = 1.; <br>  else if (sun.pt[2] &gt;= -.5)  <br>    c = sqrt(1. - sun.pt[2]*sun.pt[2])*.5 + sun.pt[2]*root3_2; <br>  else c = 0; <br> <br>  bottom = sky_bottom * c; <br>  top = sky_top * c; <br> <br>  /* This is drawn as a far-away quad */ <br>  glBegin(GL_QUADS); <br>  glColor3fv(bottom.c); <br>  glVertex3f(-1, -1, -1); <br>  glVertex3f(1, -1, -1); <br>  glColor3fv(top.c); <br>  glVertex3f(1, 1, -1); <br>  glVertex3f(-1, 1, -1); <br>  glEnd(); <br>} <br> <br>GLfloat Weather::shadow_blur() <br>{ <br>  return clamp(fog_density * 10.); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

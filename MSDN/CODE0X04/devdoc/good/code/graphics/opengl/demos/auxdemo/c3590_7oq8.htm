<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AUXDEMO.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3590"></a>AUXDEMO.C</h2>
<pre><code>/* <br> * (c) Copyright 1993 - 1998 Microsoft Corporation <br> * <br> *    bgammon.c <br> * <br> *    start easy, just have pieces... <br> * <br> */ <br>#include "glos.h" <br> <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glaux.h&gt; <br> <br>GLvoidinitialize(GLvoid); <br>GLvoidCALLBACK drawScene(GLvoid); <br>GLvoid CALLBACK resize(GLsizei, GLsizei); <br>GLvoiddrawLight(GLvoid); <br>void polarView( GLdouble, GLdouble, GLdouble, GLdouble); <br> <br>GLfloat latitude, longitude, radius; <br> <br>void _CRTAPI1 main(void) <br>{ <br>    initialize(); <br> <br>    auxMainLoop( drawScene ); <br>} <br> <br>GLvoid CALLBACK resize( GLsizei width, GLsizei height ) <br>{ <br>    GLfloat aspect; <br> <br>    glViewport( 0, 0, width, height ); <br> <br>    aspect = (GLfloat) width / height; <br> <br>    glMatrixMode( GL_PROJECTION ); <br>    glLoadIdentity(); <br>    gluPerspective( 45.0, aspect, 3.0, 7.0 ); <br>    glMatrixMode( GL_MODELVIEW ); <br>}     <br> <br>GLvoid initialize(GLvoid) <br>{ <br>    GLfloatmaxObjectSize, aspect; <br>    GLdoublenear_plane, far_plane; <br>    GLsizeiwidth, height; <br> <br>    GLfloatambientProperties[] = {0.7, 0.7, 0.7, 1.0}; <br>    GLfloatdiffuseProperties[] = {0.8, 0.8, 0.8, 1.0}; <br>    GLfloatspecularProperties[] = {1.0, 1.0, 1.0, 1.0}; <br> <br>    width = 1024.0; <br>    height = 768.0; <br> <br>    auxInitPosition( width/4, height/4, width/2, height/2); <br> <br>    auxInitDisplayMode( AUX_RGB | AUX_DEPTH | AUX_DOUBLE ); <br> <br>    auxInitWindow( "AUX Library Demo" ); <br> <br>    auxIdleFunc( drawScene ); <br> <br>    auxReshapeFunc( resize ); <br> <br>    glClearColor( 0.0, 0.0, 0.0, 1.0 ); <br>    glClearDepth( 1.0 ); <br> <br>    glEnable(GL_DEPTH_TEST); <br> <br>    glEnable(GL_LIGHTING); <br>     <br>    glLightfv( GL_LIGHT0, GL_AMBIENT, ambientProperties); <br>    glLightfv( GL_LIGHT0, GL_DIFFUSE, diffuseProperties); <br>    glLightfv( GL_LIGHT0, GL_SPECULAR, specularProperties); <br>    glLightModelf(GL_LIGHT_MODEL_TWO_SIDE, 1.0); <br> <br>    glEnable( GL_LIGHT0 ); <br> <br>    glMatrixMode( GL_PROJECTION ); <br>    aspect = (GLfloat) width / height; <br>    gluPerspective( 45.0, aspect, 3.0, 7.0 ); <br>    glMatrixMode( GL_MODELVIEW ); <br> <br>    near_plane = 3.0; <br>    far_plane = 7.0; <br>    maxObjectSize = 3.0; <br>    radius = near_plane + maxObjectSize/2.0; <br> <br>    latitude = 0.0; <br>    longitude = 0.0; <br> <br> <br>} <br> <br>void polarView(GLdouble radius, GLdouble twist, GLdouble latitude, <br>       GLdouble longitude) <br>{ <br>    glTranslated(0.0, 0.0, -radius); <br>    glRotated( -twist, 0.0, 0.0, 1.0 ); <br>    glRotated( -latitude, 1.0, 0.0, 0.0); <br>    glRotated( longitude, 0.0, 0.0, 1.0);  <br> <br>} <br> <br>GLvoid CALLBACK drawScene(GLvoid) <br>{ <br>    static GLfloatwhiteAmbient[] = {0.3, 0.3, 0.3, 1.0}; <br>    static GLfloatredAmbient[] = {0.3, 0.1, 0.1, 1.0}; <br>    static GLfloatgreenAmbient[] = {0.1, 0.3, 0.1, 1.0}; <br>    static GLfloatblueAmbient[] = {0.1, 0.1, 0.3, 1.0}; <br>    static GLfloatwhiteDiffuse[] = {1.0, 1.0, 1.0, 1.0}; <br>    static GLfloatredDiffuse[] = {1.0, 0.0, 0.0, 1.0}; <br>    static GLfloatgreenDiffuse[] = {0.0, 1.0, 0.0, 1.0}; <br>    static GLfloatblueDiffuse[] = {0.0, 0.0, 1.0, 1.0}; <br>    static GLfloatwhiteSpecular[] = {1.0, 1.0, 1.0, 1.0}; <br>    static GLfloatredSpecular[] = {1.0, 0.0, 0.0, 1.0}; <br>    static GLfloatgreenSpecular[] = {0.0, 1.0, 0.0, 1.0}; <br>    static GLfloatblueSpecular[] = {0.0, 0.0, 1.0, 1.0}; <br> <br>    static GLfloatlightPosition0[] = {1.0, 1.0, 1.0, 1.0}; <br>    static GLfloatangle = 0.0; <br> <br>    glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT ); <br> <br>    glPushMatrix(); <br> <br>    latitude += 4.0; <br>    longitude += 2.5; <br> <br>    polarView( radius, 0, latitude, longitude ); <br> <br>    glPushMatrix(); <br>        angle += 6.0; <br>        glRotatef(angle, 1.0, 0.0, 1.0); <br>        glTranslatef( 0.0, 1.5, 0.0); <br>        glLightfv(GL_LIGHT0, GL_POSITION, lightPosition0); <br>        drawLight(); <br>    glPopMatrix(); <br> <br>    glPushAttrib(GL_LIGHTING_BIT); <br> <br>        glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, redAmbient); <br>        glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, redDiffuse); <br>        glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, whiteSpecular); <br>        glMaterialf(GL_FRONT, GL_SHININESS, 100.0); <br> <br>        auxSolidCone( 0.3, 0.6 ); <br> <br>    glPopAttrib(); <br>    auxWireSphere(1.5); <br> <br>    glPushAttrib(GL_LIGHTING_BIT); <br> <br>        glMaterialfv(GL_BACK, GL_AMBIENT, greenAmbient); <br>        glMaterialfv(GL_BACK, GL_DIFFUSE, greenDiffuse); <br>        glMaterialfv(GL_FRONT, GL_AMBIENT, blueAmbient); <br>        glMaterialfv(GL_FRONT, GL_DIFFUSE, blueDiffuse); <br>        glMaterialfv(GL_FRONT, GL_SPECULAR, blueSpecular); <br>        glMaterialf(GL_FRONT, GL_SHININESS, 50.0); <br> <br>        glPushMatrix(); <br>            glTranslatef(0.8, -0.65, 0.0); <br>            glRotatef(30.0, 1.0, 0.5, 1.0); <br>            auxSolidCylinder( 0.3, 0.6 ); <br>            glPopMatrix(); <br> <br>        glPopAttrib(); <br> <br> <br>    glPopMatrix(); <br> <br>    auxSwapBuffers(); <br>} <br> <br>GLvoid drawLight(GLvoid) <br>{ <br>    glPushAttrib(GL_LIGHTING_BIT); <br>    glDisable(GL_LIGHTING); <br>    glColor3f(1.0, 1.0, 1.0); <br>    auxSolidDodecahedron(0.1); <br>    glPopAttrib(); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

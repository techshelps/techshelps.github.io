<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ELLIPSE.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3614"></a>ELLIPSE.CXX</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;GL/glu.h&gt; <br> <br>#ifdef X11 <br>#include &lt;GL/glx.h&gt; <br>#endif <br> <br>#include &lt;stdio.h&gt; <br> <br>#ifdef WIN32 <br>#include "stonehen.h" <br>#endif <br> <br>#include "Ellipse.h" <br> <br>EllipseSt::EllipseSt() <br>{ <br>  Point sar_dim, lin_dim; <br> <br>  sar_dim.set(.3, .5, 1.2); <br>  lin_dim.set(.3, 1.2, .2); <br> <br>  sarcens[0].set_dimensions(sar_dim); <br>  lintels[0].set_dimensions(lin_dim); <br>  sarcens[0].translate(5, 0, sar_dim.pt[2]); <br>  lintels[0].translate(4.9, 0, 2.*sar_dim.pt[2] + lin_dim.pt[2]); <br>  copy_zero(); <br> <br>  sarcens[0].rotate_self_aboutz(17); <br>  sarcens[1].rotate_self_aboutz(33); <br>  lintels[0].rotate_self_aboutz(25); <br> <br>  sarcens[2].rotate_self_aboutz(-17); <br>  sarcens[3].rotate_self_aboutz(-33); <br>  lintels[1].rotate_self_aboutz(-25); <br> <br>  sarcens[4].rotate_self_aboutz(197); <br>  sarcens[5].rotate_self_aboutz(213); <br>  lintels[2].rotate_self_aboutz(205); <br> <br>  sarcens[6].rotate_self_aboutz(-197); <br>  sarcens[7].rotate_self_aboutz(-213); <br>  lintels[3].rotate_self_aboutz(-205); <br>}   <br>   <br>void EllipseSt::erode(float p) <br>{ <br>  int i; <br> <br>  for (i = 0; i &lt; nsarcens; i++) sarcens[i].erode(p); <br>  for (i = 0; i &lt; nlintels; i++) lintels[i].erode(p); <br>} <br> <br>void EllipseSt::draw() <br>{ <br>  glPushMatrix(); <br>  glScalef(1, 1.1, 1); <br>  draw_sarcens(); <br>  draw_lintels(); <br>  glPopMatrix(); <br>} <br> <br>void EllipseSt::draw_sarcens() <br>{ <br>  int i; <br>  for (i = 0; i &lt; nsarcens; i++) sarcens[i].draw(); <br>} <br> <br>void EllipseSt::draw_lintels() <br>{ <br>  int i; <br>  for (i = 0; i &lt; nlintels; i++) lintels[i].draw(); <br>} <br> <br>void EllipseSt::draw_shadow(Point dlight, GLfloat blur, <br>  Color color, Color diffuse) <br>{ <br>  draw_sarcens_shadows(dlight, blur, color, diffuse); <br>  draw_lintels_shadows(dlight, blur, color, diffuse); <br>} <br> <br>void EllipseSt::draw_sarcens_shadows(Point dlight, GLfloat blur, <br>   Color color, Color diffuse) <br>{ <br>  int i; <br>  for (i = 0; i &lt; nsarcens; i++)  <br>sarcens[i].draw_shadow(dlight, blur, color, diffuse); <br>} <br> <br>void EllipseSt::draw_lintels_shadows(Point dlight, GLfloat blur, <br>   Color color, Color diffuse) <br>{ <br>  int i; <br>  for (i = 0; i &lt; nlintels; i++)  <br>lintels[i].draw_shadow(dlight, blur, color, diffuse); <br>} <br> <br>void EllipseSt::copy_zero() <br>{ <br>  int i; <br> <br>  for (i = 1; i &lt; nsarcens; i++) sarcens[i] = sarcens[0]; <br>  for (i = 1; i &lt; nlintels; i++) lintels[i] = lintels[0]; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

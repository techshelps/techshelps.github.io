<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAIN.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3617"></a>MAIN.CXX</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/glx.h&gt; <br> <br>#include &lt;X11/Intrinsic.h&gt; <br>#include &lt;Xm/Xm.h&gt; <br>#include &lt;Xm/CascadeB.h&gt; <br>#include &lt;Xm/Frame.h&gt; <br>#include &lt;Xm/MainW.h&gt; <br>#include &lt;Xm/PushB.h&gt; <br>#include &lt;Xm/PushBG.h&gt; <br>#include &lt;Xm/RowColumn.h&gt; <br>#include &lt;Xm/ToggleB.h&gt; <br>#include &lt;GLwMDrawA.h&gt; <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br> <br>#ifdef WIN32 <br>#include "stonehen.h" <br>#endif <br> <br>#include "atmosphe.h" <br>#include "scene.h" <br>#include "callback.h" <br> <br>static Display *display; <br>XtAppContext app_context; <br>Widget glw; <br> <br>const int max_args = 20; <br> <br>XVisualInfo *find_visual()  <br>{ <br>  int attr[256], i, stencil, dbuffer, accum; <br>  XVisualInfo *vi; <br> <br>  i = 0; <br>  attr[i++] = GLX_RGBA; <br>  attr[i++] = GLX_RED_SIZE;  attr[i++] = 1; <br>  attr[i++] = GLX_GREEN_SIZE;  attr[i++] = 1; <br>  attr[i++] = GLX_BLUE_SIZE;  attr[i++] = 1; <br>  attr[i++] = GLX_DEPTH_SIZE;  attr[i++] = 1; <br>  dbuffer = i; <br>  attr[i++] = GLX_DOUBLEBUFFER; <br>  stencil = i; <br>  attr[i++] = GLX_STENCIL_SIZE; <br>  attr[i++] = 1; <br>  accum = i; <br>  attr[i++] = GLX_ACCUM_RED_SIZE;  attr[i++] = 1; <br>  attr[i++] = GLX_ACCUM_BLUE_SIZE;  attr[i++] = 1; <br>  attr[i++] = GLX_ACCUM_GREEN_SIZE;  attr[i++] = 1; <br>  attr[i++] = GLX_ACCUM_ALPHA_SIZE;  attr[i++] = 1; <br>  attr[i++] = (int)None; <br> <br>  vi = glXChooseVisual(display, DefaultScreen(display), attr); <br>  if (vi == NULL) { <br>    //fprintf(stderr, "Unable to find visual with accumulation buffer.\n"); <br>    //fprintf(stderr, "(Fancy fog won't work).\n"); <br>    attr[accum] = (int)None; <br>    vi = glXChooseVisual(display, DefaultScreen(display), attr); <br>    if (vi == NULL) { <br>      //fprintf(stderr, "Unable to find visual with stencil buffer.\n"); <br>      //fprintf(stderr, "(Things won't look quite as good).\n"); <br>      attr[stencil] = (int)None; <br>      vi = glXChooseVisual(display, DefaultScreen(display), attr); <br>      if (vi == NULL) { <br>//fprintf(stderr, "Unable to find double-buffered visual.\n"); <br>//fprintf(stderr, "(Things will look even worse).\n"); <br>attr[dbuffer] = (int)None; <br>vi = glXChooseVisual(display, DefaultScreen(display), attr); <br>//if (vi == NULL) fprintf(stderr, "Can't find visual at all.\n"); <br>      } <br>    } <br>  } <br>  return vi; <br>} <br> <br>Widget create_widgets(Widget parent) <br>{ <br>  Widget main_window; <br>  Widget menu_bar; <br>  Widget menu_pane;  <br>  Widget button; <br>  Widget cascade; <br>  Widget frame; <br>  XVisualInfo *vi; <br> <br>  Arg args[max_args]; <br>  int argcount; <br> <br>#ifdef X11 <br>  char buffer[128]; <br>#endif <br> <br>  int i; <br> <br>  main_window = XmCreateMainWindow(parent, "main1", NULL, 0); <br>  XtManageChild(main_window); <br>  <br>  menu_bar = XmCreateMenuBar(main_window, "menu_bar", NULL, 0); <br>  XtManageChild(menu_bar); <br>     <br>  menu_pane = XmCreatePulldownMenu(menu_bar, "menu_pane", NULL, 0); <br>  button = XmCreatePushButton(menu_pane, "Exit", NULL, 0); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNactivateCallback, (XtCallbackProc)exitCB, NULL); <br>       <br>  XtSetArg(args[0], XmNsubMenuId, menu_pane); <br>  cascade = XmCreateCascadeButton(menu_bar, "File", args, 1); <br>  XtManageChild(cascade); <br> <br> <br> <br>  menu_pane = XmCreatePulldownMenu(menu_bar, "menu_pane", NULL, 0); <br>  XtSetArg(args[0], XmNset, use_lighting); <br>  button = XmCreateToggleButton(menu_pane, "Lighting", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback,  <br>                (XtCallbackProc)intToggleCB, &amp;use_lighting); <br>  XtSetArg(args[0], XmNset, draw_shadows); <br>  button = XmCreateToggleButton(menu_pane, "Shadows", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback,  <br>                (XtCallbackProc)intToggleCB, &amp;draw_shadows); <br> <br> <br>  XtSetArg(args[0], XmNset, use_normal_fog); <br>  button = XmCreateToggleButton(menu_pane, "Fog", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback,  <br>                (XtCallbackProc)intToggleCB, &amp;use_normal_fog); <br> <br>#ifdef TEXTURE <br>  XtSetArg(args[0], XmNset, use_textures); <br>  button = XmCreateToggleButton(menu_pane, "Texture Map", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback,  <br>                (XtCallbackProc)intToggleCB, &amp;use_textures); <br>#endif <br> <br>  XtSetArg(args[0], XmNset, use_telescope); <br>  button = XmCreateToggleButton(menu_pane, "Telescope", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback, <br>(XtCallbackProc)intToggleCB, &amp;use_telescope); <br> <br>  XtSetArg(args[0], XmNset, use_antialias); <br>  button = XmCreateToggleButton(menu_pane, "Antialias", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback, <br>(XtCallbackProc)intToggleCB, &amp;use_antialias); <br> <br>  XtSetArg(args[0], XmNsubMenuId, menu_pane); <br>  cascade = XmCreateCascadeButton(menu_bar, "SPFX", args, 1); <br>  XtManageChild(cascade); <br> <br> <br>  argcount = 0; <br>  XtSetArg(args[argcount], XmNradioBehavior, True); argcount++; <br>  menu_pane = XmCreatePulldownMenu(menu_bar, "menu_pane", args, argcount); <br>  XtSetArg(args[0], XmNset, TRUE); <br>  for (i = 0; i &lt; nweathers; i++) { <br>    if (i == def_weather_index) argcount = 1; <br>    else argcount = 0; <br>    button = XmCreateToggleButton(menu_pane, (char *)weathers[i].name,  <br>  args, argcount); <br>    XtManageChild(button); <br>    XtAddCallback(button, XmNvalueChangedCallback,  <br>  (XtCallbackProc)weatherCB, <br>  (XtPointer)(&amp;weathers[i])); <br>  } <br>  XtSetArg(args[0], XmNsubMenuId, menu_pane); <br>  cascade = XmCreateCascadeButton(menu_bar, "Weather", args, 1); <br>  XtManageChild(cascade); <br> <br> <br>  argcount = 0; <br>  XtSetArg(args[argcount], XmNradioBehavior, True); argcount++; <br>  menu_pane = XmCreatePulldownMenu(menu_bar, "menu_pane", args, argcount); <br>  button = XmCreatePushButton(menu_pane, "Current Time", NULL, 0); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNactivateCallback,  <br>(XtCallbackProc)currentTimeCB, NULL); <br>  button = XmCreatePushButton(menu_pane, "10 a.m.", NULL, 0); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNactivateCallback,  <br>(XtCallbackProc)time10amCB, NULL); <br>  button = XmCreatePushButton(menu_pane, "Noon", NULL, 0); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNactivateCallback,  <br>(XtCallbackProc)time12pmCB, NULL); <br>  button = XmCreatePushButton(menu_pane, "4 p.m.", NULL, 0); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNactivateCallback,  <br>(XtCallbackProc)time4pmCB, NULL); <br> <br>  XtSetArg(args[0], XmNset, 1); argcount = 1; <br>  button = XmCreateToggleButton(menu_pane, "Hold Time", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback, <br>(XtCallbackProc)timeSpeedCB, (XtPointer)0); <br>  button = XmCreateToggleButton(menu_pane, "Scale = 1:1", NULL, 0); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback, <br>(XtCallbackProc)timeSpeedCB, (XtPointer)1); <br>  button = XmCreateToggleButton(menu_pane, "Scane = 1:10", NULL, 0); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback, <br>(XtCallbackProc)timeSpeedCB, (XtPointer)10); <br>  button = XmCreateToggleButton(menu_pane, "Scane = 1:100", NULL, 0); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback, <br>(XtCallbackProc)timeSpeedCB, (XtPointer)100); <br>  button = XmCreateToggleButton(menu_pane, "Scane = 1:500", NULL, 0); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback, <br>(XtCallbackProc)timeSpeedCB, (XtPointer)500);   <br> <br>  XtSetArg(args[0], XmNsubMenuId, menu_pane); <br>  cascade = XmCreateCascadeButton(menu_bar, "Time", args, 1); <br>  XtManageChild(cascade); <br> <br> <br>  menu_pane = XmCreatePulldownMenu(menu_bar, "menu_pane", NULL, 0); <br>  XtSetArg(args[0], XmNset, cb_demo_mode); argcount = 1; <br>  button = XmCreateToggleButton(menu_pane, "Demo Mode", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback, <br>(XtCallbackProc)demo_modeCB, (XtPointer)0); <br>  button = XmCreatePushButton(menu_pane, "Reset viewer", NULL, 0); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNactivateCallback,  <br>(XtCallbackProc)resetViewerCB, NULL); <br>  XtSetArg(args[0], XmNsubMenuId, menu_pane); <br>  cascade = XmCreateCascadeButton(menu_bar, "Misc", args, 1); <br>  XtManageChild(cascade); <br> <br> <br>  argcount = 0; <br>  XtSetArg(args[argcount], XmNmarginWidth, 0); argcount++; <br>  XtSetArg(args[argcount], XmNmarginHeight, 0); argcount++; <br>  XtSetArg(args[argcount], XmNshadowThickness, 1); argcount++; <br>  XtSetArg(args[argcount], XmNshadowType, XmSHADOW_OUT); argcount++; <br>  frame = XmCreateFrame(main_window, "frame", args, argcount); <br>  XtManageChild(frame); <br> <br>  argcount = 0; <br>  vi = find_visual(); <br>  if (vi) { <br>    XtSetArg(args[argcount], GLwNvisualInfo, vi); argcount++; <br>  } <br>  else { <br>    XtSetArg(args[argcount], GLwNrgba, TRUE); argcount++; <br>    XtSetArg(args[argcount], GLwNdepthSize, 1); argcount++; <br>    XtSetArg(args[argcount], GLwNdoublebuffer, TRUE); argcount++; <br>  } <br>  XtSetArg(args[argcount], XmNbottomAttachment, XmATTACH_FORM); argcount++; <br>  XtSetArg(args[argcount], XmNtopAttachment, XmATTACH_FORM); argcount++; <br>  XtSetArg(args[argcount], XmNleftAttachment, XmATTACH_FORM); argcount++; <br>  XtSetArg(args[argcount], XmNrightAttachment, XmATTACH_FORM); argcount++; <br>  glw = GLwCreateMDrawingArea(frame, "glwidget", args, argcount); <br>  XtManageChild(glw); <br>  XtAddCallback(glw, GLwNginitCallback, (XtCallbackProc)initCB, 0); <br>  XtAddCallback(glw, GLwNexposeCallback, (XtCallbackProc)exposeCB, 0); <br>  XtAddCallback(glw, GLwNresizeCallback, (XtCallbackProc)resizeCB, 0); <br>  XtAddCallback(glw, GLwNinputCallback, (XtCallbackProc)inputCB, 0); <br> <br>  return main_window; <br>} <br> <br>void _cdecl main(int argc, char **argv) <br>{ <br>  Widget app_shell; <br>  Arg args[max_args]; <br>  int argcount; <br> <br>  XtToolkitInitialize(); <br>  app_context = XtCreateApplicationContext(); <br>  display = XtOpenDisplay(app_context, NULL, argv[0], <br>                          "XMdemos", NULL, 0, &amp;argc, argv); <br>  if (!display) { <br>    XtWarning("Can't open display."); <br>    exit(0); <br>  } <br> <br>  argcount = 0; <br>  XtSetArg(args[argcount], XmNmaxAspectX, 1); argcount++; <br>  XtSetArg(args[argcount], XmNmaxAspectY, 1); argcount++; <br>  XtSetArg(args[argcount], XmNminAspectX, 1); argcount++; <br>  XtSetArg(args[argcount], XmNminAspectY, 1); argcount++; <br>  app_shell =  <br>    XtAppCreateShell(argv[0], "XMdemos", applicationShellWidgetClass, <br>                     display, args, argcount); <br>   <br>  create_widgets(app_shell); <br> <br>  XtRealizeWidget(app_shell); <br> <br>  XtAppMainLoop(app_context); <br>   <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

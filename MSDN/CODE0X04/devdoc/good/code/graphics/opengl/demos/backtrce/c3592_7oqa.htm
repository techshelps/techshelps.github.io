<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BACKTRAC.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3592"></a>BACKTRAC.CXX</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;GL/glu.h&gt; <br>#include &lt;GL/gl.h&gt; <br>extern "C" { <br>#include &lt;GL/glaux.h&gt; <br>}; <br> <br>#ifdef GLX_MOTIF <br>#include &lt;GL/glx.h&gt; <br>#include &lt;X11/Intrinsic.h&gt; <br>#include &lt;Xm/Xm.h&gt; <br>#include &lt;Xm/CascadeB.h&gt; <br>#include &lt;Xm/Frame.h&gt; <br>#include &lt;Xm/MainW.h&gt; <br>#include &lt;Xm/PushB.h&gt; <br>#include &lt;Xm/PushBG.h&gt; <br>#include &lt;Xm/RowColumn.h&gt; <br>#include &lt;Xm/ToggleB.h&gt; <br>#include &lt;GLwMDrawA.h&gt; <br>#include &lt;sys/time.h&gt; <br>#endif <br> <br>#include &lt;math.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br> <br>#include "scene.hxx" <br>#include "cbacks.hxx" <br>#include "menu.h" <br> <br> <br>LONG APIENTRY MyWndProc(HWND, UINT, UINT, LONG); <br>VOID SubclassWindow (HWND, WNDPROC); <br>void vCustomizeWnd(void); <br> <br> <br>extern light lights[]; <br> <br>extern GLboolean bAutoMotion(void); <br>extern void draw(void); <br> <br>#ifdef GLX_MOTIF <br>static Display *display; <br>XtAppContext app_context; <br>Widget glw; <br>const int max_args = 20; <br>#endif <br> <br>int quick_moves = 0; <br>int auto_motion = 0; <br> <br>#ifdef GLX_MOTIF <br>XVisualInfo *find_visual()  <br>{ <br>  int attr[256], i, stencil, dbuffer; <br>  XVisualInfo *vi; <br> <br>  i = 0; <br>  attr[i++] = GLX_RGBA; <br>  attr[i++] = GLX_RED_SIZE; <br>  attr[i++] = 1; <br>  attr[i++] = GLX_GREEN_SIZE; <br>  attr[i++] = 1; <br>  attr[i++] = GLX_BLUE_SIZE; <br>  attr[i++] = 1; <br>  attr[i++] = GLX_DEPTH_SIZE; <br>  attr[i++] = 1; <br>  dbuffer = i; <br>  attr[i++] = GLX_DOUBLEBUFFER; <br>  stencil = i; <br>  attr[i++] = GLX_STENCIL_SIZE; <br>  attr[i++] = 1; <br>  attr[i++] = (int)None; <br> <br>  vi = glXChooseVisual(display, DefaultScreen(display), attr); <br>  if (vi == NULL) { <br>    //fprintf(stderr, "Unable to find visual with stencil buffer.\n"); <br>    //fprintf(stderr, "(Things won't look quite as good).\n"); <br>    attr[stencil] = (int)None; <br>    vi = glXChooseVisual(display, DefaultScreen(display), attr); <br>    if (vi == NULL) { <br>      //fprintf(stderr, "Unable to find double-buffered visual.\n"); <br>      //fprintf(stderr, "(Things will look even worse).\n"); <br>      attr[dbuffer] = (int)None; <br>      vi = glXChooseVisual(display, DefaultScreen(display), attr); <br>      //if (vi == NULL) fprintf(stderr, "Can't find visual at all.\n"); <br>    } <br>  } <br>  return vi; <br>} <br>#endif <br> <br>#ifdef GLX_MOTIF <br>Widget create_widgets(Widget parent) <br>{ <br>  Widget main_window; <br>  Widget menu_bar; <br>  Widget menu_pane;  <br>  Widget button; <br>  Widget cascade; <br>  Widget frame; <br>  XVisualInfo *vi; <br> <br>  Arg args[max_args]; <br>  int argcount; <br> <br>  char buffer[128]; <br> <br>  int i; <br> <br>  main_window = XmCreateMainWindow(parent, "main1", NULL, 0); <br>  XtManageChild(main_window); <br>  <br>  menu_bar = XmCreateMenuBar(main_window, "menu_bar", NULL, 0); <br>  XtManageChild(menu_bar); <br>     <br>  menu_pane = XmCreatePulldownMenu(menu_bar, "menu_pane", NULL, 0); <br>  button = XmCreatePushButton(menu_pane, "Exit", NULL, 0); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNactivateCallback, (XtCallbackProc)exitCB, NULL); <br>       <br>  XtSetArg(args[0], XmNsubMenuId, menu_pane); <br>  cascade = XmCreateCascadeButton(menu_bar, "File", args, 1); <br>  XtManageChild(cascade); <br> <br> <br>  argcount = 0; <br>  XtSetArg(args[argcount], XmNradioBehavior, True); argcount++; <br>  menu_pane = XmCreatePulldownMenu(menu_bar, "menu_pane", args, argcount); <br>  XtSetArg(args[0], XmNset, TRUE); <br>  for (i = 0; i &lt; nindices; i++) { <br>    if (i == def_refraction_index) argcount = 1; <br>    else argcount = 0; <br>    button = XmCreateToggleButton(menu_pane, (char *)indices[i].name,  <br>args, argcount); <br>    XtManageChild(button); <br>    XtAddCallback(button, XmNvalueChangedCallback,  <br>  (XtCallbackProc)refractionCB,  <br>  (XtPointer)(&amp;indices[i].index)); <br>  } <br>  XtSetArg(args[0], XmNsubMenuId, menu_pane); <br>  cascade = XmCreateCascadeButton(menu_bar, "Material", args, 1); <br>  XtManageChild(cascade); <br> <br> <br>  menu_pane = XmCreatePulldownMenu(menu_bar, "menu_pane", NULL, 0); <br> <br>  XtSetArg(args[0], XmNset, draw_square); <br>  button = XmCreateToggleButton(menu_pane, "Draw Square", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback,  <br>                (XtCallbackProc)drawSomethingCB, &amp;draw_square); <br> <br>  XtSetArg(args[0], XmNset, draw_shadows); <br>  button = XmCreateToggleButton(menu_pane, "Draw Shadows", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback,  <br>                (XtCallbackProc)drawSomethingCB, &amp;draw_shadows); <br> <br>  XtSetArg(args[0], XmNset, draw_refraction); <br>  button = XmCreateToggleButton(menu_pane, "Draw Refraction", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback,  <br>                (XtCallbackProc)drawSomethingCB, &amp;draw_refraction); <br> <br>  XtSetArg(args[0], XmNset, draw_sphere); <br>  button = XmCreateToggleButton(menu_pane, "Draw Sphere", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback,  <br>                (XtCallbackProc)drawSomethingCB, &amp;draw_sphere); <br> <br>  XtSetArg(args[0], XmNset, draw_lights); <br>  button = XmCreateToggleButton(menu_pane, "Draw Lights", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback,  <br>                (XtCallbackProc)drawSomethingCB, &amp;draw_lights); <br> <br>#ifdef TEXTURE <br>  XtSetArg(args[0], XmNset, draw_texture); <br>  button = XmCreateToggleButton(menu_pane, "Texture Map", args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback,  <br>                (XtCallbackProc)drawSomethingCB, &amp;draw_texture); <br>#endif <br> <br>  XtSetArg(args[0], XmNsubMenuId, menu_pane); <br>  cascade = XmCreateCascadeButton(menu_bar, "Draw", args, 1); <br>  XtManageChild(cascade); <br> <br>  argcount = 0; <br>  XtSetArg(args[argcount], XmNradioBehavior, True); argcount++; <br>  menu_pane = XmCreatePulldownMenu(menu_bar, "menu_pane", args, argcount); <br>  XtSetArg(args[0], XmNset, TRUE); <br>  for (i = 0; i &lt; npossible_divisions; i++) { <br>    if (i == def_divisions_index) argcount = 1; <br>    else argcount = 0; <br>    sprintf(buffer, "%d", possible_divisions[i]); <br>    button = XmCreateToggleButton(menu_pane, buffer, args, argcount); <br>    XtManageChild(button); <br>    XtAddCallback(button, XmNvalueChangedCallback,  <br>  (XtCallbackProc)subdivisionCB, &amp;possible_divisions[i]); <br>  } <br>  XtSetArg(args[0], XmNsubMenuId, menu_pane); <br>  cascade = XmCreateCascadeButton(menu_bar, "Subdivision", args, 1); <br>  XtManageChild(cascade); <br> <br> <br>  menu_pane = XmCreatePulldownMenu(menu_bar, "menu_pane", args, argcount); <br>  button = XmCreatePushButton(menu_pane, "Reset Position", NULL, 0); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNactivateCallback,  <br>(XtCallbackProc)resetLightsCB, NULL); <br> <br>  XtSetArg(args[0], XmNset, TRUE); <br>  for (i = 0; i &lt; nlights; i++) { <br>    button = XmCreateToggleButton(menu_pane, lights[i].name, args,  <br>  lights[i].on ? 1 : 0); <br>    XtManageChild(button); <br>    XtAddCallback(button, XmNvalueChangedCallback,  <br>  (XtCallbackProc)light_onCB, &amp;lights[i]); <br>  } <br>  XtSetArg(args[0], XmNsubMenuId, menu_pane); <br>  cascade = XmCreateCascadeButton(menu_bar, "Lights", args, 1); <br>  XtManageChild(cascade); <br> <br> <br>  menu_pane = XmCreatePulldownMenu(menu_bar, "menu_pane", args, <br>   argcount); <br>  XtSetArg(args[0], XmNset, quick_moves); <br>  button = XmCreateToggleButton(menu_pane, "Quick Motion", <br>args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback,  <br>(XtCallbackProc)intToggleCB, &amp;quick_moves); <br> <br>  XtSetArg(args[0], XmNset, auto_motion); <br>  button = XmCreateToggleButton(menu_pane, "Rotate Automatically", <br>args, 1); <br>  XtManageChild(button); <br>  XtAddCallback(button, XmNvalueChangedCallback,  <br>(XtCallbackProc)autoMotionCB, NULL); <br> <br>  XtSetArg(args[0], XmNsubMenuId, menu_pane); <br>  cascade = XmCreateCascadeButton(menu_bar, "Motion", args, 1); <br>  XtManageChild(cascade); <br> <br> <br>  argcount = 0; <br>  XtSetArg(args[argcount], XmNmarginWidth, 0); argcount++; <br>  XtSetArg(args[argcount], XmNmarginHeight, 0); argcount++; <br>  XtSetArg(args[argcount], XmNshadowThickness, 1); argcount++; <br>  XtSetArg(args[argcount], XmNshadowType, XmSHADOW_OUT); argcount++; <br>  frame = XmCreateFrame(main_window, "frame", args, argcount); <br>  XtManageChild(frame); <br> <br> <br>  argcount = 0; <br>  vi = find_visual(); <br>  if (vi) { <br>    XtSetArg(args[argcount], GLwNvisualInfo, vi); argcount++; <br>  } <br>  else { <br>    XtSetArg(args[argcount], GLwNrgba, TRUE); argcount++; <br>    XtSetArg(args[argcount], GLwNdepthSize, 1); argcount++; <br>    XtSetArg(args[argcount], GLwNdoublebuffer, TRUE); argcount++; <br>  } <br>  XtSetArg(args[argcount], XmNbottomAttachment, XmATTACH_FORM); argcount++; <br>  XtSetArg(args[argcount], XmNtopAttachment, XmATTACH_FORM); argcount++; <br>  XtSetArg(args[argcount], XmNleftAttachment, XmATTACH_FORM); argcount++; <br>  XtSetArg(args[argcount], XmNrightAttachment, XmATTACH_FORM); argcount++; <br>  glw = GLwCreateMDrawingArea(frame, "glwidget", args, argcount); <br>  XtManageChild(glw); <br>  XtAddCallback(glw, GLwNginitCallback, (XtCallbackProc)initCB, 0); <br>  XtAddCallback(glw, GLwNexposeCallback, (XtCallbackProc)exposeCB, 0); <br>  XtAddCallback(glw, GLwNresizeCallback, (XtCallbackProc)resizeCB, 0); <br>  XtAddCallback(glw, GLwNinputCallback, (XtCallbackProc)inputCB, 0); <br> <br>  return main_window; <br>} <br>#endif <br> <br>void idle_func (void) <br>{ <br>    bAutoMotion(); <br>} <br> <br> <br>void null_func (void) <br>{ <br>} <br> <br> <br>int CRTAPI1 main(int argc, char **argv) <br>{ <br>    auxInitDisplayMode(AUX_RGB | AUX_STENCIL | AUX_DOUBLE ); <br>    auxInitPosition(100, 100, 300, 300); <br>    auxInitWindow("BackTrace"); <br>    vCustomizeWnd(); <br>    scene_load_texture((char *)def_texfile); <br> <br>    vInit(); <br>    auxReshapeFunc(vResize); <br> <br>    // <br>    // we've a choice of using accelerator or auxKeyFunc <br>    // the use of auxKeyFunc here is solely for demonstration purpose <br>    // <br>    auxKeyFunc(AUX_SPACE, vQuickMove); <br>    auxKeyFunc(AUX_RETURN, vResetLights); <br>    auxKeyFunc(AUX_p, vAutoMotion); <br> <br>    auxKeyFunc(AUX_q, vDrawAll); <br>    auxKeyFunc(AUX_w, vDrawSquare); <br>    auxKeyFunc(AUX_e, vDrawShadow); <br>    auxKeyFunc(AUX_r, vDrawRefraction); <br>    auxKeyFunc(AUX_t, vDrawSphere); <br>    auxKeyFunc(AUX_y, vDrawLight); <br>    auxKeyFunc(AUX_u, vDrawTexture); <br> <br>    auxKeyFunc(AUX_a, vRefractionAIR); <br>    auxKeyFunc(AUX_s, vRefractionICE); <br>    auxKeyFunc(AUX_d, vRefractionWATER); <br>    auxKeyFunc(AUX_f, vRefractionZincGLASS); <br>    auxKeyFunc(AUX_g, vRefractionLightGLASS); <br>    auxKeyFunc(AUX_h, vRefractionHeavyGLASS); <br> <br>    auxKeyFunc(AUX_1, vSubdivision10); <br>    auxKeyFunc(AUX_2, vSubdivision20); <br>    auxKeyFunc(AUX_3, vSubdivision30); <br>    auxKeyFunc(AUX_4, vSubdivision40); <br> <br>    auxKeyFunc(AUX_R, vRLight_on); <br>    auxKeyFunc(AUX_G, vGLight_on); <br>    auxKeyFunc(AUX_B, vBLight_on); <br> <br>    auxMouseFunc(AUX_LEFTBUTTON, AUX_MOUSEDOWN, vMouseDown); <br>    auxMouseFunc(AUX_MIDDLEBUTTON, AUX_MOUSEDOWN, vMouseDown); <br>    auxMouseFunc(AUX_RIGHTBUTTON, AUX_MOUSEDOWN, vMouseDown); <br> <br>    auxMouseFunc(AUX_LEFTBUTTON, AUX_MOUSEUP, vLeftMouseUp); <br>    auxMouseFunc(AUX_MIDDLEBUTTON, AUX_MOUSEUP, vMiddleMouseUp); <br>    auxMouseFunc(AUX_RIGHTBUTTON, AUX_MOUSEUP, vRightMouseUp); <br> <br>    auxMouseFunc(AUX_LEFTBUTTON, AUX_MOUSELOC, vMouseMove); <br>    auxMouseFunc(AUX_MIDDLEBUTTON, AUX_MOUSELOC, vMouseMove); <br>    auxMouseFunc(AUX_RIGHTBUTTON, AUX_MOUSELOC, vMouseMove); <br> <br>    auxMainLoop(draw); <br>    if (auto_motion) auxIdleFunc (idle_func); <br>    else auxIdleFunc (null_func); <br>    return 0; <br>} <br> <br> <br>#ifdef GLX_MOTIF <br>void main(int argc, char **argv) <br>{ <br>  Widget app_shell; <br>  Arg args[max_args]; <br>  int argcount; <br> <br>  scene_load_texture((char *)def_texfile); <br> <br>  XtToolkitInitialize(); <br>  app_context = XtCreateApplicationContext(); <br>  display = XtOpenDisplay(app_context, NULL, argv[0], <br>                          "XMdemos", NULL, 0, &amp;argc, argv); <br>  if (!display) { <br>    XtWarning("Can't open display."); <br>    exit(0); <br>  } <br> <br>  argcount = 0; <br>  XtSetArg(args[argcount], XmNmaxAspectX, 1); argcount++; <br>  XtSetArg(args[argcount], XmNmaxAspectY, 1); argcount++; <br>  XtSetArg(args[argcount], XmNminAspectX, 1); argcount++; <br>  XtSetArg(args[argcount], XmNminAspectY, 1); argcount++; <br>  app_shell =  <br>    XtAppCreateShell(argv[0], "XMdemos", applicationShellWidgetClass, <br>                     display, args, argcount); <br>   <br>  create_widgets(app_shell); <br> <br>  XtRealizeWidget(app_shell); <br> <br>  XtAppMainLoop(app_context); <br>   <br>} <br>#endif <br> <br> <br> <br>/**************************************************************************\ <br>* <br>*  function:  MyWndProc <br>* <br>*  input parameters:  normal window procedure parameters. <br>* <br>\**************************************************************************/ <br>LONG APIENTRY MyWndProc(HWND hwnd, UINT message, UINT wParam, LONG lParam) <br>{ <br>  WNDPROC     pfnOldProc; <br>  static UINT uiTmID = 0; <br>  int wmId, wmEvent; <br> <br>  pfnOldProc = (WNDPROC) GetWindowLong (hwnd, GWL_USERDATA); <br> <br>  switch (message) { <br> <br>    case WM_COMMAND: { <br>        HMENU hmenu; <br> <br>        hmenu = GetMenu(auxGetHWND()); <br>        wmId    = LOWORD(wParam); <br>        wmEvent = HIWORD(wParam); <br>        switch (wmId) { <br>            case IDM_EXIT      : vExit(); break; <br>            case IDM_AIR       : <br>            case IDM_ICE       : <br>            case IDM_WATER     : <br>            case IDM_ZINC      : <br>            case IDM_LIGHT     : <br>            case IDM_HEAVY     : vRefraction(wmId - IDM_AIR); break; <br> <br>            case IDM_SQUARE    : <br>            { <br>                if (draw_square) <br>                    CheckMenuItem(hmenu, IDM_SQUARE, MF_BYCOMMAND | MF_UNCHECKED); <br>                else <br>                    CheckMenuItem(hmenu, IDM_SQUARE, MF_BYCOMMAND | MF_CHECKED); <br>                vDrawStuff(&amp;draw_square); <br>                break; <br>            } <br>            case IDM_SHADOW    : <br>            { <br>                if (draw_shadows) <br>                    CheckMenuItem(hmenu, IDM_SHADOW, MF_BYCOMMAND | MF_UNCHECKED); <br>                else <br>                    CheckMenuItem(hmenu, IDM_SHADOW, MF_BYCOMMAND | MF_CHECKED); <br>                vDrawStuff(&amp;draw_shadows); <br>                break; <br>            } <br>            case IDM_REFRACTION: <br>            { <br>                if (draw_refraction) <br>                    CheckMenuItem(hmenu, IDM_REFRACTION, MF_BYCOMMAND | MF_UNCHECKED); <br>                else <br>                    CheckMenuItem(hmenu, IDM_REFRACTION, MF_BYCOMMAND | MF_CHECKED); <br>                vDrawStuff(&amp;draw_refraction); <br>                break; <br>            } <br>            case IDM_SPHERE    : <br>            { <br>                if (draw_sphere) <br>                    CheckMenuItem(hmenu, IDM_SPHERE, MF_BYCOMMAND | MF_UNCHECKED); <br>                else <br>                    CheckMenuItem(hmenu, IDM_SPHERE, MF_BYCOMMAND | MF_CHECKED); <br>                vDrawStuff(&amp;draw_sphere); <br>                break; <br>            } <br>            case IDM_LIGHTS    : <br>            { <br>                if (draw_lights) <br>                    CheckMenuItem(hmenu, IDM_LIGHTS, MF_BYCOMMAND | MF_UNCHECKED); <br>                else <br>                    CheckMenuItem(hmenu, IDM_LIGHTS, MF_BYCOMMAND | MF_CHECKED); <br>                vDrawStuff(&amp;draw_lights); <br>                break; <br>            } <br>            case IDM_TEXTURE   : <br>            { <br>                if (draw_texture) <br>                    CheckMenuItem(hmenu, IDM_TEXTURE, MF_BYCOMMAND | MF_UNCHECKED); <br>                else <br>                    CheckMenuItem(hmenu, IDM_TEXTURE, MF_BYCOMMAND | MF_CHECKED); <br>                vDrawStuff(&amp;draw_texture); <br>                break; <br>            } <br>            case IDM_ALL       : vDrawAll(); break; <br>            case IDM_10        : <br>            case IDM_20        : <br>            case IDM_30        : <br>            case IDM_40        : vSubdivision(wmId - IDM_10); break; <br> <br>            case IDM_RESETLGT  : vResetLights(); break; <br> <br>            case IDM_RED       : <br>            case IDM_GREEN     : <br>            case IDM_BLUE      : vLight_on(wmId - IDM_RED); break; <br> <br>            case IDM_QUICK     : vQuickMove(); break; <br>            case IDM_AUTO      : vAutoMotion(); break; <br>            default: <br>                break; <br>        } <br>    } <br> <br>    case WM_USER: <br>      if (auto_motion) auxIdleFunc (idle_func); <br>      else auxIdleFunc (null_func); <br> <br>        return 0; <br> <br>    case WM_DESTROY: <br>        if (uiTmID != 0) <br>            KillTimer(hwnd, uiTmID); <br>        return (pfnOldProc)(hwnd, message, wParam, lParam); <br> <br>    default: <br>        return (pfnOldProc)(hwnd, message, wParam, lParam); <br> <br>  } /* end switch */ <br> <br>  return 0; <br>} <br> <br>/**************************************************************************\ <br>*  function:  SubclassWindow <br>* <br>*  input parameters: <br>*   hwnd            - window handle to be subclassed, <br>*   SubclassWndProc - the new window procedure. <br>* <br>\**************************************************************************/ <br>VOID SubclassWindow (HWND hwnd, WNDPROC SubclassWndProc) <br>{ <br>  LONG pfnOldProc; <br> <br>  pfnOldProc = GetWindowLong (hwnd, GWL_WNDPROC); <br> <br>  SetWindowLong (hwnd, GWL_USERDATA, (LONG) pfnOldProc); <br>  SetWindowLong (hwnd, GWL_WNDPROC,  (LONG) SubclassWndProc); <br>} <br> <br>/******************************Public*Routine******************************\ <br>* <br>* vCustomizeWnd <br>* <br>* Effects: Subclass the window created by the toolkit <br>*          Add menu bar to the window <br>*          Setup timer <br>* <br>* History: <br>*  01-Dec-1993 <br>* <br>\**************************************************************************/ <br> <br>void vCustomizeWnd(void) <br>{ <br>    HWND    hWnd; <br> <br>    if ((hWnd = auxGetHWND()) == NULL) { <br>OutputDebugString("auxGetHWND() failed\n"); <br>return; <br>    } <br> <br>    SubclassWindow (hWnd, (WNDPROC) MyWndProc); <br>    SendMessage(hWnd, WM_USER, 0L, 0L); <br>    SetMenu(hWnd, LoadMenu(GetModuleHandle(NULL), "Backtrac")); <br>    DrawMenuBar(hWnd); <br> <br>    return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TELESCOP.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3634"></a>TELESCOP.CXX</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;GL/glu.h&gt; <br> <br>#ifdef X11 <br>#include &lt;GL/glx.h&gt; <br>#endif <br> <br>#include &lt;math.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>#ifdef WIN32 <br>#include "stonehen.h" <br>#endif <br> <br>#include "Color.h" <br>#include "Telescop.h" <br> <br>inline float radians(float a) {return M_PI * a / 180.0;} <br> <br>Telescope::Telescope(GLfloat x, GLfloat y) <br>{ <br>  xpos = x; <br>  ypos = y; <br> <br>  divisions = 20; <br>  radius = .1; <br>   <br>  disk = gluNewQuadric(); <br>  cylinder = gluNewQuadric(); <br>  gluQuadricNormals(disk, GLU_FLAT); <br>  gluQuadricNormals(cylinder, GLU_SMOOTH); <br>  gluQuadricTexture(disk, GL_TRUE); <br>  gluQuadricTexture(cylinder, GL_TRUE); <br> <br>} <br> <br>Telescope::~Telescope() <br>{ <br>  gluDeleteQuadric(disk); <br>  gluDeleteQuadric(cylinder); <br>} <br> <br>void Telescope::draw_setup(GLfloat fov, GLfloat aspect, int perspective)  <br>{ <br>  GLfloat near_plane; <br> <br>  /* Worry about the aspect ratio later */ <br>  near_plane = .5 / tan(radians(fov / 2.0)); <br> <br>  glMatrixMode(GL_PROJECTION); <br>  glPushMatrix(); <br>  glLoadIdentity(); <br>  if (perspective) gluPerspective(fov, aspect, near_plane - .01, 10.0); <br>  /*else <br>    fprintf(stderr,  <br>    "Warning: Drawing telescope using orthographic projection.\n");  <br>  gluLookAt(0, 0, -near_plane,  <br>    0, 0, 1,  <br>    0, 1, 0);*/ <br> <br>  glMatrixMode(GL_MODELVIEW); <br>  glPushMatrix(); <br>  glLoadIdentity(); <br>  glTranslatef(xpos, ypos, 0);  <br>} <br> <br>void Telescope::draw_fake() <br>{ <br>  glBegin(GL_QUADS); <br>  glColor3f(1, 1, 1); <br>  glVertex3f(-radius, -radius, .01); <br>  glVertex3f(radius, -radius, .01); <br>  glVertex3f(radius, radius, .01); <br>  glVertex3f(-radius, radius, .01); <br>  glEnd(); <br>} <br> <br>void Telescope::draw_body()  <br>{ <br>  Color c; <br>   <br>  glPushMatrix(); <br> <br>  glColor3f(1, 1, 0); <br>  gluDisk(disk, radius, 1.1 * radius, divisions, 1); <br>  gluCylinder(cylinder, 1.1 * radius, 1.1 * radius, .1 * radius, divisions, 1); <br>  glTranslatef(0, 0, .1*radius); <br>  gluDisk(disk, radius, 1.1 * radius, divisions, 1); <br> <br>  glPushAttrib(GL_ENABLE_BIT); <br>  glDisable(GL_TEXTURE_2D); <br>  glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, white.c); <br>  glColor3f(0, 0, 0); <br>  gluCylinder(cylinder, 1.05 * radius, .95 * radius, .25, divisions, 1); <br>  glPopAttrib(); <br> <br>  /* Would just do this with a push / pop, but that seems to be broken. <br>   * glGetMaterialfv also seems to be broken, so we can't use that either. */ <br>  glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, black.c); <br> <br>  glTranslatef(0, 0, .25); <br>  glColor3f(1, 1, 0); <br>  gluDisk(disk, .95 * radius, 1.05 * radius, divisions, 1); <br>  gluCylinder(cylinder, 1.05 * radius, 1.05 * radius, .1 * radius,  <br>      divisions, 1); <br>  glTranslatef(0, 0, .1*radius); <br>  gluDisk(disk, .95 * radius, 1.05 * radius, divisions, 1); <br> <br>  glPopMatrix(); <br>} <br> <br>void Telescope::draw_takedown() <br>{ <br>  glMatrixMode(GL_PROJECTION); <br>  glPopMatrix(); <br>  glMatrixMode(GL_MODELVIEW); <br>  glPopMatrix(); <br>} <br> <br>void Telescope::draw_lens() <br>{ <br>  gluDisk(disk, 0, radius, divisions, 1); <br>} <br> <br>void Telescope::set_divisions(int d) <br>{ <br>  // Someday we'll put all the quadric stuff in display lists... <br>  divisions = d; <br>} <br> <br>int Telescope::get_divisions() <br>{ <br>  return divisions; <br>} <br> <br>void Telescope::set_radius(GLfloat r) <br>{ <br>  // Someday this might have to update some display lists <br>  radius = r; <br>} <br> <br>GLfloat Telescope::get_radius() <br>{ <br>  return radius; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

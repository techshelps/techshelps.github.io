<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TWAVE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3678"></a>TWAVE.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br>#define PI 3.14159265358979323846 <br> <br>#define GETCOORD(frame, x, y) (&amp;(theMesh.coords[frame*theMesh.numCoords+(x)+(y)*(theMesh.widthX+1)])) <br>#define GETFACET(frame, x, y) (&amp;(theMesh.facets[frame*theMesh.numFacets+(x)+(y)*theMesh.widthX])) <br> <br>static void CALLBACK Animate(void ); <br>static void SetColorMap(void ); <br>static void InitMesh(void ); <br>static void InitMaterials(void ); <br>static void InitTexture(void ); <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Key_c(void ); <br>static void CALLBACK Key_s(void ); <br>static void CALLBACK Key_l(void ); <br>static void CALLBACK Key_d(void ); <br>static void CALLBACK Key_SPACE(void ); <br>static void CALLBACK Key_n(void ); <br>static void CALLBACK Key_a(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum rgb, doubleBuffer; <br> <br>GLint colorIndexes1[3]; <br>GLint colorIndexes2[3]; <br>GLenum clearMask = GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT; <br> <br>GLenum smooth = GL_TRUE; <br>GLenum lighting = GL_TRUE; <br>GLenum depth = GL_TRUE; <br>GLenum stepMode = GL_FALSE; <br>GLenum spinMode = GL_FALSE; <br>GLint contouring = 0; <br> <br>GLint widthX, widthY; <br>GLint checkerSize; <br>float height; <br> <br>GLint frames, curFrame = 0, nextFrame = 0; <br> <br>struct facet { <br>    float color[3]; <br>    float normal[3]; <br>}; <br>struct coord { <br>    float vertex[3]; <br>    float normal[3]; <br>}; <br>struct mesh { <br>    GLint widthX, widthY; <br>    GLint numFacets; <br>    GLint numCoords; <br>    GLint frames; <br>    struct coord *coords; <br>    struct facet *facets; <br>} theMesh; <br> <br>GLubyte contourTexture1[] = { <br>    255, 255, 255, 255, <br>    255, 255, 255, 255, <br>    255, 255, 255, 255, <br>    127, 127, 127, 127, <br>}; <br>GLubyte contourTexture2[] = { <br>    255, 255, 255, 255, <br>    255, 127, 127, 127, <br>    255, 127, 127, 127, <br>    255, 127, 127, 127, <br>}; <br> <br> <br>static void CALLBACK Animate(void) <br>{ <br>    struct coord *coord; <br>    struct facet *facet; <br>    float *lastColor; <br>    float *thisColor; <br>    GLint i, j; <br> <br>    glClear(clearMask); <br> <br>    if (nextFrame || !stepMode) { <br>    curFrame++; <br>    } <br>    if (curFrame &gt;= theMesh.frames) { <br>    curFrame = 0; <br>    } <br> <br>    if ((nextFrame || !stepMode) &amp;&amp; spinMode) { <br>    glRotatef(5.0, 0.0, 0.0, 1.0); <br>    } <br>    nextFrame = 0; <br> <br>    for (i = 0; i &lt; theMesh.widthX; i++) { <br>    glBegin(GL_QUAD_STRIP); <br>    lastColor = NULL; <br>    for (j = 0; j &lt; theMesh.widthY; j++) { <br>        facet = GETFACET(curFrame, i, j); <br>        if (!smooth &amp;&amp; lighting) { <br>        glNormal3fv(facet-&gt;normal); <br>        } <br>        if (lighting) { <br>        if (rgb) { <br>            thisColor = facet-&gt;color; <br>            glColor3fv(facet-&gt;color); <br>        } else { <br>            thisColor = facet-&gt;color; <br>            glMaterialfv(GL_FRONT_AND_BACK, GL_COLOR_INDEXES,  <br>                 facet-&gt;color); <br>        } <br>        } else { <br>        if (rgb) { <br>            thisColor = facet-&gt;color; <br>            glColor3fv(facet-&gt;color); <br>        } else { <br>            thisColor = facet-&gt;color; <br>            glIndexf(facet-&gt;color[1]); <br>        } <br>        } <br> <br>        if (!lastColor || (thisColor[0] != lastColor[0] &amp;&amp; smooth)) { <br>        if (lastColor) { <br>            glEnd(); <br>            glBegin(GL_QUAD_STRIP); <br>        } <br>        coord = GETCOORD(curFrame, i, j); <br>        if (smooth &amp;&amp; lighting) { <br>            glNormal3fv(coord-&gt;normal); <br>        } <br>        glVertex3fv(coord-&gt;vertex); <br> <br>        coord = GETCOORD(curFrame, i+1, j); <br>        if (smooth &amp;&amp; lighting) { <br>            glNormal3fv(coord-&gt;normal); <br>        } <br>        glVertex3fv(coord-&gt;vertex); <br>        } <br> <br>        coord = GETCOORD(curFrame, i, j+1); <br>        if (smooth &amp;&amp; lighting) { <br>        glNormal3fv(coord-&gt;normal); <br>        } <br>        glVertex3fv(coord-&gt;vertex); <br> <br>        coord = GETCOORD(curFrame, i+1, j+1); <br>        if (smooth &amp;&amp; lighting) { <br>        glNormal3fv(coord-&gt;normal); <br>        } <br>        glVertex3fv(coord-&gt;vertex); <br> <br>        lastColor = thisColor; <br>    } <br>    glEnd(); <br>    } <br> <br>    glFlush(); <br>    if (doubleBuffer) { <br>    auxSwapBuffers(); <br>    } <br>} <br> <br>static void SetColorMap(void)  <br>{ <br>    static float green[3] = {0.2, 1.0, 0.2}; <br>    static float red[3] = {1.0, 0.2, 0.2}; <br>    float *color, percent; <br>    GLint *indexes, entries, i, j; <br> <br>    entries = auxGetColorMapSize(); <br> <br>    colorIndexes1[0] = 1; <br>    colorIndexes1[1] = 1 + (GLint)((entries - 1) * 0.3); <br>    colorIndexes1[2] = (GLint)((entries - 1) * 0.5); <br>    colorIndexes2[0] = 1 + (GLint)((entries - 1) * 0.5); <br>    colorIndexes2[1] = 1 + (GLint)((entries - 1) * 0.8); <br>    colorIndexes2[2] = entries - 1; <br> <br>    for (i = 0; i &lt; 2; i++) { <br>    switch (i) { <br>      case 0: <br>        color = green; <br>        indexes = colorIndexes1; <br>        break; <br>      case 1: <br>        color = red; <br>        indexes = colorIndexes2; <br>        break; <br>    } <br> <br>    for (j = indexes[0]; j &lt; indexes[1]; j++) { <br>        percent = 0.2 + 0.8 * (j - indexes[0]) / <br>              (float)(indexes[1] - indexes[0]); <br>        auxSetOneColor(j, percent*color[0], percent*color[1], <br>               percent*color[2]); <br>    } <br>    for (j=indexes[1]; j&lt;=indexes[2]; j++) { <br>        percent = (j - indexes[1]) / (float)(indexes[2] - indexes[1]); <br>        auxSetOneColor(j, percent*(1-color[0])+color[0], <br>               percent*(1-color[1])+color[1], <br>               percent*(1-color[2])+color[2]); <br>    } <br>    } <br>} <br> <br>static void InitMesh(void) <br>{ <br>    struct coord *coord; <br>    struct facet *facet; <br>    float dp1[3], dp2[3]; <br>    float *pt1, *pt2, *pt3; <br>    float angle, d, x, y; <br>    GLint numFacets, numCoords, frameNum, i, j; <br> <br>    theMesh.widthX = widthX; <br>    theMesh.widthY = widthY; <br>    theMesh.frames = frames; <br> <br>    numFacets = widthX * widthY; <br>    numCoords = (widthX + 1) * (widthY + 1); <br> <br>    theMesh.numCoords = numCoords; <br>    theMesh.numFacets = numFacets; <br> <br>    theMesh.coords = (struct coord *)malloc(frames*numCoords* <br>                        sizeof(struct coord)); <br>    theMesh.facets = (struct facet *)malloc(frames*numFacets* <br>                        sizeof(struct facet)); <br>    if (theMesh.coords == NULL || theMesh.facets == NULL) { <br>    //printf("Out of memory.\n"); <br>    auxQuit(); <br>    } <br> <br>    for (frameNum = 0; frameNum &lt; frames; frameNum++) { <br>    for (i = 0; i &lt;= widthX; i++) { <br>        x = i / (float)widthX; <br>        for (j = 0; j &lt;= widthY; j++) { <br>        y = j / (float)widthY; <br> <br>        d = sqrt(x*x+y*y); <br>        if (d == 0.0) { <br>            d = 0.0001; <br>        } <br>        angle = 2 * PI * d + (2 * PI / frames * frameNum); <br> <br>        coord = GETCOORD(frameNum, i, j); <br> <br>        coord-&gt;vertex[0] = x - 0.5; <br>        coord-&gt;vertex[1] = y - 0.5; <br>        coord-&gt;vertex[2] = (height - height * d) * cos(angle); <br> <br>        coord-&gt;normal[0] = -(height / d) * x * ((1 - d) * 2 * PI * <br>                   sin(angle) + cos(angle)); <br>        coord-&gt;normal[1] = -(height / d) * y * ((1 - d) * 2 * PI * <br>                   sin(angle) + cos(angle)); <br>        coord-&gt;normal[2] = -1; <br> <br>        d = 1.0 / sqrt(coord-&gt;normal[0]*coord-&gt;normal[0]+ <br>                   coord-&gt;normal[1]*coord-&gt;normal[1]+1); <br>        coord-&gt;normal[0] *= d; <br>        coord-&gt;normal[1] *= d; <br>        coord-&gt;normal[2] *= d; <br>        } <br>    } <br>    for (i = 0; i &lt; widthX; i++) { <br>        for (j = 0; j &lt; widthY; j++) { <br>        facet = GETFACET(frameNum, i, j); <br>        if (((i/checkerSize)%2)^(j/checkerSize)%2) { <br>            if (rgb) { <br>            facet-&gt;color[0] = 1.0; <br>            facet-&gt;color[1] = 0.2; <br>            facet-&gt;color[2] = 0.2; <br>            } else { <br>            facet-&gt;color[0] = colorIndexes1[0]; <br>            facet-&gt;color[1] = colorIndexes1[1]; <br>            facet-&gt;color[2] = colorIndexes1[2]; <br>            } <br>        } else { <br>            if (rgb) { <br>            facet-&gt;color[0] = 0.2; <br>            facet-&gt;color[1] = 1.0; <br>            facet-&gt;color[2] = 0.2; <br>            } else { <br>            facet-&gt;color[0] = colorIndexes2[0]; <br>            facet-&gt;color[1] = colorIndexes2[1]; <br>            facet-&gt;color[2] = colorIndexes2[2]; <br>            } <br>        } <br>        pt1 = GETCOORD(frameNum, i, j)-&gt;vertex; <br>        pt2 = GETCOORD(frameNum, i, j+1)-&gt;vertex; <br>        pt3 = GETCOORD(frameNum, i+1, j+1)-&gt;vertex; <br> <br>        dp1[0] = pt2[0] - pt1[0]; <br>        dp1[1] = pt2[1] - pt1[1]; <br>        dp1[2] = pt2[2] - pt1[2]; <br> <br>        dp2[0] = pt3[0] - pt2[0]; <br>        dp2[1] = pt3[1] - pt2[1]; <br>        dp2[2] = pt3[2] - pt2[2]; <br> <br>        facet-&gt;normal[0] = dp1[1] * dp2[2] - dp1[2] * dp2[1]; <br>        facet-&gt;normal[1] = dp1[2] * dp2[0] - dp1[0] * dp2[2]; <br>        facet-&gt;normal[2] = dp1[0] * dp2[1] - dp1[1] * dp2[0]; <br> <br>        d = 1.0 / sqrt(facet-&gt;normal[0]*facet-&gt;normal[0]+ <br>                   facet-&gt;normal[1]*facet-&gt;normal[1]+ <br>                   facet-&gt;normal[2]*facet-&gt;normal[2]); <br> <br>        facet-&gt;normal[0] *= d; <br>        facet-&gt;normal[1] *= d; <br>        facet-&gt;normal[2] *= d; <br>        } <br>    } <br>    } <br>} <br> <br>static void InitMaterials(void) <br>{ <br>    static float ambient[] = {0.1, 0.1, 0.1, 1.0}; <br>    static float diffuse[] = {0.5, 1.0, 1.0, 1.0}; <br>    static float position[] = {90.0, 90.0, 150.0, 0.0}; <br>    static float front_mat_shininess[] = {60.0}; <br>    static float front_mat_specular[] = {0.2, 0.2, 0.2, 1.0}; <br>    static float front_mat_diffuse[] = {0.5, 0.28, 0.38, 1.0}; <br>    static float back_mat_shininess[] = {60.0}; <br>    static float back_mat_specular[] = {0.5, 0.5, 0.2, 1.0}; <br>    static float back_mat_diffuse[] = {1.0, 1.0, 0.2, 1.0}; <br>    static float lmodel_ambient[] = {1.0, 1.0, 1.0, 1.0}; <br>    static float lmodel_twoside[] = {GL_TRUE}; <br> <br>    glMatrixMode(GL_PROJECTION); <br>    gluPerspective(450, 1.0, 0.5, 10.0); <br> <br>    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient); <br>    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse); <br>    glLightfv(GL_LIGHT0, GL_POSITION, position); <br>    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient); <br>    glLightModelfv(GL_LIGHT_MODEL_TWO_SIDE, lmodel_twoside); <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>     <br>    glMaterialfv(GL_FRONT, GL_SHININESS, front_mat_shininess); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, front_mat_specular); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, front_mat_diffuse); <br>    glMaterialfv(GL_BACK, GL_SHININESS, back_mat_shininess); <br>    glMaterialfv(GL_BACK, GL_SPECULAR, back_mat_specular); <br>    glMaterialfv(GL_BACK, GL_DIFFUSE, back_mat_diffuse); <br>    if (rgb) { <br>    glColorMaterial(GL_FRONT_AND_BACK, GL_DIFFUSE); <br>    } <br> <br>    if (rgb) { <br>    glEnable(GL_COLOR_MATERIAL); <br>    } else { <br>    SetColorMap(); <br>    } <br>} <br> <br>static void InitTexture(void) <br>{ <br> <br>    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT); <br>    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT); <br>    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST); <br>    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST); <br>    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE); <br>} <br> <br>static void Init(void) <br>{ <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br> <br>    glShadeModel(GL_SMOOTH); <br>     <br>    glFrontFace(GL_CW); <br> <br>    glDepthFunc(GL_LEQUAL); <br>    glEnable(GL_DEPTH_TEST); <br> <br>    InitMaterials(); <br>    InitTexture(); <br>    InitMesh(); <br> <br>    glMatrixMode(GL_MODELVIEW); <br>    glTranslatef(0.0, 0.4, -1.8); <br>    glScalef(2.0, 2.0, 2.0); <br>    glRotatef(-35.0, 1.0, 0.0, 0.0); <br>    glRotatef(35.0, 0.0, 0.0, 1.0); <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    glViewport(0, 0, (GLint)width, (GLint)height); <br>} <br> <br>static void CALLBACK Key_c(void) <br>{ <br>    contouring++; <br>    if (contouring == 1) { <br>        static GLfloat map[4] = {0, 0, 20, 0}; <br> <br>        glTexImage2D(GL_TEXTURE_2D, 0, 3, 4, 4, 0, GL_LUMINANCE, <br>             GL_UNSIGNED_BYTE, (GLvoid *)contourTexture1); <br>        glTexGeni(GL_S, GL_TEXTURE_GEN_MODE, GL_OBJECT_LINEAR); <br>        glTexGeni(GL_T, GL_TEXTURE_GEN_MODE, GL_OBJECT_LINEAR); <br>        glTexGenfv(GL_S, GL_OBJECT_PLANE, map); <br>        glTexGenfv(GL_T, GL_OBJECT_PLANE, map); <br>        glEnable(GL_TEXTURE_2D); <br>        glEnable(GL_TEXTURE_GEN_S); <br>        glEnable(GL_TEXTURE_GEN_T); <br>    } else if (contouring == 2) { <br>        static GLfloat map[4] = {0, 0, 20, 0}; <br> <br>        glTexGeni(GL_S, GL_TEXTURE_GEN_MODE, GL_EYE_LINEAR); <br>        glTexGeni(GL_T, GL_TEXTURE_GEN_MODE, GL_EYE_LINEAR); <br>        glPushMatrix(); <br>        glMatrixMode(GL_MODELVIEW); <br>        glLoadIdentity(); <br>        glTexGenfv(GL_S, GL_EYE_PLANE, map); <br>        glTexGenfv(GL_T, GL_EYE_PLANE, map); <br>        glPopMatrix(); <br>    } else { <br>        contouring = 0; <br>        glDisable(GL_TEXTURE_GEN_S); <br>        glDisable(GL_TEXTURE_GEN_T); <br>        glDisable(GL_TEXTURE_2D); <br>    } <br>} <br> <br>static void CALLBACK Key_s(void) <br>{ <br>    smooth = !smooth; <br>    if (smooth) { <br>        glShadeModel(GL_SMOOTH); <br>    } else { <br>        glShadeModel(GL_FLAT); <br>    } <br>} <br> <br>static void CALLBACK Key_l(void) <br>{ <br>    lighting = !lighting; <br>    if (lighting) { <br>        glEnable(GL_LIGHTING); <br>        glEnable(GL_LIGHT0); <br>        if (rgb) { <br>        glEnable(GL_COLOR_MATERIAL); <br>        } <br>    } else { <br>        glDisable(GL_LIGHTING); <br>        glDisable(GL_LIGHT0); <br>        if (rgb) { <br>        glDisable(GL_COLOR_MATERIAL); <br>        } <br>    } <br>} <br> <br>static void CALLBACK Key_d(void) <br>{ <br>    depth = !depth; <br>    if (depth) { <br>        glEnable(GL_DEPTH_TEST); <br>        clearMask |= GL_DEPTH_BUFFER_BIT; <br>    } else { <br>        glDisable(GL_DEPTH_TEST); <br>        clearMask &amp;= ~GL_DEPTH_BUFFER_BIT; <br>    } <br>} <br> <br>static void CALLBACK Key_SPACE(void) <br>{ <br>    stepMode = !stepMode; <br> <br>    if (stepMode) { <br>        auxIdleFunc(0); <br>/*      tkDisplayFunc(Animate); */ <br>    } else { <br>        auxIdleFunc(Animate); <br>/*      tkDisplayFunc(0);*/ <br>    } <br>} <br> <br>static void CALLBACK Key_n(void) <br>{ <br>    if (stepMode) { <br>        nextFrame = 1; <br>    } <br>} <br> <br>static void CALLBACK Key_a(void) <br>{ <br>    spinMode = !spinMode; <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    rgb = GL_TRUE; <br>    doubleBuffer = GL_TRUE; <br> <br> <br>    frames = 10; <br>    widthX = 10; <br>    widthY = 10; <br>    checkerSize = 2; <br>    height = 0.2; <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-ci") == 0) { <br>        rgb = GL_FALSE; <br>    } else if (strcmp(argv[i], "-rgb") == 0) { <br>        rgb = GL_TRUE; <br>    } else if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else if (strcmp(argv[i], "-grid") == 0) { <br>        if (i+2 &gt;= argc || argv[i+1][0] == '-' || argv[i+2][0] == '-') { <br>        //printf("-grid (No numbers).\n"); <br>        return GL_FALSE; <br>        } else { <br>        widthX = atoi(argv[++i]); <br>        widthY = atoi(argv[++i]); <br>        } <br>    } else if (strcmp(argv[i], "-size") == 0) { <br>        if (i+1 &gt;= argc || argv[i+1][0] == '-') { <br>        //printf("-checker (No number).\n"); <br>        return GL_FALSE; <br>        } else { <br>        checkerSize = atoi(argv[++i]); <br>        } <br>    } else if (strcmp(argv[i], "-wave") == 0) { <br>        if (i+1 &gt;= argc || argv[i+1][0] == '-') { <br>        //printf("-wave (No number).\n"); <br>        return GL_FALSE; <br>        } else { <br>        height = atof(argv[++i]); <br>        } <br>    } else if (strcmp(argv[i], "-frames") == 0) { <br>        if (i+1 &gt;= argc || argv[i+1][0] == '-') { <br>        //printf("-frames (No number).\n"); <br>        return GL_FALSE; <br>        } else { <br>        frames = atoi(argv[++i]); <br>        } <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br>    GLenum type; <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    auxInitPosition(0, 0, 300, 300); <br> <br>    type = AUX_DEPTH16; <br>    type |= (rgb) ? AUX_RGB : AUX_INDEX; <br>    type |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br> <br>    auxInitDisplayMode(type); <br> <br>    if (auxInitWindow("Wave Demo") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxKeyFunc(AUX_c, Key_c); <br>    auxKeyFunc(AUX_s, Key_s); <br>    auxKeyFunc(AUX_l, Key_l); <br>    auxKeyFunc(AUX_d, Key_d); <br>    auxKeyFunc(AUX_SPACE, Key_SPACE); <br>    auxKeyFunc(AUX_n, Key_n); <br>    auxKeyFunc(AUX_a, Key_a); <br>    auxIdleFunc(Animate); <br>    auxMainLoop(Animate); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

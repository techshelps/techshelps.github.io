<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TSTENCIL.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3674"></a>TSTENCIL.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Draw(void ); <br> <br> <br> <br>static void Init(void) <br>{ <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br> <br>    glClearStencil(0); <br>    glStencilMask(1); <br>    glEnable(GL_STENCIL_TEST); <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    glViewport(0, 0, (GLint)width, (GLint)height); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    glOrtho(-5.0, 5.0, -5.0, 5.0, -5.0, 5.0); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br> <br>    glClear(GL_COLOR_BUFFER_BIT|GL_STENCIL_BUFFER_BIT); <br> <br>    glStencilFunc(GL_ALWAYS, 1, 1); <br>    glStencilOp(GL_KEEP, GL_KEEP, GL_REPLACE); <br> <br>    glColor3ub(200, 0, 0); <br>    glBegin(GL_POLYGON);         <br>    glVertex3i(-4, -4, 0); <br>    glVertex3i( 4, -4, 0); <br>    glVertex3i( 0,  4, 0); <br>    glEnd(); <br> <br>    glStencilFunc(GL_EQUAL, 1, 1); <br>    glStencilOp(GL_INCR, GL_KEEP, GL_DECR); <br> <br>    glColor3ub(0, 200, 0); <br>    glBegin(GL_POLYGON); <br>    glVertex3i(3, 3, 0); <br>    glVertex3i(-3, 3, 0); <br>    glVertex3i(-3, -3, 0); <br>    glVertex3i(3, -3, 0); <br>    glEnd(); <br> <br>    glStencilFunc(GL_EQUAL, 1, 1); <br>    glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP); <br> <br>    glColor3ub(0, 0, 200); <br>    glBegin(GL_POLYGON); <br>    glVertex3i(3, 3, 0); <br>    glVertex3i(-3, 3, 0); <br>    glVertex3i(-3, -3, 0); <br>    glVertex3i(3, -3, 0); <br>    glEnd(); <br> <br>    glFlush(); <br>} <br> <br> <br>void main(int argc, char **argv) <br>{ <br>    GLenum type; <br> <br> <br>    auxInitPosition(0, 0, 300, 300); <br> <br>    type = AUX_RGB | AUX_SINGLE | AUX_STENCIL; <br> <br>    auxInitDisplayMode(type); <br> <br>    if (auxInitWindow("Stencil Test") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TACCUM.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3657"></a>TACCUM.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Key_1(void ); <br>static void CALLBACK Key_2(void ); <br>static void CALLBACK Draw(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum doubleBuffer, directRender; <br>GLint thing1, thing2; <br> <br> <br>static void Init(void) <br>{ <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br>    glClearAccum(0.0, 0.0, 0.0, 0.0); <br> <br>    thing1 = glGenLists(1); <br>    glNewList(thing1, GL_COMPILE); <br>    glColor3f(1.0, 0.0, 0.0); <br>    glRectf(-1.0, -1.0, 1.0, 0.0); <br>    glEndList(); <br> <br>    thing2 = glGenLists(1); <br>    glNewList(thing2, GL_COMPILE); <br>    glColor3f(0.0, 1.0, 0.0); <br>    glRectf(0.0, -1.0, 1.0, 1.0); <br>    glEndList(); <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    glViewport(0, 0, (GLint)width, (GLint)height); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    glMatrixMode(GL_MODELVIEW); <br>    glLoadIdentity(); <br>} <br> <br>static void CALLBACK Key_1(void) <br>{ <br>    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL); <br>} <br> <br>static void CALLBACK Key_2(void) <br>{ <br>    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE); <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br> <br>    glPushMatrix(); <br> <br>    glScalef(0.8, 0.8, 1.0); <br> <br>    glClear(GL_COLOR_BUFFER_BIT); <br>    glCallList(thing1); <br>    glAccum(GL_LOAD, 0.5); <br> <br>    glClear(GL_COLOR_BUFFER_BIT); <br>    glCallList(thing2); <br>    glAccum(GL_ACCUM, 0.5); <br> <br>    glAccum(GL_RETURN, 1.0); <br> <br>    glPopMatrix(); <br> <br>    glFlush(); <br> <br>    if (doubleBuffer) { <br>    auxSwapBuffers(); <br>    } <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    doubleBuffer = GL_FALSE; <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br>    GLenum type; <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    auxInitPosition(0, 0, 300, 300); <br> <br>    type = AUX_RGB | AUX_ACCUM; <br>    type |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br> <br>    auxInitDisplayMode(type); <br> <br>    if (auxInitWindow("Accum Test") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxKeyFunc(AUX_1, Key_1); <br>    auxKeyFunc(AUX_2, Key_2); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TSPEED.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3671"></a>TSPEED.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br>#ifdef __unix <br>#include &lt;sys/times.h&gt; <br>#include &lt;sys/param.h&gt; <br>#endif <br>#ifdef WIN32 <br>#include &lt;time.h&gt; <br>#endif <br> <br>#define GAP 10 <br>#define ROWS 1 <br>#define COLS 4 <br> <br>static void CALLBACK SetWindSize(int width,int height); <br>static void CALLBACK Key_a(void ); <br>static void CALLBACK Key_d(void ); <br>static void CALLBACK Key_f(void ); <br>static void CALLBACK Key_F(void ); <br>static void CALLBACK Key_s(void ); <br>static void CALLBACK Key_t(void ); <br>static void Viewport(GLint row, GLint column); <br>static double Now(void ); <br>static void Report(const char *msg,float elapsed); <br>static void Points(void ); <br>static void Lines(void ); <br>static void Triangles(void ); <br>static void Rects(void ); <br>static void CALLBACK Draw(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum rgb, doubleBuffer, windType; <br>GLint windW, windH; <br> <br>GLint boxW, boxH; <br> <br>GLenum antialiasing = GL_FALSE; <br>GLenum depthTesting = GL_FALSE; <br>GLenum fogging = GL_FALSE, niceFogging = GL_FALSE; <br>GLenum lighting = GL_FALSE; <br>GLenum shading = GL_FALSE; <br>GLenum texturing = GL_FALSE; <br> <br>GLint repeatCount = 100; <br>GLint loopCount = 10; <br> <br>GLubyte texture[4*3] = { <br>    0xFF, 0, 0, 0, 0, 0, <br>    0, 0, 0, 0, 0xFF, 0, <br>}; <br> <br> <br>static void CALLBACK SetWindSize(int width, int height) <br>{ <br> <br>    windW = (GLint)width; <br>    windH = (GLint)height; <br>} <br> <br>static void CALLBACK Key_a(void) <br>{ <br>    antialiasing = !antialiasing; <br>} <br> <br>static void CALLBACK Key_d(void) <br>{ <br>    depthTesting = !depthTesting; <br>} <br> <br>static void CALLBACK Key_f(void) <br>{ <br>    fogging = !fogging; <br>} <br> <br>static void CALLBACK Key_F(void) <br>{ <br>    niceFogging = !niceFogging; <br>} <br> <br>static void CALLBACK Key_s(void) <br>{ <br>    shading = !shading; <br>} <br> <br>static void CALLBACK Key_t(void) <br>{ <br>    texturing = !texturing; <br>} <br> <br>static void Viewport(GLint row, GLint column) <br>{ <br>    GLint x, y; <br> <br>    boxW = (windW - (COLS + 1) * GAP) / COLS; <br>    boxH = (windH - (ROWS + 1) * GAP) / ROWS; <br> <br>    x = GAP + column * (boxW + GAP); <br>    y = GAP + row * (boxH + GAP); <br> <br>    glViewport(x, y, boxW, boxH); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluOrtho2D(-boxW/2, boxW/2, -boxH/2, boxH/2); <br>    glMatrixMode(GL_MODELVIEW); <br> <br>    glEnable(GL_SCISSOR_TEST); <br>    glScissor(x, y, boxW, boxH); <br>} <br> <br>static double Now(void) <br>{ <br>#ifdef __unix <br>    struct tms tm; <br>    clock_t clk; <br> <br>    clk = times(&amp;tm); <br>    return (double)clk / (double)HZ; <br>#else <br>#ifdef WIN32 <br>    long sec; <br> <br>    sec = time(NULL); <br>    return(sec); <br>#else <br>    return 0; <br>#endif <br>#endif <br>} <br> <br>static void Report(const char *msg, float elapsed) <br>{ <br> <br>    if (elapsed == 0.0) { <br>    printf("%s per second: Unknown, elapsed time is zero\n", msg); <br>    } else { <br>    printf("%s per second: %g\n", msg, repeatCount*loopCount/elapsed); <br>    } <br>} <br> <br>static void Points(void) <br>{ <br>    GLint i, j; <br>    float v1[3]; <br>    double start; <br> <br>    start = Now(); <br>    for (i = 0; i &lt; repeatCount; i++) { <br>    v1[0] = 10; <br>    v1[1] = 10; <br>    v1[2] = 10; <br>    glBegin(GL_POINTS); <br>        for (j = 0; j &lt; loopCount; j++) { <br>        glVertex2fv(v1); <br>        } <br>    glEnd(); <br>    } <br>    glFinish(); <br>    //Report("Points", Now()-start); <br>} <br> <br>static void Lines(void) <br>{ <br>    GLint i, j; <br>    float v1[3], v2[3]; <br>    double start; <br> <br>    start = Now(); <br>    for (i = 0; i &lt; repeatCount; i++) { <br>    v1[0] = 10; <br>    v1[1] = 10; <br>    v1[2] = 10; <br>    v2[0] = 20; <br>    v2[1] = 20; <br>    v2[2] = 10; <br>    glBegin(GL_LINES); <br>        for (j = 0; j &lt; loopCount; j++) { <br>        glVertex2fv(v1); <br>        glVertex2fv(v2); <br>        } <br>    glEnd(); <br>    } <br>    glFinish(); <br>    //Report("Lines", Now()-start); <br>} <br> <br>static void Triangles(void) <br>{ <br>    GLint i, j; <br>    float v1[3], v2[3], v3[3], t1[2], t2[2], t3[2]; <br>    double start; <br> <br>    start = Now(); <br> <br>    v1[0] = 10; <br>    v1[1] = 10; <br>    v1[2] = 10; <br>    v2[0] = 20; <br>    v2[1] = 20; <br>    v2[2] = 10; <br>    v3[0] = 10; <br>    v3[1] = 20; <br>    v3[2] = 10; <br> <br>    t1[0] = 0; <br>    t1[1] = 0; <br>    t2[0] = 1; <br>    t2[1] = 1; <br>    t3[0] = 0; <br>    t3[1] = 1; <br> <br>    for (i = 0; i &lt; repeatCount; i++) { <br>    glBegin(GL_TRIANGLES); <br>        for (j = 0; j &lt; loopCount; j++) { <br>        if (texturing) { <br>            glTexCoord2fv(t1); <br>        } <br>        glVertex2fv(v1); <br>        if (texturing) { <br>            glTexCoord2fv(t2); <br>        } <br>        glVertex2fv(v2); <br>        if (texturing) { <br>            glTexCoord2fv(t3); <br>        } <br>        glVertex2fv(v3); <br>        } <br>    glEnd(); <br>    } <br>    glFinish(); <br>    //Report("Triangles", Now()-start); <br>} <br> <br>static void Rects(void) <br>{ <br>    GLint i, j; <br>    float v1[2], v2[2]; <br>    double start; <br> <br>    start = Now(); <br>    for (i = 0; i &lt; repeatCount; i++) { <br>    v1[0] = 10; <br>    v1[1] = 10; <br>    v2[0] = 20; <br>    v2[1] = 20; <br>    for (j = 0; j &lt; loopCount; j++) { <br>        glRectfv(v1, v2); <br>    } <br>    } <br>    glFinish(); <br>    //Report("Rects", Now()-start); <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br>    glDisable(GL_SCISSOR_TEST); <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br>    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT); <br> <br>    AUX_SETCOLOR(windType, AUX_YELLOW); <br> <br>    if (antialiasing) { <br>    glBlendFunc(GL_SRC_ALPHA, GL_ZERO); <br>    glEnable(GL_BLEND); <br> <br>    glEnable(GL_POINT_SMOOTH); <br>    glEnable(GL_LINE_SMOOTH); <br>    glEnable(GL_POLYGON_SMOOTH); <br>    } <br>    if (depthTesting) { <br>    glEnable(GL_DEPTH_TEST); <br>    } <br>    if (fogging) { <br>    glEnable(GL_FOG); <br>    glHint(GL_FOG_HINT, (niceFogging) ? GL_NICEST : GL_FASTEST); <br>    } <br>    if (lighting) { <br>    static GLfloat ambient[4] = {1, 0.5, 0.5, 0}; <br> <br>    glEnable(GL_NORMALIZE); <br>    glNormal3f(1.0, 1.0, 1.0); <br>    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, ambient); <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>    } <br>    (shading) ? glShadeModel(GL_SMOOTH) : glShadeModel(GL_FLAT); <br>    if (texturing) { <br>    static GLfloat modulate[1] = {GL_DECAL}; <br>    static GLfloat clamp[1] = {GL_CLAMP}; <br>    static GLfloat linear[1] = {GL_LINEAR}; <br> <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br>    glTexImage2D(GL_TEXTURE_2D, 0, 3, 2, 2, 0, GL_RGB, GL_UNSIGNED_BYTE, <br>             (GLvoid *)texture); <br>    glTexEnvfv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, modulate); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, clamp); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, clamp); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, linear); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, linear); <br>    glEnable(GL_TEXTURE_2D); <br>    } <br> <br>    Viewport(0, 0); Points(); <br>    Viewport(0, 1); Lines(); <br>    Viewport(0, 2); Triangles(); <br>    Viewport(0, 3); Rects(); <br> <br>    glFlush(); <br> <br>    if (doubleBuffer) { <br>    auxSwapBuffers(); <br>    } <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    rgb = GL_TRUE; <br>    doubleBuffer = GL_FALSE; <br> <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-ci") == 0) { <br>        rgb = GL_FALSE; <br>    } else if (strcmp(argv[i], "-rgb") == 0) { <br>        rgb = GL_TRUE; <br>    } else if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    windW = 600; <br>    windH = 300; <br>    auxInitPosition(0, 0, windW, windH); <br> <br>    windType = AUX_DEPTH16; <br>    windType |= (rgb) ? AUX_RGB : AUX_INDEX; <br>    windType |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br> <br>    auxInitDisplayMode(windType); <br> <br>    if (auxInitWindow("Speed Test") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    auxExposeFunc((AUXEXPOSEPROC)SetWindSize); <br>    auxReshapeFunc((AUXRESHAPEPROC)SetWindSize); <br>    auxKeyFunc(AUX_a, Key_a); <br>    auxKeyFunc(AUX_d, Key_d); <br>    auxKeyFunc(AUX_f, Key_f); <br>    auxKeyFunc(AUX_F, Key_F); <br>    auxKeyFunc(AUX_s, Key_s); <br>    auxKeyFunc(AUX_t, Key_t); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

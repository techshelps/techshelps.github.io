<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TTEXTURE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3676"></a>TTEXTURE.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br>static void BuildCube(void ); <br>static void BuildLists(void ); <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Key_LEFT(void ); <br>static void CALLBACK Key_RIGHT(void ); <br>static void CALLBACK Key_UP(void ); <br>static void CALLBACK Key_DOWN(void ); <br>static void CALLBACK Key_T(void ); <br>static void CALLBACK Key_t(void ); <br>static void CALLBACK Key_s(void ); <br>static void CALLBACK Key_0(void ); <br>static void CALLBACK Key_1(void ); <br>static void CALLBACK Key_2(void ); <br>static void CALLBACK Key_3(void ); <br>static void CALLBACK Key_4(void ); <br>static void CALLBACK Key_5(void ); <br>static void CALLBACK Key_6(void ); <br>static void CALLBACK Key_7(void ); <br>static void CALLBACK Draw(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum doubleBuffer; <br> <br>char *texFileName = 0; <br>AUX_RGBImageRec *image; <br> <br>float *minFilter, *magFilter, *sWrapMode, *tWrapMode; <br>float decal[] = {GL_DECAL}; <br>float modulate[] = {GL_MODULATE}; <br>float repeat[] = {GL_REPEAT}; <br>float clamp[] = {GL_CLAMP}; <br>float nr[] = {GL_NEAREST}; <br>float ln[] = {GL_LINEAR}; <br>float nr_mipmap_nr[] = {GL_NEAREST_MIPMAP_NEAREST}; <br>float nr_mipmap_ln[] = {GL_NEAREST_MIPMAP_LINEAR}; <br>float ln_mipmap_nr[] = {GL_LINEAR_MIPMAP_NEAREST}; <br>float ln_mipmap_ln[] = {GL_LINEAR_MIPMAP_LINEAR}; <br>GLint sphereMap[] = {GL_SPHERE_MAP}; <br> <br>GLenum doSphere = GL_FALSE; <br>float xRotation = 0.0, yRotation = 0.0, zTranslate = -3.125; <br> <br>GLint cube; <br>float c[6][4][3] = { <br>    { <br>    { <br>        1.0, 1.0, -1.0 <br>    }, <br>    { <br>        -1.0, 1.0, -1.0 <br>    }, <br>    { <br>        -1.0, -1.0, -1.0 <br>    }, <br>    { <br>        1.0, -1.0, -1.0 <br>    } <br>    }, <br>    { <br>    { <br>        1.0, 1.0, 1.0 <br>    }, <br>    { <br>        1.0, 1.0, -1.0 <br>    }, <br>    { <br>        1.0, -1.0, -1.0 <br>    }, <br>    { <br>        1.0, -1.0, 1.0 <br>    } <br>    }, <br>    { <br>    { <br>        -1.0, 1.0, 1.0 <br>    }, <br>    { <br>        1.0, 1.0, 1.0 <br>    }, <br>    { <br>        1.0, -1.0, 1.0 <br>    }, <br>    { <br>        -1.0, -1.0, 1.0 <br>    } <br>    }, <br>    { <br>    { <br>        -1.0, 1.0, -1.0 <br>    }, <br>    { <br>        -1.0, 1.0, 1.0 <br>    }, <br>    { <br>        -1.0, -1.0, 1.0 <br>    }, <br>    { <br>        -1.0, -1.0, -1.0 <br>    } <br>    }, <br>    { <br>    { <br>        -1.0, 1.0, 1.0 <br>    }, <br>    { <br>        -1.0, 1.0, -1.0 <br>    }, <br>    { <br>        1.0, 1.0, -1.0 <br>    }, <br>    { <br>        1.0, 1.0, 1.0 <br>    } <br>    }, <br>    { <br>    { <br>        -1.0, -1.0, -1.0 <br>    }, <br>    { <br>        -1.0, -1.0, 1.0 <br>    }, <br>    { <br>        1.0, -1.0, 1.0 <br>    }, <br>    { <br>        1.0, -1.0, -1.0 <br>    } <br>    } <br>}; <br>static float n[6][3] = { <br>    { <br>    0.0, 0.0, -1.0 <br>    }, <br>    { <br>    1.0, 0.0, 0.0 <br>    }, <br>    { <br>    0.0, 0.0, 1.0 <br>    }, <br>    { <br>    -1.0, 0.0, 0.0 <br>    }, <br>    { <br>    0.0, 1.0, 0.0 <br>    }, <br>    { <br>    0.0, -1.0, 0.0 <br>    } <br>}; <br>static float t[6][4][2] = { <br>    { <br>    { <br>        1.1,  1.1 <br>    }, <br>    { <br>        -0.1, 1.1 <br>    }, <br>    { <br>        -0.1, -0.1 <br>    }, <br>    { <br>        1.1,  -0.1 <br>    } <br>    }, <br>    { <br>    { <br>        1.1,  1.1 <br>    }, <br>    { <br>        -0.1, 1.1 <br>    }, <br>    { <br>        -0.1, -0.1 <br>    }, <br>    { <br>        1.1,  -0.1 <br>    } <br>    }, <br>    { <br>    { <br>        -0.1,  1.1 <br>    }, <br>    { <br>        1.1, 1.1 <br>    }, <br>    { <br>        1.1, -0.1 <br>    }, <br>    { <br>        -0.1,  -0.1 <br>    } <br>    }, <br>    { <br>    { <br>        1.1,  1.1 <br>    }, <br>    { <br>        -0.1, 1.1 <br>    }, <br>    { <br>        -0.1, -0.1 <br>    }, <br>    { <br>        1.1,  -0.1 <br>    } <br>    }, <br>    { <br>    { <br>        1.1,  1.1 <br>    }, <br>    { <br>        -0.1, 1.1 <br>    }, <br>    { <br>        -0.1, -0.1 <br>    }, <br>    { <br>        1.1,  -0.1 <br>    } <br>    }, <br>    { <br>    { <br>        1.1,  1.1 <br>    }, <br>    { <br>        -0.1, 1.1 <br>    }, <br>    { <br>        -0.1, -0.1 <br>    }, <br>    { <br>        1.1,  -0.1 <br>    } <br>    }, <br>}; <br> <br> <br>static void BuildCube(void) <br>{ <br>    GLint i; <br> <br>    glNewList(cube, GL_COMPILE); <br>    for (i = 0; i &lt; 6; i++) { <br>    glBegin(GL_POLYGON); <br>        glNormal3fv(n[i]); glTexCoord2fv(t[i][0]); glVertex3fv(c[i][0]); <br>        glNormal3fv(n[i]); glTexCoord2fv(t[i][1]); glVertex3fv(c[i][1]); <br>        glNormal3fv(n[i]); glTexCoord2fv(t[i][2]); glVertex3fv(c[i][2]); <br>        glNormal3fv(n[i]); glTexCoord2fv(t[i][3]); glVertex3fv(c[i][3]); <br>    glEnd(); <br>    } <br>    glEndList(); <br>} <br> <br>static void BuildLists(void) <br>{ <br> <br>    cube = glGenLists(1); <br>    BuildCube(); <br>} <br> <br>static void Init(void) <br>{ <br> <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br>    gluBuild2DMipmaps(GL_TEXTURE_2D, 3, image-&gt;sizeX, image-&gt;sizeY, <br>              GL_RGB, GL_UNSIGNED_BYTE, image-&gt;data); <br>    glTexEnvfv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, decal); <br>    glEnable(GL_TEXTURE_2D); <br> <br>    glFrontFace(GL_CCW); <br>    glCullFace(GL_FRONT); <br>    glEnable(GL_CULL_FACE); <br> <br>    BuildLists(); <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br> <br>    magFilter = nr; <br>    minFilter = nr; <br>    sWrapMode = repeat; <br>    tWrapMode = repeat; <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    glViewport(0, 0, (GLint)width, (GLint)height); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluPerspective(145.0, 1.0, 0.01, 1000); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>static void CALLBACK Key_LEFT(void) <br>{ <br>    yRotation -= 0.5; <br>} <br> <br>static void CALLBACK Key_RIGHT(void) <br>{ <br>    yRotation += 0.5; <br>} <br> <br>static void CALLBACK Key_UP(void) <br>{ <br>    xRotation -= 0.5; <br>} <br> <br>static void CALLBACK Key_DOWN(void) <br>{ <br>    xRotation += 0.5; <br>} <br> <br>static void CALLBACK Key_T(void) <br>{ <br>    zTranslate += 0.25; <br>} <br> <br>static void CALLBACK Key_t(void) <br>{ <br>    zTranslate -= 0.25; <br>} <br> <br>static void CALLBACK Key_s(void) <br>{ <br>    doSphere = !doSphere; <br>    if (doSphere) { <br>        glTexGeniv(GL_S, GL_TEXTURE_GEN_MODE, sphereMap); <br>        glTexGeniv(GL_T, GL_TEXTURE_GEN_MODE, sphereMap); <br>        glEnable(GL_TEXTURE_GEN_S); <br>        glEnable(GL_TEXTURE_GEN_T); <br>    } else { <br>        glDisable(GL_TEXTURE_GEN_S); <br>        glDisable(GL_TEXTURE_GEN_T); <br>    } <br>} <br> <br>static void CALLBACK Key_0(void) <br>{ <br>    magFilter = nr; <br>} <br> <br>static void CALLBACK Key_1(void) <br>{ <br>    magFilter = ln; <br>} <br> <br>static void CALLBACK Key_2(void) <br>{ <br>    minFilter = nr; <br>} <br> <br>static void CALLBACK Key_3(void) <br>{ <br>    minFilter = ln; <br>} <br> <br>static void CALLBACK Key_4(void) <br>{ <br>    minFilter = nr_mipmap_nr; <br>} <br> <br>static void CALLBACK Key_5(void) <br>{ <br>    minFilter = nr_mipmap_ln; <br>} <br> <br>static void CALLBACK Key_6(void) <br>{ <br>    minFilter = ln_mipmap_nr; <br>} <br> <br>static void CALLBACK Key_7(void) <br>{ <br>    minFilter = ln_mipmap_ln; <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br> <br>    glClear(GL_COLOR_BUFFER_BIT); <br> <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, sWrapMode); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, tWrapMode); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, magFilter); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minFilter); <br> <br>    glPushMatrix(); <br> <br>    glTranslatef(0.0, 0.0, zTranslate); <br>    glRotatef(xRotation, 1, 0, 0); <br>    glRotatef(yRotation, 0, 1, 0); <br>    glCallList(cube); <br> <br>    glPopMatrix(); <br> <br>    glFlush(); <br> <br>    if (doubleBuffer) { <br>    auxSwapBuffers(); <br>    } <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    doubleBuffer = GL_FALSE; <br> <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else if (strcmp(argv[i], "-f") == 0) { <br>        if (i+1 &gt;= argc || argv[i+1][0] == '-') { <br>        //printf("-f (No file name).\n"); <br>        return GL_FALSE; <br>        } else { <br>        texFileName = argv[++i]; <br>        } <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br>    GLenum type; <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    if (texFileName == 0) { <br>    //printf("No image file.\n"); <br>    auxQuit(); <br>    } <br> <br>    image = auxRGBImageLoad(texFileName); <br> <br>    auxInitPosition(0, 0, 300, 300); <br> <br>    type = AUX_RGB; <br>    type |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br> <br>    auxInitDisplayMode(type); <br> <br>    if (auxInitWindow("Texture Test") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxKeyFunc(AUX_LEFT, Key_LEFT); <br>    auxKeyFunc(AUX_RIGHT, Key_RIGHT); <br>    auxKeyFunc(AUX_UP, Key_UP); <br>    auxKeyFunc(AUX_DOWN, Key_DOWN); <br>    auxKeyFunc(AUX_T, Key_T); <br>    auxKeyFunc(AUX_t, Key_t); <br>    auxKeyFunc(AUX_s, Key_s); <br>    auxKeyFunc(AUX_0, Key_0); <br>    auxKeyFunc(AUX_1, Key_1); <br>    auxKeyFunc(AUX_2, Key_2); <br>    auxKeyFunc(AUX_3, Key_3); <br>    auxKeyFunc(AUX_4, Key_4); <br>    auxKeyFunc(AUX_5, Key_5); <br>    auxKeyFunc(AUX_6, Key_6); <br>    auxKeyFunc(AUX_7, Key_7); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

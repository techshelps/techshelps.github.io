<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TPOINT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3667"></a>TPOINT.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br> <br>#define CI_RED AUX_RED <br>#define CI_ANTI_ALIAS_GREEN 16 <br>#define CI_ANTI_ALIAS_YELLOW 32 <br>#define CI_ANTI_ALIAS_RED 48 <br> <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Key_1(void ); <br>static void CALLBACK Key_W(void ); <br>static void CALLBACK Key_w(void ); <br>static void CALLBACK Key_LEFT(void ); <br>static void CALLBACK Key_RIGHT(void ); <br>static void CALLBACK Key_UP(void ); <br>static void CALLBACK Key_DOWN(void ); <br>static void CALLBACK Draw(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum rgb, doubleBuffer, windType; <br>GLint windW, windH; <br> <br>GLenum mode; <br>GLint size; <br>float point[3] = { <br>    1.0, 1.0, 0.0 <br>}; <br> <br> <br>static void Init(void) <br>{ <br>    GLint i; <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br> <br>    glBlendFunc(GL_SRC_ALPHA, GL_ZERO); <br> <br>    if (!rgb) { <br>    for (i = 0; i &lt; 16; i++) { <br>        auxSetOneColor(i+CI_ANTI_ALIAS_RED, i/15.0, 0.0, 0.0); <br>        auxSetOneColor(i+CI_ANTI_ALIAS_YELLOW, i/15.0, i/15.0, 0.0); <br>        auxSetOneColor(i+CI_ANTI_ALIAS_GREEN, 0.0, i/15.0, 0.0); <br>    } <br>    } <br> <br>    mode = GL_FALSE; <br>    size = 1; <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    windW = (GLint)width; <br>    windH = (GLint)height; <br> <br>    glViewport(0, 0, width, height); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluOrtho2D(-windW/2, windW/2, -windH/2, windH/2); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>static void CALLBACK Key_1(void) <br>{ <br>    mode = !mode; <br>} <br> <br>static void CALLBACK Key_W(void) <br>{ <br>    size++; <br>} <br> <br>static void CALLBACK Key_w(void) <br>{ <br>    size--; <br>    if (size &lt; 1) { <br>        size = 1; <br>    } <br>} <br> <br>static void CALLBACK Key_LEFT(void) <br>{ <br>    point[0] -= 0.25; <br>} <br> <br>static void CALLBACK Key_RIGHT(void) <br>{ <br>    point[0] += 0.25; <br>} <br> <br>static void CALLBACK Key_UP(void) <br>{ <br>    point[1] += 0.25; <br>} <br> <br>static void CALLBACK Key_DOWN(void) <br>{ <br>    point[1] -= 0.25; <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br> <br>    glClear(GL_COLOR_BUFFER_BIT); <br> <br>    AUX_SETCOLOR(windType, AUX_YELLOW); <br>    glBegin(GL_LINE_STRIP); <br>    glVertex2f(-windW/2, 0); <br>    glVertex2f(windW/2, 0); <br>    glEnd(); <br>    glBegin(GL_LINE_STRIP); <br>    glVertex2f(0, -windH/2); <br>    glVertex2f(0, windH/2); <br>    glEnd(); <br> <br>    if (mode) { <br>    glEnable(GL_BLEND); <br>    glEnable(GL_POINT_SMOOTH); <br>    } else { <br>    glDisable(GL_BLEND); <br>    glDisable(GL_POINT_SMOOTH); <br>    } <br> <br>    glPointSize(size); <br>    if (mode) { <br>    (rgb) ? glColor3f(1.0, 0.0, 0.0) : glIndexf(CI_ANTI_ALIAS_RED); <br>    } else { <br>    (rgb) ? glColor3f(1.0, 0.0, 0.0) : glIndexf(CI_RED); <br>    } <br>    glBegin(GL_POINTS); <br>    glVertex3fv(point); <br>    glEnd(); <br> <br>    glDisable(GL_POINT_SMOOTH); <br> <br>    glPointSize(1); <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br>    glBegin(GL_POINTS); <br>    glVertex3fv(point); <br>    glEnd(); <br> <br>    glFlush(); <br> <br>    if (doubleBuffer) { <br>    auxSwapBuffers(); <br>    } <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    rgb = GL_TRUE; <br>    doubleBuffer = GL_FALSE; <br> <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-ci") == 0) { <br>        rgb = GL_FALSE; <br>    } else if (strcmp(argv[i], "-rgb") == 0) { <br>        rgb = GL_TRUE; <br>    } else if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    windW = 300; <br>    windH = 300; <br>    auxInitPosition(0, 0, windW, windH); <br> <br>    windType |= (rgb) ? AUX_RGB : AUX_INDEX; <br>    windType |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br> <br>    auxInitDisplayMode(windType); <br> <br>    if (auxInitWindow("Point Test") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxKeyFunc(AUX_1, Key_1); <br>    auxKeyFunc(AUX_W, Key_W); <br>    auxKeyFunc(AUX_w, Key_w); <br>    auxKeyFunc(AUX_LEFT, Key_LEFT); <br>    auxKeyFunc(AUX_RIGHT, Key_RIGHT); <br>    auxKeyFunc(AUX_UP, Key_UP); <br>    auxKeyFunc(AUX_DOWN, Key_DOWN); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

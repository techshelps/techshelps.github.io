<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TNURB.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3666"></a>TNURB.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;GL/gl.h&gt; <br>#include &lt;GL/glu.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br>#define INREAL float <br> <br>#define S_NUMPOINTS 13 <br>#define S_ORDER     3    <br>#define S_NUMKNOTS  (S_NUMPOINTS + S_ORDER) <br>#define T_NUMPOINTS 3 <br>#define T_ORDER     3  <br>#define T_NUMKNOTS  (T_NUMPOINTS + T_ORDER) <br>#define SQRT_TWO    1.41421356237309504880 <br> <br>typedef INREAL Point[4]; <br> <br>static void CALLBACK ErrorCallback(GLenum which); <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Key_DOWN(void ); <br>static void CALLBACK Key_UP(void ); <br>static void CALLBACK Key_LEFT(void ); <br>static void CALLBACK Key_RIGHT(void ); <br>static void CALLBACK Draw(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum doubleBuffer; <br> <br>GLenum expectedError; <br>GLint rotX = 40, rotY = 40; <br>INREAL sknots[S_NUMKNOTS] = { <br>    -1.0, -1.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, <br>    4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 9.0, 9.0 <br>}; <br>INREAL tknots[T_NUMKNOTS] = { <br>    1.0, 1.0, 1.0, 2.0, 2.0, 2.0 <br>}; <br>Point ctlpoints[S_NUMPOINTS][T_NUMPOINTS] = { <br>    { <br>    { <br>        4.0, 2.0, 2.0, 1.0 <br>    }, <br>    { <br>        4.0, 1.6, 2.5, 1.0 <br>    }, <br>    { <br>        4.0, 2.0, 3.0, 1.0 <br>    } <br>    }, <br>    { <br>    { <br>        5.0, 4.0, 2.0, 1.0 <br>    }, <br>    { <br>        5.0, 4.0, 2.5, 1.0 <br>    }, <br>    { <br>        5.0, 4.0, 3.0, 1.0 <br>    } <br>    }, <br>    { <br>    { <br>        6.0, 5.0, 2.0, 1.0 <br>    }, <br>    { <br>        6.0, 5.0, 2.5, 1.0 <br>    }, <br>    { <br>        6.0, 5.0, 3.0, 1.0 <br>    } <br>    }, <br>    { <br>    { <br>        SQRT_TWO*6.0, SQRT_TWO*6.0, SQRT_TWO*2.0, SQRT_TWO <br>    }, <br>    { <br>        SQRT_TWO*6.0, SQRT_TWO*6.0, SQRT_TWO*2.5, SQRT_TWO <br>    }, <br>    { <br>        SQRT_TWO*6.0, SQRT_TWO*6.0, SQRT_TWO*3.0, SQRT_TWO <br>    }   <br>    }, <br>    { <br>    { <br>        5.2, 6.7, 2.0, 1.0 <br>    }, <br>    { <br>        5.2, 6.7, 2.5, 1.0 <br>    }, <br>    { <br>        5.2, 6.7, 3.0, 1.0 <br>    } <br>    }, <br>    { <br>    { <br>        SQRT_TWO*4.0, SQRT_TWO*6.0, SQRT_TWO*2.0, SQRT_TWO <br>    }, <br>    { <br>        SQRT_TWO*4.0, SQRT_TWO*6.0, SQRT_TWO*2.5, SQRT_TWO <br>    },  <br>    { <br>        SQRT_TWO*4.0, SQRT_TWO*6.0, SQRT_TWO*3.0, SQRT_TWO <br>    }   <br>    },  <br>    { <br>    { <br>        4.0, 5.2, 2.0, 1.0 <br>    }, <br>    { <br>        4.0, 4.6, 2.5, 1.0 <br>    }, <br>    { <br>        4.0, 5.2, 3.0, 1.0 <br>    }   <br>    }, <br>    { <br>    { <br>        SQRT_TWO*4.0, SQRT_TWO*6.0, SQRT_TWO*2.0, SQRT_TWO <br>    }, <br>    { <br>        SQRT_TWO*4.0, SQRT_TWO*6.0, SQRT_TWO*2.5, SQRT_TWO <br>    }, <br>    { <br>        SQRT_TWO*4.0, SQRT_TWO*6.0, SQRT_TWO*3.0, SQRT_TWO <br>    }   <br>    }, <br>    { <br>    { <br>        2.8, 6.7, 2.0, 1.0 <br>    }, <br>    { <br>        2.8, 6.7, 2.5, 1.0 <br>    }, <br>    { <br>        2.8, 6.7, 3.0, 1.0 <br>    }    <br>    }, <br>    { <br>    { <br>        SQRT_TWO*2.0, SQRT_TWO*6.0, SQRT_TWO*2.0, SQRT_TWO <br>    }, <br>    { <br>        SQRT_TWO*2.0, SQRT_TWO*6.0, SQRT_TWO*2.5, SQRT_TWO <br>    }, <br>    { <br>        SQRT_TWO*2.0, SQRT_TWO*6.0, SQRT_TWO*3.0, SQRT_TWO <br>    }   <br>    }, <br>    { <br>    { <br>        2.0, 5.0, 2.0, 1.0 <br>    }, <br>    { <br>        2.0, 5.0, 2.5, 1.0 <br>    }, <br>    { <br>        2.0, 5.0, 3.0, 1.0 <br>    }  <br>    }, <br>    { <br>    { <br>        3.0, 4.0, 2.0, 1.0 <br>    }, <br>    { <br>        3.0, 4.0, 2.5, 1.0 <br>    }, <br>    { <br>        3.0, 4.0, 3.0, 1.0 <br>    }  <br>    }, <br>    { <br>    { <br>        4.0, 2.0, 2.0, 1.0 <br>    }, <br>    { <br>        4.0, 1.6, 2.5, 1.0 <br>    }, <br>    { <br>        4.0, 2.0, 3.0, 1.0 <br>    }     <br>    } <br>}; <br>GLUnurbsObj *theNurbs; <br> <br> <br>static void CALLBACK ErrorCallback(GLenum which) <br>{ <br> <br>    if (which != expectedError) { <br>    fprintf(stderr, "Unexpected error occured (%d):\n", which); <br>    fprintf(stderr, "    %s\n", gluErrorString(which)); <br>    } <br>} <br> <br>static void Init(void) <br>{ <br> <br>    theNurbs = gluNewNurbsRenderer(); <br>    //gluNurbsCallback(theNurbs, GLU_ERROR, ErrorCallback); <br> <br>    gluNurbsProperty(theNurbs, GLU_SAMPLING_TOLERANCE, 15.0); <br>    gluNurbsProperty(theNurbs, GLU_DISPLAY_MODE, GLU_OUTLINE_PATCH); <br> <br>    expectedError = GLU_INVALID_ENUM; <br>    gluNurbsProperty(theNurbs, (GLenum)~0, 15.0); <br>    expectedError = GLU_NURBS_ERROR13; <br>    gluEndSurface(theNurbs); <br>    expectedError = 0; <br> <br>    glColor3f(1.0, 1.0, 1.0); <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    glViewport(0, 0, (GLint)width, (GLint)height); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    glFrustum(-2.0, 2.0, -2.0, 2.0, 0.8, 10.0); <br>    gluLookAt(7.0, 4.5, 4.0, 4.5, 4.5, 2.5, 6.0, -3.0, 2.0); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>static void CALLBACK Key_DOWN(void) <br>{ <br>    rotX -= 5; <br>} <br> <br>static void CALLBACK Key_UP(void) <br>{ <br>    rotX += 5; <br>} <br> <br>static void CALLBACK Key_LEFT(void) <br>{ <br>    rotY -= 5; <br>} <br> <br>static void CALLBACK Key_RIGHT(void) <br>{ <br>    rotY += 5; <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br> <br>    glClear(GL_COLOR_BUFFER_BIT); <br> <br>    glPushMatrix(); <br> <br>    glTranslatef(4.0, 4.5, 2.5); <br>    glRotatef(rotY, 1, 0, 0); <br>    glRotatef(rotX, 0, 1, 0); <br>    glTranslatef(-4.0, -4.5, -2.5); <br> <br>    gluBeginSurface(theNurbs); <br>    gluNurbsSurface(theNurbs, S_NUMKNOTS, sknots, T_NUMKNOTS, tknots, <br>            4*T_NUMPOINTS, 4, &amp;ctlpoints[0][0][0], S_ORDER, <br>            T_ORDER, GL_MAP2_VERTEX_4); <br>    gluEndSurface(theNurbs); <br> <br>    glPopMatrix(); <br> <br>    glFlush(); <br> <br>    if (doubleBuffer) { <br>    auxSwapBuffers(); <br>    } <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    doubleBuffer = GL_FALSE; <br> <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else { <br>        printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br>    GLenum type; <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    auxInitPosition(0, 0, 300, 300); <br> <br>    type = AUX_RGB; <br>    type |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br> <br>    auxInitDisplayMode(type); <br> <br>    if (auxInitWindow("NURBS Test") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxKeyFunc(AUX_DOWN, Key_DOWN); <br>    auxKeyFunc(AUX_UP, Key_UP); <br>    auxKeyFunc(AUX_LEFT, Key_LEFT); <br>    auxKeyFunc(AUX_RIGHT, Key_RIGHT); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

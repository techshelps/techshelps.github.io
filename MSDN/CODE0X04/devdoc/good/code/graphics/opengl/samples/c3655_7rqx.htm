<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TQUAD.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3669"></a>TQUAD.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br> <br>#define PI 3.141592654 <br>#define BLACK 0 <br>#define GRAY 128 <br>#define WHITE 255 <br>#define RD 0xA40000FF <br>#define WT 0xFFFFFFFF <br>#define brickImageWidth 16 <br>#define brickImageHeight 16 <br> <br>static void CALLBACK ErrorHandler(GLenum which); <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Key_LEFT(void ); <br>static void CALLBACK Key_RIGHT(void ); <br>static void CALLBACK Key_UP(void ); <br>static void CALLBACK Key_DOWN(void ); <br>static void CALLBACK Key_X(void ); <br>static void CALLBACK Key_x(void ); <br>static void CALLBACK Key_1(void ); <br>static void CALLBACK Key_2(void ); <br>static void CALLBACK Key_3(void ); <br>static void CALLBACK Key_4(void ); <br>static void CALLBACK Key_0(void ); <br>static void CALLBACK Key_A(void ); <br>static void CALLBACK Key_a(void ); <br>static void CALLBACK Key_S(void ); <br>static void CALLBACK Key_s(void ); <br>static void CALLBACK Key_d(void ); <br>static void CALLBACK Key_f(void ); <br>static void CALLBACK Key_G(void ); <br>static void CALLBACK Key_g(void ); <br>static void CALLBACK Key_J(void ); <br>static void CALLBACK Key_j(void ); <br>static void CALLBACK Key_H(void ); <br>static void CALLBACK Key_h(void ); <br>static void CALLBACK Key_K(void ); <br>static void CALLBACK Key_k(void ); <br>static void CALLBACK Key_L(void ); <br>static void CALLBACK Key_l(void ); <br>static void CALLBACK Key_z(void ); <br>static void CALLBACK Key_q(void ); <br>static void CALLBACK Key_w(void ); <br>static void CALLBACK Key_e(void ); <br>static void CALLBACK Key_r(void ); <br>static void CALLBACK Key_t(void ); <br>static void CALLBACK Key_y(void ); <br>static void CALLBACK Draw(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum rgb, doubleBuffer; <br> <br>float black[3] = { <br>    0.0, 0.0, 0.0 <br>}; <br>float blue[3] =  { <br>    0.0, 0.0, 1.0 <br>}; <br>float gray[3] =  { <br>    0.5, 0.5, 0.5 <br>}; <br>float white[3] = { <br>    1.0, 1.0, 1.0 <br>}; <br> <br>GLenum doDither = GL_TRUE; <br>GLenum shade = GL_TRUE; <br>GLenum texture = GL_TRUE; <br> <br>float xRotation = 30.0, yRotation = 30.0, zRotation = 0.0; <br>GLint radius1, radius2; <br>GLdouble angle1, angle2; <br>GLint slices, stacks; <br>GLint height; <br>GLint orientation = GLU_OUTSIDE; <br>GLint whichQuadric; <br>GLUquadricObj *quadObj; <br> <br>GLuint brickImage[brickImageWidth*brickImageHeight] = { <br>    RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, <br>    RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, <br>    RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, <br>    RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, <br>    WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, <br>    RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, <br>    RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, <br>    RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, <br>    RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, <br>    WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, <br>    RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, <br>    RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, <br>    RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, <br>    RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, <br>    WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, <br>    RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD <br>}; <br>char *texFileName = 0; <br> <br> <br>static void CALLBACK ErrorHandler(GLenum which) <br>{ <br> <br>    fprintf(stderr, "Quad Error: %s\n", gluErrorString(which)); <br>} <br> <br>static void Init(void) <br>{ <br>    static GLint colorIndexes[3] = {0, 200, 255}; <br>    static float ambient[] = {0.1, 0.1, 0.1, 1.0}; <br>    static float diffuse[] = {0.5, 1.0, 1.0, 1.0}; <br>    static float position[] = {90.0, 90.0, 150.0, 0.0}; <br>    static float front_mat_shininess[] = {30.0}; <br>    static float front_mat_specular[] = {0.2, 0.2, 0.2, 1.0}; <br>    static float front_mat_diffuse[] = {0.5, 0.28, 0.38, 1.0}; <br>    static float back_mat_shininess[] = {50.0}; <br>    static float back_mat_specular[] = {0.5, 0.5, 0.2, 1.0}; <br>    static float back_mat_diffuse[] = {1.0, 1.0, 0.2, 1.0}; <br>    static float lmodel_ambient[] = {1.0, 1.0, 1.0, 1.0}; <br>    static float lmodel_twoside[] = {GL_TRUE}; <br>    static float decal[] = {GL_DECAL}; <br>    static float modulate[] = {GL_MODULATE}; <br>    static float repeat[] = {GL_REPEAT}; <br>    static float nearest[] = {GL_NEAREST}; <br>    AUX_RGBImageRec *image; <br> <br>    if (!rgb) { <br>    auxSetGreyRamp(); <br>    } <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br>     <br>    glDepthFunc(GL_LEQUAL); <br>    glEnable(GL_DEPTH_TEST); <br> <br>    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient); <br>    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse); <br>    glLightfv(GL_LIGHT0, GL_POSITION, position); <br>    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient); <br>    glLightModelfv(GL_LIGHT_MODEL_TWO_SIDE, lmodel_twoside); <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br> <br>    glMaterialfv(GL_FRONT, GL_SHININESS, front_mat_shininess); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, front_mat_specular); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, front_mat_diffuse); <br>    glMaterialfv(GL_BACK, GL_SHININESS, back_mat_shininess); <br>    glMaterialfv(GL_BACK, GL_SPECULAR, back_mat_specular); <br>    glMaterialfv(GL_BACK, GL_DIFFUSE, back_mat_diffuse); <br>    if (!rgb) { <br>    glMaterialiv( GL_FRONT_AND_BACK, GL_COLOR_INDEXES, colorIndexes); <br>    } <br> <br>    glTexEnvfv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, decal); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, repeat); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, repeat); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, nearest); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, nearest); <br>    if (texFileName) { <br>    image = auxRGBImageLoad(texFileName); <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br>    gluBuild2DMipmaps(GL_TEXTURE_2D, 3, image-&gt;sizeX, image-&gt;sizeY, <br>              GL_RGB, GL_UNSIGNED_BYTE, image-&gt;data); <br>    } else { <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br>    glTexImage2D(GL_TEXTURE_2D, 0, 4, brickImageWidth, brickImageHeight, <br>             0, GL_RGBA, GL_UNSIGNED_BYTE, (GLvoid *)brickImage); <br>    } <br> <br>    quadObj = gluNewQuadric(); <br>    //gluQuadricCallback(quadObj, GLU_ERROR, ErrorHandler); <br> <br>    radius1 = 10; <br>    radius2 = 5; <br>    angle1 = 90; <br>    angle2 = 180; <br>    slices = 16; <br>    stacks = 10; <br>    height = 20; <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    glViewport(0, 0, (GLint)width, (GLint)height); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    glFrustum(-1, 1, -1, 1, 1, 10); <br>    gluLookAt(2, 2, 2, 0, 0, 0, 0, 0, 1); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>static void CALLBACK Key_LEFT(void) <br>{ <br>    yRotation += 5; <br>} <br> <br>static void CALLBACK Key_RIGHT(void) <br>{ <br>    yRotation -= 5; <br>} <br> <br>static void CALLBACK Key_UP(void) <br>{ <br>    xRotation += 5; <br>} <br> <br>static void CALLBACK Key_DOWN(void) <br>{ <br>    xRotation -= 5; <br>} <br> <br>static void CALLBACK Key_X(void) <br>{ <br>    zRotation += 5; <br>} <br> <br>static void CALLBACK Key_x(void) <br>{ <br>    zRotation -= 5; <br>} <br> <br>static void CALLBACK Key_1(void) <br>{ <br>    gluQuadricDrawStyle(quadObj, GLU_FILL); <br>} <br> <br>static void CALLBACK Key_2(void) <br>{ <br>    gluQuadricDrawStyle(quadObj, GLU_POINT); <br>} <br> <br>static void CALLBACK Key_3(void) <br>{ <br>    gluQuadricDrawStyle(quadObj, GLU_LINE); <br>} <br> <br>static void CALLBACK Key_4(void) <br>{ <br>    gluQuadricDrawStyle(quadObj, GLU_SILHOUETTE); <br>} <br> <br>static void CALLBACK Key_0(void) <br>{ <br>    shade = !shade; <br>    if (shade) { <br>        glShadeModel(GL_SMOOTH); <br>        gluQuadricNormals(quadObj, GLU_SMOOTH); <br>    } else { <br>        glShadeModel(GL_FLAT); <br>        gluQuadricNormals(quadObj, GLU_FLAT); <br>    } <br>} <br> <br>static void CALLBACK Key_A(void) <br>{ <br>    stacks++; <br>} <br> <br>static void CALLBACK Key_a(void) <br>{ <br>    if (stacks &gt; 1) <br>        stacks--; <br>} <br> <br>static void CALLBACK Key_S(void) <br>{ <br>    slices++; <br>} <br> <br>static void CALLBACK Key_s(void) <br>{ <br>    if (slices &gt; 3) <br>        slices--; <br>} <br> <br>static void CALLBACK Key_d(void) <br>{ <br>    switch(orientation) { <br>      case GLU_OUTSIDE: <br>        orientation = GLU_INSIDE; <br>        break; <br>      case GLU_INSIDE: <br>      default: <br>        orientation = GLU_OUTSIDE; <br>        break; <br>    } <br>    gluQuadricOrientation(quadObj, orientation); <br>} <br> <br>static void CALLBACK Key_f(void) <br>{ <br>    whichQuadric = (whichQuadric + 1) &amp; 0x03; <br>} <br> <br>static void CALLBACK Key_G(void) <br>{ <br>    radius1 += 1; <br>} <br> <br>static void CALLBACK Key_g(void) <br>{ <br>    if (radius1 &gt; 0) <br>        radius1 -= 1; <br>} <br> <br>static void CALLBACK Key_J(void) <br>{ <br>    radius2 += 1; <br>} <br> <br>static void CALLBACK Key_j(void) <br>{ <br>    if (radius2 &gt; 0) <br>        radius2 -= 1; <br>} <br> <br>static void CALLBACK Key_H(void) <br>{ <br>    height += 2; <br>} <br> <br>static void CALLBACK Key_h(void) <br>{ <br>    if (height &gt; 0) <br>        height -= 2; <br>} <br> <br>static void CALLBACK Key_K(void) <br>{ <br>    angle1 += 5; <br>} <br> <br>static void CALLBACK Key_k(void) <br>{ <br>    angle1 -= 5; <br>} <br> <br>static void CALLBACK Key_L(void) <br>{ <br>    angle2 += 5; <br>} <br> <br>static void CALLBACK Key_l(void) <br>{ <br>    angle2 -= 5; <br>} <br> <br>static void CALLBACK Key_z(void) <br>{ <br>        texture = !texture; <br>    if (texture) { <br>        gluQuadricTexture(quadObj, GL_TRUE); <br>        glEnable(GL_TEXTURE_2D); <br>    } else { <br>        gluQuadricTexture(quadObj, GL_FALSE); <br>        glDisable(GL_TEXTURE_2D); <br>    } <br>} <br> <br>static void CALLBACK Key_q(void) <br>{ <br>    glDisable(GL_CULL_FACE); <br>} <br> <br>static void CALLBACK Key_w(void) <br>{ <br>    glEnable(GL_CULL_FACE); <br>    glCullFace(GL_FRONT); <br>} <br> <br>static void CALLBACK Key_e(void) <br>{ <br>    glEnable(GL_CULL_FACE); <br>    glCullFace(GL_BACK); <br>} <br> <br>static void CALLBACK Key_r(void) <br>{ <br>    glFrontFace(GL_CW); <br>} <br> <br>static void CALLBACK Key_t(void) <br>{ <br>    glFrontFace(GL_CCW); <br>} <br> <br>static void CALLBACK Key_y(void) <br>{ <br>    doDither = !doDither; <br>    (doDither) ? glEnable(GL_DITHER) : glDisable(GL_DITHER); <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br> <br>    glLoadIdentity(); <br>    glRotatef(xRotation, 1, 0, 0); <br>    glRotatef(yRotation, 0, 1, 0); <br>    glRotatef(zRotation, 0, 0, 1); <br> <br>    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT); <br> <br>    glColor3f(1.0, 1.0, 1.0); <br>    switch (whichQuadric) { <br>      case 0: <br>    glTranslatef(0, 0, -height/20.0); <br>    gluCylinder(quadObj, radius1/10.0, radius2/10.0, height/10.0,  <br>            slices, stacks); <br>    break; <br>      case 1: <br>    gluSphere(quadObj, radius1/10.0, slices, stacks); <br>    break; <br>      case 2: <br>    gluPartialDisk(quadObj, radius2/10.0, radius1/10.0, slices,  <br>               stacks, angle1, angle2); <br>    break; <br>      case 3: <br>    gluDisk(quadObj, radius2/10.0, radius1/10.0, slices, stacks); <br>    break; <br>    } <br> <br>    glFlush(); <br> <br>    if (doubleBuffer) { <br>    auxSwapBuffers(); <br>    } <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    rgb = GL_TRUE; <br>    doubleBuffer = GL_FALSE; <br> <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-ci") == 0) { <br>        rgb = GL_FALSE; <br>    } else if (strcmp(argv[i], "-rgb") == 0) { <br>        rgb = GL_TRUE; <br>    } else if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else if (strcmp(argv[i], "-f") == 0) { <br>        if (i+1 &gt;= argc || argv[i+1][0] == '-') { <br>        //printf("-f (No file name).\n"); <br>        return GL_FALSE; <br>        } else { <br>        texFileName = argv[++i]; <br>        } <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br>    GLenum type; <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    auxInitPosition(0, 0, 300, 300); <br> <br>    type = AUX_DEPTH16; <br>    type |= (rgb) ? AUX_RGB : AUX_INDEX; <br>    type |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br> <br>    auxInitDisplayMode(type); <br> <br>    if (auxInitWindow("Quad Test") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxKeyFunc(AUX_LEFT, Key_LEFT); <br>    auxKeyFunc(AUX_RIGHT, Key_RIGHT); <br>    auxKeyFunc(AUX_UP, Key_UP); <br>    auxKeyFunc(AUX_DOWN, Key_DOWN); <br>    auxKeyFunc(AUX_X, Key_X); <br>    auxKeyFunc(AUX_x, Key_x); <br>    auxKeyFunc(AUX_1, Key_1); <br>    auxKeyFunc(AUX_2, Key_2); <br>    auxKeyFunc(AUX_3, Key_3); <br>    auxKeyFunc(AUX_4, Key_4); <br>    auxKeyFunc(AUX_0, Key_0); <br>    auxKeyFunc(AUX_A, Key_A); <br>    auxKeyFunc(AUX_a, Key_a); <br>    auxKeyFunc(AUX_S, Key_S); <br>    auxKeyFunc(AUX_s, Key_s); <br>    auxKeyFunc(AUX_d, Key_d); <br>    auxKeyFunc(AUX_f, Key_f); <br>    auxKeyFunc(AUX_G, Key_G); <br>    auxKeyFunc(AUX_g, Key_g); <br>    auxKeyFunc(AUX_J, Key_J); <br>    auxKeyFunc(AUX_j, Key_j); <br>    auxKeyFunc(AUX_H, Key_H); <br>    auxKeyFunc(AUX_h, Key_h); <br>    auxKeyFunc(AUX_K, Key_K); <br>    auxKeyFunc(AUX_k, Key_k); <br>    auxKeyFunc(AUX_L, Key_L); <br>    auxKeyFunc(AUX_l, Key_l); <br>    auxKeyFunc(AUX_z, Key_z); <br>    auxKeyFunc(AUX_Q, Key_q); <br>    auxKeyFunc(AUX_w, Key_w); <br>    auxKeyFunc(AUX_e, Key_e); <br>    auxKeyFunc(AUX_r, Key_r); <br>    auxKeyFunc(AUX_t, Key_t); <br>    auxKeyFunc(AUX_y, Key_y); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TLOGO.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3665"></a>TLOGO.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br> <br>#define PI 3.141592654 <br> <br>#define BLACK 0 <br>#define GRAY 128 <br>#define WHITE 255 <br>#define BL 0x00 <br>#define WH 0xFF <br>#define RD 0xA40000FF <br>#define WT 0xFFFFFFFF <br> <br>#define CHECKIMAGEWIDTH 8 <br>#define CHECKIMAGEHEIGHT 8 <br>#define BRICKIMAGEWIDTH 16 <br>#define BRICKIMAGEHEIGHT 16 <br> <br>static void SetUpAntiAliasedGrayScale(void ); <br>static void BendForward(void ); <br>static void BendLeft(void ); <br>static void BendRight(void ); <br>static void BuildSingleCylinder(void ); <br>static void BuildDoubleCylinder(void ); <br>static void BuildElbow(void ); <br>static void BuildLogo(void ); <br>static void BuildLists(void ); <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Key_LEFT(void ); <br>static void CALLBACK Key_RIGHT(void ); <br>static void CALLBACK Key_UP(void ); <br>static void CALLBACK Key_DOWN(void ); <br>static void CALLBACK Key_Z(void ); <br>static void CALLBACK Key_z(void ); <br>static void CALLBACK Key_1(void ); <br>static void CALLBACK Key_2(void ); <br>static void CALLBACK Key_3(void ); <br>static void CALLBACK Key_p(void ); <br>static void CALLBACK Key_4(void ); <br>static void CALLBACK Key_5(void ); <br>static void CALLBACK Key_6(void ); <br>static void CALLBACK Key_8(void ); <br>static void CALLBACK Key_9(void ); <br>static void CALLBACK Key_0(void ); <br>static void CALLBACK Key_q(void ); <br>static void CALLBACK Key_w(void ); <br>static void CALLBACK Key_e(void ); <br>static void CALLBACK Key_r(void ); <br>static void CALLBACK Key_t(void ); <br>static void CALLBACK Key_y(void ); <br>static void CALLBACK Key_u(void ); <br>static void CALLBACK Key_a(void ); <br>static void CALLBACK Key_s(void ); <br>static void CALLBACK Key_d(void ); <br>static void CALLBACK Key_f(void ); <br>static void CALLBACK Key_g(void ); <br>static void CALLBACK Draw(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum rgb, doubleBuffer, directRender; <br> <br>float black[3] = {0.0, 0.0, 0.0}; <br>float white[3] = {1.0, 1.0, 1.0}; <br>float gray[3] = {0.5, 0.5, 0.5}; <br>float blue[3] = {0.0, 0.0, 1.0}; <br>GLint colorIndexes[3] = {0, 200, 255}; <br> <br>GLenum polyMode; <br>GLenum dithering; <br>GLenum shade; <br>GLenum doStipple; <br> <br>double plane[4] = {1.0, 0.0, -1.0, 0.0}; <br>float xRotation = 30.0, yRotation = 30.0; <br>float zTranslation = -15.0; <br> <br>GLint singleCylinder; <br>GLint doubleCylinder; <br>GLint elbow, logo; <br> <br>GLubyte checkImage[3*CHECKIMAGEWIDTH*CHECKIMAGEHEIGHT] = { <br>    BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, <br>    WH, WH, BL, BL, BL, WH, WH, WH, WH, WH, WH, BL, BL, BL, WH, WH, <br>    WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, <br>    BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, <br>    WH, WH, BL, BL, BL, WH, WH, WH, WH, WH, WH, BL, BL, BL, WH, WH, <br>    WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, <br>    BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, <br>    WH, WH, BL, BL, BL, WH, WH, WH, WH, WH, WH, BL, BL, BL, WH, WH, <br>    WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, <br>    BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, <br>    WH, WH, BL, BL, BL, WH, WH, WH, WH, WH, WH, BL, BL, BL, WH, WH, <br>    WH, BL, BL, BL, WH, WH, WH, BL, BL, BL, WH, WH, WH, BL, BL, BL,  <br>}; <br>GLuint brickImage[BRICKIMAGEWIDTH*BRICKIMAGEHEIGHT] = { <br>    RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, <br>    RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, <br>    RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, <br>    RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, <br>    WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, <br>    RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, <br>    RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, <br>    RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, <br>    RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, <br>    WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, <br>    RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, <br>    RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, <br>    RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, <br>    RD, RD, RD, RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, <br>    WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, WT, <br>    RD, RD, RD, RD, WT, RD, RD, RD, RD, RD, RD, RD, RD, RD, WT, RD <br>}; <br> <br>GLubyte *image = checkImage; <br>GLint imageHeight = CHECKIMAGEHEIGHT; <br>GLint imageWidth = CHECKIMAGEWIDTH; <br> <br>float decal[] = { <br>    GL_DECAL, <br>}; <br>float modulate[] = { <br>    GL_MODULATE, <br>}; <br>float repeat[] = { <br>    GL_REPEAT, <br>}; <br>float nearest[] = { <br>    GL_NEAREST, <br>}; <br> <br>GLubyte stipple[4*32] = { <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br> <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br> <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br>    0x00, 0x0F, 0xF0, 0x00, <br> <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br>    0x00, 0x00, 0x00, 0x00, <br>}; <br> <br>float tscp[18][2] = { <br>    { <br>    0.0, 0.0 <br>    }, <br>    { <br>    1.0, 0.0 <br>    }, <br>    { <br>    0.0, 0.125 <br>    }, <br>    { <br>    1.0, 0.125 <br>    }, <br>    { <br>    0.0, 0.250 <br>    }, <br>    { <br>    1.0, 0.25 <br>    }, <br>    { <br>    0.0, 0.375 <br>    }, <br>    { <br>    1.0, 0.375 <br>    }, <br>    { <br>    0.0, 0.50 <br>    }, <br>    { <br>    1.0, 0.50 <br>    }, <br>    { <br>    0.0, 0.625 <br>    }, <br>    { <br>    1.0, 0.625 <br>    }, <br>    { <br>    0.0, 0.75 <br>    }, <br>    { <br>    1.0, 0.75 <br>    }, <br>    { <br>    0.0, 0.875 <br>    }, <br>    { <br>    1.0, 0.875 <br>    }, <br>    { <br>    0.0, 1.0 <br>    }, <br>    { <br>    1.0, 1.0 <br>    } <br>}; <br>float scp[18][3] = { <br>    { <br>    1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>    1.000000, 0.000000, 5.000000 <br>    }, <br>    { <br>    0.707107, 0.707107, 0.000000 <br>    }, <br>    { <br>    0.707107, 0.707107, 5.000000 <br>    }, <br>    { <br>    0.000000, 1.000000, 0.000000 <br>    }, <br>    { <br>    0.000000, 1.000000, 5.000000 <br>    }, <br>    { <br>    -0.707107, 0.707107, 0.000000 <br>    }, <br>    { <br>    -0.707107, 0.707107, 5.000000 <br>    }, <br>    { <br>    -1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>    -1.000000, 0.000000, 5.000000 <br>    }, <br>    { <br>    -0.707107, -0.707107, 0.000000 <br>    }, <br>    { <br>    -0.707107, -0.707107, 5.000000 <br>    }, <br>    { <br>    0.000000, -1.000000, 0.000000 <br>    }, <br>    { <br>    0.000000, -1.000000, 5.000000 <br>    }, <br>    { <br>    0.707107, -0.707107, 0.000000 <br>    }, <br>    { <br>    0.707107, -0.707107, 5.000000 <br>    }, <br>    { <br>    1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>    1.000000, 0.000000, 5.000000 <br>    } <br>}; <br>float dcp[18][3] = { <br>    { <br>    1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>    1.000000, 0.000000, 7.000000 <br>    }, <br>    { <br>    0.707107, 0.707107, 0.000000 <br>    }, <br>    { <br>    0.707107, 0.707107, 7.000000 <br>    }, <br>    { <br>    0.000000, 1.000000, 0.000000 <br>    }, <br>    { <br>    0.000000, 1.000000, 7.000000 <br>    }, <br>    { <br>    -0.707107, 0.707107, 0.000000 <br>    }, <br>    { <br>    -0.707107, 0.707107, 7.000000 <br>    }, <br>    { <br>    -1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>    -1.000000, 0.000000, 7.000000 <br>    }, <br>    { <br>    -0.707107, -0.707107, 0.000000 <br>    }, <br>    { <br>    -0.707107, -0.707107, 7.000000 <br>    }, <br>    { <br>    0.000000, -1.000000, 0.000000 <br>    }, <br>    { <br>    0.000000, -1.000000, 7.000000 <br>    }, <br>    { <br>    0.707107, -0.707107, 0.000000 <br>    }, <br>    { <br>    0.707107, -0.707107, 7.000000 <br>    }, <br>    { <br>    1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>    1.000000, 0.000000, 7.000000 <br>    } <br>}; <br>float ep[7][9][3] = { <br>    { <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        0.707107, 0.707107, 0.000000 <br>    }, <br>    { <br>        0.000000, 1.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, 0.707107, 0.000000 <br>    }, <br>    { <br>        -1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, -0.707107, 0.000000 <br>    }, <br>    { <br>        0.000000, -1.000000, 0.000000 <br>    }, <br>    { <br>        0.707107, -0.707107, 0.000000 <br>    }, <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    } <br>    }, <br>    { <br>    { <br>        1.000000, 0.034074, 0.258819 <br>    }, <br>    { <br>        0.707107, 0.717087, 0.075806 <br>    }, <br>    { <br>        0.000000, 1.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, 0.717087, 0.075806 <br>    }, <br>    { <br>        -1.000000, 0.034074, 0.258819 <br>    }, <br>    { <br>        -0.707107, -0.648939, 0.441832 <br>    }, <br>    { <br>        0.000000, -0.931852, 0.517638 <br>    }, <br>    { <br>        0.707107, -0.648939, 0.441832 <br>    }, <br>    { <br>        1.000000, 0.034074, 0.258819 <br>    } <br>    }, <br>    { <br>    { <br>        1.000000, 0.133975, 0.500000 <br>    }, <br>    { <br>        0.707107, 0.746347, 0.146447 <br>    }, <br>    { <br>        0.000000, 1.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, 0.746347, 0.146447 <br>    }, <br>    { <br>        -1.000000, 0.133975, 0.500000 <br>    }, <br>    { <br>        -0.707107, -0.478398, 0.853553 <br>    }, <br>    { <br>        0.000000, -0.732051, 1.000000 <br>    }, <br>    { <br>        0.707107, -0.478398, 0.853553 <br>    }, <br>    { <br>        1.000000, 0.133975, 0.500000 <br>    } <br>    }, <br>    { <br>    { <br>        1.000000, 0.292893, 0.707107 <br>    }, <br>    { <br>        0.707107, 0.792893, 0.207107 <br>    }, <br>    { <br>        0.000000, 1.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, 0.792893, 0.207107 <br>    }, <br>    { <br>        -1.000000, 0.292893, 0.707107 <br>    }, <br>    { <br>        -0.707107, -0.207107, 1.207107 <br>    }, <br>    { <br>        0.000000, -0.414214, 1.414214 <br>    }, <br>    { <br>        0.707107, -0.207107, 1.207107 <br>    }, <br>    { <br>        1.000000, 0.292893, 0.707107 <br>    } <br>    }, <br>    { <br>    { <br>        1.000000, 0.500000, 0.866025 <br>    }, <br>    { <br>        0.707107, 0.853553, 0.253653 <br>    }, <br>    { <br>        0.000000, 1.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, 0.853553, 0.253653 <br>    }, <br>    { <br>        -1.000000, 0.500000, 0.866025 <br>    }, <br>    { <br>        -0.707107, 0.146447, 1.478398 <br>    }, <br>    { <br>        0.000000, 0.000000, 1.732051 <br>    }, <br>    { <br>        0.707107, 0.146447, 1.478398 <br>    }, <br>    { <br>        1.000000, 0.500000, 0.866025 <br>    } <br>    }, <br>    { <br>    { <br>        1.000000, 0.741181, 0.965926 <br>    }, <br>    { <br>        0.707107, 0.924194, 0.282913 <br>    }, <br>    { <br>        0.000000, 1.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, 0.924194, 0.282913 <br>    }, <br>    { <br>        -1.000000, 0.741181, 0.965926 <br>    }, <br>    { <br>        -0.707107, 0.558168, 1.648939 <br>    }, <br>    { <br>        0.000000, 0.482362, 1.931852 <br>    }, <br>    { <br>        0.707107, 0.558168, 1.648939 <br>    }, <br>    { <br>        1.000000, 0.741181, 0.965926 <br>    } <br>    }, <br>    { <br>    { <br>        1.000000, 1.000000, 1.000000 <br>    }, <br>    { <br>        0.707107, 1.000000, 0.292893 <br>    }, <br>    { <br>        0.000000, 1.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, 1.000000, 0.292893 <br>    }, <br>    { <br>        -1.000000, 1.000000, 1.000000 <br>    }, <br>    { <br>        -0.707107, 1.000000, 1.707107 <br>    }, <br>    { <br>        0.000000, 1.000000, 2.000000 <br>    }, <br>    { <br>        0.707107, 1.000000, 1.707107 <br>    }, <br>    { <br>        1.000000, 1.000000, 1.000000 <br>    } <br>    } <br>}; <br>float en[7][9][3] = { <br>    { <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        0.707107, 0.707107, 0.000000 <br>    }, <br>    { <br>        0.000000, 1.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, 0.707107, 0.000000 <br>    }, <br>    { <br>        -1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, -0.707107, 0.000000 <br>    }, <br>    { <br>        0.000000, -1.000000, 0.000000 <br>    }, <br>    { <br>        0.707107, -0.707107, 0.000000 <br>    }, <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    } <br>    }, <br>    { <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        0.707107, 0.683013, -0.183013 <br>    }, <br>    { <br>        0.000000, 0.965926, -0.258819 <br>    }, <br>    { <br>        -0.707107, 0.683013, -0.183013 <br>    }, <br>    { <br>        -1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, -0.683013, 0.183013 <br>    }, <br>    { <br>        0.000000, -0.965926, 0.258819 <br>    }, <br>    { <br>        0.707107, -0.683013, 0.183013 <br>    }, <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    } <br>    }, <br>    { <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        0.707107, 0.612372, -0.353553 <br>    }, <br>    { <br>        0.000000, 0.866025, -0.500000 <br>    }, <br>    { <br>        -0.707107, 0.612372, -0.353553 <br>    }, <br>    { <br>        -1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, -0.612372, 0.353553 <br>    }, <br>    { <br>        0.000000, -0.866025, 0.500000 <br>    }, <br>    { <br>        0.707107, -0.612372, 0.353553 <br>    }, <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    } <br>    }, <br>    { <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        0.707107, 0.500000, -0.500000 <br>    }, <br>    { <br>        0.000000, 0.707107, -0.707107 <br>    }, <br>    { <br>        -0.707107, 0.500000, -0.500000 <br>    }, <br>    { <br>        -1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, -0.500000, 0.500000 <br>    }, <br>    { <br>        0.000000, -0.707107, 0.707107 <br>    }, <br>    { <br>        0.707107, -0.500000, 0.500000 <br>    }, <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    } <br>    }, <br>    { <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        0.707107, 0.353553, -0.612372 <br>    }, <br>    { <br>        0.000000, 0.500000, -0.866025 <br>    }, <br>    { <br>        -0.707107, 0.353553, -0.612372 <br>    }, <br>    { <br>        -1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, -0.353553, 0.612372 <br>    }, <br>    { <br>        0.000000, -0.500000, 0.866025 <br>    }, <br>    { <br>        0.707107, -0.353553, 0.612372 <br>    }, <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    } <br>    }, <br>    { <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        0.707107, 0.183013, -0.683013 <br>    }, <br>    { <br>        0.000000, 0.258819, -0.965926 <br>    }, <br>    { <br>        -0.707107, 0.183013, -0.683013 <br>    }, <br>    { <br>        -1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, -0.183013, 0.683013 <br>    }, <br>    { <br>        0.000000, -0.258819, 0.965926 <br>    }, <br>    { <br>        0.707107, -0.183013, 0.683013 <br>    }, <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    } <br>    }, <br>    { <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        0.707107, 0.000000, -0.707107 <br>    }, <br>    { <br>        0.000000, 0.000000, -1.000000 <br>    }, <br>    { <br>        -0.707107, 0.000000, -0.707107 <br>    }, <br>    { <br>        -1.000000, 0.000000, 0.000000 <br>    }, <br>    { <br>        -0.707107, 0.000000, 0.707107 <br>    }, <br>    { <br>        0.000000, 0.000000, 1.000000 <br>    }, <br>    { <br>        0.707107, 0.000000, 0.707107 <br>    }, <br>    { <br>        1.000000, 0.000000, 0.000000 <br>    } <br>    } <br>}; <br>float tep[7][9][2] = { <br>    { <br>    { <br>        0,     0.0 <br>    }, <br>    { <br>        0.125, 0.0 <br>    }, <br>    { <br>        0.25,  0.0 <br>    }, <br>    { <br>        0.375, 0.0 <br>    }, <br>    { <br>        0.5,   0.0 <br>    }, <br>    { <br>        0.625, 0.0 <br>    }, <br>    { <br>        0.75,  0.0 <br>    }, <br>    { <br>        0.875, 0.0 <br>    }, <br>    { <br>        1.0,   0.0 <br>    } <br>    }, <br>    { <br>    { <br>        0,     0.16667 <br>    }, <br>    { <br>        0.125, 0.16667 <br>    }, <br>    { <br>        0.25,  0.16667 <br>    }, <br>    { <br>        0.375, 0.16667 <br>    }, <br>    { <br>        0.5,   0.16667 <br>    }, <br>    { <br>        0.625, 0.16667 <br>    }, <br>    { <br>        0.75,  0.16667 <br>    }, <br>    { <br>        0.875, 0.16667 <br>    }, <br>    { <br>        1.0,   0.16667 <br>    } <br>    }, <br>    { <br>    { <br>        0,     0.33333 <br>    }, <br>    { <br>        0.125, 0.33333 <br>    }, <br>    { <br>        0.25,  0.33333 <br>    }, <br>    { <br>        0.375, 0.33333 <br>    }, <br>    { <br>        0.5,   0.33333 <br>    }, <br>    { <br>        0.625, 0.33333 <br>    }, <br>    { <br>        0.75,  0.33333 <br>    }, <br>    { <br>        0.875, 0.33333 <br>    }, <br>    { <br>        1.0,   0.33333 <br>    } <br>    }, <br>    { <br>    { <br>        0,     0.5 <br>    }, <br>    { <br>        0.125, 0.5 <br>    }, <br>    { <br>        0.25,  0.5 <br>    }, <br>    { <br>        0.375, 0.5 <br>    }, <br>    { <br>        0.5,   0.5 <br>    }, <br>    { <br>        0.625, 0.5 <br>    }, <br>    { <br>        0.75,  0.5 <br>    }, <br>    { <br>        0.875, 0.5 <br>    }, <br>    { <br>        1.0,   0.5 <br>    } <br>    }, <br>    { <br>    { <br>        0,     0.6667 <br>    }, <br>    { <br>        0.125, 0.6667 <br>    }, <br>    { <br>        0.25,  0.6667 <br>    }, <br>    { <br>        0.375, 0.6667 <br>    }, <br>    { <br>        0.5,   0.6667 <br>    }, <br>    { <br>        0.625, 0.6667 <br>    }, <br>    { <br>        0.75,  0.6667 <br>    }, <br>    { <br>        0.875, 0.6667 <br>    }, <br>    { <br>        1.0,   0.6667 <br>    } <br>    }, <br>    { <br>    { <br>        0,     0.83333 <br>    }, <br>    { <br>        0.125, 0.83333 <br>    }, <br>    { <br>        0.25,  0.83333 <br>    }, <br>    { <br>        0.375, 0.83333 <br>    }, <br>    { <br>        0.5,   0.83333 <br>    }, <br>    { <br>        0.625, 0.83333 <br>    }, <br>    { <br>        0.75,  0.83333 <br>    }, <br>    { <br>        0.875, 0.83333 <br>    }, <br>    { <br>        1.0,   0.83333 <br>    } <br>    }, <br>    { <br>    { <br>        0,     1.0 <br>    }, <br>    { <br>        0.125, 1.0 <br>    }, <br>    { <br>        0.25,  1.0 <br>    }, <br>    { <br>        0.375, 1.0 <br>    }, <br>    { <br>        0.5,   1.0 <br>    }, <br>    { <br>        0.625, 1.0 <br>    }, <br>    { <br>        0.75,  1.0 <br>    }, <br>    { <br>        0.875, 1.0 <br>    }, <br>    { <br>        1.0,   1.0 <br>    } <br>    } <br>}; <br> <br> <br>static void SetUpAntiAliasedGrayScale(void) <br>{ <br>    float color; <br>    GLint i, j; <br> <br>    for (i = 0; i &lt; 16; i++) { <br>    color = (2 * i + 1) / 32.0; <br>    for (j = 0; j &lt; 16; j++) { <br>        auxSetOneColor(i*16+j, color*j/15.0, color*j/15.0, color*j/15.0); <br>    } <br>    } <br>} <br> <br>static void BendForward(void) <br>{ <br> <br>    glTranslatef(0.0, 1.0, 0.0); <br>    glRotatef(90.0, 1, 0, 0); <br>    glTranslatef(0.0, -1.0, 0.0); <br>} <br> <br>static void BendLeft(void) <br>{ <br> <br>    glRotatef(-90.0, 0, 0, 1); <br>    glTranslatef(0.0, 1.0, 0.0); <br>    glRotatef(90.0, 1, 0, 0); <br>    glTranslatef(0.0, -1.0, 0.0); <br>} <br> <br>static void BendRight(void) <br>{ <br> <br>    glRotatef(90.0, 0, 0, 1); <br>    glTranslatef(0.0, 1.0, 0.0); <br>    glRotatef(90.0, 1, 0, 0); <br>    glTranslatef(0.0, -1.0, 0.0); <br>} <br> <br>static void BuildSingleCylinder(void) <br>{ <br> <br>    glNewList(singleCylinder, GL_COMPILE); <br> <br>    glBegin(GL_TRIANGLE_STRIP); <br>       glNormal3fv(scp[0]); glTexCoord2fv(tscp[0]); glVertex3fv(scp[0]); <br>       glNormal3fv(scp[0]); glTexCoord2fv(tscp[1]); glVertex3fv(scp[1]); <br>       glNormal3fv(scp[2]); glTexCoord2fv(tscp[2]); glVertex3fv(scp[2]); <br>       glNormal3fv(scp[2]); glTexCoord2fv(tscp[3]); glVertex3fv(scp[3]); <br>       glNormal3fv(scp[4]); glTexCoord2fv(tscp[4]); glVertex3fv(scp[4]); <br>       glNormal3fv(scp[4]); glTexCoord2fv(tscp[5]); glVertex3fv(scp[5]); <br>       glNormal3fv(scp[6]); glTexCoord2fv(tscp[6]); glVertex3fv(scp[6]); <br>       glNormal3fv(scp[6]); glTexCoord2fv(tscp[7]); glVertex3fv(scp[7]); <br>       glNormal3fv(scp[8]); glTexCoord2fv(tscp[8]); glVertex3fv(scp[8]); <br>       glNormal3fv(scp[8]); glTexCoord2fv(tscp[9]); glVertex3fv(scp[9]); <br>       glNormal3fv(scp[10]); glTexCoord2fv(tscp[10]); glVertex3fv(scp[10]); <br>       glNormal3fv(scp[10]); glTexCoord2fv(tscp[11]); glVertex3fv(scp[11]); <br>       glNormal3fv(scp[12]); glTexCoord2fv(tscp[12]); glVertex3fv(scp[12]); <br>       glNormal3fv(scp[12]); glTexCoord2fv(tscp[13]); glVertex3fv(scp[13]); <br>       glNormal3fv(scp[14]); glTexCoord2fv(tscp[14]); glVertex3fv(scp[14]); <br>       glNormal3fv(scp[14]); glTexCoord2fv(tscp[15]); glVertex3fv(scp[15]); <br>       glNormal3fv(scp[16]); glTexCoord2fv(tscp[16]); glVertex3fv(scp[16]); <br>       glNormal3fv(scp[16]); glTexCoord2fv(tscp[17]); glVertex3fv(scp[17]); <br>    glEnd(); <br> <br>    glEndList(); <br>} <br> <br>static void BuildDoubleCylinder(void) <br>{ <br> <br>    glNewList(doubleCylinder, GL_COMPILE); <br> <br>    glBegin(GL_TRIANGLE_STRIP); <br>    glNormal3fv(dcp[0]); glTexCoord2fv(tscp[0]); glVertex3fv(dcp[0]); <br>    glNormal3fv(dcp[0]); glTexCoord2fv(tscp[1]); glVertex3fv(dcp[1]); <br>    glNormal3fv(dcp[2]); glTexCoord2fv(tscp[2]); glVertex3fv(dcp[2]); <br>    glNormal3fv(dcp[2]); glTexCoord2fv(tscp[3]); glVertex3fv(dcp[3]); <br>    glNormal3fv(dcp[4]); glTexCoord2fv(tscp[4]); glVertex3fv(dcp[4]); <br>    glNormal3fv(dcp[4]); glTexCoord2fv(tscp[5]); glVertex3fv(dcp[5]); <br>    glNormal3fv(dcp[6]); glTexCoord2fv(tscp[6]); glVertex3fv(dcp[6]); <br>    glNormal3fv(dcp[6]); glTexCoord2fv(tscp[7]); glVertex3fv(dcp[7]); <br>    glNormal3fv(dcp[8]); glTexCoord2fv(tscp[8]); glVertex3fv(dcp[8]); <br>    glNormal3fv(dcp[8]); glTexCoord2fv(tscp[9]); glVertex3fv(dcp[9]); <br>    glNormal3fv(dcp[10]); glTexCoord2fv(tscp[10]); glVertex3fv(dcp[10]); <br>    glNormal3fv(dcp[10]); glTexCoord2fv(tscp[11]); glVertex3fv(dcp[11]); <br>    glNormal3fv(dcp[12]); glTexCoord2fv(tscp[12]); glVertex3fv(dcp[12]); <br>    glNormal3fv(dcp[12]); glTexCoord2fv(tscp[13]); glVertex3fv(dcp[13]); <br>    glNormal3fv(dcp[14]); glTexCoord2fv(tscp[14]); glVertex3fv(dcp[14]); <br>    glNormal3fv(dcp[14]); glTexCoord2fv(tscp[15]); glVertex3fv(dcp[15]); <br>    glNormal3fv(dcp[16]); glTexCoord2fv(tscp[16]); glVertex3fv(dcp[16]); <br>    glNormal3fv(dcp[16]); glTexCoord2fv(tscp[17]); glVertex3fv(dcp[17]); <br>    glEnd(); <br> <br>    glEndList(); <br>} <br> <br>static void BuildElbow(void) <br>{ <br> <br>    glNewList(elbow, GL_COMPILE); <br> <br>    glBegin(GL_TRIANGLE_STRIP); <br>    glNormal3fv(en[0][0]); glTexCoord2fv(tep[0][0]); glVertex3fv(ep[0][0]); <br>    glNormal3fv(en[1][0]); glTexCoord2fv(tep[1][0]); glVertex3fv(ep[1][0]); <br>    glNormal3fv(en[0][1]); glTexCoord2fv(tep[0][1]); glVertex3fv(ep[0][1]); <br>    glNormal3fv(en[1][1]); glTexCoord2fv(tep[1][1]); glVertex3fv(ep[1][1]); <br>    glNormal3fv(en[0][2]); glTexCoord2fv(tep[0][2]); glVertex3fv(ep[0][2]); <br>    glNormal3fv(en[1][2]); glTexCoord2fv(tep[1][2]); glVertex3fv(ep[1][2]); <br>    glNormal3fv(en[0][3]); glTexCoord2fv(tep[0][3]); glVertex3fv(ep[0][3]); <br>    glNormal3fv(en[1][3]); glTexCoord2fv(tep[1][3]); glVertex3fv(ep[1][3]); <br>    glNormal3fv(en[0][4]); glTexCoord2fv(tep[0][4]); glVertex3fv(ep[0][4]); <br>    glNormal3fv(en[1][4]); glTexCoord2fv(tep[1][4]); glVertex3fv(ep[1][4]); <br>    glNormal3fv(en[0][5]); glTexCoord2fv(tep[0][5]); glVertex3fv(ep[0][5]); <br>    glNormal3fv(en[1][5]); glTexCoord2fv(tep[1][5]); glVertex3fv(ep[1][5]); <br>    glNormal3fv(en[0][6]); glTexCoord2fv(tep[0][6]); glVertex3fv(ep[0][6]); <br>    glNormal3fv(en[1][6]); glTexCoord2fv(tep[1][6]); glVertex3fv(ep[1][6]); <br>    glNormal3fv(en[0][7]); glTexCoord2fv(tep[0][7]); glVertex3fv(ep[0][7]); <br>    glNormal3fv(en[1][7]); glTexCoord2fv(tep[1][7]); glVertex3fv(ep[1][7]); <br>    glNormal3fv(en[0][8]); glTexCoord2fv(tep[0][8]); glVertex3fv(ep[0][8]); <br>    glNormal3fv(en[1][8]); glTexCoord2fv(tep[1][8]); glVertex3fv(ep[1][8]); <br>    glEnd(); <br>    glBegin(GL_TRIANGLE_STRIP); <br>    glNormal3fv(en[1][0]); glTexCoord2fv(tep[1][0]); glVertex3fv(ep[1][0]); <br>    glNormal3fv(en[2][0]); glTexCoord2fv(tep[2][0]); glVertex3fv(ep[2][0]); <br>    glNormal3fv(en[1][1]); glTexCoord2fv(tep[1][1]); glVertex3fv(ep[1][1]); <br>    glNormal3fv(en[2][1]); glTexCoord2fv(tep[2][1]); glVertex3fv(ep[2][1]); <br>    glNormal3fv(en[1][2]); glTexCoord2fv(tep[1][2]); glVertex3fv(ep[1][2]); <br>    glNormal3fv(en[2][2]); glTexCoord2fv(tep[2][2]); glVertex3fv(ep[2][2]); <br>    glNormal3fv(en[1][3]); glTexCoord2fv(tep[1][3]); glVertex3fv(ep[1][3]); <br>    glNormal3fv(en[2][3]); glTexCoord2fv(tep[2][3]); glVertex3fv(ep[2][3]); <br>    glNormal3fv(en[1][4]); glTexCoord2fv(tep[1][4]); glVertex3fv(ep[1][4]); <br>    glNormal3fv(en[2][4]); glTexCoord2fv(tep[2][4]); glVertex3fv(ep[2][4]); <br>    glNormal3fv(en[1][5]); glTexCoord2fv(tep[1][5]); glVertex3fv(ep[1][5]); <br>    glNormal3fv(en[2][5]); glTexCoord2fv(tep[2][5]); glVertex3fv(ep[2][5]); <br>    glNormal3fv(en[1][6]); glTexCoord2fv(tep[1][6]); glVertex3fv(ep[1][6]); <br>    glNormal3fv(en[2][6]); glTexCoord2fv(tep[2][6]); glVertex3fv(ep[2][6]); <br>    glNormal3fv(en[1][7]); glTexCoord2fv(tep[1][7]); glVertex3fv(ep[1][7]); <br>    glNormal3fv(en[2][7]); glTexCoord2fv(tep[2][7]); glVertex3fv(ep[2][7]); <br>    glNormal3fv(en[1][8]); glTexCoord2fv(tep[1][8]); glVertex3fv(ep[1][8]); <br>    glNormal3fv(en[2][8]); glTexCoord2fv(tep[2][8]); glVertex3fv(ep[2][8]); <br>    glEnd(); <br>    glBegin(GL_TRIANGLE_STRIP); <br>    glNormal3fv(en[2][0]); glTexCoord2fv(tep[2][0]); glVertex3fv(ep[2][0]); <br>    glNormal3fv(en[3][0]); glTexCoord2fv(tep[3][0]); glVertex3fv(ep[3][0]); <br>    glNormal3fv(en[2][1]); glTexCoord2fv(tep[2][1]); glVertex3fv(ep[2][1]); <br>    glNormal3fv(en[3][1]); glTexCoord2fv(tep[3][1]); glVertex3fv(ep[3][1]); <br>    glNormal3fv(en[2][2]); glTexCoord2fv(tep[2][2]); glVertex3fv(ep[2][2]); <br>    glNormal3fv(en[3][2]); glTexCoord2fv(tep[3][2]); glVertex3fv(ep[3][2]); <br>    glNormal3fv(en[2][3]); glTexCoord2fv(tep[2][3]); glVertex3fv(ep[2][3]); <br>    glNormal3fv(en[3][3]); glTexCoord2fv(tep[3][3]); glVertex3fv(ep[3][3]); <br>    glNormal3fv(en[2][4]); glTexCoord2fv(tep[2][4]); glVertex3fv(ep[2][4]); <br>    glNormal3fv(en[3][4]); glTexCoord2fv(tep[3][4]); glVertex3fv(ep[3][4]); <br>    glNormal3fv(en[2][5]); glTexCoord2fv(tep[2][5]); glVertex3fv(ep[2][5]); <br>    glNormal3fv(en[3][5]); glTexCoord2fv(tep[3][5]); glVertex3fv(ep[3][5]); <br>    glNormal3fv(en[2][6]); glTexCoord2fv(tep[2][6]); glVertex3fv(ep[2][6]); <br>    glNormal3fv(en[3][6]); glTexCoord2fv(tep[3][6]); glVertex3fv(ep[3][6]); <br>    glNormal3fv(en[2][7]); glTexCoord2fv(tep[2][7]); glVertex3fv(ep[2][7]); <br>    glNormal3fv(en[3][7]); glTexCoord2fv(tep[3][7]); glVertex3fv(ep[3][7]); <br>    glNormal3fv(en[2][8]); glTexCoord2fv(tep[2][8]); glVertex3fv(ep[2][8]); <br>    glNormal3fv(en[3][8]); glTexCoord2fv(tep[3][8]); glVertex3fv(ep[3][8]); <br>    glEnd(); <br>    glBegin(GL_TRIANGLE_STRIP); <br>    glNormal3fv(en[3][0]); glTexCoord2fv(tep[3][0]); glVertex3fv(ep[3][0]); <br>    glNormal3fv(en[4][0]); glTexCoord2fv(tep[4][0]); glVertex3fv(ep[4][0]); <br>    glNormal3fv(en[3][1]); glTexCoord2fv(tep[3][1]); glVertex3fv(ep[3][1]); <br>    glNormal3fv(en[4][1]); glTexCoord2fv(tep[4][1]); glVertex3fv(ep[4][1]); <br>    glNormal3fv(en[3][2]); glTexCoord2fv(tep[3][2]); glVertex3fv(ep[3][2]); <br>    glNormal3fv(en[4][2]); glTexCoord2fv(tep[4][2]); glVertex3fv(ep[4][2]); <br>    glNormal3fv(en[3][3]); glTexCoord2fv(tep[3][3]); glVertex3fv(ep[3][3]); <br>    glNormal3fv(en[4][3]); glTexCoord2fv(tep[4][3]); glVertex3fv(ep[4][3]); <br>    glNormal3fv(en[3][4]); glTexCoord2fv(tep[3][4]); glVertex3fv(ep[3][4]); <br>    glNormal3fv(en[4][4]); glTexCoord2fv(tep[4][4]); glVertex3fv(ep[4][4]); <br>    glNormal3fv(en[3][5]); glTexCoord2fv(tep[3][5]); glVertex3fv(ep[3][5]); <br>    glNormal3fv(en[4][5]); glTexCoord2fv(tep[4][5]); glVertex3fv(ep[4][5]); <br>    glNormal3fv(en[3][6]); glTexCoord2fv(tep[3][6]); glVertex3fv(ep[3][6]); <br>    glNormal3fv(en[4][6]); glTexCoord2fv(tep[4][6]); glVertex3fv(ep[4][6]); <br>    glNormal3fv(en[3][7]); glTexCoord2fv(tep[3][7]); glVertex3fv(ep[3][7]); <br>    glNormal3fv(en[4][7]); glTexCoord2fv(tep[4][7]); glVertex3fv(ep[4][7]); <br>    glNormal3fv(en[3][8]); glTexCoord2fv(tep[3][8]); glVertex3fv(ep[3][8]); <br>    glNormal3fv(en[4][8]); glTexCoord2fv(tep[4][8]); glVertex3fv(ep[4][8]); <br>    glEnd(); <br>    glBegin(GL_TRIANGLE_STRIP); <br>    glNormal3fv(en[4][0]); glTexCoord2fv(tep[4][0]); glVertex3fv(ep[4][0]); <br>    glNormal3fv(en[5][0]); glTexCoord2fv(tep[5][0]); glVertex3fv(ep[5][0]); <br>    glNormal3fv(en[4][1]); glTexCoord2fv(tep[4][1]); glVertex3fv(ep[4][1]); <br>    glNormal3fv(en[5][1]); glTexCoord2fv(tep[5][1]); glVertex3fv(ep[5][1]); <br>    glNormal3fv(en[4][2]); glTexCoord2fv(tep[4][2]); glVertex3fv(ep[4][2]); <br>    glNormal3fv(en[5][2]); glTexCoord2fv(tep[5][2]); glVertex3fv(ep[5][2]); <br>    glNormal3fv(en[4][3]); glTexCoord2fv(tep[4][3]); glVertex3fv(ep[4][3]); <br>    glNormal3fv(en[5][3]); glTexCoord2fv(tep[5][3]); glVertex3fv(ep[5][3]); </code></pre>
<p>
</p>
<pre><code>glNormal3fv(en[4][4]); glTexCoord2fv(tep[4][4]); glVertex3fv(ep[4][4]); <br>    glNormal3fv(en[5][4]); glTexCoord2fv(tep[5][4]); glVertex3fv(ep[5][4]); <br>    glNormal3fv(en[4][5]); glTexCoord2fv(tep[4][5]); glVertex3fv(ep[4][5]); <br>    glNormal3fv(en[5][5]); glTexCoord2fv(tep[5][5]); glVertex3fv(ep[5][5]); <br>    glNormal3fv(en[4][6]); glTexCoord2fv(tep[4][6]); glVertex3fv(ep[4][6]); <br>    glNormal3fv(en[5][6]); glTexCoord2fv(tep[5][6]); glVertex3fv(ep[5][6]); <br>    glNormal3fv(en[4][7]); glTexCoord2fv(tep[4][7]); glVertex3fv(ep[4][7]); <br>    glNormal3fv(en[5][7]); glTexCoord2fv(tep[5][7]); glVertex3fv(ep[5][7]); <br>    glNormal3fv(en[4][8]); glTexCoord2fv(tep[4][8]); glVertex3fv(ep[4][8]); <br>    glNormal3fv(en[5][8]); glTexCoord2fv(tep[5][8]); glVertex3fv(ep[5][8]); <br>    glEnd(); <br>    glBegin(GL_TRIANGLE_STRIP); <br>    glNormal3fv(en[5][0]); glTexCoord2fv(tep[5][0]); glVertex3fv(ep[5][0]); <br>    glNormal3fv(en[6][0]); glTexCoord2fv(tep[6][0]); glVertex3fv(ep[6][0]); <br>    glNormal3fv(en[5][1]); glTexCoord2fv(tep[5][1]); glVertex3fv(ep[5][1]); <br>    glNormal3fv(en[6][1]); glTexCoord2fv(tep[6][1]); glVertex3fv(ep[6][1]); <br>    glNormal3fv(en[5][2]); glTexCoord2fv(tep[5][2]); glVertex3fv(ep[5][2]); <br>    glNormal3fv(en[6][2]); glTexCoord2fv(tep[6][2]); glVertex3fv(ep[6][2]); <br>    glNormal3fv(en[5][3]); glTexCoord2fv(tep[5][3]); glVertex3fv(ep[5][3]); <br>    glNormal3fv(en[6][3]); glTexCoord2fv(tep[6][3]); glVertex3fv(ep[6][3]); <br>    glNormal3fv(en[5][4]); glTexCoord2fv(tep[5][4]); glVertex3fv(ep[5][4]); <br>    glNormal3fv(en[6][4]); glTexCoord2fv(tep[6][4]); glVertex3fv(ep[6][4]); <br>    glNormal3fv(en[5][5]); glTexCoord2fv(tep[5][5]); glVertex3fv(ep[5][5]); <br>    glNormal3fv(en[6][5]); glTexCoord2fv(tep[6][5]); glVertex3fv(ep[6][5]); <br>    glNormal3fv(en[5][6]); glTexCoord2fv(tep[5][6]); glVertex3fv(ep[5][6]); <br>    glNormal3fv(en[6][6]); glTexCoord2fv(tep[6][6]); glVertex3fv(ep[6][6]); <br>    glNormal3fv(en[5][7]); glTexCoord2fv(tep[5][7]); glVertex3fv(ep[5][7]); <br>    glNormal3fv(en[6][7]); glTexCoord2fv(tep[6][7]); glVertex3fv(ep[6][7]); <br>    glNormal3fv(en[5][8]); glTexCoord2fv(tep[5][8]); glVertex3fv(ep[5][8]); <br>    glNormal3fv(en[6][8]); glTexCoord2fv(tep[6][8]); glVertex3fv(ep[6][8]); <br>    glEnd(); <br> <br>    glEndList(); <br>} <br> <br>static void BuildLogo(void) <br>{ <br> <br>    glNewList(logo, GL_COMPILE); <br> <br>    glTranslatef(5.5, -3.5, 4.5); <br>    glTranslatef(0.0, 0.0, -7.0); <br>    glCallList(doubleCylinder); <br>    BendForward(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -7.0); <br>    glCallList(doubleCylinder); <br>    BendForward(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -5.0); <br>    glCallList(singleCylinder); <br>    BendRight(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -7.0); <br>    glCallList(doubleCylinder); <br>    BendForward(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -7.0); <br>    glCallList(doubleCylinder); <br>    BendForward(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -5.0); <br>    glCallList(singleCylinder); <br>    BendLeft(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -7.0); <br>    glCallList(doubleCylinder); <br>    BendForward(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -7.0); <br>    glCallList(doubleCylinder); <br>    BendForward(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -5.0); <br>    glCallList(singleCylinder); <br>    BendRight(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -7.0); <br>    glCallList(doubleCylinder); <br>    BendForward(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -7.0); <br>    glCallList(doubleCylinder); <br>    BendForward(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -5.0); <br>    glCallList(singleCylinder); <br>    BendLeft(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -7.0); <br>    glCallList(doubleCylinder); <br>    BendForward(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -7.0); <br>    glCallList(doubleCylinder); <br>    BendForward(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -5.0); <br>    glCallList(singleCylinder); <br>    BendRight(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -7.0); <br>    glCallList(doubleCylinder); <br>    BendForward(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -7.0); <br>    glCallList(doubleCylinder); <br>    BendForward(); <br>    glCallList(elbow); <br>    glTranslatef(0.0, 0.0, -5.0); <br>    glCallList(singleCylinder); <br>    BendLeft(); <br>    glCallList(elbow); <br> <br>    glEndList(); <br>} <br> <br>static void BuildLists(void) <br>{ <br> <br>    singleCylinder = glGenLists(1); <br>    doubleCylinder = glGenLists(1); <br>    elbow = glGenLists(1); <br>    logo = glGenLists(1); <br> <br>    BuildSingleCylinder(); <br>    BuildDoubleCylinder(); <br>    BuildElbow(); <br>    BuildLogo(); <br>} <br> <br>static void Init(void) <br>{ <br>    static float ambient[] = {0.1, 0.1, 0.1, 1.0}; <br>    static float diffuse[] = {0.5, 1.0, 1.0, 1.0}; <br>    static float position[] = {90.0, 90.0, 150.0, 0.0}; <br>    static float front_mat_shininess[] = {30.0}; <br>    static float front_mat_specular[] = {0.2, 0.2, 0.2, 1.0}; <br>    static float front_mat_diffuse[] = {0.5, 0.28, 0.38, 1.0}; <br>    static float back_mat_shininess[] = {50.0}; <br>    static float back_mat_specular[] = {0.5, 0.5, 0.2, 1.0}; <br>    static float back_mat_diffuse[] = {1.0, 1.0, 0.2, 1.0}; <br>    static float lmodel_ambient[] = {1.0, 1.0, 1.0, 1.0}; <br>    static float lmodel_twoside[] = {GL_TRUE}; <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br> <br>    glFrontFace(GL_CW); <br> <br>    glDepthFunc(GL_LEQUAL); <br>    glEnable(GL_DEPTH_TEST); <br> <br>    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient); <br>    glLightModelfv(GL_LIGHT_MODEL_TWO_SIDE, lmodel_twoside); <br>    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient); <br>    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse); <br>    glLightfv(GL_LIGHT0, GL_POSITION, position); <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>     <br>    glMaterialfv(GL_FRONT, GL_SHININESS, front_mat_shininess); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, front_mat_specular); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, front_mat_diffuse); <br>    glMaterialfv(GL_BACK, GL_SHININESS, back_mat_shininess); <br>    glMaterialfv(GL_BACK, GL_SPECULAR, back_mat_specular); <br>    glMaterialfv(GL_BACK, GL_DIFFUSE, back_mat_diffuse); <br> <br>    glEnable(GL_CLIP_PLANE0); <br> <br>    if (rgb) { <br>    glTexEnvfv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, decal); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, repeat); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, repeat); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, nearest); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, nearest); <br>    glTexImage2D(GL_TEXTURE_2D, 0, 3, CHECKIMAGEWIDTH, CHECKIMAGEHEIGHT, 0, <br>             GL_RGB, GL_UNSIGNED_BYTE, (GLvoid *)checkImage); <br>    glEnable(GL_TEXTURE_2D); <br> <br>    glCullFace(GL_BACK); <br>    glEnable(GL_CULL_FACE); <br>    } else { <br>    auxSetGreyRamp(); <br>    /* <br>    if (doubleBuffer) { <br>        colorIndexes[1] = 10; <br>        colorIndexes[2] = 15; <br>    } */ <br> <br>    glMaterialiv(GL_FRONT_AND_BACK, GL_COLOR_INDEXES, colorIndexes); <br>    } <br> <br>    BuildLists(); <br> <br>    dithering = GL_TRUE; <br>    shade = GL_TRUE; <br>    doStipple = GL_FALSE; <br>    polyMode = GL_BACK; <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    glViewport(0, 0, (GLint)width, (GLint)height); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluPerspective(90, 1.0, 1.0, 200.0); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>static void CALLBACK Key_LEFT(void) <br>{ <br>    yRotation += 0.5; <br>} <br> <br>static void CALLBACK Key_RIGHT(void) <br>{ <br>    yRotation -= 0.5; <br>} <br> <br>static void CALLBACK Key_UP(void) <br>{ <br>    plane[3] += 2.0; <br>} <br> <br>static void CALLBACK Key_DOWN(void) <br>{ <br>    plane[3] -= 2.0; <br>} <br> <br>static void CALLBACK Key_Z(void) <br>{ <br>    zTranslation -= 1.0; <br>} <br> <br>static void CALLBACK Key_z(void) <br>{ <br>    zTranslation += 1.0; <br>} <br> <br>static void CALLBACK Key_1(void) <br>{ <br>    glPolygonMode(polyMode, GL_POINT); <br>} <br> <br>static void CALLBACK Key_2(void) <br>{ <br>    glPolygonMode(polyMode, GL_LINE); <br>} <br> <br>static void CALLBACK Key_3(void) <br>{ <br>    glPolygonMode(polyMode, GL_FILL); <br>} <br> <br>static void CALLBACK Key_p(void) <br>{ <br>    switch (polyMode) { <br>      case GL_BACK: <br>        polyMode = GL_FRONT; <br>        break; <br>      case GL_FRONT: <br>        polyMode = GL_FRONT_AND_BACK; <br>        break; <br>      case GL_FRONT_AND_BACK: <br>        polyMode = GL_BACK; <br>        break; <br>    } <br>} <br> <br>static void CALLBACK Key_4(void) <br>{ <br>    glHint(GL_POLYGON_SMOOTH_HINT, GL_NICEST); <br>} <br> <br>static void CALLBACK Key_5(void) <br>{ <br>    glEnable(GL_POLYGON_SMOOTH); <br>    if (rgb) { <br>        glBlendFunc(GL_SRC_ALPHA, GL_ONE); <br>        glEnable(GL_BLEND); <br>        glDisable(GL_DEPTH_TEST); <br>    } else { <br>        SetUpAntiAliasedGrayScale(); <br>    } <br>} <br> <br>static void CALLBACK Key_6(void) <br>{ <br>    glDisable(GL_POLYGON_SMOOTH); <br>    if (rgb) { <br>        glBlendFunc(GL_ONE, GL_ZERO); <br>        glDisable(GL_BLEND); <br>        glEnable(GL_DEPTH_TEST); <br>    } else { <br>        auxSetGreyRamp(); <br>    } <br>} <br> <br>static void CALLBACK Key_8(void) <br>{ <br>    dithering = !dithering; <br>    (dithering) ? glEnable(GL_DITHER) : glDisable(GL_DITHER); <br>} <br> <br>static void CALLBACK Key_9(void) <br>{ <br>    doStipple = !doStipple; <br>    if (doStipple) { <br>        glPolygonStipple(stipple); <br>        glEnable(GL_POLYGON_STIPPLE); <br>    } else { <br>        glDisable(GL_POLYGON_STIPPLE); <br>    } <br>} <br> <br>static void CALLBACK Key_0(void) <br>{ <br>    shade = !shade; <br>    (shade) ? glShadeModel(GL_SMOOTH) : glShadeModel(GL_FLAT); <br>} <br> <br>static void CALLBACK Key_q(void) <br>{ <br>    glDisable(GL_CULL_FACE); <br>} <br> <br>static void CALLBACK Key_w(void) <br>{ <br>    glEnable(GL_CULL_FACE); <br>    glCullFace(GL_FRONT); <br>} <br> <br>static void CALLBACK Key_e(void) <br>{ <br>    glEnable(GL_CULL_FACE); <br>    glCullFace(GL_BACK); <br>} <br> <br>static void CALLBACK Key_r(void) <br>{ <br>    glFrontFace(GL_CW); <br>} <br> <br>static void CALLBACK Key_t(void) <br>{ <br>    glFrontFace(GL_CCW); <br>} <br> <br>static void CALLBACK Key_y(void) <br>{ <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br>    glPixelStorei(GL_UNPACK_LSB_FIRST, 0); <br>    glPolygonStipple(stipple); <br>} <br> <br>static void CALLBACK Key_u(void) <br>{ <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br>    glPixelStorei(GL_UNPACK_LSB_FIRST, 1); <br>    glPolygonStipple(stipple); <br>} <br> <br>static void CALLBACK Key_a(void) <br>{ <br>    glEnable(GL_TEXTURE_2D); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, repeat); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, repeat); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, nearest); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, nearest); <br>    glTexImage2D(GL_TEXTURE_2D, 0, 4, BRICKIMAGEWIDTH, <br>             BRICKIMAGEHEIGHT, 0, GL_RGBA, GL_UNSIGNED_BYTE, <br>             (GLvoid *)brickImage); <br>} <br> <br>static void CALLBACK Key_s(void) <br>{ <br>    glEnable(GL_TEXTURE_2D); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, repeat); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, repeat); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, nearest); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, nearest); <br>    glTexImage2D(GL_TEXTURE_2D, 0, 3, CHECKIMAGEWIDTH, <br>             CHECKIMAGEHEIGHT, 0, GL_RGB, GL_UNSIGNED_BYTE, <br>             (GLvoid *)checkImage); <br>} <br> <br>static void CALLBACK Key_d(void) <br>{ <br>    glDisable(GL_TEXTURE_2D); <br>} <br> <br>static void CALLBACK Key_f(void) <br>{ <br>    glTexEnvfv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, decal); <br>} <br> <br>static void CALLBACK Key_g(void) <br>{ <br>    glTexEnvfv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, modulate); <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br> <br>    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT); <br> <br>    glPushMatrix(); <br> <br>    glTranslatef(0, 0, zTranslation); <br>    glRotatef(30.0, 1, 0, 0); <br>    glRotatef(yRotation, 0, 1, 0); <br>    glClipPlane(GL_CLIP_PLANE0, plane); <br>    glCallList(logo); <br> <br>    glPopMatrix(); <br> <br>    glFlush(); <br> <br>    if (doubleBuffer) { <br>    auxSwapBuffers(); <br>    } <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    rgb = GL_TRUE; <br>    doubleBuffer = GL_FALSE; <br>    directRender = GL_FALSE; <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-ci") == 0) { <br>        rgb = GL_FALSE; <br>    } else if (strcmp(argv[i], "-rgb") == 0) { <br>        rgb = GL_TRUE; <br>    } else if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else if (strcmp(argv[i], "-dr") == 0) { <br>        directRender = GL_TRUE; <br>    } else if (strcmp(argv[i], "-ir") == 0) { <br>        directRender = GL_FALSE; <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br>    GLenum type; <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    auxInitPosition(0, 0, 300, 300); <br> <br>    type = AUX_DEPTH16; <br>    type |= (rgb) ? AUX_RGB : AUX_INDEX; <br>    type |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br>    auxInitDisplayMode(type); <br> <br>    if (auxInitWindow("Logo Test") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxKeyFunc(AUX_LEFT, Key_LEFT); <br>    auxKeyFunc(AUX_RIGHT, Key_RIGHT); <br>    auxKeyFunc(AUX_UP, Key_UP); <br>    auxKeyFunc(AUX_DOWN, Key_DOWN); <br>    auxKeyFunc(AUX_Z, Key_Z); <br>    auxKeyFunc(AUX_z, Key_z); <br>    auxKeyFunc(AUX_1, Key_1); <br>    auxKeyFunc(AUX_2, Key_2); <br>    auxKeyFunc(AUX_3, Key_3); <br>    auxKeyFunc(AUX_p, Key_p); <br>    auxKeyFunc(AUX_4, Key_4); <br>    auxKeyFunc(AUX_5, Key_5); <br>    auxKeyFunc(AUX_6, Key_6); <br>    auxKeyFunc(AUX_8, Key_8); <br>    auxKeyFunc(AUX_9, Key_9); <br>    auxKeyFunc(AUX_0, Key_0); <br>    auxKeyFunc(AUX_q, Key_q); <br>    auxKeyFunc(AUX_w, Key_w); <br>    auxKeyFunc(AUX_e, Key_e); <br>    auxKeyFunc(AUX_r, Key_r); <br>    auxKeyFunc(AUX_t, Key_t); <br>    auxKeyFunc(AUX_y, Key_y); <br>    auxKeyFunc(AUX_u, Key_u); <br>    auxKeyFunc(AUX_a, Key_a); <br>    auxKeyFunc(AUX_s, Key_s); <br>    auxKeyFunc(AUX_d, Key_d); <br>    auxKeyFunc(AUX_f, Key_f); <br>    auxKeyFunc(AUX_g, Key_g); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

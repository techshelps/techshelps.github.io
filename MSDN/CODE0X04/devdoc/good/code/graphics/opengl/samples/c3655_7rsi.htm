<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TSPHERE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3672"></a>TSPHERE.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br>#define FALSE 0 <br>#define TRUE  1 <br>#define PI    3.14159265358979323846 <br> <br>extern void BuildCylinder(int numEdges); <br>extern void BuildTorus(float rc,int numc,float rt,int numt); <br>extern void BuildCage(void ); <br>extern void BuildCube(void ); <br>extern void BuildLists(void ); <br>extern void SetDeepestColor(void ); <br>extern void SetDefaultSettings(void ); <br>extern unsigned char *AlphaPadImage(int bufSize,unsigned char *inData,int alpha); <br>extern void Init(void ); <br>extern void ReInit(void ); <br>extern void CALLBACK Draw(void ); <br>extern void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Key_LEFT(void ); <br>static void CALLBACK Key_RIGHT(void ); <br>static void CALLBACK Key_UP(void ); <br>static void CALLBACK Key_DOWN(void ); <br>static void CALLBACK Key_a(void ); <br>static void CALLBACK Key_c(void ); <br>static void CALLBACK Key_d(void ); <br>static void CALLBACK Key_m(void ); <br>static void CALLBACK Key_l(void ); <br>static void CALLBACK Key_f(void ); <br>static void CALLBACK Key_t(void ); <br>static void CALLBACK Key_0(void ); <br>static void CALLBACK Key_1(void ); <br>static void CALLBACK Key_2(void ); <br>static void CALLBACK Key_3(void ); <br>static void CALLBACK Key_4(void ); <br>static void CALLBACK Key_5(void ); <br>static void CALLBACK Key_6(void ); <br>static void CALLBACK Key_7(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum doubleBuffer; <br>int W = 400, H = 400; <br> <br>char *imageFileName = 0; <br>AUX_RGBImageRec *image; <br> <br>int numComponents; <br> <br>float *minFilter, *magFilter, *sWrapMode, *tWrapMode; <br>float decal[] = {GL_DECAL}; <br>float modulate[] = {GL_MODULATE}; <br>float repeat[] = {GL_REPEAT}; <br>float clamp[] = {GL_CLAMP}; <br>float nearest[] = {GL_NEAREST}; <br>float linear[] = {GL_LINEAR}; <br>float nearest_mipmap_nearest[] = {GL_NEAREST_MIPMAP_NEAREST}; <br>float nearest_mipmap_linear[] = {GL_NEAREST_MIPMAP_LINEAR}; <br>float linear_mipmap_nearest[] = {GL_LINEAR_MIPMAP_NEAREST}; <br>float linear_mipmap_linear[] = {GL_LINEAR_MIPMAP_LINEAR}; <br>GLint sphereMap[] = {GL_SPHERE_MAP}; <br> <br>float xRotation = 0.0, yRotation = 0.0; <br>float zTranslate = -4.0; <br>GLenum autoRotate = TRUE; <br>GLenum deepestColor = AUX_GREEN; <br>GLenum isLit = TRUE; <br>GLenum isFogged = FALSE; <br>float *textureEnvironment = modulate; <br> <br>struct MipMap { <br>    int width, height; <br>    unsigned char *data; <br>}; <br> <br>int cube, cage, cylinder, torus, genericObject; <br> <br>float c[6][4][4][3] = { <br>    { <br>    { <br>        { <br>        1.0, 1.0, -1.0 <br>        },  <br>        { <br>        0.0, 1.0, -1.0 <br>        }, <br>        { <br>        0.0, 0.0, -1.0 <br>        }, <br>        { <br>        1.0, 0.0, -1.0 <br>        }, <br>    }, <br>    { <br>        { <br>        0.0, 1.0, -1.0 <br>        }, <br>        { <br>        -1.0, 1.0, -1.0 <br>        },  <br>        { <br>        -1.0, 0.0, -1.0 <br>        },  <br>        { <br>        0.0, 0.0, -1.0 <br>        }, <br>    }, <br>    { <br>        { <br>        0.0,  0.0, -1.0 <br>        }, <br>        { <br>        -1.0, 0.0, -1.0 <br>        }, <br>        { <br>        -1.0, -1.0, -1.0 <br>        }, <br>        { <br>        0.0, -1.0, -1.0 <br>        }, <br>    }, <br>    { <br>        { <br>        1.0, 0.0, -1.0 <br>        }, <br>        { <br>        0.0, 0.0, -1.0 <br>        }, <br>        { <br>        0.0, -1.0, -1.0 <br>        }, <br>        { <br>        1.0, -1.0, -1.0 <br>        }, <br>    }, <br>    }, <br>    { <br>    { <br>        { <br>        1.0, 1.0, 1.0 <br>        }, <br>        { <br>        1.0, 1.0, 0.0 <br>        }, <br>        { <br>        1.0, 0.0, 0.0 <br>        }, <br>        { <br>        1.0, 0.0, 1.0 <br>        }, <br>    }, <br>    { <br>        { <br>        1.0, 1.0, 0.0 <br>        }, <br>        { <br>        1.0, 1.0, -1.0 <br>        }, <br>        { <br>        1.0, 0.0, -1.0 <br>        }, <br>        { <br>        1.0, 0.0, 0.0 <br>        }, <br>    }, <br>    { <br>        { <br>        1.0, 0.0, -1.0 <br>        }, <br>        { <br>        1.0, -1.0, -1.0 <br>        }, <br>        { <br>        1.0, -1.0, 0.0 <br>        }, <br>        { <br>        1.0, 0.0, 0.0 <br>        }, <br>    }, <br>    { <br>        { <br>        1.0, 0.0, 0.0 <br>        }, <br>        { <br>        1.0, -1.0, 0.0 <br>        }, <br>        { <br>        1.0, -1.0, 1.0 <br>        }, <br>        { <br>        1.0, 0.0, 1.0 <br>        }, <br>    }, <br>    }, <br>    { <br>    { <br>        { <br>        -1.0, 1.0, 1.0 <br>        }, <br>        { <br>        0.0, 1.0, 1.0 <br>        }, <br>        { <br>        0.0, 0.0, 1.0 <br>        }, <br>        { <br>        -1.0, 0.0, 1.0 <br>        }, <br>    }, <br>    { <br>        { <br>        0.0, 1.0, 1.0 <br>        }, <br>        { <br>        1.0, 1.0, 1.0 <br>        }, <br>        { <br>        1.0, 0.0, 1.0 <br>        }, <br>        { <br>        0.0, 0.0, 1.0 <br>        }, <br>    }, <br>    { <br>        { <br>        1.0, 0.0, 1.0 <br>        }, <br>        { <br>        1.0, -1.0, 1.0 <br>        }, <br>        { <br>        0.0, -1.0, 1.0 <br>        }, <br>        { <br>        0.0, 0.0, 1.0 <br>        }, <br>    }, <br>    { <br>        { <br>        0.0, -1.0, 1.0 <br>        }, <br>        { <br>        -1.0, -1.0, 1.0 <br>        }, <br>        { <br>        -1.0, 0.0, 1.0 <br>        }, <br>        { <br>        0.0, 0.0, 1.0 <br>        }, <br>    }, <br>    }, <br>    { <br>    { <br>        { <br>        -1.0, 1.0, -1.0 <br>        }, <br>        { <br>        -1.0, 1.0, 0.0 <br>        }, <br>        { <br>        -1.0, 0.0, 0.0 <br>        }, <br>        { <br>        -1.0, 0.0, -1.0 <br>        }, <br>    },  <br>    { <br>        { <br>        -1.0, 1.0, 0.0 <br>        }, <br>        { <br>        -1.0, 1.0, 1.0 <br>        }, <br>        { <br>        -1.0, 0.0, 1.0 <br>        }, <br>        { <br>        -1.0, 0.0, 0.0 <br>        }, <br>    },  <br>    { <br>        { <br>        -1.0, 0.0, 1.0 <br>        }, <br>        { <br>        -1.0, -1.0, 1.0 <br>        }, <br>        { <br>        -1.0, -1.0, 0.0 <br>        }, <br>        { <br>        -1.0, 0.0, 0.0 <br>        }, <br>    },  <br>    { <br>        { <br>        -1.0, -1.0, 0.0 <br>        }, <br>        { <br>        -1.0, -1.0, -1.0 <br>        }, <br>        { <br>        -1.0, 0.0, -1.0 <br>        }, <br>        { <br>        -1.0, 0.0, 0.0 <br>        }, <br>    },  <br>    }, <br>    { <br>    { <br>        { <br>        -1.0, 1.0, 1.0 <br>        }, <br>        { <br>        -1.0, 1.0, 0.0 <br>        }, <br>        { <br>        0.0, 1.0, 0.0 <br>        }, <br>        { <br>        0.0, 1.0, 1.0 <br>        }, <br>    }, <br>    { <br>        { <br>        -1.0, 1.0, 0.0 <br>        }, <br>        { <br>        -1.0, 1.0, -1.0 <br>        }, <br>        { <br>        0.0, 1.0, -1.0 <br>        }, <br>        { <br>        0.0, 1.0, 0.0 <br>        }, <br>    }, <br>    { <br>        { <br>        0.0, 1.0, -1.0 <br>        }, <br>        { <br>        1.0, 1.0, -1.0 <br>        }, <br>        { <br>        1.0, 1.0, 0.0 <br>        }, <br>        { <br>        0.0, 1.0, 0.0 <br>        }, <br>    }, <br>    { <br>        { <br>        1.0, 1.0, 0.0 <br>        }, <br>        { <br>        1.0, 1.0, 1.0 <br>        }, <br>        { <br>        0.0, 1.0, 1.0 <br>        }, <br>        { <br>        0.0, 1.0, 0.0 <br>        }, <br>    }, <br>    }, <br>    { <br>    { <br>        { <br>        -1.0, -1.0, -1.0 <br>        }, <br>        { <br>        -1.0, -1.0, 0.0 <br>        }, <br>        { <br>        0.0, -1.0, 0.0 <br>        }, <br>        { <br>        0.0, -1.0, -1.0 <br>        }, <br>    }, <br>    { <br>        { <br>        -1.0, -1.0, 0.0 <br>        }, <br>        { <br>        -1.0, -1.0, 1.0 <br>        }, <br>        { <br>        0.0, -1.0, 1.0 <br>        }, <br>        { <br>        0.0, -1.0, 0.0 <br>        }, <br>    }, <br>    { <br>        { <br>        0.0, -1.0, 1.0 <br>        }, <br>        { <br>        1.0, -1.0, 1.0 <br>        }, <br>        { <br>        1.0, -1.0, 0.0 <br>        }, <br>        { <br>        0.0, -1.0, 0.0 <br>        }, <br>    }, <br>    { <br>        { <br>        1.0, -1.0, 0.0 <br>        }, <br>        { <br>        1.0, -1.0, -1.0 <br>        }, <br>        { <br>        0.0, -1.0, -1.0 <br>        }, <br>        { <br>        0.0, -1.0, 0.0 <br>        }, <br>    }, <br>    } <br>}; <br> <br>float n[6][3] = { <br>    { <br>    0.0, 0.0, -1.0 <br>    }, <br>    { <br>    1.0, 0.0, 0.0 <br>    }, <br>    { <br>    0.0, 0.0, 1.0 <br>    }, <br>    { <br>    -1.0, 0.0, 0.0 <br>    }, <br>    { <br>    0.0, 1.0, 0.0 <br>    }, <br>    { <br>    0.0, -1.0, 0.0 <br>    } <br>}; <br> <br>GLfloat identity[16] = { <br>    1, 0, 0, 0, <br>    0, 1, 0, 0, <br>    0, 0, 1, 0, <br>    0, 0, 0, 1, <br>}; <br> <br> <br>void BuildCylinder(int numEdges) <br>{ <br>    int i, top = 1.0, bottom = -1.0; <br>    float x[100], y[100], angle;  <br>     <br>    for (i = 0; i &lt;= numEdges; i++) { <br>    angle = i * 2.0 * PI / numEdges; <br>    x[i] = cos(angle); <br>    y[i] = sin(angle); <br>    } <br> <br>    glNewList(cylinder, GL_COMPILE); <br>    glBegin(GL_TRIANGLE_STRIP); <br>    for (i = 0; i &lt;= numEdges; i++) { <br>        glNormal3f(x[i], y[i], 0.0); <br>        glVertex3f(x[i], y[i], bottom); <br>        glVertex3f(x[i], y[i], top); <br>    } <br>    glEnd(); <br>    glBegin(GL_TRIANGLE_FAN); <br>    glNormal3f(0.0, 0.0, 1.0); <br>    glVertex3f(0.0, 0.0, top); <br>    for (i = 0; i &lt;= numEdges; i++) { <br>        glVertex3f(x[i], -y[i], top); <br>    } <br>    glEnd(); <br>    glBegin(GL_TRIANGLE_FAN); <br>    glNormal3f(0.0, 0.0, -1.0); <br>    glVertex3f(0.0, 0.0, bottom); <br>    for (i = 0; i &lt;= numEdges; i++) { <br>        glVertex3f(x[i], y[i], bottom); <br>    } <br>    glEnd(); <br>    glEndList(); <br>} <br> <br>void BuildTorus(float rc, int numc, float rt, int numt) <br>{ <br>    int i, j, k; <br>    double s, t; <br>    double x, y, z; <br>    double pi, twopi; <br> <br>    pi = 3.14159265358979323846; <br>    twopi = 2.0 * pi; <br>  <br>    glNewList(torus, GL_COMPILE); <br>    for (i = 0; i &lt; numc; i++) { <br>    glBegin(GL_QUAD_STRIP); <br>        for (j = 0; j &lt;= numt; j++) { <br>        for (k = 0; k &lt;= 1; k++) { <br>        s = (i + k) % numc + 0.5; <br>        t = j % numt; <br> <br>        x = cos(t*twopi/numt) * cos(s*twopi/numc); <br>        y = sin(t*twopi/numt) * cos(s*twopi/numc); <br>        z = sin(s*twopi/numc); <br>        glNormal3f(x, y, z); <br> <br>        x = (rt + rc * cos(s*twopi/numc)) * cos(t*twopi/numt); <br>        y = (rt + rc * cos(s*twopi/numc)) * sin(t*twopi/numt); <br>        z = rc * sin(s*twopi/numc); <br>        glVertex3f(x, y, z); <br>        } <br>        } <br>    glEnd(); <br>    } <br>    glEndList(); <br>} <br> <br>void BuildCage(void) <br>{ <br>    int i; <br>    float inc; <br>    float right, left, top, bottom, front, back; <br> <br>    front  = 0.0; <br>    back   = -8.0; <br> <br>    left   = -4.0; <br>    bottom = -4.0; <br>    right  = 4.0; <br>    top    = 4.0;  <br> <br>    inc = 2.0 * 4.0 * 0.1; <br> <br>    glNewList(cage, GL_COMPILE); <br>    for (i = 0; i &lt; 10; i++) { <br> <br>    /* <br>    ** Back <br>    */ <br>    glBegin(GL_LINES); <br>        glVertex3f(left+i*inc, top,    back); <br>        glVertex3f(left+i*inc, bottom, back); <br>    glEnd(); <br>    glBegin(GL_LINES); <br>        glVertex3f(right, bottom+i*inc, back); <br>        glVertex3f(left,  bottom+i*inc, back); <br>    glEnd(); <br> <br>    /* <br>    ** Front <br>    */ <br>    glBegin(GL_LINES); <br>        glVertex3f(left+i*inc, top,    front); <br>        glVertex3f(left+i*inc, bottom, front); <br>    glEnd(); <br>    glBegin(GL_LINES); <br>        glVertex3f(right, bottom+i*inc, front); <br>        glVertex3f(left,  bottom+i*inc, front); <br>    glEnd(); <br> <br>    /* <br>    ** Left <br>    */ <br>    glBegin(GL_LINES); <br>        glVertex3f(left, bottom+i*inc, front); <br>        glVertex3f(left, bottom+i*inc, back); <br>    glEnd(); <br>    glBegin(GL_LINES); <br>        glVertex3f(left, top,    back+i*inc); <br>        glVertex3f(left, bottom, back+i*inc); <br>    glEnd(); <br> <br>    /* <br>    ** Right <br>    */ <br>    glBegin(GL_LINES); <br>        glVertex3f(right, top-i*inc, front); <br>        glVertex3f(right, top-i*inc, back); <br>    glEnd(); <br>    glBegin(GL_LINES); <br>        glVertex3f(right, top,    back+i*inc); <br>        glVertex3f(right, bottom, back+i*inc); <br>    glEnd(); <br> <br>    /* <br>    ** Top <br>    */ <br>    glBegin(GL_LINES); <br>        glVertex3f(left+i*inc, top, front); <br>        glVertex3f(left+i*inc, top, back); <br>    glEnd(); <br>    glBegin(GL_LINES); <br>        glVertex3f(right, top, back+i*inc); <br>        glVertex3f(left,  top, back+i*inc); <br>    glEnd(); <br> <br>    /* <br>    ** Bottom <br>    */ <br>    glBegin(GL_LINES); <br>        glVertex3f(right-i*inc, bottom, front); <br>        glVertex3f(right-i*inc, bottom, back); <br>    glEnd(); <br>    glBegin(GL_LINES); <br>        glVertex3f(right, bottom, back+i*inc); <br>        glVertex3f(left,  bottom, back+i*inc); <br>    glEnd(); <br>    } <br>    glEndList(); <br>} <br> <br>void BuildCube(void) <br>{ <br>    int i, j; <br> <br>    glNewList(cube, GL_COMPILE); <br>    for (i = 0; i &lt; 6; i++) { <br>    for (j = 0; j &lt; 4; j++) { <br>        glNormal3fv(n[i]);  <br>        glBegin(GL_POLYGON); <br>        glVertex3fv(c[i][j][0]); <br>        glVertex3fv(c[i][j][1]); <br>        glVertex3fv(c[i][j][2]); <br>        glVertex3fv(c[i][j][3]); <br>        glEnd(); <br>    } <br>    } <br>    glEndList(); <br>} <br> <br>void BuildLists(void) <br>{ <br> <br>    cube = glGenLists(1); <br>    BuildCube(); <br> <br>    cage = glGenLists(2); <br>    BuildCage(); <br> <br>    cylinder = glGenLists(3); <br>    BuildCylinder(60); <br> <br>    torus = glGenLists(4); <br>    BuildTorus(0.65, 20, .85, 65); <br> <br>    genericObject = torus; <br>} <br> <br>void SetDeepestColor(void) <br>{ <br>    int redBits, greenBits, blueBits; <br> <br>    glGetIntegerv(GL_RED_BITS, &amp;redBits); <br>    glGetIntegerv(GL_GREEN_BITS, &amp;greenBits); <br>    glGetIntegerv(GL_BLUE_BITS, &amp;blueBits); <br> <br>    deepestColor = (redBits &gt;= greenBits) ? AUX_RED : AUX_GREEN; <br>    deepestColor = (deepestColor &gt;= (GLenum)blueBits) ? deepestColor : AUX_BLUE; <br>} <br> <br>void SetDefaultSettings(void) <br>{ <br> <br>    magFilter = nearest; <br>    minFilter = nearest; <br>    sWrapMode = repeat; <br>    tWrapMode = repeat; <br>    textureEnvironment = modulate; <br>    autoRotate = TRUE; <br>} <br> <br>unsigned char *AlphaPadImage(int bufSize, unsigned char *inData, int alpha) <br>{ <br>    unsigned char *outData, *out_ptr, *in_ptr; <br>    int i; <br> <br>    outData = malloc(bufSize * 4); <br>    out_ptr = outData; <br>    in_ptr = inData; <br> <br>    for (i = 0; i &lt; bufSize; i++) { <br>    *out_ptr++ = *in_ptr++; <br>    *out_ptr++ = *in_ptr++; <br>    *out_ptr++ = *in_ptr++; <br>    *out_ptr++ = alpha; <br>    } <br> <br>    free (inData); <br>    return outData; <br>} <br> <br>void Init(void) <br>{ <br>    float ambient[] = {0.0, 0.0, 0.0, 1.0}; <br>    float diffuse[] = {0.0, 1.0, 0.0, 1.0}; <br>    float specular[] = {1.0, 1.0, 1.0, 1.0}; <br>    float position[] = {2.0, 2.0,  0.0, 1.0}; <br>    float fog_color[] = {0.0, 0.0, 0.0, 1.0}; <br>    float mat_ambient[] = {0.0, 0.0, 0.0, 1.0}; <br>    float mat_shininess[] = {90.0}; <br>    float mat_specular[] = {1.0, 1.0, 1.0, 1.0}; <br>    float mat_diffuse[] = {1.0, 1.0, 1.0, 1.0}; <br>    float lmodel_ambient[] = {0.0, 0.0, 0.0, 1.0}; <br>    float lmodel_twoside[] = {GL_TRUE}; <br>    float lmodel_local_viewer[] = {GL_FALSE}; <br> <br>    SetDeepestColor(); <br>    SetDefaultSettings(); <br> <br>    if (numComponents == 4) { <br>    image = auxRGBImageLoad(imageFileName); <br>    image-&gt;data = AlphaPadImage(image-&gt;sizeX*image-&gt;sizeY, <br>                                    image-&gt;data, 128); <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br>    gluBuild2DMipmaps(GL_TEXTURE_2D, numComponents,  <br>              image-&gt;sizeX, image-&gt;sizeY,  <br>              GL_RGBA, GL_UNSIGNED_BYTE, image-&gt;data); <br>    } else { <br>    image = auxRGBImageLoad(imageFileName); <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br>    gluBuild2DMipmaps(GL_TEXTURE_2D, numComponents,  <br>              image-&gt;sizeX, image-&gt;sizeY,  <br>              GL_RGB, GL_UNSIGNED_BYTE, image-&gt;data); <br>    } <br>     <br>    glFogf(GL_FOG_DENSITY, 0.125); <br>    glFogi(GL_FOG_MODE, GL_LINEAR); <br>    glFogf(GL_FOG_START, 4.0); <br>    glFogf(GL_FOG_END, 9.0); <br>    glFogfv(GL_FOG_COLOR, fog_color); <br> <br>    glDepthFunc(GL_LEQUAL); <br> <br>    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient); <br>    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse); <br>    glLightfv(GL_LIGHT0, GL_SPECULAR, specular); <br>    glLightfv(GL_LIGHT0, GL_POSITION, position); <br>     <br>    glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, mat_shininess); <br>    glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, mat_specular); <br>    glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, mat_diffuse); <br>    glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, mat_ambient); <br> <br>    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient); <br>    glLightModelfv(GL_LIGHT_MODEL_TWO_SIDE, lmodel_twoside); <br>    glShadeModel(GL_SMOOTH); <br> <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br>    glViewport(0, 0, W, H); <br>    glEnable(GL_DEPTH_TEST); <br>    glDepthFunc(GL_LEQUAL); <br> <br>    glFrontFace(GL_CW); <br>    glEnable(GL_CULL_FACE); <br>    glCullFace(GL_BACK); <br> <br>    glEnable(GL_TEXTURE_2D); <br>    glTexGeniv(GL_S, GL_TEXTURE_GEN_MODE, sphereMap); <br>    glTexGeniv(GL_T, GL_TEXTURE_GEN_MODE, sphereMap); <br>    glEnable(GL_TEXTURE_GEN_S); <br>    glEnable(GL_TEXTURE_GEN_T); <br> <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, magFilter); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minFilter); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, sWrapMode); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, tWrapMode); <br> <br>    glTexEnvfv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, textureEnvironment); <br> <br>    BuildLists(); <br>} <br> <br>void ReInit(void) <br>{ <br> <br>    if (genericObject == torus) { <br>    glEnable(GL_DEPTH_TEST); <br>    } else  { <br>    glDisable(GL_DEPTH_TEST); <br>    } <br>    if (isFogged) { <br>    textureEnvironment = modulate; <br>    } <br> <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, magFilter); <br>    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minFilter); <br>    glTexEnvfv(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, textureEnvironment); <br>} <br> <br>void CALLBACK Draw(void) <br>{ <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    glFrustum(-0.2, 0.2, -0.2, 0.2, 0.15, 9.0); <br>    glMatrixMode(GL_MODELVIEW); <br> <br>    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT); <br>    if (isFogged) { <br>    glEnable(GL_FOG); <br>    glColor3fv(auxRGBMap[deepestColor]); <br>    } else { <br>    glColor3fv(auxRGBMap[AUX_WHITE]); <br>    } <br>    glDisable(GL_LIGHTING); <br>    glDisable(GL_LIGHT0); <br>    glDisable(GL_TEXTURE_2D); <br>    glCallList(cage); <br> <br>    glPushMatrix(); <br>    glTranslatef(0.0, 0.0, zTranslate); <br>    glRotatef(xRotation, 1, 0, 0); <br>    glRotatef(yRotation, 0, 1, 0); <br> <br>    if (isLit == TRUE) { <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>    } <br> <br>    glEnable(GL_TEXTURE_2D); <br>    if (isFogged) { <br>    glDisable(GL_FOG); <br>    } <br>    glPolygonMode(GL_FRONT, GL_FILL); <br>    glColor3fv(auxRGBMap[deepestColor]); <br>    glCallList(genericObject); <br> <br>    glPopMatrix(); <br>    glFlush(); <br> <br>    if (autoRotate) { <br>    xRotation += .75; <br>    yRotation += .375; <br>    }  <br>    auxSwapBuffers(); <br>} <br> <br>void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    W = width; <br>    H = height; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_LEFT(void) <br>{ <br>    yRotation -= 0.5; <br>    autoRotate = FALSE; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_RIGHT(void) <br>{ <br>    yRotation += 0.5; <br>    autoRotate = FALSE; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_UP(void) <br>{ <br>    xRotation -= 0.5; <br>    autoRotate = FALSE; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_DOWN(void) <br>{ <br>    xRotation += 0.5; <br>    autoRotate = FALSE; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_a(void) <br>{ <br>    autoRotate = !autoRotate; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_c(void) <br>{ <br>    genericObject = (genericObject == cube) ? cylinder : cube; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_d(void) <br>{ <br>    textureEnvironment = decal; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_m(void) <br>{ <br>    textureEnvironment = modulate; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_l(void) <br>{ <br>    isLit = !isLit; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_f(void) <br>{ <br>    isFogged = !isFogged; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_t(void) <br>{ <br>    genericObject = torus; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_0(void) <br>{ <br>    magFilter = nearest; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_1(void) <br>{ <br>    magFilter = linear; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_2(void) <br>{ <br>    minFilter = nearest; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_3(void) <br>{ <br>    minFilter = linear; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_4(void) <br>{ <br>    minFilter = nearest_mipmap_nearest; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_5(void) <br>{ <br>    minFilter = nearest_mipmap_linear; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_6(void) <br>{ <br>    minFilter = linear_mipmap_nearest; <br>    ReInit(); <br>} <br> <br>static void CALLBACK Key_7(void) <br>{ <br>    minFilter = linear_mipmap_linear; <br>    ReInit(); <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    doubleBuffer = GL_FALSE; <br> <br>    numComponents = 4; <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else if (strcmp(argv[i], "-f") == 0) { <br>        if (i+1 &gt;= argc || argv[i+1][0] == '-') { <br>        //printf("-f (No file name).\n"); <br>        return GL_FALSE; <br>        } else { <br>        imageFileName = argv[++i]; <br>        } <br>    } else if (strcmp(argv[i], "-4") == 0) { <br>        numComponents = 4; <br>    } else if (strcmp(argv[i], "-3") == 0) { <br>        numComponents = 3; <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br>    GLenum type; <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    if (imageFileName == 0) { <br>    //printf("No image file.\n"); <br>    auxQuit(); <br>    } <br> <br>    auxInitPosition(0, 0, W, H); <br> <br>    type = AUX_RGB; <br>    type |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br> <br>    auxInitDisplayMode(type); <br> <br>    if (auxInitWindow("Texture Test") == GL_FALSE) { <br>        auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxKeyFunc(AUX_LEFT, Key_LEFT); <br>    auxKeyFunc(AUX_RIGHT, Key_RIGHT); <br>    auxKeyFunc(AUX_UP, Key_UP); <br>    auxKeyFunc(AUX_DOWN, Key_DOWN); <br>    auxKeyFunc(AUX_a, Key_a); <br>    auxKeyFunc(AUX_c, Key_c); <br>    auxKeyFunc(AUX_d, Key_d); <br>    auxKeyFunc(AUX_m, Key_m); <br>    auxKeyFunc(AUX_l, Key_l); <br>    auxKeyFunc(AUX_f, Key_f); <br>    auxKeyFunc(AUX_t, Key_t); <br>    auxKeyFunc(AUX_0, Key_0); <br>    auxKeyFunc(AUX_1, Key_1); <br>    auxKeyFunc(AUX_2, Key_2); <br>    auxKeyFunc(AUX_3, Key_3); <br>    auxKeyFunc(AUX_4, Key_4); <br>    auxKeyFunc(AUX_5, Key_5); <br>    auxKeyFunc(AUX_6, Key_6); <br>    auxKeyFunc(AUX_7, Key_7); <br>    auxIdleFunc(Draw); <br> <br>    auxMainLoop(NULL); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TPRIM.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3668"></a>TPRIM.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br> <br>#define PIXEL_CENTER(x) ((long)(x) + 0.5) <br> <br>#define GAP 10 <br>#define ROWS 3 <br>#define COLS 4 <br> <br>#define OPENGL_WIDTH 48 <br>#define OPENGL_HEIGHT 13 <br> <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void RotateColorMask(void ); <br>static void CALLBACK Key_1(void ); <br>static void CALLBACK Key_2(void ); <br>static void CALLBACK Key_3(void ); <br>static void Viewport(GLint row, GLint column); <br>static void Point(void ); <br>static void Lines(void ); <br>static void LineStrip(void ); <br>static void LineLoop(void ); <br>static void Bitmap(void ); <br>static void Triangles(void ); <br>static void TriangleStrip(void ); <br>static void TriangleFan(void ); <br>static void Rect(void ); <br>static void xPolygon(void ); <br>static void Quads(void ); <br>static void QuadStrip(void ); <br>static void CALLBACK Draw(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum rgb, doubleBuffer, windType; <br>GLint windW, windH; <br> <br>GLenum mode1, mode2; <br>GLint boxW, boxH; <br>GLubyte OpenGL_bits[] = { <br>   0x00, 0x03, 0x00, 0x00, 0x00, 0x00,  <br>   0x7f, 0xfb, 0xff, 0xff, 0xff, 0x01, <br>   0x7f, 0xfb, 0xff, 0xff, 0xff, 0x01,  <br>   0x00, 0x03, 0x00, 0x00, 0x00, 0x00, <br>   0x3e, 0x8f, 0xb7, 0xf9, 0xfc, 0x01,  <br>   0x63, 0xdb, 0xb0, 0x8d, 0x0d, 0x00, <br>   0x63, 0xdb, 0xb7, 0x8d, 0x0d, 0x00,  <br>   0x63, 0xdb, 0xb6, 0x8d, 0x0d, 0x00, <br>   0x63, 0x8f, 0xf3, 0xcc, 0x0d, 0x00,  <br>   0x63, 0x00, 0x00, 0x0c, 0x4c, 0x0a, <br>   0x63, 0x00, 0x00, 0x0c, 0x4c, 0x0e,  <br>   0x63, 0x00, 0x00, 0x8c, 0xed, 0x0e, <br>   0x3e, 0x00, 0x00, 0xf8, 0x0c, 0x00,  <br>}; <br> <br> <br>static void Init(void) <br>{ <br> <br>    mode1 = GL_TRUE; <br>    mode2 = GL_TRUE; <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    windW = (GLint)width; <br>    windH = (GLint)height; <br>} <br> <br>static void RotateColorMask(void) <br>{ <br>    static GLint rotation = 0; <br>     <br>    rotation = (rotation + 1) &amp; 0x3; <br>    switch (rotation) { <br>      case 0: <br>    glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE); <br>    glIndexMask( 0xff ); <br>    break; <br>      case 1: <br>    glColorMask(GL_FALSE, GL_TRUE, GL_TRUE, GL_TRUE); <br>    glIndexMask(0xFE); <br>    break; <br>      case 2: <br>    glColorMask(GL_TRUE, GL_FALSE, GL_TRUE, GL_TRUE); <br>    glIndexMask(0xFD); <br>    break; <br>      case 3: <br>    glColorMask(GL_TRUE, GL_TRUE, GL_FALSE, GL_TRUE); <br>    glIndexMask(0xFB); <br>    break; <br>    } <br>} <br> <br>static void CALLBACK Key_1(void) <br>{ <br>    mode1 = !mode1; <br>} <br> <br>static void CALLBACK Key_2(void) <br>{ <br>    mode2 = !mode2; <br>} <br> <br>static void CALLBACK Key_3(void) <br>{ <br>    RotateColorMask(); <br>} <br> <br>static void Viewport(GLint row, GLint column) <br>{ <br>    GLint x, y; <br> <br>    boxW = (windW - (COLS + 1) * GAP) / COLS; <br>    boxH = (windH - (ROWS + 1) * GAP) / ROWS; <br> <br>    x = GAP + column * (boxW + GAP); <br>    y = GAP + row * (boxH + GAP); <br> <br>    glViewport(x, y, boxW, boxH); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    glOrtho(-boxW/2, boxW/2, -boxH/2, boxH/2, 0.0, 1.0); <br>    glMatrixMode(GL_MODELVIEW); <br> <br>    glEnable(GL_SCISSOR_TEST); <br>    glScissor(x, y, boxW, boxH); <br>} <br> <br>static void Point(void) <br>{ <br>    GLint i; <br> <br>    glBegin(GL_POINTS); <br>    AUX_SETCOLOR(windType, AUX_WHITE); <br>    glVertex2i(0, 0); <br>    for (i = 1; i &lt; 8; i++) { <br>        GLint j = i * 2; <br>        AUX_SETCOLOR(windType, i + AUX_RED - 1); <br>        glVertex2i(-j, -j); <br>        glVertex2i(-j, 0); <br>        glVertex2i(-j, j); <br>        glVertex2i(0, j); <br>        glVertex2i(j, j); <br>        glVertex2i(j, 0); <br>        glVertex2i(j, -j); <br>        glVertex2i(0, -j); <br>    } <br>    glEnd(); <br>} <br> <br>static void Lines(void) <br>{ <br>    GLint i; <br> <br>    glPushMatrix(); <br> <br>    glTranslatef(-12, 0, 0); <br>    for (i = 1; i &lt; 8; i++) { <br>    AUX_SETCOLOR(windType, i + AUX_RED - 1); <br>    glBegin(GL_LINES); <br>        glVertex2i(-boxW/4, -boxH/4); <br>        glVertex2i(boxW/4, boxH/4); <br>    glEnd(); <br>    glTranslatef(4, 0, 0); <br>    } <br> <br>    glPopMatrix(); <br> <br>    glBegin(GL_LINES); <br>    glVertex2i(0, 0); <br>    glEnd(); <br>} <br> <br>static void LineStrip(void) <br>{ <br> <br>    glBegin(GL_LINE_STRIP); <br>    AUX_SETCOLOR(windType, AUX_RED); <br>    glVertex2f(PIXEL_CENTER(-boxW/4), PIXEL_CENTER(-boxH/4)); <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br>    glVertex2f(PIXEL_CENTER(-boxW/4), PIXEL_CENTER(boxH/4)); <br>    AUX_SETCOLOR(windType, AUX_BLUE); <br>    glVertex2f(PIXEL_CENTER(boxW/4), PIXEL_CENTER(boxH/4)); <br>    AUX_SETCOLOR(windType, AUX_WHITE); <br>    glVertex2f(PIXEL_CENTER(boxW/4), PIXEL_CENTER(-boxH/4)); <br>    glEnd(); <br> <br>    glBegin(GL_LINE_STRIP); <br>    glVertex2i(0, 0); <br>    glEnd(); <br>} <br> <br>static void LineLoop(void) <br>{ <br> <br>    glBegin(GL_LINE_LOOP); <br>    AUX_SETCOLOR(windType, AUX_RED); <br>    glVertex2f(PIXEL_CENTER(-boxW/4), PIXEL_CENTER(-boxH/4)); <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br>    glVertex2f(PIXEL_CENTER(-boxW/4), PIXEL_CENTER(boxH/4)); <br>    AUX_SETCOLOR(windType, AUX_BLUE); <br>    glVertex2f(PIXEL_CENTER(boxW/4), PIXEL_CENTER(boxH/4)); <br>    AUX_SETCOLOR(windType, AUX_WHITE); <br>    glVertex2f(PIXEL_CENTER(boxW/4), PIXEL_CENTER(-boxH/4)); <br>    glEnd(); <br> <br>    glEnable(GL_LOGIC_OP); <br>    glLogicOp(GL_XOR); <br> <br>    glEnable(GL_BLEND); <br>    glBlendFunc(GL_ONE, GL_ONE); <br> <br>    AUX_SETCOLOR(windType, AUX_MAGENTA); <br>    glBegin(GL_LINE_LOOP); <br>    glVertex2f(PIXEL_CENTER(-boxW/8), PIXEL_CENTER(-boxH/8)); <br>    glVertex2f(PIXEL_CENTER(-boxW/8), PIXEL_CENTER(boxH/8)); <br>    glEnd(); <br>    glBegin(GL_LINE_LOOP); <br>    glVertex2f(PIXEL_CENTER(-boxW/8), PIXEL_CENTER(boxH/8+5)); <br>    glVertex2f(PIXEL_CENTER(boxW/8), PIXEL_CENTER(boxH/8+5)); <br>    glEnd(); <br>    glDisable(GL_LOGIC_OP); <br>    glDisable(GL_BLEND); <br> <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br>    glBegin(GL_POINTS); <br>    glVertex2i(0, 0); <br>    glEnd(); <br> <br>    glBegin(GL_LINE_LOOP); <br>    glVertex2i(0, 0); <br>    glEnd(); <br>} <br> <br>static void Bitmap(void) <br>{ <br> <br>    glBegin(GL_LINES); <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br>    glVertex2i(-boxW/2, 0); <br>    glVertex2i(boxW/2, 0); <br>    glVertex2i(0, -boxH/2); <br>    glVertex2i(0, boxH/2); <br>    AUX_SETCOLOR(windType, AUX_RED); <br>    glVertex2i(0, -3); <br>    glVertex2i(0, -3+OPENGL_HEIGHT); <br>    AUX_SETCOLOR(windType, AUX_BLUE); <br>    glVertex2i(0, -3); <br>    glVertex2i(OPENGL_WIDTH, -3); <br>    glEnd(); <br> <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br> <br>    glPixelStorei(GL_UNPACK_LSB_FIRST, GL_TRUE); <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br> <br>    glRasterPos2i(0, 0); <br>    glBitmap(OPENGL_WIDTH, OPENGL_HEIGHT, 0, 3, 0.0, 0.0, OpenGL_bits); <br>} <br> <br>static void Triangles(void) <br>{ <br> <br>    glBegin(GL_TRIANGLES); <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br>    glVertex2i(-boxW/4, -boxH/4); <br>    AUX_SETCOLOR(windType, AUX_RED); <br>    glVertex2i(-boxW/8, -boxH/16); <br>    AUX_SETCOLOR(windType, AUX_BLUE); <br>    glVertex2i(boxW/8, -boxH/16); <br> <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br>    glVertex2i(-boxW/4, boxH/4); <br>    AUX_SETCOLOR(windType, AUX_RED); <br>    glVertex2i(-boxW/8, boxH/16); <br>    AUX_SETCOLOR(windType, AUX_BLUE); <br>    glVertex2i(boxW/8, boxH/16); <br>    glEnd(); <br> <br>    glBegin(GL_TRIANGLES); <br>    glVertex2i(0, 0); <br>    glVertex2i(-100, 100); <br>    glEnd(); <br>} <br> <br>static void TriangleStrip(void) <br>{ <br> <br>    glBegin(GL_TRIANGLE_STRIP); <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br>    glVertex2i(-boxW/4, -boxH/4); <br>    AUX_SETCOLOR(windType, AUX_RED); <br>    glVertex2i(-boxW/4, boxH/4); <br>    AUX_SETCOLOR(windType, AUX_BLUE); <br>    glVertex2i(0, -boxH/4); <br>    AUX_SETCOLOR(windType, AUX_WHITE); <br>    glVertex2i(0, boxH/4); <br>    AUX_SETCOLOR(windType, AUX_CYAN); <br>    glVertex2i(boxW/4, -boxH/4); <br>    AUX_SETCOLOR(windType, AUX_YELLOW); <br>    glVertex2i(boxW/4, boxH/4); <br>    glEnd(); <br> <br>    glBegin(GL_TRIANGLE_STRIP); <br>    glVertex2i(0, 0); <br>    glVertex2i(-100, 100); <br>    glEnd(); <br>} <br> <br>static void TriangleFan(void) <br>{ <br>    GLint vx[8][2]; <br>    GLint x0, y0, x1, y1, x2, y2, x3, y3; <br>    GLint i; <br> <br>    y0 = -boxH/4; <br>    y1 = y0 + boxH/2/3; <br>    y2 = y1 + boxH/2/3; <br>    y3 = boxH/4; <br>    x0 = -boxW/4; <br>    x1 = x0 + boxW/2/3; <br>    x2 = x1 + boxW/2/3; <br>    x3 = boxW/4; <br> <br>    vx[0][0] = x0; vx[0][1] = y1; <br>    vx[1][0] = x0; vx[1][1] = y2; <br>    vx[2][0] = x1; vx[2][1] = y3; <br>    vx[3][0] = x2; vx[3][1] = y3; <br>    vx[4][0] = x3; vx[4][1] = y2; <br>    vx[5][0] = x3; vx[5][1] = y1; <br>    vx[6][0] = x2; vx[6][1] = y0; <br>    vx[7][0] = x1; vx[7][1] = y0; <br> <br>    glBegin(GL_TRIANGLE_FAN); <br>    AUX_SETCOLOR(windType, AUX_WHITE); <br>    glVertex2i(0, 0); <br>    for (i = 0; i &lt; 8; i++) { <br>        AUX_SETCOLOR(windType, AUX_WHITE-i); <br>        glVertex2iv(vx[i]); <br>    } <br>    glEnd(); <br> <br>    glBegin(GL_TRIANGLE_FAN); <br>    glVertex2i(0, 0); <br>    glVertex2i(-100, 100); <br>    glEnd(); <br>} <br> <br>static void Rect(void) <br>{ <br> <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br>    glRecti(-boxW/4, -boxH/4, boxW/4, boxH/4); <br>} <br> <br>static void xPolygon(void) <br>{ <br>    GLint vx[8][2]; <br>    GLint x0, y0, x1, y1, x2, y2, x3, y3; <br>    GLint i; <br> <br>    y0 = -boxH/4; <br>    y1 = y0 + boxH/2/3; <br>    y2 = y1 + boxH/2/3; <br>    y3 = boxH/4; <br>    x0 = -boxW/4; <br>    x1 = x0 + boxW/2/3; <br>    x2 = x1 + boxW/2/3; <br>    x3 = boxW/4; <br> <br>    vx[0][0] = x0; vx[0][1] = y1; <br>    vx[1][0] = x0; vx[1][1] = y2; <br>    vx[2][0] = x1; vx[2][1] = y3; <br>    vx[3][0] = x2; vx[3][1] = y3; <br>    vx[4][0] = x3; vx[4][1] = y2; <br>    vx[5][0] = x3; vx[5][1] = y1; <br>    vx[6][0] = x2; vx[6][1] = y0; <br>    vx[7][0] = x1; vx[7][1] = y0; <br> <br>    glBegin(GL_POLYGON); <br>    for (i = 0; i &lt; 8; i++) { <br>        AUX_SETCOLOR(windType, AUX_WHITE-i); <br>        glVertex2iv(vx[i]); <br>    } <br>    glEnd(); <br> <br>    glBegin(GL_POLYGON); <br>    glVertex2i(0, 0); <br>    glVertex2i(100, 100); <br>    glEnd(); <br>} <br> <br>static void Quads(void) <br>{ <br> <br>    glBegin(GL_QUADS); <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br>    glVertex2i(-boxW/4, -boxH/4); <br>    AUX_SETCOLOR(windType, AUX_RED); <br>    glVertex2i(-boxW/8, -boxH/16); <br>    AUX_SETCOLOR(windType, AUX_BLUE); <br>    glVertex2i(boxW/8, -boxH/16); <br>    AUX_SETCOLOR(windType, AUX_WHITE); <br>    glVertex2i(boxW/4, -boxH/4); <br> <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br>    glVertex2i(-boxW/4, boxH/4); <br>    AUX_SETCOLOR(windType, AUX_RED); <br>    glVertex2i(-boxW/8, boxH/16); <br>    AUX_SETCOLOR(windType, AUX_BLUE); <br>    glVertex2i(boxW/8, boxH/16); <br>    AUX_SETCOLOR(windType, AUX_WHITE); <br>    glVertex2i(boxW/4, boxH/4); <br>    glEnd(); <br> <br>    glBegin(GL_QUADS); <br>    glVertex2i(0, 0); <br>    glVertex2i(100, 100); <br>    glVertex2i(-100, 100); <br>    glEnd(); <br>} <br> <br>static void QuadStrip(void) <br>{ <br> <br>    glBegin(GL_QUAD_STRIP); <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br>    glVertex2i(-boxW/4, -boxH/4); <br>    AUX_SETCOLOR(windType, AUX_RED); <br>    glVertex2i(-boxW/4, boxH/4); <br>    AUX_SETCOLOR(windType, AUX_BLUE); <br>    glVertex2i(0, -boxH/4); <br>    AUX_SETCOLOR(windType, AUX_WHITE); <br>    glVertex2i(0, boxH/4); <br>    AUX_SETCOLOR(windType, AUX_CYAN); <br>    glVertex2i(boxW/4, -boxH/4); <br>    AUX_SETCOLOR(windType, AUX_YELLOW); <br>    glVertex2i(boxW/4, boxH/4); <br>    glEnd(); <br> <br>    glBegin(GL_QUAD_STRIP); <br>    glVertex2i(0, 0); <br>    glVertex2i(100, 100); <br>    glVertex2i(-100, 100); <br>    glEnd(); <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br> <br>    glViewport(0, 0, windW, windH); <br>    glDisable(GL_SCISSOR_TEST); <br> <br>    glPushAttrib(GL_COLOR_BUFFER_BIT); <br> <br>    glColorMask(1, 1, 1, 1); <br>    glIndexMask((GLuint)~0); <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br>    glClear(GL_COLOR_BUFFER_BIT); <br> <br>    glPopAttrib(); <br> <br>    if (mode1) { <br>    glShadeModel(GL_SMOOTH); <br>    } else { <br>    glShadeModel(GL_FLAT); <br>    } <br> <br>    if (mode2) { <br>    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL); <br>    } else { <br>    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE); <br>    } <br> <br>    Viewport(0, 0); Point(); <br>    Viewport(0, 1); Lines(); <br>    Viewport(0, 2); LineStrip(); <br>    Viewport(0, 3); LineLoop(); <br> <br>    Viewport(1, 0); Bitmap(); <br> <br>    Viewport(1, 1); TriangleFan(); <br>    Viewport(1, 2); Triangles(); <br>    Viewport(1, 3); TriangleStrip(); <br> <br>    Viewport(2, 0); Rect(); <br>    Viewport(2, 1); xPolygon(); <br>    Viewport(2, 2); Quads(); <br>    Viewport(2, 3); QuadStrip(); <br> <br>    glFlush(); <br> <br>    if (doubleBuffer) { <br>    auxSwapBuffers(); <br>    } <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    rgb = GL_TRUE; <br>    doubleBuffer = GL_FALSE; <br> <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-ci") == 0) { <br>        rgb = GL_FALSE; <br>    } else if (strcmp(argv[i], "-rgb") == 0) { <br>        rgb = GL_TRUE; <br>    } else if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    windW = 600; <br>    windH = 300; <br>    auxInitPosition(0, 0, windW, windH); <br> <br>    windType |= (rgb) ? AUX_RGB : AUX_INDEX; <br>    windType |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br> <br>    auxInitDisplayMode(windType); <br> <br>    if (auxInitWindow("Primitive Test") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxKeyFunc(AUX_1, Key_1); <br>    auxKeyFunc(AUX_2, Key_2); <br>    auxKeyFunc(AUX_3, Key_3); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

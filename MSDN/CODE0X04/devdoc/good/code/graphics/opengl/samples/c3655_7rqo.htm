<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TCOPY.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3660"></a>TCOPY.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Key_Z(void ); <br>static void CALLBACK Key_z(void ); <br>static GLenum CALLBACK Mouse_left(struct _AUX_EVENTREC *event); <br>static void CALLBACK Draw(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum doubleBuffer; <br>GLint windW, windH; <br> <br>char *fileName = 0; <br>AUX_RGBImageRec *xximage; <br>float point[3]; <br>float zoom; <br>GLint x, y; <br> <br> <br>static void Init(void) <br>{ <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br> <br>    x = 0; <br>    y = windH; <br>    zoom = 1.8; <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    windW = (GLint)width; <br>    windH = (GLint)height; <br> <br>    glViewport(0, 0, windW, windH); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluOrtho2D(0, windW, 0, windH); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>static void CALLBACK Key_Z(void) <br>{ <br>    zoom += 0.2; <br>} <br> <br>static void CALLBACK Key_z(void) <br>{ <br>    zoom -= 0.2; <br>    if (zoom &lt; 0.2) { <br>        zoom = 0.2; <br>    } <br>} <br> <br>static GLenum CALLBACK Mouse_left(AUX_EVENTREC *event) <br>{ <br> <br>    x = event-&gt;data[AUX_MOUSEX]; <br>    y = event-&gt;data[AUX_MOUSEY]; <br>    return GL_TRUE; <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br> <br>    glClear(GL_COLOR_BUFFER_BIT); <br> <br>    point[0] = (windW / 2) - (xximage-&gt;sizeX / 2); <br>    point[1] = (windH / 2) - (xximage-&gt;sizeY / 2); <br>    point[2] = 0; <br>    glRasterPos3fv(point); <br> <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br>    glPixelZoom(1.0, 1.0); <br>    glDrawPixels(xximage-&gt;sizeX, xximage-&gt;sizeY, GL_RGB, GL_UNSIGNED_BYTE, <br>         xximage-&gt;data); <br> <br>    point[0] = (float)x; <br>    point[1] = windH - (float)y; <br>    point[2] = 0.0; <br>    glRasterPos3fv(point); <br> <br>    glPixelZoom(zoom, zoom); <br>    glCopyPixels((windW/2)-(xximage-&gt;sizeX/2), <br>         (windH/2)-(xximage-&gt;sizeY/2), <br>         xximage-&gt;sizeX, xximage-&gt;sizeY, GL_COLOR); <br> <br>    glFlush(); <br> <br>    if (doubleBuffer) { <br>    auxSwapBuffers(); <br>    } <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    doubleBuffer = GL_FALSE; <br> <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else if (strcmp(argv[i], "-f") == 0) { <br>        if (i+1 &gt;= argc || argv[i+1][0] == '-') { <br>        //printf("-f (No file name).\n"); <br>        return GL_FALSE; <br>        } else { <br>        fileName = argv[++i]; <br>        } <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br>    GLenum type; <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    if (fileName == 0) { <br>    //printf("No image file.\n"); <br>    auxQuit(); <br>    } <br> <br>    xximage = auxRGBImageLoad(fileName); <br> <br>    windW = 300; <br>    windH = 300; <br>    auxInitPosition(0, 0, windW, windH); <br> <br>    type = AUX_RGB; <br>    type |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br> <br>    auxInitDisplayMode(type); <br> <br>    if (auxInitWindow("Copy Test") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxKeyFunc(AUX_Z, Key_Z); <br>    auxKeyFunc(AUX_z, Key_z); <br>    auxMouseFunc(AUX_LEFTBUTTON, AUX_MOUSEDOWN, Mouse_left); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

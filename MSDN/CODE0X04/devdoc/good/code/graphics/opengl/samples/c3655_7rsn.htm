<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TTRI.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3677"></a>TTRI.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br> <br>#define SOLID 1 <br>#define LINE 2 <br>#define POINT 3 <br> <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Key_LEFT(void ); <br>static void CALLBACK Key_RIGHT(void ); <br>static void CALLBACK Key_Z(void ); <br>static void CALLBACK Key_z(void ); <br>static void CALLBACK Key_1(void ); <br>static void CALLBACK Key_2(void ); <br>static void CALLBACK Key_3(void ); <br>static void CALLBACK Key_4(void ); <br>static void CALLBACK Key_5(void ); <br>static void CALLBACK Key_6(void ); <br>static void CALLBACK Key_7(void ); <br>static void CALLBACK Key_8(void ); <br>static void CALLBACK Key_9(void ); <br>static void CALLBACK Key_v(void ); <br>static void CALLBACK Key_s(void ); <br>static void CALLBACK Key_h(void ); <br>static void CALLBACK Key_o(void ); <br>static void CALLBACK Key_m(void ); <br>static void CALLBACK Key_0(void ); <br>static void BeginPrim(void ); <br>static void EndPrim(void ); <br>static void CALLBACK Draw(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum rgb, doubleBuffer, windType; <br>GLint windW, windH; <br> <br>GLenum dithering = GL_TRUE; <br>GLenum showVerticies = GL_TRUE; <br>GLenum hideBottomTriangle = GL_FALSE; <br>GLenum outline = GL_TRUE; <br>GLenum culling = GL_FALSE; <br>GLenum winding = GL_FALSE; <br>GLenum face = GL_FALSE; <br>GLenum state = SOLID; <br>GLenum aaMode = GL_FALSE; <br>GLenum shade = GL_TRUE; <br> <br>GLint color1, color2, color3; <br> <br>float zRotation = 90.0; <br>float zoom = 1.0; <br> <br>float boxA[3] = {-100, -100, 0}; <br>float boxB[3] = { 100, -100, 0}; <br>float boxC[3] = { 100,  100, 0}; <br>float boxD[3] = {-100,  100, 0}; <br> <br>float p0[3] = {-125,-80, 0}; <br>float p1[3] = {-125, 80, 0}; <br>float p2[3] = { 172,  0, 0}; <br> <br> <br>static void Init(void) <br>{ <br>    float r, g, b; <br>    float percent1, percent2; <br>    GLint i, j; <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br> <br>    glLineStipple(1, 0xF0F0); <br> <br>    glEnable(GL_SCISSOR_TEST); <br> <br>    if (!rgb) { <br>    for (j = 0; j &lt;= 12; j++) { <br>        if (j &lt;= 6) { <br>        percent1 = j / 6.0; <br>        r = 1.0 - 0.8 * percent1; <br>        g = 0.2 + 0.8 * percent1; <br>        b = 0.2; <br>        } else { <br>        percent1 = (j - 6) / 6.0; <br>        r = 0.2; <br>        g = 1.0 - 0.8 * percent1; <br>        b = 0.2 + 0.8 * percent1; <br>        } <br>        auxSetOneColor(j+18, r, g, b); <br>        for (i = 0; i &lt; 16; i++) { <br>        percent2 = i / 15.0; <br>        auxSetOneColor(j*16+1+32, r*percent2, g*percent2, b*percent2); <br>        } <br>    } <br>    color1 = 18; <br>    color2 = 24; <br>    color3 = 30; <br>    } <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    windW = (GLint)width; <br>    windH = (GLint)height; <br>} <br> <br>static void CALLBACK Key_LEFT(void) <br>{ <br>    zRotation += 0.5; <br>} <br> <br>static void CALLBACK Key_RIGHT(void) <br>{ <br>    zRotation -= 0.5; <br>} <br> <br>static void CALLBACK Key_Z(void) <br>{ <br>    zoom *= 0.75; <br>} <br> <br>static void CALLBACK Key_z(void) <br>{ <br>    zoom /= 0.75; <br>    if (zoom &gt; 10) { <br>        zoom = 10; <br>    } <br>} <br> <br>static void CALLBACK Key_1(void) <br>{ <br>    glPolygonMode(GL_FRONT_AND_BACK, GL_POINT); <br>} <br> <br>static void CALLBACK Key_2(void) <br>{ <br>    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE); <br>} <br> <br>static void CALLBACK Key_3(void) <br>{ <br>    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL); <br>} <br> <br>static void CALLBACK Key_4(void) <br>{ <br>    state = POINT; <br>} <br> <br>static void CALLBACK Key_5(void) <br>{ <br>    state = LINE; <br>} <br> <br>static void CALLBACK Key_6(void) <br>{ <br>    state = SOLID; <br>} <br> <br>static void CALLBACK Key_7(void) <br>{ <br>    culling = !culling; <br>} <br> <br>static void CALLBACK Key_8(void) <br>{ <br>    winding = !winding; <br>} <br> <br>static void CALLBACK Key_9(void) <br>{ <br>    face = !face; <br>} <br> <br>static void CALLBACK Key_v(void) <br>{ <br>    showVerticies = !showVerticies; <br>} <br> <br>static void CALLBACK Key_s(void) <br>{ <br>    shade = !shade; <br>    (shade) ? glShadeModel(GL_SMOOTH) : glShadeModel(GL_FLAT); <br>} <br> <br>static void CALLBACK Key_h(void) <br>{ <br>    hideBottomTriangle = !hideBottomTriangle; <br>} <br> <br>static void CALLBACK Key_o(void) <br>{ <br>    outline = !outline; <br>} <br> <br>static void CALLBACK Key_m(void) <br>{ <br>    dithering = !dithering; <br>} <br> <br>static void CALLBACK Key_0(void) <br>{ <br>    aaMode = !aaMode; <br>    if (aaMode) { <br>        glEnable(GL_POLYGON_SMOOTH); <br>        glEnable(GL_BLEND); <br>        glBlendFunc(GL_SRC_ALPHA, GL_ONE); <br>        if (!rgb) { <br>        color1 = 32; <br>        color2 = 128; <br>        color3 = 224; <br>        } <br>    } else { <br>        glDisable(GL_POLYGON_SMOOTH); <br>        glDisable(GL_BLEND); <br>        if (!rgb) { <br>        color1 = 18; <br>        color2 = 24; <br>        color3 = 30; <br>        } <br>    } <br>} <br> <br>static void BeginPrim(void) <br>{ <br> <br>    switch (state) { <br>      case SOLID: <br>    glBegin(GL_POLYGON); <br>    break; <br>      case LINE: <br>    glBegin(GL_LINE_LOOP); <br>    break; <br>      case POINT: <br>    glBegin(GL_POINTS); <br>    break; <br>    } <br>} <br> <br>static void EndPrim(void) <br>{ <br> <br>    glEnd(); <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br>    float scaleX, scaleY; <br> <br>    glViewport(0, 0, windW, windH); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluOrtho2D(-175, 175, -175, 175); <br>    glMatrixMode(GL_MODELVIEW); <br> <br>    glScissor(0, 0, windW, windH); <br> <br>    (culling) ? glEnable(GL_CULL_FACE) : glDisable(GL_CULL_FACE); <br>    (winding) ? glFrontFace(GL_CCW) : glFrontFace(GL_CW); <br>    (face) ? glCullFace(GL_FRONT) : glCullFace(GL_BACK); <br> <br>    (dithering) ? glEnable(GL_DITHER) : glDisable(GL_DITHER); <br> <br>    glClear(GL_COLOR_BUFFER_BIT); <br> <br>    AUX_SETCOLOR(windType, AUX_GREEN); <br>    glBegin(GL_LINE_LOOP); <br>    glVertex3fv(boxA); <br>    glVertex3fv(boxB); <br>    glVertex3fv(boxC); <br>    glVertex3fv(boxD); <br>    glEnd(); <br> <br>    if (!hideBottomTriangle) { <br>    glPushMatrix(); <br> <br>    glScalef(zoom, zoom, zoom); <br>    glRotatef(zRotation, 0, 0, 1); <br> <br>    AUX_SETCOLOR(windType, AUX_BLUE); <br>    BeginPrim(); <br>        glVertex3fv(p0); <br>        glVertex3fv(p1); <br>        glVertex3fv(p2); <br>    EndPrim(); <br> <br>    if (showVerticies) { <br>        (rgb) ? glColor3fv(auxRGBMap[AUX_RED]) : glIndexf(color1); <br>        glRectf(p0[0]-2, p0[1]-2, p0[0]+2, p0[1]+2); <br>        (rgb) ? glColor3fv(auxRGBMap[AUX_GREEN]) : glIndexf(color2); <br>        glRectf(p1[0]-2, p1[1]-2, p1[0]+2, p1[1]+2); <br>        (rgb) ? glColor3fv(auxRGBMap[AUX_BLUE]) : glIndexf(color3); <br>        glRectf(p2[0]-2, p2[1]-2, p2[0]+2, p2[1]+2); <br>    } <br> <br>    glPopMatrix(); <br>    } <br> <br>    scaleX = (float)(windW - 20) / 2 / 175 * (175 - 100) + 10; <br>    scaleY = (float)(windH - 20) / 2 / 175 * (175 - 100) + 10; <br> <br>    glViewport(scaleX, scaleY, windW-2*scaleX, windH-2*scaleY); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluOrtho2D(-100, 100, -100, 100); <br>    glMatrixMode(GL_MODELVIEW); <br> <br>    glScissor(scaleX, scaleY, windW-2*scaleX, windH-2*scaleY); <br> <br>    glPushMatrix(); <br> <br>    glScalef(zoom, zoom, zoom); <br>    glRotatef(zRotation, 0,0,1); <br> <br>    glPointSize(10); <br>    glLineWidth(5); <br>    glEnable(GL_POINT_SMOOTH); <br>    glEnable(GL_LINE_STIPPLE); <br>    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); <br> <br>    AUX_SETCOLOR(windType, AUX_RED); <br>    BeginPrim(); <br>    (rgb) ? glColor3fv(auxRGBMap[AUX_RED]) : glIndexf(color1); <br>    glVertex3fv(p0); <br>    (rgb) ? glColor3fv(auxRGBMap[AUX_GREEN]) : glIndexf(color2); <br>    glVertex3fv(p1); <br>    (rgb) ? glColor3fv(auxRGBMap[AUX_BLUE]) : glIndexf(color3); <br>    glVertex3fv(p2); <br>    EndPrim(); <br> <br>    glPointSize(1); <br>    glLineWidth(1); <br>    glDisable(GL_POINT_SMOOTH); <br>    glDisable(GL_LINE_STIPPLE); <br>    glBlendFunc(GL_ONE, GL_ZERO); <br> <br>    if (outline) { <br>    AUX_SETCOLOR(windType, AUX_WHITE); <br>    glBegin(GL_LINE_LOOP); <br>        glVertex3fv(p0); <br>        glVertex3fv(p1); <br>        glVertex3fv(p2); <br>    glEnd(); <br>    } <br> <br>    glPopMatrix(); <br> <br>    glFlush(); <br> <br>    if (doubleBuffer) { <br>    auxSwapBuffers(); <br>    } <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    rgb = GL_TRUE; <br>    doubleBuffer = GL_FALSE; <br> <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-ci") == 0) { <br>        rgb = GL_FALSE; <br>    } else if (strcmp(argv[i], "-rgb") == 0) { <br>        rgb = GL_TRUE; <br>    } else if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    windW = 600; <br>    windH = 300; <br>    auxInitPosition(0, 0, windW, windH); <br> <br>    windType |= (rgb) ? AUX_RGB : AUX_INDEX; <br>    windType |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br> <br>    auxInitDisplayMode(windType); <br> <br>    if (auxInitWindow("Triangle Test") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxKeyFunc(AUX_LEFT, Key_LEFT); <br>    auxKeyFunc(AUX_RIGHT, Key_RIGHT); <br>    auxKeyFunc(AUX_Z, Key_Z); <br>    auxKeyFunc(AUX_z, Key_z); <br>    auxKeyFunc(AUX_1, Key_1); <br>    auxKeyFunc(AUX_2, Key_2); <br>    auxKeyFunc(AUX_3, Key_3); <br>    auxKeyFunc(AUX_4, Key_4); <br>    auxKeyFunc(AUX_5, Key_5); <br>    auxKeyFunc(AUX_6, Key_6); <br>    auxKeyFunc(AUX_7, Key_7); <br>    auxKeyFunc(AUX_8, Key_8); <br>    auxKeyFunc(AUX_9, Key_9); <br>    auxKeyFunc(AUX_v, Key_v); <br>    auxKeyFunc(AUX_s, Key_s); <br>    auxKeyFunc(AUX_h, Key_h); <br>    auxKeyFunc(AUX_o, Key_o); <br>    auxKeyFunc(AUX_m, Key_m); <br>    auxKeyFunc(AUX_0, Key_0); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

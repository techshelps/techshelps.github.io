<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TDEPTH.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3661"></a>TDEPTH.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br> <br>#define CI_OFFSET_1 32 <br>#define CI_OFFSET_2 48 <br> <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Key_1(void ); <br>static void CALLBACK Key_2(void ); <br>static void CALLBACK Draw(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum rgb, doubleBuffer, directRender; <br> <br>GLenum antiAlias, stipple; <br>GLubyte stippleBits[32*4] = { <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, <br>}; <br> <br> <br>static void Init(void) <br>{ <br>    GLint i; <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br>    glClearIndex(0.0); <br> <br>    if (!rgb) { <br>    for (i = 0; i &lt; 16; i++) { <br>        auxSetOneColor(i+CI_OFFSET_1, 0.0, 0.0, i/15.0); <br>        auxSetOneColor(i+CI_OFFSET_2, 0.0, i/15.0, 0.0); <br>    } <br>    } <br> <br>    antiAlias = GL_FALSE; <br>    stipple = GL_FALSE; <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    glViewport(0, 0, (GLint)width, (GLint)height); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    glOrtho(-1.0, 1.0, -1.0, 1.0, -0.5, 1000.0); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>static void CALLBACK Key_1(void) <br>{ <br>    antiAlias = !antiAlias; <br>} <br> <br>static void CALLBACK Key_2(void) <br>{ <br>    stipple = !stipple; <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br>    GLint ci1, ci2; <br>    float blue[3] = { 0.0, 0.0, 1.0 }; <br>    float green[3] = { 0.0, 1.0, 0.0 }; <br> <br>    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT); <br> <br>    if (antiAlias) { <br>    ci1 = CI_OFFSET_1; <br>    ci2 = CI_OFFSET_2; <br>    glBlendFunc(GL_SRC_ALPHA, GL_ONE); <br>    glEnable(GL_BLEND); <br>    glEnable(GL_POLYGON_SMOOTH); <br>    glDisable(GL_DEPTH_TEST); <br>    } else { <br>    ci1 = AUX_BLUE; <br>    ci2 = AUX_GREEN; <br>    glDisable(GL_BLEND); <br>    glDisable(GL_POLYGON_SMOOTH); <br>    glEnable(GL_DEPTH_TEST); <br>    } <br> <br>    if (stipple) { <br>    glPolygonStipple(stippleBits); <br>    glEnable(GL_POLYGON_STIPPLE); <br>    } else { <br>    glDisable(GL_POLYGON_STIPPLE); <br>    } <br> <br>    glBegin(GL_TRIANGLES); <br>    (rgb) ? glColor3fv(blue) : glIndexi(ci1); <br>    glVertex3f( 0.9, -0.9, -30.0); <br>    glVertex3f( 0.9,  0.9, -30.0); <br>    glVertex3f(-0.9,  0.0, -30.0); <br>    (rgb) ? glColor3fv(green) : glIndexi(ci2); <br>    glVertex3f(-0.9, -0.9, -40.0); <br>    glVertex3f(-0.9,  0.9, -40.0); <br>    glVertex3f( 0.9,  0.0, -25.0); <br>    glEnd(); <br> <br>    glFlush(); <br> <br>    if (doubleBuffer) { <br>    auxSwapBuffers(); <br>    } <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    rgb = GL_TRUE; <br>    doubleBuffer = GL_FALSE; <br>    directRender = GL_FALSE; <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-ci") == 0) { <br>        rgb = GL_FALSE; <br>    } else if (strcmp(argv[i], "-rgb") == 0) { <br>        rgb = GL_TRUE; <br>    } else if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else if (strcmp(argv[i], "-dr") == 0) { <br>        directRender = GL_TRUE; <br>    } else if (strcmp(argv[i], "-ir") == 0) { <br>        directRender = GL_FALSE; <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br>    GLenum type; <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    auxInitPosition(0, 0, 300, 300); <br> <br>    type = AUX_DEPTH16; <br>    type |= (rgb) ? AUX_RGB : AUX_INDEX; <br>    type |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br>    auxInitDisplayMode(type); <br> <br>    if (auxInitWindow("Depth Test") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxKeyFunc(AUX_1, Key_1); <br>    auxKeyFunc(AUX_2, Key_2); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

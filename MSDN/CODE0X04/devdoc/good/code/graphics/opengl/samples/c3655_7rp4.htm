<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TBITMAP1.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3658"></a>TBITMAP1.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br>#define OPENGL_WIDTH 24 <br>#define OPENGL_HEIGHT 13 <br> <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Draw(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum rgb, doubleBuffer, windType; <br> <br>float boxA[3] = { <br>    0, 0, 0 <br>}; <br>float boxB[3] = { <br>    -100, 0, 0 <br>}; <br>float boxC[3] = { <br>    100, 0, 0 <br>}; <br>float boxD[3] = { <br>    0, 95, 0 <br>}; <br>float boxE[3] = { <br>    0, -105, 0 <br>}; <br>GLubyte OpenGL_bits1[] = { <br>   0x00, 0x03, 0x00, <br>   0x7f, 0xfb, 0xff, <br>   0x7f, 0xfb, 0xff, <br>   0x00, 0x03, 0x00, <br>   0x3e, 0x8f, 0xb7, <br>   0x63, 0xdb, 0xb0, <br>   0x63, 0xdb, 0xb7, <br>   0x63, 0xdb, 0xb6, <br>   0x63, 0x8f, 0xf3, <br>   0x63, 0x00, 0x00, <br>   0x63, 0x00, 0x00, <br>   0x63, 0x00, 0x00, <br>   0x3e, 0x00, 0x00, <br>}; <br>GLubyte OpenGL_bits2[] = { <br>   0x00, 0x00, 0x00, <br>   0xff, 0xff, 0x01, <br>   0xff, 0xff, 0x01,  <br>   0x00, 0x00, 0x00, <br>   0xf9, 0xfc, 0x01,  <br>   0x8d, 0x0d, 0x00, <br>   0x8d, 0x0d, 0x00,  <br>   0x8d, 0x0d, 0x00, <br>   0xcc, 0x0d, 0x00,  <br>   0x0c, 0x4c, 0x0a, <br>   0x0c, 0x4c, 0x0e,  <br>   0x8c, 0xed, 0x0e, <br>   0xf8, 0x0c, 0x00,  <br>}; <br>GLubyte logo_bits[] = { <br>   0x00, 0x66, 0x66,  <br>   0xff, 0x66, 0x66,  <br>   0x00, 0x00, 0x00,  <br>   0xff, 0x3c, 0x3c,  <br>   0x00, 0x42, 0x40,  <br>   0xff, 0x42, 0x40,  <br>   0x00, 0x41, 0x40,  <br>   0xff, 0x21, 0x20,  <br>   0x00, 0x2f, 0x20,  <br>   0xff, 0x20, 0x20,  <br>   0x00, 0x10, 0x90,  <br>   0xff, 0x10, 0x90,  <br>   0x00, 0x0f, 0x10,  <br>   0xff, 0x00, 0x00,  <br>   0x00, 0x66, 0x66,  <br>   0xff, 0x66, 0x66,  <br>}; <br> <br> <br>static void Init(void) <br>{ <br> <br>    glClearColor(0.0, 0.0, 0.0, 0.0); <br>    glClearIndex(0.0); <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    glViewport(0, 0, (GLint)width, (GLint)height); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluOrtho2D(-175, 175, -175, 175); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br>    float mapI[2], mapIA[2], mapIR[2]; <br> <br>    glClear(GL_COLOR_BUFFER_BIT); <br> <br>    mapI[0] = 0.0; <br>    mapI[1] = 1.0; <br>    mapIR[0] = 0.0; <br>    mapIR[1] = 0.0; <br>    mapIA[0] = 1.0; <br>    mapIA[1] = 1.0; <br>     <br>    glPixelMapfv(GL_PIXEL_MAP_I_TO_R, 2, mapIR); <br>    glPixelMapfv(GL_PIXEL_MAP_I_TO_G, 2, mapI); <br>    glPixelMapfv(GL_PIXEL_MAP_I_TO_B, 2, mapI); <br>    glPixelMapfv(GL_PIXEL_MAP_I_TO_A, 2, mapIA); <br>    glPixelTransferi(GL_MAP_COLOR, GL_TRUE); <br>     <br>    AUX_SETCOLOR(windType, AUX_WHITE); <br>    glRasterPos3fv(boxA); <br>    glPixelStorei(GL_UNPACK_ROW_LENGTH, 24); <br>    glPixelStorei(GL_UNPACK_SKIP_PIXELS, 8); <br>    glPixelStorei(GL_UNPACK_SKIP_ROWS, 2); <br>    glPixelStorei(GL_UNPACK_LSB_FIRST, GL_FALSE); <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br>    glBitmap(16, 12, 8.0, 0.0, 0.0, 0.0, logo_bits); <br>          <br>    glPixelStorei(GL_UNPACK_ROW_LENGTH, 0); <br>    glPixelStorei(GL_UNPACK_SKIP_PIXELS, 0); <br>    glPixelStorei(GL_UNPACK_SKIP_ROWS, 0); <br>    glPixelStorei(GL_UNPACK_LSB_FIRST, GL_TRUE); <br>    glPixelStorei(GL_UNPACK_ALIGNMENT, 1); <br> <br>    AUX_SETCOLOR(windType, AUX_WHITE); <br>    glRasterPos3fv(boxB); <br>    glBitmap(OPENGL_WIDTH, OPENGL_HEIGHT, OPENGL_WIDTH, 0.0, OPENGL_WIDTH, 0.0, <br>         OpenGL_bits1); <br>    glBitmap(OPENGL_WIDTH, OPENGL_HEIGHT, OPENGL_WIDTH, 0.0, OPENGL_WIDTH, 0.0, <br>         OpenGL_bits2); <br> <br>    AUX_SETCOLOR(windType, AUX_YELLOW); <br>    glRasterPos3fv(boxC); <br>    glBitmap(OPENGL_WIDTH, OPENGL_HEIGHT, OPENGL_WIDTH, 0.0, OPENGL_WIDTH, 0.0, <br>         OpenGL_bits1); <br>    glBitmap(OPENGL_WIDTH, OPENGL_HEIGHT, OPENGL_WIDTH, 0.0, OPENGL_WIDTH, 0.0, <br>         OpenGL_bits2); <br> <br>    AUX_SETCOLOR(windType, AUX_CYAN); <br>    glRasterPos3fv(boxD); <br>    glBitmap(OPENGL_WIDTH, OPENGL_HEIGHT, OPENGL_WIDTH, 0.0, OPENGL_WIDTH, 0.0, <br>         OpenGL_bits1); <br>    glBitmap(OPENGL_WIDTH, OPENGL_HEIGHT, OPENGL_WIDTH, 0.0, OPENGL_WIDTH, 0.0, <br>         OpenGL_bits2); <br> <br>    AUX_SETCOLOR(windType, AUX_RED); <br>    glRasterPos3fv(boxE); <br>    glBitmap(OPENGL_WIDTH, OPENGL_HEIGHT, OPENGL_WIDTH, 0.0, OPENGL_WIDTH, 0.0, <br>         OpenGL_bits1); <br>    glBitmap(OPENGL_WIDTH, OPENGL_HEIGHT, OPENGL_WIDTH, 0.0, OPENGL_WIDTH, 0.0, <br>         OpenGL_bits2); <br> <br>    glFlush(); <br> <br>    if (doubleBuffer) { <br>        auxSwapBuffers(); <br>    } <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    rgb = GL_TRUE; <br>    doubleBuffer = GL_FALSE; <br> <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-ci") == 0) { <br>        rgb = GL_FALSE; <br>    } else if (strcmp(argv[i], "-rgb") == 0) { <br>        rgb = GL_TRUE; <br>    } else if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>        auxQuit(); <br>    } <br> <br>    auxInitPosition(0, 0, 300, 300); <br> <br>    windType = (rgb) ? AUX_RGB : AUX_INDEX; <br>    windType |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br> <br>    auxInitDisplayMode(windType); <br> <br>    if (auxInitWindow("Bitmap Test") == GL_FALSE) { <br>        auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

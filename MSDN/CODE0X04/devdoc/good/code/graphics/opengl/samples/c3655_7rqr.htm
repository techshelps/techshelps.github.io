<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TFOG.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3663"></a>TFOG.C</h2>
<pre><code>/* <br> * (c) Copyright 1993, Silicon Graphics, Inc. <br> *               1993-1995 Microsoft Corporation <br> * <br> * ALL RIGHTS RESERVED <br> * <br> * Please refer to OpenGL/readme.txt for additional information <br> * <br> */ <br> <br>#include "glos.h" <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;gl\glaux.h&gt; <br> <br>static void Build_lists(void ); <br>static void Init(void ); <br>static void CALLBACK Reshape(int width,int height); <br>static void CALLBACK Key_UP(void ); <br>static void CALLBACK Key_DOWN(void ); <br>static void CALLBACK Key_LEFT(void ); <br>static void CALLBACK Key_RIGHT(void ); <br>static void CALLBACK Key_D(void ); <br>static void CALLBACK Key_d(void ); <br>static void CALLBACK Draw(void ); <br>static GLenum Args(int argc,char **argv ); <br> <br>GLenum rgb, doubleBuffer; <br> <br>double plane[4] = { <br>    1.0, 0.0, -1.0, 0.0 <br>}; <br>float rotX = 5.0, rotY = -5.0, zTranslate = -65.0; <br>float fogDensity = 0.02; <br>GLint cubeList = 1; <br> <br>float scp[18][3] = { <br>    { <br>    1.000000, 0.000000, 0.000000 <br>    },   <br>    { <br>    1.000000, 0.000000, 5.000000 <br>    }, <br>    { <br>    0.707107, 0.707107, 0.000000 <br>    },   <br>    { <br>    0.707107, 0.707107, 5.000000 <br>    }, <br>    { <br>    0.000000, 1.000000, 0.000000 <br>    },   <br>    { <br>    0.000000, 1.000000, 5.000000 <br>    }, <br>    { <br>    -0.707107, 0.707107, 0.000000 <br>    },   <br>    { <br>    -0.707107, 0.707107, 5.000000 <br>    }, <br>    { <br>    -1.000000, 0.000000, 0.000000 <br>    },   <br>    { <br>    -1.000000, 0.000000, 5.000000 <br>    }, <br>    { <br>    -0.707107, -0.707107, 0.000000 <br>    },   <br>    { <br>    -0.707107, -0.707107, 5.000000 <br>    }, <br>    { <br>    0.000000, -1.000000, 0.000000 <br>    },   <br>    { <br>    0.000000, -1.000000, 5.000000 <br>    }, <br>    { <br>    0.707107, -0.707107, 0.000000 <br>    },   <br>    { <br>    0.707107, -0.707107, 5.000000 <br>    }, <br>    { <br>    1.000000, 0.000000, 0.000000 <br>    },   <br>    { <br>    1.000000, 0.000000, 5.000000 <br>    }, <br>}; <br> <br> <br>static void Build_lists(void) <br>{ <br> <br>    glNewList(cubeList, GL_COMPILE); <br>    glBegin(GL_TRIANGLE_STRIP); <br>       glNormal3fv(scp[0]); glVertex3fv(scp[0]); <br>       glNormal3fv(scp[0]); glVertex3fv(scp[1]); <br>       glNormal3fv(scp[2]); glVertex3fv(scp[2]); <br>       glNormal3fv(scp[2]); glVertex3fv(scp[3]); <br>       glNormal3fv(scp[4]); glVertex3fv(scp[4]); <br>       glNormal3fv(scp[4]); glVertex3fv(scp[5]); <br>       glNormal3fv(scp[6]); glVertex3fv(scp[6]); <br>       glNormal3fv(scp[6]); glVertex3fv(scp[7]); <br>       glNormal3fv(scp[8]); glVertex3fv(scp[8]); <br>       glNormal3fv(scp[8]); glVertex3fv(scp[9]); <br>       glNormal3fv(scp[10]); glVertex3fv(scp[10]); <br>       glNormal3fv(scp[10]); glVertex3fv(scp[11]); <br>       glNormal3fv(scp[12]); glVertex3fv(scp[12]); <br>       glNormal3fv(scp[12]); glVertex3fv(scp[13]); <br>       glNormal3fv(scp[14]); glVertex3fv(scp[14]); <br>       glNormal3fv(scp[14]); glVertex3fv(scp[15]); <br>       glNormal3fv(scp[16]); glVertex3fv(scp[16]); <br>       glNormal3fv(scp[16]); glVertex3fv(scp[17]); <br>    glEnd(); <br>    glEndList(); <br>} <br> <br>static void Init(void) <br>{ <br>    static float ambient[] = {0.1, 0.1, 0.1, 1.0}; <br>    static float diffuse[] = {1.0, 1.0, 1.0, 1.0}; <br>    static float position[] = {90.0, 90.0, 0.0, 0.0}; <br>    static float front_mat_shininess[] = {30.0}; <br>    static float front_mat_specular[] = {0.0, 0.0, 0.0, 1.0}; <br>    static float front_mat_diffuse[] = {0.0, 1.0, 0.0, 1.0}; <br>    static float back_mat_shininess[] = {50.0}; <br>    static float back_mat_specular[] = {0.0, 0.0, 1.0, 1.0}; <br>    static float back_mat_diffuse[] = {1.0, 0.0, 0.0, 1.0}; <br>    static float lmodel_ambient[] = {0.0, 0.0, 0.0, 1.0}; <br>    static float fog_color[] = {0.8, 0.8, 0.8, 1.0}; <br>     <br>    glFrontFace(GL_CW); <br> <br>    glDepthFunc(GL_LEQUAL); <br>    glEnable(GL_DEPTH_TEST); <br> <br>    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient); <br>    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse); <br>    glLightfv(GL_LIGHT0, GL_POSITION, position); <br>    glLightModelfv(GL_LIGHT_MODEL_AMBIENT, lmodel_ambient); <br>    glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, GL_TRUE); <br>    glEnable(GL_LIGHTING); <br>    glEnable(GL_LIGHT0); <br>     <br>    glMaterialfv(GL_FRONT, GL_SHININESS, front_mat_shininess); <br>    glMaterialfv(GL_FRONT, GL_SPECULAR, front_mat_specular); <br>    glMaterialfv(GL_FRONT, GL_DIFFUSE, front_mat_diffuse); <br>    glMaterialfv(GL_BACK, GL_SHININESS, back_mat_shininess); <br>    glMaterialfv(GL_BACK, GL_SPECULAR, back_mat_specular); <br>    glMaterialfv(GL_BACK, GL_DIFFUSE, back_mat_diffuse); <br> <br>    glEnable(GL_FOG); <br>    glFogi(GL_FOG_MODE, GL_EXP); <br>    glFogf(GL_FOG_DENSITY, fogDensity); <br>    if (rgb) { <br>    glFogfv(GL_FOG_COLOR, fog_color); <br>    glClearColor(0.8, 0.8, 0.8, 1.0); <br>    } else { <br>    glFogi(GL_FOG_INDEX, 1&lt;&lt;5); <br>    auxSetFogRamp(5, 3); <br>    glClearIndex(128); <br>    } <br> <br>    Build_lists(); <br>} <br> <br>static void CALLBACK Reshape(int width, int height) <br>{ <br> <br>    glViewport(0, 0, (GLint)width, (GLint)height); <br> <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br>    gluPerspective(45.0, 1.0, 1.0, 200.0); <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>static void CALLBACK Key_UP(void) <br>{ <br>    rotX -= 5; <br>} <br> <br>static void CALLBACK Key_DOWN(void) <br>{ <br>    rotX += 5; <br>} <br> <br>static void CALLBACK Key_LEFT(void) <br>{ <br>    rotY -= 5; <br>} <br> <br>static void CALLBACK Key_RIGHT(void) <br>{ <br>    rotY += 5; <br>} <br> <br>static void CALLBACK Key_D(void) <br>{ <br>    if (rgb) { <br>        fogDensity *= 1.10; <br>        glFogf(GL_FOG_DENSITY, fogDensity); <br>    } <br>} <br> <br>static void CALLBACK Key_d(void) <br>{ <br>    if (rgb) { <br>        fogDensity /= 1.10; <br>        glFogf(GL_FOG_DENSITY, fogDensity); <br>    } <br>} <br> <br>static void CALLBACK Draw(void) <br>{ <br> <br>    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT); <br> <br>    glPushMatrix(); <br> <br>    glTranslatef(0, 0, zTranslate); <br>    glRotatef(rotY, 0,1,0); <br>    glRotatef(rotX, 1,0,0); <br>    glScalef(1.0, 1.0, 10.0); <br> <br>    glCallList(cubeList); <br> <br>    glPopMatrix(); <br> <br>    glFlush(); <br> <br>    if (doubleBuffer) { <br>    auxSwapBuffers(); <br>    } <br>} <br> <br>static GLenum Args(int argc, char **argv) <br>{ <br>    GLint i; <br> <br>    rgb = GL_TRUE; <br>    doubleBuffer = GL_FALSE; <br> <br> <br>    for (i = 1; i &lt; argc; i++) { <br>    if (strcmp(argv[i], "-ci") == 0) { <br>        rgb = GL_FALSE; <br>    } else if (strcmp(argv[i], "-rgb") == 0) { <br>        rgb = GL_TRUE; <br>    } else if (strcmp(argv[i], "-sb") == 0) { <br>        doubleBuffer = GL_FALSE; <br>    } else if (strcmp(argv[i], "-db") == 0) { <br>        doubleBuffer = GL_TRUE; <br>    } else { <br>        //printf("%s (Bad option).\n", argv[i]); <br>        return GL_FALSE; <br>    } <br>    } <br>    return GL_TRUE; <br>} <br> <br>void main(int argc, char **argv) <br>{ <br>    GLenum type; <br> <br>    if (Args(argc, argv) == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    auxInitPosition(0, 0, 300, 300); <br> <br>    type = AUX_DEPTH16; <br>    type |= (rgb) ? AUX_RGB : AUX_INDEX; <br>    type |= (doubleBuffer) ? AUX_DOUBLE : AUX_SINGLE; <br> <br>    auxInitDisplayMode(type); <br> <br>    if (auxInitWindow("Fog Test") == GL_FALSE) { <br>    auxQuit(); <br>    } <br> <br>    Init(); <br> <br>    auxExposeFunc((AUXEXPOSEPROC)Reshape); <br>    auxReshapeFunc((AUXRESHAPEPROC)Reshape); <br>    auxKeyFunc(AUX_UP, Key_UP); <br>    auxKeyFunc(AUX_DOWN, Key_DOWN); <br>    auxKeyFunc(AUX_LEFT, Key_LEFT); <br>    auxKeyFunc(AUX_RIGHT, Key_RIGHT); <br>    auxKeyFunc(AUX_D, Key_D); <br>    auxKeyFunc(AUX_d, Key_d); <br>    auxMainLoop(Draw); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

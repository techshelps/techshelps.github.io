<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PIPE.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3753"></a>PIPE.H</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: pipe.h <br>* <br>* PIPE base class <br>* <br>* Copyright 1995 - 1998 Microsoft Corporation <br>* <br>\**************************************************************************/ <br> <br>#ifndef __pipe_h__ <br>#define __pipe_h__ <br> <br>#include "sscommon.h" <br>#include "state.h" <br> <br>// pipe drawing status <br>enum { <br>    PIPE_ACTIVE, <br>    PIPE_STUCK, <br>    PIPE_OUT_OF_NODES <br>}; <br> <br>// pipe types <br>enum { <br>    TYPE_NORMAL, <br>    TYPE_FLEX_REGULAR, <br>    TYPE_FLEX_TURNING <br>}; <br> <br>// ways pipe choose directions <br>enum { <br>    CHOOSE_DIR_RANDOM_WEIGHTED, <br>    CHOOSE_DIR_CHASE // when chasing a lead pipe <br>}; <br> <br>// ways pipe choose start positions <br>enum { <br>    CHOOSE_STARTPOS_RANDOM, <br>    CHOOSE_STARTPOS_FURTHEST // furthest from last position <br>}; <br>/**************************************************************************\ <br>* <br>* PIPE class <br>* <br>* - Describes a pipe that draws thru the node array <br>* - Could have more than one pipe drawing in each array at same time <br>* - Pipe has position and direction in node array <br>* <br>\**************************************************************************/ <br> <br>class STATE; <br> <br>class PIPE { <br>public: <br>    int         type; <br>    IPOINT3D    curPos;         // current node position of pipe <br> <br>    STATE       *pState;        // for state value access <br> <br>    void        SetChooseDirectionMethod( int method ); <br>    void        SetChooseStartPosMethod( int method ); <br>    int         ChooseNewDirection(); <br>    BOOL        IsStuck();      // if pipe is stuck or not <br>    BOOL        NowhereToRun(){ return status == PIPE_OUT_OF_NODES; } <br>protected: <br>    BOOL        bTexture; <br>    float       radius;         // ideal radius (fluctuates for FPIPE) <br>    int         status;         // ACTIVE/STUCK/STOPPED, etc. <br>    int         lastDir;        // last direction taken by pipe <br>    int         notchVec;       // current notch vector <br>    PIPE( STATE *state ); <br>    int         weightStraight; // current weighting of going straight <br>    BOOL        SetStartPos();  // starting node position <br>    void        ChooseMaterial(); <br>    void        DrawTeapot(); <br>    void        UpdateCurrentPosition( int dir ); <br>    void        TranslateToCurrentPosition(); <br>private: <br>    int         chooseDirMethod; <br>    int         chooseStartPosMethod; <br>    int         GetBestDirsForChase( int *bestDirs ); <br>}; <br> <br>extern void align_plusz( int newDir ); <br>extern GLint notchTurn[NUM_DIRS][NUM_DIRS][NUM_DIRS]; <br> <br>#endif // __pipe_h__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

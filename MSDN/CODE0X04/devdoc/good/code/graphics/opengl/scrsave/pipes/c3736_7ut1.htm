<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NODE.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3745"></a>NODE.H</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: node.h <br>* <br>* Node stuff <br>* <br>* Copyright 1995 - 1998 Microsoft Corporation <br>* <br>\**************************************************************************/ <br> <br>#ifndef __node_h__ <br>#define __node_h__ <br> <br>#include "sscommon.h" <br>#include "sspipes.h" <br> <br>#define NUM_NODE (NUM_DIV - 1)  // num nodes in longest dimension <br> <br>// maximum weighting of going straight for direction choosing functions <br>#define MAX_WEIGHT_STRAIGHT 100 <br> <br>// Node class <br> <br>class Node { <br>public: <br>    void        MarkAsTaken() { empty = FALSE; } <br>    void        MarkAsEmpty() { empty = TRUE; } <br>    BOOL        IsEmpty() { return empty; } <br>private: <br>    GLboolean   empty; <br>}; <br> <br>/**************************************************************************\ <br>* <br>* Node array class <br>* <br>* - 3d array of nodes <br>* - Functions to access node neighbours, query if taken or not, etc.  <br>* - Not only is this the node array, but a set of methods that operates on it <br>* <br>\**************************************************************************/ <br> <br>class NODE_ARRAY { <br>public: <br>    NODE_ARRAY(); <br>    ~NODE_ARRAY(); <br>    void        Resize( IPOINT3D *pNewSize ); // new array size <br>    void        Reset();       // set all nodes to empty <br>    int         ChooseRandomDirection( IPOINT3D *pos, int dir, int weight ); <br>    int         ChoosePreferredDirection( IPOINT3D *pos, int dir, int *prefDirs, <br>                                          int nPrefDirs ); <br>    int         ChooseNewTurnDirection( IPOINT3D *pos, int dir ); <br>    int         FindClearestDirection( IPOINT3D *pos ); <br>    int         GetBestPossibleTurns( IPOINT3D *pos, int dir, int *turnDirs ); <br>    BOOL        FindRandomEmptyNode( IPOINT3D *ip3dEmpty ); <br>    BOOL        FindRandomEmptyNode2D( IPOINT3D *pos, int plane, int *box ); <br>    BOOL        TakeClosestEmptyNode( IPOINT3D *newPos, IPOINT3D *pos ); <br>    void        NodeVisited( IPOINT3D *pos ); <br>    void        GetNodeCount( IPOINT3D *pos ); <br>private: <br>    Node        *nodes;         // ptr to node array <br>    int         lock;          // semaphore lock for &gt;1 drawing pipes <br>    IPOINT3D    numNodes;      // x,y,z dimensions of node array <br>    int         nodeDirInc[NUM_DIRS]; // array offset between nodes for each dir <br>    void        GetNeighbours( IPOINT3D *pos, Node **nNode ); <br>    Node*       GetNode( IPOINT3D *pos ); <br>    Node*       GetNextNode( IPOINT3D *pos, int dir ); <br>    BOOL        GetNextNodePos( IPOINT3D *curPos, IPOINT3D *nextPos, int dir ); <br>    int         GetEmptyNeighbours( Node **nNode, int *nEmpty );  <br>    int         GetEmptyTurnNeighbours( Node **nNode, int *nEmpty, int lastDir );  <br>    int         GetEmptyNeighboursAlongDir( IPOINT3D *pos, int dir, <br>                                    int searchRadius ); <br>}; <br> <br>#endif // __node_h__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STATE.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3758"></a>STATE.H</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: state.h <br>* <br>* STATE <br>* <br>* Copyright 1995 - 1998 Microsoft Corporation <br>* <br>\**************************************************************************/ <br> <br>#ifndef __state_h__ <br>#define __state_h__ <br> <br>#include "sscommon.hxx" <br>#include "pipe.h" <br>#include "node.h" <br>#include "view.h" <br>#include "nstate.h" <br>#include "fstate.h" <br> <br>#define MAX_DRAW_THREADS    4 <br> <br>#define TEAPOT             66 <br> <br>#define MAX_TESS 3 <br> <br>// type(s) of pipes that are drawn <br>enum { <br>    DRAW_NORMAL, <br>    DRAW_FLEX, <br>    DRAW_BOTH  // not currently used <br>}; <br> <br>// Reset status <br> <br>#define  RESET_STARTUP_BIT (1L &lt;&lt; 0) <br>#define  RESET_NORMAL_BIT  (1L &lt;&lt; 1) <br>#define  RESET_RESIZE_BIT  (1L &lt;&lt; 2) <br>#define  RESET_REPAINT_BIT  (1L &lt;&lt; 3) <br> <br>// Frame draw schemes <br> <br>enum { <br>    FRAME_SCHEME_RANDOM,  // pipes draw randomly <br>    FRAME_SCHEME_CHASE,   // pipes chase a lead pipe <br>}; <br> <br>class DRAW_THREAD { <br>private: <br>    HDC         hdc; <br>    HTEXTURE    htex; <br> <br>public: <br>    HGLRC       hglrc;        // rc to draw with (public so STATE can delete) <br>    int         priority; <br> <br>    DRAW_THREAD(); <br>    ~DRAW_THREAD(); <br>    PIPE        *pPipe;       // generic pipe ptr <br>    void        SetRCDC( HGLRC rc, HDC hdc ); <br>    BOOL        HasRC(); <br>    HGLRC       GetRC(); <br>    void        MakeRCCurrent(); <br>    void        SetTexture( HTEXTURE htex ); <br>    void        SetPipe( PIPE *pipe ); <br>    BOOL        StartPipe(); <br>    void        DrawPipe(); <br>    void        KillPipe(); <br>}; <br> <br>// Program existence instance <br> <br>class NORMAL_STATE; <br>class FLEX_STATE; <br> <br>class STATE { <br>public: <br>    HGLRC       shareRC;        // RC that objects are shared from <br> <br>    PIPE        *pLeadPipe;     // lead pipe for chase scenarios <br> <br>    int         nSlices;      // reference # of slices around a pipe <br>    BOOL        bTexture;       // global texture enable <br>    int         nTextures; <br>    TEXTURE     texture[MAX_TEXTURES]; <br>    IPOINT2D    texRep[MAX_TEXTURES]; <br> <br>    VIEW        view;           // viewing parameters <br>    float       radius;         // 'reference' pipe radius value <br>    NODE_ARRAY  *nodes;         // for keeping track of draw space <br>    NORMAL_STATE *pNState; <br>    FLEX_STATE  *pFState; <br> <br>    STATE( BOOL bFlexMode, BOOL bMultiPipes ); <br>    ~STATE(); <br>    void        Reshape( int width, int height, void *data ); <br>    void        Repaint( LPRECT pRect, void *data ); <br>    void        Draw( void *data ); <br>    void        Finish( void *data ); <br> <br>private: <br>    int         drawMode;       // drawing mode (flex or normal for now) <br>    int         drawScheme;     // random or chase <br> <br>    int         maxPipesPerFrame; // max number of separate pipes/frame <br>    int         nPipesDrawn;    // number of pipes drawn or drawing in frame <br>    int         maxDrawThreads; // max number of concurrently drawing pipes <br>    int         nDrawThreads;   // number of live threads <br>    DRAW_THREAD drawThreads[MAX_DRAW_THREADS]; <br> <br>    int         resetStatus; <br> <br>    SS_DIGITAL_DISSOLVE_CLEAR ddClear; <br>    int         bCalibrateClear; <br> <br>    void        GLInit(); <br>    void        DrawValidate();  // validation to do before each Draw <br>    void        ResetView(); <br>    void        FrameReset(); <br>    void        Clear(); <br>    void        ChooseNewLeadPipe(); <br>    void        CompactThreadList(); <br>    BOOL        LoadTextureFiles(); <br>    BOOL        LoadTextureFiles( TEXFILE *pTexFile, int nTexFiles,  <br>                                  TEX_RES *pTexRes ); <br>    void        CalcTexRepFactors(); <br>    int         CalcMaxPipesPerFrame(); <br>}; <br> <br>#endif // __state_h__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIALOG.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3736"></a>DIALOG.C</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: sspipes.c <br>* <br>* Message loop and dialog box for the OpenGL-based 3D Pipes screen saver. <br>* <br>* Copyright (c) 1994 Microsoft Corporation <br>* <br>\**************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;scrnsave.h&gt; <br>#include &lt;GL\gl.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;memory.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdarg.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;malloc.h&gt; <br>#include &lt;sys\timeb.h&gt; <br>#include &lt;time.h&gt; <br>#include &lt;commctrl.h&gt; <br>#include "sscommon.h" <br>#include "sspipes.h" <br>#include "dlgs.h" <br>#include "dialog.h" <br> <br>BOOL bFlexMode; <br>BOOL bMultiPipes; <br> <br>// ulJointType controls the style of the elbows. <br> <br>ULONG ulJointType = JOINT_ELBOW; <br> <br>// ulSurfStyle determines whether the pipe surfaces are textured. <br> <br>ULONG ulSurfStyle = SURFSTYLE_SOLID; <br> <br>// ulTexQuality control the texture quality. <br> <br>ULONG ulTexQuality = TEXQUAL_DEFAULT; <br> <br>// fTesselFact controls the how finely the surface is tesselated.  It <br>// varies from very course (0.0) to very fine (2.0). <br> <br>float fTesselFact = 1.0f; <br> <br>// If ulSurfStyle indicates a textured surface, szTexPathname specifies <br>// the bitmap chosen as the texture. <br> <br>// Texture file(s) <br>TEXFILE gTexFile[MAX_TEXTURES] = {0}; <br>int gnTextures = 0; <br> <br>static void updateDialogControls(HWND hDlg); <br> <br>/******************************Public*Routine******************************\ <br>* getIniSettings <br>* <br>* Get the screen saver configuration options from .INI file/registry. <br>* <br>\**************************************************************************/ <br> <br>void  <br>getIniSettings() <br>{ <br>    int    tessel; <br> <br>    // Load resources <br> <br>    LoadString(hMainInstance, IDS_GENNAME, szScreenSaver,  <br>               sizeof(szScreenSaver) / sizeof(TCHAR)); <br> <br>    // Load resource strings for texture processing <br> <br>    ss_LoadTextureResourceStrings(); <br> <br>    // Get registry settings <br> <br>    if( ss_RegistrySetup( hMainInstance, IDS_SAVERNAME, IDS_INIFILE ) ) <br>    { <br>        ulJointType = ss_GetRegistryInt( IDS_JOINTTYPE, JOINT_ELBOW ); <br> <br>        ulSurfStyle = ss_GetRegistryInt( IDS_SURFSTYLE, SURFSTYLE_SOLID ); <br> <br>        ulTexQuality = ss_GetRegistryInt( IDS_TEXQUAL, TEXQUAL_DEFAULT ); <br> <br>        tessel = ss_GetRegistryInt( IDS_TESSELATION, 0 ); <br>        SS_CLAMP_TO_RANGE2( tessel, 0, 200 ); <br>        fTesselFact  = (float)tessel / 100.0f; <br> <br>        bFlexMode = ss_GetRegistryInt( IDS_FLEX, 0 ); <br> <br>        bMultiPipes = ss_GetRegistryInt( IDS_MULTIPIPES, 0 ); <br> <br>        // Get any textures <br> <br>#ifndef NEW_TEXTURE <br>        // Just get one texture with old registry names <br>        ss_GetRegistryString( IDS_TEXTURE, 0, gTexFile[0].szPathName, MAX_PATH); <br>        gTexFile[0].nOffset = ss_GetRegistryInt( IDS_TEXTURE_FILE_OFFSET, 0 ); <br>        gnTextures = 1; <br>#else <br>        gnTextures = ss_GetRegistryInt( IDS_TEXTURE_COUNT, 0 ); <br>        SS_CLAMP_TO_RANGE2( gnTextures, 0, MAX_TEXTURES ); <br> <br>        idsTexture = IDS_TEXTURE0; <br>        idsTexOffset = IDS_TEXOFFSET0; <br>        for( i = 0; i &lt; gnTextures; i++, idsTexture++, idsTexOffset++ ) { <br>            ss_GetRegistryString( idsTexture, 0, gTexFile[i].szPathName, <br>                                  MAX_PATH); <br>            gTexFile[i].nOffset = ss_GetRegistryInt( idsTexOffset, 0 ); <br>        } <br>#endif <br>    } <br>} <br> <br>/**************************************************************************\ <br>* ConfigInit <br>* <br>\**************************************************************************/ <br>BOOL <br>ss_ConfigInit( HWND hDlg ) <br>{ <br>    return TRUE; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* saveIniSettings <br>* <br>* Save the screen saver configuration option to the .INI file/registry. <br>* <br>\**************************************************************************/ <br> <br>static void saveIniSettings(HWND hDlg) <br>{ <br>    if( ss_RegistrySetup( hMainInstance, IDS_SAVERNAME, IDS_INIFILE ) ) <br>    { <br>        ss_WriteRegistryInt( IDS_JOINTTYPE, ulJointType ); <br>        ss_WriteRegistryInt( IDS_SURFSTYLE, ulSurfStyle ); <br>        ss_WriteRegistryInt( IDS_TEXQUAL, ulTexQuality ); <br>        ss_WriteRegistryInt( IDS_TESSELATION,  <br>                    ss_GetTrackbarPos(hDlg, DLG_SETUP_TESSEL) ); <br>        ss_WriteRegistryInt( IDS_FLEX, bFlexMode ); <br>        ss_WriteRegistryInt( IDS_MULTIPIPES, bMultiPipes ); <br>#ifndef NEW_TEXTURE <br>        ss_WriteRegistryString( IDS_TEXTURE, gTexFile[0].szPathName ); <br>        ss_WriteRegistryInt( IDS_TEXTURE_FILE_OFFSET, gTexFile[0].nOffset ); <br>#else <br>        idsTexture = IDS_TEXTURE0; <br>        idsTexOffset = IDS_TEXOFFSET0; <br>        for( i = 0; i &lt; gnTextures; i++, idsTexture++, idsTexOffset++ ) { <br>            ss_WriteRegistryString( idsTexture, gTexFile[i].szPathName ); <br>            ss_WriteRegistryInt( idsTexOffset, gTexFile[i].nOffset ); <br>        } <br>#endif <br>    } <br>} <br> <br>/******************************Public*Routine******************************\ <br>* setupDialogControls <br>* <br>* Do initial setup of dialog controls. <br>\**************************************************************************/ <br> <br>static void  <br>setupDialogControls(HWND hDlg) <br>{ <br>    int pos; <br>    int wTmp; <br>    TCHAR szStr[GEN_STRING_SIZE]; <br>    int idsJointType; <br> <br>    InitCommonControls(); <br> <br>    pos = (int)(fTesselFact * 100.0f); <br>    ss_SetupTrackbar( hDlg, DLG_SETUP_TESSEL, 0, 200, 1, 10, pos ); <br> <br>    // setup jointType combo box <br>    idsJointType = IDS_JOINT_ELBOW; <br>    for (wTmp = 0; wTmp &lt; NUM_JOINTTYPES; wTmp++, idsJointType++) { <br>        LoadString(hMainInstance, idsJointType, szStr,  <br>                    GEN_STRING_SIZE); <br>        SendDlgItemMessage(hDlg, DLG_COMBO_JOINTTYPE, CB_ADDSTRING, 0, <br>                           (LPARAM) szStr); <br>    } <br>    SendDlgItemMessage(hDlg, DLG_COMBO_JOINTTYPE, CB_SETCURSEL,  <br>                       ulJointType, 0); <br> <br>    updateDialogControls( hDlg ); <br>} <br> <br>/******************************Public*Routine******************************\ <br>* updateDialogControls <br>* <br>* Setup the dialog controls based on the current global state. <br>* <br>\**************************************************************************/ <br> <br>static void updateDialogControls(HWND hDlg) <br>{ <br>    BOOL bTexture = (ulSurfStyle ==  SURFSTYLE_TEX); <br> <br>    CheckDlgButton( hDlg, IDC_RADIO_SOLID, ulSurfStyle == SURFSTYLE_SOLID ); <br>    CheckDlgButton( hDlg, IDC_RADIO_TEX  , bTexture ); <br>#ifdef NEED_THESE_LATER <br>    CheckDlgButton( hDlg, IDC_RADIO_WIREFRAME, ulSurfStyle == SURFSTYLE_WIREFRAME   ); <br> <br>    CheckDlgButton( hDlg, IDC_RADIO_TEXQUAL_DEFAULT , <br>                   bTexture &amp;&amp; ulTexQuality == TEXQUAL_DEFAULT); <br>    CheckDlgButton( hDlg, IDC_RADIO_TEXQUAL_HIGH, <br>                   bTexture &amp;&amp; ulTexQuality == TEXQUAL_HIGH); <br>#endif <br> <br>    CheckDlgButton( hDlg, IDC_RADIO_NORMAL, !bFlexMode); <br>    CheckDlgButton( hDlg, IDC_RADIO_FLEX, bFlexMode); <br> <br>    CheckDlgButton( hDlg, IDC_RADIO_SINGLE_PIPE, !bMultiPipes); <br>    CheckDlgButton( hDlg, IDC_RADIO_MULTIPLE_PIPES, bMultiPipes); <br> <br>    EnableWindow( GetDlgItem(hDlg, DLG_COMBO_JOINTTYPE), !bFlexMode); <br>    EnableWindow( GetDlgItem(hDlg, IDC_STATIC_JOINTTYPE), !bFlexMode); <br> <br>    EnableWindow( GetDlgItem(hDlg, DLG_SETUP_TEXTURE), bTexture ); <br>    EnableWindow( GetDlgItem(hDlg, IDC_RADIO_TEXQUAL_DEFAULT), bTexture ); <br>    EnableWindow( GetDlgItem(hDlg, IDC_RADIO_TEXQUAL_HIGH), bTexture ); <br>    EnableWindow( GetDlgItem(hDlg, IDC_STATIC_TEXQUAL_GRP), bTexture ); <br> <br>    EnableWindow(GetDlgItem(hDlg, DLG_SETUP_TESSEL), TRUE); <br>    EnableWindow(GetDlgItem(hDlg, IDC_STATIC_TESS_MIN), TRUE); <br>    EnableWindow(GetDlgItem(hDlg, IDC_STATIC_TESS_MAX), TRUE); <br>    EnableWindow(GetDlgItem(hDlg, IDC_STATIC_TESS_GRP), TRUE); <br>} <br> <br>BOOL WINAPI RegisterDialogClasses(HANDLE hinst) <br>{ <br>    return TRUE; <br>} <br> <br> <br>/******************************Public*Routine******************************\ <br>* ScreenSaverConfigureDialog <br>* <br>* Screen saver setup dialog box procedure. <br>\**************************************************************************/ <br> <br>BOOL ScreenSaverConfigureDialog(HWND hDlg, UINT message, <br>                                WPARAM wParam, LPARAM lParam) <br>{ <br>    int optMask = 1; <br> <br>    switch (message) <br>    { <br>        case WM_INITDIALOG: <br>            getIniSettings(); <br>            setupDialogControls(hDlg); <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) <br>            { <br>                case IDC_RADIO_SOLID: <br>                case IDC_RADIO_TEX: <br>                case IDC_RADIO_WIREFRAME: <br>                    ulSurfStyle = IDC_TO_SURFSTYLE(LOWORD(wParam)); <br>                    break; <br> <br>                case IDC_RADIO_TEXQUAL_DEFAULT: <br>                case IDC_RADIO_TEXQUAL_HIGH: <br>                    ulTexQuality = IDC_TO_TEXQUAL(LOWORD(wParam)); <br>                    break; <br> <br>                case IDC_RADIO_NORMAL: <br>                    bFlexMode = FALSE; <br>                    break; <br>                case IDC_RADIO_FLEX: <br>                    bFlexMode = TRUE; <br>                    break; <br> <br>                case IDC_RADIO_SINGLE_PIPE: <br>                    bMultiPipes = FALSE; <br>                    break; <br>                case IDC_RADIO_MULTIPLE_PIPES: <br>                    bMultiPipes = TRUE; <br>                    break; <br> <br>                case DLG_SETUP_TEXTURE: <br>                    // Run choose texture dialog <br>                    ss_SelectTextureFile( hDlg, &amp;gTexFile[0] ); <br>                    break; <br> <br>                case DLG_COMBO_JOINTTYPE: <br>                    switch (HIWORD(wParam)) <br>                    { <br>                        case CBN_EDITCHANGE: <br>                        case CBN_SELCHANGE: <br>                            ulJointType =  <br>                                SendDlgItemMessage(hDlg, DLG_COMBO_JOINTTYPE, <br>                                                      CB_GETCURSEL, 0, 0); <br>                            break; <br>                        default: <br>                            return FALSE; <br>                    } <br>                    break; <br> <br>                case IDOK: <br>                    saveIniSettings(hDlg); <br>                    EndDialog(hDlg, TRUE); <br>                    break; <br> <br>                case IDCANCEL: <br>                    EndDialog(hDlg, FALSE); <br>                    break; <br> <br>                default: <br>                    break; <br>            } <br>            updateDialogControls(hDlg); <br>            return TRUE; <br> <br>        default: <br>            return 0; <br>    } <br>    return 0; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

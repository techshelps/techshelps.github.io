<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MATERIAL.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3698"></a>MATERIAL.C</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: material.c <br>* <br>* Material selection functions. <br>* <br>* Copyright (c) 1994 Microsoft Corporation <br>* <br>\**************************************************************************/ <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;sys/types.h&gt; <br>#include &lt;time.h&gt; <br>#include &lt;windows.h&gt; <br>#include &lt;GL/gl.h&gt; <br> <br>#include "sscommon.h" <br> <br>//#define NUM_TEA_MATERIALS 24 <br> <br>#define NUM_GOOD_MATERIALS 16  // 'good' ones among the 24 tea materials <br> <br>//#define NUM_TEX_MATERIALS 4  // materials for texture <br> <br>int goodMaterials[NUM_GOOD_MATERIALS] = { <br>        EMERALD, JADE, PEARL, RUBY, TURQUOISE, BRASS, BRONZE, <br>        COPPER, GOLD, SILVER, CYAN_PLASTIC, WHITE_PLASTIC, YELLOW_PLASTIC, <br>        CYAN_RUBBER, GREEN_RUBBER, WHITE_RUBBER }; <br> <br>/*  materials:  emerald, jade, obsidian, pearl, ruby, turquoise <br> *              brass, bronze, chrome, copper, gold, silver <br> *              black, cyan, green, red, white, yellow plastic <br> *              black, cyan, green, red, white, yellow rubber <br> <br>    description: ambient(RGB), diffuse(RGB), specular(RGB), shininess <br> * <br> */ <br>// 'tea' materials, from aux teapots program <br>static GLfloat teaMaterialData[NUM_TEA_MATERIALS][10] =  <br>{ <br>     0.0215f, 0.1745f, 0.0215f, <br>        0.07568f, 0.61424f, 0.07568f, 0.633f, 0.727811f, 0.633f, 0.6f, <br>     0.135f, 0.2225f, 0.1575f, <br>        0.54f, 0.89f, 0.63f, 0.316228f, 0.316228f, 0.316228f, 0.1f, <br>     0.05375f, 0.05f, 0.06625f, // XX <br>        0.18275f, 0.17f, 0.22525f, 0.332741f, 0.328634f, 0.346435f, 0.3f, <br>     0.25f, 0.20725f, 0.20725f, <br>        1.0f, 0.829f, 0.829f, 0.296648f, 0.296648f, 0.296648f, 0.088f, <br>     0.1745f, 0.01175f, 0.01175f, <br>        0.61424f, 0.04136f, 0.04136f, 0.727811f, 0.626959f, 0.626959f, 0.6f, <br>     0.1f, 0.18725f, 0.1745f, <br>        0.396f, 0.74151f, 0.69102f, 0.297254f, 0.30829f, 0.306678f, 0.1f, <br>     0.329412f, 0.223529f, 0.027451f, <br>        0.780392f, 0.568627f, 0.113725f, 0.992157f, 0.941176f, 0.807843f, <br>        0.21794872f, <br>     0.2125f, 0.1275f, 0.054f, <br>        0.714f, 0.4284f, 0.18144f, 0.393548f, 0.271906f, 0.166721f, 0.2f, <br>     0.25f, 0.25f, 0.25f,  // XX <br>        0.4f, 0.4f, 0.4f, 0.774597f, 0.774597f, 0.774597f, 0.6f, <br>     0.19125f, 0.0735f, 0.0225f, <br>        0.7038f, 0.27048f, 0.0828f, 0.256777f, 0.137622f, 0.086014f, 0.1f, <br>     0.24725f, 0.1995f, 0.0745f, <br>        0.75164f, 0.60648f, 0.22648f, 0.628281f, 0.555802f, 0.366065f, 0.4f, <br>     0.19225f, 0.19225f, 0.19225f, <br>        0.50754f, 0.50754f, 0.50754f, 0.508273f, 0.508273f, 0.508273f, 0.4f, <br>     0.0f, 0.0f, 0.0f, 0.01f, 0.01f, 0.01f, <br>        0.50f, 0.50f, 0.50f, .25f, <br>     0.0f, 0.1f, 0.06f, 0.0f, 0.50980392f, 0.50980392f, <br>        0.50196078f, 0.50196078f, 0.50196078f, .25f, <br>     0.0f, 0.0f, 0.0f, <br>        0.1f, 0.35f, 0.1f, 0.45f, 0.55f, 0.45f, .25f, <br>     0.0f, 0.0f, 0.0f, 0.5f, 0.0f, 0.0f, // XX <br>        0.7f, 0.6f, 0.6f, .25f, <br>     0.0f, 0.0f, 0.0f, 0.55f, 0.55f, 0.55f, <br>        0.70f, 0.70f, 0.70f, .25f, <br>     0.0f, 0.0f, 0.0f, 0.5f, 0.5f, 0.0f, <br>        0.60f, 0.60f, 0.50f, .25f, <br>     0.02f, 0.02f, 0.02f, 0.01f, 0.01f, 0.01f, // XX <br>        0.4f, 0.4f, 0.4f, .078125f, <br>     0.0f, 0.05f, 0.05f, 0.4f, 0.5f, 0.5f, <br>        0.04f, 0.7f, 0.7f, .078125f, <br>     0.0f, 0.05f, 0.0f, 0.4f, 0.5f, 0.4f, <br>        0.04f, 0.7f, 0.04f, .078125f, <br>     0.05f, 0.0f, 0.0f, 0.5f, 0.4f, 0.4f, <br>        0.7f, 0.04f, 0.04f, .078125f, <br>     0.05f, 0.05f, 0.05f, 0.5f, 0.5f, 0.5f, <br>        0.7f, 0.7f, 0.7f, .078125f, <br>     0.05f, 0.05f, 0.0f, 0.5f, 0.5f, 0.4f, <br>        0.7f, 0.7f, 0.04f, .078125f  <br>}; <br> <br>// generally white materials for texturing <br> <br>static GLfloat texMaterialData[NUM_TEX_MATERIALS][10] = { <br>// bright white <br>     0.2f, 0.2f, 0.2f, <br>        1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.5f, <br>// less bright white <br>     0.2f, 0.2f, 0.2f, <br>        0.9f, 0.9f, 0.9f, 0.9f, 0.9f, 0.9f, 0.5f, <br>// warmish white <br>     0.3f, 0.2f, 0.2f, <br>        1.0f, 0.9f, 0.8f, 1.0f, 0.9f, 0.8f, 0.5f, <br>// coolish white <br>     0.2f, 0.2f, 0.3f, <br>        0.8f, 0.9f, 1.0f, 0.8f, 0.9f, 1.0f, 0.5f <br>}; <br> <br>MATERIAL Material[NUM_TEA_MATERIALS + NUM_TEX_MATERIALS]; <br> <br>// pure black material <br> <br>MATERIAL ss_BlackMat = {0.0f}; <br> <br>/**************************************************************************\ <br>* InitMaterials <br>* <br>* Initialize MATERIAL structures with data <br>* - Set alpha to 0.5 for all materials <br>* <br>\**************************************************************************/ <br> <br>static void <br>InitMaterials( MATERIAL *pm, float *pd, int count ) <br>{ <br>    int i; <br> <br>    for( i = 0; i &lt; count; i++, pm++ ) { <br>        pm-&gt;ka.r = *pd++; <br>        pm-&gt;ka.g = *pd++; <br>        pm-&gt;ka.b = *pd++; <br>        pm-&gt;ka.a = 0.5f; <br>        pm-&gt;kd.r = *pd++; <br>        pm-&gt;kd.g = *pd++; <br>        pm-&gt;kd.b = *pd++; <br>        pm-&gt;kd.a = 0.5f; <br>        pm-&gt;ks.r = *pd++; <br>        pm-&gt;ks.g = *pd++; <br>        pm-&gt;ks.b = *pd++; <br>        pm-&gt;ks.a = 0.5f; <br>        pm-&gt;specExp = *pd++; <br>    } <br>} <br> <br>/**************************************************************************\ <br>* ss_InitMaterials <br>* <br>* Initialize all materials <br>* <br>\**************************************************************************/ <br> <br>void ss_InitMaterials() <br>{ <br>    ss_InitTeaMaterials(); <br>    ss_InitTexMaterials(); <br>} <br> <br>/**************************************************************************\ <br>* ss_InitTeaMaterials <br>* <br>* Initialize Material structure with data in TeaMaterialData <br>* <br>\**************************************************************************/ <br> <br>void ss_InitTeaMaterials() <br>{ <br>    InitMaterials( Material, teaMaterialData[0], NUM_TEA_MATERIALS ); <br>} <br> <br> <br>/**************************************************************************\ <br>* ss_InitTexMaterials <br>* <br>* Initialize Material structure with data in TexMaterialData (tex materials <br>* follow the tea materials in Material) <br>* <br>\**************************************************************************/ <br> <br>void ss_InitTexMaterials() <br>{ <br>    InitMaterials( Material+NUM_TEA_MATERIALS, texMaterialData[0],  <br>                   NUM_TEX_MATERIALS ); <br>} <br> <br>/**************************************************************************\ <br>* ss_SetMaterial <br>* <br>* Set specified material with MATERIAL structure <br>* <br>\**************************************************************************/ <br> <br>void ss_SetMaterial( MATERIAL *pMat ) <br>{ <br>    glMaterialfv( GL_FRONT, GL_AMBIENT, (GLfloat*) &amp;pMat-&gt;ka ); <br>    glMaterialfv( GL_BACK, GL_AMBIENT, (GLfloat*) &amp;pMat-&gt;ka ); <br>    glMaterialfv( GL_FRONT, GL_DIFFUSE, (GLfloat *) &amp;pMat-&gt;kd ); <br>    glMaterialfv( GL_BACK, GL_DIFFUSE, (GLfloat *) &amp;pMat-&gt;kd ); <br>    glMaterialfv( GL_FRONT, GL_SPECULAR, (GLfloat *) &amp;pMat-&gt;ks ); <br>    glMaterialfv( GL_BACK, GL_SPECULAR, (GLfloat *) &amp;pMat-&gt;ks ); <br>    glMaterialf ( GL_FRONT, GL_SHININESS, pMat-&gt;specExp*128.0f); <br>    glMaterialf ( GL_BACK, GL_SHININESS, pMat-&gt;specExp*128.0f); <br>} <br> <br>/**************************************************************************\ <br>* ss_SetMaterialIndex <br>* <br>* Set material using its index name <br>* <br>\**************************************************************************/ <br> <br>void ss_SetMaterialIndex( int index ) <br>{ <br>    if( (index &lt; 0) || (index &gt;= (NUM_TEA_MATERIALS+NUM_TEX_MATERIALS)) ) <br>        return; <br>    ss_SetMaterial( &amp;Material[index] ); <br>} <br> <br>/**************************************************************************\ <br>* ss_CreateMaterialGradient <br>* <br>* Given 2 materials and a count, create an incremental material, such <br>* that adding it 'count' times to the first material will generate the <br>* 2nd material. <br>* <br>\**************************************************************************/ <br>void  <br>ss_CreateMaterialGradient( MATERIAL *matInc, MATERIAL *startMat, <br>                        MATERIAL *endMat, int transCount )  <br>{ <br>    FLOAT fTransCount; <br> <br>    if( !transCount ) { <br>        *matInc = *endMat; <br>        return; <br>    } <br> <br>    /* <br>     * Add fudge factor to avoid round-off error, which could result in <br>     * invalid material values. <br>     */ <br>#define FMAT_GRAD_FUDGE 1.0001f <br>    fTransCount = (FLOAT) transCount * FMAT_GRAD_FUDGE; <br> <br>    matInc-&gt;ka.r = (endMat-&gt;ka.r - startMat-&gt;ka.r) / fTransCount; <br>    matInc-&gt;ka.g = (endMat-&gt;ka.g - startMat-&gt;ka.g) / fTransCount; <br>    matInc-&gt;ka.b = (endMat-&gt;ka.b - startMat-&gt;ka.b) / fTransCount; <br>    matInc-&gt;ks.r = (endMat-&gt;ks.r - startMat-&gt;ks.r) / fTransCount; <br>    matInc-&gt;ks.g = (endMat-&gt;ks.g - startMat-&gt;ks.g) / fTransCount; <br>    matInc-&gt;ks.b = (endMat-&gt;ks.b - startMat-&gt;ks.b) / fTransCount; <br>    matInc-&gt;kd.r = (endMat-&gt;kd.r - startMat-&gt;kd.r) / fTransCount; <br>    matInc-&gt;kd.g = (endMat-&gt;kd.g - startMat-&gt;kd.g) / fTransCount; <br>    matInc-&gt;kd.b = (endMat-&gt;kd.b - startMat-&gt;kd.b) / fTransCount; <br>    matInc-&gt;specExp = (endMat-&gt;specExp - startMat-&gt;specExp) / fTransCount; <br>} <br> <br>/**************************************************************************\ <br>* ss_TransitionMaterial <br>* <br>* Given a material, add to it the incremental material, and set the <br>* result as the current material <br>* <br>\**************************************************************************/ <br>void <br>ss_TransitionMaterial( MATERIAL *transMat, MATERIAL *transMatInc ) <br>{ <br>    transMat-&gt;ka.r += transMatInc-&gt;ka.r; <br>    transMat-&gt;ka.g += transMatInc-&gt;ka.g; <br>    transMat-&gt;ka.b += transMatInc-&gt;ka.b; <br>    transMat-&gt;kd.r += transMatInc-&gt;kd.r; <br>    transMat-&gt;kd.g += transMatInc-&gt;kd.g; <br>    transMat-&gt;kd.b += transMatInc-&gt;kd.b; <br>    transMat-&gt;ks.r += transMatInc-&gt;ks.r; <br>    transMat-&gt;ks.g += transMatInc-&gt;ks.g; <br>    transMat-&gt;ks.b += transMatInc-&gt;ks.b; <br>    transMat-&gt;specExp += transMatInc-&gt;specExp; <br> <br>    ss_SetMaterial( transMat ); <br>} <br> <br>/**************************************************************************\ <br>* ss_RandomTeaMaterial <br>* <br>* Select a random TeaMaterial <br>* Return ptr to material <br>* <br>\**************************************************************************/ <br>MATERIAL *ss_RandomTeaMaterial( BOOL bSet ) <br>{ <br>    int index; <br>    MATERIAL *pMat; <br> <br>    index =  goodMaterials[ ss_iRand(NUM_GOOD_MATERIALS) ]; <br>    pMat = &amp;Material[ index ]; <br>    if( bSet ) <br>        ss_SetMaterial( pMat ); <br>    return pMat; <br>} <br> <br>/**************************************************************************\ <br>* ss_RandomTeaMaterialIndex <br>* <br>* Select a random TeaMaterial <br>* Return material index <br>* <br>\**************************************************************************/ <br>int ss_RandomTeaMaterialIndex( BOOL bSet ) <br>{ <br>    int index; <br> <br>    index =  goodMaterials[ ss_iRand(NUM_GOOD_MATERIALS) ]; <br>    if( bSet ) <br>        ss_SetMaterial( &amp;Material[ index ] ); <br>    return index; <br>} <br> <br>/**************************************************************************\ <br>* ss_RandomTexMaterial <br>* <br>* Select a random TexMaterial <br>* Return ptr to material <br>* <br>\**************************************************************************/ <br>MATERIAL *ss_RandomTexMaterial( BOOL bSet ) <br>{ <br>    int index; <br>    MATERIAL *pMat; <br> <br>    index =  NUM_TEA_MATERIALS + ss_iRand(NUM_TEX_MATERIALS); <br>    pMat = &amp;Material[ index ]; <br>    if( bSet ) <br>        ss_SetMaterial( pMat ); <br>    return pMat; <br>} <br> <br>/**************************************************************************\ <br>* ss_RandomTexMaterialIndex <br>* <br>* Select a random TexMaterial <br>* <br>\**************************************************************************/ <br>int ss_RandomTexMaterialIndex( BOOL bSet ) <br>{ <br>    int index; <br> <br>    index =  NUM_TEA_MATERIALS + ss_iRand(NUM_TEX_MATERIALS); <br>    if( bSet ) <br>        ss_SetMaterial( &amp;Material[ index ] ); <br>    return index; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

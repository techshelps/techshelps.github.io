<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SSINIT.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3708"></a>SSINIT.CXX</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: ssinit.cxx <br>* <br>* Main code for common screen saver functions. <br>* <br>* Copyright (c) 1994 Microsoft Corporation <br>\**************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;scrnsave.h&gt; <br>#include &lt;GL\gl.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;memory.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdarg.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;malloc.h&gt; <br>#include &lt;time.h&gt; <br>#include "ssintrnl.hxx" <br> <br>void     *gDataPtr = NULL; // data ptr used with callbacks <br> <br>// function protos <br>void (*gReshapeFunc)(int, int, void *)      = NULL; <br>void (*gRepaintFunc)(LPRECT, void *)      = NULL; <br>void (*gUpdateFunc)( void *)           = NULL; <br>void (*gInitFunc)( void *)             = NULL; <br>void (*gFinishFunc)( void *)           = NULL; <br>void (*gFloaterBounceFunc)( void *)      = NULL; <br> <br>// Debug stuff <br>#if DBG <br>#ifdef SS_DEBUG <br>long ssDebugMsg = 1; <br>long ssDebugLevel = SS_LEVEL_INFO; <br>#else <br>long ssDebugMsg = 0; <br>long ssDebugLevel = SS_LEVEL_ERROR; <br>#endif <br>#endif <br> <br>// Callback functions: <br> <br>/******************************Public*Routine******************************\ <br>* ss_InitFunc <br>* <br>\**************************************************************************/ <br> <br>void  <br>ss_InitFunc(SSINITPROC Func) <br>{ <br>    gInitFunc = Func; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_ReshapeFunc <br>* <br>\**************************************************************************/ <br> <br>void  <br>ss_ReshapeFunc(SSRESHAPEPROC Func) <br>{ <br>    gReshapeFunc = Func; <br>    if( gpss-&gt;psswGL ) <br>        gpss-&gt;psswGL-&gt;ReshapeFunc = gReshapeFunc; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_RepaintFunc <br>* <br>\**************************************************************************/ <br> <br>void  <br>ss_RepaintFunc(SSREPAINTPROC Func) <br>{ <br>    gRepaintFunc = Func; <br>    if( gpss-&gt;psswGL ) <br>        gpss-&gt;psswGL-&gt;RepaintFunc = gRepaintFunc; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_UpdateFunc <br>* <br>\**************************************************************************/ <br> <br>void  <br>ss_UpdateFunc(SSUPDATEPROC Func) <br>{ <br>    gUpdateFunc = Func; <br>    if( gpss-&gt;psswGL ) <br>        gpss-&gt;psswGL-&gt;UpdateFunc = gUpdateFunc; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_FinishFunc <br>* <br>\**************************************************************************/ <br> <br>void  <br>ss_FinishFunc(SSFINISHPROC Func) <br>{ <br>    gFinishFunc = Func; <br>    if( gpss-&gt;psswGL ) <br>        gpss-&gt;psswGL-&gt;FinishFunc = gFinishFunc; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_FloaterBounceFunc <br>* <br>\**************************************************************************/ <br> <br>void  <br>ss_FloaterBounceFunc(SSFLOATERBOUNCEPROC Func) <br>{ <br>    gFloaterBounceFunc = Func; <br>    if( gpss-&gt;psswGL ) <br>        gpss-&gt;psswGL-&gt;FloaterBounceFunc = gFloaterBounceFunc; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_DataPtr <br>* <br>* Sets data ptr to be sent with callbacks <br>* <br>\**************************************************************************/ <br> <br>void  <br>ss_DataPtr( void *data ) <br>{ <br>    gDataPtr = data; <br>    if( gpss-&gt;psswGL ) <br>        gpss-&gt;psswGL-&gt;DataPtr = gDataPtr; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* RandomWindowPos <br>* <br>* Sets a new random window position and direction. <br>* <br>\**************************************************************************/ <br> <br>void  <br>ss_RandomWindowPos() <br>{ <br>    if( gpss-&gt;psswGL ) <br>        gpss-&gt;psswGL-&gt;RandomWindowPos(); <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_SetWindowAspectRatio <br>* <br>* Resize the window to conform to the supplied aspect ratio.  We do this by <br>* maintaining the existing width, and adjusting the height. <br>* <br>* Window resize seems to be executed synchronously, so gl should be able to <br>* immediately validate its buffer dimensions (we count on it). <br>* <br>* Returns TRUE if new height is different from last, else FALSE. <br>\**************************************************************************/ <br> <br>BOOL  <br>ss_SetWindowAspectRatio( FLOAT aspect ) <br>{ <br>    if( gpss-&gt;psswGL ) <br>        return gpss-&gt;psswGL-&gt;SetAspectRatio( aspect ); <br>    return FALSE; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_GetScreenSize <br>* <br>* Returns size of screen saver window <br>* <br>\**************************************************************************/ <br> <br>void <br>ss_GetScreenSize( ISIZE *size ) <br>{ <br>    if( gpss-&gt;psswMain ) <br>        *size = gpss-&gt;psswMain-&gt;size; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_GetHWND <br>* <br>* Return HWND of the main window <br>\**************************************************************************/ <br> <br>HWND  <br>ss_GetHWND() <br>{ <br>    if( gpss-&gt;psswMain ) <br>        return gpss-&gt;psswMain-&gt;hwnd; <br>    return NULL; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_GetGLHWND <br>* <br>* Return HWND of the GL window <br>\**************************************************************************/ <br> <br>HWND  <br>ss_GetGLHWND() <br>{ <br>    if( gpss-&gt;psswGL ) <br>        return gpss-&gt;psswGL-&gt;hwnd; <br>    return NULL; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_GetMainPSSW <br>* <br>* Return PSSW of top level window <br>\**************************************************************************/ <br> <br>PSSW <br>ss_GetMainPSSW() <br>{ <br>    if( gpss-&gt;psswMain ) <br>        return gpss-&gt;psswMain; <br>    return NULL; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

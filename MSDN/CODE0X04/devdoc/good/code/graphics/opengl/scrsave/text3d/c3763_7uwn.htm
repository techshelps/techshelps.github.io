<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SSTEXT3D.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3767"></a>SSTEXT3D.H</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: sstext3d.h <br>* <br>* Global header for text3D screen saver. <br>* <br>* Copyright (c) 1994 Microsoft Corporation <br>* <br>\**************************************************************************/ <br> <br>#ifndef __sstext3d_h__ <br>#define __sstext3d_h__ <br> <br>#include &lt;commctrl.h&gt; <br>#include "dlgs.h" <br>#include "sscommon.h" <br> <br>#define PI_OVER_2 (PI/2.0f) <br>#define PI_OVER_4 (PI/4.0f) <br> <br>#define TEXT_BUF_SIZE       100     // max length of display text buffer <br>                                    // (including NULL termination) <br>#define TEXT_LIMIT          16      // max length of user-inputted display text <br> <br>#define MAX_IROT            100     // max integer rotation level (from slider) <br> <br>#define MIN_SLIDER          0 <br>#define MAX_SLIDER          100 <br> <br>// demo types <br>enum { <br>    DEMO_STRING = 0,    // static string <br>    DEMO_CLOCK,         // digital clock <br>    DEMO_VSTRING,       // variable string (actually a subset of DEMO_STRING) <br>}; <br> <br>#define MAX_DEMO  1             // max demo index <br>#define NUM_DEMOS (MAX_DEMO+1) <br> <br>// surface styles <br>enum { <br>    SURFSTYLE_SOLID = 0, <br>    SURFSTYLE_TEX, <br>    SURFSTYLE_WIREFRAME <br>}; <br> <br>// rotation styles <br>enum { <br>    ROTSTYLE_NONE = 0, <br>    ROTSTYLE_SEESAW, <br>    ROTSTYLE_WOBBLE, <br>    ROTSTYLE_RANDOM, <br>    NUM_ROTSTYLES <br>}; <br> <br>enum { <br>    X_AXIS = 0, <br>    Y_AXIS, <br>    Z_AXIS, <br>    NUM_AXIS <br>}; <br> <br> <br>#if defined(max) <br>#undef max <br>#endif <br>#define max( a, b ) ( a &gt;= b ? a : b ) <br> <br>#if defined(clamp) <br>#undef clamp <br>#endif <br>#define clamp( a, lo, hi ) ( (a &lt; lo) ? lo : ((a &gt; hi) ? hi : a) ) <br> <br>#define deg_to_rad( a ) ( (a*PI) / 180.0f ) <br>#define rad_to_deg( a ) ( (a*180.0f) / PI ) <br> <br>typedef struct { <br>    USHORT listNum;             // display list number <br>    TCHAR     glyph;            // glyph value (for extended LUT entries) <br>    LPGLYPHMETRICSFLOAT lpgmf;  // ptr to glyphmetrics <br>} LISTENTRY; <br> <br>#define SIZE_LIST_LUT  512 <br>#define MAX_DIRECT_LUT 256 <br> <br>typedef struct { <br>    HDC     hdc; <br>    int     nGlyphs;            // number of glyphs <br>    int     firstGlyph; <br>    FLOAT   chordalDeviation; <br>    FLOAT   extrusion; <br>    int     type;               // WGL_FONT_LINES or WGL_FONT_POLYGONS <br>    LISTENTRY *listLUT;             // LUT for cmd list # from glyph <br>    int     LUTIndex;           // current index for new indirect look-ups <br>} WglFontContext; <br> <br>typedef struct { <br>    // registry or registry-derived attributes <br>    int     demoType; <br>    BOOL    bMaterialCycle; <br>    int     matType;    // material type from registry <br>    MATERIAL *pMat;     // ptr to current material <br>    int     surfStyle; <br>    int     rotStyle;   // rotation style <br>    int     texQual; <br>    float   fTesselFact; <br>    float   fDepth; // extrusion <br>    int     iSpeed; // rotation speed <br>    UINT    uSize;  // window size <br>    TEXFILE texFile;  // texture file <br>    TEXTURE texture; <br>    TCHAR   szFontName[LF_FACESIZE];       // font face name <br>    BOOL    bBold; <br>    BOOL    bItalic; <br>    BYTE    charSet; <br>    TCHAR   szText[TEXT_BUF_SIZE+1];  // display string <br>    USHORT  usText[TEXT_BUF_SIZE+1];    // display string converted to cmd lists <br> <br>    // internal attributes <br>    BOOL            bTexture; <br>    BOOL            bRandomMat; <br>    WglFontContext  *pWglFontC; <br>    int             textLen; <br>    POINTFLOAT      pfTextExtent; <br>    POINTFLOAT      pfTextOrigin;       // upper left corner of extents <br>    POINT3D         p3dBoundingBox;     // bounding box, from spin angles <br>    FLOAT           fFovy;              // field of view in y-dir <br>    FLOAT           fAspect;            // aspect ratio of GL window <br>    FLOAT           fViewDist;          // dist to front of bounding box <br>    FLOAT           fZtrans;            // translation in z <br>    int             iRotStep;           // rotation step from slider <br>    int             iRotMinStep;        // min rotation step <br>    int             iRotMaxStep;        // max rotation step <br>    IPOINT3D        ip3dRotStep;        // xyz rot step, for random rotation <br>    IPOINT3D        ip3dRoti;           // current xyz rot step iteration <br>    POINT3D         p3dRotMin;          // min rotation amplitude <br>    POINT3D         p3dRotMax;          // max rotation amplitude <br>    POINT3D         p3dRotLimit;        // current rotation amplitude <br>    POINT3D         p3dRot;             // current rotation <br>    POINTFLOAT      *pTrig;             // current trig table <br>    SYSTEMTIME      stTime; <br>    BOOL            bXMajor;            // string either x-major or y-major <br> <br>    SSContext       ssc;                // screen saver configuration <br>} AttrContext; <br> <br>// Global attribute context <br>extern AttrContext gac; <br> <br>extern WglFontContext* CreateWglFontContext (  <br>    HDC     hdc,  <br>    int     type,  <br>    float   fExtrusion,  <br>    float   fChordalDeviation ); <br> <br>extern void DeleteWglFontContext(  <br>    WglFontContext *pwfc ); <br> <br>extern void DrawString (  <br>    USHORT *string,  <br>    int     strLen,  <br>    WglFontContext *pwfc ); <br> <br>extern int GetStringExtent(  <br>    LPTSTR  pszString,  <br>    POINTFLOAT *extent,  <br>    POINTFLOAT *origin, <br>    WglFontContext *pwfc ); <br> <br>extern void ConvertStringToList(  <br>    LPTSTR pszSrc,  <br>    USHORT *usDst,  <br>    WglFontContext *pwfc ); <br> <br>extern void getIniSettings(void); <br> <br> <br>// Resource constants <br> <br>#define IDS_SCREENSAVERTITLE    1020 <br>#define IDS_SAVERNAME           1002 <br> <br>// registry attribute strings: <br>#define IDS_DEMOTYPE            1100 <br>#define IDS_SURFSTYLE           1104 <br>#define IDS_FONT                1109 <br>#define IDS_FONT_ATTRIBUTES     1110 <br>#define IDS_CHARSET             1111 <br>#define IDS_TEXT                1115 <br>#define IDS_SPEED               1120 <br>#define IDS_ROTSTYLE            1124 <br> <br>// demo type strings <br>#define IDS_DEMO_STRING       1200 <br>#define IDS_DEMO_CLOCK        1201 <br> <br>// rotation resource strings <br>#define IDS_ROTSTYLE_NONE            1400 <br>#define IDS_ROTSTYLE_SEESAW          1401 <br>#define IDS_ROTSTYLE_WOBBLE          1402 <br>#define IDS_ROTSTYLE_RANDOM          1403 <br> <br>#define DLG_SETUP_HELP          2001 <br>#define DLG_SETUP_TYPES         2002    // object type menu <br>#define DLG_SETUP_BITMAP        2003 <br>#define DLG_SETUP_ABOUT         2010 <br>#define DLG_SETUP_TESSEL        2012    // tesselation slider <br>#define DLG_SETUP_SIZE          2014    // size slider <br>#define DLG_SETUP_TEX           2016    // texture button <br>#define DLG_SETUP_FONT          2022    // select font button <br>#define DLG_SETUP_SPEED         2023    // speed slider <br> <br>// surface styles <br>#define IDC_RADIO_SOLID         2030 <br>#define IDC_RADIO_TEX           2031 <br>#define IDC_RADIO_WIREFRAME     2032    // not presently used <br> <br>#define IDC_TO_SURFSTYLE(n)         ( (n) - IDC_RADIO_SOLID ) <br>// In order for the IDC_TO_SURFSTYLE conversion macro to work, the radio buttons <br>// for surface styles must be kept contiguous. <br> <br>// rotation styles <br>#define DLG_SETUP_ROTSTYLE      4100 <br> <br> <br>// demo type <br>#define IDC_DEMO_STRING         5000 <br>#define IDC_DEMO_CLOCK          5001 <br>#define IDC_TO_DEMOTYPE(n)      ( (n) - IDC_DEMO_STRING ) <br> <br>// sliders <br>#define IDC_STATIC_TESS         2051    // box around slider <br>#define IDC_STATIC_TESS_MIN     2052    // min label <br>#define IDC_STATIC_TESS_MAX     2053    // max label <br>#define IDC_STATIC_SIZE         2054 <br>#define IDC_STATIC_SIZE_MIN     2055 <br>#define IDC_STATIC_SIZE_MAX     2056 <br> <br>// rotation sliders <br>#define IDC_STATIC_ROTATION_GRP 5000 <br> <br>// configure text dialog box stuff <br>#define IDS_TEXT_TITLE          3001 <br>#define DLG_TEXT_ENTER          3020 <br>#define DLG_TEXT_SHOW           3021 <br> <br>// Choose font template <br>#define DLG_CF_TEMPLATE         6000 <br>#define IDD_FONT                6001 <br> <br>// Default texture resource <br>#define IDB_DEFTEX              7000 <br> <br>#define SHELP_CONTENTS          01 <br>#define SHELP_SHAPES            02 <br>#define SHELP_PASSWORD          03 <br>#define SHELP_COLOR             04 <br>#define SHELP_MISC              05 <br>#define SHELP_OVERVIEW          06 <br> <br>// <br>// Neutral ANSI/UNICODE types and macros plucked from ntdef.h <br>// <br>#ifdef  UNICODE <br>typedef WCHAR TCHAR, *PTCHAR; <br>#else   /* UNICODE */ <br>typedef unsigned char TUCHAR, *PTUCHAR; <br>#endif /* UNICODE */ <br> <br>#endif // __sstext3d_h__ <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

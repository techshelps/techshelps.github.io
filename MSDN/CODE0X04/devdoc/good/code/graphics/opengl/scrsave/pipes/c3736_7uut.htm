<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SSPIPES.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3755"></a>SSPIPES.CXX</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: sspipes.cxx <br>* <br>* Startup code <br>* <br>* Copyright (c) 1994 Microsoft Corporation <br>* <br>\**************************************************************************/ <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;sys/types.h&gt; <br>#include &lt;sys/timeb.h&gt; <br>#include &lt;time.h&gt; <br>#include &lt;windows.h&gt; <br> <br>#include "sspipes.h" <br>#include "dialog.h" <br>#include "state.h" <br> <br>#ifdef DO_TIMING <br>int pipeCount; <br>#endif <br> <br>void InitPipes( void *data ); <br> <br>/******************************Public*Routine******************************\ <br>* ss_Init <br>* <br>* Initialize - called on first entry into ss. <br>* Called BEFORE gl is initialized! <br>* Just do basic stuff here, like set up callbacks, verify dialog stuff, etc. <br>* <br>* Fills global SSContext structure with required data, and returns ptr <br>* to it. <br>* <br>\**************************************************************************/ <br> <br>static SSContext ssc; <br> <br>SSContext * <br>ss_Init( void ) <br>{ <br>    // validate some initial dialog settings <br>    getIniSettings();  // also called on dialog init     <br> <br>    if( ulSurfStyle == SURFSTYLE_TEX ) { <br>        // Texture verification has to go here, before gl is loaded, in case <br>        // error msgs are displayed. <br>         <br>        for( int i = 0; i &lt; gnTextures; i ++ ) { <br>            if( !ss_VerifyTextureFile( &amp;gTexFile[i]) ) { <br>                // user texture is invalid - substitute resource texture ? <br>                // If gnTextures &gt; nRes <br>                // get rid of this one - move the others up <br>                gnTextures--; <br>                for( int j = i; j &lt; gnTextures; j++ ) <br>                    gTexFile[j] = gTexFile[j+1]; <br>            } <br>        } <br>    } <br> <br>    ss_InitFunc( InitPipes ); <br> <br>    // set configuration info to return <br>    ssc.bDoubleBuf = FALSE; <br>    ssc.depthType = SS_DEPTH16; <br>    ssc.bFloater = FALSE; <br> <br>    return &amp;ssc; <br>} <br> <br>static void <br>Draw( void *data ) <br>{ <br>    ((STATE *) data)-&gt;Draw(data); <br>} <br> <br>static void <br>Reshape( int width, int height, void *data ) <br>{ <br>    ((STATE *) data)-&gt;Reshape( width, height, data ); <br>} <br> <br>static void <br>Repaint( LPRECT pRect, void *data ) <br>{ <br>    ((STATE *) data)-&gt;Repaint( pRect, data ); <br>} <br> <br>static void <br>Finish( void *data ) <br>{ <br>    ((STATE *) data)-&gt;Finish( data ); <br>} <br> <br>/******************************Public*Routine******************************\ <br>* InitPipes <br>* <br>* - Called when GL window has been initialized <br>* <br>\**************************************************************************/ <br>void  <br>InitPipes( void *data ) <br>{ <br>    // create world of pipes <br> <br>    //mf: for now, bFlexMode used to choose between normal/flex <br> <br>    STATE *pPipeWorld = new STATE( bFlexMode, bMultiPipes ); <br> <br>    ss_UpdateFunc( Draw ); <br>    ss_ReshapeFunc( Reshape ); <br>    ss_RepaintFunc( Repaint ); <br>    ss_FinishFunc( Finish ); <br>    ss_DataPtr( pPipeWorld );  <br>} <br> <br>#ifdef DO_TIMING <br>void CalcPipeRate( struct _timeb baseTime, int pipeCount ) { <br>    static struct _timeb thisTime; <br>    double elapsed, pipeRate; <br>    char buf[100]; <br> <br>    _ftime( &amp;thisTime ); <br>    elapsed = thisTime.time + thisTime.millitm/1000.0 - <br>       (baseTime.time + baseTime.millitm/1000.0); <br> <br> <br>    if( elapsed == 0.0 ) <br>        pipeRate = 0.0; <br>    else <br>        pipeRate = pipeCount / elapsed; <br> <br>    sprintf( buf, "Last frame's pipe rate = %4.1f pps", pipeRate ); <br>#ifdef SS_DEBUG <br>    SendMessage(ss_GetHWND(), WM_SETTEXT, 0, (LPARAM)buf); <br>#endif <br>} <br> <br>void Timer( int mode ) <br>{ <br>    static struct _timeb baseTime; <br> <br>    switch( mode ) { <br>        case TIMER_START: <br>            pipeCount = 0; <br>         _ftime( &amp;baseTime ); <br>            break; <br>        case TIMER_STOP: <br>            CalcPipeRate( baseTime, pipeCount ); <br>            break; <br>        case TIMER_TIMING: <br>            break; <br>        case TIMER_RESET: <br>        default: <br>            break; <br>    } <br>} <br>#endif <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

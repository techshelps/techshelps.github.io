<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIALOG.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3763"></a>DIALOG.C</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: dialog.c <br>* <br>* Dialog box functions for the OpenGL-based 3D Text screen saver. <br>* <br>* Copyright (c) 1994 Microsoft Corporation <br>\**************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;scrnsave.h&gt; <br>#include &lt;GL\gl.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;memory.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdarg.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;malloc.h&gt; <br>#include &lt;sys\timeb.h&gt; <br>#include &lt;time.h&gt; <br>#include "sscommon.h" <br>#include "sstext3d.h" <br> <br>// Global screen saver settings. <br> <br>static int idsStyles[NUM_DEMOS] = <br>    {IDS_DEMO_STRING, IDS_DEMO_CLOCK}; <br> <br>static int idsRotStyles[NUM_ROTSTYLES] = <br>{    IDS_ROTSTYLE_NONE, <br>     IDS_ROTSTYLE_SEESAW, <br>     IDS_ROTSTYLE_WOBBLE, <br>     IDS_ROTSTYLE_RANDOM <br>}; <br> <br>// local funtions <br> <br>LONG WndProc(HWND, UINT, WPARAM, LPARAM); <br>static void InitAttrContext( AttrContext *pac ); <br>static void getFont( HWND hDlg); <br>static void updateDialogControls(HWND hDlg); <br> <br> <br>/******************************Public*Routine******************************\ <br>* getIniSettings <br>* <br>* Get the screen saver configuration options from .INI file/registry. <br>* <br>\**************************************************************************/ <br> <br>void  <br>getIniSettings() <br>{ <br>    int    options; <br>    int    optMask = 1; <br>    TCHAR  szDefaultBitmap[MAX_PATH]; <br>    int    iPos; <br> <br>    // Initialize the global AttrContext <br> <br>    InitAttrContext( &amp;gac ); <br> <br>    // Load resources <br> <br>    LoadString(hMainInstance, IDS_GENNAME, szScreenSaver,  <br>               sizeof(szScreenSaver) / sizeof(TCHAR)); <br> <br>    // Get registry settings <br> <br>    if( ss_RegistrySetup( hMainInstance, IDS_SAVERNAME, IDS_INIFILE ) ) <br>    { <br>        // get demo type <br> <br>        gac.demoType = ss_GetRegistryInt( IDS_DEMOTYPE, DEMO_STRING ); <br>        SS_CLAMP_TO_RANGE2( gac.demoType, 0, MAX_DEMO); <br> <br>        // get rotation style <br> <br>        gac.rotStyle = ss_GetRegistryInt( IDS_ROTSTYLE, ROTSTYLE_RANDOM ); <br>        SS_CLAMP_TO_RANGE2( gac.rotStyle, 0, NUM_ROTSTYLES-1 ); <br> <br>        // get tesselation <br> <br>        iPos = ss_GetRegistryInt( IDS_TESSELATION, 10 ); <br>        SS_CLAMP_TO_RANGE2( iPos, MIN_SLIDER, MAX_SLIDER ); <br>        gac.fTesselFact  = (float)iPos / 100.0f; <br> <br>        // get size <br> <br>        gac.uSize = ss_GetRegistryInt( IDS_SIZE, 50 ); <br>        SS_CLAMP_TO_RANGE2( gac.uSize, MIN_SLIDER, MAX_SLIDER ); <br> <br>        // get speed <br> <br>        gac.iSpeed = ss_GetRegistryInt( IDS_SPEED, 50 ); <br>        SS_CLAMP_TO_RANGE2( gac.iSpeed, MIN_SLIDER, MAX_SLIDER ); <br> <br>        // get surface style <br> <br>        gac.surfStyle = ss_GetRegistryInt( IDS_SURFSTYLE, SURFSTYLE_SOLID ); <br>        SS_CLAMP_TO_RANGE2(gac.surfStyle, 0, SURFSTYLE_TEX); <br> <br>        // get font, attributes, and charset <br> <br>        ss_GetRegistryString( IDS_FONT, TEXT("Arial"), gac.szFontName, LF_FACESIZE); <br> <br>        options = ss_GetRegistryInt( IDS_FONT_ATTRIBUTES, 0 ); <br>        if( options &gt;= 0 ) { <br>            optMask = 1; <br>            gac.bBold = ((options &amp; optMask) != 0);  <br>            optMask &lt;&lt;=1; <br>            gac.bItalic = ((options &amp; optMask) != 0);  <br>        } <br> <br>        gac.charSet = ss_GetRegistryInt( IDS_CHARSET, 0 ); <br> <br>        // get display string <br> <br>        ss_GetRegistryString( IDS_TEXT, TEXT("OpenGL"), gac.szText, TEXT_LIMIT+1); <br> <br>        // Determine the default .bmp file <br> <br>        ss_GetDefaultBmpFile( szDefaultBitmap ); <br> <br> <br>        // Is there a texture specified in the registry that overrides the <br>        // default? <br> <br>        ss_GetRegistryString( IDS_TEXTURE, szDefaultBitmap, gac.texFile.szPathName, <br>                              MAX_PATH); <br> <br>        gac.texFile.nOffset = ss_GetRegistryInt( IDS_TEXTURE_FILE_OFFSET, 0 ); <br>    } <br>} <br> <br> <br>/**************************************************************************\ <br>* ConfigInit <br>* <br>\**************************************************************************/ <br>BOOL <br>ss_ConfigInit( HWND hDlg ) <br>{ <br>    return TRUE; <br>} <br> <br>/**************************************************************************\ <br>* InitAttrContext <br>* <br>* Initialize some of the values in the attribute context <br>\**************************************************************************/ <br>static void <br>InitAttrContext( AttrContext *pac ) <br>{ <br>    // set some default values <br> <br>    pac-&gt;demoType = DEMO_STRING; <br>    pac-&gt;surfStyle = SURFSTYLE_SOLID; <br>    pac-&gt;fTesselFact = 1.0f; <br>    pac-&gt;uSize = 50; <br>    pac-&gt;iSpeed = 50; <br>    pac-&gt;texFile.szPathName[0] = '\0'; <br>    pac-&gt;texFile.nOffset = 0; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* saveIniSettings <br>* <br>* Save the screen saver configuration option to the .INI file/registry. <br>\**************************************************************************/ <br> <br>static void  <br>saveIniSettings(HWND hDlg) <br>{ <br>    int options; <br>    int optMask = 1; <br> <br>    GetWindowText( GetDlgItem(hDlg, DLG_TEXT_ENTER), gac.szText, TEXT_LIMIT+1); <br> <br>    if( ss_RegistrySetup( hMainInstance, IDS_SAVERNAME, IDS_INIFILE ) ) <br>    { <br>        ss_WriteRegistryInt( IDS_DEMOTYPE, gac.demoType ); <br>        ss_WriteRegistryInt( IDS_ROTSTYLE, gac.rotStyle ); <br>        ss_WriteRegistryInt( IDS_TESSELATION,  <br>                    ss_GetTrackbarPos(hDlg, DLG_SETUP_TESSEL) ); <br>        ss_WriteRegistryInt( IDS_SIZE, <br>                    ss_GetTrackbarPos(hDlg, DLG_SETUP_SIZE) ); <br>        ss_WriteRegistryInt( IDS_SPEED,  <br>                    ss_GetTrackbarPos(hDlg, DLG_SETUP_SPEED) ); <br>        ss_WriteRegistryInt( IDS_SURFSTYLE, gac.surfStyle ); <br>        ss_WriteRegistryString( IDS_FONT, gac.szFontName ); <br> <br>        optMask = 1; <br>        options = gac.bBold ? optMask : 0; <br>        optMask &lt;&lt;= 1; <br>        options |= gac.bItalic ? optMask : 0; <br>        ss_WriteRegistryInt( IDS_FONT_ATTRIBUTES, options ); <br> <br>        ss_WriteRegistryInt( IDS_CHARSET, gac.charSet ); <br>        ss_WriteRegistryString( IDS_TEXT, gac.szText ); <br>        ss_WriteRegistryString( IDS_TEXTURE, gac.texFile.szPathName ); <br>        ss_WriteRegistryInt( IDS_TEXTURE_FILE_OFFSET, gac.texFile.nOffset ); <br>    } <br>} <br> <br>/******************************Public*Routine******************************\ <br>* setupDialogControls <br>* <br>* Do initial setup of dialog controls. <br>\**************************************************************************/ <br> <br>static void  <br>setupDialogControls(HWND hDlg) <br>{ <br>    int pos; <br> <br>    InitCommonControls(); <br> <br>    // initialize sliders <br> <br>    // tesselation slider <br> <br>    pos = (int)(gac.fTesselFact * 100.0f); <br>    ss_SetupTrackbar( hDlg, DLG_SETUP_TESSEL, MIN_SLIDER, MAX_SLIDER, 1, 9,  <br>                      pos ); <br> <br>    // size slider <br> <br>    ss_SetupTrackbar( hDlg, DLG_SETUP_SIZE, MIN_SLIDER, MAX_SLIDER, 1, 9,  <br>                      gac.uSize ); <br> <br>    // speed slider <br> <br>    ss_SetupTrackbar( hDlg, DLG_SETUP_SPEED, MIN_SLIDER, MAX_SLIDER, 1, 9,  <br>                      gac.iSpeed); <br> <br>    // set state of other controls <br> <br>    updateDialogControls(hDlg); <br>} <br> <br>/******************************Public*Routine******************************\ <br>* updateDialogControls <br>* <br>* Updates dialog controls according to current state <br>\**************************************************************************/ <br> <br>static void  <br>updateDialogControls(HWND hDlg) <br>{ <br>    BOOL bTexSurf; <br>    BOOL bText; <br> <br>    bTexSurf = (gac.surfStyle == SURFSTYLE_TEX ); <br> <br>    CheckDlgButton(hDlg, IDC_RADIO_SOLID, !bTexSurf ); <br>    CheckDlgButton(hDlg, IDC_RADIO_TEX  , bTexSurf ); <br> <br>    // set up demo-specific configure button <br> <br>    bText = (gac.demoType == DEMO_STRING) ? TRUE : FALSE; <br>    EnableWindow(GetDlgItem(hDlg, DLG_TEXT_ENTER), bText ); <br>    CheckDlgButton(hDlg, IDC_DEMO_STRING, bText ); <br>    CheckDlgButton(hDlg, IDC_DEMO_CLOCK, !bText ); <br> <br>    // texture: only enable if surfStyle is texture <br> <br>    EnableWindow(GetDlgItem(hDlg, DLG_SETUP_TEX), bTexSurf ); <br>} <br> <br>/******************************Public*Routine******************************\ <br>* getFont <br>* <br>* Calls ChooseFont dialog <br>\**************************************************************************/ <br> <br>static void <br>getFont( HWND hDlg) <br>{ <br>    CHOOSEFONT cf = {0}; <br>    LOGFONT    lf = {0}; <br>    HDC   hdc; <br> <br>    hdc = GetDC( hDlg ); <br> <br>    // Create and select a font. <br> <br>    cf.lStructSize = sizeof(CHOOSEFONT); <br>    cf.hwndOwner = hDlg; <br>    cf.lpLogFont = &amp;lf; <br>    cf.hInstance = hMainInstance; <br>    cf.lpTemplateName = (LPTSTR) MAKEINTRESOURCE(IDD_FONT); <br>    cf.Flags = CF_SCREENFONTS | CF_INITTOLOGFONTSTRUCT | CF_TTONLY | <br>               CF_ENABLETEMPLATE | CF_NOSIMULATIONS; <br> <br>    // setup logfont with current settings <br> <br>    lstrcpy(lf.lfFaceName, gac.szFontName); <br>    lf.lfWeight = (gac.bBold) ? FW_BOLD : FW_NORMAL; <br>    lf.lfItalic = (gac.bItalic) ? (BYTE) 1 : 0; <br>    lf.lfCharSet = gac.charSet; <br>    lf.lfHeight = -37;  // value ??? <br> <br>    if( ChooseFont(&amp;cf) ) { <br>        // retrieve settings into gac <br>        lstrcpy( gac.szFontName, lf.lfFaceName ); <br>        gac.bBold = (lf.lfWeight == FW_NORMAL) ? FALSE : TRUE; <br>        gac.bItalic = (lf.lfItalic) ? TRUE : FALSE; <br>        gac.charSet = lf.lfCharSet; <br>    } <br>} <br> <br>BOOL WINAPI RegisterDialogClasses(HANDLE hinst) <br>{ <br>    return TRUE; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ScreenSaverConfigureDialog <br>* <br>* Processes messages for the configuration dialog box. <br>* <br>\**************************************************************************/ <br> <br>BOOL ScreenSaverConfigureDialog(HWND hDlg, UINT message, <br>                                WPARAM wParam, LPARAM lParam) <br>{ <br>    int wTmp; <br>    TCHAR szStr[GEN_STRING_SIZE]; <br> <br>    switch (message) { <br>        case WM_INITDIALOG: <br>            getIniSettings(); <br>            setupDialogControls(hDlg); <br> <br>            // setup rotStyle combo box <br>            for (wTmp = 0; wTmp &lt; NUM_ROTSTYLES; wTmp++) { <br>                LoadString(hMainInstance, idsRotStyles[wTmp], szStr,  <br>                            GEN_STRING_SIZE); <br>                SendDlgItemMessage(hDlg, DLG_SETUP_ROTSTYLE, CB_ADDSTRING, 0, <br>                                   (LPARAM) szStr); <br>            } <br>            SendDlgItemMessage(hDlg, DLG_SETUP_ROTSTYLE, CB_SETCURSEL,  <br>                               gac.rotStyle, 0); <br> <br>            // display current string in box <br>            SendDlgItemMessage( hDlg, DLG_TEXT_ENTER, EM_LIMITTEXT, TEXT_LIMIT,0); <br>            SetWindowText( GetDlgItem(hDlg, DLG_TEXT_ENTER), gac.szText ); <br> <br>            return TRUE; <br> <br>        case WM_COMMAND: <br>            switch (LOWORD(wParam)) { <br>                case DLG_SETUP_TYPES: <br>                    switch (HIWORD(wParam)) <br>                    { <br>                        case CBN_EDITCHANGE: <br>                        case CBN_SELCHANGE: <br>                            gac.demoType =  <br>                                SendDlgItemMessage(hDlg, DLG_SETUP_TYPES, <br>                                                      CB_GETCURSEL, 0, 0); <br>                            updateDialogControls(hDlg); <br>                            break; <br>                        default: <br>                            break; <br>                    } <br>                    return FALSE; <br> <br>                case DLG_SETUP_ROTSTYLE: <br>                    switch (HIWORD(wParam)) <br>                    { <br>                        case CBN_EDITCHANGE: <br>                        case CBN_SELCHANGE: <br>                            gac.rotStyle =  <br>                                SendDlgItemMessage(hDlg, DLG_SETUP_ROTSTYLE, <br>                                                      CB_GETCURSEL, 0, 0); <br>                            updateDialogControls(hDlg); <br>                            break; <br>                        default: <br>                            break; <br>                    } <br>                    return FALSE; <br> <br>                case DLG_SETUP_TEX: <br>                    // Run choose texture dialog <br>                    ss_SelectTextureFile( hDlg, &amp;gac.texFile ); <br>                    break; <br> <br>                case DLG_SETUP_FONT: <br>                    getFont(hDlg); <br>                    break; <br>                     <br>                case IDC_RADIO_SOLID: <br>                case IDC_RADIO_TEX: <br>                    gac.surfStyle = IDC_TO_SURFSTYLE( LOWORD(wParam) ); <br>                    updateDialogControls(hDlg); <br>                    break; <br> <br>                case IDC_DEMO_STRING: <br>                case IDC_DEMO_CLOCK: <br>                    gac.demoType = IDC_TO_DEMOTYPE( LOWORD(wParam) ); <br>                    updateDialogControls(hDlg); <br>                    if( LOWORD(wParam) == IDC_DEMO_STRING ) { <br>                        // set selected text focus <br>                        SetFocus( GetDlgItem(hDlg, DLG_TEXT_ENTER) ); <br>                        SendDlgItemMessage( hDlg, DLG_TEXT_ENTER,  <br>                                            EM_SETSEL, 0, -1 ); <br>                    } <br>                    break; <br>             <br>                case IDOK: <br>                    saveIniSettings(hDlg); <br>                    EndDialog(hDlg, TRUE); <br>                    break; <br> <br>                case IDCANCEL: <br>                    EndDialog(hDlg, FALSE); <br>                    break; <br> <br>                default: <br>                    break; <br>            } <br>            return TRUE; <br>            break; <br> <br>        default: <br>            return 0; <br>    } <br>    return 0; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

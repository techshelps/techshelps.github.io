<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UTIL.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3714"></a>UTIL.CXX</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: util.cxx <br>* <br>* Misc. utility functions <br>* <br>* Copyright 1996 - 1998 Microsoft Corporation <br>* <br>\**************************************************************************/ <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;windows.h&gt; <br>#include &lt;sys/timeb.h&gt; <br>#include &lt;GL/gl.h&gt; <br>#include &lt;sys/types.h&gt; <br>#include &lt;sys/timeb.h&gt; <br>#include &lt;time.h&gt; <br>#include &lt;math.h&gt; <br>#include "ssintrnl.hxx" <br>#include "util.hxx" <br> <br> <br>/******************************Public*Routine******************************\ <br>* SS_TIME class <br>* <br>\**************************************************************************/ <br> <br>void <br>SS_TIME::Update() <br>{ <br>    struct _timeb time; <br> <br>    _ftime( &amp;time ); <br>    seconds = time.time + time.millitm/1000.0; <br>} <br> <br>void <br>SS_TIME::Zero() <br>{ <br>    seconds = 0.0; <br>} <br> <br>double <br>SS_TIME::Seconds() <br>{ <br>    return seconds; <br>} <br> <br>SS_TIME <br>SS_TIME::operator+( SS_TIME addTime ) <br>{ <br>    return( *this += addTime ); <br>} <br> <br> <br>SS_TIME <br>SS_TIME::operator-( SS_TIME subTime ) <br>{ <br>    return( *this -= subTime ); <br>} <br> <br>SS_TIME <br>SS_TIME::operator+=( SS_TIME addTime ) <br>{ <br>    seconds += addTime.seconds; <br>    return *this; <br>} <br> <br>SS_TIME <br>SS_TIME::operator-=( SS_TIME subTime ) <br>{ <br>    seconds -= subTime.seconds; <br>    return *this; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* SS_TIMER class <br>* <br>\**************************************************************************/ <br> <br>void <br>SS_TIMER::Start() <br>{ <br>    startTime.Update(); <br>} <br> <br>SS_TIME <br>SS_TIMER::Stop() <br>{ <br>    elapsed.Update(); <br>    return elapsed - startTime; <br>} <br> <br>void <br>SS_TIMER::Reset() <br>{ <br>    elapsed.Zero(); <br>} <br> <br>SS_TIME <br>SS_TIMER::ElapsedTime() <br>{ <br>    elapsed.Update(); <br>    return elapsed - startTime; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_Rand <br>* <br>* Generates integer random number 0..(max-1) <br>* <br>\**************************************************************************/ <br> <br>int ss_iRand( int max ) <br>{ <br>    return (int) ( max * ( ((float)rand()) / ((float)(RAND_MAX+1)) ) ); <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_Rand2 <br>* <br>* Generates integer random number min..max <br>* <br>\**************************************************************************/ <br> <br>int ss_iRand2( int min, int max ) <br>{ <br>    if( min == max ) <br>        return min; <br>    else if( max &lt; min ) { <br>        int temp = min; <br>        min = max; <br>        max = temp; <br>    } <br> <br>    return min + (int) ( (max-min+1) * ( ((float)rand()) / ((float)(RAND_MAX+1)) ) ); <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_fRand <br>* <br>* Generates float random number min...max <br>* <br>\**************************************************************************/ <br> <br>FLOAT ss_fRand( FLOAT min, FLOAT max ) <br>{ <br>    FLOAT diff; <br> <br>    diff = max - min; <br>    return min + ( diff * ( ((float)rand()) / ((float)(RAND_MAX)) ) ); <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_RandInit <br>* <br>* Initializes the randomizer <br>* <br>\**************************************************************************/ <br> <br>void ss_RandInit( void ) <br>{ <br>    struct _timeb time; <br> <br>    _ftime( &amp;time ); <br>    srand( time.millitm ); <br> <br>    for( int i = 0; i &lt; 10; i ++ ) <br>        rand(); <br>} <br> <br>#if DBG <br>/******************************Public*Routine******************************\ <br>* DbgPrint <br>* <br>* Formatted string output to the debugger. <br>* <br>* History: <br>*  26-Jan-1996 -by- Gilman Wong [gilmanw] <br>* Wrote it. <br>\**************************************************************************/ <br> <br>ULONG <br>DbgPrint(PCH DebugMessage, ...) <br>{ <br>    va_list ap; <br>    char buffer[256]; <br> <br>    va_start(ap, DebugMessage); <br> <br>    vsprintf(buffer, DebugMessage, ap); <br> <br>    OutputDebugStringA(buffer); <br> <br>    va_end(ap); <br> <br>    return(0); <br>} <br>#endif <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

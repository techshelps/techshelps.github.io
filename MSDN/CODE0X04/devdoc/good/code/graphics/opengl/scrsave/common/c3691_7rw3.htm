<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIALOG.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3693"></a>DIALOG.C</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: dialog.c <br>* <br>* Dialog helper functions <br>* <br>* Copyright 1995 - 1998 Microsoft Corporation <br>* <br>\**************************************************************************/ <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;windows.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;commctrl.h&gt; <br>#include "sscommon.h" <br> <br>#define BUF_SIZE 30 <br>static TCHAR  szSectName[BUF_SIZE]; <br>static TCHAR  szItemName[BUF_SIZE]; <br>static TCHAR  szFname[BUF_SIZE]; <br>static TCHAR  szTmp[BUF_SIZE]; <br>static HINSTANCE hInstance = 0; <br> <br>/******************************Public*Routine******************************\ <br>* ss_RegistrySetup <br>* <br>* Setup for registry access <br>* <br>\**************************************************************************/ <br> <br>BOOL ss_RegistrySetup( HINSTANCE hinst, int section, int file ) <br>{ <br>    if( LoadString(hInstance, section, szSectName, BUF_SIZE) &amp;&amp; <br>        LoadString(hInstance, file, szFname, BUF_SIZE) )  <br>    { <br>        hInstance = hinst; <br>        return TRUE; <br>    } <br>    return FALSE; <br>} <br> <br> <br>/******************************Public*Routine******************************\ <br>* ss_GetRegistryInt <br>* <br>* Retrieve integer value from registry <br>* <br>\**************************************************************************/ <br> <br>int  ss_GetRegistryInt( int name, int iDefault ) <br>{ <br>    if( LoadString( hInstance, name, szItemName, BUF_SIZE ) ) { <br>        return GetPrivateProfileInt(szSectName, szItemName, iDefault, szFname); <br>    } <br>    return 0; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_GetRegistryString <br>* <br>* Retrieve string from registry <br>* <br>\**************************************************************************/ <br> <br>void ss_GetRegistryString( int name, LPTSTR lpDefault, LPTSTR lpDest,  <br>                           int bufSize ) <br>{ <br>    if( LoadString( hInstance, name, szItemName, BUF_SIZE ) ) { <br>        GetPrivateProfileString(szSectName, szItemName, lpDefault, lpDest, <br>                                bufSize, szFname); <br>    } <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_WriteRegistryInt <br>* <br>* Write integer value to registry <br>* <br>\**************************************************************************/ <br> <br>void ss_WriteRegistryInt( int name, int iVal ) <br>{ <br>    if( LoadString(hInstance, name, szItemName, BUF_SIZE) ) { <br>        wsprintf(szTmp, TEXT("%ld"), iVal); <br>        WritePrivateProfileString(szSectName, szItemName, szTmp, szFname); <br>    } <br>} <br> <br>/******************************Public*Routine******************************\ <br>* ss_WriteRegistryString <br>* <br>* Write string value to registry <br>* <br>\**************************************************************************/ <br> <br>void ss_WriteRegistryString( int name, LPTSTR lpString ) <br>{ <br>    if( LoadString(hInstance, name, szItemName, BUF_SIZE) ) { <br>        WritePrivateProfileString(szSectName, szItemName, lpString, szFname); <br>    } <br>} <br> <br>/******************************Public*Routine******************************\ <br>* GetTrackbarPos <br>* <br>* Get the current position of a common control trackbar <br>\**************************************************************************/ <br> <br>int <br>ss_GetTrackbarPos( HWND hDlg, int item ) <br>{ <br>    return  <br>        SendDlgItemMessage(  <br>            hDlg,  <br>            item, <br>            TBM_GETPOS,  <br>            0, <br>            0 <br>        ); <br>} <br> <br>/******************************Public*Routine******************************\ <br>* SetupTrackbar <br>* <br>* Setup a common control trackbar <br>\**************************************************************************/ <br> <br>void <br>ss_SetupTrackbar( HWND hDlg, int item, int lo, int hi, int lineSize,  <br>                  int pageSize, int pos ) <br>{ <br>    SendDlgItemMessage(  <br>        hDlg,  <br>        item, <br>        TBM_SETRANGE,  <br>        (WPARAM) TRUE,  <br>        (LPARAM) MAKELONG( lo, hi ) <br>    ); <br>    SendDlgItemMessage(  <br>        hDlg,  <br>        item, <br>        TBM_SETPOS,  <br>        (WPARAM) TRUE,  <br>        (LPARAM) pos <br>    ); <br>    SendDlgItemMessage(  <br>        hDlg,  <br>        item, <br>        TBM_SETPAGESIZE,  <br>        (WPARAM) 0, <br>        (LPARAM) pageSize  <br>    ); <br>    SendDlgItemMessage(  <br>        hDlg,  <br>        item, <br>        TBM_SETLINESIZE,  <br>        (WPARAM) 0, <br>        (LPARAM) lineSize <br>    ); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

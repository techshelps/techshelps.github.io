<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OBJECTS.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3751"></a>OBJECTS.H</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: objects.h <br>* <br>* Copyright (c) 1994 Microsoft Corporation <br>* <br>\**************************************************************************/ <br> <br>#ifndef __objects_h__ <br>#define __objects_h__ <br> <br>#include "sspipes.h" <br>#include "state.h" <br> <br>class OBJECT_BUILD_INFO { <br>public: <br>    float radius; <br>    float divSize; <br>    int   nSlices; <br>    BOOL  bTexture; <br>    IPOINT2D *texRep; <br>}; <br> <br>/**************************************************************************\ <br>* <br>* OBJECT classes <br>* <br>* - Display list objects <br>* <br>\**************************************************************************/ <br> <br>class OBJECT { <br>protected: <br>    int         listNum; <br>    int         nSlices; <br>public: <br>    void        Draw(); <br> <br>    OBJECT(); <br>    ~OBJECT(); <br>}; <br> <br>class PIPE_OBJECT : public OBJECT { <br>private: <br>    void Build( OBJECT_BUILD_INFO *state, float length, float start_s, float s_end ); <br>public: <br>    PIPE_OBJECT( OBJECT_BUILD_INFO *state, float length ); <br>    PIPE_OBJECT( OBJECT_BUILD_INFO *state, float length, float start_s, float end_s ); <br>}; <br> <br>class ELBOW_OBJECT : public OBJECT { <br>private: <br>    void Build( OBJECT_BUILD_INFO *state, int notch, float start_s, float end_s ); <br>public: <br>    ELBOW_OBJECT( OBJECT_BUILD_INFO *state, int notch ); <br>    ELBOW_OBJECT( OBJECT_BUILD_INFO *state, int notch, float start_s, float end_s ); <br>}; <br> <br>class BALLJOINT_OBJECT : public OBJECT { <br>private: <br>    void Build( OBJECT_BUILD_INFO *state, int notch, float start_s, float end_s ); <br>public: <br>    // texturing version only <br>    BALLJOINT_OBJECT( OBJECT_BUILD_INFO *state, int notch, float start_s, float end_s ); <br>}; <br> <br>class SPHERE_OBJECT : public OBJECT { <br>private: <br>    void Build( OBJECT_BUILD_INFO *state, float radius, float start_s, float end_s ); <br>public: <br>    SPHERE_OBJECT( OBJECT_BUILD_INFO *state, float radius, float start_s, float end_s ); <br>    SPHERE_OBJECT( OBJECT_BUILD_INFO *state, float radius ); <br>}; <br> <br>#endif // __objects_h__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

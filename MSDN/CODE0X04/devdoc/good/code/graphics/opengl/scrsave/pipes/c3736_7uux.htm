<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VIEW.CXX</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3759"></a>VIEW.CXX</h2>
<pre><code>/******************************Module*Header*******************************\ <br>* Module Name: view.cxx <br>* <br>* Copyright 1995 - 1998 Microsoft Corporation <br>* <br>\**************************************************************************/ <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;math.h&gt; <br>#include &lt;sys/types.h&gt; <br>#include &lt;sys/timeb.h&gt; <br>#include &lt;time.h&gt; <br>#include &lt;windows.h&gt; <br> <br>#include "sspipes.h" <br>#include "view.h" <br> <br>/******************************Public*Routine******************************\ <br>* VIEW constructor <br>\**************************************************************************/ <br> <br>VIEW::VIEW() <br>{ <br>    bProjMode = GL_TRUE; <br> <br>    // set some initial viewing and size params <br> <br>    zTrans = -75.0f; <br>    viewDist = -zTrans; <br> <br>    numDiv = NUM_DIV; <br>    SS_ASSERT( numDiv &gt;= 2, "VIEW constructor: not enough divisions\n" ); <br>    // Because number of nodes in a dimension is derived from (numDiv-1), and <br>    // can't be 0 <br> <br>    divSize = 7.0f; <br> <br>    persp.viewAngle = 90.0f; <br>    persp.zNear = 1.0f; <br> <br>    yRot = 0.0f; <br> <br>    winSize.width = winSize.height = 0;  <br>} <br> <br>/******************************Public*Routine******************************\ <br>* SetProjMatrix <br>* <br>* Set GL view parameters <br>\**************************************************************************/ <br> <br>void <br>VIEW::SetGLView() <br>{ <br>    glViewport(0, 0, winSize.width, winSize.height ); <br>    SetProjMatrix(); <br>} <br> <br>/******************************Public*Routine******************************\ <br>* SetProjMatrix <br>* <br>* Set Projection matrix <br>\**************************************************************************/ <br> <br>void <br>VIEW::SetProjMatrix() <br>{ <br>    glMatrixMode(GL_PROJECTION); <br>    glLoadIdentity(); <br> <br>    persp.zFar = viewDist + world.z*2; <br>    if( bProjMode ) { <br>        gluPerspective( persp.viewAngle,  <br>                        aspectRatio,  <br>                        persp.zNear, persp.zFar ); <br>    } <br>    else { <br>        glOrtho( -world.x/2, world.x/2, -world.y/2, world.y/2, <br>                          -world.z, world.z ); <br>    } <br>    glMatrixMode(GL_MODELVIEW); <br>} <br> <br>/******************************Public*Routine******************************\ <br>* CalcNodeArraySize <br>* <br>* Based on the viewing width and height, and numDiv, calculate the x,y,z array <br>* node dimensions. <br>* <br>\**************************************************************************/ <br> <br>void <br>VIEW::CalcNodeArraySize( IPOINT3D *pNodeDim ) <br>{ <br>    // if aspect ratio deviates too much from 1, then nodes will get <br>    // clipped as view rotates <br> <br>    if( winSize.width &gt;= winSize.height ) { <br>        pNodeDim-&gt;x = numDiv - 1; <br>        pNodeDim-&gt;y = (int) (pNodeDim-&gt;x / aspectRatio) ; <br>        if( pNodeDim-&gt;y &lt; 1 ) <br>            pNodeDim-&gt;y = 1; <br>        pNodeDim-&gt;z = pNodeDim-&gt;x; <br>    } <br>    else { <br>        pNodeDim-&gt;y = numDiv - 1; <br>        pNodeDim-&gt;x = (int) (aspectRatio * pNodeDim-&gt;y); <br>        if( pNodeDim-&gt;x &lt; 1 ) <br>            pNodeDim-&gt;x = 1; <br>        pNodeDim-&gt;z = pNodeDim-&gt;y; <br>    } <br>} <br> <br>/******************************Public*Routine******************************\ <br>* SetWinSize <br>* <br>* Set the window size for the view, derive other view params. <br>* <br>* Return FALSE if new size same as old. <br>\**************************************************************************/ <br> <br>BOOL <br>VIEW::SetWinSize( int width, int height ) <br>{ <br>    if( (width == winSize.width) &amp;&amp; <br>        (height == winSize.height) ) <br>        return FALSE; <br> <br>    winSize.width = width; <br>    winSize.height = height; <br> <br>    aspectRatio = winSize.height == 0 ? 1.0f : (float)winSize.width/winSize.height; <br> <br>    if( winSize.width &gt;= winSize.height ) { <br>        world.x = numDiv * divSize; <br>        world.y = world.x / aspectRatio; <br>        world.z = world.x; <br>    } <br>    else { <br>        world.y = numDiv * divSize; <br>        world.x = world.y * aspectRatio; <br>        world.z = world.y; <br>    } <br>    return TRUE; <br>} <br> <br>/******************************Public*Routine******************************\ <br>* SetSceneRotation  <br>* <br>\**************************************************************************/ <br> <br>void <br>VIEW::IncrementSceneRotation() <br>{ <br>    yRot += 9.73156f; <br>    if( yRot &gt;= 360.0f ) <br>        // prevent overflow <br>        yRot -= 360.0f; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

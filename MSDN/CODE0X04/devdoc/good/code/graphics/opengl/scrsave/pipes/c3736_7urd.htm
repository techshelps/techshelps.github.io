<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EVAL.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3739"></a>EVAL.H</h2>
<pre><code>#ifndef __eval_h__ <br>#define __eval_h__ <br> <br>#include "sscommon.h" <br>#include "xc.h" <br> <br>#define MAX_UORDER      5 // this is per section <br>#define MAX_VORDER      5 <br>#define MAX_USECTIONS   4 <br>#define MAX_XC_PTS      (MAX_UORDER * MAX_USECTIONS) <br> <br>#define TEX_ORDER       2 <br>#define EVAL_ARC_ORDER  4 <br>#define EVAL_CYLINDER_ORDER 2 <br>#define EVAL_ELBOW_ORDER    4 <br> <br>// # of components (eg. arcs) to form a complete cross-section <br>#define EVAL_XC_CIRC_SECTION_COUNT 4 <br> <br>#define EVAL_XC_POINT_COUNT ( (EVAL_ARC_ORDER-1)*4 + 1 ) <br> <br>#define EVAL_CIRC_ARC_CONTROL 0.56f // for r=1 <br> <br>/**************************************************************************\ <br>* <br>* EVAL class <br>* <br>* - Evaluator composed of one or more sections that are evaluated <br>*   separately with OpenGL evaluators <br>* <br>\**************************************************************************/ <br> <br>class EVAL { <br>public: <br>    EVAL( BOOL bTexture ); <br>    ~EVAL(); <br>    int         numSections;    // number of cross-sectional sections <br>    int         uOrder, vOrder; <br>        // assumed: all sections same order - uOrder is per <br>        // section; sections share vertex and texture control points <br>    int         uDiv, vDiv;    // figured out one level up ? <br>    POINT3D     *pts;          // vertex control points <br>    // - texture always order 2 for s and t (linear mapping) <br>    BOOL        bTexture; <br>    TEX_POINT2D *texPts;       // texture control points <br> <br>    void        Evaluate(); // evaluate/render the object <br>    void        SetVertexCtrlPtsXCTranslate( POINT3D *pts, float length,  <br>                                             XC *xcStart, XC *xcEnd ); <br>    void        SetTextureControlPoints( float s_start, float s_end, <br>                                         float t_start, float t_end ); <br>    void        ProcessXCPrimLinear( XC *xcStart, XC *xcEnd, float length ); <br>    void        ProcessXCPrimBendSimple( XC *xcCur, int dir, float radius ); <br>    void        ProcessXCPrimSingularity( XC *xcCur, float length,  <br>                                          BOOL bOpening ); <br>}; <br> <br>extern void ResetEvaluator( BOOL bTexture ); <br> <br>#endif // __eval_h__ </code></pre>
<p>&nbsp;</p></body>
</HTML>

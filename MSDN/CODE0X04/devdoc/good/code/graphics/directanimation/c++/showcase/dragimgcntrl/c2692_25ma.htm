<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CTLHOST.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2692"></a>CTLHOST.CPP</h2>
<pre><code>////////////////////////////////////////////////////////////////////////// <br>// <br>//  controlhost.cpp <br>// <br>//  This file contains the implementation of the CControlHost class. <br>//  This class is used to host ActiveX Controls. <br>// <br>//  (C) Copyright 1997 by Microsoft Corporation. All rights reserved. <br>// <br>////////////////////////////////////////////////////////////////////////// <br> <br>#define INITGUID <br>#include &lt;exdispid.h&gt; <br>#include &lt;olectl.h&gt; <br>#include "dactl.h" <br>#include "ctlhost.h" <br>#include &lt;comdef.h&gt; <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::CControlHost                      [CONSTRUCTOR] <br>// <br>CControlHost::CControlHost(IUnknown *pUnk) <br>    :_hwnd(NULL), _punkOuter(NULL), <br>    _cRef(0), _punk(NULL), _pvc(NULL), <br>    _dwTBSink(0) <br>{ <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::~CControlHost                     [DESTRUCTOR] <br>// <br>CControlHost::~CControlHost() <br>{ <br>    DeleteControl();    // insurance <br>} <br> <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>// <br>// <br>HRESULT CControlHost::SetHwnd(HWND hwnd) <br>{ <br>    _hwnd = hwnd; <br>    if (!GetClientRect(_hwnd, &amp;_rcPos)) <br>        SetRectEmpty(&amp;_rcPos); <br> <br>    return S_OK; <br>} <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::QueryInterface                    [IUnknown] <br>// <br>HRESULT CControlHost::QueryInterface(REFIID riid, LPVOID * ppvObj) <br>{ <br>    if (ppvObj == NULL) <br>        return E_INVALIDARG; <br> <br>    *ppvObj = NULL; <br> <br>    if (IsEqualIID(riid, IID_IOleInPlaceSite)) <br>        *ppvObj = (IOleInPlaceSite *)this; <br>    else if (IsEqualIID(riid, IID_IOleControlSite)) <br>        *ppvObj = (IOleControlSite *)this; <br>    else if (IsEqualIID(riid, IID_IOleInPlaceSiteWindowless)) <br>        *ppvObj = (IOleInPlaceSiteWindowless *)this; <br>    else if (IsEqualIID(riid, IID_IDispatch)) <br>        *ppvObj = (IDispatch *)this; <br>    else <br>        return (E_NOINTERFACE); <br> <br>    if(*ppvObj) <br>        AddRef(); <br> <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::AddRef                            [IUnknown] <br>// <br>ULONG CControlHost::AddRef() <br>{ <br>    return (_cRef++); <br>} <br> <br>ULONG CControlHost::Release() <br>{ <br>    _cRef--; <br> <br>    if (_cRef &gt; 0) <br>        return (_cRef); <br> <br>    _cRef = 0; <br>    delete this; <br> <br>    return (0); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::SaveObject                        [IOleClientSite] <br>// <br>HRESULT CControlHost::SaveObject() <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::GetMoniker                        [IOleClientSite] <br>// <br>HRESULT CControlHost::GetMoniker(DWORD dwAssign, DWORD dwWhichMoniker, LPMONIKER * ppMk) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::GetContainer                      [IOleClientSite] <br>// <br>HRESULT CControlHost::GetContainer(LPOLECONTAINER * ppContainer ) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::ShowObject                        [IOleClientSite] <br>// <br>HRESULT CControlHost::ShowObject() <br>{ <br>    return S_OK; <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::OnShowWindow                      [IOleClientSite] <br>// <br>HRESULT CControlHost::OnShowWindow(BOOL fShow) <br>{ <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::RequestNewObjectLayout            [IOleClientSite] <br>// <br>HRESULT CControlHost::RequestNewObjectLayout() <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::GetWindow                         [IOleWindow] <br>// <br>HRESULT CControlHost::GetWindow(HWND * lphwnd) <br>{ <br>    if (_hwnd == NULL) <br>        return (S_FALSE); <br> <br>    *lphwnd = _hwnd; <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::ContextSensitiveHelp              [IOleWindow] <br>// <br>HRESULT CControlHost::ContextSensitiveHelp(BOOL fEnterMode) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::CanInPlaceActivate                [IOleInPlaceSite] <br>// <br>HRESULT CControlHost::CanInPlaceActivate(void) <br>{ <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::OnInPlaceActivate                 [IOleInPlaceSite] <br>// <br>HRESULT CControlHost::OnInPlaceActivate(void) <br>{ <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::OnUIActivate                      [IOleInPlaceSite] <br>// <br>HRESULT CControlHost::OnUIActivate(void) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::GetWindowContext                  [IOleInPlaceSite] <br>// <br>HRESULT CControlHost::GetWindowContext (IOleInPlaceFrame ** ppFrame, IOleInPlaceUIWindow ** ppIIPUIWin, <br>                                  LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo) <br>{ <br>    *ppFrame = this; <br>    AddRef(); <br> <br>    *ppIIPUIWin = NULL; <br> <br>    CopyRect(lprcPosRect, &amp;_rcPos); <br>    CopyRect(lprcClipRect, &amp;_rcPos); <br> <br>    lpFrameInfo-&gt;cb             = sizeof(OLEINPLACEFRAMEINFO); <br>    lpFrameInfo-&gt;fMDIApp        = FALSE; <br>    lpFrameInfo-&gt;hwndFrame      = _hwnd; <br>    lpFrameInfo-&gt;haccel         = 0; <br>    lpFrameInfo-&gt;cAccelEntries  = 0; <br> <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::Scroll                            [IOleInPlaceSite] <br>// <br>HRESULT CControlHost::Scroll(SIZE scrollExtent) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::OnUIDeactivate                    [IOleInPlaceSite] <br>// <br>HRESULT CControlHost::OnUIDeactivate(BOOL fUndoable) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::OnInPlaceDeactivate               [IOleInPlaceSite] <br>// <br>HRESULT CControlHost::OnInPlaceDeactivate(void) <br>{ <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::DiscardUndoState                  [IOleInPlaceSite] <br>// <br>HRESULT CControlHost::DiscardUndoState(void) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::DeactivateAndUndo                 [IOleInPlaceSite] <br>// <br>HRESULT CControlHost::DeactivateAndUndo(void) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::OnPosRectChange                   [IOleInPlaceSite] <br>// <br>HRESULT CControlHost::OnPosRectChange(LPCRECT lprcPosRect) <br>{ <br>    RECT rcPos, rcClient; <br>    HWND hwnd; <br>    GetWindow(&amp;hwnd); <br>    GetClientRect(hwnd, &amp;rcClient); <br>    GetWindowRect(hwnd, &amp;rcPos); <br> <br>    if(rcClient.bottom &lt; lprcPosRect-&gt;bottom) <br>        rcPos.bottom += lprcPosRect-&gt;bottom - rcClient.bottom; <br>    else <br>        rcPos.bottom -= rcClient.bottom - lprcPosRect-&gt;bottom; <br> <br>    if(rcClient.right &lt; lprcPosRect-&gt;right) <br>        rcPos.right += lprcPosRect-&gt;right - rcClient.right;  <br>    else <br>        rcPos.right -= rcClient.right - lprcPosRect-&gt;right;  <br> <br>    MoveWindow( hwnd,  <br>                rcPos.left,  <br>                rcPos.top,  <br>                rcPos.right - rcPos.left,  <br>                rcPos.bottom - rcPos.top, <br>                TRUE); <br> <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::OnInPlaceActivateEx               [IOleInPlaceSiteEx] <br>// <br>HRESULT CControlHost::OnInPlaceActivateEx(BOOL *pfNoRedraw, DWORD dwFlags) <br>{ <br>    OleLockRunning(_punk, TRUE, FALSE); <br>    HRESULT hr = E_FAIL; <br> <br>    return S_OK; <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::OnInPlaceDeactivateEx             [IOleInPlaceSiteEx] <br>// <br>HRESULT CControlHost::OnInPlaceDeactivateEx(BOOL fNoRedraw) <br>{ <br>    OleLockRunning(_punk, FALSE, FALSE); <br>    return S_OK; <br>} <br> <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::RequestUIActivate                 [IOleInPlaceSiteEx] <br>// <br>HRESULT CControlHost::RequestUIActivate(void) <br>{ <br>    return S_OK; <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::CanWindowlessActivate             [IOleInPlaceSiteWindowless] <br>// <br>HRESULT CControlHost::CanWindowlessActivate(void) <br>{ <br>    return (TRUE); // m_bCanWindowlessActivate); <br>} <br>////////////////////////////////////////////////////////////////////////// <br>//                                                  [IOleInPlaceSiteWindowless] <br>//  CControlHost::GetCapture <br>// <br>HRESULT CControlHost::GetCapture(void) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::SetCapture                        [IOleInPlaceSiteWindowless] <br>// <br>HRESULT CControlHost::SetCapture(BOOL fCapture) <br>{ <br> <br>    if (fCapture) <br>    { <br>        ::SetCapture(_hwnd); <br>        _bCapture = TRUE; <br>    } <br>    else <br>    { <br>        ::ReleaseCapture(); <br>        _bCapture = FALSE; <br>    } <br>    return S_OK; <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::GetFocus                          [IOleInPlaceSiteWindowless] <br>// <br>HRESULT CControlHost::GetFocus(void) <br>{ <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::SetFocus                          [IOleInPlaceSiteWindowless] <br>// <br>HRESULT CControlHost::SetFocus(BOOL fFocus) <br>{ <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::GetDC                             [IOleInPlaceSiteWindowless] <br>// <br>HRESULT CControlHost::GetDC(LPCRECT pRect, DWORD grfFlags, HDC *phDC) <br>{ <br>    if (!phDC) <br>        return E_POINTER; <br> <br>    *phDC = ::GetDC(_hwnd); <br>    return S_OK; <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::ReleaseDC                         [IOleInPlaceSiteWindowless] <br>// <br>HRESULT CControlHost::ReleaseDC(HDC hDC) <br>{ <br>    ::ReleaseDC(_hwnd, hDC); <br>    return S_OK; <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::InvalidateRect                    [IOleInPlaceSiteWindowless] <br>// <br>HRESULT CControlHost::InvalidateRect(LPCRECT pRect, BOOL fErase) <br>{ <br>    ::InvalidateRect(_hwnd, pRect, fErase); <br>    return S_OK; <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::InvalidateRgn                     [IOleInPlaceSiteWindowless] <br>// <br>HRESULT CControlHost::InvalidateRgn(HRGN hRGN, BOOL fErase) <br>{ <br>    ::InvalidateRgn(_hwnd, hRGN, fErase); <br>    return S_OK; <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::ScrollRect                        [IOleInPlaceSiteWindowless] <br>// <br>HRESULT CControlHost::ScrollRect(INT dx, INT dy, LPCRECT pRectScroll, LPCRECT pRectClip) <br>{ <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::AdjustRect                        [IOleInPlaceSiteWindowless] <br>// <br>HRESULT CControlHost::AdjustRect(LPRECT prc) <br>{ <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::OnDefWindowMessage                [IOleInPlaceSiteWindowless] <br>// <br>HRESULT CControlHost::OnDefWindowMessage(UINT msg, WPARAM wParam, LPARAM lParam, LRESULT *plResult) <br>{ <br>    *plResult = ::DefWindowProc(_hwnd, msg, wParam, lParam); <br>    return S_OK; <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::GetBorder                         [IOleInPlaceUIWindow] <br>// <br>HRESULT CControlHost::GetBorder(LPRECT lprectBorder) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::RequestBorderSpace                [IOleInPlaceUIWindow] <br>// <br>HRESULT CControlHost::RequestBorderSpace(LPCBORDERWIDTHS lpborderwidths) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::SetBorderSpace                    [IOleInPlaceUIWindow] <br>// <br>HRESULT CControlHost::SetBorderSpace(LPCBORDERWIDTHS lpborderwidths) <br>{ <br>    if(_punkOuter) <br>        return ((CControlHost*)_punkOuter)-&gt;SetBorderSpace(lpborderwidths); <br> <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::SetActiveObject                   [IOleInPlaceUIWindow] <br>// <br>HRESULT CControlHost::SetActiveObject(IOleInPlaceActiveObject * pActiveObject, LPCOLESTR lpszObjName) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::InsertMenus                       [IOleInPlaceFrame] <br>// <br>HRESULT CControlHost::InsertMenus(HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::SetMenu                           [IOleInPlaceFrame] <br>// <br>HRESULT CControlHost::SetMenu(HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::RemoveMenus                       [IOleInPlaceFrame] <br>// <br>HRESULT CControlHost::RemoveMenus(HMENU hmenuShared) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::SetStatusText                     [IOleInPlaceFrame] <br>// <br>HRESULT CControlHost::SetStatusText(LPCOLESTR pszStatusText) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::EnableModeless                    [IOleInPlaceFrame] <br>// <br>HRESULT CControlHost::EnableModeless(BOOL fEnable) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::TranslateAccelerator              [IOleInPlaceFrame] <br>// <br>HRESULT CControlHost::TranslateAccelerator(LPMSG lpmsg, WORD wID) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::OnControlInfoChanged              [IOleControlSite] <br>// <br>HRESULT CControlHost::OnControlInfoChanged() <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::LockInPlaceActive                 [IOleControlSite] <br>// <br>HRESULT CControlHost::LockInPlaceActive(BOOL fLock) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::GetExtendedControl                [IOleControlSite] <br>// <br>HRESULT CControlHost::GetExtendedControl(IDispatch **ppDisp) <br>{ <br>    if (ppDisp == NULL) <br>        return (E_INVALIDARG); <br> <br>    *ppDisp = (IDispatch *)this; <br>    AddRef(); <br> <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::TransformCoords                   [IOleControlSite] <br>// <br>HRESULT CControlHost::TransformCoords(POINTL *pptlHimetric, POINTF *pptfContainer, DWORD dwFlags) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::TranslateAccelerator              [IOleControlSite] <br>// <br>HRESULT CControlHost::TranslateAccelerator(LPMSG pMsg, DWORD grfModifiers) <br>{ <br>    return (S_FALSE); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::OnFocus                           [IOleControlSite] <br>// <br>HRESULT CControlHost::OnFocus(BOOL fGotFocus) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::ShowPropertyFrame                 [IOleControlSite] <br>// <br>HRESULT CControlHost::ShowPropertyFrame(void) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::GetIDsOfNames                     [IDispatch] <br>// <br>HRESULT CControlHost::GetIDsOfNames(REFIID riid, OLECHAR FAR* FAR* rgszNames, unsigned int cNames, LCID lcid, DISPID FAR* rgdispid) <br>{ <br>    HRESULT     hr;                     // standard ole return code <br>    LPOLESTR    pName; <br>    DISPID      *pdispid; <br> <br>    hr      = S_OK; <br>    pName   = *rgszNames; <br>    pdispid = rgdispid; <br> <br>    for (UINT i=0; i&lt;cNames; i++) <br>    { <br>        if (pName != NULL) <br>        { <br>            if (_wcsicmp(pName, L"basehref") == 0) <br>                *pdispid = DISPID_BASEHREF; <br>            else if (_wcsicmp(pName, L"align") == 0) <br>                *pdispid = DISPID_ALIGN; <br>            else <br>            { <br>                *pdispid = DISPID_UNKNOWN; <br>                hr       = DISP_E_UNKNOWNNAME; <br>            } <br>        } <br> <br>        pdispid++; <br>        pName++; <br>    } <br> <br>    return (hr); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::GetTypeInfo                       [IDispatch] <br>// <br>HRESULT CControlHost::GetTypeInfo(unsigned int itinfo, LCID lcid, ITypeInfo FAR* FAR* pptinfo) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::GetTypeInfoCount                  [IDispatch] <br>// <br>HRESULT CControlHost::GetTypeInfoCount(unsigned int FAR * pctinfo) <br>{ <br>    return (E_NOTIMPL); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::Invoke                            [IDispatch] <br>// <br>HRESULT CControlHost::Invoke(DISPID dispid, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS FAR *pdispparams, VARIANT FAR *pvarResult, EXCEPINFO FAR * pexecinfo, unsigned int FAR *puArgErr) <br>{ <br>    HRESULT     hr = S_OK;  // standard ole return code <br> <br>    // The following code are the DISPIDs for the ambient properties <br>    // that we will support. <br>    if ((pvarResult == NULL) &amp;&amp; (wFlags == DISPATCH_PROPERTYGET)) <br>        return (E_INVALIDARG); <br>     <br>    switch (dispid) <br>    { <br>        case DISPID_NAVIGATECOMPLETE: <br>            hr = S_OK; <br> <br>        case DISPID_AMBIENT_DISPLAYNAME: <br>            if (!pvarResult-&gt;bstrVal) <br>                pvarResult-&gt;bstrVal = ::SysAllocString(L""); <br> <br>            hr = S_OK; <br> <br>            // If we STILL don't have a bstrVal.  Clean up and return an empty variant. <br>            if (!pvarResult-&gt;bstrVal)  <br>            { <br>                VariantInit(pvarResult); <br>                hr = E_FAIL; <br>            } <br> <br>            break; <br> <br>        case DISPID_AMBIENT_USERMODE: <br>        case DISPID_AMBIENT_MESSAGEREFLECT: <br>            pvarResult-&gt;vt      = VT_BOOL; <br>            pvarResult-&gt;boolVal = TRUE; <br>            hr                  = S_OK; <br>            break; <br> <br>        case DISPID_AMBIENT_SHOWHATCHING: <br>        case DISPID_AMBIENT_SHOWGRABHANDLES: <br>        case DISPID_AMBIENT_SUPPORTSMNEMONICS: <br>            pvarResult-&gt;vt      = VT_BOOL; <br>            pvarResult-&gt;boolVal = FALSE; <br>            hr                  = S_OK; <br>            break; <br> <br>        // Not yet implemented! <br>        case DISPID_AMBIENT_BACKCOLOR: <br>        case DISPID_AMBIENT_FORECOLOR: <br>        case DISPID_AMBIENT_UIDEAD: <br>        case DISPID_AMBIENT_AUTOCLIP: <br>            hr = S_OK; <br>            break; <br> <br>        // Extender Properties <br>        case DISPID_BASEHREF: <br>        case DISPID_ALIGN: <br>            hr = DISP_E_MEMBERNOTFOUND; <br>            break; <br> <br>        default: <br>            hr = DISP_E_MEMBERNOTFOUND; <br>    } <br> <br>    return (hr); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::CreateControl                     [HELPER] <br>// <br>HRESULT CControlHost::CreateControl() <br>{ <br>    HRESULT             hr;             // standard ole return code <br>    IOleObject          *pIOleObject;   // IOleObject interface pointer <br>    IPersistStreamInit  *pps;           // IPersistStreamInit interface pointer <br>     <br>    // Create a DAViewerControl. <br>    _pvc = new CDAViewerCtl(); <br> <br>    // Check if the creation succeeded. <br>    if (!_pvc) <br>        return E_OUTOFMEMORY; <br> <br>    hr = _pvc-&gt;GetIUnknown(&amp;_punk); <br>    if (FAILED(hr)) { <br>        return (hr); <br>    } <br> <br>    AddRef();  // addref the container <br> <br>    hr = _punk-&gt;QueryInterface(IID_IOleObject, (LPVOID *)&amp;pIOleObject); <br> <br>    if (SUCCEEDED(hr)) <br>    { <br>        pIOleObject-&gt;SetClientSite(this); <br> <br>        // Controls like to know they have been initialized by getting <br>        // called on their InitNew method. <br>        hr = _punk-&gt;QueryInterface(IID_IPersistStreamInit, (LPVOID *)&amp;pps); <br>        if (SUCCEEDED(hr)) <br>        { <br>            pps-&gt;InitNew(); <br>            pps-&gt;Release(); <br>        } <br> <br>        // The control creation succeeded, lets create the model. <br>        _pvc-&gt;CreateModel(); <br> <br>        // Tell the control to activate and show itself. <br>        pIOleObject-&gt;DoVerb(OLEIVERB_INPLACEACTIVATE, NULL, this, 0, _hwnd, &amp;_rcPos); <br>        pIOleObject-&gt;DoVerb(OLEIVERB_SHOW, NULL, this, 0, _hwnd, &amp;_rcPos); <br>        pIOleObject-&gt;Release(); <br> <br>        // cache some frequently needed interface pointers     <br>        // cache the control's window handle <br>        _hwndControl = NULL; <br>        IOleInPlaceActiveObject *pipao = NULL; <br>        hr = _punk-&gt;QueryInterface(IID_IOleInPlaceActiveObject, (void**) &amp;pipao); <br>        if (SUCCEEDED(hr)) <br>        { <br>            pipao-&gt;GetWindow(&amp;_hwndControl); <br>            pipao-&gt;Release(); <br>        } <br>    } <br>    return (hr); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::DeleteControl                     [HELPER] <br>// <br>HRESULT CControlHost::DeleteControl() <br>{ <br>    HRESULT     hr;                     // standard ole return code <br>    IOleObject  *pIOleObject;           // IOleObject interface pointer <br>             <br>    if (_pvc != NULL)  <br>    { <br>        delete _pvc; <br>        _pvc = NULL; <br>    } <br> <br>    // Close the Control and release the cached pointers. <br>    if (_punk != NULL) <br>    { <br>        hr = _punk-&gt;QueryInterface(IID_IOleObject, (LPVOID *)&amp;pIOleObject); <br>        if (SUCCEEDED(hr)) <br>        { <br>            pIOleObject-&gt;DoVerb(OLEIVERB_HIDE, NULL, this, 0, _hwnd, NULL); <br>            pIOleObject-&gt;Close(OLECLOSE_NOSAVE); <br>            pIOleObject-&gt;SetClientSite(NULL); <br>            pIOleObject-&gt;Release(); <br>           <br>            _punk-&gt;Release(); <br>            _punk = NULL; <br>        } <br> <br>        Release();  // Release our hold on the container <br>    } <br> <br>    return (S_OK); <br>} <br> <br>////////////////////////////////////////////////////////////////////////// <br>// <br>//  CControlHost::QueryObject                       [HELPER] <br>// <br>HRESULT CControlHost::QueryObject(REFIID riid, void **ppvObject) <br>{ <br>    HRESULT hr = E_POINTER; <br>    if (ppvObject) <br>    { <br>        if (_punk) <br>        { <br>            hr = _punk-&gt;QueryInterface(riid, ppvObject); <br>        } <br>        else <br>        { <br>            *ppvObject = NULL; <br>            hr = OLE_E_NOCONNECTION; <br>        } <br>    } <br>    return hr; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

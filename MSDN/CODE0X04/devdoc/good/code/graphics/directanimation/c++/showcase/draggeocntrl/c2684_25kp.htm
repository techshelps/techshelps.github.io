<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DADRAG.H</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2689"></a>DADRAG.H</h2>
<pre><code>// Here's the magic... It reads in the type library and makes easy <br>// interfaces to use automatically. <br>#import "danim.dll" \ <br>  exclude( "_RemotableHandle", "IMoniker", "IPersist", "ISequentialStream", \ <br>  "IParseDisplayName", "IOleClientSite", "_FILETIME", "tagSTATSTG" ) \ <br>  rename( "GUID", "DAGUID" ) \ <br>  rename_namespace( "DAnim" ) <br> <br>using namespace DAnim; <br> <br>// Used by IDAUntilNotifier, to get its definition, be <br>// sure to add daguid.lib to the Object/library <br>// module editbox, on the link tab under Settings. <br>EXTERN_C const IID IID_IDABvrHook; <br> <br>class CDADrag; <br>class CDARelease; <br> <br>class CDADrag : public IDAUntilNotifier  { <br> <br>public: <br> <br>CDADrag()  { <br>    _cRefs = 1; <br>  } <br> <br>~CDADrag()  { <br>  } <br> <br>  IDAGeometryPtr getGeometryPtr()  {  <br>  return _draggableGeo;  <br>}; <br> <br>IDAEventPtr getGrabEvent()  {  <br>  return _pickEv; <br>} <br> <br>IDAEventPtr getReleaseEvent()  {  <br>  return _releaseEv;  <br>} <br> <br>IDAPoint3Ptr getPointPtr()  {  <br>  return _draggablePt;  <br>} <br> <br>STDMETHOD_(ULONG, AddRef)();  <br>STDMETHOD_(ULONG, Release)(); <br>STDMETHOD(QueryInterface)(REFIID riid, void **ppv); <br>STDMETHOD(initNotify)(IDAGeometryPtr geo, IDAPoint3Ptr pt, IDAStaticsPtr e); <br> <br>  // Since we are using #import, the pure virtual function Notify of the  <br>  // IDAUntilNotifier class (refer to danim.h)  has been renamed to raw_Notify. <br>STDMETHOD(raw_Notify)(IDABehavior* eventData, <br>IDABehavior* curRunningBvr, <br>IDAView* curView, <br>IDABehavior** ppBvr); <br> <br>STDMETHOD(GetTypeInfoCount)(UINT *pctinfo)  {  <br>    return E_NOTIMPL;  <br>  } <br> <br>STDMETHOD(GetTypeInfo)(UINT itinfo, LCID lcid, ITypeInfo **pptinfo){  <br>    return E_NOTIMPL;  <br>  } <br> <br>STDMETHOD(GetIDsOfNames)( <br>REFIID riid, LPOLESTR *rgszNames, UINT cNames, <br>LCID lcid, DISPID *rgdispid)  {  <br>    return E_NOTIMPL;  <br>  } <br> <br>STDMETHOD(Invoke)( <br>DISPID dispidMember, REFIID riid, LCID lcid, <br>WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, <br>EXCEPINFO *pexcepinfo, UINT *puArgErr){  <br>    return E_NOTIMPL;  <br>  } <br> <br>STDMETHOD(ClearEngine)(){  <br>    return S_OK; <br>  } <br> <br>protected: <br>long _cRefs; <br>  IDAEventPtr _pickEv; <br>IDAEventPtr _releaseEv; <br>IDAGeometryPtr _draggableGeo; <br>IDAPoint3Ptr _draggablePt; <br>  CDARelease* _releaseHdlr; <br>IDAStaticsPtr _e; <br>}; <br> <br>class CDARelease : public IDAUntilNotifier { <br> <br>public: <br> <br>  CDARelease()  { <br>    _cRefs = 1; <br>  } <br> <br>  ~CDARelease()  { <br>  } <br> <br>  STDMETHOD_(ULONG, AddRef)();  <br>STDMETHOD_(ULONG, Release)(); <br>STDMETHOD(QueryInterface)(REFIID riid, void **ppv); <br>STDMETHOD(initNotify)(IDAEventPtr pickEv, CDADrag* grabHdlr, IDAStaticsPtr e); <br> <br>  // Since we are using #import, the pure virtual function Notify of the  <br>  // IDAUntilNotifier class (refer to danim.h)  has been renamed to raw_Notify. <br>  STDMETHOD(raw_Notify)(IDABehavior* eventData, <br>IDABehavior* curRunningBvr, <br>IDAView* curView, <br>IDABehavior** ppBvr); <br> <br> <br>STDMETHOD(GetTypeInfoCount)(UINT *pctinfo)  {  <br>    return E_NOTIMPL;  <br>  } <br> <br>STDMETHOD(GetTypeInfo)(UINT itinfo, LCID lcid, ITypeInfo **pptinfo){  <br>    return E_NOTIMPL;  <br>  } <br> <br>STDMETHOD(GetIDsOfNames)( <br>REFIID riid, LPOLESTR *rgszNames, UINT cNames, <br>LCID lcid, DISPID *rgdispid)  {  <br>    return E_NOTIMPL;  <br>  } <br> <br>STDMETHOD(Invoke)( <br>DISPID dispidMember, REFIID riid, LCID lcid, <br>WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, <br>EXCEPINFO *pexcepinfo, UINT *puArgErr){  <br>    return E_NOTIMPL;  <br>  } <br> <br>STDMETHOD(ClearEngine)(){  <br>    return S_OK; <br>  } <br> <br> <br>protected: <br>long _cRefs; <br>  IDAEventPtr _pickEv; <br>IDAStaticsPtr _e; <br>  CDADrag* _grabHdlr; <br>}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DXA.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2681"></a>DXA.CPP</h2>
<pre><code>/*========================================================================== <br> * <br> *  Copyright (C) 1995-1997 Microsoft Corporation. All Rights Reserved. <br> * <br> *  File:       dxa.cpp <br> * <br> *  This file contains functions that make use of DirectX Animation <br> *  to render animation to a ddraw surface. <br> * <br> ***************************************************************************/ <br> <br>#include "dxa.h" <br>#include &lt;stdio.h&gt; <br>#include &lt;sys\timeb.h&gt; <br>#include &lt;tchar.h&gt; <br> <br>IDAViewPtr view1 = NULL; <br>IDAViewPtr view2 = NULL; <br>/* <br> * StartOle <br> * <br> * Start the Ole services. <br> */ <br>struct StartOle { <br>    StartOle() { CoInitialize( NULL ); } <br>    ~StartOle() { CoUninitialize(); } <br>} _inst_StartOle; <br> <br>/* <br> * dump_com_error <br> * <br> * Dump the com error should an exception occurs in InitDXAViewObj. <br> * This is mainly for debugging purpose. <br> */ <br>void dump_com_error( _com_error &amp;e ) <br>{ <br>    char buf[2048]; <br> <br>    sprintf(buf, _T( "Oops - hit an error!\n\tCode = %08lx\n\tCode meaning = %s\n" ), <br>            e.Error(), e.ErrorMessage()); <br>    OutputDebugString(buf); <br>} <br> <br>/* <br> * initDXAViewObj <br> * <br> * Create the DAView object, construct the model, then start the model. <br> * <br> */ <br>BOOL initDXAViewObj(IUnknown *ddsurf) <br>{ <br>    try { <br>        IDAStaticsPtr e; <br> <br>        // Create the statics object. <br>        e.CreateInstance(L"DirectAnimation.DAStatics"); <br> <br>        // Create the two DAView objects.  One will be rendered under <br>        // the donut, the other above it. <br>        view1.CreateInstance(L"DirectAnimation.DAView"); <br>        view2.CreateInstance(L"DirectAnimation.DAView"); <br> <br>        // Construct the image for model1, which will be rendered <br>        // under the donut.   <br>        IDAColorPtr col1 = e-&gt;ColorHslAnim(e-&gt;LocalTime, e-&gt;DANumber(0.5), <br>                                                         e-&gt;DANumber(0.5)); <br>        IDAFontStylePtr font = e-&gt;Font("Helvetica", 14, col1); <br>        IDAImagePtr txtImg1 = e-&gt;StringImage("DXA Under Donut", font);        <br>        IDAImagePtr model1 = txtImg1-&gt;Transform(e-&gt;Rotate2Anim(e-&gt;LocalTime)); <br> <br>        // Tell the DAView object where to render the model. <br>        view1-&gt;SetViewport(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT); <br>        view1-&gt;IDirectDrawSurface = ddsurf; <br>        view1-&gt;CompositeDirectlyToTarget = TRUE; <br>        view1-&gt;StartModel(e-&gt;Overlay(model1, e-&gt;SolidColorImage(e-&gt;Black)), e-&gt;Silence, 0); <br> <br>        // Construct the image for model2, which will be rendered <br>        // above the donut.   <br>        IDAImagePtr txtImg2 = e-&gt;StringImage("DXA Above Donut", font);                 <br>        IDAImagePtr model2 = txtImg2-&gt;Transform(e-&gt;Translate2Anim( <br>                                                e-&gt;DANumber(0),        <br>                                                e-&gt;Mul(e-&gt;Sin(e-&gt;LocalTime),  <br>                                                       e-&gt;DANumber(0.01)))); <br>        <br>        <br>        view2-&gt;SetViewport(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT); <br>        view2-&gt;IDirectDrawSurface = ddsurf; <br>        view2-&gt;CompositeDirectlyToTarget = TRUE; <br>        view2-&gt;StartModel(model2, e-&gt;Silence, 0); <br>    } catch (_com_error &amp;e) { <br>        dump_com_error( e ); <br>        return false; <br>    } <br>    return true; <br>} <br> <br>BOOL resetDXASurfaces(IUnknown *ddsurf) <br>{ <br>    try { <br>        view1-&gt;IDirectDrawSurface = ddsurf; <br>        view2-&gt;IDirectDrawSurface = ddsurf; <br>    } catch (_com_error &amp;e) { <br>        dump_com_error( e ); <br>        return false; <br>    } <br>    return true; <br>} <br> <br>/* <br> * tick <br> * <br> * Ask DA to sample and display the model. <br> * <br> */ <br>void tick(IDAViewPtr view) { <br>    static double startTime = 0; <br>    struct _timeb timebuffer; <br> <br>    if (view != NULL) { <br>        _ftime( &amp;timebuffer ); <br>        double thisTime = timebuffer.time + ( timebuffer.millitm / 1000.0 ); <br> <br>        if ( startTime == 0 )  { <br>            startTime = thisTime; <br>            thisTime = 0; <br>        } <br>        else <br>            thisTime -= startTime; <br> <br>        view-&gt;Tick(thisTime); <br>        view-&gt;Render(); <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

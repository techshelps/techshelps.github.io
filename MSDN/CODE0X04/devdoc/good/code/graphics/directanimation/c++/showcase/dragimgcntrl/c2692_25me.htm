<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DADRAG.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2696"></a>DADRAG.CPP</h2>
<pre><code>#include "dadrag.h" <br> <br> <br>/*************************************** <br> * CDADrag <br> ***************************************/ <br> <br>STDMETHODIMP_(ULONG) CDADrag::AddRef()  {  <br>return InterlockedIncrement(&amp;_cRefs);  <br>} <br> <br>STDMETHODIMP_(ULONG) CDADrag::Release()  { <br>ULONG refCount = InterlockedDecrement(&amp;_cRefs); <br>if (!refCount) { <br>delete this; <br>return refCount; <br>} <br>return _cRefs; <br>} <br> <br>STDMETHODIMP CDADrag::QueryInterface(REFIID riid, void **ppv)  { <br>if (!ppv) <br>return E_POINTER; <br> <br>*ppv = NULL; <br>if (riid == IID_IUnknown)  { <br>*ppv = (void *)(IUnknown *)this; <br>} else if (riid == IID_IDABvrHook)  { <br>*ppv = (void *)(IDAUntilNotifier *)this; <br>} <br> <br>if (*ppv)  { <br>((IUnknown *)*ppv)-&gt;AddRef(); <br>return S_OK; <br>} <br> <br>return E_NOINTERFACE; <br>} <br> <br>STDMETHODIMP CDADrag::initNotify(IDAImagePtr im, IDAPoint2Ptr pt, IDAStaticsPtr e)  { <br>   _e  = e; <br>  IDAPickableResultPtr pim = im-&gt;Pickable(); <br>  _pickEv = _e-&gt;AndEvent(e-&gt;LeftButtonDown, pim-&gt;PickEvent); <br> <br>  // construct a handler for release events, <br>  // upon pick events it passes the puck back to this object. <br>  _releaseHdlr = new CDARelease(); <br>  _releaseHdlr-&gt;initNotify(_pickEv, this, e);   <br>  _draggablePt = (IDAPoint2Ptr)_e-&gt;UntilNotify(pt, _pickEv, this)-&gt;RunOnce();  <br>  _releaseEv = _e-&gt;LeftButtonUp-&gt;Snapshot(_draggablePt); <br> <br>  _draggableImg = pim-&gt;Image-&gt;Transform(_e-&gt;Translate2Point(_draggablePt)); <br> <br>  return S_OK; <br>} <br> <br>STDMETHODIMP CDADrag::raw_Notify(IDABehavior* eventData, <br>IDABehavior* curRunningBvr, <br>IDAView* curView, <br>IDABehavior** ppBvr)  { <br>IDAPoint2Ptr currPt = (IDAPoint2Ptr)curRunningBvr; <br> <br>  // pull apart the pair that comes from andEvent and from the <br>// pick event pair, ultimately to get at the local mouse  <br>IDAPairPtr andEventPair = (IDAPairPtr)eventData; <br>         <br>  IDAPairPtr    pickPair   = (IDAPairPtr)(andEventPair-&gt;Second); <br> <br>IDAVector2Ptr localMouse = (IDAVector2Ptr)(pickPair-&gt;Second); <br> <br>IDAPoint2Ptr draggingPt = currPt-&gt;Transform(_e-&gt;Translate2Vector(localMouse)); <br> <br>  IDAPoint2Ptr finalPt = (IDAPoint2Ptr)_e-&gt;UntilNotify(draggingPt, _releaseEv, _releaseHdlr); <br> <br>*ppBvr = (IDABehavior*)finalPt; <br> <br>finalPt-&gt;AddRef(); <br> <br>return S_OK; <br>} <br> <br>/*************************************** <br> * CDARelease <br> ***************************************/ <br> <br>STDMETHODIMP_(ULONG) CDARelease::AddRef()  {  <br>return InterlockedIncrement(&amp;_cRefs);  <br>} <br> <br>STDMETHODIMP_(ULONG) CDARelease::Release()  { <br>ULONG refCount = InterlockedDecrement(&amp;_cRefs); <br>if (!refCount) { <br>delete this; <br>return refCount; <br>} <br>return _cRefs; <br>} <br> <br>STDMETHODIMP CDARelease::QueryInterface(REFIID riid, void **ppv)  { <br>if (!ppv) <br>return E_POINTER; <br> <br>*ppv = NULL; <br>if (riid == IID_IUnknown)  { <br>*ppv = (void *)(IUnknown *)this; <br>} else if (riid == IID_IDABvrHook)  { <br>*ppv = (void *)(IDAUntilNotifier *)this; <br>} <br> <br>if (*ppv)  { <br>((IUnknown *)*ppv)-&gt;AddRef(); <br>return S_OK; <br>} <br> <br>return E_NOINTERFACE; <br>} <br> <br>STDMETHODIMP CDARelease::initNotify(IDAEventPtr pickEv, CDADrag* grabHdlr, IDAStaticsPtr e)  { <br>   _e  = e; <br>  _pickEv = pickEv; <br>  _grabHdlr = grabHdlr; <br>  return S_OK; <br>} <br> <br>STDMETHODIMP CDARelease::raw_Notify(IDABehavior* eventData, <br>IDABehavior* curRunningBvr, <br>IDAView* curView, <br>IDABehavior** ppBvr)  { <br> <br>  // Releasing.  Freeze the image where it is, and go  <br>  // back to waiting for a pick event. <br>  IDAPoint2Ptr snappedPt = (IDAPoint2Ptr)eventData; <br>  IDAPoint2Ptr releasePt = (IDAPoint2Ptr)_e-&gt;UntilNotify(snappedPt, <br>    _pickEv, _grabHdlr); <br> <br>  *ppBvr = (IDABehavior*)releasePt; <br> <br>releasePt-&gt;AddRef(); <br> <br>return S_OK; <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

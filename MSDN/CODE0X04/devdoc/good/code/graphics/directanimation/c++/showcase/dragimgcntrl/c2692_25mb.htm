<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CTLHOST.H</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2693"></a>CTLHOST.H</h2>
<pre><code>////////////////////////////////////////////////////////////////////////// <br>// <br>//  controlhost.h <br>// <br>//  This file contains our CControlHost specification. It is used <br>//  to implement a generic ActiveX Control container. <br>// <br>//  (C) Copyright 1997 by Microsoft Corporation. All rights reserved. <br>// <br>////////////////////////////////////////////////////////////////////////// <br> <br>#ifndef _CONTROLHOST_H_ <br>#define _CONTROLHOST_H_ <br> <br>#include &lt;ocidl.h&gt; <br> <br>#define BASE_EXTENDED_PROPERTY      0x80010000 <br>#define DISPID_NAME                 (BASE_EXTENDED_PROPERTY | 0x00) <br>#define DISPID_ALIGN                (BASE_EXTENDED_PROPERTY | 0x01) <br>#define DISPID_BASEHREF             (BASE_EXTENDED_PROPERTY | 0x02) <br> <br>class CControlHost : public IDispatch, <br>                     public IOleInPlaceSiteWindowless, <br>                     public IOleInPlaceFrame, <br>                     public IOleControlSite, <br>                     public IOleClientSite <br>{ <br>    protected: <br>        HWND                _hwnd;              // container window handle <br>        HWND                _hwndControl;       // Control's window handle <br>        UINT                _cRef;              // IUnknown ref count <br>        BOOL                _bCapture;          // mouse capture flag <br>        RECT                _rcPos; <br>        DWORD               _dwTBSink; <br> <br>        IUnknown           *_punk;              // copy unknown from instance structure <br>        void               *_punkOuter;         // parent container <br>        CDAViewerCtl       *_pvc;               // DAViewerControl <br> <br>    public: <br>        void NotifyButton(long buttonId, long buttonState) <br>        { <br>            if(buttonId == 0) <br>                buttonId++; <br>        } <br>        void NotifyTrackBar(long position) <br>        { <br>            if(position == 0) <br>                position++; <br>        } <br>        void NotifyStatusBar(long position, BSTR* pstrText) <br>        { <br>            if(position == 0) <br>                position++; <br>        } <br> <br>        ~CControlHost(); <br>        CControlHost(IUnknown *); <br> <br>        // *** IUnknown Methods *** <br>        STDMETHODIMP QueryInterface(REFIID riid, LPVOID * ppvObj); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        // *** IDispatch Methods *** <br>        STDMETHOD (GetIDsOfNames)(REFIID riid, OLECHAR FAR* FAR* rgszNames,unsigned int cNames, LCID lcid,DISPID FAR* rgdispid); <br>        STDMETHOD (GetTypeInfo)(unsigned int itinfo, LCID lcid, ITypeInfo FAR* FAR* pptinfo); <br>        STDMETHOD (GetTypeInfoCount)(unsigned int FAR * pctinfo); <br>        STDMETHOD (Invoke)(DISPID dispid, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS FAR *pdispparams, VARIANT FAR *pvarResult, EXCEPINFO FAR * pexecinfo, unsigned int FAR *puArgErr); <br> <br>        // *** IOleClientSite methods *** <br>        STDMETHOD (SaveObject)(); <br>        STDMETHOD (GetMoniker)(DWORD, DWORD, LPMONIKER *); <br>        STDMETHOD (GetContainer)(LPOLECONTAINER *); <br>        STDMETHOD (ShowObject)(); <br>        STDMETHOD (OnShowWindow)(BOOL); <br>        STDMETHOD (RequestNewObjectLayout)(); <br> <br>        // *** IOleWindow Methods *** <br>        STDMETHOD (GetWindow) (HWND * phwnd); <br>        STDMETHOD (ContextSensitiveHelp) (BOOL fEnterMode); <br> <br>        // *** IOleInPlaceSite Methods *** <br>        STDMETHOD (CanInPlaceActivate) (void); <br>        STDMETHOD (OnInPlaceActivate) (void); <br>        STDMETHOD (OnUIActivate) (void); <br>        STDMETHOD (GetWindowContext) (IOleInPlaceFrame ** ppFrame, IOleInPlaceUIWindow ** ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo); <br>        STDMETHOD (Scroll) (SIZE scrollExtent); <br>        STDMETHOD (OnUIDeactivate) (BOOL fUndoable); <br>        STDMETHOD (OnInPlaceDeactivate) (void); <br>        STDMETHOD (DiscardUndoState) (void); <br>        STDMETHOD (DeactivateAndUndo) (void); <br>        STDMETHOD (OnPosRectChange) (LPCRECT lprcPosRect); <br> <br>        // *** IOleInPlaceSiteEx Methods *** <br>        STDMETHOD (OnInPlaceActivateEx) (BOOL *pfNoRedraw, DWORD dwFlags); <br>        STDMETHOD (OnInPlaceDeactivateEx) (BOOL fNoRedraw); <br>        STDMETHOD (RequestUIActivate) (void); <br> <br>        // *** IOleInPlaceSiteWindowless Methods *** <br>        STDMETHOD (CanWindowlessActivate) (void); <br>        STDMETHOD (GetCapture) (void); <br>        STDMETHOD (SetCapture) (BOOL fCapture); <br>        STDMETHOD (GetFocus) (void); <br>        STDMETHOD (SetFocus) (BOOL fFocus); <br>        STDMETHOD (GetDC) (LPCRECT pRect, DWORD grfFlags, HDC *phDC); <br>        STDMETHOD (ReleaseDC) (HDC hDC); <br>        STDMETHOD (InvalidateRect) (LPCRECT pRect, BOOL fErase); <br>        STDMETHOD (InvalidateRgn) (HRGN hRGN, BOOL fErase); <br>        STDMETHOD (ScrollRect) (INT dx, INT dy, LPCRECT pRectScroll, LPCRECT pRectClip); <br>        STDMETHOD (AdjustRect) (LPRECT prc); <br>        STDMETHOD (OnDefWindowMessage) (UINT msg, WPARAM wParam, LPARAM lParam, LRESULT *plResult); <br> <br>        // *** IOleInPlaceUIWindow Methods *** <br>        STDMETHOD (GetBorder)(LPRECT lprectBorder); <br>        STDMETHOD (RequestBorderSpace)(LPCBORDERWIDTHS lpborderwidths); <br>        STDMETHOD (SetBorderSpace)(LPCBORDERWIDTHS lpborderwidths); <br>        STDMETHOD (SetActiveObject)(IOleInPlaceActiveObject * pActiveObject, <br>                                    LPCOLESTR lpszObjName); <br> <br>        // *** IOleInPlaceFrame Methods *** <br>        STDMETHOD (InsertMenus)(HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths); <br>        STDMETHOD (SetMenu)(HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject); <br>        STDMETHOD (RemoveMenus)(HMENU hmenuShared); <br>        STDMETHOD (SetStatusText)(LPCOLESTR pszStatusText); <br>        STDMETHOD (EnableModeless)(BOOL fEnable); <br>        STDMETHOD (TranslateAccelerator)(LPMSG lpmsg, WORD wID); <br> <br>        // *** IOleControlSite Methods *** <br>        STDMETHOD (OnControlInfoChanged)(void); <br>        STDMETHOD (LockInPlaceActive)(BOOL fLock); <br>        STDMETHOD (GetExtendedControl)(IDispatch **ppDisp); <br>        STDMETHOD (TransformCoords)(POINTL *pptlHimetric, POINTF *pptfContainer, DWORD dwFlags); <br>        STDMETHOD (TranslateAccelerator)(LPMSG pMsg, DWORD grfModifiers); <br>        STDMETHOD (OnFocus)(BOOL fGotFocus); <br>        STDMETHOD (ShowPropertyFrame)(void); <br> <br>        // *** External Helper API *** <br>        HRESULT SetHwnd(HWND hwnd); <br> <br>        HRESULT CreateControl(); <br>        HRESULT DeleteControl(); <br>        HRESULT QueryObject(REFIID riid, void **ppvObject); <br>}; <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

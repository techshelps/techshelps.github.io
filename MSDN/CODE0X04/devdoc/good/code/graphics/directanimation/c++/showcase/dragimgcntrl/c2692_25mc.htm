<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DACTL.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2694"></a>DACTL.CPP</h2>
<pre><code>#include "dactl.h" <br> <br>void dump_com_error( _com_error &amp;e ) <br>{ <br>    char buf[2048]; <br> <br>    sprintf(buf, _T( "Oops - hit an error!\n\tCode = %08lx\n\tCode meaning = %s\n" ), <br>            e.Error(), e.ErrorMessage()); <br>    OutputDebugString(buf); <br>} <br> <br>// If this is placed in the scope of the smart pointers, they must be <br>// explicitly Release(d) before CoUninitialize() is called.  If any reference <br>// count is non-zero, a protection fault will occur. <br> <br>CDAViewerCtl::CDAViewerCtl() <br>    :_vc(NULL) <br>{ <br>    try   { <br>        _vc.CreateInstance(__uuidof(DAViewerControlWindowed)); <br>    } catch( _com_error &amp;e ) { <br>        dump_com_error( e ); <br>    } <br>} <br> <br>void CDAViewerCtl::CreateModel() { <br>    try { <br>        // Create the statics object <br>        IDAStaticsPtr e; <br>        e = _vc-&gt;GetMeterLibrary(); <br> <br>        CDADrag* _dragPtr = new CDADrag(); <br> <br>        // Create a ModifiableBehavior which will be used to change the color <br>        // of the square. <br>        IDABehaviorPtr _squareColor = e-&gt;ModifiableBehavior(e-&gt;Red); <br> <br>        // Instanciate an uninitialized ColorBvr (_squareColor). <br>        IDAColorPtr temp; <br>        temp.CreateInstance( L"DirectAnimation.DAColor"); <br> <br>        // Initialize _squareColor.  Let it start out as red, change it to blue, <br>        // when the square is grabbed, and return to red when the square <br>        // is released.  The grab and release events are obtained from the <br>        // getGrabEvent() and getReleaseEvent() from the CDADrag  <br>        // class. <br>        //_squareColor-&gt;Init(e-&gt;Until(e-&gt;Red, _dragPtr-&gt;getGrabEvent(),  <br>        //  e-&gt;Until(e-&gt;Blue, _dragPtr-&gt;getReleaseEvent(), _squareColor))); <br> <br>        // Create cropped square, and apply _squareColor's color behavior to it.  <br>        _blockImg = e-&gt;SolidColorImage((IDAColorPtr)_squareColor)-&gt;Crop(e-&gt;Point2(0,0), <br>          e-&gt;Point2(0.005,0.005)); <br>     <br>        _dragPtr-&gt;initNotify(_blockImg, e-&gt;Origin2, e); <br> <br>        // Initialize squareClr.  Let it start out as red, change it to blue, <br>        // when the cube is grabbed, and return to red when the cube <br>        // is released.  The grab and release events are obtained from the <br>    // getGrabEvent() and getReleaseEvent() methods of the CDADrag <br>    // class respectively. <br>        IDAColorPtr squareClr; <br>        squareClr.CreateInstance( L"DirectAnimation.DAColor"); <br>        squareClr-&gt;Init(e-&gt;Until(e-&gt;Red, _dragPtr-&gt;getGrabEvent(),  <br>    e-&gt;Until(e-&gt;Blue, _dragPtr-&gt;getReleaseEvent(), squareClr))); <br> <br>        // Apply squareClr's behavior to the square. <br>        _squareColor-&gt;SwitchTo(squareClr); <br> <br>        // Get the ImageBvr part of grabImg, by calling the getImagePtr() method <br>        // of DraggableImage. <br>        IDAImagePtr pickableBlockImg = _dragPtr-&gt;getImagePtr(); <br> <br>        // overlay pickableBlockImg on a black background. <br>        IDAImagePtr model = e-&gt;Overlay(pickableBlockImg, e-&gt;SolidColorImage(e-&gt;Black)); <br>         <br>        // And set the model's image to this image. <br>        _vc-&gt;PutImage( model ); <br> <br>        // Set the cap for the frame rate.  If we don't do this, DA <br>        // will hog the cpu and the mouse and keyboard won't be very <br>        // responsive.  If you're running in full screen mode, you may <br>        // want to remove this line to get better frame rate. <br>        _vc-&gt;put_UpdateInterval(0.2); <br> <br>        // Start the model on the view.  The WndProc will <br>        // generate the frames. <br>        _vc-&gt;Start(); <br> <br>    } catch( _com_error &amp;e ) { <br>        dump_com_error( e ); <br>    } <br>} <br> <br> <br>HRESULT CDAViewerCtl::GetIUnknown(IUnknown **pUnk) { <br>    if (!pUnk) <br>        return E_POINTER; <br> <br>    if (_vc == NULL) <br>        return E_NOINTERFACE; <br> <br>    return _vc-&gt;QueryInterface(IID_IUnknown, (LPVOID *)pUnk); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

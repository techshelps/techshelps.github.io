<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DACTL.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2702"></a>DACTL.CPP</h2>
<pre><code>#include "dactl.h" <br> <br>void dump_com_error( _com_error &amp;e ) <br>{ <br>    char buf[2048]; <br> <br>    sprintf(buf, _T( "Oops - hit an error!\n\tCode = %08lx\n\tCode meaning = %s\n" ), <br>            e.Error(), e.ErrorMessage()); <br>    OutputDebugString(buf); <br>} <br> <br>// If this is placed in the scope of the smart pointers, they must be <br>// explicitly Release(d) before CoUninitialize() is called.  If any reference <br>// count is non-zero, a protection fault will occur. <br> <br>CDAViewerCtl::CDAViewerCtl() <br>    :_vc(NULL) <br>{ <br>    try   { <br>        _vc.CreateInstance(__uuidof(DAViewerControlWindowed)); <br>    } catch( _com_error &amp;e ) { <br>        dump_com_error( e ); <br>    } <br>} <br> <br>void CDAViewerCtl::CreateModel() { <br>    try { <br>        // Create the statics object <br>        IDAStaticsPtr e; <br>        e = _vc-&gt;GetMeterLibrary(); <br> <br>        // Import Media (geometries, images and in this case).   <br>        // The GetCurrentDirectory() is used as a starting <br>        // point for relative file importing. <br>        TCHAR szMediaBase[_MAX_PATH]; <br>        TCHAR szImg[_MAX_PATH]; <br>        TCHAR szGeo[_MAX_PATH]; <br>        TCHAR szSnd[_MAX_PATH]; <br> <br>        GetModuleFileName(GetModuleHandle("Pick3Cntrl.exe"), <br>          szMediaBase,sizeof(szMediaBase)); <br>        char *pos = strrchr( szMediaBase, (int)'\\' ); <br>        int result = pos - szMediaBase + 1; <br>        szMediaBase[result]= NULL; <br> <br>        _tcscat(szMediaBase,_T("../../../../../media/")); <br> <br>        _tcscpy(szImg,szMediaBase); <br>        _tcscpy(szGeo,szMediaBase); <br>        _tcscpy(szSnd,szMediaBase); <br> <br>        _tcscat(szImg,_T("image/")); <br>        _tcscat(szGeo,_T("geometry/")); <br>        _tcscat(szSnd,_T("sound/")); <br> <br>        // Define constants <br>        SIZE = e-&gt;Scale3Uniform(0.25); <br>        PICKEVENTL = e-&gt;LeftButtonDown; <br>        PICKEVENTR = e-&gt;RightButtonDown; <br>        SPEED = e-&gt;DANumber(0.07); <br>        PI = 3.14159265359; <br> <br>        // import background. <br>        IDAImagePtr stillSky = e-&gt;ImportImage(_bstr_t(szImg) + _bstr_t("cldtile.jpg")); <br> <br>        IDAPoint2Ptr maxSky = stillSky-&gt;BoundingBox-&gt;Max; <br>        IDAImagePtr tiledSky = stillSky-&gt;Tile(); <br>        IDAImagePtr movingSky = tiledSky-&gt;Transform(e-&gt;Translate2Anim(e-&gt;Mul(e-&gt;LocalTime, <br>          e-&gt;Div(maxSky-&gt;X,e-&gt;DANumber(8))), e-&gt;Mul(e-&gt;LocalTime,e-&gt;Div(maxSky-&gt;X,e-&gt;DANumber(16))))); <br> <br>        // Import the geometries. <br>        IDAGeometryPtr rawCube =  <br>        e-&gt;ImportGeometry( _bstr_t(szGeo) + _bstr_t( "cube.x" ) ); <br>        rawCube = rawCube-&gt;Transform(SIZE); <br> <br>        IDAGeometryPtr rawCylinder =  <br>        e-&gt;ImportGeometry(_bstr_t(szGeo) + _bstr_t("cylinder.x")); <br>        rawCylinder = rawCylinder-&gt;Transform(SIZE); <br> <br>        IDAGeometryPtr rawCone =  <br>        e-&gt;ImportGeometry(_bstr_t(szGeo) + _bstr_t("cone.x")); <br>        rawCone = rawCone-&gt;Transform(SIZE); <br> <br>        // Make the geometries pickable. <br>        IDAGeometryPtr cone1 = activate(rawCone, e-&gt;Green, e); <br> <br>        IDAGeometryPtr cube1 = activate(rawCube, e-&gt;Magenta, e); <br> <br>        IDAGeometryPtr cube2 = activate(rawCube, e-&gt;ColorHslAnim(e-&gt;Div(e-&gt;LocalTime, <br>          e-&gt;DANumber(8)), e-&gt;DANumber(1), e-&gt;DANumber(0.5)), e); <br> <br>        IDAGeometryPtr cylinder = activate(rawCylinder, e-&gt;ColorRgb(0.8,0.4,0.4), e); <br> <br>        // Construct the final geometry, scale and rotate it. <br>        IDAGeometryPtr multigeo = e-&gt;UnionGeometry(cone1-&gt;Transform(e-&gt;Translate3(0,1,0)), <br>          e-&gt;UnionGeometry(cube1-&gt;Transform(e-&gt;Translate3(0,0,1)), <br>            e-&gt;UnionGeometry(cube2-&gt;Transform(e-&gt;Translate3(0,0,-1)),cylinder))); <br> <br>        IDAGeometryPtr geo = multigeo-&gt;Transform(e-&gt;Scale3Anim(e-&gt;Add(e-&gt;Abs(e-&gt;Sin(e-&gt;Mul(e-&gt;LocalTime, <br>          e-&gt;DANumber(0.2)))),e-&gt;DANumber(0.5)),e-&gt;Add(e-&gt;Abs(e-&gt;Sin(e-&gt;Mul(e-&gt;LocalTime, <br>            e-&gt;DANumber(0.26)))),e-&gt;DANumber(0.5)),e-&gt;Add(e-&gt;Abs(e-&gt;Sin(e-&gt;Mul(e-&gt;LocalTime, <br>              e-&gt;DANumber(0.14)))),e-&gt;DANumber(0.5)))); <br> <br>        IDATransform3Ptr transform1 = e-&gt;Rotate3Anim(e-&gt;ZVector3, <br>          e-&gt;Mul(e-&gt;DANumber(0.07), e-&gt;Mul(e-&gt;LocalTime, e-&gt;DANumber(1.9)))); <br> <br>        IDATransform3Ptr transform2 = e-&gt;Rotate3Anim(e-&gt;YVector3, <br>          e-&gt;Mul(e-&gt;DANumber(0.07), e-&gt;Mul(e-&gt;LocalTime, e-&gt;DANumber(PI)))); <br> <br>        IDAImagePtr movingGeoImg = geometryImage(geo-&gt;Transform(e-&gt;Compose3(e-&gt;Rotate3Anim(e-&gt;ZVector3, <br>          e-&gt;Mul(e-&gt;DANumber(0.07),e-&gt;Mul(e-&gt;LocalTime,e-&gt;DANumber(1.9)))), e-&gt;Rotate3Anim(e-&gt;YVector3, <br>            e-&gt;Mul(e-&gt;DANumber(0.07),e-&gt;Mul(e-&gt;LocalTime,e-&gt;DANumber(PI)))))), e); <br> <br>        IDAFontStylePtr fs = e-&gt;DefaultFont-&gt;Color(e-&gt;Black); <br>        IDAImagePtr titleIm = e-&gt;StringImage("Left Click On An Object",  <br>          fs)-&gt;Transform(e-&gt;Translate2(0,0.03)); <br> <br>        IDAImagePtr model = e-&gt;Overlay( titleIm, e-&gt;Overlay( movingGeoImg, movingSky ) ); <br>         <br>        // And set the model's image to this image. <br>        _vc-&gt;PutImage( model ); <br> <br>        // Set the cap for the frame rate.  If we don't do this, DA <br>        // will hog the cpu and the mouse and keyboard won't be very <br>        // responsive.  If you're running in full screen mode, you may <br>        // want to remove this line to get better frame rate. <br>        _vc-&gt;put_UpdateInterval(0.2); <br> <br>        // Start the model on the view.  The WndProc will <br>        // generate the frames. <br>        _vc-&gt;Start(); <br> <br>    } catch( _com_error &amp;e ) { <br>        dump_com_error( e ); <br>    } <br>} <br> <br>IDAGeometryPtr CDAViewerCtl::activate(IDAGeometryPtr unpickedGeo,  <br>                                      IDAColorPtr col, IDAStaticsPtr e)  { <br>  IDAPickableResultPtr pickGeo = unpickedGeo-&gt;Pickable(); <br>  IDAEventPtr pickEvent = e-&gt;AndEvent(PICKEVENTL, pickGeo-&gt;PickEvent); <br> <br>  IDANumberPtr numcyc; <br>  numcyc.CreateInstance( L"DirectAnimation.DANumber"); <br>  numcyc-&gt;Init(e-&gt;Until(e-&gt;DANumber(0),pickEvent, <br>    e-&gt;Until(e-&gt;DANumber(1), pickEvent, numcyc))); <br> <br>  IDAColorPtr colcyc; <br>  colcyc.CreateInstance( L"DirectAnimation.DAColor"); <br>  colcyc-&gt;Init(e-&gt;Until(e-&gt;White, pickEvent, e-&gt;Until(col, pickEvent, colcyc))); <br> <br>  IDATransform3Ptr xf = e-&gt;Rotate3Anim(e-&gt;XVector3, e-&gt;Integral(numcyc)); <br> <br>  return pickGeo-&gt;Geometry-&gt;DiffuseColor(colcyc)-&gt;Transform(xf); <br> <br>} <br> <br>IDAImagePtr CDAViewerCtl::geometryImage(IDAGeometryPtr geo, IDAStaticsPtr e)  { <br>  IDANumberPtr scaleFactor = e-&gt;DANumber(0.02); <br> <br>  IDATransform3Ptr perspTransform; <br>  perspTransform.CreateInstance( L"DirectAnimation.DATransform3"); <br>  perspTransform-&gt;Init(e-&gt;Until(e-&gt;Compose3(e-&gt;Rotate3Anim(e-&gt;XVector3, <br>    e-&gt;Mul(SPEED,e-&gt;LocalTime)),e-&gt;Translate3(0, 0, 0.2)),PICKEVENTR,  <br>      e-&gt;Until(e-&gt;Rotate3Anim(e-&gt;XVector3, e-&gt;Mul(SPEED,e-&gt;LocalTime)), <br>        PICKEVENTR, perspTransform))); <br> <br>  IDAGeometryPtr myLight =  <br>    e-&gt;UnionGeometry(e-&gt;DirectionalLight-&gt;Transform(perspTransform), e-&gt;DirectionalLight); <br> <br>  IDACameraPtr perspectiveCam = (e-&gt;PerspectiveCamera(1,0))-&gt;Transform(e-&gt;Compose3(e-&gt;Rotate3Anim(e-&gt;XVector3, <br>    e-&gt;Mul(SPEED,e-&gt;LocalTime)),e-&gt;Translate3(0,0,0.2))); <br> <br>  IDACameraPtr parallelCam = (e-&gt;ParallelCamera(1))-&gt;Transform(e-&gt;Rotate3Anim(e-&gt;XVector3, <br>    e-&gt;Mul(SPEED,e-&gt;LocalTime))); <br> <br>  IDACameraPtr camera; <br>  camera.CreateInstance( L"DirectAnimation.DACamera"); <br>  camera-&gt;Init(e-&gt;Until(perspectiveCam, PICKEVENTR, <br>    e-&gt;Until(parallelCam, PICKEVENTR, camera))); <br> <br>  // Display text which tells the user what camera is currently being used. <br>  IDAStringPtr camText; <br>  camText.CreateInstance( L"DirectAnimation.DAString"); <br>  camText-&gt;Init(e-&gt;Until(e-&gt;DAString("Perspective - Right Click to Switch"), PICKEVENTR, <br>    e-&gt;Until(e-&gt;DAString("Parallel - Right Click to Switch"),PICKEVENTR, camText))); <br> <br>  IDAFontStylePtr fs = e-&gt;DefaultFont-&gt;Color(e-&gt;Red); <br>  IDAImagePtr camIm  = e-&gt;StringImageAnim(camText, fs); <br>  camIm = camIm-&gt;Transform(e-&gt;Translate2(0, -0.03)); <br> <br>  return e-&gt;Overlay(camIm, e-&gt;UnionGeometry(geo-&gt;Transform(e-&gt;Scale3UniformAnim(scaleFactor)), <br>    myLight)-&gt;Render(camera)); <br>} <br> <br>HRESULT CDAViewerCtl::GetIUnknown(IUnknown **pUnk) { <br>    if (!pUnk) <br>        return E_POINTER; <br> <br>    if (_vc == NULL) <br>        return E_NOINTERFACE; <br> <br>    return _vc-&gt;QueryInterface(IID_IUnknown, (LPVOID *)pUnk); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

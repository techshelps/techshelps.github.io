<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WAVEFILE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2584"></a>WAVEFILE.H</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br> * <br> **************************************************************************/ <br>/**************************************************************************** <br> * <br> *  WAVEFILE.H <br> * <br> *  header file for routines for reading WAVE files <br> * <br> ***************************************************************************/ <br> <br>/*--------*/ <br>#include "extra.h" <br>#include "wavefile.rc" <br> <br>extern HMODULE ghModule; // = NULL; // global HMODULE/HINSTANCE for resource access <br>/*--------*/ <br> <br>/* <br>** This class is used to implement a handler for a type of file with only <br>** one stream.  In this case, we don't have to worry about allocating more <br>** than one stream object for each file object, so we can combine the <br>** two together in a single class. <br>** <br>*/ <br> <br>HRESULT WaveFileCreate( <br>IUnknown FAR*pUnknownOuter, <br>REFIIDriid, <br>void FAR* FAR*ppv); <br> <br>typedef struct { <br> <br>/* <br>** This implementation of a file handler is done in C, not C++, so a few <br>** things work differently than in C++.  Our structure contains Vtbls <br>** (pointer to function tables) for three interfaces... Unknown, AVIStream, <br>** and AVIFile, as well as our private data we need to implement the <br>** handler. <br>** <br>*/ <br> <br>IAVIStreamVtbl FAR*AVIStream; <br>IAVIFileVtbl FAR*AVIFile; <br>IUnknownVtbl FAR*Unknown; <br>IPersistFileVtbl FAR*Persist; <br> <br>// This is our controlling object. <br>IUnknown FAR*pUnknownOuter; <br> <br>// <br>// WaveFile instance data <br>// <br>HMMIOhmmio;// file I/O <br> <br>MMCKINFOckData; <br> <br>LONGrefs;// for UNKNOWN <br>AVISTREAMINFOWavistream;// for STREAM <br> <br>LPWAVEFORMATlpFormat;// stream format <br>LONGcbFormat; <br>BOOLfDirty; <br>UINTmode; <br>EXTRAextra; <br>AVIFILEINFOWavihdr; <br>} WAVESTUFF, FAR *LPWAVESTUFF; <br> <br>/* <br>** Whenever a function is called with a pointer to one of our Vtbls, we need <br>** to back up and get a pointer to the beginning of our structure.  Depending <br>** on which pointer we are passed, we need to back up a different number of <br>** bytes.  C++ would make this easier, by declaring backpointers. <br>*/ <br> <br>WAVESTUFF ws; <br>#define WAVESTUFF_FROM_UNKNOWN(pu)(LPWAVESTUFF)((LPBYTE)(pu) - ((LPBYTE)&amp;ws.Unknown - (LPBYTE)&amp;ws)) <br>#define WAVESTUFF_FROM_FILE(pf)(LPWAVESTUFF)((LPBYTE)(pf) - ((LPBYTE)&amp;ws.AVIFile - (LPBYTE)&amp;ws)) <br>#define WAVESTUFF_FROM_STREAM(ps)(LPWAVESTUFF)((LPBYTE)(ps) - ((LPBYTE)&amp;ws.AVIStream - (LPBYTE)&amp;ws)) <br>#define WAVESTUFF_FROM_PERSIST(ppf)(LPWAVESTUFF)((LPBYTE)(ppf) - ((LPBYTE)&amp;ws.Persist - (LPBYTE)&amp;ws)) <br> <br>/*--------*/ <br> <br>/* <br>** This class is our version of the IClassFactory interface. <br>** <br>** COMPOBJ.DLL expects our DllGetClassObject() function to return an <br>** IClassFactory object which it can then call to get the object that <br>** implements the IAVIFile interface to actually open the file.  Whew. <br>*/ <br>typedef struct { <br>IClassFactoryVtbl FAR *lpVtbl; <br> <br>/* <br>** Data local to this object: reference counts for the object <br>*/ <br>ULONGulRef; <br>CLSID FAR *clsid; <br>} WAVEFACTORY, FAR *LPWAVEFACTORY; <br> <br>/*--------*/ <br> <br>/* <br>** These variables help keep track of whether the DLL is still in use, <br>** so that when our DllCanUnloadNow() function is called, we know what <br>** to say. <br>*/ <br> <br>extern UINTuUseCount; <br>extern UINTuLockCount; <br> <br>/*--------*/ <br> <br>// <br>// This is our unique identifier <br>// <br>//  NOTE: If you modify this sample code to do something else, you MUST <br>//    CHANGE THIS! <br>// <br>//  Run uuidgen.exe from the tools directory and get your own GUID. <br>//  DO NOT USE THIS ONE! <br>// <br>// <br>// <br>DEFINE_GUID(CLSID_AVIWaveFileReader, 0x00020003, 0, 0, 0xC0,0,0,0,0,0,0,0x46); <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

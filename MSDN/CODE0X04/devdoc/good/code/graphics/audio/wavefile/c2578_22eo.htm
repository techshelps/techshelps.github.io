<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FACTORY1.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2580"></a>FACTORY1.C</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br> * <br> **************************************************************************/ <br>/* <br>** <br>**FACTORY1.C - All of the class factory stuff for our handler <br>** <br>*/ <br>#defineINITGUID <br>#define INC_OLE2 <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;vfw.h&gt; <br> <br>#include "wavefile.h" <br> <br> <br>HMODULE ghModule = NULL;// global HMODULE/HINSTANCE for resource access <br>// <br>// Here are the function prototypes for the methods for the class factory <br>// <br>STDMETHODIMP WaveFactoryQueryInterface( <br>LPCLASSFACTORY pcf, <br>REFIID iid, <br>void FAR* FAR* ppv); <br>STDMETHODIMP_(ULONG) WaveFactoryAddRef( <br>LPCLASSFACTORY pcf); <br>STDMETHODIMP_(ULONG) WaveFactoryRelease( <br>LPCLASSFACTORY pcf); <br>STDMETHODIMP WaveFactoryCreateInstance( <br>LPCLASSFACTORY pcf, <br>IUnknown FAR* pUnknownOuter, <br>REFIID riid, <br>void FAR* FAR* ppv); <br>STDMETHODIMP WaveFactoryLockServer( <br>LPCLASSFACTORY pcf, <br>BOOL fLock); <br>HRESULT WaveFactoryCreate( <br>REFCLSIDrclsid, <br>REFIIDriid, <br>void FAR* FAR*ppv); <br> <br> <br>// <br>// And here's the Vtbl... <br>// <br>IClassFactoryVtblWaveFactoryVtbl = { <br>WaveFactoryQueryInterface, <br>WaveFactoryAddRef, <br>WaveFactoryRelease, <br>WaveFactoryCreateInstance, <br>WaveFactoryLockServer}; <br> <br>/*--------*/ <br> <br>EXTERN_C BOOL APIENTRY DllMain(HANDLE, DWORD, LPVOID); <br>EXTERN_C BOOL APIENTRY DllMain( <br>HANDLE hModule, <br>DWORD dwReason, <br>LPVOID lpReserved ) <br>{ <br>switch( dwReason) <br>{ <br>case DLL_PROCESS_ATTACH: <br>if(ghModule == NULL) <br>ghModule = (HMODULE)hModule; <br>break; <br>case DLL_THREAD_ATTACH: <br>break; <br>case DLL_THREAD_DETACH: <br>break; <br>case DLL_PROCESS_DETACH: <br>break; <br>} <br>return TRUE; <br>} <br> <br>/*--------*/ <br> <br>BOOL FAR PASCAL WEP( <br>BOOLfSystemExit) <br>{ <br>return TRUE; <br>} <br> <br>/*--------*/ <br> <br>// <br>// Can we be unloaded? Only if our reference count AND lock counts are both <br>// zero. <br>// <br>STDAPI DllCanUnloadNow( <br>void) <br>{ <br>return ResultFromScode((uLockCount || uUseCount) ? S_FALSE : S_OK); <br>} <br> <br>/*--------*/ <br> <br>// <br>// Create a new class factory object.  We must allocate the space for our <br>// structure ourselves since we're using C. <br>// <br>HRESULT WaveFactoryCreate( <br>REFCLSIDrclsid, <br>REFIIDriid, <br>void FAR* FAR*ppv) <br>{ <br>LPWAVEFACTORYpcf; <br>IUnknown FAR*pUnknown; <br>HRESULT hresult; <br> <br>/* <br>** Allocate the new class factory object from the heap <br>*/ <br>pcf = (LPWAVEFACTORY)GlobalAllocPtr(GMEM_MOVEABLE,sizeof(WAVEFACTORY)); <br>if (pcf == NULL) <br>return ResultFromScode(E_OUTOFMEMORY); <br> <br>/* Initialize our structure */ <br>pcf-&gt;lpVtbl = &amp;WaveFactoryVtbl; <br>pcf-&gt;clsid = (CLSID FAR *)rclsid; <br>pcf-&gt;ulRef = 0; <br>pUnknown = (IUnknown FAR *)pcf; <br> <br>/* <br>** Get the specified interface from the class factory <br>** (If it's not IClassFactory, it will fail....) <br>*/ <br>hresult = pUnknown-&gt;lpVtbl-&gt;QueryInterface(pUnknown, riid, ppv); <br> <br>if (FAILED(GetScode(hresult))) <br>GlobalFreePtr(pcf); <br>return hresult; <br>} <br> <br>/*--------*/ <br> <br>// <br>// Retrieve the class object from the DLL... Create an instance. <br>// <br>STDAPI DllGetClassObject( <br>REFCLSIDrclsid, <br>REFIIDriid, <br>void FAR* FAR*ppv) <br>{ <br>HRESULThresult; <br> <br>/* <br>** Create a class factory object... <br>*/ <br>hresult = WaveFactoryCreate(rclsid, riid, ppv); <br>return hresult; <br>} <br> <br>/*--------*/ <br> <br> <br>// <br>// Query Interface.. We support Unknown and our own interface <br>// <br>STDMETHODIMP WaveFactoryQueryInterface( <br>LPCLASSFACTORY pcf, <br>REFIIDiid, <br>void FAR* FAR*ppv) <br>{ <br>if (IsEqualIID(iid, &amp;IID_IUnknown)) <br>*ppv = pcf; <br>else if (IsEqualIID(iid, &amp;IID_IClassFactory)) <br>*ppv = pcf; <br>else <br>return ResultFromScode(E_NOINTERFACE); <br>// remember to increase our reference count <br>WaveFactoryAddRef(pcf); <br>return NOERROR; <br>} <br> <br>/*--------*/ <br> <br>// <br>// Increase our reference count <br>// <br>STDMETHODIMP_(ULONG) WaveFactoryAddRef( <br>LPCLASSFACTORY pcf) <br>{ <br>LPWAVEFACTORY pwf = (LPWAVEFACTORY) pcf; <br> <br>return ++pwf-&gt;ulRef; <br>} <br> <br>/*--------*/ <br> <br>// <br>// Decrease our reference count -- free the memory for the structure if we're <br>// down to zero. <br>// <br>STDMETHODIMP_(ULONG) WaveFactoryRelease( <br>LPCLASSFACTORY pcf) <br>{ <br>LPWAVEFACTORY pwf = (LPWAVEFACTORY) pcf; <br> <br>if (!--pwf-&gt;ulRef) { <br>GlobalFreePtr(pwf); <br>return 0; <br>} <br>return pwf-&gt;ulRef; <br>} <br> <br>/*--------*/ <br> <br>// <br>// Create an object of our class <br>// <br>STDMETHODIMP WaveFactoryCreateInstance( <br>LPCLASSFACTORYpcf, <br>IUnknown FAR*pUnknownOuter, <br>REFIIDriid, <br>void FAR* FAR*ppv) <br>{ <br>// Actually create a real object using the CAVIFile class.... <br>return WaveFileCreate(pUnknownOuter, riid, ppv); <br>} <br> <br>/*--------*/ <br> <br>// <br>// The standard LockServer function. <br>// <br>STDMETHODIMP WaveFactoryLockServer( <br>LPCLASSFACTORYpcf, <br>BOOLfLock) <br>{ <br>if (fLock) <br>uLockCount++; <br>else <br>uLockCount--; <br>return NOERROR; <br>} <br> <br>/*--------*/ </code></pre>
<p>&nbsp;</p></body>
</HTML>

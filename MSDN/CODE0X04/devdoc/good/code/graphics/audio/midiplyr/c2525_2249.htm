<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MIDIPLYR.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2529"></a>MIDIPLYR.C</h2>
<pre><code>/***************************************************************************** <br>* <br>*  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>*  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED <br>*  TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR <br>*  A PARTICULAR PURPOSE. <br>* <br>*  Copyright 1993 - 1998 Microsoft Corporation. All Rights Reserved. <br>* <br>****************************************************************************** <br>* <br>* MIDIPlyr.C <br>* <br>* Initialization code for the polymessage MIDI playback app. <br>* <br>*****************************************************************************/ <br> <br>#pragma warning(disable:4756) <br> <br>#define _INC_SHELLAPI <br>#include &lt;windows.h&gt; <br>#undef _INC_SHELLAPI <br> <br>#include &lt;shellapi.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;commctrl.h&gt; <br>#include &lt;ctype.h&gt; <br> <br>#include "debug.h" <br> <br>#include "MIDIPlyr.H" <br> <br>PUBLIC  char BCODE      gszMWndClass[]      = "MIDIPlyrMWnd"; <br>PUBLIC  char BCODE      gszTWndClass[]      = "MIDIPlyrTWnd"; <br>PUBLIC  HINSTANCE       ghInst              = NULL; <br>PUBLIC  PSEQ            gpSeq               = NULL; <br>PUBLIC  char            gszUntitled[80]     = ""; <br>PUBLIC  char            gszAppLongName[80]  = ""; <br>PUBLIC  char            gszAppTitleMask[80] = ""; <br>PUBLIC  char            grgszTimeFormats[N_TIME_FORMATS][CB_TIME_FORMATS] = {0}; <br>PUBLIC  RECT            grcTWnd             = {0, 0, 0, 0}; <br>PUBLIC  int             gnTimeFormat        = 0; <br> <br>PRIVATE BOOL FNLOCAL InitApp(HINSTANCE hInst); <br>PRIVATE BOOL FNLOCAL InitInstance(HINSTANCE hInst, int nCmdShow); <br>PRIVATE VOID FNLOCAL TerminateInstance(VOID); <br> <br>/***************************************************************************** <br>* <br>* WinMain <br>* <br>* Called by C startup code. <br>* <br>* HANDLE hInst              - Instance handle of this instance <br>* HANDLE hPrevInst          - Instance handle of previous instance or <br>*                             NULL if we are the first instance <br>* LPSTR lpstrCmdLine        - Any command line arguments <br>* int nCmdShow              - Code for ShowWindow which tells us what state <br>*                             to initially show the main application window. <br>* <br>* Initialize application if first instance. <br>* Initialize instance. <br>* Stay in main message processing loop until exit. <br>* <br>*****************************************************************************/ <br>int PASCAL WinMain( <br>    HINSTANCE                  hInst, <br>    HINSTANCE                  hPrevInst, <br>    LPSTR                   lpstrCmdLine, <br>    int                     nCmdShow) <br>{ <br>    MSG                     msg; <br> <br>    if (hPrevInst == NULL) <br>        if (!InitApp(hInst)) <br>            return 0; <br> <br>    if (!InitInstance(hInst, nCmdShow)) <br>    { <br>        TerminateInstance(); <br>        return 0; <br>    } <br> <br>    while (GetMessage(&amp;msg, NULL, 0, 0)) <br>    { <br>        TranslateMessage(&amp;msg); <br>        DispatchMessage(&amp;msg); <br>    } <br> <br>    TerminateInstance(); <br> <br>    return (msg.wParam); <br>} <br> <br>/***************************************************************************** <br>* <br>* InitApp <br>* <br>* Called for one-time initialization if we are the first app instance. <br>* <br>* HANDLE hInst              - Instance handle of this instance <br>* <br>* Returns TRUE on success. <br>* <br>* Register the window class for the main window and the time window. <br>* <br>*****************************************************************************/ <br>BOOL FNLOCAL InitApp( <br>    HINSTANCE               hInst) <br>{ <br>    WNDCLASS                wc; <br> <br>    InitCommonControls(); <br> <br>    /* Don't specify CS_HREDRAW or CS_VREDRAW if you're going to use the <br>    ** commctrl status or toolbar -- invalidate the (remaining) client <br>    ** area yourself if you want this behavior. This will allow the child <br>    ** control redraws to be much more efficient. <br>    */ <br>    wc.style =          0; <br>    wc.lpfnWndProc =    MWnd_WndProc; <br>    wc.cbClsExtra =     0; <br>    wc.cbWndExtra =     0; <br>    wc.hInstance =      hInst; <br>    wc.hIcon =          LoadIcon(hInst, MAKEINTRESOURCE(ID_ICON)); <br>    wc.hCursor =        LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground =  (HBRUSH)(COLOR_BTNFACE+1); <br>    wc.lpszMenuName =   MAKEINTRESOURCE(ID_MENU); <br>    wc.lpszClassName =  (LPCSTR)gszMWndClass; <br> <br>    RegisterClass(&amp;wc); <br> <br>    wc.style =          CS_HREDRAW|CS_VREDRAW; <br>    wc.lpfnWndProc =    TWnd_WndProc; <br>    wc.cbClsExtra =     0; <br>    wc.cbWndExtra =     0; <br>    wc.hInstance =      hInst; <br>    wc.hIcon =          LoadIcon(hInst, MAKEINTRESOURCE(ID_ICON)); <br>    wc.hCursor =        LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground =  (HBRUSH)(COLOR_WINDOW+1); <br>    wc.lpszMenuName =   NULL; <br>    wc.lpszClassName =  (LPCSTR)gszTWndClass; <br> <br>    RegisterClass(&amp;wc); <br> <br>    return TRUE; <br>} <br> <br>/***************************************************************************** <br>* <br>* InitInstance <br>* <br>* Called once per instance of application. <br>* <br>* HANDLE hInst              - Instance handle of this instance <br>* int nCmdShow              - Code for ShowWindow which tells us what state <br>*                             to initially show the main application window. <br>* Returns TRUE on success. <br>* <br>* Initialize debug library. <br>* Save the instance handle. <br>* Load global resource strings. <br>* Allocate and initialize the global sequencer structure. <br>* Create the main window. <br>* Add time formats to the options menu. <br>* Show the main window. <br>* <br>*****************************************************************************/ <br>BOOL FNLOCAL InitInstance( <br>    HINSTANCE               hInst, <br>    int                     nCmdShow) <br>{ <br>    HWND                    hWnd; <br>    int                     idx; <br> <br>    DbgInitialize(TRUE); <br> <br>    ghInst = hInst; <br> <br>    LoadString(hInst, IDS_APPTITLEMASK, gszAppTitleMask, sizeof(gszAppTitleMask)); <br>    LoadString(hInst, IDS_APPNAME,      gszAppLongName,  sizeof(gszAppLongName)); <br>    LoadString(hInst, IDS_UNTITLED,     gszUntitled,     sizeof(gszUntitled)); <br> <br>    for (idx = 0; idx &lt; N_TIME_FORMATS; idx++) <br>    { <br>        *grgszTimeFormats[idx] = '\0'; <br>        LoadString(hInst, <br>                   IDS_TF_FIRST+idx, <br>                   grgszTimeFormats[idx], <br>                   sizeof(grgszTimeFormats[idx])); <br>    } <br> <br>    if ((gpSeq = (PSEQ)LocalAlloc(LPTR, sizeof(SEQ))) == NULL) <br>        return FALSE; <br> <br>    gpSeq-&gt;cBuffer  = C_MIDI_BUFFERS; <br>    gpSeq-&gt;cbBuffer = CB_MIDI_BUFFERS; <br> <br>    if (seqAllocBuffers(gpSeq) != MMSYSERR_NOERROR) <br>        return FALSE; <br> <br>    hWnd = CreateWindow( <br>        gszMWndClass, <br>        NULL, <br>        WS_OVERLAPPEDWINDOW|WS_CLIPCHILDREN, <br>        CW_USEDEFAULT,CW_USEDEFAULT, <br>        CW_USEDEFAULT,CW_USEDEFAULT, <br>        HWND_DESKTOP, <br>        NULL, <br>        hInst, <br>        NULL); <br> <br>    if (hWnd == (HWND)NULL) <br>        return FALSE; <br> <br>    gpSeq-&gt;hWnd = hWnd; <br> <br>    ShowWindow(hWnd, nCmdShow); <br> <br>    return TRUE; <br>} <br> <br>/***************************************************************************** <br>* <br>* TerminateInstance <br>* <br>* Release any resources for the current instance <br>* <br>*****************************************************************************/ <br>VOID FNLOCAL TerminateInstance( <br>    VOID) <br>{ <br>    if (gpSeq != NULL) <br>    { <br>        seqFreeBuffers(gpSeq); <br>        LocalFree((HLOCAL)gpSeq); <br>        gpSeq = NULL; <br>    } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SMFI.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2537"></a>SMFI.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED <br>//  TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR <br>//  A PARTICULAR PURPOSE. <br>// <br>//  Copyright 1993 - 1998 Microsoft Corporation. All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>#ifndef _SMFI_ <br>#define _SMFI_ <br> <br>/* Handle structure for HSMF <br>*/  <br> <br>#define SMF_TF_EOT          0x00000001L <br>#define SMF_TF_INVALID      0x00000002L <br> <br>typedef struct tag_tempomapentry <br>{ <br>    TICKS           tkTempo;            <br>    DWORD           msBase;             <br>    DWORD           dwTempo;            <br>}   TEMPOMAPENTRY, <br>    *PTEMPOMAPENTRY; <br> <br>typedef struct tag_smf *PSMF; <br> <br>typedef struct tag_track <br>{ <br>    PSMF            pSmf; <br> <br>    DWORD           idxTrack;           <br>     <br>    TICKS           tkPosition;         <br>    DWORD           cbLeft;             <br>    HPBYTE          hpbImage;           <br>    BYTE            bRunningStatus;     <br>     <br>    DWORD           fdwTrack;           <br> <br>    struct <br>    { <br>        TICKS       tkLength; <br>        DWORD       cbLength; <br>    } <br>    smti;                               <br> <br>}   TRACK, <br>    *PTRACK; <br> <br>#define SMF_F_EOF               0x00000001L <br>#define SMF_F_INSERTSYSEX       0x00000002L <br> <br>#define C_TEMPO_MAP_CHK     16 <br>typedef struct tag_smf <br>{ <br>    char            szName[128]; <br>    HPBYTE          hpbImage; <br>    DWORD           cbImage; <br>    HTASK           htask; <br> <br>    TICKS           tkPosition; <br>    TICKS           tkLength; <br>    DWORD           dwFormat; <br>    DWORD           dwTracks; <br>    DWORD           dwTimeDivision; <br>    DWORD           fdwSMF; <br> <br>    DWORD           cTempoMap; <br>    DWORD           cTempoMapAlloc; <br>    HLOCAL          hTempoMap; <br>    PTEMPOMAPENTRY  pTempoMap; <br> <br>    DWORD           dwPendingUserEvent; <br>    DWORD           cbPendingUserEvent; <br>    HPBYTE          hpbPendingUserEvent; <br>     <br>    TRACK           rTracks[]; <br>}   SMF; <br> <br>typedef struct tagEVENT <br>{ <br>    TICKS           tkDelta;            <br>    BYTE            abEvent[3];         <br>                                        <br>                                        <br>                                        <br>    DWORD           cbParm;             <br>    HPBYTE          hpbParm;            <br>}   EVENT, <br>    BSTACK *SPEVENT; <br> <br>#define EVENT_TYPE(event)       ((event).abEvent[0]) <br>#define EVENT_CH_B1(event)      ((event).abEvent[1]) <br>#define EVENT_CH_B2(event)      ((event).abEvent[2]) <br> <br>#define EVENT_META_TYPE(event)  ((event).abEvent[1]) <br> <br>SMFRESULT FNLOCAL smfBuildFileIndex( <br>    PSMF BSTACK *       ppsmf); <br> <br>DWORD FNLOCAL smfGetVDword( <br>    HPBYTE              hpbImage, <br>    DWORD               dwLeft,                                 <br>    DWORD BSTACK *      pdw); <br> <br>SMFRESULT FNLOCAL smfGetNextEvent( <br>    PSMF                psmf, <br>    SPEVENT             pevent, <br>    TICKS               tkMax); <br> <br>/* <br>** Useful macros when dealing with hi-lo format integers <br>*/ <br>#define DWORDSWAP(dw) \ <br>    ((((dw)&gt;&gt;24)&amp;0x000000FFL)|\ <br>    (((dw)&gt;&gt;8)&amp;0x0000FF00L)|\ <br>    (((dw)&lt;&lt;8)&amp;0x00FF0000L)|\ <br>    (((dw)&lt;&lt;24)&amp;0xFF000000L)) <br> <br>#define WORDSWAP(w) \ <br>    ((((w)&gt;&gt;8)&amp;0x00FF)|\ <br>    (((w)&lt;&lt;8)&amp;0xFF00)) <br> <br>#define FOURCC_RMID     mmioFOURCC('R','M','I','D') <br>#define FOURCC_data     mmioFOURCC('d','a','t','a') <br>#define FOURCC_MThd     mmioFOURCC('M','T','h','d') <br>#define FOURCC_MTrk     mmioFOURCC('M','T','r','k') <br> <br>typedef struct tag_chunkhdr <br>{ <br>    FOURCC  fourccType; <br>    DWORD   dwLength; <br>}   CHUNKHDR, <br>    *PCHUNKHDR; <br> <br>#pragma pack(1)// override cl32 default packing, to match disk file. <br>typedef struct tag_filehdr <br>{ <br>    WORD    wFormat; <br>    WORD    wTracks; <br>    WORD    wDivision; <br>}   FILEHDR, <br>    *PFILEHDR; <br>#pragma pack() <br> <br>/* NOTE: This is arbitrary and only used if there is a tempo map but no <br>** entry at tick 0. <br>*/ <br>#define MIDI_DEFAULT_TEMPO      (500000L) <br> <br>#define MIDI_MSG                ((BYTE)0x80) <br>#define MIDI_NOTEOFF            ((BYTE)0x80) <br>#define MIDI_NOTEON             ((BYTE)0x90) <br>#define MIDI_POLYPRESSURE       ((BYTE)0xA0) <br>#define MIDI_CONTROLCHANGE      ((BYTE)0xB0) <br>#define MIDI_PROGRAMCHANGE      ((BYTE)0xC0) <br>#define MIDI_CHANPRESSURE       ((BYTE)0xD0) <br>#define MIDI_PITCHBEND          ((BYTE)0xE0) <br>#define MIDI_META               ((BYTE)0xFF) <br>#define MIDI_SYSEX              ((BYTE)0xF0) <br>#define MIDI_SYSEXEND           ((BYTE)0xF7) <br> <br>#define MIDI_META_TRACKNAME     ((BYTE)0x03) <br>#define MIDI_META_EOT           ((BYTE)0x2F) <br>#define MIDI_META_TEMPO         ((BYTE)0x51) <br>#define MIDI_META_TIMESIG       ((BYTE)0x58) <br>#define MIDI_META_KEYSIG        ((BYTE)0x59) <br>#define MIDI_META_SEQSPECIFIC   ((BYTE)0x7F) <br> <br>#endif </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ZYZTLB.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2569"></a>ZYZTLB.C</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED <br>//  TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR <br>//  A PARTICULAR PURPOSE. <br>// <br>//  Copyright 1993 - 1998 Microsoft Corporation. All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>//  zyztlb.c <br>// <br>//  Description: <br>// <br>// <br>//  History: <br>//       5/18/93 <br>// <br>//==========================================================================; <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;stdlib.h&gt; <br> <br>#include "appport.h" <br>#include "zyztlb.h" <br> <br>#include "debug.h" <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  int GetRealTextMetrics <br>//   <br>//  Description: <br>//      This function gets the textmetrics of the font currently selected <br>//      into the hdc.  It returns the average char width as the return value. <br>// <br>//      This function computes the average character width correctly by <br>//      using GetTextExtent() on the string "abc...xzyABC...XYZ" which works <br>//      out much better for proportional fonts. This is also necessary <br>//      for correct alignment between dialog and client units. <br>// <br>//      Note that this function returns the same TEXTMETRIC values that <br>//      GetTextMetrics() does, it simply has a different return value. <br>// <br>//  Arguments: <br>//      HDC hdc: <br>//   <br>//      LPTEXTMETRIC ptm: <br>//   <br>//  Return (int): <br>//   <br>//  History: <br>//      05/11/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>int FNGLOBAL GetRealTextMetrics <br>( <br>    HDC             hdc, <br>    LPTEXTMETRIC    ptm <br>) <br>{ <br>    TCHAR       achAlphabet[26 * 2];    // upper and lower case <br>    SIZE        sSize; <br>    UINT        u; <br>    int         nAveWidth; <br> <br>    // <br>    //  get the text metrics of the current font. note that GetTextMetrics <br>    //  gets the incorrect nAveCharWidth value for proportional fonts. <br>    // <br>    GetTextMetrics(hdc, ptm); <br>    nAveWidth = ptm-&gt;tmAveCharWidth; <br> <br>    // <br>    //  if it's not a variable pitch font GetTextMetrics was correct <br>    //  so just return. <br>    // <br>    if (ptm-&gt;tmPitchAndFamily &amp; FIXED_PITCH) <br>    { <br>// <br>// <br>// <br>for (u = 0; u &lt; 26; u++) <br>{ <br>    achAlphabet[u]      = (TCHAR)(u + (UINT)'a'); <br>    achAlphabet[u + 26] = (TCHAR)(u + (UINT)'A'); <br>} <br> <br>// <br>//  round up <br>// <br>GetTextExtentPoint(hdc, achAlphabet, SIZEOF(achAlphabet), &amp;sSize); <br>nAveWidth = ((sSize.cx / 26) + 1) / 2; <br>    } <br> <br>    // <br>    //  return the calculated average char width <br>    // <br>    return (nAveWidth); <br>} // GetRealTextMetrics() <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL TlbPaint <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PZYZTABBEDLISTBOX ptlb: <br>//   <br>//      HWND hwnd: <br>//   <br>//      HDC hdc: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/17/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNGLOBAL TlbPaint <br>( <br>    PZYZTABBEDLISTBOX   ptlb, <br>    HWND                hwnd, <br>    HDC                 hdc <br>) <br>{ <br>    RECT        rc; <br>    HFONT       hfont; <br>    COLORREF    crBk; <br>    COLORREF    crText; <br>    int         nHeight; <br> <br>    // <br>    // <br>    // <br>    hfont = GetWindowFont(ptlb-&gt;hlb); <br>    if (NULL == hfont) <br>hfont = GetStockFont(SYSTEM_FONT); <br> <br>    hfont = SelectObject(hdc, hfont); <br> <br>    crBk   = SetBkColor(hdc, GetSysColor(COLOR_ACTIVECAPTION)); <br>    crText = SetTextColor(hdc, GetSysColor(COLOR_CAPTIONTEXT)); <br> <br>    // <br>    //  compute bounding rect for title only <br>    // <br>    rc = ptlb-&gt;rc; <br>    nHeight = min(ptlb-&gt;nFontHeight, rc.bottom - rc.top); <br>    rc.bottom = rc.top + nHeight; <br> <br>    ExtTextOut(hdc, rc.left, rc.top, ETO_OPAQUE, &amp;rc, NULL, 0, NULL); <br>    TabbedTextOut(hdc, rc.left, rc.top, <br>  ptlb-&gt;pszTitleText, <br>  ptlb-&gt;cchTitleText, <br>  ptlb-&gt;uTabStops, <br>  ptlb-&gt;panTitleTabs, 0); <br> <br>    // <br>    //  restore the dc <br>    // <br>    SetBkColor(hdc, crBk); <br>    SetTextColor(hdc, crText); <br> <br>    SelectObject(hdc, hfont); <br> <br>    return (TRUE); <br>} // TlbPaint() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL TlbMove <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PZYZTABBEDLISTBOX ptlb: <br>//   <br>//      PRECT prc: <br>//   <br>//      BOOL fRedraw: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/16/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNGLOBAL TlbMove <br>( <br>    PZYZTABBEDLISTBOX   ptlb, <br>    PRECT               prc, <br>    BOOL                fRedraw <br>) <br>{ <br>    RECT        rc; <br>    int         nHeight; <br>    HWND        hwnd; <br> <br> <br>    hwnd = GetParent(ptlb-&gt;hlb); <br> <br>    // <br>    //  invalidate only the region occupied by the current title bar. this <br>    //  will make sure that area gets repainted. the listbox portion will <br>    //  be invalidated correctly by the SetWindowPos() function below.. <br>    // <br>    rc = ptlb-&gt;rc; <br> <br>    nHeight = min(ptlb-&gt;nFontHeight, rc.bottom - rc.top); <br>    rc.bottom = rc.top + nHeight; <br> <br>    InvalidateRect(hwnd, &amp;rc, TRUE); <br> <br> <br>    // <br>    //  now move the listbox--we modify values in the rect structure, so <br>    //  copy to local storage <br>    // <br>    rc = *prc; <br> <br>    // <br>    //  leave room at the top of the bounding rect for the title text <br>    // <br>    nHeight = min(ptlb-&gt;nFontHeight, rc.bottom - rc.top); <br>    rc.top += nHeight; <br> <br>    SetWindowPos(ptlb-&gt;hlb, NULL, rc.left, rc.top, rc.right - rc.left, <br> rc.bottom - rc.top, SWP_NOZORDER); <br> <br>    // <br>    //  save the new location and invalidate the area so it is repainted <br>    // <br>    ptlb-&gt;rc = *prc; <br>    InvalidateRect(hwnd, prc, TRUE); <br> <br>    if (fRedraw) <br>    { <br>UpdateWindow(hwnd); <br>    } <br> <br>    return (TRUE); <br>} // TlbMove() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL TlbRecalcTabs <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PZYZTABBEDLISTBOX ptlb: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/18/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL TlbRecalcTabs <br>( <br>    PZYZTABBEDLISTBOX   ptlb <br>) <br>{ <br>    static TCHAR szGonzoThing[] = TEXT("M"); <br> <br>    int         anTabsList[TLB_MAX_TAB_STOPS]; <br>    HDC         hdc; <br>    HFONT       hfont; <br>    TEXTMETRIC  tm; <br>    int         nAveCharWidth; <br> <br>    UINT        u; <br>    int         nWidth; <br>    int         nPrevTabTitle; <br>    int         nPrevTabList; <br>    SIZE        sSize; <br> <br> <br>    // <br>    // <br>    // <br>    hdc = GetDC(NULL); <br>    { <br>// <br>//  get the average char width and height of the current font so we <br>//  can compute tabs correctly. note that GetTextMetrics is pretty <br>//  bogus when it comes to the average char width--it normally gives <br>//  you the width of the character 'x'. what it should be is the <br>//  average width of all capitals and lower case letters.. <br>// <br>hfont = GetWindowFont(ptlb-&gt;hlb); <br>if (NULL == hfont) <br>    hfont = GetStockFont(SYSTEM_FONT); <br> <br>hfont = SelectObject(hdc, hfont); <br> <br>#if 0 <br>GetTextMetrics(hdc, &amp;tm); <br>nAveCharWidth = tm.tmAveCharWidth; <br>#else <br>nAveCharWidth = GetRealTextMetrics(hdc, &amp;tm); <br>#endif <br>ptlb-&gt;nFontHeight = tm.tmHeight; <br> <br> <br>// <br>// <br>// <br>GetTextExtentPoint(hdc, szGonzoThing, 1, &amp;sSize); <br> <br> <br>// <br>// <br>// <br>hfont = SelectObject(hdc, hfont); <br>    } <br>    ReleaseDC(NULL, hdc); <br> <br> <br>    // <br>    //  calculate the width of each column <br>    // <br>    nPrevTabTitle = 0; <br>    nPrevTabList  = 0; <br>    for (u = 0; u &lt; ptlb-&gt;uTabStops; u++) <br>    { <br>//      nWidth = nAveCharWidth * ptlb-&gt;panTabs[u] + nAveCharWidth * 2; <br>nWidth = sSize.cx * ptlb-&gt;panTabs[u] + (sSize.cx * 2); <br> <br>// <br>//  set tabstop for title text--this is in client units <br>//  for TabbedTextOut in TlbPaint <br>// <br>ptlb-&gt;panTitleTabs[u] = nPrevTabTitle + nWidth; <br>nPrevTabTitle = ptlb-&gt;panTitleTabs[u]; <br> <br>// <br>//  set tabstop for listbox--this is in dialog units <br>// <br>anTabsList[u] = nPrevTabList + MulDiv(nWidth, 4, nAveCharWidth); <br>nPrevTabList  = anTabsList[u]; <br>    } <br> <br> <br>    // <br>    //  now setup the tabstops in the listbox <br>    // <br>    ListBox_SetTabStops(ptlb-&gt;hlb, ptlb-&gt;uTabStops, anTabsList); <br> <br>    return (TRUE); <br>} // TlbRecalcTabs() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  HFONT TlbSetFont <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PZYZTABBEDLISTBOX ptlb: <br>//   <br>//      HFONT hfont: <br>//   <br>//      BOOL fRedraw: <br>//   <br>//  Return (HFONT): <br>//   <br>//  History: <br>//      05/16/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>HFONT FNGLOBAL TlbSetFont <br>( <br>    PZYZTABBEDLISTBOX   ptlb, <br>    HFONT               hfont, <br>    BOOL                fRedraw <br>) <br>{ <br>    HFONT       hfontOld; <br> <br>    // <br>    // <br>    // <br>    hfontOld = GetWindowFont(ptlb-&gt;hlb); <br>    SetWindowFont(ptlb-&gt;hlb, hfont, FALSE); <br> <br>    TlbRecalcTabs(ptlb); <br>    TlbMove(ptlb, &amp;ptlb-&gt;rc, fRedraw); <br> <br>    return (hfontOld); <br>} // TlbSetFont() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL TlbSetTitleAndTabs <br>//   <br>//  Description: <br>//      This function sets the title text and tab stops for a Tabbed List <br>//      Box (TLB). The pszTitleFormat specifies the title text for each <br>//      column along with the tabstop position for each column. The format <br>//      of this string is as follows: <br>// <br>//      &lt;columnname1&gt;\t&lt;tab1&gt;!&lt;columnname2&gt; <br>// <br>//      TCHAR   szTlbThings[] = TEXT("Index\t6!Code\t5!Name"); <br>// <br>// <br>//  Arguments: <br>//      PZYZTABBEDLISTBOX ptlb: <br>//   <br>//      PTSTR pszTitleFormat: <br>// <br>//      BOOL fRedraw: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/18/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNGLOBAL TlbSetTitleAndTabs <br>( <br>    PZYZTABBEDLISTBOX   ptlb, <br>    PTSTR               pszTitleFormat, <br>    BOOL                fRedraw <br>) <br>{ <br>    TCHAR       szTitleText[TLB_MAX_TITLE_CHARS]; <br>    int         anTabs[TLB_MAX_TAB_STOPS]; <br>    PTSTR       pch; <br>    PTSTR       pchTitleText; <br>    UINT        uTabStops; <br>    UINT        cchTitleText; <br>    HWND        hwnd; <br> <br>    // <br>    //  parse the title format counting tab stops and actual size of title <br>    //  text <br>    // <br>    uTabStops    = 0; <br>    pchTitleText = szTitleText; <br>    for (pch = pszTitleFormat; '\0' != *pch; ) <br>    { <br>TCHAR       ch; <br> <br>// <br>//  scan to tab <br>// <br>while ('\0' != (ch = *pch)) <br>{ <br>    *pchTitleText++ = *pch++; <br> <br>    if ('\t' == ch) <br>break; <br>} <br> <br>if ('\0' == ch) <br>    break; <br> <br>// <br>//  grab the next tab stop value <br>// <br>anTabs[uTabStops] = atoi(pch); <br>uTabStops++; <br> <br>// <br>//  skip to start of next column name <br>// <br>while ('!' != *pch++) <br>    ; <br>    } <br> <br> <br>    // <br>    //  terminate the converted title text <br>    // <br>    *pchTitleText = '\0'; <br>    cchTitleText = lstrlen(szTitleText); <br> <br>    // <br>    //  free the memory used for the previous tab stops and title text <br>    // <br>    if (NULL != ptlb-&gt;panTabs) <br>    { <br>LocalFree((HLOCAL)ptlb-&gt;panTabs); <br> <br>ptlb-&gt;uTabStops    = 0; <br>ptlb-&gt;panTabs      = NULL; <br>ptlb-&gt;panTitleTabs = NULL; <br>    } <br> <br>    if (NULL != ptlb-&gt;pszTitleText) <br>    { <br>LocalFree((HLOCAL)ptlb-&gt;pszTitleText); <br> <br>ptlb-&gt;cchTitleText = 0; <br>ptlb-&gt;pszTitleText = NULL; <br>    } <br> <br> <br>    // <br>    //  allocate new space for tab stops. there are two different tab <br>    //  arrays: <br>    // <br>    //      panTabs: original tab values as passed by caller. these are <br>    //      virtual tab locations represented as number of characters. we <br>    //      need to keep these values for recomputing the real tabs when <br>    //      the font changes. <br>    // <br>    //      panTitleTabs: these values are computed by TlbRecalcTabs and <br>    //      are actual tab positions in client coordinates for the title <br>    //      text (needed for TabbedTextOut in TlbPaint). <br>    // <br>    //  the tabs for the listbox are computed and set in TlbRecalcTabs <br>    // <br>    if (0 != uTabStops) <br>    { <br>ptlb-&gt;panTabs = (PINT)LocalAlloc(LPTR, (uTabStops * sizeof(int)) * 2); <br>if (NULL == ptlb-&gt;panTabs) <br>    return (FALSE); <br> <br>ptlb-&gt;uTabStops    = uTabStops; <br>ptlb-&gt;panTitleTabs = ptlb-&gt;panTabs + uTabStops; <br>memcpy(ptlb-&gt;panTabs, anTabs, uTabStops * sizeof(int)); <br>    } <br> <br> <br>    // <br>    //  allocate space for the converted title text (stripped of the tab <br>    //  spacing values). this string is passed directly to TabbedTextOut <br>    //  in TlbPaint. <br>    // <br>    if (0 != cchTitleText) <br>    { <br>ptlb-&gt;pszTitleText = (PTSTR)LocalAlloc(LPTR, (cchTitleText + 1) * sizeof(TCHAR)); <br>if (NULL == ptlb-&gt;pszTitleText) <br>    return (FALSE); <br> <br>ptlb-&gt;cchTitleText = cchTitleText; <br>lstrcpy(ptlb-&gt;pszTitleText, szTitleText); <br>    } <br> <br> <br> <br>    // <br>    // <br>    // <br>    TlbRecalcTabs(ptlb); <br> <br> <br>    // <br>    //  force a complete repaint of the title text and listbox--redraw <br>    //  immediately if we are supposed to <br>    // <br>    hwnd = GetParent(ptlb-&gt;hlb); <br>    InvalidateRect(hwnd, &amp;ptlb-&gt;rc, TRUE); <br>    if (fRedraw) <br>    { <br>UpdateWindow(hwnd); <br>    } <br>} // TlbSetTitleAndTabs() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  PZYZTABBEDLISTBOX TlbDestroy <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PZYZTABBEDLISTBOX ptlb: <br>//   <br>//  Return (PZYZTABBEDLISTBOX): <br>//   <br>//  History: <br>//      05/16/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>PZYZTABBEDLISTBOX FNGLOBAL TlbDestroy <br>( <br>    PZYZTABBEDLISTBOX   ptlb <br>) <br>{ <br>    HWND        hwnd; <br>    int         nHeight; <br> <br>    // <br>    //  get rid of the listbox <br>    // <br>    if (NULL != ptlb-&gt;hlb) <br>    { <br>DestroyWindow(ptlb-&gt;hlb); <br> <br>// <br>//  invalidate area where title text was so it will be clean <br>// <br>nHeight = min(ptlb-&gt;nFontHeight, ptlb-&gt;rc.bottom - ptlb-&gt;rc.top); <br>ptlb-&gt;rc.bottom = ptlb-&gt;rc.top + nHeight; <br> <br>hwnd = GetParent(ptlb-&gt;hlb); <br>InvalidateRect(hwnd, &amp;ptlb-&gt;rc, TRUE); <br> <br> <br>// <br>//  free the memory used for tab stops and title text <br>// <br>if (NULL != ptlb-&gt;panTabs) <br>    LocalFree((HLOCAL)ptlb-&gt;panTabs); <br> <br>if (NULL != ptlb-&gt;pszTitleText) <br>    LocalFree((HLOCAL)ptlb-&gt;pszTitleText); <br>    } <br> <br>    LocalFree((HLOCAL)ptlb); <br> <br>    return (NULL); <br>} // TlbDestroy() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  PZYZTABBEDLISTBOX TlbCreate <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      int nId: <br>//   <br>//      PRECT prc: <br>//   <br>//  Return (PZYZTABBEDLISTBOX): <br>//   <br>//  History: <br>//      05/16/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>PZYZTABBEDLISTBOX FNGLOBAL TlbCreate <br>( <br>    HWND                hwnd, <br>    int                 nId, <br>    PRECT               prc <br>) <br>{ <br>    #define TLB_DEF_STYLE   (WS_VISIBLE|WS_CHILD|WS_VSCROLL|WS_BORDER|  \ <br>     LBS_NOTIFY|LBS_NOINTEGRALHEIGHT|LBS_USETABSTOPS) <br> <br>    static TCHAR    szNull[]    = TEXT(""); <br>    static TCHAR    szListBox[] = TEXT("ListBox"); <br> <br>    PZYZTABBEDLISTBOX   ptlb; <br>    HINSTANCE           hinst; <br> <br> <br>    // <br>    //  create a new instance data structure.. <br>    // <br>    ptlb = (PZYZTABBEDLISTBOX)LocalAlloc(LPTR, sizeof(*ptlb)); <br>    if (NULL == ptlb) <br>return (NULL); <br> <br> <br>    // <br>    //  create the listbox <br>    // <br>    hinst = GetWindowInstance(hwnd); <br> <br>    ptlb-&gt;hlb = CreateWindow(szListBox, szNull, TLB_DEF_STYLE, <br>     0, 0, 0, 0, hwnd, (HMENU)nId, hinst, NULL); <br>    if (NULL == ptlb-&gt;hlb) <br>    { <br>TlbDestroy(ptlb); <br>return (NULL); <br>    } <br> <br>    TlbRecalcTabs(ptlb); <br> <br>    if (NULL != prc) <br>    { <br>ptlb-&gt;rc = *prc; <br>TlbMove(ptlb, prc, FALSE); <br>    } <br> <br>    return (ptlb); <br>} // TlbCreate() </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MIDSPIDS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2565"></a>MIDSPIDS.C</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED <br>//  TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR <br>//  A PARTICULAR PURPOSE. <br>// <br>//  Copyright 1993 - 1998 Microsoft Corporation. All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>//  midspids.c <br>// <br>// <br>//  Description: <br>// <br>//   !!! WARNING DANGER WARNING DANGER WARNING DANGER WARNING DANGER !!! <br>// <br>//      This code assumes that the receiving buffers are large enough <br>//      to contain the largest Mid and Pid--so if some of the strings get <br>//      obnoxiously long, make sure you update the following defines in <br>//      MMCAPS.H: <br>// <br>//          MMCAPS_MAX_STRING_MID_CHARS <br>//          MMCAPS_MAX_STRING_PID_CHARS <br>// <br>//      Also, this code is horribly disgusting. Its purpose is to convert <br>//      Manufacturer specific Product Id's to human readable text. And <br>//      since no standard was defined on how to allocate these Id's, <br>//      all kinds of inconsistent schemes emerged. <br>// <br>//      Therefore, I chose the brute force approach. You are more than <br>//      welcome to clean this up by finding patterns, etc for each <br>//      manufacturer--I have better things to do. <br>// <br>//   !!! WARNING DANGER WARNING DANGER WARNING DANGER WARNING DANGER !!! <br>// <br>//  History: <br>//       5/13/93 <br>// <br>//==========================================================================; <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;stdarg.h&gt; <br> <br>#include "appport.h" <br>#include "mmcaps.h" <br> <br>#include "debug.h" <br> <br> <br>//==========================================================================; <br>// <br>//  Manufacturer and Product Id Conversion Hacks <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_MICROSOFT <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_MICROSOFT <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]        = TEXT("Microsoft Corporation"); <br>    static PTSTR aszProductId[] = <br>    { <br>NULL,                                            // 0   <br>TEXT("MIDI Mapper"),                             // 1  MM_MIDI_MAPPER <br>TEXT("Wave Mapper"),                             // 2  MM_WAVE_MAPPER <br>TEXT("Sound Blaster MIDI output port"),          // 3  MM_SNDBLST_MIDIOUT <br>TEXT("Sound Blaster MIDI input port"),           // 4  MM_SNDBLST_MIDIIN <br>TEXT("Sound Blaster internal synthesizer"),      // 5  MM_SNDBLST_SYNTH <br>TEXT("Sound Blaster waveform output"),           // 6  MM_SNDBLST_WAVEOUT <br>TEXT("Sound Blaster waveform input"),            // 7  MM_SNDBLST_WAVEIN <br>NULL,                                            // 8 <br>TEXT("Ad Lib-compatible synthesizer"),           // 9  MM_ADLIB <br>TEXT("MPU401-compatible MIDI output port"),      // 10 MM_MPU401_MIDIOUT <br>TEXT("MPU401-compatible MIDI input port"),       // 11 MM_MPU401_MIDIIN <br>TEXT("Joystick adapter"),                        // 12 MM_PC_JOYSTICK <br>TEXT("PC Speaker waveform output"),              // 13 MM_PCSPEAKER_WAVEOUT <br>TEXT("MS Audio Board waveform input"),           // 14 MM_MSFT_WSS_WAVEIN <br>TEXT("MS Audio Board waveform output"),          // 15 MM_MSFT_WSS_WAVEOUT <br>TEXT("MS Audio Board Stereo FM synthesizer"),    // 16 MM_MSFT_WSS_FMSYNTH_STEREO <br>TEXT("MS Audio Board Mixer Driver"),             // 17 MM_MSFT_WSS_MIXER <br>TEXT("MS OEM Audio Board waveform input"),       // 18 MM_MSFT_WSS_OEM_WAVEIN <br>TEXT("MS OEM Audio Board waveform Output"),      // 19 MM_MSFT_WSS_OEM_WAVEOUT <br>TEXT("MS OEM Audio Board Stereo FM synthesizer"),// 20 MM_MSFT_WSS_OEM_FMSYNTH_STEREO <br>TEXT("MS Audio Board Auxiliary Port"),           // 21 MM_MSFT_WSS_AUX <br>TEXT("MS OEM Audio Auxiliary Port"),             // 22 MM_MSFT_WSS_OEM_AUX <br>TEXT("MS vanilla driver waveform input"),        // 23 MM_MSFT_GENERIC_WAVEIN <br>TEXT("MS vanilla driver waveform output"),       // 24 MM_MSFT_GENERIC_WAVEOUT <br>TEXT("MS vanilla driver MIDI input"),            // 25 MM_MSFT_GENERIC_MIDIIN <br>TEXT("MS vanilla driver external MIDI output"),  // 26 MM_MSFT_GENERIC_MIDIOUT <br>TEXT("MS vanilla driver MIDI synthesizer"),      // 27 MM_MSFT_GENERIC_MIDISYNTH <br>TEXT("MS vanilla driver aux (line in)"),         // 28 MM_MSFT_GENERIC_AUX_LINE <br>TEXT("MS vanilla driver aux (mic)"),             // 29 MM_MSFT_GENERIC_AUX_MIC <br>TEXT("MS vanilla driver aux (CD)"),              // 30 MM_MSFT_GENERIC_AUX_CD <br>TEXT("MS OEM Audio Board Mixer Driver"),         // 31 MM_MSFT_WSS_OEM_MIXER <br>    }; <br> <br>    #define PRODUCTID_MICROSOFT_LAST    MM_MSFT_WSS_OEM_MIXER <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    if ((uPid &lt;= PRODUCTID_MICROSOFT_LAST) &amp;&amp; (psz = aszProductId[uPid])) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    pszPid[0] = '\0'; <br>    return (FALSE); <br>} // MMCapsMidPid_MM_MICROSOFT() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_CREATIVE <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_CREATIVE <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Creative Labs Inc."); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_CREATIVE_SB15_WAVEIN: <br>    psz = TEXT("SB (r) 1.5 waveform input"); <br>    break; <br> <br>case MM_CREATIVE_SB20_WAVEIN: <br>    psz = TEXT("SB (r) 2.0 waveform input"); <br>    break; <br> <br>case MM_CREATIVE_SBPRO_WAVEIN: <br>    psz = TEXT("SB Pro (r) waveform input"); <br>    break; <br> <br>case MM_CREATIVE_SBP16_WAVEIN: <br>    psz = TEXT("SBP16 (r) waveform input"); <br>    break; <br> <br>case MM_CREATIVE_SB15_WAVEOUT: <br>    psz = TEXT("SB (r) 1.5 waveform output"); <br>    break; <br> <br>case MM_CREATIVE_SB20_WAVEOUT: <br>    psz = TEXT("SB (r) 2.0 waveform output"); <br>    break; <br> <br>case MM_CREATIVE_SBPRO_WAVEOUT: <br>    psz = TEXT("SB Pro (r) waveform output"); <br>    break; <br> <br>case MM_CREATIVE_SBP16_WAVEOUT: <br>    psz = TEXT("SBP16 (r) waveform output"); <br>    break; <br> <br>case MM_CREATIVE_MIDIOUT: <br>    psz = TEXT("SB (r) MIDI output port"); <br>    break; <br> <br>case MM_CREATIVE_MIDIIN: <br>    psz = TEXT("SB (r) MIDI input port"); <br>    break; <br> <br>case MM_CREATIVE_FMSYNTH_MONO: <br>    psz = TEXT("SB (r) FM synthesizer"); <br>    break; <br> <br>case MM_CREATIVE_FMSYNTH_STEREO: <br>    psz = TEXT("SB Pro (r) stereo FM synthesizer"); <br>    break; <br> <br>case MM_CREATIVE_AUX_CD: <br>    psz = TEXT("SB Pro (r) aux (CD)"); <br>    break; <br> <br>case MM_CREATIVE_AUX_LINE: <br>    psz = TEXT("SB Pro (r) aux (line in)"); <br>    break; <br> <br>case MM_CREATIVE_AUX_MIC: <br>    psz = TEXT("SB Pro (r) aux (mic)"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_CREATIVE() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_MEDIAVISION <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_MEDIAVISION <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Media Vision Inc."); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_PROAUD_MIDIOUT: <br>    psz = TEXT("MediaVision MIDI output port"); <br>    break; <br> <br>case MM_PROAUD_MIDIIN: <br>    psz = TEXT("MediaVision MIDI input port"); <br>    break; <br> <br>case MM_PROAUD_SYNTH: <br>    psz = TEXT("MediaVision synthesizer"); <br>    break; <br> <br>case MM_PROAUD_WAVEOUT: <br>    psz = TEXT("MediaVision Waveform output"); <br>    break; <br> <br>case MM_PROAUD_WAVEIN: <br>    psz = TEXT("MediaVision Waveform input"); <br>    break; <br> <br>case MM_PROAUD_MIXER: <br>    psz = TEXT("MediaVision Mixer"); <br>    break; <br> <br>case MM_PROAUD_AUX: <br>    psz = TEXT("MediaVision aux"); <br>    break; <br> <br>case MM_MEDIAVISION_THUNDER: <br>    psz = TEXT("Thunderboard Sound Card"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_MEDIAVISION() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_FUJITSU <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_FUJITSU <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Fujitsu"); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_FUJITSU() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_ARTISOFT <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_ARTISOFT <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Artisoft Inc."); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_ARTISOFT_SBWAVEIN: <br>    psz = TEXT("Artisoft Sounding Board waveform input"); <br>    break; <br> <br>case MM_ARTISOFT_SBWAVEOUT: <br>    psz = TEXT("Artisoft Sounding Board waveform output"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_ARTISOFT() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_TURTLE_BEACH <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_TURTLE_BEACH <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Turtle Beach"); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_TURTLE_BEACH() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_IBM <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_IBM <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("International Bussiness Machines Corp."); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_MMOTION_WAVEAUX: <br>    psz = TEXT("IBM M-Motion Auxiliary Device"); <br>    break; <br> <br>case MM_MMOTION_WAVEOUT: <br>    psz = TEXT("IBM M-Motion Waveform Output"); <br>    break; <br> <br>case MM_MMOTION_WAVEIN:  <br>    psz = TEXT("IBM M-Motion Waveform Input"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_IBM() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_VOCALTEC <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_VOCALTEC <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Vocaltec LTD."); <br> <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_VOCALTEC_WAVEOUT: <br>    psz = TEXT("Vocaltec Waveform output port"); <br>    break; <br> <br>case MM_VOCALTEC_WAVEIN: <br>    psz = TEXT("Waveform input port"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_VOCALTEC() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_ROLAND <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_ROLAND <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Roland"); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_ROLAND_MPU401_MIDIOUT: <br>    psz = TEXT("MM_ROLAND_MPU401_MIDIOUT"); <br>    break; <br> <br>case MM_ROLAND_MPU401_MIDIIN: <br>    psz = TEXT("MM_ROLAND_MPU401_MIDIIN"); <br>    break; <br> <br>case MM_ROLAND_SMPU_MIDIOUTA: <br>    psz = TEXT("MM_ROLAND_SMPU_MIDIOUTA"); <br>    break; <br> <br>case MM_ROLAND_SMPU_MIDIOUTB: <br>    psz = TEXT("MM_ROLAND_SMPU_MIDIOUTB"); <br>    break; <br> <br>case MM_ROLAND_SMPU_MIDIINA: <br>    psz = TEXT("MM_ROLAND_SMPU_MIDIINA"); <br>    break; <br> <br>case MM_ROLAND_SMPU_MIDIINB: <br>    psz = TEXT("MM_ROLAND_SMPU_MIDIINB"); <br>    break; <br> <br>case MM_ROLAND_SC7_MIDIOUT: <br>    psz = TEXT("MM_ROLAND_SC7_MIDIOUT"); <br>    break; <br> <br>case MM_ROLAND_SC7_MIDIIN: <br>    psz = TEXT("MM_ROLAND_SC7_MIDIIN"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_ROLAND() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_DIGISPEECH <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_DIGISPEECH <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Digispeech, Inc."); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>//case MM_DIGISP_WAVEOUT: <br>case MM_DSP_SOLUTIONS_WAVEOUT: <br>    psz = TEXT("Digispeech Waveform output port"); <br>    break; <br> <br>//case MM_DIGISP_WAVEIN: <br>case MM_DSP_SOLUTIONS_WAVEIN: <br>    psz = TEXT("Digispeech Waveform input port"); <br>    break; <br>case MM_DSP_SOLUTIONS_SYNTH: <br>case MM_DSP_SOLUTIONS_AUX: <br>    break; <br> <br>    #define  MM_DSP_SOLUTIONS_WAVEOUT       1 <br>#define  MM_DSP_SOLUTIONS_WAVEIN            2        <br>#define  MM_DSP_SOLUTIONS_SYNTH             3        <br>#define  MM_DSP_SOLUTIONS_AUX               4        <br> <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_DIGISPEECH() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_NEC <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_NEC <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("NEC"); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_NEC() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_ATI <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_ATI <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("ATI"); <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_ATI() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_WANGLABS <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_WANGLABS <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Wang Laboratories, Inc."); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_WANGLABS_WAVEIN1: <br>    psz = TEXT("Wave input on Wang models: Exec 4010, 4030 and 3450; PC 251/25C, PC 461/25S and PC 461/33C"); <br>    break; <br> <br>case MM_WANGLABS_WAVEOUT1: <br>    psz = TEXT("Wave output on Wang models: Exec 4010, 4030 and 3450; PC 251/25C, PC 461/25S and PC 461/33C"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_WANGLABS() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_TANDY <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_TANDY <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Tandy Corporation"); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_TANDY() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_VOYETRA <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_VOYETRA <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Voyetra"); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_VOYETRA() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_ANTEX <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_ANTEX <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Antex"); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_ANTEX() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_ICL_PS <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_ICL_PS <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("ICL PS"); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_ICL_PS() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_INTEL <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_INTEL <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Intel"); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_INTELOPD_WAVEIN: <br>    psz = TEXT("HID2 WaveAudio Input driver"); <br>    break; <br> <br>case MM_INTELOPD_WAVEOUT: <br>    psz = TEXT("HID2 WaveAudio Output driver"); <br>    break; <br> <br>case MM_INTELOPD_AUX: <br>    psz = TEXT("HID2 Auxiliary driver (required for mixing functions)"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_INTEL() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_GRAVIS <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_GRAVIS <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Gravis"); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_GRAVIS() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_VAL <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_VAL <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Video Associates Labs"); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_VAL() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_INTERACTIVE <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_INTERACTIVE <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("InterActive, Inc."); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_INTERACTIVE_WAVEIN: <br>    psz = TEXT("MM_INTERACTIVE_WAVEIN or WAVEOUT ??"); <br>    break; <br> <br>#if 0 <br>//  mmreg.h has in and out defined as same value... how quaint. <br>case MM_INTERACTIVE_WAVEOUT: <br>    psz = TEXT("MM_INTERACTIVE_WAVEOUT"); <br>    break; <br>#endif <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_INTERACTIVE() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_YAMAHA <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_YAMAHA <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid </code></pre>
<p>
</p>
<pre><code>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Yamaha Corp. of America"); <br> <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_YAMAHA_GSS_SYNTH: <br>    psz = TEXT("Yamaha Gold Sound Standard FM sythesis driver"); <br>    break; <br> <br>case MM_YAMAHA_GSS_WAVEOUT: <br>    psz = TEXT("Yamaha Gold Sound Standard wave output driver"); <br>    break; <br> <br>case MM_YAMAHA_GSS_WAVEIN: <br>    psz = TEXT("Yamaha Gold Sound Standard wave input driver"); <br>    break; <br> <br>case MM_YAMAHA_GSS_MIDIOUT: <br>    psz = TEXT("Yamaha Gold Sound Standard midi output driver"); <br>    break; <br> <br>case MM_YAMAHA_GSS_MIDIIN: <br>    psz = TEXT("Yamaha Gold Sound Standard midi input driver"); <br>    break; <br> <br>case MM_YAMAHA_GSS_AUX: <br>    psz = TEXT("Yamaha Gold Sound Standard auxillary driver for mixer functions"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_YAMAHA() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_EVEREX <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_EVEREX <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Everex Systems, Inc."); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_EVEREX_CARRIER: <br>    psz = TEXT("Everex Carrier SL/25 Notebook"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_EVEREX() <br> <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_ECHO <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Echo Speech Corporation"); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_ECHO_SYNTH: <br>    psz = TEXT("Echo EuSythesis driver"); <br>    break; <br> <br>case MM_ECHO_WAVEOUT: <br>    psz = TEXT("Wave output driver"); <br>    break; <br> <br>case MM_ECHO_WAVEIN: <br>    psz = TEXT("Wave input driver"); <br>    break; <br> <br>case MM_ECHO_MIDIOUT: <br>    psz = TEXT("MIDI output driver"); <br>    break; <br> <br>case MM_ECHO_MIDIIN: <br>    psz = TEXT("MIDI input driver"); <br>    break; <br> <br>case MM_ECHO_AUX: <br>    psz = TEXT("auxillary driver for mixer functions"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_SIERRA <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_SIERRA <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Sierra Semiconductor"); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_SIERRA_ARIA_MIDIOUT: <br>    psz = TEXT("Sierra Aria MIDI output"); <br>    break; <br> <br>case MM_SIERRA_ARIA_MIDIIN: <br>    psz = TEXT("Sierra Aria MIDI input"); <br>    break; <br> <br>case MM_SIERRA_ARIA_SYNTH: <br>    psz = TEXT("Sierra Aria Synthesizer"); <br>    break; <br> <br>case MM_SIERRA_ARIA_WAVEOUT: <br>    psz = TEXT("Sierra Aria Waveform output"); <br>    break; <br> <br>case MM_SIERRA_ARIA_WAVEIN: <br>    psz = TEXT("Sierra Aria Waveform input"); <br>    break; <br> <br>case MM_SIERRA_ARIA_AUX: <br>    psz = TEXT("Sierra Aria Auxiliary device"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_SIERRA() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_CAT <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_CAT <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Computer Aided Technologies"); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_CAT() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_APPS <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_APPS <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("APPS Software International"); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_APPS() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_DSP_GROUP <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_DSP_GROUP <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("DSP Group, Inc."); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_DSP_GROUP_TRUESPEECH: <br>    psz = TEXT("High quality 9.54:1 Speech Compression Vocoder"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_DSP_GROUP() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_MELABS <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_MELABS <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("microEngineering Labs"); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_MELABS_MIDI2GO: <br>    psz = TEXT("parallel port MIDI interface"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_MELABS() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_COMPUTER_FRIENDS <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_COMPUTER_FRIENDS <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Computer Friends, Inc"); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_COMPUTER_FRIENDS() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_ESS <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_ESS <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("ESS Technology"); <br> <br>    PTSTR       psz; <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br>    psz = NULL; <br>    switch (uPid) <br>    { <br>case MM_ESS_AMWAVEOUT: <br>    psz = TEXT("ESS Audio Magician Waveform Output Port"); <br>    break; <br> <br>case MM_ESS_AMWAVEIN: <br>    psz = TEXT("ESS Audio Magician Waveform Input Port"); <br>    break; <br> <br>case MM_ESS_AMAUX: <br>    psz = TEXT("ESS Audio Magician Auxiliary Port"); <br>    break; <br> <br>case MM_ESS_AMSYNTH: <br>    psz = TEXT("ESS Audio Magician Internal Music Synthesizer Port"); <br>    break; <br> <br>case MM_ESS_AMMIDIOUT: <br>    psz = TEXT("ESS Audio Magician MIDI Output Port"); <br>    break; <br> <br>case MM_ESS_AMMIDIIN: <br>    psz = TEXT("ESS Audio Magician MIDI Input Port"); <br>    break; <br>    } <br> <br>    if (NULL != psz) <br>    { <br>lstrcat(pszPid, psz); <br>return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_ESS() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_AUDIOFILE <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_AUDIOFILE <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Audio, Inc."); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_AUDIOFILE() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_MOTOROLA <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_MOTOROLA <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Motorola, Inc."); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_MOTOROLA() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidPid_MM_CANOPUS <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MMCapsMidPid_MM_CANOPUS <br>( <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR szMid[]    = TEXT("Canopus Co., Ltd."); <br> <br> <br>    if (NULL != pszMid) <br>lstrcpy(pszMid, szMid); <br> <br>    if (NULL == pszPid) <br>return (TRUE); <br> <br>    // <br>    // <br>    // <br> <br>    return (FALSE); <br>} // MMCapsMidPid_MM_CANOPUS() <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL MMCapsMidAndPid <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      UINT uMid: <br>//   <br>//      PTSTR pszMid: <br>//   <br>//      UINT uPid: <br>//   <br>//      PTSTR pszPid: <br>//   <br>//  Return (BOOL): <br>//   <br>//  History: <br>//      05/13/93 <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNGLOBAL MMCapsMidAndPid <br>( <br>    UINT            uMid, <br>    PTSTR           pszMid, <br>    UINT            uPid, <br>    PTSTR           pszPid <br>) <br>{ <br>    static TCHAR    szUnknown[]     = TEXT("Unknown"); <br>    static TCHAR    szFormatId[]    = TEXT("[%u], %s"); <br> <br>    TCHAR       achMid[MMCAPS_MAX_STRING_MID_CHARS]; <br>    TCHAR       achPid[MMCAPS_MAX_STRING_PID_CHARS]; <br>    BOOL        f; <br> <br>    switch (uMid) <br>    { <br>case MM_MICROSOFT: <br>    f = MMCapsMidPid_MM_MICROSOFT(achMid, uPid, achPid); <br>    break; <br> <br>case MM_CREATIVE: <br>    f = MMCapsMidPid_MM_CREATIVE(achMid, uPid, achPid); <br>    break; <br> <br>case MM_MEDIAVISION: <br>    f = MMCapsMidPid_MM_MEDIAVISION(achMid, uPid, achPid); <br>    break; <br> <br>case MM_FUJITSU: <br>    f = MMCapsMidPid_MM_FUJITSU(achMid, uPid, achPid); <br>    break; <br> <br>case MM_ARTISOFT: <br>    f = MMCapsMidPid_MM_ARTISOFT(achMid, uPid, achPid); <br>    break; <br> <br>case MM_TURTLE_BEACH: <br>    f = MMCapsMidPid_MM_TURTLE_BEACH(achMid, uPid, achPid); <br>    break; <br> <br>case MM_IBM: <br>    f = MMCapsMidPid_MM_IBM(achMid, uPid, achPid); <br>    break; <br> <br>case MM_VOCALTEC: <br>    f = MMCapsMidPid_MM_VOCALTEC(achMid, uPid, achPid); <br>    break; <br> <br>case MM_ROLAND: <br>    f = MMCapsMidPid_MM_ROLAND(achMid, uPid, achPid); <br>    break; <br> <br>//case MM_DIGISPEECH: <br>case MM_DSP_SOLUTIONS: <br>    f = MMCapsMidPid_MM_DIGISPEECH(achMid, uPid, achPid); <br>    break; <br> <br>case MM_NEC: <br>    f = MMCapsMidPid_MM_NEC(achMid, uPid, achPid); <br>    break; <br> <br>case MM_ATI: <br>    f = MMCapsMidPid_MM_ATI(achMid, uPid, achPid); <br>    break; <br> <br>case MM_WANGLABS: <br>    f = MMCapsMidPid_MM_WANGLABS(achMid, uPid, achPid); <br>    break; <br> <br>case MM_TANDY: <br>    f = MMCapsMidPid_MM_TANDY(achMid, uPid, achPid); <br>    break; <br> <br>case MM_VOYETRA: <br>    f = MMCapsMidPid_MM_VOYETRA(achMid, uPid, achPid); <br>    break; <br> <br>case MM_ANTEX: <br>    f = MMCapsMidPid_MM_ANTEX(achMid, uPid, achPid); <br>    break; <br> <br>case MM_ICL_PS: <br>    f = MMCapsMidPid_MM_ICL_PS(achMid, uPid, achPid); <br>    break; <br> <br>case MM_INTEL: <br>    f = MMCapsMidPid_MM_INTEL(achMid, uPid, achPid); <br>    break; <br> <br>case MM_GRAVIS: <br>    f = MMCapsMidPid_MM_GRAVIS(achMid, uPid, achPid); <br>    break; <br> <br>case MM_VAL: <br>    f = MMCapsMidPid_MM_VAL(achMid, uPid, achPid); <br>    break; <br> <br>case MM_INTERACTIVE: <br>    f = MMCapsMidPid_MM_INTERACTIVE(achMid, uPid, achPid); <br>    break; <br> <br>case MM_YAMAHA: <br>    f = MMCapsMidPid_MM_YAMAHA(achMid, uPid, achPid); <br>    break; <br> <br>case MM_EVEREX: <br>    f = MMCapsMidPid_MM_EVEREX(achMid, uPid, achPid); <br>    break; <br> <br>case MM_ECHO: <br>    f = MMCapsMidPid_MM_ECHO(achMid, uPid, achPid); <br>    break; <br> <br>case MM_SIERRA: <br>    f = MMCapsMidPid_MM_SIERRA(achMid, uPid, achPid); <br>    break; <br> <br>case MM_CAT: <br>    f = MMCapsMidPid_MM_CAT(achMid, uPid, achPid); <br>    break; <br> <br>case MM_APPS: <br>    f = MMCapsMidPid_MM_APPS(achMid, uPid, achPid); <br>    break; <br> <br>case MM_DSP_GROUP: <br>    f = MMCapsMidPid_MM_DSP_GROUP(achMid, uPid, achPid); <br>    break; <br> <br>case MM_MELABS: <br>    f = MMCapsMidPid_MM_MELABS(achMid, uPid, achPid); <br>    break; <br> <br>case MM_COMPUTER_FRIENDS: <br>    f = MMCapsMidPid_MM_COMPUTER_FRIENDS(achMid, uPid, achPid); <br>    break; <br> <br>case MM_ESS: <br>    f = MMCapsMidPid_MM_ESS(achMid, uPid, achPid); <br>    break; <br> <br>case MM_AUDIOFILE: <br>    f = MMCapsMidPid_MM_AUDIOFILE(achMid, uPid, achPid); <br>    break; <br> <br>case MM_MOTOROLA: <br>    f = MMCapsMidPid_MM_MOTOROLA(achMid, uPid, achPid); <br>    break; <br> <br>case MM_CANOPUS: <br>    f = MMCapsMidPid_MM_CANOPUS(achMid, uPid, achPid); <br>    break; <br> <br>default: <br>    lstrcpy(achMid, szUnknown); <br>    break; <br>    } <br> <br>    // <br>    // <br>    // <br>    if (NULL != pszMid) <br>    { <br>wsprintf(pszMid, szFormatId, uMid, (LPTSTR)achMid); <br>    } <br> <br>    if (NULL != pszPid) <br>    { <br>if (f) <br>    wsprintf(pszPid, szFormatId, uPid, (LPTSTR)achPid); <br>else <br>    wsprintf(pszPid, szFormatId, uPid, (LPTSTR)szUnknown); <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    return (f); <br>} // MMCapsMidAndPid() </code></pre>
<p>&nbsp;</p></body>
</HTML>

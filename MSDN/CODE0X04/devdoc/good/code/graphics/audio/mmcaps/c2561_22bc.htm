<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>APPPORT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2568"></a>APPPORT.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED <br>//  TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR <br>//  A PARTICULAR PURPOSE. <br>// <br>//  Copyright 1993 - 1998 Microsoft Corporation. All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>//  appport.h -- Win 16/32 Portability Stuff <br>// <br>//  Description: <br>//      This file contains common macros to help with writing code that <br>//      cross compiles between Win 32 and Win 16. This file should be <br>//      included _after_ windows.h and windowsx.h. <br>// <br>//  History: <br>//      11/ 8/92    created. <br>// <br>//==========================================================================; <br> <br>//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ; <br>// <br>//  Win 32 <br>// <br>// <br>// <br>//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ; <br> <br>#ifdef WIN32 <br>    #ifndef FNLOCAL <br>#define FNLOCAL     _stdcall <br>#define FNCLOCAL    _stdcall <br>#define FNGLOBAL    _stdcall <br>#define FNCGLOBAL   _stdcall <br>#define FNCALLBACK  CALLBACK <br>#define FNEXPORT    CALLBACK <br>    #endif <br> <br>    #ifndef PCTSTR <br>typedef const PTSTR     PCTSTR; <br>    #endif <br> <br>    // <br>    // <br>    // <br>    #define Edit_GetSelEx(hwndCtl, pnS, pnE)    \ <br>((DWORD)SendMessage((hwndCtl), EM_GETSEL, (WPARAM)pnS, (LPARAM)pnE)) <br> <br>    // <br>    //  for compiling Unicode <br>    // <br>    #ifdef UNICODE <br>#define SIZEOF(x)   (sizeof(x)/sizeof(WCHAR)) <br>    #else <br>#define SIZEOF(x)   sizeof(x) <br>    #endif <br> <br>    // <br>    //  win32 apps [usually] don't have to worry about 'huge' data <br>    // <br>    #if !defined hmemcpy <br>#define hmemcpy memcpy <br>    #endif <br>#endif // #ifdef WIN32 <br> <br> <br>//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ; <br>// <br>//  Win 16 <br>// <br>// <br>// <br>//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ; <br> <br>#ifndef WIN32 <br>    #ifndef FNLOCAL <br>#define FNLOCAL     NEAR PASCAL <br>#define FNCLOCAL    NEAR _cdecl <br>#define FNGLOBAL    FAR PASCAL <br>#define FNCGLOBAL   FAR _cdecl <br>#define FNCALLBACK  CALLBACK <br>#define FNEXPORT    CALLBACK _export <br>    #endif <br> <br>    // <br>    //  stuff for Unicode in Win 32--make it a noop in Win 16 <br>    // <br>    #ifndef _TCHAR_DEFINED <br>#define _TCHAR_DEFINED <br>typedef char            TCHAR, *PTCHAR; <br>typedef unsigned char   TBYTE, *PTUCHAR; <br> <br>typedef PSTR            PTSTR, PTCH; <br>typedef const PTSTR     PCTSTR; <br>typedef LPSTR           LPTSTR, LPTCH; <br>typedef LPCSTR          LPCTSTR; <br>    #endif <br> <br>    #define TEXT(a)         a <br>    #define SIZEOF(x)       sizeof(x) <br> <br>    // <br>    // <br>    // <br>    #define CharNext        AnsiNext <br>    #define CharPrev        AnsiPrev <br> <br>    // <br>    // <br>    // <br>    #define Edit_GetSelEx(hwndCtl, pnS, pnE)                        \ <br>    {                                                               \ <br>DWORD   dw;                                                 \ <br>dw = (DWORD)SendMessage((hwndCtl), EM_GETSEL, 0, 0L);       \ <br>*pnE = (int)HIWORD(dw);                                     \ <br>*pnS = (int)LOWORD(dw);                                     \ <br>    } <br> <br>    // <br>    //  common message cracker macros available in windowx.h on NT--these <br>    //  should be added to the Win 16 windowsx.h and probably will be <br>    //  in the future. <br>    // <br>    //  there is a windowsx.h16 that ships with the NT PDK that defines <br>    //  these macros. so if that version is being used, don't redefine <br>    //  message crackers. <br>    // <br> <br>#ifndef WM_CTLCOLORMSGBOX <br>    #define WM_CTLCOLORMSGBOX           0x0132 <br>    #define WM_CTLCOLOREDIT             0x0133 <br>    #define WM_CTLCOLORLISTBOX          0x0134 <br>    #define WM_CTLCOLORBTN              0x0135 <br>    #define WM_CTLCOLORDLG              0x0136 <br>    #define WM_CTLCOLORSCROLLBAR        0x0137 <br>    #define WM_CTLCOLORSTATIC           0x0138 <br>#endif <br> <br>#ifndef GET_WM_ACTIVATE_STATE <br>    #define GET_WM_ACTIVATE_STATE(wp, lp)           (wp) <br>    #define GET_WM_ACTIVATE_FMINIMIZED(wp, lp)      (BOOL)HIWORD(lp) <br>    #define GET_WM_ACTIVATE_HWND(wp, lp)            (HWND)LOWORD(lp) <br>    #define GET_WM_ACTIVATE_MPS(s, fmin, hwnd)      (WPARAM)(s), MAKELONG(hwnd, fmin) <br> <br>    #define GET_WM_CHARTOITEM_CHAR(wp, lp)          (CHAR)(wp) <br>    #define GET_WM_CHARTOITEM_POS(wp, lp)           HIWORD(lp) <br>    #define GET_WM_CHARTOITEM_HWND(wp, lp)          (HWND)LOWORD(lp) <br>    #define GET_WM_CHARTOITEM_MPS(ch, pos, hwnd)    (WPARAM)(ch), MAKELONG(hwnd, pos) <br> <br>    #define GET_WM_COMMAND_ID(wp, lp)               (wp) <br>    #define GET_WM_COMMAND_HWND(wp, lp)             (HWND)LOWORD(lp) <br>    #define GET_WM_COMMAND_CMD(wp, lp)              HIWORD(lp) <br>    #define GET_WM_COMMAND_MPS(id, hwnd, cmd)       (WPARAM)(id), MAKELONG(hwnd, cmd) <br> <br>    #define GET_WM_CTLCOLOR_HDC(wp, lp, msg)        (HDC)(wp) <br>    #define GET_WM_CTLCOLOR_HWND(wp, lp, msg)       (HWND)LOWORD(lp) <br>    #define GET_WM_CTLCOLOR_TYPE(wp, lp, msg)       HIWORD(lp) <br>    #define GET_WM_CTLCOLOR_MPS(hdc, hwnd, type)    (WPARAM)(hdc), MAKELONG(hwnd, type) <br> <br>    #define GET_WM_MENUSELECT_CMD(wp, lp)           (wp) <br>    #define GET_WM_MENUSELECT_FLAGS(wp, lp)         LOWORD(lp) <br>    #define GET_WM_MENUSELECT_HMENU(wp, lp)         (HMENU)HIWORD(lp) <br>    #define GET_WM_MENUSELECT_MPS(cmd, f, hmenu)    (WPARAM)(cmd), MAKELONG(f, hmenu) <br> <br>    // Note: the following are for interpreting MDIclient to MDI child messages. <br>    #define GET_WM_MDIACTIVATE_FACTIVATE(hwnd, wp, lp)  (BOOL)(wp) <br>    #define GET_WM_MDIACTIVATE_HWNDDEACT(wp, lp)        (HWND)HIWORD(lp) <br>    #define GET_WM_MDIACTIVATE_HWNDACTIVATE(wp, lp)     (HWND)LOWORD(lp) <br> <br>    // Note: the following is for sending to the MDI client window. <br>    #define GET_WM_MDIACTIVATE_MPS(f, hwndD, hwndA) (WPARAM)(hwndA), 0 <br> <br>    #define GET_WM_MDISETMENU_MPS(hmenuF, hmenuW)   0, MAKELONG(hmenuF, hmenuW) <br> <br>    #define GET_WM_MENUCHAR_CHAR(wp, lp)            (CHAR)(wp) <br>    #define GET_WM_MENUCHAR_HMENU(wp, lp)           (HMENU)LOWORD(lp) <br>    #define GET_WM_MENUCHAR_FMENU(wp, lp)           (BOOL)HIWORD(lp) <br>    #define GET_WM_MENUCHAR_MPS(ch, hmenu, f)       (WPARAM)(ch), MAKELONG(hmenu, f) <br> <br>    #define GET_WM_PARENTNOTIFY_MSG(wp, lp)         (wp) <br>    #define GET_WM_PARENTNOTIFY_ID(wp, lp)          HIWORD(lp) <br>    #define GET_WM_PARENTNOTIFY_HWNDCHILD(wp, lp)   (HWND)LOWORD(lp) <br>    #define GET_WM_PARENTNOTIFY_X(wp, lp)           (INT)LOWORD(lp) <br>    #define GET_WM_PARENTNOTIFY_Y(wp, lp)           (INT)HIWORD(lp) <br>    #define GET_WM_PARENTNOTIFY_MPS(msg, id, hwnd)  (WPARAM)(msg), MAKELONG(hwnd, id) <br>    #define GET_WM_PARENTNOTIFY2_MPS(msg, x, y)     (WPARAM)(msg), MAKELONG(x, y) <br> <br>    #define GET_WM_VKEYTOITEM_CODE(wp, lp)          (wp) <br>    #define GET_WM_VKEYTOITEM_ITEM(wp, lp)          (INT)HIWORD(lp) <br>    #define GET_WM_VKEYTOITEM_HWND(wp, lp)          (HWND)LOWORD(lp) <br>    #define GET_WM_VKEYTOITEM_MPS(code, item, hwnd) (WPARAM)(code), MAKELONG(hwnd, item) <br> <br>    #define GET_EM_SETSEL_START(wp, lp)             LOWORD(lp) <br>    #define GET_EM_SETSEL_END(wp, lp)               HIWORD(lp) <br>    #define GET_EM_SETSEL_MPS(iStart, iEnd)         0, MAKELONG(iStart, iEnd) <br> <br>    #define GET_EM_LINESCROLL_MPS(vert, horz)       0, MAKELONG(vert, horz) <br> <br>    #define GET_WM_CHANGECBCHAIN_HWNDNEXT(wp, lp)   (HWND)LOWORD(lp) <br> <br>    #define GET_WM_HSCROLL_CODE(wp, lp)             (wp) <br>    #define GET_WM_HSCROLL_POS(wp, lp)              LOWORD(lp) <br>    #define GET_WM_HSCROLL_HWND(wp, lp)             (HWND)HIWORD(lp) <br>    #define GET_WM_HSCROLL_MPS(code, pos, hwnd)     (WPARAM)(code), MAKELONG(pos, hwnd) <br> <br>    #define GET_WM_VSCROLL_CODE(wp, lp)             (wp) <br>    #define GET_WM_VSCROLL_POS(wp, lp)              LOWORD(lp) <br>    #define GET_WM_VSCROLL_HWND(wp, lp)             (HWND)HIWORD(lp) <br>    #define GET_WM_VSCROLL_MPS(code, pos, hwnd)     (WPARAM)(code), MAKELONG(pos, hwnd) <br>#endif <br> <br>#endif // #ifndef WIN32 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AASYSINF.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2458"></a>AASYSINF.C</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br>//--------------------------------------------------------------------------; <br>// <br>//  aasysinf.c <br>// <br>//  Description: <br>//      Respond to the View/System Information menu item - display info on <br>//      the user's system and the ACM. <br>// <br>// <br>//==========================================================================; <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;memory.h&gt; <br> <br>#include &lt;mmreg.h&gt; <br>#include &lt;msacm.h&gt; <br> <br>#include "appport.h" <br>#include "acmapp.h" <br> <br>#include "debug.h" <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppDisplaySystemInfo <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hedit: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppDisplaySystemInfo <br>( <br>    HWND            hedit <br>) <br>{ <br>    static TCHAR    szDisplayTitle[]  = TEXT("[System Information]\r\n"); <br> <br>    DWORD       dw; <br> <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, szDisplayTitle); <br> <br>    // <br>    // <br>    // <br>    dw = GetVersion(); <br>    MEditPrintF(hedit, TEXT("%23s: %u.%.02u"), <br>#ifdef WIN32 <br>                    (LPTSTR)TEXT("WinMM Version"), <br>#else <br>                    (LPTSTR)TEXT("MMSystem Version"), <br>#endif <br>                    HIWORD(dw), LOWORD(dw)); <br> <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, TEXT("~%23s: "), (LPTSTR)TEXT("ACM Version")); <br>    dw = acmGetVersion(); <br>    if (0L == dw) <br>    { <br>        MEditPrintF(hedit, TEXT("Not Installed")); <br>        return (TRUE); <br>    } <br> <br>    // <br>    //  if the 'build' number is zero, it is a _retail_ version of the <br>    //  ACM that is installed. if it is non-zero, it is the debug version. <br>    // <br>    if (0 == LOWORD(dw)) <br>    { <br>        MEditPrintF(hedit, TEXT("%u.%.02u (retail)"), <br>                        HIWORD(dw) &gt;&gt; 8, HIWORD(dw) &amp; 0x00FF); <br>    } <br>    else <br>    { <br>        MEditPrintF(hedit, TEXT("%u.%.02u (debug build %u)"), <br>                        HIWORD(dw) &gt;&gt; 8, HIWORD(dw) &amp; 0x00FF, LOWORD(dw)); <br>    } <br> <br>    // <br>    // <br>    // <br>    acmMetrics(NULL, ACM_METRIC_COUNT_DRIVERS, &amp;dw); <br>    MEditPrintF(hedit, TEXT("\r\n%23s: %lu"), (LPTSTR)TEXT("Enabled Drivers"), dw); <br>     <br>    acmMetrics(NULL, ACM_METRIC_COUNT_DISABLED, &amp;dw); <br>    MEditPrintF(hedit, TEXT("%23s: %lu"), (LPTSTR)TEXT("Disabled Drivers"), dw); <br> <br>    acmMetrics(NULL, ACM_METRIC_COUNT_CODECS, &amp;dw); <br>    MEditPrintF(hedit, TEXT("%23s: %lu"), (LPTSTR)TEXT("Total CODEC's"), dw); <br> <br>    acmMetrics(NULL, ACM_METRIC_COUNT_CONVERTERS, &amp;dw); <br>    MEditPrintF(hedit, TEXT("%23s: %lu"), (LPTSTR)TEXT("Total Converters"), dw); <br> <br>    acmMetrics(NULL, ACM_METRIC_COUNT_FILTERS, &amp;dw); <br>    MEditPrintF(hedit, TEXT("%23s: %lu"), (LPTSTR)TEXT("Total Filters"), dw); <br> <br>    acmMetrics(NULL, ACM_METRIC_COUNT_HARDWARE, &amp;dw); <br>    MEditPrintF(hedit, TEXT("%23s: %lu"), (LPTSTR)TEXT("Hardware Drivers"), dw); <br> <br> <br>    acmMetrics(NULL, ACM_METRIC_COUNT_LOCAL_DRIVERS, &amp;dw); <br>    MEditPrintF(hedit, TEXT("\r\n%23s: %lu"), (LPTSTR)TEXT("Enabled Local Drivers"), dw); <br>     <br>    acmMetrics(NULL, ACM_METRIC_COUNT_LOCAL_DISABLED, &amp;dw); <br>    MEditPrintF(hedit, TEXT("%23s: %lu"), (LPTSTR)TEXT("Disabled Local Drivers"), dw); <br> <br>    acmMetrics(NULL, ACM_METRIC_COUNT_LOCAL_CODECS, &amp;dw); <br>    MEditPrintF(hedit, TEXT("%23s: %lu"), (LPTSTR)TEXT("Total Local CODEC's"), dw); <br> <br>    acmMetrics(NULL, ACM_METRIC_COUNT_LOCAL_CONVERTERS, &amp;dw); <br>    MEditPrintF(hedit, TEXT("%23s: %lu"), (LPTSTR)TEXT("Total Local Converters"), dw); <br> <br>    acmMetrics(NULL, ACM_METRIC_COUNT_LOCAL_FILTERS, &amp;dw); <br>    MEditPrintF(hedit, TEXT("%23s: %lu"), (LPTSTR)TEXT("Total Local Filters"), dw); <br> <br> <br>    acmMetrics(NULL, ACM_METRIC_MAX_SIZE_FORMAT, &amp;dw); <br>    MEditPrintF(hedit, TEXT("\r\n%23s: %lu"), (LPTSTR)TEXT("Max Format Bytes"), dw); <br> <br>    acmMetrics(NULL, ACM_METRIC_MAX_SIZE_FILTER, &amp;dw); <br>    MEditPrintF(hedit, TEXT("%23s: %lu"), (LPTSTR)TEXT("Max Filter Bytes"), dw); <br> <br>    return (TRUE); <br>} // AcmAppDisplaySystemInfo() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppSystemInfoDlgProc <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      UINT uMsg: <br>//   <br>//      WPARAM wParam: <br>//   <br>//      LPARAM lParam: <br>//   <br>//  Return (BOOL): <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppSystemInfoDlgProc <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    HWND                hedit; <br>    UINT                uId; <br> <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            hedit = GetDlgItem(hwnd, IDD_AADETAILS_EDIT_DETAILS); <br>            SetWindowFont(hedit, ghfontApp, FALSE); <br> <br>            // <br>            //  clear the display <br>            // <br>            AppHourGlass(TRUE); <br>            SetWindowRedraw(hedit, FALSE); <br>            MEditPrintF(hedit, NULL); <br> <br>            AcmAppDisplaySystemInfo(hedit); <br> <br>            Edit_SetSel(hedit, (WPARAM)0, (LPARAM)0); <br> <br>            SetWindowRedraw(hedit, TRUE); <br>            AppHourGlass(FALSE); <br>            return (TRUE); <br> <br>        case WM_COMMAND: <br>            uId = GET_WM_COMMAND_ID(wParam, lParam); <br>            if ((IDOK == uId) || (IDCANCEL == uId)) <br>            { <br>                EndDialog(hwnd, (IDOK == uId)); <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // AcmAppSystemInfoDlgProc() </code></pre>
<p>&nbsp;</p></body>
</HTML>

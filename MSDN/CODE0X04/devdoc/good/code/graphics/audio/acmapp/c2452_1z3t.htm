<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AAWAVDEV.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2459"></a>AAWAVDEV.C</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>//  aawavdev.c <br>// <br>//  Description: <br>//      Get and display information on the wave devices installed in the <br>//      system. <br>// <br>// <br>//==========================================================================; <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;memory.h&gt; <br> <br>#include &lt;mmreg.h&gt; <br>#include &lt;msacm.h&gt; <br> <br>#include "appport.h" <br>#include "acmapp.h" <br> <br>#include "debug.h" <br> <br> <br>// <br>//  WAVE[IN|OUT]CAPS <br>// <br>// <br>// <br>PTSTR gaszWaveInOutCapsFormats[32] = <br>{ <br>    TEXT("8M11"),           // Bit 0    WAVE_FORMAT_1M08 <br>    TEXT("8S11"),           // Bit 1    WAVE_FORMAT_1S08 <br>    TEXT("16M11"),          // Bit 2    WAVE_FORMAT_1M16 <br>    TEXT("16S11"),          // Bit 3    WAVE_FORMAT_1S16 <br>    TEXT("8M22"),           // Bit 4    WAVE_FORMAT_2M08 <br>    TEXT("8S22"),           // Bit 5    WAVE_FORMAT_2S08 <br>    TEXT("16M22"),          // Bit 6    WAVE_FORMAT_2M16 <br>    TEXT("16S22"),          // Bit 7    WAVE_FORMAT_2S16 <br>    TEXT("8M44"),           // Bit 8    WAVE_FORMAT_4M08 <br>    TEXT("8S44"),           // Bit 9    WAVE_FORMAT_4S08 <br>    TEXT("16M44"),          // Bit 10   WAVE_FORMAT_4M16 <br>    TEXT("16S44"),          // Bit 11   WAVE_FORMAT_4S16 <br>    NULL,                   // Bit 12 <br>    NULL,                   // Bit 13 <br>    NULL,                   // Bit 14 <br>    NULL,                   // Bit 15 <br>    NULL,                   // Bit 16 <br>    NULL,                   // Bit 17 <br>    NULL,                   // Bit 18 <br>    NULL,                   // Bit 19 <br>    NULL,                   // Bit 20 <br>    NULL,                   // Bit 21 <br>    NULL,                   // Bit 22 <br>    NULL,                   // Bit 23 <br>    NULL,                   // Bit 24 <br>    NULL,                   // Bit 25 <br>    NULL,                   // Bit 26 <br>    NULL,                   // Bit 27 <br>    NULL,                   // Bit 28 <br>    NULL,                   // Bit 29 <br>    NULL,                   // Bit 30 <br>    NULL                    // Bit 31 <br>}; <br> <br>PTSTR gaszWaveOutCapsSupport[32] = <br>{ <br>    TEXT("Pitch"),          // Bit 0    WAVECAPS_PITCH <br>    TEXT("Playback Rate"),  // Bit 1    WAVECAPS_PLAYBACKRATE <br>    TEXT("Volume"),         // Bit 2    WAVECAPS_VOLUME <br>    TEXT("L/R Volume"),     // Bit 3    WAVECAPS_LRVOLUME <br>    TEXT("Sync"),           // Bit 4    WAVECAPS_SYNC <br>    NULL,                   // Bit 5 <br>    NULL,                   // Bit 6 <br>    NULL,                   // Bit 7 <br>    NULL,                   // Bit 8 <br>    NULL,                   // Bit 9 <br>    NULL,                   // Bit 10 <br>    NULL,                   // Bit 11 <br>    NULL,                   // Bit 12 <br>    NULL,                   // Bit 13 <br>    NULL,                   // Bit 14 <br>    NULL,                   // Bit 15 <br>    NULL,                   // Bit 16 <br>    NULL,                   // Bit 17 <br>    NULL,                   // Bit 18 <br>    NULL,                   // Bit 19 <br>    NULL,                   // Bit 20 <br>    NULL,                   // Bit 21 <br>    NULL,                   // Bit 22 <br>    NULL,                   // Bit 23 <br>    NULL,                   // Bit 24 <br>    NULL,                   // Bit 25 <br>    NULL,                   // Bit 26 <br>    NULL,                   // Bit 27 <br>    NULL,                   // Bit 28 <br>    NULL,                   // Bit 29 <br>    NULL,                   // Bit 30 <br>    NULL                    // Bit 31 <br>}; <br> <br> <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  MMRESULT AcmAppWaveInGetDevCaps <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      UINT uDevId: <br>//   <br>//      LPWAVEINCAPS pwic: <br>//   <br>//  Return (MMRESULT): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>MMRESULT FNLOCAL AcmAppWaveInGetDevCaps <br>( <br>    UINT                    uDevId, <br>    LPWAVEINCAPS            pwic <br>) <br>{ <br>    MMRESULT            mmr; <br> <br>    // <br>    // <br>    // <br>    mmr = waveInGetDevCaps(uDevId, pwic, sizeof(*pwic)); <br>    if (MMSYSERR_NOERROR == mmr) <br>    { <br>        // <br>        //  because some people shipped drivers without testing. <br>        // <br>        pwic-&gt;szPname[SIZEOF(pwic-&gt;szPname) - 1] = '\0'; <br>    } <br>    else <br>    { <br>        _fmemset(pwic, 0, sizeof(*pwic)); <br> <br>        if (MMSYSERR_BADDEVICEID == mmr) <br>        { <br>            return (mmr); <br>        } <br> <br>        if (WAVE_MAPPER == uDevId) <br>        { <br>            lstrcpy(pwic-&gt;szPname, TEXT("Default Wave Input Mapper")); <br>        } <br>        else <br>        { <br>            wsprintf(pwic-&gt;szPname, TEXT("Bad Wave Input Device %u"), uDevId); <br>        } <br>    } <br> <br>    return (MMSYSERR_NOERROR); <br>} // AcmAppWaveInGetDevCaps() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  MMRESULT AcmAppWaveOutGetDevCaps <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      UINT uDevId: <br>//   <br>//      LPWAVEOUTCAPS pwoc: <br>//   <br>//  Return (MMRESULT): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>MMRESULT FNLOCAL AcmAppWaveOutGetDevCaps <br>( <br>    UINT                    uDevId, <br>    LPWAVEOUTCAPS           pwoc <br>) <br>{ <br>    MMRESULT            mmr; <br> <br>    // <br>    // <br>    // <br>    mmr = waveOutGetDevCaps(uDevId, pwoc, sizeof(*pwoc)); <br>    if (MMSYSERR_NOERROR == mmr) <br>    { <br>        // <br>        //  because some people shipped drivers without testing. <br>        // <br>        pwoc-&gt;szPname[SIZEOF(pwoc-&gt;szPname) - 1] = '\0'; <br>    } <br>    else <br>    { <br>        _fmemset(pwoc, 0, sizeof(*pwoc)); <br> <br>        if (MMSYSERR_BADDEVICEID == mmr) <br>        { <br>            return (mmr); <br>        } <br> <br>        if (WAVE_MAPPER == uDevId) <br>        { <br>            lstrcpy(pwoc-&gt;szPname, TEXT("Default Wave Output Mapper")); <br>        } <br>        else <br>        { <br>            wsprintf(pwoc-&gt;szPname, TEXT("Bad Wave Output Device %u"), uDevId); <br>        } <br>    } <br> <br>    return (MMSYSERR_NOERROR); <br>} // AcmAppWaveOutGetDevCaps() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppDisplayWaveInDevCaps <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hedit: <br>//   <br>//      UINT uDevId: <br>//   <br>//      LPWAVEINCAPS pwic: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppDisplayWaveInDevCaps <br>( <br>    HWND                    hedit, <br>    UINT                    uDevId, <br>    LPWAVEINCAPS            pwic, <br>    LPWAVEFORMATEX          pwfx <br>) <br>{ <br>    static TCHAR        szDisplayTitle[]    = TEXT("[Wave Input Device Capabilities]\r\n"); <br>    TCHAR               ach[40]; <br>    PTSTR               psz; <br>    UINT                u; <br>    UINT                v; <br>    DWORD               dw; <br> <br>    SetWindowRedraw(hedit, FALSE); <br> <br>    MEditPrintF(hedit, NULL); <br>    MEditPrintF(hedit, szDisplayTitle); <br> <br>    // <br>    // <br>    // <br>    if (NULL != pwfx) <br>    { <br>        TCHAR           szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS]; <br>        TCHAR           szFormat[ACMFORMATDETAILS_FORMAT_CHARS]; <br>        MMRESULT        mmr; <br>        HWAVEIN         hwi; <br> <br>        // <br>        // <br>        // <br>        AcmAppGetFormatDescription(pwfx, szFormatTag, szFormat); <br>        MEditPrintF(hedit, TEXT("%17s: %s"), (LPTSTR)TEXT("Format"), (LPTSTR)szFormatTag); <br>        MEditPrintF(hedit, TEXT("%17s: %s"), (LPTSTR)TEXT("Attributes"), (LPTSTR)szFormat); <br> <br> <br>        // <br>        // <br>        // <br>        MEditPrintF(hedit, TEXT("~%17s: "), (LPTSTR)TEXT("Recordable")); <br>        mmr = waveInOpen(&amp;hwi, uDevId, <br>#if (WINVER &lt; 0x0400) <br>                         (LPWAVEFORMAT)pwfx, <br>#else <br>                         pwfx, <br>#endif <br>                         0L, 0L, 0L); <br> <br>        if (MMSYSERR_NOERROR == mmr) <br>        { <br>            MEditPrintF(hedit, gszYes); <br>            waveInClose(hwi); <br>            hwi = NULL; <br>        } <br>        else <br>        { <br>            AcmAppGetErrorString(mmr, ach); <br>            MEditPrintF(hedit, TEXT("%s, %s (%u)"), (LPTSTR)gszNo, (LPSTR)ach, mmr); <br>        } <br> <br> <br>        // <br>        // <br>        // <br>        MEditPrintF(hedit, TEXT("~%17s: "), (LPTSTR)TEXT("(Query)")); <br>        mmr = waveInOpen(NULL, uDevId, <br>#if (WINVER &lt; 0x0400) <br>                         (LPWAVEFORMAT)pwfx, <br>#else <br>                         pwfx, <br>#endif <br>                         0L, 0L, WAVE_FORMAT_QUERY); <br> <br>        if (MMSYSERR_NOERROR == mmr) <br>        { <br>            MEditPrintF(hedit, gszYes); <br>        } <br>        else <br>        { <br>            AcmAppGetErrorString(mmr, ach); <br>            MEditPrintF(hedit, TEXT("%s, %s (%u)"), (LPTSTR)gszNo, (LPSTR)ach, mmr); <br>        } <br> <br> <br>        MEditPrintF(hedit, gszNull); <br>    } <br> <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, TEXT("%17s: %d"), (LPTSTR)TEXT("Device Id"), uDevId); <br> <br>    MEditPrintF(hedit, TEXT("%17s: %u"), (LPTSTR)TEXT("Manufacturer Id"), pwic-&gt;wMid); <br>    MEditPrintF(hedit, TEXT("%17s: %u"), (LPTSTR)TEXT("Product Id"), pwic-&gt;wPid); <br>    MEditPrintF(hedit, TEXT("%17s: %u.%.02u"), (LPTSTR)TEXT("Driver Version"), <br>                (pwic-&gt;vDriverVersion &gt;&gt; 8), <br>                (pwic-&gt;vDriverVersion &amp; 0x00FF)); <br>    MEditPrintF(hedit, TEXT("%17s: '%s'"), (LPTSTR)TEXT("Device Name"), (LPTSTR)pwic-&gt;szPname); <br>    MEditPrintF(hedit, TEXT("%17s: %u"), (LPTSTR)TEXT("Channels"), pwic-&gt;wChannels); <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, TEXT("%17s: %.08lXh"), (LPTSTR)TEXT("Standard Formats"), pwic-&gt;dwFormats); <br>    for (v = u = 0, dw = pwic-&gt;dwFormats; (0L != dw); u++) <br>    { <br>        if ((BYTE)dw &amp; (BYTE)1) <br>        { <br>            psz = gaszWaveInOutCapsFormats[u]; <br>            if (NULL == psz) <br>            { <br>                wsprintf(ach, TEXT("Unknown%u"), u); <br>                psz = ach; <br>            } <br> <br>            if (0 == (v % 4)) <br>            { <br>                if (v != 0) <br>                { <br>                    MEditPrintF(hedit, gszNull); <br>                } <br>                MEditPrintF(hedit, TEXT("~%19s%s"), (LPTSTR)gszNull, (LPTSTR)psz); <br>            } <br>            else <br>            { <br>                MEditPrintF(hedit, TEXT("~, %s"), (LPTSTR)psz); <br>            } <br> <br>            v++; <br>        } <br> <br>        dw &gt;&gt;= 1; <br>    } <br>    MEditPrintF(hedit, gszNull); <br> <br>    SetWindowRedraw(hedit, TRUE); <br> <br>    return (TRUE); <br>} // AcmAppDisplayWaveInDevCaps() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppDisplayWaveOutDevCaps <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hedit: <br>//   <br>//      UINT uDevId: <br>//   <br>//      LPWAVEOUTCAPS pwoc: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppDisplayWaveOutDevCaps <br>( <br>    HWND                    hedit, <br>    UINT                    uDevId, <br>    LPWAVEOUTCAPS           pwoc, <br>    LPWAVEFORMATEX          pwfx <br>) <br>{ <br>    static TCHAR    szDisplayTitle[]    = TEXT("[Wave Output Device Capabilities]\r\n"); <br>    TCHAR           ach[40]; <br>    PTSTR           psz; <br>    UINT            u; <br>    UINT            v; <br>    DWORD           dw; <br> <br>    SetWindowRedraw(hedit, FALSE); <br> <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, NULL); <br>    MEditPrintF(hedit, szDisplayTitle); <br> <br> <br> <br>    // <br>    // <br>    // <br>    if (NULL != pwfx) <br>    { <br>        TCHAR           szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS]; <br>        TCHAR           szFormat[ACMFORMATDETAILS_FORMAT_CHARS]; <br>        MMRESULT        mmr; <br>        HWAVEOUT        hwo; <br>        DWORD           fdwOpen; <br> <br>        fdwOpen = (0 != (WAVECAPS_SYNC &amp; pwoc-&gt;dwSupport)) ? 0L : WAVE_ALLOWSYNC; <br> <br>        // <br>        // <br>        // <br>        AcmAppGetFormatDescription(pwfx, szFormatTag, szFormat); <br>        MEditPrintF(hedit, TEXT("%17s: %s"), (LPTSTR)TEXT("Format"), (LPTSTR)szFormatTag); <br>        MEditPrintF(hedit, TEXT("%17s: %s"), (LPTSTR)TEXT("Attributes"), (LPTSTR)szFormat); <br> <br> <br>        // <br>        // <br>        // <br>        MEditPrintF(hedit, TEXT("~%17s: "), (LPTSTR)TEXT("Playable")); <br>        mmr = waveOutOpen(&amp;hwo, uDevId, <br>#if (WINVER &lt; 0x0400) <br>                          (LPWAVEFORMAT)pwfx, <br>#else <br>                          pwfx, <br>#endif <br>                          0L, 0L, fdwOpen); <br> <br>        if (MMSYSERR_NOERROR == mmr) <br>        { <br>            MEditPrintF(hedit, gszYes); <br>            waveOutClose(hwo); <br>            hwo = NULL; <br>        } <br>        else <br>        { <br>            AcmAppGetErrorString(mmr, ach); <br>            MEditPrintF(hedit, TEXT("%s, %s (%u)"), (LPTSTR)gszNo, (LPSTR)ach, mmr); <br>        } <br> <br>        // <br>        // <br>        // <br>        MEditPrintF(hedit, TEXT("~%17s: "), (LPTSTR)TEXT("(Query)")); <br>        mmr = waveOutOpen(NULL, uDevId, <br>#if (WINVER &lt; 0x0400) <br>                          (LPWAVEFORMAT)pwfx, <br>#else <br>                          pwfx, <br>#endif <br>                          0L, 0L, fdwOpen | WAVE_FORMAT_QUERY); <br> <br>        if (MMSYSERR_NOERROR == mmr) <br>        { <br>            MEditPrintF(hedit, gszYes); <br>        } <br>        else <br>        { <br>            AcmAppGetErrorString(mmr, ach); <br>            MEditPrintF(hedit, TEXT("%s, %s (%u)"), (LPTSTR)gszNo, (LPSTR)ach, mmr); <br>        } <br> <br>        MEditPrintF(hedit, gszNull); <br>    } <br> <br> <br> <br>    MEditPrintF(hedit, TEXT("%17s: %d"), (LPTSTR)TEXT("Device Id"), uDevId); <br> <br>    MEditPrintF(hedit, TEXT("%17s: %u"), (LPTSTR)TEXT("Manufacturer Id"), pwoc-&gt;wMid); <br>    MEditPrintF(hedit, TEXT("%17s: %u"), (LPTSTR)TEXT("Product Id"), pwoc-&gt;wPid); <br>    MEditPrintF(hedit, TEXT("%17s: %u.%.02u"), (LPTSTR)TEXT("Driver Version"), <br>                (pwoc-&gt;vDriverVersion &gt;&gt; 8), <br>                (pwoc-&gt;vDriverVersion &amp; 0x00FF)); <br>    MEditPrintF(hedit, TEXT("%17s: '%s'"), (LPTSTR)TEXT("Device Name"), (LPTSTR)pwoc-&gt;szPname); <br>    MEditPrintF(hedit, TEXT("%17s: %u"), (LPTSTR)TEXT("Channels"), pwoc-&gt;wChannels); <br> <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, TEXT("%17s: %.08lXh"), (LPTSTR)TEXT("Standard Formats"), pwoc-&gt;dwFormats); <br>    for (v = u = 0, dw = pwoc-&gt;dwFormats; (0L != dw); u++) <br>    { <br>        if ((BYTE)dw &amp; (BYTE)1) <br>        { <br>            psz = gaszWaveInOutCapsFormats[u]; <br>            if (NULL == psz) <br>            { <br>                wsprintf(ach, TEXT("Unknown%u"), u); <br>                psz = ach; <br>            } <br> <br>            if (0 == (v % 4)) <br>            { <br>                if (v != 0) <br>                { <br>                    MEditPrintF(hedit, gszNull); <br>                } <br>                MEditPrintF(hedit, TEXT("~%19s%s"), (LPTSTR)gszNull, (LPTSTR)psz); <br>            } <br>            else <br>            { <br>                MEditPrintF(hedit, TEXT("~, %s"), (LPTSTR)psz); <br>            } <br> <br>            v++; <br>        } <br> <br>        dw &gt;&gt;= 1; <br>    } <br>    MEditPrintF(hedit, gszNull); <br> <br>    // <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, TEXT("%17s: %.08lXh"), (LPTSTR)TEXT("Standard Support"), pwoc-&gt;dwSupport); <br>    for (v = u = 0, dw = pwoc-&gt;dwSupport; dw; u++) <br>    { <br>        if ((BYTE)dw &amp; (BYTE)1) <br>        { <br>            psz = gaszWaveOutCapsSupport[u]; <br>            if (NULL == psz) <br>            { <br>                wsprintf(ach, TEXT("Unknown%u"), u); <br>                psz = ach; <br>            } <br> <br>            if (0 == (v % 4)) <br>            { <br>                if (v != 0) <br>                { <br>                    MEditPrintF(hedit, gszNull); <br>                } <br>                MEditPrintF(hedit, TEXT("~%19s%s"), (LPTSTR)gszNull, (LPTSTR)psz); <br>            } <br>            else <br>            { <br>                MEditPrintF(hedit, TEXT("~, %s"), (LPTSTR)psz); <br>            } <br> <br>            v++; <br>        } <br> <br>        dw &gt;&gt;= 1; <br>    } <br>    MEditPrintF(hedit, gszNull); <br> <br>    SetWindowRedraw(hedit, TRUE); <br> <br>    return (TRUE); <br>} // AcmAppDisplayWaveOutDevCaps() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppWaveDeviceDlgProc <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      UINT uMsg: <br>//   <br>//      WPARAM wParam: <br>//   <br>//      LPARAM lParam: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppWaveDeviceDlgProc <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    LONG                lDevice; <br>    BOOL                fInput; <br>    UINT                uDevId; <br> <br>    UINT                cWaveDevs; <br>    UINT                u; <br>    UINT                uId; <br>    UINT                uCmd; <br>    HWND                hcb; <br>    HWND                hedit; <br>    HFONT               hfont; <br> <br>    WAVEINCAPS          wic; <br>    WAVEOUTCAPS         woc; <br> <br>    lDevice = GetWindowLong(hwnd, DWL_USER); <br>    uDevId  = (UINT)(int)(short)LOWORD(lDevice); <br>    fInput  = (BOOL)HIWORD(lDevice); <br> <br>    // <br>    // <br>    // <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>//          hfont = GetStockFont(ANSI_FIXED_FONT); <br>            hfont = ghfontApp; <br>            hedit = GetDlgItem(hwnd, IDD_AAWAVEDEVICE_EDIT_CAPABILITIES); <br>            SetWindowFont(hedit, hfont, FALSE); <br> <br>            uDevId = (UINT)(int)(short)LOWORD(lParam); <br>            fInput = (BOOL)HIWORD(lParam); <br>            SetWindowLong(hwnd, DWL_USER, lParam); <br> <br> <br>            // <br>            // <br>            // <br>            hcb = GetDlgItem(hwnd, IDD_AAWAVEDEVICE_COMBO_DEVICE); <br>            SetWindowFont(hcb, hfont, FALSE); <br> <br>            if (fInput) <br>                cWaveDevs = waveInGetNumDevs() + 1; <br>            else <br>                cWaveDevs = waveOutGetNumDevs() + 1; <br> <br>            for (u = (UINT)WAVE_MAPPER; (0 != cWaveDevs); u++, cWaveDevs--) <br>            { <br>                if (fInput) <br>                { <br>                    AcmAppWaveInGetDevCaps(u, &amp;wic); <br>                    ComboBox_AddString(hcb, wic.szPname); <br>                } <br>                else <br>                { <br>                    AcmAppWaveOutGetDevCaps(u, &amp;woc); <br>                    ComboBox_AddString(hcb, woc.szPname); <br>                } <br> <br>                if (uDevId == u) <br>                { <br>                    hedit = GetDlgItem(hwnd, IDD_AAWAVEDEVICE_EDIT_CAPABILITIES); <br> <br>                    if (fInput) <br>                        AcmAppDisplayWaveInDevCaps(hedit, uDevId, &amp;wic, gaafd.pwfx); <br>                    else <br>                        AcmAppDisplayWaveOutDevCaps(hedit, uDevId, &amp;woc, gaafd.pwfx); <br>                } <br>            } <br> <br>            ComboBox_SetCurSel(hcb, uDevId + 1); <br>            return (TRUE); <br> <br> <br>        case WM_COMMAND: <br>            uId = GET_WM_COMMAND_ID(wParam, lParam); <br> <br>            switch (uId) <br>            { <br>                case IDOK: <br>                    hcb    = GetDlgItem(hwnd, IDD_AAWAVEDEVICE_COMBO_DEVICE); <br>                    uDevId = ComboBox_GetCurSel(hcb); <br>                    if (CB_ERR != uDevId) <br>                    { <br>                        EndDialog(hwnd, uDevId - 1); <br>                        break; <br>                    } <br> <br>                    // -- fall through -- // <br>                     <br>                case IDCANCEL: <br>                    EndDialog(hwnd, uDevId); <br>                    break; <br>                     <br> <br>                case IDD_AAWAVEDEVICE_COMBO_DEVICE: <br>                    uCmd = GET_WM_COMMAND_CMD(wParam, lParam); <br>                    hcb  = GET_WM_COMMAND_HWND(wParam, lParam); <br>                    switch (uCmd) <br>                    { <br>                        case CBN_SELCHANGE: <br>                            uDevId = ComboBox_GetCurSel(hcb); <br>                            if (CB_ERR == uDevId) <br>                                break; <br> <br>                            uDevId--; <br> <br>                            hedit = GetDlgItem(hwnd, IDD_AAWAVEDEVICE_EDIT_CAPABILITIES); <br>                            if (fInput) <br>                            { <br>                                AcmAppWaveInGetDevCaps(uDevId, &amp;wic); <br>                                AcmAppDisplayWaveInDevCaps(hedit, uDevId, &amp;wic, gaafd.pwfx); <br>                            } <br>                            else <br>                            { <br>                                AcmAppWaveOutGetDevCaps(uDevId, &amp;woc); <br>                                AcmAppDisplayWaveOutDevCaps(hedit, uDevId, &amp;woc, gaafd.pwfx); <br>                            } <br>                            break; <br>                    } <br>            } <br>            return (TRUE); <br>    } <br> <br>    return (FALSE); <br>} // AcmAppWaveDeviceDlgProc() </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WAVEIO.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2472"></a>WAVEIO.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>//  waveio.h <br>// <br>//  Description: <br>//      Contains structure definitions and prototypes for the functions in <br>//      waveio.c.  Also contains Win16/Win32 portability definitions. <br>// <br>// <br>//==========================================================================; <br> <br>#ifndef _INC_WAVEIO <br>#define _INC_WAVEIO                 // #defined if file has been included <br> <br>#ifndef RC_INVOKED <br>#pragma pack(1)                     // assume byte packing throughout <br>#endif <br> <br>#ifndef EXTERN_C <br>#ifdef __cplusplus <br>    #define EXTERN_C extern "C" <br>#else <br>    #define EXTERN_C extern  <br>#endif <br>#endif <br> <br>#ifdef __cplusplus <br>extern "C"                          // assume C declarations for C++ <br>{ <br>#endif <br> <br>#ifdef WIN32 <br>    // <br>    //  for compiling Unicode <br>    // <br>    #ifndef SIZEOF <br>    #ifdef UNICODE <br>        #define SIZEOF(x)       (sizeof(x)/sizeof(WCHAR)) <br>    #else <br>        #define SIZEOF(x)       sizeof(x) <br>    #endif <br>    #endif <br>#else <br>    // <br>    //  stuff for Unicode in Win 32--make it a noop in Win 16 <br>    // <br>    #ifndef TEXT <br>    #define TEXT(a)             a <br>    #endif <br> <br>    #ifndef SIZEOF <br>    #define SIZEOF(x)           sizeof(x) <br>    #endif <br> <br>    #ifndef _TCHAR_DEFINED <br>        #define _TCHAR_DEFINED <br>        typedef char            TCHAR, *PTCHAR; <br>        typedef unsigned char   TBYTE, *PTUCHAR; <br> <br>        typedef PSTR            PTSTR, PTCH; <br>        typedef LPSTR           LPTSTR, LPTCH; <br>        typedef LPCSTR          LPCTSTR; <br>    #endif <br>#endif <br> <br> <br>// <br>// <br>// <br>// <br>// <br>#ifdef WIN32 <br>    #define WIOAPI      _stdcall <br>#else <br>#ifdef _WINDLL <br>    #define WIOAPI      FAR PASCAL _loadds <br>#else <br>    #define WIOAPI      FAR PASCAL <br>#endif <br>#endif <br> <br> <br>// <br>// <br>// <br>typedef UINT        WIOERR; <br> <br> <br>// <br>// <br>// <br>// <br>typedef struct tWAVEIOCB <br>{ <br>    DWORD           dwFlags; <br>    HMMIO           hmmio; <br> <br>    DWORD           dwDataOffset; <br>    DWORD           dwDataBytes; <br>    DWORD           dwDataSamples; <br> <br>    LPWAVEFORMATEX  pwfx; <br> <br>#if 0 <br>    HWAVEOUT        hwo; <br>    DWORD           dwBytesLeft; <br>    DWORD           dwBytesPerBuffer; <br>     <br>    DISP FAR *      pDisp; <br>    INFOCHUNK FAR * pInfo; <br>#endif <br> <br>} WAVEIOCB, *PWAVEIOCB, FAR *LPWAVEIOCB; <br> <br> <br> <br>// <br>//  error returns from waveio functions <br>// <br>#define WIOERR_BASE             (0) <br>#define WIOERR_NOERROR          (0) <br>#define WIOERR_ERROR            (WIOERR_BASE+1) <br>#define WIOERR_BADHANDLE        (WIOERR_BASE+2) <br>#define WIOERR_BADFLAGS         (WIOERR_BASE+3) <br>#define WIOERR_BADPARAM         (WIOERR_BASE+4) <br>#define WIOERR_BADSIZE          (WIOERR_BASE+5) <br>#define WIOERR_FILEERROR        (WIOERR_BASE+6) <br>#define WIOERR_NOMEM            (WIOERR_BASE+7) <br>#define WIOERR_BADFILE          (WIOERR_BASE+8) <br>#define WIOERR_NODEVICE         (WIOERR_BASE+9) <br>#define WIOERR_BADFORMAT        (WIOERR_BASE+10) <br>#define WIOERR_ALLOCATED        (WIOERR_BASE+11) <br>#define WIOERR_NOTSUPPORTED     (WIOERR_BASE+12) <br> <br> <br> <br>// <br>//  function prototypes and flag definitions <br>// <br>WIOERR WIOAPI wioFileClose <br>( <br>    LPWAVEIOCB              pwio, <br>    DWORD                   fdwClose <br>); <br> <br>WIOERR WIOAPI wioFileOpen <br>( <br>    LPWAVEIOCB              pwio, <br>    LPCTSTR                 pszFilePath, <br>    DWORD                   fdwOpen <br>); <br> <br> <br>//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;  <br>// <br>// <br>// <br>//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;  <br> <br>#ifndef RC_INVOKED <br>#pragma pack()                      // revert to default packing <br>#endif <br> <br>#ifdef __cplusplus <br>}                                   // end of extern "C" {  <br>#endif <br> <br>#endif // _INC_WAVEIO <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

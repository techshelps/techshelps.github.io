<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AAPROPS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2457"></a>AAPROPS.C</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br>//--------------------------------------------------------------------------; <br>// <br>//  aaprops.c <br>// <br>//  Description: <br>//      Get and display information on a .wav file and its format. <br>// <br>// <br>//==========================================================================; <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;memory.h&gt; <br> <br>#include &lt;mmreg.h&gt; <br>#include &lt;msacm.h&gt; <br> <br>#include "muldiv32.h" <br> <br>#include "appport.h" <br>#include "acmapp.h" <br> <br>#include "debug.h" <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppGetErrorString <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      MMRESULT mmr: <br>//   <br>//      PTSTR psz: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNGLOBAL AcmAppGetErrorString <br>( <br>    MMRESULT                mmr, <br>    LPTSTR                  pszError <br>) <br>{ <br>    PTSTR               psz; <br> <br>    switch (mmr) <br>    { <br>        case MMSYSERR_NOERROR: <br>            psz = TEXT("MMSYSERR_NOERROR"); <br>            break; <br> <br>        case MMSYSERR_ERROR: <br>            psz = TEXT("MMSYSERR_ERROR"); <br>            break; <br> <br>        case MMSYSERR_BADDEVICEID: <br>            psz = TEXT("MMSYSERR_BADDEVICEID"); <br>            break; <br> <br>        case MMSYSERR_NOTENABLED: <br>            psz = TEXT("MMSYSERR_NOTENABLED"); <br>            break; <br> <br>        case MMSYSERR_ALLOCATED: <br>            psz = TEXT("MMSYSERR_ALLOCATED"); <br>            break; <br> <br>        case MMSYSERR_INVALHANDLE: <br>            psz = TEXT("MMSYSERR_INVALHANDLE"); <br>            break; <br> <br>        case MMSYSERR_NODRIVER: <br>            psz = TEXT("MMSYSERR_NODRIVER"); <br>            break; <br> <br>        case MMSYSERR_NOMEM: <br>            psz = TEXT("MMSYSERR_NOMEM"); <br>            break; <br> <br>        case MMSYSERR_NOTSUPPORTED: <br>            psz = TEXT("MMSYSERR_NOTSUPPORTED"); <br>            break; <br> <br>        case MMSYSERR_BADERRNUM: <br>            psz = TEXT("MMSYSERR_BADERRNUM"); <br>            break; <br> <br>        case MMSYSERR_INVALFLAG: <br>            psz = TEXT("MMSYSERR_INVALFLAG"); <br>            break; <br> <br>        case MMSYSERR_INVALPARAM: <br>            psz = TEXT("MMSYSERR_INVALPARAM"); <br>            break; <br> <br> <br>        case WAVERR_BADFORMAT: <br>            psz = TEXT("WAVERR_BADFORMAT"); <br>            break; <br> <br>        case WAVERR_STILLPLAYING: <br>            psz = TEXT("WAVERR_STILLPLAYING"); <br>            break; <br> <br>        case WAVERR_UNPREPARED: <br>            psz = TEXT("WAVERR_UNPREPARED"); <br>            break; <br> <br>        case WAVERR_SYNC: <br>            psz = TEXT("WAVERR_SYNC"); <br>            break; <br> <br> <br>        case ACMERR_NOTPOSSIBLE: <br>            psz = TEXT("ACMERR_NOTPOSSIBLE"); <br>            break; <br> <br>        case ACMERR_BUSY: <br>            psz = TEXT("ACMERR_BUSY"); <br>            break; <br> <br>        case ACMERR_UNPREPARED: <br>            psz = TEXT("ACMERR_UNPREPARED"); <br>            break; <br> <br>        case ACMERR_CANCELED: <br>            psz = TEXT("ACMERR_CANCELED"); <br>            break; <br> <br> <br>        default: <br>            lstrcpy(pszError, TEXT("(unknown)")); <br>            return (FALSE); <br>    } <br> <br>    lstrcpy(pszError, psz); <br>    return (TRUE); <br>} // AcmAppGetErrorString() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppGetFormatDescription <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      LPWAVEFORMATEX pwfx: <br>//   <br>//      LPSTR pszFormatTag: <br>//   <br>//      LPSTR pszFormat: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>TCHAR   gszIntl[]           = TEXT("Intl"); <br>TCHAR   gszIntlList[]       = TEXT("sList"); <br>TCHAR   gszIntlDecimal[]    = TEXT("sDecimal"); <br>TCHAR   gchIntlList         = ','; <br>TCHAR   gchIntlDecimal      = '.'; <br> <br>BOOL FNGLOBAL AcmAppGetFormatDescription <br>( <br>    LPWAVEFORMATEX          pwfx, <br>    LPTSTR                  pszFormatTag, <br>    LPTSTR                  pszFormat <br>) <br>{ <br>    MMRESULT            mmr; <br>    BOOL                f; <br> <br>    f = TRUE; <br> <br>    // <br>    //  get the name for the format tag of the specified format <br>    // <br>    if (NULL != pszFormatTag) <br>    { <br>        ACMFORMATTAGDETAILS aftd; <br> <br>        // <br>        //  initialize all unused members of the ACMFORMATTAGDETAILS <br>        //  structure to zero <br>        // <br>        memset(&amp;aftd, 0, sizeof(aftd)); <br> <br>        // <br>        //  fill in the required members of the ACMFORMATTAGDETAILS <br>        //  structure for the ACM_FORMATTAGDETAILSF_FORMATTAG query <br>        // <br>        aftd.cbStruct    = sizeof(aftd); <br>        aftd.dwFormatTag = pwfx-&gt;wFormatTag; <br> <br>        // <br>        //  ask the ACM to find the first available driver that <br>        //  supports the specified format tag <br>        // <br>        mmr = acmFormatTagDetails(NULL, <br>                                  &amp;aftd, <br>                                  ACM_FORMATTAGDETAILSF_FORMATTAG); <br>        if (MMSYSERR_NOERROR == mmr) <br>        { <br>            // <br>            //  copy the format tag name into the caller's buffer <br>            // <br>            lstrcpy(pszFormatTag, aftd.szFormatTag); <br>        } <br>        else <br>        { <br>            PTSTR           psz; <br> <br>            // <br>            //  no ACM driver is available that supports the <br>            //  specified format tag <br>            // <br> <br>            f   = FALSE; <br>            psz = NULL; <br> <br>            // <br>            //  the following stuff if proof that the world does NOT need <br>            //  yet another ADPCM algorithm!! <br>            // <br>            switch (pwfx-&gt;wFormatTag) <br>            { <br>                case WAVE_FORMAT_UNKNOWN: <br>                    psz = TEXT("** RESERVED INVALID TAG **"); <br>                    break; <br> <br>                case WAVE_FORMAT_PCM: <br>                    psz = TEXT("PCM"); <br>                    break; <br> <br>                case WAVE_FORMAT_ADPCM: <br>                    psz = TEXT("Microsoft ADPCM"); <br>                    break; <br> <br>                case 0x0003: <br>                    psz = TEXT("MV's *UNREGISTERED* ADPCM"); <br>                    break; <br> <br>                case WAVE_FORMAT_IBM_CVSD: <br>                    psz = TEXT("IBM CVSD"); <br>                    break; <br> <br>                case WAVE_FORMAT_ALAW: <br>                    psz = TEXT("A-Law"); <br>                    break; <br> <br>                case WAVE_FORMAT_MULAW: <br>                    psz = TEXT("u-Law"); <br>                    break; <br> <br>                case WAVE_FORMAT_OKI_ADPCM: <br>                    psz = TEXT("OKI ADPCM"); <br>                    break; <br> <br>                case WAVE_FORMAT_IMA_ADPCM: <br>                    psz = TEXT("IMA/DVI ADPCM"); <br>                    break; <br> <br>                case WAVE_FORMAT_DIGISTD: <br>                    psz = TEXT("DIGI STD"); <br>                    break; <br> <br>                case WAVE_FORMAT_DIGIFIX: <br>                    psz = TEXT("DIGI FIX"); <br>                    break; <br> <br>                case WAVE_FORMAT_YAMAHA_ADPCM: <br>                    psz = TEXT("Yamaha ADPCM"); <br>                    break; <br> <br>                case WAVE_FORMAT_SONARC: <br>                    psz = TEXT("Sonarc"); <br>                    break; <br> <br>                case WAVE_FORMAT_DSPGROUP_TRUESPEECH: <br>                    psz = TEXT("DSP Group TrueSpeech"); <br>                    break; <br> <br>                case WAVE_FORMAT_ECHOSC1: <br>                    psz = TEXT("Echo SC1"); <br>                    break; <br> <br>                case WAVE_FORMAT_AUDIOFILE_AF36: <br>                    psz = TEXT("Audiofile AF36"); <br>                    break; <br> <br>                case WAVE_FORMAT_CREATIVE_ADPCM: <br>                    psz = TEXT("Creative Labs ADPCM"); <br>                    break; <br> <br>                case WAVE_FORMAT_APTX: <br>                    psz = TEXT("APTX"); <br>                    break; <br> <br>                case WAVE_FORMAT_AUDIOFILE_AF10: <br>                    psz = TEXT("Audiofile AF10"); <br>                    break; <br> <br>                case WAVE_FORMAT_DOLBY_AC2: <br>                    psz = TEXT("Dolby AC2"); <br>                    break; <br> <br>                case WAVE_FORMAT_MEDIASPACE_ADPCM: <br>                    psz = TEXT("Media Space ADPCM"); <br>                    break; <br> <br>                case WAVE_FORMAT_SIERRA_ADPCM: <br>                    psz = TEXT("Sierra ADPCM"); <br>                    break; <br> <br>                case WAVE_FORMAT_G723_ADPCM: <br>                    psz = TEXT("CCITT G.723 ADPCM"); <br>                    break; <br> <br>                case WAVE_FORMAT_GSM610: <br>                    psz = TEXT("GSM 6.10"); <br>                    break; <br> <br>                case WAVE_FORMAT_G721_ADPCM: <br>                    psz = TEXT("CCITT G.721 ADPCM"); <br>                    break; <br> <br>                case WAVE_FORMAT_DEVELOPMENT: <br>                    psz = TEXT("** RESERVED DEVELOPMENT ONLY TAG **"); <br>                    break; <br> <br>                default: <br>                    wsprintf(pszFormatTag, TEXT("[%u] (unknown)"), pwfx-&gt;wFormatTag); <br>                    break; <br>            } <br> <br>            if (NULL != psz) <br>            { <br>                lstrcpy(pszFormatTag, psz); <br>            } <br>        } <br>    } <br> <br>    // <br>    //  get the description of the attributes for the specified <br>    //  format <br>    // <br>    if (NULL != pszFormat) <br>    { <br>        ACMFORMATDETAILS    afd; <br> <br>        // <br>        //  initialize all unused members of the ACMFORMATDETAILS <br>        //  structure to zero <br>        // <br>        memset(&amp;afd, 0, sizeof(afd)); <br> <br>        // <br>        //  fill in the required members of the ACMFORMATDETAILS <br>        //  structure for the ACM_FORMATDETAILSF_FORMAT query <br>        // <br>        afd.cbStruct    = sizeof(afd); <br>        afd.dwFormatTag = pwfx-&gt;wFormatTag; <br>        afd.pwfx        = pwfx; <br> <br>        // <br>        //  the cbwfx member must be initialized to the total size <br>        //  in bytes needed for the specified format. for a PCM  <br>        //  format, the cbSize member of the WAVEFORMATEX structure <br>        //  is not valid. <br>        // <br>        if (WAVE_FORMAT_PCM == pwfx-&gt;wFormatTag) <br>        { <br>            afd.cbwfx   = sizeof(PCMWAVEFORMAT); <br>        } <br>        else <br>        { <br>            afd.cbwfx   = sizeof(WAVEFORMATEX) + pwfx-&gt;cbSize; <br>        } <br> <br>        // <br>        //  ask the ACM to find the first available driver that <br>        //  supports the specified format <br>        // <br>        mmr = acmFormatDetails(NULL, &amp;afd, ACM_FORMATDETAILSF_FORMAT); <br>        if (MMSYSERR_NOERROR == mmr) <br>        { <br>            // <br>            //  copy the format attributes description into the caller's <br>            //  buffer <br>            // <br>            lstrcpy(pszFormat, afd.szFormat); <br>        } <br>        else <br>        { <br>            TCHAR           ach[2]; <br>            TCHAR           szChannels[24]; <br>            UINT            cBits; <br> <br>            // <br>            //  no ACM driver is available that supports the <br>            //  specified format <br>            // <br> <br>            f = FALSE; <br> <br>            // <br>            // <br>            // <br>            ach[0] = gchIntlList; <br>            ach[1] = '\0'; <br> <br>            GetProfileString(gszIntl, gszIntlList, ach, ach, sizeof(ach)); <br>            gchIntlList = ach[0]; <br> <br>            ach[0] = gchIntlDecimal; <br>            ach[1] = '\0'; <br> <br>            GetProfileString(gszIntl, gszIntlDecimal, ach, ach, sizeof(ach)); <br>            gchIntlDecimal = ach[0]; <br> <br> <br>            // <br>            //  compute the bit depth--this _should_ be the same as <br>            //  wBitsPerSample, but isn't always... <br>            // <br>            cBits = (UINT)(pwfx-&gt;nAvgBytesPerSec * 8 / <br>                           pwfx-&gt;nSamplesPerSec / <br>                           pwfx-&gt;nChannels); <br> <br>            if ((1 == pwfx-&gt;nChannels) || (2 == pwfx-&gt;nChannels)) <br>            { <br>                if (1 == pwfx-&gt;nChannels) <br>                    lstrcpy(szChannels, TEXT("Mono")); <br>                else <br>                    lstrcpy(szChannels, TEXT("Stereo")); <br> <br>                wsprintf(pszFormat, TEXT("%lu%c%.03u kHz%c %u Bit%c %s"), <br>                            pwfx-&gt;nSamplesPerSec / 1000, <br>                            gchIntlDecimal, <br>                            (UINT)(pwfx-&gt;nSamplesPerSec % 1000), <br>                            gchIntlList, <br>                            cBits, <br>                            gchIntlList, <br>                            (LPTSTR)szChannels); <br>            } <br>            else <br>            { <br>                wsprintf(pszFormat, TEXT("%lu%c%.03u kHz%c %u Bit%c %u Channels"), <br>                            pwfx-&gt;nSamplesPerSec / 1000, <br>                            gchIntlDecimal, <br>                            (UINT)(pwfx-&gt;nSamplesPerSec % 1000), <br>                            gchIntlList, <br>                            cBits, <br>                            gchIntlList, <br>                            pwfx-&gt;nChannels); <br>            } <br>        } <br>    } <br> <br>    // <br>    // <br>    // <br>    return (f); <br>} // AcmAppGetFormatDescription() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppGetFilterDescription <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      LPWAVEFILTER pwfltr: <br>//   <br>//      LPSTR pszFilterTag: <br>//   <br>//      LPSTR pszFilter: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNGLOBAL AcmAppGetFilterDescription <br>( <br>    LPWAVEFILTER            pwfltr, <br>    LPTSTR                  pszFilterTag, <br>    LPTSTR                  pszFilter <br>) <br>{ <br>    MMRESULT            mmr; <br>    BOOL                f; <br> <br>    f = TRUE; <br> <br>    // <br>    //  get the name for the filter tag of the specified filter <br>    // <br>    if (NULL != pszFilterTag) <br>    { <br>        ACMFILTERTAGDETAILS aftd; <br> <br>        // <br>        //  initialize all unused members of the ACMFILTERTAGDETAILS <br>        //  structure to zero <br>        // <br>        memset(&amp;aftd, 0, sizeof(aftd)); <br> <br>        // <br>        //  fill in the required members of the ACMFILTERTAGDETAILS <br>        //  structure for the ACM_FILTERTAGDETAILSF_FILTERTAG query <br>        // <br>        aftd.cbStruct    = sizeof(aftd); <br>        aftd.dwFilterTag = pwfltr-&gt;dwFilterTag; <br> <br>        // <br>        //  ask the ACM to find the first available driver that <br>        //  supports the specified filter tag <br>        // <br>        mmr = acmFilterTagDetails(NULL, <br>                                  &amp;aftd, <br>                                  ACM_FILTERTAGDETAILSF_FILTERTAG); <br>        if (MMSYSERR_NOERROR == mmr) <br>        { <br>            // <br>            //  copy the filter tag name into the caller's buffer <br>            // <br>            lstrcpy(pszFilterTag, aftd.szFilterTag); <br>        } <br>        else <br>        { <br>            PTSTR           psz; <br> <br>            psz = NULL; <br>            f   = FALSE; <br> <br>            // <br>            //  no ACM driver is available that supports the <br>            //  specified filter tag <br>            // <br>            switch (pwfltr-&gt;dwFilterTag) <br>            { <br>                case WAVE_FILTER_UNKNOWN: <br>                    psz = TEXT("** RESERVED INVALID TAG **"); <br>                    break; <br> <br>                case WAVE_FILTER_VOLUME: <br>                    psz = TEXT("Microsoft Volume Filter"); <br>                    break; <br> <br>                case WAVE_FILTER_ECHO: <br>                    psz = TEXT("Microsoft Echo Filter"); <br>                    break; <br> <br>                case WAVE_FILTER_DEVELOPMENT: <br>                    psz = TEXT("** RESERVED DEVELOPMENT ONLY TAG **"); <br>                    break; <br> <br>                default: <br>                    wsprintf(pszFilterTag, TEXT("[%lu] (unknown)"),pwfltr-&gt;dwFilterTag); <br>                    break; <br>            } <br> <br>            if (NULL != psz) <br>            { <br>                lstrcpy(pszFilterTag, psz); <br>            } <br>        } <br>    } <br> <br>    // <br>    //  get the description of the attributes for the specified <br>    //  filter <br>    // <br>    if (NULL != pszFilter) <br>    { <br>        ACMFILTERDETAILS    afd; <br> <br>        // <br>        //  initialize all unused members of the ACMFILTERDETAILS <br>        //  structure to zero <br>        // <br>        memset(&amp;afd, 0, sizeof(afd)); <br> <br>        // <br>        //  fill in the required members of the ACMFILTERDETAILS <br>        //  structure for the ACM_FILTERDETAILSF_FILTER query <br>        // <br>        afd.cbStruct    = sizeof(afd); <br>        afd.dwFilterTag = pwfltr-&gt;dwFilterTag; <br>        afd.pwfltr      = pwfltr; <br>        afd.cbwfltr     = pwfltr-&gt;cbStruct; <br> <br>        // <br>        //  ask the ACM to find the first available driver that <br>        //  supports the specified filter <br>        // <br>        mmr = acmFilterDetails(NULL, &amp;afd, ACM_FILTERDETAILSF_FILTER); <br>        if (MMSYSERR_NOERROR == mmr) <br>        { <br>            // <br>            //  copy the filter attributes description into the caller's <br>            //  buffer <br>            // <br>            lstrcpy(pszFilter, afd.szFilter); <br>        } <br>        else <br>        { <br>            // <br>            //  no ACM driver is available that supports the <br>            //  specified filter <br>            // <br>            f = FALSE; <br> <br>            wsprintf(pszFilter, TEXT("Unknown Filter %lu, %.08lXh"), <br>                        pwfltr-&gt;dwFilterTag, pwfltr-&gt;fdwFilter); <br>        } <br>    } <br> <br>    // <br>    // <br>    // <br>    return (f); <br>} // AcmAppGetFilterDescription() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppDumpExtraHeaderData <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hedit: <br>//   <br>//      LPWAVEFORMATEX pwfx: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppDumpExtraHeaderData <br>( <br>    HWND            hedit, <br>    LPWAVEFORMATEX  pwfx <br>) <br>{ <br>    static TCHAR    szDisplayTitle[]  = TEXT("Offset Data Bytes"); <br> <br>    if ((WAVE_FORMAT_PCM == pwfx-&gt;wFormatTag) || (0 == pwfx-&gt;cbSize)) <br>        return (TRUE); <br> <br>    MEditPrintF(hedit, szDisplayTitle); <br>    MEditPrintF(hedit, TEXT("------ -----------------------------------------------")); <br> <br> <br>    // <br>    //  !!! this is really horrible code !!! <br>    // <br>{ <br>    #define ACMAPP_DUMP_BYTES_PER_LINE  16 <br> <br>    UINT    u; <br>    UINT    v; <br> <br>    for (u = 0; u &lt; pwfx-&gt;cbSize; u += ACMAPP_DUMP_BYTES_PER_LINE) <br>    { <br>        MEditPrintF(hedit, TEXT("~0x%.04X"), u); <br> <br>        for (v = 0; v &lt; ACMAPP_DUMP_BYTES_PER_LINE; v++) <br>        { <br>            if ((u + v) &gt;= pwfx-&gt;cbSize) <br>                break; <br> <br>            MEditPrintF(hedit, TEXT("~ %.02X"), ((LPBYTE)(pwfx + 1))[u + v]); <br>        } <br> <br>        MEditPrintF(hedit, gszNull); <br>    } <br> <br>    #undef ACMAPP_DUMP_BYTES_PER_LINE <br>} <br> <br>    return (TRUE); <br>} // AcmAppDumpExtraHeaderData() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppDisplayFileProperties <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      PACMAPPFILEDESC paafd: <br>//   <br>//  Return (BOOL): <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNGLOBAL AcmAppDisplayFileProperties <br>( <br>    HWND            hwnd, <br>    PACMAPPFILEDESC paafd <br>) <br>{ <br>    static TCHAR    szInvalidWaveFile[] = TEXT("No File"); <br>    static TCHAR    szDisplayTitle[]    = TEXT("[Wave File Format Properties]\r\n"); <br> <br>    MMRESULT        mmr; <br>    TCHAR           szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS]; <br>    TCHAR           ach[APP_MAX_STRING_CHARS]; <br>    DWORD           dw; <br>    LPWAVEFORMATEX  pwfx; <br>    HWND            hedit; <br>    HMENU           hmenu; <br>    BOOL            fCanPlayRecord; <br>    BOOL            f; <br> <br> <br>    // <br>    //  clear the display <br>    // <br>    AppHourGlass(TRUE); <br> <br>    hedit = GetDlgItem(hwnd, IDD_ACMAPP_EDIT_DISPLAY); <br>    SetWindowRedraw(hedit, FALSE); <br> <br>    MEditPrintF(hedit, NULL); <br> <br> <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, szDisplayTitle); <br> <br>    MEditPrintF(hedit, TEXT("%25s: %s"), (LPTSTR)TEXT("Title"), (LPTSTR)paafd-&gt;szFileTitle); <br>    MEditPrintF(hedit, TEXT("%25s: %s"), (LPTSTR)TEXT("Full Path"), (LPTSTR)paafd-&gt;szFilePath); <br> <br>    AppFormatBigNumber(ach, paafd-&gt;cbFileSize); <br>    MEditPrintF(hedit, TEXT("%25s: %s bytes"), (LPTSTR)TEXT("Total File Size"), (LPTSTR)ach); <br> <br>    AppFormatDosDateTime(ach, paafd-&gt;uDosChangeDate, paafd-&gt;uDosChangeTime); <br>    MEditPrintF(hedit, TEXT("%25s: %s"), (LPTSTR)TEXT("Last Change Date/Time"), (LPTSTR)ach); <br> <br>    dw = paafd-&gt;fdwFileAttributes; <br>    MEditPrintF(hedit, TEXT("%25s: %c %c%c%c%c %c%c%c%c (%.08lXh)"), <br>                    (LPTSTR)TEXT("Attributes"), <br>                    (dw &amp; FILE_ATTRIBUTE_TEMPORARY) ? 't' : '-', <br>                    (dw &amp; FILE_ATTRIBUTE_NORMAL)    ? 'n' : '-', <br>                    (dw &amp; 0x00000040)               ? '?' : '-', <br>                    (dw &amp; FILE_ATTRIBUTE_ARCHIVE)   ? 'a' : '-', <br>                    (dw &amp; FILE_ATTRIBUTE_DIRECTORY) ? 'd' : '-', <br>                    (dw &amp; 0x00000008)               ? '?' : '-', <br>                    (dw &amp; FILE_ATTRIBUTE_SYSTEM)    ? 's' : '-', <br>                    (dw &amp; FILE_ATTRIBUTE_HIDDEN)    ? 'h' : '-', <br>                    (dw &amp; FILE_ATTRIBUTE_READONLY)  ? 'r' : '-', <br>                    dw); <br> <br> <br>    pwfx = paafd-&gt;pwfx; <br>    if (NULL == pwfx) <br>    { <br>        fCanPlayRecord = FALSE; <br>        goto AA_Display_File_Properties_Exit; <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    f = AcmAppGetFormatDescription(pwfx, szFormatTag, ach); <br>    MEditPrintF(hedit, TEXT("\r\n%25s: %s%s"), (LPTSTR)TEXT("Format"), <br>                f ? (LPTSTR)gszNull : (LPTSTR)TEXT("*"), <br>                (LPTSTR)szFormatTag); <br>    MEditPrintF(hedit, TEXT("%25s: %s"), (LPTSTR)TEXT("Attributes"), (LPTSTR)ach); <br> <br> <br>    AppFormatBigNumber(ach, paafd-&gt;dwDataBytes); <br>    MEditPrintF(hedit, TEXT("\r\n%25s: %s bytes"), (LPTSTR)TEXT("Data Size"), (LPTSTR)ach); <br> <br>    AppFormatBigNumber(ach, paafd-&gt;dwDataBytes / pwfx-&gt;nAvgBytesPerSec); <br>    dw = paafd-&gt;dwDataBytes % pwfx-&gt;nAvgBytesPerSec; <br>    dw = (dw * 1000) / pwfx-&gt;nAvgBytesPerSec; <br>    MEditPrintF(hedit, TEXT("%25s: %s.%.03lu seconds"), (LPTSTR)TEXT("Play Time (avg bytes)"), (LPTSTR)ach, dw); <br> <br>    AppFormatBigNumber(ach, paafd-&gt;dwDataSamples); <br>    MEditPrintF(hedit, TEXT("%25s: %s"), (LPTSTR)TEXT("Total Samples"), (LPTSTR)ach); <br> <br>    AppFormatBigNumber(ach, paafd-&gt;dwDataSamples / pwfx-&gt;nSamplesPerSec); <br>    dw = paafd-&gt;dwDataSamples % pwfx-&gt;nSamplesPerSec; <br>    dw = (dw * 1000) / pwfx-&gt;nSamplesPerSec; <br>    MEditPrintF(hedit, TEXT("%25s: %s.%.03lu seconds"), (LPTSTR)TEXT("Play Time (samples)"), (LPTSTR)ach, dw); <br> <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, TEXT("\r\n%25s: %u"), (LPTSTR)TEXT("Format Tag"), pwfx-&gt;wFormatTag); <br>    MEditPrintF(hedit, TEXT("%25s: %u"), (LPTSTR)TEXT("Channels"), pwfx-&gt;nChannels); <br> <br>    AppFormatBigNumber(ach, pwfx-&gt;nSamplesPerSec); <br>    MEditPrintF(hedit, TEXT("%25s: %s"), (LPTSTR)TEXT("Samples Per Second"), (LPTSTR)ach); <br> <br>    AppFormatBigNumber(ach, pwfx-&gt;nAvgBytesPerSec); <br>    MEditPrintF(hedit, TEXT("%25s: %s"), (LPTSTR)TEXT("Avg Bytes Per Second"), (LPTSTR)ach); <br> <br>    AppFormatBigNumber(ach, pwfx-&gt;nBlockAlign); <br>    MEditPrintF(hedit, TEXT("%25s: %s"), (LPTSTR)TEXT("Block Alignment"), (LPTSTR)ach); <br> <br>    MEditPrintF(hedit, TEXT("%25s: %u"), (LPTSTR)TEXT("Bits Per Sample"), pwfx-&gt;wBitsPerSample); <br> <br>    if (WAVE_FORMAT_PCM != pwfx-&gt;wFormatTag) <br>    { <br>        AppFormatBigNumber(ach, pwfx-&gt;cbSize); <br>        MEditPrintF(hedit, TEXT("%25s: %s bytes\r\n"), (LPTSTR)TEXT("Extra Format Information"), (LPTSTR)ach); <br> <br>        AcmAppDumpExtraHeaderData(hedit, pwfx); <br>    } <br> <br> <br>    // <br>    //  note that we do NOT set the 'WAVE_ALLOWSYNC' bit on queries because <br>    //  the player/recorder dialog uses MCIWAVE--which cannot work with <br>    //  SYNC devices. <br>    // <br>    mmr = waveOutOpen(NULL, <br>                      guWaveOutId, <br>#if (WINVER &lt; 0x0400) <br>                      (LPWAVEFORMAT)pwfx, <br>#else <br>                      pwfx, <br>#endif <br>                      0L, 0L, WAVE_FORMAT_QUERY); <br> <br>    fCanPlayRecord = (MMSYSERR_NOERROR == mmr); <br> <br>    if (!fCanPlayRecord) <br>    { <br>        // <br>        //  this situation can happen with the 'preferred' device settings <br>        //  for the Sound Mapper. <br>        // <br>        mmr = waveInOpen(NULL, <br>                         guWaveInId, <br>#if (WINVER &lt; 0x0400) <br>                         (LPWAVEFORMAT)pwfx, <br>#else <br>                         pwfx, <br>#endif <br>                         0L, 0L, WAVE_FORMAT_QUERY); <br> <br>        fCanPlayRecord = (MMSYSERR_NOERROR == mmr); <br>    } <br> <br>AA_Display_File_Properties_Exit: <br> <br>    hmenu = GetMenu(hwnd); <br>    EnableMenuItem(hmenu, IDM_PLAYRECORD, <br>                   MF_BYCOMMAND | (fCanPlayRecord ? MF_ENABLED : MF_GRAYED)); <br>    DrawMenuBar(hwnd); <br> <br>    Edit_SetSel(hedit, (WPARAM)0, (LPARAM)0); <br> <br>    SetWindowRedraw(hedit, TRUE); <br>    AppHourGlass(FALSE); <br> <br>    return (fCanPlayRecord); <br>} // AcmAppDisplayFileProperties() </code></pre>
<p>&nbsp;</p></body>
</HTML>

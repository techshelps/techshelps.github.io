<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AADRVS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2453"></a>AADRVS.C</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br>//--------------------------------------------------------------------------; <br>// <br>//  aadrvs.c <br>// <br>//  Description: <br>//      Routines to get and display information from ACM drivers. <br>// <br>// <br>//==========================================================================; <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;mmreg.h&gt; <br>#include &lt;msacm.h&gt; <br>#include &lt;memory.h&gt; <br>#include "tlb.h" <br> <br>#include "appport.h" <br>#include "acmapp.h" <br> <br>#include "debug.h" <br> <br> <br>TCHAR   gszFormatDriversTitle[] = TEXT("Id\t4!Name\t12!Priority\t3!Support\t6!Full Name"); <br>TCHAR   gszFormatDriversList[]  = TEXT("%.04Xh\t%s\t%lu%s\t%.08lXh\t%s"); <br> <br>TCHAR   gszFormatDriverFormatsTitle[] = TEXT("Id\t4!Index\t2!Tag\t2!Support\t5!cbwfx\t2!Format"); <br>TCHAR   gszFormatDriverFormatsList[]  = TEXT("%.04Xh\t%lu\t%lu\t%.08lXh\t%u\t%-s"); <br> <br>static HACMDRIVERID     ghadidSelected; <br>static HACMDRIVER       ghadSelected; <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppDisplayDriverDetails <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hedit: <br>//   <br>//      HACMDRIVER had: <br>//   <br>//  Return (BOOL): <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppDisplayDriverDetails <br>( <br>    HWND            hedit, <br>    HACMDRIVERID    hadid <br>) <br>{ <br>    static TCHAR    szDisplayTitle[]  = TEXT("[Driver Details]\r\n"); <br> <br>    MMRESULT            mmr; <br>    ACMDRIVERDETAILS    add; <br> <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, szDisplayTitle); <br> <br>    MEditPrintF(hedit, TEXT("%25s: %.04Xh"), (LPTSTR)TEXT("Driver Identifier Handle"), hadid); <br> <br>    // <br>    // <br>    // <br>    // <br>    add.cbStruct = sizeof(add); <br>    mmr = acmDriverDetails(hadid, &amp;add, 0L); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        // <br>        //  this should never happen.. <br>        // <br>        MEditPrintF(hedit, TEXT("%25s: %.08lXh"), (LPTSTR)TEXT("ERROR GETTING DRIVER DETAILS"), mmr); <br>        return (FALSE); <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, TEXT("%25s: %lu bytes (requested %lu)"), <br>                   (LPTSTR)TEXT("Size of Driver Details"), <br>                   add.cbStruct, (DWORD)sizeof(add)); <br> <br>    // <br>    //  this would be bad <br>    // <br>    if (add.cbStruct &lt; sizeof(add)) <br>        return (0L); <br> <br>    MEditPrintF(hedit, TEXT("%25s: %.08lXh (%s)"), (LPTSTR)TEXT("FCC Type"), <br>                   add.fccType, <br>                   (ACMDRIVERDETAILS_FCCTYPE_AUDIOCODEC == add.fccType) ? <br>                   (LPTSTR)TEXT("'audc'") : (LPTSTR)TEXT("**INVALID**")); <br> <br>    MEditPrintF(hedit, TEXT("%25s: %.08lXh (%s)"), (LPTSTR)TEXT("FCC Compressor"), <br>                   add.fccComp, <br>                   (ACMDRIVERDETAILS_FCCCOMP_UNDEFINED == add.fccComp) ? <br>                   (LPTSTR)TEXT("correct") : (LPTSTR)TEXT("**INVALID**")); <br> <br>    MEditPrintF(hedit, TEXT("%25s: %u"), (LPTSTR)TEXT("Manufacturer Id"), add.wMid); <br>    MEditPrintF(hedit, TEXT("%25s: %u"), (LPTSTR)TEXT("Product Id"), add.wPid); <br> <br>    MEditPrintF(hedit, TEXT("%25s: %u.%.02u (Build %.03u)"), (LPTSTR)TEXT("ACM Version Required"), <br>                   HIWORD(add.vdwACM) &gt;&gt; 8, <br>                   HIWORD(add.vdwACM) &amp; 0x00FF, <br>                   LOWORD(add.vdwACM)); <br> <br>    MEditPrintF(hedit, TEXT("%25s: %u.%.02u (Build %.03u)"), (LPTSTR)TEXT("CODEC Version"), <br>                   HIWORD(add.vdwDriver) &gt;&gt; 8, <br>                   HIWORD(add.vdwDriver) &amp; 0x00FF, <br>                   LOWORD(add.vdwDriver)); <br> <br>    MEditPrintF(hedit, TEXT("%25s: %.08lXh"), (LPTSTR)TEXT("Standard Support"), add.fdwSupport); <br>    MEditPrintF(hedit, TEXT("%25s: %u"), (LPTSTR)TEXT("Count Format Tags"), add.cFormatTags); <br>    MEditPrintF(hedit, TEXT("%25s: %u"), (LPTSTR)TEXT("Count Filter Tags"), add.cFilterTags); <br>    MEditPrintF(hedit, TEXT("%25s: %.04Xh"), (LPTSTR)TEXT("Custom Icon Handle"), add.hicon); <br>    MEditPrintF(hedit, TEXT("%25s: '%s'"), (LPTSTR)TEXT("Short Name"), (LPTSTR)add.szShortName); <br>    MEditPrintF(hedit, TEXT("%25s: '%s'"), (LPTSTR)TEXT("Long Name"), (LPTSTR)add.szLongName); <br>    MEditPrintF(hedit, TEXT("%25s: '%s'"), (LPTSTR)TEXT("Copyright"), (LPTSTR)add.szCopyright); <br>    MEditPrintF(hedit, TEXT("%25s: '%s'"), (LPTSTR)TEXT("Licensing"), (LPTSTR)add.szLicensing); <br>    MEditPrintF(hedit, TEXT("%25s: '%s'\r\n"), (LPTSTR)TEXT("Features"), (LPTSTR)add.szFeatures); <br> <br> <br>    // <br>    // <br>    // <br>    if (0 != (ACMDRIVERDETAILS_SUPPORTF_HARDWARE &amp; add.fdwSupport)) <br>    { <br>        TCHAR       ach[40]; <br>        DWORD       dw; <br> <br>        mmr = acmMetrics((HACMOBJ)hadid, ACM_METRIC_HARDWARE_WAVE_INPUT, &amp;dw); <br>        AcmAppGetErrorString(mmr, ach); <br>        MEditPrintF(hedit, TEXT("%25s: %ld (mmr = %s, [%u])"), (LPTSTR)TEXT("Wave Input Device"), dw, (LPTSTR)ach, mmr); <br> <br>        mmr = acmMetrics((HACMOBJ)hadid, ACM_METRIC_HARDWARE_WAVE_OUTPUT, &amp;dw); <br>        AcmAppGetErrorString(mmr, ach); <br>        MEditPrintF(hedit, TEXT("%25s: %ld (mmr = %s, [%u])"), (LPTSTR)TEXT("Wave Output Device"), dw, (LPTSTR)ach, mmr); <br>    } <br> <br>    return (TRUE); <br>} // AcmAppDisplayDriverDetails() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppDisplayFormats <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hedit: <br>//   <br>//      HACMDRIVER had: <br>//   <br>//      ACMFORMATTAGDETAILS paftd: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppDisplayFormats <br>( <br>    HWND                    hedit, <br>    HACMDRIVER              had, <br>    LPACMFORMATTAGDETAILS   paftd <br>) <br>{ <br>    MMRESULT            mmr; <br>    UINT                u; <br>    ACMFORMATDETAILS    afd; <br>    PWAVEFORMATEX       pwfx; <br> <br>    if (0 == paftd-&gt;cStandardFormats) <br>        return (TRUE); <br> <br>    pwfx = (PWAVEFORMATEX)LocalAlloc(LPTR, (UINT)paftd-&gt;cbFormatSize); <br>    if (NULL == pwfx) <br>        return (FALSE); <br> <br>    // <br>    // <br>    // <br>    // <br>    for (u = 0; u &lt; paftd-&gt;cStandardFormats; u++) <br>    { <br>        afd.cbStruct        = sizeof(afd); <br>        afd.dwFormatIndex   = u; <br>        afd.dwFormatTag     = paftd-&gt;dwFormatTag; <br>        afd.fdwSupport      = 0L; <br>        afd.pwfx            = pwfx; <br>        afd.cbwfx           = paftd-&gt;cbFormatSize; <br>        afd.szFormat[0]     = '\0'; <br> <br>        mmr = acmFormatDetails(had, &amp;afd, ACM_FORMATDETAILSF_INDEX); <br>        if (MMSYSERR_NOERROR != mmr) <br>        { <br>            // <br>            //  this should never happen.. <br>            // <br>            MEditPrintF(hedit, TEXT("%25s: err = %.04Xh"), (LPTSTR)TEXT("ERROR GETTING FORMAT DETAILS"), mmr); <br>            continue; <br>        } <br> <br> <br>        // <br>        //  this would be bad <br>        // <br>        if (afd.cbStruct &lt; sizeof(afd)) <br>        { <br>            MEditPrintF(hedit, TEXT("%25s: %lu bytes (requested %lu)"), (LPTSTR)TEXT("Size of Format Details"), <br>                        afd.cbStruct, (DWORD)sizeof(afd)); <br>            continue; <br>        } <br> <br>        MEditPrintF(hedit, TEXT("%15s %u: '%s'"), (LPTSTR)TEXT("Format"), u, (LPTSTR)afd.szFormat); <br> <br>    } <br> <br>    LocalFree((HLOCAL)pwfx); <br> <br>    return (TRUE); <br>} // AcmAppDisplayFormats() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppDisplayDriverTags <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hedit: <br>//   <br>//      HACMDRIVER had: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppDisplayDriverTags <br>( <br>    HWND            hedit, <br>    HACMDRIVER      had <br>) <br>{ <br>    static TCHAR    szDisplayTitle[]      = TEXT("[Driver Tags]\r\n"); <br>    static TCHAR    szDisplayFormatTags[] = TEXT("\r\n[Format Tags]"); <br>    static TCHAR    szDisplayFilterTags[] = TEXT("\r\n[Filter Tags]"); <br> <br>    TCHAR               ach[APP_MAX_STRING_CHARS]; <br>    ACMDRIVERDETAILS    add; <br>    MMRESULT            mmr; <br>    UINT                u; <br>    HACMDRIVERID        hadid; <br> <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, szDisplayTitle); <br> <br>    mmr = acmDriverID((HACMOBJ)had, &amp;hadid, 0L); <br>    MEditPrintF(hedit, TEXT("%25s: %.04Xh"), (LPTSTR)TEXT("Driver Identifier Handle"), hadid); <br>    MEditPrintF(hedit, TEXT("%25s: %.04Xh"), (LPTSTR)TEXT("Driver Handle"), had); <br> <br>    // <br>    // <br>    // <br>    // <br>    add.cbStruct = sizeof(add); <br>    mmr = acmDriverDetails(hadid, &amp;add, 0L); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        // <br>        //  this should never happen.. <br>        // <br>        MEditPrintF(hedit, TEXT("%25s: %.08lXh"), (LPTSTR)TEXT("ERROR GETTING INFO"), mmr); <br>        return (FALSE); <br>    } <br> <br> <br>    MEditPrintF(hedit, TEXT("%25s: '%s'"), (LPTSTR)TEXT("Name"), (LPTSTR)add.szShortName); <br>    MEditPrintF(hedit, TEXT("%25s: %u"), (LPTSTR)TEXT("Count Format Tags"), add.cFormatTags); <br>    MEditPrintF(hedit, TEXT("%25s: %u"), (LPTSTR)TEXT("Count Filter Tags"), add.cFilterTags); <br> <br>    if (0 != add.cFormatTags) <br>        MEditPrintF(hedit, szDisplayFormatTags); <br> <br>    for (u = 0; u &lt; add.cFormatTags; u++) <br>    { <br>        ACMFORMATTAGDETAILS aftd; <br>        WAVEFORMATEX        wfx; <br> <br>        MEditPrintF(hedit, TEXT("\r\n%25s: %u"), (LPTSTR)TEXT("Format Tag Index"), u); <br> <br>        _fmemset(&amp;aftd, 0, sizeof(aftd)); <br> <br>        aftd.cbStruct         = sizeof(aftd); <br>        aftd.dwFormatTagIndex = u; <br>        mmr = acmFormatTagDetails(had, &amp;aftd, ACM_FORMATTAGDETAILSF_INDEX); <br>        if (MMSYSERR_NOERROR != mmr) <br>        { <br>            MEditPrintF(hedit, TEXT("%25s: %.08lXh"), (LPTSTR)TEXT("ERROR GETTING TAGS"), mmr); <br>            return (FALSE); <br>        } <br> <br>        MEditPrintF(hedit, TEXT("%25s: %lu bytes (requested %lu)"), <br>                    (LPTSTR)TEXT("Size of Tag Details"), <br>                    aftd.cbStruct, (DWORD)sizeof(aftd)); <br> <br>        // <br>        //  this would be bad <br>        // <br>        if (aftd.cbStruct &lt; sizeof(aftd)) <br>            continue; <br> <br>        wfx.wFormatTag = LOWORD(aftd.dwFormatTag); <br>        AcmAppGetFormatDescription(&amp;wfx, ach, NULL); <br>        MEditPrintF(hedit, TEXT("%25s: [%lu], %s"), (LPTSTR)TEXT("Format Tag"), aftd.dwFormatTag, (LPTSTR)ach); <br>        MEditPrintF(hedit, TEXT("%25s: %u bytes"), (LPTSTR)TEXT("Format Size (Max)"), aftd.cbFormatSize); <br>        MEditPrintF(hedit, TEXT("%25s: %.08lXh"), (LPTSTR)TEXT("Standard Support"), aftd.fdwSupport); <br>        MEditPrintF(hedit, TEXT("%25s: %lu"), (LPTSTR)TEXT("Standard Formats"), aftd.cStandardFormats); <br>        MEditPrintF(hedit, TEXT("%25s: '%s'"), (LPTSTR)TEXT("Format Tag Name"), (LPTSTR)aftd.szFormatTag); <br> <br>        AcmAppDisplayFormats(hedit, had, &amp;aftd); <br>    } <br> <br>    if (0 != add.cFilterTags) <br>        MEditPrintF(hedit, szDisplayFilterTags); <br> <br>    for (u = 0; u &lt; add.cFilterTags; u++) <br>    { <br>        ACMFILTERTAGDETAILS aftd; <br>        WAVEFILTER          wfltr; <br> <br>        MEditPrintF(hedit, TEXT("%25s: %u"), (LPTSTR)TEXT("Filter Tag Index"), u); <br> <br>        _fmemset(&amp;aftd, 0, sizeof(aftd)); <br> <br>        aftd.cbStruct         = sizeof(aftd); <br>        aftd.dwFilterTagIndex = u; <br>        mmr = acmFilterTagDetails(had, &amp;aftd, ACM_FILTERTAGDETAILSF_INDEX); <br>        if (MMSYSERR_NOERROR != mmr) <br>        { <br>            // <br>            // <br>            // <br>            MEditPrintF(hedit, TEXT("%25s: %.08lXh"), (LPTSTR)TEXT("ERROR GETTING TAGS"), mmr); <br> <br>            return (FALSE); <br>        } <br> <br>        MEditPrintF(hedit, TEXT("%25s: %lu bytes (requested %lu)"), <br>                    (LPTSTR)TEXT("Size of Tag Details"), <br>                    aftd.cbStruct, (DWORD)sizeof(aftd)); <br> <br>        // <br>        //  this would be bad <br>        // <br>        if (aftd.cbStruct &lt; sizeof(aftd)) <br>            continue; <br> <br>        wfltr.dwFilterTag = aftd.dwFilterTag; <br>        AcmAppGetFilterDescription(&amp;wfltr, ach, NULL); <br>        MEditPrintF(hedit, TEXT("%25s: [%lu], %s"), (LPTSTR)TEXT("Filter Tag"), aftd.dwFilterTag, (LPTSTR)ach); <br>        MEditPrintF(hedit, TEXT("%25s: %lu bytes"), (LPTSTR)TEXT("Format Size (Max)"), aftd.cbFilterSize); <br>        MEditPrintF(hedit, TEXT("%25s: %.08lXh"), (LPTSTR)TEXT("Standard Support"), aftd.fdwSupport); <br>        MEditPrintF(hedit, TEXT("%25s: %lu"), (LPTSTR)TEXT("Standard Filters"), aftd.cStandardFilters); <br>        MEditPrintF(hedit, TEXT("%25s: '%s'\r\n"), (LPTSTR)TEXT("Filter Tag Name"), (LPTSTR)aftd.szFilterTag); <br>    } <br> <br> <br>    return (TRUE); <br>} // AcmAppDisplayDriverTags() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppDriverDetailsDlgProc <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      UINT uMsg: <br>//   <br>//      WPARAM wParam: <br>//   <br>//      LPARAM lParam: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppDriverDetailsDlgProc <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    HACMDRIVERID        hadid; <br>    HWND                hedit; <br>    UINT                uId; <br> <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            hedit = GetDlgItem(hwnd, IDD_AADETAILS_EDIT_DETAILS); <br>            SetWindowFont(hedit, ghfontApp, FALSE); <br> <br>            // <br>            //  clear the display <br>            // <br>            AppHourGlass(TRUE); <br>            SetWindowRedraw(hedit, FALSE); <br>            MEditPrintF(hedit, NULL); <br> <br>            hadid = (HACMDRIVERID)(UINT)lParam; <br>            if (NULL == hadid) <br>            { <br>                MEditPrintF(hedit, TEXT("\r\n\r\nhmm...")); <br>            } <br>            else <br>            { <br>                AcmAppDisplayDriverDetails(hedit, hadid); <br>            } <br> <br>            Edit_SetSel(hedit, (WPARAM)0, (LPARAM)0); <br> <br>            SetWindowRedraw(hedit, TRUE); <br>            AppHourGlass(FALSE); <br> <br>            return (TRUE); <br> <br>        case WM_COMMAND: <br>            uId = GET_WM_COMMAND_ID(wParam, lParam); <br> <br>            if ((IDOK == uId) || (IDCANCEL == uId)) <br>            { <br>                EndDialog(hwnd, (IDOK == uId)); <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // AcmAppDriverDetailsDlgProc() <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppDriverFormatDetailsDlgProc <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      UINT uMsg: <br>//   <br>//      WPARAM wParam: <br>//   <br>//      LPARAM lParam: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppDriverFormatDetailsDlgProc <br>( <br>    HWND            hwnd, <br>    UINT            uMsg, <br>    WPARAM          wParam, <br>    LPARAM          lParam <br>) <br>{ <br>    HACMDRIVERID        hadid; <br>    HWND                hlb; <br>    HWND                hedit; <br>    int                 n; <br>    UINT                uId; <br> <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            hlb = GetDlgItem(GetParent(hwnd), IDD_AADRIVERFORMATS_LIST_FORMATS); <br>            n   = ListBox_GetCurSel(hlb); <br>            if (LB_ERR == n) <br>                return (TRUE); <br> <br>            hadid = (HACMDRIVERID)(UINT)ListBox_GetItemData(hlb, n); <br>            hedit = GetDlgItem(hwnd, IDD_AADETAILS_EDIT_DETAILS); <br>            SetWindowFont(hedit, ghfontApp, FALSE); <br> <br>            // <br>            //  clear the display <br>            // <br>            AppHourGlass(TRUE); <br>            SetWindowRedraw(hedit, FALSE); <br>            MEditPrintF(hedit, NULL); <br> <br>            MEditPrintF(hedit, TEXT("\r\n\r\nFormat Details!")); <br> <br>            Edit_SetSel(hedit, (WPARAM)0, (LPARAM)0); <br> <br>            SetWindowRedraw(hedit, TRUE); <br>            AppHourGlass(FALSE); <br>            return (TRUE); <br> <br>        case WM_COMMAND: <br>            uId = GET_WM_COMMAND_ID(wParam, lParam); <br>            if ((IDOK == uId) || (IDCANCEL == uId)) <br>            { <br>                EndDialog(hwnd, (IDOK == uId)); <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // AcmAppDriverFormatDetailsDlgProc() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppDriverFormatEnumCallback <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HACMDRIVERID hadid: <br>//   <br>//      DWORD dwInstance: <br>//   <br>//      DWORD fdwSupport: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppDriverFormatEnumCallback <br>( <br>    HACMDRIVERID        hadid, <br>    LPACMFORMATDETAILS  pafd, <br>    DWORD               dwInstance, <br>    DWORD               fdwSupport <br>) <br>{ <br>    TCHAR               ach[APP_MAX_STRING_CHARS]; <br>    HWND                hlb; <br>    int                 nIndex; <br>    LPARAM              lParam; <br>    UINT                cbwfx; <br> <br>    // <br>    // <br>    // <br>    hlb = (HWND)(UINT)dwInstance; <br> <br>    cbwfx = SIZEOF_WAVEFORMATEX(pafd-&gt;pwfx); <br> <br>    wsprintf(ach, gszFormatDriverFormatsList, <br>             hadid, <br>             pafd-&gt;dwFormatIndex, <br>             pafd-&gt;dwFormatTag, <br>             pafd-&gt;fdwSupport, <br>             cbwfx, <br>             (LPTSTR)pafd-&gt;szFormat); <br> <br>    AcmAppDebugLog(ach); <br>    AcmAppDebugLog(TEXT("\r\n")); <br> <br>                 <br>    nIndex = ListBox_AddString(hlb, ach); <br>    lParam = (LPARAM)(UINT)hadid; <br>    ListBox_SetItemData(hlb, nIndex, lParam); <br> <br>    // <br>    //  return TRUE to continue with enumeration <br>    // <br>    return (TRUE); <br>} // AcmAppDriverFormatEnumCallback() <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL AcmAppDriverFormatsDlgProc <br>// <br>//  Description: <br>//      This dialog procedure is used to display driver formats. <br>// <br>//  Arguments: <br>//      HWND hwnd: Handle to window. <br>// <br>//      UINT uMsg: Message being sent to the window. <br>// <br>//      WPARAM wParam: Specific argument to message. <br>// <br>//      LPARAM lParam: Specific argument to message. <br>// <br>//  Return (BOOL): <br>//      The return value is specific to the message that was received. For <br>//      the most part, it is FALSE if this dialog procedure does not handle <br>//      a message. <br>// <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppDriverFormatsDlgProc <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    static PTABBEDLISTBOX   ptlb; <br>    HWND                    hwndStatic; <br>    MMRESULT                mmr; <br>    RECT                    rc; <br>    PAINTSTRUCT             ps; <br>    UINT                    uId; <br>    UINT                    uCode; <br> <br>    HACMDRIVER              had; <br>    ACMFORMATDETAILS        afd; <br>    PWAVEFORMATEX           pwfx; <br>    DWORD                   cbwfx; <br> <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            hwndStatic = GetDlgItem(hwnd, IDD_AADRIVERFORMATS_STATIC_POSITION); <br> <br>            GetWindowRect(hwndStatic, &amp;rc); <br>            ScreenToClient(hwnd, (LPPOINT)&amp;rc.left); <br>            ScreenToClient(hwnd, (LPPOINT)&amp;rc.right); <br> <br>            ShowWindow(hwndStatic, SW_HIDE); <br> <br>            EnableWindow(GetDlgItem(hwnd, IDD_AADRIVERFORMATS_BTN_DETAILS), FALSE); <br> <br>            ptlb = TlbCreate(hwnd, IDD_AADRIVERFORMATS_LIST_FORMATS, &amp;rc); <br>            if (NULL == ptlb) <br>                return (TRUE); <br> <br>            TlbSetFont(ptlb, GetStockFont(SYSTEM_FONT), FALSE); <br>            TlbSetTitleAndTabs(ptlb, gszFormatDriverFormatsTitle, FALSE); <br> <br>            SetWindowPos(ptlb-&gt;hlb, GetDlgItem(hwnd, IDOK),  <br>                            0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE); <br> <br>            ListBox_ResetContent(ptlb-&gt;hlb); <br> <br>            AcmAppDebugLog(NULL); <br> <br>            had = (HACMDRIVER)(UINT)lParam; <br> <br>            mmr = acmMetrics((HACMOBJ)had, ACM_METRIC_MAX_SIZE_FORMAT, &amp;cbwfx); <br>            if (MMSYSERR_NOERROR != mmr) <br>                return (TRUE); <br> <br>            pwfx = (PWAVEFORMATEX)LocalAlloc(LPTR, (UINT)cbwfx); <br>            if (NULL == pwfx) <br>                return (TRUE); <br> <br>            _fmemset(&amp;afd, 0, sizeof(afd)); <br> <br>            afd.cbStruct    = sizeof(afd); <br>            afd.dwFormatTag = WAVE_FORMAT_UNKNOWN; <br>            afd.pwfx        = pwfx; <br>            afd.cbwfx       = cbwfx; <br> <br>            // <br>            // <br>            // <br>            SetWindowRedraw(ptlb-&gt;hlb, FALSE); <br> <br>            mmr = acmFormatEnum(had, <br>                                &amp;afd, <br>                                AcmAppDriverFormatEnumCallback, <br>                                (DWORD)(UINT)ptlb-&gt;hlb, <br>                                0L); <br>            if (MMSYSERR_NOERROR == mmr) <br>            { <br>                ListBox_SetCurSel(ptlb-&gt;hlb, 0); <br>                EnableWindow(GetDlgItem(hwnd, IDD_AADRIVERFORMATS_BTN_DETAILS), TRUE); <br>            } <br> <br>            SetWindowRedraw(ptlb-&gt;hlb, TRUE); <br>            LocalFree((HLOCAL)pwfx); <br> <br>            return (TRUE); <br> <br>        case WM_PAINT: <br>            if (NULL != ptlb) <br>            { <br>                BeginPaint(hwnd, &amp;ps); <br>                TlbPaint(ptlb, hwnd, ps.hdc); <br>                EndPaint(hwnd, &amp;ps); <br>            } <br>            break; <br> <br>        case WM_COMMAND: <br>            uId   = GET_WM_COMMAND_ID(wParam, lParam); <br>            uCode = GET_WM_COMMAND_CMD(wParam, lParam); <br>            switch (uId) <br>            { <br>                case IDOK: <br>                case IDCANCEL: <br>                    if (NULL != ptlb) <br>                    { <br>                        // <br>                        //  hadidk! don't destroy the listbox window, but <br>                        //  free all other memory for TLB. the listbox <br>                        //  window will be destroyed when the dialog is <br>                        //  destroyed. <br>                        // <br>                        ptlb-&gt;hlb = NULL; <br> <br>                        TlbDestroy(ptlb); <br>                        ptlb = NULL; <br>                    } <br> <br>                    EndDialog(hwnd, (IDOK == uId)); <br>                    break; <br> <br>                case IDD_AADRIVERFORMATS_BTN_DETAILS: <br>                    DialogBoxParam(ghinst, <br>                                   DLG_AADETAILS, <br>                                   hwnd, <br>                                   AcmAppDriverFormatDetailsDlgProc, <br>                                   uId); <br>                    break; <br> <br>                case IDD_AADRIVERFORMATS_LIST_FORMATS: <br>                    switch (uCode) <br>                    { <br>                        case LBN_SELCHANGE: <br>                            break; <br> <br>                        case LBN_DBLCLK: <br>                            DialogBoxParam(ghinst, <br>                                           DLG_AADETAILS, <br>                                           hwnd, <br>                                           AcmAppDriverFormatDetailsDlgProc, <br>                                           IDD_AADRIVERFORMATS_BTN_DETAILS); <br>                            break; <br>                    } <br>                    break; <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // AcmAppDriverFormatsDlgProc() <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppDriverEnumCallback <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HACMDRIVERID hadid: <br>//   <br>//      DWORD dwInstance: <br>//   <br>//      DWORD fdwSupport: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppDriverEnumCallback <br>( <br>    HACMDRIVERID        hadid, <br>    DWORD               dwInstance, <br>    DWORD               fdwSupport <br>) <br>{ <br>    static TCHAR    szBogus[]       = TEXT("????"); <br> <br>    MMRESULT            mmr; <br>    TCHAR               ach[APP_MAX_STRING_CHARS]; <br>    HWND                hlb; <br>    int                 n; <br>    ACMDRIVERDETAILS    add; <br>    BOOL                fDisabled; <br>    DWORD               dwPriority; <br> <br>    // <br>    // <br>    // <br>    hlb = (HWND)(UINT)dwInstance; <br> <br>    add.cbStruct = sizeof(add); <br>    mmr = acmDriverDetails(hadid, &amp;add, 0L); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        lstrcpy(add.szShortName, szBogus); <br>        lstrcpy(add.szLongName,  szBogus); <br>    } <br> <br>    dwPriority = (DWORD)-1L; <br>    acmMetrics((HACMOBJ)hadid, ACM_METRIC_DRIVER_PRIORITY, &amp;dwPriority); <br> <br>    fDisabled = (0 != (ACMDRIVERDETAILS_SUPPORTF_DISABLED &amp; fdwSupport)); <br> <br>    wsprintf(ach, gszFormatDriversList, <br>             hadid, <br>             (LPTSTR)add.szShortName, <br>             dwPriority, <br>             fDisabled ? (LPTSTR)TEXT(" (disabled)") : (LPTSTR)gszNull, <br>             fdwSupport, <br>             (LPTSTR)add.szLongName); <br> <br>    AcmAppDebugLog(ach); <br>    AcmAppDebugLog(TEXT("\r\n")); <br>                 <br>    n = ListBox_AddString(hlb, ach); <br>    ListBox_SetItemData(hlb, n, (LPARAM)(UINT)hadid); <br> <br> <br>    // <br>    //  return TRUE to continue with enumeration (FALSE will stop the <br>    //  enumerator) <br>    // <br>    return (TRUE); <br>} // AcmAppDriverEnumCallback() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  HACMDRIVERID AcmAppGetSelectedDriver <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//  Return (HACMDRIVERID): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>HACMDRIVERID FNLOCAL AcmAppGetSelectedDriver <br>( <br>    HWND            hwnd <br>) <br>{ <br>    HWND            hlb; <br>    UINT            u; <br>    HACMDRIVERID    hadid; <br> <br>    hlb = GetDlgItem(hwnd, IDD_AADRIVERS_LIST_DRIVERS); <br> <br>    u = (UINT)ListBox_GetCurSel(hlb); <br>    if (LB_ERR == u) <br>    { <br>        DPF(0, "!AcmAppGetSelectedDriver: apparently there is no selected driver?"); <br>        return (NULL); <br>    } <br> <br>    hadid = (HACMDRIVERID)(UINT)ListBox_GetItemData(hlb, u); <br>    if (NULL == hadid) <br>    { <br>        DPF(0, "!AcmAppGetSelectedDriver: NULL item data for selected driver!!?"); <br>        return (NULL); <br>    } <br> <br>    return (hadid); <br>} // AcmAppGetSelectedDriver() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppDriverSelected <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>HACMDRIVER FNLOCAL AcmAppDriverSelected <br>( <br>    HWND                    hwnd <br>) <br>{ <br>    LRESULT             lr; <br>    MMRESULT            mmr; <br>    BOOL                f; <br>    HACMDRIVERID        hadid; <br>    HACMDRIVER          had; <br>    DWORD               fdwSupport; <br> <br>    f = FALSE; <br> <br>    // <br>    // <br>    // <br>    if (NULL != ghadSelected) <br>    { <br>        mmr = acmDriverClose(ghadSelected, 0L); <br>        if (MMSYSERR_NOERROR != mmr) <br>        { <br>            DPF(0, "!AcmAppDriverSelected: driver %.04Xh failed to close! mmr=%u", ghadSelected, mmr); <br>        } <br> <br>        ghadSelected = NULL; <br>    } <br> <br>    had = NULL; <br> <br>    // <br>    // <br>    // <br>    hadid = AcmAppGetSelectedDriver(hwnd); <br>    if (NULL != hadid) <br>    { <br>        mmr = acmMetrics((HACMOBJ)hadid, ACM_METRIC_DRIVER_SUPPORT, &amp;fdwSupport); <br>        if (MMSYSERR_NOERROR != mmr) <br>        { <br>            fdwSupport = ACMDRIVERDETAILS_SUPPORTF_DISABLED; <br> <br>            // <br>            //  !!! this should NEVER EVER EVER HAPPEN !!! <br>            // <br>            DPF(0, "!AcmAppDriverSelected: driver id %.04Xh failed to give support! mmr=%u", hadid, mmr); <br>        } <br> <br>        if (0 == (ACMDRIVERDETAILS_SUPPORTF_DISABLED &amp; fdwSupport)) <br>        { <br>            mmr = acmDriverOpen(&amp;had, hadid, 0L); <br>            if (MMSYSERR_NOERROR != mmr) <br>            { <br>                DPF(0, "!AcmAppDriverSelected: driver id %.04Xh failed to open! mmr=%u", hadid, mmr); <br>            } <br>        } <br> <br>        // <br>        // <br>        // <br>        EnableWindow(GetDlgItem(hwnd, IDD_AADRIVERS_BTN_DETAILS), TRUE); <br> <br>        lr = acmDriverMessage((HACMDRIVER)hadid, ACMDM_DRIVER_ABOUT, -1L, 0L); <br>        f = (MMSYSERR_NOERROR == lr); <br>        EnableWindow(GetDlgItem(hwnd, IDD_AADRIVERS_BTN_ABOUT), f); <br> </code></pre>
<p>
</p>
<pre><code>lr = acmDriverMessage((HACMDRIVER)hadid, DRV_QUERYCONFIGURE, 0L, 0L); <br>        f = (0L != lr); <br>        EnableWindow(GetDlgItem(hwnd, IDD_AADRIVERS_BTN_CONFIG), f); <br>    } <br>    else <br>    { <br>        EnableWindow(GetDlgItem(hwnd, IDD_AADRIVERS_BTN_DETAILS), FALSE); <br>        EnableWindow(GetDlgItem(hwnd, IDD_AADRIVERS_BTN_ABOUT), FALSE); <br>        EnableWindow(GetDlgItem(hwnd, IDD_AADRIVERS_BTN_CONFIG), FALSE); <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    if (NULL == had) <br>    { <br>        // <br>        // <br>        EnableWindow(GetDlgItem(hwnd, IDD_AADRIVERS_BTN_FORMATS), FALSE); <br>        EnableWindow(GetDlgItem(hwnd, IDD_AADRIVERS_BTN_FILTERS), FALSE); <br>    } <br>    else <br>    { <br>        f = (0 == (ACMDRIVERDETAILS_SUPPORTF_DISABLED &amp; fdwSupport)); <br>        EnableWindow(GetDlgItem(hwnd, IDD_AADRIVERS_BTN_FORMATS), f); <br> <br>        f = (0 != (ACMDRIVERDETAILS_SUPPORTF_FILTER &amp; fdwSupport)); <br>        EnableWindow(GetDlgItem(hwnd, IDD_AADRIVERS_BTN_FILTERS), f); <br>    } <br> <br>    // <br>    // <br>    // <br>    ghadidSelected = hadid; <br>    ghadSelected   = had; <br> <br>    return (had); <br>} // AcmAppDriverSelected() <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL AcmAppDriversDlgProc <br>// <br>//  Description: <br>//      This dialog procedure is used to display ACM driver capabilities. <br>// <br>//  Arguments: <br>//      HWND hwnd: Handle to window. <br>// <br>//      UINT uMsg: Message being sent to the window. <br>// <br>//      WPARAM wParam: Specific argument to message. <br>// <br>//      LPARAM lParam: Specific argument to message. <br>// <br>//  Return (BOOL): <br>//      The return value is specific to the message that was received. For <br>//      the most part, it is FALSE if this dialog procedure does not handle <br>//      a message. <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppDriversDlgProc <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    PTABBEDLISTBOX      ptlb; <br>    HWND                hstat; <br>    MMRESULT            mmr; <br>    LRESULT             lr; <br>    RECT                rc; <br>    PAINTSTRUCT         ps; <br>    UINT                uId; <br>    UINT                uCode; <br>    UINT                u; <br> <br> <br>    ptlb = (PTABBEDLISTBOX)(UINT)GetWindowLong(hwnd, DWL_USER); <br> <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            hstat = GetDlgItem(hwnd, IDD_AADRIVERS_STATIC_POSITION); <br> <br>            GetWindowRect(hstat, &amp;rc); <br>            ScreenToClient(hwnd, (LPPOINT)&amp;rc.left); <br>            ScreenToClient(hwnd, (LPPOINT)&amp;rc.right); <br> <br>            ShowWindow(hstat, SW_HIDE); <br> <br>            ptlb = TlbCreate(hwnd, IDD_AADRIVERS_LIST_DRIVERS, &amp;rc); <br>            SetWindowLong(hwnd, DWL_USER, (LONG)(UINT)ptlb); <br>            if (NULL == ptlb) <br>            { <br>                EndDialog(hwnd, FALSE); <br>                return (TRUE); <br>            } <br> <br>            // <br>            // <br>            // <br>            TlbSetFont(ptlb, GetStockFont(SYSTEM_FONT), FALSE); <br>            TlbSetTitleAndTabs(ptlb, gszFormatDriversTitle, FALSE); <br> <br>            SetWindowPos(ptlb-&gt;hlb, GetDlgItem(hwnd, IDOK),  <br>                            0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE); <br> <br>            SendMessage(hwnd, WM_ACMAPP_ACM_NOTIFY, 0, 0L); <br>            return (TRUE); <br> <br> <br>        case WM_PAINT: <br>            if (NULL != ptlb) <br>            { <br>                BeginPaint(hwnd, &amp;ps); <br>                TlbPaint(ptlb, hwnd, ps.hdc); <br>                EndPaint(hwnd, &amp;ps); <br>            } <br>            break; <br> <br> <br>        case WM_ACMAPP_ACM_NOTIFY: <br>            u = (UINT)ListBox_GetCurSel(ptlb-&gt;hlb); <br>            if (LB_ERR == u) <br>            { <br>                u = 0; <br>            } <br> <br>            SetWindowRedraw(ptlb-&gt;hlb, FALSE); <br>            ListBox_ResetContent(ptlb-&gt;hlb); <br> <br>            AcmAppDebugLog(NULL); <br> <br>            // <br>            // <br>            // <br>            mmr = acmDriverEnum(AcmAppDriverEnumCallback, <br>                                (DWORD)(UINT)ptlb-&gt;hlb, <br>                                ACM_DRIVERENUMF_DISABLED); <br>            if (MMSYSERR_NOERROR != mmr) <br>            { <br>                // <br>                //  this will let us know something is wrong! <br>                // <br>                EnableWindow(GetDlgItem(hwnd, IDOK), FALSE); <br>            } <br> <br>            ListBox_SetCurSel(ptlb-&gt;hlb, u); <br>            SetWindowRedraw(ptlb-&gt;hlb, TRUE); <br> <br>            AcmAppDriverSelected(hwnd); <br>            break; <br> <br> <br>        case WM_COMMAND: <br>            uId   = GET_WM_COMMAND_ID(wParam, lParam); <br>            uCode = GET_WM_COMMAND_CMD(wParam, lParam); <br>            switch (uId) <br>            { <br>                case IDOK: <br>                case IDCANCEL: <br>                    if (NULL != ptlb) <br>                    { <br>                        // <br>                        //  hadidk! don't destroy the listbox window, but <br>                        //  free all other memory for TLB. the listbox <br>                        //  window will be destroyed when the dialog is <br>                        //  destroyed. <br>                        // <br>                        ptlb-&gt;hlb = NULL; <br> <br>                        TlbDestroy(ptlb); <br>                        ptlb = NULL; <br>                    } <br> <br>                    if (NULL != ghadSelected) <br>                    { <br>                        acmDriverClose(ghadSelected, 0L); <br>                        ghadSelected = NULL; <br>                    } <br> <br>                    EndDialog(hwnd, (IDOK == uId)); <br>                    break; <br> <br>                case IDD_AADRIVERS_BTN_DETAILS: <br>                    DialogBoxParam(ghinst, <br>                                   DLG_AADETAILS, <br>                                   hwnd, <br>                                   AcmAppDriverDetailsDlgProc, <br>                                   (LPARAM)(UINT)ghadidSelected); <br>                    break; <br> <br>                case IDD_AADRIVERS_BTN_FORMATS: <br>                    if (NULL != ghadSelected) <br>                    { <br>                        DialogBoxParam(ghinst, <br>                                       DLG_AADRIVERFORMATS, <br>                                       hwnd, <br>                                       AcmAppDriverFormatsDlgProc, <br>                                       (LPARAM)(UINT)ghadSelected); <br>                    } <br>                    break; <br> <br>                case IDD_AADRIVERS_BTN_FILTERS: <br>#if 0 <br>                    if (NULL != ghadSelected) <br>                    { <br>                        DialogBoxParam(ghinst, <br>                                       DLG_AADRIVERFILTERS, <br>                                       hwnd, <br>                                       AcmAppDriverFiltersDlgProc, <br>                                       (LPARAM)(UINT)ghadSelected); <br>                    } <br>#endif <br>                    break; <br> <br> <br>                case IDD_AADRIVERS_BTN_CONFIG: <br>                    if (NULL == ghadidSelected) <br>                        break; <br> <br>                    lr = acmDriverMessage((HACMDRIVER)ghadidSelected, <br>                                          DRV_CONFIGURE, <br>                                          (LPARAM)(UINT)hwnd, <br>                                          0L); <br>                    switch (lr) <br>                    { <br>                        case DRVCNF_CANCEL: <br>                            // <br>                            //  user canceled the configuration (no <br>                            //  configuration information was changed) <br>                            // <br>                            break; <br> <br>                        case DRVCNF_OK: <br>                            // <br>                            //  user changed AND accepted configuration <br>                            //  changes--applications should refresh <br>                            //  anything they have for this driver <br>                            // <br>                            break; <br> <br>                        case DRVCNF_RESTART: <br>                            // <br>                            //  user changed and accepted configuration <br>                            //  changes--however, Windows must be <br>                            //  restarted for the changes to take  <br>                            //  affect. <br>                            // <br>#pragma message("----AcmAppDriversDlgProc: must do DRVCNF_RESTART!") <br>                            break; <br> <br>                        default: <br>                            DPF(0, "!configure: driver returned bogus value=%lu!", lr); <br>                            break; <br>                    } <br>                    break; <br> <br>                case IDD_AADRIVERS_BTN_ABOUT: <br>                    if (NULL != ghadidSelected) <br>                    { <br>                        // <br>                        //  some driver was actually silly enough to provide <br>                        //  a custom about box... i'm glad i don't have to <br>                        //  port, maintain, and support this driver! <br>                        // <br>                        lr = acmDriverMessage((HACMDRIVER)ghadidSelected, <br>                                              ACMDM_DRIVER_ABOUT, <br>                                              (LPARAM)(UINT)hwnd, <br>                                              0L); <br>                    } <br>                    break; <br> <br> <br>                case IDD_AADRIVERS_BTN_ABLE: <br>                    if (NULL != ghadidSelected) <br>                    { <br>                        DWORD       fdwSupport; <br>                        DWORD       fdwPriority; <br> <br>                        mmr = acmMetrics((HACMOBJ)ghadidSelected, <br>                                         ACM_METRIC_DRIVER_SUPPORT, <br>                                         &amp;fdwSupport); <br> <br>                        if (MMSYSERR_NOERROR != mmr) <br>                        { <br>                            MessageBeep(0); <br>                            break; <br>                        } <br> <br>                        if (0 == (ACMDRIVERDETAILS_SUPPORTF_DISABLED &amp; fdwSupport)) <br>                        { <br>                            fdwPriority = ACM_DRIVERPRIORITYF_DISABLE; <br>                        } <br>                        else <br>                        { <br>                            fdwPriority = ACM_DRIVERPRIORITYF_ENABLE; <br>                        } <br> <br>                        mmr = acmDriverPriority(ghadidSelected, <br>                                                0L, <br>                                                fdwPriority); <br>                        if (MMSYSERR_NOERROR != mmr) <br>                        { <br>                            MessageBeep(0); <br>                            break; <br>                        } <br>                    } <br>                    break; <br> <br> <br>                case IDD_AADRIVERS_BTN_TOTOP: <br>                    if (NULL != ghadidSelected) <br>                    { <br>                        mmr = acmDriverPriority(ghadidSelected, 1, 0L); <br>                        if (MMSYSERR_NOERROR != mmr) <br>                        { <br>                            MessageBeep(0); <br>                            break; <br>                        } <br>                    } <br>                    break; <br> <br> <br>                case IDD_AADRIVERS_LIST_DRIVERS: <br>                    switch (uCode) <br>                    { <br>                        case LBN_SELCHANGE: <br>                            AcmAppDriverSelected(hwnd); <br>                            break; <br> <br>                        case LBN_DBLCLK: <br>                            if (GetKeyState(VK_CONTROL) &lt; 0) <br>                            { <br>                                uId = IDD_AADRIVERS_BTN_ABLE; <br>                            } <br>                            else if (GetKeyState(VK_SHIFT) &lt; 0) <br>                            { <br>                                uId = IDD_AADRIVERS_BTN_TOTOP; <br>                            } <br>                            else <br>                            { <br>                                uId = IDD_AADRIVERS_BTN_DETAILS; <br>                            } <br> <br>                            FORWARD_WM_COMMAND(hwnd, <br>                                               uId, <br>                                               GetDlgItem(hwnd, uId), <br>                                               1, <br>                                               SendMessage); <br>                            break; <br>                    } <br>                    break; <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // AcmAppDriversDlgProc() </code></pre>
<p>&nbsp;</p></body>
</HTML>

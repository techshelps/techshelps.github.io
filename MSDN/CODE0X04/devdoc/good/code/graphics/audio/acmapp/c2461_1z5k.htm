<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AACHOOSE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2468"></a>AACHOOSE.C</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>//  aachoose.c <br>// <br>//  Description: <br>//      Contains dialog procedures and user-interface functions which allow <br>//      the user to select ACM drivers and wave formats. <br>// <br>// <br>//==========================================================================; <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;memory.h&gt; <br>#include &lt;stdlib.h&gt; <br> <br>#include &lt;mmreg.h&gt; <br>#include &lt;msacm.h&gt; <br> <br>#include "muldiv32.h" <br> <br>#include "appport.h" <br>#include "waveio.h" <br>#include "acmapp.h" <br> <br>#include "debug.h" <br> <br> <br>TCHAR           gszBogus[]      = TEXT("????"); <br> <br>TCHAR BCODE     gszAcmAppHelpFormat[] = TEXT("choo_win.hlp"); <br>TCHAR BCODE     gszAcmAppHelpFilter[] = TEXT("fil_win.hlp"); <br> <br>LPTSTR          gpszAcmAppHelp; <br>UINT            guMsgHelp; <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>typedef struct tAAFORMATENUM { <br>    DWORD    fdwEnum; <br>    LPWAVEFORMATEX  pwfxEnum; <br>} AAFORMATENUM, NEAR *NPAAFORMATENUM, *PAAFORMATENUM, FAR *LPAAFORMATENUM; <br>     <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL AcmAppDlgProcFormatStyle <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: Handle to window. <br>// <br>//      UINT uMsg: Message being sent to the window. <br>// <br>//      WPARAM wParam: Specific argument to message. <br>// <br>//      LPARAM lParam: Specific argument to message. <br>// <br>//  Return (BOOL): <br>//      The return value is specific to the message that was received. For <br>//      the most part, it is FALSE if this dialog procedure does not handle <br>//      a message. <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppDlgProcFormatStyle <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    PACMFORMATCHOOSE    pafc; <br>    HFONT               hfont; <br>    UINT                uId; <br>    BOOL                f; <br>    DWORD               fdwStyle; <br> <br>    pafc = (PACMFORMATCHOOSE)(UINT)GetWindowLong(hwnd, DWL_USER); <br> <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            pafc = (PACMFORMATCHOOSE)(UINT)lParam; <br> <br>            SetWindowLong(hwnd, DWL_USER, lParam); <br> <br>            hfont = ghfontApp; <br> <br>            // <br>            // <br>            // <br>            fdwStyle = pafc-&gt;fdwStyle; <br> <br>            f = (0 != (ACMFORMATCHOOSE_STYLEF_SHOWHELP &amp; fdwStyle)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATSTYLE_CHECK_SHOWHELP, f); <br> <br>            f = (0 != (ACMFORMATCHOOSE_STYLEF_ENABLEHOOK &amp; fdwStyle)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATSTYLE_CHECK_ENABLEHOOK, f); <br> <br>            f = (0 != (ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE &amp; fdwStyle)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATSTYLE_CHECK_ENABLETEMPLATE, f); <br> <br>            f = (0 != (ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE &amp; fdwStyle)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATSTYLE_CHECK_ENABLETEMPLATEHANDLE, f); <br> <br>            f = (0 != (ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT &amp; fdwStyle)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATSTYLE_CHECK_INITTOWFXSTRUCT, f); <br> <br>            return (TRUE); <br> <br> <br>        case WM_COMMAND: <br>            uId = GET_WM_COMMAND_ID(wParam, lParam); <br>            switch (uId) <br>            { <br>                case IDOK: <br>                    fdwStyle = 0L; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATSTYLE_CHECK_SHOWHELP); <br>                    if (f) fdwStyle |= ACMFORMATCHOOSE_STYLEF_SHOWHELP; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATSTYLE_CHECK_ENABLEHOOK); <br>                    if (f) fdwStyle |= ACMFORMATCHOOSE_STYLEF_ENABLEHOOK; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATSTYLE_CHECK_ENABLETEMPLATE); <br>                    if (f) fdwStyle |= ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATSTYLE_CHECK_ENABLETEMPLATEHANDLE); <br>                    if (f) fdwStyle |= ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATSTYLE_CHECK_INITTOWFXSTRUCT); <br>                    if (f) fdwStyle |= ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT; <br> <br>                    pafc-&gt;fdwStyle = fdwStyle; <br> <br>                    // -- fall through -- // <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, (IDOK == uId)); <br>                    break; <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // AcmAppDlgProcFormatStyle() <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL AcmAppDlgProcFilterStyle <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: Handle to window. <br>// <br>//      UINT uMsg: Message being sent to the window. <br>// <br>//      WPARAM wParam: Specific argument to message. <br>// <br>//      LPARAM lParam: Specific argument to message. <br>// <br>//  Return (BOOL): <br>//      The return value is specific to the message that was received. For <br>//      the most part, it is FALSE if this dialog procedure does not handle <br>//      a message. <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppDlgProcFilterStyle <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    PACMFILTERCHOOSE    pafc; <br>    HFONT               hfont; <br>    UINT                uId; <br>    BOOL                f; <br>    DWORD               fdwStyle; <br> <br>    pafc = (PACMFILTERCHOOSE)(UINT)GetWindowLong(hwnd, DWL_USER); <br> <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            pafc = (PACMFILTERCHOOSE)(UINT)lParam; <br> <br>            SetWindowLong(hwnd, DWL_USER, lParam); <br> <br>            hfont = ghfontApp; <br> <br>            // <br>            // <br>            // <br>            fdwStyle = pafc-&gt;fdwStyle; <br> <br>            f = (0 != (ACMFILTERCHOOSE_STYLEF_SHOWHELP &amp; fdwStyle)); <br>            CheckDlgButton(hwnd, IDD_AAFILTERSTYLE_CHECK_SHOWHELP, f); <br> <br>            f = (0 != (ACMFILTERCHOOSE_STYLEF_ENABLEHOOK &amp; fdwStyle)); <br>            CheckDlgButton(hwnd, IDD_AAFILTERSTYLE_CHECK_ENABLEHOOK, f); <br> <br>            f = (0 != (ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATE &amp; fdwStyle)); <br>            CheckDlgButton(hwnd, IDD_AAFILTERSTYLE_CHECK_ENABLETEMPLATE, f); <br> <br>            f = (0 != (ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE &amp; fdwStyle)); <br>            CheckDlgButton(hwnd, IDD_AAFILTERSTYLE_CHECK_ENABLETEMPLATEHANDLE, f); <br> <br>            f = (0 != (ACMFILTERCHOOSE_STYLEF_INITTOFILTERSTRUCT &amp; fdwStyle)); <br>            CheckDlgButton(hwnd, IDD_AAFILTERSTYLE_CHECK_INITTOFILTERSTRUCT, f); <br> <br>            return (TRUE); <br> <br> <br>        case WM_COMMAND: <br>            uId = GET_WM_COMMAND_ID(wParam, lParam); <br>            switch (uId) <br>            { <br>                case IDOK: <br>                    fdwStyle = 0L; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFILTERSTYLE_CHECK_SHOWHELP); <br>                    if (f) fdwStyle |= ACMFILTERCHOOSE_STYLEF_SHOWHELP; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFILTERSTYLE_CHECK_ENABLEHOOK); <br>                    if (f) fdwStyle |= ACMFILTERCHOOSE_STYLEF_ENABLEHOOK; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFILTERSTYLE_CHECK_ENABLETEMPLATE); <br>                    if (f) fdwStyle |= ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATE; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFILTERSTYLE_CHECK_ENABLETEMPLATEHANDLE); <br>                    if (f) fdwStyle |= ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFILTERSTYLE_CHECK_INITTOFILTERSTRUCT); <br>                    if (f) fdwStyle |= ACMFILTERCHOOSE_STYLEF_INITTOFILTERSTRUCT; <br> <br>                    pafc-&gt;fdwStyle = fdwStyle; <br> <br>                    // -- fall through -- // <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, (IDOK == uId)); <br>                    break; <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // AcmAppDlgProcFilterStyle() <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL AcmAppDlgProcFilterEnum <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: Handle to window. <br>// <br>//      UINT uMsg: Message being sent to the window. <br>// <br>//      WPARAM wParam: Specific argument to message. <br>// <br>//      LPARAM lParam: Specific argument to message. <br>// <br>//  Return (BOOL): <br>//      The return value is specific to the message that was received. For <br>//      the most part, it is FALSE if this dialog procedure does not handle <br>//      a message. <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppDlgProcFilterEnum <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    TCHAR               ach[14]; <br>    PWAVEFILTER         pwfltr; <br>    HWND                hedit; <br>    HFONT               hfont; <br>    UINT                uId; <br>    BOOL                f; <br>    DWORD               fdwEnum; <br> <br>    pwfltr = (PWAVEFILTER)(UINT)GetWindowLong(hwnd, DWL_USER); <br> <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            pwfltr = (PWAVEFILTER)(UINT)lParam; <br> <br>            SetWindowLong(hwnd, DWL_USER, lParam); <br> <br>            hfont = ghfontApp; <br> <br>            // <br>            //  the initial fdwEnum flags are passed in fdwFilter <br>            //  because i'm too lazy to make another silly structure.. <br>            // <br>            fdwEnum = pwfltr-&gt;fdwFilter; <br> <br>            f = (0 != (ACM_FILTERENUMF_DWFILTERTAG &amp; fdwEnum)); <br>            CheckDlgButton(hwnd, IDD_AAFILTERENUM_CHECK_DWFILTERTAG, f); <br> <br>            hedit = GetDlgItem(hwnd, IDD_AAFILTERENUM_EDIT_DWFILTERTAG); <br>            SetWindowFont(hedit, hfont, FALSE); <br>            AppSetWindowText(hedit, TEXT("%u"), pwfltr-&gt;dwFilterTag); <br> <br>            return (TRUE); <br> <br> <br>        case WM_COMMAND: <br>            uId = GET_WM_COMMAND_ID(wParam, lParam); <br>            switch (uId) <br>            { <br>                case IDOK: <br>                    fdwEnum = 0L; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFILTERENUM_CHECK_DWFILTERTAG); <br>                    if (f) fdwEnum |= ACM_FILTERENUMF_DWFILTERTAG; <br> <br>                    hedit = GetDlgItem(hwnd, IDD_AAFILTERENUM_EDIT_DWFILTERTAG); <br>                    Edit_GetText(hedit, ach, SIZEOF(ach)); <br>                    pwfltr-&gt;dwFilterTag = _tcstoul(ach, NULL, 10); <br> <br>                    pwfltr-&gt;fdwFilter = fdwEnum; <br> <br>                    // -- fall through -- // <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, (IDOK == uId)); <br>                    break; <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // AcmAppDlgProcFilterEnum() <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL AcmAppDlgProcFormatEnum <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: Handle to window. <br>// <br>//      UINT uMsg: Message being sent to the window. <br>// <br>//      WPARAM wParam: Specific argument to message. <br>// <br>//      LPARAM lParam: Specific argument to message. <br>// <br>//  Return (BOOL): <br>//      The return value is specific to the message that was received. For <br>//      the most part, it is FALSE if this dialog procedure does not handle <br>//      a message. <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppDlgProcFormatEnum <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    TCHAR               ach[14]; <br>    LPAAFORMATENUMpaafe; <br>    LPWAVEFORMATEX      pwfx; <br>    DWORD               fdwEnum; <br>    HWND                hedit; <br>    HFONT               hfont; <br>    UINT                uId; <br>    BOOL                f; <br> <br> <br>    paafe   = (LPAAFORMATENUM)GetWindowLong(hwnd, DWL_USER); <br> <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>    SetWindowLong(hwnd, DWL_USER, lParam); <br>     <br>    paafe   = (LPAAFORMATENUM)lParam; <br>    pwfx    = paafe-&gt;pwfxEnum; <br>    fdwEnum = paafe-&gt;fdwEnum; <br> <br>    hfont = ghfontApp; <br> <br>            f = (0 != (ACM_FORMATENUMF_WFORMATTAG &amp; fdwEnum)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATENUM_CHECK_WFORMATTAG, f); <br> <br>            f = (0 != (ACM_FORMATENUMF_NCHANNELS &amp; fdwEnum)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATENUM_CHECK_NCHANNELS, f); <br> <br>            f = (0 != (ACM_FORMATENUMF_NSAMPLESPERSEC &amp; fdwEnum)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATENUM_CHECK_NSAMPLESPERSEC, f); <br> <br>            f = (0 != (ACM_FORMATENUMF_WBITSPERSAMPLE &amp; fdwEnum)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATENUM_CHECK_WBITSPERSAMPLE, f); <br> <br>            f = (0 != (ACM_FORMATENUMF_CONVERT &amp; fdwEnum)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATENUM_CHECK_CONVERT, f); <br> <br>            f = (0 != (ACM_FORMATENUMF_SUGGEST &amp; fdwEnum)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATENUM_CHECK_SUGGEST, f); <br> <br>            f = (0 != (ACM_FORMATENUMF_HARDWARE &amp; fdwEnum)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATENUM_CHECK_HARDWARE, f); <br> <br>            f = (0 != (ACM_FORMATENUMF_INPUT &amp; fdwEnum)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATENUM_CHECK_INPUT, f); <br> <br>            f = (0 != (ACM_FORMATENUMF_OUTPUT &amp; fdwEnum)); <br>            CheckDlgButton(hwnd, IDD_AAFORMATENUM_CHECK_OUTPUT, f); <br> <br>            hedit = GetDlgItem(hwnd, IDD_AAFORMATENUM_EDIT_WFORMATTAG); <br>            SetWindowFont(hedit, hfont, FALSE); <br>            AppSetWindowText(hedit, TEXT("%u"), pwfx-&gt;wFormatTag); <br> <br>            hedit = GetDlgItem(hwnd, IDD_AAFORMATENUM_EDIT_NCHANNELS); <br>            SetWindowFont(hedit, hfont, FALSE); <br>            AppSetWindowText(hedit, TEXT("%u"), pwfx-&gt;nChannels); <br> <br>            hedit = GetDlgItem(hwnd, IDD_AAFORMATENUM_EDIT_NSAMPLESPERSEC); <br>            SetWindowFont(hedit, hfont, FALSE); <br>            AppSetWindowText(hedit, TEXT("%lu"), pwfx-&gt;nSamplesPerSec); <br> <br>            hedit = GetDlgItem(hwnd, IDD_AAFORMATENUM_EDIT_WBITSPERSAMPLE); <br>            SetWindowFont(hedit, hfont, FALSE); <br>    AppSetWindowText(hedit, TEXT("%u"), pwfx-&gt;wBitsPerSample); <br> <br>            hedit = GetDlgItem(hwnd, IDD_AAFORMATENUM_EDIT_NAVGBYTESPERSEC); <br>            SetWindowFont(hedit, hfont, FALSE); <br>    AppSetWindowText(hedit, TEXT("%lu"), pwfx-&gt;nAvgBytesPerSec); <br> <br>            hedit = GetDlgItem(hwnd, IDD_AAFORMATENUM_EDIT_NBLOCKALIGN); <br>            SetWindowFont(hedit, hfont, FALSE); <br>    AppSetWindowText(hedit, TEXT("%u"), pwfx-&gt;nBlockAlign); <br> <br>            hedit = GetDlgItem(hwnd, IDD_AAFORMATENUM_EDIT_EXTRA); <br>            SetWindowFont(hedit, hfont, FALSE); <br>    if ( (pwfx-&gt;wFormatTag != WAVE_FORMAT_PCM) &amp;&amp; (pwfx-&gt;cbSize != 0) ) <br>    { <br>LPTSTR lptstr; <br>DWORD  cch; <br>DWORD  cb; <br> <br>cch = 1 + pwfx-&gt;cbSize * 3; <br>cb  = cch * sizeof(TCHAR); <br> <br>lptstr = (LPTSTR)GlobalAllocPtr(GHND, cb); <br>if (NULL != lptstr) <br>{ <br>    LPTSTR lptstrT; <br>    LPBYTE lpb; <br>    DWORD i; <br> <br>    lptstrT = lptstr; <br>    lpb = ((LPBYTE)pwfx) + sizeof(*pwfx); <br>     <br>    for (i=0; i&lt;pwfx-&gt;cbSize; i++) <br>    { <br>wsprintf(lptstrT, TEXT("%02X "), *lpb); <br>lptstrT += 3; <br>lpb++; <br>    } <br> <br>    SetWindowText(hedit, lptstr); <br> <br>    GlobalFreePtr(lptstr); <br>    lptstr = NULL; <br>} <br>    } <br>    // <br>    //TODO: Allow the extra data to be edited by the user. <br>    // <br>    SendMessage(hedit, EM_SETREADONLY, TRUE, 0L); <br> <br>            return (TRUE); <br> <br> <br>        case WM_COMMAND: <br>    pwfx = paafe-&gt;pwfxEnum; <br>            uId = GET_WM_COMMAND_ID(wParam, lParam); <br>            switch (uId) <br>            { <br>                case IDOK: <br> <br>                    fdwEnum = 0L; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATENUM_CHECK_WFORMATTAG); <br>                    if (f) fdwEnum |= ACM_FORMATENUMF_WFORMATTAG; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATENUM_CHECK_NCHANNELS); <br>                    if (f) fdwEnum |= ACM_FORMATENUMF_NCHANNELS; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATENUM_CHECK_NSAMPLESPERSEC); <br>                    if (f) fdwEnum |= ACM_FORMATENUMF_NSAMPLESPERSEC; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATENUM_CHECK_WBITSPERSAMPLE); <br>                    if (f) fdwEnum |= ACM_FORMATENUMF_WBITSPERSAMPLE; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATENUM_CHECK_CONVERT); <br>                    if (f) fdwEnum |= ACM_FORMATENUMF_CONVERT; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATENUM_CHECK_SUGGEST); <br>                    if (f) fdwEnum |= ACM_FORMATENUMF_SUGGEST; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATENUM_CHECK_HARDWARE); <br>                    if (f) fdwEnum |= ACM_FORMATENUMF_HARDWARE; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATENUM_CHECK_INPUT); <br>                    if (f) fdwEnum |= ACM_FORMATENUMF_INPUT; <br> <br>                    f = IsDlgButtonChecked(hwnd, IDD_AAFORMATENUM_CHECK_OUTPUT); <br>                    if (f) fdwEnum |= ACM_FORMATENUMF_OUTPUT; <br> <br>                    hedit = GetDlgItem(hwnd, IDD_AAFORMATENUM_EDIT_WFORMATTAG); <br>                    Edit_GetText(hedit, ach, SIZEOF(ach)); <br>                    pwfx-&gt;wFormatTag = (WORD)_tcstoul(ach, NULL, 10); <br> <br>                    hedit = GetDlgItem(hwnd, IDD_AAFORMATENUM_EDIT_NCHANNELS); <br>                    Edit_GetText(hedit, ach, SIZEOF(ach)); <br>                    pwfx-&gt;nChannels = (WORD)_tcstoul(ach, NULL, 10); <br> <br>                    hedit = GetDlgItem(hwnd, IDD_AAFORMATENUM_EDIT_NSAMPLESPERSEC); <br>                    Edit_GetText(hedit, ach, SIZEOF(ach)); <br>                    pwfx-&gt;nSamplesPerSec = _tcstoul(ach, NULL, 10); <br> <br>                    hedit = GetDlgItem(hwnd, IDD_AAFORMATENUM_EDIT_WBITSPERSAMPLE); <br>                    Edit_GetText(hedit, ach, SIZEOF(ach)); <br>                    pwfx-&gt;wBitsPerSample = (WORD)_tcstoul(ach, NULL, 10); <br> <br>                    hedit = GetDlgItem(hwnd, IDD_AAFORMATENUM_EDIT_NAVGBYTESPERSEC); <br>                    Edit_GetText(hedit, ach, SIZEOF(ach)); <br>                    pwfx-&gt;nAvgBytesPerSec = _tcstoul(ach, NULL, 10); <br> <br>                    hedit = GetDlgItem(hwnd, IDD_AAFORMATENUM_EDIT_NBLOCKALIGN); <br>                    Edit_GetText(hedit, ach, SIZEOF(ach)); <br>                    pwfx-&gt;nBlockAlign = (WORD)_tcstoul(ach, NULL, 10); <br> <br>    paafe-&gt;fdwEnum = fdwEnum; <br> <br>                    // -- fall through -- // <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, (IDOK == uId)); <br>                    break; <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // AcmAppDlgProcFormatEnum() <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL AcmAppDlgProcProperties <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: Handle to window. <br>// <br>//      UINT uMsg: Message being sent to the window. <br>// <br>//      WPARAM wParam: Specific argument to message. <br>// <br>//      LPARAM lParam: Specific argument to message. <br>// <br>//  Return (BOOL): <br>//      The return value is specific to the message that was received. For <br>//      the most part, it is FALSE if this dialog procedure does not handle <br>//      a message. <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppDlgProcProperties <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    MMRESULT            mmr; <br>    TCHAR               ach[14]; <br>    PAACONVERTDESC      paacd; <br>    HWND                hcb; <br>    HFONT               hfont; <br>    UINT                uId; <br>    DWORD               cb; <br> <br>    paacd = (PAACONVERTDESC)(UINT)GetWindowLong(hwnd, DWL_USER); <br> <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            paacd = (PAACONVERTDESC)(UINT)lParam; <br> <br>            SetWindowLong(hwnd, DWL_USER, lParam); <br> <br>            hfont = ghfontApp; <br> <br>            hcb = GetDlgItem(hwnd, IDD_AAPROPERTIES_COMBO_SOURCE); <br>            SetWindowFont(hcb, hfont, FALSE); <br> <br>            wsprintf(ach, TEXT("%lu"), paacd-&gt;cbSrcReadSize); <br>            ComboBox_AddString(hcb, ach); <br> <br>            wsprintf(ach, TEXT("%lu"), paacd-&gt;cbSrcData); <br>            ComboBox_AddString(hcb, ach); <br> <br>            wsprintf(ach, TEXT("%u"), paacd-&gt;pwfxSrc-&gt;nBlockAlign); <br>            ComboBox_AddString(hcb, ach); <br> <br>            ComboBox_AddString(hcb, TEXT("1")); <br>            ComboBox_AddString(hcb, TEXT("2147483648")); <br>            ComboBox_AddString(hcb, TEXT("4294967295")); <br> <br>            ComboBox_SetCurSel(hcb, 0); <br> <br>            mmr = acmStreamSize(paacd-&gt;has, <br>                                paacd-&gt;cbSrcReadSize, <br>                                &amp;paacd-&gt;cbDstBufSize, <br>                                ACM_STREAMSIZEF_SOURCE); <br> <br>            hcb = GetDlgItem(hwnd, IDD_AAPROPERTIES_COMBO_DESTINATION); <br>            SetWindowFont(hcb, hfont, FALSE); <br> <br>            wsprintf(ach, TEXT("%lu"), paacd-&gt;cbDstBufSize); <br>            ComboBox_AddString(hcb, ach); <br> <br>            wsprintf(ach, TEXT("%u"), paacd-&gt;pwfxDst-&gt;nBlockAlign); <br>            ComboBox_AddString(hcb, ach); <br> <br>            ComboBox_AddString(hcb, TEXT("1")); <br>            ComboBox_AddString(hcb, TEXT("2147483648")); <br>            ComboBox_AddString(hcb, TEXT("4294967295")); <br> <br>            ComboBox_SetCurSel(hcb, 0); <br> <br>            return (TRUE); <br> <br> <br>        case WM_COMMAND: <br>            uId = GET_WM_COMMAND_ID(wParam, lParam); <br>            switch (uId) <br>            { <br>                case IDD_AAPROPERTIES_BTN_SOURCE: <br>                    hcb = GetDlgItem(hwnd, IDD_AAPROPERTIES_COMBO_SOURCE); <br>                    Edit_GetText(hcb, ach, SIZEOF(ach)); <br>                    cb = _tcstoul(ach, NULL, 10); <br> <br>                    mmr = acmStreamSize(paacd-&gt;has, cb, &amp;cb, ACM_STREAMSIZEF_SOURCE); <br> <br>                    wsprintf(ach, TEXT("%lu"), cb); <br> <br>                    hcb = GetDlgItem(hwnd, IDD_AAPROPERTIES_COMBO_DESTINATION); <br>                    Edit_SetText(hcb, ach); <br>                    break; <br> <br> <br>                case IDD_AAPROPERTIES_BTN_DESTINATION: <br>                    hcb = GetDlgItem(hwnd, IDD_AAPROPERTIES_COMBO_DESTINATION); <br>                    Edit_GetText(hcb, ach, SIZEOF(ach)); <br>                    cb = _tcstoul(ach, NULL, 10); <br> <br>                    mmr = acmStreamSize(paacd-&gt;has, cb, &amp;cb, ACM_STREAMSIZEF_DESTINATION); <br> <br>                    wsprintf(ach, TEXT("%lu"), cb); <br> <br>                    hcb = GetDlgItem(hwnd, IDD_AAPROPERTIES_COMBO_SOURCE); <br>                    Edit_SetText(hcb, ach); <br>                    break; <br> <br> <br>                case IDOK: <br>                    hcb = GetDlgItem(hwnd, IDD_AAPROPERTIES_COMBO_SOURCE); <br>                    Edit_GetText(hcb, ach, SIZEOF(ach)); <br>                    paacd-&gt;cbSrcReadSize = _tcstoul(ach, NULL, 10); <br>                                                   <br>                    // -- fall through -- // <br> <br>                case IDCANCEL: <br>                    EndDialog(hwnd, (IDOK == uId)); <br>                    break; <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // AcmAppDlgProcProperties() <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppChooserFormatSuggest <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      PAACONVERTDESC paacd: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppChooserFormatSuggest <br>( <br>    HWND                    hwnd, <br>    PAACONVERTDESC          paacd <br>) <br>{ <br>    MMRESULT            mmr; <br>    LPWAVEFORMATEX      pwfx; <br>    DWORD               cbwfx; <br>    DWORD               cbwfxSrc; <br> <br> <br>    // <br>    //  this should never fail <br>    // <br>    mmr = acmMetrics(NULL, ACM_METRIC_MAX_SIZE_FORMAT, &amp;cbwfx); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        DPF(0, "!AcmAppChooserFormatSuggest() acmMetrics failed mmr=%u!", mmr); <br>        return (FALSE); <br>    } <br> <br> <br>    // <br>    //  just in case no ACM driver is installed for the source format and <br>    //  the source has a larger format size than the largest enabled ACM <br>    //  driver... <br>    // <br>    cbwfxSrc = SIZEOF_WAVEFORMATEX(paacd-&gt;pwfxSrc); <br>    cbwfx    = max(cbwfx, cbwfxSrc); <br> <br>    pwfx = (LPWAVEFORMATEX)GlobalAllocPtr(GHND, cbwfx); <br>    if (NULL == pwfx) <br>    { <br>        DPF(0, "!AcmAppChooserFormatSuggest() GlobalAllocPtr(%lu) failed!", cbwfx); <br>        return (FALSE); <br>    } <br> <br> <br>    // <br>    //  'suggest anything' <br>    // <br>    mmr = acmFormatSuggest(NULL, paacd-&gt;pwfxSrc, pwfx, cbwfx, 0L); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                  TEXT("AcmAppChooserFormatSuggest() there is no suggested destination format. Defaulting to source format.")); <br> <br>        _fmemcpy(pwfx, paacd-&gt;pwfxSrc, (UINT)cbwfxSrc); <br>    } <br> <br>    // <br>    // <br>    // <br>    if (NULL != paacd-&gt;pwfxDst) <br>    { <br>        GlobalFreePtr(paacd-&gt;pwfxDst); <br>    } <br> <br>    paacd-&gt;pwfxDst = pwfx; <br>    AcmAppGetFormatDescription(pwfx, paacd-&gt;szDstFormatTag, paacd-&gt;szDstFormat); <br> <br>    return (TRUE); <br>} // AcmAppChooserFormatSuggest() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppChooserSaveFile <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      PAACONVERTDESC paacd: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppChooserSaveFile <br>( <br>    HWND                    hwnd, <br>    PAACONVERTDESC          paacd <br>) <br>{ <br>    TCHAR               szFilePath[APP_MAX_FILE_PATH_CHARS]; <br>    TCHAR               szFileTitle[APP_MAX_FILE_TITLE_CHARS]; <br>    HWND                hedit; <br>    BOOL                f; <br> <br>    hedit = GetDlgItem(hwnd, IDD_AACHOOSER_EDIT_FILE_OUTPUT); <br>    Edit_GetText(hedit, paacd-&gt;szFilePathDst, SIZEOF(paacd-&gt;szFilePathDst)); <br> <br>    lstrcpy(szFilePath, paacd-&gt;szFilePathDst); <br> <br>    f = AppGetFileName(hwnd, szFilePath, szFileTitle, APP_GETFILENAMEF_SAVE); <br>    if (f) <br>    { <br>        lstrcpy(paacd-&gt;szFilePathDst, szFilePath); <br>        Edit_SetText(hedit, paacd-&gt;szFilePathDst); <br>    } <br> <br>    return (f); <br>} // AcmAppChooserSaveFile() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppChooserProperties <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      PAACONVERTDESC paacd: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppChooserProperties <br>( <br>    HWND                    hwnd, <br>    PAACONVERTDESC          paacd <br>) <br>{ <br>    MMRESULT            mmr; <br>    BOOL                f; <br> <br> <br>    // <br>    // <br>    // <br>    if (NULL != paacd-&gt;hadid) <br>    { <br>        mmr = acmDriverOpen(&amp;paacd-&gt;had, paacd-&gt;hadid, 0L); <br>        if (MMSYSERR_NOERROR != mmr) <br>        { <br>            return (FALSE); <br>        } <br>    } <br> <br>    mmr = acmStreamOpen(&amp;paacd-&gt;has, <br>                        paacd-&gt;had, <br>                        paacd-&gt;pwfxSrc, <br>                        paacd-&gt;pwfxDst, <br>                        paacd-&gt;fApplyFilter ? paacd-&gt;pwfltr : (LPWAVEFILTER)NULL, <br>                        0L, <br>                        0L, <br>                        paacd-&gt;fdwOpen); <br> <br>    if (MMSYSERR_NOERROR == mmr) <br>    { <br>        f = DialogBoxParam(ghinst, <br>                            DLG_AAPROPERTIES, <br>                            hwnd, <br>                            AcmAppDlgProcProperties, <br>                            (LPARAM)(UINT)paacd); <br> <br>        acmStreamClose(paacd-&gt;has, 0L); <br>        paacd-&gt;has = NULL; <br>    } <br> <br> <br>    if (NULL != paacd-&gt;had) <br>    { <br>        acmDriverClose(paacd-&gt;had, 0L); <br>        paacd-&gt;had = NULL; <br>    } <br> <br>    return (f); <br>} // AcmAppChooserProperties() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  UINT AcmAppChooserFormatHook </code></pre>
<p>
</p>
<pre><code>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      UINT uMsg: <br>//   <br>//      WPARAM wParam: <br>//   <br>//      LPARAM lParam: <br>//   <br>//  Return (UINT): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>UINT FNWCALLBACK AcmAppChooserFormatHook <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    static BOOL         fVerify; <br>    LPWAVEFORMATEX      pwfx; <br>    WAVEFORMATEX        wfx; <br>    TCHAR               szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS]; <br>    TCHAR               szFormat[ACMFORMATDETAILS_FORMAT_CHARS]; <br>    PAACONVERTDESC      paacd; <br>    UINT                uId; <br>    int                 n; <br>    BOOL                f; <br> <br> <br>    paacd = (PAACONVERTDESC)(UINT)GetWindowLong(hwnd, DWL_USER); <br> <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            paacd = (PAACONVERTDESC)(UINT)lParam; <br> <br>            SetWindowLong(hwnd, DWL_USER, lParam); <br> <br>            DPF(1, "AcmAppChooserFormatHook(%.04Xh, WM_INITDIALOG, %u, %lu): %.04Xh", <br>                hwnd, wParam, lParam, paacd); <br> <br>            fVerify = TRUE; <br> <br>            return (TRUE); <br> <br> <br>        case MM_ACM_FORMATCHOOSE: <br>            switch (wParam) <br>            { <br>                case FORMATCHOOSE_FORMATTAG_VERIFY: <br>                    if (!fVerify) <br>                        break; <br> <br>                    wfx.wFormatTag = LOWORD(lParam); <br> <br>                    AcmAppGetFormatDescription(&amp;wfx, szFormatTag, NULL); <br> <br>                    n = AppMsgBox(hwnd, MB_YESNOCANCEL | MB_ICONQUESTION, <br>                                    TEXT("Add format tag [%lu], '%s'?"), <br>                                    lParam, (LPTSTR)szFormatTag); <br> <br>                    fVerify = (IDCANCEL != n); <br> <br>                    if (!fVerify) <br>                        break; <br> <br>                    f = (IDYES == n); <br> <br>                    SetWindowLong(hwnd, DWL_MSGRESULT, f); <br>                    return (TRUE); <br> <br> <br>                case FORMATCHOOSE_FORMAT_VERIFY: <br>                    if (!fVerify) <br>                        break; <br> <br>                    pwfx = (LPWAVEFORMATEX)lParam; <br> <br>                    AcmAppGetFormatDescription(pwfx, szFormatTag, szFormat); <br> <br>                    n = AppMsgBox(hwnd, MB_YESNOCANCEL | MB_ICONQUESTION, <br>                                    TEXT("Add format '%s' for format tag [%u], '%s'?"), <br>                                    (LPTSTR)szFormat, <br>                                    pwfx-&gt;wFormatTag, <br>                                    (LPTSTR)szFormatTag); <br> <br>                    fVerify = (IDCANCEL != n); <br> <br>                    if (!fVerify) <br>                        break; <br> <br>                    f = (IDYES == n); <br> <br>                    SetWindowLong(hwnd, DWL_MSGRESULT, f); <br>                    return (TRUE); <br> <br> <br>                case FORMATCHOOSE_CUSTOM_VERIFY: <br>                    if (!fVerify) <br>                        break; <br> <br>                    pwfx = (LPWAVEFORMATEX)lParam; <br> <br>                    AcmAppGetFormatDescription(pwfx, szFormatTag, szFormat); <br> <br>                    n = AppMsgBox(hwnd, MB_YESNOCANCEL | MB_ICONQUESTION, <br>                                    TEXT("Add CUSTOM format '%s' for format tag [%u], '%s'?"), <br>                                    (LPTSTR)szFormat, <br>                                    pwfx-&gt;wFormatTag, <br>                                    (LPTSTR)szFormatTag); <br> <br>                    fVerify = (IDCANCEL != n); <br> <br>                    if (!fVerify) <br>                        break; <br> <br>                    f = (IDYES == n); <br> <br>                    SetWindowLong(hwnd, DWL_MSGRESULT, f); <br>                    return (TRUE); <br>            } <br>            break; <br> <br> <br>        case WM_COMMAND: <br>            uId = GET_WM_COMMAND_ID(wParam, lParam); <br>            switch (uId) <br>            { <br>                case IDOK: <br>                case IDCANCEL: <br>                    break; <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // AcmAppChooserFormatHook() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  UINT AcmAppChooserFilterHook <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      UINT uMsg: <br>//   <br>//      WPARAM wParam: <br>//   <br>//      LPARAM lParam: <br>//   <br>//  Return (UINT): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>UINT FNWCALLBACK AcmAppChooserFilterHook <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    static BOOL         fVerify; <br>    WAVEFILTER          wfltr; <br>    LPWAVEFILTER        pwfltr; <br>    TCHAR               szFilterTag[ACMFILTERTAGDETAILS_FILTERTAG_CHARS]; <br>    TCHAR               szFilter[ACMFILTERDETAILS_FILTER_CHARS]; <br>    PAACONVERTDESC      paacd; <br>    UINT                uId; <br>    int                 n; <br>    BOOL                f; <br> <br> <br>    paacd = (PAACONVERTDESC)(UINT)GetWindowLong(hwnd, DWL_USER); <br> <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            paacd = (PAACONVERTDESC)(UINT)lParam; <br> <br>            SetWindowLong(hwnd, DWL_USER, lParam); <br> <br>            DPF(1, "AcmAppChooserFilterHook(%.04Xh, WM_INITDIALOG, %u, %lu): %.04Xh", <br>                hwnd, wParam, lParam, paacd); <br> <br>            fVerify = TRUE; <br> <br>            return (TRUE); <br> <br> <br>        case MM_ACM_FILTERCHOOSE: <br>            switch (wParam) <br>            { <br>                case FILTERCHOOSE_FILTERTAG_VERIFY: <br>                    if (!fVerify) <br>                        break; <br> <br>                    wfltr.dwFilterTag = lParam; <br> <br>                    AcmAppGetFilterDescription(&amp;wfltr, szFilterTag, NULL); <br> <br>                    n = AppMsgBox(hwnd, MB_YESNOCANCEL | MB_ICONQUESTION, <br>                                    TEXT("Add filter tag [%lu], '%s'?"), <br>                                    lParam, (LPTSTR)szFilterTag); <br> <br>                    fVerify = (IDCANCEL != n); <br> <br>                    if (!fVerify) <br>                        break; <br> <br>                    f = (IDYES == n); <br> <br>                    SetWindowLong(hwnd, DWL_MSGRESULT, f); <br>                    return (TRUE); <br> <br> <br>                case FILTERCHOOSE_FILTER_VERIFY: <br>                    if (!fVerify) <br>                        break; <br> <br>                    pwfltr = (LPWAVEFILTER)lParam; <br> <br>                    AcmAppGetFilterDescription(pwfltr, szFilterTag, szFilter); <br> <br>                    n = AppMsgBox(hwnd, MB_YESNOCANCEL | MB_ICONQUESTION, <br>                                    TEXT("Add filter '%s' for filter tag [%lu], '%s'?"), <br>                                    (LPTSTR)szFilter, <br>                                    pwfltr-&gt;dwFilterTag, <br>                                    (LPTSTR)szFilterTag); <br> <br>                    fVerify = (IDCANCEL != n); <br> <br>                    if (!fVerify) <br>                        break; <br> <br>                    f = (IDYES == n); <br> <br>                    SetWindowLong(hwnd, DWL_MSGRESULT, f); <br>                    return (TRUE); <br> <br> <br>                case FILTERCHOOSE_CUSTOM_VERIFY: <br>                    if (!fVerify) <br>                        break; <br> <br>                    pwfltr = (LPWAVEFILTER)lParam; <br> <br>                    AcmAppGetFilterDescription(pwfltr, szFilterTag, szFilter); <br> <br>                    n = AppMsgBox(hwnd, MB_YESNOCANCEL | MB_ICONQUESTION, <br>                                    TEXT("Add CUSTOM filter '%s' for filter tag [%lu], '%s'?"), <br>                                    (LPTSTR)szFilter, <br>                                    pwfltr-&gt;dwFilterTag, <br>                                    (LPTSTR)szFilterTag); <br> <br>                    fVerify = (IDCANCEL != n); <br> <br>                    if (!fVerify) <br>                        break; <br> <br>                    f = (IDYES == n); <br> <br>                    SetWindowLong(hwnd, DWL_MSGRESULT, f); <br>                    return (TRUE); <br>            } <br>            break; <br> <br> <br>        case WM_COMMAND: <br>            uId = GET_WM_COMMAND_ID(wParam, lParam); <br>            switch (uId) <br>            { <br>                case IDOK: <br>                case IDCANCEL: <br>                    break; <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // AcmAppChooserFilterHook() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppChooserFormat <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      PAACONVERTDESC paacd: <br>//   <br>//      BOOL fOptions: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppChooserFormat <br>( <br>    HWND                    hwnd, <br>    PAACONVERTDESC          paacd, <br>    BOOL                    fOptions <br>) <br>{ <br>    ACMFORMATCHOOSE    afc; <br>    MMRESULT    mmr; <br>    LPWAVEFORMATEX    pwfx; <br>    DWORD    cbwfx; <br>    DWORD    cbwfxSrc; <br>    DWORD    fdwSuggest; <br>    DWORD    fdwStyle; <br>    DWORD    fdwEnum; <br>    LPWAVEFORMATEX    pwfxEnum; <br>    AAFORMATENUM    aafe; <br>    BOOL    f; <br>    HRSRC    hrsrc; <br> <br>    pwfxEnum   = NULL; <br>     <br>    // <br>    // <br>    // <br>    fdwSuggest = 0L; <br>    fdwStyle   = 0L; <br>    fdwEnum    = 0L; <br> <br>    // <br>    //  this should never fail <br>    // <br>    mmr = acmMetrics(NULL, ACM_METRIC_MAX_SIZE_FORMAT, &amp;cbwfx); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        DPF(0, "!AcmAppChooserFormat() acmMetrics failed mmr=%u!", mmr); <br>        return (FALSE); <br>    } <br> <br>    // <br>    //  just in case no ACM driver is installed for the source format and <br>    //  the source has a larger format size than the largest enabled ACM <br>    //  driver... <br>    // <br>    cbwfxSrc = SIZEOF_WAVEFORMATEX(paacd-&gt;pwfxSrc); <br>    cbwfx    = max(cbwfx, cbwfxSrc); <br> <br>    pwfx = (LPWAVEFORMATEX)GlobalAllocPtr(GHND, cbwfx); <br>    if (NULL == pwfx) <br>    { <br>        DPF(0, "!AcmAppChooserFormat() GlobalAllocPtr(%lu) failed!", cbwfx); <br>        return (FALSE); <br>    } <br> <br>    pwfxEnum = (LPWAVEFORMATEX)GlobalAllocPtr(GHND, cbwfx); <br>    if (NULL == pwfxEnum) <br>    { <br>        DPF(0, "!AcmAppChooserFormat() GlobalAllocPtr(%lu) failed!", cbwfx); <br>GlobalFreePtr(pwfx); <br>        return (FALSE); <br>    } <br>     <br>    _fmemcpy(pwfxEnum, paacd-&gt;pwfxSrc, (UINT)cbwfxSrc); <br> <br>    // <br>    // <br>    // <br>    if (fOptions) <br>    { <br>aafe.fdwEnum = fdwEnum; <br>aafe.pwfxEnum = pwfxEnum; <br> <br>        f = DialogBoxParam(ghinst, <br>                           DLG_AAFORMATENUM, <br>                           hwnd, <br>                           AcmAppDlgProcFormatEnum, <br>                           (LPARAM)(LPAAFORMATENUM)&amp;aafe); <br>        if (!f) <br>        { <br>    GlobalFreePtr(pwfxEnum); <br>    GlobalFreePtr(pwfx); <br>            return (FALSE); <br>        } <br> <br>        fdwEnum = aafe.fdwEnum; <br> <br>    } <br> <br> <br>    if (fOptions) <br>    { <br>        afc.fdwStyle = fdwStyle; <br> <br>        f = DialogBoxParam(ghinst, <br>                           DLG_AAFORMATSTYLE, <br>                           hwnd, <br>                           AcmAppDlgProcFormatStyle, <br>                           (LPARAM)(UINT)&amp;afc); <br>        if (!f) <br>        { <br>            return (FALSE); <br>        } <br> <br>        fdwStyle = afc.fdwStyle; <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    if (0 != (fdwStyle &amp; ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT)) <br>    { <br>        if (NULL != paacd-&gt;pwfxDst) <br>        { <br>            _fmemcpy(pwfx, paacd-&gt;pwfxDst, SIZEOF_WAVEFORMATEX(paacd-&gt;pwfxDst)); <br>        } <br>        else <br>        { <br>            _fmemcpy(pwfx, paacd-&gt;pwfxSrc, (UINT)cbwfxSrc); <br>        } <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    if (0 == (ACMFORMATCHOOSE_STYLEF_SHOWHELP &amp; fdwStyle)) <br>    { <br>        guMsgHelp = 0; <br>    } <br>    else <br>    { <br>        guMsgHelp = RegisterWindowMessage(ACMHELPMSGSTRING); <br>        if (0 == guMsgHelp) <br>        { <br>            fdwStyle &amp;= ~ACMFORMATCHOOSE_STYLEF_SHOWHELP; <br>        } <br>        else <br>        { <br>            gpszAcmAppHelp = gszAcmAppHelpFormat; <br>        } <br>    } <br> <br> <br>    // <br>    //  initialize the ACMFORMATCHOOSE members <br>    // <br>    memset(&amp;afc, 0, sizeof(afc)); <br> <br>    afc.cbStruct        = sizeof(afc); <br>    afc.fdwStyle        = fdwStyle; <br>    afc.hwndOwner       = hwnd; <br>    afc.pwfx            = pwfx; <br>    afc.cbwfx           = cbwfx; <br>    afc.pszTitle        = TEXT("Destination Format Choice"); <br> <br>    afc.szFormatTag[0]  = '\0'; <br>    afc.szFormat[0]     = '\0'; <br>    afc.pszName         = NULL; <br>    afc.cchName         = 0; <br> <br>    afc.fdwEnum         = fdwEnum; <br>    if (0L == (afc.fdwEnum &amp; (ACM_FORMATENUMF_WFORMATTAG | <br>                              ACM_FORMATENUMF_NCHANNELS | <br>                              ACM_FORMATENUMF_NSAMPLESPERSEC | <br>                              ACM_FORMATENUMF_WBITSPERSAMPLE | <br>                              ACM_FORMATENUMF_CONVERT | <br>                              ACM_FORMATENUMF_SUGGEST))) <br>    { <br>        afc.pwfxEnum    = NULL; <br>    } <br>    else <br>    { <br>afc.pwfxEnum = pwfxEnum; <br>    } <br> <br>    // <br>    // <br>    // <br>    hrsrc = NULL; <br> <br>    if (0L == (afc.fdwStyle &amp; (ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE | <br>                               ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE))) <br>    { <br>        afc.hInstance       = NULL; <br>        afc.pszTemplateName = NULL; <br>    } <br>    else <br>    { <br>        if (0L != (afc.fdwStyle &amp; ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE)) <br>        { <br>            // <br>            //  ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE <br>            // <br>            hrsrc = FindResource(ghinst, DLG_AAFORMATCHOOSE_TEMPLATE, RT_DIALOG); <br> <br>            afc.hInstance       = (HINSTANCE)LoadResource(ghinst, hrsrc); <br>            afc.pszTemplateName = NULL; <br>        } <br>        else <br>        { <br>            afc.hInstance       = ghinst; <br>            afc.pszTemplateName = DLG_AAFORMATCHOOSE_TEMPLATE; <br>        } <br>    } <br> <br> <br>    if (0L == (afc.fdwStyle &amp; ACMFORMATCHOOSE_STYLEF_ENABLEHOOK)) <br>    { <br>        afc.lCustData       = 0L; <br>        afc.pfnHook         = NULL; <br>    } <br>    else <br>    { <br>        afc.lCustData       = (LPARAM)(UINT)paacd; <br>        afc.pfnHook         = AcmAppChooserFormatHook; <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    mmr = acmFormatChoose(&amp;afc); <br> <br>    if (NULL != hrsrc) <br>    { <br>        FreeResource((HGLOBAL)afc.hInstance); <br>    } <br> <br>    // <br>    // <br>    // <br>    if (0 != guMsgHelp) <br>    { <br>        WinHelp(hwnd, gszAcmAppHelpFormat, HELP_QUIT, 0L); <br>        guMsgHelp = 0; <br>    } <br> <br> <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        if (ACMERR_CANCELED != mmr) <br>        { <br>            TCHAR       ach[40]; <br> <br>            AcmAppGetErrorString(mmr, ach); <br>            AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                      TEXT("acmFormatChoose() failed with error %s, [%u]."), <br>                      (LPTSTR)ach, mmr); <br>        } <br> <br>GlobalFreePtr(pwfxEnum); <br>        GlobalFreePtr(pwfx); <br>        return (FALSE); <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    if (NULL != paacd-&gt;pwfxDst) <br>    { <br>        GlobalFreePtr(paacd-&gt;pwfxDst); <br>    } <br> <br>    paacd-&gt;pwfxDst = pwfx; <br>    lstrcpy(paacd-&gt;szDstFormatTag, afc.szFormatTag); <br>    lstrcpy(paacd-&gt;szDstFormat, afc.szFormat); <br> <br> <br>    GlobalFreePtr(pwfxEnum); <br>     <br>    return (TRUE); <br>} // AcmAppChooserFormat() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppChooserFilter <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      PAACONVERTDESC paacd: <br>//   <br>//      BOOL fOptions: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppChooserFilter <br>( <br>    HWND                    hwnd, <br>    PAACONVERTDESC          paacd, <br>    BOOL                    fOptions <br>) <br>{ <br>    ACMFILTERCHOOSE     afc; <br>    MMRESULT            mmr; <br>    LPWAVEFILTER        pwfltr; <br>    DWORD               cbwfltr; <br>    DWORD               fdwStyle; <br>    DWORD               fdwEnum; <br>    WAVEFILTER          wfltrEnum; <br>    BOOL                f; <br>    HRSRC               hrsrc; <br> <br>    // <br>    // <br>    // <br>    fdwStyle   = 0L; <br>    fdwEnum    = 0L; <br> <br>    if (fOptions) <br>    { <br>        _fmemset(&amp;wfltrEnum, 0, sizeof(wfltrEnum)); <br> <br>        wfltrEnum.cbStruct    = sizeof(wfltrEnum); <br>        wfltrEnum.dwFilterTag = paacd-&gt;pwfxSrc-&gt;wFormatTag; <br> <br>        wfltrEnum.fdwFilter   = fdwEnum; <br> <br>        f = DialogBoxParam(ghinst, <br>                           DLG_AAFILTERENUM, <br>                           hwnd, <br>                           AcmAppDlgProcFilterEnum, <br>                           (LPARAM)(UINT)&amp;wfltrEnum); <br>        if (!f) <br>        { <br>            return (FALSE); <br>        } <br> <br>        fdwEnum = wfltrEnum.fdwFilter; <br> <br>        wfltrEnum.fdwFilter = 0L; <br>    } <br> <br> <br>    if (fOptions) <br>    { <br>        afc.fdwStyle = fdwStyle; <br> <br>        f = DialogBoxParam(ghinst, <br>                           DLG_AAFILTERSTYLE, <br>                           hwnd, <br>                           AcmAppDlgProcFilterStyle, <br>                           (LPARAM)(UINT)&amp;afc); <br>        if (!f) <br>        { <br>            return (FALSE); <br>        } <br> <br>        fdwStyle = afc.fdwStyle; <br>    } <br> <br> <br> <br>    // <br>    //  this should never fail <br>    // <br>    mmr = acmMetrics(NULL, ACM_METRIC_MAX_SIZE_FILTER, &amp;cbwfltr); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        DPF(0, "!AcmAppChooserFilter() acmMetrics failed mmr=%u!", mmr); <br>        return (FALSE); <br>    } <br> <br>    // <br>    // <br>    // <br>    cbwfltr = max(cbwfltr, sizeof(WAVEFILTER)); <br>    pwfltr  = (LPWAVEFILTER)GlobalAllocPtr(GHND, cbwfltr); <br>    if (NULL == pwfltr) <br>    { <br>        DPF(0, "!AcmAppChooserFilter() GlobalAllocPtr(%lu) failed!", cbwfltr); <br>        return (FALSE); <br>    } <br> <br>    // <br>    // <br>    // <br>    if ((NULL != paacd-&gt;pwfltr) &amp;&amp; (0L == fdwEnum)) <br>    { <br>        fdwStyle |= ACMFILTERCHOOSE_STYLEF_INITTOFILTERSTRUCT; <br> <br>        _fmemcpy(pwfltr, paacd-&gt;pwfltr, (UINT)paacd-&gt;pwfltr-&gt;cbStruct); <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    if (0 == (ACMFILTERCHOOSE_STYLEF_SHOWHELP &amp; fdwStyle)) <br>    { <br>        guMsgHelp = 0; <br>    } <br>    else <br>    { <br>        guMsgHelp = RegisterWindowMessage(ACMHELPMSGSTRING); <br>        if (0 == guMsgHelp) <br>        { <br>            fdwStyle &amp;= ~ACMFILTERCHOOSE_STYLEF_SHOWHELP; <br>        } <br>        else <br>        { <br>            gpszAcmAppHelp = gszAcmAppHelpFilter; <br>        } <br>    } <br> <br> <br> <br>    // <br>    //  initialize the ACMFILTERCHOOSE members <br>    // <br>    memset(&amp;afc, 0, sizeof(afc)); <br> <br>    afc.cbStruct        = sizeof(afc); <br>    afc.fdwStyle        = fdwStyle; <br>    afc.hwndOwner       = hwnd; <br>    afc.pwfltr          = pwfltr; <br>    afc.cbwfltr         = cbwfltr; <br>    afc.pszTitle        = TEXT("Apply Filter Choice"); <br> <br>    afc.szFilterTag[0]  = '\0'; <br>    afc.szFilter[0]     = '\0'; <br>    afc.pszName         = NULL; <br>    afc.cchName         = 0; <br> <br>    afc.fdwEnum         = fdwEnum; <br>    if (0L == (afc.fdwEnum &amp; ACM_FILTERENUMF_DWFILTERTAG)) <br>    { <br>        afc.pwfltrEnum  = NULL; <br>    } <br>    else <br>    { <br>        afc.pwfltrEnum  = &amp;wfltrEnum; <br>    } <br> <br>    if (0L == (afc.fdwStyle &amp; (ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATE | <br>                               ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE))) <br>    { <br>        afc.hInstance       = NULL; <br>        afc.pszTemplateName = NULL; <br>    } <br>    else <br>    { <br>        if (0L != (afc.fdwStyle &amp; ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE)) <br>        { <br>            // <br>            //  ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE <br>            // <br>            hrsrc = FindResource(ghinst, DLG_AAFILTERCHOOSE_TEMPLATE, RT_DIALOG); <br> <br>            afc.hInstance       = (HINSTANCE)LoadResource(ghinst, hrsrc); <br>            afc.pszTemplateName = NULL; <br>        } <br>        else <br>        { <br>            afc.hInstance       = ghinst; <br>            afc.pszTemplateName = DLG_AAFILTERCHOOSE_TEMPLATE; <br>        } <br>    } <br> <br> <br>    if (0L == (afc.fdwStyle &amp; ACMFILTERCHOOSE_STYLEF_ENABLEHOOK)) <br>    { <br>        afc.lCustData       = 0L; <br>        afc.pfnHook         = NULL; <br>    } <br>    else <br>    { <br>        afc.lCustData       = (LPARAM)(UINT)paacd; <br>        afc.pfnHook         = AcmAppChooserFilterHook; <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    mmr = acmFilterChoose(&amp;afc); <br> <br>    if (NULL != hrsrc) <br>    { <br>        FreeResource((HGLOBAL)afc.hInstance); <br>    } <br> <br>    // <br>    // <br>    // <br>    if (0 != guMsgHelp) <br>    { <br>        WinHelp(hwnd, gszAcmAppHelpFilter, HELP_QUIT, 0L); <br>        guMsgHelp = 0; <br>    } <br> <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        if (ACMERR_CANCELED != mmr) <br>        { <br>            AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                      TEXT("acmFilterChoose() failed with error = %u!"), mmr); <br>        } <br>         <br>        GlobalFreePtr(pwfltr); <br>        return (FALSE); <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    if (NULL != paacd-&gt;pwfltr) <br>    { <br>        GlobalFreePtr(paacd-&gt;pwfltr); <br>    } <br> <br>    paacd-&gt;pwfltr = pwfltr; <br>    lstrcpy(paacd-&gt;szFilterTag, afc.szFilterTag); <br>    lstrcpy(paacd-&gt;szFilter, afc.szFilter); <br> <br> <br>    return (TRUE); <br>} // AcmAppChooserFilter() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppChooserDriverEnumCallback <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HACMDRIVERID hadid: <br>//   <br>//      DWORD dwInstance: <br>//   <br>//      DWORD fdwSupport: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppChooserDriverEnumCallback <br>( <br>    HACMDRIVERID            hadid, <br>    DWORD                   dwInstance, <br>    DWORD                   fdwSupport <br>) <br>{ <br>    MMRESULT            mmr; <br>    HWND                hcb; <br>    int                 n; <br>    ACMDRIVERDETAILS    add; <br> <br>    // <br>    //  skip anything that does not support what we're after (for example, <br>    //  this will skip _HARDWARE only drivers that do not support stream <br>    //  functionality). <br>    // <br>    if (0 == (fdwSupport &amp; (ACMDRIVERDETAILS_SUPPORTF_CODEC | <br>                            ACMDRIVERDETAILS_SUPPORTF_CONVERTER | <br>                            ACMDRIVERDETAILS_SUPPORTF_FILTER))) <br>    { <br>        return (TRUE); <br>    } <br> <br>    // <br>    // <br>    // <br>    hcb = (HWND)(UINT)dwInstance; <br> <br>    add.cbStruct = sizeof(add); <br>    mmr = acmDriverDetails(hadid, &amp;add, 0L); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        lstrcpy(add.szLongName,  gszBogus); <br>    } <br> <br> <br>    AcmAppDebugLog(add.szLongName); <br>    AcmAppDebugLog(TEXT("\r\n")); <br>                 <br>    n = ComboBox_AddString(hcb, add.szLongName); <br>    ComboBox_SetItemData(hcb, n, (LPARAM)(UINT)hadid); <br> <br> <br>    // <br>    //  return TRUE to continue with enumeration (FALSE will stop the <br>    //  enumerator) <br>    // <br>    return (TRUE); <br>} // AcmAppChooserDriverEnumCallback() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppChooserUpdateDisplay <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      PAACONVERTDESC paacd: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppChooserUpdateDisplay <br>( <br>    HWND                    hwnd, <br>    PAACONVERTDESC          paacd <br>) <br>{ <br>    HWND                hedit; <br>    HWND                htxt; <br>    HWND                hcb; <br>    HWND                hsb; <br>    int                 n; <br>    MMRESULT            mmr; <br>    ACMDRIVERDETAILS    add; <br>    TCHAR               ach[40]; <br>    LPWAVEFILTER        pwfltr; <br>    HACMDRIVERID        hadid; <br>    BOOL                f; <br>    DWORD               fdwOpen; <br>    int                 nValue; <br>    int                 nMinPos; <br>    int                 nMaxPos; <br>    DWORD               cbSrc; <br>    DWORD               cbDst; <br> <br> <br>    // <br>    // <br>    // <br>    htxt = GetDlgItem(hwnd, IDD_AACHOOSER_TXT_FILE_INPUT); <br>    SetWindowText(htxt, paacd-&gt;szFilePathSrc); <br> <br>    AcmAppGetFormatDescription(paacd-&gt;pwfxSrc, paacd-&gt;szSrcFormatTag, paacd-&gt;szSrcFormat); <br>    AppFormatBigNumber(ach, paacd-&gt;cbSrcData); <br>    AppFormatBigNumber(&amp;ach[20], paacd-&gt;cbSrcData / paacd-&gt;pwfxSrc-&gt;nBlockAlign); <br> <br>    htxt = GetDlgItem(hwnd, IDD_AACHOOSER_TXT_FORMAT_INPUT); <br>    AppSetWindowText(htxt, TEXT("%s: %s\r\nAlignment=%u, Data=%s bytes, %s blocks"), <br>                        (LPTSTR)paacd-&gt;szSrcFormatTag, <br>                        (LPTSTR)paacd-&gt;szSrcFormat, <br>                        paacd-&gt;pwfxSrc-&gt;nBlockAlign, <br>                        (LPTSTR)ach, (LPTSTR)&amp;ach[20]); <br>     <br>    hedit = GetDlgItem(hwnd, IDD_AACHOOSER_EDIT_FILE_OUTPUT); <br>    Edit_GetText(hedit, paacd-&gt;szFilePathDst, SIZEOF(paacd-&gt;szFilePathDst)); <br> <br> <br>    // <br>    // <br>    // <br>    nValue = (int)paacd-&gt;uBufferTimePerConvert; <br>    hsb = GetDlgItem(hwnd, IDD_AACHOOSER_SCROLL_TIME); <br>    GetScrollRange(hsb, SB_CTL, &amp;nMinPos, &amp;nMaxPos); <br>    if (nValue != GetScrollPos(hsb, SB_CTL)) <br>    { <br>        SetScrollPos(hsb, SB_CTL, nValue, TRUE); <br> <br>        if (nValue == nMaxPos) <br>        { <br>            lstrcpy(ach, TEXT("(ALL)")); <br>        } <br>        else if (nValue == nMinPos) <br>        { <br>            lstrcpy(ach, TEXT("(Auto)")); <br>        } <br>        else <br>        { <br>            wsprintf(ach, TEXT("%u.%.03u"), nValue / 1000, nValue % 1000); <br>        } <br> <br>        htxt = GetDlgItem(hwnd, IDD_AACHOOSER_TXT_TIME); <br>        SetWindowText(htxt, ach); <br>    } <br> <br>    // <br>    // <br>    // <br>    if (nValue == nMaxPos) <br>    { <br>        cbSrc = paacd-&gt;cbSrcData; <br>    } <br>    else if (nValue == nMinPos) <br>    { <br>        // <br>        //  could do something real here--for now, just do '1/8th of <br>        //  a second'.. <br>        // <br>        cbSrc = paacd-&gt;pwfxSrc-&gt;nAvgBytesPerSec; <br>        cbSrc = MulDivRN(cbSrc, 175, 1000); <br>    } <br>    else <br>    { <br>        cbSrc = paacd-&gt;pwfxSrc-&gt;nAvgBytesPerSec; <br>        cbSrc = MulDivRN(cbSrc, (UINT)nValue, 1000); <br>    } <br> <br>    paacd-&gt;cbSrcReadSize = cbSrc; <br> <br> <br>    // <br>    // <br>    // <br>    paacd-&gt;hadid = NULL; <br> <br>    hcb = GetDlgItem(hwnd, IDD_AACHOOSER_COMBO_DRIVER); <br>    n   = ComboBox_GetCurSel(hcb); <br>    if (LB_ERR != n) <br>    { <br>        paacd-&gt;hadid = (HACMDRIVERID)(UINT)ComboBox_GetItemData(hcb, n); <br>    } <br> <br>    // <br>    // <br>    // <br>    // <br>    htxt = GetDlgItem(hwnd, IDD_AACHOOSER_TXT_FORMAT); <br>    if (NULL == paacd-&gt;pwfxDst) <br>    { <br>        SetWindowText(htxt, TEXT("(no format selected)")); <br>    } <br>    else <br>    { <br>        AppSetWindowText(htxt, TEXT("%s: %s\r\nAlignment=%u"), <br>                            (LPTSTR)paacd-&gt;szDstFormatTag, <br>                            (LPTSTR)paacd-&gt;szDstFormat, <br>                            paacd-&gt;pwfxDst-&gt;nBlockAlign); <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    htxt = GetDlgItem(hwnd, IDD_AACHOOSER_TXT_FILTER); <br>    if (NULL == paacd-&gt;pwfltr) <br>    { <br>        SetWindowText(htxt, TEXT("(no filter selected)")); <br>    } <br>    else <br>    { <br>        AppSetWindowText(htxt, TEXT("%s: %s"), <br>                            (LPTSTR)paacd-&gt;szFilterTag, <br>                            (LPTSTR)paacd-&gt;szFilter); <br>    } <br> <br> <br>    hedit = GetDlgItem(hwnd, IDD_AACHOOSER_EDIT_DETAILS); <br>    MEditPrintF(hedit, NULL); <br> <br>    if (NULL == paacd-&gt;pwfxDst) <br>    { <br>        MEditPrintF(hedit, TEXT("hadid=%.04Xh\r\npwfxDst=%.08lXh\r\npwfltr=%.08lXh"), <br>                        paacd-&gt;hadid, <br>                        paacd-&gt;pwfxDst, <br>                        paacd-&gt;pwfltr); <br>        return (FALSE); <br>    } <br> <br>    // <br>    // <br>    // <br>    if (NULL != paacd-&gt;hadid) <br>    { <br>        mmr = acmDriverOpen(&amp;paacd-&gt;had, paacd-&gt;hadid, 0L); <br>        if (MMSYSERR_NOERROR != mmr) <br>        { <br>            AcmAppGetErrorString(mmr, ach); <br>            MEditPrintF(hedit, TEXT("The selected driver (hadid=%.04Xh) cannot be opened. %s (%u)"), <br>                        paacd-&gt;hadid, (LPSTR)ach, mmr); <br>            return (FALSE); <br>        } <br>    } <br> <br> <br>    SetWindowRedraw(hedit, FALSE); <br> <br> <br>    // <br>    // <br>    // <br>    f = IsDlgButtonChecked(hwnd, IDD_AACHOOSER_CHECK_FILTER); <br>    pwfltr = (f ? paacd-&gt;pwfltr : (LPWAVEFILTER)NULL); <br> <br>    paacd-&gt;fApplyFilter = f; <br> <br> <br>    fdwOpen = 0L; <br>    f = IsDlgButtonChecked(hwnd, IDD_AACHOOSER_CHECK_NONREALTIME); <br>    if (f) <br>    { <br>        fdwOpen |= ACM_STREAMOPENF_NONREALTIME; <br>    } <br> <br>    f = IsDlgButtonChecked(hwnd, IDD_AACHOOSER_CHECK_ASYNC); <br>    if (f) <br>    { <br>        fdwOpen |= ACM_STREAMOPENF_ASYNC; <br>    } <br> <br>    paacd-&gt;fdwOpen = fdwOpen; <br> <br> <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, TEXT("~%12s: "), (LPTSTR)TEXT("Stream Open")); </code></pre>
<p>
</p>
<pre><code>mmr = acmStreamOpen(&amp;paacd-&gt;has, <br>                        paacd-&gt;had, <br>                        paacd-&gt;pwfxSrc, <br>                        paacd-&gt;pwfxDst, <br>                        pwfltr, <br>                        0L, <br>                        0L, <br>                        fdwOpen); <br> <br>    if (MMSYSERR_NOERROR == mmr) <br>    { <br>        TCHAR       szSrc[20]; <br>        BOOL        fSrcAligned; <br>        BOOL        fDstAligned; <br> <br>        acmDriverID((HACMOBJ)paacd-&gt;has, &amp;hadid, 0L); <br> <br>        add.cbStruct = sizeof(add); <br>        mmr = acmDriverDetails(hadid, &amp;add, 0L); <br>        if (MMSYSERR_NOERROR != mmr) <br>        { <br>            lstrcpy(add.szLongName,  gszBogus); <br>        } <br> <br> <br>        MEditPrintF(hedit, TEXT("%s, %s"), (LPTSTR)gszYes, (LPTSTR)add.szLongName); <br> <br>        fSrcAligned = (0 == (cbSrc % paacd-&gt;pwfxSrc-&gt;nBlockAlign)); <br>        AppFormatBigNumber(szSrc, cbSrc); <br> <br>        mmr = acmStreamSize(paacd-&gt;has, cbSrc, &amp;cbDst, ACM_STREAMSIZEF_SOURCE); <br>        if (MMSYSERR_NOERROR == mmr) <br>        { <br>            TCHAR       szDst[20]; <br> <br>            fDstAligned = (0 == (cbDst % paacd-&gt;pwfxDst-&gt;nBlockAlign)); <br>            AppFormatBigNumber(szDst, cbDst); <br> <br>            if (cbSrc &lt; cbDst) <br>            { <br>                cbDst = MulDivRN(cbDst, 10, cbSrc); <br>                cbSrc = 10; <br>            } <br>            else <br>            { <br>                cbSrc = MulDivRN(cbSrc, 10, cbDst); <br>                cbDst = 10; <br>            } <br> <br>            MEditPrintF(hedit, TEXT("%12s: Src=%c%10s, Dst=%c%10s  (%lu.%lu:%lu.%lu)"), <br>                        (LPTSTR)TEXT("Buffer Size"), <br>                        fSrcAligned ? '*' : ' ', <br>                        (LPTSTR)szSrc, <br>                        fDstAligned ? '*' : ' ', <br>                        (LPTSTR)szDst, <br>                        cbSrc / 10, cbSrc % 10, <br>                        cbDst / 10, cbDst % 10); <br>        } <br>        else <br>        { <br>            AcmAppGetErrorString(mmr, ach); <br>            MEditPrintF(hedit, TEXT("%12s: Src=%c%10s, %s (%u)"), (LPTSTR)TEXT("Buffer Size"), <br>                        fSrcAligned ? '*' : ' ', <br>                        (LPTSTR)szSrc, (LPTSTR)ach, mmr); <br>        } <br> <br>        acmStreamClose(paacd-&gt;has, 0L); <br>        paacd-&gt;has = NULL; <br>    } <br>    else <br>    { <br>        AcmAppGetErrorString(mmr, ach); <br>        MEditPrintF(hedit, TEXT("%s, %s (%u)"), (LPTSTR)gszNo, (LPSTR)ach, mmr); <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    MEditPrintF(hedit, TEXT("~%12s: "), (LPTSTR)TEXT("(Query)")); <br>    mmr = acmStreamOpen(NULL, <br>                        paacd-&gt;had, <br>                        paacd-&gt;pwfxSrc, <br>                        paacd-&gt;pwfxDst, <br>                        pwfltr, <br>                        0L, <br>                        0L, <br>                        fdwOpen | ACM_STREAMOPENF_QUERY); <br> <br>    if (MMSYSERR_NOERROR == mmr) <br>    { <br>        MEditPrintF(hedit, gszYes); <br>    } <br>    else <br>    { <br>        AcmAppGetErrorString(mmr, ach); <br>        MEditPrintF(hedit, TEXT("%s, %s (%u)"), (LPTSTR)gszNo, (LPSTR)ach, mmr); <br>    } <br> <br>    if (NULL != paacd-&gt;had) <br>    { <br>        acmDriverClose(paacd-&gt;had, 0L); <br>        paacd-&gt;had = NULL; <br>    } <br> <br>    SetWindowRedraw(hedit, TRUE); <br> <br> <br>    return (MMSYSERR_NOERROR == mmr); <br>} // AcmAppChooserUpdateDisplay() <br> <br> <br>//--------------------------------------------------------------------------; <br>//   <br>//  BOOL AcmAppChooserScrollConvertTime <br>//   <br>//  Description: <br>//   <br>//   <br>//  Arguments: <br>//      HWND hwnd: <br>//   <br>//      HWND hsb: <br>//   <br>//      UINT uCode: <br>//   <br>//      int nPos: <br>//   <br>//  Return (BOOL): <br>//   <br>//   <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL AcmAppChooserScrollConvertTime <br>( <br>    HWND                    hwnd, <br>    HWND                    hsb, <br>    UINT                    uCode, <br>    int                     nPos <br>) <br>{ <br>    PAACONVERTDESC      paacd; <br>    int                 nMinPos; <br>    int                 nMaxPos; <br>    HWND                htxt; <br>    TCHAR               ach[40]; <br> <br> <br>    GetScrollRange(hsb, SB_CTL, &amp;nMinPos, &amp;nMaxPos); <br> <br>    if ((SB_THUMBPOSITION != uCode) &amp;&amp; (SB_THUMBTRACK != uCode)) <br>    { <br>        nPos = GetScrollPos(hsb, SB_CTL); <br>    } <br> <br>    // <br>    // <br>    // <br>    switch (uCode) <br>    { <br>        case SB_PAGEDOWN: <br>            if (GetKeyState(VK_CONTROL) &lt; 0) <br>                nPos = min(nMaxPos, nPos + 100); <br>            else <br>                nPos = min(nMaxPos, nPos + 500); <br>            break; <br> <br>        case SB_LINEDOWN: <br>            if (GetKeyState(VK_CONTROL) &lt; 0) <br>                nPos = min(nMaxPos, nPos + 1); <br>            else <br>                nPos = min(nMaxPos, nPos + 10); <br>            break; <br> <br>        case SB_PAGEUP: <br>            if (GetKeyState(VK_CONTROL) &lt; 0) <br>                nPos = max(nMinPos, nPos - 100); <br>            else <br>                nPos = max(nMinPos, nPos - 500); <br>            break; <br> <br>        case SB_LINEUP: <br>            if (GetKeyState(VK_CONTROL) &lt; 0) <br>                nPos = max(nMinPos, nPos - 1); <br>            else <br>                nPos = max(nMinPos, nPos - 10); <br>            break; <br> <br> <br>        case SB_TOP: <br>            if (GetKeyState(VK_CONTROL) &lt; 0) <br>                nPos = nMinPos; <br>            else <br>                nPos = 1000; <br>            break; <br> <br>        case SB_BOTTOM: <br>            nPos = nMaxPos; <br>            break; <br> <br>        case SB_THUMBPOSITION: <br>        case SB_THUMBTRACK: <br>            break; <br> <br>        default: <br>            return (FALSE); <br>    } <br> <br>    // <br>    // <br>    // <br>    paacd = (PAACONVERTDESC)(UINT)GetWindowLong(hwnd, DWL_USER); <br> <br>    paacd-&gt;uBufferTimePerConvert = (UINT)nPos; <br> <br>    SetScrollPos(hsb, SB_CTL, nPos, TRUE); <br> <br>    if (nPos == nMaxPos) <br>    { <br>        lstrcpy(ach, TEXT("(ALL)")); <br>    } <br>    else if (nPos == nMinPos) <br>    { <br>        lstrcpy(ach, TEXT("(Auto)")); <br>    } <br>    else <br>    { <br>        wsprintf(ach, TEXT("%u.%.03u"), nPos / 1000, nPos % 1000); <br>    } <br> <br>    htxt = GetDlgItem(hwnd, IDD_AACHOOSER_TXT_TIME); <br>    SetWindowText(htxt, ach); <br> <br>    // <br>    // <br>    // <br>    return (TRUE); <br>} // AcmAppChooserScrollConvertTime() <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL AcmAppDlgProcChooser <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: Handle to window. <br>// <br>//      UINT uMsg: Message being sent to the window. <br>// <br>//      WPARAM wParam: Specific argument to message. <br>// <br>//      LPARAM lParam: Specific argument to message. <br>// <br>//  Return (BOOL): <br>//      The return value is specific to the message that was received. For <br>//      the most part, it is FALSE if this dialog procedure does not handle <br>//      a message. <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNEXPORT AcmAppDlgProcChooser <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    PAACONVERTDESC      paacd; <br>    HWND                hedit; <br>    HWND                htxt; <br>    HWND                hcb; <br>    HWND                hsb; <br>    HFONT               hfont; <br>    UINT                uId; <br>    UINT                uCmd; <br>    BOOL                f; <br> <br>    // <br>    // <br>    // <br>    if ((0 != guMsgHelp) &amp;&amp; (uMsg == guMsgHelp)) <br>    { <br>        WinHelp(hwnd, gpszAcmAppHelp, HELP_CONTENTS, 0L); <br>        return (TRUE); <br>    } <br> <br>    paacd = (PAACONVERTDESC)(UINT)GetWindowLong(hwnd, DWL_USER); <br> <br>    // <br>    // <br>    // <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            paacd = (PAACONVERTDESC)(UINT)lParam; <br> <br>            SetWindowLong(hwnd, DWL_USER, lParam); <br> <br>            if (NULL == paacd-&gt;pwfxSrc) <br>            { <br>                AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                          TEXT("You must select a source file to convert.")); <br>                EndDialog(hwnd, FALSE); <br>                return (TRUE); <br>            } <br> <br>            if (NULL == paacd-&gt;pwfxDst) <br>            { <br>                AcmAppChooserFormatSuggest(hwnd, paacd); <br>            } <br> <br>            hfont = GetStockFont(SYSTEM_FONT); <br> <br>            htxt = GetDlgItem(hwnd, IDD_AACHOOSER_TXT_FILE_INPUT); <br>            SetWindowFont(htxt, hfont, FALSE); <br> <br>            htxt = GetDlgItem(hwnd, IDD_AACHOOSER_TXT_FORMAT_INPUT); <br>            SetWindowFont(htxt, hfont, FALSE); <br>     <br>            hedit = GetDlgItem(hwnd, IDD_AACHOOSER_EDIT_FILE_OUTPUT); <br>            SetWindowFont(hedit, hfont, FALSE); <br>            Edit_SetText(hedit, paacd-&gt;szFilePathDst); <br> <br>            hcb = GetDlgItem(hwnd, IDD_AACHOOSER_COMBO_DRIVER); <br>            SetWindowFont(hcb, hfont, FALSE); <br> <br>            htxt = GetDlgItem(hwnd, IDD_AACHOOSER_TXT_FORMAT); <br>            SetWindowFont(htxt, hfont, FALSE); <br> <br>            htxt = GetDlgItem(hwnd, IDD_AACHOOSER_TXT_FILTER); <br>            SetWindowFont(htxt, hfont, FALSE); <br> <br> <br>            hfont = ghfontApp; <br> <br>            htxt = GetDlgItem(hwnd, IDD_AACHOOSER_TXT_TIME); <br>            SetWindowFont(htxt, hfont, FALSE); <br> <br>            hedit = GetDlgItem(hwnd, IDD_AACHOOSER_EDIT_DETAILS); <br>            SetWindowFont(hedit, hfont, FALSE); <br> <br>            hsb = GetDlgItem(hwnd, IDD_AACHOOSER_SCROLL_TIME); <br>            SetScrollRange(hsb, SB_CTL, 0, 10000, FALSE); <br> <br> <br>            // <br>            // <br>            // <br>            CheckDlgButton(hwnd, IDD_AACHOOSER_CHECK_NONREALTIME, TRUE); <br> <br>            SendMessage(hwnd, WM_ACMAPP_ACM_NOTIFY, 0, 0L); <br>            return (TRUE); <br> <br> <br>        case WM_ACMAPP_ACM_NOTIFY: <br>            AppHourGlass(TRUE); <br>            hcb = GetDlgItem(hwnd, IDD_AACHOOSER_COMBO_DRIVER); <br> <br>            SetWindowRedraw(hcb, FALSE); <br>            ComboBox_ResetContent(hcb); <br> <br>            ComboBox_AddString(hcb, TEXT("[ACM Driver Mapper]")); <br> <br>            AcmAppDebugLog(NULL); <br>            acmDriverEnum(AcmAppChooserDriverEnumCallback, (DWORD)(UINT)hcb, 0L); <br> <br>            ComboBox_SetCurSel(hcb, 0); <br>            SetWindowRedraw(hcb, TRUE); <br> <br>            f = AcmAppChooserUpdateDisplay(hwnd, paacd); <br>            EnableWindow(GetDlgItem(hwnd, IDOK), f); <br>            EnableWindow(GetDlgItem(hwnd, IDD_AACHOOSER_BTN_PROPERTIES), f); <br> <br>            AppHourGlass(FALSE); <br>            break; <br> <br> <br>        case WM_HSCROLL: <br>            f = (BOOL)HANDLE_WM_HSCROLL(hwnd, wParam, lParam, AcmAppChooserScrollConvertTime); <br>            f = TRUE; <br>            if (f) <br>            { <br>                AppHourGlass(TRUE); <br> <br>                f = AcmAppChooserUpdateDisplay(hwnd, paacd); <br>                EnableWindow(GetDlgItem(hwnd, IDOK), f); <br>                EnableWindow(GetDlgItem(hwnd, IDD_AACHOOSER_BTN_PROPERTIES), f); <br> <br>                AppHourGlass(FALSE); <br>            } <br>            return (TRUE); <br> <br> <br>        case WM_COMMAND: <br>            uId = GET_WM_COMMAND_ID(wParam, lParam); <br>            f   = FALSE; <br> <br>            switch (uId) <br>            { <br>                case IDD_AACHOOSER_BTN_BROWSE: <br>                    f = AcmAppChooserSaveFile(hwnd, paacd); <br>                    break; <br> <br>                case IDD_AACHOOSER_BTN_PROPERTIES: <br>                    f = AcmAppChooserProperties(hwnd, paacd); <br>                    break; <br> <br>                case IDD_AACHOOSER_BTN_FORMAT_OPTIONS: <br>                case IDD_AACHOOSER_BTN_FORMAT: <br>                    f = (IDD_AACHOOSER_BTN_FORMAT_OPTIONS == uId); <br>                    f = AcmAppChooserFormat(hwnd, paacd, f); <br>                    break; <br> <br>                case IDD_AACHOOSER_BTN_FILTER_OPTIONS: <br>                case IDD_AACHOOSER_BTN_FILTER: <br>                    f = (IDD_AACHOOSER_BTN_FILTER_OPTIONS == uId); <br>                    f = AcmAppChooserFilter(hwnd, paacd, f); <br>                    break; <br> <br> <br>                case IDD_AACHOOSER_COMBO_DRIVER: <br>                    uCmd = GET_WM_COMMAND_CMD(wParam, lParam); <br>                    switch (uCmd) <br>                    { <br>                        case CBN_SELCHANGE: <br>                            f = TRUE; <br>                            break; <br>                    } <br>                    break; <br> <br> <br>                case IDD_AACHOOSER_CHECK_FILTER: <br>                case IDD_AACHOOSER_CHECK_NONREALTIME: <br>                case IDD_AACHOOSER_CHECK_ASYNC: <br>                    f = TRUE; <br>                    break; <br> <br> <br>                case IDOK: <br>                    hedit = GetDlgItem(hwnd, IDD_AACHOOSER_EDIT_FILE_OUTPUT); <br>                    Edit_GetText(hedit, paacd-&gt;szFilePathDst, SIZEOF(paacd-&gt;szFilePathDst)); <br>                     <br>                case IDCANCEL: <br>                    EndDialog(hwnd, (IDOK == uId)); <br>                    break; <br>            } <br> <br>            // <br>            // <br>            // <br>            if (f) <br>            { <br>                AppHourGlass(TRUE); <br> <br>                f = AcmAppChooserUpdateDisplay(hwnd, paacd); <br>                EnableWindow(GetDlgItem(hwnd, IDOK), f); <br>                EnableWindow(GetDlgItem(hwnd, IDD_AACHOOSER_BTN_PROPERTIES), f); <br> <br>                AppHourGlass(FALSE); <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // AcmAppDlgProcChooser() </code></pre>
<p>&nbsp;</p></body>
</HTML>

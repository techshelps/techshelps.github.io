<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MULDIV32.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2467"></a>MULDIV32.H</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright 1992 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>//  muldiv32.h <br>// <br>//  Description: <br>//      math routines for 32 bit signed and unsiged numbers. <br>// <br>//      MulDiv32(a,b,c) = (a * b) / c         (round down, signed) <br>// <br>//      MulDivRD(a,b,c) = (a * b) / c         (round down, unsigned) <br>//      MulDivRN(a,b,c) = (a * b + c/2) / c   (round nearest, unsigned) <br>//      MulDivRU(a,b,c) = (a * b + c-1) / c   (round up, unsigned) <br>// <br>//==========================================================================; <br> <br>#ifndef _INC_MULDIV32 <br>#define _INC_MULDIV32 <br> <br> <br>#ifndef INLINE <br>#define INLINE __inline <br>#endif <br> <br> <br>#ifdef WIN32 <br> <br>    //----------------------------------------------------------------------; <br>    // <br>    //  Win 32 <br>    // <br>    //----------------------------------------------------------------------; <br> <br>    #ifdef _X86_ <br>     <br>        // <br>        //  Use 32-bit x86 assembly. <br>        // <br> <br>        #pragma warning(disable:4035 4704) <br> <br>        INLINE LONG MulDiv32(LONG a,LONG b,LONG c) <br>        { <br>            _asm     mov     eax,dword ptr a  //  mov  eax, a <br>            _asm     mov     ebx,dword ptr b  //  mov  ebx, b <br>            _asm     mov     ecx,dword ptr c  //  mov  ecx, c <br>            _asm     imul    ebx              //  imul ebx <br>            _asm     idiv    ecx              //  idiv ecx <br>            _asm shld edx, eax, 16     //  shld edx, eax, 16 <br> <br>        } // MulDiv32() <br> <br>        INLINE DWORD MulDivRN(DWORD a,DWORD b,DWORD c) <br>        { <br>            _asm     mov     eax,dword ptr a  //  mov  eax, a <br>            _asm     mov     ebx,dword ptr b  //  mov  ebx, b <br>            _asm     mov     ecx,dword ptr c  //  mov  ecx, c <br>            _asm     mul     ebx              //  mul  ebx <br>            _asm     mov     ebx,ecx          //  mov  ebx,ecx <br>            _asm     shr     ebx,1            //  sar  ebx,1 <br>            _asm     add     eax,ebx          //  add  eax,ebx <br>            _asm     adc     edx,0            //  adc  edx,0 <br>            _asm     div     ecx              //  div  ecx <br>            _asm     shld    edx, eax, 16     //  shld edx, eax, 16 <br> <br>        } // MulDiv32() <br> <br>        INLINE DWORD MulDivRU(DWORD a,DWORD b,DWORD c) <br>        { <br>            _asm     mov     eax,dword ptr a  //  mov  eax, a <br>            _asm     mov     ebx,dword ptr b  //  mov  ebx, b <br>            _asm     mov     ecx,dword ptr c  //  mov  ecx, c <br>            _asm     mul     ebx              //  mul  ebx <br>            _asm     mov     ebx,ecx          //  mov  ebx,ecx <br>            _asm     dec     ebx              //  dec  ebx <br>            _asm     add     eax,ebx          //  add  eax,ebx <br>            _asm     adc     edx,0            //  adc  edx,0 <br>            _asm     div     ecx              //  div  ecx <br>            _asm     shld    edx, eax, 16     //  shld edx, eax, 16 <br> <br>        } // MulDivRU32() <br> <br>        INLINE DWORD MulDivRD(DWORD a,DWORD b,DWORD c) <br>        { <br>            _asm     mov     eax,dword ptr a  //  mov  eax, a <br>            _asm     mov     ebx,dword ptr b  //  mov  ebx, b <br>            _asm     mov     ecx,dword ptr c  //  mov  ecx, c <br>            _asm     mul     ebx              //  mul  ebx <br>            _asm     div     ecx              //  div  ecx <br>            _asm     shld    edx, eax, 16     //  shld edx, eax, 16 <br> <br>        } // MulDivRD32() <br> <br>        #pragma warning(default:4035 4704) <br> <br> <br>    #else <br> <br>        // <br>        //  Use C9 __int64 support for Daytona RISC platforms. <br>        // <br> <br>        INLINE LONG MulDiv32( LONG a, LONG b, LONG c ) <br>        { <br>            return (LONG)( Int32x32To64(a,b) / c ); <br>        } <br> <br> <br>        INLINE DWORD MulDivRD( DWORD a, DWORD b, DWORD c ) <br>        { <br>            return (DWORD)( UInt32x32To64(a,b) / c ); <br>        } <br> <br> <br>        INLINE DWORD MulDivRN( DWORD a, DWORD b, DWORD c ) <br>        { <br>            return (DWORD)( (UInt32x32To64(a,b)+c/2) / c ); <br>        } <br> <br> <br>        INLINE DWORD MulDivRU( DWORD a, DWORD b, DWORD c ) <br>        { <br>            return (DWORD)( (UInt32x32To64(a,b)+c-1) / c ); <br>        } <br> <br>    #endif <br> <br> <br>#else <br> <br>    //----------------------------------------------------------------------; <br>    // <br>    //  Win 16 <br>    // <br>    //----------------------------------------------------------------------; <br> <br>    #pragma warning(disable:4035 4704) <br> <br>    // <br>    //  Compile for 16-bit - we can use x86 with proper opcode prefixes <br>    //    to get 32-bit instructions. <br>    // <br> <br>    INLINE LONG MulDiv32(LONG a,LONG b,LONG c) <br>    { <br>        _asm _emit 0x66 _asm    mov     ax,word ptr a   //  mov  eax, a <br>        _asm _emit 0x66 _asm    mov     bx,word ptr b   //  mov  ebx, b <br>        _asm _emit 0x66 _asm    mov     cx,word ptr c   //  mov  ecx, c <br>        _asm _emit 0x66 _asm    imul    bx              //  imul ebx <br>        _asm _emit 0x66 _asm    idiv    cx              //  idiv ecx <br>        _asm _emit 0x66                                 //  shld edx, eax, 16 <br>        _asm _emit 0x0F <br>        _asm _emit 0xA4 <br>        _asm _emit 0xC2 <br>        _asm _emit 0x10 <br> <br>    } // MulDiv32() <br> <br>    INLINE DWORD MulDivRN(DWORD a,DWORD b,DWORD c) <br>    { <br>        _asm _emit 0x66 _asm    mov     ax,word ptr a   //  mov  eax, a <br>        _asm _emit 0x66 _asm    mov     bx,word ptr b   //  mov  ebx, b <br>        _asm _emit 0x66 _asm    mov     cx,word ptr c   //  mov  ecx, c <br>        _asm _emit 0x66 _asm    mul     bx              //  mul  ebx <br>        _asm _emit 0x66 _asm    mov     bx,cx           //  mov  ebx,ecx <br>        _asm _emit 0x66 _asm    shr     bx,1            //  sar  ebx,1 <br>        _asm _emit 0x66 _asm    add     ax,bx           //  add  eax,ebx <br>        _asm _emit 0x66 _asm    adc     dx,0            //  adc  edx,0 <br>        _asm _emit 0x66 _asm    div     cx              //  div  ecx <br>        _asm _emit 0x66                                 //  shld edx, eax, 16 <br>        _asm _emit 0x0F <br>        _asm _emit 0xA4 <br>        _asm _emit 0xC2 <br>        _asm _emit 0x10 <br> <br>    } // MulDiv32() <br> <br>    INLINE DWORD MulDivRU(DWORD a,DWORD b,DWORD c) <br>    { <br>        _asm _emit 0x66 _asm    mov     ax,word ptr a   //  mov  eax, a <br>        _asm _emit 0x66 _asm    mov     bx,word ptr b   //  mov  ebx, b <br>        _asm _emit 0x66 _asm    mov     cx,word ptr c   //  mov  ecx, c <br>        _asm _emit 0x66 _asm    mul     bx              //  mul  ebx <br>        _asm _emit 0x66 _asm    mov     bx,cx           //  mov  ebx,ecx <br>        _asm _emit 0x66 _asm    dec     bx              //  dec  ebx <br>        _asm _emit 0x66 _asm    add     ax,bx           //  add  eax,ebx <br>        _asm _emit 0x66 _asm    adc     dx,0            //  adc  edx,0 <br>        _asm _emit 0x66 _asm    div     cx              //  div  ecx <br>        _asm _emit 0x66                                 //  shld edx, eax, 16 <br>        _asm _emit 0x0F <br>        _asm _emit 0xA4 <br>        _asm _emit 0xC2 <br>        _asm _emit 0x10 <br> <br>    } // MulDivRU32() <br> <br> <br>    INLINE DWORD MulDivRD(DWORD a,DWORD b,DWORD c) <br>    { <br>        _asm _emit 0x66 _asm    mov     ax,word ptr a   //  mov  eax, a <br>        _asm _emit 0x66 _asm    mov     bx,word ptr b   //  mov  ebx, b <br>        _asm _emit 0x66 _asm    mov     cx,word ptr c   //  mov  ecx, c <br>        _asm _emit 0x66 _asm    mul     bx              //  mul  ebx <br>        _asm _emit 0x66 _asm    div     cx              //  div  ecx <br>        _asm _emit 0x66                                 //  shld edx, eax, 16 <br>        _asm _emit 0x0F <br>        _asm _emit 0xA4 <br>        _asm _emit 0xC2 <br>        _asm _emit 0x10 <br> <br>    } // MulDivRD32() <br> <br>    #pragma warning(default:4035 4704) <br> <br>#endif <br> <br> <br>// <br>//  some code references these by other names. <br>// <br>#define muldiv32    MulDivRN <br>#define muldivrd32  MulDivRD <br>#define muldivru32  MulDivRU <br> <br>#endif  // _INC_MULDIV32 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MIDIMON.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2521"></a>MIDIMON.H</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br> *  <br> **************************************************************************/ <br> <br>/* <br> *    midimon.h <br> */ <br> <br> <br>/* Compile-time application metrics <br> */ <br>#define MAX_NUM_DEVICES         8       // max # of MIDI input devices <br>#define INPUT_BUFFER_SIZE       200     // size of input buffer in events <br>#define DISPLAY_BUFFER_SIZE     1000    // size of display buffer in events <br> <br>/* Menu IDs  <br> */ <br>#define IDM_SAVE                101 <br>#define IDM_EXIT                102 <br>#define IDM_SETBUFSIZE          201 <br>#define IDM_SETDISPLAY          202 <br>#define IDM_SAVESETUP           203 <br>#define IDM_SENDTOMAPPER        204 <br>#define IDM_FILTCHAN0           300 <br>#define IDM_FILTCHAN1           301 <br>#define IDM_FILTCHAN2           302 <br>#define IDM_FILTCHAN3           303 <br>#define IDM_FILTCHAN4           304 <br>#define IDM_FILTCHAN5           305 <br>#define IDM_FILTCHAN6           306 <br>#define IDM_FILTCHAN7           307 <br>#define IDM_FILTCHAN8           308 <br>#define IDM_FILTCHAN9           309 <br>#define IDM_FILTCHAN10          310 <br>#define IDM_FILTCHAN11          311 <br>#define IDM_FILTCHAN12          312 <br>#define IDM_FILTCHAN13          313 <br>#define IDM_FILTCHAN14          314 <br>#define IDM_FILTCHAN15          315 <br>#define IDM_NOTEOFF             316 <br>#define IDM_NOTEON              317 <br>#define IDM_POLYAFTERTOUCH      318 <br>#define IDM_CONTROLCHANGE       319 <br>#define IDM_PROGRAMCHANGE       320 <br>#define IDM_CHANNELAFTERTOUCH   321 <br>#define IDM_PITCHBEND           322 <br>#define IDM_CHANNELMODE         323 <br>#define IDM_SYSTEMEXCLUSIVE     324 <br>#define IDM_SYSTEMCOMMON        325 <br>#define IDM_SYSTEMREALTIME      326 <br>#define IDM_ACTIVESENSE         327 <br>#define IDM_STARTSTOP           400 <br>#define IDM_CLEAR               500 <br>#define IDM_ABOUT               600 <br> <br>/* String resource IDs  <br> */ <br>#define IDS_APPNAME             1 <br> <br>#define IDS_LABEL16 <br>#define IDS_UNKNOWN_EVENT17 <br>#define IDS_NOMIDIIN18 <br>#define IDS_NOMEM_IBUF19 <br>#define IDS_NOMEM_DBUF20 <br>#define IDS_NOMEM21 <br>#define IDS_START22 <br>#define IDS_STOP23 <br>#define IDS_WRITEERR24 <br> <br>/* Custom messages sent by low-level callback to application  <br> */ <br>#define MM_MIDIINPUT    WM_USER + 0 <br> <br> <br>/* The label for the display window. <br> */ <br>// now defined as IDS_LABEL in midimon.rc stringtable <br> <br> <br>/* Structure for translating virtual key messages to scroll messages. <br> */ <br>typedef struct keyToScroll_tag <br>{ <br>     WORD wVirtKey; <br>     int  iMessage; <br>     WORD wRequest; <br>} KEYTOSCROLL; <br> <br>/* Structure to represent a single MIDI event. <br> */ <br> <br>#define EVNT_F_ERROR    0x00000001L <br> <br>typedef struct event_tag <br>{ <br>    DWORD fdwEvent; <br>    DWORD dwDevice; <br>    DWORD timestamp; <br>    DWORD data; <br>} EVENT; <br>typedef EVENT FAR *LPEVENT; <br> <br> <br>/* Function prototypes  <br> */ <br>LRESULT FAR PASCAL WndProc(HWND, UINT, WPARAM , LPARAM); <br>VOID CommandMsg(HWND hWnd, WPARAM wParam, LPARAM lParam); <br>void DoMenuItemCheck(HWND hWnd, WORD menuItem, BOOL newState); <br>void SetupCustomChecks(HANDLE hInstance, HWND hWnd); <br>BOOL InitFirstInstance(HANDLE); <br>int Error(LPSTR msg); <br> <br>LPTSTR GetStringRes (int id); </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILTER.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2516"></a>FILTER.C</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br> *  <br> **************************************************************************/ <br> <br>/* <br> * filter.c - Routines to filter MIDI events. <br> */ <br> <br>#include &lt;windows.h&gt; <br>#include "midimon.h" <br>#include "display.h" <br>#include "filter.h" <br> <br>/* CheckEventFilter - Checks the given EVENT against the given FILTER. <br> *       <br> * Params:  lpEvent - Points to an EVENT. <br> *          lpFilter - Points to a FILTER structure. <br> * <br> * Return:  Returns 1 if the event is filtered, 0 if it is not filtered. <br> */ <br>BOOL CheckEventFilter(LPEVENT lpEvent, LPFILTER lpFilter) <br>{ <br>    BYTE bStatus, bStatusRaw, bChannel, bData1, bData2; <br> <br>    /* Get the essential info from the EVENT. <br>     */ <br>    bStatusRaw = LOBYTE(LOWORD(lpEvent-&gt;data)); <br>    bStatus = bStatusRaw &amp; (BYTE) 0xf0; <br>    bChannel = LOBYTE(LOWORD(lpEvent-&gt;data)) &amp; (BYTE) 0x0f; <br>    bData1 = HIBYTE(LOWORD(lpEvent-&gt;data)); <br>    bData2 = LOBYTE(HIWORD(lpEvent-&gt;data)); <br> <br>    /* Do channel filtering for all but system events. <br>     */ <br>    if(bStatus != SYSTEMMESSAGE){ <br>        if(lpFilter-&gt;channel[bChannel]) <br>            return 1; <br>    } <br> <br>    /* Do event-type filtering. <br>     */ <br>    switch(bStatus){ <br>        case NOTEOFF: <br>            if(lpFilter-&gt;event.noteOff) <br>                return 1; <br>            break; <br> <br>        case NOTEON: <br>            /* A note on with a velocity of 0 is a note off. <br>             */ <br>            if(bData2 == 0){ <br>                if(lpFilter-&gt;event.noteOff) <br>                    return 1; <br>                break; <br>            } <br>             <br>            if(lpFilter-&gt;event.noteOn) <br>                return 1; <br>            break; <br> <br>        case KEYAFTERTOUCH: <br>            if(lpFilter-&gt;event.keyAftertouch) <br>                return 1; <br>            break; <br> <br>        case CONTROLCHANGE: <br>            if(lpFilter-&gt;event.controller) <br>                return 1; <br>             <br>            /* Channel mode messages can be filtered. <br>             */ <br>            if((bData1 &gt;= 121) &amp;&amp; lpFilter-&gt;event.channelMode) <br>                return 1; <br>            break; <br> <br>        case PROGRAMCHANGE: <br>            if(lpFilter-&gt;event.progChange) <br>                return 1; <br>            break; <br> <br>        case CHANAFTERTOUCH: <br>            if(lpFilter-&gt;event.chanAftertouch) <br>                return 1; <br>            break; <br> <br>        case PITCHBEND: <br>            if(lpFilter-&gt;event.pitchBend) <br>                return 1; <br>            break; <br> <br>        case SYSTEMMESSAGE: <br>            /* System common messages. <br>             */ <br>            if((bStatusRaw &lt; 0xf8) &amp;&amp; (lpFilter-&gt;event.sysCommon)) <br>                return 1; <br> <br>            /* Active sensing messages. <br>             */ <br>            if((bStatusRaw == 0xfe) &amp;&amp; (lpFilter-&gt;event.activeSense)) <br>                return 1; <br> <br>            /* System real time messages. <br>             */ <br>            if((bStatusRaw &gt;= 0xf8) &amp;&amp; lpFilter-&gt;event.sysRealTime) <br>                return 1; <br>            break; <br> <br>        default: <br>            break; <br>    } <br> <br>    return 0; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CALLBACK.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2510"></a>CALLBACK.C</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br> *  <br> **************************************************************************/ <br> <br>/* callback.c - Contains the low-level MIDI input callback function for <br> *      MIDIMon.  This module also contains the LibMain() and WEP()  <br> *      DLL routines, and other functions accessed by the callback. <br> * <br> *      Because this module contains a low-level callback function, <br> *      this entire module must reside in a FIXED code segment in a DLL. <br> *      The data segment must be FIXED as well, since it accessed by <br> *      the callback. <br> */ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include "midimon.h" <br>#include "circbuf.h" <br>#include "instdata.h" <br>#include "callback.h" <br> <br>/* midiInputHandler - Low-level callback function to handle MIDI input. <br> *      Installed by midiInOpen().  The input handler takes incoming <br> *      MIDI events and places them in the circular input buffer.  It then <br> *      notifies the application by posting a MM_MIDIINPUT message. <br> * <br> *      This function is accessed at interrupt time, so it should be as  <br> *      fast and efficient as possible.  You can't make any <br> *      Windows calls here, except PostMessage().  The only Multimedia <br> *      Windows call you can make are timeGetSystemTime(), midiOutShortMsg(). <br> *       <br> * <br> * Param:   hMidiIn - Handle for the associated input device. <br> *          wMsg - One of the MIM_***** messages. <br> *          dwInstance - Points to CALLBACKINSTANCEDATA structure. <br> *          dwParam1 - MIDI data. <br> *          dwParam2 - Timestamp (in milliseconds) <br> * <br> * Return:  void <br> */      <br>void FAR PASCAL midiInputHandler( <br>HMIDIIN hMidiIn,  <br>WORD wMsg,  <br>DWORD dwInstance,  <br>DWORD dwParam1,  <br>DWORD dwParam2) <br>{ <br>    EVENT event; <br>     <br>    switch(wMsg) <br>    { <br>        case MIM_OPEN: <br>            break; <br> <br>        /* The only error possible is invalid MIDI data, so just pass <br>         * the invalid data on so we'll see it. <br>         */ <br>        case MIM_ERROR: <br>        case MIM_DATA: <br>            event.fdwEvent = (wMsg == MIM_ERROR) ? EVNT_F_ERROR : 0; <br>            event.dwDevice = ((LPCALLBACKINSTANCEDATA)dwInstance)-&gt;dwDevice; <br>            event.data = dwParam1; <br>            event.timestamp = dwParam2; <br>             <br>            /* Send the MIDI event to the MIDI Mapper, put it in the <br>             * circular input buffer, and notify the application that <br>             * data was received. <br>             */ <br>            if(((LPCALLBACKINSTANCEDATA)dwInstance)-&gt;hMapper) <br>                midiOutShortMsg(  <br>                            ((LPCALLBACKINSTANCEDATA)dwInstance)-&gt;hMapper,  <br>                              dwParam1); <br> <br>            PutEvent(((LPCALLBACKINSTANCEDATA)dwInstance)-&gt;lpBuf, <br>                       (LPEVENT) &amp;event);  <br> <br>            PostMessage(((LPCALLBACKINSTANCEDATA)dwInstance)-&gt;hWnd, <br>                          MM_MIDIINPUT, 0, 0L); <br> <br>            break; <br> <br>        default: <br>            break; <br>    } <br>} <br> <br>/* PutEvent - Puts an EVENT in a CIRCULARBUFFER.  If the buffer is full,  <br> *      it sets the wError element of the CIRCULARBUFFER structure  <br> *      to be non-zero. <br> * <br> * Params:  lpBuf - Points to the CIRCULARBUFFER. <br> *          lpEvent - Points to the EVENT. <br> * <br> * Return:  void <br>*/ <br>void FAR PASCAL PutEvent(LPCIRCULARBUFFER lpBuf, LPEVENT lpEvent) <br>{ <br>    /* If the buffer is full, set an error and return.  <br>     */ <br>    if(lpBuf-&gt;dwCount &gt;= lpBuf-&gt;dwSize){ <br>        lpBuf-&gt;wError = 1; <br>        return; <br>    } <br>     <br>    /* Put the event in the buffer, bump the head pointer and the byte count. <br>     */ <br>    *lpBuf-&gt;lpHead = *lpEvent; <br>     <br>    ++lpBuf-&gt;lpHead; <br>    ++lpBuf-&gt;dwCount; <br> <br>    /* Wrap the head pointer, if necessary. <br>     */ <br>    if(lpBuf-&gt;lpHead &gt;= lpBuf-&gt;lpEnd) <br>        lpBuf-&gt;lpHead = lpBuf-&gt;lpStart; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CIRCBUF.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2512"></a>CIRCBUF.C</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br> *  <br> **************************************************************************/ <br> <br>/* <br> * circbuf.c - Routines to manage the circular MIDI input buffer. <br> *      This buffer is filled by the low-level callback function and <br> *      emptied by the application.  Since this buffer is accessed <br> *      by a low-level callback, memory for it must be allocated <br> *      exactly as shown in AllocCircularBuffer(). <br> */ <br> <br>#include &lt;windows.h&gt; <br>#include "midimon.h" <br>#include "circbuf.h" <br> <br>/* <br> * AllocCircularBuffer -    Allocates memory for a CIRCULARBUFFER structure  <br> * and a buffer of the specified size.  Each memory block is allocated  <br> * with GlobalAlloc() using GMEM_SHARE and GMEM_MOVEABLE flags, locked  <br> * with GlobalLock(), and page-locked with GlobalPageLock(). <br> * <br> * Params:  dwSize - The size of the buffer, in events. <br> * <br> * Return:  A pointer to a CIRCULARBUFFER structure identifying the  <br> *      allocated display buffer.  NULL if the buffer could not be allocated. <br> */ <br>LPCIRCULARBUFFER AllocCircularBuffer(DWORD dwSize) <br>{ <br>    HANDLE hMem; <br>    LPCIRCULARBUFFER lpBuf; <br>    LPEVENT lpMem; <br>     <br>    /* Allocate and lock a CIRCULARBUFFER structure. <br>     */ <br>    hMem = GlobalAlloc(GMEM_SHARE | GMEM_MOVEABLE, <br>                       (DWORD)sizeof(CIRCULARBUFFER)); <br>    if(hMem == NULL) <br>        return NULL; <br> <br>    lpBuf = (LPCIRCULARBUFFER)GlobalLock(hMem); <br>    if(lpBuf == NULL) <br>    { <br>        GlobalFree(hMem); <br>        return NULL; <br>    } <br>     <br>    /* Page lock the memory.  Global memory blocks accessed by <br>     * low-level callback functions must be page locked. <br>     */ <br>#ifndef _WIN32 <br>    GlobalSmartPageLock((HGLOBAL)HIWORD(lpBuf)); <br>#endif <br> <br>    /* Save the memory handle. <br>     */ <br>    lpBuf-&gt;hSelf = hMem; <br>     <br>    /* Allocate and lock memory for the actual buffer. <br>     */ <br>    hMem = GlobalAlloc(GMEM_SHARE | GMEM_MOVEABLE, dwSize * sizeof(EVENT)); <br>    if(hMem == NULL) <br>    { <br>#ifndef _WIN32 <br>        GlobalSmartPageUnlock((HGLOBAL)HIWORD(lpBuf)); <br>#endif <br>        GlobalUnlock(lpBuf-&gt;hSelf); <br>        GlobalFree(lpBuf-&gt;hSelf); <br>        return NULL; <br>    } <br>     <br>    lpMem = (LPEVENT)GlobalLock(hMem); <br>    if(lpMem == NULL) <br>    { <br>        GlobalFree(hMem); <br>#ifndef _WIN32 <br>        GlobalSmartPageUnlock((HGLOBAL)HIWORD(lpBuf)); <br>#endif <br>        GlobalUnlock(lpBuf-&gt;hSelf); <br>        GlobalFree(lpBuf-&gt;hSelf); <br>        return NULL; <br>    } <br>     <br>    /* Page lock the memory.  Global memory blocks accessed by <br>     * low-level callback functions must be page locked. <br>     */ <br>#ifndef _WIN32 <br>    GlobalSmartPageLock((HGLOBAL)HIWORD(lpMem)); <br>#endif <br>     <br>    /* Set up the CIRCULARBUFFER structure. <br>     */ <br>    lpBuf-&gt;hBuffer = hMem; <br>    lpBuf-&gt;wError = 0; <br>    lpBuf-&gt;dwSize = dwSize; <br>    lpBuf-&gt;dwCount = 0L; <br>    lpBuf-&gt;lpStart = lpMem; <br>    lpBuf-&gt;lpEnd = lpMem + dwSize; <br>    lpBuf-&gt;lpTail = lpMem; <br>    lpBuf-&gt;lpHead = lpMem; <br>         <br>    return lpBuf; <br>} <br> <br>/* FreeCircularBuffer - Frees the memory for the given CIRCULARBUFFER  <br> * structure and the memory for the buffer it references. <br> * <br> * Params:  lpBuf - Points to the CIRCULARBUFFER to be freed. <br> * <br> * Return:  void <br> */ <br>void FreeCircularBuffer(LPCIRCULARBUFFER lpBuf) <br>{ <br>    HANDLE hMem; <br>     <br>    /* Free the buffer itself. <br>     */ <br>#ifndef _WIN32 <br>    GlobalSmartPageUnlock((HGLOBAL)HIWORD(lpBuf-&gt;lpStart)); <br>#endif <br>    GlobalUnlock(lpBuf-&gt;hBuffer); <br>    GlobalFree(lpBuf-&gt;hBuffer); <br>     <br>    /* Free the CIRCULARBUFFER structure. <br>     */ <br>    hMem = lpBuf-&gt;hSelf; <br>#ifndef _WIN32 <br>    GlobalSmartPageUnlock((HGLOBAL)HIWORD(lpBuf)); <br>#endif <br>    GlobalUnlock(hMem); <br>    GlobalFree(hMem); <br>} <br> <br>/* GetEvent - Gets a MIDI event from the circular input buffer.  Events <br> *  are removed from the buffer.  The corresponding PutEvent() function <br> *  is called by the low-level callback function, so it must reside in <br> *  the callback DLL.  PutEvent() is defined in the CALLBACK.C module. <br> * <br> * Params:  lpBuf - Points to the circular buffer. <br> *          lpEvent - Points to an EVENT structure that is filled with the <br> *              retrieved event. <br> * <br> * Return:  Returns non-zero if successful, zero if there are no  <br> *   events to get. <br> */ <br>WORD FAR PASCAL GetEvent(LPCIRCULARBUFFER lpBuf, LPEVENT lpEvent) <br>{ <br>    /* If no event available, return. <br>     */ <br>    if(lpBuf-&gt;dwCount &lt;= 0) <br>        return 0; <br>     <br>    /* Get the event. <br>     */ <br>    *lpEvent = *lpBuf-&gt;lpTail; <br>     <br>    /* Decrement the byte count, bump the tail pointer. <br>     */ <br>    --lpBuf-&gt;dwCount; <br>    ++lpBuf-&gt;lpTail; <br>     <br>    /* Wrap the tail pointer, if necessary. <br>     */ <br>    if(lpBuf-&gt;lpTail &gt;= lpBuf-&gt;lpEnd) <br>        lpBuf-&gt;lpTail = lpBuf-&gt;lpStart; <br> <br>    return 1; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

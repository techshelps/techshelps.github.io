<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INSTDATA.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2518"></a>INSTDATA.C</h2>
<pre><code>/************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br> *  <br> **************************************************************************/ <br> <br>/* <br> * instdata.c - Functions to allocate and free the instance <br> *      data structure passed to the low-level callback function. <br> */ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include "midimon.h" <br>#include "circbuf.h" <br>#include "instdata.h" <br> <br>/* AllocCallbackInstanceData - Allocates a CALLBACKINSTANCEDATA <br> *      structure.  This structure is used to pass information to the <br> *      low-level callback function, each time it receives a message. <br> * <br> *      Because this structure is accessed by the low-level callback <br> *      function, it must be allocated using GlobalAlloc() with the  <br> *      GMEM_SHARE and GMEM_MOVEABLE flags and page-locked with <br> *      GlobalPageLock(). <br> * <br> * Params:  void <br> * <br> * Return:  A pointer to the allocated CALLBACKINSTANCE data structure. <br> */ <br>LPCALLBACKINSTANCEDATA FAR PASCAL AllocCallbackInstanceData(void) <br>{ <br>    HANDLE hMem; <br>    LPCALLBACKINSTANCEDATA lpBuf; <br>     <br>    /* Allocate and lock global memory. <br>     */ <br>    hMem = GlobalAlloc(GMEM_SHARE | GMEM_MOVEABLE, <br>                       (DWORD)sizeof(CALLBACKINSTANCEDATA)); <br>    if(hMem == NULL) <br>        return NULL; <br>     <br>    lpBuf = (LPCALLBACKINSTANCEDATA)GlobalLock(hMem); <br>    if(lpBuf == NULL){ <br>        GlobalFree(hMem); <br>        return NULL; <br>    } <br>     <br>    /* Page lock the memory. <br>     */ <br>    //GlobalPageLock((HGLOBAL)HIWORD(lpBuf)); <br> <br>    /* Save the handle. <br>     */ <br>    lpBuf-&gt;hSelf = hMem; <br> <br>    return lpBuf; <br>} <br> <br>/* FreeCallbackInstanceData - Frees the given CALLBACKINSTANCEDATA structure. <br> * <br> * Params:  lpBuf - Points to the CALLBACKINSTANCEDATA structure to be freed. <br> * <br> * Return:  void <br> */ <br>void FAR PASCAL FreeCallbackInstanceData(LPCALLBACKINSTANCEDATA lpBuf) <br>{ <br>    HANDLE hMem; <br> <br>    /* Save the handle until we're through here. <br>     */ <br>    hMem = lpBuf-&gt;hSelf; <br> <br>    /* Free the structure. <br>     */ <br>    //GlobalPageUnlock((HGLOBAL)HIWORD(lpBuf)); <br>    GlobalUnlock(hMem); <br>    GlobalFree(hMem); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

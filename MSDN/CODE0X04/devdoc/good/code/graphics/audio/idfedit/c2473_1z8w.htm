<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLDIDF.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2480"></a>OLDIDF.H</h2>
<pre><code>//************************************************************************ <br>//** <br>//**  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//**  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED <br>//**  TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR <br>//**  A PARTICULAR PURPOSE. <br>//** <br>//**  Copyright 1993 - 1998 Microsoft Corporation. All Rights Reserved. <br>//** <br>//**  IDF.h <br>//** <br>//**  DESCRIPTION: <br>//**     This file contains the format of the .IDF files. <br>//** <br>//**  HISTORY: <br>//**     04/29/93       created. <br>//**     07/04/93       added UNICODE for displayable strings. <br>//**     09/04/93       added keymaps. <br>//**     09/05/93       added ID's for channel types. <br>//** <br>//************************************************************************ <br> <br>#if 0 <br> <br>/* <br>@doc  EXTERNAL SDK <br> <br>@types   IDFHEADER | <br>   This is the format of the "hdr " chunk in a Microsoft IDF file. <br>   This will be the first subchunk of a "MMAP" list chunk.  This will  <br>   provide information on the IDF itself; what version, who created it, <br>   and a unique ASCII ID for the instrument. <br> <br>@field   DWORD | cbStruct | <br>   This is the inclusive size of the header structure. <br> <br>@field   DWORD | dwVersion | <br>   This is the version of the IDF file. <br>   under. <br> <br>@field   DWORD | dwCreator | <br>   This is the creator ID for the IDF. <br> <br>@field   DWORD | cbInstID | <br>   This is the size of the unique instrument identifier including the NULL. <br> <br>@field   BYTE | abInstID[] | <br>   This is the actual ASCII bytes of the unique instrument id. This _IS_  <br>   NULL terminated.  There is no UNICODE version of this since this will <br>   only be used internally and not displayed to the user. <br> <br>@othertype  IDFHEADER * | PIDFHEADER | <br>   A memory model dependant pointer to the structure. <br> <br>@othertype  IDFHEADER FAR* | LPIDFHEADER | <br>   A far pointer to the structure. <br>*/ <br> <br>typedef struct tag_IDFHEADER <br>{ <br>   DWORD cbStruct; <br> <br>   DWORD dwVersion; <br>   DWORD dwCreator; <br> <br>   DWORD cbInstID; <br>   BYTE  abInstID[1]; <br>} IDFHEADER, *PIDFHEADER, FAR *LPIDFHEADER; <br> <br> <br>/* <br>@doc  EXTERNAL SDK <br> <br>@types   IDFINSTINFO | <br>   This is the format of the "inst" chunk in a Microsoft IDF file. <br>   This chunk will contain information on the instrument, e.g. who <br>   manufactured it, the name of the instrument, it's manufacturer and <br>   product id's and a revision number. <br> <br>@field   DWORD | cbStruct | <br>   This is the inclusive size of the instrument information structure. <br> <br>@field   DWORD | dwManufactID | <br>   Manufacturer's ID. <br> <br>@field   DWORD | dwProductID | <br>   Product's ID. <br> <br>@field   DWORD | dwRevision | <br>   Revision of the product. <br> <br>@field   DWORD | cbManufactASCII | <br>   Length of the ASCII version of the manufacturuers name. <br> <br>@field   DWORD | cbManufactUNICODE | <br>   Length of the UNICODE version of the manufacturuers name. <br> <br>@field   DWORD | cbProductASCII | <br>   Length of the ASCII version of the product name. <br> <br>@field   DWORD | cbProductUNICODE | <br>   Length of the UNICODE version of the product name. <br> <br>@field   BYTE | abData[] | <br>   Contains the ASCII and UNICODE strings for the manufacturer and product <br>   names.  NOTE that all strings are separated by a NULL and the NULL IS <br>   counted in the string lengths. <br> <br>@othertype  IDFINSTINFO * | PIDFINSTINFO | <br>   A memory model dependant pointer to the structure. <br> <br>@othertype  IDFINSTINFO FAR * | LPIDFINSTINFO | <br>   A far pointer to the structure. <br> <br>@comm The idea is that the cbManufactXXXXX and cbProductXXXXX will be the <br>      offsets into the bData array of bytes and it will contain a complete <br>      string that you can strcpy out.  That is why the NULL is included in <br>      the byte count and in the actual data. <br>*/ <br> <br>typedef struct tag_IDFINSTINFO <br>{ <br>   DWORD cbStruct; <br> <br>   DWORD dwManufactID; <br>   DWORD dwProductID; <br>   DWORD dwRevision; <br> <br>   DWORD cbManufactASCII; <br>   DWORD cbManufactUNICODE; <br>   DWORD cbProductASCII; <br>   DWORD cbProductUNICODE; <br> <br>   BYTE  abData[1]; <br>} IDFINSTINFO, FAR *LPIDFINSTINFO; <br> <br>/* <br>@doc  EXTERNAL SDK <br> <br>@types   IDFINSTCAPS | <br>   This is the format of the "caps" chunk in a Microsoft IDF file. <br>   This chunk will contain information on the MIDI capabilities of <br>   the device. e.g. basic channel of the instrument, number of channels <br>   that the instrument has available. the polyphony of the instrument,  <br>   whether or not it supports General MIDI, etc.... <br> <br>@field   DWORD | cbStruct | <br>   This is the size of the capabilities structure. <br> <br>@field   DWORD | fdwFlags | <br>   Flags specifiying additional capabilities of an instrument. <br> <br>@flag IDFINSTCAPS_F_GENERAL_MIDI | <br>   Instrument supports General MIDI. <br> <br>@flag IDFINSTCAPS_F_SYSTEMEXCLUSIVE | <br>   Instrument supports system exclusive messages <br> <br>@field   DWORD | dwBasicChannel | <br>   The basic channel for the instrument. <br> <br>@field   DWORD | cNumChannels | <br>   Number of channels that the instrument supports to. <br> <br>@field   DWORD | cInstrumentPolyphony | <br>   The total polyphony for the instrument. <br> <br>@field   DWORD | cChannelPolyphony | <br>   The polyphony per channel. <br> <br>@othertype  IDFINSTCAPS * | PIDFINSTCAPS | <br>   A memory model dependant pointer to the structure. <br> <br>@othertype  IDFINSTCAPS FAR * | LPIDFINSTCAPS | <br>   A far pointer to the structure. <br>*/ <br> <br>typedef struct tag_IDFINSTCAPS <br>{ <br>   DWORD cbStruct; <br>   DWORD fdwFlags; <br>   DWORD dwBasicChannel; <br>   DWORD cNumChannels; <br>   DWORD cInstrumentPolyphony; <br>   DWORD cChannelPolyphony; <br>} IDFINSTCAPS, *PIDFINSTCAPS, FAR *LPIDFINSTCAPS; <br> <br>#define  IDFINSTCAPS_F_GENERAL_MIDI       0x00000001 <br>#define  IDFINSTCAPS_F_SYSTEMEXCLUSIVE    0x00000002 <br> <br>#endif <br> <br>/* <br>@doc  EXTERNAL SDK <br> <br>@types   IDFCHNLHDR | <br>   This is the format of the "chnl" chunk in a Microsoft IDF file. <br>   This contains a description on what "type" a channel is, i.e.  <br>   is it a General MIDI channel, a drum channel, etc... Directly  <br>   following this header is the actual data on each channel. <br> <br>@field   DWORD | cbStruct | <br>   This is the size of the channel header structure. <br> <br>@field   DWORD | fdwFlags | <br>   Flags describing the channel type information. <br> <br>@flag IDFCHNLHDR_F_GENERAL_MIDI | <br>   If this flag is set then any channels that are not defined in the  <br>   IDF are General MIDI channel types.  If this flag is _NOT_ set then <br>   any channels that are not defined in the IDF are undefined and should  <br>   NOT be used in mapping. <br> <br>@field   DWORD | cNumChannels | <br>   This is the number of channels that follows the header. <br> <br>@othertype  IDFCHNLHDR * | PIDFCHNLHDR | <br>   A memory model dependant pointer to the structure. <br> <br>@othertype  IDFCHNLHDR FAR * | LPIDFCHNLHDR | <br>   A far pointer to the structure. <br>*/ <br> <br> <br>typedef struct tag_IDFCHNLHDR <br>{ <br>   DWORD cbStruct; <br> <br>   DWORD cNumChannels; <br>   DWORD fdwFlags; <br>} IDFCHNLHDR, *PIDFCHNLHDR, FAR *LPIDFCHNLHDR; <br> <br>#define  IDFCHNLHDR_F_GENERAL_MIDI     0x00000001 <br> <br> <br>/* <br>@doc  EXTERNAL SDK <br> <br>@types    IDFCHNLINFO | <br>   This is the format of the actual channel information for Microsoft <br>   authored IDF files. This is the Microsoft supported format for <br>   channel information. <br> <br>@field   DWORD | dwChannel | <br>   This is the channel number that the structure defines. <br> <br>@field   DWORD | fdwChannel | <br>   Defines the possible types this channel can be. <br> <br>   @flag    IDFCHNLINFO_F_GENERAL_CHANNEL | <br>       Indicates that this channel may be a general channel. <br> <br>   @flag    IDFCHNLINFO_F_DRUM_CHANNEL | <br>       Indicates that this channel may be a drum channel. <br> <br>@field   DWORD | cbGeneralInitData | <br>    Specifies the length of the data which should be sent to initialize <br>    the channel to a general channel. This data will be sent whenever the <br>    channel is allocated as a general channel. If no initialization data <br>    is desired, this field should be set to zero. If more than one channel <br>    type is specified in the &lt;f fdwChannel&gt; field, initialization data <br>    must be specified and this field may not be zero. <br> <br>@field   DWORD | cbDrumInitData | <br>    Specifies the length of the data which should be sent to initialize <br>    the channel to a drum channel. This data will be sent whenever the <br>    channel is allocated as a drum channel. If no initialization data <br>    is desired, this field should be set to zero. If more than one channel <br>    type is specified in the &lt;f fdwChannel&gt; field, initialization data <br>    must be specified and this field may not be zero. <br> <br> <br>@field    BYTE | abData[] | <br>    This field contains the actual initialization data to set the channel <br>    to general or drum. &lt;f abData&gt; contains first the initialization <br>    sequence to set the channel to a general channel, followed by <br>    the sequence to initialize the channel to a drum channel. <br>    &lt;f cbGeneralInitData&gt; and &lt;f cbDrumInitData&gt; should indicate the lengths <br>    of these sequences, byte aligned. However, the actual sequence should <br>    be padded so that it is actually DWORD aligned (i.e. even multiple <br>    of four bytes). &lt;f cbStruct&gt; should reflect the padded length of <br>    the sequences. <br>         <br>@othertype  IDFCHNLINFO * | PIDFCHNLINFO | <br>   A memory model dependant pointer to the structure. <br> <br>@othertype  IDFCHNLINFO FAR * | LPIDFCHNLINFO | <br>   A far pointer to the structure. <br>*/ <br> <br>typedef struct tag_IDFCHNLINFO <br>{ <br>   DWORD cbStruct; <br> <br>   DWORD dwChannel; <br>   DWORD fdwChannel; <br> <br>   DWORD cbGeneralInitData; <br>   DWORD cbDrumInitData; <br> <br>   BYTE  abData[]; <br> <br>} IDFCHNLINFO, *PIDFCHNLINFO, FAR *LPIDFCHNLINFO; <br> <br> <br>// <br>// Currently defined channel types. <br>// <br>#define  IDFCHNLINFO_F_GENERAL_CHANNEL      0x00000001 <br>#define  IDFCHNLINFO_F_DRUM_CHANNEL         0x00000002 <br> <br>#if 0 <br> <br>/* <br>@doc  EXTERNAL SDK <br> <br>@types   IDFPATCHMAPHDR | <br>   This is the format of the "map " chunk in a Microsoft IDF file. <br>   This chunk contains information on the patch map used for the  <br>   instrument. Directly following this header is the actual mapping  <br>   information for each patch. <br> <br>@field   DWORD | cbStruct | <br>   This is the size of the patch map header structure. <br> <br>@field   BYTE | abPatchMap[128] | <br>   This array contains the actual patch map. The incoming patch is <br>   used to index the array; the array contents are the new patch value <br>   and must be in the range 0x00-0x7F. Patch maps will only apply to <br>   channels of type general. If the instrument needs a patch change <br>   on a drum channel, it should be included in the initialization data <br>   in the IDFCHANNELINFO. <br> <br>@othertype  IDFPATCHMAPHDR * | PIDFPATCHMAPHDR | <br>   A memory model dependant pointer to the structure. <br> <br>@othertype  IDFPATCHMAPHDR FAR * | LPIDFPATCHMAPHDR | <br>   A far pointer to the structure. <br>*/ <br> <br>typedef struct tag_IDFPATCHMAPHDR <br>{ <br>   DWORD cbStruct; <br>   BYTE  abPatchMap[128]; <br>            <br>} IDFPATCHMAPHDR, *PIDFPATCHMAPHDR, FAR *LPIDFPATCHMAPHDR; <br> <br>#endif // 0 <br> <br>/* <br>@doc  EXTERNAL SDK <br> <br>@types   IDFKEYHDR | <br>   This is the format of the "key " chunk in a Microsoft IDF file. <br>   This chunk contains information on the all of the key maps used  <br>   for a given instrument. The information that is in this structure <br>   pertains to all of the key maps for the instrument.  It contains <br>   the total number of key maps for the instrument and whether or not <br>   the key maps are General MIDI. <br> <br>@field   DWORD | cbStruct | <br>   This is the size of the key map header structure. <br> <br>@field   DWORD | cNumKeyMaps | <br>   This is the number of key maps that follow the header. <br> <br>@field   DWORD | cbKeyMap | <br>   This is the size of each key map that follows the header.    <br> <br>@othertype  IDFPATCHMAPHDR * | PIDFPATCHMAPHDR | <br>   A memory model dependant pointer to the structure. <br> <br>@othertype  IDFPATCHMAPHDR FAR * | LPIDFPATCHMAPHDR | <br>   A far pointer to the structure. <br>*/ <br> <br>typedef struct tag_IDFKEYHDR <br>{ <br>   DWORD cbStruct; <br>   DWORD cNumKeyMaps; <br>   DWORD cbKeyMap; <br>} IDFKEYHDR, *PIDFKEYHDR, FAR *LPIDFKEYHDR; <br> <br>/* <br>@doc  EXTERNAL SDK <br> <br>@types   IDFKEY | <br>   This is a keymap that follows the key map header.  <br> <br>@field   DWORD | cbStruct | <br>   This is the size of the key map header structure. <br> <br>@field   DWORD | fdwKeyMapType | <br>   This field specifies the channel type this key map is valid for. <br> <br>@flag IDFKEY_F_GENERAL_CHANNEL      0x00000001 <br>@flag IDFKEY_F_DRUM_CHANNEL         0x00000002 <br> <br>@field   BYTE | abKeyMap[128] | <br>    This field contains the actual key map. The incoming key number from <br>    a note on or note off message is used to index this array; the array <br>    contents are the new key value. If the high bit it set in the new <br>    key value, then the note on or note off will be ignore; otherwise, <br>    it will be transmitted with the new key value. <br>     <br>@othertype  IDFKEY * | PIDFKEY | <br>   A memory model dependant pointer to the structure. <br> <br>@othertype  IDFKEY FAR * | LPIDFKEY | <br>   A far pointer to the structure. <br>*/ <br> <br>typedef struct tag_IDFKEY <br>{ <br>   DWORD cbStruct; <br>   DWORD fdwKeyMap; <br>   BYTE  abKeyMap[128]; <br>} IDFKEY, *PIDFKEY, FAR *LPIDFKEY; <br> <br>#define IDFKEY_F_GENERAL_CHANNEL      0x00000001L <br>#define IDFKEY_F_DRUM_CHANNEL         0x00000002L </code></pre>
<p>&nbsp;</p></body>
</HTML>

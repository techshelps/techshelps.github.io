<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDFEDIT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2478"></a>IDFEDIT.H</h2>
<pre><code>//************************************************************************ <br>//** <br>//**  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//**  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED <br>//**  TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR <br>//**  A PARTICULAR PURPOSE. <br>//** <br>//**  Copyright 1993 - 1998 Microsoft Corporation. All Rights Reserved. <br>//** <br>//**  IDFEDIT.H <br>//** <br>//**  DESCRIPTION: <br>//** <br>//** <br>//**  HISTORY: <br>//**     04/22/93       created. <br>//** <br>//************************************************************************ <br> <br>#if !defined IDFEDIT_H <br>#define IDFEDIT_H <br> <br>#include &lt;idf.h&gt; <br>#include "oldidf.h" <br>#include "res.h" <br>#include "globals.h" <br> <br>// main.c <br>// <br>int  WINAPI ErrorBox( <br>   UINT    wStringID,      // stringtable ID <br>   UINT    wType,          // type of message box (MB_xxx flags) <br>   ...); <br> <br>#define EB_FATAL (MB_OK | MB_ICONEXCLAMATION) <br>#define EB_ERROR (MB_OK | MB_ICONHAND) <br>#define EB_QUERY (MB_YESNO | MB_ICONQUESTION) <br>#define EB_INFO  (MB_OK | MB_ICONINFORMATION) <br>#define EB_YNC   (MB_YESNOCANCEL | MB_ICONQUESTION) <br> <br>#if !defined SZCODE <br>  #define SZCODE STATIC CONST TCHAR <br>#endif <br> <br>// debug stuff <br>// <br>#define SQUAWKNUMZ(num) #num <br>#define SQUAWKNUM(num) SQUAWKNUMZ(num) <br>#define SQUAWK __FILE__ "(" SQUAWKNUM(__LINE__) ") : --" <br>#if defined _DEBUG || defined DEBUG || defined DEBUG_RETAIL <br>  #define STATICFN <br>  #define DEBUGLINE __FILE__ "(" SQUAWKNUM(__LINE__) ") " <br>  #ifdef _X86_ <br>    #define INLINE_BREAK _asm {int 3} <br>  #else <br>    #define INLINE_BREAK DebugBreak() <br>  #endif <br>  #define assert(exp) {\ <br>      if (!(exp)) {\ <br>          OutputDebugString(DEBUGLINE "assert failed: " #exp "\r\n"); \ <br>      INLINE_BREAK; \ <br>      }\ <br>  } <br>#else <br>  #define STATICFN static <br>  #define assert(a) ((void)0) <br>  #define INLINE_BREAK <br>#endif <br> <br>// idf.c <br>// <br>BOOL WINAPI PromptForIDFName ( <br>    HWND    hwnd, <br>    LPTSTR  lpszPath, <br>    LPTSTR  lpszTitle, <br>    BOOL    fSave); <br> <br>BOOL LoadIDFFromFile ( <br>   LPIDFHEAD pIDF, <br>   LPTSTR    pszFile); <br> <br>BOOL SaveIDFToFile ( <br>   LPIDFHEAD pIDF, <br>   LPTSTR    pszFileIn); <br> <br>VOID FreeIDFFile ( <br>   LPIDFHEAD pIDF); <br> <br>LPINSTRUMENT WINAPI NewIDFInstrum ( <br>   LPIDFHEAD  pIDF, <br>   LPRIFFLIST pList, <br>   LPSTR      pszInstrument); <br> <br>VOID DeleteInstrum ( <br>   LPIDFHEAD pIDF); <br> <br>VOID CopyInstrumToClip ( <br>   LPIDFHEAD pIDF); <br> <br>VOID PasteInstrum ( <br>   LPIDFHEAD pIDF); <br> <br>LPRIFF FindListChunk ( <br>   LPRIFFLIST pList, <br>   DWORD      fccToFind); <br> <br>void CopyInstrumData ( <br>   LPINSTRUMENT pInstrum,  <br>   LPRIFFLIST   pList); <br> <br>LPVOID CopyForEditing ( <br>   LPVOID pData,  <br>   UINT cbData); <br> <br>// head.c <br>// <br>LONG CALLBACK HeadWndProc ( <br>   HWND   hWnd, <br>   UINT   wMsgID, <br>   WPARAM wParam, <br>   LPARAM lParam); <br> <br>#define HM_REFRESH_TREE   (WM_USER+1)    <br>#define Head_RefreshTree(hWnd) SendMessage (hWnd, HM_REFRESH_TREE, 0, 0); <br> <br> <br>// ======================== Global Variables ======================= <br> <br>// if NO_VARS is defined, dont refer to global variables <br>// at all.  this is typically used when creating binary <br>// data using structures defined in this file. <br>// <br>#ifndef NO_VARS <br>// <br>// if DECLARE_VARS is defined, create global variables <br>// otherwise just refer to them as externs.  this works <br>// so long as only one module defines DECLARE_VARS (usually winmain) <br>// <br>#ifdef DECLARE_VARS <br> <br> #define PUBLIC <br> PUBLIC CONST TCHAR cszHdrClass[]  = "IDFHdr"; <br> PUBLIC CONST TCHAR cszInstrumClass[]  = "IDFInstrum"; <br> <br>#else <br> <br> #define PUBLIC extern <br> PUBLIC CONST TCHAR cszHdrClass[]; <br> PUBLIC CONST TCHAR cszInstrumClass[]; <br> <br>#endif <br> <br>PUBLIC HINSTANCE hInst;       // WinMain, set from hInstance <br>PUBLIC HWND      hWndMain;    // WinMain, set from CreateWindow <br>PUBLIC TCHAR     szApp[32];   // WinMain, set from IDS_APPNAME string <br>PUBLIC DWORD     fdwExStyle;  // WinMain <br>#ifdef USE_MDI <br> PUBLIC HWND      hWndClient;  // handle to MDI Client <br>#endif <br> <br>#endif // end of NO_VARS ifdef <br> <br>#endif // IDFEDIT_H </code></pre>
<p>&nbsp;</p></body>
</HTML>

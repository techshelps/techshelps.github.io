<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TRIDEE.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2483"></a>TRIDEE.C</h2>
<pre><code>//************************************************************************ <br>//** <br>//**  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//**  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED <br>//**  TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR <br>//**  A PARTICULAR PURPOSE. <br>//** <br>//**  Copyright 1993 - 1998 Microsoft Corporation. All Rights Reserved. <br>//** <br>//**  tridee.c <br>//** <br>//**  DESCRIPTION: <br>//**    routines to draw 3d borders <br>//** <br>//************************************************************************ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br> <br>#include "res.h" <br>#include "tridee.h" <br> <br>// declare variables global to this module <br>// <br>static COLORREF crFace; <br>static COLORREF crHilite; <br>static COLORREF crShadow; <br> <br>static HBRUSH hBrFace = NULL; <br>static HBRUSH hBrShadow = NULL; <br>static HBRUSH hBrHilite = NULL; <br>static BOOL   bIs3D = FALSE; <br>static int    cUsers = 0; <br> <br>/*+ TrideeCreate <br> * <br> * Register a new client for the Tridee stuff. <br> * <br> * on the first client we create the brushes that we will need. <br> * on others we just release the useage count. <br> * <br> * this routine is intended to be called in the WM_CREATE case of the <br> * client. <br> * <br> *-=================================================================*/ <br> <br>HBRUSH FAR PASCAL TrideeCreate(HWND hWnd) <br>{ <br>   hWnd; <br> <br>   if(!cUsers++) <br>   { <br>      // create the button face brush, if we fail this, <br>      // set the use count back to 0 and return failure to <br>      // the caller. <br>      // <br>      crFace = GetSysColor(COLOR_BTNFACE); <br>      crShadow = GetSysColor(COLOR_BTNSHADOW); <br>      crHilite = GetSysColor(COLOR_BTNHIGHLIGHT); <br> <br>      hBrFace = CreateSolidBrush(crFace); <br>      if(!hBrFace) <br>      { <br>         cUsers = 0; <br>         return NULL; <br>      } <br> <br>      // if the button face color is white, assume we are <br>      // on a EGA or Mono system, and dont even try to create <br>      // hilite and shadow brushes. <br>      bIs3D = (crFace != RGB(255,255,255)); <br>      if (!bIs3D) <br>         hBrShadow = hBrHilite = NULL; <br>      else <br>      { <br>         // create brushes for the hilite and shadow <br>         // <br>         hBrShadow = CreateSolidBrush(crShadow); <br>         hBrHilite = CreateSolidBrush(crHilite); <br>      } <br>   } <br> <br>   return hBrFace; <br>} <br> <br>/*+ TrideeDestroy <br> * <br> * DeRegister a client for the tridee stuff. <br> * <br> * when the count of clients gets to 0, we destroy the brushes. <br> * <br> * this routine is intended to be used in the WM_DESTROY case of <br> * the client. <br> * <br> *-=================================================================*/ <br> <br>BOOL FAR PASCAL TrideeDestroy(HWND hWnd) <br>{ <br>   hWnd; <br> <br>   if(!--cUsers) <br>   { <br>      // free the GDI objects <br>      if(hBrFace) <br>         DeleteObject(hBrFace), hBrFace = NULL; <br>      if(hBrHilite) <br>         DeleteObject(hBrHilite), hBrHilite = NULL; <br>      if(hBrShadow) <br>         DeleteObject(hBrShadow), hBrShadow = NULL; <br>   } <br>   return TRUE; <br>} <br> <br>/*+ TrideeWellShadow <br> * <br> * draw a well border just inside the supplied rectangle. <br> * (a well has a hilite on lower and right edges and shadow <br> * on upper and left) <br> * <br> * this routine does not fill the recangle, it merely paints <br> * the 'frame' <br> * <br> *-=================================================================*/ <br> <br>VOID FAR PASCAL TrideeWellShadow(HDC hDC, LPRECT lprc) <br>{ <br>   // draw the left and upper shadow <br>   // <br>   SelectObject(hDC, hBrShadow); <br>   PatBlt(hDC, lprc-&gt;left, lprc-&gt;top, 2,  <br>                     lprc-&gt;bottom - lprc-&gt;top -2, PATCOPY); <br>   PatBlt(hDC, lprc-&gt;left, lprc-&gt;top,  <br>                     lprc-&gt;right - lprc-&gt;left, 2, PATCOPY); <br> <br>   // now draw the bottom and right hilite <br>   // <br>   SelectObject(hDC, hBrHilite); <br>   PatBlt(hDC, lprc-&gt;right-1, lprc-&gt;top+1, <br>                1, lprc-&gt;bottom - lprc-&gt;top -2, PATCOPY); <br>   PatBlt(hDC, lprc-&gt;left+1, lprc-&gt;bottom-1, <br>                lprc-&gt;right -lprc-&gt;left-1, 1, PATCOPY); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DRAWSTR.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2474"></a>DRAWSTR.H</h2>
<pre><code><br>/***************************************************************************** <br>* <br>*  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>*  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED <br>*  TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR <br>*  A PARTICULAR PURPOSE. <br>* <br>*  Copyright 1993 - 1998 Microsoft Corporation. All Rights Reserved. <br>* <br>*****************************************************************************/ <br> <br>/*+ <br> *  drawstr.h <br> * <br> *  structures &amp; define &amp; prototypes for the structure dumper <br> * <br> * <br> *-==================================================================*/ <br> <br>#if !defined DRAWSTR_H <br>#define DRAWSTR_H <br> <br>typedef struct _dsfield { <br>   LPTSTR psz; <br>   UINT   off; <br>   UINT   siz; <br>   UINT   fmt; <br>   UINT   aux; <br>   UINT   array; <br>   } DSFIELD, * PDSFIELD; <br> <br>typedef struct _dsfieldtbl { <br>   PDSFIELD pFields; <br>   LPCTSTR  pszName; <br>   UINT     cbSize; <br>   } DSFIELDTBL, * PDSFIELDTBL; <br> <br>typedef struct _dsbuff { <br>   LPTSTR  ptr; <br>   UINT    cch; <br>   } DSBUFF, *PDSBUFF; <br> <br>typedef struct _dslineinfo { <br>   UINT   nMaxLine; <br>   UINT   nCurLine; <br>   UINT   nMaxDepth; <br>   UINT   nCurDepth; <br>   int    cyLine; <br>   struct _dsline { <br>      LPVOID lpv; <br>      UINT   uStruct; <br>      UINT   uField; <br>      WORD   uDepth; <br>      WORD   uMember; <br>      } aLine[10]; <br>   } DSLINEINFO, * PDSLINEINFO; <br> <br>typedef struct _viewinit { <br>   PDSFIELDTBL pTable; <br>   UINT        uStruct; <br>   UINT        uRepeat; <br>   LPVOID      lpData; <br>   } VIEWINIT, *PVIEWINIT; <br> <br>// global preferences. <br>// <br>typedef struct _dspref { <br>    BOOL bShowAddresses; <br>    } DSPREF; <br>extern DSPREF dspref; <br> <br>#if !defined FIELDOFF <br>#define FIELDSIZ(st,field)  (unsigned int) (sizeof(((st *)0)-&gt;field)) <br>#define FIELDREFSIZ(st,field)  (unsigned int) (sizeof(*(((st *)0)-&gt;field))) <br>#define FIELDOFF(st,field)  (unsigned int) (&amp;(((st *)0)-&gt;field)) <br>#define FLD(st,field)  FIELDOFF(st,field), FIELDSIZ(st,field) <br>#define PFLD(st,field) FIELDOFF(st,field), FIELDREFSIZ(st,field) <br>#endif <br> <br>#ifndef NUMELMS <br>#define NUMELMS(aa) (sizeof(aa)/sizeof((aa)[0])) <br>#endif <br> <br>#define AS_NONE         0 <br>#define AS_SZ           1 <br>#define AS_ACH          2 <br>#define AS_INT          3 <br>#define AS_UINT         4 <br>#define AS_HEX          5 <br>#define AS_BITFIELD     6 <br>#define AS_HANDLE       7 <br>#define AS_HWND         8 <br>#define AS_MODE         9 <br>#define AS_ERROR        10 <br>#define AS_XMODE        11 <br> <br>#define AS_RECT         16 <br>#define AS_POINT        17 <br>#define AS_POINTS       18 <br>#define AS_SIZE         19 <br>#define AS_FLOAT        20 <br>#define AS_BYTES        21 <br>#define AS_DUMP         22 <br> <br>#define AS_STRUCT      0x0100 <br>#define IS_EDIT        0x0200 <br>#define AS_REF         0x1000 <br>#define AS_ARRAY       0x4000 <br> <br> <br>VOID FAR PASCAL DrawDsLabels ( <br>   HDC          hDC, <br>   PDSFIELDTBL  pTable, <br>   PDSLINEINFO  lpLineInfo, <br>   LPRECT       lpRect, <br>   POINT        ptOffset); <br> <br>VOID FAR PASCAL DrawDsData ( <br>   HDC          hDC, <br>   PDSFIELDTBL  pTable,     // info used to label and format fields in struct <br>   PDSLINEINFO  lpLineInfo, // <br>   LPRECT       lpRect,     // rectangle to clip drawing to <br>   POINT        ptOffset);  // scrolling offset for upper left corner <br> <br>int FAR PASCAL GetDsLabelWidth ( <br>   HDC          hDC, <br>   PDSFIELDTBL  pTable,      // info used to label and format fields in struct <br>   PDSLINEINFO  lpLineInfo); // <br> <br>PDSLINEINFO WINAPI AllocDsLineInfo ( <br>   UINT         nMax); <br> <br>VOID FAR PASCAL BuildDsLineInfo ( <br>   PDSFIELDTBL pTable,      //in: <br>   UINT        uStruct,     //in: <br>   LPVOID      lpData,      //in: <br>   WORD        nMember,     //in: index into lpData <br>   WORD        nLastMember, //in: index into lpData <br>   PDSLINEINFO pLineInfo);  //in,out: <br> <br>BOOL WINAPI ExpandDsLineInfo ( <br>   PDSFIELDTBL pTable,     // info used to label and format fields in struct <br>   UINT        nLine,      // line to expand (if possible) <br>   PDSLINEINFO pLineInfo); <br> <br>BOOL WINAPI ContractDsLineInfo ( <br>   PDSFIELDTBL pTable,     // info used to label and format fields in struct <br>   UINT        nLine,      // line to expand (if possible) <br>   PDSLINEINFO pLineInfo); <br> <br>LRESULT WINAPI ViewWndProc ( <br>   HWND    hWnd,           // handle of spy window <br>   UINT    wMsgID,         // id of current message <br>   WPARAM  wParam,         // word argument, depends on message id <br>   LPARAM  lParam);        // long argument, depends on message id <br> <br>VOID WINAPI DrawDragEdge( <br>   HWND    hWnd,  <br>   LPPOINT lppt,  <br>   LPPOINT lpptLastEdge); <br> <br>#define VM_GETDATA   (WM_USER + 100) <br>#define View_GetData(hWnd) (LPVOID)SendMessage(hWnd, VM_GETDATA, 0, 0) <br>#define VM_SETDATA   (WM_USER + 101) <br>#define View_SetData(hWnd,lpv) (LPVOID)SendMessage(hWnd, VM_SETDATA, 0, (LPARAM)lpv) <br> <br>#define VM_INVALIDATE (WM_USER + 102) <br>#define View_InvalidateLine(hWnd,nLine) SendMessage(hWnd, VM_INVALIDATE, 0, (LPARAM)nLine) <br>#define View_InvalidateLines(hWnd,nLine,nCount) SendMessage(hWnd, VM_INVALIDATE, (WPARAM)nCount, (LPARAM)nLine) <br> <br>#define VM_SETSEL    (WM_USER + 103) <br>#define View_SetSel(hWnd, nLine) SendMessage (hWnd, VM_SETSEL, 0, (LPARAM)nLine); <br> <br>#define VM_EDITNEXT  (WM_USER + 104) <br>#define View_EditNext(hWnd,bPrev) SendMessage (hWnd, VM_EDITNEXT, (WPARAM)bPrev, 0); <br> <br>// notifications <br>// <br>#define VN_CHANGE  (0U-800U) <br> <br>#endif // drawstr_h </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GLOBALS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2475"></a>GLOBALS.H</h2>
<pre><code>//************************************************************************ <br>//** <br>//**  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//**  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED <br>//**  TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR <br>//**  A PARTICULAR PURPOSE. <br>//** <br>//**  Copyright 1993 - 1998 Microsoft Corporation. All Rights Reserved. <br>//** <br>//**  globals.h <br>//** <br>//**  DESCRIPTION: <br>//** <br>//** <br>//**  HISTORY: <br>//**     04/22/93       created. <br>//** <br>//************************************************************************ <br> <br>#ifndef GLOBALS_H <br>#define GLOBALS_H <br> <br>#include "drawstr.h" <br> <br>#ifndef NUMELMS <br> #define NUMELMS(aa) (sizeof(aa)/sizeof((aa)[0])) <br>#endif <br> <br>#define FCC_RIFF MAKEFOURCC('R','I','F','F') <br>#define FCC_LIST MAKEFOURCC('L','I','S','T') <br>#define FCC_IDF  MAKEFOURCC('I','D','F',' ') <br>#define FCC_MMAP MAKEFOURCC('M','M','A','P') <br> <br>#define FCC_hdr  MAKEFOURCC('h','d','r',' ') <br>#define FCC_inst MAKEFOURCC('i','n','s','t') <br>#define FCC_caps MAKEFOURCC('c','a','p','s') <br>#define FCC_chan MAKEFOURCC('c','h','a','n') <br>#define FCC_pmap MAKEFOURCC('p','m','a','p') <br>#define FCC_gkey MAKEFOURCC('g','k','e','y') <br>#define FCC_dkey MAKEFOURCC('d','k','e','y') <br> <br>#define FCC_key  MAKEFOURCC('k','e','y',' ') <br>#define FCC_chnl MAKEFOURCC('c','h','n','l') <br> <br>typedef struct _riff { <br>    DWORD fcc; <br>    DWORD cb; <br>    } RIFF, * LPRIFF; <br> <br>typedef struct _rifflist { <br>    DWORD fccList; <br>    DWORD cbList; <br>    DWORD fccType; <br>    } RIFFLIST, * LPRIFFLIST; <br> <br>#define NEXTRIFF(pRiff) ((LPRIFF)((LPBYTE)((LPRIFF)pRiff+1) + ((LPRIFF)pRiff)-&gt;cb + (((LPRIFF)pRiff)-&gt;cb &amp; 1))) <br> <br>#define MAX_CHANNEL  16 <br>#define MAX_PATCH    128 <br>#define MAX_KEYMAP   128 <br>#define MAX_NAME     128 <br> <br>// iFlags fields <br>// <br>#define CHANNEL_IS_DRUM 1 <br>#define CHANNEL_IS_MUTE 2 <br>typedef struct _channel { <br>    int     iFlags; <br>    DWORD   cbInit; <br>    LPDWORD lpInit; <br>    } CHANNEL, *LPCHANNEL; <br> <br>typedef struct _instrument { <br>    BOOL    bChanged; <br> <br>    // hdr fields <br>    // <br>    DWORD   dwVersion; <br>    DWORD   dwCreator; <br>    CHAR    szInstID[MAX_NAME]; <br> <br>    // inst fields <br>    //   <br>    DWORD   dwManufactID; <br>    DWORD   dwProductID; <br>    DWORD   dwRevision; <br>    TCHAR   szManufact[MAX_NAME]; <br>    TCHAR   szProduct[MAX_NAME]; <br> <br>    // caps fields <br>    // <br>    DWORD   dwFlags; <br>    DWORD   dwBasicChannel; <br>    DWORD   nChannels; <br>    DWORD   nInstrumentPolyphony; <br>    DWORD   nChannelPolyphony; <br> <br>    // chnl fields <br>    // <br>    CHANNEL aChannel[MAX_CHANNEL]; <br> <br>    // pmap fields <br>    // <br>    BYTE    aPatch[MAX_PATCH]; <br> <br>    // key fields <br>    // <br>    BYTE    aGenKeymap[MAX_KEYMAP]; <br>    BYTE    aDrumKeymap[MAX_KEYMAP]; <br> <br>    } INSTRUMENT, *LPINSTRUMENT; <br> <br> <br>typedef struct _idf_header { <br>   TCHAR  szFile[MAX_PATH]; <br>   BOOL   bChanged; <br> <br>   HANDLE hEditHeap; // heap used for edit'ed copies of IDF data <br> <br>   HWND   hWndHead; <br>   HWND   hWndTree; <br> <br>   POINT  ptClient; <br>   SIZE   sClient; <br>   UINT   cxTree; // width of tree in pixels <br> <br>   HWND   hWndInstrument; <br> <br>   BOOL   bReadOnly; <br>   HANDLE hFile; <br>   HANDLE hSection; <br>   LPBYTE pFileBase; <br>   DWORD  cbFile; <br> <br>   TCHAR  szTreeLabel[32]; <br>   TCHAR  szViewLabel[32]; <br> <br>   INSTRUMENT instrum; // currently displayed instrument <br>   VIEWINIT   vi;   // instrument view info <br>   struct _instrum_info * piSelect; // currently selected instrument <br>   LPINSTRUMENT pInstrumSelect; // currently selecte instrument data <br> <br>   UINT   nInstrum; <br>   struct _instrum_info { <br>      HWND         hWnd; <br>      LPINSTRUMENT pInstrum; <br>      LPRIFFLIST   pList; <br>      } ai[128]; <br> <br>   } IDFHEAD, *LPIDFHEAD; <br> <br>struct _globalstate { <br>   TCHAR        szDefFile[MAX_PATH]; <br>   LPIDFHEAD    pIDF; <br>   IDFHEAD      idf; <br>   }; <br> <br>#ifdef DECLARE_VARS <br> struct _globalstate gs = {0}; <br>#else <br> extern struct _globalstate gs; <br>#endif <br> <br>#endif // GLOBALS_H </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MALINES.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2548"></a>MALINES.C</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>//  malines.c <br>// <br>//  Description: <br>// <br>// <br>//  History: <br>//       9/21/93 <br>// <br>//==========================================================================; <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br> <br>#include "mixapp.h" <br> <br>#include "debug.h" <br> <br> <br>TCHAR       gszLineFormatTitle[]        = TEXT("Type\t3!Component\t10!Line ID\t6!Flags\t6!Ctrls\t3!Conns\t3!Name"); <br>TCHAR       gszLineFormatList[]         = TEXT("%-s%c\t%-s\t%.08lXh\t%.08lXh\t%lu\t%lu\t%-s"); <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL MixAppGetComponentName <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      LPMIXERLINE pmxl: <br>// <br>//      LPTSTR szComponent: <br>// <br>//  Return (BOOL): <br>// <br>//  History: <br>//      08/18/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MixAppGetComponentName <br>( <br>    LPMIXERLINE             pmxl, <br>    LPTSTR                  szComponent <br>) <br>{ <br>    // <br>    // <br>    // <br>    if (0 == (MIXERLINE_LINEF_SOURCE &amp; pmxl-&gt;fdwLine)) <br>    { <br>        switch (pmxl-&gt;dwComponentType) <br>        { <br>            case MIXERLINE_COMPONENTTYPE_DST_UNDEFINED: <br>                lstrcpy(szComponent, "Undefined"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_DST_DIGITAL: <br>                lstrcpy(szComponent, "Digital"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_DST_LINE: <br>                lstrcpy(szComponent, "Line Level"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_DST_MONITOR: <br>                lstrcpy(szComponent, "Monitor"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_DST_SPEAKERS: <br>                lstrcpy(szComponent, "Speakers"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_DST_HEADPHONES: <br>                lstrcpy(szComponent, "Headphones"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_DST_TELEPHONE: <br>                lstrcpy(szComponent, "Telephone"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_DST_WAVEIN: <br>                lstrcpy(szComponent, "Wave Input"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_DST_VOICEIN: <br>                lstrcpy(szComponent, "Voice Recognition"); <br>                break; <br> <br>            default: <br>                lstrcpy(szComponent, "NOT VALID"); <br>                break; <br>        } <br>    } <br>    else <br>    { <br>        switch (pmxl-&gt;dwComponentType) <br>        { <br>            case MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED: <br>                lstrcpy(szComponent, "Undefined"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_SRC_DIGITAL: <br>                lstrcpy(szComponent, "Digital"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_SRC_LINE: <br>                lstrcpy(szComponent, "Line Level"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE: <br>                lstrcpy(szComponent, "Microphone"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER: <br>                lstrcpy(szComponent, "Synthesizer"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC: <br>                lstrcpy(szComponent, "Compact Disc"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE: <br>                lstrcpy(szComponent, "Telephone"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER: <br>                lstrcpy(szComponent, "PC Speaker"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT: <br>                lstrcpy(szComponent, "Wave Out"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY: <br>                lstrcpy(szComponent, "Auxiliary"); <br>                break; <br> <br>            case MIXERLINE_COMPONENTTYPE_SRC_ANALOG: <br>                lstrcpy(szComponent, "Analog"); <br>                break; <br> <br>            default: <br>                lstrcpy(szComponent, "NOT VALID"); <br>                break; <br>        } <br>    } <br> <br>    return (TRUE); <br>} // MixAppGetComponentName() <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL MixAppDlgProcLineInfo <br>// <br>//  Description: <br>//      This dialog procedure is used to display driver capabilities. <br>// <br>//  Arguments: <br>//      HWND hwnd: Handle to window. <br>// <br>//      UINT uMsg: Message being sent to the window. <br>// <br>//      WPARAM wParam: Specific argument to message. <br>// <br>//      LPARAM lParam: Specific argument to message. <br>// <br>//  Return (BOOL): <br>//      The return value is specific to the message that was received. For <br>//      the most part, it is FALSE if this dialog procedure does not handle <br>//      a message. <br>// <br>//  History: <br>//       1/ 2/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL CALLBACK MixAppDlgProcLineInfo <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    HWND                hedit; <br>    UINT                u; <br>    MIXERLINE           mxl; <br>    MMRESULT            mmr; <br>    TCHAR               ach[64]; <br> <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            hedit = GetDlgItem(hwnd, IDD_LINEINFO_EDIT_INFO); <br>            SetWindowFont(hedit, GetStockFont(SYSTEM_FIXED_FONT), FALSE); <br> <br>            // <br>            // <br>            // <br>            // <br>            mxl.cbStruct      = sizeof(mxl); <br>            mxl.dwLineID      = lParam; <br> <br>            mmr = mixerGetLineInfo((HMIXEROBJ)ghmx, &amp;mxl, MIXER_GETLINEINFOF_LINEID); <br>            if (MMSYSERR_NOERROR != mmr) <br>            { <br>                AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                          "mixerGetLineInfo(lineid=%.08lXh) failed on hmx=%.04Xh, mmr=%u!", <br>                          lParam, ghmx, mmr); <br>            } <br>            else <br>            { <br>                static TCHAR    szDisplayTitle[]  = TEXT("[Line Info]\r\n"); <br> <br>                // <br>                // <br>                // <br>                MEditPrintF(hedit, NULL); <br>                MEditPrintF(hedit, szDisplayTitle); <br> <br>                MEditPrintF(hedit, "%25s: %.04Xh", (LPTSTR)"Mixer Handle", ghmx); <br> <br>                // <br>                // <br>                // <br>                MEditPrintF(hedit, "%25s: %lu bytes (requested %lu)", (LPTSTR)"Size of Line Info", mxl.cbStruct, (DWORD)sizeof(mxl)); <br>                MEditPrintF(hedit, "%25s: %lu", (LPTSTR)"Destination", mxl.dwDestination); <br>                MEditPrintF(hedit, "%25s: %lu", (LPTSTR)"Source", mxl.dwSource); <br>                MEditPrintF(hedit, "%25s: %.08lXh", (LPTSTR)"Line ID", mxl.dwLineID); <br>                MEditPrintF(hedit, "~%25s: %.08lXh", (LPTSTR)"Line Flags", mxl.fdwLine); <br> <br>                if (MIXERLINE_LINEF_SOURCE &amp; mxl.fdwLine) <br>                    MEditPrintF(hedit, "~, source"); <br>                else <br>                    MEditPrintF(hedit, "~, destination"); <br> <br>                if (MIXERLINE_LINEF_DISCONNECTED &amp; mxl.fdwLine) <br>                    MEditPrintF(hedit, "~, disconnected"); <br> <br>                if (MIXERLINE_LINEF_ACTIVE &amp; mxl.fdwLine) <br>                    MEditPrintF(hedit, "~, active"); <br> <br>                if (~(MIXERLINE_LINEF_SOURCE | MIXERLINE_LINEF_DISCONNECTED | MIXERLINE_LINEF_ACTIVE) &amp; mxl.fdwLine) <br>                    MEditPrintF(hedit, "~, *INVALID FLAGS*"); <br> <br>                MEditPrintF(hedit, ""); <br>                MEditPrintF(hedit, "%25s: %.08lXh", (LPTSTR)"Driver User DWord", mxl.dwUser); <br> <br>                MixAppGetComponentName(&amp;mxl, ach); <br>                MEditPrintF(hedit, "%25s: %lu, (%s)", (LPTSTR)"Component Type", mxl.dwComponentType, (LPTSTR)ach); <br>                MEditPrintF(hedit, "%25s: %lu", (LPTSTR)"Num Channels", mxl.cChannels); <br>                MEditPrintF(hedit, "%25s: %lu", (LPTSTR)"Num Connections", mxl.cConnections); <br>                MEditPrintF(hedit, "%25s: %lu", (LPTSTR)"Num Controls", mxl.cControls); <br>                MEditPrintF(hedit, "%25s: '%s'", (LPTSTR)"Short Name", (LPTSTR)mxl.szShortName); <br>                MEditPrintF(hedit, "%25s: '%s'", (LPTSTR)"Name", (LPTSTR)mxl.szName); <br>                MEditPrintF(hedit, "\r\n%25s: %lu", (LPTSTR)"Target Type", mxl.Target.dwType); <br>                MEditPrintF(hedit, "%25s: %lu", (LPTSTR)"Device ID", mxl.Target.dwDeviceID); <br>                MEditPrintF(hedit, "%25s: %u", (LPTSTR)"Manufacturer ID", mxl.Target.wMid); <br>                MEditPrintF(hedit, "%25s: %u", (LPTSTR)"Product ID", mxl.Target.wPid); <br>                MEditPrintF(hedit, "%25s: %u.%.02u", (LPTSTR)"Version", <br>                            mxl.Target.vDriverVersion &gt;&gt; 8, <br>                            mxl.Target.vDriverVersion &amp; 0x00FF); <br>                MEditPrintF(hedit, "%25s: '%s'", (LPTSTR)"Product Name", (LPTSTR)mxl.Target.szPname); <br>            } <br> <br>            // <br>            //  return nonzero to set the input focus to the control <br>            //  identified by the (hwndFocus = (HWND)wParam) argument. <br>            //  a zero return tells the dialog manager that this function <br>            //  has set the focus using SetFocus. <br>            // <br>            return (TRUE); <br> <br>        case WM_COMMAND: <br>            u = GET_WM_COMMAND_ID(wParam, lParam); <br>            if ((IDOK == u) || (IDCANCEL == u)) <br>            { <br>                EndDialog(hwnd, (IDOK == u)); <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // MixAppDlgProcLineInfo() <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL MixAppRefreshLineList <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: Handle of main window. <br>// <br>//  Return (BOOL): <br>// <br>//  History: <br>//      05/16/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNGLOBAL MixAppRefreshLineList <br>( <br>    HWND                    hwnd, <br>    PTABBEDLISTBOX          ptlb <br>) <br>{ <br>    static TCHAR        szLineTypeDst[] = TEXT("DST"); <br>    static TCHAR        szLineTypeSrc[] = TEXT("  src"); <br> <br>    MMRESULT            mmr; <br>    UINT                u; <br>    UINT                v; <br>    UINT                cConnections; <br>    MIXERLINE           mxl; <br>    TCHAR               ach[128]; <br>    TCHAR               szComponent[64]; <br>    int                 nIndex; <br>    MIXERCAPS           mxcaps; <br> <br> <br>    // <br>    // <br>    // <br>    SetWindowRedraw(ptlb-&gt;hlb, FALSE); <br>    ListBox_ResetContent(ptlb-&gt;hlb); <br> <br> <br>    if (0 != (APP_OPTF_DEBUGLOG &amp; gfuAppOptions)) <br>        MixAppDebugLog(NULL); <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    mmr = mixerGetDevCaps((UINT)ghmx, &amp;mxcaps, sizeof(mxcaps)); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                    "mixerGetDevCaps() failed on hmx=%.04Xh, mmr=%u!", <br>                    ghmx, mmr); <br> <br>        mxcaps.cDestinations = 0; <br>    } <br> <br>    for (u = 0; u &lt; mxcaps.cDestinations; u++) <br>    { <br>        mxl.cbStruct      = sizeof(mxl); <br>        mxl.dwDestination = u; <br> <br>        mmr = mixerGetLineInfo((HMIXEROBJ)ghmx, &amp;mxl, MIXER_GETLINEINFOF_DESTINATION); <br>        if (MMSYSERR_NOERROR != mmr) <br>        { <br>            AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                      "mixerGetLineInfo(dst=%u) failed on hmx=%.04Xh, mmr=%u!", <br>                      u, ghmx, mmr); <br>            continue; <br>        } <br> <br>        MixAppGetComponentName(&amp;mxl, szComponent); <br> <br>        // <br>        // <br>        // <br>        wsprintf(ach, gszLineFormatList, <br>                 (LPSTR)szLineTypeDst, <br>                 (MIXERLINE_LINEF_ACTIVE &amp; mxl.fdwLine) ? '*' : ' ', <br>                 (LPTSTR)szComponent, <br>                 mxl.dwLineID, <br>                 mxl.fdwLine, <br>                 mxl.cControls, <br>                 mxl.cConnections, <br>                 (LPSTR)mxl.szName); <br> <br>        if (0 != (APP_OPTF_DEBUGLOG &amp; gfuAppOptions)) <br>        { <br>            MixAppDebugLog(ach); <br>            MixAppDebugLog(gszCRLF); <br>        } <br> <br>        nIndex = ListBox_AddString(ptlb-&gt;hlb, ach); <br>        ListBox_SetItemData(ptlb-&gt;hlb, nIndex, mxl.dwLineID); <br> <br>        cConnections = (UINT)mxl.cConnections; <br>        for (v = 0; v &lt; cConnections; v++) <br>        { <br>            mxl.cbStruct      = sizeof(mxl); <br>            mxl.dwDestination = u; <br>            mxl.dwSource      = v; <br> <br>            mmr = mixerGetLineInfo((HMIXEROBJ)ghmx, &amp;mxl, MIXER_GETLINEINFOF_SOURCE); <br>            if (MMSYSERR_NOERROR != mmr) <br>            { <br>                AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                          "mixerGetLineInfo(src=%u) failed on hmx=%.04Xh, mmr=%u!", <br>                          v, ghmx, mmr); <br>                continue; <br>            } <br> <br> <br>            MixAppGetComponentName(&amp;mxl, szComponent); <br> <br> <br>            // <br>            // <br>            // <br>            wsprintf(ach, gszLineFormatList, <br>                     (LPSTR)szLineTypeSrc, <br>                     (MIXERLINE_LINEF_ACTIVE &amp; mxl.fdwLine) ? '*' : ' ', <br>                     (LPTSTR)szComponent, <br>                     mxl.dwLineID, <br>                     mxl.fdwLine, <br>                     mxl.cControls, <br>                     mxl.cConnections, <br>                     (LPSTR)mxl.szName); <br> <br>            if (0 != (APP_OPTF_DEBUGLOG &amp; gfuAppOptions)) <br>            { <br>                MixAppDebugLog(ach); <br>                MixAppDebugLog(gszCRLF); <br>            } <br> <br>            nIndex = ListBox_AddString(ptlb-&gt;hlb, ach); <br>            ListBox_SetItemData(ptlb-&gt;hlb, nIndex, mxl.dwLineID); <br>        } <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    SetWindowRedraw(ptlb-&gt;hlb, TRUE); <br> <br>    return (TRUE); <br>} // MixAppRefreshLineList() <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  LRESULT MixAppLineChange <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: <br>// <br>//      HMIXER hmx: <br>// <br>//      DWORD dwLineID: <br>// <br>//  Return (LRESULT): <br>// <br>//  History: <br>//      07/21/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>LRESULT FNGLOBAL MixAppLineChange <br>( <br>    HWND                    hwnd, <br>    HMIXER                  hmx, <br>    DWORD                   dwLineID <br>) <br>{ <br>    DPF(1, "MixAppLineChange(hwnd=%Xh, hmx=%Xh, dwLineID=%.08lXh)", <br>        hwnd, hmx, dwLineID); <br> <br> <br>    // <br>    // <br>    // <br>    if (gfDisplayingControl &amp;&amp; <br>        (dwLineID == gmxl.dwLineID) &amp;&amp; <br>        (NULL != ghdlgControl)) <br>    { <br>        SendMessage(ghdlgControl, MM_MIXM_LINE_CHANGE, (WPARAM)hmx, dwLineID); <br>    } <br> <br> <br>    MixAppRefreshLineList(hwnd, gptlbLines); <br> <br> <br>    // <br>    //  return zero because we handled the message <br>    // <br>    return (0L); <br>} // MixAppLineChange() </code></pre>
<p>&nbsp;</p></body>
</HTML>

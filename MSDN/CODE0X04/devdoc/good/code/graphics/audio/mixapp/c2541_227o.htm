<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MACTRLS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2544"></a>MACTRLS.C</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>//  mactrls.c <br>// <br>//  Description: <br>// <br>// <br>//  History: <br>//       9/21/93 <br>// <br>//==========================================================================; <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br> <br>#include "mixapp.h" <br> <br>#include "debug.h" <br> <br> <br>TCHAR       gszLineControlsFormatTitle[]= TEXT("Index\t2!Ctrl Type\t8!Ctrl ID\t6!Flags\t6!Items\t3!Name"); <br>TCHAR       gszLineControlsFormatList[] = TEXT("%u\t%-s\t%.08lXh\t%.08lXh\t%lu\t%-s"); <br> <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL MixAppGetControlTypeName <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      LPMIXERCONTROl pmxctrl: <br>// <br>//      LPTSTR szControlType: <br>// <br>//  Return (BOOL): <br>// <br>//  History: <br>//      09/24/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNGLOBAL MixAppGetControlTypeName <br>( <br>    LPMIXERCONTROL          pmxctrl, <br>    LPTSTR                  szControlType <br>) <br>{ <br>    switch (pmxctrl-&gt;dwControlType) <br>    { <br>        case MIXERCONTROL_CONTROLTYPE_CUSTOM: <br>            lstrcpy(szControlType, "Custom!"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_BOOLEANMETER: <br>            lstrcpy(szControlType, "Boolean Meter"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_SIGNEDMETER: <br>            lstrcpy(szControlType, "Signed Meter"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_PEAKMETER: <br>            lstrcpy(szControlType, "Peak Meter"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER: <br>            lstrcpy(szControlType, "Unsigned Meter"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_BOOLEAN: <br>            lstrcpy(szControlType, "Boolean Switch"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_ONOFF: <br>            lstrcpy(szControlType, "On/Off Switch"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_MUTE: <br>            lstrcpy(szControlType, "Mute Switch"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_MONO: <br>            lstrcpy(szControlType, "Mono Switch"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_LOUDNESS: <br>            lstrcpy(szControlType, "Loudness Switch"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_STEREOENH: <br>            lstrcpy(szControlType, "Stereo Enh Switch"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_BUTTON: <br>            lstrcpy(szControlType, "Button"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_DECIBELS: <br>            lstrcpy(szControlType, "Decibels Number"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_SIGNED: <br>            lstrcpy(szControlType, "Signed Number"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_PERCENT: <br>            lstrcpy(szControlType, "Percent Number"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_UNSIGNED: <br>            lstrcpy(szControlType, "Unsigned Number"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_SLIDER: <br>            lstrcpy(szControlType, "Slider"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_PAN: <br>            lstrcpy(szControlType, "Pan Slider"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_QSOUNDPAN: <br>            lstrcpy(szControlType, "Q-Sound Pan Slider"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_FADER: <br>            lstrcpy(szControlType, "Fader"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_VOLUME: <br>            lstrcpy(szControlType, "Volume Fader"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_BASS: <br>            lstrcpy(szControlType, "Bass Fader"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_TREBLE: <br>            lstrcpy(szControlType, "Treble Fader"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_EQUALIZER: <br>            lstrcpy(szControlType, "Equalizer Fader"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_SINGLESELECT: <br>            lstrcpy(szControlType, "Single-Sel List"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_MUX: <br>            lstrcpy(szControlType, "MUX List"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT: <br>            lstrcpy(szControlType, "Multi-Sel List"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_MIXER: <br>            lstrcpy(szControlType, "Mixer List"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_MICROTIME: <br>            lstrcpy(szControlType, "Microsecond Time"); <br>            break; <br> <br>        case MIXERCONTROL_CONTROLTYPE_MILLITIME: <br>            lstrcpy(szControlType, "Millisecond Time"); <br>            break; <br> <br>        default: <br>            DPF(0, "!MixAppGetControlTypeName: invalid control type %.08lXh!", pmxctrl-&gt;dwControlType); <br>            lstrcpy(szControlType, "** NOT VALID **"); <br>            return (FALSE); <br>    } <br> <br>    return (TRUE); <br>} // MixAppGetControlTypeName() <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL MixAppDisplayControl <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: <br>// <br>//      DWORD dwControlID: <br>// <br>//  Return (BOOL): <br>// <br>//  History: <br>//      07/21/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MixAppDisplayControl <br>( <br>    HWND                    hwnd, <br>    DWORD                   dwControlID <br>) <br>{ <br>    MIXERLINECONTROLS   mxlc; <br>    MMRESULT            mmr; <br>    BOOL                f; <br>    MACONTROLINSTANCE   maci; <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    mxlc.cbStruct    = sizeof(mxlc); <br>////mxlc.dwLineID    = 0; <br>    mxlc.dwControlID = dwControlID; <br>////mxlc.cControls   = 1; <br>    mxlc.cbmxctrl    = sizeof(gmxctrl); <br>    mxlc.pamxctrl    = &amp;gmxctrl; <br> <br>    mmr = mixerGetLineControls((HMIXEROBJ)ghmx, &amp;mxlc, MIXER_GETLINECONTROLSF_ONEBYID); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                  "mixerGetLineControls(ctrlid=%.08lXh) failed on hmx=%.04Xh, mmr=%u!", <br>                  dwControlID, ghmx, mmr); <br>        return (FALSE); <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    if (MIXERCONTROL_CONTROLF_DISABLED &amp; gmxctrl.fdwControl) <br>    { <br>        AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                  "This control (ctrlid=%.08lXh) is disabled.", <br>                  dwControlID); <br>        return (FALSE); <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    gfDisplayingControl = TRUE; <br>    gdwControlID        = dwControlID; <br> <br> <br>    // <br>    // <br>    // <br>    maci.hmx        = ghmx; <br>    maci.pmxl       = &amp;gmxl; <br>    maci.pmxctrl    = &amp;gmxctrl; <br> <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    f = FALSE; <br>    switch (MIXERCONTROL_CT_CLASS_MASK &amp; gmxctrl.dwControlType) <br>    { <br>        case MIXERCONTROL_CT_CLASS_CUSTOM: <br>            AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                      "Control type class CUSTOM not done yet!"); <br>            break; <br> <br>        case MIXERCONTROL_CT_CLASS_METER: <br>            f = DialogBoxParam(ghinst, <br>                               DLG_MIXAPP_CONTROL, <br>                               hwnd, <br>                               MixAppDlgProcControlMeter, <br>                               (LPARAM)(LPVOID)&amp;maci); <br>            break; <br> <br>        case MIXERCONTROL_CT_CLASS_SWITCH: <br>            f = DialogBoxParam(ghinst, <br>                               DLG_MIXAPP_CONTROL, <br>                               hwnd, <br>                               MixAppDlgProcControlSwitch, <br>                               (LPARAM)(LPVOID)&amp;maci); <br>            break; <br> <br>        case MIXERCONTROL_CT_CLASS_NUMBER: <br>            AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                      "Control type class NUMBER not done yet!"); <br>            break; <br> <br>        case MIXERCONTROL_CT_CLASS_SLIDER: <br>            AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                      "Control type class SLIDER not done yet!"); <br>            break; <br> <br>        case MIXERCONTROL_CT_CLASS_FADER: <br>            f = DialogBoxParam(ghinst, <br>                               DLG_MIXAPP_CONTROL, <br>                               hwnd, <br>                               MixAppDlgProcControlFader, <br>                               (LPARAM)(LPVOID)&amp;maci); <br>            break; <br> <br>        case MIXERCONTROL_CT_CLASS_LIST: <br>            f = DialogBoxParam(ghinst, <br>                               DLG_MIXAPP_CONTROL, <br>                               hwnd, <br>                               MixAppDlgProcControlList, <br>                               (LPARAM)(LPVOID)&amp;maci); <br>            break; <br> <br>        default: <br>            AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                      "Unknown control type class=%.08lXh!", <br>                      gmxctrl.dwControlType); <br>            break; <br>    } <br> <br>    gfDisplayingControl = FALSE; <br> <br>    // <br>    // <br>    // <br>    if (!f) <br>    { <br>        AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                  "Do not know how to deal with control type=%.08lXh!", <br>                  gmxctrl.dwControlType); <br>    } <br> <br>    return (f); <br>} // MixAppDisplayControl() <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL MixAppDlgProcControlInfo <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: <br>// <br>//      UINT uMsg: <br>// <br>//      WPARAM wParam: <br>// <br>//      LPARAM lParam: <br>// <br>//  Return (BOOL): <br>// <br>//  History: <br>//      07/12/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL CALLBACK MixAppDlgProcControlInfo <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    HWND                hedit; <br>    UINT                u; <br>    MIXERLINECONTROLS   mxlc; <br>    MIXERCONTROL        mxctrl; <br>    MMRESULT            mmr; <br> <br>    // <br>    // <br>    // <br>    // <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            hedit = GetDlgItem(hwnd, IDD_CONTROLINFO_EDIT_INFO); <br>            SetWindowFont(hedit, GetStockFont(SYSTEM_FIXED_FONT), FALSE); <br> <br>            // <br>            // <br>            // <br>            // <br>            mxlc.cbStruct       = sizeof(mxlc); <br>////////////mxlc.dwLineID       = 0; <br>            mxlc.dwControlID    = lParam; <br>////////////mxlc.cControls      = 1; <br>            mxlc.cbmxctrl       = sizeof(mxctrl); <br>            mxlc.pamxctrl       = &amp;mxctrl; <br> <br>            mmr = mixerGetLineControls((HMIXEROBJ)ghmx, &amp;mxlc, MIXER_GETLINECONTROLSF_ONEBYID); <br>            if (MMSYSERR_NOERROR != mmr) <br>            { <br>                AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                          "mixerGetLineControls(ctrlid=%.08lXh) failed on hmx=%.04Xh, mmr=%u!", <br>                          lParam, ghmx, mmr); <br>            } <br>            else <br>            { <br>                static TCHAR    szDisplayTitle[]  = TEXT("[Control Info]\r\n"); <br> <br>                // <br>                // <br>                // <br>                MEditPrintF(hedit, NULL); <br>                MEditPrintF(hedit, szDisplayTitle); <br> <br>                MEditPrintF(hedit, "%25s: %.04Xh", (LPTSTR)"Mixer Handle", <br>                            ghmx); <br> <br>                MEditPrintF(hedit, "%25s: %.08lXh", (LPTSTR)"Line ID", <br>                            mxlc.dwLineID); <br> <br> <br>                // <br>                // <br>                // <br>                MEditPrintF(hedit, "%25s: %lu bytes (requested %lu)", (LPTSTR)"Size of Control Info", <br>                            mxctrl.cbStruct, (DWORD)sizeof(mxctrl)); <br> <br> <br>                MEditPrintF(hedit, "%25s: %.08lXh", (LPTSTR)"Control ID", <br>                            mxctrl.dwControlID); <br> <br>                MEditPrintF(hedit, "%25s: %.08lXh", (LPTSTR)"Control Type", <br>                            mxctrl.dwControlType); <br> <br>                MEditPrintF(hedit, "~%25s: %.08lXh", (LPTSTR)"Control Flags", <br>                            mxctrl.fdwControl); <br> <br>                if (MIXERCONTROL_CONTROLF_DISABLED &amp; mxctrl.fdwControl) <br>                    MEditPrintF(hedit, "~, disabled"); <br> <br>                if (MIXERCONTROL_CONTROLF_MULTIPLE &amp; mxctrl.fdwControl) <br>                    MEditPrintF(hedit, "~, multiple"); <br> <br>                if (MIXERCONTROL_CONTROLF_UNIFORM &amp; mxctrl.fdwControl) <br>                    MEditPrintF(hedit, "~, uniform"); <br> <br>                if (~(MIXERCONTROL_CONTROLF_UNIFORM | MIXERCONTROL_CONTROLF_MULTIPLE | MIXERCONTROL_CONTROLF_DISABLED) &amp; mxctrl.fdwControl) <br>                    MEditPrintF(hedit, "~, *INVALID FLAGS*"); <br> <br>                MEditPrintF(hedit, ""); <br> <br>                MEditPrintF(hedit, "%25s: %lu", (LPTSTR)"Multiple Items", <br>                            mxctrl.cMultipleItems); <br> <br>                MEditPrintF(hedit, "%25s: '%s'", (LPTSTR)"Short Name", <br>                            (LPTSTR)mxctrl.szShortName); <br> <br>                MEditPrintF(hedit, "%25s: '%s'", (LPTSTR)"Name", <br>                            (LPTSTR)mxctrl.szName); <br> <br> <br>                MEditPrintF(hedit, "%25s: %.08lXh", (LPTSTR)"dwMinimum", <br>                            mxctrl.Bounds.dwMinimum); <br> <br>                MEditPrintF(hedit, "%25s: %.08lXh", (LPTSTR)"dwMaximum", <br>                            mxctrl.Bounds.dwMaximum); <br> <br>                MEditPrintF(hedit, "%25s: %.08lXh", (LPTSTR)"cSteps", <br>                            mxctrl.Metrics.cSteps); <br>            } <br> <br>            return (TRUE); <br> <br>        case WM_COMMAND: <br>            u = GET_WM_COMMAND_ID(wParam, lParam); <br>            if ((IDOK == u) || (IDCANCEL == u)) <br>            { <br>                EndDialog(hwnd, (IDOK == u)); <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // MixAppDlgProcControlInfo() <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL MixAppDlgProcLineControls <br>// <br>//  Description: <br>//      This dialog procedure is used to display driver capabilities. <br>// <br>//  Arguments: <br>//      HWND hwnd: Handle to window. <br>// <br>//      UINT uMsg: Message being sent to the window. <br>// <br>//      WPARAM wParam: Specific argument to message. <br>// <br>//      LPARAM lParam: Specific argument to message. <br>// <br>//  Return (BOOL): <br>//      The return value is specific to the message that was received. For <br>//      the most part, it is FALSE if this dialog procedure does not handle <br>//      a message. <br>// <br>//  History: <br>//       1/ 2/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL CALLBACK MixAppDlgProcLineControls <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    static PTABBEDLISTBOX   ptlb; <br>    HWND                hwndStatic; <br>    MMRESULT            mmr; <br>    RECT                rc; <br>    PAINTSTRUCT         ps; <br>    UINT                uId; <br>    UINT                uCode; <br>    int                 n; <br>    LRESULT             lr; <br> <br>    UINT                cbmxctrls; <br>    MIXERLINECONTROLS   mxlc; <br>    PMIXERCONTROL       pamxctrl; <br> <br> <br>    // <br>    // <br>    // <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            hwndStatic = GetDlgItem(hwnd, IDD_LINECONTROLS_STATIC_POSITION); <br> <br>            GetWindowRect(hwndStatic, &amp;rc); <br>            ScreenToClient(hwnd, (LPPOINT)&amp;rc.left); <br>            ScreenToClient(hwnd, (LPPOINT)&amp;rc.right); <br> <br>            ShowWindow(hwndStatic, SW_HIDE); <br> <br>            EnableWindow(GetDlgItem(hwnd, IDD_LINECONTROLS_BTN_INFO), FALSE); <br>            EnableWindow(GetDlgItem(hwnd, IDD_LINECONTROLS_BTN_SETTINGS), FALSE); <br> <br>            ptlb = TlbCreate(hwnd, IDD_LINECONTROLS_LIST_CONTROLS, &amp;rc); <br>            if (NULL == ptlb) <br>                return (TRUE); <br> <br>            TlbSetFont(ptlb, GetStockFont(SYSTEM_FONT), FALSE); <br>            TlbSetTitleAndTabs(ptlb, gszLineControlsFormatTitle, FALSE); <br> <br>            SetWindowPos(ptlb-&gt;hlb, GetDlgItem(hwnd, IDOK), <br>                            0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE); <br> <br>            ListBox_ResetContent(ptlb-&gt;hlb); <br> <br>            // <br>            // <br>            // <br>            // <br>            gmxl.cbStruct     = sizeof(gmxl); <br>            gmxl.dwLineID     = lParam; <br> <br>            mmr = mixerGetLineInfo((HMIXEROBJ)ghmx, &amp;gmxl, MIXER_GETLINEINFOF_LINEID); <br>            if (MMSYSERR_NOERROR != mmr) <br>            { <br>                AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                        "mixerGetLineInfo(lineid=%.08lXh) failed on hmx=%.04Xh, mmr=%u!", <br>                        lParam, ghmx, mmr); <br>                EndDialog(hwnd, FALSE); <br>                return (TRUE); <br>            } <br> <br>            if (0 == gmxl.cControls) <br>            { <br>                AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                            "There are no controls associated with the selected line."); <br>                EndDialog(hwnd, FALSE); <br>                return (TRUE); <br>            } <br> <br> <br>            cbmxctrls = sizeof(*pamxctrl) * (UINT)gmxl.cControls; <br> <br>            pamxctrl = (PMIXERCONTROL)LocalAlloc(LPTR, cbmxctrls); <br>            if (NULL == pamxctrl) <br>            { <br>                EndDialog(hwnd, FALSE); <br>                return (TRUE); <br>            } <br> <br>            SetWindowRedraw(ptlb-&gt;hlb, FALSE); <br> <br>            // <br>            // <br>            // <br>            // <br>            mxlc.cbStruct       = sizeof(mxlc); <br>            mxlc.dwLineID       = lParam; <br>////////////mxlc.dwControlID    = 0; <br>////////////mxlc.dwControlType  = 0; <br>            mxlc.cControls      = gmxl.cControls; <br>            mxlc.cbmxctrl       = sizeof(*pamxctrl); <br>            mxlc.pamxctrl       = pamxctrl; <br> <br>            mmr = mixerGetLineControls((HMIXEROBJ)ghmx, &amp;mxlc, MIXER_GETLINECONTROLSF_ALL); <br>            if (MMSYSERR_NOERROR != mmr) <br>            { <br>                AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                        "mixerGetLineControls(ctrlid=%.08lXh) failed on hmx=%.04Xh, mmr=%u!", <br>                        lParam, ghmx, mmr); <br>            } <br>            else <br>            { <br>                TCHAR       ach[128]; <br>                TCHAR       szControlType[64]; <br>                UINT        u; <br>                int         nIndex; <br> <br>                if (0 != (APP_OPTF_DEBUGLOG &amp; gfuAppOptions)) <br>                    MixAppDebugLog(NULL); <br> <br>                for (u = 0; u &lt; mxlc.cControls; u++) <br>                { <br>                    MixAppGetControlTypeName(&amp;pamxctrl[u], szControlType); <br> <br>                    // <br>                    // <br>                    // <br>                    wsprintf(ach, gszLineControlsFormatList, <br>                            u, <br>                            (LPTSTR)szControlType, <br>                            pamxctrl[u].dwControlID, <br>                            pamxctrl[u].fdwControl, <br>                            pamxctrl[u].cMultipleItems, <br>                            (LPSTR)pamxctrl[u].szName); <br> <br>                    if (0 != (APP_OPTF_DEBUGLOG &amp; gfuAppOptions)) <br>                    { <br>                        MixAppDebugLog(ach); <br>                        MixAppDebugLog(gszCRLF); <br>                    } <br> <br>                    nIndex = ListBox_AddString(ptlb-&gt;hlb, ach); <br>                    ListBox_SetItemData(ptlb-&gt;hlb, nIndex, pamxctrl[u].dwControlID); <br>                } <br> <br>                ListBox_SetCurSel(ptlb-&gt;hlb, 0); <br>                EnableWindow(GetDlgItem(hwnd, IDD_LINECONTROLS_BTN_INFO), TRUE); <br>                EnableWindow(GetDlgItem(hwnd, IDD_LINECONTROLS_BTN_SETTINGS), TRUE); <br>            } <br> <br>            SetWindowRedraw(ptlb-&gt;hlb, TRUE); <br>            LocalFree((HLOCAL)pamxctrl); <br>            return (TRUE); <br> <br> <br>        case WM_PAINT: <br>            if (NULL != ptlb) <br>            { <br>                BeginPaint(hwnd, &amp;ps); <br>                TlbPaint(ptlb, hwnd, ps.hdc); <br>                EndPaint(hwnd, &amp;ps); <br>            } <br>            break; <br> <br>        case WM_COMMAND: <br>            uId   = GET_WM_COMMAND_ID(wParam, lParam); <br>            uCode = GET_WM_COMMAND_CMD(wParam, lParam); <br>            switch (uId) <br>            { <br>                case IDOK: <br>                case IDCANCEL: <br>                    if (NULL != ptlb) <br>                    { <br>                        // <br>                        //  hadidk! don't destroy the listbox window, but <br>                        //  free all other memory for TLB. the listbox <br>                        //  window will be destroyed when the dialog is <br>                        //  destroyed. <br>                        // <br>                        ptlb-&gt;hlb = NULL; <br> <br>                        TlbDestroy(ptlb); <br>                        ptlb = NULL; <br>                    } <br> <br>                    EndDialog(hwnd, TRUE); <br>                    break; <br> <br> <br>                case IDD_LINECONTROLS_BTN_INFO: <br>                    n  = ListBox_GetCurSel(ptlb-&gt;hlb); <br>                    if (LB_ERR == n) <br>                        break; <br> <br>                    lr = ListBox_GetItemData(ptlb-&gt;hlb, n); <br>                    DialogBoxParam(ghinst, <br>                                   DLG_CONTROLINFO, <br>                                   hwnd, <br>                                   MixAppDlgProcControlInfo, <br>                                   lr); <br>                    break; <br> <br>                case IDD_LINECONTROLS_BTN_SETTINGS: <br>                    n  = ListBox_GetCurSel(ptlb-&gt;hlb); <br>                    if (LB_ERR == n) <br>                        break; <br> <br>                    lr = ListBox_GetItemData(ptlb-&gt;hlb, n); <br>                    MixAppDisplayControl(hwnd, lr); <br>                    break; <br> <br>                case IDD_LINECONTROLS_LIST_CONTROLS: <br>                    switch (uCode) <br>                    { <br>                        case LBN_SELCHANGE: <br>                            break; <br> <br>                        case LBN_DBLCLK: <br>                            n  = ListBox_GetCurSel(ptlb-&gt;hlb); <br>                            if (LB_ERR == n) <br>                                break; <br> <br>                            lr = ListBox_GetItemData(ptlb-&gt;hlb, n); <br>                            if (GetKeyState(VK_CONTROL) &lt; 0) <br>                            { <br>                                DialogBoxParam(ghinst, <br>                                               DLG_CONTROLINFO, <br>                                               hwnd, <br>                                               MixAppDlgProcControlInfo, <br>                                               lr); <br>                            } <br>                            else <br>                            { <br>                                MixAppDisplayControl(hwnd, lr); <br>                            } <br>                            break; <br>                    } <br>                    break; <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // MixAppDlgProcLineControls <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  LRESULT MixAppControlChange <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: <br>// <br>//      HMIXER hmx: <br>// <br>//      DWORD dwControlID: <br>// <br>//  Return (LRESULT): <br>// <br>//  History: <br>//      07/21/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>LRESULT FNGLOBAL MixAppControlChange <br>( <br>    HWND                    hwnd, <br>    HMIXER                  hmx, <br>    DWORD                   dwControlID <br>) <br>{ <br>    DPF(1, "MixAppControlChange(hwnd=%Xh, hmx=%Xh, dwControlID=%.08lXh)", <br>        hwnd, hmx, dwControlID); <br> <br> <br>    // <br>    // <br>    // <br>    if (gfDisplayingControl &amp;&amp; <br>        (dwControlID == gdwControlID) &amp;&amp; <br>        (NULL != ghdlgControl)) <br>    { <br>        SendMessage(ghdlgControl, MM_MIXM_CONTROL_CHANGE, (WPARAM)hmx, dwControlID); <br>    } <br> <br> <br>    // <br>    //  return zero because we handled the message <br>    // <br>    return (0L); <br>} // MixAppControlChange() </code></pre>
<p>&nbsp;</p></body>
</HTML>

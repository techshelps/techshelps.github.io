<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAFADER.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2546"></a>MAFADER.C</h2>
<pre><code>//==========================================================================; <br>// <br>//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br>//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br>//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br>//  PURPOSE. <br>// <br>//  Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//--------------------------------------------------------------------------; <br>// <br>//  mafader.c <br>// <br>//  Description: <br>// <br>// <br>//  History: <br>//       9/21/93 <br>// <br>//==========================================================================; <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include "muldiv32.h" <br> <br>#include "mixapp.h" <br> <br>#include "debug.h" <br> <br> <br>// <br>// <br>// <br>typedef struct tMACONTROLINSTANCE_FADER <br>{ <br>    LPMACONTROLINSTANCE             pmaci; <br>    int                             nRange; <br>    int                             nPageInc; <br>    MIXERCONTROLDETAILS_UNSIGNED    pmxcd_u[]; <br> <br>} MACONTROLINSTANCE_FADER, *PMACONTROLINSTANCE_FADER; <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL MixAppControlChangeFader <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: <br>// <br>//      HMIXER hmx: <br>// <br>//      DWORD dwControlID: <br>// <br>//  Return (BOOL): <br>// <br>//  History: <br>//      09/22/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MixAppControlChangeFader <br>( <br>    HWND                    hwnd, <br>    HMIXER                  hmx, <br>    DWORD                   dwControlID <br>) <br>{ <br>    MMRESULT                        mmr; <br>    HWND                            htxt; <br>    PMACONTROLINSTANCE_FADER        pmaci_fader; <br>    LPMACONTROLINSTANCE             pmaci; <br>    LPMIXERLINE                     pmxl; <br>    LPMIXERCONTROL                  pmxctrl; <br>    PMIXERCONTROLDETAILS_UNSIGNED   pmxcd_u; <br>    int                             nRange; <br>    int                             nValue; <br>    UINT                            cChannels; <br>    UINT                            cMultipleItems; <br>    UINT                            u; <br>    UINT                            uIndex; <br>    UINT                            v; <br>    MIXERCONTROLDETAILS             mxcd; <br>    HWND                            hsbFocus; <br>    HWND                            hsb; <br> <br> <br>    hsbFocus = GetFocus(); <br>    if (NULL == hsbFocus) <br>    { <br>        hsbFocus = GetDlgItem(hwnd, IDD_MACONTROL_MULTICHANNEL_BASE); <br>    } <br>    else <br>    { <br>        uIndex = GetDlgCtrlID(hsbFocus); <br>        if (uIndex &lt; IDD_MACONTROL_MULTICHANNEL_BASE) <br>        { <br>            hsbFocus = GetDlgItem(hwnd, IDD_MACONTROL_MULTICHANNEL_BASE); <br>        } <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    pmaci_fader = (PMACONTROLINSTANCE_FADER)(UINT)GetWindowLong(hwnd, DWL_USER); <br>    pmaci       = pmaci_fader-&gt;pmaci; <br>    pmxl        = pmaci-&gt;pmxl; <br>    pmxctrl     = pmaci-&gt;pmxctrl; <br>    pmxcd_u     = &amp;pmaci_fader-&gt;pmxcd_u[0]; <br>    nRange      = pmaci_fader-&gt;nRange; <br> <br>    cChannels = (UINT)pmxl-&gt;cChannels; <br>    if (MIXERCONTROL_CONTROLF_UNIFORM &amp; pmxctrl-&gt;fdwControl) <br>        cChannels = 1; <br> <br> <br> <br>    // <br>    // <br>    // <br>    mxcd.cbStruct       = sizeof(mxcd); <br>    mxcd.dwControlID    = pmxctrl-&gt;dwControlID; <br>    mxcd.cChannels      = cChannels; <br>    mxcd.cMultipleItems = pmxctrl-&gt;cMultipleItems; <br>    mxcd.cbDetails      = sizeof(*pmxcd_u); <br>    mxcd.paDetails      = pmxcd_u; <br> <br>    mmr = mixerGetControlDetails((HMIXEROBJ)pmaci-&gt;hmx, &amp;mxcd, MIXER_GETCONTROLDETAILSF_VALUE); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                  "mixerGetControlDetails(ctrlid=%.08lXh) failed on hmx=%.04Xh, mmr=%u!", <br>                  pmxctrl-&gt;dwControlID, pmaci-&gt;hmx, mmr); <br>        return (FALSE); <br>    } <br> <br> <br>    cMultipleItems = 1; <br>    if (MIXERCONTROL_CONTROLF_MULTIPLE &amp; pmxctrl-&gt;fdwControl) <br>        cMultipleItems = (UINT)pmxctrl-&gt;cMultipleItems; <br> <br> <br>    for (u = 0; u &lt; cChannels; u++) <br>    { <br>        for (v = 0; v &lt; cMultipleItems; v++) <br>        { <br>            uIndex = (u * cMultipleItems) + v; <br> <br>            nValue = (int)MulDivRN(pmxcd_u[uIndex].dwValue, nRange, 0xFFFF); <br> <br> <br>            // <br>            //  Windows is stupid and forces an update to scrollbars <br>            //  (a flickering paint) even when the position does not <br>            //  change... so don't update if it is already in the <br>            //  right position. <br>            // <br>            hsb = GetDlgItem(hwnd, IDD_MACONTROL_MULTICHANNEL_BASE + uIndex); <br> <br>            if (hsbFocus == hsb) <br>            { <br>                htxt = GetDlgItem(hwnd, IDD_MACONTROL_TXT_VALUE); <br>                AppSetWindowText(htxt, "mapped=%d, dwValue=%lu", <br>                                 nValue, <br>                                 pmxcd_u[uIndex].dwValue); <br>            } <br> <br>            if (nRange - nValue == GetScrollPos(hsb, SB_CTL)) <br>                continue; <br> <br>            // <br>            //  note that we _invert_ the position since a fader will <br>            //  increase approaching the top (opposite of scrollbar <br>            //  logic) <br>            // <br>            SetScrollPos(hsb, SB_CTL, nRange - nValue, TRUE); <br>        } <br>    } <br> <br>    // <br>    // <br>    // <br>    mxcd.cbStruct       = sizeof(mxcd); <br>    mxcd.dwControlID    = pmxctrl-&gt;dwControlID; <br>    mxcd.cChannels      = 1; <br>    mxcd.cMultipleItems = pmxctrl-&gt;cMultipleItems; <br>    mxcd.cbDetails      = sizeof(*pmxcd_u); <br>    mxcd.paDetails      = pmxcd_u; <br> <br>    mmr = mixerGetControlDetails((HMIXEROBJ)pmaci-&gt;hmx, &amp;mxcd, MIXER_GETCONTROLDETAILSF_VALUE); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                  "mixerGetControlDetails(ctrlid=%.08lXh) failed on hmx=%.04Xh, mmr=%u!", <br>                  pmxctrl-&gt;dwControlID, pmaci-&gt;hmx, mmr); <br>        return (FALSE); <br>    } <br> <br> <br>    for (v = 0; v &lt; cMultipleItems; v++) <br>    { <br>        uIndex = v; <br> <br>        nValue = (int)MulDivRN(pmxcd_u[uIndex].dwValue, nRange, 0xFFFF); <br> <br>        hsb = GetDlgItem(hwnd, IDD_MACONTROL_UNIFORM_BASE + uIndex); <br>        if (hsbFocus == hsb) <br>        { <br>            htxt = GetDlgItem(hwnd, IDD_MACONTROL_TXT_VALUE); <br>            AppSetWindowText(htxt, "mapped=%d, dwValue=%lu", <br>                             nValue, <br>                             pmxcd_u[0].dwValue); <br>        } <br> <br>        if (nRange - nValue == GetScrollPos(hsb, SB_CTL)) <br>            continue; <br> <br>        // <br>        //  note that we _invert_ the position since a fader will <br>        //  increase approaching the top (opposite of scrollbar <br>        //  logic) <br>        // <br>        SetScrollPos(hsb, SB_CTL, nRange - nValue, TRUE); <br>    } <br> <br> <br>    return (TRUE); <br>} // MixAppControlChangeFader() <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL MixAppControlSetFader <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: <br>// <br>//      HWND hsb: <br>// <br>//      UINT uCode: <br>// <br>//      int nPos: <br>// <br>//  Return (BOOL): <br>// <br>//  History: <br>//      09/22/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MixAppControlSetFader <br>( <br>    HWND                    hwnd, <br>    HWND                    hsb, <br>    UINT                    uCode, <br>    int                     nPos <br>) <br>{ <br>    PMACONTROLINSTANCE_FADER        pmaci_fader; <br>    LPMACONTROLINSTANCE             pmaci; <br>    LPMIXERLINE                     pmxl; <br>    LPMIXERCONTROL                  pmxctrl; <br>    PMIXERCONTROLDETAILS_UNSIGNED   pmxcd_u; <br>    MMRESULT                        mmr; <br>    int                             nRange; <br>    int                             nPageInc; <br>    int                             nValue; <br>    UINT                            cChannels; <br>    UINT                            uIndex; <br>    MIXERCONTROLDETAILS             mxcd; <br> <br>    // <br>    // <br>    // <br>    pmaci_fader = (PMACONTROLINSTANCE_FADER)(UINT)GetWindowLong(hwnd, DWL_USER); <br>    pmaci       = pmaci_fader-&gt;pmaci; <br>    pmxl        = pmaci-&gt;pmxl; <br>    pmxctrl     = pmaci-&gt;pmxctrl; <br>    pmxcd_u     = &amp;pmaci_fader-&gt;pmxcd_u[0]; <br>    nRange      = pmaci_fader-&gt;nRange; <br>    nPageInc    = pmaci_fader-&gt;nPageInc; <br> <br> <br>    uIndex = GetDlgCtrlID(hsb); <br> <br>    if (uIndex &lt; IDD_MACONTROL_UNIFORM_BASE) <br>    { <br>        cChannels = (UINT)pmxl-&gt;cChannels; <br>        if (MIXERCONTROL_CONTROLF_UNIFORM &amp; pmxctrl-&gt;fdwControl) <br>            cChannels = 1; <br> <br>        uIndex -= IDD_MACONTROL_MULTICHANNEL_BASE; <br>    } <br>    else <br>    { <br>        cChannels = 1; <br> <br>        uIndex -= IDD_MACONTROL_UNIFORM_BASE; <br>    } <br> <br> <br>    nValue = GetScrollPos(hsb, SB_CTL); <br> <br>    switch (uCode) <br>    { <br>        case SB_PAGEDOWN: <br>            nValue = (int)min(nRange, (LONG)nValue + nPageInc); <br>            break; <br> <br>        case SB_LINEDOWN: <br>            nValue = (int)min(nRange, (LONG)nValue + 1); <br>            break; <br> <br>        case SB_PAGEUP: <br>            nValue -= nPageInc; <br> <br>            //-- fall through --// <br> <br>        case SB_LINEUP: <br>            nValue = (nValue &lt; 1) ? 0 : (nValue - 1); <br>            break; <br> <br> <br>        case SB_TOP: <br>            // <br>            //  !!! would be a VERY BAD IDEA to go full volume !!! <br>            // <br>            nValue = nRange / 2; <br>            break; <br> <br>        case SB_BOTTOM: <br>            nValue = nRange; <br>            break; <br> <br>        case SB_THUMBPOSITION: <br>        case SB_THUMBTRACK: <br>            nValue = nPos; <br>            break; <br> <br>        default: <br>            return (FALSE); <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    mxcd.cbStruct       = sizeof(mxcd); <br>    mxcd.dwControlID    = pmxctrl-&gt;dwControlID; <br>    mxcd.cChannels      = cChannels; <br>    mxcd.cMultipleItems = pmxctrl-&gt;cMultipleItems; <br>    mxcd.cbDetails      = sizeof(*pmxcd_u); <br>    mxcd.paDetails      = pmxcd_u; <br> <br>    mmr = mixerGetControlDetails((HMIXEROBJ)pmaci-&gt;hmx, &amp;mxcd, 0L); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                  "mixerGetControlDetails(ctrlid=%.08lXh) failed on hmx=%.04Xh, mmr=%u!", <br>                  pmxctrl-&gt;dwControlID, pmaci-&gt;hmx, mmr); <br>        return (FALSE); <br>    } <br> <br>    pmxcd_u[uIndex].dwValue  = (DWORD)MulDivRN((nRange - nValue), 0xFFFF, nRange); <br> <br>    mmr = mixerSetControlDetails((HMIXEROBJ)pmaci-&gt;hmx, &amp;mxcd, 0L); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                  "mixerSetControlDetails(ctrlid=%.08lXh) failed on hmx=%.04Xh, mmr=%u!", <br>                  pmxctrl-&gt;dwControlID, pmaci-&gt;hmx, mmr); <br>        return (FALSE); <br>    } <br> <br>// * commented out to stop sliders getting out of synch    * <br>// * between different instances of the app. AGuy 22.12.93 * <br>//  SetScrollPos(hsb, SB_CTL, nValue, TRUE); <br> <br>#if 0 <br>    if (0 == uIndex) <br>    { <br>        htxt = GetDlgItem(hwnd, IDD_MACONTROL_TXT_VALUE); <br>        AppSetWindowText(htxt, "mapped=%d, dwValue=%lu", <br>                         nValue, <br>                         pmxcd_u[0].dwValue); <br>    } <br>#endif <br> <br>    return (TRUE); <br>} // MixAppControlSetFader() <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL MixAppLineChangeFader <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: <br>// <br>//      HMIXER hmx: <br>// <br>//      DWORD dwLineID: <br>// <br>//  Return (BOOL): <br>// <br>//  History: <br>//      09/24/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MixAppLineChangeFader <br>( <br>    HWND                    hwnd, <br>    HMIXER                  hmx, <br>    DWORD                   dwLineID <br>) <br>{ <br>    MMRESULT                    mmr; <br>    PMACONTROLINSTANCE_FADER    pmaci_fader; <br>    LPMACONTROLINSTANCE         pmaci; <br>    LPMIXERLINE                 pmxl; <br>    MIXERLINE                   mxl; <br>    BOOL                        fSource; <br>    BOOL                        fActive; <br>    BOOL                        fDisconnected; <br>    HWND                        htxt; <br> <br> <br>    // <br>    // <br>    // <br>    pmaci_fader = (PMACONTROLINSTANCE_FADER)(UINT)GetWindowLong(hwnd, DWL_USER); <br>    pmaci       = pmaci_fader-&gt;pmaci; <br>    pmxl        = pmaci-&gt;pmxl; <br> <br>    if (pmxl-&gt;dwLineID != dwLineID) <br>    { <br>        DPF(0, "!MixAppLineChangeFader: why am i getting notifications for some other line??"); <br> <br>        // <br>        //  this would be a bug in this app... keep from bombing though <br>        //  until i fix it. <br>        // <br>        dwLineID = pmxl-&gt;dwLineID; <br>    } <br> <br>    // <br>    //  get the current state of the line that changed.. this is actually <br>    //  silly that you have to do this just to determine if the line went <br>    //  [in]active. sigh.. <br>    // <br>    mxl.cbStruct      = sizeof(mxl); <br>    mxl.dwLineID      = dwLineID; <br> <br>    mmr = mixerGetLineInfo((HMIXEROBJ)ghmx, &amp;mxl, MIXER_GETLINEINFOF_LINEID); <br>    if (MMSYSERR_NOERROR != mmr) <br>    { <br>        AppMsgBox(hwnd, MB_OK | MB_ICONEXCLAMATION, <br>                  "mixerGetLineInfo(lineid=%.08lXh) failed on hmx=%.04Xh, mmr=%u!", <br>                  dwLineID, ghmx, mmr); <br> <br>        return (FALSE); <br>    } <br> <br>    fSource       = (0 != (MIXERLINE_LINEF_SOURCE &amp; mxl.fdwLine)); <br>    fActive       = (0 != (MIXERLINE_LINEF_ACTIVE &amp; mxl.fdwLine)); <br>    fDisconnected = (0 != (MIXERLINE_LINEF_DISCONNECTED &amp; mxl.fdwLine)); <br> <br> <br>    htxt = GetDlgItem(hwnd, IDD_MACONTROL_TXT_LINEINFO); <br>    AppSetWindowText(htxt, "(%s), '%s', %s, %s", <br>                     fSource ? (LPSTR)"src" : (LPSTR)"DST", <br>                     (LPSTR)mxl.szShortName, <br>                     fActive ? (LPSTR)"ACTIVE" : (LPSTR)"inactive", <br>                     fDisconnected ? (LPSTR)"DISCONNECTED" : (LPSTR)"connected"); <br> <br>    return (fActive); <br>} // MixAppLineChangeFader() <br> <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL MixAppInitDialogFader <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: <br>// <br>//      HWND hwndFocus: <br>// <br>//      LPARAM lParam: <br>// <br>//  Return (BOOL): <br>// <br>//  History: <br>//      09/22/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL FNLOCAL MixAppInitDialogFader <br>( <br>    HWND                    hwnd, <br>    HWND                    hwndFocus, <br>    LPARAM                  lParam <br>) <br>{ <br>    #define FSB_DEF_STYLE   (WS_VISIBLE | WS_CHILD | SBS_VERT | WS_TABSTOP) <br> <br>    static TCHAR        szScrollBar[] = TEXT("scrollbar"); <br>    static TCHAR        szTitle[]     = TEXT("Fader Class: '%s'"); <br> <br>    TCHAR                       szControlType[64]; <br>    LPMACONTROLINSTANCE         pmaci; <br>    PMACONTROLINSTANCE_FADER    pmaci_fader; <br> <br>    LPMIXERLINE                 pmxl; <br>    LPMIXERCONTROL              pmxctrl; <br> <br>    HWND                        htxt; <br>    UINT                        u; <br>    UINT                        v; <br>    HWND                        hsb; <br>    RECT                        rcM; <br>    RECT                        rcU; <br>    int                         cxvsb; <br>    UINT                        cb; <br>    UINT                        cChannels; <br>    UINT                        cMultipleItems; <br>    UINT                        uIndex; <br>    int                         nRange; <br>    int                         nPageInc; <br> <br> <br>    // <br>    // <br>    // <br>    pmaci = (LPMACONTROLINSTANCE)lParam; <br>    if (NULL == pmaci) <br>    { <br>        DPF(0, "!MixAppInitDialogFader: pmaci passed in lParam is NULL!?!"); <br>        return (FALSE); <br>    } <br> <br>    pmxl    = pmaci-&gt;pmxl; <br>    pmxctrl = pmaci-&gt;pmxctrl; <br> <br>    if (!MixAppGetControlTypeName(pmxctrl, szControlType)) <br>    { <br>        return (FALSE); <br>    } <br> <br>    // <br>    // <br>    // <br>    switch (pmxctrl-&gt;dwControlType) <br>    { <br>        case MIXERCONTROL_CONTROLTYPE_FADER: <br>        case MIXERCONTROL_CONTROLTYPE_VOLUME: <br>        case MIXERCONTROL_CONTROLTYPE_BASS: <br>        case MIXERCONTROL_CONTROLTYPE_TREBLE: <br>        case MIXERCONTROL_CONTROLTYPE_EQUALIZER: <br>            break; <br> <br>        default: <br>            DPF(0, "!MixAppInitDialogFader: pmxctrl-&gt;dwControlType=%.08lXh not valid fader!", pmxctrl-&gt;dwControlType); <br>            return (FALSE); <br>    } <br> <br> <br> <br> <br>    // <br>    // <br>    // <br>    AppSetWindowText(hwnd, szTitle, (LPTSTR)szControlType); <br>    SetDlgItemText(hwnd, IDD_MACONTROL_TXT_SHORT_NAME, pmxctrl-&gt;szShortName); <br>    SetDlgItemText(hwnd, IDD_MACONTROL_TXT_LONG_NAME,  pmxctrl-&gt;szName); <br> <br>    htxt = GetDlgItem(hwnd, IDD_MACONTROL_TXT_BOUNDS); <br>    AppSetWindowText(htxt, "dwMinimum=%lu, dwMaximum=%lu", <br>                     pmxctrl-&gt;Bounds.dwMinimum, <br>                     pmxctrl-&gt;Bounds.dwMaximum); <br> <br>    htxt = GetDlgItem(hwnd, IDD_MACONTROL_TXT_METRICS); <br>    AppSetWindowText(htxt, "cSteps=%lu", <br>                     pmxctrl-&gt;Metrics.cSteps); <br> <br> <br> <br>    // <br>    // <br>    // <br>    cChannels = (UINT)pmxl-&gt;cChannels; <br>    if (MIXERCONTROL_CONTROLF_UNIFORM &amp; pmxctrl-&gt;fdwControl) <br>        cChannels = 1; <br> <br>    cMultipleItems = 1; <br>    if (MIXERCONTROL_CONTROLF_MULTIPLE &amp; pmxctrl-&gt;fdwControl) <br>        cMultipleItems = (UINT)pmxctrl-&gt;cMultipleItems; <br> <br>    cb  = sizeof(*pmaci_fader); <br>    cb += cChannels * cMultipleItems * sizeof(pmaci_fader-&gt;pmxcd_u[0]); <br>    pmaci_fader = (PMACONTROLINSTANCE_FADER)LocalAlloc(LPTR, cb); <br>    if (NULL == pmaci_fader) <br>    { <br>        DPF(0, "!MixAppInitDialogFader: failed trying to alloc %u bytes for control instance!", cb); <br>        return (FALSE); <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    SetWindowLong(hwnd, DWL_USER, (LPARAM)(UINT)pmaci_fader); <br> <br>    nRange   = (int)min(32767, pmxctrl-&gt;Metrics.cSteps - 1); <br>    nPageInc = nRange / 10; <br>    if (0 == nPageInc) <br>        nPageInc = 1; <br> <br>    pmaci_fader-&gt;pmaci    = pmaci; <br>    pmaci_fader-&gt;nRange   = nRange; <br>    pmaci_fader-&gt;nPageInc = nPageInc; <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    cxvsb = GetSystemMetrics(SM_CXVSCROLL); <br> <br>    hsb = GetDlgItem(hwnd, IDD_MACONTROL_GRP_MULTICHANNEL); <br>    GetWindowRect(hsb, &amp;rcM); <br> <br>    InflateRect(&amp;rcM, -10, -20); <br>    ScreenToClient(hwnd, (LPPOINT)&amp;rcM.left); <br>    ScreenToClient(hwnd, (LPPOINT)&amp;rcM.right); <br> <br>    rcM.right = rcM.left + cxvsb; <br> <br>    for (u = 0; u &lt; cChannels; u++) <br>    { <br>        for (v = 0; v &lt; cMultipleItems; v++) <br>        { <br>            uIndex = (u * cMultipleItems) + v; <br> <br>            hsb = CreateWindow(szScrollBar, gszNull, FSB_DEF_STYLE, <br>                               rcM.left, rcM.top, <br>                               rcM.right - rcM.left, <br>                               rcM.bottom - rcM.top, <br>                               hwnd, (HMENU)(IDD_MACONTROL_MULTICHANNEL_BASE + uIndex), <br>                               ghinst, NULL); <br> <br>            SetScrollRange(hsb, SB_CTL, 0, nRange, FALSE); <br> <br>            rcM.left  += cxvsb + 4; <br>            rcM.right += cxvsb + 4; <br>        } <br> <br>        // <br>        //  add more separation between channels <br>        // <br>        rcM.left  += cxvsb; <br>        rcM.right += cxvsb; <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    // <br>    hsb = GetDlgItem(hwnd, IDD_MACONTROL_GRP_UNIFORM); <br>    GetWindowRect(hsb, &amp;rcU); <br> <br>    InflateRect(&amp;rcU, -10, -20); <br>    ScreenToClient(hwnd, (LPPOINT)&amp;rcU.left); <br>    ScreenToClient(hwnd, (LPPOINT)&amp;rcU.right); <br> <br>    rcU.right = rcU.left + cxvsb; <br> <br>    for (v = 0; v &lt; cMultipleItems; v++) <br>    { <br>        hsb = CreateWindow(szScrollBar, gszNull, FSB_DEF_STYLE, <br>                            rcU.left, rcU.top, <br>                            rcU.right - rcU.left, <br>                            rcU.bottom - rcU.top, <br>                            hwnd, (HMENU)(IDD_MACONTROL_UNIFORM_BASE + v), <br>                            ghinst, NULL); <br> <br>        SetScrollRange(hsb, SB_CTL, 0, nRange, FALSE); <br> <br>        rcU.left  += cxvsb + 4; <br>        rcU.right += cxvsb + 4; <br>    } <br> <br> <br>    // <br>    // <br>    // <br>    SendMessage(hwnd, <br>                MM_MIXM_LINE_CHANGE, <br>                (WPARAM)pmaci-&gt;hmx, <br>                pmxl-&gt;dwLineID); <br> <br>    SendMessage(hwnd, <br>                MM_MIXM_CONTROL_CHANGE, <br>                (WPARAM)pmaci-&gt;hmx, <br>                pmxctrl-&gt;dwControlID); <br> <br>    return (TRUE); <br>} // MixAppInitDialogFader() <br> <br> <br>//==========================================================================; <br>// <br>// <br>// <br>// <br>//==========================================================================; <br> <br>//--------------------------------------------------------------------------; <br>// <br>//  BOOL MixAppDlgProcControlFader <br>// <br>//  Description: <br>// <br>// <br>//  Arguments: <br>//      HWND hwnd: <br>// <br>//      UINT uMsg: <br>// <br>//      WPARAM wParam: <br>// <br>//      LPARAM lParam: <br>// <br>//  Return (BOOL): <br>// <br>//  History: <br>//      07/22/93 <br>// <br>//--------------------------------------------------------------------------; <br> <br>BOOL CALLBACK MixAppDlgProcControlFader <br>( <br>    HWND                    hwnd, <br>    UINT                    uMsg, <br>    WPARAM                  wParam, <br>    LPARAM                  lParam <br>) <br>{ <br>    LRESULT             lr; <br>    HLOCAL              hl; <br>    UINT                uId; <br> <br> <br>    // <br>    // <br>    // <br>    switch (uMsg) <br>    { <br>        case WM_INITDIALOG: <br>            DPF(0, "WM_INITDIALOG"); <br>            lr = HANDLE_WM_INITDIALOG(hwnd, wParam, lParam, MixAppInitDialogFader); <br>            if (FALSE == lr) <br>            { <br>                EndDialog(hwnd, FALSE); <br>            } <br>            else <br>            { <br>                ghdlgControl = hwnd; <br>            } <br>            return (TRUE); <br> <br> <br>        case MM_MIXM_LINE_CHANGE: <br>            DPF(0, "MM_MIXM_LINE_CHANGE"); <br>            MixAppLineChangeFader(hwnd, (HMIXER)wParam, lParam); <br>            return (TRUE); <br> <br>        case MM_MIXM_CONTROL_CHANGE: <br>            DPF(0, "MM_MIXM_CONTROL_CHANGE"); <br>            MixAppControlChangeFader(hwnd, (HMIXER)wParam, lParam); <br>            DPF(0, "done..."); <br>            return (TRUE); <br> <br> <br>        case WM_VSCROLL: <br>            DPF(0,"WM_SCROLL"); <br>            HANDLE_WM_VSCROLL(hwnd, wParam, lParam, MixAppControlSetFader); <br>            return (TRUE); <br> <br> <br>        case WM_COMMAND: <br>            DPF(0, "WM_COMMAND"); <br>            uId = GET_WM_COMMAND_ID(wParam, lParam); <br>            switch (uId) <br>            { <br>                case IDCANCEL: <br>                case IDOK: <br>                    hl = (HLOCAL)(UINT)GetWindowLong(hwnd, DWL_USER); <br>                    LocalFree(hl); <br> <br>                    EndDialog(hwnd, TRUE); <br>                    ghdlgControl = NULL; <br>                    break; <br>            } <br>            break; <br>    } <br> <br>    return (FALSE); <br>} // MixAppDlgProcControlFader() </code></pre>
<p>&nbsp;</p></body>
</HTML>

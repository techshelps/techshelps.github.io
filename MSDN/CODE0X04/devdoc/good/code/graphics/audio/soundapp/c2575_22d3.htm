<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SOUNDAPP.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context2577"></a>SOUNDAPP.C</h2>
<pre><code>/************************************************************************** <br> * <br> *SOUNDAPP: <br> * <br> *A sample app showing the sndPlaySound API <br> * <br> ************************************************************************** <br> * <br> *  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY <br> *  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE <br> *  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR <br> *  PURPOSE. <br> * <br> *  Copyright 1994 - 1998 Microsoft Corporation.  All Rights Reserved. <br> * <br> **************************************************************************/ <br>#pragma warning(disable: 4001) <br>#define __SOUNDAPP_C <br>#define Unused(var)(var=var) <br> <br>// header dependancies  <br>#include &lt;windows.h&gt; <br>#include &lt;mmsystem.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include "resource.h" <br> <br>//message cracker prototypes  <br>void SoundApp_OnActivate(HWND hwnd, UINT state, HWND hwndActDeact, BOOL fMinimized); <br>void SoundApp_OnDestroy(HWND hwnd); <br>void SoundApp_OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify); <br>BOOL About_OnInitDialog(HWND hwnd, HWND hwndFocus, LPARAM lParam); <br>BOOL About_OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify); <br> <br>//function prototypes  <br>long PASCAL WndProc (HWND, UINT, UINT, LONG); <br>BOOL CALLBACK AboutDlgProc(HWND hdlg, UINT mMsg, WPARAM wParam, LPARAM lParam); <br>LRESULT AboutDlgProc2(HWND hdlg, UINT mMsg,WPARAM wParam, LPARAM lParam); <br> <br>//global variables  <br>HANDLE hInst; <br>BOOL bRecursing = FALSE; <br> <br>//////////////////////////////////////////////////////////////////////////////// <br>//WinMain <br>// <br>//Purpose: The main procedure <br>// <br>//Parameters: HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam,  <br>//int nCmdShow <br>// <br>//Returns: int <br>//////////////////////////////////////////////////////////////////////////////////  <br>int PASCAL WinMain ( <br>HINSTANCE hInstance,  <br>HINSTANCE hPrevInstance, <br>LPSTR lpszCmdParam,  <br>int nCmdShow) <br> <br>{ <br>static char szAppName[] = "SoundApp"; <br>HWND        hwnd; <br>MSG         msg; <br>WNDCLASS    wndclass; <br> <br>Unused(lpszCmdParam); <br> <br>if (!hPrevInstance) <br>{ <br>wndclass.style         = CS_HREDRAW | CS_VREDRAW; <br>wndclass.lpfnWndProc   = WndProc; <br>wndclass.cbClsExtra    = 0 ; <br>wndclass.cbWndExtra    = DLGWINDOWEXTRA; <br>wndclass.hInstance     = hInstance; <br>wndclass.hIcon         = LoadIcon (hInstance, "IDI_SOUNDAPP"); <br>wndclass.hCursor       = LoadCursor (NULL, IDI_APPLICATION); <br>wndclass.hbrBackground = GetStockObject(WHITE_BRUSH); <br>wndclass.lpszMenuName  = NULL; <br>wndclass.lpszClassName = szAppName; <br> <br>RegisterClass (&amp;wndclass); <br>} <br> <br>hInst = hInstance; <br>hwnd = CreateDialog(hInstance, "SoundApp", 0, NULL); <br>CreateDialog(hInstance, "ID_SOUNDAPP_ABOUT", hwnd, NULL); <br>ShowWindow (hwnd, nCmdShow); <br> <br>while (GetMessage (&amp;msg, NULL, 0, 0)) <br>{ <br>TranslateMessage (&amp;msg); <br>DispatchMessage (&amp;msg); <br>} <br>return msg.wParam; <br>} <br> <br>///////////////////////////////////////////////////////////////////////// <br>//WndProc <br>// <br>//Purpose: The window procedure <br>// <br>//Parameters: HWND hwnd, UINT message, UINT wParam, LONG lParam <br>// <br>//Returns: long <br>///////////////////////////////////////////////////////////////////////////   <br>long PASCAL WndProc ( <br>HWND hwnd,  <br>UINT message,  <br>UINT wParam,  <br>LONG lParam) <br> <br>{ <br>switch (message) <br>{ <br>HANDLE_MSG(hwnd, WM_DESTROY, SoundApp_OnDestroy); <br>HANDLE_MSG(hwnd, WM_ACTIVATE, SoundApp_OnActivate); <br>HANDLE_MSG(hwnd, WM_COMMAND, SoundApp_OnCommand); <br>default: <br>return DefWindowProc (hwnd, message, wParam, lParam); <br>} <br>} <br> <br>////////////////////////////////////////////////////////////////////// <br>//SoundApp_OnActivate <br>// <br>//Purpose: processes a WM_ACTIVATE message <br>//Initializes controls in the dialog the first time it is activated: <br>//Checks Synchronous, disables Loop and Stop, and gets default sound <br>//from win.ini or registry.  <br>// <br>//Parameters: HWND hwnd, UINT state, HWND hwndActDeact, BOOL fMinimized <br>// <br>//Returns: void <br>////////////////////////////////////////////////////////////////////// <br>void SoundApp_OnActivate( <br>HWND hwnd, <br>UINT state, <br>HWND hwndActDeact, <br>BOOL fMinimized) <br> <br>{ <br>static BOOL fFirstTime = TRUE; <br>HMENU hMenu; <br>char SoundBuff[256]; <br>int i=0; <br> <br>if (fFirstTime) <br>{ <br>hMenu = GetMenu(hwnd); <br>SendMessage(GetDlgItem(hwnd, IDC_SYNC), BM_SETCHECK, 1, 0); <br>CheckMenuItem(hMenu, ID_OPTIONS_SYNC,MF_CHECKED); <br>EnableWindow(GetDlgItem(hwnd, IDC_LOOP), FALSE); <br>EnableMenuItem(hMenu, ID_OPTIONS_LOOP, MF_DISABLED | MF_GRAYED); <br>EnableWindow(GetDlgItem(hwnd, IDC_BUTTON_STOP), FALSE); <br>GetProfileString("Sounds", "SystemDefault", ",Default", SoundBuff, 256); <br>//get rid of everything after the filename <br>while(SoundBuff[i] != ',' &amp;&amp; i&lt;255) <br>{ <br>i++; <br>} <br>SoundBuff[i] = 0; <br>SendMessage(GetDlgItem(hwnd, IDC_EDIT_FILE), WM_SETTEXT, 0, (LPARAM)SoundBuff); <br>fFirstTime = FALSE; <br>}  <br>} <br> <br> <br>////////////////////////////////////////////////////////////////////// <br>//SoundApp_OnDestroy <br>// <br>//Purpose: processes a WM_DESTROY message <br>// <br>//Parameters: handle to the main window <br>// <br>//Returns: void   <br>////////////////////////////////////////////////////////////////////// <br>void SoundApp_OnDestroy(HWND hwnd) <br>{ <br>PostQuitMessage (0); <br>} <br> <br> <br>/////////////////////////////////////////////////////////////////////// <br>//SoundApp_OnCommand <br>// <br>//Purpose: processes a WM_COMMAND message <br>//details below for each command. <br>// <br>//Parameters: HWND hwnd, int id, HWND hwndCtl, UINT codeNotify <br>// <br>//Returns: void   <br>/////////////////////////////////////////////////////////////////////// <br>void SoundApp_OnCommand( <br>HWND hwnd, <br>int id, <br>HWND hwndCtl, <br>UINT codeNotify) <br> <br>{ <br>static LPCTSTR lpszSoundName = NULL;//name of the sound to play <br>static UINT uFlags = SND_SYNC;//option flags for sndPlaySound <br>HWND hButton; <br>HMENU hMenu; <br>LRESULT nCheckState; <br>char SoundBuff[256]; <br>static fFirstTime = TRUE; <br> <br>OPENFILENAME ofn;       // common dialog box structure  <br>char szDirName[256];    // directory string  <br>staticchar szFile[256];       // filename string  <br>char szFileTitle[256];  // file-title string  <br>char szFilter[256];     // filter string  <br>char chReplace;         // string separator for szFilter  <br>int i, cbString;        // integer count variables  <br>char szSelectFile[256];// title of select file dialog  <br> <br>//first get default sound name from win.ini or registry  <br>if (fFirstTime) <br>{ <br>GetProfileString("Sounds", "SystemDefault", ",Default", SoundBuff, 256); <br>//get rid of everything after the filename in the ini string <br>i=0; <br>while(SoundBuff[i] != ',' &amp;&amp; i&lt;255) <br>{ <br>i++; <br>} <br>SoundBuff[i] = 0; <br>if (i == 0) <br>{ <br>lpszSoundName = NULL; <br>} <br>else <br>{ <br>lpszSoundName = SoundBuff; <br>}  <br>fFirstTime = FALSE; <br>} <br>hMenu = GetMenu(hwnd); <br> <br>//if File|Exit is selected, quit <br>if(id == ID_FILE_EXIT) <br>{ <br>PostQuitMessage (0); <br>} <br> <br>//if Play button is clicked, play sound <br>if(id == IDC_BUTTON_PLAY) <br>{    <br>sndPlaySound(lpszSoundName, uFlags); <br>} <br> <br>//if Stop button is pushed, stop playing sound <br>if(id == IDC_BUTTON_STOP) <br>{ <br>sndPlaySound(NULL, SND_SYNC); <br>} <br> <br>//if File|Select File or the Select File button is selected, show the <br>//file open dialog and get the name of the file to play <br>if(id == ID_FILE_SELECT || id == IDC_BUTTON_OPEN) <br>{ <br>//Set up structure for file dialog <br>GetWindowsDirectory(szDirName, sizeof(szDirName)); <br>szFile[0] = '\0'; <br>LoadString(NULL, IDS_SELECT_FILE, szSelectFile, sizeof(szSelectFile)); <br>cbString = LoadString(NULL, IDS_FILTERSTRING, szFilter, sizeof(szFilter)); <br>chReplace = szFilter[cbString - 1]; <br>for (i = 0; szFilter[i] != '\0'; i++) <br>{ <br>if (szFilter[i] == chReplace) <br>szFilter[i] = '\0'; <br>} <br> <br>ofn.lStructSize = sizeof(OPENFILENAME); <br>ofn.hwndOwner = hwnd; <br>ofn.lpstrFilter = szFilter; <br>ofn.lpstrCustomFilter = NULL; <br>ofn.nFilterIndex = 1; <br>ofn.lpstrFile = szFile; <br>ofn.nMaxFile = sizeof(szFile); <br>ofn.lpstrFileTitle = szFileTitle; <br>ofn.nMaxFileTitle = sizeof(szFileTitle); <br>ofn.lpstrInitialDir = szDirName; <br>ofn.lpstrTitle = szSelectFile; <br>ofn.lpstrDefExt = NULL; <br>ofn.Flags = OFN_SHAREAWARE | OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST; <br> <br>//Put up Open File dialog to get filename   <br>if (GetOpenFileName(&amp;ofn))  <br>{ <br>lpszSoundName = ofn.lpstrFile; <br>hButton = GetDlgItem(hwnd, IDC_EDIT_FILE); <br>SendMessage(hButton, WM_SETTEXT, 0, (LPARAM)ofn.lpstrFileTitle); <br>}    <br>} <br> <br>//if Help|About is selected, show the About SoundApp dialog <br>if(id == ID_HELP_ABOUT) <br>{ <br>FARPROC lpfnAbout; <br> <br>lpfnAbout = MakeProcInstance((FARPROC)AboutDlgProc, hInst); <br>DialogBox(hInst, MAKEINTRESOURCE(IDD_DIALOG_ABOUT), hwnd, (DLGPROC)lpfnAbout); <br>FreeProcInstance(lpfnAbout); <br>} <br> <br>//if Options|Sync or the Sync button is selected, set checks and flags <br>if(id == IDC_SYNC || id == ID_OPTIONS_SYNC) <br>{ <br>hButton = GetDlgItem(hwnd, IDC_SYNC); <br>nCheckState = SendMessage(hButton, BM_GETCHECK, 0, 0); <br>//if Synchronous ws unchecked <br>if (nCheckState == 0) <br>{ <br>//check Synchronous checkbox, uncheck Asynchronous checkbox, <br>//check Synchronous menu, uncheck Asynchronous menu, <br>//uncheck Loop checkbox and menu, <br>//disable Loop checkbox and menu, <br>//disable Stop button, and set sndPlaySound flags.  <br>SendMessage(hButton, BM_SETCHECK, 1, 0);    <br>SendMessage(GetDlgItem(hwnd, IDC_ASYNC),BM_SETCHECK, 0, 0); <br>CheckMenuItem(hMenu, ID_OPTIONS_SYNC,MF_CHECKED);    <br>CheckMenuItem(hMenu, ID_OPTIONS_ASYNC, MF_UNCHECKED);  <br>SendMessage(GetDlgItem(hwnd, IDC_LOOP), BM_SETCHECK, 0, 0); <br>CheckMenuItem(hMenu, ID_OPTIONS_LOOP,MF_UNCHECKED);    <br>EnableWindow(GetDlgItem(hwnd, IDC_LOOP), FALSE); <br>EnableMenuItem(hMenu, ID_OPTIONS_LOOP, MF_DISABLED | MF_GRAYED); <br>EnableWindow(GetDlgItem(hwnd, IDC_BUTTON_STOP), FALSE); <br>uFlags = uFlags &amp; ~SND_ASYNC &amp; ~SND_LOOP; <br>} <br>} <br> <br>//if Options|Async or the Async button is selected, set checks and flags <br>if(id == IDC_ASYNC || id == ID_OPTIONS_ASYNC) <br>{ <br>hButton = GetDlgItem(hwnd, IDC_ASYNC); <br>nCheckState = SendMessage(hButton, BM_GETCHECK, 0, 0); <br>//if Asynchronous was unchecked <br>if (nCheckState == 0) <br>{ <br>//check Asynchronous checkbox, uncheck Synchronous checkbox, <br>//check Asynchronous menu, uncheck Synchronous menu, <br>//enable Loop checkbox and menu, <br>//enable Stop button, and set sndPlaySound flags.  <br>SendMessage(hButton, BM_SETCHECK, 1, 0); <br>SendMessage(GetDlgItem(hwnd, IDC_SYNC),BM_SETCHECK, 0, 0); <br>CheckMenuItem(hMenu, ID_OPTIONS_ASYNC,MF_CHECKED);  <br>CheckMenuItem(hMenu, ID_OPTIONS_SYNC, MF_UNCHECKED);  <br>EnableWindow(GetDlgItem(hwnd, IDC_LOOP), TRUE); <br>EnableMenuItem(hMenu, ID_OPTIONS_LOOP, MF_ENABLED);  <br>EnableWindow(GetDlgItem(hwnd, IDC_BUTTON_STOP), TRUE); <br>uFlags = uFlags | SND_ASYNC; <br>} <br>} <br> <br>//if Options|NoDefault or the NoDefault button is selected, set checks and flags <br>if(id == ID_OPTIONS_NODEFAULT || id == IDC_NODEFAULT) <br>{  <br>hButton = GetDlgItem(hwnd, IDC_NODEFAULT); <br>nCheckState = SendMessage(hButton, BM_GETCHECK, 0, 0); <br>//if NoDefault was unchecked <br>if (nCheckState == 0) <br>{ <br>//check NoDefault checkbox and menu, and set sndPlaySound flags.  <br>SendMessage(hButton, BM_SETCHECK, 1, 0); <br>CheckMenuItem(hMenu, ID_OPTIONS_NODEFAULT, MF_CHECKED);  <br>uFlags = uFlags | SND_NODEFAULT; <br>} <br>else <br>{ <br>//uncheck NoDefault checkbox and menu, and set sndPlaySound flags.  <br>SendMessage(hButton, BM_SETCHECK, 0, 0); <br>CheckMenuItem(hMenu, ID_OPTIONS_NODEFAULT, MF_UNCHECKED);  <br>uFlags = uFlags&amp; ~SND_NODEFAULT; <br>} <br>} <br> <br>//if Options|Loop or the Loop button is selected, set checks and flags <br>if(id == ID_OPTIONS_LOOP ||id == IDC_LOOP) <br>{ <br>hButton = GetDlgItem(hwnd, IDC_LOOP); <br>nCheckState = SendMessage(hButton, BM_GETCHECK, 0, 0); <br>//if Loop was unchecked <br>if (nCheckState == 0) <br>{ <br>//check Loop checkbox and menu, and set sndPlaySound flags. <br>SendMessage(hButton, BM_SETCHECK, 1, 0); <br>CheckMenuItem(hMenu, ID_OPTIONS_LOOP,MF_CHECKED);    <br>uFlags = uFlags | SND_LOOP; <br>} <br>else <br>{ <br>//uncheck Loop checkbox and menu, and set sndPlaySound flags.  <br>SendMessage(hButton, BM_SETCHECK, 0, 0); <br>CheckMenuItem(hMenu, ID_OPTIONS_LOOP,MF_UNCHECKED);   <br>uFlags = uFlags&amp; ~SND_LOOP; <br>} <br>} <br> <br>//if Options|NoStop or the NoStop button is selected, set checks and flags <br>if(id == ID_OPTIONS_NOSTOP || id == IDC_NOSTOP) <br>{ <br>hButton = GetDlgItem(hwnd, IDC_NOSTOP); <br>nCheckState = SendMessage(hButton, BM_GETCHECK, 0, 0); <br>//if NoStop was unchecked <br>if (nCheckState == 0) <br>{ <br>//check NoStop checkbox and menu, and set sndPlaySound flags.  <br>SendMessage(hButton, BM_SETCHECK, 1, 0); <br>CheckMenuItem(hMenu, ID_OPTIONS_NOSTOP,MF_CHECKED);    <br>uFlags = uFlags | SND_NOSTOP; <br>} <br>else <br>{ <br>//uncheck NoStop checkbox and menu, and set sndPlaySound flags. <br>SendMessage(hButton, BM_SETCHECK, 0, 0); <br>CheckMenuItem(hMenu, ID_OPTIONS_NOSTOP,MF_UNCHECKED);   <br>uFlags = uFlags&amp; ~SND_NOSTOP; <br>} <br>} <br>}    <br>   <br>///////////////////////////////////////////////////////////////////////////// <br>//AboutDlgProc <br>// <br>//Purpose: Calls AboutDlgProc2 <br>//This makes it possible to use messge crackers in the dialog procedure <br>// <br>//Parameters:HWND hdlg, UINT mMsg, WPARAM wParam, LPARAM lParam <br>// <br>//Returns: BOOL <br>/////////////////////////////////////////////////////////////////////////////// <br>BOOL CALLBACK AboutDlgProc( <br>HWND hdlg, <br>UINT mMsg, <br>WPARAM wParam, <br>LPARAM lParam) <br> <br>{ <br>CheckDefDlgRecursion(&amp;bRecursing); <br>return(SetDlgMsgResult(hdlg, mMsg, AboutDlgProc2(hdlg, mMsg, wParam, lParam))); <br>} <br> <br>///////////////////////////////////////////////////////////////////////////// <br>//AboutDlgProc2 <br>// <br>//Purpose: handle messages to the About dialog <br>// <br>//Parameters: HWND hdlg, UINT mMsg, WPARAM wParam, LPARAM lParam <br>// <br>//Returns: LRESULT <br>/////////////////////////////////////////////////////////////////////////////// <br>LRESULT AboutDlgProc2( <br>HWND hdlg, <br>UINT mMsg, <br>WPARAM wParam, <br>LPARAM lParam) <br> <br>    { <br>switch(mMsg) <br>{ <br>HANDLE_MSG(hdlg, WM_INITDIALOG, About_OnInitDialog); <br>HANDLE_MSG(hdlg, WM_COMMAND, About_OnCommand); <br>default: <br>return(DefDlgProcEx(hdlg, mMsg, wParam, lParam, &amp;bRecursing)); <br>} <br>} <br> <br>///////////////////////////////////////////////////////////////////////// <br>//About_OnInitDialog <br>// <br>//Purpose: Initialize About dialog. Set focus to the OK button. <br>// <br>//Parameters: HWND hdlg, HWND hwndFocus, LPARAM lParam <br>// <br>//Returns: TRUE <br>////////////////////////////////////////////////////////////////////// <br>BOOL About_OnInitDialog(HWND hdlg, HWND hwndFocus, LPARAM lParam) <br>{ <br>SetFocus(GetDlgItem(hdlg, IDOK)); <br>return TRUE; <br>} <br> <br>///////////////////////////////////////////////////////////////////////// <br>//About_OnCommand <br>// <br>//Purpose: Closes the About dialog when the OK button is clicked <br>// <br>//Parameters: HWND hdlg, int id, HWND hwndCtl, UINT codeNotify <br>// <br>//Returns: BOOL <br>////////////////////////////////////////////////////////////////////// <br>BOOL About_OnCommand(HWND hdlg, int id, HWND hwndCtl, UINT codeNotify) <br>{ <br>if(id == IDOK) <br>{ <br>EndDialog(hdlg, TRUE); <br>return TRUE; <br>} <br>return FALSE; <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIBINFO.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3503"></a>DIBINFO.C</h2>
<pre><code>//THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>//THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright  1994-1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//  FILE: <br>//    DIBINFO.C <br>// <br>//  PURPOSE: <br>// <br>// <br>//  PLATFORMS: <br>//    Windows 95, Windows NT <br>// <br>//  SPECIAL INSTRUCTIONS: N/A <br>// <br> <br>// Windows Header Files: <br>#pragma warning(disable:4001)   // Single-line comment warnings <br>#pragma warning(disable:4115)   // Named type definition in parentheses <br>#pragma warning(disable:4201)   // Nameless struct/union warning <br>#pragma warning(disable:4214)   // Bit field types other than int warnings <br>#pragma warning(disable:4514)   // Unreferenced inline function has been removed <br> <br>// Windows Header Files: <br>#include &lt;Windows.h&gt; <br>#include &lt;WindowsX.h&gt; <br>#include "icm.h" <br> <br>// Restore the warnings--leave the single-line comment warning OFF <br>#pragma warning(default:4115)   // Named type definition in parentheses <br>#pragma warning(default:4201)   // Nameless struct/union warning <br>#pragma warning(default:4214)   // Bit field types other than int warnings <br> <br>// C RunTime Header Files <br>#include &lt;tchar.h&gt; <br> <br>// Local Header Files <br>#include "icmview.h" <br>#include "dibinfo.h" <br>#include "dibs.h" <br>#include "regutil.h" <br>#include "print.h" <br>#include "debug.h" <br> <br>// local definitions <br>#ifndef ICM_DONE_OUTSIDEDC <br>    #define ICM_DONE_OUTSIDEDC  4 <br>#endif <br> <br>// default settings <br> <br>// external functions <br> <br>// external data <br> <br>// public data <br> <br>// private data <br> <br>// public functions <br> <br>// private functions <br> <br>////////////////////////////////////////////////////////////////////////// <br>//  Function:  fReadDIBInfo <br>// <br>//  Description: <br>//    Will read a file in DIB format and return a global HANDLE <br>//    to it's BITMAPINFO.  This function will work with both <br>//    "old" (BITMAPCOREHEADER) and "new" (BITMAPINFOHEADER) <br>//    bitmap formats, but will always return a "new" BITMAPINFO <br>// <br>//  Parameters: <br>//    LPTSTR     Pointer to string containing the filename of the image. <br>//    LPDIBINFO Pointer to DIBINFO structure. <br>// <br>//  Returns: <br>//    BOOL <br>// <br>//  Comments: <br>// <br>// <br>////////////////////////////////////////////////////////////////////////// <br>BOOL fReadDIBInfo(LPTSTR lpszFileName, LPDIBINFO lpDIBInfo) <br>{ <br>    // Local variables <br>    HANDLE                hDIBFile; <br>    HANDLE                hDIB = NULL; <br>    LPBITMAPINFOHEADER    lpBmpInfoHdr = NULL; <br> <br>    //  Initialize variables <br>    if ( (NULL == lpszFileName) || (NULL == lpDIBInfo) ) <br>    { <br>        DebugMsg(__TEXT("fReadDIBInfo:  NULL parameter.\r\n")); <br>        return FALSE; <br>    } <br> <br>    // Set the filename <br>    lpDIBInfo-&gt;lpszImageFileName = GlobalAlloc(GPTR,(lstrlen(lpszFileName)+1) * sizeof(TCHAR)); <br>    if (lpDIBInfo-&gt;lpszImageFileName) <br>    { <br>        _tcscpy(lpDIBInfo-&gt;lpszImageFileName, lpszFileName); <br>    } <br> <br>    // Open image file <br>    hDIBFile = CreateFile(lpszFileName, <br>                          GENERIC_READ, <br>                          FILE_SHARE_READ, <br>                          NULL, <br>                          OPEN_EXISTING, <br>                          FILE_ATTRIBUTE_NORMAL, <br>                          (HANDLE)NULL); <br> <br>    if (INVALID_HANDLE_VALUE == hDIBFile) <br>    { <br>        return FALSE; <br>    } <br> <br>    // Read DIB from file. <br>    hDIB = ReadDIBFromFile(hDIBFile); <br>    CloseHandle(hDIBFile); <br> <br>    // Make sure that DIB file read was successful. <br>    if (NULL == hDIB) <br>    { <br>        DebugMsg(__TEXT("fReadDIBInfo:  Failed to read DIB file.\r\n")); <br>        return FALSE; <br>    } <br> <br>    // Get pointer to DIB. <br>    lpBmpInfoHdr = (LPBITMAPINFOHEADER) GlobalLock(hDIB); <br>    if (NULL == lpBmpInfoHdr) <br>    { <br>        GlobalFree(hDIB); <br>        return FALSE; <br>    } <br> <br>    // Set values in DIBINFO structure <br>    if (sizeof(BITMAPCOREHEADER) == lpBmpInfoHdr-&gt;biSize) <br>    { <br>        LPBITMAPCOREHEADER  lpCoreHdr; <br> <br>        lpCoreHdr = (LPBITMAPCOREHEADER) lpBmpInfoHdr; <br>        lpDIBInfo-&gt;uiDIBWidth   = (DWORD) lpCoreHdr-&gt;bcWidth; <br>        lpDIBInfo-&gt;uiDIBHeight  = (DWORD) lpCoreHdr-&gt;bcHeight; <br>        lpDIBInfo-&gt;dwDIBBits = lpCoreHdr-&gt;bcBitCount; <br>    } <br>    else <br>    { <br>        lpDIBInfo-&gt;dwDIBBits    = (DWORD)lpBmpInfoHdr-&gt;biBitCount; <br>        lpDIBInfo-&gt;uiDIBWidth  = abs(lpBmpInfoHdr-&gt;biWidth); <br>        lpDIBInfo-&gt;uiDIBHeight = abs(lpBmpInfoHdr-&gt;biHeight); <br>    } <br> <br>    // Set bmFormat.  Since the app only supports RGB's, pixel depth is enough <br>    lpDIBInfo-&gt;bmFormat = (DWORD)-1; <br>    switch (lpDIBInfo-&gt;dwDIBBits) <br>    { <br>        case 1: <br>            //lpDIBInfo-&gt;bmFormat = BM_1GRAY; <br>            lpDIBInfo-&gt;bmFormat = 0; <br>            break; <br>        case 16: <br>            // Should either be 555 or 565 bitmap. <br>            // Check mask if BI_BITFILEDS. <br>            if ( (BI_BITFIELDS == lpBmpInfoHdr-&gt;biCompression) <br>                 &amp;&amp; <br>                 (0x7E0 == *((LPDWORD)(lpBmpInfoHdr + 1) +1)) <br>               ) <br>            { <br>                lpDIBInfo-&gt;bmFormat = BM_565RGB; <br>            } <br>            else <br>            { <br>                lpDIBInfo-&gt;bmFormat = BM_x555RGB; <br>            } <br>            break; <br>        case 24: <br>            lpDIBInfo-&gt;bmFormat = BM_RGBTRIPLETS;  // RGB Triplets -- most significant byte is R <br>            break; <br>        case 32: <br>            lpDIBInfo-&gt;bmFormat = BM_xRGBQUADS; <br>            break; <br>        case 4: <br>        case 8: <br>            lpDIBInfo-&gt;bmFormat = 0; <br>            break; <br>        default: <br>            DebugMsg(__TEXT("fReadDIBInfo : Unknown dwDIBBits value.\r\n")); <br>            break; <br>    } <br>    lpDIBInfo-&gt;hDIB = hDIB; <br>    lpDIBInfo-&gt;dwStretchBltMode = ICMV_STRETCH_DEFAULT; <br>    lpDIBInfo-&gt;bStretch = FALSE; <br>    lpDIBInfo-&gt;hPal = CreateDIBPalette(hDIB); <br> <br>    // Unlock bmp info. <br>    GlobalUnlock(hDIB); <br>    return TRUE; <br>}   // End of function fReadDIBInfo <br> <br> <br>// <br>// Functions for DIBINFO structure <br>// <br>/////////////////////////////////////////////////////////////////////// <br>// <br>// Function:  GetDIBInfoHandle <br>// <br>// Purpose:   Encapsulates the getting and setting of the <br>//            WW_DIB_HINFO value for a window since we are <br>//            storing a handle, and handles change from 16 <br>//            bits in WIN16 to 32 bits in WIN32. <br>// <br>// Parms:     hWnd     == Window to retrieve the DIBINFO handle from. <br>// <br>// Returns:   The previous value. <br>// <br>/////////////////////////////////////////////////////////////////////// <br> <br>HGLOBAL GetDIBInfoHandle (HWND hWnd) <br>{ <br>    return (HGLOBAL)GetWindowLong(hWnd, GWL_DIBINFO); <br>} <br> <br> <br>////////////////////////////////////////////////////////////////////////// <br>//  Function:  GetDIBInfoPtr <br>// <br>//  Description: <br>//    Gets a pointer to the DIBINFO structure of the window. <br>// <br>//  Parameters: <br>//    HWND    Handle to a window <br>// <br>//  Returns: <br>//    LPDIBINFO  Pointer to DIBINFO structure. <br>// <br>//  Comments: <br>// <br>// <br>////////////////////////////////////////////////////////////////////////// <br>LPDIBINFO GetDIBInfoPtr(HWND hWnd) <br>{ <br>    // Local variables <br>    HGLOBAL     hDIBInfo;       // Handle to DIBINFO structure <br>    LPDIBINFO   lpDIBInfo;      // Pointer to DIBINFO structure <br> <br>    //  Initialize variables <br>    lpDIBInfo = NULL; <br> <br>    hDIBInfo = GetDIBInfoHandle(hWnd); <br>    if (hDIBInfo != NULL) <br>    { <br>        lpDIBInfo = GlobalLock(hDIBInfo); <br>        //lpDIBInfo = GlobalLock(hDIBInfo); <br>    } <br> <br>    return(lpDIBInfo); <br>}   // End of function GetDIBInfoPtr <br> <br> <br>////////////////////////////////////////////////////////////////////////// <br>//  Function:  CreateDIBInfo <br>// <br>//  Description: <br>//    Initializes the window/thread by setting the ICMINFO values to the <br>//    current global values.  Then, the extra window information is set to <br>//    point to the ICMINFO structure so that any operation using this <br>//    window can obtain necesary information to manipulate the image. <br>// <br>//  Parameters: <br>//    none. <br>// <br>//  Returns: <br>//    HANDLE to DIBINFO structure. <br>// <br>//  Comments: <br>// <br>////////////////////////////////////////////////////////////////////////// <br> <br>HGLOBAL CreateDIBInfo(void) <br>{ <br>    // Local variables <br>    HGLOBAL   hDIBInfo;           // Handle to ICMINFO structure <br>    LPDIBINFO lpDIBInfo;          // Pointer to ICMINFO structure <br> <br>    // Allocate DIBINFO structure and get a pointer to it <br>    hDIBInfo = GlobalAlloc(GHND, sizeof(DIBINFO)); <br>    if ((HGLOBAL)NULL != hDIBInfo) <br>    { <br>        if (NULL != (lpDIBInfo = GlobalLock(hDIBInfo))) <br>        { <br>            InitDIBInfo(lpDIBInfo); <br>        } <br>        else <br>        { <br>            DebugMsg(__TEXT("DIBS.C : CreateDIBInfo : Failed to lock DIBINFO\r\n")); <br>        } <br>    } <br>    else <br>    { <br>        DebugMsg(__TEXT("DIBS.C : CreateDIBInfo : Global alloc failed\r\n")); <br>        return(NULL); <br>    } <br>    GlobalUnlock(hDIBInfo); <br>    if (NULL == lpDIBInfo) <br>    { <br>        GlobalFree(hDIBInfo); <br>        hDIBInfo = NULL; <br>    } <br>    return(hDIBInfo); <br>} <br> <br> <br>/////////////////////////////////////////////////////////////////////////////// <br>//  Function:  fDuplicateDIBInfo <br>// <br>//  Description: <br>//    Copies the source DIBINFO into the target DIBINFO. <br>// <br>//  Parameters: <br>//    LPDIBINFO Target DIBINFO to recieve the contents of the source DIBINFO. <br>//    LPDIBINFO Source DIBINFO to be copied into the target DIBINFO. <br>// <br>//  Returns: <br>//    void <br>// <br>//  Comments: <br>// <br>/////////////////////////////////////////////////////////////////////////////// <br>LPDIBINFO fDuplicateDIBInfo(LPDIBINFO lpDIDest, LPDIBINFO lpDISrc) <br>{ <br>    // Local variables <br> <br>    // Initialize variables <br>    if (lpDISrc == NULL) <br>    { <br>        return(NULL); <br>    } <br>    if (lpDIDest == NULL) <br>    { <br>        lpDIDest = (LPDIBINFO)GlobalLock(CreateDIBInfo()); <br>    } <br>    if (lpDIDest == (LPDIBINFO)NULL) <br>    { <br>        return(NULL); <br>    } <br> <br>    // Now, copy the body of the DIBINFO structure <br>    lpDIDest-&gt;lpszImageFileName = CopyString(lpDISrc-&gt;lpszImageFileName); <br>    CopyRect((LPRECT)&amp;lpDIDest-&gt;rcClip, (LPRECT)&amp;lpDISrc-&gt;rcClip); <br> <br>    lpDIDest-&gt;hWndOwner         = lpDISrc-&gt;hWndOwner; <br>    lpDIDest-&gt;hDIB              = lpDISrc-&gt;hDIB; <br>    lpDIDest-&gt;hDIBTransformed   = lpDISrc-&gt;hDIBTransformed; <br>    lpDIDest-&gt;hPal              = lpDISrc-&gt;hPal; <br>    lpDIDest-&gt;dwDIBBits         = lpDISrc-&gt;dwDIBBits; <br>    lpDIDest-&gt;uiDIBWidth        = lpDISrc-&gt;uiDIBWidth; <br>    lpDIDest-&gt;uiDIBHeight       = lpDISrc-&gt;uiDIBHeight; <br>    lpDIDest-&gt;bmFormat          = lpDISrc-&gt;bmFormat; <br> <br>    lpDIDest-&gt;bStretch          = lpDISrc-&gt;bStretch; <br>    lpDIDest-&gt;dwStretchBltMode  = lpDISrc-&gt;dwStretchBltMode; <br>    lpDIDest-&gt;dwPrintOption     = lpDISrc-&gt;dwPrintOption; <br>    lpDIDest-&gt;dwXScale          = lpDISrc-&gt;dwXScale; <br>    lpDIDest-&gt;dwYScale          = lpDISrc-&gt;dwYScale; <br> <br>    // Copy DEVMODE. <br>    if (NULL != lpDISrc-&gt;pDevMode) <br>    { <br>        HANDLE  hDevMode = GlobalHandle(lpDISrc-&gt;pDevMode); <br>        DWORD   dwSize = GlobalSize(hDevMode); <br> <br> <br>        lpDIDest-&gt;pDevMode = (PDEVMODE) GlobalLock(GlobalAlloc(GHND, dwSize)); <br>        if (NULL != lpDIDest-&gt;pDevMode) <br>        { <br>            memcpy(lpDIDest-&gt;pDevMode, lpDISrc-&gt;pDevMode, dwSize); <br>        } <br>    } <br> <br>    // Copy the ICM information now <br>    fDuplicateICMInfo(lpDIDest, lpDISrc); <br> <br>    // Made it this far--return pointer to DIBINFO <br>    return(lpDIDest); <br>} // End of function fDuplicateDIBInfo <br> <br>////////////////////////////////////////////////////////////////////////// <br>//  Function:  fDuplicateICMInfo <br>// <br>//  Description: <br>//    Safely copies source ICM information in a DIBINFO structure to <br>//    the target DIBINFO. <br>// <br>//  Parameters: <br>//    @@@ <br>// <br>//  Returns: <br>//    BOOL <br>// <br>//  Comments: <br>// <br>// <br>////////////////////////////////////////////////////////////////////////// <br>BOOL fDuplicateICMInfo(LPDIBINFO lpDIDest, LPDIBINFO lpDISrc) <br>{ <br>    // Local variables <br> <br>    //  Initialize variables <br>    if (NULL == lpDIDest) <br>    { <br>        DebugMsg(__TEXT("DIBS.C : fDuplicateICMInfo : NULL Target\r\n")); <br>        return(FALSE); <br>    } <br>    if (NULL == lpDISrc) <br>    { <br>        DebugMsg(__TEXT("DIBS.C : fDuplicateICMInfo : NULL Source\r\n")); <br>        return(FALSE); <br>    } <br> <br>    lpDIDest-&gt;dwICMFlags = lpDISrc-&gt;dwICMFlags; <br>    lpDIDest-&gt;hLCS = lpDISrc-&gt;hLCS; <br> <br>    // Copy strings. <br>    UpdateString(&amp;(lpDIDest-&gt;lpszMonitorName)   ,lpDISrc-&gt;lpszMonitorName); <br>    UpdateString(&amp;(lpDIDest-&gt;lpszMonitorProfile),lpDISrc-&gt;lpszMonitorProfile); <br>    UpdateString(&amp;(lpDIDest-&gt;lpszPrinterName   ),lpDISrc-&gt;lpszPrinterName); <br>    UpdateString(&amp;(lpDIDest-&gt;lpszPrinterProfile),lpDISrc-&gt;lpszPrinterProfile); <br>    UpdateString(&amp;(lpDIDest-&gt;lpszTargetProfile) ,lpDISrc-&gt;lpszTargetProfile); <br> <br>    // Copy intents <br>    lpDIDest-&gt;dwRenderIntent = lpDIDest-&gt;dwRenderIntent; <br>    lpDIDest-&gt;dwProofingIntent = lpDIDest-&gt;dwProofingIntent; <br> <br>}   // End of function fDuplicateICMInfo <br> <br> <br>////////////////////////////////////////////////////////////////////////// <br>//  Function:  FreeDIBInfo <br>// <br>//  Description: <br>//    Frees the DIBINFO structure and its members. <br>// <br>//  Parameters: <br>//    HGLOBAL   Handle to DIBINFO structure@@@ <br>// <br>//  Returns: <br>//    void <br>// <br>//  Comments: <br>//    This function will also deallocate the association ICMINFO <br>//    structure which is contained within the DIBINFO structure. <br>// <br>////////////////////////////////////////////////////////////////////////// <br>BOOL fFreeDIBInfo(HGLOBAL hDIBInfo, BOOL bFreeDIBHandles) <br>{ <br>    // Local variables <br>    LPDIBINFO lpDIBInfo; <br>    HGLOBAL   hFreed; <br>    DWORD     dwLastError; <br> <br>    // Initialize variables <br>    if (hDIBInfo == NULL) <br>    { <br>        return(TRUE); <br>    } <br> <br>    // Obtain DIBINFO pointer <br>    lpDIBInfo = GlobalLock(hDIBInfo); <br>    if (lpDIBInfo == NULL) <br>    { <br>        return(FALSE); <br>    } <br>    // Have the pointer, let's free its members <br>    if (lpDIBInfo-&gt;lpszImageFileName) <br>        hFreed = GlobalFree(lpDIBInfo-&gt;lpszImageFileName); <br>    if (lpDIBInfo-&gt;lpszMonitorName) <br>        hFreed = GlobalFree(lpDIBInfo-&gt;lpszMonitorName); <br>    if (lpDIBInfo-&gt;lpszMonitorProfile) <br>        hFreed = GlobalFree(lpDIBInfo-&gt;lpszMonitorProfile); <br>    if (lpDIBInfo-&gt;lpszPrinterName) <br>        hFreed = GlobalFree(lpDIBInfo-&gt;lpszPrinterName); <br>    if (lpDIBInfo-&gt;lpszPrinterProfile) <br>        hFreed = GlobalFree(lpDIBInfo-&gt;lpszPrinterProfile); <br>    if (lpDIBInfo-&gt;lpszTargetProfile) <br>        hFreed = GlobalFree(lpDIBInfo-&gt;lpszTargetProfile); <br> <br>    // Preserve last error if necessary <br>    SetLastError(0); <br> <br>    if (bFreeDIBHandles) <br>    { <br>        if (NULL != lpDIBInfo-&gt;hDIB) <br>            GlobalFree(lpDIBInfo-&gt;hDIB); <br>        if (NULL != lpDIBInfo-&gt;hDIBTransformed) <br>            GlobalFree(lpDIBInfo-&gt;hDIBTransformed); <br>    } <br>    GlobalUnlock(hDIBInfo); <br>    if (NULL != (GlobalFree(hDIBInfo))) // unsuccessful free <br>    { <br>        dwLastError = GetLastError(); <br>        DebugMsg(__TEXT("DIBS.C : fFreeDIBInfo : GlobalFree failed, LastError = %ld\r\n"), dwLastError); <br>        return(FALSE); <br>    } <br>    return(TRUE); <br>} // End of function fFreeDIBInfo <br> <br>////////////////////////////////////////////////////////////////////////// <br>//  Function:  InitDIBInfo <br>// <br>//  Description: <br>//    Given a pointer to a DIBINFO structure, this function will place <br>//    default values in all of its members. <br>// <br>//  Parameters: <br>//    @@@ <br>// <br>//  Returns: <br>//    BOOL  Success / Failure. <br>// <br>//  Comments: <br>// <br>// <br>////////////////////////////////////////////////////////////////////////// <br>BOOL InitDIBInfo(LPDIBINFO lpDIBInfo) <br>{ <br>    // Local variables <br> <br>    //  Initialize variables <br>    if (NULL == lpDIBInfo) <br>    { <br>        SetLastError(ERROR_INVALID_PARAMETER); <br>        DebugMsg(__TEXT("DIBS.C : InitDIBInfo : lpDIBInfo == NULL\r\n")); <br>        return(FALSE); <br>    } <br>#ifdef _DEBUG <br>    memset(lpDIBInfo, UNINIT_BYTE, sizeof(DIBINFO)); <br>#endif <br> <br>    lpDIBInfo-&gt;hWndOwner = NULL; <br>    lpDIBInfo-&gt;lpszImageFileName = NULL; <br>    lpDIBInfo-&gt;hDIB = NULL; <br>    lpDIBInfo-&gt;hDIBTransformed = NULL; <br>    lpDIBInfo-&gt;hPal = NULL; <br> <br>    // Image attributes <br>    lpDIBInfo-&gt;dwDIBBits = 0; <br>    lpDIBInfo-&gt;uiDIBWidth   =   0; <br>    lpDIBInfo-&gt;uiDIBHeight = 0; <br>    lpDIBInfo-&gt;bmFormat = (DWORD)-1; <br> <br>    // Display options <br>    SetRect((LPRECT)&amp;(lpDIBInfo-&gt;rcClip), 0, 0, 0, 0); <br>    lpDIBInfo-&gt;dwStretchBltMode = ICMV_STRETCH_DEFAULT; <br>    lpDIBInfo-&gt;bStretch = FALSE; <br> <br>    // Printing Options <br>    lpDIBInfo-&gt;dwPrintOption = ICMV_PRINT_DEFAULTSIZE; <br>    lpDIBInfo-&gt;dwXScale = 0; <br>    lpDIBInfo-&gt;dwYScale = 0; <br>    lpDIBInfo-&gt;pDevMode = NULL; <br> <br>    // ICM Attributes <br>    lpDIBInfo-&gt;dwICMFlags = ICMVFLAGS_DEFAULT_ICMFLAGS; <br>    lpDIBInfo-&gt;hLCS = NULL; <br>    lpDIBInfo-&gt;lpszMonitorName = NULL; <br>    lpDIBInfo-&gt;lpszMonitorProfile = NULL; <br>    lpDIBInfo-&gt;lpszPrinterName = NULL; <br>    lpDIBInfo-&gt;lpszPrinterProfile = NULL; <br>    lpDIBInfo-&gt;lpszTargetProfile = NULL; <br>    lpDIBInfo-&gt;dwRenderIntent = ICMV_RENDER_INTENT_DEFAULT; <br>    lpDIBInfo-&gt;dwProofingIntent = ICMV_PROOFING_INTENT_DEFAULT; <br> <br>    return(TRUE); <br>}   // End of function InitDIBInfo <br> <br> <br>////////////////////////////////////////////////////////////////////////// <br>//  Function:  GetDefaultICMInfo <br>// <br>//  Description: <br>//    Initializes the global DIBINFO structure with default profiles. <br>// <br>//  Parameters: <br>//    @@@ <br>// <br>//  Returns: <br>//    void <br>// <br>//  Comments: <br>// <br>// <br>////////////////////////////////////////////////////////////////////////// <br>BOOL GetDefaultICMInfo(void) <br>{ <br>    // Local variables <br>    LPDIBINFO   lpDIBInfo; <br>    HDC                 hDC; <br>    BOOL                bRC; <br>    LPSTR           lpszDefaultProfile; <br> <br>    //  Initialize variables <br>    bRC = TRUE; <br>    lpszDefaultProfile = NULL; <br>    lpDIBInfo = GetDIBInfoPtr(ghAppWnd); // Lock info for writing <br> <br>    // Get display DC <br>    hDC = GetDC(ghAppWnd); <br>    lpDIBInfo-&gt;lpszMonitorName = GetRegistryString(HKEY_LOCAL_MACHINE, <br>                                                   __TEXT("System\\CurrentControlSet\\Services\\Class\\Monitor\\0000"), <br>                                                   __TEXT("DriverDesc")); <br>    lpDIBInfo-&gt;lpszMonitorProfile = GetDefaultICMProfile(hDC); <br> <br>    if (NULL == lpDIBInfo-&gt;lpszMonitorProfile) <br>    { <br>        DWORD   dwSize; <br> <br>        GetStandardColorSpaceProfile(NULL, LCS_WINDOWS_COLOR_SPACE, NULL, &amp;dwSize); <br>        if (0 != dwSize) <br>        { <br>            lpszDefaultProfile = GlobalAlloc(GPTR, dwSize); <br>            if (GetStandardColorSpaceProfile(NULL, LCS_WINDOWS_COLOR_SPACE, lpszDefaultProfile, &amp;dwSize)) <br>            { <br>                GetBaseFilename(lpszDefaultProfile, &amp;(lpDIBInfo-&gt;lpszMonitorProfile)); <br>            } <br>            else <br>            { <br>                DISPLAY_LASTERROR(LASTERROR_NOALLOC, GetLastError()); <br>                bRC = FALSE; <br>                lpDIBInfo-&gt;lpszMonitorProfile = NULL; <br>            } <br>        } <br>        else <br>        { <br>            lpDIBInfo-&gt;lpszMonitorProfile = GlobalAlloc(GPTR, (lstrlen(DEFAULT_ICM_PROFILE) +1 ) * sizeof(TCHAR)); <br>            _tcscpy(lpDIBInfo-&gt;lpszMonitorProfile, DEFAULT_ICM_PROFILE); <br>        } <br> <br>        DebugMsg(__TEXT("Display DC didn't get profile.  Using &lt;%s&gt;\r\n"), lpDIBInfo-&gt;lpszMonitorProfile); <br>    } <br>    DebugMsg(__TEXT("GetDefaultICMInfo:  Monitor profile &lt;%s&gt;\r\n"), lpDIBInfo-&gt;lpszMonitorProfile); <br>    ReleaseDC(ghAppWnd, hDC); <br> <br> <br>    if (bRC) <br>    { <br>        // Get printer name and DC <br>        lpDIBInfo-&gt;lpszPrinterName = GetDefaultPrinterName(); <br>        if (lpDIBInfo-&gt;lpszPrinterName != NULL) <br>        { <br>            hDC = GetPrinterDC(lpDIBInfo-&gt;lpszPrinterName, lpDIBInfo-&gt;pDevMode); <br>            if (hDC != NULL) <br>            { <br>                lpDIBInfo-&gt;lpszPrinterProfile = GetDefaultICMProfile(hDC); <br>                lpDIBInfo-&gt;lpszTargetProfile= lpDIBInfo-&gt;lpszPrinterProfile; <br>                DebugMsg(__TEXT("GetDefaultICMInfo:  Printer profile &lt;%s&gt;\r\n"), lpDIBInfo-&gt;lpszPrinterProfile ? <br>                         lpDIBInfo-&gt;lpszPrinterProfile : __TEXT("NULL")); <br>                DeleteDC(hDC); <br>                bRC = TRUE; <br>            } <br>        } <br>        GlobalUnlock(GlobalHandle(lpDIBInfo)); <br>    } <br> <br>    if (NULL != lpszDefaultProfile) <br>    { <br>        GlobalFree(lpszDefaultProfile); <br>    } <br>    return(bRC); <br>}   // End of function GetDefaultICMInfo <br> <br>////////////////////////////////////////////////////////////////////////// <br>//  Function:  DumpDIBINFO <br>// <br>//  Description: <br>//    Dumps DIBInfo structure <br>// <br>//  Parameters: <br>//    @@@ <br>// <br>//  Returns: <br>//    void <br>// <br>//  Comments: <br>// <br>// <br>////////////////////////////////////////////////////////////////////////// <br>void DumpDIBINFO(LPTSTR lpszMsg, LPDIBINFO lpDIBInfo) <br>{ <br>    // Local variables <br> <br>    //  Initialize variables <br>    DebugMsg(__TEXT("\r\n******************** DumpDIBINFO ********************\r\n")); <br>    DebugMsg(__TEXT("***** %s \r\n"), lpszMsg); <br>    if (lpDIBInfo == NULL) <br>    { <br>        DebugMsg(__TEXT("lpDIBInfo                    NULL\r\n\r\n")); <br>        return; <br>    } <br> <br>    DebugMsg(__TEXT("lpDIBInfo                   0x%08lx\r\n"), lpDIBInfo); <br>    if (lpDIBInfo-&gt;lpszImageFileName != NULL) <br>    { <br>        DebugMsg(__TEXT("lpszImageFileName           %s\r\n"), lpDIBInfo-&gt; lpszImageFileName); <br>    } <br>    else <br>    { <br>        DebugMsg(__TEXT("lpszImageFileName           &lt;NULL PTR&gt;\r\n")); <br>    } <br> <br>    DebugMsg(__TEXT("hDIB                        0x%08lx\r\n"), lpDIBInfo-&gt; hDIB); <br>    DebugMsg(__TEXT("hDIBTransformed             0x%08lx\r\n"), lpDIBInfo-&gt; hDIBTransformed); <br>    DebugMsg(__TEXT("hPal                        0x%08lx\r\n"), lpDIBInfo-&gt; hPal); <br>    DebugMsg(__TEXT("dwDIBBits                   %lu\r\n"), lpDIBInfo-&gt; dwDIBBits); <br>    DebugMsg(__TEXT("uiDIBWidth                  %lu\r\n"), lpDIBInfo-&gt; uiDIBWidth); <br>    DebugMsg(__TEXT("uiDIBHeight                 %lu\r\n"), lpDIBInfo-&gt; uiDIBHeight); <br>    DebugMsg(__TEXT("bmFormat                    %ld\r\n"), (DWORD)(lpDIBInfo-&gt;bmFormat)); <br>    DumpRectangle(__TEXT("rcClip                      "), (LPRECT)&amp;(lpDIBInfo-&gt;rcClip)); <br>    DebugMsg(__TEXT("dwStretchBltMode            %lu\r\n"), lpDIBInfo-&gt; dwStretchBltMode); <br>    DebugMsg(__TEXT("bStretch                    %lu\r\n"), lpDIBInfo-&gt; bStretch); <br>    DebugMsg(__TEXT("dwPrintOption               %lu\r\n"), lpDIBInfo-&gt; dwPrintOption); <br>    DebugMsg(__TEXT("dwXScale                    %lu\r\n"), lpDIBInfo-&gt; dwXScale); <br>    DebugMsg(__TEXT("dwYScale                    %lu\r\n\r\n"), lpDIBInfo-&gt; dwYScale); <br>    DebugMsg(__TEXT("lpszMonitorName             0x%08lX &lt;%s&gt;\r\n"), lpDIBInfo-&gt;lpszMonitorName   , lpDIBInfo-&gt;lpszMonitorName    ? lpDIBInfo-&gt;lpszMonitorName    : __TEXT("NULL")); <br>    DebugMsg(__TEXT("lpszMonitorProfile          0x%08lX &lt;%s&gt;\r\n"), lpDIBInfo-&gt;lpszMonitorProfile, lpDIBInfo-&gt;lpszMonitorProfile ? lpDIBInfo-&gt;lpszMonitorProfile : __TEXT("NULL")); <br>    DebugMsg(__TEXT("lpszPrinterName             0x%08lX &lt;%s&gt;\r\n"), lpDIBInfo-&gt;lpszPrinterName   , lpDIBInfo-&gt;lpszPrinterName    ? lpDIBInfo-&gt;lpszPrinterName    : __TEXT("NULL")); <br>    DebugMsg(__TEXT("lpszPrinterProfile          0x%08lX &lt;%s&gt;\r\n"), lpDIBInfo-&gt;lpszPrinterProfile, lpDIBInfo-&gt;lpszPrinterProfile ? lpDIBInfo-&gt;lpszPrinterProfile : __TEXT("NULL")); <br>    DebugMsg(__TEXT("lpszTargetProfile           0x%08lX &lt;%s&gt;\r\n\r\n"), lpDIBInfo-&gt;lpszTargetProfile, lpDIBInfo-&gt;lpszTargetProfile ? lpDIBInfo-&gt;lpszTargetProfile : __TEXT("NULL")); <br>    DebugMsg(__TEXT("dwICMFlags                  %ld\r\n"), lpDIBInfo-&gt;dwICMFlags); <br>    DebugMsg(__TEXT("dwRenderIntent              %ld\r\n"), lpDIBInfo-&gt;dwRenderIntent); <br>    DebugMsg(__TEXT("dwProofingIntent            %ld\r\n"), lpDIBInfo-&gt;dwProofingIntent); <br>    DebugMsg(__TEXT("^^^^^^^^^^DumpDIBINFO   0x%08lx^^^^^^^^^^^^^^\r\n\r\n\r\n"), lpDIBInfo); <br>}   // End of function DumpDIBINFO <br> <br> <br>////////////////////////////////////////////////////////////////////////// <br>//  Function:  SetupDC <br>// <br>//  Description: <br>//    Sets up DC for drawing based on DIBINFO.  This consolidates code for both <br>//    printing and drawing to the screen. <br>// <br>//  Parameters: <br>//    @@@ <br>// <br>//  Returns: <br>//    BOOL <br>// <br>//  Comments: <br>// <br>// <br>////////////////////////////////////////////////////////////////////////// <br>BOOL SetupDC(HDC hDC, LPDIBINFO lpDIBInfo, HPALETTE *phOldPalette, HDC *phDCPrinter) <br>{ <br>    int     iICMMode; <br>    BOOL    bRC; <br>    TCHAR   stFullProfile[MAX_PATH]; <br> <br> <br>    // Initialize variables. <br>    *phOldPalette = NULL; <br>    *phDCPrinter = NULL; <br> <br>    // Select/Realize our palette.  Make it a background palette, so that <br>    // it doesn't mess up foreground palette when background windows repaint. <br>    if (NULL != lpDIBInfo-&gt;hPal) <br>    { <br>        *phOldPalette = SelectPalette (hDC, lpDIBInfo-&gt;hPal, TRUE); <br>        if (NULL == *phOldPalette) <br>        { <br>            DISPLAY_LASTERROR(LASTERROR_NOALLOC, GetLastError()); <br>        } <br>    } <br> <br>    //Only do ICM pre-processing if "Inside DC" is selected. <br>    if (!CHECK_DWFLAG(lpDIBInfo-&gt;dwICMFlags, ICMVFLAGS_ICM20)) <br>    { <br>        if (CHECK_DWFLAG(lpDIBInfo-&gt;dwICMFlags, ICMVFLAGS_ENABLE_ICM)) <br>        { <br>            // build the FULL pathname to the profile. <br>            wsprintf(stFullProfile,__TEXT("%s\\%s"), gstProfilesDir, lpDIBInfo-&gt;lpszMonitorProfile); <br> <br>            if (SetICMProfile(hDC, stFullProfile)) <br>            { <br>                iICMMode = SetICMMode(hDC, ICM_ON); <br>                if (0 == iICMMode) <br>                { <br>                    DISPLAY_LASTERROR(LASTERROR_NOALLOC,GetLastError()); <br>                    SetDWFlags((LPDWORD)&amp;(lpDIBInfo-&gt;dwICMFlags), ICMVFLAGS_ENABLE_ICM, FALSE); <br>                } <br>                else <br>                { <br>                    if ((CHECK_DWFLAG(lpDIBInfo-&gt;dwICMFlags, ICMVFLAGS_PROOFING)) &amp;&amp; (NULL != lpDIBInfo-&gt;lpszTargetProfile)) <br>                    { <br>                        *phDCPrinter = GetPrinterDC(lpDIBInfo-&gt;lpszPrinterName, lpDIBInfo-&gt;pDevMode); <br>                        if (NULL != *phDCPrinter) <br>                        { <br>                            wsprintf(stFullProfile,__TEXT("%s\\%s"), gstProfilesDir, lpDIBInfo-&gt;lpszTargetProfile); <br>                            bRC = SetICMProfile(*phDCPrinter, stFullProfile); <br>                            if (bRC) <br>                            { <br>                                iICMMode = SetICMMode(*phDCPrinter, ICM_ON); <br>                                if (0 != iICMMode) <br>                                { <br>                                    bRC = ColorMatchToTarget(hDC, *phDCPrinter, CS_ENABLE); <br>                                    if (!bRC) <br>                                    { <br>                                        DebugMsg(__TEXT("DIBPaint:  ColorMatchToTarget w/profile %s FAILED\r\n"), stFullProfile); <br>                                        DISPLAY_LASTERROR(LASTERROR_NOALLOC,GetLastError()); <br>                                    } <br>                                } <br>                                else <br>                                { <br>                                    DebugMsg(__TEXT("DIBPaint:  SetICMMode (%s, %s) FAILED!\r\n"), lpDIBInfo-&gt;lpszPrinterName, stFullProfile); <br>                                    DISPLAY_LASTERROR(LASTERROR_NOALLOC,GetLastError()); <br>                                } <br>                            } <br>                            else <br>                            { <br>                                DebugMsg(__TEXT("DIBPaint:  SetICMProfile w/profile %s FAILED\r\n"), stFullProfile); <br>                                DISPLAY_LASTERROR(LASTERROR_NOALLOC,GetLastError()); <br>                            } <br>                        } <br>                        else <br>                        { <br>                            DebugMsg(__TEXT("DIBPaint:  GetPrinterDC() w/printer %s FAILED\r\n"), lpDIBInfo-&gt;lpszPrinterName); <br>                            DISPLAY_LASTERROR(LASTERROR_NOALLOC,GetLastError()); <br>                        } <br>                    } <br> <br>                    if (NULL != lpDIBInfo-&gt;hPal) <br>                    { <br>                        WORD    wEntries; <br> <br> <br>                        GetObject(lpDIBInfo-&gt;hPal, sizeof(wEntries), &amp;wEntries); <br>                        //if(!ColorCorrectPalette(hDC, lpDIBInfo-&gt;hPal, 0, (DWORD)wEntries)) <br>                        //{ <br>                        //    DISPLAY_LASTERROR(LASTERROR_NOALLOC, GetLastError()); <br>                        //} <br>                    } <br>                } <br>            } <br>            else <br>            { <br>                DebugMsg(__TEXT("DIBPaint : SetICMProfile(%s)FAILED\r\n"), stFullProfile); <br>                DISPLAY_LASTERROR(LASTERROR_NOALLOC,GetLastError()); <br>            } <br>        } <br>        else <br>        { <br>            iICMMode = SetICMMode(hDC, ICM_OFF); <br>        } <br>    } <br>    else <br>    { <br>        iICMMode = SetICMMode(hDC, ICM_DONE_OUTSIDEDC); <br>    } <br> <br>    return TRUE; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICMVIEW.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3508"></a>ICMVIEW.H</h2>
<pre><code>//THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>//THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright  1994-1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//  FILE: <br>//    ICMVIEW.H <br>// <br>//  PURPOSE: <br>//    Include file for ICMVIEW.C <br>// <br>//  PLATFORMS: <br>//    Windows 95, Windows NT <br>// <br>//  SPECIAL INSTRUCTIONS: N/A <br>// <br> <br>// General pre-processor macros <br>#define APPNAMEA    "ICMVIEW" <br>#define APPNAME __TEXT("ICMVIEW") <br> <br>#ifndef MAX_STRING <br>    #define MAX_STRING    256 <br>#endif <br> <br>// <br>// Constants for use by Windows ICM APIs <br>//    These *should* be in WINGDI.H <br>// <br>//  API:  ColorMatchToTarget. <br>#ifndef CS_ENABLE <br>    #define CS_ENABLE           1 <br>    #define CS_DISABLE          2 <br>    #define CS_DELETE_TRANSFORM 3 <br>#endif <br> <br>// Values for BITMAPV5HEADER field bV5CSType <br>#ifndef PROFILE_LINKED <br>    #define PROFILE_LINKED          'LINK' <br>    #define PROFILE_EMBEDDED        'MBED' <br>#endif <br> <br>// Makes it easier to determine appropriate code paths: <br>#if defined (WIN32) <br>    #define IS_WIN32 TRUE <br>#else <br>    #define IS_WIN32 FALSE <br>#endif <br> <br>#define IS_NT      (0 != (IS_WIN32 &amp;&amp; ((BOOL)(GetVersion() &lt; 0x80000000))) ) <br>#define IS_WIN32S  (0 != (IS_WIN32 &amp;&amp; (BOOL)(!(IS_NT) &amp;&amp; (LOBYTE(LOWORD(GetVersion()))&lt;4)))) <br>#define IS_WIN95   (0 != ((BOOL)(!(IS_NT) &amp;&amp; !(IS_WIN32S)) &amp;&amp; IS_WIN32)) <br> <br>// Support macros <br>#ifndef C1_GAMMA_RAMP <br>    #define C1_GAMMA_RAMP 0x00000020 <br>#endif <br> <br>#ifndef CAPS1 <br>    #define CAPS1   94 <br>#endif <br> <br>#define SUPPORT_GAMMA_RAMPS(hDC) (BOOL)((GetDeviceCaps(hDC, CAPS1) &amp; C1_GAMMA_RAMP) != 0) <br> <br>// Default profile to use <br>#define DEFAULT_ICM_PROFILE __TEXT("sRGB Color Space Profile.ICM") <br> <br>// Window extra bytes <br>#define GWL_DIBINFO GWL_USERDATA <br> <br>// DWORD Flag macros <br>#define CHECK_DWFLAG(dwFlag,dwBits)((BOOL)((dwFlag &amp; dwBits) != 0)) <br>#define ENABLE_DWFLAG(dwFlag,dwBits)   (dwFlag |= dwBits) <br>#define CLEAR_DWFLAG(dwFlag,dwBits) (dwFlag &amp;= ~dwBits) <br>#define SET_DWFlag(dwFlag, dwBits, bSet) (bSet ? (dwFlag |= dwBits) : (dwFlag &amp;= ~dwFlag)) <br> <br>#define START_WAIT_CURSOR(hCur) hCur = SetCursor(LoadCursor(NULL,IDC_WAIT)); <br>#define END_WAIT_CURSOR(hCur) SetCursor(hCur); <br> <br>#define IVF_MAXIMIZED   0x1L <br> <br>// Constants for use in converting ICC Intents to LCS Intents <br>#define MAX_ICC_INTENT  INTENT_ABSOLUTE_COLORIMETRIC <br>#define ICC_TO_LCS      0 <br>#define LCS_TO_ICC      1 <br> <br>// General STRUCTS &amp;&amp; TYPEDEFS <br>#ifndef ICMVIEW_INTERNAL <br> <br>// Global variables for the application. <br>extern  HINSTANCE   ghInst;                 // Global instance handle <br>extern  TCHAR       gstTitle[];             // The title bar text <br>extern  HWND        ghAppWnd;               // Handle to application window <br>extern  HWND        ghWndMDIClient; <br>extern  DWORD       gdwLastError;           // Used to track LastError value <br>extern  TCHAR       gstProfilesDir[MAX_PATH];       // System directory for ICM profiles <br> <br>#endif <br> <br>// Function prototypes <br>LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM); <br>LPTSTR  CopyString(LPTSTR lpszSrc); <br>BOOL    UpdateString(LPTSTR *lpszDest, LPTSTR lpszSrc); <br>BOOL    CenterWindow(HWND, HWND); <br>BOOL    ConvertIntent(DWORD dwOrig, DWORD dwDirection, LPDWORD lpdwXlate); <br>DWORD   SetDWFlags(LPDWORD lpdwFlag, DWORD dwBitValue, BOOL bSet); <br>HMENU   InitImageMenu(HWND hWnd); <br>BOOL    GetBaseFilename(LPTSTR lpszFilename, LPTSTR *lpszBaseFilename); <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEBUG.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3500"></a>DEBUG.H</h2>
<pre><code>//THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>//THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright  1994-1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//  FILE: <br>//    DEBUG.H <br>// <br>//  PURPOSE: <br>//    Include file for DEBUG.C <br>// <br>//  PLATFORMS: <br>//    Windows 95, Windows NT <br>// <br>//  SPECIAL INSTRUCTIONS: N/A <br>// <br>#ifndef _ICM_H_ <br>    #include "icm.h" <br>#endif <br> <br>#ifdef DBG <br>    #define _DEBUG <br>#endif <br> <br>// General pre-processor macros <br>// Constants used by ICM_Debug functions <br>#define MAX_DEBUG_STRING    256 <br> <br>// Constants used to set unitialized values <br>#define UNINIT_BYTE     0x17 <br>#define UNINIT_DWORD    0x17171717 <br> <br>// ASSERT macro to display problem information in DEBUG build <br>#ifdef _DEBUG <br>    #define ASSERT(exp)               \ <br>    if(exp)                           \ <br>    {                                 \ <br>      NULL;                           \ <br>    }                                 \ <br>    else                              \ <br>    {                                 \ <br>      _Assert(__FILE__, __LINE__);    \ <br>    } <br>#else <br>    #define ASSERT(exp)   NULL <br>#endif <br> <br>#ifdef DEBUG_MEMORY <br>    #ifndef I_AM_DEBUG <br>        #define GlobalFree(hMem)   SafeFree(__FILE__, __LINE__, hMem) <br>        #define GlobalUnlock(hMem) SafeUnlock(__FILE__, __LINE__, hMem) <br>        #define GlobalLock(hMem)   SafeLock(__FILE__, __LINE__, hMem) <br>    #endif <br>#endif <br> <br>// Used by FormatLastError to determine if string should be allocated <br>// and returned or just displayed and freed. <br>#define LASTERROR_ALLOC      1 <br>#define LASTERROR_NOALLOC    2 <br> <br>#define DISPLAY_LASTERROR(ui,dw) FormatLastError(__FILE__, __LINE__, ui, dw) <br> <br> <br>// General STRUCTS &amp;&amp; TYPEDEFS <br> <br>// Function prototypes <br>void    _Assert(LPSTR lpszFile, UINT uLine); <br>void    DebugMsg (LPTSTR sz,...); <br>void    DebugMsgA (LPSTR lpszMessage,...); <br>int     ErrMsg (HWND hwndOwner, LPTSTR sz,...); <br>void    DumpMemory(LPBYTE lpbMem, UINT uiElementSize, UINT uiNumElements); <br>void    DumpRectangle(LPTSTR lpszDesc, LPRECT lpRect); <br>void    DumpProfile(PPROFILE pProfile); <br>void    DumpBmpHeader(LPVOID lpvBmpHeader); <br>void    DumpBITMAPFILEHEADER(LPBITMAPFILEHEADER lpBmpFileHeader); <br>void    DumpLogColorSpace(LPLOGCOLORSPACE pColorSpace); <br>void    DumpCOLORMATCHSETUP(LPCOLORMATCHSETUP lpCM); <br>HGLOBAL SafeFree(LPTSTR lpszFile, UINT uLine, HGLOBAL hMemory); <br>BOOL    SafeUnlock(LPTSTR lpszFile, UINT uLine, HGLOBAL hMemory); <br>LPVOID  SafeLock(LPTSTR lpszFile, UINT uiLine, HGLOBAL hMemory); <br>LPSTR   FormatLastError(LPSTR lpszFile, UINT uiLine, UINT uiOutput, DWORD dwLastError); <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

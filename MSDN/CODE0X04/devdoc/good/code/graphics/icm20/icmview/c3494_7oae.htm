<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIBS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3506"></a>DIBS.H</h2>
<pre><code>//THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>//ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>//THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright  1994-1997  Microsoft Corporation.  All Rights Reserved. <br>// <br>//  FILE: <br>//    DIBS.C <br>// <br>//  PURPOSE: <br>//    Include file for DIBS.H <br>// <br>//  PLATFORMS: <br>//    Windows 95, Windows NT <br>// <br>//  SPECIAL INSTRUCTIONS: N/A <br>// <br> <br>#include &lt;math.h&gt; <br> <br>// <br>// General pre-processor macros <br>// <br> <br>// Calculates fixed poit from floating point. <br>#define __FXPTMANTISSA(d, f)  ( (DWORD)d &lt;&lt; f ) <br>#define __FXPTFRACTION(d, f)  ( (DWORD)ldexp((d - (DWORD)d), f) ) <br>#define __FXPT32(d, f)      ( __FXPTMANTISSA(d, f) | __FXPTFRACTION(d, f) ) <br> <br>#define __FXPT2DOT30(d)   __FXPT32(d, 30) <br>#define __FXPT16DOT16(d)  __FXPT32(d, 16) <br> <br>// Max number of color bits that will have a full color table. <br>#define MAX_BPP_COLOR_TABLE             8 <br> <br>// Macro to swap two values <br>#define SWAP(x,y)   ((x)^=(y)^=(x)^=(y)) <br> <br>#define ABS(x)          (((x) &gt;= 0) ? (x) : (-(x))) <br> <br>#define PALVERSION      0x300 <br>#define MAXPALETTE      256     // max. # supported palette entries <br> <br>#define RECTWIDTH(lpRect)     ((lpRect)-&gt;right - (lpRect)-&gt;left) <br>#define RECTHEIGHT(lpRect)    ((lpRect)-&gt;bottom - (lpRect)-&gt;top) <br> <br>// Header signatutes for various resources <br>#define BFT_BITMAP 0x4d42   // 'BM' <br> <br>// Intent flag to indicate to use what ever the bitmap header intent is. <br>#define USE_BITMAP_INTENT       0xffffffff <br> <br>// macro to determine if resource is a DIB <br>#define ISDIB(bft) ((bft) == BFT_BITMAP) <br> <br>// Universial macros to find bitmap's width and height. <br>#define BITMAPWIDTH(lpbi)           (*(LPDWORD)lpbi &gt;= sizeof(BITMAPINFOHEADER) ? lpbi-&gt;biWidth :  \ <br>                                    ((LPBITMAPCOREHEADER)lpbi)-&gt;bcWidth) <br>#define BITMAPHEIGHT(lpbi)          (*(LPDWORD)lpbi &gt;= sizeof(BITMAPINFOHEADER) ? lpbi-&gt;biHeight :  \ <br>                                    ((LPBITMAPCOREHEADER)lpbi)-&gt;bcHeight) <br>#define BITMAPCOMPRESSION(lpbi)     (*(LPDWORD)lpbi &gt;= sizeof(BITMAPINFOHEADER) ? lpbi-&gt;biCompression : BI_RGB) <br>#define BITMAPIMAGESIZE(lpbi)       (*(LPDWORD)lpbi &gt;= sizeof(BITMAPINFOHEADER) ? lpbi-&gt;biSizeImage : 0) <br>#define BITMAPCSTYPE(lpbi)          (*(LPDWORD)lpbi &gt;= sizeof(BITMAPV4HEADER) ? ((PBITMAPV4HEADER)lpbi)-&gt;bV4CSType : LCS_sRGB) <br>#define BITMAPCLRUSED(lpbi)         (*(LPDWORD)lpbi &gt;= sizeof(BITMAPV4HEADER) ? ((PBITMAPV4HEADER)lpbi)-&gt;bV4ClrUsed : 0) <br>#define BITMAPCLRIMPORTANT(lpbi)    (*(LPDWORD)lpbi &gt;= sizeof(BITMAPV4HEADER) ? ((PBITMAPV4HEADER)lpbi)-&gt;bV4ClrImportant : 0) <br>#define BITMAPREDMASK(lpbi)         ( (*(LPDWORD)lpbi &gt;= sizeof(BITMAPV4HEADER)) || (BITMAPCOMPRESSION(lpbi) == BI_BITFIELDS) ?         \ <br>                                    ((PBITMAPV4HEADER)lpbi)-&gt;bV4RedMask : 0) <br>#define BITMAPGREENMASK(lpbi)       ( (*(LPDWORD)lpbi &gt;= sizeof(BITMAPV4HEADER)) || (BITMAPCOMPRESSION(lpbi) == BI_BITFIELDS) ?         \ <br>                                    ((PBITMAPV4HEADER)lpbi)-&gt;bV4GreenMask : 0) <br>#define BITMAPBLUEMASK(lpbi)        ( (*(LPDWORD)lpbi &gt;= sizeof(BITMAPV4HEADER)) || (BITMAPCOMPRESSION(lpbi) == BI_BITFIELDS) ?         \ <br>                                    ((PBITMAPV4HEADER)lpbi)-&gt;bV4BlueMask : 0) <br>#define BITMAPINTENT(lpbi)          (*(LPDWORD)lpbi &gt;= sizeof(BITMAPV5HEADER) ? ((PBITMAPV5HEADER)lpbi)-&gt;bV5Intent : LCS_GM_IMAGES) <br> <br>// Macro to determine bitcount for all bitmap types. <br>#define BITCOUNT(lpbi)      (*(LPDWORD)lpbi &gt;= sizeof(BITMAPINFOHEADER) ? ((LPBITMAPINFOHEADER)lpbi)-&gt;biBitCount :  \ <br>                            ((LPBITMAPCOREHEADER)lpbi)-&gt;bcBitCount) <br> <br>// Macro to determine to the DWORD aligned stride of a bitmap. <br>#define WIDTHBYTES(lpbi)   (((BITMAPWIDTH(lpbi) * BITCOUNT(lpbi) + 31) &amp; ~31) &gt;&gt; 3) <br> <br>// Macro to calculate size of bitmap. <br>#define BITMAPSIZE(lpbi)    ( 0 != BITMAPIMAGESIZE(lpbi) ? BITMAPIMAGESIZE(lpbi) : WIDTHBYTES(lpbi) * abs(BITMAPHEIGHT(lpbi))) <br> <br>// Macros to query Bitmap header version <br>#define IS_BITMAPCOREHEADER(lpbi) (sizeof(BITMAPCOREHEADER) == *(LPDWORD)lpbi) <br>#define IS_BITMAPINFOHEADER(lpbi) (sizeof(BITMAPINFOHEADER) == *(LPDWORD)lpbi) <br>#define IS_BITMAPV4HEADER(lpbi)   (sizeof(BITMAPV4HEADER)   == *(LPDWORD)lpbi) <br>#define IS_BITMAPV5HEADER(lpbi)   (sizeof(BITMAPV5HEADER)   == *(LPDWORD)lpbi) <br> <br>// Macro to determine the size of profile data. <br>#define PROFILESIZE(lpbi)   (*(LPDWORD)lpbi &lt; sizeof(BITMAPV5HEADER) ? 0 :  \ <br>                            ((LPBITMAPV5HEADER)lpbi)-&gt;bV5ProfileSize) <br> <br>// Macro to that returns pointer to DIB profile data. <br>#define GETPROFILEDATA(lpbi)    (IS_BITMAPV5HEADER(lpbi) ? (LPBYTE)lpbi + ((LPBITMAPV5HEADER)lpbi)-&gt;bV5ProfileData : NULL) <br> <br>// Given a pointer to a DIB header, return TRUE if is a Windows 3.0 style <br>//  DIB, false if otherwise (PM style DIB).  Assume it is a Windows DIB if <br>// size (the first DWORD) at least eqal to BITMAPINFOHEADER size. <br> <br>#define IS_WIN30_DIB(lpbi)  ((*(LPDWORD) (lpbi)) &gt;= sizeof (BITMAPINFOHEADER)) <br> <br> <br>// General STRUCTS &amp;&amp; TYPEDEFS <br> <br>// Function prototypes <br>void      DIBPaint (HDC hDC, LPRECT lpDCRect, HGLOBAL hDIB,LPRECT lpDIBRect, LPDIBINFO lpDIBInfo); <br>HGLOBAL   ReadDIBFile(LPTSTR lpszFileName); <br>DWORD     PaletteSize(LPBITMAPINFOHEADER lpbi); <br>HANDLE    ReadDIBFromFile(HANDLE hFile); <br>HPALETTE  CreateDIBPalette(HANDLE hDIB); <br>LPBYTE    FindDIBBits(LPBITMAPINFOHEADER lpbi); <br>HANDLE    TransformDIBOutsideDC(HANDLE hDIB, BMFORMAT bmInput, LPTSTR lpszDestProfile, <br>                                LPTSTR lpszTargetProfile, DWORD dwIntent, PBMCALLBACKFN pBMCallback, <br>                                ULONG ulCallbackData); <br>BOOL      SaveDIBToFile(HWND hWnd, LPCTSTR lpszFileName, LPDIBINFO lpDIBInfo, DWORD dwType); <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

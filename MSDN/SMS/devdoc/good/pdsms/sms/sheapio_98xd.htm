<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connect to the site database</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="sms_connect_to_the_site_database_proc1"></a>Connect to the site database</h3>
<p>
Use the <a href="sheapi_89mc.htm"><b>SmsDataSourceConnect</b></a> function to connect to the site database that you want to access.</p>
<p>
Currently, SMS supports one database type: Microsoft SQL Server. However, the SMS API is designed to allow support of other types of databases in the future.</p>
<p>
The <b>SmsDataSourceConnect </b>function takes two parameters:
<ul>
<li>
A pointer to a <a href="sheapi_1485.htm"><b>DATASOURCE</b></a> structure that specifies the site database to which you want to connect</li>
<li>
A pointer to a handle that is assigned the handle to the specified database connection. You use the handle to open containers, filter containers, and filters for that site database.</li>
</ul>
<p>
Note that your application can connect to one site database at a time.</p>
<p>
Example:</p>
<pre><code>// Function to make a datasource connection to
// a site database. This function prompts for
// SQL server, loginID, password, and database,
// and then calls SmsDataSourceConnect to get 
// a connection handle.

SMS_STATUS ConnectToSiteDatabase (HANDLE *phConnect)
                              // Pointer to handle to receive
                              // connection handle.
{

SMS_STATUS stat;

//Structure that specifies the site database to connect to.
DATASOURCE dsParams;
// Create string buffers for connecting to the database.
char szServer[33];
char szDb[31]; //maximum length of SQL Server database name is 30.
char szUser[31]; //maximum length of SQL Server Login ID is 30.
char szPasswd[31];

// Get database information from user and establish connection.
printf("Connect to site database.\n");

printf("SQL Server: ");
gets( szServer );

printf("Database: ");
gets( szDb );

printf("SQL Server Login ID: ");
gets( szUser );

printf("Password: ");
gets( szPasswd );

// Assign connection information to dsParams structure.
// The type of database.
dsParams.sqlParams.ds          = DB_SQL;
// SQL Server name.
dsParams.sqlParams.pszServer   = szServer;
// Login ID.
dsParams.sqlParams.pszUserName = szUser;
// Password for Login ID.
dsParams.sqlParams.pszPasswd   = szPasswd;
// Name of the site database.
dsParams.sqlParams.pszDbName   = szDb;
// Pointer to encryption function.
// No function is used in this example.
dsParams.sqlParams.pFunc       = NULL;
//Encryption key. No encryption key is used in this example.
dsParams.sqlParams.pszKey      = "";

// Use SmsDataSourceConnect to make a connection to the site database
// and assign the connection handle to hConnect.
stat = SmsDataSourceConnect( &amp;dsParams, phConnect );
    
if (stat == SMS_OK) {
    printf("Connected to database %s on SQL Server %s as %s.\n",
            szDb, szServer, szUser);
}
else {
    printf("Cannot connect to SQL Server. Error code: %d\n", stat);
}

return stat;

}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TREE.EXE</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="sms_tree..exe"></a>TREE.EXE</h2>
<h4>Overview</h4>
<p>
TREE.EXE is a console mode application that builds and displays a tree of the container hierarchy. For each container, the container's type and tag are displayed, followed by a list of filters (possibly empty) which may be acted upon directly at that level of the hierarchy. Following the filter list is a folder list. The folder list gives the folder's type and tag, its filter list, and then a list of scalars for the folders. The scalar display shows the scalar name, type, and access mode. For filters, a list of the filter's attributes are displayed.</p>
<p>
This program does not require a datasource connection. It gathers information about the SMS API objects, or object templates, not about specific instances of the objects. There is an important distinction between an object template and a specific instance of the object. A folder instance represents a particular object in the datasource, for example a specific job. A folder template represents the API's notion of the object. Thus, the characteristics of a System job, for example, are predetermined, but the values will be different for each instance of such a job. The same concepts apply to all containers and all folders.</p>
<p>
This sample illustrates the self-describing nature of the API objects. It is of interest that a program such as this is, by definition, continually up-to-date. That is, if a future version of the API set were to have additional folders, then this same program could report information about those folder objects without being recompiled or relinked.</p>
<h4>Running the Program</h4>
<p>
Simply type TREE.EXE to run this program. A description of the program will be displayed. The user should then press the ENTER key to continue the program. This program has no user-specified options. The program quits once the data has been displayed.</p>
<h4>Functions</h4>
<p>
<a href="sheapi_18ky.htm"><b>SmsAPIVer</b></a><br>
<a href="sheapi_4tmb.htm"><b>SmsEnumContainers</b></a><br>
<a href="sheapi_4p2r.htm"><b>SmsEnumFilters</b></a><br>
<a href="sheapi_8voz.htm"><b>SmsEnumFolders</b></a></p>
<h4>Program Flow</h4>
<p>
This is a relatively simple program. It first gets the number of containers, then it gets the containers themselves, then does the same thing for filters and folders. It then loops through each container and displays all data for the container.</p>
<p>
The following information is displayed for each container:
<ul>
<li>
The container's tag and type</li>
<li>
The number of filters activated by this container</li>
<li>
A description of each of these filters</li>
<li>
The number of folder types that can be contained in the container</li>
<li>
A description of each of these folders</li>
</ul>
<p>
The following information is displayed for each filter:
<ul>
<li>
The filter's tag and type</li>
<li>
The names of the fields used by the filter's tokens</li>
</ul>
<p>
The following information is displayed for each folder:
<ul>
<li>
The folder's tag and type</li>
<li>
Filter details (as in container)</li>
<li>
The number of scalars along with their names, type, and access mode</li>
<li>
A recursive display of any subfolders that can be contained within this folder</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

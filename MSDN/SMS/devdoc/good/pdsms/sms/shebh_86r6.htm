<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample Parser</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="sms_sample_parser"></a>Sample Parser</h1>
<pre><code>//=================================================================
//  MODULE: ethernet.c
//
//  Description:
//
//  Network Monitor parer DLL for 802.3 (ETHERNET).
//
//  Modification History
//
//=================================================================

#include "mac.h"

//=================================================================
//  FUNCTION: RecognizeEthernetFrame()
//
//  Modification History
//
//=================================================================

LPBYTE BHAPI RecognizeEthernetFrame(
    HFRAME            hFrame,
    LPETHERNET        Frame,
    WORD              MacType,
    WORD              BytesLeft,
    LPRECOGNIZEDATA   lpRecognizeData,  // RecognizeData to fill in
    LPBYTE            lpEntriesAdded    // Increment by number of 
                                        // entries added to 
                                        // PropertyInstTable
)
{
    //=========================================================
    //  To verify that this frame is ethernet, we do the following:
    //
    //  1)  Make sure the MacType is MAC_TYPE_ETHERNET.
    //
    //  2)  Make sure the value of BytesLeft does not exceed the
    //      maximum ethernet frame size of 1514.
    //=========================================================

    if ( MacType == MAC_TYPE_ETHERNET &amp;&amp; BytesLeft &lt;= 
                            ETHERNET_FRAME_LENGTH )
    {
        lpRecognizeData-&gt;hPropertyDB = hDatabase;
        lpRecognizeData-&gt;nProtocolOffset = (WORD)(Frame-Frame);
        (*lpEntriesAdded)++;
        return (LPBYTE) Frame-&gt;Info;
    }

    return (LPBYTE) Frame;             //...It's not ethernet!
}

//=============================================================
//  FUNCTION: AttachProperties()
//
//  Modification History
//
//=============================================================

LPBYTE BHAPI AttachEthernetProperties(HFRAME     hFrame,
                                      LPETHERNET Frame,
                                      WORD       MacType,
                                      WORD       BytesLeft)
{
    WORD EthernetTypeField, PropIndex, FrameLength;

    //============================================================
    //  Attach the summary, addresses, and frame length fields.
    //============================================================

    AttachPropertyInstance(hFrame,
                           pit[ETHERNET_SUMMARY].hProperty,
                           sizeof(ETHERNET), Frame,
                           0,0,0);

    AttachPropertyInstance(hFrame,
                           pit[ETHERNET_DST_ADDR].hProperty,
                           sizeof Frame-&gt;DstAddr, &amp;Frame-&gt;DstAddr,
                           0,1,0);

    AttachPropertyInstance(hFrame,
                           pit[ETHERNET_SRC_ADDR].hProperty,
                           sizeof Frame-&gt;SrcAddr, &amp;Frame-&gt;SrcAddr,
                           0,1,0);

    FrameLength = (WORD) GetFrameLength(hFrame);

    AttachPropertyInstanceEx(hFrame,
                             pit[ETHERNET_LENGTH].hProperty,
                             0,
                             NULL,
                             sizeof(WORD),
                             &amp;FrameLength,
                             0,1,0);

    //============================================================
    //  Attach the length/type properties.
    //============================================================

    EthernetTypeField = XCHG(Frame-&gt;Type);

    PropIndex = ((EthernetTypeField &lt;= ETHERNET_DATA_LENGTH) ? 
                 ETHERNET_DATALENGTH : ETHERNET_TYPE);

    AttachPropertyInstanceEx(hFrame,
                             pit[PropIndex].hProperty,
                             sizeof Frame-&gt;Type,
                             &amp;Frame-&gt;Type,
                             sizeof EthernetTypeField,
                             &amp;EthernetTypeField,
                             0,1,0);

    return (LPBYTE) Frame-&gt;Info;
}

//===============================================================
//  FUNCTION: FormatType()
//===============================================================

VOID BHAPI FormatType(LPPROPERTYINST lpPropertyInst, HFRAME hFrame)
{
    register WORD  Etype = lpPropertyInst-&gt;lpPropertyInstEx-&gt;Word[0];
    register DWORD Length, i;

    //============================================================
    //  Format the "ETYPE = 0x600"
    //============================================================

    Length = wsprintf(lpPropertyInst-&gt;szPropertyText, "%s : 0x%.4X",
                      lpPropertyInst-&gt;lpPropertyInfo-&gt;Label, Etype, Etype);

    //=========================================================
    //  Now search for the etype in the Etype table and display
    //  the label if found.
    //=========================================================

    for(i = 0; i &lt; EtypeSetSize; ++i)
    {
        if ( Etypes[i].Value == Etype )
        {
            Length = wsprintf(&amp;lpPropertyInst-&gt;szPropertyText[Length], 
                              " (%s)", Etypes[i].Label);

            return;
        }
    }
}

//====================================================
//  FUNCTION: FormatDataLength()
//
//  Modification History
//
//====================================================

VOID BHAPI FormatDataLength(LPPROPERTYINST lpPropertyInst, HFRAME hFrame)
{
    wsprintf(lpPropertyInst-&gt;szPropertyText,
             "%s : 0x%.4X (%u)",
             lpPropertyInst-&gt;lpPropertyInfo-&gt;Label,
             lpPropertyInst-&gt;lpPropertyInstEx-&gt;Word[0],
             lpPropertyInst-&gt;lpPropertyInstEx-&gt;Word[0]);



}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

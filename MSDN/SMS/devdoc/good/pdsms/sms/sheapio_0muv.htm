<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SMS API Overview</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="sms_sms_api_overview"></a>SMS API Overview</h1>
<p>
In an SMS system, a primary site's site database stores the inventory and configuration information for itself and the sites below it in the site hierarchy. Using the SMS API, your application can access the information in a site database.</p>
<p>
The SMS API enables your application to retrieve, add, and remove data in the SMS database. Using the SMS API, you can access the following objects in an SMS database:
<ul>
<li>
Sites</li>
<li>
Inventoried objects</li>
<li>
Packages</li>
<li>
Jobs</li>
<li>
Queries</li>
<li>
Machine groups</li>
<li>
Site groups</li>
</ul>
<p>
The SMS API represents all SMS objects in terms of <a href="sheapio_1jar.htm">containers</a>, <a href="sheapio_5g1f.htm">folders</a>, and <a href="sheapio_5rar.htm">scalars</a>. This paradigm provides a standard interface to all types of objects.</p>
<p>
Containers hold objects of a specific type. For example, the <a href="sheapio_4zhu.htm">C_SITE</a> container can contain sites.</p>
<p>
Within a container, the instance of an object is represented as a folder. For example, a C_SITE container can contain a set of folders that represent the current site (the site whose SMS database your application is accessing) or sites below the current site in the site hierarchy.</p>
<p>
A folder contains scalars, subfolders, or both. A scalar is the value stored for an attribute of a folder. In addition to a value, each scalar also contains a name, a data type, and an access mode. For example, the folder for a site contains scalars for site name, parent site, depth, status, and site type. The folder for a specific site would have a specific value for each scalar. For example, the folder for the TIM site could contain the string "Tim World" for site name.</p>
<p>
Note that an inventory rules folder (which can be a subfolder within a package folder) contains a single scalar along with one or more tokens that represent the set of files used to identify a package.</p>
<p>
Because some objects themselves can contain multiple components, a folder can also contain subfolders. For example, a site folder can contain subfolders for the domains in the site and any subsites below that site in the site hierarchy.</p>
<p>
To access objects in the site database, you must open a container for the type of object you need to access. When you first open a container, it contains no folders. To retrieve objects from the site database, you must <a href="sheapio_8bn7.htm"><i>populate</i></a> the container with objects from a site database. The objects are represented as folders in the container. After the container has been populated, you can access the folders and their properties.</p>
<p>
<a href="sheapio_19f7.htm">Filters</a> can also be set on a container. Filters define the criteria used to select the objects you want to find. If no filter is set for a container, all objects (that is, all objects of the type supported by the container) are returned when the container is populated. There are eight types of filters available. The types of filters that you can set are dependent on the container. For example, filters of type ARCHITECTURE_FILTER, MACHINE_FILTER, GROUP_FILTER, and ATTRIBUTE_FILTER can be set on a machine container.</p>
<p>
Your application can configure a filter by adding tokens to the filter. A token lets you specify a condition used to select the objects you want to find. Within a filter, tokens can be connected together using AND or OR operators. For example, a token can be added to the ARCHITECTURE_FILTER of a machine container to find objects that have the Personal Computer architecture.</p>
<p>
Note that inventory rules folders use tokens in the same way that filters do—except that each token contains the file name and file attributes used to identify a file.</p>
<p>
In addition, filters of type MACHINE_FILTER can be added to the site database by using a filter container. MACHINE_FILTER filters are added as queries in the site database. Your application can also retrieve queries stored in the site database by opening a filter container. When the filter container is opened, it is populated with the queries stored in the site database. These queries are represented as persistent filters in the filter container. Currently, the SMS API does not support deletion of persistent filters from the site database.</p>
<p>
The following list shows the hierarchy of the containers and folders supported by the SMS API. Click an item to display details about the object.
<dl>
<dt>
<a href="sheapio_4zhu.htm">Site container</a></dt>
<dd>
<a href="sheapio_0o8i.htm">Site folder</a> (Read-only)<br>
    <a href="sheapio_0o8i.htm">Site folder</a> (Read-only)<br>
    <a href="sheapio_2b76.htm">Domain folder</a> (Read-only)<br>
        <a href="sheapio_04z6.htm">Machine folder</a> (Read-only)<br>
            <a href="sheapio_91ki.htm">Group folder</a> (Read-only)</dd>
<dt>
<a href="sheapio_3mlu.htm">Machine container</a></dt>
<dd>
<a href="sheapio_04z6.htm">Machine folder</a> (Read-only)<br>
    <a href="sheapio_91ki.htm">Group folder</a> (Read-only)</dd>
<dt>
<a href="sheapio_5elu.htm">Package container</a></dt>
<dd>
<a href="sheapio_9rci.htm">Package folder</a> (Read/Create/Delete)<br>
    <a href="sheapio_9igi.htm">Workstation Command Line folder</a> (Read/Create/Delete)
<p>
<a href="sheapio_02lu.htm">Program Item folder</a> (Read/Create/Delete)

<p>
<a href="sheapio_0cvm.htm">Inventory Rules folder</a> (Read/Create/Delete)
</dd>
<dt>
<a href="sheapio_1gky.htm">Job container</a></dt>
<dd>
<a href="sheapio_335e.htm">Run Command On Workstation job folder</a> (Read/Create/Delete)
<p>
<a href="sheapio_8dde.htm">Share Package On Server job folder</a> (Read/Create/Delete)

<p>
<a href="sheapio_0hwy.htm">Remove Package From Server job folder</a> (Read/Create/Delete)

<p>
<a href="sheapio_3fw2.htm">System job folder</a> (Read-only)
</dd>
<dt>
<a href="sheapio_8zoy.htm">Machine Group container</a></dt>
<dd>
<a href="sheapio_4b3m.htm">Machine Group folder</a> (Read-only)<br>
    <a href="sheapio_4b3m.htm">Machine Group folder</a> (Read-only)<br>
    <a href="sheapio_04z6.htm">Machine folder</a> (Read-only)<br>
        <a href="sheapio_91ki.htm">Group folder</a> (Read-only)</dd>
<dt>
<a href="sheapio_3oky.htm">Site Group container</a></dt>
<dd>
<a href="sheapio_2bzm.htm">Site Group folder</a> (Read-only)<br>
    <a href="sheapio_2bzm.htm">Site Group folder</a> (Read-only)<br>
    <a href="sheapio_0o8i.htm">Site folder</a> (Read-only)<br>
       <a href="sheapio_0o8i.htm">Site folder</a> (Read-only)<br>
       <a href="sheapio_2b76.htm">Domain folder</a> (Read-only)<br>
           <a href="sheapio_04z6.htm">Machine folder</a> (Read-only)<br>
               <a href="sheapio_91ki.htm">Group folder</a> (Read-only)
</dd>
</dl>
<p>
The folders within the site, site group, machine, and machine group containers are read-only. MIF files are used to maintain (create, update, and delete) the machine objects. For more information about MIF files, see <a href="she02_05q1.htm">Extending the Inventory</a>. The site and domain objects are maintained by the SMS system. Site groups and machine groups can be created, modified, and deleted by using the SMS Administrator.</p>
<p>
The package and job containers allow read, create, and delete operations. For example, you can use the SMS API to view the existing packages and jobs within an SMS database, as well as to create new packages and jobs.</p>
<p>
The functions in the SMS API behave in a uniform manner:
<ul>
<li>
All functions return a status code (<a href="sheapi_6enn.htm">SMS_STATUS</a>).</li>
<li>
To return values, the functions use a reference parameter.</li>
<li>
Except for the static information functions, all functions are handle-based.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Displaying an Architecture's Objects in the Sites Window</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="sms_displaying_an_architecture.92.s_objects_in_the_sites_window"></a>Displaying an Architecture's Objects in the Sites Window</h3>
<p>
Depending on how you define a custom architecture, you can choose whether to display custom architectures in the Sites window.</p>
<p>
To create an object that is displayed in the Sites window, the object's architecture must have an Identification group with the following five attributes defined:
<dl>
<dt>
<b>Site</b></dt>
<dd>
The site containing the object.</dd>
<dt>
<b>Domain</b></dt>
<dd>
The domain containing the object.</dd>
<dt>
<b>Name</b></dt>
<dd>
The name used to identify the object.</dd>
<dt>
<b>SystemType</b></dt>
<dd>
The type of object.</dd>
<dt>
<b>SystemRole</b></dt>
<dd>
The role the object has in the SMS system.
</dd>
</dl>
<p>
An object with these attributes defined is displayed in the Sites window within the specified Site and Domain.</p>
<p>
If a custom architecture does not have these attributes defined, its objects are not displayed in the Sites window; you must display these objects by using a query.</p>
<h4>Object Syntax</h4>
<p>
An SMS object is a specific item that uses a specific architecture. For example, the SMS system uses the Personal Computer architecture to inventory computers as objects. An object contains groups. For SMS, an object must have an Identification group and an Architecture group.</p>
<p>
An object definition within a MIF file starts with the line <b>Start Component</b> and ends with the line <b>End Component</b>. Within an object definition, you should have the following entry:
<dl>
<dt>
<b>Name</b></dt>
<dd>
A string (enclosed by quotation marks) that labels the object.
</dd>
</dl>
<p>
Example of an object:</p>
<pre><code>Start Component
    Name = "EMPLOYEE"
    Start Group
        Name = "Architecture"
        ID = 1
        Class = "MICROSOFT|ARCHITECTURE|1.0"
        Start Attribute
            Name = "ArchitectureName"
            ID = 1
            Access = READ-ONLY
            Storage = SPECIFIC
            Type = String(10)
            Value = "Employee"
        End Attribute
    End Group
    Start Group
        Name = "Identification"
        ID = 2
        Class = "MICROSOFT|IDENTIFICATION|1.0"
        Start Attribute
            Name = "Employee Name"
            ID = 1
            Access = READ-ONLY
            Storage = SPECIFIC
            Type = String(32)
            Value = "Mitch Duncan"
        End Attribute
    End Group
End Component</code></pre>
<h4>Group Syntax</h4>
<p>
A group is a set of one or more attributes. When the inventory for an object is displayed in the object's Properties window, all the groups for the object are displayed in the left pane. The attributes for the selected group are displayed in the right pane.</p>
<p>
Objects (called Components in the DMTF structure) for every architecture must have an Identification group and an Architecture group.</p>
<p>
A group starts with the line <b>Start Group</b> and ends with the line <b>End Group</b>. Within the group, specify the following entries:
<dl>
<dt>
<b>Name</b></dt>
<dd>
A string (enclosed by quotation marks) that labels the group. When the group is displayed in the Properties window, this string is used to label the group in the left pane.</dd>
<dt>
<b>ID</b></dt>
<dd>
A number that identifies the group. The ID must be unique for each group within the object. The ID is an integer value. Group IDs must be 1 or greater.</dd>
<dt>
<b>Key</b></dt>
<dd>
Applies only to multiple-instance groups. For example, an object such as a disk drive can have multiple instances on a computer. One or more keys are used to differentiate the instances. For example, the Disk Drive group has a key defined for the Drive Letter attribute. The key entry specifies one or more identifiers for the attributes used to uniquely identify an instance of a group. If you have multiple keys, you must separate them with commas. If a group can have only a single instance, then no key should be defined.</dd>
<dt>
<b>Class</b></dt>
<dd>
A required string describing the source of the group definition.
</dd>
</dl>
<p>
A group also contains one or more attributes.</p>
<p>
Example of a group:</p>
<pre><code>    Start Group
        Name = "Employee Name"
        ID = 1
        Class = MICROSOFT|EMPLOYEE NAME|1.0
        Start Attribute
            Name = "Last Name"
            ID = 1
            Access = READ-ONLY
            Storage = SPECIFIC
            Type = String(32)
            Value = "Smith"
        End Attribute
        Start Attribute
            Name = "First Name"
            ID = 2
            Access = READ-ONLY
            Storage = SPECIFIC
            Type = String(32)
            Value = "John"
        End Attribute
    End Group
 </code></pre>
<h4>Identification Group Syntax</h4>
<p>
Objects for every architecture must have an Identification group. The Identification group can have any number of attributes. However, you should ensure that all attributes are included in all objects that are part of a single custom architecture.</p>
<pre><code>    Start Group
        Name = "Identification"
        ID = 1
        Class = "MICROSOFT|IDENTIFICATION|1.0"
        Start Attribute
            Name = "Employee Name"
            ID = 1
            Access = READ-ONLY
            Storage = SPECIFIC
            Type = String(32)
            Value = "Mitch Duncan"
        End Attribute
    End Group
 </code></pre>
<h4>Architecture Group Syntax</h4>
<p>
Objects for every architecture must also have an Architecture group. The Architecture group contains one attribute. The value of the ArchitectureName attribute should be the label you want to display for the architecture in the SMS Administrator. For example, when you view an object with a custom architecture, the ArchitectureName attribute is displayed in the Properties window title bar.</p>
<pre><code>    Start Group
        Name = "Architecture"
        ID = 1
        Class = "MICROSOFT|ARCHITECTURE|1.0"
        Start Attribute
            Name = "ArchitectureName"
            ID = 0
            Access = READ-ONLY
            Storage = SPECIFIC
            Type = String(10)
            Value = "Employee"
        End Attribute
    End Group
 </code></pre>
<h4>Attribute Syntax</h4>
<p>
When the inventory for an object is displayed in the object's Properties window, all the groups for the object are displayed in the left pane. The attributes for the selected group are displayed in the right pane.</p>
<p>
An attribute starts with the line <b>Start Attribute</b> and ends with the line <b>End Attribute</b>. Within the attribute, you should have the following entries:
<dl>
<dt>
<b>Name</b></dt>
<dd>
A string (enclosed by quotation marks) that labels the attribute. When the attribute is displayed in the Properties window, this string is used to label the attribute in the right pane.</dd>
<dt>
<b>ID</b></dt>
<dd>
A number that identifies the attribute. The ID must be unique for each attribute within the group. The ID is an integer value.</dd>
<dt>
<b>Access</b></dt>
<dd>
Determines the access type of the table where the attribute will be stored. Values can be READ-ONLY, READ-WRITE, and WRITE-ONLY. The Access statement is optional and defaults to READ-ONLY.</dd>
<dt>
<b>Storage</b></dt>
<dd>
Assists management applications to optimize storage requirements. Values can be common or specific. The Storage statement is optional.</dd>
<dt>
<b>Type</b></dt>
<dd>
The data type used to store the value of the attribute. There are two data types. Counter is an integer. String is a character string. For strings you must specify the maximum length for the string.
<p>
The SQL Server database has a limit of 255 characters for any attribute value. Any string longer than 255 characters will be truncated. In addition, any values longer than the originally defined length will be silently truncated. For example, if the attribute "Employee Name" is defined as "string(40)", SMS will add only the first 40 characters for an "Employee Name" value that is longer than 40 characters.

<p>
The SMS system uses the first definition of Type. For example, if you first defined "Employee Name" as "string(40)", the SMS system will always use that type. You cannot change the Type value after you have first defined it.
</dd>
<dt>
<b>Value</b></dt>
<dd>
The value assigned to the attribute. The value must be in the form specified by the Type entry. Strings must be enclosed within quotation marks. Counters must be decimal integers. The Value statement is optional.
</dd>
</dl>
<p>
Example of an attribute:</p>
<pre><code>        Start Attribute
            Name = "Hours Worked"
            ID = 1
            Access = READ-ONLY
            Storage = SPECIFIC
            Type = Counter
            Value = 500
        End Attribute
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Filters</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="sms_filters"></a>Filters</h1>
<p>
Before your application populates a <a href="sheapio_1jar.htm">container</a> with objects from the site database, one or more filters can be set on the container. Filters define the criteria used to select the objects to retrieve from the site database.</p>
<p>
There are eight types of filters available. The types of filters that your application can set are dependent on the container. For example, filters of type ARCHITECTURE_FILTER, MACHINE_FILTER, GROUP_FILTER, and ATTRIBUTE_FILTER can be set on a machine container.</p>
<p>
Your application can configure a filter by adding tokens to the filter. There are two types of tokens: expression tokens and control tokens.</p>

<p>
<a name="sms_expression_token"></a>An <i>expression token</i> defines how to search for objects that have a specified relationship to a specified value for a specified attribute. An expression token is made up of an attribute, a relational operator, and a comparison value. A relational operator (such as "is equal to" or "is like") defines how the specified value should be compared with the actual value stored for the specified attribute. Depending on the type of filter that contains the token, an expression token's <b>TOKEN</b> structure uses the <b>szName</b>, <b>szArchitecture</b>, <b>szGroupClass</b>, and <b>szAttributeName</b> members to defined the attribute. For example, job filters (and most other filters) use the <b>szName</b> member to specify the attribute, whereas machine filters use the <b>szArchitecture</b>, <b>szGroupClass</b>, and <b>szAttributeName</b> members.</p>

<p>
<a name="sms_control_token"></a>A <i>control token</i> can be a logical operator or parentheses. A logical operator connects two expression tokens, two subclauses, or a combination of an expression and a subclause. A logical operator defines the relationship between two adjacent expressions or subclauses. Parentheses enable expressions to be grouped together.</p>
<p>
Your application can add expression tokens to a filter, using the <a href="sheapi_6c6m.htm"><b>SmsAddToken</b></a> function. When an expression token is added to a filter, a control token for a logical operator is also implicitly added at the same time.</p>
<p>
The <a href="sheapi_29o3.htm"><b>SmsManipulateTokens</b></a> function can be used to group, ungroup, delete, or exclude the specified tokens within a filter.</p>
<p>
After your application sets the tokens for a filter, it can apply the filter to a container by using the <a href="sheapi_3z5e.htm"><b>SmsSetFilter</b></a> function. When the container is populated, the set of filters applied to the container determine the objects that are retrieved from the site database.</p>
<p>
There are also two classes of filters:</p>

<dl>
<dt>
<a name="sms_transient_filters"></a>Transient filters</dt>
<dd>
Filters that are created by your application and that exist only for the lifetime of the process that created them.</dd>
<dt>
<a name="sms_persistent_filters"></a>Persistent filters</dt>
<dd>
Filters within a filter container that have been added to the site database. Persistent filters can be loaded by other processes. A persistent filter also contains scalars that are used to label the filter within the site database. Currently, only filters of type MACHINE_FILTER can be added to the site database through a filter container. MACHINE_FILTER filters are added as queries in the site database. Your application can also retrieve queries stored in the site database by opening a filter container. When the filter container is opened, it is populated with the queries stored in the site database. These queries are represented as filters in the filter container. Currently, the SMS API does not support deletion of persistent filters from the site database.
</dd>
</dl>

<p>&nbsp;</p></body>
</HTML>

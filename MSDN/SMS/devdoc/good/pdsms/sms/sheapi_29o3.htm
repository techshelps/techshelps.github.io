<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SmsManipulateTokens</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="sms_smsmanipulatetokens"></a>SmsManipulateTokens</h1>
<p>
The <b>SmsManipulateTokens</b> function deletes, excludes, groups, or ungroups <a href="sheapio_2sfn.htm">tokens</a> within a <a href="sheapio_19f7.htm">filter</a> or an <a href="sheapio_0cvm.htm">inventory rules folder</a>.</p>
<pre><code><b>SMS_STATUS SmsManipulateTokens(
  HANDLE</b><i> hFilter</i><b>, </b>// Handle to filter or inventory rules folder.
<b>  DWORD</b><i> dwFlags</i><b>,  </b>// Flag that specifies the operation to perform on 
                  // a range of tokens.
<b>  INT</b><i> iStart</i><b>,     </b>// Index of the token at the beginning of the 
                  // range.
<b>  INT</b><i> iEnd        </i>// Index of the token at the end of the range.
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hFilter</i></dt>
<dd>
Specifies the handle to the filter or inventory rules folder where you want to perform the token operation.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Specifies the operation to perform on the specified range of tokens. Four operations are supported:
<dl>
<dt>
TOK_GROUP</dt>
<dd>
Groups the specified range of tokens into a subclause grouped together with parentheses.</dd>
<dt>
TOK_UNGROUP</dt>
<dd>
Ungroups the the specified range of tokens. Note that <i>iStart</i> and <i>iEnd</i> must specify a range of tokens that is an existing group.</dd>
<dt>
TOK_DELETE</dt>
<dd>
Deletes the specified range of tokens.</dd>
<dt>
TOK_GROUP_NOT</dt>
<dd>
Groups the specified range of tokens into a subclause and selects the group of objects that do not satisfy the conditions in that subclause.
</dd>
</dl>
</dd>
<dt>
<i>iStart</i></dt>
<dd>
Specifies the index of the token at the beginning of the range of tokens. Note that the value AT_START can be used to specify the index for first token in a filter or inventory rules folder.
<p>
Note that the indexes for tokens within a filter or inventory rules folder start with zero.
</dd>
<dt>
<i>iEnd</i></dt>
<dd>
Specifies the index of the token at the end of the range of tokens. Note that the value AT_END can be used to specify the index for last token in a filter or inventory rules folder.
</dd>
</dl>
<h4>Return Values</h4>
<p>
The <b>SmsManipulateTokens</b> function returns a status code SMS_STATUS. If successful, the function returns a status of SMS_OK. Otherwise, it returns one of the following manifest constants:
<dl>
<dt>
SMS_INVALID_HANDLE</dt>
<dd>
The specified handle is not a valid filter handle or inventory rules folder handle.</dd>
<dt>
SMS_UNSUPPORTED</dt>
<dd>
The TOK_GROUP_NOT flag is specified for a folder.</dd>
<dt>
SMS_PARAMETER_ERROR</dt>
<dd>
Value set for <i>dwFlags</i> is an unrecognized value.</dd>
<dt>
SMS_RANGE_ERROR</dt>
<dd>
The specified token indexes are outside of the range of tokens in the filter or the inventory rules folder. Or the operation specified by <i>dwFlags</i> cannot be performed on the specified range of tokens.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The parameters <i>iStart</i> and <i>iEnd</i> must specify a range of tokens that is valid for the operation specified by <i>dwFlags</i>:
<dl>
<dt>
TOK_DELETE</dt>
<dd>
To delete a range of tokens, <i>iStart</i> and <i>iEnd</i> must specify a range of tokens that constitutes a clause. A <i>clause</i> is the combination of an expression token (or subclause) and its adjacent logical operator. However, if the filter or inventory rules folder contains only one expression token, your application can delete the single token by specifying a range containing only that token (<i>iStart</i> equal to zero and <i>iEnd</i> equal to zero). To delete all tokens in a filter or inventory rules folder, your application can also use the range <i>iStart</i> equal to AT_START and <i>iEnd</i> equal to AT_END.
<p>
For example, the following tokens are in an inventory rules folder:

<pre><code>WINWORD.EXE
AND
WINWORD.INF
AND
WINWORD.INI
</code></pre>

<p>
A range of <i>iStart</i> equal to 0 and <i>iEnd</i> equal to 1 leaves the following tokens:

<pre><code>WINWORD.INF
AND
WINWORD.INI
</code></pre>

<p>
A range of <i>iStart</i> equal to AT_START and <i>iEnd</i> equal to AT_END deletes all the tokens.

<p>
A range of <i>iStart</i> equal to 3 and <i>iEnd</i> equal to 5 returns an SMS_RANGE_ERROR (and no tokens are removed) because if the specified range were removed, an invalid set of tokens would remain in the folder.
</dd>
<dt>
TOK_GROUP</dt>
<dd>
To group a range of tokens, <i>iStart</i> and <i>iEnd</i> must specify a range of tokens that constitutes a subclause. A <i>subclause</i> is a set of expression tokens that can be logically treated as a single expression token. A subclause starts and ends with an expression token.
<p>
For example, the following tokens are in an inventory rules folder:

<pre><code>WINWORD.EXE
AND
WINWORD.INF
AND
WINWORD.INI
</code></pre>

<p>
A range of <i>iStart</i> equal to 0 and <i>iEnd</i> equal to 2 groups the following tokens:

<pre><code>(
   WINWORD.EXE
   AND
   WINWORD.INF
)
AND
WINWORD.INI
</code></pre>

<p>
A range of <i>iStart</i> equal to 1 and <i>iEnd</i> equal to 3 returns an SMS_RANGE_ERROR (and no tokens are grouped) because if the specified range were grouped, an invalid set of tokens would be formed in the folder.
</dd>
<dt>
TOK_UNGROUP</dt>
<dd>
To ungroup a range of tokens, <i>iStart</i> and <i>iEnd</i> must specify a range of tokens that is an existing group. A group starts with a TOKEN_OPENPAREN token and ends with a TOKEN_CLOSEPAREN token. The range must have an <i>iStart</i> index that specifies a TOKEN_OPENPAREN token and an <i>iEnd</i> index that specifies a TOKEN_CLOSEPAREN token; otherwise, <b>SmsManipulateTokens</b> does not perform any action and returns SMS_RANGE_ERROR.
<p>
For example, if the following tokens are in an inventory rules folder:

<pre><code>WINWORD.EXE
AND
(
   WINWORD.INF
   AND
   WINWORD.INI
)
</code></pre>

<p>
A range of <i>iStart</i> equal to 2 and <i>iEnd</i> equal to 6 results in the following set of tokens:

<pre><code>WINWORD.EXE
AND
WINWORD.INF
AND
WINWORD.INI
</code></pre>

<p>
A range of <i>iStart</i> equal to 1 and <i>iEnd</i> equal to 3 returns an SMS_RANGE_ERROR (and no tokens are ungrouped) because if the specified range were ungrouped, an invalid set of tokens would be formed in the folder.
</dd>
<dt>
TOK_GROUP_NOT</dt>
<dd>
The rules for the use of <i>iStart </i>and <i>iEnd </i>with TOK_GROUP_NOT are the same as for TOK_GROUP. TOK_GROUP_NOT groups the specified range of tokens and precedes them with NOT IN, which has the effect of inverting the selection criteria of the grouped tokens. This flag can only be used with persistent filters (currently, only filters of the type MACHINE_FILTER). 
</dd>
</dl>
<p>
The indexes of the tokens within the filter or inventory rules folder are adjusted according to the operation performed. For example, a grouping of a range of tokens causes control tokens to be added for the opening and closing parentheses, and the indexes of the tokens following index <i>iStart</i> are adjusted to accommodate the addition of those control tokens. The indexes of the tokens starting at index <i>iStart</i> and ending at <i>iEnd</i> are incremented by 1. At the <i>iStart</i> index, the TOKEN_OPENPAREN token is added. After the <i>iEnd</i> token, the TOKEN_CLOSEPAREN is added. The indexes of tokens after <i>iEnd</i> are incremented by 2.</p>
<p>&nbsp;</p></body>
</HTML>

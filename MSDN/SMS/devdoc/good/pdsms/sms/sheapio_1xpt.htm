<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Create a new folder</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="sms_create_a_new_folder_proc1"></a>Create a new folder</h3>
<h5><img src="../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a folder</h5>
<ol>
<li>
Use the <a href="sheapi_9mlu.htm"><b>SmsCreateFolder</b></a> function to create a new folder. The <b>SmsCreateFolder</b> function can create folders within a container (top-level folders) or a subfolder within a folder.<p>
The <b>SmsCreateFolder</b> function takes four parameters:
<ul>
<li>
The handle to the parent of the new folder (the parent can be a container or a folder)</li>
<li>
The type of folder to create</li>
<li>
An identifier for the folder</li>
<li>
A pointer to a handle that is assigned the handle to the new folder. You use the handle to manage the new folder.</li>
</ul>
<p>
After a new folder has been created, the folder is empty, that is, it has no scalars set within it. Using the <a href="sheapi_62sy.htm"><b>SmsSetScalar</b></a> function, your application must set the scalars for the new folder. A new folder also does not contain any subfolders. In addition, a new folder created by <b>SmsCreateFolder</b> is not linked to its parent folder (you use the <a href="sheapi_88tu.htm"><b>SmsLinkFolder</b></a><b> </b>function to link a new folder to its parent). A new folder also is not added to the site database until you use the <a href="sheapi_2s36.htm"><b>SmsCommitFolder</b></a> function to write the folder to the database.
<p>
Example:
<pre><code>// This example shows how to create a 
// Run Command On Workstation job 
// folder for a job container.

cType = C_JOB; // Set container type to job.
// Open the job container.
stat = SmsOpenContainer( cType,   
                         hConnect,
                         &amp;hContainer);

HANDLE hFolder; // Declare a handle for the new folder.
stat = SmsCreateFolder ( hContainer,
                         F_INSTALLJOB, // Folder type is Run 
                                       // Command On 
                                       // Workstation.
                         NULL,         // SMS system assigns 
                                       // ID. Therefore, this 
                                       // parameter is ignored.
                         &amp;hFolder     // Handle to new folder.
                        );
 </code></pre>
</li>
<li>
Set the scalars for the new folder.<p>
Use the <a href="sheapi_62sy.htm"><b>SmsSetScalar</b></a> function to set the value of a scalar.
<p>
To set the value of a scalar, both the scalar and its folder must have an access right of ACCESS_MODIFY or ACCESS_CREATE. If you do not have ACCESS_MODIFY or ACCESS_CREATE right to the scalar, <b>SmsSetScalar</b> returns an SMS_SCALAR_NO_UPDATE value. If you do not have access to the folder, the <b>SmsSetScalar</b> returns an SMS_FOLDER_NO_UPDATE value.
<p>
To get information (such as name, data type, access rights, and so on) about all scalars within a folder, use the <a href="sheapi_2nua.htm"><b>SmsDescribeFolder</b></a> function.
<p>
The <b>SmsSetScalar</b> function takes two parameters:
<ul>
<li>
The handle to the folder containing the scalar</li>
<li>
A pointer to a <b>SCALAR</b> structure that contains the scalar data to be set</li>
</ul>
<p>
Example:
<pre><code>// Set the Package ID scalar for 
// a Run Command On Workstation job.
SCALAR sc;                  // Declare SCALAR struct to hold 
                            // scalar data.
char *szScalarName = "Package ID"; // Name of the scalar to set.
SCALARTYPE scType = SCALAR_STRING; // Data type of scalar.
char *pszScalarValue = "TIM00001"; // Value to set.
// Assign the scalar data to the sc structure.
sc.pszName = szScalarName;
sc.scType  = scType;
sc.dwLen = sizeof(pszScalarValue)-1;
sc.pszValue = pszScalarValue;

// Use SmsSetScalar to use the sc struct to set 
// the scalar for the folder.
stat = SmsSetScalar( hFolder, // Handle to folder containing 
                              // the scalar to set.
                     &amp;sc      // Pointer to SCALAR struct 
                              // containing value to set.
                   );
 </code></pre>
</li>
<li>
After setting the scalars, use the <a href="sheapi_88tu.htm"><b>SmsLinkFolder</b></a> function to link the folder to its parent (the parent is the container or folder within which the new folder was created). Note that linking a folder only associates the folder to its parent within the application's memory—the folder is not written to the site database.<p>
Example:
<pre><code>// Link the new folder to its parent.
stat = SmsLinkFolder( hFolder );
</code></pre>
</li>
<li>
Use the <a href="sheapi_2s36.htm"><b>SmsCommitFolder</b></a> function to write the new folder to the site database.<p>
Some folders require their direct parent folders to be committed in order to be written to the site database. If a folder requires its parent to be committed, the <b>SmsCommitFolder</b> function will return a status of SMS_PARENT_NEEDS_COMMIT.
<p>
Example:
<pre><code>// Write the new folder to the site database.
stat = SmsCommitFolder( hFolder );
</code></pre>
<p>
Note that the new folder is not written to the site database until the application calls the <b>SmsCommitFolder</b> function for that folder. If you do not want to write the new folder into the database, you can use the <b>SmsCloseFolder</b> function to deallocate the memory used by the new folder.
</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

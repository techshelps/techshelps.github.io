<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Create a persistent filter</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="sms_create_a_persistent_filter_proc2"></a>Create a persistent filter</h3>
<p>
Machine filters are the only type of persistent filters currently supported by the SMS API. The steps to create a persistent filter are the same as the steps for creating a transient machine filter, with addition of two steps to:
<ul>
<li>
Set the scalars for the persistent filter.</li>
<li>
Commit the machine filter to the filter container (that is, write the machine filter to the site database). After a machine filter is committed to a filter container, that filter becomes a persistent filter.</li>
</ul>
<h5><img src="../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a persistent filter</h5>
<ol>
<li>
Use the <a href="sheapi_3gvm.htm"><b>SmsCreateFilter</b></a> function to create a machine filter.<p>
The <b>SmsCreateFilter</b> function takes three parameters:
<ul>
<li>
The type of filter.</li>
<li>
A handle to the database connection.</li>
<li>
A pointer to a handle that is assigned the handle to the new filter. You use the handle to manage the filter.</li>
</ul>
<p>
Example:
<pre><code>// Create a machine filter to stored as 
// a persistent filter, that is, a query.
HANDLE hNewFilter;
stat = SmsCreateFilter( MACHINE_FILTER, // Machine filter.
                        hConnect,   // Handle to database
                                    // connection.
                        &amp;hNewFilter // Assign handle to new filter
                      );            // to hNewFilter.
</code></pre>
</li>
<li>
Use the token functions to add tokens to the machine filter. Each token represents an expression used to identify the objects to find.<p>
To add a token to a filter, use the <a href="sheapi_6c6m.htm"><b>SmsAddToken</b></a> function.
<p>
The <b>SmsAddToken</b> function takes four parameters:
<ul>
<li>
The handle to the filter</li>
<li>
The operator control token, which specifies how the expression token is connected to the adjacent expression token or subclause</li>
<li>
A pointer to the structure containing the expression token</li>
<li>
The location where the token is to be inserted</li>
</ul>
<p>
Example:
<pre><code>// Add a token to the machine filter that
// finds all computers with a 486 processor.

TOKEN Token;
// Clear the Token structure.
memset( &amp;Token, 0, sizeof (TOKEN) );

// Set the expression token to 
// "Attribute Processor Name from group MICROSOFT|PROCESSOR|1.0 
// contains 486 (ie, Processor Name is like %486%)".

// Set the architecture, groupclass, and attribute.
strcpy( Token.szArchitecture, "Personal Computer");
strcpy( Token.szGroupClass, "MICROSOFT|PROCESSOR|1.0");
strcpy( Token.szAttributeName, "Processor Name");
// Set the operator used to evaluate the expression.
Token.dwOp = QOP_STR_LIKE; // Use the 'is like' operator.
// Set the value to evaluate.
strcpy( Token.szValue, "%486%"); 

// Add the token to the filter.
stat = SmsAddToken( hFilter, // Specifies the handle to filter.
                    OP_AND,  // Use the AND control token to 
                             // connect the expression to 
                             // adjacent expressions.
                    &amp;Token,  // Specifies the structure for
                              // the expression token.
                    AT_END   // Add the token to the end of 
                             // the filter.
                  );
</code></pre>
</li>
<li>
Set the scalars for the persistent filter.<p>
A persistent filter has four scalars:
<dl>
<dt>
<b>Query Key</b></dt>
<dd>
An eight-character identifier that the SMS system assigns to the query when it is first added to the site database. This scalar must be set by the SMS system. Your application cannot set this scalar.</dd>
<dt>
<b>Name</b></dt>
<dd>
Corresponds to the Query Name in the Query Properties of the query in the SMS Administrator. This scalar must be set by your application when adding a persistent filter to the site database.</dd>
<dt>
<b>Comment</b></dt>
<dd>
Corresponds to Comment in the Query Properties of the query in the SMS Administrator. This scalar is optional.</dd>
<dt>
<b>Architecture</b></dt>
<dd>
Corresponds to Architecture in the Query Properties of the query in the SMS Administrator. This scalar must be set by your application when adding a persistent filter to the site database.
</dd>
</dl>
<p>
<b>Name</b> and <b>Architecture</b> must be set by your application before a persistent filter is added to the site database by using <a href="sheapi_6mcy.htm"><b>SmsCommitFilter</b></a>.
<p>
Use the <a href="sheapi_62sy.htm"><b>SmsSetScalar</b></a> function to set the value of a scalar.
<p>
The <b>SmsSetScalar</b> function takes two parameters:
<ul>
<li>
The handle to the filter</li>
<li>
A pointer to a <b>SCALAR</b> structure that contains the scalar data to be set</li>
</ul>
<p>
Example:
<pre><code>// Set the Name of the persistent filter (query).
SCALAR sc;                  // Declare SCALAR struct to hold 
                            // scalar data.
char *szScalarName = "Name"; // Name of the scalar to set.
SCALARTYPE scType = SCALAR_STRING; // Data type of scalar.
char *pszScalarValue = "Find all 486s"; // Value to set.
// Assign the scalar data to the sc structure.
sc.pszName = szScalarName;
sc.scType  = scType;
sc.dwLen = sizeof(pszScalarValue)-1;
sc.pszValue = pszScalarValue;

// Use SmsSetScalar to use the sc struct to 
// set the scalar for the filter.
stat = SmsSetScalar( hFilter,   // Handle to filter containing 
                                 // the scalar to set.
                     &amp;sc         // Pointer to SCALAR struct 
                                 // containing value to set.
                   );
</code></pre>
</li>
<li>
Use the <a href="sheapi_6mcy.htm"><b>SmsCommitFilter</b></a> function to write the new filter to the site database.<p>
The <b>SmsCommitFilter</b> function takes two parameters:
<ul>
<li>
The handle to the filter to commit</li>
<li>
The handle to the filter container that contains the filter</li>
</ul>
<p>
Example:
<pre><code>// Write the machine filter to the site database.
stat = SmsCommitFilter( hFilter,     // Handle to filter.
                        hFContainer  // Handle to filter 
                                     // container.
                      );
</code></pre>
<p>
Note that the new machine filter is not written to the site database until the application calls the <b>SmsCommitFilter</b> function for that filter.
</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

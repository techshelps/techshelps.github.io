<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How SMSVIEW Works</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="sms_how_smsview_works"></a>How SMSVIEW Works</h1>
<p>
The SMS system database stores computer inventory in multiple tables in order to store the data efficiently. However, this efficient design can make it difficult to view the computer inventory directly from other applications.</p>
<p>
The inventory for each computer is stored in the MachineDataTable. However, the specific inventory data (such as group names, attribute names, and the values for groups and attributes) is stored in other tables. The MachineDataTable has keyed pointers to these other tables. The SMSVIEW program creates views that resolve these keyed pointers so that you can view the computer inventory easily with other applications. For a table of some common views (and their fields) that can be generated by SMSVIEW, see <a href="she04_5u7r.htm">Views Created by SMSVIEW</a>.</p>
<p>
SMSVIEW.EXE is used to read the GroupMap table and to create views that make it easier to use the computer inventory data. A view is created for each group. The view for a group joins the group's common table (COMM), the group's specific table (SPEC), and the MachineDataTable. </p>
<p>
The views are created using the following naming convention: </p>
<p>
<b>v</b><i>Grouptablename</i></p>
<p>
where
<dl>
<dt>
<b>v</b></dt>
<dd>
Is a literal v.</dd>
<dt>
<i>Grouptablename </i></dt>
<dd>
Is the group table name without the _COMM or _SPEC suffix.
</dd>
</dl>
<p>
For example, the view for the Network group with the table names of Network_COMM and Network_SPEC becomes <b>vNetwork</b>.</p>
<p>
The views use the MachineDataTable as the driving table and then do outer joins to the COMM and SPEC tables that contain the particular group information (such as network, video, and so on). Outer joins are necessary because some or all group attributes can be in either the SPEC or COMM table. Note that when outer joins are used, you cannot filter on any attribute from the SPEC or COMM tables by using a <b>WHERE</b> clause. When the created view uses an outer join, if you filter out one of the SPEC or COMM entries, the results set will still have a record for the MachineDataTable entry with blank values for the filtered SPEC or COMM entry. If you want to filter on the created views, use the <b>HAVING</b> clause, which works on the results set after the join is completed.</p>
<p>&nbsp;</p></body>
</HTML>

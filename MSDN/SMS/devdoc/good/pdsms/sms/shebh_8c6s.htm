<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Labeled Set</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="sms_the_labeled_set"></a>The Labeled Set</h2>
<p>
Assume that you have a BYTE field that could be a distinct set of values; for example, Application_Error can have the values of 0=No Error, 1=System Error, 2=Application Error, 3=User Error, and 5=Critical Error. (Note that there is no 4.) You can use a Labeled Set to describe this field.</p>
<p>
First, define the SET for the property:</p>
<pre><code>// APPLICATION_ERROR  labeled set
LABELED_BYTE APPLICATIONError[] =
{  
    0x00,  "No Error",    
    0x01,  "System Error",    
    0x02,  "Application Error",    
    0x03,  "User Error",    
    0x05,  "Critical Error",    
};

SET APPLICATIONErrorSet = {sizeof(APPLICATIONError)/sizeof(LABELED_BYTE),  
                   APPLICATIONError};
 </code></pre>
<p>
The SET type is defined in BHTYPES.H.</p>
<p>
Next, define the property: (Note that this is a piece of a larger property table.)</p>
<pre><code>PROPERTYINFO property_table[] =
{
...
// PROP_APPLICATIONERROR
    {      0,0,            // handle, label
    "Error",            // property name
    "Specifies the type of APPLICATION Error",    //  status bar message    
    PROP_TYPE_BYTE,        // prop type
    PROP_QUAL_LABELED_SET,    // qualifier
    &amp;ApplicationErrorSet,        //  address of set structure
    64,                //  max string size of display text
    FormatPropertyInstance },        //  instance data
...
};
 </code></pre>
<p>
The instance data is being used by this parser to store the address of the formatting routine. At FormatProperties time, this parser simply jumps to the address stored in the instance data.</p>
<p>
Next, at attach time, the property instance is added:</p>
<pre><code>// Application Error
    AttachPropertyInstance( hFrame,  // handle to frame
        PropertyTable[PROP_APPLICATIONERROR].hProperty,  // handle of property
        sizeof(MyApplicationStruct-&gt;Error),  // size of data instance
        &amp;MyApplicationStruct-&gt;Error,  // pointer to instance in frame
        ApplicationFrame,    // Help ID
        3,        // level
        0);        // Error
 </code></pre>
<p>
Many formatting routines are already provided to the parser writer in a library. Look at PARSER.H and OLDPLIB.H in the \MSSDK\INCLUDE subdirectory of the Platform SDK CD-ROM for the names and functions of the formatting routines.</p>
<p>&nbsp;</p></body>
</HTML>

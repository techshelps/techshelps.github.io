<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FindPreviousFrame</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="sms_findpreviousframe"></a>FindPreviousFrame</h1>
<p>
The <b>FindPreviousFrame</b> function finds the previous frame in the current capture context that matches the filter.</p>
<pre><code><b>HFRAME FindPreviousFrame(
  HFRAME</b><i> hCurrentFrame</i><b>,       </b>
<b>  LPSTR</b><i> ProtocolName</i><b>,         </b>
<b>  LPADDRESS</b><i> DestinationAddress</i><b>,  </b>
<b>  LPADDRESS</b><i> SourceAddress</i><b>,    </b>
<b>  LPWORD</b><i> ProtocolOffset</i><b>,      </b>
<b>  DWORD</b><i> OriginalFrameNumber</i><b>,  </b>
<b>  DWORD</b><i> LowestFrame           </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCurrentFrame</i></dt>
<dd>
Specifies a handle to the frame.</dd>
<dt>
<i>ProtocolName</i></dt>
<dd>
Specifies the protocol name, such as "TCP."</dd>
<dt>
<i>DestinationAddress</i></dt>
<dd>
Specifies the destination address of the frame to find.</dd>
<dt>
<i>SourceAddress</i></dt>
<dd>
Specifies the source address of the frame to find.</dd>
<dt>
<i>ProtocolOffset</i></dt>
<dd>
Specifies a pointer to a WORD that will receive the protocol offset.</dd>
<dt>
<i>OriginalFrameNumber</i></dt>
<dd>
Starting point for this search. By default, this API will search back 1000 frames from here. The search-back distance can be changed by adding a MAXLOOKBACK=<i>&lt;new lookback distance&gt;</i> line to the NMAPI.INI file in the Network Monitor Installed directory.</dd>
<dt>
<i>LowestFrame</i></dt>
<dd>
Lowest frame number in the capture to search to.
</dd>
</dl>
<h4>Return Values</h4>
<p>
The return value is the handle to the frame. If the return value is not NULL, then the protocol offset is valid; if it is NULL, then BHGetLastError is valid.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Error code</th>
<th align=left width=52%>Meaning</th>
</tr>
<tr valign=top>
<td width=48%>BHERR_SUCCESS</td>
<td width=52%>No problems were encountered.</td>
</tr>
<tr valign=top>
<td width=48%>BHERR_INTERNAL_ERROR</td>
<td width=52%>An internal error occurred.</td>
</tr>
<tr valign=top>
<td width=48%>BHERR_INVALID_HFRAME</td>
<td width=52%>The <i>hFrame</i> was invalid.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
This function finds a frame in the current capture context that matches the filter. The filter is defined primarily by the <i>ProtocolName</i>, and this is the only required filter input. The <i>DestinationAddress</i> and <i>SourceAddress</i> can be given as a speed enhancement. The <i>ProtocolOffset</i> is returned to the calling parser, which adds this DWORD to the pointer returned by locking the frame (with the <b>ParserTemporaryLockFrame</b> API call) to get the LPBYTE of the protocol that is being searched for. On return, the HFRAME that passed the filter is given to the parser. If the parser finds that this frame is not the one it is looking for, it can hand this HFRAME back to <b>FindPreviousFrame</b> to get the next frame back. The source and destination addresses are not required, and can be passed in as NULL. When used, they can be of type ADDRESS_TYPE_IP, and so on, not just MAC types.</p>
<p>&nbsp;</p></body>
</HTML>

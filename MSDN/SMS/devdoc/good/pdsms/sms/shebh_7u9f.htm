<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Parser Entry Points</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="sms_parser_entry_points"></a>Parser Entry Points</h2>
<p>
Every parser has five entry points: <b>Register</b>, <b>Deregister</b>, <b>RecognizeFrame</b>, <b>AttachProperties</b>, and <b>FormatProperties</b>. <b>Register</b> builds the property database by making calls to <b>CreatePropertyDatabase</b>, and then passes the database back to the kernel. <b>RecognizeFrame</b> takes a pointer to raw data and passes back to the kernel whether or not the parser recognizes the data; if the parser does recognize the data, it also passes back the length of the recognized data. <b>AttachProperties</b> identifies every displayable element of the frame recognized. For detailed information about entry points, see <a href="shebh_41v7.htm">Entry Point Functions for Protocol Parser DLLs</a>.</p>
<p>
Here is an example of a parser calling sequence:</p>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/parser.gif" border=0></p>
<p>
The parser will be called many times at the <b>RecognizeFrame</b> entry for each of the frames being looked at by the kernel. <b>FormatProperties</b> will be called only if the user interface wants to display the frame. <b>Register</b> and <b>Deregister</b> will be called only at the beginning and the end, respectively.</p>
<p>
When you do a <b>LoadLibrary</b> on a Network Monitor parser, the parser calls back into the kernel during initialization and passes a structure containing pointers to entry points for each protocol parser stored in the DLL. The kernel then evaluates whether or not it wants each parser's entry points. This allows Network Monitor to swap out a specific parser (for example, NFS) in the field without disturbing the other parsers. You can write a parser for NFS, load it into the system, and tell the system to use your NFS parser instead of the one provided with Network Monitor.</p>
<p>&nbsp;</p></body>
</HTML>

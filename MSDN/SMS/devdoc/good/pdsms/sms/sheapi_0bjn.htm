<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>String Operators</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="sms_string_operators"></a>String Operators</h3>
<p>
When an expression <a href="sheapio_2sfn.htm">token</a> contains a value or attribute with a string data type, the following operators can be used within those expression tokens.</p>
<p>
How the system evaluates expressions containing string attributes depends on the code page installed on the SQL Server containing the SMS site database.</p>
<p>
To evaluate string expressions, SMS uses the character set determined by the SQL&nbsp;Server's code page. For more information about the SQL&nbsp;Server code page, see your Microsoft SQL&nbsp;Server documentation.</p>
<p>
The code page can affect the operators that are available. The SMS API provides both case-sensitive and case-insensitive (uppercase) string operators. There is a case-sensitive and case-insensitive (uppercase) version of each string operator. The uppercase version enables you to make case-insensitive comparisons of string attribute values. Before SMS evaluates the clause for a stored value and the comparison value, both values are converted to uppercase using the SQL UPPER function. Otherwise, the uppercase version performs the same operation as the non-uppercase operator.</p>
<p>
The string operators are:
<dl>
<dt>
<b>QOP_STR_EQ</b></dt>
<dt>
<b>QOP_UPCASE_EQ</b></dt>
<dd>
"Is" operator. Finds any object whose attribute value exactly matches the value string.</dd>
<dt>
<b>QOP_STR_NEQ</b></dt>
<dt>
<b>QOP_UPCASE_NEQ</b></dt>
<dd>
"Is not" operator. Finds any object whose attribute value does not exactly match the value string.</dd>
<dt>
<b>QOP_STR_GT</b></dt>
<dt>
<b>QOP_UPCASE_GT</b></dt>
<dd>
"Comes after" operator. Finds any object whose attribute value follows (is greater than) the value string. The "comes after" operator acts on the sort order of all the values for the attribute specified for the clause. For example, if you specify the following clause:
<pre><code>MICROSOFT|SOFTWARE|1.0:Software Name comes after Microsoft Excel 3.0
</code></pre>

<p>
SMS would find all computers with all software packages that have package names that follow Microsoft Excel version&nbsp;3.0 in the package name attribute sort order—such as Microsoft Excel version&nbsp;4.0, Microsoft Excel version&nbsp;4.0a, Microsoft Project version&nbsp;1.0a, Microsoft Word version&nbsp;2.0, WordPerfect version&nbsp;3.0, and so on.

<p>
To find only Microsoft Excel packages later than version&nbsp;3.0, you would combine the previous clause with another clause that finds only package names that begin with Microsoft Excel. You combine the two clauses using an <b>AND</b> operator:

<pre><code>MICROSOFT|SOFTWARE|1.0:Software Name comes after Microsoft Excel 3.0
AND
MICROSOFT|SOFTWARE|1.0:Software Name is like Microsoft Excel%
</code></pre>
</dd>
<dt>
<b>QOP_STR_LT</b></dt>
<dt>
<b>QOP_UPCASE_LT</b></dt>
<dd>
"Comes before" operator. Finds any object whose attribute value precedes (is less than) the value string. The "comes before" operator acts on the sort order of all the values for the attribute specified for the clause. For example, if you specify the following clause:
<pre><code>MICROSOFT|SOFTWARE|1.0:Software Name comes before Microsoft Word 2.0c
</code></pre>

<p>
SMS would find all computers with all software packages that have package names that precede Microsoft Word version&nbsp;2.0c in the package name attribute sort order—such as Microsoft Word version&nbsp;2.0b, Microsoft Word version&nbsp;2.0a, Microsoft Word version&nbsp;2.0, Microsoft Word version&nbsp;1.1, Microsoft Excel version&nbsp;4.0, Asymetrix Toolbook version&nbsp;1.0, and so on.

<p>
To find only Microsoft Word packages earlier than version&nbsp;2.0c, you would combine the previous clause with another clause that finds only package names that begin with Microsoft Word. You combine the two clauses using an <b>AND</b> operator:

<pre><code>MICROSOFT|SOFTWARE|1.0:Software Name comes after Microsoft Word 2.0c
AND
MICROSOFT|SOFTWARE|1.0:Software Name is like Microsoft Word%
</code></pre>
</dd>
<dt>
<b>QOP_STR_GTE</b></dt>
<dt>
<b>QOP_UPCASE_GTE</b></dt>
<dd>
"Is same as or comes after" operator. Finds any object whose attribute value exactly matches or follows (is greater than) the value string. This operator is a combination of the "is" and "comes after" operators.</dd>
<dt>
<b>QOP_STR_LTE</b></dt>
<dt>
<b>QOP_UPCASE_LTE</b></dt>
<dd>
"Is same as or comes before" operator. Finds any object whose attribute value exactly matches or precedes (is less than) the value string. This operator is a combination of the "is" and "comes before" operators.</dd>
<dt>
<b>QOP_STR_LIKE</b></dt>
<dt>
<b>QOP_UPCASE_LIKE</b></dt>
<dd>
"Is like" operator. Finds any object whose attribute value matches the pattern in the value string. For all relational operators that perform LIKE comparisons, you can use wildcards to specify the string pattern that you want to compare. For a list of wildcards, see <a href="sheapi_7kdv.htm">Wildcards for LIKE Operators</a>.</dd>
<dt>
<b>QOP_STR_NOTLIKE</b></dt>
<dt>
<b>QOP_UPCASE_NOTLIKE</b></dt>
<dd>
"Is not like" operator. Finds any object whose attribute value does not match the pattern in the value string. For all relational operators that perform LIKE comparisons, you can use wildcards to specify the string pattern that you want to compare. For a list of wildcards, see <a href="sheapi_7kdv.htm">Wildcards for LIKE Operators</a>.
</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Job Filters (JOB_FILTER)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="sms_job_filter"></a>Job Filters (JOB_FILTER)</h3>
<p>
A job filter specifies the jobs that are retrieved for a job container. If no job filter is set on a job container, all jobs in the site database are retrieved for the container. Job filters can only be applied to job containers.</p>
<p>
Using the <a href="sheapi_6c6m.htm"><b>SmsAddToken</b></a> function, your application can add tokens to a job filter. Each expression token represents an attribute. For job filters, the tokens can be connected by using an OP_OR or OP_AND control token.</p>
<p>
The <b>TOKEN</b> structure that contains the expression token must have the following members:
<dl>
<dt>
<b>szName</b></dt>
<dd>
A string that specifies the name of the job property to be evaluated by the expression.
<p>
Currently, three properties can be evaluated: JobType, JobStatus, and JobID.

<p>
For example, JobType specifies that the type of job is being evaluated.
</dd>
<dt>
<b>DwOp</b></dt>
<dd>
A DWORD value that specifies the operator used to evaluate the expression.
<p>
For job filters, this operator can only be QOP_STR_EQ.
</dd>
<dt>
<b>SzValue</b></dt>
<dd>
A string that specifies the value to be evaluated for the property specified by <b>szName</b>.
<p>
For example, if JobType is set for <b>szName</b>, the string "Install" would specify a Run Command On Workstation job type. For a list of values for each property, see the table below.

</dd>
</dl>
<p>
For example, your application could create a job filter with a token that specifies a JobStatus of Active. Your application could set this filter as the only filter on a job container. When your application populates the container, it contains folders that represent all jobs that have an active status.</p>
<p>
The following table shows the values (<b>szValue</b>) that the available properties (<b>szName</b>) can have:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>szName</th>
<th align=left width=52%>szValue</th>
</tr>
<tr valign=top>
<td width=48%>JobStatus</td>
<td width=52%>"Pending"<p>
"Active"</p>
<p>
"Cancelled"</p>
<p>
"Complete"</p>
<p>
"Failed"</p>
<p>
"Active failed"</p>
<p>
</p>
</td>
</tr>
<tr valign=top>
<td width=48%>JobType</td>
<td width=52%>"Install"<p>
"Server"</p>
<p>
"Remove package"</p>
<p>
"System"</p>
<p>
</p>
</td>
</tr>
<tr valign=top>
<td width=48%>JobID</td>
<td width=52%><i>jobID</i>. For example, "RTM00001". The Job ID is an eight-character identifier that the SMS system assigns to the job. Note that the first three characters are the site code for the site where the job was created.</td>
</tr>
</table><br>
<h4>Example</h4>
<pre><code>// Function to add a token to a job filter so that
// the filter retrieves only the folders for 
// Run Command On Workstation jobs (F_INSTALLJOB).

SMS_STATUS AddTokenToJobFilter(HANDLE hFilter) 
                         //  Handle to package filter.
{
SMS_STATUS stat;
TOKEN Token;
// Clear the Token structure.
memset( &amp;Token, 0, sizeof (TOKEN) );

// Set the expression token to 
// szName = "JobType"
// dwOp = QOP_STR_EQ
// szValue = "Install"

// Set the job property.
strcpy( Token.szName, "JobType");
// Set the operator to string equals.
Token.dwOp = QOP_STR_EQ;
// Set the type of job.
strcpy( Token.szValue, "Install"); 

// Add the token to the filter.
stat = SmsAddToken( hFilter, // Specifies the handle to filter.
                    OP_AND,  // Use the AND control token to 
                             // add a token to the job filter.
                    &amp;Token,  // Specifies the structure containing
                             // the expression token.
                    AT_END   // Adds the token to the end of 
                             // the filter.
                  );

if (stat == SMS_OK)    
    printf("The token was successfully added to the filter.\n");
else 
    printf("SmsAddToken error: %d\n", stat);

return stat;
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TOKEN</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="sms_struct_token"></a>TOKEN</h1>
<p>
The <b>TOKEN</b> structure contains information about a <a href="sheapio_2sfn.htm">token</a>.</p>
<pre><code>typedef struct _TOKEN {
    INT tokenType;
    char  szName[BUFF_SIZE];
    char  szValue[BUFF_SIZE];
    DWORD dwOp;
    char  szArchitecture[BUFF_SIZE];
    char  szGroupClass[BUFF_SIZE];
    char  szAttributeName[BUFF_SIZE];
    char  szTokenString[TOKEN_STRING_SIZE];
    BOOL  bIndent;
} TOKEN;
</code></pre>
<p>
The <b>TOKEN</b> structure is used to add and read tokens in <a href="sheapio_19f7.htm">filters</a> and <a href="sheapio_0cvm.htm">inventory rules folders</a>.</p>
<h4>Members</h4>
<dl>
<dt>
<b>tokenType</b></dt>
<dd>
Specifies the type of the token. See <a href="sheapi_70dv.htm">token types</a>.</dd>
<dt>
<b>szName</b></dt>
<dd>
Specifies the name of the attribute to evaluate with the expression token.
<p>
Note that <b>szName</b> is used by all filter types except machine filters (MACHINE_FILTER) and <a href="sheapio_027m.htm">attribute filters</a> (ATTRIBUTE_FILTER). Machine and attribute filters use the <b>szAttributeName</b> to specify the name of the attribute to use for the expression. For these two filters, <b>szName</b> is NULL.
</dd>
<dt>
<b>szValue</b></dt>
<dd>
Specifies the comparison value used for the expression. The comparison value is used to evaluate the attribute specified by <b>szName</b> (or <b>szAttributeName</b>) using the operator specified by <b>dwOp</b>.
<p>
See <a href="sheapi_08tv.htm">Expression Token Values</a>.
</dd>
<dt>
<b>dwOp</b></dt>
<dd>
Specifies a relational operator (such as "is equal to" or "is like") that defines how the comparison value specified by <b>szValue</b> should be compared with the actual value stored for the attribute specified by <b>szAttributeName</b>.
<p>
See <a href="sheapi_0ghf.htm">Expression Token Operators</a>.
</dd>
<dt>
<b>szArchitecture</b></dt>
<dd>
Specifies the architecture of the objects to find with the expression. This member is used only for machine filters and attribute filters.
<p>
An <i>architecture</i> is a standard structure used for inventorying a set of related objects. An architecture labels and groups together all objects of a specific type. For example, all personal computers use the Personal Computer architecture, and all SMS system events use the SMSEvents architecture.
</dd>
<dt>
<b>szGroupClass</b></dt>
<dd>
Specifies the class of the group that the attribute used for the expression is part of. This member is used only for machine filters and attribute filters.
<p>
A <i>group</i> defines the structure for inventorying an item within an object. A group is a set of attributes that describe a specific type of item. For example, SMS inventories disk drives by using the Disk group. The Disk group has attributes (such as Disk Index, Serial Number, Storage Size, and so on) used to identify and describe a disk drive. When SMS inventories a hard disk drive on a computer, the hard disk drive's inventory is stored as a set of attribute values (for example, Disk Index is C, Serial Number is 10F10470, Storage Size is 59&nbsp;MB, and so on). A group also has a <i>class</i> name that is used by the SMS system to uniquely identify a group (for example, two groups both have the name Monitor, but have different class names—the different class names make them different groups). A class name is composed of the organization name (usually, the organization that defined the group), a name for the group, and the version number. For example, MICROSOFT|DISK|1.0 is the class name of the group used by the SMS system to inventory disks.
</dd>
<dt>
<b>szAttributeName</b></dt>
<dd>
Specifies the attribute to use in the expression. This member is used only for machine filters and attribute filters.
<p>
Note that <b>szName</b> is used by all filter types except machine filters (MACHINE_FILTER) and attribute filters (ATTRIBUTE_FILTER). For all other filters except machine and attribute filters, <b>szAttributeName</b> is NULL.
</dd>
<dt>
<b>szTokenString</b></dt>
<dd>
Specifies the string equivalent of the token. For example, a <a href="sheapio_9tma.htm">machine filter</a> could have the following string equivalent: "Personal Computer:MICROSOFT|MOUSE|1.0 Number of Buttons is equal to 2".
<p>
For inventory rules folders, the <b>szTokenString</b> member specifies the attributes that identify the file. For example, "file "winword.exe" CHECKSUM 20 200 7232". For inventory rules folders, an expression token uses only the <b>szTokenString</b> member of the <b>TOKEN</b> structure. For information about the format of the expression string for <b>szTokenString</b>, see <a href="sheapio_7rw3.htm">Inventory Rules Folder Tokens</a>.
</dd>
<dt>
<b>bIndent</b></dt>
<dd>
Specifies whether the <b>szTokenString</b> string should be indented by using prepended space characters to represent groupings. TRUE specifies that the <b>szTokenString</b> should contain spaces to represent a grouping level. FALSE specifies that no spaces are added for indentation.
</dd>
</dl>
<h4>Remarks</h4>
<p>
For filters, each token represents a criterion for selecting an object or an operator that defines the relationship of the adjacent tokens.</p>
<p>
For inventory rules folders, each token represents the criteria used to identify a file or an operator that defines the relationship of the adjacent tokens. For inventory rules folders, an expression token uses only the <b>szTokenString</b> member of the <b>TOKEN</b> structure.</p>
<p>
There are two types of tokens:
<dl>
<dt>
<b>Expression token</b></dt>
<dd>
For filters, an expression token defines how to search for objects that have a specified relationship to a specified value for a specified attribute. An expression token is made up of an attribute, a relational operator, and a comparison value. A relational operator (such as "is equal to" or "is like") defines how the specified value should be compared with the actual value stored for the specified attribute. Depending on the type of filter that contains the token, an expression token's <b>TOKEN</b> structure uses the <b>szName</b>, <b>szArchitecture</b>, <b>szGroupClass</b>, and <b>szAttributeName</b> members to define the attribute. For example, <a href="sheapio_3y9e.htm">job filters</a> (and most other filters) use the <b>szName</b> member to specify the attribute, whereas <a href="sheapio_9tma.htm">machine filters</a> use the <b>szArchitecture</b>, <b>szGroupClass</b>, and <b>szAttributeName</b> members.
<p>
For inventory rules folders, expression tokens represent the rule for collecting inventory on a package. An expression token uses only the <b>szTokenString</b> member of the <b>TOKEN</b> structure. The <b>szTokenString</b> member specifies the attributes that identify the file.
</dd>
<dt>
<b>Control token</b></dt>
<dd>
For both filters and inventory rules folders, a <i>control token</i> can be a logical operator or parentheses. A logical operator connects two expression tokens, two subclauses, or a combination of an expression and a subclause. A logical operator defines the relationship between two adjacent expressions or subclauses. Parentheses enable expressions to be grouped together.
</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

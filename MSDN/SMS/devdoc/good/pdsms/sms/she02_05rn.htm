<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overview of the Inventory Collection Process</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="sms_overview_of_the_inventory_collection_process"></a>Overview of the Inventory Collection Process</h2>
<p>
When the Inventory Agent runs on a computer running SMS, it reports the inventory to an SMS logon server as a binary file. This file, called a RAW file, contains the computer's inventory in the MIF format. (For Macintosh and OS/2 computers, the Inventory Agent uses an ASCII text file to report inventory to an SMS logon server. Like the binary RAW file, the ASCII text file uses the MIF format to report a computer's inventory.) When the Inventory Processor processes a RAW file, it parses the RAW file (verifying the MIF syntax) and compares the inventory reported in the RAW file with the inventory history for the computer. The Inventory Processor then creates a Delta-MIF file that contains the groups whose inventories have changed (groups that have been added, updated, or deleted), and passes the file to the Inventory Data Loader. The Inventory Data Loader parses the Delta-MIF file and uses the data to update the SMS database.</p>
<p>
Using the ASCII text files with the MIF format, you can also add, update, or delete custom objects and groups from the SMS database. You can add objects with new architectures (for example, printers or hardware routers) or add new types of objects of existing architectures (for example, a new computer to the Personal Computer architecture). When you add a new object to the SMS database, the MIF file containing the object's inventory must have an Architecture group and an Identification group. This is called an IDMIF. When you add a new group to an existing object, the MIF file containing the group(s) must not have an Architecture group or an Identification group. This is called a NOIDMIF.</p>
<p>
The Architecture group is used to group related objects in the SMS database. The Identification group is used to identify an object. The specific properties of an object are reported as groups and attributes. </p>
<p>
A group is identified by its class and keyed attributes. For a group class, each attribute's data type is set when that attribute is first reported to the SMS database. For example, when the Name attribute for the MICROSOFT|TOASTER|1.0 group is reported for the first time with a String(25) data type, any MIF files that report a group with class MICROSOFT|TOASTER|1.0 and the Name attribute must specify a string value that is 25 characters or less. If the value is a string longer than 25 characters, the value will be truncated to 25 characters when added to the SMS database. If the attribute has a different data type, the attribute will be considered invalid.</p>
<p>
For custom objects and groups, you can also extend the SMS Administrator to display custom graphics for those objects and groups in the Sites window and Properties window of the SMS Administrator. If you want the new object to appear in the Sites window of the SMS Administrator, you must define seven specific attributes in the Identification group. For more information about extending the SMS Administrator's graphics, see <a href="sheui_8qsy.htm">Overriding and Extending Graphics in the SMS Administrator</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Access the folder contents</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="sms_access_folder_contents_proc1"></a>Access folder contents</h3>
<p>
After a container is populated with the folders you want to find, you can read the contents of each folder in the container and the scalars within each folder.</p>
<p>
For top-level folders in containers, your application can retrieve folders only in sequence. (Note that subfolders within folders, such as program item folders within a package folder, can be retrieved by identifier with the <a href="sheapi_9okk.htm"><b>SmsGetFolderByID</b></a> function.) After a container has been populated, the order of the folders within that particular container is fixed. Using the <a href="sheapi_58ky.htm"><b>SmsGetNextFolder</b></a> function, your application can access the folders in the container sequentially. <b>SmsGetNextFolder</b> returns the handle to the next folder in the list of folders within a container. To start at the beginning of the list, use the <a href="sheapi_1gx0.htm"><b>SmsRewind</b></a> function.</p>
<p>
Example:</p>
<pre><code>// Get the handles to all top-level folders in the container.
DWORD numFolders;
SmsGetFolderCount( hContainer, F_ANY, &amp;numFolders);
printf("Container has %d folders\n\n", numFolders );

// Allocate memory for the top-level folders.
HANDLE *phFolders = (HANDLE *)malloc(numFolders * sizeof(HANDLE));

HANDLE hFolder;
// Loop to get handles to all top-level folders 
// and write them to the allocated array.
  for (DWORD dwI = 0; dwI &lt; numFolders; dwI++) {
    stat = SmsGetNextFolder( hContainer,
                             F_ANY,  // For all folder types.
                             &amp;hFolder
                           );
      if (stat != SMS_OK) {
          printf("Error in retrieving a folder: %d\n", stat);
          break;
      }

      phFolders[dwI] = hFolder; //Assign the folder handle to 
                                //next handle in the array.
  }
 </code></pre>
<p>
If a folder has subfolders, your application can use these same methods to access those folders. Note that <a href="sheapi_9icz.htm"><b>SmsEnumFolderTypes</b></a> returns a list of the types of subfolders that a folder can contain. <a href="sheapi_45pw.htm"><b>SmsGetFolderCount</b></a> returns the count of the subfolders of a specified type within a folder.</p>
<p>
After your application gets the handle to a folder, your application can retrieve the scalars for that folder. The scalars can be retrieved in sequence or by the scalar name:
<ul>
<li>
To retrieve scalars in sequence, use the <a href="sheapi_16ia.htm"><b>SmsGetNextScalar</b></a> function. <b>SmsGetNextScalar</b> retrieves the next scalar in the list of scalars within the folder and writes the scalar's information into a <b>SCALAR</b> structure.<p>
Example:
<pre><code>// Get the next scalar in the folder and print it on the screen.
SCALAR scalar;

char szName[50];   //Buffer for scalar name.
char szValue[100]; //Buffer for string or time value.
char *pszTime;     //Buffer for conversion of time scalars.

scalar.pszName  = szName;
scalar.pszValue = szValue;
scalar.dwLen = sizeof(szValue)-1;

stat = SmsGetNextScalar(hFolder,  // Handle to folder.
                        &amp;scalar   // Pointer to SCALAR struct
                        );

// Check the scalar type, display accordingly.
        switch (scalar.scType) {
        case SCALAR_STRING:
            printf("\t%20s: %s\n", 
                   scalar.pszName, 
                   scalar.pszValue);
            break;

        case SCALAR_INT:
            printf("\t%20s: %ld\n", 
                   scalar.pszName, 
                   scalar.dwValue);
            break;

        case SCALAR_TIME:
            // If there is a string equivalence use it.
            if (scalar.bStringEquivalence) {
                printf("\t%20s: %s\n", 
                       scalar.pszName, 
                       scalar.pszValue);
            } else {
                pszTime = ctime( &amp;scalar.tValue );
                printf("\t%20s: %s", 
                       scalar.pszName, 
                       pszTime);
            }
            break;

        case SCALAR_BINARY:
            printf("\t%20s: Length of binary data is %d\n", 
                   scalar.pszName, 
                   scalar.dwLen);
            break;
        }
    }
 </code></pre>
</li>
<li>
To retrieve scalars by scalar name, use the <a href="sheapi_5s11.htm"><b>SmsGetScalarByName</b></a> function, which retrieves the scalar with the specified scalar name from the folder and writes the scalar's information into a <a href="sheapi_4nci.htm"><b>SCALAR</b></a> structure.<p>
Example:
<pre><code>// Get the scalar named "Package ID" from the job folder
// specified by hFolder and print it on the screen.

SCALAR scalar;

//Buffer for string value. Package ID is 8 char.
char szValue[9]; 
scalar.pszValue = szValue;
scalar.dwLen = sizeof(szValue)-1;

stat = SmsGetScalarByName(hFolder,      // Handle to folder.
                          "Package ID", // Name of scalar to 
                                        // retrieve.
                          &amp;scalar       // Pointer to SCALAR to 
                                        // place scalar data.
                          );

printf("\t%20s: %s\n", scalar.pszName, scalar.pszValue);
 </code></pre>
</li>
</ul>
<p>
Note that the <a href="sheapi_9ab8.htm"><b>SmsGetScalarCount</b></a> function returns the count of scalars within a folder.</p>
<p>
If a folder no longer needs to be accessed, use the <a href="sheapi_15iq.htm"><b>SmsCloseFolder</b></a> function to close the folder and deallocate the memory used by the folder.</p>
<p>&nbsp;</p></body>
</HTML>

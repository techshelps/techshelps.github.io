<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Example of Retrieving a SCALAR_BINARY Scalar</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="sms_example_of_retrieving_a_scalar_binary_scalar"></a>Example of Retrieving a SCALAR_BINARY Scalar</h3>
<p>
Currently, only <a href="sheapio_02lu.htm">program item folders</a> contain a scalar of type <b>SCALAR_BINARY</b>. The <a href="sheapio_49df.htm#sms_f_progitem_icon">Icon</a> scalar in a program item folder is a binary scalar that specifies an icon resource that will be used as the icon for the program item.</p>
<p>
The following example contains a function (<b>GetProgItemIcon</b>) that reads a <b>SCALAR_BINARY</b> scalar (Icon) from a program item folder (F_PROGITEM):</p>
<pre><code>//***********************************************************
// Function to retrieve Icon binary scalar from
// a program item folder.
//***********************************************************

SMS_STATUS ReadIcon(HANDLE hFolder)

{
SMS_STATUS stat;
SCALAR sc;
char szName[SMS_DATA_BUFF_SIZE];  // buffer for name
char szValue[SMS_DATA_BUFF_SIZE]; // buffer for value
BYTE *pbyteValue;

sc.pszName  = szName;
sc.pszValue = szValue;
sc.pValue   = NULL;
sc.dwLen = NULL;
sc.scType = SCALAR_BINARY;

// Call SmsGetScalarByName with dwLen set to NULL
// to get length of binary data.
stat = SmsGetScalarByName( hFolder,
                           "Icon",
                           &amp;sc);

// if length is returned, allocate memory for the
// data buffer .
if (stat == SMS_MORE_DATA) {
    printf("Binary scalar \"%s\" has length of %d bytes\n",
      sc.pszName, sc.dwLen);
    // Allocate memory for the binary data.
    sc.pValue = pbyteValue;
    pbyteValue = (BYTE *) malloc(sc.dwLen);
    // Call SmsGetScalarByName again
    // to retrieve the binary scalar.
    stat = SmsGetScalarByName( hFolder,
                               "Icon",
                               &amp;sc);
}

if (stat == SMS_OK) {
    // Data retrieved successfully.
    printf("Binary scalar \"%s\" has %d bytes of binary data\n",
      sc.pszName, sc.dwLen);
    // Primitive dump of the data.
    for (DWORD dwI = 0; dwI &lt; sc.dwLen; dwI++) {
        printf("%0X ", pbyteValue[dwI]);
    }
    printf("\n");
}
// if scalar cannot be retrieved, 
// print status code.
else {
    printf("Cannot retrieve binary scalar \"%s\".", sc.pszName);
    printf("Error in SmsGetScalarByName: %d.\n", stat);
}

// Free allocated memory and return
// the status code.
free(pbyteValue);
return stat;

}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

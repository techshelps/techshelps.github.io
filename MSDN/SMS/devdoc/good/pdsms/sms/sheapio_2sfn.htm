<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tokens</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="sms_tokens"></a>Tokens</h1>
<p>
Filters and inventory rules folders are composed of expression tokens that are combined by control tokens:
<dl>
<dt>
<b>Expression token</b></dt>
<dd>
For filters, an expression token defines how to search for objects that have a specified relationship to a specified value for a specified attribute. An expression token is made up of an attribute, a relational operator, and a comparison value. A relational operator (such as "is equal to" or "is like") defines how the specified value should be compared with the actual value stored for the specified attribute. Depending on the type of filter that contains the token, an expression token's <b>TOKEN</b> structure uses the <b>szName</b>, <b>szArchitecture</b>, <b>szGroupClass</b>, and <b>szAttributeName</b> members to define the attribute. For example, job filters (and most other filters) use the <b>szName</b> member to specify the attribute, whereas machine filters use the <b>szArchitecture</b>, <b>szGroupClass</b>, and <b>szAttributeName</b> members.
<p>
For inventory rules folders, expression tokens represent the rule for collecting inventory on the package. An expression token uses only the <b>szTokenString</b> member of the <b>TOKEN</b> structure. The <b>szTokenString</b> member specifies the attributes that identify the file.
</dd>
<dt>
<b>Control token</b></dt>
<dd>
For both filters and inventory rules folders, a control token can be a logical operator or parentheses. A logical operator connects two expression tokens, two subclauses, or a combination of an expression and a subclause. A logical operator defines the relationship between two adjacent expressions or subclauses. Parentheses enable expressions to be grouped together.

<p>
There are two logical operators:

<dl>
<dt>
<b>AND</b></dt>
<dd>
Finds all objects that satisfy both expression tokens or subclauses connected by <b>AND</b>. You can use <b>AND</b> to narrow the list of objects you want to find. For example, the following filter finds all computers that have an 80386 processor, 4 MB of extended memory, and Microsoft Excel:
<pre><code>MICROSOFT|PROCESSOR|1.0:Processor Name is like '%386%'
AND
MICROSOFT|X86_PC_MEMORY|1.0:Extended Memory (KByte) is greater than '4000'
AND
MICROSOFT|SOFTWARE|1.0:Name is like '%Excel%'
 </code></pre>

<p>
This filter returns a list of computers that satisfied all three expression tokens.
</dd>
<dt>
<b>OR</b></dt>
<dd>
Finds all objects that satisfy either (or both) of the two expression tokens or subclauses connected by the <b>OR</b>. You can use <b>OR</b> to assemble a set of objects. For example, the following filter finds all computers that have an 80386 processor, 4 MB of extended memory, or Microsoft Excel—or any combination of the three:
<pre><code>MICROSOFT|PROCESSOR|1.0:Processor Name is like '%386%'
OR
MICROSOFT|X86_PC_MEMORY|1.0:Extended Memory (KByte) is greater than '4000'
OR
MICROSOFT|SOFTWARE|1.0:Software Name is like '%Excel%'
 </code></pre>

<p>
This filter returns a list of all computers that satisfied any one (or any combination) of the three expression tokens.

</dd>
</dl>
</dd>
</dl>
<p>
For additional information about logical operators, see <a href="sheapio_2ewj.htm">Handling Tokens</a>.</p>
<p>&nbsp;</p></body>
</HTML>

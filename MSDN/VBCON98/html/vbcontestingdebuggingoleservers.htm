<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Testing and Debugging ActiveX Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontestingdebuggingoleservers"></a>Testing and Debugging ActiveX Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTestingDebuggingOLEServersC">
</object></p>
<p>
Visual Basic provides two different component debugging scenarios. For in-process components, you can load a test project (Standard Exe or ActiveX Exe) and one or more component projects into the development environment as a <i>project group</i>. You can run all the projects in the group together, and step directly from test project code into in-process component code.</p>
<p>
Out-of-process components can be debugged using two instances of the development environment. One instance of Visual Basic runs the test project, while the second runs the component project. You can step directly from test project code into component code, and each instance of Visual Basic has its own set of breakpoints and watches.</p>
<p>
Combinations of these scenarios are possible. You can debug an application that uses both in-process and out-of-process components, as shown in Figure 7.1.</p>
<p class=label>
<b>Figure 7.1&nbsp;&nbsp;&nbsp;Debugging in-process and out-of-process components</b></p>
<p>
<img src="avtcm066.gif" border=0></p>
<p>
When an ActiveX Exe project is in run mode, like MyComponent in Figure 7.1, the client application (MyApp) can create objects and access their properties and methods. Each out-of-process component a client uses must be in its own instance of the development environment. The client application and all of its in-process components — DLLs and OCXs — can run together in a single instance of the development environment.</p>
<p>
The following topics explain the basics of debugging and testing components.
<ul type=disc>
<li>
<a href="vbconhowtotestactivexcomponents.htm">How to Test ActiveX Components</a>&nbsp;&nbsp;&nbsp;By definition, a component is software used by other programs, so it cannot test itself. This topic covers testing requirements and things to watch out for.<br><br></li>
<li>
<a href="vbconcreatingtestprojectforinprocesscomponent.htm">Creating a Test Project for an In-Process Component</a>&nbsp;&nbsp;&nbsp;Setting references and options for testing in a multiple-project environment.<br><br></li>
<li>
<a href="vbconcreatingtestprojectforoutofprocesscomponent.htm">Creating a Test Project for an Out-of-Process Component</a>&nbsp;&nbsp;&nbsp;Starting a second instance of the development environment, and setting the necessary references and options.<br><br></li>
<li>
<a href="vbconfixingmissingreferences.htm">Project Compatibility: Avoiding MISSING References</a>&nbsp;&nbsp;&nbsp;While developing your component, you will sometimes find it necessary to make changes that break the link between your test program and your component project.<br><br></li>
<li>
<a href="vbconhowtodebugoutofprocesscomponents.htm">Debugging Out-of-Process Components</a>&nbsp;&nbsp;&nbsp;Debugging techniques for working with two instances of the Visual Basic development environment.<br><br></li>
<li>
<a href="vbconhowtodebuginprocesscomponents.htm">Debugging In-Process Components</a>&nbsp;&nbsp;&nbsp;Debugging multiple projects in a single instance of the development environment.<br><br></li>
<li>
<a href="vbconusingbreakonerrorincomponents.htm">Using Break on Error in Components</a>&nbsp;&nbsp;&nbsp;New keyboard shortcuts make it easier to debug components, especially those with class module code containing error handlers.<br><br></li>
<li>
<a href="vbconhowtotestcompiledcomponents.htm">How to Test Compiled Components</a>&nbsp;&nbsp;&nbsp;Switching between source projects and compiled components.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;There are special considerations for debugging and testing ActiveX control projects, and other project types that include private controls. See "Setting Up a New Control Project and Test Project" and "Debugging Controls" in "Building ActiveX Controls." Information specific to debugging and testing ActiveX Documents can be found in "Building ActiveX Documents." The fundamentals of debugging are covered in "Debugging Your Code and Handling Errors" in the <i>Visual Basic Programmer’s Guide.</i></p>
</BODY>
</HTML>

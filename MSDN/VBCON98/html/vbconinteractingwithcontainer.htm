<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Interacting with the Container</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconinteractingwithcontainer"></a>Interacting with the Container</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconInteractingWithContainerC">
</object></p>
<p>
As explained in "Control Creation Terminology," earlier in this chapter, instances of your control never exist by themselves. They are always placed on container objects, such as Visual Basic forms.</p>
<p>
Container objects supply additional properties, methods, and events that appear to the user to be part of your control. This is discussed in the related topic, "Understanding the Container's Extender Object." You can use the Parent property of the Extender object to access the properties and methods of the container your control has been placed on.</p>
<p>
You can also obtain information about the container through the UserControl object's Ambient property. The object returned by this property offers hints for property settings, such as BackColor, that can make your control's appearance consistent with that of its container. The AmbientProperties object is discussed in "Using the AmbientProperties Object to Stay Consistent with the Container."</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The AmbientProperties and Extender objects are not available until your control has been sited on the container. Thus they are not available in the UserControl object's Initialize event. When the InitProperties or ReadProperties event occurs, the control instance has been sited.</p>
<h2>All Containers are Not Created Equal</h2>
<p>
A consequence of your control's dependence on container objects is that some features may not be available in all containers. Many ActiveX control features require support from the container a control is placed on, and will be disabled if the container doesn't provide the required support.</p>
<p>
The following features are supported by Visual Basic forms, but may not be supported by all containers:
<ul type=disc>
<li>
Transparent control background, discussed in "Giving Your Control a Transparent Background," later in this chapter.<br><br></li>
<li>
The ControlContainer property, discussed in "Allowing Developers to Put Controls on Your Control," later in this chapter.<br><br></li>
<li>
Alignable controls, discussed in "Making Your Control Align to the Edges of Forms," later in this chapter.<br><br></li>
<li>
Modeless dialog boxes your control may show.</li>
</ul>
<h3>Related Topics</h3>
<ul type=disc>
<li>
<a href="vbcontheextenderobjectpropertiescontainerprovides.htm">Understanding the Container's Extender Object</a>&nbsp;&nbsp;&nbsp;The developer using your control sees more properties, methods, and events than the ones you defined. The extensions are provided by the container your control is placed on.<br><br></li>
<li>
<a href="vbconambientpropertiesstayingconsistentwithcontainer.htm">Using the AmbientProperties Object to Stay Consistent with the Container</a>&nbsp;&nbsp;&nbsp;The container provides information your control can use to synchronize itself with the container.</li>
</ul>
</BODY>
</HTML>

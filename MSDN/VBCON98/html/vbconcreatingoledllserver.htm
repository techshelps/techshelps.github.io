<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating the ThingDemo DLL Project</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingoledllserver"></a>Creating the ThingDemo DLL Project</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingOLEDLLServerC">
</object></p>
<p>
How easy is it to create an ActiveX DLL with Visual Basic? If you can declare variables and write procedures, you can create an in-process component.</p>
<p>
This section provides step-by-step instructions on how to define a simple class, and demonstrates the life cycle of objects provided by components. You can use objects created from this class with any application that can use Automation to control objects.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX DLL. It begins with the topic <a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</p>
<p class=label>
<b>To create the ThingDemo project</b>
<ol>
<li>
On the <b>File </b>menu, click <b>New Project</b>.<br><br></li>
<li>
In the <b>New Project</b> dialog box, double-click the <b>ActiveX DLL </b>icon. Visual Basic automatically adds a class module, Class1, to the new project.<br><br></li>
<li>
Press F4 to open the <b>Properties</b> window. Double-click the <b>Name </b>property and change it to <b>Thing</b>. This is the name you’ll use to create objects from the class.<p class=tl>
The default value for the Instancing property is MultiUse. This allows clients to create multiple instances of the Thing class. For a full discussion of the Instancing property, see "Instancing for Classes Provided by ActiveX Components," in "General Principles of Component Design."</P></li>
<li>
On the <b>Project </b>menu, click <b>Project1 Properties</b> to open the <b>Project Properties</b> dialog box. Select the <b>General</b> tab, fill out the information shown below, then click <b>OK</b>.<p>
<img src="avtcm008.gif" border=0></P><p class=tl>
The project name, ThingDemo, is also used as the name of the component’s type library. It can be combined with the name of each class the component provides, to produce unique class names.</P><p class=tl>
If two components each provide a Thing class, the fully qualified class name lets you specify which component’s Thing class you want to use, for example, <code>ThingDemo.Thing</code>.</P></li>
<li>
On the <b>Project</b> menu, click <b>Add Module</b> to open the <b>Add Module</b> dialog box. Double click the <b>Module</b> icon to add a module to the project.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you’ve used the <b>Options</b> dialog box (accessed from the <b>Tools</b> menu) to disable the <b>Add Module</b> dialog box, you’ll just get the module. This is okay.</p></li>
<li>
In the <b>Code</b> window for the module, add the following code:<pre><code>Option Explicit
Public gdatServerStarted As Date

Sub Main()
 &nbsp; ' Code to be executed when the component starts,
 &nbsp; '&nbsp;&nbsp; in response to the first object request.
 &nbsp; gdatServerStarted = Now
 &nbsp; Debug.Print "Executing Sub Main"
End Sub

' Function to provide unique identifiers for objects.
Public Function GetDebugID() As Long
 &nbsp; Static lngDebugID As Long
 &nbsp; lngDebugID = lngDebugID + 1
 &nbsp; GetDebugID = lngDebugID
End Function
</code></pre>
</li>
<li>
On the <b>File</b> menu, click <b>Save Project</b> to save the project files, using the following names. Visual Basic will provide the extensions automatically.<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>File</b></td>
<td class=label width=40%><b>File name</b></td>
<td class=label width=27%><b>Extension</b></td>
</tr>
<tr valign=top>
<td width=33%>Module</td>
<td width=40%>ThingDemo_Module1</td>
<td width=27%>.bas</td>
</tr>
<tr valign=top>
<td width=33%>Class module</td>
<td width=40%>ThingDemo_Thing</td>
<td width=27%>.cls</td>
</tr>
<tr valign=top>
<td width=33%>Project</td>
<td width=40%>ThingDemo</td>
<td width=27%>.vbp</td>
</tr>
</table><br>
</li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Choosing a Project Type and Setting Project Properties" in "General Principles of Component Design."</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX DLL.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=40%><b>To</b></td>
<td class=label width=60%><b>See</b></td>
</tr>
<tr valign=top>
<td width=40%>Go to the next step</td>
<td width=60%><a href="vbconcreatingpropertiesmethods03.htm">Creating Properties and Methods for the Thing Class</a></td>
</tr>
<tr valign=top>
<td width=40%>Start from the beginning</td>
<td width=60%><a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</td>
</tr>
</table><br>
</BODY>
</HTML>

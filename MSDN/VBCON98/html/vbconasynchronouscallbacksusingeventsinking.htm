<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Asynchronous Notifications Using Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconasynchronouscallbacksusingeventsinking"></a>Asynchronous Notifications Using Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAsynchronousCallBacksUsingEventSinkingC">
</object></p>
<p>
There are two parts to implementing asynchronous processing using events. The first part is the responsibility of the author of a component. The author must:
<ol>
<li>
Define the tasks or notifications to be performed.<br><br></li>
<li>
Provide one or more externally creatable classes to manage the tasks or notifications. This manager class may also do the work, or a worker class may be provided to do the actual processing.<br><br></li>
<li>
Provide the manager class with methods that clients can call to initiate tasks or to request notifications.<br><br></li>
<li>
Declare the events that clients must handle in order to receive notifications.<br><br></li>
<li>
Write code to start the task, or the process of watching for interesting occurrences.<br><br></li>
<li>
Write code to raise the event when the task is complete, or when the interesting occurrences are observed.</li>
</ol>
<p>
The second part is the responsibility of the developer who uses the component. The developer must:
<ol>
<li>
Create a WithEvents variable to contain a reference to the object that will provide the notification events.<br><br></li>
<li>
In the event procedures associated with the WithEvents variable, write code to handle the desired notification events.<br><br></li>
<li>
Write code to request an instance of the component’s manager class, and place the reference to it in the WithEvents variable.<br><br></li>
<li>
Write code to call the methods that initiate tasks or that request notifications.</li>
</ol>
<p>
Figure 8.12 shows how the author’s part and the developer’s part interact to enable asynchronous processing for the CoffeeReady example from the step-by-step procedures in "Creating an ActiveX EXE Component."</p>
<p class=label>
<b>Figure 8.12&nbsp;&nbsp; Asynchronous notifications using events</b></p>
<p>
<img src="avtcm104.gif" border=0></p>
<p class=indent>
<B><b>Note</b></B> &nbsp; The numbers in Figure 8.12 indicate the order in which things happen in the finished application and component. They do not correspond to the numbers in the task lists.</p>
<p>
A single event can be handled by multiple clients. One way to connect multiple clients to a single Coffee object would be to interpose a Connection object between the client and the Coffee object. In this way, each client would have its own Connection object, and each Connection object would supply its client with a reference to one central Coffee object.</p>
<p>
The Coffee object’s CoffeeReady event would be received by all clients that had a WithEvents variable containing a reference to the Coffee object.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; Visual Basic’s events can be thought of as <i>anonymous</i>. That is, the object that raises the event has no way of knowing whether a given event is handled by one, two, or two dozen objects — or by no objects at all. In addition, the object that raises an event has no way of knowing whether errors occur in the event-handling code of other objects.</p>
<p class=indent>
<B><b>Important</b></B> &nbsp; When you’re designing a system in which multiple clients receive the same event, <i>do not make assumptions about the order in which clients receive the event</i>. The order is undefined, and may differ depending on version number or platform.</p>
<p>
<B><b>For More Information</b></B> &nbsp; You can see these tasks carried out in the step-by-step procedures in "Creating an ActiveX EXE Component," which demonstrates asynchronous notifications using both events and call-back methods.</p>
</BODY>
</HTML>

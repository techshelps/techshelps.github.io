<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Private Collection Example: The House of Sticks</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconprivatecollectionexamplethehouseofsticks"></a>Private Collection Example: The House of Sticks</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPrivateCollectionExampleTheHouseOfSticksC">
</object></p>
<p>
This topic continues the code example begun in "Public Collection Example: The House of Straw." You may want to read that topic before beginning this one.</p>
<p>
A somewhat more robust way to link Employee objects with the SmallBusiness object is to make the Collection object private. For this example, you'll reuse the form and most of the code from the "Public Collection" example.</p>
<p>
The Employee class module is unchanged. The SmallBusiness class module, however, gets a complete facelift. Replace the declaration of the public Collection object with the following declaration, and add the Sub and Function procedures described in the following paragraphs.</p>
<pre><code>Option Explicit
Private mcolEmployees As New Collection
</code></pre>
<p>
As before, the code that adds an employee does most of the work. (You can take the block of code between the dotted lines out of the cmdEmployeeAdd_Click event procedure in the previous example.)</p>
<p>
The important change is that the Add method of the Collection object can no longer be called from any module in your program, because <code>mcolEmployees</code> is Private. You can only add an Employee object using the EmployeeAdd method, which correctly initializes the new object:</p>
<pre><code>' Method of the SmallBusiness class.
Public Function EmployeeAdd(ByVal Name As String, _
ByVal Salary As Double) As Employee
   ' - - - - - - - - - - - - - - - -
   Dim empNew As New Employee
   Static intEmpNum As Integer
   ' Using With makes your code faster and more
   ' concise (.ID vs. empNew.ID).
   With empNew
      ' Generate a unique ID for the new employee.
      intEmpNum = intEmpNum + 1
      .ID = "E" &amp; Format$(intEmpNum, "00000")
      .Name = Name
      .Salary = Salary
      ' Add the Employee object reference to the
      ' collection, using the ID property as the key.
      ' - - - - - - - - - - - - - - - -
      mcolEmployees.Add empNew, .ID
   End With
   ' Return a reference to the new Employee.
   Set EmployeeAdd = empNew
End Function
</code></pre>
<p>
The EmployeeAdd method returns a reference to the newly added Employee object. This is a good practice, because as soon as you create an object you will most likely want to do something with it.</p>
<p>
The EmployeeCount, EmployeeDelete, and Employees methods <i>delegate</i> to the corresponding methods of the Collection object. Delegation means that the Collection object does all the work.</p>
<pre><code>' Methods of the SmallBusiness class.
Public Function EmployeeCount() As Long
   EmployeeCount = mcolEmployees.Count
End Function

Public Sub EmployeeDelete(ByVal Index As Variant)
   mcolEmployees.Remove Index
End Sub

Public Function Employees(ByVal Index As Variant) _
As Employee
   Set Employees = mcolEmployees.Item(Index)
End Function
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can add extra functionality to these methods. For example, you can raise your own errors if an index is invalid.</p>
<p>
The last method is Trouble. This method attempts to add an uninitialized Employee object to the collection. Any guesses what will happen?</p>
<pre><code>' Method of the SmallBusiness class.
Public Sub Trouble()
   Dim x As New Employee
   mcolEmployees.Add x
End Sub
</code></pre>
<h3>Changes to the Form</h3>
<p>
You'll have to make a few changes to the form module. You can use the same module-level declarations used for the previous example, and the Click event for the Close button is the same, but the other event procedures have changed — the Add button code is much shorter, while the code for the Delete and List Employees buttons have changed in small but significant ways:</p>
<pre><code>Private Sub cmdEmployeeAdd_Click()
   sbMain.EmployeeAdd txtName.Text, txtSalary.Text
   txtName.Text = ""
   txtSalary.Text = ""
   cmdListEmployees.Value = True
End Sub

Private Sub cmdEmployeeDelete_Click()
   ' Check to make sure there's an employee selected.
   If lstEmployees.ListIndex &gt; -1 Then
      ' The first six characters are the ID.
      sbMain.EmployeeDelete Left(lstEmployees.Text, 6)
   End If
   cmdListEmployees.Value = True
End Sub

Private Sub cmdListEmployees_Click()
   Dim lngCt As Long
   lstEmployees.Clear
   For lngCt = 1 To sbMain.EmployeeCount
      With sbMain.Employees(lngCt)
         lstEmployees.AddItem .ID &amp; ", " &amp; .Name _
         &amp; ", " &amp; .Salary
      End With
   Next
End Sub
</code></pre>
<p>
But what's all this extra code in cmdListEmployees_Click? Unfortunately, in pursuit of robustness you've given up the ability to use For Each ... Next to iterate through the items in the collection, because the Collection object is now declared Private. If you try to code the following, you'll just get an error:</p>
<pre><code>' Won't work, because Employees isn't really a
' collection.
For Each emp In sbMain.Employees
</code></pre>
<p>
Fortunately, the EmployeeCount method can be used to delimit the iteration range.</p>
<p>
The Trouble button changes a little, too, but it's still, well, Trouble.</p>
<pre><code>Private Sub cmdTrouble_Click()
   sbMain.Trouble
End Sub
</code></pre>
<p>
Run the project and experiment with the Add, Delete, and Refresh List buttons. Everything works just like before.</p>
<p>
When you click the Trouble button, once again no error is generated. However, if you now click the Refresh List button, you can see that the uninitialized Employee object has somehow been added to the collection.</p>
<p>
How can this be? By making the Collection object private, you protect it from all the code in your program that's <i>outside</i> the SmallBusiness object, but not from the code <i>inside</i>. The SmallBusiness object may be large and complex, with a great deal of code in it. For example, it will very likely have methods like CustomerAdd, ProductAdd, and so on.</p>
<p>
A coding error, or the creation of a duplicate of the EmployeeAdd method, can still result in erroneous data — even invalid objects — being inserted into the collection, because the private variable is visible throughout the class module.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;This example is continued in "Creating Your Own Collection Class: The House of Bricks."</p>
</BODY>
</HTML>

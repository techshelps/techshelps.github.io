<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Performing a Parameter-Driven Stored Procedure</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconperformingparameterdrivenstoredprocedure"></a>Performing a Parameter-Driven Stored Procedure</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPerformingParameter-DrivenStoredProcedure_C;vbconPerformingParameterDrivenStoredProcedure_C">
</object></p>
<h2>RDO</h2>
<p>
Since many client/server applications depend heavily on stored procedures (SP), a data access interface should be able to perform them quickly and efficiently. Stored procedures, however, can be tricky to handle. In some cases, stored procedures require management of OUTPUT and return status values and other, more conventional arguments. In addition, an SP can return several complex resultsets, including PRINT or RAISERROR statement return values. In some cases, it's better to create complex SPs, while in others it’s better and easier to keep SPs simpler and more modular and use Visual Basic to tie them together.</p>
<p>
The code below shows the RDO approach to these problems. First, it performs a simple parameter-based SP and shows the results in the grid. Some accommodations are made to the subsequent ADO design, and these are noted. It uses the same connections established in the earlier examples.</p>
<p>
Note that the code requires us to include a correct ODBC "Call" statement. Again, this is not necessary in the UserConnection designer, but it’s essential in the RDO code-based approach. Here, you use the stand-alone rdoQuery object and assign the already open Connection to it. The rdoQuery object can then be used in subsequent calls to handle a parameter query.</p>
<p>
Note also that the code does not attempt to refer to the return status argument. This value is not available until the resultset is fully populated; only then does SQL Server return this value.</p>
<pre><code>Private Sub RunSPButton_Click()
 &nbsp; Dim Qy As New rdoQuery
 &nbsp; Dim rs As rdoResultset
 &nbsp; sql = "{? = Call AuthorByYearBorn (?,?)}"
 &nbsp; Set Qy.ActiveConnection = cn
 &nbsp; Qy.sql = sql
 &nbsp; Qy.rdoParameters(0).Direction = rdParamReturnValue
 &nbsp; Qy(1) = "1947"
 &nbsp; Qy(2) = "1948"
 &nbsp; Set rs = Qy.OpenResultset()
 &nbsp; rdoGrid1.ShowData rs
 &nbsp; ShowRows = rs.RowCount
 &nbsp; rs.Close
End Sub
</code></pre>
<h2>ADO</h2>
<p>
ADO has a lot of flexibility when it comes to performing stored procedures. But this flexibility comes at the cost of more code. As with the previous example ("Performing a Parameter Query"), it's possible to build your own ADODB Parameters collection. In this case, you’re performing a simple two-argument SP, "AuthorByYearBorn", that returns a small resultset. Note that although ADO allows you to create your own parameters, it's not necessary to do so.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;ADO collections are 0-based to match DAO. RDO collections are 1-based.</p>
<pre><code>Private Sub RunSPButton_Click()
 &nbsp; Dim Qy As New ADODB.Command
 &nbsp; Dim Parm As New ADODB.Parameter
 &nbsp; Dim Parm2 As New ADODB.Parameter

 &nbsp; Set Qy.ActiveConnection = cn
 &nbsp; Qy(0)="1947"
 &nbsp; Qy(1)="1948" 
 &nbsp; Qy.CommandType = adCmdStoredProc
 &nbsp; Qy.CommandText = "AuthorByYearBorn"

 &nbsp; Set rs = Qy.Execute(ShowRows)
 &nbsp; ADOGrid1.ShowData rs
End Sub
</code></pre>
</BODY>
</HTML>

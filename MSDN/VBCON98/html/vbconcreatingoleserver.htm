<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an ActiveX Exe Component</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingoleserver"></a>Creating an ActiveX EXE Component</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingOLEServerC">
</object></p>
<p>
Components provide reusable code in the form of objects. An application that uses a component’s code, by creating objects and calling their properties and methods, is referred to as a <i>client</i>.</p>
<p>
Components can run either in-process or out-of-process with respect to the clients that use their objects. An out-of-process component, or ActiveX EXE, runs in its own address space. The client is usually an application running in another process.</p>
<p class=label>
<b>Figure 3.1&nbsp;&nbsp;&nbsp;Client and out-of-process component</b></p>
<p>
<img src="avtcm110.gif" border=0></p>
<p>
The fact that an out-of-process component runs in its own process means that a client can tell it to do something, and then go about its business while the component does the work.&nbsp; When such a system is properly set up, the component can tell the client when the task is done using an <i>asynchronous notification</i>, as explained in "Asynchronous Call-Backs and Events" in "Building Code Components."</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In-Process and Out-of-Process Code Components," in "General Principles of Component Design," discusses differences between in-process and out-of-process code components.</p>
<p>
The step-by-step procedures in this chapter explore the creation and use of out-of-process components by building a simple component called CoffeeWatch. Coffeewatch demonstrates the behavior of modal and modeless dialog boxes, and shows one way to implement asynchronous notifications using events.</p>
<p>
You’ll also see how to debug an ActiveX EXE out of process, by running the component and a test project in two separate instances of the Visual Basic development environment.</p>
<p>
The procedures for creating the Coffee component build on each other. The sequence in which you perform the procedures is therefore important:</p>
<h2>Topics</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=6%><a href="vbconcreatingserver.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconcreatingserver.htm">Creating the Coffee Project</a><p>
Opens a new ActiveX EXE project, sets the necessary project information, and adds modules required for demonstrating modal and modeless forms.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconsettingupnewoleserverproject.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconsettingupnewoleserverproject.htm">Showing Forms from the CoffeeMonitor Class</a><p>
Adds code to show a form either modally or modelessly.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbcontheclassmodule.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbcontheclassmodule.htm">Creating the CoffeeWatch Test Project</a><p>
Shows how to create a test project in a second instance of the development environment. Adds code to the test project to call the methods of CoffeeMonitor.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconcreatingpropertiesmethods.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconcreatingpropertiesmethods.htm">How Modal and Modeless Forms Behave Out of Process</a><p>
Shows that modal and modeless forms display differently when they’re not in the same process as the client’s main form.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconaddingcodeforinitializeterminateevents.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconaddingcodeforinitializeterminateevents.htm">Providing an Asynchronous Notification Event</a><p>
Shows how to set up an object to provide asynchronous notifications to one or more clients.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconrunningproject.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconrunningproject.htm">Receiving an Asynchronous Notification Event</a><p>
Adds code to the client to request asynchronous notifications, and to take some action when the notification events occur.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconsharingcoffeemonitor.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconsharingcoffeemonitor.htm">Sharing the CoffeeMonitor</a><p>
Creates a Connector object that clients can use to obtain a reference to a single shared instance of CoffeeMonitor.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconusingsharedcoffeemonitor.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconusingsharedcoffeemonitor.htm">Using the Shared CoffeeMonitor</a><p>
Adds code to the client to request a Connector object, and then call its CoffeeMonitor property to obtain a reference to a shared CoffeeMonitor object.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconcreatingtestingexecutable.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconcreatingtestingexecutable.htm">Creating and Testing the Coffee Executable</a><p>
Compiles both the Coffee component and the CoffeeWatch test program. Runs both the CoffeeWatch project and several instances of CoffeeWatch.exe using one instance of Coffee.exe.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconctcmp02recap.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconctcmp02recap.htm">ActiveX EXE Component Creation Summary</a><p>
Outlines the typical process of designing and creating an out-of-process component.</p>
</td>
</tr>
</table><br>
<h2>Before You Begin</h2>
<p>
These procedures will be easier to follow if you set up your development environment as described below.</p>
<p class=label>
<b>Before You Begin</b>
<ol>
<li>
On the <b>View</b> menu, click <b>Toolbox</b> to open the Toolbox.<br><br></li>
<li>
On the <b>View</b> menu, click <b>Project Explorer</b> to open the <b>Project Explorer</b> window. The <b>Project Explorer </b>window will be used extensively to switch between project files.<br><br></li>
<li>
If the <b>Project Explorer </b>window is in Folder view, as shown below, click the <b>Toggle Folders </b>button on the <b>Project Explorer </b>window toolbar to turn the folders off.<p>
<img src="avtcm007.gif" border=0></P></li>
<li>
On the <b>View</b> menu, click <b>Properties Window</b> to open the <b>Properties </b>window.<br><br></li>
<li>
On the <b>Tools </b>menu, click <b>Options </b>to open the <b>Options </b>dialog box. <p class=tl>
Select the <b>Editor </b>tab, and make sure <b>Require Variable Declaration </b>is checked. This makes it much easier to catch typing errors.</P><p class=tl>
Select the <b>Environment </b>tab. Make sure <b>Prompt To Save Changes</b> is selected, then click <b>OK</b>. This will make it easy to save changes to the project as you go along.</P></li>
</ol>
<h2>Sample applications</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=6%><img src="sampapp.gif" border=0></td>
<td width=94%><b>Coffee2.vbp</b>, <b>CoffWat2.vbp</b>, <b>MTCoffee.vbp</b><p>
Coffee2.vbp and CoffWat2.vbp contain expanded source code for this chapter. In addition to asynchronous notifications using events, they include an alternate version using call-back methods on a secondary interface, and an example of all-code timers you can use instead of the Timer control. MTCoffee illustrates some features of multithreading. The sample applications are listed in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory.</p>
</td>
</tr>
</table>
</BODY>
</HTML>

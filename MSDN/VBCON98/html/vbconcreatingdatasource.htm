<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Data Source</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingdatasource"></a>Creating a Data Source</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingDataSource_C">
</object></p>
<p>
In this section, we’ll walk step-by-step through the process of creating a data-aware class that acts as a data source. This example will bind a TextBox control to our data source class in order to display the data. The next section, "Creating a Data Consumer," demonstrates how to bind our data source class to a data consumer class.</p>
<p>
The code examples in this section are taken from the Data-aware Classes (Dataware.vbp) sample. You'll find this application in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory.</p>
<p>
Creating a data source is a two-step process. In the first step we’ll create the data source class; in the second step we’ll hook it up to a TextBox control in order to display the output.</p>
<h3>Creating the Source Class</h3>
<p>
The first step in creating a source class is to define a new class and give it the properties and methods necessary to provide data:
<ol>
<li>
Open a new Standard EXE project, and insert a class module by selecting <b>Add Class Module</b> from the <b>Project</b> menu.<br><br></li>
<li>
In the <b>Properties</b> window, set the properties of the class as follows:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Property</b></td>
<td class=label width=71%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=29%>Name</td>
<td width=71%>MySource</td>
</tr>
<tr valign=top>
<td width=29%>DataSourceBehavior</td>
<td width=71%>vbDataSource</td>
</tr>
</table><br>
<p class=tl>
When DataSourceBehavior is set to vbDataSource, a new Sub procedure GetDataMember is added to the class module. You can see this by selecting Class from the Object list in the code editor, then selecting the Event list.</P></li>
<li>
Select <b>References</b> from the <b>Project</b> menu, and add a reference to the Microsoft ActiveX Data Objects 2.0 Library.<br><br></li>
<li>
Add the following to the <b>Declarations</b> section of the class module:<pre><code>Option Explicit
Private rs As ADODB.Recordset
</code></pre>
<p class=tl>
This declares an object variable for the ADO Recordset object.</P></li>
<li>
Add the following code to the class module’s Initialize event procedure:<pre><code>Private Sub Class_Initialize()
 &nbsp; Dim strPath As String, strName As String
 &nbsp; Dim i As Integer

 &nbsp; ' Create an instance of the Recordset.
 &nbsp; Set rs = New ADODB.Recordset

 &nbsp; ' Set the properties of the Recordset.
 &nbsp; With rs
 &nbsp;&nbsp;&nbsp;&nbsp; .Fields.Append "DirID", adInteger
 &nbsp;&nbsp;&nbsp;&nbsp; .Fields.Append "Directory", adBSTR, 255
 &nbsp;&nbsp;&nbsp;&nbsp; .CursorType = adOpenStatic
 &nbsp;&nbsp;&nbsp;&nbsp; .LockType = adLockOptimistic
 &nbsp;&nbsp;&nbsp;&nbsp; .Open
 &nbsp; End With

 &nbsp; ' Loop through the directories and populate
 &nbsp; ' the Recordset. 
 &nbsp; strPath = "C:\"
 &nbsp; strName = Dir(strPath, vbDirectory)
 &nbsp; i = 0
 &nbsp; Do While strName &lt;&gt; ""
 &nbsp;&nbsp;&nbsp;&nbsp; If strName &lt;&gt; "." And strName &lt;&gt; ".." Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If (GetAttr(strPath &amp; strName) And _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbDirectory) = vbDirectory Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = i + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With rs
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .AddNew
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Fields.Item("DirID") = i 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Fields.Item("Directory") = strName
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Update
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End With
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp; strName = Dir
 &nbsp; Loop

 &nbsp; ' Return to the first record.
 &nbsp; rs.MoveFirst
End Sub
</code></pre>
<p class=tl>
In this example we’re creating a ADO Recordset object on the fly and populating it with a list of directories. Alternatively, you could use an existing recordset by assigning to the Connect property of the ADO Recordset in the Initialize event.</P></li>
<li>
Select <b>Class</b> from the <b>Object</b> list in the <b>Code Editor</b>, then select GetDataMember from the <b>Event</b> list. Add the following code to the GetDataMember Sub procedure:<pre><code>Private Sub Class_GetDataMember(DataMember As String, Data As Object)
 &nbsp; ' Assign the Recordset to the Data object.
 &nbsp; Set Data = rs
End Sub
</code></pre>
<p class=tl>
The GetDataMember procedure sets the source of the data for the class. Your data source class can provide multiple data sources by adding a Select Case statement to the GetDataMember procedure and passing in a source name in the DataMember argument.</P></li>
<li>
Add a new Sub procedure to provide a public method to loop through the Recordset:<pre><code>Public Sub Cycle()
 &nbsp; ' Cycle through the Recordset.
 &nbsp; rs.MoveNext
 &nbsp; If rs.EOF = True Then
 &nbsp;&nbsp;&nbsp;&nbsp; rs.MoveFirst
 &nbsp; End If
End Sub
</code></pre>
<p class=tl>
In order to move through the recordset, we need to expose the navigation methods for our class. For simplicity, this example can only loop forward through the recordset. To make the class more useful, you might want to expose methods such as MoveFirst, MoveNext, Add, and Delete.</P></li>
</ol>
<h3>Using the Source Class</h3>
<p>
Now that the source class is defined, we can do something useful with it. In this example we’ll bind it to a TextBox control so that we can see its output; we’ll also use a CommandButton to execute our Cycle method.
<ol>
<li>
Select Form1 and add a TextBox control and a CommandButton control to the form.<br><br></li>
<li>
In the <b>Properties</b> window, set the properties of the TextBox as follows:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Property</b></td>
<td class=label width=71%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=29%>Name</td>
<td width=71%>txtConsumer</td>
</tr>
<tr valign=top>
<td width=29%>Text</td>
<td width=71%>(blank)</td>
</tr>
</table><br>
</li>
<li>
In the <b>Properties</b> window, set the properties of the CommandButton as follows:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Property</b></td>
<td class=label width=71%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=29%>Name</td>
<td width=71%>cmdCycle</td>
</tr>
<tr valign=top>
<td width=29%>Caption</td>
<td width=71%>Cycle</td>
</tr>
</table><br>
</li>
<li>
Select <b>References</b> from the <b>Project</b> menu, and add a reference to the Microsoft Data Binding Collection.<p class=tl>
The DataBinding object provided by the Data Binding Collection is the "glue" that binds a data source to a data consumer.</P></li>
<li>
Add the following to the <b>Declarations</b> section of the class module:<pre><code>Option Explicit
Private objSource As MySource
Private objBindingCollection As BindingCollection
</code></pre>
<p class=tl>
We need to declare our source class (MySource) and the BindingCollection object using early binding.</P></li>
<li>
Add the following code to the <b>Form_Load</b> event procedure:<pre><code>Private Sub Form_Load()
 &nbsp; Set objSource = New MySource
 &nbsp; Set objBindingCollection = New BindingCollection

 &nbsp; ' Assign the source class to the Binding
 &nbsp; ' Collection’s DataSource property.
 &nbsp; Set objBindingCollection.DataSource = objSource
 &nbsp; ' Add a binding.
 &nbsp; ObjBindingCollection.Add txtConsumer, "Text", "Directory"
</code></pre>
<p class=tl>
In the Load event we create instances of the source class and the BindingCollection object, then we assign the source object to the DataSource property of the BindingCollection. Finally, we add a binding by specifying the name of the consumer (txtConsumer), the Property of the consumer to be bound (the Text property), and the Field property of the source object that we are binding to (Directory).</P></li>
<li>
Add the following code to the cmdCycle Click event procedure:<pre><code>Private cmdCycle_Click()
 &nbsp; ' Call the Cycle method of the data source.
 &nbsp; ObjSource.Cycle
End Sub
</code></pre>
<p class=tl>
This will execute the Cycle method of our source class.</P><pre></pre>
</li>
<li>
Press F5 to run the project.<p class=tl>
As you click the Cycle button, directory names from the recordset created in our source class will appear in the TextBox. Congratulations — you’ve just bound a control to a data source class without using a Data control!</P></li>
<li>
Save the project. When prompted for filenames, use the following names.<p class=tl>
Save the source class as "MySource.cls".</P><p class=tl>
Save the form as "Dataform.frm".</P><p class=tl>
Save the project as "Dataware.vbp".</P><p class=tl>
These files will be used later in "Creating a Data Consumer."</P></li>
</ol>
<p>
In the next section "Creating a Data Consumer," we’ll look at the process of creating a data-aware class that acts a consumer of data.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The ADO Object Model</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontheadoobjectmodel"></a>The ADO 2.0 Object Model</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheADOObjectModel_C">
</object></p>
<p>
The ADO 2.0 object model is composed of eight objects, most of them similar in functionality to RDO objects, only with enhanced functionality. Spend some time browsing the object model in the Object Browser (F2) to become familiar with the location of the various properties, methods, events, collections, and so forth.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;All objects followed by an asterisk (*) are objects that also apply to the ADO Recordset type library (ADOR).
<ul type=disc>
<li>
<b>Command object</b>&nbsp;&nbsp;&nbsp;Contains information about a command, such as a query string, parameter definition, and so forth. The Command object is similar in functionality to RDO's rdoQuery object.<br><br></li>
<li>
<b>Connection object</b>&nbsp;&nbsp;&nbsp;Contains information about a data provider. The Connection object is similar in functionality to RDO's rdoConnection object, and it contains the information on schema. It also contains some of the functionality of the RDOEnvironment object, such as transaction control.<br><br></li>
<li>
<b>Error object</b>&nbsp;&nbsp;&nbsp;Contains extended information when an error occurs with a data provider. The Error object is similar in functionality to RDO's rdoError object. In comparison to RDO, however, the Errors collection is on the Connection object, whereas the rdoErrors collection is on the rdoEngine object in RDO 2.0.<br><br></li>
<li>
<b>Field object*</b>&nbsp;&nbsp;&nbsp;Contains information about a single column of data in a recordset. The Field object is similar in functionality to RDO's rdoColumn object.<br><br></li>
<li>
<b>Parameter object</b>&nbsp;&nbsp;&nbsp;Contains a single parameter for a parameterized Command object. The Command object has a Parameters collection to contain all of its Parameter objects. The Parameter object is similar in functionality to RDO's rdoParameter object.<br><br></li>
<li>
<b>Property object*</b>&nbsp;&nbsp;&nbsp;Contains a provider-defined characteristic of an ADO object. There is no RDO equivalent to this object, but DAO has a similar object. ADO objects can have two kinds of properties:<ul type=disc>
<li>
<i>Built-In Properties:</i> Properties which are "native" to ADO. That is, properties in ADO that are immediately available to any new object using the familiar MyObject.Property syntax. Built-in properties do not appear as Property objects in an object’s Properties collection, so while you can change their values, you can't modify their characteristics or delete them.<br><br></li>
<li>
<i>Dynamic properties:</i> Properties which are not native to ADO and are defined by the underlying data provider. They appear in the Properties collection of the appropriate ADO object.<p class=tl>
For example, a property specific to the data provider may indicate if a Recordset object supports transactions or updating. These additional properties appear as Property objects in the Recordset’s Properties collection. Dynamic properties can be referred to only through the collection using the MyObject.Properties(0) or MyObject.Properties("Name") syntax. Different data providers may implement one or more special properties to deal with special provider-specific operations.</P></li>
</ul>
</li>
<li>
<b>Recordset object*</b>&nbsp;&nbsp;&nbsp;The Recordset object contains records returned from a query as well as a cursor into those records. The Recordset object is similar in functionality to RDO's rdoResultset object. You can open a Recordset (for example, perform a query) without explicitly opening a Connection object. If, however, you choose to create a Connection object, you can open multiple Recordset objects on the same connection.</li>
</ul>
</BODY>
</HTML>

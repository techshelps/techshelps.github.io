<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Coordinate System</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingcoordinatesystem"></a>Understanding the Coordinate System</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingCoordinateSystemC">
</object></p>
<p>
Every graphical operation described in this chapter (including resizing, moving, and drawing) uses the coordinate system of the drawing area or container. Although you can use the coordinate system to achieve graphical effects, it is also important to know how to use the coordinate system to define the location of forms and controls in your application.</p>
<p>
The coordinate system is a two-dimensional grid that defines locations on the screen, in a form, or other container (such as a picture box or Printer object). You define locations on this grid using coordinates in the form:</p>
<p>
(<i>x</i>, <i>y</i>)</p>
<p>
The value of <i>x</i> is the location of the point along the x-axis, with the default location of 0 at the extreme left. The value of y is the location of the point along the y-axis, with the default location of 0 at the extreme top. This coordinate system is illustrated in Figure 12.3.</p>
<p class=label>
<b>Figure 12.3&nbsp;&nbsp;&nbsp;The coordinate system of a form</b></p>
<p>
<img src="avp12003.gif" border=0></p>
<p>
The following rules apply to the Visual Basic coordinate system:
<ul type=disc>
<li>
When you move or resize a control, you use the coordinate system of the control’s container. If you draw the object directly on the form, the form is the container. If you draw the control inside a frame or picture box, the frame or the control is the container.<br><br></li>
<li>
All graphics and Print methods use the coordinate system of the container. For example, statements that draw inside a picture box use the coordinate system of that control.<br><br></li>
<li>
Statements that resize or move a form always express the form’s position and size in twips.<p class=tl>
When you create code to resize or move a form, you should first check the Height and Width properties of the Screen object to make sure the form will fit on the screen.</P></li>
<li>
The upper-left corner of the screen is always (0, 0). The default coordinate system for any container starts with the (0, 0) coordinate in the upper-left corner of the container.</li>
</ul>
<p>
The units of measure used to define locations along these axes are collectively called the <i>scale</i>. In Visual Basic, each axis in the coordinate system can have its own scale.</p>
<p>
You can change the direction of the axis, the starting point, and the scale of the coordinate system, but use the default system for now. "Changing an Object’s Coordinate System" later in this chapter discusses how to make these changes.</p>
<h2>Twips Explained</h2>
<p>
By default, all Visual Basic movement, sizing, and graphical-drawing statements use a unit of one twip. A <i>twip</i> is 1/20 of a printer’s point (1,440 twips equal one inch, and 567 twips equal one centimeter). These measurements designate the size an object will be when printed. Actual physical distances on the screen vary according to the monitor size.&nbsp; "Changing an Object’s Coordinate System" describes how to select units other than twips.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Inserting Objects at Design Time with the OLE Container Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconinsertingobjectsatdesigntimewiththeolecontainercontrol"></a>Inserting Objects at Design Time with the OLE Container Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconInsertingObjectsAtDesignTimeWithTheOLEContainerControlC">
</object></p>
<p>
Each time you draw an OLE container control on a form, Visual Basic displays the Insert Object dialog box. You use this dialog box, shown in Figure 10.10, to insert linked or embedded objects at design time. The Insert Object dialog box presents a list of the available objects you can link or embed into your application.</p>
<p class=label>
<b>Figure 10.10&nbsp;&nbsp;&nbsp;The Insert Object dialog box</b></p>
<p>
<img src="avp10012.gif" border=0></p>
<p>
When you insert an object into the OLE container control at design time, the Class, SourceDoc, and SourceItem properties are automatically set for you. These properties identify the application that supplies the object, the source file name, and any specific data that is linked from within that file. For more information about these and other properties and methods that apply to the OLE container control, see "Inserting Objects at Run Time."</p>
<h2>Inserting Linked Objects at Design Time</h2>
<p>
When you insert a linked object, the data displayed in the OLE container control exists in one place — the source file. The object's current data can be viewed from any other applications that contain links to that data. The OLE container control maintains the object's link information, such as the name of the application that supplied the object, the name of the linked file, and an image of the linked data.</p>
<p class=label>
<b>To insert a linked object using the Insert Object dialog box</b>
<ol>
<li>
Draw an <b>OLE container control</b> on a form.<p class=tl>
The <b>Insert Object</b> dialog box is displayed. You can also display this dialog box at any time by clicking the <b>OLE container control</b> with the right mouse button and then choosing the <b>Insert Object</b> command.</P></li>
<li>
Select the <b>Create from File</b> option button.<br><br></li>
<li>
Choose the <b>Brows</b>e button.<p class=tl>
A <b>Browse</b> dialog box is displayed.</P></li>
<li>
Select the file you want to link.<br><br></li>
<li>
Click <b>Insert</b> to return to the <b>Insert</b> <b>Object</b> dialog box.<br><br></li>
<li>
Select the <b>Link</b> check box in the <b>Insert</b> <b>Object</b> dialog box, and choose <b>OK</b> to create the linked object.</li>
</ol>
<p>
When you use a linked object, every user who runs your application must have access (a valid path) to the linked file and a copy of the application that created the file. Otherwise, when your application is run, an image of the original data is displayed, but the user will not be able to modify the data, nor will the user see changes others may have made to the linked data. This may be a concern if your application is running on a network.</p>
<p>
If your application contains a linked object, it is possible for that object's data to be changed by another application when your application is not running. The next time your application is run, changes to the source file do not automatically appear in the OLE container control. To display the current data in the OLE container control, use the control's Update method:</p>
<pre><code>oleObj.Update
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Update Method (OLE Container)."</p>
<p>
If a user wants to save changes to a linked object, the user must save it from the ActiveX component's menu. The OLE container control's SaveToFile<b> </b>method applies only to embedded objects.</p>
<h2>Creating Embedded Objects at Design Time</h2>
<p>
When you create an embedded object, you can either embed data from a file or create a new, empty object that can be filled with data later. When you embed data from a file, a copy of the specified file's data is displayed in the OLE container control. When you create a new object, the application that created the object is invoked and you can enter data into the object.</p>
<p>
Typically, you create embedded objects that display existing data at design time. This allows you to view the object's data as it will appear to the user. You can then move and size the OLE container control and the other controls on the form to create your application's user interface.</p>
<p>
To display existing data in an embedded object, create the object using an existing file as a template. The OLE container control then contains an image of the data in the file. An application that displays data using an embedded object will be larger than an application that displays the same data using a linked object, because the application with the embedded object actually contains the source file's data.</p>
<p class=label>
<b>To create an embedded object using an existing file</b>
<ol>
<li>
Draw an <b>OLE container control</b> on your form.<p class=tl>
The <b>Insert</b> <b>Object</b> dialog box is automatically displayed.</P></li>
<li>
Select the <b>Create</b> <b>from</b> <b>File</b> option button.<br><br></li>
<li>
Choose the <b>Browse</b> button.<p class=tl>
A <b>Browse</b> dialog box is displayed.</P></li>
<li>
Select the file you want to embed.<br><br></li>
<li>
Choose Insert to return to the <b>Insert</b> <b>Object</b> dialog box.<br><br></li>
<li>
In the <b>Insert</b> <b>Object</b> dialog box, choose <b>OK</b> to create the embedded object.</li>
</ol>
<p>
Unlike the data in a linked object, data in an embedded object is not persistent. In other words, if you want changes entered by the user to appear the next time your application is run, you must use the SaveToFile<b> </b>method to save the data. For more information on saving embedded data to a file, see "Saving and Retrieving Embedded Data" later in this chapter.</p>
<h2>Creating Objects Using the Paste Special Dialog Box</h2>
<p>
Another way to create an object at design time is to use the Paste Special dialog box (shown in Figure 10.11). This dialog box is helpful if you only want to use a portion of a file — for instance, a range of cells from a spreadsheet, or a paragraph from a Word document.</p>
<p class=label>
<b>Figure 10.11&nbsp;&nbsp;&nbsp;The Paste Special dialog box</b></p>
<p>
<img src="avp10013.gif" border=0></p>
<p class=label>
<b>To create an object using the Paste Special dialog box</b>
<ol>
<li>
Run the application containing the data you want to link or embed.<br><br></li>
<li>
Select the data you want to link or embed.<br><br></li>
<li>
From the ActiveX component's <b>Edit</b> menu, choose <b>Copy</b>.<p class=tl>
The data is copied onto the Clipboard.</P></li>
<li>
In Visual Basic, click the <b>OLE</b> <b>container</b> <b>control</b> with the right mouse button, and choose the <b>Paste</b> <b>Special</b> command from the pop-up menu.<br><br></li>
<li>
Select the <b>Paste</b> option button if you want to create an embedded object.<p class=tl>
-or-</P><p class=tl>
Select the <b>Paste</b> <b>Link</b> option button if you want to create a linked object.</P><p class=tl>
If there is already an object embedded or linked in the control, a message asks whether you'd like to delete that existing object and create a new one in its place.</P></li>
<li>
Choose <b>OK</b> to create the object.</li>
</ol>
</BODY>
</HTML>

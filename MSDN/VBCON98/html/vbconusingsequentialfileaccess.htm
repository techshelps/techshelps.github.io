<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Sequential File Access</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingsequentialfileaccess"></a>Using Sequential File Access</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingSequentialFileAccessC">
</object></p>
<p>
It is recommended that you use File System Objects to create text files, but this information is provided in case you need to use the older text file creation methods. </p>
<p>
Sequential access works best when you want to process files consisting only of text, such as the files created with a typical text editor — that is, files in which data is <i>not </i>divided into a series of records. Sequential access may not be well suited for storing long series of numbers, because each number is stored as a character string. A four-digit number would require 4 bytes of storage instead of the 2 bytes it requires to store the same number as an integer.</p>
<h2>Opening Files for Sequential Access</h2>
<p>
When you open a file for sequential access, you open it to perform one of the following operations:
<ul type=disc>
<li>
Input characters from a file (Input)<br><br></li>
<li>
Output characters to a file (Output)<br><br></li>
<li>
Append characters to a file (Append)</li>
</ul>
<p>
To open a file for sequential access, use the following syntax for the Open statement:</p>
<p>
<b>Open</b> <i>pathname</i> <b>For</b> [<b>Input</b> | <b>Output</b> | <b>Append</b>] <b>As</b> <i>filenumber</i> [<b>Len</b> = <i>buffersize</i>]</p>
<p>
When you open a sequential file for Input, the file must already exist; otherwise, an error occurs. When you try to open a nonexistent file for Output or Append, however, the Open statement creates the file first and then opens it.</p>
<p>
The optional Len argument specifies the number of characters to buffer when copying data between the file and your program.</p>
<p>
After opening a file for an Input, Output, or Append operation, you must close it, using the Close statement, before reopening it for another type of operation.</p>
<h2>Editing Files Opened for Sequential Access</h2>
<p>
If you want to edit a file, first read its contents to program variables, then change the variables, and finally, write the variables back to the file. The following sections discuss how to edit records opened for sequential access.</p>
<h3>Reading Strings from Files</h3>
<p>
To retrieve the contents of a text file, open the file for sequential Input. Then use the Line Input #, Input( ), or Input # statement to copy the file into program variables.</p>
<p>
Visual Basic provides statements and functions that will read and write sequential files one character at a time or one line at a time.</p>
<p>
For example, the following code fragment reads a file line by line:</p>
<pre><code>Dim LinesFromFile, NextLine As String

Do Until EOF(FileNum)
   Line Input #FileNum, NextLine
   LinesFromFile = LinesFromFile + NextLine + Chr(13) + Chr(10)
Loop
</code></pre>
<p>
Although Line Input # recognizes the end of a line when it comes to the carriage return–linefeed sequence, it does not include the carriage return–linefeed when it reads the line into the variable. If you want to retain the carriage return–linefeed, your code must add it.</p>
<p>
You can also use the Input # statement, which reads a list of numbers and/or string expressions written to the file. For example, to read in a line from a mailing list file, you might use the following statement:</p>
<pre><code>Input #FileNum, name, street, city, state, zip
</code></pre>
<p>
You can use the Input function to copy any number of characters from a file to a variable, provided the variable is large enough. For example, the following code uses Input to copy the specified number of characters to a variable:</p>
<pre><code>LinesFromFile = Input(n, FileNum)
</code></pre>
<p>
To copy an entire file to a variable, use the InputB function to copy bytes from a file to a variable. Since the InputB function returns an ANSI string, you must use the StrConv function to convert the ANSI string to a UNICODE string as follows:</p>
<pre><code>LinesFromFile = StrConv(InputB(LOF(FileNum), FileNum), vbUnicode)</code></pre>
<h3>Writing Strings to Files</h3>
<p>
To store the contents of variables in a sequential file, open it for sequential Output or Append, and then use the Print # statement. For example, a text editor might use the following line of code to copy the contents of a text box into a file:</p>
<pre><code>Print #FileNum, TheBox.Text
</code></pre>
<p>
Visual Basic also supports the Write # statement, which writes a list of numbers and/or string expressions to a file. It automatically separates each expression with a comma and puts quotation marks around string expressions:</p>
<pre><code>Dim AnyString As String, AnyNumber As Integer

AnyString = "AnyCharacters"
AnyNumber = 23445
Write #FileNum, AnyString, AnyNumber
</code></pre>
<p>
This code segment writes two expressions to the file specified by <code>FileNum</code>. The first contains a string and the second contains the number 23445. Therefore, Visual Basic writes the following characters (including all punctuation) to the file:</p>
<pre><code>"AnyCharacters",23445
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you are using Write # and Input # with sequential access, consider using random or binary access instead, because they are better suited to record-oriented data.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For additional information on sequential file access, see "Open Statement."</p>
</BODY>
</HTML>

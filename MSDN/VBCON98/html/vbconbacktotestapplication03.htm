<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Global Object in TestThing</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconbacktotestapplication03"></a>Using the Global Object in TestThing</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconBackToTestApplication03C">
</object></p>
<p>
TestThing will call the ShowDialog method to display a modal dialog in its Form_Load event procedure, as the application is starting. It will also show a modeless dialog when the main form is clicked.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX DLL. It begins with the topic <a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</p>
<p class=label>
<b>To add code to call the ShowDialog method</b>
<ol>
<li>
In the <b>Project Explorer </b>window, click <b>Form1</b> to select it, then press F7 — or click the <b>Code</b> button on the <b>Project Explorer </b>window toolbar — to open the code window for the form. Place the following code in the Form_Load event.<pre><code>Sub Form_Load()
 &nbsp; Me.Caption = ShowDialog(Me.Caption)
End Sub
</code></pre>
<p class=tl>
Notice that no object variable is declared, and that the ShowDialog method is called as if it were an ordinary function procedure. This is possible because the Dialogs object’s Instancing property is set to GlobalMultiUse.</P></li>
<li>
In the Declarations section, add the following code:<pre><code>Private WithEvents mdgs As Dialogs
</code></pre>
<p class=tl>
The variable is declared WithEvents, so that Form1 can handle the NotifyClients events raised by the Dialogs object.</P></li>
<li>
In the <b>Object</b> box, select <b>mdgs</b> to show the event procedure. Add the following code:<pre><code>Private Sub mdgs_NotifyClients(Byval Data As String)
 &nbsp; Me.Caption = Data
End Sub
</code></pre>
<p class=tl>
Whenever the NotifyClients event is received, Form1 assigns the data to its caption property. The modeless dialog box thus controls the form’s caption.</P></li>
<li>
To show the modeless dialog and start event handling, add the following code to the Form_Click event procedure:<pre><code>Private Sub Form_Click()
 &nbsp; If mdgs Is Nothing Then
 &nbsp;&nbsp;&nbsp;&nbsp; Set mdgs = New Dialogs
 &nbsp; End If
 &nbsp; mdgs.ShowDialog Me.Caption, False
End Sub
</code></pre>
<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;The Dialogs object created here is not the global instance used to show the modal dialog in the Load event. The global instance will be created automatically when the ShowDialog method is invoked in Form_Load, and will be used for any subsequent method invocations that omit the object variable. The instance used to show the modeless dialog box is explicitly created and assigned to the WithEvents variable, so its NotifyClients event can be handled.</p></li>
</ol>
<p>
Okay! The Dialogs object creates and manipulates a dlgForm object, and receives its NotifyClients event. Form1 creates two different Dialogs objects, one implicitly (the global instance used to show the modal dialog) and one explicitly (used to show the modeless dialog).</p>
<p>
The modeless dialog communicates with the Dialogs object by raising a NotifyClients event. The Dialogs object responds by raising its own NotifyClients event, which Form1 handles by assigning the data to its Caption property. Time to see if it all works!</p>
<p class=label>
<b>To see if it all works</b>
<ol>
<li>
Press CTRL+f5 to run the project group. The first thing you’ll see is the dialog box, containing the caption of Form1:<p>
<img src="avtcm017.gif" border=0></P></li>
<li>
Enter a new caption, and close the dialog box. The main form appears, showing its new caption.<br><br></li>
<li>
Click on the main form to create another Dialogs object, which will show a modeless dialog box containing the current caption of the main form. Enter another caption, and observe that with each keystroke the main form’s caption changes:<p>
<img src="avtcm018.gif" border=0></P><p class=tl>
Each change to the contents of the text box raises a NotifyClients event from dlgDemo to the Dialogs object. The Dialogs object then raises its own NotifyClients event, which the main form receives.</P></li>
</ol>
<p>
You may find it instructive to run the project again, pressing f8 this time to step through the code one line at a time. You can clearly see that two different Dialogs objects are involved, because you’ll step through their separate Initialize events.</p>
<p>
Among the interesting things you’ll notice is that the <i>modal</i> dialog box raises NotifyClients events, just as the modeless dialog box does. Form1 doesn’t have a WithEvents variable containing a reference to the global Dialogs object, so it’s unable to handle these events.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;The "global" in "global object" simply means that the methods and properties of the object added to the global name space of your project, so that they can be used without first declaring an object variable. It <i>does not </i>mean that there is only one such object, or that multiple client applications can share a single object. An instance of the class will be created for each client that uses methods of the class without qualifying them. Only one such global object will be created for each client.</p>
<h4>Client Support for Modeless Forms</h4>
<p>
The display of modeless forms from in-process components requires communication with the client’s message loop. Not all clients support this. For an explanation of this limitation, see "Displaying Forms from Code Components," in "Building Code Components."</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Global objects are discussed in "Instancing for Classes Provided by ActiveX Components" in "General Principles of Component Design," and in "Building Code Components."</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX DLL.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>To</b></td>
<td class=label width=66%><b>See</b></td>
</tr>
<tr valign=top>
<td width=34%>Go to the next step</td>
<td width=66%><a href="vbconcreatingtestingoledllexecutable.htm">Compiling and Testing the ThingDemo DLL</a></td>
</tr>
<tr valign=top>
<td width=34%>Start from the beginning</td>
<td width=66%><a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</td>
</tr>
</table><br>
</BODY>
</HTML>

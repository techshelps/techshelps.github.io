<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Class Modules</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondebuggingclassmodules"></a>Debugging Class Modules</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDebuggingClassModulesC">
</object></p>
<p>
Debugging class modules differs slightly from debugging ordinary programs. This is because an error in a property or method of a class module always acts like a handled error. (That is, there's always a procedure on the call stack that can handle the error — namely the procedure that called the class module's property or method.)</p>
<p>
Visual Basic compensates for this difference by providing the error-trapping option Break in Class Module, in addition to the older options Break on Unhandled Errors and Break on All Errors.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can set the Default Error Trapping State on the General tab of the Options dialog box, available from the Tools menu. The option you select affects the current session, and becomes the default for all subsequent instances of Visual Basic. To change the setting only for the current session, without affecting the default, select Toggle from the Code window context menu (which is available by right-clicking on the Code window).</p>
<p>
For example, suppose the class module Class1 contains the following code:</p>
<pre><code>Public Sub Oops()
   Dim intOops As Integer
   intOops = intOops / 0
End Sub
</code></pre>
<p>
Now suppose a procedure in another class module, form, or standard module calls the member Oops:</p>
<pre><code>Private Sub Command1_Click()
   Dim c1 As New Class1
   c1.Oops
End Sub
</code></pre>
<p>
If the error trapping option is set to Break on Unhandled Errors, execution will not stop on the zero divide. Instead, the error will be raised in the calling procedure, Command1_Click. Execution will stop on the call to the Oops method.</p>
<p>
You could use Break on All Errors to stop in the zero divide, but Break on All Errors is a very inconvenient option for most purposes. It stops on every error, even errors for which you've written error handling code.</p>
<p>
Break in Class Module is a compromise setting:
<ul type=disc>
<li>
Execution will not stop on class module code for which you've written an error handler.<br><br></li>
<li>
Execution only stops on an error that's unhandled in the class module, and therefore would be returned to the caller of the method.<br><br></li>
<li>
When the Visual Basic development environment is started, it defaults to Break in Class Module.<br><br></li>
<li>
If there are no class modules involved, Break in Class Module is exactly the same as Break on Unhandled Errors.</li>
</ul>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;When you hit a break point using Break in Class Module or Break on All Errors, you can step or run past the error — into your error handling code or into the code that called procedure in which the error occurred — by pressing ALT+F8 or ALT+F5.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Debugging is discussed in detail in "Debugging Your Code and Handling Errors."</p>
</BODY>
</HTML>

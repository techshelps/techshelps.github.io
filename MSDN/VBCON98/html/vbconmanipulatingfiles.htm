<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Files</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmanipulatingfiles"></a>Working With Files</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconManipulatingFilesC">
</object></p>
<p>
You can work with files in Visual Basic by using the new object-oriented FSO objects such as Copy, Delete, Move, and OpenAsTextStream, among others, or by using the older existing functions such as Open, Close, FileCopy, GetAttr, and so forth. Note that you can move, copy, or delete files regardless of their file type.</p>
<p>
For more information on usage of the older existing functions, see "Processing Files with Older File I/O Statements and Functions" in this chapter. The rest of this section describes using the new FSO objects, methods, and properties to work with files.</p>
<p>
There are two major categories of file manipulation:
<ul type=disc>
<li>
Creating, adding, or removing data, and reading files<br><br></li>
<li>
Moving, copying, and deleting files</li>
</ul>
<h2>Creating Files and Adding Data with File System Objects</h2>
<p>
There are three ways to create a sequential text file (sometimes referred to as a "text stream"). One way is to use the CreateTextFile method. To create an empty text file:</p>
<pre><code>Dim fso As New FileSystemObject, fil As File
Set fil = fso.CreateTextFile("c:\testfile.txt", True)
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The FSO object model does not yet support the creation of random or binary files. To create random and binary files, use the Open command with either the Random or Binary flag. Full information on how to manipulate random and binary files is contained in "Using Random File Access" and "Using Binary File Access" in this chapter.</p>
<p>
Another way is to use either the OpenTextFile method of the FileSystemObject object with the ForWriting flag set:</p>
<pre><code>Dim fso As New FileSystemObject, ts As New TextStream
Set ts = fso.OpenTextFile("c:\test.txt", ForWriting)
</code></pre>
<p>
Or you can use the OpenAsTextStream method with the ForWriting flag set:</p>
<pre><code>Dim fso As New FileSystemObject, fil As File, ts As TextStream
Set fso = CreateObject("Scripting.FileSystemObject")
fso.CreateTextFile ("test1.txt")
Set fil = fso.GetFile("test1.txt")
Set ts = fil.OpenAsTextStream(ForWriting)
</code></pre>
<h3>Adding Data to the File</h3>
<p>
Once the text file is created, you can add data to it in three steps:
<ol>
<li>
Open the text file for the writing of data.<br><br></li>
<li>
Write the data.<br><br></li>
<li>
Close the file.</li>
</ol>
<p>
To open the file, you can use either of two methods: the OpenAsTextStream method of the File object, or the OpenTextFile method of the FileSystemObject object.</p>
<p>
To write data to the open text file, use either the Write or WriteLine methods of the TextStream object. The only difference between Write and WriteLine is that WriteLine adds newline characters to the end of the specified string.</p>
<p>
If you want to add a newline to the text file, use the WriteBlankLines method.</p>
<p>
To close an open file, use the Close method of the TextStream object.</p>
<p>
Here's an example of how to open a file, use all three write methods to add data to the file, then close the file:</p>
<pre><code>Sub Create_File()
 &nbsp;&nbsp; Dim fso, txtfile
 &nbsp;&nbsp; Set fso = CreateObject("Scripting.FileSystemObject")
 &nbsp;&nbsp; Set txtfile = fso.CreateTextFile("c:\testfile.txt", True)
 &nbsp;&nbsp; txtfile.Write ("This is a test. ") ' Write a line.
 &nbsp;&nbsp; ' Write a line with a newline character.
 &nbsp;&nbsp; txtfile.WriteLine("Testing 1, 2, 3.") 
 &nbsp;&nbsp; ' Write three newline characters to the file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; txtfile.WriteBlankLines(3) 
 &nbsp;&nbsp; txtfile.Close
End Sub
</code></pre>
<h2>Reading Files with File System Objects</h2>
<p>
To read data from a text file, use the Read, ReadLine, or ReadAll methods of the TextStream object:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Task</b></td>
<td class=label width=50%><b>Method</b></td>
</tr>
<tr valign=top>
<td width=50%>Read a specified number of characters from a file</td>
<td width=50%>Read</td>
</tr>
<tr valign=top>
<td width=50%>Read an entire line (up to, but not including, the newline character)</td>
<td width=50%>ReadLine</td>
</tr>
<tr valign=top>
<td width=50%>Read the entire contents of a text file</td>
<td width=50%>ReadAll </td>
</tr>
</table><br>
<p>
If you use the Read or ReadLine method and you want to skip to a particular portion of data, you can use the Skip or SkipLine method.</p>
<p>
The resulting text of the read methods is stored in a string which can be displayed in a control, parsed by string operators (such as Left, Right, and Mid), concatenated, and so forth.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The vbNewLine constant contains a character or characters (depending on the operating system) to advance the cursor to the beginning of the next line (carriage-return/linefeed). Be aware that the ends of some strings may have such nonprinting characters.</p>
<h3>Example</h3>
<pre><code>Sub Read_Files()
 &nbsp;&nbsp; Dim fso As New FileSystemObject, txtfile, _
 &nbsp;&nbsp;&nbsp;&nbsp; fil1 As File, ts As TextStream
 &nbsp;&nbsp; Set txtfile = fso.CreateTextFile("c:\testfile.txt", True)
 &nbsp;&nbsp; MsgBox "Writing file"
 &nbsp;&nbsp; ' Write a line.
 &nbsp;&nbsp; Set fil1 = fso.GetFile("c:\testfile.txt")
 &nbsp;&nbsp; Set ts = fil1.OpenAsTextStream(ForWriting)
 &nbsp;&nbsp; ts.Write "Hello World"
 &nbsp;&nbsp; ts.Close
 &nbsp;&nbsp; ' Read the contents of the file.
 &nbsp;&nbsp; Set ts = fil1.OpenAsTextStream(ForReading)
 &nbsp;&nbsp; s = ts.ReadLine
 &nbsp;&nbsp; MsgBox s
 &nbsp;&nbsp; ts.Close
End Sub</code></pre>
<h2>Moving, Copying, and Deleting Files</h2>
<p>
The FSO object model has two methods each for moving, copying, and deleting files:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>Task</b></td>
<td class=label width=63%><b>Method</b></td>
</tr>
<tr valign=top>
<td width=37%>Move a file</td>
<td width=63%>File.Move or<br>
FileSystemObject.MoveFile</td>
</tr>
<tr valign=top>
<td width=37%>Copy a file</td>
<td width=63%>File.Copy or<br>
FileSystemObject.CopyFile</td>
</tr>
<tr valign=top>
<td width=37%>Delete a file</td>
<td width=63%>File.Delete or<br>
FileSystemObject.DeleteFile</td>
</tr>
</table><br>
<h3>Example</h3>
<p>
This example creates a text file in the root directory of drive C, writes some information to it, moves it to a directory called \tmp, makes a copy of it in a directory called \temp, then deletes the copies from both directories.</p>
<p>
To run this example, make sure that you have directories named \tmp and \temp in the root directory of drive C.</p>
<pre><code>Sub Manip_Files()
 &nbsp;&nbsp; Dim fso as New FileSystemObject, txtfile, fil1, fil2
 &nbsp;&nbsp; Set txtfile = fso.CreateTextFile("c:\testfile.txt", True)
 &nbsp;&nbsp; MsgBox "Writing file"
 &nbsp;&nbsp; ' Write a line.
 &nbsp;&nbsp; txtfile.Write ("This is a test.")
 &nbsp;&nbsp; ' Close the file to writing.
 &nbsp;&nbsp; txtfile.Close
 &nbsp;&nbsp; MsgBox "Moving file to c:\tmp"
 &nbsp;&nbsp; ' Get a handle to the file in root of C:\.
 &nbsp;&nbsp; Set fil1 = fso.GetFile("c:\testfile.txt")
 &nbsp;&nbsp; ' Move the file to \tmp directory.
 &nbsp;&nbsp; fil1.Move ("c:\tmp\testfile.txt")
 &nbsp;&nbsp; MsgBox "Copying file to c:\temp"
 &nbsp;&nbsp; ' Copy the file to \temp.
 &nbsp;&nbsp; fil1.Copy ("c:\temp\testfile.txt")
 &nbsp;&nbsp; MsgBox "Deleting files"
 &nbsp;&nbsp; ' Get handles to files' current location.
 &nbsp;&nbsp; Set fil1 = fso.GetFile("c:\tmp\testfile.txt")
 &nbsp;&nbsp; Set fil2 = fso.GetFile("c:\temp\testfile.txt")
 &nbsp;&nbsp; ' Delete the files.
 &nbsp;&nbsp; fil1.Delete
 &nbsp;&nbsp; fil2.Delete
 &nbsp;&nbsp; MsgBox "All done!"
End Sub</code></pre>
</BODY>
</HTML>

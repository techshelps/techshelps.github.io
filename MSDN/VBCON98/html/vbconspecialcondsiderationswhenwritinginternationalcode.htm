<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Special Condsiderations When Writing International Code</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconspecialcondsiderationswhenwritinginternationalcode"></a>Writing International Code in Visual Basic</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconSpecialCondsiderationsWhenWritingInternationalCodeC">
</object></p>
<p>
Preparing a product for use in other locales implies more than just translating text messages. The product must support national conventions and provide country-specific support for numbers. In order to know how to work with different dates, currencies, and numeric values and separators, you have to understand the distinction Visual Basic makes between system locale and code locale.</p>
<h3>System Locale vs. Code Locale</h3>
<p>
The <i>system locale</i> is the locale of the user who runs your program — it is used as a reference for user input and output and uses Control Panel settings provided by the operating system. The <i>code locale</i> is always English/U.S. in Visual Basic, regardless of which international version you use. Code locale determines the programming language and all the locale-specific settings.</p>
<h3>Date</h3>
<p>
In Visual Basic, never type dates as strings in your code. Entering dates in code in the format #month/day/year# ensures that the date will be interpreted correctly in any system locale. Because Visual Basic allows only English/U.S. as a programming locale, the date will be the same to a user wherever your application is run.</p>
<p>
For example, if a user enters 8/2/97 in an input dialog box,</p>
<pre><code>CDate ("8/2/97")
</code></pre>
<p>
returns the following results, based on the system locale:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Operating system</b></td>
<td class=label width=69%><b>Output</b></td>
</tr>
<tr valign=top>
<td width=31%>French/France</td>
<td width=69%><code>08/02/97</code>&nbsp;&nbsp;(= February 8, 1997)</td>
</tr>
<tr valign=top>
<td width=31%>English/U.S.</td>
<td width=69%><code>8/2/97</code>&nbsp;&nbsp;(= August 2, 1997)</td>
</tr>
</table><br>
<p>
Conversely, if you enter 8/2/97 in code,</p>
<pre><code>CDate (#8/2/97#)
</code></pre>
<p>
returns the results in the following table, based on the code locale:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Operating system</b></td>
<td class=label width=69%><b>Output</b></td>
</tr>
<tr valign=top>
<td width=31%>French/France</td>
<td width=69%><code>02/08/97&nbsp;&nbsp;</code>(= August 2, 1997)</td>
</tr>
<tr valign=top>
<td width=31%>English/U.S.</td>
<td width=69%><code>8/2/97&nbsp;&nbsp;</code>(= August 2, 1997)</td>
</tr>
</table><br>
<p>
If the user is in France and enters 8/2/97, the application will interpret this date as February 8, 1997, because the date format in France is day/month/year. If a user in the United States enters the same string, the application will understand August 2, 1997, because the date format is month/day/year.</p>
<h3>Currency</h3>
<p>
Avoid typing currencies as strings in your code. For example, the following code does not run in any locale except those where the dollar sign ($) is the currency symbol.</p>
<pre><code>Money = "$1.22"
NewMoney = CCur(Money)
</code></pre>
<p>
If you run this code example in the French/France locale, where "F" is the currency symbol, Visual Basic will generate a "Type mismatch" error message, because $ is not recognized as a currency symbol in that locale. Instead, simply use numbers, as shown in the following example. Use a period as a decimal separator, because the code locale for Visual Basic is always English/U.S. The following code will run correctly, regardless of the user's locale.</p>
<pre><code>Money = 1.22
NewMoney = CCur(Money)
</code></pre>
<h3>Numeric Values and Separators</h3>
<p>
In the United States, the period (.) is used as the decimal separator. In several European countries, however, the comma (,) is used as the decimal separator. Similarly, in the United States, a comma is used as the thousands separator to isolate groups of three digits to the left of the decimal separator. In several European countries, a period or a space is used for this purpose. The following table lists some examples of different number formats:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Countries</b></td>
<td class=label width=74%><b>Number formats</b></td>
</tr>
<tr valign=top>
<td width=26%>U.S.</td>
<td width=74%>1,234,567.89<br>
1,234.56<br>
.123</td>
</tr>
<tr valign=top>
<td width=26%>France</td>
<td width=74%>1 234 567,89<br>
1 234,56<br>
0,123</td>
</tr>
<tr valign=top>
<td width=26%>Italy</td>
<td width=74%>1.234.567,89<br>
1.234,56<br>
0,123</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In Visual Basic, the Str and Val functions always assume a period is the decimal separator. In a majority of locales, this assumption is not valid. Instead, use the CStr, CDbl, CSng, CInt, and CLng functions to provide international conversions from any other data type to the data type you need. These functions use the system locale to determine the decimal separator.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Locale-Aware Functions" later in this chapter for more information about the Print and Format functions. See "CStr Function," "CDbl Function," "CSng Function," "CInt Function," "CLng Function," "CDate Function," and "CCur Function" in the <i>Language Reference</i>. See also "Variables, Constants, and Data Types."</p>
</BODY>
</HTML>

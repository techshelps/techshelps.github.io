<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Testing Error Handling by Generating Errors</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontestingerrorhandlingbygeneratingerrors"></a>Testing Error Handling by Generating Errors</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTestingErrorHandlingByGeneratingErrorsC">
</object></p>
<p>
Simulating errors is useful when you are testing your applications, or when you want to treat a particular condition as being equivalent to a Visual Basic run-time error. For example, you might be writing a module that uses an object defined in an external application, and want errors returned from the object to be handled as actual Visual Basic errors by the rest of your application.</p>
<p>
In order to test for all possible errors, you may need to generate some of the errors in your code. You can generate an error in your code with the Raise method:</p>
<p>
<i>object</i><b>.Raise </b><i>argumentlist</i></p>
<p>
The <i>object</i> argument is usually Err, Visual Basic's globally defined error object. The <i>argumentlist</i> argument is a list of named arguments that can be passed with the method. The VerifyFile procedure in the Errors.vbp sample application uses the following code to regenerate the current error in an error handler:</p>
<pre><code>Err.Raise Number:=intErrNum
</code></pre>
<p>
In this case, <code>intErrNum</code> is a variable that contains the error number which triggered the error handler. When the code reaches a Resume statement, the Clear method of the Err object is invoked. It is necessary to regenerate the error in order to pass it back to the previous procedure on the call stack.</p>
<p>
You can also simulate any Visual Basic run-time error by supplying the error code for that error:</p>
<pre><code>Err.Raise Number:=71   ' Simulate "Disk Not Ready"
                     ' error.
</code></pre>
<h2>Defining Your Own Errors</h2>
<p>
Sometimes you may want to define errors in addition to those defined by Visual Basic. For example, an application that relies on a modem connection might generate an error when the carrier signal is dropped. If you want to generate and trap your own errors, you can add your error numbers to the vbObjectError constant.</p>
<p>
The vbObjectError constant reserves the numbers ranging from its own offset to its offset + 512. Using a number higher than this will ensure that your error numbers will not conflict with future versions of Visual Basic or other Microsoft Basic products. ActiveX controls may also define their own error numbers. To avoid conflicts with them, consult the documentation for controls you use in your application.</p>
<p>
To define your own error numbers, you add constants to the Declarations section of your module:</p>
<pre><code>' Error constants
Const gLostCarrier = 1 + vbObjectError + 512
Const gNoDialTone = 2 + vbObjectError + 512
</code></pre>
<p>
You can then use the Raise method as you would with any of the intrinsic errors. In this case, the description property of the Err object will return a standard description — "Application-defined or object defined error." To provide your own error description, you will need to add it as a parameter to the Raise method.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To learn more about generating your own error, see "Raise Method."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling Run-Time Errors</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconhandlingruntimeerrors"></a>Handling Run-Time Errors in ActiveX Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconHandlingRunTimeErrorsC">
</object></p>
<p>
Error-handling code is especially important when you're working with ActiveX components, because code from the component is used from within your Visual Basic application. Where possible, you should include code to handle errors that the component may generate. For example, it is good practice to check for the error that occurs if a user unexpectedly closes a component application:</p>
<pre><code>Function StartWord()
' Starts Microsoft Word.
On Error Goto ErrorTrap

   ' Declare a Microsoft Word Application variable
   ' and an integer variable for error trap.
   Dim wdApp As Word.Application
   Dim iTries As Integer

   ' Assign an object reference.
   Set wdApp = New Word.Application

   ' Release object variable.
   Set wdApp = Nothing

   Exit Function

ErrorTrap:
   ' Trap for the error that occurs if Microsoft Word
   ' can't be started.
   Select Case Err.Number
      Case 440               ' Automation error.
         iTries = iTries + 1
         ' Make up to 5 attempts to restart Word.
         If iTries &lt; 5 Then
            Set wdApp = New Word.Application
            Resume
         Else
            Err.Raise Number:=VBObjectError + 28765, _
            Description:= "Couldn't restart Word"
         End If
      Case Else
         Err.Raise Number:= Err.Number
   End Select
End Function
</code></pre>
<p>
If any error other than error 440 occurs in the preceding example, the procedure displays the error and raises an error. The application that provides the object might pass back its own error. In some cases, an application might use the same error code that Visual Basic uses for a different error. In these cases, you should use On Error Resume Next and check for errors immediately after each line that might cause an error. This type of error checking is called <i>inline error-handling.</i></p>
<h2>Testing for Object References</h2>
<p>
Before using an object variable in your code, you may want to make sure the variable holds a valid object reference. You can determine whether or not an object reference has been assigned to the variable by using Is Nothing. For example, the following code checks whether or not an object reference has been assigned to the variable <code>wdDoc</code>:</p>
<pre><code>If wdDoc Is Nothing Then MsgBox "No object reference."
</code></pre>
<p>
However, Is Nothing won't detect whether or not a valid object reference has become unavailable. For example, if you assign a Microsoft Word object reference to an object variable and Microsoft Word becomes unavailable, the variable will still hold a valid object reference. In this situation, use your error handler to trap the error that results when your code tries to use the variable.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information about the errors that a particular application might pass back, see that application's documentation. For more information about trapping errors, see "Debugging Your Code and Handling Errors."</p>
</BODY>
</HTML>

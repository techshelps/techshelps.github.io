<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Organizing Objects: The Object Model</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconorganizingobjectstheobjectmodel"></a>Organizing Objects: The Object Model</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconOrganizingObjectsTheObjectModelC">
</object></p>
<p>
An <i>object model</i> defines a hierarchy of objects that gives structure to an object-based program. By defining the relationships between objects that are part of the program, an object model organizes the objects in a way that makes programming easier.</p>
<p>
The public object model of a component is especially important because it’s used by all the programmers who employ the component as part of their applications.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Users of C++ or other object-oriented programming languages are used to seeing <i>class hierarchies.</i> A class hierarchy describes <i>inheritance.</i> That is, it shows how objects are derived from simpler objects, inheriting their behavior. By contrast, object models are hierarchies that describe <i>containment.</i> That is, they show how complex objects like Worksheets contain collections of other objects, such as Button, Picture, and PivotTable<sup>®</sup> objects. Object models can be created with Visual Basic, Visual C++, and other tools that support COM and ActiveX.</p>
<p>
"Programming with Objects," in the <i>Visual Basic Programmer’s Guide,</i> includes an introduction to object models and a discussion of design considerations for collection classes. The following topics on object models for components assume familiarity with that material.
<ul type=disc>
<li>
<a href="vbcondoineedobjectmodel.htm">Do I Need an Object Model?</a>&nbsp;&nbsp;&nbsp;Many components provide one or more unrelated or loosely related objects that clients can create and use.<br><br></li>
<li>
<a href="vbconexternallycreateableobjects.htm">Externally Creatable Objects</a>&nbsp;&nbsp;&nbsp;Discusses the objects you allow clients to create for themselves, using the New operator or the CreateObject function.<br><br></li>
<li>
<a href="vbcondependentobjects.htm">Dependent Objects</a>&nbsp;&nbsp;&nbsp;Discusses objects clients cannot create, but can use once the component has created them.<br><br></li>
<li>
<a href="vbconcombiningexternallycreateabledependentobjects.htm">Combining Externally Creatable and Dependent Objects</a>&nbsp;&nbsp;&nbsp;How the relationship between the two kinds of objects shapes the object model.<br><br></li>
<li>
<a href="vbconusingpropertiescollectionstocreateobjectmodels.htm">Using Properties and Collections to Create Object Models</a>&nbsp;&nbsp;&nbsp;Mechanics of fitting objects together into an object model, using properties and collections as glue.<br><br></li>
<li>
<a href="vbcondealingwithcircularreferences.htm">Dealing with Circular References</a>&nbsp;&nbsp;&nbsp;Linking objects together into an object model means that they keep references to each other. This has interesting consequences.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Further information on object models can be found in "ActiveX Component Standards and Guidelines."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>When Should I Use Version Compatibility?</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconeverythingyouneedtoknowaboutversioncompatibility"></a>When Should I Use Version Compatibility?</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconEverythingYouNeedToKnowAboutVersionCompatibilityC">
</object></p>
<p>
Visual Basic provides two mechanisms for maintaining backward compatibility while enhancing software components — the Version Compatibility feature and the Implements feature.</p>
<h2>Version Compatibility</h2>
<p>
Visual Basic’s Version Compatibility feature is a way of enhancing your components while maintaining backward compatibility with programs that were compiled using earlier versions. The Version Compatibility box, located on the Component tab of the Project Properties dialog box, contains three options:
<ul type=disc>
<li>
No Compatibility: Each time you compile the component, new type library information is generated, including new class IDs and new interface IDs. There is no relation between versions of a component, and programs compiled to use one version cannot use subsequent versions.<br><br></li>
<li>
Project Compatibility: Each time you compile the component the type library identifier is kept, so that your test projects can maintain their references to the component project. All class IDs from the previous version are maintained; interface IDs are changed only for classes that are no longer binary-compatible with their earlier counterparts. <p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This is a change in Project Compatibility from Visual Basic 5.0, where all class IDs and interface IDs in the project changed if any one class was no longer binary-compatible.</p><p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;For the purpose of releasing compatible versions of a component, Project Compatibility is the same as No Compatibility.</p></li>
<li>
Binary Compatibility: When you compile the project, if any binary-incompatible changes are detected you will be presented with a warning dialog. If you choose to accept the warning, the component will retain the type library identifier and the class IDs. Interface IDs are changed only for classes that are no longer binary-compatible. This is the same behavior as Project Compatibility.<p class=tl>
If, however, you choose to ignore the warning, the component will also maintain the interface IDs. This option is only available when the compiler determines that the change was in the procedure ID or signature of a method.</P><p class=atl>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;You should only choose the Ignore button if you are absolutely sure that the changes you have made won't break compatibility. If you aren't absolutely sure, take the safe alternative and choose the Accept button to allow the interface ID's to be changed.</p><p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;The option to override the compiler's warning represents a change in behavior from Visual Basic 5.0. It is important that you fully understand the implications of incompatible changes before proceeding with this option.</p><p class=atl>
</p><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When people talk about Version Compatibility, they’re usually referring to Binary Compatibility.</p></li>
</ul>
<p>
The appropriate use of these options is described below.</p>
<h2>Using the Implements Statement for Compatibility</h2>
<p>
The Implements statement allows you to add multiple interfaces to class modules, as described in "Polymorphism, Interfaces, Type Libraries, and GUIDs" and "Providing Polymorphism by Implementing Interfaces" in "General Principles of Component Design," and in "Polymorphism" in "Programming with Objects," in the <i>Visual Basic Programmer’s Guide.</i></p>
<p>
Multiple interfaces allow your systems to evolve over time, without breaking existing components or requiring massive re-compiles, because a released interface is never changed. Instead, new functionality is added to a system by creating new interfaces.</p>
<p>
This approach is much more in keeping with the design philosophy of the Component Object Model (COM), on which the ActiveX specification is based.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Binary Compatibility option of Version Compatibility is useful in conjunction with Implements and multiple interfaces, to prevent changes to the default interfaces of your classes.</p>
<h2>When to Use Version Compatibility Options</h2>
<p>
If you decide to use the Version Compatibility feature, you may find the following rules helpful in determining when to use the different options:</p>
<h3>Use No Compatibility to Make a Clean Break</h3>
<p>
When you begin working on a new version of an existing component, you may decide that the only way to make necessary enhancements is to break backward compatibility. In this case, set No Compatibility the first time you compile your project. This guarantees that you’ll start with a clean slate of identifiers, and that existing programs won’t mistakenly try to use the incompatible version.</p>
<p>
Before compiling an existing project with No Compatibility, you must also:
<ul type=disc>
<li>
Change the file name of your component, so that the incompatible version won’t over-write earlier versions on your users’ hard disks.<br><br></li>
<li>
Change the Project Name on the General tab of the Project Properties dialog box, so that the incompatible component will have a different type library name. This ensures that the objects the component provides will have unique programmatic IDs.</li>
</ul>
<p>
These items are discussed in more detail in "Levels of Binary Version Compatibility."</p>
<p>
After compiling once with No Compatibility, switch to Project Compatibility to simplify your development tasks.</p>
<h3>Use Project Compatibility for New Development</h3>
<p>
Use the Project Compatibility setting when you’re developing the first version of a component. Project Compatibility preserves the type library identifier, so that you’re not continually setting references from your test projects to your component projects.</p>
<p>
Using Project Compatibility also makes it easier to switch between the component project and the compiled component when you’re testing.</p>
<p>
Project Compatibility is discussed in "Project Compatibility: Avoiding MISSING References."</p>
<h3>Use Binary Compatibility for New Versions of Existing Components</h3>
<p>
Switch to Binary Compatibility mode when you begin work on the second version of any component, if you want applications compiled using the earlier version to continue to work using the new version.</p>
<p>
Switching to Binary Compatibility is discussed in the related topic "Providing a Reference Point for Compatibility."</p>
<h3>Don’t Mix Binary Compatibility and Multiple Interfaces</h3>
<p>
If you use multiple interfaces and the Implements statement to provide backward compatibility, don’t use Binary Compatibility to modify the abstract interfaces you’ve defined for use with Implements.</p>
<p>
If you enhance any of the interfaces in a component, Visual Basic will change their interface IDs. The technique of evolving component software by adding interfaces depends on <i>interface invariance.</i> That is, an interface once defined is never changed — including the interface ID.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Providing Polymorphism by Implementing Interfaces" in "General Principles of Component Design" for information about component software design using multiple interfaces. "Maintaining Binary Compatibility" describes the versioning system Visual Basic uses to prevent compatibility problems.</p>
</BODY>
</HTML>

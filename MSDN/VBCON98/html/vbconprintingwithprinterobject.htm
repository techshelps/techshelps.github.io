<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Printing with the Printer Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconprintingwithprinterobject"></a>Printing with the Printer Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPrintingWithPrinterObjectC">
</object></p>
<p>
There are several ways to place text and graphics on the Printer object. To print with the Printer object, do any of the following:
<ul type=disc>
<li>
Assign the specific member of the Printers collection to the Printer object if you want to print to a printer other than the default printer.<br><br></li>
<li>
Put text and graphics on the Printer object.<br><br></li>
<li>
Print the contents of the Printer object with the NewPage or EndDoc method.</li>
</ul>
<h2>Printer Object Properties</h2>
<p>
The properties of the Printer object initially match those of the default printer set in the Windows Control Panel. At run time, you can set any of the Printer object properties, which include: PaperSize, Height, Width, Orientation, ColorMode, Duplex, TrackDefault, Zoom, DriverName, DeviceName, Port, Copies, PaperBin, and PrintQuality. For more details and syntax for these methods, see the <i>Language Reference</i>.</p>
<p>
If the TrackDefault property is True and you change the default printer in the Windows Control Panel, the Printer object property values will reflect the properties of the new default printer.</p>
<p>
You cannot change some properties in the middle of a page once a property has been set. Changes to these properties will only affect subsequent pages. The following statements show how you can print each page using a different print quality:</p>
<pre><code>For pageno = 1 To 4
   Printer.PrintQuality = -1 * pageno
   Printer.Print "The quality of this page is"; pageno
   Printer.NewPage
Next
</code></pre>
<p>
Print quality values can range from – 4 to – 1, or a positive integer corresponding to the print resolution in dots per inch (DPI). For example, the following code would set the printer’s resolution to 300 DPI:</p>
<pre><code>Printer.PrintQuality = 300
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information on the Printer object properties, see the appropriate property in the <i>Language Reference.</i></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The effect of Printer property values depends on the driver supplied by the printer manufacturer. Some property settings may have no effect, or several different property settings may all have the same effect. Settings outside the accepted range may or may not produce an error. For more information on specific drivers, see the manufacturer’s documentation.</p>
<h3>Scale Properties</h3>
<p>
The Printer object has these scale properties:
<ul type=disc>
<li>
ScaleMode<br><br></li>
<li>
ScaleLeft and ScaleTop<br><br></li>
<li>
ScaleWidth and ScaleHeight<br><br></li>
<li>
Zoom</li>
</ul>
<p>
The ScaleLeft and ScaleTop properties define the x- and y-coordinates, respectively, of the upper-left corner of a printable page. By changing the values of ScaleLeft and ScaleTop, you can create left and top margins on the printed page. For example, you can use ScaleLeft and ScaleTop to center a printed form (PFrm) on the page using these statements:</p>
<pre><code>Printer.ScaleLeft = -((Printer.Width - PFrm.Width) / 2)
Printer.ScaleTop = -((Printer.Height - PFrm.Height) _
   / 2)
</code></pre>
<p>
Many printers support the Zoom property. This property defines the percentage by which output is scaled. The default value of the Zoom property is 100, indicating that output will be printed at 100 percent of its size (actual size). You can use the Zoom property to make the page you print smaller or larger than the actual paper page. For example, setting Zoom to 50 makes your printed page appear half as wide and half as long as the paper page. The following syntax sets the Zoom property to half the size of the default Printer object:</p>
<pre><code>Printer.Zoom = 50
</code></pre>
<h3>Positioning Text and Graphics</h3>
<p>
You can set CurrentX and CurrentY properties for the Printer object, just as you can for forms and picture boxes. With the Printer object, these properties determine where to position output on the current page. The following statements set drawing coordinates to the upper-left corner of the current page:</p>
<pre><code>Printer.CurrentX = 0
Printer.CurrentY = 0
</code></pre>
<p>
You can also use the TextHeight and TextWidth methods to position text on the Printer object. For more information on using these text methods, see "Displaying Print Output at a Specific Location" earlier in this chapter.</p>
<h2>Printing Forms on the Printer Object</h2>
<p>
You may want your application to print one or more forms along with information on those forms, especially if the design of the form corresponds to a printed document like an invoice or a time card. For the easiest way to do this, use the PrintForm method. For the best quality on a laser printer use the Print and graphics methods with the Printer object. Keep in mind that using the Printer object takes more planning, because you must recreate the form on the Printer object before you print.</p>
<p>
Recreating a form on the Printer object may also require recreating:
<ul type=disc>
<li>
The outline of the form, including title and menu bars.<br><br></li>
<li>
The controls and their contents, including text and graphics.<br><br></li>
<li>
The output of graphics methods applied directly to the form, including the Print method.</li>
</ul>
<p>
The extent to which you recreate these elements on the Printer object depends on your application and how much of the form you need to print.</p>
<h3>Recreating Text and Graphics on a Form</h3>
<p>
When creating text and graphics on a form using the Print, Line, Circle, PaintPicture, or PSet methods, you may also want a copy of this output to appear on the Printer object. The easiest way to accomplish this is to write a device-independent procedure to recreate the text and graphics.</p>
<p>
For example, the following procedure uses the PaintPicture method to print a form or control’s Picture property to any output object, such as a printer or another form:</p>
<pre><code>Sub PrintAnywhere (Src As Object, Dest As Object)
   Dest.PaintPicture Src.Picture, Dest.Width / 2, _
      Dest.Height / 2
   If Dest Is Printer Then 
      Printer.EndDoc
   End If
End Sub
</code></pre>
<p>
You then call this procedure and pass it the source and destination objects:</p>
<pre><code>PrintAnywhere MyForm, Printer
PrintAnywhere MyForm, YourForm
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information, see "Print Method," "Line Method," "Circle Method," "Pset Method," or "PaintPicture Method" in the <i>Language Reference</i>.</p>
<h3>Printing Controls on a Form</h3>
<p>
The Printer object can receive the output of the Print method and the graphics methods (such as the Line or PSet method). But you cannot place controls directly on the Printer object. If your application needs to print controls, you must either write procedures that redraw each type of control you use on the Printer object, or use the PrintForm method.</p>
<h2>Printing the Contents of the Printer Object</h2>
<p>
Once you have placed text and graphics on the Printer object, use the EndDoc method to print the contents. The EndDoc method advances the page and sends all pending output to the spooler. A <i>spooler</i> intercepts a print job on its way to the printer and sends it to disk or memory, where the print job is held until the printer is ready for it. For example:</p>
<pre><code>Printer.Print "This is the first line of text in _
   a pair."
Printer.Print "This is the second line of text in _
   a pair."
Printer.EndDoc
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Visual Basic automatically calls EndDoc if your application ends without explicitly calling it.</p>
<h3>Creating Multiple-Page Documents</h3>
<p>
When printing longer documents, you can specify in code where you want a new page to begin by using the NewPage method. For example:</p>
<pre><code>Printer.Print "This is page 1."
Printer.NewPage
Printer.Print "This is page 2."
Printer.EndDoc
</code></pre>
<h3>Canceling a Print Job</h3>
<p>
You can terminate the current print job by using the KillDoc method. For example, you can query the user with a dialog box to determine whether to print or terminate a document:</p>
<pre><code>Sub PrintOrNot()
   Printer.Print "This is the first line to _
      illustrate KillDoc method"
   Printer.Print "This is the second line to _
      illustrate KillDoc method"
   Printer.Print "This is the third line to _
      illustrate KillDoc method"
   If vbNo = MsgBox("Print this fine document?", _
         vbYesNo) Then
      Printer.KillDoc
   Else
      Printer.EndDoc
   End If
End Sub
</code></pre>
<p>
If the operating system’s Print Manager is handling the print job, the KillDoc method deletes the entire job you sent to the printer. However, if the Print Manager is not controlling the print job, page one may have already been sent to the printer, and will be unaffected by KillDoc. The amount of data sent to the printer varies slightly among printer drivers.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You cannot use the KillDoc method to terminate a print job that was initiated with the PrintForm method.</p>
</BODY>
</HTML>

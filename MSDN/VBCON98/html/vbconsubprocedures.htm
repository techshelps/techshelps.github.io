<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sub Procedures</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconsubprocedures"></a>Sub Procedures</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconSubProceduresC">
</object></p>
<p>
A Sub procedure is a block of code that is executed in response to an event. By breaking the code in a module into Sub procedures, it becomes much easier to find or modify the code in your application.</p>
<p>
The syntax for a Sub procedure is:</p>
<p>
<b>[Private|Public][Static]Sub</b> <i>procedurename</i> (<i>arguments</i>)<br>
<i>statements</i></p>
<p>
<b>End Sub</b></p>
<p>
Each time the procedure is called, the <i>statements</i> between Sub and End Sub are executed. Sub procedures can be placed in standard modules, class modules, and form modules. Sub procedures are by default Public in all modules, which means they can be called from anywhere in the application.</p>
<p>
The <i>arguments</i> for a procedure are like a variable declaration, declaring values that are passed in from the calling procedure.</p>
<p>
In Visual Basic, it's useful to distinguish between two types of Sub procedures, <i>general procedures</i> and <i>event procedures</i>.</p>
<h2>General Procedures</h2>
<p>
A general procedure tells the application how to perform a specific task. Once a general procedure is defined, it must be specifically invoked by the application. By contrast, an event procedure remains idle until called upon to respond to events caused by the user or triggered by the system.</p>
<p>
Why create general procedures? One reason is that several different event procedures might need the same actions performed. A good programming strategy is to put common statements in a separate procedure (a general procedure) and have your event procedures call it. This eliminates the need to duplicate code and also makes the application easier to maintain. For example, the VCR sample application uses a general procedure called by the click events for several different scroll buttons. Figure 5.7 illustrates the use of a general procedure. Code in the Click events calls the ButtonManager Sub procedure, which runs its own code, and then returns control to the Click event procedure.</p>
<p class=label>
<b>Figure 5.7&nbsp;&nbsp;&nbsp;How general procedures are called by event procedures</b></p>
<p>
<img src="avp05017.gif" border=0></p>
<h2>Event Procedures</h2>
<p>
When an object in Visual Basic recognizes that an event has occurred, it automatically invokes the event procedure using the name corresponding to the event. Because the name establishes an association between the object and the code, event procedures are said to be attached to forms and controls. 
<ul type=disc>
<li>
An event procedure for a control combines the control's actual name (specified in the Name property), an underscore (_), and the event name. For instance, if you want a command button named cmdPlay to invoke an event procedure when it is clicked, use the procedure cmdPlay_Click.<br><br></li>
<li>
An event procedure for a form combines the word "Form," an underscore, and the event name. If you want a form to invoke an event procedure when it is clicked, use the procedure Form_Click. (Like controls, forms do have unique names, but they are not used in the names of event procedures.) If you are using the MDI form, the event procedure combines the word "MDIForm," an underscore, and the event name, as in MDIForm_Load.</li>
</ul>
<p>
All event procedures use the same general syntax.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Syntax for a control event</b></td>
<td class=label width=52%><b>Syntax for a form event</b></td>
</tr>
<tr valign=top>
<td width=48%>Private Sub <i>controlname_eventname</i> (<i>arguments</i> )<br>
 &nbsp; <i>statements</i><p>
End Sub</p>
</td>
<td width=52%>Private Sub Form_<i>eventname</i> (<i>arguments</i>)<br>
 &nbsp; <i>statements</i><br>
End Sub</td>
</tr>
</table><br>
<p>
Although you can write event procedures from scratch, it's easier to use the code procedures provided by Visual Basic, which automatically include the correct procedure names. You can select a template in the Code Editor window by selecting an object from the Object box and then selecting a procedure from the Procedure box.</p>
<p>
It's also a good idea to set the Name property of your controls before you start writing event procedures for them. If you change the name of a control after attaching a procedure to it, you must also change the name of the procedure to match the new name of the control. Otherwise, Visual Basic won't be able to match the control to the procedure. When a procedure name does not match a control name, it becomes a general procedure. </p>
<p>
<B><b>For More Information&nbsp;&nbsp;&nbsp;</b></B>Visual Basic recognizes a variety of events for each kind of form and control. For explanations of all events, see the <i>Language Reference</i>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Methods to a Class</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmethods"></a>Adding Methods to a Class</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconMethodsC">
</object></p>
<p>
The methods of a class are just the public Sub or Function procedures you've declared. Since Sub and Function procedures are public by default, you don't even have to explicitly specify the Public keyword to create a method.</p>
<p>
For example, to create a Withdrawal method for the Account class, you could add this Public Function procedure to the class module:</p>
<pre><code>Public Function WithDrawal(ByVal Amount As Currency, _
ByVal TransactionCode As Byte) As Double
   ' (Code to perform the withdrawal and return the
   ' new balance, or to raise an Overdraft error.)
End Function
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Although you don't have to type the Public keyword, doing so is good programming practice, because it makes your intent clear to people maintaining your code later.</p>
<h4>Declaring Methods as Public Subs</h4>
<p>
Returning the new balance is optional, since you could easily call the Balance property of the Account object after calling the Withdrawal method. You could thus code Withdrawal as a Public Sub procedure.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you find yourself calling Balance almost every time you call Withdrawal, returning the new balance will be slightly more efficient. This is because, as noted in "Adding Properties to Class Modules," any property access, even reading a public variable, means a function call — an explicit or implicit Property Get.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;The following names cannot be used as property or method names, because they belong to the underlying IUnknown and IDispatch interfaces: QueryInterface, AddRef, Release, GetTypeInfoCount, GetTypeInfo, GetIDsOfNames, and Invoke. These names will cause a compilation error.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on Sub and Function procedures, see "Introduction to Procedures" in "Programming Fundamentals."</p>
<h3>Protecting Implementation Details</h3>
<p>
The public interface of a class is defined by the property and method declarations in the class module. As with data hiding, procedures you declare as Private are not part of the interface. This means that you can make changes to utility procedures that are used internally by a class module, without affecting code that uses the objects.</p>
<p>
Even more important, you can also change the code inside the public Sub or Function procedure that implements a method, without affecting code that uses the method. As long as you don't change the data types of the procedure's arguments, or the type of data returned by a Function procedure, the interface is unchanged.</p>
<p>
Hiding the details of an object's implementation behind the interface is another facet of encapsulation. Encapsulation allows you to enhance the performance of methods, or completely change the way a method is implemented, without having to change code that uses the method.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The guidelines for naming interface elements — discussed in "Naming Properties, Methods, and Events" — apply not only to property and method names, but to the names of parameters in the Sub and Function procedures that define your methods. These parameter names are visible when you view the methods in the Object Browser, and can be used as named parameters (that is, <i>parametername:=value</i>) when the methods are invoked.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Named arguments are introduced in "Passing Arguments to Procedures" in "Programming Fundamentals."</p>
<p>
Adding methods to form classes is a powerful programming technique, discussed in "Customizing Form Classes."</p>
<p>
Sometimes it's not clear whether a member should be a property or a method. "Is It a Property or a Method?" offers some guidelines.</p>
</BODY>
</HTML>

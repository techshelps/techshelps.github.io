<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Programming with Your Own Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconprogrammingwithyourownobjects"></a>Programming with Your Own Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconProgrammingWithYourOwnObjectsC">
</object></p>
<p>
You can start using objects gradually, finding useful tasks for which combining code and data is an advantage. You can use the functionality of these objects by declaring object variables, assigning new objects to them, and calling the objects' properties and methods.</p>
<p>
As you add more and more objects to your programs, you'll start to see relationships between them. You can begin making program design more dependent on objects and their relationships, and you can begin using more robust techniques — like creating custom collection classes — for expressing those relationships in code.</p>
<p>
At some point, you'll suddenly see how linking objects together changes the very nature of your program, and you'll be ready to start designing object-based programs from the ground up.</p>
<p>
The following topics provide an overview of these evolutionary changes in your coding style. Read them now, to give yourself a rough picture of where you're headed, and read them again when your ideas of object-based programming begin to gel.
<ul type=disc>
<li>
<a href="vbconobjectreferencesreferencecounting.htm">Object References and Reference Counting</a>&nbsp;&nbsp;&nbsp;The more you use objects, the more you need to manage your object references, so your component frees memory when it should and shuts down in an orderly fashion.<br><br></li>
<li>
<a href="vbconobjectmodels.htm">Object Models</a>&nbsp;&nbsp;&nbsp;How do the objects you create from your classes relate to each other? Object models express relationships in terms of containment — that is, one kind of object contains one or more of another kind. This is a powerful organizing principle for your programs.<br><br></li>
<li>
<a href="vbconcreatingyourowncollectionclasses.htm">Creating Your Own Collection Classes</a>&nbsp;&nbsp;&nbsp;Exposes some problems with the Visual Basic Collection object, and shows how you can create your own collection classes — that is, classes that delegate to a Collection object (thus gaining the ability to work with For Each … Next) while providing increased robustness and more functionality.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;ActiveX components open up yet another dimension of code reuse and object-based programming. If you have the Professional or Enterprise Edition of Visual Basic, you can begin to explore that dimension through <i>Creating ActiveX Components</i> in the <i>Component Tools Guide</i>.</p>
</BODY>
</HTML>

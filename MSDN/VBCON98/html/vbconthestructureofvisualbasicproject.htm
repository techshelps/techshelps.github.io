<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Structure of a Visual Basic Project</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconthestructureofvisualbasicproject"></a>The Structure of a Visual Basic Project</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheStructureOfVisualBasicProjectC">
</object></p>
<p>
The following sections describe the different types of files and objects that you can include in a project.</p>
<h2>Form Modules</h2>
<p>
Form modules (.frm file name extension) can contain textual descriptions of the form and its controls, including their property settings. They can also contain form-level declarations of constants, variables, and external procedures; event procedures; and general procedures.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more about creating forms, see "Developing an Application in Visual Basic" and "Creating a User Interface." For information about the format and content of form files, see "Visual Basic Specifications, Limitations, and File Formats."</p>
<h2>Class Modules</h2>
<p>
Class modules (.cls file name extension) are similar to form modules, except that they have no visible user interface. You can use class modules to create your own objects, including code for methods and properties.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information about writing code in class modules, see "Creating Your Own Classes" in "Programming with Objects."</p>
<h2>Standard Modules</h2>
<p>
Standard modules (.bas file name extension) can contain public or module-level declarations of types, constants, variables, external procedures, and public procedures.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information about using modules, see "Programming Fundamentals" and "Programming with Objects."</p>
<h2>Resource Files</h2>
<p>
Resource files (.res file name extension) contain bitmaps, text strings, and other data that you can change without having to re-edit your code. For example, if you plan to localize your application in a foreign language, you can keep all of the user-interface text strings and bitmaps in a resource file, which you can then localize instead of the entire application. A project can contain no more than one resource file.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on using resource files, see "Using a Resource File" later in this chapter, and "International Issues."</p>
<h2>ActiveX Documents</h2>
<p>
ActiveX documents (.dob) are similar to forms, but are displayable in an Internet browser such as Internet Explorer. The Professional and Enterprise editions of Visual Basic are capable of creating ActiveX documents.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on ActiveX documents, see "Creating ActiveX Components" in the <i>Component Tools Guide</i>, available in the Professional and Enterprise editions.</p>
<h2>User Control and Property Page Modules</h2>
<p>
User Control (.ctl) and Property Page (.pag) modules are also similar to forms, but are used to create ActiveX controls and their associated property pages for displaying design-time properties. The Professional and Enterprise editions of Visual Basic are capable of creating ActiveX controls.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on ActiveX control creation, see "Creating an ActiveX Control" in "Creating ActiveX Components," in the <i>Component Tools Guide</i>, available in the Professional and Enterprise editions.</p>
<h2>Components</h2>
<p>
In addition to files and modules, several other types of components can be added to the project.</p>
<h3>ActiveX Controls</h3>
<p>
ActiveX controls (.ocx file name extension) are optional controls which can be added to the toolbox and used on forms. When you install Visual Basic, the files containing the controls included with Visual Basic are copied to a common directory (the \Windows\System subdirectory under Windows 95). Additional ActiveX controls are available from a wide variety of sources. You can also create your own controls using the Professional or Enterprise editions of Visual Basic.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on using the included ActiveX controls, see "Using the ActiveX Controls" in the <i>Component Tools Guide</i>, available in the Professional and Enterprise editions.</p>
<h3>Insertable Objects</h3>
<p>
<i>Insertable objects</i>, such as a Microsoft Excel Worksheet object, are components you can use as building blocks to build integrated solutions. An <i>integrated solution</i> can contain data in different formats, such as spreadsheets, bitmaps, and text, which were all created by different applications.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on using other applications' objects, see "Programming with Components."</p>
<h3>References</h3>
<p>
You can also add references to external ActiveX components that may be used by your application. You assign references by using the References dialog, accessed from the References menu item on the Project menu.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on references, see "Using Other Applications' Objects" later in this chapter.</p>
<h3>ActiveX Designers</h3>
<p>
ActiveX designers are tools for designing classes from which objects can be created. The design interface for forms is the default designer. Additional designers may be available from other sources.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information about ActiveX designers, see "ActiveX Designers" in "Programming with Objects."</p>
<h2>Standard Controls</h2>
<p>
Standard controls are supplied by Visual Basic. Standard controls, such as the command button or frame control, are always included in the toolbox, unlike ActiveX controls and insertable objects, which can be removed from or added to the toolbox. </p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on standard controls, see "Forms, Controls, and Menus" and "Using Visual Basic's Standard Controls."</p>
</BODY>
</HTML>

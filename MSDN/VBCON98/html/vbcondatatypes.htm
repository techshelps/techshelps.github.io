<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Types</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondatatypes"></a>Data Types</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDataTypesC">
</object></p>
<p>
Variables are placeholders used to store values; they have names and data types. The data type of a variable determines how the bits representing those values are stored in the computer's memory. When you declare a variable, you can also supply a data type for it. All variables have a data type that determines what kind of data they can store.</p>
<p>
By default, if you don't supply a data type, the variable is given the Variant data type. The Variant data type is like a chameleon — it can represent many different data types in different situations. You don't have to convert between these types of data when assigning them to a Variant variable: Visual Basic automatically performs any necessary conversion.</p>
<p>
If you know that a variable will always store data of a particular type, however, Visual Basic can handle that data more efficiently if you declare a variable of that type. For example, a variable to store a person's name is best represented as a string data type, because a name is always composed of characters. </p>
<p>
Data types apply to other things besides variables. When you assign a value to a property, that value has a data type; arguments to functions also have data types. In fact, just about anything in Visual Basic that involves data also involves data types.</p>
<p>
You can also declare arrays of any of the fundamental types.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information, see the section, "Arrays," later in this chapter. Selecting data types to improve your application's performance is discussed in "Designing for Performance and Compatibility."</p>
<h2>Declaring Variables with Data Types</h2>
<p>
Before using a non-Variant variable, you must use the Private, Public, Dim or Static statement to declare it As <i>type</i>. For example, the following statements declare an Integer, Double, String, and Currency type, respectively:</p>
<pre><code>Private I As Integer
Dim Amt As Double
Static YourName As String
Public BillsPaid As Currency
</code></pre>
<p>
A Declaration statement can combine multiple declarations, as in these statements:</p>
<pre><code>Private I As Integer, Amt As Double
Private YourName As String, BillsPaid As Currency
Private Test, Amount, J As Integer
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you do not supply a data type, the variable is given the default type. In the preceding example, the variables <code>Test</code> and <code>Amount</code> are of the Variant data type. This may surprise you if your experience with other programming languages leads you to expect all variables in the same declaration statement to have the same specified type (in this case, Integer).</p>
<h2>Numeric Data Types</h2>
<p>
Visual Basic supplies several numeric data types — Integer, Long (long integer), Single (single-precision floating point), Double (double-precision floating point), and Currency. Using a numeric data type generally uses less storage space than a variant.</p>
<p>
If you know that a variable will always store whole numbers (such as 12) rather than numbers with a fractional amount (such as 3.57), declare it as an Integer or Long type. Operations are faster with integers, and these types consume less memory than other data types. They are especially useful as the counter variables in For...Next loops.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To read more about control structures, see "Introduction to Control Structures" later in this chapter.</p>
<p>
If the variable contains a fraction, declare it as a Single, Double, or Currency variable. The Currency data type supports up to four digits to the right of the decimal separator and fifteen digits to the left; it is an accurate fixed-point data type suitable for monetary calculations. Floating-point (Single and Double) numbers have much larger ranges than Currency, but can be subject to small rounding errors.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Floating-point values can be expressed as <i>mmm</i><b>E</b><i>eee</i> or <i>mmm</i><b>D</b><i>eee</i>, in which <i>mmm</i> is the mantissa and <i>eee</i> is the exponent (a power of 10). The highest positive value of a Single data type is 3.402823E+38, or 3.4 times 10 to the 38<sup>th</sup> power; the highest positive value of a Double data type is 1.79769313486232D+308, or about 1.8 times 10 to the 308<sup>th</sup> power. Using <b>D</b> to separate the mantissa and exponent in a numeric literal causes the value to be treated as a Double data type. Likewise, using <b>E</b> in the same fashion treats the value as a Single data type.</p>
<h2>The Byte Data Type</h2>
<p>
If the variable contains binary data, declare it as an array of the Byte data type. (Arrays are discussed in "Arrays" later in this chapter). Using Byte variables to store binary data preserves it during format conversions. When String variables are converted between ANSI and Unicode formats, any binary data in the variable is corrupted. Visual Basic may automatically convert between ANSI and Unicode when:
<ul type=disc>
<li>
Reading from files<br><br></li>
<li>
Writing to files<br><br></li>
<li>
Calling DLLs<br><br></li>
<li>
Calling methods and properties on objects</li>
</ul>
<p>
All operators that work on integers work with the Byte data type except unary minus. Since Byte is an unsigned type with the range 0-255, it cannot represent a negative number. So for unary minus, Visual Basic coerces the Byte to a signed integer first.</p>
<p>
All numeric variables can be assigned to each other and to variables of the Variant type. Visual Basic rounds off rather than truncates the fractional part of a floating-point number before assigning it to an integer.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For details on Unicode and ANSI conversions, see "International Issues."</p>
<h2>The String Data Type</h2>
<p>
If you have a variable that will always contain a string and never a numeric value, you can declare it to be of type String:</p>
<pre><code>Private S As String
</code></pre>
<p>
You can then assign strings to this variable and manipulate it using string functions:</p>
<pre><code>S = "Database"
S = Left(S, 4)
</code></pre>
<p>
By default, a string variable or argument is a <i>variable-length string</i>; the string grows or shrinks as you assign new data to it. You can also declare strings that have a fixed length. You specify a <i>fixed-length string</i> with this syntax:</p>
<p>
<b>String *</b> <i>size</i></p>
<p>
For example, to declare a string that is always 50 characters long, use code like this:</p>
<pre><code>Dim EmpName As String * 50
</code></pre>
<p>
If you assign a string of fewer than 50 characters, <code>EmpName</code> is padded with enough trailing spaces to total 50 characters. If you assign a string that is too long for the fixed-length string, Visual Basic simply truncates the characters. </p>
<p>
Because fixed-length strings are padded with trailing spaces, you may find the Trim and RTrim functions, which remove the spaces, useful when working with them.</p>
<p>
Fixed-length strings in standard modules can be declared as Public or Private. In forms and class modules, fixed-length strings must be declared Private.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Ltrim, RTrim Function and Trim Functions" in the <i>Language Reference</i>.</p>
<h2>Exchanging Strings and Numbers</h2>
<p>
You can assign a string to a numeric variable if the string represents a numeric value. It's also possible to assign a numeric value to a string variable. For example, place a command button, text box, and list box on a form. Enter the following code in the command button's Click event. Run the application, and click the command button.</p>
<pre><code>Private Sub Command1_Click()
   Dim intX As Integer
   Dim strY As String
   strY = "100.23"
   intX = strY      ' Passes the string to a numeric 
                  ' variable.
   List1.AddItem Cos(strY)   ' Adds cosine of number in 
                        ' the string to the listbox.
   strY = Cos(strY)         ' Passes cosine to the 
                           ' string variable.
   Text1.Text = strY      ' String variable prints in 
                        ' the text box.
End Sub
</code></pre>
<p>
Visual Basic will automatically coerce the variables to the appropriate data type. You should use caution when exchanging strings and numbers; passing a non-numeric value in the string will cause a run-time error to occur.</p>
<h2>The Boolean Data Type</h2>
<p>
If you have a variable that will contain simple true/false, yes/no, or on/off information, you can declare it to be of type Boolean. The default value of Boolean is False. In the following example, <code>blnRunning</code> is a Boolean variable which stores a simple yes/no setting.</p>
<pre><code>Dim blnRunning As Boolean
   ' Check to see if the tape is running.
   If Recorder.Direction = 1 Then 
   blnRunning = True
End if
</code></pre>
<h2>The Date Data Type</h2>
<p>
Date and time values can be contained both in the specific Date data type and in Variant variables. The same general characteristics apply to dates in both types. </p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See the section, "Date/Time Values Stored in Variants," in "Advanced Variant Topics."</p>
<p>
When other numeric data types are converted to Date, values to the left of the decimal represent date information, while values to the right of the decimal represent time. Midnight is 0, and midday is 0.5. Negative whole numbers represent dates before December 30, 1899.</p>
<h2>The Object Data Type</h2>
<p>
Object variables are stored as 32-bit (4-byte) addresses that refer to objects within an application or within some other application. A variable declared as Object is one that can subsequently be assigned (using the Set statement) to refer to any actual object recognized by the application.</p>
<pre><code>Dim objDb As Object
Set objDb = OpenDatabase("c:\Vb5\Biblio.mdb")
</code></pre>
<p>
When declaring object variables, try to use specific classes (such as <code>TextBox</code> instead of <code>Control</code> or, in the preceding case, <code>Database</code> instead of <code>Object</code>) rather than the generic Object. Visual Basic can resolve references to the properties and methods of objects with specific types before you run an application. This allows the application to perform faster at run time. Specific classes are listed in the Object Browser.</p>
<p>
When working with other applications' objects, instead of using a Variant or the generic Object, declare objects as they are listed in the Classes list in the Object Browser. This ensures that Visual Basic recognizes the specific type of object you're referencing, allowing the reference to be resolved at run time.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on creating and assigning objects and object variables, see "Creating Objects" later in this chapter.</p>
<h2>Converting Data Types</h2>
<p>
Visual Basic provides several conversion functions you can use to convert values into a specific data type. To convert a value to Currency, for example, you use the CCur function:</p>
<pre><code>PayPerWeek = CCur(hours * hourlyPay)
</code></pre>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Conversion<br>
function</b></td>
<td class=label width=72%><p class=label>
<b>Converts an expression to</b></p>
</td>
</tr>
<tr valign=top>
<td width=28%>Cbool</td>
<td width=72%>Boolean</td>
</tr>
<tr valign=top>
<td width=28%>Cbyte</td>
<td width=72%>Byte</td>
</tr>
<tr valign=top>
<td width=28%>Ccur</td>
<td width=72%>Currency</td>
</tr>
<tr valign=top>
<td width=28%>Cdate</td>
<td width=72%>Date</td>
</tr>
<tr valign=top>
<td width=28%>CDbl</td>
<td width=72%>Double</td>
</tr>
<tr valign=top>
<td width=28%>Cint</td>
<td width=72%>Integer</td>
</tr>
<tr valign=top>
<td width=28%>CLng</td>
<td width=72%>Long</td>
</tr>
<tr valign=top>
<td width=28%>CSng</td>
<td width=72%>Single</td>
</tr>
<tr valign=top>
<td width=28%>CStr</td>
<td width=72%>String</td>
</tr>
<tr valign=top>
<td width=28%>Cvar</td>
<td width=72%>Variant</td>
</tr>
<tr valign=top>
<td width=28%>CVErr</td>
<td width=72%>Error</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Values passed to a conversion function must be valid for the destination data type or an error occurs. For example, if you attempt to convert a Long to an Integer, the Long must be within the valid range for the Integer data type.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See the <i>Language Reference</i> for a specific conversion function.</p>
<h2>The Variant Data Type</h2>
<p>
A Variant variable is capable of storing all system-defined types of data. You don't have to convert between these types of data if you assign them to a Variant variable; Visual Basic automatically performs any necessary conversion. For example:</p>
<pre><code>Dim SomeValue      ' Variant by default.
SomeValue = "17"   ' SomeValue contains "17" (a two-
                  ' character string).
SomeValue = SomeValue - 15       ' SomeValue now contains 
                              ' the numeric value 2.
SomeValue = "U" &amp; SomeValue      ' SomeValue now contains 
                     ' "U2" (a two- character string).
</code></pre>
<p>
While you can perform operations on Variant variables without much concern for the kind of data they contain, there are some traps you must avoid.
<ul type=disc>
<li>
If you perform arithmetic operations or functions on a Variant, the Variant must contain something that is a number. For details, see the section, "Numeric Values Stored in Variants," in "Advanced Variant Topics."<br><br></li>
<li>
If you are concatenating strings, use the &amp; operator instead of the + operator. For details, see the section, "Strings Stored in Variants," in "Advanced Variant Topics."</li>
</ul>
<p>
In addition to being able to act like the other standard data types, Variants can also contain three special values: Empty, Null, and Error. </p>
<h2>The Empty Value</h2>
<p>
Sometimes you need to know if a value has ever been assigned to a created variable. A Variant variable has the Empty value before it is assigned a value. The Empty value is a special value different from 0, a zero-length string (<code>""</code>), or the Null value. You can test for the Empty value with the IsEmpty function:</p>
<pre><code>If IsEmpty(Z) Then Z = 0
</code></pre>
<p>
When a Variant contains the Empty value, you can use it in expressions; it is treated as either 0 or a zero-length string, depending on the expression.</p>
<p>
The Empty value disappears as soon as any value (including 0, a zero-length string, or Null) is assigned to a Variant variable. You can set a Variant variable back to Empty by assigning the keyword Empty to the Variant.</p>
<h2>The Null Value</h2>
<p>
The Variant data type can contain another special value: Null. Null is commonly used in database applications to indicate unknown or missing data. Because of the way it is used in databases, Null has some unique characteristics:
<ul type=disc>
<li>
Expressions involving Null always result in Null. Thus, Null is said to "propagate" through expressions; if any part of the expression evaluates to Null, the entire expression evaluates to Null.<br><br></li>
<li>
Passing Null, a Variant containing Null, or an expression that evaluates to Null as an argument to most functions causes the function to return Null.<br><br></li>
<li>
Null values propagate through intrinsic functions that return Variant data types.</li>
</ul>
<p>
You can also assign Null with the Null keyword:</p>
<pre><code>Z = Null
</code></pre>
<p>
You can use the IsNull function to test if a Variant variable contains Null:</p>
<pre><code>If IsNull(X) And IsNull(Y) Then
   Z = Null
Else
   Z = 0
End If
</code></pre>
<p>
If you assign Null to a variable of any type other than Variant, a trappable error occurs. Assigning Null to a Variant variable doesn't cause an error, and Null will propagate through expressions involving Variant variables (though Null does not propagate through certain functions). You can return Null from any Function procedure with a Variant return value.</p>
<p>
Variables are not set to Null unless you explicitly assign Null to them, so if you don't use Null in your application, you don't have to write code that tests for and handles it.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information on how to use Null in expressions, see "Null" in the <i>Language Reference</i>.</p>
<h2>The Error Value</h2>
<p>
In a Variant, Error is a special value used to indicate that an error condition has occurred in a procedure. However, unlike for other kinds of errors, normal application-level error handling does not occur. This allows you, or the application itself, to take some alternative based on the error value. Error values are created by converting real numbers to error values using the CVErr function.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information on how to use the Error value in expressions, see "CVErr Function" in the <i>Language Reference</i>. For information on error handling, see "Debugging Your Code and Handling Errors." For additional information about the Variant data type, see "Advanced Variant Topics."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Remoting Features of Visual Basic</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconremotingfeaturesofvisualbasic"></a>Remoting Features of Visual Basic</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconRemotingFeaturesOfVisualBasic_C">
</object></p>
<p>
"Remoting" is the process of passing parameters between two different processes, usually across a network. For example, imagine a three-tier system. On the client machine, the application makes a call for data, passing several parameters as the criteria. On the middle-tier machine, an ActiveX EXE accepts the call and uses the criteria for retrieving the data.</p>
<p>
For example, code on a middle-tier application might resemble:</p>
<pre><code>Option Explicit

' This code is in a code module.
Public Type udtMyType ' Definition of a Public UDT
   birthDate As Date
   lastName As String
   firstName As String
   address As String
End Type

Public Function passUDT(myrec As udtMyType) As udtMyType   
   ' Modify the data somehow.
   passUDT = myrec ' Return the UDT.
End Function
</code></pre>
<p>
While code on the client machine that calls the function would be:</p>
<pre><code>Option Explicit
Private myrec As udtMyType

Private Sub Command1_Click()
   Dim x As udtMyType
   x = passUDT(myrec)
   ' Do something with the UDT data.
End Sub
</code></pre>
<h3>Passing a UDT as a Parameter of a Public Sub</h3>
<p>
While passing parameters has always been possible in previous versions of Visual Basic, passing user-defined types (UDTs) as parameters of public subs has not. This is now possible, as shown in the example above.</p>
<h3>Performance Considerations</h3>
<p>
The cost of passing parameters out-of-process is far higher than passing them in-process. When passing a parameter, the data must be marshaled and passed to the external process. The code to accomplish this action can be expensive, but Visual Basic conceals this cost. The advantage of remoting data, however, is to create code that is easily comprehensible. Depending on the size of the UDT, it may also be easier to maintain than an ADO Recordset object.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For details about creating and using UDTs, see <a href="vbconcreatingyourowndatatypes.htm">Creating Your Own Data Types</a>.</p>
<h3>Remoting ADO Recordsets</h3>
<p>
ADO Recordset objects can also be remoted. With this capability, ADO recordsets are especially suited for use on intranet and Internet client-server applications. For example, you can create an HTML or DHTML page that accesses data across the Internet from a web server application. When creating the HTML page, you can include the Microsoft ActiveX Data Access Recordset 2.0 Library, which features only the Recordset object. Since that library doesn't include the Command, Connection, and Parameter objects, your application will have the smallest possible footprint while retaining the functionality of the ADO Recordset features. The code below shows an example of remoting ADO recordsets.</p>
<pre><code>' This code is in a code module. 
' Set a reference to the Microsoft ActiveX Data Objects 2.0 Library
Private MyADORecordset As ADODB.Recordset

Public Function GetCustomer(LastName As String) As ADODB.Recordset   
   ' Query the DB
   MyADORecordset.Open "SELECT * FROM Customers WHERE " &amp; _
   "LastName = '" &amp; LastName &amp; "'", cn, adOpenForwardOnly, adLockReadOnly
   Set MyADORecordset.ActiveConnection = Nothing
   Set GetCustomer = MyADORecordset ' Return the recordset.
End Function
</code></pre>
<p>
While code on the client machine that calls the function would be:</p>
<pre><code>Option Explicit
Private SomeServer As Object

Private Sub Command1_Click()
   ' Client can use the lighter ADOR library. Set a reference to 
   ' the Microsoft ActiveX Data Objects Recordset 2.0 Library.
   Dim MyData As ADOR.Recordset
   Set SomeServer = CreateObject("foo.bar", myserver)
   Set MyData = SomeServer.GetCustomer("Smith")
   ' Do something with the data.
End Sub
</code></pre>
</BODY>
</HTML>

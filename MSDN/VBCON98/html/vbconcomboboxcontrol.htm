<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Combo Box Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcomboboxcontrol"></a>Using the Combo Box Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconComboBoxControlC">
</object></p>
<p>
A combo box control combines the features of a text box and a list box. This control allows the user to select an item either by typing text into the combo box, or by selecting it from the list.</p>
<p class=label>
<b>Figure 7.6&nbsp;&nbsp;&nbsp;The combo box control</b></p>
<p>
<img src="avp07002.gif" border=0></p>
<p>
Combo boxes present a list of choices to the user. If the number of items exceeds what can be displayed in the combo box, scroll bars will automatically appear on the control. The user can then scroll up and down or left to right through the list.</p>
<h2>When to Use a Combo Box Instead of a List Box</h2>
<p>
Generally, a combo box is appropriate when there is a list of <i>suggested</i> choices, and a list box is appropriate when you want to limit input to what is on the list. A combo box contains an edit field, so choices not on the list can be typed in this field.</p>
<p>
In addition, combo boxes save space on a form. Because the full list is not displayed until the user clicks the down arrow (except for Style 1, which is always dropped down), a combo box can easily fit in a small space where a list box would not fit.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Using List Boxes and Combo Boxes" in "Forms, Controls, and Menus" for a simple demonstration of these controls. Also see "Using the List Box Control" later in this chapter for more information about the list box control.</p>
<h2>Data-Bound Features</h2>
<p>
Visual Basic includes both standard and data-bound versions of the combo box control. While both versions allow you to display, edit, and update information from most standard types of databases, the data-bound combo box provides more advanced data access features. The Data-Bound combo box control also supports a different set of properties and methods than the standard combo box control.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Using the DataCombo and DataList Controls" in "Using Visual Basic's Standard Controls" for more information.</p>
<h2>Combo Box Styles</h2>
<p>
There are three combo box styles. Each style can be set at design time and uses values, or equivalent Visual Basic constants, to set the style of the combo box.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Style</b></td>
<td class=label width=33%><b>Value</b></td>
<td class=label width=34%><b>Constant</b></td>
</tr>
<tr valign=top>
<td width=33%>Drop-down combo box</td>
<td width=33%>0</td>
<td width=34%>vbComboDropDown</td>
</tr>
<tr valign=top>
<td width=33%>Simple combo box</td>
<td width=33%>1</td>
<td width=34%>vbComboSimple</td>
</tr>
<tr valign=top>
<td width=33%>Drop-down list box</td>
<td width=33%>2</td>
<td width=34%>vbComboDropDownList</td>
</tr>
</table><br>
<p class=label>
<b>Figure 7.7&nbsp;&nbsp;&nbsp;Combo box styles</b></p>
<p>
<img src="avp07039.gif" border=0></p>
<h3>Drop-down Combo Box</h3>
<p>
With the default setting (Style = 0 – Dropdown Combo), a combo box is a drop-down combo box. The user can either enter text directly (as in a text box) or click the detached arrow at the right of the combo box to open a list of choices. Selecting one of the choices inserts it into the text portion at the top of the combo box. The user also can open the list by pressing ALT+ DOWN ARROW when the control has the focus.</p>
<h3>Simple Combo Box</h3>
<p>
Setting the Style property of a combo box to 1 – Simple Combo specifies a simple combo box in which the list is displayed at all times. To display all entries in the list, you must draw the list box large enough to display the entries. A vertical scroll bar is automatically inserted when there are more entries than can be displayed. The user can still enter text directly or select from the list. As with a drop-down combo box, a simple combo box also allows users to enter choices not on the list.</p>
<h3>Drop-down List Box</h3>
<p>
A drop-down list box (Style = 2 – Dropdown List) is like a regular list box — it displays a list of items from which a user must choose. Unlike list boxes, however, the list is not displayed until you click the arrow to the right of the box. The key difference between this and a drop-down combo box is that the user can't type into the box, he can only select an item from the list. Use this type of list box when space is at a premium.</p>
<h2>Adding Items</h2>
<p>
To add items to a combo box, use the AddItem method, which has the following syntax:</p>
<p>
<i>box</i>.<b>AddItem</b> <i>item</i>[<i>, index</i>]</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Argument</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><i>box</i></td>
<td width=50%>Name of the list or combo box.</td>
</tr>
<tr valign=top>
<td width=50%><i>item</i></td>
<td width=50%>String expression to add to the list. If <i>item</i> is a literal constant, enclose it in quotation marks.</td>
</tr>
<tr valign=top>
<td width=50%><i>index</i></td>
<td width=50%>Specifies where the new item is to be inserted in the list. An <i>index</i> of 0 represents the first position. If <i>index</i> is omitted, the item is inserted at the end (or in the proper sorted order).</td>
</tr>
</table><br>
<p>
While list items are commonly added in the Form_Load event procedure, you can use the AddItem method at any time. This gives you the ability to add items to the list dynamically (in response to user actions).</p>
<p>
The following code places "Chardonnay," "Fumé Blanc," "Gewürztraminer," and "Zinfandel" into a combo box named Combo1 with its Style property set to 0 (vbComboDropDown):</p>
<pre><code>Private Sub Form_Load ()
   Combo1.AddItem "Chardonnay"
   Combo1.AddItem "Fumé Blanc"
   Combo1.AddItem "Gewürztraminer"
   Combo1.AddItem "Zinfandel"
End Sub
</code></pre>
<p>
Whenever the form is loaded at run time and the user clicks the down arrow, the list appears as shown in Figure 7.8.</p>
<p class=label>
<b>Figure 7.8&nbsp;&nbsp;&nbsp;"Wine list" combo box</b></p>
<p>
<img src="avp07040.gif" border=0></p>
<h3>Adding Items at Design Time</h3>
<p>
You can also enter items into the list at design time by setting the List property in the Properties window of the combo box control. When you select the List property option and then click the down arrow, you can type list items and then press the CTRL+ENTER key combination to start a new line.</p>
<p>
You can only add items to the end of the list. So, if you want to alphabetize the list, set the Sorted property to True. See "Sorting a List" below for more information.</p>
<h3>Adding an Item at a Specified Position</h3>
<p>
To add an item to a list at a specific position, specify an index value after the new item. For example, the next line of code inserts "Pinot Noir" into the first position, adjusting the position of the other items downward:</p>
<pre><code>Combo1.AddItem "Pinot Noir", 0
</code></pre>
<p>
Notice that it is 0, not 1, that specifies the first item in a list (see Figure 7.9).</p>
<p class=label>
<b>Figure 7.9&nbsp;&nbsp;&nbsp;Adding an item to a list</b></p>
<p>
<img src="avp07041.gif" border=0></p>
<h2>Sorting a List</h2>
<p>
You can specify that items be added to a list in alphabetical order by setting the Sorted property to True and omitting the index. The sort is not case-sensitive; thus, the words "chardonnay" and "Chardonnay" are treated the same.</p>
<p>
When the Sorted property is set to True, using the AddItem method with the <i>index</i> argument can lead to unpredictable, unsorted results.</p>
<h2>Removing Items</h2>
<p>
You can use the RemoveItem method to delete items from a combo box. RemoveItem has one argument, <i>index</i>, which specifies the item to remove:</p>
<p>
<i>box</i>.<b>RemoveItem</b> <i>index</i></p>
<p>
The <i>box</i> and <i>index</i> arguments are the same as for AddItem.</p>
<p>
For example, to remove the first entry in a list, you would add the following line of code:</p>
<pre><code>Combo1.RemoveItem 0
</code></pre>
<p>
To remove all list entries in a combo box, use the Clear method:</p>
<pre><code>Combo1.Clear
</code></pre>
<h2>Getting List Contents with the Text Property</h2>
<p>
Usually, the easiest way to get the value of the currently selected item is to use the Text property. The Text property corresponds to whatever is entered in the text box portion of the control at run time. This can be either a selected list item or a string that a user types in the text box.</p>
<p>
For example, the following code displays information about Chardonnay if a user selects "Chardonnay" from a list box:</p>
<pre><code>Private Sub Combo1_Click ()
   If Combo1.Text = "Chardonnay" Then
      Text1.Text = "Chardonnay is a medium-bodied _
      white wine."
   End If
End Sub
</code></pre>
<p>
The Text property contains the currently selected item in the Combo1 list box. The code checks to see if "Chardonnay" has been selected and, if so, displays the information in the text box.</p>
<h2>Accessing List Items with the List Property</h2>
<p>
The List property provides access to all items in the list. This property contains an array in which each item in the list is an element of the array. Each item is represented in string form. To refer to an item in the list, use this syntax:</p>
<p>
<i>box.</i><b>List</b>(<i>index)</i></p>
<p>
The <i>box</i> argument is a reference to a combo box, and <i>index</i> is the position of the item. The top item has an index of 0, the next has an index of 1, and so on. For example, the following statement displays the third item (<i>index</i> = 2) in a list in a text box:</p>
<pre><code>Text1.Text = Combo1.List(2)
</code></pre>
<h2>Determining Position with the ListIndex Property</h2>
<p>
If you want to know the position of the selected item in a list in a combo box, use the ListIndex property. This property sets or returns the index of the currently selected item in the control and is available only at run time. Setting the ListIndex property for a combo box also generates a Click event for the control.</p>
<p>
The value of this property is 0 if the first (top) item is selected, 1 if the next item down is selected, and so on. ListIndex is – 1 if no item is selected or if a user enters a choice in a combo box (Style 0 or 1) instead of selecting an existing item in the list.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The NewIndex property allows you to keep track of the index of the last item added to the list. This can be useful when inserting an item into a sorted list.</p>
<h2>Returning the Number of Items with the ListCount Property</h2>
<p>
To return the number of items in a combo box, use the ListCount property. For example, the following statement uses the ListCount property to determine the number of entries in a combo box:</p>
<pre><code>Text1.Text = "You have " &amp; Combo1.ListCount &amp; " _
entries listed"
</code></pre>
</BODY>
</HTML>

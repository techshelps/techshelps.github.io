<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Data-Aware Class that Reads Records from a Delimited Text File</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatenewdatasource"></a>Creating a Data-Aware Class that Reads Records from a Delimited Text File</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreateNewDataSourceC">
</object></p>
<p>
By creating a data-aware class, you can read data from a delimited text file into an ADO recordset and use the features of ADO to manipulate the data. You can then use the class as a data source in your application, binding controls on a form to fields in the recordset.</p>
<p>
This topic shows how to create a data-aware class that reads data in a tab-delimited text file and provides methods for navigating through the data.</p>
<p class=label>
<b>To create a data-aware class that reads data from a delimited text file</b>
<ol>
<li>
Create a class that acts as a data source.<br><br></li>
<li>
Add code to read data from the text file into an ADO recordset.<br><br></li>
<li>
Set the data source for the class.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a simple database application that interacts with data in a tab-delimited text file. It begins with the topic <a href="vbcongetdatafromasciifile.htm">Interacting with Data in an ASCII Text File</a>.</p>
<h3>Create a Class that Acts as a Data Source</h3>
<p>
You can create a class that acts as a data source by inserting a class module in your project and specifying its data source behavior. First, insert a class module in your project by selecting Add Class Module from the Project menu. Then set the Name and DataSourceBehavior properties for the class.</p>
<p>
For example, to create a CustomerDataSource class that can act as a data source, set the following properties:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=49%><b>Property</b></td>
<td class=label width=51%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=49%>Name</td>
<td width=51%>CustomerDataSource</td>
</tr>
<tr valign=top>
<td width=49%>DataSourceBehavior</td>
<td width=51%>vbDataSource</td>
</tr>
</table><br>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Data-aware classes are covered in depth in <a href="vbconcreatingdata-awareclasses.htm">Creating Data-Aware Classes</a> in the <i>Programmer's Guide</i>.</p>
<h3>Add Code to Read Data from the Text File into an ADO Recordset</h3>
<p>
By reading data from a text file into an ADO recordset, you can use the features of ADO to manipulate the data. First, add a reference to the ADO object library by selecting References on the Project menu, then selecting Microsoft ActiveX Data Objects 2.0 Library in the References dialog box.</p>
<p>
Then declare a Recordset object variable in the Declarations section for the class. For example, to declare a Recordset object variable for working with customer records from the Customers.txt file, add the following to the Declarations section:</p>
<pre><code>Public rsCustomers As ADODB.Recordset
</code></pre>
<p>
By declaring the variable as a public variable, you can use the built-in methods of the Recordset object in applications that use the data-aware class.</p>
<p>
Finally, add code to the Class_Initialize event procedure for the class to read data from the text file. For example, add the following code to the Class_Initialize event procedure for the CustomerDataSource class to read data from the Customers.txt file into a recordset:</p>
<pre><code>Private Sub Class_Initialize()

   Dim fld As ADODB.Field
   Dim strRow As String
   Dim strField As String
   Dim intPos As Integer

   Set rsCustomers = New ADODB.Recordset

   With rsCustomers
      ' Set CustomerID as the primary key.
      .Fields.Append "CustomerID", adChar, 5, adFldRowID
      .Fields.Append "CompanyName", adChar, 40, adFldUpdatable
      .Fields.Append "ContactName", adChar, 30, adFldUpdatable
      .Fields.Append "ContactTitle", adChar, 30, adFldUpdatable
      .Fields.Append "Address", adChar, 60, adFldUpdatable
      .Fields.Append "City", adChar, 15, adFldUpdatable
      .Fields.Append "Region", adChar, 15, adFldMayBeNull
      .Fields.Append "PostalCode", adChar, 10, adFldMayBeNull
      .Fields.Append "Country", adChar, 15, adFldUpdatable
      .Fields.Append "Phone", adChar, 24, adFldUpdatable
      .Fields.Append "Fax", adChar, 24, adFldMayBeNull
      ' Use Keyset cursor type to allow updating records.
      .CursorType = adOpenKeyset
      .LockType = adLockOptimistic
      .Open
   End With

   Open "Customers.txt" For Input As #1

   Do Until EOF(1)
      Line Input #1, strRow
      With rsCustomers
         .AddNew
         For Each fld In .Fields
            ' If a tab delimiter is found, field text is to the
            ' left of the delimiter.
            If InStr(strRow, Chr(9)) &lt;&gt; 0 Then
               ' Move position to tab delimiter.
               intPos = InStr(strRow, Chr(9))
               ' Assign field text to strField variable.
               strField = Left(strRow, intPos - 1)
            Else
               ' If a tab delimiter isn't found, field text is the
               ' last field in the row.
               strField = strRow
            End If

            ' Strip off quotation marks.
            If Left(strField, 1) = Chr(34) Then
               strField = Left(strField, Len(strField) - 1)
               strField = Right(strField, Len(strField) - 1)
            End If

            fld.Value = strField

            ' Strip off field value text from text row.
            strRow = Right(strRow, Len(strRow) - intPos)
            intPos = 0

         Next
         .Update
         .MoveFirst
      End With
   Loop
   Close

End Sub
</code></pre>
<h3>Set the Data Source for the Class</h3>
<p>
When you specify a class as a data source by setting its DataSourceBehavior to vbDataSource, Visual Basic automatically adds a GetDataMember event to the class. The Class_GetDataMember event procedure is where you set the data source for the class by assigning it to the Data object for the class.</p>
<p>
For example, to set the rsCustomers recordset as the data source for the CustomerDataSource class, add the following to the Class_GetDataMember event procedure:</p>
<pre><code>Private Sub Class_GetDataMember(DataMember As String, Data As Object)   Set Data = rsCustomersEnd Sub</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For a discussion of data sources, see <a href="vbconcreatingdatasource.htm">Creating a Data Source</a> in the <i>Programmer's Guide</i>.</p>
<h4>Step by Step</h4>
<p>
This topic is part of a series that walks you through using a data-aware class and ADO to create a simple database application that interacts with data in a tab-delimited text file.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>To</b></td>
<td class=label width=69%><b>See</b></td>
</tr>
<tr valign=top>
<td width=31%>Go to the next step</td>
<td width=69%><a href="vbconcreateconnectiontodatasource.htm">Creating a Form that Lets You View and Update Data from a Data-Aware Class</a></td>
</tr>
<tr valign=top>
<td width=31%>Start from the beginning</td>
<td width=69%><a href="vbcongetdatafromasciifile.htm">Interacting with Data in an ASCII Text File</a></td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Instancing for Classes Provided by ActiveX Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconinstancingforolecomponentclasses"></a>Instancing for Classes Provided by ActiveX Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconInstancingForOLEComponentClassesC">
</object></p>
<p>
The value of the Instancing property determines whether your class is private — that is, for use only within your component — or available for other applications to use.</p>
<p>
As its name suggests, the Instancing property also determines how other applications create instances of the class. The property values have the following meanings.
<ul type=disc>
<li>
<i>Private</i> means that other applications aren’t allowed access to type library information about the class, and cannot create instances of it. Private objects are only for use within your component.<br><br></li>
<li>
<i>PublicNotCreatable</i> means that other applications can use objects of this class only if your component creates the objects first. Other applications cannot use the CreateObject function or the New operator to create objects from the class.<br><br></li>
<li>
<i>MultiUse</i> allows other applications to create objects from the class. One instance of your component can provide any number of objects created in this fashion.<p class=tl>
An out-of-process component can supply multiple objects to multiple clients; an in-process component can supply multiple objects to the client and to any other components in its process.</P></li>
<li>
<i>GlobalMultiUse</i> is like MultiUse, with one addition: properties and methods of the class can be invoked as if they were simply global functions. It’s not necessary to explicitly create an instance of the class first, because one will automatically be created.<br><br></li>
<li>
<i>SingleUse</i> allows other applications to create objects from the class, but every object of this class that a client creates starts a new instance of your component. Not allowed in ActiveX DLL projects.<br><br></li>
<li>
<i>GlobalSingleUse</i> is like SingleUse, except that properties and methods of the class can be invoked as if they were simply global functions. Not allowed in ActiveX DLL projects.</li>
</ul>
<h2>Class Modules and Project Types</h2>
<p>
The value of the Instancing property is restricted in certain project types. Allowed values are shown in the following table:</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Instancing Value</b></td>
<td class=label width=21%><b>ActiveX EXE</b></td>
<td class=label width=21%><b>ActiveX DLL</b></td>
<td class=label width=28%><b>ActiveX Control</b></td>
</tr>
<tr valign=top>
<td width=30%>Private</td>
<td width=21%>Yes</td>
<td width=21%>Yes</td>
<td width=28%>Yes</td>
</tr>
<tr valign=top>
<td width=30%>PublicNotCreatable</td>
<td width=21%>Yes</td>
<td width=21%>Yes</td>
<td width=28%>Yes</td>
</tr>
<tr valign=top>
<td width=30%>MultiUse</td>
<td width=21%>Yes</td>
<td width=21%>Yes</td>
<td width=28%></td>
</tr>
<tr valign=top>
<td width=30%>GlobalMultiUse</td>
<td width=21%>Yes</td>
<td width=21%>Yes</td>
<td width=28%></td>
</tr>
<tr valign=top>
<td width=30%>SingleUse</td>
<td width=21%>Yes</td>
<td width=21%></td>
<td width=28%></td>
</tr>
<tr valign=top>
<td width=30%>GlobalSingleUse</td>
<td width=21%>Yes</td>
<td width=21%></td>
<td width=28%></td>
</tr>
</table><br>
<h2>Dependent Objects (PublicNotCreatable)</h2>
<p>
The value of the Instancing property determines the part an object plays in your component’s object model, as discussed in "Organizing Objects: The Object Model."</p>
<p>
If the Instancing property of a class is PublicNotCreatable, objects of that class are called <i>dependent objects.</i> Dependent objects are typically parts of more complex objects.</p>
<p>
For example, you might allow a client application to create multiple Library objects, but you might want Book objects to exist only as parts of a Library. You can make the Book class PublicNotCreatable, and let the user add new books to a Library object by giving the Library class a Books collection with an Add method that creates new books only within the collection.</p>
<p>
Your component can support as many dependent objects as necessary. You can write code in the Add method of a collection class to limit the number of objects in the collection, or you can allow the number to be limited by available memory.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Dependent objects are discussed in detail in "Dependent Objects," later in this chapter.</p>
<h2>Externally Creatable Objects</h2>
<p>
All values of the Instancing property besides PublicNotCreatable and Private define externally creatable objects — that is, objects that clients can create using the New operator or the CreateObject function.</p>
<h3>MultiUse vs. SingleUse</h3>
<p>
In ActiveX DLLs, Instancing for an externally creatable class will most commonly be MultiUse. This setting allows an in-process component to supply any number of instances of the class to the client executable, and to any other in-process component.</p>
<p>
For ActiveX EXEs, the Instancing values SingleUse and MultiUse define very different behaviors for a class. MultiUse makes the most efficient use of memory, because it allows one instance of your component to provide multiple objects to multiple client applications without duplication of resources or global data.</p>
<p>
For example, suppose the SmallMechanicals component provides a Widget class, and the Instancing property of the class is set to MultiUse. If one client application creates two Widget objects, or if two client applications each create a Widget object, all the Widgets will be supplied from one instance of your component.</p>
<p>
If the Instancing property of the Widget class is set to SingleUse, the result of both scenarios above is that a separate copy of your component will be loaded into memory for each Widget created. The uses and limitations of this behavior are discussed in "Building Code Components," and in "ActiveX Component Standards and Guidelines."</p>
<h4>MultiUse and Multithreading</h4>
<p>
If your component is an ActiveX EXE marked for unattended execution (that is, it has no user interaction whatever), and the Instancing property of the Widget class is set to MultiUse, the result of both scenarios above is that two Widget objects are created in same copy of SmallMechanicals, each on its own thread of execution.</p>
<p>
Apartment Model threading is used, meaning that each thread is like an apartment, and objects in different apartments are unaware of each other’s existence. This is accomplished by giving each Widget its own copy of the SmallMechanicals component’s global data.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The use of multithreading or SingleUse instancing to avoid blocked execution is discussed in "Building Code Components."</p>
<h3>Global Objects</h3>
<p>
Frequently it’s useful to have utility functions that users of your component can employ without first creating an instance of one of your objects. In out-of-process components, such functions are frequently implemented as properties or methods of the Application object.</p>
<p>
If the Instancing property for a class is marked GlobalMultiUse or GlobalSingleUse, then properties and methods of the class can be invoked without explicitly creating an instance of the object.</p>
<p>
For example, suppose you want your SmallMechanicals component to provide a GlobalUtility object whose methods are general-purpose functions. You can add a class module to the SmallMechanicals project, set the Name property to GlobalUtility, and set the Instancing property to GlobalMultiUse.</p>
<p>
Now you can add properties and methods to the class module. For example, you might implement a ReversePolarity method and a read-only WidgetCount property:</p>
<pre><code>Public Sub ReversePolarity()
   ' (Code to reverse polarity on all Widgets.)
End Sub
</code></pre>
<p>
In the client application, the ReversePolarity method can be invoked without first creating a GlobalUtility object:</p>
<pre><code>Private Sub Command1_Click()
   ' No object variable is required.
   ReversePolarity
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The properties and methods of a GlobalMultiUse object are not part of the global name space of the component that provides the object. For example, within a project that contains the GlobalUtility class, you must explicitly create an instance of GlobalUtility in order to use the object's properties and methods. Other limitations of global objects are listed in "Global Objects and Code Libraries," in "Building Code Components."</p>
<p>
Be careful when choosing names for the properties and methods of global objects. Using common or obvious names may result in name collisions with other components. Name conflicts must be resolved by qualifying the property or method with the type library name:</p>
<pre><code>Private Sub Command1_Click()
   SmallMechanicals.ReversePolarity
   Esalen.ReversePolarity
End Sub
</code></pre>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;The "global" in global objects refers to the fact that all of the object’s properties and methods are available in the global name space of your project. It does <i>not</i> mean that one object is automatically shared by all clients. Each client that uses your component gets its own global object.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"Providing Named Constants for Your Component," later in this chapter, discusses the use of global objects to provide string constants and non-integer constants. Code components are discussed in depth in "Building Code Components."</p>
</BODY>
</HTML>

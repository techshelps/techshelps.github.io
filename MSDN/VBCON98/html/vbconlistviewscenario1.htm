<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ListView Scenario 1: Using the ListView Control With the TreeView Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlistviewscenario1"></a>ListView Scenario 1: Using the ListView Control with the TreeView Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconListViewScenario1C">
</object></p>
<p>
The ListView control is often used in tandem with the TreeView control. (For more information on the TreeView control, see "Using the TreeView control.") The combination allows the end user to "drill down" through several hierarchical layers; the TreeView displays the larger structure, while the ListView displays the individual sets of records as each Node object is selected, as shown in the following illustration:</p>
<p class=label>
<b>TreeView and ListView together</b></p>
<p>
<img src="avtct009.gif" border=0></p>
<p>
In this scenario, whenever a "Publisher" node on the TreeView control is clicked (the NodeClick event), the code populates the ListView control with the book titles owned by the publisher.</p>
<p>
This scenario builds upon the scenario found in "Using the TreeView Control" by further binding the Biblio.mdb to the ListView control. The complete code for the four scenarios can be found in "ListView Scenarios: Complete Code."</p>
<h2>Sample Application: DataTree.vbp</h2>
<p>
The code examples in this topic are taken from the DataTree.vbp sample application, which is listed in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory. </p>
<p>
The following procedure uses these objects:
<ul type=disc>
<li>
Form object named "frmDataTree"<br><br></li>
<li>
TreeView control named "tvwDB"<br><br></li>
<li>
ListView control named "lvwDB"<br><br></li>
<li>
ImageList control named "imlIcons"<br><br></li>
<li>
ImageList control named "imlSmallIcons"</li>
</ul>
<p class=label>
<b>To use a ListView control with the TreeView control</b>
<ol>
<li>
Add a reference to the Data Access Objects (DAO 3.5) to the project.<br><br></li>
<li>
Declare module-level variables for the Database and ListItem objects.<br><br></li>
<li>
Populate two ImageList controls with appropriate images.<br><br></li>
<li>
Assign the ImageList controls to the Icons and SmallIcons properties of the ListView control.</li>
</ol>
<p>
In the Form Load event:
<ol start=5>
<li>
Set the Database object variable to the Biblio.mdb database using the OpenDatabase statement.</li>
</ol>
<p>
In the TreeView control's NodeClick event:
<ol start=6>
<li>
If the Node's Tag property is "Publisher" then call procedures to create ColumnHeaders and populate the ListView control.</li>
</ol>
<h3>Add a Reference to the Data Access Objects (DAO 3.5) to the Project</h3>
<p>
To bind a database to the ListView control, you must first add a reference to the current version of Data Access Objects (DAO).</p>
<h3>Declare Module-Level Variables for the Database and ListItem Objects</h3>
<p>
Since you will want to access the Biblio.mdb database several times during a single session, it's more efficient to keep a single copy of the database open by creating a global Database object. Thereafter, you can access the database without reopening it. In the Declarations section of the form, write:</p>
<pre><code>Private mDbBiblio As Database
</code></pre>
<p>
(The variable is declared as Private, making it a module-level scope variable. If you want the database to be used by other modules, use the Public statement, and rename the variable to reflect its global status, i.e., <code>gDbBiblio</code>.)</p>
<p>
When adding ListItem objects to the ListItems collection, you should use the Set statement with a variable of type ListItem.</p>
<pre><code>Dim TempItem As ListItem
Set TempItem = lvwDB.ListItems.Add()
</code></pre>
<p>
While you can declare the variable whenever you add ListItem objects, it is more efficient to declare a single module-level ListItem object variable once and use it to add all ListItem objects. Again in the Declarations section, write:</p>
<pre><code>Private mTempItem As ListItem
</code></pre>
<h3>Populate Two ImageList Controls with Appropriate Images</h3>
<p>
To use images in the ListView control, you must first populate two ImageList controls with images. Thereafter, at design time you can set the Icons and SmallIcons properties to the two ImageList controls. See "Using the ImageList control" for more information.</p>
<h3>Assign the ImageList Controls to the Icons and SmallIcons Properties of the ListView Control</h3>
<p>
If you do not wish to set the Icon and SmallIcon properties at design time, you can set them at run time, as shown:</p>
<pre><code>lvwDB.Icons = imlIcons
lvwDB.SmallIcons = imlSmallIcons
</code></pre>
<p>
One reason for setting the ImageList controls at run time rather than design time would be to dynamically change the images for a different user. For example, a user with a monochrome screen may want icons that have a higher contrast of elements.</p>
<h3>Set the Database object variable to the Biblio database using the OpenDatabase statement</h3>
<p>
The Form object's Load event can be used to initialize the Database variable. The code for this would be:</p>
<pre><code>Set mDbBiblio = DBEngine.Workspaces(0). _
OpenDatabase("BIBLIO.MDB")
</code></pre>
<p>
After you have successfully initialized the Database object variable, you can freely access it from anywhere within the code module.</p>
<h3>If the Node's Tag property is "Publisher" Then Call Procedures to Create ColumnHeaders and Populate the ListView Control</h3>
<p>
When the TreeView control is populated ("See Using the TreeView Control"), the Tag property of every Node object is set to the name of the database table to which the Node belongs. In this scenario, if the Tag property's value is "Publisher," then the code invokes two user-designed procedures. The first, MakeColumns, creates columns for the ListView control.</p>
<p>
The second function, GetTitles, populates the ListView control with ListItem objects. The function, however, requires an argument, the Key property of the Node object which contains the publisher's unique ID from the "Publishers" table. The GetTitles function uses the Key to search the "Titles" database to return all titles that belong to the publisher. The complete NodeClick code is shown:</p>
<pre><code>Private Sub tvwDB_NodeClick(ByVal Node As Node)
   If Node.Tag = "Publisher" Then 
      MakeColumns ' Create Columnheaders.
      GetTitles Val(Node.Key) ' Make ListItem objects.
End Sub
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;The Key property value cannot be an integer, but must be a unique string. However, the string can be an integer followed by a string, for example "7 ID." The code above uses the Val function which returns only that part of the Key property value which is an integer. Therefore, when setting the Node object's Key property, use a string appended to the PubID field's value. For example:</p>
<pre><code>tvwDB.Nodes(x).Key = rsPublishers!PubID &amp; " ID"

Using the Val function will then return only the original PubID value.</code></pre>
<h3>Next Step: The MakeColumns Procedure</h3>
<p>
To see the MakeColumns function, see "ListView Controls Scenario 2: Using a Procedure to Create ColumnHeaders."</p>
</BODY>
</HTML>

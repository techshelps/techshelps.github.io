<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Manipulating Code with Add-Ins</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmanipulatingcodewithaddins"></a>Manipulating Code with Add-Ins</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconManipulatingCodeWithAddInsC">
</object></p>
<p>
The Visual Basic extensibility model provides you with the ability to view and manipulate code in Visual Basic projects through the CodeModule object. Using the CodeModule object, you can programmatically add or remove code to or from a project, search through code, or alter it. You can browse code to find out how many total lines it has, or in a particular procedure, what the starting and ending lines are, and so on. You can also add, delete, or replace lines of code.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;You should realize the distinction between the CodeModule and CodePane objects. The CodePane object only allows you to view code, but not alter it. The CodeModule object allows you to alter code, but not view it. The two objects work together to allow you to both view and alter code.</p>
<p>
The Members object allows you to view and manipulate code and attributes for procedures in a given module. The attributes pertaining to each procedure change depending on the type of module and procedure you're viewing. To see the attributes of a procedure, choose Procedure Attributes from the Tools menu.</p>
<p>
A designer is not an object per se; it's really a base on which you create your visual interface. You can think of it in the extensibility model as an empty socket which you can plug in different designers. For example, if you are using Visual Basic forms, whenever you create or edit a form, you use the Visual Basic forms designer. If you are creating or editing a UserDocument, you are using the UserDocument designer. When creating or editing a UserControl, you are using the UserControl designer. While designers are programmatically different from each other, though, they may or may not have any visual differences to the user.</p>
<p>
The following code fragments demonstrate how to reference the CodeModule object:</p>
<pre><code>' Clear the code module of all text
Private Sub cmdClearText_Click()
   Dim p As VBProject
   Dim c As VBComponent
   Dim sc As String
   Dim sp As String
   
   Screen.MousePointer = vbHourglass
   sp = cmbProj.Text
   sc = cmbComp.Text
   If sp &lt;&gt; "" And sc &lt;&gt; "" Then
      Set c = _
         vbi.VBProjects.Item(sp).VBComponents.Item(sc)
      c.CodeModule.DeleteLines 1, _
         c.CodeModule.CountOfLines
      SynchCodePaneScroll
   End If
   Screen.MousePointer = vbDefault
End Sub

' Insert text into code module.
Private Sub cmdInsertText_Click()
   Dim p As VBProject
   Dim c As VBComponent
   Dim sc As String
   Dim sp As String
   
   Screen.MousePointer = vbHourglass
   sp = cmbProj.Text
   sc = cmbComp.Text
   If sp &lt;&gt; "" And sc &lt;&gt; "" And txtDisplay.Text _
      &lt;&gt; "" Then
      Set c = _
         vbi.VBProjects.Item(sp).VBComponents.Item(sc)
      c.CodeModule.AddFromString txtDisplay.Text
      SynchCodePaneScroll
   End If
   Screen.MousePointer = vbDefault
End Sub

' Sync up the position of the scrollbar control with 
' current CodePane position.
Private Sub SynchCodePaneScroll()
   vbi.VBProjects.Item(sp).VBComponents.Item(sc)
   Dim cp As CodePane
      Set cp = GetCodePane
      sclCodePane.Max = cp.CodeModule.CountOfLines
      sclCodePane.Value = cp.TopLine - 1
End Sub
</code></pre>
</BODY>
</HTML>

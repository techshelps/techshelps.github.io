<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Navigating Object Models</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconnavigatingobjectmodels"></a>Navigating Object Models</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconNavigatingObjectModelsC">
</object></p>
<p>
Once you understand how to use objects provided by components, you can use any object that is a component exposes to you. Components can range from a simple code component or ActiveX control to large components, such as Microsoft Excel and the Microsoft Data Access Object (DAO) programming interface, which expose many objects.</p>
<p>
Each object exists somewhere in the component's object hierarchy, and you can access the objects in two ways:
<ul type=disc>
<li>
Directly, if the object is externally creatable.<br><br></li>
<li>
Indirectly, if the object is a dependent object. You can get a reference to it from another object higher in the component's hierarchy.</li>
</ul>
<p>
The best way to navigate an object hierarchy is to use the Object Browser (if the component provides an object library).</p>
<h2>Navigating the Object Hierarchy</h2>
<p>
As you've seen, you navigate down an object hierarchy by setting references to dependent objects through externally creatable objects. You can also use a method on a collection object to return an individual object. For more information see "Working with Externally Creatable and Dependent Objects."</p>
<p>
Figure 10.3 shows the object navigation path in a Microsoft Excel application.</p>
<p class=label>
<b>Figure 10.3&nbsp;&nbsp;&nbsp;Navigating down a Microsoft Excel object hierarchy using collections</b></p>
<p>
<img src="avp10003.gif" border=0></p>
<p>
To navigate back up, most applications use the Parent and Application, as shown in Figure 10.4.</p>
<p class=label>
<b>Figure 10.4&nbsp;&nbsp;&nbsp;Navigating back up a Microsoft Excel object hierarchy using the Parent and Application properties</b></p>
<p>
<img src="avp10004.gif" border=0></p>
<h2>Collection Objects</h2>
<p>
Collection objects are containers for groups of other objects. These objects provide an easy way to keep track of a set of objects that are of the same type. For example, a collection of all the Menu objects in an application can be accessed using the Menus collection object. You can use the following code to refer to <i>all</i> the workbooks that are currently loaded in Microsoft Excel:</p>
<pre><code>Application.Workbooks
</code></pre>
<p>
Notice that Workbooks is plural. The standard naming convention for collection objects is the plural of the type of object that makes up the collection. You can iterate through the objects in a collection by using the For Each statement, as follows:</p>
<pre><code>Dim xlBook As Excel.Workbook
.
.
.
For Each xlBook In Application.Workbooks
   ' Display the name of each workbook.
   MsgBox xlBook.FullName
Next xlBook
</code></pre>
<p>
Individual objects in many collections can also be referenced by name or by their index order in the collection. The following example shows how you would refer to Style objects named "Normal," "Example," and "Heading":</p>
<pre><code>xlBook.Styles("Normal")
xlBook.Styles("Example")
xlBook.Styles("Heading")
</code></pre>
<p>
Assuming these objects are the first three objects in the Styles, and that the collection is zero-based, you could also refer to them as follows:</p>
<pre><code>xlBook.Styles(1)      ' Refers the Normal Style object.
xlBook.Styles(2)      ' Refers the Example Style
                     ' object.
xlBook.Styles(3)      ' Refers the Heading Style
                     ' object.
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on working with collection objects, see "Programming with Objects."</p>
</BODY>
</HTML>

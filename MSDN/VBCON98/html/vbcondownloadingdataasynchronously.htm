<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Downloading Data Asynchronously</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondownloadingdataasynchronously"></a>Downloading Data Asynchronously</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDownloadingDataAsynchronouslyC">
</object></p>
<p>
Asynchronous downloading is like the process of having a pizza delivered to your home. You first make a call to a pizza place and place an order. You then go about your business while others make the pizza. When the pizza is ready, a delivery person knocks on your door and informs you that your dinner has arrived.</p>
<p>
With the UserDocument, the equivalent of the phone call is the AsyncRead method. Consequently, the AsyncReadComplete event is the equivalent of the pizza delivery person's knock on your door. This may be easier to understand in a simple scenario: loading a text file into a TextBox control.</p>
<p class=label>
<b>To asynchronously load a Picture object into a PictureBox control</b>
<ol>
<li>
Press ctrl+n to begin a new project.<br><br></li>
<li>
Click <b>ActiveX Document DLL </b>to start a new ActiveX DLL project.<br><br></li>
<li>
In the <b>Project Explorer</b> window, double-click the <b>UserDocument1</b> icon to open its designer.<br><br></li>
<li>
On the Toolbox, click the TextBox control icon and draw a TextBox control on the designer. Set the MultiLine property to True.<br><br></li>
<li>
Double-click the UserDocument designer to open its code window.<br><br></li>
<li>
Add the following code to InitProperties event:<pre><code>Private Sub UserDocument_InitProperties()
Dim strPath As String ' file path
' Change the path to a different text file if you
' wish. If you are on an intranet, you can
' also set the path to another computer on
' which you have access privileges.
strPath = "c:\Windows\Readme.txt"
' Now invoke the AsyncRead method. Set the
' type to vbAsyncTypeFile (a file), and the
' name of the property to Pizza.
UserDocument.AsyncRead strPath, _
vbAsyncTypeFile,&nbsp; "Pizza"
End Sub
</code></pre>
<p class=tl>
The preceding code is the "Pizza call." We gave the third argument (the property name argument) a distinctive name.</P></li>
<li>
Add the following code to the designer. This code is the "knock on the door." It informs you that your "pizza" has arrived, and you should deal with it:<pre><code>Private Sub UserDocument AsyncReadComplete _
(AsyncProp As VB.AsyncProperty)
Dim FileNum as Long

' Use a Select Case statement to determine which
' property is being delivered.
Select Case AsyncProp.PropertyName
Case "Pizza"

' Open the file and read the contents
' into the TextBox
FileNum = FreeFile
Open AsyncProp.Value For Input As FileNum
Text1.Text&nbsp; = Input(LOF(FileNum), FileNum)
Close Filenum
End Select
End Sub
</code></pre>
</li>
<li>
Press f5 to run the project.<br><br></li>
<li>
Internet Explorer (or your default browser) will open and display your .vbd file. If you have used a file on your own computer, the call will happen too quickly for you to perceive any delay. However, if you have access to a larger file on a remote computer, the effect may be more noticeable.</li>
</ol>
<p>
To take our pizza delivery example one step further, imagine that there is a guarantee that the pizza will be delivered within 30 minutes or it’s free. In this case, you might be very interested in the progress of the pizza delivery person. You can check on the progress of your "pizza" by adding code to the AsyncReadProgress event:</p>
<pre><code>Private Sub UserDocument AsyncReadProgress _
(AsyncProp As VB.AsyncProperty)
   ' Use a Select Case statement to read the StatusCode
   Select Case AsynchProp.StatusCode
      Case vbAsynchStatusCodeSendingRequest
         MsgBox "Attempting to connect"
      Case vbAsynchStatusCodeEndDownloadData
         MsgBox "Download complete"
      Case vbAsynchStatusCodeError
         MsgBox "Error – aborting transfer"
         CancelAsynchRead "Pizza"
   End Select
End Sub
</code></pre>
<p>
Now when you run the project, the code in the AsyncReadProgress event will display two message boxes: first when an attempt is made to connect to the file, and then when the transfer is complete. If you set a breakpoint on the Select Case statement and step through the code, you’ll notice that the vbAsynchStatusEndDownloadData status code is returned before the AsyncReadComplete event is fired. This gives you one last chance to cancel or redirect the file (akin to refusing to answer the door when your "Pizza" arrives).</p>
<p>
If an error occurs during the transfer (for example, losing a network connection) the vbAsyncStatusCodeError status code is returned, allowing you to call the CancelAsyncRead method to cancel the transfer and avoid a run time error.</p>
<p>
To see a list of possible status codes returned by the AsyncReadProgress event, look at the AsyncStatusCodeConstants in the Object Browser.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For an in-depth look at the AsyncRead method and the AsyncReadComplete and AsyncReadProgress events, see "Adding Internet Features to Controls" in "Building ActiveX Controls." Although the topic covers the UserControl object, the mechanics are identical.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ProgressBar Scenario 1: Inform User of TreeView Population Status</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconprogressbarscenario1"></a>ProgressBar Scenario 1: Inform User of TreeView Population Status</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconProgressBarScenario1C">
</object></p>
<p>
If you are using a TreeView control to view a database, populating the tree may take some time. In that instance, you can use the ProgressBar control to inform the user of the status of the operation.</p>
<p>
In this scenario, the Biblio.mdb database is loaded into the TreeView control using a Do Until loop. Before the loop begins the ProgressBar control is unhidden. Through each iteration of the loop, the Value property of the ProgressBar control is updated with the PercentPosition property of the Recordset object. When the loop finishes, the ProgressBar control is hidden again.</p>
<h2>Sample Application: DataTree.vbp</h2>
<p>
The code examples in this topic are taken from the DataTree.vbp sample application, which is listed in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory. </p>
<h2>Objects Used</h2>
<p>
The following example uses the following objects:
<ul type=disc>
<li>
Form named "frmTreeView"<br><br></li>
<li>
ProgressBar Control named "prgLoad"<br><br></li>
<li>
TreeView control named "tvwDB"<br><br></li>
<li>
CommandButton control named "cmdLoad"</li>
</ul>
<p class=label>
<b>To show a ProgressBar while a TreeView control is being populated</b></p>
<ol>
<li>
In the Form object's Load event. hide the ProgressBar and set its Max property to 100.</li>
<li>
In the TreeView population code, populate the tree with a Do Until statement.<br><br></li>
<li>
When the loop ends, hide the ProgressBar.</li>
</ol>
<h3>In the Form Object's Load Event, Hide the ProgressBar and Set the Max Property to 100</h3>
<p>
A progress bar is most effective when it is visible only for the duration of the time-intensive process. To this end, you can use the Form object's Load event to set the Visible property of the control to False.</p>
<p>
In this scenario, the Recordset object's PercentPosition property will be used. Since this property returns a number representing a percentage between 0 and 100, the Max property should be set to 100 when the form is initialized. (By default, the Min property is set to 0.) The following code hides the ProgressBar control and sets its Max property to 100.</p>
<pre><code>Private Sub Form_Load()
   prgLoad.Visible = False
   prgLoad.Max = 100
End Sub
</code></pre>
<h3>Populate the Tree with a Do Until Statement</h3>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The following code builds upon the code found in "TreeView Scenario1: Binding the TreeView to the Biblio.MDB Database." The working code can also be found in the DataTree.vbp sample application.</p>
<p>
To populate a TreeView control from a database, you can use a Do Until loop. Schematically, the code might look like this:</p>
<pre><code>' Presuming a Recordset object variable named 
' "rsTitles" has been set to a valid database 
' table.
Do Until rsTitles.EOF
   ' Using the current record, create a Node
   ' object.
   Set mNode = TreeView.Nodes.Add()
   ' Set properties of the Node.
   mNode.Text = rsTitles!Fields(1).Value
   ' Move to the next record.
   rsTitles.MoveNext
Loop 
</code></pre>
<p>
To update the ProgressBar control, use the PercentPosition property of the Recordset object. This property returns the position of the current recordset as a percentage of the total number of records. The code to update the ProgressBar should then be placed somewhere within the loop, as shown:</p>
<pre><code>Do Until rsTitles.EOF
   ' Update the ProgressBar control.
   prgLoad.Value = rsTitles.PercentPosition

   Set mNode = TreeView.Nodes.Add()
   ' Set properties of the Node.
   mNode.Text = rsTitles!Fields(1).Value
   ' Move to the next record.
   rsTitles.MoveNext
Loop
</code></pre>
<h3>When the Loop Ends, Hide the ProgressBar</h3>
<p>
Once the TreeView control has been entirely loaded with Node objects, you can hide the ProgressBar control, as shown:</p>
<pre><code>Private Sub cmdLoad_Click()
   ' Show the ProgressBar control.
   prgLoad.Visible = True

Do Until rsTitles.EOF
      ' Update the ProgressBar control.
      prgLoad.Value = rsTitles.PercentPosition

      Set mNode = TreeView.Nodes.Add()
      ' Set properties of the Node.
      mNode.Text = rsTitles!Fields(1).Value
      ' Move to the next record.
      rsTitles.MoveNext
   Loop
   ' Hide the ProgressBar control.
   prgLoad.Visible = False
End Sub
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Moving Controls Dynamically</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmovingcontrolsdynamically"></a>Moving Controls Dynamically</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconMovingControlsDynamicallyC">
</object></p>
<p>
With Visual Basic, one of the easiest effects to achieve is moving a control at run time. You can either directly change the properties that define the position of a control or use the Move method.</p>
<h2>Using the Left and Top Properties</h2>
<p>
The Left property is the distance between the upper-left corner of the control and the left side of the form. The Top property is the distance between the upper-left corner of the control and the top of the form. Figure 12.10 shows the Left and Top properties of a control.</p>
<p class=label>
<b>Figure 12.10&nbsp;&nbsp;&nbsp;The Left and Top properties</b></p>
<p>
<img src="avp12010.gif" border=0></p>
<p>
You can move a control by changing the settings of its Left and Top properties with statements such as these:</p>
<pre><code>txtField1.Left = txtField1.Left + 200
txtField1.Top = txtField1.Top – 300
</code></pre>
<h2>Moving a Line Control</h2>
<p>
As mentioned previously, line controls don’t have Left or Top properties. Instead, you use special properties to control the position of line controls on a form. The following table lists these properties and how they determine the position of a line control.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Property</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>X1</td>
<td width=72%>The x-coordinate of the start of the line. The coordinate is given in current scale units. The start of the line is the end created when you start drawing.</td>
</tr>
<tr valign=top>
<td width=28%>Y1</td>
<td width=72%>The y-coordinate of the start of the line.</td>
</tr>
<tr valign=top>
<td width=28%>X2</td>
<td width=72%>The x-coordinate of the end of the line. The end of the line is the end created when you stop drawing.</td>
</tr>
<tr valign=top>
<td width=28%>Y2</td>
<td width=72%>The y-coordinate of the end of the line.</td>
</tr>
</table><br>
<p>
The Jumpy Line demo of the Blanker application randomly changes the position of a line control on the DemoForm using these statements:</p>
<pre><code>' Set random X position for 1st line end.
linLineCtl.X1 = Int(DemoForm.Width * Rnd)
' Set random Y position for 1st line end.
linLineCtl.Y1 = Int(DemoForm.Height * Rnd)
' Set random X position for 2nd line end.
linLineCtl.X2 = Int(DemoForm.Width * Rnd)
' Set random Y position for 2nd line end.
linLineCtl.Y2 = Int(DemoForm.Height * Rnd)
' Clear stray pixels from moving line.
Cls
' Pause display briefly before next move.
Delay
</code></pre>
<h2>Using the Move Method</h2>
<p>
Changing the Left and Top or X and Y properties produces a jerky effect as the control first moves horizontally and then vertically. The Move method produces a smoother diagonal movement.</p>
<p>
The syntax for the Move method is:</p>
<p>
[<i>object</i>.]<b>Move</b> <i>left</i> [, <i>top</i>[, <i>width</i>[, <i>height</i>] ] ]</p>
<p>
The <i>object</i> is the form or control to be moved. If <i>object</i> is omitted, the current form moves. The <i>left</i> and <i>top</i> arguments are the new settings for the Left and Top properties of <i>object</i>, while <i>width</i> and <i>height</i> are new settings for its Width and Height properties. Only <i>left</i> is required, but to specify other arguments, you must include all arguments that appear in the argument list before the argument you want to specify.</p>
<h3>Absolute Movement</h3>
<p>
<i>Absolute movement</i> occurs when you move an object to specific coordinates in its container. The following statement uses absolute movement to move a control named txtField1 to the coordinates (100, 200):</p>
<pre><code>txtField1.Move 100, 200
</code></pre>
<h3>Relative Movement</h3>
<p>
<i>Relative movement </i>occurs when you move an object by specifying the distance it should move from its current position. The following statement uses relative movement to move txtField1 to a position 100 twips down and to the right of its current position:</p>
<pre><code>txtField1.Move txtField1.Left + 100, txtField1.Top _
   + 100
</code></pre>
<p>
This section shows control movement in the Blanker sample application. The Rebound demo moves a picture box diagonally around the form, so the picture box appears to "bounce" off the sides of the form. This demo uses a picture box instead of an image control because the image control flickers as the movement causes it to repaint.</p>
<p>
Figure 12.11 shows the main form of the Blanker application (DemoForm) and the picture box used in this example.</p>
<p class=label>
<b>Figure 12.11&nbsp;&nbsp;&nbsp;Picture box (picBall) in the Blanker application</b></p>
<p>
<img src="avp12011.gif" border=0></p>
<p>
The name of the picture box is picBall. This control begins moving around the form after you choose the Rebound command from the Options menu and then click the Start Demo button. The event procedure for this command button then calls the CtlMoveDemo procedure.</p>
<p>
The CtlMoveDemo procedure randomly selects a starting direction from one of these four possibilities:
<ul type=disc>
<li>
Left and up<br><br></li>
<li>
Right and up<br><br></li>
<li>
Left and down<br><br></li>
<li>
Right and down</li>
</ul>
<p>
The picBall picture box moves along the chosen direction until the control reaches one of the four edges of the form. Then the picture box changes direction away from the edge it has reached; the variable <code>Motion</code> controls the direction. For example, when the picture box is moving left and up, this portion of the procedure changes the value of <code>Motion</code> and directs the code to move picBall in another direction.</p>
<p>
The following statements come from the CtlMoveDemo procedure in the Blanker application:</p>
<pre><code>Select Case Motion
Case 1
   ' If motion is left and up, move the control 
   '   20 twips.
   picBall.Move picBall.Left - 20, picBall.Top - 20
   ' If control touches left edge, change motion 
   '   to right and up.
   If picBall.Left &lt;= 0 Then
      Motion = 2
   ' If control touches top edge, change motion to 
   '   left and down.
   ElseIf picBall.Top &lt;= 0 Then
      Motion = 4
   End If
</code></pre>
<p>
Notice that the line of code that moves picBall subtracts 20 twips from the current values of its Left and Top properties to establish the new location of the control. This ensures that the control always moves relative to its current position.</p>
<p>
The speed and smoothness of the control’s movement depend on the number of twips (or other units) used in the Move method. Increasing the number of twips increases the speed but decreases the smoothness of motion. Decreasing the number of twips decreases the speed but improves the smoothness of the control’s motion.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For additional information on the Move method, see "Move Method" in the <i>Language Reference</i>.</p>
</BODY>
</HTML>

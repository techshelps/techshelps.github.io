<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controls Scenario: Adding and Deleting Controls in a Control Array</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcontrolsscenarioaddingdeletingcontrolsincontrolarray"></a>Controls Scenario: Adding and Deleting Controls in a Control Array</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconControlsScenarioAddingDeletingControlsInControlArrayC">
</object></p>
<p>
The control array example demonstrates how controls — in this case, option buttons — are added and deleted at run time. The example allows the user to add option buttons that change the background color of a picture box.</p>
<p>
Start with a form, and then draw a picture box, a label, two option buttons, and three command buttons, as shown in Figure 7.3.</p>
<p class=label>
<b>Figure 7.3&nbsp;&nbsp;&nbsp;Adding controls at run time</b></p>
<p>
<img src="avp07058.gif" border=0></p>
<p>
The following table lists the property settings for the objects in the application.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Object</b></td>
<td class=label width=34%><b>Property</b></td>
<td class=label width=35%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=31%>Form</td>
<td width=34%>Caption</td>
<td width=35%>Control Array Example</td>
</tr>
<tr valign=top>
<td width=31%>Picture box</td>
<td width=34%>Name</td>
<td width=35%>picDisplay</td>
</tr>
<tr valign=top>
<td width=31%>Label</td>
<td width=34%>Caption</td>
<td width=35%>Select an option button to display a new color</td>
</tr>
<tr valign=top>
<td width=31%>Option1</td>
<td width=34%>Name<br>
Index</td>
<td width=35%>optButton<br>
0</td>
</tr>
<tr valign=top>
<td width=31%>Option2</td>
<td width=34%>Name<br>
Index</td>
<td width=35%>optButton<br>
1</td>
</tr>
<tr valign=top>
<td width=31%>First command button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>cmdAdd<br>
&amp;Add</td>
</tr>
<tr valign=top>
<td width=31%>Second command button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>cmdDelete<br>
&amp;Delete</td>
</tr>
<tr valign=top>
<td width=31%>Third command button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>cmdClose<br>
&amp;Close</td>
</tr>
</table><br>
<h2>Events in the Control Array Application</h2>
<p>
Next, you need to add the event procedures for the option buttons and command buttons. Start by adding the form declaration:</p>
<pre><code>Dim MaxId As Integer
</code></pre>
<p>
The Click event procedure is shared by all the option buttons:</p>
<pre><code>Private Sub optButton_Click (Index As Integer)
   picDisplay.BackColor = QBColor(Index + 1)
End Sub
</code></pre>
<p>
New option buttons are added by the Click event procedure for the Add command button. In this example, the code checks that no more than ten option buttons are loaded before the Load statement is executed. Once a control is loaded, its Visible property must be set to True.</p>
<pre><code>Private Sub cmdAdd_Click ()
   If MaxId = 0 Then MaxId = 1   ' Set total option
                                 ' buttons.
   If MaxId &gt; 8 Then Exit Sub   ' Only ten buttons
                                 ' allowed.
   MaxId = MaxId + 1         ' Increment button count.
   Load optButton(MaxId)      ' Create new button.
   optButton(0).SetFocus      ' Reset button selection.
   ' Set new button under previous button.
   optButton(MaxId).Top = optButton(MaxId - 1)._
   Top + 400
   optButton(MaxId).Visible = True   ' Display new
                                 ' button.
   optButton(MaxId).Caption = "Option" &amp; MaxId + 1
End Sub
</code></pre>
<p>
Option buttons are removed by the Click event procedure for the Delete command button:</p>
<pre><code>Private Sub cmdDelete_Click ()
   If MaxId &lt;= 1 Then Exit Sub   ' Keep first two
                                 ' buttons.
   Unload optButton(MaxId)      ' Delete last button.
   MaxId = MaxId - 1            ' Decrement button count.
   optButton(0).SetFocus      ' Reset button selection.
End Sub
</code></pre>
<p>
The Close button Click event ends the application:</p>
<p>
Private Sub cmdClose_Click ()</p>
<pre><code>   Unload Me
End Sub
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Visual Basic Data Sources</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconvisualbasicdatasources"></a>Visual Basic Data Sources</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconVisualBasicDataSources_C">
</object></p>
<p>
As the term implies, a <i>data source </i>is a readily accessible object that provides data to any data consumer (any class or control that can be bound to a source of external data). In past versions of Visual Basic, data sources included the intrinsic Data control and the RemoteData Control. Visual Basic 6.0 introduces several new data sources that enable you to create rich applications to view and edit data. For example, the Data Environment designer allows you to create <i>hierarchical recordsets</i>, or data from several related tables in a tree-view format. In addition to new data sources, you can create your own data source by setting the class module's DataSourceBehavior property to vbDataSource.</p>
<h3>New Data Sources</h3>
<p>
Visual Basic's new richer set of data sources includes:
<ul type=disc>
<li>
Data-Aware Class Modules<br><br></li>
<li>
Data-Aware User Controls<br><br></li>
<li>
Data Environment<br><br></li>
<li>
ADO Recordset Objects<br><br></li>
<li>
ADO Data Control</li>
</ul>
<h3>Creating Data Sources Using Data-Aware Classes and User Controls</h3>
<p>
Visual Basic enables you to create your own data sources. Using new features such as the DataBindingBehavior and DataSourceBehavior properties of the class module, you can encapsulate the methods, properties, and events necessary to create a data source or data consumer that accesses data from any kind of database. For details on creating data sources and data consumers using a data-aware class, see <a href="vbconcreatingdata-awareclasses.htm">Creating Data-Aware Classes</a>.</p>
<p>
In addition to creating data-aware classes, you can also create your own data-aware user controls. Such a control could resemble the new ADO Data Control and be customized to your needs. For a step-by-step example of creating a data-aware user control, see <a href="vbconcreatingmydatacontrolproject.htm">Creating the MyDataControl Project</a>.</p>
<h3>The Data Environment Designer</h3>
<p>
The Data Environment is a new feature that allows you to create hierarchical cursors. A hierarchical cursor is a unique structure of parent and child recordsets. In general, a hierarchical cursor mirrors the structure of related tables in a relational database. For example, the Northwind database has a table named "Products" that contains a field named "SupplierID." That field contains unique IDs from the related table named "Suppliers." Using the Data Environment designer, you can create a hierarchical cursor that can be displayed in a control such as the Hierarchical FlexGrid control.</p>
<p>
For details about hierarchical cursors, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscHierarchicalCursorsDataShaping">
</object><a href=JavaScript:alink_2.Click()>Hierarchical Cursors and Data Shaping</a>. For details about the DataEnvironment, see <a href="vbconusingdataenvironmentdesigner.htm">About the Data Environment Designer</a>.</p>
<h3>Creatable ADO Recordsets</h3>
<p>
Using the ActiveX Data Object Recordset (ADOR) library, you can create ADO recordsets in memory, as shown below:</p>
<pre><code>Private rs As New ADODB.Recordset ' variable for recordset

Private Sub CreateRecordset()
With rs
.Fields.Append "ID", adInteger
.Fields.Append "Item", adBSTR, 255
.CursorType = adOpenStatic
.LockType = adLockOptimistic
.Open ' No connection object needed.
End With
Dim i As Integer

   For i = 1 To 100
      rs.AddNew
      rs!ID= i
      rs!Item = "thing " &amp; i
      rs.Update
   Next i
   rs.MoveFirst
End Sub
</code></pre>
<p>
Once such a recordset is filled with data, set the DataSource property of a data consumer to the recordset, as shown below:</p>
<pre><code>' myControl is a data-bound user control and rsTempData is a temporary
' recordset created using ADODB, and filled from some data store.
Set myControl.DataSource = rs 
</code></pre>
<p>
For an example of creating ADO recordsets in code, see <a href="vbconcreatingdatasource.htm">Creating a Data Source</a>. Another example of creating a recordset and using it as a data source for the DataGrid control can be found in <a href="vbconusingdatagridcontrolwithdataclassmodule.htm">Using the DataGrid Control with a Class Module</a>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing DLLs and the Windows API</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaccessingdllswindowsapi"></a>Accessing DLLs and the Windows API</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAccessingDLLsWindowsAPIC">
</object></p>
<p>
When you need capabilities that go beyond the core language and controls provided with Microsoft Visual Basic, you can make direct calls to procedures contained in <i>dynamic-link libraries</i> (DLLs). By calling procedures in DLLs, you can access the thousands of procedures that form the backbone of the Microsoft Windows operating system, as well as routines written in other languages.</p>
<p>
As their name suggests, DLLs are libraries of procedures that applications can link to and use at run time rather than link to statically at compile time. This means that the libraries can be updated independently of the application, and many applications can share a single DLL. Microsoft Windows itself is comprised of DLLs, and other applications call the procedures within these libraries to display windows and graphics, manage memory, or perform other tasks. These procedures are sometimes referred to as the Windows API, or application programming interface.</p>
<h2>DLLs or Automation?</h2>
<p>
Another way to bring more power into Visual Basic is through Automation (formerly called OLE Automation). Using Automation is simpler than calling routines in a DLL, and it doesn't create the same level of risk that you'll hit when going straight to the Windows API. By using Automation, you can get programmatic access to a wide range of objects exposed by external applications.</p>
<p>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;For additional information on Automation, see "Programming with Components" in the <i>Programmer's Guide.</i></p>
<h2>Topics</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=6%><a href="vbconusingdllprocedureinyourapplication.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconusingdllprocedureinyourapplication.htm">Using a DLL Procedure in Your Application</a><p>
An introduction to calling a DLL procedure from within a Visual Basic application.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconaccessingmicrosoftwindowsapi.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconaccessingmicrosoftwindowsapi.htm">Accessing the Microsoft Windows API</a><p>
How to use the API Viewer application to find procedures in the Win32api.txt file.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbcondeclaringdllprocedure.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbcondeclaringdllprocedure.htm">Declaring a DLL Procedure</a><p>
An overview of syntax, clauses, and arguments that make up a Declare statement in Visual Basic.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconpassingstringstodllprocedure.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconpassingstringstodllprocedure.htm">Passing Strings to a DLL Procedure</a><p>
How to work with String data types in DLL procedures.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconpassingarraystodllprocedure.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconpassingarraystodllprocedure.htm">Passing Arrays to a DLL Procedure</a><p>
How to work with arrays in DLL procedures.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconpassinguserdefinedtypestodllprocedure.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconpassinguserdefinedtypestodllprocedure.htm">Passing User-Defined Types to a DLL Procedure</a><p>
How to work with user-defined types (structures) in DLL procedures.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconpassingfunctionpointerstodllprocedurestypelibraries.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconpassingfunctionpointerstodllprocedurestypelibraries.htm">Passing Function Pointers to DLL Procedures and Type Libraries</a><p>
An introduction to using function pointers, callback procedures, and subclassing in Visual Basic.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconpassingothertypesofinformationtodllprocedure.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconpassingothertypesofinformationtodllprocedure.htm">Passing Other Types of Information to a DLL Procedure</a><p>
How to work with null values, properties, handles, and variants in DLL procedures.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconconvertingcdeclarationstovisualbasic.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconconvertingcdeclarationstovisualbasic.htm">Converting C Declarations to Visual Basic</a><p>
A table of data type conversions between the Visual Basic and C languages.</p>
</td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Locale-Aware Functions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlocaleawarefunctions"></a>Locale-Aware Functions</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconLocaleAwareFunctionsC">
</object></p>
<p>
Each locale has different conventions for displaying dates, time, numbers, currency, and other information. It is not necessary to know all the conventions of your users' locales. In Visual Basic, many functions use the user's system locale, which uses the Control Panel settings provided by the operating system to automatically determine the conventions at run time. These functions are called <i>locale-aware</i> functions.</p>
<h3>Print Method</h3>
<p>
Even though the Print method provides little flexibility for different output formats, it does use the user's system locale. In the following example, dates are printed using the correct short date format, numbers are printed with the correct decimal separator, and currencies are printed with the correct symbol:</p>
<pre><code>MyDate = #11/24/1997#
MyNumber = 26.5
Money = 1636.32
MyMoney = Format(Money, "###,###.##")
Debug.Print MyDate, MyNumber, MyMoney
</code></pre>
<p>
When this code is run in an English/U.S. locale, the following output appears in the Immediate window:</p>
<pre><code>11/24/1997   26.5   1,636.32
</code></pre>
<p>
When this code is run in a German/Germany locale, the following output appears in the Immediate window:</p>
<pre><code>24/11/1997   26,5   1.632,32
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Print Method" in the <i>Language Reference</i>.</p>
<h3>Format Function</h3>
<p>
The Format function can accept format codes, but format codes always produce the same type of output regardless of the user's locale. For example, the format code "mm-dd-yy" is not appropriate for a user in Belgium, where the day precedes the month.</p>
<p>
For more flexibility, the Format function also provides named formats that will automatically determine which conventions to use at run time, including General Date, Long Date, Short Date, and Long Time. Using named formats produces output that is based on the user's system locale. The named formats can even generate output in the user's native language, including the names of months and days of the week. The following example illustrates this:</p>
<pre><code>MyDate = #8/22/1997 5:22:20 PM#
NewDate1 = Format(MyDate, "Medium Date")
NewDate2 = Format(MyDate, "Short Date")
NewDate3 = Format(MyDate, "Long Date")
NewDate4 = Format(MyDate, "General Date")
Debug.Print NewDate1, NewDate2, NewDate3, NewDate4
</code></pre>
<p>
When this code is run in an English/U.S. locale, the following output appears in the Immediate window:</p>
<pre><code>22-Aug-97 8/22/97      Monday, August 22, 1997   8/22/97 5:22:20 PM
</code></pre>
<p>
When this code is run in a French/France locale, the following output appears in the Immediate window:</p>
<pre><code>22-août-97   22/08/97      lundi 22 août 1997      22/08/97 17:22:20f
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Format Function" in the <i>Language Reference</i>.</p>
</BODY>
</HTML>

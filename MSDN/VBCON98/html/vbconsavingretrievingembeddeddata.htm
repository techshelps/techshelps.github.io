<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Saving and Retrieving Embedded Data</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconsavingretrievingembeddeddata"></a>Saving and Retrieving Embedded Data</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconSavingRetrievingEmbeddedDataC">
</object></p>
<p>
Data associated with an embedded object is not persistent; that is, when a form containing an OLE container control is closed, any changes to the data associated with that control are lost. To save updated data from an object to a file, you use the OLE container control's SaveToFile method. Once the data has been saved to a file, you can open the file and restore the object.</p>
<p>
If the object is linked (OLEType = 0-Linked), then only the link information and an image of the data is saved to the specified file. The object's data is maintained by the application that created the object. If a user wants to save changes to a linked file, the user must choose the Save command from the ActiveX component's File menu because the SaveToFile<b> </b>method applies only to embedded objects.</p>
<p>
If the object is embedded (OLEType = 1-Embedded), the object's data is maintained by the OLE container control and can be saved by your Visual Basic application.</p>
<p>
Objects in the OLE container control can be saved only to open, binary files. </p>
<p class=label>
<b>To save the data from an object to a file</b>
<ol>
<li>
Open a file in binary mode.<br><br></li>
<li>
Use the SaveToFile method.</li>
</ol>
<p>
The cmdSaveObject_Click event procedure illustrates these steps:</p>
<pre><code>Private Sub cmdSaveObject_Click ()
   Dim FileNum as Integer
   ' Get file number.
   FileNum = FreeFile
   ' Open file to be saved.
   Open "TEST.OLE" For Binary As #FileNum
   ' Save the file.
   oleObj1.SaveToFile FileNum
   ' Close the file.
   Close #FileNum
End Sub
</code></pre>
<p>
Once an object has been saved to a file, it can be opened and displayed in an OLE container control.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you use the SaveToFile or ReadFromFile methods, the file position is located immediately following the object. Therefore, if you save multiple objects to a file, you should read them in the same order you write them.</p>
<p class=label>
<b>To read data from a file into an OLE container control</b>
<ol>
<li>
Open the file in binary mode.<br><br></li>
<li>
Use the ReadFromFile method on the object.</li>
</ol>
<p>
The cmdOpenObject_Click event procedure illustrates these steps:</p>
<pre><code>Private Sub cmdOpenObject_Click ()
   Dim FileNum as Integer
   ' Get file number.
   FileNum = FreeFile
   ' Open the file.
   Open "TEST.OLE" For Binary As #FileNum
   ' Read the file.
   oleObj1.ReadFromFile FileNum
   ' Close the binary file.
   Close #FileNum
End Sub
</code></pre>
<p>
The Updated event is invoked each time the contents of an object is changed. This event is useful for determining if an object's data has been changed because it was last saved. To do this, set a global variable in the Updated event indicating the object needs to be saved. When you save the object, reset the variable.</p>
</BODY>
</HTML>

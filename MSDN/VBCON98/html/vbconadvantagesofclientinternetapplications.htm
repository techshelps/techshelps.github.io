<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Advantages of DHTML applications</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconadvantagesofclientinternetapplications"></a>Advantages of DHTML Applications</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAdvantagesOfClientInternetApplicationsC">
</object></p>
<p>
Building a DHTML application in Visual Basic provides several advantages over other methods of Internet development. DHTML applications give you:
<ul type=disc>
<li>
<b>Dynamic HTML</b>. When you create a DHTML application, you have full access to the richness of <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="IDH_vbdefDynamicHTML">
</object><a href=JavaScript:alink_2.Click()>Dynamic HTML</a>, integrated with the power of Visual Basic code and controls. See "Dynamic HTML in Visual Basic" for more information about the Dynamic HTML features you can access.<br><br></li>
<li>
<b>Lessened server load</b>. DHTML applications conserve server resources because each request or user action does not have to be routed through the Web server.<br><br></li>
<li>
<b>Fewer refreshes, faster responses</b>. When an end user's actions initiate changes to a typical Web page, the browser must refresh the page from the server. In a DHTML application, the browser can process user data, make changes to the page's layout and appearance, and process code all without refreshing the page.<br><br></li>
<li>
<b>Dynamic interaction</b>. Visual Basic code on a Web page can directly manipulate any element on the page and create and manage new elements on the fly, allowing for truly dynamic user interfaces.<br><br></li>
<li>
<b>Improved state management</b>. Typically, HTML pages are <i>stateless</i> — that is, no information about an HTTP request is maintained after the response is received from the server. Visual Basic DHTML applications allow you to store state between requests, without using the server. Therefore, multiform or multipage applications are possible without requiring server interaction, complex URL-based state, or cookies.<br><br></li>
<li>
<b>Offline capability</b>. For a DHTML application, users can browse to and use a DHTML application on their corporate intranet. Later, when disconnected, the same users can still make use of their Web-based application through the browser’s cached storage.<br><br></li>
<li>
<b>Code security</b>. When you embed scripts within an HTML page, anyone can access your page, read the script, and make changes to it. Using Visual Basic to develop your DHTML application, your code is compiled, is not part of the HTML page itself, and cannot be tampered with as easily.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information about HTTP, see "Understanding Internet Basics" in "Developing Internet Applications."</p>
</BODY>
</HTML>

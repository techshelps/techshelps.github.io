<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Collections of Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingcollectionsofobjects"></a>Creating Collections of Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingCollectionsOfObjectsC">
</object></p>
<p>
Collections provide a useful way to keep track of objects. Unlike arrays, Collection objects don't have to be re-dimensioned as you add and remove members.</p>
<p>
For example, you might want to keep track of every control that was dropped onto a particular control, and not allow any control to be dropped more than once. You can do this by maintaining a Collection that contains references to each control that has been dropped:</p>
<pre><code>Private Sub List1_DragDrop(Source As VB.Control, _
X As Single, Y As Single)
   Dim vnt As Variant
   Static colDroppedControls As New Collection
   For Each vnt In colDroppedControls
      ' If the dropped control is in the collection,
      ' it's already been dropped here once.
      If vnt Is Source Then
         Beep
         Exit Sub
      End If
   Next
   ' Save a reference to the control that was dropped.
   colDroppedControls.Add Source
   ' Add the name of the control to the list box.
   List1.AddItem Source.Name
End Sub
</code></pre>
<p>
This example uses the Is operator to compare the object references in the <code>colDroppedControls</code> collection with the event argument containing the reference to the dropped control. The Is operator can be used to test the identity of Visual Basic object references: If you compare two different references to the same object, the Is operator returns True.</p>
<p>
The example also uses the Add method of the Collection object to place a reference to the dropped control in the collection.</p>
<p>
Unlike arrays, Collections are objects themselves. The variable <code>colDroppedControls</code> is declared As New, so that an instance of the Collection class will be created the first time the variable is referred to in code. The variable is also declared Static, so that the Collection object will not be destroyed when the event procedure ends.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Is Operator" in the <i>Language Reference</i>.</p>
<p>
Properties and methods of the Collection object are discussed in "The Visual Basic Collection Object" later in this chapter.</p>
<p>
To compare the code above with the code required to use arrays, see "Creating Arrays of Objects," earlier in this chapter.</p>
<p>
To learn how to create more robust collections by wrapping the Collection object in your own collection class, see "Creating Your Own Collection Classes" later in this chapter.</p>
<p>
"What You Need to Know About Objects in Visual Basic," earlier in this chapter, describes how objects are created and destroyed.</p>
</BODY>
</HTML>

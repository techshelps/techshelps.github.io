<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using File-System Controls Together</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingfilesystemcontrolstogether"></a>Using File-System Controls Together</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingFileSystemControlsTogetherC">
</object></p>
<p>
If you use a combination of file-system controls, you can synchronize the information they display. For example, if you have a drive list box, a directory list box, and a file list box with the default names Drive1, Dir1, and File1, the sequence of events might work like this:
<ol>
<li>
The user selects a drive in the Drive1 list box.<br><br></li>
<li>
A Drive1_Change event is generated, and the display in Drive1 is updated to reflect the new drive.<br><br></li>
<li>
Code in the Drive1_Change event procedure assigns the new selection (the <code>Drive1.Drive</code> property) to the Path property of the Dir1 list box with the following statements:<pre><code>Private Sub Drive1_Change ()
 &nbsp; Dir1.Path = Drive1.Drive
End Sub
</code></pre>
</li>
<li>
The assignment to the Path property generates a Dir1_Change event and updates the display in Dir1 to reflect the current directory of the new drive. <br><br></li>
<li>
Code in the Dir1_Change event procedure assigns the new path (the <code>Dir1.Path</code> property) to the <code>File1.Path</code> property of the File1 list box:<pre><code>Private Sub Dir1_Change ()
 &nbsp; File1.Path = Dir1.Path
End Sub
</code></pre>
</li>
<li>
The assignment to the <code>File1.Path</code> property causes the display in the File1 list box to reflect the Dir1 path specification.</li>
</ol>
<p>
The event procedures you use and the properties you change depend on the way your application uses the combination of file-system controls. The code in "File-System Controls Scenario: A File Seeker Application" illustrates the synchronization of controls described here.</p>
</BODY>
</HTML>

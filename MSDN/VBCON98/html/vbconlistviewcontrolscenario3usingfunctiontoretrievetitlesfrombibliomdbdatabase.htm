<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ListView Scenario 3: Using a Procedure to Retrieve Titles from the Biblio.mdb Database</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlistviewcontrolscenario3usingfunctiontoretrievetitlesfrombibliomdbdatabase"></a>ListView Scenario 3: Using a Procedure to Retrieve Titles from the Biblio.mdb Database</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconListViewControlScenario3UsingFunctionToRetrieveTitlesFromBibliomdbDatabaseC">
</object></p>
<p>
The code examples in this topic are taken from the DataTree.vbp sample application which is listed in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory. </p>
<p>
In scenario, "Using the ListView Control with the TreeView Control," the ListView control and the TreeView control are shown working in tandem. The TreeView control's NodeClick event is used to call two procedures, one to create ColumnHeader objects, and a second to populate the ListView control.</p>
<p>
This scenario continues by developing the second procedure, called "GetTitles," that populates the ListView control with titles from the Biblio.mdb database.</p>
<p>
The following example uses these objects:
<ul type=disc>
<li>
Form object named "frmDataTree"<br><br></li>
<li>
TreeView control named "tvwDB"<br><br></li>
<li>
ListView control named "lvwDB"<br><br></li>
<li>
ImageList control named "imlIcons"<br><br></li>
<li>
ImageList control named "imlSmallIcons"</li>
</ul>
<p class=label>
<b>To create a procedure that populates the ListView control</b></p>
<ol>
<li>
In the GetTitles procedure, clear the ListItems collection with the Clear method.<br><br></li>
<li>
Use a query to create a "Titles" recordset.<br><br></li>
<li>
Use the Do Until statement to create a ListItem object for each record in the recordset.</li>
</ol>
<h3>GetTitles Procedure: Clear the ListItems collection with the Clear method</h3>
<p>
Each time you invoke the GetTitles procedure, you will query the Biblio.mdb database to create a new collection of ListItem objects. The first thing to do, however, is to clear the old collection with the Clear method:</p>
<pre><code>lvwDB.ListItems.Clear ' Clears all ListItems.
</code></pre>
<h3>Use a query to create a "Titles" recordset</h3>
<p>
When the GetTitles procedure is invoked, the Key property's value of the Node property is passed to the procedure. Since the Key property contains the unique number that identifies the publisher (the PubID field), this value can be used to search the Titles table for all matches with the same PubID value.</p>
<p>
The most efficient method to accomplish this is to create a query that finds only those records which have the same PubID value in the Titles table's PubID field. This query is:</p>
<pre><code>Set rsTitles = mDbBiblio.OpenRecordset _
("select * from Titles where PubID = " &amp; PubID)
</code></pre>
<h3>Use the Do Until Statement to Create a ListItem Object for Each Record in the Recordset</h3>
<p>
Once the recordset is created, you can add to the ListItem collection. The following code iterates through this recordset to create a ListItem object for every record, setting the Text and SubItems properties with data from the recordset. The complete procedure is shown here:</p>
<pre><code>Private Sub GetTitles(PubID)
   ' Clear the old titles.
   lvwDB.ListItems.Clear
   ' Declare object variable of type Recordset
   Dim rsTitles As Recordset
   ' While on this record, create a recordset using a 
   ' query that finds only titles that have the same 
   ' PubID. For each record in this recordset, add a 
   ' ListItem object to the ListView control, and set 
   ' the new object's properties with the record's 
   ' Title, ISBN and Author fields.
   Set rsTitles = mDbBiblio.OpenRecordset _
   ("select * from Titles where PubID = " &amp; PubID)

   Do Until rsTitles.EOF
   ' Add ListItem.
         Set mItem = lvwDB.ListItems.Add() 
         mItem.Text = rsTitles!TITLE 
         mItem.SmallIcon = "smlBook" 
         mItem.Icon = "book"   
         mItem.Key = rsTitles!ISBN
         ' Use a function to get the author and set
         ' the SubItems(1) property.
         mItem.SubItems(1) = GetAuthor(rsTitles!ISBN)
         If Not IsNull(rsTitles![Year Published]) Then
            mItem.SubItems(2) =&nbsp; _
            rsTitles![Year Published]
         End If
         mItem.SubItems(3) = rsTitles!ISBN
         rsTitles.MoveNext
   Loop
End Sub
</code></pre>
</BODY>
</HTML>

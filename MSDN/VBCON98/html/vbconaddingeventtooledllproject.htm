<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding a Form to the ThingDemo Project</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingeventtooledllproject"></a>Adding a Form to the ThingDemo Project</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingEventToOLEDLLProjectC">
</object></p>
<p>
In-process components can serve as libraries of procedures and dialog boxes, saving you programming time and giving your applications a consistent look and feel.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX DLL. It begins with the topic <a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</p>
<p>
The procedures in this topic demonstrate the way objects can be used to control modal or modeless dialog boxes. The same form is used for both cases, as shown in Figure 2.3.</p>
<p class=label>
<b>Figure 2.3&nbsp;&nbsp;&nbsp;The dlgDemo dialog box</b></p>
<p>
<img src="avtcm016.gif" border=0></p>
<p class=label>
<b>To add a form to the ThingDemo project</b>
<ol>
<li>
In the <b>Project Explorer </b>window, click <b>ThingDemo</b> to make it the active project.<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Whenever you’re working with a project group, make sure the right project is active before adding a new module.</p></li>
<li>
On the <b>Project</b> menu, click <b>Add Form</b> to open the <b>Add Form</b> dialog box. Double-click the <b>Form</b> icon to add a form.</li>
</ol>
<p>
Design the form as you would any Visual Basic form, and save it as ThingDemo_dlgDemo.frm. The following table lists property settings for the objects in the form.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Object</b></td>
<td class=label width=34%><b>Property</b></td>
<td class=label width=35%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=31%>Form</td>
<td width=34%>Name<br>
BorderStyle<br>
Caption</td>
<td width=35%>dlgDemo <br>
Fixed Dialog<br>
Dialog Box</td>
</tr>
<tr valign=top>
<td width=31%>TextBox</td>
<td width=34%>Name<br>
Text</td>
<td width=35%>txtDemo<br>
(Empty)</td>
</tr>
</table><br>
<p>
The dialog box is not invoked directly from the client, because forms are private classes. Clients cannot create instances of private classes, and you should never pass instances of private classes to client applications. This is discussed in "Data Types Used in Properties and Methods" in "General Principles of Component Design."</p>
<p>
To display the dialog box, clients will call the ShowDialog method of a global Dialogs object, which will create and show the dlgDemo form.</p>
<p class=label>
<b>To add code to the dlgDemo form</b>
<ol>
<li>
Double-click on dlgDemo to open its code window, and add the following code.<pre><code>' Declare an event.
Event NotifyClients(ByVal Data As String)
</code></pre>
</li>
<li>
Add the following code to the Change event of the text box. When the contents of the text box change, the NotifyClients event is raised with the new contents as its argument.<pre><code>Private Sub txtDemo_Change()
 &nbsp; RaiseEvent NotifyClients(txtDemo.Text)
End Sub
</code></pre>
</li>
<li>
To prevent the dialog box from being closed without the knowledge of the Dialogs object, place the following code in the QueryUnload event procedure.<pre><code>Private Sub Form_QueryUnload(Cancel As Integer, _
 &nbsp;&nbsp;&nbsp;&nbsp; UnloadMode As Integer)
 &nbsp; ' If the Close button was pressed, hide the 
 &nbsp; '&nbsp;&nbsp; dialog box instead of unloading it.
 &nbsp; If UnloadMode = vbFormControlMenu Then
 &nbsp;&nbsp;&nbsp;&nbsp; Cancel = True
 &nbsp;&nbsp;&nbsp;&nbsp; Me.Visible = False
 &nbsp; End If
End Sub
</code></pre>
</li>
</ol>
<p>
If dlgDemo is shown as a modal dialog, hiding the dialog rather than unloading it allows the ShowDialog method of the Dialogs class to retrieve the value in the text box.</p>
<p class=label>
<b>To create the Dialogs class</b>
<ol>
<li>
From the <b>Project </b>menu, choose <b>Add Class Module</b> to open the <b>Add Class Module </b>dialog box. Double-click the <b>Blank Class Module </b>icon to add a class module to the project.<br><br></li>
<li>
In the <b>Properties </b>window, change the Name property of the class to <code>Dialogs</code>.<br><br></li>
<li>
In the <b>Properties </b>window, change the Instancing property to GlobalMultiUse, so that you can call the ShowDialog method without explicitly creating a Dialogs object.<br><br></li>
<li>
To create a WithEvents variable that can handle the NotifyClients event of dlgDemo, and to create an event that Dialogs object can raise for its own clients, add the following code to the Declarations section:<pre><code>Private WithEvents mdlg As dlgDemo
Event NotifyClients(ByVal Data As String)
</code></pre>
</li>
<li>
In the <b>Object</b> box, select <b>mdlg</b> to show the event procedure for the NotifyClients event raised by dlgDemo. Add the following code:<pre><code>Private Sub mdlg_NotifyClients(ByVal Data As String)
 &nbsp; RaiseEvent NotifyClients(Data)
End Sub
</code></pre>
<p class=tl>
The Dialogs object receives the NotifyClients event from its dlgDemo form whenever the contents of the dialog’s text box changes. The Dialogs object immediately raises its own NotifyClients event, passing along the data to its own client.</P></li>
<li>
In the code window, select <b>Class</b> from the <b>Object </b>box. In the <b>Procedure </b>box, select <b>Initialize</b> and add the following code to the Class_Initialize event procedure:<pre><code>Private Sub Class_Initialize()
 &nbsp; Debug.Print "Dialogs object created"
 &nbsp; Set mdlg = New dlgDemo
End Sub
</code></pre>
</li>
<li>
In the <b>Procedure </b>box, select <b>Terminate</b> and add the following code to the Class_Terminate event procedure:<pre><code>Private Sub Class_Terminate()
 &nbsp; Debug.Print "Dialogs object terminated"
 &nbsp; Unload mdlg
 &nbsp; Set mdlg = Nothing
End Sub
</code></pre>
<p class=tl>
When terminating, an object that controls a form should always unload the form and set its reference to the form to Nothing, to avoid tying up resources with orphaned forms.</P></li>
<li>
On the <b>Tools</b> menu, click <b>Add Procedure</b> to open the <b>Add Procedures</b> dialog box. In the <b>Name</b> box, type <b>ShowDialog</b>. Click <b>Function</b> and <b>Public</b>, then click <b>OK</b>.<p class=tl>
In the code window, change the newly created Function procedure to appear as follows:</P><pre><code>Public Function ShowDialog( _
 &nbsp;&nbsp;&nbsp;&nbsp; Optional ByVal Text As String = "", _
 &nbsp;&nbsp;&nbsp;&nbsp; Optional ByVal Modal As Boolean = True) _
 &nbsp;&nbsp;&nbsp;&nbsp; As String
 &nbsp; With mdlg
 &nbsp;&nbsp;&nbsp;&nbsp; .txtDemo.Text = Text
 &nbsp;&nbsp;&nbsp;&nbsp; If Modal Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Caption = "Modal Dialog Box"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Show vbModal
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShowDialog = .txtDemo.Text
 &nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Caption = "Modeless Dialog Box"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Show vbModeless
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; End With
End Function
</code></pre>
<p class=tl>
Typed optional arguments let the compiler catch type mismatch errors, instead of waiting until run-time errors occur. Typed optional arguments are discussed in "Programming Fundamentals" in the <i>Visual Basic Programmer’s Guide.</i></P></li>
<li>
Save the class module as ThingDemo_Dialogs.cls.</li>
</ol>
<p>
The ShowDialog method that displays the dialog has two optional arguments:
<ul type=disc>
<li>
The initial text it’s going to display<br><br></li>
<li>
A Boolean argument that determines whether the dialog is modal</li>
</ul>
<p>
The Text argument is assigned to the text box on dlgDemo before the dialog box is shown. The default value of the Modal argument is True, so omitting it causes the dialog to be modal.</p>
<p>
If the dialog is shown Modal, the ShowDialog method returns the contents of the <code>txtDemo</code> text box after the dialog has been dismissed by the user.</p>
<p>
If the dialog is shown Modeless nothing is returned, because the client received a NotifyClients event whenever the contents of the text box changed.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Events are discussed in "Adding Events to Classes" in "General Principles of Component Design."</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX DLL.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>To</b></td>
<td class=label width=62%><b>See</b></td>
</tr>
<tr valign=top>
<td width=38%>Go to the next step</td>
<td width=62%><a href="vbconbacktotestapplication03.htm">Using the Global Object in TestThing</a></td>
</tr>
<tr valign=top>
<td width=38%>Start from the beginning</td>
<td width=62%><a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</td>
</tr>
</table><br>
</BODY>
</HTML>

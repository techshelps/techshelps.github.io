<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hello, Visual Basic</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconhellovisualbasic"></a>Hello, Visual Basic</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconHelloVisualBasicC">
</object></p>
<p>
There are three main steps to creating an application in Visual Basic:
<ol>
<li>
Create the interface.<br><br></li>
<li>
Set properties.<br><br></li>
<li>
Write code.</li>
</ol>
<p>
To see how this is done, use the steps in the following procedures to create a simple application that consists of a text box and a command button. When you click the command button, the message "Hello, world!" appears in the text box.</p>
<h2>Creating the Interface</h2>
<p>
Forms are the foundation for creating the interface of an application. You can use forms to add windows and dialog boxes to your application. You can also use them as containers for items that are not a visible part of the application's interface. For example, you might have a form in your application that serves as a container for graphics that you plan to display in other forms.</p>
<p>
The first step in building a Visual Basic application is to create the forms that will be the basis for your application's interface. Then you draw the objects that make up the interface on the forms you create. For this first application, you'll use two controls from the Toolbox.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=43%><b>Button</b></td>
<td class=label width=57%><b>Control</b></td>
</tr>
<tr valign=top>
<td width=43%><img src="avp02003b.gif" border=0></td>
<td width=57%>Text box</td>
</tr>
<tr valign=top>
<td width=43%><img src="avp02004b.gif" border=0></td>
<td width=57%>Command button</td>
</tr>
</table><br>
<p class=label>
<b>To draw a control using the Toolbox</b>
<ol>
<li>
Click the tool for the control you choose to draw — in this case, the <b>text</b> <b>box</b>.<br><br></li>
<li>
Move the pointer onto your form. The pointer becomes a cross hair, as shown in Figure 2.3.<p class=label>
<b>Figure 2.3&nbsp;&nbsp;&nbsp;Drawing a text box with the Toolbox</b>
<p>
<img src="avp02006.gif" border=0></P></li>
<li>
Place the cross hair where you want the upper-left corner of the control.<br><br></li>
<li>
Drag the cross hair until the control is the size you want. (<i>Dragging</i> means holding the left mouse button down while you move an object with the mouse.)<br><br></li>
<li>
Release the mouse button.<p class=tl>
The control appears on the form.</P></li>
</ol>
<p>
Another simple way to add a control to a form is to double-click the button for that control in the Toolbox. This creates a default-size control located in the center of the form; then you can move the control to another location on the form.</p>
<h3>Resizing, Moving, and Locking Controls</h3>
<p>
Notice that small rectangular boxes called <i>sizing handles</i> appear at the corners of the control; you'll use these sizing handles in the next step as you resize the control. You can also use the mouse, keyboard, and menu commands to move controls, lock and unlock control positions, and adjust their positions.</p>
<p class=label>
<b>To resize a control</b>
<ol>
<li>
Select the control you intend to resize by clicking it with the mouse.<p class=tl>
Sizing handles appear on the control.</P></li>
<li>
Position the mouse pointer on a sizing handle, and drag it until the control is the size you choose.<p class=tl>
The corner handles resize controls horizontally and vertically, while the side handles resize in only one direction.</P></li>
<li>
Release the mouse button.<p class=tl>
–or–</P><p class=tl>
Use SHIFT with the arrow keys to resize the selected control.</P></li>
</ol>
<p class=label>
<b>To move a control</b>
<ul type=disc>
<li>
Use the mouse to drag the control to a new location on the form.<p class=tl>
–or–</P><p class=tl>
Use the Properties window to change the <b>Top</b> and <b>Left</b> properties.</P></li>
</ul>
<p>
When a control is selected, you can use CTRL with the arrow keys to move the control one grid unit at a time. If the grid is turned off, the control moves one pixel at a time.</p>
<p class=label>
<b>To lock all control positions</b>
<ul type=disc>
<li>
From the <b>Format </b>menu, choose <b>Lock</b> <b>Controls</b>.<p class=tl>
–or–</P><p class=tl>
Click the <b>Lock</b> <b>Controls</b> <b>Toggle</b> button on the <b>Form</b> <b>Editor</b> toolbar.</P></li>
</ul>
<p>
This will lock all controls on the form in their current positions so that you don't inadvertently move them once you have them in the desired location. This will lock controls only on the selected form; controls on other forms are untouched. This is a toggle command, so you can also use it to unlock control positions.</p>
<p class=label>
<b>To adjust the position of locked controls</b>
<ul type=disc>
<li>
You can "nudge" the control that has the focus by holding CTRL down and pressing the appropriate arrow key.<p class=tl>
–or–</P><p class=tl>
You can change the control's <b>Top</b> and <b>Left</b> properties in the Property window.</P></li>
</ul>
<p>
You now have the interface for the "Hello, world!" application, as shown in Figure 2.4.</p>
<p class=label>
<b>Figure 2.4&nbsp;&nbsp;&nbsp;The interface for the "Hello, world!" application</b></p>
<p>
<img src="avp02007.gif" border=0></p>
<h2>Setting Properties</h2>
<p>
The next step is to set properties for the objects you've created. The Properties window (Figure 2.5) provides an easy way to set properties for all objects on a form. To open the Properties window, choose the Properties Window command from the View menu, click the Properties Window button on the toolbar, or use the context menu for the control.</p>
<p class=label>
<b>Figure 2.5&nbsp;&nbsp;&nbsp;The Properties window</b></p>
<p>
<img src="avp02008.gif" border=0></p>
<p>
The Properties window consists of the following elements:
<ul type=disc>
<li>
Object box — Displays the name of the object for which you can set properties. Click the arrow to the right of the object box to display the list of objects for the current form.<br><br></li>
<li>
Sort tabs — Choose between an alphabetic listing of properties or a hierarchical view divided by logical categories, such as those dealing with appearance, fonts, or position. <br><br></li>
<li>
Properties list — The left column displays all of the properties for the selected object. You can edit and view settings in the right column.</li>
</ul>
<p class=label>
<b>To set properties from the Properties window</b>
<ol>
<li>
From the <b>View</b> menu, choose <b>Properties</b>, or click the <b>Properties</b> button on the toolbar.<p class=tl>
The <b>Properties</b> window displays the settings for the selected form or control.</P></li>
<li>
From the Properties list, select the name of a property.<br><br></li>
<li>
In the right column, type or select the new property setting.<p class=tl>
Enumerated properties have a predefined list of settings. You can display the list by clicking the down arrow at the right of the Settings box, or you can cycle through the list by double-clicking a list item.</P></li>
</ol>
<p>
For the "Hello, world!" example, you'll need to change three property settings. Use the default settings for all other properties.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Object</b></td>
<td class=label width=34%><b>Property</b></td>
<td class=label width=35%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=31%>Form</td>
<td width=34%>Caption</td>
<td width=35%>Hello, world!</td>
</tr>
<tr valign=top>
<td width=31%>Text box</td>
<td width=34%>Text</td>
<td width=35%>(Empty)</td>
</tr>
<tr valign=top>
<td width=31%>Command button</td>
<td width=34%>Caption</td>
<td width=35%>OK</td>
</tr>
</table><br>
<h3>Setting the Icon Property</h3>
<p>
All forms in Visual Basic have a generic, default icon that appears when you minimize that form. However, you will probably change this icon to one that illustrates the use of the form or your application. To assign an icon to a form, set the Icon property for that form. You can use 32 x 32 pixel icons that were standard in 16-bit versions of Microsoft Windows and are also used in Windows 95 and Windows NT, as well as the 16 x 16 pixel icons used in Windows 95.</p>
<h2>Writing Code</h2>
<p>
The <i>Code Editor window</i> is where you write Visual Basic code for your application. Code consists of language statements, constants, and declarations. Using the Code Editor window, you can quickly view and edit any of the code in your application.</p>
<p class=label>
<b>To open the Code window</b>
<ul type=disc>
<li>
Double-click the form or control for which you choose to write code.<p class=tl>
–or–</P><p class=tl>
From the Project Explorer window, select the name of a form or module, and choose the <b>View Code</b> button.</P></li>
</ul>
<p>
Figure 2.6 shows the Code Editor window that appears when you double-click the Command button control, and the events for that command.</p>
<p class=label>
<b>Figure 2.6&nbsp;&nbsp;&nbsp;The Code Editor window</b></p>
<p>
<img src="avp02009.gif" border=0></p>
<p>
You can choose to display all procedures in the same Code window, or display a single procedure at a time.</p>
<p class=label>
<b>To display all procedures in the same Code window</b>
<ol>
<li>
From the <b>Tools</b> menu, select the <b>Options</b> dialog box.<br><br></li>
<li>
On the <b>Editor</b> tab in the <b>Options</b> dialog box, select the check box to the left of <b>Default to Full Module View</b>. The check box to the left of <b>Procedure Separator</b> adds or removes a separator line between procedures.<p class=tl>
–or–</P><p class=tl>
Click the <b>Full Module View</b> button in the lower left corner of the Code Editor window.</P></li>
</ol>
<p class=label>
<b>To display one procedure at a time in the Code window</b>
<ol>
<li>
From the <b>Tools</b> menu, select the <b>Options</b> dialog box.<br><br></li>
<li>
On the <b>Editor</b> tab in the <b>Options</b> dialog box, clear the check box to the left of <b>Default to Full Module View</b>.<p class=tl>
–or–</P><p class=tl>
Click the <b>Procedure View</b> button in the lower left corner of the Code Editor window.</P></li>
</ol>
<p>
The Code window includes the following elements:
<ul type=disc>
<li>
Object list box — Displays the name of the selected object. Click the arrow to the right of the list box to display a list of all objects associated with the form.<br><br></li>
<li>
Procedure list box — Lists the procedures, or events, for an object. The box displays the name of the selected procedure — in this case, Click. Choose the arrow to the right of the box to display all the procedures for the object.</li>
</ul>
<h3>Creating Event Procedures</h3>
<p>
Code in a Visual Basic application is divided into smaller blocks called <i>procedures</i>. An <i>event procedure</i>, such as those you'll create here, contains code that is executed when an event occurs (such as when a user clicks a button). An event procedure for a control combines the control's actual name (specified in the Name property), an underscore (_), and the event name. For example, if you want a command button named Command1 to invoke an event procedure when it is clicked, use the procedure Command1_Click.</p>
<p class=label>
<b>To create an event procedure</b>
<ol>
<li>
In the <b>Object</b> list box, select the name of an object in the active form. (The <i>active</i> form is the form that currently has the focus.)<p class=tl>
For this example, choose the command button, Command1.</P></li>
<li>
In the <b>Procedure</b> list box, select the name of an event for the selected object.<p class=tl>
Here, the <b>Click</b> procedure is already selected, because it's the default procedure for a command button. Note that a <i>template</i> for the event procedure is now displayed in the Code window.</P></li>
<li>
Type the following code between the <b>Sub</b> and <b>End</b> <b>Sub</b> statements:<pre><code>Text1.Text = "Hello, world!"
</code></pre>
<p class=tl>
The event procedure should look like this:</P><pre><code>Private Sub Command1_Click ()
 &nbsp; Text1.Text = "Hello, world!"
End Sub
</code></pre>
</li>
</ol>
<p>
You'll note here that the code is simply changing the Text property of the control named Text1 to read "Hello, world!" The syntax for this example takes the form of <i>object.property,</i> where <code>Text1</code> is the object and <code>Text</code> is the property. You can use this syntax to change property settings for any form or control in response to events that occur while your application is running.</p>
<p>
<b><B>For More Information</B>&nbsp;&nbsp;&nbsp;</b>For information on creating other types of procedures, see "Introduction to Procedures" in "Programming Fundamentals."</p>
<h2>Running the Application</h2>
<p>
To run the application, choose Start from the Run menu, or click the Start button on the toolbar, or press F5. Click the command button you've created on the form, and you'll see "Hello, world!" displayed in the text box.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Establishing a Connection to a Database</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconestablishingconnectiontodatabase"></a>Establishing a Connection to a Database</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconEstablishingConnectionToDatabase_C">
</object></p>
<h2>RDO</h2>
<p>
To open a connection, you must supply a connection string with parameters. Note that a connection is not required by RDO to create an rdoQuery object, but <i>is</i> required to initially create an rdoResultset object:</p>
<pre><code>Dim cn As New rdoConnection
Dim cnB As New rdoConnection
Const ConnectionString = "uid=myname;pwd=mypw;driver={SQLServer}; _
 server=myserver;database=pubs;dsn=''"
</code></pre>
<p>
This connect string accesses a specific SQL Server and permits ODBC to open a connection without a DSN. This is a typical ODBC connect string with all of the standard arguments.</p>
<p>
The next section, in the form's Load event, establishes the type of cursor driver and the login timeout. By default, RDO uses the rdUseIfNeeded cursor type, which invokes server-side cursors on SQL Server. This default is overridden in the example below by specifying rdUseNone. The rdDriverNoPrompt flag means that the application generates an error if the user ID and password do not match.</p>
<pre><code>Private Sub Form_Load()
 &nbsp; With cn
 &nbsp;&nbsp;&nbsp;&nbsp; cn.Connect = ConnectString
 &nbsp;&nbsp;&nbsp;&nbsp; cn.LoginTimeout = 10
 &nbsp;&nbsp;&nbsp;&nbsp; cn.CursorDriver = rdUseNone
 &nbsp;&nbsp;&nbsp;&nbsp; cn.EstablishConnection rdDriverNoPrompt
 &nbsp; End With
</code></pre>
<p>
This second connection performs any client-batch updates:</p>
<pre><code>&nbsp;&nbsp;&nbsp;With cnB
 &nbsp;&nbsp;&nbsp;&nbsp; cnB.Connect = ConnectString
 &nbsp;&nbsp;&nbsp;&nbsp; cnB.CursorDriver = rdUseClientBatch
 &nbsp;&nbsp;&nbsp;&nbsp; cnB.EstablishConnection
 &nbsp; End With
End Sub
</code></pre>
<p>
The last event occurs when the connection operation completes and it handles any errors that occur when the connection is opened. With it, you can test to see if the connection worked, and if so, enable any buttons that rely on an open connection.</p>
<pre><code>Private Sub cn_Connect(ByVal ErrorOccurred As Boolean)
 &nbsp; If ErrorOccurred Then
 &nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Could not open connection", vbCritical
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; RunOKFrame.Enabled = True
 &nbsp; End If
End Sub
</code></pre>
<h2>ADO</h2>
<p>
To establish a database connection in ADO, first create a set of ADO objects referenced from the ADODB object. These are used later to set specific properties that open connections and generate resultsets:</p>
<pre><code>Dim cn As New ADODB.Connection
Dim rs As New ADODB.Recordset
Dim cnB As New ADODB.Connection
Dim Qy As New ADODB.Command
</code></pre>
<p>
The next line creates a connect string, just like the one you created in the previous RDO example. In both cases, you are using ODBC’s "non-DSN" connection strategy to save time and increase performance: </p>
<pre><code>Const ConnectionString = "uid=myname;pwd=mypw;driver={SQL Server}; _
 server=myserver;database=pubs;dsn=",,connection=adConnectAsync"</code></pre>
<p>
The following declarations initialize the variables used in this example. (Note the creation of a variant array to hold the resultset):</p>
<pre><code>Dim sql As String
Dim rc As Integer
Dim i As Integer
Dim Changes As Integer
Dim bms() As Variant
</code></pre>
<p>
Next, open an ADO connection to a database in the Form_Load event. Note that this code is very similar to the RDO code except that the constants are prefaced with "ad" rather than "rd". To see all available constants, look at the ADODB type library.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;There's no need to specify the prompting behavior since ADO defaults to "no prompt". If you elect to change this, however, use the ADO Properties collection to deal with the desired prompt behavior. In RDO, you can set the behavior using the OpenConnection argument. In ADO, you must set the Properties ("Prompt") property.</p>
<p class=indent>
Also, there's no need to specify a cursor driver if you don't want to use one (such as the RDO <code>CursorDriver = rdUseNone)</code>, since ADO defaults to no cursor driver by default.</p>
<pre><code>Private Sub Form_Load()
 &nbsp; With cn
 &nbsp;&nbsp;&nbsp;&nbsp; ' Establish DSN-less connection
 &nbsp;&nbsp;&nbsp;&nbsp; .ConnectionString = ConnectString
 &nbsp;&nbsp;&nbsp;&nbsp; .ConnectionTimeout = 10
 &nbsp;&nbsp;&nbsp;&nbsp; '.Properties("Prompt") = adPromptNever 
 &nbsp;&nbsp;&nbsp;&nbsp; ' This is the default prompting mode in ADO.
 &nbsp;&nbsp;&nbsp;&nbsp; .Open
 &nbsp; End With
 &nbsp; With cnB
 &nbsp;&nbsp;&nbsp;&nbsp; .ConnectionString = ConnectString
 &nbsp;&nbsp;&nbsp;&nbsp; .CursorLocation = adUseClient
 &nbsp;&nbsp;&nbsp;&nbsp; .Open
 &nbsp; End With
End Sub
</code></pre>
</BODY>
</HTML>

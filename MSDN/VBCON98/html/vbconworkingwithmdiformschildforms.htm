<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with MDI Forms and Child Forms</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconworkingwithmdiformschildforms"></a>Working with MDI Forms and Child Forms</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vastmDim;vbconWorkingWithMDIFormsChildFormsC">
</object></p>
<p>
When users of your MDI application open, save, and close several child forms in one session, they should be able to refer to the active form and maintain state information on child forms. This topic describes coding techniques you can use to specify the active child form or control, load and unload MDI and child forms, and maintain state information for a child form.</p>
<h2>Specifying the Active Child Form or Control</h2>
<p>
Sometimes you want to provide a command that operates on the control with the focus on the currently active child form. For example, suppose you want to copy selected text from the child form's text box onto the Clipboard. In the Mdinote.vbp sample application, the Click event of the Copy item on the Edit menu calls EditCopyProc, a procedure that copies selected text onto the Clipboard.</p>
<p>
Because the application can have many instances of the same child form, EditCopyProc needs to know which form to use. To specify this, use the MDI form's ActiveForm property, which returns the child form that has the focus or that was most recently active.</p>
<p class=indent>
<b><B>Note</B>&nbsp;&nbsp;&nbsp;</b>At least one MDI child form must be loaded and visible when you access the ActiveForm property, or an error is returned.</p>
<p>
When you have several controls on a form, you also need to specify which control is active. Like the ActiveForm property, the ActiveControl property returns the control with the focus on the active child form. Here's an example of a copy routine that can be called from a child form menu, a menu on the MDI form, or a toolbar button:</p>
<pre><code>Private Sub EditCopyProc ()
   ' Copy selected text onto Clipboard.
   ClipBoard.SetText _ 
      frmMDI.ActiveForm.ActiveControl.SelText
End Sub
</code></pre>
<p>
If you're writing code that will be called by multiple instances of a form, it's a good idea to <i>not</i> use a form identifier when accessing the form's controls or properties. For example, refer to the height of the text box on Form1 as <code>Text1.Height</code> instead of <code>Form1.Text1.Height</code>. This way, the code always affects the current form.</p>
<p>
Another way to specify the current form in code is to use the Me keyword. You use Me to reference the form whose code is currently running. This keyword is useful when you need to pass a reference to the current form instance as an argument to a procedure.</p>
<p>
<b><B>For More Information</B>&nbsp;&nbsp;&nbsp;</b>For information on creating multiple instances of a form using the New keyword with the Dim statement, see "Introduction to Variables, Constants and Data Types" in "Programming Fundamentals" and "Dim Statement" in the <i>Language Reference</i>.</p>
<h2>Loading MDI Forms and Child Forms</h2>
<p>
When you load a child form, its parent form (the MDI form) is automatically loaded and displayed. When you load the MDI form, however, its children are not automatically loaded.</p>
<p>
In the MDI NotePad example, the child form is the default startup form, so both the child and MDI forms are loaded when the application is run. If you change the startup form in the MDI NotePad application to frmMDI (on the General tab of Project Properties) and then run the application, only the MDI form is loaded. The first child form is loaded when you choose New from the File menu.</p>
<p>
You can use the AutoShowChildren property to load MDI child windows as hidden, and leave them hidden until you display them using the Show method. This allows you to update various details such as captions, position, and menus before a child form becomes visible.</p>
<p>
You can't show an MDI child form or the MDI form modally (using the Show method with an argument of vbModal). If you want to use a modal dialog box in an MDI application, use a form with its MDIChild property set to False.</p>
<h3>Setting Child Form Size and Position</h3>
<p>
When an MDI child form has a sizable border (BorderStyle = 2), Microsoft Windows determines its initial height, width, and position when it is loaded. The initial size and position of a child form with a sizable border depends on the size of the MDI form, not on the size of the child form at design time. When an MDI child form's border is not sizable (BorderStyle = 0, 1, or 3), it is loaded using its design-time Height and Width properties.</p>
<p>
If you set AutoShowChildren to False, you can change the position of the MDI child after you load it, but before you make it visible.</p>
<p>
<b><B>For More Information</B>&nbsp;&nbsp;&nbsp;</b>See "AutoShowChildren Property and "Show Method" in the <i>Language Reference</i>.</p>
<h2>Maintaining State Information for a Child Form</h2>
<p>
A user deciding to quit the MDI application must have the opportunity to save work. To make this possible, the application needs to be able to determine, at all times, whether the data in the child form has changed since the last time it was saved.</p>
<p>
You can do this by declaring a public variable on each child form. For example, you can declare a variable in the Declarations section of a child form:</p>
<pre><code>Public boolDirty As Boolean
</code></pre>
<p>
Each time the text changes in Text1, the child form's text box Change event sets <code>boolDirty</code> to True. You can add this code to indicate that the contents of Text1 have changed since the last time it was saved:</p>
<pre><code>Private Sub Text1_Change ()
   boolDirty = True
End Sub
</code></pre>
<p>
Conversely, for each time the user saves the contents of the child form, the text box's Change event sets <code>boolDirty</code> to False to indicate that the contents of Text1 no longer need to be saved. In the following code, it is assumed that there is a menu command called Save (mnuFileSave) and a procedure called FileSave that saves the contents of the text box:</p>
<pre><code>Sub mnuFileSave_Click ()
   ' Save the contents of Text1.
   FileSave
   ' Set the state variable.
   boolDirty = False
End Sub
</code></pre>
<h2>Unloading MDI Forms with QueryUnload</h2>
<p>
The <code>boolDirty</code> flag becomes useful when the user decides to exit the application. This can occur when the user chooses Close from the MDI form's Control menu, or through a menu item you provide, such as Exit on the File menu. If the user closes the application using the MDI form's Control menu, Visual Basic will attempt to unload the MDI form.</p>
<p>
When an MDI form is unloaded, the QueryUnload event is invoked first for the MDI form and then for every child form that is open. If none of the code in these QueryUnload event procedures cancels the Unload event, then each child is unloaded and finally, the MDI form is unloaded.</p>
<p>
Because the QueryUnload event is invoked before a form is unloaded, you can give the user the opportunity to save a form before unloading it. The following code uses the <code>boolDirty</code> flag to determine if the user should be prompted to save the child before it is unloaded. Notice that you can access the value of a public form-level variable anywhere in the project. This code assumes that there is a procedure, FileSave, that saves the contents of Text1 in a file.</p>
<pre><code>Private Sub mnuFExit_Click()
   ' When the user chooses File Exit in an MDI 
   ' application, unload the MDI form, invoke 
   ' the QueryUnload event for each open child.
   Unload frmMDI
   End
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, _
   UnloadMode As Integer)
   If boolDirty Then
      ' Call routine to query the user and save 
      ' file if necessary.
      FileSave
   End If
End Sub
</code></pre>
<p>
<b><B>For More Information</B>&nbsp;&nbsp;&nbsp;</b>See "QueryUnload Event" in the <i>Language Reference</i>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Events in Dynamic HTML</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconeventsindynamichtml"></a>Events in Dynamic HTML</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconEventsInDynamicHTML_C">
</object></p>
<p>
Most events in the Dynamic HTML object model are similar to the events in the Visual Basic programming model. Event names, however, are often slightly different. All event names in Dynamic HTML are preceded by the word "on." You can locate most common events by looking for them under this prefix. For example, the Visual Basic click event corresponds to onclick, load corresponds to onload, and so on.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Document Object Model" in the "Dynamic HTML" section of the Internet Client SDK for a full list of the properties, methods, and events available in an HTML page through the Dynamic HTML object model.</p>
<h2>Visual Basic Events vs. Dynamic HTML Events</h2>
<p>
The sections below list some of the more commonly used events in Visual Basic, their counterparts in Dynamic HTML, and any additional information needed for you to use them.</p>
<h3>Keyboard Events</h3>
<p>
Keyboard events in Dynamic HTML correspond very closely to keyboard events in Visual Basic. The following table lists the common Visual Basic keyboard events and their Dynamic HTML counterparts:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Visual Basic Event</b></td>
<td class=label width=23%><b>DHTML Event</b></td>
<td class=label width=51%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=26%>keydown</td>
<td width=23%>onkeydown</td>
<td width=51%>Fires when a key is pressed.</td>
</tr>
<tr valign=top>
<td width=26%>keypress</td>
<td width=23%>onkeypress</td>
<td width=51%>Fires when a user's keyboard input is translated to a character.</td>
</tr>
<tr valign=top>
<td width=26%>keyup</td>
<td width=23%>onkeyup</td>
<td width=51%>Fires when a user releases a key.</td>
</tr>
</table><br>
<p>
When a keyboard event occurs, the keycode property of Dynamic HTML's event object contains the Unicode keycode of the corresponding key. The altKey, ctrlKey, and shiftKey properties specify the state of the ALT, CTRL, and SHIFT keys. You can change which key is associated with the event by either changing the value of the keycode property or returning an integer value. You can cancel the event by returning zero or false.</p>
<h3>Mouse Events</h3>
<p>
Mouse events in Dynamic HTML correspond closely to mouse events in Visual Basic. The following table lists the common Visual Basic mouse events and their Dynamic HTML counterparts:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=17%><b>Visual Basic Event</b></td>
<td class=label width=20%><b>DHTML Equivalent</b></td>
<td class=label width=63%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=17%>click</td>
<td width=20%>onclick</td>
<td width=63%>In addition to occurring when a user clicks on an element, this event also fires when the user presses ENTER on an element that can receive focus, such as a button.</td>
</tr>
<tr valign=top>
<td width=17%>doubleclick</td>
<td width=20%>ondblclick</td>
<td width=63%>This event works similarly to its Visual Basic counterpart.</td>
</tr>
<tr valign=top>
<td width=17%><br>
mousedown, mouseup, mousemove</td>
<td width=20%>onmouseout, onmousedown, onmouseup, onmousemove, onmouseover</td>
<td width=63%>When moving between elements, the onmouseout event fires first to indicate that the mouse has left the original element. Next the onmousemove event fires, indicating that the mouse has moved. Finally, onmouseover fires to indicate that the mouse has entered the new element.</td>
</tr>
</table><br>
<p>
When a mouse event occurs, the button property of the event object identifies which mouse button (if any) is down. The x and y properties specify the location of the mouse at the time of the event. For the onmouseover and onmouseout events, the toElement and fromElement properties specify the elements the mouse is moving to and from.</p>
<h3>Focus and Selection Events</h3>
<p>
Focus and selection events in Dynamic HTML differ slightly from their Visual Basic counterparts. In particular, focus events are called only from certain elements, and selection and dragging are handled differently. The following table lists the common Visual Basic focus and selection events and their Dynamic HTML counterparts:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=17%><b>Visual Basic Event</b></td>
<td class=label width=18%><b>DHTML Equivalent</b></td>
<td class=label width=65%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=17%>gotfocus</td>
<td width=18%>onfocus</td>
<td width=65%>Fires when the user moves to an element capable of receiving input, such as a button or form element.</td>
</tr>
<tr valign=top>
<td width=17%>lostfocus</td>
<td width=18%>onblur</td>
<td width=65%>Fires when you move out of an element that is capable of receiving input.</td>
</tr>
<tr valign=top>
<td width=17%>selchange</td>
<td width=18%>onselectstart<p>
onselect</p>
</td>
<td width=65%>The onselectstart event fires when a selection is first initiated — for example, when the user clicks a character or object in the document. Onselect fires when the user changes the selection — for example, by moving the mouse over a portion of the document while holding down the mouse button.</td>
</tr>
<tr valign=top>
<td width=17%>dragdrop, dragover</td>
<td width=18%>ondragstart</td>
<td width=65%>Fires when the user first begins to drag the selection. The default action is to prepare the selection to be copied to another element.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Onblur and onfocus fire whether you move between elements in the page, between frames, or even between applications on the desktop. For example, if a page element has focus and the user switches to another application, the onblur event fires for that element. When the user switches back, onfocus fires.</p>
<h3>Other Events</h3>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=17%><b>Visual Basic Event</b></td>
<td class=label width=16%><b>DHTML Equivalent</b></td>
<td class=label width=67%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=17%>change</td>
<td width=16%>onchange</td>
<td width=67%>Onchange fires when the user tabs off or presses ENTER on an element, moving out of it. In Visual Basic, the change event fires as soon as the user performs any action within the control.</td>
</tr>
<tr valign=top>
<td width=17%>close</td>
<td width=16%>--</td>
<td width=67%>No direct equivalent exists for this event.</td>
</tr>
<tr valign=top>
<td width=17%>error</td>
<td width=16%>onerror</td>
<td width=67%>Fires when an error occurs loading an image or other element, or when a scripting error occurs.</td>
</tr>
<tr valign=top>
<td width=17%>initialize</td>
<td width=16%>onready<br>
statechange</td>
<td width=67%>Fires when the page changes from initializing to interactive, and from interactive to loaded. A page is interactive as soon as the user can interact with it by scrolling or clicking on anchors or elements. A page is loaded when all the content has been downloaded.</td>
</tr>
<tr valign=top>
<td width=17%>load</td>
<td width=16%>onload</td>
<td width=67%>Fires after the document is loaded and all the elements on the page have been completely downloaded.</td>
</tr>
<tr valign=top>
<td width=17%>paint</td>
<td width=16%>--</td>
<td width=67%>No direct equivalent exists for this event.</td>
</tr>
<tr valign=top>
<td width=17%>resize</td>
<td width=16%>onresize</td>
<td width=67%>This Dynamic HTML event functions similarly to its Visual Basic counterpart; however, you do not need to write code to handle resizing of an HTML page as you do a Visual Basic form. Resize in HTML happens automatically.</td>
</tr>
<tr valign=top>
<td width=17%>scroll</td>
<td width=16%>onscroll</td>
<td width=67%>Fires whenever the scroll box for the page or any element within it is repositioned.</td>
</tr>
<tr valign=top>
<td width=17%>terminate</td>
<td width=16%>--</td>
<td width=67%>No direct equivalent exists for this event. You can perform terminate-type actions in the onunload event.<p>
A terminate event does exist for the DHTMLPage object. This object is not part of the Dynamic HTML object model, and is unique to Visual Basic.</p>
</td>
</tr>
<tr valign=top>
<td width=17%>unload</td>
<td width=16%>onunload</td>
<td width=67%>Fires immediately prior to the document being unloaded (when navigating to another document).</td>
</tr>
</table><br>
<h2>Events Unique to Dynamic HTML</h2>
<p>
In addition, there are some events in Dynamic HTML that do not have equivalents in Visual Basic. A few of the more interesting of these are shown in the following table:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>DHTML Event</b></td>
<td class=label width=79%><b>Usage</b></td>
</tr>
<tr valign=top>
<td width=21%>onabort</td>
<td width=79%>Fires when the user aborts the download of an image or page element by pressing the Stop button.</td>
</tr>
<tr valign=top>
<td width=21%>onreset</td>
<td width=79%>Fires when the user selects a Reset button on a form.</td>
</tr>
<tr valign=top>
<td width=21%>onsubmit</td>
<td width=79%>Fires when the user selects a Submit button on a form. Can be used to perform validation of data on the client before sending it to the server.</td>
</tr>
</table><br>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Events" in the "Document Object Model References" section of the Internet Client SDK for more information on Dynamic HTML events.</p>
</BODY>
</HTML>

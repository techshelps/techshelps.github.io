<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exposing User Control Events of the RepeatedControl</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconexposingusercontroleventsofrepeatedcontrol"></a>Exposing User Control Events of the RepeatedControl</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconExposingUserControlEventsOfRepeatedControl_C">
</object></p>
<p>
When you create a user control, it's common to create public events. When the user control is placed on a standard Visual Basic form, the custom events automatically appear in the form's code module.</p>
<p>
With the DataRepeater control, however, exposing the user control's events is not an automatic occurrence. Because the user control is not put directly on a form, its events cannot be exposed in the code module. There is, however, a way of achieving the same end.</p>
<p>
In brief, the major steps are:
<ol>
<li>
Add a class module to the user control project, and name the module CtlEvents.<br><br></li>
<li>
Add a public event to the module named ProductChange.<br><br></li>
<li>
Add a public procedure to the module named FireControlChange that raises the ProductChange event (using the RaiseEvent statement).<br><br></li>
<li>
Add a public property to the user control named Events that returns a reference to the CtlEvents object.<br><br></li>
<li>
In the Change event of each constituent control of the user control, invoke the FireControlChange procedure to raise events.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The following step-by-step procedure builds on the user control and DataRepeater control project built in the topic "Using the DataRepeater Control."</p>
<p class=label>
<b>Creating events to be exposed by the user control</b>
<ol>
<li>
Add a <b>Class Module </b>to the ActiveX Control project.<br><br></li>
<li>
Change the name of the class module from Class1 to <b>CtlEvents</b>.<br><br></li>
<li>
Set the Instancing property to <b>6</b> – <b>GlobalMultiuse</b>.<br><br></li>
<li>
Add a public event declaration to the Declarations section of the class module. For demonstration purposes, the code below adds only one event declaration. In a real application, you would add one event declaration for every control on the user control.<pre><code>Option Explicit
Public Event ProductChange()
</code></pre>
</li>
<li>
Add a public procedure to the class module. In the procedure, add the <b>RaiseEvent</b> statement to raise the ProductChange event. This procedure is invoked in events of the UserControl, and its sole purpose is to raise the event.<pre><code>Public Sub FireControlChange()
RaiseEvent ProductChange
End Sub
</code></pre>
<p class=tl>
The ProductChange event is the event that will be exposed by CtlEvents when using the ProductsCtl user control in a DataRepeater control.</P></li>
<li>
In the user control object's code module, declare a variable typed as the new class, as shown below:<pre><code>Option Explicit
Dim EventsObj As New CtlEvents
</code></pre>
</li>
<li>
Add a public Get procedure to the user control. In the procedure, use a Set statement to return the object reference.<pre><code>Public Property Get Events() As CtlEvents
Set Events = EventsObj ' returns the CtlEvents object reference
End Property
</code></pre>
</li>
<li>
In the Change event of the control you want to monitor, invoke the class object's procedure:<pre><code>Private Sub txtProductName_Change()
PropertyChanged ("ProductName")
EventsObj.FireControlChange
End Sub
</code></pre>
</li>
<li>
Save and compile the project (make the .ocx).</li>
</ol>
<p class=label>
<b>To expose the events of the User Control in the container form</b></p>
<p>
The following steps take place in the project that contains the DataRepeater control. In that project, a DataRepeater control contains the user control with the events created in steps 1 to 9 above.
<ol>
<li>
In the project that contains the DataRepeater control, use the <b>Components </b>dialog box to add the <b>ProductsCtl</b> (ProductsCtl.ocx) to the <b>Toolbox</b>. This step is needed to ensure that the Visual Basic Package and Deployment Wizard will correctly include the necessary .ocx file with the project. It also allows access at design time to the <b>ProductsCtl</b> events in code.<br><br></li>
<li>
In the <b>Declarations</b> section of the Form object's code module, paste the following code that declares an object variable with the <b>WithEvents </b>keyword:<pre><code>Option Explicit
Dim WithEvents objRepCtl As CtlEvents ' Be sure to use WithEvents
</code></pre>
</li>
<li>
In the DataRepeater control's RepeatedControlLoaded event set the variable to the <b>Events</b> property. You must set the variable using the DataRepeater control's <b>RepeatedControl </b>property, as shown below:<pre><code>Private Sub DataRepeater1_RepeatedControlLoaded()
Set objRepCtl = DataRepeater1.RepeatedControl.Events
End Sub</code></pre>
<p class=tl>
Because you can set the RepeatedControlName property at run time, the RepeatedControlLoaded was designed to allow you to set control properties that can only be initialized after the control has been loaded.</P></li>
<li>
The new object <b>objRepCtl</b> (with events) should now appear in the drop-down list of the Object box, in the upper left corner of the code module. Select the object from the list, and add code to the event of the object, as shown below.<pre><code>Private Sub objRepCtl_ProductChange()
 Debug.Print "objRepCtl_ProductChange"
End Sub
</code></pre>
</li>
<li>
Run the project. When you alter the Products field, the event will occur.</li>
</ol>
<h4>Adding Events to the Control</h4>
<p>
With a few simple additions of code, you can easily add more events to the user control. First add public events — one for each event you want to raise — to the class module:</p>
<pre><code>Option Explicit
Public Event ProductChange()
Public Event UnitPriceChange() ' &lt;- This is a new Event declaration.
</code></pre>
<p>
Then add an argument to the class module's FireControlChange procedure. A Select Case statement is added to the procedure to distinguish which control is calling the procedure. Using that argument, the correct event is raised:</p>
<pre><code>Public Sub FireControlChange(ctlName As String)
   Select Case ctlName
   Case "ProductName"
      RaiseEvent ProductChange
   Case "UnitPrice"
      RaiseEvent UnitPriceChange
   Case Else
      ' Handle other cases here.
   End Select
End Sub
</code></pre>
<p>
Finally, switch to the UserControl object's code module. In the Change event of the controls you wish to monitor, invoke the procedure with the correct argument, as shown below.</p>
<pre><code>Private Sub txtProductName_Change()
   PropertyChanged "ProductName"
   EventsObj.FireControlChange "ProductName" ' Invoke procedure.
End Sub

Private Sub txtUnitPrice_Change()
   PropertyChanged "UnitPrice"
   EventsObj.FireControlChange "UnitPrice" ' Invoke procedure.
End Sub
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What is an Object?</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconwhatisobject"></a>What is an Object?</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconWhatIsObjectC">
</object></p>
<p>
An object is a combination of code and data that can be treated as a unit. An object can be a piece of an application, like a control or a form. An entire application can also be an object. The following table describes examples of the types of objects you can use in Visual Basic.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Example</b></td>
<td class=label width=68%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=32%>Command button</td>
<td width=68%>Controls on a form, such as command buttons and frames, are objects.</td>
</tr>
<tr valign=top>
<td width=32%>Form</td>
<td width=68%>Each form in a Visual Basic project is a separate object.</td>
</tr>
<tr valign=top>
<td width=32%>Database</td>
<td width=68%>Databases are objects, and contain other objects, like fields and indexes.</td>
</tr>
<tr valign=top>
<td width=32%>Chart</td>
<td width=68%>A chart in Microsoft Excel is an object.</td>
</tr>
</table><br>
<h2>Where do Objects Come From?</h2>
<p>
Each object in Visual Basic is defined by a <i>class</i>. To understand the relationship between an object and its class, think of cookie cutters and cookies. The cookie cutter is the class. It defines the characteristics of each cookie — for instance, size and shape. The class is used to create objects. The objects are the cookies.</p>
<p>
Two examples of the relationship between classes and objects in Visual Basic may make this clearer.
<ul type=disc>
<li>
The controls on the Toolbox in Visual Basic represent classes. The object known as a control doesn't exist until you draw it on a form. When you create a control, you're creating a copy or <i>instance</i> of the control class. That instance of the class is the object you refer to in your application.<br><br></li>
<li>
The form you work with at design time is a class. At run time, Visual Basic creates an instance of the form's class.</li>
</ul>
<p>
The Properties window displays the class and Name property of objects in your Visual Basic application, as shown in Figure 5.8.</p>
<p class=label>
<b>Figure 5.8&nbsp;&nbsp;&nbsp;Object and class names shown in the Properties window</b></p>
<p>
<img src="avp05018.gif" border=0></p>
<p>
All objects are created as identical copies of their class. Once they exist as individual objects, their properties can be changed. For example, if you draw three command buttons on a form, each command button object is an instance of the CommandButton class. Each object shares a common set of characteristics and capabilities (properties, methods, and events), defined by the class. However, each has its own name, can be separately enabled and disabled, can be placed in a different location on the form, and so on.</p>
<p>
For simplicity, most of the material outside of this chapter won't make many references to an object's class. Just remember that the term "list box control," for example, means "an instance of the ListBox class."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RDO and Client/Server Design Goals</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconclientserverdesigngoals"></a>RDO and Client/Server Design Goals</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconClientServerDesignGoalsC">
</object></p>
<p>
RDO and the RemoteData control can help you meet a specific set of client/server requirements. By using these remote data access features, you can:
<ul type=disc>
<li>
<B><b>Gain high-performance data access against remote ODBC data sources.</b></B> The ability to quickly retrieve the results from complex queries is a goal of every data access application. RDO provides a level of performance rivaled only by the ODBC and VBSQL API programming models. By leveraging the remote data engine, RDO greatly improves response time and user productivity.<br><br></li>
<li>
<B><b>Manage return codes and both input and output parameters from stored procedures.</b></B> Output parameters are the only way to extract information from an Oracle stored procedure, and are used heavily for singleton queries and many administrative functions. In many cases, you cannot determine if a stored procedure completed successfully without accessing the procedure’s return value. RDO supports access to each of these parameters through the rdoParameter object.<br><br></li>
<li>
<B><b>Manage multiple result sets.</b></B> By using a single query that returns several sets of results, you can use the query processor and system resources more efficiently. You can improve performance by running a single query to gather data to fill multiple data-driven list boxes and menus. In addition, by combining a row-count query with a SELECT query, you can accurately set up scroll bars and progress status bars.<br><br></li>
<li>
<B><b>Submit multiple action queries in a single batch.</b></B> In many cases, your application can submit a set of INSERT, DELETE or UPDATE operations as a single SQL statement. This increases performance, as it reduces network and remote processing overhead and lets you manage transactions more easily.<br><br></li>
<li>
<B><b>Limit the number of returned or processed rows.</b></B> In situations where users might select more rows than it is practical to handle, RDO implements a query governor to limit the number of rows returned from any data source. This way, you can predict query response time and more easily manage the workstation or server resources required to maintain cursor keysets. Using the same mechanism, you can limit the number of rows affected by a data-modification query.<br><br></li>
<li>
<B><b>Utilize server-side cursors.</b></B> Some servers, such as Microsoft SQL Server, support cursor keysets that are created on the server, instead of on the workstation. Under the right conditions, this type of cursor management can significantly improve performance and reduce network load and workstation resource requirements.<br><br></li>
<li>
<B><b>Execute queries asynchronously.</b></B> If a query takes an extended period of time to run, you should have the option of either executing code while the query is being processed or canceling the query. RDO provides an asynchronous query option that you can use when executing any query, as well as a way to cancel an asynchronous query. RDO also provides a unique event-driven asynchronous programming interface that eliminates the need for polling loops. Asynchronous processing extends to opening connections and when using the MoveLast method.<br><br></li>
<li>
<B><b>Continue queries after initial timeout period.</b></B> When a query exhausts the period set in the QueryTimeout property, RDO permits you to override query cancellation and continue waiting for another timeout period.<br><br></li>
<li>
<B><b>Support improved polymorphism and "free-standing" object creation.</b></B> RDO now supports creation of rdoConnection and rdoQuery objects using the Dim statement. These free-standing objects can be associated with other objects to perform actions. For example, you can create an rdoQuery object independent of any rdoConnection object and associate it with an open connection at a later time.<br><br></li>
<li>
<B><b>Support dissociated result sets.</b></B> RDO permits you to create a static read-write cursor and break the connection with the remote server. The data in the rdoResultset object remains available for access or changes. Once you re-associate the result set with another rdoConnection object, you can use the BatchUpdate method to post these offline changes to the database.<br><br></li>
<li>
<B><b>Create and manage optimistic batch updates.</b></B> While the ODBC cursor library supports the concept of optimistic updates, it does so on a row by row basis rather than a batch basis. This type of update operation consumes considerable network and server bandwidth. RDO leverages the new Client Batch cursor library that groups sets of rows to be inserted, updated, or deleted. This way, only one round trip to the server is needed, thus improving update performance and decreasing network traffic. <br><br></li>
<li>
<B><b>Make the use of stored procedures easier.</b></B> RDO permits you to express parameterized queries and stored procedures as methods of a parent rdoConnection object. You can pass parameters just as you would to any Visual Basic function without having to manipulate any rdoParameter objects.<br><br></li>
<li>
<B><b>Expose underlying ODBC handles.</b></B> In cases where you need more flexibility or control than is available in the object model, you should have a way to directly access the data source. RDO provides access to the ODBC environment, connection, and statement handles.<br><br></li>
<li>
<B><b>Reduce memory footprint.</b></B> In many cases, the system that hosts a client/server front-end application is limited in RAM capacity. Because of this, it is important that applications designed for these systems economize their use of RAM and other workstation system resources. The RDO memory footprint is dramatically smaller than other programming models, and it does not require the use of local memory or disk space for its lowest-level cursors.</li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding a Property to the UserDocument</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddpropertymethod"></a>Adding a Property to the UserDocument</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddPropertyMethodC">
</object></p>
<p>
As with the UserControl object, you can create public properties for UserDocument objects. When you create a public property, you expose the property so other applications can set or get its value. In the ActXDoc project, you'll create a single property that can be accessed by either another ActiveX document or by a form. In this procedure, you will also add a code module to the project to contain a single global module.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX document. It begins with the topic <a href="vbconcreatingdocumentobject.htm">Creating an ActiveX Document</a>.</p>
<p class=label>
<b>To add a property to FirstDoc</b>
<ol>
<li>
First add a code module to the project. On the <b>Project</b> menu, click <b>Add Module</b> to open the <b>Add Module </b>dialog box. Then double-click the <b>Module</b> icon to add a new code module to the ActXDoc project.<br><br></li>
<li>
In the <b>Properties</b> window, double-click <b>Name</b> and change the name of the module to mGlobal.<br><br></li>
<li>
In the <b>Project Explorer</b> window, double-click the module icon and add the following code to the Declarations section:<pre><code>' Object variable for FirstDoc 
Public gFirstDoc As FirstDoc 
</code></pre>
<p class=tl>
This global variable will contain the object reference that links the FirstDoc and SecndDoc ActiveX documents.</P></li>
<li>
In the <b>Project Explorer</b> window, double-click the FirstDoc icon.<br><br></li>
<li>
On the <b>Toolbox</b>, double-click the <b>TextBox</b> icon to add a new TextBox control to FirstDoc. Set its properties according to the following table.<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Text1 property</b></td>
<td class=label width=50%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=50%>Name</td>
<td width=50%>txtFirstDoc</td>
</tr>
<tr valign=top>
<td width=50%>Text</td>
<td width=50%>(nothing)</td>
</tr>
</table><br>
</li>
<li>
Position the TextBox control below the first TextBox already present on the UserDocument, as shown:<p>
<img src="avtcm087.gif" border=0></P></li>
<li>
Double-click the FirstDoc designer to open its <b>Code</b> window.<br><br></li>
<li>
On the <b>Tools </b>menu, click <b>Add Procedure</b>.<br><br></li>
<li>
In the <b>Add Procedure</b> dialog box, type "strDocProp" into the <b>Name</b> box, and click the <b>Property</b> option to create a public property; then click <b>OK</b>.<br><br></li>
<li>
Visual Basic will add code for Property Get and Property Let procedures to the module. However, modify the code as shown:<pre><code>Public Property Get strDocProp() As String
 &nbsp; ' Note: in the line above, change the return type 
 &nbsp; ' of the property from "As Variant" to 
 &nbsp; ' "As String."
 &nbsp; strDocProp = txtFirstDoc.Text
End Property

Public Property Let strDocProp(ByVal _
NewStrDocProp As String)
 &nbsp; ' Note: in the line above, change the argument 
 &nbsp; ' type from Variant to String.
 &nbsp; txtFirstDoc.Text = NewStrDocProp
End Property
</code></pre>
<p class=tl>
The code above exposes the strDocProp property as a public property of the FirstDoc ActiveX document. In other words, it delegates to the Text property of the TextBox control the work of displaying and storing the string. Now that the property is public, you can pass its value to the SecndDoc object. You will do this by modifying the code for the Go Next command button.</P></li>
<li>
In the <b>Code</b> window, modify the Click event of the cmdGoNext button to include a Set statement with the global object gFirstDoc. When you set the object variable to Me, you create a reference to the FirstDoc ActiveX document. This reference can then be used to access the public properties and methods of the document.<pre><code>Private Sub cmdGoNext_Click()
 &nbsp; ' Note: the following path may not correspond to 
 &nbsp; ' the actual path to the SecndDoc.vbd file on 
 &nbsp; ' your machine.
 &nbsp; Set gFirstDoc = Me ' &lt;-- Add this line.

 &nbsp; HyperLink.NavigateTo _
 &nbsp; App.Path &amp; "\SecndDoc.vbd" 
End Sub
</code></pre>
</li>
<li>
On the <b>Project Explorer</b> window, double-click the SecndDoc icon to bring its designer forward.<br><br></li>
<li>
Double-click the SecndDoc designer to open its Code window and add the following code to the UserDocument object's Show event.<pre><code>Private Sub UserDocument_Show()
 &nbsp; If Not gFirstDoc Is Nothing Then
 &nbsp;&nbsp;&nbsp;&nbsp; lblCaption.Caption = gFirstDoc.strDocProp
 &nbsp;&nbsp;&nbsp;&nbsp; Set gFirstDoc = Nothing
 &nbsp; End If 
End Sub
</code></pre>
<p class=tl>
In the code in step 11, you set the global object variable to the FirstDoc document. The code in step 13 tests to see if the global variable is set to an object. If it is, then the public properties of the ActiveX document are available, and the caption of the label is set to the strDocProp property from the FirstDoc document. Immediately after setting the Caption property, the global variable is destroyed (set to Nothing).</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;"It is bad practice to allow the global variable to retain a reference to the FirstDoc UserDocument; the reasons for this are covered in the "Building ActiveX Documents."</p></li>
<li>
On the <b>File</b> menu, click <b>Save Project</b>, and save the code module as mGlobal.bas.</li>
</ol>
<h3>Running the Project</h3>
<ol>
<li>
Press f5 to run the project.<br><br></li>
<li>
Type the path of the FirstDoc.vbd in the <b>Address </b>box of Internet Explorer.<br><br></li>
<li>
Type something distinctive into the new TextBox control such as "HTML was never this easy."<br><br></li>
<li>
Click <b>Go Next</b>. The text that was in the TextBox control will appear in the label of the SecndDoc document.</li>
</ol>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX document.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>To</b></td>
<td class=label width=66%><b>See</b></td>
</tr>
<tr valign=top>
<td width=34%>Go to the next step</td>
<td width=66%><a href="vbconsavingpropertiestopropertybag.htm">Saving Properties to the PropertyBag</a></td>
</tr>
<tr valign=top>
<td width=34%>Start from the beginning</td>
<td width=66%><a href="vbconcreatingdocumentobject.htm">Creating an ActiveX Document</a></td>
</tr>
</table>
</BODY>
</HTML>

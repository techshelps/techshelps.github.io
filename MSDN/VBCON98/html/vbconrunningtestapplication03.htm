<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Running the TestThing Test Application</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconrunningtestapplication03"></a>Running the TestThing Test Application</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconRunningTestApplication03C">
</object></p>
<p>
The procedures in this topic illustrate the key events in the lifetime of an object provided by an in-process component, including what happens when the DLL is unloaded forcefully by clicking the End button.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX DLL. It begins with the topic <a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</p>
<p class=label>
<b>To run the TestThing test application</b>
<ol>
<li>
Press CTRL+F5 to run the project group. Notice that no messages have appeared in the <b>Immediate</b> window yet.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;By default the <b>Compile On Demand</b> option is checked on the <b>General</b> tab of the <b>Options</b> dialog box (accessed from the <b>Tools</b> menu). When you’re debugging a component with <b>Compile On Demand</b> checked, you may find it useful to use CTRL+F5 (or <b>Start with Full Compile</b>, on the <b>Run</b> menu) to compile all the projects in the group before entering run mode. Compile errors usually require resetting the project, which means returning to design mode.</p></li>
<li>
On the <b>Thing Demo</b> dialog box, click <b>Create New Thing</b>. Before you respond to the InputBox requesting a name for the Thing, notice that the <b>Immediate </b>window now contains two debug messages:<p>
<img src="avtcm004.gif" border=0></P><p class=tl>
When the Command1_Click event procedure creates the test Thing object, two things happen. First, before the object is created, the code in <code>Sub Main</code> is executed. Only <i>after</i> <code>Sub Main</code> executes is the Thing object created.</P><p class=tl>
Notice that the Name property has no value yet.</P><p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;The Sub Main procedure of an ActiveX component is executed when the component receives the first request for one of the objects it provides, <i>before </i>the component creates the object. You should not put lengthy tasks in the Sub Main procedure, because a request to create an object may time out while waiting for <code>Sub Main</code> to execute. This is discussed in "Starting and Ending a Component" in "General Principles of Component Design."</p></li>
<li>
Type <b>First Thing </b>in the <b>InputBox</b> and click <b>OK</b>. The code you put in the Command1_Click event procedure assigns the value to the Name property of the Thing object.<p>
<img src="avtcm013.gif" border=0></P></li>
<li>
Click <b>Show the Thing </b>to display the Thing object’s properties. Notice that the Name property now has a value. Click <b>OK </b>to dismiss the message box.<br><br></li>
<li>
Click <b>Reverse the Thing’s Name </b>to call the ReverseName method of the Thing object. After the method returns, <b>Show the Thing</b> (Command2) is clicked by setting its Value property to True, and the MsgBox statement in Command2_Click() displays the updated property values. Click <b>OK</b> to dismiss the message box.<p>
<img src="avtcm014.gif" border=0></P></li>
<li>
Click <b>Create New Thing </b>again, to destroy the existing Thing object and create a new one.<p class=tl>
In the <b>Immediate </b>window, you will see a debug message from the Initialize event of the new Thing, as the New operator causes the object to be created. This is followed by the Terminate message from the original Thing, the one you named First Thing.</P><p class=tl>
The original Thing object is destroyed when the reference to the new Thing object is placed in the variable <code>mthTest</code>. At that point, there are no variables holding references to the original Thing, so it must be destroyed.</P></li>
<li>
Type <b>Second Thing </b>in the <b>InputBox</b>, then click <b>OK</b>.<br><br></li>
<li>
Click the <b>Close</b> box on <b>Thing Demo</b> to return to design mode.<i> Do not use the </i><b>End</b><i> button on the Visual Basic toolbar.</i><p class=tl>
Before the program closes, the Terminate message for the Thing object you named Second Thing is displayed in the <b>Immediate </b>window.</P><p class=tl>
When you close a program, Visual Basic cleans up all the variables that still contain object references. As each variable is set to Nothing, the object it referred to is destroyed.</P></li>
</ol>
<p>
When a program is ended abruptly, with the End button or by an End statement in code, Visual Basic reclaims any memory and resources the program was using. However, the cleanup is done as if the program had suffered a fatal error. Objects will not get their Terminate events.</p>
<p class=label>
<b>To observe the effects of the End button</b>
<ol>
<li>
Run the program again. Create a new Thing, and name it anything you like.<br><br></li>
<li>
This time, end the program using the <b>End</b> button on the toolbar. The Terminate message for the form’s Thing object is <i>not</i> displayed in the <b>Immediate </b>window.<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Remember that ending your program with the <b>End</b> button, or with an End statement in your code, halts the program <i>immediately,</i> without executing the Terminate events of any objects. It’s always better to shut your program down by unloading all the forms.</p></li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The rules of object lifetime are introduced in "Programming with Objects" in the <i>Visual Basic Programmer’s Guide.</i></p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX DLL.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>To</b></td>
<td class=label width=63%><b>See</b></td>
</tr>
<tr valign=top>
<td width=37%>Go to the next step</td>
<td width=63%><a href="vbconcircularreferencesobjectlifetime.htm">Circular References and Object Lifetime</a></td>
</tr>
<tr valign=top>
<td width=37%>Start from the beginning</td>
<td width=63%><a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</td>
</tr>
</table><br>
</BODY>
</HTML>

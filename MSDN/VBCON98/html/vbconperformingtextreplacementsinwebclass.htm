<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Performing Text Replacements in a Webclass</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconperformingtextreplacementsinwebclass"></a>Performing Text Replacements in a Webclass</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPerformingTextReplacementsInWebclassC">
</object></p>
<p>
Text replacements are useful in situations where you are generating some parts of your HTML page on the fly. For example, you might want to personalize a Web page with the user's name, as entered on a previous page in your application. You could insert a replacement indicator in the .htm file, then replace it at run time with the user's name.</p>
<p>
In a more complex example, suppose you want to populate a table with the results of a database query. You can use replacement indicators in the HTML for the table to mark where information should go, then replace these indicators with the retrieved information after your query runs.</p>
<p>
The process of performing text replacements involves scanning a webclass template file for special indicator tags and replacing them or their contents with custom content. The webclass processes these indicators automatically when it responds to the WriteTemplate method in an event procedure. WriteTemplate sends the contents of an HTML template file to the browser, after any replacements are finished.</p>
<p>
The tags processed on the server have the following format:
<ul type=disc>
<li>
A tag prefix, usually a set of characters used to indicate to the webclass that a replacement operation is necessary. For example, you might use WC@ as your tag prefix. The tag prefix is the same for each location in the template where a replacement operation must occur. You define the tag prefix by setting the TagPrefix property for each template. WC@ is the default tag prefix in Visual Basic.<br><br></li>
<li>
A tag name, usually a descriptive word, that identifies the replacement area. This is usually different for each location in the template where a replacement operation must occur. If you want to perform the same replacement in several locations, use the same tag name.<br><br></li>
<li>
Tag contents, which represent the current contents of the tag before replacement. You can use arguments in the ProcessTag event to replace either the tags and their content, or just the content.</li>
</ul>
<p>
Together, these elements provide the webclass with the information it needs to process the tag. You insert these indicators at each location in the file where you want the system to process replacements.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Sending HTML to the Browser" for more information on the WriteTemplate method and its processing. See "ProcessTag event" in the <i>Language Reference</i>.</p>
<h2>Modifying a Template File to Use Replacements</h2>
<p>
In order to perform text replacements, you must first define a tag prefix for the template, in the Webclass Designer, then use an editor to insert those tags prefixes into the file wherever you want a replacement to occur. You can indicate as many replacement areas in a file as you want.</p>
<p>
For example, suppose you have a template in your webclass called FeedbackPage. On this page, you want to perform a replacement in two areas:&nbsp; you want to insert the user's name and the date on which the user's order will be shipped. You have defined the tag prefix for this webitem to be WC@.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The tag prefix must begin with an alphabetical character and should contain a unique character to provide for optimal processing.</p>
<p>
Suppose that your FeedbackPage file looks like this before you add the replacement tags:</p>
<pre><code>&lt;HTML&gt;
&lt;BODY&gt;
&lt;P&gt;Thank you for your order. We estimate that your order will be shipped on the following date: xxx.
&lt;P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
In order to indicate replacement areas for the name and date, you would modify the file as shown below:</p>
<pre><code>&lt;HTML&gt;
&lt;BODY&gt;
&lt;P&gt;Thank you for your order, &lt;WC@customer&gt;firstlast&lt;/WC@customer&gt;. We estimate that your order will be shipped on the following date: &lt;WC@shipdate&gt;shipdate&lt;/WC@shipdate&gt;.
&lt;P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
The following figure identifies the pieces of the replacement area in the previous code:</p>
<p class=label>
<b>Replacement Indicators</b></p>
<p>
<img src="vb4tv01.gif" border=0></p>
<h2>Writing Code to Process a Replacement Area</h2>
<p>
You write all of the code to replace text in your file within the ProcessTag event. If you have a template file that contains several replacement areas and you need to treat them differently in your procedures, you would use a conditional statement such as If or Select Case to specify the different actions to take for each tag prefix on the page.</p>
<p>
The order of processing for a file with tag prefixes is:
<ol>
<li>
Visual Basic processes user code and calls the WriteTemplate method from an event handler in the application. Typically, the event handler is for the Respond event.<br><br></li>
<li>
The webclass processes and replaces all prefixed tags in the file, according to the code you wrote for the ProcessTag event.<br><br></li>
<li>
The webclass writes the template file to the Response object.<br><br></li>
<li>
The WriteTemplate method sends the template file to the browser.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The ProcessTag event cannot be fired automatically from the user's actions in the browser. It is called by the WriteTemplate method from within another event procedure.</p>
<p>
For example, in the example in the previous section, you modified an .htm file to include two replacement areas: one called "customer" and one called "shipdate". The following event procedure could be used to process those replacements:</p>
<pre><code>Sub FeedbackPage_ProcessTag(ByVal TagName as String, TagContents as _
String, SendTags as Boolean)
   'Work with previously defined variables FirstName, LastName,
   'and ShipDate
   If TagName = "wc@customer" Then
      TagContents = FirstName &amp; "" &amp; LastName
   EndIf
   If TagName = "wc@shipdate" Then
      TagContents = ShipDate
   EndIf
   SendTags = False
End Sub
</code></pre>
<p>
In this code, the webclass retrieves information from several member variables that were previously set to values the user entered. These values correspond to the user's first name, last name, and a calculated date for shipment. The values from these three variables are inserted onto the page, which is then displayed to the user.</p>
<p>
When the ProcessTag event is fired, the TagContents argument retrieves the current value of the text between the tags in the .htm file. For example, in the following line of HTML code, "customer" is the current value of the TagContents argument.</p>
<pre><code>&lt;P&gt;Thank you for your order, &lt;WC@customer&gt;customer&lt;/WC@customer&gt;. 
</code></pre>
<p>
You set new values for the TagContents in your ProcessTag event procedure. You can use the existing contents to help retrieve the new values. For example you could use a database key as your TagContents, then reference that value in your ProcessTag event procedure to retrieve a record from the database.</p>
<p class=label>
<b>To perform text replacements for a webitem in your application</b>
<ol>
<li>
In the <b>Webclass Designer</b>, click the template for which you want to define text replacements, then set the value of the <b>TagPrefix </b>property in the <b>Properties</b> window to the prefix you want to use.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The tag prefix must begin with an alphabetical character.</p></li>
<li>
Open the .htm file for the template in the editor of your choice, then insert replacement indicators anywhere you want to replace text, using this format:<p class=tl>
&lt;<i>tagprefix</i> <i>tagname</i>&gt;<i>tagcontents</i>&lt;/<i>tagprefix tagname</i>&gt;</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Argument</b></td>
<td class=label width=82%><b>Definition</b></td>
</tr>
<tr valign=top>
<td width=18%><i>tagprefix</i></td>
<td width=82%>The tag prefix you defined in the Properties window, for this template.</td>
</tr>
<tr valign=top>
<td width=18%><i>tagname</i></td>
<td width=82%>A unique identifier by which you will reference this replacement area in code. For example, for a tag prefix that will be used to insert the customer's order number, you might use the tagname "orderno."</td>
</tr>
<tr valign=top>
<td width=18%><i>tagcontents</i></td>
<td width=82%>A placeholder for the content you will insert. This argument can also be used to provide information about what the content should be, or to hold information that will be needed when processing the replacement, such as a database key.</td>
</tr>
</table><br>
</li>
<li>
In the <b>Webclass Designer</b>, right-click the template and click <b>View Code</b>.<br><br></li>
<li>
Write code for the ProcessTag event for the webitem, using an If or Select Case statement to work through each replacement area in the file.</li>
</ol>
<h2>Rescanning for Replacement Areas</h2>
<p>
In normal replacement processing, the webclass automatically scans the .htm file once to find all tag prefixes in the file when the webclass processes the WriteTemplate event. After finding these replacement areas, the webclass processes the tags and replaces them as indicated in code. However, your code might indicate that the webclass should insert additional tag prefixes when it replaces one of the original tags. In this situation, the webclass must search the replacement area again for these new replacement indicators and process them as well.</p>
<p>
You can tell the webclass to search again by setting the ReScanReplacements property for the webitem. The ReScanReplacements property causes the webclass to make an additional pass through the replacement tags during the ProcessTag event. You must write code for any additional replacement areas you generate in order for the ProcessTag event to work through them.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The ReScanReplacements property tells the webclass to make another search during the ProcessTag event only. You cannot use this property to scan for replacement areas during other events.</p>
<p class=label>
<b>To enable the webclass to recursively check the file for new tag prefixes</b>
<ul type=disc>
<li>
In the <b>Properties</b> window, select the webclass and set the <b>ReScanReplacements</b> property to <b>True</b>.</li>
</ul>
</BODY>
</HTML>

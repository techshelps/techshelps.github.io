<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the HyperLink Object with ActiveX Documents</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusinghyperlinkactx"></a>Using the HyperLink Object with ActiveX Documents</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingHyperLinkActXC">
</object></p>
<p>
If you target a Web browser as your container application, and you create more than one ActiveX document, you must use the HyperLink object to navigate between the different documents.</p>
<p>
The Hyperlink object gives your documents access to ActiveX hyperlinking functionality. Using the properties and methods of the Hyperlink object, your ActiveX document can request a hyperlink-aware container, such as Microsoft Internet Explorer, to jump to a given URL.</p>
<h2>The NavigateTo Method</h2>
<p>
The NavigateTo method executes a hyperlink jump to the target specified in the URL argument. The URL can be set to an HTML, Word, or Excel document as well as a .vbd file. For example, the following code navigates to the www.microsoft.com Web page:</p>
<pre><code>Private Sub cmdGoTo_Click()
   UserDocument.Hyperlink.NavigateTo _
      "http://www.microsoft.com"
End Sub
</code></pre>
<p>
To jump from one ActiveX document to another, you can use the same method, as shown.</p>
<pre><code>Private GoNextDoc_Click()
   ' Assuming the next ActiveX document is named
   ' MyDoc2.vbd
      UserDocument.Hyperlink.NavigateTo _
      "file://c:\ActXDocs\MyDoc2.vbd"
</code></pre>
<h2>Dynamically Constructing an Absolute Path</h2>
<p>
When you compile an ActiveX project with multiple ActiveX documents, Visual Basic creates the .vbd files in the same directory as the ActiveX .dll or .exe. However, if you move the .vbd files into another directory, you must give the NavigateTo method a fully qualified path for every .vbd file. However, because you cannot determine where a user will place the .vbd files, you must be able to dynamically create the absolute path.</p>
<p>
The following code dynamically constructs the path of a .vbd file by parsing the LocationName property of Internet Explorer which returns the absolute path of the document currently displayed by Internet Explorer. The code parses this path, and discards the name of the current .vbd file. The code then appends the name of a second ActiveX document to the remainder of the path.</p>
<pre><code>Dim strPath As String&nbsp;&nbsp;&nbsp; ' String to be parsed
Dim strAbsPath As String    ' Result of parsing
Dim intI As Integer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Character position counter

' Return the path of the current ActiveX document.
strPath = Trim$(UserDocument.Parent.LocationName)

' Find the position of the last separator character.
For intI = Len(strPath) To 1 Step -1
   If Mid$(StrPath, intI, 1) = "/" Or _
      Mid$(StrPath, intI, 1) = "\" Then Exit For
Next intI

' Strip the name of the current .vbd file.
strAbsPath = Left$(StrPath, intI)

' Navigate to the second ActiveX document.
UserDocument.Hyperlink.NavigateTo _
   strAbsPath &amp; "MyDoc2.vbd"
</code></pre>
<h3>Automatically Starting a Browser</h3>
<p>
If the NavigateTo method is invoked from an ActiveX document contained in an application that supports the Hyperlink object (such as Internet Explorer), the same application instance will be used to "go" to the target document. If the application does not support hyperlinking (Microsoft Binder, for example), then an application that does (determined by the registry) will be started to handle the request. In other words, if the method is invoked from within an application that doesn't support hyperlinking, another that does will be started.</p>
<h3>Navigating Between ActiveX Documents</h3>
<p>
The NavigateTo method can be used to jump from one ActiveX document to another; in fact, it is the only way to start another document in a browser. Thus, if you create a suite of ActiveX documents, and your target container application is a browser that supports the Hyperlink object, you must use the NavigateTo method to open the next document. For example, the following code will cause the second (in a suite) document to appear in the Internet Explorer when the user clicks the cmdGoNext button on the first document:</p>
<pre><code>Private Sub cmdGoNext_Click()
   ' The second ActiveX document's file is named _
   ' "ActiveDoc2.vbd"
   UserDocument.HyperLink.NavigateTo _
   "file://c:\ActiveX\ActiveDoc2.vbd"
End Sub
</code></pre>
<p>
The NavigateTo method also includes a second argument, the FrameName argument, that specifies a particular frame in the document to jump to.</p>
<h3>The GoBack and GoForward Methods</h3>
<p>
The GoBack and GoForward methods execute a jump forward or backward to the next document in the browser's history list. These methods only work with hosts that are Hyperlink aware (such as Internet Explorer 3.0 and later).</p>
<p>
When implementing the GoForward or GoBack method, be sure to use error checking in case there is no document in the history list to jump to. An example is shown:</p>
<pre><code>Private Sub cmdGoForward_Click()
   On Error GoTo noDocInHistory
   UserDocument.Hyperlink.GoForward
   Exit Sub
noDocInHistory:
   Resume Next
End Sub</code></pre>
</BODY>
</HTML>

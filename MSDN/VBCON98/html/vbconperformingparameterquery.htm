<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Performing a Parameter Query</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconperformingparameterquery"></a>Executing a Parameter Query</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPerformingParameterQuery_C">
</object></p>
<h2>RDO</h2>
<p>
The procedure below illustrates a method for performing a parameterized Select query: that is, a SELECT statement that requires one or more parameters. This process is done in two steps:
<ol>
<li>
Build a query that expects a parameter, pass in the first parameter, then perform the query.<br><br></li>
<li>
Perform the query again with new parameters.</li>
</ol>
<p>
The first time the query is called, RDO attempts to create a new RDO query object. Since the object is appended to the rdoConnection object’s rdoQueries collection, you can reference it each time the procedure is called. Each subsequent time the procedure is called, the Refresh method re-executes the query. This technique builds a temporary stored procedure (SP) behind the scenes that is referenced by the Requery method. The temporary SP is dropped when the connection is closed.</p>
<pre><code>Private Sub ParmQueryButton_Click()
 &nbsp; Dim Qy As New rdoQuery
 &nbsp; Dim rs As rdoResultset
 &nbsp; Static FirstTime As Boolean
 &nbsp; If cn.rdoQueries.Count = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp; FirstTime = True
 &nbsp;&nbsp;&nbsp;&nbsp; sql = "select * from authors where year_born = ?"
 &nbsp;&nbsp;&nbsp;&nbsp; Set Qy = cn.CreateQuery("Pq", sql)
 &nbsp; End If
 &nbsp; Qy(0) = QueryParam.Text
 &nbsp; If FirstTime Then
 &nbsp;&nbsp;&nbsp;&nbsp; Set rs = Qy.OpenResultset()
 &nbsp;&nbsp;&nbsp;&nbsp; FirstTime = False
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; rs.Requery
 &nbsp; End If
 &nbsp; rdoGrid1.ShowData rs
 &nbsp; rs.Close
End Sub
</code></pre>
<h2>ADO</h2>
<p>
This procedure is designed to perform a table-access query that accepts a parameter. You use the "?" character (as in the previous RDO example) to indicate where the parameter is to be placed. In this case, though, you don't create an rdoQuery object that is kept in a collection off the rdoConnection object; you instead use a stand-alone ADO Command object created (and scoped) earlier. The first time through, you set up the Command properties, and each time thereafter, you simply execute the command after having changed the parameter.</p>
<p>
ADO gives you a lot of flexibility here—more, in some cases than RDO. If you tell ADO everything it needs to know about a query, it won't have to perform informational queries against the database to get missing information, so queries run faster.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You don’t have to build the ADO Parameters collection in code, since it's automatically created for you just like when you use RDO. However, it is possible to do so, and doing so can improve performance, at the cost of a little code complexity. If you elect to do it, make sure that the Command is associated with an open connection so ADO can query the service provider (and the server) for the parameter's description.</p>
<p>
To run the query and create the resultset, use the Execute method on the Command object.</p>
<pre><code>Private Sub ParmQueryButton_Click()
 &nbsp; If Cmd.CommandText = "" Then
 &nbsp;&nbsp;&nbsp;&nbsp; Cmd.ActiveConnection = cn
 &nbsp;&nbsp;&nbsp;&nbsp; With Cmd
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .CommandText = "select * from authors where year_born = ?"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .CommandType = adCmdText
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .CommandTimeout = 15
 &nbsp;&nbsp;&nbsp;&nbsp; End With
'
'   The following section of code is not required, 
'    but can make execution faster. It eliminates the need
'   for ADO to fetch the parameter metrics from the server.
'
 &nbsp;&nbsp;&nbsp;&nbsp; With Parm
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Type = adInteger
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Size = 4
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Direction = adParamInput
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Value = QueryParam.Text
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cmd.Parameters.Append Parm
 &nbsp;&nbsp;&nbsp;&nbsp; End With
 &nbsp; End If

 &nbsp; Cmd.Parameters(0).Value = QueryParam.Text
 &nbsp; Set rs = Cmd.Execute()
 &nbsp; ADOGrid1.ShowData rs
 &nbsp; rs.Close
End Sub
</code></pre>
</BODY>
</HTML>

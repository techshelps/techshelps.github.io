<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Benefits of Good Object-Oriented Design</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconthebenefitsofgoodobjectorienteddesign"></a>The Benefits of Good Object-Oriented Design</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheBenefitsOfGoodObjectOrientedDesignC">
</object></p>
<p>
This topic summarizes the results of the code example begun in "Public Collection Example: The House of Straw," and continued in "Private Collection Example: The House of Sticks" and "Creating Your Own Collection Class: The House of Bricks." You may want to read those topics before beginning this one.</p>
<p>
Creating the Employees collection class results in a very clean, modular coding style. All the code for the collection is in the collection class (encapsulation), reducing the size of the SmallBusiness class module. If collections of Employee objects appear in more than one place in your object hierarchy, reusing the collection class requires no duplication of code.</p>
<h3>Enhancing Collection Classes</h3>
<p>
You can implement additional methods and properties for your collection classes. For example, you could implement Copy and Move methods, or a read-only Parent property that contains a reference to the SmallBusiness object.</p>
<p>
You could also add an event. For example, every time the Add or Remove method changed the number of items in your collection, you could raise a CountChanged event.</p>
<h3>Robustness, Robustness, Robustness</h3>
<p>
You don't always have to implement collections in the most robust way possible. However, one of the benefits of programming with objects is code reuse; it's much easier to reuse objects than to copy source code, and it's much safer to use robust, encapsulated code.</p>
<p>
A wise man once said, "If you want to write really robust code, you have to assume that really bad things will happen."</p>
<h3>Collection Classes and Component Software</h3>
<p>
If you're using the Professional or Enterprise Edition of Visual Basic, you can turn your project into an ActiveX component, so that other programmers in your organization can use the objects you've created.</p>
<h3>Steps to Implement a Collection Class</h3>
<p>
The following list summarizes the steps required to create a collection class.
<ol>
<li>
Add a class module to your project, and give it a name — usually the plural of the name of the object the collection class will contain. (See "Naming Properties, Methods, and Events" earlier in this chapter.)<br><br></li>
<li>
Add a private variable to contain a reference to the Collection object your properties and methods will delegate to.<br><br></li>
<li>
In the Class_Initialize event procedure, create the Collection object. (If you want to defer creation of this object until it's needed, you can declare the private variable in step 2 As New Collection. This adds a small amount of overhead each time the Collection is accessed.)<br><br></li>
<li>
Add a Count property and Add, Item, and Remove methods to your class module; in each case, delegate to the private Collection by calling its corresponding member.<br><br></li>
<li>
When you implement the Add method, you can override the behavior of the Collection object's undiscriminating Add method by accepting only objects of one type. You can even make it impossible to add externally created objects to your collection, so that your Add method completely controls the creation <i>and initialization</i> of objects.<br><br></li>
<li>
Use the Procedure Attributes dialog box to make the Item method the default for your collection class.<br><br></li>
<li>
Add a NewEnum method, as shown below. Use the Procedure Attributes dialog box to mark it as hidden, and to give it a Procedure ID of –4 so that it will work with For Each … Next.<pre><code>Public Function NewEnum() As IUnknown
 &nbsp; Set NewEnum = mcol.[_NewEnum]
End Function
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The code above assumes that the private variable in step 2 is named <code>mcol</code>.</p></li>
<li>
Add custom properties, methods, and events to the collection class.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Class Builder utility, included in the Professional and Enterprise editions of Visual Basic, will create collection classes for you. You can customize the resulting source code.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;You can read more about software components in <i>Creating ActiveX Components,</i> in the <i>Component Tools Guide</i>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Constants</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconconstants"></a>Constants</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconConstantsC">
</object></p>
<p>
Often you'll find that your code contains constant values that reappear over and over. Or you may find that the code depends on certain numbers that are difficult to remember — numbers that, in and of themselves, have no obvious meaning.</p>
<p>
In these cases, you can greatly improve the readability of your code — and make it easier to maintain — by using constants. A <i>constant</i> is a meaningful name that takes the place of a number or string that does not change. Although a constant somewhat resembles a variable, you can't modify a constant or assign a new value to it as you can to a variable. There are two sources for constants:
<ul type=disc>
<li>
<i>Intrinsic</i> or <i>system-defined</i> constants are provided by applications and controls. Visual Basic constants are listed in the Visual Basic (VB) and Visual Basic for applications (VBA) object libraries in the Object Browser. Other applications that provide object libraries, such as Microsoft Excel and Microsoft Project, also provide a list of constants you can use with their objects, methods, and properties. Constants are also defined in the object library for each ActiveX control. For details on using the Object Browser, see "Programming with Objects."<br><br></li>
<li>
<i>Symbolic</i> or <i>user-defined</i> constants are declared using the Const statement. User-defined constants are described in the next section, "Creating Your Own Constants."</li>
</ul>
<p>
In Visual Basic, constant names are in a mixed-case format, with a prefix indicating the object library that defines the constant. Constants from the Visual Basic and Visual Basic for applications object libraries are prefaced with "vb" — for instance, vbTileHorizontal.</p>
<p>
The prefixes are intended to prevent accidental collisions in cases where constants have identical names and represent different values. Even with prefixes, it's still possible that two object libraries may contain identical constants representing different values. Which constant is referenced in this case depends on which object library has the higher priority. For information on changing the priority of object libraries, see the "References Dialog Box."</p>
<p>
To be absolutely sure you avoid constant name collisions, you can qualify references to constants with the following syntax:</p>
<p>
[<i>libname</i>.][<i>modulename</i>.]<i>constname</i></p>
<p>
<i>Libname</i> is usually the class name of the control or library. <i>Modulename</i> is the name of the module that defines the constant. <i>Constname</i> is the name of the constant. Each of these elements is defined in the object library, and can be viewed in the Object Browser.</p>
<h2>Creating Your Own Constants</h2>
<p>
The syntax for declaring a constant is:</p>
<p>
[<b>Public|Private</b>] <b>Const</b> <i>constantname</i>[<b>As</b> <i>type</i>] <b>=</b> <i>expression</i></p>
<p>
The argument <i>constantname</i> is a valid symbolic name (the rules are the same as those for creating variable names), and <i>expression</i> is composed of numeric or string constants and operators; however, you can't use function calls in <i>expression</i>.</p>
<p>
A Const statement can represent a mathematical or date/time quantity:</p>
<pre><code>Const conPi = 3.14159265358979
Public Const conMaxPlanets As Integer = 9
Const conReleaseDate = #1/1/95#
</code></pre>
<p>
The Const statement can also be used to define string constants:</p>
<pre><code>Public Const conVersion = "07.10.A"
Const conCodeName = "Enigma"
</code></pre>
<p>
You can place more than one constant declaration on a single line if you separate them with commas:</p>
<pre><code>Public Const conPi = 3.14, conMaxPlanets = 9, _
conWorldPop = 6E+09
</code></pre>
<p>
The expression on the right side of the equal sign ( = ) is often a number or literal string, but it can also be an expression that results in a number or string (although that expression can't contain calls to functions). You can even define constants in terms of previously defined constants:</p>
<pre><code>Const conPi2 = conPi * 2
</code></pre>
<p>
Once you define constants, you can place them in your code to make it more readable. For example:</p>
<pre><code>Static SolarSystem(1 To conMaxPlanets)
If numPeople &gt; conWorldPop Then Exit Sub
</code></pre>
<h2>Scoping User-Defined Constants</h2>
<p>
A Const statement has scope like a variable declaration, and the same rules apply:
<ul type=disc>
<li>
To create a constant that exists only within a procedure, declare it within that procedure.<br><br></li>
<li>
To create a constant available to all procedures within a module, but not to any code outside that module, declare it in the Declarations section of the module.<br><br></li>
<li>
To create a constant available throughout the application, declare the constant in the Declarations section of a standard module, and place the Public keyword before Const. Public constants cannot be declared in a form or class module.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information regarding scope, see "Understanding the Scope of Variables" earlier in this chapter.</p>
<h2>Avoiding Circular References</h2>
<p>
Because constants can be defined in terms of other constants, you must be careful not to set up a <i>cycle</i>, or circular reference between two or more constants. A cycle occurs when you have two or more public constants, each of which is defined in terms of the other. </p>
<p>
For example:</p>
<pre><code>' In Module 1:
Public Const conA = conB * 2   ' Available throughout 
                              ' application.
' In Module 2:
Public Const conB = conA / 2   ' Available throughout 
                              ' application.
</code></pre>
<p>
If a cycle occurs, Visual Basic generates an error when you attempt to run your application. You cannot run your code until you resolve the circular reference. To avoid creating a cycle, restrict all your public constants to a single module or, at most, a small number of modules.</p>
</BODY>
</HTML>

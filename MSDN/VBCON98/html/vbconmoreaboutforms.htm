<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>More About Forms</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmoreaboutforms"></a>More About Forms</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconMoreAboutFormsC">
</object></p>
<p>
In addition to the basics of form design, you need to think about the beginning and end of your application. There are several techniques available for determining what the user will see when your application starts. It's also important to be aware of the processes that occur when an application is unloaded.</p>
<h2>Setting the Startup Form</h2>
<p>
By default, the first form in your application is designated as the <i>startup form</i>. When your application starts running, this form is displayed (so the first code to execute is the code in the Form_Initialize event for that form). If you want a different form to display when your application starts, you must change the startup form.</p>
<p class=label>
<b>To change the startup form</b>
<ol>
<li>
From the <b>Project</b> menu, choose <b>Project Properties</b>.<br><br></li>
<li>
Choose the <b>General</b> tab.<br><br></li>
<li>
In the <b>Startup Object</b> list box, select the form you want as the new startup form.<br><br></li>
<li>
Choose <b>OK</b>.</li>
</ol>
<h2>Starting Without a Startup Form</h2>
<p>
Sometimes you might want your application to start without any form initially loaded. For example, you might want to execute code that loads a data file and then displays one of several different forms depending on what is in the data file. You can do this by creating a Sub procedure called Main in a standard module, as in the following example:</p>
<pre><code>Sub Main()
   Dim intStatus As Integer   
   ' Call a function procedure to check user status.
   intStatus = GetUserStatus
   ' Show a startup form based on status.
   If intStatus = 1 Then
      frmMain.Show
   Else
      frmPassword.Show
   End If
</code></pre>
<p>
This procedure must be a Sub procedure, and it cannot be in a form module. To set the Sub Main procedure as the startup object, from the Project menu, choose Project Properties, select the General tab, and select Sub Main from the Startup Object box.</p>
<h2>Displaying a Splash Screen on Startup</h2>
<p>
If you need to execute a lengthy procedure on startup, such as loading a large amount of data from a database or loading several large bitmaps, you might want to display a splash screen on startup. A splash screen is a form, usually displaying information such as the name of the application, copyright information, and a simple bitmap. The screen that is displayed when you start Visual Basic is a splash screen.</p>
<p>
To display a splash screen, use a Sub Main procedure as your startup object and use the Show method to display the form:</p>
<pre><code>Private Sub Main()
   ' Show the splash screen.   
   frmSplash.Show
   ' Add your startup procedures here.
   …
   ' Show the main form and unload the splash screen.
   frmMain.Show
   Unload frmSplash
End Sub
</code></pre>
<p>
The splash screen occupies the user's attention while your startup routines are executing, giving the illusion that the application is loading faster. When the startup routines are completed, you can load your first form and unload the splash screen.</p>
<p>
In designing a splash screen, it's a good idea to keep it simple. If you use large bitmaps or a lot of controls, the splash screen itself may be slow to load.</p>
<h2>Ending an Application</h2>
<p>
An event-driven application stops running when all its forms are closed and no code is executing. If a hidden form still exists when the last visible form is closed, your application will appear to have ended (because no forms are visible), but will in fact continue to run until all the hidden forms are closed. This situation can arise because any access to an unloaded form's properties or controls implicitly loads that form without displaying it.</p>
<p>
The best way to avoid this problem when closing your application is to make sure all your forms are unloaded. If you have more than one form, you can use the Forms collection and the Unload statement. For example, on your main form you could have a command button named cmdQuit that lets a user exit the program. If your application has only one form, the Click event procedure could be as simple as this:</p>
<pre><code>Private Sub cmdQuit_Click ()
   Unload Me
End Sub
</code></pre>
<p>
If your application uses multiple forms, you can unload the forms by putting code in the Unload event procedure of your main form. You can use the Forms collection to make sure you find and close all your forms. The following code uses the forms collection to unload all forms:</p>
<pre><code>Private Sub Form_Unload (Cancel As Integer)
   Dim i as integer
   ' Loop through the forms collection and unload 
   ' each form.
   For i = Forms.Count – 1 to 0 Step - 1
      Unload Forms(i)
   Next
End Sub 
</code></pre>
<p>
There may be cases where you need to end your application without regard for the state of any existing forms or objects. Visual Basic provides the End statement for this purpose.</p>
<p>
The End statement ends an application immediately: no code after the End statement is executed, and no further events occur. In particular, Visual Basic will not execute the QueryUnload, Unload or Terminate event procedures for any forms. Object references will be freed, but if you have defined your own classes, Visual Basic will not execute the Terminate events of objects created from your classes.</p>
<p>
In addition to the End statement, the Stop statement halts an application. However, you should use the Stop statement only while debugging, because it does not free references to objects.</p>
<p>
<b><B>For More Information</B>&nbsp;&nbsp;&nbsp;</b>For information on the Stop statement, see "Using Break Mode" in "Error Handling and Debugging," and "Stop Statement" in the <i>Language Reference</i>. For information on the forms collection or freeing references to objects, see "Programming with Objects."</p>
</BODY>
</HTML>

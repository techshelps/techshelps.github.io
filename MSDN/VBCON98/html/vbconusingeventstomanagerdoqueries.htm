<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using RDO Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingeventstomanagerdoqueries"></a>Using RDO Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingEventsToManageRDOQueriesC">
</object></p>
<p>
Instead of establishing polling loops to periodically test for the completion of asynchronous operations, you can code your own event handlers to trap the query, connection, and other asynchronous operation events as they occur.</p>
<p>
The following tables briefly describes each of the RDO asynchronous query events.</p>
<p class=label>
<b>rdoEngine Object Asynchronous Events</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>Event</b></td>
<td class=label width=65%><b>Fires …</b></td>
</tr>
<tr valign=top>
<td width=35%>InfoMessage</td>
<td width=65%>When SQL_SUCCESS_WITH_INFO is returned by an ODBC API function.</td>
</tr>
</table><br>
<p class=label>
<b>rdoEnvironment Object Asynchronous Events</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>Event</b></td>
<td class=label width=65%><b>Fires …</b></td>
</tr>
<tr valign=top>
<td width=35%>BeginTrans</td>
<td width=65%>After the BeginTrans method has completed.</td>
</tr>
<tr valign=top>
<td width=35%>CommitTrans</td>
<td width=65%>After the CommitTrans method has completed.</td>
</tr>
<tr valign=top>
<td width=35%>RollbackTrans</td>
<td width=65%>After the RollbackTrans method has completed.</td>
</tr>
</table><br>
<p class=label>
<b>rdoConnection Object Asynchronous Events</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>Event</b></td>
<td class=label width=65%><b>Fires …</b></td>
</tr>
<tr valign=top>
<td width=35%>BeforeConnect</td>
<td width=65%>Before the call to SQLDriverConnect so the developer can do his own prompting.</td>
</tr>
<tr valign=top>
<td width=35%>Connect</td>
<td width=65%>After a connection operation completes — successfully or not.</td>
</tr>
<tr valign=top>
<td width=35%>Disconnect</td>
<td width=65%>After a connection has been closed.</td>
</tr>
<tr valign=top>
<td width=35%>QueryComplete</td>
<td width=65%>After an query completes — successfully or not.</td>
</tr>
<tr valign=top>
<td width=35%>QueryTimeout</td>
<td width=65%>When the QueryTimeout time has elapsed and the query has not yet completed.</td>
</tr>
<tr valign=top>
<td width=35%>WillExecute</td>
<td width=65%>Before the query is run, allowing the developer to prohibit the query from running or make last-minute adjustments to the SQL.</td>
</tr>
</table><br>
<p class=label>
<b>rdoResultset Object Asynchronous Events</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Event</b></td>
<td class=label width=67%><b>Fires …</b></td>
</tr>
<tr valign=top>
<td width=33%>Associate</td>
<td width=67%>After a new connection is associated with the object.</td>
</tr>
<tr valign=top>
<td width=33%>Dissociate</td>
<td width=67%>After the connection is set to nothing.</td>
</tr>
<tr valign=top>
<td width=33%>ResultsChange</td>
<td width=67%>After current rowset is changed (multiple result sets).</td>
</tr>
<tr valign=top>
<td width=33%>RowCurrencyChange</td>
<td width=67%>After the state of the current row has changed (due to an edit, delete, or insert) or when the current row pointer has changed.</td>
</tr>
<tr valign=top>
<td width=33%>RowStatusChange</td>
<td width=67%>After the state of the current row has changed (due to an edit, delete or insert).</td>
</tr>
<tr valign=top>
<td width=33%>WillAssociate</td>
<td width=67%>Before a new connection is associated with the object — developer can override or cancel the operation.</td>
</tr>
<tr valign=top>
<td width=33%>WillDissociate</td>
<td width=67%>Before the connection is set to nothing — developer can override or cancel the operation.</td>
</tr>
<tr valign=top>
<td width=33%>WillUpdateRows</td>
<td width=67%>Before an update to the server occurs — developer can override or cancel the operation.</td>
</tr>
</table><br>
<p class=label>
<b>rdoColumn Object Asynchronous Events</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>Event</b></td>
<td class=label width=65%><b>Fires …</b></td>
</tr>
<tr valign=top>
<td width=35%>DataChange</td>
<td width=65%>When the value of the column has changed.</td>
</tr>
<tr valign=top>
<td width=35%>WillChangeData</td>
<td width=65%>Before data is changed in the column; allows developer to cancel.</td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Guidelines for Raising Errors from Your Component</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconraisingerrorsfromyourcomponent"></a>Guidelines for Raising Errors from Your Component</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconRaisingErrorsFromYourComponentC">
</object></p>
<p>
Use the Raise method of the Err object to raise errors that can be trapped by client applications. When you call the Raise method in the error handler of one of your methods or Property procedures, or when error handling is turned off (On Error GoTo 0), the error will be raised in the client application, in the procedure that directly called your method.</p>
<p>
If the procedure that called your method has no error handler, the error condition moves up the call tree of the client until it reaches a procedure that has an error handler, just as any other error would.</p>
<p>
When raising an error condition from your component, you don’t need to worry about whether the client is written in Visual Basic, Microsoft Visual C++, or another programming language. Any client application can receive the errors your component raises.</p>
<p>
Here are a few guidelines you should follow when raising errors from a component.
<ul type=disc>
<li>
The error number you return to client applications is generated by adding an intrinsic constant (vbObjectError) to your internal error number. The resulting value is the one you should document for your users.<br><br></li>
<li>
The internal error numbers you add to vbObjectError should be in the range 512 to 65535 (&amp;H200 to &amp;HFFFF). Numbers below 512 may conflict with values reserved for use by the system.<br><br></li>
<li>
Establish a "fatal error" or "general failure" code and message for conditions from which your component can’t recover.<br><br></li>
<li>
When calling Err.Raise, supply both an error number and a text string describing the error.<br><br></li>
<li>
Document your errors in the Help file for your component. For the convenience of your users, you may want to show error numbers in both decimal and hexadecimal format.</li>
</ul>
<p>
For example, you might implement the SpinDirection property of the Widget object as a Property procedure, to ensure that it accepts only certain values, as in the following code fragment from the Widget class module of the hypothetical SmallMechanicals component.</p>
<pre><code>' Enumeration for SpinDirection property values. 
'&nbsp;&nbsp; (The prefix "sm" identifies it as belonging to the
'&nbsp;&nbsp; SmallMechanicals component.)
Public Enum smSpinDirection
   smSDClockwise
   smSDCounterClockwise
End Enum

' Module-level storage for SpinDirection property.
Private msdSpinDirection As smSpinDirection

' Implementation of the SpinDirection property.
Property Get SpinDirection() As smSpinDirection
   SpinDirection = msdSpinDirection
End Property

Property Let SpinDirection(ByVal sdNew As _
      smSpinDirection)
   ' The Select Case does nothing if sdNew contains
   ' a valid value.
   Select Case sdNew
      Case smSDClockwise
      Case smSDCounterClockwise
      Case Else
         Err.Raise _
            (ERR_SPN_INVALID + vbObjectError), _
            CMP_SOURCENAME, _
            LoadResString(ERR_SPN_INVALID)
   End Select
   ' If no error, assign the new property value.
   msdSpinDirection = sdNew
End Property
</code></pre>
<p>
The code above assumes that <code>ERR_SPN_INVALID</code> and <code>CMP_SOURCENAME</code> are public constants declared in a standard module, and that error text strings are stored in a resource file.</p>
<p>
Because there is no error handler in the Property Let procedure used to set the value of the SpinDirection property, the error is raised in the client application, in the procedure that attempted to set the invalid value.</p>
<p>
The text string for the error message is loaded from the component project’s resource file, using the internal error number as an index. This technique reduces the amount of memory required to run the component. By concentrating all the text strings in one place, it also simplifies the creation of international versions of the component.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Programmers who have used the C++ language will recognize vbObjectError as <i>facility interface </i>(FACILITY_ITF), the base constant for the range of errors reserved for a component’s interface.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"Handling Errors in a Component" discusses the handling of internal errors, particularly those raised by components your component is using. For more on the Err object and resource files, see "Err object" in the <i>Language Reference</i> and "resource files" in the index.</p>
<p>
Providing error messages in multiple languages is discussed in "Localizing Components," later in this chapter, and in "International Issues" in the <i>Visual Basic Programmer’s Guide.</i></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding a Font Object to Your User Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingfontobjecttoyourusercontrol"></a>Adding a Font Object to Your User Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingFontObjectToYourUserControl_C">
</object></p>
<p>
Although a UserControl object has a Font property, there are situations where you will need to implement a Font object of your own. For example, if you want to allow the end user of your control to select a font at run time, the standard Font property won't work.</p>
<p>
Even though the Font property is exposed and can be set in the Properties window at design time or via code at run time, the font displayed on the user control doesn't change. This is because the control never receives notification that the property has changed; consequently, it never fires its Paint event.</p>
<p>
To resolve this problem, you need to add your own StdFont object to the control. The StdFont object is exactly the same as the UserControl Font with one exception — it provides a FontChanged event. You need to declare it using the WithEvents keyword in order to expose the FontChanged event:</p>
<pre><code>Private WithEvents mFont as StdFont
</code></pre>
<p>
In the Initialize event of your user control, the following code creates an instance of the StdFont object and assigns it to the User Control's Font property:</p>
<pre><code>Private Sub UserControl_Initialize()
   Set mFont = New StdFont
   Set UserControl.Font = mFont
End Sub
</code></pre>
<p>
To expose your Font to the outside world, you'll need a Property Let / Property Set pair:</p>
<pre><code>Public Property Get Font() as StdFont
   Set Font = mFont
End Property

Public Property Set Font (mnewFont as stdFont)
   With mFont
      .Bold = mnewFont.Bold
      .Italic = mnewFont.Italic
      .Name = mnewFont.Name
      .Size = mnewFont.Size
   End With
   PropertyChanged "Font"
End Property
</code></pre>
<p>
Notice that this code uses With to set each property of the StdFont object individually: Simply assigning <code>mnewFont</code> to <code>mFont</code> would only change the default Name property.</p>
<p>
You'll also need to add code in the FontChanged event to reassign the StdFont object and to force a Paint event:</p>
<pre><code>Private Sub mFont_FontChanged(ByVal PropertyName As String)
   Set UserControl.Font = mFont
   Refresh
End Sub
</code></pre>
<p>
Finally, in the Paint event you can add code to display text. The text will be displayed in the newly selected font.</p>
<pre><code>Private Sub UserControl_Paint()
   Cls      ' Clear the display
   Print "Hello"
End Sub
</code></pre>
<p>
Now the Font property of your user control can be set at either design time or at run time and the changes will immediately be visible.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Licensing Issues for Controls</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlicensingissuesforolecontrols"></a>Licensing Issues for Controls</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconLicensingIssuesForOLEControlsC">
</object></p>
<p>
Licensing for controls is a sensitive issue. After you've spent hundreds of hours developing a control, what if somebody else puts an instance of it on a UserControl, exposes all the properties, methods, and events, adds one or two trivial properties, then compiles and sells it as a new control?</p>
<p>
Visual Basic's licensing support protects your investment. When you add licensing support to your control component, a license key is compiled into it. This key covers all the controls in the component.</p>
<p>
Running your Setup program transfers the license key to another computer's registry, allowing your controls to be used for development. Simply copying your .ocx file to another computer and registering it does not transfer the license key, so the controls cannot be used.</p>
<p class=label>
<b>To add licensing support to your control project</b>
<ul type=disc>
<li>
On the <b>Project</b> menu, click <b>&lt;MyProject&gt; Properties</b> to open the <b>Project Properties</b> dialog box. Select the <b>General</b> tab, check <b>Require License Key</b>, then click <b>OK</b>.</li>
</ul>
<p>
When you make the .ocx file, Visual Basic will create a .vbl file containing the registry key for licensing your control component. When you use the Package and Deployment wizard to create a setup for your .ocx, the .vbl file is automatically included in the setup procedure.</p>
<h2>How Licensing Works</h2>
<p>
When a developer purchases your control component and runs your Setup program, the license key is added to the registry on her computer.</p>
<p>
Thereafter, whenever the developer puts an instance of your control on a form, Visual Basic (or any other developer's tool) tells the control to create itself using the registry key.</p>
<p>
If a developer has obtained a copy of your control component, but not the registry key, the control cannot create instances of itself in the development environment.</p>
<h3>When a Developer Distributes Applications</h3>
<p>
When the developer compiles a program that uses one of your controls, the license key for your component is compiled in. When she creates a Setup for the program, your .ocx is included. Users can then purchase the compiled program and run Setup. Your control is installed on each user's machine — but your license key is not added to the registry.</p>
<p>
Each time a user runs the program, the Visual Basic run-time DLL asks your control to create a run-time instance of itself, and passes it the key that was compiled into the program. Your control doesn't have to check the registry, because Visual Basic passed it the key.</p>
<p>
Thus the user can run a compiled application without having to have the control component's license key in the registry.</p>
<h3>Licensing and the User</h3>
<p>
Suppose the user later obtains a copy of Visual Basic. Noticing that your control component is installed on his computer, he adds your .ocx file to a project.</p>
<p>
The first time he tries to put an instance of one of your controls on a form, Visual Basic tells the control to create itself using the registry key. The key is not there, so the control component can't be used in the development environment.</p>
<h4>Licensing and General-Purpose User Applications</h4>
<p>
When desktop applications such as Microsoft Word and Microsoft Excel create control instances on documents or user forms, they tell the control to create an instance of itself using the license key in the registry. This means that a licensed control cannot be used by an end user unless the user has purchased your control component and installed it.</p>
<p>
User documents cannot have the license key compiled into them. Suppose the user of a desktop application gives a coworker a copy of your control component along with a document that contains one of your controls. When the document is opened, the control will be asked to create its run-time instance — using the registry key.</p>
<p>
In other words, the coworker must also have purchased and installed your control component. Otherwise, when the document is opened, the control instance cannot be created.</p>
<p>
Corporate developers who author ActiveX controls for use by end users within their companies may find it more convenient to omit licensing support. This will make it easier for end users to distribute documents containing controls.</p>
<h3>Licensing and the Control Author</h3>
<p>
Now suppose that someone who purchased your control component decides to use one of your controls to author a new control of her own. As with any other program, when she compiles her control component, your license key is compiled in. SetupWizard creates a license key for the new component, but does not add <i>your</i> license key to the setup program.</p>
<p>
When a developer installs this new code component, its license key is placed in the registry. The developer then runs Visual Basic, and attempts to put an instance of the control on a form.</p>
<p>
The control is asked to create itself using the registry key. In turn, it asks its <i>constituent controls </i>to create themselves using their registry keys. Your control doesn't find its license key in the registry, so control creation fails.</p>
<h4>Distributing Controls That Use Licensed Controls</h4>
<p>
If the control author wishes to distribute a new control that uses a control you authored, she must inform purchasers that in order to use her control, they must have your control component installed on their computers.</p>
<p>
Alternatively, the control author might negotiate with you for the right to distribute your license key along with her own, in the setup program for her control.</p>
<p>
In either case, both license keys will be installed on a developer's machine, so the developer can create design-time instances of the second author's controls. When those controls are compiled into an executable program, both license keys are compiled in.</p>
<p>
When the program is subsequently installed by a user and run, the second author's control is asked to create itself. Its constituent controls are also asked to create themselves, and passed their license keys. (And so on, if <i>your</i> control uses constituent controls with license keys.)</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Of the ActiveX controls included with the Professional Edition of Visual Basic, only the DBGrid control requires a license key on a developer's computer. For example, if you use the TreeView control as a constituent control, anyone who is licensed to use your control is licensed to use TreeView <i>as part of your control</i>. However, remember that your Microsoft License Agreement requires that you add significant and primary functionality to any redistributable, such as TreeView, in order to legally distribute it as part of software you develop.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Licensing and distribution of constituent controls, including those supplied with the Professional Edition of Visual Basic, is discussed in "Controls You Can Use As Constituent Controls," earlier in this chapter.</p>
<h3>Licensing and the Internet</h3>
<p>
Licensed controls can be used on World Wide Web pages, in conjunction with browsers that support control licensing. Both the control component and the license key must be available to be downloaded to the computer of the person accessing a Web page.</p>
<p>
The downloaded license key is not added to the registry. Instead, browser asks the control to create a run-time instance of itself, and passes it the downloaded license key.</p>
<p>
The owner of the Web server that uses your control must have purchased and installed your control, just as a developer would, in order to supply both control and license.</p>
<p>
If the license is not available, control creation will fail, and the browser will receive a standard control creation error. Whether the browser passes this message along to the person accessing the Web page, or simply ignores it, depends on the person who developed the browser.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Of the ActiveX controls included with the Professional Edition of Visual Basic, only the DBGrid control requires a license key on a Web server. For example, if you use the TreeView control as a constituent control, anyone who is licensed to use your control is licensed to use TreeView <i>as part of your control.</i> However, remember that your Microsoft License Agreement requires that you add significant and primary functionality to any redistributable, such as TreeView, in order to legally distribute it as part of software you develop.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Controls You Can Use As Constituent Controls," earlier in this chapter.</p>
</BODY>
</HTML>

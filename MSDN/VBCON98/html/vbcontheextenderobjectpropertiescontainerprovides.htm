<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding the Container's Extender Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontheextenderobjectpropertiescontainerprovides"></a>Understanding the Container’s Extender Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheExtenderObjectPropertiesContainerProvidesC">
</object></p>
<p>
When you view an instance of your control in the Properties window, you'll see a number of properties you didn't author. These <i>extender properties</i> are provided by the container your control is placed on, but they appear to be a seamless extension of your control, as shown in Figure 9.6.</p>
<p class=label>
<b>Figure 9.6&nbsp;&nbsp;&nbsp;Extender properties, methods, and events are provided by the container</b></p>
<p>
<img src="avtcm030.gif" border=0></p>
<p>
A UserControl object can access extender properties through its Extender object. For example, the ShapeLabel control in "Creating an ActiveX Control" uses the following code to initialize its Caption property:</p>
<pre><code>Private Sub UserControl_InitProperties()
   ' Let the starting value for the Caption
   '&nbsp;&nbsp; property be the default Name of this
   '&nbsp;&nbsp; instance of ShapeLabel.
   Caption = Extender.Name
End Sub
</code></pre>
<p>
Extender properties are provided for the developer who uses your control. Generally speaking, the author of a control should not attempt to set them with code in the UserControl. For example, it's up to the developer to decide where a particular instance of your control should be located (Top and Left properties), or what icon it should use when dragged.</p>
<h2>Extender Properties are Late Bound</h2>
<p>
When you compile your control component, Visual Basic has no way of knowing what kind of container it may be placed on. Therefore references to Extender properties will always be late bound.</p>
<h2>Standard Extender Properties</h2>
<p>
The ActiveX control specification lists the following properties that all containers should provide:</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Property</b></td>
<td class=label width=22%><b>Type</b></td>
<td class=label width=18%><b>Access</b></td>
<td class=label width=42%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=18%>Name</td>
<td width=22%>String</td>
<td width=18%>R</td>
<td width=42%>The name the user assigns to the control instance.</td>
</tr>
<tr valign=top>
<td width=18%>Visible</td>
<td width=22%>Boolean</td>
<td width=18%>RW</td>
<td width=42%>Indicates whether the control is visible.</td>
</tr>
<tr valign=top>
<td width=18%>Parent</td>
<td width=22%>Object</td>
<td width=18%>R</td>
<td width=42%>Returns the object which contains the control, such as a Visual Basic form.</td>
</tr>
<tr valign=top>
<td width=18%>Cancel</td>
<td width=22%>Boolean</td>
<td width=18%>R</td>
<td width=42%>True if the control is the cancel button for the container.</td>
</tr>
<tr valign=top>
<td width=18%>Default</td>
<td width=22%>Boolean</td>
<td width=18%>R</td>
<td width=42%>True if the control is the default button for the container.</td>
</tr>
</table><br>
<p>
Although it is highly recommended that containers implement these properties, containers do not have to do so. Thus you should always use error trapping when referring to properties of the Extender object in your code, even standard properties.</p>
<p>
Many containers provide additional extender properties, such as Left, Top, Width, and Height properties.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you wish your control to be invisible at run time, set the UserControl object's InvisibleAtRuntime property to True, as discussed in "Making Your Control Invisible at Run Time," later in this chapter. Do not use the Extender object's Visible property for this purpose.</p>
<h3>Container-Specific Controls</h3>
<p>
If you design your control so that it requires certain Extender properties, your control will not work in containers that don't provide those properties. There is nothing wrong with building such <i>container-specific</i> controls, except that the potential market for them is smaller.</p>
<p>
If you are creating a control designed to address a limitation of a particular container, such considerations may not matter to you. However, conscientious use of error trapping will prevent your control from causing unfortunate accidents if it is placed on containers it was not specifically designed for.</p>
<h3>Working with Container Limitations</h3>
<p>
Visual Basic provides a rich set of extender properties and events, listed in the topic for the Extender object. Many containers provide only a limited subset of these.</p>
<p>
In general, Extender properties, methods, and events are not the concern of the control author. Many Extender properties, such as Top and Left, or WhatsThisHelpID, cannot be implemented by a control, because the container must provide the underpinnings these properties require.</p>
<h3>Collisions Between Control and Extender Properties</h3>
<p>
If an instance of your control is placed on a container that has an extender property with the same name as a property of your control, the user will see the extender property.</p>
<p>
For example, suppose you gave your control a Tag property. When an instance of your control is placed on a Visual Basic form, a Tag property is supplied by the form's Extender object. If your control is called ShapeLabel, the user might write the following code:</p>
<pre><code>ShapeLabel1.Tag = "Triceratops"
</code></pre>
<p>
The code above stores the string "Triceratops" in the Tag property provided by the Visual Basic form's Extender object. If an instance of your control is placed on a container whose Extender object doesn't supply a Tag property, the same code will store the string in the Tag property you implemented.</p>
<p>
In order to access the Tag property of your control on a Visual Basic form, the user could employ another Extender object property, as shown in the following code fragment:</p>
<pre><code>ShapeLabel1.Object.Tag = "Triceratops"
</code></pre>
<p>
The Object property returns a reference to your control's interface just as you defined it, without any extender properties.</p>
</BODY>
</HTML>

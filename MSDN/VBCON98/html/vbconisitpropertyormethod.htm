<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Is It a Property or a Method?</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconisitpropertyormethod"></a>Is It a Property or a Method?</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconIsItPropertyOrMethodC">
</object></p>
<p>
In general, a property is data about an object, while a method is an action the object can be asked to perform. Some things are obviously properties, like Color and Name, and some are obviously methods, like Move and Show.</p>
<p>
As with any facet of human endeavor, however, there's a gray area in which an argument can be made either way.</p>
<p>
For example, why is the Item method of the Visual Basic Collection class a method and not an indexed property? Aren't the items in the collection just data? The Item method of a hypothetical Widgets collection class could be implemented either way, as shown here:</p>
<pre><code>' Private storage for the objects in the Widgets
' collection (same for both implementations).
Private mcol As New Collection

Public Property Get Item(Index As Variant) As Widget
   Set Item = mcol.Item(Index)
End Function

- or -

Public Function Item(Index As Variant) As Widget
   Set Item = mcol.Item(Index)
End Function
</code></pre>
<p>
There's not a whole lot of difference between these two implementations. Both are read-only, so both depend on the Add method of the Widgets class to get Widget objects into the collection. Both delegate everything to a Collection object — even their errors are generated by the Collection!</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Delegation is explained in "The Many (Inter)Faces of Code Reuse" and "Creating Your Own Collection Classes" later in this chapter.</p>
<p>
You can get really nit-picky trying to decide whether a member is data about the object or object behavior. For example, you could argue that Item is a method because the collection is doing something for you — looking up the Widget you want. This kind of argument can usually be made with equal validity on either side, however.</p>
<p>
You may find it more useful to turn the argument on its head, and ask yourself how you <i>want</i> to think of the member. If you want people to think of it as data about the object, make it a property. If you want them to think of it as something the object does, make it a method.</p>
<h4>The Syntax Argument</h4>
<p>
A strong reason for implementing a member using property procedures depends on the way you want to use the member in code. That is, will the user of a Widgets collection be allowed to code the following?</p>
<pre><code>Set Widgets.Item(4) = wdgMyNewWidget
</code></pre>
<p>
If so, implement the member as a read-write property, using Property Get and Property Set, because methods don't support this syntax.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In most collection implementations you encounter, this syntax is not allowed. Implementing a Property Set for a collection is not as easy as it looks.</p>
<h4>The Property Window Argument</h4>
<p>
You can also suppose for a moment that your object is like a control. Can you imagine the member showing up in the Property window, or on a property page? If that doesn't make sense, don't implement the member as a property.</p>
<h4>The Sensible Error Argument</h4>
<p>
If you forget that you made Item a read-only property and try to assign a value to it, you'll most likely find it easier to understand the error message Visual Basic raises for a Property Get — "Can't assign to read-only property" — than the error message it raises for a Function procedure — "Function call on left-hand side of assignment must return Variant or Object."</p>
<h4>The Argument of Last Resort</h4>
<p>
As a last resort, flip a coin. If none of the other arguments in this topic seem compelling, it probably doesn't make much difference.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Property procedures are introduced in "Adding Properties to Classes" earlier in this chapter. Methods are discussed in "Adding Methods to Classes."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Printing Information in the Immediate Window</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconprintinginformationinimmediatewindow"></a>Printing Information in the Immediate Window</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPrintingInformationInImmediateWindowC">
</object></p>
<p>
There are two ways to print to the Immediate window:
<ul type=disc>
<li>
Include <code>Debug.Print</code> statements in the application code.<br><br></li>
<li>
Enter Print methods directly in the Immediate window.</li>
</ul>
<p>
These printing techniques offer several advantages over watch expressions:
<ul type=disc>
<li>
You don't have to break execution to get feedback on how the application is performing. You can see data or other messages displayed as you run the application.<br><br></li>
<li>
Feedback is displayed in a separate area (the Immediate window), so it does not interfere with output that a user sees.<br><br></li>
<li>
Because you can save this code as part of the form, you don't have to redefine these statements the next time you work on the application.</li>
</ul>
<h2>Printing from Application Code</h2>
<p>
The Print method sends output to the Immediate window whenever you include the Debug object prefix:</p>
<p>
<b>Debug.Print</b> [<i>items</i>][;]</p>
<p>
For example, the following statement prints the value of <code>Salary</code> to the Immediate window every time it is executed:</p>
<pre><code>Debug.Print "Salary = "; Salary
</code></pre>
<p>
This technique works best when there is a particular place in your application code at which the variable (in this case, <code>Salary</code>) is known to change. For example, you might put the previous statement in a loop that repeatedly alters <code>Salary</code>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you compile your application into an .exe file, <code>Debug.Print</code> statements are removed. Thus, if your application only uses <code>Debug.Print</code> statements with strings or simple variable types as arguments, it will not have any <code>Debug.Print</code> statements. However, Visual Basic will not strip out function calls appearing as arguments to <code>Debug.Print</code>. Thus, any side-effects of those functions will continue to happen in a compiled .exe file, even though the function results are not printed.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Debug Object."</p>
<h2>Printing from Within the Immediate Window</h2>
<p>
Once you're in break mode, you can move the focus to the Immediate window to examine data.</p>
<p class=label>
<b>To examine data in the Immediate window</b>
<ol>
<li>
Click the <b>Immediate</b> window (if visible).<p class=tl>
-or-</P><p class=tl>
From the <b>View</b> menu, choose <b>Immediate Window</b>.</P><p class=tl>
Once you have moved focus to the Immediate window, you then can use the Print method without the Debug object.</P></li>
<li>
Type or paste a statement into the <b>Immediate</b> window, and then press ENTER.<p class=tl>
The Immediate window responds by carrying out the statement, as shown in Figure 13.19.</P><p class=label>
<b>Figure 13.19&nbsp;&nbsp;&nbsp;Using the Print method to print to the Immediate window</b>
<p>
<img src="avp13019.gif" border=0></P></li>
</ol>
<p>
A question mark (?) is useful shorthand for the Print method. The question mark means the same as Print, and can be used in any context where Print is used. For example, the statements in Figure 13.19 could be entered as shown in Figure 13.20.</p>
<p class=label>
<b>Figure 13.20&nbsp;&nbsp;&nbsp;Using a question mark instead of the Print method</b></p>
<p>
<img src="avp13020.gif" border=0></p>
<h2>Printing Values of Properties</h2>
<p>
You can evaluate any valid expression in the Immediate window, including expressions involving properties. The currently active form or module determines the scope. If the execution halts within code that is attached to a form or class, you can refer to the properties of that form (or one of its controls) and make the reference to the form implicit with statements like the following:</p>
<pre><code>? BackColor
? Text1.Height
</code></pre>
<p>
Assuming that Text1 is a control on the currently active form, the first statement prints the numeric value of the current form's background color to the Immediate window. The second statement prints the height of Text1.</p>
<p>
If execution is suspended in a module or another form, you must explicitly specify the form name as follows:</p>
<pre><code>? Form1.BackColor
? Form1.Text1.Height
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Referencing an unloaded form in the Immediate window (or anywhere else) loads that form.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To learn about changing properties and values in the Immediate window, see "Assigning Values to Variables and Properties" later in this chapter.</p>
</BODY>
</HTML>

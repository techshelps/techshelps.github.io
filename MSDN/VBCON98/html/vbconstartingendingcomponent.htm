<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Starting and Ending a Component</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconstartingendingcomponent"></a>Starting and Ending a Component</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconStartingEndingComponentC">
</object></p>
<p>
Your component starts the first time a client application requests an object from one of your classes. A new instance of the class is created, and the client receives a reference to the newly created object.</p>
<p>
If your component has a Sub Main procedure, it will execute when the first object is requested. The object will not be created until Sub Main has finished.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Don’t execute lengthy initialization activities in Sub Main, as this may cause object creation to time out and fail.</p>
<p>
You should not show forms or user messages from your Sub Main, because they can cause the same problems as lengthy initialization tasks. Visual Basic does not allow forms as start up objects in ActiveX EXE and ActiveX DLL projects, for precisely this reason.</p>
<p>
A desktop application that provides objects should test App.StartMode, and show its main form only if it was started standalone. In this case, Sub Main may happen long before the first object is requested.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you have selected ActiveX Component for the Start Mode option, on the Component tab of the Project Properties dialog box, Sub Main will not execute immediately when you put your component into run mode. Visual Basic does this to allow accurate debugging of your startup code. Once your component is compiled, Sub Main will not execute until the first time a client requests an object, so the development environment exactly duplicates this behavior.</p>
<h2>Handling Lengthy Initialization Tasks</h2>
<p>
You can perform initialization in the Class_Initialize event of the first object created. When initialization is complete, set a global flag so that subsequent instances of the class don’t execute the initialization task.</p>
<p>
Alternatively, you can defer some initialization tasks until the service is actually needed. In this case, each object must test before using the service, to ensure it has been initialized — and to initialize it if it has not. This technique works best when initialization consists of many small, independent tasks.</p>
<p>
A very large initialization task that cannot be broken up can be performed in the background, using a call-back timer. You can start the timer at the end of Sub Main, as discussed in "Building Code Components." In the timer’s Tick event, disable the timer and run the lengthy task. At the end of the Tick event, set a global flag to indicate that the component is initialized. You can then notify any objects that have been created while initialization was in progress.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Don’t use a Timer control for this purpose, because the Timer control requires a form to be loaded.</p>
<p>
When you use this technique, make sure each object tests the global flag during its own Initialize event. If the component is not initialized, each object should insert itself into a global collection, so it can be notified when background initialization is complete.</p>
<p>
You can add a notification method — for example NotifyInitComplete — to each class. Make this a Friend method, so it’s only visible within your component.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Friend methods are discussed in "Private Communications Between Your Objects," later in this chapter.</p>
<h2>Component Shutdown</h2>
<p>
Your component should shut down when all clients have released all references to the objects the component provides. (A desktop application that provides objects is an exception to this rule.)</p>
<p>
Visual Basic does a number of things to make it easy for your component to shut down properly. The most important of these is keeping track of references to your public objects, because your component should never close while clients still hold references to objects.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Only references to <i>public</i> objects will keep a component running. References to private objects — objects provided by Visual Basic, or objects from classes marked Private — will not prevent component shutdown and subsequent catastrophic failure of the client. References to private objects should never be passed to clients.</p>
<p>
The rules Visual Basic uses to determine when to shut down are different for in-process and out-of-process components.</p>
<h3>Out-of-Process Component Shut Down</h3>
<p>
An out-of-process component written with Visual Basic will shut down when:
<ul type=disc>
<li>
The component has no forms loaded.<p class=tl>
A loaded form will keep your component running past the point at which all references have been released. Forms should be unloaded when the object that created them terminates.</P></li>
<li>
No out-of-process client applications are holding references to the component’s public objects.<p class=tl>
Internal references to public objects <i>will not</i> keep a component running if clients have released all their references. Neither will references held by an in-process component the out-of-process component is using.</P></li>
<li>
No code in the component’s modules is currently executing, or in the calls list waiting to be executed.<br><br></li>
<li>
The component is not in the process of being started in response to a client application’s request for an object.</li>
</ul>
<h3>In-Process Component Shut Down</h3>
<p>
In the long run, the lifetime of an in-process component is controlled by its client, because the component runs in the client’s process. When the client closes, the component is unloaded regardless of any outstanding object references, open forms, and so on.</p>
<p>
A client may ask an in-process component to unload when the client is no longer using objects the component provides. The following rules describe the way a Visual Basic in-process component determines whether it should unload in response to a client request.
<ul type=disc>
<li>
The component has no forms visible.<p class=tl>
A visible form will keep your component in memory, even if there are no object references; an invisible form will not.</P></li>
<li>
There are no references to the component’s public objects.<p class=tl>
If your in-process component is holding a reference to one of its own public objects, Visual Basic will not unload it. Visual Basic cannot tell whether the reference is internal or external.</P></li>
<li>
No code in the component’s modules is currently executing, or in the calls list waiting to be executed.<br><br></li>
<li>
The component is not in the process of being started in response to a client application’s request for an object.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;A client application written in Visual Basic may not attempt to unload an in-process component immediately after the last reference is released. The frequency of attempts depends on how frequently idle time becomes available; in general it will be around two minutes.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;A more complete discussion of the rules for component shutdown can be found in "ActiveX Component Shutdown" in "ActiveX Component Standards and Guidelines."</p>
</BODY>
</HTML>

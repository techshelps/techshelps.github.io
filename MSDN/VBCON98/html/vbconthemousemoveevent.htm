<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The MouseMove Event</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconthemousemoveevent"></a>The MouseMove Event</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheMouseMoveEventC">
</object></p>
<p>
The MouseMove event occurs when the mouse pointer is moved across the screen. Both forms and controls recognize the MouseMove event while the mouse pointer is within their borders.</p>
<h2>Using MouseMove with the Line Method</h2>
<p>
Graphics methods can produce very different effects when used in a MouseMove procedure instead of in a MouseDown procedure. For example, in the topic "The MouseDown Event" earlier in this chapter, the Line method drew connected line segments. In the Scribble application described below, the same method is used in a Form_MouseMove procedure to produce a continuous curved line instead of connected segments.</p>
<p>
In the Scribble application, the MouseMove event is recognized whenever the mouse pointer changes position. The following code draws a line between the current and previous location.</p>
<pre><code>Private Sub Form_MouseMove (Button As Integer, _
      Shift As Integer, X As Single, Y As Single)
   Line -(X, Y)
End Sub
</code></pre>
<p>
Like the MouseDown procedure, the line created by the MouseMove procedure starts at the upper-left corner, as shown in Figure 11.2.</p>
<p class=label>
<b>Figure 11.2&nbsp;&nbsp;&nbsp;The MouseMove event and the Line method create a simple sketch program</b></p>
<p>
<img src="avp11008.gif" border=0></p>
<h2>How MouseMove Works</h2>
<p>
How many times does the MouseMove event get called as the user moves the pointer across the screen? Or, to put it another way, when you move the pointer from the top of the screen to the bottom, how many locations are involved?</p>
<p>
Visual Basic doesn't necessarily generate a MouseMove event for every pixel the mouse moves over. The operating environment generates a limited number of mouse messages per second. To see how often MouseMove events are actually recognized, you can enhance the Scribble application with the following code so that it draws a small circle at each location where a MouseMove event is recognized. The results are shown in Figure 11.3.</p>
<pre><code>Private Sub Form_MouseMove (Button As Integer,_
      Shift As Integer, X As Single, Y As Single)
   Line -(X, Y)
   Circle (X, Y), 50
End Sub
</code></pre>
<p class=label>
<b>Figure 11.3&nbsp;&nbsp;&nbsp;A demonstration of where MouseMove events occur</b></p>
<p>
<img src="avp11004.gif" border=0></p>
<p>
Note that the faster the user moves the pointer, the fewer MouseMove events are recognized between any two points. Many circles close together indicate that the user moved the mouse slowly.</p>
<p>
Your application can recognize many MouseMove events in quick succession. Therefore, a MouseMove event procedure shouldn't do anything that requires large amounts of computing time.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "MouseMove Event" in the <i>Language Reference</i>.</p>
</BODY>
</HTML>

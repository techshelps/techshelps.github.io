<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Speeding Object References</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconspeedingobjectreferences"></a>Speeding Object References</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vastmDim;vbconSpeedingObjectReferencesC">
</object></p>
<p>
You can make your Visual Basic applications run faster by optimizing the way Visual Basic resolves object references. The speed with which Visual Basic handles object references can be affected by:
<ul type=disc>
<li>
Whether or not the ActiveX component has been implemented as an in-process server or an out-of-process server.<br><br></li>
<li>
Whether an object reference is early-bound or late-bound.</li>
</ul>
<p>
In general, if a component has been implemented as part of an executable file (.exe file), it is an <i>out-of-process</i> server and runs in its own process. If it has been implemented as a dynamic-link library, it is an <i>in-process</i> server and runs in the same process as the client application.</p>
<p>
Applications that use in-process servers usually run faster than those that use out-of-process servers because the application doesn't have to cross process boundaries to use an object's properties, methods, and events. For more information about in-process and out-of-process servers, see "In-Process and Out-of-Process Servers."</p>
<p>
Object references are <i>early-bound</i> if they use object variables declared as variables of a specific class. Object references are <i>late-bound</i> if they use object variables declared as variables of the generic Object class. Object references that use early-bound variables usually run faster than those that use late-bound variables.</p>
<p>
For example, you could assign a reference to an Excel object to either of the following variables:</p>
<pre><code>Dim xlApp1 As Excel.Application
Set xlApp1 = New Excel.Application

Dim xlApp2 As Object
Set xlApp2 = CreateObject("Excel.Application")
</code></pre>
<p>
Code that uses variable xlApp1 is early-bound and will execute faster than code that uses variable xlApp2, which is late-bound.</p>
<h2>Late Binding</h2>
<p>
When you declare a variable As Object, Visual Basic cannot determine at compile time what sort of object reference the variable will contain. In this situation, Visual Basic must use <i>late binding</i>— that is, Visual Basic must determine at run time whether or not that object will actually have the properties and methods you used in your code.</p>
<p>
For example, Visual Basic will compile the following code without generating errors, even though it refers to a method that doesn't exist, because it uses a late-bound object variable. It doesn't check for the existence of the method until run time, so it will produce a run-time error:</p>
<pre><code>Dim xlApp As Object
Set xlApp = CreateObject("Excel.Application")
xlApp.TheImpossibleMethod   ' Method doesn't exist.
</code></pre>
<p>
This code runs slower than code that uses an early-bound object variable because Visual Basic must include code in the compiled executable that will determine at run time whether or not the Microsoft Excel Application object has a TheImpossibleMethod method.</p>
<p>
Although late binding is the slowest way to invoke the properties and methods of an object, there are times when it is necessary. For example, you may write a function that uses an object variable to act on any of several different classes of objects. Because you don't know in advance what class of object will be assigned to the variable, declare it as a late-bound variable using As Object.</p>
<h2>Early Binding</h2>
<p>
If Visual Basic can detect at compile time what object a property or method belongs to, it can resolve the reference to the object at compile time. The compiled executable contains only the code to invoke the object's properties, methods, and events. This is called <i>early binding</i>.</p>
<p>
When you declare an object variable using the class that defines the object, the variable can only contain a reference to an object of that class. Visual Basic can use early binding for any code that uses the variable.</p>
<p>
Early binding dramatically reduces the time required to set or retrieve a property value, because the call overhead can be a significant part of the total time. For method calls, the improvement depends on the amount of work the method does. Short methods, where the call overhead is comparable to the time required to complete the task, will benefit the most.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Causing Control Movement</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcausingcontrolmovement"></a>Changing the Position of a Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCausingControlMovementC">
</object></p>
<p>
You may want the source control to change position after the user releases the mouse button. To move a control to the new mouse location, use the Move<b> </b>method with any control that has been drag-enabled.</p>
<p>
You can reposition a control when it is dragged and dropped to any location on the form not occupied by another control. To illustrate this, start a new Visual Basic project, add an Image control to the form and assign it any icon or bitmap by setting the Picture property, and then change the Image control's DragMode property to 1-Automatic.</p>
<p>
Add the following procedure to the form's DragDrop event:</p>
<pre><code>Private Sub Form_DragDrop (Source As Control, _
      X As Single, Y As Single)
   Source.Move X, Y
End Sub
</code></pre>
<p>
This code may not produce precisely the effects you want, because the upper-left corner of the control is positioned at the mouse location. This code positions the center of the control at the mouse location:</p>
<pre><code>Private Sub Form_DragDrop (Source As Control, _
      X As Single, Y As Single)
   Source.Move (X - Source.Width / 2), _
      (Y - Source.Height / 2)
End Sub
</code></pre>
<p>
The code works best when the DragIcon property is set to a value other than the default (the gray rectangle). When the gray rectangle is being used, the user usually wants the control to move precisely into the final position of the gray rectangle. To do this, record the initial mouse position within the source control. Then use this position as an offset when the control is moved.</p>
<p class=label>
<b>To record the initial mouse position</b>
<ol>
<li>
Specify manual dragging of the control.<br><br></li>
<li>
Declare two form-level variables, <code>DragX</code> and <code>DragY</code>.<br><br></li>
<li>
Turn on dragging when a MouseDown event occurs.<br><br></li>
<li>
Store the value of <i>x</i> and <i>y</i> in the form-level variables in this event.</li>
</ol>
<p>
The following example illustrates how to cause drag movement for an image control named Image1. The control's DragMode property should be set to 0-Manual at design time. The Declarations section contains the form-level variables <code>DragX</code> and <code>DragY</code>, which record the initial mouse position within the Image control:</p>
<pre><code>Dim DragX As Single, DragY As Single
</code></pre>
<p>
The MouseDown and MouseUp procedures for the control turn dragging on and drop the control, respectively. In addition, the MouseDown procedure records the mouse position inside the control at the time dragging begins:</p>
<pre><code>Private Sub Image1_MouseDown (Button As Integer, _
      Shift As Integer, X As Single, Y As Single)
   Image1.Drag 1
   DragX = X
   DragY = Y
End Sub
</code></pre>
<p>
The Form_DragDrop procedure actually moves the control. To simplify this example, assume that Image1 is the only control on the form. The target can therefore only be the form itself. The Form_DragDrop procedure repositions the control, using <code>DragX</code> and <code>DragY</code> as offsets:</p>
<pre><code>Private Sub Form_DragDrop (Source As Control, _
      X As Single, Y As Single)
   Source.Move (X - DragX), (Y - DragY)
End Sub
</code></pre>
<p>
Note that this example assumes that Image1 and the form use the same units in their respective coordinate systems. If they don't, then you'll have to convert between units.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information on coordinate systems, see "Working with Text and Graphics" and "ScaleMode Property" in the <i>Language Reference</i>.</p>
</BODY>
</HTML>

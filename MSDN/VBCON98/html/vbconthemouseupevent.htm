<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The MouseUp Event</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconthemouseupevent"></a>The MouseUp Event</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheMouseUpEventC">
</object></p>
<p>
The MouseUp event occurs when the user releases the mouse button. MouseUp is a useful companion to the MouseDown and MouseMove events. The example below illustrates how all three events can be used together.</p>
<p>
The Scribble application is more useful if it allows drawing only while the mouse button is held down and stops drawing when the button is released. To do this, the application would have to respond to three actions:
<ul type=disc>
<li>
The user presses the mouse button (MouseDown).<br><br></li>
<li>
The user moves the mouse pointer (MouseMove).<br><br></li>
<li>
The user releases the mouse button (MouseUp).</li>
</ul>
<p>
MouseDown and MouseUp will tell the application to turn drawing on and off. You specify this by creating a form-level variable that represents the drawing state. Type the following statement in the Declarations section of the form code module:</p>
<pre><code>Dim DrawNow As Boolean
</code></pre>
<p>
<code>DrawNow</code> will represent two values: True will mean "draw a line," and False will mean "do not draw a line."</p>
<p>
Because variables are initialized to 0 (False) by default, the application starts with drawing off. Then the first line in the MouseDown and MouseUp procedures turns drawing on or off by setting the value of the form-level variable <code>DrawNow</code>:</p>
<pre><code>Private Sub Form_MouseDown (Button As Integer, _
      Shift As Integer, X As Single, Y As Single)
   DrawNow = True
   CurrentX = X
   CurrentY = Y
End Sub

Private Sub Form_MouseUp (Button As Integer, _
      Shift As Integer, X As Single, Y As Single)
   DrawNow = False
End Sub
</code></pre>
<p>
The MouseMove procedure draws a line only if <code>DrawNow</code> is True. Otherwise, it takes no action:</p>
<pre><code>Private Sub Form_MouseMove (Button As Integer, _
      Shift As Integer, X As Single, Y As Single)
   If DrawNow Then Line -(X, Y)
End Sub
</code></pre>
<p>
Each time the user presses a mouse button, the MouseDown event procedure is executed and turns drawing on. Then as the user holds the Mouse button down, the MouseMove event procedure is executed repeatedly as the pointer is dragged across the screen.</p>
<p>
Note that the Line method omits the first endpoint, causing Visual Basic to start drawing at the mouse pointer's current coordinates. By default, the drawing coordinates correspond to the last point drawn; the form's <code>CurrentX</code> and <code>CurrentY</code> properties were reset in the Form_MouseDown procedure.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "MouseUp Event" in the <i>Language Reference</i>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding HTML Templates to the Webclass</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddtemplatestowebclass"></a>Adding HTML Templates to the Webclass</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddTemplatesToWebclass_C">
</object></p>
<p>
You add HTML templates to your IIS application to enable your webclass to send HTML pages to the browser in response to user requests.&nbsp; When you add a template to your webclass, you choose an HTML page you want to associate with it. Visual Basic then scans that file and looks for HTML tags that are capable of launching a request to the server. Such tags include form elements, image tags, hyperlinks, and most other tags that contain an <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefurl">
</object><a href=JavaScript:alink_2.Click()>URL</a> reference.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Although a webclass can contain multiple template webitems, each template webitem can represent only one HTML page. You must add additional templates for each HTML page you want to include in your application.</p>
<p>
Tags in the HTML page can contain attributes that launch a server request. For example, in an IMG tag, the SRC attribute is used to specify a URL location from which to retrieve a file. This attribute, and others like it that call the server, can become events in your IIS application. Visual Basic lists each of these tags and attributes in the right panel of the designer window. The name of each tag is taken from the ID attribute for that tag, if one exists. An <i>ID attribute</i> is an optional HTML attribute that you add to the .htm file itself. For each HTML tag in the file, you can assign a unique ID that can be used to identify that tag in script or code.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can use Visual Basic to assign the name of the webclass or its templates, but you cannot use the Properties window to assign an ID to the selected tag.</p>
<p>
If your HTML template file contains a tag that does not have an ID, the designer assigns it an ID based on its position in the HTML page. For example, the third &lt;A&gt; tag without an ID would be named Hyperlink3. This ID is not permanent; if you do not connect any of the tag attributes to events or webitems, the ID is not stored in the HTML page. However, when you connect one of the tag's attributes, the ID becomes permanent and is stored in the .dsr file for the page.</p>
<p>
You must save your project before you can add a template to it. After you add the template, Visual Basic does one of the following things:
<ul type=disc>
<li>
If the .htm file you chose for the template was located outside the project directory, Visual Basic makes a copy of the template file and places it in the project directory.<br><br></li>
<li>
If the .htm file you chose for the template came from the project directory or if there is another .htm file there with the same name, the system creates a copy of the .htm file but appends a number to its name. For example, a file called OrderForm.htm would be changed to OrderForm1.htm.</li>
</ul>
<p>
The action of copying the .htm file occurs when you save or debug the project, or when you use the Edit HTML Template menu command. </p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;From this point on, the .htm file in the project directory acts as the source file for your project. If you want to make changes to the HTML page's appearance, you do so in this copy of the HTML page.</p>
<p>
If your HTML template file references any additional files, such as images, you must copy those files into the project directory or a subdirectory of it. You can do this before you add the template to the webclass or after, but you must do it before debugging or running the project.</p>
<p>
In addition, if you import an HTML page for which a similarly named .htm file already exists in the project directory, VB appends a number to the .htm file it creates for the new file. This prevents Visual Basic from overwriting an existing .htm file if you reuse a template in more than one webclass. For example, suppose you have an HTML page called feedbk.htm. The first time you add this to a webclass, Visual Basic generates a file in the project directory with the name feedbk.htm. If you add this same file to another webclass in the application, the new .htm file Visual Basic creates is named feedbk1.htm.</p>
<p>
<B><b>For more Information</b></B>&nbsp;&nbsp;&nbsp;For more information on the directory structure you should use for your projects, see "Managing your Project Files." For more information on tags and attributes, see "Understanding Internet Basics" in "Developing Internet Applications."</p>
<p class=label>
<b>To add an HTML template to an IIS application</b>
<ol>
<li>
In the Webclass Designer window, click the <b>Add HTML Template WebItem</b> button on the Webclass toolbar.<br><br></li>
<li>
In the <b>Add HTML Template</b> dialog box, select the HTML page you want, then click <b>OK</b>.<br><br></li>
<li>
If the template file you chose references any additional files, such as .gif or .jpg files, copy those files to the project directory or a subdirectory beneath it.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If the template file contains absolute references to the previous locations of those files on the development computer, you need to make changes to the .htm file to reflect the location the files will have when deployed to the server. See "Managing Your Project Files" for more information on using relative and absolute paths in your template files.</p></li>
</ol>
<h2>Removing a Template from a Webclass</h2>
<p>
You can remove a template from a webclass if you no longer want to send that template file to the browser in response to requests. You cannot replace one template with another; instead you must remove the first template file and add a link to a new file. If the template files have the same name, any event procedures you wrote for the former template will be available to the new template.</p>
<p>
For example, suppose you are working with a catalog application and want to change the order form your application uses. You delete a template file called OrderForm, then add another HTML page with the same name that contains a different order entry form. All event procedures associated with the original OrderForm file, such as OrderForm_Respond, are immediately associated with the new file.</p>
<p class=label>
<b>To remove a template from the webclass</b>
<ul type=disc>
<li>
Right-click the template webitem and click <b>Delete</b>.</li>
</ul>
<h2>Editing the HTML for a Template</h2>
<p>
After you have inserted an HTML template file, you can use the HTML editor of your choice to make changes to the page's content and layout. You do so by selecting the Edit HTML Template option from the context menu for a template. Visual Basic opens the .htm file from the project directory. After you finish editing, the designer displays a prompt asking if you want to refresh the file. You must refresh the file if you want to see the changes you made.</p>
<p>
By default, Visual Basic displays either your default HTML editor or Notepad when you edit your template. Visual Basic automatically detects your default HTML editor by looking at the system registry.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; You can determine the program that opens when you edit your template by making an entry in the External HTML Editor field found on the Advanced tab of the Project Options dialog box.</p>
<p class=label>
<b>To edit your HTML webitem</b>
<ol>
<li>
In the left panel of the Designer window, right-click the template for which you want to edit the HTML, then select <b>Edit HTML Template</b>.<br><br></li>
<li>
Make your changes to the .htm file, save, and return to Visual Basic.<br><br></li>
<li>
If you have made any changes to the event tags in the file, right-click the webitem and select <b>Refresh HTML Template</b>, or respond to the prompt to refresh.<p class=tl>
Visual Basic parses the file.</P></li>
</ol>
<h2>Saving Changes to Your Template</h2>
<p>
If you want to update the webclass with changes you have made to the .htm file, you refresh the link between your template and its external file. When you refresh the template, Visual Basic checks to see whether the events currently listed for the template still exist, and whether any new attributes should be added. The program adds any new attributes and processes any changes for existing events. If an event for the template no longer exists in the .htm file, Visual Basic removes it from the webclass. Any procedures you wrote for the event are not removed — you must clean up the event procedures yourself.</p>
<p>
If another user makes changes to an .htm file used in your webclass, you receive a prompt asking whether you want to refresh the template. This message appears each time a user saves the .htm file in an editor.</p>
<p class=label>
<b>To save changes to the .htm file you've referenced</b>
<ul type=disc>
<li>
In the left panel of the designer window, right-click the template for which you want to refresh your import, then select <b>Refresh HTML Template</b>.<p class=tl>
Visual Basic parses the file.</P></li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Connecting Events in a Webclass" for more information on connecting and disconnecting events for a webitem.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dynamic Arrays</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondynamicarrays"></a>Dynamic Arrays</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vastmReDim;vbconDynamicArraysC">
</object></p>
<p>
Sometimes you may not know exactly how large to make an array. You may want to have the capability of changing the size of the array at run time.</p>
<p>
A dynamic array can be resized at any time. Dynamic arrays are among the most flexible and convenient features in Visual Basic, and they help you to manage memory efficiently. For example, you can use a large array for a short time and then free up memory to the system when you're no longer using the array.</p>
<p>
The alternative is to declare an array with the largest possible size and then ignore array elements you don't need. However, this approach, if overused, might cause the operating environment to run low on memory.</p>
<p class=label>
<b>To create a dynamic array</b>
<ol>
<li>
Declare the array with a Public statement (if you want the array to be public) or Dim statement at the module level (if you want the array to be module level), or a Static or Dim statement in a procedure (if you want the array to be local). You declare the array as dynamic by giving it an empty dimension list.<pre><code>Dim DynArray()
</code></pre>
</li>
<li>
Allocate the actual number of elements with a ReDim statement.<pre><code>ReDim DynArray(X + 1)
</code></pre>
</li>
</ol>
<p>
The ReDim statement can appear only in a procedure. Unlike the Dim and Static statements, ReDim is an executable statement — it makes the application carry out an action at run time.</p>
<p>
The ReDim statement supports the same syntax used for fixed arrays. Each ReDim can change the number of elements, as well as the lower and upper bounds, for each dimension. However, the number of dimensions in the array cannot change.</p>
<pre><code>ReDim DynArray(4 to 12)
</code></pre>
<p>
For example, the dynamic array <code>Matrix1</code> is created by first declaring it at the module level:</p>
<pre><code>Dim Matrix1() As Integer
</code></pre>
<p>
A procedure then allocates space for the array:</p>
<pre><code>Sub CalcValuesNow ()
   .
   .
   .
   ReDim Matrix1(19, 29)
End Sub
</code></pre>
<p>
The ReDim statement shown here allocates a matrix of 20 by 30 integers (at a total size of 600 elements). Alternatively, the bounds of a dynamic array can be set using variables:</p>
<pre><code>ReDim Matrix1(X, Y)
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can assign strings to resizable arrays of bytes. An array of bytes can also be assigned to a variable-length string. Be aware that the number of bytes in a string varies among platforms. On Unicode platforms the same string contains twice as many bytes as it does on a non-Unicode platform.</p>
<h2>Preserving the Contents of Dynamic Arrays</h2>
<p>
Each time you execute the ReDim statement, all the values currently stored in the array are lost. Visual Basic resets the values to the Empty value (for Variant arrays), to zero (for numeric arrays), to a zero-length string (for string arrays), or to Nothing (for arrays of objects). </p>
<p>
This is useful when you want to prepare the array for new data, or when you want to shrink the size of the array to take up minimal memory. Sometimes you may want to change the size of the array without losing the data in the array. You can do this by using ReDim with the Preserve keyword. For example, you can enlarge an array by one element without losing the values of the existing elements using the UBound function to refer to the upper bound: </p>
<pre><code>ReDim Preserve DynArray(UBound(DynArray) + 1)
</code></pre>
<p>
Only the upper bound of the last dimension in a multidimensional array can be changed when you use the Preserve keyword; if you change any of the other dimensions, or the lower bound of the last dimension, a run-time error occurs. Thus, you can use code like this:</p>
<pre><code>ReDim Preserve Matrix(10, UBound(Matrix, 2) + 1)
</code></pre>
<p>
But you cannot use this code:</p>
<pre><code>ReDim Preserve Matrix(UBound(Matrix, 1) + 1, 10)
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information about dynamic arrays, see "ReDim Statement" in the <i>Language Reference</i>. To learn more about object arrays, see "Programming with Objects."</p>
</BODY>
</HTML>

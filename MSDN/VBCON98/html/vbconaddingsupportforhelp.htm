<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Support for Help</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingsupportforhelp"></a>Adding Support for Help</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingSupportForHelp_C">
</object></p>
<p>
Adding support for Help to your Visual Basic application is really quite simple. All you need to do is set one property, HelpFile (and, of course, write and compile a Help file), to display Help when the user presses the F1 key or requests Help from a menu. An additional property, HelpContextID, can be set to provide a contextual Help topic for any user interface element in your application. The process of hooking up Help is essentially the same for both WinHelp and HTML Help.</p>
<h3>The HelpFile Property</h3>
<p>
The HelpFile property of the App object is used to specify the file name of the Help file for your application. It requires a valid WinHelp (.hlp) or HTML Help (.chm) file. If the file doesn't exist, an error will occur.</p>
<p class=label>
<b>To set the HelpFile property</b>
<ol>
<li>
Select <b>Project</b> <b>Properties</b> from the <b>Project </b>menu to open the <b>Project Properties</b> dialog box.<br><br></li>
<li>
In the <b>Help File Name</b> field of the <b>General</b> tab, enter the path and file name for your application's Help file (.hlp or .chm).</li>
</ol>
<p>
You can also set the HelpFile programmatically. The following code would specify an HTML Help file that resides in the same directory as the application's executable file:</p>
<pre><code>Private Sub Form_Load()
   App.HelpFile = App.Path &amp; "\foo.chm"
End Sub
</code></pre>
<p>
The ErrObject object also has a HelpFile property, allowing you to specify a different Help file for error messages. For example, if you have several applications that share the same error messages, you can put Help for the error messages in a single Help file that can be called by the Err.Helpfile property in each application.</p>
<h3>The HelpContextID Property</h3>
<p>
The HelpContextID property is used to link a user interface element (such as a control, form, or menu) to a related topic in a Help file. The HelpContextID property must be a Long that matches the Context ID of a topic in a WinHelp (.hlp) or HTML Help (.chm) file.</p>
<p>
For example, you might enter 10000 in the HelpContextID property of a TextBox. When the user selects the TextBox and presses F1, Visual Basic searches for a topic with a Context ID of 10000 in the Help file specified in the application's HelpFile property. If it's found, a Help window will open and display the topic; if not, an error will occur and the Help file's default topic will be displayed.</p>
<p>
You should use a unique HelpContextID to match each Help topic in your Help file. In some cases, you may want to assign the same HelpContextID for several objects if the objects share a common Help topic.</p>
<p>
You don't necessarily have to enter a HelpContextID for every control on a form. If the user presses F1 on a control with a HelpContextID of 0 (the default), Visual Basic will search for a valid HelpContextID for the control's container.</p>
<p class=label>
<b>To assign a HelpContextID for a control or form</b>
<ol>
<li>
Select the control or form for which you want to enter a HelpContextID.<br><br></li>
<li>
Double-click HelpContextID in the <b>Properties</b> window and enter a valid Long integer.<p class=tl>
Keep track of the value that you enter so that you can use the same value for the context ID of the associated Help topic.</P><p class=atl>
<b>Note</b>&nbsp;&nbsp;&nbsp;For the CommonDialog control and possibly for some other controls, the name of this property is HelpContext instead of HelpContextID.</p></li>
</ol>
<p class=label>
<b>To assign a HelpContextID for a menu</b>
<ol>
<li>
Select <b>Menu Editor</b> from the <b>Tools</b> menu.<br><br></li>
<li>
Choose the menu item for which you want to enter a HelpContextID.<br><br></li>
<li>
Enter a valid Long in the Select the HelpContextID box.<p class=tl>
Keep track of the value that you enter so that you can use the same value for the context ID of the associated Help topic.</P></li>
</ol>
<p>
The HelpContextID can also be entered programmatically as follows:</p>
<pre><code>Private Sub Form_Load()
   Command1.HelpContextID = 12345
   MenuHelp.HelpContextID = 23456
   Err.HelpContext = 34567
End Sub
</code></pre>
<p class=indent>
<b>Tip</b>&nbsp;&nbsp;&nbsp;If you have more than a few Help topics, it may help to establish a numbering scheme before you start entering HelpContextID's. Assign a different range of numbers for each form or major element in your application, for example, 1000 – 1999 for the first form, 2000 – 2999 for the second, and so forth.</p>
</BODY>
</HTML>

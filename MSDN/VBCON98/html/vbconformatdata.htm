<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Modifying the Class and Form to Write Records Back to the Delimited Text File</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconformatdata"></a>Modifying the Class and Form to Write Records Back to the Delimited Text File</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconFormatDataC">
</object></p>
<p>
After you've updated records or added new records, you can write the changes back to the delimited text file that serves as the data source for your data-aware class. You can add a public method to the class that writes records to a file, then invoke the method in your applications.</p>
<p>
This topic shows how to modify the CustomerDataSource class to provide a public method to write records back to the Customers.txt file, and how to invoke the method on your customer address form.</p>
<p class=label>
<b>To modify the class and form to write all records back to the delimited text file</b>
<ol>
<li>
Create a public method in the class that writes records to a file.<br><br></li>
<li>
Create a command button on your form that writes records to a file.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a simple database application that interacts with data in a tab-delimited text file. It begins with the topic <a href="vbcongetdatafromasciifile.htm">Interacting with Data in an ASCII Text File</a>.</p>
<h3>Create a Public Method in the Class that Writes Records to a File</h3>
<p>
By adding Sub procedures to your class, you can provide public methods to applications that use your class as a data source. For example, you can create a public method in your CustomerDataSource class that writes current records from the rsCustomers recordset to the Customers.txt delimited text file. The text file will then include any changes or additions you've made to the recordset.</p>
<p>
To create a public WriteToFile method, add the following code to the CustomerDataSource class:</p>
<pre><code>Public Sub WriteToFile()

   Dim fld As ADODB.Field
   Dim strRow As String
   Dim strField As String

   Open "Customers.txt" For Output As #1

   With rsCustomers

      .MoveFirst
      Do While Not .EOF
         For Each fld In .Fields
            ' If a field has a value, add quotation marks.
            If Len(fld.Value) &gt; 0 Then
               strField = Chr(34) &amp; fld.Value &amp; Chr(34)
            Else
               strField = ""
            End If
            ' Add the field value and a tab delimeter
            ' to the output string.
            strRow = strRow &amp; strField &amp; Chr(9)
         Next
         ' Strip off the end tab character.
         strRow = Left(strRow, Len(strRow) - 1)
         ' Print the output string.
         Print #1, strRow
         strRow = ""
      .MoveNext
      Loop
   End With
   Close

End Sub
</code></pre>
<h3>Create a Command Button on Your Form that Writes Records to a File</h3>
<p>
Once you've created a public method in your data-aware class, you can use it in any application that requires the same functionality. For example, by creating a public method for writing records to a delimited text file, you can easily create a WriteToFile button on your customer address form. The command button requires a single line of code.</p>
<p>
To create a WriteToFile button, add a command button to the form and change its Caption and Name properties to WriteToFile. Then add the following line to the command button's WriteToFile_Click event procedure:</p>
<pre><code>objDataSource.WriteToFile
</code></pre>
<p>
The code uses the WriteToFile method you created for the CustomerDataSource class.</p>
<p>
You may want to hide the WriteToFile button while users enter data on the form. To hide the command button during data entry, add the following code to the DataEntry_Click event procedure:</p>
<pre><code>Me.WriteToFile.Visible = False
</code></pre>
<p>
And if you hide the WriteToFile button while users enter data, make it visible again while users view data. To do so, add the following code to the ViewData_Click event procedure:</p>
<pre><code>Me.WriteToFile.Visible = True
</code></pre>
<h4>Step by Step</h4>
<p>
This topic concludes a series that walks you through creating a simple database application that interacts with data in a tab-delimited text file. To start from the beginning, see <a href="vbcongetdatafromasciifile.htm">Interacting with Data in an ASCII Text File</a>.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information on data sources, see <a href="vbconbuildingdatasources.htm">Creating Data Sources</a> in the <i>Component Tools Guide</i>.</p>
</BODY>
</HTML>

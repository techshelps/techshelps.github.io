<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DBCS String Manipulation Functions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondbcsstringmanipulationfunctions"></a>DBCS String Manipulation Functions</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDBCSStringManipulationFunctionsC">
</object></p>
<p>
Although a double-byte character consists of a lead byte and a trail byte and requires two consecutive storage bytes, it must be treated as a single unit in any operation involving characters and strings. Several string manipulation functions properly handle all strings, including DBCS characters, on a character basis.</p>
<p>
These functions have an ANSI/DBCS version and a binary version and/or Unicode version, as shown in the following table. Use the appropriate functions, depending on the purpose of string manipulation.</p>
<p>
The "B" versions of the functions in the following table are intended especially for use with strings of binary data. The "W" versions are intended for use with Unicode strings.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Function</b></td>
<td class=label width=74%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%>Asc</td>
<td width=74%>Returns the ANSI or DBCS character code for the first character of a string.</td>
</tr>
<tr valign=top>
<td width=26%>AscB</td>
<td width=74%>Returns the value of the first byte in the given string containing binary data.</td>
</tr>
<tr valign=top>
<td width=26%>AscW</td>
<td width=74%>Returns the Unicode character code for the first character of a string.</td>
</tr>
<tr valign=top>
<td width=26%>Chr</td>
<td width=74%>Returns a string containing a specific ANSI or DBCS character code.</td>
</tr>
<tr valign=top>
<td width=26%>ChrB</td>
<td width=74%>Returns a binary string containing a specific byte.</td>
</tr>
<tr valign=top>
<td width=26%>ChrW</td>
<td width=74%>Returns a string containing a specific Unicode character code.</td>
</tr>
<tr valign=top>
<td width=26%>Input</td>
<td width=74%>Returns a specified number of ANSI or DBCS characters from a file.</td>
</tr>
<tr valign=top>
<td width=26%>InputB</td>
<td width=74%>Returns a specified number of bytes from a file.</td>
</tr>
<tr valign=top>
<td width=26%>InStr</td>
<td width=74%>Returns the first occurrence of one string within another.</td>
</tr>
<tr valign=top>
<td width=26%>InStrB</td>
<td width=74%>Returns the first occurrence of a byte in a binary string.</td>
</tr>
<tr valign=top>
<td width=26%>Left, Right</td>
<td width=74%>Returns a specified number of characters from the right or left sides of a string.</td>
</tr>
<tr valign=top>
<td width=26%>LeftB, RightB</td>
<td width=74%>Returns a specified number of bytes from the left or right side of a binary string.</td>
</tr>
<tr valign=top>
<td width=26%>Len</td>
<td width=74%>Returns the length of the string in number of characters.</td>
</tr>
<tr valign=top>
<td width=26%>LenB</td>
<td width=74%>Returns the length of the string in number of bytes.</td>
</tr>
<tr valign=top>
<td width=26%>Mid</td>
<td width=74%>Returns a specified number of characters from a string.</td>
</tr>
<tr valign=top>
<td width=26%>MidB</td>
<td width=74%>Returns the specified number of bytes from a binary string.</td>
</tr>
</table><br>
<p>
The functions without a "B" or "W" in this table correctly handle DBCS and ANSI characters. In addition to the functions above, the String function handles DBCS characters. This means that all these functions consider a DBCS character as one character even if that character consists of 2 bytes.</p>
<p>
The behavior of these functions is different when they're handling SBCS and DBCS characters. For instance, the Mid function is used in Visual Basic to return a specified number of characters from a string. In locales using DBCS, the number of <i>characters</i> and the number of <i>bytes</i> are not necessarily the same. Mid would only return the number of characters, not bytes.</p>
<p>
In most cases, use the character-based functions when you handle string data because these functions can properly handle ANSI strings, DBCS strings, and Unicode strings.</p>
<p>
The byte-based string manipulation functions, such as LenB and LeftB, are provided to handle the string data as binary data. When you store the characters to a String variable or get the characters from a String variable, Visual Basic automatically converts between Unicode and ANSI characters. When you handle the binary data, use the Byte array instead of the String variable and the byte-based string manipulation functions.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See the <i>Language Reference</i> for the appropriate function.</p>
<p>
If you want to handle strings of binary data, you can map the characters in a string to a Byte array by using the following code:</p>
<pre><code>Dim MyByteString() As Byte
' Map the string to a Byte array.
MyByteString = "ABC"
' Display the binary data.
For i = LBound(MyByteString) to UBound(MyByteString)
   Print Right(" " + Hex(MyByteString(i)),2) + " ,";
Next
Print
</code></pre>
<h3>DBCS String Conversion</h3>
<p>
Visual Basic provides several string conversion functions that are useful for DBCS characters: StrConv, UCase, and LCase.</p>
<h4>StrConv Function</h4>
<p>
The global options of the StrConv function are converting uppercase to lowercase, and vice versa. In addition to those options, the function has several DBCS-specific options. For example, you can convert narrow letters to wide letters by specifying vbWide in the second argument of this function. You can convert one character type to another, such as hiragana to katakana in Japanese. StrConv enables you to specify a LocaleID for the string, if different than the system's LocaleID.</p>
<p>
You can also use the StrConv function to convert Unicode characters to ANSI/DBCS characters, and vice versa. Usually, a string in Visual Basic consists of Unicode characters. When you need to handle strings in ANSI/DBCS (for example, to calculate the number of bytes in a string before writing the string into a file), you can use this functionality of the StrConv function.</p>
<h4>Case Conversion in Wide-Width Letters</h4>
<p>
You can convert the case of letters by using the StrConv function with vbUpperCase or vbLowerCase, or by using the UCase or LCase functions. When you use these functions, the case of English wide-width letters in DBCS are converted as well as ANSI characters.</p>
</BODY>
</HTML>

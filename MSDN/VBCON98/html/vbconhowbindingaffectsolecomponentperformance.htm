<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Binding Affects ActiveX Component Performance</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconhowbindingaffectsolecomponentperformance"></a>How Binding Affects ActiveX Component Performance</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconHowBindingAffectsOLEComponentPerformanceC">
</object></p>
<p>
<i>Binding</i> is the process of setting up a property or method call that’s to be made using a particular object variable. It’s part of the overhead of calling the property or method.</p>
<p>
The time required to call a procedure depends on two factors:
<ul type=disc>
<li>
The time required to perform the task the procedure was designed to do, such as finding the determinant of a matrix.<br><br></li>
<li>
The overhead time required to place the arguments on the stack, invoke the procedure, and return.</li>
</ul>
<p>
As a component author, you’ll do everything you can to minimize the first item. The second item, however, is not entirely under your control.</p>
<p>
The overhead for a method call depends on the type of binding Visual Basic uses for the method call, which in turn depends on the way a client application declares object variables, which in turn depends on the developer of the client application.</p>
<p>
To ensure that developers who use your component get the best possible performance, you may want to include the information in this topic in the Help file for your component.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; Binding affects all property and method calls, including those the objects in your component make to each other. Thus the binding issues discussed here can also affect the internal performance of your component.</p>
<h2>Types of Binding</h2>
<p>
There are two main types of binding in Automation — late binding and early binding. Early binding is further divided into two types, referred to as DispID binding and vtable binding. Late binding is the slowest, and vtable binding is the fastest.</p>
<h3>Late Binding</h3>
<p>
When you declare a variable As Object or As Variant, Visual Basic cannot determine at compile time what sort of object reference the variable will contain. Therefore, Visual Basic must use <i>late binding</i> to determine <i>at run time </i>whether the actual object has the properties and methods you call using the variable.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; Late binding is also used for variables declared As Form or As Control.</p>
<p>
Each time you invoke a property or method with late binding, Visual Basic passes the member name to the GetIDsOfNames method of the object’s IDispatch interface. GetIDsOfNames returns the <i>dispatch ID</i>, or DispID, of the member. Visual Basic invokes the member by passing the DispID to the Invoke method of the IDispatch interface.</p>
<p>
For an out-of-process component, this means an extra cross-process method call, essentially doubling the call overhead.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; You cannot call the methods of the IDispatch interface yourself, because this interface is marked hidden and restricted in the Visual Basic type library.</p>
<h3>Early Binding</h3>
<p>
If Visual Basic can tell at compile time what object a property or method belongs to, it can look up the DispID or vtable address of the member in the type library. There’s no need to call GetIDsOfNames.</p>
<p>
When you declare a variable of a specific class — for example, As Widget — the variable can only contain a reference to an object of that class. Visual Basic can use early binding for any property or method calls made using that variable.</p>
<p>
This is the recommended way to declare object variables in Visual Basic components and applications.</p>
<p class=indent>
<B><b>Important</b></B> &nbsp; Whether early or late binding is used depends entirely on the way variables are declared. It has nothing to do with the way objects are created.</p>
<p class=indent>
<B><b>Tip</b></B> &nbsp; Early binding dramatically reduces the time required to set or retrieve a property value, because call overhead is a significant fraction of the total call time.</p>
<h4>vTable Binding</h4>
<p>
In the fastest form of early binding, <i>vtable binding</i>, Visual Basic uses an offset into a virtual function table, or vtable. Visual Basic use vtable binding whenever possible.</p>
<p>
Objects created from Visual Basic class modules support all three forms of binding, because they have <i>dual interfaces </i>— that is, vtable interfaces derived from IDispatch.</p>
<p>
If client applications declare variables using explicit class names, Visual Basic objects will always be vtable bound. Using vtable binding to call a method of an in-process component created with Visual Basic requires no more overhead than calling a function in a DLL.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; For in-process components, vtable binding reduces call overhead to a tiny fraction of that required for DispID binding. For out-of-process components the change is not as great — vtable binding is faster by a small but significant fraction — because the bulk of the overhead comes from marshaling method arguments.</p>
<h4>DispID Binding</h4>
<p>
For components that have type libraries but don’t support vtable binding, Visual Basic uses DispID binding. At compile time, Visual Basic looks up the DispIDs of properties and methods, so at run time there’s no need to call GetIDsOfNames before calling Invoke.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; While you can ensure that early binding is used (by declaring variables of specific class types), it’s the component that determines whether DispID or vtable binding is used. Components you author with Visual Basic will always support vtable binding.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Report Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconhandlingdatareporterrors"></a>Data Report Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconHandlingDataReportErrors_C">
</object></p>
<p>
Like the standard Visual Basic form, the life of a Data Report designer is marked by certain key events. Those events, and the order in which they occur, are shown in the following table:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Event</b></td>
<td class=label width=76%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=24%>Initialize</td>
<td width=76%>Occurs after the query has completed, and controls are sited on the form.</td>
</tr>
<tr valign=top>
<td width=24%>Resize</td>
<td width=76%>Occurs when the designer is first displayed or when the window state of an object changes.</td>
</tr>
<tr valign=top>
<td width=24%>Activate</td>
<td width=76%>Occurs when the designer becomes the active window.</td>
</tr>
<tr valign=top>
<td width=24%>ProcessingTimeout</td>
<td width=76%>Occurs approximately once every second until all processing has ended. Use this event to determine if processing has taken too long, and to cancel the processing.<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This event will not occur until the query has completed. See below.</p>
</td>
</tr>
<tr valign=top>
<td width=24%>[Deactivate]</td>
<td width=76%>Occurs when the designer is no longer the active window. Use this event to determine if the user has clicked another form or designer.</td>
</tr>
<tr valign=top>
<td width=24%>QueryClose</td>
<td width=76%>Occurs before the designer is terminated. Set the <i>Cancel</i> argument to True to cancel termination. The <i>CloseMode</i> argument returns the type of action that is causing the termination.</td>
</tr>
<tr valign=top>
<td width=24%>Terminate</td>
<td width=76%>Occurs when all references to the designer have been set to 0.</td>
</tr>
</table><br>
<h2>Timeout and Asynchronous Call Events</h2>
<p>
In addition to the designer's lifetime events, the DataReport object also features events that allow you to trap errors and monitor synchronous and asynchronous function calls.</p>
<h3>ExportReport and PrintReport: Query, Synchronous and Asynchronous Processes</h3>
<p>
When either the ExportReport or PrintReport method is invoked, the process is divided into three stages—the query, synchronous processing, and asynchronous printing or exportation:
<ol>
<li>
<b>Query</b>—When the data report is first created, a query is sent to the data provider.<br><br></li>
<li>
<b>Processing</b>—The data retrieved by the query is processed by Visual Basic to create the report. The data is cached in a temporary file on the computer. This process is synchronous.<br><br></li>
<li>
<b>Asynchronous Printing or Exporting</b>—After creating the report, the report is exported or printed. This process is asynchronous.</li>
</ol>
<p>
When the Show method is invoked, the data report executes the query and then processes the data in a synchronous process before displaying the report.</p>
<p>
Because these methods combine both synchronous and asynchronous processes, there are separate events to monitor each kind of process.</p>
<h3>The ProcessTimeOut Event—for Synchronous Functions</h3>
<p>
Processing a large data report may take some time. If you want to allow your users to cancel out of a lengthy operation (such as Show, ExportReport, or PrintReport), you can use the ProcessingTimeout event to monitor how many seconds have passed, and set the <i>cancel </i>argument to True at the user's command. The code below shows an example.</p>
<pre><code>Private Sub DataReport_ProcessingTimeout(ByVal Seconds As Long, _
Cancel As Boolean, ByVal JobType As MSDataReportLib.AsyncTypeConstants, _
ByVal Cookie As Long)
   Select Case Seconds
   Case 30
      If MsgBox("This has taken " &amp; Seconds &amp; "seconds. Cancel?", _
         vbRetryCancel) = vbCancel Then
            Cancel = True
      End If
   Case 45
      If MsgBox("This has taken " &amp; Seconds &amp; "seconds. Cancel?", _
         vbRetryCancel) = vbCancel Then
            Cancel = True
      End If
   Case 60
      'Cancel automatically after 60 seconds.
      Cancel = True
   End Select
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;It is not guaranteed that the ProcessingTimeout event will occur at the intervals specified above. For example, other Visual Basic code running in the background may prevent the event from occurring. In that case, set the Case statement to a range of values; when the event occurs, set a module-level flag to True, and check it on subsequent occurrences.</p>
<h3>Error Event—For Asynchronous Functions</h3>
<p>
To trap errors that occur when no Visual Basic code is executing (that is, an asynchronous function), use the Error event. For example, if the PrintReport or ExportReport method fails in the asynchronous stage, the Error event will occur. The example below traps asynchronous errors:</p>
<pre><code>Private Sub DataReport_Error(ByVal JobType As _
MSDataReportLib.AsyncTypeConstants, ByVal Cookie As Long, _
ByVal ErrObj As MSDataReportLib.RptError, ShowError As Boolean)
   Select Case JobType ' The JobType identifies the process.
   Case rptAsyncPrint
      ' Trap PrintReport errors here.
   Case rptAsyncReport
      ' Trap ExportReport errors here.
   End Select
End Sub
</code></pre>
<p>
You can also use the Error event to trap specific cases, such as the lack of a printer on the computer, as shown in the code below:</p>
<pre><code>Private Sub DataReport_Error(ByVal JobType As _
MSDataReportLib.AsyncTypeConstants, ByVal Cookie As Long, _
ByVal ErrObj As MSDataReportLib.RptError, ShowError As Boolean)
   Case rptErrPrinterInfo ' 8555
      MsgBox "A printing error has occurred. " &amp; _
      "You may not have a Printer installed."
      ShowError = False
      Exit Sub
   Case Else
      ' handle other cases here.
      ShowError = True
   End Select
End Sub
</code></pre>
<h3>The AsyncProgress Event</h3>
<p>
The AsyncProgress event is not designed to trap errors, but to allow you to monitor the state of the asynchronous function. By the time this event occurs, all of the data has been processed; thus two of the event's arguments are <i>PagesCompleted</i> and <i>TotalPages</i>. The event also includes arguments that identify the asynchronous operation: the <i>JobType </i>and <i>Cookie </i>arguments can then be used to monitor the progress of any process.</p>
</BODY>
</HTML>

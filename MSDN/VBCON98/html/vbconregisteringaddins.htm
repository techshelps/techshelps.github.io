<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Registering Add-Ins</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconregisteringaddins"></a>Registering Add-Ins</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconRegisteringAddInsC">
</object></p>
<p>
As an ActiveX component, an add-in must be properly registered in the system registry before it can be recognized or used by any Windows program, including Visual Basic. The process of compiling the add-in in Visual Basic automatically registers it on your system, but anyone who intends to use your add-in on another system must register it there before they can use it.</p>
<p>
This means that if the add-in is an in-process component (.dll file), you (or your customer) must use a utility such as Regsvr32.exe to register it on their system. For ease of use to the customer, you would normally do this in the add-in’s setup program.</p>
<p>
If the add-in is an out-of-process component (.exe file), running the .exe file registers it. If you’d rather register the add-in without running it, add the <code>/regserver</code> parameter to the .exe file’s command line, such as when you're creating a setup:</p>
<pre><code>MyAddIn /regserver
</code></pre>
<p>
When the add-in reference is written to the system registry, the registered name is the programmatic ID — comprised of the name of your add-in project (as shown in the Project Name box on the General tab of the Project Properties dialog box) plus the name of the class module that contains the add-in's connect and disconnect event-handling code.</p>
<p>
For example, if you create an add-in using the Visual Basic default names — Project1 for the project name and Class1 for the class module name — then the registered name of the add-in will be Project1.Class1.</p>
</BODY>
</HTML>

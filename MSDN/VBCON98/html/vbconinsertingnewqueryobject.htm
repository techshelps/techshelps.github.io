<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Inserting a New Query Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconinsertingnewqueryobject"></a>Inserting a New Query Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconInsertingNewQueryObject_C">
</object></p>
<p>
Once a new UserConnection object has been inserted into the project, you can add new Query objects to it. These query objects can be either stored procedure calls or user-defined SQL statements. Each query object defined at design-time will automatically be available as a method of the new UserConnection class.</p>
<p>
To add a Query object, click the leftmost button on the toolbar. The new Query object is added hierarchically below the UserConnection object, and its Properties Window appears.</p>
<h2>Selecting Stored Procedures</h2>
<p>
Select Insert Stored Procedure to view the available stored procedures on the database. The UserConnection designer attempts to establish a connection to the database, using the connection properties you entered. If successful, it enumerates the available stored procedures on the database, allowing you to select one to define the Query object:</p>
<p class=label>
<b>Query Properties dialog box</b></p>
<p>
<img src="avc03008.gif" border=0></p>
<h2>Inserting User-Defined Queries</h2>
<p>
Choose Based on User-Defined SQL to create a local query against the remote database. This enables the SQL property box, into which you enter SQL statements to define your query.</p>
<p>
Alternatively, you can click the Build button, which opens the MS-Query query design tool. MS-Query provides a visual interface that allows you to drag and drop database tables and fields, define conditions and set relationships to define the query. When you exit from MS-Query, your visually-designed query is automatically translated into SQL code and inserted into the User-Defined SQL property box.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information about using the MS-Query query builder, see MSQry.hlp which is installed in the \Program Files\Common Files\Microsoft Shared\vba directory.</p>
<h2>Setting Other Query Properties</h2>
<p>
In addition to the defining properties discussed above, the Query Property Page has two additional tabs for defining Parameters and advanced properties.</p>
<p>
The Parameters tab on the query property page allows the developer to adjust properties for each parameter in the current query.</p>
<p class=label>
<b>Parameters properties</b></p>
<p>
<img src="avc03009.gif" border=0></p>
<p>
The parameters shown in the Parameters list box are determined automatically from the query source, and cannot be changed here. Parameters are generated for each parameter marker in the SQL statement for the query (or call statement for stored procedures). Parameter markers are designated by a "?" in accordance with the ODBC specification. For example, the following query would contain two parameters:</p>
<pre><code>SELECT * FROM authors WHERE state = ? AND zip = ?
</code></pre>
<p>
The parameter properties that can be changed here are the Name, Direction, ODBC Binding Data Type, and Visual Basic Data Type.</p>
<p>
The Name property can be changed to allow your Visual Basic code to recognize the parameter by a familiar sounding name, if its actual name is complex or not intuitive.</p>
<p>
Setting the Direction of a parameter may be necessary for some ODBC databases for which the driver is not capable of determining the direction (input, input/output, or return values). The same is true for the data types, and you may wish to override the default type conversion into Visual Basic data types for use with your code.</p>
<h3>Advanced Query Properties</h3>
<p>
The Advanced tab of the Query Properties page allows for fine-tuning the query by setting limits and thresholds.</p>
<p class=label>
<b>Advanced properties</b></p>
<p>
<img src="avc03010.gif" border=0></p>
<p>
The Call Syntax text box lets you change the call syntax that RDO will use to call the stored procedure. This can be edited to adjust the number of parameters and presence of the return value. Editing the call syntax is an advanced operation and should only be done by developers who understand the ramifications.</p>
<h2>Using the UserConnection Object in Your Code</h2>
<p>
You can insert the UserConnection object into your Visual Basic code just as you would with any class, by creating an object variable and instantiating it with a new instance of the UserConnection class you have defined. For example:</p>
<pre><code>Option Explicit
Private MyConnect As MyConnection
Set MyConnect = New MyConnection
</code></pre>
<p>
You can write your own code "behind" the inserted UserConnection object to sink events raised from the connection or any of the queries defined under it. You can also implement your own methods, or write Property Get and Property Let procedures to implement your own properties, which are added to the type library for the new object.</p>
</BODY>
</HTML>

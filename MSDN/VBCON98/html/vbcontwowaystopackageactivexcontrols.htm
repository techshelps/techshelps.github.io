<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Two Ways to Package ActiveX Controls</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontwowaystopackageactivexcontrols"></a>Two Ways to Package ActiveX Controls</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTwoWaysToPackageActiveXControlsC">
</object></p>
<p>
An ActiveX control created with Visual Basic is defined by a UserControl module. The source code you add to this module, to implement your ActiveX control, is stored in a .ctl file.</p>
<p>
You can include UserControl modules in most Visual Basic project types, but only ActiveX control projects can provide controls to other applications. Controls in all other project types are private.</p>
<p>
Thus there are two ways to package controls:
<ul type=disc>
<li>
<i>Public controls</i> can only exist in ActiveX control projects. You make a control public by setting the Public property of the UserControl object to True.<p class=tl>
Public controls can be used by other applications, once the ActiveX control project has been compiled into a control component (.ocx file).</P></li>
<li>
<i>Private controls</i> can exist in any project type. You make a control private by setting the Public property of the UserControl object to False.<p class=tl>
After the project is compiled, private controls cannot be used by other applications. They can be used only within the project in which they were compiled.</P><p class=tl>
If you attempt to set the Public property of a UserControl object to True, and the UserControl is not in an ActiveX control project, an error occurs.</P></li>
</ul>
<p>
If one of the controls in an ActiveX control project is meant to be used only as a constituent of other controls in the project, you can set the Public property of the UserControl to False. The control will then be available only to the controls of which it is a constituent part. Other applications will not be able to use it.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You cannot include UserControl modules in a project marked for unattended execution. If the Unattended Execution box is checked on the General tab of the Project Properties dialog box, the project cannot contain any user interface elements.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;If you package your controls as a control component, be sure to set the description for each control. Some clients, such as Visual Basic, represent the entire .ocx file using the string you enter in the Project Description box of the Project Properties dialog box, but others display the browser strings for the individual controls. See "Providing Help and Browser Strings for Objects," in "Debugging, Testing, and Deploying Components."</p>
<h2>Including Controls as Compiled Code vs. Source Code</h2>
<p>
If you create your controls as public classes in an ActiveX control project, you can distribute the compiled control component (.ocx file) with any application you create. When you use SetupWizard to create a setup program for an application in which you've used such a control, the compiled .ocx file will be included automatically.</p>
<p>
You can also create a setup program for the control component itself, and distribute it to other developers. "Licensing Issues for Controls," later in this chapter, discusses the licensing support available for control components authored using Visual Basic.</p>
<h2>Changing the Packaging</h2>
<p>
Once you've authored a control, you can easily change the way the control is packaged.</p>
<p>
For example, if you have some private controls that are part of a Standard EXE project, and you want to allow other applications to use them, you can add the .ctl files to an ActiveX control project, and compile it into a distributable control component (.ocx file).</p>
<h2>Source Code</h2>
<p>
Instead of including the compiled control component in your applications, you can simply add the .ctl file to the project for the application. When the application is compiled, the control is compiled into the executable.</p>
<p>
The primary advantages of including a control as source code are:
<ul type=disc>
<li>
There is no additional .ocx file to distribute.<br><br></li>
<li>
You don't have to debug your control for all possible test cases. You only have to debug the features used by your application.<br><br></li>
<li>
You don't have to worry about whether your application will work with future versions of the control, because the version your application uses is compiled in.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Some developers may argue that avoiding the additional .ocx file is not really an advantage. All Visual Basic applications require support files, and SetupWizard automatically includes them in your setup program, so you're not avoiding any extra work.</p>
<p>
Of course, there's no such thing as a free lunch. There are also disadvantages to including controls as source code:
<ul type=disc>
<li>
If you discover a bug in the control, you cannot simply distribute an updated .ocx file. You must recompile the entire application.<br><br></li>
<li>
Multiple applications will require more disk space, because instead of sharing one copy of an .ocx file, each application includes all the code for the control.<br><br></li>
<li>
Each time you use the source code in an application, there will be an opportunity to fix bugs or enhance the code. It may become difficult to keep track of which version of a control was used in which version of which application.<br><br></li>
<li>
Sharing source code with other developers may be problematic. At the very least, it's likely to require more support effort than distributing a compiled component. In addition, you give up control and confidentiality of your source code.</li>
</ul>
</BODY>
</HTML>

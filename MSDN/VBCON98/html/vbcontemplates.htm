<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Templates</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontemplates"></a>Working with Templates</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTemplatesC">
</object></p>
<p>
Visual Basic provides a variety of templates for creating common application components. Rather than creating all the pieces of your application from scratch, you can customize an existing template. You can also reuse custom components in multiple applications by creating your own templates.</p>
<p>
You can open an existing template by selecting its icon in the Add Object dialog box when you create a new form, module, control, property page, or document. For example, Visual Basic provides built-in form templates for creating an About dialog box, Options dialog box, or splash screen.</p>
<p class=label>
<b>Figure 8.3&nbsp;&nbsp;&nbsp;The Add Form dialog box</b></p>
<p>
<img src="avp08006.gif" border=0></p>
<p>
When you open a template, Visual Basic displays the object with placeholders that you can customize. For example, to create an About dialog box, open the About Dialog template and replace the Application Title, Version, and App Description placeholders with information specific to your application.</p>
<p class=label>
<b>Figure 8.4&nbsp;&nbsp;&nbsp;The About Dialog form template</b></p>
<p>
<img src="avp08007.gif" border=0></p>
<p>
To create your own template, save the object that you want to use as a template, then copy it to the appropriate subdirectory of the Visual Basic Template directory. For example, to create a custom MyForm form template, save a form named MyForm, then copy the MyForm.frm file to the \VB\Template\Forms directory. When you select the Add Form command from the Project menu, Visual Basic displays the MyForm template in the Add Form dialog box, as shown in Figure 8.3.</p>
<p>
You can disable display of templates in the Add object dialog box by selecting the Options command on the Tools menu and clearing the Show Templates options on the Environment tab of the Options dialog box. For example, to disable the display of form templates, clear the Forms option in the dialog box.</p>
<p class=label>
<b>Figure 8.5&nbsp;&nbsp;&nbsp;The Environment tab of the Options dialog box</b></p>
<p>
<img src="avp08008.gif" border=0></p>
</BODY>
</HTML>

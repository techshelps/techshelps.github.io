<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dropping the OLE Drag Source onto the OLE Drop Target</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondroppingoledragsourceontooledroptarget"></a>Dropping the OLE Drag Source onto the OLE Drop Target</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDroppingOLEDragSourceOntoOLEDropTargetC">
</object></p>
<p>
If your target supports manual OLE drag-and-drop operations, you can control what happens when the cursor is moved within the target and can specify what kind of data the target will accept. When the user drops the source object onto the target control, the OLEDragDrop event is used to query the DataObject object for a compatible data format, and then retrieve the data.</p>
<p>
The OLEDragDrop event also informs the source of the drop action, allowing it to delete the original data if a move has been specified, for example.</p>
<h2>Retrieving the Data</h2>
<p>
The OLEDragDrop event is triggered when the user drops the source onto the target. If data was placed into the DataObject object when the drag operation was initiated, it can be retrieved when the OLEDragDrop event is triggered, by using the GetData method. If, however, only the supported source formats were declared when the drag operation was initiated, then the GetData method will automatically trigger the OLESetData event on the source to place the data into, and then retrieve the data from, the DataObject object.</p>
<p>
The following example retrieves data that was placed into the DataObject object when the drag operation was initiated. The drag operation may have been initiated manually (using the OLEDrag method on the source) or automatically (by setting the OLEDragMode property of the source to Automatic). The dragged data is retrieved using the DataObject object’s GetData method. The GetData method provides you with constants that represent the data types that the DataObject object supports. In this case, we are retrieving the data as text.</p>
<pre><code>Private Sub txtTarget_OLEDragDrop(Data As _ 
      VB.DataObject, Effect As Long, Button As _
      Integer, Shift As Integer, X As Single, _
      Y As Single)
   txtTarget.Text = Data.GetData(vbCFText)
End Sub
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For a complete list of GetData format constants, see "The OLE Drag and Drop DataObject Object" earlier in this chapter.</p>
<h2>Querying the DataObject Object</h2>
<p>
You may need to query the DataObject object for the types of data that are being dropped onto the target. You use the GetFormat method in an If…Then statement to specify which types of data the target control can accept. If the data within the DataObject object is compatible, the drop action will be completed.</p>
<pre><code>Private Sub txtTarget_OLEDragDrop(Data As _
      VB.DataObject, Effect As Long, Button As _
      Integer, Shift As Integer, X As Single, _
      Y As Single)
   If Data.GetFormat(vbCFText) Then
      txtTarget.Text = Data.GetData(vbCFText)
   End If
End Sub
</code></pre>
<h2>Placing Data into the DataObject Object</h2>
<p>
When the target uses the GetData method to retrieve data from the source, the OLESetData event is only triggered if the data was not placed into the source when the drag operation was initiated.</p>
<p>
In many cases, especially if the source supports more than one format, or if it is time-consuming to create the data, you may want to place data into the DataObject object only when it is requested by the target. The OLESetData event allows the source to respond to only one request for a given format of data.</p>
<p>
For example, if the supported data formats were specified using the OLEStartDrag event when the drag operation was initiated, but data was not placed into the DataObject object, the OLESetData event is used to place a specific format of data into the DataObject object.</p>
<pre><code>Private Sub txtSource_OLESetData(Data As _
      VB.DataObject, DataFormat As Integer)
   If DataFormat = vbCFText Then
      Data.SetData txtSource.SelText, vbCfText
   End If
End Sub
</code></pre>
<h2>Informing the Source When Data is Dropped</h2>
<p>
The <i>effect</i> argument of the OLEDragDrop event specifies how the data was incorporated into the target when the data was dropped. When this argument is set, the OLECompleteDrag event is triggered on the source with its <i>effect</i> argument set to this value. The source can then take the appropriate action: If a move is specified, the source deletes the data, for example.</p>
<p>
The <i>effect</i> argument of the OLEDragDrop event uses the same constants as the <i>effect</i> argument of the OLEDragOver event to indicate the drop action. The following table lists these constants:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Constant</b></td>
<td class=label width=27%><b>Value</b></td>
<td class=label width=39%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=34%>vbDropEffectNone</td>
<td width=27%>0</td>
<td width=39%>Drop target cannot accept the data.</td>
</tr>
<tr valign=top>
<td width=34%>vbDropEffectCopy</td>
<td width=27%>1</td>
<td width=39%>Drop results in a copy. The original data is untouched by the drag source.</td>
</tr>
<tr valign=top>
<td width=34%>vbDropEffectMove</td>
<td width=27%>2</td>
<td width=39%>Drag source removes the data.</td>
</tr>
</table><br>
<p>
The following example sets the <i>effect</i> argument to indicate the drop action.</p>
<pre><code>Private Sub txtTarget_OLEDragDrop(Data As _
      VB.DataObject, Effect As Long, Button As _
      Integer, Shift As Integer, X As Single, _
      Y As Single)
   If Data.GetFormat(vbCFText) Then
      txtTarget.Text = Data.GetData(vbCFText)
   End If
   Effect = vbDropEffectMove
End Sub
</code></pre>
<p>
On the source side, the OLECompleteDrag event is triggered when the source is dropped onto the target, or when the OLE drag-and-drop operation is canceled. OLECompleteDrag is the last event in the drag-and-drop operation.</p>
<p>
The OLECompleteDrag event contains only one argument (<i>effect</i>), which is used to inform the source of the action that was taken when the data is dropped onto the target.</p>
<p>
The <i>effect</i> argument returns the same values that are used by the <i>effect</i> argument of the other OLE drag-and-drop events: vbDropEffectNone, vbDropEffectCopy, and vbDropEffectMove.</p>
<p>
By setting this argument after a move has been specified by the target and the source has been dropped into the target, for example, the source will delete the original data in the control. You should also use the OLECompleteDrag event to reset the mouse pointer if you specified a custom mouse pointer in the OLEGiveFeedback event. For example:</p>
<pre><code>Private Sub txtSource_OLECompleteDrag(Effect As Long)
   If Effect = vbDropEffectMove Then
      txtSource.SelText = ""
   End If
   Screen.MousePointer = vbDefault
End Sub
</code></pre>
</BODY>
</HTML>

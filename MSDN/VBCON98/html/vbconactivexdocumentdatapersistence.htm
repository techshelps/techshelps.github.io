<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Persisting ActiveX Document Data</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconactivexdocumentdatapersistence"></a>Persisting ActiveX Document Data</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconActiveXDocumentDataPersistenceC">
</object></p>
<p>
<i>Data persistence</i> is the ability of a component to store and retrieve data. How an ActiveX document persists data depends greatly on the container application in which the document appears. Some applications allow you to persist data by writing to an interface of the application. For example, the Internet Explorer 3.0 (and higher) and Microsoft Office Binder allows you to write to a file using the PropertyBag. Other applications, however, do not provide any such intrinsic method of storing data. In those cases, you must use another method, such as writing data to files. Let's start with the PropertyBag.</p>
<h2>The PropertyBag</h2>
<p>
The PropertyBag is an object that allows you to save data to a file. The file can be either the .vbd, .obd, or some other kind of file — it depends on the application. The PropertyBag has two methods, the WriteProperty method, and the ReadProperty method. The PropertyBag object is exposed as part of the WriteProperties and ReadProperties event declaration.</p>
<h3>Saving Data with the WriteProperty Method</h3>
<p>
The process of saving data is outlined:
<ol>
<li>
In an event that occurs when a property has changed, invoke the PropertyChanged method. The method notifies the container that a property has changed.<br><br></li>
<li>
In response to the PropertyChanged method, the container is "dirtied." And before the container terminates, the WriteProperties event occurs.<br><br></li>
<li>
In the WriteProperties event, use the WriteProperty method to save the property to the .vbd file.</li>
</ol>
<p>
The following code shows a simple illustration of this process:</p>
<pre><code>Private Sub Text1_Change()
   PropertyChanged "Text" ' Notify container a 
                         &nbsp; ' property has changed.
End Sub

Private Sub UserDocument_WriteProperties _
   (PropBag As VB.PropertyBag)
   ' Write the Property to the Property Bag.
   UserDocument.WriteProperty "Text1", Text1.Text, _
      "Hello"
End Sub
</code></pre>
<h3>Reading Properties</h3>
<p>
The next time the ActiveX document is opened, the ReadProperties event occurs. The PropertyBag is available in the event, and you can retrieve the persisted data using the ReadProperty method. The following code retrieves the data stored in the preceding code:</p>
<pre><code>Private Sub UserDocument_ReadProperties _
   (PropBag As VB.PropertyBag)
   ' Read the property back into the TextBox control.
   Text1.Text = ReadProperty("Text1", "Hello")
End Sub
</code></pre>
<h3>Saving a Default Value</h3>
<p>
You may have noticed that two code samples included an extra argument: the default value "Hello." Why provide a default when saving the property value? Before saving the value, the WriteProperty method compares the property value with this default. If they are the same, the property value doesn’t have to be saved, because default values will be set automatically when the control is reloaded. This keeps the data file from being cluttered with hundreds of default entries.</p>
<h3>Saving Binary Data</h3>
<p>
It's also possible to write and read binary data to the PropertyBag. This becomes useful if you have data that is stored in binary form. For example, you may have a graphics file that is stored in a custom format.</p>
<p>
The process of saving binary data differs slightly from that of saving control properties:
<ol>
<li>
Declare a module-level byte array.<br><br></li>
<li>
In an appropriate event, use the ReDim statement, and store the binary data in the array.<br><br></li>
<li>
Invoke the PropertyChanged method.<br><br></li>
<li>
In the WriteProperties event, save the byte array using the WriteProperty method.</li>
</ol>
<p>
These steps are shown in the following simple implementation:</p>
<pre><code>Private mbytMyData() As Byte ' Declare byte array.

Private Sub cmdSavePic_Click()
   ReDim mbytMyData(1 to 5000)
   ' Code to move data into byte array not shown.
   PropertyChanged
End Sub

Private Sub UserDocument_WriteProperties(PropBag As _
   VB.PropertyBag)
   PropBag.WriteProperties "myPic", mbytMyData
End Sub
</code></pre>
<h3>Persisting Data Using the Open Statement</h3>
<p>
If you are using a container that does not support the PropertyBag, or if you are saving User Defined Type (UDT) data, use the Open statement to read and write the data to disk. Instructions on using the Open statement can be found in "Using Sequential File Access" in "Processing Drives, Folders, and Files" of the <i>Programmer's Guide</i>.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To learn the do's and don'ts of adding properties to a components, see "Adding Properties And Methods to Classes," in "General Principles of Component Design."</p>
</BODY>
</HTML>

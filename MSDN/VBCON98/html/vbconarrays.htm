<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Arrays</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconarrays"></a>Arrays</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconArraysC">
</object></p>
<p>
If you have programmed in other languages, you're probably familiar with the concept of arrays. Arrays allow you to refer to a series of variables by the same name and to use a number (an index) to tell them apart. This helps you create smaller and simpler code in many situations, because you can set up loops that deal efficiently with any number of cases by using the index number. Arrays have both upper and lower bounds, and the elements of the array are contiguous within those bounds. Because Visual Basic allocates space for each index number, avoid declaring an array larger than necessary.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The arrays discussed in this section are arrays of variables, declared in code. They are different from the control arrays you specify by setting the Index property of controls at design time. Arrays of variables are always contiguous; unlike control arrays, you cannot load and unload elements from the middle of the array.</p>
<p>
All the elements in an array have the same data type. Of course, when the data type is Variant, the individual elements may contain different kinds of data (objects, strings, numbers, and so on). You can declare an array of any of the fundamental data types, including user-defined types (described in the section, "Creating Your Own Data Types," in "More About Programming") and object variables (described in "Programming with Objects").</p>
<p>
In Visual Basic there are two types of arrays: a <i>fixed-size array</i> which always remains the same size, and a <i>dynamic array</i> whose size can change at run-time. Dynamic arrays are discussed in more detail in the section "Dynamic Arrays" later in this chapter.</p>
<h2>Declaring Fixed-Size Arrays</h2>
<p>
There are three ways to declare a fixed-size array, depending on the scope you want the array to have:
<ul type=disc>
<li>
To create a <i>public array</i>, use the Public statement in the Declarations section of a module to declare the array. <br><br></li>
<li>
To create a <i>module-level array</i>, use the Private statement in the Declarations section of a module to declare the array. <br><br></li>
<li>
To create a <i>local array</i>, use the Private statement in a procedure to declare the array.</li>
</ul>
<h2>Setting Upper and Lower Bounds</h2>
<p>
When declaring an array, follow the array name by the upper bound in parentheses. The upper bound cannot exceed the range of a Long data type (-2,147,483,648 to 2,147,483,647). For example, these array declarations can appear in the Declarations section of a module:</p>
<pre><code>Dim Counters(14) As Integer         ' 15 elements.
Dim Sums(20) As Double            ' 21 elements.
</code></pre>
<p>
To create a public array, you simply use Public in place of Dim:</p>
<pre><code>Public Counters(14) As Integer
Public Sums(20) As Double
</code></pre>
<p>
The same declarations within a procedure use Dim:</p>
<pre><code>Dim Counters(14) As Integer
Dim Sums(20) As Double
</code></pre>
<p>
The first declaration creates an array with 15 elements, with index numbers running from 0 to 14. The second creates an array with 21 elements, with index numbers running from 0 to 20. The default lower bound is 0. </p>
<p>
To specify a lower bound, provide it explicitly (as a Long data type) using the To keyword:</p>
<pre><code>Dim Counters(1 To 15) As Integer
Dim Sums(100 To 120) As String
</code></pre>
<p>
In the preceding declarations, the index numbers of <code>Counters</code> range from 1 to 15, and the index numbers of <code>Sums</code> range from 100 to 120.</p>
<h2>Arrays that Contain Other Arrays</h2>
<p>
It's possible to create a Variant array, and populate it with other arrays of different data types. The following code creates two arrays, one containing integers and the other strings. It then declares a third Variant array and populates it with the integer and string arrays.</p>
<pre><code>Private Sub Command1_Click()
   Dim intX As Integer   ' Declare counter variable.
   ' Declare and populate an integer array.
   Dim countersA(5) As Integer
      For intX = 0 To 4
         countersA(intX) = 5
      Next intX
   ' Declare and populate a string array.
      Dim countersB(5) As String
         For intX = 0 To 4
            countersB(intX) = "hello"
         Next intX
   Dim arrX(2) As Variant   ' Declare a new two-member 
                           ' array.
      arrX(1) = countersA()   ' Populate the array with 
                              ' other arrays.
      arrX(2) = countersB()
      MsgBox arrX(1)(2)   ' Display a member of each 
                        ' array.
      MsgBox arrX(2)(3)
End Sub
</code></pre>
<h2>Multidimensional Arrays</h2>
<p>
Sometimes you need to keep track of related information in an array. For example, to keep track of each pixel on your computer screen, you need to refer to its X and Y coordinates. This can be done using a multidimensional array to store the values.</p>
<p>
With Visual Basic, you can declare arrays of multiple dimensions. For example, the following statement declares a two-dimensional 10-by-10 array within a procedure:</p>
<pre><code>Static MatrixA(9, 9) As Double
</code></pre>
<p>
Either or both dimensions can be declared with explicit lower bounds:</p>
<pre><code>Static MatrixA(1 To 10, 1 To 10) As Double
</code></pre>
<p>
You can extend this to more than two dimensions. For example:</p>
<pre><code>Dim MultiD(3, 1 To 10, 1 To 15)
</code></pre>
<p>
This declaration creates an array that has three dimensions with sizes 4 by 10 by 15. The total number of elements is the product of these three dimensions, or 600.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you start adding dimensions to an array, the total storage needed by the array increases dramatically, so use multidimensional arrays with care. Be especially careful with Variant arrays, because they are larger than other data types.</p>
<h2>Using Loops to Manipulate Arrays</h2>
<p>
You can efficiently process a multidimensional array by using nested For loops. For example, these statements initialize every element in <code>MatrixA</code> to a value based on its location in the array:</p>
<pre><code>Dim I As Integer, J As Integer
Static MatrixA(1 To 10, 1 To 10) As Double
For I = 1 To 10
   For J = 1 To 10
      MatrixA(I, J) = I * 10 + J
   Next J
Next I
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information about loops, see "Loop Structures" later in this chapter.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Manually Creating a Setup.lst File</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmanuallycreatingsetuplstfile"></a>Manually Editing a Setup.lst File</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconManuallyCreatingSetuplstFile_C">
</object></p>
<p>
If you use the Package and Deployment Wizard, the wizard creates the Setup.lst file automatically. You can edit the file manually after creation if you need to customize it.</p>
<p>
The Setup.lst file describes all the files that must be installed on the user's machine for your application and contains crucial information for the setup process. For example, the Setup.lst file tells the system the name of each file, where to install it, and how it should be registered. There are five sections to the Setup.lst file:
<ul type=disc>
<li>
The BootStrap section — lists the core information about the application, such as the name of the main setup program for the application, the temporary directory to use during the installation process, and the text in the startup window that appears during installation.<br><br></li>
<li>
The BootStrap Files section — lists all files required by the main installation file. Normally, this includes just the Visual Basic run-time files.<br><br></li>
<li>
The Setup1 Files section — lists all other files required by your application, such as .exe files, data, and text.<br><br></li>
<li>
The Setup section — contains information needed by other files in the application.<br><br></li>
<li>
The Icon Groups section — contains information about the groups your installation process will create. Each member of this section has a correlating section containing the icons to be created in that group.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Format of the Bootstrap and Setup1 Files Sections" for information on the syntax for these sections.</p>
<h2>The BootStrap Section</h2>
<p>
The BootStrap section contains all the information the setup.exe file needs to set up and launch the main installation program for your application.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Remember that there are two setup programs for your installation: setup.exe, which is a pre-installation program, and setup1.exe, which is compiled from the Setup Toolkit. The BootStrap section provides instructions to the setup.exe file.</p>
<p>
The BootStrap section contains the following components:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Component</b></td>
<td class=label width=74%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%>SetupTitle</td>
<td width=74%>The title to show in the dialog box that appears as setup.exe is copying files to your system.</td>
</tr>
<tr valign=top>
<td width=26%>SetupText</td>
<td width=74%>The text to show within the dialog box that appears as setup.exe is copying files to your system.</td>
</tr>
<tr valign=top>
<td width=26%>CabFile</td>
<td width=74%>The name of the .cab file for your application, or the name of the first .cab file for your application if your package has multiple .cab files.</td>
</tr>
<tr valign=top>
<td width=26%>Spawn</td>
<td width=74%>The name of the application to launch when setup.exe finishes processing. In most instances, this will be the setup1.exe file. </td>
</tr>
<tr valign=top>
<td width=26%>TmpDir</td>
<td width=74%>The location you wish to use for the temporary files generated during the installation process.</td>
</tr>
<tr valign=top>
<td width=26%>Uninstall</td>
<td width=74%>The name of the application to use as an uninstall program. In general, this is st6unst.exe, which is automatically packaged into all packages created with the wizard.</td>
</tr>
</table><br>
<h2>The BootStrap Files Section</h2>
<p>
The BootStrap Files section lists all the files that must be loaded on the user's machine before your application and dependency files can be loaded. These pre-install, or <i>bootstrap</i>, files include the core files required to run any Visual Basic application, such as the Visual Basic run-time DLL (Msvbvm60.dll). The setup program installs these files prior to installing and launching the main installation program.</p>
<p>
The following example shows entries in a typical BootStrap Files section:</p>
<pre><code>[Bootstrap Files]
File1=@Msvbvm60.dll,$(WinSysPathSysFile),$(DLLSelfRegister),1/23/98 9:43:25 AM,1457936,6.0.80.23

File2=@OleAut32.dll,$(WinSysPath),$(DLLSelfRegister),1/21/98 11:08:26 PM,571152,2.30.4248.1

File3=@OlePro32.dll,$(WinSysPathSysFile),$(DLLSelfRegister),1/21/98 11:08:27 PM,152336,5.0.4248.1
</code></pre>
<h2>The Setup1 Files Section</h2>
<p>
The Setup1 Files section contains all the other files required by your application, such as your .exe file, data, text, and dependencies. The setup program installs these files after it installs the core files listed in the Bootstrap Files section.</p>
<p>
The following example shows entries in a typical Setup1 Files section:</p>
<pre><code>[Setup1 Files]
File1=@LotsAControls.exe,$(AppPath),$(EXESelfRegister),,1/26/98 3:43:48 PM,7168,1.0.0.0

File2=@mscomctl.ocx,$(AppPath),$(DLLSelfRegister),,1/23/98 9:43:40 AM,1011472,6.0.80.23
</code></pre>
<h2>The Setup Section</h2>
<p>
The Setup section of the Setup.lst file is simply a list of information used by other parts of the installation process. The following table lists the information contained in the Setup section.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Component</b></td>
<td class=label width=74%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%>Title</td>
<td width=74%>The name of the application as it will appear in the splash screen during installation, in the program groups on the Start menu, and in the program item name.</td>
</tr>
<tr valign=top>
<td width=26%>DefaultDir</td>
<td width=74%>The default installation directory. The user can specify a different directory during the installation process.</td>
</tr>
<tr valign=top>
<td width=26%>ForceUseDefDir</td>
<td width=74%>If left blank, the user is prompted for an installation directory. If set to 1, the application is automatically installed to the directory specified by "DefaultDir" in Setup.lst.</td>
</tr>
<tr valign=top>
<td width=26%>AppToUninstal</td>
<td width=74%>The name you wish to see as your application in the Add/Remove Programs utility in Control Panel.</td>
</tr>
<tr valign=top>
<td width=26%>AppExe</td>
<td width=74%>The name of your application's executable file, such as Myapp.exe.</td>
</tr>
</table><br>
<h2>The IconGroups Section</h2>
<p>
The IconGroups section contains information about the Start menu program groups created by the installation process. Each program group to be created is first listed in the IconGroups section, then assigned an individual section (Group0, Group1, Group2, etc.) that contains information about icons and titles for that group. Groups are numbered sequentially starting at zero.</p>
<p>
The following example shows entries in a typical IconGroups section and related subsections:</p>
<pre><code>[IconGroups]
Group0=MyTestEXE
Group1=Group1

[MyTestExe]
Icon1=my.exe
Title1=MyTestExe

[Group1]
Icon1=ReadMe.txt
Title1=ReadMe
Icon2=my.hlp
Title2=Help
</code></pre>
</BODY>
</HTML>

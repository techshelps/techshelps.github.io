<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sorting and Merging Data in the Hierarchical FlexGrid</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconsortmergedatainhflex"></a>Sorting and Merging Data in the Hierarchical FlexGrid</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconSortMergeDataInHFlex_C">
</object></p>
<p>
In this scenario, you can sort and merge data in the Hierarchical FlexGrid. In most cases, you access data by downloading from a database into your Hierarchical FlexGrid. However, here you enter sample data using the <b>Code Editor </b>window to populate the columns and rows of your Hierarchical FlexGrid.</p>
<p class=label>
<b>To create this data display</b>
<ol>
<li>
Set the properties of the Hierarchical FlexGrid.<br><br></li>
<li>
Create the data.<br><br></li>
<li>
Define the routines to calculate an index and do a sort.<br><br></li>
<li>
Define the routine to enter the data (from step 2) into the Hierarchical FlexGrid.<br><br></li>
<li>
Allow the control to switch data organization views.</li>
</ol>
<p>
To complete the scenario, follow the procedures in this section in the order shown.</p>
<h2>Setting the Properties of the Control</h2>
<p>
Use the settings in the following table for the number of columns and rows, the font information, and to create the column headings of your Hierarchical FlexGrid.</p>
<p class=label>
<b>MSHFlexGrid control</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Property</b></td>
<td class=label width=50%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=50%>Name</td>
<td width=50%>Fg1</td>
</tr>
<tr valign=top>
<td width=50%>Cols</td>
<td width=50%>4</td>
</tr>
<tr valign=top>
<td width=50%>Rows</td>
<td width=50%>20</td>
</tr>
<tr valign=top>
<td width=50%>MergeCells</td>
<td width=50%>2 – Restrict Rows</td>
</tr>
<tr valign=top>
<td width=50%>FormatString</td>
<td width=50%>&lt;Region |&lt;Product |&lt;Employees |&gt;Sales</td>
</tr>
<tr valign=top>
<td width=50%>FontName</td>
<td width=50%>Arial</td>
</tr>
</table><br>
<h2>Sorting and Merging the Data</h2>
<p>
Use the following procedures to complete the scenario of sorting and merging data in your Hierarchical FlexGrid.</p>
<p class=label>
<b>To sort and merge the data</b>
<ol>
<li>
Create an array to store the sample data. To do this, insert the following routine in the Form_Load event of your <b>Code Editor </b>window:<pre><code>Sub Form_Load ()
 &nbsp; Dim I As Integer
<b> &nbsp; ' </b>Create array.
 &nbsp; For i = Fg1.FixedRows To Fg1.Rows - 1
 &nbsp;&nbsp;&nbsp;&nbsp; ' Region.
 &nbsp;&nbsp;&nbsp;&nbsp; Fg1.TextArray(fgi(i, 0)) = RandomString(0)
 &nbsp;&nbsp;&nbsp;&nbsp; ' Product.
 &nbsp;&nbsp;&nbsp;&nbsp; Fg1.TextArray(fgi(i, 1)) = RandomString(1)
 &nbsp;&nbsp;&nbsp;&nbsp; ' Employee.
 &nbsp;&nbsp;&nbsp;&nbsp; Fg1.TextArray(fgi(i, 2)) = RandomString(2)
 &nbsp;&nbsp;&nbsp;&nbsp; Fg1.TextArray(fgi(i, 3)) = _
 &nbsp;&nbsp;&nbsp;&nbsp; Format(Rnd * 10000, "#.00")
 &nbsp; Next

<b> &nbsp; '</b> Set up merging.
 &nbsp; Fg1.MergeCol(0) = True
 &nbsp; Fg1.MergeCol(1) = True
 &nbsp; Fg1.MergeCol(2) = True

<b> &nbsp; ' </b>Sort to see the effects.
 &nbsp; DoSort

 &nbsp; ' Format Grid
 &nbsp; Fg1.ColWidth(0) = 1000
 &nbsp; Fg1.ColWidth(1) = 1000
 &nbsp; Fg1.ColWidth(2) = 1000
 &nbsp; Fg1.ColWidth(3) = 1000

End Sub
</code></pre>
</li>
<li>
Calculate an index and complete a sort. To do this, define a routine to calculate an index and do a sort. The index is used with the <b>TextArray</b> property to sort the data. Insert the following routine to calculate an index:<pre><code>Function Fgi (r As Integer, c As Integer) As Integer
 &nbsp; Fgi = c + Fg1.Cols * r
End Function

Sub DoSort ()
 &nbsp; Fg1.Col = 0
 &nbsp; Fg1.ColSel = Fg1.Cols - 1
 &nbsp; Fg1.Sort = 1&nbsp;&nbsp; <b>' </b>Generic ascending.
End Sub
</code></pre>
</li>
<li>
Enter data into your Hierarchical FlexGrid. To do this, define a routine that populates the Hierarchical FlexGrid with the sample data:<pre><code>Function RandomString (kind As Integer)
 &nbsp; Dim s As String
 &nbsp; Select Case kind

 &nbsp;&nbsp;&nbsp;&nbsp; Case 0&nbsp;&nbsp; ' Region.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Select Case (Rnd * 1000) Mod 5
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 0: s = "1. Northwest"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 1: s = "2. Southwest"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 2: s = "3. Midwest"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 3: s = "4. East"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case Else: s = "5. Overseas"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Select

 &nbsp;&nbsp;&nbsp;&nbsp; Case 1&nbsp;&nbsp; ' Product.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Select Case (Rnd * 1000) Mod 5
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 0: s = "1. Chai"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 1: s = "2. Peppermint"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 2: s = "3. Chamomile"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case Else: s = "4. Oolong"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Select

 &nbsp;&nbsp;&nbsp;&nbsp; Case 2&nbsp;&nbsp; ' Employee.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Select Case (Rnd * 1000) Mod 4
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 0: s = "Clare"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 1: s = "Tiffany"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case 2: s = "Sally"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case Else: s = "Lori"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Select
 &nbsp; End Select
 &nbsp; RandomString = s
End Function
</code></pre>
<p class=tl>
If you run the project at this point, it should look something like this:</P><p>
<img src="vb536d1.gif" border=0></P><p class=tl>
Next, you need to allow the user to reorganize the data. That is, you must allow the Hierarchical FlexGrid to switch data organization views.</P></li>
<li>
Reorganize the data by adding the following routine, which will drag columns to new positions. This routine uses the <b>Tag</b> property to save the column number when the user presses the mouse button, triggering the <b>MouseDown</b> event.<pre><code>Sub Fg1_MouseDown (Button As Integer, _
Shift As Integer, X As Single, Y As Single)
 &nbsp; Fg1.Tag = ""
 &nbsp; If Fg1.MouseRow &lt;&gt; 0 Then Exit Sub
 &nbsp; Fg1.Tag = Str(Fg1.MouseCol)
 &nbsp; MousePointer = vbSizeWE
End Sub
</code></pre>
</li>
<li>
Add the following routine to readjust the columns and sort the data when the user releases the mouse button, triggering the <b>MouseUp</b> event.<pre><code>Sub Fg1_MouseUp (Button As Integer, Shift As _
Integer, X As Single, Y As Single)
 &nbsp; MousePointer = vbDefault
 &nbsp; If Fg1.Tag = "" Then Exit Sub
 &nbsp; Fg1.Redraw = False
 &nbsp; Fg1.ColPosition(Val(Fg1.Tag)) = Fg1.MouseCol
 &nbsp; DoSort
 &nbsp; Fg1.Redraw = True
End Sub
</code></pre>
<p class=tl>
Once the procedures in this scenario are complete, the data automatically reorganizes whenever you drag a column to a new position at run time. For example, if you drag the Employee column to the left, it would appear as follows:</P><p>
<img src="vb536d2.gif" border=0></P></li>
</ol>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Providing an Asynchronous Notification Event</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingcodeforinitializeterminateevents"></a>Providing an Asynchronous Notification Event</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingCodeForInitializeTerminateEventsC">
</object></p>
<p>
One of the most interesting uses for out-of-process components is to provide asynchronous notifications to the client. That is, the client doesn’t remain blocked while the component executes a method — instead, it goes about its business while the component works on a task or watches for an occurrence of interest. The component’s notification arrives out of the blue, without any specific action on the part of the client.</p>
<p>
The procedure in this topic sets up a simple asynchronous notification based on a common data processing problem: How do you know when the coffee is ready?</p>
<p>
The demonstration assumes that you have a coffee maker with a serial interface (however, the demonstration will work even if you don’t). The Coffee component tests the serial port periodically to see if the coffee maker’s High bit is set, indicating that the coffee is ready.</p>
<p>
Before you begin this procedure, make sure you’ve returned the Coffee project to design mode, as described at the end of "How Modal and Modeless Forms Behave Out of Process."</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX EXE. It begins with the topic <a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a>.</p>
<p class=label>
<b>To set up an asynchronous notification event in the CoffeeMonitor class</b>
<ol>
<li>
In the <b>Project Explorer</b> window, right-click <b>TestForm</b> to open the context menu, and select <b>View Object</b> to open the form designer. Add a Timer control, and set its properties as follows:<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Object</b></td>
<td class=label width=32%><b>Property</b></td>
<td class=label width=38%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=30%>Timer control</td>
<td width=32%>(Name)<br>
Enabled<br>
Interval</td>
<td width=38%>tmrCoffee<br>
True<br>
10000</td>
</tr>
</table><br>
<p class=tl>
There’s no need to put code in the tmrControl_Timer event procedure. As you’ll see, CoffeeMonitor will handle the control’s Timer event, test the serial port, and raise the CoffeeReady event to notify CoffeeWatch.</P></li>
<li>
In the <b>Project Explorer</b> window, double-click <b>CoffeeMonitor</b> (or select it and then click the Code button on the <b>Project Explorer</b> window toolbar), to open its code window. Highlight all of the code except Option Explicit, and comment it out using the Comment Block button on the <b>Edit</b> toolbar, as shown here:<p>
<img src="avtcm120.gif" border=0></P><p class=tl>
In order to view all the code at once, make sure you’ve selected Full Module View, as shown by the buttons in the lower left-hand corner of the code window.</P><p class=tl>
You can show the <b>Edit</b> toolbar using the context menu accessed by right-clicking the menu or standard toolbar, as shown here:</P><p>
<img src="avtcm121.gif" border=0></P></li>
<li>
In the Declarations section, add the following variables and event declaration:<pre><code>Option Explicit
Private mTestForm As TestForm
Private WithEvents mwtmrCoffee As Timer
Event CoffeeReady()
</code></pre>
<ul type=disc>
<li>
CoffeeMonitor will raise the CoffeeReady event to notify the CoffeeWatch program when the coffee’s ready.<br><br></li>
<li>
The variable <code>mTestForm</code> will hold a reference to an instance of TestForm, whose only purpose is to hold the Timer control.<br><br></li>
<li>
The variable <code>mwtmrCoffee</code> will hold a reference to the Timer control on the TestForm. The variable is declared WithEvents so that the CoffeeMonitor object can handle the timer’s events.</li>
</ul>
</li>
<li>
In the left-hand (Object) drop down, select <b>Class</b> to make the event procedure templates for the class module available in the right-hand (Procedure) drop down, and to open the template for the default event (Initialize). Add the following code to create and load an instance of TestForm when the CoffeeMonitor object is created:<pre><code>Private Sub Class_Initialize()
 &nbsp; Set mTestForm = New TestForm
 &nbsp; Load mTestForm
 &nbsp; Set mwtmrCoffee = mTestForm.tmrCoffee
End Sub
</code></pre>
<p class=tl>
After the instance of TestForm is created and loaded, a reference to <code>tmrCoffee</code> is placed in the variable <code>mwtmrCoffee</code>. When the reference is placed in the WithEvents variable, Visual Basic connects the timer’s events to the associated event procedures in CoffeeMonitor.</P></li>
<li>
In the Procedure drop down, select the Terminate event for the class. Add the following code to the event procedure template:<pre><code>Private Sub Class_Terminate()
 &nbsp; Set mwtmrCoffee = Nothing
 &nbsp; Unload mTestForm
 &nbsp; Set mTestForm = Nothing
End Sub
</code></pre>
<p class=tl>
As we saw in "How Modal and Modeless Forms Behave Out of Process," objects that use forms in out-of-process components need to dispose of the forms when they’re done with them. The first step is to set the WithEvents variable to Nothing, so that CoffeeMonitor will stop handling the Timer control’s events. Then TestForm can be unloaded, and the variable containing the reference to it can be set to Nothing.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Strictly speaking, there’s no need to set <code>mTestForm</code> to Nothing here. Visual Basic will set the variable to Nothing when it destroys the CoffeeMonitor object.</p></li>
<li>
In the Object drop down, select <b>mwtmrCoffee</b>. The Timer control’s only event, <b>Timer</b>, appears in the Procedure drop down, and the event procedure template is added to the code window. Add the following code:<pre><code>Private Sub mwtmrCoffee_Timer()
 &nbsp; ' (Code to test serial port omitted.)
 &nbsp; RaiseEvent CoffeeReady
End Sub
</code></pre>
<p class=tl>
Event procedures associated with a WithEvents variable always begin with the variable name, as discussed in "Adding Events to Classes" in "General Principles of Component Design."</P><p class=tl>
When the CoffeeMonitor object receives the Timer event, it raises its own CoffeeReady event to notify any clients (CoffeeWatch, in this case) that the coffee’s ready.</P><p class=tl>
(This code simply raises the CoffeeReady event every ten seconds. If you actually have a coffee pot with a serial port, you can add code to test coffee maker’s status, and conditionally raise the event.)</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;One of the advantages of using events to provide notifications is that only one reference is needed. That is, TestForm doesn’t need a reference to the CoffeeMonitor object in order for the Timer control to send CoffeeMonitor an event. This avoids the circular reference problem described in "Dealing with Circular References" in "General Principles of Component Design."</p></li>
<li>
Press CTRL+f5 to run the project. Remember, when working with out-of-process components, the component project must be in run mode before you can edit or run the client project.<p class=tl>
Component projects should be run with CTRL+F5 (or <b>Start with Full Compile</b> on the <b>Run</b> menu) if <b>Compile On Demand</b> is checked, as discussed in "Showing Forms from the CoffeeMonitor Class."</P></li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Events are introduced in "Adding an Event to a Class" and "Adding Events to Forms," in "Programming with Objects" in the <i>Visual Basic Programmer’s Guide.</i></p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX EXE.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>To</b></td>
<td class=label width=62%><b>See</b></td>
</tr>
<tr valign=top>
<td width=38%>Go to the next step</td>
<td width=62%><a href="vbconrunningproject.htm">Receiving an Asynchronous Notification Event</a></td>
</tr>
<tr valign=top>
<td width=38%>Start from the beginning</td>
<td width=62%><a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a></td>
</tr>
</table><br>
</BODY>
</HTML>

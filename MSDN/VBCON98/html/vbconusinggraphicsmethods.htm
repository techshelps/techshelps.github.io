<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Graphics Methods</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusinggraphicsmethods"></a>Using Graphics Methods</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingGraphicsMethodsC">
</object></p>
<p>
In addition to the graphical controls, Visual Basic provides several methods for creating graphics. The graphics methods, summarized in the following table, apply to forms and picture boxes.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Method</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>Cls</td>
<td width=72%>Clears all graphics and Print output.</td>
</tr>
<tr valign=top>
<td width=28%>PSet</td>
<td width=72%>Sets the color of an individual pixel.</td>
</tr>
<tr valign=top>
<td width=28%>Point</td>
<td width=72%>Returns the color value of a specified point.</td>
</tr>
<tr valign=top>
<td width=28%>Line</td>
<td width=72%>Draws a line, rectangle, or filled-in box.</td>
</tr>
<tr valign=top>
<td width=28%>Circle</td>
<td width=72%>Draws a circle, ellipse, or arc.</td>
</tr>
<tr valign=top>
<td width=28%>PaintPicture</td>
<td width=72%>Paints graphics at arbitrary locations.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Print method can also be considered a graphics method, because its output is written to the object and is saved in the memory image (if AutoRedraw is on) just like the PSet, Line, and Circle methods. For more information about the Print method, see "Displaying Text on Forms and Picture Boxes" earlier in this chapter.</p>
<h2>Advantages of Graphics Methods</h2>
<p>
The graphics methods work well in situations where using graphical controls require too much work. For example, creating gridlines on a graph would need an array of line controls but only a small amount of code using the Line method. Tracking the position of line controls in an array as the form changes size is more work than simply redrawing lines with the Line method.</p>
<p>
When you want a visual effect to appear briefly on a form, such as a streak of color when you display an About dialog, you can write a couple of lines of code for this temporary effect instead of using another control.</p>
<p>
Graphics methods offer some visual effects that are not available in the graphical controls. For example, you can only create arcs or paint individual pixels using the graphics methods. Graphics you create with these graphics methods appear on the form in a layer of their own. This layer is below all other controls on a form, so using the graphics methods can work well when you want to create graphics that appear behind everything else in your application.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Layering Graphics with AutoRedraw and ClipControls" earlier in this chapter.</p>
<h2>Limitations of Graphics Methods</h2>
<p>
Creating graphics with the graphics methods takes place in code, which means you have to run the application to see the effect of a graphics method. Graphics methods therefore don't work as well as graphical controls for creating simple design elements of an interface. Changing the appearance of graphical controls at design time is easier than modifying and testing the code for a graphics method.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information about creating graphical applications with the mouse events and the Line or Move methods, see "The MouseDown Event," "The MouseMove Event" and "Using Button to Enhance Graphical Mouse Applications" in "Responding to Mouse and Keyboard Events."</p>
</BODY>
</HTML>

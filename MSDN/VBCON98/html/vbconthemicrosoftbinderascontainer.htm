<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Microsoft Binder as a Container</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconthemicrosoftbinderascontainer"></a>The Microsoft Binder as an ActiveX Container</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheMicrosoftBinderAsContainerC">
</object></p>
<p>
The Microsoft Office Binder is an electronic "paper clip" — you can add several disparate kinds of documents to the Binder that have some relation to each other. "Documents" can include:
<ul type=disc>
<li>
Word documents<br><br></li>
<li>
Excel documents<br><br></li>
<li>
PowerPoint presentations</li>
</ul>
<p>
This topic covers the basics of using the Binder as a container of ActiveX documents.</p>
<h2>Adding an ActiveX Document</h2>
<p>
There are two ways to add an ActiveX document to a Binder:
<ul type=disc>
<li>
Add an ActiveX document as a section.<br><br></li>
<li>
Add an ActiveX as a file.</li>
</ul>
<h3>Adding the ActiveX Document as a Section</h3>
<p>
When you add an ActiveX document as a section, the Binder adds the document using its ProgID. When an ActiveX document is added this way, it's akin to adding a blank Word document — the document is a "blank" document. To identify the "blank" document, Binder looks for the <i>ProgID</i> of the ActiveX document. In brief, the ProgId (or <i>programmatic ID</i>) is the class name and the component name separated by a period. For example, the ProgID of an ActiveX document with no changes to the default settings would be "Project1.UserDocument1".</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you add a new section, you are create a new object from the ActiveX document class. Thus the InitProperties event will always occur (instead of the ReadProperties event).</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For details about Programmatic IDs, see "Adding Classes to Components" in "General Principles of Component Design."</p>
<p class=label>
<b>To add an ActiveX document as a section</b>
<ol>
<li>
Start Microsoft Binder.<br><br></li>
<li>
On the <b>Section</b> menu, click <b>Add</b> to open the <b>Add Section</b> dialog box.<br><br></li>
<li>
From the scrollable list of ProgIDs, double-click your ActiveX document.</li>
</ol>
<h3>Adding the ActiveX Document as a File</h3>
<p>
When you add an ActiveX document as a file, you can select a particular .vbd file that you may have saved earlier.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you have created an ActiveX document that persists data (through the PropertyBag), and you have saved data to the file, adding that .vbd file will cause the ReadProperties event to occur. But if you did not write code to persist data, the InitProperties event will fire instead. For details on persisting data, see "Persisting ActiveX Document Data" in this chapter.</p>
<p class=label>
<b>To add an ActiveX document as a section</b>
<ol>
<li>
Start Microsoft Binder<br><br></li>
<li>
On the <b>Section</b> menu, click <b>Add from File</b> to open the <b>Add from File </b>dialog box.<br><br></li>
<li>
Navigate to your .vbd file, and click <b>Add</b>.</li>
</ol>
<h3>Saving an ActiveX Document in the Binder</h3>
<p>
As with any other document in the binder, you can save the ActiveX document as one of a group of documents. When you save the ActiveX document in this way, the WriteProperties event will fire. However, to actually persist data in the document, you must have written the proper code in the WriteProperties event.</p>
<p class=label>
<b>To save an ActiveX document in the Binder</b>
<ol>
<li>
Add the ActiveX document, either as a section or a file.<br><br></li>
<li>
On the <b>File</b> menu, click <b>Save Binder</b> to open the <b>Save Binder As </b>dialog box.<br><br></li>
<li>
Type the name of the Binder and click <b>Save</b>.</li>
</ol>
<h2>Programming the Binder</h2>
<p>
You can create ActiveX documents that programmatically manipulate other sections. In order to do this, you must know the object model of the Binder.</p>
<p>
The Binder's object model is built around a collection of Section objects, the Sections collection. And each Section object can contain a Microsoft Excel, Word, PowerPoint, or Visual Basic ActiveX document. Using this knowledge, it's possible to walk through the Sections and get a reference to each document. Using that reference, you can then manipulate the document's objects. This is easier to explain in a simple procedure.</p>
<h3>Example: Manipulating an Excel Spreadsheet</h3>
<p>
The following scenario is necessarily simple: add an Excel worksheet and an ActiveX document to the Binder, and using an ActiveX document, retrieve a value from the worksheet.</p>
<p class=label>
<b>To retrieve a value from an Excel worksheet</b>
<ol>
<li>
In Visual Basic, on the <b>File </b>menu, click <b>New Project</b>. Then click the <b>ActiveX Document DLL</b> icon.<br><br></li>
<li>
In the <b>Project Explorer</b> window, double-click <b>UserDocument1 </b>to show its designer.<br><br></li>
<li>
Draw a TextBox control on the designer, and change its name to "txtCell"<br><br></li>
<li>
Draw a CommandButton control on the designer, and change it's caption to "Get Value".<br><br></li>
<li>
On the <b>Project</b> menu, click <b>References </b>to show the <b>References </b>dialog box.<br><br></li>
<li>
From the scrolling list of references, click the <b>OLE Automation Binder 1.0 </b>Type Library checkbox.<br><br></li>
<li>
Double-click the <b>CommandButton</b> to show its code window.<br><br></li>
<li>
Add the following code to the Command1 click event.<pre><code>Private Sub Command1_Click()
Dim i As Integer ' Counter
Dim objX As Sections ' Object variable
Set objX = UserDocument.Parent.Parent.Sections
For i = 1 to objX.Count
If TypeName(objX.Item(i).Object) = _
"Worksheet" Then
txtCell = objeX.Item(i).Object.Range. _
("A1").Value
End If
Next i
End Sub
</code></pre>
</li>
<li>
Press f5<small> </small>to run the project.<br><br></li>
<li>
Minimize the Visual Basic instance.<br><br></li>
<li>
Start Microsoft Binder.<br><br></li>
<li>
On the <b>Section </b>menu, click <b>Add Section</b>.<br><br></li>
<li>
Double-click <b>Microsoft Excel Worksheet</b>. A blank worksheet is now added to the Binder.<br><br></li>
<li>
Type a distinctive number or text into cell A1 (it's already selected for you, so you can simply begin typing).<br><br></li>
<li>
On the <b>Section </b>menu, click <b>Add Section</b>.<br><br></li>
<li>
Double-click <b>Project1.UserDocument1</b>.<br><br></li>
<li>
Click <b>Get Value</b>. The text or number you just typed into the spreadsheet will appear in the textbox.</li>
</ol>
<h4>The Code Explained</h4>
<p>
Because we want to early-bind the object variable, step 6 instructs you to add a reference to the OLE Automation Binder Type Library. Thus in the code, we declare the object variable of type Sections. The code then sets the variable to the Binder's Sections collection.</p>
<p>
Once we have a reference to the collection, we can iterate through its members using the For statement. Within the For look, we then use the TypeName function to return the type of each object in the section. If the TypeName function returns "Worksheet," we know that it's the Excel worksheet in the collection. Having determined that, the code simply returns the contents of cell A1 to the TextBox control.</p>
<h3>Another Example: Adding a Second ActiveX Object</h3>
<p>
Adding another ActiveX document to the Binder is also accomplished using the Sections collection. This time, however, we use the Add method of the Sections collection.</p>
<pre><code>Option Explicit
Private mMyDoc2 As axdDoc2 ' Module level variable

Private Sub AddDoc_Click()
   Dim objX As Sections ' Object variable
   Set objX = UserDocument.Parent.Parent.Sections
   Set mMyDoc2 = objX.Add( , "c:\axdDoc2.vbd")
End Sub
</code></pre>
<p>
The preceding code again uses the Sections collection, but instead uses the Add method to add a second ActiveX document to the binder. You may have noticed that the code also declares a module-level variable as type axdDoc2 (assuming that is the name of the second document). The code sets the object variable to the reference returned by the Add method. With that reference, you can then access the public properties and methods of the second document, as shown:</p>
<pre><code>txtName.Text = mMyDoc2.Name   
   ' Assuming there's a public property called Name.
mMyDoc.MyMethod ' Assuming a public function exists.
</code></pre>
</BODY>
</HTML>

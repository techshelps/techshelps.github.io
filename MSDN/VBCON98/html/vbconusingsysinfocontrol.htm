<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the SysInfo Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingsysinfocontrol"></a>Using the SysInfo Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingSysInfoControlC">
</object></p>
<p>
The SysInfo control can be used to detect system events such as desktop resizing, resolution changes, time changes, or to provide operating system platform and version information. You can also use it to manage changes to AC and battery power or changes in hardware configuration.</p>
<p>
In Windows 95, whenever a new device is added to the system it is automatically detected. Your applications can benefit from this ‘plug and play’ technology by using the properties and events of the SysInfo control. Applications written specifically for notebook computers, for instance, can respond when a PC card is inserted or removed from the PC card slot.</p>
<p>
The SysInfo control is invisible at run time.</p>
<p class=label>
<b>Figure 2.27&nbsp;&nbsp;&nbsp;The SysInfo control</b></p>
<p>
<img src="avtct093.gif" border=0></p>
<h2>Possible Uses</h2>
<ul type=disc>
<li>
To determine operating system platform and version<br><br></li>
<li>
To detect desktop and monitor size and resolution changes<br><br></li>
<li>
To detect and manage plug and play devices<br><br></li>
<li>
To monitor battery and power status</li>
</ul>
<h2>SysInfo Control Features</h2>
<p>
Using the SysInfo control, you can monitor information provided by the operating system as well as respond to system-generated events. The features of this control fall into one of the following groups:
<ul type=disc>
<li>
Operating system properties (OSVersion and WorkAreaHeight properties, for example).<br><br></li>
<li>
Events tied to changes in the system (DisplayChanged, TimeChanged, and SettingChanged events, for example).<br><br></li>
<li>
Plug and Play events (DeviceArrival, DeviceRemoveComplete events, for example).<br><br></li>
<li>
Power status events and properties (PowerSuspend and PowerResume events and ACStatus and BatteryStatus properties, for example).</li>
</ul>
<p>
The following sections describe the uses of these events and properties in the contexts described above.</p>
<h2>Operating System Properties and Events</h2>
<p>
The operating system properties and events of the SysInfo control can be used to detect the current operating system and version, some global setting changes, or changes to desktop size and resolution.</p>
<h3>Operating System Platform and Version Properties</h3>
<p>
The following table lists the properties which can be used to determine the current operating system platform and version:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Category</b></td>
<td class=label width=25%><b>Item</b></td>
<td class=label width=57%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=18%>Properties</td>
<td width=25%>OSPlatform</td>
<td width=57%>Returns a value that identifies the operating system under which the application is currently running.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=25%>OSVersion</td>
<td width=57%>Returns a value that identifies the version of the operating system under which the application is currently running.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=25%>OSBuild</td>
<td width=57%>Returns a value that provides the build number of the operating system under which the application is currently running.</td>
</tr>
</table><br>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"SysInfo Scenario 1: Detect the Current Operating System and Version" provides examples of how these properties are used.</p>
<h3>Desktop Size and Screen Resolution Properties and Events</h3>
<p>
The following table lists the operating system properties and events that specifically apply to managing desktop and screen resolution changes:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Category</b></td>
<td class=label width=34%><b>Item</b></td>
<td class=label width=48%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=18%>Properties</td>
<td width=34%>ScrollBarSize</td>
<td width=48%>Returns the system metric for the width of a scroll bar in twips.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=34%>WorkAreaHeight</td>
<td width=48%>Returns the height of the visible desktop adjusted for the Windows 95 and Windows NT 4.0 taskbar.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=34%>WorkAreaLeft</td>
<td width=48%>Returns the coordinate for the left edge of the visible desktop adjusted for the Windows 95 and Windows NT 4.0 taskbar.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=34%>WorkAreaTop</td>
<td width=48%>Returns the coordinate for the top edge of the visible desktop adjusted for the Windows 95 and Windows NT 4.0 taskbar.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=34%>WorkAreaWidth</td>
<td width=48%>Returns the width of the visible desktop adjusted for the Windows 95 and Windows NT 4.0 taskbar.</td>
</tr>
<tr valign=top>
<td width=18%>Events</td>
<td width=34%>DisplayChanged</td>
<td width=48%>Occurs when system screen resolution changes.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=34%>SysColorsChanged</td>
<td width=48%>Occurs when a system color setting changes, either by an application or through the Control Panel.</td>
</tr>
</table><br>
<p>
The DisplayChanged event is triggered when the user changes the screen resolution. Using the WorkAreaHeight, WorkAreaWidth, WorkAreaRight, and WorkAreaLeft properties with the DisplayChanged event you can determine the current system metrics (the usable screen area) and adjust accordingly. If the taskbar is visible in Windows 95 or Windows NT 4.0, it will be excluded from the calculation of usable screen area.</p>
<p>
If the user changes the scroll bar size using the Display settings in the Windows 95 or Windows NT 4.0 Control Panel, is it possible that the display area will need to be updated so that the new scroll bars will be positioned correctly. You can use the ScrollBarSize property with the DisplayChanged event to adjust to this change.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The section "SysInfo Scenario 2: Adjust to Changes in Screen Size and Resolution" provides examples of how these properties and events are used.</p>
<h2>Managing Hardware Configuration and Plug and Play Events</h2>
<p>
If the operating system supports this feature, the plug and play events provide you with a way to manage changes in a system’s hardware configuration. For instance, if the hardware profile has changed, if the system is docked or undocked, or if a PC card has been added to or removed from a PC slot.</p>
<p>
The following table lists the SysInfo control events that specifically apply to managing hardware configuration and Plug and Play devices.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=41%><b>Events</b></td>
<td class=label width=59%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=41%>ConfigChanged</td>
<td width=59%>Occurs when the hardware profile on the system has changed.</td>
</tr>
<tr valign=top>
<td width=41%>ConfigChangeCancelled</td>
<td width=59%>Occurs when the operating system sends a message that a change to the hardware profile was cancelled.</td>
</tr>
<tr valign=top>
<td width=41%>DeviceArrival</td>
<td width=59%>Occurs when a new device is added to the system.</td>
</tr>
<tr valign=top>
<td width=41%>DeviceEventOther</td>
<td width=59%>A notification event that does not map onto the general events.</td>
</tr>
<tr valign=top>
<td width=41%>DevModeChange</td>
<td width=59%>Occurs when the user changes device mode settings.</td>
</tr>
<tr valign=top>
<td width=41%>DeviceQueryRemove</td>
<td width=59%>Occurs just before a device is removed from the system.</td>
</tr>
<tr valign=top>
<td width=41%>DeviceQueryRemoveFailed</td>
<td width=59%>Occurs if code in the DeviceQueryRemove event cancelled the removal of a device.</td>
</tr>
<tr valign=top>
<td width=41%>DeviceRemoveComplete</td>
<td width=59%>Occurs after a device is removed.</td>
</tr>
<tr valign=top>
<td width=41%>DeviceRemovePending</td>
<td width=59%>Occurs after all applications have given approval to remove a device and the device is about to be removed.</td>
</tr>
<tr valign=top>
<td width=41%>QueryChangeConfig</td>
<td width=59%>Occurs on a request to change the current hardware profile.</td>
</tr>
</table><br>
<p>
The ConfigChanged event notifies you when the hardware profile in Windows 95 has changed. Notebook computers often have separate hardware profiles for their docked and undocked configurations. When docked, the notebook may include a network connection, an external monitor, or access to a compact disc drive, for example.</p>
<p>
The device-specific events of the SysInfo control give you feedback on changes to devices within a hardware configuration. You can write your application to dynamically make use of hardware when it’s added to the system.</p>
<h2>Using Power Status Properties and Events</h2>
<p>
The power status events and properties can be used to monitor AC and battery power states on a desktop or notebook computer. Features like power suspend, power resume, and battery status are more likely to be implemented on a notebook computer, however, they have application across all types of computers.</p>
<p>
The following table lists the events and properties of the SysInfo control which pertain to battery and power states:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Category</b></td>
<td class=label width=34%><b>Item</b></td>
<td class=label width=48%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=18%>Properties</td>
<td width=34%>ACStatus</td>
<td width=48%>Returns a value that indicates whether the system is using AC or battery power.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=34%>BatteryFullTime</td>
<td width=48%>Returns a value that indicates the full charge life of the battery.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=34%>BatteryLifePercent</td>
<td width=48%>Returns the percentage of full battery power remaining.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=34%>BatteryLifeTime</td>
<td width=48%>Returns a value that indicates the remaining life of the battery.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=34%>BatteryStatus</td>
<td width=48%>Returns a value that indicates the status of the battery’s charge.</td>
</tr>
<tr valign=top>
<td width=18%>Events</td>
<td width=34%>PowerQuerySuspend</td>
<td width=48%>Occurs when system power is about to be suspended.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=34%>PowerResume</td>
<td width=48%>Occurs when the system comes out of suspend mode.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=34%>PowerStatusChanged</td>
<td width=48%>Occurs when there is a change in the power status of the system.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=34%>PowerSuspend</td>
<td width=48%>Occurs immediately before the system goes into suspend mode.</td>
</tr>
</table><br>
<p>
The power events are especially useful in providing your application with a safety net should power be suspended. The PowerSuspend event notifies your application that power is about to be suspended. You can then store the application state or any unsaved files before this occurs.</p>
<p>
The PowerStatusChanged event informs you of changes in the AC and battery power status. If battery power is running dangerously low you can still save your data.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The section "SysInfo Scenario 3: Monitor Battery Power Status" provides examples of how some of these properties and events are used to monitor and manage changes in battery and AC power.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Managing your Project Files</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmanagingyourprojectfiles"></a>Managing your Project Files</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconManagingYourProjectFiles_C">
</object></p>
<p>
When you edit an HTML template file, save your project, or debug the application, Visual Basic saves the webclass and its associated template .htm files to the directory you specify. When you debug the project, Visual Basic uses this directory as the IIS virtual directory the webclass needs to run. A <i>virtual directory</i> is a directory outside your Web server's home directory that appears to browsers as a subdirectory of the home directory. A virtual directory allows you to publish contents to the Web from directories outside the home directory structure.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;All of the project files — including the designer and any files the templates reference — should be located either in the project directory or in a subdirectory beneath it. The .htm files for the templates must be in the main project directory. </p>
<p>
You can think of your project directory for an IIS application as a "mirror" of the directory structure you will use on the Web server when you deploy the application. You should arrange the files for your project in the directory structure you plan to use. For example, if you plan to use a separate graphics directory on the Web server, you should use a similar subdirectory beneath your project directory.</p>
<h2>Relative vs. Absolute URL Paths</h2>
<p>
After you link a template file to a webclass, you must make sure that the references it contains to images and other files will work correctly when you deploy your application to the server. In most cases, you can ensure this by using relative paths in the URLs that reference these images and other files.</p>
<p>
For example, suppose you have an HTML page that references two images on your local drive, using <i>absolute URLs</i> — that is, URL paths that indicate the drive and directory in which to find an associated file. When you deploy the template file to the Web, these references are no longer valid. Instead, you should replace these absolute references with <i>relative URLs</i> — that is, URL paths that indicate the location of an item relative to the current directory, without giving a specific drive or root directory. As long as the directory structure you use on your development computer mimics the directory structure you use on the Web site, your links will resolve correctly after deployment.</p>
<p>
There are two situations in which you can safely use absolute URL paths:
<ul type=disc>
<li>
If your HTML template file references an image or other file that has a permanent home on a Web server, you do not need to replace an absolute reference to this image with a relative image. Absolute references to server locations will resolve correctly after you deploy your application.<br><br></li>
<li>
References to external sites (such as www.microsoft.com) can be referenced with absolute URL paths.</li>
</ul>
<h2>Example:&nbsp; Setting Up Directories for a Simple Webclass</h2>
<p>
Suppose you have a project called feedback.vbp. The webclass in this project uses a single template file:&nbsp; thankyou.htm. This HTML page references two image files: a corporate logo called logo.gif and a decorative picture called banner.gif. The following table shows the original locations of the files in this project:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>File</b></td>
<td class=label width=75%><b>Original Location</b></td>
</tr>
<tr valign=top>
<td width=25%>feedback.vbp</td>
<td width=75%>c:\vb98\myproject\</td>
</tr>
<tr valign=top>
<td width=25%>thankyou.htm</td>
<td width=75%>c:\front page\</td>
</tr>
<tr valign=top>
<td width=25%>logo.gif</td>
<td width=75%>c:\front page\images\</td>
</tr>
<tr valign=top>
<td width=25%>banner.gif</td>
<td width=75%>c:\front page\images\</td>
</tr>
</table><br>
<p>
After you add the template to the webclass and save the project, Visual Basic creates a copy of the HTML page and stores it in the project directory. The following table shows the changes to your directory structure after adding the template. These changes happen automatically when you add the template.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>File</b></td>
<td class=label width=75%><b>Interim Location</b></td>
</tr>
<tr valign=top>
<td width=25%>feedback.vbp</td>
<td width=75%>c:\vb98\myproject\</td>
</tr>
<tr valign=top>
<td width=25%>thankyou.htm</td>
<td width=75%>c:\vb98\myproject\</td>
</tr>
<tr valign=top>
<td width=25%>logo.gif</td>
<td width=75%>c:\front page\images\</td>
</tr>
<tr valign=top>
<td width=25%>banner.gif</td>
<td width=75%>c:\front page\images\</td>
</tr>
</table><br>
<p>
The final step is to move the .gif files into the project directory or a subdirectory beneath it. Suppose you plan to use a separate graphics directory on the Web server to contain your images. You need to use this same structure on your development computer, so you would create a graphics subdirectory under c:\vb98\myproject\ for your images, then manually copy the files to that location. The following table shows the final directory structure for your file, before deployment. You would make these changes manually by copying the files to the project directory.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>File</b></td>
<td class=label width=75%><b>Final Location</b></td>
</tr>
<tr valign=top>
<td width=25%>feedback.vbp</td>
<td width=75%>c:\vb98\myproject\</td>
</tr>
<tr valign=top>
<td width=25%>thankyou.htm</td>
<td width=75%>c:\vb98\myproject\</td>
</tr>
<tr valign=top>
<td width=25%>logo.gif</td>
<td width=75%>c:\vb98\myproject\graphics\</td>
</tr>
<tr valign=top>
<td width=25%>banner.gif</td>
<td width=75%>c:\vb98\myproject\graphics\</td>
</tr>
</table><br>
<h2>Example: Using Relative Paths</h2>
<p>
After copying the graphics files to the subdirectory as shown above, you&nbsp; must make sure that your references to these images in the .htm file and in your Visual Basic code use relative paths that accurately reflect the files' location after deployment. For example, in the .htm file any references to the logo graphic should be:</p>
<pre><code>images/logo.gif
</code></pre>
<p>
This is considered a <i>relative URL</i> because it does not provide the full server and directory path to the file. Instead, it indicates that the file can be found in a graphics subdirectory of the Web server directory from which the current page was drawn.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See the HTML reference of your choice for more information on relative and absolute paths.</p>
</BODY>
</HTML>

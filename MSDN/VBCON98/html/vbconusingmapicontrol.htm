<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the MAPI Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingmapicontrol"></a>Using the MAPI Controls</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingMAPIControlC">
</object></p>
<p>
The messaging application program interface (MAPI) controls allow you to create mail-enabled Visual Basic applications. MAPI is a set of core system components that seamlessly connect any mail-enabled or workgroup application to MAPI-compliant information services. For example, the Microsoft Exchange messaging system can be connected to most private or public e-mail systems through the use of MAPI drivers.</p>
<p>
In Visual Basic, the MAPI controls are used to interact with the underlying message subsystem. To use these controls, you must first install a MAPI-compliant e-mail system like Microsoft Exchange. The underlying messaging services are provided by the workgroup environment — the Microsoft Exchange Server running under Windows 95 or Windows NT, for instance.</p>
<p>
Using the MAPI controls involves two steps: establishing a MAPI session and then using various properties and methods to access and manage an individual Inbox. For example, create and send a message, include a file attachment, verify the recipient's address against the e-mail system's address book, etc.</p>
<p>
The MAPISession control signs on and establishes a MAPI session. It is also used to sign off from a MAPI session. The MAPIMessages control contains all the properties and methods needed to perform the messaging system functions described above.</p>
<p>
The MAPI controls are invisible at run time. In addition, there are no events for the controls. To use them you must set the appropriate properties or specify the appropriate methods.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you attempt to run a program that uses the MAPI controls, make sure that you have the 32-bit MAPI DLLs installed properly or you may not be able to perform MAPI functions such as SignOn. For example, on Windows 95, you must install Exchange during the operating system setup, or install it separately from the control panel to correctly use MAPI functions.</p>
<h2>Possible Uses</h2>
<ul type=disc>
<li>
To add messaging functionality to your application.<br><br></li>
<li>
To create a full-featured electronic mail application.</li>
</ul>
<h2>Using the MAPISession control</h2>
<p>
The MAPISession control is used to sign in and out of a MAPI session. Assuming that MAPI services are present, logging in with the MAPISession control is merely a matter of providing a registered user name and password. The MAPISession control will determine the electronic mail settings specified in the operating system and invoke the underlying message subsystem (the mail server).</p>
<p class=label>
<b>The MAPISession control</b></p>
<p>
<img src="avtct103.gif" border=0></p>
<h3>Setting MAPISession Properties</h3>
<p>
You can set the MAPISession properties at design time using the MAPISession Property Pages. Right-click the MAPISession control and click<b> Properties</b> to display the <b>Property Pages</b> dialog box.</p>
<p class=label>
<b>Setting the MAPISession properties at design time</b></p>
<p>
<img src="avtct104.gif" border=0></p>
<p>
The UserName and Password properties are used to provide a valid sign-on to the underlying messaging system. You can either set these properties at design time or prompt the user at run time. Setting the LogonUI property to True will provide the user with the sign-on dialog box of the underlying mail system. If such a dialog box does not exist, this property will be ignored. You can create a custom dialog box to prompt the user for this information.</p>
<p>
The NewSession property specifies whether a new mail session should be established. If a valid session is already established, setting the NewSession property will allow two sessions to run concurrently.</p>
<p>
The DownloadMail property specifies whether the user's mail will be downloaded at the beginning of the current session automatically. Setting this value to True will download all the user's mail to their Inbox. Depending upon the mail system and the amount of incoming mail, this can be a processing-intensive operation. By setting this property to False, the user can choose to download mail at a later time or set the interval at which mail is automatically downloaded.</p>
<h3>The SignOn and SignOff Methods</h3>
<p>
Once the UserName and Password properties have been set, use the SignOn method at run time to begin the MAPI session.</p>
<p>
For example:</p>
<pre><code>mpsSession.SignOn
</code></pre>
<p>
When the session is established, the session handle is stored in the SessionID property. Depending upon the value of the NewSession property, the session handle may refer to a newly created session or an existing session.</p>
<p>
To end the session use the SignOff method.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Action property can also be used to sign in and out of a MAPI session. It is recommended, however, that you use the SignOn and SignOff methods instead. The Action property is included for compatibility with earlier versions of Visual Basic.</p>
<h3>The SessionID Property</h3>
<p>
When the SignOn method is used to successfully establish a messaging session, the SessionID property will return a unique messaging session handle. The SessionID value will be used by the MAPIMessages control to create an association with a valid messaging session. By default, this value is 0.</p>
<h2>Using the MAPIMessages Control</h2>
<p>
Once you've logged into a messaging session using the MAPISession control, you use the MAPIMessages control to receive, send, or read messages from the Inbox which was specified at sign-on time.</p>
<p>
The MAPIMessages control provides you with properties and methods to perform basic electronic mail tasks. For example, composing a message, addressing it to a recipient, verifying that the recipient's address is valid, or attaching a file.</p>
<p class=label>
<b>The MAPIMessages control</b></p>
<p>
<img src="avtct105.gif" border=0></p>
<p>
In most cases, the MAPIMessage control is used to provide e-mail capabilities to certain functions within an application. For example, you may want to send a notification message to a workgroup alias after your application has automatically created a report. In other words, you can add e-mail capabilities to your application, without creating full-fledged e-mail applications.</p>
<p>
You can, however, use the MAPI controls to create very powerful mail-enabled and workgroup applications.</p>
<h3>Sample Application: VBMail.vbp</h3>
<p>
The examples in the following sections demonstrate the basic use of MAPI in Visual Basic. For more detailed use of the properties and methods of the MAPI controls refer to the VBMail.vbp sample application, which is listed in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can also use the OLE Messaging technology to add MAPI functionality to your application. Information on OLE Messaging can be found in the<i> </i>Microsoft Exchange Software Development Kit.</p>
<h3>Associating SessionID Properties</h3>
<p>
The SessionID property of the MAPIMessages control contains the messaging session handle returned by the SessionID property of the MAPISession control. To associate the MAPIMessages control with a valid messaging session, set this property to the SessionID of a MAPISession control that was successfully signed on. For example:</p>
<pre><code>mpmMessage.SessionID = mpsSession.SessionID
</code></pre>
<p>
This association to a valid MAPI session must be made before you can access messages and begin working with the MAPIMessages control.</p>
<h3>Accessing Messages</h3>
<p>
Successfully logging into a MAPI session accesses the Inbox of the registered user specified by the UserName and Password properties of the MAPISession control. The Inbox is the message store. When the Inbox is opened two buffers are created: the <i>compose buffer</i> and the <i>read buffer</i>.</p>
<p>
The read buffer is made up of an indexed set of messages fetched from the user's Inbox. The MsgIndex property is used to access individual messages within this set, starting with a value of 0 for the first message and incrementing by one for each message through the end of the set.</p>
<p>
The message set is built using the Fetch method. The set includes all messages of type FetchMsgType and is sorted as specified by the FetchSorted property. The value of the FetchMsgType property is controlled by the underlying message system. The FetchSorted property can be set to add messages to the message set (read buffer) in the order they are received or in the order specified by the user's Inbox. Previously read messages can be included or left out of the message set with the FetchUnreadOnly property.</p>
<p>
Messages in the read buffer can't be altered by the user, but can be copied to the <i>compose</i> buffer for alteration.</p>
<p>
Messages are created or edited in the compose buffer. The compose buffer is active when the MsgIndex property is set to –1. Many of the messaging actions are valid only within the compose buffer, such as sending messages, saving messages, or deleting recipients and attachments.</p>
<h3>Composing and Managing Messages</h3>
<p>
Managing messages is the primary function of the MAPIMessages control. Composing, sending, receiving, and deleting messages are performed by using methods that correspond to these basic functions (compose, copy, delete, etc.). The following table lists the MAPIMessages methods that specifically apply to messages:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Method</b></td>
<td class=label width=77%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=23%>Compose</td>
<td width=77%>Composes a new message</td>
</tr>
<tr valign=top>
<td width=23%>Copy</td>
<td width=77%>Copies the currently indexed message to the compose buffer</td>
</tr>
<tr valign=top>
<td width=23%>Delete</td>
<td width=77%>Deletes a message, recipient, or attachment</td>
</tr>
<tr valign=top>
<td width=23%>Fetch</td>
<td width=77%>Creates a message set from selected messages in the Inbox</td>
</tr>
<tr valign=top>
<td width=23%>Forward</td>
<td width=77%>Forwards a message</td>
</tr>
<tr valign=top>
<td width=23%>Reply</td>
<td width=77%>Replies to a message</td>
</tr>
<tr valign=top>
<td width=23%>ReplyAll</td>
<td width=77%>Replies to all message recipients</td>
</tr>
<tr valign=top>
<td width=23%>Save</td>
<td width=77%>Saves the message currently in the compose buffer</td>
</tr>
<tr valign=top>
<td width=23%>Send</td>
<td width=77%>Sends a message</td>
</tr>
</table><br>
<p>
To perform an action on an individual message, it must first be selected using the MsgIndex property. The message identified by the MsgIndex property is called the <i>currently indexed </i>message.</p>
<p>
None of the other message properties can be set until a message is selected with the MsgIndex property. The index number can range from –1 to MsgCount –1 (the MsgCount property returns the total number of messages in the message set.) When a new message is created, the value of the MsgIndex property is set to –1.</p>
<h3>Composing a Message</h3>
<p>
Use the Compose method to create a new message. When the Compose method is used, the compose buffer is cleared and the MsgIndex property is set to –1.</p>
<pre><code>'Compose new message
mpmMessage.Compose
</code></pre>
<p>
Completing a message involves several steps: determining the recipient of the message, choosing a subject title, and writing the message.</p>
<h4>Addressing the Message</h4>
<p>
To set the recipient's name and address, use the RecipDisplayName and the RecipAddress properties. The RecipDisplayName is the proper name of the recipient, for example, "Richard Tull". The RecipAddress property contains the recipient's e-mail address: "richtull", for example.</p>
<pre><code>'Address message
mpmMessage.RecipDisplayName = "Richard Tull"
mpmMessage.RecipAddress = "richtull"
</code></pre>
<p>
Addresses for recipients outside the local workgroup (a message sent to someone at another company via the Internet, for example) require a complete Internet e-mail address: "richtull@littlemag.com".</p>
<h4>Verifying the Recipient's Name</h4>
<p>
The recipient's name is verified when the message is sent by checking it against the list of registered users in the e-mail system, using the ResolveName method. Name verification for recipients outside the local workgroup is handled in various ways by the underlying message system.</p>
<p>
The following example resolves the recipient's valid e-mail name by invoking the ResolveName method and setting the AddressResolveUI property to True.</p>
<pre><code>' Resolve recipient name
mpmMessage.AddressResolveUI = True
mpmMessage.ResolveName
</code></pre>
<p>
The AddressResolveUI property can be set to either display a details dialog box (True) or generate an error (False) when an ambiguous or invalid recipient address is encountered when the message is sent. The details dialog box will offer you an alternative address if a close match is found.</p>
<h4>The Message Subject and Text</h4>
<p>
The MsgSubject property specifies the subject line for the message. You may enter up to 64 characters, including the Null character.</p>
<p>
The body of the message is contained in the MsgNoteText property. For inbound messages, each paragraph is terminated with a carriage return-line feed pair (vbCrLf). Outbound messages can be delimited with a carriage return (vbCr), line feed (vbLf), or a carriage return-line feed pair.</p>
<pre><code>'Create the message
mpmMessage.MsgSubject = "Status Report"
mpmMessage.MsgNoteText = "Build successful!"
</code></pre>
<h3>Sending the Message</h3>
<p>
To send the message, use the Send Method. The Send method allows you to send a message with or without user interaction. Setting the value to True will display the compose message dialog box of the underlying e-mail system (Microsoft Exchange, for example). Setting it to False will send the message without displaying the compose message dialog. The following example sends the message without prompting for user interaction:</p>
<pre><code>'Send the message
mpmMessage.Send False
</code></pre>
<h3>Handling File Attachments</h3>
<p>
You can add file attachments to outgoing messages using the file attachment properties. These properties are listed in the following table:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>Property</b></td>
<td class=label width=65%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=35%>AttachmentCount</td>
<td width=65%>Returns the total number of attachments associated with the currently indexed message.</td>
</tr>
<tr valign=top>
<td width=35%>AttachmentIndex</td>
<td width=65%>Sets the currently indexed attachment.</td>
</tr>
<tr valign=top>
<td width=35%>AttachmentName</td>
<td width=65%>Specifies the name of the currently indexed attachment file.</td>
</tr>
<tr valign=top>
<td width=35%>AttachmentPathName</td>
<td width=65%>Specifies the full path name of the currently indexed attachment.</td>
</tr>
<tr valign=top>
<td width=35%>AttachmentPosition</td>
<td width=65%>Specifies the position of the currently indexed attachment within the message body.</td>
</tr>
<tr valign=top>
<td width=35%>AttachmentType</td>
<td width=65%>Specifies the type of the currently indexed file attachment.</td>
</tr>
</table><br>
<p>
To add an attachment to an outgoing message, use the AttachmentPathName property to specify the name and path of the file. For example:</p>
<pre><code>'Add attachment
mpmMessage.AttachmentPathName = "c:\Status _ 
Report.doc"
</code></pre>
<p>
If the path name is incorrect or empty, an error will be generated.</p>
<p>
Simply specifying the AttachmentPathName property will send the attachment with the message, use the name of the file to display in the message body, and position the attachment at the beginning of the message.</p>
<p>
The AttachmentName property can be used to specify a different name for the attached file. If this property isn't set, the actual name of the file will be displayed in the message body.</p>
<p>
The AttachmentPosition property is used to position the attachment within the message body. By default, the value is "0" and the attachment is located at the beginning of the message body. To position the attachment at the end of the message, count the number of characters in the message body. For example, in a message body that is five characters long, you could place an attachment at the end of the message by setting the value to 4. (The message body occupies character positions 0 to 4).</p>
<p>
Two attachments can't be placed in the same position within the same message. You also can't place an attachment equal to or beyond the end of the message body. You can append an extra space or a vbCrLf character to the end of the message body and then set the AttachmentPosition property to one character less than the length of the MsgNoteText property.</p>
<h3>Managing Messages</h3>
<p>
Many of the remaining properties and methods of the MAPIMessages control can be used to manage messages just as you would in a full-featured e-mail application.</p>
<p>
By accessing messages in the read buffer you can sort, delete, or forward one or a number of messages. The following table lists the properties you can use to manage messages:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Property</b></td>
<td class=label width=66%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=34%>MsgConversationID</td>
<td width=66%>Specifies the conversation thread identification value for the currently indexed message.</td>
</tr>
<tr valign=top>
<td width=34%>MsgCount</td>
<td width=66%>Returns the total number of messages present in the message set during the current messaging session.</td>
</tr>
<tr valign=top>
<td width=34%>MsgDateReceived</td>
<td width=66%>Returns the date on which the currently indexed message was received.</td>
</tr>
<tr valign=top>
<td width=34%>MsgID</td>
<td width=66%>Returns the string identifier of the currently indexed message.</td>
</tr>
<tr valign=top>
<td width=34%>MsgIndex</td>
<td width=66%>Specifies the index number of the currently indexed message.</td>
</tr>
<tr valign=top>
<td width=34%>MsgOrigAddress</td>
<td width=66%>Returns the mail address of the originator of the currently indexed message.</td>
</tr>
<tr valign=top>
<td width=34%>MsgOrigDisplayName</td>
<td width=66%>Returns the originator's name for the currently indexed message.</td>
</tr>
<tr valign=top>
<td width=34%>MsgRead</td>
<td width=66%>Returns a Boolean expression indicating whether the message has already been read.</td>
</tr>
<tr valign=top>
<td width=34%>MsgReceiptRequested</td>
<td width=66%>Specifies whether a return receipt is requested for the currently indexed message.</td>
</tr>
<tr valign=top>
<td width=34%>MsgSent</td>
<td width=66%>Specifies whether the currently indexed message has already been sent to the mail server for distribution.</td>
</tr>
<tr valign=top>
<td width=34%>MsgType</td>
<td width=66%>Specifies the type of the currently indexed message.</td>
</tr>
</table><br>
<h3>Working with the Address Book</h3>
<p>
The e-mail system's address book contains all of the addressing information for each registered user in the e-mail system. The address book is a dialog box which allows the user to look up or verify recipient addresses. The address book properties allow you to set or modify elements of the address book.</p>
<h3>The Show Method</h3>
<p>
The e-mail system's address book is displayed using the Show method. The Show method can be set to show either the address book or the recipient details dialog box.</p>
<p>
By default, the value is set to False and the address book dialog box is displayed when the Show method is used.</p>
<p>
To display the details dialog box, set the value to True. The amount of information displayed in this dialog box depends upon the e-mail system. At minimum, the name and address of the recipient are displayed.</p>
<h4>Address Book Properties</h4>
<p>
The address book properties allow you to set or modify elements of the e-mail system's address book. The following table lists these properties:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Property</b></td>
<td class=label width=66%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=34%>AddressCaption</td>
<td width=66%>Specifies the caption appearing at the top of the address book.</td>
</tr>
<tr valign=top>
<td width=34%>AddressEditFieldCount</td>
<td width=66%>Specifies which edit controls to display to the user in the address book.</td>
</tr>
<tr valign=top>
<td width=34%>AddressLabel</td>
<td width=66%>Specifies the appearance of the "To" edit control in the address book.</td>
</tr>
<tr valign=top>
<td width=34%>AddressModifiable</td>
<td width=66%>Specifies whether the address book can be modified by the user.</td>
</tr>
<tr valign=top>
<td width=34%>AddressResolveUI</td>
<td width=66%>Specifies whether a dialog box is displayed for receipt name resolution during addressing.</td>
</tr>
</table><br>
<p>
All of the address book properties can be set at design time using the MAPIMessages control's Property Pages dialog box.</p>
<p class=label>
<b>Setting the MAPIMessages properties at design time</b></p>
<p>
<img src="avtct106.gif" border=0></p>
<p>
Setting the address book properties at design time allows you to specify options for the display and functionality of the address book dialog box. For example, you can modify the caption that appears in the address book dialog box using the AddressCaption property.</p>
</BODY>
</HTML>

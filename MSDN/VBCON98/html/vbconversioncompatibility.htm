<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Version Compatibility</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconversioncompatibility"></a>Version Compatibility in ActiveX Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconVersionCompatibilityC">
</object></p>
<p>
A component can be part of another application because it provides Automation interfaces that the other application can manipulate. Each public class module has a default interface that includes all the properties and methods you added to the class module, plus any secondary interfaces implemented using the Implements feature.</p>
<p>
Once your component has been used in an application — or, in the case of ActiveX controls, embedded in a document or on a Web page — you can change its interfaces only at the risk of breaking the client application.</p>
<p>
Suppose, for example, that the Spin method of your Widget object has one argument, Speed. If you distribute a new version of your component, in which you redefine the Spin method so that it also requires a Direction argument, you could cause run-time errors in existing applications.</p>
<p>
At the same time, a successful component will inevitably spark requests for enhancements. You will want to provide new objects, or add new properties and methods to existing objects. Occasionally you will even want to change the arguments of existing methods of existing objects.</p>
<p>
The following topics describe the Version Compatibility feature of Visual Basic, which is designed to allow components to be enhanced without causing existing applications to fail.
<ul type=disc>
<li>
<a href="vbconeverythingyouneedtoknowaboutversioncompatibility.htm">When Should I Use Version Compatibility?</a>&nbsp;&nbsp;&nbsp;Describes the Version Compatibility options and when to use them. Describes an alternative technique for enhancing software components.<br><br></li>
<li>
<a href="vbcontypelibraryversions.htm">Maintaining Binary Compatibility</a>&nbsp;&nbsp;&nbsp;Describes the versioning system Visual Basic uses to prevent compatibility problems.<br><br></li>
<li>
<a href="vbconlevelsofversioncompatibility.htm">Levels of Binary Version Compatibility</a>&nbsp;&nbsp;&nbsp;Describes the degrees of binary compatibility Visual Basic measures.<br><br></li>
<li>
<a href="vbconprovidingreferencepointforcompatibility.htm">Providing a Reference Point for Binary Version Compatibility</a>&nbsp;&nbsp;&nbsp;Describes when and how to specify a version of your component as a reference point for version compatibility.<br><br></li>
<li>
<a href="vbconusingversioncompatibility.htm">Using Binary Version Compatibility</a>&nbsp;&nbsp;&nbsp;Describes when and how to use the feature, problems you may encounter, and messages you may get from Visual Basic.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Polymorphism, Interfaces, Type Libraries, and GUIDs" in "General Principles of Component Design" for background information and concepts.</p>
</BODY>
</HTML>

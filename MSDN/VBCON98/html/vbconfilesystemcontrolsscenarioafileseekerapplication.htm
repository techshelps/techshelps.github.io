<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>File-System Controls Scenario: A File Seeker Application</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconfilesystemcontrolsscenarioafileseekerapplication"></a>File-System Controls Scenario: A File Seeker Application</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconFileSystemControlsScenarioAFileSeekerApplicationC">
</object></p>
<p>
Because users often want to find a file or group of files available to an application quickly, many applications provide capabilities for investigating the file system. The Winseek.vbp sample application helps the user browse drives and directories, and displays any category of files.</p>
<p class=label>
<b>Figure 7.19&nbsp;&nbsp;&nbsp;File-system controls in the WinSeek application</b></p>
<p>
<img src="avp07037.gif" border=0></p>
<p>
The following table summarizes the controls in Seek.frm from the WinSeek application.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Control</b></td>
<td class=label width=34%><b>Property</b></td>
<td class=label width=35%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=31%>Drive list box</td>
<td width=34%>Name</td>
<td width=35%>drvList</td>
</tr>
<tr valign=top>
<td width=31%>Directory list box</td>
<td width=34%>Name</td>
<td width=35%>dirList</td>
</tr>
<tr valign=top>
<td width=31%>File list box</td>
<td width=34%>Name <br>
Pattern </td>
<td width=35%>filList<br>
*.*</td>
</tr>
<tr valign=top>
<td width=31%>First command button</td>
<td width=34%>Name<br>
Caption<br>
Default</td>
<td width=35%>cmdSearch<br>
&amp;Search<br>
True</td>
</tr>
<tr valign=top>
<td width=31%>Second command button</td>
<td width=34%>Name <br>
Caption</td>
<td width=35%>cmdExit<br>
E&amp;xit</td>
</tr>
<tr valign=top>
<td width=31%>List box</td>
<td width=34%>Name</td>
<td width=35%>lstFoundFiles</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The file-system controls do not have caption properties, although you can label them and give them access keys. For more information on using labels this way, see "Using the Label Control" later in this chapter.</p>
<h2>Writing Code for the WinSeek Application</h2>
<p>
In the drive list box, a Change event is triggered by a single mouse click on an item. A Change event also occurs when the user selects an item and then changes the focus on the form. In the directory list box, a DblClick event is necessary to generate a Change event.</p>
<p>
When users want to change directories without using a mouse, they typically use the arrow keys to select the desired directory and then press the ENTER key.</p>
<p>
Because ENTER is commonly associated with the default command button control, WinSeek must recognize when the user simply wants to change directories rather than conduct a search for files.</p>
<p>
The WinSeek application resolves this ambiguity by determining if the path of the dirList box differs from the currently highlighted directory. This situation can occur when the user single-clicks an item in the directory list box or navigates the directory list box using the arrow keys. The following code determines whether the <code>dirList.Path</code> is different from the path of the highlighted directory. If the paths are different, the <code>dirList.Path</code> is updated. If the paths are the same, the search is performed.</p>
<pre><code>Private Sub cmdSearch_Click()
   .
   .
   .
' If the dirList.Path is different from the currently 
' selected directory, update it; otherwise perform the 
' search.
If dirList.Path &lt;&gt; dirList.List(dirList.ListIndex) Then
   dirList.Path = dirList.List(dirList.ListIndex)
   Exit Sub
End If
' Continue with search.
   .
   .
   .
End Sub
</code></pre>
<p>
The WinSeek application uses the following procedures to handle significant events:
<ul type=disc>
<li>
The drvList_Change procedure<br><br></li>
<li>
The dirList_Change procedure<br><br></li>
<li>
The cmdSearch_Click procedure</li>
</ul>
<h2>The Drive List Box's Change Event</h2>
<p>
When the user clicks an item in the drive list box, its Change event is generated. The drvList_Change event procedure is invoked, and the following code is run:</p>
<pre><code>Private Sub drvList_Change ()
   On Error GoTo DriveHandler
   ' If new drive was selected, the Dir1 box 
   ' updates its display.
   dirList.Path = drvList.Drive
   Exit Sub   
' If there is an error, reset drvList.Drive with the
' drive from dirList.Path.
DriveHandler:
   drvList.Drive = dirList.Path
   Exit Sub   
End Sub
</code></pre>
<p>
Notice that the Change event in a drive list box occurs when a new drive is selected, either with a single mouse click or when the user moves the selection (for example, with an arrow key). The error handler is triggered by actions such as attempting to access a floppy disk drive while the drive door is open or selecting a network drive that has been inadvertently disconnected. Because the error prevents the original assignment, <code>dirList.Path</code> still contains the previous valid drive. Reassigning <code>dirList.Path</code> to <code>drvList.Drive</code> corrects this error.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Debugging Your Code and Handling Errors" for more information. </p>
<h2>The Directory List Box's Change Event</h2>
<p>
If the user double-clicks an item in the directory list box, or if the Path property of dirList is changed in code (as in the drvList_Change procedure), the dirList_Change event is initiated. The following code responds to that event:</p>
<pre><code>Private Sub dirList_Change ()
   ' Update file list box to synchronize with the 
   ' directory list box.
   filList.Path = dirList.Path
End Sub
</code></pre>
<p>
This event procedure assigns the Path property of the dirList box to the Path property of the filList box. This causes a PathChange event in the filList list box, which is redrawn; you don't need to add code to the filList_PathChange procedure, because in this application, the event chain ends in the filList list box.</p>
<h2>The Command Button's Click Event</h2>
<p>
This event procedure determines whether the highlighted item in the dirList list box is the same as the <code>dirList.Path</code>. If the items are different, then <code>dirList.Path</code> is updated. If the items are the same, then the search is performed.</p>
<pre><code>Private Sub cmdSearch_Click ()
   .
   .
   .
   ' If the dirList.Path is different from the 
   ' currently selected directory, update it; 
   ' otherwise perform the search.
   If dirList.Path &lt;&gt; dirList.List _
   (dirList.ListIndex) Then
      dirList.Path = dirList.List(dirList.ListIndex)
      Exit Sub
   End If
   ' Continue with search.
   .
   .
   .
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can enhance the WinSeek application with additional features. For example, you might want to use a file control's attribute properties. You could use check boxes to allow the user to set different combinations of file attributes so that the file list box displays files that are Hidden, System, and so on. This would restrict a search to conforming files.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Test Project for an In-Process Component</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingtestprojectforinprocesscomponent"></a>Creating a Test Project for an In-Process Component</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingTestProjectForInProcessComponentC">
</object></p>
<p>
This topic describes explains how to set up test projects to exercise most of the objects in-process components can provide. ActiveX documents, however, cannot be tested as described here. See "Building ActiveX Documents."</p>
<p class=label>
<b>To create a test project for an in-process component</b>
<ol>
<li>
The test project is loaded in the same copy of the development environment where your component project is loaded. On the <b>File</b> menu, click <b>Add Project</b> to open the <b>Add Project</b> dialog box, click the <b>Standard Exe</b> icon to select it, then click <b>OK</b> to add a Standard Exe project to the project group.<p class=tl>
The caption of the <b>Project</b> window changes to <b>Project Group</b>, with a default name, to indicate that multiple projects are loaded.</P><p class=tl>
As described in "How to Test ActiveX Components," use an ActiveX Exe project as your test project if your component implements call-backs.</P></li>
<li>
On the <b>File</b> menu, click <b>Save Project Group</b> to save the group containing the component and test project. From now on, you can open both projects simply by opening the project group.<br><br></li>
<li>
(ActiveX control components skip this step.) Make sure the test project is active — that is, that one of its files is highlighted in the <b>Project</b> window. On the <b>Project</b> menu, click <b>References</b> to open the <b>References</b> dialog box. Locate your component in the list, and check it.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When setting up a test program for ActiveX control projects, don’t set a reference. A control project automatically adds itself to the <b>Components</b> dialog box the first time you place a control on a test project form. For additional information, see "Debugging Controls" in "Building ActiveX Controls."</p><p class=tl>
If your component still does not appear in the <b>References</b> dialog box of your test project, make sure at least one class module in the component has its Instancing property set to a value <i>other than</i> Private and PublicNotCreatable.</P></li>
<li>
In the <b>Project</b> window, right-click the test project, and click <b>Set As Start Up</b> on the context menu to make the test project the one that runs when you press F5.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Because ActiveX control projects cannot be startup projects, a test project added to an ActiveX control project will automatically assume the startup role. If the test project entry in the <b>Project</b> window is in bold-face type, the test project is already the startup project.</p></li>
<li>
Add code to test the properties and methods of each public class provided by your component.</li>
</ol>
<p>
With the test project selected in the Project window, you can use the Object Browser to verify that the public classes, methods, and properties of your component are available. You can also use the Object Browser to examine and add description strings, and to verify that Help topics are correctly linked.</p>
<p>
The view you get in the Object Browser differs depending on which project is currently active — that is, which one is selected in the Project window. When your component project is active, the Object Browser will show both public members and Friend functions. When the test project is active, only the public members are visible.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Friend functions are discussed in "Private Communications Between Your Objects" in "General Principles of Component Design." Special considerations for debugging ActiveX control projects, including running code at design time, are covered in "Debugging Controls" in "Building ActiveX Controls." ActiveX Documents cannot be debugged without a browser or other active document container. See "Building ActiveX Documents."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Interfaces for Use With the Implements Statement</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatinginterfacesforusewithimplementsstatement"></a>Creating Interfaces for Use With the Implements Statement</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingInterfacesForUseWithImplementsStatement_C">
</object></p>
<p>
When you create interfaces for use with the Implements statement, you can use Visual Basic or any tool that creates type libraries, such as the MkTypLib utility or the Microsoft Interface Definition Language (MIDL) compiler.</p>
<p>
Most classes created in Visual Basic define interfaces that work with Implements. When you create an interface by defining a class in Visual Basic, simply make sure that none of the properties or methods have underscores in their names.</p>
<p>
Interfaces created with tools other than Visual Basic must follow certain restrictions in order to work with Implements. The following list includes most of these restrictions.
<ul type=disc>
<li>
Interface methods cannot have underscores in their names.<br><br></li>
<li>
Only [in] and [in,out] params are allowed; neither [out] only params nor [lcid] arguments are allowed.<br><br></li>
<li>
Method return types must be HRESULT, in order for errors to be propagated. You will not see the HRESULT in Visual Basic, as it is translated into an exception (raised error). To create a method that will have a return type when used in Visual Basic code, you must use [out, retval] on the final parameter.<br><br></li>
<li>
Only Automation data types may be used:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>VB Data Type</b></td>
<td class=label width=50%><b>MIDL Equivalent</b></td>
</tr>
<tr valign=top>
<td width=50%>Integer</td>
<td width=50%>short</td>
</tr>
<tr valign=top>
<td width=50%>Long</td>
<td width=50%>long</td>
</tr>
<tr valign=top>
<td width=50%>Single</td>
<td width=50%>float</td>
</tr>
<tr valign=top>
<td width=50%>Double</td>
<td width=50%>double</td>
</tr>
<tr valign=top>
<td width=50%>Byte</td>
<td width=50%>unsigned char</td>
</tr>
<tr valign=top>
<td width=50%>Boolean</td>
<td width=50%>boolean or VARIANT_BOOL</td>
</tr>
<tr valign=top>
<td width=50%>String</td>
<td width=50%>BSTR</td>
</tr>
<tr valign=top>
<td width=50%>Variant</td>
<td width=50%>VARIANT</td>
</tr>
<tr valign=top>
<td width=50%>Date</td>
<td width=50%>DATE</td>
</tr>
<tr valign=top>
<td width=50%>Currency</td>
<td width=50%>CURRENCY or CY</td>
</tr>
<tr valign=top>
<td width=50%>Object</td>
<td width=50%>IDispatch</td>
</tr>
<tr valign=top>
<td width=50%>IUnknown</td>
<td width=50%>IUnknown</td>
</tr>
</table><br>
</li>
<li>
SAFEARRAY parameters containing any of the simple data types from the list above are allowed.<br><br></li>
<li>
Enum parameters are allowed.<br><br></li>
<li>
Dispinterface interface pointers are allowed as parameters.<br><br></li>
<li>
Dual interface pointers are allowed as parameters.<br><br></li>
<li>
CoClass parameters are allowed.</li>
</ul>
<p class=indent>
<B><b>Warning</b></B>&nbsp;&nbsp;&nbsp;If you're creating a type library in order to make a system interface usable with Implements, you must not use the [oleautomation] or [dual] attributes. Type libraries must be registered before you can add them to the Visual Basic References dialog box, and registering a type library with the [oleautomation] attribute will overwrite information required to remote the system interface. This will cause other applications on the system to fail. The [dual] attribute must not be used because it implies [oleautomation].</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;It may be useful to specify [oleautomation] while creating the typelib, in order to enforce correct types, but the type library must be built without the attribute before you reference it through the Visual Basic References dialog box.
<ul type=disc>
<li>
Unsigned long and unsigned short parameters are not included in the data type table and are not allowed.<br><br></li>
<li>
User-defined data types (structures) are not allowed as parameters.<br><br></li>
<li>
Interfaces must be based on IUnknown or IDispatch. The full vtable (after IUnknown/IDispatch) must be described in a single interface.<br><br></li>
<li>
Restricted vtable entries are ignored and do not prevent the Implements statement from working.<br><br></li>
<li>
Most pointers cannot be passed as [in] parameters. (For example, as a remoting optimization, a C++ interface can declare a parameter as [in] VARIANT* pVar. This will not work with Implements.) An [in] parameter can be a BSTR, a pointer to an interface (for example, IDispatch*), or a SAFEARRAY pointer (SAFEARRAYs are always passed as pointers). An [in,out] parameter can be a pointer to an Automation type, or a double pointer to an interface (for example, IDispatch**). (Note that 'ByVal As String' in Visual Basic maps to [in] BSTR. You cannot use [in] BSTR* with Visual Basic.)<br><br></li>
<li>
Implements does not work with dispinterfaces.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Polymorphism" in "Programming with Objects" in the <i>Programmer's Guide</i>, and also "Providing Polymorphism by Implementing Interfaces" in "General Principles of Component Design" in <i>Creating ActiveX Components </i>in the<i> Component Tools Guide</i>.</p>
</BODY>
</HTML>

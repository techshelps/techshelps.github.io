<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Coding RDO Event Handlers</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcodingrdoeventhandlers"></a>Coding RDO Event Handlers</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCodingRDOEventHandlersC">
</object></p>
<p>
RDO 2.0 exposes a wide variety of events that can make handling asynchronous operations, centralized error handling, or common routine handling far easier to implement. These event procedures are all enabled when the initial RDO object is created. Basically, when you use WithEvents with the Dim statement, the object's event handlers are exposed to your code. For example, to expose the events on an rdoConnection object, you can code the following:</p>
<pre><code>Private WithEvents MyCn As rdoConnection
</code></pre>
<p>
In design mode, the Object dropdown in the code window will include an entry for <code>MyCn</code>. Once selected, each of the rdoConnection events are exposed.</p>
<p>
While you cannot use the WithEvents operator with the Dim x As New syntax, you can use the following syntax to instantiate stand-alone RDO objects.</p>
<pre><code>Private WithEvents MyCn As rdoConnection
...
Set MyCn As New rdoConnection
</code></pre>
<p>
Note that the rdoQuery object does not expose any events — these are exposed on the parent rdoConnection instead. Each rdoConnection event handler that traps events for the rdoQuery objects is passed a pointer to the query that is causing the event. For example, the rdoConnection object's WillExecute event could be coded as follows to display the SQL about to be submitted as a query.</p>
<pre><code>Private Sub MyCn_WillExecute( _
   ByVal Query As RDO.rdoQuery, Cancel As Boolean)
Msgbox "About to exectue:" &amp; Query.SQL
End Sub
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;More detail on using the WithEvents keyword is available in "Adding Events to a Class" in "Programming with Objects" in the <i>Programmer's Guide,</i> and in the <i>Language Reference"</i>.</p>
</BODY>
</HTML>

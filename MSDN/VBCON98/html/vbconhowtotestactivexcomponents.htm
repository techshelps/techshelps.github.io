<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Test ActiveX Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconhowtotestactivexcomponents"></a>How to Test ActiveX Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconHowToTestActiveXComponentsC">
</object></p>
<p>
To test a component, you need to create a client application. Components exist to provide objects for clients, which makes it hard to test them by themselves.</p>
<p>
Your test project should invoke all the properties, methods, and events of each object provided by your component, testing both valid and invalid values of all arguments.</p>
<p>
For example, rather than simply making one call to the Spin method of the Widget object, make a series of calls that try valid and invalid values of all arguments. Pay particular attention to the highest and lowest valid values, as these <i>boundary conditions </i>are a frequent source of problems.</p>
<p>
Test for both functionality and error cases. Make sure your component behaves well in case of errors, such as unexpected input. It’s especially important to make sure you’ve covered all error conditions in event procedures of in-process components, because such errors can be fatal to client applications that use the component.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Your test project can also be used to test the compiled component, as described in "How to Test Compiled Components."</p>
<h2>Make the Test Program Generic for Better Coverage</h2>
<p>
You can improve your testing process by making the test program more generic. For example, if you create a text box for each argument of the Spin method, and a button to invoke the method, you can use an automated test tool to maintain and run comprehensive test suites. This makes it easier to test combinations of properties and methods.</p>
<h2>Testing Components as Part of an Application</h2>
<p>
If you’re creating components as part of an application, you can use the application itself as the test program. In theory, thorough testing of the application will discover any problems with its components.</p>
<p>
In practice, however, this is rarely true. An application may not exercise all the interfaces of the components it uses, even under stress testing.</p>
<p>
It’s also a lot more work to set up test cases when you have to figure out what application behavior must be tested in order to test a particular feature of the component. You’ll be better served by a comprehensive test program that directly tests each element of each object’s interface.</p>
<p>
If each component has been tested separately, testing your application with the components provides an extra level of quality assurance.</p>
<h2>Creating a Test Project</h2>
<p>
The test project must be an Exe project. Unless you’re testing call-backs, your test project can be a Standard Exe project. To test call-backs, use an ActiveX Exe project, so it can include public classes that implement the call-back methods. Call-backs are discussed in "Asynchronous Call-Backs and Events" in "Building Code Components."</p>
<p>
The way you set the test project up depends on whether you’re testing an in-process or out of process component. The reason for this is explained in "Testing and Debugging ActiveX Components."</p>
<p>
&nbsp;The following related topics provide detailed procedures:
<ul type=disc>
<li>
<a href="vbconcreatingtestprojectforinprocesscomponent.htm">Creating a Test Project for an In-Process Component</a>&nbsp;&nbsp;&nbsp;Setting references and options for testing in a multiple-project environment.<br><br></li>
<li>
<a href="vbconcreatingtestprojectforoutofprocesscomponent.htm">Creating a Test Project for an Out-of-Process Component</a>&nbsp;&nbsp;&nbsp;Starting a second instance of the development environment, and setting the necessary references and options.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;ActiveX Documents cannot be debugged without a browser or other active document container. See "Building ActiveX Documents" for details.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Testing and Debugging ActiveX Components" for a list of topics related to testing and debugging.</p>
</BODY>
</HTML>

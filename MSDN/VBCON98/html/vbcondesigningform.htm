<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Designing a Form</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondesigningform"></a>Designing a Form</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDesigningFormC">
</object></p>
<p>
Form objects are the basic building blocks of a Visual Basic application, the actual windows with which a user interacts when they run the application. Forms have their own properties, events, and methods with which you can control their appearance and behavior.</p>
<p class=label>
<b>Figure 3.2&nbsp;&nbsp;&nbsp;Forms and controls have their own properties, events, and methods</b></p>
<p>
<img src="avp03002.gif" border=0></p>
<p>
The first step in designing a form is to set its properties. You can set a form's properties at <i>design time</i> in the Properties window, or at <i>run time</i> by writing code.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You work with forms and controls, set their properties, and write code for their events at <i>design time</i>, which is any time you're building an application in the Visual Basic environment. <i>Run time</i> is any time you are actually running the application and interacting with the application as the user would.</p>
<h2>Setting Form Properties</h2>
<p>
Many of a form's properties affect its physical appearance. The Caption property determines the text that is shown in the form's title bar; the Icon property sets the icon that is displayed when a form is minimized. The MaxButton and MinButton properties determine whether the form can be maximized or minimized. By changing the BorderStyle property, you can control the resizing behavior of the form.</p>
<p>
Height and Width properties determine the initial size of a form; Left and Top properties determine the form's location in relation to the upper left-hand corner of the screen. The WindowState property can be set to start the form in a maximized, minimized, or normal state.</p>
<p>
The Name property sets the name by which you will refer to the form in code. By default, when a form is first added to a project, its name is set to Form1, Form2, and so forth. It's a good idea to set the Name property to something more meaningful, such as "frmEntry" for an order entry form.</p>
<p>
The best way to familiarize yourself with the many form properties is to experiment. Change some of the properties of a form in the Properties window (Figure 3.3), then run the application to see their effect. You can learn more about each property by selecting it and pressing F1 to view the context-sensitive Help.</p>
<p class=label>
<b>Figure 3.3&nbsp;&nbsp;&nbsp;The Properties window</b></p>
<p>
<img src="avp03003.gif" border=0></p>
<h2>Form Events and Methods</h2>
<p>
As objects, forms can perform methods and respond to events.</p>
<p>
The Resize event of a form is triggered whenever a form is resized, either by user interaction or through code. This allows you to perform actions such as moving or resizing controls on a form when its dimensions have changed.</p>
<p>
The Activate event occurs whenever a form becomes the active form; the Deactivate event occurs when another form or application becomes active. These events are convenient for initializing or finalizing the form's behavior. For example, in the Activate event you might write code to highlight the text in a particular text box; in the Deactivate event you might save changes to a file or database.</p>
<p>
To make a form visible, you would invoke the Show method:</p>
<pre><code>Form2.Show
</code></pre>
<p>
Invoking the Show method has the same effect as setting a form's Visible property to True.</p>
<p>
Many of a form's methods involve text or graphics. The Print, Line, Circle, and Refresh methods are useful for printing or drawing directly onto a form's surface. These methods and more are discussed in "Working with Text and Graphics."</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For additional information on forms, see "More About Forms" in "Creating a User Interface."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Stop Statements</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingstopstatements"></a>Using Stop Statements</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingStopStatementsC">
</object></p>
<p>
Placing a Stop statement in a procedure is an alternative to setting a breakpoint. Whenever Visual Basic encounters a Stop statement, it halts execution and switches to break mode. Although Stop statements act like breakpoints, they aren't set or cleared the same way.</p>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;Be sure to remove any Stop statements before you create an .exe file. If a stand-alone Visual Basic application (.exe) encounters a Stop statement, it treats it as an End statement and terminates execution immediately, without any QueryUnload or Unload events occurring.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;It's usually better to use the Assert method rather than a Stop statement. The Assert method halts execution only when a specified condition isn't met; unlike the Stop statement, calls to the Assert method are automatically removed when the application is compiled. For more information, see "Verifying Your Code with Assertions" later in this chapter.</p>
<p>
Remember that a Stop statement does nothing more than temporarily halt execution, while an End statement halts execution, resets variables, and returns to design time. You can always choose Continue from the Run menu to continue running the application.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Stop Statement." And see "How to Handle Errors" earlier in this chapter for an example that uses the Stop statement.</p>
</BODY>
</HTML>

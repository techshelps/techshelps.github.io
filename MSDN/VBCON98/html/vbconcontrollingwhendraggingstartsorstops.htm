<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controlling When Dragging Starts or Stops</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcontrollingwhendraggingstartsorstops"></a>Controlling When Dragging Starts or Stops</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconControllingWhenDraggingStartsOrStopsC">
</object></p>
<p>
Visual Basic has a Manual setting for the DragMode property that gives you more control than the Automatic setting. The Manual setting allows you to specify when a control can and cannot be dragged. (When DragMode is set to Automatic, you can always drag the control as long as the setting isn't changed.)</p>
<p>
For instance, you may want to enable dragging in response to MouseDown and MouseUp events, or in response to a keyboard or menu command. The Manual setting also allows you to recognize a MouseDown event before dragging starts, so that you can record the mouse position.</p>
<p>
To enable dragging from code, leave DragMode in its default setting (0-Manual). Then use the Drag method whenever you want to begin or stop dragging an object. Use the following Visual Basic constants to specify the <i>action</i> of the Drag argument.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Constant</b></td>
<td class=label width=15%><b>Value</b></td>
<td class=label width=62%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=23%>vbCancel</td>
<td width=15%>0</td>
<td width=62%>Cancel drag operation</td>
</tr>
<tr valign=top>
<td width=23%>vbBeginDrag</td>
<td width=15%>1</td>
<td width=62%>Begin drag operation</td>
</tr>
<tr valign=top>
<td width=23%>vbEndDrag</td>
<td width=15%>2</td>
<td width=62%>End drag operation</td>
</tr>
</table><br>
<p>
The syntax for the Drag method is as follows:</p>
<p>
[<i>object</i>.]<b>Drag</b> <i>action</i></p>
<p>
If <i>action</i> is set to vbBeginDrag, the Drag<b> </b>method initiates dragging of the control. If <i>action</i> is set to vbEndDrag, the control is dropped, causing a DragDrop event. If <i>action</i> is set to vbCancel, the drag is canceled. The effect is similar to giving the value vbEndDrag, except that no DragDrop event occurs.</p>
<p>
Building on the example given in "Responding When the User Drops the Object" earlier in this chapter, you can add a MouseDown event for Image1 that illustrates the Drag method. Set the Image1 DragMode property to 0-Manual, then add the following procedure:</p>
<pre><code>Private Sub Image1_MouseDown(Button As Integer, _
      Shift As Integer, X As Single, Y As Single)
   Image1.Drag vbBeginDrag
   Set Image1.DragIcon = LoadPicture("c:\Program _
      files\ Microsoft Visual _
      Basic\Icons\Dragdrop\Dragfldr.ico")
End Sub
</code></pre>
<p>
Adding a DragOver event procedure to Image2 allows you to terminate dragging when the source enters the target. This example closes the file cabinet when Image1 is passed over Image2.</p>
<pre><code>Private Sub Image2_DragOver(Source As Control, _
      X As Single, Y As Single, State As Integer)
   Source.Drag vbEndDrag
   Source.Visible = False
   Image2.Picture = LoadPicture("c:\Program _
      files\Microsoft Visual _
      Basic\Icons\Office\Files03a.ico")
End Sub
</code></pre>
<p>
Adding a third Image control to the form demonstrates canceling a drag operation. In this example the Image3 Picture property contains an icon of a trash can. Using the DragOver event and the <i>source</i> argument, dragging the files over Image3 cancels the drag operation.</p>
<pre><code>Private Sub Image3_DragOver(Source As Control, _
      X As Single, Y As Single, State As Integer)
   Source.Drag vbCancel
End Sub
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Drag-and-Drop Constants" in the <i>Language Reference</i>.</p>
</BODY>
</HTML>

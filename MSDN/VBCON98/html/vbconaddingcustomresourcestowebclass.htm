<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Custom Resources to the Webclass</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingcustomresourcestowebclass"></a>Adding Custom Webitems to the Webclass</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddCustomResourceToTreeview_C;vbconAddingCustomResourcesToWebclass_C">
</object></p>
<p>
You add custom webitems to your webclass to specify programmatic resources, rather than file-based resources, for your application. Unlike template webitems, which are linked to and manipulate HTML pages, custom webitems are containers that generally group a set of code procedures you want the webclass to be able to access from multiple places in the application.</p>
<p>
There are several ways in which custom webitems are useful:
<ul type=disc>
<li>
Custom webitems can help you produce more modular or structured code. For example, suppose you have several HTML template files in your webclass that all contain a single image, called logo.gif, that is stored in a database. Rather than writing a separate procedure to retrieve and display this image for each IMG tag event in the webclass, you can add a custom event to a custom webitem and define the image retrieval procedure there. Each webitem can then access the custom webitem's event, using the URLFor method, instead of handling the procedure itself.<br><br></li>
<li>
Custom webitems can provide a good way to encapsulate code in your IIS application that produces a frequently used HTML response, such as a standard header or a table.<br><br></li>
<li>
Custom webitems can allow you to send a response to the browser at times when a template file is not a good solution or when a template is not available. For example, if you want to dynamically generate a page in response to a search request, you could do this by using a template file and parsing replacements, or you could generate the entire page within a custom webitem's Respond event.</li>
</ul>
<p class=label>
<b>To add a custom webitem to a webclass</b>
<ol>
<li>
In the Webclass Designer window, click the <b>Add Custom WebItem</b> button on the toolbar. A webitem appears in the treeview, beneath the <b>Custom WebItems</b> folder.<br><br></li>
<li>
To rename the webitem, use the <b>Properties</b> window to specify a name.</li>
</ol>
<p class=label>
<b>To remove a custom webitem from the webclass</b>
<ul type=disc>
<li>
Right-click the webitem and click <b>Delete</b>.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Webclass Events" for more information on custom events. See "Specifying URLs for Webitems" for more information on using the URLFor method.</p>
</BODY>
</HTML>

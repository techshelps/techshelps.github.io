<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the RichTextBox Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingrichtextboxcontrol"></a>Using the RichTextBox Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingRichTextBoxControlC">
</object></p>
<p>
The RichTextBox control allows the user to enter and edit text while also providing more advanced formatting features than the conventional TextBox control.</p>
<p>
<img src="avtct047.gif" border=0></p>
<p>
The RichTextBox control provides a number of properties you can use to apply formatting to any portion of text within the control. Using these properties, you can make text bold or italic, change its color, and create superscripts and subscripts. You can also adjust paragraph formatting by setting both left and right indents, as well as hanging indents.</p>
<h2>Possible Uses</h2>
<ul type=disc>
<li>
As a "bottomless" text box, to allow an application to read extremely large text files.<br><br></li>
<li>
To implement a full-featured text editor into any application.</li>
</ul>
<h2>Features</h2>
<ul type=disc>
<li>
Open and save files in both the RTF format and ASCII text format. You can use methods of the control (LoadFile and SaveFile) to directly read and write files, or use properties of the control, such as SelRTF and TextRTF, in conjunction with Visual Basic's file input/output statements.<br><br></li>
<li>
Load the contents of an .rtf file into the RichTextBox control simply by dragging the file (from the Windows 95 Explorer for example), or a highlighted portion of a file used in another application (such as Microsoft Word), and dropping the contents directly onto the control.<br><br></li>
<li>
Set the FileName property to load the contents of an .rtf or .txt file into the control.<br><br></li>
<li>
Print all or part of the text in a RichTextBox control using the SelPrint method.<br><br></li>
<li>
Bind the RichTextBox control with a Data control to a Memo field in a Microsoft Access database or a similar large capacity text field in other databases (such as a TEXT data type field in SQL Server).<br><br></li>
<li>
Programmatically add embedded objects such as bitmaps, icons, application icons, into the control at run time using the OLEObject collection's Add method. At both design time and run time, drag and drop any embedded object, including documents such as Microsoft Excel spreadsheets and Microsoft Word documents, into the control.</li>
</ul>
<h3>Set Scrollbars at Design Time</h3>
<p>
By default, the RichTextBox doesn't include scrollbars. At run time, if a large file is loaded into the control, the end user will not be able to see all that is in the file. To allow the user to scroll easily, set the ScrollBars property to 1 (horizontal), 2 (vertical), or 3 (both). This must be done at design time, because the ScrollBars property is read-only at run time.</p>
<h3>Open and Save Files with the LoadFile and SaveFile Methods</h3>
<p>
You can easily open or save an RTF file with the RichTextBox control by using the LoadFile and SaveFile methods. To open a file, use a CommonDialog control to supply the path name as shown:</p>
<pre><code>Private Sub OpenFile()
   ' The RichTextBox control is named "rtfData."
   ' The CommonDialog is named "dlgOpenFile."
   ' Declare a String variable for file name.
   ' Show the Open File dialog box, and set the 
   ' variable to the filename.
   Dim strOpen As String
   dlgOpenFile.ShowOpen
   strOpen = dlgOpenFile.FileName
   ' Use LoadFile method to open the file.
   rtfData.LoadFile strOpen
End Sub
</code></pre>
<p>
To save a file is just as easy, using the SaveFile method:</p>
<pre><code>Private Sub SaveFile()
   Dim strNewFile As String
   dlgOpenFile.ShowSave
   strNewFile = dlgOpenFile.FileName 
   rtfData.SaveFile strNewFile
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If a file contains RTF codes that aren't supported by the control, the affected text only will not appear in the RichTextBox control.</p>
<h3>Use the SelFontName, SelFontSize, and SelFontColor to Set Font Attributes</h3>
<p>
To change the font attributes of text in the RichTextBox control, use the SelFontName, SelFontSize, and SelFontColor properties.</p>
<p>
The ComboBox control is often used to display a range of choices for these properties. Subsequently, the ComboBox control's Click event can be used to change the property. The following code first populates a ComboBox control named "cmbFonts" in the Form object's Load event. The Click event is then used to change the SelFontName property of a RichTextBox control:</p>
<pre><code>Private Sub Form_Load()
   Dim i As Integer
   With cmbFonts
      For i = 0 to Screen.Fonts.Count - 1
      .AddItem Screen.Fonts(i).Text
   End With
End Sub

Private Sub cmbFonts_Click()
   rtfData.SelFontName = cmbFonts.Text
End Sub
</code></pre>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;These properties only affect selected text, or, if no text is selected, the text that is typed after the current cursor location.</p>
<h3>Format Indents, Hanging Indents, and Bulleted Paragraphs</h3>
<p>
Another feature of the RichTextBox control is its ability to create paragraphs with indents, hanging indents, and bulleted paragraphs. The three styles are shown here:</p>
<p class=label>
<b>Indents and bulleted indents (rtf_3ind.bmp)</b></p>
<p>
<img src="avtct048.gif" border=0></p>
<p>
As with the SelFontName, SelFontSize, and SelFontColor properties, the end user must select a paragraph or range of paragraphs before applying these attributes. Thus, assuming the user had selected the second paragraph only, the code to create an indent and hanging indent would be as follows:</p>
<pre><code>' Assuming the control is named "rtfData."
rtfData.SelIndent = .5
rtfdata.SelHangingIndent = 1.5
</code></pre>
<p>
Note that the number used to set the SelIndent, SelHangingIndent, BulletIndent and other properties depends upon the ScaleMode property of the container of the RichTextBox control. For example, if the RichTextBox's container is a Form object, and you change the Form object's ScaleMode property from 7 (centimeters) to 1 (twips), the SelIndent property must change from .5 (centimeters) to 283 (twips). This is because one centimeter = 567 twips.</p>
<p>
Also note that the SelBullet property of a paragraph must be set to True for a paragraph to have the bullet style.</p>
<h3>Use the SelChange Event for Notification of Attribute Changes</h3>
<p>
To notify the user of the current attributes of any selected text, use the SelChange event, which occurs whenever the insertion point moves, or the selection has changed. The following example uses a Toolbar control to notify the user of changes in the SelBold property.</p>
<pre><code>Private Sub rtfData_SelChange()
   ' Reset the Value property of a Toolbar
   ' Button object. The Toolbar control is 
   ' named "tlbRTF."

   ' SelBold returns 0, -1, or Null. If it's Null 
   ' then set the MixedState property to True.

   Select Case rtfData.SelBold
   Case 0 ' Not bold.
      tlbRTF.Buttons("bold").Value = tbrUnpressed
   Case -1 ' Bold.
      tlbRTF.Buttons("bold").Value = tbrPressed
   Case Else ' Mixed state.
      tlbRTF.Buttons("bold").MixedState = True
   End Select
End Sub
</code></pre>
<h3>Use the SelPrint Method to Print the RichTextBox Contents</h3>
<p>
To print from the RichTextBox control, use the SelPrint method. This method requires one argument, the hDC property of the Printer object that will print the RichTextBox control's contents. If any text is selected by the user, only the selected text will be printed. If no text is selected, the entire contents of the control will be printed.</p>
<p>
The following code uses the CommonDialog control to display a Printer dialog box when the user clicks a CommandButton control. The Flags property disables page numbers, and allows the user to choose various options on the dialog box:</p>
<pre><code>Private Sub cmdPrint_Click()
   ' The CommonDialog control is named "dlgPrint."
    
   dlgPrint.Flags = cdlPDReturnDC + cdlPDNoPageNums
   If rtfData.SelLength = 0 Then
      dlgPrint.Flags = dlgPrint.Flags + cdlPDAllPages
   Else
      dlgPrint.Flags = dlgPrint.Flags + cdlPDSelection
   End If
   dlgPrint.ShowPrinter
   rtfData.SelPrint dlgPrint.hDC
End Sub
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on using the CommonDialog control, see "Using the CommonDialog Control", in the <i>Programmer's Guide.</i></p>
<h3>Display Embedded Objects in the Control</h3>
<p>
At run time, the end user can drag and drop any embedded objects into the RichTextBox control. There are two kinds of objects that can be embedded into the control: objects which display as icons, and objects which display as data. As an example of the first type, the following figure shows a RichTextBox with an embedded file object.</p>
<p>
<img src="avtct049.gif" border=0></p>
<p>
When clicked, the embedded object will behave as expected — starting up the application associated with the file. When the data in the control is saved as an RTF file (using the SaveFile method), the information in the embedded object will also be saved.</p>
<p>
However, if the end user embeds a bitmap into the control, the bitmap itself will be displayed, not its icon, as shown:</p>
<p>
<img src="avtct050.gif" border=0></p>
<p>
Clicking on the bitmap will start the Paint application, allowing the end user to edit the bitmap.</p>
<h3>Add Embedded Objects Using the OLEObjects Collection's Add Method</h3>
<p>
You can programmatically add embedded objects to the control using the OLEObject collection's Add method, as shown:</p>
<pre><code>Private Sub cmdAddObject_Click()
   ' Add the butterfly bitmap to the control.
   RichTextBox1.OLEObjects.Add , , , "bfly.bmp"
End Sub
</code></pre>
<p>
Using the Add, Clear, and Remove methods, you can dynamically populate the control with embedded objects at run time.</p>
</BODY>
</HTML>

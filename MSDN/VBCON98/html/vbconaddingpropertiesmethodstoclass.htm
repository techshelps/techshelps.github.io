<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Properties and Methods to a Class</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingpropertiesmethodstoclass"></a>Adding Properties and Methods to a Class</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingPropertiesMethodsToClassC">
</object></p>
<p>
The properties and methods of a class make up its default interface. The default interface is the most common way of manipulating an object.</p>
<p>
In general, properties represent <i>data about an object</i>, while methods represent <i>actions an object can take</i>. To put it another way, properties provide the description of an object, while methods are its behavior.</p>
<p>
The following topics describe the mechanisms for adding properties and methods to your classes, and address some of the issues you'll meet.
<ul type=disc>
<li>
<a href="vbconproperties.htm">Adding Properties to a Class</a>&nbsp;&nbsp;&nbsp;Discusses the two ways of adding properties to your classes — the easy way and the right way.<br><br></li>
<li>
<a href="vbconpropertyproceduresvspublicvariables.htm">Property Procedures vs. Public Variables</a>&nbsp;&nbsp;&nbsp;Although property procedures are the best way to implement most properties, public variables have their uses.<br><br></li>
<li>
<a href="vbconputtingpropertyprocedurestoworkforyou.htm">Putting Property Procedures to Work for You</a>&nbsp;&nbsp;&nbsp;Provides full details of the way property procedures work, and describes the implementation of common property types — for example, read-only, read-write, object, and Variant.<br><br></li>
<li>
<a href="vbconmethods.htm">Adding Methods to a Class</a>&nbsp;&nbsp;&nbsp;Methods — the behavior of an object — are just public procedures you add to your class module.<br><br></li>
<li>
<a href="vbconisitpropertyormethod.htm">Is It a Property or a Method?</a>&nbsp;&nbsp;&nbsp;Sometimes it's not obvious whether the functionality you envision is best implemented as a property or a method. This topic provides some guidelines.<br><br></li>
<li>
<a href="vbconpastingcodefragments.htm">Making a Property or Method the Default</a>&nbsp;&nbsp;&nbsp;You can use the Procedure Attributes dialog to give your class a default member.<br><br></li>
<li>
<a href="vbconfriendpropertiesmethods.htm">Friend Properties and Methods</a>&nbsp;&nbsp;&nbsp;Friend procedures are midway between Public and Private. Like Private, they aren't members of a class's interface, but like Public they're visible throughout your project.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Events aren't part of the default interface. Events are <i>outgoing</i> interfaces (that is, interfaces that reach out and touch other objects), while properties and methods belong to <i>incoming interfaces</i> (that is, interfaces whose members are invoked by other objects). The default interface of a Visual Basic object is an incoming interface.</p></li>
</ul>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;The following names cannot be used as property or method names, because they belong to the underlying IUnknown and IDispatch interfaces: QueryInterface, AddRef, Release, GetTypeInfoCount, GetTypeInfo, GetIDsOfNames, and Invoke. These names will cause a compilation error.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Events are discussed in "Adding Events to a Class" later in this chapter.</p>
</BODY>
</HTML>

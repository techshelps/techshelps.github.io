<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Design Considerations for IIS Applications</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondesignconsiderationsforiisapplications"></a>Design Considerations for IIS Applications</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDesignConsiderationsForIISApplicationsC">
</object></p>
<p>
There are several factors you should keep in mind when creating an IIS application. These include deciding on a consistent directory structure, using paths that will make your deployment work smoothly, and considering the unique navigational considerations of Web applications.</p>
<h2>General Considerations</h2>
<ul type=disc>
<li>
<b>Use relative URLs to images and related files</b>. Your application and its HTML pages can be deployed onto a Web server under a different parent directory than the one on the development computer. Because of this, it is best to use relative <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefurl">
</object><a href=JavaScript:alink_2.Click()>URLs</a> in your HTML pages rather than absolute URLs. <i>Absolute URLs</i> indicate the exact drive and directory in which your HTML page will expect to find any related images or other files it references. <i>Relative URLs</i> give the name of the file to locate and indicate its location in relation to your project directory, specifying how many directories up or down to move to find the reference.<br><br></li>
<li>
<b>Anticipate your Web server directory structure</b>. During design, think about the Web server directory structure you will use when you deploy your application, and use the same directory structure on your development machine. Your project files — including the designer, its DLL, any template files, and any additional files the templates reference (such as .gifs) — must be stored in the project directory or in subdirectories below it. For more information see "Managing your Project Files."<br><br></li>
<li>
<b>Use generated URLs</b>. Use generated URLs whenever possible to move to other webitems or pages, rather than typing a manual URL (http://www.myserver.com/mypage.htm) into your webclass templates or code. For more information, see "Specifying URLs for Webitems."<br><br></li>
<li>
<b>Gather request resources with BeginRequest</b>. Use the BeginRequest event to gather expensive server-side resources that the webclass should not hold longer than the duration of a request. Release those resources with the EndRequest event.<br><br></li>
<li>
<b>Use ADO data features</b><u>.</u> When working with databases in your webclass code, use ODBC connection pooling and ADO disconnected recordsets. For more information, search the MSDN library for ActiveX Data Objects.<br><br></li>
<li>
<b>Review your state management options carefully</b>. When planning your application, it is important to read through the information on state management and choose the most appropriate method for your needs. For more information, see "State Management in IIS Applications."<br><br></li>
<li>
<b>Be careful when using wcRetainInstance</b>. When keeping a webclass alive between requests, be aware that Visual Basic creates apartment-model objects that it places into the Session objects. This causes IIS to bind the client to a particular thread. This may cause difficulties for your application. This may also be an issue if you put Visual Basic classes into the Session or Application objects. For more information, see "State Management in IIS Applications."<br><br></li>
<li>
<b>Do not use HTML pages that contain forms with the GET method</b>. If you use an HTML template file that contains forms that use the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefgetmethod">
</object><a href=JavaScript:alink_3.Click()>GET method</a>, you will not be able to successfully connect events and run the application. You need to make sure that all template files you use in your webclass use the POST method for any forms.</li>
</ul>
<h2>Navigational Considerations</h2>
<p>
It is difficult to predict the exact way in which users are going to interact with a browser-based application. Unlike a forms-based application, where navigation from form to form is generally fixed, users in a browser-based application can move backward and forward at any time, can jump randomly, or can close the application without completing their current process. Because of this inherent flexibility, there are several things you should keep in mind:
<ul type=disc>
<li>
<b>Close database transactions</b>. Try to avoid holding open database transactions across request boundaries, because there is no guarantee that the user will return to the transaction after the initial request is made. Holding a transaction open on a database consumes expensive resources and locks a part of the database from other users. Instead, consider committing database changes at the end of every request.<br><br></li>
<li>
<b>Allow for open navigation</b>. Structure your application so that users can navigate freely among the application's webitems, rather than assuming a fixed navigation path. You can do this by including navigational buttons and other aids that allow a user to return to the starting point from any place in the application, or including other cues that help the user figure out the appropriate navigational choice from each screen.<br><br></li>
<li>
<b>Anticipate re-submits</b>. Consider how you will handle out-of-sequence navigation caused by use of the browser’s back button and history menu. This can be particularly important in the case of applications that use HTML forms. In these situations, the user might complete a transaction and then use the back button to return to a data entry form thinking they can make a correction and resubmit.<br><br></li>
<li>
<b>Refill data structures when a user moves backwards</b>. Any internal data structures you use in the application must be filled appropriately. For example, suppose your startup screen in the application asks for a user name and password, which you then store in member variables. If a user is in the middle of your application and navigates back to the startup screen, you must reset the variables to their original state.</li>
</ul>
</BODY>
</HTML>

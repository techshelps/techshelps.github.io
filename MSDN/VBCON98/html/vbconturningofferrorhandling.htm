<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Turning Off Error Handling</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconturningofferrorhandling"></a>Turning Off Error Handling</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTurningOffErrorHandlingC">
</object></p>
<p>
If an error trap has been enabled in a procedure, it is automatically disabled when the procedure finishes executing. However, you may want to turn off an error trap in a procedure while the code in that procedure is still executing. To turn off an enabled error trap, use the On Error GoTo 0 statement. Once Visual Basic executes this statement, errors are detected but not trapped within the procedure. You can use On Error GoTo 0 to turn off error handling anywhere in a procedure — even within an error-handling routine itself.</p>
<p>
For example, try single stepping, using Step Into, through a procedure such as this:</p>
<pre><code>Sub ErrDemoSub ()
   On Error GoTo SubHandler   ' Error trapping is
                              ' enabled.
      ' Errors need to be caught and corrected here.
      ' The Kill function is used to delete a file.
      Kill "Oldfile.xyz"
   On Error GoTo 0   ' Error trapping is turned off
                     ' here.
      Kill "Oldfile.xyz"
   On Error GoTo SubHandler   ' Error trapping is
                              ' enabled again.
      Kill "Oldfile.xyz"
   Exit Sub
SubHandler:         ' Error-handling routine goes here.
   MsgBox "Caught error."
   Resume Next
End Sub
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To learn how to use the Step Into feature, see "Running Selected Portions of Your Application" later in this chapter.</p>
<h2>Debugging Code with Error Handlers</h2>
<p>
When you are debugging code, you may find it confusing to analyze its behavior when it generates errors that are trapped by an error handler. You could comment out the On Error line in each module in the project, but this is also cumbersome.</p>
<p>
Instead, while debugging, you could turn off error handlers so that every time there's an error, you enter break mode. </p>
<p class=label>
<b>To disable error handlers while debugging</b>
<ol>
<li>
From the <b>Code</b> window context menu (available by right-clicking on the Code window), choose <b>Toggle</b>.<br><br></li>
<li>
Select the <b>Break on All Errors</b> option.</li>
</ol>
<p>
With this option selected, when an error occurs anywhere in the project, you will enter break mode and the Code window will display the code where the error occurred.</p>
<p>
If this option is not selected, an error may or may not cause an error message to be displayed, depending on where the error occurred. For example, it may have been raised by an external object referenced by your application. If it does display a message, it may be meaningless, depending on where the error originated.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Webclasses</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconwebclasses"></a>An Introduction to Webclasses</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconWebclassesC">
</object></p>
<p>
A webclass is a Visual Basic component that resides on a Web server and responds to input from the browser. When you create an IIS application, you create its webclasses using the Webclass Designer. Webclasses typically contain <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefresource">
</object><a href=JavaScript:alink_2.Click()>webitems</a> and the code that delivers those webitems to a client.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;There is a one-to-one relationship between the Webclass Designer and the webclass. If you want to add additional webclasses to your application, you must add additional designers.</p>
<p>
A webclass is associated with one and only one client for its entire life cycle. Visual Basic creates a logical instance of the webclass for each client that accesses it. However, for each client, the webclass is capable of maintaining state between requests.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "State Management in IIS Applications" for more information about maintaining state in a webclass.</p>
<h2>Webclasses and .ASP Files </h2>
<p>
Each webclass in an IIS application has an associated .asp (Active Server Pages) file that Visual Basic generates automatically during the compile or debug process. The .asp file hosts the webclass on the Web server. In addition, it generates the webclass's run-time component when the application is first started and launches the first event in the webclass's life cycle.</p>
<p>
The following figure shows the relationship between .asp files, webclasses, and webclass contents.</p>
<p class=label>
<b>Relationship Between .asp Files and Webclasses</b></p>
<p>
<img src="vb4ocb1.gif" border=0></p>
<p>
As shown in this picture, there is a one-to-one relationship between webclasses and .asp files — each webclass has its own ASP. In turn, a webclass can have many webitems associated with it.</p>
<p>
The path to the ASP acts as the <i>base URL</i> for the webclass and its webitems. A <i>URL </i>is a standard way of indicating the location of a document or other item that is available electronically. (For example, http://www.microsoft.com is a URL.) When you want to go to a page on the Web, you enter the URL for the page and the browser retrieves and displays it. You can indicate the URL directly, by typing it into the location line of your browser, or indirectly, by selecting a link that tells the browser the correct URL to which it should go. A <i>base URL </i>refers to the webclass itself, and can act as an entry point into the application.</p>
<p>
For example, suppose you have a project called Project 1, that contains a webclass called CustomerInquiry. You specify in the NameInURL property that the ASP should be named Project1_CustomerInquiry. Visual Basic creates the ASP and gives it this name when you compile the project, and stores it in the specified directory, called CustomerSupport, on the Web server you specify:&nbsp; www.mycompany.com. The <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefbaseurl">
</object><a href=JavaScript:alink_3.Click()>base URL</a> for your webclass would be the following:</p>
<pre><code>http://www.mycompany.com/CustomerSupport/Project1_CustomerInquiry.asp
</code></pre>
<p>
To start your IIS application, the user accesses this URL with their browser.</p>
<h2>Webclass Contents: Templates and Custom Webitems</h2>
<p>
A webclass typically contains webitems that it uses to provide content to the browser and expose events. A webitem can be one of two things:
<ul type=disc>
<li>
An HTML template file — HTML template files are HTML pages that you associate with your webclass. When the webclass receives a request, it can send the HTML pages to the browser for display. Templates differ from regular HTML pages only in that they often contain replacement areas the webclass can process before sending the page to the browser. This allows you to customize your response.<br><br></li>
<li>
A custom webitem — Custom webitems do not have an associated HTML page they can return to the user. Instead, a custom webitem is a programmatic resource that consists of one or more event handlers that are logically grouped together to help organize your Web application. These event handlers are called from the browser, either when the page loads or when a user selects an HTML element. The event handlers can generate a response to the browser or pass processing to another of the webclass's webitems.</li>
</ul>
<p>
Templates and custom webitems both expose events that the webclass processes when certain actions occur in the browser. You can write event procedures for these events using standard Visual Basic code, thus linking the actions that occur on a Web page to Visual Basic processing.</p>
<p>
Each webclass can contain multiple templates and webitems. In most cases, you will need only one webclass in your application, but you might want to use multiple webclasses if you want to break up your application into parts that can be reused in other applications.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Webclass Events" for more information on template and custom webitem events. See "Adding HTML Templates to the Webclass" for more information on template webitems. See "Adding Custom WebItems to a Webclass" for more information on custom webitems. </p>
<h2>IIS Applications vs. Traditional Visual Basic Applications</h2>
<p>
IIS applications are structured differently than standard, forms-based Visual Basic applications. In an IIS application, the user interface consists of a series of HTML pages rather than traditional Visual Basic forms. An HTML page is like a form in that it contains all the visual elements that make up your application's user interface. You can place some of the same items into a page as you do a form, including text, buttons, check boxes, and option buttons.</p>
<p>
An HTML page referenced in an IIS application is saved to an .htm or .html file that is analogous to a .frm file, in that it is used to render and display the page to the end user. Visual Basic creates the .htm file from the original HTML page when you save or debug your application, or when you use the Edit HTML Template menu command.</p>
<p>
In an IIS application, you do not use Visual Basic to create the HTML pages that make up the application's user interface. A Web designer or a developer creates the pages using an HTML editor, a word processing package, or a text editor, and you link the finished pages into your webclass.</p>
<p>
The following table sums up the differences between forms-based applications and Web-based applications:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%></td>
<td class=label width=29%><b>Forms-based application</b></td>
<td class=label width=38%><b>Web-based <br>
application</b></td>
</tr>
<tr valign=top>
<td width=33%>User interface </td>
<td width=29%>Visual Basic forms</td>
<td width=38%>HTML pages</td>
</tr>
<tr valign=top>
<td width=33%>UI elements (for example, text boxes, buttons, images)</td>
<td width=29%>Controls</td>
<td width=38%>Elements </td>
</tr>
<tr valign=top>
<td width=33%>File format</td>
<td width=29%>.frm files</td>
<td width=38%>.htm files</td>
</tr>
<tr valign=top>
<td width=33%>Creator</td>
<td width=29%>Developer</td>
<td width=38%>Web designer with a developer, or the developer alone</td>
</tr>
<tr valign=top>
<td width=33%>Run time</td>
<td width=29%>Visual Basic run time</td>
<td width=38%>Web browser</td>
</tr>
</table><br>
<h2>Structure of IIS Applications</h2>
<p>
An IIS application consists of the following pieces. Many of these are generated for you automatically when you build your project. The pieces include:
<ul type=disc>
<li>
One or more <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefwebclass">
</object><a href=JavaScript:alink_4.Click()>webclasses</a>, which are generated automatically when you create a webclass project.<br><br></li>
<li>
One or more <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefhtmltemplate">
</object><a href=JavaScript:alink_5.Click()>HTML templates</a> and their events.<br><br></li>
<li>
One or more custom webitems and their events.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;A webclass may contains a mixture of templates and custom webitems, only templates, or only custom webitems. You do not necessarily have to have both templates and custom webitems in your webclasses.</p></li>
<li>
An .asp (Active Server Pages) file used to host the webclass in Internet Information Server (IIS). The .asp is generated automatically when you create a webclass project, and given the name you specify in the NameInURL property. <br><br></li>
<li>
A webclass run-time component, MSWCRUN.DLL, that helps process requests.<br><br></li>
<li>
A project DLL (generated automatically on compile) that contains your Visual Basic code and is accessed by the run-time component.</li>
</ul>
<p>
The following figure shows how the server portions of an IIS application work together:</p>
<p class=label>
<b>Structure of IIS Applications</b></p>
<p>
<img src="vb4ocb2.gif" border=0></p>
<p>
Like other Visual Basic applications, an IIS application has code modules and a visual designer. IIS application objects are stored in plain text files that contain the source code of the webclass, events and property settings, and the webitems for the webclass. Visual Basic uses the extension .dsr for these files. In addition to the .dsr file, Visual Basic generates a .dsx file that contains a binary version of the application.</p>
</BODY>
</HTML>

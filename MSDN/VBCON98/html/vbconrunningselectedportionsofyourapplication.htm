<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Running Selected Portions of Your Application</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconrunningselectedportionsofyourapplication"></a>Running Selected Portions of Your Application</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconRunningSelectedPortionsOfYourApplicationC">
</object></p>
<p>
If you can identify the statement that caused an error, a single breakpoint might help you locate the problem. More often, however, you know only the general area of the code that caused the error. A breakpoint helps you isolate that problem area. You can then use Step Into and Step Over to observe the effect of each statement. If necessary, you can also skip over statements or back up by starting execution at a new line.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Step Mode</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>Step Into</td>
<td width=72%>Execute the current statement and break at the next line, even if it's in another procedure.</td>
</tr>
<tr valign=top>
<td width=28%>Step Over</td>
<td width=72%>Execute the entire procedure called by the current line and break at the line following the current line.</td>
</tr>
<tr valign=top>
<td width=28%>Step Out</td>
<td width=72%>Execute the remainder of the current procedure and break at the statement following the one that called the procedure.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You must be in break mode to use these commands. They are not available at design time or run time.</p>
<h2>Using Step Into</h2>
<p>
You can use Step Into to execute code one statement at a time. (This is also known as single stepping.) After stepping through each statement, you can see its effect by looking at your application's forms or the debugging windows.</p>
<p class=label>
<b>To step through code one statement at a time</b>
<ul type=disc>
<li>
From the <b>Debug</b> menu, choose <b>Step Into</b>.<p class=tl>
-or-</P><p class=tl>
Click the <b>Step Into</b> button on the <b>Debug</b> toolbar. (To display the Debug toolbar, right-click on the Visual Basic toolbar and select the <b>Debug</b> option.)</P><p class=tl>
-or-</P><p class=tl>
Press F8.</P></li>
</ul>
<p>
When you use Step Into to step through code one statement at a time, Visual Basic temporarily switches to run time, executes the current statement, and advances to the next statement. Then it switches back to break mode.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Visual Basic allows you to step into individual statements, even if they are on the same line. A line of code can contain two or more statements, separated by a colon (<code>:</code>). Visual Basic uses a rectangular outline to indicate which of the statements will execute next. Breakpoints apply only to the first statement of a multiple-statement line.</p>
<h2>Using Step Over</h2>
<p>
Step Over is identical to Step Into, except when the current statement contains a call to a procedure. Unlike Step Into, which steps into the called procedure, Step Over executes it as a unit and then steps to the next statement in the current procedure. Suppose, for example, that the statement calls the procedure SetAlarmTime:</p>
<pre><code>SetAlarmTime 11, 30, 0
</code></pre>
<p>
If you choose Step Into, the Code window shows the SetAlarmTime procedure and sets the current statement to the beginning of that procedure. This is the better choice only if you want to analyze the code within SetAlarmTime.</p>
<p>
If you use Step Over, the Code window continues to display the current procedure. Execution advances to the statement immediately after the call to SetAlarmTime, unless SetAlarmTime contains a breakpoint or a Stop statement. Use Step Over if you want to stay at the same level of code and don't need to analyze the SetAlarmTime procedure.</p>
<p>
You can alternate freely between Step Into and Step Over. The command you use depends on which portions of code you want to analyze at any given time.</p>
<p class=label>
<b>To use Step Over</b>
<ul type=disc>
<li>
From the <b>Debug</b> menu, choose <b>Step Over</b>.<p class=tl>
-or-</P><p class=tl>
Click the <b>Step Over</b> button on the <b>Debug</b> toolbar. (To display the Debug toolbar, right-click on the Visual Basic toolbar and select the <b>Debug</b> option.)</P><p class=tl>
-or-</P><p class=tl>
Press SHIFT+F8.</P></li>
</ul>
<h2>Using Step Out</h2>
<p>
Step Out is similar to Step Into and Step Over, except it advances past the remainder of the code in the current procedure. If the procedure was called from another procedure, it advances to the statement immediately following the one that called the procedure.</p>
<p class=label>
<b>To use Step Out</b>
<ul type=disc>
<li>
From the <b>Debug</b> menu, choose <b>Step Out</b>.<p class=tl>
-or-</P><p class=tl>
Click the <b>Step Out</b> button on the <b>Debug</b> toolbar. (To display the Debug toolbar, right-click on the Visual Basic toolbar and select the <b>Debug</b> option.)</P><p class=tl>
-or-</P><p class=tl>
Press CTRL+SHIFT+F8.</P></li>
</ul>
<h2>Bypassing Sections of Code</h2>
<p>
When your application is in break mode, you can use the Run To Cursor command to select a statement further down in your code where you want execution to stop. This lets you "step over" uninteresting sections of code, such as large loops.</p>
<p class=label>
<b>To use Run To Cursor</b>
<ol>
<li>
Put your application in break mode.<br><br></li>
<li>
Place the cursor where you want to stop.<br><br></li>
<li>
Press CTRL+F8.<p class=tl>
-or-</P><p class=tl>
From the <b>Debug</b> menu, choose <b>Run To Cursor</b>.</P></li>
</ol>
<h2>Setting the Next Statement to Be Executed</h2>
<p>
While debugging or experimenting with an application, you can use the Set Next Statement command to skip a certain section of code — for instance, a section that contains a known bug — so you can continue tracing other problems. Or you may want to return to an earlier statement to test part of the application using different values for properties or variables.</p>
<p>
With Visual Basic, you can set a different line of code to execute next, provided it falls within the same procedure. The effect is similar to using Step Into, except Step Into executes only the next line of code in the procedure. By setting the next statement to execute, you choose which line executes next.</p>
<p class=label>
<b>To set the next statement to be executed</b>
<ol>
<li>
In break mode, move the insertion point (cursor) to the line of code you want to execute next.<br><br></li>
<li>
From the <b>Debug</b> menu, choose <b>Set Next Statement</b>.<br><br></li>
<li>
To resume execution, from the <b>Run</b> menu, choose <b>Continue</b>.<p class=tl>
-or-</P><p class=tl>
From the <b>Debug</b> menu, choose <b>Run To Cursor</b>, <b>Step Into</b>, <b>Step Over, </b>or<b> Step Out</b>.</P></li>
</ol>
<h2>Showing the Next Statement to Be Executed</h2>
<p>
You can use Show Next Statement to place the cursor on the line that will execute next. This feature is convenient if you've been executing code in an error handler and aren't sure where execution will resume. Show Next Statement is available only in break mode.</p>
<p class=label>
<b>To show the next statement to be executed</b>
<ol>
<li>
While in break mode, from the <b>Debug</b> menu, choose <b>Show Next</b> <b>Statement</b>.<br><br></li>
<li>
To resume execution, from the <b>Run</b> menu, choose <b>Continue</b>.<p class=tl>
-or-</P><p class=tl>
From the <b>Debug</b> menu, choose <b>Run To Cursor</b>, <b>Step Into</b>, <b>Step Over</b>, or<b> Step Out</b>.</P></li>
</ol>
</BODY>
</HTML>

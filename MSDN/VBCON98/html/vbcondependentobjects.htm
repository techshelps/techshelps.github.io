<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dependent Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondependentobjects"></a>Dependent Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDependentObjectsC">
</object></p>
<p>
Sometimes there is a clear relationship between two objects, such that one object is a part of the other. In Microsoft Excel, for example, a Button object is always part of another object, such as a Worksheet.</p>
<p>
An object that’s contained in another object is called a <i>dependent object.</i> Client applications can manipulate dependent objects, just as they can manipulate externally creatable objects, but they cannot create dependent objects using CreateObject or New.</p>
<p>
Set the Instancing property of a class module to PublicNotCreatable to make the objects created from that class dependent objects.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Dependent objects are also referred to as <i>nested objects.</i></p>
<h2>Getting References to Dependent Objects</h2>
<p>
If a client application can use dependent objects but can’t create them, how are they created?</p>
<p>
A component can provide dependent objects in several ways. Most commonly an externally creatable object will have a collection with an Add method which the client can invoke. The component creates the dependent object in the code for the Add method, and returns a reference to the new object, which the client can then use.</p>
<p>
For example, a Microsoft Excel Worksheet object has a collection of Button objects. A client application can add a new button to the worksheet by calling the Add method of the Buttons collection, as shown in the following code fragment:</p>
<pre><code>' Note: The variable wsBudget contains a reference to
'&nbsp;&nbsp; a Worksheet object.
Dim btnOK As Excel.Button
' Parameters of the Add method specify the top, left,
' width, and height of the new button. The return value
' is a reference to the new Button object.
Set btnOK = wsBudget.Buttons.Add(100, 100, 150, 125)
' Set the caption of the new Button object.
btnOK.Caption = "OK"
</code></pre>
<p>
It’s important to remember that the variable btnOK contains a reference to the object, not the object itself.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The distinction between externally creatable objects and dependent objects is made for the benefit of the client applications that manipulate a component’s objects. From <i>within</i> a component, you can always create objects from any of the component’s classes, regardless of the value of the Instancing property.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"Combining Externally Creatable and Dependent Objects" discusses the process of identifying the types of objects needed for each part of an object model.</p>
</BODY>
</HTML>

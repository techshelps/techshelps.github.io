<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Contrasting Linked and Embedded Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcontrastinglinkedembeddedobjects"></a>Contrasting Linked and Embedded Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconContrastingLinkedEmbeddedObjectsC">
</object></p>
<p>
You use a component's visual interface to contain data from another application by linking or embedding that data into your Visual Basic application. The primary difference between a linked and embedded object is where their data is stored. For example, data associated with a <i>linked object</i> is managed by the application that created it and stored outside an OLE container control. Data associated with an <i>embedded object</i> is contained in an OLE container control and can be saved with your Visual Basic application.</p>
<p>
When a linked or embedded object is created, it contains the <i>name</i> of the application that supplied the object, its data (or, in the case of a linked object, a <i>reference</i> to the data), and an <i>image</i> of the data.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To place an object in an OLE container control, the component that provides the object must be registered in your system registry. When you install an application that supplies the objects you want to use in your project, that application should register its object library on your system so that application's objects appear in the Insert Object dialog box. You can use Regedit.exe to search the system registry for an object, but take care not to alter the contents of the registry.</p>
<h2>Linked Objects</h2>
<p>
When you link an object, you are inserting a <i>placeholder</i> (not the actual data itself) for the <i>linked object</i> into your application. For example, when you link a range of spreadsheet cells to a Visual Basic application, the data associated with the cells is stored in another file; only a link to the data and an image of the data are stored in the OLE container control. While working with your Visual Basic application, a user can activate the linked object (by double-clicking the object, for example), and the spreadsheet application will start automatically. The user can then edit those spreadsheet cells using the spreadsheet application. When editing a linked object, the editing is done in a separate window outside the OLE container control.</p>
<p>
When an object is linked to a Visual Basic application, the object's current data can be viewed from any other applications that contain links to that data. The data exists in only one place — the ActiveX component — which is the source application that provides the object. For example, in Figure 10.8, Visual Basic contains a link to the Graph application. Microsoft Word also contains a link to the graph. If the graph's data is changed by either application, the modified graph will appear in <i>both</i> the Visual Basic application and the Microsoft Word document.</p>
<p class=label>
<b>Figure 10.8&nbsp;&nbsp;&nbsp;An object's data can be accessed from many different applications that contain links to that data</b></p>
<p>
<img src="avp10010.gif" border=0></p>
<p>
As you can see, linking makes it easy to track identical information that appears in more than one application. Linking is useful when you want to maintain one set of data that is accessed from several applications.</p>
<h2>Embedded Objects</h2>
<p>
To create an embedded object, you can either use an OLE container control or add an object's class to the Toolbox. With an <i>embedded object</i>, all the data associated with the object is copied to and contained in the OLE container control. When you save the contents of the control to a file, the file contains the name of the application that produced the object, the object's data, and a metafile image of the object. For this reason, embedded objects can greatly increase file size.</p>
<p>
Unlike linked objects, no other application has access to the data in an embedded object. Embedding is useful when you want your application to maintain data that is produced and edited in another application, as shown in Figure 10.9.</p>
<p class=label>
<b>Figure 10.9&nbsp;&nbsp;&nbsp;Your application maintains data for an embedded object</b></p>
<p>
<img src="avp10011.gif" border=0></p>
<p>
When the user activates the object (the graph), the ActiveX component that created the object (Microsoft Graph) is invoked by the container application (your Visual Basic application), and the object's data is opened for editing. In addition, the user interface and menu system of the object is displayed in the container application so the user can control the object in place. For more information on in-place activation, see "Activating an Object in the OLE Container Control" later in this chapter.</p>
</BODY>
</HTML>

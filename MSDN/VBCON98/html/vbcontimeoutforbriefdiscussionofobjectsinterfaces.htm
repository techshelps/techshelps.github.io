<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Time Out for a Brief Discussion of Objects and Interfaces</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontimeoutforbriefdiscussionofobjectsinterfaces"></a>Time Out for a Brief Discussion of Objects and Interfaces</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTimeOutForBriefDiscussionOfObjectsInterfacesC">
</object></p>
<p>
This topic completes the code example begun in "Creating and Implementing an Interface," and continued in "Implementing Properties." You may find it helpful to read those topics before beginning this one.</p>
<p>
The Tyrannosaur and Flea code example seems to play fast and loose with interfaces and objects. References to objects are assigned to one object variable, and references to interfaces to another.</p>
<p>
In fact, <i>all of the references are object references</i>. A reference to an interface is also a reference to the object that implements the interface. Furthermore, an object may have multiple interfaces, but it's still the same object underneath.</p>
<p>
In Visual Basic, each class has a default interface that has the same name as the class. Well, almost the same. By convention, an underscore is prefixed to the class name. The underscore indicates that this interface is hidden in the type library.</p>
<p>
Thus the Tyrannosaur class has a default interface called _Tyrannosaur. Because Tyrannosaur also implements Animal, the class has a second interface named Animal.</p>
<p>
However, underneath it all, the object is still a Tyrannosaur. Place a command button on Form1, and add the following code:</p>
<pre><code>Private Sub Command1_Click()
   Dim ty As Tyrannosaur
   Dim anim As Animal

   Set ty = New Tyrannosaur
   Set anim = ty
   MsgBox TypeName(anim)
End Sub
</code></pre>
<p>
You might expect the message box to display "Animal," but in fact it displays "Tyrannosaur."</p>
<h4>Querying for Interfaces</h4>
<p>
When you assign a Tyrannosaur object to variable of type <code>Animal</code>, Visual Basic asks the Tyrannosaur object if it supports the Animal interface. (The method used for this is called QueryInterface, or QI for short; you may sometimes hear QI used as a verb.) If the answer is no, an error occurs.</p>
<p>
If the answer is yes, the object is assigned to the variable. Only the methods and properties of the Animal interface can be accessed through this variable.</p>
<h4>Generic Object Variables and Interfaces</h4>
<p>
What happens if you assign the object reference to a generic object variable, as in the following code?</p>
<pre><code>Private Sub Command1_Click()
   Dim ty As Tyrannosaur
   Dim anim As Animal
   Dim obj As Object

   Set ty = New Tyrannosaur
   Set anim = ty
   Set obj = anim
   MsgBox TypeName(obj)
End Sub
</code></pre>
<p>
The result is again Tyrannosaur. Now, what interface do you get when you call properties and methods through the variable <code>obj</code>? Add the following method to the Tyrannosaur class:</p>
<pre><code>Public Sub Growl()
   Debug.Print "Rrrrrr"
End Sub
</code></pre>
<p>
The Growl method belongs to the Tyrannosaur object's default interface. In the code for the command button's Click event, replace the MsgBox statement with the following two lines of code:</p>
<pre><code>obj.Move 42
obj.Growl
</code></pre>
<p>
When you run the project and click the button, execution stops on the Growl method, with the error "Object does not support this property or method." Clearly, the interface is still Animal.</p>
<p>
This is something to bear in mind when using variables of type Object with objects that have multiple interfaces. The interface the variable will access is the <i>last interface assigned.</i> For example:</p>
<pre><code>Private Sub Command1_Click()
   Dim ty As Tyrannosaur
   Dim anim As Animal
   Dim obj As Object

   Set ty = New Tyrannosaur
   Set anim = ty
   Set obj = anim
   obj.Move 42      ' Succeeds
   obj.Growl      ' Fails

   Set obj = ty
   obj.Move 42      ' Fails
   obj.Growl      ' Succeeds
End Sub
</code></pre>
<p>
Fortunately, there's very little reason to use the slower, late-bound Object data type with objects that have multiple interfaces. One of the main reasons for using multiple interfaces is to gain the advantage of early binding through polymorphism.</p>
<h3>Other Sources of Interfaces</h3>
<p>
Visual Basic class modules are not your only source of interfaces to implement. You can implement any interface contained in a type library, as long as that interface supports Automation.</p>
<p>
If you have the Professional or Enterprise Edition of Visual Basic, you can create your own type libraries of abstract classes. These type libraries can be used in many projects, as described in "General Principles of Component Design" in <i>Creating ActiveX Components</i> in the <i>Component Tools Guide</i>.</p>
<p>
The Professional and Enterprise editions also include the MkTypLib (Make Type Library) utility in the Tools directory. If you've used this utility with Microsoft Visual C++, you may find it a more congenial way to create interfaces.</p>
<h4>Using Interfaces in Your Project</h4>
<p>
To use an interface in your project, click References on the Project menu to open the References dialog box. If the type library is registered, it will appear in the list of references, and you can check it. If the type library is not in the list, you can use the Browse button to locate it.</p>
<p>
Once you have a reference to a type library, you can use Implements to implement any Automation interfaces the type library contains.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;You're not limited to implementing abstract interfaces. "The Many (Inter)Faces of Code Reuse" describes how you can implement an interface and selectively reuse the properties and methods of the class that provides the interface.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Guidelines for Creating Collection Classes</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcollectionclasses"></a>Guidelines for Creating Collection Classes</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCollectionClassesC">
</object></p>
<p>
A collection provides a way to connect a group of dependent objects with an object that ‘contains’ them. For example, an Invoice object might have a collection of LineItem objects.</p>
<p>
As discussed earlier in "Naming Guidelines," the name of a collection should be the plural of the name of the object it contains. Thus an Invoice object might have a LineItems collection to contain its LineItem objects.</p>
<h2>Implementing Collections</h2>
<p>
Visual Basic provides a generic Collection class for managing groups of objects, as discussed in "The Visual Basic Collection Object," in "Programming with Objects" in the <i>Visual Basic Programmer’s Guide.</i></p>
<p>
You can implement collections for your component’s object model by wrapping a private Collection object in a class module, thus defining a <i>collection class</i> from which you can create instances as needed. This is explained in "Creating Your Own Collection Classes," in "Programming with Objects" in the <i>Visual Basic Programmer’s Guide</i>.</p>
<p>
In addition to describing the steps you need to take, "Creating Your Own Collection Classes" includes code examples that show why collection classes are the most robust way to use the Collection object.</p>
<p>
A robust implementation is critical to the successful reuse of component code. Other programmers will rely on the robustness of the objects you create. Don’t take shortcuts.</p>
<h3>Collection Class Properties and Methods</h3>
<p>
The following table shows properties and methods you should implement for collection classes.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Method or property</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>Add</td>
<td width=72%>Adds an item to a collection. If used for object creation, the method should return a reference to the newly created object.</td>
</tr>
<tr valign=top>
<td width=28%>Count (property)</td>
<td width=72%>Returns the number of items in the collection.</td>
</tr>
<tr valign=top>
<td width=28%>Item</td>
<td width=72%>Returns a reference to a single item from the collection. The argument may be a numeric index or a key value. This is usually the default property.</td>
</tr>
<tr valign=top>
<td width=28%>Remove</td>
<td width=72%>Removes an item from a collection. The argument may be a numeric index or a key value.</td>
</tr>
<tr valign=top>
<td width=28%>NewEnum</td>
<td width=72%>Returns the IUnknown interface of an enumerator object that For Each … Next can use to iterate over the items in a collection. Should be hidden in the type library. Must have a Procedure ID value of -4 to work with For Each … Next.</td>
</tr>
</table><br>
<h4>Implementing an Add or Insert Method</h4>
<p>
One of the keys to creating a robust collection class is implementing your own Add method. Your Add method can delegate to the Add method of a Visual Basic Collection object, while providing type safety or controlling access to the collection.</p>
<p>
Type safety is very easily implemented, as shown in the following code fragment for the Add method of a hypothetical Widgets collection class:</p>
<pre><code>Public Sub Add(ByVal NewWidget As Widget, _
      Optional ByVal Key As String = "")
   If String = "" Then
      mcolWidgets.Add NewWidget
   Else
      mcolWidgets.Add NewWidget, Key
   End If
End Sub
</code></pre>
<p>
All the work of maintaining the collection and generating error messages is delegated to a private instance of the Visual Basic Collection class, a reference to which is kept in <code>mcolWidgets</code>. The Add method of the private Collection object, which can accept objects of any type, is shielded by the declaration shown above, which can accept only Widget objects.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Many existing collection implementations use Add as the name of a method that creates a new element within a collection. You may want to name a method like that shown above — which puts an externally created object into a collection — "Insert" instead of "Add."</p>
<p>
You can use the Add method to control access to a collection by making the class of objects the collection contains PublicNotCreatable. In this way, the Add method becomes the only way to create new objects within the collection. If you implement your Add method in this fashion, it should return a reference to the newly created object.</p>
<p>
The Add method is a good place to call Friend functions that set the values of read-only properties such as the Parent property.</p>
<h4>Examples and Utilities</h4>
<p>
"Creating Your Own Collection Classes" provides sample code for a collection class implemented according to these guidelines, and explains how to make Item the default method; how to hide NewEnum in the type library; and how to give NewEnum the correct Procedure ID.</p>
<p>
The Class Builder utility, included in the Professional and Enterprise Editions of Visual Basic, creates collection class source code that follows these guidelines. You can customize this source code with your own events, properties, and methods.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See the "Add Method," "Remove Method," "Item Method," or "Count Property" reference topic, or see "The Visual Basic Collection Object," in "Programming with Objects," in the <i>Visual Basic Programmer’s Guide</i>.</p>
</BODY>
</HTML>

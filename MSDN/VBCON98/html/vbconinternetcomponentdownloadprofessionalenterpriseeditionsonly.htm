<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Internet Packages</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconinternetcomponentdownloadprofessionalenterpriseeditionsonly"></a>Internet Packages</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconInternetComponentDownloadProfessionalEnterpriseEditionsOnlyC">
</object></p>
<p>
<i>Internet packages</i> are .cab-based setup programs that are designed to be downloaded from a Web site. Internet Explorer uses a process known as Internet Component Download to install your Internet application. The Package and Deployment Wizard automatically includes information needed for this process in the packages it creates.</p>
<p>
There are several types of Visual Basic applications or components that can be packaged for Internet deployment, including:
<ul type=disc>
<li>
ActiveX controls (.ocx files) that are displayed on a Web page.<br><br></li>
<li>
ActiveX .exe or .dll files, designed to run on the client or the Web server.<br><br></li>
<li>
ActiveX documents, that are displayed in place of a Web page.<br><br></li>
<li>
DHTML applications, client-based applications that link HTML pages to Visual Basic code through the use of Dynamic HTML.<br><br></li>
<li>
IIS applications, server-based applications that link HTML pages to an object called a webclass. The webclass intercepts server requests from the browser and responds to them with Visual Basic code.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Extensive information about the Internet Component Download process can be found in "Downloading ActiveX Components" in <i>Building Internet Applications</i> in the <i>Component Tools Guide</i>.</p>
<h2>Parts of an Internet Package</h2>
<p>
There are several files that are always part of your Internet packages. These include:
<ul type=disc>
<li>
<b>The primary .cab file for your application</b>. The primary .cab file for Internet packages is used as the setup program for your application. The primary .cab file includes project components, such as the executable or DLL for your application or your .ocx file for controls, an .inf file referencing secondary cabs and containing safety and registry information, and all required dependency files that are not in secondary .cabs.<br><br></li>
<li>
<b>All required support files</b>. Support files for an Internet application may include HTML files, Active Server Pages (.asp) files, graphics files in a variety of formats, or other files your application must access to run.<br><br></li>
<li>
<b>Any secondary .cab files for your application</b>. In addition to project files, applications often reference several run-time components, such as the Visual Basic run-time DLL, individual ActiveX controls, and data access objects. If these components are available online in prepackaged .cab files, you can reference those .cab files in your primary .cab, rather than shipping the files yourself.</li>
</ul>
<p>
Secondary .cab files provide an efficient way to ensure that the user has the most current version of components. If a newer version of a component in a secondary .cab file becomes available on the external Web site, users who download your application will receive the updated version automatically.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you cannot or do not want your application setup to require a connection to the Internet, you may place the secondary .cab files on a server within your intranet. An intranet server often provides for faster downloading and allows users to download from a secure network.</p>
<h2>How Internet Component Download Works</h2>
<p>
After you package your Internet application or component for download, you deploy it to a specific location on a Web server, from which users can access it. Usually, your package is referenced as part of an existing Web page — that is, your control or other component is hosted by a Web page.</p>
<p>
When a user accesses the Web page that hosts your package, the system downloads your package to the user's computer. The package is verified for safety, unpacked, registered, installed, and <i>then</i> activated. All of this occurs in the background and is controlled by the browser.</p>
<p>
The Package and Deployment Wizard plays two parts in the process described above:
<ol>
<li>
It packages your component and its associated files into a compressed (.cab) file that the browser uses to download your component. The Package and Deployment Wizard determines which files your project needs to run, gathers those files, compresses them into a .cab file, and generates the HTML that points to your component.<br><br></li>
<li>
It deploys your packaged files to the Web server location of your choice. For more information on deploying your Internet component download package, see "Application Deployment with the Wizard" later in this chapter.</li>
</ol>
<h2>Safety Issues</h2>
<p>
When you prepare Internet applications and components for download, you must package them into a file that can be delivered to the user through a browser. In addition, you must perform a few precautionary steps to ensure users that your application will not harm their computers. These steps can include:
<ul type=disc>
<li>
Digitally signing your components so that users can verify the contents of the component and identify you as the software's source.<br><br></li>
<li>
Setting safety levels to vouch that your components will not damage users' computers or corrupt their data.<br><br></li>
<li>
Arranging for licensing of any components that require it. When you add an ActiveX control to a Web page, you are distributing it to any users who download the control from the page. Unless you license the control, there is little to prevent an end user from taking your control and using it in their own applications. The license acts as a kind of copyright for your control, preventing unauthorized use.</li>
</ul>
<p>
Safety settings can be made within the Package and Deployment Wizard. When you work with an Internet package, a screen in the wizard asks you to verify safety settings. This screen appears lists only the objects in your project that do not implement a safety interface called IObjectSafety.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Signing and licensing must be done outside of the packaging process. You should arrange licensing for any components before you package the component. Digital signing can be done after you package the application — the Package and Deployment Wizard reserves space within the .cab file for information about the digital signature.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Steps to Prepare your Component for Download" in the <i>Building Internet Applications</i> book of the <i>Component Tools Guide </i>for detailed explanations of component safety, licensing, and signing. See "Setting Safety Levels for ActiveX Components" in "Downloading ActiveX Components" in <i>Building Internet Applications</i> in the <i>Component Tools Guide </i>for more information on the IObjectSafety interface.</p>
</BODY>
</HTML>

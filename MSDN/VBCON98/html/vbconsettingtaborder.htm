<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting the Tab Order</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconsettingtaborder"></a>Setting the Tab Order</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconSettingTabOrderC">
</object></p>
<p>
The <i>tab order</i> is the order in which a user moves from one control to another by pressing the TAB key. Each form has its own tab order. Usually, the tab order is the same as the order in which you created the controls.</p>
<p>
For example, assume you create two text boxes, Text1 and Text2, and then a command button, Command1. When the application starts, Text1 has the focus. Pressing TAB moves the focus between controls in the order they were created, as shown in Figure 3.20.</p>
<p class=label>
<b>Figure 3.20&nbsp;&nbsp;&nbsp;Tab example</b></p>
<p>
<img src="avp03020.gif" border=0></p>
<p>
To change the tab order for a control, set the TabIndex property. The TabIndex property of a control determines where it is positioned in the tab order. By default, the first control drawn has a TabIndex value of 0, the second has a TabIndex of 1, and so on. When you change a control's tab order position, Visual Basic automatically renumbers the tab order positions of the other controls to reflect insertions and deletions. For example, if you make Command1 first in the tab order, the TabIndex values for the other controls are automatically adjusted upward, as shown in the following table.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b><br>
Control</b></td>
<td class=label width=39%><b>TabIndex before it is changed</b></td>
<td class=label width=39%><b>TabIndex after it is changed</b></td>
</tr>
<tr valign=top>
<td width=22%>Text1</td>
<td width=39%>0</td>
<td width=39%>1</td>
</tr>
<tr valign=top>
<td width=22%>Text2</td>
<td width=39%>1</td>
<td width=39%>2</td>
</tr>
<tr valign=top>
<td width=22%>Command1</td>
<td width=39%>2</td>
<td width=39%>0</td>
</tr>
</table><br>
<p>
The highest TabIndex setting is always one less than the number of controls in the tab order (because numbering starts at 0). Even if you set the TabIndex property to a number higher than the number of controls, Visual Basic converts the value back to the number of controls minus 1.</p>
<p class=indent>
<b><B>Note</B>&nbsp;&nbsp;&nbsp;</b>Controls that cannot get the focus, as well as disabled and invisible controls, don't have a TabIndex property and are not included in the tab order. As a user presses the TAB key, these controls are skipped.</p>
<h2>Removing a Control from the Tab Order</h2>
<p>
Usually, pressing TAB at run time selects each control in the tab order. You can remove a control from the tab order by setting its TabStop property to False (0).</p>
<p>
A control whose TabStop property has been set to False still maintains its position in the actual tab order, even though the control is skipped when you cycle through the controls with the TAB key.</p>
<p class=indent>
<b><B>Note</B>&nbsp;&nbsp;&nbsp;</b>An option button group has a single tab stop. The selected button (that is, the button with its Value set to True) has its TabStop property automatically set to True, while the other buttons have their TabStop property set to False.</p>
</BODY>
</HTML>

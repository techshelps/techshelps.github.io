<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>List Box Control Scenario 2: Creating Multiple-Column List Boxes</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlistboxcontrolscenario2creatingmultiplecolumnlistboxes"></a>List Box Control Scenario 2: Creating Multiple-Column List Boxes</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconListBoxControlScenario2CreatingMultipleColumnListBoxesC">
</object></p>
<p>
To create a multiple-column, multiple-selection list box, you need to set both the Columns and the MultiSelect properties of a list box. In the following example, these properties are used to create such a list box.</p>
<p>
You'll notice that when you run the application, the list box contains two columns, as shown in Figure 7.37.</p>
<p class=label>
<b>Figure 7.37&nbsp;&nbsp;&nbsp;Multiple-column list box</b></p>
<p>
<img src="avp07051.gif" border=0></p>
<p>
If you draw the list box large enough to hold all the items in one column, the second column will be empty; the other items will wrap, and horizontal scroll bars will appear automatically only if the list box is not long enough. Try resizing the top list box and adding additional list items to see how Visual Basic automatically handles multiple columns.</p>
<p>
The example uses the Selected property — a Boolean array containing the selection status of a list box — to determine which items are selected. Each entry in the array corresponds to a list item and is set to True if the item is selected, or False if it is not selected. After the user selects items from the list, each array entry is checked to see if it is set (True). If so, the entry is added to the second list, a normal single-column list box, using the AddItem method.</p>
<p>
Set the properties for the example as indicated in the following table.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Object</b></td>
<td class=label width=34%><b>Property</b></td>
<td class=label width=35%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=31%>Form</td>
<td width=34%>Caption</td>
<td width=35%>Multiple-Column List Box</td>
</tr>
<tr valign=top>
<td width=31%>Top list box</td>
<td width=34%>Name<br>
Columns<br>
MultiSelect</td>
<td width=35%>lstTop<br>
2<br>
2-Extended</td>
</tr>
<tr valign=top>
<td width=31%>Bottom list box</td>
<td width=34%>Name</td>
<td width=35%>lstBottom</td>
</tr>
<tr valign=top>
<td width=31%>First command button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>cmdTransfer<br>
&amp;Transfer</td>
</tr>
<tr valign=top>
<td width=31%>Second command button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>cmdClear<br>
&amp;Clear</td>
</tr>
<tr valign=top>
<td width=31%>Third command button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>cmdClose<br>
&amp;Close</td>
</tr>
</table><br>
<p>
The MultiSelect property allows you to select a range of values in a list box. If you click the first list item, and then press SHIFT and click the last item in the range (or use the SHIFT+ DOWN ARROW keys), all the items in the range are selected.</p>
<h2>Events in the Multiple-Column List Box Application</h2>
<p>
Add code to the Form_Load procedure to initialize the top list, 1stTop:</p>
<pre><code>Private Sub Form_Load ()
   lstTop.AddItem "Paris"
   lstTop.AddItem "New Orleans"
   lstTop.AddItem "San Francisco"
   lstTop.AddItem "Chicago"
   lstTop.AddItem "Seattle"
   lstTop.AddItem "Toronto"
   lstTop.AddItem "New York"
   lstTop.AddItem "Tbilisi"
   lstTop.AddItem "Moscow"
   lstTop.AddItem "Portland"
   ' Select a couple of items.
   1stTop.Selected(0) = True
   1stTop.Selected(1) = True
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can add items to list boxes without repeatedly using the AddItem method by typing items in the List property of the Properties window. After entering each item, press CTRL+ENTER to go to the next line. This allows you to type multiple entries in a multiple-column list box.</p>
<p>
Add the following code to the 1stTop_DblClick event procedure:</p>
<pre><code>Private Sub 1stTop_DblClick ()
   cmdTransfer.Value = True   ' Press transfer button.
End Sub
</code></pre>
<p>
Add the following code to the Click event procedure for the Transfer command button:</p>
<pre><code>Private Sub cmdTransfer_Click ()
   For n = 0 To (lstTop.ListCount - 1)
' If selected, add to list.
      If lstTop.Selected(n) = True Then
         lstBottom.AddItem lstTop.List(n)
      End If
   Next
   cmdClear.Enabled = True
End Sub
</code></pre>
<p>
Notice how the array index values start from 0 and go to <code>ListCount -1</code>.</p>
<p>
Add the following code to the Click event procedure for the Clear command button:</p>
<pre><code>Private Sub cmdClear_Click ()
   lstBottom.Clear
   cmdClear.Enabled = False
End Sub
</code></pre>
<p>
Add the following code to the Click event procedure for the Close command button.</p>
<pre><code>Private Sub cmdClose_Click ()
   Unload Me
End Sub
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Manipulating the IDE with Add-Ins</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmanipulatingidewithaddins"></a>Manipulating the IDE with Add-Ins</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconManipulatingIDEWithAddInsC">
</object></p>
<p>
Several objects in the extensibility object model allow you to manipulate and extend the Visual Basic IDE. The code in this topic illustrates a few examples.</p>
<h2>Commandbars Collection and CommandBar Object</h2>
<p>
These allow you to manipulate command bars, which are a meld of toolbars and menu bars. You can do nearly anything to a CommandBar object, including creating new ones, deleting existing ones, and changing their size, location, and icons.</p>
<p>
Here is an example of how to manipulate command bars:</p>
<pre><code>Dim mcbMenuCommandBar As Office.CommandBarControl

' Make sure the Standard toolbar is visible.
gVBInstance.CommandBars("Standard").Visible = True
' Add as button to the Standard toolbar.
' This adds the button to the right of the Toolbox 
' button.
Set mcbMenuCommandBar = _
gVBInstance.CommandBars("Standard").Controls.Add _
(1, , , gVBInstance.CommandBars("Standard") _
.Controls.Count)
' Set the caption of the button.
mcbMenuCommandBar.Caption = "My Test"
' Copy an icon to the clipboard.
Clipboard.SetData LoadPicture("c:\windows\circles.bmp")
' Paste the icon on the button.
mcbMenuCommandBar.PasteFace

' Handle the CommandBarEvents object.
Set Me.MenuHandler = _
gVBInstance.Events.CommandBarEvents _
(mcbMenucommandBar)
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For additional information on using CommandBars, see Chapter 4, "Creating a Toolbar Button for Add-In Activation."</p>
<h2>Windows Collection and Window Object</h2>
<p>
These allow you to create and delete windows, as well as move and size windows open in the IDE. All windows are contained in the Windows collection. This means that these windows are never really closed, but rather their visibility is altered with the Visible property.</p>
<p>
Note that while you can use the Window object to manipulate a window frame itself, you cannot use it to manipulate the objects contained in a window (such as controls). To do that, you must reference the appropriate object.</p>
<p>
The following code fragment demonstrates how to reference the Window object and Windows collection:</p>
<pre><code>' Toggle window visibility. Assumes ordering of 
' windows in lists matches ordering of windows in 
' collection. A better method is to look up window by 
' caption and type.
Private Sub cmdToggle_Click()
   Dim w As Window
   Dim sw As String

   sw = Combo1.Text
   If sw &lt;&gt; "" Then
      If sw = "MainWindow" Then
         Set w = vbi.MainWindow
      Else
         Set w = vbi.Windows(Combo1.ListIndex)
      End If
      w.Visible = Not w.Visible
      RefreshWindows
   End If
End Sub
</code></pre>
<h2>LinkedWindows Collection</h2>
<p>
This contains all of the panes in a given LinkedWindowFrame. A "linked window" is defined as two or more windows which are docked together into a single, joint window surrounded by a frame known as a "LinkedWindowFrame." Each sub-window in the LinkedWindowFrame is known as a "pane". LinkedWindowFrames exist around all windows that can be linked or docked together, with the exception of code windows, designer windows, the Object Browser window, and the Search and Replace window.</p>
<p>
If you remove all panes from a LinkedWindowFrame, it is deleted. (The sole exception is the Main window.)</p>
<p>
Only windows of type LinkedWindowFrame have a LinkedWindows collection. For other window types, this collection is <b>Nothing</b>.</p>
<p>
The code fragment below demonstrates how to reference the LinkedWindows collection:</p>
<pre><code>' Unlink or undock window if it is linked or docked.
Private Sub cmdUnlinkWindow_Click()
   Dim w As Window
   Dim sw As String

   sw = Combo1.Text
   If sw = "" Then Exit Sub
   If sw = "MainWindow" Then
      Set w = vbi.Windows.MainWindow
   Else
      Set w = vbi.Windows(Combo1.ListIndex)
   End If
   If Not w.LinkedWindowFrame Is Nothing Then
      w.LinkedWindowFrame.LinkedWindows.Remove w
   End If
   RefreshWindows
End Sub
</code></pre>
<h2>CodePane Object</h2>
<p>
This is a window provided by an object which visually displays the object's code. You cannot create or destroy CodePane objects in the IDE, but you can manipulate their height, width, and location. You can also insert or delete lines of code (using the InsertLines and DeleteLine methods), as well as select certain lines and make the highlight visible or not. You can use the GetSelection method to copy selected code into the Windows clipboard.</p>
<p>
While the CodePane object allows you to visually examine or select existing code, it doesn't allow you to alter it. To do this, you must use the CodeModule object, as described in "Manipulating Code with Add-Ins" in this chapter.</p>
<p>
The following code fragment demonstrates how to reference the CodePane object:</p>
<pre><code>' Scroll codepane using scrollbar.
Private Sub sclCodePane_Change()
   Dim p As VBProject
   Dim c As VBComponent
   Dim cp As CodePane
   Dim sc As String
   Dim sp As String

   sp = cmbProj.Text
   sc = cmbComp.Text
   If sp &lt;&gt; "" And sc &lt;&gt; "" Then
      Set c = _
         vbi.VBProjects.Item(sp). _
         VBComponents.Item(sc)
      Set cp = c.CodeModule.CodePane
      cp.TopLine = sclCodePane.Value + 1
   End If
End Sub
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Basics of Working with Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconthebasicsofworkingwithobjects"></a>The Basics of Working with Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheBasicsOfWorkingWithObjectsC">
</object></p>
<p>
Visual Basic objects support properties, methods, and events. In Visual Basic, an object's data (settings or attributes) are called properties, while the various procedures that can operate on the object are called its methods. An event is an action recognized by an object, such as clicking a mouse or pressing a key, and you can write code to respond to that event.</p>
<p>
You can change an object's characteristics by changing its properties. Consider a radio: One property of a radio is its volume. In Visual Basic, you might say that a radio has a "Volume" property that you can adjust by changing its value. Assume you can set the volume of the radio from 0 to 10. If you could control a radio with Visual Basic, you might write code in a procedure that changes the value of the "Volume" property from 3 to 5 to make the radio play louder:</p>
<pre><code>Radio.Volume = 5
</code></pre>
<p>
In addition to properties, objects have methods. Methods are a part of objects just as properties are. Generally, methods are actions you want to perform, while properties are the attributes you set or retrieve. For example, you dial a telephone to make a call. You might say that telephones have a "Dial" method, and you could use this syntax to dial the seven-digit number 5551111:</p>
<pre><code>Phone.Dial 5551111
</code></pre>
<p>
Objects also have events. Events are triggered when some aspect of the object is changed. For example, a radio might have a "VolumeChange" event. A telephone might have a "Ring" event.</p>
<h2>Controlling Objects with Their Properties</h2>
<p>
Individual properties vary as to when you can set or get their values. Some properties can be set at design time. You can use the Properties window to set the value of these properties without writing any code at all. Some properties are not available at design time; therefore, you must write code to set those properties at run time.</p>
<p>
Properties that you can set and get at run time are called <i>read-write properties</i>. Properties you can only read at run time are called <i>read-only properties</i>.</p>
<h2>Setting Property Values</h2>
<p>
You set the value of a property when you want to change the appearance or behavior of an object. For example, you change the Text property of a text box control to change the contents of the text box. </p>
<p>
To set the value of a property, use the following syntax:</p>
<p>
<i>object.property</i> = <i>expression</i></p>
<p>
The following statements demonstrate how you set properties:</p>
<pre><code>Text1.Top = 200   ' Sets the Top property to 200 twips.
Text1.Visible = True            ' Displays the text box.
Text1.Text = "hello"   ' Displays 'hello' in the text 
                     ' box.
</code></pre>
<h2>Getting Property Values</h2>
<p>
You get the value of a property when you want to find the state of an object before your code performs additional actions (such as assigning the value to another object). For example, you can return the Text property of a text box control to determine the contents of the text box before running code that might change the value.</p>
<p>
In most cases, to get the value of a property, you use the following syntax:</p>
<p>
<i>variable</i> = <i>object.property</i></p>
<p>
You can also get a property value as part of a more complex expression, without assigning the property to a variable. In the following code example, the Top property of the new member of a control array is calculated as the Top property of the previous member, plus 400:</p>
<pre><code>Private Sub cmdAdd_Click()
   ' [statements]
   optButton(n).Top = optButton(n-1).Top + 400
   ' [statements]
End Sub
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you're going to use the value of a property more than once, your code will run faster if you store the value in a variable.</p>
<h2>Performing Actions with Methods</h2>
<p>
Methods can affect the values of properties. For example, in the radio analogy, the SetVolume method changes the Volume property. Similarly, in Visual Basic, list boxes have a List property, which can be changed with the Clear and AddItem methods.</p>
<h2>Using Methods in Code</h2>
<p>
When you use a method in code, how you write the statement depends on how many arguments the method requires, and whether the method returns a value. When a method doesn't take arguments, you write the code using the following syntax:</p>
<p>
<i>object.method</i></p>
<p>
In this example, the Refresh method repaints the picture box:</p>
<pre><code>Picture1.Refresh   ' Forces a repaint of the control.
</code></pre>
<p>
Some methods, such as the Refresh method, don't have arguments and don't return values.</p>
<p>
If the method takes more than one argument, you separate the arguments with a comma. For example, the Circle method uses arguments specifying the location, radius, and color of a circle on a form:</p>
<pre><code>' Draw a blue circle with a 1200-twip radius.
Form1.Circle (1600, 1800), 1200, vbBlue
</code></pre>
<p>
If you keep the return value of a method, you must enclose the arguments in parentheses. For example, the GetData method returns a picture from the Clipboard:</p>
<pre><code>Picture = Clipboard.GetData (vbCFBitmap)
</code></pre>
<p>
If there is no return value, the arguments appear without parentheses. For example, the AddItem method doesn't return a value:</p>
<pre><code>List1.AddItem "yourname"      ' Adds the text 'yourname' 
                           ' to a list box.
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See the <i>Language Reference</i> for the syntax and arguments for all methods provided by Visual Basic.</p>
</BODY>
</HTML>

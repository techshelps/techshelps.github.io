<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Code Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcodecomponents"></a>Code Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCodeComponentsC">
</object></p>
<p>
<i>Code components</i> are like libraries of objects. A client application uses a code component by creating an object from one of the classes the component provides, and invoking the object’s properties, methods, and events.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In earlier documentation, code components were referred to as OLE Automation servers.</p>
<p>
You might create a code component that provides extended financial functions for spreadsheet users, or you might encapsulate business rules used by your organization, so that all applications process the same data consistently.</p>
<p>
With Visual Basic, you can build code components to run in process, allowing faster access to their objects, or out of process, so that they have separate threads of execution from their clients.</p>
<p>
You can use code components to provide standard libraries of modal and modeless dialogs — although frequently a code component will have no user interface.</p>
<p>
Visual Basic allows you to suppress all forms of user interaction, even system alert messages, and to record such events in the system log. This unattended execution capability is extremely useful for code components designed to run on remote computers.</p>
<p>
In an out-of-process code component that has been designed for unattended execution, you can mark a class as multithreaded. Each object created from such a class can be on a separate thread of execution within the out-of-process component.</p>
<p>
To simplify the creation of reusable code libraries that can also be used with desktop tools (such as the Microsoft Office suite), Visual Basic allows you to mark objects in a code component as global, so that their methods can be invoked without explicitly creating an instance of the global object.</p>
<p>
Whatever you used to call them, it’s a whole new ball game.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;A step-by-step introduction to in-process code components, including in-process debugging, can be found in "Creating an ActiveX DLL." "Creating an ActiveX Exe Component" gives a similar introduction to the creation and debugging of out-of-process code components. Advanced topics are covered in "Building Code Components." Topics of general interest to component designers can be found in "General Principles of Component Design" and "Debugging, Testing, and Deploying Components."</p>
</BODY>
</HTML>

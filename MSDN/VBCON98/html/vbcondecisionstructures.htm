<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Decision Structures</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondecisionstructures"></a>Decision Structures</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDecisionStructuresC">
</object></p>
<p>
Visual Basic procedures can test conditions and then, depending on the results of that test, perform different operations. The decision structures that Visual Basic supports include:
<ul type=disc>
<li>
If...Then<br><br></li>
<li>
If...Then...Else<br><br></li>
<li>
Select Case</li>
</ul>
<h2>If...Then</h2>
<p>
Use an If...Then structure to execute one or more statements conditionally. You can use either a single-line syntax or a multiple-line <i>block</i> syntax:</p>
<p>
<b>If </b><i>condition</i> <b>Then</b> <i>statement</i></p>
<p>
<b>If</b> <i>condition</i> <b>Then</b><br>
<i>statements</i></p>
<p>
<b>End If</b></p>
<p>
The <i>condition</i> is usually a comparison, but it can be any expression that evaluates to a numeric value. Visual Basic interprets this value as True or False; a zero numeric value is False, and any nonzero numeric value is considered True. If <i>condition</i> is True, Visual Basic executes all the <i>statements</i> following the Then keyword. You can use either single-line or multiple-line syntax to execute just one statement conditionally (these two examples are equivalent):</p>
<pre><code>If anyDate &lt; Now Then anyDate = Now

If anyDate &lt; Now Then
   anyDate = Now
End If
</code></pre>
<p>
Notice that the single-line form of If...Then does not use an End If statement. If you want to execute more than one line of code when <i>condition</i> is True, you must use the multiple-line block If...Then...End If syntax.</p>
<pre><code>If anyDate &lt; Now Then
   anyDate = Now
   Timer1.Enabled = False      ' Disable timer control.
End If
</code></pre>
<h2>If...Then...Else</h2>
<p>
Use an If...Then...Else block to define several blocks of statements, one of which will execute:</p>
<p>
<b>If </b><i>condition1</i> <b>Then</b><br>
[<i>statementblock-1</i>]<br>
[<b>ElseIf</b> <i>condition2</i> <b>Then</b><br>
[<i>statementblock-2</i>]] ...<br>
[<b>Else</b><br>
[<i>statementblock-n</i>]]</p>
<p>
<b>End If</b></p>
<p>
Visual Basic first tests <i>condition1</i>. If it's False, Visual Basic proceeds to test <i>condition2</i>, and so on, until it finds a True condition. When it finds a True condition, Visual Basic executes the corresponding statement block and then executes the code following the End If. As an option, you can include an Else statement block, which Visual Basic executes if none of the conditions are True.</p>
<p>
If...Then…ElseIf is really just a special case of If...Then...Else. Notice that you can have any number of ElseIf clauses, or none at all. You can include an Else clause regardless of whether you have ElseIf clauses.</p>
<p>
For example, your application could perform different actions depending on which control in a menu control array was clicked:</p>
<pre><code>Private Sub mnuCut_Click (Index As Integer)
   If Index = 0 Then            ' Cut command.
      CopyActiveControl         ' Call general procedures.
      ClearActiveControl
   ElseIf Index = 1 Then      ' Copy command.
      CopyActiveControl
   ElseIf Index = 2 Then      ' Clear command.
      ClearActiveControl
   Else                        ' Paste command.
      PasteActiveControl
   End If
End Sub
</code></pre>
<p>
Notice that you can always add more ElseIf parts to your If...Then structure. However, this syntax can get tedious to write when each ElseIf compares the same expression to a different value. For this situation, you can use a Select Case decision structure.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "If...Then...Else Statement" in the <i>Language Reference</i>.</p>
<h2>Select Case</h2>
<p>
Visual Basic provides the Select Case structure as an alternative to If...Then...Else for selectively executing one block of statements from among multiple blocks of statements. A Select Case statement provides capability similar to the If...Then...Else statement, but it makes code more readable when there are several choices.</p>
<p>
A Select Case structure works with a single test expression that is evaluated once, at the top of the structure. Visual Basic then compares the result of this expression with the values for each Case in the structure. If there is a match, it executes the block of statements associated with that Case:</p>
<p>
<b>Select Case </b><i>testexpression</i><br>
[<b>Case</b> <i>expressionlist1</i><br>
[<i>statementblock-1</i>]]<br>
[<b>Case</b> <i>expressionlist2</i><br>
[<i>statementblock-2</i>]]<br>
.<br>
.<br>
.<br>
[<b>Case Else</b><br>
[<i>statementblock-n</i>]]</p>
<p>
<b>End Select</b></p>
<p>
Each <i>expressionlist</i> is a list of one or more values. If there is more than one value in a single list, the values are separated by commas. Each <i>statementblock</i> contains zero or more statements. If more than one Case matches the test expression, only the statement block associated with the first matching Case will execute. Visual Basic executes statements in the Case Else clause (which is optional) if none of the values in the expression lists matches the test expression.</p>
<p>
For example, suppose you added another command to the Edit menu in the If...Then...Else example. You could add another ElseIf clause, or you could write the function with Select Case:</p>
<pre><code>Private Sub mnuCut_Click (Index As Integer)
   Select Case Index
      Case 0                  ' Cut command.
         CopyActiveControl      ' Call general procedures.
         ClearActiveControl
      Case 1                  ' Copy command.
         CopyActiveControl
      Case 2                  ' Clear command.
         ClearActiveControl
      Case 3                  ' Paste command.
         PasteActiveControl
      Case Else
         frmFind.Show         ' Show Find dialog box.
   End Select
End Sub
</code></pre>
<p>
Notice that the Select Case structure evaluates an expression once at the top of the structure. In contrast, the If...Then...Else structure can evaluate a different expression for each ElseIf statement. You can replace an If...Then...Else structure with a Select Case structure only if the If statement and each ElseIf statement evaluates the same expression.</p>
</BODY>
</HTML>

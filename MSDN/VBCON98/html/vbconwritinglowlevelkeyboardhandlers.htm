<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing Low-Level Keyboard Handlers</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconwritinglowlevelkeyboardhandlers"></a>Writing Low-Level Keyboard Handlers</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconWritingLowLevelKeyboardHandlersC">
</object></p>
<p>
Visual Basic provides three events that are recognized by forms and by any control that accepts keyboard input. They are described in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Keyboard event</b></td>
<td class=label width=70%><b>Occurs</b></td>
</tr>
<tr valign=top>
<td width=30%>KeyPress</td>
<td width=70%>When a key corresponding to an ASCII character is pressed</td>
</tr>
<tr valign=top>
<td width=30%>KeyDown</td>
<td width=70%>As any key on the keyboard is pressed</td>
</tr>
<tr valign=top>
<td width=30%>KeyUp</td>
<td width=70%>As any key on the keyboard is released</td>
</tr>
</table><br>
<p>
Only the object that has the focus can receive a keyboard event. For keyboard events, a form has the focus only if it is active and no control on that form has the focus. This happens only on blank forms and forms on which all controls have been disabled. However, if you set the KeyPreview property on a form to True, the form receives all keyboard events for every control on the form before the control recognizes them. This is extremely useful when you want to perform the same action whenever a certain key is pressed, regardless of which control has the focus at the time.</p>
<p>
The KeyDown and KeyUp events provide the lowest level of keyboard response. Use these events to detect a condition that the KeyPress event is unable to detect, for instance:
<ul type=disc>
<li>
Special combinations of SHIFT, CTRL, and ALT keys.<br><br></li>
<li>
Arrow keys. Note that some controls (command buttons, option buttons, and check boxes) do not receive arrow-key events: Instead, arrow keys cause movement to another control.<br><br></li>
<li>
PAGEUP and PAGEDOWN.<br><br></li>
<li>
Distinguishing the numeric keypad from numbers on the typewriter keys.<br><br></li>
<li>
Responding to a key being released as well as pressed (KeyPress responds only to a key being pressed).<br><br></li>
<li>
Function keys not attached to menu commands.</li>
</ul>
<p>
The keyboard events are not mutually exclusive. When the user presses a key, both the KeyDown and KeyPress events are generated, followed by a KeyUp event when the user releases the key. When the user presses one of the keys that KeyPress does not detect, only a KeyDown event occurs, followed by a KeyUp event.</p>
<p>
Before using the KeyUp and KeyDown events, make sure that the KeyPress event isn't sufficient. This event detects keys that correspond to all the standard ASCII characters: letters, digits, and punctuation on a standard keyboard, as well as the ENTER, TAB, and BACKSPACE keys. It's generally easier to write code for the KeyPress event.</p>
<p>
You also should consider using shortcut and access keys, which are described in "Menu Basics" in "Forms, Controls, and Menus." Shortcut keys must be attached to menu commands, but they can include function keys (including some function-key – shift-key combinations). You can assign shortcut keys without writing additional code.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Windows ANSI (American National Standards Institute) character set corresponds to the 256 characters that include the standard Latin alphabet, publishing marks (such as copyright symbol, em dash, ellipsis), as well as many alternate and accented letters. These characters are represented by a unique 1-byte numeric value (0-255). ASCII (American Standard Code for Information Interchange) is essentially a subset (0-127) of the ANSI character set and represents the standard letters, digits, and punctuation on a standard keyboard. The two character sets are often referred to interchangeably.</p>
</BODY>
</HTML>

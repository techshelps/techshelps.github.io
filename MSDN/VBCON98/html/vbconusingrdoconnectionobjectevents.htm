<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using rdoConnection Object Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingrdoconnectionobjectevents"></a>Using rdoConnection Object Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingRdoConnectionObjectEventsC">
</object></p>
<p>
The rdoConnection object triggers a series of event procedures that can be used to make the job of managing connections and the queries associated with the connections easier. These events are triggered under the following conditions:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>rdoConnection events</b></td>
<td class=label width=66%><b>When fired</b></td>
</tr>
<tr valign=top>
<td width=34%>BeforeConnect</td>
<td width=66%>Before the call to the ODBC SQLDriverConnect function.</td>
</tr>
<tr valign=top>
<td width=34%>Connect</td>
<td width=66%>After the connection operation completes — successfully or not.</td>
</tr>
<tr valign=top>
<td width=34%>Disconnect</td>
<td width=66%>After the connection is disconnected.</td>
</tr>
<tr valign=top>
<td width=34%>QueryComplete</td>
<td width=66%>After an asynchronous query completes.</td>
</tr>
<tr valign=top>
<td width=34%>QueryTimeout</td>
<td width=66%>After any query's timeout period has exceeded the value of the rdoConnection object's QueryTimeout property.</td>
</tr>
<tr valign=top>
<td width=34%>WillExecute</td>
<td width=66%>Before RDO attempts to execute a query.</td>
</tr>
</table><br>
<p>
The QueryComplete, QueryTimeout, and WillExecute events fire for all queries executed on the associated rdoConnection. This includes those queries executed via the OpenResultset or Execute methods, as well as those executed from an associated rdoQuery object. The <b><i>Query</i></b> argument is an object reference indicating which query triggered the event. Using this argument, you can write a single event handler for all queries on the connection, but still customize the handler for specific queries. When executing queries against the rdoConnection object itself, RDO creates an rdoQuery object internally, and a reference to this internal rdoQuery is passed as the <b><i>Query</i></b> argument.</p>
<h2>Using the BeforeConnect Event Handler</h2>
<p>
The BeforeConnect event gives you the opportunity to alter the connect string being passed to the ODBC SQLDriverConnect function. Your code can add a workstation ID or other parameter that might not have been supplied earlier. By filtering the connect arguments, you can prevent users from browsing unauthorized data sources or user names.</p>
<h2>Using the Connect Event Handler</h2>
<p>
The Connect event permits your code to know when the connection operation has been completed for a specific connection object — that is, this event fires whether or not the connection operation succeeds. Each rdoConnection object can be declared to expose this event and all other connection-specific events.</p>
<p>
The Connect event is especially helpful in situations where connections can take awhile to connect — as in wide area networks. Using this event is recommended over polling the rdoConnection object's StillConnecting property when using the rdAsyncEnable option of the OpenConnection or EstablishConnection methods. If the connect operation fails to establish a connection, the <b><i>ErrorOccurred</i></b> argument is set to True. At this point your code needs to examine the rdoErrors collection to determine the cause of the failure.</p>
<h2>Using the QueryComplete Event Handler</h2>
<p>
When using asynchronous queries, you should always set up an event handler for the QueryComplete event that is fired when the query is complete. This event handler is established on a connection basis so all queries on the connection fire the same QueryComplete event.</p>
<p>
While most ODBC drivers do not support more than one operation at a time, some do, so your QueryComplete event handler needs to be cognizant of which query has completed. The QueryComplete event is passed an object reference to the rdoQuery, which can be examined to indicate the query's name or other properties. If the query fails to establish a connection, the <b><i>ErrorOccurred</i></b> argument is set to True. At this point your code needs to examine the rdoErrors collection to determine the cause of the failure.</p>
<h2>Using the QueryTimeout Event Handler</h2>
<p>
Not all queries complete immediately or even within a few minutes. However, unless you indicate the expected length of the query in seconds by setting the QueryTimeout property, the QueryTimeout event will fire after a set number of seconds; the default is 30 seconds. If your code passes False to the <b><i>Cancel</i></b> argument of the QueryTimeout event, RDO restarts the query timeout clock using the number of seconds in the QueryTimeout property. This feature can be especially useful when working with wide area networks that do not always execute queries in the same length of time.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The QueryTimeout property is passed to the ODBC drivers when a query is started, so changing the property has no effect until you start another query.</p>
<h2>Using the WillExecute Event Handler</h2>
<p>
This event is fired before the execution of a query, regardless of whether it is an action or row-returning query. You can trap this event to disallow the execution of certain queries, or to make last-minute adjustments to the SQL string.</p>
<p>
The <b><i>Cancel</i></b> argument lets you disallow the query. For example, you can prescreen the query to make sure it has enough in the WHERE clause to avoid a table scan. In addition, you might wish to prohibit users from searching for customers with the last name of "Smith" without also providing a first name or street address. The <b><i>Cancel</i></b> argument defaults to False, but if you set it to True, the query will not be executed and RDO generates a trappable error indicating that the query was canceled.</p>
<p>
An important aspect of this event is the ability to substitute or augment the operation with your own code. That is, you could execute your own set of operations including stored procedures to carry out the functions being performed. For example, if your remote database only permits updates through use of protected stored procedures, you can trap the WillExecute event to fire specific parameterized stored procedures to perform the update and use the <b><i>Cancel</i></b> argument to defeat the automatic operation being initiated.</p>
</BODY>
</HTML>

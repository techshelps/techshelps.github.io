<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding RemoteData Control Operations</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconunderstandingremotedatacontroloperations"></a>Understanding RemoteData Control Operations</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUnderstandingRemoteDataControlOperationsC">
</object></p>
<p>
Once your application begins, if sufficient properties have been set at design time, Visual Basic uses the RemoteData control to establish a connection to the ODBC data source. This creates an rdoConnection object by using the control's DataSourceName, UserName, Password, Options, CursorDriver, LoginTimeout, Prompt, and Connect properties. Notice that all of these properties are unique to the RemoteData Control, but are all exposed by the Data control using other properties as shown below:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>RemoteData Control Properties</b></td>
<td class=label width=50%><b>Data Control Property</b></td>
</tr>
<tr valign=top>
<td width=50%>Connect</td>
<td width=50%>Connect.</td>
</tr>
<tr valign=top>
<td width=50%>CursorDriver</td>
<td width=50%>(ODBCDirect only).</td>
</tr>
<tr valign=top>
<td width=50%>DataSourceName</td>
<td width=50%>DatabaseName.</td>
</tr>
<tr valign=top>
<td width=50%>LoginTimeout</td>
<td width=50%>Embedded in the Connect property's connect string.</td>
</tr>
<tr valign=top>
<td width=50%>Options </td>
<td width=50%>Options.</td>
</tr>
<tr valign=top>
<td width=50%>Password</td>
<td width=50%>Embedded in the Connect property's connect string.</td>
</tr>
<tr valign=top>
<td width=50%>Prompt</td>
<td width=50%>(ODBCDirect only).</td>
</tr>
<tr valign=top>
<td width=50%>UserName</td>
<td width=50%>Embedded in the Connect property's connect string.</td>
</tr>
</table><br>
<p>
If insufficient information is provided in the RemoteData control properties, the ODBC driver manager shows a dialog box to gather missing parameters, unless you have set the Prompt property to disable this dialog. If the user or your code does not provide sufficient parameters, a trappable error results.</p>
<p>
If the connection is established, the RemoteData control sets or resets the Environment, Connection, DataSourceName, Transactions, and Connect properties based on the values used to establish the connection.</p>
<p>
Once the connection is established, the RemoteData control immediately executes a query against the data source using the SQL, CursorDriver, Options, LockType, ErrorThreshold, and ResultsetType properties. This creates an rdoResultset object and sets the Resultset, ResultsetType, and Updatable properties. By default, a read-only, static rdoResultset is created. The StillExecuting property is set to True while the rdoResultset is created. If you choose to cancel the query, and the rdAsyncEnable option is set, you can use the Cancel method against the rdoResultset to terminate query processing.</p>
<p>
Once the first row of the rdoResultset is available, the StillExecuting property is set to False and the RemoteData control passes column data to each bound control requesting data. The rdoResultset object's EOF property returns False and the RowCount property is set to a nonzero value if any rows resulted from the query. If no data is returned by the rdoResultset, the RemoteData control’s behavior is determined by the EOFAction property. For example, if EOFAction is set to rdAddNew, the RemoteData control's Validation event fires on the current row, followed by an automatic AddNew, followed by a Reposition event on the new row.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Make sure that each bound control’s DataField property corresponds to the Name property of the rdoColumn object returned by the rdoResultset or an empty string (""). If it doesn't, a trappable error occurs.</p>
<p>
When you are using an Image or PictureBox control bound to an image-containing field in a RemoteData Control (RDC), and the RDC uses batch cursors (CursorDriver = rdUseClientBatch), be aware that the Image or PictureBox control doesn't display the image. To correctly display the image, either set the RDC's Options property to 128 (rdFetchLongColumns), or use a different cursor.</p>
<h2>Positioning the Current Row Pointer</h2>
<p>
Users can manipulate the RemoteData control with the mouse. They can move the current row pointer from row to row, or to the beginning or end of the rdoResultset by clicking the control. The RemoteData control doesn’t permit the user to move off either end of the rdoResultset using the mouse. You can’t set focus to the RemoteData control.</p>
<p>
Keep the following guidelines in mind when writing code that will reposition to the current row pointer:
<ul type=disc>
<li>
Before each reposition, the bound controls that have changed data are queried for new data for the current row. The Validate event is invoked, and if not canceled by the <b><i>action</i></b> argument, the data source is updated if the data changed.<br><br></li>
<li>
After the RemoteData control positions to a new row in the data source, column data is passed to the bound controls and the Reposition event is invoked.<br><br></li>
<li>
Once either end of the rdoResultset is reached, the RemoteData control’s behavior is determined by the EOFAction and BOFAction properties.<br><br></li>
<li>
You can use the MoreResults method against the rdoResultset to complete processing of the current result set and determine if additional result sets are available. If MoreResults returns True, the process of handling the rdoResultset is restarted — just as if a new query had been executed. The previous result set is no longer available.</li>
</ul>
</BODY>
</HTML>

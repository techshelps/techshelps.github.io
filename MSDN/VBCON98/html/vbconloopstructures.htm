<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Loop Structures</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconloopstructures"></a>Loop Structures</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconLoopStructuresC">
</object></p>
<p>
Loop structures allow you to execute one or more lines of code repetitively. The loop structures that Visual Basic supports include:
<ul type=disc>
<li>
Do...Loop<br><br></li>
<li>
For...Next<br><br></li>
<li>
For Each...Next</li>
</ul>
<h2>Do...Loop</h2>
<p>
Use a Do loop to execute a block of statements an indefinite number of times. There are several variations of the Do...Loop statement, but each evaluates a numeric condition to determine whether to continue execution. As with If...Then, the <i>condition</i> must be a value or expression that evaluates to False (zero) or to True (nonzero).</p>
<p>
In the following Do...Loop, the <i>statements</i> execute as long as the <i>condition</i> is True:</p>
<p>
<b>Do While </b><i>condition</i><br>
<i>statements</i></p>
<p>
<b>Loop</b></p>
<p>
When Visual Basic executes this Do loop, it first tests <i>condition</i>. If <i>condition</i> is False (zero), it skips past all the statements. If it's True (nonzero), Visual Basic executes the statements and then goes back to the Do While statement and tests the condition again.</p>
<p>
Consequently, the loop can execute any number of times, as long as <i>condition</i> is nonzero or True. The statements never execute if <i>condition</i> is initially False. For example, this procedure counts the occurrences of a target string within another string by looping as long as the target string is found:</p>
<pre><code>Function CountStrings (longstring, target)
   Dim position, count
   position = 1
   Do While InStr(position, longstring, target)
      position = InStr(position, longstring, target)_
       + 1
      count = count + 1
   Loop
   CountStrings = count
End Function
</code></pre>
<p>
If the target string doesn't occur in the other string, then InStr returns 0, and the loop doesn't execute.</p>
<p>
Another variation of the Do...Loop statement executes the statements first and then tests <i>condition</i> after each execution. This variation guarantees at least one execution of <i>statements</i>:</p>
<p>
<b>Do</b><br>
<i>statements</i></p>
<p>
<b>Loop While </b><i>condition</i></p>
<p>
Two other variations are analogous to the previous two, except that they loop as long as <i>condition</i> is False rather than True.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Loop zero or more times</b></td>
<td class=label width=52%><b>Loop at least once</b></td>
</tr>
<tr valign=top>
<td width=48%>Do Until <i>condition</i><br>
 &nbsp; <i>statements</i><br>
Loop</td>
<td width=52%>Do<br>
 &nbsp; <i>statements</i><br>
Loop Until <i>condition</i></td>
</tr>
</table><br>
<h2>For...Next</h2>
<p>
Do loops work well when you don't know how many times you need to execute the statements in the loop. When you know you must execute the statements a specific number of times, however, a For…Next loop is a better choice. Unlike a Do loop, a For loop uses a variable called a counter that increases or decreases in value during each repetition of the loop. The syntax is:</p>
<p>
<b>For </b><i>counter</i> = <i>start</i> <b>To</b> <i>end</i> [<b>Step</b> <i>increment</i>]<br>
<i>statements</i></p>
<p>
<b>Next</b> [<i>counter</i>]</p>
<p>
The arguments <i>counter</i>, <i>start</i>, <i>end</i>, and <i>increment</i> are all numeric.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The <i>increment</i> argument can be either positive or negative. If <i>increment</i> is positive, <i>start</i> must be less than or equal to <i>end</i> or the statements in the loop will not execute. If <i>increment</i> is negative, <i>start</i> must be greater than or equal to <i>end</i> for the body of the loop to execute. If Step isn't set, then <i>increment</i> defaults to 1.</p>
<p>
In executing the For loop, Visual Basic:
<ol>
<li>
Sets <i>counter</i> equal to <i>start</i>.<br><br></li>
<li>
Tests to see if <i>counter</i> is greater than <i>end</i>. If so, Visual Basic exits the loop.<p class=tl>
(If <i>increment</i> is negative, Visual Basic tests to see if <i>counter</i> is less than <i>end</i>.)</P></li>
<li>
Executes the <i>statements</i>.<br><br></li>
<li>
Increments <i>counter</i> by 1 or by <i>increment</i>, if it's specified. <br><br></li>
<li>
Repeats steps 2 through 4.</li>
</ol>
<p>
This code prints the names of all the available Screen fonts:</p>
<pre><code>Private Sub Form_Click ()
   Dim I As Integer
   For i = 0 To Screen.FontCount
      Print Screen.Fonts(i)
   Next
End Sub
</code></pre>
<p>
In the VCR sample application, the HighlightButton procedure uses a For...Next loop to step through the controls collection of the VCR form and show the appropriate Shape control:</p>
<pre><code>Sub HighlightButton(MyControl As Variant)
   Dim i As Integer
   For i = 0 To frmVCR.Controls.Count - 1
      If TypeOf frmVCR.Controls(i) Is Shape Then
         If frmVCR.Controls(i).Name = MyControl Then
            frmVCR.Controls(i).Visible = True
         Else
            frmVCR.Controls(i).Visible = False
         End If
      End If
   Next
End Sub
</code></pre>
<h2>For Each...Next</h2>
<p>
A For Each...Next loop is similar to a For...Next loop, but it repeats a group of statements for each element in a collection of objects or in an array instead of repeating the statements a specified number of times. This is especially helpful if you don't know how many elements are in a collection.</p>
<p>
Here is the syntax for the For Each...Next loop:</p>
<p>
<b>For Each</b> <i>element</i> <b>In</b> <i>group</i><br>
<i>statements</i></p>
<p>
<b>Next</b> <i>element</i></p>
<p>
For example, the following Sub procedure opens Biblio.mdb and adds the name of each table to a list box.</p>
<pre><code>Sub ListTableDefs()
   Dim objDb As Database
   Dim MyTableDef as TableDef
   Set objDb = OpenDatabase("c:\vb\biblio.mdb", _
   True, False)
   For Each MyTableDef In objDb.TableDefs()
      List1.AddItem MyTableDef.Name
   Next MyTableDef
End Sub
</code></pre>
<p>
Keep the following restrictions in mind when using For Each...Next:
<ul type=disc>
<li>
For collections, <i>element</i> can only be a Variant variable, a generic Object variable, or an object listed in the Object Browser.<br><br></li>
<li>
For arrays, <i>element</i> can only be a Variant variable.<br><br></li>
<li>
You cannot use For Each...Next with an array of user-defined types because a Variant cannot contain a user-defined type.</li>
</ul>
</BODY>
</HTML>

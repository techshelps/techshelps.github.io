<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How are Objects Related to Each Other?</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconhowareobjectsrelatedtoeachother"></a>How are Objects Related to Each Other?</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconHowAreObjectsRelatedToEachOtherC">
</object></p>
<p>
When you put two command buttons on a form, they are separate objects with distinct Name property settings (<i>Command1</i> and <i>Command2</i>), but they share the same class — CommandButton.</p>
<p>
They also share the characteristic that they're on the same form. You've seen earlier in this chapter that a control on a form is also contained by the form. This puts controls in a hierarchy. To reference a control you may have to reference the form first, in the same way you may have to dial a country code or area code before you can reach a particular phone number.</p>
<p>
The two command buttons also share the characteristic that they're controls. All controls have common characteristics that make them different from forms and other objects in the Visual Basic environment. The following sections explain how Visual Basic uses collections to group objects that are related.</p>
<h2>Object Hierarchies</h2>
<p>
An object hierarchy provides the organization that determines how objects are related to each other, and how you can access them. In most cases, you don't need to concern yourself with the Visual Basic object hierarchy. However:
<ul type=disc>
<li>
When manipulating another application's objects, you should be familiar with that application's object hierarchy. For information on navigating object hierarchies, see "Programming with Components."<br><br></li>
<li>
When working with data access objects, you should be familiar with the Data Access Object hierarchy.</li>
</ul>
<p>
There are some common cases in Visual Basic where one object contains others. These are described in the following sections.</p>
<h2>Working with Collections of Objects</h2>
<p>
Collection objects have their own properties and methods. The objects in a collection object are referred to as <i>members</i> of the collection. Each member of the collection is numbered sequentially beginning at 0; this is the member's <i>index number</i>. For example, the Controls collection contains all the controls on a given form, as shown in Figure 5.10. You can use collections to simplify code if you need to perform the same operation on all the objects in a collection.</p>
<p class=label>
<b>Figure 5.10&nbsp;&nbsp;&nbsp;Controls collection</b></p>
<p>
<img src="avp05021.gif" border=0></p>
<p>
For example, the following code scrolls through the Controls collection and lists each member's name in a list box.</p>
<pre><code>Dim MyControl as Control
For Each MyControl In Form1.Controls
   ' For each control, add its name to a list box.
   List1.AddItem MyControl.Name
Next MyControl
</code></pre>
<h3>Applying Properties and Methods to Collection Members</h3>
<p>
There are two general techniques you can use to address a member of a collection object:
<ul type=disc>
<li>
Specify the name of the member. The following expressions are equivalent:<pre><code>Controls("List1")
Controls!List1
</code></pre>
</li>
<li>
Use the index number of the member:<pre><code>Controls(3)
</code></pre>
</li>
</ul>
<p>
Once you're able to address all the members collectively, and single members individually, you can apply properties and methods using either approach:</p>
<pre><code>' Set the Top property of the list box control to 200.
Controls!List1.Top = 200</code></pre>
<p class=tl>
–or–</P><pre><code>Dim MyControl as Control
For Each MyControl In Form1.Controls()
   ' Set the Top property of each member to 200.
   MyControl.Top = 200 
Next MyControl
</code></pre>
<h2>Objects That Contain Other Objects</h2>
<p>
Some objects in Visual Basic contain other objects. For example, a form usually contains one or more controls. The advantage of having objects as containers for other objects is that you can refer to the container in your code to make it clear which object you want to use. For example, Figure 5.11 illustrates two different forms you could have in an application — one for entering accounts payable transactions, and the other for entering accounts receivable transactions.</p>
<p class=label>
<b>Figure 5.11&nbsp;&nbsp;&nbsp;Two different forms can contain controls that have the same name</b></p>
<p>
<img src="avp05022.gif" border=0></p>
<p>
Both forms can have a list box named lstAcctNo. You can specify exactly which one you want to use by referring to the form containing the list box:</p>
<pre><code>frmReceivable.lstAcctNo.AddItem 1201</code></pre>
<p class=tl>
–or–</P><pre><code>frmPayable.lstAcctNo.AddItem 1201
</code></pre>
<h2>Common Collections in Visual Basic</h2>
<p>
There are some common cases in Visual Basic where one object contains other objects. The following table briefly describes the most commonly used collections in Visual Basic.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>Collection</b></td>
<td class=label width=73%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=27%>Forms</td>
<td width=73%>Contains loaded forms.</td>
</tr>
<tr valign=top>
<td width=27%>Controls</td>
<td width=73%>Contains controls on a form.</td>
</tr>
<tr valign=top>
<td width=27%>Printers</td>
<td width=73%>Contains the available Printer objects.</td>
</tr>
</table><br>
<p>
You can also implement object containment in Visual Basic.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"For information about object containment, see "Using Collections" in "More About Programming." For information on the Printers collection, see "Working with Text and Graphics." For details on the forms and controls collections, see the <i>Language Reference</i>.</p>
<h2>The Container Property</h2>
<p>
You can use the Container property to change an object's container within a form. The following controls can contain other controls:
<ul type=disc>
<li>
Frame control<br><br></li>
<li>
Picture box control<br><br></li>
<li>
Toolbar control (Professional and Enterprise editions only)</li>
</ul>
<p>
This example demonstrates moving a command button around from container to container on a form. Open a new project, and draw a frame control, picture box control and a command button on the form.</p>
<p>
The following code in the form's click event increments a counter variable, and uses a Select Case loop to rotate the command button from container to container.</p>
<pre><code>Private Sub Form_Click()
   Static intX as Integer
   Select Case intX
      Case 0
      Set Command1.Container = Picture1
      Command1.Top= 0
      Command1.Left= 0

      Case 1
      Set Command1.Container = Frame1
      Command1.Top= 0
      Command1.Left= 0

      Case 2
      Set Command1.Container = Form1
      Command1.Top= 0
      Command1.Left= 0

   End Select
   intX = intX + 1
End Sub
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Container Property" in the <i>Language Reference</i>.</p>
<h2>Communicating Between Objects</h2>
<p>
In addition to using and creating objects within Visual Basic, you can communicate with other applications and manipulate their objects from within your application. The ability to share data between applications is one of the key features of the Microsoft Windows operating system. With Visual Basic, you have great flexibility in how you can communicate with other applications.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For details on using and communicating with other applications' objects, see "Programming with Components."</p>
</BODY>
</HTML>

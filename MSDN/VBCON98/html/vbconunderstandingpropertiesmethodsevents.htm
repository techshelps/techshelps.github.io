<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding Properties, Methods and Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconunderstandingpropertiesmethodsevents"></a>Understanding Properties, Methods and Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUnderstandingPropertiesMethodsEventsC">
</object></p>
<p>
Visual Basic forms and controls are objects which expose their own properties, methods and events. Properties can be thought of as an object's attributes, methods as its actions, and events as its responses.</p>
<p>
An everyday object like a child's helium balloon also has properties, methods and events. A balloon's properties include visible attributes such as its height, diameter and color. Other properties describe its state (inflated or not inflated), or attributes that aren't visible such as its age. By definition, all balloons have these properties; the settings of these properties may differ from one balloon to another.</p>
<p>
A balloon also has inherent methods or actions that it might perform. It has an inflate method (the action of filling it with helium), a deflate method (expelling its contents) and a rise method (if you were to let go of it). Again, all balloons are capable of these methods.</p>
<p>
Balloons also have predefined responses to certain external events. For instance, a balloon would respond to the event of being punctured by deflating itself, or to the event of being released by rising into the air.</p>
<p class=label>
<b>Figure 3.1&nbsp;&nbsp;&nbsp;Objects have properties, respond to events, and perform methods</b></p>
<p>
<img src="avp03025.gif" border=0></p>
<p>
If you were able to program a balloon, the Visual Basic code might look like the following. To set the balloon's properties:</p>
<pre><code>Balloon.Color = Red
Balloon.Diameter = 10
Balloon.Inflated = True
</code></pre>
<p>
Note the syntax of the code — the object (Balloon) followed by the property (.Color) followed by the assignment of the value (Red). You could change the color of the balloon from code by repeating this statement and substituting a different value. Properties can also be set in the Properties window while you are designing your application.</p>
<p>
A balloon's methods are invoked like this:</p>
<pre><code>Balloon.Inflate
Balloon.Deflate
Balloon.Rise 5
</code></pre>
<p>
The syntax is similar to the property — the object (a noun) followed by the method (a verb). In the third example, there is an additional item, called an <i>argument</i>, which denotes the distance to rise. Some methods will have one or more arguments to further describe the action to be performed.</p>
<p>
The balloon might respond to an event as follows:</p>
<pre><code>Sub Balloon_Puncture()
   Balloon.Deflate
   Balloon.MakeNoise "Bang"
   Balloon.Inflated = False
   Balloon.Diameter = 1
End Sub
</code></pre>
<p>
In this case, the code describes the balloon's behavior when a puncture event occurs: invoke the Deflate method, then invoke the MakeNoise method with an argument of "Bang" (the type of noise to make). Since the balloon is no longer inflated, the Inflated property is set to False and the Diameter property is set to a new value.</p>
<p>
While you can't actually program a balloon, you can program a Visual Basic form or control. As the programmer, you are in control. You decide which properties should be changed, methods invoked or events responded to in order to achieve the desired appearance and behavior.</p>
</BODY>
</HTML>

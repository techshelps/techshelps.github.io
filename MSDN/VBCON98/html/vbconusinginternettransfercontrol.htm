<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Internet Transfer Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusinginternettransfercontrol"></a>Using the Internet Transfer Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingInternetTransferControlC">
</object></p>
<p>
The Internet Transfer control implements two widely-used Internet protocols: the HyperText Transfer Protocol (HTTP) and the File Transfer Protocol (FTP). Using the Internet Transfer control, you can connect to any site that uses one of these protocols, and retrieve files using either the OpenURL or Execute method.</p>
<h2>Possible Uses</h2>
<ul type=disc>
<li>
To add an FTP browser to any application.<br><br></li>
<li>
To create an application that automatically downloads files from a public FTP site.<br><br></li>
<li>
To parse a World Wide Web site for graphics references and download the graphics only.<br><br></li>
<li>
To present a custom display of dynamic data retrieved from a Web page.</li>
</ul>
<h2>Basic Operation</h2>
<p>
The functionality of the Internet Transfer control depends on the protocol you wish to use. Because the two supported protocols work differently, the operations you can perform depend on which protocol you are using. For example, the GetHeader method only works with HTTP (HTML documents).</p>
<p>
However, there are a few procedures that are common to both protocols. Basically, in order to use either protocol, you must:
<ol>
<li>
Set the AccessType property to a valid proxy server.<br><br></li>
<li>
Invoke the OpenURL method with a valid URL.<br><br></li>
<li>
Invoke the Execute method with a valid URL and command appropriate to the protocol.<br><br></li>
<li>
Use the GetChunk method to retrieve data from the buffer.</li>
</ol>
<h2>Setting the AccessType Property: Using a Proxy Server </h2>
<p>
In order to make any kind of connection to the Internet, you must determine how your computer is connected to the Internet. If you are on an intranet, you will probably be connected to the Internet via a proxy server.</p>
<p>
In short, a <i>proxy server </i>is an intermediary between your computer and the Internet. All computers on an intranet that need to connect to the Internet must do so through a proxy server. Thus the proxy functions as a <i>firewall</i> between the intranet and the Internet, discarding invalid end-user and external requests, thereby protecting the intranet from hostile actions.</p>
<p class=label>
<b>To find the proxy settings on your computer</b></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The following steps apply only to the Windows 95 and Windows NT<sup>®</sup> 4.0 systems.
<ol>
<li>
On the <b>Taskbar</b> of your computer, click <b>Start</b>.<br><br></li>
<li>
On the <b>Settings</b> item, click the <b>Control Panel</b>.<br><br></li>
<li>
Double-click the <b>Internet</b> icon.<br><br></li>
<li>
On the <b>Internet Properties</b> dialog box, click <b>Connection</b>.<br><br></li>
<li>
Under <b>Proxy Server</b>, confirm that the <b>Connect Through a Proxy Server</b> check box is selected.<br><br></li>
<li>
If it is selected, click <b>Settings</b>. The name of proxy servers you use for various protocols will be found in the dialog box. If no proxy is defined, contact your system administrator for available proxy servers.</li>
</ol>
<p>
If you intend to use a proxy other than that named in the dialog box, set the AccessType property to icNamedProxy (2). Then set the Proxy property to the name of the proxy, as shown in the code below:</p>
<pre><code>Inet1.Proxy = "myProxyName"
Inet1.AccessType = icNamedProxy
</code></pre>
<p>
On the other hand, if you are content to use the default proxy (as determined by your computer's registry), ignore the Proxy property, and simply set the AccessType to icUseDefault (0).</p>
<p>
The settings for AccessType are shown in the following table:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Constant</b></td>
<td class=label width=12%><b>Value</b></td>
<td class=label width=66%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>icUseDefault</td>
<td width=12%>0</td>
<td width=66%>(Default) Use Defaults. The control uses default settings found in the registry to access the Internet.</td>
</tr>
<tr valign=top>
<td width=22%>icDirect</td>
<td width=12%>1</td>
<td width=66%>Direct to Internet. The control has a direct connection to the Internet.</td>
</tr>
<tr valign=top>
<td width=22%>icNamedProxy</td>
<td width=12%>2</td>
<td width=66%>Named Proxy. Instructs the control to use the proxy server specified in the Proxy property.</td>
</tr>
</table><br>
<h2>Invoke the OpenURL Method</h2>
<p>
After you set the AccessType property, the most basic operation is to use the OpenURL method with a valid URL. When you use the OpenURL method, the result will depend on the target URL. For example, the following URL will return the HTML document found at www.microsoft.com:</p>
<pre><code>' A TextBox control named Text1 contains the 
' result of the method. The Internet Transfer
' control is named Inet1.
Text1.Text = Inet1.OpenURL("http://www.microsoft.com")
</code></pre>
<p>
As a result, the TextBox control is filled with the HTML source, which may resemble the figure below:</p>
<p>
<img src="avtcm090.gif" border=0></p>
<p>
In this case, the default action was to return the HTML document located at the URL. However, if the URL is modified to target a specific text file, the actual file would be retrieved. For example, the following code:</p>
<pre><code>Text1.Text = Inet1. _
OpenURL("ftp://ftp.microsoft.com/disclaimer.txt")
</code></pre>
<p>
would result in the actual text of the file, as shown below:</p>
<p>
<img src="avtcm091.gif" border=0></p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;When you use either the OpenURL or Execute method, you need not set the Protocol property. The Internet Transfer control will automatically set itself to the correct protocol, as determined by the protocol portion of the URL.</p>
<p>
Finally, you can use the OpenURL method with a URL that includes appended data. For example, many Web sites offer the ability to search a database. To search, send a URL that includes the search criteria. For example, the following code would use a search engine named "search.exe" with the criteria "find=Maui."</p>
<pre><code>Dim strURL As String
strURL = _
"http://www.howzit.com/cgi-bin/search.exe?find=maui
Text1.Text = Inet1.OpenURL(strURL)
</code></pre>
<p>
If the search engine finds a match for the criteria, an HTML document would be assembled and returned with the appropriate information.</p>
<h3>Saving to a File Using the OpenURL Method</h3>
<p>
If you wish to save the data retrieved through the OpenURL method to a file, use the Open, Put, and Close statements, as shown in the code below. This example streams a binary file into a Byte array before saving the data to disk:</p>
<pre><code>Dim strURL As String
Dim bData() As Byte      ' Data variable
Dim intFile As Integer   ' FreeFile variable
strURL = _
"ftp://ftp.microsoft.com/Softlib/Softlib.exe"
intFile = FreeFile()      ' Set intFile to an unused
                        ' file.
' The result of the OpenURL method goes into the Byte 
' array, and the Byte array is then saved to disk.
bData() = Inet1.OpenURL(strURL, icByteArray)
Open "C:\Temp\Softlib.exe" For Binary Access Write _ 
As #intFile
Put #intFile, , bData()
Close #intFile
</code></pre>
<p>
A similar procedure can be used to write a text file to disk, except no Byte array is needed; the data is saved directly to the file:</p>
<pre><code>Dim strURL As String      ' URL string
Dim intFile As Integer   ' FreeFile variable
IntFile = FreeFile()
strURL = "http://www.microsoft.com"
Open "c:\temp\MSsource.txt" For Output _
As #IntFile
Write #IntFile, Inet1.OpenURL(strURL)
Close #IntFile
</code></pre>
<h2>Synchronous and Asynchronous Transmission</h2>
<p>
The OpenURL method results in a <i>synchronous</i> transmission of data. In this context, synchronous means that the transfer operation occurs before any other procedures are executed. Thus the data transfer must be completed before any other code can be executed.</p>
<p>
On the other hand, the Execute method results in an <i>asynchronous </i>transmission. When the Execute method is invoked, the transfer operation occurs independently of other procedures. Thus, after invoking the Execute method, other code can execute while data is received in the background.</p>
<p>
What does this mean for the user of the Internet Transfer control? In short, using the OpenURL method results in a direct stream of data that you can save to disk (as shown above), or view directly in a TextBox control (if the data was text). On the other hand, if you use the Execute method to retrieve data, you must monitor the control's connection state using the StateChanged event. When the appropriate state is reached, invoke the GetChunk method to retrieve data from the control's buffer. This operation is discussed in greater detail below.</p>
<h2>Using the Execute Method with the FTP Protocol</h2>
<p>
The Execute method has four arguments: <i>url</i>, <i>operation</i>, <i>data</i>, and <i>requestHeaders</i>. FTP operations take only the <i>operation</i> argument and the <i>url </i>argument, which is optional. For example, to get a file from a remote computer, you could use the following code:</p>
<pre><code>Inet1.Execute "FTP://ftp.microsoft.com", _
"GET disclaimer.txt C:\Temp\Disclaimer.txt"
</code></pre>
<p>
If you are used to using FTP to retrieve files from anonymous FTP servers, you will be familiar with certain commands used to navigate through server trees, and to retrieve files to a local hard disk. For example, to change directory with the FTP protocol, you would use the command "CD" with the path of the directory you wish to change to.</p>
<p>
For the most common operations, such as putting a file on a server and retrieving a file from a server, the Internet Transfer control uses the same or a similar command with the Execute method. For example, the following code uses the "CD" command as an argument of the Execute method to change directory:</p>
<pre><code>' The txtURL textbox contains the path to open. The
' txtRemotePath textbox contains the path to change to.
Inet1.Execute txtURL.Text, "CD " &amp; txtRemotePath.Text 
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When using the Execute method with FTP commands, the <i>data</i> and <i>requestHeaders </i>arguments are not used. Instead, all of the operations and their parameters are passed as a single string in the <i>operation </i>argument; parameters are separated by a space. In the descriptions below, do not confuse the terms "file1" and "file2" with the <i>data </i>and <i>requestHeaders </i>arguments.</p>
<p>
The syntax for FTP operations is:</p>
<p>
<i>operationName file1 file2</i></p>
<p>
For example, to get a file, the following code includes the operation name ("GET"), and the two file names required by the operation:</p>
<pre><code>' Get the file named Disclaimer.txt and copy it to the
' location C:\Temp\Disclaimer.txt
Inet1.Execute, _
"GET Disclaimer.txt C:\Temp\Disclaimer.txt"
</code></pre>
<p>
The following table lists the supported FTP commands of the control:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Operation</b></td>
<td class=label width=26%><b>Description</b></td>
<td class=label width=52%><b>Example</b></td>
</tr>
<tr valign=top>
<td width=22%>CD <i>file1</i></td>
<td width=26%>Change Directory. Changes to the directory specified in <i>file1</i>.</td>
<td width=52%><pre><code>Execute , "CD docs\mydocs"</code></pre>
</td>
</tr>
<tr valign=top>
<td width=22%>CDUP</td>
<td width=26%>Change to Parent. Same as "CD .."</td>
<td width=52%><pre><code>Execute , "CDUP"</code></pre>
</td>
</tr>
<tr valign=top>
<td width=22%>DELETE <i>file1</i></td>
<td width=26%>Deletes the file specified in <i>file1</i>.</td>
<td width=52%><pre><code>Execute , "DELETE discard.txt"</code></pre>
</td>
</tr>
<tr valign=top>
<td width=22%>DIR [ <i>file1 </i>]</td>
<td width=26%>Searches the directory specified in <i>file1</i>. If file1 isn't supplied, the current working directory is searched. Use the GetChunk method to return the data.</td>
<td width=52%><pre><code>Execute , "DIR /mydocs"</code></pre>
</td>
</tr>
<tr valign=top>
<td width=22%>GET<i> file1 file2</i></td>
<td width=26%>Retrieves the remote file specified in <i>file1</i>, and creates a new local file specified in <i>file2</i>.</td>
<td width=52%><pre><code>Execute , _</code><pre><code>"GET getme.txt C:\gotme.txt"</code></pre>
</pre>
</td>
</tr>
<tr valign=top>
<td width=22%>MKDIR<i> file1</i></td>
<td width=26%>Creates a directory as specified in <i>file1.</i> Success is dependent on user privileges on the remote host.</td>
<td width=52%><pre><code>Execute , "MKDIR /myDir"</code></pre>
</td>
</tr>
<tr valign=top>
<td width=22%>PUT<i> file1 file2</i></td>
<td width=26%>Copies a local file specified in <i>file1</i> to the remote host specified in <i>file2</i>.</td>
<td width=52%><pre><code>Execute , _</code><pre><code>"PUT C:\putme.txt /putme.txt"</code></pre>
</pre>
</td>
</tr>
<tr valign=top>
<td width=22%>PWD</td>
<td width=26%>Print Working Directory. Returns the current directory name. Use the GetChunk method to return the data.</td>
<td width=52%><pre><code>Execute , "PWD"</code></pre>
</td>
</tr>
<tr valign=top>
<td width=22%>QUIT</td>
<td width=26%>Terminate current connection</td>
<td width=52%><pre><code>Execute , "QUIT"</code></pre>
</td>
</tr>
<tr valign=top>
<td width=22%>RECV<i> file1 file2</i></td>
<td width=26%>Same as GET.</td>
<td width=52%><pre><code>Execute , _</code><pre><code>"RECV getme.txt C:\gotme.txt"</code></pre>
</pre>
</td>
</tr>
<tr valign=top>
<td width=22%>RENAME<i> file1 file2</i></td>
<td width=26%>Renames a file. Success is dependent on user privileges on the remote host.</td>
<td width=52%><pre><code>Execute , </code><pre><code>"RENAME old.txt new.txt"</code></pre>
</pre>
</td>
</tr>
<tr valign=top>
<td width=22%>RMDIR<i> file1</i></td>
<td width=26%>Remove directory. Success is dependent on user privileges on the remote host.</td>
<td width=52%><pre><code>Execute , "RMDIR oldDir"</code></pre>
</td>
</tr>
<tr valign=top>
<td width=22%>SEND<i> file1</i></td>
<td width=26%>Copies a file to the FTP site. (same as PUT.)</td>
<td width=52%><pre><code>Execute , _</code><pre><code>"SEND C:\putme.txt /putme.txt"</code></pre>
</pre>
</td>
</tr>
<tr valign=top>
<td width=22%>SIZE <i>file1</i></td>
<td width=26%>Returns the size of the file specified in <i>file1.</i></td>
<td width=52%><pre><code>Execute "SIZE /largefile.txt"</code></pre>
</td>
</tr>
</table><br>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;If your proxy server is a CERN proxy server, direct FTP connections (using the Execute method) are disallowed. In that case, to get a file, use the OpenURL method with the Open, Put, and Close statements, as shown earlier in "Saving to a File Using the OpenURL Method." You can also use the OpenURL method to get a directory listing by invoking the method and specifying the target directory as the URL.</p>
<h2>Using the Execute Method with the HTTP Protocol</h2>
<p>
The HTTP protocol allows client machines to request data from the server using the GET, HEAD, POST, and PUT commands. These operations are shown in the following table:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=19%><b>Operation</b></td>
<td class=label width=26%><b>Description</b></td>
<td class=label width=55%><b>Example</b></td>
</tr>
<tr valign=top>
<td width=19%>GET</td>
<td width=26%>Retrieves the file named in <i>url</i>.</td>
<td width=55%><pre><code>Execute "http://www.microsoft.com" &amp; _</code><pre><code>"/default.htm", "GET"</code></pre>
</pre>
</td>
</tr>
<tr valign=top>
<td width=19%>HEAD</td>
<td width=26%>Retrieves only the headers of the file named in the URL property.</td>
<td width=55%><pre><code>Execute , "HEAD"</code></pre>
</td>
</tr>
<tr valign=top>
<td width=19%>POST</td>
<td width=26%>Provides additional data to support a request to the remote host.</td>
<td width=55%><pre><code>Execute , "POST", strFormData</code></pre>
</td>
</tr>
<tr valign=top>
<td width=19%>PUT</td>
<td width=26%>Replaces data at the specified URL.</td>
<td width=55%><pre><code>Execute , "PUT", "replace.htm"</code></pre>
</td>
</tr>
</table><br>
<h3>The Common Gateway Interface and the Execute Method</h3>
<p>
Many World Wide Web sites offer the ability to search a database. This is accomplished by using the HTTP protocol's ability to send queries using the Common Gateway Interface (CGI).</p>
<p>
It is not in the scope of this topic to explain the CGI; however, if you are familiar with the CGI, you can use the Execute method to construct an application that simulates the behavior of World Wide Web sites. For example, the code below shows a typical CGI query string:</p>
<pre><code>http://www.yippee.com/cgi-bin/find.exe?find=Hangzhou
</code></pre>
<p>
This same query could be sent using the Execute method as shown below:</p>
<pre><code>Dim strURL As String, strFormData As String
strURL = "//www.yippee.com/cgi-bin/find.exe"
strFormData = "find=Hangzhou"
Inet1.Execute strURL, "POST", strFormData
</code></pre>
<p>
If you are expecting a result back from a server (as in the example above), you must use the GetChunk method to retrieve the resulting HTML document.</p>
<h2>Using the State Event with the GetChunk Method</h2>
<p>
When you are downloading data from a remote computer, an asynchronous connection will be made. For example, using the Execute method with the operation "GET", will cause the server to retrieve the requested file. When the entire file has been retrieved, the State argument will return icResponseCompleted (12). At that point, you can use the GetChunk method to retrieve the data from the buffer. This is shown in the example below:</p>
<pre><code>Private Sub Inet1_StateChanged(ByVal State As Integer)
   Dim vtData As Variant ' Data variable.
   Select Case State
   ' ... Other cases not shown.
   Case icResponseCompleted ' 12
      ' Open a file to write to.
      Open txtOperation For Binary Access _
      Write As #intFile

      ' Get the first chunk. NOTE: specify a Byte 
      ' array (icByteArray) to retrieve a binary file.
      vtData = Inet1.GetChunk(1024, icString)

      Do While LenB(vtData) &gt; 0
         Put #intFile, , vtData
         ' Get next chunk.
         vtData = Inet1.GetChunk(1024, icString)
      Loop
      Put #intFile, , vtData
      Close #intFile
   End Select
End Sub
</code></pre>
<h2>Logging on to FTP Servers</h2>
<p>
FTP servers come in two flavors: public and private. Public servers, as suggested by the name, are open to anyone. Private servers, on the other hand, won't let you log on unless you are a bona fide user of the server. In either case, the FTP protocol demands that you supply a user name and a password. The two are used to authenticate a user and allow (or disallow) subsequent actions.</p>
<p>
To log on to public servers the common practice is to log in as "anonymous," (UserName = "anonymous") and send your e-mail name as the password. However this process is simplified even further with the Internet Transfer control. By default, if you do not supply UserName and Password property values, the control sends "anonymous" as your UserName, and your e-mail name for the Password.</p>
<p>
If you are logging on to a private server, simply set the UserName, Password, and URL properties as appropriate, and invoke the Execute method, as shown in the example below:</p>
<pre><code>With Inet1
   .URL = "ftp://ftp.someFTPSite.com"
   .UserName = "John Smith"
   .Password = "mAuI&amp;9$6"
   .Execute ,"DIR"   ' Returns the directory.
   .Execute ,"CLOSE" ' Close the connection.
End With
</code></pre>
<p>
After you have invoked the Execute method, the FTP connection will remain open. You can then continue to use the Execute method to perform other FTP operations such as CD and GET. When you have completed the session, close the connection using the Execute method with the CLOSE operation. You can also close the connection automatically by changing the URL property, and invoking either the OpenURL or Execute method; such action will close the current FTP connection, and open the new URL.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Handle Errors</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconhowtohandleerrors"></a>How to Handle Errors</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconHowToHandleErrorsC">
</object></p>
<p>
Ideally, Visual Basic procedures wouldn't need error-handling code at all. Reality dictates that hardware problems or unanticipated actions by the user can cause run-time errors that halt your code, and there's usually nothing the user can do to resume running the application. Other errors might not interrupt code, but they can cause it to act unpredictably.</p>
<p>
For example, the following procedure returns true if the specified file exists and false if it does not, but doesn't contain error-handling code:</p>
<pre><code>Function FileExists (filename) As Boolean
   FileExists = (Dir(filename) &lt;&gt; "")
End Function
</code></pre>
<p>
The Dir function returns the first file matching the specified file name (given with or without wildcard characters, drive name, or path); it returns a zero-length string if no matching file is found.</p>
<p>
The code appears to cover either of the possible outcomes of the Dir call. However, if the drive letter specified in the argument is not a valid drive, the error "Device unavailable" occurs. If the specified drive is a floppy disk drive, this function will work correctly only if a disk is in the drive and the drive door is closed. If not, Visual Basic presents the error "Disk not ready" and halts execution of your code.</p>
<p>
To avoid this situation, you can use the error-handling features in Visual Basic to intercept errors and take corrective action. (Intercepting an error is also known as <i>trapping</i> an error.) When an error occurs, Visual Basic sets the various properties of the error object, Err, such as an error number, a description, and so on. You can use the Err object and its properties in an error-handling routine so that your application can respond intelligently to an error situation.</p>
<p>
For example, device problems, such as an invalid drive or an empty floppy disk drive, could be handled by the following code:</p>
<pre><code>Function FileExists (filename) As Boolean
   Dim Msg As String
   ' Turn on error trapping so error handler responds 
   ' if any error is detected.
   On Error GoTo CheckError   
      FileExists = (Dir(filename) &lt;&gt; "")
      ' Avoid executing error handler if no error 
      ' occurs.
      Exit Function

CheckError:         ' Branch here if error occurs.
   ' Define constants to represent intrinsic Visual
   ' Basic error codes. 
   Const mnErrDiskNotReady = 71, _
   mnErrDeviceUnavailable = 68
   ' vbExclamation, vbOK, vbCancel, vbCritical, and
   ' vbOKCancel are constants defined in the VBA type
   ' library.
   If (Err.Number = MnErrDiskNotReady) Then
      Msg = "Put a floppy disk in the drive " 
      Msg = Msg &amp; "and close the door."
      ' Display message box with an exclamation mark
      ' icon and with OK and Cancel buttons.
      If MsgBox(Msg, vbExclamation &amp; vbOKCancel) = _
      vbOK Then
         Resume
      Else
         Resume Next
      End If
   ElseIf Err.Number = MnErrDeviceUnavailable Then
      Msg = "This drive or path does not exist: "
      Msg = Msg &amp; filename
      MsgBox Msg, vbExclamation
      Resume Next
   Else
      Msg = "Unexpected error #" &amp; Str(Err.Number)
      Msg = Msg &amp; " occurred: " &amp; Err.Description
      ' Display message box with Stop sign icon and
      ' OK button.
      MsgBox Msg, vbCritical
      Stop
   End If
   Resume
End Function
</code></pre>
<p>
In this code, the Err object's Number property contains the number associated with the run-time error that occurred; the Description property contains a short description of the error.</p>
<p>
When Visual Basic generates the error "Disk not ready," this code presents a message telling the user to choose one of two buttons — OK or Cancel. If the user chooses OK, the Resume statement returns control to the statement at which the error occurred and attempts to re-execute that statement. This succeeds if the user has corrected the problem; otherwise, the program returns to the error handler.</p>
<p>
If the user chooses Cancel, the Resume Next statement returns control to the statement following the one at which the error occurred (in this case, the Exit Function statement).</p>
<p>
Should the error "Device unavailable" occur, this code presents a message describing the problem. The Resume Next statement then causes the function to continue execution at the statement following the one at which the error occurred.</p>
<p>
If an unanticipated error occurs, a short description of the error is displayed and the code halts at the Stop statement. </p>
<p>
The application you create can correct an error or prompt the user to change the conditions that caused the error. To do this, use techniques such as those shown in the preceding example. The next section discusses these techniques in detail.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Guidelines for Complex Error Handling" in "Error-Handling Hierarchy" later in this chapter for an explanation of how to use the Stop statement.</p>
</BODY>
</HTML>

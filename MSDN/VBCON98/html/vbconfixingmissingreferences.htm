<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Project Compatibility: Avoiding MISSING References</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconfixingmissingreferences"></a>Project Compatibility: Avoiding MISSING References</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconFixingMISSINGReferencesC">
</object></p>
<p>
In the course of building, testing, and debugging components, you may occasionally see the following error message when you attempt to run your test project: "Connection to type library or object library for remote process has been lost. Press OK for dialog to remove reference."</p>
<p>
There are two reasons for this error: Either the type library for your component project is not available, or the GUID of your component’s type library has changed, and therefore your test project can no longer locate it. See "Polymorphism, Interfaces, Type Libraries, and GUIDs," in "General Principles of Component Design," for information about GUIDs and type libraries.</p>
<p>
The solution varies, depending on the setting of the Version Compatibility option in your <i>component</i> project. You can find the Version Compatibility option on the Component tab of the Project Properties dialog box, available from the Project menu.</p>
<h2>If Your Component Is Using Project Compatibility</h2>
<p>
When you make your component project into an executable (.exe, .dll, or .ocx file) for the first time, as described in "Creating a Test Project for an Out-of-Process Component," Visual Basic automatically sets the Version Compatibility option to Project Compatibility and inserts the path to your made executable. This ensures that your test project and component project remain connected from one development session to the next.</p>
<p>
If you’re using Project Compatibility for your component project, the solution to the error depends on whether you’re debugging the component in the development environment, or attempting to test the made executable.</p>
<h3>If You’re Debugging the Component Project Out of Process</h3>
<p>
When you’re debugging an out-of-process component (ActiveX Exe projects) in a second instance of the development environment, the test project loses its connection when the component project is in design mode, because the component project’s type library is not available.</p>
<p>
Run your component project. Switch back to the test project and press Esc to dismiss the error message. You can then run the test project.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You may encounter this situation with an ActiveX DLL project if you’re debugging an in-process component in a separate instance of the development environment, for example when debugging an in-process component that provides ActiveX documents.</p>
<h4>If the Component Project Is Running</h4>
<p>
If you’ve just made your component executable for the first time, or manually switched from No Compatibility to Project Compatibility — as described later in this topic — the GUID of your component’s type library will have changed, and the test project will be unable to locate it.</p>
<p>
Click OK on the error message to open the References dialog box. You’ll see the word MISSING next to your component. Remove the check mark and click OK, to clear the missing reference. On the Project menu, click References to open the References dialog box again. Check your component and click OK.</p>
<h3>If You’re Testing the Made Executable Component</h3>
<p>
In order to switch between the component project and the made executable component, you must make an up-to-date version of the executable, as described in "How to Test Compiled Components." If you haven’t done this, the type library GUIDs of the executable and the component project will not match, and the test project will not be able to find the executable.</p>
<p>
Make the component executable. Switch back to the test project and press ESC to dismiss the error message. You can then run the test project.</p>
<h2>If Your Component Project Is Using No Compatibility</h2>
<p>
If you for some reason you want to use the No Compatibility option for your project, you will have to refresh the reference each time you close your project group (in-process components) or projects (out-of-process components) and reopen them.</p>
<p class=label>
<b>To refresh a test application’s reference to your component</b>
<ol>
<li>
On the <b>Project </b>menu of your test project, click <b>References</b> to open the <b>References </b>dialog box.<br><br></li>
<li>
Locate the entry for your component, which will be marked MISSING. Clear the selection, and click <b>OK</b>.<p class=tl>
If there is no entry marked MISSING, locate the component project (the file name and path shown in the <b>References</b> dialog box must have the extension .vbp) and check it, then click <b>OK</b>. Skip to step 4.</P><p class=tl>
If your component project does not appear, click <b>OK</b> to close the dialog.</P></li>
<li>
Make sure your out-of-process component is running. If your component isn’t in run mode, there’s no type library for the test application to get a reference to.<br><br></li>
<li>
Open the <b>References </b>dialog box again. Locate the entry for your component project (.vbp file), and verify that it’s no longer marked MISSING. Check it and click the <b>OK</b> button.<br><br></li>
<li>
Press F5 to run the test application.</li>
</ol>
<h2>Setting the Project Compatibility Option</h2>
<p>
The easiest way to set Project Compatibility is to make your component executable (.exe, .dll, or .ocx) for the first time. As described earlier, Visual Basic automatically sets Project Compatibility the first time you make the executable.</p>
<p>
If for some reason your project has been set to No Compatibility, you can manually change it to one of the other two Version Compatibility options. Binary Compatibility, described in "Version Compatibility," later in this chapter, is the option to use if you’re developing an enhanced version of an existing component.</p>
<p>
The option you should use for all new development is Project Compatibility.</p>
<p class=label>
<b>To set the Project Compatibility option</b>
<ol>
<li>
On the <b>File</b> menu of your component project, click <b>Make &lt;project name&gt;</b> to create an executable file. If there’s an existing executable, overwrite it.<p class=tl>
The only reason to make an executable at this point is to help your test project keep its reference to the component project.</P></li>
<li>
On the <b>Project</b> menu of your component project, click <b>&lt;project&gt; Properties</b> to open the <b>Project Properties</b> dialog box.<br><br></li>
<li>
On the <b>Component</b> tab, click <b>Project Compatibility</b> in the <b>Version Compatibility</b> box.<br><br></li>
<li>
Type the name of your executable in the box at the bottom of the <b>Version Compatibility</b> box, or use the ellipsis button to browse for it, and then click <b>OK</b>.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Project Compatibility option actually has nothing whatever to do with the Binary Compatibility option (described in "Version Compatibility.")</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Type libraries and GUIDs are discussed in "Polymorphism, Interfaces, Type Libraries, and GUIDs," in "General Principles of Component Design." "Debugging Out-of-Process Components" explains important aspects of debugging, such as the fact that your component project must be in run mode when you edit your test project.</p>
</BODY>
</HTML>

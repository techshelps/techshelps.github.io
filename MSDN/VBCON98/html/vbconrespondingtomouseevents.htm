<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Responding to Mouse Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconrespondingtomouseevents"></a>Responding to Mouse Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconRespondingToMouseEventsC">
</object></p>
<p>
You can use the MouseDown, MouseUp, and MouseMove events to enable your applications to respond to both the location and the state of the mouse. (This list excludes drag events, which are introduced in "Dragging and Dropping" later in this chapter.) These mouse events are recognized by most controls.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Event</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>MouseDown</td>
<td width=72%>Occurs when the user presses any mouse button.</td>
</tr>
<tr valign=top>
<td width=28%>MouseUp</td>
<td width=72%>Occurs when the user releases any mouse button.</td>
</tr>
<tr valign=top>
<td width=28%>MouseMove</td>
<td width=72%>Occurs each time the mouse pointer is moved to a new point on the screen.</td>
</tr>
</table><br>
<p>
A form can recognize a mouse event when the pointer is over a part of the form where there are no controls. A control can recognize a mouse event when the pointer is over the control.</p>
<p>
When the user holds down a mouse button, the object continues to recognize all mouse events until the user releases the button. This is true even when the pointer is moved off the object.</p>
<p>
The three mouse events use the following arguments.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Argument</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%><i>Button</i></td>
<td width=72%>A bit-field argument in which the three least-significant bits give the status of the mouse buttons.</td>
</tr>
<tr valign=top>
<td width=28%><i>Shift</i></td>
<td width=72%>A bit-field argument in which the three least-significant bits give the status of the SHIFT, CTRL, and ALT keys.</td>
</tr>
<tr valign=top>
<td width=28%><i>x, y</i></td>
<td width=72%>Location of the mouse pointer, using the coordinate system of the object that receives the mouse event.</td>
</tr>
</table><br>
<p>
A <i>bit-field argument</i> returns information in individual bits, each indicating whether a certain condition is on or off. Using binary notation, the three leftmost bits are referred to as <i>most-significant</i> and the three rightmost bits as <i>least-significant.</i> Techniques for programming with these arguments are described in "Detecting Mouse Buttons" and "Detecting SHIFT, CTRL, and ALT States" later in this chapter.</p>
</BODY>
</HTML>

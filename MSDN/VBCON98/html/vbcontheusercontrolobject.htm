<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The UserControl Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontheusercontrolobject"></a>The UserControl Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheUserControlObjectC">
</object></p>
<p>
An ActiveX control created with Visual Basic is always composed of a <i>UserControl</i> <i>object,</i> plus any controls — referred to as <i>constituent controls </i>— that you choose to place on the UserControl.</p>
<p>
Like Visual Basic forms, UserControl objects have code modules and visual designers, as shown in Figure 9.1. You place constituent controls on the UserControl object's designer, just as you would place controls on a form.</p>
<p class=label>
<b>Figure 9.1&nbsp;&nbsp;&nbsp;UserControl designer and code window</b></p>
<p>
<img src="avtcm040.gif" border=0></p>
<p>
Like forms, user controls are stored in plain text files that contain the source code and property values of the UserControl and its constituent controls. Visual Basic uses the extension .ctl for these source files.</p>
<p>
The relationship of .ctl files and ActiveX control projects to finished controls and .ocx files is shown in Figure 9.2.</p>
<p class=label>
<b>Figure 9.2&nbsp;&nbsp;&nbsp;ActiveX control projects are built into .ocx files</b></p>
<p>
<img src="avtcm041.gif" border=0></p>
<p>
If a UserControl or its constituent controls use graphical elements which cannot be stored as plain text, such as bitmaps, Visual Basic stores those elements in a .ctx file with the same name you give to the .ctl file. This is analogous to the .frx files used to store graphical elements used in forms.</p>
<p>
The .ctl and .ctx files completely define an ActiveX control's appearance and interface (properties, methods, and events). You can include .ctl files in any of the project types. "Two Ways to Package ActiveX Controls," later in this chapter, discusses this subject in depth.</p>
<h2>Delegating to the UserControl and Constituent Controls that Compose Your ActiveX Control</h2>
<p>
Your ActiveX control is said to be <i>composed</i> of a UserControl and its constituent controls because each instance will actually contain those objects.</p>
<p>
That is, whenever you place an instance of your ActiveX control on a form, a UserControl object is created, along with instances of any constituent controls you placed on the UserControl designer. These objects are <i>encapsulated</i> inside your control.</p>
<p>
The UserControl object has an interface — that is, properties, methods, and events — of its own. The interface of your ActiveX control can <i>delegate</i> to the UserControl object's interface members, which are hidden from the user of your control by encapsulation.</p>
<p>
That is, rather than writing your own code to implement a BackColor property, you can delegate to the UserControl object's BackColor property, and let it do all the work. In practice, this means that the BackColor property of your ActiveX control simply calls the BackColor property of the UserControl object.</p>
<p>
In the same manner, you can piggy-back your control's Click event on the existing functionality of the UserControl object's Click event.</p>
<p>
The interface for your ActiveX control can also delegate to the properties, methods, and events of the constituent controls you place on the UserControl designer, as discussed in "Exposing Properties of Constituent Controls," "Adding Methods to Controls," and "Exposing Events of Constituent Controls," later in this chapter.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For a discussion of what controls you can place on a UserControl designer, see "Controls You Can Use As Constituent Controls," later in this chapter.</p>
</BODY>
</HTML>

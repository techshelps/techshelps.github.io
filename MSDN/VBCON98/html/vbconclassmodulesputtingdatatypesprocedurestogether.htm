<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Classes: Putting User-Defined Types and Procedures Together</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconclassmodulesputtingdatatypesprocedurestogether"></a>Classes: Putting User-Defined Types and Procedures Together</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconClassModulesPuttingDataTypesProceduresTogetherC">
</object></p>
<p>
User-defined types are a powerful tool for grouping related items of data. Consider, for example, the user-defined type named <code>udtAccount</code> defined here:</p>
<pre><code>Public Type udtAccount
   Number As Long
   Type As Byte
   CustomerName As String
   Balance As Double
End Type
</code></pre>
<p>
You can declare a variable of type <code>udtAccount</code>, set the values of its fields individually, and then pass the whole record to procedures that print it, save it to a database, perform computations on it, validate its fields, and so on.</p>
<p>
Powerful as they are, user-defined types present the programmer with some problems. You may create a Withdrawal procedure that raises an error if a withdrawal exceeds the balance in the account, but there's nothing to prevent the Balance field from being reduced by other code in your program.</p>
<p>
In other words, the connection between procedures and user-defined types depends on the discipline, memory, and knowledge of the programmer maintaining the code.</p>
<h2>Objects: User-Defined Types with an Attitude</h2>
<p>
Object-oriented programming solves this problem by combining data and procedures in a single entity, as shown in Figure 9.5.</p>
<p class=label>
<b>Figure 9.5&nbsp;&nbsp;&nbsp;Objects combine data and procedures</b></p>
<p>
<img src="avp09008.gif" border=0></p>
<p>
When the user-defined type <code>udtAccount</code> becomes the Account class, its data become private, and the procedures that access them move inside the class and become properties and methods. This is what's meant by the term <i>encapsulation</i> — that is, an object is a unit (a <i>capsule</i>, if you will) containing both code and data.</p>
<p>
When you create an Account object from the class, the only way you can access its data is through the properties and methods that make up its interface. The following code fragment shows how the procedures inside the Account class support encapsulation:</p>
<pre><code>' The account balance is hidden from outside code.
Private mdblBalance As Double

' The read-only Balance property allows outside code
' to find out the account balance.
Public Property Get Balance() As Double
   Balance = mdblBalance
End Property

' The Withdrawal method changes the account balance,
' but only if an overdraft error doesn't occur.
Public Sub Withdrawal(ByVal Amount As Double)
   If Amount &gt; Balance Then
      Err.Raise Number:=vbObjectError + 2081, _
      Description:="Overdraft"
   End If
   mdblBalance = mdblBalance - Amount
End Sub
</code></pre>
<p>
For the moment, don't worry about how you get the procedures inside the class, or about understanding the syntax of property procedures and private variables. The important thing to remember is that you can define an object that encapsulates and validates its own data.</p>
<p>
With the Account object, you never have be concerned about whether you've called the right procedures to update the account, because the only procedures you can call are built into the object.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"Customizing Form Classes" puts property and method creation into a framework you're already familiar with. Later, "Adding Properties and Methods to a Class" will explain the syntax.</p>
<p>
You can read about user-defined types in "Creating Your Own Data Types" in "More About Programming."</p>
<p>
For details about Sub and Function procedures, see "Introduction to Procedures" in "Programming Fundamentals."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declaring an ActiveX Component Object Variable</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondeclaringanactivexcomponentobjectvariable"></a>Declaring an Object Variable</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDeclaringAnActiveXComponentObjectVariableC">
</object></p>
<p>
Before you can use the properties, methods, and events of an object provided by an ActiveX component, you must first declare an object variable. The way you declare an object variable depends on whether or not the ActiveX component supplies a type library.</p>
<p class=label>
<b>To declare a variable for an object defined in a type library</b>
<ol>
<li>
Add a reference to the type library to your Visual Basic project. For more information on adding a reference to a type library, see "Creating a Reference to an Object" earlier in this chapter.<br><br></li>
<li>
Specify the name of a class supplied by that type library in your variable declaration. Declaring an object variable of a specific class can speed object references. Use the following syntax:<p class=tl>
<b>Dim</b> <i>variable</i> <b>As</b> [<b>New</b>] <i>class</i></P><p class=tl>
The <i>class</i> argument can be composed of two parts, in the form <i>component.class</i>.</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Part</b></td>
<td class=label width=70%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=30%><i>component</i></td>
<td width=70%>The name of the component that supplies the object. Choices are displayed in the Project/Library list of the Object Browser.</td>
</tr>
<tr valign=top>
<td width=30%><i>class</i></td>
<td width=70%>The object's class name (provided by the component's type library). Choices are shown in the Classes/Modules box of the Object Browser.</td>
</tr>
</table><br>
</li>
</ol>
<p>
For example, you can declare a variable for a Microsoft Excel Chart object in either of the following ways:</p>
<pre><code>Dim xlChart As Chart
Dim xlChart As Excel.Chart
</code></pre>
<p>
If you declare an object variable using the New keyword, Visual Basic will automatically create an object and assign an object reference the first time you use the variable. For example, the following statements assign a reference to a new DAO table object to the variable tdfOrders, setting the table's Name property to "Orders":</p>
<pre><code>Dim tdfOrders As New TableDef
tdfOrders.Name = "Orders"
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Using variables declared using the New keyword can slow your application. Every time Visual Basic encounters a variable declared using New, it must test whether or not an object reference has already been assigned to the variable.</p>
<p class=label>
<b>To declare an object variable for an object not defined in a type library</b>
<ul type=disc>
<li>
Declare an object variable of the generic Object class, as follows:<p class=tl>
<b>Dim</b> <i>variable</i> <b>As Object</b></P></li>
</ul>
<p>
For example, the variable <code>objAny</code> in the following declaration can be used for a Microsoft Excel Chart object or any other object provided by an ActiveX component:</p>
<pre><code>Dim objAny As Object
</code></pre>
<p>
The main difference between declaring a variable of a specific class and declaring a variable of the generic Object class is in how ActiveX binds the variable to the object. When you declare a variable of the generic Object class, ActiveX must use late binding. When you declare an object variable of a specific class, ActiveX uses early binding,<i> </i>which can speed object references. For more information, see "Speeding Object References" later in this chapter.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on declaring object variables, see "Dim Statement." For more information on assigning an object reference to a variable, see "Assigning an Object Reference to a Variable."</p>
</BODY>
</HTML>

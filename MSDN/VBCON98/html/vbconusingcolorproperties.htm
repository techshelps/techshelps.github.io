<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Color Properties</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingcolorproperties"></a>Using Color Properties</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingColorPropertiesC">
</object></p>
<p>
Many of the controls in Visual Basic have properties that determine the colors used to display the control. Keep in mind that some of these properties also apply to controls that aren't graphical. The following table describes the color properties.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=20%><b>Property</b></td>
<td class=label width=80%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=20%>BackColor</td>
<td width=80%>Sets the background color of the form or control used for drawing. If you change the BackColor property after using graphics methods to draw, the graphics are erased by the new background color.</td>
</tr>
<tr valign=top>
<td width=20%>ForeColor</td>
<td width=80%>Sets the color used by graphics methods to create text or graphics in a form or control. Changing ForeColor does not affect text or graphics already created.</td>
</tr>
<tr valign=top>
<td width=20%>BorderColor</td>
<td width=80%>Sets the color of the border of a shape control.</td>
</tr>
<tr valign=top>
<td width=20%>FillColor</td>
<td width=80%>Sets the color that fills circles created with the Circle method and boxes created with the Line method.</td>
</tr>
</table><br>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For detailed descriptions of these color properties, see "BackColor Property," "ForeColor Property," "BorderColor Property," and "FillColor Property" in the <i>Language Reference</i>.</p>
<h2>Defining Colors</h2>
<p>
The color properties can use any of several methods to define the color value. The RGB function described in "Working with Color" is one way to define colors. This section discusses two more ways to define colors:
<ul type=disc>
<li>
Using defined constants<br><br></li>
<li>
Using direct color settings</li>
</ul>
<h3>Using Defined Constants</h3>
<p>
You don’t need to understand how color values are generated if you use the intrinsic constants listed in the Object Browser. In addition, intrinsic constants do not need to be declared. For example, you can use the constant vbRed whenever you want to specify red as a color argument or color property setting:</p>
<pre><code>BackColor = vbRed
</code></pre>
<h3>Using Direct Color Settings</h3>
<p>
Using the RGB function or the intrinsic constants to define color are indirect methods. They are indirect because Visual Basic interprets them into the single approach it uses to represent color. If you understand how colors are represented in Visual Basic, you can assign numbers to color properties and arguments that specify color directly. In most cases, it’s much easier to enter these numbers in hexadecimal.</p>
<p>
The valid range for a normal RGB color is 0 to 16,777,215 (&amp;HFFFFFF&amp;). Each color setting (property or argument) is a 4-byte integer. The high byte of a number in this range equals 0. The lower 3 bytes, from least to most significant byte, determine the amount of red, green, and blue, respectively. The red, green, and blue components are each represented by a number between 0 and 255 (&amp;HFF).</p>
<p>
Consequently, you can specify a color as a hexadecimal number using this syntax:</p>
<p>
<b>&amp;</b><i>HBBGGRR</i><b>&amp;</b></p>
<p>
The <i>BB</i> specifies the amount of blue, <i>GG</i> the amount of green, and <i>RR</i> the amount of red. Each of these fragments is a two-digit hexadecimal number from 00 to FF. The median value is 80. Thus, the following number specifies gray, which has the median amount of all three colors:</p>
<pre><code>&amp;H808080&amp;
</code></pre>
<p>
Setting the most significant bit to 1 changes the meaning of the color value: It no longer represents an RGB color, but an environment-wide color specified through the Windows Control Panel. The values that correspond to these system-wide colors range from &amp;H80000000 to &amp;H80000015.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Although you can specify over 16 million different colors, not all systems are capable of displaying them accurately. For more information on how Windows represents colors, see "Working with 256 Colors" later in this chapter.</p>
<h3>Using System Colors</h3>
<p>
When setting the colors of controls or forms in your application, you can use colors specified by the operating system instead of specific color values. If you specify system colors, when users of your application change the values of system colors on their computers, your application automatically reflects the user-specified color values.</p>
<p>
Each system color has both a defined constant and a direct color setting. The high byte of direct color settings for system colors differs from those of normal RGB colors. For RGB colors, the high byte equals 0 whereas for system colors the high byte equals 8. The rest of the number refers to a particular system color. For example, the hexadecimal number used to represent the color of an active window caption is &amp;H80000002&amp;.</p>
<p>
When you select color properties at design time with the Properties window, selecting the System tab lets you choose system settings, which are automatically converted into the hexadecimal value. You can also find the defined constants for system colors in the Object Browser.</p>
</BODY>
</HTML>

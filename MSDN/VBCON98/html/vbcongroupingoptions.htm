<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Grouping Options with Option Buttons</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcongroupingoptions"></a>Grouping Options with Option Buttons</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconGroupingOptionsC">
</object></p>
<p>
Option buttons present a set of two or more choices to the user. Unlike check boxes, however, option buttons should always work as part of a group; selecting one option button immediately clears all the other buttons in the group. Defining an option button group tells the user, "Here is a set of choices from which you can choose one and only one."</p>
<p>
For example, in the option button group shown in Figure 3.11, the user can select one of three option buttons.</p>
<p class=label>
<b>Figure 3.11&nbsp;&nbsp;&nbsp;Selecting an option button</b></p>
<p>
<img src="avp03011.gif" border=0></p>
<h2>Creating Option Button Groups</h2>
<p>
All of the option buttons placed directly on a form (that is, not in a frame or picture box) constitute one group. If you want to create additional option button groups, you must place some of them inside frames or picture boxes.</p>
<p>
All the option buttons inside any given frame constitute a separate group, as do all the option buttons inside a picture box. When you create a separate group this way, always draw the frame or picture box first, and then draw the option buttons on top of it. Figure 3.12 shows a form with two option button groups.</p>
<p class=label>
<b>Figure 3.12&nbsp;&nbsp;&nbsp;Option button groups</b></p>
<p>
<img src="avp03012.gif" border=0></p>
<p>
A user can select only one option button in the group when you draw option buttons in a frame.</p>
<p class=label>
<b>To group controls in a frame</b>
<ol>
<li>
Select the frame control from the toolbox and draw the frame on the form.<br><br></li>
<li>
Select the option button control from the toolbox and draw the control within the frame.<br><br></li>
<li>
Repeat step 2 for each additional option button you wish to add to the frame.</li>
</ol>
<p>
Drawing the frame first and then drawing each control on the frame allows you to move the frame and controls together. If you try to move existing controls onto a frame, the controls will not move with the frame.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you have existing controls that you want to group in a frame, you can select all the controls and cut and paste them into a frame or picture control.</p>
<h2>Containers for Controls</h2>
<p>
While controls are independent objects, a certain <i>parent and child relationship</i> exists between forms and controls. Figure 3.12 demonstrates how option buttons can be contained within a form or within a frame control.</p>
<p>
To understand the concept of containers, you need to understand that all controls are children of the form on which they are drawn. In fact, most controls support the read-only Parent property, which returns the form on which a control is located. Being a child affects the placement of a control on the parent form. The Left and Top properties of a control are relative to the parent form, and controls cannot be moved outside the boundaries of the parent. Moving a container moves the controls as well, and the control's position relative to the container's Left and Top properties does not change because the control moves with the container.</p>
<h2>Selecting or Disabling Option Buttons</h2>
<p>
An option button can be selected by:
<ul type=disc>
<li>
Clicking it at run time with the mouse.<br><br></li>
<li>
Tabbing to the option button group and then using the arrow keys to select an option button within the group.<br><br></li>
<li>
Assigning its Value property to True in code:<pre><code>optChoice.Value = True
</code></pre>
</li>
<li>
Using a shortcut key specified in the caption of a label. </li>
</ul>
<p>
To make a button the default in an option button group, set its Value property to True at design time. It remains selected until a user selects a different option button or code changes it.</p>
<p>
To disable an option button, set its Enabled property to False. When the program is run it will appear dimmed, meaning that it is unavailable.</p>
<h2>The Options Application</h2>
<p>
The form shown in Figure 3.13 uses option buttons to determine the processor type and operating system for a fictional computer. When the user selects a option button in either group, the caption of the label is changed to reflect the current choices. For a working version of this example, see Options.frm in the Controls.vbp sample application.</p>
<p class=label>
<b>Figure 3.13&nbsp;&nbsp;&nbsp;Option button example</b></p>
<p>
<img src="avp03013.gif" border=0></p>
<p>
The following table lists the property settings for the objects in the application.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Object</b></td>
<td class=label width=34%><b>Property</b></td>
<td class=label width=35%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=31%>Label</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>lblDisplay<br>
(Empty)</td>
</tr>
<tr valign=top>
<td width=31%>Command button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>cmdClose<br>
&amp;Close</td>
</tr>
<tr valign=top>
<td width=31%>First option button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>opt486<br>
&amp;486</td>
</tr>
<tr valign=top>
<td width=31%>Second option button</td>
<td width=34%>Name<br>
Caption<p>
Value</p>
</td>
<td width=35%>opt586<br>
&amp;Pentium<p>
True</p>
</td>
</tr>
<tr valign=top>
<td width=31%>Third option button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>opt686<br>
P&amp;entium Pro</td>
</tr>
<tr valign=top>
<td width=31%>Frame</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>fraSystem<br>
&amp;Operating System</td>
</tr>
<tr valign=top>
<td width=31%>Fourth option button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>optWin95<br>
Windows 95</td>
</tr>
<tr valign=top>
<td width=31%>Fifth option button</td>
<td width=34%>Name<br>
Caption<p>
Value</p>
</td>
<td width=35%>optWinNT<br>
Windows NT<p>
True</p>
</td>
</tr>
</table><br>
<h2>Events in the Options Application</h2>
<p>
The Options application responds to events as follows:
<ul type=disc>
<li>
The Click events for the first three option buttons assign a corresponding description to a form-level string variable, <code>strComputer</code>.<br><br></li>
<li>
The Click events for the last two option buttons assign a corresponding description to a second form-level variable, <code>strSystem</code>.</li>
</ul>
<p>
The key to this approach is the use of these two form-level variables, <code>strComputer </code>and <code>strSystem</code>. These variables contain different string values, depending on which option buttons were last selected.</p>
<p>
Each time a new option button is selected, the code in its Click event updates the appropriate variable:</p>
<pre><code>Private Sub opt586_Click()
   strComputer = "Pentium"
   Call DisplayCaption
End Sub
</code></pre>
<p>
It then calls a sub procedure, called DisplayCaption, that concatenates the two variables and updates the label's Caption property:</p>
<pre><code>Sub DisplayCaption()
   lblDisplay.Caption = "You selected a " &amp; _
   strComputer &amp; " running " &amp; strSystem
End Sub
</code></pre>
<p>
A sub procedure is used because the procedure of updating the Caption property is essentially the same for all five option buttons, only the value of the variables change from one instance to the next. This saves you from having to repeat the same code in each of the Click events.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Variables and sub procedures are discussed in detail in "Programming Fundamentals."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Retrieving Information from a Form</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconretrievinginformationfromform"></a>Retrieving Information from an HTML Form</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconRetrievingInformationFromFormC">
</object></p>
<p>
You can use the Request object to retrieve the information a user enters on an HTML form. Submitting a form can fire an event within your webclass, if you have connected the FORM ACTION tag attribute to an event; if so, you can use this event to gather and manipulate information. You use the Request object's Form collection to retrieve named fields from the form and set their value equal to variables in the webclass. For example, the following code shows how you would retrieve information from a book request form in an order entry application:</p>
<pre><code>Private Sub BookList_Search()
   ' declare variables for form information
   Private sTitle as String
   Private sAuthor as String
   Private sPublisher as String

   ' retrieve form arguments and assign to variables
   sTitle = Request.Form("title")
   sAuthor = Request.Form("author")
   sPublisher = Request.Form("publisher")

   ' further code here to process this information,
   'open the database, find the book, and return it.
End Sub
</code></pre>
<p>
When you add a template that contains a form to a webclass, you might notice that the form elements, such as buttons and text areas, do not appear in the Detail panel and event candidates. You can have the webclass respond to events that occur on these form elements by connecting the parent Form for the elements to an event. Then write code for the parent form that uses the Request object's Form collection to determine which element was selected.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "The Object Model for IIS Applications" for more information on using ASP objects in your webclass code.</p>
</BODY>
</HTML>

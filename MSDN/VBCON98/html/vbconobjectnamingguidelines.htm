<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object Naming Guidelines</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconobjectnamingguidelines"></a>Object Naming Guidelines</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconObjectNamingGuidelinesC">
</object></p>
<p>
When selecting names for objects, properties, methods, and events, choose names that can be easily understood by the users of your component. These elements comprise the programming interface of your component — the more clear you make their names, the more usable your code will be.</p>
<p>
The rules in this topic apply to names for:
<ul type=disc>
<li>
Objects.<br><br></li>
<li>
The properties, methods, and events that comprise the interfaces of your objects.<br><br></li>
<li>
Named arguments of properties, methods, and events.</li>
</ul>
<h2>Use Entire Words or Syllables Whenever Possible</h2>
<p>
It is easier for users to remember complete words than to remember whether you abbreviated Window as Wind, Wn, or Wnd. The following table lists two examples of recommended naming conventions.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>Use</b></td>
<td class=label width=64%><b>Don’t use</b></td>
</tr>
<tr valign=top>
<td width=36%>Application</td>
<td width=64%>App</td>
</tr>
<tr valign=top>
<td width=36%>SpellCheck</td>
<td width=64%>SpChk</td>
</tr>
</table><br>
<p>
When you need to abbreviate because an identifier would be too long, try to use complete initial syllables. For example, use AltExpEval instead of either AlternateExpressionEvaluation or AltExpnEvln.</p>
<h2>Use Mixed Case</h2>
<p>
All identifiers should use mixed case, rather than underscores, to separate the words in the identifier. The following table lists two examples of recommended naming conventions.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Use</b></td>
<td class=label width=62%><b>Don’t use</b></td>
</tr>
<tr valign=top>
<td width=38%>ShortcutMenus</td>
<td width=62%>Shortcut_Menus, Shortcutmenus, SHORTCUTMENUS, SHORTCUT_MENUS</td>
</tr>
<tr valign=top>
<td width=38%>BasedOn</td>
<td width=62%>basedOn</td>
</tr>
</table><br>
<h2>Use Consistent Terminology</h2>
<p>
Use the same word you use in the interface; don’t use identifier names like HWND, which are based on Hungarian notation. Remember that this code will be accessed by other users, so try to use the same word your users would use to describe a concept.</p>
<h2>Use the Correct Plural for Collection Class Names</h2>
<p>
Using plurals rather than inventing new names for collections reduces the number of items a user must remember. It also simplifies the selection of names for collections. The following table lists some examples of collection class names.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=40%><b>Use</b></td>
<td class=label width=60%><b>Don’t use</b></td>
</tr>
<tr valign=top>
<td width=40%>Axes</td>
<td width=60%>Axiss</td>
</tr>
<tr valign=top>
<td width=40%>SeriesCollection</td>
<td width=60%>CollectionSeries</td>
</tr>
<tr valign=top>
<td width=40%>Windows</td>
<td width=60%>ColWindow</td>
</tr>
</table><br>
<p>
For example, if you have a class named Axis, a collection of Axis objects is stored in an Axes class. Similarly, a collection of Vertex objects is stored in a Vertices class. In rare cases where the same spelling is used for both singular and plural, append the word "Collection" — for example, SeriesCollection.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This naming convention may not be appropriate for some collections, especially where a set of objects exists independently of the collection. For example, a Mail program might have a Name object that exists in multiple collections: ToList, CcList, and so forth. In this case, you might specify the individual name collections as ToNames and CcNames.</p>
<h2>Use a Prefix for Your Constants</h2>
<p>
Select a three- or four-letter, lowercase prefix that identifies your component, and use it on the names of constants your component provides in its type library, as well as on the names of the Enums that define those constants.</p>
<p>
For example, a code component that provides loan evaluations might use ‘levs’ as its prefix. The following Enum for loan types uses this prefix. (In addition, the constants include the upper-case characters ‘LT’ to indicate the enumeration they belong to.)</p>
<pre><code>Public Enum LoanType
   levsLTMortgage = 1
   levsLTCommercial
   levsLTConsumer
End Enum
</code></pre>
<p>
Using a prefix reduces the chance that the constants for your component will have name conflicts with constants for other components. Name conflicts of this type can cause difficult bugs for your users.</p>
<p>
The shorter the constant name, the more important this rule becomes. In the worst case — constant names that are common words, like the names of colors — such conflicts become almost inevitable.</p>
<h2>Verb/Object vs. Object/Verb</h2>
<p>
If you create method names that combine a verb with the name of the object it acts on, you should be consistent about the order. Either place the verb before the object in all cases, as with InsertWidget and InsertSprocket, or always place the object first, as with WidgetInsert and SprocketInsert.</p>
<p>
Both schemes have their advantages. Verb/object order creates names that are more like normal speech, and thus show the intent of the method better. Object/verb order groups together all the methods that affect a particular object.</p>
<p>
It doesn’t matter which order you choose, but mixing the two orders will confuse the users of your component.</p>
</BODY>
</HTML>

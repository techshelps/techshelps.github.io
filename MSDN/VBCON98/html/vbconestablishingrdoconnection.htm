<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Establishing an RDO Connection</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconestablishingrdoconnection"></a>Establishing an RDO Connection</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconEstablishingRDOConnectionC">
</object></p>
<p>
Before you can reference the data in a remote database, you must establish a connection to the data source. The source could be a remote database server, like SQL Server or Oracle, or another database that has a suitable ODBC driver. </p>
<p>
There are a number of ways to establish connections with RDO, as described in the following topics. However, unlike DAO, RDO does not <i>manage</i> connections for your application — it simply collects parameters to be passed to the SQLDriverConnect function and calls the SQLDisconnect function to close the connection. RDO does not cache connections or attempt to share them based on similar DSN entries. When you use the RDO Close method to close a connection, it is closed immediately.</p>
<p>
When you are ready to open a connection, the options available to you are as follows:
<ul type=disc>
<li>
Use the RemoteData Control to establish a connection based on its properties and create an rdoConnection object as referenced by its Connection property.<br><br></li>
<li>
Declare an rdoConnection object and use the rdoEnvironment object's OpenConnection method.<br><br></li>
<li>
Create a stand-alone rdoConnection object using the Dim x As New syntax, set its properties, and use the EstablishConnection method.<br><br></li>
<li>
Use the EstablishConnection on an existing rdoConnection object after having either created a stand-alone rdoConnection object, or after having used the Close method on an existing rdoConnection object.</li>
</ul>
<p>
Each of these techniques is designed to address specific programming requirements. For example, in situations where you need to submit the same query to a number of remote databases, you might choose to create a stand-alone rdoConnection object that can be assigned to a number of rdoQuery objects via the ActiveConnection property. In other situations, you might prefer the simplicity of the RemoteData control.</p>
<p>
All of these techniques establish a physical link to a data source, like a specific SQL Server or Oracle database server. To establish a connection, you must provide the network location of the data source, the driver type, and a number of optional parameters used to identify the user to the data source.</p>
<p>
Once you have established a connection, you can use it to:
<ul type=disc>
<li>
Execute a query that returns one or more result sets using the OpenResultset method.<br><br></li>
<li>
Execute an action query using the Execute method.<br><br></li>
<li>
Create an rdoQuery object to subsequently execute a parameter query or stored procedure.<br><br></li>
<li>
Define a query that exposes one or more stored procedures as methods of the rdoConnection object.<br><br></li>
<li>
Associate the rdoConnection object with a specific rdoResultset object by setting the ActiveConnection property.<br><br></li>
<li>
Add the rdoConnection object to a chosen rdoConnections collection by using the Add method.<br><br></li>
<li>
Remove an rdoConnection object from its parent rdoConnections collection using the Remove method.</li>
</ul>
</BODY>
</HTML>

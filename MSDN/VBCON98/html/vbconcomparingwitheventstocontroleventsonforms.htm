<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Comparing WithEvents to Control Events on Forms</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcomparingwitheventstocontroleventsonforms"></a>Comparing WithEvents to Control Events on Forms</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconComparingWithEventsToControlEventsOnFormsC">
</object></p>
<p>
You've probably noticed some similarities between the way you use WithEvents variables and the way you handle the events raised by controls on a form. In both cases, when you select the event in the right-hand drop down of a code window, you get an event procedure containing the correct arguments for the event.</p>
<p>
In fact, the mechanism is exactly the same. A control is treated as a <i>property</i> of the form class, and the name of that property is the value you assigned to the control's Name property in the Properties window.</p>
<p>
It's as if there's a Public module-level variable with the same name as the control, and all of the control's event procedure names begin with that variable name, just as they would with a WithEvents variable.</p>
<p>
You can easily see this by declaring the variable <code>mWidget</code> Public instead of Private. The moment you do this, <code>mWidget</code> will show up in the Object Browser as a property of Form1, just like the controls on the form.</p>
<p>
The difference between the two cases is that Visual Basic automatically creates instances of all the controls on a form when the form is created, whereas you have to create your own instances of classes whose events you want to handle, and assign references to those objects to WithEvents variables.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;You can add your own events to forms, as discussed in "Adding an Event to a Form."</p>
</BODY>
</HTML>

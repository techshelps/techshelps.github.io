<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Internet Component Download Works</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconhowinternetcomponentdownloadworks"></a>How Internet Component Download Works</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconHowInternetComponentDownloadWorksC">
</object></p>
<p>
In Internet component download, you first package the components you want to download into a <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefcabfile">
</object><a href=JavaScript:alink_2.Click()>.cab file</a> so that the browser can download them intelligently. The Package and Deployment Wizard's packaging process builds an HTML page that refers to this cabinet file through an OBJECT tag. When a user opens this Web page, the browser reads the OBJECT tag and retrieves the necessary files for the download.</p>
<p>
As part of the .cab file creation process, the Package and Deployment Wizard creates an .inf file that contains information about the download. You can customize this file if you need to include additional information.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you update the .inf file, you must rebuild your .cab file.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Packaging Files for the Package and Deployment Wizard" in this chapter for a full list of the files created with the .cab file.</p>
<h2>The OBJECT Tag</h2>
<p>
The following HTML fragment shows the OBJECT tag for a .cab file called MyContrl.cab:</p>
<pre><code>&lt;OBJECT
   CLASSID="clsid:25BDF09D-EC8B-11CF-BD97-00AA00575603"
   CODEBASE="/Controls/MyContrl.cab#version=1,0,0,0"
   ID=MyContrl&gt;
&lt;/OBJECT&gt;
</code></pre>
<p>
The OBJECT tag shown above contains three attributes:
<ul type=disc>
<li>
CLASSID — contains the class ID used to register the control in the Windows registry.<br><br></li>
<li>
CODEBASE — points to a location from which to download the .cab file and specifies the version number of the control contained in the .cab file.<br><br></li>
<li>
ID — specifies the name to use when scripting the component.</li>
</ul>
<h2>The Download Process</h2>
<p>
The system performs the following actions when downloading a .cab file's contents onto a client machine:
<ol>
<li>
The browser checks the registry for the class ID in the OBJECT tag. If it fails to find it, it processes the CODEBASE attribute. If the browser does find the class ID, it checks the file referenced in the registry entry to see if it is current and proceeds with the download if it is not.<br><br></li>
<li>
The browser downloads and unpacks the appropriate .cab file.<br><br></li>
<li>
The browser processes the .inf file associated with the .cab file.<br><br></li>
<li>
Internet Explorer makes registry settings, including those related to the component's status as safe for scripting or safe for initializing, if appropriate.<br><br></li>
<li>
The browser checks to see whether you have any necessary files or components already installed. If you do, it checks to see whether the files or components are current. If they are current, the browser makes no changes to them. If they are not current, the browser replaces them with a new copy that it downloads and extracts.<br><br></li>
<li>
The browser installs and registers your component.</li>
</ol>
<h2>Checklist for Component Download</h2>
<p>
The following checklist shows the steps that you should follow to create a fully signed, safe Internet component download for an ActiveX control.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you are creating a download for another type of ActiveX component, you would not perform the steps involving safety settings.
<ol>
<li>
Design the software, specifying the intended software safety level.<br><br></li>
<li>
Create the software and test. If you are using the IObjectSafety interface, implement the appropriate safety settings on your objects.<br><br></li>
<li>
Create a document showing the object is safe.<br><br></li>
<li>
Get an independent review.<br><br></li>
<li>
Recreate the .cab using the Package and Deployment Wizard, and set the appropriate safety flags if you did not use the IObjectSafety interface.<br><br></li>
<li>
Modify the .inf file as required to add readme information and other files.<br><br></li>
<li>
If you modified the .inf in step 6, recreate the .cab file using Makecab.exe.<br><br></li>
<li>
Digitally sign the .cab file.<br><br></li>
<li>
Test the final .cab file with each platform on which it may run.</li>
</ol>
<h2>Resources for Component Download</h2>
<p>
The following resources may be needed to create and test your packages for Internet component download. Most of the resources are part of Visual Basic.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Resource</b></td>
<td class=label width=46%><b>Purpose</b></td>
<td class=label width=32%><b>Source</b></td>
</tr>
<tr valign=top>
<td width=22%>pdaddin.dll or<br>
pdcmdln.exe</td>
<td width=46%>Package your components for download using the Package and Deployment Wizard, either from within Visual Basic (pdaddin.dll) or as a stand-alone executable (pdcmdln.exe).</td>
<td width=32%>Visual Basic installation</td>
</tr>
<tr valign=top>
<td width=22%>lpk_tool.exe</td>
<td width=46%>Create the license for any controls.</td>
<td width=32%>Visual Basic Tools directory</td>
</tr>
<tr valign=top>
<td width=22%>makecab.exe</td>
<td width=46%>Build cabinet files.</td>
<td width=32%>Visual Basic installation </td>
</tr>
<tr valign=top>
<td width=22%>signcode.exe</td>
<td width=46%>Manage <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefdigitalsignature">
</object><a href=JavaScript:alink_3.Click()>digital signatures</a></td>
<td width=32%>ActiveX SDK</td>
</tr>
<tr valign=top>
<td width=22%>Authenticode certificate</td>
<td width=46%>Identify the developer</td>
<td width=32%>Verisign Inc., GTE, or another vendor that provides signatures</td>
</tr>
<tr valign=top>
<td width=22%>Internet Explorer </td>
<td width=46%>Test download and installation</td>
<td width=32%>www.microsoft.com</td>
</tr>
<tr valign=top>
<td width=22%>regsvr32.exe</td>
<td width=46%>Register and unregister software for testing</td>
<td width=32%>Visual Basic Tools directory</td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Experimenting With the Extensibility Model</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconexperimentingwithextensibilitymodel"></a>Experimenting With the Extensibility Model</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconExperimentingWithExtensibilityModelC">
</object></p>
<p>
Once you become more familiar with the extensibility model, it can help to experiment with the various properties, methods and events contained in it. The following is one way to do this:
<ol>
<li>
Start Visual Basic and choose Addin as the project type in the New Project dialog.<br><br></li>
<li>
In the Visual Basic Project window, double click on the Connect class module to view its code.<br><br></li>
<li>
Use Find from the Edit menu to search for OnConnection. This should place the cursor in the IDTExtensibility_OnConnection procedure.<br><br></li>
<li>
There is a comment 3 or 4 lines into the procedure suggesting that the following statement is a good place to put a breakpoint for testing code. Place a breakpoint on the suggested line.<br><br></li>
<li>
Place your cursor in the Immediate window, type <code>AddToIni</code>, then press Enter to execute that procedure. (AddToIni is a procedure in the module Addin.Bas.)<br><br></li>
<li>
Press F5 to put the Addin into Run mode. <br><br></li>
<li>
Start another instance of Visual Basic. Choose the default (Standard Exe) from the initial dialog, then choose Add-In Manager from the Add-Ins menu.<br><br></li>
<li>
Check My Addin-In on the list of Available Add-Ins. Press OK in the Add-In Manager dialog. The IDTExtensibility_OnConnection is called in the first instance of Visual Basic, and execution is suspended at the breakpoint that you set in step #4.<br><br></li>
<li>
Use Step Into from the debug menu to execute the line:<pre><code>Debug.Print VBInst.FullName
</code></pre>
<p class=tl>
Notice that the path and name of the current instance of Visual Basic is printed in the Immediate window.</P></li>
<li>
You can now use <b>VBInst</b> as the object for the example code. Simply replace the dummy object <b>Application</b>.<b>VBE</b> with the Visual Basic object <b>VBInst</b> before executing the example lines in the Immediate window.</li>
</ol>
<p>
For example, you can modify the example:</p>
<pre><code>&nbsp;Print Application.VBE.VBProjects(1).VBComponents.Count
</code></pre>
<p>
to read as follows:</p>
<pre><code>&nbsp;Print VBInst.VBProjects(1).VBComponents.Count
</code></pre>
<p>
When you press Enter on the latter line in the Immediate window, the&nbsp;&nbsp; number of Visual Basic components is printed on the next line.</p>
<p>
You now can experiment with various methods and properties in the Immediate window.</p>
</BODY>
</HTML>

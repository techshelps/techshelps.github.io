<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Properties You Should Provide</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconpropertiesyoushouldprovide"></a>Properties You Should Provide</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPropertiesYouShouldProvideC">
</object></p>
<p>
Recommended properties include Appearance, BackColor, BackStyle, BorderStyle, Enabled, Font, and ForeColor. It's also a good idea to implement properties commonly found on controls that provide functionality similar to yours.</p>
<p>
In addition, you may wish to selectively implement properties of any constituent controls on your UserControl object, as discussed in "Exposing Properties of Constituent Controls," earlier in this chapter.</p>
<p>
All of the above properties should use the appropriate data types or enumerations, as discussed in the related topics "Using Standard Control Property Types" and "Exposing Properties of Constituent Controls."</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you're authoring a control that provides its appearance using constituent controls, implementing the Appearance property is problematic. For most controls, the Appearance property is available only at design time — but you can only delegate to run-time properties of constituent controls.</p>
<h2>Procedure IDs for Standard Properties</h2>
<p>
Every property or method in your type library has an identification number, called a procedure ID or DISPID. The property or method can be accessed either by name (late binding) or by DISPID (early binding).</p>
<p>
Some properties and methods are important enough to have special DISPIDs, defined by the ActiveX specification. These standard procedure IDs are used by some programs and system functions to access standard properties of your control.</p>
<p>
For example, there's a procedure ID for the method that displays an About Box for a control. Rather than rummaging through your type library for a method named AboutBox, Visual Basic calls this procedure ID. Your method can have any name at all, as long as it has the right procedure ID.</p>
<p class=label>
<b>To assign a standard procedure ID to a property</b>
<ol>
<li>
On the <b>Tools</b> menu, click <b>Procedure Attributes</b> to open the <b>Procedure Attributes</b> dialog box.<br><br></li>
<li>
In the <b>Name</b> box, select the property.<br><br></li>
<li>
Click <b>Advanced</b> to expand the <b>Procedure Attributes</b> dialog box.<br><br></li>
<li>
In the <b>Procedure ID</b> box, select the procedure ID you want to assign to the property. If the procedure ID you need is not in the list, enter the number in the <b>Procedure ID</b> box.</li>
</ol>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Selecting (None) in the procedure ID box does not mean that the property or method will not have a procedure ID. It only means that you have not selected a particular procedure ID. Visual Basic assigns procedure IDs automatically to members marked (None).</p>
<h3>One Procedure ID to a Customer</h3>
<p>
A property or method of a control can have only one procedure ID, and no other property or method of the control can have the same procedure ID.</p>
<p>
That is, every control in your control component can have a default property (procedure ID = 0), but only one property on each control can have that procedure ID.</p>
<p>
If you assign the same procedure ID to two different members, the one that comes first in the type library is the only one that can be accessed. The other might as well not exist.</p>
<h3>Procedure IDs of Interest</h3>
<p>
It's always a good idea to assign the standard procedure ID to a property, if there is one. The Procedure Attributes dialog box lists procedure IDs by the property name they are usually associated with. You may find the following IDs of particular interest.</p>
<h4>AboutBox</h4>
<p>
Allows you to specify a method that shows an About Box for your control, as discussed in "Adding an About Box to Your Control," earlier in this chapter. There is no particular method name associated with this ID.</p>
<h4>Caption, Text</h4>
<p>
Either of these procedure IDs will give a property the Properties window behavior demonstrated by the Caption and Text properties of Visual Basic intrinsic controls. That is, when a user types a value into the Properties window, the new value will be reflected immediately in the control.</p>
<p>
This means that your Property Let procedure will be called for each keystroke the user enters, receiving a complete new value each time.</p>
<p>
The property you assign these to need not be called Caption or Text, although those properties represent the kind of functionality these procedure IDs were designed to support.</p>
<h4>(Default)</h4>
<p>
The default property of a control is the one that will be accessed when no property has been specified. For example, the following assigns the string "Struthiomimus" to the (default) Caption property of Label1:</p>
<pre><code>   Label1 = "Struthiomimus"
</code></pre>
<h4>Enabled</h4>
<p>
This procedure ID must be assigned to the Enabled property of your control, in order for its enabled/disabled behavior to match that of other controls. This is discussed in "Allowing Your Control to be Enabled or Disabled," earlier in this chapter.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The procedure IDs of interest to control authors are listed in the Procedure ID box of the Procedure Attributes dialog box. For a complete list of DISPIDs, consult the ActiveX specification.</p>
<h2>Providing Useful Defaults</h2>
<p>
Whenever you implement a property with the same name as one of the standard ambient properties, such as BackColor, Font, and ForeColor, you should consider whether the value of the corresponding property of the AmbientProperties object would be a useful default.</p>
<p>
You can see an example of this behavior by changing the size of the font on a Visual Basic form, and then adding a label or command button. The new control uses the form's current font settings as its default font settings. Most of the intrinsic controls follow this example.</p>
<p>
If you're authoring a check box, option button, or label, setting the control's default BackColor to match AmbientProperties.BackColor might be a useful service to your users.</p>
<p>
Clearly, this requires some thought about how controls are used. For example, on a text box the Font property would be a good candidate for ambient matching, while the BackColor property would not.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Using the AmbientProperties Object to Stay Consistent with the Container," earlier in this chapter.</p>
<h2>Using the ActiveX Control Interface Wizard</h2>
<p>
The ActiveX Control Interface Wizard can assist you in determining what properties to provide, and in delegating to the appropriate constituent controls.</p>
<p>
After you have placed all the constituent controls you're going to use on your UserControl, start the wizard and select your control. The wizard will examine your constituent controls, and produce a list of all the properties, methods, and events that appear in all their interfaces, plus those in the UserControl object's interface, and the standard properties listed above. You can select from this list those properties, methods, and events you want in your control's interface.</p>
<p>
The wizard will produce default mappings of your control's properties to properties of the UserControl object or of constituent controls. In subsequent steps, you can modify these mappings.</p>
<p>
When you have finished determining your control's interface and delegating to existing properties, the wizard will generate property procedure code to implement the properties, using the correct data types for standard properties, and including delegation code for all your property mappings, enormously reducing the amount of work required to generate a full-featured control.</p>
</BODY>
</HTML>

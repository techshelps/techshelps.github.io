<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Your Own Data Types</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingyourowndatatypes"></a>Creating Your Own Data Types</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingYourOwnDataTypesC">
</object></p>
<p>
You can combine variables of several different types to create user-defined types (known as <i>structs</i> in the C programming language). User-defined types are useful when you want to create a single variable that records several related pieces of information.</p>
<p>
You create a user-defined type with the Type statement, which must be placed in the Declarations section of a module. User-defined types can be declared as Private or Public with the appropriate keyword. For example:</p>
<pre><code>Private Type MyDataType</code></pre>
<p class=tl>
-or-</P><pre><code>Public Type MyDataType
</code></pre>
<p>
For example, you could create a user-defined type that records information about a computer system:</p>
<pre><code>' Declarations (of a standard module).
Private Type SystemInfo
   CPU As Variant
   Memory As Long
   VideoColors As Integer
   Cost As Currency
   PurchaseDate As Variant
End Type
</code></pre>
<h2>Declaring Variables of a User-Defined Type</h2>
<p>
You can declare local, private module-level, or public module-level variables of the same user-defined type:</p>
<pre><code>Dim MySystem As SystemInfo, YourSystem As SystemInfo
</code></pre>
<p>
The following table illustrates where, and with what scope, you can declare user-defined types and their variables.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b><br>
Procedure/Module</b></td>
<td class=label width=31%><b>You can <i>create</i> a user-defined type as...</b></td>
<td class=label width=40%><b><i>Variables</i> of a user-defined <br>
type can be declared...</b></td>
</tr>
<tr valign=top>
<td width=29%>Procedures</td>
<td width=31%>Not applicable</td>
<td width=40%>Local only</td>
</tr>
<tr valign=top>
<td width=29%>Standard modules</td>
<td width=31%>Private or public</td>
<td width=40%>Private or public</td>
</tr>
<tr valign=top>
<td width=29%>Form modules</td>
<td width=31%>Private only</td>
<td width=40%>Private only</td>
</tr>
<tr valign=top>
<td width=29%>Class modules</td>
<td width=31%>Private or public</td>
<td width=40%>Private or public</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If declared using the Dim keyword, user-defined types in Standard or Class modules will default to Public. If you intend a user-defined type to be private, make sure you declare it using the Private keyword.</p>
<h2>Assigning and Retrieving Values</h2>
<p>
Assigning and retrieving values from the elements of this variable is similar to setting and getting properties:</p>
<pre><code>MySystem.CPU = "486"
If MySystem.PurchaseDate &gt; #1/1/92# Then
</code></pre>
<p>
You can also assign one variable to another if they are both of the same user-defined type. This assigns all the elements of one variable to the same elements in the other variable.</p>
<pre><code>YourSystem = MySystem
</code></pre>
<h2>User-Defined Types that Contain Arrays</h2>
<p>
A user-defined type can contain an ordinary (fixed-size) array. For example:</p>
<pre><code>Type SystemInfo
   CPU As Variant
   Memory As Long
   DiskDrives(25) As String   ' Fixed-size array.
   VideoColors As Integer
   Cost As Currency
   PurchaseDate As Variant
End Type
</code></pre>
<p>
It can also contain a dynamic array.</p>
<pre><code>Type SystemInfo
   CPU As Variant
   Memory As Long
   DiskDrives() As String      ' Dynamic array.
   VideoColors As Integer
   Cost As Currency
   PurchaseDate As Variant
End Type
</code></pre>
<p>
You can access the values in an array within a user-defined type in the same way that you access the property of an object.</p>
<pre><code>Dim MySystem As SystemInfo
ReDim MySystem.DiskDrives(3)
MySystem.DiskDrives(0) = "1.44 MB"
</code></pre>
<p>
You can also declare an array of user-defined types:</p>
<pre><code>Dim AllSystems(100) As SystemInfo
</code></pre>
<p>
Follow the same rules to access the components of this data structure.</p>
<pre><code>AllSystems(5).CPU = "386SX"
AllSystems(5).DiskDrives(2) = "100M SCSI"
</code></pre>
<h2>Passing User-Defined Types to Procedures</h2>
<p>
You can pass procedure arguments using a user-defined type.</p>
<pre><code>Sub FillSystem (SomeSystem As SystemInfo)
   SomeSystem.CPU = lstCPU.Text
   SomeSystem.Memory = txtMemory.Text
   SomeSystem.Cost = txtCost.Text
   SomeSystem.PurchaseDate = Now
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you want to pass a user-defined type in a form module, the procedure must be private.</p>
<p>
You can return user-defined types from functions, and you can pass a user-defined type variable to a procedure as one of the arguments. User-defined types are always passed by reference, so the procedure can modify the argument and return it to the calling procedure, as illustrated in the previous example.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Because user-defined types are always passed by reference, all of the data contained in the user-defined type will be passed to and returned from the procedure. For user-defined types that contain large arrays, this could result in poor performance, especially in client/server applications where a procedure may be running on a remote machine. In such a situation, it is better to extract and pass only the necessary data from the user-defined type.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To read more about passing by reference, see "Passing Arguments to Procedures" in "Programming Fundamentals."</p>
<h2>User-Defined Types that Contain Objects</h2>
<p>
User-defined types can also contain objects.</p>
<pre><code>Private Type AccountPack
   frmInput as Form
   dbPayRollAccount as Database
End Type
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Because the Variant data type can store many different types of data, a Variant array can be used in many situations where you might expect to use a user-defined type. A Variant array is actually more flexible than a user-defined type, because you can change the type of data you store in each element at any time, and you can make the array dynamic so that you can change its size as necessary. However, a Variant array always uses more memory than an equivalent user-defined type.</p>
<h2>Nesting Data Structures</h2>
<p>
Nesting data structures can get as complex as you like. In fact, user-defined types can contain other user-defined types, as shown in the following example. To make your code more readable and easier to debug, try to keep all the code that defines user-defined data types in one module.</p>
<pre><code>Type DriveInfo
   Type As String
   Size As Long
End Type

Type SystemInfo
   CPU As Variant
   Memory As Long
   DiskDrives(26) As DriveInfo
   Cost As Currency
   PurchaseDate As Variant
End Type

Dim AllSystems(100) As SystemInfo
AllSystems(1).DiskDrives(0).Type = "Floppy"
</code></pre>
</BODY>
</HTML>

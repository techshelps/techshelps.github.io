<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scalability and Multithreading</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconprojectoptionsforcodecomponents"></a>Scalability and Multithreading</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconProjectOptionsForCodeComponentsC">
</object></p>
<p>
When a component has one thread of execution, code for only one object can execute at any given time. The Automation feature of the Component Object Model (COM) deals with this situation by <i>serializing</i> requests. That is, the requests are queued and processed one at a time until all have been completed.</p>
<p>
In a multithreading operating environment, serialization protects single-threaded objects from overlapping client requests — that is, from code in a property or method being executed while one or more previous client requests are still being executed. Overlapping requests can cause internal data errors if objects aren't designed for reentrancy, as discussed in "Apartment-Model Threading in Visual Basic."</p>
<p>
Serialization is thus an extremely important feature of Automation. However, serialization of single-threaded components means that requests are sometimes blocked. For example, suppose you're using a Widget object that has two methods:
<ul type=disc>
<li>
The Spin method takes anywhere from several seconds to half an hour.<br><br></li>
<li>
The Flip method is almost instantaneous.</li>
</ul>
<p>
Because 32-bit applications are preemptively multitasked, a second application could call the Flip method while the Spin method is already running. As shown in Figure 8.2, the short Flip method is blocked until the long Spin method is complete.</p>
<p class=label>
<b>Figure 8.2&nbsp;&nbsp; Blocking in a component with MultiUse objects</b></p>
<p>
<img src="avtcm096.gif" border=0></p>
<p>
When short operations are blocked by long ones, productivity suffers and user frustration rises. Components that behave in this fashion are said to <i>scale poorly</i>. That is, they work poorly if many requests of mixed length are made.</p>
<p>
Visual Basic has two component features for avoiding blocked calls — multithreading and SingleUse objects. These features are described in the following topics:
<ul type=disc>
<li>
<a href="vbconapartmentmodelmultithreadinginvisualbasic.htm">Apartment-Model Threading in Visual Basic</a> &nbsp; To use threads effectively, it’s important to understand Visual Basic’s use of ActiveX apartment-model threading and its implications for global data.<br><br></li>
<li>
<a href="vbcondesigningthreadsafedlls.htm">Designing Thread-Safe DLLs</a> &nbsp; Making in-process components safe for use with multithreaded clients.<br><br></li>
<li>
<a href="vbconscalabilitythroughmultithreading.htm">Designing Multithreaded Out-of-Process Components</a> &nbsp; Explains the three models available for assigning objects to threads.<br><br></li>
<li>
<a href="vbconusingmultiplethreadsofexecution.htm">Using Multiple Threads of Execution</a> &nbsp; Introducing multithreading on a single-processor machine is not necessarily a blessing.<br><br></li>
<li>
<a href="vbconeventloggingformultithreadedcomponents.htm">Event Logging for Multithreaded Components</a> &nbsp; Your component can log suppressed message box and error dialog text to the system event log or to a log file.<br><br></li>
<li>
<a href="vbcondebugginglimitationsformultithreadedcomponents.htm">Debugging Limitations for Multithreaded Components</a> &nbsp; Describes the limitations of the development environment.<br><br></li>
<li>
<a href="vbconinstancingissuesforcodecomponents.htm">Scalability Through Multiple Processes: SingleUse Objects</a> &nbsp; Visual Basic provides a second means of ensuring one thread per object, for cases where your component must show forms.</li>
</ul>
</BODY>
</HTML>

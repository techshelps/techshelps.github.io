<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding an Event to the ShapeLabel Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingeventtocontrol"></a>Adding an Event to the ShapeLabel Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingEventToControlC">
</object></p>
<p>
It’s important to distinguish between the events received by your UserControl object (or by the controls it contains) and the events your control raises. Events your control <i>receives</i> are opportunities for you to do something interesting; events your control <i>raises </i>provide opportunities for the developer who uses your control to do something interesting.</p>
<p>
Figure 4.1 shows what happens when a control author simply uses the events received by the UserControl object, and doesn’t raise any events for the developer who buys the control.</p>
<p class=label>
<b>Figure 4.1&nbsp;&nbsp;&nbsp;An ActiveX control that simply uses events</b></p>
<p>
<img src="avtcm034.gif" border=0></p>
<p>
Figure 4.2 shows what happens when the author of ControlDemo.ocx — no doubt tired of developer complaints — improves the ShapeLabel control by raising a Click event for the developer to respond to.</p>
<p class=label>
<b>Figure 4.2&nbsp;&nbsp;&nbsp;A control that raises events for the developer to use</b></p>
<p>
<img src="avtcm035.gif" border=0></p>
<p>
There are many events that might be of interest to the user of the ShapeLabel control. The Visual Basic Label control raises a Click event, and ShapeLabel is just a fancy label, so the following procedure will add a Click event. To make the event more interesting, it will be raised only if the user clicks on the oval background.</p>
<p>
Being compatible with other controls of the same type is an important reason to add a particular event to your control. Other criteria for choosing what events to raise can be found in "Raising Events from Controls," in "Building ActiveX Controls."</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX control. It begins with the topic <a href="vbconcreatingactivexcontrol.htm">Creating an ActiveX Control</a>.</p>
<p class=label>
<b>To add a Click event to the ShapeLabel control</b>
<ol>
<li>
In the <b>Project Explorer</b> window, click <b>ShapeLabel</b> to select it, then press F7 or click the <b>Code</b> button on the <b>Project Explorer</b> window toolbar, to open the <b>Code</b> window.<br><br></li>
<li>
In the <b>Object </b>box, select (<b>General</b>). In the <b>Procedure </b>box, select (<b>Declarations</b>) to position yourself at the top of the code module. Add the following code:<pre><code>Option Explicit
' Declare a public Click event with no arguments.
Public Event Click()
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>lblCaption</b>. In the <b>Procedure </b>box, select the <b>Click event</b> for the label control. Add the following code to the lblCaption_Click event procedure:<pre><code>Private Sub lblCaption_Click()
 &nbsp; ' Raise a Click event whenever the user clicks
 &nbsp; '&nbsp;&nbsp; on the label.
 &nbsp; RaiseEvent Click
End Sub
</code></pre>
<p class=tl>
The code above raises a Click event only if the user clicks on the constituent control lblCaption. It will seem more natural to users to be able to click anywhere on ShapeLabel’s oval background, so the next step shows how to raise the click event if the user clicks on the colored oval.</P></li>
<li>
In the <b>Object </b>box, select <b>UserControl</b>. In the <b>Procedure </b>box, select the <b>UserControl’s MouseUp</b> event. Add the following code to the UserControl_MouseUp event procedure:<pre><code>Private Sub UserControl_MouseUp(Button As Integer, _
 &nbsp; Shift As Integer, X As Single, Y As Single)
 &nbsp; ' Raise a Click event only if the color of the 
 &nbsp; '&nbsp;&nbsp; point that was clicked on matches the color 
 &nbsp; '&nbsp;&nbsp; of the Shape control.&nbsp; Ignore clicks that are
 &nbsp; '&nbsp;&nbsp; outside the oval.
 &nbsp; If Point(X, Y) = shpBack.FillColor Then 
 &nbsp;&nbsp;&nbsp;&nbsp; RaiseEvent Click
 &nbsp; End If
End Sub
</code></pre>
<p class=tl>
Determining whether an event occurred in a particular location is called <i>hit testing.</i></P><p class=tl>
You might expect to put the hit test code in the shpBack_Click event procedure, because shpBack is always resized to cover the entire surface of the ShapeLabel control. However, Shape controls don’t receive Click events. Instead, the Click event is received by the object that contains the Shape — in this case, the UserControl object.</P><p class=tl>
"Drawing Your Control," in "Building ActiveX Controls," discusses the use of transparent backgrounds to create irregularly shaped controls.</P></li>
<li>
In the <b>Project Explorer</b> window, click <b>Form1</b> to select it, then press F7 or click the <b>Code</b> button on the <b>Project Explorer</b> window toolbar, to open the Code window.<br><br></li>
<li>
In the <b>Object</b> box, select one of the <b>ShapeLabel</b> controls you added to Form1. In the <b>Procedure </b>box, select the <b>Click</b> event.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If the Click event does not appear, make sure the ShapeLabel designer is closed.</p><p class=tl>
Add the following code to the ShapeLabel1_Click event procedure:</P><pre><code>Private Sub ShapeLabel1_Click()
 &nbsp; MsgBox "Thanks for clicking! My caption is: " _
 &nbsp;&nbsp;&nbsp;&nbsp; &amp; ShapeLabel1.Caption
End Sub
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If the ShapeLabel you selected is not named ShapeLabel1, use the appropriate name when entering the code above.</p><p class=tl>
You can click the arrow on the Procedure box to view all of the events for the ShapeLabel control. In addition to your Click event, there are four events — DragDrop, DragOver, GotFocus, and LostFocus — that are automatically provided for you by the container, Form1.</P><p>
<img src="avtcm036.gif" border=0></P></li>
<li>
On the toolbar, click the <b>Start </b>button, or press CTRL+F5 to run TestCtlDemo. Try clicking various places on the form and on the ShapeLabel control, to verify that the Click event is being raised only when you click inside the oval background.<br><br></li>
<li>
There’s a subtle bug in the hit testing for ShapeLabel’s click event. To see this, press the mouse button while the mouse pointer is in the lower half of the red oval. Holding the mouse button down, carefully move the mouse pointer until the tip of the arrow is on the white text of ShapeLabel’s caption, then release the mouse button. The message box doesn’t appear!<p class=tl>
The lblCaption_Click event procedure doesn’t get executed, because the MouseDown event occurred over the UserControl. Therefore, when the MouseUp event occurs, it is received by the UserControl — even if the mouse has been moved completely off Form1.</P><p class=tl>
The hit test code in the MouseUp event works if the mouse button is released over the red background that shows through lblCaption’s transparent background, but not if the button is released over the white foreground color of the text. (If the button is released outside ShapeLabel, the Point function returns -1, so releasing the mouse button over some random red spot will not raise the Click event.)</P><p class=tl>
Fixing this bug is left as an exercise for the reader. (Hint: Moving the hit test to the Click event of the UserControl won’t help, because the Click event doesn’t occur when the MouseUp event is over a different object from the MouseDown.)</P></li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Adding Events to Controls" in "Building ActiveX Controls."</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX control.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=41%><b>To</b></td>
<td class=label width=59%><b>See</b></td>
</tr>
<tr valign=top>
<td width=41%>Go to the next step</td>
<td width=59%><a href="vbconcompilingusercontrol.htm">Compiling the ControlDemo Component</a></td>
</tr>
<tr valign=top>
<td width=41%>Start from the beginning</td>
<td width=59%><a href="vbconcreatingactivexcontrol.htm">Creating an ActiveX Control</a></td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingobjects"></a>Creating Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vafctCreateObject;vafctGetObject;vbconCreatingObjectsC">
</object></p>
<p>
The easiest way to create an object is to double-click a control in the Toolbox. However, to realize the full benefit of all the objects available in Visual Basic and from other applications, you can use Visual Basic's programmability features to create objects at run time.
<ul type=disc>
<li>
You can create references to an object with object variables.<br><br></li>
<li>
You can create your own objects "from scratch" with class modules.<br><br></li>
<li>
You can create your own collections with the Collection object.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Other chapters show you how to access objects. The CreateObject and GetObject functions, for example, are discussed in "Programming with Components."</p>
<h2>Using Object Variables</h2>
<p>
In addition to storing values, a variable can refer to an object. You assign an object to a variable for the same reasons you assign any value to a variable:
<ul type=disc>
<li>
Variable names are often shorter and easier to remember than the values they contain (or, in this case, the objects they refer to).<br><br></li>
<li>
Variables can be changed to refer to other objects while your code is running.<br><br></li>
<li>
Referring to a variable that contains an object is more efficient than repeatedly referring to the object itself.</li>
</ul>
<p>
Using an object variable is similar to using a conventional variable, but with one additional step — assigning an object to the variable:
<ul type=disc>
<li>
First you declare it:<p class=tl>
Dim <i>variable</i> As <i>class</i></P></li>
<li>
Then you assign an object to it:<p class=tl>
Set <i>variable</i> = <i>object</i></P></li>
</ul>
<h2>Declaring Object Variables</h2>
<p>
You declare an object variable in the same way you declare other variables, with Dim, ReDim, Static, Private, or Public. The only differences are the optional New keyword and the <i>class</i> argument; both of these are discussed later in this chapter. The syntax is:</p>
<p>
{<b>Dim | ReDim | Static | Private | Public</b>} <i>variable</i> <b>As</b> [<b>New</b>] <i>class</i></p>
<p>
For example, you can declare an object variable that refers to a form in the application called frmMain:</p>
<pre><code>Dim FormVar As New frmMain   ' Declare an object 
                           ' variable of type frmMain.
</code></pre>
<p>
You can also declare an object variable that can refer to any form in the application:</p>
<pre><code>Dim anyForm As Form         ' Generic form variable.
</code></pre>
<p>
Similarly, you can declare an object variable that can refer to any text box in your application:</p>
<pre><code>Dim anyText As TextBox      ' Can refer to any text box 
                           ' (but only a text box).
</code></pre>
<p>
You can also declare an object variable that can refer to a control of any type:</p>
<pre><code>Dim anyControl As Control   ' Generic control variable.
</code></pre>
<p>
Notice that you can declare a form variable that refers to a specific form in the application, but you cannot declare a control variable that refers to a particular control. You can declare a control variable that can refer to a specific type of control (such as TextBox or ListBox), but not to one particular control of that type (such as <code>txtEntry</code> or <code>List1</code>). However, you can assign a particular control to a variable of that type. For example, for a form with a list box called lstSample, you could write:</p>
<pre><code>Dim objDemo As ListBox
Set objDemo = lstSample
</code></pre>
<h2>Assigning Object Variables</h2>
<p>
You assign an object to an object variable with the Set statement:</p>
<p>
<b>Set</b> <i>variable</i> <b>=</b> <i>object</i></p>
<p>
Use the Set statement whenever you want an object variable to refer to an object.</p>
<p>
Sometimes you may use object variables, and particularly control variables, simply to shorten the code you have to type. For example, you might write code like this:</p>
<pre><code>If frmAccountDisplay!txtAccountBalance.Text &lt; 0 Then
   frmAccountDisplay!txtAccountBalance.BackColor = 0   frmAccountDisplay!txtAccountBalance.ForeColor = 255   
End If
</code></pre>
<p>
You can shorten this code significantly if you use a control variable:</p>
<pre><code>Dim Bal As TextBox
Set Bal = frmAccountDisplay!txtAccountBalance
If Bal.Text &lt; 0 Then
   Bal.BackColor = 0
   Bal.ForeColor = 255   
End If
</code></pre>
<h2>Specific and Generic Object Types</h2>
<p>
Specific object variables must refer to one specific type of object or class. A specific form variable can refer to only one form in the application (though it can refer to one of many instances of that form). Similarly, a specific control variable can refer to only one particular type of control in your application, such as TextBox or ListBox. To see an example, open a new project and place a text box on a form. Add the following code to the form:</p>
<pre><code>Private Sub Form_Click()
   Dim anyText As TextBox
   Set anyText = Text1
   anyText.Text = "Hello"
End Sub
</code></pre>
<p>
Run the application, and click the form. The Text property of the text box will be changed to "Hello."</p>
<p>
Generic object variables can refer to one of many specific types of objects. A generic form variable, for example, can refer to any form in an application; a generic control variable can refer to any control on any form in an application. To see an example, open a new project and place several frame, label, and command button controls on a form, in any order. Add the following code to the form:</p>
<pre><code>Private Sub Form_Click()
   Dim anyControl As Control
   Set anyControl = Form1.Controls(3)
   anyControl.Caption = "Hello"
End Sub
</code></pre>
<p>
Run the application, and click the form. The caption of the control you placed third in sequence on the form will be changed to "Hello."</p>
<p>
There are four generic object types in Visual Basic:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Generic Object<br>
Type</b></td>
<td class=label width=70%><b><br>
Object referenced</b></td>
</tr>
<tr valign=top>
<td width=30%>Form</td>
<td width=70%>Any form in the application (including MDI children and the MDI form).</td>
</tr>
<tr valign=top>
<td width=30%>Control</td>
<td width=70%>Any control in your application.</td>
</tr>
<tr valign=top>
<td width=30%>MDIForm</td>
<td width=70%>The MDI form in the application (if your application has one).</td>
</tr>
<tr valign=top>
<td width=30%>Object</td>
<td width=70%>Any object.</td>
</tr>
</table><br>
<p>
Generic object variables are useful when you don't know the specific type of object a variable will refer to at run time. For example, if you want to write code that can operate on any form in the application, you must use a generic form variable.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Because there can be only one MDI form in the application, there is no need to use the generic MDIForm type. Instead, you can use the specific MDIForm type (<code>MDIForm1</code>, or whatever you specified for the Name property of the MDI form) whenever you need to declare a form variable that refers to the MDI form. In fact, because Visual Basic can resolve references to properties and methods of specific form types before you run your application, you should always use the specific MDIForm type.</p>
<p class=indent>
The generic MDIForm type is provided only for completeness; should a future version of Visual Basic allow multiple MDI forms in a single application, it might become useful.</p>
<h2>Forms as Objects</h2>
<p>
Forms are most often used to make up the interface of an application, but they're also objects that can be called by other modules in your application. Forms are closely related to class modules. The major difference between the two is that forms can be visible objects, whereas class modules have no visible interface.</p>
<h3>Adding Custom Methods and Properties</h3>
<p>
You can add custom methods and properties to forms and access them from other modules in your application. To create a new method for a form, add a procedure declared using Public.</p>
<pre><code>' Custom method on Form1
Public Sub LateJobsCount()
   .
. ' &lt;statements&gt;
   .
End Sub
</code></pre>
<p>
You can call the LateJobsCount procedure from another module using this statement:</p>
<pre><code>Form1.LateJobsCount
</code></pre>
<p>
Creating a new property for a form can be as simple as declaring a public variable in the form module:</p>
<pre><code>Public IDNumber As Integer
</code></pre>
<p>
You can set and return the value of IDNumber on Form1 from another module using these two statements:</p>
<pre><code>Form1.IDNumber = 3
Text1.Text = Form1.IDNumber
</code></pre>
<p>
You can also use Property procedures to add custom properties to a form.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Details on Property procedures are provided in "Programming with Objects."</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can call a variable, a custom method, or set a custom property on a form without loading the form. This allows you to run code on a form without loading it into memory. Also, referencing a control without referencing one of its properties or methods does not load the form.</p>
<h2>Using the New Keyword</h2>
<p>
Use the New keyword to create a new object as defined by its class. New can be used to create instances of forms, classes defined in class modules, and collections.</p>
<h3>Using the New Keyword with Forms</h3>
<p>
Each form you create at design time is a class. The New keyword can be used to create new instances of that class. To see how this works, draw a command button and several other controls on a form. Set the form's Name property to Sample in the Properties window. Add the following code to your command button's Click event procedure:</p>
<pre><code>Dim x As New Sample
x.Show
</code></pre>
<p>
Run the application, and click the command button several times. Move the front-most form aside. Because a form is a class with a visible interface, you can see the additional copies. Each form has the same controls, in the same positions as on the form at design time.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To make a form variable and an instance of the loaded form persist, use a Static or Public variable instead of a local variable.</p>
<p>
You can also use New with the Set statement. Try the following code in a command button's Click event procedure:</p>
<pre><code>Dim f As Form1
Set f = New Form1
f.Caption = "hello"
f.Show
</code></pre>
<p>
Using New with the Set statement is faster and is the recommended method.</p>
<h3>Using the New Keyword with Other Objects</h3>
<p>
The New keyword can be used to create collections and objects from the classes you define in class modules. To see how this works, try the following example.</p>
<p>
This example demonstrates how the New keyword creates instances of a class. Open a new project, and draw a command button on Form1. From the Project menu, choose Add Class Module to add a class module to the project. Set the class module's Name property to ShowMe.</p>
<p>
The following code in the Form1 module creates a new instance of the class ShowMe, and calls the procedure contained in the class module.</p>
<pre><code>Public clsNew As ShowMe
Private Sub Command1_Click()
   Set clsNew = New ShowMe
   clsNew.ShowFrm
End Sub
</code></pre>
<p>
The ShowFrm procedure in the class module creates a new instance of the class Form1, shows the form, and then minimizes it.</p>
<pre><code>Sub ShowFrm()
   Dim frmNew As Form1
   Set frmNew = New Form1
   frmNew.Show
   frmNew.WindowState = 1
End Sub
</code></pre>
<p>
To use the example, run the application, and click the command button several times. You'll see a minimized form icon appear on your desktop as each new instance of the ShowMe class is created.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information on using New to create objects, see "Programming with Components."</p>
<h3>New Keyword Restrictions</h3>
<p>
The following table describes what you cannot do with the New keyword.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>You can't use New to create</b></td>
<td class=label width=52%><b>Example of code </b><i>not</i><b> allowed</b></td>
</tr>
<tr valign=top>
<td width=48%>Variables of fundamental data types.</td>
<td width=52%><code>Dim X As New Integer</code></td>
</tr>
<tr valign=top>
<td width=48%>A variable of any generic object type.</td>
<td width=52%><code>Dim X As New Control</code></td>
</tr>
<tr valign=top>
<td width=48%>A variable of any specific control type.</td>
<td width=52%><code>Dim X As New ListBox</code></td>
</tr>
<tr valign=top>
<td width=48%>A variable of any specific control.</td>
<td width=52%><code>Dim X As New lstNames</code></td>
</tr>
</table><br>
<h2>Freeing References to Objects</h2>
<p>
Each object uses memory and system resources. It is good programming practice to release these resources when you are no longer using an object.
<ul type=disc>
<li>
Use Unload to unload a form or control from memory.<br><br></li>
<li>
Use Nothing to release resources used by an object variable. Assign Nothing to an object variable with the Set statement.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Unload Event" and "Nothing" in the <i>Language Reference</i>.</p>
<h2>Passing Objects to Procedures</h2>
<p>
You can pass objects to procedures in Visual Basic. In the following code example, it's assumed that there is a command button on a form:</p>
<pre><code>Private Sub Command1_Click()
   ' Calls the Demo sub, and passes the form to it.
   Demo Form1
End Sub

Private Sub Demo(x As Form1)
   ' Centers the form on the screen.
   x.Left = (Screen.Width - x.Width) / 2
End Sub
</code></pre>
<p>
It's also possible to pass an object to an argument by reference and then, inside the procedure, set the argument to a new object. To see how this works, open a project, and insert a second form. Place a picture box control on each form. The following table shows the property settings that need changes:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Object</b></td>
<td class=label width=27%><b>Property</b></td>
<td class=label width=47%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=26%>Picture box on Form2</td>
<td width=27%>Name<br>
Picture</td>
<td width=47%>Picture2<br>
c:\vb\icons\arrows\arw01dn.ico</td>
</tr>
</table><br>
<p>
The Form1_Click event procedure calls the GetPicture procedure in Form2, and passes the empty picture box to it.</p>
<pre><code>Private Sub Form_Click()
Form2.GetPicture Picture1
End Sub
</code></pre>
<p>
The GetPicture procedure in Form2 assigns the Picture property of the picture box on Form2 to the empty picture box on Form1.</p>
<pre><code>Private objX As PictureBox
Public Sub GetPicture(x As PictureBox)
   ' Assign the passed-in picture box to an object 
   ' variable.
   Set objX = x
   ' Assign the value of the Picture property to Form1 
   ' picture box.
   objX.Picture = picture2.Picture
End Sub
</code></pre>
<p>
To use the example, run the application, and click Form1. You'll see the icon from Form2 appear in the picture box on Form1.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The previous topics are intended to serve as an introduction to objects. To learn more, see "Programming with Objects" and "Programming with Components."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Receiving an Asynchronous Notification Event</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconrunningproject"></a>Receiving an Asynchronous Notification Event</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconRunningProjectC">
</object></p>
<p>
When you use events for asynchronous notifications, most of the work is done by the component author. Setting up a client to receive the events is pretty easy.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX EXE. It begins with the topic <a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a>.</p>
<p class=label>
<b>To receive the CoffeeReady event in CoffeeWatch</b>
<ol>
<li>
Switch to the instance of Visual Basic that has the CoffeeWatch project loaded.<br><br></li>
<li>
In the <b>Project Explorer</b> window of the CoffeeWatch project, right-click <b>Form1</b> to open the context menu, and select <b>View Code</b> to open the code window. Comment out the code in the Click events of the two buttons.<br><br></li>
<li>
Modify the code in the Declarations section as follows:<pre><code>Option Explicit
Private WithEvents mwcmnTest As CoffeeMonitor
</code></pre>
<p class=tl>
Notice the letter ‘w’ added to the variable <code>mwcmnTest</code>, to remind the author that this is a WithEvents variable. This is one author’s private convention. The letters ‘cmn’ have been chosen to indicate a variable of type CoffeeMonitor.</P></li>
<li>
Add the following code to the Load event of Form1, to create a new CoffeeMonitor object and assign it to the WithEvents variable. At run time, Visual Basic connects the object’s events to their event procedures when this assignment takes place.<pre><code>Private Sub Form_Load()
 &nbsp; Set mwcmnTest = New CoffeeMonitor
End Sub
</code></pre>
</li>
<li>
In the Object drop down, select mwcmnTest to obtain access to its event procedures. Add the following code to the CoffeeReady event.<pre><code>Private Sub mwcmnTest_CoffeeReady()
 &nbsp; MsgBox "COFFEE!"
End Sub
</code></pre>
</li>
<li>
That’s it. Press f5 to run the project.<p class=tl>
Every ten seconds you’ll get a notification from Coffee. CoffeeWatch is not blocked in the meantime — you can move and resize it, and click the buttons.</P></li>
<li>
Close the CoffeeWatch form to return to design mode.</li>
</ol>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX EXE.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=40%><b>To</b></td>
<td class=label width=60%><b>See</b></td>
</tr>
<tr valign=top>
<td width=40%>Go to the next step</td>
<td width=60%><a href="vbconsharingcoffeemonitor.htm">Sharing the CoffeeMonitor</a></td>
</tr>
<tr valign=top>
<td width=40%>Start from the beginning</td>
<td width=60%><a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a></td>
</tr>
</table><br>
</BODY>
</HTML>

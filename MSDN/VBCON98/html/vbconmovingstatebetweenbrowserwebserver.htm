<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Moving State Between the Browser and the Web Server</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmovingstatebetweenbrowserwebserver"></a>Moving State Between the Browser and the Web Server</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconMovingStateBetweenBrowserWebServer_C">
</object></p>
<p>
A simple way of maintaining state information involves making the information a part of the requests and responses you send between the browser and the Web server. There are three ways to do this:
<ul type=disc>
<li>
Using <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefcookie">
</object><a href=JavaScript:alink_2.Click()>cookies</a> to store information on the client and send it to the Web server in requests.<br><br></li>
<li>
Using the webclass's URLData property to move information between the client and the server without permanently storing it in either location.<br><br></li>
<li>
You can use hidden fields to store small pieces of data between the client and the server.</li>
</ul>
<p>
Each approach has its advantages and disadvantages. Cookies can sometimes allow you to send more information than URLData or hidden fields, but some browsers may not allow cookie functionality. URLData ties information to a specific page, which can be useful. Hidden fields bind information to a specific form on a specific page, and are best when you want to send a small amount of data.</p>
<h2>Passing State Information with Cookies</h2>
<p>
You can use cookies to maintain some state information within a session. A <i>cookie</i> is a small packet of information that the server sends to the browser and which the browser stores for subsequent transactions with that server. The cookie includes information about the current user and a range of URLs for which the state is valid. When the browser makes another <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefhttp">
</object><a href=JavaScript:alink_3.Click()>HTTP</a> requests within that range, it includes the cookie in the request data. This allows you to maintain information about server requests and transport it between the client and the server.</p>
<p>
Most frequently, cookies are used to store a database key on the client that the server then uses to retrieve state information. In this scenario, you write the database key to the cookie and pass it to the client, where it is stored. The next time the browser sends a request to the same Web site, it includes the cookie. The Web site then uses the cookie value to retrieve the appropriate information from a database table.</p>
<p>
There are limits to the number of cookies you can send and the number that can be issued by a single site. It is recommended that you use a small number of cookies in your application and don't use them to send large amounts of data. Due to their size limitations, cookies are ideally suited for sending small pieces of information such as the user's ID.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Remember that users can turn off the ability to support cookies in their browsers, and that cookies can be temporary or not supported at all.</p>
<p>
Cookies store information for a specific server, rather than for a specific page in your application. If you want to assign unique state information for a particular page, use the URLData property to manage your state information. See "Passing State Information with the URLData Property," below, for more information.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See the HTML reference of your choice for more information on using cookies.</p>
<h2>Passing State Information with the URLData Property</h2>
<p>
You can use the URLData property to transfer information between the browser and the Web server. The URLData property appends information to specific URLs that the webclass sends to the browser. When the browser submits another request using one of these URLs, the information can be passed back to the Web server for further processing. In this way, you can send and retrieve state information without storing it in either location.</p>
<p>
The URLData property offers several advantages:
<ul type=disc>
<li>
It can be used with browsers that do not support cookies.<br><br></li>
<li>
It stores state data on the page itself. Therefore, if the user uses the back button and resubmits the page, the webclass receives the same state data that was originally sent with the page.</li>
</ul>
<p>
There are two main disadvantages to URLData. First, URLData is restricted in the amount of data it can send. The size limitation varies from browser to browser, but most browsers can handle about 2K of data in the URL. You should test the URL length you are planning to use in your application. Second, URLData is not a feasible way of sending information if you are using a form with the <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefgetmethod">
</object><a href=JavaScript:alink_4.Click()>GET method</a> in Internet Explorer 4.<i>x</i>. Use the <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefpostmethod">
</object><a href=JavaScript:alink_5.Click()>POST method</a> in this situation, or use another means to transmit your state.</p>
<p>
The URLData property can add information to URLs in the webclass's responses in two cases:
<ul type=disc>
<li>
When the webclass calls a WriteTemplate method.<br><br></li>
<li>
When the webclass calls a URLFor method.</li>
</ul>
<p>
In the WriteTemplate scenario, the webclass generates a response that typically involves formatting a template file to send to the browser. The URLData property tells the webclass to perform additional processing on the template — it must append the specified information to each URL in the template file that contains a parameter called WCU.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; The webclass adds the WCU parameter to your template each time you connect a tag attribute to a webitem or event. You can also add this notation manually if you are working without a template. </p>
<p>
This method of state management is particularly useful when you have selected wcNoState as the StateManagement property setting for your webclass. When wcNoState is selected, you cannot store information within the WebClass object on the server.</p>
<h3>Setting State Information for a URLData Response</h3>
<p>
To set state information to use with URLData, you simply assign a value to the URLData property in your event procedure. Processing differs depending on whether or not you are using a template:
<ul type=disc>
<li>
If you are working without a template, using Response.Write to send HTML to the browser, the webclass's URLFor method returns a URL to the browser that contains the URLData property's value as a parameter. <br><br></li>
<li>
If you are using a template file, the webclass processes adds your URLData property value to any location in the template where the WCU parameter appears. </li>
</ul>
<p class=indent>
<b>Note</b> &nbsp; When the webclass assigns the URL data to the WCU parameters, it scans the file for all occurances of &amp;WCU and ?WCU, and assigns the value of the URLData property to them in the format &amp;WCU=<i>Your URL data.</i> If, for some reason, you want the letters ?WCU or &amp;WCU to appear as part of your template's text and you want the webclass to ignore this text when it parses the file, enter the text as ?WCUWCU or &amp;WCUWCU. When the webclass runtime finds such as string, it will strip out the extra WCU and leave the text as you intended. This extra level of encoding is only necessary if you assign a value to URLData.</p>
<p>
For example, the following code shows how you might set state data within a custom event called "Set" for a webitem called "Item2":</p>
<pre><code>Private Sub Item2_Set()
   'Set the value of the URLData property.
   URLData = "CustomerID: 77788"

   'Use the URLFor function to launch a response.
   Response.Write "&lt;A HREF=""" &amp; URLFor(Item3) &amp; """&gt;Go to Item 3&lt;/A&gt;"

End Sub
</code></pre>
<h3>Retrieving State Information from a URLData Request</h3>
<p>
If you have previously set the URLData property for a response, the information you sent to the browser will be returned to you when the webclass processes the URL that contains the data. You can retrieve the value of the URLData property in order to manipulate and process the state information on the Web server.</p>
<p>
For example, the following code shows how you might retrieve state data within the Respond event for a webitem called "Item2":</p>
<pre><code>Private Sub Item2_Respond()
   
   'Retrieve state information and use it to customize a response.
   Response.Write "Welcome back," &amp; FetchNameFromDatabase(Me.URLData)
   
End Sub
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Handling Sequencing in Webclasses" for information on using the URLData property to set a navigational sequence in your application. See "URLData Property" in the <i>Language Reference</i>.</p>
<h2>Using Hidden Fields</h2>
<p>
You can use the HTML HiddenField control on one of your Web pages and use that field to store information for the current page. This method of state management only works on HTML pages that contain a form.</p>
<p>
Hidden fields are good for maintaining state for specific forms and are easily accessible from cookies or other client-side scripts. The main disadvantages of using hidden fields are that the information they transmit is bound to a form and is available in the HTML source view for the page, so anyone who can access the HTML source can view the data. You may want to encrypt your data when using this method.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See the HTML reference of your choice for more information on using hidden fields. </p>
</BODY>
</HTML>

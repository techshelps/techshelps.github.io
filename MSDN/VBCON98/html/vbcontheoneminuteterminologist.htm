<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The One-Minute Terminologist</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontheoneminuteterminologist"></a>The One-Minute Terminologist</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheOneMinuteTerminologist_C">
</object></p>
<p>
The following is a whirlwind tour of terms you'll meet in discussions of Visual Basic objects and their capabilities. If you're coming to Visual Basic from another programming language, or from having worked with ActiveX (formerly OLE) terminology, this topic will help you make the transition.</p>
<p>
If you're new to objects, you may find it all a little bewildering. That's okay — by taking a quick tour of the terms you're going to meet, you'll start forming a picture of how they fit together. As you discover more about objects in the rest of this chapter, you can return to this topic to integrate each piece of information into the whole.</p>
<h3>Here Goes</h3>
<p>
Objects are <i>encapsulated</i> — that is, they contain both their code and their data, making them more easier to maintain than traditional ways of writing code.</p>
<p>
Visual Basic objects have <i>properties, methods, </i>and<i> events.</i> Properties are data that describe an object. Methods are things you can tell the object to do. Events are things the object does; you can write code to be executed when events occur.</p>
<p>
Objects in Visual Basic are created from <i>classes;</i> thus an object is said to be <i>an instance of a class.</i> The class defines an object's interfaces, whether the object is public, and under what circumstances it can be created. Descriptions of classes are stored in <i>type libraries, </i>and can be viewed with <i>object browsers.</i></p>
<p>
To use an object, you must keep a <i>reference </i>to it in an <i>object variable.</i> The type of <i>binding </i>determines the speed with which an object's methods are accessed using the object variable.<i> </i>An object variable can be <i>late bound</i> (slowest), or <i>early bound</i>. Early-bound variables can be <i>DispID bound</i> or <i>vtable bound</i> (fastest).</p>
<p>
A set of properties and methods is called an <i>interface.</i> The default interface of a Visual Basic object is a <i>dual interface</i> which supports all three forms of binding. If an object variable is <i>strongly typed</i> (that is, Dim … As <i>classname</i>),<i> </i>it will use the fastest form of binding.</p>
<p>
In addition to their default interface, Visual Basic objects can implement extra interfaces to provide <i>polymorphism</i>. Polymorphism lets you manipulate many different kinds of objects without worrying about what kind each one is. <i>Multiple interfaces</i> are a feature of the Component Object Model (COM); they allow you to evolve your programs over time, adding new functionality without breaking old code.</p>
<p>
Visual Basic classes can also be <i>data-aware</i>. A class can act as a <i>consumer</i> of data by binding directly to an external source of data, or it can act as a <i>source</i> of data for other objects by providing data from an external source.</p>
<h4>On to Symphony Hall</h4>
<p>
Whew! If all of that seemed like old hat to you, you'll cruise through the rest of this chapter. If not, don't worry — there are strategically located explanations of all these terms sprinkled through the text (and presented at a much less frenetic pace).</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Segmented Applications</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconsegmentedapplications"></a>Segmented Applications</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconSegmentedApplicationsC">
</object></p>
<p>
Visual Basic enables you to think about the architecture of your application in new ways. Instead of a single, monolithic executable, you can write an application that consists of a core front-end executable supported by a number of ActiveX components. This approach offers several significant optimization benefits:
<ul type=disc>
<li>
The components are loaded on demand and can be unloaded when no longer needed.<br><br></li>
<li>
Cross-process components can be 32-bit executables on Windows 95 or Windows NT, even if other parts of the application are 16-bit components.<br><br></li>
<li>
Remote components can use the resources of other machines on the network.</li>
</ul>
<p>
In addition, the components can be debugged independently and reused in other applications. This may not improve the speed of your application, but it may improve your speed in creating the next one.</p>
<p>
To determine how to best optimize your application by segmenting it, you must evaluate the kinds of components you can create and how they fit into your application. There are three kinds of components you can create with the Professional or Enterprise editions of Visual Basic:
<ul type=disc>
<li>
Cross-process<br><br></li>
<li>
In-process<br><br></li>
<li>
Remote</li>
</ul>
<p>
These three kinds are not exclusive: You could use all three in a single application. But from the standpoint of optimizing your application, they each have very different characteristics.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Component creation is discussed in depth in the <i>Component Tools Guide</i> included with the Professional and Enterprise editions of Visual Basic.</p>
<h2>Cross-Process Components</h2>
<p>
A cross-process component is an executable program that offers its services to other programs. Like all executables, it starts up and runs with its own stack in its own process space; thus, when a application acting as a client uses one of the objects provided by a component, the operation crosses from the client's process space to the component's — hence the name. Cross-process components offer some valuable features when compared to the other types:
<ul type=disc>
<li>
Asynchronous operation ("threads").<br><br></li>
<li>
Untrapped errors in the component won't cause the calling application to crash.<br><br></li>
<li>
Interoperability between 16-bit and 32-bit applications.</li>
</ul>
<p>
Of these, the first and the last points are of particular interest from an optimization standpoint.</p>
<p>
Because a cross-process component is a separate program, it can operate asynchronously with the component acting as a client. It has a separate "thread" that multitasks with the client program (technically speaking this is not a thread but a separate process; however, conceptually the two are equivalent). The two programs can communicate and share objects, but they run independently. This is particularly useful when your application needs to perform some operation that takes a long time. The client can call the component to perform the operation and then continue responding to the user.</p>
<p>
Even if your application will run on a 32-bit system, you may not be able to make it 32-bit immediately if you rely on legacy 16-bit applications or components. However, if you segment your application using cross-process components, you can mix and match 16-bit and 32-bit components. This allows you to incrementally take advantage of 32-bit features and performance while preserving your investment in 16-bit components.</p>
<p>
For all their strengths, cross-process components have a significant disadvantage: performance. This manifests itself in a couple of ways:
<ul type=disc>
<li>
Startup speed<br><br></li>
<li>
Cross-process call overhead</li>
</ul>
<p>
A cross-process component is an executable created with Visual Basic, so the same startup issues related to application startup also apply. The good news is that if you are calling a cross-process component written in Visual Basic from another Visual Basic program, almost all the support DLLs will already be loaded. This greatly reduces the time required to start the component. Many components are smaller than your average Visual Basic application, with few or no forms to load, which again improves load time. Nevertheless, a cross-process component will always be slower to start than an in-process component.</p>
<p>
Once it is running, a cross-process component suffers from its very nature: Every interaction with the component is a cross-process call. Crossing process boundaries takes a lot of CPU cycles. So every reference to an object from the cross-process component is much more expensive than an equivalent reference to an object in the client application itself or an in-process component. Reducing the number of cross-process calls in your code can reduce the impact of the cross-process call overhead.</p>
<h2>In-Process Components</h2>
<p>
An in-process component offers its services to other programs within their process space. Compared to cross-process components, in-process components offer two advantages:
<ul type=disc>
<li>
Improved load time<br><br></li>
<li>
No cross-process overhead</li>
</ul>
<p>
With an in-process component, no new process needs to be created and no run-time DLLs need to be loaded. This can make an in-process component considerably quicker to load compared to an equivalent cross-process component.</p>
<p>
Because it is in-process, there is no cross-process overhead when referring to the methods or properties on an object supplied by the component. Objects from the component operate with the same efficiency as objects within the client application itself.</p>
<h2>Remote Components</h2>
<p>
The Enterprise Edition of Visual Basic enables you to create remote components that execute on a separate machine elsewhere on the network. Although network overhead will inevitably exact a toll on application performance, you can make up for it by using the resources of additional CPUs. This is particularly true when you work with a remote component that is operating on data that is local to the machine containing the component. Since this data would have to be fetched across the network anyway, a component operating on it locally and returning only the results across the network can actually be more efficient.</p>
<p>
For example, you might write an object in a component that can search for files matching a specified criteria on the local hard disk. By making this a remote component and placing a copy on each machine on the network, you could write a distributed file-finder program that searches all the network components in parallel, using all those CPU resources.</p>
</BODY>
</HTML>

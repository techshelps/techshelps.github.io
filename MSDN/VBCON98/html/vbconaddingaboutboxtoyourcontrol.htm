<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding an AboutBox to Your Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingaboutboxtoyourcontrol"></a>Adding an AboutBox to Your Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingAboutBoxToYourControlC">
</object></p>
<p>
ActiveX controls typically have an About "property" at the top of the Properties window, with an ellipsis button. Clicking the button shows an About box identifying the control and the software vendor that created it.</p>
<p>
Visual Basic makes it easy to provide such About boxes. You can have separate About boxes for each control in your control component (.ocx file), or one About box that all the controls in the component share.</p>
<p class=label>
<b>To add an About box to a control component</b>
<ol>
<li>
Create an About box by adding a form to your ActiveX control project, and giving it appropriate text and controls. Name the form dlgAbout.<br><br></li>
<li>
In the code window for any control in the project, add the following Sub procedure:<pre><code>Public Sub ShowAboutBox()
dlgAbout.Show vbModal
Unload dlgAbout
Set dlgAbout = Nothing
End Sub
</code></pre>
<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Unloading the About box and setting it to Nothing frees the memory it was using. This is a courtesy to the user of your controls.</p></li>
<li>
On the <b>Tools</b> menu, click <b>Procedure Attributes</b> to open the <b>Procedure Attributes</b> dialog box. If the ShowAboutBox procedure is not selected in the <b>Name</b> box, click the drop down and select it.<br><br></li>
<li>
Click <b>Advanced</b> to expand the <b>Procedure Attributes</b> dialog box.<br><br></li>
<li>
In the <b>Procedure ID</b> box, select <b>AboutBox</b> to give the ShowAboutBox procedure the correct identifier.<br><br></li>
<li>
Repeat steps 2 through 5 for each control in the project.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The name of the About box form and the method that shows it can be anything you like. The procedure above used <code>dlgAbout</code> and <code>ShowAboutBox</code> for purposes of illustration only.</p>
<p>
If you wish to have separate About boxes for each control, simply create additional forms, and show a different form in each control's ShowAboutBox method.</p>
<p>
Of course, each form you add to the project increases its size. You can get the same effect with the single dlgAbout form by giving it a property named, let us say, ControlID. This property identifies which control dlgAbout is being shown for. In each control's ShowAboutBox method, set the ControlID property before showing dlgAbout. Place code in the Load event of dlgAbout to change the text and bitmaps on the About box appropriately.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Adding properties and methods to forms is discussed in "Programming with Objects," in the <i>Visual Basic Programmer's Guide.</i></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Graphical Controls</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusinggraphicalcontrols"></a>Using Graphical Controls</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingGraphicalControlsC">
</object></p>
<p>
Visual Basic provides three controls designed to create graphical effects in an application:
<ul type=disc>
<li>
The image control<br><br></li>
<li>
The line control<br><br></li>
<li>
The shape control</li>
</ul>
<h2>Advantages of Graphical Controls</h2>
<p>
The image, line, and shape controls are very useful for creating graphics at design time. One advantage of graphical controls is that they require fewer system resources than other Visual Basic controls, which improves the performance of your Visual Basic application.</p>
<p>
Another advantage of graphical controls is that you can create graphics with less code than with graphics methods. For example, you can use either the Circle method or the shape control to place a circle on a form. The Circle method requires that you create the circle with code at run time, while you can simply draw the shape control on the form and set the appropriate properties at design time.</p>
<h2>Limitations of Graphical Controls</h2>
<p>
While graphical controls are designed to maximize performance with minimal demands on the application, they accomplish this goal by limiting other features common to controls in Visual Basic. Graphical controls:
<ul type=disc>
<li>
Cannot appear on top of other controls, unless they are inside a container that can appear on top of other controls (such as a picture box).<br><br></li>
<li>
Cannot receive focus at run time.<br><br></li>
<li>
Cannot serve as containers for other controls.<br><br></li>
<li>
Do not have an hWnd property.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information about the graphics methods, see "Using the Graphics Methods" later in this chapter. For information about the graphical controls, see "Using the Image Control," "Using the Line Control," and "Using the Shape Control" in "Using Visual Basic's Standard Controls." For information about the effect of graphics on your application's performance, see especially "Cutting Back on Graphics" in "Designing for Performance and Compatibility." </p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating the MyOSPObject Class</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingmyospobjectclass"></a>Creating the MyOSPObject Class</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingMyOSPObjectClass_C">
</object></p>
<p>
In the previous topic, we added an ActiveX DLL project to the AXData sample. In this step, we'll create a class that implements the OLE DB Simple Provider (OSP) interfaces to access data stored in a text file.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating sample data source components. It begins with the topic <a href="vbconbuildingdatasources.htm">Creating Data Sources</a>.</p>
<p class=label>
<b>To create the MyOSPObject class</b>
<ol>
<li>
In the <b>Project Explorer</b>, select <b>Class1</b> from the MyDataComponent project. In the <b>Properties</b> window, set the properties for Class1 as follows:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>Property</b></td>
<td class=label width=63%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=37%>(Name)</td>
<td width=63%>MyOSPObject</td>
</tr>
</table><br>
<p class=tl>
You may have noticed that the DataSourceBehavior is set to none. If this component is to act as a data source, shouldn't the DataSourceBehavior be set to another value? Don't worry — we'll add another class in a later step that provides the data source capability for the component.</P></li>
<li>
Double-click <b>MyOSPObject</b> in the <b>Project Explorer</b> to open its code window.<br><br></li>
<li>
In the <b>Object </b>box, select (<b>General</b>). In the <b>Procedure </b>box, select (<b>Declarations</b>) to position yourself at the top of the code module. Add the following code:<pre><code>Option Explicit
Implements OLEDBSimpleProvider
Dim MyOSPArray()
Dim RowCount As Integer
Dim ColCount As Integer
Dim colListeners As New Collection
Dim ospl As OLEDBSimpleProviderListener
Public FilePath As String
</code></pre>
<p class=tl>
Note the use of the Implements keyword for OLEDBSimpleProvider. Remember, Implements is like a contract — it means that you'll need to implement all of the interfaces of the OLEDBSimpleProvider class.</P></li>
<li>
Add the following procedures to read and write data from a file:<pre><code>Public Sub LoadData()
 &nbsp; ' This procedure loads data from a semi-colon 
 &nbsp; ' delimited file into an array.
 &nbsp; Dim GetLine As Variant
 &nbsp; Dim Spot As Integer, Position As Integer
 &nbsp; Dim Row As Integer, Col As Integer

 &nbsp; On Error GoTo ErrorTrap
 &nbsp; Open FilePath For Input Lock Read Write As #1
 &nbsp; Position = 1
 &nbsp; Row = 0
 &nbsp; Line Input #1, GetLine
 &nbsp; Spot = InStr(1, GetLine, ";")
 &nbsp; RowCount = val(Left$(GetLine, Spot))
 &nbsp; ColCount = val(Right$(GetLine, Len(GetLine) - Spot))
 &nbsp; ReDim MyOSPArray(RowCount + 1, ColCount + 1)
 &nbsp; While Not EOF(1)
 &nbsp;&nbsp;&nbsp;&nbsp; Line Input #1, GetLine
 &nbsp;&nbsp;&nbsp;&nbsp; Col = 1
 &nbsp;&nbsp;&nbsp;&nbsp; Spot = InStr(1, GetLine, ";")
 &nbsp;&nbsp;&nbsp;&nbsp; While Spot &lt;&gt; 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyOSPArray(Row, Col) = Left$(GetLine, Spot - 1)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Col = Col + 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetLine = Right$(GetLine, Len(GetLine) - Spot)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Spot = InStr(1, GetLine, ";")
 &nbsp;&nbsp;&nbsp;&nbsp; Wend
 &nbsp;&nbsp;&nbsp;&nbsp; If Len(GetLine) &lt;&gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyOSPArray(Row, Col) = GetLine
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp; Row = Row + 1
 &nbsp; Wend
 &nbsp; Close #1
 &nbsp; Exit Sub

ErrorTrap:
 &nbsp; Err.Raise (E_FAIL)
End Sub

Public Sub SaveData()
 &nbsp; ' This procedure writes data from an array to a semi-colon
 &nbsp; ' delimited file
 &nbsp; Dim PutLine As Variant
 &nbsp; Dim iRow As Integer, iCol As Integer

 &nbsp; On Error GoTo ErrorTrap
 &nbsp; Open FilePath For Output Lock Read Write As #1
 &nbsp; Print #1, RowCount &amp; ";" &amp; ColCount

 &nbsp; For iRow = 0 To RowCount
 &nbsp;&nbsp;&nbsp;&nbsp; For iCol = 1 To ColCount
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PutLine = PutLine &amp; MyOSPArray(iRow, iCol) &amp; ";"
 &nbsp;&nbsp;&nbsp;&nbsp; Next iCol
 &nbsp;&nbsp;&nbsp;&nbsp; Print #1, PutLine
 &nbsp;&nbsp;&nbsp;&nbsp; PutLine = ""
 &nbsp; Next iRow
 &nbsp; Close #1
 &nbsp; Exit Sub

ErrorTrap:
 &nbsp; Err.Raise (E_FAIL)
End Sub
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>Class</b>. In the <b>Procedure </b>box, select the <b>Terminate</b> event. Add the following code to the Class_Terminate event procedure to save the data when the class is terminated:<pre><code>Private Sub Class_Terminate()
 &nbsp; On Error Resume Next
 &nbsp; ' Call the SaveData method
 &nbsp; SaveData
End Sub
</code></pre>
</li>
</ol>
<p class=label>
<b>To implement OLEDBSimpleProvider</b></p>
<p>
Since the MyOSPObject class implements the OLEDBSimpleProvider class, we have to implement all of its interfaces, even if we aren't going to use them:
<ol>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>addOLEDBSimpleProviderListener</b> function. Add the following code to the function procedure to add listeners that will notify the class when data changes:<pre><code>Private Sub OLEDBSimpleProvider_addOLEDBSimpleProviderListener _
 &nbsp; (ByVal pospIListener As OLEDBSimpleProviderListener)
 &nbsp; ' Add a listener to the Listeners collection.
 &nbsp; If Not (pospIListener Is Nothing) Then
 &nbsp;&nbsp;&nbsp;&nbsp; Set ospl = pospIListener
 &nbsp;&nbsp;&nbsp;&nbsp; colListeners.Add ospl
 &nbsp; End If
End Sub
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>deleteRows</b> function. Add the following code to the procedure to delete a row of data from a file:<pre><code>Private Function OLEDBSimpleProvider_deleteRows _
 &nbsp; (ByVal iRow As Long, ByVal cRows As Long) As Long
 &nbsp; Dim TempArray()
 &nbsp; Dim listener As OLEDBSimpleProviderListener
 &nbsp; Dim v As Variant

 &nbsp; ' Make sure iRow is in the correct range:
 &nbsp; If iRow &lt; 1 Or iRow &gt; RowCount Then
 &nbsp;&nbsp;&nbsp;&nbsp; Err.Raise (E_FAIL)
 &nbsp; End If

 &nbsp; ' Set cRows to the actual number which can be deleted
 &nbsp; If iRow + cRows &gt; RowCount + 1 Then 
 &nbsp;&nbsp;&nbsp;&nbsp; cRows = RowCount - iRow + 1
 &nbsp; End If

 &nbsp; ' Establish a Temporary Array
 &nbsp; cNewRows = RowCount - cRows
 &nbsp; ReDim TempArray(cNewRows + 1, ColCount + 1)

 &nbsp; ' Notify each listener:
 &nbsp; For Each v In colListeners
 &nbsp;&nbsp;&nbsp;&nbsp; Set listener = v
 &nbsp;&nbsp;&nbsp;&nbsp; listener.aboutToDeleteRows iRow, cRows
 &nbsp; Next

 &nbsp; ' Copy over the first rows which are not being deleted
 &nbsp; For Row = 0 To iRow - 1
 &nbsp;&nbsp;&nbsp;&nbsp; For Col = 0 To ColCount
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TempArray(Row, Col) = MyOSPArray(Row, Col)
 &nbsp;&nbsp;&nbsp;&nbsp; Next Col
 &nbsp; Next Row

 &nbsp; ' Copy the last rows which are not being deleted
 &nbsp; For Row = iRow + cRows To RowCount
 &nbsp;&nbsp;&nbsp;&nbsp; For Col = 0 To ColCount
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TempArray(Row - cRows, Col) = MyOSPArray(Row, Col)
 &nbsp;&nbsp;&nbsp;&nbsp; Next Col
 &nbsp; Next Row

 &nbsp; ' Re-allocate the array to copy into it
 &nbsp; ReDim MyOSPArray(cNewRows + 1, ColCount + 1)

 &nbsp; ' Set the real row count back in
 &nbsp; RowCount = cNewRows

 &nbsp; ' Copy over the rows
 &nbsp; For Row = 0 To cNewRows
 &nbsp;&nbsp;&nbsp;&nbsp; For Col = 0 To ColCount
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyOSPArray(Row, Col) = TempArray(Row, Col)
 &nbsp;&nbsp;&nbsp;&nbsp; Next Col
 &nbsp; Next Row

 &nbsp; ' Clear the temporary array
 &nbsp; ReDim TempArray(0)

 &nbsp; ' Notify each listener
 &nbsp; For Each v In colListeners
 &nbsp;&nbsp;&nbsp;&nbsp; Set listener = v
 &nbsp;&nbsp;&nbsp;&nbsp; listener.deletedRows iRow, cRows
 &nbsp; Next

 &nbsp; ' Return number of deleted rows
 &nbsp; OLEDBSimpleProvider_deleteRows = cRows
End Function
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>find</b> function. Add the following code to the procedure to find data within a file:<pre><code>Private Function OLEDBSimpleProvider_find(ByVal iRowStart As Long, _
 &nbsp; ByVal iColumn As Long, ByVal val As Variant, _
 &nbsp; ByVal findFlags As OSPFIND, ByVal compType As OSPCOMP) As Long

 &nbsp; Dim RowStart As Integer, RowStop As Integer
 &nbsp; If (findFlags And (OSPFIND_UP Or OSPFIND_UPCASESENSITIVE)) _
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;&gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp; RowStart = RowCount + 1
 &nbsp;&nbsp;&nbsp;&nbsp; RowStop = 0
 &nbsp;&nbsp;&nbsp;&nbsp; StepValue = -1
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; RowStart = 0
 &nbsp;&nbsp;&nbsp;&nbsp; RowStop = RowCount + 1
 &nbsp;&nbsp;&nbsp;&nbsp; StepValue = 1
 &nbsp; End If

 &nbsp; If (findFlags And (OSPFIND_CASESENSITIVE Or _
 &nbsp;&nbsp;&nbsp;&nbsp; OSPFIND_UPCASESENSITIVE)) &lt;&gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp; CaseSens = 1&nbsp;&nbsp; 'Use a Text Compare not Case Sensitive
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; CaseSens = 0&nbsp;&nbsp; 'Not Case Sensitive use Binary Compare
 &nbsp; End If

 &nbsp; If VarType(val) = vbString Then
 &nbsp;&nbsp;&nbsp;&nbsp; StringComp = True
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; StringComp = False
 &nbsp; End If

 &nbsp; iAnswerRow = -1
 &nbsp; For iRow = RowStart To RowStop Step StepValue
 &nbsp;&nbsp;&nbsp;&nbsp; If StringComp Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CompResult = StrComp(MyOSPArray(iRow, iColumn), _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; val, CaseSens)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Select Case (compType)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case OSPCOMP_DEFAULT, OSPCOMP_EQ:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If CompResult = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iAnswerRow = iRow
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case OSPCOMP_GE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If CompResult &gt;= 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iAnswerRow = iRow
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case OSPCOMP_GT
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If CompResult &gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iAnswerRow = iRow
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case OSPCOMP_LE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If CompResult &lt;= 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iAnswerRow = iRow
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case OSPCOMP_LT
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If CompResult &lt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iAnswerRow = iRow
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case OSPCOMP_NE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If CompResult &lt;&gt; 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iAnswerRow = iRow
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Select
 &nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Select Case (compType)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case OSPCOMP_DEFAULT, OSPCOMP_EQ:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If MyOSPArray(iRow, iColumn) = val Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iAnswerRow = iRow
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case OSPCOMP_GE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If MyOSPArray(iRow, iColumn) &gt;= val Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iAnswerRow = iRow
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case OSPCOMP_GT
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If MyOSPArray(iRow, iColumn) &gt; val Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iAnswerRow = iRow
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case OSPCOMP_LE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If MyOSPArray(iRow, iColumn) &lt;= val Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iAnswerRow = iRow
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case OSPCOMP_LT
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If MyOSPArray(iRow, iColumn) &lt; val Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iAnswerRow = iRow
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case OSPCOMP_NE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If MyOSPArray(iRow, iColumn) &lt;&gt; val Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iAnswerRow = iRow
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit For
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Select
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; Next iRow
 &nbsp; OLEDBSimpleProvider_find = iAnswerRow
End Function
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>getColumnCount</b> function. Add the following code to the procedure to return the number of fields within a file:<pre><code>Private Function OLEDBSimpleProvider_getColumnCount() As Long
 &nbsp; OLEDBSimpleProvider_getColumnCount = ColCount
End Function
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>getEstimatedRows</b> function. Add the following code to the procedure to return the estimated number of rows of data within a file:<pre><code>Private Function OLEDBSimpleProvider_getEstimatedRows() As Long
 &nbsp; OLEDBSimpleProvider_getEstimatedRows = RowCount
End Function
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>getLocale</b> function. Add the following code to the procedure:<pre><code>Private Function OLEDBSimpleProvider_getLocale() As String
 &nbsp; OLEDBSimpleProvider_getLocale = ""
End Function
</code></pre>
<p class=tl>
Note that in this case the function simply returns a null value. Even though it doesn't do anything, the function has to be added — since this class implements OLEDBSimpleProvider, all of its interfaces have to be included.</P></li>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>getRowCount</b> function. Add the following code to the procedure to return the number of rows of data within a file:<pre><code>Private Function OLEDBSimpleProvider_getRowCount() As Long
 &nbsp; OLEDBSimpleProvider_getEstimatedRows = RowCount
End Function
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>getRWStatus</b> function. Add the following code to the procedure to set the Read/Write status by column — in this case, the first column will be read-only while the remaining columns will be read-write:<pre><code>Private Function OLEDBSimpleProvider_getRWStatus _
 &nbsp; (ByVal iRow As Long, ByVal iColumn As Long) As OSPRW
 &nbsp; If iColumn = 1 Then
 &nbsp;&nbsp;&nbsp;&nbsp; ' Make the first column read-only
 &nbsp;&nbsp;&nbsp;&nbsp; OLEDBSimpleProvider_getRWStatus = OSPRW_READONLY
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; ' Make the column read-write
 &nbsp;&nbsp;&nbsp;&nbsp; OLEDBSimpleProvider_getRWStatus = OSPRW_READWRITE
 &nbsp; End If
End Function
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>getVariant</b> function. Add the following code to the procedure to return data stored in a specific row and column:<pre><code>Private Function OLEDBSimpleProvider_getVariant _
 &nbsp; (ByVal iRow As Long, ByVal iColumn As Long, _
 &nbsp; ByVal format As OSPFORMAT) As Variant
 &nbsp; OLEDBSimpleProvider_getVariant = MyOSPArray(iRow, iColumn)
End Function
</code></pre>
<p class=tl>
The getVariant function also accepts a format argument which can be used to determine the formatting of the data returned.</P></li>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>insertRows</b> function. Add the following code to the procedure to insert a new row of data into a file:<pre><code>Private Function OLEDBSimpleProvider_insertRows _
 &nbsp; (ByVal iRow As Long, ByVal cRows As Long) As Long
 &nbsp; Dim TempArray()
 &nbsp; Dim listener As OLEDBSimpleProviderListener
 &nbsp; Dim v As Variant

 &nbsp; ' Establish a temporary array
 &nbsp; cNewRows = RowCount + cRows
 &nbsp; ReDim TempArray(cNewRows + 1, ColCount + 1)

 &nbsp; ' If inserting past the end of the array, insert at 
 &nbsp; ' the end of the array
 &nbsp; If iRow &gt; RowCount Then
 &nbsp;&nbsp;&nbsp;&nbsp; iRow = RowCount + 1
 &nbsp; End If

 &nbsp; ' Notify listener
 &nbsp; For Each v In colListeners
 &nbsp;&nbsp;&nbsp;&nbsp; Set listener = v
 &nbsp;&nbsp;&nbsp;&nbsp; listener.aboutToInsertRows iRow, cRows
 &nbsp; Next

 &nbsp; ' Copy over the existing rows
 &nbsp; For Row = 0 To iRow
 &nbsp;&nbsp;&nbsp;&nbsp; For Col = 0 To ColCount
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TempArray(Row, Col) = MyOSPArray(Row, Col)
 &nbsp;&nbsp;&nbsp;&nbsp; Next Col
 &nbsp; Next Row

 &nbsp; ' Copy the last rows which follow the inserted rows
 &nbsp; For Row = iRow + 1 + cRows To cNewRows
 &nbsp;&nbsp;&nbsp;&nbsp; For Col = 0 To ColCount
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TempArray(Row, Col) = MyOSPArray(Row - cRows, Col)
 &nbsp;&nbsp;&nbsp;&nbsp; Next Col
 &nbsp; Next Row

 &nbsp; ' Re-allocate the array to copy into it
 &nbsp; ReDim MyOSPArray(cNewRows + 1, ColCount + 1)

 &nbsp; ' Copy over the rows
 &nbsp; For Row = 0 To cNewRows
 &nbsp;&nbsp;&nbsp;&nbsp; For Col = 0 To ColCount
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyOSPArray(Row, Col) = TempArray(Row, Col)
 &nbsp;&nbsp;&nbsp;&nbsp; Next Col
 &nbsp; Next Row

 &nbsp; ' Clear the temporary array
 &nbsp; ReDim TempArray(0)

 &nbsp; ' Set the real row count back in
 &nbsp; RowCount = cNewRows

 &nbsp; ' Notify listeners
 &nbsp; For Each v In colListeners
 &nbsp;&nbsp;&nbsp;&nbsp; Set listener = v
 &nbsp;&nbsp;&nbsp;&nbsp; listener.insertedRows iRow, cRows
 &nbsp; Next

 &nbsp; ' Return number of inserted rows
 &nbsp; OLEDBSimpleProvider_insertRows = cRows
End Function
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>isAsynch</b> function. Add the following code to the procedure to determine if the OSP can return data asynchronously:<pre><code>Private Function OLEDBSimpleProvider_isAsync() As Long
 &nbsp; OLEDBSimpleProvider_isAsync = False
End Function
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>removeOLEDBSimpleProviderListener</b> function. Add the following code to the procedure to remove a listener:<pre><code>Private Sub OLEDBSimpleProvider_removeOLEDBSimpleProviderListener _
 &nbsp; (ByVal pospIListener As OLEDBSimpleProviderListener)
 &nbsp; ' Remove the listener
 &nbsp; For i = 1 To colListeners.Count
 &nbsp;&nbsp;&nbsp;&nbsp; If colListeners(i) Is pospIListener Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; colListeners.Remove i
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; Next
End Sub
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>setVariant</b> function. Add the following code to the procedure to retrieve data from a particular row and column and to designate a listener to provide notification that data has changed:<pre><code>Private Sub OLEDBSimpleProvider_setVariant(ByVal iRow As Long, _
 &nbsp; ByVal iColumn As Long, ByVal format As OSPFORMAT, _
 &nbsp; ByVal Var As Variant)
 &nbsp; Dim listener As OLEDBSimpleProviderListener
 &nbsp; Dim v As Variant

 &nbsp; For Each v In colListeners
 &nbsp;&nbsp;&nbsp;&nbsp; Set listener = v
 &nbsp;&nbsp;&nbsp;&nbsp; listener.aboutToChangeCell iRow, iColumn&nbsp;&nbsp; ' Pre-notification
 &nbsp; Next

 &nbsp; MyOSPArray(iRow, iColumn) = Var

 &nbsp; For Each v In colListeners
 &nbsp;&nbsp;&nbsp;&nbsp; Set listener = v
 &nbsp;&nbsp;&nbsp;&nbsp; listener.cellChanged iRow, iColumn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Post-notification
 &nbsp; Next
End Sub
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>OLEDBSimpleProvider</b>. In the <b>Procedure </b>box, select the <b>stopTransfer</b> function. Add the following code to the procedure:<pre><code>Private Sub OLEDBSimpleProvider_stopTransfer()
 &nbsp; ' Do nothing because we are already populated
End Sub
</code></pre>
<p class=tl>
Note that there is no code in this procedure, but the procedure must be included because this class implements OLEDBSimpleProvider. You could add code here that would allow you to cancel loading during a long transfer.</P></li>
<li>
Choose <b>Save Project Group</b> from the <b>File</b> menu to save your changes. When prompted for a file name for the Class module, choose the default (MyOSPObject.cls). When prompted for a file name for the Project, choose the default (MyDataComponent.vbp).</li>
</ol>
<p>
Whew! If that seemed like a lot of code, there's a good reason for it — the MyOSPObject class provides much of the functionality that you might find in a database. With OSP, you can use almost any file as you might have used a database in the past.</p>
<p>
In the next step, we'll create another class that acts as the data source to the MyOSPObject class.</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating sample ActiveX data sources.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>To</b></td>
<td class=label width=50%><b>See</b></td>
</tr>
<tr valign=top>
<td width=50%>Go to the next step</td>
<td width=50%><a href="vbconcreatingmydatasourceclass.htm">Creating the MyDataSource Class</a></td>
</tr>
<tr valign=top>
<td width=50%>Start from the beginning</td>
<td width=50%><a href="vbconbuildingdatasources.htm">Creating Data Sources</a></td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The MouseDown Event</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconthemousedownevent"></a>The MouseDown Event</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheMouseDownEventC">
</object></p>
<p>
MouseDown is the most frequently used of the three mouse events. It can be used to reposition controls on a form at run time or to create graphical effects, for instance. The MouseDown event is triggered when a mouse button is pressed.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The mouse events are used to recognize and respond to the various mouse states as separate events and should not be confused with the Click and DblClick events. The Click event recognizes when a mouse button has been pressed and released, but only as a single action — a click. The mouse events also differ from the Click and DblClick events in that they enable you to distinguish between the left, right, and middle mouse buttons and the SHIFT, CTRL, and ALT keys.</p>
<h2>Using MouseDown with the Move Method</h2>
<p>
The MouseDown event is combined with the Move method to move a command button to a different location on a form. The new location is determined by the position of the mouse pointer: When the user clicks anywhere on the form (except on the control), the control moves to the cursor location.</p>
<p>
A single procedure, Form_MouseDown, performs this action:</p>
<pre><code>Private Sub Form_MouseDown (Button As Integer, _
      Shift As Integer, X As Single, Y As Single)
   Command1.Move X, Y
End Sub
</code></pre>
<p>
The Move method places the command button control's upper-left corner at the location of the mouse pointer, indicated by the <i>x</i> and <i>y</i> arguments. You can revise this procedure to place the <i>center</i> of the control at the mouse location:</p>
<pre><code>Private Sub Form_MouseDown (Button As Integer, _
      Shift As Integer, X As Single, Y As Single)
   Command1.Move (X - Command1.Width / 2), _
   (Y - Command1.Height / 2)
End Sub
</code></pre>
<h2>Using MouseDown with the Line Method</h2>
<p>
The Click-A-Line sample application responds to a mouse click by drawing a line from the previous drawing location to the new position of the mouse pointer. This application uses the MouseDown event and the Line method. Using the following syntax, the Line method will draw a line from the last point drawn to the point (<i>x2</i>, <i>y2</i>):</p>
<p>
<b>Line</b> – (<i>x2</i>, <i>y2</i>)</p>
<p>
Click-A-Line uses a blank form with one procedure, Form_MouseDown:</p>
<pre><code>Private Sub Form_MouseDown (Button As Integer, _
      Shift As Integer, X As Single, Y As Single)
   Line -(X, Y)
End Sub
</code></pre>
<p>
The first line starts at the upper-left corner, which is the default origin. Thereafter, whenever the mouse button is pressed, the application draws a straight line extending from the previous line to the present location of the mouse pointer. The result is a series of connected lines, as shown in Figure 11.1.</p>
<p class=label>
<b>Figure 11.1&nbsp;&nbsp;&nbsp;Connecting lines are drawn whenever MouseDown is invoked</b></p>
<p>
<img src="avp11002.gif" border=0></p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "MouseDown Event" in the <i>Language Reference</i>.</p>
</BODY>
</HTML>

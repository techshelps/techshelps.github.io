<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Giving Your Control a Transparent Background</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcongivingyourcontroltransparentbackground"></a>Giving Your Control a Transparent Background</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconGivingYourControlTransparentBackgroundC">
</object></p>
<p>
Setting the BackStyle property of the UserControl object to Transparent allows whatever is behind your control to be seen, in between the constituent controls on your UserControl's surface. When the BackStyle property is set to Transparent, the BackColor and Picture properties of the UserControl are ignored.</p>
<h3>Bitmaps with Transparent Backgrounds</h3>
<p>
If you assign a bitmap to the UserControl's MaskPicture property, and set the MaskColor property of the UserControl equal to the background color of the bitmap, Visual Basic will clip around the parts of the bitmap that are not equal to the MaskColor — even if those parts are not contiguous.</p>
<p>
You can draw on the visible surface of the Bitmap using the graphics methods of the UserControl object, such as Line, Circle, and PaintPicture. Visual Basic will clip your drawing to the visible parts of the bitmap.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This feature is supported for image-type bitmaps, such as BMP, GIF, JPEG, and DIB. It is not supported for Windows metafiles, icons, or cursors.</p>
<h3>Labels with Transparent BackStyle</h3>
<p>
If one of the constituent controls on the UserControl is a Label whose BackStyle property has also been set to Transparent, and whose Font property specifies a TrueType font, Visual Basic will clip around the font. In addition, mouse clicks that fall in the spaces between letters will be passed through to the container.</p>
<h3>Performance Considerations</h3>
<p>
Setting BackStyle to Transparent may affect the performance of your control. Visual Basic must do a great deal of clipping to make the background show through correctly if your control uses:
<ul type=disc>
<li>
A large number of constituent controls.<br><br></li>
<li>
A complex bitmap.<br><br></li>
<li>
A Label control with a transparent background, a TrueType font, and a large amount of text.</li>
</ul>
<p>
To improve the performance of your control, you may be able to create a lightweight user control. The rules for creating controls that are both lightweight and transparent differ somewhat from regular controls. Lightweight user controls are discussed in depth in "Creating Lightweight Controls," later in this chapter.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Controls a developer places on a container with a transparent background are not visible. If you want your control to be used as a control container by developers, don't give it a transparent background.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Managing State in IIS Applications</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconhandlingstateiniisapplications"></a>State Management in IIS Applications</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconHandlingStateInIISApplicationsC">
</object></p>
<p>
Typically, Internet applications are <i>stateless,</i> in that the protocol that passes requests and responses between the browser and Web server is not capable of maintaining&nbsp; information between each request. Therefore, the protocol does not "remember" any information from previous requests when it receives a new request.</p>
<p>
Because the protocol itself cannot maintain state, you must use other means to store information you want the application to remember between requests. There are several ways you can store state for a Web-based application:
<ul type=disc>
<li>
<a href="vbconstoringstateinobjects.htm">Use the WebClass object or other objects</a> on the server to store state information between client requests.<br><br></li>
<li>
<a href="vbconstoringstateindatabases.htm">Use a database</a> to store state information between requests.<br><br></li>
<li>
<a href="vbconmovingstatebetweenbrowserwebserver.htm">Move state information back and forth between the server and the browser</a> on each request, using <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefcookie">
</object><a href=JavaScript:alink_2.Click()>cookies</a>, the URLData property, or hidden HTML fields.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can use a combination of these methods. For example, you might store information in a database and use cookies to send the database keys to the client.</p>
<p>
Each approach has its own advantages and disadvantages. Storing state in objects is easy, but it may affect the scalability of your applications because the server must keep the object instantiated across requests and locate the same object each time it makes a subsequent request. Using databases is more scalable, but requires you to manage connections and recordsets. Moving state back and forth between client and server allows you to avoid storing information in either location but does increase the bandwidth of each request, has capacity limitations, and is potentially less secure.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ANSI, DBCS, and Unicode: Definitions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconansidbcsunicodedefinitions"></a>ANSI, DBCS, and Unicode: Definitions</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconANSIDBCSUnicodeDefinitionsC">
</object></p>
<p>
Visual Basic uses Unicode to store and manipulate strings. Unicode is a character set where 2 bytes are used to represent each character. Some other programs, such as the Windows 95 API, use ANSI (American National Standards Institute) or DBCS to store and manipulate strings. When you move strings outside of Visual Basic, you may encounter differences between Unicode and ANSI/DBCS. The following table shows the ANSI, DBCS, and Unicode character sets in different environments.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Environment</b></td>
<td class=label width=50%><b>Character set(s) used</b></td>
</tr>
<tr valign=top>
<td width=50%>Visual Basic</td>
<td width=50%>Unicode</td>
</tr>
<tr valign=top>
<td width=50%>32-bit object libraries</td>
<td width=50%>Unicode</td>
</tr>
<tr valign=top>
<td width=50%>16-bit object libraries</td>
<td width=50%>ANSI and DBCS</td>
</tr>
<tr valign=top>
<td width=50%>Windows NT API</td>
<td width=50%>Unicode</td>
</tr>
<tr valign=top>
<td width=50%>Automation in Windows NT</td>
<td width=50%>Unicode</td>
</tr>
<tr valign=top>
<td width=50%>Windows 95 API</td>
<td width=50%>ANSI and DBCS</td>
</tr>
<tr valign=top>
<td width=50%>Automation in Windows 95</td>
<td width=50%>Unicode</td>
</tr>
</table><br>
<h3>ANSI</h3>
<p>
ANSI is the most popular character standard used by personal computers. Because the ANSI standard uses only a single byte to represent each character, it is limited to a maximum of 256 character and punctuation codes. Although this is adequate for English, it doesn't fully support many other languages.</p>
<h3>DBCS</h3>
<p>
DBCS is used in Microsoft Windows systems that are distributed in most parts of Asia. It provides support for many different East Asian language alphabets, such as Chinese, Japanese, and Korean. DBCS uses the numbers 0 – 128 to represent the ASCII character set. Some numbers greater than 128 function as <i>lead-byte characters</i>, which are not really characters but simply indicators that the next value is a character from a non-Latin character set. In DBCS, ASCII characters are only 1 byte in length, whereas Japanese, Korean, and other East Asian characters are 2 bytes in length.</p>
<h3>Unicode</h3>
<p>
Unicode is a character-encoding scheme that uses 2 bytes for <i>every</i> character. The International Standards Organization (ISO) defines a number in the range of 0 to 65,535 (2<sup>16</sup> – 1) for just about every character and symbol in every language (plus some empty spaces for future growth). On all 32-bit versions of Windows, Unicode is used by the Component Object Model (COM), the basis for OLE and ActiveX technologies. Unicode is fully supported by Windows NT. Although both Unicode and DBCS have double-byte characters, the encoding schemes are completely different.</p>
<h3>Character Code Examples</h3>
<p>
Figure 16.4 shows an example of the character code in each character set. Note the different codes in each byte of the double-byte characters.</p>
<p class=label>
<b>Figure 16.4&nbsp;&nbsp;&nbsp;Character codes for "A" in ANSI, Unicode, and DBCS</b></p>
<p>
<img src="avp16008.gif" border=0></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Programming in the FSO Object Model</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconprogramminginfsoobjectmodel"></a>Programming in the FSO Object Model</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconProgrammingInFSOObjectModelC">
</object></p>
<p>
Programming in the FSO object model involves three main tasks:
<ul type=disc>
<li>
Using the CreateObject method, or dimension a variable as a FileSystemObject object to create a FileSystemObject object.<br><br></li>
<li>
Using the appropriate method on the newly-created object.<br><br></li>
<li>
Accessing the object's properties.</li>
</ul>
<p>
The FSO object model is contained in a type library called Scripting, which is located in the file Scrrun.Dll. If you don't already have a reference to it, check "Microsoft Scripting Runtime" in the References dialog available from the Properties menu. You can then use the Object Browser to view its objects, collections, properties, methods, and events, as well as its constants.</p>
<h2>Creating a FileSystemObject Object</h2>
<p>
The first step is to create a FileSystemObject object to work with. You can do this in two ways:
<ul type=disc>
<li>
Dimension a variable as type FileSystemObject object:<pre><code>Dim fso As New FileSystemObject
</code></pre>
</li>
<li>
Use the CreateObject method to create a FileSystemObject object:<pre><code>Set fso = CreateObject("Scripting.FileSystemObject")
</code></pre>
<p class=tl>
In the above syntax, Scripting is the name of the type library, and FileSystemObject is the name of the object which you want to create an instance of.</P></li>
</ul>
<p class=indent>
<B><b>Note</b></B> &nbsp; The first method works only in Visual Basic, while the second method works either in Visual Basic or VBScript.</p>
<h2>Using the Appropriate Method</h2>
<p>
The next step is to use the appropriate method of the FileSystemObject object. For example, if you want to <i>create</i> a new object, you can use either CreateFolder or CreateTextFile. (The FSO object model doesn't support the creation or deletion of drives.)</p>
<p>
If you want to delete objects, you can use the DeleteFile and DeleteFolder methods of the FileSystemObject object, or the Delete method of the File and Folder objects.</p>
<p>
Using the appropriate methods, you can also copy and move files and folders.</p>
<p>
Note that some functionality in the FileSystemObject object model is redundant. For example, you can copy a file using either the CopyFile method of the FileSystemObject object, or you can use the Copy method of the File object. The methods work the same. Both exist to give you maximum programming flexibility.</p>
<h3>Accessing Existing Drives, Files, and Folders</h3>
<p>
To gain access to an <i>existing</i> drive, file, or folder, use the appropriate "get" method of the FileSystemObject object:
<ul type=disc>
<li>
GetDrive<br><br></li>
<li>
GetFolder<br><br></li>
<li>
GetFile</li>
</ul>
<p>
For example:</p>
<pre><code>Dim fso As New FileSystemObject, fil As File
Set fil = fso.GetFile("c:\test.txt")
</code></pre>
<p>
Note, however, that you don't need to use the "get" methods for newly-created objects, since the "create" functions already return a handle to the newly-created object. For example, if you create a new folder using the CreateFolder method, you don't then need to use the GetFolder method to access its properties, such as Name, Path, Size, and so forth. Just set a variable to the CreateFolder function to gain a handle to the newly-created folder, then access its properties, methods, and events:</p>
<pre><code>Private Sub Create_Folder()
 &nbsp; Dim fso As New FileSystemObject, fldr As Folder
 &nbsp; Set fldr = fso.CreateFolder("C:\MyTest")
 &nbsp; MsgBox "Created folder: " &amp; fldr.Name
End Sub</code></pre>
<h2>Accessing the Object's Properties</h2>
<p>
Once you have a handle to an object, you can access its properties. For example, say you want to obtain the name of a particular folder. First you create an instance of the object, then you get a handle to it with the appropriate method (in this case, the GetFolder method, since the folder already exists):</p>
<pre><code>Set fldr = fso.GetFolder("c:\")
</code></pre>
<p>
Now that you have a handle to a Folder object, you can check its Name property:</p>
<pre><code>Debug.Print "Folder name is: "; fldr.Name
</code></pre>
<p>
If you want to find out the last time a file was modified, use the following syntax:</p>
<pre><code>Dim fso As New FileSystemObject, fil As File
Set fil = fso.GetFile("c:\detlog.txt")&nbsp; ' Get a File object to query.
Debug.Print "File last modified: "; fil.DateLastModified ' Print info.</code></pre>
</BODY>
</HTML>

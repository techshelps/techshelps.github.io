<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scroll Bar Controls Scenario: Creating a Scrollable Graphics Viewport</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconscrollbarcontrolsscenariocreatingscrollablegraphicsviewport"></a>Scroll Bar Controls Scenario: Creating a Scrollable Graphics Viewport</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconScrollBarControlsScenarioCreatingScrollableGraphicsViewportC">
</object></p>
<p>
The horizontal and vertical scroll bar controls can be used, in addition to the picture box control, to create a scrollable graphics viewport application. The picture box control alone will not allow you to scroll a graphic if it exceeds its boundaries — the picture box control does not automatically add scroll bars.</p>
<p>
This application uses two picture boxes. The first is referred to as the stationary <i>parent</i> picture box control. The second, which is contained within the parent, is referred to as the <i>child</i> picture box control. The child picture box contains the graphic image and is moved around within the parent picture box control when the scroll bar controls are used.</p>
<p class=label>
<b>Figure 7.25&nbsp;&nbsp;&nbsp;Adding scroll bar controls at design time</b></p>
<p>
<img src="avp07043.gif" border=0></p>
<p>
Start by creating a new project and then draw two picture boxes, a horizontal scroll bar, and a vertical scroll bar on the form, as shown in Figure 7.25.</p>
<p>
The form's Form_Load event is used to set the scale mode, to size the child picture box within the parent picture box, to position and size the horizontal and vertical scroll bars, and then to load a bitmap graphic. Add the following code to the form's Form_Load event procedure:</p>
<pre><code>Private Sub Form_Load()

   ' Set ScaleMode to pixels.
   Form1.ScaleMode = vbPixels
   Picture1.ScaleMode = vbPixels

   ' Autosize is set to True so that the boundaries of
   ' Picture2 are expanded to the size of the actual
   ' bitmap.
   Picture2.AutoSize = True

   ' Set the BorderStyle of each picture box to None.
   Picture1.BorderStyle = 0
   Picture2.BorderStyle = 0

   ' Load the bitmap.
   Picture2.Picture = _
   LoadPicture("c:\Windows\Winlogo.bmp")

   ' Initialize location of both pictures.
   Picture1.Move 0, 0, ScaleWidth - VScroll1.Width, _ 
   ScaleHeight - HScroll1.Height
   Picture2.Move 0, 0

   ' Position the horizontal scroll bar.
   HScroll1.Top = Picture1.Height
   HScroll1.Left = 0
   HScroll1.Width = Picture1.Width

   ' Position the vertical scroll bar.
   VScroll1.Top = 0
   VScroll1.Left = Picture1.Width
   VScroll1.Height = Picture1.Height

   ' Set the Max property for the scroll bars.
   HScroll1.Max = Picture2.Width - Picture1.Width
   VScroll1.Max = Picture2.Height - Picture1.Height

   ' Determine if the child picture will fill up the 
   ' screen.
   ' If so, there is no need to use scroll bars.
   VScroll1.Visible = (Picture1.Height &lt; _ 
   Picture2.Height)
   HScroll1.Visible = (Picture1.Width &lt; _ 
   Picture2.Width)

End Sub
</code></pre>
<p>
The horizontal and vertical scroll bars' Change event is used to move the child picture box up and down or left and right within the parent picture box. Add the following code to the Change event of both scroll bar controls:</p>
<pre><code>Private Sub HScroll1_Change()
   Picture2.Left = -HScroll1.Value
End Sub

Private Sub VScroll1_Change()
   Picture2.Top = -VScroll1.Value
End Sub
</code></pre>
<p>
The Left and Top properties of the child picture box are set to the negative value of the horizontal and vertical scroll bars so that as you scroll up or down or right or left, the display moves appropriately.</p>
<p>
At run time, the graphic will be displayed as shown in Figure 7.26.</p>
<p class=label>
<b>Figure 7.26&nbsp;&nbsp;&nbsp;Scrolling the bitmap at run time</b></p>
<p>
<img src="avp07044.gif" border=0></p>
<h2>Resizing the Form at Run Time</h2>
<p>
In the example described above, the viewable size of the graphic is limited by the original size of the form. To resize the graphic viewport application when the user adjusts the size of the form at run time, add the following code to the form's Form_Resize event procedure:</p>
<pre><code>Private Sub Form_Resize()
   ' When the form is resized, change the Picture1
   ' dimensions.
   Picture1.Height = Form1.Height
   Picture1.Width = Form1.Width

   ' Reinitialize the picture and scroll bar 
   ' positions.
   Picture1.Move 0, 0, ScaleWidth - VScroll1.Width, _ 
   ScaleHeight - HScroll1.Height
   Picture2.Move 0, 0
   HScroll1.Top = Picture1.Height
   HScroll1.Left = 0
   HScroll1.Width = Picture1.Width
   VScroll1.Top = 0
   VScroll1.Left = Picture1.Width
   VScroll1.Height = Picture1.Height
   HScroll1.Max = Picture2.Width - Picture1.Width
   VScroll1.Max = Picture2.Height - Picture1.Width

   ' Check to see if scroll bars are needed.
   VScroll1.Visible = (Picture1.Height &lt; _ 
   Picture2.Height)
   HScroll1.Visible = (Picture1.Width &lt; _ 
   Picture2.Width)

End Sub
</code></pre>
</BODY>
</HTML>

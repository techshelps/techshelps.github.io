<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Function Procedures</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconfunctionprocedures"></a>Function Procedures</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vastmFunction;vbconFunctionProceduresC">
</object></p>
<p>
Visual Basic includes built-in, or intrinsic functions, like Sqr, Cos or Chr. In addition, you can use the Function statement to write your own Function procedures.</p>
<p>
The syntax for a Function procedure is:</p>
<p>
<b>[Private|Public][Static]Function</b> <i>procedurename</i> (<i>arguments</i>) [<b>As</b> <i>type</i>]<br>
<i>statements</i></p>
<p>
<b>End Function</b></p>
<p>
Like a Sub procedure, a Function procedure is a separate procedure that can take arguments, perform a series of statements, and change the value of its arguments. Unlike a Sub procedure, a Function procedure can return a value to the calling procedure. There are three differences between Sub and Function procedures:
<ul type=disc>
<li>
Generally, you call a function by including the function procedure name and arguments on the right side of a larger statement or expression (<i>returnvalue = function()</i>).<br><br></li>
<li>
Function procedures have data types, just as variables do. This determines the type of the return value. (In the absence of an As clause, the type is the default Variant type.)<br><br></li>
<li>
You return a value by assigning it to the <i>procedurename</i> itself. When the Function procedure returns a value, this value can then become part of a larger expression.</li>
</ul>
<p>
For example, you could write a function that calculates the third side, or hypotenuse, of a right triangle, given the values for the other two sides:</p>
<pre><code>Function Hypotenuse (A As Integer, B As Integer) _
As String
   Hypotenuse = Sqr(A ^ 2 + B ^ 2)
End Function
</code></pre>
<p>
You call a Function procedure the same way you call any of the built-in functions in Visual Basic:</p>
<pre><code>Label1.Caption = Hypotenuse(CInt(Text1.Text), _
CInt(Text2.Text))
strX = Hypotenuse(Width, Height)
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For additional details about the Function procedure, see "Function Statement" in the <i>Language Reference</i>. The techniques for calling all types of procedures are discussed in the section, "Calling Procedures," later in this chapter.</p>
</BODY>
</HTML>

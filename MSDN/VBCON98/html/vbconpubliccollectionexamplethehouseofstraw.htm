<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Public Collection Example: The House of Straw</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconpubliccollectionexamplethehouseofstraw"></a>Public Collection Example: The House of Straw</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPublicCollectionExampleTheHouseOfStrawC">
</object></p>
<p>
To create the example, open a new project and insert two class modules. Draw five command buttons, a list box, two text boxes, and two labels on the form, as shown in Figure 9.13.</p>
<p class=label>
<b>Figure 9.13&nbsp;&nbsp;&nbsp;Employees collection example</b></p>
<p>
<img src="avp09011.gif" border=0></p>
<p>
The following table lists the property values you need to set for this example.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Object</b></td>
<td class=label width=26%><b>Property</b></td>
<td class=label width=40%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=34%>Class module</td>
<td width=26%>Name</td>
<td width=40%>Employee</td>
</tr>
<tr valign=top>
<td width=34%>Class module</td>
<td width=26%>Name</td>
<td width=40%>SmallBusiness</td>
</tr>
<tr valign=top>
<td width=34%>Form</td>
<td width=26%>Caption</td>
<td width=40%>Employees Collection</td>
</tr>
<tr valign=top>
<td width=34%>First command button</td>
<td width=26%>Caption<br>
Name</td>
<td width=40%>Add<br>
cmdAddEmployee</td>
</tr>
<tr valign=top>
<td width=34%>Second command button</td>
<td width=26%>Caption<br>
Name</td>
<td width=40%>Delete<br>
cmdDeleteEmployee</td>
</tr>
<tr valign=top>
<td width=34%>Third command button</td>
<td width=26%>Caption<br>
Name</td>
<td width=40%>Refresh List<br>
cmdListEmployees</td>
</tr>
<tr valign=top>
<td width=34%>Fourth command button</td>
<td width=26%>Caption<br>
Name</td>
<td width=40%>Trouble<br>
cmdTrouble</td>
</tr>
<tr valign=top>
<td width=34%>Fifth command button</td>
<td width=26%>Caption<br>
Name</td>
<td width=40%>Close<br>
cmdClose</td>
</tr>
<tr valign=top>
<td width=34%>First label control</td>
<td width=26%>Caption</td>
<td width=40%>Name</td>
</tr>
<tr valign=top>
<td width=34%>Second label control</td>
<td width=26%>Caption</td>
<td width=40%>Salary</td>
</tr>
<tr valign=top>
<td width=34%>First text box</td>
<td width=26%>Name<br>
Text</td>
<td width=40%>txtName<br>
(blank)</td>
</tr>
<tr valign=top>
<td width=34%>Second text box</td>
<td width=26%>Name<br>
Text</td>
<td width=40%>txtSalary<br>
(blank)</td>
</tr>
<tr valign=top>
<td width=34%>List Box</td>
<td width=26%>Name</td>
<td width=40%>lstEmployees</td>
</tr>
</table><br>
<p>
In the Employee class module, add the following declarations and property procedures:</p>
<pre><code>Option Explicit
' Properties of the Employee class.
Public Name As String
Public Salary As Long   

' Private data for the write-once ID property.
Private mstrID As String

Property Get ID() As String
   ID = mstrID
End Property

' The first time the ID property is set, the static
' Boolean is also set.&nbsp; Subsequent calls do nothing.
' (It would be better to raise an error, instead.)
Property Let ID(strNew As String)
   Static blnAlreadySet As Boolean
   If Not blnAlreadySet Then
      blnAlreadySet = True
      mstrID = strNew
   End If
End Property
</code></pre>
<p>
The ID property is the key for retrieving or deleting an Employee object from the collection, so it must be set once and never changed. This is accomplished with a Static Boolean variable that is set to True the first time the property is set. The property can always be read, because there is a Property Get.</p>
<p>
In the SmallBusiness class module, add the following declaration. The collection object will be created the first time the <code>Employees</code> variable is referred to in code.</p>
<pre><code>Option Explicit
Public Employees As New Collection
</code></pre>
<h3>The Form Does All the Work</h3>
<p>
All of the remaining code goes into the form module. Add the following declaration in the Declarations section.</p>
<pre><code>Option Explicit
Public sbMain As New SmallBusiness
</code></pre>
<p>
The code in the cmdEmployeeAdd_Click event adds a member to the collection.</p>
<pre><code>Private Sub cmdEmployeeAdd_Click()
   Dim empNew As New Employee
   Static intEmpNum As Integer
   ' Using With makes your code faster and more
   ' concise (.ID vs. empNew.ID).
   With empNew
      ' Generate a unique ID for the new employee.
      intEmpNum = intEmpNum + 1
      .ID = "E" &amp; Format$(intEmpNum, "00000")
      .Name = txtName.Text
      .Salary = CDbl(txtSalary.Text)
      ' Add the Employee object reference to the
      ' collection, using the ID property as the key.
      sbMain.Employees.Add empNew, .ID
   End With
   txtName.Text = ""
   txtSalary.Text = ""
   ' Click the Refresh List button.
   cmdListEmployees.Value = True
End Sub
</code></pre>
<p>
The code in the cmdListEmployees_Click event procedure uses a For Each ... Next statement to add all the employee information to the ListBox control.</p>
<pre><code>Private Sub cmdListEmployees_Click()
   Dim emp As Employee
   lstEmployees.Clear
   For Each emp In sbMain.Employees
      lstEmployees.AddItem emp.ID &amp; ", " &amp; emp.Name _
      &amp; ", " &amp; emp.Salary
   Next
End Sub
</code></pre>
<p>
The cmdEmployeeDelete_Click event uses the Collection object's Remove method to delete the collection member currently selected in the ListBox control.</p>
<pre><code>Private Sub cmdEmployeeDelete_Click()
   ' Check to make sure there's an employee selected.
   If lstEmployees.ListIndex &gt; -1 Then
      ' The first six characters are the ID.
      sbMain.Employees.Remove _
      Left(lstEmployees.Text, 6)
   End If
   ' Click the Refresh List button.
   cmdListEmployees.Value = True
End Sub
</code></pre>
<p>
Add the following code to the Trouble button.</p>
<pre><code>Private Sub cmdTrouble_Click()
   ' Say what!?
   sbMain.Employees.Add Me
End Sub
</code></pre>
<p>
The cmdClose_Click event closes the application. When you close projects that use objects, do so by unloading all the forms, to ensure that any Terminate event procedures in your class modules will get executed. By contrast, using the End statement stops a program abruptly, without executing Terminate events.</p>
<pre><code>Private Sub cmdClose_Click()
   Unload Me
End Sub
</code></pre>
<p>
To add employees in the example, run the application, enter values in the two text boxes, and then choose the Add button. Add a few employees, and then experiment with the delete and list buttons.</p>
<h3>Robust as a Straw House</h3>
<p>
This simple implementation is not very robust. Because the Employees property is just a public Collection object, you could inadvertently access it from anywhere in your program. Furthermore, the Add method of the Collection object doesn't do any type checking. For example, the code in the Trouble button's Click event blithely inserts an object reference to the form into the collection of employees.</p>
<p>
Click the Trouble button, and notice that no error occurs. Now click the Refresh List button. When the For Each ... Next loop encounters the unexpected object type, it causes error 13, Type mismatch.</p>
<p>
This is an example of the kind of error you're exposed to when you build an object model with public Collection objects. Objects can be added from anywhere in your project, and there's no guarantee that they'll be properly initialized. If a programmer clones the code to add an employee, and the original code is later changed, the resulting errors can be very difficult to track down.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The example begun in this topic is continued in "Private Collection Example: The House of Sticks."</p>
</BODY>
</HTML>

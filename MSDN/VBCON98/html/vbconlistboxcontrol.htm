<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the List Box Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlistboxcontrol"></a>Using the List Box Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconListBoxControlC">
</object></p>
<p>
A list box control displays a list of items from which the user can select one or more.</p>
<p class=label>
<b>Figure 7.32&nbsp;&nbsp;&nbsp;The list box control</b></p>
<p>
<img src="avp07014.gif" border=0></p>
<p>
List boxes present a list of choices to the user. By default, the choices are displayed vertically in a single column, although you can set up multiple columns as well. If the number of items exceeds what can be displayed in the list box, scroll bars automatically appear on the control. The user can then scroll up and down, or left to right through the list. Figure 7.33 shows a single-column list box.</p>
<p class=label>
<b>Figure 7.33&nbsp;&nbsp;&nbsp;Single-column list box</b></p>
<p>
<img src="avp07047.gif" border=0></p>
<h2>Data-Bound Features</h2>
<p>
Visual Basic includes both standard and data-bound versions of the list box control. While both versions of the list box control allow you to display, edit, and update information from most standard types of databases, the DataList provides more advanced data access features. The DataList control also supports a different set of properties and methods than the standard list box control.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Using the DataCombo and DataList Controls" for more information on the data-bound version of the list box control.</p>
<h2>The Click and Double-Click Events</h2>
<p>
A recommended practice for list box events, especially when the list box appears as part of a dialog box, is to add a command button to use with the list box. The Click event procedure for this button should make use of the list-box selection, carrying out whatever action is appropriate for your application.</p>
<p>
Double-clicking an item in the list should have the same effect as selecting the item and then clicking the command button. To do this, have the DblClick procedure for the list box call the Click procedure for the command button:</p>
<pre><code>Private Sub List1_DblClick ()
   Command1_Click
End Sub
</code></pre>
<p>
Or, set the value of the command button's Value property to True, which will automatically invoke the event procedure:</p>
<pre><code>Private Sub List1_DblClick ()
   Command1.Value = True
End Sub
</code></pre>
<p>
This provides mouse users with a shortcut, yet does not prevent keyboard users from performing the same action. Note that there is no keyboard equivalent for the DblClick event.</p>
<h2>Adding Items to a List</h2>
<p>
To add items to a list box, use the AddItem method, which has the following syntax:</p>
<p>
<i>box</i>.<b>AddItem</b> <i>item</i>[<i>, index</i>]</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Argument</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%><i>box</i></td>
<td width=72%>Name of the list box.</td>
</tr>
<tr valign=top>
<td width=28%><i>item</i></td>
<td width=72%>String expression to add to the list. If <i>item</i> is a literal constant, enclose it in quotation marks.</td>
</tr>
<tr valign=top>
<td width=28%><i>index</i></td>
<td width=72%>Specifies where the new item is to be inserted in the list. An <i>index</i> of 0 represents the first position. If <i>index</i> is omitted, the item is inserted at the end (or in the proper sorted order).</td>
</tr>
</table><br>
<p>
While list items are commonly added in the Form_Load event procedure, you can use the AddItem method at any time. This gives you the ability to add items to the list dynamically (in response to user actions).</p>
<p>
The following code places "Germany," "India," "France," and "USA" into a list box named List1:</p>
<pre><code>Private Sub Form_Load ()
   List1.AddItem "Germany"
   List1.AddItem "India"
   List1.AddItem "France"
   List1.AddItem "USA"
End Sub
</code></pre>
<p>
Whenever the form is loaded at run time, the list appears as shown in Figure 7.34.</p>
<p class=label>
<b>Figure 7.34&nbsp;&nbsp;&nbsp;"Countries" list box</b></p>
<p>
<img src="avp07048.gif" border=0></p>
<h2>Adding an Item at a Specified Position</h2>
<p>
To add an item to a list at a specific position, specify an index value for the new item. For example, the next line of code inserts "Japan" into the first position, adjusting the position of the other items downward:</p>
<pre><code>List1.AddItem "Japan", 0
</code></pre>
<p>
Notice that it is 0, not 1, that specifies the first item in a list (see Figure 7.35).</p>
<p class=label>
<b>Figure 7.35&nbsp;&nbsp;&nbsp;Adding an item to a list</b></p>
<p>
<img src="avp07049.gif" border=0></p>
<h3>Adding Items at Design Time</h3>
<p>
You can also enter items into the list at design time by setting the List property in the Properties window of the list box control. When you select the List property option and then click the down arrow, you can type list items and then press the CTRL+ENTER key combination to start a new line.</p>
<p>
You can only add items to the end of the list. So, if you want to alphabetize the list, set the Sorted property to True. See "Sorting a List" below for more information.</p>
<h2>Sorting a List</h2>
<p>
You can specify that items be added to a list in alphabetical order by setting the Sorted property to True and omitting the index. The sort is not case-sensitive; thus, the words "japan" and "Japan" are treated the same.</p>
<p>
When the Sorted property is set to True, using the AddItem method with the <i>index</i> argument can lead to unpredictable, unsorted results.</p>
<h2>Removing Items from a List</h2>
<p>
You can use the RemoveItem method to delete items from a list box. RemoveItem has one argument, <i>index</i>, which specifies the item to remove:</p>
<p>
<i>box</i>.<b>RemoveItem</b> <i>index</i></p>
<p>
The <i>box</i> and <i>index</i> arguments are the same as for AddItem.</p>
<p>
For example, to remove the first entry in a list, you would add the following line of code:</p>
<pre><code>List1.RemoveItem 0
</code></pre>
<p>
To remove all list entries in bound or standard versions of the list and combo boxes, use the Clear method:</p>
<pre><code>List1.Clear
</code></pre>
<h2>Getting List Contents with the Text Property</h2>
<p>
Usually, the easiest way to get the value of the currently selected item is to use the Text property. The Text property always corresponds to a list item a user selects at run time.</p>
<p>
For example, the following code displays information about the population of Canada if a user selects "Canada" from a list box:</p>
<pre><code>Private Sub List1_Click ()
   If List1.Text = "Canada" Then
      Text1.Text = "Canada has 24 million people."
   End If
End Sub
</code></pre>
<p>
The Text property contains the currently selected item in the List1 list box. The code checks to see if "Canada" has been selected and, if so, displays the information in the Text box.</p>
<h2>Accessing List Items with the List Property</h2>
<p>
The List property provides access to all items in the list. This property contains an array in which each item in the list is an element of the array. Each item is represented in string form. To refer to an item in the list, use this syntax:</p>
<p>
<i>box.</i><b>List</b>(<i>index)</i></p>
<p>
The <i>box</i> argument is a reference to a list box, and <i>index</i> is the position of the item. The top item has an index of 0, the next has an index of 1, and so on. For example, the following statement displays the third item (<i>index</i> = 2) in a list in a text box:</p>
<pre><code>Text1.Text = List1.List(2)
</code></pre>
<h2>Determining Position with the ListIndex Property</h2>
<p>
If you want to know the position of the selected item in a list, use the ListIndex property. This property sets or returns the index of the currently selected item in the control and is available only at run time. Setting the ListIndex property for a list box also generates a Click event for the control.</p>
<p>
The value of this property is 0 if the first (top) item is selected, 1 if the next item down is selected, and so on. ListIndex is – 1 if no item is selected.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The NewIndex property allows you to keep track of the index of the last item added to the list. This can be useful when inserting an item into a sorted list.</p>
<h2>Returning the Number of Items with the ListCount Property</h2>
<p>
To return the number of items in a list box, use the ListCount property. For example, the following statement uses the ListCount property to determine the number of entries in a list box:</p>
<pre><code>Text1.Text = "You have " &amp; List1.ListCount &amp; " _
entries listed"
</code></pre>
<h2>Creating Multiple-Column and Multiple-Selection List Boxes</h2>
<p>
The Columns property allows you to specify the number of columns in a list box. This property can have the following values:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Value</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>0</td>
<td width=72%>Single-column list box with vertical scrolling.</td>
</tr>
<tr valign=top>
<td width=28%>1</td>
<td width=72%>Single-column list box with horizontal scrolling.</td>
</tr>
<tr valign=top>
<td width=28%>&gt;1</td>
<td width=72%>Multiple-column list box with horizontal scrolling.</td>
</tr>
</table><br>
<p>
Visual Basic takes care of wrapping list items to the next line and adding a horizontal scroll bar to the list if needed; if the list fills a single column, no scroll bar is added. Wrapping to the next column also occurs automatically as needed. Note that if a list box entry is wider than the width of a column, the text is truncated.</p>
<p>
You can allow users to select multiple items from a list. Multiple selection in standard list boxes is handled by setting the MultiSelect property, which can have the following values.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=12%><b>Value</b></td>
<td class=label width=35%><b>Type of selection</b></td>
<td class=label width=53%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=12%>0</td>
<td width=35%>None</td>
<td width=53%>Standard list box.</td>
</tr>
<tr valign=top>
<td width=12%>1</td>
<td width=35%>Simple multiple selection</td>
<td width=53%>A click or the SPACEBAR selects or deselects additional items in the list.</td>
</tr>
<tr valign=top>
<td width=12%>2</td>
<td width=35%>Extended multiple<br>
selection</td>
<td width=53%>The SHIFT+ click or SHIFT+ an arrow key extends the selection to include all the items between the current and previous selections. CTRL+ click selects or deselects an item in the list.</td>
</tr>
</table><br>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "List Box Control Scenario 2: Creating Multiple-Column List Boxes" later in this chapter for more information on the Columns and MultiSelect properties.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Document Creation Basics</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconactivexdocumentcreationbasics"></a>ActiveX Document Creation Basics</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconActiveXDocumentCreationBasicsC">
</object></p>
<p>
Creating an ActiveX document has great similarities to creating an ActiveX control. Just as with ActiveX controls, you are not necessarily in control of the host application — you are a cog in somebody else's machine. Therefore, much of your code must be defensive — allow your application to gracefully exit when necessary. And, as when developing an ActiveX control, you can expose methods, events and properties that can be used by other components.</p>
<p>
The topics in this chapter provide the basic facts and concepts you need to create ActiveX documents. First, however, is a recap of the process of ActiveX document creation.</p>
<h2>The Process in a Nutshell</h2>
<p>
The process of creating an ActiveX document is like creating any other project in Visual Basic:
<ol>
<li>
Begin by starting a new project and selecting either ActiveX Document EXE or ActiveX Document DLL. By default, these template projects contain a single UserDocument. Each UserDocument is the core object for an ActiveX document.<br><br></li>
<li>
Add controls to the UserDocument, and add code for the controls.<br><br></li>
<li>
Add a Help menu to the UserDocument.<br><br></li>
<li>
Add other forms, code modules, or more UserDocument objects to the project.<br><br></li>
<li>
Test and debug the ActiveX document by running the project and viewing the document in the target container (the container application you will eventually use to view the document — for example, Internet Explorer).<br><br></li>
<li>
Compile the project as either an in-process component, or an out-of-process component. A .vbd file (required when you use a browser such as Internet Explorer to view an ActiveX document) is also created.<br><br></li>
<li>
Deploy the ActiveX document(s).</li>
</ol>
<p>
The .exe or .dll file contains the actual compiled code. Initially, the .vbd file contains the class ID of the .exe or the .dll file. If you elect to allow users to save data (using the PropertyBag), the data will also be stored in the .vbd file. Users can view your ActiveX document by opening the .vbd file in a host application.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Deployment of ActiveX documents is covered in "Building Internet Applications." For more information about the difference between the in-process and out-of-process components, see "In-Process and Out-of-Process ActiveX Documents." Details about the .vbd file are covered in "Parts of an ActiveX Document."</p>
</BODY>
</HTML>

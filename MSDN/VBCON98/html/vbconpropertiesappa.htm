<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Form Description Properties</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconpropertiesappa"></a>Form Description Properties</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPropertiesAppA_C">
</object></p>
<p>
When Visual Basic saves a form, it arranges the properties in a default ordering. However, you can list properties in any order when creating a form.</p>
<p>
Any property you don’t list is set to its default value when loaded. When Visual Basic saves a form, it includes only those properties that do not use default values as their settings. Each control determines whether or not all of its properties are saved, or only those whose values are different from the default settings.</p>
<h2>Syntax</h2>
<p>
Use this syntax to define properties in the form description:</p>
<p>
<i>property</i> <b>=</b> <i>value</i></p>
<p>
Text property values must appear within double quotation marks. Boolean properties have a value of – 1 for True and 0 for False. Visual Basic interprets any value other than – 1 or 0 as True. Properties with listed values include their numeric value with the description of the value included as a comment. For example, the BorderStyle property appears like this:</p>
<pre><code>BorderStyle = 0         ' None
</code></pre>
<h2>Binary Property Values</h2>
<p>
Some controls have properties that have binary data as their values, such as the Picture property of picture box and image controls or certain properties of custom controls. Visual Basic saves all binary data for a form in a binary data file separate from the form.</p>
<p>
Visual Basic saves the binary data file in the same directory as the form. The binary data file has the same file name as the form, but it has an .frx filename extension. Visual Basic reads the binary data file when loading the form. The binary data file (.frx) must be available to the form when Visual Basic loads it. If you share forms with others that use a binary data file, be sure to provide the binary data file (.frx) as well as the form (.frm).</p>
<p>
Properties having binary data as their values appear in the form as a reference to a byte offset in the binary data file. For example, the value of a Picture property appears like this in a form description:</p>
<pre><code>Begin VB.Image imgDemo
   Picture = "Myform.frx":02EB
End
</code></pre>
<p>
The property listing means that the binary data that defines the Picture property of this control begins at byte 2EB (hex) in the file Myform.frx.</p>
<h2>Icon Property</h2>
<p>
The value of the Icon property in a form depends on which icon is used for the form. The following table lists Icon property values and how those properties appear in a form.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Icon property setting</b></td>
<td class=label width=52%><b>ASCII form contents</b></td>
</tr>
<tr valign=top>
<td width=48%>The default icon</td>
<td width=52%>No reference to the Icon property</td>
</tr>
<tr valign=top>
<td width=48%>(None)</td>
<td width=52%><pre><code>Icon = 0</code></pre>
</td>
</tr>
<tr valign=top>
<td width=48%>Any icon other than the default icon</td>
<td width=52%>Byte offset reference to the binary data file. For example:<pre><code>Icon = "Myform.frx":0000</code></pre>
</td>
</tr>
</table><br>
<h2>TabIndex Property</h2>
<p>
If the TabIndex property is not specified, Visual Basic assigns the control the earliest possible location in the tab order once all other controls load.</p>
<h2>Units of Measurement</h2>
<p>
Control sizes, <i>x</i> and <i>y</i> coordinates, and other property values using units of measurement are expressed in twips. When a control uses a scale mode other than twips, Visual Basic converts the twip values in the ASCII form to the units of measurement specified by the control’s ScaleMode property when loading the form.</p>
<h2>Color Values</h2>
<p>
Color values appear as RGB values. For example, the ForeColor property appears like this:</p>
<pre><code>ForeColor = &amp;H00FF0000&amp;
</code></pre>
<p>
Visual Basic can also read QBColor values, converting them to RGB when loading the form. ASCII forms using QBColor values must use this syntax:</p>
<p>
<b>ForeColor =</b> <b>QBColor</b>(<i>qbcolor</i>)</p>
<p>
where <i>qbcolor</i> is a value from 0 to 15.</p>
<p>
Note that the <i>qbcolor</i> argument corresponds to the color values used by graphics statements in other versions of Basic, such as Visual Basic for MS-DOS, Microsoft QuickBasic, and the Microsoft Basic Professional Development System.</p>
<h2>Property Objects</h2>
<p>
Some property objects, such as the Font object, appear as a separate block, showing all of the settings for the various properties of the object. These blocks are enclosed in BeginProperty and EndProperty statements of the following form:</p>
<p>
<b>BeginProperty</b> <i>propertynam</i>e</p>
<p>
<i>property1</i> <b>=</b> <i>value1</i></p>
<p>
<i>property2</i> <b>=</b> <i>value2</i></p>
<p>
<b>EndProperty</b></p>
<h2>Basic Code</h2>
<p>
The Basic code appears in the form immediately after the Attributes section following the last End statement in the form description. Statements in the Declarations section of a form appear first, followed by event procedures, general procedures, and functions.</p>
</BODY>
</HTML>

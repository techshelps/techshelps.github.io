<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Break Mode</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingbreakmode"></a>Using Break Mode</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingBreakModeC">
</object></p>
<p>
At design time, you can change the design or code of an application, but you cannot see how your changes affect the way the application runs. At run time, you can watch how the application behaves, but you cannot directly change the code.</p>
<p>
Break mode halts the operation of an application and gives you a snapshot of its condition at any moment. Variable and property settings are preserved, so you can analyze the current state of the application and enter changes that affect how the application runs. When an application is in break mode, you can:
<ul type=disc>
<li>
Modify code in the application.<br><br></li>
<li>
Observe the condition of the application's interface.<br><br></li>
<li>
Determine which active procedures have been called.<br><br></li>
<li>
Watch the values of variables, properties, and statements.<br><br></li>
<li>
Change the values of variables and properties.<br><br></li>
<li>
View or control which statement the application will run next.<br><br></li>
<li>
Run Visual Basic statements immediately.<br><br></li>
<li>
Manually control the operation of the application.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can set breakpoints and watch expressions at design time, but other debugging tools work only in break mode.</p>
<h2>Entering Break Mode at a Problem Statement</h2>
<p>
When debugging, you may want the application to halt at the place in the code where you think the problem might have started. This is one reason Visual Basic provides breakpoints and Stop statements. A <i>breakpoint</i> defines a statement or set of conditions at which Visual Basic automatically stops execution and puts the application in break mode without running the statement containing the breakpoint. See "Using Stop Statements" later in this chapter for a comparison of Stop statements and breakpoints.</p>
<p>
You can enter break mode manually if you do any of the following while the application is running:
<ul type=disc>
<li>
Press CTRL+BREAK.<br><br></li>
<li>
Choose Break from the Run menu.<br><br></li>
<li>
Click the Break button on the toolbar.</li>
</ul>
<p>
It's possible to break execution when the application is idle (when it is between processing of events). When this happens, execution does not stop at a specific line, but Visual Basic switches to break mode anyway.</p>
<p>
You can also enter break mode automatically when any of the following occurs:
<ul type=disc>
<li>
A statement generates an untrapped run-time error.<br><br></li>
<li>
A statement generates a run-time error and the Break on All Errors error trapping option has been selected.<br><br></li>
<li>
A break expression defined in the Add Watch dialog box changes or becomes true, depending on how you defined it.<br><br></li>
<li>
Execution reaches a line with a breakpoint.<br><br></li>
<li>
Execution reaches a Stop statement.</li>
</ul>
<h2>Fixing a Run-Time Error and Continuing</h2>
<p>
Some run-time errors result from simple oversights when entering code; these errors are easily fixed. Frequent errors include misspelled names and mismatched properties or methods with objects — for example, trying to use the Clear method on a text box, or the Text property with a file list box. Figure 13.11 shows a run-time error message.</p>
<p class=label>
<b>Figure 13.11&nbsp;&nbsp;&nbsp;Run-time errors halt execution</b></p>
<p>
<img src="avp13011.gif" border=0></p>
<p>
Often you can enter a correction and continue program execution with the same line that halted the application, even though you've changed some of the code. Simply choose Continue from the Run menu or click the Continue button on the toolbar. As you continue running the application, you can verify that the problem is fixed.</p>
<p>
If you select Break on All Errors from the Default Error Trapping State option group on the General tab on the Options dialog box (available from the Tools menu), Visual Basic disables error handlers in code, so that when a statement generates a run-time error, Visual Basic enters break mode. If Break on All Errors is not selected, and if an error handler exists, it will intercept code and take corrective action.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you change the Default Error Trapping State option via the Options dialog box, this setting becomes the default for all subsequent sessions of VB. To change error handling for just the current session, select Toggle from the code window context menu to open a submenu that allows selection of the break mode.</p>
<p>
Some changes (most commonly, changing variable declarations or adding new variables or procedures) require you to restart the application. When this happens, Visual Basic presents a message that asks if you want to restart the application.</p>
</BODY>
</HTML>

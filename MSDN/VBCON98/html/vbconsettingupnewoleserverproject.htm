<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Showing Forms from the CoffeeMonitor Class</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconsettingupnewoleserverproject"></a>Showing Forms from the CoffeeMonitor Class</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconSettingUpNewOLEServerProjectC">
</object></p>
<p>
Out-of-process components can show both modal and modeless forms. The first use for the CoffeeMonitor will be to demonstrate this, because the results may not be quite what you expect.</p>
<p>
The procedure in this topic adds a ShowForm method to the CoffeeMonitor class, plus public constants for use with the method.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX EXE. It begins with the topic <a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a>.</p>
<p class=label>
<b>To show forms from the CoffeeMonitor class</b>
<ol>
<li>
In the <b>Project Explorer</b> window, double-click <b>CoffeeMonitor</b> (or select it and then click the Code button on the <b>Project Explorer</b> window toolbar), to open its code window.<br><br></li>
<li>
In the Declarations section, add the following Public Enum:<pre><code>Option Explicit
Public Enum cfeModality
 &nbsp; cfeModal = vbModal
 &nbsp; cfeModeless = vbModeless
End Enum
</code></pre>
<p class=tl>
An enumeration declared Public in a class module is added to your component’s type library. It will not be associated with the class in which it was defined, but will become part of the global name space.</P><p class=tl>
Why would you provide your own constants, when Visual Basic includes vbModal and vbModeless? Your component may be used with a development tool that doesn’t provide these constants. Providing constants compatible with Visual Basic is a flexible solution.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Putting the prefix "cfe" in front of the constant names identifies the constants as belonging to the Coffee component, and reduces the chance of name collisions with other components. Some component authors follow the prefix with two or three uppercase letters identifying the Enum; this seems superfluous here. See "Providing Named Constants for Your Component" in "General Principles of Component Design."</p></li>
<li>
On the <b>Tools</b> menu, click <b>Add Procedure</b> to open the <b>Add Procedure</b> dialog box. Type <b>ShowForm</b> in the <b>Name</b> box, click <b>Sub</b> and <b>Public</b>, and then click <b>OK</b>.<p class=tl>
A public Sub or Function procedure in a class module defines a method of the class, while a public property procedure defines a property. See "Adding Properties and Methods to Classes," in "General Principles of Component Design."</P></li>
<li>
Add the following code to the Sub procedure:<pre><code>Public Sub ShowForm(Optional Modality As _
 &nbsp;&nbsp;&nbsp;&nbsp; cfeModality = cfeModal)
 &nbsp; Dim frm As New TestForm
 &nbsp; If Modality = cfeModeless Then
 &nbsp;&nbsp;&nbsp;&nbsp; frm.Caption = "TestForm - Modeless"
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; frm.Caption = "TestForm - Modal"
 &nbsp; End If
 &nbsp; frm.Show Modality
End Sub
</code></pre>
<p class=tl>
The typed optional argument Modality specifies a Modal form if the argument is omitted. Typed optional arguments are discussed in "Passing Arguments to Procedures" in "Programming Fundamentals" in the <i>Visual Basic Programmer’s Guide.</i></P><p class=tl>
Because the constants in cfeModality are compatible with the vbModal and vbModeless constants supplied by Visual Basic, you can simply pass the Modality argument to the form’s Show method. The Show method will automatically raise an error if an invalid value is supplied.</P></li>
<li>
On the <b>File</b> menu, click <b>Make Coffee.exe</b> to create a reference executable.<p class=tl>
The reference executable, which you only need to create once, will help your test application keep its connection to this project. See "Creating a Test Project for an Out-of-Process Component" in "Debugging, Testing, and Deploying Components."</P></li>
<li>
Press CTRL+F5 to run the project.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If <b>Compile On Demand</b> is checked (on the <b>General</b> tab of the <b>Options</b> dialog box, accessible from the <b>Tools</b> menu), you should use ctrl+f5 (or select <b>Start with Full Compile</b> from the <b>Run</b> menu) to ensure that your component is fully compiled before you begin testing. A compilation error that occurs after the component is providing objects to the test program can be very awkward. <b>Compile On Demand</b> is checked by default.</p><p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;You must put your project in run mode before editing or running the test program, as explained in "Creating a Test Project for an Out-of-Process Component" in "Debugging, Testing, and Deploying Components."</p></li>
</ol>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX EXE.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>To</b></td>
<td class=label width=62%><b>See</b></td>
</tr>
<tr valign=top>
<td width=38%>Go to the next step</td>
<td width=62%><a href="vbcontheclassmodule.htm">Creating the CoffeeWatch Test Project</a></td>
</tr>
<tr valign=top>
<td width=38%>Start from the beginning</td>
<td width=62%><a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a></td>
</tr>
</table><br>
</BODY>
</HTML>

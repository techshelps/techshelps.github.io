<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiling and Testing the ThingDemo DLL</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingtestingoledllexecutable"></a>Compiling and Testing the ThingDemo DLL</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingTestingOLEDLLExecutableC">
</object></p>
<p>
Once an in-process component project is tested and debugged in the development environment, you can compile and test the .dll file.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX DLL. It begins with the topic <a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</p>
<p>
An ActiveX component is compiled the same way any Visual Basic project is compiled — by choosing Make from the File menu. The .dll file includes a type library that describes your objects and allows them to be browsed.</p>
<p>
Visual Basic makes it easy to add the necessary lines to the Windows Registry. You don’t have to write any code, and you don’t have to understand the format of registry entries. When you make the executable file, Visual Basic automatically registers it on your computer.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you distribute your application as part of an integrated solution, registration is done during setup. If you use the Visual Basic Package and Deployment Wizard, registration of your component will be included in the setup process automatically. This is discussed in "Deploying Components" in "Debugging, Testing, and Deploying Components."</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The Package and Deployment Wizard is described in "Distributing Your Applications" in the <i>Visual Basic Programmer’s Guide.</i></p>
<p class=label>
<b>To compile and test the OLE DLL executable</b>
<ol>
<li>
If the TestThing project is still in run mode, click the <b>Close</b> button on Form1 to return to design mode.<br><br></li>
<li>
In the <b>Project Explorer </b>window, click <b>ThingDemo</b> to select the project.<br><br></li>
<li>
On the <b>File </b>menu, click <b>Make ThingDemo.dll</b> to open the <b>Make Project </b>dialog box. Click <b>OK</b> to build the .dll file.<br><br></li>
<li>
<b>On the File </b>menu, click <b>Remove Project </b>to remove ThingDemo from the project group, so that Visual Basic will use the compiled binary component (.dll file) instead of the project.<p class=tl>
Visual Basic displays a warning message, because the TestThing project contains a reference to ThingDemo. Click <b>Yes</b> to remove ThingDemo anyway.</P><p class=tl>
When you remove ThingDemo from the project group, Visual Basic looks for ThingDemo.dll in the Windows Registry. If the .dll file exists, Visual Basic automatically updates the reference you set in "Creating the TestThing Project."</P><p class=tl>
To switch back to using the project instead of the binary component, you can click <b>Add Project </b>on the <b>File </b>menu, and add the ThingDemo project back to the project group.</P></li>
<li>
Press f5 to run TestThing using the .dll file.</li>
</ol>
<p>
You can compile TestThing.exe, and run it with the .dll. You can also test the compiled ThingDemo.dll from other applications.</p>
<p class=label>
<b>To use ThingDemo.dll in another copy of Visual Basic</b>
<ol>
<li>
Open a new instance of Visual Basic. In the <b>New</b> <b>Project</b> dialog box, double-click the EXE Project icon to open a new EXE project.<br><br></li>
<li>
On the <b>Project </b>menu, click <b>References</b> to open the <b>References</b> dialog box. Check <b>ThingDemo ActiveX DLL</b>, and then click <b>OK</b>.<p class=tl>
You can now add code to create Thing and Dialogs objects and invoke their properties and methods.</P></li>
<li>
Press f5 to run the project.</li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;You can read more about test projects and debugging techniques in "Debugging, Testing, and Deploying Components."</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX DLL.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>To</b></td>
<td class=label width=66%><b>See</b></td>
</tr>
<tr valign=top>
<td width=34%>Go to the next step</td>
<td width=66%><a href="vbconcircularreferencescomponentshutdown.htm">Circular References and Component Shutdown</a></td>
</tr>
<tr valign=top>
<td width=34%>Start from the beginning</td>
<td width=66%><a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</td>
</tr>
</table><br>
</BODY>
</HTML>

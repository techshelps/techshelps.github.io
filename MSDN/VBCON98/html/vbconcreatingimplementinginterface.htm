<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating and Implementing an Interface</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingimplementinginterface"></a>Creating and Implementing an Interface</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingImplementingInterfaceC">
</object></p>
<p>
As explained in "How Visual Basic Provides Polymorphism," an interface is a set of properties and methods. In the following code example, you'll create an Animal interface and implement it in two classes, Flea and Tyrannosaur.</p>
<p>
You can create the Animal interface by adding a class module to your project, naming it Animal, and inserting the following code:</p>
<pre><code>Public Sub Move(ByVal Distance As Double)

End Sub

Public Sub Bite(ByVal What As Object)

End Sub
</code></pre>
<p>
Notice that there's no code in these methods. Animal is an <i>abstract class, </i>containing no implementation code. An abstract class isn't meant for creating objects — its purpose is to provide the template for an interface you add to other classes. (Although, as it turns out, sometimes it's useful to implement the interface of a class that isn't abstract; this is discussed later in this topic.)</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Properly speaking, an abstract class is one from which you can't create objects. You can always create objects from Visual Basic classes, even if they contain no code; thus they are not truly abstract.</p>
<p>
Now you can add two more class modules, naming one of them Flea and the other Tyrannosaur. To implement the Animal interface in the Flea class, you use the Implements statement:</p>
<pre><code>Option Explicit
Implements Animal
</code></pre>
<p>
As soon as you've added this line of code, you can click the left-hand (Object) drop down in the code window. One of the entries will be Animal. When you select it, the right-hand (Procedure) drop down will show the methods of the Animal interface.</p>
<p>
Select each method in turn, to create empty procedure templates for all the methods. The templates will have the correct arguments and data types, as defined in the Animal class. Each procedure name will have the prefix <code>Animal_</code> to identify the interface.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;An interface is like a contract. By implementing the interface, a class agrees to respond when any property or method of the interface is invoked. Therefore, you must implement <i>all</i> the properties and methods of an interface.</p>
<p>
You can now add the following code to the Flea class:</p>
<pre><code>Private Sub Animal_Move(ByVal Distance As Double)
   ' (Code to jump some number of inches omitted.)
   Debug.Print "Flea moved"
End Sub

Private Sub Animal_Bite(ByVal What As Object)
   ' (Code to suck blood omitted.)
   Debug.Print "Flea bit a " &amp; TypeName(What)
End Sub
</code></pre>
<p>
You may be wondering why the procedures are declared Private. If they were Public, the procedures Animal_Jump and Animal_Bite would be part of the Flea interface, and we'd be stuck in the same bind we were in originally, declaring the Critter argument As Object so it could contain either a Flea or a Tyrannosaur.</p>
<h3>Multiple Interfaces</h3>
<p>
The Flea class now has two interfaces: The Animal interface you've just implemented, which has two members, and the default Flea interface, which has no members. Later in this example you'll add a member to one of the default interfaces.</p>
<p>
You can implement the Animal interface similarly for the Tyrannosaur class:</p>
<pre><code>Option Explicit
Implements Animal

Private Sub Animal_Move(ByVal Distance As Double)
   ' (Code to pounce some number of yards omitted.)
   Debug.Print "Tyrannosaur moved"
End Sub

Private Sub Animal_Bite(ByVal What As Object)
   ' (Code to take a pound of flesh omitted.)
   Debug.Print "Tyrannosaur bit a " &amp; TypeName(What)
End Sub
</code></pre>
<h3>Exercising the Tyrannosaur and the Flea</h3>
<p>
Add the following code to the Load event of Form1:</p>
<pre><code>Private Sub Form_Load()
   Dim fl As Flea
   Dim ty As Tyrannosaur
   Dim anim As Animal

   Set fl = New Flea
   Set ty = New Tyrannosaur
   ' First give the Flea a shot.
   Set anim = fl
   Call anim.Bite(ty)   'Flea bites dinosaur.
   ' Now the Tyrannosaur gets a turn.
   Set anim = ty
   Call anim.Bite(fl)   'Dinosaur bites flea.
End Sub
</code></pre>
<p>
Press F8 to step through the code. Notice the messages in the Immediate window. When the variable <code>anim</code> contains a reference to the Flea, the Flea's implementation of Bite is invoked, and likewise for the Tyrannosaur.</p>
<p>
The variable <code>anim</code> can contain a reference to any object that implements the Animal interface. In fact, it can <i>only</i> contain references to such objects. If you attempt to assign a Form or PictureBox object to <code>anim</code>, an error will occur.</p>
<p>
The Bite method is early bound when you call it through <code>anim</code>, because Visual Basic knows at compile time that whatever object is assigned to <code>anim</code> will have a Bite method.</p>
<h4>Passing Tyrannosaurs and Fleas to Procedures</h4>
<p>
Remember the GetFood procedure from "How Visual Basic Provides Polymorphism?" You can add the <i>second</i> version of the GetFood procedure — the one that illustrates polymorphism — to Form1, and replace the code in the Load event with the following:</p>
<pre><code>Private Sub Form_Load()
   Dim fl As Flea
   Dim ty As Tyrannosaur

   Set fl = New Flea
   Set ty = New Tyrannosaur
   'Flea dines on dinosaur.
   Call GetFood(fl, ty)
   ' And vice versa.
   Call GetFood(ty, fl)
End Sub
</code></pre>
<p>
Stepping through this code shows how an object reference that you pass to an argument of another interface type is converted into a reference to the second interface (in this case, Animal). What happens is that Visual Basic queries the object to find out whether it supports the second interface. If the object does, it returns a reference to the interface, and Visual Basic places that reference in the argument variable. If the object does not support the second interface, an error occurs.</p>
<h3>Implementing Methods That Return Values</h3>
<p>
Suppose the Move method returned a value. After all, you know how far you want an Animal to move, but an individual specimen might not be able to move that far. It might be old and decrepit, or there might be a wall in the way. The return value of the Move method could be used to tell you how far the Animal actually moved.</p>
<pre><code>Public Function Move(ByVal Distance As Double) _
As Double

End Function
</code></pre>
<p>
When you implement this method in the Tyrannosaur class, you assign the return value to the procedure name, just as you would for any other Function procedure:</p>
<pre><code>Private Function Animal_Move(ByVal Distance _
As Double) As Double
   Dim dblDistanceMoved As Double
   ' Code to calculate how far to pounce (based on
   ' age, state of health, and obstacles) is omitted.
   ' This example assumes that the result has been
   ' placed in the variable dblDistanceMoved.
   Debug.Print "Tyrannosaur moved"; dblDistanceMoved
   Animal_Move = dblDistanceMoved
End Function
</code></pre>
<p>
To assign the return value, use the full procedure name, including the interface prefix.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The interfaces you implement can have properties as well as methods. "Implementing Properties" discusses some differences in the way properties are implemented.</p>
</BODY>
</HTML>

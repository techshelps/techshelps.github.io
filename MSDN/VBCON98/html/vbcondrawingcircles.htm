<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Drawing Circles</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondrawingcircles"></a>Drawing Circles</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDrawingCirclesC">
</object></p>
<p>
The Circle method draws a variety of circular and elliptical (oval) shapes. In addition, Circle draws arcs (segments of circles) and pie-shaped wedges. You can produce many kinds of curved lines using variations of the Circle method.</p>
<p>
To draw a circle, Visual Basic needs the location of a circle’s center and the length of its radius. The syntax for a perfect circle is:</p>
<p>
[<i>object</i>.]<b>Circle</b> [<b>Step</b>]<b>(</b><i>x, y</i><b>)</b>, <i>radius</i>[, <i>color</i>]</p>
<p>
The brackets indicate that both <i>object</i> and the Step keyword are optional. If you don’t specify <i>object</i>, the current form is assumed. The <i>x</i> and <i>y</i> arguments are the coordinates of the center, and <i>radius</i> is the radius of the circle. For example, this statement draws a circle with a center at (1200, 1000) and radius of 750:</p>
<pre><code>Circle (1200, 1000), 750
</code></pre>
<p>
The exact effect of this statement depends on the size and coordinate system of the form. Because the size of the form is unknown, you don’t know if the circle will be visible. Using the drawing area’s scale properties puts the center of the circle at the center of the form:</p>
<pre><code>Circle ((ScaleWidth + ScaleLeft) / 2, (ScaleHeight + _
   ScaleTop) / 2), ScaleWidth / 4
</code></pre>
<p>
For now, all you need to know about ScaleWidth and ScaleHeight is that they help position graphics in the center of a form.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"Changing an Object’s Coordinate System" earlier in this chapter discusses the ScaleWidth and ScaleHeight properties in detail.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The radius of the circle is always specified in terms of horizontal units. If your coordinate system uses the same horizontal and vertical units (which it does by default), you can ignore this fact. However, if you use a custom scale, horizontal and vertical units may correspond to different distances. In the preceding examples, the radius is specified in horizontal units, and the actual height of the circle is guaranteed to be equal to its actual width.</p>
<p>
The Blanker application creates circles as part of the Rainbow Rug demo. This demo draws a series of dashed line circles around the center of the form. In time the circles resemble a woven circular rug. The CircleDemo procedure creates the circles in the Rainbow Rug demo with the following statements:</p>
<pre><code>Sub CircleDemo ()
   Dim Radius
' Set Red to a random value.
   R = 255 * Rnd
' Set Green to a random value.
   G = 255 * Rnd
' Set Blue to a random value.
   B = 255 * Rnd
' Set x-coordinate in middle of form.
   XPos = ScaleWidth / 2
' Set y-coordinate in middle of form.
   YPos = ScaleHeight / 2
   ' Set radius between 0 &amp; 50% of form height.
   Radius = ((YPos * 0.9) + 1) * Rnd
   ' Draw the circle using a random color.
   Circle (XPos, YPos), Radius, RGB(R, G, B)
End Sub
</code></pre>
<p>
The results of the Rainbow Rug demo are shown in Figure 12.16.</p>
<p class=label>
<b>Figure 12.16&nbsp;&nbsp;&nbsp;The Rainbow Rug demo in the Blanker application</b></p>
<p>
<img src="avp12016.gif" border=0></p>
<h2>Drawing Arcs</h2>
<p>
To draw arcs with the Circle method, you need to give angle arguments in radians to define the <i>start</i> and the <i>end</i> of the arc. The syntax for drawing an arc is:</p>
<p>
[<i>object</i>.]<b>Circle</b> [<b>Step</b>](<i>x</i>, <i>y</i>), <i>radius</i>, [<i>color</i>], <i>start</i>, <i>end</i>[, <i>aspect</i>]</p>
<p>
If the <i>start</i> or <i>end</i> argument is negative, Visual Basic draws a line connecting the center of the circle to the negative end point. For example, the following procedure draws a pie with a slice removed.</p>
<pre><code>Private Sub Form_Click ()
   Const PI = 3.14159265
   Circle (3500, 1500), 1000, , –PI / 2, –PI / 3
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The formula for converting from degrees to radians is to multiply degrees by Pi/180.</p>
</BODY>
</HTML>

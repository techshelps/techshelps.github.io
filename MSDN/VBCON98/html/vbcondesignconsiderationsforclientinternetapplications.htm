<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Design Considerations for DHTML applications</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondesignconsiderationsforclientinternetapplications"></a>Design Considerations for DHTML Applications</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDesignConsiderationsForClientInternetApplicationsC">
</object></p>
<p>
There are several factors you should keep in mind when creating a DHTML application. These include deciding how you want your application to load in the Web browser or Web browser control, and making decisions about the layout and structure of the pages you create. You must make sure that the elements on your page are properly named and that your pages do not contain any references that would prevent the application from locating related files.</p>
<h2>General Considerations</h2>
<ul type=disc>
<li>
<b>Follow principles of good Web design</b>. The HTML pages you develop for your application should follow principles of good Web design that are described in most HTML style references. For example, you should remember that end users sometimes view Web pages with the pictures turned off. This can make your application difficult or impossible to use if you embed key information in images. Keep this in mind as you design your interface, and provide backup mechanisms for any crucial information presented in a picture.<br><br></li>
<li>
<b>Only elements with an ID attribute can be programmed</b>. If you create your HTML pages outside of Visual Basic and then import them into the page designer, be sure to give all of the elements for which you want to handle events a unique ID attribute so that you can manipulate them easily in your Visual Basic code.<br><br></li>
<li>
<b>All IDs must be unique when you use Dynamic HTML in Visual Basic</b>. In a Visual Basic project, all of the names and IDs you give to forms, their elements, and associated modules must be unique. <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="IDH_vbdefDynamicHTML">
</object><a href=JavaScript:alink_2.Click()>Dynamic HTML</a> used outside of Visual Basic does not have this same restriction — multiple items on an HTML page created outside of Visual Basic can be given the same ID. If you use a page with duplicate IDs in Visual Basic, the page designer appends numbers to the duplicate IDs to make them unique. When you use an external page, be aware that some IDs may be changed.<br><br></li>
<li>
<b>Use relative URLs</b>. Your application and its HTML pages can be deployed onto a Web server with a different directory structure than the one on the development computer. Because of this, it is best to use relative <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="IDH_vbdefURL">
</object><a href=JavaScript:alink_3.Click()>URLs</a> in your HTML pages rather than absolute URLs. <i>Absolute URLs</i> indicate the exact drive and directory in which your HTML page will expect to find any related images or other files it references. <i>Relative URLs</i> give the name of the file to locate and indicate its location in relation to your project directory, specifying how many directories up or down to move to find the reference.<br><br></li>
<li>
<b>Use style sheets whenever possible</b>. Rather than accessing the style property of an individual element to set an element's physical appearance, use global or linked style sheets as much as possible. Global or linked style sheets allow you to take full advantage of the flexible nature of Dynamic HTML. For more information on styles in Dynamic HTML, see "Element Appearance in DHTML Applications," earlier in this chapter.<br><br></li>
<li>
<b>Not all properties cascade</b>. In Dynamic HTML, most properties that you set for a page can cascade down to the page’s children through style sheets. For example, if you set a font for the page, paragraphs, buttons, and other elements with text will inherit that font setting and use the same font. When you set a background color, however, it does not cascade down to any of the object’s children.<br><br></li>
<li>
<b>Some objects cannot be moved once you place them on the page</b>. Some Visual Basic controls, such as the common dialog or the sysinfo control, are invisible at run time. If you add one of these objects to your HTML page, you cannot select it and move it around within the page after you initially draw it. You can, however, select the control in the treeview and either delete it or access its properties.<br><br></li>
<li>
<b>You cannot use the page designer in a single-threaded DLL.</b> To create a DHTML application, you must set your project to be apartment-threaded. You set this on the General tab of the Project Properties dialog box.</li>
</ul>
<h2>Asynchronous Loading Considerations</h2>
<p>
When the system loads a Visual Basic form, the entire form is loaded and then displayed. When the system loads an HTML page into a Web browser or Web browser control, some parts of the page that load more quickly are displayed first, while the browser finishes loading and displaying other portions of the page. This process is called <i>asynchronous loading</i> and presents some unique challenges for a Web application. Users may have access to some parts of your user interface before other, dependent elements appear. For example, if the code behind a command button references an event on an image control, an error can occur if the user selects the button before the image is loaded.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;By default, asynchronous loading is turned off for your HTML pages. If you want to change this setting, you can set the AsyncLoad property for page to True.</p>
<p>
To lessen the effects of asynchronous loading in your application:
<ul type=disc>
<li>
<b>When possible, leave AsyncLoad set to False</b>. To prevent the browser from displaying any part of the page until the entire page is loaded, set the AsyncLoad property on the page designer to False. This makes the browser wait to run any Visual Basic code until all elements and events are loaded. False is the default setting of this property.<br><br></li>
<li>
<b>When you must use asynchronous loading, check for the existence of an object before you reference it</b>. When you must use asynchronous loading, it is best to not write code that crosses object boundaries by referencing one object on the page from within another object. There are times, however, when crossing object boundaries will be necessary. In these cases, include code that checks to see whether the object exists, or provide error handling that tells the system how to react when the referenced object does not exist.<br><br></li>
<li>
<b>Don’t rely on backward references to avoid trouble</b>. <i>Backward referencing</i> means using references to only those elements on the page that appear above the current item. The assumption is that the page will load in an orderly, top-to-bottom fashion. This is not the case. Elements on an HTML page can load in a random order.</li>
</ul>
</BODY>
</HTML>

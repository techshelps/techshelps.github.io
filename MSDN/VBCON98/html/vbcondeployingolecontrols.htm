<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Distributing Controls</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondeployingolecontrols"></a>Distributing Controls</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDeployingOLEControlsC">
</object></p>
<p>
As discussed in "Two Ways to Package ActiveX Controls," earlier in this chapter, Visual Basic lets you author shareable control components (.ocx files), or simply include private controls as .ctl files in the project for your application or component.</p>
<p>
This topic and its related topics focus on distribution, versioning, and licensing issues for control components. Private controls are compiled directly into an executable or component, and are distributed along with it. Being private, they also have no versioning or licensing issues.</p>
<h2>Distributing Control Components</h2>
<p>
When you distribute a control component, you're providing a tool other developers can use in their applications. Versioning issues address the question of how you update that tool without breaking your customers' code.</p>
<p>
Because you're providing a tool, instead of a finished application, you have licensing issues to consider. You have to decide whether to include licensing support for your control. If you plan on building your controls using licensed controls from other authors, you need to consider how that affects your distribution plans.</p>
<p>
Because the tool you're creating is an-process component ("ocx" is really just another way to spell DLL), you have to select a base address that will minimize memory conflicts, and thus avoid performance problems.</p>
<p>
Finally, because the tool you're creating uses the Visual Basic run-time DLL, and possibly other support files, you have to create a Setup program.</p>
<p>
Setup is covered in the remainder of this topic. The important subject of base addresses is discussed in "Setting Base Addresses for In-Process Components" in "Debugging, Testing, and Deploying Components."</p>
<p>
Licensing and versioning issues are covered in the following related topics:
<ul type=disc>
<li>
<a href="vbconlicensingissuesforolecontrols.htm">Licensing Issues for Controls</a>&nbsp;&nbsp;&nbsp;Explains how to add licensing to your control project, and discusses the implications of using licensed controls as constituent controls.<br><br></li>
<li>
<a href="vbconversioningissuesforolecontrols.htm">Versioning Issues for Controls</a>&nbsp;&nbsp;&nbsp;Explains the four areas of compatibility you need to consider when you create a new version of your control.</li>
</ul>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Be sure to set the description for each control in your control component. Some clients, such as Visual Basic, represent the entire .ocx file using the string you enter in the Project Description box of the Project Properties dialog box, but others display the browser strings for the individual controls. See "Providing Help and Browser Strings for Objects," in "Debugging, Testing, and Deploying Components."</p>
<h3>Creating Setup for ActiveX Control Components</h3>
<p>
ActiveX controls created with Visual Basic require the Visual Basic run-time DLL. Depending on what constituent controls you use, you may require additional support files. To ensure that you distribute all the necessary support files, using SetupWizard is recommended.</p>
<p>
For the most part, using SetupWizard for control components is no different from using it for any other component created using Visual Basic. This subject is thoroughly covered in "Debugging, Testing, and Deploying Components."</p>
<p>
If you plan to use your control component for Internet or intranet development, you can obtain the most up-to-date information on setup options from the Microsoft Visual Basic Web site.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The SetupWizard is introduced in "Distributing Your Application," in the <i>Visual Basic Programmer's Guide.</i></p>
</BODY>
</HTML>

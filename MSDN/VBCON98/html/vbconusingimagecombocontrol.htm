<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the ImageCombo Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingimagecombocontrol"></a>Using the ImageCombo Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingImageComboControlC">
</object></p>
<p>
An <b>ImageCombo</b> control is similar to a standard Windows combo box control, with some important differences. The most visible difference is the ability to include pictures with each item in the list portion of the combo. By using graphic images, you can make it easier for the user to identify and choose items from a list of possible selections.</p>
<p>
<img src="vb4ozb1.gif" border=0></p>
<p>
A less visible though equally important difference is the way the <b>ImageCombo</b> manages the list portion of the control. Each item in the list is a <b>ComboItem</b> object, and the list itself is the <b>ComboItems</b> collection of objects. This facilitates list management, making it easy to access items individually or collectively, and assign or change the properties that determine item content and appearance. This structure also makes it easier to deal with the images assigned to list items.</p>
<p>
Because the items in the list are objects in a collection, certain properties found in the standard combo box (such as List, ListIndex, and ItemData) are no longer required. Therefore, these properties are not present in the <b>ImageCombo</b> control.</p>
<p>
Each item in an <b>ImageCombo</b> list can have two pictures associated with it. The first picture, as specified by the <b>Image</b> property, appears in the drop-down portion of the control next to the text of the list item. The <b>SelImage</b> property specifies the list item's picture when it has been selected from the list. The <b>SelImage</b> picture appears next to the item in the edit portion of the combo box, as well as in the list portion. </p>
<p>
To manage the images used for the list items, the <b>ImageCombo</b> uses the <b>ImageList</b> common control. Images are assigned to items in the <b>ImageCombo</b> through an index or key value that references a picture stored in the <b>ImageList control</b>.</p>
<p>
The <b>ImageCombo</b> control also supports multiple levels of indentation. The amount of indentation is a property of the individual list item, so items maintain their level of indentation even if the list is reordered. Having items indented at different levels makes it possible to emphasize certain parts of the list or display hierarchical relationships.</p>
<h4>Possible Uses</h4>
<ul type=disc>
<li>
To create a Windows Explorer style interface or create custom dialog boxes that resemble the common File Open and File Save dialogs.<br><br></li>
<li>
To create a list that uses different graphics and/or indenting to indicate the status of list items based on some external context, such as the state of other controls on the form.<br><br></li>
<li>
To present hierarchical information to the user in a drop-down list format.<br><br></li>
<li>
To add visual enhancements or indicators to standard drop-down lists.<br><br></li>
<li>
To display a combo box with a standard appearance that makes use of advanced object-based properties, methods and structures in code.</li>
</ul>
<h4>Adding Items to the ImageCombo</h4>
<p>
To add a new item to an ImageCombo, you use the <b>Add</b> method to create a new <b>ComboItem</b> object in its <b>ComboItems</b> collection. You can supply optional arguments for the <b>Add</b> method to specify many of the properties of the new item, including its <b>Index</b> and <b>Key</b> values, any pictures it will use, and the level of indentation it will have. The <b>Add</b> method returns a reference to the newly created <b>ComboItem</b> object.</p>
<p>
The following code adds a new item called "Signal1" to the top of the list in an <b>ImageCombo</b>, as indicated by the supplied <b>Index</b> value of 1. The new item appears in the control as "Traffic," as specified in the object's <b>Text property</b>. The code then takes the reference to the new item returned by the <b>Add</b> method and uses it to change the item's ToolTip text.</p>
<pre><code>Dim objNewItem As ComboItem

   Set objNewItem = ImageCombo1.ComboItems.Add(1, _
   "Signal1", "Traffic")

   objNewItem.ToolTipText = "Traffic Light"</code></pre>
<h4>Using Pictures with ImageCombo list items</h4>
<p>
Images for the list items are supplied by an <b>ImageList</b> control associated with the <b>ImageCombo</b> control. For more information on using the <b>ImageList</b> control with other controls, see "Using the ImageList control."</p>
<p class=label>
<b>To associate an ImageList Control with the ImageCombo at run time</b>
<ol>
<li>
Populate the ImageList control with the images that will be used in the ImageCombo control.<br><br></li>
<li>
Right-click on the ImageCombo control and click <b>Properties</b> to open the <b>Property Pages</b> dialog box.<br><br></li>
<li>
On the <b>General</b> tab, click the ImageList box and select the ImageList control you have populated.</li>
</ol>
<p>
To associate an ImageList control with the ImageCombo control at run time, simply set the <b>ImageList</b> property to the name of the ImageList control, as shown in the example below:</p>
<pre><code>Private Sub Form_Load()
   Set ImageCombo1.ImageList = ImageList1
End Sub</code></pre>
<h4>Setting an item's picture</h4>
<p>
To specify the image that will appear next to a list item in the ImageCombo control, set the <b>Image</b> property of a ComboItem object equal to the <b>Index</b> or <b>Key</b> value of an image in the ImageList control. For example, if the first image in the ImageList control was assigned a <b>Key</b> value of "Stoplight", the following two lines of code accomplish the same thing:</p>
<pre><code>ImageCombo1.ComboItems("Signal1").Image = 1
ImageCombo1.ComboItems("Signal1").Image = "Stoplight"
</code></pre>
<p>
Alternatively, you can specify the image that will be associated with the ComboItem when you create it. Simply specify the <b>Key</b> or <b>Index</b> of the correct image as a parameter of the <b>Add</b> method, for example:</p>
<pre><code>ImageCombo1.ComboItems.Add(1, "Signal1", "Traffic", _
"Stoplight")</code></pre>
<h4>The selected item image</h4>
<p>
When you select an item from the list, the image specified by the ComboItem's <b>SelImage</b> property appears next to the item in the edit portion of the combo. The next time you drop down the combo box, the <b>SelImage</b> picture will appear next to the item in the list.</p>
<p>
If your ImageList control contained a picture with a <b>Key</b> value of "Greenlight," you could use the following code to use that picture as the selected image for a list item:</p>
<pre><code>ImageCombo1.ComboItems("Signal1").SelImage = _
"Greenlight"
</code></pre>
<p>
Or you could specify the image to use as the selected image when the new item is added to the list. Pass the <b>Key</b> or <b>Index</b> value of the image as a parameter to the <b>Add</b> method:</p>
<pre><code>ImageCombo1.ComboItems.Add(1, "Signal1", "Traffic", _
"Stoplight", "Greenlight")</code></pre>
<h4>Changing the Indentation of list items</h4>
<p>
The information in a combo list is often organized hierarchically. To facilitate this type of display, each ComboItem object has a specific level of indenting, as determined by the value of its <b>Indentation</b> property. Each level of indentation represents a space of ten pixels from the edge of the list, so a ComboItem with an <b>Indentation</b> of 3 would be indented by 30 pixels from a ComboItem with an <b>Indentation</b> of 0.</p>
<p>
To set the default indentation of all items on the list, set the value of the ImageCombo control's <b>Indentation</b> property, either at design time using the property sheet, or through code.</p>
<h4>Setting the Default Indentation of ComboItems</h4>
<ul type=disc>
<li>
Select the <b>Indentation</b> property from the Property Sheet and change its value to an integer greater than zero. Each level of indentation represents ten pixels.</li>
</ul>
<h4>Setting the Default Indentation of ComboItems Through Code</h4>
<p>
Use the following code:</p>
<pre><code>ImageCombo1.Indentation = 1
</code></pre>
<h4>Setting the Indentation of Individual ComboItem Objects</h4>
<p>
To set the indentation of a particular list item, set the <b>Indentation</b> of the ComboItem object, specifying a <b>Key</b> or and <b>Index</b> value to identify the object. For example, the following code indents every third item in the list by 20 pixels:</p>
<pre><code>For Each ComboItem In ImageCombo1.ComboItems
   If (ComboItem.Index / 3) = _
   (Int(ComboItem.Index / 3)) Then
      ComboItem.Indentation = 2
   End If
Next ComboItem
</code></pre>
<p>
The following code indents the item with a <b>Key</b> value of "RightOn" by 40 pixels:</p>
<pre><code>ImageCombo1.ComboItems("RightOn").Indentation = 4
</code></pre>
</BODY>
</HTML>

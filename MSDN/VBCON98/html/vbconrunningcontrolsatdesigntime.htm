<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Running the ShapeLabel Control at Design Time</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconrunningcontrolsatdesigntime"></a>Running the ShapeLabel Control at Design Time</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconRunningControlsAtDesignTimeC">
</object></p>
<p>
Unlike other programmable objects, controls have both design-time and run-time behavior. That is, some of the code in your control will execute when a developer places an instance of the control on a form at design time.</p>
<p>
For example, the code you place in the UserControl_Resize event procedure will be executed both at design time and at run time.</p>
<p>
In order to debug the design-time behavior of your control, you must be able to execute code in the control while the test form on which you place the control remains in design mode.</p>
<p>
The following two procedures demonstrate this neat trick. In the first procedure, you’ll add code to the Resize event of the ShapeLabel control. In the second procedure, you’ll put part of ControlDemo into run mode — while the test project remains in design mode — and then add an instance of the ShapeLabel control to a form in the test project.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX control. It begins with the topic <a href="vbconcreatingactivexcontrol.htm">Creating an ActiveX Control</a>.</p>
<p class=label>
<b>To add code to the Resize event</b>
<ol>
<li>
In the <b>Project Explorer</b> window, double-click <b>ShapeLabel</b> to make it the active designer.<br><br></li>
<li>
Double-click the <b>ShapeLabel</b> control to open the code window.<br><br></li>
<li>
In the <b>Procedure</b> box, click the Resize event to go to its event procedure. Add the following code:<pre><code>Private Sub UserControl_Resize()
 &nbsp; Static intCt As Integer
 &nbsp; intCt = intCt + 1
 &nbsp; Debug.Print "Resize " &amp; intCt
End Sub
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The name of the event procedure has the prefix "UserControl," just as the Form_Resize event procedure for an ordinary form has the prefix "Form."</p></li>
</ol>
<p>
In developing an ordinary Visual Basic application, you would now click the Start button on the toolbar, or press F5, to run your application. In order to put a ShapeLabel control on Form1, however, you have to run just the code for the control, leaving everything else in design mode.</p>
<p class=label>
<b>To run the ShapeLabel control at design time</b>
<ol>
<li>
In the <b>Project</b> window, double-click <b>ShapeLabel</b> to bring its designer to the front, then press CTRL+F4 to close the window. Closing the designer’s window puts the ShapeLabel control in run mode. As soon as the control is in run mode, its icon (the default toolbox icon for a user control) is enabled in the toolbox.<p>
<img src="avtcm023.gif" border=0></P><p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Don’t click the <b>Start</b> button on the toolbar, or press F5, because this would put the entire project group into run mode, and you would be unable to add the new control to a form.</p><p class=atl>
When you put a control in run mode, it doesn’t matter how you close the designer’s window. (You always can tell if the designer is open, because the control’s toolbox icon will be grayed.)</p></li>
<li>
In the <b>Project Explorer</b> window, double-click <b>Form1</b> to bring it to the front.<br><br></li>
<li>
Double-click the <b>ShapeLabel</b> icon to add a ShapeLabel control to Form1. The control appears as a flat gray rectangle with grab handles:<p>
<img src="avtcm024.gif" border=0></P><p class=tl>
In the <b>Properties </b>window you can see the default properties for a new control. The ShapeLabel control you just added to the form has been given a default name, ShapeLabel1.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Naming your control when you begin designing it avoids confusion. Suppose you place a control with a default name, such as UserControl1, on a form. Automatic numbering of new controls would append a number to the control name, resulting in a confusing name like UserControl11.</p></li>
<li>
The ShapeLabel control’s Resize event occurred when it was placed on the form, as you can see by looking at the <b>Immediate</b> window. Use the grab handles to resize the control several times. Each time you resize it, the Resize event occurs again.<p class=tl>
If you simply move the control around the form, the Resize event does not occur.</P></li>
<li>
On Form1, double-click the <b>ShapeLabel</b> control to open the code window for Form1. The cursor will be on the default event procedure, ShapeLabel1_GotFocus. You can use the <b>Procedure</b> box to view the other three events Visual Basic automatically provides for your control. Close the code window when you are done.<br><br></li>
<li>
In the <b>Project Explorer</b> window, double-click <b>ShapeLabel</b> to open the ShapeLabel designer. Notice that the ShapeLabel control you placed on Form1 is shaded with hatch marks to indicate that it is inactive.<p>
<img src="avtcm025.gif" border=0></P><p class=tl>
Opening a control’s designer makes all instances of the control inactive. Changing the code in the control’s code window may also make control instances inactive.</P></li>
<li>
Code in ShapeLabel’s code module cannot be executed while the designer is open. Use the grab handles to resize the shaded ShapeLabel control on Form1. The Resize event doesn’t fire, so no new messages appear in the <b>Immediate</b> window.<br><br></li>
<li>
Be sure the <b>ShapeLabel</b> designer is in front, then press CTRL+F4 to close the window, reactivating the control instance. The shading disappears from the control on Form1, indicating that the instance is active again.<p class=tl>
If the control has become inactive because of changes to its code, you can right-click the test form to bring up its context menu, and click <b>Update UserControls</b> to reactivate control instances.</P></li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Due to the number of windows required by these procedures, you may frequently find that ShapeLabel’s designer has disappeared behind another form. You can double-click <b>ShapeLabel</b> in the <b>Project Explorer</b> window to bring the designer to the front.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;More information about running code at design time can be found in "Debugging Controls," in "Building ActiveX Controls."</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX control.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>To</b></td>
<td class=label width=62%><b>See</b></td>
</tr>
<tr valign=top>
<td width=38%>Go to the next step</td>
<td width=62%><a href="vbconlifetimesofusercontrol.htm">Life and Times of a UserControl Object</a></td>
</tr>
<tr valign=top>
<td width=38%>Start from the beginning</td>
<td width=62%><a href="vbconcreatingactivexcontrol.htm">Creating an ActiveX Control</a></td>
</tr>
</table><br>
</BODY>
</HTML>

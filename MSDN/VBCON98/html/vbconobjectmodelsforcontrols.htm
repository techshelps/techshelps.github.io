<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object Models for Controls</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconobjectmodelsforcontrols"></a>Object Models for Controls</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconObjectModelsForControlsC">
</object></p>
<p>
Complex controls such as TreeView and Toolbar provide run-time access to their functionality through objects. For example, the TreeView control has a Nodes collection containing Node objects that represent the items in the hierarchy the TreeView control displays. Users can create new nodes using the Add method of the Nodes collection.</p>
<p>
Objects like Node and Nodes are called <i>dependent objects.</i> Dependent objects exist only as a part of some other object, as Node objects are always part of a TreeView control. They cannot be created independently.</p>
<p>
You can provide dependent objects like Node and Nodes by including class modules in your ActiveX control project and organizing them into an object model. Object models can be as simple as the Nodes collection with its Node objects, or arbitrarily complex.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Control components can only provide dependent objects. They cannot provide objects that can be independently created, using the New operator or the CreateObject function.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Dependent objects are discussed in "Instancing for Classes Provided by ActiveX Components," in "General Principles of Component Design." Also, you can read about object models in "Organizing Objects: The Object Model," which is also in "General Principles of Component Design."</p>
<p>
Some design considerations for collections in controls are discussed in "Creating Robust Controls," later in this chapter. More information on robust techniques for using objects can be found in "Private Communications Between Your Objects," in "General Principles of Component Design."</p>
<p>
Classes, class modules, and objects are discussed in "Programming with Objects," in the <i>Visual Basic Programmer's Guide.</i></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Objects at Run Time with the OLE Container Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingobjectsatruntimewiththeolecontainercontrol"></a>Creating Objects at Run Time with the OLE Container Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingObjectsAtRunTimeWithTheOLEContainerControlC">
</object></p>
<p>
To create a linked or embedded object at run time, you use methods and properties in code. The OLE container control has a variety of properties and methods that you can use for manipulating linked or embedded objects. For a complete list of the properties and methods that apply to the OLE container control, see "OLE Container Control."</p>
<h2>Using the Object Property</h2>
<p>
By using the OLE container control's Object property, you can also use the properties and methods of the linked or embedded object. The Object property is a run-time, read-only property that holds a reference to the object in an OLE container control. Use this property to perform Automation tasks with the OLE container control, including programmatically manipulating the properties and methods an object supports:</p>
<pre><code>strObjName = oleObj1.Object.Name
</code></pre>
<p>
To use this property, the OLE container control must contain an object that is programmable. For more information on programmable objects, see "Types of ActiveX Components."</p>
<h2>Creating Linked Objects at Run Time</h2>
<p>
You can create a linked object from a file at run time with the OLE container control's CreateLink method. This method takes one argument, <i>sourcedoc</i>, which is the file from which the object is created, and an optional argument, <i>sourceitem</i>, which specifies the data you want to link from within the source file. The following code fragment creates a linked object at run time:</p>
<pre><code>oleObj1.CreateLink "C:\Excel\Test.xls"
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you use CreateLink to create a linked object, you do not have to set the Class, SourceDoc, and SourceItem properties in the Properties window.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "CreateLink Method."</p>
<h2>Creating Embedded Objects at Run Time</h2>
<p>
To create an embedded object from a file at run time, you can use the CreateEmbed<b> </b>method. This method has two arguments, <i>sourcedoc</i> and <i>class </i>(which is optional if SourceDoc is specified)<i>.</i> <i>Sourcedoc</i> determines the template for the object, and <i>class </i>determines the object type. When you use CreateEmbed, you do not need to set the SourceDoc and Class properties.</p>
<p>
The following code fragment creates an embedded object using an existing file as a template for the object.</p>
<pre><code>oleObj1.CreateEmbed "Q1profit.xls"
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "CreateEmbed Method."</p>
<p>
When you create an empty embedded object, it is a good idea to activate the ActiveX component that will provide data for the object. You can do this with the DoVerb method. This allows the user to enter any data into the application at run time. The user can then show this newly entered data in the OLE container control by choosing the ActiveX component's Update command (this menu command should appear on the component's File menu).</p>
<p class=label>
<b>To create an empty embedded object at run time</b>
<ol>
<li>
Use the CreateEmbed method without specifying a source document to create an empty embedded object. For example, this code fragment inserts a file template for a Microsoft Excel Worksheet in the OLE container control:<pre><code>oleObj1.CreateEmbed "","Excel.Sheet"
</code></pre>
</li>
<li>
Use the DoVerb method. The default verb for the DoVerb method depends on the application. With Microsoft Excel, the default verb is Edit.</li>
</ol>
<p>
For example, the following code fragment creates an empty embedded object and then activates the application that created it using the default DoVerb action.</p>
<pre><code>oleObj1.CreateEmbed "", "Excel.Sheet"
oleObj1.DoVerb -5&nbsp; ' Activate
</code></pre>
<p>
Providing empty embedded objects is useful when creating a document-centered application that uses a variety of information from different applications. For more information, see "Letting the User Specify Objects at Run Time."</p>
<h2>Binding a Database to the OLE Container Control</h2>
<p>
You can bind the OLE container control to data stored in the Microsoft Jet database engine or Microsoft Access database. You may want to do this, for example, if you have a database with a table of employee pictures. If the pictures are stored as objects, you can bind them to the OLE container control and display them on a form as each record is accessed with the data control. To bind data to one of these databases, specify the source of data (recordset name) in the DataSource property and the field name from that data source in the DataField property of the OLE container control. When displaying an object from a database, the OLE container control allows the user to activate, edit, and update the object. As with any bound control, the updated object is automatically written back to the database when the record position is changed.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See the <i>Data Access Guide</i>.</p>
</BODY>
</HTML>

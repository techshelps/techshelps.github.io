<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>List Box Control Scenario 1: Adding and Deleting Items</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlistboxcontrolscenarioaddingdeletingitems"></a>List Box Control Scenario 1: Adding and Deleting Items</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconListBoxControlScenarioAddingDeletingItemsC">
</object></p>
<p>
This example shows how you can use the AddItem, RemoveItem, and Clear methods with the ListIndex and ListCount properties to add and remove list entries at run time. The example in Figure 7.36 lets a user type a client's name in a text box, which can be added to the list box if the Add button is clicked. A user can remove a current list item by selecting the item and choosing the Remove button, or by choosing Clear to clear all list entries.</p>
<p class=label>
<b>Figure 7.36&nbsp;&nbsp;&nbsp;A list box using the AddItem, RemoveItem, and Clear methods</b></p>
<p>
<img src="avp07050.gif" border=0></p>
<p>
The number of clients in the list box is displayed in a label that looks like a text box (BorderStyle is set to 1-Fixed Single). This label is updated every time a client name is added or removed. Because the Sorted property for the list box is set to True, items are added to the list box in alphabetical order.</p>
<p>
Create a form with a text box, a list box, three labels, and four command buttons. The following table lists the property settings for the objects in the application.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Object</b></td>
<td class=label width=34%><b>Property</b></td>
<td class=label width=35%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=31%>Top text box</td>
<td width=34%>Name<br>
Text</td>
<td width=35%>txtName<br>
(Empty)</td>
</tr>
<tr valign=top>
<td width=31%>Top label</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>lblName<br>
&amp;Name to add</td>
</tr>
<tr valign=top>
<td width=31%>List box</td>
<td width=34%>Name<br>
Sorted</td>
<td width=35%>lstClient<br>
True</td>
</tr>
<tr valign=top>
<td width=31%>Bottom label</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>lblClients<br>
# Clients</td>
</tr>
<tr valign=top>
<td width=31%>Number of clients label<br>
(looks like a text box)</td>
<td width=34%>Name<br>
Caption<br>
BorderStyle</td>
<td width=35%>lblDisplay<br>
(Empty)<br>
1-Fixed Single</td>
</tr>
<tr valign=top>
<td width=31%>First command button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>cmdAdd<br>
&amp;Add</td>
</tr>
<tr valign=top>
<td width=31%>Second command button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>cmdRemove<br>
&amp;Remove</td>
</tr>
<tr valign=top>
<td width=31%>Third command button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>cmdClear<br>
&amp;Clear</td>
</tr>
<tr valign=top>
<td width=31%>Fourth command button</td>
<td width=34%>Name<br>
Caption</td>
<td width=35%>cmdClose<br>
&amp;Close</td>
</tr>
</table><br>
<h2>Events in the List Box Application</h2>
<p>
Add this code to the cmdAdd_Click event procedure:</p>
<pre><code>Private Sub cmdAdd_Click ()
   lstClient.AddItem txtName.Text   ' Add to list.
   txtName.Text = ""      ' Clear text box.
   txtName.SetFocus
   ' Display number.
   lblDisplay.Caption = lstClient.ListCount
End Sub
</code></pre>
<p>
Add this code to the cmdRemove_Click event procedure:</p>
<pre><code>Private Sub cmdRemove_Click ()
   Dim Ind As Integer

   Ind = lstClient.ListIndex   ' Get index.
   ' Make sure list item is selected.
   If Ind &gt;= 0 Then
      ' Remove it from list box.
      lstClient.RemoveItem Ind
      ' Display number.
      lblDisplay.Caption = lstClient.ListCount
   Else
      Beep
   End If
   ' Disable button if no entries in list.
   cmdRemove.Enabled = (lstClient.ListIndex &lt;&gt; -1)
End Sub
</code></pre>
<p>
Add this code to the cmdClear_Click event procedure:</p>
<pre><code>Private Sub cmdClear_Click ()
   ' Empty list box.
   lstClient.Clear
   ' Disable Remove button.
   cmdRemove.Enabled = False
   ' Display number.
   lblDisplay.Caption = lstClient.ListCount
End Sub
</code></pre>
<p>
Add this code to the cmdClose_Click event procedure:</p>
<pre><code>Private Sub cmdClose_Click ()
   Unload Me
End Sub
</code></pre>
<p>
Add this code to the lstClient_Click event procedure:</p>
<pre><code>Private Sub lstClient_Click ()
   cmdRemove.Enabled = lstClient.ListIndex &lt;&gt; -1
End Sub
</code></pre>
<p>
Add this code to the txtName_Change event procedure:</p>
<pre><code>Private Sub txtName_Change ()
' Enable the Add button if at least one character 
' in the name.
cmdAdd.Enabled = (Len(txtName.Text) &gt; 0)
End Sub
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ProgressBar Control Scenario 2: Using the ProgressBar to Show a TimeOut Interval</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconprogressbarcontrolscenario2"></a>ProgressBar Control Scenario 2: Using the ProgressBar to Show a TimeOut Interval</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconProgressBarControlScenario2C">
</object></p>
<p>
Applications that create processes over networks often have a "TimeOut" interval. This is a predetermined period of time after which the user will be presented with the choice of canceling a process, or continuing to wait. One way of graphically representing the TimeOut interval is with the ProgressBar control.</p>
<p>
The following example uses the following objects:
<ul type=disc>
<li>
Form Object named "frmTimer"<br><br></li>
<li>
ProgressBar control named "prgBar1"<br><br></li>
<li>
Timer control named "tmrTimer"<br><br></li>
<li>
CommandButton control named "cmdBegin"</li>
</ul>
<p class=label>
<b>To create a progress bar that reflects a TimeOut interval</b>
<ol>
<li>
In the Form's Load event, set a Timer control's Interval property to 1000.<br><br></li>
<li>
Set the ProgressBar control's Max property to the TimeOut Interval.<br><br></li>
<li>
Begin the Timer with the Enabled property.<br><br></li>
<li>
In the Timer control's Timer event, declare a Static variable to count the number of intervals.<br><br></li>
<li>
Set the ProgressBar's value to the variable.<br><br></li>
<li>
Test to see if the ProgressBar's value is the Max property.</li>
</ol>
<h3>In the Form's Load event, Set the Timer Control's Interval Property to 1000</h3>
<p>
In the Form object's Load event, configure the Timer control's Interval property. Because it's more useful to time a process in seconds, set the Interval to 1000 (milliseconds, or 1 second). Thus, at one second intervals, the ProgressBar control's Value property is updated.</p>
<pre><code>tmrTimer.Interval = 1000
</code></pre>
<h3>In the Form Load event, Set the ProgressBar Control's Max Property to the TimeOut Interval</h3>
<p>
The Load event is also where you set the Max property of the ProgressBar. The value of the Max property should be the number of seconds you want the Timer to continue before being disabled. However, to accurately reflect the number of seconds that must elapse, the ProgressBar's Min property should be set to 1.</p>
<p>
The Load event can also be used to hide the ProgressBar by setting its Visible property to False. The following code shows the entire Load event with the previous code included.</p>
<pre><code>Private Sub Form_Load()
   prgBar1.Visible = False
   tmrTimer.Interval = 1000
   prgBar1.Max = 10 ' Timer will go for 10 seconds.
End Sub
</code></pre>
<h3>Begin the Timer with the Enabled Property</h3>
<p>
To start the timer, you must use the Enabled property. When you begin to time any process, you should also show the ProgressBar, as shown:</p>
<pre><code>Private Sub cmdBegin_Click()
   prgBar1.Visible = True
   tmrTimer.Enabled = True
End Sub
</code></pre>
<h3>In the Timer Event, Declare a Static Variable and Set it to 1</h3>
<p>
In the Timer event, declare a static variable. This allows you to efficiently increment the variable every time the Timer event occurs. But as we don't wish to count from 0, we must also set the variable to 1, using the IsEmpty function, as shown:</p>
<pre><code>Static intTime
If IsEmpty(intTime) Then intTime = 1</code></pre>
<h3>Set the ProgressBar's Value to the Variable</h3>
<p>
Each time the Timer event occurs, the ProgressBar's Value property must be set to the value of the static variable:</p>
<pre><code>prgBar1.Value = intTime
</code></pre>
<h3>Test to See If the ProgressBar's Value is the Max Property.</h3>
<p>
After the ProgressBar's Value property has been updated, the variable must be tested to see if the TimeOut limit has occurred. If it has been reached, the variable must be reset to 1, the ProgressBar control hidden and its Value property reset to 1, and the Timer control disabled. If the limit hasn't been reached, then the variable is incremented by one. These steps are all implemented with an If statement, in the Timer event, as shown:</p>
<pre><code>Private Sub tmrTimer_Timer()
   Static intTime ' Declare the static variable.
   ' The first time, the variable will be empty. 
   ' Set it to 1 if it is an empty variable.
   If IsEmpty(intTime) Then intTime = 1
   
   prgBar1.Value = intTime ' Update the ProgressBar.
       
   If intTime = prgBar1.Max Then
      Timer1.Enabled = False
      prgBar1.Visible = False
      intTime = 1
      prgBar1.Value = prgBar1.Min   
   Else
      intTime = intTime + 1
   End If
End Sub
</code></pre>
<h2>The Complete Code</h2>
<p>
Here is the complete code for the example described in this topic:</p>
<pre><code>Private Sub Form_Load()
   prgBar1.Visible = False
   tmrTimer.Interval = 1000
   prgBar1.Max = 10 ' Timer will go for 10 seconds.
End Sub

Private Sub cmdBegin_Click()
   prgBar1.Visible = True
   tmrTimer.Enabled = True
End Sub

Private Sub tmrTimer_Timer()
   Static intTime ' Declare the static variable.
   ' The first time, the variable will be empty. 
   ' Set it to 1 if it is an empty variable.
   If IsEmpty(intTime) Then intTime = 1
   
   prgBar1.Value = intTime ' Update the ProgressBar.
       
   If intTime = prgBar1.Max Then
      Timer1.Enabled = False
      prgBar1.Visible = False
      intTime = 1
      prgBar1.Value = prgBar1.Min   
   Else
      intTime = intTime + 1
   End If
End Sub
</code></pre>
</BODY>
</HTML>

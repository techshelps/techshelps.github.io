<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Control Creation Terminology</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcontrolcreationterminology"></a>Control Creation Terminology</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconControlCreationTerminologyC">
</object></p>
<p>
Controls are unlike other objects you create with Microsoft Visual Basic. They're not just code; they have visual parts, like forms — but unlike forms, they can't exist without some kind of container. In addition, controls are used — in different senses — by both developers and end users of applications.</p>
<p>
These characteristics of controls require some additional terminology.</p>
<h2>Control Class vs. Control Instance</h2>
<p>
The control you develop in Visual Basic is actually a <i>control class, </i>a description from which controls will be created. When you put a control on a form, you're creating an instance of this control class.</p>
<p>
To avoid confusion, remember that the control class you're designing is distinct from the <i>control instances</i> you place on forms.</p>
<h2>Control vs. Control Component</h2>
<p>
Controls are objects provided by <i>control components, </i>also known as .ocx files. A control component may provide more than one kind of control.</p>
<p>
An ActiveX control project contains one or more .ctl files, each of which defines a control class. When you build the project, Visual Basic gives the control component an .ocx extension.</p>
<p>
A developer who buys your control component and installs it can use any of the controls you defined (and made public).</p>
<h2>Containers and Siting</h2>
<p>
A control instance cannot exist by itself. It must be placed on a container object, such as a Visual Basic form. The process of hooking a control instance up to its container is called <i>siting </i>— that is, assigning the control a <i>site</i> on the container.</p>
<p>
When a control instance has been sited, its events are available as event procedures in the form's code window, and it has access to other services the container provides, such as Extender and AmbientProperties objects.</p>
<h2>Interface vs. Appearance</h2>
<p>
A control consists of three parts, two public and one private. The control's <i>appearance</i> is public, because users see and interact with it. The control's <i>interface</i> — the set of all its properties, methods, and events — is also public, because it's used by any program that includes instances of the control.</p>
<p>
The private part of a control is its <i>implementation,</i> the code that makes the control work. The effects of a control's implementation can be seen, but the code itself is invisible.</p>
<h2>Author vs. Developer</h2>
<p>
The <i>author </i>of a control compiles her project as a control component, or .ocx file, which may contain one or more controls. A <i>developer </i>uses the control (or controls) to create an application, and includes the .ocx file in their setup program. The <i>user </i>installs and uses the application.</p>
<p>
These terms avoid confusion between the developer of a control and the developer who uses the control in an application. The former will be referred to throughout as the author of the control.</p>
<p>
For example, the author of the control is the only person who can place code in the event procedure for the UserControl object's Click event.</p>
<p>
If she ends that code by raising her own Click event, the developer who adds an instance of the control to one of his forms will have an event procedure in which to place code he wants to execute when the user of his application clicks on that control instance.</p>
<p>
When the user of the application clicks on the control, the author's code and the developer's code get executed.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Developers are not the only direct consumers of ActiveX controls. You can design controls for users to place on documents in desktop applications such as Microsoft Office.</p>
<h2>Design-Time Instance vs. Run-Time Instance</h2>
<p>
When a Visual Basic user puts a control on a form at design time, an actual instance of the control class is created. The user thinks of this control as a permanent fixture of the form. In fact, it's only a <i>design-time instance;</i> if the form is closed for any reason — clicking its Close button, closing the project, or pressing F5 to place the project in Run mode — this design-time instance is destroyed.</p>
<p>
If the project is placed in Run mode, a <i>run-time instance</i> of the control is created when the form is loaded. This run-time instance is destroyed when the form is unloaded. When the form once again appears in design mode, a new design-time instance of the control is created.</p>
<p>
A new design-time instance is also created the first time the form's .frm file is opened, after the project that contains the form is opened in the development environment. The .frm file contains all the values of the control instance's properties.</p>
<p>
The property values in the in-memory copy of the .frm file are used by Visual Basic to re-create the control as modes change. When you make the project into an executable, the property values it contains are compiled in, so that a run-time instance of the control can be created when the compiled application is run.</p>
<p>
Control lifetime is discussed in more detail in "Understanding Control Lifetime and Key Events," later in this chapter.</p>
</BODY>
</HTML>

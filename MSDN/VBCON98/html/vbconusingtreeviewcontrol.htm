<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the TreeView Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingtreeviewcontrol"></a>Using the TreeView Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingTreeViewControlC">
</object></p>
<p>
The TreeView control is designed to display data that is hierarchical in nature, such as organization trees, the entries in an index, the files and directories on a disk.</p>
<p class=label>
<b>Figure 2.40&nbsp;&nbsp;&nbsp;Typical TreeView</b></p>
<p>
<img src="avtct001.gif" border=0></p>
<h2>Possible Uses</h2>
<ul type=disc>
<li>
To create an organization tree that can be manipulated by the user.<br><br></li>
<li>
To create a tree that shows at least two or more levels of a database.</li>
</ul>
<h2>Setting Node Object Properties</h2>
<p>
A "tree" is comprised of cascading branches of "nodes," and each node typically consists of an image (set with the Image property) and a label (set with the Text property). Images for the nodes are supplied by an ImageList control associated with the TreeView control. For more information on using the ImageList control with other controls, see "Using the ImageList control."</p>
<p>
A node can be expanded or collapsed, depending on whether or not the node has child nodes — nodes which descend from it. At the topmost level are "root" nodes, and each root node can have any number of child nodes. The total number of nodes is not limited (except by machine constraints). Figure 2.41 shows a tree with two root nodes; "Root 1" has three child nodes, and "Child 3" has a child node itself. "Root 2" has child nodes, as indicated by the "+" sign, but is unexpanded.</p>
<p class=label>
<b>Figure 2.41&nbsp;&nbsp;&nbsp;Root and child nodes</b></p>
<p>
<img src="avtct032.gif" border=0></p>
<p>
Each node in a tree is actually a programmable Node object, which belongs to the Nodes collection. As in other collections, each member of the collection has a unique Index and Key property which allows you to access the properties of the node. For example, the code below uses the Index of a particular node ("7") to set the Image and Text properties:</p>
<pre><code>tvwMyTree.Nodes(7).Image = "closed" 
tvwMyTree.Nodes(7).Text = "IEEE"
</code></pre>
<p>
However, if a unique key, for example "7 ID" had been assigned to the node, the same code could be written as follows:</p>
<pre><code>tvwMyTree.Nodes("7 ID").Image = "closed"
tvwMyTree.Nodes("7 ID").Text = "IEEE"
</code></pre>
<h3>Node Relationships and References to Relative Nodes</h3>
<p>
Each node can be either a child or a parent, depending on its relationship to other nodes. The Node object features several properties which return various kinds of information about children or parent nodes. For example, the following code uses the Children property to return the number of children — if any — a node has:</p>
<pre><code>MsgBox tvwMyTree.Nodes(10).Children
</code></pre>
<p>
However, some of the properties do not return information, as the Children property does, but instead return a <i>reference</i> to another node object. For example, the Parent property returns a reference to the parent of any particular node (as long as the node is not a root node). With this reference, you can manipulate the parent node by invoking any methods, or setting properties, that apply to Node objects. For example, the code below returns the Text and Index properties of a parent node:</p>
<pre><code>MsgBox tvwMyTree.Nodes(10).Parent.Text
MsgBox tvwMyTree.Nodes(10).Parent.Index
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Use the Set statement with an object variable of type Node to manipulate references to other Node objects. For example, the code below sets a Node object variable to the reference returned by the Parent property. The code then uses the object variable to return properties of the relative node:</p>
<pre><code>Dim tempNode As Node ' Declare object variable.
' Set object variable to returned reference.
Set tempNode = tvwMyTree.Nodes(10).Parent 
MsgBox tempNode.Text ' Returns parent's Text.
MsgBox tempNode.Index ' Returns parent's Index.
</code></pre>
<h3>Adding Node Objects to the Nodes Collection</h3>
<p>
To add a Node to the tree, use the Add method (Nodes collection). This method includes two arguments, <i>relative</i> and <i>relationship</i>, which can determine where the node will be added. The first argument <i>relative</i> names a node; the second argument <i>relationship </i>specifies the relationship between the new node and the node named in <i>relative</i>.</p>
<p>
For example, the following code adds a node named "11 node" as a child of another node named "7 node." The intrinsic constant tvwChild specifies that the new node is a child of the node named in the previous argument. The third argument assigns the Key property to the new node.</p>
<pre><code>tvwMyTree.Nodes.Add "7 node", tvwChild, "11 node"
</code></pre>
<p>
Other possible relationships include:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Constant</b></td>
<td class=label width=16%><b>Value</b></td>
<td class=label width=63%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=21%>tvwLast</td>
<td width=16%>1</td>
<td width=63%>The Node is placed after all other nodes at the same level of the node named in <i>relative</i>.</td>
</tr>
<tr valign=top>
<td width=21%>tvwNext</td>
<td width=16%>2</td>
<td width=63%>The Node is placed after the node named in <i>relative</i>.</td>
</tr>
<tr valign=top>
<td width=21%>tvwPrevious</td>
<td width=16%>3</td>
<td width=63%>The Node is placed before the node named in <i>relative</i>.</td>
</tr>
<tr valign=top>
<td width=21%>tvwChild</td>
<td width=16%>4</td>
<td width=63%>The Node becomes a child node of the node named in <i>relative</i>.</td>
</tr>
</table><br>
<p>
For example, suppose there were three existing nodes, and you wished to place a fourth node between the second and the third nodes, the code would be:</p>
<pre><code>' Assuming the second node's Key value is "2 node".
tvwMyTree.Nodes.Add "2 node", tvwNext
</code></pre>
<p>
Other arguments of the Add method are <i>key</i>, <i>text</i>, and <i>image.</i> Using these arguments, you can assign the Key, Text, and Image properties as the Node object is created.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information about the Nodes collection's Add method See "Add Method" by typing "Add Method" in the Index search and clicking "Add Method (Nodes Collection)."</p>
<p>
A second way of adding nodes is to declare an object variable of type Node, and then use the Set statement with the Add method. The Set statement sets the object variable to the new node. You can then use the object variable to set the node's properties, as shown below:</p>
<pre><code>Dim nodX As Node
Set nodX = tvwMyTree.Nodes.Add("10 node", tvwChild)
nodX.Key = "11 node"
nodX.Text = "IEEE"
nodX.Image = "closed"
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Using the Set statement with the Add method makes reading and debugging your code easier. However, using the Add method and its arguments to add nodes creates faster code.</p>
</BODY>
</HTML>

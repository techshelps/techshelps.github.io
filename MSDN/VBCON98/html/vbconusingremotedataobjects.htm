<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Programming with Remote Data Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingremotedataobjects"></a>Programming with Remote Data Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingRemoteDataObjectsC">
</object></p>
<p>
RDO objects and collections provide a framework for using code to create and manipulate components of a remote ODBC database system. Objects and collections have properties that describe the characteristics of database components and methods that you use to manipulate them. Using the containment framework, you create relationships among objects and collections, and these relationships represent the logical structure of your database system.</p>
<p class=label>
<b>Figure 11.1 The RDO 2.0 object model</b></p>
<p>
<img src="avc33002.gif" border=0></p>
<p>
With the exception of the rdoEngine object, each of these objects is maintained in an associated collection. When RDO is initialized on first access, RDO automatically creates an instance of the rdoEngine and the default rdoEnvironments(0).</p>
<p>
The Remote Data Object programming model is similar to the Data Access Objects (DAO) programming model in many respects. However, far more emphasis is focused on handling stored procedures and their result sets, and less emphasis is placed on data access retrieval methods used solely by ISAM programming models. The following table describes each of the objects.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>RDO object</b></td>
<td class=label width=62%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=38%>rdoEngine</td>
<td width=62%>The base object. Created automatically when you first access RDO in your application. </td>
</tr>
<tr valign=top>
<td width=38%>rdoError </td>
<td width=62%>Used to handle all ODBC errors and messages generated by RDO. Created automatically.</td>
</tr>
<tr valign=top>
<td width=38%>rdoEnvironment</td>
<td width=62%>Defines a logical set of connections and transaction scope for a particular user name. Contains both open and allocated (but unopened) connections, provides mechanisms for simultaneous transactions, and provides a security context for data manipulation language (DML) operations on the database. rdoEnvironments(0) created automatically.</td>
</tr>
<tr valign=top>
<td width=38%>rdoConnection</td>
<td width=62%>Represents an open connection to a remote data source and a specific database on that data source, or an allocated but as yet unconnected object, which can be used to subsequently establish a connection.</td>
</tr>
<tr valign=top>
<td width=38%>rdoTable</td>
<td width=62%>Represents the stored definition of a base table or an SQL view.</td>
</tr>
<tr valign=top>
<td width=38%>rdoResultset</td>
<td width=62%>Represents the rows that result from running a query.</td>
</tr>
<tr valign=top>
<td width=38%>rdoColumn</td>
<td width=62%>Represents a column of data with a common data type and a common set of properties.</td>
</tr>
<tr valign=top>
<td width=38%>rdoQuery</td>
<td width=62%>An SQL query definition that can include zero or more parameters.</td>
</tr>
<tr valign=top>
<td width=38%>rdoParameter</td>
<td width=62%>Represents a parameter associated with an rdoQuery object. Query parameters can be input, output, or both.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;True distributed transactions can only be done between database management systems that support the Distributed Transaction Coordinator (DTC). At this time, only Microsoft SQL Server 6.5 supports this functionality. For more information about DTC, see "Using the rdoEnvironment Object to Manage Transactions" in this chapter.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The RDO 1.0 rdoPreparedStatement object and rdoPreparedStatements collection are supported by RDO 2.0, but only for backward compatibility. You should convert your code to use the rdoQuery object and rdoQueries collection instead.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Types Allowed in Properties and Methods</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondatatypesusedinpropertiesmethods"></a>Data Types Allowed in Properties and Methods</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDataTypesUsedInPropertiesMethodsC">
</object></p>
<p>
Classes can have properties and methods of any public data type supported by Automation. This includes all arguments of properties and methods, as well their return values. The allowed data types include:
<ul type=disc>
<li>
Public objects provided by another component, such as DAO or a component authored using Visual Basic.<br><br></li>
<li>
Public objects provided by Visual Basic for applications, such as the Error and Collection objects.<br><br></li>
<li>
Objects defined in public classes in the component.<br><br></li>
<li>
Public enumerations declared in public class modules.<br><br></li>
<li>
Standard system data types defined by Automation, such as OLE_COLOR and OLE_TRISTATE.<br><br></li>
<li>
The intrinsic data types provided by Visual Basic.<br><br></li>
<li>
User-defined types.</li>
</ul>
<h2>On the Evils of Returning Private Objects</h2>
<p>
The following data types are not allowed, and references to them should never be returned to client applications:
<ul type=disc>
<li>
All of the objects provided in the Visual Basic (VB) object library — for example, controls. Use the Object Browser to view the entire list.<br><br></li>
<li>
All forms.<br><br></li>
<li>
All class modules whose Instancing property is set to Private.<br><br></li>
<li>
References to ActiveX controls.</li>
</ul>
<p>
Visual Basic prevents you from passing non-visual private objects to or from out-of-process components. Attempting to do so causes error 98, "A property or method call cannot include a reference to a private object, either as an argument or as a return value." This error is always received by the client.</p>
<p>
In other cases, it is possible to trick Visual Basic and pass private objects to client programs. Don’t do this. <i>References to private objects will not keep a component running.</i></p>
<p>
If your component shuts down, because all references to your public objects have been released, any remaining private objects will be destroyed, <i>even if clients still hold references to them</i>.</p>
<p>
Subsequent calls to the properties and methods of these objects will cause errors, in the case of out-of-process components. In the case of in-process components, a fatal program fault may occur in the client.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Private objects are private for a reason, usually because they were not designed to be used outside your project. Passing them to a client may decrease program stability and cause incompatibility with future versions of Visual Basic. If you need to pass a private class of your own to a client, set the Instancing property to a value other than Private.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"Building Code Components" shows how events can eliminate the need for public call-back classes, allowing Standard EXE projects to use call-backs without providing public objects or passing out references to private objects.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Converting C Declarations to Visual Basic</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconconvertingcdeclarationstovisualbasic"></a>Converting C Declarations to Visual Basic</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconConvertingCDeclarationsToVisualBasicC">
</object></p>
<p>
The procedures in DLLs are most commonly documented using C language syntax. To call these procedures from Visual Basic, you need to translate them into valid Declare statements and call them with the correct arguments.</p>
<p>
As part of this translation, you must convert the C data types into Visual Basic data types and specify whether each argument should be called by value (ByVal) or implicitly, by reference (ByRef). The following table lists common C language data types and their Visual Basic equivalents for 32-bit versions of Windows.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>C language data type</b></td>
<td class=label width=38%><b>In Visual Basic declare as</b></td>
<td class=label width=29%><b>Call with</b></td>
</tr>
<tr valign=top>
<td width=33%>ATOM</td>
<td width=38%>ByVal <i>variable</i> As Integer</td>
<td width=29%>An expression that evaluates to an Integer</td>
</tr>
<tr valign=top>
<td width=33%>BOOL</td>
<td width=38%>ByVal <i>variable</i> As Long</td>
<td width=29%>An expression that evaluates to a Long</td>
</tr>
<tr valign=top>
<td width=33%>BYTE</td>
<td width=38%>ByVal <i>variable</i> As Byte</td>
<td width=29%>An expression that evaluates to a Byte</td>
</tr>
<tr valign=top>
<td width=33%>CHAR</td>
<td width=38%>ByVal <i>variable</i> As Byte</td>
<td width=29%>An expression that evaluates to a Byte</td>
</tr>
<tr valign=top>
<td width=33%>COLORREF</td>
<td width=38%>ByVal <i>variable</i><b> </b>As Long</td>
<td width=29%>An expression that evaluates to a Long</td>
</tr>
<tr valign=top>
<td width=33%>DWORD</td>
<td width=38%>ByVal <i>variable</i><b> </b>As Long</td>
<td width=29%>An expression that evaluates to a Long</td>
</tr>
<tr valign=top>
<td width=33%>HWND, HDC, HMENU, etc. (Windows handles)</td>
<td width=38%>ByVal <i>variable</i><b> </b>As Long</td>
<td width=29%>An expression that evaluates to a Long</td>
</tr>
<tr valign=top>
<td width=33%>INT, UINT</td>
<td width=38%>ByVal <i>variable</i><b> </b>As Long</td>
<td width=29%>An expression that evaluates to a Long</td>
</tr>
<tr valign=top>
<td width=33%>LONG</td>
<td width=38%>ByVal <i>variable</i><b> </b>As Long</td>
<td width=29%>An expression that evaluates to a Long</td>
</tr>
<tr valign=top>
<td width=33%>LPARAM</td>
<td width=38%>ByVal <i>variable</i> As Long</td>
<td width=29%>An expression that evaluates to a Long</td>
</tr>
<tr valign=top>
<td width=33%>LPDWORD</td>
<td width=38%><i>variable</i> As Long</td>
<td width=29%>An expression that evaluates to a Long</td>
</tr>
<tr valign=top>
<td width=33%>LPINT, LPUINT</td>
<td width=38%><i>variable</i> As Long</td>
<td width=29%>An expression that evaluates to a Long</td>
</tr>
<tr valign=top>
<td width=33%>LPRECT</td>
<td width=38%><i>variable</i> As <i>type</i></td>
<td width=29%>Any variable of that user-defined type</td>
</tr>
<tr valign=top>
<td width=33%>LPSTR, LPCSTR</td>
<td width=38%>ByVal <i>variable</i> As String</td>
<td width=29%>An expression that evaluates to a String</td>
</tr>
<tr valign=top>
<td width=33%>LPVOID</td>
<td width=38%><i>variable</i> As Any</td>
<td width=29%>Any variable (use ByVal when passing a string)</td>
</tr>
<tr valign=top>
<td width=33%>LPWORD</td>
<td width=38%><i>variable</i> As Integer</td>
<td width=29%>An expression that evaluates to an Integer</td>
</tr>
<tr valign=top>
<td width=33%>LRESULT</td>
<td width=38%>ByVal <i>variable</i> As Long</td>
<td width=29%>An expression that evaluates to a Long</td>
</tr>
<tr valign=top>
<td width=33%>NULL</td>
<td width=38%>As Any or<b><br>
</b>ByVal <i>variable</i> As Long</td>
<td width=29%>ByVal Nothing or<b> </b>ByVal 0&amp;<b> </b>or<b> </b>vbNullString</td>
</tr>
<tr valign=top>
<td width=33%>SHORT</td>
<td width=38%>ByVal <i>variable</i> As Integer</td>
<td width=29%>An expression that evaluates to an Integer</td>
</tr>
<tr valign=top>
<td width=33%>VOID</td>
<td width=38%>Sub <i>procedure</i></td>
<td width=29%>Not applicable</td>
</tr>
<tr valign=top>
<td width=33%>WORD</td>
<td width=38%>ByVal <i>variable</i> As Integer</td>
<td width=29%>An expression that evaluates to an Integer</td>
</tr>
<tr valign=top>
<td width=33%>WPARAM</td>
<td width=38%>ByVal <i>variable</i> As Long</td>
<td width=29%>An expression that evaluates to a Long</td>
</tr>
</table><br>
</BODY>
</HTML>

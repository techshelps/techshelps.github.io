<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dynamically Creating Elements and Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondynamicallycreatingelementsevents"></a>Dynamically Creating Elements and Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDynamicallyCreatingElementsEventsC">
</object></p>
<p>
In addition to laying out your page elements in the page designer, you can create HTML elements and insert them on the page from code. You might do this if you want to create a page in response to a user's actions. For example, you might dynamically create a page and its contents in response to a query. You create and insert an HTML element by writing HTML in your code, using the DHTML object model's insertAdjacentHTML method.</p>
<h2>Example: Retrieving Customer Information</h2>
<p>
Suppose you are building an application in which a search button launches a database query that returns a customer's last name and order number. You want to create page elements on the fly to contain your query results.</p>
<p>
The first thing the code must do in this example is retrieve the user's search criteria from two text fields on the page. These fields have the IDs "custLN," for the last name for which the user wants to search,&nbsp; and "orderNO" for the order number. In this case, you could use two variables to retrieve the search criteria from these fields:</p>
<pre><code>Private Function cmdSearch_onclick() As Boolean
   Dim sLastName As String
   Dim sOrderNum As String
   Dim divCustInfo as HTMLDivElement
   'Retrieve the search criteria and store it in the variables
   SLastName = Me.custLN.Value
   SorderNum = Me.orderNO.Value
End Function
</code></pre>
<h2>Example: Creating Elements and Replacing Contents</h2>
<p>
After you retrieve the values from the query page, you will perform the query and send the results to the user by creating and populating a DIV tag on a results page. There are a series of steps you need to perform in this process:
<ol>
<li>
Retrieve the query results from a database.<br><br></li>
<li>
Check to make sure the DIV to contain the results does not already exist. If the query has previously been run, the DIV tag may already exist on the page. If the query has not been run before, you must create the DIV tag in your code.<br><br></li>
<li>
If necessary, create the DIV tag and other necessary elements.<br><br></li>
<li>
Insert your results set into the DIV tag on the results page.</li>
</ol>
<p>
The following code shows how you would check for the DIV tag as part of the function begun in the previous section.</p>
<pre><code>Private Function cmdSearch_onclick() As Boolean
   'Code here to Dim variables and retrieve search criteria

   'Check for a DIV tag called custinfo. 
   Set divCustInfo = Me.Document.All("custinfo")

   'Create three sets of HTML elements if the DIV tag is not 
   'found: a separator line, a DIV with text, and a programmable
   'DIV to contain the query results.
   If divCustInfo Is Nothing Then
      Me.Document.body.insertAdjacentHTML "BeforeEnd", _
        "&lt;DIV&gt;&lt;HR SIZE=2&gt;&lt;/DIV&gt;"
      Me.Document.body.insertAdjacentHTML "BeforeEnd", _
        "&lt;DIV CLASS=custhead&gt;Customer Information&lt;/DIV&gt;
      Me.Document.body.insertAdjacentHTML "BeforeEnd", _
        "&lt;DIV id=custinfo&gt;"
   
      'Run the query using a CustomerQuery function and insert the 
      'results in the custinfo DIV tag.
      If sLastName &lt;&gt; "" Then
         Me.Document.body.insertAdjacentHTML "BeforeEnd", _
           CustomerQuery(sLastName)
      EndIf

      'Create and insert the closing tag for the programmable DIV
      'element.
      Me.Document.body.insertAdjacentHTML "BeforeEnd", "&lt;/DIV&gt;"

   'If the DIV tag already exists, run the CustomerQuery function and
   'replace the element with the query results.
   Else
      DivCustInfo.innerHTML = CustomerQuery(sLastName)
   EndIf
End Function
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Random File Access</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingrandomfileaccess"></a>Using Random File Access</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingRandomFileAccessC">
</object></p>
<p>
The File System Object model does not provide random file creation or access methods. If you need to create or read random files, this information will help you do so.</p>
<p>
The bytes in random-access files form identical records, each containing one or more fields. A record with one field corresponds to any standard type, such as an integer or fixed-length string. A record with more than one field corresponds to a user-defined type. For example, the Worker Type defined below creates 19-byte records that consist of three fields:</p>
<pre><code>Type Worker
   LastName As String * 10
   Title&nbsp;&nbsp;&nbsp; As String * 7
   Rank&nbsp;&nbsp;&nbsp;&nbsp; As String * 2
End Type
</code></pre>
<h2>Declaring Variables</h2>
<p>
Before your application opens a file for random access, it should declare all variables required to handle data from the file. This includes user-defined types, which correspond to records in the file, as well as standard types for other variables that hold data related to processing a file opened for random access.</p>
<h3>Defining Record Types</h3>
<p>
Before opening a file for random access, define a type that corresponds to the records the file does or will contain. For example, an Employee Records file could declare a user-defined data type called <code>Person</code> as follows:</p>
<pre><code>Type Person
   ID               As Integer
   MonthlySalary      As Currency
   LastReviewDate      As Long
   FirstName         As String * 15
   LastName            As String * 15
   Title            As String * 15
   ReviewComments      As String * 150
End Type
</code></pre>
<h4>Declaring Field Variables in a Type Definition</h4>
<p>
Because all records in a random-access file must have the same length, it is often useful for string elements in a user-defined type to have a fixed length, as shown in the <code>Person</code> type declaration above, where, for instance, <code>FirstName</code> and <code>LastName</code> have a fixed length of 15 characters.</p>
<p>
If the actual string contains fewer characters than the fixed length of the string element to which it is written, Visual Basic fills the trailing spaces in the record with blanks (character code 32). Also, if the string is longer than the field size, it is truncated. If you use variable-length strings, the total size of any record stored with Put or retrieved with Get must not exceed the record length specified in the Open statement’s Len clause.</p>
<h3>Declaring Other Variables</h3>
<p>
After defining a type that corresponds to a typical record, declare any other variables that your application needs to process a file opened for random access. For example:</p>
<pre><code>' A record variable.
Public Employee As Person
' Tracks the current record.
Public Position As Long
' The number of the last record in the file.
Public LastRecord As Long
</code></pre>
<h2>Opening Files for Random Access</h2>
<p>
To open a file for random access, use the following syntax for the Open statement:</p>
<p>
<b>Open</b> <i>pathname</i> [<b>For Random</b>] <b>As</b> <i>filenumber</i> <b>Len</b> = <i>reclength</i></p>
<p>
Because Random is the default access type, the For Random keywords are optional.</p>
<p>
The expression Len = <i>reclength</i> specifies the size of each record in bytes. Note that every string variable in Visual Basic stores a Unicode string and that you must specify the byte length of that Unicode string. If <i>reclength</i> is less than the actual length of the record written to the file, an error is generated. If <i>reclength</i> is greater than the actual length of the record, the record is written, although some disk space may be wasted.</p>
<p>
You could use the following code to open a file:</p>
<pre><code>Dim FileNum As Integer, RecLength As Long, Employee As Person

' Calculate the length of each record.
RecLength = LenB(Employee)
' Get the next available file number.
FileNum = FreeFile
' Open the new file with the Open statement.
Open "MYFILE.FIL" For Random As FileNum Len = RecLength
</code></pre>
<h2>Editing Files Opened for Random Access</h2>
<p>
If you want to edit a random access file, first read records from the file into program variables, then change the values in the variables, and finally, write the variables back into the file. The following sections discuss how to edit files opened for random access.</p>
<h3>Reading Records into Variables</h3>
<p>
Use the Get statement to copy records into variables. For instance, to copy a record from the Employee Records file into the <code>Employee</code> variable, you could use the following code:</p>
<pre><code>Get FileNum, Position, Employee
</code></pre>
<p>
In this line of code, <code>FileNum</code> contains the number that the Open statement used to open the file; <code>Position</code> contains the record number of the record to copy; and <code>Employee</code>, declared as user-defined type <code>Person</code>, receives the contents of the record.</p>
<h3>Writing Variables to Records</h3>
<p>
Use the Put statement to add or replace records into files opened for random access.</p>
<h4>Replacing Records</h4>
<p>
To replace records, use a Put statement, specifying the position of the record you want to replace; for example:</p>
<pre><code>Put #FileNum, Position, Employee
</code></pre>
<p>
This code will replace the record number specified by <code>Position</code>, with the data in the <code>Employee</code> variable.</p>
<h4>Adding Records</h4>
<p>
To add new records to the end of a file opened for random access, use the Put statement shown in the preceding code fragment. Set the value of the <code>Position</code> variable equal to one more than the number of records in the file. For example, to add a record to a file that contains five records, set <code>Position</code> equal to 6.</p>
<p>
The following statement adds a record to the end of the file:</p>
<pre><code>LastRecord = LastRecord + 1
Put #FileNum, LastRecord, Employee
</code></pre>
<h4>Deleting Records</h4>
<p>
You could delete a record by clearing its fields, but the record would still exist in the file. Usually you don’t want empty records in your file, because they waste space and interfere with sequential operations. It is better to copy the remaining records to a new file, and then delete the old file.</p>
<p class=label>
<b>To remove a deleted record in a random-access file</b>
<ol>
<li>
Create a new file.<br><br></li>
<li>
Copy all the valid records from the original file into the new file.<br><br></li>
<li>
Close the original file and use the Kill statement to delete it.<br><br></li>
<li>
Use the Name statement to rename the new file with the name of the original file.</li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For additional information on random file access, see "Open Statement."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the DataGrid Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingdatagridcontrol"></a>Using the DataGrid Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingDataGridControlC">
</object></p>
<p>
The DataGrid control is a spreadsheet-like bound control that displays a series of rows and columns representing records and fields from a Recordset object. You can use the DataGrid to create an application that allows the end user to read and write to most databases. The DataGrid control can be quickly configured at design time with little or no code. When you set the DataGrid control's DataSource property at design time, the control is automatically filled and its column headers are automatically set from the data source's recordset. You can then edit the grid's columns; delete, rearrange, add column headers to, or adjust any column's width.</p>
<p>
At run time, the DataSource can be programmatically switched to view a different table, or you can modify the query of the current database to return a different set of records.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The DataGrid control is code-compatible with the DBGrid control that shipped in Visual Basic 5.0 with one exception: the DataGrid control doesn't support the DBGrid notion of "unbound mode." The DBGrid control is included with Visual Basic in the Tools directory.</p>
<h3>Possible Uses</h3>
<ul type=disc>
<li>
View and edit data on a remote or local database.<br><br></li>
<li>
Used in conjunction with another data-bound control, such as the DataList control, use the DataGrid control to display records from one table that are linked through a common field to another table displayed by the second data-bound control. </li>
</ul>
<h3>Using the Design-Time Features of the DataGrid Control</h3>
<p>
You can create a database application with the DataGrid control without writing a line of code by taking advantage of its design-time features. The following instructions outline the general steps needed to implement the DataGrid control in a typical use. For complete step-by-step instructions, see the topic "DataGrid Scenario 1: Create a Simple Database Application with the DataGrid Control."</p>
<p class=label>
<b>To implement a DataGrid control at design-time</b>
<ol>
<li>
Create a Microsoft Data Link (.UDL) file for the database you wish to access. See the topic "Creating the Northwind OLE DB Data Link" for an example.<br><br></li>
<li>
Place an ADO Data control<b> </b>on a form, and set the <b>ConnectionString </b>property to the OLE DB data source created in step 1.<br><br></li>
<li>
In the <b>RecordSource </b>field of the <b>Ado Data control</b>, type a SQL statement that returns a recordset. For example,<pre><code>Select * From MyTableName Where CustID = 12
</code></pre>
</li>
<li>
Place a <b>DataGrid </b>control on a form, and set the <b>DataSource </b>property to the <b>ADO Data control</b>.<br><br></li>
<li>
Right-click the <b>DataGrid </b>control and then click <b>Retrieve Fields</b>.<br><br></li>
<li>
Right-click the <b>DataGrid </b>control and then click <b>Edit</b>.<br><br></li>
<li>
Resize, delete, or add columns to the grid.<br><br></li>
<li>
Right-click the <b>DataGrid </b>control and then click <b>Properties</b>.<br><br></li>
<li>
Using the <b>Property Pages</b> dialog box, set the appropriate properties of the control to configure the grid as you wish it to appear and behave.</li>
</ol>
<h2>Changing Displayed Data at Run Time</h2>
<p>
Once you have created a grid using the design-time features, you may also wish to dynamically change the data source of the grid at run time. The general methods for accomplishing this are discussed below.</p>
<h3>Changing the RecordSource of the DataSource</h3>
<p>
The most common method of changing displayed data is to alter the query of the DataSource. For example, if the DataGrid control uses an ADO Data control as its DataSource, rewriting the RecordSource and refreshing the ADO Data control will change the data displayed.</p>
<pre><code>' The ADO Data control is connected to the Northwind database's
' Products table. The new query asks for all records which have
' the SupplierID = 12.
Dim strQuery As String
strQuery = "SELECT * FROM Suppliers WHERE SupplierID = 12"
Adodc1.RecordSource = strQuery
Adodc1.Refresh
</code></pre>
<h3>Changing the DataSource</h3>
<p>
At run-time you can reset the DataSource property to a different data source. For example, you may have several ADO Data controls, each connected to different databases, or set to different RecordSource properties. Simply reset the DataSource from one ADO Data control to another:</p>
<pre><code>' Reset the DataSource to an ADO Data control that is connected to
' the Pubs database, using the Authors table.
Set DataGrid1.DataSource = adoPubsAuthors
</code></pre>
<h3>Rebind the DataSource</h3>
<p>
When using the DataGrid control with a remote database such as SQLServer, it's possible that the structure of the table may become altered. For example, a field may be added to the table. In that case, you can invoke the Rebind method to recreate the grid from the new structure. Note that if you have altered the columns' layout of the grid at design-time, the DataGrid control will attempt to recreate the current layout, including any empty columns. You can, however, force the grid to reset all columns by first invoking the ClearFields method.</p>
<h2>Returning Values from the DataGrid</h2>
<p>
Once the DataGrid is connected to a database, you may want to monitor which cell the user has clicked. Use the RowColChange event — not the Click event — as shown below:</p>
<pre><code>Private Sub DataGrid1_RowColChange(LastRow As Variant, ByVal LastCol As Integer)
   ' Print the Text, row, and column of the cell the user clicked.
   Debug.Print DataGrid1.Text; DataGrid1.Row; DataGrid1.Col
End Sub
</code></pre>
<h3>Using the CellText and CellValue Methods</h3>
<p>
The CellText and CellValue properties are useful when a column has been formatted using the NumberFormat property. The NumberFormat property changes the format of any column that contains a number without changing the format of the actual data. For example, given a grid with a column named ProductID that contains integers, the code below will cause the DataGrid to display the values in the format "P-0000." In other words, although the actual value held in the ProductID field is "3," the value displayed by the grid will be "P-0003."</p>
<pre><code>Private Sub Form_Load()
   DataGrid1.Columns("ProductID").NumberFormat = "P-0000"
End Sub
</code></pre>
<p>
To return the actual value contained in the database, use the CellValue method, as shown below:</p>
<pre><code>Private Sub DataGrid1_RowColChange(LastRow As Variant, ByVal LastCol As Integer)
   Debug.Print _
   DataGrid1.Columns("ProductID").CellValue(DataGrid1.Bookmark)
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Both the CellValue used above, and the CellText value used below, require the bookmark property as an argument to function correctly.</p>
<p>
Conversely, if you want to return the formatted value of the field, use the CellText method:</p>
<pre><code>Private Sub DataGrid1_RowColChange(LastRow As Variant, ByVal LastCol As Integer)
   Debug.Print _
   DataGrid1.Columns("ProductID").CellText(DataGrid1.Bookmark)
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The CellText method above is equivalent to using the Text property of the DataGrid control.</p>
<h4>Where to Go From Here</h4>
<p>
To read a step-by-step procedure for building a simple application with the control, see "Creating a Simple Database Application with the DataGrid Control," or "Creating a DataGrid Linked to a DataList Control."</p>
<p>
To learn more about Split objects and how to program them, see "Manipulating DataGrid Views."</p>
</BODY>
</HTML>

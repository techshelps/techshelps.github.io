<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Limitations for Multithreaded Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondebugginglimitationsformultithreadedcomponents"></a>Debugging Limitations for Multithreaded Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDebuggingLimitationsForMultithreadedComponentsC">
</object></p>
<p>
The Visual Basic development environment only supports one thread of execution. To debug the multithreaded behavior of your component, you must run your test application against the compiled component.</p>
<h2>Out-of-Process Components</h2>
<p>
For out-of-process components, this means compiling both the component and the test program, and running multiple copies of the test program. (You can also run multiple copies of the test program using multiple instances of the development environment, but you cannot trace into the compiled component.)</p>
<h2>In-Process Components</h2>
<p>
To test the multithreaded behavior of apartment-model DLLs, split your test program into two parts — a standard executable from which you control the tests, and a multithreaded out-of-process component. The standard executable is a client of the out-of-process component, which in turn is the test client for the DLL.</p>
<p>
For example, the multithreaded out-of-process component might provide a TestMultiThreadDLL class. The standard executable might create varying numbers of TestMultiThreadDLL objects, passing each one a set of test parameters and then calling its BeginTest method.</p>
<p>
The BeginTest method should enable a code-only timer, as demonstrated in "Creating an ActiveX EXE Component," and then return immediately, in order to avoid tying up the single-threaded Standard EXE. The TestMultiThreadDLL object’s timer would control creation and testing of the objects provided by the in-process component. Each TestMultiThreadDLL object would exercise one thread (apartment) in the in-process component.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; To use this testing technique, you must compile both the multithreaded out-of-process component and the DLL.</p>
<h2>Using a Native Code Debugger</h2>
<p>
If you’re compiling your component to native code, and you have Microsoft Visual C++, you can compile your component with symbolic debug information for the Visual Studio debugger, which supports multithreaded debugging.</p>
<h2>Debug Messages</h2>
<p>
Because you can’t debug multithreaded behavior in the development environment, you can’t use Debug.Print and Debug.Assert to show debug message strings.</p>
<p>
You can’t use message boxes to show debug messages, either, because the Unattended Execution option completely suppresses user interaction.</p>
<p>
Approaches to sending debug messages include:
<ul type=disc>
<li>
Create a single-threaded ActiveX DLL (that is, one that’s <i>not</i> marked for unattended execution) with a public, creatable class that displays a modeless form with a list box. Give the class a DebugMsg method that takes a string argument and adds it to the top of the list box.<p class=tl>
You can call this single-threaded DLL from any thread in your multithreaded ActiveX EXE project. The calls will be slow, because of cross-thread marshaling (as described in "Designing Thread-Safe DLLs"), but this is not a big concern when you’re debugging.</P></li>
</ul>
<p class=indent>
<B><b>Tip</b></B> &nbsp; Include the ThreadID in your debug message text.
<ul type=disc>
<li>
Create a single-threaded out-of-process component that works in the fashion described above.<br><br></li>
<li>
Create a program that handles Windows messages, using the AddressOf operator to subclass a Visual Basic form. Use the Windows API to create and register private messages which the component you’re debugging can use to send debug strings.</li>
</ul>
<p>
<B><b>For More Information</b></B> &nbsp; Compiling to native code is discussed in "Compiling Your Project to Native Code," in "More About Programming," in the <i>Visual Basic Programmer’s Guide.</i>Subclassing windows with the AddressOf operator is discussed in <i>Accessing DLLs and the Windows API</i>, in the <i>Component Tools Guide</i>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Assigning an Object Reference to a Variable</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconassigninganobjectreferencetoavariable"></a>Assigning an Object Reference to a Variable</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vafctCreateObject;vafctGetObject;vastmDim;vastmSet;vbconAssigningAnObjectReferenceToAVariableC">
</object></p>
<p>
After you declare an object variable, you must assign an object reference to the variable before you can use the object's properties, methods, and events. You can assign a new object reference in several ways:
<ul type=disc>
<li>
If you declared the variable using the New keyword, Visual Basic will automatically assign a new object reference the first time you use the variable.<br><br></li>
<li>
You can assign a reference to a new object in a Set statement by using the New keyword or CreateObject function.<br><br></li>
<li>
You can assign a reference to a new or existing object in a Set statement by using the GetObject function.</li>
</ul>
<h2>Assigning an Object Reference Using the New Keyword</h2>
<p>
If the ActiveX component supplies a type library, you can use the New keyword in a variable declaration or Set statement to create a new object and assign an object reference to an object variable.</p>
<p>
If you declare an object variable with the New keyword, Visual Basic will automatically create a new object the first time you use the variable. For more information, see "Declaring an Object Variable."</p>
<p>
You can also use the New keyword in a Set statement to assign a reference to a new object of the specified class. For example, the following statements assign a reference to a new DAO table object to the variable tdfOrders, setting the table's Name property to "Orders":</p>
<pre><code>Dim tdfOrders As DAO.TableDef
Set tdfOrders = New DAO.TableDef
tdfOrders.Name = "Orders"
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Dim Statement" or "Set Statement."</p>
<h2>Assigning an Object Reference Using CreateObject</h2>
<p>
Regardless of whether or not an ActiveX component supplies a type library, you can use the CreateObject function in a Set statement to create a new object and assign an object reference to an object variable. You must specify the object's programmatic identifier as an argument to the function, and the object you want to access must be externally creatable.</p>
<p class=label>
<b>To assign an object reference using CreateObject</b>
<ul type=disc>
<li>
Use the following syntax for CreateObject.<p class=tl>
<b>Set</b> <i>objectvariable</i> <b>=</b> <b>CreateObject(</b>"<i>progID</i>", <i>["servername"]</i><b>)</b></P></li>
</ul>
<p>
The <i>progID</i> argument is usually the fully qualified class name of the object being created; for example, Word.Document. However, progID can be different from the class name. For example, the progID for a Microsoft Excel object is "Sheet" rather than "Worksheet." The optional <i>servername</i> argument can be specified to create an object on a remote machine across a network. It takes the Machine Name portion of a share name. For example, with a network share named \\MyServer\Public, the <i>servername</i> argument would be "MyServer."</p>
<p>
The following code example starts Microsoft Excel (if Microsoft Excel is not already running) and establishes the variable <code>xlApp</code> to refer to an object of the Application class. The argument "<code>Excel.Application</code>" fully qualifies Application as a class defined by Microsoft Excel:</p>
<pre><code>Dim xlApp As Excel.Application
Set xlApp = CreateObject("Excel.Application")
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "CreateObject Function."</p>
<h2>Assigning an Object Reference Using GetObject</h2>
<p>
The GetObject function is most often used to assign a reference to an existing object, although you can also use it to assign a reference to a new object.</p>
<p>
To assign a reference to an existing object, use the following syntax.</p>
<p>
<b>Set</b> <i>objectvariable</i> <b>=</b> <b>GetObject([</b><i>pathname</i><b>]</b> <b>[,</b> <i>progID</i><b>])</b></p>
<p>
The <i>pathname</i> argument can be the path to an existing file, an empty string, or omitted entirely. If it is omitted, then <i>progID</i> is required. Specifying the path to an existing file causes GetObject to create an object using the information stored in the file. Using an empty string for the first argument causes GetObject to act like CreateObject — it will create a new object of the class whose programmatic identifier is progID. The following table describes the results of using GetObject.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>If the ActiveX component is running</b></td>
<td class=label width=50%><b>Result</b></td>
</tr>
<tr valign=top>
<td width=50%><pre><code>Set X = GetObject(, "MySrvr.Application")</code></pre>
</td>
<td width=50%>X references an existing Application object.</td>
</tr>
<tr valign=top>
<td width=50%><code>Set X = GetObject("", "MySrvr.Object")</code></td>
<td width=50%>X references a new, externally creatable object.</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>If the ActiveX component is not running</b></td>
<td class=label width=50%><b>Result</b></td>
</tr>
<tr valign=top>
<td width=50%><code>Set X = GetObject(, "MySrvr.Object")</code></td>
<td width=50%>An error is returned.</td>
</tr>
<tr valign=top>
<td width=50%><code>Set X = GetObject("", "MySrvr.Object")</code></td>
<td width=50%>The ActiveX component (MySrvr) is started, and X references a new object.</td>
</tr>
</table><br>
<p>
For example, the variable <code>wrdApp</code> refers to a running Microsoft Word Application:</p>
<pre><code>Dim wdApp As Word.Application
Set wdApp = GetObject("", "Word.Application")
</code></pre>
<p>
Just as with CreateObject, the argument <code>"Word.Application"</code> is the programmatic identifier for the Application class defined by Microsoft Word. If multiple instances of Microsoft Word are running, you cannot predict to which instance <code>wdApp</code> will refer.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;You can also use GetObject to assign a reference to an object in a compound document file. A <i>compound document file</i> contains references to multiple types of objects. For example, a compound document file could contain a spreadsheet, text, and bitmaps.</p>
<p>
The following example starts the spreadsheet application, if it is not already running, and opens the file Revenue.xls:</p>
<pre><code>Dim xlBook As Excel.Workbook
Set xlBook = GetObject("C:\Accounts\Revenue.xls")
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "GetObject Function."</p>
</BODY>
</HTML>

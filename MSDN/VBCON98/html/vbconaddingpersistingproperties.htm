<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Saving the ShapeLabel Control's Property Values</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingpersistingproperties"></a>Saving the ShapeLabel Control's Property Values</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingPersistingPropertiesC">
</object></p>
<p>
You can add properties and methods to an ActiveX control in the same way you add them to class modules: by creating Public procedures. Since ShapeLabel is going to be an enhanced label control, it makes sense for it to have a Caption property.</p>
<p>
The following procedure adds a Caption property, and the support code to save and retrieve the property value. A control’s property values are saved along with the other data that describes the container — in this case, Form1.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX control. IIt begins with the topic <a href="vbconcreatingactivexcontrol.htm">Creating an ActiveX Control</a>.</p>
<p class=label>
<b>To add a Caption property to the ShapeLabel control</b>
<ol>
<li>
In the <b>Project Explorer</b> window, double-click <b>ShapeLabel</b> to open its designer, then double-click on <b>ShapeLabel</b> to bring its code window to the front.<br><br></li>
<li>
On the <b>Tools</b> menu, click <b>Add Procedure</b> to open the <b>Add Procedure</b> dialog box. In the <b>Name</b> box, enter the name <b>Caption</b>. Click <b>Property</b> and <b>Public</b>, then click <b>OK</b>.<br><br></li>
<li>
In the Code window, change the newly created property procedures to appear as follows:<pre><code>Public Property Get Caption() As String
 &nbsp; Caption = lblCaption.Caption
End Property

Public Property Let Caption( _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByVal NewCaption As String)
 &nbsp; lblCaption.Caption = NewCaption
 &nbsp; PropertyChanged "Caption"
End Property
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Be careful to change both property declaration lines by adding <b>As String</b>, as shown above. Property Get and Property Let declarations must match. Using specific type names speeds up execution, and provides type checking for the developer who uses your control.</p><p class=tl>
The Property Let procedure is executed whenever a new value is assigned to the Caption property. It stores the new value directly in the Caption property of the lblCaption label on ShapeLabel.</P><p class=tl>
The Property Get procedure is executed whenever the property value is retrieved. It reads the value stored in the Caption property of the lblCaption label.</P><p class=tl>
Property Let procedures in controls must call PropertyChanged, as explained in "Adding Properties to Controls" in "Building ActiveX Controls." This tells the <b>Properties</b> window to refresh its display, and informs Visual Basic that the form has changed.</P><p class=tl>
Property procedures are discussed in "Adding Properties to a Class," in "Programming with Objects" in the <i>Visual Basic Programmer’s Guide.</i></P></li>
<li>
To initialize the Caption property, add the following code to the UserControl_InitProperties event procedure:<pre><code>Private Sub UserControl_InitProperties()
 &nbsp; ' Let the starting value for the Caption
 &nbsp; '&nbsp;&nbsp; property be the Name given to this
 &nbsp; '&nbsp;&nbsp; instance of ShapeLabel.
 &nbsp; Caption = Extender.Name
 &nbsp; Debug.Print "InitProperties"
End Sub
</code></pre>
<p class=tl>
What is this Extender object? To the user of a control, <i>extender properties </i>— such as Name, Top, and Left — appear to be part of your control. However, extender properties are really provided by the container your control is placed on. The Extender object of the UserControl gives you, the control designer, access to these properties from within your control.</P><p>
<img src="avtcm030.gif" border=0></P><p class=tl>
The read-only Name property of the Extender object returns the name the container (or the user) gives to a specific instance of your control. Using this name (for example, ShapeLabel1) as the initial value of the Caption property mimics the behavior of the Label control.</P></li>
</ol>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If your control imitates the behavior of controls that provide similar functionality, using it will be more intuitive.</p>
<p class=tl>
What would happen if you created a Name property for your control? You would be able to access it from within your control, but the only Name property your user would see would be the Name property of the Extender object.</P><p class=tl>
This introduces a recurrent theme for controls: The container determines a large portion of your control’s behavior and appearance. It’s the container that determines your control’s Name, and your Top and Left properties are maintained relative to the container’s coordinates. This theme will be taken up again in "Building ActiveX Controls."</P><p class=tl>
One last item of business: Why put this code in the InitProperties event? Why not use the Initialize event? As you have seen, Initialize is called every time the control instance is created, which happens often. InitProperties happens only when the user places the control on the container. This makes it the appropriate place to set initial values for a control instance.</P><p class=tl>
In addition, the UserControl object’s Extender and AmbientProperties objects are not yet available when the Initialize event occurs. "Understanding Control Lifetime and Key Events," in "Building ActiveX Controls," discusses appropriate uses of the Initialize event.</P><ol start=5>
<li>
To save the value of your Caption property, add the following code to the UserControl_WriteProperties event procedure:<pre><code>Private Sub UserControl_WriteProperties(PropBag As _
 &nbsp;&nbsp;&nbsp;&nbsp; PropertyBag)
 &nbsp; Debug.Print "WriteProperties"
 &nbsp; PropBag.WriteProperty "Caption", Caption, _
 &nbsp;&nbsp;&nbsp;&nbsp; Extender.Name
End Sub
</code></pre>
<p class=tl>
The PropertyBag is just what its name implies, a "bag" in which property values are saved. The bag is provided by the container. You can’t see into it, and you have no idea where or how the data is saved. All you can do is put values in and take them out.</P><p class=tl>
The first argument of the WriteProperty method is the name of the property, which will be used as the retrieval key. You should use the name of the property for this argument, because it will appear in the .frm text file (in Visual Basic—other containers may use other file names to save project data), and may be seen by the user of the control.</P><p class=tl>
The second argument is the value. A property value is saved as a Variant.</P><p class=tl>
The third argument, oddly enough, is a default value. Why provide a default when saving the property value? Before saving the value, the WriteProperty method compares the property value with this default. If they are the same, the property value doesn’t have to be saved, because default values will be set automatically when the control is reloaded. This keeps the .frm file from being cluttered with hundreds of default entries, a great favor to your users!</P></li>
<li>
Place the following code in the ReadProperties event, to retrieve the persisted property value for the Caption property:<pre><code>Private Sub UserControl_ReadProperties(PropBag As _
 &nbsp;&nbsp;&nbsp;&nbsp; PropertyBag)
 &nbsp; Debug.Print "ReadProperties"
 &nbsp; Caption = PropBag.ReadProperty("Caption", _
 &nbsp;&nbsp;&nbsp;&nbsp; Extender.Name)
End Sub
</code></pre>
<p class=tl>
The second argument of the ReadProperty method is a default value to be used if no value has been saved, if the user has deleted the property from the text file, or if the value has never been changed from the default, and therefore never saved by WriteProperty.</P></li>
<li>
Be sure the <b>ShapeLabel</b> designer is in front, then click the <b>Close</b> button or press CTRL+F4 to close the window, putting the control into run mode. Like magic, the captions of the ShapeLabel controls change to match the default names of the two instances, ShapeLabel1 and ShapeLabel2.<p class=tl>
Use the <b>Properties</b> window to change the Caption properties of the two ShapeLabel controls on Form1, then click the <b>Close</b> button on the Form1 designer. In the <b>Project Explorer</b> window, double-click <b>Form1</b> to re-open the Form1 designer.</P><p class=tl>
From the messages in the <b>Immediate</b> window, you can see that the controls have been destroyed and re-created, but the values of the Caption properties have been saved and retrieved.</P></li>
<li>
Press CTRL+F5 to run TestCtlDemo, the Startup project of the project group, and observe the run-time behavior of the ShapeLabel control.<br><br></li>
<li>
Click the <b>Close</b> button on Form1 to return to design mode.</li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Details of saving and retrieving property values can be found in "Adding Properties to Controls," in "Building ActiveX Controls." "Exposing Properties of Constituent Controls," in the same chapter, explains how the ActiveX Control Interface Wizard simplifies the creation of code to save and retrieve property values.</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX control.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>To</b></td>
<td class=label width=63%><b>See</b></td>
</tr>
<tr valign=top>
<td width=37%>Go to the next step</td>
<td width=63%><a href="vbconaddingpropertypagestoproject.htm">Giving the ShapeLabel Control a Property Page</a></td>
</tr>
<tr valign=top>
<td width=37%>Start from the beginning</td>
<td width=63%><a href="vbconcreatingactivexcontrol.htm">Creating an ActiveX Control</a></td>
</tr>
</table><br>
</BODY>
</HTML>

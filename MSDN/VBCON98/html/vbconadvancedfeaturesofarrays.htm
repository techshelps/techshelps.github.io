<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Advanced Features of Arrays</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconadvancedfeaturesofarrays"></a>Advanced Features of Arrays</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAdvancedFeaturesOfArraysC">
</object></p>
<p>
Although arrays are most commonly used to store groups of variables, there are several other ways in which arrays are useful. You can assign the contents of one array to another, create functions that return arrays, and create properties that return arrays. In many cases these techniques can improve the performance of your application.</p>
<h2>Assigning Arrays</h2>
<p>
Just as you can assign the contents of one variable to another, for example <code>strA = strB</code>, you can also assign the contents of one array to another. Imagine, for instance, that you wanted to copy an array of bytes from one location to another. You could do it by copying one byte at a time, like this:</p>
<pre><code>Sub ByteCopy(oldCopy() As Byte, newCopy() As Byte)
   Dim i As Integer
   ReDim newCopy (Lbound(oldCopy) To UBound(oldCopy)

   For i – Lbound(oldCopy) To Ubound(oldCopy)
      newCopy(i) = oldCopy(i) 
   Next
End Sub
</code></pre>
<p>
A much more efficient way to do this is to assign one array to another:</p>
<pre><code>Sub ByteCopy(oldCopy() As Byte, newCopy() As Byte)
   newCopy = oldCopy
End Sub
</code></pre>
<p>
With variable assignment there are certain rules that you need to keep in mind. For example, although you can assign a variable declared as Integer to a variable declared as Long without any problem, assigning a Long to an Integer could easily lead to an overflow error. In addition to data typing rules, array assignments have additional rules involving the number of dimensions, the size of those dimensions, and whether an array is fixed or dynamic.</p>
<p>
Attempting to assign arrays with different dimensions and/or data types may or may not succeed, depending on several factors:
<ul type=disc>
<li>
The type of array used on the left-hand side of the assignment: a fixed array (<code>Dim x(1 to 10) As Integer</code>) or a dynamic array (<code>Dim x() As Integer</code>).<br><br></li>
<li>
Whether or not the number of dimensions on the left-hand side match the number of dimensions of the array on the right-hand side of the assignment.<br><br></li>
<li>
Whether or not the number of elements for each dimension on each side of the assignment match. The dimensions may match even if the declarations are different, such as when one array is zero-based and another is one-based, as long as they have the same number of elements.<br><br></li>
<li>
The data types of all elements for each side of the assignment must be compatible. The rules are the same as for variable assignments.</li>
</ul>
<p>
The following table shows the effects of these factors:</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Left-hand Side</b></td>
<td class=label width=25%><b>Number of Dimensions Match?</b></td>
<td class=label width=25%><b>Number of Elements Match?</b></td>
<td class=label width=25%><b>Result of Assignment</b></td>
</tr>
<tr valign=top>
<td width=25%>Dynamic</td>
<td width=25%>No</td>
<td width=25%>Yes or No</td>
<td width=25%>Succeeds. Left-hand side ReDim’s to match right-hand side if necessary.</td>
</tr>
<tr valign=top>
<td width=25%>Dynamic</td>
<td width=25%>Yes</td>
<td width=25%>No</td>
<td width=25%>Succeeds. Left-hand side ReDim’s to match right-hand side if necessary.</td>
</tr>
<tr valign=top>
<td width=25%>Dynamic</td>
<td width=25%>Yes</td>
<td width=25%>Yes</td>
<td width=25%>Succeeds.</td>
</tr>
<tr valign=top>
<td width=25%>Fixed</td>
<td width=25%>Yes or No</td>
<td width=25%>Yes or No</td>
<td width=25%>Fails with a compilation error.</td>
</tr>
</table><br>
<p>
Errors can occur both at compile time and at run time (for example, if data types can’t be coerced or if an assignment attempts to ReDim a fixed size array.) As the programmer, it’s up to you to add error handling to make sure that the arrays are compatible before attempting an assignment.</p>
<h2>Returning an Array from a Function</h2>
<p>
It’s possible for a function to return an array of values. For example, you might want to return an array of bytes from a function without having to perform conversions to and from a string.</p>
<p>
Here’s a simple example of a function that returns an array of bytes:</p>
<pre><code>Private Sub Form_Load()
   Dim b As Byte
   Dim I As Integer
   Dim ReturnArray() As Byte

   i&nbsp; = Cbyte(54)
   ReturnArray() = ArrayFunction(b)
   For i = 0 To Ubound(ReturnArray)
      Debug.Print ReturnArray(i)
   Next
End Sub

Public Function ArrayFunction(b As Byte) As Byte()
   Dim x(2) As Byte

   x(0) = b
   x(1) = b + CByte(200)
   x(2) = b + b
   

   ArrayFunction = x   
End Function
</code></pre>
<p>
After running the above example, ReturnArray() would be a three-element array containing the values assigned to the array in the ArrayFunction. Note that the array must be of the same data type as the function (in this case, Byte). Because this is a function call, you can pass the array without the parentheses.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Although it’s possible to return the array by assigning another array (<code>ArrayFunction = x()</code>), this isn’t recommended for performance reasons.</p>
<p>
You must specify a type for a function that returns an array; that type may be a Variant. Thus <code>Function X() As Variant()</code> would work whereas <code>Function X() As ()</code> would fail.</p>
<p>
When calling a function that returns an array, the variable to hold the return values must be an array and must be of the same data type as the function, otherwise it will display a "Type Mismatch" error.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To learn more about using arrays, see "Arrays" in "Programming Fundamentals." For information about returning arrays from properties, see "Putting Property Procedures to Work for You" in "Programming with Objects."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Webclass Life Cyle</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconthewebclasslifecyle"></a>The Webclass Life Cycle</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheWebclassLifeCyle_C">
</object></p>
<p>
Like a form-based application, a webclass is initialized and destroyed, although these events are fired differently than they are for a form. In addition, a webclass has several other events that mark stages in its life, indicating when the browser displays the first webitem and when requests are received and processed.</p>
<p>
These are the key events in the life of a webclass:
<ol>
<li>
The Initialize event occurs when an end user accesses the .asp (Active Server Pages) file that acts as the host for your IIS application. In the Initialize event, the webclass is created as an object. This is always the first event in the webclass's lifetime.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If the StateManagement property for the webclass is set to wcNoState, the webclass fires the Initialize event each time it receives an <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefhttp">
</object><a href=JavaScript:alink_2.Click()>HTTP</a> request. See "State Management in IIS Applications" for more information about setting the StateManagement property.</p></li>
<li>
The BeginRequest event is the next event called after the Initialize event when the user starts the application, and is also fired each time the webclass receives a subsequent request from the browser. This event marks the beginning of processing for an HTTP request. You might use this event to perform processing required for every request the webclass will perform. For example, you could use BeginRequest to retrieve state information from a database or to verify user information before processing a request.<br><br></li>
<li>
The Start event generally occurs the first time BeginRequest is fired in the application. It is not fired on subsequent requests. This event is generally used to send an initial response to the browser, launching the Respond event for the specified webitem.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If the end user specifies a webitem and event in the initial URL they use to launch the application, the webclass does not fire the Start event. In this case, the specified event would be the first event fired. See "Setting the Start Event" for more information.</p></li>
<li>
The EndRequest event occurs when the webclass has finished processing an HTTP request and has returned a response to the client. The processing of an event might require the webclass to process several templates or webitems and their associated event procedures before a response is returned to the client.<br><br></li>
<li>
The Terminate event tells the run-time DLL to destroy the instance of the webclass.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;If the StateManagement property for the webclass is set to wcNoState, the webclass fires the Terminate event each time it sends a response to the browser. If the StateManagement property for the webclass is set to wcRetainInstance, the webclass fires the Terminate event only after it calls the ReleaseInstance method. See "State Management in IIS Applications" for more information about setting the StateManagement property.</p></li>
</ol>
<p>
There are no Load and Unload events for an IIS application. Instead, the BeginRequest or EndRequest events can perform some of the same functions as the Load and Unload event did — these events can be used to initialize values your application needs to run, and clean up state and other values at the end of a request. Begin and EndRequest are unique events for a webclass. A webclass may receive multiple requests throughout its life. These events allow the webclass to process each request as a unique entity.</p>
</BODY>
</HTML>

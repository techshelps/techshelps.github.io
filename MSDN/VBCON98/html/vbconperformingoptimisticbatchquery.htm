<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Performing an Optimistic Batch Query</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconperformingoptimisticbatchquery"></a>Running an Optimistic Batch Query</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPerformingOptimisticBatchQuery_C">
</object></p>
<h2>RDO</h2>
<p>
The following code demonstrates a query that can be used to drive a subsequent "optimistic batch update" operation. In this case, you fetch a resultset using the ClientBatch cursor library and save the bookmarks for each row fetched. When the user chooses a row in the grid (where the rows are displayed), the code prompts the user for a new value and writes it to the resultset. The changes are not made to the data, however, until you perform the BatchUpdate method.</p>
<pre><code>Private Sub BatchOpsButton_Click()
 &nbsp; Dim rs As rdoResultset
 &nbsp; sql = "Select * from Authors where year_born is null"
 &nbsp; rdoEnvironment.CursorDriver = rdUseClientBatch
 &nbsp; cnB.QueryTimeout = 45
 &nbsp; Set rs = cnB.OpenResultset(sql, rdOpenStatic, rdConcurBatch)
 &nbsp; rs.MoveLast: rs.MoveFirst
 &nbsp; ReDim bms(rs.RowCount + 1) As Variant
 &nbsp; Do Until rs.EOF
 &nbsp;&nbsp;&nbsp;&nbsp; bms(i) = rs.Bookmark
 &nbsp;&nbsp;&nbsp;&nbsp; i = i + 1
 &nbsp;&nbsp;&nbsp;&nbsp; rs.MoveNext
 &nbsp; Loop
 &nbsp; rs.MoveFirst
 &nbsp; rdoGrid1.ShowData rs
End Sub
</code></pre>
<h3>Performing an Update Operation Based on User Input</h3>
<p>
The following code demonstrates how to gather user input (in this case, author age), and then use this information to update the database in a batch update operation:</p>
<pre><code>Private Sub rdoGrid1_Click()
 &nbsp; Dim rs As rdoResultset
 &nbsp; Dim NewValue As Integer
 &nbsp; NewValue = InputBox("Enter new age -- 1900 to 1997", "Author Age", _
 &nbsp;&nbsp; "1960")
 &nbsp; rs.Bookmark = bms(rdoGrid1.Row)
 &nbsp; rs.Edit
 &nbsp; rs!Year_Born = NewValue
 &nbsp; rs.Update
 &nbsp; Changes = Changes + 1
 &nbsp; i = MsgBox("Commit all " &amp; Changes &amp; " changes?", vbYesNoCancel)
 &nbsp; Select Case i
 &nbsp;&nbsp;&nbsp;&nbsp; Case vbYes
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.BatchUpdate
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Changes = 0
 &nbsp;&nbsp;&nbsp;&nbsp; Case vbNo
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp;&nbsp;&nbsp; Case vbCancel
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Changes = 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = MsgBox("Cancel just this change (Yes) or all " &amp; Changes &amp; _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; " made so far (No)?", vbYesNo)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If i = vbYes Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.CancelBatch (True)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.CancelBatch
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; End Select
End Sub
</code></pre>
<h2>ADO</h2>
<p>
In this batch operation, note that the routine used to change the chosen row in the R/W resultset doesn't require starting an "Edit" session. To achieve the same effect as the previous RDO example, simply change the contents of a field and use the Update method to make the changes to the database.</p>
<pre><code>Private Sub BatchOpsButton_Click()
 &nbsp; sql = "Select * from Authors where year_born is null"
 &nbsp; rs.Open sql, cnB, adOpenStatic, adLockBatchOptimistic
 &nbsp; rs.MoveLast: rs.MoveFirst
 &nbsp; ReDim bms(rs.RecordCount + 1) As Variant
 &nbsp; Do Until rs.EOF
 &nbsp;&nbsp;&nbsp;&nbsp; bms(i) = rs.Bookmark
 &nbsp;&nbsp;&nbsp;&nbsp; i = i + 1
 &nbsp;&nbsp;&nbsp;&nbsp; rs.MoveNext
 &nbsp; Loop
 &nbsp; rs.MoveFirst
 &nbsp; ADOGrid1.ShowData rs
 &nbsp; rs.Close
End Sub

Private Sub ADOGrid1_Click()
 &nbsp; Dim NewValue As Integer
 &nbsp; NewValue = InputBox("Enter new age -- 1900 to 1997", "Author Age", _
 &nbsp;&nbsp; "1960")
 &nbsp; rs.Bookmark = bms(ADOGrid1.Row)
 &nbsp; rs!Year_Born = NewValue
 &nbsp; rs.Update
 &nbsp; Changes = Changes + 1
 &nbsp; i = MsgBox("Commit all " &amp; Changes &amp; " changes?", vbYesNoCancel)
 &nbsp; Select Case i
 &nbsp;&nbsp;&nbsp;&nbsp; Case vbYes
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.UpdateBatch
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Changes = 0
 &nbsp;&nbsp;&nbsp;&nbsp; Case vbNo
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp;&nbsp;&nbsp; Case vbCancel
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Changes = 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = MsgBox("Cancel just this change (Yes) or all " &amp; Changes &amp; _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; " made so far (No)?", vbYesNo)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If i = vbYes Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.CancelBatch (True)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.CancelBatch
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; End Select
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In ADO2, you can use a batch filter to see rows that conflicted with an update rather than iterating through an array of conflicted rows, as was required in RDO2.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lightweight Graphical Controls</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlightweightcontrols"></a>Lightweight Graphical Controls</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconLightweightControlsC">
</object></p>
<p>
The image, shape and line controls are considered to be lightweight controls; that is, they support only a subset of the properties, methods, and events found in the picture box. Because of this, they typically require less system resources and load faster than the picture box control.</p>
<h2>Using Image Controls Instead of Picture Boxes</h2>
<p>
The image control is similar to the picture box control but is used only for displaying pictures. It doesn't have the ability to act as a container for other controls, and it doesn't support the advanced methods of the picture box.</p>
<p>
Pictures are loaded into the image control just as they are in the picture box: at design time, set the Picture property to a file name and path; at run time, use the LoadPicture function.</p>
<p>
The sizing behavior of the image control differs from that of the picture box. It has a Stretch property while the picture box has an AutoSize property. Setting the AutoSize property to True causes a picture box to resize to the dimensions of the picture; setting it to False causes the picture to be cropped (only a portion of the picture is visible). When set to False (the default), the Stretch property of the image control causes it to resize to the dimensions of the picture. Setting the Stretch property to True causes the picture to resize to the size of the image control, which may cause the picture to appear distorted.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For additional information on the image control, see "Using Visual Basic's Standard Controls."</p>
<h2>Using an Image Control to Create Your Own Buttons</h2>
<p>
An image control also recognizes the Click event, so you can use this control anywhere you'd use a command button. This is a convenient way to create a button with a picture instead of a caption. Grouping several image controls together horizontally across the top of the screen — usually within a picture box — allows you to create a toolbar in your application.</p>
<p>
For instance, the Test Buttons example shows an image control that users can choose like they choose a command button. When the form is first displayed, the control displays one of three traffic icons from the Icon Library included with Visual Basic. Each time the image control is clicked, a different icon is displayed. (For a working version of this example, see Button.frm in the Controls.vbp sample application.)</p>
<p>
If you inspect the form at design time, you will see that it actually contains all three icons "stacked" on top of each other. By changing the Visible property of the top image control to False, you allow the next image (with its Visible property set to True) to appear on top.</p>
<p>
Figure 3.17 shows the image control with one of the traffic icons (Trffc10a.ico).</p>
<p class=label>
<b>Figure 3.17&nbsp;&nbsp;&nbsp;Image control with a traffic icon</b></p>
<p>
<img src="avp03017.gif" border=0></p>
<p>
To create a border around the image control, set the BorderStyle property to 1-Fixed Single.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Unlike command buttons, image controls do not appear pushed in when clicked. This means that unless you change the bitmap in the MouseDown event, there is no visual cue to the user that the "button" is being pushed.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information on displaying a graphic image in an image control, see "Using Visual Basic's Standard Controls."</p>
<h2>Using Shape and Line Controls</h2>
<p>
Shape and line controls are useful for drawing graphical elements on the surface of a form. These controls don't support any events; they are strictly for decorative purposes.</p>
<p>
Several properties are provided to control the appearance of the shape control. By setting the Shape property, it can be displayed as a rectangle, square, oval, circle, rounded rectangle, or rounded square. The BorderColor and FillColor properties can be set to change the color; the BorderStyle, BorderWidth, FillStyle, and DrawMode properties control how the shape is drawn.</p>
<p>
The line control is similar to the shape control but can only be used to draw straight lines.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For additional information on the shape and line controls, see "Using Visual Basic's Standard Controls."</p>
</BODY>
</HTML>

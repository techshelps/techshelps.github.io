<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Asynchronous Call-Backs and Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconasynchronouscallbackseventsinking"></a>Asynchronous Call-Backs and Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAsynchronousCallBacksEventSinkingC">
</object></p>
<p>
When a client makes a method call, it’s blocked until the call returns. That is, the client can’t execute any code while it’s waiting. This is known as <i>synchronous processing</i>. By using <i>asynchronous processing</i>, you can free the client to do other things while it’s waiting.</p>
<p>
In asynchronous processing, the method call that starts a task returns instantly, without supplying a result. The client goes about its business, while the component works on the task. When the task is complete, the component notifies the client that the result is ready.</p>
<p>
Asynchronous processing is also useful when clients need to be notified of interesting occurrences — for example, changes in database values, or the arrival of messages. A client tells a component it wants to be notified when certain things happen, and the component sends notifications when those things occur.</p>
<p>
Both of these scenarios depend on <i>asynchronous notifications</i>. The client application is minding its own business, when out of the blue comes a notification that an asynchronous request is complete, or that something of interest has occurred.</p>
<p>
Visual Basic provides two mechanisms — events and call-back methods — for implementing asynchronous notifications, as discussed in the following topics.
<ul type=disc>
<li>
<a href="vbconasynchronouscallbacksusingeventsinking.htm">Asynchronous Notifications Using Events</a> &nbsp; The simplest notification technique is for the component to raise an event. The client handles the event, and takes some action in response.<br><br></li>
<li>
<a href="vbconasynchronouscallbacksusingmethodcalls.htm">Asynchronous Notifications Using Call-Back Methods</a> &nbsp; The client implements an interface containing a call-back method, which the component calls when notifications are required.<br><br></li>
<li>
<a href="vbconwhentouseeventsorcallbacksfornotifications.htm">When to Use Events or Call-Backs for Notifications</a> &nbsp; Explains how the decision to use events or call-backs affects the character of your notifications, and provides criteria for deciding which to use.</li>
</ul>
<p>
<B><b>For More Information</b></B> &nbsp; "Creating an ActiveX EXE Component" contains step-by-step procedures for implementing asynchronous notifications using both events and call-back methods.</p>
</BODY>
</HTML>

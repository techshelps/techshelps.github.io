<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an Add-In</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingaddin"></a>Creating a Basic Add-In</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingAddInC">
</object></p>
<p>
Building an add-in consists mainly of creating a class module that handles events specific to add-ins and any events you want to specify, along with your support modules and forms. Unless you need to have multiple instances of an add-in running in the same IDE, all class procedures should be declared Private to prevent other routines from inadvertently referencing them.</p>
<p>
Once the add-in code is complete, you must compile it as an ActiveX .dll or .exe file, since add-ins must be ActiveX components. For various reasons, it's generally best to create add-ins as ActiveX .dll files.</p>
<p>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;For a brief comparison of add-ins as .exe and .dll files, see "Compiling Add-Ins" in "How to Build an Add-In."&nbsp; get your feet wet, start by building a very simple add-in that demonstrates an essential component of an add-in&nbsp;— its Class module. How this example works will be explained afterward.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The procedure below leads you manually through creation of an add-in. Alternatively, you can simply create an Add-In project, and all of the basic add-in infrastructure is created for you.</p>
<p class=label>
<b>To create the AddInProject add-in</b>
<ol>
<li>
On the <b>File</b> menu, click <b>New Project</b> to open the <b>New Project</b> dialog box. (This will close your current project or project group; you will be prompted to save any changes you have made.) Double-click the <b>ActiveX DLL</b> icon to create a new project.<br><br></li>
<li>
Click the <b>Project</b> menu, then click <b>References</b>. Select the <b>Microsoft Visual Basic Extensibility</b> and <b>Microsoft Office 8.0 Object Library</b> check boxes.<p class=tl>
This gives you access to the extensibility objects and collections that you need to create add-ins.</P></li>
<li>
Click the <b>Project</b> menu, then click <b>Add Module</b>. In the <b>Add Module</b> dialog box, double-click the <b>Module</b> icon to create a new module.<p class=tl>
Note that there is an icon for an AddIn template. The template includes some of the code necessary for beginning an add-in.</P><p class=tl>
Enter the following code in the new module:</P><pre><code>Declare Function WritePrivateProfileString&amp; Lib _ 
"kernel32" Alias "WritePrivateProfileStringA" _ 
(ByVal AppName$, ByVal KeyName$, ByVal _ 
keydefault$, ByVal FileName$)
Sub AddToINI()
Dim rc As Long
rc = WritePrivateProfileString("Add-Ins32", _ 
"AddInProject.AddInClass", "0", "VBADDIN.INI")
MsgBox _ 
"Add-in is now entered in VBADDIN.INI file."
End Sub
</code></pre>
<p class=tl>
Alternatively, you can use the Add-In designer to create a reference to your add-in. For detailed instructions about how to do this, see "Referencing Add-Ins" in Chapter 4, "Connecting and Exposing Add-Ins".</P></li>
<li>
In the <b>Project Explorer</b> window, double-click the Class module Class1 to bring it to the front. Set its <b>Name</b> property to "AddInClass" and make sure that its <b>Instancing</b> property is set to "5 – MultiUse".<br><br></li>
<li>
Add the following line of code to the Class module:<pre><code>Implements IDTExtensibility
</code></pre>
<p class=tl>
This adds a reference to the IDTExtensibility object to your project.</P></li>
<li>
Click IDTExtensibility in the <b>Object</b> box.<p class=tl>
Notice that four new events appear in the <b>Procedure</b> box: OnConnection, OnDisconnection, OnStartupComplete, and OnAddInsUpdate.</P></li>
<li>
Click each of the events in the <b>Procedure</b> box to add their procedures to your Class module.<p class=tl>
While you can enter the procedure syntax manually, it's strongly recommended that you click the event name in the box to add the procedures to the Class module to ensure that all names and arguments are entered correctly. Plus, it's faster!</P><p class=tl>
All four of these event procedures must be present in your Class module for add-ins to work correctly. Also, if one or more of the event procedures has no code in it, it will be removed upon compilation, so it's important that you add at least a comment to each of the four events to ensure that they remain in the Class module when you compile.</P></li>
<li>
Now that you have all four events added, add the following code to them:<pre><code>Private Sub IDTExtensibility_OnConnection(ByVal _ 
VBInst As Object, ByVal ConnectMode As _ 
VBIDE.vbext_ConnectMode, ByVal AddInInst As _ 
VBIDE.AddIn, custom() As Variant)
MsgBox "Add-in is now connected"
End Sub

Private Sub IDTExtensibility_OnDisconnection(ByVal _ 
RemoveMode As VBIDE.vbext_DisconnectMode, _ 
Custom () as Variant)
MsgBox "Add-in is now disconnected"
End Sub

Private Sub IDTExtensibility_OnStartupComplete _ 
(custom() As Variant)
' Comment to prevent procedure from being
' deleted on compilation.
End Sub

Private Sub IDTExtensibility_OnAddInsUpdate _ 
(custom() As Variant)
' Comment to prevent procedure from being 
' deleted on compilation.
End Sub
</code></pre>
</li>
<li>
On the <b>Project</b> menu, click <b>Project1 Properties</b>, then enter <b>AddInProject</b> in the <b>Project Name</b> box. Click <b>OK</b>.<br><br></li>
<li>
On the <b>File</b> menu, click <b>Save Project</b> to save the project files. Name them as shown in the following table. Visual Basic will provide the indicated extensions automatically.<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>File</b></td>
<td class=label width=38%><b>File name</b></td>
<td class=label width=27%><b>Extension</b></td>
</tr>
<tr valign=top>
<td width=35%>Basic module</td>
<td width=38%>AddIn</td>
<td width=27%>.bas</td>
</tr>
<tr valign=top>
<td width=35%>Class module</td>
<td width=38%>AddInClass</td>
<td width=27%>.cls</td>
</tr>
<tr valign=top>
<td width=35%>Project</td>
<td width=38%>AddInProject</td>
<td width=27%>.vbp</td>
</tr>
</table><br>
</li>
</ol>
<p class=label>
<b>To test the AddInProject add-in</b>
<ol>
<li>
Click the <b>File</b> menu, then click <b>Make AddInProject.dll</b>. In the <b>Make Project</b> dialog box, click <b>OK</b>.<p class=tl>
This will register the add-in in the system registry.</P></li>
<li>
In the <b>Immediate</b> window, enter <code>AddToINI</code> and press RETURN. You get a message box that says "Add-in is now entered in VBADDIN.INI file."<br><br></li>
<li>
On the <b>File</b> menu, click <b>New Project</b> to open the <b>New Project</b> dialog box. (This will close AddInProject.vbp; you will be prompted to save any changes.) Double-click the <b>Standard EXE </b>icon to create a new project.<br><br></li>
<li>
Click the <b>Add-Ins</b> menu, then click <b>Add-In Manager</b>. Notice that a new entry, "AddInProject.AddInClass," appears in the list.<br><br></li>
<li>
Select <b>AddInProject.AddInClass</b> check box, then click <b>OK</b>.<p class=tl>
At this point, you should get the following dialog box:</P><p>
<img src="avtid001.gif" border=0></P></li>
<li>
Click <b>OK</b>. Clear the <b>AddInProject.AddInClass</b> check box, then click <b>OK</b>.<p class=tl>
You should get the following dialog box:</P><p>
<img src="avtid002.gif" border=0></P></li>
</ol>
<h2>What Just Happened?</h2>
<p>
The purpose of this add-in is to demonstrate the components and behavior of an essential component of an add-in — its Class module. Let's go through each of the previous steps and discuss what it did, and more importantly, how and why it was done the way it was.
<ul type=disc>
<li>
The AddToINI procedure has only one purpose in life: to add an entry for your new add-in to a file in the Windows directory called Vbaddin.ini. Why do this? So that it is recognized by Visual Basic as an available add-in. You can add this entry any way you like, but the Windows WritePrivateProfileString API function call works well for this.<p class=tl>
This brings up an important point: When you distribute an add-in to other users, either you or they must run this function (or use some alternative method) on their machines to update the Vbaddin.ini file before they'll be able to use your add-in. If you don't do this, Visual Basic won't know that the add-in is available, and the add-in won't appear in the list of add-ins in the Add-In Manager.</P><p class=tl>
You can put such a procedure in a basic module (as was done here) and instruct the user to run the function, but a more elegant solution is to do it for the user in a setup program that you supply to install the add-in.</P><p class=tl>
Alternatively, you can use the Add-In designer to create a reference to your add-in. For detailed instructions about how to do this, see "Referencing Add-Ins" in Chapter 4, "Connecting and Exposing Add-Ins".</P></li>
<li>
The Class module is the heart of an add-in. It is the place where the add-in responds to events. In this example, it admittedly doesn't do very much — it just puts up message boxes when you connect and disconnect the add-in — but you could design an add-in that responded to literally hundreds of events!<p class=tl>
Although the main Class module is useful, it's best not to put all of the code in it, unless it's brief. You can put other code in basic modules or other Class modules and call the procedures from the main Class module. Just follow your normal procedural programming guidelines.</P></li>
<li>
The act of compiling the DLL registers it in the system registry.<br><br></li>
<li>
Running the AddToINI procedure in the Immediate window creates an .ini file entry for the add-in in Vbaddin.ini.&nbsp; For more information on how to add this reference, see "Adding an Add-In Reference to the Vbaddin.Ini File" in "Connecting and Exposing Add-Ins."<br><br></li>
<li>
The rest of the steps show how you can now activate the add-in in another project as well as demonstrate how it appears and behaves in the Add-In Manager. Also, they show how selecting and clearing the add-in entries in the Add-In Manager triggers the OnConnection and OnDisconnection events.</li>
</ul>
</BODY>
</HTML>

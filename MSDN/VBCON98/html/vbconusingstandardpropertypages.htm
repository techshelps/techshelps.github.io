<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Standard Property Pages</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingstandardpropertypages"></a>Using Standard Property Pages</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingStandardPropertyPagesC">
</object></p>
<p>
Visual Basic provides three standard property pages: StandardFont, StandardColor, and StandardPicture. If you declare properties of type Font, OLE_COLOR, or Picture, Visual Basic’s Properties window will automatically associate these properties with the appropriate standard property page.</p>
<p>
Visual Basic will not automatically add these pages to the Property Pages dialog box, however. Use the procedure shown in "Connecting a Property Page to an ActiveX Control" to add standard property pages to the list of pages that will be displayed in the Property Pages dialog box.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The format used to display standard property pages in the Property Pages dialog box differs from the format used by the Properties window. For example, the Color page is in an entirely different format, and the Font page does not display all Font object properties.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you use the Property Page Wizard to create property pages for a control with properties declared Font, OLE_COLOR, or Picture, the wizard will automatically add the appropriate standard property pages to the list of pages to be displayed.</p>
<h3>Standard Property Pages and Multiple Properties</h3>
<p>
If your control has more than one property that uses a standard property page, and you add the page to your control’s PropertyPages property, the standard page will include a list of properties the user can select from.</p>
<p>
For example, Figure 10.4 shows the Properties window and Property Pages dialog box for the hypothetical VirtualVelociraptor control, which has several properties of type OLE_COLOR:</p>
<p class=label>
<b>Figure 10.4&nbsp;&nbsp;&nbsp;The Properties window for a control with multiple color properties</b></p>
<p>
<img src="avtcm131.gif" border=0></p>
<p>
As Figure 10.5 shows, the Color page displayed by the Property Pages dialog box for the VirtualVelociraptor control has a list box containing the four color properties of the control.</p>
<p class=label>
<b>Figure 10.5&nbsp;&nbsp; A standard property page showing multiple properties</b></p>
<p>
<img src="avtcm132.gif" border=0></p>
<p>
Figure 10.5 also shows that the Property Pages dialog box uses a very different format than that used by the Properties window.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When a standard property page displays multiple properties, the ApplyChanges event is raised each time the user selects a different property from the list.</p>
<p>
The following code fragment shows how the StripeColor property of the hypothetical VirtualVelociraptor control should be declared in order to work with the Properties window and Property Pages dialog box:</p>
<pre><code>Private mStripeColor As OLE_COLOR

Public Property Get StripeColor() As OLE_COLOR
   StripeColor = mStripeColor
End Property

Public Property Let StripeColor( _
      ByVal NewColor As OLE_COLOR)
   mStripeColor = NewColor
End Property
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Adding Properties to Controls" in "Building ActiveX Controls."</p>
</BODY>
</HTML>

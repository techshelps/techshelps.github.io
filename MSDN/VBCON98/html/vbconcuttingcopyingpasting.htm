<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cutting, Copying, and Pasting Text with the Clipboard</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcuttingcopyingpasting"></a>Cutting, Copying, and Pasting Text with the Clipboard</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCuttingCopyingPastingC">
</object></p>
<p>
Two of the most useful Clipboard methods are SetText and GetText. These two methods transfer string data to and from the Clipboard, as shown in Figure 12.2.</p>
<p class=label>
<b>Figure 12.2&nbsp;&nbsp;&nbsp;Moving data to and from the Clipboard with SetText and GetText</b></p>
<p>
<img src="avp12002.gif" border=0></p>
<p>
SetText copies text onto the Clipboard, replacing whatever text was stored there before. You use SetText like a statement. Its syntax is:</p>
<p>
<b>Clipboard.SetText</b> <i>data</i>[, <i>format</i>]</p>
<p>
GetText returns text stored on the Clipboard. You use it like a function:</p>
<p>
<i>destination</i> = <b>Clipboard.GetText</b>()</p>
<p>
By combining the SetText and GetText methods with the selection properties introduced in "Working with Selected Text," you can easily write Copy, Cut, and Paste commands for a text box. The following event procedures implement these commands for controls named mnuCopy, mnuCut, and mnuPaste:</p>
<pre><code>Private Sub mnuCopy_Click ()
   Clipboard.Clear
   Clipboard.SetText Text1.SelText
End Sub

Private Sub mnuCut_Click ()
   Clipboard.Clear
   Clipboard.SetText Text1.SelText
   Text1.SelText = ""
End Sub

Private Sub mnuPaste_Click ()
   Text1.SelText = Clipboard.GetText()
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The example works best if these are menu controls, because you can use menus while Text1 has the focus.</p>
<p>
Notice that both the Copy and Cut procedures first empty the Clipboard with the Clear method. (The Clipboard is not cleared automatically because you may want to place data on the Clipboard in several different formats, as described in "Working with Multiple Formats on the Clipboard" later in this chapter.) Both the Copy and Cut procedures then copy the selected text in Text1 onto the Clipboard with the following statement:</p>
<pre><code>Clipboard.SetText Text1.SelText
</code></pre>
<p>
In the Paste command, the GetText method returns the string of text currently on the Clipboard. An assignment statement then copies this string into the selected portion of the text box (<code>Text1.SelText</code>). If no text is currently selected, Visual Basic places this text at the insertion point in the text box:</p>
<pre><code>Text1.SelText = Clipboard.GetText()
</code></pre>
<p>
This code assumes that all text is transferred to and from the text box Text1, but the user can copy, cut, and paste between Text1 and controls on other forms.</p>
<p>
Because the Clipboard is shared by the entire environment, the user can also transfer text between Text1 and any application using the Clipboard.</p>
<h2>Working with the ActiveControl Property</h2>
<p>
If you want the Copy, Cut, and Paste commands to work with any text box that has the focus, use the ActiveControl property of the Screen object. The following code provides a reference to whichever control has the focus:</p>
<pre><code>Screen.ActiveControl
</code></pre>
<p>
You can use this fragment just like any other reference to a control. If you know that the control is a text box, you can refer to any of the properties supported for text boxes, including Text, SelText, and SelLength. The following code assumes that the active control is a text box, and uses the SelText property:</p>
<pre><code>Private Sub mnuCopy_Click ()
   Clipboard.Clear
   Clipboard.SetText Screen.ActiveControl.SelText
End Sub

Private Sub mnuCut_Click ()
   Clipboard.Clear
   Clipboard.SetText Screen.ActiveControl.SelText
   Screen.ActiveControl.SelText = ""
End Sub

Private Sub mnuPaste_Click ()
   Screen.ActiveControl.SelText = Clipboard.GetText()
End Sub
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating and Modifying Menus at Run Time</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingmodifyingmenusatruntime"></a>Creating and Modifying Menus at Run Time</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingModifyingMenusAtRunTimeC">
</object></p>
<p>
The menus you create at design time can also respond dynamically to run-time conditions. For example, if a menu item action becomes inappropriate at some point, you can prevent users from selecting that menu item by <i>disabling</i> it. In the MDI NotePad application, for example, if the clipboard doesn't contain any text, the Paste menu item is dimmed on the Edit menu, and users cannot select it.</p>
<p>
You can also dynamically add menu items, if you have a menu control array. This is described in "Adding Menu Controls at Run Time," later in this topic.</p>
<p>
You can also program your application to use a check mark to indicate which of several commands was last selected. For example, the Options, Toolbar menu item from the MDI NotePad application displays a check mark if the toolbar is displayed. Other menu control features described in this section include code that makes a menu item visible or invisible and that adds or deletes menu items.</p>
<h2>Enabling and Disabling Menu Commands</h2>
<p>
All menu controls have an Enabled property, and when this property is set to False, the menu is disabled and does not respond to user actions. Shortcut key access is also disabled when Enabled is set to False. A disabled menu control appears dimmed, like the Paste menu item in Figure 6.11.</p>
<p class=label>
<b>Figure 6.11&nbsp;&nbsp;&nbsp;A disabled menu item</b></p>
<p>
<img src="avp06013.gif" border=0></p>
<p>
For example, this statement disables the Paste menu item on the Edit menu of the MDI NotePad application:</p>
<pre><code>mnuEditPaste.Enabled = False
</code></pre>
<p>
Disabling a menu title in effect disables the entire menu, because the user cannot access any menu item without first clicking the menu title. For example, the following code would disable the Edit menu of the MDI Notepad application:</p>
<pre><code>mnuEdit.Enabled = False
</code></pre>
<h2>Displaying a Check Mark on a Menu Control</h2>
<p>
Using the Checked property, you can place a check mark on a menu to:
<ul type=disc>
<li>
Tell the user the status of an on/off condition. Choosing the menu command alternately adds and removes the check mark.<br><br></li>
<li>
Indicate which of several modes is in effect. The Options menu of the MDI Notepad application uses a check mark to indicate the state of the toolbar, as shown in Figure 6.12.</li>
</ul>
<p class=label>
<b>Figure 6.12&nbsp;&nbsp;&nbsp;A checked menu item</b></p>
<p>
<img src="avp06014.gif" border=0></p>
<p>
You create check marks in Visual Basic with the Checked property. Set the initial value of the Checked property in the Menu Editor by selecting the check box labeled Checked. To add or remove a check mark from a menu control at run time, set its Checked property from code. For example:</p>
<pre><code>Private Sub mnuOptions_Click ()
   ' Set the state of the check mark based on 
   ' the Visible property.
   mnuOptionsToolbar.Checked = picToolbar.Visible
End Sub
</code></pre>
<h2>Making Menu Controls Invisible</h2>
<p>
In the Menu Editor, you set the initial value of the Visible property for a menu control by selecting the check box labeled Visible. To make a menu control visible or invisible at run time, set its Visible property from code. For example:</p>
<pre><code>mnuFileArray(0).Visible = True   ' Make the control 
                                 ' visible.

mnuFileArray(0).Visible = False   ' Make the control 
                                 ' invisible.
</code></pre>
<p>
When a menu control is invisible, the rest of the controls in the menu move up to fill the empty space. If the control is on the menu bar, the rest of the controls on the menu bar move left to fill the space.</p>
<p class=indent>
<b><B>Note</B>&nbsp;&nbsp;&nbsp;</b>Making a menu control invisible effectively disables it, because the control is inaccessible from the menu, access or shortcut keys. If the menu title is invisible, all the controls on that menu are unavailable.</p>
<h2>Adding Menu Controls at Run Time</h2>
<p>
A menu can grow at run time. In Figure 6.13, for example, as files are opened in the SDI NotePad application, menu items are dynamically created to display the path names of the most recently opened files.</p>
<p class=label>
<b>Figure 6.13&nbsp;&nbsp;&nbsp;Menu control array elements created and displayed at run time</b></p>
<p>
<img src="avp06015.gif" border=0></p>
<p>
You must use a control array to create a control at run time. Because the mnuRecentFile menu control is assigned a value for the Index property at design time, it automatically becomes an element of a control array — even though no other elements have yet been created.</p>
<p>
When you create mnuRecentFile(0), you actually create a separator bar that is invisible at run time. The first time a user saves a file at run time, the separator bar becomes visible, and the first file name is added to the menu. Each time you save a file at run time, additional menu controls are loaded into the array, making the menu grow.</p>
<p>
Controls created at run time can be hidden by using the Hide method or by setting the control's Visible property to False. If you want to remove a control in a control array from memory, use the Unload statement.</p>
</BODY>
</HTML>

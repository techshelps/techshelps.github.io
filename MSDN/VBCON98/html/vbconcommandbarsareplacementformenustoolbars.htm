<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Command Bars: A Replacement for Menus and Toolbars</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcommandbarsareplacementformenustoolbars"></a>Command Bars: A Replacement for Menus and Toolbars</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCommandBarsAReplacementForMenusToolbarsC">
</object></p>
<p>
Even though menus are differentiated from toolbar buttons because they look different from each other, to Visual Basic they are in essence the same kind of object. Internally, Visual Basic considers menus, menu commands, toolbars, and toolbar buttons as command bars.</p>
<p>
A <i>command bar</i> unifies the concept of menus and toolbars into a single common visual and programmatic object. As command bars, menus contain menu commands which can have icons and captions and exhibit button-like behavior while remaining in the familiar menu format. Some toolbar buttons have dropdown arrows, similar to ComboBox controls. A command bar object can contain other command bar objects, depending on its type.</p>
<p>
While a discussion of the command bar object model is beyond the scope of this book, here are a few basics to help you place your add-in where you want it.</p>
<p>
There are three types of command bars:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=19%>Popup</td>
<td width=81%>A Popup command bar is equivalent to a menu item on a menu bar.</td>
</tr>
<tr valign=top>
<td width=19%>ComboBox</td>
<td width=81%>A ComboBox command bar is similar to a ComboBox control. That is, a toolbar button with a dropdown arrow next to it (like the Add Project toolbar button). When you click the arrow, it displays more menu commands with icons.</td>
</tr>
<tr valign=top>
<td width=19%>Button</td>
<td width=81%>A Button command bar is equivalent to a standard toolbar button. That is, a button with an icon displayed on it.</td>
</tr>
</table><br>
<h2>Getting to Command Bars Through Code</h2>
<p>
The concept of command bars is important to you really only as a programmer, since the interface acts more or less the same as it did in previous versions of Visual Basic. Programmatically, however, it is quite different. You can gain access to and explore the various command bar objects in the Object Browser by selecting the Microsoft Office 8.0 Object Library check box in the References dialog box.</p>
<p>
Since menus and toolbars are in the same object library, they’re referred to through the CommandBarControl object. For example, to declare the basic object for use in your code, you would enter:</p>
<pre><code>Dim mcbMenuCommandBar As Office.CommandBarControl
</code></pre>
<p>
Every toolbar, menu, or context menu in the development environment is a command bar. It helps to understand command bars if you think of them as containers that hold other command bars. Therefore, a menu bar command bar can contain several menu items, each of which is itself a command bar, and each menu item can contain several menu commands, each of which is also a command bar.</p>
<h3>Getting Your Bearings Among the Command Bars</h3>
<p>
This model makes placing your add-in in the development environment easy. You simply refer to the command bar in which you wish your add-in to appear. You refer to the command bars from top to bottom and left to right. In the example below, we expose our new add-in as a command on the Tools menu. Here’s an example of how to do this:</p>
<pre><code>Set mcbMenuCommandBar = _
VBInst.CommandBars(1).Controls(8).CommandBar. _
Controls.Add(1, , , 3)
</code></pre>
<p>
The code above installs a popup command bar before the third menu command from the top. What's in this code?
<ul type=disc>
<li>
The first reference to command bars is <code>CommandBars(1)</code>. (Note that because Item is the CommandBars collection’s default property, the code here is the same as if we used <code>CommandBars.Item(1)</code>.)&nbsp; The first reference to command bars is the toolbar itself. The first toolbar is always the menu bar. So when we say <code>CommandBars(1)</code> we’re talking about the menu command bar.<br><br></li>
<li>
The second reference is <code>Controls(8)</code>. This means the eighth control from the left on that command bar, which is the Tools menu.<br><br></li>
<li>
The next two references are <code>CommandBar.Controls</code>. This means that we’re affecting the Tools command bar.<br><br></li>
<li>
The last reference is <code>Add(1, , , 3)</code>. Using the Add method, we add a new command bar (in this case a menu command) to the Tools menu. You can view the parameters for the Add method by examining the CommandBarControls object in the Object Browser.</li>
</ul>
<h3>Working with the Model's Flexibility</h3>
<p>
Note, however, that command bar controls can be moved by users to any location within a menu or toolbar, which means you cannot rely on them to always remain in the same numeric position. Additionally, if you support localized versions of Visual Basic, you cannot rely on the command bar control captions to always remain the same.</p>
<p>
However, there is a method that allows you to always obtain a specific menu item, regardless of its location. The name of the CommandBar object of the menu item is not localized; thus, you can always specify this name in the top-level CommandBars collection to refer to a menu item. For example, to obtain a reference object to the command bar representing the Add-Ins menu, you could use the following statement:</p>
<pre><code>Set cmdBar = VBInst.CommandBars("Add-Ins")
</code></pre>
<p>
This works regardless of the location of the menu item or the caption name. You obtain the CommandBar object of a particular menu item, then use its Controls collection to add an item to the menu.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using a Breakpoint to Selectively Halt Execution</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingbreakpointtoselectivelyhaltexecution"></a>Using a Breakpoint to Selectively Halt Execution</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingBreakpointToSelectivelyHaltExecutionC">
</object></p>
<p>
At run time, a breakpoint tells Visual Basic to halt just before executing a specific line of code. When Visual Basic is executing a procedure and it encounters a line of code with a breakpoint, it switches to break mode.</p>
<p>
You can set or remove a breakpoint in break mode or at design time, or at run time when the application is idle.</p>
<p class=label>
<b>To set or remove a breakpoint</b>
<ol>
<li>
In the Code window, move the insertion point to the line of code where you want to set or remove a breakpoint.<p class=tl>
-or-</P><p class=tl>
Click in the margin on the left edge of the Code window next to the line where you want to set or remove a breakpoint.</P></li>
<li>
From the <b>Debug</b> menu, choose <b>Toggle Breakpoint</b>.<p class=tl>
-or-</P><p class=tl>
Click the <b>Toggle Breakpoint</b> button on the <b>Debug</b> toolbar. (To display the Debug toolbar, right-click on the Visual Basic toolbar and select the <b>Debug</b> option.)</P><p class=tl>
-or-</P><p class=tl>
Press F9.</P></li>
</ol>
<p>
When you set a breakpoint, Visual Basic highlights the selected line in bold, using the colors that you specified on the Editor Format tab of the Options dialog box, available from the Tools menu.</p>
<p>
For example, Figure 13.16 shows a procedure with a breakpoint on the fifth line. In the Code window, Visual Basic indicates a breakpoint by displaying the text on that line in bold and in the colors specified for a breakpoint.</p>
<p class=label>
<b>Figure 13.16&nbsp;&nbsp;&nbsp;A procedure halted by a breakpoint</b></p>
<p>
<img src="avp13016.gif" border=0></p>
<h3>Identifying the Current Statement</h3>
<p>
In Figure 13.16, a rectangular highlight surrounds the seventh line of code. This outline indicates the <i>current statement</i>, or next statement to be executed. When the current statement also contains a breakpoint, only the rectangular outline highlights the line of code. Once the current statement moves to another line, the line with the breakpoint is displayed in bold and in color again.</p>
<p class=label>
<b>To specify the color of text of the current statement</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b> and click the <b>Editor Format </b>tab on the <b>Options</b> dialog box.<br><br></li>
<li>
Under <b>Code Colors</b>, select <b>Execution Point Text</b>, and set the <b>Foreground</b>, <b>Background</b>, and <b>Indicator</b> colors.</li>
</ol>
<h2>Examining the Application at a Breakpoint</h2>
<p>
Once you reach a breakpoint and the application is halted, you can examine the application's current state. Checking results of the application is easy, because you can move the focus among the forms and modules of your application, the Code window, and the debugging windows.</p>
<p>
A breakpoint halts the application just before executing the line that contains the breakpoint. If you want to observe what happens when the line with the breakpoint executes, you must execute at least one more statement. To do this, use Step Into or Step Over. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;<B>Although it’s possible to set a breakpoint in a MouseMove event procedure or in a Timer event, this can cause unexpected results. The normal flow of events is disrupted when entering break mode; single-stepping through the code from within these procedures may present different behavior than that which would occur in run mode.</B></p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See the section, "Running Selected Portions of Your Application," later in this chapter.</p>
<p>
When you are trying to isolate a problem, remember that a statement might be indirectly at fault because it assigns an incorrect value to a variable. To examine the values of variables and properties while in break mode, use the Locals window, Quick Watch, watch expressions, or the Immediate window. </p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To learn how to use the Immediate window to test the values of properties and variables, see "Testing Data and Procedures with the Immediate Window," later in this chapter. To learn more about watch expressions, see "Monitoring Data with Watch Expressions."</p>
</BODY>
</HTML>

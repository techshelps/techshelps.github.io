<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Add-In Essentials</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddinessentials"></a>Add-In Essentials</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddInEssentialsC">
</object></p>
<p>
All add-ins, regardless of what they do, require that you reference the items discussed in this topic. When you begin an add-in project, selecting the add-in template that comes with Visual Basic will provide a project containing code for all of the items listed in this topic. The template is described in this topic.</p>
<p>
All add-ins you create with Visual Basic require the following:
<ul type=disc>
<li>
<b>Root Object</b>&nbsp;&nbsp;&nbsp;The top-most, or "root" object in the extensibility model is the VBE object. The VBE object represents the Visual Basic environment. It hosts all of the extensibility objects and collections, which in turn have a number of properties, methods, and events which expose its functionality.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Visual Basic Instance Variable" in this chapter for information on using the VBE object.
<ul type=disc>
<li>
<b>lDTExtensibility Interface</b>&nbsp;&nbsp;&nbsp;An interface named IDTExtensibility is provided to give you quick access to necessary events in the extensibility model. These interface methods are meant to be contained in a class module in your add-in. To expose the interface's methods, use the Implements statement in a class module's Declaration section. The syntax is:<pre><code>Implements IDTExtensibility
</code></pre>
<p class=tl>
The IDTExtensibility interface contains four methods for handling add-in events:</P><ul type=disc>
<li>
OnConnection<br><br></li>
<li>
OnDisconnection<br><br></li>
<li>
OnStartupComplete<br><br></li>
<li>
OnAddInsUpdate</li>
</ul>
<p class=tl>
Although these are methods to the IDTExtensibility interface, to you as a programmer, they act exactly like events, triggering when an event occurs.</P><p class=tl>
The IDTExtensibility interface speeds up the process of creating these four essential procedures and eliminates problems with add-ins due to entry errors in the parameter list, or other procedure syntax errors.</P><p class=tl>
When you click the Objects drop down box in the code window for the class module, you'll see IDTExtensibility. When you select IDTExtensibility, the four required add-in event procedures appear in the Procedures drop down box. Simply click the name of each procedure to add it to the class module.</P><p class=tl>
Since add-ins require that all members of an interface be implemented, the class module must contain all four procedures. You can add as many other procedures to the class module that you want, but you must have those four at a minimum for your add-in to work.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;One important caveat is that each of the four procedures must contain at least one line of code, such as a statement, procedure call, comment, and so on. If the procedure is empty, it will be removed by the compiler. If you don’t have any particular code you want to put in these procedures, just insert a comment.</p></li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Add-in events are also covered in Chapter 4, "Connecting and Exposing Add-Ins" in the section "Connecting or Disconnecting Add-Ins." Other events that you'll want to handle are covered in this chapter under the section "Responding to Events."
<ul type=disc>
<li>
<b>Visual Basic Instance Variable</b>&nbsp;&nbsp;&nbsp;Each collection and object in the extensibility model requires a variable to store and reference the current instance of Visual Basic. An instance is a dynamic identification variable for the current session of Visual Basic. Since you can conceivably have more than one session of the Visual Basic IDE running at any given time, the instance variable differentiates one Visual Basic session from another.<p class=tl>
To declare a Visual Basic instance variable in the declarations section of a module or class module, you might enter:</P><pre><code>' The variable VBInst is set to the current instance ' of Visual Basic.
Global gVBInst As VBIDE.VBE
</code></pre>
</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"Creating a Basic Add-In," in Chapter 1, "Add-Ins Overview," steps you through creating a simple add-in and provides a brief illustration of the items presented here at work together.</p>
<h2>Add-In Template</h2>
<p>
Visual Basic's add-in template contains the basic, necessary code that all add-ins require. To use the add-in template to create a new add-in project, choose Add-In in the New Project dialog box. This template contains the essentials:
<ul type=disc>
<li>
A basic module which declares global variables, such as a Visual Basic instance variable.<br><br></li>
<li>
A class module with pre-created IDTExtensibility interface procedures<br><br></li>
<li>
An Add-In designer.</li>
</ul>
<p>
The template also includes these other useful features:
<ul type=disc>
<li>
A CommandBar event handler<br><br></li>
<li>
Rudimentary error-handling code<br><br></li>
<li>
Code to access the add-in as a button on the Standard toolbar</li>
</ul>
<p>
The add-in template is a great starting point for your add-in projects.</p>
</BODY>
</HTML>

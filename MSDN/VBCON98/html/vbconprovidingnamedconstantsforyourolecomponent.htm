<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Providing Named Constants for Your Component</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconprovidingnamedconstantsforyourolecomponent"></a>Providing Named Constants for Your Component</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconProvidingNamedConstantsForYourOLEComponentC">
</object></p>
<p>
Enumerations provide an easy way to define a set of related named constants. For example, the built-in enumeration VbDayOfWeek contains numeric constants with the names vbMonday, vbTuesday, and so on.</p>
<p>
You can use an enumeration as the data type of a property or method argument, as in the following example:</p>
<pre><code>Private mdowDayOfWeek As VbDayOfWeek

Property Get DayOfWeek() As VbDayOfWeek
   DayOfWeek = mdowDayOfWeek
End Property

Property Let DayOfWeek(ByVal NewDay As VbDayOfWeek)
   If (NewDay &lt; vbUseSystemDayOfWeek) _
         Or (NewDay &lt; vbSaturday) Then
      Err.Raise Number:=31013, _
         Description:="Invalid day of week"
   Else
      DayOfWeek = mdowDayOfWeek
   End If
End Property
</code></pre>
<p>
When users of your component enter code that assigns a value to this property, the Auto List Members feature will offer a drop down containing the members of the enumeration, as shown in Figure 6.3.</p>
<p class=label>
<b>Figure 6.3&nbsp;&nbsp;&nbsp;Auto List Members displays enumerations</b></p>
<p>
<img src="avtcm074.gif" border=0></p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You might think that you could save space by declaring the internal variable <code>mdowDayOfWeek</code> As Byte instead of As VbDayOfWeek — since the latter effectively makes the variable a Long. However, on 32-bit operating systems the code to load a Long is faster and more compact than the code to load shorter data types. Not only could the extra code exceed the space saved, but there might not be any space saved to begin with — because of alignment requirements for modules and data.</p>
<p>
You can make the members of an enumeration available to users of your component by marking the enumeration Public and including it in any public module that defines a class — that is, a class module, UserControl, or UserDocument.</p>
<p>
When you compile your component, the enumeration will be added to the type library. Object browsers will show both the enumeration and its individual members.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; Although an enumeration must appear in a module that defines a class, it always has global scope in the type library. It is not limited to, or associated in any other way with the class in which you declared it.</p>
<h2>General Purpose Enumerations</h2>
<p>
The members of an enumeration need not be sequential or contiguous. Thus, if you have some general-purpose numeric constants you wish to define for your component, you can put them into a catch-all Enum.</p>
<pre><code>Public Enum General
   levsFeetInAMile = 5280
   levsIgnitionTemp = 451
   levsAnswer = 42
End Enum
</code></pre>
<h2>Avoiding Enumeration Name Conflicts</h2>
<p>
In the preceding code example, both the Enum and its members were prefixed with four lowercase characters chosen to identify the component they belong to, and to reduce the chance that users of the component will encounter name conflicts. This is one of the general naming rules discussed in "What’s in a Name?" earlier in this chapter.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Enumerations are discussed in detail in "More About Programming" and "Programming with Objects," in the <i>Visual Basic Programmer’s Guide.</i></p>
<h2>Providing Non-Numeric and Non-Integer Constants</h2>
<p>
The members of an Enum can have any value that fits in a Long. That is, they can assume any integer value from -2,147,483,648 to 2,147,483,647. When you declare a variable using the name of an Enum as the data type, you’re effectively declaring the variable As Long.</p>
<p>
Occasionally you may need to provide a string constant, or a constant that isn’t an integer value. Visual Basic doesn’t provide a mechanism for adding such values to your type library as public constants, but you can get a similar effect using a global object with read-only properties.</p>
<p>
If your component doesn’t contain a global object, such as Application, add a public class module named GlobalConstants to your project. Set the Instancing property to GlobalMultiUse.</p>
<p>
For each constant you want to provide, add to the GlobalConstants class module a Property Get procedure that returns the desired value. For example, the following code provides Avogadro’s Number as a constant, and mimics the vbCrLf constant in Visual Basic.</p>
<pre><code>Public Property Get Avogadro() As Double
   Avogadro = 6.02E+23
End Property

Public Property Get vbCrLf() As String
   vbCrLf = Chr$(13) &amp; Chr$(10)
End Property
</code></pre>
<p>
Because the Instancing property is GlobalMultiUse, a user of the component doesn’t have to explicitly create an instance of the GlobalConstants class in order to use the constants. The constants can be used as if they were part of Visual Basic:</p>
<pre><code>strNewText = "Line1" &amp; vbCrLf &amp; "Line2"
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;A user of Visual Basic, Microsoft Excel, or any other application that hosts Visual Basic for Applications would never see this version of the vbCrLf constant, because the VBA type library is always higher in the References dialog than the type library of any component.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Global objects are discussed in "Instancing for Classes Provided by ActiveX Components" in this chapter, and in "Building Code Components."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Binding In Visual Basic</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondatabindinginvisualbasic"></a>Data Binding In Visual Basic</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDataBindingInVisualBasic_C">
</object></p>
<p>
In previous versions of Visual Basic, binding a data source (such as the Data control) to a data consumer (such as the DBCombo control or simply to a text box) could only be done at design-time. Visual Basic now allows you to bind almost any data source to any data consumer at run time. For example, at run time, you can now set the DataSource property as shown below:</p>
<pre><code>Text1.DataMember = "Employees"
Text1.DataField = "Salary"
Set Text1.DataSource = DataEnvironment1
</code></pre>
<p>
With this capability, you can also bind controls that have been added to the Controls collection using the new Add method. The code below adds a user control and binds it.</p>
<pre><code>Private myCtl As Extender
Form1.Licenses.Add "Project1.userControl1", "uc1_Key"
Set myCtl = Form1.Controls.Add("Project1.userControl1", "Ctl_Key")
myCtl.DataMember = "Employees"
myCtl.DataField = "Salary"
Set myCtl.DataSource = DataEnvironment1
</code></pre>
<h4>Exceptions</h4>
<p>
The only data sources that cannot be bound in this manner are the intrinsic Data control and the RemoteData Control.</p>
<h3>The BindingCollection Object</h3>
<p>
In addition to this flexibility, you can also create your own data source using new data-aware features of the class module. Once you have created such a data source, you can also bind it at run time to a data consumer using the BindingCollection object. For details, see <a href="vbconcreatingdata-awareclasses.htm">Creating Data-Aware Classes</a> and <a href="vbconcreatingdatasource.htm">Creating a Data Source</a>.</p>
<h3>Data-Aware User Controls</h3>
<p>
Visual Basic 6.0 also allows you to create your own user controls that function as data sources.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information about new data-bound controls, see <a href="vbcondataawarecontrols.htm">Forms and Data-Aware Controls</a>.</p>
</BODY>
</HTML>

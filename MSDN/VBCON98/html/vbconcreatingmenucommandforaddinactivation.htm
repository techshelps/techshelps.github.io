<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Menu Command for Activating Add-Ins</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingmenucommandforaddinactivation"></a>Creating a Menu Command for Activating Add-Ins</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingMenuCommandForAddInActivationC">
</object></p>
<p>
In some cases, you may want to provide access to your add-in through a menu command. In this example, we’ll place a menu command for our new add-in on the Tools menu.</p>
<p>
The following procedure is designed to build on example code presented in “Creating a Basic Add-In.”</p>
<p class=label>
<b>To place a menu command for an add-in on the Tools menu</b>
<ol>
<li>
Make sure that “Microsoft Office 8.0 Object Library” is selected in the <b>References</b> dialog box. This allows you access to the Office command bar objects.<br><br></li>
<li>
Add the following code to the General Declarations section of the class module:<pre><code>Public VBI As VBIDE.VBE
' VBI is assigned a pointer to the current IDE's
' VBA object which is later passed as a parameter
' to the OnConnection procedure. It's retained
' because you need it later for disconnecting the
' add-in. Other procedures may have a need for it
' as well.

Private mcbMenuCommandBarCtrl As _
Office.CommandBarControl
' This will be set to the new command bar control.

Private WithEvents MenuHandler As CommandBarEvents
' This is the event handling procedure for 
' the click event of the new command bar control.
</code></pre>
</li>
<li>
The following procedure is called when the add-in is connected in the Add-In Manager. It adds a new menu command to the <b>Tools</b> menu called “My New Add-In.” In the IDTExtensibility_OnConnection procedure, remove the MsgBox line and add the following:<pre><code>Private Sub IDTExtensibility_OnConnection _
(ByVal VBInst As Object, _
ByVal ConnectMode As VBIDE.vbext_ConnectMode, _
ByVal AddInInst As VBIDE.AddIn, _
custom() As Variant)

' Save the current instance of Visual Basic.
Set VBI = VBInst
' Add a menu command to the Tools menu.
Set mcbMenuCommandBarCtrl = _
VBI.CommandBars("Tools").Controls.Add(before:=3)
' Place a separator bar before the new
' menu command.
mcbMenuCommandBarCtrl.BeginGroup = True
' Set the title for the add-in.
mcbMenuCommandBarCtrl.Caption = "My New Add-In"
' Copy an icon bitmap to the clipboard.
Clipboard.SetData _
LoadPicture("c:\windows\triangles.bmp")
' Copy the icon from the clipboard to the menu
' command's icon.
mcbMenuCommandBarCtrl.PasteFace
' Connect the event handler to receive the
' events for the new command bar control.
Set MenuHandler = _
VBI.Events.CommandBarEvents _
(mcbMenuCommandBarCtrl)
' Place a separator bar after the new
' menu command.
VBI.CommandBars("Tools").Controls(4).BeginGroup _
= True
End Sub
</code></pre>
</li>
<li>
The next procedure is called whenever the add-in is disconnected. The <code>mcbMenuCommandBar.Delete</code> line ensures that the menu command in the <b>Tools</b> menu is removed once the add-in is disconnected. Add the following lines to the IDTExtensibility_OnDisconnection procedure. (You can also remove the MsgBox line from the original code if you wish):<pre><code>Private Sub IDTExtensibility_OnDisconnection _
(ByVal VBInst As Object, ByVal LoadMode As _
Long, ByVal AddInInst As VBIDE.AddIn, custom() _
As Variant)
' Delete the new menu command from the Tools 
' menu.
mcbMenuCommandBarCtrl.Delete
End Sub
</code></pre>
</li>
<li>
The MenuHandler_Click event is called whenever you click the new menu command on the <b>Tools</b> menu. The optional message box function is here only to signal that the Click event was correctly intercepted. Add the following procedure to the add-in’s class module<b> </b>by using the dropdown to insert the event handler:<pre><code>Private Sub MenuHandler_Click(ByVal _
CommandBarControl As Object, handled As Boolean, _
CancelDefault As Boolean)
MsgBox "You clicked the new menu command."
End Sub
</code></pre>
</li>
<li>
Save and then compile the project (as an ActiveX component).<br><br></li>
<li>
Start a new project and activate the add-in through the Add-In Manager.<br><br></li>
<li>
Look in the <b>Tools</b> menu. Notice that there is now a <b>My New Add-In</b> menu command.<br><br></li>
<li>
Click the new menu command. You should get a message box confirming that you clicked the menu command.<br><br></li>
<li>
Disconnect the add-in in the Add-In Manager. Notice that the menu command is removed from the <b>Tools</b> menu.</li>
</ol>
<p>
To summarize, you now have an add-in which:
<ul type=disc>
<li>
Adds a command to the Tools menu when connected to Visual Basic.<br><br></li>
<li>
Demonstrates that it handles an event when the menu command is clicked.<br><br></li>
<li>
Removes the command from the Tools menu when disconnected.</li>
</ul>
</BODY>
</HTML>

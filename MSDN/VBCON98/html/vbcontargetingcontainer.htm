<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Targeting a Container</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontargetingcontainer"></a>Targeting an ActiveX Document Container</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTargetingContainerC">
</object></p>
<p>
ActiveX documents, like ActiveX controls, cannot be used alone. ActiveX documents must exist in a <i>container</i>, which is itself an object. Most ActiveX documents, however, will be viewed in an application that provides an object that is the actual container of the ActiveX document. Throughout this document, we will therefore refer to these applications as <i>container applications</i>, or applications that can contain an ActiveX document.</p>
<p>
Here are three containers, and their advantages:
<ul type=disc>
<li>
<b>Microsoft Internet Explorer</b> (version 3.0 or later) — Using Internet Explorer, an ActiveX document can be a familiar version of an existing application with added Internet capabilities. For example, an existing application can be enhanced with Web links (using the Hyperlink object). You can also deploy the ActiveX document over the Internet, allowing users to get the latest version of your application.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The deployment of ActiveX documents differs slightly depending on the version of Internet Explorer that you are targeting. For more information on deploying ActiveX documents, see "Manually Deploying ActiveX Components" in <i>Building Internet Applications</i>.</p></li>
<li>
<b>Microsoft Office Binder 1.0</b> (or later) — The Microsoft Binder is an electronic "paper clip" that can hold several disparate documents, such as Word and Excel documents. Use an ActiveX document to add database programming or multimedia display capabilities to binders. For example, a repair manual assembled as a binder of Word documents could be enhanced by the addition of a Visual Basic ActiveX document that displayed video clips of repair procedures.<br><br></li>
<li>
<b>Visual Basic Development Environment Tool Window</b> — The Visual Basic Environment Tool Window is an object created by the CreateToolWindow function. Using this function, you can create a dockable window in the Visual Basic development environment. This window can then contain ActiveX documents that provide additional user interface capabilities to the development environment. For instance, you could create a resource editor or menu editor using the Visual Basic Extensibility Object Model.</li>
</ul>
<h2>Issues for Containers</h2>
<p>
Because the capabilities of an ActiveX document can depend on the host application, you should consider the following questions:
<ul type=disc>
<li>
Will this document depend on the features of a particular host application?<p class=tl>
For example, if you are creating an ActiveX document that will run in Internet Explorer, you may want to exploit its ability to show an ActiveX document in one frame, and HTML documents in another.</P></li>
<li>
Will I be creating a suite of documents that work together?<p class=tl>
For example, if the document is a simple calculator, it will probably not demand more than a single ActiveX document, and the answer is "no."</P></li>
</ul>
<p>
If the answer to either of these is "yes," then you will need to investigate the capabilities of the target application(s). Specifically, you will want to know how to navigate from one ActiveX document to another (if you are creating a suite of documents), or how to access the features of the host application. Other than documentation from the creator of the container application, the only way to discover the object model is by using the Object Browser.</p>
<h2>One Example: One Goal, Two Containers</h2>
<p>
To illustrate this, let's examine a multi-document scenario. Imagine you have created two ActiveX documents, and want to open the second by clicking on a button on the first.</p>
<p>
If the host application is Internet Explorer, you must use the Hyperlink object's NavigateTo method to get from one document to another, as shown in the following code:</p>
<pre><code>Private Sub cmdGoTo_Click()
   ' Assuming the name of the
   ' destination is AxDoc2.vbd.
   UserDocument.HyperLink.NavigateTo _
      "file://c:\docs\AxDoc2.vbd"
End Sub
</code></pre>
<p>
On the other hand, Microsoft Binder operates on an entirely different metaphor. Instead of navigating to another document, you must add a section to the Binder. An example of the code is shown in the following:</p>
<pre><code>Private Sub cmdAddSection_Click()
   ' Use the same document: AxDoc2.
   UserDocument.Parent.Parent.Sections. _
      Add , "c:\docs\AxDoc2.vbd"
End Sub
</code></pre>
<h2>Looking Into the Target Application's Object Model</h2>
<p>
From the preceding two different methods shown, it becomes apparent that you cannot count on one method to get from one ActiveX document to another in every container. The question then becomes, "How do I discover the method for a target host application?"</p>
<p>
One way (besides documentation) to discover an application's methods is to use the Object Browser. For example, to explore the object model of Microsoft Binder, follow these steps:</p>
<p class=label>
<b>To discover the objects and methods of Microsoft Binder</b></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You must have Microsoft Office Binder 1.0 or later, which can be installed with Microsoft Office.
<ol>
<li>
On the <b>Project </b>menu, click <b>References</b>.<br><br></li>
<li>
In the scrolling list of available references, click <b>OLE Automation Binder 1.0 Type Library</b> (or <b>Microsoft Binder 8.0 Object Library </b>for Office ’97).<br><br></li>
<li>
Click <b>OK</b>.<br><br></li>
<li>
Press F2 to open the <b>Object Browser</b>.<br><br></li>
<li>
Click the <b>Project/Library Box</b>, and then click <b>Office Binder</b>.<br><br></li>
<li>
In the Classes List, click <b>Sections</b>.<br><br></li>
<li>
In the Members of List, click <b>Add</b>. You will now see the syntax of the Add method, which you can use to add the ActiveX document to the Sections collection.</li>
</ol>
<h2>Navigating Through the Object Model</h2>
<p>
You may have noticed that the Object Browser hasn't given you a complete guide to the object model. Compare the code:</p>
<pre><code>UserDocument.Parent.Parent.Sections.Add _
, "c:\docs\AxDoc2.vbd"
</code></pre>
<p>
with the information found in the Object Browser. The difference lies in the addition of "UserDocument.Parent.Parent" to the code.</p>
<p>
The discrepancy arises because the ActiveX document is itself "buried" lower within the object model. To Office Binder, the ActiveX document is just one more Section object in a Sections collection. Thus the code <code>TypeName(UserDocument.Parent)</code> returns "Section," while <code>TypeName(UserDocument.Parent.Parent)</code> returns "Binder."</p>
<p>
In order to navigate through the hierarchy to the top of the object model, the code uses the reference returned by the Parent property. However the code must navigate one final level — again using the Parent property. This results in the <code>Parent.Parent</code> code. The code then navigates back down to the Sections collection, culminating in the Add method.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To learn about the Object Browser, see "Finding Out About Objects," in "Programming With Objects," of the <i>Programmer's Guide</i>. For details about navigating through the Object Model, see "Navigating Object Models" in "Programming with Components," of the <i>Programmer's Guide</i>.</p>
</BODY>
</HTML>

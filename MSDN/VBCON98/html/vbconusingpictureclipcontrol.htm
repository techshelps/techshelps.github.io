<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the PictureClip Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingpictureclipcontrol"></a>Using the PictureClip Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingPictureClipControlC">
</object></p>
<p>
The PictureClip control stores multiple images that can be used by other Visual Basic controls. All images are contained in a single bitmap. Selected regions can then be 'clipped' from the bitmap and used with a PictureBox control to create animations, or with multiple PictureBox controls to create a toolbox, for instance.</p>
<p>
The PictureClip control can be used with any control that assigns a Picture object to a Picture property, such as the PictureBox, Image, and CommandButton controls.</p>
<p>
Storing multiple images in a single PictureClip control conserves Windows resources and speeds up retrieval of the images. The PictureClip control is similar to the ImageList control in this way; however, they differ in that all image resources in the PictureClip control must be contained in a single bitmap whereas the ImageList control is a collection of separate bitmaps.</p>
<h2>Possible Uses</h2>
<ul type=disc>
<li>
To create an image resource bitmap which stores all the images needed for an animation or a toolbox.</li>
</ul>
<h2>Creating a PictureClip Image</h2>
<p>
The first step in using a PictureClip control is creating the image resource bitmap. The PictureClip control only supports 16-color bitmap (.bmp) images. When creating a set of images, collect all the separate images and cut and paste them into a single bitmap, as shown below.</p>
<p class=label>
<b>A PictureClip control containing a resource bitmap</b></p>
<p>
<img src="avtct100.gif" border=0></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You need to make sure that each image is the same size as the others so that when individual images are retrieved into a PictureBox control, for example, they fill the space uniformly. In the example above, each image of the spinning top is a square of equal size.</p>
<h2>Loading the Resource Bitmap into PictureClip</h2>
<p>
After creating an image resource bitmap, load it into the PictureClip control. The PictureClip control has a Property Pages dialog box which allows the bitmap to be loaded into the control and the grid set by specifying the number of columns and rows.</p>
<p class=label>
<b>To load a resource bitmap into the PictureClip control at design time</b>
<ol>
<li>
Start a new project in Visual Basic.<br><br></li>
<li>
Add a PictureClip control to the form.<br><br></li>
<li>
From the <b>Properties</b> window of the PictureClip control select the <b>Custom</b> option or right-click on the control and select <b>Properties</b>. The <b>Property Pages</b> dialog box will open.<br><br></li>
<li>
Select the <b>Picture</b> tab and then click the <b>Browse</b> button to locate the bitmap. The selected bitmap is displayed in the <b>Preview</b> window.</li>
</ol>
<p class=label>
<b>Loading a resource bitmap into the PictureClip control</b></p>
<p>
<img src="avtct101.gif" border=0></p>
<h3>Loading the Resource Bitmap at Run Time</h3>
<p>
The resource image bitmap can also be loaded into the PictureClip control at run time using the Picture property, as in the following example:</p>
<pre><code>PictureClip1.Picture = LoadPicture("c:\Program _ 
   Files\Microsoft Visual _ 
   Basic\Samples\PicClip\Redtop.bmp")
' If you have installed the Visual Basic sample applications, the PicClip 
' project can be found in the \samples\VB98\ directory
</code></pre>
<h2>Retrieving Images from the PictureClip Control</h2>
<p>
Once you've created and loaded an image resource bitmap into the PictureClip control, you can determine how you want to retrieve each image.</p>
<p>
You can randomly select any portion of the image resource bitmap as the clipping region using the ClipX and ClipY properties to determine the upper-left corner of the clipping region and the ClipHeight and ClipWidth properties to define the area of the clipping region. The Clip property then contains the clipped region.</p>
<p>
You can divide the image resource bitmap into a specified number of rows and columns. The rows and columns create cells which can then be accessed using an index number. The cells are indexed beginning at 0 and increase from left to right and top to bottom using the GraphicCell property.</p>
<h3>Setting Rows and Columns at Design Time</h3>
<p>
Using the Property Pages dialog box, you can set the number of rows and columns at design time. In the example above, there are 18 red top images divided into 3 rows and 6 columns.</p>
<p class=label>
<b>To set the number of rows and columns at design time</b>
<ol>
<li>
From the Properties window of the PictureClip control select the Custom option or right-click on the control and select <b>Properties</b>. The <b>Property Pages</b> dialog box will open.<br><br></li>
<li>
Select the <b>General Properties</b> tab.<br><br></li>
<li>
Select the number of rows and columns that correspond to the images in the resource bitmap. Click <b>OK</b>.</li>
</ol>
<p class=label>
<b>Setting the number of rows and columns</b></p>
<p>
<img src="avtct102.gif" border=0></p>
<h4>Selecting Cells at Run Time</h4>
<p>
You use the GraphicCell property to specify which cell in the image resource bitmap of the PictureClip control you want to load into a PictureBox control. The following example loads a single image (one cell) into a PictureBox control in the Form_Load event procedure:</p>
<pre><code>Private Sub Form_Load()
   PictureClip1.Picture = LoadPicture("c:\Program _ 
      Files\Microsoft Visual _ 
      Basic\Samples\PicClip\Redtop.bmp")
   PictureClip1.Cols = 6
   PictureClip1.Rows = 3
   Picture1.ScaleMode = vbPixels
   Picture1.Picture = PictureClip1.GraphicCell(2)
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In Visual Basic, the default ScaleMode for forms and picture boxes is twips. Set ScaleMode to vbPixels for all controls that display pictures from a PictureClip control.</p>
<p>
If you previously defined the numbers of rows and columns using the PictureClip Property Pages, you can simply load the image into the PictureBox control with the GraphicCell property. If not, you must specify the number of rows and columns by using the Cols and Rows properties. To use the GraphicCell property you must define at least one column and row.</p>
<h3>Sample Application: Redtop.vbp</h3>
<p>
The Redtop.vbp sample application, which is listed in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory, builds on some of the examples shown above and demonstrates how to create a simple animation using the PictureClip control.</p>
</BODY>
</HTML>

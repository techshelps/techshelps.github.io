<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Format Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingformatobjects"></a>Format Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vafctFormat;vbconUsingFormatObjectsC">
</object></p>
<p>
Format objects allow you to format and unformat data passed between a database and a bound object. You can also use the traditional Format function to format your data, but format objects offer these advantages:
<ul type=disc>
<li>
The Format and Unformat events allow closer control over data formatting.<br><br></li>
<li>
You can set formats either through code or using the IDE; in either case when you use format objects you'll write less code.<br><br></li>
<li>
Format objects give you more formatting types.</li>
</ul>
<p>
Types of formatting available from format objects include the standard types supported by the Format function (currency, date/time, string) plus the types in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Formatting option</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%>Boolean</td>
<td width=75%>Specifies values displayed in the bound control when data read from the database is a Boolean true or false. Writes a Boolean true or false to the database when the data matches a specified value.</td>
</tr>
<tr valign=top>
<td width=25%>Binary</td>
<td width=75%>Allows any binary data to be read from and written to the database.</td>
</tr>
<tr valign=top>
<td width=25%>Object</td>
<td width=75%>Allows an object to be read from and written to the database.</td>
</tr>
<tr valign=top>
<td width=25%>Picture</td>
<td width=75%>Allows a picture to be read from and written to the database.</td>
</tr>
<tr valign=top>
<td width=25%>Checkbox</td>
<td width=75%>Values read from the database will determine the Value property for a checkbox. Checkbox Value property settings will determine true/false values written to the database.</td>
</tr>
</table><br>
<h2>Stepping Through the Process</h2>
<p>
You can set formatting options in code or using property pages available from the bound control's DataFormat property in the property window. When the bound control fetches a record from the database, formatting is applied according to properties of the StdDataFormat object, then the Format event is fired and data is displayed by the bound control.</p>
<p>
When data is written back to the database, the formatting you applied goes with it. In most cases this works fine, but if you use the Format property to apply complex formatting you may create strings your database cannot unformat. In these cases you need to unformat the data in the Unformat event before it is written to the database.</p>
<p>
<img src="vb3xwl2.gif" border=0></p>
<h2>Understanding the Object Hierarchy</h2>
<p>
Format objects include:
<ul type=disc>
<li>
StdDataFormat object<p class=tl>
This object provides the Format and Unformat events, and it lets you select format types and apply format strings.</P></li>
<li>
StdDataFormats collection<p class=tl>
Complex bound controls will usually need more than one StdDataFormat object. In this case the StdDataFormats collection gives you top-level access to the collection.</P></li>
<li>
DataValue object<p class=tl>
You can use the DataValue object in the Format and Unformat events to customize formatting beyond what is provided by the StdDataFormat object.</P></li>
<li>
DataFormat property<p class=tl>
The DataFormat property of the bound control sets or returns the StdDataFormat object.</P><p>
<img src="vb3xwl1.gif" border=0></P></li>
</ul>
</BODY>
</HTML>

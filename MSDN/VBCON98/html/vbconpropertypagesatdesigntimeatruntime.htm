<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Property Pages Work</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconpropertypagesatdesigntimeatruntime"></a>How Property Pages Work</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPropertyPagesAtDesignTimeAtRunTimeC">
</object></p>
<p>
Property pages look a lot like forms, and designing them is somewhat similar to designing forms. The way property pages work, however, is quite different from the way forms work.</p>
<p>
For example, when the Property Pages dialog box creates an instance of a property page, the Initialize event is the first event the PropertyPage object gets — just as it would be for a form. However, unlike a form, the PropertyPage object doesn’t get a Load event. The key event for PropertyPage objects is the SelectionChanged event.</p>
<p>
This topic examines the three things your PropertyPage object must do:
<ul type=disc>
<li>
In the SelectionChanged event, obtain the property values to be edited.<br><br></li>
<li>
Set the PropertyPage object’s Changed property whenever the user edits a property value.<br><br></li>
<li>
In the ApplyChanges event, copy the edited property values back to the selected control (or controls).</li>
</ul>
<h2>The SelectionChanged Event</h2>
<p>
The SelectionChanged event occurs when the property page is displayed, and when the list of currently selected controls changes.</p>
<p>
For example, after selecting an instance of your control and opening the Property Pages dialog box, a developer might realize that she needed to change the properties of two instances of your control. By clicking the second instance while holding down the CTRL key, she could add the second instance to the list of selected controls. Each of your property pages would then receive a SelectionChanged event.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;You should always treat the SelectionChanged event as if your property page is being loaded for the first time. As you’ll see, changing the selection fundamentally changes the state of the property page.</p>
<h3>Coding the SelectionChanged Event for a Single Control</h3>
<p>
The most important thing you need to do in the SelectionChanged event is to set the values of the controls that display property values for editing. For example, consider the General page for the VirtualVelociraptor control (originally shown in Figure 10.1):</p>
<p>
<img src="avtcm133.gif" border=0></p>
<p>
Suppose that the Age property of the VirtualVelociraptor control uses the following public Enum:</p>
<pre><code>Public Enum DinoAge
   vvHatchling
   vvJuvenile
   vvAdult
End Enum
</code></pre>
<p>
The SelectionChanged event of the property page might look like this:</p>
<pre><code>Private Sub PropertyPage_SelectionChanged()
   ' Place the value of the DinoName property for the
   '&nbsp;&nbsp; first selected control in the txtDinoName text
   '&nbsp;&nbsp; box for display and editing.
   txtDinoName = SelectedControls(0).DinoName
   ' Use the value of the Age property of the first 
   '&nbsp;&nbsp; selected control to select the appropriate
   '&nbsp;&nbsp; option button in the Age frame.
   optAge(SelectedControls(0).Age).Value = True
   ' (The code above depends on the fact that the
   '&nbsp;&nbsp; elements of the DinoAge Enum have the values 
   '&nbsp;&nbsp; 0, 1, and 2.)
End Sub
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;The Property Page Wizard will populate your property page with text box controls and check boxes (for Boolean properties), and generate default code for the SelectionChanged event.</p>
<h4>The SelectedControls Collection</h4>
<p>
The SelectedControls collection contains all the controls currently selected in the container the developer is working on. The collection may contain several instances of your control; if the property page is shared by more than one control in your control component, the collection may contain controls of multiple types.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You don’t need to worry about the collection containing controls other than your own — text boxes, for example — because the Property Pages dialog box only displays those pages that are used by <i>all</i> of the currently selected controls.</p>
<p>
For the moment, ignore the possibility that multiple controls might be selected. What the code in the SelectionChanged event shown above is doing is taking the value of each property for the <i>first</i> control in the collection and assigning it to the appropriate control on the property page.</p>
<p>
In the case of a single selected control, this places all of the control’s property values in fields where the user can edit them.</p>
<h4>Different Ways to Edit Properties</h4>
<p>
Instead of showing the property value of the Age property as a set of option buttons, you could use a drop-down list showing the elements of the enumeration:</p>
<p>
<img src="avtcm134.gif" border=0></p>
<p>
The drop-down list takes up less space than the option buttons did (an advantage that grows larger as the number of possible values increases), and it shows the names of the constants that would be used in code.</p>
<p>
The following code fragment shows how you might set up such a list.</p>
<pre><code>Private Sub PropertyPage_SelectionChanged()
   txtDinoName = SelectedControls(0).DinoName
   ' Create a drop-down list containing the values and
   '&nbsp;&nbsp; names of the Enum elements for the Age 
   '&nbsp;&nbsp; property, and select the one that corresponds
   '&nbsp;&nbsp; to the current value of the Age property.
   cboAge.AddItem vvHatchling &amp; " - vvHatchling"
   cboAge.AddItem vvJuvenile &amp; " - vvJuvenile"
   cboAge.AddItem vvAdult &amp; " - vvAdult"
   cboAge.ListIndex = SelectedControls(0).Age
   ' (The index of each Enum element in the drop-down
   '&nbsp;&nbsp; list is the same as the element's value.)
End Sub
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;While you can choose any editable representation that makes sense for a property, remember that the more space each property takes up, the more tabs you’ll need. Minimizing the number of tabs makes the property pages for your control easier to use. For most enumerations, a drop-down list will make the most efficient use of space.</p>
<h3>Coding the SelectionChanged Event for Multiple Controls</h3>
<p>
To determine whether multiple controls are selected, you can test the Count property of the SelectedControls collection to see whether it’s greater than one.</p>
<p>
In order to deal with multiple selected control instances, it’s useful to divide the properties of your control into two groups:
<ul type=disc>
<li>
Properties that can sensibly be set to the same value for multiple controls. For example, it’s very convenient to be able to set the BackColor property of several Label controls to the same value.<br><br></li>
<li>
Properties that do not make sense to set to the same value for multiple controls. For example, it’s not particularly helpful to set the Caption property of several Label controls to the same value. In fact, it might be quite annoying to the user to do so by accident.</li>
</ul>
<p>
One approach you might take in your SelectionChanged event is to disable the edit fields for properties of the second sort whenever multiple controls are selected. In the discussion of the ApplyChanges event, an alternate technique will be shown.</p>
<h4>Shared Property Pages</h4>
<p>
If you have multiple controls in your project, and two such controls share a property page, make sure that you provide error trapping for the code that reads the property values. If the first control selected doesn’t include all of the properties shown on the page, an error will occur when you try to read that property value.</p>
<h2>Enabling the Apply Button by Setting Changed = True</h2>
<p>
In order to tell Visual Basic that the user has edited one or more properties on a property page, you must set the PropertyPage object’s Changed property to True. Because there’s no way to know which property a user might decide to change, you must do this for every property displayed on the page.</p>
<p>
For example, to notify the PropertyPage of changes in the DinoName or Age properties from the previous example, you would use the following code:</p>
<pre><code>Private Sub txtDinoName_Changed()
   Changed = True
End

Private Sub cboAge_Change()
   Changed = True
End
</code></pre>
<p>
Note that this is exactly the same as coding <code>PropertyPage.Changed = True</code>.</p>
<p>
Notifying the PropertyPage object that values have changed enables the Apply button on the Property Pages dialog box, and causes the ApplyChanges event to occur when the Apply button is pressed, when the user changes tabs, or when the dialog box is dismissed.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You may wish to keep track of which properties have changed, so that you don’t have to write them all out.</p>
<h2>The ApplyChanges Event</h2>
<p>
The second most important event in a PropertyPage object is the ApplyChanges event. In this event you copy the edited property values back to the currently selected controls.</p>
<p>
The ApplyChanges event occurs when the user:
<ul type=disc>
<li>
Clicks the OK button to dismiss the dialog.<br><br></li>
<li>
Clicks the Apply button.<br><br></li>
<li>
Selects another tab in the Property Pages dialog box.</li>
</ul>
<p>
The following code for the ApplyChanges event assumes that the SelectionChanged event was coded using a drop-down list for the Age property, as shown earlier.</p>
<pre><code>Private Sub PropertyPage_ApplyChanges()
   Dim vv As VirtualVelociraptor
   ' Set the DinoName property of the FIRST selected
   '&nbsp;&nbsp; control only.
   SelectedControls(0).DinoName = txtDinoName
   
   For Each vv In SelectedControls
      ' Transfer the value currently selected in the
      '&nbsp;&nbsp; drop-down list for the DinoAge property to
      '&nbsp;&nbsp; all of the selected controls.
      vv.DinoAge = cboAge.ListIndex
      ' (The code above works because the value of 
      '&nbsp;&nbsp; each of the three elements of the Enum is
      '&nbsp;&nbsp; the same as its index number in cboAge.)
   Next
End Sub
</code></pre>
<p>
Because it generally doesn’t make sense to give all of the virtual velociraptors the same name, the DinoName property is applied only to the first selected control. The Age property, on the other hand, is applied to all the selected controls.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;As the control author, it’s up to you to decide which properties make sense to set for multiple selected controls.</p>
<h3>Dealing with Errors in ApplyChanges</h3>
<p>
In the case shown above, there’s no chance of error in the ApplyChanges event. The text property is a simple string, and the drop-down list limits user input for the Age property to only those values that are valid.</p>
<p>
If your property page allows the user to enter values that may be rejected by the Property Let (or Property Set) procedure, you should use error trapping in the ApplyChanges event. The simplest scheme is to use On Error Resume Next, and test Err.Number after each property that may raise an error.</p>
<p>
When an error occurs:
<ul type=disc>
<li>
Stop processing the ApplyChanges event.<br><br></li>
<li>
Display an error message, so the user understands what went wrong.<br><br></li>
<li>
Set the focus to the property that caused the error.<br><br></li>
<li>
Set the Changed property of the PropertyPage object to True.<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Setting <code>Changed = True</code> performs two functions. First, it re-enables the Apply button. Second, it prevents the Property Pages dialog box from being dismissed if the user clicked OK. <i>This is the only way to prevent the dialog box from closing.</i></p></li>
</ul>
</BODY>
</HTML>

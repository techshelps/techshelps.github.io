<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Form Description</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconformdescription"></a>Form Description</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconFormDescriptionC">
</object></p>
<p>
The form description starts with a Begin statement and ends with an End statement. The syntax of the Begin statement is:</p>
<p>
<b>Begin</b> <b>VB</b>.{<b>Form</b>|<b>MDIForm</b>} <i>formname</i></p>
<p>
The End statement determines where the form description ends and the set of form attributes begins. Without the End statement, Visual Basic tries to read the attributes as if it were describing controls and properties of the form, thus producing errors.</p>
<p>
Between the Begin Form and End statements are the properties of the form itself, followed by descriptions of each control on the form. Figure A.2 shows the nested structure of the form description in greater detail.</p>
<p class=label>
<b>Figure A.2&nbsp;&nbsp;&nbsp;Nested structure of the form description</b></p>
<p>
<img src="vb29iv1.gif" border=0></p>
<h2>Control Blocks</h2>
<p>
A <i>control block</i> consists of the text in the form description that defines the properties of an individual control. Like the form description itself, control blocks start with a Begin statement and end with an End statement. The syntax for a Begin statement of a control block is as follows:</p>
<p>
<b>Begin</b> <i>controlclass</i>.<i>controltype</i> <i>controlname</i></p>
<p>
The properties for the control appear between the Begin statement and the End statement.</p>
<h3>Control-Block Order</h3>
<p>
The order of the control blocks determines the z-order of the controls. <i>Z-order</i> is a relative ordering that determines how controls overlap each other on a form. The first control in the form description establishes the bottom of the z-order. Controls that appear later in the form description are higher in the z-order and therefore overlap controls that are lower in the z-order.</p>
<h2>Embedded Control Blocks</h2>
<p>
Some controls can contain other controls. When a control is contained within another control, its control block is embedded in the control block of the container. You can embed control blocks inside:
<ul type=disc>
<li>
Frames<br><br></li>
<li>
Picture boxes<br><br></li>
<li>
Menus<br><br></li>
<li>
Custom controls, depending on their purpose</li>
</ul>
<p>
Embedded controls are commonly used to place option buttons inside a frame. Visual Basic must have all the information necessary for a container before adding any contained controls, so properties for a control must come before any embedded control blocks. Visual Basic ignores any properties within a control block that appear after embedded control blocks.</p>
<h2>Menu Controls</h2>
<p>
Menu controls must appear together at the end of the form description, just before the Attributes section begins. When Visual Basic encounters a menu control during the loading of an ASCII form, it expects to find all the menu controls together. Once it detects a nonmenu control following one or more menu controls, Visual Basic assumes there are no more menu controls on the form and ignores any other menu controls it encounters during the loading of that form.</p>
<h3>Shortcut Keys</h3>
<p>
Shortcut keys are keys you use to activate a menu control. The ASCII form uses the same syntax as the SendKeys statement to define key combinations: "+" = SHIFT, "^" = CTRL, and "{F<i>n</i>}" = function key where <i>n</i> is the key number. Alphabetic characters represent themselves. Shortcut key syntax is:</p>
<p>
Shortcut = ^{F4}' &lt;CTRL&gt;&lt;F4&gt;</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Top-level menus cannot have a shortcut key.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "SendKeys Statement."</p>
<h2>Comments in the Form Description</h2>
<p>
You can add comments to the form description. The single quotation mark (<code>'</code>) is the comment delimiter.</p>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;Comments and formatting in the form description are not retained when you save the form in Visual Basic. However, comments and indents in the code section of the form file are preserved. </p>
</BODY>
</HTML>

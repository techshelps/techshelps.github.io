<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Shared CoffeeMonitor</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingsharedcoffeemonitor"></a>Using the Shared CoffeeMonitor</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingSharedCoffeeMonitorC">
</object></p>
<p>
This procedure shows how to use the Connector object to get a reference to a single shared CoffeeMonitor object.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX EXE. It begins with the topic <a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a>.</p>
<p class=label>
<b>To receive the CoffeeReady event in CoffeeWatch</b>
<ol>
<li>
Switch to the instance of Visual Basic that has the CoffeeWatch project loaded.<br><br></li>
<li>
In the <b>Project Explorer</b> window of the CoffeeWatch project, right-click <b>Form1</b> to open the context menu, and select <b>View Code</b> to open the code window. Modify the code in the Declarations section as follows:<pre><code>Option Explicit
Private WithEvents mwcmnTest As CoffeeMonitor
Private mcctTest As Connector
</code></pre>
<p class=tl>
The new variable, <code>mcctTest</code>, will hold a reference to the Connector object. The letters ‘cct’ have been chosen to indicate a variable of type Connector.</P></li>
<li>
Change the code in the Load event of Form1, so that it first creates a Connector object, and then obtains a reference to the shared CoffeeMonitor object using the Connector’s CoffeeMonitor property.<pre><code>Private Sub Form_Load()
 &nbsp; Set mcctTest = New Connector
 &nbsp; Set mwcmnTest = mcctTest.CoffeeMonitor
End Sub
</code></pre>
</li>
<li>
Press f5 to run the project.<p class=tl>
Once again, you’ll get a notification from Coffee every ten seconds.</P></li>
<li>
Close the CoffeeWatch form to return to design mode.<br><br></li>
<li>
Switch to the Coffee project, and click the Break button (or select <b>Break</b> from the <b>Run</b> menu) to enter break mode. In the <b>Immediate</b> window, type:<pre><code>?TypeName(gCoffeeWatch)
</code></pre>
<p class=tl>
The result is Nothing, showing that the shared CoffeeMonitor object was released.</P></li>
<li>
Click the <b>End</b> button to return to design mode.</li>
</ol>
<p>
You may find it interesting to run the Coffee project again, then make CoffeeWatch.exe and run multiple instances of it. (You must run the Coffee project first, so that its type library information is available.) You can set break points in Coffee, to observe the workings of the events and properties of its objects while it provides objects to several clients.</p>
<h2>A Bug in Connector</h2>
<p>
There’s a bug in the Connector class. If all clients release their Connector objects (but keep their references to the shared CoffeeMonitor), the last Connector will release the global reference. At that point, any client that creates a Connector will cause a second CoffeeMonitor to be created — because the new Connector will find that the global variable <code>gCoffeeWatch</code> contains Nothing. If CoffeeMonitor really used the serial port, this could cause a conflict.</p>
<p>
The sample applications Coffee2.Vbp and CoffWat2.Vbp explore a possible solution to this bug.</p>
<h2>Asynchronous Call-Back Methods</h2>
<p>
An alternate technique for notifying clients is the asynchronous call-back method, discussed in "Asynchronous Notifications Using Call-Back Methods." Call-backs are somewhat more complicated to implement, but they allow the component to receive return values and errors raised by the client, and they have a slight performance advantage.</p>
<p>
The sample applications Coffee2.Vbp and CoffWat2.Vbp include an alternate implementation of CoffeeReady using call-backs.</p>
<h2>Multithreading</h2>
<p>
Code components with no user interface can be marked for unattended execution, which is to say they can have no user interaction. For out-of-process components this option also enables multithreading, as explained in "Scalability and Multithreading," in "Building Code Components."</p>
<p>
The sample application MTCoffee.vbp demonstrates a simple multithreading scenario.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The basics of raising and handling events are introduced in "Adding Events to a Class," in "Programming with Objects" in the <i>Visual Basic Programmer’s Guide.</i> Events in components are discussed in "Adding Events to Classes" in "General Principles of Component Design."</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX EXE.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>To</b></td>
<td class=label width=63%><b>See</b></td>
</tr>
<tr valign=top>
<td width=37%>Go to the next step</td>
<td width=63%><a href="vbconcreatingtestingexecutable.htm">Creating and Testing the Coffee Executable</a></td>
</tr>
<tr valign=top>
<td width=37%>Start from the beginning</td>
<td width=63%><a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a></td>
</tr>
</table><br>
</BODY>
</HTML>

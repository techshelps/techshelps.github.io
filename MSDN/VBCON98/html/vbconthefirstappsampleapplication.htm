<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Firstapp Sample Application</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconthefirstappsampleapplication"></a>The Firstapp Sample Application</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheFirstappSampleApplicationC">
</object></p>
<p>
Visual Basic provides you with a wealth of tools beyond the ones used in this first application, so you'll soon use many other features to manage and customize your applications. Reviewing sample applications can be an excellent way to learn more about Visual Basic. The following example illustrates how easy it can be to create a useful application in Visual Basic.</p>
<p>
The Firstapp application demonstrates how a <i>data control</i> and a <i>grid control</i> can be used to display a table of information from a database. Visual Basic makes it easy to access database information from within your application. The data control provides the ability to navigate through the database <i>recordset</i>, synchronizing the display of records in the grid control with the position in the recordset.</p>
<p>
The application consists of a data control, a MSFlexGrid control, a list box control, and two command buttons. The grid displays a table of information about products retrieved from the Northwind database. As the user selects an item by using the navigation buttons on the data control, the name of the selected product is displayed in the data control. The user can also add items to a "shopping list" in the list box control by double-clicking the current selection in the grid.</p>
<p>
To add items to the list box, you use the AddItem method. (A <i>method</i> is a Visual Basic function that acts on a particular object, in this case a ListBox object.) The syntax for specifying a method (<i>object.method</i>) is similar to the syntax for setting a property (<i>object.property</i>). The AddItem method allows you to dynamically add items to the list box while the application is running. Conversely, the Clear method is used to remove all items from the list box.</p>
<p>
<b><B>For More Information</B>&nbsp;&nbsp;&nbsp;</b>To learn more about methods, see "Understanding Properties, Methods, and Events" in "Forms, Controls, and Menus."</p>
<h2>Creating a Project</h2>
<p>
You begin creating this application by choosing New Project from the File menu, then selecting Standard EXE in the New Project dialog box (when you first start Visual Basic, the New Project dialog box is presented). Visual Basic creates a new <i>project</i> and displays a new form. To draw the interface, you use a data control, a MSFlexGrid control, a list box control, and two command buttons. The MSFlexGrid control isn't in the default toolbox, so you'll need to add it:</p>
<p class=label>
<b>To add a control to the toolbox</b>
<ol>
<li>
Select <b>Components</b> from the context menu for the toolbox. (You can right-click within the toolbox window to display the context menu.)<p class=tl>
The <b>Components<B> </B></b>dialog box will be displayed.</P></li>
<li>
Find the MSFlexGrid (Microsoft Flex Grid 6.0) in the <b>Controls</b> list box and select the check box to its left.<br><br></li>
<li>
Click the <b>OK</b> button.</li>
</ol>
<p>
The icon for the <b>MSFlexGrid</b> control will appear in the toolbox.</p>
<p>
Use the Toolbox to draw a data control, an MSFlexGrid control, a list box control, and two command buttons on the form. If you don't remember how, check out "Creating the Interface" earlier in this chapter.</p>
<h4>Setting Properties</h4>
<p>
In the Properties window, set properties for the objects according to the following table. Use the default settings for all other properties.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Object</b></td>
<td class=label width=34%><b>Property</b></td>
<td class=label width=35%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=31%>Form</td>
<td width=34%>Caption</td>
<td width=35%>Products</td>
</tr>
<tr valign=top>
<td width=31%>Data1</td>
<td width=34%>DatabaseName<br>
RecordSource</td>
<td width=35%><i>path</i> \Nwind.mdb<br>
Products</td>
</tr>
<tr valign=top>
<td width=31%>MSFlexGrid1</td>
<td width=34%>DataSource</td>
<td width=35%>Data1</td>
</tr>
<tr valign=top>
<td width=31%>Command1</td>
<td width=34%>Caption</td>
<td width=35%>Clear</td>
</tr>
<tr valign=top>
<td width=31%>Command2</td>
<td width=34%>Caption</td>
<td width=35%>Exit</td>
</tr>
</table><br>
<p>
The DatabaseName property of the data control must include the actual path to the database. By default, the Nwind.mdb database is installed in the same directory as Visual Basic. When you select the DatabaseName property in the Properties window, you can click the button to the right of the property to display a standard File Open dialog box to browse for the file. Once the DatabaseName property has been set, the RecordSource property in the Properties window will contain a list of tables or recordsets for the selected database. Setting the DataSource property of the MSFlexGrid control to Data1 automatically links the grid to the data control.</p>
<h2>Writing Event Code</h2>
<p>
All the code for the application is contained in the Command1_Click, Command2_Click, Data1_Reposition, and MSFlexGrid1_DblClick event procedures. Double-click the form or control to display the Code window, and then type the code for each event procedure.</p>
<p>
Add this code to the Command1_Click event procedure to clear the list box when the user clicks the button:</p>
<pre><code>Private Sub Command1_Click ()
   List1.Clear               ' Clears the list box.
End Sub
</code></pre>
<p>
In the above statement, you are invoking the Clear method of the list box, List1. The Clear method deletes the contents of the list box.</p>
<p>
Add this code to the Command2_Click event procedure to unload the form from memory and end the application:</p>
<pre><code>Private Sub Command2_Click ()
   Unload Form1
   End                     ' Ends application.
End Sub
</code></pre>
<p>
In the above procedure, the first statement invokes the Unload event for the form. If you needed to perform a function at shutdown, such as saving a file, you could place that code in the form's Unload event procedure. The second statement calls the End function, which ends the application.</p>
<p>
Add this code to the Data1_Reposition event procedure to update the caption each time a record is selected:</p>
<pre><code>Private Sub Data1_Reposition ()
   Data1.Caption = Data1.Recordset("ProductName")
End Sub
</code></pre>
<p>
In the above statement, you are assigning the value on the right (the contents of the Title field in the Recordset of the data control) to the property on the left (the Caption property of the data control object).</p>
<p>
Add this code to the MSFlexGrid_DblClick event procedure to add an item to the list box when the user double-clicks a selected row:</p>
<pre><code>Private Sub MSFlexGrid1_DblClick ()
   List1.AddItem MSFlexGrid.Text
End Sub
</code></pre>
<p>
In the above statement, you are invoking the AddItem method of the list box (List1). The text to be added to the list box is contained in the <i>argument</i> of the method, in this case, the value of the title field in the recordset of the data control. Passing a value to an argument is similar to assigning a value to a property; unlike the assignment statement, the equal sign isn't required.</p>
<h2>Saving a Project</h2>
<p>
You finish your work on the application by choosing Save Project from the File menu. Visual Basic will prompt you separately to save the form and then the project. One possible name for the project is "Northwind Shopping List." Both Windows 95 and Windows NT allow you to use file names up to 255 characters in length, and file names can include spaces. Older versions of Microsoft Windows limited you to file names of eight characters, with a three-character extension.</p>
<h2>Enhancing Your Application</h2>
<p>
You have just completed your first Visual Basic application: one that performs a simple but useful function. You can use this application as a basis for adding similar functionality in your own applications, substituting your own data instead of Nwind.mdb. Of course, to make this application truly useful, you might want to add functionality to save or print the contents of the list box, to add additional information such as price and availability, and even to gather credit card information and transmit an order across the Internet. As you continue on through the rest of the <i>Programmer's Guide</i>, you will find examples of doing all that and a lot more.</p>
</BODY>
</HTML>

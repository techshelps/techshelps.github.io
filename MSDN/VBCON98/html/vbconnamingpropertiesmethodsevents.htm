<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Naming Properties, Methods, and Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconnamingpropertiesmethodsevents"></a>Naming Properties, Methods, and Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconNamingPropertiesMethodsEventsC">
</object></p>
<p>
The properties, methods, and events you add to a class module define the interface that will be used to manipulate objects created from the class. When naming these elements, and their arguments, you may find it helpful to follow a few simple rules.
<ul type=disc>
<li>
Use entire words whenever possible, as for example SpellCheck. Abbreviations can take many forms, and hence can be confusing. If whole words are too long, use complete first syllables.<br><br></li>
<li>
Use mixed case for your identifiers, capitalizing each word or syllable, as for example ShortcutMenus or AsyncReadComplete.<br><br></li>
<li>
Use the correct plural for collection class names, as for example Worksheets, Forms, or Widgets. If the collection holds objects with a name that ends in "s," append the word "Collection," as for example SeriesCollection.<br><br></li>
<li>
Use either verb/object or object/verb order consistently for your method names. That is, use InsertWidget, InsertSprocket, and so on, or always place the object first, as in WidgetInsert and SprocketInsert.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;While it’s possible to use an underscore character in a property name, an underscore in an event name will cause an error. The underscore character is used in Event procedures to separate the event name from the object name. For this reason, it’s best to avoid the underscore character altogether when naming properties, methods, and events.</p>
<p>
One of the chief benefits of programming with objects is code reuse. Following the rules above, which are part of the ActiveX guidelines for interfaces, makes it easier to remember the names and purposes of properties, methods, and events.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;If you have the Professional or Enterprise Edition of Visual Basic, see the expanded list in "What's In a Name?" in "General Principles of Component Design" in <i>Creating ActiveX Components</i> in the <i>Component Tools Guide.</i></p>
</BODY>
</HTML>

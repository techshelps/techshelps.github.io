<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Robust Controls</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconrobustnessrobustnessrobustness"></a>Creating Robust Controls</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconRobustnessRobustnessRobustnessC">
</object></p>
<p>
For your user, the three most important things about an ActiveX control are robustness, robustness, and robustness. Because a control component runs in the process space of an application that uses it, fatal errors in your controls are also fatal errors for the application.</p>
<p>
The following lists of DOs and DON'Ts are by no means inclusive. They only provide a starting point for producing robust controls.</p>
<h2>Error Handling</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>DO</b></td>
<td class=label width=50%><b>DON'T</b></td>
</tr>
<tr valign=top>
<td width=50%>Provide thorough error handling in every event procedure you put code in<i>,</i> whether the event belongs to the UserControl or to a constituent control.</td>
<td width=50%>Raise errors in any event procedures.</td>
</tr>
<tr valign=top>
<td width=50%>In particular, provide thorough error handling in the UserControl's Paint, Resize, and Terminate events.</td>
<td width=50%></td>
</tr>
</table><br>
<p>
Unhandled errors in event procedures will be fatal to your control component, and the application using it, because there will never be a procedure on the call stack that can handle the errors.</p>
<p>
It's perfectly safe to raise errors in property procedures and methods, because properties and methods are always invoked by other procedures, and errors you raise can be handled by the user in those procedures.</p>
<h3>Object Models</h3>
<p>
If your control component includes dependent objects, such as a collection of ToolbarButton objects for a Toolbar control:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>DO</b></td>
<td class=label width=50%><b>DON'T</b></td>
</tr>
<tr valign=top>
<td width=50%>Create wrapper classes for collections of such objects, as described in "General Principles of Component Design" and "Standards and Guidelines."</td>
<td width=50%>Use the Collection object without a wrapper class. The Collection object accepts any variant, meaning your users could accidentally insert objects that might cause errors in your control's code.</td>
</tr>
<tr valign=top>
<td width=50%>Use property procedures for collection properties.</td>
<td width=50%>Implement such properties as simple data members.</td>
</tr>
</table><br>
<p>
For example, if you create a ToolbarButtons class as the wrapper class for a collection of ToolbarButton objects, add the property to your UserControl object as a read-only property procedure:</p>
<pre><code>Private mToolbarButtons As ToolbarButtons

Property Get ToolbarButtons() As ToolbarButtons
   Set ToolbarButtons = mToolbarButtons
End Property

Private Sub UserControl_Initialize()
   Set mToolbarButtons = New ToolbarButtons
End Sub
</code></pre>
<p>
By contrast, the following implementation allows your user to accidentally set ToolbarButtons to Nothing, destroying the collection:</p>
<pre><code>Public ToolbarButtons As New ToolbarButtons
</code></pre>
<h3>Implementing Properties</h3>
<p>
<i>DO implement properties using property procedures, instead of public data members.</i></p>
<p>
You can use Property Let to validate property values. If you use public data members, you'll have to check the data every time you use it; and if that happens in an event procedure, you won't be able to raise an error without bringing down the application that's using your control component.</p>
<p>
In addition, your properties will not work correctly in the Properties window and Property Pages dialog box, as discussed in "Adding Properties to Your Control," earlier in this chapter.</p>
</BODY>
</HTML>

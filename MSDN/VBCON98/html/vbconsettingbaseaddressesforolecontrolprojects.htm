<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Base Addresses for In-Process Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconsettingbaseaddressesforolecontrolprojects"></a>Setting Base Addresses for In-Process Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconSettingBaseAddressesForOLEControlProjectsC">
</object></p>
<p>
In 32-bit operating systems, the code pages for an in-process component (.dll or .ocx file) are shared between processes that use the component, as long as the component can load at its <i>base address</i>. Thus three clients could be using the controls in your component, but the code would be loaded into memory only once.</p>
<p>
By contrast, if the memory locations used by an in-process component conflict with memory locations used by other in-process components or by the executable, the component must be <i>rebased</i> to another logical memory location in the executable’s process space.</p>
<p>
Rebasing requires the operating system to dynamically recalculate the logical memory locations where code and data are loaded. This recalculation slows down the load process, and code that is dynamically relocated generally <i>cannot be shared between executables</i>.</p>
<p>
You can greatly improve your component’s memory use by choosing a good base address.</p>
<h2>Setting the Base Address</h2>
<p>
To enter the base address for your component, open the Project Properties dialog box and select the Compile tab. The address is entered in the DLL Base Address box, as an unsigned decimal or hexadecimal integer.</p>
<p>
The default value is &amp;H11000000 (285,212,672). If you neglect to change this value, your component will conflict with every other in-process component compiled using the default. Staying well away from this address is recommended.</p>
<h2>Choosing a Base Address</h2>
<p>
Choose a base address between 16 megabytes (16,777,216 or &amp;H1000000) and two gigabytes (2,147,483,648 or &amp;H80000000).</p>
<p>
The base address must be a multiple of 64K. The memory used by your component begins at the initial base address and is the size of the compiled file, rounded up to the next multiple of 64K.</p>
<p>
Your program cannot extend above two gigabytes, so the maximum base address is actually two gigabytes minus the memory used by your component.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Executables will usually load at the 4 megabyte logical address. The region below 4 megabytes is reserved under Windows 95, and regions above two gigabytes are reserved by both Windows 95 and Windows NT.</p>
<h2>Use a Good Random Number Generator</h2>
<p>
Because there is no way to know what base addresses might be chosen by other in-process components your users might employ, the best practice is to choose an address at random from the indicated range, and round it up to the next multiple of 64K.</p>
<p>
If your company produces many in-process components, you may wish to randomly calculate the base address of the first, and then arrange the others above or below the first, thus guaranteeing at least that your company’s components will not have memory conflicts.</p>
</BODY>
</HTML>

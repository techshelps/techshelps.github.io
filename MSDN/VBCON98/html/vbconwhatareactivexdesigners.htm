<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What Are ActiveX Designers?</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconwhatareactivexdesigners"></a>What Are ActiveX Designers?</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconWhatAreActiveXDesignersC">
</object></p>
<p>
ActiveX designers can provide visual interfaces for tasks that otherwise might require a great deal of code. For example, the UserConnection designer included in the Enterprise Edition of Visual Basic provides visual tools for defining complex database queries. At run time, these queries can be invoked with very little code.</p>
<h2>Similarities between ActiveX Designers and Built-in Designers</h2>
<p>
ActiveX designers are like form designers in the following ways:
<ul type=disc>
<li>
ActiveX designers produce classes from which you can create objects. These classes appear in the Project window, just like form classes.<br><br></li>
<li>
Each class you create with an ActiveX designer has its own code module, in which you can write code for the event procedures provided by the designer.<br><br></li>
<li>
You can customize a class, by adding your own properties, methods, and events to the ones provided by the ActiveX designer.<br><br></li>
<li>
The objects created from classes you design can have different characteristics at design time and run time.<br><br></li>
<li>
An ActiveX designer's design window is fully integrated into the development environment. It can be sized and arranged just like built-in design windows.<br><br></li>
<li>
You can add as many instances of an ActiveX designer to your project as you need, just as you can add as many form designers as you need.</li>
</ul>
<p>
Figure 9.14 compares the built-in Visual Basic form designer with the UserConnection Designer, an ActiveX designer included in the Enterprise Edition of Visual Basic.</p>
<p class=label>
<b>Figure 9.14&nbsp;&nbsp;&nbsp;An ActiveX designer and a built-in Visual Basic designer</b></p>
<p>
<img src="avp09003.gif" border=0></p>
<h2>Comparing ActiveX Designer Classes to other Visually Designed Classes</h2>
<p>
ActiveX designers are extremely flexible. Some, like the UserConnection designer, create classes whose run-time instances are programmable, but not visible. Others, like the Microsoft Forms designer used by Microsoft Office, produce visible objects similar to Visual Basic forms.</p>
<p>
ActiveX designers that have visible run-time components may be able to host ActiveX controls. In effect, they become alternate forms packages, which can be used in addition to Visual Basic's native forms.</p>
<p>
The following list compares classes produced with ActiveX designers to those produced with built-in Visual Basic designers.
<ul type=disc>
<li>
If an object created from an ActiveX designer class is visible at run time, it has its own window. It is not contained within another form, as ActiveX controls are.<br><br></li>
<li>
Like form classes, but unlike ActiveX controls, the classes produced by ActiveX designers are private classes. If you're using the Professional or Enterprise Edition of Visual Basic to create ActiveX components, you cannot declare public methods that use these classes as argument types or return types.<p class=tl>
For example, the following method declarations produce compile-time errors if they appear in a public class:</P><pre><code>Public Function A() As UseConnection1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Error
Public Sub B(CallBack As UseConnection1)&nbsp;&nbsp;&nbsp; 'Error
</code></pre>
<p class=atl>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;Although it is possible to pass references to private objects outside your project, by declaring return values As Object, this is very bad practice, and may destabilize your program. For more information, see <i>Creating ActiveX Components</i> in the <i>Component Tools Guide.</i></p></li>
</ul>
<h2>Using ActiveX Designer Objects at Run Time</h2>
<p>
Like the built-in form designer, ActiveX designers are available only in the development environment. Once you make your project into an executable, it only uses the ActiveX designer's run-time .dll. This may be much smaller than the design-time .dll, because it doesn't include the visual design tool. Figure 9.15 illustrates this concept.</p>
<p class=label>
<b>Figure 9.15&nbsp;&nbsp;&nbsp;Designer components in memory</b></p>
<p>
<img src="avp09004.gif" border=0></p>
<p>
As noted earlier, ActiveX designers may produce classes whose objects are not visible at run time. The UserConnection designer shown in Figure 9.14 is an example. The UserConnection designer produces classes whose objects manage connections to SQL databases at run time. There is no reason for these objects to be visible at run time.</p>
<p>
To use a class created with the UserConnection designer, declare a variable of the class type and create an instance of the class. For example, if you added a UserConnection designer and set its Name property to GeneralLedger, you could create a GeneralLedger object as shown in the following code fragment:</p>
<pre><code>' Global variable in a standard module, to keep a 
' reference to the GeneralLedger object.
Public gGeneralLedger As GeneralLedger

' Code in a Form module to create the GeneralLedger
' object and establish a database connection.
Private Sub Command1_Click()
   Set gGeneralLedger = New gGeneralLedger
   gGeneralLedger.EstablishConnection
   ' (Code that uses the object.)
End Sub
</code></pre>
<h2>Creating ActiveX Designers</h2>
<p>
You can use the ActiveX Designer Software Development Kit to create new ActiveX designers for use with Visual Basic. The SDK includes full instructions and sample code. You can find it on the Microsoft Development Network under the heading "SDK Documentation."</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The ActiveX Designer SDK requires a C++ compiler, such as Microsoft Visual C++. ActiveX designers cannot be written using Visual Basic.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Procedures for incorporating ActiveX designers in your project are provided in "Adding an ActiveX Designer to the Project Menu" and "Inserting a New Instance of an ActiveX Designer."</p>
</BODY>
</HTML>

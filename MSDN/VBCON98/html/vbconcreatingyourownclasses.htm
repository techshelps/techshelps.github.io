<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Your Own Classes</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingyourownclasses"></a>Creating Your Own Classes</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingYourOwnClasses_C">
</object></p>
<p>
If you're an experienced programmer, you already have a library of useful functions you've written over the years. Objects don't replace functions — you'll still write and use utility functions — but they provide a convenient, logical way to organize procedures and data.</p>
<p>
In particular, the classes from which you create objects combine data and procedures into a unit. The following topics explain how this increases the robustness of your code, and how it leads to new ways of programming.
<ul type=disc>
<li>
<a href="vbconclassmodulesputtingdatatypesprocedurestogether.htm">Classes: Putting User-Defined Types and Procedures Together</a>&nbsp;&nbsp;&nbsp;Classes are user-defined types with an attitude. Encapsulation puts code and data in the same module, giving rise to objects that can protect and validate their own data.<br><br></li>
<li>
<a href="vbconcustomizingformclasses.htm">Customizing Form Classes</a>&nbsp;&nbsp;&nbsp;You've been creating classes for years — every time you designed a form. This has interesting consequences for form design.<br><br></li>
<li>
<a href="vbconclassmodulestepbystep.htm">Class Module Step by Step</a>&nbsp;&nbsp;&nbsp;A short introduction to class modules, including class creation, creating objects from classes, and the rules of object lifetime.<br><br></li>
<li>
<a href="vbcondebuggingclassmodules.htm">Debugging Class Modules</a>&nbsp;&nbsp;&nbsp;Describes the Break in Class Module error trapping option, plus the ALT+F8 and ALT+F5 keystrokes for stepping or running past errors.<br><br></li>
<li>
<a href="vbconlifecycleofvisualbasicforms.htm">Life Cycle of Visual Basic Forms</a>&nbsp;&nbsp;&nbsp;The lifetimes of forms, and the controls they contain, follow slightly different rules than those that govern other objects.<br><br></li>
<li>
<a href="vbconclassmodulesvsstandardmodules.htm">Class Modules vs. Standard Modules</a>&nbsp;&nbsp;&nbsp;There are significant differences between class modules and standard modules. Understanding these will help you write better code for your objects.</li>
</ul>
</BODY>
</HTML>

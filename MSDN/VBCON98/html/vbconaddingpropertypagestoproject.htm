<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Giving the ShapeLabel Control a Property Page</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingpropertypagestoproject"></a>Giving the ShapeLabel Control a Property Page</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingPropertyPagesToProjectC">
</object></p>
<p>
Simple properties that you create using property procedures will be shown automatically in the Visual Basic Properties window. You can also connect your control to <i>property pages, </i>which display your control’s properties in an alternate format.</p>
<p>
Each property page you connect to your control becomes one tab on the tabbed Properties dialog box. Visual Basic handles all the details of presenting the pages as a tabbed dialog, and manages the OK, Cancel, and Apply buttons. All you have to do is lay out the controls that will be used to set the property values.</p>
<p>
Property pages are useful when a group of properties interact in a complex fashion, as with the Toolbar control included with Visual Basic. They’re also useful for controls that will be distributed internationally, because the captions can be localized for different languages. Property pages also allow your controls to be used with development tools that don’t have a Properties window.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX control. It begins with the topic <a href="vbconcreatingactivexcontrol.htm">Creating an ActiveX Control</a>.</p>
<p class=label>
<b>To add a property page to the project</b>
<ol>
<li>
In the <b>Project Explorer</b> window, click <b>ControlDemo</b> to select the control project. On the <b>Project</b> menu, click <b>Add Property Page</b> to open the <b>Add PropertyPage</b> dialog box. Double-click the <b>Property Page</b> icon to add a property page to the project.<br><br></li>
<li>
In the <b>Properties</b> window, double-click the <b>Name</b> property, and change the name of the property page to <b>SLGeneral</b>. Double-click the <b>Caption</b> property, and change the caption to <b>General</b>.<p class=tl>
The caption is what will appear on the property page’s tab when it’s in use.</P><p class=tl>
Why name the page SLGeneral instead of General? You may have several controls in a project, and each one may have a General page. This is the ShapeLabel control’s General page.</P></li>
<li>
On the <b>File</b> menu, click <b>Save Project Group</b> to save the project group. Name the property page as shown in the following table. Visual Basic will provide the indicated extension automatically.<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>File</b></td>
<td class=label width=40%><b>Filename</b></td>
<td class=label width=27%><b>Extension</b></td>
</tr>
<tr valign=top>
<td width=33%>Property page</td>
<td width=40%>ControlDemo_SLGeneral</td>
<td width=27%>.pag</td>
</tr>
</table><br>
<p class=tl>
Binary information in a property page — such as bitmaps — will be saved in a binary file with the same name and an extension of .pgx.</P></li>
</ol>
<p>
The designer for a property page looks much like the designer for a control, except that the caption bar of the designer shows the Caption property of the property page, instead of the Name property.</p>
<p class=label>
<b>To design the General property page for the ShapeLabel control</b>
<ol>
<li>
Place a Label control on the property page, and set the Caption property of the label to the word <b>Caption</b>.<br><br></li>
<li>
Underneath the label, place a TextBox control, and assign it the following property values:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Property</b></td>
<td class=label width=50%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=50%>Name</td>
<td width=50%>txtCaption</td>
</tr>
<tr valign=top>
<td width=50%>Text</td>
<td width=50%>&lt;empty&gt;</td>
</tr>
</table><br>
<p class=tl>
The property page should appear as shown below.</P><p>
<img src="avtcm031.gif" border=0></P><p class=tl>
Placing the property description label above the text box in this fashion makes it easier to localize your control component for other languages, in which the word for "Caption" may be longer or shorter. Localization of controls is discussed in detail in "Building ActiveX Controls."</P></li>
<li>
Double-click the <b>property page</b>, to open a code window. In the <b>Events</b> drop down, select the <b>SelectionChanged</b> event, and add the following code:<pre><code>Private Sub PropertyPage_SelectionChanged()
 &nbsp; ' Display the caption of the first control in
 &nbsp; '&nbsp;&nbsp; the list of currently selected controls.
 &nbsp; txtCaption.Text = SelectedControls(0).Caption
End Sub
</code></pre>
<p class=tl>
The purpose of this event is to get the existing property values from the ShapeLabel control or <i>controls</i> that are currently selected. That’s right, there may be more than one ShapeLabel control selected. Multiple selection is a wonderful thing for the user of your control, but it means more work for you.</P><p class=tl>
A property page receives a SelectionChanged event whenever it is opened. It also receives this event when the list of selected controls changes. This is necessary because the <b>Property Pages</b> dialog box is modeless, so a user may select additional controls while the dialog box is open.</P><p class=tl>
You have to decide how to handle multiple selection on a property-by-property basis. For example, if your property page displays the Width property of the first control in the SelectedControls collection — that is, <code>SelectedControls(0)</code>, as shown in the code above — it will be easy for the user to change the widths of all the selected controls to that value.</P><p class=tl>
On the other hand, there is very little use in setting the captions of all the ShapeLabel controls on a form to the same value, so the logical thing to do with the Caption property is to disable txtCaption if the Count property of the SelectedControls collection is greater than one.</P><p class=tl>
However, this procedure doesn’t do the logical thing. For illustration purposes, the property page will be allowed to set multiple captions. Later, if you want to enable the behavior described above, you can add the following lines of code to the PropertyPage_SelectionChanged event procedure:</P><pre><code>&nbsp;&nbsp;&nbsp;' Please don't do this yet!
 &nbsp; If SelectedControls.Count &gt; 1 Then
 &nbsp;&nbsp;&nbsp;&nbsp; txtCaption.Enabled = False
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; txtCaption.Enabled = True
 &nbsp; End If
</code></pre>
</li>
<li>
To set the property values for all currently selected controls, add the following code to the ApplyChanges event:<pre><code>Private Sub PropertyPage_ApplyChanges()
 &nbsp; ' Use a generic Object variable, in case more 
 &nbsp; '&nbsp;&nbsp; than one kind of control is selected.
 &nbsp; Dim objControl As Variant
 &nbsp; For Each objControl In SelectedControls
 &nbsp;&nbsp;&nbsp;&nbsp; objControl.Caption = txtCaption.Text
 &nbsp; Next
End Sub
</code></pre>
<p class=tl>
Your property page receives the ApplyChanges event when the user clicks the <b>Apply</b> or <b>OK</b> buttons of the <b>Property Pages</b> dialog box, or switches to another tab.</P><p class=tl>
How do you know that every control in SelectedControls has a Caption property? As the designer of the control component, you determine which property pages are connected to any given control. A property page will only appear if <i>all</i> the currently selected controls have that page in their Property Pages list. The easiest thing to do is to make sure that the pages assigned to each control don’t show properties the control doesn’t have.</P><p class=tl>
If you wish to use a general-purpose property page for a number of controls, and some of those controls don’t have all the properties displayed on the page, you can add code to the ApplyChanges event to test the type of the control, and apply the property value as appropriate. Alternatively, you can use an On Error statement to trap and ignore errors from controls that don’t have the property.</P><p class=tl>
You only need to be concerned with the controls in your component, because controls that are not part of your component will never use your component’s property pages.</P><p class=tl>
"Creating Property Pages for ActiveX Controls" discusses property page layout and assignment in greater detail.</P></li>
<li>
To enable the <b>Apply</b> button of the <b>Property Page</b> dialog box when the Caption property is changed, add the following code to the Change event of the txtCaption text box:<pre><code>Private Sub txtCaption_Change()
 &nbsp; ' The Changed property of the property page
 &nbsp; '&nbsp;&nbsp; controls the Apply button of the Property
 &nbsp; '&nbsp;&nbsp; Pages dialog box.
 &nbsp; Changed = True
End Sub
</code></pre>
</li>
<li>
In the <b>Project</b> window, double-click <b>SLGeneral</b> to bring the property page designer to the front. Click the designer’s <b>Close</b> button or press CTRL+F4 to close the designer and put the page in run mode. Like UserControl objects, PropertyPage objects must run while the rest of the project group is in design mode.</li>
</ol>
<p class=label>
<b>To connect the property page to the ShapeLabel control</b>
<ol>
<li>
In the <b>Project Explorer</b> window, double-click <b>ShapeLabel</b> to open the designer.<br><br></li>
<li>
In the <b>Properties</b> window, double-click the <b>PropertyPages</b> property to display the <b>Connect Property Pages</b> dialog box.<p>
<img src="avtcm032.gif" border=0></P><p class=tl>
The Connect Property Pages dialog box can be used to connect multiple pages to a user control, and to control the display order of the tabs in the Property Pages dialog box for your control.</P><p class=tl>
Property pages can also be connected at run time. This is discussed in "Creating Property Pages for ActiveX Controls."</P></li>
<li>
Check <b>SLGeneral</b>, and then click <b>OK</b>.<br><br></li>
<li>
Bring the <b>ShapeLabel</b> designer to the front, then click its <b>Close</b> button or press CTRL+F4 to put the ShapeLabel control in run mode.<br><br></li>
<li>
In the <b>Project Explorer</b> window, double-click <b>Form1</b> to open its designer.<br><br></li>
<li>
Right-click on one of the ShapeLabel controls on Form1, to show the context menu, and click <b>Properties</b> to show the <b>Property Pages</b> dialog box.<p>
<img src="avtcm033.gif" border=0></P></li>
<li>
In the <b>Caption </b>box on the <b>General</b> tab, replace the current caption with a new value. When you do this, the <b>Apply</b> button is enabled. Click the <b>Apply</b> button to change the caption of the control.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You could also change the caption by pressing <b>OK</b>, but this would close the <b>Property Pages</b> dialog box. The dialog box should stay open for the next step.</p></li>
<li>
Hold down the CTRL key and click the second <b>ShapeLabel</b> control on Form1, so that both ShapeLabels are selected. Change the caption and click the <b>Apply</b> button to set both captions to the same value.<p class=tl>
You may want to try adding other controls, such as command buttons, to Form1, and observing the effects of different multiple selections on the <b>Property Pages</b> dialog box.</P></li>
<li>
When you’re done experimenting, click <b>OK </b>to close the <b>Property Pages</b> dialog box.</li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Property pages are discussed in detail in "Creating Property Pages for ActiveX Controls."</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX control.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=40%><b>To</b></td>
<td class=label width=60%><b>See</b></td>
</tr>
<tr valign=top>
<td width=40%>Go to the next step</td>
<td width=60%><a href="vbconaddingeventtocontrol.htm">Adding an Event to the ShapeLabel Control</a></td>
</tr>
<tr valign=top>
<td width=40%>Start from the beginning</td>
<td width=60%><a href="vbconcreatingactivexcontrol.htm">Creating an ActiveX Control</a></td>
</tr>
</table><br>
</BODY>
</HTML>

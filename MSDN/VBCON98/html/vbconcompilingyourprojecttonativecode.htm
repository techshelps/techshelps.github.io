<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiling Your Project to Native Code</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcompilingyourprojecttonativecode"></a>Compiling Your Project to Native Code</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCompilingYourProjectToNativeCodeC">
</object></p>
<p>
If you have the Professional or Enterprise edition of Visual Basic, you can compile your code either in standard Visual Basic p-code format or in native code format. Native code compilation provides several options for optimizing and debugging that aren't available with p-code.</p>
<p>
<i>P-code</i>, or <i>pseudo code</i>, is an intermediate step between the high-level instructions in your Basic program and the low-level <i>native code</i> your computer's processor executes. At run time, Visual Basic translates each p-code statement to native code. By compiling directly to native code format, you eliminate the intermediate p-code step.</p>
<p>
You can debug compiled native code using standard native code debugging tools, such as the debugging environment provided by Visual C++. You can also use options available in languages such as Visual C++ for optimizing and debugging native code. For example, you can optimize code for speed or for size.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;All projects created with Visual Basic use the services of the run-time DLL (MSVBVM60.DLL). Among the services provided by this DLL are startup and shutdown code for your application, functionality for forms and intrinsic controls, and run-time functions like Format and CLng.</p>
<p class=indent>
Compiling a project with the Native Code option means that the code you write will be fully compiled to the native instructions of the processor chip, instead of being compiled to p-code. This will greatly speed up loops and mathematical calculations, and may somewhat speed up calls to the services provided by MSVBVM60.DLL. However, it does not eliminate the need for the DLL.</p>
<p class=label>
<b>To compile a project to native code</b>
<ol>
<li>
In the <b>Project</b> window, select the project you want to compile.<br><br></li>
<li>
From the <b>Project</b> menu, choose <b>Project Properties</b>.<br><br></li>
<li>
In the <b>Project Properties</b> dialog box, click the <b>Compile</b> tab.<p class=label>
<b>Figure 8.6&nbsp;&nbsp;&nbsp;The Compile tab in the Project Properties dialog box</b>
<p>
<img src="avp08005.gif" border=0></P></li>
<li>
Select <b>Compile to Native Code</b>.<p class=tl>
Visual Basic enables several options for customizing and optimizing the executable file. For example, to create compiled code that will be optimized for size, select the <b>Optimize for Small Code</b> option.</P><p class=tl>
For additional advanced optimization options, click the <b>Advanced Optimizations</b> button.</P></li>
<li>
Select the options you want, then click <b>OK</b>.<br><br></li>
<li>
From the <b>File</b> menu, choose <b>Make Exe</b>, or <b>Make Project Group</b>.</li>
</ol>
<p>
The following table describes the native code options for optimization.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=45%><b>Option</b></td>
<td class=label width=55%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=45%>Assume No Aliasing (Advanced Optimization)</td>
<td width=55%>Tells the compiler that your program does not use aliasing. Checking this option allows the compiler to apply optimization such as storing variables in registers and performing loop optimizations.</td>
</tr>
<tr valign=top>
<td width=45%>Create Symbolic Debug Info</td>
<td width=55%>Produces a .pdb file and .exe or .dll file containing information to allow for debugging using Microsoft Visual C++ 5.0 or another compatible debugger.</td>
</tr>
<tr valign=top>
<td width=45%>Favor Pentium Pro(tm)</td>
<td width=55%>Optimizes code to favor the Pentium Pro(tm) processor.</td>
</tr>
<tr valign=top>
<td width=45%>No Optimization</td>
<td width=55%>Disables all optimizations.</td>
</tr>
<tr valign=top>
<td width=45%>Optimize for Fast Code</td>
<td width=55%>Maximizes the speed of .exe and .dll files by telling the compiler to favor speed over size.</td>
</tr>
<tr valign=top>
<td width=45%>Optimize for Small Code</td>
<td width=55%>Minimizes the size of .exe and .dll files by telling the compiler to favor size over speed.</td>
</tr>
<tr valign=top>
<td width=45%>Remove Array Bounds Checks (Advanced Optimization)</td>
<td width=55%>Disables Visual Basic array bounds checking.</td>
</tr>
<tr valign=top>
<td width=45%>Remove Floating Point Error Checks (Advanced Optimization)</td>
<td width=55%>Disables Visual Basic floating-point error checking.</td>
</tr>
<tr valign=top>
<td width=45%>Remove Integer Overflow Checks (Advanced Optimization)</td>
<td width=55%>Disables Visual Basic integer overflow checking.</td>
</tr>
<tr valign=top>
<td width=45%>Remove Safe Pentium(tm) FDIV Checks (Advanced Optimization)</td>
<td width=55%>Disables checking for safe Pentium(tm) processor floating-point division.</td>
</tr>
</table><br>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more about native code options, see "Native Code Compiler Switches."</p>
</BODY>
</HTML>

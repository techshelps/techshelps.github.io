<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Constant and Variable Naming Conventions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconconstantvariablenamingconventions"></a>Constant and Variable Naming Conventions</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconConstantVariableNamingConventionsC">
</object></p>
<p>
In addition to objects, constants and variables also require well-formed naming conventions. This section lists recommended conventions for constants and variables supported by Visual Basic. It also discusses the issues of identifying data type and scope.</p>
<p>
Variables should always be defined with the smallest scope possible. Global (Public) variables can create enormously complex state machines and make the logic of an application extremely difficult to understand. Global variables also make the reuse and maintenance of your code much more difficult.</p>
<p>
Variables in Visual Basic can have the following scope:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Scope</b></td>
<td class=label width=33%><b>Declaration</b></td>
<td class=label width=34%><b>Visible in</b></td>
</tr>
<tr valign=top>
<td width=33%>Procedure-level </td>
<td width=33%>'Private' in procedure, sub, or function</td>
<td width=34%>The procedure in which it is declared</td>
</tr>
<tr valign=top>
<td width=33%>Module-level</td>
<td width=33%>'Private' in the declarations section of a form or code module (.frm, .bas)</td>
<td width=34%>Every procedure in the form or code module</td>
</tr>
<tr valign=top>
<td width=33%>Global</td>
<td width=33%>'Public' in the declarations section of a code module (.bas)</td>
<td width=34%>Everywhere in the application</td>
</tr>
</table><br>
<p>
In a Visual Basic application, global variables should be used only when there is no other convenient way to share data between forms. When global variables must be used, it is good practice to declare them all in a single module, grouped by function. Give the module a meaningful name that indicates its purpose, such as Public.bas.</p>
<p>
It is good coding practice to write modular code whenever possible. For example, if your application displays a dialog box, put all the controls and code required to perform the dialog's task in a single form. This helps to keep the application's code organized into useful components and minimizes its run-time overhead.</p>
<p>
With the exception of global variables (which should not be passed), procedures and functions should operate only on objects passed to them. Global variables that are used in procedures should be identified in the declaration section at the beginning of the procedure. In addition, you should pass arguments to subs and functions using ByVal, unless you explicitly need to change the value of the passed argument.</p>
<h2>Variable Scope Prefixes</h2>
<p>
As project size grows, so does the value of recognizing variable scope quickly. A one-letter scope prefix preceding the type prefix provides this, without greatly increasing the size of variable names.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Scope</b></td>
<td class=label width=23%><b>Prefix</b></td>
<td class=label width=39%><b>Example</b></td>
</tr>
<tr valign=top>
<td width=38%>Global</td>
<td width=23%>g</td>
<td width=39%>gstrUserName</td>
</tr>
<tr valign=top>
<td width=38%>Module-level</td>
<td width=23%>m</td>
<td width=39%>mblnCalcInProgress</td>
</tr>
<tr valign=top>
<td width=38%>Local to procedure</td>
<td width=23%>None</td>
<td width=39%>dblVelocity</td>
</tr>
</table><br>
<p>
A variable has global scope if it is declared Public in a standard module or a form module. A variable has <i>module-level</i> scope if declared Private in a standard module or form module, respectively.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Consistency is crucial to productive use of this technique; the syntax checker in Visual Basic will not catch module-level variables that begin with "p."</p>
<h2>Constants</h2>
<p>
The body of constant names should be mixed case with capitals initiating each word. Although standard Visual Basic constants do not include data type and scope information, prefixes like i, s, g, and m can be very useful in understanding the value and scope of a constant. For constant names, follow the same rules as variables. For example:</p>
<pre><code>mintUserListMax      'Max entry limit for User list
                  '(integer value,local to module)
gstrNewLine            'New Line character
                  '(string, global to application)
</code></pre>
<h2>Variables</h2>
<p>
Declaring all variables saves programming time by reducing the number of bugs caused by typos (for example, aUserNameTmp vs. sUserNameTmp vs. sUserNameTemp). On the Editor tab of the Options dialog, check the Require Variable Declaration option. The Option Explicit statement requires that you declare all the variables in your Visual Basic program.</p>
<p>
Variables should be prefixed to indicate their data type. Optionally, especially for large programs, the prefix can be extended to indicate the scope of the variable.</p>
<h2>Variable Data Types</h2>
<p>
Use the following prefixes to indicate a variable's data type.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Data type</b></td>
<td class=label width=23%><b>Prefix</b></td>
<td class=label width=48%><b>Example</b></td>
</tr>
<tr valign=top>
<td width=29%>Boolean</td>
<td width=23%>bln</td>
<td width=48%>blnFound</td>
</tr>
<tr valign=top>
<td width=29%>Byte</td>
<td width=23%>byt</td>
<td width=48%>bytRasterData</td>
</tr>
<tr valign=top>
<td width=29%>Collection object</td>
<td width=23%>col</td>
<td width=48%>colWidgets</td>
</tr>
<tr valign=top>
<td width=29%>Currency</td>
<td width=23%>cur</td>
<td width=48%>curRevenue</td>
</tr>
<tr valign=top>
<td width=29%>Date (Time)</td>
<td width=23%>dtm</td>
<td width=48%>dtmStart</td>
</tr>
<tr valign=top>
<td width=29%>Double</td>
<td width=23%>dbl</td>
<td width=48%>dblTolerance</td>
</tr>
<tr valign=top>
<td width=29%>Error</td>
<td width=23%>err</td>
<td width=48%>errOrderNum</td>
</tr>
<tr valign=top>
<td width=29%>Integer</td>
<td width=23%>int</td>
<td width=48%>intQuantity</td>
</tr>
<tr valign=top>
<td width=29%>Long</td>
<td width=23%>lng</td>
<td width=48%>lngDistance</td>
</tr>
<tr valign=top>
<td width=29%>Object</td>
<td width=23%>obj</td>
<td width=48%>objCurrent</td>
</tr>
<tr valign=top>
<td width=29%>Single</td>
<td width=23%>sng</td>
<td width=48%>sngAverage</td>
</tr>
<tr valign=top>
<td width=29%>String</td>
<td width=23%>str</td>
<td width=48%>strFName</td>
</tr>
<tr valign=top>
<td width=29%>User-defined type</td>
<td width=23%>udt</td>
<td width=48%>udtEmployee</td>
</tr>
<tr valign=top>
<td width=29%>Variant</td>
<td width=23%>vnt</td>
<td width=48%>vntCheckSum</td>
</tr>
</table><br>
<h2>Descriptive Variable and Procedure Names</h2>
<p>
The body of a variable or procedure name should use mixed case and should be as long as necessary to describe its purpose. In addition, function names should begin with a verb, such as InitNameArray or CloseDialog.</p>
<p>
For frequently used or long terms, standard abbreviations are recommended to help keep name lengths reasonable. In general, variable names greater than 32 characters can be difficult to read on VGA displays.</p>
<p>
When using abbreviations, make sure they are consistent throughout the entire application. Randomly switching between Cnt and Count within a project will lead to unnecessary confusion.</p>
<h2>User-Defined Types</h2>
<p>
In a large project with many user-defined types, it is often useful to give each such type a three-character prefix of its own. If these prefixes begin with "u," they will still be easy to recognize quickly when you are working with a user-defined type. For example, “ucli” could be used as the prefix for variables of a user-defined Client type.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Capturing Stored Procedure Output Parameters</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcapturingstoredprocedureoutputparameters"></a>Capturing Stored Procedure Output Parameters</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCapturingStoredProcedureOutputParametersC">
</object></p>
<p>
Using the same technique used with parameter queries in SELECT statements, you can also capture the output parameters from a procedure.</p>
<p class=label>
<b>To capture output parameters</b>
<ol>
<li>
Use ODBC escape syntax to establish placeholders for the output and input parameters and return values.<br><br></li>
<li>
For ODBC data sources that don't automatically determine the direction, your code must set the Direction property of each rdoParameter object to indicate how the parameter is used.<br><br></li>
<li>
For ODBC data sources that don't automatically (or correctly) determine the data type for individual parameters, your code must set the Type property of each rdoParameter object to indicate its data type.<br><br></li>
<li>
Execute the query.</li>
</ol>
<p>
When the query has completed processing, retrieve the output parameter values from the rdoParameters collection.</p>
<h2>Coding Output Parameter Stored Procedures</h2>
<p>
This example executes a stored procedure that expects two input parameters and returns two output parameters along with a return value parameter. Note that the SQL query uses ODBC syntax in the rdoQuery, which is required if you intend to execute stored procedures that return output arguments.</p>
<pre><code>Dim SQL As String, MyOutputVal1 As Variant
Dim MyOutputVal2 As Variant, MyRetValue As Variant _ 
rs As rdoResultset
Dim Ps As rdoQuery

' Use named arguments to open the connection.
Dim cn as New rdoConnection
With cn
   .Connect = "dsn=Sequel;uid=;pwd=;database=workdb"
   .EstablishConnection Prompt:=rdDriverNoPrompt
End With

' Use ODBC parameter argument syntax. 
' Note each argument is identified 
' with a ? character – one for the ReturnValue, 
' one for each of the input arguments 
' and one for each of the output arguments.

SQL = "{? = call TestOutputRS (?, ?, ?, ?) }"

' Create reusable rdoQuery.
Set Ps = cn.CreateQuery("PsTest", SQL)

' Set Parameter "direction" for each output 
' and return value parameter.

Ps(0).Direction = rdParamReturnValue
Ps(3).Direction = rdParamOutput
Ps(4).Direction = rdParamOutput

' Set the input argument values.
Ps.rdoParameters(1) = "Test%"
Ps.rdoParameters(2) = 1


' Create the result set and populate the Ps values.
Set rs = Ps.OpenResultset(rdOpenStatic)

MyRetValue = Ps(0)    ' The return value argument.
MyOutputVal1 = Ps(3) ' The first output parameter.
MyOutputVal2 = Ps(4) ' The second output parameter.
</code></pre>
</BODY>
</HTML>

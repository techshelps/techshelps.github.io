<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding the Scope of Variables</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconunderstandingscopeofvariables"></a>Understanding the Scope of Variables</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUnderstandingScopeOfVariablesC">
</object></p>
<p>
The scope of a variable defines which parts of your code are aware of its existence. When you declare a variable within a procedure, only code within that procedure can access or change the value of that variable; it has a scope that is local to that procedure. Sometimes, however, you need to use a variable with a broader scope, such as one whose value is available to all the procedures within the same module, or even to all the procedures in your entire application. Visual Basic allows you to specify the scope of a variable when you declare it.</p>
<h2>Scoping Variables</h2>
<p>
Depending on how it is declared, a variable is scoped as either a procedure-level (local) or module-level variable.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Scope</b></td>
<td class=label width=39%><b>Private</b></td>
<td class=label width=37%><b>Public</b></td>
</tr>
<tr valign=top>
<td width=24%>Procedure-level</td>
<td width=39%>Variables are private to the procedure in which they appear.</td>
<td width=37%>Not applicable. You cannot declare public variables within a procedure.</td>
</tr>
<tr valign=top>
<td width=24%> &nbsp; Module-level</td>
<td width=39%>Variables are private to the module in which they appear.</td>
<td width=37%>Variables are available to all modules.</td>
</tr>
</table><br>
<h2>Variables Used Within a Procedure</h2>
<p>
Procedure-level variables are recognized only in the procedure in which they're declared. These are also known as local variables. You declare them with the Dim or Static keywords. For example: </p>
<pre><code>Dim intTemp As Integer</code></pre>
<p class=tl>
–or–</P><pre><code>Static intPermanent As Integer
</code></pre>
<p>
Values in local variables declared with Static exist the entire time your application is running while variables declared with Dim exist only as long as the procedure is executing.</p>
<p>
Local variables are a good choice for any kind of temporary calculation. For example, you can create a dozen different procedures containing a variable called <code>intTemp</code>. As long as each <code>intTemp</code> is declared as a local variable, each procedure recognizes only its own version of <code>intTemp</code>. Any one procedure can alter the value in its local <code>intTemp</code> without affecting <code>intTemp</code> variables in other procedures.</p>
<h2>Variables Used Within a Module</h2>
<p>
By default, a module-level variable is available to all the procedures in that module, but not to code in other modules. You create module-level variables by declaring them with the Private keyword in the Declarations section at the top of the module. For example:</p>
<pre><code>Private intTemp As Integer
</code></pre>
<p>
At the module level, there is no difference between Private and Dim, but Private is preferred because it readily contrasts with Public and makes your code easier to understand.</p>
<h2>Variables Used by All Modules</h2>
<p>
To make a module-level variable available to other modules, use the Public keyword to declare the variable. The values in public variables are available to all procedures in your application. Like all module-level variables, public variables are declared in the Declarations section at the top of the module. For example:</p>
<pre><code>Public intTemp As Integer
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can't declare public variables within a procedure, only within the Declarations section of a module.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For additional information about variables, see "Advanced Variable Topics."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Life and Times of a UserControl Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlifetimesofusercontrol"></a>Life and Times of a UserControl Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconLifeTimesOfUserControlC">
</object></p>
<p>
The life of an ordinary Visual Basic form is marked by certain key events, such as Initialize, Load, QueryUnload, and Unload. In order to create well-behaved applications, it’s important to know when these events occur in the life cycle of a form.</p>
<p>
The same is true for controls. The key events in the life cycle of a UserControl are Initialize, InitProperties, ReadProperties, WriteProperties, and Terminate. The following procedure explores these events.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX control. It begins with the topic <a href="vbconcreatingactivexcontrol.htm">Creating an ActiveX Control</a>.</p>
<p class=label>
<b>To observe key events for ShapeLabel</b>
<ol>
<li>
In the <b>Project Explorer</b> window, double-click <b>ShapeLabel</b> to open its designer.<br><br></li>
<li>
Double-click the designer to open a code window for ShapeLabel, and enter code in the following event procedures:<pre><code>Private Sub UserControl_Initialize()
 &nbsp; Debug.Print "Initialize"
End Sub

Private Sub UserControl_InitProperties()
 &nbsp; Debug.Print "InitProperties"
End Sub

Private Sub UserControl_ReadProperties(PropBag As _
 &nbsp;&nbsp;&nbsp;&nbsp; PropertyBag)
 &nbsp; Debug.Print "ReadProperties"
End Sub

Private Sub UserControl_WriteProperties(PropBag _
 &nbsp;&nbsp;&nbsp;&nbsp; As PropertyBag)
 &nbsp; Debug.Print "WriteProperties"
End Sub

Private Sub UserControl_Terminate()
 &nbsp; Debug.Print "Terminate"
End Sub
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;For UserControl objects, Load and Unload are superseded by the ReadProperties and WriteProperties events. This is discussed in more detail in "Understanding Control Lifetime and Key Events," in "Building ActiveX Controls."</p></li>
<li>
Be sure the <b>ShapeLabel</b> designer is in front, then press CTRL+F4 to close the window, putting the control in run mode. Debug messages will appear in the <b>Immediate</b> window:<p>
<img src="avtcm026.gif" border=0></P><p class=tl>
What’s going on here? You haven’t put another instance of the ShapeLabel control on Form1. Where did all these events come from?</P><p class=tl>
This illustrates an important point about controls. A user puts a control on a form, and thereafter thinks of the control as a permanent fixture of the form. From the control author’s perspective, however, controls are getting destroyed and re-created all the time.</P><p class=tl>
When you put ShapeLabel in run mode by closing its designer, the instance of ShapeLabel on Form1 was destroyed and re-created, at which point it received an Initialize event. Why didn’t you see a Terminate event first? Because the original instance of ShapeLabel you placed on Form1 was created before you added the code in the UserControl_Terminate event procedure! Welcome to the wild and woolly world of control creation.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Control instances are also destroyed and recreated when you click <b>Update UserControls </b>on the form’s context menu.</p></li>
<li>
Press CTRL+F5, or click the <b>Start</b> button on the toolbar, to run TestCtlDemo. When the project is running, the grid on Form1 is gone, so you can’t see the ShapeLabel, but you can see its life flash before your eyes in the <b>Immediate</b> window:<p>
<img src="avtcm027.gif" border=0></P><p class=tl>
After a control instance is created, the ReadProperties event gives you a chance to obtain the control’s saved property values from the .frm file belonging to the form that contains the control instance.</P><p class=tl>
When the design-time instance of the control is destroyed, the WriteProperties event gives you a chance to save the property values set at design time by the developer who's using your control. Property values are saved in the containing form’s .frm file, as you’ll see in "Saving the ShapeLabel Control's Property Values," later in this chapter.</P><p class=tl>
The Terminate event occurs when the control is being destroyed.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;By default, the <b>Compile On Demand</b> option is checked on the <b>General</b> tab of the <b>Options</b> dialog box (accessed from the <b>Tools</b> menu). Using CTRL+F5 (or <b>Start with Full Compile</b>, on the <b>Run</b> menu) overrides <b>Compile On Demand</b>, and fully compiles all the projects in the group before entering run mode. This is useful because compile errors usually require resetting the project, which means returning to design mode. When you’re debugging controls, you may prefer to turn <b>Compile On Demand</b> off rather than remembering to use CTRL+f5.</p></li>
<li>
Close Form1, to return the project to design mode. In the <b>Immediate</b> window, you’ll see a Terminate event (but not WriteProperties — why not?) as the run-time instance of ShapeLabel is torn down. Then you’ll see the Initialize, ReadProperties, and Resize events, as the design-time instance of the control is created.<p class=tl>
The run-time instance of a control never gets a WriteProperties event, because it doesn’t need to save its property values. To see why not, consider ShapeLabel’s future. When it’s compiled into an .ocx file, you’ll add it to another project, put an instance on a form, compile the project into an .exe, and run it. When you close that .exe, the only place the ShapeLabel instance could save its property values would be in the .exe file. This sort of behavior is not tolerated by well-behaved operating systems.</P></li>
<li>
Scroll to the top of the <b>Immediate</b> window, click in the top left corner, and drag to select all the text in the window. Press the DELETE key to clear the window.<br><br></li>
<li>
In the <b>Project Explorer</b> window, double-click <b>Form1</b> to bring Form1 to the front.<br><br></li>
<li>
On the <b>Toolbox</b>, double-click the <b>ShapeLabel</b> icon to add another instance of the control to Form1. You’ll see a new event this time.<p>
<img src="avtcm028.gif" border=0></P><p class=tl>
When a new instance of your control is placed on a container, it gets an InitProperties event. In the UserControl_InitProperties event procedure you can place code to:</P><ul type=disc>
<li>
Set the default values for each of the control’s properties values<br><br></li>
<li>
Perform tasks whenever a user creates an instance of your control.</li>
</ul>
</li>
<li>
Close the Form1 designer by clicking its <b>Close</b> button or pressing CTRL+F4 while the designer is in front. In the <b>Immediate </b>window, you will see two sets of WriteProperties and Terminate events, one for each instance of ShapeLabel.<br><br></li>
<li>
In the <b>Project Explorer</b> window, double-click <b>Form1</b> to open its designer again. When the designer opens, all the controls on Form1 are created, and their Initialize events are fired. All controls then receive ReadProperties events, which allow them to retrieve their saved property values. The InitProperties event does not occur, because both instances of the ShapeLabel control already exist.</li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Control lifetime, and key events therein, are discussed in "Understanding Control Lifetime and Key Events," in Chapter 9, "Building ActiveX Controls." "Exposing Properties of Constituent Controls," in the same chapter, explains how the ActiveX Control Interface Wizard simplifies the creation of code to save and retrieve property values.Control lifetime, and key events therein, are discussed in "Understanding Control Lifetime and Key Events," in "Building ActiveX Controls." "Exposing Properties of Constituent Controls," in the same chapter, explains how the ActiveX Control Interface Wizard simplifies the creation of code to save and retrieve property values.</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX control.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=42%><b>To</b></td>
<td class=label width=58%><b>See</b></td>
</tr>
<tr valign=top>
<td width=42%>Go to the next step</td>
<td width=58%><a href="vbcondrawingshapelabelcontrol.htm">Drawing the ShapeLabel Control</a></td>
</tr>
<tr valign=top>
<td width=42%>Start from the beginning</td>
<td width=58%><a href="vbconcreatingactivexcontrol.htm">Creating an ActiveX Control</a></td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Control Arrays</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconworkingwithcontrolarrays"></a>Working with Control Arrays</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconWorkingWithControlArraysC">
</object></p>
<p>
A <i>control array </i>is a group of controls that share the same name and type. They also share the same event procedures. A control array has at least one element and can grow to as many elements as your system resources and memory permit; its size also depends on how much memory and Windows resources each control requires. The maximum index you can use in a control array is 32767. Elements of the same control array have their own property settings. Common uses for control arrays include menu controls and option button groupings.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Visual Basic includes the ability to dynamically add unreferenced controls to the Controls collection at run time. This topic refers only to referenced controls added at design time by cutting and pasting a control onto the form. For more information about adding controls at run time, see the reference topic "Add Method (Controls Collection)" and "Add Method (Licenses Collection)."</p>
<h2>Why Use Control Arrays?</h2>
<p>
Adding controls with control arrays uses fewer resources than simply adding multiple controls of the same type to a form at design time. Control arrays are also useful if you want several controls to share code. For example, if three option buttons are created as a control array, the same code is executed regardless of which button was clicked.</p>
<p>
If you want to create a new instance of a control at run time, that control must be a member of a control array. With a control array, each new element inherits the common event procedures of the array.</p>
<p>
Using the control array mechanism, each new control inherits the common event procedures already written for the array. For example, if your form has several text boxes that each receive a date value, a control array can be set up so that all of the text boxes share the same validation code.</p>
<h2>Sample Application: Calc.vbp</h2>
<p>
The Calculator sample application (which is listed in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory) shown in Figure 7.2 contains two control arrays — the number buttons and the operator buttons. </p>
<p class=label>
<b>Figure 7.2&nbsp;&nbsp;&nbsp;Control array example</b></p>
<p>
<img src="avp07031.gif" border=0></p>
<p>
The Name and Index property values for the control arrays in the Calculator example are listed in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Number(<i>n</i>)</b></td>
<td class=label width=52%><b>Operator(<i>n</i>)</b></td>
</tr>
<tr valign=top>
<td width=48%>0 = Number(0)</td>
<td width=52%>+ = Operator(1)</td>
</tr>
<tr valign=top>
<td width=48%>1 = Number(1)</td>
<td width=52%> – = Operator(2)</td>
</tr>
<tr valign=top>
<td width=48%>2 = Number(2)</td>
<td width=52%>X = Operator(3)</td>
</tr>
<tr valign=top>
<td width=48%>3 = Number(3)</td>
<td width=52%>/ = Operator(4)</td>
</tr>
<tr valign=top>
<td width=48%>4 = Number(4)</td>
<td width=52%>= = Operator(5)</td>
</tr>
<tr valign=top>
<td width=48%>5 = Number(5)</td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%>6 = Number(6)</td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%>7 = Number(7)</td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%>8 = Number(8)</td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%>9 = Number(9)</td>
<td width=52%></td>
</tr>
</table><br>
<p>
Notice how each control is referred to with the syntax <i>object(index)</i>. You specify the index of a control when you create it. In fact, specifying any index for a control at design time makes that control part of an array.</p>
<p>
The Index property distinguishes one element of the control array from another. When one of the controls in the array recognizes an event, Visual Basic calls a common event procedure and passes an argument (the value of the Index property) to identify which control actually recognizes the event.</p>
<p>
For example, the first line of the Number_Click event procedure is:</p>
<pre><code>Private Sub Number_Click (Index As Integer)
</code></pre>
<p>
If Number(0) recognizes the event, Visual Basic passes 0 as the <i>index</i> argument, and if Number(1) recognizes the event, Visual Basic passes 1 as the <i>index</i> argument. Other than the index value, the remainder of the Number_Click code that is executed is the same for both Number(0) through Number(9).</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Debugging Windows</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingdebuggingwindows"></a>Using the Debugging Windows</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingDebuggingWindowsC">
</object></p>
<p>
Sometimes you can find the cause of a problem by executing portions of code. More often, however, you'll also have to analyze what's happening to the data. You might isolate a problem in a variable or property with an incorrect value, and then have to determine how and why that variable or property was assigned an incorrect value.</p>
<p>
With the debugging windows, you can monitor the values of expressions and variables while stepping through the statements in your application. There are three debugging windows: the Immediate window, the Watch window, and the Locals window
<ul type=disc>
<li>
The <i>Immediate window </i>shows information that results from debugging statements in your code, or that you request by typing commands directly into the window.<p class=label>
<b>Figure 13.8&nbsp;&nbsp;&nbsp;The Immediate window</b>
<p>
<img src="avp13008.gif" border=0></P><p class=tl>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To learn more about the Immediate window, see "Testing Data and Procedures with the Immediate Window" later in this chapter.</P></li>
<li>
The <i>Watch window </i>shows the current <i>watch expressions</i>, which are expressions whose values you decide to monitor as the code runs. A <i>break expression</i> is a watch expression that will cause Visual Basic to enter break mode when a certain condition you define becomes true. In the Watch window, the Context column indicates the procedure, module, or modules in which each watch expression is evaluated. The Watch window can display a value for a watch expression only if the current statement is in the specified context. Otherwise, the Value column shows a message indicating the statement is not in context. To access the Watch window, select Watch Window from the View menu. Figure 13.9 shows the Watch window.<p class=label>
<b>Figure 13.9&nbsp;&nbsp;&nbsp;The Watch window</b>
<p>
<img src="avp13009.gif" border=0></P><p class=tl>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To learn more about the Watch window, see "Monitoring Data with Watch Expressions" later in this chapter.</P></li>
<li>
The <i>Locals window</i> shows the value of any variables within the scope of the current procedure. As the execution switches from procedure to procedure, the contents of the Locals window changes to reflect only the variables applicable to the current procedure. To access the Locals window, select Locals Window from the View menu. Figure 13.10 shows the Locals window.<p class=label>
<b>Figure 13.10&nbsp;&nbsp;&nbsp;The Locals window</b>
</li>
</ul>
<p>
<img src="avp13010.gif" border=0></p>
<p>
The current procedure and form (or module) determine which variables can be displayed according to the scoping rules presented in "Understanding the Scope of Variables" in "Programming Fundamentals." For example, suppose the Immediate window indicates that Form1 is the current form. In this case, you can display any of the form-level variables in Form1. You can also use <code>Debug.Print</code> to examine local variables of the procedure displayed in the Code window. (You can always examine the value of a public variable.) For more information about printing information in the Immediate window, see "Testing data and Procedures with the Immediate Window" later in this chapter.</p>
</BODY>
</HTML>

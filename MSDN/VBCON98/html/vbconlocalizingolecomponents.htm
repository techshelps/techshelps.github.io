<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Localizing ActiveX Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlocalizingolecomponents"></a>Localizing ActiveX Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconLocalizingOLEComponentsC">
</object></p>
<p>
You can localize components created using Visual Basic by first collecting all the text strings used in your component into a source file for the Windows Resource Compiler (.rc file). You can then create localized versions of this source file by translating the strings to each of your target locales.</p>
<p>
Before you compile each localized version of your component, use the Resource Compiler to create a Windows resource (.res file) from the appropriate source file, and include the resource file in your project.</p>
<p>
Components without a visible interface are extremely easy to localize in this fashion, because you only have to localize error messages. The code fragments in "Generating and Handling Errors" demonstrate this technique.</p>
<p>
For components that display forms, the process is more complicated. You need to place the captions of forms and controls into the resource file, and retrieve them in the Form_Load event procedure for each form.</p>
<h2>Satellite DLLs</h2>
<p>
In areas where multiple languages are in use, using resource files can be a problem. Not only do you have to compile separate versions of your component for each language, but they all share the same Project Name, and thus only one language can be installed on a user’s computer at any given time.</p>
<p>
Localizing Controls" in "Building ActiveX Controls," describes a technique for using a <i>satellite DLL</i> to provide the translated strings for each language. Satellite DLLs accompany your component, and can be swapped in and out without recompiling the component.</p>
<p>
If you use a LocaleID-based naming convention, multiple satellite DLLs can coexist on one computer, allowing the user to switch from one language to another by changing the system LocaleID.</p>
<h3>Limitations</h3>
<p>
Unfortunately, code components can only make limited use of this feature. Unlike control components, they don’t receive a LocaleID from the client application. The best a code component can do is to use API calls to obtain the system LocaleID.</p>
<p>
Out-of-process code components can never do any better than this, because they have to serve multiple clients. With in-process components, however, you can offer developers a better option by providing an object with a LocaleID property that can be set by client applications. When the property is set, your component can load text strings from the appropriate satellite DLL.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information on writing code for applications that will be distributed world-wide, see "International Issues," in the <i>Visual Basic Programmer’s Guide</i>. To learn about the functions for retrieving text strings and other resources, see the LoadResString function in the <i>Language Reference</i>.</p>
</BODY>
</HTML>

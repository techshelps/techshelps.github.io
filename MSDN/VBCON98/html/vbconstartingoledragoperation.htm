<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Starting the OLE Drag Operation</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconstartingoledragoperation"></a>Starting the OLE Drag Operation</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconStartingOLEDragOperationC">
</object></p>
<p>
If you want to be able to specify which data formats or drop effects (copy, move, or no drop) are supported, or if the control you want to drag from doesn't support automatic dragging, you need to make your OLE drag operation manual.</p>
<p>
The first phase of a manual drag-and-drop operation is calling the OLEDrag method, setting the allowed drop effects, specifying the supported data formats, and, optionally, placing data into the DataObject object.</p>
<p>
You use the OLEDrag method to manually start the drag operation and the OLEStartDrag event to specify the allowed drop-action effects and the supported data formats.</p>
<h2>The OLEDrag Method</h2>
<p>
Generally, the OLEDrag method is called from an object’s MouseMove event when data has been selected, the left mouse button is pressed and held, and the mouse is moved.</p>
<p>
The OLEDrag method does not provide any arguments. Its primary purpose is to initiate a manual drag and then allow the OLEStartDrag event to set the conditions of the drag operation (for example, specifying what will happen when the data is dragged into another control).</p>
<p>
If the source control supports the OLEDragMode property, to have manual control over the drag operation you must set the property to Manual and then use the OLEDrag method on the control. If the control supports manual but not automatic OLE drag, it will not have the OLEDragMode property, but it will support the OLEDrag method and the OLE drag-and-drop events.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The OLEDrag method will also work if the source control’s OLEDragMode property is set to Automatic.</p>
<h2>Specifying Drop Effects and Data Formats</h2>
<p>
In a manual OLE drag operation, when the user begins dragging the source and the OLEDrag method is called, the control's OLEStartDrag event fires. Use this event to specify what drop effects and data formats the source supports.</p>
<p>
The OLEStartDrag event uses two arguments to specify supported data formats and whether the data can be copied or moved when the data is dropped (drop effects).</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If no drop effects or data formats are specified in the OLEStartDrag event, the manual drag will not be started.</p>
<h3>The AllowedEffects Argument</h3>
<p>
The <i>allowedeffects</i> argument specifies which drop effects the drag source supports. For example:</p>
<pre><code>Private Sub txtSource_OLEStartDrag(Data As _ 
      VB.DataObject, AllowedEffects As Long)
   AllowedEffects = vbDropEffectMove Or _ 
      vbDropEffectCopy
End Sub 
</code></pre>
<p>
The target can then query the drag source for this information and respond accordingly.</p>
<p>
The <i>allowedeffects</i> argument uses the following values to specify drop effects:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Constant</b></td>
<td class=label width=19%><b>Value</b></td>
<td class=label width=47%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=34%>vbDropEffectNone</td>
<td width=19%>0</td>
<td width=47%>Drop target cannot accept the data.</td>
</tr>
<tr valign=top>
<td width=34%>vbDropEffectCopy</td>
<td width=19%>1</td>
<td width=47%>Drop results in a copy. The original data is untouched by the drag source.</td>
</tr>
<tr valign=top>
<td width=34%>vbDropEffectMove</td>
<td width=19%>2</td>
<td width=47%>Drag source removes the data.</td>
</tr>
</table><br>
<h3>The Format Argument</h3>
<p>
You specify which data formats the object supports by setting the <i>format</i> argument of the OLEStartDrag event. To do this, you use the SetData method. For example, in a scenario using a rich text box control as a source and a text box control as a target, you might specify the following supported formats:</p>
<pre><code>Private Sub rtbSource_OLEStartDrag(Data As _
      VB.DataObject, AllowedEffects As Long)
   AllowedEffects = vbDropEffectMove Or _
      vbDropEffectCopy

   Data.SetData , vbCFText
   Data.SetData , vbCFRTF
End Sub
</code></pre>
<p>
The target can query the source to determine which data formats are supported and then respond accordingly — e.g., if the format of the dropped data is not supported by the target, reject the dropped data. In this case, the only data formats that are supported by the source are the text and rich-text formats.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "The OLE Drag and Drop DataObject Object" for more information on format values for the SetData method.</p>
<h2>Placing Data into the DataObject object</h2>
<p>
In many cases, especially if the source supports more than one format, or if it is time-consuming to create the data, you may want to place data into the DataObject object only when it is requested by the target. You can, however, place the data into the DataObject object when you begin a drag operation by using the SetData method in the OLEStartDrag event. For example:</p>
<pre><code>Private Sub txtSource_OLEStartDrag(Data As _ 
      VB.DataObject, AllowedEffects As Long)
   Data.Clear
   Data.SetData txtSource.SelText, vbCFText
End Sub 
</code></pre>
<p>
This example clears the default data formats from the DataObject object using the Clear method, specifies the data format (text) of the selected data, and then places the data into the DataObject object with the SetData method.</p>
</BODY>
</HTML>

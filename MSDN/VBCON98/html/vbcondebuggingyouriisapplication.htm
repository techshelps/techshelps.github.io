<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging your IIS Application</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondebuggingyouriisapplication"></a>Debugging your IIS Application</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDebuggingYourIISApplication_C">
</object></p>
<p>
You debug an IIS application in the same way you do any other Visual Basic application — by entering run mode from Visual Basic. Visual Basic loads the webclass run time, creates the virtual root from which to run the .asp file for the application, if necessary, and launches the system's default browser with an <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefhttp">
</object><a href=JavaScript:alink_2.Click()>HTTP</a> reference to the .asp file. The .asp file, in turn, launches the webclass.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Although you can view the .htm files associated with your application in the browser by opening them from the browser's File menu, this is not debugging your application. You must use the Start option from Visual Basic to enter debugging mode.</p>
<p>
When you debug, you have the full Visual Basic development environment at your disposal. You can use all the tools available in Visual Basic — breakpoints, watch variables, debug statements, and so on — to debug your project.</p>
<p>
Visual Basic prompts you when you debug that it is going to create a virtual directory for your project. A <i>virtual directory</i> is a directory outside your Web server's home directory that appears to browsers as a subdirectory of the home directory. It allows you to publish contents to the Web from directories outside the home directory structure. You cannot change the location of the virtual directory Visual Basic creates for the webclass.</p>
<p>
The Project Properties dialog box's Debugging panel settings determine whether the system waits for you to tell it what to do when you go into run mode or automatically starts the webclass you specify. When you choose to automatically start the webclass, Visual Basic launches Internet Explorer, navigates to the URL for your application, and fires the webclass's BeginRequest event.</p>
<p>
Visual Basic deletes all temporary files when it comes out of run mode. In addition, it destroys the instance of the Webclass Designer and restarts the designer in design mode.</p>
<p>
<b>For More Information</b>&nbsp;&nbsp;&nbsp;See "Debugging Your Code and Handling Errors" in the <i>Programmer's Guide</i> for more information on how to test and debug your IIS application.</p>
<h2>Errors in Webclasses</h2>
<p>
You can use Visual Basic's error-handling features in your IIS applications to trap errors and take corrective action. When an error occurs, Visual Basic sets the various properties of the error object, Err, such as an error number or a description. You can use the Err object and its properties in an error-handling routine so that your application can respond intelligently to an error situation.</p>
<p>
In addition to standard error handling, IIS applications allow you to use two special features to handle errors:
<ul type=disc>
<li>
You can use the Trace method to debug your application on the production computer.<br><br></li>
<li>
You can use the FatalErrorResponse event to respond to serious run-time errors.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The basics of error handling are discussed in "Debugging Your Code and Handling Errors," in the <i>Programmer's Guide</i>. For information specific to ActiveX projects, see "Generating and Handling Errors in ActiveX Components", in "Building Code Components," in the<i> Components Tools Guide</i>.</p>
<h2>Using the Trace Method</h2>
<p>
You can use the Trace method to help identify errors during the debug process and to track performance and statistical data. The Trace method sends a specified string to the Win32 OutputDebugString API. The string can then be captured to a suitable debugging tool such as DBMON.</p>
<p>
Using the Trace method can allow you to debug on your production server computer and record useful information such as information about the execution of the application, error messages that occur, and any other information you need.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Trace Method" in the <i>Language Reference</i> for more information on using this method in your error handling.</p>
<h2>Handling Fatal Errors</h2>
<p>
A fatal error on a webclass is one from which the application cannot recover or restore the appropriate webitem. For example, a fatal error might be an unhandled error within a webclass event, a structural error, or an unexpected error within the run-time DLL. Following such an error, the webclass run time fires the FatalErrorResponse event. The application is terminated and the instance of the webclass is destroyed.</p>
<p>
When a fatal error occurs, the application can write a message to the Response object in the handler for the FatalErrorResponse event. This message can be one that you write, or it can be the default message for the .asp file associated with the webclass. To write your own message, use the Response object, then set the <i>senddefault</i> argument of the FatalErrorResponse event to False. To use the default error message, leave the senddefault argument set to True.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The webclass run time provides an Error property that is only available from within the FatalErrorResponse event. This property returns an object that describes the error that caused the webclass to terminate.</p>
<p>
The webclass run time also logs fatal errors to the NT event log. On Windows 95 systems, the run-time DLL creates a log file in the Windows directory and logs the error there.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "FatalErrorResponse Event" in the <i>Language Reference</i> for more information on handling nonrecoverable errors.</p>
</BODY>
</HTML>

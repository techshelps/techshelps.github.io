<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Standard Interfaces with Visual Basic</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingstandardinterfaceswithvisualbasic"></a>Creating Standard Interfaces with Visual Basic</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingStandardInterfacesWithVisualBasicC">
</object></p>
<p>
You can create standard interfaces for your organization by compiling abstract classes in Visual Basic ActiveX DLLs or EXEs, or with the MkTypLib utility, included in the Tools directory.</p>
<p>
The MkTypLib utility may be more comfortable for you if you’re an experienced user of Microsoft Visual C++.</p>
<p>
Basic programmers may find it easier to create an interface using a Visual Basic class module. Open a new ActiveX DLL or EXE project, and add the desired properties and methods to a class module. Don’t put any code in the procedures. Give the class the name you want the interface to have, for example <code>IFinance</code>, and make the project.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The capital "I" in front of interface names is an ActiveX convention. It is not strictly necessary to follow this convention. However, it provides an easy way to distinguish between abstract interfaces you’ve implemented and the default interfaces of classes. The latter are usually referred to by the class name in Visual Basic.</p>
<p>
The type library in the resulting .dll or .exe file will contain the information required by the Implements statement. To use it in another project, use the Browse button on the References dialog box to locate the .dll or .exe file and set a reference. You can use the Object Browser to see what interfaces a type library contains.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;The Implements feature does not support outgoing interfaces. Thus, any events you declare in the class module will be ignored.</p>
<p>
As explained in "Providing Polymorphism by Implementing Interfaces," an interface once defined and accepted must remain invariant, to protect applications written to use it. <i>DO NOT </i>use the Version Compatibility feature of Visual Basic to alter standard interfaces.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The related topic "Providing Polymorphism by Implementing Interfaces" discusses such important concepts as interface invariance and factoring. "Implementing and Using Standard Interfaces" explains how interfaces are implemented and used in components.</p>
</BODY>
</HTML>

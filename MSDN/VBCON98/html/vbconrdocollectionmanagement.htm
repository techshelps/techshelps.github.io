<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RDO Collection Management</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconrdocollectionmanagement"></a>RDO Collection Management</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconRDOCollectionManagementC">
</object></p>
<p>
RDO uses a collection to manage each of the RDO objects except the RDO engine itself. Because Visual Basic version 6.0 now supports the creation of some stand-alone objects like rdoConnection and rdoQuery objects, not all objects are automatically appended to their parent collection — but in most cases, this is done automatically. Stand-alone rdoConnection and rdoQuery objects can be appended to their parent collection using the Add method and can be removed from the collection using the Remove method.</p>
<p>
The rdoParameters collection is automatically created when using the CreateQuery method. However, if the ODBC interface cannot parse the SQL syntax for any reason, this collection used to manage a query's parameters is <i>not</i> created. Therefore, any reference to the rdoParameters collection will result in a trappable error unless RDO successfully parses the SQL parameter query as specified in the SQL property of the rdoQuery object. This collection is also not populated if the ODBC data source driver does not support the SQLNumParams function or if this function returns an error.</p>
<p>
The following table lists the collections managed by RDO:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>RDO collection</b></td>
<td class=label width=63%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=37%>rdoErrors </td>
<td width=63%>Contains all stored rdoError objects which pertain to a single operation involving Remote Data Objects (RDO).</td>
</tr>
<tr valign=top>
<td width=37%>rdoEnvironments</td>
<td width=63%>Contains all active rdoEnvironment objects of the rdoEngine object. rdoEnvironments(0) is created automatically.</td>
</tr>
<tr valign=top>
<td width=37%>rdoConnections</td>
<td width=63%>Contains all rdoConnection objects opened or created in an rdoEnvironment object, or allocated and appended to the rdoConnections collection using the Add method.</td>
</tr>
<tr valign=top>
<td width=37%>rdoTables</td>
<td width=63%>Contains all stored rdoTable objects in a database.</td>
</tr>
<tr valign=top>
<td width=37%>rdoResultsets</td>
<td width=63%>Contains all open rdoResultset objects in an rdoConnection.</td>
</tr>
<tr valign=top>
<td width=37%>rdoColumns</td>
<td width=63%>Contains all rdoColumn objects of an rdoResultset or rdoTable object.</td>
</tr>
<tr valign=top>
<td width=37%>rdoQueries</td>
<td width=63%>Contains rdoQuery objects that have been added to the rdoQueries collection either automatically via the CreateQuery method, or with the Add method.</td>
</tr>
<tr valign=top>
<td width=37%>rdoParameters</td>
<td width=63%>Contains all the rdoParameter objects of an rdoQuery object once the SQL statement is successfully parsed. Contains an rdoParameter object for each marked parameter in the query.</td>
</tr>
</table><br>
<h2>RDO 1.0 Collections</h2>
<p>
RDO 1.0 objects and their collections are managed differently than RDO 2.0 objects and collections. When you open or create a new RDO 1.0 object, it is automatically appended to the collection associated with those objects, even when you set an existing variable to the newly created object.</p>
<p>
For example, the following RDO 1.0 code creates <i>two</i> independent rdoConnection objects:</p>
<pre><code>Dim Cn as rdoConnection
Set Cn = rdoEnvironments(0).OpenConnection(&nbsp; _ 
      dsname:="MyDSN", _ 
      prompt:=rdDriverNoPrompt,&nbsp; _ 
      connect:="UID=;PWD=;")
Set Cn = rdoEnvironments(0).OpenConnection(&nbsp; _ 
      dsname:="MyOtherDSN", _ 
      prompt:=rdDriverNoPrompt,&nbsp; _ 
      connect:="UID=;PWD=;")
</code></pre>
<p>
After this code is executed, both RDO 1.0 rdoConnection objects are appended as members of the rdoConnections collection. With this behavior in mind, your code must use the Close method on objects that are no longer needed as they are not automatically closed — even when assigned to the same variable. This same behavior applies to rdoResultset objects as well.</p>
<h2>RDO 2.0 Collections</h2>
<p>
In RDO 2.0, setting an existing variable to a newly created object releases or closes the existing RDO object before replacing it with the newly created RDO object. This change makes RDO work more like DAO objects.</p>
<p>
When the code shown above is executed in Visual Basic using RDO 2.0, only one rdoConnection object is created: The first rdoConnection object is closed and removed from the rdoConnections collection. If your Visual Basic version 4.0 code explicitly closes RDO connections and rdoResultset objects, you need not be concerned with backward compatibility. However, if you depend on these objects to be maintained, then you must assign new RDO objects to new variables or the original object will be lost.</p>
</BODY>
</HTML>

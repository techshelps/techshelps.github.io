<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What You Need to Know About Objects in Visual Basic</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconobjectsinvisualbasic"></a>What You Need to Know About Objects in Visual Basic</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconObjectsInVisualBasic_C">
</object></p>
<p>
Visual Basic makes using objects easy, but more importantly it makes possible a gradual transition between procedural coding and programming with objects.</p>
<p>
Of course, it helps that you've been using objects for as long as you've been using Visual Basic. The following topics will extend your understanding of Visual Basic objects and introduce some new capabilities you can take advantage of.
<ul type=disc>
<li>
<a href="vbcontheoneminuteterminologist.htm">The One-Minute Terminologist</a>&nbsp;&nbsp;&nbsp;Visual Basic object terminology in a nutshell. A road map to keep handy as you explore objects.<br><br></li>
<li>
<a href="vbcondiscoveringclassobjectbelongsto.htm">Discovering the Class an Object Belongs To</a>&nbsp;&nbsp;&nbsp;You can use the TypeOf keyword or the TypeName function to find out the class of an object.<br><br></li>
<li>
<a href="vbconcallingpropertyormethodusingstringname.htm">Calling a Property or Method Using a String Name</a>&nbsp;&nbsp;&nbsp;The CallByName function allows you to call the properties and methods of an object at run time.<br><br></li>
<li>
<a href="vbconperformingmultipleactionsonobject.htm">Performing Multiple Actions on an Object</a>&nbsp;&nbsp;&nbsp;Save typing by using the With statement to set multiple properties of an object.<br><br></li>
<li>
<a href="vbconusingdefaultpropertieswithvariants.htm">Using Default Properties</a>&nbsp;&nbsp;&nbsp;Default properties allow you to access the most important property of an object without coding the property name, but you have to be careful when using Variants.<br><br></li>
<li>
<a href="vbconcreatingarraysofobjects.htm">Creating Arrays of Objects</a>&nbsp;&nbsp;&nbsp;You can store object references in arrays, just as you can store other data types.<br><br></li>
<li>
<a href="vbconcreatingcollectionsofobjects.htm">Creating Collections of Objects</a>&nbsp;&nbsp;&nbsp;Collections often provide a more convenient way to keep a changing number of object references.<br><br></li>
<li>
<a href="vbconthevisualbasiccollectionobject.htm">The Visual Basic Collection Object</a>&nbsp;&nbsp;&nbsp;Explains the features of the generic Collection object and its properties and methods.<br><br></li>
<li>
<a href="vbconcollectionsinvisualbasic.htm">Collections in Visual Basic</a>&nbsp;&nbsp;&nbsp;Visual Basic provides many built-in collections, in addition to the Collection object. They all have their idiosyncrasies.</li>
</ul>
</BODY>
</HTML>

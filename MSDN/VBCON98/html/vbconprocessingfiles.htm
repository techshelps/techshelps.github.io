<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Processing Files with Older File I/O Statements and Functions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconprocessingfiles"></a>Processing Files with Older File I/O Statements and Functions</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconProcessingFilesC">
</object></p>
<p>
Ever since the first version of Visual Basic, files have been processed using the Open statement and other related statements and functions (listed below). These mechanisms will eventually be phased out in favor of the FSO object model, but they are fully supported in Visual Basic 6.0.</p>
<p>
If you can design your application to use database files, you will not need to provide direct file access in your application. The data control and bound controls let you read and write data to and from a database, which is much easier than using direct file-access techniques.</p>
<p>
However, there are times when you need to read and write to files other than databases. This set of topics shows how to process files directly to create, manipulate, and store text and other data.</p>
<h2>File Access Types</h2>
<p>
By itself, a <i>file</i> consists of nothing more than a series of related bytes located on a disk. When your application accesses a file, it must assume what the bytes are supposed to represent (characters, data records, integers, strings, and so on).</p>
<p>
Depending upon what kind of data the file contains, you use the appropriate file access type. In Visual Basic, there are three types of file access:
<ul type=disc>
<li>
Sequential — For reading and writing text files in continuous blocks.<br><br></li>
<li>
Random — For reading and writing text or binary files structured as fixed-length records.<br><br></li>
<li>
Binary — For reading and writing arbitrarily structured files.</li>
</ul>
<p>
<i>Sequential access</i> is designed for use with plain text files. Each character in the file is assumed to represent either a text character or a text formatting sequence, such as a newline character (NL). Data is stored as ANSI characters. It is assumed that a file opened for <i>random access</i> is composed of a set of identical-length <i>records</i>. You can employ user-defined types to create records made up of numerous fields — each can have different data types. Data is stored as binary information.</p>
<p>
<i>Binary access</i> allows you to use files to store data however you want. It is similar to random access, except there are no assumptions made about data type or record length. However, you must know precisely how the data was written to the file to retrieve it correctly.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To learn more about file access types, see "Using Sequential File Access," "Using Random File Access," and "Using Binary File Access."</p>
<h2>File Access Functions and Statements</h2>
<p>
The following functions are used with all three types of file access:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=32%>Dir</td>
<td width=32%>FileLen</td>
<td width=36%>LOF</td>
</tr>
<tr valign=top>
<td width=32%>EOF</td>
<td width=32%>FreeFile</td>
<td width=36%>Seek</td>
</tr>
<tr valign=top>
<td width=32%>FileCopy</td>
<td width=32%>GetAttr</td>
<td width=36%>SetAttr</td>
</tr>
<tr valign=top>
<td width=32%>FileDateTime</td>
<td width=32%>Loc</td>
<td width=36%></td>
</tr>
</table><br>
<p>
The following table lists all of the file access statements and functions available for each of the three types of direct file access.</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Statements &amp; Functions</b></td>
<td class=label width=25%><b>Sequential</b></td>
<td class=label width=24%><b>Random</b></td>
<td class=label width=30%><b>Binary</b></td>
</tr>
<tr valign=top>
<td width=21%>Close</td>
<td width=25%>X</td>
<td width=24%>X</td>
<td width=30%>X</td>
</tr>
<tr valign=top>
<td width=21%>Get</td>
<td width=25%></td>
<td width=24%>X</td>
<td width=30%>X</td>
</tr>
<tr valign=top>
<td width=21%>Input( )</td>
<td width=25%>X</td>
<td width=24%></td>
<td width=30%>X</td>
</tr>
<tr valign=top>
<td width=21%>Input #</td>
<td width=25%>X</td>
<td width=24%></td>
<td width=30%></td>
</tr>
<tr valign=top>
<td width=21%>Line Input #</td>
<td width=25%>X</td>
<td width=24%></td>
<td width=30%></td>
</tr>
<tr valign=top>
<td width=21%>Open</td>
<td width=25%>X</td>
<td width=24%>X</td>
<td width=30%>X</td>
</tr>
<tr valign=top>
<td width=21%>Print #</td>
<td width=25%>X</td>
<td width=24%></td>
<td width=30%></td>
</tr>
<tr valign=top>
<td width=21%>Put</td>
<td width=25%></td>
<td width=24%>X</td>
<td width=30%>X</td>
</tr>
<tr valign=top>
<td width=21%>Type...End Type</td>
<td width=25%></td>
<td width=24%>X</td>
<td width=30%></td>
</tr>
<tr valign=top>
<td width=21%>Write #</td>
<td width=25%>X</td>
<td width=24%></td>
<td width=30%></td>
</tr>
</table><br>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For additional information on file access functions and statements, look up the function or statement topic in the index.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Out-of-Process Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconhowtodebugoutofprocesscomponents"></a>Debugging Out-of-Process Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconHowToDebugOutofProcessComponentsC">
</object></p>
<p>
This topic describes debugging procedures for most objects provided by out-of-process components. ActiveX documents, however, cannot be debugged as described here. See "Building ActiveX Documents."</p>
<p class=label>
<b>To debug an out-of-process component</b>
<ol>
<li>
Set breakpoints and watch expressions as needed in your class module code.<br><br></li>
<li>
Run the component project by pressing CTRL+F5 or clicking <b>Start With Full Compile</b> on the <b>Run</b> menu.<p class=tl>
The component will compile, but Sub Main will not run until the first object is created in response to a client request.</P></li>
<li>
Start a second instance of Visual Basic, and open your test project. Set breakpoints and watch expressions as needed.<br><br></li>
<li>
Run the test project. When a breakpoint is encountered in the component code, the component project receives focus.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When an out-of-process component enters break mode, focus may not immediately switch to the component project. If you click anywhere on the client, the Component Busy dialog box will be displayed. Click <b>Switch To</b> button to give the focus to the component project.</p></li>
<li>
When you’re finished with the debugging session, close your test project before stopping the component.<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;If you stop the component project before closing your test project, all of the objects the component was providing will be destroyed. Your test project may get errors when you try to close it.</p></li>
</ol>
<h2>Start With Full Compile</h2>
<p>
Always start your out-of-process component project by pressing CTRL+F5, or by clicking Start With Full Compile on the Run menu, so that all compilation errors are resolved before your component begins supplying objects to your test application.</p>
<p>
The default in Visual Basic is to compile code on demand. This means that there may be code in your component which is not compiled until the client calls it. Some compile errors cannot be fixed without returning to design mode, which means shutting down the component. In that case, the test program is left holding invalid object references.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To disable demand compilation, select Options from the Tools menu, select the General tab of the Options dialog box, and clear Compile On Demand. This affects the current session as well as future instances of Visual Basic.</p>
<h2>Editing the Test Project</h2>
<p>
As you develop your component, you’ll frequently add new functionality between debugging sessions. Before editing your test project to add code to exercise the new features, be sure to put your component project in run mode.</p>
<p>
When the component project is not in run mode, the test project doesn’t have access to its type library. If you’re using Project Compatibility, the test project will fall back on the type library in the compiled executable. If it’s been a while since you made the executable, the type library won’t contain information on the features you’ve added.</p>
<p>
If you’re using the No Compatibility option of Version Compatibility, there will be no type library information at all.</p>
<p>
Your component project should always be in run mode when you’re editing the test project.</p>
<h2>Shutting Down an Out-of-Process Component</h2>
<p>
When you’re debugging objects that have Terminate event code, remember that the Terminate event is not executed if you stop your component project using the End button on the toolbar, or if you choose End or Restart from the Run menu.</p>
<p>
Shutting down test projects will release all the objects your component is providing to those projects. As those objects close down, they should release all references to private objects within your component.</p>
<p>
This allows your component to meet the four rules for component shutdown, as listed in "Starting and Ending a Component," in "General Principles of Component Design."</p>
<p>
Unfortunately, even when all objects have been released by your test projects, and all four shutdown conditions have been met, an out-of-process component will not return to design mode. To return to design mode, you will have to use the End button.</p>
<p>
If your component maintains internal references to objects, you can simulate normal shutdown by creating a Sub procedure that releases all such references. You can call this procedure from the Immediate window before stopping your component — or place an End statement in the Sub. However, there is no guarantee that the order in which private objects are terminated will be the same under actual shutdown conditions.</p>
<p>
The only way to accurately test shutdown behavior is with the compiled component.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Debugging causes artificial changes in focus that may prevent your code from behaving as you expect. For debugging situations that are sensitive to focus or activation, such as mouse and key events, use <code>Debug.Print</code> to log debugging information.</p>
<h2>Debugging Components as Standalone Desktop Applications</h2>
<p>
If your out-of-process component can double as a standalone desktop application, like Microsoft Excel, you have two startup and shutdown modes to test.</p>
<p>
Such applications typically have code like the following, to allow them to start up with or without a main window:</p>
<pre><code>Sub Main
   If App.StartMode = vbSModeAutomation Then
      ' ...code to start invisibly...
   Else      ' (App.StartMode = vbSModeStandalone)
      ' ...code to show main form...
   End If
End Sub
</code></pre>
<p>
StartMode is a read-only property of the App object which can be used at run time to determine whether your application was started in response to a request from a client application, or by the user, through the Start button on the Taskbar.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Do not place Sub Main in a class module. Placing Sub Main in a class module turns it into a method named Main, rather than a startup procedure. Your Sub Main procedure must be in a standard module.</p>
<p>
While debugging, you can control the mode your component starts in using the settings in the Start Mode box, on the Component tab of the Project Properties dialog box. Use the Standalone setting to start your component as if the user had opened it using the Start button on Taskbar; use the ActiveX Component setting to compile your component so that Sub Main will run when the client (your test project) first creates an object.</p>
<h2>Debugging with Multiple Clients</h2>
<p>
If you need to debug a problem that only occurs when multiple client applications are using objects from your component, you can start additional instances of Visual Basic, or compile your test project and run the .exe file to provide the extra instances. You can run as many client applications as you need.</p>
<p>
Components can be debugged whether they’re being called from a different Visual Basic project or from a client written in another language. For example, if you’re designing a component specifically for Microsoft Excel users, you may want to use Microsoft Excel as the client when you’re debugging.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"Using Break on Error in Components" explains how to use the Error Trapping options with component projects. See "Testing and Debugging ActiveX Components" for a list of topics related to testing and debugging.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What Is an ActiveX Document?</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconwhatisactivexdocument"></a>What Is an ActiveX Document?</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconWhatIsActiveXDocumentC">
</object></p>
<p>
The word "document" in "ActiveX document" is somewhat misleading. While the genesis of ActiveX documents reveals that a Microsoft Visual Basic ActiveX document is analogous to a Word document, when you create a Visual Basic ActiveX document, the distinction between a "document" and an application becomes genuinely blurred. While a traditional document (such as a Word document) is static, ActiveX documents need not be. Using Visual Basic, you can create a complete application with the semantics of a traditional document. In other words, you have the functionality of the application, but the flexibility of a document's behavior — when a user opens an ActiveX document, she will not only have the full functionality of an application, but the ability to persist and distribute "copies" of the data intrinsic to the application. Thus, the "document" is truly active.</p>
<h2>An Analogy: Word Document = ActiveX Document</h2>
<p>
ActiveX documents are not an entirely new concept. You are probably already familiar with Word documents. As you know, a Word document is not the same as the Word application — the Word document (with the extension .doc) contains the actual content, whereas the Word application (Winword.exe) is used to create the document.</p>
<p>
You may also know that a Word document can be viewed in other containers. In that case, the Word application supplies the objects that enable another ActiveX container (such as Internet Explorer) to view and activate the document. And this same mechanism works for ActiveX documents created with Visual Basic.</p>
<p>
As Figure 11.1 shows, when you create an ActiveX document-based project, you are creating a Visual Basic "document" that can be contained in an ActiveX container (such as Internet Explorer). Compiling the ActiveX document creates both a Visual Basic Document file (with the extension .vbd) and its corresponding server — which can be an ActiveX .dll, or ActiveX .exe file. In other words, the .vbd file is to the .exe or .dll file what the .doc file is to the Winword.exe file.</p>
<p class=label>
<b>Figure 11.1&nbsp;&nbsp;&nbsp;Word Documents and ActiveX Documents Compared</b></p>
<p>
<img src="avtcm108.gif" border=0>
<ul type=disc>
<li>
<a href="vbcondocumentobjectsthefutureofforms.htm">ActiveX Document Advantages</a><br><br></li>
<li>
<a href="vbconactivexdocumentcreationbasics.htm">ActiveX Document Creation Basics</a><br><br></li>
<li>
<a href="vbcontheactivexuserdocumentobject.htm">Parts of an ActiveX Document</a><br><br></li>
<li>
<a href="vbconconvertingexistingapplications.htm">Converting Existing Applications into ActiveX Documents</a><br><br></li>
<li>
<a href="vbconactivexdocumentsimilaritiestousercontrols.htm">ActiveX Document Similarities to ActiveX Controls</a><br><br></li>
<li>
<a href="vbconkeyeventsinlifeofdocumentobject.htm">Key Events in the Life of an ActiveX Document</a></li>
</ul>
</BODY>
</HTML>

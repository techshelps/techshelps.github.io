<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Reference to an Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconassigningreferencetoactivexcomponentobject"></a>Creating a Reference to an Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAssigningReferenceToActiveXComponentObjectC">
</object></p>
<p>
Before you can use an object's properties, methods, and events in your application, you must declare an object variable, then assign an object reference to the variable. How you assign an object reference depends on two factors:
<ul type=disc>
<li>
Whether the ActiveX component supplies a type library. An ActiveX component's type library contains definitions of all the objects the component provides, including definitions for all available methods, properties, and events. If an ActiveX component provides a type library, you need to add a reference to the type library in your Visual Basic project before you can use the library's objects.<br><br></li>
<li>
Whether the object is a top-level, <i>externally creatable object</i>, or a <i>dependent object.</i> You can assign a reference to an externally created object directly, while references to dependent objects are assigned indirectly.</li>
</ul>
<p>
If an object is externally creatable, you can assign an object reference to a variable by using the New keyword, CreateObject, or GetObject in a Set statement from outside the component. If the object is a dependent object, you assign an object reference by using a method of a higher-level object in a Set statement.</p>
<p>
In Microsoft Excel, for example, an Application object is an externally creatable object — you can assign a reference to it directly from your Visual Basic application by using the New keyword, CreateObject, or GetObject in a Set statement. A Range object, by contrast, is a dependent object — you assign a reference to it by using the Cells method of a Worksheet object in a Set statement. For more information on externally creatable and dependent objects, see "Navigating Object Models" later in this chapter.</p>
<p>
If the object's class is included in a type library, you can make your application run faster by creating an object reference using a variable of that specific class. Otherwise, you must use a variable of the generic Object class, which results in late binding. For more information, see "Speeding Object References."</p>
<p class=label>
<b>To create a reference to an object defined in a type library</b>
<ol>
<li>
From the <b>Project</b> menu, choose <b>References</b>.<br><br></li>
<li>
In the <b>References</b> dialog box, select the name of the ActiveX component containing the objects you want to use in your application.<br><br></li>
<li>
You can use the <b>Browse</b> button to search for the type library file containing the object you need. Type libraries can have a .tlb or .olb file-name extension. Executable (.exe) files and dynamic link libraries (dlls) can also supply type libraries, so you can also search for files with these file-name extensions.<p class=tl>
If you are not sure if an application is ActiveX-enabled and supplies a type library, try adding a reference to it using the <b>Browse</b> button. If the reference fails, Visual Basic displays the error message, "Can't add a reference to the specified file," indicating that the type library doesn't exist. For more information about working with objects that aren't associated with a type library, see "Creating a Reference to an Object."</P></li>
<li>
From the <b>View</b> menu, choose <b>Object Browser</b> to view the referenced type library. Select the appropriate type library from the <b>Project/Library</b> list. You can use all the objects, methods, and properties listed in the <b>Object Browser</b> in your application.<p class=tl>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;See "Browsing ActiveX Component Type Libraries."</P></li>
<li>
Declare an object variable of the object's class. For example, you could declare a variable of the class Excel.Chart to refer to a Microsoft Excel Chart object.<pre><code>Dim xlChart As Excel.Chart
</code></pre>
<p class=tl>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;See "Declaring an Object Variable" later in this chapter.</P></li>
<li>
Assign an object reference to the variable by using the New keyword, CreateObject, or GetObject in a Set statement. For more information, see "Assigning an Object Reference to a Variable" later in this chapter.<p class=tl>
If the object is a dependent object, assign an object reference by using a method of a higher-level object in a Set statement.</P></li>
</ol>
<p class=label>
<b>To create a reference to an object not defined in a type library</b>
<ol>
<li>
Declare an object variable of the Object data type.<p class=tl>
Because the object isn't associated with a type library, you won't be able to use the <b>Object Browser</b> to view the properties, methods, and events of the object. You need to know what properties, methods, and events the object provides, including any methods for creating a reference to a dependent object.</P><p class=tl>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;See "Declaring an Object Variable" later in this chapter.</P></li>
<li>
Assign an object reference to the variable by using CreateObject or GetObject in a Set statement. For more information, see "Assigning an Object Reference to a Variable" later in this chapter.<p class=tl>
If the object is a dependent object, assign an object reference by using a method of a higher-level object in a Set statement.</P></li>
</ol>
<h2>Ambiguous References and Reference Priority</h2>
<p>
When you refer to a constant or object in code, Visual Basic searches for the constant or object class in each type library selected in the References dialog box in the order the type libraries are displayed. If two type libraries contain constants or classes with identical names, Visual Basic uses the definition provided by the type library listed higher in the Available References box.</p>
<p class=label>
<b>Figure 10.1&nbsp;&nbsp;&nbsp;The References dialog box</b></p>
<p>
<img src="avp10001.gif" border=0></p>
<p>
The best way to handle potentially ambiguous references is to explicitly specify the type library that supplies the constant or class when you use it. For example, the constant vbCancel evaluates to different values in the Visual Basic and Visual Basic for Applications type libraries. The following code shows fully qualified and ambiguous references to the constant vbCancel:</p>
<pre><code>' Print the Visual Basic vbCancel.
Debug.Print "VB.vbCancel = "; VB.vbCancel
' Print the Visual Basic for Applications vbCancel.
Debug.Print "VBA.vbCancel = "; VBA.vbCancel
' Ambiguous reference prints the value of vbCancel
' that appears highest in the type library highest
' in the Available References list.
Debug.Print "vbCancel = "; vbCancel
</code></pre>
<p>
The following code example shows fully qualified and ambiguous declarations for an Application object variable. If Microsoft Word appears higher in the Available References box than Microsoft Excel, xlApp2 is declared using the Microsoft Word Application class rather than the Microsoft Excel Application class.</p>
<pre><code>' Fully qualified object variable declaration.
Dim xlApp1 As Excel.Application
' Ambiguous object variable declaration.
Dim xlApp2 As Application

' Assign an object reference.
Set xlApp1 = New Excel.Application
' The following generates a type mismatch error.
Set xlApp2 = xlApp1
</code></pre>
<p>
You may be tempted to handle potentially ambiguous references by changing the order in which Visual Basic searches for references. The References dialog box includes two Priority buttons that let you move a type library higher in the list, so that its constants and classes will be found sooner than constants or classes with identical names lower on the list. However, changing the priority order can cause unexpected problems in your applications if there are other ambiguous references. In general, it's better to explicitly specify the type library in any references.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Excel.Application syntax for referring to the Microsoft Excel Application class is not supported in versions prior to Microsoft Excel 97. To refer to the Microsoft Excel Application class in Microsoft Excel 5.0 and Microsoft Excel 95, use the syntax [_ExcelApplication] instead. For example:</p>
<pre><code>Set xlApp = New [_ExcelApplication]
</code></pre>
</BODY>
</HTML>

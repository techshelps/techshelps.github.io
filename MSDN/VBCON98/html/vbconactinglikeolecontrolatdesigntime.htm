<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Allowing Developers to Put Controls on Your Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconactinglikeolecontrolatdesigntime"></a>Allowing Developers to Put Controls on Your Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconActingLikeOLEControlAtDesignTimeC">
</object></p>
<p>
Some controls can act as containers for other controls. For example, if you place controls on a Visual Basic PictureBox control, all of the controls move when you move the PictureBox. Visual Basic users take advantage of this capability to group controls, produce scrollable pictures, and so on.</p>
<p>
You can allow developers to place controls on your ActiveX control by setting the ControlContainer property of the UserControl object to True.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Lightweight user controls cannot act as control containers. If the Windowless property of a UserControl object is set to True, the ControlContainer property will be ignored. Lightweight user controls are discussed in detail in "Creating Lightweight Controls" later in this chapter.</p>
<p>
Controls a developer places on an instance of your ActiveX control can be accessed using the ContainedControls collection of the UserControl object. You can use this collection at either design time or run time.</p>
<h4>The ContainedControls Collection vs. the Controls Collection</h4>
<p>
The ContainedControls collection is different from the Controls collection, which contains only the constituent controls you have used in designing your ActiveX control. This is illustrated in Figure 9.7, which supposes that the ShapeLabel control's ControlContainer property is True.</p>
<p class=label>
<b>Figure 9.7&nbsp;&nbsp;&nbsp;The Controls and ContainedControls collections</b></p>
<p>
<img src="avtcm043.gif" border=0></p>
<h4>Availability of the ContainedControls Collection</h4>
<p>
You cannot access the ContainedControls collection in the Initialize event of your UserControl object. Support for the ControlContainer feature is provided by the object your control is placed on, so your control must be sited on the container object before ContainedControls is available. When the UserControl object receives its ReadProperties event, siting has occurred.</p>
<p>
Once your control is sited, and support for the ControlContainer feature is present, the ContainedControls collection may not immediately contain references to the controls a developer has placed on your control. For example, if your control is on a Visual Basic form, the Count property of the ContainedControls collection will be zero until after the UserControl_ReadProperties event procedure has executed.</p>
<h3>Performance Impact of ControlContainer</h3>
<p>
There is extra overhead required to allow a developer to place controls on instances of your ActiveX control. Clipping must be done for the contained controls, which must appear on top of all the constituent controls in your UserControl, and of course the ContainedControls collection must be maintained.</p>
<p>
In other words, controls that serve as containers for other controls are heavyweight controls.</p>
<p>
For best performance of your controls, you should set ContainedControls to True only if it makes sense for a particular control. For example, it doesn't make much sense for a control assembly like an Address Control to be a container for other controls.</p>
<h3>Support for ControlContainer</h3>
<p>
ControlContainer support will not work for every container your control may be placed on. Visual Basic forms support the <i>ISimpleFrame</i> interface that enables the ControlContainer feature, so your control can always support this capability on a Visual Basic form.</p>
<p>
If an instance of your control is placed on a container that is not aware of ISimpleFrame, ControlContainer support will be disabled. Your control will continue to work correctly in all other ways, but developers will be unable to place other controls on an instance of your control.</p>
<p>
In order for the ContainedControls collection to be available, an ISimpleFrame-aware container must implement the IVBGetControls interface. Calls to the collection will cause errors if the container does not implement this interface, so it's a good idea to use error handling when you access the collection.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Controls a developer places on a container with a transparent background are not visible. If you want your control to be used as a control container by developers, don't give it a transparent background.</p>
</BODY>
</HTML>

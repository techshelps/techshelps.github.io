<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the DataGrid Control with a Class Module</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingdatagridcontrolwithdataclassmodule"></a>Using the DataGrid Control with a Class Module</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingDataGridControlWithDataClassModuleC">
</object></p>
<p>
If the data you want to access exists in a custom format, or in a form not directly supported by an ODBC driver, you can create a class to encapsulate the data. You can then program the class with customized functions to retrieve the data. The class then becomes a data source that can be used by any data consumer, such as the DataGrid control.</p>
<p>
In the class module's Initialize event, you first create an ADODB recordset object by declaring a variable as New ADODB.Recordset. After creating the recordset object, append fields to it, one for each field in your data source. Then fill the recordset with the appropriate data.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can also create a data source using an OLEDB Simple Provider. See "Creating a Component with a Data Provider" for more information about OLEDB Simple Providers.</p>
<p>
The class module features a GetDataMember event that occurs whenever a data consumer (such as the DataGrid control) requests data. In the event, the Data argument is set to the recordset object created in the Initialize event.</p>
<p>
To use the class module, create a form with a DataGrid control on it. In the form's Load event, place code that sets the control's DataSource property to the class.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>The class module won't be available at design-time. For example, with the DataGrid control, all available data sources appear in a drop-down list when the user clicks DataSource on the Properties window. The class module will not appear among them, and can only be set through code.</p>
<h3>Create a Data Source Using the Class Module</h3>
<p>
The example below uses a class module to create a simple data source. The DataGrid control is then bound to the module through the DataSource property.</p>
<p class=label>
<b>To create a class for use with the DataGrid</b>
<ol>
<li>
Create a new <b>Standard Exe </b>project.<br><br></li>
<li>
Add a <b>DataGrid</b> control to the form.<p class=tl>
If the DataGrid control is not available in the <b>Toolbox</b>, on the <b>Project</b> menu, click <b>Components</b>. Click <b>Microsoft DataGrid Control</b>, then click <b>OK</b>.</P></li>
<li>
On the <b>Project</b> menu, click References. On the References dialog box, click <b>Microsoft ActiveX Data Objects 2.0 Library</b>.<br><br></li>
<li>
On the <b>Project</b> menu, click <b>Add Class Module</b> to add a class module to the project.<br><br></li>
<li>
In the <b>Project Explorer </b>window, click the <b>Class </b>icon to select it, and press F4 to display the <b>Properties</b> window.<br><br></li>
<li>
On the Properties window, change the name of the class to <b>NamesData</b>.<br><br></li>
<li>
On the Properties window, click <b>DataSourceBehavior </b>and change the property to <b>vbDataSource</b>.<br><br></li>
<li>
In the Declarations section of the class module, create an ADODB Recordset variable, as shown below:<pre><code>Option Explicit
Private WithEvents rsNames As ADODB.RecordSet
</code></pre>
<p class=tl>
Declaring the variables using the WithEvents keyword allows you to program the RecordSet object events.</P></li>
<li>
In the class Initialize event, add the following code:<pre><code>Private Sub Class_Initialize()
 &nbsp; ' Add the names of the new datamember to the DataMember collection
 &nbsp; ' This allows other objects to see the available DataMembers
 &nbsp; DataMembers.Add "Names"&nbsp;&nbsp; 

 &nbsp; Set rsNames = New ADODB.RecordSet ' Set the object variable.

 &nbsp; ' Create a recordset with two fields and open the recordset. The 
 &nbsp; ' first record has an integer data type and the second is a string, 
 &nbsp; ' with a maximum of 256 characters. The CursorType is set to 
 &nbsp; ' OpenStatic--an updatable snapshot of a set of records. The 
 &nbsp; ' LockType is set to LockOptimistic to allow updates to the 
 &nbsp; ' recordset
 &nbsp; With rsNames&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; .Fields.Append "ID", adInteger
 &nbsp;&nbsp;&nbsp;&nbsp; .Fields.Append "Name", adBSTR, 255
 &nbsp;&nbsp;&nbsp;&nbsp; .CursorType = adOpenStatic
 &nbsp;&nbsp;&nbsp;&nbsp; .LockType = adLockOptimistic
 &nbsp;&nbsp;&nbsp;&nbsp; .Open
 &nbsp; End With

 &nbsp; Dim i As Integer
 &nbsp; For i = 1 to 10 ' Add ten records.
 &nbsp;&nbsp;&nbsp;&nbsp; rsNames.AddNew 
 &nbsp;&nbsp;&nbsp;&nbsp; rsNames!ID = i
 &nbsp;&nbsp;&nbsp;&nbsp; rsNames!Name = "Name " &amp; i
 &nbsp;&nbsp;&nbsp;&nbsp; rsNames.Update
 &nbsp; Next i
 &nbsp; rsNames.MoveFirst ' Move to the beginning of the recordset.
End Sub
</code></pre>
<p class=tl>
The code first creates the recordset object, then appends two fields to the recordset. The code then adds ten records to the recordset.</P></li>
<li>
In the class GetDataMember event, add the following code:<pre><code>Private Sub Class_GetDataMember(ByVal DataMember As String, _
Data As Object)
 &nbsp; Set Data = rsNames
End Sub
</code></pre>
<p class=tl>
The code returns the recordset object whenever the event occurs — whenever the class object is bound to a data consumer, such as the DataGrid control.</P></li>
<li>
In the Form object's code module, declare an object variable for the class:<pre><code>Option Explicit
Private datNames As NamesData ' Class variable
</code></pre>
</li>
<li>
In the Form object's Load event, add the code to set the DataGrid control's DataSource to the class object.<pre><code>Private Sub Form_Load()
 &nbsp; ' Create a new NamesData Object
 &nbsp; Set datNames = New NamesData
 &nbsp;&nbsp; 
 &nbsp; ' Bind the DataGrid to the new DataSource datNames
 &nbsp;&nbsp; Set DataGrid1.DataSource = datNames
End Sub
</code></pre>
</li>
<li>
Press F5 to run the project.</li>
</ol>
<h4>Programming the RecordSet Events</h4>
<p>
You can also program the events of the Recordset object. In the class module, click the Object Box (in the upper left corner), and then click <b>rsNames</b>. In the Procedures/Events box (upper right corner), the drop-down list will display all of the events of the Recordset object.</p>
<h4>Add a Property to the Class</h4>
<p>
The class module can also be modified to respond to events or function calls. The code below shows how you can first add a property to the class. When invoked from another object, the property returns the RecordCount of the class.</p>
<pre><code>Public Property Get RecordCount() As Long
   RecordCount = rsNames.RecordCount
End Sub
</code></pre>
<h4>Using the DataMember Property</h4>
<p>
The GetDataMember event also includes the DataMember argument. Using this argument, you can include more than one recordset in the class module, and return the appropriate recordset by using a Select Case statement with the DataMember argument:</p>
<pre><code>Private Sub Class_GetDataMember(ByVal DataMember As String, Data As _
Object)
   Select Case DataMember
   Case "Names"
      Set Data = rsNames
   Case "Dates"
      Set Data = rsDates
   Case Else
      ' Set a default data member.
      Set Data = rsYears
   End Select
End Sub
</code></pre>
<p>
To specify which DataMember you want, set the DataMember property of the data consumer to the appropriate string, then set the DataSource as usual. For the DataGrid control, this would be:</p>
<pre><code>Private Sub Form_Load()
   ' Create a new NamesData Object
   Set datNames = New NamesData

   ' Specify which DataMember you want, then set DataSource.
   DataGrid1.DataMember = "Names"
   Set DataGrid1.DataSource = datNames

End Sub
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Custom Data Format</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingcustomdataformat"></a>Creating a Custom Data Format</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingCustomDataFormatC">
</object></p>
<p>
If the formats supplied in Visual Basic are insufficient for some specific purpose, you can create a custom data format for use in an OLE drag-and-drop operation. For example, a custom data format is useful if your application defines a unique data format that you need to drag between two instances of your application, or just within the application itself.</p>
<p>
To create a custom data format, you have to call the Windows API RegisterClipboardFormat function. For example:</p>
<pre><code>Private Declare Function RegisterClipboardFormat Lib _ 
      "user32.dll" Alias "RegisterClipboardFormatA" _
      (ByVal lpszFormat$) As Integer
Dim MyFormat As Integer
</code></pre>
<p>
Once defined, you can use your custom format as you would any other DataObject object data format. For example:</p>
<pre><code>Dim a() As Byte
a = Data.GetData(MyFormat)
</code></pre>
<p>
To use this functionality, you have to place data into and retrieve data from the DataObject object as a Byte array. You can then assign your custom data format to a string variable because it is automatically converted.</p>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;Retrieving your custom data format with the GetData method may yield unpredictable results.</p>
<p>
Because Visual Basic doesn’t understand your custom data format (because you defined it), it doesn’t have a way to determine the size of the data. Visual Basic can determine the memory size of the Byte array because it has been allocated by Windows, but the operating system usually assigns more memory than is needed.</p>
<p>
Therefore, when you retrieve a custom data format, you get back a Byte array containing at least, and possibly more than, the number of bytes that the source actually placed into the DataObject object. You must then correctly interpret your custom data format when it is retrieved from the DataObject object. For example, in a simple string, you have to search for the NULL character and then truncate the string to that length.</p>
</BODY>
</HTML>

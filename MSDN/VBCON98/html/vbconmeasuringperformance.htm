<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Measuring Performance</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmeasuringperformance"></a>Measuring Performance</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconMeasuringPerformanceC">
</object></p>
<p>
Determining the best algorithm for a given situation isn’t always obvious. Sometimes you’ll want to test your hypotheses; this can be easily done by creating a simple application to measure performance, as shown below. The Optimize.vbp sample application also contains examples of several different test scenarios.</p>
<p class=label>
<b>To create a performance testing application</b>
<ol>
<li>
Open a new .exe project.<br><br></li>
<li>
Create a form with two command buttons: Command1 and Command2.<br><br></li>
<li>
In the Command1_Click Event add the following code:<pre><code>Private Sub Command1_Click()
Dim dblStart As Double
Dim dblEnd As Double
Dim i as Long

dblStart = Timer        ' Get the start time.

For i = 0 To 9999
<i>Routine to test</i>    ' Enter your routine here.
Next

dblEnd = Timer            ' Get the end time.

Debug.Print dblEnd - dblStart    ' Display the 
' elapsed time.
End Sub
</code></pre>
</li>
<li>
Add the same code to the Command2_Click event, substituting the second version of your routine inside the loop.<br><br></li>
<li>
Run the application and monitor the results in the Immediate window.</li>
</ol>
<p>
This example uses the default property of Visual Basic’s Timer class to time the execution of the routine within the loop. By placing your code inside the loop for each command button, you can quickly compare the performance of two algorithms. The code can be within the loop or can be a call to other procedures.</p>
<p>
You may need to experiment with different values for the upper bounds of the loop counter, especially for fast routines. Make sure that you run each version several times to get an average; results can vary from one run to the next.</p>
<p>
You can also optimize your application by increasing data access speed.</p>
</BODY>
</HTML>

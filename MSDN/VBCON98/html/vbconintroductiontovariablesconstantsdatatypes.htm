<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Introduction to Variables, Constants and Data Types</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconintroductiontovariablesconstantsdatatypes"></a>Introduction to Variables, Constants and Data Types</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconIntroductionToVariablesConstantsDataTypesC">
</object></p>
<p>
You often need to store values temporarily when performing calculations with Visual Basic. For example, you might want to calculate several values, compare them, and perform different operations on them, depending on the result of the comparison. You need to retain the values if you want to compare them, but you don't need to store them in a property.</p>
<p>
Visual Basic, like most programming languages, uses <i>variables</i> for storing values. Variables have a name (the word you use to refer to the value the variable contains) and a <i>data type</i> (which determines the kind of data the variable can store). <i>Arrays</i> can be used to store indexed collections of related variables.</p>
<p>
<i>Constants</i> also store values, but as the name implies, those values remain constant throughout the execution of an application. Using constants can make your code more readable by providing meaningful names instead of numbers. There are a number of built-in constants in Visual Basic, but you can also create your own.</p>
<p>
<i>Data types</i> control the internal storage of data in Visual Basic. By default, Visual Basic uses the Variant data type. There are a number of other available data types that allow you to optimize your code for speed and size when you don't need the flexibility that Variant provides.</p>
<p>
For more detailed information, see:</p>
<ul type=disc>
<li>
<a href="vbconvariables.htm">Variables</a>&nbsp;&nbsp;&nbsp;An introduction to variables: what they are and how to use them.</li>
<li>
<a href="vbconunderstandingscopeofvariables.htm">Understanding the Scope of Variables</a>&nbsp;&nbsp;&nbsp;A discussion of scope as it applies to variables.</li>
<li>
<a href="vbconadvancedvariabletopics.htm">Advanced Variable Topics</a>&nbsp;&nbsp;&nbsp;Detailed information about variables.</li>
<li>
<a href="vbconstaticvariables.htm">Static Variables</a>&nbsp;&nbsp;&nbsp;An introduction to using static variables to preserve values.</li>
<li>
<a href="vbconconstants.htm">Constants</a>&nbsp;&nbsp;&nbsp;An introduction to using constants to represent values.</li>
<li>
<a href="vbcondatatypes.htm">Data Types</a>&nbsp;&nbsp;&nbsp;A discussion of the data types available in Visual Basic.</li>
<li>
<a href="vbconadvancedvarianttopics.htm">Advanced Variant Topics</a>&nbsp;&nbsp;&nbsp;Detailed information about the Variant data type.</li>
<li>
<a href="vbconarrays.htm">Arrays</a>&nbsp;&nbsp;&nbsp;An introduction to the use of arrays for groups of values.</li>
<li>
<a href="vbcondynamicarrays.htm">Dynamic Arrays</a>&nbsp;&nbsp;&nbsp;A discussion of using dynamic arrays to work with groups of values.</li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property Procedures vs. Public Variables</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconpropertyproceduresvspublicvariables"></a>Property Procedures vs. Public Variables</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPropertyProceduresVsPublicVariablesC">
</object></p>
<p>
Property procedures are clearly such a powerful means for enabling encapsulation that you may be wondering if you should even bother with public variables. The answer, as always in programming, is "Of course — sometimes." Here are some ground rules:</p>
<p>
Use property procedures when:
<ul type=disc>
<li>
The property is read-only, or cannot be changed once it has been set.<br><br></li>
<li>
The property has a well-defined set of values that need to be validated.<br><br></li>
<li>
Values outside a certain range — for example, negative numbers — are valid for the property's data type, but cause program errors if&nbsp; the property is allowed to assume such values.<br><br></li>
<li>
Setting the property causes some perceptible change in the object's state, as for example a Visible property.<br><br></li>
<li>
Setting the property causes changes to other internal variables or to the values of other properties.</li>
</ul>
<p>
Use public variables for read-write properties where:
<ul type=disc>
<li>
The property is of a self-validating type. For example, an error or automatic data conversion will occur if a value other than True or False is assigned to a Boolean variable.<br><br></li>
<li>
Any value in the range supported by the data type is valid. This will be true of many properties of type Single or Double.<br><br></li>
<li>
The property is a String data type, and there's no constraint on the size or value of the string.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Don't implement a property as a public variable just to avoid the overhead of a function call. Behind the scenes, Visual Basic will implement the public variables in your class modules as pairs of property procedures anyway, because this is required by the type library.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The capabilities of property procedures are explored further in "Putting Property Procedures to Work for You."</p>
</BODY>
</HTML>

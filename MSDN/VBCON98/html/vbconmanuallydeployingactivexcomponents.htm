<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Manually Deploying ActiveX Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmanuallydeployingactivexcomponents"></a>Manually Deploying Code Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconManuallyDeployingActiveXComponents_C">
</object></p>
<p>
Code components are .exe or .dll files, rather than .ocx files. For client-side deployment, you can reference and script ActiveX components with the same kinds of HTML and VBScript code you might use for ActiveX controls. You perform the following steps to deploy a code component to a client:
<ol>
<li>
Use HTML to create a page containing an element to launch the display of the component. For example, you might create a button that would launch the component. Include a name for the element to use in script, a type to show on the page, and a "value" — similar to the Caption property of a command button in Visual Basic.<p class=tl>
The following code shows a sample of what your HTML might look like for a button that references a Login dialog box:</P><pre><code>&lt;FORM NAME="LoginButton"&gt;
Click here to log in:
&lt;INPUT NAME="cmdLogin" TYPE="Button" VALUE="Log in…"&gt;
&lt;/FORM&gt;
</code></pre>
</li>
<li>
Use the OBJECT tag to provide a means for the browser to download, register, and reference the ActiveX component. The OBJECT tag includes the component's class ID, a unique identifier used to reference the component, and a CODEBASE attribute to tell the browser where to find the component.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;See "Manually Deploying ActiveX Controls" for an example of the OBJECT tag.</p></li>
<li>
Use VBScript to show the component. The following shows an example of how you would do this for a login dialog component:<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
' Create variables for the HTML form containing the 
' button, and for the object exposing the method that 
' shows the dialog box.
Dim dlgLogin
Dim TheForm
Set TheForm = ActiveX document.LoginButton
' Include a procedure that shows the dialog box
' when the button is clicked.
Sub cmdLogin_onClick
Set dlgLogin = Login
dlgLogin.ShowDialog
End Sub
&lt;/SCRIPT&gt;
</code></pre>
</li>
</ol>
<p>
In this example, the component itself would include code that forms the login string and sends it to the server for validation.</p>
</BODY>
</HTML>

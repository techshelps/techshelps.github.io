<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Limitations</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondatalimitations"></a>Data Limitations</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDataLimitationsC">
</object></p>
<p>
The following limitations apply to variables in the Visual Basic language.</p>
<h2>Form, Standard, and Class Module Data</h2>
<p>
The data segment (that is, the data defined in the Declarations section) of the VBA module of any form or module in Visual Basic can be up to 64K. This data segment contains the following data:
<ul type=disc>
<li>
Local variables declared with Static.<br><br></li>
<li>
Module-level variables other than arrays and variable-length strings.<br><br></li>
<li>
4 bytes for each module-level array and variable-length string.</li>
</ul>
<h2>Procedures, Types, and Variables</h2>
<p>
If a procedure or module exceeds the 64K code limit, Visual Basic generates a compile-time error.</p>
<p>
If you define a procedure that has more than 64K of local variables defined, you get the error "Too many local nonstatic variables."</p>
<p>
If you define a module that has more than 64K of module-level variables defined, or if you define a User-Defined Type larger than 64K, you get the error "Fixed or static data can't be larger than 64K."</p>
<p>
If you encounter this error, you can avoid it by breaking extremely large procedures into several smaller procedures, or by moving module-level declarations into another module.</p>
<p>
An array declared as a variable doesn't contribute to the entire size of the array; only the array descriptor counts toward the 64K limit. So it is acceptable, for example, to have a declaration such as <code>Dim x(1000000) As Byte</code> either in a procedure or at module level. Out of memory problems occur, however, if you declare a large, fixed-size array in a record, then declare instances of those records as variables.</p>
<h2>User-Defined Types</h2>
<p>
No variable of a user-defined type can exceed 64K, although the sum of variable-length strings in a user-defined type may exceed 64K (variable-length strings occupy only 4 bytes each in the user-defined type; the actual contents of a string are stored separately). User-defined types can be defined in terms of other user-defined types, but the total size of the types cannot exceed 64K.</p>
<h2>Stack Space</h2>
<p>
Arguments and local variables in procedures take up stack space at run time. Module-level and static variables do not take up stack space because they are allocated in the data segment for forms or modules. Any DLL procedures you call use this stack while they are executing.</p>
<p>
Visual Basic itself uses some of the stack for its own purposes, such as storing intermediate values when evaluating expressions.</p>
<p>
Total available stack size for Visual Basic is one megabyte (1MB) per thread. A stack may grow beyond this, however, if there is adjacent free memory.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For tips on conserving stack space, see "Designing for Performance and Compatibility."</p>
</BODY>
</HTML>

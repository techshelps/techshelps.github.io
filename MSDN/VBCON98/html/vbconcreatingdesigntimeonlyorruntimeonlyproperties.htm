<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Design-Time-Only, Run-Time-Only, or Read-Only Run-Time Properties</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingdesigntimeonlyorruntimeonlyproperties"></a>Creating Design-Time-Only, Run-Time-Only, or Read-Only Run-Time Properties</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingDesignTimeOnlyOrRunTimeOnlyPropertiesC">
</object></p>
<p>
To create a property that can be read at run time, but can be set only at design time, implement the property using property procedures. In the Property Let or Property Set procedure, test the UserMode property of the AmbientProperties object. If UserMode is True, raise an error, as shown in the following code fragment:</p>
<pre><code>Private mdblSerendipity As Double

Property Get Serendipity() As Double
   Serendipity = mdblSerendipity
End Property

Property Let Serendipity() As Double
   ' (Code to validate property values omitted.)
   If Ambient.UserMode Then 
      Err.Raise Number:=382 _
         Description:= _
         "Let/Set not supported at run time."
   End If
   Serendipity = mdblSerendipity
   PropertyChanged "Serendipity"
End Property
</code></pre>
<p>
To suppress a property completely at run time, you can also raise a "Property is not available at run time" error in Property Get.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Implementing properties of the Variant data type requires all three property procedures, Property Get, Property Let, and Property Set, because the user can assign any data type, including object references, to the property. In that case, the error raised in Property Let must also be raised in Property Set.</p>
<h3>Error Values to Use for Property Errors</h3>
<p>
The following error values are provided by Visual Basic and should be used when raising errors for read-only or write-only properties:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=19%><b>Err.Number</b></td>
<td class=label width=81%><b>Err.Description</b></td>
</tr>
<tr valign=top>
<td width=19%>382</td>
<td width=81%>Let/Set not supported at run time.</td>
</tr>
<tr valign=top>
<td width=19%>383</td>
<td width=81%>Let/Set not supported at design time.</td>
</tr>
<tr valign=top>
<td width=19%>393</td>
<td width=81%>Get not supported at run time.</td>
</tr>
<tr valign=top>
<td width=19%>394</td>
<td width=81%>Get not supported at design time.</td>
</tr>
</table><br>
<p>
If a property is read-only at run time and UserMode is True, raise error 382 in the Property Let or Property Set procedure. If a property is not available at run time, raise error 382 in the Let or Set procedure and error 383 in the Get procedure. Likewise, if a property is not available at design time, raise error 393 in the Let or Set procedure and error 394 in the Get procedure.</p>
<h3>Handling Read-Only Run-Time Properties in the ReadProperties Event</h3>
<p>
The recommended practice for the ReadProperties event is to assign the retrieved value to the property, so that the Property Let is invoked. This allows the validation code in the Property Let to handle invalid values the user has manually entered into the container's source file, as described in "Saving the Properties of Your Control."</p>
<p>
Clearly, this is problematic for read-only run-time properties. The solution is to bypass the Property Let, and assign the retrieved value directly to the private member or constituent control property. If the property accepts only certain values, you can use a helper function that can be called from both Property Let and ReadProperties.</p>
<p>
The following code fragment illustrates these two solutions:</p>
<pre><code>Private Sub UserControl_ReadProperties(PropBag As _
      PropertyBag)
   ' Always use error trapping in ReadProperties!
   On Error Resume Next
   ' Retrieve the value of the HasWidgets property,
   ' which is read-only at run time.
   mblnHasWidgets = _
      PropBag.ReadProperty("HasWidgets", False)
   If Err.Number &lt;&gt; 0 Then
      ' If the .frm file contained a value that caused
      '&nbsp;&nbsp; a type mismatch (error 13), substitute the
      '&nbsp;&nbsp; default value for the property.
      mblnHasWidgets = False
      ' When using On Error Resume Next, always
      '&nbsp;&nbsp; reset Err.Number after an error.
      Err.Number = 0
   End If

   ' Retrieve the value of the Appearance property,
   ' which can be set at design time
   ' and has two valid values, Appears3D
   ' and AppearsFlat.&nbsp; (These constants should be 
   ' defined in a Public Enum.)
   mintAppearance = _
      PropBag.ReadProperty("Appearance", Appears3D)
   ' Validate the value retrieved from the .frm
   '&nbsp;&nbsp; file.
   Call ValidateAppearance(mintAppearance)
   If Err.Number &lt;&gt; 0 Then
      ' If the .frm file contained an invalid integer
      '&nbsp;&nbsp; value (error 380) or a value that caused a
      '&nbsp;&nbsp; type mismatch (error 13), substitute the
      '&nbsp;&nbsp; default value for the property.
      mintAppearance = Appears3D
      ' When using On Error Resume Next, always
      '&nbsp;&nbsp; reset Err.Number after an error.
      Err.Number = 0
   End If

   ' . . . more properties . . .
End Sub
</code></pre>
<p>
The Property Let for the Appearance property would call the same ValidateAppearance helper function used in the example above, but would not trap errors — thus the error would be raised at the line of code that assigned the invalid value. The helper function might look something like this:</p>
<pre><code>Private Sub ValidateAppearance(ByVal Test As Integer)
   Select Case Test
      Case Appears3D
      Case AppearsFlat
      Case Else
         ' Error 380 is the standard "Invalid property
         '&nbsp;&nbsp; value" error.
         Err.Raise 380
   End Select
End Sub
</code></pre>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;If the wrong data type is entered in the source file, a type mismatch error will occur. Thus, errors can occur even for a Boolean or numeric property. (This is why you should <i>always</i> use error trapping in ReadProperties.) You can trap the error with On Error Resume Next, as above, and substitute the default value for the property.</p>
<h2>Creating Run-Time-Only Properties</h2>
<p>
You can create a property that is available only at run time by causing property procedures to fail during design time (that is, when the UserMode property of the AmbientProperties object is False).</p>
<p>
Visual Basic's Properties window does not display properties that fail during design-time.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can open the Procedure Attributes dialog box, select your run-time-only property, click the Advanced button, and check "Don't show in Property Browser" to prevent the Properties window from interrogating the property. This keeps the Properties window from putting you in break mode every time it queries the property, which is a nuisance when you're debugging design-time behavior.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Your Own Collection Classes</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingyourowncollectionclasses"></a>Creating Your Own Collection Classes</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingYourOwnCollectionClassesC">
</object></p>
<p>
There are three general approaches you can take to implementing object containment using collections. Consider the Employees collection of the SmallBusiness object discussed in "Object Models." To implement this collection you might:
<ul type=disc>
<li>
In the SmallBusiness class module, declare an <code>Employees</code> variable As Collection, and make it Public. This is the cheap solution.<br><br></li>
<li>
In the SmallBusiness class module, declare an <code>mcolEmployees</code> variable As Collection, and make it Private. Give the SmallBusiness object a set of methods for adding and deleting objects. This is the least object-oriented of the three designs.<br><br></li>
<li>
Implement your own collection class, by creating a collection class module named Employees, as described later in this chapter. Give the SmallBusiness object a read-only property of the Employees class.</li>
</ul>
<p>
The strategies are listed in order of increasing robustness. They could be characterized as the house of straw, house of sticks, and house of bricks approaches.
<ul type=disc>
<li>
<a href="vbconpubliccollectionexamplethehouseofstraw.htm">Public Collection Example: The House of Straw</a>&nbsp;&nbsp;&nbsp;The Collection object's very flexibility betrays it — you can put anything into a Collection, including the KitchenSink object.<br><br></li>
<li>
<a href="vbconprivatecollectionexamplethehouseofsticks.htm">Private Collection Example: The House of Sticks</a>&nbsp;&nbsp;&nbsp;You can gain some robustness by making the Collection object private, but you lose the ability to use For Each … Next with the collection.<br><br></li>
<li>
<a href="vbconcreatingyourownclasscollectionthehouseofbricks.htm">Creating Your Own Collection Class: The House of Bricks</a>&nbsp;&nbsp;&nbsp;Creating your own collection class gives you the robustness of encapsulation, and as a bonus you get back the ability to use For Each … Next.<br><br></li>
<li>
<a href="vbconthebenefitsofgoodobjectorienteddesign.htm">The Benefits of Good Object-Oriented Design</a>&nbsp;&nbsp;&nbsp;Collection classes lead to cleaner, safer code.</li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Arrays of Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingarraysofobjects"></a>Creating Arrays of Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingArraysOfObjectsC">
</object></p>
<p>
You can declare and use arrays of an object type just as you declare and use an array of any data type. These arrays can be fixed-size or dynamic.</p>
<h2>Arrays of Form Variables</h2>
<p>
You can declare an array of forms with Private, Dim, ReDim, Static, or Public in the same way you declare an array of any other type. If you declare the array with the New keyword, Visual Basic automatically creates a new instance of the form for each element in the array as you use the elements in the array.</p>
<pre><code>Private Sub Command1_Click ()
   Dim intX As Integer
   Dim frmNew(1 To 5) As New Form1
   For intX = 1 To 5
      frmNew(intX).Show
      frmNew(intX).WindowState = vbMinimized
      ' To create minimized forms without having them
      ' first appear briefly at normal size, reverse
      ' the order of the two lines above.
   Next
End Sub
</code></pre>
<p>
Pressing the command button to execute the code above will create five minimized instances of Form1.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you look at the Task Bar, you'll see Form1 <i>six</i> times. The extra instance of Form1 isn't minimized — it's the one you started with.</p>
<h2>Arrays of Control Variables</h2>
<p>
You can declare an array of controls with Private, Dim, ReDim, Static, or Public in the same way you declare an array of any other type. Unlike form arrays, however, control arrays cannot be declared with the New keyword. For example, you can declare an array to be a specific control type:</p>
<pre><code>ReDim ActiveImages(10) As Image
</code></pre>
<p>
When you declare an array to be a particular control type, you can assign only controls of that type to the array. In the case of the preceding declaration, for example, you can only assign image controls to the array — but those image controls can come from different forms.</p>
<p>
Contrast this with the built-in Controls collection, which can contain many different types of controls — all which must be on the same form.</p>
<p>
Alternatively, you can declare an array of generic control variables. For example, you might want to keep track of every control that was dropped onto a particular control, and not allow any control to be dropped more than once. You can do this by maintaining a dynamic array of control variables that contains references to each control that has been dropped:</p>
<pre><code>Private Sub List1_DragDrop(Source As VB.Control, _
      X As Single, Y As Single)
   Dim intX As Integer
   Static intSize As Integer
   Static ctlDropped() As Control
   For intX = 1 To intSize
      ' If the dropped control is in the array, it's
      ' already been dropped here once.
      If ctlDropped(intX) Is Source Then
         Beep
         Exit Sub
      End If
   Next
   ' Enlarge the array.
   intSize = intSize + 1
   ReDim Preserve ctlDropped(intSize)
   ' Save a reference to the control that was dropped.
   Set ctlDropped(intSize) = Source
   ' Add the name of the control to the list box.
   List1.AddItem Source.Name
End Sub
</code></pre>
<p>
This example uses the Is operator to compare the variables in the control array with the control argument. The Is operator can be used to test the identity of Visual Basic object references: If you compare two different references to the same object, the Is operator returns True.</p>
<p>
The example also uses the Set statement to assign the object reference in the Source argument to an element in the array.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Is Operator" in the <i>Language Reference</i>.</p>
<p>
Arrays are introduced in "Arrays" and "Dynamic Arrays" in "Programming Fundamentals."</p>
<p>
For an easier way to keep track of objects, see "Creating Collections of Objects" later in this chapter.</p>
</BODY>
</HTML>

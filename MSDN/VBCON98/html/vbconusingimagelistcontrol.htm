<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the ImageList Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingimagelistcontrol"></a>Using the ImageList Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingImageListControlC">
</object></p>
<p>
An ImageList control contains a collection of images that can be used by other Windows Common Controls — specifically, the ListView, TreeView, TabStrip, and Toolbar controls. For example, the ImageList control can store all the images that appear on a Toolbar control's buttons.</p>
<p>
The ImageList control can also be used with controls that assign a Picture object to a Picture property, such as the PictureBox, Image, and CommandButton controls.</p>
<p>
Using the ImageList control as a single repository saves you development time by allowing you to write code that refers to a single, consistent catalog of images. Instead of writing code that loads bitmaps or icons (using the LoadPicture function), you can populate the ImageList once, assign Key values if you wish, and write code that uses the Key or Index properties to refer to images.</p>
<p>
The control uses bitmap (.bmp), cursor (.cur), icon (.ico), JPEG (.jpg), or GIF (.gif) files in a collection of ListImage objects. You can add and remove images at design time or run time. The ListImage object has the standard collection object properties: Key and Index. It also has standard methods, such as Add, Remove, and Clear.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"Programming with Objects," in the <i>Visual Basic Programmer's Guide,</i> offers introductory information about working with objects and collections.</p>
<p>
Finally, the control features the Overlay, Draw, and ExtractIcon methods, which allow you to create composite images, draw images on objects with an hDC property (such as the Form and Printer objects), and create an icon from a bitmap stored in the control.</p>
<h2>Possible Uses</h2>
<ul type=disc>
<li>
To store the images that represent open folders, closed folders, and documents. These images can then be dynamically assigned to the TreeView control's Node object to represent its different states as it expands or collapses, or whether or not it is a document or a folder.<br><br></li>
<li>
To store images that represent common computer operations, such as saving, opening, and printing files. These images can then be assigned to Button objects on a Toolbar control used by your application.<br><br></li>
<li>
To store images for drag-and-drop operations, such as MousePointer icons, and DragIcons.</li>
</ul>
<h2>Managing ListImage Objects and ListImages Collections</h2>
<p>
The ImageList control contains the ListImages collection of ListImage objects, each of which can be referred to by its Index or Key property value. You can add or remove images to the control at design time or run time.</p>
<h3>Adding ListImage Objects at Design Time</h3>
<p>
To add an image to at design time, use the ImageList control's Property Pages dialog box.</p>
<p class=label>
<b>To add ListImage objects at design time</b>
<ol>
<li>
Right-click the ImageList control and click Properties.<br><br></li>
<li>
Click the Images tab to display the ImageList control's Property Pages, as shown below.<p class=label>
<b>ImageList control Property Pages dialog box</b>
<p>
<img src="avtct052.gif" border=0></P></li>
<li>
Click <b>Insert Picture </b>to display the <b>Select Picture </b>dialog box.<br><br></li>
<li>
Use the dialog box to find either bitmap or icon files, and click <b>Open</b>.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can select multiple bitmap or icon files.</p></li>
<li>
Assign a unique Key property setting by clicking in the <b>Key </b>box and typing a string.<br><br></li>
<li>
Optional. Assign a Tag property setting by clicking in the <b>Tag </b>box and typing a string. The Tag property doesn't have to be unique.<br><br></li>
<li>
Repeat steps 3 through 6 until you have populated the control with the desired images.</li>
</ol>
<h3>Adding ListImage Objects at Run Time</h3>
<p>
To add an image at run time, use the Add method for the ListImages collection in conjunction with the LoadPicture function. The following example occurs in a form's Load event; an ImageList control named "imlImages" is loaded with a single bitmap:</p>
<pre><code>Private Sub Form_Load()
   ' Assuming the path is correct, the open.bmp 
   ' picture will be added to the ListImages
   ' collection. The Key property will also be
   ' assigned the value "open"
   imlImages.ListImages. _
   Add ,"open", LoadPicture("c:\bitmaps\open.bmp")
End Sub
</code></pre>
<p>
Assigning a unique Key property value to the ListImage object allows you to create code that is easier to read. When assigning the image to a property, you can use its Key value instead of its Index value. Thus, assigning an image to a property might result in code like the following:</p>
<pre><code>' Assign an image to a TreeView control Node object.
' The unique key of the image is "open".
TreeView1.Nodes.Add , , ,"Folder1","open"
</code></pre>
<h2>Determining Image Sizes</h2>
<p>
You can insert any size image into the <b>ImageList</b> control. However, the size of the image displayed by the second control depends on one factor: whether or not the second control is also a Windows Common control bound to the <b>ImageList</b> control.</p>
<p>
When the <b>ImageList</b> control is bound to another Windows Common Control, images of different sizes can be added to the control, however the size of the image displayed in the associated Windows Common Control will be constrained to the size of the first image added to the <b>ImageList</b>. For example, if you add an image that is 16 by 16 pixels to an <b>ImageList</b> control, then bind the <b>ImageList</b> to a <b>TreeView</b> control (to be displayed with <b>Node</b> objects), all images stored in the <b>ImageList</b> control will be displayed at 16 by 16 pixels, even if they are much larger or smaller.</p>
<p>
On the other hand, if you display images using the <b>Picture</b> object, any image stored in the <b>ImageList </b>control will be displayed at its original size, no matter how small or large. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;An exception is when you use an image from the ImageList control with the Image control. Setting the Image control's Stretch property to True will cause the image to resize to fit the control.</p>
<p>
At design time, you can specify the height and width, in pixels, of images in the control by choosing a size from the General tab of the ImageList control's Property Pages dialog box. You can choose a predetermined size, or click Custom and set the image size by typing the size you desire in the Height and Width<b> </b>boxes. This can only be done when the ImageList contains no images. Attempting to change the size after the control contains images will result in an error.</p>
<h2>Methods That Allow You to Create Composite Images</h2>
<p>
You can use the ImageList control to create a composite image (a picture object) from two images by using the Overlay method in conjunction with the MaskColor property. For example, if you have an "international no" image (a circle with a diagonal bar inside it), you can lay that image over any other image, as shown:</p>
<p>
<img src="avtct053.gif" border=0></p>
<p>
The syntax for the Overlay method requires two arguments. The first argument specifies the underlying image; the second argument specifies the image that overlays the first. Both arguments can be either the Index or the Key property of a ListImage object.</p>
<p>
Thus the code to achieve the effect above is as follows:</p>
<pre><code>' The composite image appears in a PictureBox 
' control named "picOver". The Index value of 
' the cigarette image is 2; the index value of the 
' "no" symbol is 1.
ImageList1.MaskColor = vbGreen
Set picOver.Picture = ImageList1.Overlay(2, 1)
</code></pre>
<p>
You could also use the Key property of the images, resulting in this code:</p>
<pre><code>' Assuming the first image's Key is "smokes", and the
' second is "no".
Set picOver.Picture = ImageList1.Overlay("smokes","no")
</code></pre>
<p>
The code example above also illustrates how the MaskColor property works. In brief, the MaskColor property specifies the color which will become transparent when an image is overlaid over another. The "no" image has a green background color. Thus, when the code specifies that the MaskColor will be vbGreen (an intrinsic constant), the green in the image becomes transparent in the composite image.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Properties and Methods for the Thing Class</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingpropertiesmethods03"></a>Creating Properties and Methods for the Thing Class</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingPropertiesMethods03C">
</object></p>
<p>
You create properties for a class by adding public variables and property procedures to the class module. You create methods for a class by adding Public Sub and Public Function procedures to the class module. The following step-by-step procedures create two properties and one method for the Thing class.
<ul type=disc>
<li>
The Name property is a string that can be retrieved and set by client applications.<br><br></li>
<li>
The read-only DebugID property returns a sequence number that shows the order in which Thing objects were created. This is useful for debugging.<br><br></li>
<li>
The ReverseName method reverses the order of the letters in the Name property.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX DLL. It begins with the topic <a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</p>
<p class=label>
<b>To create the Name property</b>
<ul type=disc>
<li>
Add the following code to the Declarations section of the Thing class module:<pre><code>Option Explicit
Public Name As String
</code></pre>
</li>
</ul>
<p>
The variable <code>Name</code> becomes a property of the Thing class because it’s declared Public.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Don’t confuse the Name property you’re creating here with the Name property of the class module. The Name property of the class module allows you to specify the class name (Thing) at design time; it’s not available at run time.</p>
<p class=label>
<b>To create the read-only DebugID property</b>
<ol>
<li>
Add the following code to the Declarations section of the Thing class module:<pre><code>' To store the value of the DebugID property.
Private mlngDebugID As Long
</code></pre>
</li>
<li>
From the <b>Tools</b> menu, choose <b>Add Procedure</b> to open the <b>AddProcedure</b> dialog box. In the <b>Name </b>box, type <b>DebugID</b>. Click <b>Property</b> and <b>Public</b>, then click <b>OK</b>.<br><br></li>
<li>
In the <b>Code</b> window, delete the Property Let procedure and change the Property Get procedure as follows:<pre><code>Public Property Get DebugID() As Long
 &nbsp; DebugID = mlngDebugID
End Property
</code></pre>
<p class=tl>
The purpose of a Property Let procedure is to allow users to assign a new value to the DebugID property. Deleting it makes the property read-only.</P></li>
</ol>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Because property procedures come in two parts, you may find it easier to work with them in Full Module View. You can toggle between Procedure View and Full Module View using the buttons in the bottom left corner of the Code window.</p>
<p>
<img src="avtcm009.gif" border=0></P><p>
The variable <code>mlngDebugID</code> is a private data member which is used to store the value of the DebugID property. Because it’s declared Private, it’s not visible to client applications, and thus cannot be changed by clients. This is an example of <i>encapsulation</i>, discussed in detail in "Classes: Putting User-Defined Types and Procedures Together," in the <i>Visual Basic Programmer’s Guide.</i></p>
<p>
The Property Get procedure returns the value of the private variable, allowing clients to read the property value using code like the following:</p>
<pre><code>Private Sub Command1_Click()
   Dim t As ThingDemo.Thing
   Set t = New ThingDemo.Thing
   MsgBox t.DebugID
End Sub
</code></pre>
<p class=label>
<b>To create the ReverseName method</b>
<ol>
<li>
On the <b>Tools</b> menu, click <b>Add Procedure</b> to get the <b>Add Procedure</b> dialog box. In the <b>Name </b>box, type <b>ReverseName</b>. Click <b>Sub</b> and <b>Public</b>, then click <b>OK</b>.<br><br></li>
<li>
Enter the following code in the new Sub procedure of the Thing class module:<pre><code>Public Sub ReverseName()
 &nbsp; Dim intCt As Integer
 &nbsp; Dim strNew As String
 &nbsp; For intCt = 1 To Len(Name)
 &nbsp;&nbsp;&nbsp;&nbsp; strNew = Mid$(Name, intCt, 1) &amp; strNew
 &nbsp; Next
 &nbsp; Name = strNew
End Sub
</code></pre>
</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Remember that the Name property you’ve just created — and used in the ReverseName method — is not the same as the Name property of the class module. Unlike the Name property you created, the class module’s Name property is not available at run time.</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX DLL.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>To</b></td>
<td class=label width=66%><b>See</b></td>
</tr>
<tr valign=top>
<td width=34%>Go to the next step</td>
<td width=66%><a href="vbconaddingcodeforinitializeterminateevents03.htm">Adding Code for Initialize and Terminate Events</a></td>
</tr>
<tr valign=top>
<td width=34%>Start from the beginning</td>
<td width=66%><a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Approaches to Debugging</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconapproachestodebugging"></a>Approaches to Debugging</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconApproachesToDebuggingC">
</object></p>
<p>
The debugging techniques presented in this chapter use the analysis tools provided by Visual Basic. Visual Basic cannot diagnose or fix errors for you, but it does provide tools to help you analyze how execution flows from one part of the procedure to another, and how variables and property settings change as statements are executed. Debugging tools let you look inside your application to help you determine what happens and why.</p>
<p>
Visual Basic debugging support includes breakpoints, break expressions, watch expressions, stepping through code one statement or one procedure at a time, and displaying the values of variables and properties. Visual Basic also includes special debugging features, such as edit-and-continue capability, setting the next statement to execute, and procedure testing while the application is in break mode.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For a quick overview of Visual Basic debugging, see "Tips for Debugging" later in this chapter.</p>
<h2>Kinds of Errors</h2>
<p>
To understand how debugging is useful, consider the three kinds of errors you can encounter:
<ul type=disc>
<li>
Compile errors<br><br></li>
<li>
Run-time errors<br><br></li>
<li>
Logic errors</li>
</ul>
<h2>Compile Errors</h2>
<p>
<i>Compile errors</i> result from incorrectly constructed code. If you incorrectly type a keyword, omit some necessary punctuation, or use a Next statement without a corresponding For statement at design time, Visual Basic detects these errors when you compile the application.</p>
<p>
Compile errors include errors in syntax. For example, you could have a statement as follows:</p>
<pre><code>Left
</code></pre>
<p>
Left is a valid word in the Visual Basic language, but without an object, it doesn't meet the syntax requirements for that word (<i>object</i>.Left). If you have selected the Auto Syntax Check option in the Editor tab on the Options dialog box, Visual Basic will display an error message as soon as you enter a syntax error in the Code window.</p>
<p class=label>
<b>To set the Auto Syntax Check option</b>
<ol>
<li>
From the <b>Tools</b> menu, select <b>Options</b>, and click the <b>Editor</b> tab on the <b>Options</b> dialog box.<br><br></li>
<li>
Select <b>Auto</b> <b>Syntax</b> <b>Check</b>.</li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See the section "Avoiding Bugs" later in this chapter for other techniques to use to avoid errors in your code.</p>
<h2>Run-Time Errors</h2>
<p>
<i>Run-time errors</i> occur while the application is running (and are detected by Visual Basic) when a statement attempts an operation that is impossible to carry out. An example of this is division by zero. Suppose you have this statement:</p>
<pre><code>Speed = Miles / Hours
</code></pre>
<p>
If the variable <code>Hours</code> contains zero, the division is an invalid operation, even though the statement itself is syntactically correct. The application must run before it can detect this error.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;You can include code in your application to trap and handle run-time errors when they occur. For information on dealing with run-time errors, see "How to Handle Errors" earlier in this chapter.</p>
<h2>Logic Errors</h2>
<p>
<i>Logic errors</i> occur when an application doesn't perform the way it was intended. An application can have syntactically valid code, run without performing any invalid operations, and yet produce incorrect results. Only by testing the application and analyzing results can you verify that the application is performing correctly.</p>
<h2>How Debugging Tools Help</h2>
<p>
Debugging tools are designed to help you with:
<ul type=disc>
<li>
Logic and run-time errors.<br><br></li>
<li>
Observing the behavior of code that has no errors.</li>
</ul>
<p>
For instance, an incorrect result may be produced at the end of a long series of calculations. In debugging, the task is to determine what and where something went wrong. Perhaps you forgot to initialize a variable, chose the wrong operator, or used an incorrect formula.</p>
<p>
There are no magic tricks to debugging, and there is no fixed sequence of steps that works every time. Basically, debugging helps you understand what's going on while your application runs. Debugging tools give you a snapshot of the current state of your application, including:
<ul type=disc>
<li>
Appearance of the user interface (UI).<br><br></li>
<li>
Values of variables, expressions, and properties.<br><br></li>
<li>
Active procedure calls.</li>
</ul>
<p>
The better you understand how your application is working, the faster you can find bugs.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more details on viewing and testing variables, expressions, properties, and active procedure calls, see "Testing Data and Procedures with the Immediate Window" and "Monitoring the Call Stack" later in this chapter.</p>
<h3>The Debug Toolbar</h3>
<p>
Among its many debugging tools, Visual Basic provides several buttons on the optional Debug toolbar that are very helpful. Figure 13.5 shows these tools. To display the Debug toolbar, right-click on the Visual Basic toolbar and select the Debug option.</p>
<p class=label>
<b>Figure 13.5&nbsp;&nbsp;&nbsp;The Debug toolbar</b></p>
<p>
<img src="avp13005.gif" border=0></p>
<p>
The following table briefly describes each tool's purpose. The topics in this chapter discuss situations where each of these tools can help you debug or analyze an application more efficiently.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Debugging tool</b></td>
<td class=label width=72%><b>Purpose</b></td>
</tr>
<tr valign=top>
<td width=28%>Breakpoint</td>
<td width=72%>Defines a line in the Code window where Visual Basic suspends execution of the application.</td>
</tr>
<tr valign=top>
<td width=28%>Step Into</td>
<td width=72%>Executes the next executable line of code in the application and steps into procedures.</td>
</tr>
<tr valign=top>
<td width=28%>Step Over</td>
<td width=72%>Executes the next executable line of code in the application without stepping into procedures.</td>
</tr>
<tr valign=top>
<td width=28%>Step Out</td>
<td width=72%>Executes the remainder of the current procedure and breaks at the next line in the calling procedure.</td>
</tr>
<tr valign=top>
<td width=28%>Locals Window</td>
<td width=72%>Displays the current value of local variables.</td>
</tr>
<tr valign=top>
<td width=28%>Immediate Window</td>
<td width=72%>Allows you to execute code or query values while the application is in break mode.</td>
</tr>
<tr valign=top>
<td width=28%>Watch window</td>
<td width=72%>Displays the values of selected expressions.</td>
</tr>
<tr valign=top>
<td width=28%>Quick Watch</td>
<td width=72%>Lists the current value of an expression while the application is in break mode.</td>
</tr>
<tr valign=top>
<td width=28%>Call Stack</td>
<td width=72%>While in break mode, presents a dialog box that shows all procedures that have been called but not yet run to completion.</td>
</tr>
</table><br>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The debugging tools are only necessary if there are bugs in your application. See "Avoiding Bugs" later in this chapter.</p>
</BODY>
</HTML>

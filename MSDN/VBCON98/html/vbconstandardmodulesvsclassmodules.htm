<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Standard Modules vs. Class Modules</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconstandardmodulesvsclassmodules"></a>Standard Modules vs. Class Modules</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconStandardModulesVsClassModulesC">
</object></p>
<p>
Classes differ from standard modules in the way their data is stored. There is never more than one copy of a standard module’s data. This means that when one part of your program changes a public variable in a standard module, and another part of your program subsequently reads that variable, it will get the same value.</p>
<p>
Class module data, on the other hand, exists separately for each instance of the class.</p>
<p>
Avoid making the code in your classes dependent on global data — that is, public variables in standard modules. Many instances of a class can exist simultaneously, and all of these objects share the global data in your component.</p>
<h2>Static Class Data</h2>
<p>
Using global variables in class module code violates the object-oriented programming concept of encapsulation, because objects created from such a class do not contain all their data. However, there may be occasions when you want a data member to be shared among all objects created from a class module. For example, you might want all objects created from a class to share a property value, such as the name or version number of your component.</p>
<p>
This deliberate violation of encapsulation is sometimes referred to as <i>static class data</i>. You can implement static class data in a Visual Basic class module by using Property procedures to set and return the value of a Public data member in a standard module, as in the following code fragment:</p>
<pre><code>' Read-only property returning application name.
Property Get ComponentName() As String
   ' The variable gstrComponentName is stored in a 
   '&nbsp;&nbsp; standard module, and declared Public.
   ComponentName = gstrComponentName
End Property
</code></pre>
<p>
You can implement static class data that is not read-only by providing a corresponding Property Let procedure — or Property Set for a property that contains an object reference — to assign a new value to the standard module data member.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;When designing a class that uses static data, remember that your component may be providing objects simultaneously to several client applications (if it’s an out-of-process component) or to a client and several in-process components (if it’s an in-process component). All the objects created from the class will share the static data, even if they’re being used by different clients.</p>
</BODY>
</HTML>

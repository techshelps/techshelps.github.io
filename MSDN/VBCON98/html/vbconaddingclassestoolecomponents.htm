<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Classes to Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingclassestoolecomponents"></a>Adding Classes to Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingClassesToOLEComponentsC">
</object></p>
<p>
Only one thing distinguishes a component from other applications you author using Visual Basic: A component project has at least one public class from which client applications can create objects.</p>
<p>
Like any other Visual Basic application, your component may have numerous class modules that encapsulate its internal functionality. When you allow clients to create instances of a class, objects created from that class can be manipulated by clients, and your application becomes a component.</p>
<h2>Creating New Classes</h2>
<p>
From the Project menu, you can choose Add Class Module, Add User Control, or Add User Document to define a new public class. Other choices on the Project menu allow you to add objects that can be used within your application, but only UserControls, UserDocuments, and class modules can define public classes.</p>
<p>
Each public class you add will be the blueprint for one kind of public object in your object model. You can provide a class name, define interfaces for the class, and set the Instancing property (or the Public property, in some cases) to determine how objects will be created from the class.</p>
<h3>Name Property</h3>
<p>
Choose class names carefully. They should be short but descriptive, and formed from whole words with individual words capitalized — for example, BusinessRule<i>.</i></p>
<p>
The class name is combined with the name of the component to produce a fully qualified class name, also referred to as a <i>programmatic ID</i> or <i>ProgID</i>. For example, the fully qualified class name of a BusinessRule class provided by the Finance component, is <code>Finance.BusinessRule</code>.</p>
<p>
The topic "What’s in a Name?" earlier in this chapter, outlines the rules for naming classes, properties, and methods.</p>
<h3>Defining Interfaces</h3>
<p>
The default interface for a class is composed of the properties and methods you define for it, as discussed in "Adding Properties and Methods to Classes," later in this chapter.</p>
<p>
The default interface of a class is an <i>incoming interface</i>, as explained in "Polymorphism, Interfaces, Type Libraries, and GUIDs." You can also add <i>outgoing interfaces</i>, or events, as described in "Adding Events to Classes."</p>
<p>
Visual Basic includes information about the class module’s default interface and outgoing interfaces in the type library it creates when your component is compiled.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;You can implement additional incoming interfaces on a class, as described in "Providing Polymorphism by Implementing Interfaces."</p>
<h3>Public or Instancing Property</h3>
<p>
UserControl classes have a Public property that determines whether the class is public or private. UserDocument classes are always public. This is discussed in the in-depth chapters on ActiveX controls and documents, "Building ActiveX Controls" and "Building ActiveX Documents."</p>
<p>
Class modules have a more complex public life, controlled by the Instancing property. For each class your component will provide to other applications, set the Instancing property of the class module to any value <i>except</i> Private, as discussed in the related topic "Instancing for Classes Provided by ActiveX Components."</p>
<p>
You don’t have to make all your classes public; if there are objects you want to use only within your component, set the Instancing properties of the class modules that define them to Private. (For a UserControl, set the Public property to False.)</p>
<h2>Related Class Creation Topics</h2>
<p>
The following topics provide detailed information about the features of classes in Visual Basic projects.
<ul type=disc>
<li>
<a href="vbconinstancingforolecomponentclasses.htm">Instancing for Classes Provided by ActiveX Components</a>&nbsp;&nbsp;&nbsp;The Instancing property of class modules determines whether an object can be created by clients, always starts a new instance of the component, is global, or (in some cases) is on a separate thread.<br><br></li>
<li>
<a href="vbconcodingrobustinitializeterminateevents.htm">Coding Robust Initialize and Terminate Events</a>&nbsp;&nbsp;&nbsp;What happens when an error occurs as an object is being created or destroyed? How you answer that question can affect the stability of programs that use your component.<br><br></li>
<li>
<a href="vbconstandardmodulesvsclassmodules.htm">Standard Modules vs. Class Modules</a>&nbsp;&nbsp;&nbsp;Public variables in class modules and standard modules have different scope and visibility.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Class modules in Visual Basic are introduced in "Programming with Objects," in the <i>Visual Basic Programmer’s Guide</i>. Topics specific to classes defined in class modules, ActiveX controls, and ActiveX documents are discussed in depth in "Building Code Components," "Building ActiveX Controls," and "Building ActiveX Documents." Object models are discussed in "Organizing Objects: The Object Model," later in this chapter.</p>
</BODY>
</HTML>

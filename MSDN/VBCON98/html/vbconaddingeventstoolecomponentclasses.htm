<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Events to Classes</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingeventstoolecomponentclasses"></a>Adding Events to Classes</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingEventsToOLEComponentClassesC">
</object></p>
<p>
You can add events to any class in your component. Events declared in classes provided by your component can be handled by clients regardless of whether your component is running in process or out of process. All events are public.</p>
<p>
You declare an event using the Event keyword:</p>
<pre><code>Event SomethingHappened(   ByVal HowMuch As Double, _
      ByVal When As Date)
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can declare event arguments just as you do arguments of procedures, with the following exceptions: Events cannot have named arguments, optional arguments, or ParamArray arguments. Events do not have return values.</p>
<p>
You raise the event from within your class module’s code, whenever the circumstances that define the event occur.</p>
<pre><code>   If blnSomethingHappened Then
      RaiseEvent SomethingHappened(dblPriceIncrease, _
         Now)
   End If
</code></pre>
<p>
When the event is raised in an instance of the class, code in the SomethingHappened event procedures of any clients that are handling the event <i>for that particular object</i> will be executed. Events must be handled on an object-by-object basis; a client cannot elect to handle an event for all currently existing objects of a particular class.</p>
<p>
If multiple clients have references to the same object, and are handling an event it raises, control will not return to your component until all clients have processed the event.</p>
<p>
You can allow clients to respond to events by declaring a parameter ByRef instead of ByVal. This allows any client to change the value of the argument. When execution resumes, on the line after RaiseEvent, you can examine the value of this argument and take appropriate action.</p>
<p>
This capability is frequently used for Cancel arguments, as with the QueryUnload event of Visual Basic forms.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Visual Basic raises a separate QueryUnload event for each form; if one form cancels the event, events for subsequent forms are not raised.</p>
<p>
Events can be used instead of call-back functions, as discussed in "Building Code Components." The capabilities of the two approaches are identical, but implementation of events is much simpler, for you and for the user of your component.</p>
<p>
Events cannot be handled within the class that declared them.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Raising events in controls is discussed in detail in "Building ActiveX Controls." The syntax for raising and handling events is covered in "Adding Events to a Class" in "Programming with Objects," in the <i>Visual Basic Programmer’s Guide.</i></p>
</BODY>
</HTML>

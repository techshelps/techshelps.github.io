<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Clicking Buttons to Perform Actions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconclickingbuttonstoperformactions"></a>Clicking Buttons to Perform Actions</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconClickingButtonsToPerformActionsC">
</object></p>
<p>
The easiest way to allow the user to interact with an application is to provide a button to click. You can use the command button control provided by Visual Basic, or you can create your own "button" using an image control containing a graphic, such as an icon.</p>
<h2>Using Command Buttons</h2>
<p>
Most Visual Basic applications have command buttons that allow the user to simply click them to perform actions. When the user chooses the button, it not only carries out the appropriate action, it also looks as if it's being pushed in and released. Whenever the user clicks a button, the Click event procedure is invoked. You place code in the Click event procedure to perform any action you choose.</p>
<p>
There are many ways to choose a command button at run time:
<ul type=disc>
<li>
Use a mouse to click the button.<br><br></li>
<li>
Move the focus to the button by pressing the TAB key, and then choose the button by pressing the SPACEBAR or ENTER. (See "Understanding Focus" later in this chapter.)<br><br></li>
<li>
Press an access key (ALT+ the underlined letter) for a command button.<br><br></li>
<li>
Set the command button's Value property to True in code: <pre><code>cmdClose.Value = True
</code></pre>
</li>
<li>
Invoke the command button's Click event in code:<pre><code>cmdClose_Click
</code></pre>
</li>
<li>
If the command button is the <i>default</i> <i>command button</i> for the form, pressing ENTER chooses the button, even if you change the focus to a different control other than a command button. At design time, you specify a default command button by setting that button's Default property to True.<br><br></li>
<li>
If the command button is the default <i>Cancel button</i> for the form, then pressing ESC chooses the button, even if you change the focus to another control. At design time, you specify a default Cancel button by setting that button's Cancel property to True.</li>
</ul>
<p>
All these actions cause Visual Basic to invoke the Click event procedure.</p>
<h2>The Test Buttons Application</h2>
<p>
You use the Caption property to display text on the button to tell the user what the button does. In Figure 3.4, the Test Buttons example from the Controls sample application contains a command button with its Caption property set to "Change Signal." (For a working version of this example, see Button.frm in the Controls.vbp sample application.)</p>
<p>
Notice that 'S' is the access key for this button, denoted by an underline. Inserting an ampersand (&amp;) in the text of the Caption property makes the character following it the access key for that button (for example, Change &amp;Signal).</p>
<p class=label>
<b>Figure 3.4&nbsp;&nbsp;&nbsp;Command button with a caption </b></p>
<p>
<img src="avp03004.gif" border=0></p>
<p>
When a user clicks the command button, the code in the command button's Click event procedure is executed. In the example, a different traffic light icon is displayed each time the button is clicked.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For information on additional properties of the command button, see "Using Visual Basic's Standard Controls."</p>
</BODY>
</HTML>

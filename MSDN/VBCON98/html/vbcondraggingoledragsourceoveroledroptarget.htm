<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dragging the OLE Drag Source over the OLE Drop Target</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondraggingoledragsourceoveroledroptarget"></a>Dragging the OLE Drag Source over the OLE Drop Target</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDraggingOLEDragSourceOverOLEDropTargetC">
</object></p>
<p>
With a manual target, you can determine and respond to the position of the source data within the target and respond to the state of the mouse buttons and the SHIFT, CTRL, and ALT keys. Where both the source and the target are manual, you can modify the default visual behavior of the mouse.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>To . . .</b></td>
<td class=label width=50%><b>Use the . . .</b></td>
</tr>
<tr valign=top>
<td width=50%>Determine and respond to the position of the source object</td>
<td width=50%><i>state</i> argument of the OLEDragOver event</td>
</tr>
<tr valign=top>
<td width=50%>Respond to the state of the mouse buttons</td>
<td width=50%><i>button</i> argument of the OLEDragDrop and OLEDragOver events</td>
</tr>
<tr valign=top>
<td width=50%>Respond to the state of the SHIFT, CTRL, and ALT keys</td>
<td width=50%><i>shift</i> arguments of the OLEDragDrop and OLEDragOver events</td>
</tr>
<tr valign=top>
<td width=50%>Modify the default visual behavior of the mouse</td>
<td width=50%><i>effect</i> argument of the OLEDragOver event and the <i>effect</i> argument of the OLEGiveFeedback</td>
</tr>
</table><br>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information about changing the mouse cursor, see "Dragging the OLE Drag Source over the OLE Drop Target." For more information about using the <i>button</i> and <i>shift</i> arguments, see "Using the Mouse and Keyboard to Modify Drop Effects and User Feedback."</p>
<h2>The OLEDragOver Event State Argument</h2>
<p>
Depending upon its position, the <i>effect</i> argument may be changed to indicate the currently acceptable drop effect.</p>
<p>
The <i>state</i> argument of the OLEDragOver event allows you to respond to the source data entering, passing over, and leaving the target control. For example, when the source data enters the target control, the <i>state</i> argument is set to vbEnter.</p>
<p>
When the drag source is moved around within the boundaries of the drop target, the <i>state</i> argument is set to vbOver. Depending upon the position (the <i>x</i> and <i>y</i> arguments) of the mouse pointer, you may want to change the drag effect. Notice that the OLEDragOver event is generated several times a second, even when the mouse is stationary.</p>
<p>
The <i>state</i> argument of the OLEDragOver event specifies when the data enters, passes over, and leaves the target control by using the following constants:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Constant</b></td>
<td class=label width=16%><b>Value</b></td>
<td class=label width=60%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=24%>vbEnter</td>
<td width=16%>0</td>
<td width=60%>Data has been dragged within the range of a target.</td>
</tr>
<tr valign=top>
<td width=24%>vbLeave</td>
<td width=16%>1</td>
<td width=60%>Data has been dragged out of the range of a target.</td>
</tr>
<tr valign=top>
<td width=24%>vbOver</td>
<td width=16%>2</td>
<td width=60%>Data is still within the range of a target, and either the mouse has moved, a mouse or keyboard button has changed, or a certain system-determined amount of time has elapsed.</td>
</tr>
</table><br>
<h2>Providing the User with Customized Visual Feedback</h2>
<p>
If you want to modify the default visual behavior of the mouse in an OLE drag-and-drop operation, you can manipulate the OLEDragOver event on the target side and the OLEGiveFeedback event on the source side.</p>
<p>
OLE drag and drop provides automatic visual feedback during a drag-and-drop operation. For example, when you start a drag, the mouse pointer is changed to indicate that a drag has been initiated. When you pass over objects that do not support OLE drop, the mouse pointer is changed to the "no drop" cursor.</p>
<p>
Modifying the mouse pointer to indicate how a control will respond if the data is dropped onto it involves two steps: determining what type of data is in the DataObject object using the GetFormat method, and then setting the <i>effect</i> argument of the OLEDragOver event to inform the source what drop effects are allowed for this control.</p>
<h2>The OLEDragOver Event</h2>
<p>
When a target control’s OLEDropMode property is set to Manual, the OLEDragOver event is triggered whenever dragged data passes over the control.</p>
<p>
The <i>effect</i> argument of the OLEDragOver event is used to specify what action would be taken if the object were dropped. When this value is set, the source’s OLEGiveFeedback event is triggered. The OLEGiveFeedback event contains its own <i>effect</i> argument, which is used to provide visual feedback to the user on what action will be taken when the selection is dragged — i.e., the mouse pointer is changed to indicate a copy, move, or "no drop" action.</p>
<p>
The <i>effect</i> argument of the OLEDragOver event uses the following constants to indicate the drop action:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Constant</b></td>
<td class=label width=27%><b>Value</b></td>
<td class=label width=39%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=34%>vbDropEffectNone</td>
<td width=27%>0</td>
<td width=39%>Drop target cannot accept the data.</td>
</tr>
<tr valign=top>
<td width=34%>vbDropEffectCopy</td>
<td width=27%>1</td>
<td width=39%>Drop results in a copy. The original data is untouched by the drag source.</td>
</tr>
<tr valign=top>
<td width=34%>vbDropEffectMove</td>
<td width=27%>2</td>
<td width=39%>Drag source removes the data.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The <i>effect</i> argument of the OLEDragOver and OLEGiveFeedback events express the same drop effects (copy, move, no drop) as the <i>allowedeffects</i> argument of the OLEStartDrag event. They differ only in that the OLEStartDrag event specifies which effects are allowed, and the OLEDragOver and OLEGiveFeedback use the <i>effect</i> argument to indicate to the source which of these actions will be taken.</p>
<p>
The following code example queries the DataObject object for a compatible data format for the target control. If the data is compatible, the <i>effect</i> argument informs the source that a move will be performed if the data is dropped. If the data is not compatible, the source will be informed and a "no drop" mouse pointer will be displayed.</p>
<pre><code>Private Sub txtTarget_OLEDragOver(Data As _ 
      VB.DataObject, Effect As Long, Button As _
      Integer, Shift As Integer, X As Single, _
      Y As Single, State As Integer)
   If Data.GetFormat(vbCFText) Then
      Effect = vbDropEffectMove And Effect
   Else
      Effect = vbDropEffectNone
   End If
End Sub
</code></pre>
<p>
When the source data is dragged over the target, and the OLEDragOver event is triggered, the source tells the target which effects it allows (move, copy, no drop). You must then chose which single effect will occur if the data is dropped. The <i>effect</i> argument of the OLEDragOver event informs the source which drop action it supports, and the source then informs the user by using the OLEGiveFeedback event to modify the mouse pointer.</p>
<h2>The OLEGiveFeedback Event</h2>
<p>
To change the default behavior of the mouse pointer based on the <i>effect </i>argument of the OLEDragOver event, you need to manually specify new mouse pointer values using the OLEGiveFeedback event. The source’s OLEGiveFeedback event is triggered automatically when the <i>effect</i> argument of the OLEDragOver event is set.</p>
<p>
The OLEGiveFeedback event contains two arguments (<i>effect</i> and <i>defaultcursors) that allow you to modify the default mouse pointers in an OLE drag-and-drop operation.</i></p>
<p>
The <i>effect</i> argument, like the other OLE drag-and-drop events, specifies whether data is to be copied, moved, or rejected. The purpose of this argument in the OLEGiveFeedback event, however, is to allow you to provide customized visual feedback to the user by changing the mouse pointer to indicate these actions.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Constant</b></td>
<td class=label width=26%><b>Value</b></td>
<td class=label width=40%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=34%>vbDropEffectNone</td>
<td width=26%>0</td>
<td width=40%>Drop target cannot accept the data.</td>
</tr>
<tr valign=top>
<td width=34%>vbDropEffectCopy</td>
<td width=26%>1</td>
<td width=40%>Drop results in a copy. The original data is untouched by the drag source.</td>
</tr>
<tr valign=top>
<td width=34%>vbDropEffectMove</td>
<td width=26%>2</td>
<td width=40%>Drag source removes the data.</td>
</tr>
<tr valign=top>
<td width=34%>vbDropEffectScroll</td>
<td width=26%>&amp;H80000000&amp;</td>
<td width=40%>Scrolling is about to start or is currently occurring in the target. The value is used in addition to the other values.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The vbDropEffectScroll value can be used by some applications or controls to indicate that the user is causing scrolling by moving the mouse pointer near the edge of an application’s window. Scrolling is automatically supported by some but not all of the Visual Basic standard controls. You may need to program for the scroll effect if you drag data into a program that contains scroll bars — Word for Windows, for example.</p>
<p>
The <i>defaultcursors</i> argument specifies whether the default OLE cursor set is used. Setting this argument to False allows you to specify your own cursors using the Screen.MousePointer property of the Screen object.</p>
<p>
In most cases, specifying custom mouse pointers is unnecessary because the default behavior of the mouse is handled by OLE. If you decide to specify custom mouse pointers using the OLEGiveFeedback event, you need to account for every possible effect, including scrolling. It is also a good idea to program for effects that may be added later by creating an option that gives the control of the mouse pointer back to OLE if an unknown effect is encountered.</p>
<p>
The following code example sets the <i>effect</i> and <i>defaultcursors</i> arguments and specifies custom cursors (.ico or .cur files) for the copy, move, and scroll effects by setting the MousePointer and MouseIcon properties of the Screen object. It also returns control of the mouse pointer back to OLE if an unknown effect is encountered.</p>
<pre><code>Private Sub TxtSource_OLEGiveFeedback(Effect As Long, _ 
      DefaultCursors As Boolean)
   DefaultCursors = False
   If Effect = vbDropEffectNone Then
      Screen.MousePointer = vbNoDrop
   ElseIf Effect = vbDropEffectCopy Then
      Screen.MousePointer = vbCustom
      Screen.MouseIcon = LoadPicture("c:\copy.ico")
   ElseIf Effect = (vbDropEffectCopy Or _
         vbDropEffectScroll) Then
      Screen.MousePointer = vbCustom
      Screen.MouseIcon = _ 
         LoadPicture("c:\copyscrl.ico")
   ElseIf Effect = vbDropEffectMove Then
      Screen.MousePointer = vbCustom
      Screen.MouseIcon = LoadPicture("c:\move.ico")
   ElseIf Effect = (vbDropEffectMove Or _
         vbDropEffectScroll) Then
      Screen.MousePointer = vbCustom
      Screen.MouseIcon = _ 
         LoadPicture("c:\movescrl.ico")
   Else
      ' If some new format is added that we do not 
      '   understand, allow OLE to handle it with 
      '   correct defaults.
      DefaultCursors = True
   End If
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You should always reset the mouse pointer in the OLECompleteDrag event if you specify a custom mouse pointer in the OLEGiveFeedback event. For more information about informing the source when data is dropped, see "Dropping the OLE Drag Source onto the OLE Drop Target."</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Customizing the Mouse Pointer" for information on setting the MousePointer and MouseIcon properties.</p>
</BODY>
</HTML>

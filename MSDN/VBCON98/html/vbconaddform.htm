<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding a Form to the ActXDoc Project</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddform"></a>Adding a Form to the ActXDoc Project</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddFormC">
</object></p>
<p>
As with other Visual Basic projects, it's a simple matter to add a form to the FirstDoc ActiveX project. Adding controls to the form is exactly the same as in a standard Visual Basic project. The primary difference, of course, lies in the fact that forms must be called by the ActiveX document.</p>
<p>
In this step-by-step procedure, you add a single form to the ActXDoc project.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX control. It begins with the topic <a href="vbconcreatingdocumentobject.htm">Creating an ActiveX Document</a>.</p>
<p class=label>
<b>To add a form to the ActXDoc project</b>
<ol>
<li>
On the <b>Project</b> menu, click <b>Add Form</b>, then double-click the <b>Form</b> icon in the <b>Add Form</b> dialog box. Set the form's properties using the following table:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Form1 property</b></td>
<td class=label width=50%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=50%>Name</td>
<td width=50%>frmAux</td>
</tr>
<tr valign=top>
<td width=50%>Caption</td>
<td width=50%>Auxiliary Form</td>
</tr>
</table><br>
</li>
<li>
On the Toolbox, double-click the <b>TextBox</b> icon to add a TextBox control to the form, and set its properties using the following table.<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Text1 property</b></td>
<td class=label width=50%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=50%>Name</td>
<td width=50%>txtAux</td>
</tr>
<tr valign=top>
<td width=50%>MultiLine</td>
<td width=50%>True</td>
</tr>
<tr valign=top>
<td width=50%>Text</td>
<td width=50%>(nothing)</td>
</tr>
</table><br>
</li>
<li>
Resize the form, and place the control on the form so it resembles the following figure:<p>
<img src="avtcm086.gif" border=0></P></li>
<li>
In the <b>Project Explorer</b> window, double-click the <b>FirstDoc</b> icon to bring its designer forward.<br><br></li>
<li>
On the Toolbox, click the <b>CommandButton</b> icon and draw a new button on the FirstDoc designer, and set its properties according to the following table:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Command1 property</b></td>
<td class=label width=50%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=50%>Name</td>
<td width=50%>cmdShowForm</td>
</tr>
<tr valign=top>
<td width=50%>Caption</td>
<td width=50%>Show Form</td>
</tr>
</table><br>
</li>
<li>
Place the control just below the Go Next button as shown:<p>
<img src="avtcm088.gif" border=0></P></li>
<li>
Double-click the Show Form CommandButton control, and add the following code to its Click event:<pre><code>Private Sub cmdShowForm_Click()
 &nbsp; ' Show the auxiliary form, and set the Text 
 &nbsp; ' property of txtAux to the URL of FirstDoc.
 &nbsp; frmAux.txtAux.Text = txtURL.Text 
 &nbsp; frmAux.Show vbModal
End Sub
</code></pre>
<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Some containers, such as Internet Explorer, don't support the showing of modeless forms called from within a DLL. If you want to show modeless forms, compile your ActiveX document as an .exe file. This will allow your applications to show both modeless and modal forms.</p></li>
<li>
On the <b>File</b> menu, click <b>Save Project</b> to save the project files. Visual Basic will prompt you to name the form as its default (frmAux). Click <b>OK</b> to save the form with the default name.</li>
</ol>
<h2>Running the Project</h2>
<p>
You can now run the project and observe the interaction of the form with the ActiveX document.</p>
<p class=label>
<b>To view the new form interacting with the ActiveX document</b>
<ol>
<li>
Press f5 to run the project.<br><br></li>
<li>
Click the <b>Address</b> box and type the path of the FirstDoc.vbd.<br><br></li>
<li>
Click the <b>Show Form</b> button to see the form.</li>
</ol>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX document.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=40%><b>To</b></td>
<td class=label width=60%><b>See</b></td>
</tr>
<tr valign=top>
<td width=40%>Go to the next step</td>
<td width=60%><a href="vbconaddpropertymethod.htm">Adding a Property to the UserDocument</a></td>
</tr>
<tr valign=top>
<td width=40%>Start from the beginning</td>
<td width=60%><a href="vbconcreatingdocumentobject.htm">Creating an ActiveX Document</a></td>
</tr>
</table>
</BODY>
</HTML>

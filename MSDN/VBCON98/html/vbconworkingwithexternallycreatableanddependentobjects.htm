<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Externally Creatable and Dependent Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconworkingwithexternallycreatableanddependentobjects"></a>Working with Externally Creatable and Dependent Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vafctCreateObject;vafctGetObject;vbconWorkingWithExternallyCreatableAndDependentObjectsC">
</object></p>
<p>
How you create a reference to an object provided by a component depends on whether the object is an externally creatable or dependent object. You can directly create a reference to an externally creatable object; you create a reference to a dependent object indirectly by using a method of a higher-level object in the component's object hierarchy.</p>
<h2>Externally Creatable Objects</h2>
<p>
Most large ActiveX-enabled applications and other ActiveX components provide a top-level externally creatable object in their object hierarchy that:
<ul type=disc>
<li>
Provides access to other objects in the hierarchy.<br><br></li>
<li>
Provides methods and properties that affect the entire application.</li>
</ul>
<p>
For example, the Microsoft Office applications each provide a top-level Application object. The following example shows how you can assign references to the Application objects of Microsoft Excel, Microsoft Word, and Microsoft Access:</p>
<pre><code>Dim xlApp As Excel.Application
Dim wdApp As Word.Application
Dim acApp As Access.Application

Set xlApp = New Excel.Application
Set wdApp = New Word.Application
Set acApp = New Access.Application
</code></pre>
<p>
You can then using these variables to access the dependent objects in each application and the properties and methods of these objects. For more information see "Creating a Reference to an Object."</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Excel.Application syntax for referring to the Microsoft Excel Application class is not supported in versions prior to Microsoft Excel 97. To refer to the Microsoft Excel Application class in Microsoft Excel 5.0 and Microsoft Excel 95, use the syntax [_ExcelApplication] instead. For example:</p>
<pre><code>Set xlApp = New [_ExcelApplication]
</code></pre>
<p>
In addition to these top-level externally creatable objects, ActiveX components can also provide externally creatable objects that are lower on the component's object hierarchy. You can access these objects either directly as an externally creatable object or indirectly as a dependent object of a higher-level externally creatable object. For example, you can create a reference to a DAO TableDef object either directly or indirectly:</p>
<pre><code>   ' Create a reference to daoTable1 directly.
   Dim daoTable1 As DAO.TableDef
   Set daoTable1 = New DAO.TableDef
   daoTable1.Name = "Table1"

   ' Create a reference to daoTable2 indirectly,
   ' as a dependent object of the DAO DBEngine object. 
   Dim daoDBE As DAO.DBEngine
   Dim daoWs As DAO.Workspace
   Dim daoDb As DAO.Database
   Dim daoTable2 As DAO.TableDef

   Set daoDBE = DAO.DBEngine
   Set daoWs = daoDBE.Workspaces(0)
   Set daoDb = daoWs.CreateDatabase("db1.mdb", _
   dbLangGeneral)
   Set daoTable2 = daoDb.CreateTableDef("Table2")
</code></pre>
<p>
Some objects provide an Application object, but give it a different name. For example, the Microsoft Jet database engine in Microsoft Access calls its top-level object the DBEngine object.</p>
<h2>Dependent Objects</h2>
<p>
You can get a reference to a dependent object in only one way — by using a property or method of an externally creatable object to return a reference to the dependent object. Dependent objects are lower in an object hierarchy, and they can be accessed only by using a method of an externally creatable object. For example, suppose you want a reference to a Button object from Microsoft Excel. You can't get a reference to this object using the following code (an error will result):</p>
<pre><code>Dim xlButton As Excel.Button
Set xlButton = New Excel.Button
</code></pre>
<p>
Instead, use the following code to get a reference to a Button object:</p>
<pre><code>Dim xlApp As Excel.Application
Dim xlBook As Excel.Workbook
Dim xlSheet As Excel.Worksheet
Dim xlButton As Excel.Button

Set xlApp = New Excel.Application
Set xlBook = xlApp.Workbooks.Add
Set xlSheet = xlBook.Worksheets.Add
Set xlButton = xlSheet.Buttons.Add(44, 100, 100, 44)

' Now you can use a Button object property.
xlButton.Caption = "FirstButton"
</code></pre>
<p>
Figure 10.5 illustrates how a Visual Basic application gets a reference to the Button object.</p>
<p class=label>
<b>Figure 10.5&nbsp;&nbsp;&nbsp;Accessing dependent objects</b></p>
<p>
<img src="avp10005.gif" border=0></p>
</BODY>
</HTML>

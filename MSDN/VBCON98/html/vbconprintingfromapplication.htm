<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Printing from an Application</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconprintingfromapplication"></a>Printing from an Application</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPrintingFromApplicationC">
</object></p>
<p>
Visual Basic provides three techniques for printing text and graphics.
<ul type=disc>
<li>
You can produce the output you want on a form and then print the form using the PrintForm method.<br><br></li>
<li>
You can send text and graphics to a printer by setting the default printer to a member of the Printers collection.<br><br></li>
<li>
You can send text and graphics to the Printer object and then print them using the NewPage and EndDoc methods.</li>
</ul>
<p>
This section examines the advantages and disadvantages of these three approaches.</p>
<h2>Using the PrintForm Method</h2>
<p>
The PrintForm method sends an image of the specified form to the printer. To print information from your application with PrintForm, you must first display that information on a form and then print that form with the PrintForm method. The syntax is as follows:</p>
<p>
[<i>form</i>.]<b>PrintForm</b></p>
<p>
If you omit the form name, Visual Basic prints the current form. PrintForm prints the entire form, even if part of the form is not visible on the screen. If a form contains graphics, however, the graphics print only if the form’s AutoRedraw property is set to True. When printing is complete, PrintForm calls the EndDoc method to clear the printer.</p>
<p>
For example, you could send text to a printer by printing it on a form and then calling PrintForm with the following statements:</p>
<pre><code>Print "Here is some text."
PrintForm
</code></pre>
<p>
The PrintForm method is by far the easiest way to print from your application. Because it may send information to the printer at the resolution of the user’s screen (typically 96 dots per inch), results can be disappointing on printers with much higher resolutions (typically 300 dots per inch for laser printers). The results may vary depending on objects on your form.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "PrintForm Method" in the <i>Language Reference</i>.</p>
<h2>Using the Printers Collection</h2>
<p>
The Printers collection is an object that contains all the printers that are available on the operating system. The list of Printers are the same as those available in the Print Setup dialog box or the Windows Control Panel. Each printer in the collection has a unique index for identification. Starting with 0, each printer in the collection can be referenced by its number.</p>
<p>
Regardless of which printing method you use, all printed output from a Visual Basic application is directed to the Printer object, which initially represents the default printer specified in the Windows Control Panel. However, you can set the default printer to any one member in the Printers collection.</p>
<p>
To select the printer from the collection, use the following syntax:</p>
<p>
<b>Set Printer</b> <b>= Printers</b>(<i>n</i>)</p>
<p>
The following statements print the device names of all the printers on the operating system to the Immediate window:</p>
<pre><code>Private Sub Command1_Click()
Dim x As Printer
   For Each x In Printers
      Debug.Print x.DeviceName
   Next
End Sub
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You cannot create new instances of the Printer object in code, and you cannot directly add or remove printers from the Printers collection. To add or remove printers on your system, use the Windows Control Panel.</p>
<h2>Using the Printer Object</h2>
<p>
The Printer object is a device-independent drawing space that supports the Print, PSet, Line, PaintPicture, and Circle methods to create text and graphics. You use these methods on the Printer object just as you would on a form or picture box. The Printer object also has all the font properties described earlier in this chapter. When you finish placing the information on the Printer object, you use the EndDoc method to send the output to the printer. When applications close, they automatically use the EndDoc method to send any pending information on the Printer object.</p>
<p>
The Printer object provides the best print quality across a variety of printers because Windows translates text and graphics from the device-independent drawing space of the Printer object to best match the resolution and abilities of the printer. You can also print multiple-page documents by using the NewPage method on the Printer object.</p>
<p>
The main drawback to using the Printer object is the amount of code required to get the best results. Printing bitmaps on the Printer object also takes time and can therefore slow the performance of the application.</p>
</BODY>
</HTML>

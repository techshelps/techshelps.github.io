<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building Code Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconbuildingcodecomponents"></a>Building Code Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconBuildingCodeComponentsC">
</object></p>
<p>
Code components, formerly called OLE servers, are libraries of objects that provide an easy way to package your code for reuse. For example, you can create libraries of procedures that can be used with Microsoft Visual Basic or with desktop applications that host Visual Basic for Applications, such as Microsoft Office.</p>
<p>
With the Enterprise Edition of Visual Basic, code components can become parts of enterprise systems, running unattended on remote computers to provide data services and business rules. The information in "Scalability and Multithreading" and "Asynchronous Call-Backs and Events" will be of particular interest in this context.</p>
<p>
Code components can be wizards and add-ins for Visual Basic. <i>Extending the Visual Basic Environment with Add-Ins</i>, in the <i>Component Tools Guide</i>, describes how to create wizards and add-ins. Many of the topics in this chapter provide useful background information for creating add-ins.</p>
<p>
"Building Code Components" assumes familiarity with the material in "General Principles of Component Design" and "Debugging, Testing, and Deploying Components," as well as "Programming with Objects," in the <i>Visual Basic Programmer’s Guide.</i></p>
<p>
The following topics describe key features of code components created with Visual Basic.</p>
<h2>Topics</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=6%><a href="vbconglobalobjectscodelibraries.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconglobalobjectscodelibraries.htm">Global Objects and Code Libraries</a><p>
Create libraries of procedures you can call without explicitly creating objects — as if the procedures were part of Visual Basic.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconprojectoptionsforcodecomponents.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconprojectoptionsforcodecomponents.htm">Scalability and Multithreading</a><p>
When a component has to handle multiple requests, Visual Basic provides two ways to prevent long tasks from blocking short ones: multithreading and SingleUse classes.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconasynchronouscallbackseventsinking.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconasynchronouscallbackseventsinking.htm">Asynchronous Call-Backs and Events</a><p>
Defines asynchronous processing, and discusses two ways to notify clients that asynchronous tasks are complete: by raising events, or by implementing interfaces that include call-back methods.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbcondisplayingformsfromcodecomponents.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbcondisplayingformsfromcodecomponents.htm">Displaying Forms From Code Components</a><p>
Displaying modal and modeless forms from in-process and out-of-process components.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconhowobjectcreationworksinvbcomponents.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconhowobjectcreationworksinvbcomponents.htm">How Object Creation Works in Visual Basic Components</a><p>
In certain circumstances — for example, with SingleUse objects — the way you create the object can affect its behavior.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconhowbindingaffectsolecomponentperformance.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconhowbindingaffectsolecomponentperformance.htm">How Binding Affects ActiveX Component Performance</a><p>
The performance of your component is affected by the way clients declare the variables they use to keep references to your objects.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconinprocessoutofprocesscodecomponents.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconinprocessoutofprocesscodecomponents.htm">How Marshaling Affects ActiveX Component Performance</a><p>
How you declare method arguments in out-of-process components can have a big effect on performance.</p>
</td>
</tr>
</table><br>
<h2>Sample application</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=6%><img src="sampapp.gif" border=0></td>
<td width=94%><b>Coffee2.vbp</b>, <b>CoffWat2.vbp</b>, <b>MTCoffee.vbp</b><p>
Coffee2.vbp and CoffWat2.vbp demonstrate two techniques for asynchronous notifications — events and call-back methods on a secondary interface — and provide an example of all-code timers you can use instead of the Timer control. MTCoffee.vbp illustrates some features of multithreading. The sample applications are listed in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory. </p>
</td>
</tr>
</table><br>
<p>
<B><b>For More Information</b></B> &nbsp; See "Creating an ActiveX EXE Component," for step-by-step procedures that illustrate multithreading and asynchronous processing. Similar step-by-step procedures in "Creating an ActiveX DLL," illustrate global objects and modeless forms. Visual Basic code components can also provide ActiveX documents, as discussed in "Building ActiveX Documents."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Static Variables</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconstaticvariables"></a>Static Variables</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconStaticVariablesC">
</object></p>
<p>
In addition to scope, variables have a <i>lifetime</i>, the period of time during which they retain their value. The values in module-level and public variables are preserved for the lifetime of your application. However, local variables declared with Dim exist only while the procedure in which they are declared is executing. Usually, when a procedure is finished executing, the values of its local variables are not preserved and the memory used by the local variables is reclaimed. The next time the procedure is executed, all its local variables are reinitialized.</p>
<p>
However, you can preserve the value of a local variable by making the variable <i>static</i>. Use the Static keyword to declare one or more variables inside a procedure, exactly as you would with the Dim statement:</p>
<pre><code>Static Depth
</code></pre>
<p>
For example, the following function calculates a running total by adding a new value to the total of previous values stored in the static variable <code>Accumulate</code>:</p>
<pre><code>Function RunningTotal(num)
   Static ApplesSold
   ApplesSold = ApplesSold + num
   RunningTotal = ApplesSold
End Function
</code></pre>
<p>
If <code>ApplesSold</code> was declared with Dim instead of Static, the previous accumulated values would not be preserved across calls to the function, and the function would simply return the same value with which it was called.</p>
<p>
You can produce the same result by declaring <code>ApplesSold</code> in the Declarations section of the module, making it a module-level variable. Once you change the scope of a variable this way, however, the procedure no longer has exclusive access to it. Because other procedures can access and change the value of the variable, the running totals might be unreliable and the code would be more difficult to maintain.</p>
<h2>Declaring All Local Variables as Static</h2>
<p>
To make all local variables in a procedure static, place the Static keyword at the beginning of a procedure heading. For example:</p>
<pre><code>Static Function RunningTotal(num)
</code></pre>
<p>
This makes all the local variables in the procedure static regardless of whether they are declared with Static, Dim, Private, or declared implicitly. You can place Static in front of any Sub or Function procedure heading, including event procedures and those declared as Private.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The OLE Drag and Drop DataObject Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontheoledragdropdataobjectobject"></a>The OLE Drag and Drop DataObject Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheOLEDragDropDataObjectObjectC">
</object></p>
<p>
OLE drag-and-drop uses the same <i>source</i> and <i>target</i> model as the simple event-driven drag-and-drop techniques discussed in “Dragging and Dropping.” In this case, however, you’re not dragging one control to another control to invoke some code; you’re moving <i>data</i> from one control or application to another control or application. For example, the user selects and drags a range of cells in Excel (<i>source</i>) then drops the range of cells into the DataGrid control (<i>target</i>) in your application.</p>
<p>
In Visual Basic, the vehicle, or repository, of this data is the DataObject object — it is the means by which data is moved from the source to the target. It does this by providing the methods needed to store, retrieve, and analyze the data. The following table lists the property and methods used by the DataObject object:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Category</b></td>
<td class=label width=27%><b>Item</b></td>
<td class=label width=49%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=24%>Property</td>
<td width=27%>Files</td>
<td width=49%>Holds the names of files dragged to or from the Windows Explorer.</td>
</tr>
<tr valign=top>
<td width=24%>Methods</td>
<td width=27%>Clear</td>
<td width=49%>Clears the content of the DataObject object.</td>
</tr>
<tr valign=top>
<td width=24%></td>
<td width=27%>GetData</td>
<td width=49%>Retrieves data from the DataObject object.</td>
</tr>
<tr valign=top>
<td width=24%></td>
<td width=27%>GetFormat</td>
<td width=49%>Determines if a specified data format is available in the DataObject object.</td>
</tr>
<tr valign=top>
<td width=24%></td>
<td width=27%>SetData</td>
<td width=49%>Places data into the DataObject object, or indicates that a specified format is available upon request.</td>
</tr>
</table><br>
<p>
Used with the OLE drag-and-drop events, these methods allow you to manage data in the DataObject object on both the source and target sides (if both are within your Visual Basic application). For instance, you can place data into the DataObject object on the source side using the SetData method, and then use the GetData method to accept the data on the target side.</p>
<p>
The Clear method is used to clear the content of the DataObject object on the source side when the OLEStartDrag event is triggered. When data from a control is dragged in an automatic drag operation, its data formats are placed into the DataObject object before the OLEStartDrag event is triggered. If you don’t want to use the default formats, you use the Clear method. If you want to add to the default data formats, you do not use the Clear method.</p>
<p>
The Files property allows you to store the names of a range of files that can be then dragged into a drop target. See “Dragging Files from the Windows Explorer” for more information on this property.</p>
<p>
You can also specify the format of the data being transferred. The SetData and GetData methods use the following arguments to place or retrieve data in the DataObject object:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Argument</b></td>
<td class=label width=74%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%><i>Data</i></td>
<td width=74%>Allows you to specify the type of data that is placed into the DataObject object (optional argument if the <i>format</i> argument has been set; otherwise, it's required).</td>
</tr>
<tr valign=top>
<td width=26%><i>Format</i></td>
<td width=74%>Allows you to set several different formats that the source can support, without having to load the data for each (optional argument if the <i>data</i> argument has been set or if Visual Basic understands the format; otherwise, it's required). </td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When data is dropped onto the target and no format has been specified, Visual Basic is able to detect if it is a bitmap, metafile, enhanced metafile, or text. All other formats must be specified explicitly or an error will be generated.</p>
<p>
The <i>format</i> argument uses the following constants or values to specify the format of the data:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Constant</b></td>
<td class=label width=16%><b>Value</b></td>
<td class=label width=60%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=24%>vbCFText</td>
<td width=16%>1</td>
<td width=60%>Text</td>
</tr>
<tr valign=top>
<td width=24%>vbCFBitmap</td>
<td width=16%>2</td>
<td width=60%>Bitmap (.bmp)</td>
</tr>
<tr valign=top>
<td width=24%>vbCFMetafile</td>
<td width=16%>3</td>
<td width=60%>Metafile (.wmf)</td>
</tr>
<tr valign=top>
<td width=24%>vbCFEMetafile</td>
<td width=16%>14</td>
<td width=60%>Enhanced metafile (.emf)</td>
</tr>
<tr valign=top>
<td width=24%>vbCFDIB</td>
<td width=16%>8</td>
<td width=60%>Device-independent bitmap (.dib or .bmp)</td>
</tr>
<tr valign=top>
<td width=24%>vbCFPalette</td>
<td width=16%>9</td>
<td width=60%>Color palette</td>
</tr>
<tr valign=top>
<td width=24%>vbCFFiles</td>
<td width=16%>15</td>
<td width=60%>List of files</td>
</tr>
<tr valign=top>
<td width=24%>vbCFRTF</td>
<td width=16%>-16639</td>
<td width=60%>Rich text format (.rtf)</td>
</tr>
</table><br>
<p>
The SetData, GetData, and GetFormat methods use the <i>data</i> and <i>format</i> arguments to return either the type of data in the DataObject object or to retrieve the data itself if the format is compatible with the <i>target</i>. For example:</p>
<pre><code>Private Sub txtSource_OLEStartDrag(Data As _ 
      VB.DataObject, AllowedEffects As Long)
   Data.SetData txtSource.SelText, vbCFText
End Sub
</code></pre>
<p>
In this example, <i>data</i> is the text selected in a textbox and <i>format</i> has been specified as text (vbCFText).</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You should use the vbCFDIB data format instead of vbCFBitmap and vbCFPalette, in most cases. The vbCFDIB format contains both the bitmap and palette and is therefore the preferred method of transferring a bitmap image. You can, however, also specify the vbCFBitmap and vbCFPalette for completeness. If you chose not to use the vbCFDIB format, you must specify both the vbCFBitmap and vbCFPalette formats so that the bitmap and the palette are correctly placed into the DataObject object.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Creating a Custom Data Format" for information on defining your own data format.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What Can You Do with Objects?</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconwhatcanyoudowithobjects"></a>What Can You Do with Objects?</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconWhatCanYouDoWithObjectsC">
</object></p>
<p>
An object provides code you don't have to write. For example, you could create your own File Open and File Save dialog boxes, but you don't have to. Instead, you can use the common dialog control (an object) provided by Visual Basic. You could write your own scheduling and resource management code, but you don't have to. Instead, you can use the Calendar, Resources, and Task objects provided by Microsoft Project.</p>
<h2>Visual Basic Can Combine Objects from Other Sources</h2>
<p>
Visual Basic provides the tools to allow you to combine objects from different sources. You can now build custom solutions combining the most powerful features of Visual Basic and applications that support Automation (formerly known as OLE Automation). <i>Automation</i> is a feature of the <i>Component Object Model</i> (COM), an industry standard used by applications to expose objects to development tools and other applications.</p>
<p>
You can build applications by tying together intrinsic Visual Basic controls, and you can also use objects provided by other applications. Consider placing these objects on a Visual Basic form:
<ul type=disc>
<li>
A Microsoft Excel Chart object<br><br></li>
<li>
A Microsoft Excel Worksheet object<br><br></li>
<li>
A Microsoft Word Document object</li>
</ul>
<p>
You could use these objects to create a checkbook application like the one shown in Figure 5.9. This saves you time because you don't have to write the code to reproduce the functionality provided by the Microsoft Excel and Word objects.</p>
<p class=label>
<b>Figure 5.9&nbsp;&nbsp;&nbsp;Using objects from other applications</b></p>
<p>
<img src="avp05019.gif" border=0></p>
</BODY>
</HTML>

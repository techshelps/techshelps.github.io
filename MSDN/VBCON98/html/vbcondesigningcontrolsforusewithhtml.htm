<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Designing Controls for Use With HTML</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondesigningcontrolsforusewithhtml"></a>Designing Controls for Use With HTML</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDesigningControlsForUseWithHTMLC">
</object></p>
<p>
A control on an HTML page is specified using the HTML &lt;OBJECT&gt; and &lt;/OBJECT&gt; tags. When the HTML is processed, the control is created and positioned. If the &lt;OBJECT&gt; tag includes any &lt;PARAM NAME&gt; attributes, the property values supplied with those attributes are passed to the control's ReadProperties event using the standard PropertyBag object, as discussed in "Understanding Control Lifetime and Key Events."</p>
<p>
Once the HTML page is active, the control's property values may also be set by scripts attached to events that occur on the page.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If there are no &lt;PARAM NAME&gt; attributes other than those that set extender properties (such as Top and Left), the control may receive an InitProperties event rather than a ReadProperties event. This behavior is dependent on browser implementation, and should not be relied on.</p>
<p>
The Package and Deployment Wizard makes it easy to create an Internet setup for your control, with cabinet (.cab) files that can be automatically downloaded when a user opens an HTML page containing an instance of your control. Support files, such as MSVBVM60.DLL, can be downloaded separately. P-code .ocx files are very compact, so if support files already exist on a user's computer, downloading can be very fast.</p>
<p>
Visual Basic controls can support digital signatures, safe initialization, and safe scripting.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;In order to use a control that includes licensing support on an HTML page, a licensed copy of the control component must be installed on the Web server that provides the page. This is discussed in "Licensing Issues for Controls," later in this chapter.</p>
<h2>Making Your Control Safe for Scripting and Initialization on HTML Pages</h2>
<p>
Code that's downloaded as a result of opening a page on the World Wide Web doesn't come shrink-wrapped, blazoned with a company name to vouch for its reliability. Users may be understandably skeptical when they're asked to okay the download. If you intend for your control to be used on HTML pages, there are several things you can do to reassure users.
<ul type=disc>
<li>
<i>Digital signatures</i> create a path to you (through the company that authorized your certificate), in the event that your control causes harm on a user's system. You can incorporate your signature when you use Package and Deployment Wizard to create an Internet setup for your control component.<br><br></li>
<li>
Marking your control <i>safe for scripting</i> tells users that there's no way a script on an HTML page can use your control to cause harm to their computers, or to obtain information they haven't supplied willingly.<br><br></li>
<li>
Marking your control <i>safe for initialization</i> lets users know there's no way an HTML author can harm their computers by feeding your control invalid data when the page initializes it.</li>
</ul>
<p>
This topic explains how to design your control so that when you create your Internet setup, you'll be able to mark your control as safe for scripting and safe for initialization.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The default setting for Internet Explorer is to display a warning and to refuse to download a component that has not been marked safe for scripting and initialization.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The latest information on digital signatures, cabinet files, and Internet setup can be found on the Microsoft Visual Basic Web site.</p>
<h3>Safe for Scripting</h3>
<p>
When a Web designer places your control on an HTML page, he uses a scripting language such as JavaScript or Visual Basic, Scripting Edition to access the control's properties, invoke its methods, and handle its events. By marking your control as safe for scripting, you're providing an implicit warrantee: "No matter what VBScript or JavaScript code is used, this control cannot be made to harm a user's computer, or to take information the user hasn't volunteered."</p>
<p>
As the author of your control, you can be reasonably sure that in normal use it won't destroy data or compromise the security of a user's computer. Once your control is in the hands of a Web designer, however, you have no guarantee that it will be used in the ways you intended.</p>
<h4>Keys to Scripting Safety</h4>
<p>
As an example of a control that's <i>not</i> safe for scripting, consider the rich text box. The RichTextBox control has a SaveFile method that can be used to write the contents of the control to a file. A malicious person could write a script that would cause this control to over-write an operating system file, so that the user's computer would malfunction.</p>
<p>
What makes the control unsafe is not that it can save information to a file — it's the fact that <i>the script</i> can specify the filename. This observation provides the key to creating controls that are safe for scripting. As long as your control doesn't allow a script to specify the source or target for file or registry operations, or make API calls that can be directly controlled by a script, it is probably safe for scripting.</p>
<p>
Thus, a control that permits a Web page designer to do any of the following is probably not safe for scripting:
<ul type=disc>
<li>
Create a file with a name supplied by a script.<br><br></li>
<li>
Read a file from the user's hard drive with a name supplied by a script.<br><br></li>
<li>
Insert information into the Windows Registry (or into an .ini file), using a key (or filename) supplied by a script.<br><br></li>
<li>
Retrieve information from the Windows Registry (or from an .ini file), using a key (or filename) supplied by a script.<br><br></li>
<li>
Execute a Windows API function using information supplied by a script.<br><br></li>
<li>
Create or manipulate external objects using programmatic IDs (for example, "Excel.Application") that the script supplies.</li>
</ul>
<p>
The line between safe and unsafe can be a fine one. For example, a control that uses the SaveSetting method to write information to its own registry key doesn't disqualify itself for safe scripting by doing so. On the other hand, a control that allows the registry key to be specified (by setting a property or invoking a method) is not safe.</p>
<p>
A control that uses a temporary file may be safe for scripting. If the name of that temporary file can be controlled by a script, then the control is not safe for scripting. <i>Even allowing a script to control the amount of information that goes into the temporary file</i> will make the control unsafe for scripting, because a script could continue dumping information into the file until the user's hard disk was full.</p>
<p>
As a final example, a control that uses API calls is not necessarily unsafe for scripting. Suppose, however, that the control allows a script to supply data that will be passed to an API, and doesn't guard against oversize data overwriting memory, or invalid data corrupting memory. Such a control is not safe for scripting.</p>
<p>
As an indication of the seriousness of scripting safety, note that VBScript itself does not include methods to access the registry, save files, or create objects.</p>
<h4>Choosing Constituent Controls</h4>
<p>
You might think that using a constituent control that's not safe for scripting would automatically make your ActiveX control unsafe for scripting. This is not necessarily true.</p>
<p>
As explained in "Adding Properties to Controls," later in this chapter, the properties and methods of constituent controls do <i>not</i> automatically become part of your control's interface. As long as you avoid exposing the properties and methods that make a constituent control unsafe, you can use it without making your own control unsafe.</p>
<p>
For example, if you use the RichTextBox as a constituent control, you should not expose its SaveFile method.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Do not provide a property that returns a reference to an unsafe constituent control. A script could use this reference to access the properties and methods that make the control unsafe.</p>
<h4>Documenting Scripting Safety</h4>
<p>
Determining whether a control is safe is not a trivial exercise. You may find it helpful to record your design decisions that affect safe scripting. A useful exercise is to construct tables containing the following:
<ul type=disc>
<li>
All of your control's public properties, methods, and events.<br><br></li>
<li>
All of the files and registry keys accessed, and all API calls used.</li>
</ul>
<p>
If there are any dependencies or data transfer between the elements of these two tables, then the control is probably not safe for scripting.</p>
<p>
You may wish to have this documentation reviewed by an experienced programmer who understands both ActiveX controls and scripting.</p>
<h3>Safe for Initialization</h3>
<p>
A control marked as safe for initialization carries an implicit guarantee that it will cause no harm no matter how its properties are initialized.</p>
<p>
On an HTML page, your control's initial state is set using PARAM NAME attributes with the OBJECT tag that embeds your control on the page. If a malicious Web designer can make your control steal information or otherwise cause harm by placing invalid data in a PARAM NAME attribute, then your control is not safe for initialization.</p>
<p>
The best defense against malicious data is to validate each property value that's obtained in your control's ReadProperties event. All the data a Web designer places in PARAM NAME attributes is supplied to your control through the PropertyBag object in the ReadProperties event. (A well-written control should perform this kind of validation anyway, to prevent problems caused by developers who manually edit .frm files.)</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The most up-to-date information on authoring controls for the Internet can be found on the Microsoft Visual Basic Web site.</p>
<h2>Using Show and Hide Events</h2>
<p>
The Show and Hide events can be very useful on Web pages. If your control is performing a resource-intensive task, such as showing a video clip or repeatedly downloading and displaying a stock value, you may want to pause this activity when the Hide event occurs.</p>
<p>
The Hide event means that the user has moved on to another page, relegating the page your control is on to the History list. The Show event means that the user has returned to your page, and can thus be the signal for resuming resource-intensive display tasks.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The Show and Hide events are discussed in "Understanding Control Lifetime and Key Events," earlier in this chapter.</p>
<h2>Using the Parent and ParentControls Properties</h2>
<p>
You can use the Parent property of the UserControl object to access the container. For example, in Internet Explorer, the following code will change the background color of the HTML page on which your control is located:</p>
<pre><code>Parent.Script.get_document.bgColor = "Blue"
</code></pre>
<p>
More information on the Internet Explorer Scripting Object Model can be found on Microsoft's Web site.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Always use <i>late binding</i> for calls to the Internet Explorer Scripting Object Model. Using early binding will almost certainly cause compatibility problems in the future, while late binding will always work.</p>
<h3>The ParentControls Collection</h3>
<p>
The ParentControls collection allows you to access the other controls on a container where your control has been sited. On some containers — Internet Explorer is one of them — ParentControls returns an extender object whose properties and methods are not merged with those of the controls. This prevents you from accessing the controls themselves.</p>
<p>
To access the other controls on an HTML page, you can set the ParentControlsType property of the ParentControls collection to vbNoExtender. The ParentControls collection will thereafter return the interfaces of the controls themselves, without the extender.</p>
<pre><code>ParentControls.ParentControlsType = vbNoExtender
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Parent property and ParentControls collection can be used with many other containers. They are not limited to HTML browsers.</p>
</BODY>
</HTML>

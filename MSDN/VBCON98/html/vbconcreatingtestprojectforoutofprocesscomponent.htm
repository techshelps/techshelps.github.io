<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Test Project for an Out-of-Process Component</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingtestprojectforoutofprocesscomponent"></a>Creating a Test Project for an Out-of-Process Component</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingTestProjectForOutofProcessComponentC">
</object></p>
<p>
This topic describes explains how to set up test projects to exercise most of the objects out-of-process components can provide. ActiveX documents, however, cannot be tested as described here. See "Building ActiveX Documents."</p>
<p class=label>
<b>To create a test project for an out-of-process component</b>
<ol>
<li>
On the <b>File</b> menu of your out-of-process component (ActiveX Exe project), click <b>Make &lt;project name&gt;</b> to create an executable file.<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;The reason you create this executable is to help your test project keep its reference to the component project. The executable is not required for debugging.</p></li>
<li>
On the <b>Project</b> menu, click <b>&lt;project&gt; Properties</b> to open the <b>Project Properties</b> dialog box. Select the <b>Components</b> tab, click <b>ActiveX Component</b> in the <b>Start Mode</b> box, and then click <b>OK</b>.<p class=tl>
Use the <b>ActiveX Component</b> setting when testing your component with a client test program. If your component can also function as a standalone desktop application, use the <b>Standalone</b> setting to test that mode of operation, as described in "Debugging Out-of-Process Components."</P></li>
<li>
Press CTRL+F5 to run your component project.<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Your component project <i>must</i> be in run mode! When you run your component in the development environment, Visual Basic switches its Windows registry entries from the executable (created in step 1) to the project, and switches them back when you return to design mode. You cannot add a reference to the component <i>project</i> unless it’s in run mode; a reference to the executable will not allow you to debug the component project in the development environment.</p><p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Always start your component project by pressing CTRL+F5, or by clicking <b>Start With Full Compile</b> on the <b>Run </b>menu, so that all compilation errors are resolved before your component begins supplying objects to your test application. Compiling component code on demand (the default) can lead to situations in which you have to shut down the component, leaving the test program holding invalid object references. (To disable demand compilation, select <b>Options</b> from the <b>Tools</b> menu, select the <b>General</b> tab of the <b>Options</b> dialog box, and clear <b>Compile On Demand</b>. This affects the current session as well as future instances of Visual Basic.)</p></li>
<li>
Open a second instance of the Visual Basic development environment. In the <b>New Project</b> dialog box, click the <b>Standard Exe</b> icon to select it, and then click <b>OK</b> to open a new <b>Standard Exe</b> project.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;As described in "How to Test ActiveX Components," you must use an ActiveX Exe project as your test project if your component implements asynchronous call-backs.</p></li>
<li>
On the <b>Project</b> menu, click <b>References</b> to open the <b>References</b> dialog box. Locate your component in the list, and check it.<p class=tl>
If your component does not appear in the <b>References</b> dialog box, switch back to the component project and make sure it’s running. If the component project does not stay in run mode when you press ctrl+f5, click <b>&lt;Project&gt; Properties</b> on the <b>Project</b> menu, to open the <b>Project Properties</b> dialog box. Select the <b>Component</b> tab, and make sure that <b>ActiveX Component</b> is selected in the <b>Start Mode</b> box.</P><p class=tl>
If your component is running, but does not appear in the <b>References</b> dialog of your test project, stop the component and make sure at least one of its class modules has its Instancing property set to a value <i>other than </i>Private or PublicNotCreatable.</P></li>
<li>
Add code to test the properties and methods of each public class provided by your component.<p class=tl>
See "Programming with Components" in the <i>Visual Basic Programmer’s Guide</i> for more information on referencing other applications’ objects from within a client application.</P><p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Unless you recompile the executable in step 1 each time you make changes to code in your component project, you can only make changes to the test project while the component project is in run mode.</p><p class=atl>
When the component project is not in run mode, the test project doesn’t have access to its type library, and will fall back on the type library in the compiled executable you created in Step 1.</p><p class=atl>
The executable created in step 1 prevents the test project from losing its reference to the component project, but does not provide access to the features you’ve added since creating the executable.</p></li>
</ol>
<p>
You can use the Object Browser in the test project to verify that the public classes, methods, and properties of your component are available. In the test project, the Object Browser will show only the public members.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"How to Debug Out-of-Process Components" describes debugging techniques. ActiveX Documents cannot be debugged without a browser or other active document container. See "Building ActiveX Documents." "Project Compatibility: Avoiding MISSING References" describes the Project Compatibility option, and explains how to restore missing references.</p>
</BODY>
</HTML>

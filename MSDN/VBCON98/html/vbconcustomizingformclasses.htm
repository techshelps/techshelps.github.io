<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Customizing Form Classes</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcustomizingformclasses"></a>Customizing Form Classes</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCustomizingFormClassesC">
</object></p>
<p>
It may surprise you to learn that you've been creating classes for as long as you've been programming in Visual Basic. It's true: Form1, that familiar denizen of every project you've ever started, is really — a class.</p>
<p>
To see this, open a new Standard Exe project. Add a button to Form1, and place the following code in its Click event:</p>
<pre><code>Private Sub Command1.Click()
   Dim f As New Form1
   f.Show
End Sub
</code></pre>
<p>
Press F5 to run the project, and click the button. Holy smokes, there's another instance of Form1! Click its button. There's another! Every instance you create looks the same, and has the same behavior, because they're all instances of the Form1 class.</p>
<h4>What's Going On Here?</h4>
<p>
If you've read "Working with Objects" in "Programming Fundamentals," you know that an object variable declared As New contains Nothing until the first time you refer to it in code. When you use the variable for the first time, Visual Basic notices that it contains the special value Nothing, and creates an instance of the class. (And a good thing it does, too, or <code>f.Show</code> would cause an error.)</p>
<h4>Me and My Hidden Global Variable</h4>
<p>
You may be wondering how it is that you can refer to Form1 in code, as if it were an object variable. There's no magic involved. Visual Basic creates a hidden global object variable for every form class. It's as if Visual Basic had added the following declaration to your project:</p>
<pre><code>Public Form1 As New Form1
</code></pre>
<p>
When you select Form1 as your startup object, or type <code>Form1.Show</code> in code, you're referring to this hidden global object variable. Because it's declared As New, an instance of the Form1 class is created the first time you use this predeclared variable in code.</p>
<p>
The reason this declaration is hidden is that Visual Basic changes it every time you change the Name property of a form. In this way, the hidden variable always has the same name as the form class.</p>
<h4>A Very Short Quiz</h4>
<p>
Which of the instances of Form1 you created in the exercise above was associated with the hidden global variable? If you guessed the first one, you're right. Form1 is the default startup object for the project, and to Visual Basic that's just like using the predeclared global variable <code>Form1</code> in code.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;After you unload a form, you should always set any references to the form to Nothing in order to free the memory and resources the form was using. The reference most often overlooked is the hidden global form variable.</p>
<h4>What About All Those Other Instances of Form1?</h4>
<p>
In "Programming Fundamentals," you learned that to refer to an object, you need an object variable, and that an object exists only as long as there's at least one object variable containing a reference to it. So what was keeping all those other instances alive?</p>
<p>
The second instance of Form1, and all the ones that followed, had an object variable for just as long as it took to call their Show methods. Then that variable went out of scope, and was set to Nothing. But Visual Basic keeps a special collection named Forms, which you can read about in "More About Forms" in "Creating a User Interface." The Forms collection contains a reference to each of the loaded forms in your project, so that you can always find and control them.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;As you'll learn, this is not true of all classes. For example, the classes you design won't have hidden global variables or global collections to keep track of them — those are special features of form classes. However, you can declare your own global variables, and you can create your own collections — as described in "Creating Your Own Collection Classes."</p>
<h3>Properties, Methods, and Events of Form Classes</h3>
<p>
The first time you added a property to a form class, you probably did it visually, by dropping a command button (or some other control) on Form1. In doing so, you added a read-only Command1 property to the form class. Thereafter, you invoked this property of Form1 whenever you needed to call a method or property of the command button:</p>
<pre><code>Command1.Caption = "Click Me"
</code></pre>
<p>
When you changed the Name property of any control on a form, Visual Basic quietly changed the name of the read-only property, so they always matched.</p>
<p>
If you still have the project open from the earlier exercise, you can see this Command1 property by pressing F2 to open the Object Browser. In the Project/Library box, select Project1. You'll see Form1 in the Classes pane. In the Members pane, scroll down until you find Command1, and select it.</p>
<p>
Command1 has a property symbol beside it, and if you look in the description pane, you'll see that it's a WithEvents property. As you'll learn in "Adding Events to a Class," this means that the property (or object variable) has event procedures associated with it. One of those event procedures, Command1_Click(), may have been the first place you ever wrote Visual Basic code.</p>
<h4>But Wait, There's More</h4>
<p>
Dropping controls on a form is not the only way to add new members to the form class. You can add your own custom properties, methods, and events, as easily as you create new variables and procedures.</p>
<p>
To see this, add the following code to the Declarations section of Form1:</p>
<pre><code>' The Comment property of the Form1 class.
Public Comment As String
</code></pre>
<p>
Add the following code to the Click event of Form1:</p>
<pre><code>Private Sub Form_Click()
   MsgBox Comment, , "My comment is:"
End Sub
</code></pre>
<p>
Finally, change the code in the Command1_Click() event procedure by adding a line, as follows:</p>
<pre><code>Private Sub Command1.Click()
   Dim f As New Form1
   f.Comment = InputBox("What's my comment?")
   f.Show
End Sub
</code></pre>
<p>
Press F5 to run the project. Click Command1, and when the input box appears, type in some racy comment and click OK. When the new instance of Form1 appears, click on it to play back its Comment property.</p>
<p>
Click on the first instance of Form1, and notice that its Comment property is blank. Because Visual Basic created this instance as the Startup Object, you never got a chance to set its Comment property.</p>
<h4>Forms Can Call Each Other's Methods</h4>
<p>
If you were watching closely, you may have noticed that the code you added to the Form1 class didn't set the object's own Comment property — it set the Comment property of the <i>new </i>instance of Form1 it was creating.</p>
<p>
This ability of forms to set each other's properties and call each other's methods is a very useful technique. For example, when an MDIForm is opening a new child window, it can initialize the new window by setting its properties and calling its methods.</p>
<p>
You can also use this technique to pass information between forms.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can create custom events for forms. "Adding an Event to a Form" later in this chapter, provides a step by step procedure.</p>
<h4>Other Kinds of Modules</h4>
<p>
You add properties, methods, and events to form classes by putting code in their code modules. In the same way, you can add properties, methods, and events to class modules and — if you have the Professional or Enterprise Edition of Visual Basic — to UserControl and UserDocument code modules.</p>
<p>
As you read "Adding Properties and Methods to a Class" and "Adding Events to a Class," remember that everything you read applies to form classes as well as to class modules.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;What the heck is a class module? "Class Module Step by Step" shows how to define a class and illustrates the life cycle of the objects you create from that class.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Programmatically Accessing Objects in Your Data Environment Designer</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaccessingobjectsinyourde"></a>Programmatically Accessing Objects in Your Data Environment Designer</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vastmDim;vbconAccessingObjectsInYourDE_C">
</object></p>
<p>
Once Connection or Command objects are created, you can programmatically access and manipulate these ADO Command, Connection, and Recordset objects as though you had created them directly through ADO. This makes it possible for you to programmatically bind data-aware controls to a Command object or to fields within a Command object at <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defruntime">
</object><a href=JavaScript:alink_2.Click()>run time</a>. You can also dynamically set properties on ADO Connection or Recordset objects while they are closed, and set parameter values before data binding.</p>
<p>
In addition, when you programmatically access data exposed by the Data Environment, you have greater control over execution options and can create multiple instances of a DataEnvironment object.</p>
<p>
When a Command object is executed using a method or data binding, the following occurs:
<ul type=disc>
<li>
ADO objects are created for the associated Connection and Command objects, and the resulting Recordset. Also, the design-time properties from the Data Environment's objects transfer to the ADO objects.<br><br></li>
<li>
The ADO Connection opens.<br><br></li>
<li>
The ADO Command opens.</li>
</ul>
<p>
You can also programmatically create instances of your Data Environment by declaring a variable within a procedure using the DIM statement. For example:</p>
<pre><code>Dim DE as New MyDE
</code></pre>
<h2>Programmatically Manipulating Objects within Your Data Environment Designer</h2>
<p>
Each Command object that you create is exposed programmatically as a method from the DataEnvironment object. Therefore, to execute the Command object, you can execute the method from the Data Environment.</p>
<p>
In addition to exposing a method for each Command object, a Recordset object is also exposed, depending on the Recordset Returning property setting. Since it is not possible to surface both a method and a property of the same name, the Recordsets are exposed as the name of the Command preceded by "rs."</p>
<p>
Upon creation, the Recordset object is closed. When you execute the method off the Data Environment, the Recordset opens. In addition, you can manipulate the Recordset before and after it is opened. For example, once the Recordset is opened, you can navigate to the next record using the MoveNext method.</p>
<p>
All ADO Recordset methods and properties are available from the Recordset that is associated with the DataEnvironment object.</p>
<p class=label>
<b>To programmatically access your Data Environment from a Visual Basic form</b>
<ol>
<li>
Drop a Command button on your form. The code attached to this button is used to step through each record within the Command object in your DataEnvironment object.<br><br></li>
<li>
In the Click event of the button, add the following line of code in the Code<b> </b>window.<pre><code>Dim DE as New MyDE
MyDE.Customers
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This example assumes that there are no parameters associated with the Command object.</p></li>
<li>
The records are available from the Recordset associated with the Data Environment. This has the same name as the Command object, preceded by "rs". Add the following code to move to the first record in the Customers Command object.<pre><code>DE.rsCustomers.MoveFirst
</code></pre>
<p class=tl>
At this point, all methods associated with an ADO Recordset are available for <code>DE.rsCustomers</code>, such as the methods used to add, update, delete, and step through records. For example, the following code uses ADO methods to loop through all records in the recordset.</P><pre><code>Do While DE.rsCustomers.EOF = False
Debug.Print DE.rsCustomers.Fields(1).Value
DE.rsCustomers.MoveNext
Loop
</code></pre>
</li>
</ol>
<h2>Programmatically Executing Objects</h2>
<p>
The following are examples of executing Command objects using the method and Recordset objects associated with the DataEnvironment object. The examples use a Command object that is based on a recordset-returning stored procedure with two input parameters.</p>
<h3>Executing a Command Object with Multiple Parameters</h3>
<p>
If the Command object has multiple parameters, and you want to pass selected parameters, you must manually set the value of the parameters using the Parameters collection. Then, you must use the Open method from the Command object. For example, the Command object "InsertCustomer" contains the parameter's identification, first name, and nickname. To execute this method and include all parameters, you can use the following method:</p>
<pre><code>MyDE.InsertCustomer "34","Fred","Freddy"
</code></pre>
<p>
However, to only include the identification and first name, you would use the following code:</p>
<pre><code>MyDE.Commands("InsertCustomer").Parameters("ID").value = "34"
MyDE.Commands("InsertCustomer").Parameters("Name").value = "Fred
MyDE.Commands("InsertCustomer").Open
</code></pre>
<h3>Executing a Command Object with Parameters</h3>
<p>
The following example shows recordset-returning stored procedures with two Parameter objects.</p>
<pre><code>Dim MyDE As DataEnvironment1
Dim nRecords As Integer
Dim nSum As Long

MyDE.SalesTotalByCityState "Seattle","WA"
MyDE.RSSalesByCityState.MoveFirst
For nRecords = 1 To MyDE.RSSalesByCityState.RecordCount
   nSum = nSum + MyDE.RSSalesByCityState.Fields("Invoice_Amt")
   MyDE.RSSalesByCityState.MoveNext
Next nRecords
Debug.Print nSum
</code></pre>
<p>
Following is a more complicated example that shows a Command object that is based on a stored procedure that returns both a Recordset object and a return value. The example also contains an input and an output Parameter object.</p>
<pre><code>Dim MyDE As DataEnvironment1
Dim sOutStatus As String, nNumRecords As Long
nNumRecords = MyDE.OrdersByEmployee("SMITH", sOutStatus)
If sOutStatus = "Succeeded" Then
   MyDE.OrdersByEmployee_RS.MoveFirst
   While Not MyDE.RSOrdersByEmployee.EOF
      Debug.Print MyDE.RSOrdersByEmployee.Fields("OrderDate")
      MyDE.RSOrdersByEmployee.MoveNext
   End
End If
</code></pre>
<h3>Executing a Non-Recordset Returning Command Object</h3>
<p>
The following example shows a non-recordset-returning stored procedure with a return value and Parameter object. A common scenario is to use stored procedures to insert, update and delete records. These stored procedures do not return Recordset objects, but do use input and output Parameter objects.</p>
<pre><code>Dim MyDE As New DataEnvironment1
Dim sOutStatus As String, nNumRecordsAffected As Long
nNumRecords = MyDE.DeleteEmployee("34", sOutStatus)
If sOutStatus = "Succeeded" Then
   Debug.Print nNumRecords + " employee(s) were deleted."
Else
   Debug.Print "Delete was not successful."
End If
</code></pre>
</BODY>
</HTML>

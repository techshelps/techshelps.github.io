<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Defining Events at Runtime</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondefiningeventsatruntime"></a>Defining Webclass Events at Run Time</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDefiningEventsAtRuntimeC">
</object></p>
<p>
In addition to handling events that exist in the webclass at design time, you can create events at run time and process them dynamically. The ability to generate events at run time is useful in cases where you generate part or all of your user interface dynamically, by writing HTML in your response to the browser.</p>
<p>
You generate user events at run time using the URLFor method, which takes two arguments: the name of a webitem in your webclass, and the name of an event. To create a user event, you pass this function the name of an event that was not defined at run time.</p>
<p>
Processing for these run-time events is handled by the UserEvent event. In the procedure for this event, you write code that tells the webclass how to process all its dynamically generated events. If there is more than one of these events, you must use a conditional statement such as If or Select Case to tell the webclass how to respond to each of them.</p>
<h2>Example: Dynamic Events in a Search Page</h2>
<p>
Suppose you have an application that consists of two pages:
<ul type=disc>
<li>
A search page that looks up last names in a database. The interface for this page is fixed: it contains a few elements that are used to launch the search request.<br><br></li>
<li>
A results page that displays the results in a table and provides a hyperlink for each to find more information. The interface for this page changes based on the number of records found in the database.</li>
</ul>
<p>
The following figure shows two possible outcomes of the search.</p>
<p class=label>
<b>Tables with Dynamically Generated Events</b></p>
<p>
<img src="vb4oaw1.gif" border=0></p>
<p>
Suppose that for each row the search returns, you want to generate a hyperlink the user can select to receive more information. These hyperlinks can act as events for the webclass, but you cannot handle these events at design time because they are created dynamically when the search is executed. Therefore, you must generate these events at run time.</p>
<p>
The following shows some of the Visual Basic code you would use to generate the table and create user events for it.</p>
<pre><code>With Response

   'Begin a table
   .Write "&lt;TABLE BORDER CELLSPACING=1 CELLPADDING=7&gt;"

   'For each record in the result set, generate a row.
   Do While rs.EOF = False
      'Start a row and cell
      .Write "&lt;TR&gt;&lt;TD&gt;"

      'Insert a hyperlink calling the lastname field,
      'which represents a database key into the database
      'record, for the Response webitem
      .Write&nbsp; "&lt;A HREF=""" &amp; URLFor(Response, rs("lastname") &amp; """&gt;"

      'Make the text of the hyperlink the person's name.
      .Write rs("lastname") &amp; ", " &amp; rs("firstname")
      .Write &lt;/A&gt;"
      .Write "&lt;/TD&gt;&lt;/TR&gt;

      'Move to the next record and loop
      rs.MoveNext
   Loop

   'End the table
   .Write "&lt;/TABLE&gt;"

End With
</code></pre>
<p>
To handle the events for the response page, you would define code for the Response webitem's UserEvent event.</p>
<h2>Coding User Events</h2>
<p>
You handle all user events for a webitem within a single UserEvent procedure. If you have a page that contains several user events and you need to treat them differently in your procedures, you would use a conditional statement such as If or Select Case to specify the different responses for each dynamic event name on the page.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In the case of the table generated in the previous section, you would not use an If or Select Case statement because you want to perform the same operation for each row — retrieve the database key from the table, then look up the record and display more information.</p>
<p>
The webclass fires the UserEvent event when it receives a request from the browser that references a user event. The following code shows the procedure you might define for the events in the table shown in the section above:</p>
<pre><code>Private Sub Response_UserEvent(ByVal EventName As String)

   'Set a previously-defined variable to a new recordset
   rs = New Ado.recordset

   'Retrieve the key
   rs.GetPerson EventName

   'Code here to display a page with all of the information
   'for the retrieved record.
End Sub
</code></pre>
<p>
In this code, the developer creates a new recordset and retrieves the value for the specified key. You would replace the word Key with the appropriate key value.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling a Property or Method Using a String Name</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcallingpropertyormethodusingstringname"></a>Calling a Property or Method Using a String Name</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCallingPropertyOrMethodUsingStringName_C">
</object></p>
<p>
Most of the time you can discover the properties and methods of an object at design time and write code to handle them. In a few cases, however, you may not know about an object’s properties and methods in advance, or you may simply want the flexibility of allowing an end user to specify properties or execute methods at run time.</p>
<p>
Consider, for example, a client application that evaluates expressions entered by the user by passing an operator to a server application. Now suppose that you are constantly adding new functions to the server that require new operators. Unfortunately, you would need to recompile and redistribute the client application before it would be able to use the new operators. In order to avoid this, you can use the CallByName function to pass the new operators as strings, without changing the application.</p>
<p>
The CallByName function allows you to use a string to specify a property or method at run time. The signature for the CallByName function looks like this:</p>
<p>
<i>Result</i> = CallByName(<i>Object</i>, <i>ProcedureName</i>, <i>CallType</i>, <i>Arguments()</i>)</p>
<p>
The first argument to CallByName takes the name of the object that you want to act upon. The second argument, <i>ProcedureName,</i> takes a string containing the name of the method or property procedure to be invoked. The <i>CallType</i> argument takes a constant representing the type of procedure to invoke: a method (vbMethod), a property let (vbLet), a property get (vbGet), or a property set (vbSet). The final argument is optional, it takes a variant array containing any arguments to the procedure.</p>
<p>
Suppose you had a server application, MathServer, with a new SquareRoot function. Your application has two TextBox controls: Text1 contains the expression to be evaluated upon; Text2 is used to enter the name of the function. You could use the following code in the Click event of a command button to invoke the SquareRoot function on the expression in Text1:</p>
<pre><code>Private Sub Command1_Click()
   Text1.Text = CallByName(MathServer, Text2.Text, vbMethod, Text1.Text)
End Sub
</code></pre>
<p>
If the user enters "64 / 4" in Text1 and "SquareRoot" in Text 2, the above code would invoke the SquareRoot function (which takes a string containing the expression to be evaluated as a required argument) and return "4" in Text1 (the square root of 16, or 64 divided by 4). Of course, if the user entered an invalid string in Text2, or if the string contained the name of a property instead of a method, or if the method had an additional required argument, a run-time error would occur. As you might guess, you’ll need to add robust error handling code when you use CallByName to anticipate these or any other errors.</p>
<p>
While the CallByName function may be useful in some situations, you need to weigh its usefulness against the performance implications — using CallByName to invoke a procedure is slightly slower than late-bound calls. If you’re invoking a function that will be called repeatedly, such as inside a loop, CallByName could have a severe effect on performance.</p>
</BODY>
</HTML>

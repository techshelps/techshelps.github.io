<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Modifying the Form to Let You Add New Records</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconbindgridcontroltosource"></a>Modifying the Form to Let You Add New Records</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconBindGridControlToSourceC">
</object></p>
<p>
In addition to viewing and updating existing records, you may want to add new records to your data source. You can modify your form so that it can serve as a data entry form by creating command buttons that use ActiveX Data Objects (ADO) and the BindingsCollection object to clear the display of data, manage the data binding of controls, and add a new record to the underlying recordset.</p>
<p>
This topic shows how to modify the form you created in the previous topic so that it also serves as a data entry form for adding new customer records.</p>
<p class=label>
<b>To modify the form to let you add new records</b>
<ol>
<li>
Create command buttons for allowing data entry, adding new customer records, and returning to viewing data.<br><br></li>
<li>
Add code to enable data entry.<br><br></li>
<li>
Add code to enable saving the data you enter as a new record.<br><br></li>
<li>
Add code to enable returning the form to viewing data.</li>
</ol>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>This topic is part of a series that walks you through creating a simple database application that interacts with data in a tab-delimited text file. It begins with the topic <a href="vbcongetdatafromasciifile.htm">Interacting with Data in an ASCII Text File</a>.</p>
<h3>Create Command Buttons for Allowing Data Entry, Adding New Customer Records, and Returning to Viewing Data</h3>
<p>
The first step in modifying the form is to create the interface for the tasks that you want to accomplish. For example, to allow data entry on the customer address form you created in the previous topic, you could add the following:
<ul type=disc>
<li>
A DataEntry command button to clear the existing data displayed on the form and disable data binding.<br><br></li>
<li>
An AddCustomer command button to add new data entered on the form as a new record in the underlying recordset.<br><br></li>
<li>
A ViewData command button to re-enable data binding, returning the form to its original state.</li>
</ul>
<p>
First, add a command button to the form and change its Caption and Name properties to DataEntry. Add a second command button to the form and change its Caption and Name properties to AddCustomer. Then add a third command button to the form and change its Caption and Name properties to ViewData.</p>
<p>
Because the AddCustomer and ViewData command buttons should only be displayed when the form is being used for data entry, set the Visible property for these controls to False.</p>
<h3>Add Code to Enable Data Entry</h3>
<p>
You can make a data-bound form also serve as a data entry form by disabling data binding and clearing the existing data displayed on the form. You may also want to show hidden command button controls that apply only to adding new records, and hide command button controls that apply only to viewing existing records.</p>
<p>
For example, to enable the DataEntry command button on the customer address form, add the following code to the DataEntry_Click event procedure:</p>
<pre><code>Private Sub DataEntry_Click()
   ' Disable data binding.
   Set colBind = Nothing

   ' Clear the text box controls.
   Me.txtCustomerID = ""
   Me.txtCompanyName = ""
   Me.txtAddress = ""
   Me.txtCity = ""
   Me.txtRegion = ""
   Me.txtPostalCode = ""
   Me.txtCountry = ""

   ' Hide the command buttons used for viewing
   ' existing data.
   Me.Next.Visible = False
   Me.Previous.Visible = False
   Me.First.Visible = False
   Me.Last.Visible = False
   Me.DataEntry.Visible = False

   ' Show the command buttons used for entering new data.
   Me.AddCustomer.Visible = True
   Me.ViewData.Visible = True

End Sub
</code></pre>
<h3>Add Code to Enable Saving the Data You Enter as a New Record</h3>
<p>
After you've entered record data in a data entry form, you can use ADO to add the record to a recordset. For example, to enable the AddCustomer command button on the customer address form, add the following code to the AddCustomer_Click event procedure:</p>
<pre><code>Private Sub AddCustomer_Click()

   ' Add the record to the rsCustomers recordset 
   ' in your data-aware class.
   With objDataSource.rsCustomers
      .AddNew
      !CustomerID = Me.txtCustomerID.Text
      !CompanyName = Me.txtCompanyName.Text
      !Address = Me.txtAddress.Text
      !City = Me.txtCity.Text
      !Region = Me.txtRegion.Text
      !PostalCode = Me.txtPostalCode.Text
      !Country = Me.txtCountry.Text
      .Update
      
   End With

   ' Clear the controls for additional data entry,
   ' if desired.
   Me.txtCustomerID = ""
   Me.txtCompanyName = ""
   Me.txtAddress = ""
   Me.txtCity = ""
   Me.txtRegion = ""
   Me.txtPostalCode = ""
   Me.txtCountry = ""
   
End Sub
</code></pre>
<h3>Add Code to Enable Returning the Form to Viewing Data</h3>
<p>
When you've finished using your form as a data entry form, you can return it to its original use for viewing and editing existing records by re-enabling data binding. Any new records you've entered will now be displayed when you move through records on the form. You can also hide command button controls that apply only to adding new records, and show hidden command button controls that apply to viewing existing records.</p>
<p>
For example, to enable the ViewData command button on the customer address form, add the following code to the ViewData_Click event procedure:</p>
<pre><code>Private Sub ViewData_Click()

   ' Bind text box controls to the data source
   ' of your data-aware class.
   Set colBind = New BindingCollection

   Set colBind.DataSource = objDataSource
   colBind.Add txtCustomerID, "Text", "CustomerID"
   colBind.Add txtCompanyName, "Text", "CompanyName"
   colBind.Add txtAddress, "Text", "Address"
   colBind.Add txtCity, "Text", "City"
   colBind.Add txtRegion, "Text", "Region"
   colBind.Add txtPostalCode, "Text", "PostalCode"
   colBind.Add txtCountry, "Text", "Country"

   ' Show the command buttons used for viewing
   ' existing data.
   Me.Next.Visible = True
   Me.Previous.Visible = True
   Me.First.Visible = True
   Me.Last.Visible = True
   Me.DataEntry.Visible = True

   ' Hide the command buttons used for entering new data.
   Me.AddCustomer.Visible = False
   Me.ViewData.Visible = False

End Sub
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To read about the BindingCollection object, see <a href="vbconcreatingdata-awareclasses.htm">Creating Data-Aware Classes</a> in "Programming with Objects" in the <i>Programmer's Guide</i>.</p>
<h4>Step by Step</h4>
<p>
This topic is part of a series that walks you through using a data-aware class and ADO to create a simple database application that interacts with data in a tab-delimited text file.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>To</b></td>
<td class=label width=69%><b>See</b></td>
</tr>
<tr valign=top>
<td width=31%>Go to the next step</td>
<td width=69%><a href="vbconformatdata.htm">Modifying the Class and Form to Write Records Back to the Delimited Text File</a></td>
</tr>
<tr valign=top>
<td width=31%>Start from the beginning</td>
<td width=69%><a href="vbcongetdatafromasciifile.htm">Interacting with Data in an ASCII Text File</a></td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deploying ActiveX Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondeployingolecomponents"></a>Deploying ActiveX Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDeployingOLEComponentsC">
</object></p>
<p>
In addition to providing objects for use by client applications, some components can function as standalone desktop applications, in the way Microsoft Excel does. If your component is in this category, you can distribute it as you would any Visual Basic application.</p>
<p>
"Distributing Your Applications," in the <i>Visual Basic Programmer’s Guide,</i> contains all the information you need to use the Package and Deployment Wizard, or to create a custom Setup for your application.</p>
<p>
This topic and the following related topic discuss the distribution of components that are not standalone applications.
<ul type=disc>
<li>
<a href="vbconsettingbaseaddressesforolecontrolprojects.htm">Setting Base Addresses for In-Process Components</a>&nbsp;&nbsp;&nbsp;In-process components use memory more efficiently if you choose a good base address, thus improving performance on your users’ computers.</li>
</ul>
<h2>Ways to Distribute Components</h2>
<p>
There are several ways to distribute a component. For example:
<ul type=disc>
<li>
As part of your own Visual Basic applications.<br><br></li>
<li>
As a tool users can access from Automation-enabled desktop applications such as Microsoft Excel and Microsoft Access.<br><br></li>
<li>
As a component other developers can include in their applications, or use with the Internet.<br><br></li>
<li>
As part of an enterprise application, running on a remote computer (requires the Enterprise Edition of Visual Basic).</li>
</ul>
<p>
For all of these distribution scenarios except the first, you can create a standalone Setup for your component.</p>
<h3>Distributing a Component as Part of a Visual Basic Application</h3>
<p>
To distribute your component as part of a Visual Basic application, you can use Package and Deployment Wizard to create a setup program for the application. If your application has a reference to the component, Package and Deployment Wizard will locate the component using its registry entries, and include it — along with its support files — in the list of files needed to create distribution media.</p>
<p>
As with components that are also standalone desktop applications, this scenario is largely covered by ordinary application setup. The only additional consideration is the use of implemented interfaces.</p>
<h4>Including Type Libraries for Implemented Interfaces</h4>
<p>
If you’ve used the Implements keyword to add additional interfaces to your classes, as described in "Providing Polymorphism by Implementing Interfaces" in "General Principles of Component Design," you may need to include the type libraries for those interfaces in Setup for your component.</p>
<p>
You need to include the type library that includes a particular interface if:
<ul type=disc>
<li>
Any classes the interface has been added to are provided by out-of-process components.<br><br></li>
<li>
The application will provide objects to other applications, and some of those objects implement the interface.</li>
</ul>
<p>
The reason type libraries need to be included with your application in these two situations is that invoking an object’s properties and methods cross-process requires marshaling their arguments. In order to marshal the arguments, type library information must be available.</p>
<h3>Standalone Setup for a Component</h3>
<p>
To distribute your component for use by other developers, by Internet providers, or as part of an Enterprise application, use Package and Deployment Wizard to create a standalone setup program. The Package and Deployment Wizard will automatically include necessary support files. Be sure to include your Help file.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;For in-process components, see the related topic "Setting Base Addresses for In-Process Components," which contains important information regarding base addresses and their effect on the performance of your component.</p>
<p>
Developers who use your component can install it on their computers, and then use the Package and Deployment Wizard or the Setup Toolkit to include it in the distribution media for their applications.</p>
<p>
The steps required to produce Setup for your component will also give you the file dependency information you need to provide to developers who want to use your component with Microsoft Excel, Microsoft Visual C++, or other Automation-enabled development tools.</p>
<h3>Distributing Type Libraries for Implemented Interfaces</h3>
<p>
If you’ve used the Implements keyword to add additional interfaces to your classes, as described in "Providing Polymorphism by Implementing Interfaces" in "General Principles of Component Design," you need to include the type libraries for those interfaces in Setup for your component.</p>
<h3>Special Considerations</h3>
<p>
Distribution issues particular to ActiveX controls — such as licensing — and to ActiveX documents can be found in "Building ActiveX Controls" and "Building ActiveX Documents."</p>
<p>
If you plan to use your component for Internet development, the Package and Deployment Wizard can create CAB files for you. You can obtain the most up-to-date information on Internet setup options from the Microsoft Visual Basic Web site. </p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Distributing Your Applications," in the <i>Visual Basic Programmer’s Guide.</i></p>
</BODY>
</HTML>

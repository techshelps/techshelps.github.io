<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Changing an Object's Coordinate System</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconchangingobjectscoordinatesystem"></a>Changing an Object's Coordinate System</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconChangingObjectsCoordinateSystemC">
</object></p>
<p>
You set the coordinate system for a particular object (form or control) using the object’s scale properties and the Scale method. You can use the coordinate system in one of three different ways:
<ul type=disc>
<li>
Use the default scale.<br><br></li>
<li>
Select one of several standard scales.<br><br></li>
<li>
Create a custom scale.</li>
</ul>
<p>
Changing the scale of the coordinate system can make it easier to size and position graphics on a form. For example, an application that creates bar charts in a picture box can change the coordinate system to divide the control into four columns, each representing a bar in the chart. The following sections explain how to set default, standard, and custom scales to change the coordinate system.</p>
<h2>Using the Default Scale</h2>
<p>
Every form and picture box has several scale properties (ScaleLeft, ScaleTop, ScaleWidth, ScaleHeight, and ScaleMode) and one method (Scale) you can use to define the coordinate system. The default scale for objects in Visual Basic places the coordinate (0,0) at the upper-left corner of the object. The default scale uses twips.</p>
<p>
If you want to return to the default scale, use the Scale method with no arguments.</p>
<h2>Selecting a Standard Scale</h2>
<p>
Instead of defining units directly, you can define them in terms of a standard scale by setting the ScaleMode property to one of the settings shown in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>ScaleMode setting</b></td>
<td class=label width=73%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=27%>0</td>
<td width=73%>User-defined. If you set ScaleWidth, ScaleHeight, ScaleTop, or ScaleLeft directly, the ScaleMode property is automatically set to 0.</td>
</tr>
<tr valign=top>
<td width=27%>1</td>
<td width=73%>Twips. This is the default scale. There are 1,440 twips to one inch.</td>
</tr>
<tr valign=top>
<td width=27%>2</td>
<td width=73%>Points. There are 72 points to one inch.</td>
</tr>
<tr valign=top>
<td width=27%>3</td>
<td width=73%>Pixels. A pixel is the smallest unit of resolution on the monitor or printer. The number of pixels per inch depends on the resolution of the device.</td>
</tr>
<tr valign=top>
<td width=27%>4</td>
<td width=73%>Characters. When printed, a character is 1/6 of an inch high and 1/12 of an inch wide.</td>
</tr>
<tr valign=top>
<td width=27%>5</td>
<td width=73%>Inches.</td>
</tr>
<tr valign=top>
<td width=27%>6</td>
<td width=73%>Millimeters.</td>
</tr>
<tr valign=top>
<td width=27%>7</td>
<td width=73%>Centimeters.</td>
</tr>
</table><br>
<p>
All of the modes in the table, except for 0 and 3, refer to printed lengths. For example, an item that is two units long when ScaleMode is set to 7 is two centimeters long when printed.</p>
<pre><code>' Set scale to inches for this form.
ScaleMode = 5
' Set scale to pixels for picPicture1.
picPicture1.ScaleMode = 3
</code></pre>
<p>
Setting a value for ScaleMode causes Visual Basic to redefine ScaleWidth and ScaleHeight so that they are consistent with the new scale. ScaleTop and ScaleLeft are then set to 0. Directly setting ScaleWidth, ScaleHeight, ScaleTop, or ScaleLeft automatically sets ScaleMode to 0.</p>
<h2>Creating a Custom Scale</h2>
<p>
You can use an object’s ScaleLeft, ScaleTop, ScaleWidth, and ScaleHeight properties to create a custom scale. Unlike the Scale method, these properties can be used either to set the scale or to get information about the current scale of the coordinate system.</p>
<h3>Using ScaleLeft and ScaleTop</h3>
<p>
The ScaleLeft and ScaleTop properties assign numeric values to the upper-left corner of an object. For example, these statements set the value of the upper-left corner for the current form and upper-left corner for a picture box named picArena.</p>
<pre><code>ScaleLeft = 100
ScaleTop = 100
picArena.ScaleLeft = 100
picArena.ScaleTop = 100
</code></pre>
<p>
These scale values are shown in Figure 12.4.</p>
<p class=label>
<b>Figure 12.4&nbsp;&nbsp;&nbsp;The ScaleLeft and ScaleTop properties for a form and a control</b></p>
<p>
<img src="avp12004.gif" border=0></p>
<p>
These statements define the upper-left corner as (100, 100). Although the statements don’t directly change the size or position of these objects, they alter the effect of subsequent statements. For example, a subsequent statement that sets a control’s Top property to 100 places the object at the very top of its container.</p>
<h3>Using ScaleWidth and ScaleHeight</h3>
<p>
The ScaleWidth and ScaleHeight properties define units in terms of the current width and height of the drawing area. For example:</p>
<pre><code>ScaleWidth = 1000
ScaleHeight = 500
</code></pre>
<p>
These statements define a horizontal unit as 1/1,000 of the current internal width of the form and a vertical unit as 1/500 of the current internal height of the form. If the form is later resized, the units remain the same.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;ScaleWidth and ScaleHeight define units in terms of the internal dimensions of the object;  these dimensions do not include the border thickness or the height of the menu or caption. Thus, ScaleWidth and ScaleHeight always refer to the amount of room available <i>inside</i> the object. The distinction between internal and external dimensions (specified by Width and Height) is particularly important with forms, which can have a thick border. The units can also differ: Width and Height are always expressed in terms of the <i>container’s </i>coordinate system; ScaleWidth and ScaleHeight determine the coordinate system of the object itself.</p>
<h3>Setting Properties to Change the Coordinate System</h3>
<p>
All four of these scale properties can include fractions and they can also be negative numbers. Negative settings for the ScaleWidth and ScaleHeight properties change the orientation of the coordinate system.</p>
<p>
The scale shown in Figure 12.5 has ScaleLeft, ScaleTop, ScaleWidth, and Scale Height all set to 100.</p>
<p class=label>
<b>Figure 12.5&nbsp;&nbsp;&nbsp;Scale running from (100, 100) to (200, 200)</b></p>
<p>
<img src="avp12005.gif" border=0></p>
<h2>Using the Scale Method to Change the Coordinate System</h2>
<p>
A more efficient way to change the coordinate system, other than setting individual properties, is to use the Scale method. You specify a custom scale using this syntax:</p>
<p>
[<i>object</i>.]<b>Scale</b> <b>(</b><i>x1, y1</i><b>)</b> – <b>(</b><i>x2, y2</i><b>)</b></p>
<p>
The values of <i>x1</i> and <i>y1</i> determine the settings of the ScaleLeft and ScaleTop properties. The differences between the two x-coordinates and the two y-coordinates determine the settings of ScaleWidth and ScaleHeight, respectively. For example, suppose you set the coordinate system for a form by setting end points (100, 100) and (200, 200):</p>
<pre><code>Scale (100, 100)-(200, 200)
</code></pre>
<p>
This statement defines the form as 100 units wide and 100 units high. With this scale in place, the following statement moves a shape control one-fifth of the way across the form:</p>
<pre><code>shpMover.Left = shpMover.Left + 20
</code></pre>
<p>
Specifying a value of <i>x1 &gt; x2</i> or <i>y1 &gt; y2</i> has the same effect as setting ScaleWidth or ScaleHeight to a negative value.</p>
</BODY>
</HTML>

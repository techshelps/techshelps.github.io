<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an ActiveX DLL</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatinganinprocesscomponent"></a>Creating an ActiveX DLL</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatinganInProcessComponentC">
</object></p>
<p>
Components provide reusable code in the form of objects. An application that uses a component’s code, by creating objects and calling their properties and methods, is referred to as a <i>client</i>.</p>
<p>
Components can run either in-process or out-of-process with respect to the clients that use their objects. An in-process component, or ActiveX DLL, runs in another application’s process. The client may be the application itself, or another in-process component that the application is using.</p>
<p class=label>
<b>Figure 2.1&nbsp;&nbsp;&nbsp;In-process components are used by applications or other in-process components</b></p>
<p>
<img src="avtcm005.gif" border=0></p>
<p>
The series of step-by-step procedures in this chapter builds an in-process component called ThingDemo, with class modules that demonstrate object lifetime, global objects, and objects that control modal and modeless dialog boxes.</p>
<p>
You’ll also see how to debug an ActiveX DLL in process, by running the DLL and a test project together in the Microsoft Visual Basic development environment.</p>
<p>
The procedures for creating the ThingDemo component build on each other. The sequence in which you perform the procedures is therefore important.</p>
<h2>Topics</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=6%><a href="vbconcreatingoledllserver.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconcreatingoledllserver.htm">Creating the ThingDemo DLL Project</a><p>
Shows how to set the project options for an in-process component.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconcreatingpropertiesmethods03.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconcreatingpropertiesmethods03.htm">Creating Properties and Methods for the Thing Class</a><p>
Adds two properties and a method.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbcontestingyouroledll.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbcontestingyouroledll.htm">Creating the TestThing Test Project</a><p>
Creates a project group, consisting of ThingDemo and a test project, so you can debug the DLL project in process.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconcreatingtestingobjects03.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconcreatingtestingobjects03.htm">Creating and Testing Thing Objects</a><p>
Adds code to the TestThing project to create instances of the Thing object and invoke its properties and methods.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconrunningtestapplication03.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconrunningtestapplication03.htm">Running the TestThing Test Application</a><p>
Demonstrates the life cycle of object supplied by an in-process component.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconcircularreferencesobjectlifetime.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconcircularreferencesobjectlifetime.htm">Circular References and Object Lifetime</a><p>
Explores object life cycles further, illustrating the effects of circular references on component shutdown.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconaddingeventtooledllproject.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconaddingeventtooledllproject.htm">Adding a Form to the ThingDemo Project</a><p>
Adds code to show a form as either a modal or modeless dialog, using a global class to control the form.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconbacktotestapplication03.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconbacktotestapplication03.htm">Using the Global Object in TestThing</a><p>
Tests the global object and dialogs, and explains more about debugging DLLs in-process.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconcreatingtestingoledllexecutable.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconcreatingtestingoledllexecutable.htm">Compiling and Testing the ThingDemo DLL</a><p>
Compiles the project. Shows how to test the .dll file with the test project, and how to include it in another project.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconcircularreferencescomponentshutdown.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconcircularreferencescomponentshutdown.htm">Circular References and Component Shutdown</a><p>
Shows how Visual Basic unloads an in-process component after the client has released all references to its objects. Also shows how circular references can prevent this unloading.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconoledllcreationsummary.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconoledllcreationsummary.htm">ActiveX DLL Creation Summary</a><p>
Outlines the typical process of designing and creating an in-process component.</p>
</td>
</tr>
</table><br>
<p>
These procedures will be easier to follow if you set up your development environment as described below.</p>
<p class=label>
<b>Before You Begin</b>
<ol>
<li>
On the <b>View</b> menu, click <b>Toolbox</b> to open the Toolbox.<br><br></li>
<li>
On the <b>View</b> menu, click <b>Project Explorer</b> to open the <b>Project Explorer</b> window. The <b>Project Explorer </b>window will be used extensively to switch between project files.<br><br></li>
<li>
If the <b>Project Explorer </b>window is in Folder view, as shown below, click the <b>Toggle Folders </b>button on the <b>Project Explorer </b>window toolbar to turn the folders off.<p>
<img src="avtcm007.gif" border=0></P></li>
<li>
On the <b>View</b> menu, click <b>Properties Window</b> to open the <b>Properties </b>window.<br><br></li>
<li>
On the <b>Tools </b>menu, click <b>Options </b>to open the <b>Options </b>dialog box.<p class=tl>
Select the <b>Editor </b>tab, and make sure <b>Require Variable Declaration </b>is checked. This makes it much easier to catch typing errors.</P><p class=tl>
Select the <b>Environment </b>tab. Make sure <b>Prompt To Save Changes</b> is checked, then click <b>OK</b>. This will make it easy to save changes to the project as you go along.</P></li>
</ol>
</BODY>
</HTML>

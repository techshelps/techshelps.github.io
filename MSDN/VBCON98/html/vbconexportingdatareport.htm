<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exporting a Data Report</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconexportingdatareport"></a>Exporting a Data Report</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconExportingDataReport_C">
</object></p>
<p>
After compiling a report you may wish to reuse it, either as part of a larger document or perhaps for distribution on an intranet or the Internet. The Data Report designer's ExportReport method allows you to accomplish these tasks. Using the ExportReport method, you can export any report as a text file or as an HTML file. Additionally, you can use any of a number of ExportFormat objects to tailor the content and appearance of an exported file.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;The ExportReport method does not support the exporting of images or graphic shapes.</p>
<h2>ExportFormat Objects</h2>
<p>
The ExportReport method was designed to work with the ExportFormats collection. Each ExportFormat object in the collection represents a separate format for the report. For example, a report formatted for intranet distribution might include names of groups or employees as part of the report header; for Internet distribution, those same names would be removed or replaced. You would therefore create at least two ExportFormat objects, each tailored for the distribution mechanism. However, it is possible to export a report without creating any ExportFormat objects because four are already provided for you.</p>
<h4>Four Default ExportFormat Objects</h4>
<p>
By default, the ExportFormats collection contains four members. The four members and their associated file filters are shown in the chart below:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Object</b></td>
<td class=label width=33%><b>File Filter</b></td>
<td class=label width=34%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%>ExportFormats(1)</td>
<td width=33%>*.htm, *.html</td>
<td width=34%>HTML</td>
</tr>
<tr valign=top>
<td width=33%>ExportFormats(2)</td>
<td width=33%>*.htm, *.html</td>
<td width=34%>Unicode HTML</td>
</tr>
<tr valign=top>
<td width=33%>ExportFormats(3)</td>
<td width=33%>*.txt</td>
<td width=34%>Text</td>
</tr>
<tr valign=top>
<td width=33%>ExportFormats(4)</td>
<td width=33%>*.txt</td>
<td width=34%>Unicode Text</td>
</tr>
</table><br>
<p>
If you need to use any of the default types, you can also use the Key property to specify a default type. The Key property values and the constants are shown below:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Object</b></td>
<td class=label width=37%><b>Key</b></td>
<td class=label width=38%><b>Constant</b></td>
</tr>
<tr valign=top>
<td width=25%>ExportFormats(1)</td>
<td width=37%>key_def_HTML</td>
<td width=38%><b>rptKeyHTML</b></td>
</tr>
<tr valign=top>
<td width=25%>ExportFormats(2)</td>
<td width=37%>key_def_UnicodeHTML_UTF8</td>
<td width=38%><b>rptKeyUnicodeHTML_UTF8</b></td>
</tr>
<tr valign=top>
<td width=25%>ExportFormats(3)</td>
<td width=37%>key_def_Text</td>
<td width=38%><b>rptKeyText</b></td>
</tr>
<tr valign=top>
<td width=25%>ExportFormats(4)</td>
<td width=37%>key_def_UnicodeText</td>
<td width=38%><b>rptKeyUnicodeText</b></td>
</tr>
</table><br>
<p>
By using one of the four members, you can export a report without creating another ExportFormat object, provided the default meets your requirements. For example, to export a daily HTML report, you might use the following code:</p>
<pre><code>DataReport1.ExportReport rptKeyHTML
</code></pre>
<h3>Displaying a Dialog Box Is Optional</h3>
<p>
The programmer can determine whether or not a dialog box will be presented when exporting a report. For example, if the report is created automatically every morning, and written to the same file for distribution by an intranet, there is no need to display a dialog box. As long as a valid file path and key are supplied, and the Overwrite parameter is set to True, the dialog will not be displayed.</p>
<pre><code>' Export a report as HTML, overwriting any existing file. Export 
' all pages to the Daily_Report.htm file.
DataReport1.ExportReport rptKeyHTML, "C:\Temp\Daily_Report", True, , _
rptRangeAllPages
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In the above code the second argument seems to be a directory but is actually the file name. "Daily_Report.htm" is the name of the written file. The ExportFormat object supplies the file extension (.htm), and thus there's no need to write it in the file name argument.</p>
<h3>ExportFormat Supplies Dialog Information</h3>
<p>
The ExportFormat object also contains the information that is displayed when the user invokes the ExportReport method. In particular, the FileFormatString property sets the text that is displayed in the Export dialog box's Save As Type box. For example, imagine that a company has a standard ExportFormat object to be used with all reports. The following code would ensure that the ExportFormat is available from the list of format types on the Export dialog box:</p>
<pre><code>Dim strTemplate As String

' First create the template for the ExportFormat object.
strTemplate = "MyCompany Daily Report" &amp; vbCrLf &amp; rptTagBody

' Add an ExportFormat object. The FileFormatString determines
' what will be displayed in the Export dialog box. 
DataReport1.ExportFormats.Add _
   Key:="StandardReport", _
   FormatType:=rptFmtText, _
   FileFormatString:="Standard Report (*.txt)", _
   FileFilter:="*.txt", _
   Template:=strTemplate

' Invoke the ExportReport method specifying the ExportFormat
' object named StandardReport to use.
DataReport1.ExportReport "StandardReport", , False, True, _
rptRangeFromTo, 1, 10
</code></pre>
<p>
When invoked, the Export dialog box resembles this:</p>
<p>
<img src="vb4vof1.gif" border=0></p>
<h3>Template Codes</h3>
<p>
The core of an ExportFormat object is its template. A template is simply a string containing both the text you want to appear along with constants that represent various parts of the data report. The constants, values, and descriptions are shown in the table below:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Constant</b></td>
<td class=label width=45%><b>Value</b></td>
<td class=label width=34%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=21%><b>rptTagTitle</b></td>
<td width=45%>&lt;!--MSDBRPT_Template_Title--&gt;</td>
<td width=34%>Represents the title of the report, as found in the Title property.</td>
</tr>
<tr valign=top>
<td width=21%><b>rptTagBody</b></td>
<td width=45%>&lt;!--MSDBRPT_Template_Body--&gt;</td>
<td width=34%>Represents the body of the report.</td>
</tr>
</table><br>
<p>
To create a simple data report that includes only the name of the author followed by the body of the report, the template would resemble this:</p>
<pre><code>Dim strT As String
strT = "Author: " &amp; InputBox("Your name") &amp; vbCrLf &amp; rptTagBody
drpNwind.ExportFormats.Add "AuExp", rptFmtText, _
"Author Only Text File", "*.txt", strT
</code></pre>
</BODY>
</HTML>

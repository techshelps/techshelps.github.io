<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Displaying a Resultset in an MSHFlexGrid Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondisplayingresultsetinmsflexgridcontrol"></a>Displaying a Resultset in an MSHFlexGrid Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDisplayingResultsetInMSFlexGridControl_C">
</object></p>
<h2>RDO</h2>
<p>
The following code uses the ShowData method of a custom ActiveX control to display data from a resultset in an MSHFlexGrid control. The code sets up the grid based on the names in the rdoColumns property and initializes the grid, preparing it for the data. Note the use of the OrdinalPosition property to index the resultset's rdoColumns property.</p>
<p>
There are two sets of code to extract data from the rdoResultset, one that uses GetClipString, and another that uses the GetRows method. This helps you compare different approaches to the situation.</p>
<pre><code>Public Function ShowData(Resultset As rdoResultset) As Variant
 &nbsp; Dim cl As rdoColumn
 &nbsp; Static GridSetup As Boolean
 &nbsp; Dim MaxL As Integer
 &nbsp; Dim rsl As rdoResultset
 &nbsp; Dim Rows As Variant
 &nbsp; On Error GoTo ShowDataEH
 &nbsp; Set rsl = Resultset
 &nbsp; If GridSetup Then
 &nbsp;&nbsp;&nbsp;&nbsp; FGrid1.Rows = 51
 &nbsp;&nbsp;&nbsp;&nbsp; FGrid1.Cols = rsl.rdoColumns.Count
 &nbsp;&nbsp;&nbsp;&nbsp; FGrid1.Row = 0
 &nbsp;&nbsp;&nbsp;&nbsp; For Each cl In rsl.rdoColumns
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FGrid1.Col = cl.OrdinalPosition - 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FGrid1 = cl.Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If rsl.rdoColumns(cl.OrdinalPosition - 1).ChunkRequired Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MaxL = 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MaxL = rsl.rdoColumns(cl.OrdinalPosition - 1).Size + 4
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If MaxL &gt; 20 Then MaxL = 20
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FGrid1.ColWidth(FGrid1.Col) = TextWidth(String(MaxL, "n"))
 &nbsp;&nbsp;&nbsp;&nbsp; Next cl
 &nbsp;&nbsp;&nbsp;&nbsp; GridSetup = True
 &nbsp; End If
 &nbsp; FGrid1.Rows = 1&nbsp;&nbsp;&nbsp;&nbsp; 'Clear Grid of data (except titles)
 &nbsp; FGrid1.Rows = 51
 &nbsp; FGrid1.Row = 1
 &nbsp; FGrid1.Col = 0
 &nbsp; FGrid1.RowSel = FGrid1.Rows - 1
 &nbsp; FGrid1.ColSel = FGrid1.Cols - 1
 &nbsp; FGrid1.Clip = rsl.GetClipString(50, , , "-")

ExitShowData:
 &nbsp; FGrid1.RowSel = 1
 &nbsp; FGrid1.ColSel = 0
 &nbsp; Exit Function

ShowDataEH:
 &nbsp; Select Case Err
 &nbsp;&nbsp;&nbsp;&nbsp; Case 40022:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FGrid1.Clear
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resume ExitShowData
 &nbsp;&nbsp;&nbsp;&nbsp; Case 13
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FGrid1.Text = "&lt; &gt;"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resume Next
 &nbsp;&nbsp;&nbsp;&nbsp; Case Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Could not display data: " &amp; Err &amp; vbCrLf &amp; Error$
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resume ' ExitShowData
 &nbsp; End Select
End Function
</code></pre>
<h2>ADO</h2>
<p>
The following code implements the ShowData method of a custom ActiveX control adapted from an RDO control. Note that the RDO GetClipString method is superseded in ADO by the GetString method. Since you then have to parse the resulting Variant array, the routine is noticeably slower. If you have problems getting the GetRows function to work, you should convert to a more conservative (and slower) approach that loops through the rows. However, you should avoid using this technique if possible because it is far less efficient than using GetRows or binding directly to a control.</p>
<p>
Note how the OrdinalPosition property can no longer be used as an index on the Fields collection to pull out the column titles as you could in RDO. To handle this, substitute a new integer counter to address the column being manipulated. Use the DefinedSize and ActualSize properties to find the TEXT and IMAGE datatype fields that would not fit in a column. These new properties make it easier to determine the details of specific field values. Also added is code to deal with BLOB types if they're encountered while working through the data columns.</p>
<pre><code>Public Function ShowData(Resultset As Recordset) As Variant
 &nbsp; Dim cl As Field
 &nbsp; Static GridSetup As Boolean
 &nbsp; Dim MaxL As Integer
 &nbsp; Dim Op As Integer
 &nbsp; Dim rsl As Recordset
 &nbsp; Dim rows As Variant
 &nbsp; On Error GoTo ShowDataEH
 &nbsp; Set rsl = Resultset

 &nbsp; If GridSetup Then
 &nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; FGrid1.rows = 51
 &nbsp;&nbsp;&nbsp;&nbsp; FGrid1.Cols = rsl.Fields.Count
 &nbsp;&nbsp;&nbsp;&nbsp; FGrid1.Row = 0
 &nbsp;&nbsp;&nbsp;&nbsp; Op = 0
 &nbsp;&nbsp;&nbsp;&nbsp; For Each cl In rsl.Fields
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FGrid1.Col = Op
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FGrid1 = cl.Name
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If rsl.Fields(Op).DefinedSize &gt; 255 Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MaxL = 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MaxL = rsl.Fields(Op).ActualSize + 4
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If MaxL &gt; 20 Then MaxL = 20
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FGrid1.ColWidth(FGrid1.Col) = TextWidth(String(MaxL, "n"))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Op = Op + 1
 &nbsp;&nbsp;&nbsp;&nbsp; Next cl
 &nbsp;&nbsp;&nbsp;&nbsp; GridSetup = True
 &nbsp; End If
 &nbsp; FGrid1.rows = 1
 &nbsp; FGrid1.rows = 51
 &nbsp; FGrid1.Row = 1
 &nbsp; FGrid1.Col = 0
 &nbsp; FGrid1.RowSel = FGrid1.rows - 1
 &nbsp; FGrid1.ColSel = FGrid1.Cols - 1
 &nbsp; With FGrid1
 &nbsp; ' You can also use the ADO2 GetString method here in lieu of the
 &nbsp; ' following.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FGrid1.Clip = rsl.GetString(adClipString, 50, , , "-")
 &nbsp; End With
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
ExitShowData:
 &nbsp; FGrid1.RowSel = 1
 &nbsp; FGrid1.ColSel = 0
 &nbsp; Exit Function

ShowDataEH:
 &nbsp; Select Case Err
 &nbsp;&nbsp;&nbsp;&nbsp; Case 40022, 3021:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FGrid1.Clear
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resume ExitShowData
 &nbsp;&nbsp;&nbsp;&nbsp; Case 13, Is &lt; 0
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rows(j, i) = "&lt; &gt;"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resume 'Next
 &nbsp;&nbsp;&nbsp;&nbsp; Case Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Could not display data: " &amp; Err &amp; vbCrLf &amp; Error$
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resume ' ExitShowData
 &nbsp; End Select
End Function
</code></pre>
</BODY>
</HTML>

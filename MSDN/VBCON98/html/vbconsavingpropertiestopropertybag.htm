<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Saving Properties to the PropertyBag</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconsavingpropertiestopropertybag"></a>Saving Properties to the PropertyBag</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconSavingPropertiesToPropertyBagC">
</object></p>
<p>
When the end user of an ActiveX document views a document, there may be several text boxes that she or he will fill out as part of your application. If it's possible that the user will return repeatedly to the document, you may wish to save some time by saving the data to the PropertyBag.</p>
<p>
In the following example, the PropertyChanged statement is inserted into the Change event of the TextBox (txtFirstDoc) control. This causes Internet Explorer to prompt the user to save changes. If the user responds positively, the code writes the property value to the PropertyBag.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To learn more about the PropertyBag, see "Saving the Properties of Your Control" in "Building ActiveX Controls."</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX control. It begins with the topic <a href="vbconcreatingdocumentobject.htm">Creating an ActiveX Document</a>.</p>
<p class=label>
<b>To write and read a property to the PropertyBag</b>
<ol>
<li>
In the <b>Project Explorer</b> window, double-click the FirstDoc icon to bring its designer forward.<br><br></li>
<li>
Double-click the TextBox (txtFirstDoc) control to view its code.<br><br></li>
<li>
In the <b>Code</b> window, from the drop-down list of events for txtFirstDoc, click <b>Change</b>. Add the PropertyChanged statement, as shown:<pre><code>Private Sub txtFirstDoc_Change()
 &nbsp; PropertyChanged
End Sub
</code></pre>
</li>
<li>
Add the following code to the UserDocument object's WriteProperties event:<pre><code>Private Sub UserDocument_WriteProperties _
(PropBag As VB.PropertyBag)
 &nbsp; PropBag.WriteProperty "StrDocProp", _
 &nbsp; txtFirstDoc.Text, "Hello"
 &nbsp; Debug.Print "WriteProperties"
End Sub
</code></pre>
</li>
<li>
The code in step 4 saves the value of the Text property of the TextBox control to the PropertyBag. To retrieve the value, add the following code to the ReadProperties event:<pre><code>Private Sub UserDocument_ReadProperties _
(PropBag As VB.PropertyBag)
 &nbsp; txtFirstDoc.Text = _
 &nbsp; PropBag.ReadProperty("StrDocProp", _ 
 &nbsp; "Hello")
 &nbsp; Debug.Print "ReadProperties"
End Sub
</code></pre>
</li>
</ol>
<h2>Running the Project</h2>
<p>
Now that the property can be written to and read from the PropertyBag, run the project to test it.
<ol>
<li>
Press f5 to run the project.<br><br></li>
<li>
Click the <b>Address </b>box and type the path of the FirstDoc.vbd.<br><br></li>
<li>
Type some distinctive text, such as your name, into the blank TextBox control.<br><br></li>
<li>
On the <b>File</b> menu, click <b>Close</b>. Internet Explorer will present a dialog box asking if you would like to save the your changes. Click <b>Yes</b>.<br><br></li>
<li>
Run Internet Explorer again.<br><br></li>
<li>
Click the <b>Address</b> box and type the path of the FirstDoc.vbd. The text you typed will be present in the TextBox control.</li>
</ol>
<p>
Using the PropBag in conjunction with the WriteProperties and ReadProperties events, you can easily persist data for your object.</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX document.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>To</b></td>
<td class=label width=66%><b>See</b></td>
</tr>
<tr valign=top>
<td width=34%>Go to the next step</td>
<td width=66%><a href="vbconaddmenutoactivexdocument.htm">Adding a Menu to the ActXDoc Project</a></td>
</tr>
<tr valign=top>
<td width=34%>Start from the beginning</td>
<td width=66%><a href="vbconcreatingdocumentobject.htm">Creating an ActiveX Document</a></td>
</tr>
</table>
</BODY>
</HTML>

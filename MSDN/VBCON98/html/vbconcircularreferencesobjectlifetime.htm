<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Circular References and Object Lifetime</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcircularreferencesobjectlifetime"></a>Circular References and Object Lifetime</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCircularReferencesObjectLifetimeC">
</object></p>
<p>
In normal program operation, an object is not destroyed until all references to it have been released. This has implications for object lifetime. The procedures in this topic illustrate this by allowing Thing objects to indulge in a little Narcissism.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX DLL. It begins with the topic <a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</p>
<p class=label>
<b>To add the StuckOnMyself property to the Thing class</b>
<ol>
<li>
In the <b>Project Explorer </b>window, double-click <b>Thing </b>to bring the code window for the class module to the front.<br><br></li>
<li>
Add the following code to the Declarations section:<pre><code>' Private data for the StuckOnMyself property.
Private mthStuckOnMyself As Thing
Private mblnStuckOnMyself As Boolean
</code></pre>
</li>
<li>
On the <b>Tools </b>menu, click <b>Add Procedure </b>to open the <b>Add Procedure </b>dialog box. In the <b>Name</b> box, type <b>StuckOnMyself</b>. Click <b>Property</b> and <b>Public</b>, then click <b>OK</b>.<p class=tl>
Modify the property procedures as follows:</P><pre><code>Public Property Get StuckOnMyself() As Boolean
 &nbsp; StuckOnMyself = mblnStuckOnMyself
End Property

Public Property Let StuckOnMyself(ByVal NewValue _
 &nbsp;&nbsp;&nbsp;&nbsp; As Boolean)
 &nbsp; mblnStuckOnMyself = NewValue
 &nbsp; If mblnStuckOnMyself Then
 &nbsp;&nbsp;&nbsp;&nbsp; Set mthStuckOnMyself = Me
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; Set mthStuckOnMyself = Nothing
 &nbsp; End If
End Property
</code></pre>
<p class=tl>
This code illustrates the power of property procedures. When a user requests the value of the StuckOnMyself property, the Property Get procedure is called, and simply returns the value of the module-level Boolean variable <code>mblnStuckOnMyself</code>.</P><p class=tl>
When the user sets the value of the StuckOnMyself property, the Property Let procedure is called. After assigning the new value to the module-level Boolean variable <code>mblnStuckOnMyself</code>, the Property Let either places a reference to the Thing object (Me) in the module-level variable <code>mthStuckOnMyself</code>, or sets the variable to Nothing.</P></li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Property procedures are the best way to implement properties for objects provided by components. See "Implementing Properties in Components" in "General Principles of Component Design."</p>
<h3>What Are Circular References?</h3>
<p>
A <i>circular reference </i>occurs when two objects hold references to each other — or when an object holds a reference to itself, as in the StuckOnMyself property. You can read more about circular references in "Dealing with Circular References" in "General Principles of Component Design."</p>
<p>
The next procedure adds code to TestThing to demonstrate circular references by selectively exercising the StuckOnMyself property. It also illustrates another way to create an object.</p>
<p class=label>
<b>To exercise the StuckOnMyself property from TestThing</b>
<ol>
<li>
In the <b>Project Explorer </b>window, double-click <b>Form1 </b>to bring the form to the front.<br><br></li>
<li>
Double-click the <b>Temporary Thing </b>button to open the code window, and add the following code to the Command5_Click event procedure:<pre><code>' Button "Temporary Thing".
Private Sub Command5_Click()
 &nbsp; Dim thTemp As New Thing
 &nbsp; thTemp.Name = InputBox( _
 &nbsp;&nbsp;&nbsp;&nbsp; "Enter a name for the temporary Thing", _
 &nbsp;&nbsp;&nbsp;&nbsp; "Temporary Thing")
 &nbsp; ' Create a circular reference if the check box
 &nbsp; '&nbsp;&nbsp; captioned "Stuck on itself" is checked.
 &nbsp; If Check1.Value = vbChecked Then
 &nbsp;&nbsp;&nbsp;&nbsp; thTemp.StuckOnMyself = True
 &nbsp; End If
End Sub
</code></pre>
</li>
</ol>
<p>
No code is needed for the check box. If Check1 is checked, the Command5_Click event procedure sets the StuckOnMyself property of the new Thing object.</p>
<p>
Notice that instead of explicitly creating a new Thing with the New operator, the Temporary Thing button uses a variable declared As New, allowing <i>implicit creation </i>of the object. The next procedure demonstrates this. It also shows how object lifetime is affected by variable scope, and illustrates the effects of circular references on object lifetime.</p>
<p class=label>
<b>To demonstrate circular references in TestThing</b>
<ol>
<li>
Press CTRL+F5 to run the project group.<br><br></li>
<li>
Click <b>Create New Thing</b>. In the <b>InputBox</b>, type the name <b>Long Term Thing</b>, and then click <b>OK</b>. In the <b>Immediate </b>window, notice the messages from Sub Main and the Thing’s Initialize event.<br><br></li>
<li>
Click <b>Temporary Thing </b>to create a very short-lived Thing. Because the object variable <code>thTemp</code> that holds the reference to this Thing is a procedure-level variable, its lifetime — and hence the lifetime of the object — is limited to the execution of the procedure.<p class=tl>
You will first see an <b>InputBox</b>, because Visual Basic must evaluate the code to the right of the equal sign before assigning the result to the new Thing object’s Name property.</P><p class=tl>
Before you enter a name in the input box, look in the <b>Immediate </b>window. There hasn’t been an Initialize message from the new Thing object, because it has not yet been created. Because the variable <code>thTemp</code> was declared As New, a Thing object will be created the moment one of its properties or methods is invoked — and not a moment sooner.</P></li>
<li>
Type any name you like in the InputBox and then click <b>OK</b>.<p class=tl>
You’ll see two messages in the <b>Immediate </b>window, an Initialize message and a Terminate message. The Initialize event occurs the moment the name from the <b>InputBox</b> is assigned to <code>thTemp.Name</code>. Visual Basic finds that <code>thTemp</code> contains Nothing, creates a Thing object, and places a reference to the object in <code>thTemp</code>.</P><p class=tl>
Although the value of the DebugID property has already been set — it’s what happens first in the Initialize event — the Name property is still blank. This underscores the fact that the Initialize event occurs before any other code is executed, or any properties are set.</P><p class=tl>
Only after all this has happened can Visual Basic assign the value from the InputBox function to the Thing’s Name property. That’s a lot of activity for one line of code.</P><p class=tl>
But wait, there’s more. As soon as the Thing is created, the Command5_Click event procedure ends. The variable <code>thTemp</code> goes out of scope, which is exactly the same as if it had been set to Nothing. There are no more references to the temporary Thing, so it is destroyed. Its Terminate event displays its properties, including the name you assigned to it.</P></li>
<li>
Press Ctrl+Break to enter Break mode, then press f8 to enter Single Step mode. Click <b>Temporary Thing</b> to enter the Command5_Click event procedure.<p class=tl>
Press F8 once more, to move to the line of code that sets the Thing’s name:</P><p>
<img src="avtcm015.gif" border=0></P><p class=tl>
Before you go on to the next step, you might take a guess at what the next line of code will be.</P></li>
<li>
Press F8 to execute the InputBox statement. Type any name you like in the InputBox, and then click <b>OK</b>.<p class=tl>
Because you’re debugging the ThingDemo component in the same environment as the test program, Visual Basic can step directly into the component’s code from the test program.</P><p class=tl>
Continue pressing F8 through the code for the Initialize event, the DebugID property, and the Terminate event. When you reach the last line of Class_Terminate(), press F5 to return to Run mode.</P><p class=tl>
In-process debugging is a powerful tool for learning about the order in which events occur in a component.</P></li>
<li>
Check <b>Stuck on itself</b>, and then click <b>Temporary Thing</b> again, to create a Thing with a reference to itself. Type the name <b>Renegade</b> in the InputBox, and then click <b>OK</b>.<p class=tl>
In the <b>Immediate</b> window you will see an Initialize message for the Thing, but no Terminate message. The object was not destroyed when the variable <code>thTemp</code> went out of scope, because there was still a reference to the object — in the <code>mthStuckOnMyself</code> variable belonging to the StuckOnMyself property.</P><p class=tl>
When will this erstwhile temporary Thing be destroyed? If you could set the Renegade Thing’s StuckOnMyself property to False, there would be no more references — but TestThing can’t do this, because the program no longer has a reference to use to call StuckOnMyself!</P><p class=tl>
The object is orphaned, and will go on taking up memory until the DLL is unloaded. As you’ll see in a later procedure, the circular reference in the Renegade Thing’s StuckOnMyself property will keep the entire DLL in memory.</P></li>
<li>
Click <b>Release the Thing</b> to destroy the Thing you named Long Term Thing, observing its Terminate message in the <b>Immediate</b> window, and then click <b>Temporary Thing</b> several times. Enter a new name for each "temporary" object.<p class=tl>
As with the first Renegade object, you won’t see any Terminate messages for these objects in the <b>Immediate </b>window, because the circular references will keep them from being destroyed.</P></li>
<li>
On the <b>Thing Demo </b>dialog box, click the <b>Close </b>box to return to design mode. Presto! Like magic, a whole series of Terminate messages appear in the <b>Immediate</b> window.<p class=tl>
When Visual Basic shuts down TestThing, it also shuts down ThingDemo. Being the tidy sort, it clears all of ThingDemo’s object variables — including the self-references being held by the Renegade Thing and its cohorts.</P></li>
</ol>
<p>
As you can see, it’s important to avoid keeping extra object references in an in-process component. A client may create and release hundreds of objects while using a component. If they all persist in memory the way the renegade Things did, performance will eventually degrade.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Circular references are discussed in "Dealing with Circular References," in "General Principles of Component Design," and in Appendix A, "ActiveX Component Standards and Guidelines."</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX DLL.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=41%><b>To</b></td>
<td class=label width=59%><b>See</b></td>
</tr>
<tr valign=top>
<td width=41%>Go to the next step</td>
<td width=59%><a href="vbconaddingeventtooledllproject.htm">Adding a Form to the ThingDemo Project</a></td>
</tr>
<tr valign=top>
<td width=41%>Start from the beginning</td>
<td width=59%><a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</td>
</tr>
</table><br>
</BODY>
</HTML>

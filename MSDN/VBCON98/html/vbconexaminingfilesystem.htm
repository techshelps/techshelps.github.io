<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Examining the File System</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconexaminingfilesystem"></a>Examining the File System</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconExaminingFileSystemC">
</object></p>
<p>
Each of the file-system controls has been carefully designed to combine flexible and sophisticated file-system inspection capabilities with easy programming. Each control performs its file-data retrieval tasks automatically, but you can write code both to customize their appearance and to specify which information they display.</p>
<p class=label>
<b>Figure 7.16&nbsp;&nbsp;&nbsp;The file-system controls</b></p>
<p>
<img src="avp07034.gif" border=0></p>
<p>
You can use file-system controls singly or in combination. With combinations, you can write code in each control's event procedures to determine how they interact. Or you can let them act independently. Figure 7.17 shows the three controls used together.</p>
<p class=label>
<b>Figure 7.17&nbsp;&nbsp;&nbsp;The file-system controls used together</b></p>
<p>
<img src="avp07035.gif" border=0></p>
<p>
File-system controls obtain all their information from the operating system automatically; you can access this information or determine what is displayed by each control through its properties. For example, the contents of the current working directory is displayed by default (that is, the directory from which the application was launched, or what became the current directory as the result of a ChDir statement).</p>
<p>
Your application can also display a list of the files with names matching a pattern, such as *.frm. Simply draw a file list box on the form and set its Pattern property to *.frm. You can specify the Pattern property at run time with the following code:</p>
<pre><code>File1.Pattern = "*.FRM"
</code></pre>
<p>
The file-system controls give you the flexibility that is not available with the common dialog control. You can mix and match them in a variety of ways, and you control their appearance and how they interact.</p>
<p>
If your goal is simply to allow users to open and save files, a common dialog control provides a ready-to-run set of dialog boxes for these and other operations. These are the same dialog boxes used by many other Microsoft Windows – based applications, so they provide a standardized look-and-feel. They also recognize network drives when they're available.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Using the Common Dialog Control" earlier in this chapter for more information.</p>
</BODY>
</HTML>

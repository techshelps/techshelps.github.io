<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Procedures</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconworkingwithprocedures"></a>Working with Procedures</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconWorkingWithProceduresC">
</object></p>
<h2>Creating New Procedures</h2>
<p class=label>
<b>To create a new general procedure</b>
<ul type=disc>
<li>
Type a procedure heading in the Code window and press ENTER. The procedure heading can be as simple as Sub or Function followed by a name. For example, you can enter either of the following:<pre><code>Sub UpdateForm ()
Function GetCoord ()
</code></pre>
<p class=tl>
Visual Basic responds by completing the template for the new procedure.</P></li>
</ul>
<h2>Selecting Existing Procedures</h2>
<p class=label>
<b>To view a procedure in the current module</b>
<ul type=disc>
<li>
To view an existing general procedure, select "(General)" from the Object box in the Code window, and then select the procedure in the Procedure box.<p class=tl>
–or–</P><p class=tl>
To view an event procedure, select the appropriate object from the Object box in the Code window, and then select the event in the Procedure box.</P></li>
</ul>
<p class=label>
<b>To view a procedure in another module</b>
<ol>
<li>
From the <b>View</b> menu, choose <b>Object Browser</b>.<br><br></li>
<li>
Select the project from the <b>Project/Library</b> box.<br><br></li>
<li>
Select the module from the <b>Classes</b> list, and the procedure from the <b>Members of</b> list.<br><br></li>
<li>
Choose <b>View Definition</b>.</li>
</ol>
<h2>Calling Procedures</h2>
<p>
The techniques for calling procedures vary, depending on the type of procedure, where it's located, and how it's used in your application. The following sections describe how to call Sub and Function procedures.</p>
<h2>Calling Sub Procedures</h2>
<p>
A Sub procedure differs from a Function procedure in that a Sub procedure cannot be called by using its name within an expression. A call to a Sub is a stand-alone statement. Also, a Sub does not return a value in its name as does a function. However, like a Function, a Sub can modify the values of any variables passed to it.</p>
<p>
There are two ways to call a Sub procedure:</p>
<pre><code>' Both of these statements call a Sub named MyProc.
Call MyProc (FirstArgument, SecondArgument)
MyProc FirstArgument, SecondArgument
</code></pre>
<p>
Note that when you use the Call syntax, arguments must be enclosed in parentheses. If you omit the Call keyword, you must also omit the parentheses around the arguments.</p>
<h2>Calling Function Procedures</h2>
<p>
Usually, you call a function procedure you've written yourself the same way you call an intrinsic Visual Basic function like Abs; that is, by using its name in an expression:</p>
<pre><code>' All of the following statements would call a function 
' named ToDec.
Print 10 * ToDec
X = ToDec
If ToDec = 10 Then Debug.Print "Out of Range"
X = AnotherFunction(10 * ToDec)
</code></pre>
<p>
It's also possible to call a function just like you would call a Sub procedure. The following statements both call the same function:</p>
<pre><code>Call Year(Now)
Year Now
</code></pre>
<p>
When you call a function this way, Visual Basic throws away the return value.</p>
<h2>Calling Procedures in Other Modules</h2>
<p>
Public procedures in other modules can be called from anywhere in the project. You might need to specify the module that contains the procedure you're calling. The techniques for doing this vary, depending on whether the procedure is located in a form, class, or standard module.</p>
<h3>Procedures in Forms</h3>
<p>
All calls from outside the form module must point to the form module containing the procedure. If a procedure named SomeSub is in a form module called Form1, then you can call the procedure in Form1 by using this statement:</p>
<pre><code>Call Form1.SomeSub(arguments)
</code></pre>
<h3>Procedures in Class Modules</h3>
<p>
Like calling a procedure in a form, calling a procedure in a class module requires that the call to the procedure be qualified with a variable that points to an instance of the class. For example, DemoClass is an instance of a class named Class1:</p>
<pre><code>Dim DemoClass as New Class1
DemoClass.SomeSub
</code></pre>
<p>
However, unlike a form, the class name cannot be used as the qualifier when referencing an instance of the class. The instance of the class must be first be declared as an object variable (in this case, DemoClass) and referenced by the variable name.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;You can find details on object variables and class modules in "Programming with Objects."</p>
<h3>Procedures in Standard Modules</h3>
<p>
If a procedure name is unique, you don't need to include the module name in the call. A call from inside or outside the module will refer to that unique procedure. A procedure is unique if it appears only in one place.</p>
<p>
If two or more modules contain a procedure with the same name, you may need to qualify it with the module name. A call to a common procedure from the same module runs the procedure in that module. For example, with a procedure named CommonName in Module1 and Module2, a call to CommonName from Module2 will run the CommonName procedure in Module2, not the CommonName procedure in Module1.</p>
<p>
A call to a common procedure name from another module must specify the intended module. For example, if you want to call the CommonName procedure in Module2 from Module1, use:</p>
<pre><code>Module2.CommonName(arguments)
</code></pre>
</BODY>
</HTML>

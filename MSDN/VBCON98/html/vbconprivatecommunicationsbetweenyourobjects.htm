<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Private Communications Between Your Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconprivatecommunicationsbetweenyourobjects"></a>Private Communications Between Your Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPrivateCommunicationsBetweenYourObjectsC">
</object></p>
<p>
There may be circumstances in which you want your component’s objects to be able to communicate with each other, without interference from users of your component. For example, you might want your Widgets collection class to set the Parent property of a newly created Widget, and thereafter to have Parent be read-only.</p>
<p>
Public methods on a class can be called by other objects, but they can also be called by clients. Private methods cannot be called from outside the component, but neither are they visible to other objects within your component.</p>
<p>
The solution is to use Friend methods. In the following code fragment, the hypothetical Widget object exposes a public read-only Parent property, and a Friend method (called SetParent) that the Widgets collection can use to set the value of the Parent property after creating a new Widget.</p>
<pre><code>' A Widget is always part of a mechanism.
Private mmchParent As Mechanism

Public Property Get Parent() As Mechanism
   Set Parent = mmchParent
End Property

Friend Sub SetParent(ByVal NewParent As Mechanism)
   Set mmchParent = NewParent
End Sub
</code></pre>
<p>
When a method is declared with the Friend keyword, it’s visible to other objects in your component, but is not added to the type library or the public interface. This is illustrated in Figure 6.4.</p>
<p class=label>
<b>Figure 6.4&nbsp;&nbsp;&nbsp;Friend methods have project scope</b></p>
<p>
<img src="avtcm075.gif" border=0></p>
<p>
At run time, the Widgets collection class (within the project) sees a different interface from that seen by clients. The view of the Widget’s interface within the project (and the compiled DLL) includes the Friend method SetParent, which the Widgets collection calls.</p>
<p>
The client only sees the public properties and methods of the Widget’s interface, because Friend methods are not added to the type library.</p>
<h2>Using the Friend Keyword with Properties</h2>
<p>
You can also declare property procedures with the Friend keyword. In fact, the different property procedures that make up a property can have different scope. Thus the earlier code example can be rewritten as a pair of property procedures:</p>
<pre><code>' A Widget is always part of a mechanism.
Private mmchParent As Mechanism

Public Property Get Parent() As Mechanism
   Set Parent = mmchParent
End Property

Friend Property Set Parent(ByVal NewParent As _
      Mechanism)
   Set mmchParent = NewParent
End Sub
</code></pre>
<p>
From within the component, Parent is a read/write property. To clients, it’s a read-only property, because only the Property Get appears in the component’s type library.</p>
<p>
You can think of Friend as a different scope, halfway between Public and Private.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;In order to invoke Friend methods and properties, you must use strongly typed object variables. In the example above, the Widgets collection must use a variable declared As Widget in order to access the SetParent method or the Property Set Parent. You cannot invoke Friend methods from variables declared As Object.</p>
<h3>Hiding Object Properties that Return Private Objects</h3>
<p>
"Using Properties and Collections to Create Object Models" describes the use of private objects in object models. When linking such objects to the public objects in the object model, you can declare all parts of the property procedure using the Friend keyword.</p>
<p>
For example, each Widget object might have Socket object, which for some reason you don’t want to expose to users of your component. You could add the following object property to the Widget object, so that from inside your component you could access the Socket, without adding the property to the type library or the public interface:</p>
<pre><code>' Create the Socket object on demand (As New).
Private msoc As New Socket

Friend Property Get Socket() As Socket
   Set Socket = msoc
End Property
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Friend methods are introduced in "Programming with Objects," in the <i>Visual Basic Programmer’s Guide.</i></p>
</BODY>
</HTML>

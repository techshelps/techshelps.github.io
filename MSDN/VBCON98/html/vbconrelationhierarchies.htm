<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Relation Hierarchies</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconrelationhierarchies"></a>Relation Hierarchies</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconRelationHierarchies_C">
</object></p>
<p>
You can use the Data Environment designer to relate two or more Command objects together based on command data. The concept is similar to joining two related tables using a SQL SELECT statement. However, the run-time result is a set of hierarchical recordsets instead of a flat table. This type of hierarchy is called a relation hierarchy.</p>
<p>
A relation hierarchy consists of a parent Command object and one or more child Command objects that are related through linking the parent's Field objects to the child's fields and/or parameters. In a relation hierarchy, the child Command objects become fields in the parent Command object.</p>
<p>
For example, you might want to create a relation hierarchy between a Customers and Orders table. By relating the Orders table to the Customers table based on the CustID field, the Orders recordset becomes a field in the Customers recordset. Thus, the value of this field in each row becomes a reference to a recordset that contains all the Orders for that particular Customer. This is illustrated by the following figure.</p>
<p>
<img src="vb533p1.gif" border=0></p>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;All Command objects used in the relation hierarchy must be associated with the same Connection object. You cannot relate Commands from two different databases.</p>
<p>
For more information on relation hierarchies, see <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscHierarchicalCursorsDataShaping">
</object><a href=JavaScript:alink_2.Click()>Data Shaping</a>.</p>
<h2>Creating a Relation Hierarchy from Two Existing Command Objects</h2>
<p>
Once there are two Command objects at the same level in the Data Environment outline view, you can create a relation hierarchy, as described in the following procedure.</p>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;The Command objects involved in a relation hierarchy should be recordset returning. If not, on the Advanced tab of the Command Properties dialog box, choose Recordset Returning, and click OK to apply the changes to the Command object.</p>
<p class=label>
<b>To create a relation hierarchy from two existing Command objects</b>
<ol>
<li>
Right-click the Command object that will be the child in the relation, and click <b>Properties</b> on the shortcut menu to open the <b>Command Properties</b> dialog box.<br><br></li>
<li>
Select the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbdlgRelationDECmdProps">
</object><a href=JavaScript:alink_3.Click()>Relation tab</a> and then choose <b>Relate to a Parent Command Object</b>.<br><br></li>
<li>
In the <b>Parent Command</b> box, select the parent Command object's name. All Command objects that are associated with the same connection are shown, except for any Command object that is a child of the current Command object.<br><br></li>
<li>
Define the relation between the two Command objects as follows:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Item</b></td>
<td class=label width=71%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%><b>Parent Fields</b></td>
<td width=71%>Select a field from the parent Command object. When added, this shows on the left side of the relate expression.</td>
</tr>
<tr valign=top>
<td width=29%><b>Child Fields/Parameters</b></td>
<td width=71%>Select a field or parameter from the child Command object. When added, this shows on the right side of the key expression.<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You must link all required parameters to fields in the parent Command object. If the required parameters are not linked, the hierarchy cannot be successfully executed.</p>
</td>
</tr>
<tr valign=top>
<td width=29%><b>Add</b></td>
<td width=71%>After you have selected from both the <b>Parent Fields </b>and the <b>Child Fields/Parameters</b> lists, click <b>Add</b>. The new relation pair shows in the <b>Relation Definition</b> relate expression (for example, CustomerID TO CustomerID). Repeat this process until you have all relations defined, as necessary.<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You should relate the two Command objects on fields that contain similar data. For example, if one Command object returns data from an Orders table and another returns data from a Customers table, you should use a field that exists in both tables, such as orderID.</p>
</td>
</tr>
<tr valign=top>
<td width=29%><b>Remove</b></td>
<td width=71%>To remove a relation pair, select the pair in the display area and click <b>Remove</b>.</td>
</tr>
</table><br>
</li>
<li>
Click <b>OK </b>to accept the relation definitions and close the dialog box.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;While you can relate any two Command objects, the Data Environment designer does not check for valid input. Therefore, if you specify an invalid relationship, the data retrieved may not be what you expect.</p></li>
</ol>
<p>
Once a relation is in place, you can use the <a href="vbconhflexgridcontrol.htm">Microsoft Hierarchical FlexGrid control</a> to display the data as a hierarchy.</p>
<h2>Creating a Child Command Object from a Parent Command Object</h2>
<p>
An easy way to directly construct a relation hierarchy is to create a child Command object from the parent Command object. To create a child Command object directly, first create the parent Command object, as described in <a href="vbconcommandobjects.htm">Command Objects</a>, and then perform the following procedure.</p>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;The Command objects involved in a relation hierarchy should be recordset returning. If not, on the Advanced tab of the Command Properties dialog box, choose Recordset Returning, and click OK to apply the changes to the Command object.</p>
<p class=label>
<b>To create a child Command object from a parent Command object</b>
<ol>
<li>
On the Data Environment toolbar, click <b>Add Child Command</b>.<p class=tl>
-or–</P><p class=tl>
Right-click the parent Command object and click <b>Add Child Command</b> on the shortcut menu to open the <b>Command Properties </b>dialog box.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The child Command and parent Command objects' connection are the same.</p></li>
<li>
The default <b>Command Name</b> (shown on the <b>General</b> tab of the <b>Command Properties</b> dialog box) of the child Command is the name of the Field object that will be appended to the parent Command object. You can change this name to a more meaningful, unique name. For example, you may wish to name the child "Orders" if it is based on a database object called "orders."<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;On the <b>General</b> tab of the <b>Command Properties</b> dialog box, <b>Connection</b> is disabled. This is because the child and parent Command objects must be associated with the same Connection object.</p></li>
<li>
Select the <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbdlgRelationDECmdProps">
</object><a href=JavaScript:alink_4.Click()>Relation tab</a>, and define the relation by specifying the fields or parameters in each Command object that contain common data.<br><br></li>
<li>
Click <b>OK </b>to create the child Command object and close the dialog box. If successfully created, the child Command object appears below its parent in the Data Environment outline view.</li>
</ol>
</BODY>
</HTML>

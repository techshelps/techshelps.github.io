<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using an Object's Properties, Methods, and Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingactivexcomponentspropertiesmethodsevents"></a>Using an Object's Properties, Methods, and Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vastmDim;vbconUsingActiveXComponentsPropertiesMethodsEventsC">
</object></p>
<p>
After you assign an object reference to an object variable, you can use the variable to manipulate the object's properties and methods. You can also declare an object variable using the WithEvents keyword and use it to make your application respond to the object's events.</p>
<h2>Using an Object's Properties and Methods</h2>
<p>
You can use the <i>object.property</i> syntax to set and return an object's property values or the <i>object.method </i>syntax to use methods on the object. For example, you could set the Caption property of the Application object as follows:</p>
<pre><code>Dim xlApp As Excel.Application
Set xlApp = New Excel.Application
xlApp.Caption = "MyFirstObject"
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Excel.Application syntax for referring to the Microsoft Excel Application class is not supported in versions prior to Microsoft Excel 97. To refer to the Microsoft Excel Application class in Microsoft Excel 5.0 and Microsoft Excel 95, use the syntax [_ExcelApplication] instead. For example:</p>
<pre><code>Set xlApp = New [_ExcelApplication]
</code></pre>
<p>
You could call the Quit method of the Microsoft Excel Application object like this:</p>
<pre><code>xlApp.Quit
</code></pre>
<p>
In general, it is a good idea to be as specific as possible when referring to methods or properties of objects defined by other applications or projects. For example:</p>
<pre><code>' Fully qualified property name sets
' the Microsoft Project window caption.
Dim pjWindow As Project.Window
' Get a reference to the first Window object.
Set pjWindow = ActiveProject.Windows(1)
pjWindow.Caption = "Project Caption"

' Unqualified name causes Visual Basic to use
' the first object it finds with a property
' named Caption - in this case, Form1.
Caption = "Microsoft Form1 Caption"
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you need to import binary data into your Visual Basic application and you plan to share the data between applications using ActiveX, use a Byte array to store the data. If you assign binary data to a string and then try to pass this data to an Automation object that takes a string, the data may not be converted correctly. "For more information on data types, see "Programming Fundamentals."</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"For more information on working with an object's properties and methods, see "Programming with Objects."</p>
<h2>Responding to an Object's Events</h2>
<p>
In addition to responding to events that occur to Visual Basic objects, your application can respond to events in an object provided by an ActiveX component. For example, your Visual Basic application can display a message box if an event occurs in a Microsoft Excel workbook.</p>
<p>
You make your application respond to an object's events by adding code to an event procedure for the object. However, event procedures for objects provided by components are not automatically available in Visual Basic. You must first declare an object variable using the WithEvents keyword.</p>
<p>
After you declare an object variable using WithEvents, the Visual Basic code window uses the variable to display event procedures for the object. You can then add code to these event procedures to respond to the object's events. When you assign an object reference to the variable, you establish a connection between the variable and the object at run time.</p>
<p class=label>
<b>To create an event procedure for an object provided by a component</b>
<ol>
<li>
Add a reference to the component's type library to your Visual Basic project. For more information on adding a reference to a type library, see "Creating a Reference to an Object."<br><br></li>
<li>
In the Declarations section of a form or class module, declare an object variable using the WithEvents keyword. For example:<pre><code>Dim WithEvents xlBook As Excel.Workbook
</code></pre>
<p class=tl>
Visual Basic adds the name of the object variable to the Object box in the code window. When you select the variable name, Visual Basic displays the object's event procedures in the Procedure list box.</P></li>
<li>
Select an event procedure, then add code to the procedure that you want your application to run when the event occurs.<p class=tl>
For example, suppose your Visual Basic application relies on data displayed in a Microsoft Excel workbook and that you've already declared a WithEvents variable <code>xlBook</code> for the workbook. When a user tries to close the workbook, you can display a message and keep the workbook from closing by adding the following code to the xlBook_BeforeClose event procedure in your application:</P><pre><code>Private Sub xlBook_BeforeClose(Cancel As Boolean)
' Hide the Microsoft Excel window so the message
' will be visible.
xlBook.Application.Visible = False
' Display the message.
MsgBox "This workbook must remain open."
' Unhide the Microsoft Excel window.
xlBook.Application.Visible=True
' Set the event procedure's Cancel argument 
' to True, cancelling the event.
Cancel = True
End Sub
</code></pre>
</li>
<li>
Assign an object reference to the WithEvents object variable.<p class=tl>
For example, you could add the following to the Visual Basic form's Form_Load event procedure to assign the variable <code>xlBook</code> a reference to a Microsoft Excel workbook, Sales.xls:</P><pre><code>Private Sub Form_Load()
Set xlBook = GetObject("Sales.xls")
' Display Microsoft Excel and the Worksheet
' window.
xlBook.Application.Visible = True
xlBook.Windows(1).Visible = True
End Sub
</code></pre>
</li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Dim Statement."</p>
</BODY>
</HTML>

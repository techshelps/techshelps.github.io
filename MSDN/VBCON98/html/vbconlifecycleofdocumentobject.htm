<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Life Cycle of a UserDocument</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlifecycleofdocumentobject"></a>Life Cycle of a UserDocument</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconLifeCycleOfDocumentObjectC">
</object></p>
<p>
The life of an ordinary Visual Basic form is marked by certain key events, such as Initialize, Load, QueryUnload, and Unload. In order to create well-behaved applications, it’s important to know when these events occur in the life cycle of a form.</p>
<p>
Although ActiveX documents look like forms, they behave differently, primarily because they are contained by another application. When programming an ActiveX document, some attention must be given to the ephemeral nature of an ActiveX document. This is especially true when the container application is a Web browser, such as Internet Explorer.</p>
<p>
Key events in the life cycle of a UserDocument object include Initialize, InitProperties, Show, Hide, and Terminate. The following procedure demonstrates these events.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX control. It begins with the topic <a href="vbconcreatingdocumentobject.htm">Creating an ActiveX Document</a>.</p>
<p class=label>
<b>To observe the key events of the FirstDoc UserDocument</b>
<ol>
<li>
In the <b>Project Explorer </b>window, double-click <b>FirstDoc</b> to bring its designer forward.<br><br></li>
<li>
Double-click the designer to open a Code window for the UserDocument object, and enter code in the following event procedures:<pre><code>Private Sub UserDocument_Initialize()
 &nbsp; Debug.Print "Initialize"
End Sub

Private Sub UserDocument_InitProperties()
 &nbsp; Debug.Print "InitProperties" 
End Sub

Private Sub UserDocument_Show()
 &nbsp; Static intCount As Integer
 &nbsp; intCount = intCount + 1
 &nbsp; Debug.Print "Show " &amp; intCount
End Sub

Private Sub UserDocument_Hide()
 &nbsp; Static intCount As Integer
 &nbsp; intCount = intCount + 1
 &nbsp; Debug.Print "Hide " &amp; intCount
End Sub

Private Sub UserDocument_Terminate()
 &nbsp; Debug.Print "Terminate"
End Sub
</code></pre>
</li>
<li>
Run the project by pressing f5.<br><br></li>
<li>
In Internet Explorer, view the ActiveX document by navigating to the URL of the FirstDoc.vbd file, or by clicking the arrow next to the <b>Address</b> box and selecting FirstDoc.vbd from the list.<br><br></li>
<li>
Press ALT+TAB to bring Visual Basic back to the front of your window. Notice in the <b>Immediate</b> window that three events — Initialize, InitProperties, and Show — have been printed to the window. As with the UserControl object, the Intialize event precedes InitProperties.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You will notice that Show is followed by a 1, indicating that the ActiveX document has been shown once by Internet Explorer. As long as a reference to the ActiveX document exists in the Internet Explorer cache, this number will increment once each time you navigate to the ActiveX document from another URL.</p></li>
<li>
Press ALT+TAB to return to Internet Explorer. Navigate another&nbsp; URL, either by typing a valid URL into the <b>Address</b> box of Internet Explorer, or using your list of Favorites. It does not matter which HTML page you navigate to.<br><br></li>
<li>
After navigating to the new URL, press ALT+TAB to switch back to Visual Basic. In the <b>Immediate </b>window you will notice that the Hide and Terminate events have occurred.<br><br></li>
<li>
Press ALT+TAB to return to Internet Explorer. Click <b>Back </b>until the FirstDoc ActiveX document is once again in view.<br><br></li>
<li>
Press ALT+TAB again to switch back to Visual Basic. Notice in the <b>Immediate</b> window that the Initialize, InitProperties, and Show events have been fired.</li>
</ol>
<h2>The Initialize and InitProperties Events</h2>
<p>
The Initialize and InitProperties events have some similarities, but you should be aware of how they differ. In brief, the Initialize event always occurs when the ActiveX document is loaded, while InitProperties will only occur every time until the document is saved. After that event has fired, the ReadProperties and WriteProperties events will fire. To see an example of this:
<ol>
<li>
If Internet Explorer is still running, close it.<br><br></li>
<li>
If the ActXDoc project is still running, stop it. This is necessary in order to see the InitProperties event occur.<br><br></li>
<li>
Restart the ActXDoc project.<br><br></li>
<li>
In Internet Explorer type the path of the FirstDoc.vbd file in the <b>Address</b> box , or select it from the drop-down URL history list.<br><br></li>
<li>
Type something distinctive into the TextBox (txtFirstDoc) control.<br><br></li>
<li>
Close Internet Explorer. You will be prompted to save your changes. Click <b>Yes</b>.<br><br></li>
<li>
Restart Internet Explorer. (Do not stop the ActXDoc project.)<br><br></li>
<li>
Press ALT+TAB to return to Visual Basic.<br><br></li>
<li>
Note in the <b>Immediate</b> window that InitProperties occurred only once: the first time that the FirstDoc document was viewed in Internet Explorer. The second time you viewed the FirstDoc document the Initialize event occurred, but not the InitProperties; instead, the ReadProperties event occurred.<p class=tl>
You should note this behavior, as it impacts where you place your code. Needless to say, if you always want a procedure to run on startup, you should put it into the Initialize event. If you want a procedure to run only the first time a user views your ActiveX document, place it in the InitProperties event.</P><p class=tl>
You should be cautious, however, about the limitations of using the Initialize event. In brief, any procedures that require knowledge of the container (such as the Parent property) are unavailable when the Initialize event occurs. An alternate event that occurs after the ActiveX document has been sited in the container is the Show event.</P></li>
</ol>
</BODY>
</HTML>

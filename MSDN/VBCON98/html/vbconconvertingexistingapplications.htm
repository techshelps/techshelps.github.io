<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Converting Existing Applications into ActiveX Documents</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconconvertingexistingapplications"></a>Converting Existing Applications into ActiveX Documents</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconConvertingExistingApplicationsC">
</object></p>
<p>
You may have several existing applications that are candidates for conversion into ActiveX documents. If so, you can use the ActiveX Document Migration Wizard to ease the transition.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The OLE Container control and embedded objects (for example, Microsoft Word or Microsoft Excel documents) cannot be placed on an ActiveX document, and will be removed.</p>
<p class=label>
<b>To use the ActiveX Document Migration Wizard</b>
<ol>
<li>
Open the project you wish to convert.<br><br></li>
<li>
On the <b>Add-Ins</b> menu, click <b>Add-In Manager</b>.<br><br></li>
<li>
Highlight <b>VB ActiveX Document Migration Wizard</b>, click the desired behaviors in Load Behavior, and then click <b>OK</b>.<br><br></li>
<li>
On the <b>Add-Ins </b>menu, click <b>ActiveX Document Migration Wizard</b>.<br><br></li>
<li>
Follow the directions until the Wizard has finished its task.</li>
</ol>
<h2>What the Wizard Does</h2>
<p>
The Wizard performs the following tasks
<ul type=disc>
<li>
Copy form properties to a new UserDocument.<br><br></li>
<li>
Copy all controls from the form to the UserDocument, and retain their names.<br><br></li>
<li>
Copy all code behind the form to the UserDocument.<br><br></li>
<li>
Comments out all illegal code such as <code>Me.Left</code> and <code>End</code>.<br><br></li>
<li>
Switches the project type to ActiveX EXE or DLL.<br><br></li>
<li>
Where there is an exact counterpart on the UserDocument, copy event handlers to the UserDocument, replacing "Form" with "UserDocument". For example, "Form_Click()" becomes "UserDocument_Click()". In cases where there is no counterpart, the event handler is copied over leaving the "Form" part intact. These are copied to the General section of the code window, and can then be called as procedures. In other words, if you need to invoke code from the Form_Load event, simply call it from an appropriate event:<pre><code>Private Sub UserDocument_Show()
Form_Load
End Sub
</code></pre>
</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Form object's Load event doesn't have a direct counterpart in the UserDocument. You place Load event procedures in the Show event handler, but you should be aware that the Show event gets called every time the user navigates to the ActiveX document (in a Web browser). To prevent Load event procedures from running every time the Show event occurs, use a module-level variable as a flag — if the flag has been set, don't run the procedures. Code for this technique is shown in "Determining the ActiveX Document's Container Programmatically" in this chapter.</p>
</BODY>
</HTML>

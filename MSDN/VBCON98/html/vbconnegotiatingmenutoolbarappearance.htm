<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Negotiating Menu and Toolbar Appearance</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconnegotiatingmenutoolbarappearance"></a>Negotiating Menu and Toolbar Appearance</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconNegotiatingMenuToolbarAppearanceC">
</object></p>
<p>
When an object supplied by another application is activated on a form, there are a number of ways that object's menus and toolbars may appear on the container form; therefore, you need to specify how they will be displayed. This process is called <i>user-interface negotiation </i>because Visual Basic and the object you have linked or embedded must negotiate for space in the container form.</p>
<h2>Controlling Menu Appearance</h2>
<p>
You can determine whether a linked or embedded object's menu will appear in the container form by setting a form's NegotiateMenus property. If the child form's NegotiateMenus property is set to True (default) and the container has a menu bar defined, the object's menus are placed on the container's menu bar when the object is activated. If the container has no menu bar, or the NegotiateMenus property is set to False, the object's menus will not appear when it is activated.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The NegotiateMenus property does <i>not</i> apply to MDI Forms.</p>
<h2>Controlling Toolbar Appearance</h2>
<p>
The MDI form's NegotiateToolbars property determines whether the linked or embedded object's toolbars will be floating palettes or placed on the parent form. This behavior does not require toolbars to be present on the MDI parent form. If the MDI form's NegotiateToolbars property is True, the object's toolbar appears on the MDI parent form. If NegotiateToolbars is False, the object's toolbar will be a floating palette.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The NegotiateToolbars property applies <i>only</i> to MDI forms.</p>
<p>
If an MDI form includes a toolbar, it is usually contained in a picture box control on the parent form. The picture box's Negotiate property determines whether the container's toolbar is still displayed or is replaced by the object's toolbar when activated. If Negotiate is True, the object's toolbar is displayed in addition to the container's toolbar. If Negotiate is False, the object's toolbar replaces the container's toolbar.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Menu and toolbar negotiation will occur only for insertable objects that support in-place activation. For more information on in-place activation, see "Programming with ActiveX Components."</p>
<p>
You can see how these three properties interact by using the following procedure.</p>
<p class=label>
<b>To perform menu and toolbar negotiation</b>
<ol>
<li>
Add a toolbar to an MDI form. This is described in "Creating a Toolbar" earlier in this chapter.<br><br></li>
<li>
Place an insertable object on a child form.<br><br></li>
<li>
Set the NegotiateMenus, NegotiateToolbars, and Negotiate properties.<br><br></li>
<li>
Run the application, and double-click the object.</li>
</ol>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding an Event to a Form</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingeventtoform"></a>Adding an Event to a Form</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingEventToFormC">
</object></p>
<p>
The following step by step procedure shows how you can create custom events for forms. To try this exercise, open a new Standard Exe project and do the following:</p>
<p class=label>
<b>To add an event to Form1</b>
<ol>
<li>
On the <b>Project</b> menu, select <b>Add Class Module</b> to add a class module to the project. Place the following code in the <b>Declarations</b> section of Class1:<pre><code>Public Property Get Form1() As Form1
 &nbsp; Set Form1 = mForm1
End Property

Public Property Set Form1(ByVal NewForm1 As Form1)
 &nbsp; Set mForm1 = NewForm1
End Property
</code></pre>
<p class=tl>
If you're using Procedure View, the property procedures can't be viewed at the same time. Click the <b>Full Module View</b> button at the bottom left corner of the code window to switch to Full Module View. You can return to Procedure View by clicking the <b>Procedure View</b> button next to it. (Hover the mouse over the buttons to see which is which.)</P></li>
<li>
Add the following code to the <b>Declarations</b> section of Form1:<pre><code>Event Gong
Private mc1 As Class1
</code></pre>
<p class=tl>
Now that Class1 has been created, it's possible to create a variable of type Class1. This procedure switches between Form1 and Class1 several times, because a step in one module requires first adding code to the other.</P></li>
<li>
Go back to Class1 and add the following code to the <b>Declarations</b> section.<pre><code>Private WithEvents mForm1 As Form1
</code></pre>
<p class=tl>
As discussed in "Adding Events to a Class," the WithEvents keyword means this instance of Form1 is associated <i>with events</i>. Note that this step wasn't possible until the Gong event had been created.</P></li>
<li>
In the left-hand (<b>Object</b>) drop down on Class1's <b>Code</b> window, select <b>mForm1</b> to get the event procedure for the Gong event. Add the following code to the event procedure:<pre><code>Private Sub mForm1_Gong()
 &nbsp; MsgBox "Gong!"
End Sub
</code></pre>
</li>
<li>
Go back to Form1. In the <b>Object</b> drop down, select <b>Form</b>. In the right-hand (<b>Procedure</b>) drop down, select <b>Load</b>. Add the following code to the event procedure:<pre><code>Private Sub Form_Load()
 &nbsp; Set mc1 = New Class1
 &nbsp; Set mc1.Form1 = Me
End Sub
</code></pre>
<p class=tl>
The first line creates a Class1 object, and the second assigns to its Form1 property (created in step 1) a reference to Form1 (that is, Me — when you're in Form1's <b>Code</b> window, Me refers to Form1; when you're in Class1's <b>Code</b> window, Me refers to Class1).</P></li>
<li>
Put three text boxes on Form1. Use the <b>Object</b> and <b>Procedure</b> drop downs to select the <b>Change</b> event procedure for each control in turn, and place the same line of code in each:<pre><code>Private Sub Text1_Change()
 &nbsp; RaiseEvent Gong
End Sub
</code></pre>
<p class=tl>
Each time the contents of a text box change, the form's Gong event will be raised.</P></li>
<li>
Press F5 to run the project. Each time you type a character in one of the text boxes, the message box rings a bell. It's very annoying, but it shows how you can add an event to a form, and thus get notifications from several controls.</li>
</ol>
<p>
As shown in "Declaring and Raising Events," you can add arguments to events. For example, you might pass the name of the control — or better still, a reference to the control — to the receiver of the event.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Circular References and Component Shutdown</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcircularreferencescomponentshutdown"></a>Circular References and Component Shutdown</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCircularReferencesComponentShutdownC">
</object></p>
<p>
The following procedure shows how Visual Basic unloads an in-process component after the client has released all references to its objects. It also shows how circular references can prevent this unloading, and highlights an important difference between public and private objects.</p>
<p>
The procedure can only be run using the compiled component and compiled test project, because Visual Basic never unloads an in-process component project running in the development environment.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX DLL. It begins with the topic <a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</p>
<p class=label>
<b>To observe DLL unloading</b>
<ol>
<li>
Add a new class module to ThingDemo. Name it <b>TellTale</b>, and set its Instancing property to Private. Add the following code to its Terminate event:<pre><code>Private Sub Class_Terminate()
 &nbsp; MsgBox "Private object destroyed"
End Sub
</code></pre>
<p class=tl>
A private object cannot be created by clients, and should never be passed to them. As you’ll see, private objects <i>do not </i>keep in-process components from unloading, and a client that uses a reference to a private object after its component has unloaded will suffer a catastrophic program failure.</P></li>
<li>
Add the following code to Module1 in ThingDemo:<pre><code>Option Explicit
Private mtt As TellTale&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' New code.

Sub Main
 &nbsp; Debug.Print "Executing Sub Main"
 &nbsp; Set mtt = New TellTale&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' New code.
End Sub
</code></pre>
<p class=tl>
Once the projects are compiled, Debug statements can’t be used to show what’s happening internally. Like a canary in a coal mine, the TellTale object will give us an indication of what’s happening in the compiled component.</P></li>
<li>
On the <b>File</b> menu, click <b>Make Project Group</b> to compile both ThingDemo and ThingTest. On the <b>Start</b> menu, click <b>Run</b> to open the <b>Run</b> dialog box, and browse to find and run ThingTest — or use the Windows Explorer.<br><br></li>
<li>
Close the modal dialog box, and click <b>Create Temporary Thing</b>. Enter any name you like in the input box, and click <b>OK</b>.<p class=tl>
As you saw earlier, the temporary Thing doesn’t hang around long. The only reason to create it now is to load ThingDemo.dll and execute Sub Main. For this procedure, the interesting question is what happens when the Things are all gone.</P></li>
<li>
Wait a few minutes. Go get a cup of coffee. You deserve it. When you come back, after a few minutes have elapsed, you’ll see a message box with the message "Private object destroyed."<p class=tl>
What happened? There were no references to public objects, so after a decent interval (usually about two minutes, although this will vary depending on how frequently it gets idle time) Visual Basic will attempt to unload the in-process component.</P><p class=tl>
When the DLL is unloaded, Visual Basic frees the memory it was using — including variables containing private object references. As a result the TellTale object is destroyed, and you get a visual cue that the DLL has unloaded.</P><p class=tl>
If you create a new Thing object at this point, you’ll notice a slight pause as the DLL is reloaded.</P></li>
<li>
Now for the circular references. Check the <b>Stuck on itself</b> box, and then click <b>Create Temporary Thing</b> to create a Thing object with a reference to itself.<br><br></li>
<li>
Wait a few minutes. Go get another cup of coffee. Drink it. Wait a few more minutes. Do some other work. However long you wait, the DLL will not unload, because the reference to the Thing object keeps Visual Basic from unloading it.<p class=tl>
Visual Basic can’t tell the difference between an internal reference to a public object and an external (client) reference to a public object, so it has no choice but to keep the DLL loaded.</P></li>
<li>
Close ThingTest’s main form. The private object is again destroyed, because unloading the client application also unloads any in-process components it’s using.</li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The rules for component shutdown are listed in "Starting and Ending a Component" in "General Principles of Component Design," and discussed in more detail in "ActiveX Component Standards and Guidelines."</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX DLL.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>To</b></td>
<td class=label width=66%><b>See</b></td>
</tr>
<tr valign=top>
<td width=34%>Go to the next step</td>
<td width=66%><a href="vbconoledllcreationsummary.htm">ActiveX DLL Creation Summary</a></td>
</tr>
<tr valign=top>
<td width=34%>Start from the beginning</td>
<td width=66%><a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</td>
</tr>
</table><br>
</BODY>
</HTML>

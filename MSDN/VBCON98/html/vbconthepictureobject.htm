<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Picture Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconthepictureobject"></a>Using the Picture Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconThePictureObjectC">
</object></p>
<p>
The Picture object is similar in some respects to the Printer object — you can’t see it, but it’s useful nonetheless. You could think of the Picture object as a invisible picture box that you can use as a staging area for images. For example, the following code loads a Picture object with a bitmap and uses that bitmap to set the Picture property of a picture box control:</p>
<pre><code>Private Sub Command1_Click()
   Dim objPic As Picture
   Set objPic = LoadPicture("Butterfly.bmp")
   Set Picture1.Picture = objPic
End Sub
</code></pre>
<p>
The Picture object supports bitmaps, GIF images, JPEG images, metafiles, and icons.</p>
<h3>Using Arrays of Picture Objects</h3>
<p>
You can also use an array of Picture objects to keep a series of graphics in memory without using a form that contains multiple picture box or image controls. This is convenient for creating animation sequences or other applications where rapid image changes are required. Declare the array at the module level: </p>
<pre><code>Dim objPics(1) As Picture
</code></pre>
<p>
Add the following code to the Form_Load event:</p>
<pre><code>' Load bitmaps int the Picture object array.
Set objPics(0) = LoadPicture("Butterfly1.bmp")
Set objPics(1) = LoadPicture("Butterfly2.bmp")
</code></pre>
<p>
Then in Timer event you can cycle the images:</p>
<pre><code>Static intCount As Integer
If intCount = 0 Then
   intCount = 1
Else
   intCount = 0
End If
' Use the PaintPicture method to display the bitmaps
'   on the form.
PaintPicture objPics(intCount), 0, 0
</code></pre>
<p>
By adding a loop to increment the x and y coordinates, you could easily make the butterfly bitmaps "fly" across the form.</p>
<h3>Using the Picture Object Instead of the Windows API</h3>
<p>
There are lots of things you can do with bitmaps, icons, or metafiles in the Windows API, but the Picture object already does most of them for you. This means that you are better off using the Picture object instead of the Windows API whenever possible. The Picture object also allows you to use .jpg and .gif files, whereas the Windows API does not.</p>
<p>
There is no direct relationship between a Picture.Handle and a PictureBox.hDC. The hDC property of the picture box is the handle provided by the operating system to the device context of the picture box control. The Handle property of the Picture object is actually the handle of the GDI object that is contained in the Picture object.</p>
<p>
There are now two completely different ways to paint graphics on a window (or blit). You can use BitBlt or StretchBlt on the hDC of an object, or you can use the PaintPicture method on the Picture object or property. If you have an Image control, you can only use PaintPicture because Image controls do not have an hDC.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information about the Windows API, see "Accessing DLLs and the Windows API" in the <i>Component Tools Guide</i>, available in the Professional and Enterprise editions.</p>
</BODY>
</HTML>

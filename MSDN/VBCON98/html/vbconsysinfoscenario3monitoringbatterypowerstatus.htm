<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SysInfo Scenario 3: Monitoring Battery Power Status</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconsysinfoscenario3monitoringbatterypowerstatus"></a>SysInfo Scenario 3: Monitor Battery Power Status</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconSysInfoScenario3MonitoringBatteryPowerStatusC">
</object></p>
<p>
Using just one of the power status properties, you can monitor the charge status of a battery. The BatteryLifePercent property is used to provide a percentage value for a ProgressBar control. A Timer control sets the interval at which the power status is tested.</p>
<p class=label>
<b>To create a simple battery meter using the BatteryLifePercent property</b>
<ol>
<li>
Create a new project in Visual Basic.<br><br></li>
<li>
Add a SysInfo, a Timer, and a ProgressBar control to the form.<br><br></li>
<li>
Set the Interval property of the Timer control to 5000.<br><br></li>
<li>
Add the following code to the Timer control’s Timer event:<pre><code>Private Sub tmrBattery_Timer()
If sysBattery.BatteryLifePercent &lt;&gt; 255 Then
prgBattery.Value =&nbsp; _ sysBattery.BatteryLifePercent
prgBattery.Enabled = True
Else
prgBattery.Value = 0
prgBattery.Enabled = False
End If
End Sub
</code></pre>
</li>
</ol>
<p>
When the application is run, the SysInfo control queries the operating system for the existence of a battery and then displays its current charge level using the BatteryLifePercent property.</p>
<p class=label>
<b>Figure 2.28&nbsp;&nbsp;&nbsp;A simple battery meter</b></p>
<p>
<img src="avtct094.gif" border=0></p>
<p>
This example can be enhanced by using one of the power status events to detect when a change occurs to the system’s power status. The following example adds a Label control to the form and uses the PowerStatusChanged event to notify the user when the power status changes.</p>
<p class=label>
<b>To update changes to battery power status</b>
<ol>
<li>
Add a Label control to the form.<br><br></li>
<li>
Add the following code to the Sysinfo control’s PowerStatusChanged event:<pre><code>Private Sub sysBattery_PowerStatusChanged()
Select Case sysBattery.BatteryStatus
Case 1
lblStatus.Caption = "Battery OK"
Case 2
lblStatus.Caption = "Battery Low"
Case 4
lblStatus.Caption = "Battery Critical"
Case 8
lblStatus.Caption = "Battery Charging"
Case 128, 255
lblStatus.Caption = "No Battery Status"
End Select
End Sub
</code></pre>
</li>
</ol>
<p class=label>
<b>Figure 2.29&nbsp;&nbsp;&nbsp;The battery meter, enhanced with the PowerStatusChanged event</b></p>
<p>
<img src="avtct095.gif" border=0></p>
<p>
The BatteryStatus property is used in a Select Case statement to return a value that indicates the current battery status setting. Whenever the PowerStatusChange event is fired, the Label control is updated with the current status. For example, if the battery runs down or is removed from the computer.</p>
</BODY>
</HTML>

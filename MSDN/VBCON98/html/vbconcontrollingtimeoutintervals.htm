<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controlling Timeout Intervals</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcontrollingtimeoutintervals"></a>Controlling Timeout Intervals</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconControllingTimeoutIntervalsC">
</object></p>
<p>
You can set the timeout intervals that determine when Visual Basic displays the Component Busy and Component Request Pending dialog boxes, using two properties of the App object.</p>
<h2>OLEServerBusyTimeout Property</h2>
<p>
Determines how long Visual Basic will go on retrying your Automation requests before displaying the Component Busy dialog. The default value is 10000 milliseconds (10 seconds). </p>
<h2>OLERequestPendingTimeout Property</h2>
<p>
Determines how long Visual Basic waits before responding to mouse clicks, keypress events, and other events by displaying the Component Request Pending dialog. The default value is 5000 milliseconds (5 seconds).</p>
<p>
The following example shows how the timeout values might be adjusted and reset for a call to the StockAnalysis method of a hypothetical BusinessRules object.</p>
<pre><code>Public Sub SetTimeouts(ByVal lngComponentBusy As _
Long, ByVal lngRequestPending As Long)
   App.OLEServerBusyTimeout = lngComponentBusy
   App.OLERequestPendingTimeout = lngRequestPending
End Sub

Public Sub ResetTimeouts()
   App.OLEServerBusyTimeout = 10000

   App.OLERequestPendingTimeout = 5000
End Sub

Private Sub cmdFullAnalysis_Click()
   On Error Goto FullAnalysis_Error
   ' Set very short timeouts. After 2 seconds,
   ' the user will be notified and keypresses or
   ' clicks will display the Component Busy
   ' and Component Request Pending dialogs.
   SetTimeouts 2, 2
   Me.MousePointer = vbHourglass
   gobjBusinessRules.StockAnalysis txtNYSECode.Text, _
   ATYPE_FULL
FullAnalysis_Cleanup:
   Me.MousePointer = vbDefault
   ResetTimeouts
   Exit Sub

FullAnalysis_Error:
   If Err.Number = &amp;h80010001 Then
      MsgBox "Analysis cancelled"
   Else
      ' Code to handle other errors...
   End If
   Resume FullAnalysis_Cleanup
End Sub
</code></pre>
<p>
You can set either of these timeouts to very large values, because they are stored as Longs. For example, 86,400,000 milliseconds is a day, which is equivalent to an infinite timeout. When you do this, however, you risk having your program lock up until the component is no longer busy, or until a pending request has completed.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Because these timeout values are properties of the App object, they also affect documents you link or embed using the OLE container control or the Toolbox. If you are using linked or embedded documents and you change these properties for an Automation request, it is a good idea to reset the values afterward.</p>
</BODY>
</HTML>

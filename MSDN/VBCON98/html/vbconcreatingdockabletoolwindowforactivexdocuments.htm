<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Visual Basic IDE as an ActiveX Document Container</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingdockabletoolwindowforactivexdocuments"></a>The Visual Basic IDE as an ActiveX Document Container</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingDockableToolWindowForActiveXDocumentsC">
</object></p>
<p>
Using the Extensibility object model and add-ins, you can greatly extend the Visual Basic development environment. You can also create ActiveX documents to extend the Visual Basic IDE. Develop your ActiveX document as you would any other, but use the CreateToolWindow function to create a tool window in the IDE which will contain the ActiveX document.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic assumes you have some knowledge of add-ins — what they are, and how to create them. If you are unfamiliar with add-ins, see "Add-Ins Overview," and "Creating a Basic Add-In," in "Extending the Visual Basic Environment with Add-Ins."</p>
<p>
Using the CreateToolWindow function has the following advantages over other add-ins:
<ul type=disc>
<li>
The CreateToolWindow function returns a dockable window.<br><br></li>
<li>
The window correctly follows window minimize and maximize semantics without any coding. For example, tool windows will "remember" where they were last placed or docked.</li>
</ul>
<h2>The CreateToolWindow Function</h2>
<p>
The CreateToolWindow function is a method of the Windows collection. The function creates a tool window — a container for the ActiveX document — and returns a reference to the window. The following series of steps outline what happens in a typical scenario:
<ol>
<li>
On the Add-Ins menu, the user clicks AddIn Manager, and a list of all available add-ins appears.<br><br></li>
<li>
From the list, the user clicks "MyActiveXAddIn."<br><br></li>
<li>
As the add-in is created, the OnConnect event occurs.<br><br></li>
<li>
In the OnConnect event, the code invokes the CreateToolWindow function, creating the tool window.<br><br></li>
<li>
The function call returns a reference to the newly created tool window that contains the ActiveX document.<br><br></li>
<li>
Using the reference, the code can manipulate tool window properties. For example, to show the tool window, the Visible property is set to True.</li>
</ol>
<p class=label>
<b>To create a simple Add-in using an ActiveX document</b>
<ol>
<li>
On the <b>File</b> menu, click <b>New Project</b> to open the <b>New Project</b> dialog box. Double-click the <b>AddIn </b>icon to create a new Add-in project.<br><br></li>
<li>
Click the <b>Project</b> menu, then click <b>Add UserDocument</b> to open the <b>Add UserDocument</b> dialog box. Double-click the <b>UserDocument </b>icon to add a UserDocument to the project.<br><br></li>
<li>
In the <b>Properties </b>window, double-click <b>Name</b>, and change the name of the UserDocument to "axdUserDoc."<br><br></li>
<li>
In the <b>Project Explorer</b> window, double-click the <b>Connect </b>icon to open the class module's code window. There is already a fair amount of code written in the template, and we will just add a bit to it. Look at the Declarations section, and modify it to resemble the following code:<pre><code>Implements IDTExtensibility

Public FormDisplayed         As Boolean
Public VBInstance             As VBIDE.VBE
Public mcbMenuCommandBar As Office.CommandBarControl
Dim frmAddIn                  As New frmAddIn
Public WithEvents MenuHandler As CommandBarEvents

' Add the following declarations for the
' CreateToolWindow function:
Private mWin As Window
Private mobjDoc As axdUserDoc
Const guidMyTool$ = "(4244B234-E45F-12dg-8O3f-04884)"
</code></pre>
<p class=tl>
The code you added declares the necessary object variables for the CreateToolWindow function. The Window variable "mWin" will be set to the reference returned by the function; you can then use this reference to show or hide the window. The second variable, "mobjDoc," will be set to reference the UserDocument. You can then use this reference to manipulate the ActiveX document. Finally, the constant "guidMyTool" is used by the function to identify the window instance; for every tool window you create, this string must be unique.</P></li>
<li>
In the code window, scroll down to the OnConnection event. We will add code to this event, but to avoid confusion, select all of the code in the event, and delete it. Then add the following code:<pre><code>Private Sub IDTExtensibility_OnConnection(ByVal VBInst As Object, ByVal ConnectMode As VBIDE.vbext_ConnectMode, ByVal AddInInst As VBIDE.AddIn, custom() As Variant)
Set mWin = AddInInst.VBE.Windows. _
CreateToolWindow(AddInInst, _
"MyAddin.axdUserDoc", _
"ActiveX Caption", guidMyTool, mobjDoc)
mWin.Visible = True
End Sub
</code></pre>
<p class=tl>
This code uses the Set statement to set the Window variable "mWin" to a reference to the window created by the function. This reference is then used to set the Visible property of the window to True.</P></li>
<li>
Press ctrl+g<small> </small>to view the Immediate window.<br><br></li>
<li>
Type "AddToIni" and press <small>return</small>. You have just added the progID of the project to the VBAddIn.ini file, a necessary step when creating an Add-in.<br><br></li>
<li>
Press f5 to run the project.<br><br></li>
<li>
Minimize the Visual Basic window. This will prevent confusion as you will start another Visual Basic instance.<br><br></li>
<li>
Start another instance of Visual Basic.<br><br></li>
<li>
When the <b>New Project</b> dialog appears, press <small>enter </small>to start a new Standard .exe project.<br><br></li>
<li>
On the <b>Add-Ins</b> menu, click <b>Add-In Manager </b>to display the <b>Add-In Manager </b>dialog box.<br><br></li>
<li>
From the list of available add-ins, click <b>My Add-In</b>, the click <b>OK</b>. The ActiveX document you just created will now appear as a part of the Visual Basic development environment.<br><br></li>
<li>
After viewing the document, you will want to shut it down. To do this, open the <b>Add-in Manager</b> dialog box again, and clear the <b>MyAddIn</b> checkbox, then click <b>OK</b>.</li>
</ol>
<h2>Adding a Second Window</h2>
<p>
Having an understanding of the mechanics of the function allows us to create a more complex scenario: creating a second window, containing a second ActiveX document, from the first.</p>
<p class=label>
<b>To add a second ActiveX document</b>
<ol>
<li>
If you haven't already, quit the second instance of Visual Basic.<br><br></li>
<li>
On the <b>Project </b>menu, click <b>Add UserDocument </b>and add a second UserDocument to the project.<br><br></li>
<li>
Change the name of the UserDocument to "axdUserDoc2."<br><br></li>
<li>
Add a TextBox control to the UserDocument.<br><br></li>
<li>
Double-click the designer, and add the following code:<pre><code>Public Property Get Text () As String
Text = Text1.Text
End Property

Public Property Let Text(ByVal newText As String)
Text1.Text = newText
End Property
</code></pre>
<p class=tl>
The preceding code creates a public property, which you will set when you create the window for the document.</P></li>
<li>
In the <b>Project Explorer</b> window, double-click <b>AddIn </b>to open the code module. Add the following code to the Declarations section.<pre><code>Public gAddIn As vbide.Addin
</code></pre>
<p class=tl>
The new line declares a global variable that will be set with a reference to the add-in instance.</P></li>
<li>
In the <b>Project Explorer</b> window, double-click <b>Connect </b>to open the class module. Look at the OnConnect event, and modify it to resemble the following code:<pre><code>Private Sub IDTExtensibility_OnConnection(ByVal _
VBInst As Object, ByVal ConnectMode As _
VBIDE.vbext_ConnectMode, ByVal AddInInst As _
VBIDE.AddIn, custom() As Variant)
Set mWin = AddInInst.VBE.Windows. _
CreateToolWindow(AddInInst, _
"MyAddin.axdUserDoc", _
"ActiveX Caption", guidMyTool, mobjDoc)
mWin.Visible = True

' Add this new code:
Set gAddIn = AddInInst
End Sub
</code></pre>
<p class=tl>
The new line sets the global variable to the add-in instance, making it available to create more windows.</P></li>
<li>
In the <b>Project Explorer</b> Window, double-click <b>axdUserDocument</b> to bring its designer forward.<br><br></li>
<li>
On the Toolbox, double-click the CommandButton icon to add a CommandButton control to the UserDocument.<br><br></li>
<li>
Change the caption of the button to "Show Next."<br><br></li>
<li>
Double-click the designer to open its code window, and add the following code:<pre><code>Private mWin2 As Window
Private mDoc2 As axdUserDoc2
Const guidMyTool$ = "Xiang19X67Hangzhou4/27"

Private Sub Command1_Click()
set mWin2 = gAddIn.VBE.Windows. _
CreateToolWindow(gAddIn, _
"MyAddin.axdUserDoc2", _
"Second ActiveX Document", _
guidMyTool, mDoc2)
mWin2.Visible = True
mDoc2.Text = "This is the second document."
End Sub
</code></pre>
</li>
<li>
Press f5 to run the project.<br><br></li>
<li>
Run another instance of Visual Basic.<br><br></li>
<li>
When the <b>New Project</b> dialog appears, press <small>enter </small>to start a new Standard .exe project.<br><br></li>
<li>
On the <b>Add-Ins</b> menu, click <b>Add-In Manager </b>to display the <b>Add-In Manager </b>dialog box.<br><br></li>
<li>
From the list of available Add-ins, select the <b>My Add-In</b> checkbox, then click <b>OK</b>. The ActiveX document you just created will now appear as a part of the Visual Basic development environment.</li>
</ol>
</BODY>
</HTML>

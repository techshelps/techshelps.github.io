<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ListView Scenario 4: Using a Function to Return an Author's Name from the Biblio.mdb Datbase</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlistviewcontrolscenario4usingfunctiontoreturnauthorsnamefrombibliomdbdatbase"></a>ListView Scenario 4: Using a Function to Return an Author's Name from the Biblio.mdb Database</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconListViewControlScenario4UsingFunctionToReturnAuthorsNameFromBibliomdbDatbaseC">
</object></p>
<p>
The code examples in this topic are taken from the DataTree.vbp sample application, which is listed in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory. </p>
<p>
In the scenario, "ListView Control Scenario 1: Using the ListView Control with the TreeView Control," the ListView control and the TreeView control are showed working in tandem. In that scenario, the TreeView control's NodeClick event is used to call a procedure called "GetTitles" to populate the ListView control. That procedure queries the "Titles" table to create a recordset, then creates a ListItem object for each record it finds.</p>
<p>
One piece of information that is not contained in the "Titles" table is the name of the book's author. Instead, the "Titles" table contains a field named "ISBN" that stores the ISBN number of the book. The value of this field is also contained in a second table called "Title Author" which links the ISBN value with a field (Au_ID) that identifies the author.</p>
<p class=label>
<b>To retrieve the author's name, the function must</b>
<ol>
<li>
Find the ISBN value in the "Title Author" recordset.<br><br></li>
<li>
Find the AuthorID value in the Authors recordset.<br><br></li>
<li>
Return the name of the author.</li>
</ol>
<h3>Setup</h3>
<p>
The scenario uses the following object:
<ul type=disc>
<li>
ListView control named "lvwDB"</li>
</ul>
<h3>Find the ISBN Value in the "Title Author" Recordset</h3>
<p>
The GetAuthor function uses the value of the ISBN field to search the "Title Author" recordset. As in other database operations, first declare an object variable of type RecordSet, then open the "Title Author" table and assign the reference to the object variable. However, since the code uses two recordsets, declare the object variables together, then open the recordsets, as shown.</p>
<pre><code>Dim rsTitleAuthor As Recordset
Dim rsAuthors As Recordset

Set rsTitleAuthor = mDbBiblio. _
OpenRecordset("Title Author", dbOpenDynaset)
Set rsAuthors = mDbBiblio. _
OpenRecordset("Authors", dbOpenDynaset)
</code></pre>
<p>
With the rsAuthors object variable and the value from the ISBN field, search the "Title Author" table:</p>
<pre><code>Dim strQuery As String
strQuery = "ISBN = " &amp; "'" &amp; ISBN &amp; "'"
rsTitleAuthor.FindFirst strQuery
</code></pre>
<h3>Find the AuthorID value in the Authors recordset</h3>
<p>
The FindFirst method will return the first match that meets the criteria in the query. The other field in the "Title Author" table is the "Au_ID" field, which contains the ID of an author in the "Authors" table. Therefore, we can now use the value from the "Au_ID" field in the query, and search the "Authors" table, as shown:</p>
<pre><code>' Reset query string.
strQuery = "Au_ID = " &amp; rsTitleAuthor!AU_ID
' Search again using the FindFirst method.
rsAuthors.FindFirst strQuery 
</code></pre>
<h3>Return the Name of the Author</h3>
<p>
Finally, the "Authors" table has been entered, and the "Au_ID" field has been searched. Presuming no errors have been made, the current recordset should return the name of the author. The following code instructs the function to return the author's name to the calling code:</p>
<pre><code>GetAuthors = rsAuthors!Author
</code></pre>
<h3>The Complete GetAuthor Function</h3>
<p>
The complete function is shown:</p>
<pre><code>Private Function GetAuthor(ISBN)
   ' Declare DAO object variables.
   Dim rsTitleAuthor As Recordset
   Dim rsAuthors As Recordset&nbsp;&nbsp;&nbsp; 
   ' Set object variables to recordsets.
   Set rsTitleAuthor = mDbBiblio. _
   OpenRecordset("Title Author", dbOpenDynaset)
   Set rsAuthors = mDbBiblio. _
   OpenRecordset("Authors", dbOpenDynaset)
   ' Create query string.
   Dim strQuery As String
   strQuery = "ISBN = " &amp; "'" &amp; ISBN &amp; "'"
   rsTitleAuthor.FindFirst strQuery
   ' If there is no author, return "n/a."
   ' Otherwise, return the name of the author.

   If rsTitleAuthor.NoMatch Then
      GetAuthor = "n/a"
      Exit Function
   Else
      ' Presume we have found the right recordset.
      ' Then reset the string query with Au_ID 
      ' field value and search "Authors" table.
      strQuery = "Au_ID = " &amp; rsTitleAuthor!AU_ID
      rsAuthors.FindFirst strQuery
      ' Return the name of the author from the Author
      ' field.
      GetAuthor = rsAuthors!Author
   End If
End Function
</code></pre>
</BODY>
</HTML>

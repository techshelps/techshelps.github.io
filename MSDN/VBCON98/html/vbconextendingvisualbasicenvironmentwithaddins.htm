<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending the Visual Basic Environment with Add-Ins</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconextendingvisualbasicenvironmentwithaddins"></a>Extending the Visual Basic Environment with Add-Ins</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconExtendingVisualBasicEnvironmentWithAddInsC">
</object></p>
<p>
The Microsoft Visual Basic development environment comes with a fixed level of functionality and a select set of tools. You may find that you require some functionality or a tool that doesn't exist in Visual Basic's Integrated Development Environment (IDE), or find yourself repeatedly doing a simple task. To solve this dilemma with prior versions of Visual Basic, you might have purchased pre-fabricated controls or toolsets to augment the IDE. Now, you can elect to create your solutions from within Visual Basic using its extensibility object model.</p>
<p>
Objects from this model can be programmatically used to construct <i>add-ins</i> — modular ActiveX components that connect to the IDE and provide it additional functionality. In many cases, if the functionality is generic enough, these ActiveX components can even be used in other applications (that can use ActiveX components).</p>
<p>
Add-ins can be constructed to work inside or outside the IDE, or both. They can automate repetitive tasks, monitor the IDE for the occurrence of certain events, act upon those events, or perform complex tasks. Add-ins can be activated through menu commands, toolbar buttons, or through Windows events.</p>
<p>
One variation of add-in is a Wizard. A Wizard is a step-by-step instructive program you can create to lead users of your applications through a particularly difficult procedure.</p>
<p>
With add-ins and the extensibility model, you are now able to tailor the Visual Basic IDE to your unique needs with applications that do exactly what you want them to do.</p>
<h2>Chapters</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=6%><a href="vbconaddinsoverview.htm"><img src="folder.gif" border=0></a></td>
<td width=94%><a href="vbconaddinsoverview.htm">Add-Ins Overview</a><p>
Explains extensibility and how it's implemented in Visual Basic in the form of add-ins, and provides a step-by-step procedure for creating a simple, working add-in.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconextensibilitymodelobjectsstructure.htm"><img src="folder.gif" border=0></a></td>
<td width=94%><a href="vbconextensibilitymodelobjectsstructure.htm">Extensibility Model Objects and Structure</a><p>
Provides a map to the objects you can use to create and connect add-ins, along with links to more detailed reference information on each.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconhowtobuildaddin.htm"><img src="folder.gif" border=0></a></td>
<td width=94%><a href="vbconhowtobuildaddin.htm">How to Build an Add-In</a><p>
Offers in-depth discussion of the steps and issues associated with creating add-ins to automate programming tasks. Uses code from a sample application included with Visual Basic.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconconnectingandexposingaddins.htm"><img src="folder.gif" border=0></a></td>
<td width=94%><a href="vbconconnectingandexposingaddins.htm">Connecting and Exposing Add-Ins</a><p>
Covers add-in essentials and illustrates methods for connecting and exposing your add-ins in the Visual Basic environment.</p>
</td>
</tr>
</table><br>
</BODY>
</HTML>

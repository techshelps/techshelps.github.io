<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Monitoring Data with Watch Expressions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmonitoringdatawithwatchexpressions"></a>Monitoring Data with Watch Expressions</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconMonitoringDataWithWatchExpressionsC">
</object></p>
<p>
As you debug your application, a calculation may not produce the result you want or problems might occur when a certain variable or property assumes a particular value or range of values. Many debugging problems aren't immediately traceable to a single statement, so you may need to observe the behavior of a variable or expression throughout a procedure.</p>
<p>
Visual Basic automatically monitors watch expressions — expressions that you define — for you. When the application enters break mode, these watch expressions appear in the Watch window, where you can observe their values.</p>
<p>
You can also direct watch expressions to put the application into break mode whenever the expression's value changes or equals a specified value. For example, instead of stepping through perhaps tens or hundreds of loops one statement at a time, you can use a watch expression to put the application in break mode when a loop counter reaches a specific value. Or you may want the application to enter break mode each time a flag in a procedure changes value.</p>
<h2>Adding a Watch Expression</h2>
<p>
You can add a watch expression at design time or in break mode. You use the Add Watch dialog box (shown in Figure 13.12) to add watch expressions.</p>
<p class=label>
<b>Figure 13.12&nbsp;&nbsp;&nbsp;The Add Watch dialog box</b></p>
<p>
<img src="avp13012.gif" border=0></p>
<p>
The following table describes the Add Watch dialog box.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Component</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>Expression box</td>
<td width=72%>Where you enter the expression that the watch expression evaluates. The expression is a variable, a property, a function call, or any other valid expression.</td>
</tr>
<tr valign=top>
<td width=28%>Context option group</td>
<td width=72%>Sets the scope of variables watched in the expression. Use if you have variables of the same name with different scope. You can also restrict the scope of variables in watch expressions to a specific procedure or to a specific form or module, or you can have it apply to the entire application by selecting All Procedures and All Modules. Visual Basic can evaluate a variable in a narrow context more quickly.</td>
</tr>
<tr valign=top>
<td width=28%>Watch Type option group</td>
<td width=72%>Sets how Visual Basic responds to the watch expression. Visual Basic can watch the expression and display its value in the Watch window when the application enters break mode. Or you can have the application enter break mode automatically when the expression evaluates to a true (nonzero) statement or each time the value of the expression changes.</td>
</tr>
</table><br>
<p class=label>
<b>To add a watch expression</b>
<ol>
<li>
From the <b>Debug</b> menu, choose <b>Add Watch</b>.<br><br></li>
<li>
The current expression (if any) in the Code Editor will appear in the <b>Expression</b> box on the <b>Add</b> <b>Watch</b> dialog box. If this isn't the expression you want to watch, enter the expression to evaluate in the <b>Expression</b> box.<br><br></li>
<li>
If necessary, set the scope of the variables to watch.<p class=tl>
If you select the <b>Procedure</b> or <b>Module</b> option under <b>Context</b>, select a procedure, form, or module name from the appropriate list box.</P></li>
<li>
If necessary, select an option button in the <b>Watch</b> <b>Type</b> group to determine how you want Visual Basic to respond to the watch expression.<br><br></li>
<li>
Choose <b>OK</b>.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can also add an expression by dragging and dropping from the Code Editor to the Watch window.</p>
<h2>Editing or Deleting a Watch Expression</h2>
<p>
The Edit Watch dialog box, shown in Figure 13.13, lists all the current watch expressions. You can edit and delete any watch listed in the Watch window.</p>
<p class=label>
<b>Figure 13.13&nbsp;&nbsp;&nbsp;The Edit Watch dialog box</b></p>
<p>
<img src="avp13013.gif" border=0></p>
<p class=label>
<b>To edit a watch expression</b>
<ol>
<li>
In the <b>Watch</b> window, double click the watch expression you want to edit.<p class=tl>
-or-</P><p class=tl>
Select the watch expression you want to edit and choose <b>Edit</b> <b>Watch</b> from the <b>Debug</b> menu.</P></li>
<li>
The <b>Edit</b> <b>Watch</b> dialog box is displayed and is identical to the Add Watch dialog box except for the title bar and the addition of a Delete button.<br><br></li>
<li>
Make any changes to the expression, the scope for evaluating variables, or the watch type.<br><br></li>
<li>
Choose <b>OK</b>.</li>
</ol>
<p class=label>
<b>To delete a watch expression</b></p>
<p>
In the <b>Watch </b>window, select the watch expression you want to delete.
<ul type=disc>
<li>
Press the DELETE key.</li>
</ul>
<h2>Identifying Watch Types</h2>
<p>
At the left edge of each watch expression in the Watch window is an icon identifying the watch type of that expression. Figure 13.14 defines the icon for each of the three watch types.</p>
<p class=label>
<b>Figure 13.14&nbsp;&nbsp;&nbsp;Watch type icons</b></p>
<p>
<img src="avp13014.gif" border=0></p>
<h2>Using Quick Watch</h2>
<p>
While in break mode, you can check the value of a property, variable, or expression for which you have not defined a watch expression. To check such expressions, use the Quick Watch dialog box, shown in Figure 13.15.</p>
<p class=label>
<b>Figure 13.15&nbsp;&nbsp;&nbsp;The Quick Watch dialog box</b></p>
<p>
<img src="avp13015.gif" border=0></p>
<p>
The Quick Watch dialog box shows the value of the expression you select from the Code window. To continue watching this expression, click the Add button; the Watch window, with relevant information from the Quick Watch dialog box already entered, is displayed. If Visual Basic cannot evaluate the value of the current expression, the Add button is disabled.</p>
<p class=label>
<b>To display the Quick Watch dialog box</b>
<ol>
<li>
Select a watch expression in the Code window.<br><br></li>
<li>
Click the <b>Quick Watch</b> button on the <b>Debug</b> toolbar. (To display the Debug toolbar, right-click on the Visual Basic toolbar and select the <b>Debug</b> option.)<p class=tl>
-or-</P><p class=tl>
Press SHIFT+F9.</P><p class=tl>
-or-</P><p class=tl>
From the <b>Debug</b> menu, choose <b>Quick Watch</b>.</P></li>
<li>
If you want to add a watch expression based on the expression in the <b>Quick Watch</b> dialog box, choose the <b>Add</b> button.</li>
</ol>
</BODY>
</HTML>

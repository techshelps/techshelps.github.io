<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Properties</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconimplementingpropertiespolymorphistically"></a>Implementing Properties</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconImplementingPropertiesPolymorphisticallyC">
</object></p>
<p>
This topic continues the code example begun in "Creating and Implementing an Interface," adding properties to the Animal interface that was implemented in the Flea and Tyrannosaur classes. You may find it helpful to read that topic before beginning this one.</p>
<p>
Suppose we give the Animal class an Age property, by adding a Public variable to the Declarations section:</p>
<pre><code>Option Explicit
Public Age As Double
</code></pre>
<p>
The Procedure drop downs in the code modules for the Tyrannosaur and Flea classes now contain property procedures for implementing the Age property, as shown in Figure 9.10.</p>
<p class=label>
<b>Figure 9.10&nbsp;&nbsp;&nbsp;Implementing property procedures</b></p>
<p>
<img src="avp09001.gif" border=0></p>
<p>
This illustrates a point made in "Adding Properties to a Class" earlier in this chapter. Using a public variable to implement a property is strictly a convenience for the programmer. Behind the scenes, Visual Basic implements the property as a pair of property procedures.</p>
<p>
You must implement both procedures. The property procedures are easily implemented by storing the value in a private data member, as shown here:</p>
<pre><code>Private mdblAge As Double

Private Property Get Animal_Age() As Double
   Animal_Age = mdblAge
End Property

Private Property Let Animal_Age(ByVal RHS As Double)
   mdblAge = RHS
End Property
</code></pre>
<p>
The private data member is an implementation detail, so you have to add it yourself.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When Implements provides the template for a Property Set or Property Let, it has no way of determining the name of the last argument, so it substitutes the name <code>RHS,</code> as shown in the code example above.</p>
<p>
There's no data validation on a property implemented as a public data member, but that doesn't mean you can't add validation code to the Property Let for Animal_Age. For example, you might want to restrict the values to ages appropriate for a Tyrannosaur or a Flea, respectively.</p>
<p>
In fact, this shows the independence of interface and implementation. As long as the interface matches the description in the type library, the implementation can be anything.</p>
<p>
Before you go on to the next step, remove the implementation of the read-write Age property from both class modules.</p>
<h3>Implementing a Read-Only Property</h3>
<p>
Of course, allowing the age of an animal to be set arbitrarily is bad object design. The object should know its own age, and provide it to the user as a read-only property. Remove the public variable <code>Age</code> from the Animal class, and add the template for a read-only age property, like this:</p>
<pre><code>Public Property Get Age() As Double

End Property
</code></pre>
<p>
Now the Procedure drop downs in the code windows for the Tyrannosaur and Flea classes contain only a single entry, Age [PropertyGet]. You might implement this for the Tyrannosaur as follows:</p>
<pre><code>Private mdblBirth As Double

Private Property Get Animal_Age() As Double
   Animal_Age = Now - mdblBirth
End Property
</code></pre>
<p>
The code above returns the age of the Tyrannosaur in days. You could set <code>mdblBirth</code> in the Initialize event of the Tyrannosaur class, as here:</p>
<pre><code>Private Sub Class_Initialize()
   mdblBirth = Now
End Sub
</code></pre>
<p>
And of course you could return the property value in more commonly used units, such as dog years.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;We've been tossing interfaces and objects around like they were the same thing, seemingly putting references to objects into one object variable, and references to interfaces into another. "Time Out for a Brief Discussion of Objects and Interfaces" clears matters up.</p>
</BODY>
</HTML>

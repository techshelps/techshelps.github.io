<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the DataCombo and DataList Controls</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingdataboundcontrolsdbcomboboxdbgriddblistbox"></a>Using the DataCombo and DataList Controls</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingDataBoundControlsDBComboBoxDBGridDBListBoxC">
</object></p>
<p>
The DataCombo and DataList controls strongly resemble the standard list box and combo box controls, but there are some important differences that give them great flexibility and usefulness in database applications. Both controls can be automatically filled from a database field from the data control to which they are bound. In addition, they can optionally pass a selected field to a second data control, making them ideal for "lookup table" applications.</p>
<h3>Possible Uses</h3>
<ul type=disc>
<li>
In a relational database, use the data from one table to supply values to be input into a second (related) table. For example, in an inventory database, the names of suppliers are stored in one table with each supplier having a unique ID. Another table showing products uses the unique ID to designate which company supplies the product. Use the DataList control to show the name of the supplier while (invisibly) supplying the ID of the supplier to the products table.<br><br></li>
<li>
Allow the user to narrow a search by selecting a criteria from a drop-down list. For example, a sales-reporting database application might use a DataList control to let the user pick a State or Sales Region. Once that selection is made, the choice is automatically passed to a second data control that positions itself on sales records from the selected region.</li>
</ul>
<p>
Like their built-in counterparts, the main difference between the DataList and the DataCombo controls is that the DataCombo box control provides a text box into whose contents may be edited.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For an explanation of the DataList and DataCombo controls' ability to link database tables, see "Linking Two Tables using the DataCombo and DataList Controls." To build a simple application using linked tables, see "Creating a Simple DataCombo Application."</p>
<h2>Noteworthy Properties of the Controls</h2>
<p>
Some important properties of the DataList and DataCombo controls include:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>Property</b></td>
<td class=label width=65%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=35%>BoundText</td>
<td width=65%>Contains the value of the field named in the BoundColumn property.</td>
</tr>
<tr valign=top>
<td width=35%>SelectedItem</td>
<td width=65%>Returns a bookmark for the row of a selected item.</td>
</tr>
<tr valign=top>
<td width=35%>MatchEntry</td>
<td width=65%>Enables extended search mode for locating items in a list generated by the DataCombo control.</td>
</tr>
<tr valign=top>
<td width=35%>IntegralHeight</td>
<td width=65%>Sizes the control to display an exact number of complete rows.</td>
</tr>
<tr valign=top>
<td width=35%>VisibleCount</td>
<td width=65%>Specifies the number of visible items in a list.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The DataFormat property of the DataCombo control is an Extender property. Therefore it's always visible on the property sheet and can be set in code. However the DataCombo control only formats the top item in its list. This can be disconcerting to the end user who sees a formatted top item, but is only given a list of unformatted items to select from. The formatted item may also mislead end users who assume the item will be entered in the database as formatted. For these reasons, it's advisable to not set the DataFormat property when using the DataCombo control.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To try a step-by-step tutorial that demonstrates the use of the BoundText property, see "Creating a DataGrid Linked to a DataList Control." For a complete list of properties and methods of these controls, see "DataList Control" and "DataCombo Control."</p>
</BODY>
</HTML>

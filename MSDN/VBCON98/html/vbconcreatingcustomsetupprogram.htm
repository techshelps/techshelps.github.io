<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Setup Toolkit</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingcustomsetupprogram"></a>The Setup Toolkit</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingCustomSetupProgramC">
</object></p>
<p>
The Setup Toolkit is a project installed with Visual Basic that is used by the Package and Deployment Wizard when it creates a setup program. The Setup Toolkit project contains the forms and code that the application's setup program uses to install files onto the user's computer. When you use the Package and Deployment Wizard, the wizard includes the setup1.exe file that the Setup Toolkit project creates. This file is used as the application's main installation file.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;There are two setup programs involved in the installation process — setup.exe and setup1.exe. The setup.exe program performs pre-installation processing on the user's computer, including installing the setup1.exe program and any other files needed for the main installation program to run. Only setup1.exe is customizable through the Setup Toolkit.</p>
<p>
In addition to playing a supporting role in the process of creating a setup program, the Setup Toolkit can be used to modify the screens seen in the installation process, or to create a setup program directly. You might create a custom setup program if you need to add additional functionality not supported by the wizard to your installation sequence.</p>
<p>
The Setup Toolkit project resides in the \Wizards\PDWizard\Setup1 subdirectory of the main Visual Basic directory.</p>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;The files in this project are the same files used by the output of the Package and Deployment Wizard. Do not modify them without making a backup copy in another directory first. If you modify setup1.exe, subsequent setup programs created by the Package and Deployment Wizard will use the modified version.</p>
<p>
You use the Setup Toolkit by loading the Setup1.vbp file into Visual Basic and making modifications to the appearance or functionality of the project. In doing so, you may need to manually go through the steps that the Package and Deployment Wizard would otherwise do for you. The following sections describe steps in the process and explain how to determine which files you need to include in your setup, how to create a Setup.lst, how to create distribution media, and how to test your setup.</p>
<h2>Overall Steps to Modify the Package and Deployment Wizard </h2>
<p>
When you modify the Setup Toolkit with the intention of changing the output created by the Package and Deployment Wizard, you follow these steps:
<ol>
<li>
Modify the Setup Toolkit project to contain any new prompts, screens, functions, code, or other information you want to include. When you are finished, compile the project to create setup1.exe.<br><br></li>
<li>
Run the Package and Deployment Wizard, following the prompts on each screen, to create your distribution media.</li>
</ol>
<h2>Overall Steps to Create a Custom Setup Program</h2>
<p>
When you create a setup program manually using the Setup Toolkit rather than the Package and Deployment Wizard, you must follow these steps:
<ol>
<li>
If necessary, modify the Setup Toolkit project to contain any new prompts, screens, functions, code, or other information you want to include.<br><br></li>
<li>
Determine the files you want to distribute, including all run-time, setup, and dependency files.<br><br></li>
<li>
Determine where to install the files on the users' computers.<br><br></li>
<li>
Manually create your Setup.lst file to reflect the names and installation locations of all files that must be included for your project.<br><br></li>
<li>
Determine how you will be distributing files.<br><br></li>
<li>
Create the .cab files for your project using the Makecab utility.</li>
</ol>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can use the Package and Deployment Wizard to create your .cab files, then modify the .cab files manually. When the wizard creates your .cab files, it creates a .ddf file and a batch file in the \Support subdirectory of your project directory. To modify the .cab files, edit the .ddf file, then run the batch file provided. The batch file in turn will run Makecab.exe to recreate your .cab files.
<ol start=7>
<li>
Create the setup1.exe for your project by compiling the Setup Toolkit project with your changes.<br><br></li>
<li>
Copy your files to the distribution media, or manually publish your files to the Web site using the Web Publishing Wizard, available in the ActiveX SDK.</li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on using the Web Publishing Wizard, see "Internet Tools and Technologies" in the Internet Client SDK. See "Modifying the Setup Project" later in this chapter for more information on modifying the Setup Toolkit project. See "Files you Need to Distribute" and "Where to Install Files on the User's Machine" for more information on how to place files on the user's computer. See "Manually Creating Distribution Media" for more information on copying your files to the appropriate media.</p>
</BODY>
</HTML>

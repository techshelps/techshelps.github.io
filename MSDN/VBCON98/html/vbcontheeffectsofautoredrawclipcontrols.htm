<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Layering Graphics with AutoRedraw and ClipControls</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontheeffectsofautoredrawclipcontrols"></a>Layering Graphics with AutoRedraw and ClipControls</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheEffectsOfAutoRedrawClipControlsC">
</object></p>
<p>
Different combinations of AutoRedraw and ClipControls have different effects on the way graphical controls and graphics methods paint to the screen.</p>
<p>
As you create graphics, keep in mind that graphical controls and labels, nongraphical controls, and graphics methods appear on different layers in a container. The behavior of these layers depends on three factors:
<ul type=disc>
<li>
The AutoRedraw setting.<br><br></li>
<li>
The ClipControls setting.<br><br></li>
<li>
Whether graphics methods appear inside or outside the Paint event.</li>
</ul>
<h2>Normal Layering</h2>
<p>
Usually, the layers of a form or other container are, from front to back, as follows:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Layer</b></td>
<td class=label width=72%><b>Contents</b></td>
</tr>
<tr valign=top>
<td width=28%>Front</td>
<td width=72%>Nongraphical controls like command buttons, check boxes, and file controls.</td>
</tr>
<tr valign=top>
<td width=28%>Middle</td>
<td width=72%>Graphical controls and labels.</td>
</tr>
<tr valign=top>
<td width=28%>Back</td>
<td width=72%>Drawing space for the form or container. This is where the results of graphics methods appear.</td>
</tr>
</table><br>
<p>
Anything in one layer covers anything in the layer behind, so graphics you create with the graphical controls appear behind the other controls on the form, and all graphics you create with the graphics methods appear below all graphical and nongraphical controls. The normal arrangement of layers is shown in Figure 12.9.</p>
<p class=label>
<b>Figure 12.9&nbsp;&nbsp;&nbsp;Normal layering of graphics on a form</b></p>
<p>
<img src="avp12009.gif" border=0></p>
<h2>Effects on Layering</h2>
<p>
You can produce normal layering using any of several approaches. Combining settings for AutoRedraw and ClipControls and placing graphics methods inside or outside the Paint event affects layering and the performance of the application.</p>
<p>
The following table lists the effects created by different combinations of AutoRedraw and ClipControls and placement of graphics methods.</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b><br>
AutoRedraw</b></td>
<td class=label width=21%><b><br>
ClipControls</b></td>
<td class=label width=25%><b>Graphics methods in/out of Paint event</b></td>
<td class=label width=32%><b><br>
Layering behavior</b></td>
</tr>
<tr valign=top>
<td width=22%>True</td>
<td width=21%>True<br>
(default)</td>
<td width=25%>Paint event <br>
ignored</td>
<td width=32%>Normal layering.</td>
</tr>
<tr valign=top>
<td width=22%>True</td>
<td width=21%>False</td>
<td width=25%>Paint event <br>
ignored</td>
<td width=32%>Normal layering. Forms with many controls that do not overlap may paint faster because no clipping region is calculated or created.</td>
</tr>
<tr valign=top>
<td width=22%>False<br>
(default)</td>
<td width=21%>True<br>
(default)</td>
<td width=25%>In</td>
<td width=32%>Normal layering.</td>
</tr>
<tr valign=top>
<td width=22%>False</td>
<td width=21%>True</td>
<td width=25%>Out</td>
<td width=32%>Nongraphical controls in front. Graphics methods and graphical controls appear mixed in the middle and back layers. Not recommended.</td>
</tr>
<tr valign=top>
<td width=22%>False</td>
<td width=21%>False</td>
<td width=25%>In</td>
<td width=32%>Normal layering, affecting only pixels that were previously covered or that appear when resizing a form.</td>
</tr>
<tr valign=top>
<td width=22%>False</td>
<td width=21%>False</td>
<td width=25%>Out</td>
<td width=32%>Graphics methods and all controls appear mixed in the three layers. Not recommended.</td>
</tr>
</table><br>
<h3>The Effects of AutoRedraw</h3>
<p>
Setting AutoRedraw to True always produces normal layering. While using AutoRedraw is the easiest way to layer graphics, applications with large forms may suffer from reduced performance due to the memory demands of AutoRedraw.</p>
<h3>The Effects of ClipControls</h3>
<p>
When AutoRedraw is True, the setting of ClipControls has no effect on how graphics layer on a form or in a container. But ClipControls can affect how fast the form displays. When ClipControls is False, the application doesn’t create a clipping region. Not having to calculate or paint to avoid holes in a clipping region may cause the form to display faster.</p>
<p>
Also, when AutoRedraw and ClipControls are both False, the application repaints only the pixels of a form or container that are exposed by:
<ul type=disc>
<li>
Covering the form or container with another window and then moving the window away.<br><br></li>
<li>
Resizing the form or container.</li>
</ul>
<h3>The Effects of the Paint Event</h3>
<p>
When AutoRedraw is False, the best place to use graphics methods is within the Paint event of the form or container. Confining graphics methods to the Paint event causes those methods to paint in a predictable sequence.</p>
<p>
Using graphics methods outside a Paint event when AutoRedraw is False can produce unstable graphics. Each time the output of a graphics method appears on the form or container, it may cover any controls or graphics methods already there (if ClipControls is False). When an application uses more than a few graphics methods to create visual effects, managing the resulting output can be extremely difficult unless the methods are all confined to the Paint event.</p>
</BODY>
</HTML>

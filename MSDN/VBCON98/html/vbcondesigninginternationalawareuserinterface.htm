<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Designing an International-Aware User Interface</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondesigninginternationalawareuserinterface"></a>Designing an International-Aware User Interface</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDesigningInternationalAwareUserInterfaceC">
</object></p>
<p>
Because text tends to grow when you localize an application, you should pay special attention when designing the following user interface (UI) components:
<ul type=disc>
<li>
Messages<br><br></li>
<li>
Menus and dialog boxes<br><br></li>
<li>
Icons and bitmaps<br><br></li>
<li>
Access and shortcut keys</li>
</ul>
<h3>Messages</h3>
<p>
English text strings are usually shorter than localized text strings in other languages. The following table shows the additional average growth for strings, based on initial length. This data is drawn from past Visual Basic localization projects and describes an average growth rate.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=44%><b>English length (in characters)</b></td>
<td class=label width=56%><b>Additional growth for localized strings</b></td>
</tr>
<tr valign=top>
<td width=44%>1 to 4</td>
<td width=56%>100%</td>
</tr>
<tr valign=top>
<td width=44%>5 to 10</td>
<td width=56%>80%</td>
</tr>
<tr valign=top>
<td width=44%>11 to 20</td>
<td width=56%>60%</td>
</tr>
<tr valign=top>
<td width=44%>21 to 30</td>
<td width=56%>40%</td>
</tr>
<tr valign=top>
<td width=44%>31 to 50</td>
<td width=56%>20%</td>
</tr>
<tr valign=top>
<td width=44%>Over 50</td>
<td width=56%>10%</td>
</tr>
</table><br>
<p>
When designing the interface, consider these growth ratios and allow for text to wrap to more lines as the messages get longer.</p>
<h3>Menus and Dialog Boxes</h3>
<p>
As with messages, menus and dialog boxes may grow when the application is localized. Consider the two following identical dialog boxes in the Automated Teller Machine sample application. You can see that extra space was allocated in the dialog box to allow for text expansion. Figure 16.2 shows the English dialog box, while Figure 16.3 shows the Spanish dialog box. Knowing that text can grow, plan your interface so that controls don't have to be resized or other elements redesigned when localized.</p>
<p class=label>
<b>Figure 16.2&nbsp;&nbsp;&nbsp;English input dialog box in the ATM sample application</b></p>
<p>
<img src="avp16002.gif" border=0></p>
<p class=label>
<b>Figure 16.3&nbsp;&nbsp;&nbsp;Spanish input dialog box in the ATM sample application</b></p>
<p>
<img src="avp16003.gif" border=0></p>
<p>
In menus and dialog boxes, avoid crowding status bars. Even abbreviations might be longer or simply not exist in other languages.</p>
<h3>Icons and Bitmaps</h3>
<p>
Icons and bitmaps are usually used to depict a certain functionality without using text. Consider the following rules when working with icons and bitmaps:
<ul type=disc>
<li>
Avoid using bitmaps that are not an international standard. The following bitmaps represent a mailbox in the United States, but many users from other locales will not recognize it.<p>
<img src="avp16004b.gif" border=0><img src="avp16005.gif" border=0></P></li>
<li>
Avoid using bitmaps that contain text. They take time to redraw, and text growth might also become an obstacle, as illustrated in the following icons.<p>
<img src="avp16006.gif" border=0><img src="avp16007.gif" border=0></P></li>
<li>
Make sure that bitmaps or icons are culturally sensitive. What may be acceptable in one locale may be inappropriate or offensive in another.</li>
</ul>
<h3>Access and Shortcut Keys</h3>
<p>
Different locales have different keyboard layouts. Not all characters exist in all keyboard layouts. When developing your Visual Basic application, make sure all access-key and shortcut-key combinations you assign can be reproduced with international keyboards. One simple method to verify that your keyboard assignments work properly for the locales you are targeting is to choose the desired keyboard layout from your Windows Control Panel, along with keyboard layout pictures (which some reference manuals contain), and try the access-key and shortcut-key combinations.</p>
<p>
Because certain access-key and shortcut-key combinations are not available for certain locales or because they are reserved for system use by some editions of Windows, it is best to avoid them when developing your Visual Basic application. Here are some examples of characters to avoid:</p>
<p>
@ $ { } [ ] \ ~ | ^ ' &lt; &gt;</p>
<p>
One way to work around this limitation is to use numbers and function keys (F1, F2, etc.) instead of letters in shortcut-key combinations. These may be less intuitive but they will not require any localization, because virtually all keyboard layouts include numbers and function keys.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;DBCS characters cannot be used as access or shortcut keys.</p>
</BODY>
</HTML>

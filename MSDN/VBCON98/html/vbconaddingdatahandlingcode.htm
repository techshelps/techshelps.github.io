<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Data Handling Code</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingdatahandlingcode"></a>Adding Data Handling Code</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingDataHandlingCode_C">
</object></p>
<p>
In order to turn the MyData control into a data source, you'll need to add some code to handle connecting to the data and moving through the records. You'll also need to expose a number of properties to allow a developer using the control to select a data source at design time.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating sample data source components. It begins with the topic <a href="vbconbuildingdatasources.htm">Creating Data Sources</a>.</p>
<p class=label>
<b>To add data handling code to the MyData control</b>
<ol>
<li>
In the <b>Project Explorer</b> window, click <b>MyData </b>to select it, then press F7 or click the <b>Code</b> button on the <b>Project Explorer</b> window toolbar, to open the <b>Code</b> window.<br><br></li>
<li>
Select <b>References</b> from the <b>Project</b> menu to open the <b>References</b> dialog box. Add a reference to the <b>Microsoft ActiveX Data Objects 2.0 Library</b>.<br><br></li>
<li>
Add the following Property Let / Property Get procedures to expose design-time properties:<pre><code>' read only
Public Property Get RecordSet() As ADODB.RecordSet
 &nbsp; Set RecordSet = rs
End Property

Public Property Get RecordSource() As String
 &nbsp; RecordSource = m_RecordSource
End Property

Public Property Let RecordSource(ByVal New_RecordSource As String)
 &nbsp; m_RecordSource = New_RecordSource
End Property

Public Property Get BOFAction() As BOFActionType
 &nbsp; BOFAction = m_BOFAction
End Property

Public Property Let BOFAction(ByVal New_BOFAction As BOFActionType)
 &nbsp; m_BOFAction = New_BOFAction
End Property

Public Property Get EOFAction() As EOFActionType
 &nbsp; EOFAction = m_EOFAction
End Property

Public Property Let EOFAction(ByVal New_EOFAction As EOFActionType)
 &nbsp; m_EOFAction = New_EOFAction
End Property

Public Property Get ConnectionString() As String
 &nbsp; ConnectionString = m_ConnectionString
End Property

Public Property Let ConnectionString(ByVal New_ConnectionString _
 &nbsp;&nbsp;&nbsp;&nbsp; As String)
 &nbsp; m_ConnectionString = New_ConnectionString
End Property
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>cmdFirst</b>. In the <b>Procedure </b>box, select the <b>Click</b> event. Add the following code to the cmdFirst_Click event procedure to move to the first record in a recordset:<pre><code>Private Sub cmdFirst_Click()
 &nbsp; If rs Is Nothing Then Exit Sub
 &nbsp; rs.MoveFirst
End Sub
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>cmdLast</b>. In the <b>Procedure </b>box, select the <b>Click</b> event. Add the following code to the cmdLast_Click event procedure to move to the last record in a recordset:<pre><code>Private Sub cmdLast_Click()
 &nbsp; If rs Is Nothing Then Exit Sub
 &nbsp; rs.MoveLast
End Sub
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>cmdPrev</b>. In the <b>Procedure </b>box, select the <b>Click</b> event. Add the following code to the cmdPrev_Click event procedure to move backwards through a recordset:<pre><code>Private Sub cmdPrev_Click()
 &nbsp; If rs Is Nothing Then Exit Sub

 &nbsp; If rs.BOF Then
 &nbsp;&nbsp;&nbsp;&nbsp; Select Case m_BOFAction
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case BOFActionType.adDoMoveFirst
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.MoveFirst
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case BOFActionType.adStayBOF
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp;&nbsp;&nbsp; End Select
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; rs.MovePrevious
 &nbsp; End If
End Sub
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>cmdNext</b>. In the <b>Procedure </b>box, select the <b>Click</b> event. Add the following code to the cmdNext_Click event procedure to move forward through a recordset:<pre><code>Private Sub cmdNext_Click()
 &nbsp; If rs Is Nothing Then Exit Sub

 &nbsp; If rs.EOF Then
 &nbsp;&nbsp;&nbsp;&nbsp; Select Case m_EOFAction
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case EOFActionType.adDoAddNew
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.AddNew
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case EOFActionType.adDoMoveLast
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.MoveLast
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case EOFActionType.adStayEOF
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Case Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp;&nbsp;&nbsp; End Select
 &nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp; rs.MoveNext
 &nbsp; End If
End Sub
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>UserControl</b>. In the <b>Procedure </b>box, select the <b>Terminate</b> event. Add the following code to the UserControl_Terminate event procedure to ensure that the objects created by the control are shut down properly:<pre><code>Private Sub UserControl_Terminate()
 &nbsp; On Error Resume Next

 &nbsp; If Not rs Is Nothing Then
 &nbsp;&nbsp;&nbsp;&nbsp; rs.Close
 &nbsp;&nbsp;&nbsp;&nbsp; Set rs = Nothing
 &nbsp; End If

 &nbsp; If Not cn Is Nothing Then
 &nbsp;&nbsp;&nbsp;&nbsp; cn.Close
 &nbsp;&nbsp;&nbsp;&nbsp; Set cn = Nothing
 &nbsp; End If

 &nbsp; Err.Clear
End Sub
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>UserControl</b>. In the <b>Procedure </b>box, select the <b>WriteProperties</b> event. Add the following code to the UserControl_WriteProperties event procedure to save the property values that are entered at design time:<pre><code>Private Sub UserControl_WriteProperties(PropBag As PropertyBag)
 &nbsp; 'Write property values to storage
 &nbsp; Call PropBag.WriteProperty("Caption", _
 &nbsp;&nbsp;&nbsp;&nbsp; lblCaption.Caption, Ambient.DisplayName)
 &nbsp; Call PropBag.WriteProperty("RecordSource", _
 &nbsp;&nbsp;&nbsp;&nbsp; m_RecordSource, m_def_RecordSource)
 &nbsp; Call PropBag.WriteProperty("BOFAction", _
 &nbsp;&nbsp;&nbsp;&nbsp; m_BOFAction, m_def_BOFAction)
 &nbsp; Call PropBag.WriteProperty("EOFAction", _
 &nbsp;&nbsp;&nbsp;&nbsp; m_EOFAction, m_def_EOFAction)
 &nbsp; Call PropBag.WriteProperty("ConnectionString", _
 &nbsp;&nbsp;&nbsp;&nbsp; m_ConnectionString, m_def_ConnectionString)
End Sub
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>UserControl</b>. In the <b>Procedure </b>box, select the <b>ReadProperties</b> event. Add the following code to the UserControl_ReadProperties event procedure to save the property values that are entered at design time:<pre><code>Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
 &nbsp; 'Load property values from storage
 &nbsp; lblCaption.Caption = PropBag.ReadProperty("Caption", _
 &nbsp;&nbsp;&nbsp;&nbsp; Ambient.DisplayName)
 &nbsp; m_RecordSource = PropBag.ReadProperty("RecordSource", _
 &nbsp;&nbsp;&nbsp;&nbsp; m_def_RecordSource)
 &nbsp; m_BOFAction = PropBag.ReadProperty("BOFAction", m_def_BOFAction)
 &nbsp; m_EOFAction = PropBag.ReadProperty("EOFAction", m_def_EOFAction)
 &nbsp; m_ConnectionString = PropBag.ReadProperty("ConnectionString", _
 &nbsp;&nbsp;&nbsp;&nbsp; m_def_ConnectionString)
End Sub
</code></pre>
</li>
<li>
In the <b>Object </b>box, select <b>UserControl</b>. In the <b>Procedure </b>box, select the <b>GetDataMember</b> event. Add the following code to the UserControl_GetDataMember event procedure to connect to the data specified in the ConnectionString and RecordSource properties:<pre><code>Private Sub UserControl_GetDataMember(DataMember As String, _
 &nbsp;&nbsp;&nbsp;&nbsp; Data As Object)
 &nbsp; Dim conn As String

 &nbsp; On Error GoTo GetDataMemberError

 &nbsp; If rs Is Nothing Or cn Is Nothing Then
 &nbsp;&nbsp;&nbsp;&nbsp; ' make sure various properties have been set
 &nbsp;&nbsp;&nbsp;&nbsp; If Trim$(m_ConnectionString) = "" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "No ConnectionString Specified!", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbInformation, Ambient.DisplayName
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp;&nbsp;&nbsp; End If

 &nbsp;&nbsp;&nbsp;&nbsp; If Trim$(m_RecordSource) = "" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "No RecordSource Specified!", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbInformation, Ambient.DisplayName
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
 &nbsp;&nbsp;&nbsp;&nbsp; End If

 &nbsp;&nbsp;&nbsp;&nbsp; If Trim$(m_ConnectionString) &lt;&gt; "" Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Create a Connection object and establish
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' a connection.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set cn = New ADODB.Connection
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cn.ConnectionString = m_ConnectionString
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cn.Open

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Create a RecordSet object.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set rs = New ADODB.RecordSet
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.Open m_RecordSource, cn, adOpenKeyset, adLockPessimistic
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rs.MoveFirst
 &nbsp;&nbsp;&nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set cn = Nothing
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set rs = Nothing
 &nbsp;&nbsp;&nbsp;&nbsp; End If
 &nbsp; End If

 &nbsp; Set Data = rs

 &nbsp; Exit Sub

GetDataMemberError:

 &nbsp; MsgBox "Error: " &amp; CStr(Err.Number) &amp; vbCrLf &amp; vbCrLf &amp; _
 &nbsp;&nbsp;&nbsp;&nbsp; Err.Description, vbOKOnly, Ambient.DisplayName
 &nbsp; Exit Sub
End Sub
</code></pre>
</li>
<li>
Save your work before going on to the next step.</li>
</ol>
<p>
In the next step we'll run our project to see the results.</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating sample ActiveX data sources.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>To</b></td>
<td class=label width=50%><b>See</b></td>
</tr>
<tr valign=top>
<td width=50%>Go to the next step</td>
<td width=50%><a href="vbconrunningmydatacontrolproject.htm">Running the MyDataControl Project</a></td>
</tr>
<tr valign=top>
<td width=50%>Start from the beginning</td>
<td width=50%><a href="vbconbuildingdatasources.htm">Creating Data Sources</a></td>
</tr>
</table><br>
</BODY>
</HTML>

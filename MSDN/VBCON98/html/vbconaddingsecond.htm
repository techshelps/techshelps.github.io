<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding a Second ActiveX Document to the FirstDoc Project</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingsecond"></a>Adding a Second ActiveX Document to the ActXDoc Project</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingSecondC">
</object></p>
<p>
Having one ActiveX document in a project is equivalent to having a single form in a project — somewhat limiting. To increase your capabilities, add a second ActiveX document to the ActXDoc project.</p>
<p>
Unlike standard Visual Basic forms, you cannot use the Show method to show ActiveX documents. This is because the container application (in this case, Internet Explorer) determines when to show or hide the ActiveX document. Instead, you must navigate from one ActiveX document to another. To navigate between the two ActiveX documents, use the HyperLink object and its NavigateTo method.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX document. It begins with the topic <a href="vbconcreatingdocumentobject.htm">Creating an ActiveX Document</a>.</p>
<p class=label>
<b>To add a second ActiveX document to the ActXDoc project</b>
<ol>
<li>
Before adding a second ActiveX document to the project, add a CommandButton control to the FirstDoc designer. On the Toolbox, double-click the <b>CommandButton</b> icon to add a CommandButton control to the FirstDoc designer.<br><br></li>
<li>
Set the appropriate properties for the control using the following table:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Command1 property</b></td>
<td class=label width=50%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=50%>Name</td>
<td width=50%>cmdGoNext</td>
</tr>
<tr valign=top>
<td width=50%>Caption</td>
<td width=50%>Go Next</td>
</tr>
</table><br>
</li>
<li>
Position the control on the FirstDoc designer as shown.<p>
<img src="avtcm072.gif" border=0></P></li>
<li>
Double-click the <b>Go Next</b> button and add the following code to the button's Click event:<pre><code>Private Sub cmdGoNext_Click()
 &nbsp; ' Note: the following path may not correspond to 
 &nbsp; ' the actual path to the SecndDoc.vbd file on 
 &nbsp; ' your machine.
 &nbsp; HyperLink.NavigateTo _
 &nbsp; App.Path &amp; "\SecndDoc.vbd"
End Sub
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The App.Path code only works if you keep ActXDoc project in the same directory where you installed the Visual Basic application. If you save the project to another directory, replace <code>App.Path &amp; "\SecndDoc.vbd"</code> with the hard-coded path of the SecndDoc.vbd file.</p><p class=atl>
When you are running the project, Visual Basic always creates a temporary .vbd file for each ActiveX document in your project, and the .vbd files will always be found in the same directory where Visual Basic has been installed. However, if you are compiling an .exe or .dll, Visual Basic will create the .vbd file in the same directory as the .exe or .dll file.</p></li>
<li>
This next step will insert a second ActiveX document into the project. On the <b>Project</b> menu, click <b>Add UserDocument</b> to open the <b>Add User Document </b>dialog box.<br><br></li>
<li>
Double-click the <b>User Document</b> icon to add an ActiveX document to the project.<br><br></li>
<li>
On the <b>Properties</b> window, double-click <b>Name</b> and change the name of the new UserDocument object to SecndDoc. The caption should now read "ActXDoc - SecndDoc (UserDocument)."<br><br></li>
<li>
Add <b>Label</b> and <b>CommandButton</b> controls to the SecndDoc User document, and use the following tables to set their properties.<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Label1 property</b></td>
<td class=label width=50%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=50%>Name</td>
<td width=50%>lblCaption</td>
</tr>
<tr valign=top>
<td width=50%>Caption</td>
<td width=50%>SecndDoc</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Command1 property</b></td>
<td class=label width=50%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=50%>Name</td>
<td width=50%>cmdGoBack</td>
</tr>
<tr valign=top>
<td width=50%>Caption</td>
<td width=50%>Go Back</td>
</tr>
</table><br>
</li>
<li>
Position the controls on the SecndDoc User document as shown:<p>
<img src="avtcm059.gif" border=0></P></li>
<li>
Add the following code to the Click event of the cmdGoBack button:<pre><code>Private Sub cmdGoBack_Click()
 &nbsp; UserDocument.HyperLink.GoBack
End Sub
</code></pre>
<p class=tl>
The HyperLink object features the GoBack method, which will navigate back to the previous document in the browser.</P></li>
<li>
On the <b>File</b> menu, click <b>Save Project</b> to save the project files. Name them as shown in the following table. Visual Basic will provide the indicated extensions automatically.<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>File</b></td>
<td class=label width=40%><b>File name</b></td>
<td class=label width=27%><b>Extension</b></td>
</tr>
<tr valign=top>
<td width=33%>User document</td>
<td width=40%>SecndDoc</td>
<td width=27%>.dob</td>
</tr>
</table><br>
</li>
</ol>
<h2>Running the Project</h2>
<p>
Now that you have added a second ActiveX document, you can run the project and navigate between the two.
<ol>
<li>
Run the project by pressing f5. Internet Explorer will be launched.<br><br></li>
<li>
In Internet Explorer, type the path of the FirstDoc.vbd file in the <b>Address</b> box.</li>
</ol>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you previously opened the FirstDoc ActiveX document in Internet Explorer, click the arrow next to the <b>Address</b> box to see a list of recent URLs. The FirstDoc document should be available from the drop-down list.
<ol start=3>
<li>
Click <b>Go Next</b>. You will now be on the SecndDoc document.<br><br></li>
<li>
On the SecndDoc document, click <b>Go Back</b> to return to the FirstDoc ActiveX document.</li>
</ol>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX document.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>To</b></td>
<td class=label width=62%><b>See</b></td>
</tr>
<tr valign=top>
<td width=38%>Go to the next step</td>
<td width=62%><a href="vbconaddform.htm">Adding a Form to the ActXDoc Project</a></td>
</tr>
<tr valign=top>
<td width=38%>Start from the beginning</td>
<td width=62%><a href="vbconcreatingdocumentobject.htm">Creating an ActiveX Document</a></td>
</tr>
</table>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Object Creation Works in Visual Basic Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconhowobjectcreationworksinvbcomponents"></a>How Object Creation Works in Visual Basic Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vafctCreateObject;vbconHowObjectCreationWorksInVBComponentsC">
</object></p>
<p>
In certain circumstances, the mechanism you use to create objects — that is, CreateObject, the New operator, or a variable declared As New — can have subtle effects on object creation. These effects depend on whether or not Visual Basic uses the object creation services provided by the Component Object Model (COM).</p>
<p>
When you create objects from classes that are provided by other components, Visual Basic always uses COM object creation services. As a result, when you’re creating externally provided objects, there are no differences between the New operator, declaring a variable As New, and using the CreateObject function.</p>
<p>
The CreateObject function always uses COM object creation services, whether you use it to create externally provided objects or to create instances of classes that are part of your project. So for CreateObject, there's no difference between external and internal object creation.</p>
<p>
However, when you use the New operator (or a variable declared As New) to create an instance of a class that's <i>part of your project</i>, Visual Basic uses a very efficient private implementation of COM object creation.</p>
<p>
In other words, Visual Basic uses the same mechanism for all object creation <i>except</i> creating objects with New or As New from classes in your project. This is summarized in the following table.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Object created from</b></td>
<td class=label width=33%><b>Using CreateObject</b></td>
<td class=label width=34%><b>Using New, As New</b></td>
</tr>
<tr valign=top>
<td width=33%>A class provided by another component</td>
<td width=33%>COM object creation services</td>
<td width=34%>COM object creation services</td>
</tr>
<tr valign=top>
<td width=33%>A class that’s part of your project</td>
<td width=33%>COM object creation services</td>
<td width=34%>Visual Basic private object creation</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B> &nbsp; The CreateObject function cannot be used on classes whose Instancing property is Private or PublicNotCreatable. The New operator can be used on any class.</p>
<p>
The following are specific examples of the subtle differences that can arise depending on how you create objects from classes that are part of your project:
<ul type=disc>
<li>
If you use the New operator to create an instance of a SingleUse class, the object will be created in your current program instance — <i>as if its Instancing property were MultiUse.</i> Using CreateObject will start another instance of your component. (See "Scalability Through Multiple Processes: SingleUse Objects.")<br><br></li>
<li>
In a multithreaded out-of-process component with thread-per-object or round-robin threading, an instance of any of your project's externally creatable classes created with the New operator will <i>share the thread of the object that executed New </i>— while one created using CreateObject will be on another thread.<br><br></li>
<li>
In a component designed for use with Microsoft Transaction Server, an instance of any of your project's externally creatable classes created with the New operator will be <i>unknown to Microsoft Transaction Server.</i> Objects that will be used with Microsoft Transaction Server must be created using CreateObject.</li>
</ul>
</BODY>
</HTML>

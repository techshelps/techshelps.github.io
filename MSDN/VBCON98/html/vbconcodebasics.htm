<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Code Basics</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcodebasics"></a>Code Basics</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCodeBasicsC">
</object></p>
<p>
This section presents information on code writing mechanics, including breaking and combining lines of code, adding comments to your code, using numbers in code, and following naming conventions in Visual Basic.</p>
<h2>Breaking a Single Statement Into Multiple Lines</h2>
<p>
You can break a long statement into multiple lines in the Code window using the <i>line-continuation character</i> (a space followed by an underscore). Using this character can make your code easier to read, both online and when printed. The following code is broken into three lines with line-continuation characters ( _):</p>
<pre><code>Data1.RecordSource = _
"SELECT * FROM Titles, Publishers" _
&amp; "WHERE Publishers.PubId = Titles.PubID" _
&amp; "AND Publishers.State = 'CA'"
</code></pre>
<p>
You can't follow a line-continuation character with a comment on the same line. There are also some limitations as to where the line-continuation character can be used.</p>
<h2>Combining Statements on One Line</h2>
<p>
There is usually one Visual Basic statement to a line, and there is no statement terminator. However, you can place two or more statements on a line if you use a colon (:) to separate them:</p>
<pre><code>Text1.Text = "Hello" : Red = 255 : Text1.BackColor = _
Red
</code></pre>
<p>
In order to make your code more readable, however, it's better to place each statement on a separate line.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information, see "Visual Basic Specifications, Limitations, and File Formats."</p>
<h2>Adding Comments to Your Code</h2>
<p>
As you read through the examples in this guide, you'll often come across the comment symbol (<code>'</code>). This symbol tells Visual Basic to ignore the words that follow it. Such words are remarks placed in the code for the benefit of the developer, and other programmers who might examine the code later. For example:</p>
<pre><code>' This is a comment beginning at the left edge of the 
' screen.
Text1.Text = "Hi!"      ' Place friendly greeting in text 
                     ' box.
</code></pre>
<p>
Comments can follow a statement on the same line or can occupy an entire line. Both are illustrated in the preceding code. Remember that comments can't follow a line-continuation character on the same line.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can add or remove comment symbols for a block of code by selecting two or more lines of code and choosing the Comment Block or Uncomment Block buttons on the Edit toolbar.</p>
<h2>Understanding Numbering Systems</h2>
<p>
Most numbers in this documentation are decimal (base 10). But occasionally it's convenient to use hexadecimal numbers (base 16) or octal numbers (base 8). Visual Basic represents numbers in hexadecimal with the prefix &amp;H and in octal with &amp;O. The following table shows the same numbers in decimal, octal, and hexadecimal.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Decimal</b></td>
<td class=label width=34%><b>Octal </b></td>
<td class=label width=35%><b>Hexadecimal </b></td>
</tr>
<tr valign=top>
<td width=31%> 9</td>
<td width=34%>&amp;O11</td>
<td width=35%>&amp;H9</td>
</tr>
<tr valign=top>
<td width=31%>15</td>
<td width=34%>&amp;O17</td>
<td width=35%>&amp;HF</td>
</tr>
<tr valign=top>
<td width=31%>16</td>
<td width=34%>&amp;O20</td>
<td width=35%>&amp;H10</td>
</tr>
<tr valign=top>
<td width=31%>20</td>
<td width=34%>&amp;O24</td>
<td width=35%>&amp;H14</td>
</tr>
<tr valign=top>
<td width=31%>255</td>
<td width=34%>&amp;O377</td>
<td width=35%>&amp;HFF</td>
</tr>
</table><br>
<p>
You generally don't have to learn the hexadecimal or octal number system yourself because the computer can work with numbers entered in any system. However, some number systems lend themselves to certain tasks, such as using hexadecimals to set the screen and control colors.</p>
<h2>Naming Conventions in Visual Basic</h2>
<p>
While you are writing Visual Basic code, you declare and name many elements (Sub and Function procedures, variables, constants, and so on). The names of the procedures, variables, and constants that you declare in your Visual Basic code must follow these guidelines:
<ul type=disc>
<li>
They must begin with a letter.<br><br></li>
<li>
They can't contain embedded periods or type-declaration characters (special characters that specify a data type. <br><br></li>
<li>
They can be no longer than 255 characters. The names of controls, forms, classes, and modules must not exceed 40 characters.<br><br></li>
<li>
They can't be the same as restricted keywords.</li>
</ul>
<p>
A <i>restricted keyword</i> is a word that Visual Basic uses as part of its language. This includes predefined statements (such as If and Loop), functions (such as Len and Abs), and operators (such as Or and Mod).</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For a complete list of keywords, see the <i>Language Reference</i>.</p>
<p>
Your forms and controls can have the same name as a restricted keyword. For example, you can have a control named Loop. In your code you cannot refer to that control in the usual way, however, because Visual Basic assumes you mean the Loop keyword. For example, this code causes an error:</p>
<pre><code>Loop.Visible = True            ' Causes an error.
</code></pre>
<p>
To refer to a form or control that has the same name as a restricted keyword, you must either qualify it or surround it with square brackets: [ ]. For example, this code does not cause an error:</p>
<pre><code>MyForm.Loop.Visible = True   ' Qualified with the form 
                           ' name.
[Loop].Visible = True         ' Square brackets also 
                           ' work.
</code></pre>
<p>
You can use square brackets in this way when referring to forms and controls, but not when declaring a variable or defining a procedure with the same name as a restricted keyword. Square brackets can also be used to force Visual Basic to accept names provided by other type libraries that conflict with restricted keywords.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Because typing square brackets can get tedious, you might want to refrain from using restricted keywords as the name of forms and controls. However, you can use this technique if a future version of Visual Basic defines a new keyword that conflicts with an existing form or control name when you update your code to work with the new version.</p>
</BODY>
</HTML>

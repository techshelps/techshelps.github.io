<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Multimedia MCI Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingmultimediamcicontrol"></a>Using the Multimedia Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingMultimediaMCIControlC">
</object></p>
<p>
The Multimedia control allows you to manage Media Control Interface (MCI) devices. These devices include: sound boards, MIDI sequencers, CD-ROM drives, audio players, videodisc players, and videotape recorders and players.</p>
<p>
This Multimedia control contains a set of push buttons that issue MCI commands which resemble the commands (functions) you would expect to see on a typical compact disc player or videotape recorder.</p>
<p class=label>
<b>The Multimedia control</b></p>
<p>
<img src="avtct098.gif" border=0></p>
<p>
The buttons are defined, from left to right, as Prev, Next, Play, Pause, Back, Step, Stop, Record, and Eject.</p>
<h2>Possible Use</h2>
<ul type=disc>
<li>
To manage the recording and playback of MCI devices.</li>
</ul>
<h2>Multimedia Requirements and Supported Device Types</h2>
<p>
Which buttons you use, and the functions provided to you by the Multimedia control, depend on the hardware and software configurations of a particular machine. For instance, if your application uses specific multimedia devices and drivers, they must be installed on the user's machine.</p>
<p>
Driver support for many multimedia devices (audio and video files, for instance) is provided for in the Windows 95 and Windows NT operating systems. Other devices, such as digital audio tape players or image scanners require separate drivers, are usually provided by the manufacturer.</p>
<p>
Devices are considered to be of two types: <i>simple</i> and <i>compound</i>. Simple multimedia devices do not require a data file for playback. For example, when Videodisc and CD audio players are opened, you play, rewind, or forward through 'tracks'. Compound devices, however, require a data file for playback.</p>
<p>
The following table lists some of the devices supported by the Multimedia control and the string required by the DeviceType property to use the device. Those listing an accompanying file type are compound devices.</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Device type</b></td>
<td class=label width=22%><b>String</b></td>
<td class=label width=14%><b>File Type</b></td>
<td class=label width=36%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>CD audio</td>
<td width=22%>CDAudio</td>
<td width=14%></td>
<td width=36%>CD audio player</td>
</tr>
<tr valign=top>
<td width=28%>Digital Audio Tape</td>
<td width=22%>DAT</td>
<td width=14%></td>
<td width=36%>Digital audio tape player</td>
</tr>
<tr valign=top>
<td width=28%>Digital video</td>
<td width=22%>DigitalVideo</td>
<td width=14%></td>
<td width=36%>Digital video in a window (not GDI-based)</td>
</tr>
<tr valign=top>
<td width=28%>Other</td>
<td width=22%>Other</td>
<td width=14%></td>
<td width=36%>Undefined MCI device</td>
</tr>
<tr valign=top>
<td width=28%>Overlay</td>
<td width=22%>Overlay</td>
<td width=14%></td>
<td width=36%>Overlay device </td>
</tr>
<tr valign=top>
<td width=28%>Scanner</td>
<td width=22%>Scanner</td>
<td width=14%></td>
<td width=36%>Image scanner</td>
</tr>
<tr valign=top>
<td width=28%>Sequencer</td>
<td width=22%>Sequencer</td>
<td width=14%>.mid</td>
<td width=36%>Musical Instrument Digital Interface (MIDI) sequencer</td>
</tr>
<tr valign=top>
<td width=28%>Vcr</td>
<td width=22%>VCR</td>
<td width=14%></td>
<td width=36%>Video cassette recorder or player</td>
</tr>
<tr valign=top>
<td width=28%>AVI</td>
<td width=22%>AVIVideo</td>
<td width=14%>.avi</td>
<td width=36%>Audio Visual Interleaved video.</td>
</tr>
<tr valign=top>
<td width=28%>Videodisc</td>
<td width=22%>Videodisc</td>
<td width=14%></td>
<td width=36%>Videodisc player</td>
</tr>
<tr valign=top>
<td width=28%>Wave audio</td>
<td width=22%>Waveaudio</td>
<td width=14%>.wav</td>
<td width=36%>Wave device that plays digitized waveform files.</td>
</tr>
</table><br>
<h2>MCI Commands</h2>
<p>
The Multimedia control uses a set of high-level, device-independent commands, known as Media Control Interface commands, that control various multimedia devices. Many of these commands correspond directly to a button on the Multimedia control. For instance, the Play command corresponds to the Play button.</p>
<p>
The Multimedia control is essentially a Visual Basic interface to this command set. Commands like Play or Close have equivalents in the MCI command structure of the Win32<sup>®</sup> API. For instance, Play corresponds to MCI_PLAY. The following table lists the MCI commands used by the Multimedia control, along with their Win32 equivalents:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Command</b></td>
<td class=label width=26%><b>MCI Command</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=24%>Open</td>
<td width=26%>MCI_OPEN</td>
<td width=50%>Opens a MCI device.</td>
</tr>
<tr valign=top>
<td width=24%>Close</td>
<td width=26%>MCI_CLOSE</td>
<td width=50%>Closes a MCI device.</td>
</tr>
<tr valign=top>
<td width=24%>Play</td>
<td width=26%>MCI_PLAY</td>
<td width=50%>Plays a MCI device.</td>
</tr>
<tr valign=top>
<td width=24%>Pause</td>
<td width=26%>MCI_PAUSE or MCI_RESUME</td>
<td width=50%>Pauses playing or recording.</td>
</tr>
<tr valign=top>
<td width=24%>Stop</td>
<td width=26%>MCI_STOP</td>
<td width=50%>Stops a MCI device.</td>
</tr>
<tr valign=top>
<td width=24%>Back</td>
<td width=26%>MCI_STEP</td>
<td width=50%>Steps backward through available tracks.</td>
</tr>
<tr valign=top>
<td width=24%>Step</td>
<td width=26%>MCI_STEP</td>
<td width=50%>Steps forward through available tracks.</td>
</tr>
<tr valign=top>
<td width=24%>Prev</td>
<td width=26%>MCI_SEEK</td>
<td width=50%>Goes to the beginning of the current track using the Seek command. If executed within three seconds of the previous Prev command, goes to the beginning of the previous track or to the beginning of the first track if at the first track.</td>
</tr>
<tr valign=top>
<td width=24%>Next</td>
<td width=26%>MCI_SEEK</td>
<td width=50%>Goes to the beginning of the next track (if at last track, goes to the beginning of the last track) using the Seek command.</td>
</tr>
<tr valign=top>
<td width=24%>Seek</td>
<td width=26%>MCI_SEEK</td>
<td width=50%>Seeks track forward or backward.</td>
</tr>
<tr valign=top>
<td width=24%>Record</td>
<td width=26%>MCI_RECORD</td>
<td width=50%>Records MCI device input.</td>
</tr>
<tr valign=top>
<td width=24%>Eject</td>
<td width=26%>MCI_SET</td>
<td width=50%>Ejects Audio CD from CD drive.</td>
</tr>
<tr valign=top>
<td width=24%>Save</td>
<td width=26%>MCI_SAVE</td>
<td width=50%>Saves an open file.</td>
</tr>
</table><br>
<p>
In Visual Basic, these commands are initiated using the Multimedia control's Command property. For example:</p>
<pre><code>MMControl1.Command = "Open"
</code></pre>
<p>
While the Multimedia control's implementation of the MCI command set is sufficient for most uses, directly utilizing the Win32 API can provide advanced programming functions and techniques.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For additional information on the MCI commands see the <i>Microsoft Multimedia Development Kit Programmer's Workbook</i> or the <i>Microsoft Windows Software Development Kit Multimedia Programmer's Reference</i>. These references, and a wealth of other information on the MCI commands, are available on the Microsoft Developer Network CD.</p>
<h2>Programming the Multimedia Control</h2>
<p>
The Multimedia Control can be either visible or invisible at run time by setting the Enabled and Visible properties. By default, the Enabled and Visible properties are set to True and the control is visible at run time.</p>
<p>
If you do not want the user to interact directly with the buttons on the Multimedia control but want to use the control for its multimedia functionality, set the Visible property to False. An application can control MCI devices with or without user interaction.</p>
<p>
To enable or make individual buttons visible or invisible, you set each button's visible and enabled properties. For example, the Back button contains the properties BackEnabled and BackVisible. Each of the nine push buttons have corresponding properties.</p>
<p>
In most cases, the default functionality of the individual buttons is sufficient to manage MCI devices. However, the Multimedia control contains run-time properties which allow you to augment or redefine the button commands.</p>
<p>
The Notify, NotifyMessage, and NotifyValue properties provide valuable feedback on the failure or completion of a command.</p>
<h2>Opening the MCI Device</h2>
<p>
After you place the Multimedia control on a form, whether it is set to be visible or not, the first step is accessing the MCI device. To do this, you set a number of run-time properties. For example:</p>
<pre><code>'Set initial property values of the media device 
MMControl1.Notify = False
MMControl1.Wait = True
MMControl1.Shareable = False
MMControl1.DeviceType = "CDAudio"
</code></pre>
<p>
The Notify property, if set to True, generates a Done event when next command is completed. The Done event provides useful feedback indicating the success or failure of the command. The Wait property determines whether or not the Multimedia control waits for the next command to complete before returning control to the application. The Shareable property either restricts or allows use of the media device by other applications or processes. The DeviceType property is used to specify the type of MCI device.</p>
<p>
Finally, the Open command is used to open the MCI device.</p>
<pre><code>'Open the media device
MMControl1.Command = "Open"
</code></pre>
<p>
When the control is visible, setting these properties and issuing the Open command enables the push buttons of the Multimedia control that are inherently supported by the MCI device. For instance, opening the cdaudio device enables the Prev, Next, Play, and Eject buttons. When Play is pressed, the Stop and Pause buttons are enabled.</p>
<p>
Multiple instances of the Multimedia control can be added to a form to provide concurrent control of several MCI devices. You use one control per device.</p>
<h2>Managing Multimedia Resources</h2>
<p>
To properly manage multimedia and system resources, you should close those MCI devices that are open before exiting your application. You can place the following statement in the Form_Unload procedure to close an open MCI device when the form containing the Multimedia control is unloaded.</p>
<pre><code>Private Sub Form_Unload (Cancel as Integer)
   Form1.MMControl1.Command = "Close"
End Sub
</code></pre>
<h2>Using the Error and ErrorMessage Properties</h2>
<p>
You can handle errors encountered by the Multimedia control using the Error and ErrorMessage properties. You can test for an error condition after each command. For example, following the Open command, you check the value of the Error property to test for the existence of a CD drive. If the CD drive is not available, an error message is returned. For example:</p>
<pre><code>If Form1.MMControl1.Error Then
   MsgBox Form1.MMControl1.ErrorMessage,vbCritical, "CD Player not installed or not working properly"
End If
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "ErrorMessage Property (Multimedia MCI Control)" and "Error<i> </i>Property (Multimedia MCI Control)".</p>
</BODY>
</HTML>

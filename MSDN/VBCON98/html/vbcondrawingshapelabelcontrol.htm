<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Drawing the ShapeLabel Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondrawingshapelabelcontrol"></a>Drawing the ShapeLabel Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDrawingShapeLabelControlC">
</object></p>
<p>
You can use graphics methods, such as Circle and Line, to draw your control, or you can create your control’s appearance using existing ActiveX controls and Visual Basic intrinsic controls. Controls you add to the UserControl to create its appearance are called <i>constituent controls.</i></p>
<p>
As its name suggests, ShapeLabel’s appearance is created using a Shape control and a Label control.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX control. It begins with the topic <a href="vbconcreatingactivexcontrol.htm">Creating an ActiveX Control</a>.</p>
<p class=label>
<b>To add constituent controls to the ShapeLabel control</b>
<ol>
<li>
In the <b>Project Explorer</b> window, double-click <b>ShapeLabel</b> to open its designer.<br><br></li>
<li>
In the <b>Toolbox</b>, double-click the <b>Visual Basic Shape</b> control to place a Shape control on the ShapeLabel designer. If you haven’t used the Shape control before, hold the mouse over the Toolbox buttons until you find the one whose ToolTip is "Shape."<br><br></li>
<li>
In the <b>Properties</b> window, set the following property values for the Shape control:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Property</b></td>
<td class=label width=50%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=50%>BorderStyle</td>
<td width=50%>0 - Transparent</td>
</tr>
<tr valign=top>
<td width=50%>FillColor</td>
<td width=50%>&amp;H000000FF (Red)</td>
</tr>
<tr valign=top>
<td width=50%>FillStyle</td>
<td width=50%>0 - Solid</td>
</tr>
<tr valign=top>
<td width=50%>Name</td>
<td width=50%>shpBack</td>
</tr>
<tr valign=top>
<td width=50%>Shape</td>
<td width=50%>2 - Oval</td>
</tr>
</table><br>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To set color properties such as FillColor and ForeColor to specific colors, select the <b>Palette </b>tab of the color selection dialog.</p></li>
<li>
In the <b>Toolbox</b>, double-click the <b>Label</b> control to add a label on top of the Shape control. In the <b>Properties</b> window, set the following property values for the Label control:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Property</b></td>
<td class=label width=50%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=50%>Alignment</td>
<td width=50%>2 - Center</td>
</tr>
<tr valign=top>
<td width=50%>BackStyle</td>
<td width=50%>0 - Transparent</td>
</tr>
<tr valign=top>
<td width=50%>ForeColor</td>
<td width=50%>&amp;H00FFFFFF (White)</td>
</tr>
<tr valign=top>
<td width=50%>Name</td>
<td width=50%>lblCaption</td>
</tr>
</table><br>
</li>
<li>
Use the bottom grab handle to change the height of the label so that it is slightly taller than the text it contains. ShapeLabel should look something like this:<p>
<img src="avtcm029.gif" border=0></P></li>
<li>
Double-click the <b>ShapeLabel</b> designer to bring the code window to the front, and replace the code in the UserControl_Resize event procedure with the following:<pre><code>Private Sub UserControl_Resize()
 &nbsp; ' Size the Shape control to fill ShapeLabel's
 &nbsp; '&nbsp;&nbsp; visible surface area.
 &nbsp; shpBack.Move 0, 0, ScaleWidth, ScaleHeight
 &nbsp; ' Center the Label control vertically, and
 &nbsp; '&nbsp;&nbsp; make it the same width as ShapeLabel.
 &nbsp; lblCaption.Move 0, (ScaleHeight _
 &nbsp;&nbsp;&nbsp;&nbsp; - lblCaption.Height) / 2, ScaleWidth
End Sub
</code></pre>
</li>
<li>
When you’re designing a user control, remember that the area you have to work with is bounded by the ScaleWidth and ScaleHeight of the control. Nothing outside this is visible to the user of your control. Furthermore, the size of the client area will change at the whim of the user. The Resize event is thus one of the most important events in control design.<br><br></li>
<li>
Be sure the <b>ShapeLabel</b> designer is in front, then press CTRL+F4 to close the window, putting the control in run mode. In the <b>Project</b> window, double-click Form1 to bring it to the front.<br><br></li>
<li>
The two ShapeLabel controls should now appear as red ovals, with centered white captions that read, "Label1." Resize the ShapeLabels to test the Resize event code.</li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Drawing Your Control" in "Building ActiveX Controls."</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX control.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>To</b></td>
<td class=label width=66%><b>See</b></td>
</tr>
<tr valign=top>
<td width=34%>Go to the next step</td>
<td width=66%><a href="vbconaddingpersistingproperties.htm">Saving the ShapeLabel Control's Property Values</a></td>
</tr>
<tr valign=top>
<td width=34%>Start from the beginning</td>
<td width=66%><a href="vbconcreatingactivexcontrol.htm">Creating an ActiveX Control</a></td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>General Principles of Component Design</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcongeneralprinciplesofcomponentdesign"></a>General Principles of Component Design</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconGeneralPrinciplesOfComponentDesignC">
</object></p>
<p>
This chapter and "Debugging, Testing, and Deploying Components" contain those topics that apply to all types of ActiveX components. These chapters provide necessary background for the in-depth treatment of component types in subsequent chapters.</p>
<p>
This chapter begins with "Component Basics," a group of topics that explain key terminology and concepts of component design.</p>
<p>
The rest of the topics in "General Principles of Component Design" and "Debugging, Testing, and Deploying Components" are organized according to the general sequence of development tasks for components:
<ol>
<li>
Determine the features your component will provide.<br><br></li>
<li>
Determine what objects are required to divide the functionality of the component in a logical fashion.<p class=tl>
See "Adding Classes to Components."</P></li>
<li>
Design any forms your component will display.<br><br></li>
<li>
Design the interface — that is, the properties, methods, and events — for each class provided by your component.<p class=tl>
See "Adding Properties and Methods to Classes," "Adding Events to Classes," "Providing Named Constants for Your Component," "Providing Polymorphism by Implementing Interfaces," and "Organizing Objects: The Object Model."</P><p class=tl>
The remainder of the task-oriented topics are contained in "Debugging, Testing, and Deploying Components." In addition to the following development tasks, they cover distribution, version compatibility, and creating international versions of your component.</P></li>
<li>
Create the component project and test project.<br><br></li>
<li>
Implement the forms required by your component.<br><br></li>
<li>
Implement the interface of each class, provide browser strings for interface members, and add links to Help topics.<br><br></li>
<li>
As you add each interface element or feature, add code to your test project to exercise the new functionality.<br><br></li>
<li>
Compile your component and test it with all potential target applications.</li>
</ol>
<h2>Topics</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=6%><a href="vbconcomponentbasics.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconcomponentbasics.htm">Component Basics</a><p>
Component creation terminology and concepts; the limitations of component project types; startup and shutdown rules.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconaddingclassestoolecomponents.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconaddingclassestoolecomponents.htm">Adding Classes to Components</a><p>
Class module basics for components, including instancing models, default properties, and robustness.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconaddingpropertiesmethodstoolecomponentclasses.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconaddingpropertiesmethodstoolecomponentclasses.htm">Adding Properties and Methods to Classes</a><p>
Interface How To’s, including deciding whether a member is a property or method, private communication using Friend methods, and allowable data types.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconaddingeventstoolecomponentclasses.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconaddingeventstoolecomponentclasses.htm">Adding Events to Classes</a><p>
Declaring, raising, and handling events in classes provided by your component.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconprovidingnamedconstantsforyourolecomponent.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconprovidingnamedconstantsforyourolecomponent.htm">Providing Named Constants for Your Component</a><p>
How to add named constants to your component’s type library.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconprivatecommunicationsbetweenyourobjects.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconprivatecommunicationsbetweenyourobjects.htm">Private Communications Between Your Objects</a><p>
The objects provided by your component may need to exchange information or perform actions you don’t want to expose to users of your component.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconimplementingstandardinterfaces.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconimplementingstandardinterfaces.htm">Providing Polymorphism by Implementing Interfaces</a><p>
When several objects implement the same interface, client applications can gain improved performance through polymorphism.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconorganizingobjectstheobjectmodel.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconorganizingobjectstheobjectmodel.htm">Organizing Objects: The Object Model</a><p>
Make it easier for people to use your component by providing relationships between the objects your component provides. Further implications of Instancing.</p>
</td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with ActiveX Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconworkingwithactivexcomponents"></a>Working with ActiveX Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconWorkingWithActiveXComponentsC">
</object></p>
<p>
You work with object provided by ActiveX components in much the same way that you work with other objects. You assign an object reference to a variable, then write code that uses the object's methods, properties, and events. However, there are some things you need to be aware of when you work with objects provided by components.</p>
<p>
This topic provides an overview of the top-level tasks for working with objects provided by components and an example of using objects in an ActiveX-enabled application. For details on each task, see the appropriate topic described under each task item.</p>
<p class=label>
<b>To use most objects provided by ActiveX components</b>
<ol>
<li>
Create a reference to the object you want to use. How you do this depends on the type of object and whether the ActiveX component supplies a type library.<p class=tl>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;See "Creating a Reference to an Object" later in this chapter.</P></li>
<li>
Write code using the object's methods, properties, and events.<p class=tl>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;See "Using an Object's Properties, Methods, and Events" later in this chapter.</P></li>
<li>
Release the object when you are finished using it.<p class=tl>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;See "Releasing an ActiveX Component" later in this chapter.</P></li>
<li>
Create error-handlers.<p class=tl>
<B><b>For more information</b></B>&nbsp;&nbsp;&nbsp;See "Handling Run-Time Errors in ActiveX Components" later in this chapter.</P></li>
</ol>
<p>
For example, suppose you have created a form with three text boxes (Text1, Text2, and Text3) and a command button (Command1), and added a reference in your project to the Microsoft Excel 8.0 Object Library. You can then add code to the command button's Command1_Click event procedure that uses the Microsoft Excel Formula method to add two numbers entered in Text1 and Text2, displaying the result in Text3. (To avoid a type mismatch error, you may want to remove the default text value of each text box by setting its Text property to an empty string):</p>
<pre><code>Private Sub Command1_Click()
   ' Declare object variables for Microsoft Excel,
   ' application workbook, and worksheet objects.
   Dim xlApp As Excel.Application
   Dim xlBook As Excel.Workbook
   Dim xlSheet As Excel.Worksheet

   ' Assign object references to the variables. Use
   ' Add methods to create new workbook and worksheet
   ' objects.
   Set xlApp = New Excel.Application
   Set xlBook = xlApp.Workbooks.Add
   Set xlSheet = xlBook.Worksheets.Add
   
   ' Assign the values entered in the text boxes to
   ' Microsoft Excel cells.
   xlSheet.Cells(1, 1).Value = Text1.Text
   xlSheet.Cells(2, 1).Value = Text2.Text
   
   ' Use the Formula method to add the values in
   ' Microsoft Excel.
   xlSheet.Cells(3, 1).Formula = "=R1C1 + R2C1"
   Text3.Text = xlSheet.Cells(3, 1)
   
   ' Save the Worksheet.
   xlSheet.SaveAs "c:\Temp.xls"
   
   ' Close the Workbook
   xlBook.Close
   ' Close Microsoft Excel with the Quit method.
   xlApp.Quit
   
   ' Release the objects.
   Set xlApp = Nothing
   Set xlBook = Nothing
   Set xlSheet = Nothing
End Sub
</code></pre>
<p>
For simplicity, this example doesn't include error handling. However, it is highly recommended that you include error handling in applications that use objects provided by ActiveX components.</p>
</BODY>
</HTML>

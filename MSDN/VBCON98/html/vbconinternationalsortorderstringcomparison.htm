<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>International Sort Order and String Comparison</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconinternationalsortorderstringcomparison"></a>International Sort Order and String Comparison</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vastmOptionCompare;vbconInternationalSortOrderStringComparisonC">
</object></p>
<p>
String comparison is widely used in Visual Basic. Using this functionality, however, may yield incorrect results if you overlook certain programming requirements.</p>
<h3>Sorting Text</h3>
<p>
<i>Sorting text</i> means ordering text according to language conventions. Format and font are irrelevant to the sorting process because both involve presentation rather than content. At first glance, sorting text looks simple: <i>a</i> precedes <i>b</i>, <i>b</i> precedes <i>c</i>, and so on. However, there are many languages that have more complex rules for sorting. Correct international sorting is not always a simple extension of sorting English text, and it requires a different understanding of the sorting process.</p>
<p>
Correct international sorting can imply <i>context-sensitive sorting</i>. Character contraction and expansion are the two important areas of context-sensitive sorting.
<ul type=disc>
<li>
<i>Character contraction</i> occurs when a two-character combination is treated as a single, unique letter. For example, in Spanish the two-character combination <i>ch</i> is a single, unique letter and sorts between <i>c</i> and <i>d</i>.<br><br></li>
<li>
<i>Character expansion </i>occurs in cases where one letter represents one character, but that one character sorts as if it were two. For example, <i>ß</i> (eszett) is equivalent to <i>ss</i> in both German/Germany and German/Switzerland locales. However, <i>ß</i> is equivalent to <i>sz</i> in the German/Austria locale.</li>
</ul>
<p>
Before implementing the sorting order, you must consider code pages. A <i>code page</i> is an ordered character set that has a numeric index (code point) associated with each character. Because there are various code pages, a single code point might represent different characters in different code pages. While most code pages share the code points 32 through 127 (ASCII character set), they differ beyond that. Typically, the ordering of any additional letters in these code pages is not alphabetic.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "DBCS Sort Order and String Comparison" later in this chapter for more information about working with East Asian languages.</p>
<h3>String Comparison in Visual Basic</h3>
<p>
String comparison rules are different for each locale. Visual Basic provides a number of tools, such as Like and StrComp, which are locale-aware. To use these effectively, however, the Option Compare statement must first be clearly understood.</p>
<h4>Comparing Strings with the Option Compare Statement</h4>
<p>
When using this statement, you must specify a string comparison method: either Binary or Text for a given module. If you specify Binary, comparisons are done according to a sort order derived from the internal binary representations of the characters. If you specify Text, comparisons are done according to the case-insensitive textual sort order determined by the user's system locale. The default text comparison method is Binary.</p>
<p>
In the following code example, the user enters information into two input boxes. The information is then compared and sorted in the appropriate alphabetic order.</p>
<pre><code>Private Sub Form_Click ()
Dim name1 As String, name2 As String
   name1 = InputBox("Enter 1st hardware name here:")
   name2 = InputBox("Enter 2nd hardware name here:")
If name1 &lt; name2 Then
   msg = " ' " &amp; name1 &amp; " ' comes before ' " &amp; _
   name2 &amp; " ' "
Else
   msg = " ' " &amp; name2 &amp; " ' comes before ' " &amp; _
   name1 &amp; " ' "
End If
   MsgBox msg
End Sub
</code></pre>
<p>
If this code is run in an English/U.S. locale, the message box will contain the following output if the user enters <code>printer</code> and <code>Screen</code>:</p>
<pre><code>'Screen' comes before 'printer'
</code></pre>
<p>
This result is based on the fact that the default text-comparison method is Binary. Because the internal binary representation of uppercase <i>S</i> is smaller than the one for lowercase <i>p</i>, the conditional statement Screen &lt; printer is verified. When you add the Option Compare Text statement in the Declarations section of a module, Visual Basic compares the two strings on a case-insensitive basis, resulting in the following output:</p>
<pre><code>'printer' comes before 'Screen'
</code></pre>
<p>
If this code is run in a French/Canada locale, the message box will contain the following output if the user enters <code>imprimante</code> and <code>écran</code>:</p>
<pre><code>'imprimante' comes before 'écran'
</code></pre>
<p>
Similarly, if you add the Option Compare Text statement to your code, the two terms will appear in the right order — that is, <code>écran</code> will precede <code>imprimante</code>. In addition to being case insensitive, the comparison takes into account the accented characters, such as <i>é</i> in French, and places it right after its standard character — in this case, <i>e</i>, in the sorting order.</p>
<p>
If the user had entered <code>ecran</code> and <code>écran</code>, the output would be:</p>
<pre><code>'ecran' comes before 'écran'
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Option Compare Statement" in the <i>Language Reference</i>.</p>
<h4>Comparing Strings with the Like Operator</h4>
<p>
You can use the Like operator to compare two strings. You can also use its pattern-matching capabilities. When you write international software, you must be aware of pattern-matching functions. When character ranges are used with Like, the specified pattern indicates a range of the sort ordering. For example, under the Binary method for string comparison (by default or by adding Option Compare Binary to your code), the range [A – C] would miss both uppercase accented <i>a</i> characters and all lower-case characters. Only strings starting with A, B, and C would match. This would not be acceptable in many languages. In German, for instance, the range would miss all the strings beginning with <i>Ä</i>. In French, none of the strings starting with <i>À</i> would be included.</p>
<p>
Under the Text method for string comparison, all the accented <i>A</i> and <i>a</i> characters would be included in the interval. In the French/France locale, however, strings starting with <i>Ç</i> or <i>ç </i>would not be included, since <i>Ç</i> and <i>ç </i>appear after <i>C</i> and <i>c </i>in the sort order.</p>
<p>
Using the [A – Z] range to check for all strings beginning with an alphabetic character is not a valid approach in certain locales. Under the Text method for string comparison, strings beginning with <i>Ø</i> and <i>ø</i> would not be included in the range if your application is running in a Danish/Denmark locale. Those two characters are part of the Danish alphabet, but they appear after <i>Z</i>. Therefore, you would need to add the letters after Z. For example, <code>Print "øl" Like "[A-Z]*"</code> would return False, but <code>Print "øl" Like "[A-ZØ]*"</code> would return True with the Option Compare Text statement.</p>
<h4>Comparing Strings with the StrComp Function</h4>
<p>
The StrComp function is useful when you want to compare strings. It returns a value that tells you whether one string is less than, equal to, or greater than another string. The return value is also based on the string comparison method (Binary or Text) you defined with the Option Compare statement. StrComp may give different results on the strings you compare, depending on the string comparison method you define.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "DBCS Sort Order and String Comparison" later in this chapter for more information about comparing strings in East Asian languages. See also "StrComp Function" in the <i>Language Reference</i>.</p>
</BODY>
</HTML>

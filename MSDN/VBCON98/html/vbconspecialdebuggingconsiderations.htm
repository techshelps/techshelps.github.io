<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Special Debugging Considerations</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconspecialdebuggingconsiderations"></a>Special Debugging Considerations</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vafctCommand;vbconSpecialDebuggingConsiderationsC">
</object></p>
<p>
Certain events that are a common part of using Microsoft Windows can pose special problems for debugging an application. It's important to be aware of these special problems so they don't confuse or complicate the debugging process.</p>
<p>
If you remain aware of how break mode can put events at odds with what your application expects, you can usually find solutions. In some event procedures, you may need to use <code>Debug.Print</code> statements to monitor values of variables or properties instead of using watch expressions or breakpoints. You may also need to change the values of variables that depend on the sequence of events. This is discussed in the following topics.</p>
<h2>Breaking Execution During MouseDown</h2>
<p>
If you break execution during a MouseDown event procedure, you may release the mouse button or use the mouse to do any number of tasks. When you continue execution, however, the application assumes that the mouse button is still pressed down. You don't get a MouseUp event until you press the mouse button down again and then release it.</p>
<p>
When you press the mouse button down during run time, you break execution in the MouseDown event procedure again, assuming you have a breakpoint there. In this scenario, you never get to the MouseUp event. The solution is usually to remove the breakpoint in the MouseDown procedure.</p>
<h2>Breaking Execution During KeyDown</h2>
<p>
If you break execution during a KeyDown procedure, similar considerations apply. If you retain a breakpoint in a KeyDown procedure, you may never get a KeyUp event. (KeyDown and KeyUp are described in "Responding to Mouse and Keyboard Events.")</p>
<h2>Breaking Execution During GotFocus or LostFocus</h2>
<p>
If you break execution during a GotFocus or LostFocus event procedure, the timing of system messages can cause inconsistent results. Use a <code>Debug.Print</code> statement instead of a breakpoint in GotFocus or LostFocus event procedures.</p>
<h2>Modal Dialogs and Message Boxes Suppress Events</h2>
<p>
The development environment cannot raise events while a modal form or message box is displayed, because of potential conflicts in the debugger. Therefore, events are suppressed until the modal form or message box is dismissed.</p>
<p>
Important Suppression of events only happens in the development environment. Once a project is compiled, events will be raised even when a modal form or message box is displayed.</p>
<p>
Some example scenarios in which this can occur:
<ul type=disc>
<li>
A form with a Timer control on it is running in the development environment. Selecting Options from the Tools menu will open the Options dialog box, which is modal. Until the dialog is dismissed, the Timer control's Timer event will not be raised.<br><br></li>
<li>
An instance of a UserControl with a Timer control on it is placed on a form at design time. (The timer may be used to make the control appear animated; this effect can occur even in design mode, because controls can execute code at design time.) Selecting Add Class Module from the Project menu will open the Add Class Module dialog, which is modal. The Timer control's Timer event will be suppressed until the dialog is dismissed.<br><br></li>
<li>
A UserDocument contains a Timer control, and a command button that displays a message box. If the UserDocument is being debugged using Internet Explorer, pressing the button to display the message box will cause the Timer control's Timer event to be suppressed until the message box is dismissed.</li>
</ul>
<h2>Testing and Using Command-Line Arguments</h2>
<p>
You can choose to have your application use command-line arguments, which provide data to your application at startup. The user can enter them by choosing the operating environment's Run command, and then typing arguments after the application name. You can also use command-line arguments when creating an icon for the application.</p>
<p>
For example, suppose you create an alarm clock application. One of the techniques for setting the alarm time is to let the user type in the selected time directly. The user might enter the following string in the Run dialog box:</p>
<pre><code>Alarm 11:00:00
</code></pre>
<p>
The Command function returns all arguments entered after the application name (in this case, Alarm). The Alarm application has only one argument, so in the application code, you can assign this argument directly to the string that stores the selected time:</p>
<pre><code>AlarmTime = Command
</code></pre>
<p>
If Command returns an empty string, there are no command-line arguments. The application must either ask for the information directly or select a default action.</p>
<p>
To test code that uses Command, you can specify sample command-line arguments from within the Visual Basic environment. The application evaluates sample command-line input the same way it does if the user types the argument.</p>
<p class=label>
<b>To set sample command-line arguments</b>
<ol>
<li>
From the <b>Project</b> menu, choose <b>Properties</b>.<br><br></li>
<li>
Click the <b>Make</b> tab on the <b>Project Properties</b> dialog box.<br><br></li>
<li>
Enter the sample arguments in the <b>Command Line Arguments</b> field. (Do not type the name of the application itself.)<br><br></li>
<li>
Choose <b>OK</b>.<br><br></li>
<li>
Run the application.</li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Command Function."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Multiple Threads of Execution</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingmultiplethreadsofexecution"></a>Using Multiple Threads of Execution</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingMultipleThreadsOfExecutionC">
</object></p>
<p>
Multithreading on a single-processor machine may not provide quite the results you expect. Consider, for example, the two methods shown in Figure 8.8.</p>
<p class=label>
<b>Figure 8.8&nbsp;&nbsp; Multithreaded method calls may appear to be slower</b></p>
<p>
<img src="avtcm100.gif" border=0></p>
<p>
Method A and method B are called at the same time. In a single-threaded component, the requests are serialized, so that B doesn’t begin until A has finished. With multithreading, the two active threads duel for the processor’s attention.</p>
<p>
Not only does the perceived average completion time increase, but more processor time is spent switching between threads.</p>
<p>
The problem is that method A and method B take about the same amount of time. On a single-processor machine, multithreading results in a perceived performance improvement only with a mix of long and short tasks.</p>
<p>
For example, if method B required only three time slices to complete, the user of the system would perceive a huge improvement in the responsiveness of method B — and only a slight degradation in the time required to execute method A.</p>
<p>
The scenarios in which multithreading shows to best advantage are those in which most threads spend a substantial percentage of the time blocked — for example, waiting for file I/O — so that only one or two threads are actively executing code at any given time.</p>
<p>
<B><b>For More Information</b></B> &nbsp; Multithreading can be enabled in components marked for unattended execution (that is, having no user interface), as described in "Scalability and Multithreading."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Your Own Collection Class: The House of Bricks</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingyourownclasscollectionthehouseofbricks"></a>Creating Your Own Collection Class: The House of Bricks</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingYourOwnClassCollectionTheHouseOfBricksC">
</object></p>
<p>
This topic continues the code example begun in "Public Collection Example: The House of Straw" and "Private Collection Example: The House of Sticks." You may want to read those topics before beginning this one.</p>
<p>
The most robust way to implement a collection is by making it a class module. In contrast to the preceding examples, moving all the code for object creation into the collection class follows good object design principles.</p>
<p>
This example uses the same form and the same Employee class module as the previous examples. Insert a new class module, and set its Name property to "Employees." Insert the following declarations and code into the new class module.</p>
<pre><code>Option Explicit
Private mcolEmployees As New Collection
</code></pre>
<p>
The Add, Count, and Delete methods of the Employees class are essentially the same as those of the old SmallBusiness class. You can simply remove them from the SmallBusiness class module, paste them into the Employees class module, and change their names.</p>
<p>
The names can change because it's no longer necessary to distinguish EmployeeAdd from, say, CustomerAdd. Each collection class you implement has its own Add method.</p>
<pre><code>' Methods of the Employees collection class.
Public Function Add(ByVal Name As String, _
ByVal Salary As Double) As Employee
   Dim empNew As New Employee
   Static intEmpNum As Integer
   ' Using With makes your code faster and more
   ' concise (.ID vs. empNew.ID).
   With empNew
      ' Generate a unique ID for the new employee.
      intEmpNum = intEmpNum + 1
      .ID = "E" &amp; Format$(intEmpNum, "00000")
      .Name = Name
      .Salary = Salary
      ' Add the Employee object reference to the
      ' collection, using the ID property as the key.
      mcolEmployees.Add empNew, .ID
   End With
   ' Return a reference to the new Employee.
   Set Add = empNew
End Function

Public Function Count() As Long
   Count = mcolEmployees.Count
End Function

Public Sub Delete(ByVal Index As Variant)
   mcolEmployees.Remove Index
End Sub
</code></pre>
<p>
The Employees method of the SmallBusiness object becomes the Item method of the collection class. It still delegates to the Collection object, in order to retrieve members by index or by key.</p>
<pre><code>' Method of the Employees collection class.
Public Function Item(ByVal Index As Variant) _
As Employee
   Set Item = mcolEmployees.Item(Index)
End Function
</code></pre>
<p>
There's a nice touch you can add here. By making Item the default method of the Employees class, you gain the ability to code <code>Employees("E00001")</code>, just as you could with the Collection object.</p>
<p class=label>
<b>To make Item the default property</b>
<ol>
<li>
On the <b>Tools</b> menu, click <b>Procedure Attributes</b> to open the <b>Procedure Attributes</b> dialog box. In <b>Name</b> box, select the Item method.<br><br></li>
<li>
Click <b>Advanced</b> to show the advanced features. In the <b>Procedure ID</b> box, select <b>(Default)</b> to make the Item method the default. Click <b>OK</b>.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;A class can have only one default member (property or method).</p></li>
</ol>
<h3>Enabling For Each … Next</h3>
<p>
Along with robustness, you get For Each … Next back. Once again you can delegate all the work to the Collection object, by adding the following method:</p>
<pre><code>' NewEnum must return the IUnknown interface of a
' collection's enumerator.
Public Function NewEnum() As IUnknown
   Set NewEnum = mcolEmployees.[_NewEnum]
End Function
</code></pre>
<p>
The important thing you're delegating to the Collection object is its <i>enumerator</i>. An enumerator is a small object that knows how to iterate through the items in a collection. You can't write an enumerator object with Visual Basic, but because the Employees class is based on a Collection object, you can return the Collection object's enumerator — which naturally enough knows how to enumerate the items the Collection object is holding.</p>
<p>
The square brackets around the Collection object's _NewEnum method are necessary because of the leading underscore in the method name. This leading underscore is a convention indicating that the method is hidden in the type library. You can't name your method _NewEnum, but you can hide it in the type library and give it the procedure ID that For Each … Next requires.</p>
<p class=label>
<b>To hide the NewEnum method and give it the necessary procedure ID</b>
<ol>
<li>
On the <b>Tools</b> menu, click <b>Procedure Attributes</b> to open the <b>Procedure Attributes</b> dialog box. In <b>Name</b> box, select the NewEnum method.<br><br></li>
<li>
Click <b>Advanced</b> to show the advanced features. Check <b>Hide this member</b> to make NewEnum hidden in the type library.<br><br></li>
<li>
In the <b>Procedure ID</b> box, type <b>–4</b> (minus four) to give NewEnum the procedure ID required by For Each … Next. Click <b>OK</b>.<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;In order for your collection classes to work with For Each … Next, you must provide a hidden NewEnum method with the correct procedure ID.</p></li>
</ol>
<h3>Not Much Left of the SmallBusiness Class</h3>
<p>
The SmallBusiness class will have considerably less code in it now. To replace the Collection object and all the methods you removed, there's a new declaration and a read-only property:</p>
<pre><code>Option Explicit
Private mEmployees As New Employees

Public Property Get Employees() As Employees
   Set Employees = mEmployees
End If
</code></pre>
<p>
This deserves a word of explanation. Suppose for a moment that you left out the Property Get, and simply declared <code>Public Employees As New Employees</code>.</p>
<p>
Everything would work fine as long as nobody made any mistakes, but what if you accidentally coded <code>Set sbMain.Employees = Nothing</code>? That's right, the Employees collection would be destroyed. By making Employees a read-only property, you avert that possibility.</p>
<h3>Changes to the Form</h3>
<p>
The code for the form module is very similar to the preceding example. You can use the same module-level declarations, and the Click event for the Close button is the same.</p>
<p>
The only change in most of the event procedures is replacing the old methods of the SmallBusiness class with the new methods of the Employees collection object:</p>
<pre><code>Private Sub cmdEmployeeAdd_Click()
   sbMain.Employees.Add txtName.Text, txtSalary.Text
   txtName.Text = ""
   txtSalary.Text = ""
   cmdListEmployees.Value = True
End Sub

Private Sub cmdEmployeeDelete_Click()
   ' Check to make sure there's an employee selected.
   If lstEmployees.ListIndex &gt; -1 Then
      ' The first six characters are the ID.
      sbMain.Employees.Delete _
      Left(lstEmployees.Text, 6)
   End If
   cmdListEmployees.Value = True
End Sub

Private Sub cmdListEmployees_Click()
   Dim emp As Employee
   lstEmployees.Clear
   For Each emp In sbMain.Employees
      lstEmployees.AddItem emp.ID &amp; ", " &amp; emp.Name _
      &amp; ", " &amp; emp.Salary
   Next
End Sub
</code></pre>
<p>
Notice that you can use For Each … Next again to list the employees.</p>
<p>
Run the project and verify that everything works. There's no code for the Trouble button this time, because encapsulation has banished trouble.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Read "The Visual Basic Collection Object" and "Collections in Visual Basic" for background on collections.</p>
<p>
The Class Builder utility included in the Professional and Enterprise editions will create collection classes for you.</p>
<p>
The lessons of the House of Straw, House of Sticks, and House of Bricks examples are summed up in "The Benefits of Good Object-Oriented Design."</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing the Microsoft Windows API</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaccessingmicrosoftwindowsapi"></a>Accessing the Microsoft Windows API</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAccessingMicrosoftWindowsAPIC">
</object></p>
<p>
You can gain access to the Windows API (or other outside DLLs) by declaring the external procedures within your Visual Basic application. After you declare a procedure, you can use it like any other language feature in the product.</p>
<p>
The most commonly used set of external procedures are those that make up Microsoft Windows itself. The Windows API contains thousands of functions, subs, types, and constants that you can declare and use in your projects. These procedures are written in the C language, however, so they must be declared before you can use them with Visual Basic. The declarations for DLL procedures can become fairly complex. While you can translate these yourself, the easiest way to access the Windows API is by using the predefined declares included with Visual Basic.</p>
<p>
The file Win32api.txt, located in the \Winapi subdirectory of the main Visual Basic directory, contains declarations for many of the Windows API procedures commonly used in Visual Basic. To use a function, type, or other feature from this file, simply copy it to your Visual Basic module. You can view and copy procedures from Win32api.txt by using the API Viewer application, or by loading the file in any text editor.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Windows API contains a vast amount of code. To find reference information on the procedures and other details included in this API set, refer to the Win32 SDK, included on the Microsoft Developer Network Library CD.</p>
<h2>Using the API Viewer Application</h2>
<p>
The API Viewer application enables you to browse through the declares, constants, and types included in any text file or Microsoft Jet database. After you find the procedure you want, you can copy the code to the Clipboard and paste it into your Visual Basic application. You can add as many procedures as you want to your application. </p>
<p class=label>
<b>The API Viewer application</b></p>
<p>
<img src="vb1vf91.gif" border=0></p>
<p class=label>
<b>To view an API file</b>
<ol>
<li>
From the Add-Ins menu, open the Add-In Manager and load <b>API Viewer</b>. <br><br></li>
<li>
Click <b>API Viewer</b> from the Add-Ins menu.<br><br></li>
<li>
Open the text or database file you want to view.<ul type=disc>
<li>
To load a text file into the viewer, click <b>File \ Load Text File</b> and choose the file you want to view.<br><br></li>
<li>
To load a database file, click <b>File \ Load Database File</b>.</li>
</ul>
</li>
<li>
Select the type of item you want to view from the <b>API Types</b> list. </li>
</ol>
<p class=indent>
<B><b>Note</b></B> &nbsp; You can have the API Viewer automatically display the last file you viewed in it, when it is opened, by selecting <b>View \ Load Last File</b>. </p>
<p class=label>
<b><br>
To add procedures to your Visual Basic code</b></p>
<ol>
<li>
Click the procedure you want to copy in the <b>Available Items</b> list.<br><br></li>
<li>
Click <b>Add</b>. The item appears in the Selected Items list.<br><br></li>
<li>
Indicate the scope of the item by clicking <b>Public</b> or <b>Private</b> in the Declare Scope group. <br><br></li>
<li>
To remove an entry from the Selected Items list box, click the item and click <b>Remove</b>.<br><br></li>
<li>
To remove all entries from the Selected Items list box, click <b>Clear</b>.<br>
</li>
</ol>
<p class=label>
<b>To copy the selected items to the clipboard</b></p>
<ol>
<li>
Click <b>Copy</b>. All of the items in the Selected Items list will be copied. <br><br></li>
<li>
Open your Visual Basic project and go to the module in which you want to place the API information. <br><br></li>
<li>
Position the insertion point where you want to paste the declarations, constants, and/or types, and then choose <b>Edit \</b> <b>Paste</b>.</li>
</ol>
<h2>Converting Text Files to Jet Database Files</h2>
<p>
To optimize speed, you can convert the Win32api.txt file into a Jet database file, because it is much faster to display the list when opening a database than when opening a text file.</p>
<p class=label>
<b>To convert a text file to a jet database file</b>
<ol>
<li>
Start the API Viewer application.<br><br></li>
<li>
Click <b>File \ Load Text File</b> and open the .txt file you want to convert. <br><br></li>
<li>
Click <b>File \ Convert Text to Database</b>.<br><br></li>
<li>
Choose the file name and location for your database file, then click <b>OK</b>.<br>
</li>
</ol>
<h2>Loading an API File Automatically from the Command Line</h2>
<p>
You can specify a text or database file on the command line for Apilod32.exe so that the file is automatically loaded when you start API Viewer. Use the following syntax to load the file you choose when you start the API Viewer application:</p>
<pre><code>Apilod32.exe {/T|/D} <i>filename</i>
</code></pre>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Argument</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>/T</td>
<td width=72%>API Viewer will load the file as a text file. /T must be uppercase.</td>
</tr>
<tr valign=top>
<td width=28%>/D</td>
<td width=72%>API Viewer will load the file as a database file. /D must be uppercase.</td>
</tr>
<tr valign=top>
<td width=28%><i>Filename</i></td>
<td width=72%>The path of the file you want to open.</td>
</tr>
</table><br>
<p>
There must be a space between /T or /D and the <i>filename</i> argument. An error message will be displayed if the file is not found. If you specify a file that is not a database or text file, an error message will be displayed when you try to load the file.</p>
<p class=indent>
<B><b>Tip</b></B> &nbsp; You can view a prompt that shows the parameters of the command line syntax by using a DOS window to navigate to the directory in which the API viewer application is installed, then typing <b>apiload /?</b>.</p>
<h2>Viewing the Win32api.txt file with a Text Editor</h2>
<p>
You can also load the Win32api.txt file in a text editor, such as Microsoft Word or WordPad, to locate the procedures you want to use. Again, you just copy the procedures from the file to a Visual Basic module to use them in your application.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Don't load the Win32api.txt file into a module. This is a large file, and it will consume a lot of memory in your application. You will generally use only a handful of declarations in your code, so selectively copying the declarations you need is much more efficient.</p>
<h2>Using Procedures from Other Sources</h2>
<p>
If you are attempting to call a procedure in a DLL that is not part of the operating system, you must determine the proper declaration for it. The topic "Declaring a DLL Procedure" explains the syntax of the Declare statement in detail.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you use Visual C++ (or a similar tool) to create DLLs that will be called by Visual Basic, use the __stdcall calling convention. Do not use the default calling convention (_cdecl).</p>
</BODY>
</HTML>

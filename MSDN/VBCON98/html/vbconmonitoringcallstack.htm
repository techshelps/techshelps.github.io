<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Monitoring the Call Stack</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmonitoringcallstack"></a>Monitoring the Call Stack</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconMonitoringCallStackC">
</object></p>
<p>
The Call Stack dialog box shows a list of all active procedure calls. <i>Active procedure calls </i>are the procedures in the application that were started but not completed.</p>
<p>
The Call Stack dialog box helps you trace the operation of an application as it executes a series of nested procedures. For example, an event procedure can call a second procedure, which can call a third procedure — all before the event procedure that started this chain is completed. Such nested procedure calls can be difficult to follow and can complicate the debugging process. Figure 13.17 shows the Call Stack dialog box.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you put the application in break mode during an idle loop, no entries appear in the Call Stack dialog box.</p>
<p class=label>
<b>Figure 13.17&nbsp;&nbsp;&nbsp;The Call Stack dialog box</b></p>
<p>
<img src="avp13017.gif" border=0></p>
<p>
You can display the Call Stack dialog box only when the application is in break mode.</p>
<p class=label>
<b>To display the Call Stack dialog box</b>
<ul type=disc>
<li>
From the <b>View</b> menu, choose <b>Call Stack</b>.<p class=tl>
-or-</P><p class=tl>
Click the <b>Call Stack</b> button on the <b>Debug</b> toolbar. (To display the Debug toolbar, right-click on the Visual Basic toolbar and select the <b>Debug</b> option.)</P><p class=tl>
-or-</P><p class=tl>
Press CTRL+L.</P><p class=tl>
-or-</P><p class=tl>
Click the button next to the Procedure box in the <b>Locals</b> window.</P></li>
</ul>
<h2>Tracing Nested Procedures</h2>
<p>
The Call Stack dialog box lists all the active procedure calls in a series of nested calls. It places the earliest active procedure call at the bottom of the list and adds subsequent procedure calls to the top of the list.</p>
<p>
The information given for each procedure begins with the module or form name, followed by the name of the called procedure. Because the Call Stack dialog box doesn't indicate the variable assigned to an instance of a form, it does not distinguish between multiple instances of forms or classes. For more information on multiple instances of a form, see "Programming with Objects" and "Multiple-Document Interface (MDI) Applications" in "Designing a User Interface."</p>
<p>
You can use the Call Stack dialog box to display the statement in a procedure that passes control of the application to the next procedure in the list.</p>
<p class=label>
<b>To display the statement that calls another procedure in the Calls Stack dialog box</b>
<ol>
<li>
In the <b>Call</b> <b>Stack</b> dialog box, select the procedure call you want to display.<br><br></li>
<li>
Choose the <b>Show</b> button.<p class=tl>
The dialog box is closed and the procedure appears in the Code window.</P></li>
</ol>
<p>
The cursor location in the Code window indicates the statement that calls the next procedure in the Call Stack dialog box. If you choose the current procedure in the Call Stack dialog box, the cursor appears at the current statement.</p>
<h2>Checking Recursive Procedures</h2>
<p>
The Call Stack dialog box can be useful in determining whether "Out of stack space" errors are caused by recursion. <i>Recursion</i> is the ability of a routine to call itself. You can test this by adding the following code to a form in a new project:</p>
<pre><code>Sub Main()
   Static intX As Integer
   intX = intX + 1
   Main
End Sub

Private Sub Form_Click()
   Main
End Sub
</code></pre>
<p>
Run the application, click the form, and wait for the "Out of stack space" error message. Choose the Debug button, and then choose Call Stack on the View menu. You'll see multiple calls to the Main procedure, as shown in Figure 13.18.</p>
<p class=label>
<b>Figure 13.18&nbsp;&nbsp;&nbsp;The Call Stack dialog box lists a recursive procedure</b></p>
<p>
<img src="avp13018.gif" border=0></p>
<p>
As a double check, highlight <code>intX</code> in the Code window, and choose Quick Watch from the Debug menu. The value for <code>intX</code> is the number of times the Main procedure executed before the break.</p>
</BODY>
</HTML>

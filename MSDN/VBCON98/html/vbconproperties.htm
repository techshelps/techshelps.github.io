<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Properties to a Class</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconproperties"></a>Adding Properties to a Class</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconPropertiesC">
</object></p>
<p>
The easiest way to define properties for a class is by adding public variables to the class module. For example, you could very easily create an Account class by declaring two public variables in a class module named Account:</p>
<pre><code>Public Balance As Double
Public Name As String
</code></pre>
<p>
This is pretty easy. It's just as easy to create private data for a class; simply declare a variable Private, and it will be accessible only from code within the class module:</p>
<pre><code>Private mstrMothersMaidenName As String
Private mintWithdrawalsMonthToDate As Integer
</code></pre>
<h3>Data Hiding</h3>
<p>
The ability to protect part of an object's data, while exposing the rest as properties, is called <i>data hiding.</i> This is one aspect of the object-oriented principle of encapsulation, as explained in "Classes: Putting User-Defined Types and Procedures Together."</p>
<p>
Data hiding means that you can make changes in the implementation of a class — for example, increasing the Account class's private variable <code>mintWithdrawalsMonthToDate</code> from an Integer to a Long — without affecting existing code that uses the Account object.</p>
<p>
Data hiding also allows you to define properties that are read-only. For example, you could use a Property Get procedure to return the value of the private variable containing the number of withdrawals in a month, while only incrementing the variable from within the Account object's code. Which brings us to property procedures.</p>
<h2>Property Procedures</h2>
<p>
Data hiding wouldn't be much use if the only way you could create properties was by declaring public variables. How much good would it do you to give the Account class a Type property, if any code that had a reference to an Account object could blithely set the account type to any value at all?</p>
<p>
Property procedures allow you to execute code when a property value is set or retrieved. For example, you might want to implement the Type property of the Account object as a pair of Property procedures:</p>
<pre><code>Public Enum AccountTypes
   atSavings = 1
   atChecking
   atLineOfCredit
End Enum

' Private data storage for the Type property.
Private mbytType As AccountTypes

Public Property Get Type() As AccountTypes
   Type = mbytType
End Property

Public Property Let Type(ByVal NewType As AccountTypes)
   Select Case NewType
      Case atChecking, atSavings, atLineOfCredit
         ' No need to do anything if NewType is valid.
      Case Else
         Err.Raise Number:=vbObjectError + 32112, _
         Description:="Invalid account type"
   End Select
   If mbytType &gt; NewType Then
      Err.Raise Number:=vbObjectError + 32113, _
      Description:="Cannot downgrade account type"
   Else
      mbytType = NewType
   End If
End Property
</code></pre>
<p>
Now suppose you have a variable named <code>acct</code> that contains a reference to an Account object. When the code <code>x = acct.Type</code> is executed, the Property Get procedure is invoked to return the value stored in the class module's private data member <code>mbytType</code>.</p>
<p>
When the code <code>acct.Type = atChecking</code> is executed, the Property Let is invoked. If the Account object is brand new, <code>mbytType</code> will be zero, and any valid account type can be assigned. If the current account type is atSavings, the account will be upgraded.</p>
<p>
However, if the current account type is atLineOfCredit, the Property Let will raise an error, preventing the downgrade. Likewise, if the code <code>acct.Type = 0</code> is executed, the Select statement in the Property Let will detect the invalid account type and raise an error.</p>
<p>
In short, <i>property procedures allow an object to protect and validate its own data</i>.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Are public variables good for anything, then? "Property Procedures vs. Public Variables" outlines the appropriate uses of both.</p>
<p>
The capabilities of property procedures are explored further in "Putting Property Procedures to Work for You."</p>
</BODY>
</HTML>

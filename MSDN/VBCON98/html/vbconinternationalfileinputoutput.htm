<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>International File Input/Output</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconinternationalfileinputoutput"></a>International File Input/Output</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconInternationalFileInputOutputC">
</object></p>
<p>
Locale is also an important consideration when working with file input and output in Visual Basic. Both the Print # and Write # statements can be used to work with data files, but they have distinct purposes.</p>
<h3>Print #</h3>
<p>
The Print # statement puts data into a file as the data is displayed on the screen, in a locale-aware format. For instance, date output uses the system Short Date format, and numeric values use the system decimal separator.</p>
<p>
The Input # statement cannot read locale-aware data in Visual Basic that has been written to a file with the Print # statement. To write locale-independent data that can be read by Visual Basic in any locale, use the Write # statement instead of the Print # statement.</p>
<h3>Write #</h3>
<p>
Like the Print # statement, the Write # statement puts data into a file in a fixed format, which ensures that the data can be read from the file in any locale when using the Input # statement. For instance, dates are written to the file using the universal date format, and numeric values are written to the file using the period as the decimal separator. In the following code example, a date and a numeric value are written to a file with the Write # statement. The same file is reopened later, its content is read with the Input # statement, and the results are printed in the Immediate window. The Long Date information is drawn from the system locale:</p>
<pre><code>Dim MyDate As Date, NewDate As Date
Dim MyNumber As Variant
   MyDate = #8/2/67#
   MyNumber = 123.45
Open "Testfile" for Output As #1
   Write #1, MyDate, MyNumber
Close #1

Open "Testfile" for Input As #1
   Input #1, MyDate, MyNumber
   NewDate = Format(Mydate, "Long Date")
Debug.Print NewDate, MyNumber
Close #1
</code></pre>
<p>
When you run this code in an English/U.S. locale, the following output appears in the Immediate window:</p>
<pre><code>Wednesday, August 02, 1967      123.45
</code></pre>
<p>
When you run this code in a French/France locale, the following output appears in the Immediate window:</p>
<pre><code>mercredi 2 août 1967            123,45
</code></pre>
<p>
In both locales, the output is accurate — that is, the information was stored and retrieved properly using the Write # and Input # statements.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For background information on processing files, see "Working with Files" in "Processing Drives, Folders, and Files." See also "Print # Statement" or "Write # Statement" in the <i>Language Reference.</i></p>
</BODY>
</HTML>

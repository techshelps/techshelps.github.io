<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Standard Control Property Types</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingstandardcontrolpropertytypes"></a>Using Standard Control Property Types</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingStandardControlPropertyTypesC">
</object></p>
<p>
The code examples in the related topic "Exposing Properties of Constituent Controls" show the use of the standard types Font and OLE_COLOR to create properties that use standard, system-supplied property pages, which the user can access with the ellipsis button in the Properties window.</p>
<p>
Whenever possible, use the standard data types and enumerations provided by Visual Basic as data types of your control's properties. This makes life easy for your users, by presenting consistent property value choices in the Properties window.</p>
<h3>Standard Enumerations</h3>
<p>
The following code uses the standard enumeration for the MousePointer property.</p>
<pre><code>Public Property Get MousePointer() As _
      MousePointerConstants
   MousePointer = UserControl.MousePointer
End Property

Public Property Let MousePointer(ByVal NewPointer As _
      MousePointerConstants)
   UserControl.MousePointer = NewPointer
   PropertyChanged "MousePointer"
End Property
</code></pre>
<p>
When the MousePointer property appears in the Properties window, it will have the same enumeration as the MousePointer properties of other controls.</p>
<p>
You can use the Object Browser to determine what enumerations are available in the Visual Basic type libraries.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The purpose and importance of PropertyChanged are discussed in "Adding Properties to Controls," earlier in this chapter.</p>
<h3>Standard Data Types</h3>
<p>
Visual Basic provides four standard data types of special interest to control authors.</p>
<h4>OLE_COLOR</h4>
<p>
The OLE_COLOR data type is used for properties that return colors. When a property is declared as OLE_COLOR, the Properties window will display a color-picker dialog that allows the user to select the color for the property visually, rather than having to remember the numeric equivalent.</p>
<p>
An example of the use of OLE_COLOR can be found in "Exposing Properties of Constituent Controls."</p>
<p>
OLE_COLOR is treated internally as a Long.</p>
<h4>OLE_TRISTATE</h4>
<p>
The OLE_TRISTATE data type is used for three-state check boxes. If you're authoring a control with check box functionality, declare its Value property as OLE_TRISTATE.</p>
<p>
OLE_TRISTATE is an enumeration with the following values:
<ul type=disc>
<li>
0 - Unchecked<br><br></li>
<li>
1 - Checked<br><br></li>
<li>
2 - Gray</li>
</ul>
<h4>OLE_OPTEXCLUSIVE</h4>
<p>
If you're developing a control with option-button functionality, use the OLE_OPTEXCLUSIVE data type for the Value property of your control. This will cause your control's Value property to behave like that of the intrinsic OptionButton control. That is, when instances of your control are grouped, and the user clicks an unselected control instance, the currently selected instance's Value is automatically set to 0 (thus unselecting the button), and the Value of the clicked instance is set to 1.</p>
<p>
This behavior is handled by the container. The container checks the Value property for each control it contains, and groups those that are of type OLE_OPTEXCLUSIVE.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You must use the Procedure Attributes dialog box to make the Value property the default property, in order for the control host to enable the behavior described.</p>
<p>
OLE_OPTEXCLUSIVE is handled as a Boolean type internally.</p>
<h4>OLE_CANCELBOOL</h4>
<p>
Use this data type for an event argument that allows the user to cancel the event. For example, the standard KeyPress event passes a Cancel parameter as its last parameter. If the user sets this parameter to False, the event is canceled.</p>
<p>
OLE_CANCELBOOL is handled as a Boolean type internally.</p>
</BODY>
</HTML>

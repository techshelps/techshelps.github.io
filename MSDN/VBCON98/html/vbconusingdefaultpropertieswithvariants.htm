<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Default Properties</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingdefaultpropertieswithvariants"></a>Using Default Properties</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingDefaultPropertiesWithVariantsC">
</object></p>
<p>
Many objects have <i>default properties</i>. You can use default properties to simplify your code, because you don't have to refer explicitly to the property when setting its value. For an object where Value is the default property, these two statements are equivalent:</p>
<pre><code>object = 20
</code></pre>
<p class=tl>
and</P><pre><code>object.Value = 20
</code></pre>
<p>
To see how this works, draw a command button and a text box on a form. Add the following statement to the command button's Click event:</p>
<pre><code>Text1 = "hello"
</code></pre>
<p>
Run the application and click the command button. Because Text is the default property of the text box, the text box will display the text, "hello."</p>
<h2>Using Default Properties with Object Variables</h2>
<p>
When a reference to an object is stored in an object variable, you can still use the default property. The following code fragment demonstrates this.</p>
<pre><code>Private Sub Command1_Click()
   Dim obj As Object
   ' Place a reference to Text1 in the object
   '   variable.
   Set obj = Text1
   ' Set the value of the default property (Text).
   obj = "hello"
End Sub
</code></pre>
<p>
In the code above, <code>obj = "hello"</code> is exactly the same as typing <code>obj.Text = "hello"</code>.</p>
<h2>Using Default Properties with Variants</h2>
<p>
Accessing default properties is different when an object reference is stored in a variable of type Variant, instead of in an object variable. This is because a Variant can contain data of many different types.</p>
<p>
For example, you can read the default property of Text1 using a reference in a Variant, but trying to assign the string "goodbye" to the default property doesn't work. Instead, it replaces the object reference with the string, and changes the Variant type.</p>
<p>
To see how this works, enter the following code in the Click event of the command button from the previous example:</p>
<pre><code>Private Sub Command1_Click()
   Dim vnt As Variant
   ' Set the default property (Text) to "hello".
   Text1 = "hello"
   ' Place a reference to Text1 in the Variant.
   Set vnt = Text1
   ' Display the default property of Text1, and show
   '   that the Variant contains an object reference.
   MsgBox vnt, , "IsObject? " &amp; IsObject(vnt)
   ' Attempt to set the default property of Text1.
   vnt = "goodbye"
   MsgBox vnt, , "IsObject? " &amp; IsObject(vnt)
End Sub
</code></pre>
<p>
When you run the application and click the command button, you first get a message box displaying the current value of the default property of Text1, "hello," which you can verify by looking at Text1. The caption of the message box confirms that the Variant contains an object reference — that is, a reference to Text1.</p>
<p>
When you click the OK button on the message box, "goodbye" is assigned to the Variant, destroying the reference to Text1. Another message box is then displayed, showing the contents of the Variant — which as you can see doesn't match the current value of Text1.Text.</p>
<p>
The caption of the message box confirms that the Variant no longer contains an object reference — it now contains the string "goodbye."</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For details on Variants and other data types, see "Introduction to Variables, Constants, and Data Types" in "Programming Fundamentals."</p>
<p>
Other aspects of using objects with Variants are discussed in "The Visual Basic Collection Object."</p>
</BODY>
</HTML>

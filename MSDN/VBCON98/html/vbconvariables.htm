<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Variables</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconvariables"></a>Variables</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconVariablesC">
</object></p>
<p>
In Visual Basic, you use variables to temporarily store values during the execution of an application. Variables have a name (the word you use to refer to the value the variable contains) and a data type (which determines the kind of data the variable can store).</p>
<p>
You can think of a variable as a placeholder in memory for an unknown value. For example, imagine you are creating a program for a fruit stand to track the sales of apples. You don't know the price of an apple or the quantity sold until the sale actually occurs. You can use two variables to hold the unknown values — let's name them ApplePrice and ApplesSold. Each time the program is run, the user supplies the values for the two variables. To calculate the total sales and display it in a Textbox named txtSales, your code would look like this:</p>
<pre><code>txtSales.txt = ApplePrice * ApplesSold
</code></pre>
<p>
The expression returns a different total each time, depending on what values the user provides. The variables allow you to make a calculation without having to know in advance what the actual inputs are.</p>
<p>
In this example, the data type of ApplePrice is Currency; the data type of ApplesSold is an integer. Variables can represent many other values as well: text values, dates, various numeric types, even objects.</p>
<h2>Storing and Retrieving Data in Variables</h2>
<p>
You use assignment statements to perform calculations and assign the result to a variable:</p>
<pre><code>ApplesSold = 10      ' The value 10 is passed to the 
                  ' variable.
ApplesSold = ApplesSold + 1      ' The variable is 
                              ' incremented.
</code></pre>
<p>
Note that the equal sign in this example is an assignment operator, not an equality operator; the value (10) is being assigned to the variable (ApplesSold).</p>
<h2>Declaring Variables</h2>
<p>
To declare a variable is to tell the program about it in advance. You declare a variable with the Dim statement, supplying a name for the variable:</p>
<p>
<b>Dim</b> <i>variablename</i> [<b>As</b> <i>type</i>]</p>
<p>
Variables declared with the Dim statement within a procedure exist only as long as the procedure is executing. When the procedure finishes, the value of the variable disappears. In addition, the value of a variable in a procedure is <i>local</i> to that procedure — that is, you can't access a variable in one procedure from another procedure. These characteristics allow you to use the same variable names in different procedures without worrying about conflicts or accidental changes.</p>
<p>
A variable name:
<ul type=disc>
<li>
Must begin with a letter.<br><br></li>
<li>
Can't contain an embedded period or embedded type-declaration character.<br><br></li>
<li>
Must not exceed 255 characters.<br><br></li>
<li>
Must be unique within the same <i>scope,</i> which is the range from which the variable can be referenced — a procedure, a form, and so on.</li>
</ul>
<p>
The optional As <i>type</i> clause in the Dim statement allows you to define the data type or object type of the variable you are declaring. Data types define the type of information the variable stores. Some examples of data types include String, Integer, and Currency. Variables can also contain objects from Visual Basic or other applications. Examples of Visual Basic object types, or classes, include Object, Form1, and TextBox. </p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on objects, see "Programming with Objects" and "Programming with Components." Data types are discussed in detail in the section, "Data Types," later in this chapter.</p>
<p>
There are other ways to declare variables:
<ul type=disc>
<li>
Declaring a variable in the Declarations section of a form, standard, or class module, rather than within a procedure, makes the variable available to all the procedures in the module.<br><br></li>
<li>
Declaring a variable using the Public keyword makes it available throughout your application.<br><br></li>
<li>
Declaring a local variable using the Static keyword preserves its value even when a procedure ends.</li>
</ul>
<h2>Implicit Declaration</h2>
<p>
You don't have to declare a variable before using it. For example, you could write a function where you don't need to declare <code>TempVal</code> before using it:</p>
<pre><code>Function SafeSqr(num)
   TempVal = Abs(num)
   SafeSqr = Sqr(TempVal)
End Function
</code></pre>
<p>
Visual Basic automatically creates a variable with that name, which you can use as if you had explicitly declared it. While this is convenient, it can lead to subtle errors in your code if you misspell a variable name. For example, suppose that this was the function you wrote:</p>
<pre><code>Function SafeSqr(num)
   TempVal = Abs(num)
   SafeSqr = Sqr(TemVal)
End Function
</code></pre>
<p>
At first glance, this looks the same. But because the <code>TempVal</code> variable was misspelled on the next-to-last line, this function will always return zero. When Visual Basic encounters a new name, it can't determine whether you actually meant to implicitly declare a new variable or you just misspelled an existing variable name, so it creates a new variable with that name.</p>
<h2>Explicit Declaration</h2>
<p>
To avoid the problem of misnaming variables, you can stipulate that Visual Basic always warn you whenever it encounters a name not declared explicitly as a variable.</p>
<p class=label>
<b>To explicitly declare variables</b>
<ul type=disc>
<li>
Place this statement in the Declarations section of a class, form, or standard module:<pre><code>Option Explicit</code></pre>
<p class=tl>
–or–</P><p class=tl>
From the <b>Tools</b> menu, choose <b>Options</b>, click the <b>Editor</b> tab and check the <b>Require Variable Declaration</b> option. This automatically inserts the Option Explicit statement in any new modules, but not in modules already created; therefore, you must manually add Option Explicit to any existing modules within a project.</P></li>
</ul>
<p>
Had this statement been in effect for the form or standard module containing the SafeSqr function, Visual Basic would have recognized <code>TempVal</code> and <code>TemVal</code> as undeclared variables and generated errors for both of them. You could then explicitly declare <code>TempVal</code>:</p>
<pre><code>Function SafeSqr(num)
   Dim TempVal
   TempVal = Abs(num)
   SafeSqr = Sqr(TemVal)
End Function
</code></pre>
<p>
Now you'd understand the problem immediately because Visual Basic would display an error message for the incorrectly spelled <code>TemVal</code>. Because the Option Explicit statement helps you catch these kinds of errors, it's a good idea to use it with all your code.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Option Explicit statement operates on a per-module basis; it must be placed in the Declarations section of every form, standard, and class module for which you want Visual Basic to enforce explicit variable declarations. If you select Require Variable Declaration, Visual Basic inserts Option Explicit in all subsequent form, standard, and class modules, but does not add it to existing code. You must manually add Option Explicit to any existing modules within a project.</p>
</BODY>
</HTML>

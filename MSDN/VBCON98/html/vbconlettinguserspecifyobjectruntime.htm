<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Letting the User Specify Objects at Run Time</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlettinguserspecifyobjectruntime"></a>Letting the User Specify Objects at Run Time</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconLettingUserSpecifyObjectRunTimeC">
</object></p>
<p>
By displaying the Paste Special and Insert Object dialog boxes at run time, you can allow the user to create a variety of objects. You may do this when creating a document-centered application. In such an application, the user combines data from different applications to create a single document. For instance, this application might be a word processor in which the user might enter some text and then embed a spreadsheet and a chart using the Insert Object or Paste Special dialog box.</p>
<p>
You use the OLE container control's InsertObjDlg method to display the Insert Object dialog box, or you can use the PasteSpecialDlg method to display the Paste Special dialog. These two dialogs let the user make decisions about what goes into the OLE container control.
<ul type=disc>
<li>
The Insert Object dialog box presents a list of available objects and creates an object based on the user's selection.<br><br></li>
<li>
The Paste Special dialog box allows the user to paste an object from the system Clipboard into an OLE container control.</li>
</ul>
<p>
You can display these dialog boxes at run time by calling the appropriate method on an event — for instance, a menu's Click event:</p>
<pre><code>Private Sub cmdInsert_Click ()
   ' Display Insert Object dialog box.
   oleObj1.InsertObjDlg
   ' Check to make sure object was created with the
   ' OLEType property.
   If oleObj1.OLEType = vbOLENone Then
      MsgBox "Object Not Created."
   End If
End Sub

Private Sub oleObj1_Click ()
   ' Determine if the data contained on the Clipboard 
   ' can be pasted into the OLE container control.
   If oleObj1.PasteOK Then
      ' Display Paste Special dialog box.
      oleObj1.PasteSpecialDlg
      ' Check to make sure object was created.
      If oleObj1.OLEType = vbOLENone Then
         MsgBox "Object Not Created."
      End If
   End If
End Sub
</code></pre>
<p>
Once the dialog box is displayed, you do not need to write more code to create the object. The user makes choices in the dialog box and chooses OK to create an object. If the user cancels a dialog, an object is not created.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Before displaying the Insert Object or Paste Special dialog box, you may want to determine the value of the OLEType property to see if the OLE container control contains a linked object, embedded object, or no object, as demonstrated in the preceding code example.</p>
<p class=indent>
The constant vbOLENone and other intrinsic constants are listed in the Visual Basic (VB) object library of the Object Browser.</p>
</BODY>
</HTML>

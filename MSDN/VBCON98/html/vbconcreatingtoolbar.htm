<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Toolbar</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingtoolbar"></a>Creating a Toolbar</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingToolbarC">
</object></p>
<p>
The <i>toolbar</i> (also called a ribbon or control bar) has become a standard feature in many Windows-based applications. A toolbar provides quick access to the most frequently used menu commands in an application. Creating a toolbar is easy and convenient using the toolbar control, which is available with the Professional and Enterprise editions of Visual Basic. If you are using the Learning Edition of Visual Basic, you can create toolbars manually as described in "Negotiating Menu and Toolbar Appearance" later in this chapter.</p>
<p>
The following example demonstrates creating a toolbar for an MDI application; the procedure for creating a toolbar on a standard form is basically the same.</p>
<p class=label>
<b>To manually create a toolbar</b>
<ol>
<li>
Place a picture box on the MDI form.<p class=tl>
The width of the picture box automatically stretches to fill the width of the MDI form's workspace. The workspace is the area inside a form's borders, not including the title bar, menu bar, or any toolbars, status bars, or scroll bars that may be on the form.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can place only those controls that support the Align property directly on an MDI form (the picture box is the only standard control that supports this property).</p></li>
<li>
Inside the picture box, place any controls you want to display on the toolbar.<p class=tl>
Typically, you create buttons for the toolbar using command buttons or image controls. Figure 6.16 shows a toolbar containing image controls.</P><p class=tl>
To add a control inside a picture box, click the control button in the toolbox, and then draw it inside the picture box.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When an MDI form contains a picture box, the internal area of the MDI form does not include the area of the picture box. For example, the ScaleHeight property of the MDI form returns the internal height of the MDI form, which does not include the height of the picture box.</p><p class=label>
<b>Figure 6.16&nbsp;&nbsp; You can create buttons for the toolbar using image controls</b>
<p>
<img src="avp06018.gif" border=0></P></li>
<li>
Set design-time properties.<p class=tl>
One advantage of using a toolbar is that you can present the user with a graphical representation of a command. The image control is a good choice as a toolbar button because you can use it to display a bitmap. Set its Picture property at design time to display a bitmap; this provides the user with a visual cue of the command performed when the button is clicked. You can also use <i>ToolTips</i>, which display the name of the toolbar button when a user rests the mouse pointer over a button, by setting the ToolTipText property for the button.</P></li>
<li>
Write code.<p class=tl>
Because toolbar buttons are frequently used to provide easy access to other commands, most of the time you call other procedures, such as a corresponding menu command, from within each button's Click event.</P></li>
</ol>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can use controls that are invisible at run time (such as the timer control) with an MDI form without displaying a toolbar. To do this, place a picture box on the MDI form, place the control in the picture box, and set the picture box's Visible property to False.</p>
<h2>Writing Code for Toolbars</h2>
<p>
Toolbars are used to provide the user with a quick way to access some of the application's commands. For example, the first button on the toolbar in Figure 6.16 is a shortcut for the File New command. There are now three places in the MDI NotePad sample application where the user can request a new file:
<ul type=disc>
<li>
On the MDI form (New on the MDI form File menu)<br><br></li>
<li>
On the child form (New on the child form File menu)<br><br></li>
<li>
On the toolbar (File New button)</li>
</ul>
<p>
Rather than duplicate this code three times, you can take the original code from the child form's mnuFileNew_Click event and place it in a public procedure in the child form. You can call this procedure from any of the preceding event procedures. Here's an example:</p>
<pre><code>' This routine is in a public procedure.
Public Sub FileNew ()
   Dim frmNewPad As New frmNotePad
   frmNewPad.Show
End Sub

' The user chooses New on the child form File menu.
Private Sub mnuchildFileNew_Click ()
   FileNew
End Sub

' The user chooses New on the MDI form File menu.
Private Sub mnumdiFileNew_Click ()
   frmNotePad.FileNew
End Sub

' The user clicks the File New button on the toolbar.
Private Sub btnFileNew_Click ()
   frmNotePad.FileNew
End Sub
</code></pre>
</BODY>
</HTML>

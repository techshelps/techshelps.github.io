<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Responding to Mouse and Keyboard Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconrespondingtomousekeyboardevents"></a>Responding to Mouse and Keyboard Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconRespondingToMouseKeyboardEventsC">
</object></p>
<p>
Your Visual Basic applications can respond to a variety of mouse events and keyboard events. For example, forms, picture boxes, and image controls can detect the position of the mouse pointer, can determine whether a left or right mouse button is being pressed, and can respond to different combinations of mouse buttons and SHIFT, CTRL, or ALT keys. Using the key events, you can program controls and forms to respond to various key actions or interpret and process ASCII characters.</p>
<p>
In addition, Visual Basic applications can support both event-driven drag-and-drop and OLE drag-and-drop features. You can use the Drag method with certain properties and events to enable operations such as dragging and dropping controls. OLE drag and drop gives your applications all the power you need to exchange data throughout the Windows environment — and much of this technology is available to your application without writing code.</p>
<p>
You can also use the mouse or keyboard to manage the processing of long background tasks, which allows your users to switch to other applications or interrupt background processing.</p>
<p>
Other actions and events that involve the mouse or keyboard (the Click and DblClick events, the Focus events, and the Scroll event) are not covered in this chapter. For more information on the Click and DblClick events, see the topics "Clicking Buttons to Perform Actions" and "Understanding Focus" in "Forms, Controls, and Menus," and see "Click Event" and “DblClick Event" in the <i>Language Reference</i>. Also see "Scroll Event." </p>
<h2>Topics</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=6%><a href="vbconrespondingtomouseevents.htm">&nbsp;<img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconrespondingtomouseevents.htm">Responding to Mouse Events</a><p>
How to use the MouseDown, MouseUp, and MouseMove events to control or enhance mouse action.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbcondetectingmousebuttons.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbcondetectingmousebuttons.htm">Detecting Mouse Buttons</a><p>
How to detect various mouse button states using the <i>button</i> argument.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbcondetectingshiftctrlaltstates.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbcondetectingshiftctrlaltstates.htm">Detecting SHIFT, CTRL, and ALT States</a><p>
How to detect various mouse button and SHIFT, CTRL, and ALT key states using the <i>shift</i> argument.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbcondraggingdropping.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbcondraggingdropping.htm">Dragging and Dropping</a><p>
Enabling event-driven drag-and-drop within your Visual Basic application.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconoledragdrop.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconoledragdrop.htm">OLE Drag and Drop</a><p>
How to use this powerful Windows technology to move or copy data from control to control within Visual Basic or from Visual Basic to other Windows applications, and vice versa.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconchangingshapeofmousepointer.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconchangingshapeofmousepointer.htm">Customizing the Mouse Pointer</a><p>
Changing the mouse pointer to inform the user about the state and functionality of your application.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconrespondingtokeyboardevents.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconrespondingtokeyboardevents.htm">Responding to Keyboard Events</a><p>
How to use the KeyDown, KeyUp, and KeyPress events to respond to various key actions or interpret and process ASCII characters.</p>
</td>
</tr>
<tr valign=top>
<td width=6%><a href="vbconbackgroundprocessing.htm"><img src="leaf.gif" border=0></a></td>
<td width=94%><a href="vbconbackgroundprocessing.htm">Interrupting Background Processing</a><p>
Managing intermittent and long-running background tasks.</p>
</td>
</tr>
</table><br>
<h2>Sample application</h2>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=6%><img src="sampapp.gif" border=0></td>
<td width=94%><b>Mouse.vbp</b><p>
Many of the code examples in this chapter are taken from the Mouse.vbp sample application. You'll find this application listed in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory.</p>
</td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating the CoffeeWatch Test Project</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontheclassmodule"></a>Creating the CoffeeWatch Test Project</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheClassModuleC">
</object></p>
<p>
"Out of process" means the component is running in a separate process from the client application. Therefore you need a separate process for your test program — which means starting another instance of the Visual Basic development environment.</p>
<p>
The following procedure creates the test program and adds a reference to the out-of-process Coffee component.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX EXE. It begins with the topic <a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a>.</p>
<p class=label>
<b>To create the CoffeeWatch test project</b>
<ol>
<li>
Use the Windows Start menu or the Explorer to open another instance of Visual Basic. On the <b>New Project</b> dialog box, double-click the <b>Standard EXE</b> icon to open a new Standard EXE project.<br><br></li>
<li>
On the <b>Project </b>menu, click <b>Project1 Properties</b> to open the <b>Project Properties</b> dialog box. Select the <b>General</b> tab, type <b>CoffeeWatch</b> in the <b>Project Name</b> box, then click <b>OK</b>.<br><br></li>
<li>
On the <b>Project</b> menu, click <b>References</b> to open the <b>References</b> dialog box. Check the entry for Coffee.vbp, as shown below, then click <b>OK</b>.<p>
<img src="avtcm122.gif" border=0></P><p class=tl>
You can tell the entries apart by observing the Location in the information panel at the bottom of the dialog box.</P><p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;You must check the entry for the project file (.vbp) in order to debug the project in the development environment. If you set a reference to the .exe file, visible just above the .vbp entry in the figure above, CoffeeWatch will obtain objects from an instance of the executable instead.</p></li>
<li>
Add two command buttons to Form1, and set their properties as shown in the following table:<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Object</b></td>
<td class=label width=29%><b>Property</b></td>
<td class=label width=41%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=30%>Command button</td>
<td width=29%>(Name)<br>
Caption</td>
<td width=41%>cmdModal<br>
Show Modal Form</td>
</tr>
<tr valign=top>
<td width=30%>Command button</td>
<td width=29%>(Name)<br>
Caption</td>
<td width=41%>cmdModeless<br>
Show Modeless Form</td>
</tr>
<tr valign=top>
<td width=30%>Form</td>
<td width=29%>Caption</td>
<td width=41%>CoffeeWatch</td>
</tr>
</table><br>
</li>
<li>
In the Declarations section of the code window for Form1, add the following declaration:<pre><code>Option Explicit
Private mcmnTest As CoffeeMonitor
</code></pre>
<p class=tl>
The prefix for the variable begins with the letter ‘m’ to indicate that this is a module-level variable. The letters ‘cmn’ were chosen to represent the CoffeeMonitor class type.</P></li>
<li>
Add the following code to the Load event for Form1:<pre><code>Private Sub Form_Load()
 &nbsp; Set mcmnTest = New CoffeeMonitor
End Sub
</code></pre>
</li>
<li>
Add the following code to the Click event procedures for the command buttons:<pre><code>Private Sub cmdModal_Click()
 &nbsp; mcmnTest.ShowForm cfeModal
End Sub

Private Sub cmdModeless_Click()
 &nbsp; mcmnTest.ShowForm cfeModeless
End Sub
</code></pre>
</li>
<li>
On the <b>File</b> menu, click <b>Save Project</b> to save the project files, using the following names. Visual Basic will provide the extensions automatically.<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>File</b></td>
<td class=label width=40%><b>File name</b></td>
<td class=label width=27%><b>Extension</b></td>
</tr>
<tr valign=top>
<td width=33%>Form</td>
<td width=40%>CoffeeWatch_Form1</td>
<td width=27%>.frm</td>
</tr>
<tr valign=top>
<td width=33%>Project</td>
<td width=40%>CoffeeWatch</td>
<td width=27%>.vbp</td>
</tr>
</table><br>
</li>
</ol>
<p>
If you have the Auto List Members option enabled, you’ve noticed that the methods of the CoffeeMonitor class appeared in the list of available classes. This is because the reference you established in step 3 made the Coffee component’s type library information available.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The Auto List Members option can be set on the Editor tab of the Options dialog box, available from the Tools menu.</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX EXE.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=40%><b>To</b></td>
<td class=label width=60%><b>See</b></td>
</tr>
<tr valign=top>
<td width=40%>Go to the next step</td>
<td width=60%><a href="vbconcreatingpropertiesmethods.htm">How Modal and Modeless Forms Behave Out of Process</a></td>
</tr>
<tr valign=top>
<td width=40%>Start from the beginning</td>
<td width=60%><a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a></td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Modal and Modeless Forms Behave Out of Process</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingpropertiesmethods"></a>How Modal and Modeless Forms Behave Out of Process</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingPropertiesMethodsC">
</object></p>
<p>
As mentioned in "Showing Forms from the CoffeeManager Class," modal and modeless forms displayed by an out-of-process component have a different relationship to a client application’s forms than they would if displayed by an in-process component. Running CoffeeWatch will demonstrate this.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX EXE. It begins with the topic <a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a>.</p>
<p class=label>
<b>To demonstrate modal and modeless form behavior with the out-of-process Coffee component</b>
<ol>
<li>
Press f5 to run the CoffeeWatch test program.<br><br></li>
<li>
Click <b>Show Modal Form</b> to display a modal form from the Coffee component.<p class=tl>
Depending on your system configuration, the order programs were started, and so on, the modal form may come up in front of CoffeeWatch — or you may see something like this:</P><p>
<img src="avtcm118.gif" border=0></P></li>
<li>
TestForm is not really modal with respect to the CoffeeWatch form. To see this, click anywhere on the <b>CoffeeWatch</b> form. The <b>Component Request Pending</b> dialog box appears, as shown here:<p>
<img src="avtcm119.gif" border=0></P><p class=tl>
The dialog box appears because CoffeeWatch is waiting on its call to <code>CoffeeMonitor.ShowForm</code>, which is waiting on the modal TestForm. However, if TestForm were truly modal with respect to Form1, clicking on Form1 would generate a system sound indicating that Form1 was disabled.</P></li>
<li>
Click <b>Switch To</b>, to bring <b>TestForm</b> to the front.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Depending on your system configuration and the order in which programs are loaded, the copy of Visual Basic in which Coffee is running may come to the front along with TestForm, obscuring CoffeeWatch.</p></li>
<li>
Click on <b>CoffeeWatch</b> again, to bring it to the front and display the <b>Component Request Pending</b> dialog box again.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you can’t see <b>CoffeeWatch</b> (the form, not the project), use the task bar (or press alt+tab) to bring it to the front.</p><p class=tl>
In the strict sense of the word, TestForm is modal to CoffeeWatch. That is, you can’t do anything with CoffeeWatch until TestForm is dismissed. However, because the two forms are in different processes, CoffeeWatch can appear on top of TestForm.</P></li>
<li>
Click <b>Switch To</b>, to bring <b>TestForm</b> to the front, and then click TestForm’s close box to dismiss the modal form.<br><br></li>
<li>
Click <b>Show Modeless Form</b> to show <b>TestForm</b> as a modeless form.<p class=tl>
TestForm behaves like a modeless form that’s not owned by CoffeeWatch. That is, it doesn’t stay on top of CoffeeWatch. You can verify this by clicking on each of the two forms, to bring them alternately to the front.</P><p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Because TestForm is in a different process from CoffeeWatch, you cannot make CoffeeWatch the owner of TestForm as you would if the forms were in the same process — that is, by passing a reference to CoffeeWatch in the OwnerForm argument of TestForm. For details see "Displaying Forms from Code Components," in "Building Code Components."</p></li>
<li>
DO NOT dismiss the modeless <b>TestForm</b>. Instead, close <b>CoffeeWatch</b> by clicking its close box.<p class=tl>
TestForm doesn’t close. (It may be hidden behind the instance of Visual Basic containing the CoffeeWatch project — use the task bar or alt+tab to bring it to the front.)</P><p class=tl>
This illustrates two important points: First, a form displayed by an out-of-process component is not dependent on the client application. Nor is its lifetime limited by the client’s lifetime.</P><p class=tl>
Second, a loaded form can keep an out-of-process component’s executable from unloading. For details, see "Starting and Ending a Component" in "General Principles of Component Design."</P><p class=tl>
In its Terminate event, CoffeeMonitor should unload any forms it has shown.</P></li>
<li>
Dismiss <b>TestForm</b> by clicking its close box. The Coffee component remains in run mode. To return Coffee to design mode, click the End button, or select <b>End</b> from the <b>Run</b> menu.<p class=tl>
Once you put an ActiveX EXE project in run mode, it remains in run mode. This is convenient for testing, but it’s different from the behavior of the made .exe. The executable for an out-of-process component unloads when the last client releases its last reference to an object provided by the component, as discussed in "Starting and Ending a Component."</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The only way to test the shutdown behavior of an out-of-process component is to test with the made executable.</p></li>
</ol>
<p>
The lesson to take away from all this is that out-of-process code components are generally not the best way to show forms.</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX EXE.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>To</b></td>
<td class=label width=63%><b>See</b></td>
</tr>
<tr valign=top>
<td width=37%>Go to the next step</td>
<td width=63%><a href="vbconaddingcodeforinitializeterminateevents.htm">Providing an Asynchronous Notification Event</a></td>
</tr>
<tr valign=top>
<td width=37%>Start from the beginning</td>
<td width=63%><a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a></td>
</tr>
</table><br>
</BODY>
</HTML>

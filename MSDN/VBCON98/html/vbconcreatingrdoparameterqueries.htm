<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating RDO Parameter Queries</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingrdoparameterqueries"></a>Creating RDO Parameter Queries</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingRDOParameterQueriesC">
</object></p>
<p>
If the SQL query you need to execute includes one or more parameters in the WHERE clause, you can use the rdoQuery object to run it and manage the parameters for each execution. This technique is especially useful when executing queries that are run repeatedly or against a number of connections — and especially when executing parameterized stored procedures.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can also build up your own queries, concatenating the parameters together to form a complete SQL statement. In some cases, this approach might be the only way that a parameter query <i>can</i> be created — especially in cases where the query is complex or uses the remote database syntax in an unusual way.</p>
<p>
In any case, the SQL statement you submit must use the correct syntax. Many problems associated with parameter queries result from improperly coding the native SQL required by the remote server or the ODBC SQL syntax as described below. Queries submitted with incorrect syntax can result in a variety of problems, including syntax errors returned from the remote engine or RDO's inability to create the rdoParameters collection.</p>
<h2>Managing Parameters with the rdoParameters Collection</h2>
<p>
When you want RDO to manage the parameters for you using the rdoParameters collection, you include a question mark for each parameter in your SQL statement. The "?" acts as a placeholder for input, output, and input/output query parameters; your code indicates which is which by setting the Direction property. RDO and the ODBC interface automatically manage these parameters and bind each to an rdoParameter object with a predefined data type. In some cases, your code might have to force a specific data type for certain parameters. This is especially true when your query contains a expression whose arguments are passed as parameters.</p>
<p>
When all parameters have been marked and identified, RDO and the ODBC interface automatically create a driver-specific SQL statement and an rdoParameters collection to manage the individual parameter values and data types. For the most part, you do not have to worry about quoting strings used as arguments or other special formatting.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When the rdoQuery object is created, no check is made for proper syntax. It is only when the query is executed or the rdoParameters collection is accessed that the query is compiled and its parameters evaluated. If the statement is not coded correctly, you can trigger a trappable 40054 "Invalid parameter was passed" error, or some other ODBC error. In some cases, the rdoParameters collection is not created, so when it is referenced, you might get a trappable error indicating that the object does not exist.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;While you might have discovered ODBC drivers for DAO (Access) databases in your list of available ODBC drivers, they are not ODBC Level II compliant. You can use RDO to submit queries and return result sets from this driver, but it is incapable of creating rdoParameter objects or managing query parameters as supported by Level II compliant drivers.</p>
<h2>Choosing the Right SQL Syntax for Parameter Queries</h2>
<p>
When coding the SQL property of an rdoQuery object or the <b><i>name</i></b> argument of the OpenResultset method, you can choose between one of three syntax styles to code your parameter query:
<ul type=disc>
<li>
<b>Concatenated Strings.</b> Your code builds up the SQL statement and its parameters using the Visual Basic concatenation (&amp;) operator. This statement can be passed to the <b><i>name</i></b> argument of the OpenResultset method or the rdoQuery object's SQL property. A concatenated string parameter query might look like this:<pre><code>sSQL = "Select Name, Age From Animals " _ 
&amp; " Where Weight &gt; " &amp; WeightWanted.Text _ 
&amp; " and Type = '" &amp; TypeWanted.Text &amp; "'"
</code></pre>
</li>
<li>
<b>Native SQL syntax.</b> The SQL syntax used by the remote server. You can execute your own query or stored procedure and pass in parameters by concatenation, placeholders, or both. The parameters marked with placeholders are managed by RDO as rdoParameter objects. A SQL parameter query might look like this:<pre><code>sSQL = "Select AU_LName from Authors" _ 
&amp; " Where AU_Fname = ?"</code></pre>
<p class=tl>
–&nbsp;or&nbsp;–</P><pre><code>sSQL = "Execute MyStoredProc 'Arg1', 450, '" _ 
&amp; Text1 &amp; "'"</code></pre>
<p class=tl>
–&nbsp;or&nbsp;–</P><pre><code>sSQL = "Execute MyStoredProc ?, ?, ?"
</code></pre>
</li>
<li>
<b>ODBC CALL syntax.</b> Designed to call stored procedures that return a return status or output parameters. A placeholder can be defined for each input, output, or input/output parameter; the placeholders are automatically mapped to rdoParameter objects. You can also mix in concatenated operators as needed. An ODBC CALL parameter query might look like this:<pre><code>sSQL = "{call ParameterTest (?,?,?) }"</code></pre>
<p class=tl>
–&nbsp;or&nbsp;–</P><pre><code>sSQL = "{? = call ParameterTest (?,?,?) }"</code></pre>
<p class=tl>
–&nbsp;or&nbsp;–</P><pre><code>sSQL = "{? = call CountAnimals (?, ?, 14, 'Pig')}
</code></pre>
</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The SQL Server ODBC driver requires that all nonbound parameters (the parameters you concatenate into the query in code) appear to the right of all placeholder parameters (those marked with a ?). If they don't, a trappable error occurs indicating "Wrong number of parameters."</p>
<h2>Benefits and Limitations of the ODBC CALL Syntax</h2>
<p>
There are a number of benefits to using the ODBC CALL syntax. For instance, ODBC uses an Open Data Systems Remote Procedure Call (ODS RPC) to perform the query. The parameters are passed in their <i>native</i> format and don't have to be parsed or converted into other data types. It also means that ODBC does not have to "prepare" the query for processing, as it already exists in the form of a stored procedure on the remote server. This makes these calls more efficient and allows for better portability across databases.</p>
<h2>Using rdExecDirect with Parameter Queries</h2>
<p>
The rdExecDirect option forces RDO to use the ODBC API SQLExecDirect function when executing the procedure. This bypasses the ODBC API SQLPrepare step, which is used to create a temporary procedure to execute the query. This option can be used in situations where the SQL syntax required is acceptable to the remote server but unacceptable to the ODBC interface. However, when executing a stored procedure <i>parameter</i> query, you should <i>not</i> use the rdExecDirect option because it prevents proper type binding of the parameters.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In some cases, the temporary stored procedures created by the ODBC interface might not be removed until the connection is closed. Using the rdExecDirect option can eliminate this problem.</p>
<h2>Summarizing the Syntax Options</h2>
<p>
The following table summarizes the options available when using each of the three syntax styles:</p>
<p class=label>
<b>Syntax Options</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Feature</b></td>
<td class=label width=22%><b>Native SQL syntax</b></td>
<td class=label width=22%><b>ODBC Call syntax</b></td>
<td class=label width=22%><b>Concatenated strings</b></td>
</tr>
<tr valign=top>
<td width=34%>Can pass native SQL that does not reference a stored procedure</td>
<td width=22%>Yes</td>
<td width=22%>No</td>
<td width=22%>Yes</td>
</tr>
<tr valign=top>
<td width=34%>Can execute stored procedures</td>
<td width=22%>Yes</td>
<td width=22%>Yes</td>
<td width=22%>Yes</td>
</tr>
<tr valign=top>
<td width=34%>Can use ? placeholders for parameters</td>
<td width=22%>Yes</td>
<td width=22%>Yes</td>
<td width=22%>No</td>
</tr>
<tr valign=top>
<td width=34%>Manage return value</td>
<td width=22%>No</td>
<td width=22%>Yes</td>
<td width=22%>No</td>
</tr>
<tr valign=top>
<td width=34%>Manage output arguments</td>
<td width=22%>No</td>
<td width=22%>Yes</td>
<td width=22%>No</td>
</tr>
<tr valign=top>
<td width=34%>SQL statement can include multiple Select statements?</td>
<td width=22%>Yes</td>
<td width=22%>No</td>
<td width=22%>Yes</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;RDO's ability to manage the parameters of your query in the RDO parameters collection is gated by the ODBC interface's ability to correctly parse the query and determine correct data types for each parameter. In some cases, it is impossible for the ODBC driver manager to properly identify each parameter of an SQL statement. In these cases, converting the statement into a stored procedure, even temporarily, might enable an otherwise unusable query.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;While the ODBC Call syntax can be used in situations where you pass no arguments, or have no returned arguments, you should generally use the it when you need to capture the stored procedure return status and output arguments.</p>
<h2>Coding a Typical Parameter Query</h2>
<p>
A parameter query simply substitutes user-supplied or application-supplied parameters into an ordinary query. While this query is usually a SELECT statement, it could be an INSERT, UPDATE, or DELETE query as well. The following example illustrates how to code a simple SELECT query with a single parameter. The query looks up authors by name from the Pubs sample database.</p>
<p>
First, set up an SQL query that marks each parameter using the ? parameter marker.</p>
<pre><code>QSQL$ = "SELECT * FROM Authors WHERE Au_Lname = ?"
</code></pre>
<p>
Next, create an rdoQuery object to manage the query and its parameters.</p>
<pre><code>Set PSAuthors = cn.CreateQuery("",QSQL$)
</code></pre>
<p>
Next, use the following code to insert the value entered by the user<code> </code>(<code>Text1.Text)</code> into the query.</p>
<pre><code>PSAuthors.rdoParameters(0) = Text1.Text
</code></pre>
<p>
Note that the rdoParameters object can be implied here, as it is the default collection of the rdoQuery object. The equivalent code would be:</p>
<pre><code>PSAuthors(0) = Text1.Text
</code></pre>
<p>
Next, create an rdoResultset to fetch the qualifying rows (those whose last name match the parameter value).</p>
<pre><code>Set MyRs = CpwPSAuthors.OpenResultset()
</code></pre>
<p>
If the user changes the parameter value in <code>Text1.Text</code>, you can re-apply the new parameter and re-execute the query by using the Requery method against the rdoResultset<code>(MyRs)</code> without having to rebuild the rdoQuery object.</p>
<pre><code>PSAuthors(0) = Text1.Text
MyRs.Requery
</code></pre>
<p>
When RDO executes the Requery method, it refreshes the parameter value(s) in the rdoParameters collection bound to the query parameters, flushes the current result set, sends the query to the data source for execution, and creates a new rdoResultset.</p>
<p>
Keep in mind that when the query is first created, RDO and the ODBC layers create a temporary stored procedure on the remote server designed to accept the parameters. Each time the query is executed, this temporary query is simply passed the new argument(s) and executed.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you used the rdAsyncEnable option with the OpenResultset method, use it also with the Requery method.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When executing stored procedures that do <i>not</i> require parameters, do not include the parenthesis in the SQL statement. For example, to execute the "MySP" procedure, which takes no parameters, use the following syntax:<code> </code></p>
<pre><code>{Call MySP }
</code></pre>
<p>
If the user changes the parameter value, you can re-apply the parameter value and re-execute the query by using the Requery method against the rdoResultset (<code>MyRs</code>).</p>
<pre><code>Cpw(0) = Text1.Text
MyRs.Requery
</code></pre>
<h2>Concatenating Parameters</h2>
<p>
You can also specify parameters in any SQL query by concatenating the parameters to the SQL statement string. For example, to submit a query using this technique, you can use the following code:</p>
<pre><code>QSQL = "SELECT * FROM Authors WHERE Au_Lname = '" _
 &amp; Text.Text &amp; "'"
Set MyRs = Cn.OpenResultSet(QSQL)
</code></pre>
<p>
In this case, the rdoParameters collection is <i>not</i> created and cannot be referenced. To change the query parameter, you must rebuild the SQL statement with the new parameter value each time the query is executed or before you use the Requery method. In addition, unless you use the rdExecDirect option, RDO creates a new temporary stored procedure to execute the query each time you use the OpenResultset method.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "rdoQuery Object," "rdoParameter Object," "Requery Method," and "OpenResultset Method" in the <i>Language Reference</i>". For additional information on stored procedures, see "Using RDO to Execute Stored Procedures."</p>
</BODY>
</HTML>

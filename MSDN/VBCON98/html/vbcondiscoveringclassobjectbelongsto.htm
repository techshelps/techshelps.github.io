<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Discovering the Class an Object Belongs To</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondiscoveringclassobjectbelongsto"></a>Discovering the Class an Object Belongs To</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDiscoveringClassObjectBelongsTo_C">
</object></p>
<p>
Generic object variables (that is, variables you declare As Object) can hold objects of many different classes. Similarly, variables declared with Visual Basic's built-in Form and Control types can contain forms and controls of different classes.</p>
<p>
When using variables of these types, you may need to take different actions based on the class of an object — for example, some objects may not support a particular property or method. Visual Basic provides two ways to do this: the TypeOf keyword and the TypeName function.</p>
<p>
The TypeOf keyword can only be used in If ... Then ... Else statements. You must include the class name directly in your code. For example, <code>If TypeOf MyControl Is CheckBox Then</code>.</p>
<p>
The TypeName function is more flexible. You can use it anywhere in your code, and because it returns the class name as a string, you can compare it to the value in a string variable.</p>
</BODY>
</HTML>

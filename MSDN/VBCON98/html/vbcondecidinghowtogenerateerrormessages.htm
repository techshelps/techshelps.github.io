<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deciding How to Generate Error Messages</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondecidinghowtogenerateerrormessages"></a>Deciding How to Generate Error Messages</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDecidingHowToGenerateErrorMessagesC">
</object></p>
<p>
When an application calls a method of an object your component provides, there are two general ways in which the method can provide error information.
<ul type=disc>
<li>
Basic-style: The method can raise an error. The client application can implement an error handler to trap errors that may be raised by the method.<br><br></li>
<li>
Windows API-style: The value returned by the method can be an error code. The client application can examine the return value to determine whether an error has occurred.</li>
</ul>
<p>
There are a number of programming tradeoffs to consider when you select an error generation strategy for your component, but the most important consideration should be the convenience of the developer who will use your component.</p>
<p>
For example, if your methods always return an error value, the developer using your component must use <i>in-line error handling,</i> that is, the developer must always test the return value after calling a method. This is the way Windows API calls work.</p>
<p>
If you raise errors, on the other hand, the developer has the choice of implementing in-line error handling (On Error Resume Next) or writing error-handling routines (On Error GoTo). This flexibility is a hallmark of the coding style familiar to Basic developers.</p>
<h2>Be Consistent</h2>
<p>
Whichever error generation strategy you adopt, be consistent. Developers will not appreciate having to test return values from some methods, and trap errors from others. The more difficult it is to use a component, the less benefit there is from re-using the code.</p>
<p>
If you decide to return error values instead of raising them, it’s better for all return values to be error codes. This means that if a method also returns a data value, you must use a ByRef parameter for the data. While this is an inconvenience for the user of the method, it’s less of an inconvenience than having to test the data type of a return value, to see whether it’s an error, before using it as a data value.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Client applications that use out-of-process components should always employ some form of error handling, because failures in the underlying cross-process communication layer will be raised as errors in the client application.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"Raising Errors from Your Component" discusses standards and techniques for raising errors from ActiveX components.</p>
</BODY>
</HTML>

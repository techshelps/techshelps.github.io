<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Combining Externally Creatable and Dependent Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcombiningexternallycreateabledependentobjects"></a>Combining Externally Creatable and Dependent Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCombiningExternallyCreateableDependentObjectsC">
</object></p>
<p>
The relationships between the externally creatable objects a component provides and the dependent objects they contain are expressed in the component’s object model. Once you’ve analyzed the functionality your component will provide, you can:
<ol>
<li>
Determine what objects you need to implement that functionality.<br><br></li>
<li>
List the properties and methods each object will require.<br><br></li>
<li>
Determine the relationships between the objects.<br><br></li>
<li>
Identify the top-level objects that need to be created by client applications.</li>
</ol>
<p>
Visual Basic gives you the flexibility to implement many possible object models. A component can provide several unrelated creatable objects, each containing one or more dependent objects; it can also provide a single hierarchy containing a number of objects, only one or two of which are externally creatable.</p>
<p>
One characteristic common to all of these implementations is that they require more design time. It’s important to spend adequate time and effort determining how your objects will interact and how they will be used designing your object model to avoid having to redefine objects, or split one object into two, in a future version of your component.</p>
<p>
Such changes make it much more difficult for applications that use your component to migrate to newer versions. Adding new objects, or exposing objects that were formerly private, does not cause such problems.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;"Using Properties and Collections to Create Object Models" discusses techniques for linking dependent and externally creatable objects in an object model.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Component Basics</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcomponentbasics"></a>Component Basics</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconComponentBasicsC">
</object></p>
<p>
A software component created with Microsoft Visual Basic is a file containing executable code — an .exe, .dll, or .ocx file — that provides objects other applications and components can use.</p>
<p>
An application or component that uses objects provided by other software components is referred to as a <i>client</i>. A client uses the services of a software component by creating instances of classes the component provides, and calling their properties and methods.</p>
<p>
In earlier versions of Visual Basic, you could create components called <i>OLE servers.</i> The features of components created with Visual Basic are greatly expanded, including the ability to raise events, improved support for asynchronous callbacks, and the ability to provide ActiveX controls and documents.</p>
<p>
The following topics provide key definitions and concepts you should be aware of when developing any software component using Visual Basic.
<ul type=disc>
<li>
<a href="vbconinprocessoutofprocesscomponents.htm">In-Process and Out-of-Process Components</a>&nbsp;&nbsp;&nbsp;Definitions and key differences.<br><br></li>
<li>
<a href="vbconwhatsinname.htm">What’s in a Name?</a>&nbsp;&nbsp;&nbsp;The names you choose for objects, events, properties, and methods affect the usability of your component.<br><br></li>
<li>
<a href="vbconsettingprojectoptions.htm">Choosing a Project Type and Setting Project Properties</a>&nbsp;&nbsp;&nbsp;Decide which project type to open when starting a new component, based on what features you intend the component to provide.<br><br></li>
<li>
<a href="vbconpolymorphisminterfaces.htm">Polymorphism, Interfaces, Type Libraries, and GUIDs</a>&nbsp;&nbsp;&nbsp;An interface of a class provided by your component is a contract between you and the user, documented in your type library. Classes can have multiple interfaces, identified by GUIDs.<br><br></li>
<li>
<a href="vbconstartingendingcomponent.htm">Starting and Ending a Component</a>&nbsp;&nbsp;&nbsp;Startup and shutdown rules all component designers need to know.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The core information on creating OLE servers, referred to as code components, includes "Creating an ActiveX DLL," "Creating an ActiveX EXE Component," "General Principles of Component Design," "Debugging, Testing, and Deploying Components," "Building Code Components," and "ActiveX Component Standards and Guidelines."</p>
</BODY>
</HTML>

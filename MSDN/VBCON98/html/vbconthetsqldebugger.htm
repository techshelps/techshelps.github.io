<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The T-SQL Debugger</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconthetsqldebugger"></a>The T-SQL Debugger</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTheTSQLDebuggerC">
</object></p>
<p>
The T-SQL debugger is integrated with the Data Environment designer. It allows you to interactively debug remote stored procedures written in Microsoft SQL Server's Transact SQL dialect, from within the Visual Basic development environment. Using the T-SQL debugger, you can:
<ul type=disc>
<li>
Display the SQL call stack, local variables, and parameters for the SQL stored procedure.<br><br></li>
<li>
Control and manage breakpoints.<br><br></li>
<li>
View and modify local variables and parameters.<br><br></li>
<li>
View global variables.</li>
</ul>
<h2>Setup and Compatibility</h2>
<p>
In order to use the T-SQL debugger, you must have SQL Server version 6.5 with Service Pack 3 or later installed as your database server. The debugger uses the functionality exposed by SQL Server's Sdi.dll, and exposes that functionality through Remote Automation.</p>
<p>
The client-side components of the T-SQL debugger are correctly installed and configured when you choose to install all the Enterprise tools in your Visual Basic installation. If it is necessary to repeat the setup process, select "Custom" from the CD Installation dialog box, and choose "Select All" for the Enterprise Tools selection.</p>
<h3>Server-Side Setup</h3>
<p>
With SQL Server version 6.5 and Service Pack 3 or later installed, you can install and register the SQL Debugger interface and Remote Automation component on the server. These components are located at \Program files\Common Files\Microsoft Shared\SQL Debugging. On Windows NT 4.0, simply run the setup program Sdi_nt4.exe.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;For setup on NT Server 3.51, you must manually copy and register the necessary files. Complete instructions for this process are included in the Readme.txt file in the \Program Files\Common Files\Microsoft Shared\SQL Debugging folder.</p>
<h2>Using the T-SQL Debugger</h2>
<p>
There are different methods you can use to invoke T-SQL debugging.
<ol>
<li>
To debug a stored procedure or batch query at design time, add the T-SQL Debugger Add-In via Visual Basic's Add-In Manager (on the Add-Ins menu). Then you can start the add-in by clicking <b>T-SQL Debugger</b> on the Add-Ins menu. You then simply select a DSN, and either <b>Stored Procedure</b> or <b>Batch SQL</b> and click the <b>Execute</b> button. This will invoke the debugger and allow you to debug the SQL you are interested in.<br><br></li>
<li>
To debug stored procedures while debugging Visual Basic code (run-time debugging), select <b>T-SQL Debugging Options</b> on Visual Basic's <b>Tools</b> menu. The options dialog box allows you to:<ul type=disc>
<li>
Turn on automatic step into stored procedures, which will bring up the T-SQL Debugger whenever you step into an ADO or RDO method that executes a stored procedure.<br><br></li>
<li>
Turn Safe Mode on, which will automatically roll back any design-time queries that you debug.<br><br></li>
<li>
Limit the number of rows that appear in the T-SQL Debugger output window when debugging design time queries.<br><br></li>
<li>
Set the login timeout value that the debugger uses to connect to the database, to get internal SQL State.</li>
</ul>
<p class=tl>
Once you have selected the <b>Automatically step into Stored Procedures</b> check box, if you step into (F8) a line of code that executes an ADO or RDO method that invokes a stored procedure, the debugger will automatically be started. You can then step through the stored procedure and then continue debugging your Visual Basic code.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;SQL Server will return from a stored procedure before it has finished executing if the stored procedure returns enough data to fill its buffers. If this happens, both the T-SQL Debugger and the Visual Basic debugger will be active at the same time. Your Visual Basic code must fetch the results from ADO or RDO before the stored procedure will complete its execution. If this happens, make sure your basic code reads the result sets by placing Visual Basic in Run Mode (F5) and setting breakpoints where you would like to stop execution. You can toggle back and forth between Visual Basic and the T-SQL Debugger by using the taskbar or using the ALT+TAB key combination.</p></li>
<li>
You can also launch the T-SQL Debugger:<ul type=disc>
<li>
From the Data Environment designer<br><br></li>
<li>
While stepping through ADO or RDO code<br><br></li>
<li>
By right-clicking a stored procedure in the Data View window and choosing the Debug command<br><br></li>
<li>
From the UserConnection designer</li>
</ul>
</li>
</ol>
<p>
Once you have started the debugger, it establishes the ODBC connection and displays the Enter Unassigned Parameters dialog box, as shown.</p>
<p class=label>
<b>Unassigned Parameters Dialog box</b></p>
<p>
<img src="avc03011.gif" border=0></p>
<p>
Enter values for any unassigned parameters in the Value field, then click OK. The T-SQL debugger interface appears and displays the text of the stored procedure:</p>
<p class=label>
<b>T-SQL Debugger Interface</b></p>
<p>
<img src="avc03012.gif" border=0></p>
<h2>Debugging Options</h2>
<p>
With the SQL statement displayed, several debugging options are available on the toolbar buttons and on the <b>Debug</b> menu. These options include:
<ul type=disc>
<li>
Go<br><br></li>
<li>
Set and clear breakpoints<br><br></li>
<li>
Step<br><br></li>
<li>
Step into subexpression<br><br></li>
<li>
Step over subexpression<br><br></li>
<li>
Run to cursor<br><br></li>
<li>
Stop debugging<br><br></li>
<li>
Restart</li>
</ul>
<h3>Views and Options</h3>
<p>
In addition to the code window containing the SQL statement you are debugging, the T-SQL debugger interface presents separate output windows for local and global variables, and for the output (result set) of the query. The View menu also allows you to open a separate Call Stack window and a Temp Table Dump window, so that you can examine these as the code executes.</p>
<p>
The Options menu lets you customize the appearance of the T-SQL debugger by changing the fonts and colors used for display.</p>
<h2>Exiting from the T-SQL Debugger</h2>
<p>
When you are finished with your debugging session, click Exit on the File menu to close the debugger. To execute a query again, click Restart on the Debug menu.</p>
<h2>Troubleshooting</h2>
<p>
If you are having problems getting T-SQL debugging to work, you will need to check the event log on the server. SDI.DLL will log events in the application section of the event viewer. COM or distributed COM errors will log events in the system section of the viewer.
<ul type=disc>
<li>
Make sure that the two computers can communicate with each other. The easiest mechanism to do this is by typing <b>ping</b> and the computer name of the client at a command prompt on the server if you are running TCP/IP. If this fails, fix the connectivity problem between the machines.<br><br></li>
<li>
Make sure the file SDI.DLL resides in the same directory as SQLSERVR.EXE. This will be in the binn sub-directory under the main SQL Server directory. The default is c:\mssql\binn.<br><br></li>
<li>
Ensure that the RPC services are started on the server machine. You do this by starting the control panel, opening the services application and checking that the Remote Procedure Call (&nbsp;RPC&nbsp;) Service is running and set to start automatically, as well as the Remote Procedure Call (&nbsp;RPC&nbsp;) Locator.<br><br></li>
<li>
Ensure that SQL Server is not set to log on as the SystemAccount. You do this by starting the control panel, opening the services application and double clicking on the MSSQLServer service. If the service is set to run as the SystemAccount, change this so the server will log on to a specific account that is valid to the domain that you are in. If debugging still fails, make sure that the account SQL Server started as has sufficient rights to launch an automation server on the client machine.<br><br></li>
<li>
If you see COM error 80080005 in the event log, make sure that you did not start remote automation (autmgr32) from the command prompt. Autmgr32.exe should only be running in the winstation of the account that SQL Server logged in as. Any other winstation will cause problems. If this is the case, close down autmgr32.exe via the task manager and let the sdi.dll and autprx32.dll load autmgr32 via COM.<br><br></li>
<li>
Make sure Remote Automation is successfully installed on the server and client machines, if both the client and server do not have Distributed COM (DCOM) installed and loaded.<br><br></li>
<li>
If your client system is running Windows NT 4.0 or later, run DCOMCNFG and make sure that everyone has launch and access permission for vbsdicli.exe.</li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding an Add-In Reference to the Vbaddin.ini File</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingaddinreferencetovbaddininifile"></a>Referencing Add-Ins</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingAddInReferenceToVBADDININIFileC">
</object></p>
<p>
Once an add-in is registered in the Windows system registry, you must set up a reference to it before it appears in the Add-In Manager and becomes useable to Visual Basic. There are two ways to do this:
<ul type=disc>
<li>
Create an entry in the <code>[Add-Ins32]</code> section of the Vbaddin.ini file.<br><br></li>
<li>
Create a reference with the Add-In designer.</li>
</ul>
<p>
Creating an Entry in the Vbaddin.ini File</p>
<p>
You can create the entry any way you like, but the most often used programmatic method is through the Windows API function WritePrivateProfileString. Here is example code demonstrating how to do this (the function's arguments are described after the example):</p>
<pre><code>Declare Function WritePrivateProfileString&amp; Lib _ 
"kernel32" Alias "WritePrivateProfileStringA" _ 
(ByVal AppName$, ByVal KeyName$, ByVal _ 
keydefault$, ByVal FileName$)

Sub AddToINI()
Dim rc As Long
   rc = WritePrivateProfileString("Add-Ins32", _ 
   "MyAddInProject.MyAddInClass", "0", _ 
   "VBADDIN.INI")
   MsgBox "Add-in is now entered in VBADDIN.INI file."
End Sub</code></pre>
<h2>What Do the Arguments Mean?</h2>
<p>
The first argument of <code>WritePrivateProfileString</code> is the name of the section of the .ini file in which to place the information. In the case of add-ins, this should always be <code>"Add-Ins32"</code>.</p>
<p>
The second argument is the programmatic ID, which consists of the names of your project and class, separated by a dot. The project name is entered in the <b>Properties</b> dialog box in the <b>Projects</b> menu. The class name is entered in the <b>Name</b> property of the class module. (Note that the name of the module plays no part in this.)</p>
<p>
The third argument is a value for the add-in’s entry in the Vbaddin.ini file — in this case, 0. Setting the entry to 1 means that the add-in will be loaded (that is, selected in the Add-In Manager) at IDE startup. Setting the entry to 0 means that it will not be loaded at IDE startup, but it will be included in the list of available add-ins in the Add-In Manager.</p>
<p>
The fourth and final argument is the name of the file to apply the setting to. In the case of add-ins, this is the Vbaddin.ini file.</p>
<h2>A More Friendly Name</h2>
<p>
While the name format of project.class (its programmatic ID) looks fine in the .ini file, it might be a bit confusing for users seeing it in the Add-In Manager’s add-in list. You can change this to a more friendly name.</p>
<p class=label>
<b>To change the add-in name that appears in the Add-In Manager</b>
<ol>
<li>
In Visual Basic, click the <b>View</b> menu, then click <b>Object Browser</b>.<br><br></li>
<li>
In the <b>Classes</b> list, right-click the name of the class which handles your add-in’s OnConnection and OnDisconnection events, then click <b>Properties</b>.<br><br></li>
<li>
In the <b>Member Options </b>dialog box, enter your friendly name in the <b>Description </b>box. Click <b>OK</b>.</li>
</ol>
<p>
The text you enter will be saved along with the add-in, so users will see the same description in their Add-In Manager once it’s installed on their system.</p>
<h2>Creating a reference with the Add-In designer</h2>
<p>
Another (and much easier) way to create a reference to an add-in is with the Add-In designer. To do this: 
<ol start=4>
<li>
Create a new Add-In project (if you haven't done so already), <br><br></li>
<li>
Double-click the Add-In designer "Connect" in the Project window. This brings up the Add-In designer.<br><br></li>
<li>
In Display Name, enter the name of your add-in that will later appear in the Add-In Manager dialog box.<br><br></li>
<li>
In Add-In Description, enter a description of what the add-in does.<br><br></li>
<li>
In Application and Application Version, choose the host application and its version, in this case, Visual Basic version 6.0.<br><br></li>
<li>
In Initial Load Behavior, choose how your add-in loads:<ul type=disc>
<li>
<b>Command Line/Startup:</b> Add-in loads either when specifically invoked from a command-line parameter, or when Visual Basic starts.<br><br></li>
<li>
<b>Command Line:</b> Add-in loads only when specifically invoked from a command-line parameter.<br><br></li>
<li>
<b>Startup:</b> Add-in loads when you start Visual Basic.<br><br></li>
<li>
<b>None:</b> Add-in doesn't load when you start Visual Basic.</li>
</ul>
</li>
<li>
Check "Add-In is command-line safe (Does not put up any UI)" if you wish your add-in to run without displaying any dialog boxes boxes or forms—that is, run "behind the scenes" without any visible interface.<br><br></li>
<li>
Select the <b>Advanced</b> tab to enter additional information on localization resources, and registry settings, if applicable.</li>
</ol>
<p>
Once the above information is filled out and you compile your project, your new add-in will appear in the Add-In Manager's list of available add-ins.</p>
</BODY>
</HTML>

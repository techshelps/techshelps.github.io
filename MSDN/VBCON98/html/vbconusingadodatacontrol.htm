<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the ADO Data Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingadodatacontrol"></a>Using the ADO Data Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscADOObjectModelSummary;mdmscADOProgrammingModelWithObjects;vbconUsingADODataControlC">
</object></p>
<p>
The ADO Data control uses Microsoft ActiveX Data Objects (ADO) to quickly create connections between data-bound controls and data providers. Data-bound controls are any controls that feature a DataSource property. Data providers can be any source written to the OLE DB specification. You can also easily create your own data provider using Visual Basic's class module.</p>
<p>
Although you can use the ActiveX Data Objects directly in your applications, the ADO Data control has the advantage of being a graphic control (with Back and Forward buttons) and an easy-to-use interface that allows you to create database applications with a minimum of code.</p>
<p class=label>
<b>Figure 7.4&nbsp;&nbsp;&nbsp;The ADO Data Control</b></p>
<p>
<img src="vb4nkt1.gif" border=0></p>
<p>
Several of the controls found in Visual Basic's Toolbox can be data-bound, including the CheckBox, ComboBox, Image, Label, ListBox, PictureBox, and TextBox controls. Additionally, Visual Basic includes several data-bound ActiveX controls such as the DataGrid, DataCombo, Chart, and DataList controls. You can also create your own data-bound ActiveX controls, or purchase controls from other vendors.</p>
<p>
Previous versions of Visual Basic featured the intrinsic Data control and the Remote Data control (RDC) for data access. Both controls are still included with Visual Basic for backward compatibility. However, because of the flexibility of ADO, it's recommended that new database applications be created using the ADO Data Control.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;A complete list of data-bound controls can be found in "Controls That Bind to the ADO Data Control." To find out how to use the intrinsic Data control or the Remote Data control, see "Using the Data Control" or "Using the Remote Data Control." For details about creating a data provider, see "Creating Data-Aware Classes."</p>
<h3>Possible Uses</h3>
<ul type=disc>
<li>
Connect to a local or remote database.<br><br></li>
<li>
Open a specified database table or define a set of records based on a Structured Query Language (SQL) query or stored procedure or view of the tables in that database.<br><br></li>
<li>
Pass data field values to data-bound controls, where you can display or change the values.<br><br></li>
<li>
Add new records or update a database based on any changes you make to data displayed in the bound controls.</li>
</ul>
<p>
To create a client, or front-end database application, add the ADO Data control to your forms just as you would any other Visual Basic control. You can have as many ADO Data controls on your form as you need. Be aware, however, that the control is a comparatively "expensive" method of creating connections, using at least two connections for the first control, and one more for each subsequent control.</p>
<h3>Creating a Front-end Database Application with Minimal Code</h3>
<p>
It's possible to create a database application using a minimum of code by setting a few properties at design time. If you are using an OLE DB data source, the Microsoft Data Link Name (.UDL) must be created on your machine. See "Creating the Northwind OLE DB Data Link" for a step-by-step example.</p>
<p class=label>
<b>To create a simple front-end database application</b>
<ol>
<li>
Draw an <b>ADO Data Control</b> on a form. (The icon's ToolTip is "ADODC.")<p class=tl>
If the control is not available in the Toolbox, press CTRL+T to display the <b>Components </b>dialog box. In the <b>Components </b>dialog, click <b>Microsoft ADO Data Control</b>.</P></li>
<li>
On the Toolbox, click the <b>ADO Data Control </b>to select it. Then press F4 to display the <b>Properties </b>window.<br><br></li>
<li>
In the <b>Properties</b> window, click <b>ConnectionString </b>to display the <b>ConnectionString</b> dialog box.<br><br></li>
<li>
If you have created a Microsoft Data Link file (.UDL), select <b>Use OLE DB File</b> and click <b>Browse</b> to find the file on the computer. If you use a DSN, click <b>Use ODBC Data Source Name </b>and select a DSN from the box, or click <b>New </b>to create one. If you wish to use create a connection string, select <b>Use ConnectionString</b>, and then click <b>Build</b>, and use the <b>Data Link Properties</b> dialog box to create a connection string. After creating the connection string, click <b>OK</b>. The <b>ConnectionString</b> property will be filled with a string like:<pre><code>driver={SQL Server};server=bigsmile;uid=sa;pwd=pwd;database=pubs
</code></pre>
</li>
<li>
In the <b>Properties</b> window, set the <b>RecordSource </b>property to a SQL statement. For example, <pre><code>SELECT * FROM Titles WHERE AuthorID = 72
</code></pre>
<p class=tl>
You should always include a WHERE clause when accessing a table. Failing to do so will lock the entire table, which would be a major hindrance to other users.</P></li>
<li>
Draw a <b>TextBox</b> control on the form to display the database information.<br><br></li>
<li>
In the <b>Properties</b> window, set the <b>DataSource</b> property for Text1 to the name of the ADO Data control (ADODC1). This binds the text box to the ADO Data control.<br><br></li>
<li>
In the <b>Properties </b>window, click <b>DataField</b> and a list of available fields will drop down. Click the name of the field you want to display.<br><br></li>
<li>
Repeat steps 6, 7, and 8 for each additional field you want to access. <br><br></li>
<li>
Press F5 to run the application. You can use the four arrow buttons on the ADO Data control to move to the beginning of the data, to the end of the data, or from record to record through the data.</li>
</ol>
<h3>Setting the ConnectionString, Source, DataSource, and DataField Programmatically</h3>
<p>
The code below shows how to set these four properties programmatically. Note that setting the DataSource property requires the Set statement.</p>
<pre><code>Private Sub Form_Load()
   With ADODC1
      .ConnectionString = "driver={SQL Server};" &amp; _
      "server=bigsmile;uid=sa;pwd=pwd;database=pubs"
      .RecordSource = "Select * From Titles Where AuthorID = 7"
   End With
   Set Text1.DataSource = ADODC1 
   Text1.DataField = "Title"
End Sub
</code></pre>
<h3>ADO Data Control Events</h3>
<p>
The ADO Data control features several events that you can program. The table below shows the events and when they occur; however the table is not meant to be a complete list all of the conditions when the events occur. For complete information, see the reference topic for the individual event.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Event</b></td>
<td class=label width=50%><b>Occurs</b></td>
</tr>
<tr valign=top>
<td width=50%>WillMove</td>
<td width=50%>On Recordset.Open, Recordset.MoveNext, Recordset.Move, Recordset.MoveLast, Recordset.MoveFirst, Recordset.MovePrevious, Recordset.Bookmark, Recordset.AddNew, Recordset.Delete, Recordset.Requery, Recordset.Resync</td>
</tr>
<tr valign=top>
<td width=50%>MoveComplete</td>
<td width=50%>After WillMove</td>
</tr>
<tr valign=top>
<td width=50%>WillChangeField</td>
<td width=50%>Before the Value property changes</td>
</tr>
<tr valign=top>
<td width=50%>FieldChangeComplete</td>
<td width=50%>After WillChangeField</td>
</tr>
<tr valign=top>
<td width=50%>WillChangeRecord</td>
<td width=50%>On Recordset.Update, Recordset.Delete, Recordset.CancelUpdate, Recordset.UpdateBatch, Recordset.CancelBatch</td>
</tr>
<tr valign=top>
<td width=50%>RecordChangeComplete</td>
<td width=50%>After WillChangeRecord</td>
</tr>
<tr valign=top>
<td width=50%>WillChangeRecordset</td>
<td width=50%>On Recordset.Requery, Recordset.Resync, Recordset.Close, Recordset.Open, Recordset.Filter</td>
</tr>
<tr valign=top>
<td width=50%>RecordsetChangeComplete</td>
<td width=50%>After WillChangeRecordset</td>
</tr>
<tr valign=top>
<td width=50%>InfoMessage</td>
<td width=50%>When the data provider returns a result</td>
</tr>
</table><br>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;To try other step-by-step procedures using the ADO Data control, see "Creating a Simple Database Application with the DataGrid and ADO Data Control," "Creating a Simple DataCombo Application," and "Creating a DataGrid Linked to a DataList Control."</p>
</BODY>
</HTML>

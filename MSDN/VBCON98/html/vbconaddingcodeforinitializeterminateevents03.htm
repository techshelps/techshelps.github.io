<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Code for Initialize and Terminate Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconaddingcodeforinitializeterminateevents03"></a>Adding Code for Initialize and Terminate Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconAddingCodeForInitializeTerminateEvents03C">
</object></p>
<p>
Class modules have two built-in events: Initialize and Terminate. The code you place in the Initialize event procedure is the first code executed when the object is created, before any properties are set or any methods are executed.</p>
<p>
The code you place in the Terminate event is executed when all references to the object have been released, and the object is about to be destroyed.</p>
<p>
The following procedure adds code to support the DebugID property, and Debug.Print methods that will display the object’s properties when it’s being created and destroyed.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX DLL. It begins with the topic <a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</p>
<p class=label>
<b>To add code to the Initialize and Terminate events of the Thing class</b>
<ol>
<li>
In the <b>Object</b> box of the Thing class module, select <b>Class</b>. The <b>Initialize</b> event appears in the P<b>r</b>ocedure box, and the <b>Code</b> window displays the code template for the event procedure. Add the following code to the event procedure:<pre><code>Private Sub Class_Initialize()
 &nbsp; ' Get a debug ID number that can be returned by
 &nbsp; '&nbsp;&nbsp; the read-only DebugID property.
 &nbsp; mlngDebugID = GetDebugID
 &nbsp; Debug.Print "Initialize Thing " &amp; DebugID _
 &nbsp;&nbsp;&nbsp;&nbsp; &amp; ", Name=" &amp; Name
End Sub
</code></pre>
</li>
<li>
In the <b>Procedure</b> box of the class module, select <b>Terminate</b>. Add the following code to the event procedure:<pre><code>Private Sub Class_Terminate()
 &nbsp; On Error Resume Next
 &nbsp; Debug.Print "Terminate Thing " &amp; DebugID _
 &nbsp;&nbsp;&nbsp;&nbsp; &amp; ", Name=" &amp; Name
End Sub
</code></pre>
<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;You should always handle errors in the Class_Terminate event procedure. Errors in Class_Terminate cannot be handled by applications that use your component, and will therefore be fatal to the application.</p><p class=atl>
By contrast, unhandled errors in the Initialize event are raised at the point where the application created the object, and thus can be handled by the application.</p></li>
</ol>
<p>
Normally, the Initialize event procedure contains any code that needs to be executed at the moment the object is created, such as providing the time stamp for the DebugID property. The Terminate event contains any clean-up code you need to execute when the object is being destroyed.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;The Initialize and Terminate events should never interact with the user. For demonstration purposes, this example uses the two events to give you a visual indication that a Thing object is being created or destroyed.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Coding Robust Initialize and Terminate Events" in "General Principles of Component Design."</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX DLL.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=44%><b>To</b></td>
<td class=label width=56%><b>See</b></td>
</tr>
<tr valign=top>
<td width=44%>Go to the next step</td>
<td width=56%><a href="vbcontestingyouroledll.htm">Creating the TestThing Test Project</a></td>
</tr>
<tr valign=top>
<td width=44%>Start from the beginning</td>
<td width=56%><a href="vbconcreatinganinprocesscomponent.htm">Creating an ActiveX DLL</a>.</td>
</tr>
</table><br>
</BODY>
</HTML>

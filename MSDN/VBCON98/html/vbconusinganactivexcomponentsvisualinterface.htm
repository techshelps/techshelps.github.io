<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using a Component's Visual Interface</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusinganactivexcomponentsvisualinterface"></a>Using a Component's Visual Interface</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingAnActiveXComponentsVisualInterfaceC">
</object></p>
<p>
If a component supports object linking and embedding (OLE), you can link or embed an object into your application without writing any code by using the component's visual interface. You can use a component's visual interface in one of two ways:
<ul type=disc>
<li>
By adding an OLE container control to your application, then inserting an object into the control.<br><br></li>
<li>
By adding the object's class to the Toolbox, then adding an object of that class to your application just as you would add a control to a form.</li>
</ul>
<h2>Inserting an Object with the OLE Container Control</h2>
<p>
The OLE container control gives you the most flexibility in using an object's visual interface. With the OLE container control, you can:
<ul type=disc>
<li>
Create a placeholder in your application for an object. You can create the object that appears within the OLE container control at run time, or you can change an object you have placed in the OLE container control at design time.<br><br></li>
<li>
Create a linked object in your application.<br><br></li>
<li>
Bind the OLE container control to a database.<br><br></li>
<li>
Perform an action if the user moves, sizes, or updates the object in the OLE container control.<br><br></li>
<li>
Create objects from data that was copied onto the Clipboard.<br><br></li>
<li>
Display objects as icons.</li>
</ul>
<p>
An OLE container control can contain only one object at a time. There are several ways to create a linked or embedded object in the OLE container control — the one you choose depends on whether you are creating the linked or embedded object at design time or run time. Once you have an OLE container control drawn on your form, you can insert an object into the container control by:
<ul type=disc>
<li>
Using the Insert Object or Paste Special dialog box. See "Inserting Objects at Design Time with the OLE Container Control" and "Creating Objects at Run Time with the OLE Container Control."<br><br></li>
<li>
Setting the Class, SourceDoc, and SourceItem properties in the Properties window. See "Creating Objects at Run Time with the OLE Container Control."<br><br></li>
<li>
Calling the CreateEmbed<b> </b>or CreateLink method. See "Creating Objects at Run Time with the OLE Container Control."</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on using the OLE container control, see "OLE Container Control" and "Containers for Controls" in "Using Visual Basic's Standard Controls."</p>
<h2>Inserting an Object by Adding Its Class to the Toolbox</h2>
<p>
In the same way that you use the Toolbox to add one of Visual Basic's built-in controls to an application, you can use the Toolbox to add an object. First, add the object's class to the Toolbox, then add the object to a form.</p>
<p class=label>
<b>To add an object's class to the Toolbox</b>
<ol>
<li>
From the <b>Project</b> menu, choose <b>Components</b>.<br><br></li>
<li>
In the <b>Components </b>dialog box, click the <b>Insertable Objects</b> tab.<br><br></li>
<li>
Select the class you want to add to the Toolbox, then click <b>OK</b>. Visual Basic adds a button of that class to the toolbox.<p class=tl>
For example, to add a Microsoft Excel Worksheet button to the Toolbox, select Microsoft Excel Worksheet.</P></li>
</ol>
<p>
Once you've added the object's class to the Toolbox, you can draw it on a form to create an object of that class. For example, after you add a Microsoft Excel Worksheet button to the Toolbox, you can draw it on a form to create a worksheet object on the form.</p>
</BODY>
</HTML>

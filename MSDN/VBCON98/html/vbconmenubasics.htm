<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Menu Basics</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconmenubasics"></a>Menu Basics</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconMenuBasicsC">
</object></p>
<p>
If you want your application to provide a set of commands to users, menus offer a convenient and consistent way to group commands and an easy way for users to access them.</p>
<p>
Figure 3.21 Illustrates the elements of a menu interface on an untitled form.</p>
<p class=label>
<b>Figure 3.21&nbsp;&nbsp;&nbsp;The elements of a menu interface on a Visual Basic form</b></p>
<p>
<img src="avp03021.gif" border=0></p>
<p>
The <i>menu bar </i>appears immediately below the <i>title bar</i> on the form and contains one or more <i>menu titles</i>. When you click a menu title (such as File), a menu containing a list of menu items drops down. Menu items can include commands (such as New and Exit), separator bars, and submenu titles. Each menu item the user sees corresponds to a menu control you define in the Menu Editor (described later in this chapter).</p>
<p>
To make your application easier to use, you should group menu items according to their function. In Figure 3.21, for example, the file-related commands New, Open, and Save As… are all found on the File menu.</p>
<p>
Some menu items perform an action directly; for example, the Exit menu item on the File menu closes the application. Other menu items display a <i>dialog box</i> — a window that requires the user to supply information needed by the application to perform the action. These menu items should be followed by an ellipsis (…). For example, when you choose Save As… from the File menu, the Save File As dialog box appears.</p>
<p>
A menu control is an object; like other objects it has properties that can be used to define its appearance and behavior. You can set the Caption property, the Enabled and Visible properties, the Checked property, and others at design time or at run time. Menu controls contain only one event, the Click event, which is invoked when the menu control is selected with the mouse or using the keyboard.</p>
<p>
<b><B>For More Information</B>&nbsp;&nbsp;&nbsp;</b>For additional information on menu controls, see "Creating Menus with the Menu Editor" in "Creating a User Interface."</p>
<h2>Pop-up Menus</h2>
<p>
A <i>pop-up menu </i>is a floating menu that is displayed over a form, independent of the menu bar, as shown in Figure 3.22. The items displayed on the pop-up menu depend on the location of the pointer when the right mouse button is pressed; therefore, pop-up menus are also called <i>context menus</i>. (In Windows 95, you activate context menus by clicking the right mouse button.) You should use pop-up menus to provide an efficient method for accessing common, contextual commands. For example, if you click a text box with the right mouse button, a contextual menu would appear, as shown in Figure 3.22.</p>
<p class=label>
<b>Figure 3.22&nbsp;&nbsp;&nbsp;A pop-up menu</b></p>
<p>
<img src="avp03022.gif" border=0></p>
<p>
Any menu that has at least one menu item can be displayed at run time as a pop-up menu. To display a pop-up menu, use the PopupMenu method.</p>
<p>
<b><B>For More Information</B>&nbsp;&nbsp;&nbsp;</b>For additional information on creating pop-up menus, see "Creating Menus" in "Creating a User Interface."</p>
<h2>Using the Menu Editor</h2>
<p>
With the Menu Editor, you can add new commands to existing menus, replace existing menu commands with your own commands, create new menus and menu bars, and change and delete existing menus and menu bars. The main advantage of the Menu Editor is its ease of use. You can customize menus in a completely interactive manner that involves very little programming.</p>
<p class=label>
<b>To display the Menu Editor</b>
<ul type=disc>
<li>
From the <b>Tools</b> menu, choose <b>Menu Editor</b>.</li>
</ul>
<p>
This opens the Menu Editor, shown in Figure 3.23</p>
<p class=label>
<b>Figure 3.23&nbsp;&nbsp;&nbsp;The Menu Editor</b></p>
<p>
<img src="avp03023.gif" border=0></p>
<p>
While most menu control properties can be set using the Menu Editor; all menu properties are also available in the Properties window. You would normally create a menu in the Menu Editor; however, to quickly change a single property, you could use the Properties window.</p>
<p>
<b><B>For More Information</B>&nbsp;&nbsp;&nbsp;</b>For additional information on creating menus and using the Menu Editor, see "Creating Menus" in "Creating a User Interface."</p>
</BODY>
</HTML>

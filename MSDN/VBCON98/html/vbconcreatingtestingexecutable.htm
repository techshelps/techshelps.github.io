<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating and Testing the Executable</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatingtestingexecutable"></a>Creating and Testing the Coffee Executable</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreatingTestingExecutableC">
</object></p>
<p>
Once an out-of-process component project is tested and debugged in the development environment, you can compile and test the .exe file.</p>
<p>
An ActiveX component is compiled the same way any Visual Basic project is compiled — by choosing Make from the File menu. The .exe file includes a type library that describes your objects and allows them to be browsed. Visual Basic automatically registers the component in your Windows registry when you make the executable file.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you distribute your application as part of an integrated solution, registration is done during setup. If you use the Visual Basic Package and Deployment Wizard, registration of your component will be included in the setup process automatically. This is discussed in "Deploying Components" in "Debugging, Testing, and Deploying Components."</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;The Package and Deployment Wizard is described in "Distributing Your Applications" in the <i>Visual Basic Programmer’s Guide.</i></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a sample ActiveX EXE. It begins with the topic <a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a>.</p>
<p class=label>
<b>To compile and test the Coffee executable</b>
<ol>
<li>
If the Coffee project is still in run mode, click the End button to return to design mode.<br><br></li>
<li>
On the <b>File </b>menu, click <b>Make Coffee.exe</b> to open the <b>Make Project</b> dialog box. Click <b>OK</b> to build the .exe file.<br><br></li>
<li>
<b>Switch to the CoffeeWatch project. On the Project</b> menu, click <b>References</b> to open the <b>References</b> dialog box. Remove the check mark from the Coffee Monitor Component entry for the .vbp file, and check the entry for the .exe file.<p class=tl>
You can tell the entries apart by observing the Location in the information panel at the bottom of the dialog box.</P></li>
<li>
On the <b>File </b>menu, click <b>Make CoffeeWatch.exe</b> to open the <b>Make Project </b>dialog box. Click <b>OK</b> to build the .exe file.<br><br></li>
<li>
(Optional) Press f5 to run CoffeeWatch using the compiled Coffee executable.<br><br></li>
<li>
Use the Explorer (or the Run box, on the Start menu) to start one or more instances of CoffeeWatch.exe.<p class=tl>
Notice that all the instances of CoffeeWatch appear to get their CoffeeReady events at the same time. In reality, the clients get their events one after the other — a single thread of execution traces through all of the event handlers. You can see this demonstrated in the sample applications for this chapter.</P><p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;When multiple objects are handling events from one event source — a scenario referred to as <i>multicasting</i> — the order in which they get events is undefined, and implementation dependent. You should never write code that depends on any particular order of event arrival among the multicasting clients.</p><p class=tl>
Events are anonymous — that is, the object that raises the event doesn’t know how many objects (if any) are handling the event.</P></li>
</ol>
<p>
To switch back to using Coffee.vbp, you can use the References dialog box to clear the entry for the .exe file and check the entry for the .vbp file instead.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can compile CoffeeWatch.exe using either the compiled Coffee.exe, or Coffee.vbp. The latter is useful for debugging with multiple clients. The CoffeeWatch executable will be compiled using whichever entry is currently checked in the References dialog box.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;You can read more about test projects and debugging techniques in "Debugging, Testing, and Deploying Components."</p>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX EXE.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=40%><b>To</b></td>
<td class=label width=60%><b>See</b></td>
</tr>
<tr valign=top>
<td width=40%>Go to the next step</td>
<td width=60%><a href="vbconctcmp02recap.htm">ActiveX EXE Component Creation Summary</a></td>
</tr>
<tr valign=top>
<td width=40%>Start from the beginning</td>
<td width=60%><a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a></td>
</tr>
</table><br>
</BODY>
</HTML>

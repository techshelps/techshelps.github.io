<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Polymorphism</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconinheritancepolymorphismallthat"></a>Polymorphism</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconInheritancePolymorphismAllThatC">
</object></p>
<p>
<i>Polymorphism</i> means that many classes can provide the same property or method, and a caller doesn't have to know what class an object belongs to before calling the property or method.</p>
<p>
For example, a Flea class and a Tyrannosaur class might each have a Bite method. Polymorphism means that you can invoke Bite without knowing whether an object is a Flea or a Tyrannosaur — although you'll certainly know afterward.</p>
<p>
The following topics describe Visual Basic's approach to polymorphism and how you can use it in your programs.
<ul type=disc>
<li>
<a href="vbconhowvisualbasicprovidespolymorphism.htm">How Visual Basic Provides Polymorphism</a>&nbsp;&nbsp;&nbsp;Most object-oriented languages provide polymorphism via inheritance; Visual Basic uses the multiple interface approach of the Component Object Model (COM).<br><br></li>
<li>
<a href="vbconcreatingimplementinginterface.htm">Creating and Implementing an Interface</a>&nbsp;&nbsp;&nbsp;An extended code example shows how to create an abstract Animal interface and implement it for Tyrannosaur and Flea classes.<br><br></li>
<li>
<a href="vbconimplementingpropertiespolymorphistically.htm">Implementing Properties</a>&nbsp;&nbsp;&nbsp;The interfaces you implement can have properties as well as methods, although there are some differences in the way properties are implemented.<br><br></li>
<li>
<a href="vbcontimeoutforbriefdiscussionofobjectsinterfaces.htm">Time Out for a Brief Discussion of Objects and Interfaces</a>&nbsp;&nbsp;&nbsp;Clarifies the terms <i>object</i> and<i> interface</i>, introduces the concept of querying for an interface, and describes other sources of interfaces to implement.<br><br></li>
<li>
<a href="vbconcomposingobjects.htm">The Many (Inter)Faces of Code Reuse</a>&nbsp;&nbsp;&nbsp;In addition to implementing abstract interfaces, you can reuse your code by implementing the interface of an ordinary class, and then selectively delegating to a hidden instance of the class.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;With the Professional and Enterprise editions of Visual Basic, Polymorphism becomes a powerful mechanism for evolving systems of software components. This is discussed in "General Principles of Component Design" in <i>Creating ActiveX Components</i> in the <i>Component Tools Guide</i>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Break on Error in Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingbreakonerrorincomponents"></a>Using Break on Error in Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingBreakOnErrorInComponentsC">
</object></p>
<p>
You can change the way Visual Basic enters break mode when an error occurs in your component by setting the Error Trapping option in your component project.</p>
<p>
In your component project, choose Options from the Tools menu to open the Options dialog box, and select the General tab. There are three options in the Default Error Trapping State box, as described below.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The setting in the Default Error Trapping State box controls the default setting of the option when you start Visual Basic; it also toggles the option in the current session. If you wish to change the setting for the current session only, without affecting the default, select Toggle from the code window context menu.</p>
<p>
Suppose you have a component that provides a Widget object that has a Spin method. The following descriptions assume that the test application has called the Spin method of the Widget object, and that an error has occurred in the Spin method’s code.
<ul type=disc>
<li>
Break on All Errors: The component project is activated, and the Spin method’s code window receives the focus. The line of code that caused the error is highlighted. Visual Basic always enters break mode on such an error, even if error handling is enabled in the Spin method.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can press Alt+F8 or Alt+F5 to step or run past the error.</p></li>
<li>
Break in Class Module: If error handling is not enabled in the Spin method, or if you are deliberately raising an error for the client by calling the Raise method of the Err object in the Spin method’s error handler, the component project is activated, and the Spin method’s code window receives the focus. The line of code that caused the error is highlighted.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can press Alt+F8 or Alt+F5 to step or run past the error.</p><p class=tl>
If error handling is enabled in Spin, then the error handler is invoked. As long as you don’t raise an error in the error handler, Visual Basic does not enter break mode.</P></li>
<li>
Break on Unhandled Errors: Visual Basic never enters break mode in properties or methods of the component. If error handling is not enabled in the client procedure that called the Spin method, execution stops on the line of code that made the call.<p class=tl>
To understand the behavior of Break on Unhandled Errors in a component project, remember that the component’s properties and methods are always called by somebody else. An error in a property or method can always be handled by passing it up the call tree into the client procedure that called the property or method.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When an out-of-process component enters break mode, focus may not immediately switch to the component project. If you click anywhere on the client, the Component Busy dialog box will be displayed. Click the Switch To button to give the focus to the component project.</p></li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Debugging Your Code and Handling Errors" in the <i>Visual Basic Programmer’s Guide</i>.</p>
</BODY>
</HTML>

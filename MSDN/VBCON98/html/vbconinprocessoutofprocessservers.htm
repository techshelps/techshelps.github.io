<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>In-Process and Out-of-Process Servers</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconinprocessoutofprocessservers"></a>In-Process and Out-of-Process Servers</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconInProcessOutofProcessServersC">
</object></p>
<p>
ActiveX components interact with your application — and with each other — through a <i>client/server</i> relationship. The <i>client</i> is the application code or component that uses the features of a component. The <i>server</i> is the component and its associated objects. For example, suppose your application uses an ActiveX control to provide a standard Employee form for multiple applications in your company. The ActiveX control that provides the Employee form is the server; the applications that use the control are its clients.</p>
<p>
Depending on how an ActiveX component has been implemented, it may run in the same process as its client applications, or in a different process. For example, if your application uses a component that is part of an ActiveX-enabled application, it runs in a separate process. If the component has been implemented as a programmable object in a dynamic-link library (.dll file), it runs in the same process as your application.</p>
<p>
In general, if an ActiveX component has been implemented as part of an executable file (.exe file), it is an <i>out-of-process</i> server and runs in its own process. If it has been implemented as a dynamic-link library, it is an <i>in-process</i> server and runs in the same process as the client application. Applications that use in-process servers usually run faster than those that use out-of-process servers because the application doesn't have to cross process boundaries to use an object's properties, methods, and events.</p>
<p>
The following table shows how you can implement the different types of components:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Component</b></td>
<td class=label width=50%><b>Server Type</b></td>
</tr>
<tr valign=top>
<td width=50%>ActiveX-enabled application</td>
<td width=50%>Out-of-process</td>
</tr>
<tr valign=top>
<td width=50%>Code component</td>
<td width=50%>Either in-process or out-of-process</td>
</tr>
<tr valign=top>
<td width=50%>ActiveX control</td>
<td width=50%>In-process</td>
</tr>
<tr valign=top>
<td width=50%>ActiveX document</td>
<td width=50%>Either in-process or out-of-process</td>
</tr>
</table><br>
<p>
Using in-process components is one way to optimize the performance of your application. Another way to optimize performance is to use early binding. For more information, see "Speeding Object References" later in this chapter.</p>
</BODY>
</HTML>

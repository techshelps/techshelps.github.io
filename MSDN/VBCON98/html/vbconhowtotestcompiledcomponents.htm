<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Test Compiled Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconhowtotestcompiledcomponents"></a>How to Test Compiled Components</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconHowToTestCompiledComponentsC">
</object></p>
<p>
When you choose Make from the File menu, your component will be registered automatically in the Windows Registry. You can switch your test application between the component project and the compiled component using the procedures in this topic.</p>
<h2>In-Process Components</h2>
<p>
The following procedures perform the switch for an in-process component (ActiveX DLL project or ActiveX control project).</p>
<p class=label>
<b>To switch from an in-process component project to the compiled .dll or .ocx file</b>
<ol>
<li>
On the <b>File</b> menu, click <b>Make &lt;projectname&gt;</b> to create the compiled in-process component.<br><br></li>
<li>
In the <b>Project</b> window, select the component project.<br><br></li>
<li>
On the <b>File</b> menu, click <b>Remove &lt;projectname&gt;</b> to remove the component project from the project group.<p class=tl>
A warning message will appear: "The project is referenced from another project. Are you sure you want to remove it?" Click <b>OK</b> to remove the project.</P></li>
<li>
Press F5 to run the test project.<p class=tl>
Visual Basic automatically switches references to the compiled .ocx or .dll file.</P></li>
</ol>
<p class=label>
<b>To switch back to testing your in-process component project</b>
<ol>
<li>
On the <b>File</b> menu, click <b>Add Project</b> to open the <b>Add Project</b> dialog box.<br><br></li>
<li>
Use the <b>Recent</b> or <b>Existing</b> tab to open your component project.<br><br></li>
<li>
Press F5 to run the test project.<p class=tl>
Visual Basic automatically switches references back to the component project.</P></li>
</ol>
<h2>Out-of-Process Components</h2>
<p>
Remember that an out-of-process component must be tested using two instances of the development environment. The following procedures perform the switch for an out-of-process component (ActiveX Exe project).</p>
<p class=label>
<b>To switch from an out-of-process component project to the compiled executable</b>
<ol>
<li>
On the <b>File</b> menu of the component project, click <b>Make &lt;projectname&gt;</b> to create an up-to-date version of the executable.<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;If you neglect to make the executable, you’ll get the following error message when you attempt to run your test project: "Connection to type library or object library for remote process has been lost. Press <b>OK</b> for dialog to remove reference."</p></li>
<li>
In the test project, press F5 to run the project.<p class=tl>
When the component project is not running, Visual Basic automatically switches registry entries to point to the compiled executable.</P></li>
</ol>
<p class=label>
<b>To switch back to testing your out-of-process component project</b>
<ol>
<li>
In the component project, press Ctrl+F5 to run the project.<br><br></li>
<li>
In the test project, press F5 to run the project.<p class=tl>
When the component project is running, Visual Basic automatically switches registry entries back to it.</P></li>
</ol>
<p>
You may also want to create an executable file from your test application, and run several instances of it to test your component with multiple client applications.</p>
<h2>Testing Your Component with Other Applications</h2>
<p>
You can test your component from any application that can make Automation calls. For example, you can open a Microsoft Excel module, add a reference to your component by choosing References from the Project menu, and write procedures to create and use objects provided by your component.</p>
<p>
Even if you do not expect your component to be used as an extension of end user software tools like Microsoft Excel and Microsoft Access, it’s a good idea to test it with such tools. The more programming tools your component works with, the more value it will have for your company or for your customers.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Testing and Debugging ActiveX Components" for a list of topics related to testing and debugging.</p>
</BODY>
</HTML>

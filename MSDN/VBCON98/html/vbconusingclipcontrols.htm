<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Clipping Regions with ClipControls</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingclipcontrols"></a>Clipping Regions with ClipControls</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingClipControlsC">
</object></p>
<p>
Each form, picture box, and frame control has a ClipControls property. ClipControls is a Boolean property that, when set to True, causes the container to define a clipping region when painting the container around all controls except:
<ul type=disc>
<li>
The shape control<br><br></li>
<li>
The line control<br><br></li>
<li>
The image control<br><br></li>
<li>
Labels<br><br></li>
<li>
Any ActiveX graphical controls</li>
</ul>
<p>
By setting the ClipControls property to False, you can improve the speed with which a form paints to the screen. The speed improvement is greatest on forms with many controls that do not overlap, like dialog boxes.</p>
<h2>Clipping Regions</h2>
<p>
<i>Clipping</i> is the process of determining which parts of a form or container are painted when the form or container is displayed. The outline used to determine what parts of the form or container are painted or "clipped" defines the <i>clipping region</i> for that form or container. Clipping regions are useful when a Windows – based application needs to save one part of the display and simultaneously repaint the rest.</p>
<h2>Clipping Forms and Containers</h2>
<p>
The default setting of ClipControls is True. When the ClipControls property is True, Windows defines a clipping region for the background of the form or container before a Paint event. This clipping region surrounds all nongraphical controls. When using ClipControls, labels act like graphical controls.</p>
<p>
During a Paint event, Windows repaints only the background inside the clipping region, avoiding the nongraphical controls. Figure 12.8 shows a form with four controls, a box painted with the Line method, and the clipping region created for that form by setting ClipControls to True. Notice that the clipping region did not clip around the label or shape controls on the form. The box drawn in the background with the Line method paints only in the clipping region.</p>
<p class=label>
<b>Figure 12.8&nbsp;&nbsp;&nbsp;The clipping region created when ClipControls is True</b></p>
<p>
<img src="avp12008.gif" border=0></p>
<p>
When ClipControls is False, Windows does not define a clipping region for the background of the form or container before a Paint event. Also, output from graphics methods within the Paint event appears only in the parts of the form or container that need to be repainted. Since calculating and managing a clipping region takes time, setting ClipControls to False may cause forms with many nonoverlapping controls (such as complex dialog boxes) to display faster.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Avoid nesting controls with ClipControls set to True inside controls with ClipControls set to False. Doing so may result in the nested controls not repainting correctly. To fix this, set ClipControls to True for both the containers and the controls.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Optimizing Display Speed" in "Designing for Performance and Compatibility."</p>
</BODY>
</HTML>

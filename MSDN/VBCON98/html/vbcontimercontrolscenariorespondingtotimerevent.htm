<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Timer Control Scenario: Responding to the Timer Event</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcontimercontrolscenariorespondingtotimerevent"></a>Timer Control Scenario: Responding to the Timer Event</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconTimerControlScenarioRespondingToTimerEventC">
</object></p>
<p>
When a timer control's interval elapses, Visual Basic generates the Timer event. Typically, you respond to this event by checking some general condition, such as the system clock.</p>
<p>
A digital clock is a very simple but very useful application involving a timer control. Once you understand how the application works, you can enhance it to work as an alarm clock, stopwatch, or other timing device.</p>
<p>
The Digital Clock application includes a timer and a label with a border. At design time, the application looks like Figure 7.47.</p>
<p class=label>
<b>Figure 7.47&nbsp;&nbsp;&nbsp;The Digital Clock application</b></p>
<p>
<img src="avp07055.gif" border=0></p>
<p>
At run time, the timer is invisible. The following table lists the property settings for the Digital Clock application.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Control</b></td>
<td class=label width=36%><b>Property</b></td>
<td class=label width=36%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=28%>Label1</td>
<td width=36%>BorderStyle</td>
<td width=36%>Fixed Single</td>
</tr>
<tr valign=top>
<td width=28%>Timer1</td>
<td width=36%>Interval</td>
<td width=36%>500 (half a second)</td>
</tr>
<tr valign=top>
<td width=28%>Timer1</td>
<td width=36%>Enabled</td>
<td width=36%>True</td>
</tr>
</table><br>
<p>
The only procedure in this application is an event procedure for the timer:</p>
<pre><code>Private Sub Timer1_Timer ()
   If lblTime.Caption &lt;&gt; CStr(Time) Then
      lblTime.Caption = Time
   End If
End Sub
</code></pre>
<p>
The procedure displays the system time by calling the intrinsic Time function. This function returns a Variant containing the current time as a date/time value (VarType 7). When you assign it to a string variable or property, such as the Caption property in this case, Visual Basic converts it to a string using the time format specified in the Control Panel. If you want to display it using a different format, you can use the Format function.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Format Property."</p>
<p>
The Interval property for the timer is set to 500, following the rule of setting the Interval to half of the shortest period you want to distinguish (one second in this case). This may cause the timer code to update the label with the same time twice in one second. This is wasteful and can cause some visible flicker, so the code tests to see if the time is different from what is displayed in the label before it changes the caption.</p>
<p>
You can customize the look of the Digital Clock without having to write any additional statements. For example, you might want to select a different font for the label or change the BorderStyle property of the form.</p>
</BODY>
</HTML>

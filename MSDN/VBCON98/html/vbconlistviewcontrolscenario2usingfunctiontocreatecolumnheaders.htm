<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ListView Scenario 2: Using a Procedure to Create ColumnHeaders</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconlistviewcontrolscenario2usingfunctiontocreatecolumnheaders"></a>ListView Scenario 2: Using a Procedure to Create ColumnHeaders</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconListViewControlScenario2UsingFunctionToCreateColumnHeadersC">
</object></p>
<p>
The code examples in this topic are taken from the DataTree.vbp sample application, which is listed in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory. </p>
<p>
In the previous scenario, "ListView Control Scenario 1: Using the ListView Control with the TreeView Control," the ListView control and the TreeView control are showed working in tandem. In that scenario, the TreeView control's NodeClick event is used to call two procedures. The first procedure, "MakeColumns," which creates ColumnHeader objects, is outlined here.</p>
<p>
The following example uses this object:
<ul type=disc>
<li>
ListView control named "lvwDB"</li>
</ul>
<p class=label>
<b>To create ColumnHeader objects are</b>
<ol>
<li>
Clear the ColumnHeaders collection with the Clear method and create ColumnHeaders.<br><br></li>
<li>
Use the Add method to create ColumnHeader objects.</li>
</ol>
<h3>Clear the ColumnHeaders collection with the Clear method and Create ColumnHeaders</h3>
<p>
The procedure first clears all members of the ColumnHeaders collection using the Clear method:</p>
<pre><code>lvwDB.ListItems.Clear
</code></pre>
<p>
This step is necessary if you intend to create different sets of ColumnHeader objects for different tables. For example, you may want to populate the ListView control not only when the Publisher nodes are clicked, but also when the user clicks the root of the tree. In that case, the ListView control would be populated with a different list.</p>
<h3>Use the Add Method to Create ColumnHeader Objects</h3>
<p>
After clearing the ColumnHeaders collection, you use the Add method to add ColumnHeader objects to the collection, as shown:</p>
<pre><code>Private Sub MakeColumns()
   ' Clear the ColumnHeaders collection.
   lvwDB.ColumnHeaders.Clear
   ' Add four ColumnHeaders.
   lvwDB.ColumnHeaders.Add , , "Title", 2000
   lvwDB.ColumnHeaders.Add , , "Author"
   lvwDB.ColumnHeaders.Add , , "Year", 350
   lvwDB.ColumnHeaders.Add , , "ISBN"
End Sub
</code></pre>
<p>
Note that the Add method syntax allows you to set the Width property for each ColumnHeader object. In the above code, the Width property is set only for the "Title" and "Year" ColumnHeader objects.</p>
</BODY>
</HTML>

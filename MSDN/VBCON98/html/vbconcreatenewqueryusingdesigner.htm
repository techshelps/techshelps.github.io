<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an HTML Page that Runs a Stored Procedure</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcreatenewqueryusingdesigner"></a>Creating an HTML Page that Runs a Stored Procedure</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCreateNewQueryUsingDesignerC">
</object></p>
<p>
You can increase the power and flexibility of your HTML applications by enabling them to run SQL Server stored procedures. You can create a stored procedure in the Data View window, then create Command objects and elements that use the stored procedure to view or update data.</p>
<p>
This topic shows how to create a stored procedure that returns customer address records by country from the Customers table created earlier in this scenario. It shows how to add a Select element to the HTML page you created in the previous topic. The Select element uses the stored procedure to display address records based on the selected country.</p>
<p class=label>
<b>To create an HTML page that runs a stored procedure</b>
<ol>
<li>
Add a stored procedure to the database.<br><br></li>
<li>
Create a data environment Command object based on the stored procedure.<br><br></li>
<li>
Add Labels and TextField Elements to a new HTML Page.<br><br></li>
<li>
Add a Select element to the HTML page.<br><br></li>
<li>
Add code to run the stored procedure and display the results.<br><br></li>
<li>
Load the HTML page.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic is part of a series that walks you through creating a simple database application that interacts with data in an SQL Server database. It begins with the topic <a href="vbconquerysqlserverdatabase.htm">Creating a DHTML Application that Interacts with SQL Server Data</a>.</p>
<h3>Add a Stored Procedure to the Database</h3>
<p>
You can add a stored procedure to the database by right-clicking the Stored Procedures folder in the Data View window and selecting the New Stored Procedure command. The Data View window displays the New Stored Procedure window, where you enter the SQL Create Procedure statement that defines the stored procedure.</p>
<p>
For example, you can add a spCustByCountry stored procedure to the Pubs database that accepts an input parameter, Country, and returns customer address information for the specified country. Enter the following Create Procedure statement in the New Stored Procedure window:</p>
<pre><code>CREATE PROCEDURE spCustByCountry @Country varchar(20)
AS
SELECT * FROM Customers
WHERE Country = @Country
</code></pre>
<p>
When you save the stored procedure, it is added to the database.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on using the Data View window to create a stored procedure, see <a href="vbconstoredprocsqleditor.htm">Stored Procedures in the SQL Editor</a>.</p>
<h3>Create a Data Environment Command Object Based on the Stored Procedure</h3>
<p>
In the "Create a Data Entry HTML Page" topic, you created a data environment Command object based on the Customers table in the Pubs sample database. You can also create a data environment Command object based on a stored procedure.</p>
<p>
For example, you can create a data environment Command object based on the spCustByCountry stored procedure. Follow the steps in the "Interacting with Data in a Microsoft Jet/Microsoft Access Database" scenario, Chapter 5 of the <i>Data Access Guide,</i> to create the Command object, setting the following properties:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=39%><b>Property</b></td>
<td class=label width=61%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=39%>Command Name</td>
<td width=61%>CustByCountry</td>
</tr>
<tr valign=top>
<td width=39%>Connection</td>
<td width=61%>Connection1</td>
</tr>
<tr valign=top>
<td width=39%>Database Object</td>
<td width=61%>Stored Procedure</td>
</tr>
<tr valign=top>
<td width=39%>Object Name</td>
<td width=61%>dbo.spCustByCountry</td>
</tr>
</table><br>
<h3>Add Labels and TextField Elements to a New HTML Page</h3>
<p>
After you've created the command that will provide the data source for your HTML page, you can create the page. Select Add DHTML Page from the Project menu. As you saw in the previous topics in this scenario, you can use the DHTML Page designer to add labels and TextField elements to the HTML page.</p>
<h3>Add a Select Element to an HTML Page</h3>
<p>
You can use the DHTML Page designer to add a Select element to your HTML page. A Select element, similar to a combo box, lets you select an item from a list.</p>
<p>
For example, to add a Select element called SelectCountry to the page you created in the previous topic, drag the element onto the page. Then set the element's Name and id properties to SelectCountry.</p>
<p>
You can specify the list items to be displayed in the Select element by adding code to the HTML page's Load event procedure. For example, to display a list of countries included in the address information from the Customers table, add the following code:</p>
<pre><code>Private Sub DHTMLPage_Load()
   ' Declare Select element, connection, recordset, and string variables.
   Dim selElement As HTMLSelectElement
   Dim cnn As ADODB.Connection
   Dim rsCountries As ADODB.Recordset
   Dim strSQL As String

   ' Assign the list of countries from the Customers table 
   ' to the recordset variable.
   strSQL = "SELECT DISTINCT Country FROM Customers;"
   Set cnn = New ADODB.Connection
   cnn.Open MyDataEnvironment.Connection1
   Set rsCountries = New ADODB.Recordset
   rsCountries.Open strSQL, cnn1

   ' Fill the Select element's list with countries from the recordset,    ' setting each list element's Text property.   With rsCountries
   Do While Not .EOF
      Set selElement = Me.Document.createElement("OPTION")
      selElement.Text = !Country
      SelectCountry.Options.Add selElement
      .MoveNext
   Loop
   End With

End Sub
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more information on creating a Select element, see <a href="vbconworkingwithlistsinpagedesigner.htm">Working with Lists in the Page Designer</a> in <i>Building Internet Applications</i> in the <i>Component Tools Guide</i>.</p>
<h3>Add Code to Run the Stored Procedure and Display the Results</h3>
<p>
Using the data environment, ADO, and the BindingCollection object, you can easily add code to a Select element's onafterupdate event procedure to run a Command object that is based on a stored procedure. You can then update the data displayed in an HTML page.</p>
<p>
For example, you can display address records on your HTML page for customers from a country selected in the SelectCountry element. First, declare a BindingCollection object variable in the HTML Page object's Declarations section:</p>
<pre><code>Dim colBind As BindingCollection
</code></pre>
<p>
Then add code to the element's onchange event procedure to run the cmdCustByCountry Command object using the value of the element as an input parameter:</p>
<pre><code>Private Sub SelectCountry_onchange()

   Dim rsResults As ADODB.Recordset
   Dim intIndex As Integer

   ' Run the CustByCountry Command object using the value
   ' of the SelectCountry element as an input parameter.
   intIndex = SelectCountry.selectedIndex
   MyDataEnvironment.CustByCountry SelectCountry.Options(intIndex).Text

   ' Create a BindingCollection object, then set its 
   ' DataSource property to your data environment and its 
   ' DataMember property to the CustByCountry Command object.
   Set colBind = New BindingCollection
   With colBind
      Set .DataSource = MyDataEnvironment
      .DataMember = "CustByCountry"

      ' Bind the Value property of elements on the HTML page 
      ' to fields in the CustByCountry recordset.
      .Add CustomerID, "Value", "CustomerID"
      .Add CompanyName, "Value", "CompanyName"
      .Add Address, "Value", "Address"
      .Add City, "Value", "City"
      .Add Region, "Value", "Region"
      .Add PostalCode, "Value", "PostalCode"
      .Add Country, "Value", "Country"
   End With

   ' Assign the recordset to the rsResults recordset variable.   Set rsResults = MyDataEnvironment.rsCustByCountry      ' Add HTML code to dynamically create a table on the page 
' showing each customer record.
Me.Document.body.insertAdjacentHTML "BeforeEnd", "&lt;DIV&gt;&lt;HR SIZE=2&gt;&lt;/DIV&gt;"   With rsResults      Do While Not .EOF         Me.Document.body.insertAdjacentHTML "BeforeEnd", _         "&lt;TABLE BORDER CELLSPACING=1 CELLPADDING=7 &gt;&lt;TR HEIGHT=17&gt;" &amp; _
         "&lt;TD WIDTH=70&gt;" &amp; rsResults!CustomerID &amp; "&lt;/TD&gt;" &amp; _
         "&lt;TD WIDTH=200&gt;" &amp; rsResults!CompanyName &amp; "&lt;/TD&gt;" &amp; _
         "&lt;TD WIDTH=300&gt;" &amp; rsResults!Address &amp; "&lt;/TD&gt;" &amp; _
         "&lt;TD WIDTH=100&gt;" &amp; rsResults!City &amp; "&lt;/TD&gt;" &amp; _
         "&lt;TD WIDTH=50&gt;" &amp; rsResults!Region &amp; "&lt;/TD&gt;" &amp; _
         "&lt;TD WIDTH=50&gt;" &amp; rsResults!PostalCode &amp; "&lt;/TD&gt;" &amp; _
         "&lt;TD WIDTH=50&gt;" &amp; rsResults!Country &amp; "&lt;/TD&gt;&lt;/TR&gt;" &amp; _
         "&lt;/TABLE&gt;"
         .MoveNext
      Loop
      .MoveFirst
      .Close
   End With

End Sub
</code></pre>
<h3>Load the HTML Page</h3>
<p>
To view the finished page in Internet Explorer, press F5 or click the Start button on the Standard toolbar. You can also explicitly make a dynamic-link library and HTML page for the project by setting properties on the Make tab of the Project Properties dialog box, then clicking Make .dll on the File menu.</p>
<h3>Step by Step</h3>
<p>
This topic concludes a series that walks you through creating a simple DHTML application that interacts with data in an SQL Server database. To start from the beginning, see <a href="vbconquerysqlserverdatabase.htm">Creating a DHTML Application that Interacts with SQL Server Data</a>.</p>
</BODY>
</HTML>

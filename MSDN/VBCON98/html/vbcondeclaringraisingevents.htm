<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declaring and Raising Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondeclaringraisingevents"></a>Declaring and Raising Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDeclaringRaisingEventsC">
</object></p>
<p>
Assume for the moment that you have a Widget class. Your Widget class has a method that can take a long time to execute, and you'd like your application to be able to put up some kind of completion indicator.</p>
<p>
Of course, you could make the Widget object show a percent-complete dialog box, but then you'd be stuck with that dialog box in every project in which you used the Widget class. A good principle of object design is to let the application that uses an object handle the user interface — unless the whole purpose of the object is to manage a form or dialog box.</p>
<p>
The Widget's purpose is to perform other tasks, so it's reasonable to give it a PercentDone event, and to let the procedure that calls the Widget's methods handle that event. The PercentDone event can also provide a mechanism for canceling the task.</p>
<p>
You can start building the code example for this topic by opening a Standard Exe project, and adding two buttons and a label to Form1. On the Project menu, select Add Class Module to add a class module to the project. Name the objects as shown in the following table.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Object</b></td>
<td class=label width=29%><b>Property</b></td>
<td class=label width=37%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=34%>Class module</td>
<td width=29%>Name</td>
<td width=37%>Widget</td>
</tr>
<tr valign=top>
<td width=34%>First Button</td>
<td width=29%>Caption</td>
<td width=37%>Start Task</td>
</tr>
<tr valign=top>
<td width=34%>Second Button</td>
<td width=29%>Caption</td>
<td width=37%>Cancel</td>
</tr>
<tr valign=top>
<td width=34%>Label</td>
<td width=29%>Name<br>
Caption</td>
<td width=37%>lblPercentDone<br>
"0"</td>
</tr>
</table><br>
<h3>The Widget Class</h3>
<p>
You declare an event in the Declarations section of a class module, using the Event keyword. An event can have ByVal and ByRef arguments, as the Widget's PercentDone event demonstrates:</p>
<pre><code>Option Explicit
Public Event PercentDone(ByVal Percent As Single, _
ByRef Cancel As Boolean)
</code></pre>
<p>
When the calling object receives a PercentDone event, the Percent argument contains the percentage of the task that's complete. The ByRef Cancel argument can be set to True to cancel the method that raised the event.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can declare event arguments just as you do arguments of procedures, with the following exceptions: Events cannot have named arguments, optional arguments, or ParamArray arguments. Events do not have return values.</p>
<h4>Raising the PercentDone Event</h4>
<p>
The PercentDone event is raised by the LongTask method of the Widget class. The LongTask method takes two arguments: the length of time the method will pretend to be doing work, and the minimum time interval before LongTask pauses to raise the PercentDone event.</p>
<pre><code>Public Sub LongTask(ByVal Duration As Single, _
ByVal MinimumInterval As Single)
   Dim sngThreshold As Single
   Dim sngStart As Single
   Dim blnCancel As Boolean
   
   ' The Timer function returns the fractional number
   ' of seconds since Midnight, as a Single.
   sngStart = Timer
   sngThreshold = MinimumInterval
   
   Do While Timer &lt; (sngStart + Duration)
      ' In a real application, some unit of work would
      ' be done here each time through the loop.
      
      If Timer &gt; (sngStart + sngThreshold) Then
         RaiseEvent PercentDone( _
         sngThreshold / Duration, blnCancel)
         ' Check to see if the operation was canceled.
         If blnCancel Then Exit Sub
         sngThreshold = sngThreshold + MinimumInterval
      End If
   Loop
End Sub
</code></pre>
<p>
Every <code>MinimumInterval</code> seconds, the PercentDone event is raised. When the event returns, LongTask checks to see if the Cancel argument was set to True.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;For simplicity, LongTask assumes you know in advance how long the task will take. This is almost never the case. Dividing tasks into chunks of even size can be difficult, and often what matters most to users is simply the amount of time that passes before they get an indication that something is happening.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;Now that you've declared an event and raised it, how do you get another object to handle it? "Handling an Object's Events" continues the saga of the Widget object.</p>
</BODY>
</HTML>

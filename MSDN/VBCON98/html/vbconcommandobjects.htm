<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Command Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconcommandobjects"></a>Command Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconCommandObjects_C">
</object></p>
<p>
Command objects define specific detailed information about what data is retrieved from a database connection. Command objects can be based on either a database object (such as a table, view, stored procedure or synonym) or a Structured Query Language (SQL) query. You can also create relationships between Command objects to retrieve a set of related data in the form of a hierarchy (see <a href="vbconcommandhierarchies.htm">Command Hierarchies</a>).</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To be valid, a Command object must be associated with a Connection object.</p>
<p>
If a Command object returns data, it is "recordset returning," and the results can be accessed using a Recordset object available from the DataEnvironment object. However, if a Command object does not return data (for example, stored procedures or SQL text that performs an update), it is "non-recordset returning." The Data Environment Designer automatically identifies whether the Command is recordset returning. You can override this setting by using the Recordset Returning check box on the Advanced tab of the Command Properties dialog box.</p>
<p>
At <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defruntime">
</object><a href=JavaScript:alink_2.Click()>run time</a>, how you access the Command object depends on whether the Command object is recordset returning. If the Command object is recordset returning, you can access the Command object as either a property or method from the DataEnvironment object. If it is non-recordset returning, your Command object is only accessible as a method. See <a href="vbconusingdewithyourapp.htm">Using a Data Environment with Your Application</a> for more information.</p>
<h2>Creating a Command Object</h2>
<p>
The Add Command function is available at all times and is independent of the existence of other objects. However, a Command object that is not associated with a Connection object is invalid.</p>
<p>
If a Connection object can be identified from the current focus during the add process, the ActiveConnection property of the Command object is set to that Connection object. If a Connection object is not identified, the Command object is invalid until you associate it with a connection.</p>
<p class=label>
<b>To add a Command object</b>
<ul type=disc>
<li>
Click <b>Add Command</b> in the Data Environment designer toolbar.<p class=tl>
-or–</P><p class=tl>
Right-click a Connection object, or your Data Environment designer, and choose <b>Add Command </b>from the shortcut menu.</P><p class=tl>
Once a Command object is added, the Data Environment's outline view shows the new Command object. The default name for this object is "Command," followed by a number, such as Command1.</P><p class=tl>
Use the following procedure to specify Command object properties.</P></li>
</ul>
<p class=label>
<b>To specify Command object properties</b>
<ol>
<li>
Right-click the Connection object and choose <b>Properties</b> to access the <b>Command Properties</b> dialog box.<br><br></li>
<li>
Click the <b>General</b> tab, and set the following:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Item</b></td>
<td class=label width=75%><b>Purpose</b></td>
</tr>
<tr valign=top>
<td width=25%><b>Command Name</b></td>
<td width=75%>Change the default <b>Command Name</b> to a more meaningful name for your database object. For example, you may wish to change Command1 to "Customers" if the Command object is based on a table called "customers."</td>
</tr>
<tr valign=top>
<td width=25%><b>Connection</b></td>
<td width=75%>If the Command object was created from a Connection object's shortcut menu, the Connection name is automatically set. However, you can change this connection.<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To be valid, each Command object must be associated with a Connection object.</p>
</td>
</tr>
<tr valign=top>
<td width=25%><b>Database Object</b></td>
<td width=75%>Select the type of database object from the drop-down list. This can be a stored procedure, synonym, table, or view.</td>
</tr>
<tr valign=top>
<td width=25%><b>Object Name</b></td>
<td width=75%>Select an object name from the drop-down list. The listed objects are from the connection and match the selected <b>Database Object</b> type.</td>
</tr>
<tr valign=top>
<td width=25%><b>–or–</b></td>
<td width=75%></td>
</tr>
<tr valign=top>
<td width=25%><b>SQL Statement</b></td>
<td width=75%>If this is selected<b> </b>as your data source, type an SQL query that is valid for your database in the <b>SQL Statement</b> box.<p>
-or–</p>
<p>
To build the query, click <b>SQL Builder </b>to launch the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="dvovrQueryDesigner">
</object><a href=JavaScript:alink_3.Click()>query designer</a>.</p>
</td>
</tr>
</table><br>
</li>
<li>
If the Command object is based on a parameterized query or a stored procedure, it may have a parameters collection. To set the <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbdlgParametersDECmdProps">
</object><a href=JavaScript:alink_4.Click()>parameter properties</a>, click the <b>Parameters</b> tab in the <b>Command Properties </b>dialog box.<br><br></li>
<li>
Use the <b>Relation</b>, <b>Grouping</b>, and <b>Aggregates</b> tabs to define relationships and shape the data included in the Recordset. For more information, see <a href="vbconcommandhierarchies.htm">Command Hierarchies</a>.<br><br></li>
<li>
Click the <b>Advanced</b> tab in the <b>Command Properties </b>dialog box to set the properties that change how the data is retrieved or manipulated at <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defruntime">
</object><a href=JavaScript:alink_5.Click()>run time</a>. On this tab, set the <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbdlgAdvancedDECmdProps">
</object><a href=JavaScript:alink_6.Click()>advanced properties</a> that provide your Data Environment control over the Command object properties and its resulting Recordset object.<br><br></li>
<li>
Click <b>OK</b> to apply the properties to the new Command object and close the dialog box.<p class=tl>
If a recordset-returning Command object was successfully created and the <b>Show Fields</b> option is selected in the <b>Options </b>dialog box, you can click the expand (+) <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbdefbitmap">
</object><a href=JavaScript:alink_7.Click()>bitmap</a> from the Data Environment designer's outline view to see a list of fields. If no fields are shown, the cause could be an empty Recordset, an invalid Command object, or an invalid connection.</P></li>
</ol>
<h2>Customizing the Parameter Objects of a Command Object</h2>
<p>
If a Command object is based on a parameterized query or a stored procedure with parameters, the Command object has a Parameters collection. You may want to customize the Parameter objects contained in the collection by changing the data type or making the name more descriptive. For more information, see <object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdobjParameter">
</object><a href=JavaScript:alink_8.Click()>ADO Parameters</a>.</p>
<h3>Changing the Properties of Associated Parameter Objects</h3>
<p>
The following procedure describes how you can change the properties of Parameter objects that are associated with a Command object.</p>
<p class=label>
<b>To change a Command object's associated Parameter object properties</b>
<ol>
<li>
Right-click the Command object that you wish to customize, and then select <b>Properties </b>from the shortcut menu.<br><br></li>
<li>
From the <b>Parameters</b> tab, select a Parameter object from the <b>Parameter </b>list box, and then set the following properties:<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Item</b></td>
<td class=label width=75%><b>Purpose</b></td>
</tr>
<tr valign=top>
<td width=25%><b>Name</b></td>
<td width=75%>Provide a unique, meaningful name for the selected Parameter object.</td>
</tr>
<tr valign=top>
<td width=25%><b>Direction</b></td>
<td width=75%>Specify whether this is an input or output parameter, or both, or if the parameter is the return value from the procedure.</td>
</tr>
<tr valign=top>
<td width=25%><b>DataType</b></td>
<td width=75%>Specify the data type to which the Parameter object is converted.</td>
</tr>
<tr valign=top>
<td width=25%><b>Precision</b></td>
<td width=75%>Specify the maximum size, in bytes.</td>
</tr>
<tr valign=top>
<td width=25%><b>Scale</b></td>
<td width=75%>Specify the maximum number of digits to the right of the decimal point.</td>
</tr>
<tr valign=top>
<td width=25%><b>Size</b></td>
<td width=75%>Specify the maximum size, in bytes.</td>
</tr>
<tr valign=top>
<td width=25%><b>Host Data Type</b></td>
<td width=75%>Specify the data type used when this Parameter object is referenced by the host application. Changing this setting affects the <object id=alink_9 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDataTypes">
</object><a href=JavaScript:alink_9.Click()>data types</a> used in building the type library information for the host. </td>
</tr>
<tr valign=top>
<td width=25%><b>Required </b></td>
<td width=75%>Specify whether the parameter value is required when the Command object is executed.<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;If a required parameter is not set when the Command object is executed, the command will fail.</p>
</td>
</tr>
<tr valign=top>
<td width=25%><b>Value </b></td>
<td width=75%>Specify the default value that is used at run time (unless a value is provided programmatically), and if necessary, at design time, if the Command object must be executed to obtain the field information.</td>
</tr>
</table><br>
</li>
<li>
Click <b>OK</b> to apply the parameter properties to the selected Command object and exit the dialog box.</li>
</ol>
<p>
For more information, see <object id=alink_10 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdcolParameters">
</object><a href=JavaScript:alink_10.Click()>ADO Parameters</a>.</p>
<h2>Dragging From a Data View to Your Data Environment</h2>
<p>
You can automatically create Command objects by dragging from the Data View window to your Data Environment designer. This is an easy and efficient way to create Command objects from tables, views, or stored procedures that are listed in your Data View. If the connection associated with the Command object being dropped doesn't already exist in the Data Environment, a Connection object is automatically created.</p>
<h2>Creating Multiple Command Objects from Stored Procedures</h2>
<p>
You can create multiple Command objects in your Data Environment designer from stored procedures using the Insert Stored Procedures dialog box.</p>
<p class=label>
<b>To insert multiple stored procedures</b>
<ol>
<li>
Click <b>Insert Stored Procedures </b>in the Data Environment designer toolbar.<p class=tl>
-or–</P><p class=tl>
Right-click a DataEnvironment or Connection object and choose <b>Insert Stored Procedures </b>from the shortcut menu.</P></li>
<li>
In the <b>Insert Stored Procedures </b>dialog box, move one or more stored procedures from the <b>Available</b> list to the <b>Add</b> list using the arrows.<p class=tl>
Use <b>&gt;</b> to move the stored procedures to the <b>Add </b>list one at a time, or use <b>&gt;&gt;</b> to move all stored procedures at once. Use <b>&lt;</b> to remove the stored procedures from the <b>Add</b> list one at a time, or use <b>&lt;&lt;</b> to remove all stored procedures at once.</P></li>
<li>
Once the stored procedures are in the <b>Add</b> list, click <b>Insert</b> to add them to your Data Environment. A new Command object is created for each stored procedure.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The name of the Command object defaults to the name of the stored procedure.</p></li>
<li>
Click <b>Close</b> to exit the dialog box.</li>
</ol>
</BODY>
</HTML>

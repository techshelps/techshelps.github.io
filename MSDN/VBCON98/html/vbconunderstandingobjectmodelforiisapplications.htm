<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Object Model for IIS Applications</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconunderstandingobjectmodelforiisapplications"></a>The Object Model for IIS Applications</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUnderstandingObjectModelForIISApplicationsC">
</object></p>
<p>
IIS applications are hosted by an .asp (Active Server Pages) file and make use of several of the objects in the Active Server Pages object model. The webclass uses these objects to access and manipulate information from an HTML page. The ASP objects that a webclass can use include:
<ul type=disc>
<li>
<b>Request</b> — Receives requests from end users in the browser.<br><br></li>
<li>
<b>Response</b> — Sends information to the browser in order to display it to the user.<br><br></li>
<li>
<b>Session</b> — Maintains information about the current user session and stores and retrieves state information.<br><br></li>
<li>
<b>Application</b> — Manages state that is shared across multiple webclass instances.<br><br></li>
<li>
<b>Server</b> — Creates other objects and determines server-specific properties that might influence the webclass's processing.<br><br></li>
<li>
<b>BrowserType</b> — Determines the capabilities of the user's browser and makes processing decisions based on that information.</li>
</ul>
<h2>The ASP Request Object</h2>
<p>
You use the Request object to retrieve information from or about the current user. The Request object gives you access to all of the information passed in any <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefhttp">
</object><a href=JavaScript:alink_2.Click()>HTTP</a> request. HTTP requests contain information about the current user, any data they entered prior to making the request, and arguments that tell the Web server how to process and respond to the request.</p>
<p>
Most frequently, you use the Request object to retrieve information from an HTML form. For example, you might retrieve all of the form elements passed back in a Submit event. The following example shows how you might use the Request object to gather information from the browser:</p>
<pre><code>Private Sub Webitem1_Submit
   'Define variables to hold information retrieved from the request
   Dim first as String
   Dim last as String
   'Retrieve form information and assign it to the variables, using
   'the Request object and its Form collection.
   First = Request.Form("Firstname")
   Last = Request.Form("Lastname")
End Sub
</code></pre>
<p>
You can use the Request object's associated collections to access information. These collections include:
<ul type=disc>
<li>
QueryString — Retrieves the values of additional arguments in a URL when a request is passed using the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefgetmethod">
</object><a href=JavaScript:alink_3.Click()>GET method</a>. GET is used by the Web server to retrieve objects and, in some cases, to send information from an HTML form.<br><br></li>
<li>
Form — Retrieves the value of form elements passed in an HTTP request when the request is passed using the <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefpostmethod">
</object><a href=JavaScript:alink_4.Click()>POST method</a>. POST is a method used by the Web browser to send the information from an HTML form.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;POST is the more common method used to send form information. You can use the Request object to access any of this data. You should not use the GET method in your HTML template files.</p></li>
<li>
Cookies — Retrieves the data contained in <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefcookie">
</object><a href=JavaScript:alink_5.Click()>cookies</a> sent with the form request. Cookies are small parcels of information used to store data about the current user. These can be passed between the browser and the Web server.<br><br></li>
<li>
ServerVariables — Retrieves information such as header values, logon name, or server protocols in use.<br><br></li>
<li>
ClientCertificate — Retrieves information stored in certificate fields when the browser sending the request supports client certificates. Certificates identify a user to the Web server.</li>
</ul>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Getting Information from a User" in the <i>Active Server Pages Scripting Guide</i> for more information on the Request object and its collections.</p>
<h2>The ASP Response Object</h2>
<p>
You use the Response object to return information to the browser. For example, you might use the object's Respond event to write HTML to the browser. There are several methods you can use with the Response object:
<ul type=disc>
<li>
Use the Write or BinaryWrite method to send information directly to a browser.<br><br></li>
<li>
Use the Redirect method to direct the user to a different <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="idh_vbdefurl">
</object><a href=JavaScript:alink_6.Click()>URL</a> than the one the user requested, such as a different webclass or an external page.<br><br></li>
<li>
Use the Cookies collection to set cookie values to return to the browser and store these values for future use. A <i>cookie</i> is a set of information about the user that can be passed between the client and the server, identifying the user to either system.<br><br></li>
<li>
Use the Buffer property to postpone a response while the entire page is processed. <br><br></li>
<li>
Use the AddHeader method to add http headers to a response.</li>
</ul>
<p>
The following example shows how you might use the Response object to write a few lines of HTML code to the browser:</p>
<pre><code>With Response
   'Indicate the beginning of the HTML page
   .Write "&lt;HTML&gt;"
   'Indicate the beginning of the body section
   .Write "&lt;BODY&gt;"
   'Send a line with heading two style followed by
   'a paragraph break
   .Write "&lt;H2&gt;Feedback Form&lt;/H2&gt;&lt;P&gt;"
   'Send a paragraph of text
   .Write "Please enter your comments below:&lt;P&gt;"
   'other write statements to present form elements 
   'and close the HTML document.
End With
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "Sending Information to a User" in the Active Server Pages Scripting Guide for more information on the Response object and its collections.</p>
<h2>The ASP Session and Application Objects</h2>
<p>
The Session and Application objects both store state information about the webclass's end users. The Session object can store information about a single user in the current session. The Application object can store information about multiple users.</p>
<p>
You use the Session object to maintain information about the current user session and to store and retrieve state information. For example, suppose you have an application that uses two main pages: one that summarizes customer information, and one that allows the user to order products. You want to ensure that the customer only sees the information page once, regardless of how many transactions they enter. In order to do this, the webclass must be able to determine whether the user has seen the customer information when it processes each new order. You can do this by using the Session object to retain information about where the user has already been.</p>
<p>
You use the Application object to store information about multiple users. For example, suppose you want to keep track of the number of users who access a webclass and access that statistic online. You can do this by storing a count in the Application object and incrementing it each time a user accesses a part of the webclass.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;See "State Management in IIS Applications" for a code example of storing state in the Session and Application objects.</p>
<h2>The ASP Server Object</h2>
<p>
You use the Server object to create objects and determine server-specific properties that might influence the webclass's processing. For example, suppose you have a library of business objects that are used during event processing. One of these objects must be kept alive throughout the session in order to maintain internal state. You can do this using the Server and Session objects.</p>
<p>
In this case, you could choose to store the object as a Session property, using Server.CreateObject to create an instance of it. This is necessary so that IIS can detect the threading model of the object and optimize subsequent request processing.</p>
<p>
The following code shows how you would do this in your event procedure:</p>
<pre><code>Dim BusObj as SomeBusinessObject
Set BusObj = Server.CreateObject("OurCompany.SomeBusinessObject.1")
'Code here to call methods of the object
Set Session("BusObjInstance") = BusObj
</code></pre>
<h2>The ASP BrowserType Object</h2>
<p>
You use the BrowserType object to determine the capabilities of the user's browser and make processing decisions based on that information. For example, suppose you have an application that contains a button called CheckInventory. This button allows the user to check available inventory before placing an order. You provide two versions of the event procedure for this button in your webclass — one using HTML and one using JavaScript. You might do this if the JavaScript procedure provides a better user experience — for example, it might not cause a page transition, where the HTML procedure would.</p>
<p>
In this scenario, you could use the BrowserType object to determine which procedure to use by determining if the user's browser supports JavaScript. The following code shows how you would use the BrowserType object to make this choice:</p>
<pre><code>Private Sub OrderForm_ProcessTag(ByVal TagName As String, TagContents As String, SendTags as Boolean)

   'If the browser supports Javascript, generate HTML to call 
   'a method on an applet. If it does not, generate HTML to 
   'fire an event on the webclass.
   
   If TagName = "WC@FORMTAGSTART" Then
      If BrowserType.javascript And BrowserType.javaapplets Then
         TagContents = "&lt;FORM onsubmit=""JavaScriptHandler()""&gt;"
      Else
         TagContents = "&lt;FORM ACTION=" &amp; URLFor(OrderForm _
         "OrderForm_Submit") &amp; " METHOD=POST&gt;"
      End If
   End If
   SendTags = False
End Sub
</code></pre>
</BODY>
</HTML>

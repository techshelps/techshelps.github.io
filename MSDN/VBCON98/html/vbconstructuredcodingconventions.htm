<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Structured Coding Conventions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconstructuredcodingconventions"></a>Structured Coding Conventions</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconStructuredCodingConventionsC">
</object></p>
<p>
In addition to naming conventions, structured coding conventions, such as code commenting and consistent indenting, can greatly improve code readability.</p>
<h2>Code Commenting Conventions</h2>
<p>
All procedures and functions should begin with a brief comment describing the functional characteristics of the procedure (what it does). This description should not describe the implementation details (how it does it) because these often change over time, resulting in unnecessary comment maintenance work, or worse yet, erroneous comments. The code itself and any necessary inline comments will describe the implementation.</p>
<p>
Arguments passed to a procedure should be described when their functions are not obvious and when the procedure expects the arguments to be in a specific range. Function return values and global variables that are changed by the procedure, especially through reference arguments, must also be described at the beginning of each procedure.</p>
<p>
Procedure header comment blocks should include the following section headings. For examples, see the next section, "Formatting Your Code."</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Section heading</b></td>
<td class=label width=71%><b>Comment description</b></td>
</tr>
<tr valign=top>
<td width=29%>Purpose</td>
<td width=71%>What the procedure does (not how).</td>
</tr>
<tr valign=top>
<td width=29%>Assumptions</td>
<td width=71%>List of each external variable, control, open file, or other element that is not obvious.</td>
</tr>
<tr valign=top>
<td width=29%>Effects</td>
<td width=71%>List of each affected external variable, control, or file and the effect it has (only if this is not obvious).</td>
</tr>
<tr valign=top>
<td width=29%>Inputs</td>
<td width=71%>Each argument that may not be obvious. Arguments are on a separate line with inline comments.</td>
</tr>
<tr valign=top>
<td width=29%>Returns</td>
<td width=71%>Explanation of the values returned by functions.</td>
</tr>
</table><br>
<p>
Remember the following points:
<ul type=disc>
<li>
Every important variable declaration should include an inline comment describing the use of the variable being declared.<br><br></li>
<li>
Variables, controls, and procedures should be named clearly enough that inline commenting is only needed for complex implementation details.<br><br></li>
<li>
At the start of the .bas module that contains the project's Visual Basic generic constant declarations, you should include an overview that describes the application, enumerating primary data objects, procedures, algorithms, dialogs, databases, and system dependencies. Sometimes a piece of pseudocode describing the algorithm can be helpful.</li>
</ul>
<h2>Formatting Your Code</h2>
<p>
Because many programmers still use VGA displays, screen space should be conserved as much as possible while still allowing code formatting to reflect logic structure and nesting. Here are a few pointers:
<ul type=disc>
<li>
Standard, tab-based, nested blocks should be indented four spaces (the default).<br><br></li>
<li>
The functional overview comment of a procedure should be indented one space. The highest level statements that follow the overview comment should be indented one tab, with each nested block indented an additional tab. For example:</li>
</ul>
<pre><code>'*****************************************************
' Purpose:   Locates the first occurrence of a
'            specified user in the UserList array.
' Inputs:
'   strUserList():   the list of users to be searched.
'   strTargetUser:   the name of the user to search for.
' Returns:   The index of the first occurrence of the
'            rsTargetUser in the rasUserList array. 
'            If target user is not found, return -1.
'*****************************************************

Function intFindUser (strUserList() As String, strTargetUser As _
   String)As Integer
   Dim i As Integer            ' Loop counter.
   Dim blnFound As Integer      ' Target found flag.
   intFindUser = -1
   i = 0
   While i &lt;= Ubound(strUserList) and Not blnFound
      If strUserList(i) = strTargetUser Then
         blnFound = True
         intFindUser = i
      End If
   Wend
End Function
</code></pre>
<h3>Grouping Constants</h3>
<p>
Variables and defined constants should be grouped by function rather than split into isolated areas or special files. Visual Basic generic constants should be grouped in a single module to separate them from application-specific declarations.</p>
<h3>&amp; and + Operators</h3>
<p>
Always use the <b>&amp;</b> operator when linking strings and the <b>+</b> operator when working with numerical values. Using the <b>+</b> operator to concatenate may cause problems when operating on two variants. For example:</p>
<pre><code>vntVar1 = "10.01"
vntVar2 = 11
vntResult = vntVar1 + vntVar2    'vntResult = 21.01
vntResult = vntVar1 &amp; vntVar2   'vntResult = 10.0111
</code></pre>
<h3>Creating Strings for MsgBox, InputBox, and SQL Queries</h3>
<p>
When creating a long string, use the underscore line-continuation character to create multiple lines of code so that you can read or debug the string easily. This technique is particularly useful when displaying a message box (MsgBox) or input box (InputBox) or when creating an SQL string. For example:</p>
<pre><code>Dim Msg As String
Msg = "This is a paragraph that will be " _
&amp; "in a message box. The text is" _
&amp; " broken into several lines of code" _
&amp; " in the source code, making it easier" _
&amp; " for the programmer to read and debug."
MsgBox Msg

Dim QRY As String
QRY = "SELECT *" _
&amp; " FROM Titles" _
&amp; " WHERE [Year Published] &gt; 1988"
TitlesQry.SQL = QRY
</code></pre>
</BODY>
</HTML>

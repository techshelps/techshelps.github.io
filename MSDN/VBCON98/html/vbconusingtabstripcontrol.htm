<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the TabStrip Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconusingtabstripcontrol"></a>Using the TabStrip Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconUsingTabStripControlC">
</object></p>
<p>
A TabStrip acts like the dividers in a notebook or the labels on a group of file folders. By using a TabStrip control, you can define multiple pages for the same area of a window or dialog box in your application.</p>
<p>
<img src="avtct039.gif" border=0></p>
<h2>Possible Uses</h2>
<ul type=disc>
<li>
To create a tabbed dialog that sets various text attributes for a RichTextBox control.<br><br></li>
<li>
To create a tabbed dialog that sets preferences for an application.</li>
</ul>
<h2>The Tabs Collection</h2>
<p>
The control consists of one or more Tab objects in a Tabs collection. At both design time and run time, you can affect the Tab object's appearance by setting properties, and at run time, by invoking methods to add and remove Tab objects.</p>
<h2>Associate the ImageList Control with the TabStrip Control</h2>
<p>
To identify a tab's function, you can assign an image from the ImageList control to the Tab object. You must first associate an ImageList control with the TabStrip control, and this can be accomplished at either design time or run time.</p>
<p class=label>
<b>To associate an ImageList control with a TabStrip control at design time:</b>
<ol>
<li>
Populate the ImageList control with images for the tabs.<br><br></li>
<li>
Right-click on the TabStrip control and click <b>Properties</b> to open the <b>TabStrip Property Page</b> dialog box.<br><br></li>
<li>
On the <b>General</b> tab, click the <b>ImageList</b> box and select the ImageList control you have populated.<br><br></li>
<li>
To associate an ImageList control with the control at run time, simply set the ImageList property to the name of the ImageList control, as shown in the example below:</li>
</ol>
<pre><code>Private Sub Form_Load()
   ' The TabStrip control is named "tabRTF," and the 
   ' ImageList control is named "imlRTF."
   tabRTF.ImageList = imlRTF
End Sub
</code></pre>
<h2>Create Tabs at Design Time or Run Time</h2>
<p>
You can create Tab objects at both design and run time. To create Tab objects at design time, use the Property Pages dialog box.</p>
<p class=label>
<b>To create Tab objects at design time </b>
<ol>
<li>
Right-click the TabStrip control and click <b>Properties</b> to display the <b>Property Pages</b> dialog box.<br><br></li>
<li>
Click <b>Tabs</b> to display the Tabs page, as shown in Figure 2.36, below:</li>
</ol>
<p class=label>
<b>Figure 2.36&nbsp;&nbsp;&nbsp;TabStrip Property Pages</b></p>
<p>
<img src="avtct038.gif" border=0></p>
<h3>Create Tab Objects at Run Time Using the Add Method</h3>
<p>
To create Tab objects at run time, use the Add method for Tab objects.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;One Tab object is created for you by default.</p>
<p class=label>
<b>To create a collection of Tab objects at run time</b>
<ol>
<li>
Declare a variable as type Tab. As you add each Tab object, the variable will contain the reference to the newly created object. Use this reference to set various properties of the new Tab object.<br><br></li>
<li>
Using the Set statement with the Add method, set the object variable to the new Tab object.<br><br></li>
<li>
Using the object variable, set the properties of the new Tab object. </li>
</ol>
<p>
The code below uses the Form object's Load event to create two Tab objects, then sets the Caption, Image, and Key properties of the new Tab object.</p>
<pre><code>Private Sub Form_Load()
   ' The TabStrip control is named "tabData"
   ' Declare a variable, then use the Set
   ' statement with the Add method to create a new
   ' Tab object, while setting the object variable to 
   ' the new Tab. Use the reference to set properties.
   Dim tabX As Tab
   ' Tab 1: Find text.
   Set tabX = tabData.Tabs.Add()
   tabX.Key = "find"
   tabX.Caption = "Find"
   tabX.Image = "Find" ' Assuming this image exists.

   ' Tab 2: Draw objects.
   Set tabX= tabData.Panels.Add()
   tabX.Key = "draw"
   tabX.Caption = "Draw"
   tabX.Image = "draw" ' Assuming this image exists.
End Sub
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Using the Add method without setting the object variable is more efficient than setting the properties with the object variable. In this case, the code above could be rewritten as:</p>
<pre><code>tabData.Tabs.Add , "find", "Find", "find"
tabData.Tabs.Add , "draw", "Draw", "draw"</code></pre>
<h2>Use the Client Area to Position Container Controls</h2>
<p>
The TabStrip control is commonly used to create tabbed dialog boxes. Each page in the dialog box consists of a <i>tab </i>and a <i>client area</i>, as seen in the figure below:</p>
<p>
<img src="avtct040.gif" border=0></p>
<p>
At run time, when the user clicks on a tab, you must program the client area to be reconfigured with a different set of container controls (discussed below in "Managing Tabs and Container Controls").</p>
<p>
At design time, draw a container control, such as the PictureBox or Frame control, on the form. If you use a Frame control, you can set its BorderStyle property to be invisible at run time. Copy and paste the same control to create an array of controls; create one control for each Tab object you have created.</p>
<p>
On each container control, draw the controls that should appear on a tab. Your form may appear something like Figure 2.37, below:</p>
<p class=label>
<b>Figure 2.37&nbsp;&nbsp;&nbsp;TabStrip at design time with two PictureBox controls</b></p>
<p>
<img src="avtct042.gif" border=0></p>
<p>
After you have created the container controls, there is one additional technique required to position them over the TabStrip control's client area: use the Move method with the ClientLeft, ClientTop, ClientWidth, and ClientHeight properties of the Tabstrip control, as shown in the code below:</p>
<pre><code>Private Sub Form_Load()
   ' The name of the TabStrip is "tabRTF."
   ' The Frame control is named "fraTab."
   For i = 0 To fraTab.Count - 1
   With fraTab(i)
      .Move tabRTF.ClientLeft, _
      tabRTF.ClientTop, _
      tabRTF.ClientWidth, _
      tabRTF.ClientHeight
   End With
   Next i
End Sub
</code></pre>
<h2>Managing Tabs and Container Controls</h2>
<p>
A tabbed dialog box contains more than one Tab object. As seen above, a Frame control (or other container control) should be associated with each Tab object. To efficiently manage the numerous Tab objects and container controls, the following strategy can be used:
<ol>
<li>
At design time, create all the Tab objects you need.<br><br></li>
<li>
Create a control array of container controls, one member for each Tab object.<br><br></li>
<li>
On each container control, draw the controls that you want to have on a tab page.<br><br></li>
<li>
At run time, use the control's SelectedItem property to determine the Index of the clicked Tab object.<br><br></li>
<li>
Use the ZOrder method to bring the appropriate container control to the front.</li>
</ol>
<p>
The code to bring the proper container control to the front would then resemble the code below:</p>
<pre><code>Private Sub tabRTF_Click()
   picRTF(tabRTF.SelectedItem.Index - 1).ZOrder 0
End Sub
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;At design time, you can set the Index property of the control array to become a 1-based array. Because the Tabs collection is also a 1-based collection, the above code would then be rewritten:</p>
<pre><code>picRTF(TabRTF.SelectedItem.Index).ZOrder 0
</code></pre>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For an example of code implementing the strategy outlined above, see "TabStrip Scenario: Create a Tabbed Dialog Box."</p>
<h3>Tab Style Property: Buttons or Tabs</h3>
<p>
The Style property determines whether the TabStrip control looks like</p>
<p>
notebook tabs (Tabs),</p>
<p>
<img src="avtct043.gif" border=0></p>
<p>
or push buttons (Buttons).</p>
<p>
<img src="avtct044.gif" border=0></p>
<p>
The advantages of each are outlined below:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Style</b></td>
<td class=label width=79%><b>Possible Use</b></td>
</tr>
<tr valign=top>
<td width=21%>Tabs</td>
<td width=79%>Use the Tabs style to create Tabbed dialog boxes. With this style, the complete tabbed dialog, including the client area, is drawn for you. Your code must manage what appears in the client area.</td>
</tr>
<tr valign=top>
<td width=21%>Buttons</td>
<td width=79%>The Buttons style can be used to create a toolbar or task bar — in other words, when you do not need the client area, but prefer to have only the buttons as an interface element. Alternatively, you may wish to use the Buttons style when you do not need a well-defined client area drawn for you.</td>
</tr>
</table><br>
<h4>Multi-Row Tabs</h4>
<p>
Another feature of the TabStrip control is the MultiRow property. When this property is set to True, a large number of Tab objects appear in rows, as seen in the figure below:</p>
<p>
<img src="avtct045.gif" border=0></p>
<p>
If the MultiRow property is set to False, the same set of tabs appears in a single row, with a pair of scroll buttons at the rightmost end:</p>
<p>
<img src="avtct046.gif" border=0></p>
<p>
The TabWidthStyle property determines the appearance of each row, and, if TabWidthStyle is set to Fixed, you can use the TabFixedHeight and TabFixedWidth properties to set the same height and width for all tabs in the TabStrip control.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Design Considerations for Add-Ins</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbcondesignconsiderationsforaddins"></a>Design Considerations for Add-Ins</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconDesignConsiderationsForAddInsC">
</object></p>
<p>
Before creating an add-in, you should decide what the goal you want your add-in to accomplish and how you want it to work. Two factors that have an impact on this decision are usage of the CreateToolWindow function, and choosing a project compile type.</p>
<h2>CreateToolWindow Function</h2>
<p>
While not a required add-in feature, the CreateToolWindow function is a feature you may want to consider using for many add-ins. When you create an add-in, any forms it uses are Visual Basic forms by default. While this is fine for most applications, some programmers may desire that the add-in window act as other windows in Visual Basic do and dock with other IDE windows. The way to create windows like this is to use ActiveX documents and the CreateToolWindow function.</p>
<p>
A UserDocument window inside a ToolWindow creates an ActiveX document which can dock with existing windows and act like other windows in the Visual Basic IDE. Writing your add-ins to use CreateToolWindow will also aid you in migrating your add-ins to future versions of Visual Basic.</p>
<p>
For an example of how CreateToolWindow is used in an add-in, see the following code fragment, taken from the TabOrder sample application (which is listed in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory):</p>
<pre><code>Dim docTabOrderObject As Object&nbsp; 'user doc instance
' The guidMYTOOL$ constant is the unique registry 
' identifier for your add-in.
Const guidMYTOOL$ = "{B7AFC8D0-EBE5-11cf-A497- _
   00A0C911E8B0}"
Set winWindow = _
gVBInstance.Windows.CreateToolWindow(gVBInstance. _
Addins("TabOrder.Connect"), "TabOrder.docTabOrder", _
LoadResString(10), guidMYTOOL$, docTabOrderObject)
</code></pre>
<p>
The code above creates a Tool Window to hold an ActiveX document.</p>
<p>
You can generate your own values for the guid string constant using a tool called Guidgen.exe, which is located in the \tools\idgen directory of Visual Basic.</p>
<h2>Choosing a Project Type</h2>
<p>
Before getting too involved writing an add-in, you should decide how you want to compile the project.</p>
<p>
In most situations, you’ll likely want to create and compile your add-ins as ActiveX DLL projects, which are in-process components. As in-process components, they provide better overall performance in Visual Basic.</p>
<p>
You may want to compile your add-in as a .dll file if:
<ul type=disc>
<li>
The add-in will always be used in conjunction with the Visual Basic IDE (or other programming environment that can use Visual Basic-created add-ins).<br><br></li>
<li>
The add-in contains references to certain properties that are available only in Visual Basic.<br><br></li>
<li>
The add-in must run as quickly as possible. ActiveX out-of-process components may perform more slowly than in-process components due to the time involved in marshaling across process boundaries.</li>
</ul>
<p>
You might, however, choose to compile an add-in as an ActiveX .exe file&nbsp; if you want the add-in to be able to run on its own — independent of Visual Basic — as well as in the Visual Basic environment.</p>
<p>
When you use the Add-In template to create your add-in (which is recommended), your project type defaults to ActiveX EXE. You can change the project type on the General tab of the Project Properties dialog box.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sharing the CoffeeMonitor</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbconsharingcoffeemonitor"></a>Sharing the CoffeeMonitor</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbconSharingCoffeeMonitorC">
</object></p>
<p>
Of course, a thorough programmer would want to be sure of getting coffee notifications regardless of which application she was using. You could create separate CoffeeMonitor objects for each program in which you wanted to be notified, but that could cause problems if your computer doesn’t have multiple serial ports.</p>
<p>
One way to allow multiple clients to hook up to a single CoffeeMonitor object is to provide a connector object, as shown in the following procedure.</p>
<p class=label>
<b>To create the Connector object</b>
<ol>
<li>
Switch to the instance of Visual Basic containing the Coffee project, and click the End button to return to design mode.<br><br></li>
<li>
On the <b>Project</b> menu, select <b>Add Module</b> to add a standard module to the Coffee project. (If you have the <b>Add Module</b> dialog box enabled, double-click the <b>Module</b> icon when the dialog box appears.) Add the following variable declarations to the Declarations section:<pre><code>Option Explicit
Public gCoffeeMonitor As CoffeeMonitor
Public glngUseCount As Long
</code></pre>
<p class=tl>
The variable <code>gCoffeeMonitor</code> is used to keep a reference to the single shared CoffeeMonitor. The <code>glngUseCount</code> variable keeps track of the number of Connector objects using the CoffeeMonitor.</P></li>
<li>
On the <b>Project</b> menu, select <b>Add Class Module</b> to add a class module to the Coffee project. (If you have the <b>Add Class Module</b> dialog box enabled, double-click the <b>Class Module</b> icon when the dialog box appears.) In the <b>Properties</b> window, set <b>(Name)</b> to <b>Connector</b>.<br><br></li>
<li>
Add the following code to the Connector class’s code window:<pre><code>Public Property Get CoffeeMonitor() As CoffeeMonitor
 &nbsp; Set CoffeeMonitor = gCoffeeMonitor
End Property
</code></pre>
<p class=tl>
The Connector’s read-only CoffeeMonitor property returns a reference to the single global instance of CoffeeMonitor.</P></li>
<li>
In the Object drop down, select <b>Class</b> to open the template for the default event (Initialize). Add the following code to create the global instance of CoffeeMonitor:<pre><code>Private Sub Class_Initialize()
 &nbsp; If gCoffeeMonitor Is Nothing Then
 &nbsp;&nbsp;&nbsp;&nbsp; Set gCoffeeMonitor = New CoffeeMonitor
 &nbsp; End If
 &nbsp; glngUseCount = glngUseCount + 1
End Sub
</code></pre>
<p class=tl>
The first time a client requests a Connector object, it will create the global CoffeeMonitor. Each Connector object increases the use count of the CoffeeMonitor.</P></li>
</ol>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;The Initialize event of the first object a component creates is a good place to initialize the component. You’ll be much less likely to encounter object creation time-out problems and deadlocks that may occur if Sub Main is used to initialize the component.
<ol start=6>
<li>
In the Procedure drop down, select the Terminate event for the class. Add the following code to the event procedure template:<pre><code>Private Sub Class_Terminate()
 &nbsp; glngUseCount = glngUseCount - 1
 &nbsp; If glngUseCount = 0 Then
 &nbsp;&nbsp;&nbsp;&nbsp; Set gCoffeeMonitor = Nothing
 &nbsp; End If
End Sub
</code></pre>
<p class=tl>
Just as objects should dispose of any forms they create, so they should release any objects they use. Because the reference to the global CoffeeMonitor is in a global variable, the last Connector object must release it.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;A compiled out-of-process component shuts down when all clients release their references to its objects, unless it has a loaded form. When compiled, the Coffee component would be kept running by the TestForm that CoffeeMonitor keeps a reference to. Since the CoffeeMonitor object is kept from terminating by the global variable, the component would never shut down. This is discussed in "Starting and Ending a Component," in "General Principles of Component Design."</p></li>
<li>
In the <b>Project Explorer</b> window, double-click <b>CoffeeMonitor</b> to activate it. In the <b>Properties</b> window, set the <b>Instancing</b> property of the class to <b>PublicNotCreatable</b>.<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Make sure you have the CoffeeMonitor class active before you set the Instancing property. If you set the Instancing property of the wrong class, you’ll get an error later when you run CoffeeWatch.</p><p class=tl>
Any client can create an instance of the Connector class, because its Instancing property is set to MultiUse (the default). Clients can use a Connector object’s CoffeeMonitor property to get a reference to the single shared CoffeeMonitor object. By making CoffeeMonitor a PublicNotCreatable class, you allow clients to use the shared global instance — while preventing them from creating their own CoffeeMonitors.</P></li>
<li>
Press CTRL+f5 to run the project. Remember, when working with out-of-process components, the component project must be in run mode before you can edit or run the client project.<p class=tl>
When prompted to save the new files, use the following names. Visual Basic supplies the extensions.</P><table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>File</b></td>
<td class=label width=40%><b>File name</b></td>
<td class=label width=27%><b>Extension</b></td>
</tr>
<tr valign=top>
<td width=33%>Class module</td>
<td width=40%>Coffee_Connector</td>
<td width=27%>.cls</td>
</tr>
<tr valign=top>
<td width=33%>Module</td>
<td width=40%>Coffee_Module1</td>
<td width=27%>.bas</td>
</tr>
</table><br>
</li>
</ol>
<h3>Step by Step</h3>
<p>
This topic is part of a series that walks you through creating a sample ActiveX EXE.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>To</b></td>
<td class=label width=65%><b>See</b></td>
</tr>
<tr valign=top>
<td width=35%>Go to the next step</td>
<td width=65%><a href="vbconusingsharedcoffeemonitor.htm">Using the Shared CoffeeMonitor</a></td>
</tr>
<tr valign=top>
<td width=35%>Start from the beginning</td>
<td width=65%><a href="vbconcreatingoleserver.htm">Creating an ActiveX EXE Component</a></td>
</tr>
</table><br>
</BODY>
</HTML>

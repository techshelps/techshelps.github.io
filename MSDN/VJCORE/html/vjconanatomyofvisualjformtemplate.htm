<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Anatomy of a Visual J++ Form Template</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjconanatomyofvisualjformtemplate"></a>Anatomy of a Visual J++ Form Template</h1>
<p>
A basic WFC form is a public class extending the Form class with a default constructor and an initForm method. When the Form class is instantiated, the class constructor calls the initForm method, which is where the Forms Designer puts all the code used to initialize the form and control properties. Other code specific to your application follows the call to initForm in the constructor. In the MyNotepad application, the title for the application is set here (although it could have just as well been set in the form's Properties window). The constructor for the MyNotepad application is:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;public MyNotepad()
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Required for Visual J++ Form Designer support
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; initForm();&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setBounds(100, 100, 300, 300);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setText("Untitled - MyNotepad");
 &nbsp;&nbsp; }
</code></pre>
<p>
The Visual J++ Forms Designer adds declarations for any added controls in the main body of the class just before the initForm method. For example, here are the declarations for the objects that make up the MyNotepad.java form:</p>
<pre><code>&nbsp;&nbsp;&nbsp;/**
 &nbsp; * NOTE: The following code is required by the Visual J++ Forms
 &nbsp; * Designer. It can be modified using the Form editor. Do not
 &nbsp; * modify it using the Text editor.
 &nbsp; */

 &nbsp; Container components = new Container();
 &nbsp; MainMenu Menu = new MainMenu();
 &nbsp; MenuItem FileMenu = new MenuItem();
 &nbsp; MenuItem FileMenuNew = new MenuItem();
 &nbsp; MenuItem FileMenuOpen = new MenuItem();
 &nbsp; MenuItem FileMenuSave = new MenuItem();
 &nbsp; MenuItem FileMenuSaveAs = new MenuItem();
 &nbsp; MenuItem FileMenuExit = new MenuItem();
 &nbsp; MenuItem HelpMenu = new MenuItem();
 &nbsp; MenuItem HelpMenuAbout = new MenuItem();
 &nbsp; Edit editbox = new Edit();

 &nbsp; private void initForm()
 &nbsp; {
 &nbsp;&nbsp; . . .
</code></pre>
<p>
The Visual J++ Forms Designer creates this declaration code as well as the code in the initForm method that sets properties of the form and the controls placed on the form. The infrastructure for handling events is also tightly integrated with the Forms Designer, which can generate event handler mappings in the initForm method. </p>
<p>
The first two statements in the initForm method demonstrate how the Forms Designer sets&nbsp; properties on an object (in this case setting the menu item Text property to “&amp;New”) and uses the object’s addOnClick method to establish a click event handler for the object.</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;private void initForm()
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; FileMenuNew.setText("&amp;New");
 &nbsp;&nbsp;&nbsp;&nbsp; FileMenuNew.addOnClick(new EventHandler(this.FileMenuNew_click));
</code></pre>
</BODY>
</HTML>

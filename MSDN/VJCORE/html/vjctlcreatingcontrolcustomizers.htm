<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Control Customizers</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjctlcreatingcontrolcustomizers"></a>Creating Control Customizers</h2>
<p>
Customizers are a type of per instance design-time metadata. The <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ClassInfo">
</object><a href=JavaScript:alink_1.Click()>ClassInfo</a> class defines metadata that is specific to the class; in contrast, the customizer provides access to more advanced design-time functionality. By creating a Customizer object, you can add functionality to your control such as specifying design-time activation, adding control verbs, and creating design pages (custom property pages).</p>
<p>
As with the value editors, there is a default implementation of com.ms.wfc.core.ICustomizer&nbsp;— com.ms.wfc.core.Customizer. You can override the getCustomizer method in ClassInfo to return an instance of a customizer.</p>
<p>
In this topic you can find information about the following:
<ul type=disc>
<li>
<a href="#vjctlspecifyingdesigntimeactivation">Specifying Design-Time Activation</a>&nbsp;&nbsp;&nbsp;Testing activation in regions of a control.<br><br></li>
<li>
<a href="#vjctlspecifyingcontrolverbs">Specifying Control Verbs</a>&nbsp;&nbsp;&nbsp;Adding a control-specific command to the control's shortcut menu.<br><br></li>
<li>
<a href="#vjctlspecifyingdesignpages">Specifying Design Pages</a>&nbsp;&nbsp;&nbsp;Creating custom Property pages.</li>
</ul>

<h3><a name="vjctlspecifyingdesigntimeactivation"></a>Specifying Design-Time Activation</h3>
<p>
WFC supports design-time activation of controls, such as design-time scrolling or item expansion, through a simple hit testing scheme. When a control is selected, hit test requests will be passed to the control’s customizer. If the hit test returns true then the control will be considered active at that location. This simple architecture allows for very seamless activation of regions of a control, such as the tab area of a tab strip.</p>
<p>
The following example illustrates a simple hit testing method that allows the control to receive messages when the mouse is over the top 50 pixels of the control:</p>
<p class=indent>
<b>Note&nbsp;&nbsp;&nbsp;</b>A control is only activated (and the getHitTest event is fired) when it is the primary selected component.</p>
<pre><code>import com.ms.wfc.ui.*;
import com.ms.wfc.core.*;

public class MyTabControl extends Control { 
 &nbsp;&nbsp; 
 &nbsp;&nbsp; public static class ClassInfo extends Control.ClassInfo {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ICustomizer getCustomzier(Object comp) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ((MyTabControl)comp).new Customizer();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }
 &nbsp;&nbsp; 
 &nbsp;&nbsp; public class Customizer extends com.ms.wfc.core.Customizer {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public boolean getHitTest(Point pt) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (pt.y &lt; 50) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }
}
</code></pre>

<h3><a name="vjctlspecifyingcontrolverbs"></a>Specifying Control Verbs</h3>
<p>
Verbs allow you to define design-time actions that can be performed on an object. Verbs typically appear on the shortcut menu for the control in the designer.</p>
<p>
To create a verb, subclass the Customizer class and then create a CustomizerVerb object, which allows you to specify the text for your verb and to create a delegate that binds the action of the verb to a method that you specify.</p>
<p>
The following example illustrates how to create a verb called About. The About class offers one verb that reads "About" in the context menu and displays a simple message box. The method to display the results of the Action verb is included in this class:</p>
<pre><code>// About.java
import com.ms.wfc.ui.*;
import com.ms.wfc.core.*;

public class About extends Control {
 &nbsp;&nbsp; public static class ClassInfo extends Control.ClassInfo {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ICustomizer getCustomizer(Object comp) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ((About)comp).new Customizer();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }
 &nbsp;&nbsp; public class Customizer extends com.ms.wfc.core.Customizer {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public CustomizerVerb[] getVerbs() {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CustomizerVerb v = new CustomizerVerb("About", 
               new VerbExecuteEventHandler(About.this.showAbout));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new CustomizerVerb[] {v};
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }
 &nbsp;&nbsp; 
 &nbsp;&nbsp; private void showAbout(Object sender, VerbExecuteEvent event) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageBox.show("This control was written in WFC", "About",
         MessageBox.OK);
 &nbsp;&nbsp; }
}
</code></pre>
<p>
In addition to the data and the delegate, you can specify the checked and enabled state of the item and associate a bitmap with the item. Although currently Visual J++ will not display a bitmap specified in a customizer (for instance, in a shortcut menu), other hosts might support this feature.</p>

<h3><a name="vjctlspecifyingdesignpages"></a>Specifying Design Pages</h3>
<p>
Design pages are the WFC equivalent of property pages. Design pages can be edited in the design-time environment. To implement a design page, you create a class that extends DesignPage class and overrides the onReadProperty and onWriteProperty methods.</p>
<p class=indent>
<b>Note&nbsp;&nbsp;&nbsp;</b> Although WFC supports design pages, you are encouraged to provide functionality for your control through custom editors, verbs, and design-time activation. For details, see <a href="vjctlcreatingcustompropertiesvalueeditor.htm">Creating a Custom Properties Value Editor</a>.</p>
<p>
The following example illustrates how to create a design page for an alignment property. The alignment values (left, center, right) are implemented as group of option buttons. In the onReadProperty method, the code checks for the alignment property and returns the object value of the property as it is set in the design page. In the onWriteProperty method, the code again checks for alignment and displays its value in the design page. In the handle for all the radio buttons, the setDirty method is called, which marks the design page as dirty and enables the Apply button in the Properties window:</p>
<pre><code>// SuperLabelDP.java
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;

public class SuperLabelDP extends DesignPage { 
 &nbsp;&nbsp; public SuperLabelDP() { 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; initForm();
 &nbsp;&nbsp; }

 &nbsp;&nbsp; private void setAlign(int value) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (value) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case AlignStyle.LEFT:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton1.setChecked(true);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case AlignStyle.CENTER:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton2.setChecked(true);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case AlignStyle.RIGHT:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton3.setChecked(true);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }

 &nbsp;&nbsp; private int getAlign() {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int align = AlignStyle.LEFT;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (radioButton1.getChecked()) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; align = AlignStyle.LEFT;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (radioButton2.getChecked()) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; align = AlignStyle.CENTER;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (radioButton3.getChecked()) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; align = AlignStyle.RIGHT;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return align;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; 
 &nbsp;&nbsp; private void radioClicked(Object sender, Event e) { 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setDirty();
 &nbsp;&nbsp; }

 &nbsp;&nbsp; protected Object onReadProperty(String name) { 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (name.equals("alignment")) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new Integer(getAlign());
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return null;
 &nbsp;&nbsp; }

 &nbsp;&nbsp; protected void onWriteProperty(String name, Object value) { 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (name.equals("alignment") &amp;&amp; value instanceof Integer) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setAlign(((Integer)value).intValue());
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Container components = new Container();
 &nbsp;&nbsp; GroupBox groupBox1 = new GroupBox();
 &nbsp;&nbsp; RadioButton radioButton1 = new RadioButton();
 &nbsp;&nbsp; RadioButton radioButton2 = new RadioButton();
 &nbsp;&nbsp; RadioButton radioButton3 = new RadioButton();

 &nbsp;&nbsp; private void initForm() { 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setText("Alignment");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setAutoScaleBaseSize(13);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setBorderStyle(FormBorderStyle.NONE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setClientSize(new Point(307, 131));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setControlBox(false);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setMaxButton(false);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setMinButton(false);

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupBox1.setLocation(new Point(8, 8));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupBox1.setSize(new Point(128, 112));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupBox1.setTabIndex(0);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupBox1.setTabStop(false);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupBox1.setText("Alignment ");

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton1.setLocation(new Point(8, 16));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton1.setSize(new Point(112, 25));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton1.setTabIndex(0);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton1.setTabStop(true);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton1.setText("Left");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton1.setChecked(true);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton1.addOnClick(new EventHandler(this.radioClicked));

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton2.setLocation(new Point(8, 48));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton2.setSize(new Point(112, 25));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton2.setTabIndex(1);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton2.setText("Center");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton2.addOnClick(new EventHandler(this.radioClicked));

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton3.setLocation(new Point(8, 80));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton3.setSize(new Point(112, 25));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton3.setTabIndex(2);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton3.setText("Rigt");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton3.addOnClick(new EventHandler(this.radioClicked));

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setNewControls(new Control[] {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupBox1});
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupBox1.setNewControls(new Control[] {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton3, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton2, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; radioButton1});
 &nbsp;&nbsp; }
}
</code></pre>
</BODY>
</HTML>

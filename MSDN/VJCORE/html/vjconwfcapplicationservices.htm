<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using WFC Application Services</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjconwfcapplicationservices"></a>Using WFC Application Services</h1>
<p>
The com.ms.wfc.app package contains many classes that provide WFC application services. Many of these operations belong to the Application object itself. These operations have mostly to do with creating threads, starting the application, handling application events, and so on. Because understanding Java threads is important, it is discussed in its own section, <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjconUsingJavaThreadsWithWFC">
</object><a href=JavaScript:alink_1.Click()>Using Java Threads with WFC</a>. </p>
<p>
Other operations that qualify as application services pertain to those provided by the Win32 operating system. These include accessing the Windows registry, accessing Clipboard data, and retrieving system information, among other operations. </p>
<h1>Starting and Quitting an Application</h1>
<p>
The <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Application_run">
</object><a href=JavaScript:alink_2.Click()>Application.run</a> method starts a WFC application. This is typically placed in the main method of the Form-based class that constitutes the main application form. Application.run has overloaded methods that take either no parameters or one parameter specifying the form class that represents the main window of the application. For example, the following is a typical form of this call:</p>
<pre><code>   public static void main(String args[])
   {
      Application.run(new MyMainWindow());
   }
</code></pre>
<p>
If a form is passed to the run method, the form's visible property is automatically set to true, and an onClosed event handler is added to the form. The onClosed event handler calls the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Application_exitThread">
</object><a href=JavaScript:alink_3.Click()>Application.exitThread</a> method when the form is closed. If no form is passed, the application runs until <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Application_exit">
</object><a href=JavaScript:alink_4.Click()>Application.exit</a> is called, shutting down all threads and windows on the application, or until exitThread is called, shutting down just the application's current thread. </p>
<h1>Handling Application Events </h1>
<p>
You use the Application object to assign event handlers for five different events that occur in the context of the application: applicationExit, idle, settingChange, systemShutdown, and threadException. The following addOn methods can be called to define event handlers for these events.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Application Method</b></td>
<td class=label width=68%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=32%><object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Application_addOnApplicationExit">
</object><a href=JavaScript:alink_5.Click()>addOnApplicationExit</a></td>
<td width=68%>Specifies a handler that is called when the application quits. You can clean up application resources here that will not be released by garbage collection. (To force the application not to quit, specify a handler for the form’s closing event.) </td>
</tr>
<tr valign=top>
<td width=32%><object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Application_addOnIdle">
</object><a href=JavaScript:alink_6.Click()>addOnIdle</a></td>
<td width=68%>Specifies a handler that is called when the application’s message queue is idle, for example, to perform background operations or application cleanup.</td>
</tr>
<tr valign=top>
<td width=32%><object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Application_addOnSettingChange">
</object><a href=JavaScript:alink_7.Click()>addOnSettingChange</a></td>
<td width=68%>Specifies a handler that is called when the user changes window settings.</td>
</tr>
<tr valign=top>
<td width=32%><object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Application_addOnSystemShutdown">
</object><a href=JavaScript:alink_8.Click()>addOnSystemShutdown</a></td>
<td width=68%>Specifies a handler that is called immediately before a system shutdown initiated by a user. This provides an opportunity to save data.</td>
</tr>
<tr valign=top>
<td width=32%><object id=alink_9 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Application_addOnThreadException">
</object><a href=JavaScript:alink_9.Click()>addOnThreadException</a></td>
<td width=68%>Specifies a handler that is called when an untrapped Java exception has been thrown, allowing the application to gracefully handle the exception. This event handler takes a <object id=alink_10 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.ThreadExceptionEvent">
</object><a href=JavaScript:alink_10.Click()>com.ms.wfc.app.ThreadExceptionEvent</a> object, which has one field that represents the exception thrown. </td>
</tr>
</table><br>
<p>
All these "addOn" methods have reciprocal "removeOn" methods to remove the event handler.</p>
<h1>Accessing System Information</h1>
<p>
The Win32 system contains a large amount of information that is accessible to a WFC application or component. Most of this access is through classes in the com.ms.wfc.app package. Much of this information is stored in the Windows registry and accessed through the <object id=alink_11 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.RegistryKey">
</object><a href=JavaScript:alink_11.Click()>RegistryKey</a> and <object id=alink_12 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Registry">
</object><a href=JavaScript:alink_12.Click()>Registry</a> classes. Other system information, such as Windows display element sizes, operating system settings, network availability, and the hardware capabilities, are accessed using static methods in the <object id=alink_13 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.SystemInformation">
</object><a href=JavaScript:alink_13.Click()>com.ms.wfc.app.SystemInformation</a><b> </b>class. System time is available using the <object id=alink_14 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Time">
</object><a href=JavaScript:alink_14.Click()>com.ms.wfc.app.Time</a> class.</p>
<p>
This section provides an overview of how a WFC application can access this system information.</p>
<h2>Windows Registry Information</h2>
<p>
The RegistryKey class in the com.ms.wfc.app package contains methods to access the Windows system registry. Use the methods in this class to create and delete subkeys, to get the count and names of subkeys for the current key, and to retrieve, set, and delete values assigned to subkeys. </p>
<p>
The <object id=alink_15 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Registry">
</object><a href=JavaScript:alink_15.Click()>com.ms.wfc.app.Registry</a> class contains fields holding <object id=alink_16 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.RegistryKey">
</object><a href=JavaScript:alink_16.Click()>RegistryKey</a> objects that represent the root keys of the registry (those starting with HKEY_). (Root RegistryKey objects can also be instantiated using the getBaseKey method.) Methods can be called on any RegistryKey object to enumerate and manipulate keys and key values in the subkey tree below the root object. For example, the following code obtains an array of subKey names under the HKEY_CURRENT_USER key and the number of names in that array:</p>
<pre><code>   int subKeyCount;
   String[] subKeyNames;
   subKeyNames = Registry.CURRENT_USER.getSubKeyNames();
   subKeyCount = Registry.CURRENT_USER.getSubKeyCount();</code></pre>
<p>
Similarly, any subkey can be retrieved or set given its path, and subkey value names and data can be retrieved or set given the value name. The following example shows retrieving the most recently used file names in Visual Studio and displaying them in an edit box:</p>
<pre><code>   String path; // Holds the path name.
   String[] valueNames; // Holds array of MRU file names in the key.
   int valueCount; // The number of MRU file names in valueNames.
   path = new    String("Software\\Microsoft\\VisualStudio\\6.0\\FileMRUList");
   RegistryKey subKey = registry.CURRENT_USER.getSubKey( path );
   // Get the file names and the number of file names.
   valueNames = subKey.getValueNames();
   valueCount = subKey.getValueCount();
   if (valueCount &gt; 0)
      for (int i = 0; i &lt; valueCount; ++i){
         // Get the value, which is the actual file name.
         String value = new&nbsp;    String((String)subKey.getValue(valueNames[i]));
         // Concatenate the name ("1", "2", etc.) with the file name value.
         String valString = new String(valueNames[i] + "&nbsp;&nbsp; " + value);
         // Add this to the edit box.
         edit1.setText(edit1.getText()+ valString +"\r\n");
      }
  </code></pre>
<p>
You can also create new keys, using the createSubKey method and set values in that key using the setValue method. </p>
<h2>Locale Information</h2>
<p>
Locale information provides details about the language and regional settings on the user's computer. There are many characteristics about a language or region that are stored. These include the character set, international telephone codes, how monetary information is displayed, which calendar is used, the measurement system, and so on.</p>
<p>
This information is typically set using the Regional Settings dialog box in Control Panel, but it is also available programmatically. In WFC this access is provided through the methods in the <object id=alink_17 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Locale">
</object><a href=JavaScript:alink_17.Click()>com.ms.wfc.app.Locale</a> class and through the many subclasses of Locale that contain field constants that pertain to Locale methods. For details about setting and retrieving this information, see the methods in the Locale class.</p>
<h2>Time Information</h2>
<p>
Another category of system information is time. The <object id=alink_18 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Time">
</object><a href=JavaScript:alink_18.Click()>com.ms.wfc.app.Time</a> class provides a Time object that has many capabilities, including capturing system time: the default constructor creates a Time object with the system date and time. Beyond retrieving system time information, the Time object is useful for doing many other things, such as comparing Date and Time objects, converting the time to various formats, and storing a Time object for later retrieval. </p>
<p>
Time objects, once created, cannot be altered. However, the Time class provides many methods for creating new objects with offset time (such as addSeconds, addMinutes, addHours, addDays, and addYears). Also, there are many methods for retrieving just one of the properties of a Time object, such as the second, minute, hour, day, and so forth.</p>
<p>
The Time object in WFC stores time as the number of hundred-nanosecond units since Jan 1, 100ad. The maximum value that can be stored in a WFC Time object is Dec 31, 10,000ad. Converting WFC Time objects to other formats (Strings, Variants, SYSTEMTIME, and so on) can cause loss of accuracy, and not all formats can store this wide of a range.</p>
<p>
Do not confuse the Time class with another com.ms.wfc.app class called <object id=alink_19 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Timer">
</object><a href=JavaScript:alink_19.Click()>Timer</a>. Timer is actually a control; however, it is not in the com.ms.wfc.ui package because it does not have a user interface.</p>
<h1>Performing Clipboard and Drag-and-Drop Operations</h1>
<p>
The drag-and-drop feature in WFC is based on the Win32 (OLE) model, which implements a shortcut for copying and pasting data. When you use the Clipboard, you must perform several steps involving selecting the data, choosing Cut or Copy from the context menu, moving to the destination file, window, or application, and choosing Paste from the context menu. (The origin of the data is called the <i>source</i> and the destination is called the <i>target</i>.)</p>
<p>
The drag-and-drop feature removes the necessity of using the context menu. Instead, it uses the action of pressing the left mouse button to capture the selected data in the source and releasing the button in the target to drop it. Drag-and-drop operations can transfer any data that can be placed on the Clipboard; consequently, the data formats for drag and drop are the same as those of the Clipboard. Data formats specify, for example, whether the data is text, bitmap, HTML, .wav, and so on. The <object id=alink_20 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.DataFormats">
</object><a href=JavaScript:alink_20.Click()>com.ms.wfc.app.DataFormats</a><b> </b>class contains fields pertaining to each of the Clipboard formats. These field names (such as CF_TEXT) come straight from the Win32 constant names.</p>
<p>
The data for Clipboard and drag-and-drop operations is stored in a com.ms.wfc.app class called <object id=alink_21 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.DataObject">
</object><a href=JavaScript:alink_21.Click()>DataObject</a>, which implements the <object id=alink_22 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.IDataObject">
</object><a href=JavaScript:alink_22.Click()>IDataObject</a> interface. IDataObject defines methods for setting and retrieving the data, getting a list of data formats in the data object, and querying for the existence a specific data format. </p>
<p>
To programmatically place data on and retrieve it from the Clipboard, use the static methods in <object id=alink_23 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.Clipboard">
</object><a href=JavaScript:alink_23.Click()>com.ms.wfc.app.Clipboard</a>. Clipboard.setDataObject takes an IDataObject<b> </b>and places it on the Windows Clipboard; Clipboard.getDataObject returns an IDataObject from the Clipboard. The target must make sure that the data format on the Clipboard is one that it can use. To do this, it should query the data object with the <object id=alink_24 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.IDataObject_getDataPresent">
</object><a href=JavaScript:alink_24.Click()>IDataObject.getDataPresent</a> method, passing it a data format that it can accept; getDataPresent returns true if this type of data is present. </p>
<h2>Implementing a Drop Source</h2>
<p>
For any WFC control component (based on com.ms.wfc.ui.Control), the <object id=alink_25 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Control_doDragDrop">
</object><a href=JavaScript:alink_25.Click()>Control.doDragDrop</a> method is called to start the operation. This is typically done in response to the user's moving the mouse with the left button pressed. Therefore, the code is placed in a mouseMove event handler where the <object id=alink_26 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.MouseEvent">
</object><a href=JavaScript:alink_26.Click()>MouseEvent</a> object is checked to see if the left button is down, indicating the start of a drag operation. For example, the following is an event handler for a list box control containing file names:</p>
<pre><code>   private void listFiles_mouseMove(Object source, MouseEvent e)
   {
      //if the left button is down, do the drag/drop
      if(this.getMouseButtons()==MouseButton.LEFT)
      {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String data = (String)listFiles.getSelectedItem();
         listFiles.doDragDrop( data, DragDropEffect.ALL);
      }                      
   }
 </code></pre>
<p>
The doDragDrop method takes the data to be transferred and a <object id=alink_27 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.DragDropEffect">
</object><a href=JavaScript:alink_27.Click()>com.ms.wfc.ui.DragDropEffect</a> object. The DragDropEffect class contains the following constants that can be combined using the bitwise OR for the intended mode of the drag-and-drop operation. </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>DragDropEffect Method</b></td>
<td class=label width=68%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=32%><object id=alink_28 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.DragDropEffect_COPY">
</object><a href=JavaScript:alink_28.Click()>COPY</a></td>
<td width=68%>Specifies that data will not be removed from the source after the transfer.</td>
</tr>
<tr valign=top>
<td width=32%><object id=alink_29 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.DragDropEffect_MOVE">
</object><a href=JavaScript:alink_29.Click()>MOVE</a></td>
<td width=68%>Specifies that data will be removed from the source after the transfer.</td>
</tr>
<tr valign=top>
<td width=32%><object id=alink_30 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.DragDropEffect_SCROLL">
</object><a href=JavaScript:alink_30.Click()>SCROLL</a></td>
<td width=68%>Specifies that data will be scrolled in the target after the transfer. </td>
</tr>
<tr valign=top>
<td width=32%><object id=alink_31 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.DragDropEffect_ALL">
</object><a href=JavaScript:alink_31.Click()>ALL</a></td>
<td width=68%>Specifies that data will be removed from the source after the transfer and scrolled into the target (essentially COPY | MOVE | SCROLL).</td>
</tr>
<tr valign=top>
<td width=32%><object id=alink_32 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.DragDropEffect_NONE">
</object><a href=JavaScript:alink_32.Click()>NONE</a><u> </u></td>
<td width=68%>Specifies that no operation is performed.</td>
</tr>
</table><br>
<p>
The target that receives the data in the drag-drop operation receives the dragDrop event, which contains this DragDropEffect object, so it can easily determine the intent of the operation.</p>
<h2>Implementing a Drop Target</h2>
<p>
The drop part of the drag-and-drop operation is handled as an event. The Control class provides the event handler infrastructure for these drag-and-drop events: dragDrop, dragEnter, dragLeave, and dragOver. You can use the following methods to specify handlers for these events. </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=39%><b>Control Method</b></td>
<td class=label width=61%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=39%><object id=alink_33 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Control_addOnDragDrop">
</object><a href=JavaScript:alink_33.Click()>addOnDragDrop</a></td>
<td width=61%>Specifies a handler for data that is dropped into your control or window (when the left mouse button is released). </td>
</tr>
<tr valign=top>
<td width=39%><object id=alink_34 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Control_addOnDragEnter">
</object><a href=JavaScript:alink_34.Click()>addOnDragEnter</a></td>
<td width=61%>Specifies a handler for drop data as the cursor first enters the window. </td>
</tr>
<tr valign=top>
<td width=39%><object id=alink_35 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Control_addOnDragLeave">
</object><a href=JavaScript:alink_35.Click()>addOnDragLeave</a></td>
<td width=61%>Specifies a handler for drop data as the cursor leaves the window. </td>
</tr>
<tr valign=top>
<td width=39%><object id=alink_36 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Control_addOnDragOver">
</object><a href=JavaScript:alink_36.Click()>addOnDragOver</a></td>
<td width=61%>Specifies a handler for drop data as the cursor is dragged across the window. </td>
</tr>
</table><br>
<p>
All these "addOn" methods have reciprocal "removeOn" methods to remove the event handler. As with all event handler addOn and removeOn methods in WFC, these methods take a delegate (in this case, <object id=alink_37 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.DragEventHandler">
</object><a href=JavaScript:alink_37.Click()>DragEventHandler</a>) that is created with the name of your handler method. For example, the following line adds the txtFile_dragDrop method as a dragDrop event handler: </p>
<p>
<code>txtFile.addOnDragDrop(new DragEventHandler(this.txtFile_dragDrop));</code></p>
<pre></pre>
<p>
Of all the drag-and-drop events, the dragDrop event is the most commonly handled. Regardless of which of these events is handled, the code in the handler must do at least three things. It must first determine if it can accept the data format, and if so, it must then copy the data and optionally display it (or provide some user interface feedback that the data was dropped). </p>
<p>
All data and information is passed in the <object id=alink_38 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.DragEvent">
</object><a href=JavaScript:alink_38.Click()>DragEvent</a> event. This contains, among other fields, a data field and an effect field. The <object id=alink_39 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.DragEvent_data">
</object><a href=JavaScript:alink_39.Click()>DragEvent.data</a> field contains an object that supports <object id=alink_40 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.IDataObject">
</object><a href=JavaScript:alink_40.Click()>IDataObject</a> that has methods to retrieve the data and the data formats and to query for the existence of a specific format. </p>
<p>
Therefore, the handler must first call <object id=alink_41 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.IDataObject_getDataPresent">
</object><a href=JavaScript:alink_41.Click()>DragEvent.data.getDataPresent</a> method with a format it will accept and then determine whether it holds that data type. If so, it can then call the <object id=alink_42 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.app.IDataObject_getData">
</object><a href=JavaScript:alink_42.Click()>DragEvent.data.getData</a><b> </b>method (passing in that data type) and retrieve the data. How the data is displayed is up to that control. The following example illustrates an edit control dragDrop event handler that displays text data dropped to it.</p>
<pre><code>&nbsp;   private void txtFile_dragDrop(Object source, DragEvent e)
   {
      // If text is in the object, write it into the edit control.
      if (e.data.getDataPresent(DataFormats.CF_TEXT))
      {
         String filename=(String)e.data.getData(DataFormats.CF_TEXT);
         txtFile.setText(filename);
      }
   }
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Syntax for @dll.import</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjconsyntaxfordll.import"></a>Syntax for @dll.import</h1>
<p>
The @dll.import directive should be placed just above the method declaration. The syntax of the directive is:</p>
<pre><code>&nbsp;&nbsp;/**@dll.import("<i>LibName</i>",&lt;<i>Modifier</i>&gt;)*/
  ...method declaration...;
</code></pre>
<p>
<i>LibName</i> is the name of the DLL that contains the function you want to invoke. <i>Modifier</i> is optional, and the value that you should supply for it varies depending on your needs. In the method declaration, you can use the function name that the DLL uses, or you can give the method a different name by using aliasing. For information on aliasing, see <a href="vjconaliasing(methodrenaming).htm">Aliasing (Method Renaming)</a>. The Java data types that you choose for the parameters and for the return value of the method should be types that map to the types of the DLL function parameters and return value. See <a href="vjconhowdatatypesaremarshaled.htm">How Data Types are Marshaled</a> for more information about how Java data types map to native types. </p>
<p>
The following table presents the @dll.import syntax for several situations that are described in this section.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Situation</b></td>
<td class=label width=47%><b>Required Syntax</b></td>
<td class=label width=30%><b>Explanation</b></td>
</tr>
<tr valign=top>
<td width=23%>Calling Win32 DLLs</td>
<td width=47%><pre><code>/**@dll.import("Libname")*/</code></pre>
</td>
<td width=30%></td>
</tr>
<tr valign=top>
<td width=23%>Calling OLE APIs</td>
<td width=47%><pre><code>/**@dll.import("Libname", ole)*/</code></pre>
</td>
<td width=30%></td>
</tr>
<tr valign=top>
<td width=23%>Aliasing</td>
<td width=47%><pre><code>/**@dll.import("Libname", entrypoint="DLLFunctionName")*/</code></pre>
</td>
<td width=30%>In the method declaration, use the Java name that you selected.</td>
</tr>
<tr valign=top>
<td width=23%>Linking by Ordinal</td>
<td width=47%><pre><code>/**@dll.import("Libname", entrypoint="#ordinal")*/</code></pre>
</td>
<td width=30%>"ordinal" is a 16-bit integer, specified in decimal, that indicates the DLL function that you are importing.</td>
</tr>
</table><br>
</BODY>
</HTML>

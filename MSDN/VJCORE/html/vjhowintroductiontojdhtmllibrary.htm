<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Quick Start</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<h1><a name="vjhowintroductiontojdhtmllibrary"></a>Quick Start</h1>
<p>
To help you get up and running using the com.ms.wfc.html package to implement Java and DHTML, here are the basic steps you can perform to create a simple DHTML project and add your own dynamic behavior to it. While this is by no means the entire story, it sets the stage for the rest of this topic and for the samples. There are five basic steps when using the com.ms.wfc.html package:
<ol>
<li>
Create a new project by choosing New Project from the File menu and selecting Code-behind HTML from the Web Pages category. <p class=tl>
This generates a project containing a class called Class1, which extends DhDocument. This class represents the dynamic HTML document. You add initialization code to its initForm method to control the document’s contents and behavior.</P><p class=tl>
You can now extend the behavior of your document by doing the following:</P></li>
<li>
Create new elements (such as DhButton) or create element objects that represent existing elements in the document (on the HTML page). <br><br></li>
<li>
Hook event handlers into some of your elements. <br><br></li>
<li>
In your Class1.initForm method, add the new elements using the setNewElements <b> </b>method, and bind any existing elements using the setBoundElements method.<br><br></li>
<li>
Write the event handler methods you hooked up in step 3.</li>
</ol>
<p>
Your document class will look something like this:</p>
<pre><code>import com.ms.wfc.html.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;

public class Class1 extends DhDocument
{
 &nbsp; public Class1()
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; initForm();
 &nbsp; }


 &nbsp; // Step 2: create objects to represent a new elements…
 &nbsp; DhButton newElem = new DhButton();
   // … as well as elements that already exist in the HTML page.
 &nbsp; DhText existElem = new DhText();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; private void initForm( )
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; // Set properties to existing elements and newly added elements.
 &nbsp;&nbsp;&nbsp;&nbsp; newElem.setText(“hello world”);
 &nbsp;&nbsp;&nbsp;&nbsp; existElem.setBackColor(Color.BLUE);

 &nbsp;&nbsp;&nbsp;&nbsp; // Step 3: hook up an event handler to your object
 &nbsp;&nbsp;&nbsp;&nbsp; newElem.addOnClick(new EventHandler(this.onClickButton));

 &nbsp;&nbsp;&nbsp;&nbsp; // Step 2: create an object to represent an existing element
 &nbsp;&nbsp;&nbsp;&nbsp; existElem = new DhText();

 &nbsp;&nbsp;&nbsp;&nbsp; // Step 4: call setNewElements with an array of new elements
 &nbsp;&nbsp;&nbsp;&nbsp; setNewElements(new Component[] { newElem });

 &nbsp;&nbsp;&nbsp;&nbsp; // Step 4: call bindNewElements with an array of existing elements
 &nbsp;&nbsp;&nbsp;&nbsp; setBoundElements(new DhElement[]{ existElem.setBindID("Sample") });
 &nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp; // Step 5: implement your event handler
 &nbsp; private void onClickButton(Object sender, Event e) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; existElem.setText("Hello, world");
 &nbsp; }
}</code></pre>
<p>
The Java portion of the exercise is complete. The other part is the HTML code. The following example shows a simplified version of the HTML document generated by the Code-behind HTML project template. There are two HTML elements that connect this HTML to the code in your project:
<ul type=disc>
<li>
The &lt;OBJECT&gt; tag loads the com.ms.wfc.html.DhModule class, which is instantiated by the Virtual Machine for Java.<br><br></li>
<li>
The &lt;OBJECT&gt; tag has a parameter called CODECLASS. The value of this parameter is the name of the user class that extends DhDocument (for example, Class1).</li>
</ul>
<pre><code>&lt;HTML&gt;
&lt;BODY&gt;
&lt;OBJECT classid="java:com.ms.wfc.html.DhModule" 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; height=0 width=0 ... VIEWASTEXT&gt;
&lt;PARAM NAME=CABBASE VALUE=MyProject&gt;
&lt;PARAM NAME=CODECLASS VALUE=Class1&gt;
&lt;/OBJECT&gt;

&lt;span id=Sample&gt;&lt;/span&gt;
&lt;!-- Insert your own HTML here --&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
Open Internet Explorer 4.0, point it at your HTML file, and you can see your application run. </p>
</BODY>
</HTML>

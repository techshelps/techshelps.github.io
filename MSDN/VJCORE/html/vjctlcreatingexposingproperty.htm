<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating and Exposing a Property</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjctlcreatingexposingproperty"></a>Creating and Exposing a Property</h2>
<p>
Defining a control property is similar to adding a property to any Java class. In addition, however, you add members to the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ClassInfo">
</object><a href=JavaScript:alink_1.Click()>ClassInfo</a> class to make your property visible in the Properties window.</p>
<p>
In this topic you can find information about the following:
<ul type=disc>
<li>
<a href="#vjctladdingpropertydefinition">Adding a Property Definition</a>&nbsp;&nbsp;&nbsp;Creating methods that define your property.<br><br></li>
<li>
<a href="#vjctlexposingpropertyatdesigntime">Exposing a Property at Design Time</a>&nbsp;&nbsp;&nbsp;Using the PropertyInfo object to make your control's properties visible in the design-time environment, such as the Properties window.</li>
</ul>

<h3><a name="vjctladdingpropertydefinition"></a>Adding a Property Definition</h3>
<p>
A property is stored in a private member variable of your control. You then provide a public get&lt;<i>property</i>&gt; method to expose the property value. If you intend to make the property read-write, you also provide a public set&lt;<i>property</i>&gt; method that takes a parameter containing the new property value.</p>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;The <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowModifyingWFCComponentsWithComponentBuilder">
</object><a href=JavaScript:alink_2.Click()>WFC Component Builder</a> will create property skeletons for you.</p>
<p>
A simple integer property called myProp in the MyControl control might be implemented as in the following example:</p>
<pre><code>public class MyControl extends Control{
   private int myProp = 0; // 0 is the default value
   public getMyProp(){
      return myProp;
   }
   public setMyProp( int newValue ){
      myProp = newValue;
   }
}
</code></pre>
<p class=indent>
<b>Note&nbsp;&nbsp;&nbsp;</b>The name used in the property definition should start with a lowercase letter, unless the first two letters are uppercase. The function names should have a capital letter immediately following the get or set. For example; text would have getText and setText, while MDIChild would have getMDIChild and setMDIChild.</p>

<h3><a name="vjctlexposingpropertyatdesigntime"></a>Exposing a Property at Design Time</h3>
<p>
To make your property visible in the Properties window, you do the following:
<ul type=disc>
<li>
Create a static, final instance of the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.PropertyInfo">
</object><a href=JavaScript:alink_3.Click()>PropertyInfo</a> class indicating the new property's class, name, and data type.<br><br></li>
<li>
Override the superclass' getProperties method, adding the superclass' existing properties and then your new property.<p class=atl>
<b>Note</b> &nbsp; The getProperties method is one of several methods you can use to allow you to expose properties, events, extender, and class attributes. For details about other methods, see <a href="vjhowworkingwithcontrolevents.htm">Working with Control Events</a>.</p></li>
</ul>
<p>
The following example shows the <code>ClassInfo</code> class for the myProp property:</p>
<pre><code>public static class ClassInfo extends Control.ClassInfo {
   public static final PropertyInfo myProp = 
         new PropertyInfo(MyControl.class, "myProp", int.class);
   public void getProperties(IProperties props){
      // Add existing properties from parent class
      super.getProperties(props);
      props.add(myProp);      // adds custom property
   }
}
</code></pre>
<p>
For more information about the use of the PropertyInfo class, see <a href="vjctlspecifyingcustompropertyattributes.htm">Specifying Custom Property Attributes</a>.</p>
</BODY>
</HTML>

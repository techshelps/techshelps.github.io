<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Importing COM Objects</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjhowimportingcomobjects"></a>Importing COM Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowImportingCOMObjects_C">
</object></p>
<p>
COM objects provide a great way to encapsulate functionality and reuse it across multiple applications. You can use COM objects to expose specific functionality within your application to use in other applications or to create a set of routines that you want to use in more than one application. Because COM is not language-specific, COM objects can be easily integrated into applications developed in a variety of programming languages. You can use Visual J++ to view and import COM objects that are registered on your system. During the import process, Visual J++ creates class wrappers so that you can access COM objects just as you would other Java objects.</p>
<p>
In this scenario, you import a COM object that was built in the <a href="vjhowbuildingcomobjects.htm">Building COM Objects</a> topic. You will learn how to:
<ul type=disc>
<li>
Import a COM object into a Windows Foundation Classes for Java (WFC) project.<br><br></li>
<li>
Access the methods of a COM object.<br><br></li>
<li>
Build and run the project to test the functionality of the COM object.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This topic assumes that you have created the COM object in <a href="vjhowbuildingcomobjects.htm">Building COM Objects</a> and that you have closed any open projects.</p>
<h1>Creating a Project</h1>
<p>
When importing a COM object, Visual J++ creates directories within your project and adds the class wrappers to access the COM object in those directories. To import a COM object, you must have a valid Java project.</p>
<p class=label>
<b>To create a project</b>
<ol>
<li>
On the <b>File </b>menu, click <b>New Project</b>.<br><br></li>
<li>
On the <b>New</b> tab, expand the <b>Visual J++ Projects</b> folder, click <b>Applications</b>, and select the <b>Windows Application</b> icon.<br><br></li>
<li>
In the <b>Name</b> box, type a name for your project.<br><br></li>
<li>
In the <b>Location</b> box, type the path where you want to save your project, or click <b>Browse</b> to navigate to the folder.<br><br></li>
<li>
Click <b>Open</b>.<p class=tl>
A collapsed view of your project appears in <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowUsingProjectExplorer">
</object><a href=JavaScript:alink_2.Click()>Project Explorer</a>.</P></li>
<li>
In Project Explorer, expand the project node.<p class=tl>
A file with the default name of <b>Form1.java</b> has been added to your project.</P></li>
</ol>
<h1>Importing a COM Object</h1>
<p>
After you have created a project, you can then import COM objects to that project. A COM object must be imported for each project that is to access it. When you import a COM object into a project, Visual J++ creates class wrappers that provide the interface for accessing the COM object. These class wrappers are added to packages&nbsp; in your project directory. (Depending on the number of objects stored in the COM DLL, Visual J++ can create multiple packages.)</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To access a specific COM object from another project, you can avoid wrapping the object for each project by placing the COM wrapper classes in the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowSettingClasspath">
</object><a href=JavaScript:alink_3.Click()>Classpath</a>.</p>
<p class=label>
<b>To import a COM object</b>
<ol>
<li>
On the <b>Project</b> menu, click <b>Add COM Wrapper</b>.<p class=tl>
The <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjdlgCOMWrappersDialogBox">
</object><a href=JavaScript:alink_4.Click()>COM Wrappers</a> dialog box is displayed.</P></li>
<li>
In the list that contains COM DLLs and type libraries that are registered on your computer, select the name of the COM object that you want to import.<p class=tl>
For this scenario, select the <b>Stats</b> COM object.</P></li>
<li>
Click <b>OK</b>.<p class=tl>
Visual J++ adds package directories and class wrappers for each of the COM objects contained in the COM DLL that you selected.</P></li>
</ol>
<h1>Adding Code to Access the COM Object</h1>
<p>
After Visual J++ has created the class wrappers, you can then write code to access the methods of the COM object. For this scenario, you add code to your project's form constructor. This code creates an instance of the COM object and make calls to the two methods of the COM object. The methods are called with hard-coded values, and their results are displayed in the <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csrgnOutputWindow">
</object><a href=JavaScript:alink_5.Click()>Output window</a>.</p>
<p class=label>
<b>To add code to the constructor of the form</b>
<ol>
<li>
In Project Explorer, right-click <b>Form1</b> and then click <b>View Code</b>.<p class=tl>
The text editor displays the source code for <b>Form1</b>.</P></li>
<li>
Inside the <b>Form1</b> constructor below the call to <code>initForm</code>, add the following lines of code:<pre><code>statisticsobject.Stats stats = new statisticsobject.Stats();
System.out.println("Our team has a winning percentage of " +
 &nbsp;&nbsp;&nbsp;&nbsp; stats.winLossPercentage(10, 4));
System.out.println("Our goaltender has a Goals Against Average of " +
 &nbsp;&nbsp;&nbsp;&nbsp; stats.goalsAgainstAverage(12, 15));</code></pre>
</li>
</ol>
<pre></pre>
<p>
This code creates an instance of the Stats COM object. The reference to <code>statisticsobject</code> before the Stats object is the name of the package where the class wrappers for Stats were created. After the instance of Stats is defined, the code calls its <code>winLossPercentage</code> and <code>goalsAgainstAverage</code> methods with hard coded values and sends the results to the Output window through a call the <code>System.out.println</code>.</p>
<h1>Building and Running the Project</h1>
<p>
After you have incorporated calls to the COM objects methods, you build and run the project.</p>
<p class=label>
<b>To build and run the project</b>
<ol>
<li>
On the <b>Build</b> menu, click <b>Build</b>. (If you receive any compilation errors or messages, correct the errors and rebuild your project.)<br><br></li>
<li>
To run the form, click <b>Start</b> on the <b>Debug</b> menu.</li>
</ol>
<p>
After the project starts, you can see the output from the calls to the <b>Stats</b> COM object in the Output window. (To display the Output window, on the <b>View</b> menu, click <b>Other Windows</b>, and then click <b>Output</b>.)</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UnsatisifiedLinkError When Calling a Method</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjconunsatisifiedlinkerrorwhencallingmethod"></a>UnsatisifiedLinkError When Calling a Method</h1>
<ul type=disc>
<li>
Check your version of the compiler to see that it's current with this release of Microsoft Visual J++. If your compiler does not support J/Direct, the Microsoft VM will attempt to link native methods using the Raw Native Interface (and will not succeed).<br><br></li>
<li>
Make sure your DLL is visible on the system path. DLLs are searched for in the following locations (in order):<ol>
<li>
The directory from which the application (typically JVIEW) loaded.<br><br></li>
<li>
The current directory.<br><br></li>
<li>
The Windows system directory.<br><br></li>
<li>
The Windows directory.<br><br></li>
<li>
The directories listed in the PATH environment variable.</li>
</ol>
<p class=tl>
The Microsoft VM will not attempt to load the DLL until a method requiring it is actually called. Therefore, do not assume that the DLL load was successful simply because the Java class loaded successfully.</P></li>
<li>
Check the method qualifiers. Methods declared with the @dll.import directive must be native and static. They can have any level of access (public, private, and so on) supported by the Java language.<br><br></li>
<li>
Make sure that your method name matches the DLL export name exactly, including capitalization. The DLL linking mechanism in Win32 is case-sensitive.<br><br></li>
<li>
If you still have trouble linking to a method, use a utility such as dumpbin/exports (Visual C++) to verify that the DLL exports the method by the name you are using. Some DLLs may require you to link to exports by <i>ordinal</i> (an integer) rather than a name. In such a case, use the entrypoint override on the method using the "<i>#ordinal</i>" syntax as shown in the following example:<pre><code>&nbsp;&nbsp;// This method is exported as ordinal #34.
  /** @dll.import("MyDll",entrypoint="#34") */
  public static native void MySample();
</code></pre>
</li>
<li>
Be aware that some so-called functions are actually C macros and the actual DLL export name may be quite different from the name of the macro.</li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Graphics Object Scope</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjtutgraphicsobjectscope"></a>Graphics Object Scope</h1>
<p>
The Graphics object has <i>method scope</i>. This means that when a method in which you use the Graphics object returns, the object’s dispose method is called automatically, freeing all resources that the object has allocated. After dispose has been called, attempts to use the object result in a run-time exception.</p>
<p>
If you declare an instance of the Graphics object at the class level, you should use the Form object’s createGraphics method to initialize that object in every method that uses it:</p>
<pre><code>Public class Form1 extends Form{

   Graphics g&nbsp; = new Graphics();

   Private void Form1_resize(Object sender, Event e){
      
         // Initialize object instance.
         g = this.createGraphics();

         // dispose automatically called…
   }

   private void Form1_click(Object sender, Event e){

         // Initialize object instance.

         g = this.createGraphics();

         // dispose method automatically called…
   }
      

}
</code></pre>
<p>
Although the dispose method is called automatically, it is good practice to call it explicitly at the end of routines that use the Graphics object. This is particularly important on the Windows 95 platform because of a system limitation on the number of device context that can be allocated.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing Windows-Based Applications with J/Direct</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjconwritingwindowsbasedapplicationswithjdirect"></a>Writing Windows-Based Applications with J/Direct</h1>
<p>
J/Direct is a new feature of Microsoft Visual J++ that provides easy access to Microsoft Windows dynamic-link libraries (DLLs). Using J/Direct, you can make direct calls to standard Win32 system DLLs (such as KERNEL32 and USER32) and third-party DLLs. J/Direct is far simpler to use than the older Raw Native Interface or the Java Native Interface (known as RNI and JNI, respectively), both of which require you to write a specialized wrapper DLL and perform all non-trivial data type translations yourself. With J/Direct, the vast majority of pre-existing DLL functions can be invoked by simply declaring the function and calling it. J/Direct uses the @dll.import directive, which is similar to Visual Basic's DECLARE facility.</p>
<p>
To use J/Direct, you need to have installed Microsoft Visual J++ and Microsoft Internet Explorer, version 4.0 or higher. To quickly build applications that take advantage of the native power of J/Direct, use the J/Direct Call Builder, which is a part of the Visual J++ development environment.</p>
<p>
This section explains how to use the @dll.import directive to invoke a DLL function from Java. It also offers details about how each data type is passed and received, and describes how the @dll.struct directive is used to pass and receive structures from DLL methods.</p>
<p>
For more information on writing Windows-based applications with J/Direct, see:
<ul type=disc>
<li>
<a href="vjcongettingstarted.htm">Message Box Example</a><br><br></li>
<li>
<a href="vjhowjdirectcallbuilder.htm">J/Direct Call Builder</a><br><br></li>
<li>
<a href="vjconquicksyntaxreference.htm">Quick Syntax Reference</a><br><br></li>
<li>
<a href="vjconhowdatatypesaremarshaled.htm">How Data Types are Marshaled</a><br><br></li>
<li>
<a href="vjconinvokingoleapifunctions.htm">Invoking OLE API Functions</a><br><br></li>
<li>
<a href="vjconaliasing(methodrenaming).htm">Aliasing (Method Renaming)</a><br><br></li>
<li>
<a href="vjconlinkingbyordinal.htm">Linking by Ordinal</a><br><br></li>
<li>
<a href="vjconspecifyingdll.importforentireclass.htm">Specifying @dll.import for an Entire Class</a><br><br></li>
<li>
<a href="vjconhowvmchoosesbetweenansiunicode.htm">How the VM Chooses Between ANSI and Unicode</a><br><br></li>
<li>
<a href="vjconobtainingerrorcodesetbydllfunction.htm">Obtaining the Error Code Set By a DLL Function</a><br><br></li>
<li>
<a href="vjcondynamicallyloadinginvokingdlls.htm">Dynamically Loading and Invoking DLLs</a><br><br></li>
<li>
<a href="vjconcomparingjdirecttorawnativeinterface.htm">Comparing J/Direct to Raw Native Interface</a><br><br></li>
<li>
<a href="vjconsecurityissues.htm">Security Issues</a><br><br></li>
<li>
<a href="vjconerrormessages.htm">Error Messages</a><br><br></li>
<li>
<a href="vjcontroubleshootingtips.htm">Troubleshooting Tips</a></li>
</ul>
</BODY>
</HTML>

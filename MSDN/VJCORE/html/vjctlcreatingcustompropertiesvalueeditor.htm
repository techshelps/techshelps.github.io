<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Custom Properties Value Editor</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjctlcreatingcustompropertiesvalueeditor"></a>Creating a Custom Properties Value Editor</h2>
<p>
The Properties window in Visual J++ 6.0 provides editing capability for the values of the properties exposed in your control. In fact, the Properties window is really just a custom editor host. You can specify a custom editor, or you can rely on the default editing capabilities of the Properties window.</p>
<p>
The mechanism is this: the Properties window first checks to see if you have specified a custom value editor. If not, it will look for an inner class called Editor inside the class of the type of the property. If no editor is found, it traverses the type’s hierarchy looking for any superclass that has an editor. Because there is an ObjectEditor class associated with java.lang.Object, an editor will always be found. The Properties window will provide a default editor for all simple types, such as a string editor, integer editor, and so forth.</p>
<p>
You might specify a custom value editor for many reasons. Typical tasks for a custom property editor include:
<ul type=disc>
<li>
Text-to-value conversion<br><br></li>
<li>
Value painting<br><br></li>
<li>
Specifying subproperties of the value<br><br></li>
<li>
Displaying custom dialog boxes<br><br></li>
<li>
Displaying custom drop-down lists<br><br></li>
<li>
Participating in code generation by specifying a constant name that should be substituted for a specific value</li>
</ul>
<p>
For more information, see <a href="#vjctldefiningcustomvalueeditor">Defining a Custom Value Editor</a>.</p>

<h3><a name="vjctldefiningcustomvalueeditor"></a>Defining a Custom Value Editor</h3>
<p>
To create a custom value editor, you must implement com.ms.wfc.core.IValueEditor. A convenient way to do so is to extend com.ms.wfc.core.ValueEditor to provide a default implementation of all methods. </p>
<p>
To create the value to be displayed (as a string) in the Properties window, override the getTextFromValue method. In order for the changed value to be reflected in the control and displayed in the Properties window, override the getValueFromText method.</p>
<p>
The following example illustrates a simple custom value editor that displays a percentage value with "%" in the Properties window, but then strips out the punctuation before the value is stored. This example makes use of the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.util.Value">
</object><a href=JavaScript:alink_1.Click()>Value</a> class in com.ms.wfc.util class for conversions:</p>
<pre><code>import com.ms.wfc.core.*;
import com.ms.wfc.util.*;

public class PercentEditor extends ValueEditor { 
   // Creates string as "nn%" for display in the Properties window
   public String getTextFromValue(Object value) {
      return Value.toString(Value.toInt(value)) + "%";
   }
   
   // Converts string in format "nn%" to integer. This method
   // is required.
   public Object getValueFromText(String text) {
      String s = Utils.trimBlanks(text.replace('%', ' '));
      return Value.toObject(Value.toInt(s));
   }
}
</code></pre>
<p>
The methods provided by com.ms.wfc.core for exchanging information with a property editor are listed in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Method</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ValueEditor_editValue">
</object><a href=JavaScript:alink_2.Click()>editValue</a></td>
<td width=50%>Provides a user interface for editing the property value.</td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ValueEditor_getConstantName">
</object><a href=JavaScript:alink_3.Click()>getConstantName</a></td>
<td width=50%>Retrieves the fully-qualified name of a constant that represents the specified value.</td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ValueEditor_getStyle">
</object><a href=JavaScript:alink_4.Click()>getStyle</a></td>
<td width=50%>Returns a bitfield of style flags.</td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ValueEditor_getTextFromValue">
</object><a href=JavaScript:alink_5.Click()>getTextFromValue</a></td>
<td width=50%>Converts a value into a string.</td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ValueEditor_getValues">
</object><a href=JavaScript:alink_6.Click()>getValues</a></td>
<td width=50%>Returns an array of values; typically, the Properties window displays these in a list by calling getTextFromValue in a loop.</td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ValueEditor_getValueFromText">
</object><a href=JavaScript:alink_7.Click()>getValueFromText</a></td>
<td width=50%>Returns a value from a string. You must implement this method.</td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ValueEditor_paintValue">
</object><a href=JavaScript:alink_8.Click()>paintValue</a></td>
<td width=50%>Paints a representation of the value in a specified rectangle.</td>
</tr>
</table><br>
<p>
Two additional methods&nbsp;— <object id=alink_9 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ValueEditor_getSubProperties">
</object><a href=JavaScript:alink_9.Click()>getSubProperties</a> and <object id=alink_10 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ValueEditor_getValueFromSubPropertyValues">
</object><a href=JavaScript:alink_10.Click()>getValueFromSubPropertyValues</a>&nbsp;— allow you to work with properties of objects, such as a Font object, that normally are passed as part of the constructor.</p>
<p>
The getStyle method is used to get and set flags used to specify behavior in the value editor. Valid styles are:
<ul type=disc>
<li>
<object id=alink_11 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.IValueEditor_STYLE_NOEDITABLETEXT">
</object><a href=JavaScript:alink_11.Click()>STYLE_NOEDITABLETEXT</a>&nbsp;&nbsp;&nbsp;Indicates that the value editor does not support accepting arbitrary text in the getValueFromText method. It should accept text that is returned from getTextFromValue. This style will typically cause a property editor to disallow typing in the edit box for properties of the value editor's type.<br><br></li>
<li>
<object id=alink_12 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.IValueEditor_STYLE_NOEDITABLETEXT">
</object><a href=JavaScript:alink_12.Click()>STYLE_PAINTVALUE</a>&nbsp;&nbsp;&nbsp;Indicates that the value editor implements the paintValue method. Typically, this causes a property editor to paint a representation of properties of the value editor's type.<br><br></li>
<li>
<object id=alink_13 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.IValueEditor_STYLE_NOEDITABLETEXT">
</object><a href=JavaScript:alink_13.Click()>STYLE_VALUES</a>&nbsp;&nbsp;&nbsp;Indicates that the value editor implements the getValues method. Typically, this causes a property editor to display a drop-down list for properties of the value editor's type.<br><br></li>
<li>
<object id=alink_14 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.IValueEditor_STYLE_EDITVALUE">
</object><a href=JavaScript:alink_14.Click()>STYLE_EDITVALUE</a>&nbsp;&nbsp;&nbsp;Indicates that the value editor implements the editValue method. Typically, this causes a property editor to display an ellipsis button for properties of the value editor's type.<br><br></li>
<li>
<object id=alink_15 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.IValueEditor_STYLE_DROPDOWNARROW">
</object><a href=JavaScript:alink_15.Click()>STYLE_DROPDOWNARROW</a>&nbsp;&nbsp;&nbsp;Indicates that if STYLE_EDITVALUE is also returned, a drop-down arrow should be shown instead of an ellipsis button. This is useful if the value editor plans to show a drop-down list in editValue as opposed to launching a modal dialog box.<br><br></li>
<li>
<object id=alink_16 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.IValueEditor_STYLE_IMMEDIATE">
</object><a href=JavaScript:alink_16.Click()>STYLE_IMMEDIATE</a>&nbsp;&nbsp;&nbsp;Indicates that values of this type are suitable for updating even when the new value is incomplete. Typically, this causes a property editor to update the underlying property after each change made in the editor (for example, as each character is typed in an edit box).<br><br></li>
<li>
<object id=alink_17 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.IValueEditor_STYLE_PROPERTIES">
</object><a href=JavaScript:alink_17.Click()>STYLE_PROPERTIES</a>&nbsp;&nbsp;&nbsp;Indicates that values of this type can have subproperties that can be edited, such as those for a Font object.<br><br></li>
<li>
<object id=alink_18 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.IValueEditor_STYLE_NOARRAYEXPANSION">
</object><a href=JavaScript:alink_18.Click()>STYLE_NOARRAYEXPANSION</a>&nbsp;&nbsp;&nbsp;Indicates that if the value is an array, a property inspector should not drill down into the array.<br><br></li>
<li>
<object id=alink_19 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.IValueEditor_STYLE_NOARRAYMULTISELECT">
</object><a href=JavaScript:alink_19.Click()>STYLE_NOARRAYMULTISELECT</a>&nbsp;&nbsp;&nbsp;Indicates that if the value is an array, a property inspector should not have an entry that selects all the elements of the array.</li>
</ul>
<p>
The following example shows how you can display a modal dialog box as the custom property editor. In this example, you can see how IValueAccess provides an abstract way to get and set a value on the component that an editor is currently editing. This is useful if more than one component might be selected. When you call the get and set value methods through IValueAccess, the Properties window can correctly set the value on multiple components. To display an ellipsis button that calls the dialog box, the example overrides the getStyle method and sets STYLE_EDITVALUE in the bitfield returned by getStyle:</p>
<pre><code>import com.ms.wfc.core.*;
import com.ms.wfc.util.*;

public class PercentEditor extends ValueEditor {
 &nbsp;&nbsp; public void editValue(IValueAccess valueAccess) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PercentDialog dialog = new PercentDialog();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int value = Value.toInt(valueAccess.getValue());
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dialog.setPercentValue(value);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int result = dialog.showDialog();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (result == DialogResult.OK) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; valueAccess.setValue(dialog.getText());
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }

 &nbsp;&nbsp; public int getStyle() {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Using OR operator sets bitfield to display ellipsis button
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return super.getStyle() | STYLE_EDITVALUE;
 &nbsp;&nbsp; }
}
</code></pre>
<p>
The following example illustrates how to display a drop-down dialog box. The control calls IEditorHost.dropDownDone when done editing the property. In addition, the control is responsible for calling the setValue method of IValueAccess. The Properties window will shut the drop-down list if the user cancels the drop-down dialog in any way:</p>
<pre><code>import com.ms.wfc.core.*;
import com.ms.wfc.util.*;

public class PercentEditor extends ValueEditor {
 &nbsp;&nbsp; public void editValue(IValueAccess valueAccess) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PercentControl control = new PercentControl();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int value = Value.toInt(valueAccess.getValue());
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dialog.setPercentValue(value);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IEditorHost host = 
            (IEditorHost)valueAccess.getService(IEditorHost.class);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; control.setValueAccess(valueAccess);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; host.dropDownControl(control);
 &nbsp;&nbsp; }

 &nbsp;&nbsp; public int getStyle() {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return super.getStyle() | STYLE_EDITVALUE | STYLE_DROPDOWNARROW;
 &nbsp;&nbsp; }
}
</code></pre>
</BODY>
</HTML>

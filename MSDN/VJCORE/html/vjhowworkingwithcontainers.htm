<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Containers</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<h1><a name="vjhowworkingwithcontainers"></a>Working with Containers</h1>
<p>
Containers are elements that can hold other elements. A basic example is the &lt;DIV&gt; element, which can contain any other HTML item. More complex examples include table cells and, of course, the document itself. In most cases, containers can be arbitrarily nested, such as having a table inside a cell of another table. </p>
<p>
Containers are like other elements. They are created with a new statement, and many can be positioned and sized on the page. You can position and size elements within a container and set up their z-order relationships. One of the powerful features of DHTML is that you can then change any of these attributes in your code. </p>
<p>
Of course, you can also allow elements within a container to be positioned using the normal HTML layout rules. Call either the setLocation or setBounds method of an element to set its absolute position, or call resetLocation to let the HTML layout engine position it (immediately after the last element in the HTML flow layout).</p>
<p>
Once you have created a container element, you can add elements to it using either the setNewElements or add method. This mechanism follows the regular pattern of parent-child relationships: the elements, which can also be other containers, added to the container become its children. None is actually attached to the document until the topmost container, which is not a part of any other container, is added to the document. </p>
<p>
You can position and size a container using its setBounds method. For example, to create a container, type:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; DhForm myForm = new DhForm();
 &nbsp;&nbsp; </code></pre>
<p>
You can then set various attributes on the container, including the ToolTip that is shown when the mouse hovers over the panel:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;
   myForm.setToolTip("This text appears when the mouse hovers");
   myForm.setFont("Arial", 10);
   myForm.setBackColor(Color.RED);
   myForm.setBounds(5, 5, 100, 100);
   </code></pre>
<p>
Finally, you can add the container you've just created to the document in your DhDocument-derived class (such as Class1.java):</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;
   this.add(myForm);
   </code></pre>
<p>
When adding elements to the container, you can specify where they go in the z-order using one of a set of constants provided by the com.ms.wfc.html package. Elements are added with a default size and position. You can call setBounds on the elements to specify a different size.</p>
<pre><code>   DhForm myOverLay1 = new DhForm();
   DhForm myOverLay2 = new DhForm();
   myOverLay1.setBackColor(Color.BLACK); 
   myOverLay1.setBounds(10, 10, 50, 50);
   myOverLay2.setBackColor(Color.BLUE); 
   myOverLay2.setBounds(20,25, 50, 50);
   myForm.add(myOverLay1, null, DhInsertOptions.BEGINNING);
   // Black on top of blue
   myForm.add(myOverLay2, myOverLay1, DhInsertOptions.BEFORE);
   // Blue on top of black (uncomment below and comment above )
   // myForm.add(myOverLay2, myOverLay1, DhInsertOptions.AFTER);

   </code></pre>
<p>
You can also use the setZIndex method after the elements are added to move the elements around in the z-order. For example, the following syntax does not explicitly set a z-order on the added element but uses the default z-order (that is, on top of all other elements):</p>
<pre><code>&nbsp;&nbsp;&nbsp;myForm.add(myText);
   </code></pre>
<p>
You can set this explicitly as follows, where <b>num</b> is an integer representing the relative z-order of the element within its container:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;
   myText.setZIndex(num);
   </code></pre>
<p>
The element with the lowest number is at the bottom of the z-order (that is, everything else covers it). The element with the highest number is at the top (that is, it covers everything else).</p>
</BODY>
</HTML>

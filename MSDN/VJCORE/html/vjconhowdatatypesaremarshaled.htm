<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Data Types are Marshaled</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjconhowdatatypesaremarshaled"></a>How Data Types are Marshaled</h1>
<p>
Simply put, the Microsoft VM evaluates Java arguments, then converts them to native C++ types. The Microsoft VM infers the native type of each parameter and the return value from the declared (compile-time) Java type of the parameter. For example, a parameter declared as a Java integer is passed as a 32-bit integer; a parameter declared as a Java String object is passed as a null-terminated string, and so forth. There are no invisible attributes that provide information about the native types. In Java, what you see is what you get. </p>
<p>
The following topics describe in detail how the Java data types map to native data types:
<ul type=disc>
<li>
<a href="vjconquickreference.htm">Quick Reference</a>&nbsp;&nbsp;&nbsp;Provides tables that list the Java type that maps to each native type.<br><br></li>
<li>
<a href="vjconbasicscalartypes.htm">Basic Scalar Types</a>&nbsp;&nbsp;&nbsp;Describes the mappings for int, byte, short, long, float, and double.<br><br></li>
<li>
<a href="vjconchars.htm">Chars</a>&nbsp;&nbsp;&nbsp;Explains the mapping of the char data type.<br><br></li>
<li>
<a href="vjconbooleans.htm">Booleans</a>&nbsp;&nbsp;&nbsp;Explains the mapping of the boolean data type.<br><br></li>
<li>
<a href="vjconstrings.htm">Strings</a>&nbsp;&nbsp;&nbsp;Explains how to pass and receive strings.<br><br></li>
<li>
<a href="vjconarrays.htm">Arrays</a>&nbsp;&nbsp;&nbsp;Explains how to pass arrays of scalars.<br><br></li>
<li>
<a href="vjconstructures.htm">Structures</a>&nbsp;&nbsp;&nbsp;Explains how to use the @dll.struct directive to pass and receive structures and how to use @dll.structmap to embed fixed-sized arrays within structures.<br><br></li>
<li>
<a href="vjconpointers.htm">Pointers</a>&nbsp;&nbsp;&nbsp;Explains how to handle DLLs that have multiple return values and how to read and write data through raw pointers.<br><br></li>
<li>
<a href="vjconpolymorphicparameters.htm">Polymorphic Parameters</a>&nbsp;&nbsp;&nbsp;Explains how to simulate polymorphic parameters.<br><br></li>
<li>
<a href="vjconcallbacks.htm">Callbacks</a>&nbsp;&nbsp;&nbsp;Explains how to declare and invoke a DLL function that takes a Callback parameter and how to embed a Callback inside a structure.</li>
</ul>
</BODY>
</HTML>

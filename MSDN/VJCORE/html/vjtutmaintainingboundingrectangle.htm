<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Maintaining the Bounding Rectangle</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjtutmaintainingboundingrectangle"></a>Maintaining the Bounding Rectangle</h1>
<p>
The area of a window in which you can draw is referred to as the window’s <i>client area</i>. Within this area, a <i>bounding rectangle</i> defines the invisible rectangular region in which the Graphics object draws, and can include the window’s entire client area. </p>
<p>
When a window loses, and then regains focus, the part of the bounding rectangle covered by some other object does not automatically re-display the items that were previously rendered to it.</p>
<p>
To ensure correct display, you must manage the repainting of your form or control. The paint event handler is the place in your Form class code in which such management typically takes place. Within this handler, you restore the bounding rectangle to its proper state.</p>
<p>
The following example creates a Bitmap object at the class level, then it uses the paint event handler to redraw the Bitmap. Each time the client area of the form becomes invalid, Windows invokes this handler, and the image is repainted to the form:</p>
<pre><code>Bitmap bmp = new Bitmap("c:\\MyImage.bmp");

protected void onPaint(PaintEvent e){
&nbsp;&nbsp;&nbsp; e.graphics.drawImage(bmp, new Point(0, 0));
}
</code></pre>
<p>
When your form is initially displayed, and each time it regains focus, the paint event handler is automatically invoked. However, if your form supports resizing, a change in the form’s dimensions does not automatically trigger a repaint. Instead, you must add a resize handler to the Form-derived class and then call the object’s invalidate method from within this handler. A call to invalidate trigger’s the form’s paint event handler:</p>
<pre><code>protected void onResize(Event e){
&nbsp;&nbsp;&nbsp; this.invalidate();
}
</code></pre>
</BODY>
</HTML>

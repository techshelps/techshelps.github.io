<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Specifying Dyanamic Default Values and Property Persistence</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjctlspecifyingpropertypersistencedefaultvalues"></a>Specifying Dynamic Default Values and Property Persistence</h2>
<p>
To set a default value for a property, you can specify a DefaultValueAttribute attribute when creating a new PropertyInfo object, as described in <a href="vjctlspecifyingcustompropertyattributes.htm">Specifying Custom Property Attributes</a>. In some cases, you might want to specify a default value dynamically&nbsp;— that is, a value calculated at run time. Similarly, you might want to specify that a property value is <i>persisted</i> (saved between design-time sessions) based on run time conditions.</p>
<p>
In this topic you can find information about:
<ul type=disc>
<li>
<a href="#vjctlsettingpersistenceforpropertyvalues">Setting Persistence for Property Values</a>&nbsp;&nbsp;&nbsp;How to dynamically specify that non-default property values are saved in the design-time environment.<br><br></li>
<li>
<a href="#vjctlresettingtodefaultvalue">Calculating Dynamic Default Values</a>&nbsp;&nbsp;&nbsp;How to calculate a default value at run time.</li>
</ul>

<h3><a name="vjctlsettingpersistenceforpropertyvalues"></a>Setting Persistence for Property Values</h3>
<p>
By default, when a control property value is changed from the default at design time (as in the Properties window), it is saved whenever the host control is saved. For example, if your control is instantiated in a Visual J++ form, and if you change the value of a property in the Properties window, the property's value is saved when you save the form. For efficiency, if the property value matches its default value, the value is not persisted.</p>
<p>
In rare instances you want to specify that a value is persisted based on a run time condition. To control persistence, override the Control class' shouldPersist&lt;<i>property</i>&gt; method. After testing for the condition, the method should return a Boolean value indicating whether the custom value should be saved. To prevent the value from being saved, return false from this method. You can also override the shouldPersist&lt;<i>property</i>&gt; for properties inherited from the superclass, as in this example, which sets persistence of the font property depending on whether the font has changed:</p>
<pre><code>public boolean shouldPersistFont() {
   return font != null;
}
</code></pre>
<p class=indent>
<b>Note&nbsp;&nbsp;&nbsp;</b>Ambient properties (whose value is inherited from the parent) such as font and backColor return null when compared as illustrated above to represent that they are set to the default values. However, explicitly getting the value of such properties&nbsp;— for example, calling the getFont method&nbsp;—&nbsp;returns the actual font information.</p>

<h3><a name="vjctlresettingtodefaultvalue"></a>Calculating Dynamic Default Values</h3>
<p>
To create a default value for a property at run time, create a reset&lt;<i>property</i>&gt; method for that property. The following example shows how you can implement a default value based on today's date for a property called lastUpdate:</p>
<pre><code>private Date dtLastUpdate;
public void setLastUpdate( Date d ){
   dtLastUpdate = d ;
   invalidate();   // Repaint control when property changes
}

public void resetLastUpdate(){
   return new Date();
}
</code></pre>
<p>
You can also override the reset&lt;<i>property</i>&gt; methods inherited from the Control class. The following example shows how you can override the resetFont method for your control:</p>
<pre><code>public void resetFont() {
   Font f = new Font("Arial", 8.0f, FontSize.POINTS, FontWeight.BOLD,
       false, false, false);
   setFont(f);
}
</code></pre>
</BODY>
</HTML>

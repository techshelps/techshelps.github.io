<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Correspondence Between Types Inside Structures</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjconcorrespondencebetweentypesinsidestructures"></a>Correspondence Between Types Inside Structures</h2>
<p>
The following table describes how scalar types map inside structures.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=41%><b>Java</b></td>
<td class=label width=59%><b>Native</b></td>
</tr>
<tr valign=top>
<td width=41%>byte</td>
<td width=59%>BYTE</td>
</tr>
<tr valign=top>
<td width=41%>char</td>
<td width=59%>TCHAR (CHAR or WCHAR depending on @dll.struct definition)</td>
</tr>
<tr valign=top>
<td width=41%>short</td>
<td width=59%>SHORT</td>
</tr>
<tr valign=top>
<td width=41%>int</td>
<td width=59%>LONG</td>
</tr>
<tr valign=top>
<td width=41%>long</td>
<td width=59%>__int64</td>
</tr>
<tr valign=top>
<td width=41%>float</td>
<td width=59%>float</td>
</tr>
<tr valign=top>
<td width=41%>double</td>
<td width=59%>double</td>
</tr>
<tr valign=top>
<td width=41%>boolean</td>
<td width=59%>BOOL (32-bit boolean)</td>
</tr>
</table><br>
<p>
Reference types (Java objects and classes) normally map to embedded structures and arrays. Each supported mapping is described in the following table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=41%><b>Java</b></td>
<td class=label width=59%><b>Native</b></td>
</tr>
<tr valign=top>
<td width=41%> String</td>
<td width=59%>Pointer to a string, or an embedded fixed-string string</td>
</tr>
<tr valign=top>
<td width=41%>Class marked with @dll.struct </td>
<td width=59%>Nested structure</td>
</tr>
<tr valign=top>
<td width=41%>char[]</td>
<td width=59%>Nested array of TCHAR (CHAR/WCHAR)</td>
</tr>
<tr valign=top>
<td width=41%>byte[]</td>
<td width=59%>Nested array of BYTE</td>
</tr>
<tr valign=top>
<td width=41%>short[]</td>
<td width=59%>Nested array of SHORT</td>
</tr>
<tr valign=top>
<td width=41%>int[]</td>
<td width=59%>Nested array of LONG</td>
</tr>
<tr valign=top>
<td width=41%>long[]</td>
<td width=59%>Nested array of __int64</td>
</tr>
<tr valign=top>
<td width=41%>float[]</td>
<td width=59%>Nested array of floats</td>
</tr>
<tr valign=top>
<td width=41%>double[]</td>
<td width=59%>Nested array of doubles</td>
</tr>
</table><br>
<p>
There is no direct support for pointers inside structures due to the large number of possible ways referenced objects could be allocated and disposed of. To represent a structure with an embedded pointer, declare the pointer field as type int. You will need to make explicit DLL calls to the appropriate allocation functions and initialize the memory blocks yourself. (You could use DllLib.ptrToStruct to map the blocks onto @dll.struct classes.)</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Providing Property Change Notification</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjctlprovidingpropertychangenotification"></a>Providing Property Change Notification</h2>
<p>
WFC uses a naming convention for creating events that indicate that a property value is changing or has changed:
<ul type=disc>
<li>
The &lt;<i>propertyName</i>&gt;Changing event indicates that the function used to change a property value has been called. Typically, you fire this event at the beginning of your set&lt;<i>Property</i>&gt; method. You pass it a CancelEvent object; if the host application has a &lt;<i>propertyName</i>&gt;Changing event handler, the handler can prevent the property from being changed by setting the CancelEvent object's cancel property to true.<br><br></li>
<li>
To indicate a successfully completed change, you fire a &lt;<i>propertyName</i>&gt;Changed event.</li>
</ul>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;Data binding requires that you implement the &lt;<i>propertyName</i>&gt;Changed event.</p>
<p>
These events are not designed to provide data validation, but rather to allow control over properties being edited, such as preventing a control from updating its value. Data validation is either done on the data source (for example, a recordset) or through custom properties on the control.</p>
<p>
You implement the property change events the way you do a custom event. For each event, you provide an addOn&lt;<i>property</i>&gt;Changing and addOn&lt;<i>property</i>&gt;Changed method and corresponding removeOn methods. You also typically create protected on&lt;<i>PropertyName</i>&gt;Changing and on&lt;<i>PropertyName</i>&gt;Changed methods. The on&lt;<i>PropertyName</i>&gt;Changing usually uses a CancelEvent object to allow the change to be stopped. For details about creating these methods, see <a href="vjctlcreatingcustomevent.htm">Creating a Custom Event</a>.</p>
<p>
The following example illustrates how you can include property notification for an alignment property:</p>
<pre><code>public void setAlignment(int value) {
   if (alignment != value) {
         CancelEvent e = new CancelEvent();
         onAlignmentChanging(e);
         if (!e.cancel) {
            alignment = value;
            invalidate();   // Repaint control when property changes
            onAlignmentChanged(Event.EMPTY);
         }
      }
   }
}

private EventHandler eAlignChanged = null;
public final void addOnAlignmentChanged(EventHandler handler){
   eAlignChanged = (EventHandler)Delegate.combine(eAlignChanged,
       handler);
}
public final void removeOnAlignmentChanged(EventHandler handler){
   eAlignChanged = (EventHandler)Delegate.remove(eAlignChanged, handler);
}
protected void onAlignmentChanged(Event event){
   if(eAlignChanged != null){
      eAlignChanged.invoke(this, event);
   }
}

private CancelEventHandler eAlignChanging = null;
public final void addOnAlignmentChanging(CancelEventHandler handler){
   eAlignChanging = (CancelEventHandler)Delegate.combine(eAlignChanging,
       handler);
}
public final void removeOnAlignmentChanging(CancelEventHandler handler){
   eAlignChanging = (CancelEventHandler)Delegate.remove(eAlignChanging,
       handler);
}
protected void onAlignmentChanging(CancelEvent event){
   if(eAlignChanging != null){
      eAlignChanging.invoke(this, event);
   }
}

public static EventInfo eiAlignChanged = new EventInfo(MyControl.class, 
   "onAlignmentChanged", EventHandler.class);
public static EventInfo eiAlignChanging = new EventInfo(MyControl.class, 
   "onAlignmentChanging", EventHandler.class);

public void getEvents(IEvents events){
   super.getEvents(events);
   events.add(eiAlignChanged);
   events.add(eiAlignChanging);
}</code></pre>
</BODY>
</HTML>

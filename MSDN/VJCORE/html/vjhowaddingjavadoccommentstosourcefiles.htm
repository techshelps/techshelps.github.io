<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Javadoc Comments to Source Files</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjhowaddingjavadoccommentstosourcefiles"></a>Adding Javadoc Comments to Source Files</h2>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowAddingJavaDocCommentsToSourceFiles_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowAddingJavaDocCommentsToSourceFiles_T">
</object></p>
<p>
Below your file's tree view in Class Outline is a Javadoc pane. If a class, method, or member variable has Javadoc comments , the comments appear in this pane. When you add a Javadoc comment to your code, IntelliSense displays the first sentence of the comment in the Javadoc pane whenever you highlight a class, method, or member variable name in Class Outline.</p>
<p>
The following procedure explains how to add a Javadoc comment to a method; however, you follow the same steps to add Javadoc comments to classes and member variables.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This procedure uses a Console Application project and adds to the code created in the scenario that updates items in Class Outline. If you have not completed the steps that add a <code>Greeting</code> class and <code>hello()</code> method to a basic Console Application, take a few minutes and follow the steps in <a href="vjhowaddingitemstoclassoutlinefromtexteditor.htm">Adding Items to Class Outline from the Text Editor</a> before continuing. </p>
<p class=label>
<b>To add a Javadoc comment to a method</b>
<ol>
<li>
In <b>Project Explorer</b>, click the plus ("+") sign to the left of your project's name to expand your project.<br><br></li>
<li>
Double-click the filename or icon of the .java file containing your project's <code>main()</code> method (Class1 .java by default).<p class=tl>
Visual J++ opens the Text editor and loads your .java file. The file is now ready for editing.</P></li>
<li>
On the <b>View</b> menu, click <b>Other Windows</b> and select <b>Document Outline</b> from the cascading menu.<p class=tl>
<b>Class Outline</b> appears with a collapsed tree view of your project.</P></li>
<li>
In <b>Class Outline</b>, expand the <code>Greeting</code> class to display the icons for <b>Superclasses</b>, <b>Inherited Members</b>, and the<b> </b><code>hello()</code><b> </b>method.<br><br></li>
<li>
From within the Text editor, type the opening characters for a Javadoc comment, /**, above the <code>hello()</code> method declaration in your source file.<p class=tl>
IntelliSense creates a Javadoc comment block by inserting the closing characters for a Javadoc comment, */, into your code.</P></li>
<li>
After the opening characters of the Javadoc comment block, type the following:<pre><code>/** The hello() method is a static method that takes
 * no arguments and returns a String object to the
 * calling method. The value returned will always
 * be "Hello World!".
 */ 
</code></pre>
</li>
<li>
In <b>Class Outline</b>, highlight the <code>hello()</code> method.<p class=tl>
Notice that the first sentence of the comment you've just added appears in the Javadoc pane.</P></li>
</ol>
<p>
When you are creating Javadoc comments for your classes, methods, and member variables, you may want or need to add one or more Javadoc fields to a comment. IntelliSense displays a list of Javadoc fields available in Visual J++. The following procedure adds an author field to the Javadoc comment created above. </p>
<p class=label>
<b>To add an Javadoc field to a Javadoc comment</b>
<ol>
<li>
In <b>Project Explorer</b>, click the plus ("+") sign to the left of your project's name to expand your project.<br><br></li>
<li>
Double-click the filename or icon of the .java file containing your project's <code>main()</code> method (Class1 .java by default).<p class=tl>
Visual J++ opens the Text editor and loads your .java file. The file is now ready for editing.</P></li>
<li>
In the <code>hello()</code> method's Javadoc comment, after the last sentence but before the closing Javadoc characters, */, type an @ sign.<p class=tl>
IntelliSense displays a list box of valid Javadoc comment fields.</P></li>
<li>
Double-click "<b>author</b>" in the list box.<p class=tl>
The word "author" is inserted into your Javadoc comment after the @ sign.</P></li>
<li>
Type your name after <code>@author</code>.<p class=tl>
Your finished Javadoc comment should look like this:</P><pre><code>/** The hello() method is a static method that takes
 * no arguments and returns a String object to the
 * calling method. The value returned will always
 * be "Hello World!".
 * @author Mary Doe
 */ </code></pre>
<p class=tl>
</P><p class=tl>
</P></li>
</ol>
</BODY>
</HTML>

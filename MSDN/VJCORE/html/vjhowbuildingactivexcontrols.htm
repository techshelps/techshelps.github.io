<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building ActiveX Controls</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjhowbuildingactivexcontrols"></a>Building ActiveX Controls</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowBuildingActiveXControls_C">
</object></p>
<p>
Using the component model of the Windows Foundation Classes for Java (WFC), you can create ActiveX controls that can be used in WFC applications or in other development environments that support ActiveX. To create an ActiveX control from a WFC control, you register the WFC control's class as a <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowSettingCOMClasses">
</object><a href=JavaScript:alink_2.Click()>COM class</a>. Once the control's class has been registered as a COM class, you can package the class file for the control into a <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowCreatingCOMDLL">
</object><a href=JavaScript:alink_3.Click()>COM DLL</a> and register it as an ActiveX control in the registry. Once the control is registered as an ActiveX control, it can be accessed from an ActiveX client.</p>
<p>
In this scenario, you use the WFC control documented in <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowCreatingCOMControl">
</object><a href=JavaScript:alink_4.Click()>Creating a Control</a>. If you have not created it, build the control documented in the topic, and continue with the procedures in this topic. You will learn:
<ul type=disc>
<li>
How to expose a WFC control as a COM object.<br><br></li>
<li>
How to package a control into a COM DLL for use by other applications.<br><br></li>
<li>
How to register a COM DLL as an ActiveX control.<br><br></li>
<li>
How to import a WFC based ActiveX control into Visual Basic.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The following procedure assumes that you have an existing WFC component project opened in Visual J++.</p>
<h1>Defining a WFC Control as a COM Object</h1>
<p>
To access your control from other ActiveX clients, you define your control as a COM object. So that a class can be exposed as a COM object, it needs to have an @com.register comment tag placed above the class definition. Visual J++ provides an automated way to generate @com.register comment tags for your classes.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If your control’s project was created using the <b>Control</b> template, the control already contains a comment tag to register it as a COM object. Remove the forward slashes (//) to enable the comment tag.</p>
<p class=label>
<b>To define a WFC component as a COM object</b>
<ol>
<li>
On the <b>Project</b> menu, click <b>&lt;Project&gt; Properties</b> (where <b>&lt;Project&gt;</b> is the name of your control project). <br><br></li>
<li>
In the <b>&lt;Project&gt; Properties</b> dialog box, click the <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowSettingCOMClasses">
</object><a href=JavaScript:alink_5.Click()>COM Classes</a> tab.<br><br></li>
<li>
In the list of classes, select your control's class.<br><br></li>
<li>
Click the <b>Options</b> button.<br><br></li>
<li>
(Optional) In the <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjdlgTypeLibraryOptionsDialogBox">
</object><a href=JavaScript:alink_6.Click()>Type Library Options</a> dialog box, change the name of the type library file that is created to define the interface to your control, the name of the library, the name of the control as it will be displayed to development environments, and Help file information, and click <b>OK</b>.<br><br></li>
<li>
In the <b>&lt;Project&gt; Properties</b> dialog box, click <b>OK</b>.<p class=tl>
Visual J++ adds a comment tag at the top of your control’s class definition that registers the class as a COM object.</P></li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you do not need to define multiple classes as COM classes, you can define a COM class in the <b>Class Properties</b> dialog box. To display the <b>Class Properties</b> dialog box, in Class Outline, right-click the name of the class, and then click <b>Class Properties</b>. In the <b>Class Properties</b> dialog box, select the <b>COM Class</b> check box.</p>
<h1>Packaging the Control in a COM DLL</h1>
<p>
After you have defined your WFC control as a COM object, you package the control's class files into a COM DLL file. Your control must be packaged in a COM DLL file to be available as an ActiveX control. The COM DLL provides the interface that is used by ActiveX clients to access your control and its members.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To distribute your ActiveX controls over the Internet, you can package your control in a CAB file instead of a COM DLL.</p>
<p class=label>
<b>To build a control as a COM DLL</b>
<ol>
<li>
On the <b>Project</b> menu, click <b>&lt;Project&gt; Properties</b> (where <b>&lt;Project&gt;</b> is the name of your control project).<br><br></li>
<li>
In the <b>&lt;Project&gt; Properties</b> dialog box, click the <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vedlgProjectSettingsPackagingOutputsTabDialogBox">
</object><a href=JavaScript:alink_7.Click()>Output Format</a> tab.<br><br></li>
<li>
Select the <b>Enable Packaging</b> check box. <p class=tl>
The other controls on the tab should now be enabled.</P></li>
<li>
In the <b>Packaging type</b> drop-down list, select <b>COM DLL</b>.<br><br></li>
<li>
In the <b>File name</b> box, type a name for your COM DLL. (A default name is created using the name of the project.)<br><br></li>
<li>
In the associated drop-down list, select the <b>Outputs of type</b> and the <b>Java Classes &amp; Resources</b> options.<br><br></li>
<li>
Click <b>OK</b>.</li>
</ol>
<h1>Building the Project</h1>
<p>
After you have configured the packaging options for the project, you need to build the project. Visual J++ then adds a type library to your project that defines the COM interface for your control. The type library also contains information that the registry uses to register the COM class as a control. When the type library has been generated, Visual J++ registers the COM classes in your project in the registry using the type library file that was created. After the control's classes have been registered, Visual J++ packages the project's class files and the type library into a COM DLL.</p>
<p class=label>
<b>To build the project</b>
<ul type=disc>
<li>
On the <b>Build</b> menu, click <b>Build</b>.</li>
</ul>
<h1>Registering the COM DLL</h1>
<p>
Once you have registered your WFC control's classes as COM classes and packaged them in a COM DLL, you register the COM DLL in the system registry. To do this, you use the Regsvr32.exe program. Because the project's type library flags the WFC control's COM classes as a control, Regsvr32 registers the COM DLL as an ActiveX control. When the COM DLL has been registered, other applications can see your WFC control in the list of ActiveX controls that are registered on the system.</p>
<p class=label>
<b>To register the COM DLL</b>
<ol>
<li>
Click the <b>Start</b> button, and then click <b>Run</b>.<br><br></li>
<li>
In the <b>Open</b> box, type:<p class=tl>
<b>Regsvr32.exe </b>&lt;<i>DLL path and filename</i>&gt;</P><p class=tl>
where <b>&lt;</b><i>DLL path and filename</i><b>&gt;</b> is the path and file name of your control’s DLL. For this scenario, type:</P><p class=tl>
<b>Regsvr32 C:\Project1\Project1.dll</b></P></li>
<li>
Click <b>OK</b>.<p class=tl>
If you receive a message that the registration failed, ensure that the path to the control's DLL is correct and that the file exists.</P></li>
</ol>
<h1>Testing the Control in Microsoft Visual Basic</h1>
<p>
To test your ActiveX control, you add the control to a programming tool or application that supports ActiveX. For this scenario, you can use Microsoft Visual Basic version 5.0 or later to add the control and test its features.</p>
<p class=label>
<b>To add a WFC based ActiveX control to a Visual Basic form</b>
<ol>
<li>
Run <b>Visual Basic</b>.<br><br></li>
<li>
On the <b>File</b> menu in Visual Basic, click <b>New Project</b>.<br><br></li>
<li>
In the <b>New Project</b> dialog box, click the <b>Standard EXE</b> icon, and then click <b>OK</b>.<br><br></li>
<li>
Right-click the Toolbox, and then click <b>Components</b>.<br><br></li>
<li>
In the <b>Components</b> dialog box, select your control, and then click <b>OK</b>.<p class=tl>
For this scenario, select the <b>Project1</b> control.</P></li>
<li>
In the Toolbox, double-click your control to add it to the form.<p class=tl>
The control is added in the center of the form.</P></li>
<li>
Press <b>F5</b> to run the project.<p class=tl>
The form is displayed with your control.</P></li>
</ol>
<p>
If you are working with the control that is documented in <object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowCreatingCOMControl">
</object><a href=JavaScript:alink_8.Click()>Creating a Control</a>, you can scroll the horizontal scroll bar. The text in the control changes to reflect the position of the scroll bar.</p>
<p>
For information on importing an ActiveX control into a WFC application, see <object id=alink_9 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowImportingActiveXControls">
</object><a href=JavaScript:alink_9.Click()>Importing ActiveX Controls</a>.</p>
</BODY>
</HTML>

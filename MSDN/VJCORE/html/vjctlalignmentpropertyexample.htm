<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Alignment Property Example</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjctlalignmentpropertyexample"></a>Alignment Property Example</h2>
<p>
This section provides a complete example of an alignment property for a SuperLabel class, which allows users to specify how they want the text aligned inside a label: left, right, and center. The example shows how to:
<ul type=disc>
<li>
<a href="#vjctlbasicalignmentproperty">Define and expose the property</a>.<br><br></li>
<li>
<a href="#vjctlcreatinganenumeratedpropertyvalue">Use an enumerator (enum) class to define allowable values for the property</a>.<br><br></li>
<li>
<a href="#vjctlprovidingpropertyvalidation">Provide validation for a new property value</a>.<br><br></li>
<li>
<a href="#vjctlusingpropertyvaluewhenpainting">Use the alignment property value when painting the control</a>.<br><br></li>
<li>
<a href="#vjctlexposingthepropertyatdesigntime">Expose the property at design time</a>.</li>
</ul>
<p>
For the sample code, see <a href="#vjctlacompleteexample">A Complete Example</a>.</p>

<h3><a name="vjctlbasicalignmentproperty"></a>Basic alignment Property</h3>
<p>
The basic code for creating the alignment property is as follows. In the setAlignment method, the invalidate function is called, which indirectly forces the control to repaint so that it will reflect the new property value:</p>
<pre><code>private int align = AlignStyle.LEFT;

public int getAlignment() {
   return align;
}

public void setAlignment(int value) {
   align = value;
   invalidate();   // Repaint control when property changes
}
</code></pre>

<h3><a name="vjctlcreatinganenumeratedpropertyvalue"></a>Creating An Enumerated Property Value</h3>
<p>
Because there are only three possible values for the property, you can use an enumerator (enum) to define them. Although Java does not have native support for enumeration types, WFC provides a com.ms.wfc.core.Enum class. Any class that derives from com.ms.wfc.core.Enum will be treated as an Enum object. All Enum objects conform to the standard that they contain only public static final integers that represent the valid selections. They may optionally contain a valid method that returns true if a passed value is legal in that Enum object.</p>
<p>
Enumerator objects are recognized in the Properties window. Therefore, when you subclass the Enum class, you automatically get a drop-down list of valid items in the Properties window at design time.</p>
<p>
The following example shows a class that defines an AlignStyle enumerator:</p>
<pre><code>// AlignStyle.java
import com.ms.wfc.core.*;

public class AlignStyle extends Enum
{
   public static final int LEFT = 1;
   public static final int RIGHT = 2;
   public static final int CENTER = 3;
   
   // Optional valid method to test passed value
   public static boolean valid(int value) {
      return (LEFT &lt;= value &amp;&amp; value &lt;= CENTER);
   }
}
</code></pre>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;Creating the valid method as a static member allows users to call it without having to create an instance of the class first.</p>

<h3><a name="vjctlprovidingpropertyvalidation"></a>Providing Property Validation</h3>
<p>
In order to test that the user has specified a legal alignment value when setting the property, you can add validation to the setAlignment method. To test the value, you can call the valid method of the AlignStyle enumerator. If there is an error, you can throw the WFCInvalidEnumException exception.</p>
<p>
The example below shows a modified setAlignment method with validation added:</p>
<pre><code>public void setAlignment(int value) {
<span class=cfe><b>   if (!AlignStyle.valid(value))</b></span>
<span class=cfe><b>      throw new WFCInvalidEnumException("value", value, AlignStyle.class);</b></span>
   align = value;
   invalidate();   // Repaint control when property changes
}
</code></pre>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;For information about using invalidate to repaint a control, see <a href="vjctldeterminingcontrolsdisplay.htm#vjctlupdatingvisualdisplay">Updating Visual Display</a>.</p>
<p>
By throwing a WFCInvalidEnumException, you get the benefit that it is a non-checked exception, and there is a predefined message associated with it. This message has been translated to multiple languages so that when you run this control in various locales, you automatically get a meaningful error message.</p>

<h3><a name="vjctlusingpropertyvaluewhenpainting"></a>Using the Property Value when Painting</h3>
<p>
The alignment property affects the appearance of text in the control. Therefore, whenever the control is painted, the paint code must check the property's value and use it accordingly.</p>
<p>
You specify paint behavior by overriding the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Control_onPaint">
</object><a href=JavaScript:alink_1.Click()>onPaint</a> method. The example below shows you would read the alignment property value and then use the value in the drawString method to set the alignment. The constants LEFT, RIGHT, and so on are defined in the TextFormat class in com.ms.wfc.ui:</p>
<pre><code>protected void onPaint(PaintEvent p) {
   Graphics g = p.graphics;
   int style = 0;
   switch (align) {
      case AlignStyle.LEFT:
         style = TextFormat.LEFT;
         break;
      case AlignStyle.RIGHT:
         style = TextFormat.RIGHT;
         break;
      case AlignStyle.CENTER:
         style = TextFormat.HORIZONTALCENTER;
         break;
   }
   g.drawString(getText(), getClientRect(), style);
}
</code></pre>

<h3><a name="vjctlexposingthepropertyatdesigntime"></a>Exposing the Property at Design Time</h3>
<p>
To make the alignment property available at design time, you subclass <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ClassInfo">
</object><a href=JavaScript:alink_2.Click()>ClassInfo</a> to first define the property (by creating an instance of <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.PropertyInfo">
</object><a href=JavaScript:alink_3.Click()>PropertyInfo</a>). You then expose the property by calling the getProperties method:</p>
<pre><code>public static class ClassInfo extends Control.ClassInfo {
<span class=cfe><b>   public static final PropertyInfo alignment = new PropertyInfo(</b></span>
<span class=cfe><b>      MyControl.class, "alignment", AlignStyle.class);</b></span>

   public void getProperties(IProperties props) {
      super.getProperties(props);
      props.add(alignment);
   }
}
</code></pre>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;The third parameter passed to the PropertyInfo constructor (in this case, AlignStyle.class) is normally the data type of the property. However, because this property is an enumerated value, you pass the class you created that extends Enum.</p>
<p>
Because AlignStyle derives from the Enum class, the Properties window uses the editor associated with the Enum class. The result is a drop-down list that allows you to set the value of the property.</p>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;To create a property that is not exposed at design time (for example, a run time-only property), use the PropertyInfo object to set the BrowsableAttribute attribute to NO. For details, see <a href="vjctlspecifyingcustompropertyattributes.htm">Specifying Custom Property Attributes</a>.</p>

<h3><a name="vjctlacompleteexample"></a>A Complete Example</h3>
<p>
The following example shows a complete label control with an alignment property including all the features discussed previously:</p>
<pre><code>// SuperLabel.java
import com.ms.wfc.ui.*;
import com.ms.wfc.core.*;

public class SuperLabel extends Control {
   private int align = AlignStyle.LEFT;

   public int getAlignment() {
      return align;
   }

   public void setAlignment(int value) {
      if (!AlignStyle.valid(value))
         throw new WFCInvalidEnumException("value", value, AlignStyle.class);
      align = value;
      invalidate();   // Repaint control when property changes
   }
   
   protected void onPaint(PaintEvent p) {
      Graphics g = p.graphics;
      int style = 0;
      switch (align) {
         case AlignStyle.LEFT:
            style = TextFormat.LEFT;
            break;
         case AlignStyle.RIGHT:
            style = TextFormat.RIGHT;
            break;
         case AlignStyle.CENTER:
            style = TextFormat.HORIZONTALCENTER;
            break;
      }
      g.drawString(getText(), getClientRect(), style);
   }

   public static class ClassInfo extends Control.ClassInfo {
      public static final PropertyInfo alignment = new PropertyInfo(
         SuperLabel.class, "alignment", AlignStyle.class);
         
      public void getProperties(IProperties props) {
         super.getProperties(props);
         props.add(alignment);
      }
   }
}
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MyNotepad.java</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<h2><a name="vjconmynotepadjava"></a>MyNotepad.java</h2>
<pre><code>/*******************************************************************
MyNotepad.java
This sample is provided as a companion to the Introduction to WFC 
Programming topic in the Visual J++ documentation. Read the section&nbsp; 
titled MyNotepad Sample Walkthrough in conjunction with this sample.

********************************************************************/ 

import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.io.*;

public class MyNotepad extends Form
{

 &nbsp;&nbsp; private File currentDoc; // the I/O file stream&nbsp; 
 &nbsp;&nbsp; private String fileName; // the most recently-used file name
 &nbsp;&nbsp; private boolean fileOpen = false; // set true after file opened

 &nbsp;&nbsp; public MyNotepad()
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Required for Visual J++ Forms Designer support
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; initForm();&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setBounds(100, 100, 300, 300);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setText("Untitled - MyNotepad");
 &nbsp;&nbsp; }
 &nbsp;&nbsp; 
 &nbsp;&nbsp; private void HelpMenuAbout_click(Object sender, Event e)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageBox.show("Version: Visual J++ 6.0", "MyNotepad");
 &nbsp;&nbsp; }

 &nbsp;&nbsp; private void FileMenuNew_click(Object sender, Event e)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If edit control contains text, check if it should be saved
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (editbox.getText().length() != 0) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Open NewDialog class as a modal dialog
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int result = new NewDialog().showDialog(this);&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Retrieve result 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If Yes button was clicked open Save As dialog box
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (result == DialogResult.YES)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.FileMenuSaveAs_click(sender, e);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If No button was clicked clear edit control and set title
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (result == DialogResult.NO) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; editbox.setText("");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setText("Untitled - MyNotepad");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp; 
 &nbsp;&nbsp; }

 &nbsp;&nbsp; private void FileMenuOpen_click(Object sender, Event e)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create an Open File dialog box&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OpenFileDialog ofd = new OpenFileDialog();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set up filters and options
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ofd.setFilter("Text Docs (*.txt)|*.txt|All Files (*.*)|*.*");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ofd.setDefaultExt("txt");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Run the Open File dialog box
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int OK = ofd.showDialog();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Check result of dialog box after it closes
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (OK == DialogResult.OK) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Retrieve the filename entered 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fileName = ofd.getFileName();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Open a File stream on that filename 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currentDoc = File.open(fileName); 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Retrieve length of file
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int ilength = (int)currentDoc.getLength();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Read in ANSI characters to edit buffer
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; editbox.setText(currentDoc.readStringCharsAnsi(ilength));&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Close the file handle
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currentDoc.close();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fileOpen=true;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set the application's caption&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setText(File.getName(fileName) + " - MyNotepad");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }

 &nbsp;&nbsp; private void FileMenuSave_click(Object sender, Event e)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If there has been a file opened or saved
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fileOpen){
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Open the current file again
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currentDoc = File.open(fileName); 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Write edit control contents to file
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currentDoc.writeStringCharsAnsi(editbox.getText());
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Close file handle
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currentDoc.close();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.FileMenuSaveAs_click(sender, e);
 &nbsp;&nbsp; }

 &nbsp;&nbsp; private void FileMenuSaveAs_click(Object sender, Event e)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SaveFileDialog sfd = new SaveFileDialog();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set the options&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sfd.setFileName (fileName);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sfd.setTitle("Save Text File");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sfd.setFilter("Text Docs (*.txt)|*.txt|All Files (*.*)|*.*");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sfd.setDefaultExt("txt");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Run the dialog box&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int result = sfd.showDialog();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (result == DialogResult.OK ) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Retrieve the filename entered in the dialog box
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fileName = sfd.getFileName();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Open a File stream with ability to create a file if needed
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currentDoc = new File(fileName, FileMode.OPEN_OR_CREATE);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Write the contents of the edit control to the file
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currentDoc.writeStringCharsAnsi(editbox.getText());
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Close the file handle
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currentDoc.close();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fileOpen = true;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set the app's caption using the filename minus its path 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setText(File.getName(fileName) + " - MyNotepad");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }

 &nbsp;&nbsp; private void FileMenuExit_click(Object sender, Event e)
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Call the new file handler to invoke NewDialog
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // to ask if user wants to save current data 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.FileMenuNew_click(sender, e);&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application.exit();
 &nbsp;&nbsp; }

 &nbsp;&nbsp; /**
 &nbsp;&nbsp;&nbsp; * NOTE:&nbsp; The following code is required by the Visual J++ Forms
 &nbsp;&nbsp;&nbsp; * Designer. It can be modified using the Form editor. Do not
 &nbsp;&nbsp;&nbsp; * modify it using the Text editor.
 &nbsp;&nbsp;&nbsp; */

 &nbsp;&nbsp; Container components = new Container();
 &nbsp;&nbsp; MainMenu Menu = new MainMenu();
 &nbsp;&nbsp; MenuItem FileMenu = new MenuItem();
 &nbsp;&nbsp; MenuItem FileMenuNew = new MenuItem();
 &nbsp;&nbsp; MenuItem FileMenuOpen = new MenuItem();
 &nbsp;&nbsp; MenuItem FileMenuSave = new MenuItem();
 &nbsp;&nbsp; MenuItem FileMenuSaveAs = new MenuItem();
 &nbsp;&nbsp; MenuItem FileMenuExit = new MenuItem();
 &nbsp;&nbsp; MenuItem HelpMenu = new MenuItem();
 &nbsp;&nbsp; MenuItem HelpMenuAbout = new MenuItem();
 &nbsp;&nbsp; Edit editbox = new Edit();

 &nbsp;&nbsp; private void initForm()
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; FileMenuNew.setText("&amp;New");
 &nbsp;&nbsp;&nbsp;&nbsp; FileMenuNew.addOnClick(new EventHandler(this.FileMenuNew_click));

 &nbsp;&nbsp;&nbsp;&nbsp; FileMenuOpen.setText("&amp;Open");
 &nbsp;&nbsp;&nbsp;&nbsp; FileMenuOpen.addOnClick(new EventHandler(this.FileMenuOpen_click));

 &nbsp;&nbsp;&nbsp;&nbsp; FileMenuSave.setText("&amp;Save");
 &nbsp;&nbsp;&nbsp;&nbsp; FileMenuSave.addOnClick(new EventHandler(this.FileMenuSave_click));

 &nbsp;&nbsp;&nbsp;&nbsp; FileMenuSaveAs.setText("Save &amp;As");
 &nbsp;&nbsp;&nbsp;&nbsp; FileMenuSaveAs.addOnClick(new&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EventHandler(this.FileMenuSaveAs_click));

 &nbsp;&nbsp;&nbsp;&nbsp; FileMenuExit.setText("E&amp;xit");
 &nbsp;&nbsp;&nbsp;&nbsp; FileMenuExit.addOnClick(new EventHandler(this.FileMenuExit_click));

 &nbsp;&nbsp;&nbsp;&nbsp; FileMenu.setMenuItems(new MenuItem[] {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileMenuNew, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileMenuOpen, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileMenuSave, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileMenuSaveAs, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileMenuExit});
 &nbsp;&nbsp;&nbsp;&nbsp; FileMenu.setText("&amp;File");

 &nbsp;&nbsp;&nbsp;&nbsp; HelpMenuAbout.setText("&amp;About MyNotepad...");
 &nbsp;&nbsp;&nbsp;&nbsp; HelpMenuAbout.addOnClick(new 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EventHandler(this.HelpMenuAbout_click));

 &nbsp;&nbsp;&nbsp;&nbsp; HelpMenu.setMenuItems(new MenuItem[] {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HelpMenuAbout});
 &nbsp;&nbsp;&nbsp;&nbsp; HelpMenu.setText("&amp;Help");

 &nbsp;&nbsp;&nbsp;&nbsp; Menu.setMenuItems(new MenuItem[] {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileMenu, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HelpMenu});

 &nbsp;&nbsp;&nbsp;&nbsp; this.setText("MyNotepad");
 &nbsp;&nbsp;&nbsp;&nbsp; this.setVisible(false);
 &nbsp;&nbsp;&nbsp;&nbsp; this.setAutoScaleBaseSize(13);
 &nbsp;&nbsp;&nbsp;&nbsp; this.setClientSize(new Point(302, 314));
 &nbsp;&nbsp;&nbsp;&nbsp; this.setMenu(Menu);

 &nbsp;&nbsp;&nbsp;&nbsp; editbox.setDock(ControlDock.FILL);
 &nbsp;&nbsp;&nbsp;&nbsp; editbox.setFont(new Font("Fixedsys", 8.0f,&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FontSize.POINTS, FontWeight.NORMAL, false, false, false,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CharacterSet.DEFAULT, 0));
 &nbsp;&nbsp;&nbsp;&nbsp; editbox.setSize(new Point(302, 314));
 &nbsp;&nbsp;&nbsp;&nbsp; editbox.setTabIndex(1);
 &nbsp;&nbsp;&nbsp;&nbsp; editbox.setText("");
 &nbsp;&nbsp;&nbsp;&nbsp; editbox.setMultiline(true);
 &nbsp;&nbsp;&nbsp;&nbsp; editbox.setScrollBars(ScrollBars.VERTICAL);

 &nbsp;&nbsp;&nbsp;&nbsp; this.setNewControls(new Control[] {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; editbox});
 &nbsp;&nbsp; }

 &nbsp;&nbsp; /**
 &nbsp;&nbsp;&nbsp; * The main entry point for the application. 
 &nbsp;&nbsp;&nbsp; *
 &nbsp;&nbsp;&nbsp; * @param args Array of parameters passed to the application
 &nbsp;&nbsp;&nbsp; * via the command line.
 &nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp; public static void main(String args[])
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application.run(new MyNotepad());
 &nbsp;&nbsp; }
}</code></pre>
</BODY>
</HTML>

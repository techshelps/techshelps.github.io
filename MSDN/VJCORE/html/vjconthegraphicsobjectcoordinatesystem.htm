<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Graphics Object Coordinate System</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjconthegraphicsobjectcoordinatesystem"></a>The Graphics Object Coordinate System</h1>
<p>
A large number of the methods supported by the Graphics object depend on numerical coordinates. Such coordinates can be specified in a Rectangle object, which specifies the area in which an operation is to occur, or in a Point object, which specifies the x (horizontal) and y (vertical) coordinates at which the operation occurs.</p>
<p>
The term <i>coordinate system</i> identifies how the coordinates specified in such objects map to the display or to a device. Suppose, for example, that you call the Graphics object’s drawString method to draw text at coordinates 100, 100:</p>
<pre><code>Graphics g = this.createGraphics();
g.drawString(“Hello, WFC”, new Point(100, 100));
</code></pre>
<p>
The Point object in this example specifies the <i>x</i> and <i>y</i> coordinates at which to draw the string. However, the actual result of this operation depends on the coordinate system with which the Graphics object is associated. </p>
<p>
The coordinate systems with which you can associate a Graphics object are defined in the CoordinateSystem class. The default coordinate system for a Graphics object is CoordinateSystem.TEXT, which means that as the x and y values in a Point object increase, the text (or bitmap or control) proceeds to the right horizontally and down vertically.</p>
<p>
To associate a coordinate system with the Graphics object, use the setCoordinateSystem method, as follows:</p>
<pre><code>Graphics gr = this.createGraphics();
gr.setCoordinateSystem(CoordinateSystem.ANISOTROPIC);
</code></pre>
<p>
The following table lists the coordinate systems that you can associate with the Graphics object and describes the direction in which drawing proceeds as the x and y axes defined in a Point object increase.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>Coordinate System</b></td>
<td class=label width=29%><b>Icreasing x-axis</b></td>
<td class=label width=34%><b>Increasing y-axis</b></td>
</tr>
<tr valign=top>
<td width=37%>CoordinateSystem.TEXT</td>
<td width=29%>Right</td>
<td width=34%>Down</td>
</tr>
<tr valign=top>
<td width=37%>CoordinateSystem.LOMETRIC</td>
<td width=29%>Right</td>
<td width=34%>Up</td>
</tr>
<tr valign=top>
<td width=37%>CoordinateSystem.HIMETRIC</td>
<td width=29%>Right</td>
<td width=34%>Up</td>
</tr>
<tr valign=top>
<td width=37%>CoordinateSystem.LOENGLISH</td>
<td width=29%>Right</td>
<td width=34%>Up</td>
</tr>
<tr valign=top>
<td width=37%>CoordinateSystem.HIENGLISH</td>
<td width=29%>Right</td>
<td width=34%>Up</td>
</tr>
<tr valign=top>
<td width=37%>CoordinateSystem.TWIPS</td>
<td width=29%>Right</td>
<td width=34%>Up</td>
</tr>
<tr valign=top>
<td width=37%>CoordinateSystem.ISOTROPIC</td>
<td width=29%>User-defined</td>
<td width=34%>User-defined</td>
</tr>
<tr valign=top>
<td width=37%>CoordinateSystem.ANISOTROPIC</td>
<td width=29%>User-defined</td>
<td width=34%>User-defined</td>
</tr>
</table><br>
<p>
For more information, see:
<ul type=disc>
<li>
<a href="vjconsettingcoordinateorigin.htm">Setting the Coordinate Origin</a><br><br></li>
<li>
<a href="vjconmappinglogicalcoordinatestodevicecoordinates.htm">Mapping Logical Coordinates to Device Coordinates</a></li>
</ul>
</BODY>
</HTML>

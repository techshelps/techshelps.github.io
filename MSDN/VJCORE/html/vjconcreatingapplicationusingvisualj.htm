<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating the Application using Visual J++</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjconcreatingapplicationusingvisualj"></a>Creating the Application using Visual J++</h1>
<p>
This section walks through the steps required to create the MyNotepad application in Visual J++. It's helpful to look at the steps in the design environment before jumping into the code generated by the designer for those steps. 
<ol>
<li>
Create the main form<p class=tl>
To create the main form, use the New Project dialog box that appears when you first open Visual J++ or select New Project from the File menu. Select the Windows Application icon, type in the name of your application form (MyNotepad in this case), and choose Open, and Visual J++ creates a project with that name. </P><p class=tl>
The project contains a form called Form1.java by default, which will be renamed to MyNotepad.java in a later step.</P><p>
<img src="vj5bsi1.gif" border=0></P></li>
<li>
Add controls and menus to the form<p class=tl>
The Visual J++ Forms Designer makes it easy to layout the form. To open the form in design mode, select Form1.java in the Project Explorer and then choose Designer from the View menu (or choose View Designer from the shortcut menu). With the form displayed, you can add controls from the toolbox. To access the WFC controls in the toolbox, click on the Toolbox tab or choose Toolbox from the View menu, and click the WFC Controls button in the toolbox to display those controls. </P><p class=tl>
For this sample, an edit control was added to the form from the toolbox.</P><p class=tl>
Adding a menu is just as easy: drag the MainMenu control from the toolbox onto the form and place it anywhere; then begin typing in the first box and continue adding menu items in the boxes below or to the right. </P><p>
<img src="vj5bsi2.gif" border=0></P><p class=tl>
Note that you can create an accelerator key on the menu by entering an ampersand (&amp;) before the desired character. This becomes underlined on the menu. </P></li>
<li>
Set properties on the form and controls<p class=tl>
To set properties, use the Properties window. In this case, most properties were left with default values for the sake of simplicity. The following properties on the edit control were changed: the multiline property was set to true, the doc property to was set to Fill, the scrollBars property was set to Vertical, and the font name property was set to Fixedsys to better emulate Notepad. There may be other properties you'll want to set as well on the form and controls.</P><p class=tl>
You'll probably want to rename some of the components to make more sense programmatically. Renaming is done by selecting the form or control and setting the name property. In the case of MyNotepad, the following name changes were made:</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Default Name</b></td>
<td class=label width=50%><b>New Name</b></td>
</tr>
<tr valign=top>
<td width=50%>Edit1</td>
<td width=50%>EditBox</td>
</tr>
<tr valign=top>
<td width=50%>MainMenu1</td>
<td width=50%>Menu</td>
</tr>
<tr valign=top>
<td width=50%>MenuItem1</td>
<td width=50%>FileMenu</td>
</tr>
<tr valign=top>
<td width=50%>MenuItem2</td>
<td width=50%>FileMenuNew</td>
</tr>
<tr valign=top>
<td width=50%>MenuItem3</td>
<td width=50%>FileMenuOpen</td>
</tr>
<tr valign=top>
<td width=50%>MenuItem4</td>
<td width=50%>FileMenuSave</td>
</tr>
<tr valign=top>
<td width=50%>MenuItem5</td>
<td width=50%>FileMenuSaveAs</td>
</tr>
<tr valign=top>
<td width=50%>MenuItem6</td>
<td width=50%>FileMenuExit</td>
</tr>
<tr valign=top>
<td width=50%>MenuItem7</td>
<td width=50%>HelpMenu</td>
</tr>
<tr valign=top>
<td width=50%>MenuItem8</td>
<td width=50%>HelpMenuAbout</td>
</tr>
</table><br>
</li>
<li>
Change the name of Form1.java<p class=tl>
You may want the main form to have a different name than Form1.java. To do this, select Form1.java in the Project Explorer, right-click and choose Rename from the shortcut menu, and type the new name (in this case, MyNotepad.java). </P><p class=tl>
If you do change the name, remember that you must change all occurrences of Form1 in the source code. To do this, first close the Forms Designer. Then open the source by choosing View Code from the shortcut menu. Choose Find and Replace from the Edit menu, and replace all instances of Form1 with the new name (for example, replace Form1 with MyNotepad).</P></li>
<li>
Create a dialog box<p class=tl>
The NewDialog dialog box is just another form in the project. To create additional&nbsp; forms, choose Add Form from the Project menu, select Form in the Add Item dialog box, type the name of the new form (NewDialog.java, in this case) and click Open.</P><p class=tl>
In this case, three buttons were added and named YesButton, NoButton, and CancelButton, with appropriate labels (&amp;Yes, &amp;No, and &amp;Cancel). The button control has a dialogResult property, which is useful when the buttons are used on a modal dialog. For example, if the YesButton control's dialogResult property is set to Yes and the user clicks this button, the dialog box closes and returns DialogResults.Yes. In this case, the dialogResult properties were set as follows:</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Control</b></td>
<td class=label width=50%><b>dialogResult Property</b></td>
</tr>
<tr valign=top>
<td width=50%>YesButton</td>
<td width=50%>Yes</td>
</tr>
<tr valign=top>
<td width=50%>NoButton</td>
<td width=50%>No</td>
</tr>
<tr valign=top>
<td width=50%>CancelButton</td>
<td width=50%>Cancel</td>
</tr>
</table><br>
<p class=tl>
One note of interest here is that the Form class has an acceptButton property that determines which button is clicked when the user presses ENTER. In this case the acceptButton property was set to the YesButton control. The Form class also has a cancelButton property that determines which button to click when the ESC key is pressed; this was set to the CancelButton control. </P><p class=tl>
Likewise, the accelerator (&amp;) characters in the button labels were used to map a specific key to each button (for example, because the label for the YesButton button is "&amp;Yes", pressing Y clicks that button).&nbsp; </P><p class=tl>
Two additional label controls were then added to display the message text of the dialog box. Finally, the PictureBox control was added to the form and that control's image property was set to a bitmap containing an exclamation graphic.</P><p>
<img src="vj5bsi3.gif" border=0></P><p class=tl>
Because an image was added to the form, Visual J++ automatically created a resource file (called NewDialog.resources) and serialized the image to this file when the form was saved. The resource file provides a mechanism for localizing the form to different languages, although in this case it is mostly used for packaging. You can also set the localizable property of a form to true to cause a resource file to be added to your project, in which case all resources, including strings are added to the resource file. </P></li>
</ol>
</BODY>
</HTML>

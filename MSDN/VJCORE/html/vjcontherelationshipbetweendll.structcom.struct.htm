<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding the Relationship Between @dll.struct and @com.struct</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjcontherelationshipbetweendll.structcom.struct"></a>Understanding the Relationship Between @dll.struct and @com.struct</h2>
<p>
The @dll.struct directive is very similar to the @com.struct directive emitted by the jactivex tool and implicitly by the javatlb tool. (The javatlb tool, documented in previous versions of Microsoft Visual J++, has been replaced by jactivex.) The main difference is that the default type mappings are suited for Microsoft Windows function calling instead of COM object calling. Given this information, it follows that you can also generate @dll.struct classes by describing the structure in a type library and using the jactivex tool to generate the Java class. However, it's usually faster to generate the classes manually.</p>
</BODY>
</HTML>

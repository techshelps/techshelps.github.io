<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building COM Objects</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjhowbuildingcomobjects"></a>Building COM Objects</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowBuildingCOMObjects_C">
</object></p>
<p>
Visual J++ simplifies the building of COM objects by providing an easy-to-use interface for selecting classes in your project that you want to use as COM classes. Any public, non-abstract class can be used to create a COM object. Visual J++ uses the public members of a class as the interface to the COM object. When you build your project, classes that are selected as COM classes are built and registered in the system as COM objects. Once you have built your COM objects, you can package them in a COM DLL and access them from other programming environments or from applications that support COM.</p>
<p>
In this scenario, you build a COM object, packaged in a COM DLL, that exposes sports-related, statistical functions. You will learn how to:
<ul type=disc>
<li>
Create a project with classes that can be exposed as COM objects.<br><br></li>
<li>
Use the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowSettingCOMClasses">
</object><a href=JavaScript:alink_2.Click()>COM Classes</a> tab in the <b>Project Properties</b> dialog box to select classes in your project to expose as COM objects.<br><br></li>
<li>
Package the COM classes into a COM DLL for other programming languages and applications to use.<br><br></li>
<li>
Build the project.</li>
</ul>
<h1>Creating a Project</h1>
<p>
Visual J++ provides a COM DLL template that creates a project with a class that is already registered as a COM class. This template is also configured to package the project in a COM DLL. For more information on creating COM DLL projects using the template, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowCreatingCOMDLL">
</object><a href=JavaScript:alink_3.Click()>Creating a COM DLL</a>.</p>
<p>
Although the COM DLL template is available, this scenario does not use the template because it is important to understand how to select a class in any project as a COM class. In this scenario, you create an <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowCreatingEmptyProject">
</object><a href=JavaScript:alink_4.Click()>empty project</a> and add a Java class to the project that will be exposed as a COM object.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Before you start the following procedure, close any open projects. (On the <b>File</b> menu, click <b>Close All</b>.)</p>
<p class=label>
<b>To create an empty project</b>
<ol>
<li>
On the <b>File</b> menu, click <b>New Project</b>.<br><br></li>
<li>
In the <b>New</b> tab, select the <b>Visual J++ Projects</b> folder, and then click the <b>Empty Project</b> icon.<br><br></li>
<li>
In the <b>Name</b> box, type a name for your project.<p class=tl>
For this scenario, type <b>Stats</b>.</P></li>
<li>
In the <b>Location</b> box, type the path where you want to save your project, or click <b>Browse</b> to navigate to a directory.<br><br></li>
<li>
Click <b>Open</b>.<p class=tl>
Your project appears in <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowUsingProjectExplorer">
</object><a href=JavaScript:alink_5.Click()>Project Explorer</a> and contains no files.</P></li>
</ol>
<p class=label>
<b>To add a class to your project</b>
<ol>
<li>
In Project Explorer, right-click the name of your project. <br><br></li>
<li>
On the shortcut menu, point to <b>Add</b> and then click <b>Add Class</b>.<br><br></li>
<li>
To add an empty Java class, select the <b>Class</b> icon.<br><br></li>
<li>
In the <b>Name </b>box, type a name for the Java class.<p class=tl>
For this scenario, name the class <b>Stats.java</b>.</P></li>
<li>
Click <b>Open</b>. </li>
</ol>
<h1>Adding Code to the Class</h1>
<p>
For clients of your COM DLL to manipulate your COM object, you provide public methods in your COM class. Visual J++ exposes all public methods of a Java class, including those inherited from superclasses, through the interface to the COM object. For this scenario, you add two methods to the class. These methods provide sports-related statistical functions to the user of the COM object.</p>
<p>
The first public method that the Stats COM object needs to expose is the <code>winLossPercentage</code> method. This method calculates the percentage of wins a team has over the total number of games that have been played by the team. </p>
<p class=label>
<b>To add the winLossPercentage method</b>
<ul type=disc>
<li>
Add the following method definition to the Stats<b> </b>class.<pre><code>public float winLossPercentage(int gamesPlayed, int gamesWon)
{
 &nbsp; float returnValue = gamesWon % gamesPlayed * .100f;
 &nbsp; if (returnValue == 0.0f)
 &nbsp;&nbsp;&nbsp;&nbsp; return 1.0f;
 &nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp; return returnValue;
}</code></pre>
</li>
</ul>
<pre></pre>
<p class=tl>
This code uses the modulus operator to obtain the remainder from a division between the number of games that were won by the team and the number of games that were played. The value is then multiplied by .100f to convert the value to the type typically used in a team standings display. After the value has been determined, the code checks to see if the value is 0.0f, which indicates that there is no remainder and that the team has won all its games. If so, the code returns the value of 1.0f. Otherwise, the code returns the regular value.</P><p>
The final public method that the Stats COM object needs to expose is the <code>goalsAgainstAverage</code> method. This method calculates the average number of goals that are allowed by a goaltender. It determines this by dividing the number of goals allowed by the goaltender by the number of complete games the goaltender has played in.</p>
<p class=label>
<b>To add the goalsAgainstAverage method</b>
<ul type=disc>
<li>
Add the following method definition to the Stats class.<pre><code>public float GoalsAgainstAverage(int gamesPlayed, int goalsAllowed)
{
 &nbsp; return (float) goalsAllowed/gamesPlayed;
}</code></pre>
</li>
</ul>
<pre></pre>
<p class=tl>
This code divides the number of goals allowed by the number of games played and casts the result as a float value.</P><h1>Defining a Class as a COM Class</h1>
<p>
After you have created your class and defined the public methods will be exposed through COM, you define the class as a COM class. Use the <b>COM Classes</b> tab in the <b>Project Properties</b> dialog box to select classes from your project as COM classes.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you do not need to define multiple classes as COM classes, you can define a COM class in the <b>Class Properties</b> dialog box. To display the <b>Class Properties</b> dialog box, in Class Outline, right-click the name of the class, and then click <b>Class Properties</b>. In the<b> Class Properties</b> dialog box, select the <b>COM Class</b> check box.</p>
<p class=label>
<b>To define a class as a COM Class</b>
<ol>
<li>
On the <b>Project</b> menu, click <b>&lt;Project&gt; Properties</b> (where <b>&lt;Project&gt;</b> is the name of your control project).<br><br></li>
<li>
Click the <b>COM Classes</b> tab.<br><br></li>
<li>
In the <b>COM Classes</b> tab, select the <b>Automatically generate Type Library</b> option.<br><br></li>
<li>
In the list of classes, select the name of the class that you want to expose as a COM object. <p class=tl>
For this scenario, select the <b>Stats</b> class.</P></li>
<li>
Click <b>OK</b>.<p class=tl>
Visual J++ adds an @com.register comment tag to the top of your class definition. When your project is compiled, the compiler uses the information in the comment tag to register your class as a COM class in the registry.</P></li>
</ol>
<h1>Packaging the Project as a COM DLL</h1>
<p>
So that other applications can access your COM object, you package it in a COM DLL.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you want to distribute your COM object over the Internet, you can package your control in a CAB file instead of a COM DLL.</p>
<p class=label>
<b>To package your COM object in a COM DLL</b>
<ol>
<li>
On the <b>Project</b> menu, click <b>&lt;Project&gt; Properties</b> (where <b>&lt;Project&gt;</b> is the name of your control project).<br><br></li>
<li>
Click the <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vedlgProjectSettingsPackagingOutputsTabDialogBox">
</object><a href=JavaScript:alink_6.Click()>Output Format</a> tab.<br><br></li>
<li>
Select the <b>Enable Packaging</b> check box.<br><br></li>
<li>
In the <b>Packaging type</b> drop-down list, select <b>COM DLL</b>.<br><br></li>
<li>
In the <b>File name</b> box, type a name for your COM DLL. (A default name is created for you using the name of the project.)<br><br></li>
<li>
Select the <b>Outputs of type</b> and the <b>Java Classes &amp; Resources</b> options.<br><br></li>
<li>
Click <b>OK</b>.</li>
</ol>
<h1>Building the Project</h1>
<p>
During the build process, Visual J++ packages your COM classes in a COM DLL and registers the DLL and the COM classes within it as COM objects. When the classes are in the registry, they are available to other applications. For more information on importing a COM object into Visual J++, see <a href="vjhowimportingcomobjects.htm">Importing COM Objects</a>.</p>
<p class=label>
<b>To build your project</b>
<ul type=disc>
<li>
On the <b>Build</b> menu, click <b>Build</b>. (If you receive any compilation errors or message, correct the errors and rebuild your project.)</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To perform additional registration while your COM class is being registered, you can add a user-defined method named <code>onCOMRegister</code> to your COM class. You can use this method to perform tasks such as registering a Visual J++ add-in into the list of Visual J++ add-ins. This method is called by Visual J++ during the COM registration process for COM classes and during the registration of a COM DLL built with Visual J++. The signature of the <code>onCOMRegister</code> method must match the following signature:</p>
<pre><code>public static void onCOMRegister(boolean register)
{
 &nbsp; // Add your custom registration code here
}</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Dynamic Styles</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>


<h1><a name="vjhowdynamicstyles"></a>Using Dynamic Styles</h1>
<p>
You can think of a Style object as a freestanding collection of properties. The term style is borrowed from the word processing world where the editing of a style sheet is independent of the documents to which you apply it. The same is true for using and applying Style objects in this library. </p>
<p>
As an example, your boss tells you that the new corporate color is red and you need to change the color of elements in your HTML pages. You can, of course, set properties directly on elements, which is the traditional model for GUI framework programming: </p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// old way of doing things...
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DhText t1 = new DhText();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DhText t2 = new DhText();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t1.setColor( Color.RED );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t1.setFont( "arial");
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t2.setColor( Color.RED );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t2.setFont( "arial");
 &nbsp;&nbsp; </code></pre>
<p>
You could, of course, use derivation to save yourself time. For example, you might consider improving this with the following code: </p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// old way of doing things a little better...
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class MyText extends DhText
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public MyText()
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setColor( Color.RED );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setFont( "arial" );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; </code></pre>
<p>
This works fine until you decide you also want those settings for buttons, labels, tabs, documents, and so on. And you’ll find yourself with even more work when you apply these to another part of your program or to another program. </p>
<p>
The answer to this problem is a Style object. While using this library, you can instantiate a Style object and set its properties at any point: </p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// STEP 1: Create style objects.

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DhStyle myStyle = new DhStyle();

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // STEP 2: Set properties on style objects

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myStyle.setColor( Color.RED );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myStyle.setFont( "arial" );
 &nbsp;&nbsp; </code></pre>
<p>
Then at any other time in the code, you can apply that style to any number of elements: </p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DhText t1 = new DhText();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DhText t2 = new DhText();

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // STEP 3: Apply styles using the setStyle method.

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t1.setStyle( myStyle );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t2.setStyle( myStyle );
 &nbsp;&nbsp; </code></pre>
<p>
When it's time to keep up with the dynamic nature of high-level policy setting at your corporation, the following line sets all instances of all elements with myStyle set on them to change color: </p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myStyle.setColor( Color.BLUE );
   </code></pre>
<p>
Here is the really powerful part: all this is available during run time. Every time you make a change to the Style object, the DHTML run time dynamically reaches back and updates all elements to which that Style object is applied. </p>
<p>
For more information, see <a href="vjhowstyleinheritance.htm">Understanding Style Inheritance</a>.</p>
</BODY>
</HTML>

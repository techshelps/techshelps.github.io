<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Code to Overridden Methods</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjmscaddingcodetooverriddenmethods"></a>Adding Code to Overridden Methods</h1>
<p>
After you have created overridden methods using Class Outline, you provide your implementation code to the method definitions. Depending on how you implement the overridden method, you can either retain or remove the call to the superclass version of the method.</p>
<h3>Adding Code to the add Method</h3>
<p>
To add controls to the GroupCheck control's GroupBox control, you add code to the GroupCheck's <code>add</code> method that calls the GroupBox's <code>add</code> method. This causes the GroupBox control, instead of the GroupCheck control, to parent the control being added.</p>
<p class=label>
<b>To add code to the add method</b>
<ol>
<li>
Before adding code to the <code>add</code> method, you add a private member variable to the GroupCheck class to determine whether controls can be added. Add the following line of code to the GroupCheck class:<pre><code>private boolean m_bReady = false;
</code></pre>
</li>
<li>
Inside the definition of the <code>add</code> method, add the following code:<pre><code>if(m_bReady){
 &nbsp; control.setEnabled(checkBox1.getChecked());
 &nbsp; groupBox1.add(control);
}
else
 &nbsp; super.add(control);
</code></pre>
<p class=tl>
This code determines whether the <code>m_bReady</code> member variable is set to true. This check is made to prevent the control's GroupBox control from being added to itself. If the value of <code>m_bReady</code> is true, the code calls the <code>setEnabled</code> method of the control passed as a parameter to the method. The <code>setEnabled</code> method is passed the checked state of the GroupCheck control's CheckBox control. Because controls can be added to the GroupCheck control when it is unchecked, it is important that controls be enabled or disabled properly when added. </P><p class=tl>
The code then calls the GroupBox control's <code>add</code> method and passes the control parameter to have the control added to the GroupBox control instead of the UserControl. If the<code> m_bReady</code> member variable is set to false, a call is made to the superclass version of the <code>add</code> method with the control passed as a parameter.</P></li>
</ol>
<h3>Adding Code to Control-Related Methods</h3>
<p>
So that the user can access the controls within the GroupBox control, you provide code in the <code>getControl</code>, <code>getControlCount</code>, and <code>getControls</code> methods that calls the GroupBox control's implementation of these methods.</p>
<p class=label>
<b>To add code to control-related methods</b>
<ol>
<li>
Inside the definition of the <code>getControl</code> method, type the following code to replace the code that was added by Class Outline:<pre><code>return groupBox1.getControl(index);
</code></pre>
</li>
<li>
Inside the definition of the <code>getControlCount</code> method, type the following code to replace the code that was added by Class Outline:<pre><code>return groupBox1.getControlCount();
</code></pre>
</li>
<li>
Inside the definition of the <code>getControls</code><b> </b>method, type the following code to replace the code that was added by Class Outline:<pre><code>return groupBox1.getControls();
</code></pre>
</li>
</ol>
<h3>Adding Code to the remove Method</h3>
<p>
So that controls can be deleted from the GroupCheck control, you provide code in the <code>remove</code> method for the GroupCheck control that calls the GroupBox control's <code>remove</code> method.</p>
<p class=label>
<b>To add code to the remove method</b>
<ul type=disc>
<li>
Inside the definition of the <code>remove</code> method, type the following code to replace the code that was added by Class Outline:<pre><code>if(m_bReady) {
 &nbsp; groupBox1.remove(c);
}
else {
 &nbsp; super.remove(c);
}
</code></pre>
<p class=tl>
This code determines whether the <code>m_bReady</code> variable is true. If it is, the code calls the GroupBox control's version of the <code>remove</code> method with the control that is passed to the method as a parameter. The check for <code>m_bReady</code> being true is performed to prevent the CheckBox or GroupBox controls from being removed. If <code>m_bReady</code> is false, the code calls the superclass version of the method to ensure that the control being removed is handled properly.</P></li>
</ul>
<h3>Adding Code to the setText Method</h3>
<p>
The GroupBox control does not provide a way to autosize the text portion of the control to the amount of text being displayed. For the GroupCheck control to display its text properly, override the <code>setText</code> method to determine the correct width of the control based on the size of the text to display.</p>
<p class=label>
<b>To add code to the setText method</b>
<ul type=disc>
<li>
Inside the definition of the <code>setText</code> method, type the following code to replace the code that was added by Class Outline:<pre><code>Graphics g = checkBox1.createGraphics();
checkBox1.setWidth(g.getTextSize(value).x + 20);
g.dispose();
checkBox1.setText(value);
super.setText(value);
</code></pre>
<p class=tl>
This code uses the Graphics class methods to determine the size of the text that is being specified. When the size of the text is determined, it is increased by a value of 20 to compensate for the size of the check box and the space between the check box and the text portion of the CheckBox control. The code then calls the <code>dispose</code> method of the Graphics class to free any resources that were allocated, sets the text property of the CheckBox control, and calls the superclass version of the <code>setText</code> method. </P></li>
</ul>
<p>
The next step is to <a href="vjmscaddingmethodstocontrol.htm">add a new method to the control</a>.</p>
</BODY>
</HTML>

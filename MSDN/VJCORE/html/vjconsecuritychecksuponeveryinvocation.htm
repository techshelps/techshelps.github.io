<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Security Checks Upon Every Invocation</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjconsecuritychecksuponeveryinvocation"></a>Security Checks Upon Every Invocation</h2>
<p>
This is the most stringent check available. On every call, the entire call stack is examined. If even one caller that is not fully-trusted is discovered on the call stack, a SecurityException is thrown. By default, all J/Direct methods perform this check. RNI methods do not perform this check due to backward compatibility requirements. RNI was designed to allow easy porting from the original JDK 1.0 native interface, which did not offer this security check. </p>
<p>
Although this security check offers maximum safety, Microsoft offers a way to disable it. The mechanism for disabling is provided because this stringent security check has two important side effects:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=25%>Possible Performance Degradation</td>
<td width=75%>This security check requires a scan of the entire call stack each time a J/Direct method is called. The performance degradation is most noticeable on trusted applets, which generally run with a security manager present. Applications, on the other hand, usually do not see a significant performance drop. This is due to the fact that J/Direct omits the call stack scan for applications that run without a security manager.</td>
</tr>
<tr valign=top>
<td width=25%>Inflexibility</td>
<td width=75%>This security mechanism forces the use of maximum permissions, even in cases where only one specific permission is required. For example, consider a trusted library that uses J/Direct to expose a single permission to untrusted applets in a safe way. It would be appropriate for this library to turn off the call time security check and perform its own security check for the specific permission.</td>
</tr>
</table><br>
<p>
The @security directive disables the per-invocation security check. The syntax for this directive is:</p>
<pre><code>/** @security(checkDllCalls=off) */
</code></pre>
<p>
The @security directive applies to the entire class. Individual methods within a class cannot be tagged. The following example shows the placement of the @security directive:</p>
<pre><code>/** @security(checkDllCalls=off) */
  class FastJDirectMethods{
 &nbsp;&nbsp; /** @dll.import(...) */
 &nbsp;&nbsp; static native void func();
  }
</code></pre>
<p>
Be aware of the fact that disabling this security check transfers responsibility for security from the Microsoft VM to you. Remember that even with this security check disabled, you will still have to digitally sign the class for maximum trust. If you decide to use this directive, be sure to take the following precautions:
<ul type=disc>
<li>
All J/Direct methods should be declared private.<br><br></li>
<li>
Any publicly accessible methods should never blindly pass caller arguments to J/Direct. You must take responsibility for ensuring that only valid arguments are passed to native code.<br><br></li>
<li>
Your class should expose no more capability than is required, and it should guard all access to these capabilities with the appropriate security checks.</li>
</ul>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Calls from within an applet's init, start, stop, or destroy methods may trigger a SecurityExceptionEx even if the applet is trusted. To avoid this situation, you should assert permissions by executing the following code:</p>
<pre><code>&nbsp;&nbsp;import com.ms.security.*;
 &nbsp;&nbsp; ...
  PolicyEngine.assertPermission(PermissionID.SYSTEM);
</code></pre>
</BODY>
</HTML>

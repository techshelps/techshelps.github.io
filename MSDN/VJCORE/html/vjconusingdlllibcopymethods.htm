<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the DllLib Copy Methods</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h3><a name="vjconusingdlllibcopymethods"></a>Using the DllLib Copy Methods</h3>
<p>
Another method for reading and writing data through a raw pointer is to use the overloaded copy methods in DllLib. These methods copy data between Java arrays of various types and raw pointers. If you need to treat a raw pointer as a pointer to a string (LPTSTR), you can use one of the DllLib methods ptrToStringAnsi, ptrToStringUni, or ptrToString to parse the string and convert it into a java.lang.String object. </p>
<pre><code>import com.ms.dll.*;

  int rawptr = ...;
  String s = DllLib.ptrToStringAnsi(rawptr);
</code></pre>
<p class=indent>
<B><b>! WARNING</b></B>&nbsp;&nbsp;&nbsp;All Java objects are subject to movement in memory or reclamation by the garbage collector. Therefore, you should not attempt to obtain a pointer to a Java array by calling a DLL function that does generic casting. The following example shows you an incorrect way to obtain the pointer:</p>
<pre><code>// Do not do this!
  /** @dll.import("MYDLL") */
  private native static int Cast(int javaarray[]);

  // Inside MYDLL.DLL&nbsp;&nbsp; 
  LPVOID Cast(LPVOID ptr) 
  {
 &nbsp;&nbsp; // Do not do this!
 &nbsp;&nbsp; return ptr; // comes in as a Java array; goes out as a Java int
  } 
</code></pre>
<p class=tl>
The value of <i>ptr</i> is guaranteed to be valid only for the duration of the call to the Cast function. This is because VM implementations are allowed to implement passing of arrays by copying and because garbage collection may cause the physical location of the array to be different after the call to the Cast function returns.</P></BODY>
</HTML>

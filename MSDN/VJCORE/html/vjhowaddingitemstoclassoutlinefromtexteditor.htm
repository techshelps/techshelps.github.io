<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Items to Class Outline from the Text Editor</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjhowaddingitemstoclassoutlinefromtexteditor"></a>Adding Items to Class Outline from the Text Editor</h2>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowAddingItemsToClassOutlineFromTextEditor_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowAddingItemsToClassOutlineFromTextEditor_T">
</object></p>
<p>
Although Visual J++ provides <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowClassOutlineOverview">
</object><a href=JavaScript:alink_3.Click()>Class Outline</a> and <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowModifyingWFCComponentsWithComponentBuilder">
</object><a href=JavaScript:alink_4.Click()>WFC Component Builder</a> to help you add methods, member variables, properties, events, and classes to a project, you can also add these to your project by typing the code directly into your .java file from the Text editor. When you add the code for new classes and class members to a .java file, IntelliSense immediately displays the appropriate icon for the new class or class member in your project's Class Outline. </p>
<p>
The following procedure demonstrates the dynamic updating of Class Outline when a new class and method is added to a source file from the Text editor.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The code examples in this and the following topic, <a href="vjhowaddingjavadoccommentstosourcefiles.htm">Adding Javadoc Comments to Source Files</a>, were created with a Visual J++ Console Application project. You may use any existing Visual J++ project to reproduce the results of these scenarios. If you want to create a Console Application project for the following procedures, see <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowCreatingJavaConsoleApplication">
</object><a href=JavaScript:alink_5.Click()>Creating a Console Application </a> and follow the steps to create and open the project before proceeding.</p>
<p class=label>
<b>To add a new class to Class Outline from the Text editor</b>
<ol>
<li>
In <b>Project Explorer</b>, click the plus ("+") sign to the left of your project's name to expand your project.<br><br></li>
<li>
Double-click the filename or icon of the .java file containing your project's <code>main()</code> method (Class1 .java by default).<p class=tl>
Visual J++ opens the Text editor and loads your .java file. The file is now ready for editing.</P></li>
<li>
On the <b>View</b> menu, click <b>Other Windows</b> and select <b>Document Outline</b> from the cascading menu.<p class=tl>
<b>Class Outline</b> appears with a collapsed tree view of your file.</P></li>
<li>
From within the Text editor, after the closing brace of the class definition for <code>Class1, </code>add the following code to your .java source file:<pre><code>class Greeting
{
}
</code></pre>
</li>
<li>
In <b>Class Outline</b>, notice that a new class icon has been added to the tree view of your project's file for the <code>Greeting</code> class you've just created.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you use the Text editor to move the insertion point in the source file, Class Outline does not indicate which definition has been navigated to. To synchronize Class Outline with the source file, right-click the declaration in the Text editor and click <b>Sync Class Outline</b> on the shortcut menu.</p>
<p class=label>
<b>To add a new method to Class Outline from the Text editor</b>
<ol>
<li>
In <b>Class Outline</b>, expand the <code>Greeting</code> class to display the icons for <b>Superclasses</b> and <b>Inherited Members</b>.<br><br></li>
<li>
From within the Text editor, add the following code after the opening brace of the <code>Greeting</code> class:<pre><code>public static String hello()
{
String strGreet = new String("Hello World!");
return strGreet;
}
</code></pre>
</li>
<li>
In <b>Class Outline</b>, notice a new method icon has been added to your project for the <code>hello()</code><b> </b>method you've just created.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you use the Text editor to move the insertion point in the source file, Class Outline does not indicate which definition has been navigated to. To synchronize Class Outline with the source file, right-click the declaration in the Text editor and click <b>Sync Class Outline</b> on the shortcut menu.
<ol start=4>
<li>
To test the <code>hello()</code> method of the <code>Greeting</code> class, add the following code to your application's <code>main()</code> method:<pre><code>System.out.println(Greeting.hello());
return;
</code></pre>
</li>
<li>
Build the program.<br><br></li>
<li>
In the Text editor, place the cursor on "<code>return</code>" (the last statement of this program's code). Click the right mouse button and select <b>Run To Cursor</b> from the shortcut menu.<br><br></li>
<li>
 View the following results in JVIEW's console window:<pre><code>Hello World!</code></pre>
</li>
</ol>
<pre></pre>
<p>
To add a Javadoc comment to the new <code>hello()</code> method, see <a href="vjhowaddingjavadoccommentstosourcefiles.htm">Adding Javadoc Comments to Source Files</a>.</p>
</BODY>
</HTML>

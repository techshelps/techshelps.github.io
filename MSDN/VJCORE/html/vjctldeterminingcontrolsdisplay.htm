<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Determining the Control's Display</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjctldeterminingcontrolsdisplay"></a>Determining the Control's Display</h2>
<p>
Within your control, you can write code to determine and modify the visual representation of your control. The following sections provide background information on control display and information on how to manage it.</p>
<p>
In this topic you can find information about the following:
<ul type=disc>
<li>
<a href="#vjctlcontroldimensions">Control Dimensions</a>&nbsp;&nbsp;&nbsp;Background information on units used in calculating dimensions.<br><br></li>
<li>
<a href="#vjctllocationsize">Location and Size</a>&nbsp;&nbsp;&nbsp;Background information on the properties used to lay out the control.<br><br></li>
<li>
<a href="#vjctlupdatingvisualdisplay">Updating Visual Display</a>&nbsp;&nbsp;&nbsp;Using the Graphics object to display information in your control.<br><br></li>
<li>
<a href="#vjctleliminatingflickerwhilepainting">Eliminating Flicker while Painting</a>&nbsp;&nbsp;&nbsp;Optimizing display.</li>
</ul>

<h3><a name="vjctlcontroldimensions"></a>Control Dimensions</h3>
<p>
There are three main dimensions associated with a control: bounds, client, and display coordinates. The bounds of a control are the outer window coordinates of the control. The bounds are always expressed in parent-client coordinates, that is, with respect to the dimensions of the parent.</p>
<p>
Client coordinates are the dimensions of the area that the control can draw into. The client area of a control is always based at (0, 0) and is sized based on the inner-client owned area of the control. The client coordinates do not encompass non-client areas such as borders applied to the windows (for example, WS_BORDER, WS_EX_CLIENTEDGE) and the title bar for top-level windows.</p>
<p>
The display coordinates are virtual client coordinates that define the area in which child controls appear. Display coordinates can define an area larger than that defined by the client coordinates. A good example of the difference between client coordinates and display coordinates is a form with autoscrolling. When autoscrolling is enabled for a form, the display size of the form can become bigger than the client size, resulting in a virtual form larger than the physical window. When you move the scroll bars on the form, the display coordinates change.</p>
<p class=indent>
<b>Note&nbsp;&nbsp;&nbsp;</b>Because the bounds of controls are always in parent-client coordinates, when a form is scrolled, the child control’s bounds will change to reflect their actual position relative to the client coordinates of the parent.</p>
<p>
In most controls, you only need to work with client coordinates. Display coordinates are important only if you write a control that is going to host other controls (such as a TabControl control), and you want to enable docking or other layout mechanisms.</p>

<h3><a name="vjctllocationsize"></a>Location and Size</h3>
<p>
A control's layout is determined by the combination of values of several properties that the control inherits from the Control class:
<ul type=disc>
<li>
The <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Control_setLocation">
</object><a href=JavaScript:alink_1.Click()>location</a> property contains a Point class that sets the x and y coordinates of the top leftmost corner of the control. <br><br></li>
<li>
The <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Control_setSize">
</object><a href=JavaScript:alink_2.Click()>size</a> property contains a Point class that sets the width and height of the control. <br><br></li>
<li>
The <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Control_setAnchor">
</object><a href=JavaScript:alink_3.Click()>anchor</a> property fixes one or more sides of the control to its container. When the container is resized, the anchored sides of the control are resized as well.<br><br></li>
<li>
The <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Control_setDock">
</object><a href=JavaScript:alink_4.Click()>dock</a> property specifies what edge of the host container a control is docked to.</li>
</ul>
<p>
These properties can be set at run time to change the location and size of the control.</p>
<p>
If the control's location or size changes at run time, the control fires notification events. The layout event is fired when anything changes on a control that would cause it to reapply any layout. Examples include adding child controls, changing the control's boundaries, or performing some other control-specific event such as changing a property value. The resize event is fired only when the bounds of the control changes.</p>
<p>
The default WFC layout logic is processed in Control.onLayout and Form.onLayout. The dock and anchor of a child control are applied in the layout event of the parent. Thus a panel would lay out all children, and the parent of the panel would lay out that panel.</p>

<h3><a name="vjctlupdatingvisualdisplay"></a>Updating Visual Display</h3>
<p>
Any visual control must provide a representation of itself. Unless your control is subclassing another control, you must add custom paint logic to your control by overriding the <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Control_onPaint">
</object><a href=JavaScript:alink_5.Click()>onPaint</a> method. Call the superclass' onPaint method to display the control, and then add your own logic to customize the display.</p>
<p>
The onPaint event receives a <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.PaintEvent">
</object><a href=JavaScript:alink_6.Click()>PaintEvent</a> object that you can use to get an instance of a <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Graphics">
</object><a href=JavaScript:alink_7.Click()>Graphics</a> object. You then call methods of the Graphics object to update the control's display. The following shows a simple example of how to display text in a control by updating the text property:</p>
<pre><code>protected void onPaint(PaintEvent p) {
   super.onPaint(p);
   Graphics g = p.graphics;
   g.drawString(getText(), 0, 0);
}
</code></pre>
<p>
The Graphics object in WFC is very rich and full featured. You can draw almost any primitive structure including arcs, ellipses, rectangles, polygons, lines, and points. The following table lists commonly-used properties and methods of the Graphics object.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Graphics object member</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_8 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Graphics_setPen">
</object><a href=JavaScript:alink_8.Click()>setPen</a> method</td>
<td width=50%>Specifies a Pen object that defines how lines and borders around objects are drawn.</td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_9 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Graphics_setBrush">
</object><a href=JavaScript:alink_9.Click()>setBrush</a> method</td>
<td width=50%>Specifies a Brush object that fills a control (for example, in the clearRect method).</td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_10 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Graphics_setBackColor">
</object><a href=JavaScript:alink_10.Click()>setBackColor</a> method</td>
<td width=50%>Specifies the color displayed behind text.</td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_11 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Graphics_setTextColor">
</object><a href=JavaScript:alink_11.Click()>setTextColor</a> method</td>
<td width=50%>Specifies the foreground color for text.</td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_12 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Graphics_setFont">
</object><a href=JavaScript:alink_12.Click()>setFont</a> method</td>
<td width=50%>Specifies the font with which the text will be drawn.</td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_13 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Graphics_drawArc">
</object><a href=JavaScript:alink_13.Click()>drawArc</a> method</td>
<td width=50%>Draws an elliptical arc.</td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_14 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Graphics_drawImage">
</object><a href=JavaScript:alink_14.Click()>drawImage</a> method</td>
<td width=50%>Draws an image.</td>
</tr>
<tr valign=top>
<td width=50%><object id=alink_15 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Graphics_drawString">
</object><a href=JavaScript:alink_15.Click()>drawString</a> method</td>
<td width=50%>Displays a string; includes support for word wrapping, alignment, clipping, and so forth.</td>
</tr>
</table><br>
<p>
Painting in WFC uses the standard Win32 model in which a region of the control is invalidated. This effectively requests a repaint, but does not immediately perform the paint procedure. At the next free cycle, the paint event is sent asynchronously to the control. When the event reaches the control, the control first calls eraseBackground to clear the area that is about to be painted. The paint event then occurs, clipped to the invalid region.</p>
<p>
Paint events coalesce, so the control will receive only one paint event for multiple invalidated regions of the control. The coalesced paint event that the control receives is clipped to the union of all the invalid regions.</p>
<p>
The following example illustrates how you can call the invalidate method to request that the control repaint itself. In this instance, the invalidate method is called without a Rectangle object parameter to indicate the clipped region, so the entire control will be repainted:</p>
<pre><code>public void setAlignment(int value) {
 &nbsp;&nbsp; if (!AlignStyle.valid(value))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new WFCInvalidEnumException("value", value,
          AlignStyle.class);
 &nbsp;&nbsp; align = value;
 &nbsp;&nbsp; invalidate();   // Repaint control when property changes
}
</code></pre>
<p class=indent>
<b>Note&nbsp;&nbsp;&nbsp;</b>If you modify multiple properties (or the same property twice), the control will not perform the entire paint operation twice.</p>
<p>
To force a paint to occur synchronously, you can call the control's update method, which forces the control to perform any pending paint events immediately.</p>

<h3><a name="vjctleliminatingflickerwhilepainting"></a>Eliminating Flicker while Painting</h3>
<p>
To eliminate flicker in your control, you should consider overriding the onEraseBackground event. The default implementation of this event clears the background of the control with the current value of the backColor property. However, it is not always necessary to repaint the entire area of the control, and doing so unnecessarily can cause flickering. This is primarily the case with controls that have a large area or complex paint logic.</p>
<p>
In the example above, the drawString method is used to place text in the control. If the background is not cleared by the eraseBackground method, it would look as if it had never been painted, producing a "transparent" look.</p>
<p class=indent>
<b>Note&nbsp;&nbsp;&nbsp;</b>The control is not actually transparent. However, because the old contents of that screen area are not repainted, they are still visible.</p>
<p>
To create a control that looks solid with no flicker, avoid painting the background for areas that will be repainted again with foreground information. The easiest way to do this is to ensure that the <object id=alink_16 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Control_onPaint">
</object><a href=JavaScript:alink_16.Click()>onPaint</a> method accounts for the entire clientRect area. You can then skip background drawing completely by overriding the onEraseBackground event specifying that the event has been handled, as in the following example:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;protected void onEraseBackground(EraseBackgroundEvent event) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event.handled = true;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; 
 &nbsp;&nbsp; protected void onPaint(PaintEvent p) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Graphics g = p.graphics;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.clearRect(getClientRect());
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(getText(), 0, 0);
 &nbsp;&nbsp; }
</code></pre>
<p>
This is a small example with simple code in the onPaint method. You might therefore not see much benefit from overriding the onEraseBackground event in this case. However, in your own control where the paint code might be more complex, using the illustrated technique greatly reduces flicker.</p>
<p>
Another technique to increase the visual stability of a control is to double-buffer your on-screen image. In this technique, you maintain a bitmap of the entire client area, and then create a Graphics object based on that image. Performance of graphical updates against the buffer is much quicker than normal.</p>
<p>
You should use the double-buffering technique only if you have overridden onEraseBackground and optimized your paint code already and are still experiencing flicker. Double-buffering is a resource-intensive operation, because you are maintaining an extra copy of the control's image. For large images, this can require substantial memory (the exact amount depends on the size of the image and its color depth). Maintaining the buffer can also slow performance if the buffer stores a large area.</p>
<p>
To use a double buffer in your control, do the following:
<ul type=disc>
<li>
Specify that you are handling the onEraseBackground event.<br><br></li>
<li>
Override the onResize method to create a new buffer matching the new client area. It is also a good idea to dispose of the old buffer to free up resources. You should also call the invalidate method; by default, Windows will invalidate only the regions directly affected by the resize.<br><br></li>
<li>
In the paint code, create a Graphics object from the buffer, and perform all your draw operations on that object. You must explicitly set the backColor and pen properties for the Graphics object based on those defined for the buffer.</li>
</ul>
<p>
The following example draws a simple star pattern inside the client area of the control. If you did not include a double buffer, the control would flicker noticeably:</p>
<pre><code>// Star.java
import com.ms.wfc.ui.*;
import com.ms.wfc.core.*;

public class Star extends Control 
{
 &nbsp;&nbsp; // Create buffer
 &nbsp;&nbsp; Bitmap buffer = null;
 &nbsp;&nbsp; // Override onResize in order to recreate buffer at new size
 &nbsp;&nbsp; protected void onResize(Event e) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (buffer != null) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; buffer.dispose();   // Frees resources
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; buffer = null;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point s = getClientSize();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; buffer = new Bitmap(s.x, s.y);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; invalidate();   // Forces Windows to redraw entire control
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.onResize(e);
 &nbsp;&nbsp; }
 &nbsp;&nbsp; 
 &nbsp;&nbsp; protected void onEraseBackground(EraseBackgroundEvent event) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event.handled = true;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; 
 &nbsp;&nbsp; protected void onPaint(PaintEvent pe) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Graphics g = buffer.getGraphics();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rectangle client = getClientRect();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Explicitly set backColor and pen based on buffer's values
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setBackColor(getBackColor());
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setPen(new Pen(getForeColor()));
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.clearRect(client);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int x = 0;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int y = 0;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int xCenter = client.width/2;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int yCenter = client.height/2;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Draws a star
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (; x&lt;client.width; x+=4) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(x, y, xCenter, yCenter);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (; y&lt;client.height; y+=4) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(x, y, xCenter, yCenter);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (; x&gt;=0; x-=4) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(x, y, xCenter, yCenter);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (; y&gt;=0; y-=4) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(x, y, xCenter, yCenter);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.dispose();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pe.graphics.drawImage(buffer, 0, 0);
 &nbsp;&nbsp; }
 &nbsp;&nbsp; 
 &nbsp;&nbsp; public static class ClassInfo extends Control.ClassInfo {
 &nbsp;&nbsp; }
}
</code></pre>
</BODY>
</HTML>

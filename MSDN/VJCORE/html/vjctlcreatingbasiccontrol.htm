<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Basic Control</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjctlcreatingbasiccontrol"></a>Creating a Basic Control</h1>
<p>
This section provides an overview of creating a control by walking you through the process. Here you will learn how to define a basic control and provide functionality for its base events.</p>
<p>
For more information, see:
<ul type=disc>
<li>
<a href="#vjctldefiningcontrol">Defining a Control</a><br><br></li>
<li>
<a href="#vjctladdingcontroldescription">Adding a Control Description</a><br><br></li>
<li>
<a href="#vjctlprovidingfunctionalityforclassevents">Providing Functionality for Class Events</a><br><br></li>
<li>
<a href="vjctlworkingwithwindowhandles.htm">Working with Window Handles</a><br><br></li>
<li>
<a href="vjctlthreadinginwfccontrols.htm">Threading in WFC Controls</a></li>
</ul>

<h2><a name="vjctldefiningcontrol"></a>Defining a Control</h2>
<p>
A custom control subclasses the WFC Control class. To make your control visible in the Toolbox inside Visual J++, you also need to extend the com.ms.wfc.ui.Control.ClassInfo class. The <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ClassInfo">
</object><a href=JavaScript:alink_1.Click()>ClassInfo</a> class contains metadata used to provide design-time information about a class and to browser component properties and events at run time. If you do not require that your control be visible in the Toolbox, you do not need to extend com.ms.wfc.ui.Control.ClassInfo. However, you must still subclass Component.ClassInfo, which implements com.ms.wfc.core.IClassInfo. This inner class must be named ClassInfo.</p>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;The <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowModifyingWFCComponentsWithComponentBuilder">
</object><a href=JavaScript:alink_2.Click()>WFC Component Builder</a> creates a skeleton control, including properties and methods, which you can fill in. The information in this section includes details about how a control is built to help you build a control manually and to explain what the builder does.</p>
<p>
The following shows a skeleton control. If you compile it, the control is registered on your computer and becomes available in the Customize Toolbox dialog box:</p>
<pre><code>// MyControl.java
import com.ms.wfc.ui.*;
import com.ms.wfc.core.*;

<span class=cfe><b>public class MyControl extends Control {</b></span>
<span class=cfe><b> &nbsp;&nbsp; public static class ClassInfo extends Control.ClassInfo {</b></span>
<span class=cfe><b> &nbsp;&nbsp; }</b></span>
}
</code></pre>
<p>
If you add an instance of this control to a form, you will see its properties and events in the Properties window. You can change these properties, and you can also see that the control already supports backColor, foreColor, anchor, dock, mouse events, focus, and more. The com.ms.wfc.ui.Control class defines the default implementation of these common properties and events.</p>

<h2><a name="vjctladdingcontroldescription"></a>Adding a Control Description</h2>
<p>
You can include a text description for controls exposed as ActiveX controls. Host applications can then query and display the description. To create a description, add a DescriptionAttribute object in the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.ClassInfo">
</object><a href=JavaScript:alink_3.Click()>ClassInfo</a> class. The following example shows how you can add a text description:</p>
<pre><code>public static class ClassInfo extends Control.ClassInfo
{
   public void getAttributes(IAttributes attribs){
   super.getAttributes(attribs);
   attribs.add(new DescriptionAttribute("This describes MyControl"));
}
</code></pre>

<h2><a name="vjctlprovidingfunctionalityforclassevents"></a>Providing Functionality for Class Events</h2>
<p>
The com.ms.wfc.ui.Control class exposes a common set of members with default functionality. For example, if you create a basic control as described earlier, a text property is available for it in the Properties window.</p>
<p>
Typically, to add functionality to your control, you must override the members for that control exposed by the base class. Most events in WFC are exposed in their base class with a protected on&lt;<i>eventname</i>&gt; member, which lets subclasses override the event without having to attach event handlers. In your override code, you define the functionality you want for that event. Generally, you implement the default functionality of the member by calling the superclass' event. By placing the call to the superclass' event, you can specify the order in which the event is triggered.</p>
<p class=indent>
<b>Note&nbsp;&nbsp;&nbsp;</b>There are additional methods for receiving events when you are not subclassing an event defined in the superclass. For more details, see <a href="vjhowworkingwithcontrolevents.htm">Working with Control Events</a>.</p>
<p>
The following example illustrates how you can override the protected <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Control_onPaint">
</object><a href=JavaScript:alink_4.Click()>onPaint</a> method to define what the control should display at run time. In the example, the superclass' event is called first to perform the superclass' own paint method. The control's own code displays the value of its text property by calling the <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Graphics_drawString">
</object><a href=JavaScript:alink_5.Click()>drawString</a> method of a <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.Graphics">
</object><a href=JavaScript:alink_6.Click()>Graphics</a> object:</p>
<pre><code>// MyControl.java
import com.ms.wfc.ui.*;
import com.ms.wfc.core.*;

public class MyControl extends Control {
<span class=cfe><b> &nbsp;&nbsp; protected void onPaint(PaintEvent p) {</b></span>
<span class=cfe><b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.onPaint(p);</b></span>
<span class=cfe><b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Graphics g = p.graphics;</b></span>
<span class=cfe><b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(getText(), 0, 0);</b></span>
<span class=cfe><b> &nbsp;&nbsp; }</b></span>

 &nbsp;&nbsp; public static class ClassInfo extends Control.ClassInfo {
 &nbsp;&nbsp; }
}
</code></pre>
<p>
In this example, you display text by calling the control's getText method to retrieve the text stored in the control. When you compile and add your new version of the class, the control now contains whatever text you typed into the text property. Because com.ms.wfc.ui.Control provides a text property, there isn’t really a need to create a new one. </p>
<p>
The parameter for onPaint is a <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.ui.PaintEvent">
</object><a href=JavaScript:alink_7.Click()>PaintEvent</a>, which contains event-specific data. When you are subclassing a protected member, the object sending the event is implicitly known because the sender is <i>this</i> (the current instance of the class). The event data varies from event to event. In this case, the PaintEvent looks like this:</p>
<pre><code>public class PaintEvent extends Event {
 &nbsp;&nbsp;&nbsp; // Graphics object with which painting should be done.
 &nbsp;&nbsp; public final Graphics graphics;
 &nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp; // Rectangle into which all painting should be done.
 &nbsp;&nbsp; public final Rectangle clipRect;
}
</code></pre>
<p>
The graphics member of the PaintEvent refers to a com.ms.wfc.ui.Graphics object. This is the WFC wrapper for a drawing surface, a Win32 device context. The Graphics object exposes methods to draw strings, lines, points, ellipses, and so forth. You can change the values of the font, foreColor, and backColor properties, and these will display correctly, because the Graphics object that is passed in through the PaintEvent event is set up with the correct fonts and brushes based on the settings in the control. For more details about painting, see <a href="vjctldeterminingcontrolsdisplay.htm#vjctlupdatingvisualdisplay">Updating Visual Display</a>.</p>
</BODY>
</HTML>

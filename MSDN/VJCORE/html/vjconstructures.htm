<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Structures</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjconstructures"></a>Structures</h1>
<p>
The Java language does not directly support the concept of a structure. Although Java classes containing fields can be used to emulate the concept of a structure within the Java language, ordinary Java objects cannot be used to simulate structures in native DLL calls. This is because the Java language does not guarantee the layout of the fields and because the garbage collector is free to move the object around in memory. </p>
<p>
Therefore, to pass and receive structures from DLL methods, you need to use the @dll.struct compiler directive. When applied to a Java class definition, this directive causes all instances of the class to be allocated in a memory block that will not move during garbage collection. In addition, the layout of the fields in memory can be controlled using the pack modifier (see <a href="vjconstructurepacking.htm">Structure Packing</a>). For example, the Win32 SYSTEMTIME structure has the following definition in the C programming language:</p>
<pre><code>typedef struct {
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
} SYSTEMTIME;
</code></pre>
<p>
The correct declaration of this structure in Java is as follows:</p>
<pre><code>/** @dll.struct() */
class SYSTEMTIME {
  public short wYear;
  public short wMonth;
  public short wDayOfWeek;
  public short wDay;
  public short wHour;
  public short wMinute;
  public short wSecond;
  public short wMilliseconds;
} 
</code></pre>
<p>
The following example uses the SYSTEMTIME structure in a DLL method call:</p>
<pre><code>class ShowStruct {
 &nbsp;&nbsp; /** @dll.import("KERNEL32") */
 &nbsp;&nbsp; static native void GetSystemTime(SYSTEMTIME pst);
 &nbsp;&nbsp; public static void main(String args[])
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; SYSTEMTIME systemtime = new SYSTEMTIME();
 &nbsp;&nbsp;&nbsp;&nbsp; GetSystemTime(systemtime);
 &nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Year is " + systemtime.wYear);
 &nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Month is " + systemtime.wMonth);
 &nbsp;&nbsp;&nbsp;&nbsp; // etc.
 &nbsp;&nbsp; }
} 
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Classes declared with @dll.struct are considered unsafe and therefore cannot be used by untrusted applets.</p>
<p>
For more information, see:
<ul type=disc>
<li>
<a href="vjconcorrespondencebetweentypesinsidestructures.htm">Correspondence Between Types Inside Structures</a><br><br></li>
<li>
<a href="vjconnestedstructures.htm">Nested Structures</a><br><br></li>
<li>
<a href="vjconfixed-sizestringsembeddedwithinstructures.htm">Fixed-size Strings Embedded Within Structures</a><br><br></li>
<li>
<a href="vjconfixed-sizescalararraysembeddedwithinstructures.htm">Fixed-size Scalar Arrays Embedded within Structures</a><br><br></li>
<li>
<a href="vjconstructurepacking.htm">Structure Packing</a><br><br></li>
<li>
<a href="vjcontherelationshipbetweendll.structcom.struct.htm">The Relationship Between @dll.struct and @com.struct</a></li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Registering a Control</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjctlregisteringcontrol"></a>Registering a Control</h2>
<p>
Controls must be registered on the computer where they will run. The control must include information that the registration process can read that identifies the control, and that is then placed in the Windows registry of the computer where the control will run. By reading the registration information, applications can find and load the control.</p>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;If you are using the control on the computer where you built the control project, you do not need to register the control; the build process registers the control automatically. If you are using the control in Visual J++, you do not need to explicitly include registration information.</p>
<p>
The host application also requires a type library (.tlb file) for your control, which includes information about the control's members. The application reads the information in the type library to know what properties, events, and methods your control supports. Visual J++ can automatically generate a type library for your control during the build process.</p>
<p>
In this topic you can find information about the following:
<ul type=disc>
<li>
<a href="#vjctlspecifyingregistrationtypelibraryinformation">Specifying Registration and Type Library Information</a>&nbsp;&nbsp;&nbsp;How to include information used to register the control and its type library.<br><br></li>
<li>
<a href="#vjhowcreatingprogid">Creating a ProgID</a>&nbsp;&nbsp;&nbsp;Information about how a progID is created for your control.<br><br></li>
<li>
<a href="#vjctlrunningregistrationprocess">Running the Registration Process</a>&nbsp;&nbsp;&nbsp;Using a Visual J++ utility to register your .class file as a control.</li>
</ul>

<h3><a name="vjctlspecifyingregistrationtypelibraryinformation"></a>Specifying Registration and Type Library Information</h3>
<p>
Registration requires the following information:
<ul type=disc>
<li>
A class ID (clsid), which is a GUID (globally-unique ID) that uniquely identifies your control. You need a class ID for both the control itself and for its type library.<br><br></li>
<li>
A program ID (progID), which is the name used in the host application when creating an instance of the control, such as MyProject.MyControl.</li>
</ul>
<p>
If you have used the WFC Component Builder to create your control, class IDs are generated for you automatically. You can also have Visual J++ create class IDs for you automatically during the build process by specifying that your control is a COM DLL. You can select this option in the COM Classes tab of the project's Properties window. For details about building a DLL, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowBuildingCOMObjects">
</object><a href=JavaScript:alink_1.Click()>Building COM Objects</a>.</p>
<p>
Finally, you can create and include class IDs for your control manually. You might do this if you want to guarantee that the class ID remains the same for your control, or if you have to know the classID for some other purpose and do not want to let Visual J++ generate it for you. You can generate a GUID with a program such as Uuidgen.exe, a utility freely available on the <A HREF="http:/www.microsoft.com/">Microsoft Web site</A>. You must provide two class IDs in all&nbsp;— one for the control and a second one for its type library.</p>
<p>
To make the manual registration information visible to the registration program, you include it in a directive embedded comment in your control's .java file. The format is:</p>
<pre><code>/*
* @com.register ( clsid=<i>guid</i>, typelib=<i>guid</i> )
*/
</code></pre>
<p>
For example, a registration block might look like the following (the example wraps because the class IDs are long, but should not wrap in your file):</p>
<pre><code>/*
* @com.register ( clsid=d0702fa0-fb3b-11d1-8f88-00aa00600a54, typelib=d3108a20-fb3b-11d1-8f88-00aa00600a54 )
*/
</code></pre>
<p>
When you build the project for your control, the build process looks for this block. If it is found, the build process generates a type library for the control. It also then registers the control and the type library on your computer.</p>

<h3><a name="vjhowcreatingprogid"></a>Creating a ProgID</h3>
<p>
The registration process automatically builds a progID for your control using the following format:</p>
<pre><code>ProjectName.ControlName
</code></pre>
<p>
For example, your control project might be MyProject and the control's .java file might be MyControl.java. After registration, the control's progID would be MyProject.MyControl.</p>

<h3><a name="vjctlrunningregistrationprocess"></a>Running the Registration Process</h3>
<p>
If you intend to use the control on the computer where you built it, you do not need to register it&nbsp;— the build process automatically registers it for you. However, if you are distributing the control to another computer, you must register it there.</p>
<p>
If you have built your control as a COM DLL, you can register it as you do any control, using the Windows Regsvr32.exe program. In a Command window use the following syntax:</p>
<pre><code>Regsvr32.exe <i>path/controlName</i>
</code></pre>
<p>
If your control is simply compiled as a .class file, you use a command-line utility called Vjreg.exe that is included with Visual J++. (You cannot use Regsvr32.exe to register your control because that utility is not designed to register .class files.) Register your control in a Command window using the following syntax:</p>
<pre><code>Vjreg <i>path/controlName</i>
</code></pre>
<p>
When you run this command, it registers the Msjaval.dll as the control's server, with the name and path of your control as a parameter.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Specifying Custom Property Attributes</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjctlspecifyingcustompropertyattributes"></a>Specifying Custom Property Attributes</h2>
<p>
When you create a property and create a <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.PropertyInfo">
</object><a href=JavaScript:alink_1.Click()>PropertyInfo</a> object to set its attributes, you can specify a variety of options to customize the property.</p>
<p class=indent>
<b>Note&nbsp;&nbsp;&nbsp;</b>More details about using the PropertyInfo class are provided in <a href="vjhowdefiningcontrolproperties.htm">Defining Control Properties</a>.</p>
<p>
The basic syntax for creating a PropertyInfo object is:</p>
<pre><code>new PropertyInfo(Class <i>owner</i>, String <i>name</i>, Class <i>dataType</i>)
</code></pre>
<p>
For example, the following is a PropertyInfo object for a property called myProp in the MyControl control:</p>
<pre><code>public static final PropertyInfo myProp = 
   new PropertyInfo(MyControl.class, "myProp", int.class);
</code></pre>
<p>
You can customize the property by providing any number of additional member attributes for the PropertyInfo object. A member attribute is defined as any class that derives from com.ms.wfc.core.MemberAttribute. A certain number of attributes are available by default in the PropertyInfo class, or you can create and add your own attributes by deriving them from <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.Attributes">
</object><a href=JavaScript:alink_2.Click()>MemberAttribute</a>. The following table lists pre-defined attributes in the PropertyInfo class.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Attribute</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%>BrowsableAttribute</td>
<td width=50%>Specifies whether the property is visible in the Properties window. The default is YES. This attribute can be used in conjunction with the PersistableAttribute attribute (see below) to define properties whose value should be saved in the control but should not be editable in the Properties window.</td>
</tr>
<tr valign=top>
<td width=50%>CategoryAttribute</td>
<td width=50%>Specifies what category the current property fits into in the Properties window, such as Appearance, Behavior, and so on. The default is Misc. You can either place the property in a predefined category by using one of the static members in CategoryAttribute or create a new category by constructing a new CategoryAttribute and passing in the string name that you want the category to be called.</td>
</tr>
<tr valign=top>
<td width=50%>DataBindableAttribute</td>
<td width=50%>Specifies that the property is a candidate for data binding. The default is .NO. When this is set to .YES, the DataBinder component lists this property in its drop-down list.</td>
</tr>
<tr valign=top>
<td width=50%>DefaultValueAttribute</td>
<td width=50%>The default value for simple properties. This value is used when the user resets the property value in the Properties window. The Forms Designer also compares the default value against the current value. If they match, the Forms Designer does not generate code to set the property value, which reduces the size of code generated for the form.<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;You can also create a default value by creating a reset&lt;<i>property</i>&gt; method. For details, see <a href="vjctlspecifyingpropertypersistencedefaultvalues.htm">Specifying Property Persistence and Default Values</a>.</p>
<p>
The most common values for various data types are predefined as static values (for example, for boolean values, the values TRUE and FALSE are already defined).</p>
</td>
</tr>
<tr valign=top>
<td width=50%>DescriptionAttribute</td>
<td width=50%>Defines text displayed in the bottom of the Properties window when the user selects the current property. The default is "".</td>
</tr>
<tr valign=top>
<td width=50%>LocalizableAttribute</td>
<td width=50%>Specifies that the property value is saved in a resource file if the user chooses to localize a form. The default is NO. The user can then localize the resource file and not have to modify the code.</td>
</tr>
<tr valign=top>
<td width=50%>PersistableAttribute</td>
<td width=50%>Specifies whether the value of the property is saved when its container is saved at design time. The default value is YES. This attribute is primarily useful when you do not want to save a property value, for example, transient property values whose values depend on state or are calculated. Normally, properties with this attribute set to NO are also not browsable (BrowsableAttribute is NO).</td>
</tr>
<tr valign=top>
<td width=50%>ValueEditorAttribute</td>
<td width=50%>Specifies a custom editor used by the Properties window for the current property. If no value editor is specified, the Properties window uses an editor associated with the property's data type. For more details, see <a href="vjctlcreatingcustompropertiesvalueeditor.htm">Creating a Custom Properties Value Editor</a>.</td>
</tr>
</table><br>
<p>
To specify an attribute, you create an instance of the attribute you want or use one of the predefined instances (such as BrowsableAttribute.NO), and then add it to the PropertyInfo definition, using syntax such as:</p>
<pre><code>new PropertyInfo(Class <i>owner</i>, String <i>name</i>, Class <i>dataType</i>, 
   [MemberAttribute, [MemberAttribute, ...]])
</code></pre>
<p>
The following example shows how you can define a description and default value for the myProp property using predefined attributes:</p>
<pre><code>public static final PropertyInfo myProp = 
   new PropertyInfo(MyControl.class, "myProp", int.class, 
   new DescriptionAttribute("Test property"), 
   new DefaultValueAttribute(DefaultValueAttribute.ONE);
</code></pre>
<p>
You can add up to six attributes by simply including them as parameters to the PropertyInfo constructor. If you want to specify more than five member attributes, you can use syntax for the PropertyInfo constructor that accepts an array of member attributes. For details, see <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com.ms.wfc.core.PropertyInfo">
</object><a href=JavaScript:alink_3.Click()>PropertyInfo</a>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Casting to a Reference to an @dll.struct Class</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h3><a name="vjconcastingtoreferencetodll.structclass"></a>Casting to a Reference to an @dll.struct Class</h3>
<p>
One way to read and write data through a raw pointer is to cast the raw pointer to a reference to an @dll.struct class. Once this is done, you can read and write the data using normal field access syntax. For instance, suppose you have a raw pointer that you wish to access as a RECT. You can use the system method DllLib.ptrToStruct as follows:</p>
<pre><code>/** @dll.struct() */
  class RECT {
 &nbsp;&nbsp; int left;
 &nbsp;&nbsp; int top;
 &nbsp;&nbsp; int right;
 &nbsp;&nbsp; int bottom;
  }

  import com.ms.dll.*;

  int&nbsp; rawptr = ...;
  RECT rect = (RECT)DllLib.ptrToStruct(RECT.class, rawptr);
  rect.left = 0;
  rect.top = 0;
  rect.right = 10;
  rect.bottom = 10;
</code></pre>
<p>
The ptrToStruct method wraps the raw pointer in a RECT instance. Unlike instances created by the <b>new</b> operator, this RECT instance will not attempt to free the raw pointer upon reclamation by the garbage collector because the RECT object has no way of knowing how the pointer was allocated. In addition, because the native memory was already constructed at the time ptrToStruct was called, the RECT class constructor is <i>not</i> called.</p>
</BODY>
</HTML>

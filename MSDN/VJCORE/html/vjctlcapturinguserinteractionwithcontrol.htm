<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Capturing User Interaction with a Control</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="vjctlcapturinguserinteractionwithcontrol"></a>Capturing User Interaction with a Control</h2>
<p>
Your control can capture and process standard events before they are sent to the host application. The two most common types of interactions are mouse and keyboard events.</p>
<p>
For more information, see:
<ul type=disc>
<li>
<a href="#vjctlcapturingmouseevents">Capturing Mouse Events</a><br><br></li>
<li>
<a href="#vjctlcapturingkeyboardevents">Capturing Keyboard Events</a></li>
</ul>

<h3><a name="vjctlcapturingmouseevents"></a>Capturing Mouse Events</h3>
<p>
The Control class in WFC provides for most of the mouse events that you need. These include mouseMove, mouseUp, mouseDown, mouseWheel, mouseEnter, and mouseLeave. In addition, you can optionally receive the click and doubleClick events.</p>
<p>
To receive mouse events in your control, you can override the event you want. To pass the mouse event through to the host application, call the superclass' corresponding event method.</p>
<p>
The following example illustrates how you can override the mouseMove event. The handler indirectly displays the location of the mouse, which is available in the x and y properties of the MouseEvent object passed to the handler:</p>
<pre><code>protected void onMouseMove( MouseEvent e){
   String sMsg = "" + e.x + ", " + e.y;
   this.setText(sMsg);
   invalidate();   // Repaint control when property changes
   super.onMouseMove( e );   // to make it visible in the host
}
</code></pre>

<h3><a name="vjctlcapturingkeyboardevents"></a>Capturing Keyboard Events</h3>
<p>
The standard key events exposed are keyUp, keyDown, and keyPress. These events will be triggered for both normal keys and system keys (for example, F1 through F12).</p>
<p>
All keyboard input in WFC is done using Unicode character data. When running under an operating system that doesn’t support Unicode messages (like Windows 95) the WFC framework will automatically perform the needed message filtering to generate Unicode events.</p>
<p>
The following example illustrates how you can capture keyboard events within a control. The overridden onKeyUp method here filters out numeric characters before passing the event to the host application:</p>
<pre><code>protected void onKeyUp( KeyEvent e){
   if(e.keydata &lt; Key.D0 &amp;&amp; e.keyData &gt; Key.D9){
      super.onKeyUp( e );
      invalidate();   // Repaint control when property changes
   }
}
</code></pre>
</BODY>
</HTML>

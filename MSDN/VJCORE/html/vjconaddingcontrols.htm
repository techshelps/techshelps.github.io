<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Controls</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjconaddingcontrols"></a>Adding Controls</h1>
<p>
Controls are added by dragging them from the Toolbox onto the form, sizing them, and setting their properties in the Properties window. You can drag and drop both ActiveX and WFC controls onto your forms in Visual J++. See <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowAddingComponentsToForm">
</object><a href=JavaScript:alink_1.Click()>Adding Controls to a Form</a> to learn about adding controls from the Toolbox to a form.</p>
<p>
WFC controls can be grouped into three categories, although there is no distinction between categories in the way you use them: 
<ul type=disc>
<li>
<b>Intrinsic controls</b>. The basic Windows controls such as buttons, check boxes, edit boxes, list boxes, and so on. <br><br></li>
<li>
<b>Common controls</b>. The Win32 common controls found in comctl32.dll. These include controls such as animations, toolbars, tabs, status bars, and Tree view controls.<br><br></li>
<li>
<b>WFC controls</b>. Custom controls written specifically for the WFC framework.</li>
</ul>
<p>
All existing WFC controls are Java classes found in the com.ms.wfc.ui package.</p>
<p>
If you want, you can create your own controls using the WFC packages, either by extending existing controls or writing your own from scratch, and adding them to the Toolbox. The WFC component model makes it easy to expose information about your control's properties and events, enabling your control to work seamlessly with the Visual J++ Forms Designer. </p>
</BODY>
</HTML>

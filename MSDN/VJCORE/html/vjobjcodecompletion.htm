<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Code Generation</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjobjcodecompletion"></a>Code Generation</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vjhowFindingErrorsWithDynamicSyntaxChecking;vjobjCodeCompletion_C">
</object></p>
<p>
Visual J++ synchronizes visual representation of code changes and form views (code generation from visual layout) in both directions. Information about which methods (and classes) that are being modified is formatted into the source code. Similarly, modifications to the source code are sent to the Forms Designer. </p>
<p>
The two-way editing does not simultaneously modify source code and visual layout. The code that is used to create the visual layout is disabled while the Forms Designer is in use. The layout is stored as code when the Forms Designer window is closed or the form is saved. Editing of the entire initForm function is locked until the Forms Designer window is closed.</p>
<p>
Edits in the Forms editor are not serialized as code until you click Save on the File menu, or when the Forms editor is closed.</p>
<p>
You can use the Forms Designer to edit classes that adhere to the following syntax:</p>
<pre><code>class isEditable extends [UserControl, Form, Design Page] {
   Container components = new Container(this);
   private void initForm() {
      [<i>form initialization code goes here</i>]
} 
}
</code></pre>
<p>
The initialization code must adhere to certain parsing rules:
<ul type=disc>
<li>
Initialization code must reside in the initForm function.<br><br></li>
<li>
No conditional code will be parsed (no <b>if</b>, <b>while</b>, or <b>switch</b> statements).</li>
</ul>
</BODY>
</HTML>

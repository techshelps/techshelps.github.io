<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ITAddress::RegisterCallTypes</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_tapi3_itaddress_registercalltypes"></a>ITAddress::RegisterCallTypes</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
This method is called before an application registers the <b>ITCallNotification</b> outgoing interface. This informs TAPI which calls and call events are relevant to an application. An application can register multiple <b>ITCallNotification</b> interfaces. This method must be called before each registration. </p>
<p>
For example, say that an application wants to own one type of call and monitor another type of call, and to register different outgoing interfaces for the calls. It would call <b>RegisterCallTypes</b>(FALSE, TRUE, FALSE, <i>OwnerTypes</i>), then register the <b>Owner</b> interface, then call <b>RegisterCallTypes</b>(FALSE, FALSE, TRUE, <i>MonitorTypes</i>) then register the <b>Monitor</b> interface.</p>
<p>
An application can also receive all events on a single interface. For example, by calling <b>RegisterCallTypes</b>(TRUE, TRUE, TRUE, <i>MediaTypes</i>), then registering the interface, the application will receive owner, monitor, and outgoing messages.</p>
<p>
The<i> fOutgoing</i> parameter is useful for applications that only make outgoing calls and are not interested in other calls besides their own. By calling <b>RegisterCallTypes</b>(TRUE, FALSE, FALSE, NULL), then registering the interface, the application will only receive event notifications about their own calls.</p>
<pre><code><b>HRESULT RegisterCallTypes(
</b>  <b>VARIANT_BOOL </b><i>fOutgoing</i><b>,</b>
  <b>VARIANT_BOOL </b><i>fOwner</i><b>,</b>
  <b>VARIANT_BOOL </b><i>fMonitor</i><b>,</b>
  <b>VARIANT</b> <i>MediaTypes</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>fOutgoing</i></dt>
<dd>
[in] Boolean indicating if the application wants events associated with outgoing calls the application has created.</dd>
<dt>
<i>fOwner</i></dt>
<dd>
[in] Boolean indicating whether the application wants to own incoming calls.</dd>
<dt>
<i>fMonitor</i></dt>
<dd>
[in] Boolean indicating whether the application wants to monitor calls.</dd>
<dt>
<i>MediaTypes</i></dt>
<dd>
[in] Array of <i>MediaTypes</i> (in a VARIANT) that indicates types of call the application must monitor. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
TBD</p>
<p>&nbsp;</p></body>
</HTML>

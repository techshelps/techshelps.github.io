<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Terminal Object</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_tapi3_terminal_object"></a>Terminal Object</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
A terminal object represents the sink or renderer at the termination or origination point of a connection. The terminal object can map to hardware used for human interaction, such as a telephone or microphone, but can also be a file or any other device capable of receiving input or creating output. </p>
<p>
A terminal object allows the user to select the devices used and perhaps to provide a common way to control them (such as audio or video controls). If the application does not want TAPI 3.0 to set up the terminal (or sink), it has the option of not specifying a terminal. This is only applicable if one or more media streams used during the call are set up with DirectShow. In that case, the application is responsible for handling any terminal issues.</p>
<p>
Each terminal belongs to a terminal class. A terminal class represents a specific type of terminal, such as a handset or soundcard. TAPI 3.0 defines certain terminal classes, and new terminal classes can be registered. Defined terminal classes include handset, headset, soundcard, monitor, camera, and file. See <a href="callref_9jqr.htm">Terminal Classes</a> for current definitions. Each terminal class is assigned a globally unique identifier (GUID).</p>
<p>
Terminal classes can be either STATIC or DYNAMIC. A STATIC terminal usually corresponds to hardware – a single device that already exists, and cannot be created "on the fly". A DYNAMIC terminal represents a terminal that can be created, such as a file or a network connection. </p>
<p>
Terminals support DirectShow by default. The <a href="callref_5fvw.htm"><b>IsStandardTerminal</b></a> method of the <a href="callref_2n1o.htm"><b>ITTerminal</b></a> interface can be used to determine if the terminal supports DirectShow. A non-standard terminal with no DirectShow support cannot manipulate the media stream from TAPI 3.0.</p>
<p>
TAPI 3.0 defines a base audio terminal interface and a base video terminal interface. These interfaces have core methods, such as <a href="callref_84dh.htm"><b>put_Volume</b></a>, to control the terminal. Applications using DirectShow may control the terminal directly through the DirectShow interfaces.</p>
<p>
If the application does not select a default terminal device for each media type it supports, TAPI 3.0 can select one.</p>
<p>&nbsp;</p></body>
</HTML>

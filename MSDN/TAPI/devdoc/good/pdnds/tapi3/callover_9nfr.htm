<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DirectShow Media Handling</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_tapi3_directshow_media_handling"></a>DirectShow Media Handling</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
One of the main goals for TAPI version 3.0 is to provide a uniform way to access the media streams or data of a call. In this context, "stream" does not refer to the traditional use as in "streaming" but simply to the data or media. TAPI 3.0 has been designed to support DirectShow™ as the primary processor for media. Additionally, there is support for accessing raw data. </p>
<p>
TAPI 3.0 provides very high-level abstraction of media streams (see <a href="callref_4v39.htm">Media Type</a> for definitions). Additional media types can be registered so that providers can expose their own data types.</p>
<p>
A TAPI 3.0 application typically specifies a terminal to use with a media type. The combination of a terminal and a media type forms a <a href="callref_163w.htm"><b>ITMediaTerminal</b></a> object. When a call is made, the application specifies an array of <b>ITMediaTerminals</b> used when creating and connecting the call. This allows an application to be very specific about call set-up. For example, the audio portion of the call can be rendered through the soundcard and recorded to a file.</p>
<p>
Any DirectShow renderer can be a TAPI 3.0 terminal. If a DirectShow filter exists that can handle the input, a TAPI application can direct the media flow to it. The terminal can be a soundcard, a video display, a file, or a device yet to be invented.</p>
<p>
An application can also specify NULL for the <b>ppTerminal</b> member of the <b>ITMediaTerminal object</b>. This is only valid for a DirectShow MEDIATYPE, and indicates that the application can handle the DirectShow filter graph after the call is set up. TAPI 3.0 then sets up the smallest possible DirectShow filtergraph for the specified MediaType. TAPI assumes the application takes responsibility after the call is connected.</p>
<p>
On return of the call, the application may choose to access the DirectShow filter graph that may have been set up for the call. The actual instantiation of the filters is handled by the media service provider which is called implicitly by <a href="callref_8mr8.htm"><b>Connect</b></a>. The application can modify the filter graph but the graph might not be ready to play until the call is in a connected state. </p>
<p>
The handling of generic data streaming will be defined in an upcoming version of TAPI. </p>
<p>
DirectShow filters developed for use with TAPI 3.0 are covered in <a href="ds_over_3y98.htm">About DirectShow Real-Time Transport Protocol</a>. The filters include methods for specifying Quality of Service (QOS).</p>
<p>&nbsp;</p></body>
</HTML>

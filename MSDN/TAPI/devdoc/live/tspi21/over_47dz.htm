<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Media Monitoring</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h4><a name="_tspi_media_monitoring"></a>Media Monitoring</h4>
<p>
When a call is in the <i>connected</i> state, information can be transported over the call. A call's <i>media mode</i> provides an indication of the type of information (for example, the datatype or higher-level protocol) of this media stream. TSPI allows tapi32.dll to be provided with a callback notification about changes in a call's media mode. The notification provides an indication of the call's new media mode. The service provider decides how it wants to make this determination. </p>
<p>
For example, the provider could use signal processing of the media stream to determine media mode, or it could rely on distinctive ringing patterns assigned to different media streams, or on information elements passed in an out-of-band signaling protocol. Independent of how the media mode is determined, tapi32.dll is simply informed about media mode changes on a call.</p>
<p>
The media modes defined by Win32 Telephony include:
<ul>
<li>
<b>Unknown</b> The media mode of the call is not currently known; the call is unclassified.</li>
<li>
<b>Interactive</b> <b>voice</b> Voice energy was detected on the call, and the call is handled as an interactive voice call with a person at the application's end.</li>
<li>
<b>Automated voice </b>Voice energy was detected on the call, and the call is handled as a voice call but with no person at the application's end, such as with an answering-machine application. When the service provider cannot distinguish between interactive and automated voice on an incoming call, it should treat or report the call as interactive voice.</li>
<li>
<b>Data modem</b> A modem session on the call. Current modem protocols require the called station to initiate the handshake. For an inbound data modem call, the application can typically make no positive detection. The service provider chooses how to make this determination. For example, a period of silence just after answering an inbound call may be used as a heuristic to decide that this might be a data modem call.</li>
<li>
<b>G3</b> <b>fax</b> A group 3 fax session on the call.</li>
<li>
<b>TDD</b> The call's media stream uses the Telephony Devices for the Deaf (TDD) protocol.</li>
<li>
<b>G4</b> <b>fax</b> A group 4 fax session on the call.</li>
<li>
<b>Digital data </b>A digital data stream of unspecified format.</li>
<li>
<b>Teletex, Videotex, Telex, Mixed</b> These correspond to the telematic services of the same names.</li>
<li>
<b>ADSI</b> An Analog Display Services Interface session on the call. ADSI enhances voice calls with alphanumeric information downloaded to the phone and the use of soft buttons on the phone.</li>
</ul>
<p>
Media monitoring can be enabled and disabled on a specified call with <a href="func2_0bhd.htm"><b>TSPI_lineMonitorMedia</b></a>. The tapi32.dll specifies which media modes it is interested in monitoring. If enabled, the detection of a media mode causes tapi32.dll to be notified in the <a href="messgs_1nkx.htm">LINE_MONITORMEDIA</a> callback message, which notifies tapi32.dll about a media mode change. The callback provides the call handle on which the media mode change was detected as well as the new media mode.</p>
<p>
There is a distinction between the media mode of a call as reported by <a href="func1_1shb.htm"><b>TSPI_lineGetCallInfo</b></a> and the media mode event reports in LINE_MONITORMEDIA messages. A call's media mode is determined exclusively by tapi32.dll and is not automatically changed by media monitoring events.</p>
<p>
Default media mode monitoring for calls is performed for the media modes for which the line device has been set. This allows an inbound call's media mode to be determined early based on what is needed by tapi32.dll.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The scope of a call's media monitoring of a call is bound by the lifetime of the call. Media monitoring on a call ends as soon the call <i>disconnects</i> or goes <i>idle</i>.</p>
<p>
The tapi32.dll can obtain device identifiers for various Win32 device classes associated with an opened line by invoking <a href="func2_23vo.htm"><b>TSPI_lineGetID</b></a>. This function takes a line handle, address, or call handle and a device class description. It returns the device identifier for the device of the given device class that is associated with the open line device, address, or call. If the device class is tapi/line, the device identifier of the line device is returned. If the device class is mci wave, the device identifier of an mci waveaudio device (if supported) is returned that allows the manipulation such as recording or playback of audio over the call on the line.</p>
<p>
The tapi32.dll can use the returned device identifier with the corresponding media API to query the device's capabilities and subsequently open the media device. For example, if the tapi32.dll client application needs to use the line as a waveform device, it first needs to call <b>waveInGetDevCaps</b> and/or <b>waveOutGetDevCaps</b> to determine the waveform capabilities of the device. The typical waveform data format supported by telephony in North America is 8-bit m-law at 8,000 samples per second, although the wave device driver can convert this sample rate and companding to other more common multimedia audio formats.</p>
<p>
To subsequently open a line or address for audio playback using the waveform API, an application calls the <b>waveOutOpen</b> function. The implementation of the <b>waveOutOpen</b> call is device-specific, and each implementation has a number of options for implementing this function. If the call is not answered at the time the function is invoked, for example, the <b>waveOutOpen</b> driver may return an error code message to the application allowing it to display a dialog box stating that "the phone is ringing." This is similar to requesting a CD to play back audio when no compact disc is in the player, and the existing definition of the waveform APIs should handle the situation.</p>
<p>&nbsp;</p></body>
</HTML>

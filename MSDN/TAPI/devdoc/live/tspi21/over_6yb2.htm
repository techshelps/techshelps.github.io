<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Call Notification</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h4><a name="_tspi_call_notification"></a>Call Notification</h4>
<p>
After tapi32.dll opens a line device and calls <a href="func2_2z3i.htm"><b>TSPI_lineSetDefaultMediaDetection</b></a> to specify the desired media modes for inbound calls, it can be notified when a call arrives. The service provider informs tapi32.dll of a new incoming call in the <a href="messgs_8bn0.htm">LINE_NEWCALL</a> callback message. This message passes the service provider's handle for the call to tapi32.dll. The tapi32.dll returns its handle for the call. The service provider follows this with a <a href="messgs_7gth.htm">LINE_CALLSTATE</a> callback message. For an unanswered inbound call, the call state is <i>offering</i>. tapi32.dll can then invoke <a href="func1_1shb.htm"><b>TSPI_lineGetCallInfo</b></a> to find out information about the call. The fact that a call is offered may not necessarily imply that the user is being alerted. A separate <a href="messgs_58px.htm">LINE_LINEDEVSTATE</a> callback is made with a <i>ringing</i> indication to provide this information to tapi32.dll.</p>
<p>
<a href="messgs_8bn0.htm">LINE_NEWCALL</a> can fail due to finite-resource limitations. The tapi32.dll may run out of resources to handle a new call under very high traffic conditions. In such a case, tapi32.dll returns NULL instead of a valid call handle, indicating that the newly offered call handle was not successfully received. The service provider can respond by dropping the call or by retrying the LINE_NEWCALL after a scheduling delay. In any case, the service provider must check for this NULL return and must never attempt to pass subsequent messages using the invalid call handle.</p>
<p>
The LINE_NEWCALL message and subsequent <a href="messgs_7gth.htm">LINE_CALLSTATE</a> message also notifies tapi32.dll about the existence and state of outbound calls established as a side effect of other calls (for example, when an active call is put on hold and replaced by a new call in dial tone state) or manually by the user (for example, on an attached phone device). The call state of such calls reflects the actual state of the call, which will not be offering. By examining the call state, tapi32.dll can determine whether the call is an inbound call that needs to be answered.</p>
<p>
Call information includes (among other things):
<ul>
<li>
<b>Bearer mode, rate</b> This is the bearer mode (voice, data) and data rate (in bps) of the call.</li>
<li>
<b>Media mode</b> The current media mode of the call. <i>Unknown</i> if this information is unknown.</li>
<li>
<b>Call origin</b> Indicates whether the call originated from an internal caller, an external caller, or unknown.</li>
<li>
<b>Reason for the call</b> Describes why the call is occurring. Possible reasons are: direct call, transferred from another number, busy-forwarded from another number, unconditionally forwarded from another number, the call was picked up from another number, a call completion request, or a callback reminder. The reason for the call is given as <i>Unknown</i> if this information is not known.</li>
<li>
<b>Caller-ID</b> Identifies the originating party of the call. This can be in a variety of (name or number) formats, determined by what the switch or network provides.</li>
<li>
<b>Called-ID</b> Identifies the party originally dialed by the caller.</li>
<li>
<b>Connected-ID</b> Identifies the party that is actually connected to. This can be different from the called party if the call was diverted.</li>
<li>
<b>Redirection-ID</b> Identifies to the caller the number to which the call is now diverted (redirected).</li>
<li>
<b>Redirecting-ID</b> Identifies to the caller the original destination from which the call was diverted (redirected).</li>
<li>
<b>User-user information</b> User-user information sent by the remote station (ISDN).</li>
</ul>
<p>
Depending on the telephony environment, not all information about a call may be available at the time the call is initially offered. For example, if caller identifier is provided by the network between the first and second ring, the caller identifier is still unknown when the call is first offered. When it becomes known shortly thereafter, a <a href="messgs_0fvz.htm">LINE_CALLINFO</a> callback message notifies tapi32.dll about the change in party-identifier information of the call.</p>
<p>
If a new call arrives while another call already exists on the line or address, similar notification and call information is supplied following the same mechanism as for any incoming call. If an application does not want any interference for a call from the switch or phone network, it should secure the call. Securing a call can be done at the time the call is made using a parameter of <a href="func2_0r8s.htm"><b>TSPI_lineMakeCall</b></a>, or later, with the function <a href="func2_82r0.htm"><b>TSPI_lineSecureCall</b></a>, when the call already exists. The call is secured from interference by other events until it is disconnected. Securing a call may be useful, for example, when it is feared that certain network tones (such as call waiting) could disrupt a call's media stream, such as fax.</p>
<p>
After tapi32.dll is offered a call, it can answer the call using <a href="func1_2rw2.htm"><b>TSPI_lineAnswer</b></a>. After a call is answered, its state typically transitions to <i>connected</i> and information can be exchanged over it.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Address-Related Functions and Messages</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_tspi_address_related_functions_and_messages"></a>Address-Related Functions and Messages</h3>
<p>
As is the case with line devices, the addresses assigned to a line device can have different capabilities. Switching features and capabilities (including authorization) can be different for different addresses. When an application calls <b>lineGetAddressCaps</b>, tapi32.dll calls <a href="func1_16k3.htm"><b>TSPI_lineGetAddressCaps</b></a> to determine the telephony capabilities of each address. The service provider must return the telephony capabilities of an address as a data structure of type <a href="struc1_54du.htm"><b>LINEADDRESSCAPS</b></a>. In a similar way, the service provider implements <a href="func2_5lo3.htm"><b>TSPI_lineGetDevCaps</b></a> to provide an application with the number of addresses assigned to the line, as well as other information.</p>
<p>
The TSPI device query capability, and status and event reporting mechanisms provide tapi32.dll with the information required to manage the different bridged address arrangements. For example, tapi32.dll can determine if a call has been answered by a bridged station by tracking the status changes and call state event changes on the address (see <a href="over_6uib.htm">Call States and Events</a>).</p>
<p>
An address on a line device is normally identified through its address identifier. When making calls, TSPI allows alternate address selections for the originating address, such as its address in dialable format or even service provider-specific naming mechanisms (for example, by using TSPI extensions based on switch-assigned station identifiers). The <a href="func1_182s.htm"><b>TSPI_lineGetAddressID</b></a> function maps the alternate address format back to the address identifier used by other functions in TSPI.</p>
<p>
The tapi32.dll is notified about changes in the status of an address in the <a href="messgs_53s5.htm">LINE_ADDRESSSTATE</a> callback message. tapi32.dll can control the address status items for which it wants to be notified with the <a href="func2_9fhv.htm"><b>TSPI_lineSetStatusMessages</b></a> function. It can determine the complete status of an address device by calling <a href="func1_4m5v.htm"><b>TSPI_lineGetAddressStatus</b></a>.</p>
<p>&nbsp;</p></body>
</HTML>

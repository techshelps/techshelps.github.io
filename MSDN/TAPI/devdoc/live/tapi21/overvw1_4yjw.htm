<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deallocating a Call</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_deallocating_a_call"></a>Deallocating a Call</h2>
<p>
If an application is finished with a call and another application wants the call, the call can be handed off. But if no other applications want to take ownership, there is nothing to do but deallocate the call's handle. This is done with <a href="func1_6q5o.htm"><b>lineDeallocateCall</b></a>. A call handle is no longer valid after it has been deallocated. </p>
<p>
In contrast, dropping (disconnecting) a call puts the call in the <i>idle</i> state, which means that the local end of the connection is on hook. If the other end of the connection drops the call, the call transitions to the <i>disconnected</i> state, not the <i>idle</i> state. Typically, once an application receives a call-state message indicating the <i>disconnected</i> state, it immediately drops the call, causing it to become <i>idle</i>. Although the call is in the <i>idle</i> state, any handles to it held by applications remain valid until they are deallocated. If the call was never answered (the local end never went off hook), it may revert to the <i>idle</i> state without being dropped. </p>
<p>
An application cannot deallocate a call if it is the sole owner and the call's state is not <i>idle</i>. This is because TAPI tries to ensure that there is always at least one owner for every active call. If the application is the sole owner and the call is not <i>idle</i>, the error message LINEERR_INVALCALLSTATE is returned. If an application needs to circumvent this restriction, it can do so by dropping the call first (with <a href="func1_0zhs.htm"><b>lineDrop</b></a>) and then deallocating its handle. This prevents an application from deallocating its handle which would result in a call disconnect. By making the application do an explicit drop, it can inform the user (in a dialog box) that the call is about to be disconnected. </p>
<p>
If releasing the ownership handle results in the call's having no more handles, TAPI calls the service provider function <b>TSPI_lineCloseCall</b>. When this function is invoked on a call that is not yet idle, it is up to the service provider to drop the call. </p>
<p>
<b>Note</b>&nbsp;&nbsp;An application that has monitor privileges for a call can always deallocate its handle for the call. Deallocating a call does not affect the call state of the physical call, but it does release the internal resources (memory) related to the call. </p>
<p>
An application should deallocate the handle to a call it owns in these two cases: 
<ul>
<li>
<b>Idle call state</b> If an application receives a <a href="msgs_1eud.htm">LINE_CALLSTATE</a> message indicating that the call has transitioned to the <i>idle</i> state, and has already gathered all the information it needs about the call, it should deallocate the call handle immediately. </li>
<li>
<b>Handoff</b> The application has handed off the call (or has otherwise relinquished call ownership to another application) or has set its call privilege to monitor, and has no interest in monitoring or logging the call. </li>
</ul>
<p>
Failure to deallocate call handles in a timely way can result in system failure and lost calls due to unnecessary consumption of memory and other resources. </p>
<p>&nbsp;</p></body>
</HTML>

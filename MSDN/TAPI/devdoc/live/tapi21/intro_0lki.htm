<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Features in TAPI Version 2.0 and Later</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_features_in_tapi_version_2.0_and_later"></a>Features in TAPI Version 2.0 and Later</h1>
<p>
TAPI version 2.0 and later contain these features: 
<ul>
<li>
<b>Native 32-bit support</b>. All core TAPI components are Win32, with full support for non-Intel processors (running Windows NT and Windows 95), symmetrical multiprocessing, multithreaded applications, and preemptive multitasking. <br>
To provide the best performance and support on the Windows NT and the Windows 95 platforms, the Win32 Telephony API and its service providers and supporting components are fully implemented as 32-bit components in Win32.</li>
<li>
<b>32-bit application portability</b>. Existing Win32 full TAPI and assisted TAPI applications which currently run on Windows 95 also run on Windows NT on the Intel <i>x</i>86 family of microprocessors without modification or recompilation. </li>
<li>
<b>16-bit application portability</b>. Existing Win16 full TAPI and assisted TAPI applications which currently run on Windows 95 and Windows® 3.1 operating system (using the TAPI 1.3 API) run on Windows NT without modification or recompilation. </li>
<li>
<b>Unicode support</b>. Win32 applications can choose to call the existing ANSI TAPI functions or to call Unicode versions of functions that pass or return strings (functions with a "W" suffix). </li>
<li>
<b>Service processes</b>. TAPI 2.0 adds mechanisms for notifying applications of telephony events that do not require the application to have a window message queue, thereby enabling background service processes to easily use TAPI services. </li>
<li>
<b>NDISTAPI compatibility</b>. The existing support in Windows NT 3.5 for ISDN WAN miniports under Remote Access Service is preserved. NDIS WAN miniport drivers are supported under a kernel mode service provider without modification. </li>
<li>
<b>Registry support</b>. All telephony parameters are stored in the registry. Telephony service providers and all stored parameters can be updated across the LAN. </li>
<li>
<b>Call Center support</b>. TAPI supports functionality required in a call center environment, including the modeling of predictive dialing ports and queues, ACD agent control, station set status control, and centralized event timing. </li>
<li>
<b>Quality of Service (QOS) support</b>. Applications can request, negotiate, and renegotiate quality of service (performance) parameters with the network, and receive indication of QOS on inbound calls and when QOS is changed by the network. The QOS structures are binary-compatible with those used in the Windows Sockets 2.0 specification. </li>
<li>
<b>Enhanced device sharing</b>. Applications can restrict handling of inbound calls on a device to a single address, to support features such as distinctive ringing when used to indicate the expected media mode of inbound calls. Applications making outbound calls can set the device configuration when making a call. </li>
<li>
<b>User mode components</b>. The full TAPI system, including top-level service provider DLLs, runs in user mode. </li>
</ul>
<p>
The following are additional version 2.X enhancements to existing TAPI features (now applicable to Windows 95 platforms running TAPI 2.0 or later): 
<ul>
<li>
Applications now receive <a href="msgs_7vqk.htm">LINE_APPNEWCALL</a> messages (instead of <a href="msgs_1eud.htm">LINE_CALLSTATE</a>) as the first messages notifying the application of a new call. </li>
<li>
Applications now receive <a href="msgs_0vvp.htm">LINE_REMOVE</a> and <a href="msgs_0zqd.htm">PHONE_REMOVE</a> messages whenever a line or phone device has been removed from the system. </li>
<li>
LINECONNECTEDMODE_ constants now indicate when a call has been placed in the <i>onhold</i> state by the remote party. Also, an additional LINECONNECTEDMODE_ constant indicates to applications when entry into the <i>connected</i> state was confirmed by the network, or if it is just being assumed because confirmation from the network is impossible. </li>
<li>
Applications now receive notification that ringing has stopped on a line device by receiving a <a href="msgs_7het.htm">LINE_LINEDEVSTATE</a> message with the <i>dwParam1</i> parameter set to LINEDEVSTATE_RINGING and both <i>dwParam2</i> and <i>dwParam3</i> set to zero. </li>
<li>
The <a href="struc2_30mq.htm"><b>LINEDEVCAPS</b></a>, <a href="struc1_606q.htm"><b>LINEADDRESSCAPS</b></a>, and <a href="struc2_8x6a.htm"><b>PHONECAPS</b></a> structures now include a listing of device classes supported by the device, with each supported device class terminated by a zero byte and the final class terminated by two zero bytes. A typical list for a voice modem might be: <pre><code>"tapi/line\0comm\0comm/datamodem\0wave/in\0wave/out\0\0" 
 </code></pre>
<p>
Applications can scan this list to see if a particular device supports device classes required for the application to properly function. 
</li>
<li>
The LINEFEATURE_, LINEADDRFEATURE_, and LINECALLFEATURE_ sets of constants have been extended to allow applications to detect when various "flavors" of a function are available for use. For example, applications will be able to detect not only that a call can be transferred, but whether it is permitted to resolve the transfer as a three-way conference. </li>
<li>
Applications can carry out a "one-step transfer" by using LINECALLPARAMFLAGS_ONESTEPTRANSFER with the <a href="func2_25rm.htm"><b>lineSetupTransfer</b></a> function. </li>
<li>
Applications can carry out a "no hold conference" by using the LINECALLPARAMFLAGS_NOHOLDCONFERENCE option with the <a href="func2_84kl.htm"><b>lineSetupConference</b></a> function, allowing another device, such as a supervisor or recording device, to be silently attached to the line. </li>
<li>
Applications can carry out a "transfer through hold" (on the systems with this capability) by using the <a href="func2_2j00.htm"><b>linePickup</b></a> function with a NULL target address. Check for the LINEADDRFEATURE_PICKUPHELD bit in <a href="struc1_606q.htm"><b>LINEADDRESSCAPS</b></a> and <a href="struc1_4xki.htm"><b>LINEADDRESSSTATUS</b></a> for this capability. </li>
<li>
The <a href="struc2_8x6a.htm"><b>PHONECAPS</b></a> structure now includes an indication of which hookswitch states can be <i>set</i> for each hookswitch device, and which can be <i>detected</i> and <i>reported</i>. Previously, applications could detect only the existence of each device without being able to determine which characteristics could be only monitored and not set. </li>
<li>
The <a href="struc2_0702.htm"><b>PHONESTATUS</b></a> structure now also includes a <b>dwPhoneFeatures</b> member that indicates which phone operations can be performed at the particular moment in time that <a href="func2_7c4z.htm"><b>phoneGetStatus</b></a> is called. </li>
</ul>
<p>&nbsp;</p></body>
</HTML>

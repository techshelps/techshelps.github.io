<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LINEFORWARDMODE_ Constants</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_lineforwardmode__constants"></a>LINEFORWARDMODE_ Constants</h1>
<p>
The LINEFORWARDMODE_ bit-flag constants describe the conditions under which calls to an address can be forwarded. 
<dl>
<dt>
LINEFORWARDMODE_UNCOND </dt>
<dd>
Forward all calls unconditionally, irrespective of their origin. Use this value when unconditional forwarding for internal and external calls cannot be controlled separately. Unconditional forwarding overrides forwarding on busy and/or no answer conditions. </dd>
<dt>
LINEFORWARDMODE_UNCONDINTERNAL </dt>
<dd>
Forward all internal calls unconditionally. Use this value when unconditional forwarding for internal and external calls can be controlled separately. </dd>
<dt>
LINEFORWARDMODE_UNCONDEXTERNAL </dt>
<dd>
Forward all external calls unconditionally. Use this value when unconditional forwarding for internal and external calls can be controlled separately. </dd>
<dt>
LINEFORWARDMODE_UNCONDSPECIFIC </dt>
<dd>
Unconditionally forward all calls that originated at a specified address (selective call forwarding). </dd>
<dt>
LINEFORWARDMODE_BUSY </dt>
<dd>
Forward all calls on busy, irrespective of their origin. Use this value when forwarding for internal and external calls on busy and on no answer cannot be controlled separately. </dd>
<dt>
LINEFORWARDMODE_BUSYINTERNAL </dt>
<dd>
Forward all internal calls on busy. Use this value when forwarding for internal and external calls on busy and on no answer can be controlled separately. </dd>
<dt>
LINEFORWARDMODE_BUSYEXTERNAL </dt>
<dd>
Forward all external calls on busy. Use this value when forwarding for internal and external calls on busy and on no answer can be controlled separately. </dd>
<dt>
LINEFORWARDMODE_BUSYSPECIFIC </dt>
<dd>
Forward on busy all calls that originated at a specified address (selective call forwarding). </dd>
<dt>
LINEFORWARDMODE_NOANSW </dt>
<dd>
Forward all calls on no answer, irrespective of their origin. Use this value when call forwarding for internal and external calls on no answer cannot be controlled separately. </dd>
<dt>
LINEFORWARDMODE_NOANSWINTERNAL </dt>
<dd>
Forward all internal calls on no answer. Use this value when forwarding for internal and external calls on no answer can be controlled separately. </dd>
<dt>
LINEFORWARDMODE_NOANSWEXTERNAL </dt>
<dd>
Forward all external calls on no answer. Use this value when forwarding for internal and external calls on no answer can be controlled separately. </dd>
<dt>
LINEFORWARDMODE_NOANSWSPECIFIC </dt>
<dd>
Forward on no answer all calls that originated at a specified address (selective call forwarding). </dd>
<dt>
LINEFORWARDMODE_BUSYNA </dt>
<dd>
Forward all calls on busy/no answer, irrespective of their origin. Use this value when forwarding for internal and external calls on busy and on no answer cannot be controlled separately. </dd>
<dt>
LINEFORWARDMODE_BUSYNAINTERNAL </dt>
<dd>
Forward all internal calls on busy/no answer. Use this value when call forwarding on busy and on no answer cannot be controlled separately for internal calls. </dd>
<dt>
LINEFORWARDMODE_BUSYNAEXTERNAL </dt>
<dd>
Forward all external calls on busy/no answer. Use this value when call forwarding on busy and on no answer cannot be controlled separately for internal calls. </dd>
<dt>
LINEFORWARDMODE_BUSYNASPECIFIC </dt>
<dd>
Forward on busy/no answer all calls that originated at a specified address (selective call forwarding). </dd>
<dt>
LINEFORWARDMODE_UNKNOWN </dt>
<dd>
Calls are forwarded, but the conditions under which forwarding will occur are not known at this time. It is possible that the conditions may become known at a future time. </dd>
<dt>
LINEFORWARDMODE_UNAVAIL </dt>
<dd>
Calls are forwarded, but the conditions under which forwarding will occur are not known, and will never be known by the service provider. 
</dd>
</dl>
<p>
No extensibility. All 32 bits are reserved. </p>
<p>
The bit flags defined by LINEFORWARDMODE_ are not orthogonal. Unconditional forwarding ignores any specific condition such as busy or no answer. If unconditional forwarding is not in effect, then forwarding on busy and on no answer can be controlled separately or not separately. If controlled separately, the LINEFORWARDMODE_BUSY and LINEFORWARDMODE_NOANSW flags can be used separately. If not controlled separately, the flag LINEFORWARDMODE_BUSYNA must be used. Similarly, if forwarding of internal and external calls can be controlled separately, then LINEFORWARDMODE_INTERNAL and LINEFORWARDMODE_EXTERNAL flags can be used separately; otherwise the combination is used. </p>
<p>
Address capabilities indicate which forwarding modes are available for each address assigned to a line. An application can use <a href="func1_6nvo.htm"><b>lineForward</b></a> to set forwarding conditions at the switch. </p>
<p>
For backward compatibility, it is the responsibility of the service provider to examine the negotiated API version on the line, and to not use these LINEFORWARDMODE_ values if i not supported on the negotiated version. </p>
<p>&nbsp;</p></body>
</HTML>

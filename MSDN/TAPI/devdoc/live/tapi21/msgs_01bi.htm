<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PHONE_BUTTON</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_phone_button"></a>PHONE_BUTTON</h1>
<p>
The PHONE_BUTTON message is sent to notify the application that button press monitoring is enabled if it has detected a button press on the local phone. </p>
<pre><code>PHONE_BUTTON
hPhone = (HPHONE) hPhoneDevice;
dwCallbackInstance = (DWORD) hCallback;
dwParam1 = (DWORD) idButtonOrLamp;
dwParam2 = (DWORD) ButtonMode;
dwParam3 = (DWORD) ButtonState;
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hPhone</i> </dt>
<dd>
A handle to the phone device. </dd>
<dt>
<i>dwCallbackInstance</i> </dt>
<dd>
The application's callback instance provided when opening the phone device. </dd>
<dt>
<i>dwParam1</i> </dt>
<dd>
The button/lamp identifier of the button that was pressed. Note that button identifiers zero through 11 are always the KEYPAD buttons, with '0' being button identifier zero, '1' being button identifier 1 (and so on through button identifier 9), and with '*' being button identifier 10, and '#' being button identifier 11. Additional information about a button identifier is available with <a href="func2_0eib.htm"><b>phoneGetDevCaps</b></a> and <a href="func2_7ien.htm"><b>phoneGetButtonInfo</b></a>. </dd>
<dt>
<i>dwParam2</i> </dt>
<dd>
The button mode of the button. This parameter uses the following PHONEBUTTONMODE_ constants: 
<dl>
<dt>
PHONEBUTTONMODE_CALL </dt>
<dd>
The button is assigned to a call appearance. </dd>
<dt>
PHONEBUTTONMODE_FEATURE </dt>
<dd>
The button is assigned to requesting features from the switch, such as hold, conference, and transfer. </dd>
<dt>
PHONEBUTTONMODE_KEYPAD </dt>
<dd>
The button is one of the twelve keypad buttons, '0' through '9', '*', and '#'. </dd>
<dt>
PHONEBUTTONMODE_LOCAL </dt>
<dd>
The button is a local function button, such as mute or volume control. </dd>
<dt>
PHONEBUTTONMODE_DISPLAY </dt>
<dd>
The button is a "soft" button associated with the phone's display. A phone set can have zero or more display buttons. </dd>
</dl>
</dd>
<dt>
<i>dwParam3</i> </dt>
<dd>
Specifies whether this is a button-down event or a button-up event. This parameter uses the following PHONEBUTTONSTATE_ constants: 
<dl>
<dt>
PHONEBUTTONSTATE_UP </dt>
<dd>
The button is in the "up" state. </dd>
<dt>
PHONEBUTTONSTATE_DOWN </dt>
<dd>
The button is in the "down" state (pressed down). </dd>
<dt>
PHONEBUTTONSTATE_UNKNOWN </dt>
<dd>
Indicates that the up or down state of the button is not known at this time, but may become known at a future time. </dd>
<dt>
PHONEBUTTONSTATE_UNAVAIL </dt>
<dd>
Indicates that the up or down state of the button is not known to the service provider, and cannot become known at a future time. 
</dd>
</dl>
</dd>
</dl>
<h4>Return Values</h4>
<p>
No return value. </p>
<h4>Remarks</h4>
<p>
A PHONE_BUTTON message is sent whenever a button changes state. An application is guaranteed that for each button down event, it is eventually sent a corresponding button up event. A service provider that is incapable of detecting the actual button up is required to generate the button up message shortly after the button down message for each button press. </p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Version:</b> Use TAPI version 1.4 and later.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in tapi.h.</p>
<h4>See Also</h4>
<p>
<a href="func2_7ien.htm"><b>phoneGetButtonInfo</b></a>, <a href="func2_0eib.htm"><b>phoneGetDevCaps</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deallocating Call Handles</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_deallocating_call_handles"></a>Deallocating Call Handles</h3>
<p>
A call handle remains valid after the call has been dropped. This enables applications to use operations such as <a href="func1_5zov.htm"><b>lineGetCallInfo</b></a> to retrieve call information for logging purposes. Once an application knows it has all the information it needs about a call and it has received a <a href="msgs_1eud.htm">LINE_CALLSTATE</a>(LINECALLSTATE_IDLE) message, it should call <a href="func1_6q5o.htm"><b>lineDeallocateCall</b></a> to free system-allocated memory related to the call. The application must itself free memory that it allocated for its own purposes. </p>
<p>
The way to free an idle call is to deallocate its handle with <b>lineDeallocateCall</b>. The application's duty to free a call is independent of the reason the call went idle. That is, the handle must be deallocated whether it was the local or the remote application that dropped it. If an application is the owner of the call, it can deallocate the call's handle only if the call is in the idle state. If monitoring the call, it can deallocate the call handle at any time. </p>
<p>
It is better to process the LINE_CALLSTATE(LINECALLSTATE_IDLE) message (and all other call-state notifications) consistently in one location regardless of its cause. </p>
<p>&nbsp;</p></body>
</HTML>

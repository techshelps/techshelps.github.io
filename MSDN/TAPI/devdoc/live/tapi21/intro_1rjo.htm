<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TAPI Version 1.4</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_tapi_version_1.4"></a>TAPI Version 1.4</h2>
<p>
TAPI version 1.4 added a number of APIs, messages, constants, and structure elements to the 1.3 specification. TAPI 1.4 is a piece of Windows 95 – it is always present and cannot be separated out for separate distribution. TAPI 1.4 only supports 16-bit TSPs. However, it does allow 32-bit applications to be developed without having to worry about Win16 limitations.</p>
<p>
The Win32 TAPI and TSPI headers in the Platform SDK are used to develop both TAPI 1.4 and TAPI 2.0 applications. While there were not many changes to the structures between these two specifications, there were changes to the APIs (specifically, Unicode support) that make it very important to note that the headers compile differently, depending on the TAPI_CURRENT_VERSION constant. For an application to work correctly on Windows 95, it must define this variable. For example:</p>
<p>
#define TAPI_CURRENT_VERSION 0x00010004<br>
#include &lt;tapi.h&gt;</p>
<p>
<b>Note</b>&nbsp;&nbsp;TAPI_CURRENT_VERSION should be defined for all TAPI applications. While it is not strictly necessary for TAPI 2.0 development, future changes <i>could</i> occur to require this.</p>
<p>
TAPI 1.4 system binaries (as part of Windows 95) support both TAPI 1.3 and 1.4 applications and service providers. While applications can be either Win16 or Win32, TSPs can only be Win16 DLLs.</p>
<p>&nbsp;</p></body>
</HTML>

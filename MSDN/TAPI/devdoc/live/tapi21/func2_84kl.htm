<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>lineSetupConference</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_linesetupconference"></a>lineSetupConference</h1>
<p>
The <b>lineSetupConference</b> function sets up a conference call for the addition of the third party. </p>
<pre><code><b>LONG lineSetupConference(
  HCALL</b><i> hCall</i><b>,                         </b>
  <b>HLINE</b> <i>hLine</i><b>,                         </b>
<b>  LPHCALL</b><i> lphConfCall</i><b>,                 </b>
<b>  LPHCALL</b><i> lphConsultCall</i><b>,              </b>
<b>  DWORD</b><i> dwNumParties</i><b>,                  </b>
<b>  LPLINECALLPARAMS const</b><i> lpCallParams  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCall</i> </dt>
<dd>
The initial call that identifies the first party of a conference call. In some environments (as described in device capabilities), a call must exist to start a conference call, and the application must be an owner of this call. In other telephony environments, no call initially exists, <i>hCall</i> must be left NULL, and <i>hLine</i> must be specified to identify the line on which the conference call is to be initiated. The call state of <i>hCall</i> must be <i>connected</i>. </dd>
<dt>
<i>hLine</i> </dt>
<dd>
A handle to the line. This handle is used to identify the line device on which to originate the conference call if <i>hCall</i> is NULL. The <i>hLine</i> parameter is ignored if <i>hCall</i> is non-NULL. </dd>
<dt>
<i>lphConfCall</i> </dt>
<dd>
A pointer to an HCALL handle. This location is then loaded with a handle identifying the newly created conference call. The application is the initial sole owner of this call. The call state of <i>hConfCall</i> is not applicable. </dd>
<dt>
<i>lphConsultCall</i> </dt>
<dd>
A pointer to an HCALL handle. When setting up a call for the addition of a new party, a new temporary call (consultation call) is automatically allocated. Initially, the application is the sole owner for this call. </dd>
<dt>
<i>dwNumParties</i> </dt>
<dd>
The expected number of parties in the conference call. This number is passed to the service provider. The service provider is free to do as it pleases with this number: ignore it, use it as a hint to allocate the right size conference bridge inside the switch, and so on. </dd>
<dt>
<i>lpCallParams</i> </dt>
<dd>
A pointer to call parameters to be used when establishing the consultation call. This parameter can be set to NULL if no special call setup parameters are desired. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The <i>dwParam2</i> parameter of the corresponding LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are:</p>
<p>
LINEERR_BEARERMODEUNAVAIL, LINEERR_UNINITIALIZED, LINEERR_CALLUNAVAIL, LINEERR_INVALMEDIAMODE, LINEERR_CONFERENCEFULL, LINEERR_INVALPOINTER, LINEERR_INUSE, LINEERR_INVALRATE, LINEERR_INVALADDRESSMODE, LINEERR_NOMEM, LINEERR_INVALBEARERMODE, LINEERR_NOTOWNER, LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONFAILED, LINEERR_INVALCALLPARAMS, LINEERR_RATEUNAVAIL, LINEERR_INVALLINEHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALLINESTATE, LINEERR_STRUCTURETOOSMALL, LINEERR_USERUSERINFOTOOBIG. </p>
<h4>Remarks</h4>
<p>
If LINEERR_INVALLINESTATE is returned, the line is currently not in a state in which this operation can be performed. A list of currently valid operations can be found in the <b>dwLineFeatures</b> member (of the type <b>LINEFEATURE</b>) in the <a href="struc2_7i0i.htm"><b>LINEDEVSTATUS</b></a> structure. (Calling <a href="func1_3kj7.htm"><b>lineGetLineDevStatus</b></a> updates the information in <b>LINEDEVSTATUS</b>.) If LINEERR_INVALMEDIAMODE is returned, check for supported media modes on the line in the <b>dwMediaModes</b> member in the <a href="struc2_30mq.htm"><b>LINEDEVCAPS</b></a> structure. </p>
<p>
The <b>lineSetupConference</b> function provides two ways to establish a new conference call, depending on whether a normal two-party call is required to pre-exist or not. When setting up a conference call from an existing two-party call, the <i>hCall</i> parameter is a valid call handle that is initially added to the conference call by the <b>lineSetupConference</b> request; <i>hLine</i> is ignored. On switches where conference call setup does not start with an existing call, <i>hCall</i> must be NULL and <i>hLine</i> must be specified to identify the line device on which to initiate the conference call. In either case, a consultation call is allocated for connecting to the party that is to be added to the call. The application can then use <a href="func1_06cs.htm"><b>lineDial</b></a> to dial the address of the other party. </p>
<p>
The conference call typically transitions into the <i>onHoldPendingConference</i> state, the consultation call into the <i>dialtone</i> state, and the initial call (if there is one) into the <i>conferenced</i> state. </p>
<p>
A conference call can also be set up by a <a href="func1_8sdu.htm"><b>lineCompleteTransfer</b></a> that is resolved into a three-way conference. The application may be able to toggle between the consultation call and the conference call using <a href="func2_7l9g.htm"><b>lineSwapHold</b></a>. </p>
<p>
A consultation call can be canceled by invoking <a href="func1_0zhs.htm"><b>lineDrop</b></a> on it. When dropping a consultation call, the existing conference call typically transitions back to the <i>connected</i> state. The application should observe the LINE_CALLSTATE messages to determine exactly what happens to the calls. For example, if the conference call reverts back to a regular two-party call, the conference call becomes idle and the original participant call can revert to <i>connected</i>. </p>
<p>
If an application specifies the handle of the original call (<i>hCall</i>) in a call to the <b>lineUnhold</b> function, both the conference call and the consultation call typically go to idle. </p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Version:</b> Use TAPI version 1.4 and later.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in tapi.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with tapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="quickref_9s85.htm">TAPI Reference Overview</a>, <a href="quickref_2bg3.htm">Supplementary Line Services Functions</a>, <a href="msgs_1eud.htm">LINE_CALLSTATE</a>, <a href="func1_8sdu.htm"><b>lineCompleteTransfer</b></a>, <a href="struc2_30mq.htm"><b>LINEDEVCAPS</b></a>, <a href="struc2_7i0i.htm"><b>LINEDEVSTATUS</b></a>, <a href="func1_06cs.htm"><b>lineDial</b></a>, <a href="func1_0zhs.htm"><b>lineDrop</b></a>, <a href="func1_3kj7.htm"><b>lineGetLineDevStatus</b></a>, <a href="func2_7l9g.htm"><b>lineSwapHold</b></a>, <a href="func2_8zxg.htm"><b>lineUnhold</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initialization and Shutdown in TAPI</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_initialization_and_shutdown_in_tapi"></a>Initialization and Shutdown in TAPI</h2>
<p>
For an application to use any of TAPI's basic or supplementary line functions, it needs a connection to TAPI through which it can receive messages. The application establishes this connection, using either the <a href="func1_8th4.htm"><b>lineInitializeEx</b></a> or the <a href="func2_5ans.htm"><b>phoneInitializeEx</b></a> function. The parameters of these functions allow the application to specify the message notification mechanism the application desires to use. Following are specifics about the initialization process: 
<ul>
<li>
The initialization functions are not device-related. When an application calls an initialization function, TAPI does not act on a line or phone device or an abstraction thereof. </li>
<li>
The first time an initialization function is called in a telephony session, TAPI also sets up the telephony environment. Among the tasks it performs are loading the TAPI dynamic-link library and tapisrv.exe, and loading the device drivers (telephony service providers and ancillary components) specified in the registry. In addition, the communication link described above is established between TAPI and the calling application. </li>
<li>
The INIFILECORRUPT error can be returned if TAPI determines that the registry contains an invalid entry. When this error occurs (in <b>lineInitializeEx</b> and <b>phoneInitializeEx</b>, or another function), the user should identify and resolve the problem. It may be necessary to rebuild the registry or a portion of it, which can be done through the Telephony Control Panel. <p>
For example, the LINEERR_NODRIVER ("the driver was not installed") error indicates either that a service provider that was previously installed can no longer be found or that some subsidiary component of a service provider (such as a VxD) cannot be found. When this error is encountered, the application should advise the user to correct the problem with the Driver Setup function within the Telephony Control Panel. 
</li>
<li>
Although each application needs only one associated with TAPI, it can call an initialization function more than once to specify other message notification path. </li>
<li>
Both <b>lineInitializeEx</b> and <a href="func2_0m26.htm"><b>lineShutdown</b></a> (and the corresponding phone functions) operate synchronously. These functions return a success or failure indication, not an asynchronous request identifier. </li>
</ul>
<p>
Upon completion, the <b>lineInitializeEx</b> function returns two pieces of information to the application: an application handle and the number of available line devices. 
<ul>
<li>
The application handle represents the application's usage of TAPI. That is, to TAPI, it represents the application. TAPI functions that use line or call handles (explained later in this section) do not require the application handle, because this handle is derived from the specified line, phone, or call handle. </li>
<li>
The <b>lineInitializeEx</b> function also returns the number of line devices available to the application through TAPI. Line devices are identified by their device identifier (device identifier). Valid device identifiers range from zero to one less than the number of line devices. For example, if <b>lineInitializeEx</b> reports that there are two line devices in a system, the valid line device identifiers are 0 and 1. </li>
</ul>
<p>
After an application is finished calling TAPI's line functions, it calls <b>lineShutdown</b> and passes its application handle to terminate its usage of TAPI. This allows TAPI to free any resources assigned to the application. </p>
<p>&nbsp;</p></body>
</HTML>

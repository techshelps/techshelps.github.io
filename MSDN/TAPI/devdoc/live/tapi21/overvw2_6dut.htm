<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Call Conference</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_call_conference"></a>Call Conference</h3>
<p>
Conference calls are calls that include more than two parties simultaneously. They can be set up using either a switch-based conference bridge or an external server-based bridge. Typically, only switch-based conferencing will allow the level of conference control provided by the API. In server-based conference calls all participating parties dial into the server which mixes all the media streams together and sends each participant the mix; there may be no notion of individual parties in the conference call, only that of a single call between the application and the bridge server. </p>
<p>
A conference call can be established in a number of ways, depending on device capabilities: 
<ul>
<li>
A conference call can begin as a regular two-party call, such as a call established with <a href="func1_0fsc.htm"><b>lineMakeCall</b></a>. After the two-party call exists, additional parties can be added, one at a time. Calling <a href="func2_84kl.htm"><b>lineSetupConference</b></a> prepares a given call for the addition of another party, and this action establishes the conference call. This operation takes the original two-party call as input, allocates a conference call, connects the original call to the conference, and allocates a consultation call whose handle is returned to the application. <p>
<b>Note</b>&nbsp;&nbsp;The capabilities of the addressed line device can limit the number of parties conferenced in a single call and whether or not a conference starts out with a normal two-party call. 
<p>
The application can then use <a href="func1_06cs.htm"><b>lineDial</b></a> on the consultation call to establish a connection to the next party to be added. The <a href="func1_0zhs.htm"><b>lineDrop</b></a> function can be used to abandon this call attempt. The third party is added with the <a href="func1_7iqt.htm"><b>lineAddToConference</b></a> function, which specifies both the conference call and the consultation call. 
</li>
<li>
A three-way conference call can be established by resolving a transfer request for three-way conference. In this scenario, a two-party call is established as either an incoming or outgoing call. Next the call is placed on transfer hold with the <a href="func2_25rm.htm"><b>lineSetupTransfer</b></a> function, which returns a consultation call handle. After a period of consultation, the application may have the option to resolve the transfer setup by selecting the three-way conference option that conferences all three parties together in a conference call with <a href="func1_8sdu.htm"><b>lineCompleteTransfer</b></a> with the <i>conference</i> option (instead of the <i>transfer</i> option). Under this option, a conference call handle representing the conference call is allocated and returned to the application. </li>
<li>
A conference call may need to be established with <a href="func2_84kl.htm"><b>lineSetupConference</b></a> without an existing two-party call. This returns a handle for the conference call and allocates a consultation call. After a period of consultation, the consultation call can be added with <a href="func1_7iqt.htm"><b>lineAddToConference</b></a>. Additional parties are added with <a href="func2_7vdx.htm"><b>linePrepareAddToConference</b></a> followed by <b>lineAddToConference</b>. </li>
</ul>
<p>
To add parties to an existing conference call, the application uses <b>linePrepareAddToConference</b>. When calling this function, the application supplies the handle of an existing conference call. The function allocates a consultation call that can later be added to the conference call and returns a consultation call handle to the application. This conference call is then placed on conference hold. After the consultation call exists, it can be added to the existing conference call with <b>lineAddToConference</b>. </p>
<p>
After a call becomes a member of a conference call, the member's call state reverts to <i>conferenced</i>. The state of the conference call typically becomes <i>connected</i>. The call handle to the conference call and all the added parties remain valid as individual calls. <a href="msgs_1eud.htm">LINE_CALLSTATE</a> events can be received about all calls. For example, if one of the members disconnects by hanging up, an appropriate call-state message can inform the application of this fact; such a call is no longer a member of the conference. </p>
<p>
As is the case with call transfer, the application can toggle between the consultation call and the conference call using <a href="func2_7l9g.htm"><b>lineSwapHold</b></a>. </p>
<p>
Use the call handle for the member calls to later remove the call from the conference. Do this by calling <a href="func2_5nl1.htm"><b>lineRemoveFromConference</b></a> on the call handle. This operation is not commonly available in its fully general form. Some switches may not allow it at all, or only allow the most recently added party to be removed. The line's device capabilities describe which type of <b>lineRemoveFromConference</b> is possible. </p>
<p>
In TAPI version 2.0 and later, applications can use the "no hold conference" feature of PBXs by using the LINECALLPARAMFLAGS_NOHOLDCONFERENCE option with <a href="func2_84kl.htm"><b>lineSetupConference</b></a>; this feature allows another device, such as a supervisor or recording device, to be silently attached to the line. </p>
<p>&nbsp;</p></body>
</HTML>

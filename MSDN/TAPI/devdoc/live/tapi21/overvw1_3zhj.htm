<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Partial Dialing</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_partial_dialing"></a>Partial Dialing</h3>
<p>
In <i>partial dialing</i>, the application can use <a href="func1_0fsc.htm"><b>lineMakeCall</b></a> to allocate a call appearance or to dial just part of the full number. Later, the application can complete dialing using <a href="func1_06cs.htm"><b>lineDial</b></a>. Partial dialing is sometimes referred to as <i>incremental dialing</i> or <i>delayed dialing</i>.</p>
<p>
When the number provided is incomplete, dialing some of the digits may be delayed by placing a ";" (semicolon) at the end of the number. The <b>lineDial</b> function is used in cases in which the application needs to send address information to the switch on an existing call, such as dialing the address of a party to which the call will be transferred. </p>
<p>
<b>Note</b>&nbsp;&nbsp;An application should make sure that incremental dialing (providing the number in small pieces) is supported before attempting to use it. This support is indicated by the LINEADDRCAPFLAGS_PARTIALDIAL bit in the <b>dwAddrCapFlags</b> member in the <a href="struc1_606q.htm"><b>LINEADDRESSCAPS</b></a> structure, which is returned by <a href="func1_7wfn.htm"><b>lineGetAddressCaps</b></a>. </p>
<p>
The main reasons for an application to use partial dialing are if the <b>?</b> character appears in a dialable address or if the service provider does not support one or more of the call progress detection control characters. These characters, which can occur in a dialable address, are <b>W</b> (wait for dial tone); <b>@</b> (wait for quiet answer); and <b>$</b> (wait for calling-card prompt tone). These and all other characters used in address strings are discussed in greater detail in <a href="overvw2_938z.htm">Dialable Addresses</a>. </p>
<p>
The provider indicates which "wait for" dial string modifiers it supports in the following bits in the <b>dwDevCapFlags</b> member within the <a href="struc2_30mq.htm"><b>LINEDEVCAPS</b></a> structure returned by <a href="func1_22nn.htm"><b>lineGetDevCaps</b></a>: 
<ul>
<li>
LINEDEVCAPFLAGS_DIALBILLING </li>
<li>
LINEDEVCAPFLAGS_DIALQUIET </li>
<li>
LINEDEVCAPFLAGS_DIALDIALTONE </li>
</ul>
<p>
The <b>?</b> can be placed in the string (either directly by the application or by the address translator with the <a href="func2_5qyb.htm"><b>lineTranslateAddress</b></a> function) if it is known that the user needs to listen for an undetectable tone before dialing can proceed. Every service provider should reject a dial string that contains the <b>?</b> character and let the application deal with it as appropriate. For example, the application could use partial dialing to dial the string, up to but not including the <b>?</b> character, and then display a dialog to let the user signal when the rest of the dial string should be dialed.</p>
<p>
The <b>lineTranslateAddress</b> function returns bits, in the <b>dwTranslateResults</b> member of the <a href="struc2_7302.htm"><b>LINETRANSLATEOUTPUT</b></a> structure, that indicate whether any of the four potentially offending modifiers occur in the dialable string output from that translation operation. These bits give the application an idea of whether the dialable string might need to be scanned for unsupported modifiers: 
<ul>
<li>
LINETRANSLATERESULT_DIALBILLING </li>
<li>
LINETRANSLATERESULT_DIALQUIET </li>
<li>
LINETRANSLATERESULT_DIALDIALTONE </li>
<li>
LINETRANSLATERESULT_DIALPROMPT </li>
</ul>
<p>
If the application tries to send an unsupported modifier or a <b>?</b> to the provider, it receives an error indicating which offending modifier occurred first within the string: 
<ul>
<li>
LINEERR_DIALBILLING </li>
<li>
LINEERR_DIALQUIET </li>
<li>
LINEERR_DIALDIALTONE </li>
<li>
LINEERR_DIALPROMPT </li>
</ul>
<p>
The application can choose to pre-scan dialable strings for unsupported characters. Or it can pass the "raw" string from <a href="func2_5qyb.htm"><b>lineTranslateAddress</b></a> directly to the provider as part of <a href="func1_0fsc.htm"><b>lineMakeCall</b></a> (or <a href="func1_06cs.htm"><b>lineDial</b></a> or any other function that passes a dialable address as a parameter) and then let the service provider generate an error to tell it which unsupported modifier occurs first in the string. </p>
<p>
When the application is told (or finds) that an unsupported dial modifier is in the dialable string, it must take the following steps: 
<ol>
<li>
Locate the offending modifier in the string. </li>
<li>
Isolate the characters occurring in the string to the left of the offending modifier. </li>
<li>
Append a semicolon to the end of the partial string. </li>
<li>
Reissue the dialing command using the partial string. </li>
<li>
Prompt the user to listen for the audible tones indicating when it is OK to proceed with dialing. </li>
<li>
Reissue the remainder of the dialable string (the portion following the offending modifier). <p>
<b>Note</b>&nbsp;&nbsp;In step 6 it is possible for another error to occur, because it is possible for multiple unsupported characters to occur within a single dialable string. Therefore, the application should repeat this process to dial the number in stages. 
</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

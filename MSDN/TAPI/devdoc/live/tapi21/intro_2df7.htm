<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Versions and Conversions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_versions_and_conversions"></a>Versions and Conversions</h2>
<p>
Every TAPI application and TSP is developed for a specific version of TAPI. However, TAPI allows for quite a bit of flexibility between TSPs and applications. TAPI applications and TSPs do not have to use the same version in order to communicate.</p>
<p>
The <a href="func2_329a.htm"><b>lineNegotiateAPIVersion</b></a> function allows an application and TSP to agree on a version to use. A single TSP could be capable of handling more than one version, and an application must "fall back" to using an older version if using an older TSP. In <b>lineNegotiateAPIVersion,</b> the <i>dwApiVersion</i> parameter defaults to a value according to version, as follows:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=28%>TAPI<br>
Version</th>
<td width=72%><i>dwApiVersion</i><b><br>
default value</b></td>
</tr>
<tr valign=top>
<td width=28%>1.3</td>
<td width=72%>0x00010003</td>
</tr>
<tr valign=top>
<td width=28%>1.4</td>
<td width=72%>0x00010004</td>
</tr>
<tr valign=top>
<td width=28%>2.0</td>
<td width=72%>0x00020000</td>
</tr>
<tr valign=top>
<td width=28%>2.1</td>
<td width=72%>0x00020001</td>
</tr>
</table><br>
<p>
However, TAPI makes this much easier as long as the TSP itself is using a newer version than the application. If the TSP is indeed newer, then TAPI is capable of translating "down" to the application's version. For example, TAPI 2.0 TSPs do not need to be specifically capable of dealing with TAPI version 1.4. If a TAPI 1.4 application is run, TAPI converts all TAPI 2.0 structures and messages into TAPI 1.4 equivalents, or as close as possible. If there is no close approximation in TAPI 1.4, then all TAPI 2.0-specific information will be lost. </p>
<p>&nbsp;</p></body>
</HTML>

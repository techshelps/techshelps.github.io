<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LINECALLPARAMS</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_linecallparams_str"></a>LINECALLPARAMS</h1>
<p>
The <b>LINECALLPARAMS</b> structure describes parameters supplied when making calls using <a href="func1_0fsc.htm"><b>lineMakeCall</b></a>. The <b>LINECALLPARAMS</b> structure is also used as a parameter in other operations. The comments on the right indicate the default values used when this structure is not provided to <b>lineMakeCall</b>. </p>
<pre><code>typedef struct linecallparams_tag {  // Defaults:
    DWORD  dwTotalSize;          // ---------
  
    DWORD  dwBearerMode;              // voice
    DWORD  dwMinRate;                 // (3.1kHz)
    DWORD  dwMaxRate;                 // (3.1kHz)
    DWORD  dwMediaMode;               // interactiveVoice

    DWORD  dwCallParamFlags;          // 0
    DWORD  dwAddressMode;             // addressID
    DWORD  dwAddressID;               // (any available)

  LINEDIALPARAMS DialParams;        // (0, 0, 0, 0)
  
    DWORD  dwOrigAddressSize;         // 0
    DWORD  dwOrigAddressOffset;

    DWORD  dwDisplayableAddressSize;  // 0
    DWORD  dwDisplayableAddressOffset;

    DWORD  dwCalledPartySize;         // 0
    DWORD  dwCalledPartyOffset;

    DWORD  dwCommentSize;             // 0
    DWORD  dwCommentOffset;

    DWORD  dwUserUserInfoSize;        // 0
    DWORD  dwUserUserInfoOffset;

    DWORD  dwHighLevelCompSize;       // 0
    DWORD  dwHighLevelCompOffset;

    DWORD  dwLowLevelCompSize;        // 0
    DWORD  dwLowLevelCompOffset;

    DWORD  dwDevSpecificSize;         // 0
    DWORD  dwDevSpecificOffset;

    DWORD  dwPredictiveAutoTransferStates;
    DWORD  dwTargetAddressSize;
    DWORD  dwTargetAddressOffset;
    DWORD  dwSendingFlowspecSize;
    DWORD  dwSendingFlowspecOffset;
    DWORD  dwReceivingFlowspecSize;
    DWORD  dwReceivingFlowspecOffset;
    DWORD  dwDeviceClassSize;
    DWORD  dwDeviceClassOffset;
    DWORD  dwDeviceConfigSize;
    DWORD  dwDeviceConfigOffset;
    DWORD  dwCallDataSize;
    DWORD  dwCallDataOffset;
    DWORD  dwNoAnswerTimeout;
    DWORD  dwCallingPartyIDSize;
    DWORD  dwCallingPartyIDOffset;
} LINECALLPARAMS, FAR *LPLINECALLPARAMS; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>dwTotalSize</b> </dt>
<dd>
The total size in bytes allocated to this data structure. This size should be big enough to hold all the fixed and variably sized portions of this data structure. </dd>
<dt>
<b>dwBearerMode</b> </dt>
<dd>
The bearer mode for the call. This member uses the following LINEBEARERMODE_ constants: 
<dl>
<dt>
LINEBEARERMODE_VOICE </dt>
<dd>
This is a regular 3.1 kHz analog voice grade bearer service. Bit integrity is not assured. Voice can support fax and modem media modes. </dd>
<dt>
LINEBEARERMODE_SPEECH </dt>
<dd>
Corresponds to G.711 speech transmission on the call. The network can use processing techniques such as analog transmission, echo cancellation, and compression/decompression. Bit integrity is not assured. Speech is not intended to support fax and modem media modes. </dd>
<dt>
LINEBEARERMODE_MULTIUSE </dt>
<dd>
The multiuse mode defined by ISDN. </dd>
<dt>
LINEBEARERMODE_DATA </dt>
<dd>
The unrestricted data transfer on the call. The data rate is specified separately. </dd>
<dt>
LINEBEARERMODE_ALTSPEECHDATA </dt>
<dd>
The alternate transfer of speech or unrestricted data on the same call (ISDN). </dd>
<dt>
LINEBEARERMODE_NONCALLSIGNALING </dt>
<dd>
Corresponds to a non-call-associated signaling connection from the application to the service provider or switch (treated as a "media stream" by the Telephony API). </dd>
<dt>
LINEBEARERMODE_PASSTHROUGH </dt>
<dd>
When a call is active in LINEBEARERMODE_PASSTHROUGH, the service provider gives direct access to the attached hardware for control by the application. This mode is used primarily by applications desiring temporary direct control over asynchronous modems, accessed through the Win32 comm functions, for the purpose of configuring or using special features not otherwise supported by the service provider. </dd>
</dl>

<p>
If <b>dwBearerMode</b> is zero, the default value is LINEBEARERMODE_VOICE. 
</dd>
<dt>
<b>dwMinRate</b> </dt>
<dt>
<b>dwMaxRate</b> </dt>
<dd>
The data rate range requested for the call's data stream in bps (bits per second). When making a call, the service provider attempts to provide the highest available rate in the requested range. If a specific data rate is required, both min and max should be set to that value. If an application works best with one rate but is able to degrade to lower rates, the application should specify these as the maximum and minimum rates, respectively. If <b>dwMaxRate</b> is zero, the default value is as specified by the <b>dwMaxRate</b> member of the <a href="struc2_30mq.htm"><b>LINEDEVCAPS</b></a> structure. This is the maximum rate supported by the device. </dd>
<dt>
<b>dwMediaMode</b> </dt>
<dd>
The expected media mode of the call. This member uses the following LINEMEDIAMODE_ constants: 
<dl>
<dt>
LINEMEDIAMODE_UNKNOWN </dt>
<dd>
A media stream exists but its mode is not known. This would correspond to a call with an unclassified media type. In typical analog telephony environments, an incoming call's media mode may be unknown until after the call has been answered and the media stream has been filtered to make a determination. </dd>
<dt>
LINEMEDIAMODE_INTERACTIVEVOICE </dt>
<dd>
The presence of voice energy on the call and the call is treated as an interactive call with humans on both ends. </dd>
<dt>
LINEMEDIAMODE_AUTOMATEDVOICE </dt>
<dd>
The presence of voice energy on the call and the voice is locally handled by an automated application. </dd>
<dt>
LINEMEDIAMODE_DATAMODEM </dt>
<dd>
A datamodem session on the call. </dd>
<dt>
LINEMEDIAMODE_G3FAX </dt>
<dd>
A group 3 fax is being sent or received on the call. </dd>
<dt>
LINEMEDIAMODE_G4FAX </dt>
<dd>
A group 4 fax is being sent or received on the call. </dd>
<dt>
LINEMEDIAMODE_TDD </dt>
<dd>
A TDD (Telephony Devices for the Deaf) session on the call. </dd>
<dt>
LINEMEDIAMODE_DIGITALDATA </dt>
<dd>
Digital data is being sent or received on the call. </dd>
<dt>
LINEMEDIAMODE_TELETEX </dt>
<dd>
A teletex session on the call. Teletex is one of the telematic services. </dd>
<dt>
LINEMEDIAMODE_VIDEOTEX </dt>
<dd>
A videotex session on the call. Videotex is one of the telematic services. </dd>
<dt>
LINEMEDIAMODE_TELEX </dt>
<dd>
A telex session on the call. Telex is one of the telematic services. </dd>
<dt>
LINEMEDIAMODE_MIXED </dt>
<dd>
A mixed session on the call. Mixed is one of the ISDN telematic services. </dd>
<dt>
LINEMEDIAMODE_ADSI </dt>
<dd>
An ADSI (Analog Display Services Interface) session on the call. </dd>
<dt>
LINEMEDIAMODE_VOICEVIEW </dt>
<dd>
The media mode of the call is VoiceView. </dd>
</dl>

<p>
If <b>dwMediaMode</b> is zero, the default value is LINEMEDIAMODE_INTERACTIVEVOICE. 
</dd>
<dt>
<b>dwCallParamFlags</b> </dt>
<dd>
These flags specify a collection of Boolean call-setup parameters. This member uses the following LINECALLPARAMFLAGS_ constants: 
<dl>
<dt>
LINECALLPARAMFLAGS_SECURE </dt>
<dd>
The call should be set up as secure. </dd>
<dt>
LINECALLPARAMFLAGS_IDLE </dt>
<dd>
The call should get an idle call appearance. </dd>
<dt>
LINECALLPARAMFLAGS_BLOCKID </dt>
<dd>
The originator identity should be concealed (block caller ID). </dd>
<dt>
LINECALLPARAMFLAGS_ORIGOFFHOOK </dt>
<dd>
The originator's phone should be automatically taken offhook. </dd>
<dt>
LINECALLPARAMFLAGS_DESTOFFHOOK </dt>
<dd>
The called party's phone should be automatically taken offhook. </dd>
</dl>
</dd>
<dt>
<b>dwAddressMode</b> </dt>
<dd>
The mode by which the originating address is specified. The <b>dwAddressMode</b> member cannot be LINEADDRESSMODE_ADDRESSID for the <a href="func2_2lny.htm"><b>lineOpen</b></a><b> </b>function call. This member uses the following LINEADDRESSMODE_ constants: 
<dl>
<dt>
LINEADDRESSMODE_ADDRESSID </dt>
<dd>
The address is specified with a small integer in the range zero to <b>dwNumAddresses</b> minus one, where <b>dwNumAddresses</b> is the value in the line's <a href="struc2_30mq.htm"><b>LINEDEVCAPS</b></a> structure. The selected address is specified in the <b>dwAddressID</b> member. </dd>
<dt>
LINEADDRESSMODE_DIALABLEADDR </dt>
<dd>
The address is specified with its dialable address. The address is contained in the <b>dwOrigAddressSize</b>  <b>dwOrigAddressOffset</b> variably sized field. If <b>dwAddressMode</b> is zero, the default value is LINEADDRESSMODE_ADDRESSID. </dd>
</dl>
</dd>
<dt>
<b>dwAddressID</b> </dt>
<dd>
The address identifier of the originating address if <b>dwAddressMode</b> is set to LINEADDRESSMODE_ADDRESSID. </dd>
<dt>
<b>DialParams</b> </dt>
<dd>
Dial parameters to be used on this call, of type <a href="struc2_5u9e.htm"><b>LINEDIALPARAMS</b></a>. When a value of 0 is specified for this field, the default value for the field is used as indicated in the <b>DefaultDialParams</b> member of the <a href="struc2_30mq.htm"><b>LINEDEVCAPS</b></a> structure. If a nonzero value is specified for a field that is outside the range specified by the corresponding fields in <b>MinDialParams</b> and <b>MaxDialParams</b> in the <b>LINEDEVCAPS</b> structure, the nearest value within the valid range is used instead. </dd>
<dt>
<b>dwOrigAddressSize</b> </dt>
<dt>
<b>dwOrigAddressOffset</b> </dt>
<dd>
The size in bytes of the variably sized field holding the originating address, and the offset in bytes from the beginning of this data structure. The format of this address is dependent on the <b>dwAddressMode</b> member. </dd>
<dt>
<b>dwDisplayableAddressSize</b> </dt>
<dt>
<b>dwDisplayableAddressOffset</b> </dt>
<dd>
The displayable string is used for logging purposes. The content of these members is recorded in the <b>dwDisplayableAddressOffset</b> and <b>dwDisplayableAddressSize</b> members of the call's LINECALLINFO message. The <a href="func2_5qyb.htm"><b>lineTranslateAddress</b></a> function returns appropriate information to be placed in this field in the <b>dwDisplayableAddressSize</b> and <b>dwDisplayableAddressOffset</b> members of the <a href="struc2_7302.htm"><b>LINETRANSLATEOUTPUT</b></a> structure. </dd>
<dt>
<b>dwCalledPartySize</b> </dt>
<dt>
<b>dwCalledPartyOffset</b> </dt>
<dd>
The size in bytes of the variably sized field holding called-party information, and the offset in bytes from the beginning of this data structure. This information can be specified by the application that makes the call and is made available in the call's information structure for logging purposes. The format of this field is that of <b>dwStringFormat</b>, as specified in <a href="struc2_30mq.htm"><b>LINEDEVCAPS</b></a>. </dd>
<dt>
<b>dwCommentSize</b> </dt>
<dt>
<b>dwCommentOffset</b> </dt>
<dd>
The size in bytes of the variably sized field holding comments about the call, and the offset in bytes from the beginning of this data structure. This information can be specified by the application that makes the call and is made available in the call's information structure for logging purposes. The format of this field is that of <b>dwStringFormat</b>, as specified in <b>LINEDEVCAPS</b>. </dd>
<dt>
<b>dwUserUserInfoSize</b> </dt>
<dt>
<b>dwUserUserInfoOffset</b> </dt>
<dd>
The size in bytes of the variably sized field holding user-user information, and the offset in bytes from the beginning of this data structure. The protocol discriminator field for the user-user information, if required, should appear as the first byte of the data pointed to by <b>dwUserUserInfoOffset</b>, and must be accounted for in <b>dwUserUserInfoSize</b>. </dd>
<dt>
<b>dwHighLevelCompSize</b> </dt>
<dt>
<b>dwHighLevelCompOffset</b> </dt>
<dd>
The size in bytes of the variably sized field holding high-level compatibility information, and the offset in bytes from the beginning of this data structure </dd>
<dt>
<b>dwLowLevelCompSize</b> </dt>
<dt>
<b>dwLowLevelCompOffset</b> </dt>
<dd>
The size in bytes of the variably sized field holding low-level compatibility information, and the offset in bytes from the beginning of this data structure. </dd>
<dt>
<b>dwDevSpecificSize</b> </dt>
<dt>
<b>dwDevSpecificOffset</b> </dt>
<dd>
The size in bytes of the variably sized field holding device-specific information, and the offset in bytes from the beginning of this data structure </dd>
<dt>
<b>dwPredictiveAutoTransferStates</b> </dt>
<dd>
The LINECALLSTATE_ values, entry into which cause the call to be blind-transferred to the specified target address. Set to zero if automatic transfer is not desired. </dd>
<dt>
<b>dwTargetAddressSize</b> </dt>
<dt>
<b>dwTargetAddressOffset</b> </dt>
<dd>
The size in bytes and offset from the beginning of <b>LINECALLPARAMS</b> of a string specifying the target dialable address (<i>not</i> <b>dwAddressID</b>); used in the case of certain automatic actions. In the case of predictive dialing, specifies the address to which the call should be automatically transferred. This is essentially the same string that would be passed to <a href="func1_6o8i.htm"><b>lineBlindTransfer</b></a> if automatic transfer were not being used. Set to zero if automatic transfer is not desired. In the case of a No Hold Conference, specifies the address that should be conferenced to the call. In the case of a One Step Transfer, specifies the address to dial on the consultation call. </dd>
<dt>
<b>dwSendingFlowspecSize</b> </dt>
<dt>
<b>dwSendingFlowspecOffset</b> </dt>
<dd>
The total size in bytes and offset from the beginning of <b>LINECALLPARAMS</b> of a WinSock2 <b>FLOWSPEC</b> structure followed by WinSock2 provider-specific data, equivalent to what would have been stored in SendingFlowspec.len in a WinSock2 <b>QOS</b> structure. Specifies the quality of service desired in the sending direction on the call. The provider-specific portion following the <b>FLOWSPEC</b> structure must not contain pointers to other blocks of memory, because TAPI does not know how to marshal the data pointed to by the private pointer(s) and convey it through interprocess communication to the application. </dd>
<dt>
<b>dwReceivingFlowspecSize</b> </dt>
<dt>
<b>dwReceivingFlowspecOffset</b> </dt>
<dd>
The total size in bytes and offset from the beginning of <b>LINECALLPARAMS</b> of a WinSock2 <b>FLOWSPEC</b> structure followed by WinSock2 provider-specific data, equivalent to what would have been stored in ReceivingFlowspec.len in a WinSock2 <b>QOS</b> structure. Specifies the quality of service desired in the receiving direction on the call. The provider-specific portion following the <b>FLOWSPEC</b> structure must not contain pointers to other blocks of memory, because TAPI does not know how to marshal the data pointed to by the private pointer(s) and convey it through interprocess communication to the application. </dd>
<dt>
<b>dwDeviceClassSize</b> </dt>
<dt>
<b>dwDeviceClassOffset</b> </dt>
<dd>
The size in bytes and offset from the beginning of <b>LINECALLPARAMS</b> of a NULL-terminated ASCII string (the size includes the NULL) that indicates the device class of the device whose configuration is specified in <i>DeviceConfig</i>. Valid device class strings are the same as those specified for the <a href="func1_99r8.htm"><b>lineGetID</b></a> function. </dd>
<dt>
<b>dwDeviceConfigSize</b> </dt>
<dt>
<b>dwDeviceConfigOffset</b> </dt>
<dd>
The number of bytes and offset from the beginning of <b>LINECALLPARAMS</b> of the opaque configuration data structure pointed to by <b>dwDevConfigOffset</b>. This value is returned in the <b>dwStringSize</b> member in the <a href="struc2_90xe.htm"><b>VARSTRING</b></a> structure returned by <a href="func1_6ckn.htm"><b>lineGetDevConfig</b></a>. If the size is zero, the default device configuration is used. This allows the application to set the device configuration before the call is initiated. </dd>
<dt>
<b>dwCallDataSize</b> </dt>
<dt>
<b>dwCallDataOffset</b> </dt>
<dd>
The size in bytes and offset from the beginning of <b>LINECALLPARAMS</b> of the application-settable call data to be initially attached to the call. </dd>
<dt>
<b>dwNoAnswerTimeout</b> </dt>
<dd>
The number of seconds, after the completion of dialing, that the call should be allowed to wait in the PROCEEDING or RINGBACK states, before it is automatically abandoned by the service provider with a LINECALLSTATE_DISCONNECTED and LINEDISCONNECTMODE_NOANSWER. A value of 0 indicates that the application does not desire automatic call abandonment. </dd>
<dt>
<b>dwCallingPartyIDSize</b> </dt>
<dt>
<b>dwCallingPartyIDOffset</b> </dt>
<dd>
The size in bytes and offset from the beginning of <b>LINECALLPARAMS</b> of a NULL-terminated ASCII string (the size includes the NULL) that specifies the identity of the party placing the call. If the content of the identifier is acceptable and a path is available, the service provider passes the identifier along to the called party to indicate the identity of the calling party. 
</dd>
</dl>
<h4>Remarks</h4>
<p>
Device-specific extensions should use the <b>DevSpecific </b>(<b>dwDevSpecificSize</b> and <b>dwDevSpecificOffset</b>) variably sized area of this data structure. </p>
<p>
This structure is used as a parameter to <b>lineMakeCall</b> when setting up a call. Its fields allow the application to specify the quality of service requested from the network as well as a variety of ISDN call-setup parameters. If no <b>LINECALLPARAMS</b> structure is supplied to <b>lineMakeCall</b>, a default POTS voice-grade call is requested with the default values listed above. </p>
<p>
<b>Note</b>&nbsp;&nbsp;The fields <b>DialParams</b> through <b>dwDevSpecificOffset</b> are ignored when an <i>lpCallParams</i> parameter is specified with the <b>lineOpen </b>function. </p>
<p>
The members <b>dwPredictiveAutoTransferStates</b> through <b>dwCallingPartyIDOffset</b> are available only to applications that open the line device with an API version of 2.0 or later. </p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Version:</b> Use TAPI version 1.4 and later.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in tapi.h.</p>
<h4>See Also</h4>
<p>
<a href="func1_6o8i.htm"><b>lineBlindTransfer</b></a>, <a href="struc2_30mq.htm"><b>LINEDEVCAPS</b></a>, <a href="struc2_5u9e.htm"><b>LINEDIALPARAMS</b></a>, <a href="func1_6ckn.htm"><b>lineGetDevConfig</b></a>, <a href="func1_99r8.htm"><b>lineGetID</b></a>, <a href="func1_0fsc.htm"><b>lineMakeCall</b></a>, <a href="func2_2lny.htm"><b>lineOpen</b></a>, <a href="func2_5qyb.htm"><b>lineTranslateAddress</b></a>, <a href="struc2_7302.htm"><b>LINETRANSLATEOUTPUT</b></a>, <a href="struc2_90xe.htm"><b>VARSTRING</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

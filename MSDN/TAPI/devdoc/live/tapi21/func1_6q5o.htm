<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>lineDeallocateCall</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_linedeallocatecall"></a>lineDeallocateCall</h1>
<p>
The <b>lineDeallocateCall</b> function deallocates the specified call handle. </p>
<pre><code><b>LONG lineDeallocateCall(
  HCALL</b><i> hCall  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCall</i> </dt>
<dd>
The call handle to be deallocated. An application with monitoring privileges for a call can always deallocate its handle for that call. An application with owner privilege for a call can deallocate its handle unless it is the sole owner of the call and the call is not in the <i>idle</i> state. The call handle is no longer valid after it has been deallocated. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: </p>
<p>
LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALCALLSTATE, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED.</p>
<h4>Remarks</h4>
<p>
The deallocation does not affect the call state of the physical call. It does, however, release internal resources related to the call. </p>
<p>
In API versions earlier than 2.0, if the application is the sole owner of a call and the call is not in the <i>idle</i> state, LINEERR_INVALCALLSTATE is returned. In this case, the application can first drop the call using <a href="func1_0zhs.htm"><b>lineDrop</b></a> and deallocate its call handle afterwards. An application that has monitor privilege for a call can always deallocate its handle for the call. </p>
<p>
In API versions 2.0 or later, the sole owner of the call <i>can</i> deallocate its handle even though the call is not in the <i>idle</i> state. (This allows for distributed control of the call in a client/server environment.) </p>
<p>
<b>Note</b>&nbsp;&nbsp;Be aware that leaving the call without an owner can result in the user being unable to terminate the call if there are monitoring applications open preventing TAPI from calling <b>TSPI_lineCloseCall</b>. Use this feature only if the application can determine that the call can be controlled externally by the user (see LINEADDRCAPFLAGS_CLOSEDROP). </p>
<p>
In API versions earlier than 2.0, when the <b>lineDeallocateCall</b> function deallocates a call handle, it also suspends further processing of any outstanding LINE_REPLY messages for the call. An application must be designed <i>not</i> to wait indefinitely for LINE_REPLY messages for each corresponding call to an asynchronous function if it also uses the <b>lineDeallocateCall</b> function to deallocate handles. </p>
<p>
In API versions 2.0 or later, <b>lineDeallocateCall</b> does not suspend outstanding LINE_REPLY messages; every asynchronous function that returns a <i>dwRequestID</i> to the application always results in the delivery of the associated LINE_REPLY message unless the application calls <b>lineShutdown</b>. </p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Version:</b> Use TAPI version 1.4 and later.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in tapi.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with tapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="quickref_9s85.htm">TAPI Reference Overview</a>, <a href="quickref_7uzp.htm">Basic Telephony Services Reference</a>, <a href="msgs_2ayh.htm">LINE_REPLY</a>, <a href="func1_0zhs.htm"><b>lineDrop</b></a>, <a href="func2_0m26.htm"><b>lineShutdown</b></a></p>
<p>&nbsp;</p></body>
</HTML>

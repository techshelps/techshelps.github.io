<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Processing Assisted Telephony Requests</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_processing_assisted_telephony_requests"></a>Processing Assisted Telephony Requests</h3>
<p>
The process with which requests are delivered and serviced is as follows: 
<ol>
<li>
When TAPI receives an Assisted Telephony request, it checks for a request recipient, that is, an application currently registered to process that type of request. If there is a request recipient, the request is queued, and the highest-priority application that has registered for that request's service is sent a <a href="msgs_7ak4.htm">LINE_REQUEST</a> message. The message notifies the request recipient that a new request has arrived, and it carries an indication of the request's mode. </li>
<li>
If TAPI cannot find a currently running application to process such a request, it tries to launch an application that has been registered as capable of doing so. This registration information is recorded in <b>HandoffPriorities</b> in the registry. TAPI tries to launch applications in the order in which they are listed in the HandoffPriorities section. (See the following step.) <p>
If no application is currently registered, TAPI examines the list of request-processing applications on the associated entry in <b>HandoffPriorities</b>. If the associated line is missing from the file, if there are no applications listed on it, or if none of the applications in the list can be launched, the request is rejected with the error TAPIERR_NOREQUESTRECIPIENT. 
<p>
When a request recipient is launched (whether or not it has been launched by TAPI) it is its duty to call <a href="func2_7i44.htm"><b>lineRegisterRequestRecipient</b></a> during the startup process and register itself as a request recipient. 
</li>
<li>
If one or more applications are listed in the entry, TAPI begins with the first listed application (highest priority), and attempts to launch it using the <b>CreateProcess</b> function. If the attempt to launch the application fails, TAPI attempts to launch the next application in the list. When any application launches successfully, TAPI simply queues the request and returns a success indication to the application even though the request hasn't yet been signaled to the request recipient. <p>
After the request recipient application is launched, it calls <b>lineRegisterRequestRecipient</b>, which causes a <a href="msgs_7ak4.htm">LINE_REQUEST</a> message to be sent, signaling that the request is queued. If for some reason the launched application never registers, the request remains queued and remains in the queue indefinitely until an application registers for that type of request. 
</li>
<li>
If TAPI finds such a registered application already running or successfully launches one, it queues the request, sending a LINE_REQUEST message to the server application, and returns a success indication for the function call to the Assisted Telephony application. This success message states only that the request has been accepted and queued, not that it has been successfully executed. </li>
</ol>
<p>
When the server application is ready to process a request, it calls the <a href="func1_1vw4.htm"><b>lineGetRequest</b></a> function. This lets it receive any information it needs, such as an address to dial. It then processes the request, using the TAPI functions (such as <a href="func1_0fsc.htm"><b>lineMakeCall</b></a> and <a href="func1_0zhs.htm"><b>lineDrop</b></a>) that would otherwise be used to place the call. Invoking <b>lineGetRequest</b> removes the request from TAPI, and the request parameters are copied in an application-allocated request buffer. The size and interpretation of the contents of the buffer depend on the request mode. </p>
<p>
The server must ensure that it uses the correct parameters when executing requests. When doing so, these steps are followed: 
<ol>
<li>
The request recipient first receives a <a href="msgs_7ak4.htm">LINE_REQUEST</a> message informing it that requests can exist for it in the request queue. This tells the application to call <a href="func1_1vw4.htm"><b>lineGetRequest</b></a> and keep calling it until the queue is drained (if the request is for making a new call), or to drop an existing call. This message does not contain the parameters for the request, except in the case of a request to drop an existing call. </li>
<li>
If the request is to make a new call, the Assisted Telephony server uses the <b>lineGetRequest</b> function to retrieve the full request, which includes the request's parameters. The server now has all the information it needs, such as the number to dial or the identification of the maker of the request. First, however, the server must allocate the memory needed to store this information. </li>
<li>
Finally, the server executes the request by invoking the appropriate TAPI function or set of functions. </li>
</ol>
<p>
If TAPI cannot launch an application capable of serving as a request recipient, the Assisted Telephony call fails and returns the error TAPIERR_NOREQUESTRECIPIENT. </p>
<p>&nbsp;</p></body>
</HTML>

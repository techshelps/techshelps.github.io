<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LINEDEVCAPS</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_linedevcaps_str"></a>LINEDEVCAPS</h1>
<p>
The <b>LINEDEVCAPS</b> structure describes the capabilities of a line device. </p>
<pre><code>typedef struct linedevcaps_tag {
    DWORD  dwTotalSize;
    DWORD  dwNeededSize;
    DWORD  dwUsedSize;

    DWORD  dwProviderInfoSize;
    DWORD  dwProviderInfoOffset;

    DWORD  dwSwitchInfoSize;
    DWORD  dwSwitchInfoOffset;

    DWORD  dwPermanentLineID;
    DWORD  dwLineNameSize;
    DWORD  dwLineNameOffset;
    DWORD  dwStringFormat; 
    DWORD  dwAddressModes;
    DWORD  dwNumAddresses;
    DWORD  dwBearerModes;
    DWORD  dwMaxRate;
    DWORD  dwMediaModes;

    DWORD  dwGenerateToneModes;
    DWORD  dwGenerateToneMaxNumFreq;
    DWORD  dwGenerateDigitModes;
    DWORD  dwMonitorToneMaxNumFreq;
    DWORD  dwMonitorToneMaxNumEntries;
    DWORD  dwMonitorDigitModes;
    DWORD  dwGatherDigitsMinTimeout;
    DWORD  dwGatherDigitsMaxTimeout;

    DWORD  dwMedCtlDigitMaxListSize;
    DWORD  dwMedCtlMediaMaxListSize;
    DWORD  dwMedCtlToneMaxListSize;
    DWORD  dwMedCtlCallStateMaxListSize;

    DWORD  dwDevCapFlags;
    DWORD  dwMaxNumActiveCalls;
    DWORD  dwAnswerMode;
    DWORD  dwRingModes;
    DWORD  dwLineStates;

    DWORD  dwUUIAcceptSize;
    DWORD  dwUUIAnswerSize;
    DWORD  dwUUIMakeCallSize;
    DWORD  dwUUIDropSize;
    DWORD  dwUUISendUserUserInfoSize;
    DWORD  dwUUICallInfoSize;

  LINEDIALPARAMS  MinDialParams;
  LINEDIALPARAMS  MaxDialParams;
  LINEDIALPARAMS  DefaultDialParams;

    DWORD  dwNumTerminals;
    DWORD  dwTerminalCapsSize;
    DWORD  dwTerminalCapsOffset;
    DWORD  dwTerminalTextEntrySize;
    DWORD  dwTerminalTextSize;
    DWORD  dwTerminalTextOffset;

    DWORD  dwDevSpecificSize;
    DWORD  dwDevSpecificOffset;

    DWORD  dwLineFeatures;

    DWORD  dwSettableDevStatus;
    DWORD  dwDeviceClassesSize;
    DWORD  dwDeviceClassesOffset;
} LINEDEVCAPS, FAR *LPLINEDEVCAPS; 
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>dwTotalSize</b> </dt>
<dd>
The total size in bytes allocated to this data structure. </dd>
<dt>
<b>dwNeededSize</b> </dt>
<dd>
The size in bytes for this data structure that is needed to hold all the returned information. </dd>
<dt>
<b>dwUsedSize</b> </dt>
<dd>
The size in bytes of the portion of this data structure that contains useful information. </dd>
<dt>
<b>dwProviderInfoSize</b> </dt>
<dt>
<b>dwProviderInfoOffset</b> </dt>
<dd>
The size in bytes of the variably sized field containing service provider information, and the offset in bytes from the beginning of this data structure. The <b>dwProviderInfoSize/Offset</b> member is intended to provide information about the provider hardware and/or software, such as the vendor name and version numbers of hardware and software. This information can be useful when a user needs to call customer service with problems regarding the provider. </dd>
<dt>
<b>dwSwitchInfoSize</b> </dt>
<dt>
<b>dwSwitchInfoOffset</b> </dt>
<dd>
The size in bytes of the variably sized device field containing switch information, and the offset in bytes from the beginning of this data structure. The <b>dwSwitchInfoSize/Offset</b> member is intended to provide information about the switch to which the line device is connected, such as the switch manufacturer, the model name, the software version, and so on. This information can be useful when a user needs to call customer service with problems regarding the switch. </dd>
<dt>
<b>dwPermanentLineID</b> </dt>
<dd>
The permanent <b>DWORD</b> identifier by which the line device is known in the system's configuration. It is a permanent name for the line device. This permanent name (as opposed to <i>dwDevice ID</i>) does not change as lines are added or removed from the system. It can therefore be used to link line-specific information in INI files (or other files) in a way that is not affected by adding or removing other lines. </dd>
<dt>
<b>dwLineNameSize</b> </dt>
<dt>
<b>dwLineNameOffset</b> </dt>
<dd>
The size in bytes of the variably sized device field containing a user configurable name for this line device, and the offset in bytes from the beginning of this data structure. This name can be configured by the user when configuring the line device's service provider, and is provided for the user's convenience. </dd>
<dt>
<b>dwStringFormat</b> </dt>
<dd>
The string format used with this line device. This member uses the following STRINGFORMAT_ constants: 
<dl>
<dt>
STRINGFORMAT_ASCII </dt>
<dd>
The ASCII string format using one byte per character. </dd>
<dt>
STRINGFORMAT_DBCS </dt>
<dd>
The DBCS string format using one or two bytes per character. </dd>
<dt>
STRINGFORMAT_UNICODE </dt>
<dd>
The Unicode string format using two bytes per character. </dd>
</dl>
</dd>
<dt>
<b>dwAddressModes</b> </dt>
<dd>
The mode by which the originating address is specified. This member uses the LINEADDRESSMODE_ constants. </dd>
<dt>
<b>dwNumAddresses</b> </dt>
<dd>
The number of addresses associated with this line device. Individual addresses are referred to by address identifiers. Address identifiers range from zero to one less than the value indicated by <b>dwNumAddresses</b>. </dd>
<dt>
<b>dwBearerModes</b> </dt>
<dd>
Flag array that indicates the different bearer modes that the address is able to support. This member uses the following LINEBEARERMODE_ constants: 
<dl>
<dt>
LINEBEARERMODE_VOICE </dt>
<dd>
A regular 3.1 kHz analog voice-grade bearer service. Bit integrity is not assured. Voice can support fax and modem media modes. </dd>
<dt>
LINEBEARERMODE_SPEECH </dt>
<dd>
Corresponds to G.711 speech transmission on the call. The network may use processing techniques such as analog transmission, echo cancellation and compression/decompression. Bit integrity is not assured. Speech is not intended to support fax and modem media modes. </dd>
<dt>
LINEBEARERMODE_MULTIUSE </dt>
<dd>
The multiuse mode defined by ISDN. </dd>
<dt>
LINEBEARERMODE_DATA </dt>
<dd>
The unrestricted data transfer on the call. The data rate is specified separately. </dd>
<dt>
LINEBEARERMODE_ALTSPEECHDATA </dt>
<dd>
The alternate transfer of speech or unrestricted data on the same call (ISDN). </dd>
<dt>
LINEBEARERMODE_NONCALLSIGNALING </dt>
<dd>
Corresponds to a non-call-associated signaling connection from the application to the service provider or switch (treated as a "media stream" by the Telephony API). </dd>
<dt>
LINEBEARERMODE_PASSTHROUGH </dt>
<dd>
When a call is active in LINEBEARERMODE_PASSTHROUGH, the service provider gives direct access to the attached hardware for control by the application. This mode is used primarily by applications desiring temporary direct control over asynchronous modems, accessed through the Win32 comm functions, for the purpose of configuring or using special features not otherwise supported by the service provider. </dd>
</dl>
</dd>
<dt>
<b>dwMaxRate</b> </dt>
<dd>
Contains the maximum data rate in bits per second for information exchange over the call. </dd>
<dt>
<b>dwMediaModes</b> </dt>
<dd>
Flag array that indicates the different media modes the address is able to support. This member uses the following LINEMEDIAMODE_ constants: 
<dl>
<dt>
LINEMEDIAMODE_UNKNOWN </dt>
<dd>
A media stream exists but its mode is not known. This corresponds to a call with an unclassified media type. In typical analog telephony environments, an incoming call's media mode may be unknown until after the call has been answered and the media stream filtered to make a determination. </dd>
<dt>
LINEMEDIAMODE_INTERACTIVEVOICE </dt>
<dd>
The presence of voice energy on the call and the call is treated as an interactive call with humans on both ends. </dd>
<dt>
LINEMEDIAMODE_AUTOMATEDVOICE </dt>
<dd>
The presence of voice energy on the call and the voice is locally handled by an automated application. </dd>
<dt>
LINEMEDIAMODE_DATAMODEM </dt>
<dd>
A data modem session on the call. </dd>
<dt>
LINEMEDIAMODE_G3FAX </dt>
<dd>
A group 3 fax is being sent or received over the call. </dd>
<dt>
LINEMEDIAMODE_G4FAX </dt>
<dd>
A group 4 fax is being sent or received over the call. </dd>
<dt>
LINEMEDIAMODE_TDD </dt>
<dd>
A TDD (Telephony Devices for the Deaf) session on the call. </dd>
<dt>
LINEMEDIAMODE_DIGITALDATA </dt>
<dd>
Digital data being transmitted over the call. </dd>
<dt>
LINEMEDIAMODE_TELETEX </dt>
<dd>
A teletex session on the call. Teletex is one of the telematic services. </dd>
<dt>
LINEMEDIAMODE_VIDEOTEX </dt>
<dd>
A videotex session on the call. Videotex is one of the telematic services. </dd>
<dt>
LINEMEDIAMODE_TELEX </dt>
<dd>
A telex session on the call. Telex is one of the telematic services. </dd>
<dt>
LINEMEDIAMODE_MIXED </dt>
<dd>
A mixed session on the call. Mixed is one of the ISDN telematic services. </dd>
<dt>
LINEMEDIAMODE_ADSI </dt>
<dd>
An ADSI (Analog Display Services Interface) session on the call. </dd>
<dt>
LINEMEDIAMODE_VOICEVIEW </dt>
<dd>
The media mode of the call is VoiceView. </dd>
</dl>
</dd>
<dt>
<b>dwGenerateToneModes</b> </dt>
<dd>
The different kinds of tones that can be generated on this line. This member uses the following LINETONEMODE_ constants: 
<dl>
<dt>
LINETONEMODE_CUSTOM </dt>
<dd>
The tone is a custom tone defined by the specified frequencies. </dd>
<dt>
LINETONEMODE_RINGBACK </dt>
<dd>
The tone to be generated is a ringback tone. </dd>
<dt>
LINETONEMODE_BUSY </dt>
<dd>
The tone is a standard (station) busy tone. </dd>
<dt>
LINETONEMODE_BEEP </dt>
<dd>
The tone is a beep, as used to announce the beginning of a recording. </dd>
<dt>
LINETONEMODE_BILLING </dt>
<dd>
The tone is a billing information tone such as a credit card prompt tone. </dd>
</dl>
</dd>
<dt>
<b>dwGenerateToneMaxNumFreq</b> </dt>
<dd>
Contains the maximum number of frequencies that can be specified in describing a general tone using the <a href="struc2_7kky.htm"><b>LINEGENERATETONE</b></a> data structure when generating a tone using <a href="func1_899h.htm"><b>lineGenerateTone</b></a>. A value of 0 indicates that tone generation is not available. </dd>
<dt>
<b>dwGenerateDigitModes</b> </dt>
<dd>
Specifies the digit modes than can be generated on this line. This member uses the following LINEDIGITMODE_ constants: 
<dl>
<dt>
LINEDIGITMODE_PULSE </dt>
<dd>
Generate digits as pulse/rotary pulse sequences. </dd>
<dt>
LINEDIGITMODE_DTMF </dt>
<dd>
Generate digits as DTMF tones. </dd>
</dl>
</dd>
<dt>
<b>dwMonitorToneMaxNumFreq</b> </dt>
<dd>
Contains the maximum number of frequencies that can be specified in describing a general tone using the <a href="struc2_231u.htm"><b>LINEMONITORTONE</b></a> data structure when monitoring a general tone using <a href="func2_3cqb.htm"><b>lineMonitorTones</b></a>. A value of 0 indicates that tone monitor is not available. </dd>
<dt>
<b>dwMonitorToneMaxNumEntries</b> </dt>
<dd>
Contains the maximum number of entries that can be specified in a tone list to <b>lineMonitorTones</b>. </dd>
<dt>
<b>dwMonitorDigitModes</b> </dt>
<dd>
Specifies the digit modes than can be detected on this line. This member uses the following LINEDIGITMODE_ constants: 
<dl>
<dt>
LINEDIGITMODE_PULSE </dt>
<dd>
Detect digits as audible clicks that are the result of rotary pulse sequences. </dd>
<dt>
LINEDIGITMODE_DTMF </dt>
<dd>
Detect digits as DTMF tones. </dd>
<dt>
LINEDIGITMODE_DTMFEND </dt>
<dd>
Detect the down edges of digits detected as DTMF tones. </dd>
</dl>
</dd>
<dt>
<b>dwGatherDigitsMinTimeout</b> </dt>
<dt>
<b>dwGatherDigitsMaxTimeout</b> </dt>
<dd>
These members contain the minimum and maximum values in milliseconds that can be specified for both the first digit and inter-digit timeout values used by <a href="func1_4vlf.htm"><b>lineGatherDigits</b></a>. If both these members are zero, timeouts are not supported. 
<dl>
<dt>
<b>dwMedCtlDigitMaxListSize</b> </dt>
<dt>
<b>dwMedCtlMediaMaxListSize</b> </dt>
<dt>
<b>dwMedCtlToneMaxListSize</b> </dt>
<dt>
<b>dwMedCtlCallStateMaxListSize</b> </dt>
<dd>
These members contain the maximum number of entries that can be specified in the digit list, the media list, the tone list, and the call state list parameters of <a href="func2_4hbg.htm"><b>lineSetMediaControl</b></a> respectively. </dd>
</dl>
</dd>
<dt>
<b>dwDevCapFlags</b> </dt>
<dd>
Specifies various Boolean device capabilities. This member uses the following LINEDEVCAPFLAGS_ constants: 
<dl>
<dt>
LINEDEVCAPFLAGS_CROSSADDRCONF </dt>
<dd>
Specifies whether calls on different addresses on this line can be conferenced. </dd>
<dt>
LINEDEVCAPFLAGS_HIGHLEVCOMP </dt>
<dd>
Specifies whether high-level compatibility information elements are supported on this line. </dd>
<dt>
LINEDEVCAPFLAGS_LOWLEVCOMP </dt>
<dd>
Specifies whether low-level compatibility information elements are supported on this line. </dd>
<dt>
LINEDEVCAPFLAGS_MEDIACONTROL </dt>
<dd>
Specifies whether media control operations are available for calls at this line. </dd>
<dt>
LINEDEVCAPFLAGS_MULTIPLEADDR </dt>
<dd>
Specifies whether <a href="func1_0fsc.htm"><b>lineMakeCall</b></a> or <a href="func1_06cs.htm"><b>lineDial</b></a> are able to deal with multiple addresses at once (such as for inverse multiplexing). </dd>
<dt>
LINEDEVCAPFLAGS_CLOSEDROP </dt>
<dd>
Specifies what happens when an open line is closed while the application has calls active on the line. If TRUE, the service provider drops (clears) all active calls on the line when the last application that has opened the line closes it with <a href="func1_9sth.htm"><b>lineClose</b></a>. If FALSE, the service provider does not drop active calls in such cases. Instead, the calls remain active and under control of external device(s). A service provider typically sets this bit to FALSE if there is some other device that can keep the call alive. For example, if an analog line has the computer and phone set both connect directly to them in a party-line configuration, the offhook phone automatically keeps the call active even after the computer powers down. 
<p>
Applications should check this flag to determine whether to warn the user (with an OK/Cancel dialog box) that active calls will be lost. 
</dd>
<dt>
LINEDEVCAPFLAGS_DIALBILLING </dt>
<dd>
</dd>
<dt>
LINEDEVCAPFLAGS_DIALQUIET </dt>
<dd>
</dd>
<dt>
LINEDEVCAPFLAGS_DIALDIALTONE </dt>
<dd>
These flags indicate whether the "$", "@", or "W" dialable string modifier is supported for a given line device. It is TRUE if the modifier is supported; otherwise, FALSE. The "?" (prompt user to continue dialing) is never supported by a line device. These flags allow an application to determine "up front" which modifiers would result in the generation of a LINEERR. The application has the choice of pre-scanning dialable strings for unsupported characters, or passing the "raw" string from <a href="func2_5qyb.htm"><b>lineTranslateAddress</b></a> directly to the provider as part of <a href="func1_0fsc.htm"><b>lineMakeCall</b></a> (<a href="func1_06cs.htm"><b>lineDial</b></a>, and so on) and let the function generate an error to tell it which unsupported modifier occurs first in the string. </dd>
</dl>
</dd>
<dt>
<b>dwMaxNumActiveCalls</b> </dt>
<dd>
Provides the maximum number of (minimum bandwidth) calls that can be active (connected) on the line at any one time. The actual number of active calls may be lower if higher bandwidth calls have been established on the line. </dd>
<dt>
<b>dwAnswerMode</b> </dt>
<dd>
Specifies the effect on the active call when answering another offering call on a line device. This member uses the following LINEANSWERMODE_ constants: 
<dl>
<dt>
LINEANSWERMODE_NONE </dt>
<dd>
Answering another call on the same line has no effect on the existing active call(s) on the line. </dd>
<dt>
LINEANSWERMODE_DROP </dt>
<dd>
The currently active call is automatically dropped. </dd>
<dt>
LINEANSWERMODE_HOLD </dt>
<dd>
The currently active call is automatically placed on hold. </dd>
</dl>
</dd>
<dt>
<b>dwRingModes</b> </dt>
<dd>
Contains the number of different ring modes that can be reported in the <a href="msgs_7het.htm">LINE_LINEDEVSTATE</a> message with the <i>ringing</i> indication. Different ring modes range from one to <b>dwRingModes</b>. Zero indicates no ring. </dd>
<dt>
<b>dwLineStates</b> </dt>
<dd>
Specifies the different line status components for which the application may be notified in a LINE_LINEDEVSTATE message on this line. This member uses the following LINEDEVSTATE_ constants: 
<dl>
<dt>
LINEDEVSTATE_OTHER </dt>
<dd>
Device-status items other than those listed below have changed. The application should check the current device status to determine which items have changed. </dd>
<dt>
LINEDEVSTATE_RINGING </dt>
<dd>
The switch tells the line to alert the user. Service providers notify applications on each ring cycle by sending LINE_LINEDEVSTATE messages containing this constant. For example, in the United States, service providers send a message with this constant every six seconds. </dd>
<dt>
LINEDEVSTATE_CONNECTED </dt>
<dd>
The line was previously disconnected and is now connected to TAPI. </dd>
<dt>
LINEDEVSTATE_DISCONNECTED </dt>
<dd>
This line was previously connected and is now disconnected from TAPI. </dd>
<dt>
LINEDEVSTATE_MSGWAITON </dt>
<dd>
The "message waiting" indicator is turned on. </dd>
<dt>
LINEDEVSTATE_MSGWAITOFF </dt>
<dd>
The "message waiting" indicator is turned off. </dd>
<dt>
LINEDEVSTATE_NUMCOMPLETIONS </dt>
<dd>
The number of outstanding call completions on the line device has changed. </dd>
<dt>
LINEDEVSTATE_INSERVICE </dt>
<dd>
The line is connected to TAPI. This happens when TAPI is first activated or when the line wire is physically plugged in and in service at the switch while TAPI is active. </dd>
<dt>
LINEDEVSTATE_OUTOFSERVICE </dt>
<dd>
The line is out of service at the switch or physically disconnected. TAPI cannot be used to operate on the line device. </dd>
<dt>
LINEDEVSTATE_MAINTENANCE </dt>
<dd>
Maintenance is being performed on the line at the switch. TAPI cannot be used to operate on the line device. </dd>
<dt>
LINEDEVSTATE_OPEN </dt>
<dd>
The line has been opened. </dd>
<dt>
LINEDEVSTATE_CLOSE </dt>
<dd>
The line has been closed. </dd>
<dt>
LINEDEVSTATE_NUMCALLS </dt>
<dd>
The number of calls on the line device has changed. </dd>
<dt>
LINEDEVSTATE_TERMINALS </dt>
<dd>
The terminal settings have changed. </dd>
<dt>
LINEDEVSTATE_ROAMMODE </dt>
<dd>
The roam mode of the line device has changed. </dd>
<dt>
LINEDEVSTATE_BATTERY </dt>
<dd>
The battery level has changed significantly (cellular). </dd>
<dt>
LINEDEVSTATE_SIGNAL </dt>
<dd>
The signal level has changed significantly (cellular). </dd>
<dt>
LINEDEVSTATE_DEVSPECIFIC </dt>
<dd>
The line's device-specific information has changed. </dd>
<dt>
LINEDEVSTATE_REINIT </dt>
<dd>
Items have changed in the configuration of line devices. To become aware of these changes (such as for the appearance of new line devices), the application should reinitialize its use of TAPI. The <i>hDevice</i> parameter is left NULL for this state change as it applies to any of the lines in the system. </dd>
<dt>
LINEDEVSTATE_LOCK </dt>
<dd>
The locked status of the line device has changed. </dd>
<dt>
LINEDEVSTATE_CAPSCHANGE </dt>
<dd>
Indicates that due to configuration changes made by the user or other circumstances one or more of the members in the <b>LINEDEVCAPS</b> structure for the address have changed. The application should use <a href="func1_22nn.htm"><b>lineGetDevCaps</b></a> to read the updated structure. If a service provider sends a <a href="msgs_7het.htm">LINE_LINEDEVSTATE</a> message containing this value to TAPI, TAPI passes it along to applications that have negotiated TAPI version 1.4 or later; applications negotiating a previous API version receive LINE_LINEDEVSTATE messages specifying LINEDEVSTATE_REINIT, requiring them to shutdown and reinitialize their connection to TAPI in order to obtain the updated information. </dd>
<dt>
LINEDEVSTATE_CONFIGCHANGE </dt>
<dd>
Indicates that configuration changes have been made to one or more of the media devices associated with the line device. The application, if it desires, may use <a href="func1_6ckn.htm"><b>lineGetDevConfig</b></a> to read the updated information. If a service provider sends a <a href="msgs_7het.htm">LINE_LINEDEVSTATE</a> message containing this value to TAPI, TAPI passes it along to applications that have negotiated TAPI version 1.4 or later; applications negotiating a previous API version do not receive any notification. </dd>
<dt>
LINEDEVSTATE_TRANSLATECHANGE </dt>
<dd>
Indicates that due to configuration changes made by the user or other circumstances one or more of the members in the <a href="struc2_1pf6.htm"><b>LINETRANSLATECAPS</b></a> structure have changed. The application should use <a href="func1_09o3.htm"><b>lineGetTranslateCaps</b></a> to read the updated structure. If a service provider sends a <a href="msgs_7het.htm">LINE_LINEDEVSTATE</a> message containing this value to TAPI, TAPI passes it along to applications that have negotiated TAPI version 1.4 or later; applications negotiating a previous API version receive LINE_LINEDEVSTATE messages specifying LINEDEVSTATE_REINIT, requiring them to shutdown and reinitialize their connection to TAPI in order to obtain the updated information. </dd>
<dt>
LINEDEVSTATE_COMPLCANCEL </dt>
<dd>
Indicates that the call completion identified by the completion identifier contained in the <i>dwParam2</i> parameter of the <a href="msgs_7het.htm">LINE_LINEDEVSTATE</a> message has been externally canceled and is no longer considered valid (if that value were to be passed in a subsequent call to <a href="func2_7y7g.htm"><b>lineUncompleteCall</b></a>, the function would fail with LINEERR_INVALCOMPLETIONID). If a service provider sends a LINE_LINEDEVSTATE message containing this value to TAPI, TAPI passes it along to applications that have negotiated TAPI version 1.4 or later; applications negotiating a previous API version do not receive any notification. </dd>
<dt>
LINEDEVSTATE_REMOVED </dt>
<dd>
Indicates that the device is being removed from the system by the service provider (most likely through user action, through a control panel or similar utility). Normally, a <a href="msgs_7het.htm">LINE_LINEDEVSTATE</a> message with this value is immediately followed by a LINE_CLOSE message on the device. Subsequent attempts to access the device prior to TAPI being reinitialized result in LINEERR_NODEVICE being returned to the application. If a service provider sends a LINE_LINEDEVSTATE message containing this value to TAPI, TAPI passes it along to applications that have negotiated TAPI version 1.4 or later; applications negotiating a previous API version do not receive any notification. </dd>
</dl>
</dd>
<dt>
<b>dwUUIAcceptSize</b> </dt>
<dd>
Specifies the maximum size of user-user information that can be sent during a call accept. </dd>
<dt>
<b>dwUUIAnswerSize</b> </dt>
<dd>
Specifies the maximum size of user-user information that can be sent during a call answer. </dd>
<dt>
<b>dwUUIMakeCallSize</b> </dt>
<dd>
Specifies the maximum size of user-user information that can be sent during a make call. </dd>
<dt>
<b>dwUUIDropSize</b> </dt>
<dd>
Specifies the maximum size of user-user information that can be sent during a call drop. </dd>
<dt>
<b>dwUUISendUserUserInfoSize</b> </dt>
<dd>
Specifies the maximum size of user-user information that can be sent separately any time during a call with <a href="func2_2ui7.htm"><b>lineSendUserUserInfo</b></a>. </dd>
<dt>
<b>dwUUICallInfoSize</b> </dt>
<dd>
Specifies the maximum size of user-user information that can be received in the <a href="struc1_0twy.htm"><b>LINECALLINFO</b></a> structure. </dd>
<dt>
<b>MinDialParams</b> </dt>
<dt>
<b>MaxDialParams</b> </dt>
<dd>
These members contain the minimum and maximum values in milliseconds for the dial parameters that can be set for calls on this line. Dialing parameters can be set to values in this range. The granularity of the actual settings is service provider-specific. </dd>
<dt>
<b>DefaultDialParams</b> </dt>
<dd>
Contains the default dial parameters used for calls on this line. These parameter values can be overridden on a per-call basis. </dd>
<dt>
<b>dwNumTerminals</b> </dt>
<dd>
The number of terminals that can be set for this line device, its addresses, or its calls. Individual terminals are referred to by terminal IDs and range from zero to one less than the value indicated by <b>dwNumTerminals</b>. </dd>
<dt>
<b>dwTerminalCapsSize</b> </dt>
<dt>
<b>dwTerminalCapsOffset</b> </dt>
<dd>
The size in bytes and the offset in bytes from the beginning of this data structure of the variably sized device field containing an array with entries of type <a href="struc2_4elu.htm"><b>LINETERMCAPS</b></a>. This array is indexed by terminal IDs, in the range from zero to <b>dwNumTerminals</b> minus one. Each entry in the array specifies the terminal device capabilities of the corresponding terminal. </dd>
<dt>
<b>dwTerminalTextEntrySize</b> </dt>
<dd>
The size in bytes of each of the terminal text descriptions pointed at by <b>dwTerminalTextSize/Offset</b>. </dd>
<dt>
<b>dwTerminalTextSize</b> </dt>
<dt>
<b>dwTerminalTextOffset</b> </dt>
<dd>
The size in bytes of the variably sized field containing descriptive text about each of the line's available terminals, and the offset in bytes from the beginning of this data structure. Each message is <b>dwTerminalTextEntrySize</b> bytes long. The string format of these textual descriptions is indicated by <b>dwStringFormat</b> in the line's device capabilities. </dd>
<dt>
<b>dwDevSpecificSize</b> </dt>
<dt>
<b>dwDevSpecificOffset</b> </dt>
<dd>
The size in bytes of the variably sized device-specific field, and the offset in bytes from the beginning of this data structure. </dd>
<dt>
<b>dwLineFeatures</b> </dt>
<dd>
Specifies the features available for this line using the LINEFEATURE_ constants. Invoking a supported feature requires the line to be in the proper state and the underlying line device to be opened in a compatible mode. A zero in a bit position indicates that the corresponding feature is never available. A one indicates that the corresponding feature may be available if the line is in the appropriate state for the operation to be meaningful. This member allows an application to discover which line features can be (and which can never be) supported by the device. </dd>
<dt>
<b>dwSettableDevStatus</b> </dt>
<dd>
The LINEDEVSTATUS_ values that can be modified using <a href="func2_5fsj.htm"><b>lineSetLineDevStatus</b></a>. </dd>
<dt>
<b>dwDeviceClassesSize</b> </dt>
<dt>
<b>dwDeviceClassesOffset</b> </dt>
<dd>
Length in bytes and offset from the beginning of <b>LINEDEVCAPS</b> of a string consisting of the device class identifiers supported on one or more addresses on this line for use with <a href="func1_99r8.htm"><b>lineGetID</b></a>, separated by NULLs; the last identifier in the list is followed by two NULLs. 
</dd>
</dl>
<h4>Remarks</h4>
<p>
Device-specific extensions should use the <b>DevSpecific </b>(<b>dwDevSpecificSize</b> and <b>dwDevSpecificOffset</b>) variably sized area of this data structure. </p>
<p>
Older applications are compiled without new members in the <b>LINEDEVCAPS</b> structure, and using a <b>SIZEOF LINEDEVCAPS </b>smaller than the new size. The application passes in a <i>dwAPIVersion</i> parameter with the <a href="func1_22nn.htm"><b>lineGetDevCaps</b></a> function, which can be used for guidance by TAPI in handling this situation. If the application passes in a <b>dwTotalSize</b> member less than the size of the fixed portion of the structure as defined in the specified <b>dwAPIVersion</b>, LINEERR_STRUCTURETOOSMALL is returned. If sufficient memory has been allocated by the application, before calling <b>TSPI_lineGetDevCaps</b>, TAPI sets the <b>dwNeededSize</b> and <b>dwUsedSize</b> members to the fixed size of the structure as it existed in the specified API version. </p>
<p>
New applications must be cognizant of the API version negotiated, and not examine the contents of members in the fixed portion beyond the original end of the fixed portion of the structure for the negotiated API version. </p>
<p>
If the LINEBEARERMODE_DATA bit is set in the <b>dwBearerModes</b> member, the <b>dwMaxRate</b> member indicates the maximum rate of digital transmission on the bearer channel. The <b>dwMaxRate</b> member of the <b>LINEDEVCAPS</b> structure can contain valid values even if the <b>dwBearerModes</b> member of the <b>LINEDEVCAPS</b> structure is <i>not</i> set to LINEBEARERMODE_DATA. </p>
<p>
If LINEBEARERMODE_DATA is not set in <b>dwBearerModes</b>, but the LINEBEARERMODE_VOICE value is set and the LINEMEDIAMODE_DATAMODEM value is set in the <b>dwMediaModes</b> member, the <b>dwMaxRate</b> member indicates the maximum SYNCHRONOUS (DCE) bit rate on the phone line for the attached modem or functional equivalent. For example, if the modem's fastest modulation speed is V.32bis at 14,400bps, <b>dwMaxRate</b> equals 14400. This is <i>not</i> the fastest DTE port rate (which would most likely be 38400, 57600, or 115200), but the fastest bit rate the modem supports on the phone line. </p>
<p>
The application must be careful to check to see that LINEBEARERMODE_DATA is <i>not</i> set, to avoid misinterpreting the <b>dwMaxRate</b> member. It is likely to be 64000 or higher if LINEBEARERMODE_DATA is set. </p>
<p>
It should also be noted that if the modem has not been specifically identified (for example, it is a "generic" modem), the figure indicated is a "best guess" based on examination of the modem. </p>
<p>
The members <b>dwSettableDevStatus</b> through <b>dwDeviceClassesOffset</b> are available only to applications that open the line device with an API version of 2.0 or later. </p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Version:</b> Use TAPI version 1.4 and later.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in tapi.h.</p>
<h4>See Also</h4>
<p>
<a href="msgs_7het.htm">LINE_LINEDEVSTATE</a>, <a href="struc1_0twy.htm"><b>LINECALLINFO</b></a>, <a href="func1_9sth.htm"><b>lineClose</b></a>, <a href="func1_06cs.htm"><b>lineDial</b></a>, <a href="func1_4vlf.htm"><b>lineGatherDigits</b></a>, <a href="struc2_7kky.htm"><b>LINEGENERATETONE</b></a>, <a href="func1_899h.htm"><b>lineGenerateTone</b></a>, <a href="func1_22nn.htm"><b>lineGetDevCaps</b></a>, <a href="func1_99r8.htm"><b>lineGetID</b></a>, <a href="func1_09o3.htm"><b>lineGetTranslateCaps</b></a>, <a href="func2_2ui7.htm"><b>lineSendUserUserInfo</b></a>, <a href="func1_0fsc.htm"><b>lineMakeCall</b></a>, <a href="struc2_231u.htm"><b>LINEMONITORTONE</b></a>, <a href="func2_3cqb.htm"><b>lineMonitorTones</b></a>, <a href="func2_4hbg.htm"><b>lineSetMediaControl</b></a>, <a href="struc2_4elu.htm"><b>LINETERMCAPS</b></a>, <a href="func2_5qyb.htm"><b>lineTranslateAddress</b></a>, <a href="struc2_1pf6.htm"><b>LINETRANSLATECAPS</b></a>, <a href="func2_7y7g.htm"><b>lineUncompleteCall</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

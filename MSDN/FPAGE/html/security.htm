<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Security Considerations</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<BODY bgcolor="#FFFFFF" text="#000000" link="#1B55FB" vlink="#BB1CFF" alink="#FF1C2C">


<h1>Security Considerations</h1>

<p>This chapter of the Server Extensions Resource Kit describes general Web hosting
security issues and how FrontPage protects Web server security on UNIX-based Web servers
and on the Internet Information Server (IIS) Web server for Windows NT. This chapter has
three sections: 

<ul>
  <li><a href="#General Security Issues">General Web-Hosting Security Issues</a> </li>
  <li><a href="#UNIX MAIN">FrontPage Security on UNIX-based Systems</a></li>
  <li><a href="#IIS Main">FrontPage Security on IIS Systems</a></li>
</ul>

<h2><a name="General Security Issues">General Web Hosting Security Issues</a></h2>

<p>Regardless of what software you are running, the two major security issues when you
host Web sites from your computer are: 

<ul>
  <li>Protecting your computer from unauthorized users<p>Hosting Web sites, even on an
    intranet, opens your host computer to a wider community of users. <em>Authentication </em>is
    the process of allowing users access to the Web service based on usernames and passwords
    or based on IP addresses. Restricting users by IP address is less secure, because clever
    users can &quot;spoof&quot; an IP address and gain access to the host computer.</p>
  </li>
  <li>Protecting your computer from programs that run on the host computer<p>Programs can run
    on your computer based on the content of a Web site for many reasons. For example:<ul>
      <li>An HTML page that &quot;includes&quot; or &quot;substitutes&quot; another page can cause
        a program to be run on the host computer.</li>
      <li>Marking directories executable to allow a script to run on the host computer can allow a
        program to do anything within the limits of the host computer's resource protection
        scheme. </li>
      <li>Saving HTML in general introduces risk. HTML pages can contain embedded controls,
        scripts, applets, and other programs that can cause programs to run on a host computer.
        Form handlers can introduce a further risk, because users can submit HTML commands from
        within form fields, causing programs to be run when the page containing the form results
        is browsed. (FrontPage form handers do not allow this.)</li>
    </ul>
  </li>
</ul>

<h3>FrontPage Security Strategy</h3>

<p>FrontPage addresses these security issues by using the built-in security mechanisms of
the host computer. Using the FrontPage Server Extensions requires no changes to the host
computer's security method. You do not have to recompile any Web-server programs and there
are no custom filters or other security modifications. 

<ul>
  <li>On UNIX-based Web servers, the server maintains a list of accounts, with usernames and
    passwords, and a list of groups of users with various levels of permissions for using the
    services of the Web server. The accounts and groups maintained by the Web server are
    separate from the list of users and groups with access to the host computer's file system.
    Access to a Web server's content, CGI (Common Gateway Interface) scripts, and
    configuration files is controlled by entries in <em>access files</em>. By creating access
    files throughout the Web server's content, different sets of users, with varying levels of
    permissions, can be given access to different areas of the server. FrontPage relies on
    this mechanism to add FrontPage web administrators, authors, and end-users with the proper
    permissions to the Web server's account list and to protect content and programs in
    FrontPage webs.<p>For a full discussion of FrontPage security on UNIX-based Web servers,
    see <a href="#UNIX MAIN">FrontPage Security on UNIX-based Systems</a>.</p>
  </li>
  <li>On IIS Web Servers, each HTTP request to IIS from a Web browser or the FrontPage client
    runs under a user account on the Windows NT operating system hosting IIS. Windows NT
    maintains account lists of local users and groups and of users and groups in a domain. The
    operations that are performed during the execution of HTTP requests are limited by the
    capabilities granted to that user account on the Windows NT Server. Windows NT File System
    (NTFS) allows the association of an <em>access-control list</em> (<a name="ACL">ACL</a>)
    with any file or folder. An ACL contains users and groups with sets of permissions that
    allow a user or group to read, write, execute, or delete that file or folder. FrontPage
    implements Web security on IIS by changing the ACLs for all files and folders in each
    FrontPage web. <p>For a full discussion of FrontPage security on IIS-based Web servers,
    see <a href="#IIS Main">FrontPage Security on IIS Systems</a>.</p>
  </li>
</ul>

<h2><a name="UNIX MAIN"><b>FrontPage Security on UNIX-based Systems</b></a></h2>

<p><a href="#Unix Security Concepts">UNIX Security Concepts</a></p>

<blockquote>
  <p><a href="#UNIX Security Model">The UNIX Security Model</a><br>
  <a href="#Unix Authentication">UNIX Authentication</a></p>
</blockquote>

<p><a href="#Server Extensions on UNIX Web Servers">The FrontPage Server Extensions on
UNIX Web Servers</a></p>

<blockquote>
  <p><a href="#Server Extensions File Structure">FrontPage Server Extensions File Structure</a><br>
  <a href="#Access File Settings">FrontPage Access File Settings</a><br>
  <a href="#Setting Permissions on Web Content">Setting Permissions on Web Content</a><br>
  <a href="#Setting the Server Extensions to SUID/SGID">Setting the Server Extensions to
  SUID/SGID</a><br>
  <a href="#Modifying Server Configuration File">Modifying the Web Server's Configuration
  File</a><br>
  <a href="#Server Extensions Configuration File">The Server Extensions Configuration File</a><br>
  </p>
</blockquote>

<h3>UNIX <a name="Unix Security Concepts">Security Concepts</a></h3>

<h4><a name="UNIX Security Model">The UNIX Security Model</a></h4>

<p>In the UNIX security model, the Web server maintains a list of accounts, with usernames
and passwords, and a list of groups of users with various levels of permissions to use the
services of the Web server. The accounts and groups maintained by the Web server are
entirely separate from the list of users and groups with access to the host computer's
file system. To fetch files and run scripts and programs on the host computer, the Web
server runs as a UNIX account, typically &quot;www.&quot;</p>

<p>Access to a Web server's content, CGI scripts, and configuration files is controlled by
entries in an <em>access file</em>. On Apache and NCSA Web servers the file is <strong>.htaccess</strong>,
on Netscape servers it is <strong>.nsconfig</strong>, and on CERN it is <strong>.www_acl</strong>.
These files associate users, groups, and IP addresses with various levels of permissions:
GET (read), POST (execute), PUT (write), and DELETE. For example, a FrontPage author would
have permission to use HTTP POST commands (to save new content), and a user with browse
permissions would be permitted to use HTTP GET commands (to read content).</p>

<p>Multiple access files can be stored on a Web server. Each access file will provide
security for the directory containing it and for any of its subdirectories that do not
contain their own access files. By creating access files throughout the web server's
content, different sets of users with varying levels of permissions, can be given access
to different areas of the server.</p>

<p>Because the Web server is running under a UNIX account (such as &quot;www&quot;) any
process it runs and any files that it accesses must be available under the permissions of
that UNIX account. Having all content available under a single UNIX account can cause a
security problem because one user's CGI script could read files in another user's content
area on the server. With write access, as with the FrontPage client, if a user's CGI
script has sufficient permissions to write to a file in the user's own content area, the
CGI script could write or overwrite files in other user's content areas in a multi-hosted
environment.</p>

<p>To address this security issue (which is common to all CGI scripts including the
FrontPage Server Extensions), the SUID (Set User ID) bit of the CGI script's
execute-permissions can be set, forcing the Web server to switch to the UNIX user account
of the owner of the CGI script when the script is run. Because the script owner's account
is not likely to have permission to write to other user's content areas, it protects
against unauthorized writing to files.</p>

<h4>UNIX <a name="Unix Authentication">Authentication</a></h4>

<p>In UNIX authentication, when a user browses to a page on a Web server, the server
receives an HTTP GET request with a username and password. The Web server checks the
user's permissions in the appropriate access file. If the GET cannot be executed under the
user's authentication, the Web server returns a 401 error, indicating that the user is
unauthorized. The client then prompts for a new name and password and resubmits the
request. Once the user is authenticated, the Web server attempts to fetch the content from
the file system. If UNIX does not allow the Web server access to the file for some reason,
it will return a fatal error to the Web server. At this point, the user is not prompted
for a new username.</p>

<p>When a client or Web browser sends an HTTP POST request, as is the case when a
FrontPage author posts to the FrontPage authoring program <strong>author.exe</strong>, the
Web server again checks the user's permissions in the appropriate access file. If the POST
cannot be executed under the user's authentication, the Web server returns a 401 error.
The client then prompts for a new name and password and resubmits the request. Once the
user is authenticated, the Web server tries to run <strong>author.exe</strong>. If the
SUID bit of <strong>author.exe</strong> is set, the process runs as the owner of the file.
Otherwise, <strong>author.exe</strong> runs under the Web server's UNIX account.</p>

<p>UNIX Web servers usually communicate with client programs using Basic Authentication.
When using Basic Authentication, the Web browser (or the FrontPage Explorer) prompts the
user for a username and password. The username and password are then transmitted across
HTTP, lightly encoded using a technique known as <i>UUencoding</i>. (Some Web servers use
a technique known as <em>MD5</em>, but this method is not supported by FrontPage.)</p>

<p>One security risk of Basic Authentication is that usernames and passwords are
transmitted across the network in an easily decoded format. However, Basic Authentication
is the only authentication technique that works through a firewall via a proxy server. </p>

<h3><a name="Server Extensions on UNIX Web Servers">The FrontPage Server Extensions on
UNIX Web Servers</a></h3>

<h4><a name="Server Extensions File Structure">FrontPage Server Extensions File Structure</a></h4>

<p>In FrontPage, there are three kinds of users defined for every FrontPage web:
administrators, authors, and browsers (end-users). All permissions are cumulative; all
authors also have browsing permission, and all administrators have authoring and browsing
permissions.</p>

<p>Each FrontPage web (including each sub-web) contains copies of three executable
scripts. These scripts are created in folders below the top-level folder of a FrontPage
web: <strong>_vti_bin/_vti_adm/admin.exe</strong> for administrative tasks, <strong>_vti_bin/_vti_aut/author.exe</strong>
for authoring FrontPage webs, and <strong>_vti_bin/shtml.exe</strong> for browse-time
FrontPage components such as form handlers. FrontPage performs all authoring and
administrative tasks by sending HTTP POST requests to these scripts.</p>

<p>In FrontPage, the list of administrators, authors and browsers is defined on a per-web
basis. All FrontPage sub-webs either inherit the permissions (list of administrators,
authors and browsers) of the FrontPage root web or use their own, unique permissions. (For
a description of the root web and sub-webs, see <a href="intro.htm#FrontPage Webs">FrontPage
Webs</a>.) As with other CGI programs, the FrontPage Server Extensions must be stored in
directories that are marked &quot;Executable,&quot; indicating that the directories
contain executable files. The <em>document root</em> is the top-level directory in a
FrontPage web. The FrontPage Server Extensions are stored in three directories in each
document root:</p>

<pre>/document root
   /_vti_bin
      shtml.exe
      /_vti_adm
         admin.exe
      /_vti_aut
         author.exe</pre>

<p>The server's configuration file needs to be modified to mark the directories <strong>_vti_bin</strong>,
<strong>_vti_adm</strong>, and <strong>_vti_aut</strong> as executable directories. A Web
server administrator initiates and controls this operation using the FrontPage Server
Administrator. </p>

<p>To reduce the total amount of disk space needed to support FrontPage webs, the
FrontPage scripts stored in the various <strong>_vti_* </strong>directories are stub
executables. They each invoke a full executable file installed in the directory <strong>/usr/local/frontpage/version3.0/exes</strong>.</p>

<h4><a name="Access File Settings">FrontPage Access File Settings</a></h4>

<p>FrontPage creates a directory <strong>_vti_pvt</strong> for the root web and for each
FrontPage sub-web. For each FrontPage web with unique permissions, the<strong> _vti_pvt</strong>
directory contains two files for the FrontPage web that the access file points to: 

<ul>
  <li><strong>service.pwd</strong><i> </i>contains the list of users and passwords for the
    FrontPage web.</li>
  <li><strong>service.grp</strong><i> </i>contains the list of groups (one group for authors
    and one for administrators in FrontPage). </li>
</ul>

<p>On Netscape servers, there are no <strong>service.grp </strong>files. The Netscape
password files are: 

<ul>
  <li><strong>administrators.pwd </strong>for administrators</li>
  <li><strong>authors.pwd </strong>for authors and administrators</li>
  <li><strong>users.pwd</strong> for users, authors, and administrators</li>
</ul>

<p>An access file in the <strong>_vti_bin</strong> directory controls access to the
run-time FrontPage program <strong>shtml.exe</strong>. If all users have browse
permission, this is set in the access file. Otherwise, the access file points to the list
of users and groups with browse access. A separate access file in the <strong>_vti_adm</strong>
directory sets POST permissions for the administrative program <strong>admin.exe</strong>.
A third access file in the <strong>_vti_aut</strong> directory sets the POST permissions
on the authoring program <strong>author.exe</strong>.</p>

<p>When a Web administrator uses the FrontPage Explorer's <b>Permissions</b> command to
give a user <em>browse access</em> to a FrontPage web, the user is given an account on the
Web server by adding a username and password to the single <strong>service.pwd</strong><i>
</i>file pointed to from <strong>_vti_bin</strong> directory's access file. (On Netscape
servers the file is <strong>users.pwd</strong>.) Also when an IP address restriction is
set on users of the FrontPage web, this restriction is added to the <strong>_vti_bin</strong>
access file.</p>

<p>When a Web administrator gives a user <em>authoring access</em> to a FrontPage web, the
user is given an account on the Web server. This is done by adding the user's name and
password to the <strong>service.pwd</strong> file and to the authors group in the <strong>service.grp</strong>
file pointed to from the access files stored in the <strong>_vti_bin</strong> and <strong>_vti_aut</strong>
directories. This enables the user to do HTTP POST requests to <strong>author.exe</strong>
and to use the run-time program <strong>shtml.exe</strong>. (On Netscape servers the
process is similar.)</p>

<p>When a Web administrator gives a user <em>administrative access</em> to a FrontPage
web, the user is given an account on the web server. This is done by adding the user's
name and password to the <strong>service.pwd</strong> file and to the administrators group
in the <strong>service.grp</strong> file pointed to from the access files stored in the <strong>_vti_bin</strong>
, <strong>_vti_aut</strong>, and <strong>_vti_adm</strong> directories. This enables the
user to do HTTP POSTs to <strong>admin.exe</strong>, <strong>author.exe</strong>, and <strong>shtml.exe</strong>.
(On Netscape servers the process is similar.)</p>

<p>The set of access files for a FrontPage web is illustrated in the following two
diagrams. The first diagram shows the access files and UNIX file permissions for the
content of a FrontPage web: the directories, files, and executable files that an author
creates. The second diagram shows the access files and UNIX file permissions for the
FrontPage _vti directories:</p>

<p><a name="access_content"></a></p>

<p><img src="/html/u_conten.gif" WIDTH="664" HEIGHT="609"></p>

<p><img src="/html/u_fpaccs.gif" WIDTH="593" HEIGHT="581"><a name="access_vti"></a></p>

<p>For a list of the entire contents of a FrontPage installation, see <a href="a_unperm.htm">FrontPage UNIX Files</a>.</p>

<h4><a name="Setting Permissions on Web Content">Setting Permissions on Web Content</a></h4>

<p>Setting secure access-modes for files and directories in a customer's content directory
is a key to maintaining your Web-server security. All files and directories should be
owned by the customer's user identifier/group identifier. Suggested UNIX permission
settings are shown in the following table:</p>

<table border="2">
  <tr>
    <td valign="top" rowspan="3"><strong>Single UNIX account per customer</strong></td>
    <td align="right" width="110">files: </td>
    <td align="center" width="120">rw- r-- r--</td>
  </tr>
  <tr>
    <td align="right" width="110">directories:</td>
    <td align="center" width="120">rwx r-x r-x</td>
  </tr>
  <tr>
    <td align="right" width="110">umask:</td>
    <td align="center" width="120">--- -w- -w-</td>
  </tr>
  <tr>
    <td valign="top" rowspan="3"><strong>Multiple UNIX accounts per customer</strong></td>
    <td align="right" width="110">files: </td>
    <td align="center" width="120">rw- rw- r--</td>
  </tr>
  <tr>
    <td align="right" width="110">directories:</td>
    <td align="center" width="120">rwx rwx r-x</td>
  </tr>
  <tr>
    <td align="right" width="110">umask:</td>
    <td align="center" width="120">--- --- -w-</td>
  </tr>
</table>

<p>The permissions for customers with multiple UNIX accounts per customer also apply to an
organization that has several UNIX accounts that are part of the same UNIX group. Shared
write-access allows any members of the group to write to all shared Web documents.</p>

<h4><a name="Setting the Server Extensions to SUID/SGID">Setting the Server Extensions to
SUID/SGID</a></h4>

<p>Using the FrontPage Server Administrator (<strong>fpsrvadm.exe</strong>), you can
change the execute-permissions of the Server Extensions executables to SUID/SGID. This
forces the Server Extensions to execute with the file system permissions of the owner of <strong>shtml.exe</strong>,
<strong>author.exe</strong>, and <strong>admin.exe</strong>. When suitable permissions for
each customer's content area are applied, the FrontPage Server Extensions (and any other
CGI scripts) for one customer are prevented from writing to the content areas of other
customers.</p>

<p>Setting the Server Extensions to SUID/SGID for the owner of each web is the recommended
configuration for the FrontPage Server Extensions on UNIX servers.&nbsp; Installations of
the FrontPage Server Extensions with versions earlier than version 3.0 should be upgraded
to use SUID/SGID operation of the Server Extensions and unique ownership of the web
content. &nbsp; New installations of the FrontPage Server Extensions that are performed
with the <a href="install.htm#UNIX_ScriptProcedure">fp_install.sh installation script</a>
will automatically prompt to configure the Server Extensions for SUID/SGID operation.</p>

<p>The FrontPage Server Extensions do not require root access at any time. However, the
FrontPage Server Extensions installation script should be run as root, because it sets
EXECUTE privileges of the extensions to SUID. Because it is written in Perl, the Web
administrator can review the script before running it on the Web server. </p>

<h4><a name="Modifying Server Configuration File">Modifying the Web Server's Configuration
File</a></h4>

<p>On some web servers, such as NCSA, CERN and Apache, the FrontPage Server Extensions
need to modify the Web server's configuration file to mark directories containing the
Server Extensions as &quot;executable.&quot; Since the FrontPage Server Extensions run as
&quot;www&quot; and the Web-server configuration file is owned and modifiable only by
&quot;root,&quot; the FrontPage Server Administrator must be manually run as
&quot;root&quot; on the host computer to do this. This prevents administrators from
remotely creating FrontPage webs, because the Web server's configuration file would need
to be owned by &quot;www&quot; or possibly the users of each website, which would
compromise the host system's security.</p>

<p>For the Apache web server, FrontPage supplies an optional patch to overcome this
limitation.&nbsp; With this patch, copies of the FrontPage Server Extensions CGI
executables are not stored in each web but are stored in one centralized location, making
it is unnecessary to mark directories in each web executable and making it possible to
create new FrontPage webs without server configuration file modifications.&nbsp; The patch
to the Apache web server intercepts each call that the FrontPage Explorer makes to the
Server Extensions CGI executables, performs security checks, suids to the owner of the web
site (thus requiring <a href="#Setting the Server Extensions to SUID/SGID">SUID/SGID
operation</a> of the Server Extensions and the web content), and invokes a centralized
copy of the Server Extensions CGI executables.&nbsp; See the Installation chapter for more
information on the <a href="install.htm#UNIX_ApachePatch">Apache patch</a>.</p>

<p>The FrontPage Server Extensions also read the Web server's configuration file to learn
what virtual servers there are, where the content roots are, and what directories are
marked executable.</p>

<h4><a name="Server Extensions Configuration File">The Server Extensions Configuration
File</a></h4>

<p>Some security settings of the FrontPage Server Extensions can be controlled in the
Server Extensions configuration file. The configuration file is in <strong>/usr/local/frontpage</strong>
and is named <b>we</b>xxxx<b>.</b>cnf or, on multi-hosted servers, host<b>:</b>xxxx<b>.cnf</b>,
where <em>xxxx</em> is the port number of your server and &quot;host&quot; is its name or
IP address. The global configuration file <strong>/usr/local/frontpage/</strong><b>version
3.0/frontpage.cnf</b> contains the default settings which apply to all FrontPage webs.</p>

<p>See <a href="a_uncnf.htm">List of UNIX Configuration File Settings</a> for a complete
listing of the parameters that you can set in this file.</p>

<h2><a name="IIS Main">FrontPage Security on IIS Systems</a></h2>

<p><a href="#Windows NT Security">Windows NT Security Concepts</a></p>

<p><a href="#IIS Security Overview">IIS Security Overview</a></p>

<blockquote>
  <p><a href="#IIS Authentication">IIS Authentication</a><br>
  <a href="#Anonymous Account">The Anonymous Account</a><br>
  <a href="#Basic Authentication">Basic Authentication</a><br>
  <a href="#NT Challenge/Response">Windows NT Challenge/Response</a><br>
  <a href="#Distributed Password Authentication">Distributed Password Authentication<br>
  </a><a href="#Network vs. Local Logon Rights">Windows NT Challenge/Response and Network
  vs. Local Logon Rights</a></p>
</blockquote>

<p><a href="#Server Extensions on IIS">The FrontPage Server Extensions on IIS</a></p>

<blockquote>
  <p><a href="#FrontPage DLLs">The FrontPage DLLs</a><br>
  <a href="#FrontPage ACL Settings">FrontPage Access Control List Settings</a><br>
  <a href="#FrontPage and System DLLs">FrontPage and System DLLs</a><br>
  <a href="#Virtual Directories">Virtual FrontPage Directories</a><br>
  <a href="#Restricting NT Account Lists">Restricting Windows NT Account Lists</a><br>
  <a href="#Making a Folder Unreadable">Making a Directory Unreadable</a></p>
</blockquote>

<h3><a name="Windows NT Security">Windows</a> NT Security Concepts</h3>

<p>Windows NT security helps you protect your computer and its resources by requiring
assigned user accounts for all operations. You can control access to all computer
resources, including Web content, by limiting the user rights of these accounts. Windows
NT maintains account lists of local users and groups and of users and groups in the
domain. </p>

<p>Every operation on a Windows NT computer identifies who is doing the operation. The
username and password that you use to log on to Windows NT identifies who you are and
defines what you are authorized to do on that computer.</p>

<p>What a user is authorized to do on a computer is configured in User Manager by setting
User Rights in the Policies menu. User rights authorize a user to perform certain actions
on the system, including the right to &quot;Log on locally,&quot; which is required for
users to use Internet Information Server services under <a href="#Basic Authentication">Basic
Authentication</a>. </p>

<p>NTFS is the recommended file system choice for Windows NT systems that host Web sites.
Windows NTFS allows the association of an <em>access-control list</em> (<a name="ACL">ACL</a>)
with any file or directory. An ACL contains users and groups with sets of permissions that
control whether or not a user or group can read, write, execute, or delete that file or
directory. </p>

<p>Windows NT also supports the File Allocation Table (FAT) file system. Because there are
no file permissions maintained there, storing web content in a FAT partition completely
bypasses FrontPage and IIS access control. You are warned about this when you attempt to
install the FrontPage Server Extensions on a FAT partition. To apply security to a Web
site, you must either convert the partition from FAT to NTFS or move the content to an
NTFS partition. With either solution you will have to uninstall and reinstall the
FrontPage Server Extensions.</p>

<p>For more information on Windows NT Security, see <a href="http://www.microsoft.com/ntserver/" target="_top">Windows NT Server for IS
Professionals</a>.</p>

<h3><a name="IIS Security Overview">IIS Security Overview</a></h3>

<h4><a name="IIS Authentication">IIS Authentication</a></h4>

<p>Under IIS design, each HTTP request to IIS from a Web browser (or from the FrontPage
client) runs under a user account on the Windows NT computer hosting IIS. The operations
that are performed during the execution of that HTTP request are limited by the
capabilities granted to that user account on the Windows NT Server.</p>

<p>When IIS receives an HTTP request from a Web browser or from the FrontPage client, it
does the following: 

<ol>
  <li>IIS validates the user against an account (a user/password) from the Windows NT account
    list, then &quot;impersonates&quot; that account to process the Web request.<p>The request
    is first attempted as the anonymous account, IUSR_&lt;hostname&gt;. If that execution
    fails to have sufficient access to complete the request, or if IIS does not have anonymous
    browsing enabled, then IIS returns error 401 (access denied). At this point, user
    authentication is performed to allow the remote user to identify themselves using the
    techniques of <a href="#Basic Authentication">Basic Authentication</a> or <a href="#NT Challenge/Response">Windows NT Challenge/Response</a>. If the Web browser or
    FrontPage client is using Windows NT Challenge/Response, the user may not see a prompt,
    because the FrontPage client or the Web browser simply supplies the username and password
    of the logged in user from the client computer.</p>
  </li>
  <li>IIS allows access to a file in the Web server only if the NTFS ACL for the file contains
    the account being impersonated by the Web server, with the correct permissions.</li>
</ol>

<p>You can restrict IIS access to only authenticated clients (clients that supply a valid
Windows&nbsp;NT username and password), or you can allow anonymous access using the <u>anonymous
account</u>. When you use authenticated clients, no access is permitted unless a valid
username and password are supplied. Password authentication is useful if you want only
authorized individuals to access your Web site or specific portions controlled by NTFS.
You can have both anonymous logon access and authenticated access enabled at the same
time. </p>

<h4><a name="Anonymous Account">The Anonymous Account</a></h4>

<p>Each Internet service, such as World Wide Web and FTP, maintains a Windows&nbsp;NT
username and password that is used to process anonymous requests. The anonymous account
for Web services, IUSR_&lt;hostname&gt;, is automatically created by Internet Information
Server during its setup. By default, all Web client requests use this account, and clients
are given access to Web content using the IUSR_&lt;hostname&gt; account.</p>

<p>When an anonymous account request is received, the WWW service &quot;impersonates&quot;
the user configured as the anonymous logon user. The request succeeds if the anonymous
logon user has permission to access the requested resource, as determined by the
resource's Access Control List (ACL). If the anonymous logon user does not have
permission, the request fails. The WWW service responds to a failed anonymous request by
requiring that the user provides a valid Windows&nbsp;NT username and password.</p>

<h4><a name="Basic Authentication">Basic Authentication</a></h4>

<p>Basic Authentication is supported by the majority of Web servers on the Internet. When
using Basic Authentication, the Web browser (or the FrontPage client) prompts the user for
a username and password. The username and password are then transmitted across HTTP,
lightly encoded using a technique known as <i>UUencoding</i>. Using this username and
password IIS then authenticates the user as the corresponding Windows NT user.</p>

<p>One security risk of Basic Authentication is that usernames and passwords are
transmitted across the network in an easily decoded format. However, if your Web site must
support authoring by FrontPage 1.1 clients (which do not support NTLM), or if you want to
ensure that your Web site is accessible from all browser types, then you must keep Basic
Authentication enabled. Furthermore, Basic Authentication is the only authentication
technique that works through a firewall via a proxy server. If you are running your Web
server over the Internet via a proxy server (as opposed to running it within an intranet)
you must use Basic Authentication.</p>

<h4>Windows NT<a name="NT Challenge/Response"> Challenge/Response</a></h4>

<p>Windows NT Challenge/Response (also called NTLM) is a more secure authentication method
than Basic Authentication. In Windows NT Challenge/Response, the Web browser or FrontPage
client first attempts to use the Windows NT credentials used to log on to the computer on
which the browser or FrontPage client is running. If those credentials are rejected,
Windows NT Challenge/Response will prompt the user for a name and password.</p>

<p>The username and password are securely encrypted in a multiple transaction interaction
between the client and Web server. This interaction is secure against network snoopers
that attempt to break into systems by monitoring network traffic between a client and a
server.</p>

<p>There are some limitations of Windows NT Challenge/Response: 

<ul>
  <li>Windows NT Challenge/Response Authentication cannot be performed through a firewall via
    a proxy. In this case, users must use Basic Authentication.</li>
  <li>Some browsers may not support Windows NT Challenge/Response.</li>
  <li>Windows NT Challenge/Response does not support <a href="#delegation application">delegation</a>
    to third party servers. </li>
</ul>

<p>Because Windows NT Challenge/Response Authentication cannot be performed through a
firewall, it is most useful on intranets, where communication occurs inside an
organization's firewall. </p>

<p>You can have both Basic and Windows&nbsp;NT Challenge/Response authentication enabled.
If the Web browser supports Windows&nbsp;NT Challenge/Response, it uses that
authentication method. Otherwise, it uses Basic authentication. Windows&nbsp;NT
Challenge/Response authentication is currently supported only by Microsoft Internet
Explorer 2.0 or later. </p>

<h4><a name="Distributed Password Authentication">Distributed Password Authentication</a></h4>

<p>The FrontPage Server Extensions supports <a href="http://backoffice.microsoft.com/product/membership/default.asp" target="_top">Microsoft
Commercial Internet System Membership service</a>, which uses the Microsoft Distributed
Password Authentication (DPA) protocol. DPA is a challenge and response authentication
protocol that uses passwords and a trusted third-party authentication server. In DPA, a
generic user name in the domain is mapped to a set of users maintained in a database. This
lets Internet service providers extend the number of users an NT domain can accommodate.
Generic usernames, such as &quot;FrontPage_Authors,&quot; are available in the FrontPage
Permissions dialog box in the same way as other usernames and groups.</p>

<p>FrontPage client machines that use DPA must have Microsoft Internet Explorer 3.0 (or
higher) or Netscape Navigator 2.0 or 3.0. If the client machine is running Microsoft
Internet Explorer 3.0, the user must install the <a href="http://backoffice.microsoft.com/downtrial/dpa.asp" target="_top">Microsoft Internet
Explorer 3.0x DPA update</a>. If the client machine is running Netscape Navigator 2.0 or
3.0, the user must install the <a href="http://backoffice.microsoft.com/downtrial/mapn.asp" target="_top">Microsoft
Authentication Proxy for Netscape Navigator update</a>.</p>

<h4>Windows NT Challenge/Response and <a name="Network vs. Local Logon Rights">Network vs.
Local Logon Rights</a></h4>

<p>IIS 2.0 implements Windows NT Challenge/Response and Basic Authentication slightly
differently than later IIS versions. When a user is authenticated using Windows NT
Challenge/Response, the user is logged on to the Web server computer as a <em>network</em>
logon. When Basic Authentication is used, the user is logged on with <em>local</em> logon
rights by default, which is similar to logging on for an interactive session at the
computer's console.</p>

<p>In most situations, there are no differences between a network logon and a local logon.
The one situation for which this makes a difference is delegation applications. A <em>d<a name="delegation application">elegation application</a></em> is one in which part of the
Web server's work is delegated to a secondary server process running on a different
computer. For example, a Web server that accesses a database server running on a different
host computer is a delegation application. If the user has logged on locally, Windows NT
security permits those user credentials to be honored by the secondary server. If the user
has logged on via the network, those credentials are not honored. Consequently, when using
Windows NT Challenge/Response, the database server and Web server must be running on the
same host computer.</p>

<p>There are two potential problems caused by Basic Authentication's use of local logon
that administrators should be aware of. First, Basic Authentication will not succeed if
the user account does not have local logon rights. Even if the FrontPage, IIS, and Windows
NT configuration appears to be correct, the lack of local logon rights granted to the user
in the Windows NT User Manager will prevent Basic Authentication from authenticating the
user. Second, with local logon, if a user can obtain physical access to the host running
IIS, the user will be permitted to start an interactive session at the console.</p>

<h3><a name="Server Extensions on IIS">The FrontPage Server Extensions on IIS</a></h3>

<h4><a name="FrontPage DLLs">The FrontPage DLLs</a></h4>

<p>In FrontPage, there are three kinds of users defined for every FrontPage web:
administrators, authors and browsers (end-users). All permissions are cumulative; all
authors also have browsing permission, and all administrators also have authoring and
browsing permissions.</p>

<p>In FrontPage, the list of administrators, authors and browsers is defined on a per-web
basis. All content in a FrontPage web will be accessible to the same set of users and
groups. It is not possible to control permissions on a per-file or per-directory basis
with FrontPage. All FrontPage sub-webs either inherit the permissions (list of
administrators, authors and browsers) of the FrontPage root web or use their own, unique
permissions.</p>

<p>Each FrontPage web (including each sub-web) contains copies of three ISAPI DLLs that
make up the FrontPage Sever Extensions. These DLLs are created in directories below the
top-level directory of a FrontPage web: 

<ul>
  <li><strong>_vti_bin/_vti_adm/admin.dll</strong> for administrative tasks</li>
  <li><strong>_vti_bin/_vti_aut/author.dll</strong> for authoring FrontPage webs</li>
  <li><strong>_vti_bin/shtml.dll</strong> for browse-time FrontPage components such as form
    handlers.</li>
</ul>

<p>FrontPage performs all authoring and administrative tasks by sending HTTP POST requests
to these DLLs. The FrontPage Server Extensions are stored in separate directories in the
customer's document root:</p>

<pre>/document root
   /_vti_bin
      shtml.dll
      /_vti_adm
         admin.dll
      /_vti_aut
         author.dll</pre>

<h4><a name="FrontPage ACL Settings">FrontPage Access Control List Settings</a></h4>

<p>FrontPage implements web security on IIS by changing the access-control lists (ACLs)
for all files and directories in each FrontPage web. FrontPage controls who can administer
a FrontPage web by setting the ACL on <strong>admin.dll</strong>, the administrative DLL.
Similarly, FrontPage sets authoring permissions by setting the ACLs on <strong>author.dll</strong>.
The default ACL sets browsing permission on Web content and lets all users execute the
run-time DLL, <strong>shtml.dll</strong>.</p>

<p>You set the ACLs for a FrontPage web using the FrontPage Explorer's Permissions
command, on the Tools menu. To add new users and groups, this command makes the Windows NT
computer account list available. In FrontPage 98, you can set up a restricted list of
users and groups that does not expose the entire contents of the Windows NT computer and
domain account lists. This lets you protect the confidentiality of your user community.
For details, see <a href="#Restricting NT Account Lists">Restricting Windows NT Account
Lists</a>.</p>

<p>FrontPage sub-webs can have unique permissions by maintaining separate access-control
lists on their own copies of the admin.dll, author.dll and shtml.dll DLLs. Alternatively,
a FrontPage sub-web can inherit the permissions of the root web by keeping the
access-control lists on its admin.dll, author.dll and shtml.dll the same as the root web's
lists.</p>

<p>The set of ACLS for a FrontPage web is illustrated in the following two diagrams. The
first diagram shows the ACLs for the content of a FrontPage web: the directories, files,
and executable files that an author creates. The second diagram shows the ACLs for the
FrontPage _vti directories.</p>

<p>Note in these diagrams that two sets of permissions are given. The first set applies to
the directory, and the second set applies to the files in the directory. For example, the
permissions (rx) (r) specify read and execute-permissions on the directory but only read
permissions on the files in the directory.</p>

<p>For the complete set of ACLs set on FrontPage files, along with a list of the entire
contents of a FrontPage installation, see <a href="a_iisprm.htm">FrontPage Windows NT File
Permissions</a>.</p>

<p><img src="/html/i_conten.gif" align="top" width="673" height="499"><a name="ACL_Content"></a></p>

<h4>Notes:</h4>

<ul>
  <li>All FrontPage ACLs have full control (all) (all) for Windows NT Administrators group
    members and the SYSTEM account.</li>
  <li>The root web root directory's ACL is the same as the default ACL, except that the
    interactive and network accounts have (rx), or list files, access to the directory only
    (not to the content of the directory). This access is required in order to list sub-webs
    in the FrontPage Explorer. The top-level directory of sub-webs does not require these
    additional accounts, therefore sub-web root directories use the default ACL.</li>
  <li>The Executable ACL is applied to directories that are marked with an executable virtual
    root. For the web server to run application or script files in response to browser
    requests, the web server's virtual root must be marked executable in addition to having
    the executable permission on the file's ACL.&nbsp; FrontPage will set up both of these
    conditions when folders are made executable using the FrontPage Explorer's <strong>Folder
    Properties</strong> dialog box.<br>
    <br>
    The Executable ACL is allowed only if the AllowExecutableScripts=1 setting is present for
    the FrontPage web in the FrontPage configuration file <strong>frontpg.ini</strong> (either
    globally or on a per-web basis). The default for AllowExecutableScripts is off. If
    AllowExecutableScripts is off for a FrontPage web, the Executable ACL will never be
    applied and the default ACL is used even if the directory is marked executable. In IIS 2.0
    and IIS 3.0, the execute permission granted in the Executable ACL affects all files in a
    directory, including EXEs, DLLs, and interpreted scripts such as .ASP and .PL files. On
    IIS 4.0, the execute permission affects only DLLs and EXE files, and, depending on the
    server configuration, may not affect interpreted script files.</li>
  <li>The Result File ACL is used only on files that contain the results of a form that uses
    the FrontPage default form handler. For a Discussion form handler, this ACL is placed on
    the directory for that discussion. This ACL grants write and delete access to users of the
    FrontPage web.</li>
  <li>If, in the FrontPage Explorer's <strong>Permissions</strong> dialog box, the setting
    &quot;Everyone has browse access&quot; is selected, anonymous browsing for a web is
    implemented. This is done by adding the anonymous account IUSR_&lt;<em>hostname</em>&gt;
    to the default ACL.</li>
</ul>

<p><img src="/html/i_fpacls.gif" align="top" WIDTH="603" HEIGHT="446"><a name="ACL _vti"></a></p>

<h4><a name="FrontPage and System DLLs">FrontPage and System DLLs</a></h4>

<p>On Windows NT, a DLL that is called from another DLL must run under the same user
account as the calling DLL. Therefore, all system DLL code that is run as a consequence of
an IIS request must run on the impersonated user's permissions. The FrontPage DLLs
admin.dll, author.dll, and shtml.dll contain calls to Windows NT system DLLs. To ensure
that the system DLLs will have the correct level of permissions to run under any
administrator, author, or end-user's account, FrontPage adds the Interactive and NETWORK
accounts to the ACLs of any system DLLs that are used as a result of a FrontPage DLL call.
These added users are given &quot;read&quot; and &quot;execute&quot; permissions on the
system DLLs. Note that this is necessary when installing any generic CGI scripts that use
any Windows NT system services on a Web server. Because FrontPage makes calls to Windows
NT system DLLs: 

<ul>
  <li>Some shared FrontPage DLLs in the <strong>\winnt\system</strong> directory are made
    accessible to impersonated users.</li>
  <li>Some core system DLLs that implement APIs for core system services are made accessible
    to impersonated users.<br>
    <br>
    <a href="a_iisprm.htm">Click here for the full list of system DLLs affected by FrontPage</a>.</li>
</ul>

<h4><a name="Virtual Directories">Virtual FrontPage Directories</a></h4>

<p>Virtual directories are IIS 2.0 and IIS 3.0 constructs that map the URL space of the
Web site onto the file system of the local computer. They control read and execute access
to specified directories within the file system and allow seemingly related URLs to refer
to noncontiguous content areas in the file system.</p>

<p>FrontPage automatically manages the use of virtual directories for executable and
unreadable directories. When installed, FrontPage sets up virtual directories in each
FrontPage web to mark the directories that contain the FrontPage Server Extension DLLs as
executable and to mark hidden directories as unreadable. FrontPage creates the following
virtual directories for each sub-web: 

<ul>
  <li><pre>_vti_bin</pre>
  </li>
  <li><pre>_vti_bin\_vti_aut</pre>
  </li>
  <li><pre>_vti_bin\_vti_adm</pre>
  </li>
  <li><pre>_vti_pvt</pre>
  </li>
</ul>

<ul>
  <li><pre>_vti_cnf</pre>
  </li>
  <li><pre>_vti_txt</pre>
  </li>
</ul>

<p>The root FrontPage web has a seventh virtual directory: 

<ul>
  <li>_vti_log.</li>
</ul>

<p>In the FrontPage Explorer, authors can mark directories executable to allow the
directories to store executable objects such as Active Server Pages (ASP), Database
Connector files (IDC), CGI Scripts, ISAPI Extensions, and Perl scripts. Each directory
that is marked executable causes FrontPage to create a virtual directory.</p>

<h4><a name="Restricting NT Account Lists">Restricting Windows NT Account Lists </a></h4>

<p>In FrontPage 98, you can set up a single user and group list for each virtual root
FrontPage web. This lets you protect the confidentially of your user community by not
displaying the full Windows NT account list. To globally enable Windows NT computer
account list restrictions, add the following line to your <a href="a_fpini.htm">frontpg.ini</a>
file, located in the \Winnt directory:</p>

<pre>[FrontPage 3.0]
RestrictIISUsersAndGroups = 1</pre>

<p>Setting the value to 1 enables restrictions. This same line can also be added for a
specific virtual root FrontPage web, for example:</p>

<pre>[Port 157.55.49.66:80]
RestrictIISUsersAndGroups = 1</pre>

<p>A setting of RestrictIISUsersAndGroups=0 can be used to explicitly disable
restrictions, allowing you to set restrictions by default to enabled for all FrontPage
Webs except for those where restrictions are explicitly overridden. The default for the
global setting is that restrictions are off if the RestrictIISUsersAndGroups key is
missing. The default for individual FrontPage webs is to inherit the global setting.</p>

<p>If users and groups restrictions are enabled for a given FrontPage web, the Server
Extensions look for a Windows NT group named in the following convention:</p>

<pre>FP_[ServiceName][_Subweb]</pre>

<p>On a multihosted IIS2.0/3.0 machine [ServiceName] is the service's IP address and port
number combination&nbsp; and [_Subweb] is the name of the sub-web. On a single-hosted
machine, the ServiceName portion is simply the port number.</p>

<p>On IIS 4.0, [ServiceName] can be of the form <font face="Courier New">/LM/W3SVC/&lt;N</font>&gt;,
where &lt;N&gt; is an instance number. This is the recommended method. On IIS 4.0,
[ServiceName] can also be of the form <font face="Courier New">&lt;virtual_server&gt;:&lt;port_number&gt;</font>.
If you use this form, you must use specify the virtual server's name; you cannot use the
virtual server's IP address on IIS 4.0. </p>

<p>To specify a root web's restriction group, omit the _Subweb portion.</p>

<p>Some examples are:</p>

<pre>FP_157.55.49.66:80_MySubweb</pre>

<pre>FP_80_MySubweb</pre>

<pre>FP_80</pre>

<p><font face="Courier New">FP_/LM/W3SVC/1_MySubweb</font></p>

<p>If restrictions are enabled on a sub-web but no local group is defined, the FrontPage
Server Extensions look for the group of the root web and use it if found. If no
appropriately named groups are found then no restriction is placed on permissions
visibility setting or contents.</p>

<h4><a name="Making a Folder Unreadable">Making a Directory Unreadable</a></h4>

<p>A standard way of saving form results in FrontPage is to use the default form handler
(also called the WebBot Save Results component) to write to a results file in a directory
in a FrontPage web. In FrontPage 1.1 and FrontPage 97, writing form results to a directory
made the contents of the directory readable to any user who discovered the URL of the
results file.</p>

<p>In FrontPage 98, authors can assign a virtual directory mapping for a form results
directory that has both the execute and the read bits turned off. This prevents any
end-user from reading the contents of the directory, but it requires the FrontPage web
author to fetch the contents of the directory using the FrontPage Explorer.</p>

<p>To make a directory unreadable, select it in the FrontPage Explorer's <b>Folders</b>
view and select <b>Properties</b> from the <b>Edit</b> menu. In the <b>Folder</b> <b>Properties</b>
dialog box, deselect the two settings: <b>Allow scripts or programs to be run</b> and <b>Allow
files to be browsed</b>.</p>

<p>Note that if you make the<strong> /_private</strong> directory unreadable, some
FrontPage Wizards will not work properly.</p>
</body>
</html>

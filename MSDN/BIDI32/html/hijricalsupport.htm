<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hijri Calendar Support</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="hijricalsupport"></a>Hijri Calendar Support</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="HijriCalSupport_C">
</object></p>
<p>
Microsoft Visual Basic 6.0 and Microsoft Access for Windows 95-Arabic Edition (Arabic Access) or later contain support for both the Hijri and Gregorian calendars. The foundation for this capability is a new Calendar property in VBA and extensions to existing date-related VBA functions.</p>
<p>
The following paragraphs describe how to perform calendar-related functions using Visual Basic 6.0. Unlike Arabic Access, which has user interface and other extensions beyond VBA to automate creation and management of databases based on either calendar, Visual Basic requires application developers to programmatically control the calendar associated with the entry, calculation, and display of date information.
<ul type=disc>
<li>
The Gregorian calendar is the default calendar for all date-related information and VBA functions in Arabic Visual Basic. To see or change the calendar setting to be used by VBA date-related functions, use the new VBA Calendar property. The syntax for Calendar property usage is:<p class=tl>
[VBA.]Calendar [=value]</P></li>
</ul>
<p>
Items in brackets are optional. 'value' is one of the following settings or values.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Setting</b></td>
<td class=label width=33%><b>Value</b></td>
<td class=label width=34%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%>vbCalGreg</td>
<td width=33%>0</td>
<td width=34%>(Default) Gregorian calendar used for VBA date-related calculations and formatting.</td>
</tr>
<tr valign=top>
<td width=33%>vbCalHijri</td>
<td width=33%>1</td>
<td width=34%>Hijri calendar used for VBA date-related calculations and formatting.</td>
</tr>
</table><br>
<ul type=disc>
<li>
When the calendar is Gregorian, the language of Gregorian month names is determined by the Date tab in the Regional Settings Control Panel of Microsoft Windows 95. When the calendar is Hijri, the language of Hijri month names is always Arabic. Hijri month names are always returned in full month name format.<br><br></li>
<li>
The behavior of all date-related functions in VBA is determined by the Calendar property setting. Functions affected by the Calendar property setting include CDate, Date, DateAdd, DateDiff, DatePart, DateSerial, DateValue, Day, Format, Month, Weekday and Year.<br><br></li>
<li>
The Visual Basic data type Date does not change when the calendar changes. Values of type Date are stored in a format that is not calendar-specific. This not only allows date information to be readily formatted for a particular calendar but also provides a convenient way to convert formatted date values from one calendar to another.</li>
</ul>
<p>
The following example creates a function to convert date strings between the supported calendar systems. The example code that follows uses the function to convert a Gregorian date string to the equivalent Hijri string in Long Date format.</p>
<pre><code>Function ConvertDateString ( _
 &nbsp;&nbsp; ByRef StringIn As String, _
 &nbsp;&nbsp; ByRef OldCalendar As Integer, _
 &nbsp;&nbsp; ByVal NewCalendar As Integer, _
 &nbsp;&nbsp; ByRef NewFormat As String) As String
 &nbsp;&nbsp; 
 &nbsp;&nbsp; Dim SavedCal As Integer
 &nbsp;&nbsp; Dim d As Date
 &nbsp;&nbsp; Dim s As String
 &nbsp;&nbsp; 
 &nbsp;&nbsp; '// Save VBA Calendar setting to restore when finished
 &nbsp;&nbsp; SavedCal = Calendar
 &nbsp;&nbsp; 
 &nbsp;&nbsp; '// Convert date to new calendar and format
 &nbsp;&nbsp; Calendar = OldCalendar      ' Change to StringIn calendar
 &nbsp;&nbsp; d = CDate (StringIn)      ' Convert from String to Date
 &nbsp;&nbsp; Calendar = NewCalendar      ' Change to calendar of new string
 &nbsp;&nbsp; s = CStr (d)         ' Convert to short format String
 &nbsp;&nbsp; ConvertDateString = Format _&nbsp;&nbsp;    ' Reformat
 &nbsp;&nbsp; (s, NewFormat)
 &nbsp;&nbsp; 
 &nbsp;&nbsp; '// Restore VBA Calendar setting
 &nbsp;&nbsp; Calendar = SavedCal
End Function
</code></pre>
<p>
Call ConvertDateString function from a procedure to perform conversion...</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;Dim GregorianDate As String
 &nbsp;&nbsp; Dim HijriDate As String
 &nbsp;&nbsp; Dim HijriFormat As String

 &nbsp;&nbsp; GregorianDate = "12/31/93"   ' Gregorian string to convert
 &nbsp;&nbsp; HijriFormat = "Long Date"   ' Format for Hijri date

 &nbsp;&nbsp; '// Convert to Hijri date 7/8/1414 and return in Long Date format
 &nbsp;&nbsp; HijriDate = ConvertDateString (_
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GregorianDate, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbCalGreg, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbCalHijri, _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HijriFormat)
</code></pre>
<ul type=disc>
<li>
To ensure Hijri dates strings are evaluated correctly in VBA statements, use the CDate function to evaluate the string (e.g., CDate("1/25/14")) instead of declaring the string as a constant (e.g., #1/25/14#). CDate will always return a value based on the active database calendar, whereas date constants are always evaluated using the Gregorian calendar.<br><br></li>
<li>
For reliable behavior, dates should generally be entered and displayed in an unambiguous format. For example, dates entered in short date format may be misinterpreted if the year or the day of the month are 12 or less (e.g. 3/11/10). For reliable behavior, use long date format whenever possible. You can alter the way a date is displayed in long format (e.g. exclude the day of the month) by changing the format in the Windows 95 Regional Settings Control Panel.<br><br></li>
<li>
If an existing database or file with date information is opened and the wrong calendar setting has been selected, Visual Basic may report a variety of errors or other unexpected behaviors. For example, if Calendar = vbCalHijri, Visual Basic may report an error when a statement makes reference to Gregorian dates that are invalid as Hijri dates (e.g., 'February 17, 1996' because no Hijri month has the name February).</li>
</ul>
</BODY>
</HTML>

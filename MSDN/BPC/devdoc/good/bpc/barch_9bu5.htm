<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Broadcast Data Receiver Subsystem</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bpc_broadcast_data_receiver_subsystem"></a>Broadcast Data Receiver Subsystem</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The broadcast client receives a number of different data streams over one or more broadcast networks by means of <a href="glos_4xo9.htm#_bpc_miniport_gly"><i>miniports</i></a>. Broadcast Architecture NIC miniports, drivers for the Microsoft® Windows® 98 operating system, allow different hardware devices to have a common interface to the broadcast client. These miniports conform to the <a href="glos_4j21.htm#_bpc_network_driver_interface_specification_gly"><i>Network Driver Interface Specification</i></a> (NDIS) version 5.0 including the Broadcast Architecture NDIS extensions. For more information on Broadcast Architecture NDIS extensions, see the NDIS Extensions section of the Broadcast Architecture Device-Driver Kit (DDK), part of the Windows 98 DDK.</p>
<p>
A Broadcast Architecture NIC miniport splits broadcast data into two streams. The first stream includes audio and video data sent by way of the Broadcast Architecture transport to the <a href="barch_9wa5.htm#_bpc_directshow_filter_graph">DirectShow filter graph</a>. Any other data received, such as Hypertext Markup Language (HTML) pages, data files, or control information, is formatted as <a href="glos_6k55.htm#_bpc_internet_protocol_gly"><i>Internet Protocol</i></a> <a href="#_bpc_tcp_ip">(IP) packets</a> and sent to <a href="#_bpc_windows_sockets">Windows Sockets</a> (WinSock) version 2.0.</p>
<p>
Applications that require a back channel to the server can connect to another network by using WinSock. Routing all data through WinSock simplifies the interface to the server, as WinSock then provides a single application programming interface (API) for data exchange.</p>
<p>
The following illustration shows how the components of the Broadcast Data Receiver subsystem fit together.</p>
<p>
<img src="images/arch02.gif" border=0></p>
<p>
The following topics briefly describe the components of the Broadcast Data Receiver subsystem.</p>

<h4><a name="_bpc_windows_sockets"></a>Windows Sockets</h4>
<p>
WinSock 2.0, a Windows API, is a Windows 98 system component. It provides a networking standard that gives applications an abstraction of the networking software below it. In Broadcast Architecture, WinSock handles digital computing data, as opposed to audio and video data streams.</p>

<h4><a name="_bpc_tcp_ip"></a>TCP/IP</h4>
<p>
<a href="glos_9mic.htm#_bpc_transmission_control_protocol_internet_protocol_gly"><i>Transmission Control Protocol/Internet Protocol</i></a> (TCP/IP) is the industry-standard protocol used by WinSock 2.0 to send and receive data. WinSock packages and unpackages data into IP packets that it sends to and receives from a TCP/IP network.</p>

<h4><a name="_bpc_broadcast_architecture_transport2"></a>Broadcast Architecture Transport</h4>
<p>
The Broadcast Architecture transport is a Broadcast Architecture component. The Broadcast Architecture transport allows various system components to move audio and video data through the system. It is a high-bandwidth transport with special support for features such as television channel selection. For more information, see the Broadcast Architecture Transport section of the Broadcast Architecture DDK.</p>

<h4><a name="_bpc_ndis_5.0"></a>NDIS 5.0</h4>
<p>
NDIS 5.0 is a device driver model for Windows 98 and the Microsoft® Windows NT® operating system that provides an operating system-independent standard for writing network device drivers. NDIS 5.0 allows independent hardware vendors (IHVs) to extend existing drivers to create hardware-specific drivers; the extensions written by an IHV are called a miniport. In Broadcast Architecture, NDIS-compliant miniports provide an interface between network interface cards (NICs) and other broadcast client components.</p>

<h4><a name="_bpc_broadcast_architecture_nic_miniports"></a>Broadcast Architecture NIC Miniports</h4>
<p>
A Broadcast Architecture NIC miniport, provided by an independent hardware vendor, is the NIC-specific portion of an NDIS 5.0 driver. Each type of NIC requires a unique miniport. For more information, see the NIC Miniport section of the Broadcast Architecture DDK.</p>

<h4><a name="_bpc_ndis_802.3_intermediate_driver"></a>NDIS 802.3 Intermediate Driver</h4>
<p>
The NDIS 802.3 intermediate driver is a Broadcast Architecture component that translates <a href="glos_4xo9.htm#_bpc_multipacket_transport_gly"><i>Multipacket Transport</i></a> (MPT) packets, from satellite networks, into IP packets. This translation makes it possible for WinSock to handle satellite data as it does any other data carried by TCP/IP.</p>

<h4><a name="_bpc_receiver_cards"></a>Receiver Cards</h4>
<p>
A receiver card is a component provided by independent hardware vendors. This card receives incoming broadcast signals and converts them to data the computer can use. In Broadcast Architecture, it provides a point of entry for broadcast data into the system.</p>
<p>&nbsp;</p></body>
</HTML>

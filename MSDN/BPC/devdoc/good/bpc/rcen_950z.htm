<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dependencies</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_bpc_dependencies"></a>Dependencies</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Enhancement pages, like World Wide Web pages, are typically composed of several files. For example an enhancement file, MyEnh.htm, might contain graphic images in Graphics Interchange Format (GIF) and Joint Photographic Experts Group format (JPEG), ActiveX controls, FutureSplash animations, and other such files that must be downloaded for the enhancement page to display properly. These additional files are MyEnh.htm's <i>dependencies.</i></p>
<p>
You must ensure that an enhancement's dependency files are stored on the broadcast client before that enhancement is displayed. Otherwise the enhancement will appear broken. There are several strategies for handling dependencies:
<ul>
<li>
Allocate broadcast bandwidth to transmit the dependencies and the base page together, in a cabinet file.</li>
<li>
Allocate broadcast bandwidth to repeatedly download the dependencies. </li>
<li>
Use another data transmission method, such as <a href="glos_6k55.htm#_bpc_internet_channel_broadcasting_gly"><i>Internet channel broadcasting</i></a>, to get the files onto the user's computer.</li>
<li>
Have the user explicitly download or install the dependency files, either from a Web site or a portable medium such as a CD-ROM.</li>
</ul>
<p>
The first method is the recommended method for ensuring that the dependency files are loaded onto the client when the enhancement page is displayed. For more information about using cabinet files to package dependencies with their base page, see <a href="rcen_25lx.htm">Creating a Cabinet File</a> and <a href="rcen_8put.htm"><b>EnhEvent.onefile</b></a>.</p>
<p>
The <a href="rcen_6ik3.htm">stream compiler objects</a> also provide functionality to automatically determine the dependencies of a event, and methods that enable applications to edit the dependency list. For more information, see <a href="rcen_1s38.htm">Editing the Dependencies of an Event</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDataListener::SubmitAnnouncement</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bpc_idatalistener_submitannouncement"></a>IDataListener::SubmitAnnouncement</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>IDataListener::SubmitAnnouncement</b> method allows an application to schedule the reception of a broadcast without an announcement being sent to the public announcement address. This method has two primary uses: to allow announcements to be distributed by other means, such as the Internet or in e-mail, and to permit filters to store announcements for presentation to a user for approval.</p>
<p>
For example, an application might consist of a filter to store announcements that may be of interest to a user, present them to the user at some later date, and register the announcement for receipt of its broadcast at that time. Announcements delivered by this mechanism are not presented to the filters, but scheduled unconditionally for the receipt of their broadcasts.</p>
<p>
The input parameters to this method are equivalent to the output parameters of <a href="ann_4xm0.htm"><b>IBroadcastFilter::Match</b></a><i> </i>and <a href="ann_729a.htm"><b>IBroadcastFilter::GetDisposition</b></a>.</p>
<p>
In addition to the passed parameters, <b>SubmitAnnouncement</b>, must be able to access the local IP address by calling the <b>IBroadcastAnnouncment::get_LocalAddress</b> function. Therefore; applications that use <b>SubmitAnnouncement</b>, must call <b>IBroadcastAnnouncment::put_LocalAddress</b> prior to calling <b>SubmitAnnouncement</b>.</p>
<pre><code><b>HRESULT SubmitAnnouncement(
  IBroadcastAnnouncement *</b><i> Announcement</i><b>,  </b>// in
<b>  BSTR</b><i> WorkingDirectory</i><b>,                  </b>// in
<b>  BSTR</b><i> Application</i><b>,                       </b>// in
<b>  BSTR</b><i> Parameters</i><b>,                        </b>// in
<b>  long</b><i> AdvanceMinutes                     </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>Announcement</i></dt>
<dd>
Pointer to the object containing the announcement.</dd>
<dt>
<i>WorkingDirectory</i></dt>
<dd>
Working directory in which to launch the target application.</dd>
<dt>
<i>Application</i></dt>
<dd>
File name of the application to be launched.</dd>
<dt>
<i>Parameters</i></dt>
<dd>
String to be appended to the command line following the application name.</dd>
<dt>
<i>AdvanceMinutes</i></dt>
<dd>
Number of minutes prior to the time the announced data arrives to launch the application.
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns an <b>HRESULT</b> indicating success or failure.</p>
<h4>See Also</h4>
<p>
<a href="ann_729a.htm"><b>IBroadcastFilter::GetDisposition</b></a>, <a href="ann_4xm0.htm"><b>IBroadcastFilter::Match</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

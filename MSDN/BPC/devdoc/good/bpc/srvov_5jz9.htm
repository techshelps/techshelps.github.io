<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Broadcast Server Architecture</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bpc_broadcast_server_architecture"></a>Broadcast Server Architecture</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The following sections provide an overview of the type of server architecture used to transmit broadcast data over a broadband network to <a href="glos_9egp.htm#_bpc_broadcast_client_gly"><i>broadcast clients</i></a> in the home. The <i>head end </i>in this discussion is the physical infrastructure that gathers, coordinates, and broadcasts data over such a network. </p>
<p>
The head-end server architecture relies on the following three software components to deliver broadcast data to transport mediums such as cable systems, satellite uplinks, or terrestrial antennas:
<ul>
<li>
<a href="srvov_7w32.htm">Content server application</a><i>.</i> This application, written by a content provider and running on a computer at the head end, gathers, schedules, and sends data to the Microsoft® Multicast Router (MMR), as described in <a href="srvap_3zw3.htm">Writing Content Server Applications</a>.</li>
<li>
<a href="srvov_4rle.htm">Microsoft Multicast Router</a> (MMR). This program routes data from the content server application to the virtual interface (VIF). The MMR can forward Internet Protocol (IP) multicast packets directly to the virtual interface, or it can forward packets embedded in a Transmission Control Protocol (TCP) stream from the content server application.</li>
<li>
<a href="srvov_82g5.htm">Output system software</a>. This software is a dynamic-link library (DLL) file that the MMR calls to send data to the transport medium. Each transport medium requires a unique virtual interface DLL. A single MMR program can use more that one virtual interface DLL to enable it to send data on multiple transport media. </li>
</ul>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Guide Data Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bpc_using_guide_data_objects"></a>Using Guide Data Objects</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The Guide data objects provide a set of recordset objects, named in the format <b>C</b><i>TableName</i><b>Recordset</b>, that each connect to the table in the Guide database indicated by <i>TableName.</i> Using these objects, you can: 
<ul>
<li>
Open a recordset.</li>
<li>
Fetch, update, insert, and delete records.</li>
<li>
Close the recordset. </li>
</ul>
<p>
As an example of using these techniques, see:
<ul>
<li>
<a href="pgsrv_0f6t.htm">Adding a Station to the Program Guide</a></li>
<li>
<a href="pgsrv_4spx.htm">Adding a Channel to the Program Guide</a></li>
</ul>
<p>
The recordset objects do not contain record data themselves. Instead, they create <b>C</b><i>TableName</i> record objects to store the data. Each <b>C</b><i>TableName</i> object corresponds to a single record in the Guide database. </p>
<p>
A recordset or record object can be repeatedly opened and closed without the need for deleting an object and re-instantiating a new object. You can open a recordset by calling either the <b>OpenRecordset </b>or <b>OpenIndexed </b>method of the appropriate recordset object. For example, you can access the records of the Episode table using the <a href="pgsrv_7hh0.htm"><b>CEpisodeTRecordset</b></a> object. To open a recordset, you can call either the <b>CEpisodeTRecordset::OpenRecordset</b> or <b>CEpisodeTRecordset::OpenIndexed </b>method. </p>
<p>
When a recordset is opened by the Jet database engine, it can be opened as either a dynaset or snapshot. A <i>dynaset </i>is essentially a list of pointers to the records in the table. In other words, data is only read from the database when a record is retrieved. A <i>snapshot </i>reads all records in the set into a RAM cache. Part of the design process for an application that uses the Jet database engine is to determine the type of acccess required. You should consult the DAO documentation for more information on the trade-offs involved. </p>
<p>
By default, the Jet engine opens recordsets as dynasets. You can specify that the Jet engine open a recordset as a snapshot by setting a value for the optional <i>nOpenType</i> parameter of the appropriate <b>OpenIndexed</b> method. </p>
<p>
Note also that the record count for a recordset is not automatically defined when you open the recordset. Therefore, when your application calls the appropriate <a href="pgsrv_6zqs.htm"><b>GetRecordCount</b></a> method, the method must move to the last record in the set to count the records. This process can be slow for large recordsets. To avoid counting, your application can open a recordset with an ORDER BY clause, which correctly sets the initial record count.</p>
<p>
Once your application has opened a recordset, it can retrieve a record object from the recordset by calling the <b>GetRecordsetObject</b> or <b>GetRecord</b> methods of the corresponding recordset object. The former method returns a <b>C</b><i>TableName </i>object that wraps the current recordset. The latter method returns an object that wraps the record in the recordset indicated by the specified index. Using the <b>C</b><i>TableName</i> object, you can retrieve or set field values for the indexed record.</p>
<p>
For example, you can get an individual Episode record by calling the <b>CEpisodeTRecordset::GetRecord</b> or <b>CEpisodeTRecordset::GetRecordsetObject</b> methods. Both methods create a <a href="pgsrv_0t2s.htm"><b>CEpisodeT</b></a> object. You can then manipulate the field values of the Episode record by using the methods of the <b>CEpisodeT</b> object. </p>
<p>&nbsp;</p></body>
</HTML>

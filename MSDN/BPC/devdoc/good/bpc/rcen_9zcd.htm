<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Locating an Event in the Enhancement Stream</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_bpc_locating_an_event_in_the_enhancement_stream"></a>Locating an Event in the Enhancement Stream</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The stream compiler objects provide several ways to locate an event in the enhancement stream. You can locate the event most recently added to the stream or locate an event by its start time or handle. </p>
<p>
To locate the most recently added event, call the <a href="rcen_5fc4.htm"><b>EnhEvents.LastAdd</b></a> method. This returns the event that was last added to the enhancement stream. The following example illustrates this where <code>evs</code> is an <b>EnhEvents </b>collection and <code>e</code> is an <b>EnhEvent </b>object variable.</p>
<pre><code>Set e = evs.LastAdd
 </code></pre>
<p>
To locate an event by its start time, call the <a href="rcen_4syt.htm"><b>EnhEvents.FindTime</b></a> method and specify the time of the event. The start time of an event is stored in the <a href="rcen_714k.htm"><b>EnhEvent.Start</b></a> property. The following example finds an event by its start time and stores the event in the object variable <code>e</code>.</p>
<pre><code>'Find the event that starts at 00:05:42:00
Set e = evs.FindTime (342.0)
 </code></pre>
<p>
There are some considerations when finding an event by its start time. The start time of an event can change slightly as new events are added to the stream. This is because the stream compiler objects may have to rebudget the available bandwidth to fit the new events in. In addition, multiple events may have the same start time. If your application needs to be able to recall a specific event multiple times it is more robust to recall the event by its handle instead of its start time.</p>
<p>
An event handle uniquely identifies the event within the stream. Unlike the start time, the handle of an event does not change. The event handle is stored in the <a href="rcen_5dd1.htm"><b>EnhEvent.Handle</b></a> property. To locate an event using its handle, call the <a href="rcen_0jmt.htm"><b>EnhEvents.FindHandle</b></a> method.</p>
<p>
If you need to locate an event by some other criteria, such as locating an event by the value of its <a href="rcen_5u05.htm"><b>EnhEvent.Name</b></a> property, you will have to implement a search through the stream explicitly. This is illustrated in the following example which searches the stream for an event by <b>Name</b>.</p>
<pre><code>Dim FoundHandle As Long
 
'Search through the EnhEvents collection for the event
For Each e in evs
  If (e.Name = FindStr) Then
    'Insert code to utilize the found event.
    '...
 
    'Store a handle to the event for later recall. (optional)
    FoundHandle = e.Handle
  End If
Next e
 </code></pre>
<p>
Extending the preceding example, you could use the following to recall the event found previously and store it in the object variable <code>e</code>.</p>
<pre><code>Set e = evs.FindHandle(FoundHandle)
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Services Subsystem</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bpc_data_services_subsystem"></a>Data Services Subsystem</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The Data Services subsystem receives computing data streams from <a href="glos_9egp.htm#_bpc_broadcast_server_gly"><i>broadcast servers</i></a> by using Windows Sockets (WinSock) 2.0. The subsystem then routes that data to applications. </p>
<p>
Using the Data Services subsystem over a broadcast network allows data to be sent to many users without the extra bandwidth required for such data transfer by nonbroadcast networks. Instead of sending separate packets to each client that requests data, as nonbroadcast servers do, broadcast servers send one packet that is received by all clients that are "listening" (monitoring the data stream) for that data. The Data Services subsystem monitors for such broadcasts and stores the data received on the broadcast client. </p>
<p>
The following illustration shows how the components of the Data Services subsystem fit together. </p>
<p>
<img src="images/arch03.gif" border=0></p>

<h4><a name="_bpc_announcement_listener"></a>Announcement Listener</h4>
<p>
<a href="#_bpc_announcement_listener">Announcement Listener</a> is a Broadcast Architecture component that monitors incoming announcements of upcoming transmissions. These announcements indicate when the specified data will be sent. Announcement Listener can handle announcements itself or pass them through <a href="#_bpc_announcement_filters">announcement filters</a>, allowing the filters to handle them. </p>
<p>
Announcement Listener maintains a list of the current announcement filters and passes announcements to each filter in its list. If a filter recognizes the announcement, it handles the announcement. If no filter in the list recognizes the announcement, Announcement Listener can respond to the announcement. For announcements that immediately precede the data they are announcing, Announcement Listener uses the information in the announcement to set up <a href="glos_7rzt.htm#_bpc_file_transfer_service_gly"><i>File Transfer Service</i></a> (FTS) to receive data and starts the <a href="#_bpc_fts_receiver">FTS receiver</a>. Otherwise, Announcement Listener uses the Task Manager in the Microsoft® Windows® 98 operating system to schedule FTS to run at the time specified in the announcement.</p>

<h4><a name="_bpc_announcement_filters"></a>Announcement Filters</h4>
<p>
<a href="#_bpc_announcement_filters">Announcement filters</a> are supplied both as components in Broadcast Architecture and by independent software vendors. These filters are Automation servers used by Announcement Listener to determine which types of data broadcast to receive. A typical action for an announcement filter is to schedule the FTS receiver to receive a file.</p>

<h4><a name="_bpc_fts_receiver"></a>FTS Receiver</h4>
<p>
The FTS receiver is a Broadcast Architecture component that receives data from a broadcast network. A typical use of the FTS receiver is to receive file packages for the Microsoft® <a href="wcstb_3sdw.htm">Internet Channel Client</a>. Other uses of the FTS receiver are to receive files and database updates. Depending on options passed to it, FTS can save the data to a disk or pass the data to another application, or if the data is an executable file FTS can load the data into memory and execute it. </p>

<h4><a name="_bpc_internet_channel_client2"></a>Internet Channel Client</h4>
<p>
The Internet Channel Client is a Broadcast Architecture component that receives information from a Microsoft® <a href="wsstb_2wc2.htm">Internet Channel Server</a>. The information that the client receives can be Hypertext Markup Language (HTML) pages from the World Wide Web or data files. The Internet Channel Client includes an announcement filter that checks for announcements about upcoming Internet channel broadcasts. When the filter receives an announcement, it compares the announcement to the IE 4 subscription list to see if it should receive the data. If the announcement matches a subscription, the filter runs a program that downloads the data and saves it in the Microsoft® Internet Explorer cache or to a directory specified in the announcement.</p>

<h4><a name="_bpc_internet_explorer"></a>Internet Explorer</h4>
<p>
Internet Explorer is a World Wide Web browser included in Windows 98. Internet Explorer stores Web pages it has received in a cache on a local hard disk. The Internet Channel Client puts pages into this cache so the user can see them.</p>
<p>
Broadcast Architecture includes Microsoft® ActiveX® controls for showing video in Web pages displayed by Internet Explorer.</p>

<h4><a name="_bpc_windows_file_system"></a>Windows File System</h4>
<p>
The Windows file system is simply the data storage system used by Windows 98.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Editing the Dependencies of an Event</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_bpc_editing_the_dependencies_of_an_event"></a>Editing the Dependencies of an Event</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Any event that depends implicitly on one or more other events to function correctly has <a href="rcen_950z.htm">dependencies</a>. An example is an event that downloads an enhancement page that contains an image. If the image file is not also downloaded, the page will appear broken when it is displayed. The image file is a dependency of the page-download event.</p>
<p>
The stream compiler objects can automatically calculate the dependencies of an event. In addition, they provide properties that your application can use to set or edit an event's dependencies.</p>
<p>
For example, your application might edit a dependency list when there are two consecutive events that depend on the same image file. You could edit the dependencies of the second event to remove the reference to the shared image file since it will already have been downloaded as a dependency of the first event.</p>
<p>
There are two ways in which your application can create a dependency list for an event: 
<ol>
<li>
Call <a href="rcen_014e.htm"><b>EnhEvent.Flatten</b></a> on an event which does not have a dependency list. This causes the stream compiler objects to automatically calculate the event's dependencies.</li>
<li>
Explicitly set dependencies for an event using the <a href="rcen_90pw.htm"><b>EnhEvent.Depend</b></a> array.</li>
</ol>
<p>
Once a dependency list has been generated, it is stored in the text of the event. For example, in the following, the file First.htm depends on three image files: Red.gif, Green.gif, and Yellow.gif.</p>
<pre><code>before 00:00:20.00 "First.htm" only depends("red.gif" "green.gif" "yellow.gif");
 </code></pre>
<p>
The dependency list is stored in the event text to alert the stream compiler objects that dependencies have already been determined for this event and do not need to be re-calculated. </p>
<p>
You can edit an event's dependency list using <a href="rcen_90pw.htm"><b>EnhEvent.Depend</b></a>. <b>Depend </b>is an array of strings containing the path and filename of each dependency file. For example, the preceding event sets <b>Depend(</b>0<b>)</b> to "Red.gif", <b>Depend(</b>1<b>)</b> to "Green.gif", and <b>Depend(</b>2<b>)</b> to "Yellow.gif".  A related property, <a href="rcen_0ol0.htm"><b>EnhEvent.DependCount</b></a>, returns the number of dependencies currently set for the event.</p>
<p>
To delete a dependency from an event, set its path and filename to an empty string. When you do this, the stream compiler objects delete the empty dependency from the list and re-index the remaining array elements. </p>
<p>
The following deletes all of an event's dependencies. </p>
<pre><code>'Delete all the dependencies of an event.
While e.DependCount &gt; 0
    e.Depend(0) = ""
Wend
 </code></pre>
<p>
Note that in the preceding example the index is always 0. Because the dependency array is re-indexed after each element is removed, incrementing the index would cause the array to go out of bounds. </p>
<p>
When adding dependencies to an event, you can only add one dependency to the list at a time and only at the end of the array. </p>
<pre><code>'Adding a new dependency to an event
e.Depend(e.DependCount) = "Another.gif"
 </code></pre>
<p>
If you set a value in the middle of the dependency array, it overwrites the previous value.</p>
<pre><code>'Overwriting a previous dependency value.
e.Depend(1) = "Another.jpg"
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Broadcast Push Model</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bpc_the_broadcast_push_model"></a>The Broadcast Push Model</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Data transmitted over a computer or broadcast network using a unidirectional "push" model can reach very large numbers of people much more efficiently than the bidirectional "pull" model used on most computer networks today. </p>
<p>
Computer networks today, including the Internet, generally use a pull model for transmitting data. In a pull model, a client sends a request for specific data to a server. The server processes the request and then sends back the requested information. In this model, clients "pull" information from the server. The process breaks down when too many clients request information at once. This breakdown occurs because even very powerful servers can handle only a limited number of requests at a time, and they must send a separate response to every request.</p>
<p>
In a true push model, by contrast, the server broadcasts a large amount of information onto the network on its own schedule, without waiting for requests. The clients scan incoming information and save the parts users have indicated interest in, while discarding the rest. In this model, one server transmission can service an unlimited number of clients at once. In cases where many people need the same information, this push model is a much more efficient use of network bandwidth than the pull model.</p>
<p>
The combination of a true push model and the very high bandwidths of existing broadcast channels allows Broadcast Architecture to deliver large quantities of data to customers conveniently. Such data can include video, audio, high-resolution images, large aggregated blocks of World Wide Web pages, databases, software, and data in other formats. This kind of data is generally too large to send or receive over telephone connections on a regular basis, even with the fastest modems. Broadcast Architecture can deliver this data to a client automatically, in the background, without the customer ever having to dial in, tune in, or download anything.</p>
<p>
Soon, satellite broadcast digital data streams with capacities of between 1.2 and 6 megabits per second will be available on broadcast clients. At 1.2 megabits per second, a channel can transfer over 10 gigabytes every 24 hours, while 6 megabits per second translates into more than 60 gigabytes of information per day. By contrast, a compact disc today holds about two-thirds of a gigabyte. In future versions of Broadcast Architecture, a variety of 30-megabit-per-second channels may each deliver over 300 gigabytes per day. </p>
<p>
Not only is broadcasting an efficient way to distribute information, existing broadcast networks already reach an enormous national and international audience. <i>Digital Household Report</i> of August 31, 1996, projected that 96.9 million households in the United States would receive analog and digital broadcast transmissions by the end of 1996. Broadcasts also reach a growing number of households internationally as broadcast satellite networks continue to proliferate. </p>
<p>
Broadcast Architecture uses the existing standard <a href="glos_6k55.htm#_bpc_internet_protocol_gly"><i>Internet Protocol</i></a> (IP) for broadcasting data. Over the Internet and other computer networks that make use of IP, broadcasts take the form of <i>IP <a href="glos_4xo9.htm#_bpc_multicast_gly">multicasts</a></i> sent to many recipients at once, in contrast to usual <a href="glos_1oqh.htm#_bpc_unicast_gly"><i>unicasts</i></a>, which are directed to a single recipient. In a corporate context, multicasting can greatly reduce network traffic over intranets when compared to unicasting the same data to the same recipients. A broadcast client is a perfect client for corporate multicasts both because of its high-bandwidth capabilities and because Broadcast Architecture handles <i>all</i> broadcast data as standard IP multicasts.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample Virtual Interface Walk-through</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_bpc_sample_virtual_interface_walk_through"></a>Sample Virtual Interface Walk-through</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The following steps briefly describe creation, use, and destruction for the Mc_out.dll sample. The Mc_out.dll functions mentioned in this section are described in greater detail in <a href="outrf_8jcj.htm">Virtual Interface Functions</a>.
<ol>
<li>
At run time, the MMR loads Mc_out.dll with an output loader and retrieves the address of each exported function of the DLL. The MMR then calls the <b>msbdnOutputCreate</b> function and specifies the version of the required output system so it can retrieve details of the specific virtual interface implementation. The <b>msbdnOutputCreate</b> function then connects to the appropriate output system with specific options obtained from the virtual interface's configuration and configures the output system. The <b>msbdnOutputCreate</b> function calls the WinSock <b>socket</b> function to create a socket that uses UDP for the Internet address family and then calls the WinSock <b>bind</b> function to bind a local address to such a socket. If the socket could not be bound to a UDP/IP port, <b>msbdnOutputCreate</b> calls the <b>msbdnBridgeReportEvent</b> function and passes the EVENTLOG_ERROR_TYPE error type and the error code provided by WinSock to inform the MMR to record the error directly in the system event log.</li>
<li>
When the MMR requires dynamic values of the virtual interface's configuration, it calls the <b>msbdnOutputGetValueCount</b> and <b>msbdnOutputGetValue</b> functions.</li>
<li>
When the MMR assigns a dynamic value to a virtual interface's configuration, it calls the <b>msbdnOutputSetValue</b> function.</li>
<li>
When the MMR has data to send, it calls the <b>msbdnOutputSendPacket</b> function to send a packet of a data stream to the output system. After <b>msbdnOutputSendPacket</b> has finished processing the packet, it informs the MMR by calling the <b>PacketBufferComplete </b>function and provides status on the completed packet.</li>
<li>
Before exiting, the MMR calls the <b>msbdnOutputDestroy</b> function to stop all data transmissions and free all resources that the virtual interface allocated.</li>
</ol>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Virtual Interface Functions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_bpc_virtual_interface_functions"></a>Virtual Interface Functions</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Hardware vendors should implement the virtual interface functions described in this section. These functions package data from a stream into a specific format, so a particular broadcast encoder can transmit the data stream over a particular network.</p>
<p>
Hardware vendors should build their virtual interfaces as dynamic-link libraries (DLLs) that the MMR loads at run time. A virtual interface DLL must implement all the functions listed following that are specified as required. Only virtual interface DLLs that support dynamic configuration must implement the functions listed following that are specified as optional. A virtual interface DLL that supports dynamic configuration enables the MMR to query or set any number of values defined by the virtual interface. Implementation of dynamic configuration is strongly encouraged.</p>
<p>
Each virtual interface must be able to safely host multiple instances of an output system. In other words, the MMR should be able to load a virtual interface more than once with separate parameters and route different packet streams to such different instances of a virtual interface. The MMR should be able to independently start and stop each instance of a virtual interface; that is, the MMR should be able to load and unload a driver instance from the MMR's address space.</p>
<p>
At run time, the MMR loads the appropriate virtual interface DLL with an output loader. The output loader calls the <b>RegQueryValueEx</b> function, which is part of the Microsoft® Win32® application programming interface (API). The output loader passes <b>RegQueryValueEx </b>the string OutputDLL to retrieve the file name of the virtual interface DLL. The output loader then calls the <b>LoadLibrary</b> Win32 function and passes this file name to retrieve a handle to the output DLL. The output loader uses this handle in calls to the <b>GetProcAddress</b> Win32 function. These calls get the address of each exported function of the virtual interface DLL. To locate documentation on these Win32 API functions that the output loader calls, see <a href="abou1_2rvy.htm">Further Server Information</a>.</p>
<p>
The following table lists and describes the virtual interface functions.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Function</th>
<th align=left width=57%>Description</th>
</tr>
<tr valign=top>
<td width=43%><a href="outrf_5v1h.htm"><b>msbdnOutputCreate</b></a></td>
<td width=57%>Creates and initializes a single instance of a virtual interface. This function is required.</td>
</tr>
<tr valign=top>
<td width=43%><a href="outrf_0sl5.htm"><b>msbdnOutputDestroy</b></a></td>
<td width=57%>Destroys an instance of a virtual interface. This function is required.</td>
</tr>
<tr valign=top>
<td width=43%><a href="outrf_8ywi.htm"><b>msbdnOutputFreeBuffer</b></a></td>
<td width=57%>Frees a buffer returned by <b>msbdnOutputGetValue</b>. This function is optional.</td>
</tr>
<tr valign=top>
<td width=43%><a href="outrf_1ir7.htm"><b>msbdnOutputGetStatus</b></a></td>
<td width=57%>Retrieves the status of a virtual interface. This function is required.</td>
</tr>
<tr valign=top>
<td width=43%><a href="outrf_8srp.htm"><b>msbdnOutputGetValue</b></a></td>
<td width=57%>Retrieves a configuration value of a virtual interface. This function is optional.</td>
</tr>
<tr valign=top>
<td width=43%><a href="outrf_7cok.htm"><b>msbdnOutputGetValueCount</b></a></td>
<td width=57%>Retrieves the number of configuration values supported by a virtual interface. This function is optional.</td>
</tr>
<tr valign=top>
<td width=43%><a href="outrf_08fo.htm"><b>msbdnOutputSendPacket</b></a></td>
<td width=57%>Sends all packets of a data stream to the output system. This function is required.</td>
</tr>
<tr valign=top>
<td width=43%><a href="outrf_11d1.htm"><b>msbdnOutputSetValue</b></a></td>
<td width=57%>Assigns a configuration value to a virtual interface. This function is optional.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

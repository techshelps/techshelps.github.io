<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Converting Events to Low-Level Syntax</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_bpc_converting_events_to_low_level_syntax"></a>Converting Events to Low-Level Syntax</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
You can write stream compiler language statements in either <i>high-level </i>syntax or <i>low-level</i> syntax. Writing the stream in high-level syntax enables you to compactly specify multiaction events. This makes the stream easier to create and read. If, however, you use <a href="rcen_9pb8.htm"><b>ipsend</b></a> to transmit the events <b>ipsend</b> transmits the events as low-level events. Because of this, you should convert the stream to low-level syntax before you transmit it.</p>
<p>
Converting a stream to low-level syntax breaks each compound event into its constituent events. For example, the following stream uses high-level syntax to indicate that two files and their dependencies should be broadcast and that the second file, Second.htm, should be broadcast repeatedly for the first thirty minutes of the show.</p>
<pre><code>before 00:00:20.00 "First.htm"; 
00:00:21.00 "Second.htm repeat 300 until 1800;
 </code></pre>
<p>
When this statement is converted to low-level syntax, it is broken into the following set of events, assuming that the red.gif, green.gif, and yellow.gif files are <a href="rcen_950z.htm">dependencies</a> of the First.htm file:</p>
<pre><code>00:00:04.98 "yellow.gif" only Group "7865584";
00:00:09.98 "green.gif" only Group "7865584";
00:00:14.99 "red.gif" only Group "7865584";
before 00:00:20.00 "First.htm" only depends("red.gif" "green.gif" "yellow.gif") Group "7865584,head";
00:00:21.00 "Second.htm" only Group "7865712,head";
before 00:05:21.00 "Second.htm" only Group "7865712";
before 00:10:21.00 "Second.htm" only Group "7865712";
before 00:15:21.00 "Second.htm" only Group "7865712";
before 00:20:21.00 "Second.htm" only Group "7865712";
before 00:25:21.00 "Second.htm" only Group "7865712";
 </code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;The Group and depend microevents in the low-level version of the stream are added by the stream compiler objects when the stream is converted to low-level syntax. These microevents store information that enables the stream compiler objects to reassemble the stream into high-level format. </p>
<p>
To convert an enhancement stream from high-level syntax to low-level syntax, your application can call <a href="rcen_7acu.htm"><b>EnhEvents.Flatten</b></a>. The <a href="rcen_4qwe.htm"><b>EnhEvents.UnFlatten</b></a> method reverses the process, converting a previously-flattened stream back into its original high-level syntax. </p>
<p>
Note that <b>UnFlatten</b> uses the Group values when rebuilding the events. If your application alters or changes these values, the <b>UnFlatten</b> method may fail or produce unexpected results.</p>
<p>
For example, the following loads an enhancement stream from the file EnhStr.txt, converts the stream to low-level syntax, and then saves the low-level stream to the file EnhStrFlat.txt.</p>
<pre><code>Dim evs As IEnhEvents
Set evs = New EnhEvents
evs.Load("C:\EnhTools\EnhStr.txt")
evs.Flatten
evs.Store("C:\EnhTools\EnhStrFlat.txt")
 </code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;The Group information that the stream compiler objects use to re-assemble flattened streams is based on handle values and is not guaranteed to be unique if the stream is stored and then reloaded. Because of this, you should avoid unflattening streams loaded from a file.</p>
<p>
In addition to converting the entire stream to low-level syntax you can convert a single event in the stream. To do this use the <a href="rcen_014e.htm"><b>EnhEvent.Flatten</b></a> method. Use this method instead of <b>EnhEvents.Flatten</b> when you only need to convert a single event. For example, if you wanted the stream compiler objects to generate a dependency list for a single event in the stream, you could use <b>EnhEvent.Flatten</b> and save the processing overhead of converting the entire stream. </p>
<p>
To convert a single event back into high-level syntax, use <a href="rcen_223y.htm"><b>EnhEvent.UnFlatten</b></a>. This causes all events that were part of the original, high-level, event to be recombined into a single event. In other words, all events that have the same Group number as the event on which you called <b>UnFlatten</b> are converted back into a single high-level event. </p>
<p>
Because <b>EnhEvent.UnFlatten</b> uses the Group information to rebuild the event, your application should not alter this information. If it does, <b>UnFlatten</b> may fail or produce unexpected results.</p>
<p>
You can only call <b>EnhEvent.Flatten</b> and <b>EnhEvent.UnFlatten</b> for events that are part of an enhancement stream. Calling these methods on events that are not part of the enhancement stream causes the methods to return an error.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Registering an ITVControl Sink</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_bpc_registering_an_itvcontrol_sink"></a>Registering an ITVControl Sink</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
To receive event notifications from WebTV for Windows, your application must first implement the <a href="tvxrf_0ujw.htm"><b>ITVControl</b></a> interface. Then, when your application runs, it must obtain a reference to WebTV for Windows, as described in <a href="tvxrf_862b.htm">Getting a Pointer to WebTV for Windows</a>. After obtaining this reference, your application then registers its implementation of <b>ITVControl</b> as a notification sink.</p>
<p>
<b>Note</b>&nbsp;&nbsp;Currently, WebTV for Windows only sends notifications to applications running in the same process as WebTV for Windows. An example of such an application is a Microsoft® ActiveX® control or component called from an enhancement page that is currently being displayed by WebTV for Windows.</p>
<p>
This process is demonstrated in the following example. Note that <code>m_xTVControl </code>is a member variable implementation of <b>ITVControl</b>.</p>
<pre><code>IUnknown *punk = NULL;
ITVViewer *ptvx = NULL;
HRESULT hr;
LPCONNECTIONPOINTCONTAINER pcpc = NULL;
 
//Get the ITVViewer interface
GetActiveObject(CLSID_TVViewer, NULL, &amp;punk);
 
//If the interface is not found, return VARIANT_FALSE
if (punk == NULL)
  return VARIANT_FALSE;
 
punk-&gt;QueryInterface(IID_ITVViewer, (void **)&amp;pvtx);
punk-&gt;Release();
 
//Get the IID_TVControl connection point
ptvx-&gt;QueryInterface(IID_IConnectionPointContainer, (void**)&amp;pcpc);
if (pcpc == NULL)
{
  ptvx-&gt;Release();
  ptvx = NULL;
  return VARIANT_FALSE;
}
 
pcpc-&gt;FindConnectionPoint(IID_ITVControl, &amp;pcpTVControl);
pcpc-&gt;Release();
if (pcpTVControl == NULL)
{
  ptvx-&gt;Release();
  ptvx = NULL;
  return VARIANT_FALSE;
}
 
//Ask the connection point to advise on m_xTVControl
hr = pcpTVControl-&gt;Advise(&amp;m_xTVControl, &amp;dwTVControl);
if (FAILED(hr))
{
  pcpTVControl-&gt;Release();
  pcpTVControl = NULL;
  ptvx-&gt;Release();
  ptvx = NULL;
  return VARIANT_FALSE;
}
 
ptvx-&gt;Release();
return VARIANT_TRUE;
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

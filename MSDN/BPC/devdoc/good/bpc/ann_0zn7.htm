<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Receiver Applications</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_bpc_receiver_applications"></a>Receiver Applications</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
When an Announcement Listener filter registers interest in receiving a data stream, it must provide the name of an application for the actual capture (and possible storage) of that stream. The only defined interface between a filter and a receiver application is that of command line parameters, though obviously, if allied more tightly in their designs they can share richer communication.</p>
<p>
Announcement Listener spawns a receiver application before the broadcast of the desired data stream and provides the receiver application with the IP address and port of that stream as a command line parameter. The receiver application is then solely responsible for interpreting the format of the data stream, storing the data stream if desired, launching other applications, and taking any other appropriate actions. For more information, see <a href="ann_7ilh.htm">Receiver Application Command Line</a>.</p>
<p>
Broadcast Architecture includes a generic receiver application for the transfer of files. This application captures files broadcast in the Common Content Framework for Interactive Programming format, and saves them in a directory on the client computer system designated for this purpose.</p>
<p>&nbsp;</p></body>
</HTML>

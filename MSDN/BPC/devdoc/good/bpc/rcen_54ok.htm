<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding User-Defined Comments to an Event</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_bpc_adding_user_defined_comments_to_an_event"></a>Adding User-Defined Comments to an Event</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
You can add custom data strings to an event. These strings can be used either as comments or to store custom syntax to be processed internally by your authoring tool. The stream compiler objects delete these user-defined strings when the stream is converted to low-level syntax or saved to a file. </p>
<p>
User-defined strings are stored in the event as microevents. A <i>microevent </i>is an event within an event. </p>
<p>
For example, the following example adds an event that contains two microevents. The first microevent specifies that a file be downloaded, and the second stores a user-defined string. Note that the keyword <b>userdef</b> identifies the second microevent as a user-defined string. To locate more information about <b>userdef</b> and other stream compiler syntax, see <a href="abou1_1uk4.htm">Further Information on Data Services for the Client</a>. </p>
<pre><code>evs.AddText("0:32.0 { file1.htm userdef ""This is a user-defined string"" };")
 </code></pre>
<p>
You can access microevents using the <a href="rcen_4gvm.htm"><b>EnhEvent.Attr</b></a> and <a href="rcen_6ixx.htm"><b>EnhEvent.Opcode</b></a> properties. <b>EnhEvent.Attr</b> contains a collection of the microevent's text. For example, the following example extending the preceding one displays two message boxes, each containing the text of a microevent.</p>
<pre><code>Dim e As IEnhEvent
Set e = evs.LastAdd()
Msgbox e.Attr(0)       'Displays "file1.htm"
Msgbox e.Attr(1)       'Displays "This is a user-defined string"
 </code></pre>
<p>
You can set or retrieve the type of microevents using <b>EnhEvent.Opcode</b>. This property contains a collection of flags identifying the microevent types. The preceding example sets <code>e.Opcode(0)</code> to EVOPdownload and <code>e.OpCode(1)</code> to EVOPuserdef. EVOPdownload is a numerical flag that specifies that the microevent is to download a file, and EVOPuserdef specifies a user-defined string. </p>
<p>
If you change the type of a microevent, you typically must also change the corresponding text. This requirement comes from the fact that different stream compiler syntax is required for different kinds of events. To locate more information on stream compiler syntax, see <a href="abou1_1uk4.htm">Further Information on Data Services for the Client</a>. </p>
<p>
The number of microevents available in a event is enumerated by the property <a href="rcen_5yb8.htm"><b>EnhEvent.AttrCount</b></a>. In the previous example, <code>e.AttrCount</code> returns 2. </p>
<p>
You can add a microevent to an event using either <b>EnhEvent.Attr</b> or <b>EnhEvent.Opcode</b>. To do so, set the value of a microevent with an index equal to the value of <b>EnhEvent.AttrCount</b>. Because microevent collections are zero-based, this index value is one greater than the value of the last microevent. Setting a value to this index adds a new microevent and increments <b>EnhEvent.AttrCount</b>. Note that you cannot add microevents at indexes greater than <b>EnhEvent.AttrCount</b>. You can only add one microevent at a time. </p>
<p>
The following example adds a microevent to the event created preceding.</p>
<pre><code>index = e.AttrCount
 
'Create a new microevent of type EVOPuserdef 
'and increment e.AttrCount by 1.
e.Opcode(index) = EVOPuserdef 
 
'Set the text of the new microevent
e.Attr(index) = "This is another user-defined string"
 </code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;Microevents that follow user-defined strings should only other be user-defined strings. In other words, you should not follow a user-defined string microevent by a microevent of any other type. The stream compiler objects return a syntax error if the microevents following a comment are anything but additional user-defined strings.</p>
<p>
For example, the following causes the stream compiler objects to return a syntax error because the second file transmission, File2.htm, microevent occurs after user comment.</p>
<pre><code>evs.AddText("0:32.0 { file1.htm userdef ""A user comment"" file2.htm};")
 </code></pre>
<p>
Both of the following examples, however, are syntactically correct.</p>
<pre><code>evs.AddText("0:32.0 { file1.htm file2.htm userdef ""A user comment"" };")
evs.AddText("0:32.0 { file1.htm userdef ""A user comment"" userdef ""Another comment""};")
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

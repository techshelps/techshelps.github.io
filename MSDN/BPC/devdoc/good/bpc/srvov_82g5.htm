<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Output System Software</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bpc_output_system_software"></a>Output System Software</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The virtual interface is a dynamic-link library (DLL) file that contains routines that the MMR can call to send packets to the broadcast hardware. The MMR keeps a list of which packets go to which virtual interface. For example, you can use Mmradm.exe to setup the MMR to send all packets arriving through a certain tunnel to the VBI virtual interface. The virtual interface copies the packets to the VBI device and signals the MMR when it can accept more data. To read about how to write a virtual interface module, see <a href="outsl_2sto.htm">Sample Virtual Interface DLL</a>.</p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

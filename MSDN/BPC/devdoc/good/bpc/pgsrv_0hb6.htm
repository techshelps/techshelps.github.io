<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About Loadstub</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bpc_about_loadstub"></a>About Loadstub</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Guide database loaders are all called as needed by a standard loader stub program. This stub program, Loadstub.exe, is scheduled to run at appropriate times to update the Guide database. </p>
<p>
When the stub program starts, it first parses the command line for recognized options. The options Loadstub recognizes are <b>/X</b>,<b> /R</b>, <b>/C</b>, <b>/E</b> and <b>/LEH</b>;<b> </b>for more information on these options, see <a href="pgsrv_782q.htm">Using Loadstub</a>. Loadstub passes any other options on to the loader. Loadstub parses options in this order:
<ol>
<li>
It executes the <b>/X </b>option to replace the database, if it exists.</li>
<li>
It starts the Microsoft® Jet database engine.</li>
<li>
It executes the <b>/R</b> option to repair the database, if this option exists, and does a quick check and repair of corruption errors if it does not.</li>
<li>
It executes the <b>/C</b> option to compact the database, if the option exists. The <b>/C</b> also repairs the database before compaction.</li>
<li>
It executes the <b>/E</b> option, if it exists, to empty a specified tuning space.</li>
<li>
It executes the <b>/LEH </b>option to load the specified enhancements file, if the option exists.</li>
</ol>
<p>
Once Loadstub has parsed all options, it: 
<ol>
<li>
Uses the globally unique identifier (GUID) from the command line to extract the name of the loader DLL from the registry.</li>
<li>
Extracts user and password information from the loader.</li>
<li>
Opens a workspace in the DAO database named <code>LoaderWSP</code> and a user named <code>loader</code>.</li>
<li>
Creates a window message by calling the <b>RegisterWindowMessage </b>function, part of the Microsoft® Win32® application programming interface (API). On the <b>RegisterWindowMessage</b> call, Loadstub passes the string representation of the loader's GUID.</li>
<li>
Broadcasts an EPGLDR_STARTING message to notify broadcast client applications that the database is receiving updated data. For more information on broadcast window messages, see <a href="pgsrv_0ws3.htm">Sending Loader Event Notifications</a>.</li>
<li>
Starts the loader DLL.</li>
<li>
Broadcasts an EPGLDR_ENDING message to notify client applications that the database update is completed and to indicate success or failure.</li>
<li>
Updates the <b>LastAttempt</b> and <b>LastRun</b> entries in the <b>Program Guide Loaders</b> key of the system registry.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

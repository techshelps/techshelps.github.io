<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scheduling Data Reception</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_bpc_scheduling_data_reception"></a>Scheduling Data Reception</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Announcement Listener must maintain a time-ordered queue of pending broadcasts and start the receiver applications sufficiently before their broadcasts so that they are loaded and ready when the data becomes available. If an announcement precedes its broadcast by a significant length of time, some client computers may be rebooted during that span. This means that the queue for broadcasts must be persistent.</p>
<p>
<a href="glos_9mic.htm#_bpc_task_scheduler_gly">Task Scheduler</a> is a resource included with the Microsoft® Windows® 98 operating system. Task Scheduler enables Announcement Listener to launch receiver applications at pre-specified times. The queue is stored on the hard disk, and thus persists across machine reboots. (Other components of the Broadcast Architecture also use the Task Scheduler for reminders of television shows.)</p>
<p>
The Task Scheduler has a programmatic Component Object Model (COM) interface, as well as a simple user interface. Announcement Listener uses only the programmatic interface.</p>
<p>&nbsp;</p></body>
</HTML>

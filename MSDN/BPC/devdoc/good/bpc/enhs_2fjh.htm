<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Characteristics of a Well-Formed Enhancement Stream</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bpc_characteristics_of_a_well_formed_enhancement_stream"></a>Characteristics of a Well-Formed Enhancement Stream</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Whatever type of authoring tool you create, the result should be a well-formed stream that transmits enhancements to the client efficiently and robustly. This topic describes guidelines that your authoring tool can follow to create well-formed enhancement streams.</p>
<p>
One of the greatest challenges of any enhancement stream is to handle the case where a viewer tunes into a show in the middle of a broadcast. Because viewers often switch channels or "channel-surf," you cannot assume that broadcast clients will receive an entire stream. To handle this, a well-formed stream repeats events. For example, if the client misses the first occurrence of an announcement or trigger, it can receive the second, third, or fourth occurrence.</p>
<p>
A related concern is ensuring that the client receives enhancements with all their dependency files. For example, if an enhancement displays three images, the client must receive all three images or the enhancement will appear broken when it is displayed. You can ensure that dependencies are transmitted with their parent files by specifying <a href="rcen_8put.htm"><b>EnhEvent.onefile</b></a> as True for download events. When <b>onefile</b> is True, the stream compiler automatically packages the file and its dependencies into a cabinet file for transmission. </p>
<p>
You can also package files into cabinet files explicitly using the <a href="rcen_2gma.htm"><b>EnhCab</b></a> object provided by the <a href="rcen_4a2h.htm">ipenhsnd Type Library</a>. Note that if you use <b>EnhCab</b> to package files, you must add a trigger event to the stream to unpackage the cabinet. If you use <b>onefile</b>, this is done for you.</p>
<p>
To handle these and other challenges, a well-formed stream has the following attributes:
<ul>
<li>
A single announcement that is repeated as often as possible.</li>
<li>
A single data trigger that is repeated as often as possible.</li>
<li>
All navigation targets, items that can be named in the <b>[targ: ]</b> attribute of a Nav trigger, are part of the enhancement base page.</li>
<li>
Files are transmitted with their dependencies, packaged together into a cabinet file.</li>
</ul>
<p>
To view an example of a well-formed enhancement stream, see <a href="enhs_67ql.htm">Outline of a Typical Enhancement Stream</a>. </p>
<p>&nbsp;</p></body>
</HTML>

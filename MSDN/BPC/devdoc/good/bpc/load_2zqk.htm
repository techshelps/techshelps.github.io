<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Making a Loader DLL</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bpc_making_a_loader_dll"></a>Making a Loader DLL</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
A loader is a dynamic-link library (DLL) that can be called by Loadstub.exe, a component that starts loader applications. The prototype for an entry-point function for a loader is:</p>
<pre><code>ExitCodeList APIENTRY
EPG_DBLoad(int &amp;argc, _TCHAR **argv, CdbDBEngine &amp;db 
    , PFNFORCEQUIT pfnForceQuit);
 </code></pre>
<p>
The mechanism for passing the specific information that a loader requires is to include the information as command-line arguments to Loadstub.</p>
<p>
Loadstub passes the command-line arguments that it does not handle itself to the entry-point function of a loader when that loader is called. These arguments are passed by means of the entry-point function's first two arguments, <i>argc</i><b> </b>and <i>argv</i>. Any arguments your loader requires can be passed using these arguments. For example, Loadstub can pass the user's zip code to select the channels to load for a given region. For more information on Loadstub and its arguments, see <a href="pgsrv_5ew2.htm">Loadstub</a>.</p>
<p>
In addition to such loader-specific arguments, Loadstub can pass a <b>/c </b>argument to request that the loader compact the database, or a <b>/p </b>argument to request a partial database update. For more information on how to handle these arguments, see <a href="load_7ddf.htm">Removing Records Using Special Functions</a>. </p>
<p>
Another command-line argument a user or setup application can specify is <b>/L</b>, which tells the loader about the source of the data. The format of this argument depends on the data source. For example, if the data comes from the Internet, the argument can be the Uniform Resource Locator (URL) of the data source.</p>
<p>
The third argument for the entry-point function, <i>db</i>, is a reference to the DAO database engine. This value must be passed to any function that accesses the Guide database. To locate more information on the <b>CdbDBEngine </b>object used in this argument, see <a href="abou1_7g11.htm">Further Information on Development Tasks in Broadcast Architecture</a>. The sample loader saves the value in a member of the application object called <b>m_pDAODB</b>.</p>
<p>
The last argument, <i>pfnForceQuit</i>, is a pointer to a function that returns a value that is TRUE if the operating system is trying to shut down the loader, and FALSE otherwise. Your loader should check this function from time to time to see if the loader should shut down. Doing so prevents the operating system from forcing the loader to exit without performing necessary cleanup operations, such as closing databases and releasing system resources.</p>
<p>&nbsp;</p></body>
</HTML>

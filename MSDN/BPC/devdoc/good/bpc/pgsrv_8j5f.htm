<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Processing Quit Events</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_bpc_processing_quit_events"></a>Processing Quit Events</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
While a loader is loading data into the Guide database loadstub cannot check for messages from the operating system. Thus, there is no way for the loader to receive a notification to quit processing.</p>
<p>
Instead, Loadstub monitors the operating system message queue for quit event notifications. At convenient times in loader processing, your loader should call the function at the address in <i>pfnForceQuit</i>. Note that Loadstub.exe passes this address to the loader through a parameter for the DLL's entry-point function. T<i>his </i>function enables Loadstub to forward quit event notifications to the loader so that the loader can stop processing, if necessary.</p>
<p>
Your loader can implement this functionality by calling the following code whenever loader processing can be gracefully stopped</p>
<pre><code>if ((*pfnForceQuit()){ 
  //Code to clean up and gracefully exit the loader
}
 </code></pre>
<p>
where <i>pfnForceQuit </i>was passed in the entry-point function.</p>
<p>&nbsp;</p></body>
</HTML>

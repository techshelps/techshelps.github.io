<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IFilterField</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bpc_ifilterfield"></a>IFilterField</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
This is the heart of the generic filter; the interface through which the numeric or regular expression to match a field in an announcement can be set or retrieved. </p>
<p>
Following is a preliminary description of the interface.</p>
<pre><code>enum BPC_FieldType {AddressField, PatternField, NumericField, UndefinedField};
 
interface IFilterField : IDispatch
{
[id(DISPID_VALUE), propget] HRESULT MatchString([out, retval] BSTR *MatchString);
[id(DISPID_VALUE), propput] HRESULT MatchString([in] BSTR MatchString);
[id(1), propput] HRESULT FieldType([in] BPC_FieldType FieldType);
[id(3), propget] HRESULT Name([out, retval] BSTR* lpbstrReturn);
};
 </code></pre>
<p>
When added, a field has type <i>BPC_FieldType::UndefinedField</i>. The filter then only requires that the field be present in an announcement, without regard to its content. If a field is given a type of <i>BPC_FieldType:PatternField</i> or <i>BPC_FieldType:NumericField</i> then the <i>MatchString</i> is interpreted as a regular expression to be matched, or a numeric expression to be evaluated for truth or falsehood, respectively. </p>
<p>
The numeric expression evaluator accepts the following operators: &lt;, &gt;, &gt;=, &lt;=, ==, !=, +, -, /, *, ), (, &amp;&amp;, ||, &amp;, ~, |, ^, and !. Their meaning is similar to the same in the C language. Anywhere that a question mark appears in the expression, it is replaced by the numeric value of the field. All operations are carried out with double precision floating point numbers.</p>
<p>
The regular expression evaluator uses accept the same patterns as the one in the Visual C++ version 4.1 IDE. This should be specified more completely in a future version of this document.</p>
<p>
If a field type is set to <i>BPC_FieldType:AddressField</i>, then the value of the field is parsed as an Internet Protocol (IP) address. A variety of formats may be supported for this type.</p>
<p>&nbsp;</p></body>
</HTML>

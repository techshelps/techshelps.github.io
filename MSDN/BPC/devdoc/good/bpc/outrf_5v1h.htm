<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>msbdnOutputCreate</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bpc_msbdnoutputcreate"></a>msbdnOutputCreate</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>msbdnOutputCreate</b> function creates and initializes a single instance of a virtual interface.</p>
<pre><code><b>HRESULT msbdnOutputCreate(
  OUT MSBDN_OUTPUT_SUBSYSTEM *</b><i>Subsystem</i><b>,</b>
  <b>IN DWORD</b> <i>ApiVersion</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>Subsystem</i></dt>
<dd>
Address of an <a href="outrf_9w31.htm"><b>MSBDN_OUTPUT_SUBSYSTEM</b></a> structure that is to receive details about the virtual interface implementation. This function fills the structure with information about the virtual interface and the output device that the MMR is to send data to.</dd>
<dt>
<i>ApiVersion</i></dt>
<dd>
Highest version of the virtual interface interface that the caller can use. The high-order bytes specify the minor version number, for example version <i>x</i>.1. The low-order bytes specify the major version number, for example version 1.
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns zero if the function was successful. If the function fails, the return value is non-zero. If this function is unable to allocate memory for an instance of the virtual interface, this function should return E_OUTOFMEMORY.</p>
<h4>Remarks</h4>
<p>
After loading a virtual interface DLL, the MMR immediately calls the <b>msbdnOutputCreate</b> function. This function is only called once, and no other virtual interface functions are called until this function returns.</p>
<p>
The <b>msbdnOutputCreate</b> function should create any synchronization objects that it requires and try to connect to and initialize the appropriate output system or device drivers it will use. If a virtual interface DLL stores values in the registry when the DLL starts, <b>msbdnOutputCreate</b> should call the <b>RegQueryValueEx</b> Win32 function for each configuration value and pass the open registry key contained in the <i>Subsystem</i> parameter, the name of the configuration value to retrieve, and a buffer to hold the configuration data. The <b>msbdnOutputCreate</b> function could also provide default data for each configuration value. The <b>msbdnOutputCreate</b> function should then store retrieved or provided configuration data in values defined by the virtual interface. When the MMR requires a dynamic value from the virtual interface's configuration, the MMR calls <a href="outrf_8srp.htm"><b>msbdnOutputGetValue</b></a> to retrieve such a value.</p>
<p>
If <b>msbdnOutputCreate</b> cannot initialize an instance of the virtual interface, it should return a failure condition. The <b>msbdnOutputCreate</b> function should only return a failure condition if there is some condition that prevents the virtual interface from ever running correctly. For example, the virtual interface should not return an error condition if some configuration parameter prevents the hardware from functioning because the virtual interface can only change configuration parameters of the hardware if this function succeeds.</p>
<p>
The <b>msbdnOutputCreate</b> function allows the MMR to specify the version of the virtual interface interface that a particular virtual interface is required to support. The function also allows the MMR to retrieve details about the virtual interface's implementation. </p>
<p>
In order for the MMR to support future implementations of the virtual interface interface that might have functionality different from that current, a negotiation should take place in <b>msbdnOutputCreate</b>. The MMR and the particular virtual interface DLL indicate to each other the highest interface version that they can support. Each confirms that the other's highest version is acceptable, if it is. </p>
<p>
To do so, the virtual interface DLL examines the version requested by the MMR. If this version is equal to or higher than the lowest version supported by the DLL, the call succeeds. On a successful call, the DLL returns<i> </i>the highest version it supports in the <b>Version </b>member of <b>MSBDN_OUTPUT_SUBSYSTEM</b>. In the structure's <b>Version </b>member, the virtual interface DLL returns either the highest version it supports or the version number that the MMR is requesting, whichever is lower.<i> </i></p>
<p>
After <b>msbdnOutputCreate</b> returns, the virtual interface DLL works under the assumption that the MMR uses the interface version returned in <b>Version</b><i>. </i>If the MMR cannot work with this version, the MMR does not call any other virtual interface functions.</p>
<p>
This negotiation allows both a virtual interface DLL and the MMR to support a range of function versions. The MMR can successfully use a virtual interface DLL if there is any overlap in the version ranges.</p>
<h4>See Also</h4>
<p>
<a href="outrf_0sl5.htm"><b>msbdnOutputDestroy</b></a>, <a href="outrf_8srp.htm"><b>msbdnOutputGetValue</b></a>, <a href="outrf_9w31.htm"><b>MSBDN_OUTPUT_SUBSYSTEM</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

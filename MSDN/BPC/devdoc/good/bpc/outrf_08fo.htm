<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>msbdnOutputSendPacket</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bpc_msbdnoutputsendpacket"></a>msbdnOutputSendPacket</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>msbdnOutputSendPacket</b> function sends all packets of a data stream to the output system.</p>
<pre><code><b>HRESULT msbdnOutputSendPacket(
  IN MSBDN_OUTPUT_SUBSYSTEM *</b><i>Subsystem</i><b>,</b>
<b>  IN PACKET_BUFFER *</b><i>Packet</i><b>    </b>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>Subsystem</i></dt>
<dd>
Address of an <a href="outrf_9w31.htm"><b>MSBDN_OUTPUT_SUBSYSTEM</b></a> structure that contains details about the virtual interface implementation.</dd>
<dt>
<i>Packet</i></dt>
<dd>
Address of a <a href="outrf_0xf6.htm"><b>PACKET_BUFFER</b></a> structure that describes a packet of data.
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns zero if the virtual interface successfully transmitted the packet. If the function fails, the return value is non-zero. </p>
<h4>Remarks</h4>
<p>
While a stream is active, the stream functionality of the MMR calls the <b>msbdnOutputSendPacket</b> function in the virtual interface DLL. The MMR does so to send a stream's data packets to the broadcast encoder or to other output systems. The <b>msbdnOutputSendPacket</b> function is responsible for translating protocol types, generating network-specific addresses, and reformatting data to follow network-specific protocols.</p>
<p>
The virtual interface can alter the <b>Start</b> and <b>End</b> members of a <b>PACKET_BUFFER</b> structure and can alter the memory to which the <b>Data</b> member of <b>PACKET_BUFFER</b> points. However, the virtual interface must not alter the information within the <b>Data</b> member itself. The MMR stores the actual data that the virtual interface transmits in the buffer to which the <b>Data</b> member of <b>PACKET_BUFFER</b> points. The data that the virtual interface transmits begins at the index given by the <b>Start</b> member of <b>PACKET_BUFFER</b> and ends at the index given by the <b>End</b> member of <b>PACKET_BUFFER</b>. The buffer for transmitted packets is structured in this manner to allow virtual interfaces to efficiently add or remove packet headers and trailers without requiring that the virtual interface copy the entire packet elsewhere in memory.</p>
<p>
The length of the actual packet data is determined by subtracting the <b>PACKET_BUFFER</b>'s <b>Start</b> member from its <b>End</b> member. Provided that there is sufficient space at the beginning of the packet buffer, the virtual interface could decrease the value of the <b>PACKET_BUFFER</b>'s <b>Start</b> member and then store new data in that memory location. The virtual interface could also extend the packet by increasing the <b>PACKET_BUFFER</b>'s <b>End</b> member. However, the virtual interface must never increase the value of the <b>PACKET_BUFFER</b>'s <b>End</b> member beyond its <b>Max</b> member. The virtual interface can also change the values of the <b>PACKET_BUFFER</b>'s <b>Start</b> and <b>End</b> members to decrease the length of the packet.</p>
<p>
Examples of the virtual interface manipulating packets include: 
<ul>
<li>
Removing an IP and then a UDP header in order to extract just the UDP body data</li>
<li>
Encapsulating an IP packet in a larger frame</li>
</ul>
<p>
The virtual interface can accomplish these tasks without copying the packet data, which facilitates high-speed applications.</p>
<p>
The virtual interface must "complete" the packet buffer when it is done processing it. If the virtual interface can finish processing the packet immediately, it should complete the packet buffer before returning from <b>msbdnOutputSendPacket</b>; this operation is synchronous. Otherwise, the virtual interface might store the packet in a queue and complete the packet later in a different thread; this operation is asynchronous.</p>
<p>
If the MMR receives data with protocol types it cannot decipher, it forwards the data to the virtual interface without modification.</p>
<h4>See Also</h4>
<p>
<a href="outrf_9w31.htm"><b>MSBDN_OUTPUT_SUBSYSTEM</b></a>, <a href="outrf_0s4l.htm"><b>PacketBufferComplete</b></a>, <a href="outrf_0xf6.htm"><b>PACKET_BUFFER</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

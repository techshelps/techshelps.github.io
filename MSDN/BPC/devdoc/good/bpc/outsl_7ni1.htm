<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample Virtual Interface Anatomy</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_bpc_sample_virtual_interface_anatomy"></a>Sample Virtual Interface Anatomy</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
After installing the Broadcast Architecture Programmer's Reference material, the Main.cpp files for both samples are available. These sample files aid the user in understanding the purpose of each sample and its relationship to the MMR. The following table shows how the MMR calls and the uses of the exported virtual interface functions. Documentation for the following exported virtual interface functions can be found in the <a href="outrf_8jcj.htm">Virtual Interface Functions</a> section.
<dl>
<dt>
<code>HRESULT msbdnOutputCreate( <br>
&nbsp;&nbsp;MSBDN_OUTPUT_SUBSYSTEM * subsystem,<br>
&nbsp;&nbsp;DWORD version);</code></dt>
<dd>
Creates and initializes a single instance of a virtual interface. This function is required.</dd>
<dt>
<code>HRESULT msbdnOutputDestroy( <br>
&nbsp;&nbsp;MSBDN_OUTPUT_SUBSYSTEM * subsystem);</code></dt>
<dd>
Destroys an instance of a virtual interface. This function is required.</dd>
<dt>
<code>HRESULT msbdnOutputFreeBuffer( <br>
&nbsp;&nbsp;MSBDN_OUTPUT_SUBSYSTEM * subsystem, <br>
&nbsp;&nbsp;LPVOID buffer);</code></dt>
<dd>
Frees a buffer returned by <b>msbdnOutputGetValue</b>. This function is optional.</dd>
<dt>
<code>HRESULT msbdnOutputGetStatus( <br>
&nbsp;&nbsp;MSBDN_OUTPUT_SUBSYSTEM * subsystem, <br>
&nbsp;&nbsp;HRESULT * status);</code></dt>
<dd>
Retrieves the status of a virtual interface. This function is required.</dd>
<dt>
<code>HRESULT msbdnOutputGetValue( <br>
&nbsp;&nbsp;MSBDN_OUTPUT_SUBSYSTEM * subsystem, <br>
&nbsp;&nbsp;MSBDN_OUTPUT_VALUE * value);</code></dt>
<dd>
Retrieves a configuration value of a virtual interface. This function is optional.</dd>
<dt>
<code>HRESULT msbdnOutputGetValueCount( <br>
&nbsp;&nbsp;MSBDN_OUTPUT_SUBSYSTEM * subsystem, <br>
&nbsp;&nbsp;DWORD * count);</code></dt>
<dd>
Retrieves the number of configuration values supported by a virtual interface. This function is optional.</dd>
<dt>
<code>HRESULT msbdnOutputSendPacket( <br>
&nbsp;&nbsp;MSBDN_OUTPUT_SUBSYSTEM * subsystem, <br>
&nbsp;&nbsp;PACKET_BUFFER * packet);</code></dt>
<dd>
Sends all packets of a data stream to the output system. This function is required.</dd>
<dt>
<code>HRESULT msbdnOutputSetValue( <br>
&nbsp;&nbsp;MSBDN_OUTPUT_SUBSYSTEM * subsystem, <br>
&nbsp;&nbsp;MSBDN_OUTPUT_VALUE * value);</code></dt>
<dd>
Assigns a configuration value to a virtual interface. This function is optional.
</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BPCVID.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_pdc_context284"></a>BPCVID.CPP</h2>
<pre><code>// 
// bpcvid.cpp: Implements the CBPCVid class  
// 
// Copyright (C) 1997 Microsoft Corporation 
// All rights reserved. 
// 
// This source code is only intended as a supplement to the 
// Broadcast Architecture Programmer's Reference. 
// For detailed information regarding Broadcast 
// Architecture, see the reference. 
// 
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++ 
 
// NOTE: Do not modify the contents of this file.  If this class is regenerated by 
//  Microsoft Visual C++, your modifications will be overwritten. 
 
 
#include "stdafx.h" 
#include "bpcvid.h" 
 
// Dispatch interfaces referenced by this interface 
#include "BPCBase.h" 
#include "BPCDev.h" 
 
///////////////////////////////////////////////////////////////////////////// 
// CBPCVid 
 
IMPLEMENT_DYNCREATE(CBPCVid, CWnd) 
 
///////////////////////////////////////////////////////////////////////////// 
// CBPCVid properties 
 
///////////////////////////////////////////////////////////////////////////// 
// CBPCVid operations 
 
BOOL CBPCVid::GetPower() 
{ 
BOOL result; 
InvokeHelper(0x3f0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetPower(BOOL bNewValue) 
{ 
static BYTE parms[] = 
VTS_BOOL; 
InvokeHelper(0x3f0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 bNewValue); 
} 
 
double CBPCVid::GetStartTime() 
{ 
double result; 
InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_R8, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetStartTime(double newValue) 
{ 
static BYTE parms[] = 
VTS_R8; 
InvokeHelper(0x3ea, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
double CBPCVid::GetStopTime() 
{ 
double result; 
InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_R8, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetStopTime(double newValue) 
{ 
static BYTE parms[] = 
VTS_R8; 
InvokeHelper(0x3eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
BOOL CBPCVid::GetVideoOn() 
{ 
BOOL result; 
InvokeHelper(0x3ec, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetVideoOn(BOOL bNewValue) 
{ 
static BYTE parms[] = 
VTS_BOOL; 
InvokeHelper(0x3ec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 bNewValue); 
} 
 
BOOL CBPCVid::GetClosedCaption() 
{ 
BOOL result; 
InvokeHelper(0x3ed, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetClosedCaption(BOOL bNewValue) 
{ 
static BYTE parms[] = 
VTS_BOOL; 
InvokeHelper(0x3ed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 bNewValue); 
} 
 
BOOL CBPCVid::GetDebug() 
{ 
BOOL result; 
InvokeHelper(0x3ee, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetDebug(BOOL bNewValue) 
{ 
static BYTE parms[] = 
VTS_BOOL; 
InvokeHelper(0x3ee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 bNewValue); 
} 
 
long CBPCVid::GetDeviceCount() 
{ 
long result; 
InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
CBPCDeviceBase CBPCVid::GetInput() 
{ 
LPDISPATCH pDispatch; 
InvokeHelper(0x3fc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;pDispatch, NULL); 
return CBPCDeviceBase(pDispatch); 
} 
 
void CBPCVid::SetInput(LPDISPATCH newValue) 
{ 
static BYTE parms[] = 
VTS_DISPATCH; 
InvokeHelper(0x3fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
CBPCDeviceBase CBPCVid::GetOutput() 
{ 
LPDISPATCH pDispatch; 
InvokeHelper(0x3fd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;pDispatch, NULL); 
return CBPCDeviceBase(pDispatch); 
} 
 
void CBPCVid::SetOutput(LPDISPATCH newValue) 
{ 
static BYTE parms[] = 
VTS_DISPATCH; 
InvokeHelper(0x3fd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
long CBPCVid::GetColorKey() 
{ 
long result; 
InvokeHelper(0x3f4, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetColorKey(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x3f4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
CString CBPCVid::GetFileName() 
{ 
CString result; 
InvokeHelper(0x3f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetFileName(LPCTSTR lpszNewValue) 
{ 
static BYTE parms[] = 
VTS_BSTR; 
InvokeHelper(0x3f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 lpszNewValue); 
} 
 
long CBPCVid::GetPriority() 
{ 
long result; 
InvokeHelper(0x3f6, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetPriority(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x3f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
long CBPCVid::GetVolume() 
{ 
long result; 
InvokeHelper(0x3f9, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetVolume(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x3f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
long CBPCVid::GetBalance() 
{ 
long result; 
InvokeHelper(0x3fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetBalance(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x3fa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
long CBPCVid::GetImageSourceHeight() 
{ 
long result; 
InvokeHelper(0x3fb, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
long CBPCVid::GetImageSourceWidth() 
{ 
long result; 
InvokeHelper(0x3f2, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
short CBPCVid::GetMovieWindowSetting() 
{ 
short result; 
InvokeHelper(0x3f3, DISPATCH_PROPERTYGET, VT_I2, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetMovieWindowSetting(short nNewValue) 
{ 
static BYTE parms[] = 
VTS_I2; 
InvokeHelper(0x3f3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
long CBPCVid::GetCurrentState() 
{ 
long result; 
InvokeHelper(0x3fe, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
double CBPCVid::GetCurrentPosition() 
{ 
double result; 
InvokeHelper(0x3ff, DISPATCH_PROPERTYGET, VT_R8, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetCurrentPosition(double newValue) 
{ 
static BYTE parms[] = 
VTS_R8; 
InvokeHelper(0x3ff, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
double CBPCVid::GetDuration() 
{ 
double result; 
InvokeHelper(0x400, DISPATCH_PROPERTYGET, VT_R8, (void*)&amp;result, NULL); 
return result; 
} 
 
double CBPCVid::GetPrerollTime() 
{ 
double result; 
InvokeHelper(0x3f1, DISPATCH_PROPERTYGET, VT_R8, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetPrerollTime(double newValue) 
{ 
static BYTE parms[] = 
VTS_R8; 
InvokeHelper(0x3f1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
double CBPCVid::GetRate() 
{ 
double result; 
InvokeHelper(0x402, DISPATCH_PROPERTYGET, VT_R8, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetRate(double newValue) 
{ 
static BYTE parms[] = 
VTS_R8; 
InvokeHelper(0x402, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
long CBPCVid::GetLocaleID() 
{ 
long result; 
InvokeHelper(0x403, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetLocaleID(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x403, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
LPDISPATCH CBPCVid::GetFont() 
{ 
LPDISPATCH result; 
InvokeHelper(DISPID_FONT, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetFont(LPDISPATCH newValue) 
{ 
static BYTE parms[] = 
VTS_DISPATCH; 
InvokeHelper(DISPID_FONT, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
short CBPCVid::GetDisplayMode() 
{ 
short result; 
InvokeHelper(0x401, DISPATCH_PROPERTYGET, VT_I2, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCVid::SetDisplayMode(short nNewValue) 
{ 
static BYTE parms[] = 
VTS_I2; 
InvokeHelper(0x401, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
long CBPCVid::GetHWnd() 
{ 
long result; 
InvokeHelper(DISPID_HWND, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
CBPCDevices CBPCVid::GetDevices() 
{ 
LPDISPATCH pDispatch; 
InvokeHelper(0x409, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;pDispatch, NULL); 
return CBPCDevices(pDispatch); 
} 
 
void CBPCVid::Run() 
{ 
InvokeHelper(0x404, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); 
} 
 
void CBPCVid::Pause() 
{ 
InvokeHelper(0x405, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); 
} 
 
void CBPCVid::Stop() 
{ 
InvokeHelper(0x406, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); 
} 
 
void CBPCVid::Close() 
{ 
InvokeHelper(0x407, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); 
} 
 
void CBPCVid::Open(LPCTSTR FileName) 
{ 
static BYTE parms[] = 
VTS_BSTR; 
InvokeHelper(0x408, DISPATCH_METHOD, VT_EMPTY, NULL, parms, 
 FileName); 
} 
 
void CBPCVid::Login(LPCTSTR UserName, LPCTSTR Password) 
{ 
static BYTE parms[] = 
VTS_BSTR VTS_BSTR; 
InvokeHelper(0x3f8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, 
 UserName, Password); 
} 
 
void CBPCVid::Tune(long lTuningSpace, long Channel, long VideoSubchannel, long AudioSubchannel) 
{ 
static BYTE parms[] = 
VTS_I4 VTS_I4 VTS_I4 VTS_I4; 
InvokeHelper(0x40b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, 
 lTuningSpace, Channel, VideoSubchannel, AudioSubchannel); 
} 
 
long CBPCVid::TSDeviceCount(long lTuningSpace) 
{ 
long result; 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x40c, DISPATCH_METHOD, VT_I4, (void*)&amp;result, parms, 
lTuningSpace); 
return result; 
} 
 
void CBPCVid::Refresh() 
{ 
InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); 
} 
 
void CBPCVid::AboutBox() 
{ 
InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); 
} </code></pre>
<p>&nbsp;</p></body>
</HTML>

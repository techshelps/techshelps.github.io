<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TVDISP.H</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_pdc_context271"></a>TVDISP.H</h2>
<pre><code>// tvdisp.h : TV Viewer sample application 
// 
// Copyright (C) 1997 Microsoft Corporation 
// All rights reserved. 
// 
// This source code is only intended as a supplement to the 
// Broadcast Architecture Programmer's Reference. 
// For detailed information regarding Broadcast 
// Architecture, see the reference. 
// 
///////////////////////////////////////////////////////////////////////////// 
// ITVViewer wrapper class 
 
class ITVViewer : public COleDispatchDriver 
{ 
public: 
ITVViewer() {}// Calls COleDispatchDriver default constructor 
ITVViewer(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {} 
ITVViewer(const ITVViewer&amp; dispatchSrc) : COleDispatchDriver(dispatchSrc) {} 
 
// Attributes 
public: 
 
// Operations 
public: 
void SetTVMode(BOOL fTVMode); 
BOOL IsTVMode(); 
BOOL IsChannelBarUp(); 
BOOL IsModalDialogUp(); 
BOOL IsLoaderActive(); 
DATE GlobalStartTime(); 
DATE GlobalEndTime(); 
LPUNKNOWN ChannelList(); 
long ViewerID(); 
void WantNumKeys(BOOL fWantNumKeys); 
void Tune(long lTuningSpace, long lChannelNumber, long lVideoStream, long lAudioStream, LPCTSTR bsIPStream); 
void GetCurrentTuningInfo(long* lTuningSpace, long* lChannelNumber, long* lVideoStream, long* lAudioStream, BSTR* pbsIPAddress); 
void GetPreviousTuningInfo(long* lTuningSpace, long* lChannelNumber, long* lVideoStream, long* lAudioStream, BSTR* pbsIPAddress); 
void SetReminder(LPUNKNOWN pEpisode, BOOL bRecord); 
BOOL HasReminder(LPUNKNOWN pEpisode, BOOL bRecord); 
void DeleteReminder(LPUNKNOWN pEpisode, BOOL bRecord); 
BOOL HasEnhancement(LPUNKNOWN pEpisode); 
BOOL IsCC(); 
}; 
///////////////////////////////////////////////////////////////////////////// 
// ITVControl wrapper class 
 
class ITVControl : public COleDispatchDriver 
{ 
public: 
ITVControl() {}// Calls COleDispatchDriver default constructor 
ITVControl(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {} 
ITVControl(const ITVControl&amp; dispatchSrc) : COleDispatchDriver(dispatchSrc) {} 
 
// Attributes 
public: 
 
// Operations 
public: 
BOOL OnIdle(); 
void Tune(long ltsNew, long lcnNew, long lvsNew, long lasNew, LPCTSTR bsIPNew, long ltsPrev, long lcnPrev, long lvsPrev, long lasPrev, LPCTSTR bsIPPrev); 
void TearDown(); 
void SyncEvent(long iEvent, LPCTSTR pParm1, LPCTSTR pParm2); 
void EpisodeStatusChanged(long iChange, LPUNKNOWN pEpi); 
void PowerChange(BOOL bPowerOn, BOOL bUIAllowed); 
void OnTVFocus(); 
void SetOutput(LPCTSTR bsDeviceName); 
BOOL GetCC(); 
void SetCC(BOOL bCC); 
}; </code></pre>
<p>&nbsp;</p></body>
</HTML>

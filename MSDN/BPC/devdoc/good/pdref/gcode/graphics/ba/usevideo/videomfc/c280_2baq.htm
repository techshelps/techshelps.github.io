<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BPCDEV.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_pdc_context282"></a>BPCDEV.CPP</h2>
<pre><code>// 
// bpcdev.cpp: Implements the CBPCDevices class  
// 
// Copyright (C) 1997 Microsoft Corporation 
// All rights reserved. 
// 
// This source code is only intended as a supplement to the 
// Broadcast Architecture Programmer's Reference. 
// For detailed information regarding Broadcast 
// Architecture, see the reference. 
// 
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++ 
 
// NOTE: Do not modify the contents of this file.  If this class is regenerated by 
//  Microsoft Visual C++, your modifications will be overwritten. 
 
 
#include "stdafx.h" 
#include "bpcdev.h" 
 
// Dispatch interfaces referenced by this interface 
#include "BPCBase.h" 
 
 
///////////////////////////////////////////////////////////////////////////// 
// CBPCDevices properties 
 
///////////////////////////////////////////////////////////////////////////// 
// CBPCDevices operations 
 
long CBPCDevices::GetCount() 
{ 
long result; 
InvokeHelper(0x5dd, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
LPUNKNOWN CBPCDevices::GetNewEnum() 
{ 
LPUNKNOWN lpUnk = NULL; 
InvokeHelper(-4, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&amp;lpUnk, NULL); 
return lpUnk; 
} 
 
void CBPCDevices::SetHWnd(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x5de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
void CBPCDevices::SetLcid(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x5df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
void CBPCDevices::SetNotify(LPDISPATCH newValue) 
{ 
static BYTE parms[] = 
VTS_DISPATCH; 
InvokeHelper(0x5e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
long CBPCDevices::GetColorKey() 
{ 
long result; 
InvokeHelper(0x5e2, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDevices::SetColorKey(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x5e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
long CBPCDevices::GetPriority() 
{ 
long result; 
InvokeHelper(0x5e3, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDevices::SetPriority(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x5e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
CBPCDeviceBase CBPCDevices::GetInput() 
{ 
LPDISPATCH pDispatch; 
InvokeHelper(0x5e4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;pDispatch, NULL); 
return CBPCDeviceBase(pDispatch); 
} 
 
void CBPCDevices::SetInput(LPDISPATCH newValue) 
{ 
static BYTE parms[] = 
VTS_DISPATCH; 
InvokeHelper(0x5e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
CBPCDeviceBase CBPCDevices::GetOutput() 
{ 
LPDISPATCH pDispatch; 
InvokeHelper(0x5e5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;pDispatch, NULL); 
return CBPCDeviceBase(pDispatch); 
} 
 
void CBPCDevices::SetOutput(LPDISPATCH newValue) 
{ 
static BYTE parms[] = 
VTS_DISPATCH; 
InvokeHelper(0x5e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
BOOL CBPCDevices::GetVideoOn() 
{ 
BOOL result; 
InvokeHelper(0x411, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDevices::SetVideoOn(BOOL bNewValue) 
{ 
static BYTE parms[] = 
VTS_BOOL; 
InvokeHelper(0x411, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 bNewValue); 
} 
 
CBPCDeviceBase CBPCDevices::Item(const VARIANT&amp; v) 
{ 
LPDISPATCH pDispatch; 
static BYTE parms[] = 
VTS_VARIANT; 
InvokeHelper(0x5dc, DISPATCH_METHOD, VT_DISPATCH, (void*)&amp;pDispatch, parms, 
&amp;v); 
return CBPCDeviceBase(pDispatch); 
} 
 
void CBPCDevices::Tune(long lTuningSpace, long Channel, long VideoSubchannel, long AudioSubchannel) 
{ 
static BYTE parms[] = 
VTS_I4 VTS_I4 VTS_I4 VTS_I4; 
InvokeHelper(0x5e6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, 
 lTuningSpace, Channel, VideoSubchannel, AudioSubchannel); 
} 
 
long CBPCDevices::TSDeviceCount(long lTuningSpace) 
{ 
long result; 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x5e7, DISPATCH_METHOD, VT_I4, (void*)&amp;result, parms, 
lTuningSpace); 
return result; 
} </code></pre>
<p>&nbsp;</p></body>
</HTML>

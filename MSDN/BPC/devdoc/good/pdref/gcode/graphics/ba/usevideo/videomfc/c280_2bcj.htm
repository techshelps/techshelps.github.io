<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BPCBASE.CPP</title>
<link disabled rel=stylesheet href=../../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_pdc_context293"></a>BPCBASE.CPP</h2>
<pre><code>// 
// bpcbase.cpp: Implements the CBPCDeviceBase class  
// 
// Copyright (C) 1997 Microsoft Corporation 
// All rights reserved. 
// 
// This source code is only intended as a supplement to the 
// Broadcast Architecture Programmer's Reference. 
// For detailed information regarding Broadcast 
// Architecture, see the reference. 
// 
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++ 
 
// NOTE: Do not modify the contents of this file.  If this class is regenerated by 
//  Microsoft Visual C++, your modifications will be overwritten. 
 
 
#include "stdafx.h" 
#include "bpcbase.h" 
 
 
///////////////////////////////////////////////////////////////////////////// 
// CBPCDeviceBase properties 
 
///////////////////////////////////////////////////////////////////////////// 
// CBPCDeviceBase operations 
 
CString CBPCDeviceBase::GetName() 
{ 
CString result; 
InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); 
return result; 
} 
 
BOOL CBPCDeviceBase::GetHasFilename() 
{ 
BOOL result; 
InvokeHelper(0x3ed, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&amp;result, NULL); 
return result; 
} 
 
BOOL CBPCDeviceBase::GetHasCA() 
{ 
BOOL result; 
InvokeHelper(0x410, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&amp;result, NULL); 
return result; 
} 
 
BOOL CBPCDeviceBase::GetIsInput() 
{ 
BOOL result; 
InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&amp;result, NULL); 
return result; 
} 
 
BOOL CBPCDeviceBase::GetIsOutput() 
{ 
BOOL result; 
InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&amp;result, NULL); 
return result; 
} 
 
BOOL CBPCDeviceBase::GetHasChannel() 
{ 
BOOL result; 
InvokeHelper(0x3ec, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&amp;result, NULL); 
return result; 
} 
 
long CBPCDeviceBase::GetStatus() 
{ 
long result; 
InvokeHelper(0x3ef, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
CString CBPCDeviceBase::GetProdName() 
{ 
CString result; 
InvokeHelper(0x3f0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); 
return result; 
} 
 
CString CBPCDeviceBase::GetFileName() 
{ 
CString result; 
InvokeHelper(0x3f1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetFileName(LPCTSTR lpszNewValue) 
{ 
static BYTE parms[] = 
VTS_BSTR; 
InvokeHelper(0x3f1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 lpszNewValue); 
} 
 
long CBPCDeviceBase::GetChannel() 
{ 
long result; 
InvokeHelper(0x3f2, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetChannel(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x3f2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
BOOL CBPCDeviceBase::GetChannelAvailable(long nChannel) 
{ 
BOOL result; 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x3f5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&amp;result, parms, 
nChannel); 
return result; 
} 
 
long CBPCDeviceBase::GetImageSourceWidth() 
{ 
long result; 
InvokeHelper(0x3f7, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
long CBPCDeviceBase::GetImageSourceHeight() 
{ 
long result; 
InvokeHelper(0x3f8, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
long CBPCDeviceBase::GetCurrentState() 
{ 
long result; 
InvokeHelper(0x412, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
double CBPCDeviceBase::GetCurrentPosition() 
{ 
double result; 
InvokeHelper(0x3f9, DISPATCH_PROPERTYGET, VT_R8, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetCurrentPosition(double newValue) 
{ 
static BYTE parms[] = 
VTS_R8; 
InvokeHelper(0x3f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
double CBPCDeviceBase::GetDuration() 
{ 
double result; 
InvokeHelper(0x3fa, DISPATCH_PROPERTYGET, VT_R8, (void*)&amp;result, NULL); 
return result; 
} 
 
double CBPCDeviceBase::GetPrerollTime() 
{ 
double result; 
InvokeHelper(0x3fb, DISPATCH_PROPERTYGET, VT_R8, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetPrerollTime(double newValue) 
{ 
static BYTE parms[] = 
VTS_R8; 
InvokeHelper(0x3fb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
double CBPCDeviceBase::GetRate() 
{ 
double result; 
InvokeHelper(0x3fc, DISPATCH_PROPERTYGET, VT_R8, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetRate(double newValue) 
{ 
static BYTE parms[] = 
VTS_R8; 
InvokeHelper(0x3fc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 newValue); 
} 
 
long CBPCDeviceBase::GetCountryCode() 
{ 
long result; 
InvokeHelper(0x3fd, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetCountryCode(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x3fd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
long CBPCDeviceBase::GetVideoFrequency() 
{ 
long result; 
InvokeHelper(0x3fe, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
long CBPCDeviceBase::GetAudioFrequency() 
{ 
long result; 
InvokeHelper(0x3ff, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
long CBPCDeviceBase::GetDefaultVideoType() 
{ 
long result; 
InvokeHelper(0x400, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetDefaultVideoType(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x400, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
long CBPCDeviceBase::GetDefaultAudioType() 
{ 
long result; 
InvokeHelper(0x401, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetDefaultAudioType(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x401, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
long CBPCDeviceBase::GetVideoSubchannel() 
{ 
long result; 
InvokeHelper(0x402, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetVideoSubchannel(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x402, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
long CBPCDeviceBase::GetAudioSubchannel() 
{ 
long result; 
InvokeHelper(0x403, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetAudioSubchannel(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x403, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
void CBPCDeviceBase::SetVolume(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x407, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
long CBPCDeviceBase::GetVolume() 
{ 
long result; 
InvokeHelper(0x407, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetBalance(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x408, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
long CBPCDeviceBase::GetBalance() 
{ 
long result; 
InvokeHelper(0x408, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetPower(BOOL bNewValue) 
{ 
static BYTE parms[] = 
VTS_BOOL; 
InvokeHelper(0x40b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 bNewValue); 
} 
 
BOOL CBPCDeviceBase::GetPower() 
{ 
BOOL result; 
InvokeHelper(0x40b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetOverScan(long nNewValue) 
{ 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x413, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 nNewValue); 
} 
 
long CBPCDeviceBase::GetOverScan() 
{ 
long result; 
InvokeHelper(0x413, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
long CBPCDeviceBase::GetProviderRating() 
{ 
long result; 
InvokeHelper(0x51d, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
BOOL CBPCDeviceBase::GetProviderStatus() 
{ 
BOOL result; 
InvokeHelper(0x51e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&amp;result, NULL); 
return result; 
} 
 
long CBPCDeviceBase::GetProviderEPGMask() 
{ 
long result; 
InvokeHelper(0x519, DISPATCH_PROPERTYGET, VT_I4, (void*)&amp;result, NULL); 
return result; 
} 
 
LPDISPATCH CBPCDeviceBase::GetHistoryItems() 
{ 
LPDISPATCH result; 
InvokeHelper(0x520, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;result, NULL); 
return result; 
} 
 
LPDISPATCH CBPCDeviceBase::GetEmailMessages() 
{ 
LPDISPATCH result; 
InvokeHelper(0x521, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;result, NULL); 
return result; 
} 
 
CString CBPCDeviceBase::GetUserName_() 
{ 
CString result; 
InvokeHelper(0x51b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetUserName(LPCTSTR lpszNewValue) 
{ 
static BYTE parms[] = 
VTS_BSTR; 
InvokeHelper(0x51b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 lpszNewValue); 
} 
 
CString CBPCDeviceBase::GetUserArea() 
{ 
CString result; 
InvokeHelper(0x51c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&amp;result, NULL); 
return result; 
} 
 
void CBPCDeviceBase::SetUserArea(LPCTSTR lpszNewValue) 
{ 
static BYTE parms[] = 
VTS_BSTR; 
InvokeHelper(0x51c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, 
 lpszNewValue); 
} 
 
LPDISPATCH CBPCDeviceBase::GetItemDetails(long Priority, LPDISPATCH pInDetails) 
{ 
LPDISPATCH result; 
static BYTE parms[] = 
VTS_I4 VTS_DISPATCH; 
InvokeHelper(0x518, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&amp;result, parms, 
Priority, pInDetails); 
return result; 
} 
 
long CBPCDeviceBase::Command(long nCommand) 
{ 
long result; 
static BYTE parms[] = 
VTS_I4; 
InvokeHelper(0x3f4, DISPATCH_METHOD, VT_I4, (void*)&amp;result, parms, 
nCommand); 
return result; 
} 
 
void CBPCDeviceBase::Run() 
{ 
InvokeHelper(0x40c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); 
} 
 
void CBPCDeviceBase::Pause() 
{ 
InvokeHelper(0x40e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); 
} 
 
void CBPCDeviceBase::Stop() 
{ 
InvokeHelper(0x40d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); 
} 
 
void CBPCDeviceBase::Refresh() 
{ 
InvokeHelper(0x40f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); 
} 
 
void CBPCDeviceBase::ResetProviderSystem() 
{ 
InvokeHelper(0x515, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); 
} 
 
LPDISPATCH CBPCDeviceBase::BuyItem(long Priority, LPDISPATCH pInDetails) 
{ 
LPDISPATCH result; 
static BYTE parms[] = 
VTS_I4 VTS_DISPATCH; 
InvokeHelper(0x516, DISPATCH_METHOD, VT_DISPATCH, (void*)&amp;result, parms, 
Priority, pInDetails); 
return result; 
} 
 
LPDISPATCH CBPCDeviceBase::CancelItem(LPDISPATCH pInDetails) 
{ 
LPDISPATCH result; 
static BYTE parms[] = 
VTS_DISPATCH; 
InvokeHelper(0x517, DISPATCH_METHOD, VT_DISPATCH, (void*)&amp;result, parms, 
pInDetails); 
return result; 
} 
 
void CBPCDeviceBase::DisplayConfigDialog() 
{ 
InvokeHelper(0x51a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL); 
} 
 
void CBPCDeviceBase::HandleCardChaining(BOOL fOK) 
{ 
static BYTE parms[] = 
VTS_BOOL; 
InvokeHelper(0x523, DISPATCH_METHOD, VT_EMPTY, NULL, parms, 
 fOK); 
} 
</code></pre>
<p>&nbsp;</p></body>
</HTML>

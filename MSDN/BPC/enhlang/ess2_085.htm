<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>String and Escape Sequence Syntax</TITLE>
<meta name=MS-HAID content="_CDK_String_and_Escape_Sequence_Syntax">
<link disabled rel=stylesheet href=backsdk3.css>
<style>
@import url(backsdk4.css);
</style>
</HEAD>

<BODY  bgcolor="#ffffff">

<a name="_CDK_String_and_Escape_Sequence_Syntax"></a>
<H4>String and Escape Sequence Syntax</H4>

<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to
change.]</span>&nbsp;
</p>

<p>
To write special characters into a stream script, use the string and escape sequence syntax. The Enhancement Stream language supports string concatenation, allowing you to build strings using combinations of string, numeric, and variable values.
</p>

<p>
<b>Syntax</b>
</p>

<p>
<i>"TextString" + Variable + "EscapeSequence"</i>
</p>

<p>
where <i>TextString</i> is an alphanumeric string of text enclosed in quotes, <i>Variable</i> is any value that is defined in a variable declaration, either numeric or text, and <i>EscapeSequence</i> is an escape sequence, enclosed in quotes. These three syntactic elements can be used in any order and combination.
</p>

<a name="_CDK_Notes"></a>
<H5>Notes</H5>

<ul>
	<li>Because escape sequences are treated as character constants, they must be enclosed in quotes, unless they have been defined as a variable. In such a case, you would state the variable name in the event statement, without quotes.
	<li>If an escape sequence immediately precedes or follows a text string, it is not necessary to state the escape sequence separate from the text string, it is included as part of the text string, sitting within the quotes. For more information, see <a Href="ess2_065.htm#_CDK_Escape_Sequences">Escape Sequences</a>.

</ul> 


<p>
The ability to build strings is especially helpful if you want to write a stream script that serves as a template for many different scripts, or if you simply want to build greater flexibility into your event statements, such as triggers.
</p>

<p>
For example, you might be producing a series of interactive shows about the seven wonders of the ancient world, and each show follows a very similar format, where certain enhancements appear at a set pace and in a predetermined frame of TV Viewer or a Web browser. Since you intend to keep the general structure and presentation of the content similar from one show to the next, one of the major differences among episodes will be the content. From a stream script standpoint, this means a difference in the names of the HTML (Hypertext Markup Language) files that are broadcast.
</p>

<p>
To this end, then, you could instruct your enhancement production staff that the core name for all HTML files for the first episode on the pyramids at Giza should be <i>Giza</i>, such that all the HTML enhancements have a similar name:
</p>

<p>
Giza000.htm
<br>
Giza005.htm
<br>
Giza010.htm
<br>
Giza015.htm
<br>
Giza020.htm
<br>
etc.
</p>

<p>
Then in the stream script, you could identify this core file name value using a variable, such as <i>wonder</i>:
</p>

<p>
<font face="Lucida Sans Typewriter, Courier New">
wonder = Giza
</font>
</p>

<p>
From then on, all your event statements could reference that variable, building the string using a combination of the variable and a text string, combining the two elements with a plus (+) sign:
</p>
 
<p>
<font face="Lucida Sans Typewriter, Courier New">
before 00:00:20:20 trigger (3  "Side"  <b>wonder</b> + "005.htm");
<br>
before 00:00:50:60 trigger (3  "Side"  <b>wonder</b> + "010.htm");
<br>
before 00:01:18:40 trigger (3  "Side"  <b>wonder</b> + "015.htm");
</font>
</p>

<p>
These trigger statements are identical to&#151;and therefore are interpreted the same as&#151;the following event statements:
</p>

<p>
<font face="Lucida Sans Typewriter, Courier New">
before 00:00:20:20 trigger (3  "Side"  "<b>Giza</b>005.htm");
<br>
before 00:00:50:60 trigger (3  "Side"  "<b>Giza</b>010.htm");
<br>
before 00:01:18:40 trigger (3  "Side"  "<b>Giza</b>015.htm");
</font>
</p>

<p>
By using the variable <i>wonder</i> rather than writing out the specific filename for each event, you can change the content of the stream script by simply redefining the variable. For the second show, then, about the Hanging Gardens of Babylon, you could redefine the variable <i>wonder</i> to match the core name of that show's HTML files, namely, <i>Gardens</i>.
</p>

<p>
<font face="Lucida Sans Typewriter, Courier New">
wonder = Gardens
</font>
</p>

<a name="_CDK_Escape_Sequences"></a>
<H5>Escape Sequences</H5>

<p>
In the course of building strings, you can represent certain unprintable characters using <i>escape sequences</i>. Escape sequences are character combinations consisting of a backslash (\) followed by a letter or by a combination of digits. When writing statements in a stream script, you must use escape sequences to execute such text entities as tab characters, backspaces, and new lines. The Enhancement Stream language regards an escape sequence as a single character and will therefore consider one valid when used as a character constant.
</p>

<p>
For instance, you may want the title of the program, which appears in the channel listing in the Program Guide, to look something like this:
</p>


<p>
"Secrets of the Incas"
<br>
Premium Presentation
</p>

<p>
To define this title for your show, you would, of course, use the reserved variable <b>Title</b>. There are a couple of issues here, however, that you must address to get the title to appear as it does in the example. For one thing, the title uses quotes, and since the syntax for defining <b>Title</b> encloses your title in quotes already, you must use an escape sequence to represent the quotation marks around the text <i>Secrets of the Incas</i>. Moreover, the phrase <i>Premium Presentation</i>, which perhaps represents the level of enhancements the show will broadcast and, therefore, the cost of subscribing to the show, appears on its own line. So you would need an escape sequence to represent the new line.
</p>


<p>
The title in the stream script would end up looking like this:
</p>

<font face="Lucida Sans Typewriter, Courier New">
Title="\x22Secrets of the Incas\x22\nPremium Presentation"
</font>

</p>



<p>
Escape sequences are used to provide literal representations of nonprinting characters and characters that would be difficult to edit and display in their raw form.
</p>

<p>
The Stream Compiler supports the following escape sequences:
</p>

<!--DTV Web Site Content<img src="escseqnc.gif" width=540 height=319 border=0>DTV Web Site Content-->

<table>
<tr valign=top>
<td><b>Escape Sequence</b></td>
<td><b>Represents</b></td>
</tr>
<tr valign=top>
<td>\b</td>
<td>Backspace</td>
</tr>
<tr valign=top>
<td>\f</td>
<td>Formfeed</td>
</tr>
<tr valign=top>
<td>\n</td>
<td>New line</td>
</tr>
<tr valign=top>
<td>\r</td>
<td>Carriage return</td>
</tr>
<tr valign=top>
<td>\t</td>
<td>Horizontal tab</td>
</tr>
<tr valign=top>
<td>\x<i>hh</i></td>
<td>ASCII character in hexadecimal notation, where <i>hh</i> is the hexadecimal value. For example, the registered trademark sign &#174; whose ASCII code is 0174, has a hexadecimal value of AE. The hexadecimal escape sequence for the registered trademark symbol would be <i>/xAE</i> .</td>
</tr>
</table>

<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>


</BODY>
</HTML>



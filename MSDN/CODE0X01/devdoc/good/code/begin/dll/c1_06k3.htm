<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEMO.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context3"></a>DEMO.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/**************************************************************************** <br> <br>    PROGRAM: Demo.c <br> <br>    PURPOSE: Demonstrates how to manipulate a cursor and select a region <br> <br>    FUNCTIONS: <br> <br>        WinMain() - calls initialization function, processes message loop <br>        DemoInit() - initializes window data and registers window <br>        DemoWndProc() - processes messages <br>        About() - processes messages for "About" dialog box <br> <br>    COMMENTS: <br>        This code is a modified version of the CURSOR.C program.  Instead of <br>        using inline code for drawing the shape, the routines from the Select <br>        library are called. <br> <br>****************************************************************************/ <br> <br>#include "windows.h" <br> <br>#include "demo.h" <br>#include "select.h" <br> <br>HANDLE hInst; <br>BOOL bTrack = FALSE; <br>INT OrgX = 0, OrgY = 0; <br>INT PrevX = 0, PrevY = 0; <br>INT X = 0, Y = 0; <br> <br>RECT Rect; <br> <br>INT Shape = SL_BLOCK;                          /* Shape to use for rectangle */ <br>BOOL RetainShape = FALSE;                      /* Retain or destroy shape    */ <br> <br>int APIENTRY WinMain(HINSTANCE hInstance, <br>                     HINSTANCE hPrevInstance, <br>                     LPSTR lpCmdLine, <br>                     int nCmdShow) <br>{ <br> <br>    HWND hWnd; <br>    MSG msg; <br>    CHAR szAppName[64]; <br> <br>    UNREFERENCED_PARAMETER(lpCmdLine); <br> <br>    if (!hPrevInstance) <br>        if (!DemoInit(hInstance)) <br>            return (0); <br> <br>    hInst = hInstance; <br>    LoadString(hInstance, IDS_APPNAME, szAppName, sizeof(szAppName)); <br> <br>    hWnd = CreateWindow("Demo", <br>        szAppName, <br>        WS_OVERLAPPEDWINDOW, <br>        CW_USEDEFAULT, <br>        CW_USEDEFAULT, <br>        CW_USEDEFAULT, <br>        CW_USEDEFAULT, <br>        NULL, <br>        NULL, <br>        hInstance, <br>        NULL); <br> <br>    if (!hWnd) <br>        return (0); <br> <br>    ShowWindow(hWnd, nCmdShow); <br>    UpdateWindow(hWnd); <br> <br>    while (GetMessage(&amp;msg, NULL, 0, 0)) { <br>        TranslateMessage(&amp;msg); <br>        DispatchMessage(&amp;msg); <br>    } <br>    return (msg.wParam); <br>} <br> <br>/**************************************************************************** <br> <br>    FUNCTION: DemoInit(HANDLE) <br> <br>    PURPOSE: Initializes window data and registers window class <br> <br>****************************************************************************/ <br> <br>BOOL DemoInit(HANDLE hInstance) <br>{ <br>    HANDLE hMemory; <br>    PWNDCLASS pWndClass; <br>    BOOL bSuccess; <br>    CHAR lpBuffer[128]; <br> <br>    hMemory = LocalAlloc(LPTR, sizeof(WNDCLASS)); <br>    if(!hMemory){ <br>        LoadString(hInst, IDS_NOMEM, lpBuffer, sizeof(lpBuffer)); <br>        MessageBox(NULL, lpBuffer, NULL, MB_OK | MB_ICONHAND); <br>        return(FALSE); <br>    } <br> <br>    pWndClass = (PWNDCLASS) LocalLock(hMemory); <br>    pWndClass-&gt;hCursor = LoadCursor(NULL, IDC_ARROW); <br>    pWndClass-&gt;hIcon = LoadIcon(NULL, IDI_APPLICATION); <br>    pWndClass-&gt;lpszMenuName = (LPSTR) "Menu"; <br>    pWndClass-&gt;lpszClassName = (LPSTR) "Demo"; <br>    pWndClass-&gt;hbrBackground = GetStockObject(WHITE_BRUSH); <br>    pWndClass-&gt;hInstance = hInstance; <br>    pWndClass-&gt;style = 0; <br>    pWndClass-&gt;lpfnWndProc = (WNDPROC)DemoWndProc; <br> <br>    bSuccess = RegisterClass(pWndClass); <br> <br>    LocalUnlock(hMemory); <br>    LocalFree(hMemory); <br>    return (bSuccess); <br>} <br> <br>/**************************************************************************** <br> <br>    FUNCTION: DemoWndProc(HWND, unsigned, WORD, LONG) <br> <br>    PURPOSE:  Processes messages <br> <br>    MESSAGES: <br> <br>        WM_SYSCOMMAND - system menu (About dialog box) <br>        WM_CREATE     - create window <br>        WM_DESTROY    - destroy window <br>        WM_LBUTTONDOWN - left mouse button <br>        WM_MOUSEMOVE   - mouse movement <br>        WM_LBUTTONUP   - left button released <br> <br>        WM_COMMAND messages: <br>            IDM_BOX    - use inverted box for selecting a region <br>            IDM_BLOCK  - use empty box for selecting a region <br>            IDM_RETAIN - retain/delete selection on button release <br> <br>    COMMENTS: <br> <br>        When the left mouse button is pressed, btrack is set to TRUE so that <br>        the code for WM_MOUSEMOVE will keep track of the mouse and update the <br>        box accordingly.  Once the button is released, btrack is set to <br>        FALSE, and the current position is saved.  Holding the SHIFT key <br>        while pressing the left button will extend the current box rather <br>        then erasing it and starting a new one.  The exception is when the <br>        retain shape option is enabled.  With this option, the rectangle is <br>        zeroed whenever the mouse is released so that it can not be erased or <br>        extended. <br> <br>****************************************************************************/ <br> <br>LONG APIENTRY DemoWndProc( <br>    HWND hWnd, <br>    UINT message, <br>    UINT wParam, <br>    LONG lParam) <br>{ <br>    FARPROC lpProcAbout; <br>    HMENU hMenu; <br> <br>    switch (message) { <br> <br>        case WM_COMMAND: <br> <br>            // LOWORD added for portability <br> <br>            switch (LOWORD(wParam)) { <br>                case IDM_BOX: <br>                    Shape = SL_BOX; <br>                    hMenu = GetMenu(hWnd); <br>                    CheckMenuItem(hMenu, IDM_BOX, MF_CHECKED); <br>                    CheckMenuItem(hMenu, IDM_BLOCK, MF_UNCHECKED); <br>                    break; <br> <br>                case IDM_BLOCK: <br>                    Shape = SL_BLOCK; <br>                    hMenu = GetMenu(hWnd); <br>                    CheckMenuItem(hMenu, IDM_BOX, MF_UNCHECKED); <br>                    CheckMenuItem(hMenu, IDM_BLOCK, MF_CHECKED); <br>                    break; <br> <br>                case IDM_RETAIN: <br>                    if (RetainShape) { <br>                        hMenu = GetMenu(hWnd); <br>                        CheckMenuItem(hMenu, IDM_RETAIN, MF_UNCHECKED); <br>                        RetainShape = FALSE; <br>                    } <br>                    else { <br>                        hMenu = GetMenu(hWnd); <br>                        CheckMenuItem(hMenu, IDM_RETAIN, MF_CHECKED); <br>                        RetainShape = TRUE; <br>                    } <br>                    break; <br> <br>                case IDM_ABOUT: <br>                    lpProcAbout = MakeProcInstance((FARPROC)About, hInst); <br>                    DialogBox(hInst, "AboutBox", hWnd, (DLGPROC)lpProcAbout); <br>                    FreeProcInstance(lpProcAbout); <br>                    break; <br> <br>            } <br>            break; <br> <br>        case WM_LBUTTONDOWN: <br> <br>            bTrack = TRUE;               /* user has pressed the left button */ <br> <br>            /* If you don't want the shape cleared, you must clear the Rect <br>             * coordinates before calling StartSelection <br>             */ <br> <br>            if (RetainShape) <br>                SetRectEmpty(&amp;Rect); <br> <br>            StartSelection(hWnd, MAKEMPOINT(lParam), &amp;Rect, <br>                (wParam &amp; MK_SHIFT) ? SL_EXTEND | Shape : Shape); <br>            break; <br> <br>        case WM_MOUSEMOVE: <br>            if (bTrack) <br>                UpdateSelection(hWnd, MAKEMPOINT(lParam), &amp;Rect, Shape); <br>            break; <br> <br>        case WM_LBUTTONUP: <br>       if (bTrack)  <br>               EndSelection(MAKEMPOINT(lParam), &amp;Rect); <br>         bTrack = FALSE; <br>            break; <br> <br>   case WM_SIZE: <br>      switch (wParam) { <br>         case SIZEICONIC: <br> <br>            /* If we aren't in retain mode we want to clear the  <br>             * current rectangle now!  <br>             */ <br>            if (!RetainShape) <br>               SetRectEmpty(&amp;Rect); <br>      } <br>      break; <br> <br>        case WM_DESTROY: <br>            PostQuitMessage(0); <br>            break; <br> <br>        default: <br>            return (DefWindowProc(hWnd, message, wParam, lParam)); <br>    } <br>    return (0); <br>} <br> <br>/**************************************************************************** <br> <br>    FUNCTION: About(HWND, unsigned, WORD, LONG) <br> <br>    PURPOSE:  Processes messages for "About" dialog box <br> <br>    MESSAGES: <br> <br>        WM_INITDIALOG - initialize dialog box <br>        WM_COMMAND    - Input received <br> <br>****************************************************************************/ <br> <br>BOOL APIENTRY About( <br>    HWND hDlg, <br>    UINT message, <br>    UINT wParam, <br>    LONG lParam) <br>{ <br>    switch (message) { <br>        case WM_INITDIALOG: <br>            return (TRUE); <br> <br>        case WM_COMMAND: <br>            // LOWORD added for portability <br>            if (LOWORD(wParam) == IDOK <br>             || LOWORD(wParam) == IDCANCEL) { <br>                EndDialog(hDlg, TRUE); <br>                return (TRUE); <br>            } <br>            return (TRUE); <br>    } <br>    return (FALSE); <br>        UNREFERENCED_PARAMETER(lParam); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

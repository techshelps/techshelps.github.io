<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IComponent::GetResultViewType</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_slate_icomponent_getresultviewtype"></a>IComponent::GetResultViewType</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Determines what the result pane view should be.</p>
<pre><code><b>HRESULT GetResultViewType(
  long</b><i> cookie</i><b>,            </b>// unique identifier
<b>  LPOLESTR *</b><i> ppViewType</i><b>,  </b>// pointer to address of the view
<b>  long *</b><i> pViewOptions     </i>// pointer to view options
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>cookie</i></dt>
<dd>
[in] Specifies the unique identifier associated with scope items for which the result-view type is required.</dd>
<dt>
<i>ppViewType</i></dt>
<dd>
[out] Pointer to the address of the returned view type for the specified <i>cookie</i>.</dd>
<dt>
<i>pViewOptions</i></dt>
<dd>
[out] Pointer to the MMC_VIEW_OPTIONS enumeration, which provides the console with options specified by the owning snap-in. This value can be a combination of the following:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Value</th>
<th align=left width=52%>Meaning</th>
</tr>
<tr valign=top>
<td width=48%>MMC_VIEW_OPTIONS_<br>
NOLISTVIEWS = 0x0001</td>
<td width=52%>Tells the console to refrain from presenting standard list view choices in the View menu. Allows the snap-in to display its own custom views only in the result view pane. </td>
</tr>
<tr valign=top>
<td width=48%>MMC_VIEW_OPTIONS_OWNERDATALIST = 0x0002</td>
<td width=52%>Specifies that the result pane list view should be a virtual list.</td>
</tr>
<tr valign=top>
<td width=48%>MMC_VIEW_OPTIONS_MULTISELECT = 0x0004</td>
<td width=52%>Allows multiple item selections in the result pane view.</td>
</tr>
<tr valign=top>
<td width=48%>MMC_VIEW_OPTIONS_NONE <br>
= 0</td>
<td width=52%>Allows the default view options.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The returned view type was either an OLE custom control (OCX) CLSID string or a URL.</dd>
<dt>
S_FALSE</dt>
<dd>
The default list view should be used.</dd>
<dt>
E_UNEXPECTED</dt>
<dd>
An unexpected error occurred.</dd>
<dt>
E_OUTOFMEMORY</dt>
<dd>
Not enough memory to complete the operation.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The caller will allocate using <b>CoTaskMemAlloc</b> and the called will free it using <b>CoTaskMemFree</b>. These functions are documented in the Platform SDK.</p>
<p>
A cookie is a pointer to a structure containing information unique to a specific item that is passed in through the <i>lParam</i> member of a <a href="mmc_ref2_7sx9.htm"><b>SCOPEDATAITEM</b></a> structure.</p>
<h4>See Also</h4>
<p>
<a href="mmc_ref1_3cok.htm"><b>IComponent</b></a>, <b>IDataObject</b> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending Context Menus for Snap-Ins</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_slate_extending_context_menus_for_snap_ins"></a>Extending Context Menus for Snap-Ins</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
MMC will generate default context menus for the items in the scope and result panes, and snap-ins may extend these default context menus. The default context menus contain items for the Create New and Task menus. These default menus are integral to the usability of the console, because they provide lists of the methods (or tasks) that can be invoked on a given node or a list of the objects that can be created within a given container. </p>
<p>
Snap-ins extend these context menus by implementing <a href="mmc_ref1_0ghh.htm"><b>IExtendContextMenu</b></a>, where the snap-in's implementation of <b>IExtendContextMenu</b> will call methods in <a href="mmc_ref1_4g8b.htm"><b>IContextMenuCallback</b></a> which is implemented by MMC. Some snap-ins will also call methods in <a href="mmc_ref1_1dma.htm"><b>IContextMenuProvider</b></a> (also implemented by MMC) when they need to build a context menu from scratch.</p>
<p>
<a href="mmc_ref1_4g8b.htm"><b>IContextMenuCallback</b></a> is a callback mechanism that has one method, <a href="mmc_ref1_0bvx.htm"><b>AddItem</b></a>, for adding single items to a context menu. MMC will provide the snap-in with an instance of <b>IContextMenuCallback</b> when one is needed. Snap-ins should not call <b>QueryInterface</b> for an instance of <b>IContextMenuCallback</b>, nor should they keep the instance of <b>IContextMenuCallback</b> beyond the scope in which it is provided.</p>
<p>
<a href="mmc_ref1_0ghh.htm"><b>IExtendContextMenu</b></a> is implemented by the snap-in and allows items to be added using the callback mechanism just mentioned. MMC will call <a href="mmc_ref1_541f.htm"><b>AddMenuItems</b></a> to give the extension an opportunity to add menu items; the snap-in will typically call <a href="mmc_ref1_0bvx.htm"><b>IContextMenuCallback::AddItem</b></a> zero or more times to add items to the context menu. MMC will call <a href="mmc_ref1_1hes.htm"><b>Command</b></a> if an when one of the items added by <a href="mmc_ref1_541f.htm"><b>AddMenuItems</b></a> is chosen.</p>
<p>
Most snap-ins will not need to use <a href="mmc_ref1_1dma.htm"><b>IContextMenuProvider</b></a>. This interface allows snap-ins to add extensible context menus to result pane views other than the default list view. For example, if the view is an OCX, the snap-in could always create the context menu itself using the Win32 API. The problem is that using Win32 does not allow other snap-ins to extend this context menu as they could on other nodes. Instead, the OCX should call <b>QueryInterface</b> for a pointer to <a href="mmc_ref1_1dma.htm"><b>IContextMenuProvider</b></a>, and generate the context menu using its COM methods. This context menu can then be extended by other snap-ins. Incidentally, <b>IContextMenuProvider</b> derives from <a href="mmc_ref1_4g8b.htm"><b>IContextMenuCallback</b></a>, so it implicitly contains the <a href="mmc_ref1_0bvx.htm"><b>AddItem</b></a> method. </p>
<p>
<a href="mmc_ref1_1dma.htm"><b>IContextMenuProvider</b></a> methods include <a href="mmc_ref1_5nzo.htm"><b>EmptyMenuList</b></a>, which clears the context menu and <a href="mmc_ref1_8ir9.htm"><b>ShowContextMenu</b></a>, which displays the menu. Its two remaining methods, <a href="mmc_ref1_3zqr.htm"><b>AddPrimaryExtensionItems</b></a> and <a href="mmc_ref1_0r03.htm"><b>AddThirdPartyExtensionItems</b></a>, give other snap-ins the opportunity to extend the context menu.</p>
<p>
The snap-in that has added an item to the scope or result pane is always considered to "extend" the context menu. MMC will always call its implementation of <a href="mmc_ref1_541f.htm"><b>IExtendContextMenu::AddMenuItems</b></a> if that snap-in implements <a href="mmc_ref1_0ghh.htm"><b>IExtendContextMenu</b></a>. Snap-ins that wish to extend context menus for items which they did not add themselves must explicitly register themselves as being context menu extensions for nodes of that particular node type.</p>
<p>
When a snap-in adds a menu item, it must specify an insertion point in the context menu where that item should be located. The default context menus created by MMC contain a set of insertion points where extension snap-ins may add items. To maintain consistency, snap-ins may not add items other than at those predefined insertion points. Snap-ins creating context menus from scratch using <a href="mmc_ref1_1dma.htm"><b>IContextMenuProvider</b></a> must add these insertion points themselves in order to allow other extensions to add items to those context menus.</p>
<p>
The <a href="mmc_ref2_3f71.htm"><b>CONTEXTMENUITEM</b></a> structure provides a variety of flags that can be set to manage MMC context menus, even when they are nested deeply and items are to be inserted in specific positions on the menu. The node manager enforces menu integrity.</p>
<p>&nbsp;</p></body>
</HTML>

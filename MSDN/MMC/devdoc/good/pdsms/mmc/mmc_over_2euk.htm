<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Persistence Model</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_slate_persistence_model"></a>Persistence Model</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
One of the great strengths of MMC is its ability to be persistently stored with all data necessary to re-create the tool on any machine. For this reason, a snap-in can implement the OLE interface, <b>IPersistStorage</b>. This interface allows you to make use of OLE's compound file implementation of structured storage. If <b>IPersistStorage</b> is not implemented, <b>IPersistStream</b> is called as an alternative. The latter is a simpler interface for snap-ins whose properties fit in a single stream. <b>IPersistStreamInit</b> can also be used.</p>
<p>
The console implements the <b>IStorage</b> interface that generates a storage file. The name of the file is never known to the snap-in but, at some point, the console calls <b>QueryInterface</b> to get a pointer to the snap-in's <b>IPersistStorage</b>. The snap-in's data is loaded and saved, although the console never reads the content of the resulting file. The file is assigned a .MSC extension and the console, in effect, provides storage and allows the snap-in to persist. All of the interfaces noted here are provided as part of COM and are documented in the Platform SDK.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IResultOwnerData</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_slate_iresultownerdata"></a>IResultOwnerData</h1>
<p>
[This is preliminary documentation and subject to change.] </p>
<p>
<b>IResultOwnerData </b>supports the use of virtual lists, which is a List View control that has the LVS_OWNERDATA style set. The methods of this interface are applicable only to virtual lists. This is an optional interface and snap-ins may implement it for enhanced virtual list performance.</p>
<p>
Virtual lists support large numbers of list items, up to 100,000,000. This is possible because the virtual list control does not provide the storage. All storage requirements are provided by the owner of the items. When the control needs information about an item, it sends a LVN_GETDISPINFO notification to the owner of the item parameters. </p>
<p>
Because of the lack of storage, a List View control in virtual mode does not support all of the messages that it supports in normal mode. </p>
<p>
<b>Result View Selection</b><br>
To select a virtual list view, <b>IComponent::GetResultViewType</b> sets a flag in the <i>ViewOptions</i> parameter. Setting the <b>MMC_VIEW_OPTIONS_OWNERDATALIST</b> flag and returning a value of S_FALSE makes the result pane a virtual list. </p>
<p>
<b>Controlling a Virtual List</b><br>
Result pane lists are controlled through the <b>IResultData</b> interface. When a virtual list is selected, only a subset of the interface methods can be used. Of these, some have restrictions and or different interpretations of calling parameters when applied to virtual lists. </p>
<p>
The following table summarizes the changes to <b>IResultData</b> methods: </p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=55%>Method</th>
<th align=left width=14%>Support</th>
<th align=left width=31%>Modification</th>
</tr>
<tr valign=top>
<td width=55%><b>InsertItem</b> (<b>LPRESULTDATAITEM</b> <i>item</i>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;Not supported</td>
<td width=14%>None</td>
<td width=31%></td>
</tr>
<tr valign=top>
<td width=55%><b>DeleteItem</b> (<b>ITEM</b> <i>itemID</i>, <b>int</b> <i>nCol</i>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;Modified - Pass item index rather than itemID</td>
<td width=14%>Modified</td>
<td width=31%>Pass item index instead of <i>itemID</i></td>
</tr>
<tr valign=top>
<td width=55%><b>FindItemByLParam</b> (<b>LPARAM</b> <i>lParam</i>, <b>ITEM</b> *<i>pItemID</i>)</td>
<td width=14%>None</td>
<td width=31%></td>
</tr>
<tr valign=top>
<td width=55%><b>DeleteAllRsltItems</b> ()</td>
<td width=14%>Same</td>
<td width=31%></td>
</tr>
<tr valign=top>
<td width=55%><b>SetItem</b> (<b>LPRESULTDATAITEM</b> <i>item</i>)</td>
<td width=14%>None</td>
<td width=31%></td>
</tr>
<tr valign=top>
<td width=55%><b>GetItem</b> (<b>LPRESULTDATAITEM</b> <i>item</i>)</td>
<td width=14%>Modified</td>
<td width=31%>Must use item index and set <i>iItemID</i> = 0. Can only get select, focus states </td>
</tr>
<tr valign=top>
<td width=55%><b>GetNextItem</b> (<b>LPRESULTDATAITEM</b> <i>item</i>)</td>
<td width=14%>Modified</td>
<td width=31%>Can only test for select and focus state. Only returns item index, not <i>lParam</i></td>
</tr>
<tr valign=top>
<td width=55%><b>ModifyItemState</b> (<b>int</b> <i>nIndex</i>, <b>ITEM</b> <i>itemID</i>, <b>UINT</b> <i>uAdd</i>, <b>UINT</b> <i>uRemove</i>)</td>
<td width=14%>Modified</td>
<td width=31%>Must use <i>nIndex</i> and set <i>iItemID</i> = 0. Only focus and select states can be modified</td>
</tr>
<tr valign=top>
<td width=55%><b>ModifyViewStyle</b> (<b>MMC_RESULT_VIEW_STYLE</b> add, <b>MMC_RESULT_VIEW_STYLE</b> remove)</td>
<td width=14%>Same</td>
<td width=31%></td>
</tr>
<tr valign=top>
<td width=55%><b>SetViewMode</b> (<b>long</b> <i>lViewMode</i>)</td>
<td width=14%>Same</td>
<td width=31%></td>
</tr>
<tr valign=top>
<td width=55%><b>GetViewMode</b> (<b>long</b>* <i>LviewMode</i>)</td>
<td width=14%>Same</td>
<td width=31%></td>
</tr>
<tr valign=top>
<td width=55%><b>UpdateItem</b> (<b>ITEM</b> <i>itemID</i>)</td>
<td width=14%>Modified</td>
<td width=31%>Pass item index rather than <i>itemID</i> </td>
</tr>
<tr valign=top>
<td width=55%><b>Sort</b> (<b>long</b> <i>lUserParam</i>)</td>
<td width=14%>Modified</td>
<td width=31%>Calls <b>IResultOwnerData::SortItems</b> instead of <b>IResultDataCompare::Compare</b></td>
</tr>
<tr valign=top>
<td width=55%><b>SetDescBarText</b> (<b>LPOLESTR</b> <i>DescText</i>)</td>
<td width=14%>Same</td>
<td width=31%></td>
</tr>
</table><br>
<p>
<b>IResultData::SetItemCount</b> sets the number of items in a virtual list. </p>
<p>
<b>Supporting the Virtual List</b><br>
A virtual list calls <b>IComponent::GetDisplayInfo</b> to get the information needed to display an item in the result pane. When called for a virtual list, the <i>itemID</i> and <i>lParam</i> fields of the <b>RESULTDATAITEM</b> structure will be zero. The snap-in must use the <i>nIndex</i> field (item index) to identify the item for which data is being requested. </p>
<p>
The virtual list calls <b>IComponent::QueryDataObject</b> to get a data object for a particular result item. When called for a virtual list, no <i>itemID</i> will be available, so the <i>cookie</i> parameter will be the item index. </p>
<p>
Note that <b>IResultDataCompare</b> cannot be used with virtual lists because it does not support item sorting. </p>
<h5>When to Implement </h5>
<p>
This interface is implemented by the snap-in in order to support virtual lists. </p>
<h5>When to Use</h5>
<p>
TBD</p>
<h4>Methods in Vtable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=45%>IUnknown Methods</th>
<th align=left width=55%>Description</th>
</tr>
<tr valign=top>
<td width=45%><b>QueryInterface</b></td>
<td width=55%>Returns pointers to supported interfaces.</td>
</tr>
<tr valign=top>
<td width=45%><b>AddRef</b></td>
<td width=55%>Increments reference count.</td>
</tr>
<tr valign=top>
<td width=45%><b>Release</b></td>
<td width=55%>Decrements reference count.</td>
</tr>
</table><br>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=44%>IResultOwnerData Methods</th>
<th align=left width=55%>Description</th>
</tr>
<tr valign=top>
<td width=44%><a href="mmc_ref2_7a99.htm"><b>IResultOwnerData::FindItem</b></a></td>
<td colspan=2 width=56%>Finds result items matching the specified string.</td>
</tr>
<tr valign=top>
<td width=44%><a href="mmc_ref2_3vjo.htm"><b>IResultOwnerData::CacheHint</b></a></td>
<td colspan=2 width=56%>Pre-collects range information allowing for possible optimizations.</td>
</tr>
<tr valign=top>
<td width=44%><a href="mmc_ref2_4awj.htm"><b>IResultOwnerData::SortItems</b></a></td>
<td colspan=2 width=56%></td>
</tr>
</table><br>
<h4>See Also</h4>
<p>
<a href="mmc_ref2_1hb5.htm"><b>IResultData</b></a>, <a href="mmc_ref2_9gqc.htm"><b>IResultData::SetItemCount</b></a>, <a href="mmc_ref1_8xrj.htm"><b>IComponent::GetDisplayInfo</b></a>, <a href="mmc_ref1_3zuc.htm"><b>IComponent::QueryDataObject</b></a>, <a href="mmc_ref1_8ep1.htm"><b>IComponent::GetResultViewType</b></a>, <a href="mmc_ref2_131p.htm"><b>RESULTDATAITEM</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

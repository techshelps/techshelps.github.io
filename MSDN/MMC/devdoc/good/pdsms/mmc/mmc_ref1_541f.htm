<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IExtendContextMenu::AddMenuItems</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_slate_iextendcontextmenu_addmenuitems"></a>IExtendContextMenu::AddMenuItems</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Enables a snap-in to add items to a context menu.</p>
<pre><code><b>HRESULT AddMenuItems(
  LPDATAOBJECT</b><i> piDataObject</i><b>,  </b>// Pointer to a data object
<b>  LPCONTEXTMENUCALLBACK</b><i> piCallback</i><b>,</b>
<b>                            </b>// Pointer to callback itf
<b>  long *</b><i> pInsertionAllowed  </i>// Pointer to insertion pt flags
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>piDataObject</i></dt>
<dd>
[in] Pointer to the <b>IDataObject</b> interface on the data object of the menu to which items are being added.</dd>
<dt>
<i>piCallback</i></dt>
<dd>
[in] Pointer to an <a href="mmc_ref1_4g8b.htm"><b>IContextMenuCallback</b></a> that can add items to the context menu.</dd>
<dt>
<i>pInsertionAllowed</i></dt>
<dd>
[in, out] Identifies MMC-defined menu-item insertion points that can be used. This can be a combination of the following flags:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=54%>Value</th>
<th align=left width=46%>Meaning</th>
</tr>
<tr valign=top>
<td width=54%>CCM_INSERTIONALLOWED_TOP</td>
<td width=46%>Items can be inserted at the top of a context menu.</td>
</tr>
<tr valign=top>
<td width=54%>CCM_INSERTIONALLOWED_NEW</td>
<td width=46%>Items can be inserted in the Create New submenu.</td>
</tr>
<tr valign=top>
<td width=54%>CCM_INSERTIONALLOWED_TASK</td>
<td width=46%>Items can be inserted in the Task submenu.</td>
</tr>
<tr valign=top>
<td width=54%>CCM_INSERTIONALLOWED_VIEW</td>
<td width=46%>Items can be inserted in the toolbar view menu or in the View submenu of the result pane context menu.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
Zero or more items were successfully added to the context menu.</dd>
<dt>
E_UNEXPECTED</dt>
<dd>
An unexpected error occurred.
</dd>
</dl>
<h4>Remarks</h4>
<p>
An implementation of <b>IExtendContextMenu::AddMenuItems</b> typically reads the node type<i> </i>and any other parameters needed by calling <b>IDataObject::GetDataHere</b> on <i>piDataObject</i>, then it adds context menu items as appropriate by calling <a href="mmc_ref1_0bvx.htm"><b>IContextMenuCallback::AddItem</b></a> on <i>piCallback</i>.</p>
<p>
Your snap-in should check the <i>pInsertionsAllowed</i> flags for permission before attempting to add a menu item to the MMC defined insertion points. For example, a snap-in should not add menu items to CCM_INSERTIONPOINTID_PRIMARY_NEW or CCM_INSERTIONPOINTID_3RDPARTY_NEW unless the CCM_INSERTIONALLOWED_NEW flag is set.</p>
<p>
These flags allow the following two features:
<dl>
<dt>
<b>Subset Context Menus</b></dt>
<dd>
The console can create context menus which contain a subset of the full context menu items, such as the toolbar View menu. This menu is created in the same manner as a typical context menu except that only the CCM_INSERTIONALLOWED_VIEW flag is set in calls to the snap-in's <b>AddMenuItems</b> method.</dd>
<dt>
<b>Extension Snap-in Restrictions</b></dt>
<dd>
A primary snap-in is permitted to reset any of the insertion flags in its <b>AddMenuItems</b> method as a way of restricting the kind of menu items that a third-party extension can add. For example, the primary snap-in can clear the CCM_INSERTIONALLOWED_NEW flag to prevent extensions from adding their own Create New menu items.
<p>
The primary snap-in should not attempt to set bits in <i>pInsertionAllowed</i> that were originally cleared. Future versions of MMC may use bits not currently defined so the primary snap-in should not change bits not currently defined. Third-party extensions should not attempt to change *<i>pInsertionAllowed</i> at all.
</dd>
</dl>
<h4>Notes to Callers</h4>
<p>
This method should not call <b>AddRef</b> on either the <i>piDataObject</i> pointer or the <i>piCallback</i> pointer, nor should it call the methods of those interfaces after returning. Instead, it should make all necessary calls to the methods of those interfaces before returning. If any of these items is selected, you will be given back the pointer to <b>IDataObject</b> in <a href="mmc_ref1_1hes.htm"><b>IExtendContextMenu::Command</b></a>, so do not keep this pointer after this method returns. You will not be notified if the menu is dismissed without any of your items being selected. In addition, do not query for alternate interfaces from <i>piCallback</i> because the one method, <b>IContextMenuCallback::AddItem</b>, should be sufficient.</p>
<h4>See Also</h4>
<p>
<a href="mmc_ref1_4g8b.htm"><b>IContextMenuCallback</b></a>, <b>IDataObject</b>, <a href="mmc_ref1_0ghh.htm"><b>IExtendContextMenu</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multi selection and the Data Objects Used For Communication</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_slate_multi_selection_and_the_data_objects_used_for_communication"></a>Multi selection and the Data Objects Used For Communication</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
If snap-in items are included in multiselection includes, the console queries the snap-ins for a multiselect data object. This is done by passing the special cookie MMC_MULTI_SELECT_COOKIE to the <b>QueryDataObject</b> call. </p>
<p>
The snap-in provided multiselection data object (SI-MS-DO) that will be returned MUST provide the list of object types of all the currently selected items put by the snap-in in the CCF_OBJECT_TYPES_IN_MULTI_SELECT clipboard  format. The data for this format will be cast as a pointer to <a href="mmc_ref2_4e9f.htm"><b>SMMCObjectTypes</b></a> structure. </p>
<p>
The console will use this structure to determine the extension snap-ins. </p>
<p>
The console also creates a composite data object consisting of an array of these snap-in provided multiselection data objects from all the selected snap-ins, (MMC-MS-DO). The clipboard format for the array of snap-in provided multiselection data object is CCF_MULTI_SELECT_SNAPINS, and the data can be cast as a pointer to <a href="mmc_ref2_76yb.htm"><b>SMMCDataObjects</b></a> structure. </p>
<p>
The data object passed to the snap-in for notifications when multiple items are selected is shown in the table at the end of this section.</p>
<p>
Another data object, CUTORMOVE_DO, is best understood in terms of the paste process. If objects that are being pasted need to be deleted at the source as a result of a previous cut or move operation, then the <i>param</i> for MMCN_PASTE will be a pointer to a boolean or a pointer to LPDATAOBJECT, depending on whether one item is selected or multiple items are selected (determined from the data object). If the paste is successful, the destination snap-in should return TRUE for single-selection data objects. For multiple-selection data objects, the destination snap-in should return the CUTORMOVE_DO data object, which in turn will be passed to the source snap-in for the MMCN_CUTORMOVE notification. The format to communicate the list of items successfully pasted should be defined by the source snap-in. Note that the <i>param</i> for MMCN_PASTE will be 0, if it does not involve a previous cut or move operation.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Notification</th>
<th align=left width=52%>Data object sent</th>
</tr>
<tr valign=top>
<td width=48%><code>MMCN_BTN_CLICK</code></td>
<td width=52%><code>MMC-MS-DO</code></td>
</tr>
<tr valign=top>
<td width=48%><code>MMCN_CONTEXTMENU</code></td>
<td width=52%><code>MMC-MS-DO</code></td>
</tr>
<tr valign=top>
<td width=48%><code>MMCN_CUTORMOVE</code></td>
<td width=52%><code>CUTORMOVE_DO</code></td>
</tr>
<tr valign=top>
<td width=48%><code>MMCN_DELETE</code></td>
<td width=52%><code>SI_MS_DO</code></td>
</tr>
<tr valign=top>
<td width=48%><code>MMCN_QUERY_PASTE</code></td>
<td width=52%><code>MMC-MS-DO</code></td>
</tr>
<tr valign=top>
<td width=48%><code>MMCN_PASTE</code></td>
<td width=52%><code>SI_MS_DO</code></td>
</tr>
<tr valign=top>
<td width=48%><code>MMCN_SELECT</code></td>
<td width=52%><code>SI_MS_DO</code></td>
</tr>
</table><br>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DBUGIT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6338"></a>DBUGIT.H</h2>
<pre><code>/* <br> *DBUGIT.H <br> * <br> *Debug Support Routines <br> */ <br> <br> <br>#ifndef _DBUGIT_ <br>#define _DBUGIT_ <br> <br>#ifdef __cplusplus <br>extern "C" { <br>#endif /* __cplusplus */ <br> <br>/* <br> *"Normal" assertion checking.  Provided for compatibility with <br> *imported code. <br> * <br> *Assert(a)Displays a message indicating the file and line number <br> *of this Assert() if a == 0. <br> *AssertSz(a,b)As Assert(); also displays the message b (which should <br> *be a string literal.) <br> *SideAssert(a)As Assert(); the expression a is evaluated even if <br> *asserts are disabled. <br> */ <br>#undef AssertSz <br>#undef Assert <br> <br>#defineASSERTDATA <br> <br>#define AssertSz(a,b) <br>#define Assert(a) <br>#define SideAssert(a)(a) <br> <br> <br> <br>#define NYI(a)if (1) { \ <br>MessageBoxA(NULL, "Not Yet Implemented: "##a, "Microsoft Mail", MB_ICONINFORMATION|MB_OK|MB_TASKMODAL); \ <br>} else <br> <br>#if 0 <br>/* <br> *Tracing Access Group.  Trace points <br> *and asserts are divided into groups sharing a single TAG. <br> *The user interface and this API both provide ways of <br> *enabling or disabling (at run time) a TAG group. <br> * <br> */ <br>typedefint TAG; <br> <br>#define tagNull((TAG) 0) <br> <br>/* <br> *TraceTags <br> */ <br> <br>// System related <br>#define tagCOM((TAG) 1) <br>#define tagDISK((TAG) 2) <br>#define tagERROR((TAG) 3) <br>#define tagErrDbgBrk((TAG) 4) <br> <br> <br>// Memory <br> <br>// VLB <br>#define tagLbx((TAG) 10) <br>#define tagLbxRoutines((TAG) 11) <br>#define tagLbxThumbing   ((TAG) 12) <br>#define tagLbxOtherRoutines((TAG) 13) <br>#define tagLbxStore   ((TAG) 14) <br>#define tagLbxFixItem   ((TAG) 15) <br>#define tagLbxRender   ((TAG) 16) <br>#define tagLbxEventRoutines((TAG) 17) <br>#define tagLbxNotify   ((TAG) 18) <br>#define tagLbxDragDrop   ((TAG) 19) <br>#define tagLbxWndProc   ((TAG) 20) <br>#define tagLbxError((TAG) 73) <br> <br>// MAPID <br>#define tagMapidlg((TAG) 21) <br>#define tagAB((TAG) 22) <br>#define tagDetails((TAG) 23) <br>#define tagABVlbCbc((TAG) 24) <br>#define tagTripole((TAG) 25) <br>#define tagTripoleStub((TAG) 26) <br>#define tagMailExt((TAG) 27) <br>#define tagMemVerbose((TAG) 28) <br>#define tagCapHelp((TAG) 72) <br>#define tagToolbar((TAG) 79) <br> <br>// MAPIN <br>#define tagNoteLaunchDebug((TAG) 29) <br>#define tagMapiNote((TAG) 30) <br>#define tagNoteDlg((TAG) 31) <br>#define tagNoteCmd((TAG) 32) <br>#define tagNoteOle((TAG) 33) <br>#define tagPrint((TAG) 34) <br>#define tagFileAttach((TAG) 35) <br>#define tagFileAttachStub((TAG) 36) <br>#define tagCharFormat((TAG) 37) <br>#define tagAttach((TAG) 38) <br>#define tagStmILB((TAG) 39) <br>#define tagSaveAs((TAG) 40) <br>#define tagMsgAttach((TAG) 41) <br>#define tagMsgAttachStub((TAG) 42) <br>#define tagAttachStg((TAG) 43) <br>#define tagSpell((TAG) 44) <br>#define tagSpellV((TAG) 45) <br>#define tagRTFSync((TAG) 46) <br>#define tagEditOnlyText((TAG) 47) <br>#define tagRTFComp((TAG) 48) <br>#define tagMCacheTrace((TAG) 49) <br>#define tagMCacheData((TAG) 50) <br>#define tagFreeDoc((TAG) 51) <br>#define tagFDSite((TAG) 52) <br>#define tagNoteDataObj((TAG) 53) <br>#define tagReplyForward((TAG) 54) <br> <br>// MAPIN - DBCS related <br>#define tagDBCS((TAG) 55) <br>#define tagFEToolbar((TAG) 56) <br>#define tagIME((TAG) 57) <br> <br>// MLVIEW <br>#define tagMailView((TAG) 58) <br>#define tagMailVD((TAG) 59) <br>#define tagMailVDPaint((TAG) 60) <br>#define tagMlvbr((TAG) 61) <br>#define tagFcext((TAG) 62) <br>#define tagFcextRefc((TAG) 63) <br>#define tagHmt((TAG) 64) <br>#define tagTmt((TAG) 65) <br>#define tagTmtn((TAG) 66) <br>#define tagDragDrop((TAG) 67) <br>#define tagSRestrictions((TAG) 68) <br>#define tagMsmail((TAG) 69) <br>#define tagFormCache((TAG) 83) <br>#define tagConversation((TAG) 84) <br> <br>// MLFIND <br>#define tagFinder((TAG) 70) <br>#define tagCreateInIPM((TAG) 71) <br> <br>// Debugging <br>#define tagPeterDur((TAG) 74) <br>#define tagForms((TAG) 75) <br>#define tagCentral((TAG) 76) <br>#define tagMl3ext((TAG) 77) <br>#define tagEricWong((TAG) 78) <br>#define tagWmsuiRef((TAG) 80) <br>#define tagSession((TAG) 81) <br>#define tagDateTime((TAG) 82) <br> <br>// Other <br>#define tagUserMin((TAG) 85) <br> <br>#define tagMax((TAG) 1024) <br>#endif // 0 <br> <br>#define TraceTag;/##/ <br>#define TraceString(_sz) <br>#define TraceError(_sz, _sc) <br>#define TraceTagString(_tag, _sz) <br> <br>VOID WINAPIDebugBreak2(VOID); <br> <br>#ifdef __cplusplus <br>} <br>#endif  /* __cplusplus */ <br> <br>#endif /* !_DBUGIT_ */ </code></pre>
<p>&nbsp;</p></body>
</HTML>

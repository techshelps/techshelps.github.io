<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ANSIAPI.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6347"></a>ANSIAPI.H</h2>
<pre><code>/* <br> * ansiapi.h <br> * This file contains prototypes of ANSI version of OLE apis <br> * and mapping fooA to foo <br> */ <br>#ifndef _ANSIAPI_INCL <br>#define _ANSIAPI_INCL <br> <br>#define UNICODEOLE32 <br> <br>#ifdef WIN32S <br>#if !defined(UNICODEOLE32) <br>#pragma message("Compiling for 32bit ANSI Ole!\n"); <br>#endif <br>#endif <br> <br>#define WASANSI() {                                                           \ <br>                   OutputDebugString("\n\r\t\tUnicode string was ANSI!\r\n"); \ <br>                   Assert(0);                                                 \ <br>                   _asm { int 3 }                                             \ <br>                  } <br> <br> <br>#ifndef UNICODEOLE32 <br> <br>#define W2A(w, a, cb)     lstrcpy (a, w) <br>#define A2W(a, w, cb)     lstrcpy (w, a) <br> <br>#define FREELOCALSTRING(p) <br>#define MAKE_STR_LOCAL_COPYW2A(s, l)  l = s <br>#define MAKE_STR_LOCAL_COPYA2W(s, l)  l = s <br> <br>#define OLESTRCPY                lstrcpy <br>#define OLESTRCAT                lstrcat <br>#define OLESTRLEN                lstrlen <br>#define OLESTRCMP                lstrcmp <br> <br>#define DeleteFile_AW            DeleteFile <br>#define _lopen_AW                _lopen <br>#define _lcreat_AW               _lcreat <br>#define GlobalAddAtom_AW         GlobalAddAtom <br>#define GlobalGetAtomName_AW     GlobalGetAtomName <br>#define RegOpenKey_AW            RegOpenKey <br> <br>#define CoLoadLibraryA   CoLoadLibrary <br> <br>#define StringFromCLSID2A    StringFromCLSID2 <br>#define StringFromIID2A      StringFromIID2 <br>#define StringFromGUID2A     StringFromGUID2 <br>#define CLSIDFromProgIDA     CLSIDFromProgID <br>#define CLSIDFromStringA     CLSIDFromString <br>#define ProgIDFromCLSIDA     ProgIDFromCLSID <br>#define StringFromCLSIDA     StringFromCLSID <br> <br>#define UtDupStringA2W       UtDupString <br> <br>// Storage APIs <br>#define StgOpenStorageA      StgOpenStorage <br> <br>// IPersistFile ansi translation <br> <br>#define IPersistFile_LoadA(pf, file, mode) (pf)-&gt;Load(file, mode) <br> <br>// IMoniker ansi translation <br> <br>#define IMoniker_GetDisplayNameA(pm, p1, p2, p3) (pm)-&gt;GetDisplayName(p1,p2,p3) <br> <br>#define CreateFileMonikerA   CreateFileMoniker <br> <br>#else  // UNICODEOLE32 <br> <br>#define W2A(w, a, cb)     WideCharToMultiByte(                              \ <br>                                               CP_ACP,                      \ <br>                                               0,                           \ <br>                                               w,                           \ <br>                                               -1,                          \ <br>                                               a,                           \ <br>                                               cb,                          \ <br>                                               NULL,                        \ <br>                                               NULL) <br> <br>#define A2W(a, w, cb)     MultiByteToWideChar(                              \ <br>                                               CP_ACP,                      \ <br>                                               0,                           \ <br>                                               a,                           \ <br>                                               -1,                          \ <br>                                               w,                           \ <br>                                               cb) <br> <br> <br>#define FREELOCALSTRING(p)      delete (p) <br>#define MAKE_STR_LOCAL_COPYW2A(s, l)  {                                   \ <br>                                      l = UtDupStringW2A(s);              \ <br>                                      if (!l) {                           \ <br>                                         return ResultFromScode(S_OOM);   \ <br>                                      }                                   \ <br>                                   } <br> <br>#define MAKE_STR_LOCAL_COPYA2W(s, l)  {                                   \ <br>                                      l = UtDupStringA2W(s);              \ <br>                                      if (!l) {                           \ <br>                                         return ResultFromScode(S_OOM);   \ <br>                                      }                                   \ <br>                                   } <br> <br>#define OLESTRCPY                wcscpy <br>#define OLESTRCAT                wcscat <br>#define OLESTRLEN                wcslen <br>#define OLESTRCMP                wcscmp <br> <br>#define DeleteFile_AW            DeleteFileW <br>#define _lopen_AW                _lopenW <br>#define _lcreat_AW               _lcreatW <br>#define GlobalAddAtom_AW         GlobalAddAtomW <br>#define GlobalGetAtomName_AW     GlobalGetAtomNameW <br>#define RegOpenKey_AW            RegOpenKeyW <br> <br>//STDAPI_(HINSTANCE) CoLoadLibraryA(LPSTR lpszLibName, BOOL bAutoFree); <br> <br>#define StringFromCLSID2A(rclsid, lpsz, cbMax) \ <br>    StringFromGUID2A(rclsid, lpsz, cbMax) <br> <br>#define StringFromIID2A(riid, lpsz, cbMax) \ <br>    StringFromGUID2A(riid, lpsz, cbMax) <br> <br> <br>//STDAPI_(int)  StringFromGUID2A(REFGUID rguid, LPSTR lpsz, int cbMax); <br>//STDAPI        CLSIDFromProgIDA(LPCSTR szProgID, LPCLSID pclsid); <br>//STDAPI        CLSIDFromStringA(LPSTR lpsz, LPCLSID lpclsid); <br>//STDAPI        StringFromCLSIDA(REFCLSID rclsid, LPSTR FAR* lplpsz); <br>//STDAPI        ProgIDFromCLSIDA (REFCLSID clsid, LPSTR FAR* lplpszProgID); <br> <br>//LPWSTR UtDupStringA2W(LPCSTR pSrc); <br>//LPSTR  UtDupStringW2A(LPCWSTR pSrc); <br> <br>// Storage APIs <br>//STDAPI StgOpenStorageA(LPCSTR pwcsName,IStorage FAR *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage FAR * FAR *ppstgOpen); <br> <br>// IPersistFile ansi translation <br> <br>//HRESULT IPersistFile_LoadA(LPPERSISTFILE pIPF, LPSTR szFile, DWORD dwMode); <br> <br>// IMoniker ansi translation <br> <br>//HRESULT IMoniker_GetDisplayNameA(LPMONIKER pm, LPBC p1, LPMONIKER p2, LPSTR FAR *p3); <br> <br>//OLEAPI CreateFileMonikerA ( LPSTR lpszPathName, LPMONIKER FAR * ppmk ); <br> <br>#endif // !UNICODEOLE32 <br> <br>#endif //  _ANSIAPI_INCL </code></pre>
<p>&nbsp;</p></body>
</HTML>

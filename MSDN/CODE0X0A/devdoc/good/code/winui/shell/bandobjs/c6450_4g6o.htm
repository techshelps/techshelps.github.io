<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BANDOBJS.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6450"></a>BANDOBJS.CPP</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          BandObjs.cpp <br>    <br>   Description:   Contains DLLMain and standard OLE COM object creation stuff. <br> <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   #include statements <br>**************************************************************************/ <br> <br>#include &lt;ole2.h&gt; <br>#include &lt;comcat.h&gt; <br>#include &lt;olectl.h&gt; <br>#include "ClsFact.h" <br> <br>/************************************************************************** <br>   GUID stuff <br>**************************************************************************/ <br> <br>//this part is only done once <br>//if you need to use the GUID in another file, just include Guid.h <br>#pragma data_seg(".text") <br>#define INITGUID <br>#include &lt;initguid.h&gt; <br>#include &lt;shlguid.h&gt; <br>#include "Guid.h" <br>#pragma data_seg() <br> <br>/************************************************************************** <br>   private function prototypes <br>**************************************************************************/ <br> <br>extern "C" BOOL WINAPI DllMain(HINSTANCE, DWORD, LPVOID); <br>BOOL RegisterServer(CLSID, LPTSTR); <br>BOOL RegisterComCat(CLSID, CATID); <br> <br>/************************************************************************** <br>   global variables <br>**************************************************************************/ <br> <br>HINSTANCE   g_hInst; <br>UINT        g_DllRefCount; <br> <br>/************************************************************************** <br> <br>   DllMain <br> <br>**************************************************************************/ <br> <br>extern "C" BOOL WINAPI DllMain(  HINSTANCE hInstance,  <br>                                 DWORD dwReason,  <br>                                 LPVOID lpReserved) <br>{ <br>switch(dwReason) <br>   { <br>   case DLL_PROCESS_ATTACH: <br>      g_hInst = hInstance; <br>      break; <br> <br>   case DLL_PROCESS_DETACH: <br>      break; <br>   } <br>    <br>return TRUE; <br>}                                  <br> <br>/************************************************************************** <br> <br>   DllCanUnloadNow <br> <br>**************************************************************************/ <br> <br>STDAPI DllCanUnloadNow(void) <br>{ <br>return (g_DllRefCount ? S_FALSE : S_OK); <br>} <br> <br>/************************************************************************** <br> <br>   DllGetClassObject <br> <br>**************************************************************************/ <br> <br>STDAPI DllGetClassObject(  REFCLSID rclsid,  <br>                           REFIID riid,  <br>                           LPVOID *ppReturn) <br>{ <br>*ppReturn = NULL; <br> <br>//if we don't support this classid, return the proper error code <br>if(   !IsEqualCLSID(rclsid, CLSID_SampleDeskBand) &amp;&amp; <br>      !IsEqualCLSID(rclsid, CLSID_SampleExplorerBar) &amp;&amp; <br>      !IsEqualCLSID(rclsid, CLSID_SampleCommBand)) <br>   return CLASS_E_CLASSNOTAVAILABLE; <br>    <br>//create a CClassFactory object and check it for validity <br>CClassFactory *pClassFactory = new CClassFactory(rclsid); <br>if(NULL == pClassFactory) <br>   return E_OUTOFMEMORY; <br>    <br>//get the QueryInterface return for our return value <br>HRESULT hResult = pClassFactory-&gt;QueryInterface(riid, ppReturn); <br> <br>//call Release to decement the ref count - creating the object set it to one  <br>//and QueryInterface incremented it - since its being used externally (not by  <br>//us), we only want the ref count to be 1 <br>pClassFactory-&gt;Release(); <br> <br>//return the result from QueryInterface <br>return hResult; <br>} <br> <br>/************************************************************************** <br> <br>   DllRegisterServer <br> <br>**************************************************************************/ <br> <br>STDAPI DllRegisterServer(void) <br>{ <br>//Register the desk band object. <br>if(!RegisterServer(CLSID_SampleDeskBand, TEXT("Sample &amp;Desk Band"))) <br>   return SELFREG_E_CLASS; <br> <br>//Register the component categories for the desk band object. <br>if(!RegisterComCat(CLSID_SampleDeskBand, CATID_DeskBand)) <br>   return SELFREG_E_CLASS; <br> <br>//Register the explorer bar object. <br>if(!RegisterServer(CLSID_SampleExplorerBar, TEXT("Sample &amp;Explorer Bar"))) <br>   return SELFREG_E_CLASS; <br> <br>//Register the component categories for the explorer bar object. <br>if(!RegisterComCat(CLSID_SampleExplorerBar, CATID_InfoBand)) <br>   return SELFREG_E_CLASS; <br> <br>//Register the comm band object. <br>if(!RegisterServer(CLSID_SampleCommBand, TEXT("Sample &amp;Comm Band"))) <br>   return SELFREG_E_CLASS; <br> <br>//Register the component categories for the comm band object. <br>if(!RegisterComCat(CLSID_SampleCommBand, CATID_CommBand)) <br>   return SELFREG_E_CLASS; <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   RegisterServer <br> <br>**************************************************************************/ <br> <br>typedef struct{ <br>   HKEY  hRootKey; <br>   LPTSTR szSubKey;//TCHAR szSubKey[MAX_PATH]; <br>   LPTSTR lpszValueName; <br>   LPTSTR szData;//TCHAR szData[MAX_PATH]; <br>}DOREGSTRUCT, *LPDOREGSTRUCT; <br> <br>BOOL RegisterServer(CLSID clsid, LPTSTR lpszTitle) <br>{ <br>int      i; <br>HKEY     hKey; <br>LRESULT  lResult; <br>DWORD    dwDisp; <br>TCHAR    szSubKey[MAX_PATH]; <br>TCHAR    szCLSID[MAX_PATH]; <br>TCHAR    szModule[MAX_PATH]; <br>LPWSTR   pwsz; <br> <br>//get the CLSID in string form <br>StringFromIID(clsid, &amp;pwsz); <br> <br>if(pwsz) <br>   { <br>#ifdef UNICODE <br>   lstrcpy(szCLSID, pwsz); <br>#else <br>   WideCharToMultiByte( CP_ACP, <br>                        0, <br>                        pwsz, <br>                        -1, <br>                        szCLSID, <br>                        ARRAYSIZE(szCLSID), <br>                        NULL, <br>                        NULL); <br>#endif <br> <br>   //free the string <br>   LPMALLOC pMalloc; <br>   CoGetMalloc(1, &amp;pMalloc); <br>   pMalloc-&gt;Free(pwsz); <br>   pMalloc-&gt;Release(); <br>   } <br> <br>//get this app's path and file name <br>GetModuleFileName(g_hInst, szModule, ARRAYSIZE(szModule)); <br> <br>DOREGSTRUCT ClsidEntries[] = {HKEY_CLASSES_ROOT,   TEXT("CLSID\\%s"),                  NULL,                   lpszTitle, <br>                              HKEY_CLASSES_ROOT,   TEXT("CLSID\\%s\\InprocServer32"),  NULL,                   szModule, <br>                              HKEY_CLASSES_ROOT,   TEXT("CLSID\\%s\\InprocServer32"),  TEXT("ThreadingModel"), TEXT("Apartment"), <br>                              NULL,                NULL,                               NULL,                   NULL}; <br> <br>//register the CLSID entries <br>for(i = 0; ClsidEntries[i].hRootKey; i++) <br>   { <br>   //create the sub key string - for this case, insert the file extension <br>   wsprintf(szSubKey, ClsidEntries[i].szSubKey, szCLSID); <br> <br>   lResult = RegCreateKeyEx(  ClsidEntries[i].hRootKey, <br>                              szSubKey, <br>                              0, <br>                              NULL, <br>                              REG_OPTION_NON_VOLATILE, <br>                              KEY_WRITE, <br>                              NULL, <br>                              &amp;hKey, <br>                              &amp;dwDisp); <br>    <br>   if(NOERROR == lResult) <br>      { <br>      TCHAR szData[MAX_PATH]; <br> <br>      //if necessary, create the value string <br>      wsprintf(szData, ClsidEntries[i].szData, szModule); <br>    <br>      lResult = RegSetValueEx(   hKey, <br>                                 ClsidEntries[i].lpszValueName, <br>                                 0, <br>                                 REG_SZ, <br>                                 (LPBYTE)szData, <br>                                 lstrlen(szData) + 1); <br>       <br>      RegCloseKey(hKey); <br>      } <br>   else <br>      return FALSE; <br>   } <br> <br>return TRUE; <br>} <br> <br>/************************************************************************** <br> <br>   RegisterComCat <br> <br>**************************************************************************/ <br> <br>BOOL RegisterComCat(CLSID clsid, CATID CatID) <br>{ <br>ICatRegister   *pcr; <br>HRESULT        hr = S_OK ; <br>     <br>CoInitialize(NULL); <br> <br>hr = CoCreateInstance(  CLSID_StdComponentCategoriesMgr,  <br>                        NULL,  <br>                        CLSCTX_INPROC_SERVER,  <br>                        IID_ICatRegister,  <br>                        (LPVOID*)&amp;pcr); <br> <br>if(SUCCEEDED(hr)) <br>   { <br>   hr = pcr-&gt;RegisterClassImplCategories(clsid, 1, &amp;CatID); <br> <br>   pcr-&gt;Release(); <br>   } <br>         <br>CoUninitialize(); <br> <br>return SUCCEEDED(hr); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

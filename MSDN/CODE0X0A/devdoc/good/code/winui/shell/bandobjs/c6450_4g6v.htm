<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXPLRBAR.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6457"></a>EXPLRBAR.CPP</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          ExplorerBar.cpp <br>    <br>   Description:   Implements CExplorerBar <br> <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   #include statements <br>**************************************************************************/ <br> <br>#include "ExplrBar.h" <br>#include "Guid.h" <br> <br>/************************************************************************** <br> <br>   CExplorerBar::CExplorerBar() <br> <br>**************************************************************************/ <br> <br>CExplorerBar::CExplorerBar() <br>{ <br>m_pSite = NULL; <br> <br>m_hWnd = NULL; <br>m_hwndParent = NULL; <br> <br>m_bFocus = FALSE; <br> <br>m_dwViewMode = 0; <br>m_dwBandID = 0; <br> <br>m_ObjRefCount = 1; <br>g_DllRefCount++; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::~CExplorerBar() <br> <br>**************************************************************************/ <br> <br>CExplorerBar::~CExplorerBar() <br>{ <br>//this should have been freed in a call to SetSite(NULL), but just to be safe <br>if(m_pSite) <br>   { <br>   m_pSite-&gt;Release(); <br>   m_pSite = NULL; <br>   } <br> <br>g_DllRefCount--; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IUnknown Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CExplorerBar::QueryInterface <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::QueryInterface(REFIID riid, LPVOID *ppReturn) <br>{ <br>*ppReturn = NULL; <br> <br>//IUnknown <br>if(IsEqualIID(riid, IID_IUnknown)) <br>   { <br>   *ppReturn = this; <br>   } <br> <br>//IOleWindow <br>else if(IsEqualIID(riid, IID_IOleWindow)) <br>   { <br>   *ppReturn = (IOleWindow*)this; <br>   } <br> <br>//IDockingWindow <br>else if(IsEqualIID(riid, IID_IDockingWindow)) <br>   { <br>   *ppReturn = (IDockingWindow*)this; <br>   }    <br> <br>//IInputObject <br>else if(IsEqualIID(riid, IID_IInputObject)) <br>   { <br>   *ppReturn = (IInputObject*)this; <br>   }    <br> <br>//IObjectWithSite <br>else if(IsEqualIID(riid, IID_IObjectWithSite)) <br>   { <br>   *ppReturn = (IObjectWithSite*)this; <br>   }    <br> <br>//IDeskBand <br>else if(IsEqualIID(riid, IID_IDeskBand)) <br>   { <br>   *ppReturn = (IDeskBand*)this; <br>   }    <br> <br>//IPersist <br>else if(IsEqualIID(riid, IID_IPersist)) <br>   { <br>   *ppReturn = (IPersist*)this; <br>   }    <br> <br>//IPersistStream <br>else if(IsEqualIID(riid, IID_IPersistStream)) <br>   { <br>   *ppReturn = (IPersistStream*)this; <br>   }    <br> <br>//IContextMenu <br>else if(IsEqualIID(riid, IID_IContextMenu)) <br>   { <br>   *ppReturn = (IContextMenu*)this; <br>   }    <br> <br>if(*ppReturn) <br>   { <br>   (*(LPUNKNOWN*)ppReturn)-&gt;AddRef(); <br>   return S_OK; <br>   } <br> <br>return E_NOINTERFACE; <br>}                                              <br> <br>/************************************************************************** <br> <br>   CExplorerBar::AddRef <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP_(DWORD) CExplorerBar::AddRef() <br>{ <br>return ++m_ObjRefCount; <br>} <br> <br> <br>/************************************************************************** <br> <br>   CExplorerBar::Release <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP_(DWORD) CExplorerBar::Release() <br>{ <br>if(--m_ObjRefCount == 0) <br>   { <br>   delete this; <br>   return 0; <br>   } <br>    <br>return m_ObjRefCount; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IOleWindow Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CExplorerBar::GetWindow() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::GetWindow(HWND *phWnd) <br>{ <br>*phWnd = m_hWnd; <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::ContextSensitiveHelp() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::ContextSensitiveHelp(BOOL fEnterMode) <br>{ <br>return E_NOTIMPL; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IDockingWindow Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CExplorerBar::ShowDW() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::ShowDW(BOOL fShow) <br>{ <br>if(m_hWnd) <br>   { <br>   if(fShow) <br>      { <br>      //show our window <br>      ShowWindow(m_hWnd, SW_SHOW); <br>      } <br>   else <br>      { <br>      //hide our window <br>      ShowWindow(m_hWnd, SW_HIDE); <br>      } <br>   } <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::CloseDW() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::CloseDW(DWORD dwReserved) <br>{ <br>ShowDW(FALSE); <br> <br>if(IsWindow(m_hWnd)) <br>   DestroyWindow(m_hWnd); <br> <br>m_hWnd = NULL; <br>    <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::ResizeBorderDW() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::ResizeBorderDW(   LPCRECT prcBorder,  <br>                                          IUnknown* punkSite,  <br>                                          BOOL fReserved) <br>{ <br>/* <br>This method is never called for Band Objects. <br>*/ <br>return E_NOTIMPL; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IInputObject Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CExplorerBar::UIActivateIO() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::UIActivateIO(BOOL fActivate, LPMSG pMsg) <br>{ <br>if(fActivate) <br>   SetFocus(m_hWnd); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::HasFocusIO() <br>    <br>   If this window or one of its decendants has the focus, return S_OK. Return  <br>   S_FALSE if we don't have the focus. <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::HasFocusIO(void) <br>{ <br>if(m_bFocus) <br>   return S_OK; <br> <br>return S_FALSE; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::TranslateAcceleratorIO() <br>    <br>   If the accelerator is translated, return S_OK or S_FALSE otherwise. <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::TranslateAcceleratorIO(LPMSG pMsg) <br>{ <br>return S_FALSE; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IObjectWithSite implementations <br>// <br> <br>/************************************************************************** <br> <br>   CExplorerBar::SetSite() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::SetSite(IUnknown* punkSite) <br>{ <br>//If a site is being held, release it. <br>if(m_pSite) <br>   { <br>   m_pSite-&gt;Release(); <br>   m_pSite = NULL; <br>   } <br> <br>//If punkSite is not NULL, a new site is being set. <br>if(punkSite) <br>   { <br>   //Get the parent window. <br>   IOleWindow  *pOleWindow; <br> <br>   m_hwndParent = NULL; <br>    <br>   if(SUCCEEDED(punkSite-&gt;QueryInterface(IID_IOleWindow, (LPVOID*)&amp;pOleWindow))) <br>      { <br>      pOleWindow-&gt;GetWindow(&amp;m_hwndParent); <br>      pOleWindow-&gt;Release(); <br>      } <br> <br>   if(!m_hwndParent) <br>      return E_FAIL; <br> <br>   if(!RegisterAndCreateWindow()) <br>      return E_FAIL; <br> <br>   //Get and keep the IInputObjectSite pointer. <br>   if(SUCCEEDED(punkSite-&gt;QueryInterface(IID_IInputObjectSite, (LPVOID*)&amp;m_pSite))) <br>      { <br>      return S_OK; <br>      } <br>    <br>   return E_FAIL; <br>   } <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::GetSite() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::GetSite(REFIID riid, LPVOID *ppvReturn) <br>{ <br>*ppvReturn = NULL; <br> <br>if(m_pSite) <br>   return m_pSite-&gt;QueryInterface(riid, ppvReturn); <br> <br>return E_FAIL; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IDeskBand implementation <br>// <br> <br>/************************************************************************** <br> <br>   CExplorerBar::GetBandInfo() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::GetBandInfo(DWORD dwBandID, DWORD dwViewMode, DESKBANDINFO* pdbi) <br>{ <br>if(pdbi) <br>   { <br>   m_dwBandID = dwBandID; <br>   m_dwViewMode = dwViewMode; <br> <br>   if(pdbi-&gt;dwMask &amp; DBIM_MINSIZE) <br>      { <br>      pdbi-&gt;ptMinSize.x = MIN_SIZE_X; <br>      pdbi-&gt;ptMinSize.y = MIN_SIZE_Y; <br>      } <br> <br>   if(pdbi-&gt;dwMask &amp; DBIM_MAXSIZE) <br>      { <br>      pdbi-&gt;ptMaxSize.x = -1; <br>      pdbi-&gt;ptMaxSize.y = -1; <br>      } <br> <br>   if(pdbi-&gt;dwMask &amp; DBIM_INTEGRAL) <br>      { <br>      pdbi-&gt;ptIntegral.x = 1; <br>      pdbi-&gt;ptIntegral.y = 1; <br>      } <br> <br>   if(pdbi-&gt;dwMask &amp; DBIM_ACTUAL) <br>      { <br>      pdbi-&gt;ptActual.x = 0; <br>      pdbi-&gt;ptActual.y = 0; <br>      } <br> <br>   if(pdbi-&gt;dwMask &amp; DBIM_TITLE) <br>      { <br>      lstrcpyW(pdbi-&gt;wszTitle, L"Sample Explorer Bar"); <br>      } <br> <br>   if(pdbi-&gt;dwMask &amp; DBIM_MODEFLAGS) <br>      { <br>      pdbi-&gt;dwModeFlags = DBIMF_VARIABLEHEIGHT; <br>      } <br>    <br>   if(pdbi-&gt;dwMask &amp; DBIM_BKCOLOR) <br>      { <br>      //Use the default background color by removing this flag. <br>      pdbi-&gt;dwMask &amp;= ~DBIM_BKCOLOR; <br>      } <br> <br>   return S_OK; <br>   } <br> <br>return E_INVALIDARG; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IPersistStream implementations <br>//  <br>// This is only supported to allow the desk band to be dropped on the  <br>// desktop and to prevent multiple instances of the desk band from showing  <br>// up in the context menu. This desk band doesn't actually persist any data. <br>// <br> <br>/************************************************************************** <br> <br>   CExplorerBar::GetClassID() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::GetClassID(LPCLSID pClassID) <br>{ <br>*pClassID = CLSID_SampleExplorerBar; <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::IsDirty() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::IsDirty(void) <br>{ <br>return S_FALSE; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::Load() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::Load(LPSTREAM pStream) <br>{ <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::Save() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::Save(LPSTREAM pStream, BOOL fClearDirty) <br>{ <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::GetSizeMax() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::GetSizeMax(ULARGE_INTEGER *pul) <br>{ <br>return E_NOTIMPL; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IContextMenu Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CExplorerBar::QueryContextMenu() <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::QueryContextMenu( HMENU hMenu, <br>                                             UINT indexMenu, <br>                                             UINT idCmdFirst, <br>                                             UINT idCmdLast, <br>                                             UINT uFlags) <br>{ <br>if(!(CMF_DEFAULTONLY &amp; uFlags)) <br>   { <br>   InsertMenu( hMenu,  <br>               indexMenu,  <br>               MF_STRING | MF_BYPOSITION,  <br>               idCmdFirst + IDM_COMMAND,  <br>               "&amp;Sample Explorer Bar Command"); <br> <br>   return MAKE_HRESULT(SEVERITY_SUCCESS, 0, USHORT(IDM_COMMAND + 1)); <br>   } <br> <br>return MAKE_HRESULT(SEVERITY_SUCCESS, 0, USHORT(0)); <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::InvokeCommand() <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::InvokeCommand(LPCMINVOKECOMMANDINFO lpcmi) <br>{ <br>switch (LOWORD(lpcmi-&gt;lpVerb)) <br>   { <br>   case IDM_COMMAND: <br>      MessageBox(lpcmi-&gt;hwnd, TEXT("Explorer Bar Command selected."), TEXT("Sample Explorer Bar"), MB_OK | MB_ICONINFORMATION); <br>      break; <br> <br>   default: <br>      return E_INVALIDARG; <br>   } <br> <br>return NOERROR; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::GetCommandString() <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CExplorerBar::GetCommandString( UINT idCommand, <br>                                             UINT uFlags, <br>                                             LPUINT lpReserved, <br>                                             LPSTR lpszName, <br>                                             UINT uMaxNameLen) <br>{ <br>HRESULT  hr = E_INVALIDARG; <br> <br>switch(uFlags) <br>   { <br>   case GCS_HELPTEXT: <br>      switch(idCommand) <br>         { <br>         case IDM_COMMAND: <br>            lstrcpy(lpszName, TEXT("Explorer Bar command help text")); <br>            hr = NOERROR; <br>            break; <br>         } <br>      break; <br>    <br>   case GCS_VERB: <br>      switch(idCommand) <br>         { <br>         case IDM_COMMAND: <br>            lstrcpy(lpszName, TEXT("command")); <br>            hr = NOERROR; <br>            break; <br>         } <br>      break; <br>    <br>   case GCS_VALIDATE: <br>      hr = NOERROR; <br>      break; <br>   } <br> <br>return hr; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// private method implementations <br>// <br> <br>/************************************************************************** <br> <br>   CExplorerBar::WndProc() <br>    <br>**************************************************************************/ <br> <br>LRESULT CALLBACK CExplorerBar::WndProc(HWND hWnd, UINT uMessage, WPARAM wParam, LPARAM lParam) <br>{ <br>CExplorerBar  *pThis = (CExplorerBar*)GetWindowLong(hWnd, GWL_USERDATA); <br> <br>switch (uMessage) <br>   { <br>   case WM_NCCREATE: <br>      { <br>      LPCREATESTRUCT lpcs = (LPCREATESTRUCT)lParam; <br>      pThis = (CExplorerBar*)(lpcs-&gt;lpCreateParams); <br>      SetWindowLong(hWnd, GWL_USERDATA, (LONG)pThis); <br> <br>      //set the window handle <br>      pThis-&gt;m_hWnd = hWnd; <br>      } <br>      break; <br>    <br>   case WM_PAINT: <br>      return pThis-&gt;OnPaint(); <br>    <br>   case WM_COMMAND: <br>      return pThis-&gt;OnCommand(wParam, lParam); <br>    <br>   case WM_SETFOCUS: <br>      return pThis-&gt;OnSetFocus(); <br> <br>   case WM_KILLFOCUS: <br>      return pThis-&gt;OnKillFocus(); <br>   } <br> <br>return DefWindowProc(hWnd, uMessage, wParam, lParam); <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::OnPaint() <br>    <br>**************************************************************************/ <br> <br>LRESULT CExplorerBar::OnPaint(void) <br>{ <br>PAINTSTRUCT ps; <br>RECT        rc; <br> <br>BeginPaint(m_hWnd, &amp;ps); <br> <br>GetClientRect(m_hWnd, &amp;rc); <br>SetTextColor(ps.hdc, RGB(255, 255, 255)); <br>SetBkMode(ps.hdc, TRANSPARENT); <br>DrawText(ps.hdc, TEXT("Sample Explorer Bar"), -1, &amp;rc, DT_SINGLELINE | DT_CENTER | DT_VCENTER); <br> <br>EndPaint(m_hWnd, &amp;ps); <br> <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::OnCommand() <br>    <br>**************************************************************************/ <br> <br>LRESULT CExplorerBar::OnCommand(WPARAM wParam, LPARAM lParam) <br>{ <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::FocusChange() <br>    <br>**************************************************************************/ <br> <br>void CExplorerBar::FocusChange(BOOL bFocus) <br>{ <br>m_bFocus = bFocus; <br> <br>//inform the input object site that the focus has changed <br>if(m_pSite) <br>   { <br>   m_pSite-&gt;OnFocusChangeIS((IDockingWindow*)this, bFocus); <br>   } <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::OnSetFocus() <br>    <br>**************************************************************************/ <br> <br>LRESULT CExplorerBar::OnSetFocus(void) <br>{ <br>FocusChange(TRUE); <br> <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::OnKillFocus() <br>    <br>**************************************************************************/ <br> <br>LRESULT CExplorerBar::OnKillFocus(void) <br>{ <br>FocusChange(FALSE); <br> <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   CExplorerBar::RegisterAndCreateWindow() <br>    <br>**************************************************************************/ <br> <br>BOOL CExplorerBar::RegisterAndCreateWindow(void) <br>{ <br>//If the window doesn't exist yet, create it now. <br>if(!m_hWnd) <br>   { <br>   //Can't create a child window without a parent. <br>   if(!m_hwndParent) <br>      { <br>      return FALSE; <br>      } <br> <br>   //If the window class has not been registered, then do so. <br>   WNDCLASS wc; <br>   if(!GetClassInfo(g_hInst, EB_CLASS_NAME, &amp;wc)) <br>      { <br>      ZeroMemory(&amp;wc, sizeof(wc)); <br>      wc.style          = CS_HREDRAW | CS_VREDRAW | CS_GLOBALCLASS; <br>      wc.lpfnWndProc    = (WNDPROC)WndProc; <br>      wc.cbClsExtra     = 0; <br>      wc.cbWndExtra     = 0; <br>      wc.hInstance      = g_hInst; <br>      wc.hIcon          = NULL; <br>      wc.hCursor        = LoadCursor(NULL, IDC_ARROW); <br>      wc.hbrBackground  = (HBRUSH)CreateSolidBrush(RGB(0, 0, 192)); <br>      wc.lpszMenuName   = NULL; <br>      wc.lpszClassName  = EB_CLASS_NAME; <br>       <br>      if(!RegisterClass(&amp;wc)) <br>         { <br>         //If RegisterClass fails, CreateWindow below will fail. <br>         } <br>      } <br> <br>   RECT  rc; <br> <br>   GetClientRect(m_hwndParent, &amp;rc); <br> <br>   //Create the window. The WndProc will set m_hWnd. <br>   CreateWindowEx(   0, <br>                     EB_CLASS_NAME, <br>                     NULL, <br>                     WS_CHILD | WS_CLIPSIBLINGS | WS_BORDER, <br>                     rc.left, <br>                     rc.top, <br>                     rc.right - rc.left, <br>                     rc.bottom - rc.top, <br>                     m_hwndParent, <br>                     NULL, <br>                     g_hInst, <br>                     (LPVOID)this); <br>       <br>   } <br> <br>return (NULL != m_hWnd); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

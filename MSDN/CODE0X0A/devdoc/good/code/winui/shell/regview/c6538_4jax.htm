<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INFOTIP.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6549"></a>INFOTIP.CPP</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          InfoTip.cpp <br>    <br>   Description:   Implements CQueryInfo. <br> <br>**************************************************************************/ <br> <br>#include "InfoTip.h" <br> <br>#if (_WIN32_IE &gt;= 0x0400) <br> <br>/************************************************************************** <br>   #include statements <br>**************************************************************************/ <br> <br>#include "Guid.h" <br>#include "Utility.h" <br> <br>/************************************************************************** <br> <br>   CQueryInfo::CQueryInfo() <br> <br>**************************************************************************/ <br> <br>CQueryInfo::CQueryInfo(LPCITEMIDLIST pidl) <br>{ <br>m_pPidlMgr = new CPidlMgr(); <br>if(!m_pPidlMgr) <br>   { <br>   delete this; <br>   return; <br>   } <br> <br>//get the shell's IMalloc pointer <br>//we'll keep this until we get destroyed <br>if(FAILED(SHGetMalloc(&amp;m_pMalloc))) <br>   { <br>   delete this; <br>   return; <br>   } <br> <br>m_pidl = m_pPidlMgr-&gt;Copy(pidl); <br> <br>m_ObjRefCount = 1; <br> <br>g_DllRefCount++; <br>} <br> <br>/************************************************************************** <br> <br>   CQueryInfo::~CQueryInfo() <br> <br>**************************************************************************/ <br> <br>CQueryInfo::~CQueryInfo() <br>{ <br>if(m_pidl) <br>   { <br>   m_pPidlMgr-&gt;Delete(m_pidl); <br>   m_pidl = NULL; <br>   } <br> <br>if(m_pMalloc) <br>   { <br>   m_pMalloc-&gt;Release(); <br>   } <br> <br>if(m_pPidlMgr) <br>   { <br>   delete m_pPidlMgr; <br>   } <br> <br>g_DllRefCount--; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IUnknown Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CQueryInfo::QueryInterface <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CQueryInfo::QueryInterface(REFIID riid, LPVOID *ppReturn) <br>{ <br>*ppReturn = NULL; <br> <br>//IUnknown <br>if(IsEqualIID(riid, IID_IUnknown)) <br>   { <br>   *ppReturn = this; <br>   } <br> <br>//IQueryInfo <br>else if(IsEqualIID(riid, IID_IQueryInfo)) <br>   { <br>   *ppReturn = (IQueryInfo*)this; <br>   } <br> <br>if(*ppReturn) <br>   { <br>   (*(LPUNKNOWN*)ppReturn)-&gt;AddRef(); <br>   return S_OK; <br>   } <br> <br>return E_NOINTERFACE; <br>}                                              <br> <br>/************************************************************************** <br> <br>   CQueryInfo::AddRef <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP_(DWORD) CQueryInfo::AddRef() <br>{ <br>return ++m_ObjRefCount; <br>} <br> <br>/************************************************************************** <br> <br>   CQueryInfo::Release <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP_(DWORD) CQueryInfo::Release() <br>{ <br>if(--m_ObjRefCount == 0) <br>   { <br>   delete this; <br>   return 0; <br>   } <br>    <br>return m_ObjRefCount; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IQueryInfo Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CQueryInfo::GetInfoTip() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CQueryInfo::GetInfoTip(DWORD dwFlags, WCHAR **ppwszTip) <br>{ <br>TCHAR szTipText[MAX_PATH]; <br>int   cchOleStr; <br> <br>*ppwszTip = NULL; <br> <br>//get the entire text for the item <br>m_pPidlMgr-&gt;GetPidlPath(m_pidl, szTipText, sizeof(szTipText)); <br> <br>//get the number of characters required <br>cchOleStr = lstrlen(szTipText) + 1; <br> <br>//allocate the wide character string <br>*ppwszTip = (LPWSTR)m_pMalloc-&gt;Alloc(cchOleStr * sizeof(WCHAR)); <br>if(!*ppwszTip) <br>   return E_OUTOFMEMORY; <br> <br>LocalToWideChar(*ppwszTip, szTipText, cchOleStr); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CQueryInfo::GetInfoFlags() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CQueryInfo::GetInfoFlags(LPDWORD pdwFlags) <br>{ <br>return E_NOTIMPL; <br>} <br> <br>#endif   //(_WIN32_IE &gt;= 0x0400) </code></pre>
<p>&nbsp;</p></body>
</HTML>

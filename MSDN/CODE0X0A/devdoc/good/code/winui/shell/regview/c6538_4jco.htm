<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SHLVIEW.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6558"></a>SHLVIEW.H</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          ShlView.h <br>    <br>   Description:   CShellView definitions. <br> <br>**************************************************************************/ <br> <br>#ifndef SHELLVIEW_H <br>#define SHELLVIEW_H <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;objbase.h&gt; <br>#include &lt;shlobj.h&gt; <br>#include &lt;ServProv.h&gt; <br>#include &lt;DocObj.h&gt; <br>#include "ShlFldr.h" <br>#include "PidlMgr.h" <br>#include "DockWndw.h" <br> <br>/************************************************************************** <br> <br>   global variables <br> <br>**************************************************************************/ <br> <br>extern HINSTANCE  g_hInst; <br>extern UINT       g_DllRefCount; <br>extern HIMAGELIST g_himlLarge; <br>extern HIMAGELIST g_himlSmall; <br> <br>/************************************************************************** <br> <br>   global IDs <br> <br>**************************************************************************/ <br> <br>#define NS_CLASS_NAME   (TEXT("RegViewNSClass")) <br> <br>//menu items <br>#define IDM_VIEW_KEYS   (FCIDM_SHVIEWFIRST + 0x500) <br>#define IDM_VIEW_IDW    (FCIDM_SHVIEWFIRST + 0x501) <br>#define IDM_MYFILEITEM  (FCIDM_SHVIEWFIRST + 0x502) <br> <br>//control IDs <br>#define ID_LISTVIEW     2000 <br> <br>/************************************************************************** <br> <br>   CShellView class definition <br> <br>**************************************************************************/ <br> <br>class CShellView : public IShellView, public IOleCommandTarget <br>{ <br>friend CDockingWindow; <br> <br>protected: <br>   DWORD m_ObjRefCount; <br>    <br>public: <br>   CShellView(CShellFolder*, LPCITEMIDLIST); <br>   ~CShellView(); <br>    <br>   //IUnknown methods <br>   STDMETHOD (QueryInterface)(REFIID, LPVOID*); <br>   STDMETHOD_ (DWORD, AddRef)(); <br>   STDMETHOD_ (DWORD, Release)(); <br>    <br>   //IOleWindow methods <br>   STDMETHOD (GetWindow) (HWND*); <br>   STDMETHOD (ContextSensitiveHelp) (BOOL); <br> <br>   //IShellView methods <br>   STDMETHOD (TranslateAccelerator) (LPMSG); <br>   STDMETHOD (EnableModeless) (BOOL); <br>   STDMETHOD (UIActivate) (UINT); <br>   STDMETHOD (Refresh) (void); <br>   STDMETHOD (CreateViewWindow) (LPSHELLVIEW, LPCFOLDERSETTINGS, LPSHELLBROWSER, LPRECT, HWND*); <br>   STDMETHOD (DestroyViewWindow) (void); <br>   STDMETHOD (GetCurrentInfo) (LPFOLDERSETTINGS); <br>   STDMETHOD (AddPropertySheetPages) (DWORD, LPFNADDPROPSHEETPAGE, LPARAM); <br>   STDMETHOD (SaveViewState) (void); <br>   STDMETHOD (SelectItem) (LPCITEMIDLIST, UINT); <br>   STDMETHOD (GetItemObject) (UINT, REFIID, LPVOID*); <br> <br>   //IOleCommandTarget methods <br>   STDMETHOD (QueryStatus) (const GUID *pguidCmdGroup, ULONG cCmds, OLECMD prgCmds[], OLECMDTEXT *pCmdText); <br>   STDMETHOD (Exec) (const GUID *pguidCmdGroup, DWORD nCmdID, DWORD nCmdExecOpt, VARIANTARG *pvaIn, VARIANTARG *pvaOut); <br> <br>private: <br>//private member variables <br>   UINT m_uState; <br>HKEY m_hKeyRoot; <br>LPITEMIDLIST m_pidl; <br>FOLDERSETTINGS m_FolderSettings; <br>LPSHELLBROWSER m_pShellBrowser; <br>HWND m_hwndParent; <br>HWND m_hWnd; <br>HWND m_hwndList; <br>HMENU m_hMenu; <br>   CShellFolder *m_pSFParent; <br>LPMALLOC m_pMalloc; <br>   LPPIDLMGR m_pPidlMgr; <br>CDockingWindow* m_pDockingWindow; <br> <br>//private member functions <br>   static LRESULT CALLBACK WndProc(HWND hWnd, UINT uMessage, WPARAM wParam, LPARAM lParam); <br>LRESULT UpdateMenu(HMENU hMenu); <br>HMENU BuildRegistryMenu(void); <br>void MergeFileMenu(HMENU); <br>void MergeViewMenu(HMENU); <br>LRESULT OnCommand(DWORD, DWORD, HWND); <br>LRESULT OnActivate(UINT); <br>void OnDeactivate(void); <br>LRESULT OnSetFocus(void); <br>LRESULT OnKillFocus(void); <br>LRESULT OnNotify(UINT, LPNMHDR); <br>LRESULT OnSize(WORD, WORD); <br>LRESULT OnCreate(void); <br>BOOL CreateList(void); <br>BOOL InitList(void); <br>void FillList(void); <br>BOOL CanDoIDockingWindow(void); <br>BOOL AddRemoveDockingWindow(BOOL); <br>LRESULT OnSettingChange(LPCTSTR); <br>   void UpdateShellSettings(void); <br>   void DoContextMenu(WORD, WORD, BOOL); <br> <br>}; <br> <br>#endif   //SHELLVIEW_H </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXTRICON.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6546"></a>EXTRICON.CPP</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          ExtrIcon.cpp <br>    <br>   Description:   Implements CExtractIcon. <br> <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   #include statements <br>**************************************************************************/ <br> <br>#include "ExtrIcon.h" <br> <br>/************************************************************************** <br> <br>   CExtractIcon::CExtractIcon() <br> <br>**************************************************************************/ <br> <br>CExtractIcon::CExtractIcon(LPCITEMIDLIST pidl) <br>{ <br>m_pPidlMgr = new CPidlMgr(); <br>if(!m_pPidlMgr) <br>   { <br>   delete this; <br>   return; <br>   } <br> <br>m_pidl = m_pPidlMgr-&gt;Copy(pidl); <br> <br>m_ObjRefCount = 1; <br> <br>g_DllRefCount++; <br>} <br> <br>/************************************************************************** <br> <br>   CExtractIcon::~CExtractIcon() <br> <br>**************************************************************************/ <br> <br>CExtractIcon::~CExtractIcon() <br>{ <br>if(m_pidl) <br>   { <br>   m_pPidlMgr-&gt;Delete(m_pidl); <br>   m_pidl = NULL; <br>   } <br> <br>if(m_pPidlMgr) <br>   { <br>   delete m_pPidlMgr; <br>   } <br> <br>g_DllRefCount--; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IUnknown Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CExtractIcon::QueryInterface <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CExtractIcon::QueryInterface(REFIID riid, LPVOID *ppReturn) <br>{ <br>*ppReturn = NULL; <br> <br>//IUnknown <br>if(IsEqualIID(riid, IID_IUnknown)) <br>   { <br>   *ppReturn = this; <br>   } <br> <br>//IExtractIcon <br>else if(IsEqualIID(riid, IID_IExtractIcon)) <br>   { <br>   *ppReturn = (IExtractIcon*)this; <br>   } <br> <br>if(*ppReturn) <br>   { <br>   (*(LPUNKNOWN*)ppReturn)-&gt;AddRef(); <br>   return S_OK; <br>   } <br> <br>return E_NOINTERFACE; <br>}                                              <br> <br>/************************************************************************** <br> <br>   CExtractIcon::AddRef <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP_(DWORD) CExtractIcon::AddRef() <br>{ <br>return ++m_ObjRefCount; <br>} <br> <br>/************************************************************************** <br> <br>   CExtractIcon::Release <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP_(DWORD) CExtractIcon::Release() <br>{ <br>if(--m_ObjRefCount == 0) <br>   { <br>   delete this; <br>   return 0; <br>   } <br>    <br>return m_ObjRefCount; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IExtractIcon Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CExtractIcon::GetIconLocation() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExtractIcon::GetIconLocation(  UINT uFlags,  <br>                                             LPTSTR szIconFile,  <br>                                             UINT cchMax,  <br>                                             LPINT piIndex,  <br>                                             LPUINT puFlags) <br>{ <br>//tell the shell to always call Extract <br>*puFlags = GIL_NOTFILENAME; <br> <br>//the pidl is either a value or a folder, so find out which it is <br>if(m_pPidlMgr-&gt;IsValue(m_pPidlMgr-&gt;GetLastItem(m_pidl))) <br>   { <br>   //its a value <br>   DWORD dwType; <br> <br>   //get the data type to determine which icon to get <br>   m_pPidlMgr-&gt;GetValueType(m_pidl, &amp;dwType); <br> <br>   switch(dwType) <br>      { <br>      case REG_BINARY: <br>      case REG_DWORD: <br>      case REG_DWORD_BIG_ENDIAN: <br>         *piIndex = ICON_INDEX_BINARY; <br>         break; <br> <br>      default: <br>         *piIndex = ICON_INDEX_STRING; <br>         break; <br>         } <br>   } <br>else <br>   { <br>   //its a key <br>   if(uFlags &amp; GIL_OPENICON) <br>      { <br>      *piIndex = ICON_INDEX_FOLDEROPEN;  //tell Extract to return the open icon <br>      } <br>   else <br>      { <br>      *piIndex = ICON_INDEX_FOLDER;  //tell Extract to return the open icon <br>      } <br>   } <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CExtractIcon::Extract() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CExtractIcon::Extract( LPCTSTR pszFile,  <br>                                    UINT nIconIndex,  <br>                                    HICON *phiconLarge,  <br>                                    HICON *phiconSmall,  <br>                                    UINT nIconSize) <br>{ <br>*phiconLarge = ImageList_GetIcon(g_himlLarge, nIconIndex, ILD_TRANSPARENT); <br>*phiconSmall = ImageList_GetIcon(g_himlSmall, nIconIndex, ILD_TRANSPARENT); <br> <br>/* <br>if(nIconIndex) <br>   { <br>   *phiconLarge = ImageList_GetIcon(g_himlLarge, ICON_INDEX_FOLDEROPEN, ILD_TRANSPARENT); <br>   *phiconSmall = ImageList_GetIcon(g_himlSmall, ICON_INDEX_FOLDEROPEN, ILD_TRANSPARENT); <br>   } <br>else <br>   { <br>   *phiconLarge = ImageList_GetIcon(g_himlLarge, ICON_INDEX_FOLDER, ILD_TRANSPARENT); <br>   *phiconSmall = ImageList_GetIcon(g_himlSmall, ICON_INDEX_FOLDER, ILD_TRANSPARENT); <br>   } <br>*/ <br>return S_OK; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

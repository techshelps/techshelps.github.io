<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DOCKWNDW.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6542"></a>DOCKWNDW.CPP</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          DockWndw.cpp <br>    <br>   Description:   Implements CDockingWindow <br> <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   #include statements <br>**************************************************************************/ <br> <br>#include "DockWndw.h" <br> <br>#if (_WIN32_IE &gt;= 0x0400) <br> <br>/************************************************************************** <br> <br>   CDockingWindow::CDockingWindow() <br> <br>**************************************************************************/ <br> <br>CDockingWindow::CDockingWindow(CShellView *pView, HWND hwndCommand) <br>{ <br>m_pView = pView; <br>if(m_pView) <br>   { <br>   m_pView-&gt;AddRef(); <br>   } <br>else <br>   { <br>   delete this; <br>   return; <br>   } <br> <br>m_pSite = NULL; <br> <br>m_hWnd = NULL; <br> <br>m_hwndCommand = hwndCommand; <br> <br>m_bFocus = FALSE; <br> <br>m_rcDisplay.left = 0; <br>m_rcDisplay.top = 0; <br>m_rcDisplay.right = 0; <br>m_rcDisplay.bottom = 0; <br> <br>m_ObjRefCount = 1; <br>g_DllRefCount++; <br>} <br> <br>/************************************************************************** <br> <br>   CDockingWindow::~CDockingWindow() <br> <br>**************************************************************************/ <br> <br>CDockingWindow::~CDockingWindow() <br>{ <br>if(m_pView) <br>   { <br>   m_pView-&gt;Release(); <br>   } <br> <br>g_DllRefCount--; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IUnknown Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CDockingWindow::QueryInterface <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CDockingWindow::QueryInterface(REFIID riid, LPVOID *ppReturn) <br>{ <br>*ppReturn = NULL; <br> <br>//IUnknown <br>if(IsEqualIID(riid, IID_IUnknown)) <br>   { <br>   *ppReturn = this; <br>   } <br> <br>//IOleWindow <br>else if(IsEqualIID(riid, IID_IOleWindow)) <br>   { <br>   *ppReturn = (IOleWindow*)this; <br>   } <br> <br>//IDockingWindow <br>else if(IsEqualIID(riid, IID_IDockingWindow)) <br>   { <br>   *ppReturn = (IDockingWindow*)this; <br>   }    <br> <br>//IInputObject <br>else if(IsEqualIID(riid, IID_IInputObject)) <br>   { <br>   *ppReturn = (IInputObject*)this; <br>   }    <br> <br>//IObjectWithSite <br>else if(IsEqualIID(riid, IID_IObjectWithSite)) <br>   { <br>   *ppReturn = (IObjectWithSite*)this; <br>   }    <br> <br>if(*ppReturn) <br>   { <br>   (*(LPUNKNOWN*)ppReturn)-&gt;AddRef(); <br>   return S_OK; <br>   } <br> <br>return E_NOINTERFACE; <br>}                                              <br> <br>/************************************************************************** <br> <br>   CDockingWindow::AddRef <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP_(DWORD) CDockingWindow::AddRef() <br>{ <br>return ++m_ObjRefCount; <br>} <br> <br> <br>/************************************************************************** <br> <br>   CDockingWindow::Release <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP_(DWORD) CDockingWindow::Release() <br>{ <br>if(--m_ObjRefCount == 0) <br>   { <br>   delete this; <br>   return 0; <br>   } <br>    <br>return m_ObjRefCount; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IOleWindow Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CDockingWindow::GetWindow() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDockingWindow::GetWindow(HWND *phWnd) <br>{ <br>*phWnd = m_hWnd; <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CDockingWindow::ContextSensitiveHelp() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDockingWindow::ContextSensitiveHelp(BOOL fEnterMode) <br>{ <br>return E_NOTIMPL; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IDockingWindow Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CDockingWindow::ShowDW() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDockingWindow::ShowDW(BOOL fShow) <br>{ <br>//if our window doesn't exist yet, create it now <br>if(!m_hWnd &amp;&amp; m_pSite) <br>   { <br>   HRESULT  hr; <br> <br>   //if our window class has not been registered, then do so <br>   WNDCLASS wc; <br>   if(!GetClassInfo(g_hInst, SHTB_CLASS_NAME, &amp;wc)) <br>      { <br>      ZeroMemory(&amp;wc, sizeof(wc)); <br>      wc.style          = CS_HREDRAW | CS_VREDRAW; <br>      wc.lpfnWndProc    = (WNDPROC)WndProc; <br>      wc.cbClsExtra     = 0; <br>      wc.cbWndExtra     = 0; <br>      wc.hInstance      = g_hInst; <br>      wc.hIcon          = NULL; <br>      wc.hCursor        = LoadCursor(NULL, IDC_ARROW); <br>      wc.hbrBackground  = (HBRUSH)CreateSolidBrush(RGB(192, 0, 0)); <br>      wc.lpszMenuName   = NULL; <br>      wc.lpszClassName  = SHTB_CLASS_NAME; <br>       <br>      if(!RegisterClass(&amp;wc)) <br>         { <br>         //if this fails, CreateWindow will fail, so don't sweat it <br>         } <br>      } <br> <br>   //get our parent window <br>   hr = m_pSite-&gt;GetWindow(&amp;m_hwndParent); <br>   if(SUCCEEDED(hr)) <br>      { <br>      RECT  rc; <br> <br>      GetClientRect(m_hwndParent, &amp;rc); <br> <br>      //create the window - use zero for pos and size - it will get positioned and sized below <br>      CreateWindowEx(   WS_EX_CLIENTEDGE, <br>                        SHTB_CLASS_NAME, <br>                        NULL, <br>                        WS_CHILD | WS_CLIPSIBLINGS, <br>                        0, <br>                        0, <br>                        0, <br>                        0, <br>                        m_hwndParent, <br>                        NULL, <br>                        g_hInst, <br>                        (LPVOID)this); <br>       <br>      if(!m_hWnd) <br>         return E_FAIL; <br>       <br>      NegotiateBorderSpace(m_pSite); <br>      } <br>   } <br> <br>if(m_hWnd &amp;&amp; m_pSite) <br>   { <br>   BORDERWIDTHS   bwRequest = {0, 0, 0, 0}; <br> <br>   if(fShow) <br>      { <br>      //position the window - m_rcDisplay was set up in NegotiateBorderSpace <br>      MoveWindow( m_hWnd, <br>                  m_rcDisplay.left, <br>                  m_rcDisplay.top, <br>                  m_rcDisplay.right, <br>                  m_rcDisplay.bottom, <br>                  TRUE); <br>    <br>      //show our window <br>      ShowWindow(m_hWnd, SW_SHOW); <br>      } <br>   else <br>      { <br>      //hide our window <br>      ShowWindow(m_hWnd, SW_HIDE); <br> <br>      //release our border space - bwRequest was initialized above <br>      m_pSite-&gt;SetBorderSpaceDW((IDockingWindow*)this, &amp;bwRequest); <br>      } <br>   } <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CDockingWindow::CloseDW() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDockingWindow::CloseDW(DWORD dwReserved) <br>{ <br>if(m_pSite) <br>   { <br>   ShowDW(FALSE); <br> <br>   if(IsWindow(m_hWnd)) <br>      DestroyWindow(m_hWnd); <br>    <br>   m_pSite-&gt;Release(); <br>   m_pSite = NULL; <br>   } <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CDockingWindow::ResizeBorderDW() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDockingWindow::ResizeBorderDW(LPCRECT prcBorder, IUnknown* punkSite, BOOL fReserved) <br>{ <br>IDockingWindowSite   *pSite = NULL; <br> <br>//if punkSite is not NULL, use it to negotiate our border space <br>if(punkSite) <br>   { <br>   if(FAILED(punkSite-&gt;QueryInterface(IID_IDockingWindowSite, (LPVOID*)&amp;pSite))) <br>      { <br>      return E_FAIL; <br>      } <br>   } <br>else if(m_pSite) <br>   { <br>   pSite = m_pSite; <br>   pSite-&gt;AddRef(); <br>   } <br> <br>if(pSite) <br>   { <br>   HRESULT  hr = E_FAIL; <br> <br>   if(NegotiateBorderSpace(pSite, prcBorder)) <br>      { <br>      //updated our window's position <br>      ShowDW(TRUE); <br>      hr = S_OK; <br>      } <br>    <br>   pSite-&gt;Release(); <br>   return hr; <br>   } <br>return E_FAIL; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IInputObject Implementation <br>// <br> <br>/************************************************************************** <br> <br>   CDockingWindow::UIActivateIO() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDockingWindow::UIActivateIO(BOOL fActivate, LPMSG pMsg) <br>{ <br>if(fActivate) <br>   SetFocus(m_hWnd); <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CDockingWindow::HasFocusIO() <br>    <br>   If this window or one of its decendants has the focus, return S_OK. Return  <br>   S_FALSE if we don't have the focus. <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CDockingWindow::HasFocusIO(void) <br>{ <br>if(m_bFocus) <br>   return S_OK; <br> <br>return S_FALSE; <br>} <br> <br>/************************************************************************** <br> <br>   CDockingWindow::TranslateAcceleratorIO() <br>    <br>   If the accelerator is translated, return S_OK or S_FALSE otherwise. <br> <br>**************************************************************************/ <br> <br>STDMETHODIMP CDockingWindow::TranslateAcceleratorIO(LPMSG pMsg) <br>{ <br>return S_FALSE; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// IObjectWithSite implementations <br>// <br> <br>/************************************************************************** <br> <br>   CDockingWindow::SetSite() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDockingWindow::SetSite(IUnknown* punkSite) <br>{ <br>if(m_pSite) <br>   { <br>   m_pSite-&gt;Release(); <br>   m_pSite = NULL; <br>   } <br> <br>//If punkSite is not NULL, we are connecting to the site. <br>if(punkSite) <br>   { <br>   if(SUCCEEDED(punkSite-&gt;QueryInterface(IID_IDockingWindowSite, (LPVOID*)&amp;m_pSite))) <br>      { <br>      return S_OK; <br>      } <br>   } <br> <br>return S_OK; <br>} <br> <br>/************************************************************************** <br> <br>   CDockingWindow::GetSite() <br>    <br>**************************************************************************/ <br> <br>STDMETHODIMP CDockingWindow::GetSite(REFIID riid, LPVOID *ppvReturn) <br>{ <br>*ppvReturn = NULL; <br> <br>if(m_pSite) <br>   return m_pSite-&gt;QueryInterface(riid, ppvReturn); <br> <br>return E_FAIL; <br>} <br> <br>/////////////////////////////////////////////////////////////////////////// <br>// <br>// private method implementations <br>// <br> <br>/************************************************************************** <br> <br>   CDockingWindow::WndProc() <br>    <br>**************************************************************************/ <br> <br>LRESULT CALLBACK CDockingWindow::WndProc(HWND hWnd, UINT uMessage, WPARAM wParam, LPARAM lParam) <br>{ <br>CDockingWindow  *pThis = (CDockingWindow*)GetWindowLong(hWnd, GWL_USERDATA); <br> <br>switch (uMessage) <br>   { <br>   case WM_NCCREATE: <br>      { <br>      LPCREATESTRUCT lpcs = (LPCREATESTRUCT)lParam; <br>      pThis = (CDockingWindow*)(lpcs-&gt;lpCreateParams); <br>      SetWindowLong(hWnd, GWL_USERDATA, (LONG)pThis); <br> <br>      //set the window handle <br>      pThis-&gt;m_hWnd = hWnd; <br>      } <br>      break; <br>    <br>   case WM_PAINT: <br>      return pThis-&gt;OnPaint(); <br>    <br>   case WM_COMMAND: <br>      return pThis-&gt;OnCommand(wParam, lParam); <br>    <br>   case WM_SETFOCUS: <br>      return pThis-&gt;OnSetFocus(); <br> <br>   case WM_KILLFOCUS: <br>      return pThis-&gt;OnKillFocus(); <br>   } <br> <br>return DefWindowProc(hWnd, uMessage, wParam, lParam); <br>} <br> <br>/************************************************************************** <br> <br>   CDockingWindow::OnPaint() <br>    <br>**************************************************************************/ <br> <br>LRESULT CDockingWindow::OnPaint(void) <br>{ <br>PAINTSTRUCT ps; <br>RECT        rc; <br> <br>BeginPaint(m_hWnd, &amp;ps); <br> <br>GetClientRect(m_hWnd, &amp;rc); <br>SetTextColor(ps.hdc, RGB(0, 0, 0)); <br>SetBkMode(ps.hdc, TRANSPARENT); <br>DrawText(ps.hdc, TEXT("IDockingWindow"), -1, &amp;rc, DT_SINGLELINE | DT_CENTER | DT_VCENTER); <br>EndPaint(m_hWnd, &amp;ps); <br> <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   CDockingWindow::OnCommand() <br>    <br>**************************************************************************/ <br> <br>LRESULT CDockingWindow::OnCommand(WPARAM wParam, LPARAM lParam) <br>{ <br>/* <br>Since this is a toolbar object, we need to forward all WM_COMMAND messages to  <br>our assigned command window. <br>*/ <br>return SendMessage(m_hwndCommand, WM_COMMAND, wParam, lParam); <br>} <br> <br>/************************************************************************** <br> <br>   CDockingWindow::FocusChange() <br>    <br>**************************************************************************/ <br> <br>void CDockingWindow::FocusChange(BOOL bFocus) <br>{ <br>m_bFocus = bFocus; <br> <br>//inform the input object site that the focus has changed <br>IInputObjectSite  *pios; <br> <br>if(SUCCEEDED(m_pSite-&gt;QueryInterface(IID_IInputObjectSite, (LPVOID*)&amp;pios))) <br>   { <br>   pios-&gt;OnFocusChangeIS((IDockingWindow*)this, bFocus); <br>   pios-&gt;Release(); <br>   } <br>} <br> <br>/************************************************************************** <br> <br>   CDockingWindow::OnSetFocus() <br>    <br>**************************************************************************/ <br> <br>LRESULT CDockingWindow::OnSetFocus(void) <br>{ <br>FocusChange(TRUE); <br> <br>m_pView-&gt;OnActivate(SVUIA_ACTIVATE_FOCUS); <br> <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   CDockingWindow::OnKillFocus() <br>    <br>**************************************************************************/ <br> <br>LRESULT CDockingWindow::OnKillFocus(void) <br>{ <br>FocusChange(FALSE); <br> <br>m_pView-&gt;OnDeactivate(); <br> <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   CDockingWindow::NegotiateBorderSpace() <br>    <br>**************************************************************************/ <br> <br>BOOL CDockingWindow::NegotiateBorderSpace(IDockingWindowSite *pSite, LPCRECT prcBorder) <br>{ <br>HRESULT        hr; <br>BORDERWIDTHS   bwRequest = {0, 0, 0, 0}; <br> <br>bwRequest.top = TOOLBAR_HEIGHT; <br> <br>hr = pSite-&gt;RequestBorderSpaceDW((IDockingWindow*)this, &amp;bwRequest); <br>if(SUCCEEDED(hr)) <br>   { <br>   hr = pSite-&gt;SetBorderSpaceDW((IDockingWindow*)this, &amp;bwRequest); <br>   if(SUCCEEDED(hr)) <br>      { <br>      RECT  rcTemp; <br> <br>      if(!prcBorder) <br>         { <br>         hr = pSite-&gt;GetBorderDW((IDockingWindow*)this, &amp;rcTemp); <br>         if(SUCCEEDED(hr)) <br>            { <br>            prcBorder = &amp;rcTemp; <br>            } <br>         } <br>          <br>      if(prcBorder) <br>         { <br>         //set up our display rectangle <br>         m_rcDisplay.left = prcBorder-&gt;left; <br>         m_rcDisplay.top = prcBorder-&gt;top; <br>         m_rcDisplay.right = prcBorder-&gt;right - prcBorder-&gt;left; <br>         m_rcDisplay.bottom = bwRequest.top; <br>          <br>         return TRUE; <br>         } <br>      } <br>   } <br> <br>return FALSE; <br>} <br> <br> <br>#endif   //(_WIN32_IE &gt;= 0x0400) </code></pre>
<p>&nbsp;</p></body>
</HTML>

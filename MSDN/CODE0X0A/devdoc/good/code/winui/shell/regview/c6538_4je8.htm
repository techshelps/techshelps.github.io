<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UTILITY.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6560"></a>UTILITY.CPP</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          Utility.cpp <br>    <br>   Description:    <br> <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   #include statements <br>**************************************************************************/ <br> <br>#include "Utility.h" <br>#include "ShlFldr.h" <br>#include "resource.h" <br> <br>/************************************************************************** <br>   private function prototypes <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   global variables <br>**************************************************************************/ <br> <br>extern HIMAGELIST g_himlLarge; <br>extern HIMAGELIST g_himlSmall; <br> <br>#define MAIN_KEY_STRING       (TEXT("Software\\RegView")) <br>#define VALUE_STRING          (TEXT("Display Settings")) <br>#define INITIAL_COLUMN_SIZE   100 <br> <br>/************************************************************************** <br> <br>   GetKeyName() <br>    <br>**************************************************************************/ <br> <br>DWORD GetKeyName( HKEY hKeyRoot,  <br>                  LPCTSTR pszSubKey,  <br>                  DWORD dwIndex,  <br>                  LPTSTR pszOut,  <br>                  DWORD dwSize) <br>{ <br>HKEY     hKey; <br>LONG     lResult; <br>FILETIME ft; <br> <br>if(!pszOut) <br>   return 0; <br> <br>if(!pszSubKey) <br>   pszSubKey = TEXT(""); <br> <br>//open the specified key <br>lResult = RegOpenKeyEx( hKeyRoot, <br>                        pszSubKey, <br>                        0, <br>                        KEY_ENUMERATE_SUB_KEYS, <br>                        &amp;hKey); <br> <br>if(ERROR_SUCCESS != lResult) <br>   return 0; <br> <br>//try to get the specified subkey <br>lResult = RegEnumKeyEx( hKey, <br>                        dwIndex, <br>                        pszOut, <br>                        &amp;dwSize, <br>                        NULL, <br>                        NULL, <br>                        NULL, <br>                        &amp;ft); <br> <br>RegCloseKey(hKey); <br> <br>if(ERROR_SUCCESS == lResult) <br>   return dwSize; <br> <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   GetValueName() <br>    <br>**************************************************************************/ <br> <br>BOOL GetValueName(   HKEY hKeyRoot,  <br>                     LPCTSTR pszSubKey,  <br>                     DWORD dwIndex,  <br>                     LPTSTR pszOut,  <br>                     DWORD dwSize) <br>{ <br>HKEY     hKey; <br>LONG     lResult; <br>DWORD    dwType; <br> <br>if(!pszOut) <br>   return FALSE; <br> <br>if(!pszSubKey) <br>   pszSubKey = TEXT(""); <br> <br>//open the specified key <br>lResult = RegOpenKeyEx( hKeyRoot, <br>                        pszSubKey, <br>                        0, <br>                        KEY_QUERY_VALUE, <br>                        &amp;hKey); <br> <br>if(ERROR_SUCCESS != lResult) <br>   return FALSE; <br> <br>//try to get the specified subkey <br>lResult = RegEnumValue( hKey, <br>                        dwIndex, <br>                        pszOut, <br>                        &amp;dwSize, <br>                        NULL, <br>                        &amp;dwType, <br>                        NULL, <br>                        NULL); <br> <br>RegCloseKey(hKey); <br> <br>return BOOL(ERROR_SUCCESS == lResult); <br>} <br> <br> <br>/************************************************************************** <br> <br>   GetRootKeyText() <br>    <br>**************************************************************************/ <br> <br>DWORD GetRootKeyText(HKEY hKeyRoot, LPTSTR lpszOut, DWORD dwOutSize) <br>{ <br>*lpszOut = 0; <br> <br>if(hKeyRoot == HKEY_CLASSES_ROOT) <br>   { <br>   lstrcpyn(lpszOut, TEXT("HKEY_CLASSES_ROOT"), dwOutSize); <br>   } <br> <br>else if(hKeyRoot == HKEY_CURRENT_USER) <br>   { <br>   lstrcpyn(lpszOut, TEXT("HKEY_CURRENT_USER"), dwOutSize); <br>   } <br> <br>else if(hKeyRoot == HKEY_LOCAL_MACHINE) <br>   { <br>   lstrcpyn(lpszOut, TEXT("HKEY_LOCAL_MACHINE"), dwOutSize); <br>   } <br> <br>else if(hKeyRoot == HKEY_USERS) <br>   { <br>   lstrcpyn(lpszOut, TEXT("HKEY_USERS"), dwOutSize); <br>   } <br> <br>else if(hKeyRoot == HKEY_PERFORMANCE_DATA) <br>   { <br>   lstrcpyn(lpszOut, TEXT("HKEY_PERFORMANCE_DATA"), dwOutSize); <br>   } <br> <br>else if(hKeyRoot == HKEY_CURRENT_CONFIG) <br>   { <br>   lstrcpyn(lpszOut, TEXT("HKEY_CURRENT_CONFIG"), dwOutSize); <br>   } <br> <br>else if(hKeyRoot == HKEY_DYN_DATA) <br>   { <br>   lstrcpyn(lpszOut, TEXT("HKEY_DYN_DATA"), dwOutSize); <br>   } <br>    <br>return lstrlen(lpszOut) + 1; <br>} <br> <br>/************************************************************************** <br> <br>   RootKeyExists() <br>    <br>**************************************************************************/ <br> <br>BOOL RootKeyExists(HKEY hKeyRoot) <br>{ <br>LONG  lResult; <br>HKEY  hKey; <br> <br>//open the specified key <br>lResult = RegOpenKeyEx( hKeyRoot, <br>                        NULL, <br>                        0, <br>                        KEY_ENUMERATE_SUB_KEYS, <br>                        &amp;hKey); <br> <br>if(ERROR_SUCCESS != lResult) <br>   return FALSE; <br> <br>RegCloseKey(hKey); <br> <br>return TRUE; <br>} <br> <br>/************************************************************************** <br> <br>   SaveGlobalSettings() <br>    <br>**************************************************************************/ <br> <br>BOOL SaveGlobalSettings(void) <br>{ <br>HKEY  hKey; <br>LONG  lResult; <br>DWORD dwDisp; <br> <br>lResult = RegCreateKeyEx(  HKEY_CURRENT_USER, <br>                           MAIN_KEY_STRING, <br>                           0, <br>                           NULL, <br>                           REG_OPTION_NON_VOLATILE,  <br>                           KEY_ALL_ACCESS, <br>                           NULL,  <br>                           &amp;hKey, <br>                           &amp;dwDisp); <br> <br>if(lResult != ERROR_SUCCESS) <br>   return FALSE; <br> <br>//create an array to put our data in <br>DWORD dwArray[4]; <br>dwArray[0] = g_nColumn1; <br>dwArray[1] = g_nColumn2; <br>dwArray[2] = g_bViewKeys; <br>dwArray[3] = g_bShowIDW; <br> <br>//save the last printer selected <br>lResult = RegSetValueEx(   hKey, <br>                           VALUE_STRING, <br>                           0, <br>                           REG_BINARY, <br>                           (LPBYTE)dwArray, <br>                           sizeof(dwArray)); <br> <br>RegCloseKey(hKey); <br> <br>if(lResult != ERROR_SUCCESS) <br>   return FALSE; <br> <br>return TRUE; <br>} <br> <br>/************************************************************************** <br> <br>   GetGlobalSettings() <br>    <br>**************************************************************************/ <br> <br>BOOL GetGlobalSettings(void) <br>{ <br>HKEY  hKey; <br>LONG  lResult; <br> <br>//set up the default data <br>g_nColumn1 = INITIAL_COLUMN_SIZE; <br>g_nColumn2 = INITIAL_COLUMN_SIZE; <br>g_bViewKeys = TRUE; <br>g_bShowIDW = FALSE; <br> <br>lResult = RegOpenKeyEx( HKEY_CURRENT_USER, <br>                        MAIN_KEY_STRING, <br>                        0, <br>                        KEY_ALL_ACCESS, <br>                        &amp;hKey); <br> <br>if(lResult != ERROR_SUCCESS) <br>   return FALSE; <br> <br>//create an array to put our data in <br>DWORD dwArray[4]; <br>DWORD dwType; <br>DWORD dwSize = sizeof(dwArray); <br> <br>//save the last printer selected <br>lResult = RegQueryValueEx( hKey, <br>                           VALUE_STRING, <br>                           NULL, <br>                           &amp;dwType, <br>                           (LPBYTE)dwArray, <br>                           &amp;dwSize); <br> <br>RegCloseKey(hKey); <br> <br>if(lResult != ERROR_SUCCESS) <br>   return FALSE; <br> <br>g_nColumn1 = dwArray[0]; <br>g_nColumn2 = dwArray[1]; <br>g_bViewKeys = dwArray[2]; <br>g_bShowIDW = dwArray[3]; <br> <br>return TRUE; <br>} <br> <br>/************************************************************************** <br> <br>   CompareItems() <br>    <br>**************************************************************************/ <br> <br>int CALLBACK CompareItems(LPARAM lParam1, LPARAM lParam2, LPARAM lpData) <br>{ <br>CShellFolder  *pFolder = (CShellFolder*)lpData; <br> <br>if(!pFolder) <br>   return 0; <br> <br>return (int)pFolder-&gt;CompareIDs(0, (LPITEMIDLIST)lParam1, (LPITEMIDLIST)lParam2); <br>} <br> <br>/************************************************************************** <br> <br>   CreateImageLists() <br>    <br>**************************************************************************/ <br> <br>VOID CreateImageLists(VOID) <br>{ <br>int   cx; <br>int   cy; <br> <br>cx = GetSystemMetrics(SM_CXSMICON); <br>cy = GetSystemMetrics(SM_CYSMICON); <br> <br>cx = 16; <br>cy = 16; <br> <br>if(g_himlSmall) <br>   ImageList_Destroy(g_himlSmall); <br> <br>//set the small image list <br>g_himlSmall = ImageList_Create(cx, cy, ILC_COLORDDB | ILC_MASK, 4, 0); <br> <br>if(g_himlSmall) <br>   { <br>   HICON hIcon; <br>    <br>   hIcon = (HICON)LoadImage(g_hInst, MAKEINTRESOURCE(IDI_BINARY), IMAGE_ICON, cx, cy, LR_DEFAULTCOLOR); <br>   ImageList_AddIcon(g_himlSmall, hIcon); <br> <br>   hIcon = (HICON)LoadImage(g_hInst, MAKEINTRESOURCE(IDI_STRING), IMAGE_ICON, cx, cy, LR_DEFAULTCOLOR); <br>   ImageList_AddIcon(g_himlSmall, hIcon); <br> <br>   hIcon = (HICON)LoadImage(g_hInst, MAKEINTRESOURCE(IDI_FOLDER), IMAGE_ICON, cx, cy, LR_DEFAULTCOLOR); <br>   ImageList_AddIcon(g_himlSmall, hIcon); <br> <br>   hIcon = (HICON)LoadImage(g_hInst, MAKEINTRESOURCE(IDI_FOLDEROPEN), IMAGE_ICON, cx, cy, LR_DEFAULTCOLOR); <br>   ImageList_AddIcon(g_himlSmall, hIcon); <br>   } <br> <br>if(g_himlLarge) <br>   ImageList_Destroy(g_himlLarge); <br> <br>cx = GetSystemMetrics(SM_CXICON); <br>cy = GetSystemMetrics(SM_CYICON); <br> <br>cx = 32; <br>cy = 32; <br> <br>//set the large image list <br>g_himlLarge = ImageList_Create(cx, cy, ILC_COLORDDB | ILC_MASK, 4, 0); <br> <br>if(g_himlSmall) <br>   { <br>   HICON hIcon; <br>    <br>   hIcon = (HICON)LoadImage(g_hInst, MAKEINTRESOURCE(IDI_BINARY), IMAGE_ICON, cx, cy, LR_DEFAULTCOLOR); <br>   ImageList_AddIcon(g_himlLarge, hIcon); <br> <br>   hIcon = (HICON)LoadImage(g_hInst, MAKEINTRESOURCE(IDI_STRING), IMAGE_ICON, cx, cy, LR_DEFAULTCOLOR); <br>   ImageList_AddIcon(g_himlLarge, hIcon); <br> <br>   hIcon = (HICON)LoadImage(g_hInst, MAKEINTRESOURCE(IDI_FOLDER), IMAGE_ICON, cx, cy, LR_DEFAULTCOLOR); <br>   ImageList_AddIcon(g_himlLarge, hIcon); <br> <br>   hIcon = (HICON)LoadImage(g_hInst, MAKEINTRESOURCE(IDI_FOLDEROPEN), IMAGE_ICON, cx, cy, LR_DEFAULTCOLOR); <br>   ImageList_AddIcon(g_himlLarge, hIcon); <br>   } <br> <br>} <br> <br>/************************************************************************** <br> <br>   DestroyImageLists() <br>    <br>**************************************************************************/ <br> <br>VOID DestroyImageLists(VOID) <br>{ <br>if(g_himlSmall) <br>   ImageList_Destroy(g_himlSmall); <br> <br>if(g_himlLarge) <br>   ImageList_Destroy(g_himlLarge); <br>} <br> <br>/************************************************************************** <br> <br>   WideCharToLocal() <br>    <br>**************************************************************************/ <br> <br>int WideCharToLocal(LPTSTR pLocal, LPWSTR pWide, DWORD dwChars) <br>{ <br>*pLocal = 0; <br> <br>#ifdef UNICODE <br>lstrcpyn(pLocal, pWide, dwChars); <br>#else <br>WideCharToMultiByte( CP_ACP,  <br>                     0,  <br>                     pWide,  <br>                     -1,  <br>                     pLocal,  <br>                     dwChars,  <br>                     NULL,  <br>                     NULL); <br>#endif <br> <br>return lstrlen(pLocal); <br>} <br> <br>/************************************************************************** <br> <br>   LocalToWideChar() <br>    <br>**************************************************************************/ <br> <br>int LocalToWideChar(LPWSTR pWide, LPTSTR pLocal, DWORD dwChars) <br>{ <br>*pWide = 0; <br> <br>#ifdef UNICODE <br>lstrcpyn(pWide, pLocal, dwChars); <br>#else <br>MultiByteToWideChar( CP_ACP,  <br>                     0,  <br>                     pLocal,  <br>                     -1,  <br>                     pWide,  <br>                     dwChars);  <br>#endif <br> <br>return lstrlenW(pWide); <br>} <br> <br>/************************************************************************** <br> <br>   GetNextRegElement() <br>    <br>**************************************************************************/ <br> <br>LPTSTR GetNextRegElement(LPTSTR pszNext, LPTSTR pszOut, DWORD dwOut) <br>{ <br>if(!pszNext || !*pszNext) <br>   return NULL; <br> <br>LPTSTR   pszTail = pszNext; <br> <br>while(*pszTail &amp;&amp; (*pszTail != '\\')) <br>   { <br>   pszTail++; <br>   } <br> <br>DWORD dwCopy = ((LPBYTE)pszTail - (LPBYTE)pszNext)/sizeof(TCHAR) + 1; <br> <br>lstrcpyn(pszOut, pszNext, min(dwOut, dwCopy)); <br> <br>if(*pszTail) <br>   pszTail++; <br> <br>return pszTail; <br>} <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

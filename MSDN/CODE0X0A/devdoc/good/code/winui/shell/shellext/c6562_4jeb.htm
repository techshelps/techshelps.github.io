<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CTXMENU.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6563"></a>CTXMENU.CPP</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE:   ctxmenu.cpp <br>// <br>//  PURPOSE:   Implements the IContextMenu member functions necessary to support <br>//             the context menu portioins of this shell extension.  Context menu <br>//             shell extensions are called when the user right clicks on a file <br>//             (of the type registered for the shell extension--see SHELLEXT.REG <br>//             for details on the registry entries.  In this sample, the relevant <br>//             files are of type .GAK) in the Explorer, or selects the File menu  <br>//             item. <br>// <br> <br>#include "priv.h" <br>#include "shellext.h" <br> <br> <br>// <br>//  FUNCTION: CShellExt::QueryContextMenu(HMENU, UINT, UINT, UINT, UINT) <br>// <br>//  PURPOSE: Called by the shell just before the context menu is displayed. <br>//           This is where you add your specific menu items. <br>// <br>//  PARAMETERS: <br>//    hMenu      - Handle to the context menu <br>//    indexMenu  - Index of where to begin inserting menu items <br>//    idCmdFirst - Lowest value for new menu ID's <br>//    idCmtLast  - Highest value for new menu ID's <br>//    uFlags     - Specifies the context of the menu event <br>// <br>//  RETURN VALUE: <br>// <br>// <br>//  COMMENTS: <br>// <br> <br>STDMETHODIMP CShellExt::QueryContextMenu(HMENU hMenu, <br>                                         UINT indexMenu, <br>                                         UINT idCmdFirst, <br>                                         UINT idCmdLast, <br>                                         UINT uFlags) <br>{ <br>    ODS("CShellExt::QueryContextMenu()\r\n"); <br> <br>    UINT idCmd = idCmdFirst; <br>    char szMenuText[64]; <br>    char szMenuText2[64]; <br>    char szMenuText3[64]; <br>    char szMenuText4[64]; <br>    BOOL bAppendItems=TRUE; <br> <br>    if ((uFlags &amp; 0x000F) == CMF_NORMAL)  //Check == here, since CMF_NORMAL=0 <br>    { <br>        ODS("CMF_NORMAL...\r\n"); <br>        lstrcpy(szMenuText, "&amp;New .GAK menu 1, Normal File"); <br>        lstrcpy(szMenuText2, "&amp;New .GAK menu 2, Normal File"); <br>        lstrcpy(szMenuText3, "&amp;New .GAK menu 3, Normal File"); <br>        lstrcpy(szMenuText4, "&amp;New .GAK menu 4, Normal File"); <br>    } <br>    else <br>        if (uFlags &amp; CMF_VERBSONLY) <br>        { <br>            ODS("CMF_VERBSONLY...\r\n"); <br>            lstrcpy(szMenuText, "&amp;New .GAK menu 1, Shortcut File"); <br>            lstrcpy(szMenuText2, "N&amp;ew .GAK menu 2, Shortcut File"); <br>            lstrcpy(szMenuText3, "&amp;New .GAK menu 3, Shortcut File"); <br>            lstrcpy(szMenuText4, "&amp;New .GAK menu 4, Shortcut File"); <br>        } <br>    else <br>        if (uFlags &amp; CMF_EXPLORE) <br>        { <br>            ODS("CMF_EXPLORE...\r\n"); <br>            lstrcpy(szMenuText, "&amp;New .GAK menu 1, Normal File right click in Explorer"); <br>            lstrcpy(szMenuText2, "N&amp;ew .GAK menu 2, Normal File right click in Explorer"); <br>            lstrcpy(szMenuText3, "&amp;New .GAK menu 3, Normal File right click in Explorer"); <br>            lstrcpy(szMenuText4, "&amp;New .GAK menu 4, Normal File right click in Explorer"); <br>        } <br>    else <br>        if (uFlags &amp; CMF_DEFAULTONLY) <br>        { <br>            ODS("CMF_DEFAULTONLY...\r\n"); <br>            bAppendItems = FALSE; <br>        } <br>    else <br>        { <br>            char szTemp[32]; <br> <br>            wsprintf(szTemp, "uFlags==&gt;%d\r\n", uFlags); <br>            ODS("CMF_default...\r\n"); <br>            ODS(szTemp); <br>            bAppendItems = FALSE; <br>        } <br> <br>    if (bAppendItems) <br>    { <br>        InsertMenu(hMenu, indexMenu++, MF_SEPARATOR|MF_BYPOSITION, 0, NULL); <br>         <br>        InsertMenu(hMenu, <br>                   indexMenu++, <br>                   MF_STRING|MF_BYPOSITION, <br>                   idCmd++, <br>                   szMenuText); <br>         <br>        InsertMenu(hMenu, indexMenu++, MF_SEPARATOR|MF_BYPOSITION, 0, NULL); <br> <br>        InsertMenu(hMenu, <br>                   indexMenu++, <br>                   MF_STRING|MF_BYPOSITION, <br>                   idCmd++, <br>                   szMenuText2); <br>         <br>        InsertMenu(hMenu, indexMenu++, MF_SEPARATOR|MF_BYPOSITION, 0, NULL); <br> <br>        InsertMenu(hMenu, <br>                   indexMenu++, <br>                   MF_STRING|MF_BYPOSITION, <br>                   idCmd++, <br>                   szMenuText3); <br> <br>        InsertMenu(hMenu, <br>                   indexMenu++, <br>                   MF_STRING|MF_BYPOSITION, <br>                   idCmd++, <br>                   szMenuText4); <br> <br>        return ResultFromShort(idCmd-idCmdFirst); //Must return number of menu <br>  //items we added. <br>   } <br> <br>   return NOERROR; <br>} <br> <br>// <br>//  FUNCTION: CShellExt::InvokeCommand(LPCMINVOKECOMMANDINFO) <br>// <br>//  PURPOSE: Called by the shell after the user has selected on of the <br>//           menu items that was added in QueryContextMenu(). <br>// <br>//  PARAMETERS: <br>//    lpcmi - Pointer to an CMINVOKECOMMANDINFO structure <br>// <br>//  RETURN VALUE: <br>// <br>// <br>//  COMMENTS: <br>// <br> <br>STDMETHODIMP CShellExt::InvokeCommand(LPCMINVOKECOMMANDINFO lpcmi) <br>{ <br>    ODS("CShellExt::InvokeCommand()\r\n"); <br> <br>HRESULT hr = E_INVALIDARG; <br> <br>    //If HIWORD(lpcmi-&gt;lpVerb) then we have been called programmatically <br>    //and lpVerb is a command that should be invoked.  Otherwise, the shell <br>    //has called us, and LOWORD(lpcmi-&gt;lpVerb) is the menu ID the user has <br>    //selected.  Actually, it's (menu ID - idCmdFirst) from QueryContextMenu(). <br>if (!HIWORD(lpcmi-&gt;lpVerb)) <br>    { <br>        UINT idCmd = LOWORD(lpcmi-&gt;lpVerb); <br> <br>        switch (idCmd) <br>        { <br>            case 0: <br>                hr = DoGAKMenu1(lpcmi-&gt;hwnd, <br>                                lpcmi-&gt;lpDirectory, <br>                                lpcmi-&gt;lpVerb, <br>                                lpcmi-&gt;lpParameters, <br>                                lpcmi-&gt;nShow); <br>                break; <br> <br>            case 1: <br>                hr = DoGAKMenu2(lpcmi-&gt;hwnd, <br>                                lpcmi-&gt;lpDirectory, <br>                                lpcmi-&gt;lpVerb, <br>                                lpcmi-&gt;lpParameters, <br>                                lpcmi-&gt;nShow); <br>                break; <br> <br>            case 2: <br>                hr = DoGAKMenu3(lpcmi-&gt;hwnd, <br>                                lpcmi-&gt;lpDirectory, <br>                                lpcmi-&gt;lpVerb, <br>                                lpcmi-&gt;lpParameters, <br>                                lpcmi-&gt;nShow); <br>                break; <br> <br>            case 3: <br>                hr = DoGAKMenu4(lpcmi-&gt;hwnd, <br>                                lpcmi-&gt;lpDirectory, <br>                                lpcmi-&gt;lpVerb, <br>                                lpcmi-&gt;lpParameters, <br>                                lpcmi-&gt;nShow); <br>                break; <br>        } <br>    } <br>    return hr; <br>} <br> <br> <br>// <br>//  FUNCTION: CShellExt::InvokeCommand(LPCMINVOKECOMMANDINFO) <br>// <br>//  PURPOSE: Called by the shell after the user has selected on of the <br>//           menu items that was added in QueryContextMenu(). <br>// <br>//  PARAMETERS: <br>//    lpcmi - Pointer to an CMINVOKECOMMANDINFO structure <br>// <br>//  RETURN VALUE: <br>// <br>// <br>//  COMMENTS: <br>// <br> <br>STDMETHODIMP CShellExt::GetCommandString(UINT idCmd, <br>                                         UINT uFlags, <br>                                         UINT FAR *reserved, <br>                                         LPSTR pszName, <br>                                         UINT cchMax) <br>{ <br>    ODS("CShellExt::GetCommandString()\r\n"); <br> <br>    switch (idCmd) <br>    { <br>        case 0: <br>            lstrcpy(pszName, "New menu item number 1"); <br>            break; <br> <br>        case 1: <br>            lstrcpy(pszName, "New menu item number 2"); <br>            break; <br> <br>        case 2: <br>            lstrcpy(pszName, "New menu item number 3"); <br>            break; <br> <br>        case 3: <br>            lstrcpy(pszName, "New menu item number 4"); <br>            break; <br>    } <br> <br>    return NOERROR; <br>} <br> <br>STDMETHODIMP CShellExt::DoGAKMenu1(HWND hParent, <br>                                   LPCSTR pszWorkingDir, <br>                                   LPCSTR pszCmd, <br>                                   LPCSTR pszParam, <br>                                   int iShowCmd) <br>{ <br>    ODS("CShellExt::DoGAKMenu1()\r\n"); <br> <br>    MessageBox(hParent, "Menu item 1!", "Shell Extension Sample", MB_OK); <br> <br>    return NOERROR; <br>} <br> <br>STDMETHODIMP CShellExt::DoGAKMenu2(HWND hParent, <br>                                   LPCSTR pszWorkingDir, <br>                                   LPCSTR pszCmd, <br>                                   LPCSTR pszParam, <br>                                   int iShowCmd) <br>{ <br>    ODS("CShellExt::DoGAKMenu2()\r\n"); <br> <br>    MessageBox(hParent, "Menu item 2!", "Shell Extension Sample", MB_OK); <br> <br>    return NOERROR; <br>} <br> <br>STDMETHODIMP CShellExt::DoGAKMenu3(HWND hParent, <br>                                   LPCSTR pszWorkingDir, <br>                                   LPCSTR pszCmd, <br>                                   LPCSTR pszParam, <br>                                   int iShowCmd) <br>{ <br>    ODS("CShellExt::DoGAKMenu3()\r\n"); <br> <br>    MessageBox(hParent, "Menu item 3!", "Shell Extension Sample", MB_OK); <br> <br>    return NOERROR; <br>} <br> <br>STDMETHODIMP CShellExt::DoGAKMenu4(HWND hParent, <br>                                   LPCSTR pszWorkingDir, <br>                                   LPCSTR pszCmd, <br>                                   LPCSTR pszParam, <br>                                   int iShowCmd) <br>{ <br>    ODS("CShellExt::DoGAKMenu4()\r\n"); <br> <br>    MessageBox(hParent, "Menu item 4!", "Shell Extension Sample", MB_OK); <br> <br>    return NOERROR; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SHELLEXT.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6569"></a>SHELLEXT.CPP</h2>
<pre><code>// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1993 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//  MODULE:   shellext.cpp <br>// <br>// Purpose:  Implements the class factory code as well as CShellExt::QI, <br>//           CShellExt::AddRef and CShellExt::Release code. <br> <br>#include "priv.h" <br> <br>// <br>// Initialize GUIDs (should be done only and at-least once per DLL/EXE) <br>// <br>#pragma data_seg(".text") <br>#define INITGUID <br>#include &lt;initguid.h&gt; <br>#include &lt;shlguid.h&gt; <br>#include "shellext.h" <br>#pragma data_seg() <br> <br>// <br>// Global variables <br>// <br>UINT      g_cRefThisDll = 0;    // Reference count of this DLL. <br>HINSTANCE g_hmodThisDll = NULL;// Handle to this DLL itself. <br> <br>extern "C" int APIENTRY <br>DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID lpReserved) <br>{ <br>    if (dwReason == DLL_PROCESS_ATTACH) <br>    { <br>        ODS("In DLLMain, DLL_PROCESS_ATTACH\r\n"); <br> <br>        // Extension DLL one-time initialization <br> <br>        g_hmodThisDll = hInstance; <br>    } <br>    else if (dwReason == DLL_PROCESS_DETACH) <br>    { <br>        ODS("In DLLMain, DLL_PROCESS_DETACH\r\n"); <br>    } <br> <br>    return 1;   // ok <br>} <br> <br>//--------------------------------------------------------------------------- <br>// DllCanUnloadNow <br>//--------------------------------------------------------------------------- <br> <br>STDAPI DllCanUnloadNow(void) <br>{ <br>    ODS("In DLLCanUnloadNow\r\n"); <br> <br>    return (g_cRefThisDll == 0 ? S_OK : S_FALSE); <br>} <br> <br>STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID *ppvOut) <br>{ <br>    ODS("In DllGetClassObject\r\n"); <br> <br>    *ppvOut = NULL; <br> <br>    if (IsEqualIID(rclsid, CLSID_ShellExtension)) <br>    { <br>        CShellExtClassFactory *pcf = new CShellExtClassFactory; <br> <br>        return pcf-&gt;QueryInterface(riid, ppvOut); <br>    } <br> <br>    return CLASS_E_CLASSNOTAVAILABLE; <br>} <br> <br>CShellExtClassFactory::CShellExtClassFactory() <br>{ <br>    ODS("CShellExtClassFactory::CShellExtClassFactory()\r\n"); <br> <br>    m_cRef = 0L; <br> <br>    g_cRefThisDll++; <br>} <br> <br>CShellExtClassFactory::~CShellExtClassFactory() <br>{ <br>    g_cRefThisDll--; <br>} <br> <br>STDMETHODIMP CShellExtClassFactory::QueryInterface(REFIID riid, <br>                                                   LPVOID FAR *ppv) <br>{ <br>    ODS("CShellExtClassFactory::QueryInterface()\r\n"); <br> <br>    *ppv = NULL; <br> <br>    // Any interface on this object is the object pointer <br> <br>    if (IsEqualIID(riid, IID_IUnknown) || IsEqualIID(riid, IID_IClassFactory)) <br>    { <br>        *ppv = (LPCLASSFACTORY)this; <br> <br>        AddRef(); <br> <br>        return NOERROR; <br>    } <br> <br>    return E_NOINTERFACE; <br>} <br> <br>STDMETHODIMP_(ULONG) CShellExtClassFactory::AddRef() <br>{ <br>    return ++m_cRef; <br>} <br> <br>STDMETHODIMP_(ULONG) CShellExtClassFactory::Release() <br>{ <br>    if (--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br> <br>    return 0L; <br>} <br> <br>STDMETHODIMP CShellExtClassFactory::CreateInstance(LPUNKNOWN pUnkOuter, <br>                                                      REFIID riid, <br>                                                      LPVOID *ppvObj) <br>{ <br>    ODS("CShellExtClassFactory::CreateInstance()\r\n"); <br> <br>    *ppvObj = NULL; <br> <br>    // Shell extensions typically don't support aggregation (inheritance) <br> <br>    if (pUnkOuter) <br>    return CLASS_E_NOAGGREGATION; <br> <br>    // Create the main shell extension object.  The shell will then call <br>    // QueryInterface with IID_IShellExtInit--this is how shell extensions are <br>    // initialized. <br> <br>    LPCSHELLEXT pShellExt = new CShellExt();  //Create the CShellExt object <br> <br>    if (NULL == pShellExt) <br>    return E_OUTOFMEMORY; <br> <br>    return pShellExt-&gt;QueryInterface(riid, ppvObj); <br>} <br> <br> <br>STDMETHODIMP CShellExtClassFactory::LockServer(BOOL fLock) <br>{ <br>    return NOERROR; <br>} <br> <br>// *********************** CShellExt ************************* <br>CShellExt::CShellExt() <br>{ <br>    ODS("CShellExt::CShellExt()\r\n"); <br> <br>    m_cRef = 0L; <br>    m_pDataObj = NULL; <br> <br>    g_cRefThisDll++; <br>} <br> <br>CShellExt::~CShellExt() <br>{ <br>    if (m_pDataObj) <br>        m_pDataObj-&gt;Release(); <br> <br>    g_cRefThisDll--; <br>} <br> <br>STDMETHODIMP CShellExt::QueryInterface(REFIID riid, LPVOID FAR *ppv) <br>{ <br>    *ppv = NULL; <br> <br>    if (IsEqualIID(riid, IID_IShellExtInit) || IsEqualIID(riid, IID_IUnknown)) <br>    { <br>        ODS("CShellExt::QueryInterface()==&gt;IID_IShellExtInit\r\n"); <br> <br>    *ppv = (LPSHELLEXTINIT)this; <br>    } <br>    else if (IsEqualIID(riid, IID_IContextMenu)) <br>    { <br>        ODS("CShellExt::QueryInterface()==&gt;IID_IContextMenu\r\n"); <br> <br>        *ppv = (LPCONTEXTMENU)this; <br>    } <br>    else if (IsEqualIID(riid, IID_IExtractIcon)) <br>    { <br>        ODS("CShellExt::QueryInterface()==&gt;IID_IExtractIcon\r\n"); <br> <br>        *ppv = (LPEXTRACTICON)this; <br>    } <br>    else if (IsEqualIID(riid, IID_IPersistFile)) <br>    { <br>        ODS("CShellExt::QueryInterface()==&gt;IPersistFile\r\n"); <br> <br>        *ppv = (LPPERSISTFILE)this; <br>    } <br>    else if (IsEqualIID(riid, IID_IShellPropSheetExt)) <br>    { <br>        ODS("CShellExt::QueryInterface()==&gt;IShellPropSheetExt\r\n"); <br> <br>        *ppv = (LPSHELLPROPSHEETEXT)this; <br>    } <br>    else if (IsEqualIID(riid, IID_IShellCopyHook)) <br>    { <br>        ODS("CShellExt::QueryInterface()==&gt;ICopyHook\r\n"); <br> <br>        *ppv = (LPCOPYHOOK)this; <br>    } <br> <br>    if (*ppv) <br>    { <br>        AddRef(); <br> <br>        return NOERROR; <br>    } <br> <br>    ODS("CShellExt::QueryInterface()==&gt;Unknown Interface!\r\n"); <br> <br>return E_NOINTERFACE; <br>} <br> <br>STDMETHODIMP_(ULONG) CShellExt::AddRef() <br>{ <br>    ODS("CShellExt::AddRef()\r\n"); <br> <br>    return ++m_cRef; <br>} <br> <br>STDMETHODIMP_(ULONG) CShellExt::Release() <br>{ <br>    ODS("CShellExt::Release()\r\n"); <br> <br>    if (--m_cRef) <br>        return m_cRef; <br> <br>    delete this; <br> <br>    return 0L; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

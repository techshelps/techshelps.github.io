<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IFILEVW.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6524"></a>IFILEVW.CPP</h2>
<pre><code>//THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>//ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>//THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//PROGRAM:IFILEVW.CPP <br>// <br>//PURPOSE: IFileViewer interface implementation for a FileViewer. <br>// Custom FileViewer objects should modify the Show member <br>// to suit its own needs.  <br>// <br>//PLATFORMS:Windows 95 <br>// <br>//SPECIAL INSTRUCTIONS: N/A <br>// <br> <br>#include "fileview.h" <br> <br>// <br>//   FUNCTION: CImpIFileViewer::CImpIFileViewer <br>// <br>//   PURPOSE:   Constructor <br>// <br>//   PARAMETERS:  <br>//  pObj            PCFileViewer of the object we're in. <br>//    pUnkOuter       LPUNKNOWN to which we delegate. <br>// <br>CImpIFileViewer::CImpIFileViewer(PCFileViewer pObj <br>    , LPUNKNOWN pUnkOuter) <br>    { <br>    m_pObj=pObj; <br>    m_pUnkOuter=pUnkOuter; <br>    return; <br>    }  <br>// <br>//   FUNCTION: CImpIFileViewer::~CImpIFileViewer <br>// <br>//   PURPOSE:   Destructor <br>// <br>CImpIFileViewer::~CImpIFileViewer(void) <br>    { <br>    return;    <br>    } <br>// <br>//   FUNCTION: CImpIFileViewer::QueryInterface <br>// CImpIFileViewer::AddRef   <br>// CImpIFileViewer::Release <br>// <br>//   PURPOSE:    IUnknown members for CImpIFileViewer object that only delegate. <br>// <br>STDMETHODIMP CImpIFileViewer::QueryInterface(REFIID riid <br>    , PPVOID ppv) <br>    { <br>    return m_pUnkOuter-&gt;QueryInterface(riid, ppv); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIFileViewer::AddRef(void) <br>    { <br>    return m_pUnkOuter-&gt;AddRef(); <br>    } <br> <br>STDMETHODIMP_(ULONG) CImpIFileViewer::Release(void) <br>    { <br>    return m_pUnkOuter-&gt;Release(); <br>    } <br>// <br>//   FUNCTION:CImpIFileViewer::PrintTo  <br>// <br>//   PURPOSE:    Asks a FileViewer to print the file that came through <br>//  IPersistFile::Load to a specific device with or without <br>//  any user interaction.  This function should not return <br>//  until the printing is complete. <br>// <br>//   PARAMETERS:  <br>//    pszDriver       LPSTR with the path of the driver to use.  If NULL, use the default driver. <br>//      fSuppressUI     BOOL indicating if this function is to show anyUI or not. <br>// <br>//   RETURN VALUE: <br>//  HRESULT         NOERROR on success, error code otherwise. <br>// <br>STDMETHODIMP CImpIFileViewer::PrintTo(LPSTR pszDriver <br>    , BOOL fSuppressUI) <br>    { <br>     // Printing not implemented in this sample, but <br>     // make a stub call anyway. <br>    return m_pObj-&gt;PrintTo(pszDriver, fSuppressUI); <br>    } <br>// <br>//   FUNCTION: CImpIFileViewer::ShowInitialize <br>// <br>//   PURPOSE:  Initializes everything necessary to display the FileViewer <br>//  window but does not show it.  The FileViewer should do all <br>//  the necessary pre-visible work here as this is the only <br>//  time the FileViewer is allowed to fail.  <br>// <br>//   PARAMETERS:  <br>// <br>//   RETURN VALUE: <br>//   HRESULT         NOERROR or an appropriate error code such as <br>//                  E_UNEXPECTED, E_FAIL, or E_OUTOFMEMORY. <br>// <br>STDMETHODIMP CImpIFileViewer::ShowInitialize(LPFILEVIEWERSITE lpfsi) <br>    { <br>    return m_pObj-&gt;FileShowInit(lpfsi); <br>    } <br>// <br>//   FUNCTION:CImpIFileViewer::Show  <br>// <br>//   PURPOSE:    Displays the FileViewer's window in which the file is <br>//  displayed.  This function cannot be called unless <br>//  Initialize has already been called.  If Initialize has <br>//  been called then this function is not allowed to fail and <br>//  should do little more than show the window and enter a <br>//  message loop, that is, perform no allocations or anything <br>//  else that may fail due to low-memory conditions. <br>// <br>//  Treat this function like a WinMain function. <br>// <br>//   PARAMETERS:  <br>//    nCmdShow        int indicating how to initially show the FileViewer window. <br>// <br>//   RETURN VALUE: <br>//    HRESULT         E_UNEXPECTED if Initalize has not been called, otherwise must be NOERROR. <br>// <br>STDMETHODIMP CImpIFileViewer::Show(LPFVSHOWINFO pvsi) <br>    { <br>    if (!m_pObj-&gt;m_fShowInit) <br>        return ResultFromScode(E_UNEXPECTED); <br> <br>    m_pObj-&gt;FileShow(pvsi); <br>    return NOERROR; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

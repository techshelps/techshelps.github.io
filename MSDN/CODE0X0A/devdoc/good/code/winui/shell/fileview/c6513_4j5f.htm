<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6513"></a>README.TXT</h2>
<pre><code>File Viewer <br> <br> <br>SUMMARY <br>======= <br> <br>The FILEVIEW sample demonstrates the basic steps to implement a simple <br>text-based file viewer. This particular sample is a viewer for text files, <br>those with the .TXT extension, as well as any compound file with the CLSID <br>of CLSID_SampleTextFile, defined as 0x00021116-0000-C000-000000000046. <br>The files FLATTEXT.TXT and COMPTEXT.TXT are two such files. <br> <br>If you build the sample viewer and register it via the FVTEXT.REG file, <br>you will be able to use the sample viewer. Note that the system has <br>a .TXT file viewer installed by default. To disable the default viewer, <br>rename the vsasc8.dll file in the system\viewers subdirectory or edit <br>FVTEXT.REG and change the .TXT extension to another extension not <br>supported by QuickView, like XXX, and then use text files with the XXX <br>extension. <br> <br>You can build the sample using Microsoft NMAKE. Be aware that building the <br>sample produces a DLL. Once this DLL is registered, clicking with the right <br>mouse button on one of the .TXT (XXX) files will display a context menu. <br>Within this context menu, you will see the QuickView option. If you click on <br>this menu item, the sample file viewer will be invoked. <br> <br>MORE INFORMATION <br>================ <br> <br>This sample was designed to require only small amounts of modification <br>to build a custom viewer and the areas where you would need to make <br>changes are clearly marked in the source code. The FileViewer component  <br>object itself used CLSID_FileViewerText:0x00021117-0000-C000-000000000046.   <br>Do not use this CLSID yourself! You will need to create your own unique  <br>CLSID using the GUIDGEN.EXE utility that comes with the SDK.  <br> <br>This sample builds FVTEXT.DLL and places it in the  <br>C:\WINDOWS\SYSTEM\VIEWERS directory. You need to create a different name <br>for your own Viewer and use your particular system path. Rename the  <br>following files to your custom name and make the indicated filename changes  <br>within those files.  <br> <br>Files        Description <br> <br>FVTEXT.CPP   Main source file. Change occurrences of FVTEXT to your own  <br>             name. <br>FVTEXT.CPP   Contains the CFileViewer object implementation, where most of <br>             the significant code is. There is not much in this file but <br>             the CFileViewer member functions. Most of the functions will <br>             require modification, depending on the type of viewer you <br>             plan to implement. For the most part, most of the functions and <br>             fields in CFileViewer need no modification. Those specific  <br>             places needing modification are marked with MODIFY. <br>FVTEXT.DEF   Module definition file. Change the LIBRARY and DESCRIPTION  <br>             lines to match your implementation. NOTE: You must export <br>             DllGetClassObject and DllCanUnloadNow. <br>FVTEXT.H     Main object header file. Change occurrences of FVTEXT to your <br>             own name. <br> <br>             It is MOST IMPORTANT that you not use the CLSIDs defined here. <br>             These are strictly for use with this sample. Use the SDK tool <br>             GUIDGEN.EXE to generate your own unique CLSIDs. <br>FVTEXT.ICO   Icon to use for FileViewer window. Use your own icon. <br>FVTEXT.RC    Resources. Change the FVTEXT in the header and the references  <br>             to fvtext.ico and fvtext.rcv to your own names. <br>FVTEXT.RCV   Version information. Change FVTEXT in the header to your own  <br>             name. <br>FVTEXT.REG   Registry information for the FileViewer. Change the  <br>             InprocServer32 entry (the last line) to your own DLL name.  <br>             Change the extension from CPP to the extension you are  <br>             supporting. <br>MAKEFILE     This is an external makefile for use with NMAKE. It is not a <br>             Visual C++ project file. In general, you will have to change  <br>             the following macros definitions for a custom viewer: <br> <br>             Macro           Location    Use <br> <br>             DEFFILE         Line 24     Indicates your .DEF file <br>             TARGET          Line 42     Indicates the name of the  <br>                                         FileViewer. MAKEFILE assumes you  <br>                                         have .CPP, .H, .RC, .RCV, and .ICO  <br>                                         files with this name and are  <br>                                         building a .DLL with this name. <br> <br>             The dependency list at the bottom of the file should not need  <br>             any modifications unless you rename other files or add new  <br>             files. If you add new files, add them to the OBJS macro at  <br>             line 58. <br>CSTATHLP.CPP Definition and implementation of a class called CStatusHelper  <br>CSTATHLP.H   that simplifies WM_MENUSELECT processing. To utilize this  <br>             object, create one and call its MessageMap function (see  <br>             CSTATHLP.CPP for documentation). You can then call its  <br>             MenuSelect function to handle all WM_MENUSELECT messages. You  <br>             can also ask CStatusHelper to display a specific message in  <br>             the message map by calling MessageDisplay. You pass an  <br>             identifier of the message in the message map and the  <br>             CStatusHelper will go locate the string and display it. <br>CSTRTABL.CPP Definition and implementation of a CStingTable class that <br>CSTRTABL.H   simplifies stringtable management. <br>DBGOUT.H     Contains a number of macros that help keep source code clean  <br>             when including debug output and conditional code. <br>IFILEVW.CPP  Implements the IFileViewer interface required of a FileViewer <br>             using a class CImpIFileViewer (defined in FVTEXT.H). You should <br>             not have to make any changes to this file. The IUnknown members <br>             are delegated to CFileViewer's IUnknown implementation. <br>IPERFILE.CPP Implements the IPersistFile interface for a FileViewer using <br>             the class CImpIPersistFile. <br>FILEVIEW.CPP <br>FILEVIEW.H   The master header file for the entire sample that most of the <br>             .CPP files include. It pulls in the other header files  <br>             necessary for the specific viewer. In this sample, it brings in  <br>             FVTEXT.H and RESOURCE.H. Your FileViewer should have a  <br>             different name, so you'll want to change the reference to  <br>             FVTEXT.H. <br>FVPROC.CPP   Contains the window procedures for the frame window, the  <br>             viewport window, and the about box. ViewportWndProc is what  <br>             generates the display of the file. This will require major  <br>             modifications depending on what you plan to do. </code></pre>
<p>&nbsp;</p></body>
</HTML>

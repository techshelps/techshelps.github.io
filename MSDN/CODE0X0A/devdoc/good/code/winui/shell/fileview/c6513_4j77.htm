<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FVTEXT.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6523"></a>FVTEXT.H</h2>
<pre><code>//THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>//ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>//THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//PROGRAM: FVTEXT.H <br>// <br>//PURPOSE:   Classes that implement the CFileViewer object for integration <br>// with the Windows 95 Explorer.  Necessary modifications for a <br>// custom viewer marked with MODIFY  <br>// <br>//PLATFORMS:Windows 95 <br>// <br>//SPECIAL INSTRUCTIONS:  <br>// <br>//DO NOT USE THESE GUIDS:  These are for this sample ONLY <br>//File CLSID for the text compound file example:  this is nothing official. <br>//Forward class references <br> <br>DEFINE_GUID(CLSID_SampleTextFile, 0x00021116, 0, 0, 0xC0,0,0,0,0,0,0,0x46); <br> <br>//MODIFY:  Define your custom FileViewer CLSID(s) here. <br>DEFINE_GUID(CLSID_FileViewerText, 0x00021117, 0, 0, 0xC0,0,0,0,0,0,0,0x46); <br> <br>#ifndef _FVTEXT_H_ <br>#define _FVTEXT_H_ <br> <br>class CImpIPersistFile; <br>typedef class CImpIPersistFile *PIMPIPERSISTFILE; <br> <br>class CImpIFileViewer; <br>typedef class CImpIFileViewer *PIMPIFILEVIEWER; <br> <br>//FVPROC.CPP <br>//MODIFY:  Window procedures for frame and viewport windows <br>long WINAPI FileViewerFrameProc(HWND, UINT, WPARAM, LPARAM); <br> <br>//Extra bytes for frame <br>#define CBWNDEXTRAFRAME             sizeof(LPVOID) <br>#define FVWL_OBJECTPOINTER          0 <br> <br>/* <br> * MODIFY:  Change viewport window procedure and defintions <br> * to be specific to the file viewer in use. <br> */ <br>long WINAPI ViewportWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br>//Extra bytes for viewport <br>#define CBWNDEXTRAVIEWPORT          sizeof(LPVOID) <br>#define VPWL_OBJECTPOINTER          0 <br> <br> <br>BOOL APIENTRY AboutProc(HWND, UINT, WPARAM, LPARAM); <br> <br> <br>//Child window IDs <br>#define ID_TOOLBAR                  50 <br>#define ID_STATUSBAR                51 <br>#define ID_VIEWPORT                 52 <br> <br> <br>//Options for CFileViewer::FontChange. <br>typedef enum <br>    { <br>    VIEWFONT_SELECT=0, <br>    VIEWFONT_INCREASESIZE, <br>    VIEWFONT_DECREASESIZE <br>    } VIEWFONTOPTION; <br> <br>/* <br> * Limits to font sizes for the Font dialog.  The increase and <br> * decrease buttons change the point size by different amounts <br> * (FONTSIZEDELTA*) depending on the size of the current font <br> * (where it falls in the FONTSIZETHRESHOLD*).  Note that these <br> * values have to be multiplied by logical_pixels_per_inch/72 <br> * on the display to be accurate.  See CFileViewer::FontChange. <br> * <br> * Of course, there are better ways to do this that are font <br> * specific.  This way works well for stock fonts (Arial, Courier <br> * New, Times New Roman). <br> */ <br>#define FONTSIZETHRESHOLDMIN    4 <br>#define FONTSIZETHRESHOLDLOW    32 <br>#define FONTSIZETHRESHOLDMID    48 <br>#define FONTSIZETHRESHOLDMAX    120 <br>#define FONTSIZEDELTASMALL      2       //4 to 32pt <br>#define FONTSIZEDELTAMEDIUM     8       //32 to 48pt <br>#define FONTSIZEDELTALARGE      24      //48 to 120pt <br> <br>//FVTEXT.CPP, FVINIT.CPP <br>/* <br> * MODIFY:  Change this CFileViewer object to be more specific to <br> * your implementations.  Specific parts are listed below. <br> * <br> * The CFileViewer object is implemented in its own class with its own <br> * IUnknown to support aggregation.  It contains two interface <br> * implementation objects (CImpIPersistFile and CImpIFileViewer) <br> * to implement the externally exposed interfaces. <br> */ <br> <br>class CFileViewer : public IUnknown <br>    { <br>    //Make any contained interfaces your friends <br>    friend class CImpIPersistFile; <br>    friend class CImpIFileViewer; <br> <br>    friend long WINAPI FileViewerFrameProc(HWND, UINT, WPARAM, LPARAM); <br>    friend long WINAPI ViewportWndProc(HWND, UINT, WPARAM, LPARAM); <br> <br>    protected: <br>        //NOTE:  These members usually need no modification <br>        ULONG               m_cRef;             //Object reference count <br> <br>        LPUNKNOWN           m_pUnkOuter;        //Controlling unknown <br>        HINSTANCE           m_hInst;            //Module instance <br>        PFNDESTROYED        m_pfnDestroy;       //To call on closure <br>        LPFILEVIEWERSITE m_lpfsi;       // file viewer site <br> <br>        CLSID               m_clsID;            //CLSID of this FileViewer <br>        LPSTR               m_pszPath;          //Path from IPersitFile::Load <br>        DWORD               m_grfMode;          //Open mode for the file <br>        BOOL                m_fLoadCalled;      //Load called already? <br>        BOOL                m_fShowInit;        //ShowInitialize called? <br> <br>        BOOL                m_fClassReg;        //RegisterClass work? <br>        BOOL                m_fPostQuitMsg;     // Should destroy post quit <br>        HWND                m_hWnd;             //Main window <br>        HWND                m_hWndOld;          // Old Main window. <br>        HWND                m_hWndToolbar;      //Child windows <br>        HWND                m_hWndStatus; <br>        HWND                m_hWndViewport; <br>        HACCEL              m_hAccel; <br> <br>        UINT                m_cyTools;          //Child window heights <br>        UINT                m_cyStatus; <br> <br>        BOOL                m_fToolsVisible;    //Visible child windows. <br>        BOOL                m_fStatusVisible; <br> <br>        PCStringTable       m_pST;              //Stringtable object <br>        PCStatusHelper      m_pSH;              //For WM_MENUSELECT <br> <br>        //Interface implementations <br>        PIMPIPERSISTFILE    m_pIPersistFile; <br>        PIMPIFILEVIEWER     m_pIFileViewer; <br>        LPFVSHOWINFO        m_pvsi; <br> <br>        /* <br>         * MODIFY:  Change these to your own FileViewer specifics. <br>         * The variables here are specific to text viewing. <br>         */ <br>        HGLOBAL             m_hMemText;         //Loaded text. <br>        HFONT               m_hFont;            //Current viewport font <br>        int                 m_cyPPI;            //logical pix/inch <br>        int                 m_xPos;             //Scroll positions <br>        int                 m_yPos; <br> <br>    protected: <br>        BOOL                FInitFrameControls(void); <br>        HRESULT             FileLoad(void); <br> <br>        void                OnCommand(WORD, WORD, HWND); <br>        void                ChildrenResize(void); <br>        void                ViewportResize(void); <br>        BOOL                FOpenAs(void); <br>        LPSTR               PszToolTip(UINT); <br> <br>        //MODIFY:  These may be irrelevant for a custom viewer <br>        void                ViewportScrollSet(void); <br>        void                FontChange(VIEWFONTOPTION); <br>        void                ReplaceWindowModeChange(void); <br>        BOOL                DropFiles(HDROP); <br> <br>    public: <br>        CFileViewer(LPUNKNOWN, HINSTANCE, PFNDESTROYED); <br>        ~CFileViewer(void); <br> <br>        HRESULT             Init(void);        //Called from IClassFactory::CreateInstance <br>        LPSTR               String(UINT);      //inline--see FVTEXT.CPP <br>        LPVOID              MemAlloc(ULONG);   //IMalloc helpers <br>        void                MemFree(LPVOID); <br> <br>        //IFileViewer implementataions (called from CImpIFileViewer) <br>        STDMETHODIMP        FileShowInit(LPFILEVIEWERSITE lpfsi); <br>        STDMETHODIMP        FileShow(LPFVSHOWINFO pvsi); <br>        STDMETHODIMP        PrintTo(LPSTR, BOOL); <br> <br> <br>        //Non-delegating object IUnknown interface <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br>    }; <br> <br>typedef CFileViewer * PCFileViewer; <br> <br> <br> <br>/* <br> * Interface implementations for the CFileViewer object. <br> */ <br> <br>//IPERFILE.CPP <br>class CImpIPersistFile : public IPersistFile <br>    { <br>    private: <br>        PCFileViewer    m_pObj;         //Back pointer to object <br>        LPUNKNOWN       m_pUnkOuter;    //Controlling unknown <br> <br>    public: <br>        CImpIPersistFile(PCFileViewer, LPUNKNOWN); <br>        ~CImpIPersistFile(void); <br> <br>        //IUnknown members that delegate to m_pUnkOuter. <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IPersist members <br>        STDMETHODIMP GetClassID(LPCLSID); <br> <br>        //IPersistFile members <br>        STDMETHODIMP IsDirty(void); <br>        STDMETHODIMP Load(LPCOLESTR, DWORD); <br>        STDMETHODIMP Save(LPCOLESTR, BOOL); <br>        STDMETHODIMP SaveCompleted(LPCOLESTR); <br>        STDMETHODIMP GetCurFile(LPOLESTR *); <br>    }; <br> <br> <br> <br> <br>//IFILEVW.CPP <br>class CImpIFileViewer : public IFileViewer <br>    { <br>    private: <br>        PCFileViewer    m_pObj;         //Back pointer to object <br>        LPUNKNOWN       m_pUnkOuter;    //Controlling unknown <br> <br>    public: <br>        CImpIFileViewer(PCFileViewer, LPUNKNOWN); <br>        ~CImpIFileViewer(void); <br> <br>        //IUnknown members that delegate to m_pUnkOuter. <br>        STDMETHODIMP         QueryInterface(REFIID, PPVOID); <br>        STDMETHODIMP_(ULONG) AddRef(void); <br>        STDMETHODIMP_(ULONG) Release(void); <br> <br>        //IFileViewer members <br>        STDMETHODIMP PrintTo(LPSTR, BOOL); <br>        STDMETHODIMP ShowInitialize(LPFILEVIEWERSITE lpfsi); <br>        STDMETHODIMP Show(LPFVSHOWINFO pvsi); <br>    }; <br> <br> <br> <br>#endif //_FVTEXT_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

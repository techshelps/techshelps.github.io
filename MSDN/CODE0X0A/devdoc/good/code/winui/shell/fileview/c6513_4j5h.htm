<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CSTRTABL.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6515"></a>CSTRTABL.CPP</h2>
<pre><code>//THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>//ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>//THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//PROGRAM:CSTRTABL.CPP <br>// <br>//PURPOSE:   Implementation of a string table handler.  The CStringTable <br>// class hides details of storage from the user.  The strings might <br>// be cached, or they might be loaded as necessary.  In either case, <br>// we must know the number of strings so we know whether or not to <br>// reload strings. <br>// <br>//PLATFORMS:Windows 95 <br>// <br>//FUNCTIONS: <br>//    <br>// <br>//SPECIAL INSTRUCTIONS: N/A <br>// <br>#include "fileview.h" <br> <br>// <br>//   FUNCTION: CStringTable::CStringTable <br>// <br>//   PURPOSE: Constructor <br>// <br>//   PARAMETERS:  <br>//     hInst           HANDLE to the module instance from which we  load strings. <br>//  <br>CStringTable::CStringTable(HINSTANCE hInst) <br>    { <br>    m_hInst=hInst; <br>    m_pszStrings=NULL; <br>    m_ppszTable=NULL; <br>    return; <br>    } <br> <br>// <br>//   FUNCTION:  CStringTable::~CStringTable <br>// <br>//   PURPOSE: Destructor <br>// <br>CStringTable::~CStringTable(void) <br>    { <br>    if (NULL!=m_pszStrings) <br>        free(m_pszStrings); <br> <br>    if (NULL!=m_ppszTable) <br>        free(m_ppszTable); <br> <br>    return; <br>    } <br>// <br>//   FUNCTION: CStringTable::FInit <br>// <br>//   PURPOSE:    Initialization function for a StringTable that is prone to <br>//  failure.  If this fails then the caller is responsible for <br>//  guaranteeing that the destructor is called quickly. <br>// <br>//   PARAMETERS:  <br>//   idsMin          UINT first identifier in the stringtable <br>//  idsMax          UINT last identifier in the stringtable. <br>//  cchMax          UINT with the maximum string length allowed. <br>// <br>//   RETURN VALUE: <br>//    BOOL            TRUE if the function is successful,  FALSE otherwise. <br>// <br>BOOL CStringTable::FInit(UINT idsMin, UINT idsMax, UINT cchMax) <br>    { <br>    UINT        i; <br>    UINT        cch; <br>    UINT        cchUsed=0; <br>    LPSTR       psz; <br> <br>    m_idsMin=idsMin; <br>    m_idsMax=idsMax; <br>    m_cStrings=(idsMax-idsMin+1); <br> <br>    //Allocate space for the pointer table. <br>    m_ppszTable=(LPSTR *)malloc(sizeof(LPSTR)*m_cStrings); <br> <br>    if (NULL==m_ppszTable) <br>        return FALSE; <br>     // Allocate enough memory for cStrings*cchMax characters.  80 <br>     // characters is the maximum string length we allow.  This <br>     // will result in some unused memory, but a few K is not <br>     // worth quibbling over. <br>    m_pszStrings=(LPSTR)malloc(m_cStrings * cchMax); <br> <br>    if (NULL==m_pszStrings) <br>        { <br>        free(m_ppszTable); <br>        m_ppszTable=NULL; <br>        return FALSE; <br>        } <br>     // Load the strings:  we load each string in turn into psz, <br>     // store the string pointer into the table and increment psz <br>     // to the next positions. <br>    psz=m_pszStrings; <br> <br>    for (i=idsMin; i &lt;= idsMax; i++) <br>        { <br>        m_ppszTable[i-idsMin]=psz; <br>        cch=LoadString(m_hInst, i, psz, 255); <br> <br>        //Account for a null terminator with +1 <br>        psz    +=cch+1; <br>        cchUsed+=cch; <br>        } <br> <br>    return TRUE; <br>    } <br>// <br>//   FUNCTION: CStringTable::operator[] <br>// <br>//   PURPOSE:  Returns a pointer to the requested string in the stringtable <br>//  or NULL if the specified string does not exist. <br>//  <br>const LPSTR CStringTable::operator[](const UINT uID) const <br>    { <br>    if (uID &lt; m_idsMin || uID &gt; m_idsMax) <br>        return NULL; <br> <br>    return (const LPSTR)m_ppszTable[uID-m_idsMin]; <br>    } </code></pre>
<p>&nbsp;</p></body>
</HTML>

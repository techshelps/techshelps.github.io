<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UNKNOWN.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6503"></a>UNKNOWN.H</h2>
<pre><code>//******************************************************************************************* <br>// <br>// Filename : Unknown.h <br>// <br>//Definitions for some customized routines <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation. All rights reserved <br>// <br>//******************************************************************************************* <br> <br> <br>#ifndef _UNKNOWN_H_ <br>#define _UNKNOWN_H_ <br> <br>class CUnknown <br>{ <br>public: <br>CUnknown() {} <br>virtual ~CUnknown();// virtual destructor called from Release <br> <br>HRESULT QIHelper(REFIID riid, LPVOID *ppvObj, const IID *apiid[], LPUNKNOWN aobj[]); <br>ULONG AddRefHelper(); <br>ULONG ReleaseHelper(); <br> <br>private: <br>CRefCount m_cRef; <br>CRefDll m_cRefDll; <br>} ; <br> <br>// Only for ensuring Release in all control paths <br>class CEnsureRelease <br>{ <br>public: <br>CEnsureRelease(IUnknown *pUnk) : m_pUnk(pUnk) {} <br>~CEnsureRelease() {if (m_pUnk) m_pUnk-&gt;Release();} <br> <br>operator IUnknown*() {return(m_pUnk);} <br> <br>void Attach(IUnknown *pUnk) {m_pUnk = pUnk;} <br> <br>private: <br>IUnknown *m_pUnk; <br>} ; <br> <br>class CObjTemp <br>{ <br>public: <br>CObjTemp() : m_hObj(0) {} <br>~CObjTemp() {} <br> <br>operator HANDLE() const {return(m_hObj);} <br> <br>HANDLE Attach(HANDLE hObjNew) {HANDLE hObj=m_hObj; m_hObj=hObjNew; return(hObj);} <br>HANDLE Detach() {return(Attach(0));} <br> <br>protected: <br>HANDLE m_hObj; <br>} ; <br> <br>class CMenuTemp : public CObjTemp <br>{ <br>public: <br>CMenuTemp() : CObjTemp() {} <br>CMenuTemp(HMENU hm) : CObjTemp() {Attach(hm);} <br>~CMenuTemp() {if (m_hObj) DestroyMenu(Detach());} <br> <br>operator HMENU() const {return((HMENU)m_hObj);} <br> <br>HMENU Attach(HMENU hObjNew) {return((HMENU)CObjTemp::Attach((HANDLE)hObjNew));} <br>HMENU Detach() {return((HMENU)CObjTemp::Detach());} <br> <br>BOOL CreatePopupMenu() {Attach(::CreatePopupMenu()); return(m_hObj!=NULL);} <br>} ; <br> <br>class CGotGlobal : public CObjTemp <br>{ <br>public: <br>CGotGlobal(HGLOBAL hData, IUnknown *pUnk) : m_erData(pUnk) {Attach(hData);} <br>~CGotGlobal() {if (!(IUnknown*)m_erData) GlobalFree(m_hObj);} <br> <br>private: <br>CEnsureRelease m_erData; <br>} ; <br> <br>class CHIDA : public CGotGlobal <br>{ <br>public: <br>CHIDA(HGLOBAL hIDA, IUnknown *pUnk) : CGotGlobal(hIDA, pUnk) <br>{ <br>m_lpIDA = (LPIDA)GlobalLock(hIDA); <br>} <br>~CHIDA() {GlobalUnlock(m_hObj);} <br> <br>LPCITEMIDLIST operator [](UINT nIndex) <br>{ <br>if (!m_lpIDA || nIndex&gt;m_lpIDA-&gt;cidl) <br>{ <br>return(NULL); <br>} <br> <br>return((LPCITEMIDLIST)(((LPSTR)m_lpIDA)+m_lpIDA-&gt;aoffset[nIndex])); <br>} <br> <br>int GetCount() {return(m_lpIDA ? m_lpIDA-&gt;cidl : 0);} <br> <br>private: <br>LPIDA m_lpIDA; <br>} ; <br> <br>#endif // _UNKNOWN_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SFVMENU.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6494"></a>SFVMENU.CPP</h2>
<pre><code>//******************************************************************************************* <br>// <br>// Filename : SFVMenu.cpp <br>// <br>//Implementation file for CSFView menu related methods <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation. All rights reserved <br>// <br>//******************************************************************************************* <br> <br>#include "Pch.H" <br> <br>#include "SFView.H" <br>#include "SFVWnd.H" <br> <br>#include "Resource.H" <br> <br>enum <br>{ <br>SUBMENU_EDIT, <br>SUBMENU_VIEW, <br>} ; <br> <br>enum <br>{ <br>SUBMENUNF_EDIT, <br>SUBMENUNF_VIEW, <br>} ; <br> <br>static HMENU _GetMenuFromID(HMENU hmMain, UINT uID) <br>{ <br>MENUITEMINFO miiSubMenu; <br> <br>miiSubMenu.cbSize = sizeof(MENUITEMINFO); <br>miiSubMenu.fMask  = MIIM_SUBMENU; <br>miiSubMenu.cch = 0;     // just in case <br> <br>if (!GetMenuItemInfo(hmMain, uID, FALSE, &amp;miiSubMenu)) <br>{ <br>return NULL; <br>} <br> <br>return(miiSubMenu.hSubMenu); <br>} <br> <br> <br>static int _GetOffsetFromID(HMENU hmMain, UINT uID) <br>{ <br>int index; <br> <br>for (index = GetMenuItemCount(hmMain)-1; index&gt;=0; index--) <br>{ <br>MENUITEMINFO mii; <br>mii.cbSize = sizeof(MENUITEMINFO); <br>mii.fMask = MIIM_ID; <br>mii.cch = 0;// just in case <br> <br>if (GetMenuItemInfo(hmMain, (UINT)index, TRUE, &amp;mii) <br>&amp;&amp; (mii.wID == FCIDM_MENU_VIEW_SEP_OPTIONS)) <br>{ <br>// merge it right above the separator. <br>break; <br>} <br>} <br> <br>return(index); <br>} <br> <br> <br>int CSFView::GetMenuIDFromViewMode() <br>{ <br>switch (m_fs.ViewMode) <br>{ <br>case FVM_SMALLICON: <br>return(IDC_VIEW_SMALLICON); <br>case FVM_LIST: <br>return(IDC_VIEW_LIST); <br>case FVM_DETAILS: <br>return(IDC_VIEW_DETAILS); <br>default: <br>return(IDC_VIEW_ICON); <br>} <br>} <br> <br> <br>BOOL CSFView::GetArrangeText(int iCol, UINT idFmt, LPSTR pszText, UINT cText) <br>{ <br>char szFormat[200]; <br>LoadString(g_ThisDll.GetInstance(), idFmt, szFormat, sizeof(szFormat)); <br> <br>LV_COLUMN col; <br>char szText[80]; <br> <br>col.mask = LVCF_TEXT; <br>col.pszText = szText; <br>col.cchTextMax = sizeof(szText); <br> <br>if (!m_cView.GetColumn(iCol, &amp;col)) <br>{ <br>return(FALSE); <br>} <br> <br>char szCommand[sizeof(szFormat)+sizeof(szText)]; <br>wsprintf(szCommand, szFormat, szText); <br> <br>lstrcpyn(pszText, szCommand, cText); <br> <br>return(TRUE); <br>} <br> <br> <br>void CSFView::MergeArrangeMenu(HMENU hmView) <br>{ <br>// Now add the sorting menu items <br>for (int i=0; i&lt;MAX_COL; ++i) <br>{ <br>MENUITEMINFO mii; <br>mii.cbSize = sizeof(mii); <br> <br>char szCommand[100]; <br>if (!GetArrangeText(i, IDS_BYCOL_FMT, szCommand, sizeof(szCommand))) <br>{ <br>mii.fMask = MIIM_TYPE; <br>mii.fType = MFT_SEPARATOR; <br>InsertMenuItem(hmView, IDC_ARRANGE_AUTO, FALSE, &amp;mii); <br> <br>break; <br>} <br> <br>mii.fMask = MIIM_TYPE | MIIM_STATE | MIIM_ID; <br>mii.fType = MFT_STRING; <br>mii.fState = MF_ENABLED; <br>mii.wID = IDC_ARRANGE_BY + i; <br>mii.dwTypeData = szCommand; <br> <br>InsertMenuItem(hmView, IDC_ARRANGE_AUTO, FALSE, &amp;mii); <br>} <br>} <br> <br> <br>void CSFView::MergeViewMenu(HMENU hmenu, HMENU hmMerge) <br>{ <br>HMENU hmView = _GetMenuFromID(hmenu, FCIDM_MENU_VIEW); <br>if (!hmView) <br>{ <br>return; <br>} <br> <br>int iOptions = _GetOffsetFromID(hmView, FCIDM_MENU_VIEW_SEP_OPTIONS); <br> <br>Cab_MergeMenus(hmView, hmMerge, (UINT)iOptions, FCIDM_SHVIEWFIRST, FCIDM_SHVIEWLAST, <br>MM_SUBMENUSHAVEIDS | MM_ADDSEPARATOR); <br> <br>MergeArrangeMenu(hmView); <br>} <br> <br>//***************************************************************************** <br>// <br>// CSFView::OnActivate <br>// <br>// Purpose: <br>// <br>//        handles the UIActivate call by ShellBrowser <br>// <br>// Parameters: <br>// <br>//    UINT  uState    -    UIActivate flag <br>// <br>// Comments: <br>// <br>//***************************************************************************** <br> <br> <br>BOOL CSFView::OnActivate(UINT uState) <br>{ <br>if (m_uState == uState) <br>{ <br>return(TRUE); <br>} <br> <br>OnDeactivate(); <br> <br>{ <br>// Scope cMenu <br>CMenuTemp cMenu(CreateMenu()); <br> <br>if (!((HMENU)cMenu)) <br>{ <br>return(TRUE); <br>} <br> <br>OLEMENUGROUPWIDTHS mwidth = { { 0, 0, 0, 0, 0, 0 } }; <br>         <br>// insert menus into the shell browser <br>// Explorer returns the wrong value so don't check <br>m_psb-&gt;InsertMenusSB(cMenu, &amp;mwidth); <br>         <br>// store this current menu  <br>m_cmCur.Attach(cMenu.Detach()); <br>} <br> <br>// Get the edit menu in the browser <br>HMENU hmEdit = _GetMenuFromID(m_cmCur, FCIDM_MENU_EDIT); <br> <br>if (uState == SVUIA_ACTIVATE_FOCUS) <br>{ <br>// load the menu resource <br>CMenuTemp cmMerge(LoadMenu(g_ThisDll.GetInstance(), <br>MAKEINTRESOURCE(MENU_SFV_MAINMERGE))); <br>if ((HMENU)cmMerge) <br>{ <br>// merge it with Edit submenu <br>Cab_MergeMenus(hmEdit, GetSubMenu(cmMerge, SUBMENU_EDIT), (UINT)-1, <br>FCIDM_SHVIEWFIRST, FCIDM_SHVIEWLAST, MM_ADDSEPARATOR | MM_SUBMENUSHAVEIDS); <br> <br>// add the view menu <br>MergeViewMenu(m_cmCur, GetSubMenu(cmMerge, SUBMENU_VIEW)); <br>} <br>} <br>else <br>{ <br>CMenuTemp cmMerge(LoadMenu(g_ThisDll.GetInstance(), <br>MAKEINTRESOURCE(MENU_SFV_MAINMERGENF))); <br>if ((HMENU)cmMerge) <br>{ <br>Cab_MergeMenus(hmEdit, GetSubMenu(cmMerge, SUBMENUNF_EDIT), (UINT)-1, <br>FCIDM_SHVIEWFIRST, FCIDM_SHVIEWLAST, MM_ADDSEPARATOR | MM_SUBMENUSHAVEIDS); <br> <br>// view menu <br>MergeViewMenu(m_cmCur, GetSubMenu(cmMerge, SUBMENUNF_VIEW)); <br>} <br>} <br> <br>// install the composite menu into the shell browser <br>m_psb-&gt;SetMenuSB(m_cmCur, NULL, m_cView); <br>m_uState = uState; <br> <br>return TRUE; <br>} <br> <br> <br>BOOL CSFView::OnDeactivate() <br>{ <br>if (m_uState != SVUIA_DEACTIVATE) <br>{ <br>m_psb-&gt;SetMenuSB(NULL, NULL, NULL); <br>m_psb-&gt;RemoveMenusSB(m_cmCur); <br>DestroyMenu(m_cmCur.Detach()); <br>m_uState = SVUIA_DEACTIVATE; <br>} <br> <br>return TRUE; <br>} <br> <br>//***************************************************************************** <br>// <br>// CSFView::OnCommand <br>// <br>// Purpose: <br>// <br>//       handle the WM_COMMAND sent by the explorer to the view <br>// <br>// Comments: <br>// <br>//***************************************************************************** <br> <br>void CSFView::OnCommand(IContextMenu *pcm, WPARAM wParam, LPARAM lParam) <br>{ <br>if (!pcm) <br>{ <br>pcm = m_pcmSel; <br>} <br> <br>if (pcm) <br>{ <br>pcm-&gt;AddRef(); <br>} <br>CEnsureRelease erContext(pcm); <br> <br>int idCmd = GET_WM_COMMAND_ID(wParam, lParam); <br>DWORD dwStyle; <br> <br>switch (idCmd) <br>{ <br> <br>    // Set the FOLDERSETTINGS for this view <br> <br>case IDC_VIEW_ICON + FCIDM_SHVIEWFIRST: <br>dwStyle = LVS_ICON; <br>m_fs.ViewMode = FVM_ICON; <br>goto SetStyle; <br> <br>case IDC_VIEW_SMALLICON + FCIDM_SHVIEWFIRST: <br>dwStyle = LVS_SMALLICON; <br>m_fs.ViewMode = FVM_SMALLICON; <br>goto SetStyle; <br> <br>case IDC_VIEW_LIST + FCIDM_SHVIEWFIRST: <br>dwStyle = LVS_LIST; <br>m_fs.ViewMode = FVM_LIST; <br>goto SetStyle; <br> <br>case IDC_VIEW_DETAILS + FCIDM_SHVIEWFIRST: <br>dwStyle = LVS_REPORT; <br>m_fs.ViewMode = FVM_DETAILS; <br>goto SetStyle; <br> <br>// set the style of the Listview accordingly <br>SetStyle: <br>m_cView.SetStyle(dwStyle, LVS_TYPEMASK); <br>CheckToolbar(); <br>break; <br> <br>// handle the Copy operation <br>case IDC_EDIT_COPY + FCIDM_SHVIEWFIRST: <br>{ <br>LPDATAOBJECT pdtobj; <br>if (!m_cView.OleInited() <br>|| FAILED(m_cView.GetUIObjectFromItem(IID_IDataObject, (LPVOID*)&amp;pdtobj, <br>SVGIO_SELECTION))) <br>{ <br>MessageBeep(0); <br>break; <br>} <br>CEnsureRelease erData(pdtobj); <br> <br>OleSetClipboard(pdtobj); <br>break; <br>} <br> <br> <br>    // handle selection of items <br>case IDC_EDIT_SELALL + FCIDM_SHVIEWFIRST: <br>SetFocus(m_cView); <br>m_cView.SelAll(); <br>break; <br> <br>case IDC_EDIT_INVSEL + FCIDM_SHVIEWFIRST: <br>SetFocus(m_cView); <br>m_cView.InvSel(); <br>break; <br> <br>default: <br>if (idCmd&gt;=IDC_ARRANGE_BY &amp;&amp; idCmd&lt;IDC_ARRANGE_BY+MAX_COL) <br>{ <br>ColumnClick(idCmd - IDC_ARRANGE_BY); <br>} <br>else if (pcm &amp;&amp; idCmd&gt;=SFV_CONTEXT_FIRST &amp;&amp; idCmd&lt;=SFV_CONTEXT_LAST) <br>{ <br> <br>// invoke the context menu <br>CMINVOKECOMMANDINFO ici; <br> <br>ici.cbSize = sizeof(ici); <br>ici.fMask = 0; <br>ici.hwnd = m_hwndMain; <br>ici.lpVerb = MAKEINTRESOURCE(idCmd - SFV_CONTEXT_FIRST); <br>ici.lpParameters = NULL; <br>ici.lpDirectory = NULL; <br>ici.nShow = SW_SHOWNORMAL; <br> <br>pcm-&gt;InvokeCommand(&amp;ici); <br>} <br>break; <br>} <br>} <br> <br> <br>IContextMenu * CSFView::GetSelContextMenu() <br>{ <br>if (!m_pcmSel) <br>{ <br>if (FAILED(m_cView.GetUIObjectFromItem(IID_IContextMenu, (LPVOID *)&amp;m_pcmSel, <br>SVGIO_SELECTION))) <br>{ <br>m_pcmSel = NULL; <br>return(m_pcmSel); <br>} <br>} <br> <br>m_pcmSel-&gt;AddRef(); <br>return(m_pcmSel); <br>} <br> <br> <br>void CSFView::ReleaseSelContextMenu() <br>{ <br>if (m_pcmSel) <br>{ <br>m_pcmSel-&gt;Release(); <br>m_pcmSel = NULL; <br>} <br>} <br> <br> <br>void CSFView::InitFileMenu(HMENU hmInit) <br>{ <br>// <br>// Don't touch the file menu unless we have the focus. <br>// <br>if (m_uState != SVUIA_ACTIVATE_FOCUS) <br>{ <br>return; <br>} <br> <br>BOOL bDeleteItems = FALSE; <br>int i; <br> <br>// Remove all the menu items we've added. <br>for (i = GetMenuItemCount(hmInit) - 1; i &gt;= 0; --i) <br>{ <br>if (!bDeleteItems) <br>{ <br>MENUITEMINFO mii; <br>mii.cbSize = sizeof(mii); <br>mii.fMask = MIIM_ID; <br>mii.cch = 0;     // just in case <br> <br>if (GetMenuItemInfo(hmInit, i, TRUE, &amp;mii)) <br>{ <br>if (mii.wID&gt;=SFV_CONTEXT_FIRST &amp;&amp; mii.wID&lt;=SFV_CONTEXT_LAST) <br>{ <br>bDeleteItems = TRUE; <br>} <br>} <br>} <br> <br>if (bDeleteItems) <br>{ <br>DeleteMenu(hmInit, i, MF_BYPOSITION); <br>} <br>} <br> <br>// Let the object add the separator. <br>if (CSFViewDlg::IsMenuSeparator(hmInit, 0)) <br>{ <br>DeleteMenu(hmInit, 0, MF_BYPOSITION); <br>} <br> <br>// <br>// Now add item specific commands to the menu <br>// This is done by seeing if we already have a context menu <br>// object for our selection.  If not we generate it now. <br>// <br>IContextMenu *pcmSel = GetSelContextMenu(); <br>if (pcmSel) <br>{ <br>pcmSel-&gt;QueryContextMenu(hmInit, 0, SFV_CONTEXT_FIRST, <br>SFV_CONTEXT_LAST, CMF_DVFILE); <br>pcmSel-&gt;Release(); <br>} <br> <br>// Note that the SelContextMenu stays around until the selection changes or we <br>// close the window, but it doesn't really matter that much <br>} <br> <br> <br>void CSFView::InitEditMenu(HMENU hmInit) <br>{ <br>ULONG dwAttr = SFGAO_CANCOPY; <br>UINT uFlags = (m_cView.OleInited() <br>&amp;&amp; SUCCEEDED(m_cView.GetAttributesFromItem(&amp;dwAttr, SVGIO_SELECTION)) <br>&amp;&amp; (dwAttr &amp; SFGAO_CANCOPY)) ? MF_ENABLED : MF_GRAYED; <br> <br>EnableMenuItem(hmInit, IDC_EDIT_COPY + FCIDM_SHVIEWFIRST, uFlags | MF_BYCOMMAND); <br>} <br> <br> <br>void CSFView::InitViewMenu(HMENU hmInit) <br>{ <br>int iCurViewMenuItem = GetMenuIDFromViewMode() + FCIDM_SHVIEWFIRST; <br>UINT uEnable; <br> <br>CheckMenuRadioItem(hmInit, IDC_VIEW_ICON, IDC_VIEW_DETAILS, <br>iCurViewMenuItem, MF_BYCOMMAND | MF_CHECKED); <br> <br>uEnable = (iCurViewMenuItem==IDC_VIEW_LIST+FCIDM_SHVIEWFIRST  <br>|| iCurViewMenuItem==IDC_VIEW_DETAILS+FCIDM_SHVIEWFIRST) ? <br>(MF_GRAYED | MF_BYCOMMAND)  :  (MF_ENABLED | MF_BYCOMMAND); <br>uEnable = MF_GRAYED | MF_BYCOMMAND; <br> <br>EnableMenuItem(hmInit, IDC_ARRANGE_GRID + FCIDM_SHVIEWFIRST, uEnable); <br>EnableMenuItem(hmInit, IDC_ARRANGE_AUTO + FCIDM_SHVIEWFIRST, uEnable); <br>CheckMenuItem(hmInit, IDC_ARRANGE_AUTO + FCIDM_SHVIEWFIRST, <br>((uEnable == (MF_ENABLED | MF_BYCOMMAND)) &amp;&amp; (m_fs.fFlags &amp; FWF_AUTOARRANGE)) <br>? MF_CHECKED : MF_UNCHECKED); <br>} <br> <br> <br>//***************************************************************************** <br>// <br>// CSFView::OnInitMenuPopup <br>// <br>// Purpose: <br>// <br>//    handle the WM_INITMENUPOPUP message received by CSFViewDlg <br>// <br>// <br>//***************************************************************************** <br>BOOL CSFView::OnInitMenuPopup(HMENU hmInit, int nIndex, BOOL fSystemMenu) <br>{ <br>if (!(HMENU)m_cmCur) <br>{ <br>return(TRUE); <br>} <br> <br>MENUITEMINFO mii; <br>mii.cbSize = sizeof(MENUITEMINFO); <br>mii.fMask = MIIM_SUBMENU|MIIM_ID; <br>mii.cch = 0;     // just in case <br> <br>if (!GetMenuItemInfo(m_cmCur, nIndex, TRUE, &amp;mii) || mii.hSubMenu!=hmInit) <br>{ <br>return(TRUE); <br>} <br> <br>switch (mii.wID) <br>{ <br>case FCIDM_MENU_FILE: <br>InitFileMenu(hmInit); <br>break; <br> <br>case FCIDM_MENU_EDIT: <br>InitEditMenu(hmInit); <br>break; <br> <br>case FCIDM_MENU_VIEW: <br>InitViewMenu(hmInit); <br>break; <br> <br>default: <br>return 1L; <br>} <br> <br>return 0L; <br>} <br> <br> <br>int _FindIt(const UINT *puFirst, UINT uFind, UINT uStep, int cCount) <br>{ <br>LPBYTE pbFirst = (LPBYTE)puFirst; <br> <br>for (--cCount, pbFirst+=cCount*uStep; cCount&gt;=0; --cCount, pbFirst-=uStep) <br>{ <br>if (*(UINT *)pbFirst == uFind) <br>{ <br>break; <br>} <br>} <br> <br>return(cCount); <br>} <br> <br> <br>const struct <br>{ <br>UINT idCmd; <br>UINT idStr; <br>UINT idTT; <br>} c_idTbl[] = <br>{ <br>IDC_VIEW_ICON, IDS_VIEW_ICON, IDS_TT_VIEW_ICON, <br>IDC_VIEW_SMALLICON, IDS_VIEW_SMALLICON, IDS_TT_VIEW_SMALLICON, <br>IDC_VIEW_LIST, IDS_VIEW_LIST, IDS_TT_VIEW_LIST, <br>IDC_VIEW_DETAILS, IDS_VIEW_DETAILS, IDS_TT_VIEW_DETAILS, <br>IDC_EDIT_COPY, IDS_EDIT_COPY, IDS_TT_EDIT_COPY, <br>IDC_EDIT_SELALL, IDS_EDIT_SELALL, 0, <br>IDC_EDIT_INVSEL, IDS_EDIT_INVSEL, 0, <br>IDC_ARRANGE_GRID, IDS_ARRANGE_GRID, 0, <br>IDC_ARRANGE_AUTO, IDS_ARRANGE_AUTO, 0, <br>} ; <br> <br> <br>void CSFView::GetCommandHelpText(UINT idCmd, LPSTR pszText, UINT cchText, BOOL bToolTip) <br>{ <br>*pszText = 0; <br> <br>if (idCmd&gt;=SFV_CONTEXT_FIRST &amp;&amp; idCmd&lt;=SFV_CONTEXT_LAST &amp;&amp; m_pcmSel) <br>{ <br>if (bToolTip) <br>{ <br>return; <br>} <br> <br>m_pcmSel-&gt;GetCommandString(idCmd - SFV_CONTEXT_FIRST, GCS_HELPTEXT, NULL, <br>pszText, cchText); <br>} <br>else if (idCmd&gt;=IDC_ARRANGE_BY &amp;&amp; idCmd&lt;IDC_ARRANGE_BY+MAX_COL) <br>{ <br>if (bToolTip) <br>{ <br>return; <br>} <br> <br>GetArrangeText(idCmd-IDC_ARRANGE_BY, IDS_BYCOL_HELP_FMT, pszText, cchText); <br>} <br>else <br>{ <br>int iid = _FindIt(&amp;c_idTbl[0].idCmd, idCmd-FCIDM_SHVIEWFIRST, sizeof(c_idTbl[0]), <br>ARRAYSIZE(c_idTbl)); <br>if (iid &gt;= 0) <br>{ <br>LoadString(g_ThisDll.GetInstance(), <br>bToolTip ? c_idTbl[iid].idTT : c_idTbl[iid].idStr, pszText, cchText); <br>} <br>} <br>} <br> <br> <br>LRESULT CSFView::OnMenuSelect(UINT idCmd, UINT uFlags, HMENU hmenu) <br>{ <br>// If we dismissed the menu restore our status bar... <br>if (!hmenu &amp;&amp; LOWORD(uFlags)==0xffff) <br>{ <br>m_psb-&gt;SendControlMsg(FCW_STATUS, SB_SIMPLE, 0, 0L, NULL); <br>return 0L; <br>} <br> <br>if (uFlags &amp; (MF_SYSMENU | MF_SEPARATOR)) <br>{ <br>return 0L; <br>} <br> <br>char szHelpText[80 + 2*MAX_PATH]; <br>szHelpText[0] = 0;   // in case of failures below <br> <br>if (uFlags &amp; MF_POPUP) <br>{ <br>MENUITEMINFO miiSubMenu; <br> <br>miiSubMenu.cbSize = sizeof(MENUITEMINFO); <br>miiSubMenu.fMask = MIIM_ID; <br>miiSubMenu.cch = 0;     // just in case <br> <br>if (!GetMenuItemInfo(hmenu, idCmd, TRUE, &amp;miiSubMenu)) <br>{ <br>return 0; <br>} <br> <br>// Change the parameters to simulate a "normal" menu item <br>idCmd = miiSubMenu.wID; <br>uFlags &amp;= ~MF_POPUP; <br>} <br> <br>GetCommandHelpText(idCmd, szHelpText, sizeof(szHelpText), FALSE); <br>m_psb-&gt;SendControlMsg(FCW_STATUS, SB_SETTEXT, SBT_NOBORDERS | 255, <br>(LPARAM)szHelpText, NULL); <br> <br>m_psb-&gt;SendControlMsg(FCW_STATUS, SB_SIMPLE, 1, 0L, NULL); <br> <br>return 0; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

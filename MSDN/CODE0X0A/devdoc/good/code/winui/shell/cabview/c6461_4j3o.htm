<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VIEW.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6504"></a>VIEW.CPP</h2>
<pre><code>//******************************************************************************************* <br>// <br>// Filename : View.cpp <br>// <br>//Implementation file for CCabView <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation. All rights reserved <br>// <br>//******************************************************************************************* <br> <br> <br>#include "pch.h" <br> <br>#include "thisdll.h" <br> <br>#include "resource.h" <br> <br>#include "folder.h" <br>#include "view.h" <br>#include "os.h" <br> <br>#include "unknown.h" <br> <br>class CCabView : public CUnknown, public IShellFolderViewCallback <br>{ <br>public: <br>CCabView() {} <br>virtual ~CCabView(); <br> <br>// *** IUnknown methods *** <br>STDMETHODIMP QueryInterface(REFIID riid, LPVOID * ppvObj); <br>STDMETHODIMP_(ULONG) AddRef(); <br>STDMETHODIMP_(ULONG) Release(); <br> <br>// *** IShellFolderViewCallback methods *** <br>STDMETHODIMP Message(UINT uMsg, WPARAM wParam, LPARAM lParam); <br> <br>private: <br>HRESULT GetDetailsOf(UINT iColumn, SFVCB_GETDETAILSOF_DATA* lpDetails); <br>} ; <br> <br> <br>CCabView::~CCabView() <br>{ <br>} <br> <br> <br>STDMETHODIMP CCabView::QueryInterface(REFIID riid, LPVOID * ppvObj) <br>{ <br>static const IID *apiid[] = { &amp;IID_IShellFolderViewCallback, NULL }; <br>LPUNKNOWN aobj[] = { (IShellFolderViewCallback *)this }; <br> <br>return(QIHelper(riid, ppvObj, apiid, aobj)); <br>} <br> <br> <br>STDMETHODIMP_(ULONG) CCabView::AddRef() <br>{ <br>return(AddRefHelper()); <br>} <br> <br> <br>STDMETHODIMP_(ULONG) CCabView::Release() <br>{ <br>return(ReleaseHelper()); <br>} <br> <br> <br>STDMETHODIMP CCabView::Message(UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>switch (uMsg) <br>{ <br>HANDLE_SFVCB_MSG(SFVCB_GETDETAILSOF, GetDetailsOf); <br> <br>default: <br>return(E_NOTIMPL); <br>} <br> <br>return(S_OK); <br>} <br> <br> <br>struct _CVCOLINFO <br>{ <br>UINT iColumn; <br>UINT iTitle; <br>UINT cchCol; <br>UINT iFmt; <br>} s_aCVColInfo[] = { <br>    {CV_COL_NAME,     IDS_CV_COL_NAME,     20, LVCFMT_LEFT}, <br>    {CV_COL_SIZE,     IDS_CV_COL_SIZE,     10, LVCFMT_RIGHT}, <br>    {CV_COL_TYPE,     IDS_CV_COL_TYPE,     20, LVCFMT_LEFT}, <br>    {CV_COL_MODIFIED, IDS_CV_COL_MODIFIED, 20, LVCFMT_LEFT}, <br>}; <br> <br>HRESULT CCabView::GetDetailsOf(UINT iColumn, SFVCB_GETDETAILSOF_DATA* lpDetails) <br>{ <br>LPCITEMIDLIST pidl = lpDetails-&gt;pidl; <br>LPCABITEM pit = (LPCABITEM)pidl; <br> <br>if (iColumn &gt;= CV_COL_MAX) <br>{ <br>return(E_NOTIMPL); <br>} <br> <br>lpDetails-&gt;str.uType = STRRET_CSTR; <br>lpDetails-&gt;str.cStr[0] = '\0'; <br> <br>if (!pit) <br>{ <br>LoadString(g_ThisDll.GetInstance(), s_aCVColInfo[iColumn].iTitle, <br>lpDetails-&gt;str.cStr, sizeof(lpDetails-&gt;str.cStr)); <br>lpDetails-&gt;fmt = s_aCVColInfo[iColumn].iFmt; <br>lpDetails-&gt;cChar = s_aCVColInfo[iColumn].cchCol; <br>lpDetails-&gt;lParamSort = iColumn; <br>return S_OK; <br>} <br> <br>switch (iColumn) <br>{ <br>case CV_COL_NAME: <br>CCabFolder::GetNameOf(pit, &amp;lpDetails-&gt;str); <br>break; <br> <br>case CV_COL_SIZE: <br>{ <br>    char szOrder[10]; <br> <br>    LoadString(g_ThisDll.GetInstance(), IDS_ORDERKB, szOrder, sizeof(szOrder)); <br>    wsprintf(lpDetails-&gt;str.cStr, szOrder, (pit-&gt;dwFileSize + 1023) / 1024); <br>break; <br>} <br> <br>case CV_COL_TYPE: <br>CCabFolder::GetTypeOf(pit, &amp;lpDetails-&gt;str); <br>break; <br> <br>case CV_COL_MODIFIED: <br>CFileTime::DateTimeToString(pit-&gt;uFileDate, pit-&gt;uFileTime, <br>lpDetails-&gt;str.cStr); <br>break; <br>} <br> <br>return(S_OK); <br>} <br> <br> <br>HRESULT CabView_CreateCallback(IShellFolderViewCallback **ppcb) <br>{ <br>*ppcb = NULL; <br> <br>CCabView *pcb = new CCabView; <br> <br>if (!pcb) <br>{ <br>return(E_OUTOFMEMORY); <br>} <br> <br>//  #pragma message("Make 1 the initial refcount in CUnknown") <br>pcb-&gt;AddRef(); <br> <br>*ppcb = (IShellFolderViewCallback *)pcb; <br>return(NOERROR); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

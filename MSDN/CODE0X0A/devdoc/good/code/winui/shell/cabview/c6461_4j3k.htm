<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>THISDLL.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6500"></a>THISDLL.H</h2>
<pre><code>//******************************************************************************************* <br>// <br>// Filename : ThisDll.h <br>// <br>//Generic OLE header file  <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation. All rights reserved <br>// <br>//******************************************************************************************* <br> <br> <br> <br>#ifndef _THISDLL_H_ <br>#define _THISDLL_H_ <br> <br> <br> <br>class CWaitCursor <br>{ <br>public: <br>CWaitCursor() {m_cOld=SetCursor(LoadCursor(NULL, IDC_WAIT));} <br>~CWaitCursor() {SetCursor(m_cOld);} <br> <br>private: <br>HCURSOR m_cOld; <br>} ; <br> <br>class CRefCount <br>{ <br>public: <br>CRefCount() : m_cRef(0) {}; <br> <br>UINT AddRef()  {return(++m_cRef);} <br>UINT Release() {return(--m_cRef);} <br>UINT GetRef()  {return(  m_cRef);} <br> <br>private: <br>UINT m_cRef; <br> <br>} ; <br> <br>class CThisDll <br>{ <br>public: <br>CThisDll() { <br>        m_hInst=NULL; <br>} <br>    // Make no destructor for global classes (requires CRT stuff) <br> <br>void SetInstance(HINSTANCE hInst) {m_hInst=hInst;} <br>HINSTANCE GetInstance() {return(m_hInst);} <br> <br>CRefCount m_cRef; <br>CRefCount m_cLock; <br> <br>private: <br>HINSTANCEm_hInst; <br>} ; <br> <br>extern CThisDll g_ThisDll; <br> <br>class CRefDll <br>{ <br>public: <br>CRefDll()  {g_ThisDll.m_cRef.AddRef ();} <br>~CRefDll() {g_ThisDll.m_cRef.Release();} <br>} ; <br> <br>extern HRESULT CreateInstance(REFIID riid, LPVOID *ppvObj); <br> <br>class CSafeMalloc <br>{ <br>public: <br>    CSafeMalloc() <br>    { <br>        if (!SUCCEEDED(SHGetMalloc(&amp;m_ShIMalloc))) <br>        { <br>            m_ShIMalloc = NULL; <br>        } <br>    } <br>    ~CSafeMalloc() {if (m_ShIMalloc) m_ShIMalloc-&gt;Release();} <br> <br>    LPVOID Alloc(UINT cb) {return(m_ShIMalloc ? m_ShIMalloc-&gt;Alloc(cb) : NULL);} <br>    void Free(LPVOID pv) {if (m_ShIMalloc) m_ShIMalloc-&gt;Free(pv);} <br> <br>private: <br>    IMalloc* m_ShIMalloc; <br>} ; <br> <br>#endif// _THISDLL_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

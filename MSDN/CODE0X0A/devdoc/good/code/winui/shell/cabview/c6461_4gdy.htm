<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SFVWND.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6496"></a>SFVWND.H</h2>
<pre><code>//******************************************************************************************* <br>// <br>// Filename : SFVWnd.h <br>// <br>//Definitions of CListView, CSFViewDlg, CAccelerator, CSFView <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation. All rights reserved <br>// <br>//******************************************************************************************* <br> <br> <br>#ifndef _SFVWnd_H_ <br>#define _SFVWnd_H_ <br> <br>#include "ThisDll.H" <br> <br>#include "SFView.H" <br> <br>#include "XIcon.H" <br>#include "Dlg.H" <br>#include "Unknown.H" <br> <br>#define IDC_ARRANGE_BY (FCIDM_SHVIEWFIRST + 0x100) <br>#define MAX_COL 0x20 <br> <br>#define SFV_CONTEXT_FIRST (FCIDM_SHVIEWFIRST + 0x1000) <br>#define SFV_CONTEXT_LAST (FCIDM_SHVIEWFIRST + 0x2000) <br> <br>BOOL StrRetToStr(LPSTR szOut, UINT uszOut, LPSTRRET pStrRet, LPCITEMIDLIST pidl); <br> <br>class CListView <br>{ <br>public: <br>CListView() {} <br>~CListView() {} <br> <br>operator HWND() const {return(m_hwndList);} <br> <br>void Init(HWND hwndList, HWND hwndLB, UINT idiDef) <br>{ <br>m_hwndList = hwndList; <br> <br>m_cxi.Init(hwndLB, idiDef); <br> <br>ListView_SetImageList(hwndList, m_cxi.GetIML(TRUE), LVSIL_NORMAL); <br>ListView_SetImageList(hwndList, m_cxi.GetIML(FALSE), LVSIL_SMALL); <br>} <br> <br>int InsertItem(LV_ITEM *pItem) <br>{ <br>return(ListView_InsertItem(m_hwndList, pItem)); <br>} <br> <br>void DeleteAllItems() {ListView_DeleteAllItems(m_hwndList);} <br> <br>enum <br>{ <br>AI_LARGE = CXIcon::AI_LARGE, <br>AI_SMALL = CXIcon::AI_SMALL, <br>} ; <br> <br>int GetIcon(IShellFolder *psf, LPCITEMIDLIST pidl) <br>{ <br>return(m_cxi.GetIcon(psf, pidl)); <br>} <br> <br>private: <br>HWND m_hwndList; <br>CXIcon m_cxi; <br>} ; <br> <br> <br>class CSFViewDlg : public CDlg <br>{ <br>public: <br>CSFViewDlg(class CSFView *psfv) : m_psfv(psfv), m_hrOLE(E_UNEXPECTED) <br>{ <br>m_hDlg = NULL; <br>} <br>~CSFViewDlg() {} <br> <br>operator HWND() const {return(m_hDlg);} <br> <br>int AddObject(LPCITEMIDLIST pidl); <br>void DeleteAllItems() {m_cList.DeleteAllItems();} <br> <br>BOOL DestroyWindow() {BOOL bRet=::DestroyWindow(m_hDlg); m_hDlg = NULL; return(bRet);} <br> <br>void SetStyle(DWORD dwAdd, DWORD dwRemove) <br>{ <br>SetWindowLong(m_cList, GWL_STYLE, dwAdd | <br>(GetWindowStyle(m_cList) &amp; ~dwRemove)); <br>} <br> <br>void SelAll() <br>{ <br>ListView_SetItemState(m_cList, -1, LVIS_SELECTED, LVIS_SELECTED); <br>} <br> <br>void InvSel() <br>{ <br>int iItem = -1; <br>while ((iItem=ListView_GetNextItem(m_cList, iItem, 0)) != -1) <br>{ <br>UINT flag; <br> <br>// flip the selection bit on each item <br>flag = ListView_GetItemState(m_cList, iItem, LVIS_SELECTED); <br>flag ^= LVNI_SELECTED; <br>ListView_SetItemState(m_cList, iItem, flag, LVIS_SELECTED); <br>} <br>} <br> <br>UINT CharWidth(); <br> <br>BOOL GetColumn(int i, LV_COLUMN *pcol) {return(ListView_GetColumn(m_cList, i, pcol));} <br>BOOL SetColumn(int i, LV_COLUMN *pcol) {return(ListView_SetColumn(m_cList, i, pcol));} <br>UINT InsertColumn(int i, LV_COLUMN *pcol) {return(ListView_InsertColumn(m_cList, i, pcol));} <br> <br>void SortItems(PFNDPACOMPARE pfnCmp) {ListView_SortItems(m_cList, pfnCmp, m_psfv);} <br> <br>static BOOL IsMenuSeparator(HMENU hm, int i); <br> <br>HRESULT GetUIObjectFromItem(REFIID riid, LPVOID * ppv, UINT uItem); <br>HRESULT GetAttributesFromItem(ULONG *pdwAttr, UINT uItem); <br> <br>BOOL OleInited() {return(SUCCEEDED(m_hrOLE));} <br> <br>private: <br>virtual BOOL RealDlgProc(UINT uMsg, WPARAM wParam, LPARAM lParam); <br> <br>UINT GetItemPIDLS(LPCITEMIDLIST apidl[], UINT cItemMax, UINT uItem); <br>HRESULT GetItemObjects(LPCITEMIDLIST **ppidl, UINT uItem); <br> <br>LPCITEMIDLIST GetPIDL(int iItem); <br> <br>void InitDialog(); <br>LRESULT BeginDrag(); <br>BOOL Notify(LPNMHDR pNotify); <br>    void ContextMenu(DWORD dwPos, BOOL bDoDefault=FALSE); <br> <br> <br>CListView m_cList; <br>HRESULT m_hrOLE; <br> <br>class CSFView *m_psfv; <br>} ; <br> <br> <br>struct SFSTATE <br>{ <br>LPARAM lParamSort; <br>} ; <br> <br> <br>class CAccelerator <br>{ <br>public: <br>CAccelerator(UINT uID) <br>{ <br>m_hAccel = LoadAccelerators(g_ThisDll.GetInstance(), MAKEINTRESOURCE(uID)); <br>} <br> <br>int TranslateAccelerator(HWND hwnd, LPMSG pmsg) <br>{ <br>if (!m_hAccel) <br>{ <br>return(FALSE); <br>} <br> <br>return(::TranslateAccelerator(hwnd, m_hAccel, pmsg)); <br>} <br> <br>private: <br>HACCEL m_hAccel; <br>} ; <br> <br>// <br>// CSFView - IShellView implementation <br>// <br> <br>class CSFView : public CUnknown, public IShellView <br>{ <br>public: <br>CSFView(LPSHELLFOLDER psf, IShellFolderViewCallback *psfvcb); <br>virtual ~CSFView(); <br> <br>STDMETHODIMP QueryInterface(REFIID riid, LPVOID * ppvObj); <br>STDMETHODIMP_(ULONG) AddRef(); <br>STDMETHODIMP_(ULONG) Release(); <br> <br>// *** IOleWindow methods *** <br>STDMETHODIMP GetWindow(HWND * lphwnd); <br>STDMETHODIMP ContextSensitiveHelp(BOOL fEnterMode); <br> <br>// *** IShellView methods *** <br>STDMETHODIMP TranslateAccelerator(LPMSG lpmsg); <br>STDMETHODIMP EnableModeless(BOOL fEnable); <br>STDMETHODIMP UIActivate(UINT uState); <br>STDMETHODIMP Refresh(); <br> <br>STDMETHODIMP CreateViewWindow(IShellView  *lpPrevView, <br>                LPCFOLDERSETTINGS lpfs, IShellBrowser  * psb, <br>                RECT * prcView, HWND  *phWnd); <br>STDMETHODIMP DestroyViewWindow(); <br>STDMETHODIMP GetCurrentInfo(LPFOLDERSETTINGS lpfs); <br>STDMETHODIMP AddPropertySheetPages(DWORD dwReserved, <br>                LPFNADDPROPSHEETPAGE lpfn, LPARAM lparam); <br>STDMETHODIMP SaveViewState(); <br>STDMETHODIMP SelectItem(LPCITEMIDLIST pidlItem, UINT uFlags); <br>STDMETHODIMP GetItemObject(UINT uItem, REFIID riid, <br>                LPVOID *ppv); <br> <br>private: <br>static int CALLBACK CSFView::CompareIDs(LPVOID p1, LPVOID p2, LPARAM lParam); <br> <br>void AddColumns(); <br>BOOL SaveColumns(LPSTREAM pstm); <br>void RestoreColumns(LPSTREAM pstm, int nCols); <br>void RestoreViewState(); <br> <br>void ColumnClick(int iCol) <br>{ <br>m_sfState.lParamSort = (LPARAM)DPA_GetPtr(m_aParamSort, iCol); <br>        m_cView.SortItems(CompareIDs); <br>} <br> <br>HRESULT CallCB(UINT uMsg, WPARAM wParam, LPARAM lParam) <br>{ <br>return(m_psfvcb ? m_psfvcb-&gt;Message(uMsg, wParam, lParam) : E_NOTIMPL); <br>} <br> <br>int GetMenuIDFromViewMode(); <br>BOOL IsInCommDlg() {return(m_pCDB != NULL);} <br>HRESULT IncludeObject(LPCITEMIDLIST pidl) <br>{ <br>return(IsInCommDlg() ? m_pCDB-&gt;IncludeObject(this, pidl) : S_OK); <br>} <br>HRESULT OnDefaultCommand() <br>{ <br>return(IsInCommDlg() ? m_pCDB-&gt;OnDefaultCommand(this) : S_FALSE); <br>} <br>HRESULT OnStateChange(UINT uFlags) <br>{ <br>return(IsInCommDlg() ? m_pCDB-&gt;OnStateChange(this, uFlags) : S_FALSE); <br>} <br> <br>void InitFileMenu(HMENU hmInit); <br>void InitEditMenu(HMENU hmInit); <br>void InitViewMenu(HMENU hmInit); <br>int AddObject(LPCITEMIDLIST pidl); <br> <br>HRESULT FillList(BOOL bInteractive); <br>BOOL ShowAllObjects() {return(TRUE);} <br> <br>void MergeArrangeMenu(HMENU hmView); <br>void MergeViewMenu(HMENU hmenu, HMENU hmMerge); <br>BOOL OnActivate(UINT uState); <br>BOOL OnDeactivate(); <br> <br>IContextMenu * GetSelContextMenu(); <br>void ReleaseSelContextMenu(); <br> <br>BOOL OnInitMenuPopup(HMENU hmInit, int nIndex, BOOL fSystemMenu); <br>void OnCommand(IContextMenu *pcm, WPARAM wParam, LPARAM lParam); <br> <br>void CheckToolbar(); <br>void MergeToolBar(); <br> <br>BOOL GetArrangeText(int iCol, UINT idFmt, LPSTR pszText, UINT cText); <br>void GetCommandHelpText(UINT id, LPSTR pszText, UINT cchText, BOOL bToolTip); <br>LRESULT OnMenuSelect(UINT idCmd, UINT uFlags, HMENU hmenu); <br> <br> <br>LPSHELLFOLDER m_psf;                       // ShellFolder pointer <br>ICommDlgBrowser *m_pCDB;                   // ICommdlgBrowser <br>IShellFolderViewCallback *m_psfvcb;        // pointer to ShellFolderView  <br>                                           // callback <br>CEnsureRelease m_erFolder;  <br>CEnsureRelease m_erCB; <br> <br>CSFViewDlg m_cView;                        //  ViewDlg which contains the <br>                                           //  listview in the right pane <br>HWND m_hwndMain; <br> <br>FOLDERSETTINGS m_fs; <br>IShellBrowser *m_psb; <br>SFSTATE m_sfState; <br> <br>CMenuTemp m_cmCur; <br>UINT m_uState; <br> <br>IContextMenu *m_pcmSel; <br> <br>HDPA m_aParamSort;                         // maintains a sorted list of  <br>                                           // items in a DPA <br> <br>CAccelerator m_cAccel; <br> <br>    CSafeMalloc m_cMalloc; <br> <br>friend class CSFViewDlg; <br>} ; <br> <br>#endif // _SFVWnd_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

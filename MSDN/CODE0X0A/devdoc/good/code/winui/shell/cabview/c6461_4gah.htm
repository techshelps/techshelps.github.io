<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICON.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6479"></a>ICON.CPP</h2>
<pre><code>//******************************************************************************************* <br>// <br>// Filename : Icon.cpp <br>// <br>//Implementation file for CCabItemIcon <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation. All rights reserved <br>// <br>//******************************************************************************************* <br> <br>#include "pch.h" <br> <br>#include "thisdll.h" <br> <br>#include "path.h" <br>#include "icon.h" <br> <br>// *** IUnknown methods *** <br>STDMETHODIMP CCabItemIcon::QueryInterface( <br>   REFIID riid,  <br>   LPVOID FAR* ppvObj) <br>{ <br>*ppvObj = NULL; <br> <br>LPUNKNOWN pObj; <br>  <br>if (riid == IID_IUnknown) <br>{ <br>pObj = (LPUNKNOWN)((IExtractIcon*)this);  <br>} <br>else if (riid == IID_IExtractIcon) <br>{ <br>pObj = (LPUNKNOWN)((IExtractIcon*)this);  <br>} <br>else <br>{ <br>   return(E_NOINTERFACE); <br>} <br> <br>pObj-&gt;AddRef(); <br>*ppvObj = (LPVOID)pObj; <br> <br>return(NOERROR); <br>} <br> <br> <br>STDMETHODIMP_(ULONG) CCabItemIcon::AddRef(void) <br>{ <br>return(m_cRef.AddRef()); <br>} <br> <br> <br>STDMETHODIMP_(ULONG) CCabItemIcon::Release(void) <br>{ <br>if (!m_cRef.Release()) <br>{ <br>   delete this; <br>return(0); <br>} <br> <br>return(m_cRef.GetRef()); <br>} <br> <br> <br>const char c_szCabViewLoc[] = "CABVIEW::"; <br> <br>// *** IExtractIcon methods *** <br>STDMETHODIMP CCabItemIcon::GetIconLocation( <br>UINT   uFlags, <br>LPSTR  szIconFile, <br>UINT   cchMax, <br>int   * piIndex, <br>UINT  * pwFlags) <br>{ <br>LPCSTR pszExt = PathFindExtension(m_szName); <br>if (!pszExt || !pszExt[0]) <br>{ <br>return(E_UNEXPECTED); <br>} <br> <br>char szClass[80]; <br>LONG lLen = sizeof(szClass); <br> <br>if (RegQueryValue(HKEY_CLASSES_ROOT, pszExt, szClass, &amp;lLen) != ERROR_SUCCESS) <br>{ <br>// This extension has no icon <br>return(E_UNEXPECTED); <br>} <br> <br>if (cchMax &lt; sizeof(c_szCabViewLoc) + lstrlen(pszExt)) <br>{ <br>return(E_INVALIDARG); <br>} <br> <br>lstrcpy(szIconFile, c_szCabViewLoc); <br>lstrcpy(szIconFile+(sizeof(c_szCabViewLoc)-1), pszExt); <br>CharUpper(szIconFile); <br> <br>*piIndex = uFlags&amp;GIL_OPENICON ? 1 : 0; <br>*pwFlags = GIL_PERCLASS | GIL_NOTFILENAME; <br> <br>return(NOERROR); <br>} <br> <br> <br>STDMETHODIMP CCabItemIcon::Extract( <br>LPCSTR   pszFile, <br>UINT nIconIndex, <br>HICON   *phiconLarge, <br>HICON   *phiconSmall, <br>UINT     nIconSize) <br>{ <br>UINT uFlags = SHGFI_ICON | SHGFI_USEFILEATTRIBUTES; <br> <br>switch (nIconIndex) <br>{ <br>case 0: <br>break; <br> <br>case 1: <br>uFlags |= SHGFI_OPENICON; <br>break; <br> <br>default: <br>return(E_INVALIDARG); <br>} <br> <br>char szExt[sizeof(c_szCabViewLoc) + 5]; <br> <br>lstrcpyn(szExt, pszFile, sizeof(szExt)); <br>szExt[sizeof(c_szCabViewLoc)-1] = '\0'; <br>if (lstrcmp(szExt, c_szCabViewLoc) != 0) <br>{ <br>return(E_INVALIDARG); <br>} <br> <br>lstrcpyn(szExt, pszFile+(sizeof(c_szCabViewLoc)-1), sizeof(szExt)); <br>LPSTR pszExt = PathFindExtension(m_szName); <br>if (lstrcmpi(szExt, pszExt) != 0) <br>{ <br>return(E_INVALIDARG); <br>} <br> <br>SHFILEINFO sfi; <br> <br>if (!SHGetFileInfo(m_szName, 0, &amp;sfi, sizeof(sfi), uFlags | SHGFI_LARGEICON)) <br>{ <br>return(E_UNEXPECTED); <br>} <br> <br>*phiconLarge = sfi.hIcon; <br> <br>if (SHGetFileInfo(m_szName, 0, &amp;sfi, sizeof(sfi), uFlags | SHGFI_SMALLICON)) <br>{ <br>*phiconSmall = sfi.hIcon; <br>} <br>else <br>{ <br>*phiconSmall = NULL; <br>} <br> <br>return(S_OK); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

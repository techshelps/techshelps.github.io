<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DPDA.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6473"></a>DPDA.H</h2>
<pre><code>//******************************************************************************************* <br>// <br>// Filename : Dpda.h <br>// <br>//Definitions of DPA routines <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation. All rights reserved <br>// <br>//******************************************************************************************* <br> <br>#ifndef _DPDA_H_ <br>#define _DPDA_H_ <br> <br> <br>#ifdef __cplusplus <br>extern "C" { <br>#endif <br> <br>// Dynamic pointer array  <br>typedef struct _DPA * HDPA;  <br> <br>HDPA   DPA_Create(int cItemGrow);  <br>HDPA   DPA_CreateEx(int cpGrow, HANDLE hheap);  <br>BOOL   DPA_Destroy(HDPA hdpa);  <br>HDPA   DPA_Clone(HDPA hdpa, HDPA hdpaNew);  <br>void *  DPA_GetPtr(HDPA hdpa, int i);  <br>int    DPA_GetPtrIndex(HDPA hdpa, LPVOID p);  <br>BOOL   DPA_Grow(HDPA pdpa, int cp);  <br>BOOL   DPA_SetPtr(HDPA hdpa, int i, LPVOID p);  <br>int    DPA_InsertPtr(HDPA hdpa, int i, LPVOID p);  <br>void * DPA_DeletePtr(HDPA hdpa, int i);  <br>BOOL   DPA_DeleteAllPtrs(HDPA hdpa);  <br>#define       DPA_GetPtrCount(hdpa)   (*(int *)(hdpa))  <br>#define       DPA_GetPtrPtr(hdpa)     (*((LPVOID * *)((BYTE *)(hdpa) + sizeof(int))))  <br>#define       DPA_FastGetPtr(hdpa, i) (DPA_GetPtrPtr(hdpa)[i])  <br> <br>typedef int (CALLBACK *PFNDPACOMPARE)(LPVOID p1, LPVOID p2, LPARAM lParam);  <br> <br>BOOL   DPA_Sort(HDPA hdpa, PFNDPACOMPARE pfnCompare, LPARAM lParam);  <br> <br>typedef struct _DSA * HDSA;                                             <br> <br>// Search array.  If DPAS_SORTED, then array is assumed to be sorted  <br>// according to pfnCompare, and binary search algorithm is used.  <br>// Otherwise, linear search is used.  <br>//  <br>// Searching starts at iStart (-1 to start search at beginning).  <br>//  <br>// DPAS_INSERTBEFORE/AFTER govern what happens if an exact match is not  <br>// found.  If neither are specified, this function returns -1 if no exact  <br>// match is found.  Otherwise, the index of the item before or after the  <br>// closest (including exact) match is returned.  <br>//  <br>// Search option flags  <br>//  <br>#define DPAS_SORTED             0x0001  <br>#define DPAS_INSERTBEFORE       0x0002  <br>#define DPAS_INSERTAFTER        0x0004  <br> <br>int DPA_Search(HDPA hdpa, LPVOID pFind, int iStart,  <br>                      PFNDPACOMPARE pfnCompare,  <br>                      LPARAM lParam, UINT options);  <br>#ifdef __cplusplus <br>} <br>#endif <br> <br>#endif // _DPDA_H_ <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

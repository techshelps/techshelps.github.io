<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEBUG.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6469"></a>DEBUG.C</h2>
<pre><code>//******************************************************************************************* <br>// <br>// Filename : debug.c <br>// <br>//Debug routines <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation. All rights reserved <br>// <br>//******************************************************************************************* <br> <br>#include "pch.h" <br> <br>#include "debug.h" <br> <br>#define DEBUG_BREAK        __try { _asm { int 3 } } __except (EXCEPTION_EXECUTE_HANDLER) {;} <br> <br>#ifdef DEBUG <br> <br>UINT g_fDebugMask = 0x00ff; <br> <br>UINT WINAPI SetDebugMask(UINT mask) <br>{ <br>    UINT wOld = g_fDebugMask; <br>    g_fDebugMask = mask; <br> <br>    return wOld; <br>} <br> <br>UINT WINAPI GetDebugMask() <br>{ <br>    return g_fDebugMask; <br>} <br> <br>void WINAPI AssertFailed(LPCSTR pszFile, int line) <br>{ <br>    LPCSTR psz; <br>    char ach[256]; <br>    static char szAssertFailed[] = "Assertion failed in %s on line %d\r\n"; <br> <br>    // Strip off path info from filename string, if present. <br>    // <br>    if (g_fDebugMask &amp; DM_ASSERT) <br>    { <br>        for (psz = pszFile + lstrlen(pszFile); psz != pszFile; psz=AnsiPrev(pszFile, psz)) <br>        { <br>            if ((AnsiPrev(pszFile, psz)!= (psz-2)) &amp;&amp; *(psz - 1) == '\\') <br>                break; <br>        } <br>        wsprintf(ach, szAssertFailed, psz, line); <br>        OutputDebugString(ach); <br> <br>DEBUG_BREAK <br>    } <br>} <br> <br>void _cdecl _AssertMsg(BOOL f, LPCSTR pszMsg, ...) <br>{ <br>    char ach[256]; <br> <br>    if (!f &amp;&amp; (g_fDebugMask &amp; DM_ASSERT)) <br>    { <br>        wvsprintf(ach, pszMsg, (LPVOID)(&amp;pszMsg + 1)); <br>        lstrcat(ach, "\r\n"); <br>        OutputDebugString(ach); <br>DEBUG_BREAK <br>    } <br>} <br> <br>void _cdecl _DebugMsg(UINT mask, LPCSTR pszMsg, ...) <br>{ <br>    char ach[2*MAX_PATH+40];  // Handles 2*largest path + slop for message <br> <br>    if (g_fDebugMask &amp; mask) <br>    { <br>        wvsprintf(ach, pszMsg, (LPVOID)(&amp;pszMsg + 1)); <br>        lstrcat(ach, "\r\n"); <br>        OutputDebugString(ach); <br>    } <br>} <br> <br>#endif // DEBUG </code></pre>
<p>&nbsp;</p></body>
</HTML>

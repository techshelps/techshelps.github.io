<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ENUM.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6474"></a>ENUM.CPP</h2>
<pre><code>//******************************************************************************************* <br>// <br>// Filename : Enum.cpp <br>// <br>//Implementation for CEnumCabObjs <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation. All rights reserved <br>// <br>//******************************************************************************************* <br> <br>#include "pch.h" <br> <br>#include "thisdll.h" <br>#include "enum.h" <br> <br>// *** IUnknown methods *** <br>STDMETHODIMP CEnumCabObjs::QueryInterface( <br>   REFIID riid,  <br>   LPVOID FAR* ppvObj) <br>{ <br>*ppvObj = NULL; <br> <br>LPUNKNOWN pObj; <br>  <br>if (riid == IID_IUnknown) <br>{ <br>pObj = (IUnknown*)((IEnumIDList*)this);  <br>} <br>else if (riid == IID_IEnumIDList) <br>{ <br>pObj = (IUnknown*)((IEnumIDList*)this);  <br>} <br>else <br>{ <br>   return(E_NOINTERFACE); <br>} <br> <br>pObj-&gt;AddRef(); <br>*ppvObj = pObj; <br> <br>return(NOERROR); <br>} <br> <br> <br>STDMETHODIMP_(ULONG) CEnumCabObjs::AddRef(void) <br>{ <br>return(m_cRef.AddRef()); <br>} <br> <br> <br>STDMETHODIMP_(ULONG) CEnumCabObjs::Release(void) <br>{ <br>if (!m_cRef.Release()) <br>{ <br>   delete this; <br>return(0); <br>} <br> <br>return(m_cRef.GetRef()); <br>} <br> <br> <br>// *** IEnumIDList methods *** <br>STDMETHODIMP CEnumCabObjs::Next(ULONG celt, <br>      LPITEMIDLIST *rgelt, <br>      ULONG *pceltFetched) <br>{ <br>*rgelt = NULL; <br>if (pceltFetched) <br>{ <br>*pceltFetched = 0; <br>} <br> <br>HRESULT hRes = m_pcfThis-&gt;InitItems(); <br>if (FAILED(hRes)) <br>{ <br>return(hRes); <br>} <br> <br>for ( ; ; ++m_iCount) <br>{ <br>if (m_iCount &gt;= m_pcfThis-&gt;m_lItems.GetCount()) <br>{ <br>return(S_FALSE); <br>} <br> <br>LPCABITEM pit = m_pcfThis-&gt;m_lItems[m_iCount]; <br> <br>if ((m_uFlags&amp;(SHCONTF_FOLDERS|SHCONTF_NONFOLDERS)) <br>!= (SHCONTF_FOLDERS|SHCONTF_NONFOLDERS)) <br>{ <br>DWORD gfInOut = SFGAO_FOLDER; <br>if (FAILED(m_pcfThis-&gt;GetAttributesOf(1, (LPCITEMIDLIST *)&amp;pit, &amp;gfInOut))) <br>{ <br>continue; <br>} <br>if (!(m_uFlags&amp;SHCONTF_FOLDERS) &amp;&amp; (gfInOut&amp;SFGAO_FOLDER)) <br>{ <br>continue; <br>} <br>if ((m_uFlags&amp;SHCONTF_FOLDERS) &amp;&amp; !(gfInOut&amp;SFGAO_FOLDER)) <br>{ <br>continue; <br>} <br>} <br> <br>if (!(m_uFlags&amp;SHCONTF_INCLUDEHIDDEN) <br>&amp;&amp; (pit-&gt;uFileAttribs&amp;(FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_SYSTEM))) <br>{ <br>continue; <br>} <br> <br>break; <br>} <br> <br>*rgelt = ILClone((LPCITEMIDLIST)m_pcfThis-&gt;m_lItems[m_iCount]); <br> <br>++m_iCount; <br> <br>if (*rgelt) <br>{ <br>if (pceltFetched) <br>{ <br>*pceltFetched = 1; <br>} <br> <br>return(S_OK); <br>} <br> <br>return(E_OUTOFMEMORY); <br>} <br> <br> <br>STDMETHODIMP CEnumCabObjs::Skip(ULONG celt) <br>{ <br>return(E_NOTIMPL); <br>} <br> <br> <br>STDMETHODIMP CEnumCabObjs::Reset() <br>{ <br>m_iCount = 0; <br> <br>return(NOERROR); <br>} <br> <br> <br>STDMETHODIMP CEnumCabObjs::Clone(IEnumIDList **ppenum) <br>{ <br>return(E_NOTIMPL); <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PATH.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6488"></a>PATH.H</h2>
<pre><code>//******************************************************************************************* <br>// <br>// Filename : Path.h <br>// <br>//Path APIs <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation. All rights reserved <br>// <br>//******************************************************************************************* <br> <br> <br>#ifndef _PATH_H_ <br>#define _PATH_H_ <br> <br>#ifdef __cplusplus <br>extern "C" { <br>#endif <br> <br> <br> <br>extern const TCHAR c_szStarDotStar[]; <br>extern const TCHAR c_szStar[]; <br>extern const TCHAR c_szSlash[]; <br>extern const TCHAR c_szNULL[]; <br> <br>#define DRIVEID(path)   ((path[0] - 'A') &amp; 31) <br>#define ARRAYSIZE(a)    (sizeof(a)/sizeof(a[0])) <br>#define SIZEOF(v)       sizeof(v) <br> <br> <br>BOOL   PathIsDotOrDotDot(LPTSTR pszDir); <br>BOOL   PathStripToRoot(LPTSTR pszRoot); <br>LPTSTR PathAddBackslash(LPTSTR lpszPath); <br>LPTSTR PathRemoveBackslash(LPTSTR lpszPath); <br>void   PathRemoveBlanks(LPTSTR lpszString); <br>BOOL   PathRemoveFileSpec(LPTSTR lpszPath); <br>LPTSTR PathFindFileName(LPCTSTR pPath); <br>BOOL   PathIsRoot(LPCTSTR lpszPath); <br>BOOL   PathIsRelative(LPCTSTR lpszPath); <br>BOOL   PathIsUNC(LPCTSTR lpsz); <br>BOOL   PathIsDirectory(LPCTSTR lpszPath); <br>BOOL   PathIsExe(LPCTSTR lpszPath); <br>int    PathGetDriveNumber(LPCTSTR lpszPath); <br>LPTSTR PathCombine(LPTSTR szDest, LPCTSTR lpszDir, LPCTSTR lpszFile); <br>BOOL   PathAppend(LPTSTR pPath, LPCTSTR pMore); <br>LPTSTR PathBuildRoot(LPTSTR szRoot, int iDrive); <br>int    PathCommonPrefix(LPCTSTR pszFile1, LPCTSTR pszFile2, LPTSTR achPath); <br>LPTSTR PathFindExtension(LPCTSTR pszPath); <br>BOOL   PathFileExists(LPCTSTR lpszPath); <br>BOOL   PathMatchSpec(LPCTSTR pszFile, LPCTSTR pszSpec); <br>BOOL   PathMakeUniqueName(LPTSTR pszUniqueName, UINT cchMax, LPCTSTR pszTemplate, LPCTSTR pszLongPlate, LPCTSTR pszDir); <br>LPTSTR PathGetArgs(LPCTSTR pszPath); <br>BOOL   PathGetShortName(LPCTSTR lpszLongName, LPTSTR lpszShortName, UINT cbShortName); <br>void   PathQuoteSpaces(LPTSTR lpsz); <br>void   PathUnquoteSpaces(LPTSTR lpsz); <br>BOOL   PathDirectoryExists(LPCTSTR lpszDir); <br> <br>#define PQD_NOSTRIPDOTS 0x00000001 <br>void   PathQualifyDef(LPTSTR psz, LPCTSTR szDefDir, DWORD dwFlags); <br>void   PathQualify(LPTSTR lpsz); <br> <br> <br>#define PRF_VERIFYEXISTS            0x0001 <br>#define PRF_TRYPROGRAMEXTENSIONS    (0x0002 | PRF_VERIFYEXISTS) <br>#define PRF_FIRSTDIRDEF             0x0004 <br>#define PRF_DONTFINDLNK             0x0008      // if PRF_TRYPROGRAMEXTENSIONS is specified <br> <br>int    PathResolve(LPTSTR lpszPath, LPCTSTR FAR dirs[], UINT fFlags); <br> <br> <br>LPTSTR PathGetNextComponent(LPCTSTR lpszPath, LPTSTR lpszComponent); <br>LPTSTR PathFindNextComponent(LPCTSTR lpszPath); <br>BOOL   PathIsSameRoot(LPCTSTR pszPath1, LPCTSTR pszPath2); <br> <br>// <br>//  Return codes from PathCleanupSpec.  Negative return values are <br>//  unrecoverable errors <br>// <br>#define PCS_FATAL           0x80000000 <br>#define PCS_REPLACEDCHAR    0x00000001 <br>#define PCS_REMOVEDCHAR     0x00000002 <br>#define PCS_TRUNCATED       0x00000004 <br>#define PCS_PATHTOOLONG     0x00000008  // Always combined with FATAL <br> <br>int    PathCleanupSpec(LPCTSTR pszDir, LPTSTR pszSpec); <br> <br>BOOL   PathCompactPath(HDC hDC, LPTSTR lpszPath, UINT dx); <br>void   PathSetDlgItemPath(HWND hDlg, int id, LPCTSTR pszPath); <br> <br>#define GCT_INVALID             0x0000 <br>#define GCT_LFNCHAR             0x0001 <br>#define GCT_SHORTCHAR           0x0002 <br>#define GCT_WILD                0x0004 <br>#define GCT_SEPERATOR           0x0008 <br>UINT PathGetCharType(TCHAR ch); <br> <br>void PathRemoveArgs(LPTSTR pszPath); <br>BOOL PathMakePretty(LPTSTR lpPath); <br> <br>BOOL PathIsFileSpec(LPCTSTR lpszPath); <br>BOOL PathIsLink(LPCTSTR szFile); <br> <br>BOOL PathRenameExtension(LPTSTR pszPath, LPCTSTR pszExt); <br> <br>int DriveType(int iDrive); <br> <br>//-------- drive type identification -------------- <br>// iDrive      drive index (0=A, 1=B, ...) <br>// <br>#define DRIVE_CDROM     5           // extended DriveType() types <br>#define DRIVE_RAMDRIVE  6 <br> <br>#define DRIVE_TYPE      0x000F      // type masek <br>#define DRIVE_SLOW      0x0010      // drive is on a slow link <br>#define DRIVE_LFN       0x0020      // drive supports LFNs <br>#define DRIVE_AUTORUN   0x0040      // drive has AutoRun.inf in root. <br>#define DRIVE_AUDIOCD   0x0080      // drive is a AudioCD <br>#define DRIVE_AUTOOPEN  0x0100      // should *always* auto open on insert <br>#define DRIVE_NETUNAVAIL 0x0200     // Network drive that is not available <br>#define DRIVE_SHELLOPEN  0x0400     // should auto open on insert, if shell has focus <br> <br>#define DriveTypeFlags(iDrive)      DriveType('A' + (iDrive)) <br>#define DriveIsSlow(iDrive)         (DriveTypeFlags(iDrive) &amp; DRIVE_SLOW) <br>#define DriveIsLFN(iDrive)          (DriveTypeFlags(iDrive) &amp; DRIVE_LFN) <br>#define DriveIsAutoRun(iDrive)      (DriveTypeFlags(iDrive) &amp; DRIVE_AUTORUN) <br>#define DriveIsAutoOpen(iDrive)     (DriveTypeFlags(iDrive) &amp; DRIVE_AUTOOPEN) <br>#define DriveIsShellOpen(iDrive)    (DriveTypeFlags(iDrive) &amp; DRIVE_SHELLOPEN) <br>#define DriveIsAudioCD(iDrive)      (DriveTypeFlags(iDrive) &amp; DRIVE_AUDIOCD) <br>#define DriveIsNetUnAvail(iDrive)   (DriveTypeFlags(iDrive) &amp; DRIVE_NETUNAVAIL) <br> <br>#define IsCDRomDrive(iDrive)        (DriveType(iDrive) == DRIVE_CDROM) <br>#define IsRamDrive(iDrive)          (DriveType(iDrive) == DRIVE_RAMDRIVE) <br>#define IsRemovableDrive(iDrive)    (DriveType(iDrive) == DRIVE_REMOVABLE) <br>#define IsRemoteDrive(iDrive)       (DriveType(iDrive) == DRIVE_REMOTE) <br> <br> <br>#ifdef __cplusplus <br>} <br>#endif <br> <br>#endif // _PATH_H_ </code></pre>
<p>&nbsp;</p></body>
</HTML>

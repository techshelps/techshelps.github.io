<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XICON.CPP</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6506"></a>XICON.CPP</h2>
<pre><code>//******************************************************************************************* <br>// <br>// Filename : XIcon.cpp <br>// <br>//Implementation file for CIconTemp and CXIcon <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation. All rights reserved <br>// <br>//******************************************************************************************* <br> <br>#include "Pch.H" <br> <br>#include "ThisDll.H" <br> <br>#include "Unknown.H" <br>#include "path.h" <br>#include "XIcon.H" <br> <br>class CIconTemp : public CObjTemp <br>{ <br>public: <br>CIconTemp() : CObjTemp() {} <br>CIconTemp(HICON hi) : CObjTemp() {Attach(hi);} <br>~CIconTemp() {if (m_hObj) DestroyIcon(Detach());} <br> <br>operator HICON() const {return((HICON)m_hObj);} <br> <br>HICON Attach(HICON hObjNew) {return((HICON)CObjTemp::Attach((HANDLE)hObjNew));} <br>HICON Detach() {return((HICON)CObjTemp::Detach());} <br>} ; <br> <br> <br>BOOL CXIcon::Init(HWND hwndLB, UINT idiDef) <br>{ <br>m_hwndLB = hwndLB; <br> <br>m_cimlLg.Create(GetSystemMetrics(SM_CXICON), GetSystemMetrics(SM_CYICON), 8); <br>m_cimlSm.Create(GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON), 8); <br> <br>HICON hIcon = LoadIcon(g_ThisDll.GetInstance(), MAKEINTRESOURCE(idiDef)); <br> <br>return(m_cimlLg &amp;&amp; m_cimlSm &amp;&amp; AddIcon(hIcon)&gt;=0); <br>} <br> <br> <br>UINT CXIcon::GetIDString(LPSTR pszIDString, UINT uIDLen, <br>LPCSTR szIconFile, int iIndex, UINT wFlags) <br>{ <br>static const char szIDFmt[] = "\"%s\" %d %08x"; <br>char szIDString[MAX_PATH + 2*sizeof(szIDFmt)]; <br> <br>int iRet = wsprintf(szIDString, szIDFmt, szIconFile, iIndex, wFlags); <br>lstrcpyn(pszIDString, szIDString, uIDLen); <br> <br>return(iRet + 1); <br>} <br> <br> <br>int CXIcon::GetCachedIndex(LPCSTR szIconFile, int iIndex, UINT wFlags) <br>{ <br>char szIDString[MAX_PATH*2]; <br>GetIDString(szIDString, sizeof(szIDString), szIconFile, iIndex, wFlags); <br>int iLB = ListBox_FindStringExact(m_hwndLB, -1, szIDString); <br> <br>if (iLB &lt; 0) <br>{ <br>return(-1); <br>} <br> <br>return(ListBox_GetItemData(m_hwndLB, iLB)); <br>} <br> <br> <br>int CXIcon::CacheIcons(HICON hiLarge, HICON hiSmall, <br>LPCSTR szIconFile, int iIndex, UINT wFlags) <br>{ <br>CIconTemp ciLarge(hiLarge); <br>CIconTemp ciSmall(hiSmall); <br> <br>if (!hiLarge || !hiSmall) <br>{ <br>return(-1); <br>} <br> <br>char szIDString[MAX_PATH*2]; <br>GetIDString(szIDString, sizeof(szIDString), szIconFile, iIndex, wFlags); <br>int iLB = ListBox_AddString(m_hwndLB, szIDString); <br> <br>if (iLB &lt; 0) <br>{ <br>return(-1); <br>} <br> <br>int iLarge = AddIcon(ciLarge, AI_LARGE); <br>if (iLarge &gt;= 0) <br>{ <br>int iSmall = AddIcon(ciSmall, AI_SMALL); <br>if (iSmall &gt;= 0) <br>{ <br>if (iLarge == iSmall) <br>{ <br>// Should always happen; <br>ListBox_SetItemData(m_hwndLB, iLB, iLarge); <br>return(iLarge); <br>} <br> <br>ImageList_Remove(m_cimlSm, iSmall); <br>} <br> <br>ImageList_Remove(m_cimlLg, iLarge); <br>} <br> <br> <br>ListBox_DeleteString(m_hwndLB, iLB); <br>return(-1); <br>} <br> <br> <br>HRESULT CXIcon::ExtractIcon(LPCSTR szIconFile, int iIndex, UINT wFlags, <br>HICON *phiconLarge, HICON *phiconSmall, DWORD dwSizes) <br>{ <br>return(E_NOTIMPL); <br>} <br> <br> <br>int CXIcon::GetIcon(IShellFolder *psf, LPCITEMIDLIST pidl) <br>{ <br>int iImage = -1; <br> <br>IExtractIcon *pxi; <br>HRESULT hres = psf-&gt;GetUIObjectOf(NULL, 1, &amp;pidl, IID_IExtractIcon, NULL, (LPVOID *)&amp;pxi); <br> <br>if (FAILED(hres)) <br>{ <br>return(0); <br>} <br>CEnsureRelease erExtractIcon(pxi); <br> <br>    char szIconFile[MAX_PATH]; <br>    int iIndex; <br>    UINT wFlags = 0; <br> <br>    hres = pxi-&gt;GetIconLocation(GIL_FORSHELL, <br>szIconFile, sizeof(szIconFile), &amp;iIndex, &amp;wFlags); <br>    if (FAILED(hres)) <br>    { <br>return(0); <br>} <br> <br>    // <br>    // if GIL_DONTCACHE was returned by the icon handler, dont <br>    // lookup the previous icon, assume a cache miss. <br>    // <br>    if (!(wFlags &amp; GIL_DONTCACHE)) <br>{ <br>        iImage = GetCachedIndex(szIconFile, iIndex, wFlags); <br>} <br> <br>    // if we miss our cache... <br>    if (iImage == -1) <br>    { <br>HICON hiconLarge = NULL; <br>HICON hiconSmall = NULL; <br> <br>int cxIcon = GetSystemMetrics(SM_CXICON); <br>int cxSmIcon = GetSystemMetrics(SM_CXSMICON); <br> <br>        // try getting it from the Extract member fuction <br>        hres = pxi-&gt;Extract(szIconFile, iIndex, &amp;hiconLarge, &amp;hiconSmall, <br>        MAKELONG(cxIcon, cxSmIcon)); <br> <br>// S_FALSE means can you please do it <br>if (hres == S_FALSE) <br>{ <br>hres = ExtractIcon(szIconFile, iIndex, wFlags, <br>&amp;hiconLarge, &amp;hiconSmall, MAKELONG(cxIcon, cxSmIcon)); <br>} <br>if (SUCCEEDED(hres)) <br>{ <br>// Let CacheIcons check and destroy the hicon's <br>iImage = CacheIcons(hiconLarge, hiconSmall, szIconFile, iIndex, wFlags); <br>} <br> <br>// if we failed in any way pick a default icon <br>        if (iImage == -1) <br>        { <br>            if (wFlags &amp; GIL_SIMULATEDOC) <br>{ <br>                iImage = 0; // II_DOCUMENT; <br>} <br>            else if ((wFlags &amp; GIL_PERINSTANCE) &amp;&amp; PathIsExe(szIconFile)) <br>{ <br>                iImage = 0; // II_APPLICATION; <br>} <br>            else <br>{ <br>                iImage = 0; // II_DOCNOASSOC; <br>} <br>} <br>} <br> <br>    if (iImage &lt; 0) <br>{ <br>        iImage = 0; // II_DOCNOASSOC; <br>} <br> <br>return(iImage); <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

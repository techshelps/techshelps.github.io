<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VSCTOP.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6533"></a>VSCTOP.H</h2>
<pre><code>#ifdef WIN32 <br>#define WINDOWS <br>#endif <br> <br>#ifdef _WINDOWS /* MS C 7.0 predefined */ <br>#ifndef WIN32 <br>#define WINDOWS <br>#define WIN16 <br>#endif <br>#endif <br> <br>#ifdef WINDOWS <br>#pragma message("Windows") <br>#endif <br> <br>#ifdef WIN16 <br>#pragma message("Win16") <br>#endif <br> <br>#ifdef WIN32 <br>#pragma message("Win32") <br>#endif <br> <br>/* <br>| Include windows and scc definitions <br>*/ <br> <br>#include "entry.h" <br>#include "stdlib.h" <br>#include &lt;windows.h&gt; <br> <br>typedef signed char  *LPCHAR; <br>typedef signed short  *LPSHORT; <br> <br>typedef DWORD HIOFILE; <br>#define HUGE <br> <br> <br>#define xseek _llseek <br>#define xtell _ltell <br>#define xopen _lopen <br>#define xclose _lclose <br>#define xread  _lread <br> <br>// #include "sccfi.h" <br> <br>/* <br>| <br>|   Typedef for FI information and get structure <br>| <br>*/ <br> <br>typedef struct FIINFOtag <br>   { <br>   WORD      fiId;/* FI Id */ <br>   WORD      fiFlags;    /* flags for the Id */ <br>   BYTE      fiName[26];    /* name of the Id, for example "WordPerfect 5.0" */ <br>   } FIINFO; <br> <br>typedef struct FIGETSTRUCTtag <br>   { <br>   HANDLE   gsRes; <br>   WORD     gsIndex; <br>   } FIGETSTRUCT; <br> <br>#include "sodefs.h" <br> <br>#ifdef WINDOWS <br>#define DECLSOVOID (SO_ENTRYMOD *)() <br>#endif /*WINDOWS*/ <br> <br>/* <br>|Include viewer's data types and typedef HPROC <br>*/ <br> <br>#include VwInclude <br> <br>typedef struct PROCtag <br>{ <br>VwStreamDynamicTypeVwData; <br>SORTNSSoRtns; <br>DWORDUser1; <br>DWORDUser2; <br>LONGlTellOffset; <br>} NEAR * HPROC; <br> <br>#include "vwdefs.h" <br> <br>/* <br>|Do functions prototypes for Vw functions <br>*/ <br> <br>externFILTER_DESCVwStreamIdName[]; <br> <br>#ifdef VwStreamStaticType <br>externVwStreamStaticType VwStreamStaticName; <br>#endif <br> <br>#ifdef VwStreamOpenFunc <br>#undef VwStreamOpenFunc <br>#define VwStreamOpenFuncVwStreamOpen <br>VW_ENTRYSC SHORT VW_ENTRYMODVwStreamOpenFunc(SOFILE, SHORT, BYTE VWPTR *, SOFILTERINFO VWPTR * ,HPROC); <br>#endif <br> <br>#ifdef VwStreamCloseFunc <br> <br>#undef VwStreamCloseFunc <br>#define VwStreamCloseFuncVwStreamClose <br>VW_ENTRYSC VOID VW_ENTRYMODVwStreamCloseFunc(SOFILE, HPROC); <br> <br>#else <br> <br>#undef VwStreamCloseFunc <br>#define VwStreamCloseFuncVwStreamClose <br>VW_ENTRYSC VOID VW_ENTRYMODVwStreamCloseFunc(SOFILE, HPROC); <br>VW_ENTRYSC VOID VW_ENTRYMOD VwStreamCloseFunc(hFile,hProc) <br>SOFILEhFile; <br>HPROChProc; <br>{ <br>} <br> <br>#endif <br> <br>#ifdef VwStreamSectionFunc <br>#undef VwStreamSectionFunc <br>#define VwStreamSectionFuncVwStreamSection <br>VW_ENTRYSC SHORT VW_ENTRYMODVwStreamSectionFunc(SOFILE, HPROC); <br>#endif <br> <br>#ifdef VwStreamReadFunc <br>#undef VwStreamReadFunc <br>#define VwStreamReadFuncVwStreamRead <br>VW_ENTRYSC SHORT VW_ENTRYMODVwStreamReadFunc(SOFILE, HPROC); <br>#endif <br> <br>#ifdef VwStreamReadRecordFunc <br> <br>#undef VwStreamReadRecordFunc <br>#define VwStreamReadRecordFuncVwStreamReadRecord <br>VW_ENTRYSC VOID VW_ENTRYMODVwStreamReadRecordFunc(SOFILE, DWORD, HPROC); <br> <br>#else <br> <br>#define VwStreamReadRecordFuncVwStreamReadRecord <br>VW_ENTRYSC VOID VW_ENTRYMOD    VwStreamReadRecordFunc(SOFILE, DWORD, HPROC); <br>VW_ENTRYSC VOID VW_ENTRYMOD    VwStreamReadRecordFunc(hFile,dwData,hProc) <br>SOFILEhFile; <br>DWORDdwData; <br>HPROChProc; <br>{ <br>} <br> <br>#endif <br> <br>#ifdef VwDoSpecialFunc <br> <br>#undef VwDoSpecialFunc <br>#define VwDoSpecialFuncVwDoSpecial <br>VW_ENTRYSC VOID VW_ENTRYMODVwDoSpecialFunc(SOFILE,DWORD,DWORD,DWORD,DWORD,DWORD,HPROC); <br> <br>#else <br> <br>#define VwDoSpecialFuncVwDoSpecial <br>VW_ENTRYSC VOID VW_ENTRYMODVwDoSpecialFunc(SOFILE,DWORD,DWORD,DWORD,DWORD,DWORD,HPROC); <br>VW_ENTRYSC VOID VW_ENTRYMOD VwDoSpecialFunc(hFile, dw1,dw2,dw3,dw4,dw5,hProc) <br>SOFILEhFile; <br>DWORDdw1; <br>DWORDdw2; <br>DWORDdw3; <br>DWORDdw4; <br>DWORDdw5; <br>HPROChProc; <br>{ <br>} <br>#endif <br> <br>#ifdef VwStreamTellFunc <br>#undef VwStreamTellFunc <br>#define VwStreamTellFuncVwStreamTell <br>VW_ENTRYSC SHORT VW_ENTRYMODVwStreamTellFunc(SOFILE, HPROC); <br>#endif <br> <br>#ifdef VwStreamSeekFunc <br>#undef VwStreamSeekFunc <br>#define VwStreamSeekFuncVwStreamSeek <br>VW_ENTRYSC SHORT VW_ENTRYMODVwStreamSeekFunc(SOFILE, HPROC); <br>#endif <br> <br>#ifdef VwGetInfoFunc <br>#undef VwGetInfoFunc <br>#define VwGetInfoFuncVwGetInfo <br>VW_ENTRYSC BOOL VW_ENTRYMODVwGetInfoFunc(VOID VWPTR *, WORD, HPROC); <br>#endif <br> <br>#ifdef VwGetRtnsFunc <br>#undef VwGetRtnsFunc <br>#define VwGetRtnsFuncVwGetRtns <br>VW_ENTRYSC VOID VW_ENTRYMOD VwGetRtnsFunc(VWRTNS VWPTR *, WORD); <br>#endif <br> <br>#ifdef VwGetDataFunc <br>#undef VwGetDataFunc <br>#define VwGetDataFuncVwGetData <br>VW_ENTRYSC VOID VW_ENTRYMODVwGetDataFunc(VwStreamSaveType VWPTR *, HPROC); <br>#endif <br> <br>#ifdef VwSetDataFunc <br>#undef VwSetDataFunc <br>#define VwSetDataFuncVwSetData <br>VW_ENTRYSC VOID VW_ENTRYMODVwSetDataFunc(VwStreamSaveType VWPTR *, HPROC); <br>#endif <br> <br>#ifdef VwStreamSectionType <br> <br>#ifdef VwGetSectionDataFunc <br>#undef VwGetSectionDataFunc <br>#define VwGetSectionDataFuncVwGetSectionData <br>VW_ENTRYSC VOID VW_ENTRYMODVwGetSectionDataFunc(VwStreamSectionType VWPTR *, HPROC); <br>#endif <br> <br>#ifdef VwSetSectionDataFunc <br>#undef VwSetSectionDataFunc <br>#define VwSetSectionDataFuncVwSetSectionData <br>VW_ENTRYSC VOID VW_ENTRYMODVwSetSectionDataFunc(VwStreamSectionType VWPTR *, HPROC); <br>#endif <br> <br>#else <br> <br>#ifdef VwGetSectionDataFunc <br>#undef VwGetSectionDataFunc <br>#endif <br>#define VwGetSectionDataFuncVwGetSectionData <br>VW_ENTRYSC VOID VW_ENTRYMODVwGetSectionDataFunc(VOID VWPTR *, HPROC); <br> <br>#ifdef VwSetSectionDataFunc <br>#undef VwSetSectionDataFunc <br>#endif <br>#define VwSetSectionDataFuncVwSetSectionData <br>VW_ENTRYSC VOID VW_ENTRYMODVwSetSectionDataFunc(VOID VWPTR *, HPROC); <br> <br>#endif <br> <br>#ifdef VwLocalUpFunc <br>#undef VwLocalUpFunc <br>#define VwLocalUpFuncVwLocalUp <br>VW_ENTRYSC VOID VW_ENTRYMODVwLocalUpFunc(HIOFILE, SOFILE VWPTR *, HPROC); <br>#endif <br> <br>#ifdef VwLocalDownFunc <br>#undef VwLocalDownFunc <br>#define VwLocalDownFuncVwLocalDown <br>VW_ENTRYSC VOID VW_ENTRYMODVwLocalDownFunc(SOFILE, HIOFILE VWPTR *, HPROC); <br>#endif <br> <br>#ifdef VwAllocProcFunc <br>#undef VwAllocProcFunc <br>#define VwAllocProcFuncVwAllocProc <br>VW_ENTRYSC HPROC VW_ENTRYMODVwAllocProcFunc(VOID); <br>#endif <br> <br>#ifdef VwFreeProcFunc <br>#undef VwFreeProcFunc <br>#define VwFreeProcFuncVwFreeProc <br>VW_ENTRYSC VOID VW_ENTRYMODVwFreeProcFunc(HPROC); <br>#endif <br> <br>#define VwSetUserFuncVwSetUser <br>VW_ENTRYSC VOID VW_ENTRYMOD VwSetUserFunc(DWORD,DWORD,HPROC); <br> <br>#define VwSetSoRtnFuncVwSetSoRtn <br>VW_ENTRYSC VOID VW_ENTRYMOD VwSetSoRtnFunc(SHORT, DECLSO, HPROC); <br> <br>#ifdef VwStreamStaticType <br>#define InitVwStreamStaticName <br>#endif <br> <br>#define Proc (hProc-&gt;VwData) <br> <br>/* <br>| Make some standard library functions available <br>*/ <br> <br>#ifdef WIN16 <br> <br>void far * far _cdecl _fmemmove(void far *, const void far *,unsigned int); <br>void far * far _cdecl _fmemcpy(void far *, const void far *,unsigned int); <br>void far * far _cdecl _fmemset(void far *, int, unsigned int); <br>int _cdecl atoi(const char *); <br>long _cdecl atol(const char *); <br>int Vatoi(char far *); <br>long Vatol(char far *); <br> <br>#define strcmplstrcmp <br>#define strcmpilstrcmpi <br>#define strcpylstrcpy <br>#define strcatlstrcat <br>#define strlenlstrlen <br>#define memcpy_fmemcpy <br>#define memset_fmemset <br>#define memmove_fmemmove <br> <br>int Vatoi(pStr) <br>char far * pStr; <br>{ <br>static char locStr[20]; <br> <br>lstrcpy(locStr,pStr); <br>return(atoi(locStr)); <br>} <br> <br>long Vatol(pStr) <br>char far * pStr; <br>{ <br>static char locStr[20]; <br> <br>lstrcpy(locStr,pStr); <br>return(atol(locStr)); <br>} <br> <br>#define atoi(s)Vatoi((char far *) s) <br>#define atol(s)Vatol((char far *) s) <br> <br>#define itoa(num,str,x)_itoa(num,str,x) <br>#define ltoa(num,str,x)_ltoa(num,str,x) <br> <br>#define SUAlloc(size,hProc)GlobalAlloc(GMEM_MOVEABLE,size) <br>#define SUFree(handle,hProc)GlobalFree(handle) <br>#define SULock(handle,hProc)((VOID FAR *) GlobalLock(handle)) <br>#define SUUnlock(handle,hProc)GlobalUnlock(handle) <br>#define SUReAlloc(handle,size,hProc)GlobalReAlloc(handle,size,0) <br> <br>#define SUSeekEntry(hF,hProc) <br> <br>#endif /*WIN16*/ <br> <br>#ifdef WIN32 <br> <br>#define SUAlloc(size,hProc)GlobalAlloc(GMEM_MOVEABLE,size) <br>#define SUFree(handle,hProc)GlobalFree(handle) <br>#define SULock(handle,hProc)((VOID FAR *) GlobalLock(handle)) <br>#define SUUnlock(handle,hProc)GlobalUnlock(handle) <br>#define SUReAlloc(handle,size,hProc)GlobalReAlloc(handle,size,0) <br> <br>#define SUSeekEntry(hF,hProc) <br> <br>#endif /*WIN32*/ <br> <br>#ifdef WINDOWS <br> <br>VW_ENTRYSC HPROC VW_ENTRYMOD VwAllocProcFunc() <br>{ <br>HANDLEhData; <br> <br>if ((hData = LocalAlloc(LMEM_FIXED | LMEM_ZEROINIT,sizeof(struct PROCtag))) == NULL) <br>return(NULL); <br>else <br>return((HPROC)LocalLock(hData)); <br>} <br> <br>VW_ENTRYSC VOID VW_ENTRYMOD VwFreeProcFunc(hProc) <br>HPROChProc; <br>{ <br>HANDLEhData; <br> <br>#ifdef WIN16 <br>if ((hData = LocalHandle((WORD)(VOID NEAR *)hProc)) != NULL) <br>LocalFree(hData); <br>#endif /*WIN16*/ <br> <br>#ifdef WIN32 <br>if ((hData = LocalHandle((LPVOID)hProc)) != NULL) <br>LocalFree(hData); <br>#endif /*WIN32*/ <br> <br>} <br> <br>#endif /*WINDOWS*/ <br> <br> <br>VW_ENTRYSC BOOL VW_ENTRYMOD VwGetInfoFunc(pInfo,wInfoId,hProc) <br>VOID VWPTR *pInfo; <br>WORDwInfoId; <br>HPROChProc; <br>{ <br>BOOLlocRet; <br>WORDlocIndex; <br> <br>locRet = TRUE; <br> <br>switch (wInfoId) <br>{ <br>case VWINFO_CHECK: <br>*(DWORD VWPTR *)pInfo = 0x12345678; <br>break; <br> <br>case VWINFO_SAVESIZE: <br>#ifdef VwStreamSaveType <br>*(WORD VWPTR *)pInfo = sizeof(VwStreamSaveType); <br>#else <br>*(WORD VWPTR *)pInfo = 0; <br>#endif <br>break; <br> <br>case VWINFO_DYNAMICSIZE: <br>#ifdef VwStreamDynamicType <br>*(WORD VWPTR *)pInfo = sizeof(VwStreamDynamicType); <br>#else <br>*(WORD VWPTR *)pInfo = 0; <br>#endif <br>break; <br> <br>case VWINFO_STATICSIZE: <br>#ifdef VwStreamStaticType <br>*(WORD VWPTR *)pInfo = sizeof(VwStreamStaticType); <br>#else <br>*(WORD VWPTR *)pInfo = 0; <br>#endif <br>break; <br> <br>case VWINFO_SPECLEVEL: <br>*(WORD VWPTR *)pInfo = 400; <br>break; <br> <br>case VWINFO_FILTERLEVEL: <br>*(WORD VWPTR *)pInfo = 410; <br>break; <br> <br>case VWINFO_IDCOUNT: <br>*(WORD VWPTR *)pInfo = VwStreamIdCount; <br>break; <br> <br>case VWINFO_IDS: <br>for (locIndex = 0; locIndex &lt; VwStreamIdCount; locIndex++) <br>{ <br>((WORD VWPTR *)pInfo)[locIndex] = VwStreamIdName[locIndex].FilterId; <br>} <br>break; <br> <br>case VWINFO_DATE: <br>strcpy((BYTE VWPTR *)pInfo,__DATE__); <br>break; <br> <br>case VWINFO_TIME: <br>strcpy((BYTE VWPTR *)pInfo,__TIME__); <br>break; <br> <br>case VWINFO_USERSAVESIZE: <br>#ifdef VwStreamUserSaveType <br>*(WORD VWPTR *)pInfo = sizeof(VwStreamUserSaveType); <br>#else <br>*(WORD VWPTR *)pInfo = 0; <br>#endif <br>break; <br> <br>case VWINFO_SECTIONSAVESIZE: <br>#ifdef VwStreamSectionType <br>*(WORD VWPTR *)pInfo = sizeof(VwStreamSectionType); <br>#else <br>*(WORD VWPTR *)pInfo = 0; <br>#endif <br>break; <br> <br>default: <br>locRet = FALSE; <br>break; <br>} <br> <br>return(locRet); <br>} <br> <br>VW_ENTRYSC VOID VW_ENTRYMOD VwGetDataFunc(pSaveData,hProc) <br>VwStreamSaveType VWPTR *pSaveData; <br>HPROChProc; <br>{ <br>*pSaveData = Proc.VwStreamSaveName; <br>} <br> <br>VW_ENTRYSC VOID VW_ENTRYMOD VwSetDataFunc(pSaveData,hProc) <br>VwStreamSaveType VWPTR *pSaveData; <br>HPROChProc; <br>{ <br>Proc.VwStreamSaveName = *pSaveData; <br>} <br> <br>#ifdef VwStreamSectionType <br> <br>VW_ENTRYSC VOID VW_ENTRYMOD VwGetSectionDataFunc(pSectionData,hProc) <br>VwStreamSectionType VWPTR *pSectionData; <br>HPROChProc; <br>{ <br>*pSectionData = Proc.VwStreamSectionName; <br>} <br> <br>VW_ENTRYSC VOID VW_ENTRYMOD VwSetSectionDataFunc(pSectionData,hProc) <br>VwStreamSectionType VWPTR *pSectionData; <br>HPROChProc; <br>{ <br>Proc.VwStreamSectionName = *pSectionData; <br>} <br> <br>#else <br> <br>VW_ENTRYSC VOID VW_ENTRYMOD VwGetSectionDataFunc(pSectionData,hProc) <br>VOID VWPTR *pSectionData; <br>HPROChProc; <br>{ <br>} <br> <br>VW_ENTRYSC VOID VW_ENTRYMOD VwSetSectionDataFunc(pSectionData,hProc) <br>VOID VWPTR *pSectionData; <br>HPROChProc; <br>{ <br>} <br> <br>#endif <br> <br>VOID FAR SODummy() <br>{ <br>} <br> <br>VW_ENTRYSC VOID VW_ENTRYMOD VwLocalUpFunc(hFile,phFile,hProc) <br>HIOFILEhFile; <br>SOFILE VWPTR *phFile; <br>HPROChProc; <br>{ <br>*phFile = (SOFILE)hFile; <br> <br>#ifdef WINDOWS <br>#define CAST(VOID FAR *) <br>#define CAST2(VOID FAR *) <br>#endif /*WINDOWS*/ <br> <br>hProc-&gt;SoRtns.SOPutChar = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutCharX = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutSpecialCharX = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutCharAttr = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutCharHeight = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutParaAlign = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutParaIndents = CAST SODummy; <br>hProc-&gt;SoRtns.SOStartTabStops = CAST SODummy; <br>hProc-&gt;SoRtns.SOEndTabStops = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutTabStop = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutMargins = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutSubdocInfo = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutBreak = CAST2 SODummy; <br>hProc-&gt;SoRtns.SOPutDataCell = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutTextCell = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutMoreText = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutField = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutVarField = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutMoreVarField = CAST SODummy; <br>hProc-&gt;SoRtns.SOStartColumnInfo = CAST SODummy; <br>hProc-&gt;SoRtns.SOStartFieldInfo = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutColumnInfo = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutFieldInfo = CAST SODummy; <br>hProc-&gt;SoRtns.SOEndColumnInfo = CAST SODummy; <br>hProc-&gt;SoRtns.SOEndFieldInfo = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutSectionType = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutSectionName = CAST SODummy; <br>hProc-&gt;SoRtns.SOSetDateBase = CAST SODummy; <br>hProc-&gt;SoRtns.SOBailOut = CAST SODummy; <br>hProc-&gt;SoRtns.SOTagBegin = CAST SODummy; <br>hProc-&gt;SoRtns.SOTagEnd = CAST SODummy; <br>hProc-&gt;SoRtns.SOGetInfo = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutString = CAST SODummy; <br>hProc-&gt;SoRtns.SUUserSaveData = CAST2 SODummy; <br>hProc-&gt;SoRtns.SUUserRetrieveData = CAST2 SODummy; <br>hProc-&gt;SoRtns.SOPutBitmapHeader  = CAST SODummy; <br>hProc-&gt;SoRtns.SOStartPalette  = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutPaletteEntry  = CAST SODummy; <br>hProc-&gt;SoRtns.SOEndPalette = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutScanLineData = CAST2 SODummy; <br>hProc-&gt;SoRtns.SOStartFontTable = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutFontTableEntry = CAST SODummy; <br>hProc-&gt;SoRtns.SOEndFontTable = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutCharFontById = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutCharFontByName = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutParaSpacing = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutArchiveField = CAST SODummy; <br>hProc-&gt;SoRtns.SOStartHdrInfo = CAST SODummy; <br>hProc-&gt;SoRtns.SOEndHdrInfo = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutHdrEntry = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutVectorHeader = CAST SODummy; <br>hProc-&gt;SoRtns.SOVectorObject = CAST SODummy; <br>hProc-&gt;SoRtns.SOVectorAttr = CAST SODummy; <br>hProc-&gt;SoRtns.SOBeginTable = CAST SODummy; <br>hProc-&gt;SoRtns.SOEndTable = CAST SODummy;  <br>hProc-&gt;SoRtns.SOPutTableRowFormat = CAST SODummy; <br>hProc-&gt;SoRtns.SOPutTableCellInfo = CAST SODummy;  <br>hProc-&gt;SoRtns.SOPutGraphicObject = CAST SODummy; <br>hProc-&gt;SoRtns.SOGoToPosition = CAST SODummy; <br>hProc-&gt;SoRtns.SODrawLine = CAST SODummy; <br> <br>#undef CAST <br>} <br> <br> <br>VW_ENTRYSC VOID VW_ENTRYMOD VwLocalDownFunc(hFile,phFile,hProc) <br>SOFILEhFile; <br>HIOFILE VWPTR *phFile; <br>HPROChProc; <br>{ <br>*phFile = (HIOFILE)hFile; <br>} <br> <br> <br>#ifdef WINDOWS <br>#define CAST(VOID FAR *) <br>#define CAST2(VOID FAR *) <br>#define CASTIO(VOID FAR *) <br>#define SO_PFUNCSO_ENTRYMOD * <br>#endif /*WINDOWS*/ <br> <br> <br>VW_ENTRYSC VOID VW_ENTRYMOD VwSetSoRtnFunc(wRtn,pRtn,hProc) <br>SHORTwRtn; <br>VOID(SO_PFUNC pRtn)(); <br>HPROChProc; <br>{ <br>if (pRtn == NULL) <br>pRtn = SODummy; <br> <br> <br>switch (wRtn) <br>{ <br>case SOPUTCHAR: <br>hProc-&gt;SoRtns.SOPutChar = CAST pRtn; <br>break; <br>case SOPUTCHARX: <br>hProc-&gt;SoRtns.SOPutCharX = CAST pRtn; <br>break; <br>case SOPUTSPECIALCHARX: <br>hProc-&gt;SoRtns.SOPutSpecialCharX = CAST pRtn; <br>break; <br>case SOPUTCHARATTR: <br>hProc-&gt;SoRtns.SOPutCharAttr = CAST pRtn; <br>break; <br>case SOPUTCHARHEIGHT: <br>hProc-&gt;SoRtns.SOPutCharHeight = CAST pRtn; <br>break; <br>case SOPUTPARAALIGN: <br>hProc-&gt;SoRtns.SOPutParaAlign = CAST pRtn; <br>break; <br>case SOPUTPARAINDENTS: <br>hProc-&gt;SoRtns.SOPutParaIndents = CAST pRtn; <br>break; <br>case SOSTARTTABSTOPS: <br>hProc-&gt;SoRtns.SOStartTabStops = CAST pRtn; <br>break; <br>case SOENDTABSTOPS: <br>hProc-&gt;SoRtns.SOEndTabStops = CAST pRtn; <br>break; <br>case SOPUTTABSTOP: <br>hProc-&gt;SoRtns.SOPutTabStop = CAST pRtn; <br>break; <br>case SOPUTMARGINS: <br>hProc-&gt;SoRtns.SOPutMargins = CAST pRtn; <br>break; <br>case SOPUTSUBDOCINFO: <br>hProc-&gt;SoRtns.SOPutSubdocInfo = CAST pRtn; <br>break; <br>case SOPUTBREAK: <br>hProc-&gt;SoRtns.SOPutBreak = CAST2 pRtn; <br>break; <br>caseSOPUTDATACELL: <br>hProc-&gt;SoRtns.SOPutDataCell = CAST pRtn; <br>break; <br>caseSOPUTTEXTCELL: <br>hProc-&gt;SoRtns.SOPutTextCell = CAST pRtn; <br>break; <br>caseSOPUTMORETEXT: <br>hProc-&gt;SoRtns.SOPutMoreText = CAST pRtn; <br>break; <br>caseSOPUTFIELD: <br>hProc-&gt;SoRtns.SOPutField = CAST pRtn; <br>break; <br>caseSOPUTVARFIELD: <br>hProc-&gt;SoRtns.SOPutVarField = CAST pRtn; <br>break; <br>caseSOPUTMOREVARFIELD: <br>hProc-&gt;SoRtns.SOPutMoreVarField = CAST pRtn; <br>break; <br>caseSOSTARTCOLUMNINFO: <br>hProc-&gt;SoRtns.SOStartColumnInfo = CAST pRtn; <br>break; <br>caseSOSTARTFIELDINFO: <br>hProc-&gt;SoRtns.SOStartFieldInfo = CAST pRtn; <br>break; <br>caseSOPUTCOLUMNINFO: <br>hProc-&gt;SoRtns.SOPutColumnInfo = CAST pRtn; <br>break; <br>caseSOPUTFIELDINFO: <br>hProc-&gt;SoRtns.SOPutFieldInfo = CAST pRtn; <br>break; <br>caseSOENDCOLUMNINFO: <br>hProc-&gt;SoRtns.SOEndColumnInfo = CAST pRtn; <br>break; <br>caseSOENDFIELDINFO: <br>hProc-&gt;SoRtns.SOEndFieldInfo = CAST pRtn; <br>break; <br>caseSOPUTSECTIONTYPE: <br>hProc-&gt;SoRtns.SOPutSectionType = CAST pRtn; <br>break; <br>caseSOPUTSECTIONNAME: <br>hProc-&gt;SoRtns.SOPutSectionName = CAST pRtn; <br>break; <br>caseSOSETDATEBASE: <br>hProc-&gt;SoRtns.SOSetDateBase = CAST pRtn; <br>break; <br>caseSOBAILOUT: <br>hProc-&gt;SoRtns.SOBailOut = CAST pRtn; <br>break; <br>caseSOTAGBEGIN: <br>hProc-&gt;SoRtns.SOTagBegin = CAST pRtn; <br>break; <br>caseSOTAGEND: <br>hProc-&gt;SoRtns.SOTagEnd = CAST pRtn; <br>break; <br>caseSOGETINFO: <br>hProc-&gt;SoRtns.SOGetInfo = CAST pRtn; <br>break; <br>caseSOPUTSTRING: <br>hProc-&gt;SoRtns.SOPutString = CAST pRtn; <br>break; <br>caseSUUSERSAVEDATA: <br>hProc-&gt;SoRtns.SUUserSaveData = CAST2 pRtn; <br>break; <br>caseSUUSERRETRIEVEDATA: <br>hProc-&gt;SoRtns.SUUserRetrieveData = CAST2 pRtn; <br>break; <br>caseSOPUTBITMAPHEADER: <br>hProc-&gt;SoRtns.SOPutBitmapHeader = CAST pRtn; <br>break; <br>caseSOSTARTPALETTE: <br>hProc-&gt;SoRtns.SOStartPalette  = CAST pRtn; <br>break; <br>caseSOPUTPALETTEENTRY: <br>hProc-&gt;SoRtns.SOPutPaletteEntry = CAST pRtn; <br>break; <br>caseSOENDPALETTE: <br>hProc-&gt;SoRtns.SOEndPalette = CAST pRtn; <br>break; <br>caseSOPUTSCANLINEDATA: <br>hProc-&gt;SoRtns.SOPutScanLineData = CAST2 pRtn; <br>break; <br>caseSOSTARTFONTTABLE: <br>hProc-&gt;SoRtns.SOStartFontTable = CAST pRtn; <br>break; <br>caseSOPUTFONTTABLEENTRY: <br>hProc-&gt;SoRtns.SOPutFontTableEntry = CAST pRtn; <br>break; <br>caseSOENDFONTTABLE: <br>hProc-&gt;SoRtns.SOEndFontTable = CAST pRtn; <br>break; <br>caseSOPUTCHARFONTBYID: <br>hProc-&gt;SoRtns.SOPutCharFontById = CAST pRtn; <br>break; <br>caseSOPUTCHARFONTBYNAME: <br>hProc-&gt;SoRtns.SOPutCharFontByName = CAST pRtn; <br>break; <br>caseSOPUTPARASPACING: <br>hProc-&gt;SoRtns.SOPutParaSpacing = CAST pRtn; <br>break; <br>caseSOPUTARCHIVEFIELD: <br>hProc-&gt;SoRtns.SOPutArchiveField = CAST pRtn; <br>break; <br>caseSOSTARTHDRINFO: <br>hProc-&gt;SoRtns.SOStartHdrInfo = CAST pRtn; <br>break; <br>caseSOENDHDRINFO: <br>hProc-&gt;SoRtns.SOEndHdrInfo = CAST pRtn; <br>break; <br>caseSOPUTHDRENTRY: <br>hProc-&gt;SoRtns.SOPutHdrEntry = CAST pRtn; <br>break; <br>caseSOPUTVECTORHEADER: <br>hProc-&gt;SoRtns.SOPutVectorHeader = CAST pRtn; <br>break; <br>caseSOVECTOROBJECT: <br>hProc-&gt;SoRtns.SOVectorObject = CAST pRtn; <br>break; <br>caseSOVECTORATTR: <br>hProc-&gt;SoRtns.SOVectorAttr = CAST pRtn; <br>break; <br>case SOBEGINTABLE: <br>hProc-&gt;SoRtns.SOBeginTable = CAST pRtn; <br>break; <br>case SOENDTABLE: <br>hProc-&gt;SoRtns.SOEndTable = CAST pRtn;  <br>break; <br>case SOPUTTABLEROWFORMAT: <br>hProc-&gt;SoRtns.SOPutTableRowFormat = CAST pRtn; <br>break; <br>case SOPUTTABLECELLINFO: <br>hProc-&gt;SoRtns.SOPutTableCellInfo = CAST pRtn;  <br>break; <br>case SOPUTGRAPHICOBJECT: <br>hProc-&gt;SoRtns.SOPutGraphicObject = CAST pRtn; <br>break; <br>case SOGOTOPOSITION: <br>hProc-&gt;SoRtns.SOGoToPosition = CAST pRtn; <br>break; <br>case SODRAWLINE: <br>hProc-&gt;SoRtns.SODrawLine = CAST pRtn; <br>break; <br>} <br> <br>#undef CAST <br>#undef CAST2 <br>#undef CASTIO <br>} <br> <br> <br>VW_ENTRYSC VOID VW_ENTRYMOD VwSetUserFunc(dwUser1,dwUser2,hProc) <br>DWORDdwUser1; <br>DWORDdwUser2; <br>HPROChProc; <br>{ <br>hProc-&gt;User1 = dwUser1; <br>hProc-&gt;User2 = dwUser2; <br>} <br> <br> <br>VW_ENTRYSC VOID VW_ENTRYMOD VwGetRtnsFunc(pRtns,wLastRtn) <br>VWRTNS VWPTR * pRtns; <br>WORD  wLastRtn; <br>{ <br> <br>#ifdef WINDOWS <br>#define FUNCTIONNAME(func) func <br>#define CAST(VOID FAR *) <br>#define CASTHPROC (VOID FAR *) <br>#endif /*WINDOWS*/ <br> <br>#ifdef VwStreamOpenFunc <br>pRtns-&gt;StreamOpen = FUNCTIONNAME(VwStreamOpen); <br>#else <br>pRtns-&gt;StreamOpen = NULL; <br>#endif <br> <br>#ifdef VwStreamSectionFunc <br>pRtns-&gt;StreamSection = FUNCTIONNAME(VwStreamSection); <br>#else <br>pRtns-&gt;StreamSection = NULL; <br>#endif <br> <br>#ifdef VwStreamReadFunc <br>pRtns-&gt;StreamRead = FUNCTIONNAME(VwStreamRead); <br>#else <br>pRtns-&gt;StreamRead = NULL; <br>#endif <br> <br>#ifdef VwStreamTellFunc <br>pRtns-&gt;StreamTell = FUNCTIONNAME(VwStreamTell); <br>#else <br>pRtns-&gt;StreamTell = NULL; <br>#endif <br> <br>#ifdef VwStreamSeekFunc <br>pRtns-&gt;StreamSeek= FUNCTIONNAME(VwStreamSeek); <br>#else <br>pRtns-&gt;StreamSeek= NULL; <br>#endif <br> <br>#ifdef VwGetInfoFunc <br>pRtns-&gt;GetInfo = FUNCTIONNAME(VwGetInfo); <br>#else <br>pRtns-&gt;GetInfo = NULL; <br>#endif <br> <br>#ifdef VwGetDataFunc <br>pRtns-&gt;GetData = CAST FUNCTIONNAME(VwGetData); <br>#else <br>pRtns-&gt;GetData = NULL; <br>#endif <br> <br>#ifdef VwSetDataFunc <br>pRtns-&gt;SetData = CAST FUNCTIONNAME(VwSetData); <br>#else <br>pRtns-&gt;SetData = NULL; <br>#endif <br> <br>#ifdef VwLocalUpFunc <br>pRtns-&gt;LocalUp = FUNCTIONNAME(VwLocalUp); <br>#else <br>pRtns-&gt;LocalUp = NULL; <br>#endif <br> <br>#ifdef VwLocalDownFunc <br>pRtns-&gt;LocalDown = FUNCTIONNAME(VwLocalDown); <br>#else <br>pRtns-&gt;LocalDown = NULL; <br>#endif <br> <br>#ifdef VwAllocProcFunc <br>pRtns-&gt;AllocProc =  CASTHPROC FUNCTIONNAME(VwAllocProc); <br>#else <br>pRtns-&gt;AllocProc = NULL; <br>#endif <br> <br>#ifdef VwFreeProcFunc <br>pRtns-&gt;FreeProc = FUNCTIONNAME(VwFreeProc); <br>#else <br>pRtns-&gt;FreeProc = NULL; <br>#endif <br> <br>#ifdef VwSetUserFunc <br>pRtns-&gt;SetUser = FUNCTIONNAME(VwSetUser); <br>#else <br>pRtns-&gt;SetUser = NULL; <br>#endif <br> <br>#ifdef VwSetSoRtnFunc <br>pRtns-&gt;SetSoRtn = FUNCTIONNAME(VwSetSoRtn); <br>#else <br>pRtns-&gt;SetSoRtn = NULL; <br>#endif <br> <br>#ifdef VwStreamCloseFunc <br>pRtns-&gt;StreamClose = FUNCTIONNAME(VwStreamClose); <br>#else <br>pRtns-&gt;StreamClose = NULL; <br>#endif <br> <br>#ifdef VwStreamSectionType <br>#ifdef VwGetSectionDataFunc <br>pRtns-&gt;GetSectionData = CAST FUNCTIONNAME(VwGetSectionData); <br>#else <br>pRtns-&gt;GetSectionData = NULL; <br>#endif <br>#else <br>pRtns-&gt;GetSectionData = NULL; <br>#endif <br> <br>#ifdef VwStreamSectionType <br>#ifdef VwSetSectionDataFunc <br>pRtns-&gt;SetSectionData = CAST FUNCTIONNAME(VwSetSectionData); <br>#else <br>pRtns-&gt;SetSectionData = NULL; <br>#endif <br>#else <br>pRtns-&gt;SetSectionData = NULL; <br>#endif <br> <br>#ifdef VwStreamReadRecordFunc <br>pRtns-&gt;StreamReadRecord = FUNCTIONNAME(VwStreamReadRecord); <br>#else <br>pRtns-&gt;StreamReadRecord = NULL; <br>#endif <br> <br>if (wLastRtn &gt;= VWRTN_DOSPECIAL) <br>{ <br>#ifdef VwDoSpecialFunc <br>pRtns-&gt;DoSpecial = FUNCTIONNAME(VwDoSpecial); <br>#else <br>pRtns-&gt;DoSpecial = NULL; <br>#endif <br>} <br> <br>#undef CAST <br>#undef FUNCTIONNAME <br>#undef CASTHPROC <br>} <br> <br>/* <br>| Filter macro for bitmap filters <br>*/ <br> <br>#defineSetRGBPixel(pDest,pRGB){*(BYTE VWPTR *)pDest++=((BYTE VWPTR *)pRGB)[2];*(BYTE VWPTR *)pDest++=((BYTE VWPTR *)pRGB)[1];*(BYTE VWPTR *)pDest++=*((BYTE VWPTR *)pRGB);} <br> <br> <br>/* <br>|SO routine macros <br>*/ <br> <br>#define SOPutChar(a,hP)      (hP-&gt;SoRtns.SOPutChar)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutCharX(a,b,hP) (hP-&gt;SoRtns.SOPutCharX)(a,b,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutSpecialCharX(a,b,hP)     (hP-&gt;SoRtns.SOPutSpecialCharX)(a,b,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutCharAttr(a,b,hP)     (hP-&gt;SoRtns.SOPutCharAttr)(a,b,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutCharHeight(a,hP)     (hP-&gt;SoRtns.SOPutCharHeight)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutParaAlign(a,hP)   (hP-&gt;SoRtns.SOPutParaAlign)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutParaIndents(a,b,c,hP)(hP-&gt;SoRtns.SOPutParaIndents)(a,b,c,hP-&gt;User1,hP-&gt;User2) <br>#define SOStartTabStops(hP)(hP-&gt;SoRtns.SOStartTabStops)(hP-&gt;User1,hP-&gt;User2) <br>#define SOEndTabStops(hP)(hP-&gt;SoRtns.SOEndTabStops)(hP-&gt;User1,hP-&gt;User2) <br>#define SOPutTabStop(a,hP) (hP-&gt;SoRtns.SOPutTabStop)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutMargins(a,b,hP)   (hP-&gt;SoRtns.SOPutMargins)(a,b,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutBreak(a,b,hP) (hP-&gt;SoRtns.SOPutBreak)(a,(DWORD)(b),hP-&gt;User1,hP-&gt;User2) <br>#define SOPutSubdocInfo(a,b,hP)      (hP-&gt;SoRtns.SOPutSubdocInfo)(a,b,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutTextCell(a,b,c,d,hP)     (hP-&gt;SoRtns.SOPutTextCell)(a,b,c,d,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutMoreText(a,b,c,hP)      (hP-&gt;SoRtns.SOPutMoreText)(a,b,c,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutDataCell(a,hP)(hP-&gt;SoRtns.SOPutDataCell)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutField(a,hP)     (hP-&gt;SoRtns.SOPutField)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutVarField(a,b,c,hP)      (hP-&gt;SoRtns.SOPutVarField)(a,b,c,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutMoreVarField(a,b,c,hP) (hP-&gt;SoRtns.SOPutMoreVarField)(a,b,c,hP-&gt;User1,hP-&gt;User2) <br>#define SOStartColumnInfo(hP)     (hP-&gt;SoRtns.SOStartColumnInfo)(hP-&gt;User1,hP-&gt;User2) <br>#define SOStartFieldInfo(hP)   (hP-&gt;SoRtns.SOStartFieldInfo)(hP-&gt;User1,hP-&gt;User2) <br>#define SOPutColumnInfo(a,hP)     (hP-&gt;SoRtns.SOPutColumnInfo)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutFieldInfo(a,hP)   (hP-&gt;SoRtns.SOPutFieldInfo)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOEndColumnInfo(hP)(hP-&gt;SoRtns.SOEndColumnInfo)(hP-&gt;User1,hP-&gt;User2) <br>#define SOEndFieldInfo(hP) (hP-&gt;SoRtns.SOEndFieldInfo)(hP-&gt;User1,hP-&gt;User2) <br>#define SOPutSectionType(a,hP)     (hP-&gt;SoRtns.SOPutSectionType)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutSectionName(a,hP)     (hP-&gt;SoRtns.SOPutSectionName)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOSetDateBase(a,b,hP)     (hP-&gt;SoRtns.SOSetDateBase)(a,b,hP-&gt;User1,hP-&gt;User2) <br>#define SOBailOut(a,hP)      (hP-&gt;SoRtns.SOBailOut)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOTagBegin(a,hP)     (hP-&gt;SoRtns.SOTagBegin)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOTagEnd(hP)     (hP-&gt;SoRtns.SOTagEnd)(hP-&gt;User1,hP-&gt;User2) <br>#define SOGetInfo(a,b,hP)(hP-&gt;SoRtns.SOGetInfo)(a,b,hP-&gt;User1,hP-&gt;User2) <br>#define SUUserSaveData(a,hP)   (hP-&gt;SoRtns.SUUserSaveData)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SUUserRetrieveData(a,b,hP)(hP-&gt;SoRtns.SUUserRetrieveData)(a,b,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutBitmapHeader(a,hP)      (hP-&gt;SoRtns.SOPutBitmapHeader)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOStartPalette(hP) (hP-&gt;SoRtns.SOStartPalette)(hP-&gt;User1,hP-&gt;User2) <br>#define SOPutPaletteEntry(a,b,c,hP) (hP-&gt;SoRtns.SOPutPaletteEntry)(a,b,c,hP-&gt;User1,hP-&gt;User2) <br>#define SOEndPalette(hP)     (hP-&gt;SoRtns.SOEndPalette)(hP-&gt;User1,hP-&gt;User2) <br>#define SOPutScanLineData(a,hP)      (hP-&gt;SoRtns.SOPutScanLineData)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutCharFontById(a,hP)      (hP-&gt;SoRtns.SOPutCharFontById)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutCharFontByName(a,b,hP) (hP-&gt;SoRtns.SOPutCharFontByName)(a,b,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutParaSpacing(a,b,c,d,hP)(hP-&gt;SoRtns.SOPutParaSpacing)(a,b,c,d,hP-&gt;User1,hP-&gt;User2) <br>#define SOStartFontTable(hP)   (hP-&gt;SoRtns.SOStartFontTable)(hP-&gt;User1,hP-&gt;User2) <br>#define SOPutFontTableEntry(a,b,c,hP)   (hP-&gt;SoRtns.SOPutFontTableEntry)(a,b,c,hP-&gt;User1,hP-&gt;User2) <br>#define SOEndFontTable(hP) (hP-&gt;SoRtns.SOEndFontTable)(hP-&gt;User1,hP-&gt;User2) <br>#define SOPutArchiveField(a,b,c,hP) (hP-&gt;SoRtns.SOPutArchiveField)(a,b,c,hP-&gt;User1,hP-&gt;User2) <br>#define SOStartHdrInfo(hP) (hP-&gt;SoRtns.SOStartHdrInfo)(hP-&gt;User1,hP-&gt;User2) <br>#define SOEndHdrInfo(hP)     (hP-&gt;SoRtns.SOEndHdrInfo)(hP-&gt;User1,hP-&gt;User2) <br>#define SOPutHdrEntry(a,b,c,hP)      (hP-&gt;SoRtns.SOPutHdrEntry)(a,b,c,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutVectorHeader(a,hP)      (hP-&gt;SoRtns.SOPutVectorHeader)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOVectorObject(a,b,c,hP)     (hP-&gt;SoRtns.SOVectorObject)(a,b,c,hP-&gt;User1,hP-&gt;User2) <br>#define SOVectorAttr(a,b,c,hP)     (hP-&gt;SoRtns.SOVectorAttr)(a,b,c,hP-&gt;User1,hP-&gt;User2) <br>#define SOBeginTable(hP)     (hP-&gt;SoRtns.SOBeginTable)(hP-&gt;User1,hP-&gt;User2) <br>#define SOEndTable(hP)     (hP-&gt;SoRtns.SOEndTable)(hP-&gt;User1,hP-&gt;User2) <br>#define SOPutTableRowFormat(a,b,c,d,e,f,hP)  (hP-&gt;SoRtns.SOPutTableRowFormat)(a,b,c,d,e,f,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutTableCellInfo(a,hP)     (hP-&gt;SoRtns.SOPutTableCellInfo)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOPutGraphicObject(a,hP)     (hP-&gt;SoRtns.SOPutGraphicObject)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SOGoToPosition(a,hP)   (hP-&gt;SoRtns.SOGoToPosition)(a,hP-&gt;User1,hP-&gt;User2) <br>#define SODrawLine(a,b,c,d,e,hP)     (hP-&gt;SoRtns.SODrawLine)(a,b,c,d,e,hP-&gt;User1,hP-&gt;User2) <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

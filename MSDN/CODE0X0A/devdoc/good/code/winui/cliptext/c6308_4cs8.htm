<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLIPTEXT.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6308"></a>CLIPTEXT.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corp. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>/**************************************************************************** <br> <br>    PROGRAM: Cliptext.c <br> <br>    PURPOSE: Demonstrates copying text to and from the clipboard <br> <br>    FUNCTIONS: <br> <br>        WinMain() - calls initialization function, processes message loop <br>        InitApplication() - initializes window data and registers window <br>        InitInstance() - saves instance handle and creates main window <br>        MainWndProc() - processes messages <br>        About() - processes messages for "About" dialog box <br>        OutOfMemory() - displays warning message <br> <br>****************************************************************************/ <br> <br>#include "cliptext.h" <br>#include &lt;string.h&gt; <br> <br>HANDLE hInst; <br>HANDLE hAccTable; <br>HWND   hwnd; <br> <br>HANDLE hText = NULL; <br> <br>CHAR szInitialClientAreaText[] =  <br>    "This program demonstrates the use of the Edit menu to copy and " <br>    "paste text to and from the clipboard.  Try using the Copy command "  <br>    "to move this text to the clipboard, and the Paste command to replace " <br>    "this text with data from another application.  \r\n\r\n" <br>    "You might want to try running Notepad and Clipbrd alongside this " <br>    "application so that you can watch the data exchanges take place.  "; <br> <br>HANDLE hData, hClipData;                            /* handles to clip data  */ <br>LPSTR lpData, lpClipData;                           /* pointers to clip data */ <br> <br>/* functions declared here, because of MIPS lack of passing C_DEFINES*/ <br>BOOL InitApplication(HANDLE); <br>BOOL InitInstance(HANDLE, INT); <br>LONG APIENTRY MainWndProc(HWND, UINT, UINT, LONG); <br>BOOL APIENTRY About(HWND, UINT, UINT, LONG); <br>VOID OutOfMemory(VOID); <br> <br>/**************************************************************************** <br> <br>    FUNCTION: WinMain(HANDLE, HANDLE, LPSTR, int) <br> <br>    PURPOSE: calls initialization function, processes message loop <br> <br>****************************************************************************/ <br> <br>int APIENTRY WinMain( <br>    HINSTANCE hInstance, <br>    HINSTANCE hPrevInstance, <br>    LPSTR lpCmdLine, <br>    int nCmdShow <br>    ) <br>{ <br>    MSG msg; <br> <br>    UNREFERENCED_PARAMETER( lpCmdLine ); <br> <br>    if (!hPrevInstance) <br>        if (!InitApplication(hInstance)) <br>            return (FALSE); <br> <br>    if (!InitInstance(hInstance, nCmdShow)) <br>        return (FALSE); <br> <br>    while (GetMessage(&amp;msg, NULL, 0, 0)) { <br> <br>    /* Only translate message if it is not an accelerator message */ <br> <br>        if (!TranslateAccelerator(hwnd, hAccTable, &amp;msg)) { <br>            TranslateMessage(&amp;msg); <br>            DispatchMessage(&amp;msg);  <br>        } <br>    } <br>    return (msg.wParam); <br>} <br> <br> <br>/**************************************************************************** <br> <br>    FUNCTION: InitApplication(HANDLE) <br> <br>    PURPOSE: Initializes window data and registers window class <br> <br>****************************************************************************/ <br> <br>BOOL InitApplication(HANDLE hInstance) <br>{ <br>    WNDCLASS  wc; <br> <br>    wc.style = 0; <br>    wc.lpfnWndProc = (WNDPROC) MainWndProc; <br>    wc.cbClsExtra = 0; <br>    wc.cbWndExtra = 0; <br>    wc.hInstance = hInstance; <br>    wc.hIcon = LoadIcon(NULL, IDI_APPLICATION); <br>    wc.hCursor = LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground = GetStockObject(WHITE_BRUSH);  <br>    wc.lpszMenuName =  "CliptextMenu"; <br>    wc.lpszClassName = "CliptextWClass"; <br> <br>    return (RegisterClass(&amp;wc)); <br>} <br> <br> <br>/**************************************************************************** <br> <br>    FUNCTION:  InitInstance(HANDLE, int) <br> <br>    PURPOSE:  Saves instance handle and creates main window <br> <br>****************************************************************************/ <br> <br>BOOL InitInstance( <br>    HANDLE          hInstance, <br>    INT             nCmdShow) <br>{ <br>    LPSTR           lpszText; <br> <br>    hInst = hInstance; <br> <br>    hAccTable = LoadAccelerators(hInst, "ClipTextAcc"); <br> <br>    if (!(hText  <br>          = GlobalAlloc(GMEM_MOVEABLE,(DWORD)sizeof(szInitialClientAreaText)))) { <br>        OutOfMemory(); <br>        return (FALSE); <br>    } <br>       <br>    if (!(lpszText = GlobalLock(hText))) { <br>        OutOfMemory(); <br>        return (FALSE); <br>    } <br> <br>    strcpy(lpszText, szInitialClientAreaText); <br>    GlobalUnlock(hText); <br> <br>    hwnd = CreateWindow( <br>        "CliptextWClass", <br>        "Cliptext Sample Application", <br>        WS_OVERLAPPEDWINDOW, <br>        CW_USEDEFAULT, <br>        CW_USEDEFAULT, <br>        CW_USEDEFAULT, <br>        CW_USEDEFAULT, <br>        NULL, <br>        NULL, <br>        hInstance, <br>        NULL <br>    ); <br> <br>    if (!hwnd) <br>        return (FALSE); <br> <br>    ShowWindow(hwnd, nCmdShow); <br>    UpdateWindow(hwnd); <br>    return (TRUE); <br> <br>} <br> <br>/**************************************************************************** <br> <br>    FUNCTION: MainWndProc(HWND, unsigned, WORD, LONG) <br> <br>    PURPOSE:  Processes messages <br> <br>    MESSAGES: <br> <br>        WM_COMMAND    - message from menu <br>        WM_INITMENU   - initialize menu <br>        WM_PAINT      - update window <br>        WM_DESTROY    - destroy window <br> <br>    COMMENTS: <br> <br>        WM_INITMENU - when this message is received, the application checks <br>        to see if there is any text data in the clipboard, and enables or <br>        disables the Paste menu item accordingly. <br> <br>        Seclecting the Copy menu item will send the text "Hello Windows" to <br>        the clipboard. <br> <br>        Seclecting the Paste menu item will copy whatever text is in the <br>        clipboard to the application window. <br> <br>****************************************************************************/ <br> <br>LONG APIENTRY MainWndProc(HWND hWnd, UINT message, UINT wParam, LONG lParam) <br>{ <br>    HDC hDC; <br>    PAINTSTRUCT ps; <br>    RECT rectClient; <br>    LPSTR lpszText; <br> <br>    switch (message) { <br> <br>        case WM_INITMENU: <br>                if (wParam == (UINT)GetMenu(hWnd)) { <br>                if (OpenClipboard(hWnd)) { <br>                    if (IsClipboardFormatAvailable(CF_TEXT) <br>                        || IsClipboardFormatAvailable(CF_OEMTEXT)) <br>                        EnableMenuItem((HMENU)wParam, IDM_PASTE, MF_ENABLED); <br>                    else <br>                        EnableMenuItem((HMENU)wParam, IDM_PASTE, MF_GRAYED); <br>                    CloseClipboard(); <br>                    return (TRUE); <br>                } <br>                else                           /* Clipboard is not available */ <br>                    return (FALSE); <br> <br>            } <br>            return (TRUE); <br> <br>        case WM_COMMAND: <br>                switch(LOWORD(wParam)) { <br>                case IDM_ABOUT: <br>    DialogBox(hInst, "AboutBox", hWnd, About); <br>                    break; <br> <br>                /* file menu commands */ <br> <br>                case IDM_NEW: <br>                case IDM_OPEN: <br>                case IDM_SAVE: <br>                case IDM_SAVEAS: <br>                case IDM_PRINT: <br>                    MessageBox ( <br>                          GetFocus () <br>                        , "Command not implemented." <br>                        , "ClipText Sample Application" <br>                        , MB_ICONASTERISK | MB_OK <br>                    ); <br>                    break;   <br> <br>                case IDM_EXIT: <br>                    DestroyWindow(hWnd); <br>                    break; <br>     <br>                /* edit menu commands */ <br> <br>                case IDM_UNDO: <br>                case IDM_CLEAR: <br>                    MessageBox ( <br>                          GetFocus () <br>                        , "Command not implemented." <br>                        , "ClipText Sample Application" <br>                        , MB_ICONASTERISK | MB_OK <br>                    ); <br>                    break;   <br> <br>                case IDM_CUT: <br>                case IDM_COPY: <br> <br>                    if (hText != NULL) { <br> <br>                        /* Allocate memory and copy the string to it */ <br> <br>                        if (!(hData  <br>                             = GlobalAlloc(GMEM_DDESHARE, GlobalSize (hText)))) { <br>                            OutOfMemory(); <br>                            return (TRUE); <br>                        } <br>                        if (!(lpData = GlobalLock(hData))) { <br>                            OutOfMemory(); <br>                            return (TRUE); <br>                        } <br>                        if (!(lpszText = GlobalLock (hText))) { <br>                            OutOfMemory(); <br>                            return (TRUE); <br>                        } <br>                                    strcpy(lpData, lpszText); <br>                        GlobalUnlock(hData); <br>                        GlobalUnlock (hText); <br> <br>                        /* Clear the current contents of the clipboard, and set <br>                         * the data handle to the new string. <br>                         */ <br> <br>                        if (OpenClipboard(hWnd)) { <br>                            EmptyClipboard(); <br>                            SetClipboardData(CF_TEXT, hData); <br>                            CloseClipboard(); <br>                        } <br>                        hData = NULL; <br> <br>                                    if (LOWORD(wParam) == IDM_CUT) { <br>                            GlobalFree (hText); <br>                            hText = NULL; <br>                            EnableMenuItem(GetMenu (hWnd), IDM_CUT, MF_GRAYED); <br>                            EnableMenuItem(GetMenu(hWnd), IDM_COPY, MF_GRAYED); <br>                            InvalidateRect (hWnd, NULL, TRUE); <br>                            UpdateWindow (hWnd); <br>                        } <br>                    } <br> <br>                    return (TRUE); <br> <br>                case IDM_PASTE: <br>                    if (OpenClipboard(hWnd)) { <br> <br>                        /* get text from the clipboard */ <br> <br>                        if (!(hClipData = GetClipboardData(CF_TEXT))) { <br>                            CloseClipboard(); <br>                            break; <br>                        } <br>                        if (hText != NULL) { <br>                            GlobalFree(hText); <br>                        } <br>                        if (!(hText = GlobalAlloc(GMEM_MOVEABLE <br>                                                    , GlobalSize(hClipData)))) { <br>                            OutOfMemory(); <br>                            CloseClipboard(); <br>                            break; <br>                        } <br>                        if (!(lpClipData = GlobalLock(hClipData))) { <br>                            OutOfMemory(); <br>                            CloseClipboard(); <br>                            break; <br>                        } <br>                        if (!(lpszText = GlobalLock(hText))) { <br>                            OutOfMemory(); <br>                            CloseClipboard(); <br>                            break; <br>                        } <br>                        strcpy(lpszText, lpClipData); <br>                        GlobalUnlock(hClipData); <br>                        CloseClipboard(); <br>                        GlobalUnlock(hText); <br>                        EnableMenuItem(GetMenu(hWnd), IDM_CUT, MF_ENABLED); <br>                        EnableMenuItem(GetMenu(hWnd), IDM_COPY, MF_ENABLED); <br> <br>                        /* copy text to the application window */ <br> <br>                        InvalidateRect(hWnd, NULL, TRUE); <br>                        UpdateWindow(hWnd); <br>                        return (TRUE); <br>                    } <br>                    else <br>                        return (FALSE); <br>            } <br>            break; <br> <br>            case WM_SIZE: <br>                InvalidateRect(hWnd, NULL, TRUE); <br>                break; <br> <br>            case WM_PAINT: <br>            hDC = BeginPaint (hWnd, &amp;ps); <br>            if (hText != NULL) { <br>                if (!(lpszText = GlobalLock (hText))) { <br>                    OutOfMemory(); <br>                } else { <br>                            GetClientRect (hWnd, &amp;rectClient); <br>                    DrawText (hDC, lpszText, -1, &amp;rectClient <br>                                , DT_EXTERNALLEADING | DT_NOPREFIX | DT_WORDBREAK); <br>                    GlobalUnlock (hText); <br>                } <br>            } <br>                EndPaint (hWnd, &amp;ps); <br>            break; <br> <br>            case WM_DESTROY: <br>                PostQuitMessage(0); <br>            break; <br> <br>            default: <br>                return (DefWindowProc(hWnd, message, wParam, lParam)); <br>    } <br>    return (0); <br>} <br> <br> <br>/**************************************************************************** <br> <br>    FUNCTION: About(HWND, unsigned, WORD, LONG) <br> <br>    PURPOSE:  Processes messages for "About" dialog box <br> <br>    MESSAGES: <br> <br>        WM_INITDIALOG - initialize dialog box <br>        WM_COMMAND    - Input received <br> <br>****************************************************************************/ <br> <br>BOOL APIENTRY About( HWND hDlg, UINT message, UINT wParam, LONG lParam) <br>{ <br>    switch (message) { <br>            case WM_INITDIALOG: <br>                return (TRUE); <br> <br>            case WM_COMMAND: <br>                if (LOWORD(wParam) == IDOK <br>                       || LOWORD(wParam) == IDCANCEL) { <br> <br>                        EndDialog(hDlg, TRUE); <br>                        return (TRUE); <br>            } <br>                break; <br>    } <br>    return (FALSE); <br>        UNREFERENCED_PARAMETER(lParam); <br>} <br> <br> <br>/**************************************************************************** <br> <br>    FUNCTION: OutOfMemory(void) <br> <br>    PURPOSE:  Displays warning message <br> <br>****************************************************************************/ <br>VOID OutOfMemory() <br>{ <br>    MessageBox( <br>        GetFocus(), <br>        "Out of Memory", <br>        NULL, <br>        MB_ICONHAND | MB_SYSTEMMODAL); <br>    return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

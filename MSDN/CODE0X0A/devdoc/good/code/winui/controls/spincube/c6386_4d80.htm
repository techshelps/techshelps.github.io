<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SPINCUBE.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6390"></a>SPINCUBE.H</h2>
<pre><code>/******************************************************************************\ <br>* <br>*                                  SPINCUBE.H <br>* <br>\******************************************************************************/ <br> <br>#include &lt;custcntl.h&gt; <br> <br> <br> <br>/******************************************************************************\ <br>*                               SYMBOLIC CONSTANTS <br>\******************************************************************************/ <br> <br>#define SPINCUBECLASS           "Spincube" <br>#define SPINCUBEDESCRIPTION     "An animated control" <br>#define SPINCUBEDEFAULTTEXT     ":-)" <br> <br>#define CCHSTYLE                20  // size of style string, i.e. "SS_ERASE" <br> <br>#define NUM_SPINCUBE_STYLES     2 <br> <br>#define SS_ERASE                0x0001  // spincube window styles <br>#define SS_INMOTION             0x0002 <br> <br> <br>#define SPINCUBE_EXTRA          4   // number of extra bytes for spincube class <br> <br>#define SPIN_EVENT              1   // timer event id to repaint control <br>#ifdef _ALPHA_ <br>#define SPIN_INTERVAL           0   // milliseconds between repaints. what <br>                                    //   would be really cool is a way to <br>                                    //   dynamically adjust the interval- <br>                                    //   on real fast machines we might <br>                                    //   almost be able to get decent-looking <br>                                    //   animation! :) <br> <br>#else <br>#define SPIN_INTERVAL           75  // milliseconds between repaints. what <br>                                    //   would be really cool is a way to <br>                                    //   dynamically adjust the interval- <br>                                    //   on real fast machines we might <br>                                    //   almost be able to get decent-looking <br>                                    //   animation! :) <br> <br>#endif <br>#define DID_ERASE               101 // dialog control id's <br>#define DID_INMOTION            102 <br>#define DID_OK                  103 <br> <br>#define GWL_SPINCUBEDATA        0   // offset of control's instance data <br> <br>#define SPINCUBE_REPAINT_BKGND  0x00000001 <br> <br>#define DO_ERASE(hwnd)          GetWindowLong(hwnd,GWL_STYLE) &amp; SS_ERASE \ <br>                                           ? TRUE : FALSE <br> <br>#define IN_MOTION(hwnd)         GetWindowLong(hwnd,GWL_STYLE) &amp; SS_INMOTION \ <br>                                           ? TRUE : FALSE <br> <br>#define REPAINT_BKGND(pSCI)     pSCI-&gt;iOptions&amp;SPINCUBE_REPAINT_BKGND \ <br>                                           ? TRUE : FALSE <br> <br>#define IDS_REGCLASSFAIL      16 <br>#define IDS_UNREGFAIL         17 <br>#define IDS_DLGBOXFAIL        18 <br>#define IDS_ALLOCFAIL         19 <br>#define IDS_CREATEDCFAIL      20 <br>#define IDS_CREATEBITMAPFAIL  21 <br> <br> <br> <br>/******************************************************************************\ <br>*                                    TYPEDEFs <br>\******************************************************************************/ <br> <br>typedef struct <br>{ <br>  HDC      hdcCompat;               // the DC that will contain our off-screen <br>                                    //   image <br>  HBITMAP  hbmSave;                 // Save previous selected bitmap <br>  HBITMAP  hbmCompat;               // The bitmap that will contain the actual <br>                                    //   image, i.e. we will always do our <br>                                    //   drawing on this bmp &amp; then blt the <br>                                    //   result to the screen. <br> <br>  float    fCurrentXRotation;       // Angle (in radians) to rotate cube about <br>  float    fCurrentYRotation;       //   x, y, z axis <br>  float    fCurrentZRotation; <br> <br>  float    fCurrentXRotationInc;    // Amount to inc rotation angle each <br>  float    fCurrentYRotationInc;    //   time we repaint (and are in motion) <br>  float    fCurrentZRotationInc; <br> <br>  int      iCurrentXTranslation;    // Distance (in pels) to translate cube <br>  int      iCurrentYTranslation; <br>  int      iCurrentZTranslation; <br> <br>  int      iCurrentXTranslationInc; // Amount to inc translation distance each <br>  int      iCurrentYTranslationInc; //   time we repaint (and are in motion) <br>  int      iCurrentZTranslationInc; <br> <br>  RECT     rcCubeBoundary;          // Bounding rectangle (in 2D) of the last <br>                                    //   cube drawn.  We invalidate only this <br>                                    //   region when we're doing animation <br>                                    //   and get the WM_TIMER- it's alot more <br>                                    //   efficient that invalidating the whole <br>                                    //   control (there's less screen flashing. <br> <br>  int      iOptions;                // Contains the current options for this <br>                                    //   ctrl, i.e. erase background. <br> <br>} SPINCUBEINFO, *PSPINCUBEINFO; <br> <br> <br> <br>/******************************************************************************\ <br>*                                FUNCTION PROTOTYPES <br>\******************************************************************************/ <br> <br>INT     CALLBACK SpincubeSizeToText (DWORD, DWORD, HFONT,  LPSTR); <br>BOOL    CALLBACK SpincubeStyle      (HWND,  LPCCSTYLE); <br>LRESULT CALLBACK SpincubeWndProc    (HWND,  UINT,  WPARAM, LPARAM); <br>LRESULT CALLBACK SpincubeDlgProc    (HWND,  UINT,  WPARAM, LPARAM); </code></pre>
<p>&nbsp;</p></body>
</HTML>

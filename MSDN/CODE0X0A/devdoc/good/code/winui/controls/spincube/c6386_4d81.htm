<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SPINTEST.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6391"></a>SPINTEST.C</h2>
<pre><code>/******************************************************************************\ <br>* <br>*  PROGRAM:     SPINTEST.C <br>* <br>*  PURPOSE:     Demonstrates the use of the SPINCUBE custom control. <br>* <br>*  FUNCTIONS:   WinMain        - standard stuff; also loads the <br>*                                  SPINCUBE.DLL and creates a couple <br>*                                  of spincube controls. <br>*               MainWndProc    - generic window procedure. <br>*               SpintestDlgProc- generic dialog procedure. <br>*               AboutDlgProc   - processes about dialog messages <br>* <br>*                           Microsoft Developer Support <br>*                  Copyright 1992 - 1998 Microsoft Corporation <br>* <br>\******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "spintest.h" <br> <br>// <br>// The exported variables from SPINCUBE.C. <br>// <br>//   Although pointers to these vars are actually exported, <br>//    the compiler will take care of that for us. <br>// <br> <br>extern int __declspec(dllimport) giNumSpincubesThisProcess; <br>extern int __declspec(dllimport) giNumSpincubesAllProcesses; <br> <br> <br>// <br>// function prototype for looking up string resources <br>// <br> <br>LPTSTR GetStringRes (int); <br> <br> <br>/******************************************************************************\ <br>* <br>*  FUNCTION:    WinMain (standard WinMain INPUTS/RETURNS) <br>* <br>\******************************************************************************/ <br> <br>int WINAPI WinMain (HINSTANCE hInstance,HINSTANCE hPrevInstance, LPSTR lpCmdLine, <br>                   int     nCmdShow) <br>{ <br>  WNDCLASS wc; <br>  HWND   hwnd; <br>  MSG    msg; <br>  RECT   rect; <br>  WORD   i; <br> <br>  wc.style         = 0; <br>  wc.lpfnWndProc   = (WNDPROC) MainWndProc; <br>  wc.cbClsExtra    = 0; <br>  wc.cbWndExtra    = 0; <br>  wc.hInstance     = hInstance; <br>  wc.hIcon         = LoadIcon (hInstance, "spintesticon"); <br>  wc.hCursor       = LoadCursor (NULL, IDC_ARROW); <br>  wc.hbrBackground = GetStockObject (WHITE_BRUSH); <br>  wc.lpszMenuName  = (LPSTR) "Menu"; <br>  wc.lpszClassName = (LPSTR) "Main"; <br> <br>  if (!RegisterClass (&amp;wc)) <br>  { <br>    MessageBox (NULL, <br>                GetStringRes (IDS_REGCLASSFAIL), <br>                "SPINTEST", MB_OK | MB_ICONEXCLAMATION); <br>    return(FALSE); <br>  } <br> <br>  ghInst = hInstance; <br>  if (!(hwnd = CreateWindow ("Main", <br>                             GetStringRes (IDS_WINDOWTITLE), <br>                             WS_OVERLAPPEDWINDOW, <br>                             CW_USEDEFAULT, CW_USEDEFAULT, <br>                             CW_USEDEFAULT, CW_USEDEFAULT, <br>                             NULL, NULL, ghInst, NULL))) <br>    return 0; <br> <br> <br>  // <br>  // Create a couple of SpinCube custom controls, we'll size them later in <br>  //   the WM_SIZE message handler <br>  // <br> <br>  for (i = 0; i &lt; 4; i++) <br> <br>    gahwndSpin[i] = CreateWindow ("Spincube", "", <br>                                  WS_VISIBLE | WS_CHILD | <br>                                  SS_INMOTION | SS_ERASE, <br>                                  0, 0, 0, 0, hwnd, NULL, NULL, NULL); <br> <br> <br>  // <br>  // Delete the SS_ERASE to the 1st &amp; 4th controls so we get the <br>  //   trailing cubes effect. <br>  // <br> <br>  SetWindowLong (gahwndSpin[0], GWL_STYLE, <br>                 GetWindowLong (gahwndSpin[0], GWL_STYLE) &amp; ~ SS_ERASE); <br>  SetWindowLong (gahwndSpin[3], GWL_STYLE, <br>                 GetWindowLong (gahwndSpin[3], GWL_STYLE) &amp; ~ SS_ERASE); <br> <br> <br>  // <br>  // Send ourself a WM_SIZE so the controls will get sized appropriately <br>  // <br> <br>  GetClientRect (hwnd, &amp;rect); <br>  SendMessage (hwnd, WM_SIZE, 0, <br>               MAKELONG((WORD)rect.right,(WORD)rect.bottom)); <br> <br>  ShowWindow (hwnd, nCmdShow); <br> <br>  while (GetMessage (&amp;msg, NULL, 0, 0)) <br>  { <br>    TranslateMessage (&amp;msg); <br>    DispatchMessage  (&amp;msg); <br>  } <br> <br>  return (msg.wParam); <br>} <br> <br> <br> <br>/******************************************************************************\ <br>* <br>*  FUNCTION:    MainWndProc (standard window procedure INPUTS/RETURNS) <br>* <br>\******************************************************************************/ <br> <br>LRESULT CALLBACK MainWndProc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>  switch (msg) <br>  { <br>    case WM_COMMAND: <br> <br>      switch (LOWORD(wParam)) <br>      { <br>        case IDM_DLGEDITDIALOG: <br> <br>          DialogBox (ghInst, (LPCTSTR) "SpintestDlg", hwnd, (DLGPROC) DlgProc); <br>          break; <br> <br>        case IDM_SPINTESTSTATS: <br> <br>          DialogBox (ghInst, (LPCTSTR) "Stats", hwnd, (DLGPROC) DlgProc); <br>          break; <br> <br>        case IDM_ABOUT: <br> <br>          DialogBox (ghInst, (LPCTSTR)"About", hwnd, (DLGPROC) DlgProc); <br>          break; <br> <br>      } <br>      break; <br> <br>    case WM_SIZE: <br>    { <br>      // <br>      // Resize the controls such that each cover half the client area <br>      //   (plus a little border). <br>      // <br> <br>      int width  = (int) LOWORD(lParam); <br>      int height = (int) HIWORD(lParam); <br> <br>      SetWindowPos (gahwndSpin[0], NULL, <br>                    BORDER, BORDER, <br>                    width/2 - BORDER, height/2 - BORDER, <br>                    SWP_SHOWWINDOW); <br>      SetWindowPos (gahwndSpin[1], NULL, <br>                    width/2 + BORDER, BORDER, <br>                    width/2 - 2*BORDER, height/2 - BORDER, <br>                    SWP_SHOWWINDOW); <br>      SetWindowPos (gahwndSpin[2], NULL, <br>                    BORDER, height/2 + BORDER, <br>                    width/2 - BORDER, height/2 - 2*BORDER, <br>                    SWP_SHOWWINDOW); <br>      SetWindowPos (gahwndSpin[3], NULL, <br>                    width/2 + BORDER, height/2 + BORDER, <br>                    width/2 - 2*BORDER, height/2 - 2*BORDER, <br>                    SWP_SHOWWINDOW); <br>      break; <br>    } <br> <br>    case WM_DESTROY: <br> <br>      PostQuitMessage (0); <br>      break; <br> <br>    default: <br> <br>      return (DefWindowProc (hwnd, msg, wParam, lParam)); <br>  } <br>  return 0; <br>} <br> <br> <br> <br>/******************************************************************************\ <br>* <br>*  FUNCTION:    DlgProc (standard dialog procedure INPUTS/RETURNS) <br>* <br>*  COMMENTS:    Our common dlg proc (why have 3 that do the same thing???) <br>* <br>\******************************************************************************/ <br> <br>LRESULT CALLBACK DlgProc (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) <br>{ <br>  switch (message) <br>  { <br>    case WM_INITDIALOG: <br> <br>      // <br>      // If this dlg the "Stats" dlg fill in the appropriate fields. <br>      //   If not these calls will just fail. <br>      // <br>      // If the references to the giNum* vars are commented out &amp; <br>      //   the program gets rebuilt don't be surprised if no spincubes <br>      //   appear- since no references to spincube.lib the linker will <br>      //   infer that it is not needed, &amp; will not cause it to get <br>      //   loaded. You'll need to make a call to LoadLibrary ("SPINCUBE.DLL") <br>      //   prior to calling CreateWindow ("SPINCUBE"...). <br>      // <br> <br>      SetDlgItemInt (hwnd, 500, giNumSpincubesThisProcess, TRUE); <br>      SetDlgItemInt (hwnd, 501, giNumSpincubesAllProcesses, TRUE); <br>      return (TRUE); <br> <br>    case WM_COMMAND: <br> <br>      if (LOWORD(wParam) == IDOK) <br> <br>        EndDialog (hwnd, TRUE); <br> <br>      return (TRUE); <br>  } <br>  return (FALSE); <br>} <br> <br> <br> <br>/******************************************************************************\ <br>* <br>*  FUNCTION:    GetStringRes (int id INPUT ONLY) <br>* <br>*  COMMENTS:    Load the resource string with the ID given, and return a <br>*               pointer to it.  Notice that the buffer is common memory so <br>*               the string must be used before this call is made a second time. <br>* <br>\******************************************************************************/ <br> <br>LPTSTR   GetStringRes (int id) <br>{ <br>  static TCHAR buffer[MAX_PATH]; <br> <br>  buffer[0]=0; <br>  LoadString (GetModuleHandle (NULL), id, buffer, MAX_PATH); <br>  return buffer; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

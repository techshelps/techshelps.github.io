<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CDTEST.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6311"></a>CDTEST.C</h2>
<pre><code>/************************************************************************ <br> <br>  File: cdtest.c <br> <br>  Purpose:  Contains the functions which handle the main window's functionality -- <br>            creating the main window, handling menu commands, exiting the program. <br> <br>  Functions: <br> <br>           WinMain()           - Program's entry point <br> <br>           InitApplication()   - Registers class and some user defined messages <br> <br>           InitInstance()      - Creates main window <br> <br>           MainWndProc()       - Window procedure for main window <br> <br>           HandleTheCommand()  - Processes all WM_COMMAND messages <br> <br>           InitGlobals()       - Initializes all global variables that need to <br>                                 be initialized at startup <br> <br>           MyAtol()            - Converts an ASCII string in either hexi- <br>                                 decimal or decimal notation to a LONG. <br> <br>           AboutProc()         - Callback function for CDTEST's about box. <br> <br>************************************************************************/ <br> <br> <br> <br>#include &lt;windows.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;winnls.h&gt; <br>#include "cdtest.h" <br>#include "colors.h" <br>#include "save.h" <br>#include "print.h" <br>#include "title.h" <br>#include "replace.h" <br>#include "open.h" <br>#include "font.h" <br>#include "find.h" <br> <br> <br> <br> <br> <br>/* Some defines, global variables, and function declarations */ <br> <br>#define szClass TEXT("cdtestclass") <br>#define szIcon  TEXT("theicon") <br>#define szMenu  TEXT("themenu") <br> <br>#ifdef UNICODE <br>  #define szTitle TEXT("Common Dialog Test App - Unicode Version") <br>#else <br>  #define szTitle TEXT("Common Dialog Test App - ANSI Version") <br>#endif <br> <br> <br>void InitGlobals(void) ; <br> <br>UINT uMode = IDM_HEXMODE ; <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br> <br>  Function: WinMain(HINSTANCE, HINSTANCE, LPSTR, int) <br> <br>  Purpose: <br> <br>    - Contains standard windows entry point <br> <br>    - Initializes the application <br> <br>    - Contains the main message loop <br> <br>  Returns: Final msg.wParam <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br> <br>int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) <br>{ <br> <br>  MSG msg; <br> <br> <br>  UNREFERENCED_PARAMETER( lpCmdLine ); <br> <br> <br>  if (!hPrevInstance) <br>    if (!InitApplication(hInstance)) <br>        return (FALSE); <br> <br>  if (!InitInstance(hInstance, nCmdShow)) <br>    return (FALSE); <br> <br>  while (GetMessage(&amp;msg, 0, 0, 0)) <br>  { <br>    TranslateMessage(&amp;msg); <br>    DispatchMessage(&amp;msg); <br>  } <br> <br> <br>  return (msg.wParam); <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br> <br>  Function: InitApplication(HANDLE) <br> <br> <br>  Purpose: <br> <br>    - Fills in the WNDCLASS structure <br> <br>    - Registers messages needed to communicate with the common dialogs <br> <br>    - Registers the window class <br> <br>  Returns: The return value of RegisterClass().  If this fails then the <br>           whole program fails. <br> <br>  Comments: <br> <br> <br>************************************************************************/ <br> <br> <br>BOOL InitApplication(HANDLE hInstance)      <br>{ <br>  WNDCLASS  wc; <br> <br>  wc.style = 0; <br>  wc.lpfnWndProc = (WNDPROC)MainWndProc; <br>  wc.cbClsExtra = 0; <br>  wc.cbWndExtra = 0; <br>  wc.hInstance = hInstance; <br>  wc.hIcon = LoadIcon(hInstance, szIcon) ; <br>  wc.hCursor = LoadCursor(NULL, IDC_ARROW); <br>  wc.hbrBackground = GetStockObject(WHITE_BRUSH); <br>  wc.lpszMenuName = szMenu ; <br>  wc.lpszClassName = szClass ; <br> <br>   <br>  InitGlobals() ; <br> <br>   <br>  /* Register any messages that the common dialogs will need to  <br>     communicate with this app. */ <br> <br>  nFindMsg       = RegisterWindowMessage((LPTSTR) FINDMSGSTRING) ; <br>  nOpenShareVMsg = RegisterWindowMessage((LPTSTR) SHAREVISTRING) ; <br>  nHelpMessage   = RegisterWindowMessage((LPTSTR) HELPMSGSTRING) ; <br> <br> <br>  return (RegisterClass(&amp;wc)); <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br> <br> Function: InitInstance(HANDLE, int) <br> <br> <br> Purpose: <br> <br>   - Creates the main window <br> <br>   - Shows the main window <br> <br> Returns: FALSE if it cannot create the window, TRUE if it can. <br> <br> <br> Comments: <br> <br> <br>************************************************************************/ <br> <br> <br>BOOL InitInstance(HANDLE hInstance, int nCmdShow) <br>{ <br>    HWND hWnd; <br>    DWORD dwFlags = WS_OVERLAPPED | WS_CAPTION | WS_MINIMIZEBOX | WS_SYSMENU ; <br> <br>     <br>    /* save the instance handle in a global variable */ <br> <br>    hInst = hInstance; <br> <br> <br>    /* Create the main window */ <br> <br>    hWnd = CreateWindow(szClass, szTitle, dwFlags,  <br>                        10, 10, 400, 200, NULL, NULL, hInstance, NULL) ; <br> <br>    if (!hWnd) <br>        return (FALSE); <br> <br>    ShowWindow(hWnd, SW_SHOWNORMAL) ; <br>    UpdateWindow(hWnd); <br> <br>    return (TRUE); <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br> <br>  Function: MainWndProc(HWND, UINT, UINT, LONG) <br> <br>  Purpose: <br> <br>    - Is the callback function that handles all messages for the main window <br> <br>  Returns: <br> <br>    - Returns DefWindowProc() for any message it does not explicitly <br>      respond to. <br> <br>  Comments: <br> <br> <br>************************************************************************/ <br> <br> <br>LONG APIENTRY MainWndProc(HWND hWnd, UINT message, UINT wParam, LONG lParam) <br>{ <br>    switch (message) <br>    { <br>      case WM_CREATE: <br>        CheckMenuItem(GetMenu(hWnd), IDM_HEXMODE, MF_CHECKED) ; <br>        break ; <br> <br>      case WM_COMMAND: <br>        HandleTheCommand(hWnd, wParam, lParam) ; <br>        break ; <br> <br>      case WM_DESTROY: <br>          PostQuitMessage(0); <br>          break; <br> <br>      default: <br>          return (DefWindowProc(hWnd, message, wParam, lParam)); <br>          break ; <br>    } <br>    return (0L); <br>} <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br> <br>  Function: HandleTheCommand(HWND, UINT, UINT) <br> <br>  Purpose: <br> <br>    - Handles all WM_COMMAND messages passed to the MainWndProc().  The <br>      menu or control ID value for Win32 WM_COMMAND messages is contained <br>      in the low word of the wParam parameter. <br> <br>  Returns: Nothing. <br> <br>  Comments: <br> <br> <br>************************************************************************/ <br> <br> <br>void HandleTheCommand(HWND hWnd, UINT wParam, LONG lParam) <br>{ <br> <br>  switch (LOWORD(wParam)) <br>  { <br>    case IDM_COLOR:                //For any of the dialog creation <br>      DoColorsDialog(hWnd) ;       //commands, call the appropriate <br>      break ;                      //function.  The function will <br>                                   //create the dialog... <br>    case IDM_FONT: <br>      DoFontDialog(hWnd) ; <br>      break ; <br> <br>    case IDM_TITLE: <br>      DoTitleDialog(hWnd) ; <br>      break ; <br> <br>    case IDM_FIND: <br>      DoFindDialog(hWnd) ; <br>      break ; <br> <br>    case IDM_OPEN: <br>      DoOpenDialog(hWnd) ; <br>      break ; <br> <br>    case IDM_SAVE: <br>      DoSaveDialog(hWnd) ; <br>      break ; <br> <br>    case IDM_PRINT: <br>      DoPrintDialog(hWnd) ; <br>      break ; <br> <br>    case IDM_REPLACE: <br>      DoReplaceDialog(hWnd) ; <br>      break ; <br> <br>    case IDM_EXIT: <br>      PostQuitMessage(0) ; <br>      break ; <br> <br>    case IDM_HEXMODE: <br>    case IDM_DECIMALMODE: <br> <br>      /* We need to maintain a global variable that will indicate what <br>         kind of number processing we have to do.  First, check the <br>         menu item corresponding to the new mode... */ <br> <br>      CheckMenuItem(GetMenu(hWnd), uMode, MF_UNCHECKED) ; <br>      uMode = wParam ; <br>      CheckMenuItem(GetMenu(hWnd), uMode, MF_CHECKED) ; <br> <br> <br>      /* and then create an appropriate filter for wsprintf() type <br>         functions */ <br> <br>      if (uMode == IDM_HEXMODE) <br>      { <br>        lstrcpy(szShortFilter, TEXT("%x")) ; <br>        lstrcpy(szLongFilter, TEXT("%lx")) ; <br>      } <br>      if (uMode == IDM_DECIMALMODE) <br>      { <br>        lstrcpy(szShortFilter, TEXT("%d")) ; <br>        lstrcpy(szLongFilter, TEXT("%ld")) ; <br>      } <br> <br>      break ; <br> <br> <br>    case IDM_ABOUT: <br>       DialogBox(hInst, TEXT("about"), hWnd, AboutProc) ; <br>       break ; <br> <br> <br>    default: break ; <br>  } <br> <br>  return ; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br> <br>  Function: InitGlobals(void) <br> <br>  Purpose: <br> <br>    - Any global variables can be initialized here since this function is <br>      called on app startup. <br> <br>  Returns: Nothing <br> <br>  Comments: <br> <br> <br>************************************************************************/ <br> <br> <br>void InitGlobals(void) <br>{ <br> <br>  /* not really too much to do here.  Create a hex wsprintf() filter since <br>     the app starts off in Hex mode. */ <br> <br>  lstrcpy(szShortFilter, TEXT("%x")) ; <br>  lstrcpy(szLongFilter, TEXT("%lx")) ; <br> <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br> <br>  Function: MyAtol(LPTSTR, BOOL, LPBOOL) <br> <br>  Purpose: <br> <br>    - This function will convert an ascii string to a LONG. <br> <br>  Returns: <br> <br>    - If it receives an invalid ascii character, it will return 0 and <br>      set the LPBOOL variable to false... <br> <br>  Comments: <br> <br>      Since the function may need to deal with either a hex number or a decimal <br>      number, it should use a variable as a multiplier. <br> <br> <br>************************************************************************/ <br> <br> <br>LONG MyAtol(LPTSTR szString, BOOL bHex, LPBOOL bSuccess) <br>{ <br>  LPTSTR p ; <br>  LONG l ; <br>  LONG lMultiplier ; <br>  BOOL bDigit ; <br> <br>  if (bHex) <br>    lMultiplier = 16 ; <br>  else <br>    lMultiplier = 10 ; <br> <br>  p = szString ; <br>  l = 0 ; <br> <br>  while (*p)      //while chars <br>  { <br>     bDigit = FALSE ;  //set to false for each char that we look at <br> <br>     if (*p &gt;= (TCHAR) '0' &amp;&amp; *p &lt;= (TCHAR) '9')  //is it an ascii char ? <br>     { <br>       bDigit = TRUE ; <br>       l+=(*p - (TCHAR) '0') ; <br>     } <br> <br>     if (bHex) <br>     { <br>       if (*p &gt;= (TCHAR) 'A' &amp;&amp; *p &lt;= (TCHAR) 'F')  //or hex? <br>       { <br>         l+=(*p - (TCHAR) 'A' + 10) ; <br>         bDigit = TRUE ; <br>       } <br> <br>       if (*p &gt;= (TCHAR) 'a' &amp;&amp; *p &lt;= (TCHAR) 'f')  <br>       { <br>         l+=(*p - (TCHAR) 'a' + 10) ; <br>         bDigit = TRUE ; <br>       } <br> <br>     } <br> <br>     if (bDigit == FALSE) <br>     { <br>       *bSuccess = FALSE ; <br>       return 0 ; <br>     } <br> <br>     p++ ;               //get next char <br> <br>     if (*p)             //if there is going to be at least one more char <br>       l*=lMultiplier ;  //then multiply what we have by the multiplier... <br>  } <br> <br>  *bSuccess = TRUE ; <br> <br>  return l ;             //success! return the value. <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br> <br>  Function: AboutProc(HWND, UINT, UINT, LONG) <br> <br>  Purpose:  Callback function for the about dialog box. <br> <br> <br>  Returns:  BOOL - FALSE ... <br> <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br> <br>BOOL APIENTRY AboutProc(HWND hwnd, UINT msg, UINT wParam, LONG lParam) <br>{ <br> <br>  if (msg == WM_INITDIALOG) <br>    return TRUE; <br>  if ( <br>       (msg == WM_COMMAND) &amp;&amp; <br>       (LOWORD(wParam) == IDCANCEL) <br>     ) <br> <br>     EndDialog(hwnd, FALSE) ; <br> <br>  else <br>    return FALSE ; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

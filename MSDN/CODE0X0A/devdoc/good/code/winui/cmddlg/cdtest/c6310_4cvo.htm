<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PRINT.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6324"></a>PRINT.C</h2>
<pre><code>/************************************************************************ <br> <br>  File: print.c <br> <br>  Purpose:  To manage CDTEST's print dialog box. <br> <br> <br>  Functions: <br> <br>    DoPrintDlg()            -- Creates CDTEST's print dialog box. <br> <br>    PrintProc()             -- Callback function for CDTEST's print dialog box. <br> <br>    DevnamesProc()          -- Callback function for CDTESTS Devnames dlg box. <br> <br>    DevmodeProc()           -- Callback function for CDTESTS Devmode dlg box. <br> <br>    InitPrintStruct()       -- Fills a PRINTDLG struct with some default values. <br> <br>    FillPrintDlg()          -- Fills CDTEST's print dialog with contents of a <br>                               PRINTDLG structure. <br> <br>    GetPrintDlg()           -- Retrieves the users edits from CDTEST's print dlg. <br> <br>    FillDevnamesDlg()       -- Fills CDTEST's Devnames dialog with the contents <br>                               of a DEVNAMES structure. <br> <br>    GetDevnamesDlg()        -- Retrieves the user's edits from CDTEST's devnames dlg. <br> <br>    FillDevmodeDlg()        -- Fills CDTEST's devmode dialog with the contents of <br>                               a DEVMODE structure. <br> <br>    GetDevmodeDlg()         -- Retrieves the user's edits from CDTEST's devmode dlg. <br> <br>    GetPrintDlgHandle()     -- Loads and returns a handle to a Print dlg custom template. <br> <br>    GetSetupDlgHandle()     -- Loads and returns a handle to a Setup dlg custom template. <br> <br>    PrintHookProc()         -- Callback function for PRINTDLG-&gt;lpfnPrintHook and <br>                               for PRINTDLG-&gt;lpfnSetupHook <br> <br>    PrintMultiProc1()       -- Starting address for multithread option thread 1 <br> <br>    PrintMultiProc2()       -- Starting address for multithread option thread 2 <br> <br>    MultiThreadPrintDlg()   -- Creates two threads which each call PrintDlg() <br> <br>    EnablePrintControls()   -- Enables or disables CDTEST's print dlg controls. <br> <br>    DoPrintDlgStuff()       -- Calls PrintDlg() <br> <br>************************************************************************/ <br> <br> <br>#include &lt;windows.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;winnls.h&gt; <br>#include "cdtest.h" <br>#include "print.h" <br>#include "devnames.h" <br>#include "devmode.h" <br>#include "dlgs.h" <br> <br> <br> <br>/* Externs, prototypes, variable declarations for print.c */ <br> <br>extern UINT uMode ; <br>extern LONG MyAtol(LPTSTR, BOOL, LPBOOL) ; <br>UINT APIENTRY PrintHookProc(HWND hwnd, UINT msg, UINT wParam, LONG lParam) ; <br>void InitPrintStruct(HWND, LPPRINTDLG) ; <br>void FillPrintDlg(HWND, LPPRINTDLG) ; <br>void GetPrintDlg(HWND, LPPRINTDLG) ; <br>void FillDevnamesDlg(HWND, LPPRINTDLG) ; <br>void GetDevnamesDlg(HWND, LPPRINTDLG) ; <br>void FillDevmodeDlg(HWND, LPPRINTDLG) ; <br>void GetDevmodeDlg(HWND, LPPRINTDLG) ; <br>HANDLE GetPrintDlgHandle(void) ; <br>HANDLE GetSetupDlgHandle(void) ; <br>void DoPrintDlgStuff(HWND, LPPRINTDLG) ; <br> <br>HANDLE hResPrint ; <br>HANDLE hDialogPrint ; <br>PRINTDLG pd ; <br>HANDLE hDevNames ; <br>HANDLE hDevMode ; <br> <br>TCHAR szDriverOffset[100] ; <br>TCHAR szDeviceOffset[100] ; <br>TCHAR szOutputOffset[100] ; <br>TCHAR szPrintTempName[40] ; <br>TCHAR szSetupTempName[40] ; <br> <br> <br>/* Multithreading function declarations, variables */ <br> <br>DWORD PrintMultiProc1(LPDWORD) ; <br>DWORD PrintMultiProc2(LPDWORD) ; <br>void MultiThreadPrintDlg(void) ; <br>void EnablePrintControls(HWND, BOOL) ; <br> <br>HANDLE hPrintThread1 ; <br>HANDLE hPrintThread2 ; <br>DWORD dwPrintThreadID1 ; <br>DWORD dwPrintThreadID2 ; <br>DWORD dwPrintThreadParm1 ; <br>DWORD dwPrintThreadParm2 ; <br>PRINTDLG pdThread1 ; <br>PRINTDLG pdThread2 ; <br>HWND hwndMainPrint ; <br>int nOpenDialogCount ; <br> <br>HBRUSH hBrushDlg ; <br>HBRUSH hBrushEdit ;    //brush handles for new colors done with hook proc <br>HBRUSH hBrushButton ; <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: DoPrintDialog(HWND) <br> <br>  Purpose:  Creates CDTEST's print dialog box. <br> <br>  Returns:  Nothing. <br> <br>  Comments: There is only one dialog for both Print Setup and Print Print. <br>            The Print Print dialog is the default.  To create the Print <br>            Setup dialog, enter the value for PD_PRINTSETUP into the <br>            "Flags" edit box and click OK. <br> <br>************************************************************************/ <br> <br>void DoPrintDialog(HWND hwnd) <br>{ <br> <br> <br>  DialogBox(hInst, MAKEINTRESOURCE(ID_PRINTDIALOG), <br>            hwnd, PrintProc) ; <br> <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: PrintProc(HWND, UINT, UINT, LONG) <br> <br>  Purpose:  Callback function for CDTEST's print dialog box. <br> <br>  Returns:  TRUE or FALSE depending on the situation/message. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>BOOL APIENTRY PrintProc(HWND hwnd, UINT msg, UINT wParam, LONG lParam) <br>{ <br>  switch (msg) <br>  { <br>    case WM_INITDIALOG: <br> <br>        InitPrintStruct(hwnd, &amp;pd) ; <br>        FillPrintDlg(hwnd, &amp;pd) ; <br> <br>        *(&amp;pdThread1) = *(&amp;pdThread2) = *(&amp;pd) ; <br> <br>        hwndMainPrint = hwnd ; <br> <br>        nOpenDialogCount = 0 ; <br> <br>        SetFocus(GetDlgItem(hwnd, ID_STRUCTSIZEP)) ; <br> <br>        break ; <br> <br> <br>    case UMSG_DECREMENTDLGCOUNT: //user defined message that is send when <br>                                 //each thread created when multithreading ends <br>        nOpenDialogCount-- ; <br> <br>        if (nOpenDialogCount == 0)               //once both multitheading dlgs <br>            EnablePrintControls(hwnd, TRUE) ;   //are done, enable the controls again <br> <br>        break ; <br> <br> <br>    case WM_COMMAND: <br>    { <br>        switch (LOWORD(wParam)) <br>        { <br>          case IDOK: <br>            GetPrintDlg(hwnd, &amp;pd) ; <br>            DoPrintDlgStuff(hwnd, &amp;pd) ; <br>            break ; <br> <br>          case IDCANCEL: <br> <br>            if (pd.hDC) <br>              ReleaseDC(hwnd, pd.hDC) ; <br> <br>            EndDialog(hwnd, FALSE) ; <br>            break ; <br> <br>          case ID_RESETPRINT: <br>            SetFocus(GetDlgItem(hwnd, ID_STRUCTSIZEP)) ; <br>            InitPrintStruct(hwnd, &amp;pd) ; <br>            FillPrintDlg(hwnd, &amp;pd) ; <br>            SendDlgItemMessage(hwnd, ID_PRESETUPP,   BM_SETCHECK, (WPARAM)0, (LPARAM)0) ; <br>            SendDlgItemMessage(hwnd, ID_PREPRINTP,   BM_SETCHECK, (WPARAM)0, (LPARAM)0) ; <br>            SendDlgItemMessage(hwnd, ID_NULLSTRUCTP, BM_SETCHECK, (WPARAM)0, (LPARAM)0) ; <br>            break ; <br> <br>          case ID_EDITDEVNAMES: <br>            DialogBox(hInst, MAKEINTRESOURCE(ID_DEVNAMESDIALOG), <br>                      hwnd, DevnamesProc) ; <br>            break ; <br> <br>          case ID_EDITDEVMODE: <br>            DialogBox(hInst, MAKEINTRESOURCE(ID_DEVMODEDIALOG), <br>                      hwnd, DevmodeProc) ; <br>            break ; <br> <br>          case ID_MULTITHREADPRINT: <br>            nOpenDialogCount = 2 ; <br>            EnablePrintControls(hwnd, FALSE) ; <br>            MultiThreadPrintDlg() ; <br>            break ; <br> <br>          default: break ; <br>        } <br>    } <br> <br>    default: <br> <br>      /* If the help button is pressed in the PrintDlg() dialog box, <br>         it will send a message Registered with RegisterWindowMessage() <br>         to the parent window.  The message nHelpMessage was registered <br>         at application startup */ <br> <br>      if (msg == nHelpMessage) <br>        MessageBox(GetForegroundWindow(), TEXT("Hello from the help button"), <br>                   TEXT("Print Help Button"), MB_OK | MB_APPLMODAL) ; <br>      break ; <br>  } <br> <br>  return FALSE ; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: DevnamesProc(HWND, UINT, UINT, LONG) <br> <br>  Purpose:  Callback function for the Devnames dialog box <br> <br>  Returns:  TRUE or FALSE depending on situation / message <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>BOOL APIENTRY DevnamesProc(HWND hwnd, UINT msg, UINT wParam, LONG lParam) <br>{ <br>  switch (msg) <br>  { <br>    case WM_INITDIALOG: <br>        FillDevnamesDlg(hwnd, &amp;pd) ; <br>        break ; <br> <br>    case WM_COMMAND: <br>    { <br>        switch (LOWORD(wParam)) <br>        { <br>          case IDOK: <br>            GetDevnamesDlg(hwnd, &amp;pd) ; <br>            EndDialog(hwnd, TRUE) ; <br>            break ; <br> <br>          case IDCANCEL: <br>            EndDialog(hwnd, FALSE) ; <br>            break ; <br> <br>          default: break ; <br>        } <br>    } <br> <br>    default: break ; <br>  } <br> <br>  return FALSE ; <br>} <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: DevmodeProc(HWND, UINT, UINT, LONG) <br> <br>  Purpose:  Callback function for the Devmode dialog box <br> <br>  Returns:  TRUE or FALSE depending on situation / message <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>BOOL APIENTRY DevmodeProc(HWND hwnd, UINT msg, UINT wParam, LONG lParam) <br>{ <br>  switch (msg) <br>  { <br>    case WM_INITDIALOG: <br>        FillDevmodeDlg(hwnd, &amp;pd) ; <br>        break ; <br> <br>    case WM_COMMAND: <br>    { <br>        switch (LOWORD(wParam)) <br>        { <br>          case IDOK: <br>            GetDevmodeDlg(hwnd, &amp;pd) ; <br>            EndDialog(hwnd, TRUE) ; <br>            break ; <br> <br>          case IDCANCEL: <br>            EndDialog(hwnd, FALSE) ; <br>            break ; <br> <br>          default: break ; <br>        } <br>    } <br> <br>    default: break ; <br>  } <br> <br>  return FALSE ; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: InitPrintStruct(HWND, LPPRINTDLG) <br> <br>  Purpose:  Fills a PRINTDLG structure with some default values. <br> <br>  Returns:  Nothing. <br> <br>  Comments: <br> <br>    In order to fill in the hDevMode and hDevNames PRINTDLG structure <br>    elements, a call to PrintDlg() must be made with the <br>    (PD_RETURNDEFAULT | PD_RETURNDC) flag bits set. <br> <br>************************************************************************/ <br> <br>void InitPrintStruct(HWND hwnd, LPPRINTDLG ppd) <br>{ <br>  DWORD dwTempFlags = 0 ; <br> <br>  ppd-&gt;lStructSize = sizeof(PRINTDLG) ; <br>  ppd-&gt;hwndOwner = hwnd ; <br>  ppd-&gt;hDevMode = (HANDLE) 0 ; <br>  ppd-&gt;hDevNames = (HANDLE) 0 ; <br>  ppd-&gt;hDC = (HDC) 0 ; <br>  ppd-&gt;Flags = PD_RETURNDC | PD_COLLATE | PD_SHOWHELP | PD_PAGENUMS ; <br>  ppd-&gt;nFromPage = 1 ; <br>  ppd-&gt;nToPage = 10 ; <br>  ppd-&gt;nMinPage = 0 ; <br>  ppd-&gt;nMaxPage = 9 ; <br>  ppd-&gt;nCopies = 1000 ; <br>  ppd-&gt;hInstance = (HANDLE) hInst ; <br>  ppd-&gt;lCustData = 0L ; <br> <br>  ppd-&gt;lpfnPrintHook = PrintHookProc ; <br>  ppd-&gt;lpfnSetupHook = PrintHookProc ; <br> <br>  lstrcpy(szPrintTempName, TEXT("prtemp1")) ; <br>  ppd-&gt;lpPrintTemplateName = szPrintTempName ; <br> <br>  lstrcpy(szSetupTempName, TEXT("prtemp2")) ; <br>  ppd-&gt;lpSetupTemplateName = szSetupTempName ; <br> <br>  ppd-&gt;hPrintTemplate = (HANDLE) 0 ;   //these are unknown right now <br>  ppd-&gt;hSetupTemplate = (HANDLE) 0 ; <br> <br> <br>  /* Let's fill the hDevMode and hDevNames structures. */ <br>  /* This call should just return handles to structures of this */ <br>  /* type filled with the info for the default printer */ <br> <br>  dwTempFlags = ppd-&gt;Flags ; <br>  ppd-&gt;Flags = PD_RETURNDEFAULT | PD_RETURNDC ; <br>  PrintDlg(ppd) ; <br> <br>  ppd-&gt;Flags = dwTempFlags ; <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: FillPrintDlg(HWND, LPPRINTDLG) <br> <br>  Purpose:  Fills CDTEST's print dialog with the contents of a <br>            PRINTDLG structure. <br> <br>  Returns:  Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br> <br>void FillPrintDlg(HWND hwnd, LPPRINTDLG ppd) <br>{ <br>  wsprintf(szTemp, szLongFilter, ppd-&gt;lStructSize) ; <br>  SetDlgItemText(hwnd, ID_STRUCTSIZEP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;hwndOwner) ; <br>  SetDlgItemText(hwnd, ID_HWNDOWNERP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;hDevMode) ; <br>  SetDlgItemText(hwnd, ID_HDEVMODEP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;hDevNames) ; <br>  SetDlgItemText(hwnd, ID_HDEVNAMESP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;hDC) ; <br>  SetDlgItemText(hwnd, ID_HDCP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;Flags) ; <br>  SetDlgItemText(hwnd, ID_FLAGSP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;nFromPage) ; <br>  SetDlgItemText(hwnd, ID_FROMPAGEP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;nToPage) ; <br>  SetDlgItemText(hwnd, ID_TOPAGEP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;nMinPage) ; <br>  SetDlgItemText(hwnd, ID_MINPAGEP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;nMaxPage) ; <br>  SetDlgItemText(hwnd, ID_MAXPAGEP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;nCopies) ; <br>  SetDlgItemText(hwnd, ID_COPIESP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, ppd-&gt;hInstance) ; <br>  SetDlgItemText(hwnd, ID_HINSTANCEP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, ppd-&gt;lCustData) ; <br>  SetDlgItemText(hwnd, ID_CUSTDATAP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;lpfnPrintHook) ; <br>  SetDlgItemText(hwnd, ID_PRINTHOOKP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;lpfnSetupHook) ; <br>  SetDlgItemText(hwnd, ID_SETUPHOOKP, szTemp) ; <br> <br>  SetDlgItemText(hwnd, ID_LPPRINTTEMPP, ppd-&gt;lpPrintTemplateName) ; <br> <br>  SetDlgItemText(hwnd, ID_LPSETUPTEMPP, ppd-&gt;lpSetupTemplateName) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;hPrintTemplate) ; <br>  SetDlgItemText(hwnd, ID_HPRINTTEMPP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;hSetupTemplate) ; <br>  SetDlgItemText(hwnd, ID_HSETUPTEMPP, szTemp) ; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: GetPrintDlg(HWND, LPPRINTDLG) <br> <br>  Purpose:  Fills a PRINTDLG structure with the users choices in CDTEST's <br>            print dialog box. <br> <br>  Returns:  Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>void GetPrintDlg(HWND hwnd, LPPRINTDLG ppd) <br>{ <br>  BOOL b ; <br>  TCHAR szNum[20] ; <br> <br>  #define WMAX 20 <br> <br>  GetDlgItemText(hwnd, ID_STRUCTSIZEP, szNum, WMAX) ; <br>  ppd-&gt;lStructSize = MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_HWNDOWNERP, szNum, WMAX) ; <br>  ppd-&gt;hwndOwner = (HWND) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_HDEVMODEP, szNum, WMAX) ; <br>  ppd-&gt;hDevMode = (HANDLE) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_HDEVNAMESP, szNum, WMAX) ; <br>  ppd-&gt;hDevNames = (HANDLE) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_HDCP, szNum, WMAX) ; <br>  ppd-&gt;hDC = (HDC) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_FLAGSP, szNum, WMAX) ; <br>  ppd-&gt;Flags = MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_FROMPAGEP, szNum, WMAX) ; <br>  ppd-&gt;nFromPage = (WORD) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_TOPAGEP, szNum, WMAX) ; <br>  ppd-&gt;nToPage = (WORD) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_MINPAGEP, szNum, WMAX) ; <br>  ppd-&gt;nMinPage = (WORD) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_MAXPAGEP, szNum, WMAX) ; <br>  ppd-&gt;nMaxPage = (WORD) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_COPIESP, szNum, WMAX) ; <br>  ppd-&gt;nCopies = (WORD) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_HINSTANCEP, szNum, WMAX) ; <br>  ppd-&gt;hInstance = (HANDLE) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_CUSTDATAP, szNum, WMAX) ; <br>  ppd-&gt;lCustData = MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_PRINTHOOKP, szNum, WMAX) ; <br>  ppd-&gt;lpfnPrintHook = (LPPRINTHOOKPROC) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_SETUPHOOKP, szNum, WMAX) ; <br>  ppd-&gt;lpfnSetupHook = (LPSETUPHOOKPROC) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_LPPRINTTEMPP, szPrintTempName, 100) ; <br> <br>  GetDlgItemText(hwnd, ID_LPSETUPTEMPP, szSetupTempName, 100) ; <br> <br>  GetDlgItemText(hwnd, ID_HPRINTTEMPP, szNum, WMAX) ; <br>  ppd-&gt;hPrintTemplate = (HANDLE) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_HSETUPTEMPP, szNum, WMAX) ; <br>  ppd-&gt;hSetupTemplate = (HANDLE) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: FillDevnamesDlg(HWND, LPPRINTDLG) <br> <br>  Purpose:  Fills CDTEST's devnames dialog box with the values in <br>            The hDevNames structure member of a PRINTDLG structure. <br> <br>  Returns:  Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br> <br>void FillDevnamesDlg(HWND hwnd, LPPRINTDLG ppd) <br>{ <br>  LPDEVNAMES pn = (LPDEVNAMES) 0 ; <br> <br>  if (ppd-&gt;hDevNames == (HANDLE) 0) <br>    return ; <br> <br>  pn = (LPDEVNAMES) GlobalLock(ppd-&gt;hDevNames) ; <br>  if (pn == (LPDEVNAMES) NULL) return ; <br> <br> <br>  /* To find the strings in this block of memory, add the correct <br>     offset to the original pointer returned by GlobalLock() */ <br> <br>  SetDlgItemText(hwnd, ID_WDRIVEROFF, (LPTSTR) pn + pn-&gt;wDriverOffset) ; <br> <br>  SetDlgItemText(hwnd, ID_WDEVICEOFF, (LPTSTR) pn + pn-&gt;wDeviceOffset) ; <br> <br>  SetDlgItemText(hwnd, ID_WOUTPUTOFF, (LPTSTR) pn + pn-&gt;wOutputOffset) ; <br> <br> <br>  wsprintf(szTemp, szShortFilter, (int) pn-&gt;wDefault) ; <br>  SetDlgItemText(hwnd, ID_WDEFAULT, szTemp) ; <br> <br> <br>  GlobalUnlock(ppd-&gt;hDevNames) ; <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: GetDevnamesDlg(HWND, LPPRINTDLG) <br> <br>  Purpose:  Retrieves the user's choices in CDTEST's devnames dialog box, <br>            Allocates some memory to hold a new DEVNAMES structure, fills <br>            the users choices into the new DEVNAMES structure, and sets <br>            the hDevNames member of a PRINTDLG structure to this new <br>            memory handle. <br> <br> <br>  Returns:  Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>void GetDevnamesDlg(HWND hwnd, LPPRINTDLG ppd) <br>{ <br>  BOOL b ; <br>  TCHAR szNum[30] ; <br>  LPDEVNAMES pn ; <br>  TCHAR sz1[100] ; <br>  TCHAR sz2[100] ; <br>  TCHAR sz3[100] ; <br>  DWORD dwSize ; <br>  int n1, n2, n3 ; <br> <br>  GetDlgItemText(hwnd, ID_WDRIVEROFF, sz1, 100) ; <br>  GetDlgItemText(hwnd, ID_WDEVICEOFF, sz2, 100) ; <br>  GetDlgItemText(hwnd, ID_WOUTPUTOFF, sz3, 100) ; <br> <br>  n1 = lstrlen(sz1) ; <br>  n2 = lstrlen(sz2) ; <br>  n3 = lstrlen(sz3) ; <br> <br>  if (hDevNames) <br>  { <br>    GlobalFree(hDevNames) ; <br>    hDevNames = (HANDLE) 0 ; <br>  } <br> <br> <br>  /* allocate size of everything + 5 extra bytes for zeroes */ <br> <br>  dwSize = sizeof(DEVNAMES) + ((n1+n2+n3+5) * sizeof(TCHAR)) ; <br> <br> <br>  /* Allocate the memory and lock it down */ <br> <br>  if (!(hDevNames = GlobalAlloc(GMEM_MOVEABLE | GMEM_ZEROINIT, dwSize))) <br>  { <br>    MessageBox(hwnd, TEXT("Can't Alloc memory for hDevNames!"), <br>               TEXT("Fatal Error!"), MB_OK | MB_APPLMODAL) ; <br>    return ; <br>  } <br> <br>  if (!(pn = (LPDEVNAMES) GlobalLock(hDevNames))) <br>  { <br>    MessageBox(hwnd, TEXT("Can't Lock New hDevNames memory!"), <br>               TEXT("Fatal Error"), MB_OK | MB_APPLMODAL) ; <br> <br>    GlobalFree(hDevNames) ; <br> <br>    hDevNames = (HANDLE) 0 ; <br> <br>    return ; <br>  } <br> <br> <br>  /* skip over devnames and copy string 1 there.  Make sure to <br>     divide by sizeof(TCHAR) or the compiler will create a pointer <br>     that points too far if you compile as a UNICODE program */ <br> <br>  pn-&gt;wDriverOffset = sizeof(DEVNAMES) / sizeof(TCHAR) ; <br>  lstrcpy((LPTSTR) pn + pn-&gt;wDriverOffset, (LPTSTR) sz1) ; <br> <br> <br> <br>  /* skip over string 1 and add string 1 with a zero between them */ <br> <br>  pn-&gt;wDeviceOffset = pn-&gt;wDriverOffset + n1 + 1 ; <br>  lstrcpy((LPTSTR) pn + pn-&gt;wDeviceOffset, (LPTSTR) sz2) ; <br> <br> <br> <br>  /* skip over string 2 and put string 3 there with a zero between them */ <br> <br>  pn-&gt;wOutputOffset = pn-&gt;wDeviceOffset + n2 + 1 ; <br>  lstrcpy((LPTSTR) pn + pn-&gt;wOutputOffset, (LPTSTR) sz3) ; <br> <br> <br>  GetDlgItemText(hwnd, ID_WDEFAULT, szNum, 30) ; <br>  pn-&gt;wDefault = (WORD) MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GlobalUnlock(hDevNames) ; <br> <br>  ppd-&gt;hDevNames = hDevNames ; <br> <br>  wsprintf(szTemp, szLongFilter, ppd-&gt;hDevNames) ; <br>  SetDlgItemText(GetParent(hwnd), ID_HDEVNAMESP, szTemp) ; <br> <br>} <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: FillDevmodeDlg(HWND, LPPRINTDLG) <br> <br>  Purpose: Fills CDTEST's devmode dialog with the contents of the DEVMODE <br>           structure handle of a PRINTDLG structure. <br> <br> <br>  Returns:  Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>void FillDevmodeDlg(HWND hwnd, LPPRINTDLG ppd) <br>{ <br>  LPDEVMODE p ; <br> <br>  if (ppd-&gt;hDevMode == (HANDLE) 0) <br>    return ; <br> <br>  p = (LPDEVMODE) GlobalLock(ppd-&gt;hDevMode) ; <br>  if (p == (LPDEVMODE) NULL) return ; <br> <br>  SetDlgItemText(hwnd, ID_DMDEVNAME, (LPTSTR) p-&gt;dmDeviceName) ; <br> <br>  wsprintf(szTemp, szShortFilter, (int) p-&gt;dmSpecVersion) ; <br>  SetDlgItemText(hwnd, ID_DMSPECVER, szTemp) ; <br> <br>  wsprintf(szTemp, szShortFilter, (int) p-&gt;dmDriverVersion) ; <br>  SetDlgItemText(hwnd, ID_DMDRIVERVER, szTemp) ; <br> <br>  wsprintf(szTemp, szShortFilter, (int) p-&gt;dmSize) ; <br>  SetDlgItemText(hwnd, ID_DMSIZEDEV, szTemp) ; <br> <br>  wsprintf(szTemp, szShortFilter, (int) p-&gt;dmDriverExtra) ; <br>  SetDlgItemText(hwnd, ID_DMDRIVEREXTRA, szTemp) ; <br> <br>  wsprintf(szTemp, szShortFilter, (int) p-&gt;dmFields) ; <br>  SetDlgItemText(hwnd, ID_DMFIELDS, szTemp) ; <br> <br>  wsprintf(szTemp, szShortFilter, (int) p-&gt;dmOrientation) ; <br>  SetDlgItemText(hwnd, ID_DMORIENTATION, szTemp) ; <br> <br>  wsprintf(szTemp, szShortFilter, (int) p-&gt;dmPaperSize) ; <br>  SetDlgItemText(hwnd, ID_DMPAPERSIZE, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, p-&gt;dmPaperLength) ; <br>  SetDlgItemText(hwnd, ID_DMPAPERLENGTH, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, p-&gt;dmPaperWidth) ; <br>  SetDlgItemText(hwnd, ID_DMPAPERWIDTH, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, p-&gt;dmScale) ; <br>  SetDlgItemText(hwnd, ID_DMSCALE, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, p-&gt;dmCopies) ; <br>  SetDlgItemText(hwnd, ID_DMCOPIES, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, p-&gt;dmDefaultSource) ; <br>  SetDlgItemText(hwnd, ID_DMDEFAULTSOURCE, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, p-&gt;dmPrintQuality) ; <br>  SetDlgItemText(hwnd, ID_DMPRINTQUALITY, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, p-&gt;dmColor) ; <br>  SetDlgItemText(hwnd, ID_DMCOLOR, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, p-&gt;dmDuplex) ; <br>  SetDlgItemText(hwnd, ID_DMDUPLEX, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, p-&gt;dmCollate) ; <br>  SetDlgItemText(hwnd, ID_DMCOLLATE, szTemp) ; <br> <br>  SetDlgItemText(hwnd, ID_DMFORMNAME, (LPTSTR) p-&gt;dmFormName) ; <br> <br>  wsprintf(szTemp, szLongFilter, p-&gt;dmBitsPerPel) ; <br>  SetDlgItemText(hwnd, ID_DMBITSPERPEL, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, p-&gt;dmPelsWidth) ; <br>  SetDlgItemText(hwnd, ID_DMPELSWIDTH, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, p-&gt;dmPelsHeight) ; <br>  SetDlgItemText(hwnd, ID_DMPELSHEIGHT, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, p-&gt;dmDisplayFrequency) ; <br>  SetDlgItemText(hwnd, ID_DMDISPLAYFREQ, szTemp) ; <br> <br>  GlobalUnlock(ppd-&gt;hDevMode) ; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: GetDevmodeDlg(HWND, LPPRINTDLG) <br> <br>  Purpose:  Retrieves the user's edits in CDTEST's DEVMODE dialog box, <br>            allocates memory for a new DEVMODE structure, fills that <br>            memory with the user's edits, and puts a handle to that <br>            memory in the hDevMode member of a PRINTDLG structure. <br> <br>  Returns:  Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>void GetDevmodeDlg(HWND hwnd, LPPRINTDLG ppd) <br>{ <br>  LPDEVMODE p ; <br>  BOOL b ; <br>  TCHAR szNum[30] ; <br> <br>  #define WMAXDEV 30 <br> <br>  if (hDevMode) <br>  { <br>    GlobalFree(hDevMode) ; <br>    hDevMode = (HANDLE) 0 ; <br>  } <br> <br>  if (!(hDevMode = GlobalAlloc(GMEM_ZEROINIT | GMEM_MOVEABLE, sizeof(DEVMODE)))) <br>  { <br>    MessageBox(hwnd, TEXT("Can't allocate memory for hDevMode"), <br>               TEXT("Fatal Error"), MB_OK | MB_APPLMODAL) ; <br>    return ; <br>  } <br> <br>  if (!(p = (LPDEVMODE) GlobalLock(hDevMode))) <br>  { <br>    MessageBox(hwnd, TEXT("Can't lock memory for hDevMode"), <br>               TEXT("Fatal Error"), MB_OK | MB_APPLMODAL) ; <br> <br>    GlobalFree(hDevMode) ; <br>    hDevMode = (HANDLE) 0 ; <br> <br>    return ; <br>  } <br> <br>  GetDlgItemText(hwnd, ID_DMDEVNAME, p-&gt;dmDeviceName, 32) ; <br> <br>  GetDlgItemText(hwnd, ID_DMSPECVER, szNum, WMAXDEV) ; <br>  p-&gt;dmSpecVersion = (WORD) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMDRIVERVER, szNum, WMAXDEV) ; <br>  p-&gt;dmDriverVersion = (WORD) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMSIZEDEV, szNum, WMAXDEV) ; <br>  p-&gt;dmSize = (WORD) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMDRIVEREXTRA, szNum, WMAXDEV) ; <br>  p-&gt;dmDriverExtra = (WORD) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMFIELDS, szNum, WMAXDEV) ; <br>  p-&gt;dmFields = MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMORIENTATION, szNum, WMAXDEV) ; <br>  p-&gt;dmOrientation = (short) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMPAPERSIZE, szNum, WMAXDEV) ; <br>  p-&gt;dmPaperSize = (short) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMPAPERLENGTH, szNum, WMAXDEV) ; <br>  p-&gt;dmPaperLength = (short) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMPAPERWIDTH, szNum, WMAXDEV) ; <br>  p-&gt;dmPaperWidth = (short) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMSCALE, szNum, WMAXDEV) ; <br>  p-&gt;dmScale = (short) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMCOPIES, szNum, WMAXDEV) ; <br>  p-&gt;dmCopies = (short) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMDEFAULTSOURCE, szNum, WMAXDEV) ; <br>  p-&gt;dmDefaultSource = (short) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMPRINTQUALITY, szNum, WMAXDEV) ; <br>  p-&gt;dmPrintQuality = (short) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMCOLOR, szNum, WMAXDEV) ; <br>  p-&gt;dmColor = (short) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMDUPLEX, szNum, WMAXDEV) ; <br>  p-&gt;dmDuplex = (short) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMCOLLATE, szNum, WMAXDEV) ; <br>  p-&gt;dmCollate = (short) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMFORMNAME, p-&gt;dmFormName, 32) ; <br> <br>  GetDlgItemText(hwnd, ID_DMBITSPERPEL, szNum, WMAXDEV) ; <br>  p-&gt;dmBitsPerPel = (USHORT) MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMPELSWIDTH, szNum, WMAXDEV) ; <br>  p-&gt;dmPelsWidth = MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMPELSHEIGHT, szNum, WMAXDEV) ; <br>  p-&gt;dmPelsHeight = MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_DMDISPLAYFREQ, szNum, WMAXDEV) ; <br>  p-&gt;dmDisplayFrequency = MyAtol(szNum, uMode==IDM_HEXMODE, &amp;b) ; <br> <br>  GlobalUnlock(hDevMode) ; <br>  ppd-&gt;hDevMode = hDevMode ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;hDevMode) ; <br>  SetDlgItemText(GetParent(hwnd), ID_HDEVMODEP, szTemp) ; <br>} <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: GetPrintDlgHandle(void) <br> <br>  Purpose:  Finds the custom Print dialog template in the EXE, loads it <br>            into a handle, and returns the handle. <br> <br>  Returns:  Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>HANDLE GetPrintDlgHandle(void) <br>{ <br>  hResPrint = FindResource(hInst, TEXT("prtemp1"), RT_DIALOG) ; <br> <br>  hDialogPrint = LoadResource(hInst, hResPrint) ; <br> <br> <br>  return hDialogPrint ; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: GetSetupDlgHandle(void) <br> <br>  Purpose:  Finds the custom Setup dialog template in the EXE, loads it <br>            into a handle, and returns the handle. <br> <br>  Returns:  Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>HANDLE GetSetupDlgHandle(void) <br>{ <br>  hResPrint = FindResource(hInst, TEXT("prtemp2"), RT_DIALOG) ; <br> <br>  hDialogPrint = LoadResource(hInst, hResPrint) ; <br> <br>  return hDialogPrint ; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: PrintHookProc(HWND, UINT, UINT, LONG) <br> <br>  Purpose:  A callback function that will receive messages intended for <br>            the PrintDlg() dialog boxes before the normal common dialog <br>            routine receives them. <br> <br> <br>  Returns:  FALSE to allow the common dialogs to process the message <br>            with its normal logic.  TRUE to discard the message. <br> <br>  Comments: <br> <br>     To enable this function for the Print dialog in CDTEST, enter the <br>     value for PD_ENABLEPRINTHOOK in the "Flags" edit box. <br> <br>     To enable this function for the Setup dialog in CDTEST, enter the <br>     value for (PD_ENABLESETUPHOOK | PD_PRINTSETUP) in the "Flags" edit box. <br> <br>************************************************************************/ </code></pre>
<p>
</p>
<pre><code><br>UINT APIENTRY PrintHookProc(HWND hwnd, UINT msg, UINT wParam, LONG lParam) <br>{ <br>  LPPRINTDLG pPr ; <br>  TCHAR szMsg[50] ; <br> <br>  switch(msg) <br>  { <br>    case WM_INITDIALOG: <br> <br>      pPr = (LPPRINTDLG) lParam ; <br> <br>      if (pPr-&gt;lCustData != 0) <br>      { <br>        wsprintf(szMsg, TEXT("PRINTDLG-&gt;lCustData is: %ld"), pPr-&gt;lCustData) ; <br> <br>        MessageBox(hwnd, szMsg, TEXT("lCustData Sent!"), MB_OK | MB_APPLMODAL) ; <br>      } <br> <br>      SetWindowText(hwnd, TEXT("Print Hook Proc Dialog")) ; <br> <br>      break ; <br> <br>    /* use the WM_CTLCOLOR* messages to change the color of the Open <br>       dialog */ <br> <br>    case WM_CTLCOLORDLG: <br> <br>        if (!hBrushDlg) <br>            hBrushDlg = GetStockObject(LTGRAY_BRUSH) ; <br> <br>        return (UINT) hBrushDlg ; <br> <br>        break ; <br> <br> <br>    case WM_CTLCOLORBTN: <br> <br>        SetBkMode((HDC) wParam, TRANSPARENT) ;   //sets background color <br>                                                 //for push and check box <br>                                                 //buttons... <br> <br>        if (!hBrushButton) <br>            hBrushButton = GetStockObject(LTGRAY_BRUSH) ; <br> <br>        return (UINT) hBrushButton ; <br> <br>        break ; <br> <br> <br>    case WM_CTLCOLORSTATIC: <br> <br>        SetTextColor((HDC) wParam, RGB(0x00, 0xff, 0x00)) ;  //green <br>        SetBkMode((HDC) wParam, TRANSPARENT) ;               //transparent text <br> <br>        if (!hBrushDlg) <br>            hBrushDlg = GetStockObject(LTGRAY_BRUSH) ; <br> <br>        return (UINT) hBrushDlg ; <br> <br>        break ; <br> <br> <br>    default: <br>      break ; <br>  } <br> <br>  return FALSE ;   //send msg to the common dialog code <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: PrintMultiProc1(LPDWORD) <br> <br>  Purpose:  Is the starting address for the first new thread when <br>            multithreading. <br> <br>  Returns:  Any DWORD value. <br> <br>  Comments: <br>            The new thread will start executing here and will end when <br>            the PrintDlg() function returns and it has posted a message <br>            to the CDTEST's print dialog window saying that one of the <br>            two multithreading dialogs been terminated. <br> <br>************************************************************************/ <br> <br>DWORD PrintMultiProc1(LPDWORD pdw) <br>{ <br>  GetPrintDlg(hwndMainPrint, &amp;pdThread1) ; <br> <br>  DoPrintDlgStuff(hwndMainPrint, &amp;pdThread1) ; <br> <br>  PostMessage(hwndMainPrint, UMSG_DECREMENTDLGCOUNT, 0, 0L ) ; <br> <br>  return 0L ; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: PrintMultiProc2(LPDWORD) <br> <br>  Purpose:  Is the starting address for the second new thread when <br>            multithreading. <br> <br>  Returns:  Any DWORD value. <br> <br>  Comments: <br>            The new thread will start executing here and will end when <br>            the PrintDlg() function returns and it has posted a message <br>            to the CDTEST's print dialog window saying that one of the <br>            two multithreading dialogs been terminated. <br> <br>************************************************************************/ <br> <br>DWORD PrintMultiProc2(LPDWORD pdw) <br>{ <br>  GetPrintDlg(hwndMainPrint, &amp;pdThread2) ; <br> <br>  DoPrintDlgStuff(hwndMainPrint, &amp;pdThread2) ; <br> <br>  PostMessage(hwndMainPrint, UMSG_DECREMENTDLGCOUNT, 0, 0L ) ; <br> <br>  return 0L ; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: MultiThreadPrintDlg(void) <br> <br>  Purpose:  Is the starting address for the first new thread when <br>            multithreading. <br> <br>  Returns:  Any DWORD value. <br> <br>  Comments: <br>            The new thread will start executing here and will end when <br>            the PrintDlg() function returns and it has posted a message <br>            to the CDTEST's print dialog window saying that one of the <br>            two multithreading dialogs been terminated. <br> <br>************************************************************************/ <br> <br>void MultiThreadPrintDlg(void) <br>{ <br> <br>  dwPrintThreadParm1 = dwPrintThreadParm2 = 0L ; <br> <br>  if (!(hPrintThread1 = CreateThread((LPSECURITY_ATTRIBUTES) NULL, 0, <br>                                     (LPTHREAD_START_ROUTINE) PrintMultiProc1, <br>                                     &amp;dwPrintThreadParm1, CREATE_SUSPENDED, &amp;dwPrintThreadID1))) <br> <br>  { <br>    MessageBox(GetForegroundWindow(), TEXT("Error creating thread 1"), NULL, <br>               MB_OK | MB_ICONEXCLAMATION | MB_APPLMODAL) ; <br> <br>    nOpenDialogCount = 0 ; <br> <br>    EnablePrintControls(hwndMainPrint, TRUE) ; <br> <br>    return ; <br>  } <br> <br> <br>  if (!(hPrintThread2 = CreateThread((LPSECURITY_ATTRIBUTES) NULL, 0, <br>                                     (LPTHREAD_START_ROUTINE) PrintMultiProc2, <br>                                     &amp;dwPrintThreadParm2, CREATE_SUSPENDED, &amp;dwPrintThreadID2))) <br>  { <br>    MessageBox(GetForegroundWindow(), TEXT("Error creating thread 2"), NULL, <br>               MB_OK | MB_ICONEXCLAMATION | MB_APPLMODAL) ; <br> <br>    nOpenDialogCount = 0 ; <br> <br>    EnablePrintControls(hwndMainPrint, TRUE) ; <br> <br>    return ; <br>  } <br> <br>  ResumeThread(hPrintThread1) ; <br> <br>  ResumeThread(hPrintThread2) ; <br> <br>  return ; <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: EnablePrintControls(HWND, BOOL) <br> <br>  Purpose:  Enable or disable CDTEST's print dialog's controls. <br> <br>  Returns:  Nothing. <br> <br>  Comments: This is necessary when CDTEST is multithreading. <br> <br>************************************************************************/ <br> <br>void EnablePrintControls(HWND hwnd, BOOL bEnable) <br>{ <br>  EnableWindow(GetDlgItem(hwnd, IDOK), bEnable) ; <br>  EnableWindow(GetDlgItem(hwnd, IDCANCEL), bEnable) ; <br>  EnableWindow(GetDlgItem(hwnd, ID_RESETPRINT), bEnable) ; <br>  EnableWindow(GetDlgItem(hwnd, ID_MULTITHREADPRINT), bEnable) ; <br>  EnableWindow(GetDlgItem(hwnd, ID_EDITDEVMODE), bEnable) ; <br>  EnableWindow(GetDlgItem(hwnd, ID_EDITDEVNAMES), bEnable) ; <br>} <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: DoPrintDlgStuff(HWND, LPPRINTDLG) <br> <br>  Purpose:  Calls PrintDlg() with the correct parameters. <br> <br>  Returns:  Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br> <br>void DoPrintDlgStuff(HWND hwnd, LPPRINTDLG ppd) <br>{ <br>  BOOL bRet = FALSE ; <br> <br> <br>  /* Figure out how the user want's to call PrintDlg() */ <br> <br>  if (IsDlgButtonChecked(hwnd, ID_PREPRINTP) == 1) <br>    ppd-&gt;hPrintTemplate = GetPrintDlgHandle() ; <br> <br>  if (IsDlgButtonChecked(hwnd, ID_PRESETUPP) == 1) <br>    ppd-&gt;hSetupTemplate = GetSetupDlgHandle() ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;hPrintTemplate) ; <br>  SetDlgItemText(hwnd, ID_HPRINTTEMPP, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) ppd-&gt;hSetupTemplate) ; <br>  SetDlgItemText(hwnd, ID_HSETUPTEMPP, szTemp) ; <br> <br> <br> <br>  /* Call the function */ <br> <br>  if (IsDlgButtonChecked(hwnd, ID_NULLSTRUCTP) == 1) <br>    bRet = PrintDlg((LPPRINTDLG) NULL) ; <br>  else <br>    bRet = PrintDlg(ppd) ; <br> <br> <br> <br>  /* Clean up and show results */ <br> <br>  wsprintf(szTemp, szLongFilter, CommDlgExtendedError()) ; <br>  SetDlgItemText(hwnd, ID_ERRORP, szTemp) ; <br> <br>  SetDlgItemInt(hwnd, ID_RETURNP, bRet, TRUE) ; <br> <br>  if (hDialogPrint) <br>  { <br>    FreeResource(hDialogPrint) ; //obsolete call, but <br>    hDialogPrint = (HANDLE) 0 ;  //it's possible that this <br>    hResPrint = (HANDLE) 0 ;    //might be recompiled for win 3.x <br>  } <br> <br>  pd.hDevMode = ppd-&gt;hDevMode ;    //need to fix this so that FillDevnamesDlg() <br>  pd.hDevNames = ppd-&gt;hDevNames ;  //and FillDevmodeDlg() work... <br> <br>  FillPrintDlg(hwnd, ppd) ; <br> <br>  if (ppd-&gt;hDC)  //release the HDC after its value is <br>                 //returned to the test app <br>  { <br>    ReleaseDC(ppd-&gt;hwndOwner, ppd-&gt;hDC) ; <br>    ppd-&gt;hDC = (HDC) 0 ; <br>  } <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

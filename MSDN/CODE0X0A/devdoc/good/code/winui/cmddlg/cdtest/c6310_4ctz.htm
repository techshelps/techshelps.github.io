<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FIND.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6317"></a>FIND.C</h2>
<pre><code>/************************************************************************ <br> <br>  File: find.c <br> <br>  Purpose: <br> <br>     Manages CDTEST's find/replace dialog box. <br> <br>  Functions: <br> <br>    - lpfnFilterProc()      -- A callback function for a filter that must be <br>                               installed if a modeless dialog is created with <br>                               another dialog as its parent. <br> <br>    - DoFindDialog()        -- Creates CDTEST's Open/Save dialog. <br> <br>    - FindProc()            -- Callback function for CDTEST's Find/Replace dlg. <br> <br>    - InitFindStruct()      -- Fills a FINDREPLACE structure with some defaults. <br> <br>    - FillFindDlg()         -- Fills CDTESTs Find/Replace dialog with the contents <br>                               of a FINDREPLACE structure. <br> <br>    - GetFindDlg()          -- Retrieves the users edit's from CDTEST's find/ <br>                               replace dialog and puts them in a FINDREPLACE <br>                               structure. <br> <br>    - FindReplaceHookProc() -- Callback function for FindText() or ReplaceText() <br>                               which will be called if either of these dialogs <br>                               is created with the FR_ENABLEHOOK flag. <br> <br>    - GetFindDlgHandle()    -- Returns a handle to a preloaded FindText() template. <br> <br>    - GetReplaceDlgHandle() -- Returns a handle to a preloaded ReplaceText() template. <br> <br>    - DoFindRepStuff()      -- Calls FindText() or ReplaceText(). <br> <br> <br>  NOTE: CDTEST does not multithread the FindText() or the ReplaceText() <br>        common dialogs.  The reason for this is that since these dialogs <br>        are modeless, their creation functions return immediately after the <br>        dialogs are created as opposed to other dialog functions that <br>        don't return until after the dialog has been destroyed by the user. <br> <br>        As a result, any threads that create modeless dialogs will end <br>        immediately unless the threads themselves have separate message <br>        loops.  For the sake of clarity, this functionality has not been <br>        added to CDTEST. <br> <br>************************************************************************/ <br> <br> <br>#include &lt;windows.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;winnls.h&gt; <br>#include "cdtest.h" <br>#include "find.h" <br>#include "replace.h" <br> <br> <br>/* All functions used in this module + some exported ones */ <br> <br>void InitFindStruct(HWND, LPFINDREPLACE) ; <br>void FillFindDlg(HWND, LPFINDREPLACE) ; <br>void GetFindDlg(HWND, LPFINDREPLACE) ; <br>extern UINT uMode ; <br>extern LONG MyAtol(LPTSTR, BOOL, LPBOOL) ; <br>UINT APIENTRY FindReplaceHookProc(HWND, UINT, UINT, LONG) ; <br>void DoFindRepStuff(LPFINDREPLACE) ; <br> <br> <br> <br>/* All global variables used in this module */ <br> <br>HWND hwndFind ; <br>HWND hwndMainDialog ; <br> <br>FINDREPLACE fr ; <br>LPFINDREPLACE lpFr ; <br> <br>TCHAR szFindWhat[100] ; <br>TCHAR szReplaceWith[100] ; <br>TCHAR szTemplate[40] ; <br> <br>HANDLE hResFind, hDialogFind ; <br>HANDLE GetFindDlgHandle(void) ; <br>HANDLE GetReplaceDlgHandle(void) ; <br> <br>HBRUSH hBrushDlg ; <br>HBRUSH hBrushEdit ;    //brush handles for new colors done with hook proc <br>HBRUSH hBrushButton ; <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: lpfnFilterProc(int, WPARAM, LAPRAM) <br> <br>  Purpose: This is needed if a modeless dialog is created with its parent <br>           as another dialog box. <br> <br> <br>  Returns: TRUE if the message was handled and FALSE if not. <br> <br>  Comments: <br> <br>    The reason for this is that the DialogBox() procedure does not call <br>    the IsDialogMessage() function before it processes messages, so we <br>    need to install a hook function to do it for us. <br> <br>************************************************************************/ <br> <br> <br>LRESULT CALLBACK lpfnFilterProc(int nCode, WPARAM wParam, LPARAM lParam) <br>{ <br>  static bFirstTime = TRUE ; <br> <br>  if (nCode &lt; 0) <br>    return CallNextHookEx(hHook, nCode, wParam, lParam) ; <br> <br>  if (nCode == MSGF_DIALOGBOX &amp;&amp; bFirstTime) <br>  { <br>    bFirstTime = FALSE ; <br> <br>    if (hwndFind &amp;&amp; IsDialogMessage(hwndFind, (LPMSG) lParam)) <br>    { <br>      bFirstTime = TRUE ; <br>      return 1L ; <br>    } <br> <br>    else <br>    { <br>      bFirstTime = TRUE ; <br>      return 0L ; <br>    } <br>  } <br>  else return 0L ; <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: DoFindDialog(HWND) <br> <br>  Purpose: This function installs the Hook function, creates the Find/ <br>           Replace dialog, and un-installs the Hook. <br> <br>  Returns: Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>void DoFindDialog(HWND hwnd) <br>{ <br>  bDoFindDlg = TRUE ; <br> <br>  /* this is a little different than the others.  If the dialog is just <br>     created normally, it will make no IsDlgMessage() checks and the <br>     find/replace dialogs will have no keyboard input (i.e. tabbing and <br>     alt+key-ing from control to control.  To fix this, a message hook <br>     and message filter have to be installed <br> <br>     It must be set to only look at the input for the current thread, or other <br>     programs will be interrupted by this hook also. <br>  */ <br> <br>  hHook = SetWindowsHookEx(WH_MSGFILTER, lpfnFilterProc, <br>                           hInst, GetCurrentThreadId()) ; <br> <br>  if (!hHook) return ; <br> <br>  DialogBox(hInst, MAKEINTRESOURCE(ID_FINDDIALOG), hwnd, FindProc) ; <br> <br>  UnhookWindowsHookEx(hHook) ; <br> <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: FindProc(HWND, UINT, UINT, LONG) <br> <br>  Purpose: This is the callback function for the CDTEST's Find/Replace <br>           Dialog. <br> <br>  Returns: TRUE or FALSE depending on the situation. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>BOOL APIENTRY FindProc(HWND hwnd, UINT msg, UINT wParam, LONG lParam) <br>{ <br>  switch (msg) <br>  { <br>    case WM_INITDIALOG: <br> <br>        if (bDoFindDlg) <br>          SetWindowText(hwnd, TEXT("FindText()")) ; <br>        else <br>          SetWindowText(hwnd, TEXT("ReplaceText()")) ; <br> <br>        InitFindStruct(hwnd, &amp;fr) ; <br>        FillFindDlg(hwnd, &amp;fr) ; <br> <br>        hwndMainDialog = hwnd ; <br> <br> <br>        /* The find and replace dialogs are a lot harder to multithread because they <br>           are modeless.  Modeless dialog creation functions return right after the <br>           dialog is created.  Since ExitThread will be called at this point, it is <br>           probably not possible to multithread these dialogs without a separate <br>           GetMessage() loop. <br>        */ <br> <br> <br>        EnableWindow(GetDlgItem(hwnd, ID_MULTITHREADFINDREP), FALSE) ; <br> <br>        SetFocus(GetDlgItem(hwnd, ID_STRUCTSIZEFT)) ; <br> <br>        break ; <br> <br> <br>    case WM_COMMAND: <br>    { <br>        switch (LOWORD(wParam)) <br>        { <br>          case IDOK: <br>            GetFindDlg(hwnd, &amp;fr) ; <br>            DoFindRepStuff(&amp;fr) ; <br>            break ; <br> <br>          case ID_RESETFIND: <br>            SendDlgItemMessage(hwnd, ID_FRNULLSTRUCT, BM_SETCHECK, (WPARAM)0, (LPARAM)0) ; <br>            SendDlgItemMessage(hwnd, ID_PRELOADEDFIND, BM_SETCHECK, (WPARAM)0, (LPARAM)0) ; <br>            InitFindStruct(hwnd, &amp;fr) ; <br>            FillFindDlg(hwnd, &amp;fr) ; <br>            SetFocus(GetDlgItem(hwnd, ID_STRUCTSIZEFT)) ; <br>            break ; <br> <br>          case IDCANCEL: <br>            EndDialog(hwnd, FALSE) ; <br> <br>            break ; <br> <br> <br>          default: break ; <br>        } <br> <br>    } <br> <br>    default: <br> <br> <br>    /* nFindMsg is registered at program startup (see CDTEST.c).  The <br>       FindText() and ReplaceText() dialogs will communicate with the <br>       calling application via this message. */ <br> <br>    if (msg == nFindMsg) <br>    { <br>        lpFr = (LPFINDREPLACE) lParam ; <br> <br>        if (lpFr-&gt;Flags &amp; FR_DIALOGTERM) <br>        { <br>          PostMessage(hwnd, UMSG_DECREMENTDLGCOUNT, 0, 0L) ; <br> <br>          if (hDialogFind) <br>          { <br>            FreeResource(hDialogFind) ; <br>            hDialogFind = (HANDLE) 0 ; <br>            hResFind = (HANDLE) 0 ; <br>          } <br> <br>          hwndFind = (HWND) 0 ; <br>        } <br> <br>        FillFindDlg(hwnd, &amp;fr) ; <br> <br>        wsprintf(szTemp, szLongFilter, CommDlgExtendedError()) ; <br>        SetDlgItemText(hwnd, ID_ERRORFT, szTemp) ; <br> <br>        wsprintf(szTemp, szLongFilter, hwndFind) ; <br>        SetDlgItemText(hwnd, ID_RETURNFT, szTemp) ; <br>    } <br> <br> <br>    /* If the help button is pressed in the FindText() or ReplaceText() <br>       dialogs, it will send a message Registered with RegisterWindowMessage() <br>       to the parent window.  The message nHelpMessage was registered <br>       at application startup */ <br> <br>    if (msg == nHelpMessage) <br>      MessageBox(GetForegroundWindow(), TEXT("Hello from the help button"), <br>                 TEXT("Find Help Button"), MB_OK | MB_APPLMODAL) ; <br> <br>    break ; <br>  } <br> <br>  return FALSE ; <br>} <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: InitFindStruct(HWND, LPFINDREPLACE) <br> <br>  Purpose: Fills a FINDREPLACE structure with some defaults. <br> <br> <br>  Returns: Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>void InitFindStruct(HWND hwnd, LPFINDREPLACE pfr) <br>{ <br>  pfr-&gt;lStructSize = (DWORD) sizeof(FINDREPLACE) ; <br>  pfr-&gt;hwndOwner = hwnd ; <br>  pfr-&gt;hInstance = (HANDLE) hInst ; <br>  pfr-&gt;Flags = FR_DOWN | FR_SHOWHELP  ; <br> <br>  lstrcpy(szFindWhat, TEXT("Word to find")) ; <br>  pfr-&gt;lpstrFindWhat = szFindWhat ; <br>  pfr-&gt;wFindWhatLen = 100 ; <br> <br>  lstrcpy(szReplaceWith, TEXT("Replace with word")) ; <br>  pfr-&gt;lpstrReplaceWith = szReplaceWith ; <br>  pfr-&gt;wReplaceWithLen = 100 ; <br> <br>  pfr-&gt;lCustData = (DWORD) 0 ; <br> <br>  pfr-&gt;lpfnHook = FindReplaceHookProc ; <br> <br>  lstrcpy(szTemplate, TEXT("fttemp1")) ; <br> <br>  pfr-&gt;lpTemplateName = szTemplate ; <br>} <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: FillFindDlg(HWND, LPFINDREPLACE) <br> <br>  Purpose:  Fills CDTEST's Find/Replace dialog with the contents of a <br>            FINDREPLACE structure. <br> <br>  Returns:  Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>void FillFindDlg(HWND hwnd, LPFINDREPLACE pfr) <br>{ <br>  wsprintf(szTemp, szLongFilter, pfr-&gt;lStructSize) ; <br>  SetDlgItemText(hwnd, ID_STRUCTSIZEFT, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) pfr-&gt;hwndOwner) ; <br>  SetDlgItemText(hwnd, ID_HWNDOWNERFT, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) pfr-&gt;hInstance) ; <br>  SetDlgItemText(hwnd, ID_HINSTANCEFT, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, pfr-&gt;Flags) ; <br>  SetDlgItemText(hwnd, ID_FLAGSFT, szTemp) ; <br> <br>  SetDlgItemText(hwnd, ID_FINDWHATFT, pfr-&gt;lpstrFindWhat) ; <br> <br>  wsprintf(szTemp, szLongFilter, pfr-&gt;wFindWhatLen) ; <br>  SetDlgItemText(hwnd, ID_FINDWHATLENFT, szTemp) ; <br> <br>  SetDlgItemText(hwnd, ID_REPLACEWITHFT, pfr-&gt;lpstrReplaceWith) ; <br> <br>  wsprintf(szTemp, szLongFilter, pfr-&gt;wReplaceWithLen) ; <br>  SetDlgItemText(hwnd, ID_REPLACEWITHLENFT, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, pfr-&gt;lCustData) ; <br>  SetDlgItemText(hwnd, ID_CUSTDATAFT, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) pfr-&gt;lpfnHook) ; <br>  SetDlgItemText(hwnd, ID_HOOKFT, szTemp) ; <br> <br>  SetDlgItemText(hwnd, ID_TEMPLATEFT, pfr-&gt;lpTemplateName) ; <br>} <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: GetFindDlg(HWND, LPFINDREPLACE) <br> <br>  Purpose:  Fills a FINDREPLACE structure with the user's edits in CDTEST's <br>            Find/Replace dialog. <br> <br>  Returns:  Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>void GetFindDlg(HWND hwnd, LPFINDREPLACE pfr) <br>{ <br>  TCHAR szNum[30] ; <br>  BOOL b ; <br> <br>  #define WSIZEFR 30 <br> <br>  GetDlgItemText(hwnd, ID_STRUCTSIZEFT, szNum, WSIZEFR) ; <br>  pfr-&gt;lStructSize = MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_HWNDOWNERFT, szNum, WSIZEFR) ; <br>  pfr-&gt;hwndOwner = (HWND) MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_HINSTANCEFT, szNum, WSIZEFR) ; <br>  pfr-&gt;hInstance = (HANDLE) MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_FLAGSFT, szNum, WSIZEFR) ; <br>  pfr-&gt;Flags = MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br> <br>  GetDlgItemText(hwnd, ID_FINDWHATFT, szFindWhat, 100) ; <br> <br>  GetDlgItemText(hwnd, ID_REPLACEWITHFT, szReplaceWith, 100) ; <br> <br> <br>  GetDlgItemText(hwnd, ID_FINDWHATLENFT, szNum, WSIZEFR) ; <br>  pfr-&gt;wFindWhatLen = (WORD) MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_REPLACEWITHLENFT, szNum, WSIZEFR) ; <br>  pfr-&gt;wReplaceWithLen = (WORD) MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_CUSTDATAFT, szNum, WSIZEFR) ; <br>  pfr-&gt;lCustData = MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_HOOKFT, szNum, WSIZEFR) ; <br>  pfr-&gt;lpfnHook = (LPFRHOOKPROC) MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_TEMPLATEFT, szTemplate, 40) ; <br>} <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: FindReplaceHookProc(HWND, UINT, UINT, LONG) <br> <br>  Purpose:  Is the callback function that will be called by FindText() <br>            or ReplaceText() if the function is called with the <br>            FR_ENABLEHOOK flag. <br> <br> <br>  Returns:  TRUE to discard the message, and FALSE to instruct the common <br>            dialogs to process the message with the default logic. <br> <br>  Comments: <br> <br>     NOTE! <br> <br>     If the application returns FALSE in response to the WM_INITDIALOG <br>     message, it is then responsible for displaying the dialog by <br>     calling ShowWindow() and UpdateWindow(). <br> <br>***********************************************************************/ <br> <br> <br>UINT APIENTRY FindReplaceHookProc(HWND hwnd, UINT msg, UINT wParam, LONG lParam) <br>{ <br>  LPFINDREPLACE pFr ; <br>  TCHAR szMsg[75] ; <br>  TCHAR szTmp[20] ; <br>  int i ; <br>  TCHAR szDefString[] = TEXT("Default String ") ; <br> <br>  switch(msg) <br>  { <br>    case WM_INITDIALOG: <br> <br>      pFr = (LPFINDREPLACE) lParam ; <br> <br>      if (pFr-&gt;lCustData != 0L) <br>      { <br>        wsprintf(szMsg, TEXT("FINDREPLACE-&gt;lCustData is: %ld"), pFr-&gt;lCustData) ; <br> <br>        MessageBox(hwnd, szMsg, TEXT("lCustData Sent!"), MB_OK | MB_APPLMODAL) ; <br>      } <br> <br>      SetWindowText(hwnd, TEXT("Find Hook Proc Dialog")) ; <br> <br>      if (GetDlgItem(hwnd, ID_DEFSTRINGS)) <br>      { <br>        for (i=0; i&lt;5; i++) <br>        { <br>          lstrcpy(szMsg, szDefString) ; <br>          wsprintf(szTmp, TEXT("Number %d"), i+1) ; <br>          lstrcat(szMsg, szTmp) ; <br>          SendDlgItemMessage(hwnd, ID_DEFSTRINGS, LB_ADDSTRING, (WPARAM) 0, <br>                             (LONG) (LPTSTR) szMsg) ; <br>        } <br>      } <br> <br>      return TRUE ; <br> <br>      break ; <br> <br> <br> <br>    /* use the WM_CTLCOLOR* messages to change the color of the Open <br>       dialog */ <br> <br>    case WM_CTLCOLORDLG: <br> <br>        if (!hBrushDlg) <br>            hBrushDlg = GetStockObject(LTGRAY_BRUSH) ; <br> <br>        return (UINT) hBrushDlg ; <br> <br>        break ; <br> <br> <br>    case WM_CTLCOLORBTN: <br> <br>        SetBkMode((HDC) wParam, TRANSPARENT) ;   //sets background color <br>                                                 //for push and check box <br>                                                 //buttons... <br> <br>        if (!hBrushButton) <br>            hBrushButton = GetStockObject(LTGRAY_BRUSH) ; <br> <br>        return (UINT) hBrushButton ; <br> <br>        break ; <br> <br> <br>    case WM_CTLCOLORSTATIC: <br> <br>        SetTextColor((HDC) wParam, RGB(0x00, 0xff, 0x00)) ;  //green <br>        SetBkMode((HDC) wParam, TRANSPARENT) ;               //transparent text <br> <br>        if (!hBrushDlg) <br>            hBrushDlg = GetStockObject(LTGRAY_BRUSH) ; <br> <br>        return (UINT) hBrushDlg ; <br> <br>        break ; <br> <br> <br>    default: <br>      break ; <br>  } <br> <br>  return FALSE ;   //send msg to the common dialog code <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: GetFindDlgHandle(void) <br> <br>  Purpose:  Finds, loads, and returns a handle to the custom template <br>            for FindText() in CDTEST.EXE. <br> <br>  Returns:  HANDLE to the dialog resource. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>HANDLE GetFindDlgHandle(void) <br>{ <br>  hResFind = FindResource(hInst, TEXT("fttemp1"), RT_DIALOG) ; <br> <br>  hDialogFind = LoadResource(hInst, hResFind) ; <br> <br> <br>  return hDialogFind ; <br>} <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: GetReplaceDlgHandle(void) <br> <br>  Purpose:  Finds, loads, and returns a handle to the custom template <br>            for ReplaceText() in CDTEST.EXE. <br> <br>  Returns:  HANDLE to the dialog resource. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>HANDLE GetReplaceDlgHandle(void) <br>{ <br>  hResFind = FindResource(hInst, TEXT("fttemp2"), RT_DIALOG) ; <br> <br>  hDialogFind = LoadResource(hInst, hResFind) ; <br> <br>  return hDialogFind ; <br>} <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: DoFindReplaceStuff(LPFINDREPLACE) <br> <br>  Purpose:  Calls FindText() or ReplaceText(). <br> <br>  Returns:  Nothing: <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>void DoFindRepStuff(LPFINDREPLACE pfr) <br>{ <br>  if (IsDlgButtonChecked(hwndMainDialog, ID_PRELOADEDFIND) == 1) <br>  { <br>    if (bDoFindDlg) <br>      pfr-&gt;hInstance = GetFindDlgHandle() ; <br>    else <br>      pfr-&gt;hInstance = GetReplaceDlgHandle() ; <br>  } <br> <br>  if (bDoFindDlg) <br>  { <br>    if (IsDlgButtonChecked(hwndMainDialog, ID_FRNULLSTRUCT) == 1) <br>    { <br>        hwndFind = FindText((LPFINDREPLACE) NULL) ; <br>    } <br>    else <br>    { <br>        hwndFind = FindText(pfr) ; <br>    } <br>  } <br>  else <br>  { <br>    if (IsDlgButtonChecked(hwndMainDialog, ID_FRNULLSTRUCT) == 1) <br>    { <br>        hwndFind = ReplaceText((LPFINDREPLACE) NULL) ; <br>    } <br>    else <br>    { <br>        hwndFind = ReplaceText(pfr) ; <br>    } <br> <br>  } <br> <br> <br>  wsprintf(szTemp, szLongFilter, CommDlgExtendedError()) ; <br>  SetDlgItemText(hwndMainDialog, ID_ERRORFT, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, hwndFind) ; <br>  SetDlgItemText(hwndMainDialog, ID_RETURNFT, szTemp) ; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

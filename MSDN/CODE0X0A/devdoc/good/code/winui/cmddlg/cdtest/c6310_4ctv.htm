<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COLORS.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6313"></a>COLORS.C</h2>
<pre><code>/************************************************************************ <br> <br>  File: colors.c <br> <br>  Purpose: <br> <br>    This file contains all the code necessary for the colors dialog. <br> <br> <br>  Functions: <br> <br>    DoColorsDialog()          -- Starts off the creation of the main colors dlg <br> <br>    ColorsProc()              -- Callback function for the colors dialog <br> <br>    InitColorStruct()         -- Initializes default CHOOSECOLOR strucure <br> <br>    FillColorDlg()            -- Fills the colors dialog with the current <br>                                 CHOOSECOLOR structure values. <br> <br>    GetColorDlg()             -- Retrieves users edits and puts them in <br>                                 the appropriate CHOOSECOLOR structure. <br> <br>    ColorsHookProc()          -- Callback hook function if the ChooseColor() <br>                                 function is called with CC_ENABLEHOOK <br> <br>    GetColorsResHandle()      -- Loads a custom template from the EXE <br>                                 and returns a handle to it <br> <br>    DoChooseColorStuff()      -- Calls the ChooseColor() function. <br> <br>    ColorThreadProc1()        -- Starting address for the first thread <br> <br>    ColorThreadProc2()        -- Starting address for the second thread <br> <br>    MultiThreadColorDlg()     -- Creates two threads in this process <br>                                 which each create ChooseColor() dialogs. <br> <br>    EnableColorButtons()      -- Enables or disables buttons in the colors <br>                                 dialog.  Necessary for the multithreading. <br> <br> <br>************************************************************************/ <br> <br> <br>#include &lt;windows.h&gt; <br>#include &lt;commdlg.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;winnls.h&gt; <br>#include "cdtest.h" <br>#include "colors.h" <br> <br> <br>/* Function prototypes */ <br>void InitColorStruct(HWND hwnd, LPCHOOSECOLOR) ; <br>void FillColorDlg(HWND hwnd, LPCHOOSECOLOR) ; <br>void GetColorDlg(HWND hwnd, LPCHOOSECOLOR) ; <br>void DoChooseColorStuff(HWND, LPCHOOSECOLOR) ; <br>UINT APIENTRY ColorsHookProc(HWND hwnd, UINT msg, UINT wParam, LONG lParam) ; <br> <br> <br>/* Variables and external declarations */ <br> <br>CHOOSECOLOR cc ; <br>DWORD dwCustColors[16] ; <br>DWORD dwColor ; <br>HANDLE hDialogColors, hResColors ; <br>HANDLE GetColorsResHandle(void) ; <br>TCHAR szTemplateNameC[50] ; <br>extern UINT uMode ; <br>extern LONG MyAtol(LPTSTR, BOOL, LPBOOL) ; <br> <br> <br>/* Multithreading stuff */ <br> <br>DWORD dwColorThreadID1 ; <br>DWORD dwColorThreadID2 ; <br>DWORD dwColorThreadParm1 ; <br>DWORD dwColorThreadParm2 ; <br>DWORD ColorThreadProc1(LPDWORD) ; <br>DWORD ColorThreadProc2(LPDWORD) ; <br>void MultiThreadColorDlg(void) ; <br>void EnableColorButtons(HWND, BOOL) ; <br>HANDLE hColorThread1 ; <br>HANDLE hColorThread2 ; <br>HWND hwndMainColor ; <br>int nOpenColorDlgCount ; <br>CHOOSECOLOR ccThread1 ; <br>CHOOSECOLOR ccThread2 ; <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: DoColorsDialog(HWND) <br> <br>  Purpose: To create the ChooseColor() common dialog creation dialog. <br> <br>  Returns: Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>void DoColorsDialog(HWND hwnd) <br>{ <br> <br> <br>  DialogBox(hInst, MAKEINTRESOURCE(ID_COLORSDIALOG), <br>            hwnd, ColorsProc) ; <br> <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: ColorsProc(HWND, UINT, UINT, LONG) <br> <br>  Purpose: The callback function for the main colors dialog. <br> <br>  Returns: TRUE or FALSE depending on the situation. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br> <br>BOOL APIENTRY ColorsProc(HWND hwnd, UINT msg, UINT wParam, LONG lParam) <br>{ <br>  BOOL bRet = FALSE ; <br> <br>  switch (msg) <br>  { <br> <br>    case WM_INITDIALOG: <br> <br>       InitColorStruct(hwnd, &amp;cc) ;  //initialize the CHOOSECOLOR structure <br>       FillColorDlg(hwnd, &amp;cc) ;  //and fill the colors dialog. <br> <br>       nOpenColorDlgCount = 0 ; <br> <br>       hwndMainColor = hwnd ; <br> <br>       *(&amp;ccThread1) = *(&amp;ccThread2) = *(&amp;cc) ; <br> <br>       SetFocus(GetDlgItem(hwnd, ID_STRUCTSIZEC)) ; <br> <br>       break ; <br> <br> <br>     case UMSG_DECREMENTDLGCOUNT:  //user defined message indicating <br>                                   //the closure of a multithreaded dialog <br> <br>       /* Keep the main colors dialog buttons disabled until the last <br>          multithreaded dialog function has returned. */ <br> <br>       nOpenColorDlgCount-- ; <br> <br>       if (nOpenColorDlgCount == 0) <br>         EnableColorButtons(hwnd, TRUE) ; <br> <br>       break ; <br> <br> <br>     case WM_COMMAND: <br> <br>        switch (LOWORD(wParam)) <br>        { <br>          case IDOK: <br> <br>            GetColorDlg(hwnd, &amp;cc) ;            //get user's choices <br> <br>            DoChooseColorStuff(hwnd, &amp;cc) ;     //do the dialog <br> <br>            break ; <br> <br> <br>          case ID_RESETC: <br> <br>            SendDlgItemMessage(hwnd, ID_CUSTCOLORSC, CB_RESETCONTENT, <br>              (WPARAM) 0, (LPARAM) 0) ; <br> <br>            InitColorStruct(hwnd, &amp;cc) ; <br>            FillColorDlg(hwnd, &amp;cc) ; <br> <br>            SendDlgItemMessage(hwnd, ID_NULLSTRUCTCOLOR, BM_SETCHECK, (WPARAM)0, (LPARAM)0) ; <br>            SendDlgItemMessage(hwnd, ID_PRELOADEDCOLORS, BM_SETCHECK, (WPARAM)0, (LPARAM)0) ; <br> <br>            SetFocus(GetDlgItem(hwnd, ID_STRUCTSIZEC)) ; <br> <br>            break ; <br> <br> <br>          case IDCANCEL: <br>            EndDialog(hwnd, FALSE) ; <br>            break ; <br> <br> <br>          case ID_ADD1C: <br>            GetDlgItemText(hwnd, ID_CUSTCOLORSC, szTemp, 100) ; <br> <br>            if (*szTemp) <br>              SendDlgItemMessage(hwnd, ID_CUSTCOLORSC, CB_ADDSTRING, <br>                                 (WPARAM) 0, (LPARAM) (LPTSTR) szTemp) ; <br>            break ; <br> <br>          case ID_CLEAR1C: <br>            SendDlgItemMessage(hwnd, ID_CUSTCOLORSC, CB_RESETCONTENT, <br>                               (WPARAM) 0, (LPARAM) 0) ; <br>            break ; <br> <br>          case ID_MULTITHREADCOLORS: <br> <br>            /* Start the dialog count off at 2, disable the main dialog's <br>               buttons, and multithread */ <br> <br>            nOpenColorDlgCount = 2 ; <br> <br>            EnableColorButtons(hwnd, FALSE) ; <br> <br>            MultiThreadColorDlg() ; <br> <br>            break ; <br> <br> <br>          default: break ; <br>        } <br> <br>    default: <br> <br> <br>      /* If the help button is pressed in the ChooseColor() <br>         dialog, it will send a message Registered with RegisterWindowMessage() <br>         to the parent window.  The message nHelpMessage was registered <br>         at application startup */ <br> <br>      if (msg == nHelpMessage) <br>        MessageBox(GetForegroundWindow(), TEXT("Hello from the help button"), <br>                   TEXT("Colors Help Button"), MB_OK | MB_APPLMODAL) ; <br> <br>      break ; <br>  } <br> <br>  return FALSE ; <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: InitColorStruct(HWND, LPCHOOSECOLOR) <br> <br>  Purpose: Fills the default CHOOSECOLOR structure with some default <br>           values. <br> <br>  Returns: Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br> <br>void InitColorStruct(HWND hwnd, LPCHOOSECOLOR pcc) <br>{ <br>  int i ; <br> <br>  pcc-&gt;lStructSize  = sizeof(CHOOSECOLOR) ; <br>  pcc-&gt;hwndOwner    = hwnd ; <br>  pcc-&gt;hInstance    = (HANDLE) hInst ; <br> <br>  dwColor = RGB(0, 0, 0) ; <br>  pcc-&gt;rgbResult    = dwColor ; <br> <br>  for (i=0; i&lt;16; i++) <br>    dwCustColors[i] = (RGB(255-i*10, i, i*10)) ; <br> <br>  pcc-&gt;lpCustColors = (LPDWORD) dwCustColors ; <br> <br>  pcc-&gt;Flags     = CC_FULLOPEN | CC_SHOWHELP | CC_RGBINIT ; <br> <br>  pcc-&gt;lCustData = 0 ; <br> <br>  pcc-&gt;lpfnHook = ColorsHookProc ; <br> <br>  lstrcpy(szTemplateNameC, TEXT("clrtemp")) ;         //name of custom template <br> <br>  pcc-&gt;lpTemplateName = (LPTSTR) szTemplateNameC ; <br> <br>  return ; <br>} <br> <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: FillColorDlg(HWND, LPCHOOSECOLOR) <br> <br>  Purpose: Fills the colors dialog with the current contents of the <br>           CHOOSECOLOR structure passed in as the second parameter. <br> <br>  Returns: Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>void FillColorDlg(HWND hwnd, LPCHOOSECOLOR pcc) <br>{ <br>  int i ; <br> <br>  wsprintf(szTemp, szLongFilter, pcc-&gt;lStructSize) ; <br>  SetDlgItemText(hwnd, ID_STRUCTSIZEC, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) pcc-&gt;hwndOwner) ; <br>  SetDlgItemText(hwnd, ID_HWNDOWNERC, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) pcc-&gt;hInstance) ; <br>  SetDlgItemText(hwnd, ID_HINSTANCEC, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, pcc-&gt;rgbResult) ; <br>  SetDlgItemText(hwnd, ID_RGBRESULTC, szTemp) ; <br> <br>  SendDlgItemMessage(hwnd, ID_CUSTCOLORSC, CB_RESETCONTENT, <br>                     (WPARAM) 0, (LPARAM) 0) ; <br> <br>  for (i=0; i&lt;16; i++) <br>  { <br>    wsprintf(szTemp, szLongFilter, dwCustColors[i]) ; <br>    SendDlgItemMessage(hwnd, ID_CUSTCOLORSC, CB_ADDSTRING, <br>                       (WPARAM) 0, (LPARAM) (LPTSTR) szTemp) ; <br>  } <br> <br>  SendDlgItemMessage(hwnd, ID_CUSTCOLORSC, CB_SETCURSEL, <br>                     (WPARAM) 0 , (LPARAM) 0) ; <br> <br>  wsprintf(szTemp, szLongFilter, pcc-&gt;Flags) ; <br>  SetDlgItemText(hwnd, ID_FLAGSC, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, pcc-&gt;lCustData) ; <br>  SetDlgItemText(hwnd, ID_CUSTDATAC, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, (DWORD) pcc-&gt;lpfnHook) ; <br>  SetDlgItemText(hwnd, ID_HOOKC, szTemp) ; <br> <br>  SetDlgItemText(hwnd, ID_TEMPLATEC, (LPTSTR) pcc-&gt;lpTemplateName) ; <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: GetColorDlg(HWND, LPCHOOSECOLOR) <br> <br>  Purpose: Retrieves the users entries in the colors dialog edit boxes <br>           and puts them in the appropriate CHOOSECOLOR structure <br>           members. <br> <br>  Returns: Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br> <br>void GetColorDlg(HWND hwnd, LPCHOOSECOLOR pcc) <br>{ <br>  int i ; <br>  BOOL b ; <br>  TCHAR szNum[30] ; <br> <br>  #define WSIZECC 30 <br> <br>  GetDlgItemText(hwnd, ID_STRUCTSIZEC, szNum, WSIZECC) ; <br>  pcc-&gt;lStructSize = MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_HWNDOWNERC, szNum, WSIZECC) ; <br>  pcc-&gt;hwndOwner = (HWND) MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_HINSTANCEC, szNum, WSIZECC) ; <br>  pcc-&gt;hInstance = (HANDLE) MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_RGBRESULTC, szNum, WSIZECC) ; <br>  pcc-&gt;rgbResult = MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  for (i=0; i&lt;16; i++) <br>  { <br>    if (SendDlgItemMessage(hwnd, ID_CUSTCOLORSC, CB_GETLBTEXT, <br>                          (WPARAM) i, (LPARAM) (LPTSTR) szNum) != CB_ERR) <br> <br>      dwCustColors[i] = MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>    else <br>      dwCustColors[i] = (DWORD) 0 ; <br> <br>    *(pcc-&gt;lpCustColors + i) = dwCustColors[i] ; <br>  } <br> <br>  GetDlgItemText(hwnd, ID_FLAGSC, szNum, WSIZECC) ; <br>  pcc-&gt;Flags = MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_CUSTDATAC, szNum, WSIZECC) ; <br>  pcc-&gt;lCustData = MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_HOOKC, szNum, WSIZECC) ; <br>  pcc-&gt;lpfnHook = (LPCCHOOKPROC) MyAtol(szNum, uMode == IDM_HEXMODE, &amp;b) ; <br> <br>  GetDlgItemText(hwnd, ID_TEMPLATEC, (LPTSTR) pcc-&gt;lpTemplateName, 50) ; <br> <br>  return ; <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: ColorsHookProc(HWND, UINT, UINT, LONG) ; <br> <br>  Purpose:  This function will be called before the normal ChooseColor() <br>            logic is envoked. <br> <br>  Returns: FALSE to instruct ChooseColor() to proceed with it's normal <br>           processing of the message.  TRUE to discard normal processing. <br> <br>  Comments: <br> <br>    To enable the hook, type the value for "CC_ENABLEHOOK" in the <br>    "Flags" edit box. <br> <br>************************************************************************/ <br> <br>UINT APIENTRY ColorsHookProc(HWND hwnd, UINT msg, UINT wParam, LONG lParam) <br>{ <br>  LPCHOOSECOLOR pCc ; <br>  TCHAR szMsg[50] ; <br> <br>  switch(msg) <br>  { <br>    case WM_INITDIALOG: <br> <br>      /* During initialization of the ChooseColor() dialog, if there is a <br>         hook proc the ChooseColor() function will send a pointer to the <br>         current CHOOSECOLOR structure in the wParam parameter */ <br> <br>      pCc = (LPCHOOSECOLOR) lParam ; <br> <br>      if (pCc-&gt;lCustData != 0L) <br>      { <br>        wsprintf(szMsg, TEXT("CHOOSECOLOR-&gt;lCustData is: %ld"), pCc-&gt;lCustData) ; <br>        MessageBox(hwnd, szMsg, TEXT("lCustData Sent!"), MB_OK | MB_APPLMODAL) ; <br>      } <br> <br>      SetWindowText(hwnd, TEXT("Color Hook Proc Dialog")) ; <br> <br>      break ; <br> <br>    default: <br>      break ; <br>  } <br> <br>  return FALSE ;   //send msg to the common dialog code <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function: GetColorsResHandle(void) <br> <br>  Purpose: Creates a handle to the custom template and returns it to the <br>           caller. <br> <br>  Returns: HANDLE to a preloaded custom template <br> <br>  Comments: <br> <br>    To use this preloaded template, mark the "Preloaded Template" checkbox <br>    and enter CC_ENABLETEMPLATEHANDLE in the "Flags" edit box. <br> <br>************************************************************************/ <br> <br>HANDLE GetColorsResHandle(void) <br>{ <br> <br>  hResColors = FindResource(hInst, TEXT("clrtemp"), RT_DIALOG) ; <br> <br>  hDialogColors = LoadResource(hInst, hResColors) ; <br> <br> <br>  return hDialogColors ; <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function:DoChooseColorStuff(HWND, LPCHOOSECOLOR) <br> <br>  Purpose: Does the actual calling of the ChooseColor() function. <br> <br> <br>  Returns: Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>void DoChooseColorStuff(HWND hwnd, LPCHOOSECOLOR pcc) <br>{ <br>  BOOL bRet ; <br> <br>  /* If the "Preloaded template button is checked, load a handle for <br>     the custom template and put it in the hInstance member of the <br>     CHOOSECOLOR structure */ <br> <br>  if (IsDlgButtonChecked(hwnd, ID_PRELOADEDCOLORS) == 1) <br>    pcc-&gt;hInstance = GetColorsResHandle() ; <br> <br> <br>   /* If the "NULL Structure" box is checked, call ChooseColor() will <br>      a NULL pointer.  Otherwise call with the current CHOOSECOLOR pointer */ <br> <br>  if (IsDlgButtonChecked(hwnd, ID_NULLSTRUCTCOLOR) == 1) <br>    bRet = ChooseColor((LPCHOOSECOLOR) NULL) ; <br>  else <br>    bRet = ChooseColor(pcc) ; <br> <br>  if (pcc-&gt;hInstance) <br>  { <br>    FreeResource(hDialogColors) ; <br>    hDialogColors = (HANDLE) 0 ; <br>    hResColors = (HANDLE) 0 ; <br>  } <br> <br> <br>  /* Fill the results into the main colors dialog */ <br> <br>  FillColorDlg(hwnd, pcc) ; <br> <br>  wsprintf(szTemp, szShortFilter, bRet) ; <br>  SetDlgItemText(hwnd, ID_RETURNC, szTemp) ; <br> <br>  wsprintf(szTemp, szLongFilter, CommDlgExtendedError()) ; <br>  SetDlgItemText(hwnd, ID_ERRORC, szTemp) ; <br> <br>} <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function:ColorThreadProc1(LPDWORD) <br> <br>  Purpose: Starting address for first thread <br> <br> <br>  Returns: Any DWORD value. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br> <br>DWORD ColorThreadProc1(LPDWORD pdw) <br>{ <br>  GetColorDlg(hwndMainColor, &amp;ccThread1) ; <br>  DoChooseColorStuff(hwndMainColor, &amp;ccThread1) ; <br> <br>  PostMessage(hwndMainColor, UMSG_DECREMENTDLGCOUNT, 0, 0L ) ; <br> <br>  return 0L ; <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function:ColorThreadProc2(LPDWORD) <br> <br>  Purpose: Starting address for second thread <br> <br> <br>  Returns: Any DWORD value. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br>DWORD ColorThreadProc2(LPDWORD pdw) <br>{ <br>  GetColorDlg(hwndMainColor, &amp;ccThread2) ; <br>  DoChooseColorStuff(hwndMainColor, &amp;ccThread2) ; <br> <br>  PostMessage(hwndMainColor, UMSG_DECREMENTDLGCOUNT, 0, 0L ) ; <br> <br>  return 0L ; <br>} <br> <br> <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function:MultiThreadColorDlg(void) <br> <br>  Purpose: Creates two threads which will each create a new ChooseColor() <br>           dialog. <br> <br> <br>  Returns: Nothing. <br> <br>  Comments: <br> <br>    Do not pass any parameters to this function that may be used by the <br>    ChooseColor dialog routines because this function will return before <br>    the new threads are finished. <br> <br>************************************************************************/ <br> <br> <br>void MultiThreadColorDlg(void) <br>{ <br> <br>  dwColorThreadParm1 = dwColorThreadParm2 = 0L ; <br> <br>  if (!(hColorThread1 = CreateThread((LPSECURITY_ATTRIBUTES) NULL, 0, <br>                                     (LPTHREAD_START_ROUTINE) ColorThreadProc1, <br>                                     &amp;dwColorThreadParm1, CREATE_SUSPENDED, &amp;dwColorThreadID1))) <br> <br>  { <br>    MessageBox(GetForegroundWindow(), TEXT("Error creating thread 1"), NULL, <br>               MB_OK | MB_ICONEXCLAMATION | MB_APPLMODAL) ; <br> <br>    nOpenColorDlgCount = 0 ; <br> <br>    EnableColorButtons(hwndMainColor, TRUE) ; <br> <br>    return ; <br>  } <br> <br> <br>  if (!(hColorThread2 = CreateThread((LPSECURITY_ATTRIBUTES) NULL, 0, <br>                                     (LPTHREAD_START_ROUTINE) ColorThreadProc2, <br>                                     &amp;dwColorThreadParm2, CREATE_SUSPENDED, &amp;dwColorThreadID2))) <br>  { <br>    MessageBox(GetForegroundWindow(), TEXT("Error creating thread 2"), NULL, <br>               MB_OK | MB_ICONEXCLAMATION | MB_APPLMODAL) ; <br> <br>    nOpenColorDlgCount = 0 ; <br> <br>    EnableColorButtons(hwndMainColor, TRUE) ; <br> <br>    return ; <br>  } <br> <br>  ResumeThread(hColorThread1) ; <br> <br>  ResumeThread(hColorThread2) ; <br> <br>  return ; <br>} <br> <br> <br> <br> <br> <br>/************************************************************************ <br> <br>  Function:EnableColorButtons(HWND, BOOL) <br> <br>  Purpose: Enables or disables the buttons on the main colors dialog. <br>           Necessary when multithreading. <br> <br>  Returns: Nothing. <br> <br>  Comments: <br> <br>************************************************************************/ <br> <br> <br>void EnableColorButtons(HWND hwnd, BOOL bEnable) <br>{ <br>  EnableWindow(GetDlgItem(hwnd, IDOK), bEnable) ; <br>  EnableWindow(GetDlgItem(hwnd, IDCANCEL), bEnable) ; <br>  EnableWindow(GetDlgItem(hwnd, ID_RESETC), bEnable) ; <br>  EnableWindow(GetDlgItem(hwnd, ID_MULTITHREADCOLORS), bEnable) ; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

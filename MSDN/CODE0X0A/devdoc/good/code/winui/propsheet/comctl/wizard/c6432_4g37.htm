<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WIZARD.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6433"></a>WIZARD.C</h2>
<pre><code>//THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF  <br>//ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO  <br>//THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A  <br>// PARTICULAR PURPOSE. <br>// <br>// Copyright 1994 - 1998 Microsoft Corporation.  All Rights Reserved. <br>// <br>//PROGRAM:Wizard.c <br>// <br>//PURPOSE:Demonstrates how to manipulate a wizard control <br>// <br>//PLATFORMS:Windows 95 <br>// <br>//FUNCTIONS: <br>//WinMain() - calls initialization function, processes message loop <br>//InitApplication() - Initializes window data nd registers window <br>//InitInstance() -saves instance handle and creates main window <br>//MainWindProc() Processes messages <br>//About() - Process messages for "About" dialog box <br>//YourInfo() - Process the "Your Information" Wizard page <br>//WorkHabits() - Processes the "Work Habits" Wizard page <br>//TeamWork() - Processes the "Team Work" Wizard page <br>//Reliability() - Processes the "Reliability" Wizard page <br>//Goals() - Processes the "Goal Attainment" Wizard page <br>// Adaptation() - Processes the "Adaptability to Change" Wizard page <br>//FillInPropertyPage() - Fills in a PROPSHEETPAGE structure <br>//CreateWizard() - Creates the wizard <br>//GenerateReview() - Generates the resulting review <br>// <br>//SPECIAL INSTRUCTIONS: N/A <br>// <br> <br>#include &lt;windows.h&gt;    // includes basic windows functionality <br>#include &lt;string.h&gt;     // includes the string functions <br>#include &lt;prsht.h&gt;      // includes the property sheet functionality <br>#include "resource.h"   // includes the definitions for the resources <br>#include "wizard.h"     // includes the application-specific information <br> <br>REVIEWINFO rvInfo;      // a structure containing the review information <br>HWND hwndEdit;          // handle to the main MLE <br>TCHAR lpReview[MAX_BUF]; // Buffer for the review <br> <br>// <br>// <br>//   FUNCTION: WinMain(HANDLE, HANDLE, LPSTR, int) <br>// <br>//   PURPOSE: Main entry point for the application.  <br>// <br>//   COMMENTS: <br>// <br>//This function calls the initialization functions and processes <br>//the main message loop. <br>//  <br>int APIENTRY WinMain( <br>HINSTANCE hInstance, <br>HINSTANCE hPrevInstance, <br>LPSTR lpCmdLine, <br>int nCmdShow <br>) <br>{ <br>MSG msg;                        <br> <br>      // save off the current instance <br>rvInfo.hInst = hInstance; <br> <br>      // if the initialization fails, return. <br>if (!InitApplication(hInstance)) <br>return (FALSE);      <br> <br>// Perform initializations that apply to a specific instance  <br>if (!InitInstance(hInstance, nCmdShow)) <br>return (FALSE); <br> <br>// Acquire and dispatch messages until a WM_QUIT message is received.  <br>while (GetMessage(&amp;msg, <br>NULL,               <br>0,                  <br>0))                 <br>{ <br>TranslateMessage(&amp;msg); <br>DispatchMessage(&amp;msg);  <br>} <br>return (msg.wParam);   <br>  <br>} <br> <br> <br>// <br>// <br>//   FUNCTION: InitApplication(HANDLE)  <br>// <br>//   PURPOSE: Initializes window data and registers window class  <br>// <br>//   COMMENTS: <br>// <br>//This function registers the window class for the main window. <br>//  <br>BOOL InitApplication(HANDLE hInstance) <br>{ <br>        WNDCLASS  wcSample; <br> <br>// Fill in window class structure with parameters that describe the        <br>// main window.                                                            <br> <br>        wcSample.style = 0;                      <br>        wcSample.lpfnWndProc = (WNDPROC)MainWndProc;  <br>        wcSample.cbClsExtra = 0;               <br>        wcSample.cbWndExtra = 0;               <br>        wcSample.hInstance = hInstance;        <br>        wcSample.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(EXE_ICON)); <br>        wcSample.hCursor = LoadCursor(NULL, IDC_ARROW); <br>        wcSample.hbrBackground = GetStockObject(WHITE_BRUSH);  <br>        wcSample.lpszMenuName =  TEXT("WizardMenu");   <br>        wcSample.lpszClassName = TEXT("SampleWClass"); <br> <br>        return (RegisterClass(&amp;wcSample)); <br> <br>} <br> <br> <br>// <br>// <br>//   FUNCTION: InitInstance(HANDLE, int) <br>// <br>//   PURPOSE: Creates the main window. <br>// <br>//   COMMENTS: N/A <br>// <br>//  <br>BOOL InitInstance( <br>HANDLE          hInstance, <br>int             nCmdShow)  <br>{ <br>HWND hWndMain; <br> <br>hWndMain = CreateWindow( <br>                TEXT("SampleWClass"), <br>                TEXT("Wizard Sample"),  <br>WS_OVERLAPPEDWINDOW, <br>CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, <br>NULL,                <br>NULL,                <br>hInstance,           <br>NULL); <br> <br>/* If window could not be created, return "failure" */ <br>if (!hWndMain) <br>return (FALSE); <br> <br>/* Make the window visible; update its client area; and return "success" */ <br>ShowWindow(hWndMain, nCmdShow); <br>UpdateWindow(hWndMain);  <br>return (TRUE);       <br> <br>} <br> <br>// <br>//   FUNCTION: MainWndProc(HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for the main window procedure  <br>// <br>//    MESSAGES: <br>// <br>//WM_CREATE - creates the main MLE for the window <br>//WM_COMMAND - processes the menu commands for the application <br>//WM_SIZE - sizes the MLE to fill the client area of the window <br>//WM_DESTROY - posts a quit message and returns <br>// <br>LONG APIENTRY MainWndProc( <br>HWND hWnd,                // window handle                    <br>UINT message,             // type of message                  <br>UINT wParam,              // additional information           <br>LONG lParam)              // additional information           <br>{ <br> <br>switch (message)  <br>{ <br>        case WM_CREATE: <br>// Create an MLE for the file contents. <br>hwndEdit = CreateWindow( <br>                TEXT("EDIT"),      <br>NULL,        <br>                WS_CHILD | WS_VISIBLE | ES_WANTRETURN | <br>                    ES_MULTILINE | ES_AUTOVSCROLL, <br>                0, 0, 0, 0,  <br>                hWnd,        <br>                (HMENU) ID_EDITCHILD,  <br>                (HINSTANCE) GetWindowLong(hWnd, GWL_HINSTANCE), <br>                NULL);                <br> <br>            // Update the MLE.  <br>            SendMessage(hwndEdit, WM_SETTEXT, 0, (LPARAM) "Choose Performance Review Wizard from the Options menu."); <br>            return 0; <br> <br>        case WM_SIZE: <br>            // Make the edit control the size of the window's client area.  <br>            MoveWindow(hwndEdit, 0, 0, LOWORD(lParam), HIWORD(lParam), TRUE);           <br>            return 0; <br> <br>        case WM_COMMAND: <br>            switch( LOWORD( wParam )) <br>{ <br>                case IDM_WIZARD: <br>                    CreateWizard(hWnd, rvInfo.hInst); <br> <br>// Update the MLE.  <br>    if (SendMessage(hwndEdit, WM_SETTEXT, 0, (LPARAM) lpReview) != TRUE) <br>MessageBox( hWnd, TEXT("Text not set!"), NULL, MB_OK); <br> <br>break; <br> <br>case IDM_EXIT: <br>PostQuitMessage(0); <br>break; <br> <br>case IDM_ABOUT: <br>DialogBox(rvInfo.hInst, TEXT("AboutBox"), hWnd, (DLGPROC)About); <br>break; <br> <br>default: <br>return (DefWindowProc(hWnd, message, wParam, lParam)); <br> <br>} <br>break; <br> <br>case WM_DESTROY:                  /* message: window being destroyed */ <br>PostQuitMessage(0); <br>break; <br> <br>default: <br>return (DefWindowProc(hWnd, message, wParam, lParam)); <br>} <br>return (0); <br>} <br> <br> <br>// <br>//  FUNCTION: About(HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for the "About" dialog box  <br>// <br>//  MESSAGES: <br>// <br>//WM_INITDIALOG - initalizes the dialog box <br>//WM_COMMAND - processes the input <br>// <br>BOOL APIENTRY About( <br>   HWND hDlg, <br>UINT message, <br>UINT wParam, <br>LONG lParam) <br>{ <br>switch (message) <br>{ <br>   case WM_INITDIALOG: <br>  return TRUE; <br> <br>   case WM_COMMAND:               <br>  if (LOWORD(wParam) == IDOK) <br> { <br>  EndDialog(hDlg, TRUE); <br>  return TRUE; <br>  } <br>  break; <br> <br>default: <br>return FALSE; <br>} <br> <br>} <br> <br>// <br>//  FUNCTION: YourInfo(HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for "Your Information" page  <br>// <br>//  MESSAGES: <br>// <br>//WM_INITDIALOG - intializes the page <br>//WM_NOTIFY - processes the notifications sent to the page <br>// <br>BOOL APIENTRY YourInfo( <br>HWND hDlg, <br>UINT message, <br>UINT wParam, <br>LONG lParam) <br>{ <br> <br>switch (message) <br>{ <br>case WM_INITDIALOG: <br>lstrcpy(rvInfo.pszName, TEXT("")); <br>lstrcpy(rvInfo.pszTitle, TEXT("")); <br>lstrcpy(rvInfo.pszProject, TEXT("")); <br>lstrcpy(rvInfo.pszDepartment, TEXT("")); <br> <br>break; <br> <br>case WM_NOTIFY: <br>    switch (((NMHDR FAR *) lParam)-&gt;code)  <br>    { <br> <br>  case PSN_KILLACTIVE: <br>           SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>return 1; <br>break; <br> <br>case PSN_RESET: <br>// reset to the original values <br>lstrcpy(rvInfo.pszName, TEXT("")); <br>lstrcpy(rvInfo.pszTitle,TEXT("")); <br>lstrcpy(rvInfo.pszProject, TEXT("")); <br>lstrcpy(rvInfo.pszDepartment, TEXT("")); <br>           SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>break; <br> <br> case PSN_SETACTIVE: <br>    PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_NEXT); <br>SendMessage(GetDlgItem(hDlg,0x3024 ), BM_SETSTYLE, (WPARAM)BS_PUSHBUTTON, MAKELONG(FALSE, 0)); <br>//SendMessage(GetParent(hDlg), DM_SETDEFID, (WPARAM)IDC_BUTTON1, 0); <br>SendMessage(GetDlgItem(hDlg, IDE_NAME), WM_SETTEXT, 0, (LPARAM)rvInfo.pszName); <br>SendMessage(GetDlgItem(hDlg, IDE_TITLE), WM_SETTEXT, 0, (LPARAM)rvInfo.pszTitle); <br>SendMessage(GetDlgItem(hDlg, IDE_PROJECT), WM_SETTEXT, 0, (LPARAM)rvInfo.pszProject); <br>SendMessage(GetDlgItem(hDlg, IDE_DEPARTMENT), WM_SETTEXT, 0, (LPARAM)rvInfo.pszDepartment); <br>break; <br> <br>                case PSN_WIZNEXT: <br>// the Next button was pressed <br> SendDlgItemMessage(hDlg, IDE_NAME, WM_GETTEXT, (WPARAM)MAX_PATH, (LPARAM) rvInfo.pszName); <br>SendDlgItemMessage(hDlg, IDE_TITLE, WM_GETTEXT, (WPARAM)MAX_PATH, (LPARAM)rvInfo.pszTitle); <br>SendDlgItemMessage(hDlg, IDE_PROJECT, WM_GETTEXT, (WPARAM)MAX_PATH, (LPARAM)rvInfo.pszProject); <br>SendDlgItemMessage(hDlg, IDE_DEPARTMENT, WM_GETTEXT, (WPARAM)MAX_PATH, (LPARAM)rvInfo.pszDepartment); <br>     break; <br> <br>default: <br>return FALSE; <br> <br>    } <br>break; <br> <br>default: <br>return FALSE; <br>} <br>return TRUE;    <br>} <br> <br>// <br>//  FUNCTION: WorkHabits(HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for "Work Habits" page  <br>// <br>//  MESSAGES: <br>// <br>//WM_INITDIALOG - intializes the page <br>//WM_NOTIFY - processes the notifications sent to the page <br>//WM_COMMAND - saves the id of the choice selected <br>// <br>BOOL APIENTRY WorkHabits( <br>HWND hDlg, <br>UINT message, <br>UINT wParam, <br>LONG lParam) <br>{ <br> <br>switch (message) <br>{ <br>case WM_INITDIALOG: <br>rvInfo.iWorkHabits = 0; <br>break; <br> <br>case WM_COMMAND: <br>if (HIWORD(wParam) == BN_CLICKED) <br>{ <br>rvInfo.iWorkHabits = LOWORD(wParam); <br>CheckRadioButton( hDlg, IDC_WORKHAB1,IDC_WORKHAB4, LOWORD(wParam)); <br>} <br>break; <br> <br>case WM_NOTIFY: <br>    switch (((NMHDR FAR *) lParam)-&gt;code)  <br>    { <br> <br>  case PSN_KILLACTIVE: <br>           SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>return 1; <br>break; <br> <br>case PSN_RESET: <br>// rest to the original values <br>rvInfo.iWorkHabits = 0; <br>           SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>break; <br> <br> case PSN_SETACTIVE: <br>    PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_NEXT | PSWIZB_BACK); <br>if (rvInfo.iWorkHabits) <br>SendMessage(GetDlgItem(hDlg, rvInfo.iWorkHabits), BM_SETCHECK, 1, 0L); <br>break; <br> <br>                case PSN_WIZNEXT: <br>// get the selected radio button <br>     break; <br> <br>default: <br>return FALSE; <br> <br>    } <br>break; <br> <br>default: <br>return FALSE; <br>} <br>return TRUE;    <br>} <br> <br>// <br>//  FUNCTION: TeamWork(HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for "Team Work" page  <br>// <br>//  MESSAGES: <br>// <br>//WM_INITDIALOG - intializes the page <br>//WM_NOTIFY - processes the notifications sent to the page <br>//WM_COMMAND - saves the id of the choice selected <br>// <br>// <br>BOOL APIENTRY TeamWork( <br>HWND hDlg, <br>UINT message, <br>UINT wParam, <br>LONG lParam) <br>{ <br> <br>switch (message) <br>{ <br>case WM_INITDIALOG: <br>rvInfo.iTeamWork = 0; <br>break; <br> <br>case WM_COMMAND: <br>if (HIWORD(wParam) == BN_CLICKED) <br>{ <br>rvInfo.iTeamWork = LOWORD(wParam); <br>CheckRadioButton( hDlg, IDC_TEAMWORK1,IDC_TEAMWORK4, LOWORD(wParam)); <br>} <br>break; <br>case WM_NOTIFY: <br>    switch (((NMHDR FAR *) lParam)-&gt;code)  <br>    { <br> <br>  case PSN_KILLACTIVE: <br>           SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>return 1; <br>break; <br> <br>case PSN_RESET: <br>// rest to the original values <br>rvInfo.iTeamWork = 0; <br>           SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>break; <br> <br> case PSN_SETACTIVE: <br>if (rvInfo.iTeamWork) <br>SendMessage(GetDlgItem(hDlg, rvInfo.iTeamWork), BM_SETCHECK, 1, 0L); <br>PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_BACK | PSWIZB_NEXT); <br>break; <br> <br>                case PSN_WIZBACK: <br>                    break; <br> <br>                case PSN_WIZNEXT: <br>                    break; <br> <br>default: <br>return FALSE; <br> <br>    } <br>break; <br> <br>default: <br>return FALSE; <br> <br>} <br>return TRUE;    <br>} <br>// <br>//  FUNCTION: Reliability(HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for "Reliability" page  <br>// <br>//  MESSAGES: <br>// <br>//WM_INITDIALOG - intializes the page <br>//WM_NOTIFY - processes the notifications sent to the page <br>//WM_COMMAND - saves the id of the choice selected <br>// <br>BOOL APIENTRY Reliability( <br>HWND hDlg, <br>UINT message, <br>UINT wParam, <br>LONG lParam) <br>{ <br> <br>switch (message) <br>{ <br>case WM_INITDIALOG: <br>rvInfo.iReliability = 0; <br>break; <br> <br>case WM_COMMAND: <br>if (HIWORD(wParam) == BN_CLICKED) <br>{ <br>rvInfo.iReliability = LOWORD(wParam); <br>CheckRadioButton( hDlg, IDC_RELIABILITY1,IDC_RELIABILITY4, LOWORD(wParam)); <br>} <br>break; <br> <br>case WM_NOTIFY: <br>    switch (((NMHDR FAR *) lParam)-&gt;code)  <br>    { <br> <br>  case PSN_KILLACTIVE: <br>           SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>return 1; <br>break; <br> <br>case PSN_RESET: <br>// rest to the original values <br>rvInfo.iReliability = 0; <br>           SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>break; <br> <br> case PSN_SETACTIVE: <br>if (rvInfo.iReliability) <br>SendMessage(GetDlgItem(hDlg, rvInfo.iReliability), BM_SETCHECK, 1, 0L); <br>PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_BACK | PSWIZB_NEXT); <br>break; <br> <br>                case PSN_WIZBACK: <br>                    break; <br> <br>                case PSN_WIZNEXT: <br>                    break; <br> <br>default: <br>return FALSE; <br>    } <br>break; <br> <br>default: <br>return FALSE; <br>} <br>return TRUE;    <br>} <br>// <br>//  FUNCTION: Goals(HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for "Goal Attainment" page  <br>// <br>//  MESSAGES: <br>// <br>//WM_INITDIALOG - intializes the page <br>//WM_NOTIFY - processes the notifications sent to the page <br>//WM_COMMAND - saves the id of the choice selected <br>// <br>BOOL APIENTRY Goals( <br>HWND hDlg, <br>UINT message, <br>UINT wParam, <br>LONG lParam) <br>{ <br> <br>switch (message) <br>{ <br>case WM_INITDIALOG: <br>rvInfo.iGoals = 0; <br>break; <br> <br>case WM_COMMAND: <br>if (HIWORD(wParam) == BN_CLICKED) <br>{ <br>rvInfo.iGoals = LOWORD(wParam); <br>CheckRadioButton( hDlg, IDC_GOALS1, IDC_GOALS4, LOWORD(wParam)); <br>} <br>break; <br> <br>case WM_NOTIFY: <br>    switch (((NMHDR FAR *) lParam)-&gt;code)  <br>    { <br> <br>  case PSN_KILLACTIVE: <br>           SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>return 1; <br>break; <br> <br>case PSN_RESET: <br>// rest to the original values <br>rvInfo.iGoals = 0; <br>           SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>break; <br> <br> case PSN_SETACTIVE: <br>if (rvInfo.iGoals) <br>SendMessage(GetDlgItem(hDlg, rvInfo.iGoals), BM_SETCHECK, 1, 0L); <br> PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_BACK | PSWIZB_NEXT); <br>break; <br> <br>                case PSN_WIZBACK: <br>                    break; <br> <br>                case PSN_WIZNEXT: <br>                    break; <br> <br>default: <br>return FALSE; <br> <br>    } <br>break; <br> <br>default: <br>return FALSE; <br>} <br>return TRUE;    <br>} <br>// <br>//  FUNCTION: Adaptation(HWND, UINT, UINT, LONG) <br>// <br>//  PURPOSE:  Processes messages for "Addaptability to Change" page  <br>// <br>//  MESSAGES: <br>// <br>//WM_INITDIALOG - intializes the page <br>//WM_NOTIFY - processes the notifications sent to the page <br>//WM_COMMAND - saves the id of the choice selected <br>// <br>// <br>BOOL APIENTRY Adaptation( <br>HWND hDlg, <br>UINT message, <br>UINT wParam, <br>LONG lParam) <br>{ <br> <br>switch (message) <br>{ <br>case WM_INITDIALOG: <br>rvInfo.iAdaptation = 0; <br>break; <br> <br>case WM_COMMAND: <br>if (HIWORD(wParam) == BN_CLICKED) <br>            { <br>rvInfo.iAdaptation = LOWORD(wParam); <br>CheckRadioButton( hDlg, IDC_ADAPTATION1, IDC_ADAPTATION4, LOWORD(wParam)); <br>} <br>break; <br> <br>case WM_NOTIFY: <br>    switch (((NMHDR FAR *) lParam)-&gt;code)  <br>    { <br>  case PSN_KILLACTIVE: <br>           SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>return 1; <br>break; <br> <br>case PSN_RESET: <br>// rest to the original values <br>rvInfo.iAdaptation = 0; <br>           SetWindowLong(hDlg,DWL_MSGRESULT, FALSE); <br>break; <br> <br> case PSN_SETACTIVE: <br>if (rvInfo.iAdaptation) <br>SendMessage(GetDlgItem(hDlg, rvInfo.iAdaptation), BM_SETCHECK, 1, 0L); <br>PropSheet_SetWizButtons(GetParent(hDlg), PSWIZB_BACK | PSWIZB_FINISH); <br>break; <br> <br>                case PSN_WIZBACK: <br>                    break; <br> <br> <br>                case PSN_WIZFINISH: <br>GenerateReview(hDlg); <br>                    break; <br> <br>default: <br>return FALSE; <br>    } <br>break; <br> <br>default: <br>return FALSE; <br>} <br>return TRUE;    <br>} <br> <br>// <br>// <br>//  FUNCTION: FillInPropertyPage(PROPSHEETPAGE *, int, LPSTR, LPFN)  <br>// <br>//  PURPOSE: Fills in the given PROPSHEETPAGE structure  <br>// <br>//  COMMENTS: <br>// <br>//      This function fills in a PROPSHEETPAGE structure with the <br>//      information the system needs to create the page. <br>//  <br>void FillInPropertyPage( PROPSHEETPAGE* psp, int idDlg, LPSTR pszProc, DLGPROC pfnDlgProc) <br>{ <br>    psp-&gt;dwSize = sizeof(PROPSHEETPAGE); <br>    psp-&gt;dwFlags = 0; <br>    psp-&gt;hInstance = rvInfo.hInst; <br>    psp-&gt;pszTemplate = MAKEINTRESOURCE(idDlg); <br>    psp-&gt;pszIcon = NULL; <br>    psp-&gt;pfnDlgProc = pfnDlgProc; <br>    psp-&gt;pszTitle = pszProc; <br>    psp-&gt;lParam = 0; <br> <br>} <br> <br>// <br>// <br>//    FUNCTION: CreateWizard(HWND) <br>// <br>//    PURPOSE: Create the Wizard control.  <br>// <br>//   COMMENTS: <br>// <br>//      This function creates the wizard property sheet. <br>// <br>int CreateWizard(HWND hwndOwner, HINSTANCE hInst) <br>{ <br>    PROPSHEETPAGE psp[NUM_PAGES]; <br>    PROPSHEETHEADER psh; <br> <br>FillInPropertyPage( &amp;psp[0], IDD_INFO, TEXT("Your Information"), YourInfo); <br>FillInPropertyPage( &amp;psp[1], IDD_WORKHABITS, TEXT("Work Habits"), WorkHabits); <br>FillInPropertyPage( &amp;psp[2], IDD_TEAMWORK, TEXT("Team Work"), TeamWork); <br>FillInPropertyPage( &amp;psp[3], IDD_RELIABILITY, TEXT("Reliability"), Reliability); <br>FillInPropertyPage( &amp;psp[4], IDD_GOALS, TEXT("Attainment of Goals"), Goals); <br>FillInPropertyPage( &amp;psp[5], IDD_ADAPTATION, TEXT("Adaptability to Change"), Adaptation); <br>     <br>    psh.dwSize = sizeof(PROPSHEETHEADER); <br>    psh.dwFlags = PSH_PROPSHEETPAGE | PSH_WIZARD | PSH_NOAPPLYNOW; <br>    psh.hwndParent = hwndOwner; <br>    psh.pszCaption = (LPSTR) TEXT("Review Wizard"); <br>    psh.nPages = sizeof(psp) / sizeof(PROPSHEETPAGE); <br>    psh.nStartPage = 0; <br>    psh.ppsp = (LPCPROPSHEETPAGE) &amp;psp; <br> <br>    return (PropertySheet(&amp;psh)); <br>} <br> <br>// <br>// <br>//    FUNCTION: GenerateReview(void) <br>// <br>//    PURPOSE: Generate the review.  <br>// <br>//   COMMENTS: <br>// <br>//      This function generates the review based upon the answers <br>//      given by the Wizard. The function translates lame reality into <br>//      impressive-sounding manager-speak via a string table. <br>// <br>void GenerateReview( HWND hDlg ) <br>{ <br>    TCHAR lpBuf1[MAX_LINE];  // Buffers for the lines in the review. <br>    TCHAR lpBuf2[MAX_LINE]; <br>    TCHAR lpBuf3[MAX_LINE]; <br>    TCHAR lpBuf4[MAX_LINE]; <br>    TCHAR lpBuf5[MAX_LINE]; <br> <br> <br>wsprintf(lpReview, TEXT("Name: %s%C%C%C%CTitle: %s%C%C%C%CDepartment: %s%C%C%C%CMain Project: %s%C%C%C%C"), <br>rvInfo.pszName, 0x0d, 0x0a, 0x0d, 0x0a,  <br>rvInfo.pszTitle, 0x0d, 0x0a, 0x0d, 0x0a,  <br>rvInfo.pszDepartment, 0x0d, 0x0a, 0x0d, 0x0a,  <br>rvInfo.pszProject,0x0d, 0x0a, 0x0d, 0x0a ); <br> <br>// Add a line describing work habits <br>if (LoadString(rvInfo.hInst, rvInfo.iWorkHabits, lpBuf1, sizeof(lpBuf1)) == 0) <br>MessageBox(hDlg, TEXT("Error loading string!"), NULL, MB_OK); <br>else <br>lstrcat(lpReview, lpBuf1); <br> <br>// Add a line describing team work <br>if (LoadString(rvInfo.hInst, rvInfo.iTeamWork, lpBuf2, sizeof(lpBuf2)) == 0) <br>MessageBox(hDlg, TEXT("Error loading string!"), NULL, MB_OK); <br>else <br>lstrcat(lpReview, lpBuf2); <br> <br>// Add a line describing reliability <br>if (LoadString(rvInfo.hInst, rvInfo.iReliability, lpBuf3, sizeof(lpBuf3)) == 0) <br>MessageBox(hDlg, TEXT("Error loading string!"), NULL, MB_OK); <br>else <br>lstrcat(lpReview, lpBuf3); <br> <br>// Add a line describing goals <br>if (LoadString(rvInfo.hInst, rvInfo.iGoals, lpBuf4, sizeof(lpBuf4)) == 0) <br>MessageBox(hDlg, TEXT("Error loading string!"), NULL, MB_OK); <br>else <br>lstrcat(lpReview, lpBuf4); <br> <br>// Add a line describing adaptability <br>if (LoadString(rvInfo.hInst, rvInfo.iAdaptation, lpBuf5, sizeof(lpBuf5)) == 0) <br>MessageBox(hDlg, TEXT("Error loading string!"), NULL, MB_OK); <br>else <br>lstrcat(lpReview, lpBuf5); <br> <br>    <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

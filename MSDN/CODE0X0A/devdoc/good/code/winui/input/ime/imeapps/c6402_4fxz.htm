<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MODE.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6407"></a>MODE.C</h2>
<pre><code>/**********************************************************************/ <br>/*                                                                    */ <br>/*      MODE.C                                                        */ <br>/*                                                                    */ <br>/*      Copyright (c) 1995-1997  Microsoft Corporation                */ <br>/*                                                                    */ <br>/**********************************************************************/ <br> <br>#include "windows.h" <br>#include "imm.h" <br>#include "resource.h" <br>#include "imeapps.h" <br> <br> <br>LRESULT HandleModeCommand(HWND hWnd,WPARAM wParam,LPARAM lParam) <br>{ <br>    HIMC hIMC = ImmGetContext(hWndCompStr); <br>    DWORD dwConv, dwSent; <br>    DWORD dwTemp; <br> <br>    ImmGetConversionStatus(hIMC,&amp;dwConv,&amp;dwSent); <br> <br>    switch(LOWORD(wParam)) <br>    { <br>        case IDM_NATIVEMODE: <br>            dwTemp = dwConv &amp; ~IME_CMODE_LANGUAGE; <br> <br>            switch (dwConv &amp; IME_CMODE_LANGUAGE) <br>            { <br>                case IME_CMODE_ALPHANUMERIC: <br>                    dwTemp |= IME_CMODE_NATIVE; <br>                    break; <br> <br>                case IME_CMODE_NATIVE: <br>                    dwTemp |= (IME_CMODE_NATIVE | IME_CMODE_KATAKANA); <br>                    break; <br> <br>                case (IME_CMODE_NATIVE | IME_CMODE_KATAKANA): <br>                default: <br>                    break; <br>            } <br>            dwConv = dwTemp; <br>            break; <br> <br>        case IDM_FULLHALF: <br>            if (dwConv &amp; IME_CMODE_FULLSHAPE) <br>                dwConv &amp;= ~IME_CMODE_FULLSHAPE; <br>            else <br>                dwConv |= IME_CMODE_FULLSHAPE; <br>            break; <br> <br>        case IDM_ROMAN: <br>            if (dwConv &amp; IME_CMODE_ROMAN) <br>                dwConv &amp;= ~IME_CMODE_ROMAN; <br>            else <br>                dwConv |= IME_CMODE_ROMAN; <br>            break; <br> <br>        case IDM_CHARCODE: <br>            if (dwConv &amp; IME_CMODE_CHARCODE) <br>                dwConv &amp;= ~IME_CMODE_CHARCODE; <br>            else <br>                dwConv |= IME_CMODE_CHARCODE; <br>            break; <br> <br>        case IDM_HANJA: <br>            if (dwConv &amp; IME_CMODE_HANJACONVERT) <br>                dwConv &amp;= ~IME_CMODE_HANJACONVERT; <br>            else <br>                dwConv |= IME_CMODE_HANJACONVERT; <br>            break; <br> <br>        case IDM_SOFTKBD: <br>            if (dwConv &amp; IME_CMODE_SOFTKBD) <br>                dwConv &amp;= ~IME_CMODE_SOFTKBD; <br>            else <br>                dwConv |= IME_CMODE_SOFTKBD; <br>            break; <br> <br>        case IDM_EUDC: <br>            if (dwConv &amp; IME_CMODE_EUDC) <br>                dwConv &amp;= ~IME_CMODE_EUDC; <br>            else <br>                dwConv |= IME_CMODE_EUDC; <br>            break; <br> <br>        case IDM_SYMBOL: <br>            if (dwConv &amp; IME_CMODE_SYMBOL) <br>                dwConv &amp;= ~IME_CMODE_SYMBOL; <br>            else <br>                dwConv |= IME_CMODE_SYMBOL; <br>            break; <br>    } <br> <br>    ImmSetConversionStatus(hIMC,dwConv,dwSent); <br> <br>    ImmReleaseContext(hWndCompStr,hIMC); <br> <br>    return 1L; <br>} <br> <br>LRESULT HandleConvertCommand(HWND hWnd,WPARAM wParam,LPARAM lParam) <br>{ <br>    HIMC hIMC = ImmGetContext(hWndCompStr); <br>    DWORD dwSel; <br>    DWORD dwSize; <br>    LPCANDIDATELIST lpCL; <br> <br>    switch(wParam) <br>    { <br>        case IDM_CONVERT: <br>            ImmNotifyIME(hIMC,NI_COMPOSITIONSTR,CPS_CONVERT,0); <br>            break; <br> <br>        case IDM_CANCEL: <br>            ImmNotifyIME(hIMC,NI_COMPOSITIONSTR,CPS_CANCEL,0); <br>            break; <br> <br>        case IDM_REVERT: <br>            ImmNotifyIME(hIMC,NI_COMPOSITIONSTR,CPS_REVERT,0); <br>            break; <br> <br>        case IDM_COMPLETE: <br>            ImmNotifyIME(hIMC,NI_COMPOSITIONSTR,CPS_COMPLETE,0); <br>            break; <br> <br>        case IDM_OPENCAND: <br>            ImmNotifyIME(hIMC,NI_OPENCANDIDATE,0,0); <br>            break; <br> <br>        case IDM_CLOSECAND: <br>            ImmNotifyIME(hIMC,NI_CLOSECANDIDATE,0,0); <br>            break; <br> <br>        case IDM_NEXTCAND: <br>        case IDM_PREVCAND: <br>            if (dwSize = ImmGetCandidateList(hIMC,0x0,NULL,0)) <br>            { <br>                lpCL = (LPCANDIDATELIST)GlobalAlloc(GPTR,dwSize); <br>         <br>                ImmGetCandidateList(hIMC,0x0,lpCL,dwSize); <br>  <br>                dwSel = lpCL-&gt;dwSelection; <br> <br>                if (wParam == IDM_NEXTCAND) <br>                { <br>                   if (++dwSel &gt;= lpCL-&gt;dwCount) <br>                      dwSel = 0; <br>                } <br>                else <br>                { <br>                   if (dwSel) <br>                      dwSel--; <br>                   else <br>                      dwSel = lpCL-&gt;dwCount - 1; <br>                } <br>                GlobalFree((HANDLE)lpCL); <br> <br>                ImmNotifyIME(hIMC,NI_SELECTCANDIDATESTR,0,dwSel); <br>            } <br>            break; <br> <br>    } <br> <br>    ImmReleaseContext(hWndCompStr,hIMC); <br> <br>    return 1; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

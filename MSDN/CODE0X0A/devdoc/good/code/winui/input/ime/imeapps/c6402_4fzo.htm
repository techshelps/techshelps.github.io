<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TOOLBAR.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6414"></a>TOOLBAR.C</h2>
<pre><code>/**********************************************************************/ <br>/*                                                                    */ <br>/*      TOOLBAR.C                                                     */ <br>/*                                                                    */ <br>/*      Copyright (c) 1995-1997  Microsoft Corporation                */ <br>/*                                                                    */ <br>/**********************************************************************/ <br> <br>#include "windows.h"  <br>#include "commctrl.h" <br>#include "resource.h" <br>#include "imeapps.h" <br> <br>// Global Variables for toolbar control. <br> <br> <br>#define NUMIMAGES       33 <br>#define IMAGEWIDTH      16 <br>#define IMAGEHEIGHT     17 <br>#define BUTTONWIDTH     0 <br>#define BUTTONHEIGHT    0 <br> <br>#define IDTBB_FONT       0 <br>#define IDTBB_OPEN       1 <br>#define IDTBB_CLOSE      2 <br>#define IDTBB_MODE       3 <br>#define IDTBB_SHOWCAND   4 <br>#define IDTBB_NOSHOWCAND 5 <br>#define IDTBB_CONVERT    6 <br>#define IDTBB_CANCEL     7 <br>#define IDTBB_REVERT     8 <br>#define IDTBB_COMPLETE   9 <br>#define IDTBB_NEXTCAND   10 <br>#define IDTBB_PREVCAND   11 <br>#define IDTBB_NEXTCLAUSE 12 <br>#define IDTBB_PREVCLAUSE 13 <br>#define IDTBB_OPENCAND   14 <br>#define IDTBB_CLOSECAND  15 <br>#define IDTBB_ALPHA      16 <br>#define IDTBB_NATIVE     17 <br>#define IDTBB_KATAKANA   18 <br>#define IDTBB_FULL       19 <br>#define IDTBB_HALF       20 <br>#define IDTBB_ROMAN      21 <br>#define IDTBB_NOROMAN    22 <br>#define IDTBB_CHARCODE   23 <br>#define IDTBB_NOCHARCODE 24 <br>#define IDTBB_HANJA      25 <br>#define IDTBB_NOHANJA    26 <br>#define IDTBB_SOFTKBD    27 <br>#define IDTBB_NOSOFTKBD  28 <br>#define IDTBB_EUDC       29 <br>#define IDTBB_NOEUDC     30 <br>#define IDTBB_SYMBOL     31 <br>#define IDTBB_NOSYMBOL   32 <br> <br>TBBUTTON tbButton[] =           // Array defining the toolbar buttons <br>{ <br>    {IDTBB_FONT, IDM_FONT,          TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br> <br>    {0, 0,                          TBSTATE_ENABLED, TBSTYLE_SEP,    0, 0}, <br> <br>    {IDTBB_OPEN, IDM_OPENSTATUS,    TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br> <br>    {0, 0,                          TBSTATE_ENABLED, TBSTYLE_SEP,    0, 0}, <br> <br>    {IDTBB_NATIVE,   IDM_NATIVEMODE, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_FULL,     IDM_FULLHALF,   TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_ROMAN,    IDM_ROMAN,      TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_CHARCODE, IDM_CHARCODE,   TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_HANJA,    IDM_HANJA,      TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_SOFTKBD,  IDM_SOFTKBD,    TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_EUDC,     IDM_EUDC,       TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_SYMBOL,   IDM_SYMBOL,     TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br> <br>    {0, 0,                          TBSTATE_ENABLED, TBSTYLE_SEP,    0, 0}, <br> <br>    {IDTBB_CONVERT,  IDM_CONVERT,   TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_CANCEL,   IDM_CANCEL,    TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_REVERT,   IDM_REVERT,    TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_COMPLETE, IDM_COMPLETE,  TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br> <br>    {0, 0,                          TBSTATE_ENABLED, TBSTYLE_SEP,    0, 0}, <br> <br>    {IDTBB_NEXTCLAUSE, IDM_NEXTCLAUSE,  TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_PREVCLAUSE, IDM_PREVCLAUSE,  TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br> <br>    {0, 0,                          TBSTATE_ENABLED, TBSTYLE_SEP,    0, 0}, <br> <br>    {IDTBB_SHOWCAND, IDM_SHOWCAND,  TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_OPENCAND, IDM_OPENCAND,  TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_CLOSECAND,IDM_CLOSECAND, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_NEXTCAND, IDM_NEXTCAND,  TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br>    {IDTBB_PREVCAND, IDM_PREVCAND,  TBSTATE_ENABLED, TBSTYLE_BUTTON, 0, 0}, <br> <br> <br>}; <br> <br> <br>BOOL CreateTBar(HWND hWnd) <br>{ <br>    HIMC hIMC; <br>    BOOL fOpen; <br> <br>    hWndToolBar = CreateToolbarEx(hWnd, <br>                                  WS_CHILD | WS_VISIBLE | TBSTYLE_TOOLTIPS, <br>                                  TOOLBAR_ID, <br>                                  NUMIMAGES, <br>                                  hInst, <br>                                  IDB_BMP, <br>                                  tbButton, <br>                                  sizeof(tbButton)/sizeof(TBBUTTON), <br>                                  BUTTONWIDTH, <br>                                  BUTTONHEIGHT, <br>                                  IMAGEWIDTH, <br>                                  IMAGEHEIGHT, <br>                                  sizeof(TBBUTTON)); <br> <br>    UpdateShowCandButton(); <br> <br>    hIMC = ImmGetContext(hWndCompStr); <br>    fOpen = ImmGetOpenStatus(hIMC); <br>    UpdateShowOpenStatusButton(fOpen); <br>    ImmReleaseContext(hWndCompStr,hIMC); <br> <br>    return (hWndToolBar != 0); <br>} <br> <br> <br>LRESULT SetTooltipText(HWND hWnd, LPARAM lParam) <br>{ <br>    LPTOOLTIPTEXT lpToolTipText; <br>    static char   szBuffer[64]; <br> <br>    lpToolTipText = (LPTOOLTIPTEXT)lParam; <br>    if (lpToolTipText-&gt;hdr.code == TTN_NEEDTEXT) <br>    { <br>        LoadString(hInst, <br>                   lpToolTipText-&gt;hdr.idFrom,   // string ID == command ID <br>                   szBuffer, <br>                   sizeof(szBuffer)); <br> <br>        lpToolTipText-&gt;lpszText = szBuffer; <br>    } <br>    return 0; <br>} <br> <br>void UpdateButton(UINT iID, UINT iFlags) <br>{ <br>    int iCurrentFlags; <br> <br>    iCurrentFlags = (int)SendMessage(hWndToolBar,  <br>                                     TB_GETSTATE,  <br>                                     iID, 0L); <br> <br>    if (iCurrentFlags &amp; TBSTATE_PRESSED) <br>        iFlags |= TBSTATE_PRESSED; <br> <br>    SendMessage(hWndToolBar,  <br>                TB_SETSTATE,  <br>                iID,  <br>                MAKELPARAM(iFlags, 0)); <br>    return; <br>} <br> <br>void UpdateShowOpenStatusButton(BOOL fOpen) <br>{ <br>  <br>    SendMessage(hWndToolBar,  <br>                TB_CHANGEBITMAP,  <br>                IDM_OPENSTATUS,  <br>                MAKELPARAM((fOpen?IDTBB_OPEN:IDTBB_CLOSE), 0)); <br>    return; <br>} <br> <br>void UpdateShowCandButton() <br>{ <br>  <br>    SendMessage(hWndToolBar,  <br>                TB_CHANGEBITMAP,  <br>                IDM_SHOWCAND,  <br>                MAKELPARAM((fShowCand?IDTBB_SHOWCAND:IDTBB_NOSHOWCAND), 0)); <br>    return; <br>} <br> <br> <br>void UpdateModeButton(DWORD dwConv) <br>{ <br>    int nIDTBB; <br> <br>    switch (dwConv &amp; IME_CMODE_LANGUAGE) <br>    { <br>        case IME_CMODE_ALPHANUMERIC: <br>            nIDTBB = IDTBB_ALPHA; <br>            break; <br> <br>        case IME_CMODE_NATIVE: <br>            nIDTBB = IDTBB_NATIVE; <br>            break; <br> <br>        case (IME_CMODE_NATIVE | IME_CMODE_KATAKANA): <br>            nIDTBB = IDTBB_KATAKANA; <br>            break; <br> <br>        default: <br>            nIDTBB = IDTBB_ALPHA; <br>            break; <br> <br>    } <br>    SendMessage(hWndToolBar, TB_CHANGEBITMAP, IDM_NATIVEMODE,  <br>                MAKELPARAM(nIDTBB, 0)); <br> <br>    if (dwConv &amp; IME_CMODE_FULLSHAPE) <br>        nIDTBB = IDTBB_FULL; <br>    else <br>        nIDTBB = IDTBB_HALF; <br>    SendMessage(hWndToolBar, TB_CHANGEBITMAP, IDM_FULLHALF,  <br>                MAKELPARAM(nIDTBB, 0)); <br> <br>    if (dwConv &amp; IME_CMODE_ROMAN) <br>        nIDTBB = IDTBB_ROMAN; <br>    else <br>        nIDTBB = IDTBB_NOROMAN; <br>    SendMessage(hWndToolBar, TB_CHANGEBITMAP, IDM_ROMAN,  <br>                MAKELPARAM(nIDTBB, 0)); <br> <br>    if (dwConv &amp; IME_CMODE_CHARCODE) <br>        nIDTBB = IDTBB_CHARCODE; <br>    else <br>        nIDTBB = IDTBB_NOCHARCODE; <br>    SendMessage(hWndToolBar, TB_CHANGEBITMAP, IDM_CHARCODE,  <br>                MAKELPARAM(nIDTBB, 0)); <br> <br>    if (dwConv &amp; IME_CMODE_HANJACONVERT) <br>        nIDTBB = IDTBB_HANJA; <br>    else <br>        nIDTBB = IDTBB_NOHANJA; <br>    SendMessage(hWndToolBar, TB_CHANGEBITMAP, IDM_HANJA,  <br>                MAKELPARAM(nIDTBB, 0)); <br> <br>    if (dwConv &amp; IME_CMODE_SOFTKBD) <br>        nIDTBB = IDTBB_SOFTKBD; <br>    else <br>        nIDTBB = IDTBB_NOSOFTKBD; <br>    SendMessage(hWndToolBar, TB_CHANGEBITMAP, IDM_SOFTKBD,  <br>                MAKELPARAM(nIDTBB, 0)); <br> <br>    if (dwConv &amp; IME_CMODE_EUDC) <br>        nIDTBB = IDTBB_EUDC; <br>    else <br>        nIDTBB = IDTBB_NOEUDC; <br>    SendMessage(hWndToolBar, TB_CHANGEBITMAP, IDM_EUDC,  <br>                MAKELPARAM(nIDTBB, 0)); <br> <br>    if (dwConv &amp; IME_CMODE_SYMBOL) <br>        nIDTBB = IDTBB_SYMBOL; <br>    else <br>        nIDTBB = IDTBB_NOSYMBOL; <br>    SendMessage(hWndToolBar, TB_CHANGEBITMAP, IDM_SYMBOL,  <br>                MAKELPARAM(nIDTBB, 0)); <br> <br>    return; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMEAPPS.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6404"></a>IMEAPPS.C</h2>
<pre><code>/**********************************************************************/ <br>/*                                                                    */ <br>/*      IMEAPPS.C                                                     */ <br>/*                                                                    */ <br>/*      Copyright (c) 1995-1997  Microsoft Corporation                */ <br>/*                                                                    */ <br>/**********************************************************************/ <br> <br>#include "windows.h" <br>#include "commdlg.h" <br>#include "commctrl.h" <br>#include "imm.h" <br>#include "resource.h" <br>#include "imeapps.h" <br> <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    WinMain(HINSTANCE, HINSTANCE, LPSTR, int)                             */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>int APIENTRY WinMain(hInstance, hPrevInstance, lpCmdLine, nCmdShow) <br>HINSTANCE hInstance; <br>HINSTANCE hPrevInstance; <br>LPSTR lpCmdLine; <br>int nCmdShow; <br>{ <br>    MSG msg; <br> <br>    if (!hPrevInstance)   <br>        if (!InitApplication(hInstance)) <br>            return (FALSE); <br> <br>    if (!InitInstance(hInstance, nCmdShow)) <br>return (FALSE); <br> <br>     <br>    while (GetMessage(&amp;msg, NULL, 0, 0)) <br>    { <br>TranslateMessage(&amp;msg); <br>DispatchMessage(&amp;msg); <br>    } <br>    return (msg.wParam); <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    InitApplication(HANDLE)                                         */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>BOOL InitApplication(hInstance) <br>HANDLE hInstance; <br>{ <br>    WNDCLASS  wc; <br> <br>    wc.style         = CS_HREDRAW | CS_VREDRAW; <br>    wc.lpfnWndProc   = MainWndProc; <br>    wc.cbClsExtra    = 0; <br>    wc.cbWndExtra    = 0; <br>    wc.hInstance     = hInstance; <br>    wc.hIcon         = LoadIcon(hInstance,"MyIcon"); <br>    wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground = GetStockObject(LTGRAY_BRUSH);  <br>    wc.lpszMenuName  = "ImeAppsMenu"; <br>    wc.lpszClassName = "ImeAppsWClass"; <br> <br>    if (! RegisterClass (&amp;wc)) <br>return FALSE; <br> <br>    wc.style         = CS_HREDRAW | CS_VREDRAW; <br>    wc.lpfnWndProc   = CompStrWndProc; <br>    wc.cbClsExtra    = 0; <br>    wc.cbWndExtra    = 4; <br>    wc.hInstance     = hInstance; <br>    wc.hIcon         = NULL; <br>    wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground = GetStockObject(LTGRAY_BRUSH);  <br>    wc.lpszMenuName  = NULL; <br>    wc.lpszClassName = "CompStrWndClass"; <br> <br>    if (! RegisterClass (&amp;wc)) <br>return FALSE; <br> <br>    wc.style         = CS_HREDRAW | CS_VREDRAW; <br>    wc.lpfnWndProc   = CandListWndProc; <br>    wc.cbClsExtra    = 0; <br>    wc.cbWndExtra    = 0; <br>    wc.hInstance     = hInstance; <br>    wc.hIcon         = NULL; <br>    wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground = GetStockObject(LTGRAY_BRUSH);  <br>    wc.lpszMenuName  = NULL; <br>    wc.lpszClassName = "CandListWndClass"; <br> <br>    if (! RegisterClass (&amp;wc)) <br>return FALSE; <br> <br>    hFont = GetStockObject(DEFAULT_GUI_FONT); <br> <br>    return TRUE; <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    InitInstance(HANDLE, int)                                       */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>BOOL InitInstance(hInstance, nCmdShow) <br>    HANDLE          hInstance; <br>    int             nCmdShow; <br>{ <br>#ifdef USEWAPI <br>    char szTitle[] =  "ImeApps W API version"; <br>#else <br>    char szTitle[] =  "ImeApps"; <br>#endif <br> <br>    hInst = hInstance; <br> <br> <br>    ptImeUIPos.x = 0; <br>    ptImeUIPos.y = 0; <br> <br>    if (!(hWndMain = CreateWindowEx(0L, <br>    "ImeAppsWClass", (LPSTR)szTitle, <br>    WS_OVERLAPPEDWINDOW | WS_CLIPCHILDREN, <br>    CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, <br>    NULL, NULL, hInstance, NULL))) <br>return FALSE; <br> <br>    /* display each windows */ <br>    ShowWindow (hWndMain, nCmdShow); <br>    UpdateWindow (hWndMain); <br> <br> <br>    return TRUE; <br> <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    InitIMEUIPosition(HWND)                                         */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>void InitIMEUIPosition(hWnd) <br>HWND hWnd; <br>{ <br>    HDC hDC; <br>    int y; <br>    SIZE sz; <br>    HFONT hOldFont; <br>    HFONT hDefFont; <br>    int height, defheight; <br> <br>    hDefFont = GetStockObject(DEFAULT_GUI_FONT); <br> <br>    hOldFont = NULL; <br> <br>    y = ORG_Y; <br> <br>    hDC = GetDC(hWnd); <br> <br>    if (hFont) <br>        hOldFont = SelectObject(hDC,hDefFont); <br> <br> <br>    // Get the height of the default gui font. <br>    GetTextExtentPoint(hDC,"A",1,&amp;sz); <br>    defheight = sz.cy + 1; <br> <br>    // Get the height of the font. <br>    SelectObject(hDC,hFont); <br>    GetTextExtentPoint(hDC,"A",1,&amp;sz); <br>    height = sz.cy + 1; <br> <br>    SelectObject(hDC,hDefFont); <br>    y += defheight; <br> <br>    y += height; <br> <br>    y += height; <br> <br>    y += defheight; <br> <br>    y += height; <br> <br>    y += height; <br> <br>    ptImeUIPos.y = y; <br> <br>    SelectObject(hDC,hOldFont); <br>    ReleaseDC(hWnd, hDC); <br> <br>    return; <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    MainWndProc(HWND, UINT, WPARAM, LPARAM)                         */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>LRESULT CALLBACK MainWndProc(hWnd, message, wParam, lParam) <br>HWND hWnd; <br>UINT message; <br>WPARAM wParam; <br>LPARAM lParam; <br>{ <br>    FARPROC lpProc; <br>    RECT rect; <br>    HMENU hMenu; <br>    HIMC hIMC; <br>    BOOL fOpen; <br> <br>    switch (message) { <br>case WM_CREATE: <br> <br>            // Create Status Window <br>            CreateTBar(hWnd); <br>            CreateStatus(hWnd); <br> <br>            // Create Child Window <br>            GetClientRect(hWnd, &amp;rect); <br>            if (!(hWndCompStr = CreateWindowEx(WS_EX_CLIENTEDGE, <br>            "CompStrWndClass", NULL, <br>            WS_CHILD | WS_VISIBLE,  <br>            // 0, 0, rect.right, rect.bottom - nStatusHeight, <br>            0, 0, 0, 0, <br>            hWnd, NULL, hInst, NULL))) <br>        return FALSE; <br> <br> <br>            InitIMEUIPosition(hWndCompStr); <br> <br> <br>            if (!(hWndCandList = CreateWindowEx(WS_EX_CLIENTEDGE, <br>            "CandListWndClass", NULL, <br>            WS_CHILD | WS_VISIBLE,  <br>            0, 0, 0, 0, <br>            hWnd, NULL, hInst, NULL))) <br>        return FALSE; <br> <br>            ShowWindow(hWndCompStr, SW_SHOW); <br>            ShowWindow(hWndCandList, SW_SHOWNA); <br> <br>            SetStatusItems(hWnd); <br> <br>            hMenu = GetMenu(hWnd); <br>            CheckMenuItem(hMenu,IDM_SHOWCAND, <br>                                (fShowCand ? MF_CHECKED : MF_UNCHECKED)); <br> <br>    break; <br> <br>case WM_COMMAND: <br>    switch(LOWORD(wParam)) <br>    { <br>case IDM_ABOUT: <br>    lpProc = MakeProcInstance(AboutDlg, hInst); <br>    DialogBox(hInst, "ABOUTBOX", hWnd, (DLGPROC)lpProc); <br>    FreeProcInstance(lpProc); <br>    break; <br> <br>case IDM_FONT: <br>                    { <br>                    CHOOSEFONT cf; <br>                    LOGFONT lfT; <br> <br>                    /* Set all structure fields to zero. */ <br> <br>                    memset(&amp;cf, 0, sizeof(CHOOSEFONT)); <br>                    memcpy(&amp;lfT, &amp;lf, sizeof(LOGFONT)); <br> <br>                    cf.lStructSize = sizeof(CHOOSEFONT); <br>                    cf.hwndOwner = hWnd; <br>                    cf.lpLogFont = &amp;lfT; <br>                    cf.Flags = CF_SCREENFONTS | CF_EFFECTS; <br>                    cf.nFontType = SCREEN_FONTTYPE; <br> <br>                    if (ChooseFont(&amp;cf)) <br>                    { <br>                        if (hFont) <br>                            DeleteObject(hFont); <br> <br>                        memcpy(&amp;lf, &amp;lfT, sizeof(LOGFONT)); <br>                        hFont = CreateFontIndirect(&amp;lf); <br>                        InvalidateRect(hWndCompStr,NULL,TRUE); <br>                        UpdateWindow(hWndCompStr); <br>                    } <br>                    } <br>                    break; <br> <br> <br>                case IDM_SHOWCAND: <br>                    hMenu = GetMenu(hWnd); <br>                    fShowCand = !fShowCand; <br>                    CheckMenuItem(hMenu,IDM_SHOWCAND, <br>                                (fShowCand ? MF_CHECKED : MF_UNCHECKED)); <br>                    MoveCompCandWindow(hWnd); <br>                    UpdateShowCandButton(); <br>                    break; <br> <br>                case IDM_OPENSTATUS: <br>                    hIMC = ImmGetContext(hWndCompStr); <br>                    fOpen = ImmGetOpenStatus(hIMC); <br>                    ImmSetOpenStatus(hIMC,!fOpen); <br>                    UpdateShowOpenStatusButton(!fOpen); <br>                    ImmReleaseContext(hWndCompStr,hIMC); <br> <br>                    hMenu = GetMenu(hWnd); <br>                    CheckMenuItem(hMenu,IDM_OPENSTATUS, <br>                                (fOpen ? MF_UNCHECKED : MF_CHECKED)); <br>                    break; <br> <br>                case IDM_NATIVEMODE: <br>                case IDM_FULLHALF: <br>                case IDM_ROMAN: <br>                case IDM_CHARCODE: <br>                case IDM_HANJA: <br>                case IDM_SOFTKBD: <br>                case IDM_EUDC: <br>                case IDM_SYMBOL: <br>                    HandleModeCommand(hWnd,wParam,lParam); <br>                    break; <br>  <br>                case IDM_CONVERT: <br>                case IDM_CANCEL: <br>                case IDM_REVERT: <br>                case IDM_COMPLETE: <br>                case IDM_OPENCAND: <br>                case IDM_CLOSECAND: <br>                case IDM_NEXTCAND: <br>                case IDM_PREVCAND: <br>                    HandleConvertCommand(hWnd,wParam,lParam); <br>    break; <br> <br>                case IDM_NEXTCLAUSE: <br>                case IDM_PREVCLAUSE: <br>                    HandleChangeAttr(hWnd,(LOWORD(wParam) == IDM_NEXTCLAUSE)); <br>    break; <br> <br>                default: <br>    break; <br> <br> <br>    } <br>    break; <br> <br>        case WM_SETFOCUS: <br>            SetFocus(hWndCompStr); <br>    break; <br> <br>        case WM_NOTIFY: <br>            SetTooltipText(hWnd, lParam); <br>            break; <br> <br>        case WM_SIZE: <br>            SendMessage(hWndStatus,message,wParam,lParam); <br>            SendMessage(hWndToolBar,message,wParam,lParam); <br> <br>            if (wParam != SIZE_MINIMIZED) <br>                MoveCompCandWindow(hWnd); <br> <br>    break; <br> <br>        case WM_IME_NOTIFY: <br>            switch (wParam) <br>            { <br>                case IMN_OPENSTATUSWINDOW: <br>                case IMN_CLOSESTATUSWINDOW: <br>                    break; <br> <br>                case IMN_SETCONVERSIONMODE: <br>            return (DefWindowProc(hWnd, message, wParam, lParam)); <br>            } <br>    break; <br> <br> <br>case WM_DESTROY: <br>            if (hFont) <br>                DeleteObject(hFont); <br>    PostQuitMessage(0); <br>    break; <br> <br>default: <br>    return (DefWindowProc(hWnd, message, wParam, lParam)); <br>    } <br>    return 0L; <br>} <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    CompStrWndProc(HWND, UINT, WPARAM, LPARAM)                      */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>LRESULT CALLBACK CompStrWndProc(hWnd, message, wParam, lParam) <br>HWND hWnd; <br>UINT message; <br>WPARAM wParam; <br>LPARAM lParam; <br>{ <br>    HIMC hIMC; <br>    HIMC hOldIMC; <br> <br>    switch (message) { <br>case WM_CREATE: <br>            hIMC = ImmCreateContext(); <br>            hOldIMC = ImmAssociateContext(hWnd,hIMC); <br>            SetWindowLong(hWnd, 0, (LONG)hOldIMC); <br>            fdwProperty = ImmGetProperty(GetKeyboardLayout(0), IGP_PROPERTY); <br>    break; <br> <br>        case WM_CHAR: <br>            HandleChar(hWnd,wParam,lParam); <br>    break; <br> <br>        case WM_LBUTTONUP: <br>        case WM_RBUTTONUP: <br>            if (hIMC = ImmGetContext(hWnd)) <br>            { <br>                HMENU hMenu; <br> <br>                InitMenuItemIDTable(); <br>                hMenu = CreateImeMenu(hWnd, hIMC, NULL,(message == WM_RBUTTONUP)); <br> <br>                if (hMenu) <br>                { <br>                    DWORD dwItemData; <br>                    DWORD dwPos = (DWORD)GetMessagePos(); <br>                    int nCmd; <br>                   <br>                    nCmd = TrackPopupMenuEx(hMenu, <br>                           TPM_RETURNCMD | TPM_NONOTIFY |  <br>                           TPM_LEFTBUTTON | TPM_LEFTALIGN | TPM_TOPALIGN,  <br>                           LOWORD(dwPos), HIWORD(dwPos),  <br>                           hWnd, NULL); <br> <br>                    if (nCmd) <br>                    { <br>                        nCmd -= IDM_STARTIMEMENU; <br>                        dwItemData = FindItemData(nCmd); <br>                        ImmNotifyIME(hIMC, NI_IMEMENUSELECTED, nCmd, dwItemData); <br>                    } <br>                } <br>                EndMenuItemIDTable(); <br> <br>                DestroyMenu(hMenu); <br>            } <br>    break; <br> <br>        case WM_IME_SETCONTEXT: <br>            if (fShowCand) <br>                lParam &amp;= ~ISC_SHOWUICANDIDATEWINDOW; <br> <br>            if (fdwProperty &amp; IME_PROP_SPECIAL_UI) <br>            { <br>            } <br>            else if (fdwProperty &amp; IME_PROP_AT_CARET) <br>            { <br>                lParam &amp;= ~ISC_SHOWUICOMPOSITIONWINDOW; <br>            } <br>            else <br>            { <br>            } <br> <br>    return (DefWindowProc(hWnd, message, wParam, lParam)); <br> <br>        case WM_IME_STARTCOMPOSITION: <br>            // Normally, we should not call into HandleStartComposition <br>            // for IME_PROP_SPECIAL_UI and not IME_PROP_AT_CARET IMEs <br>            // we should pass this message to DefWindowProc directly for <br>            // this kind of IMEs <br> <br>            HandleStartComposition(hWnd,wParam,lParam); <br> <br>            // pass this message to DefWindowProc for IME_PROP_SPECIAL_UI <br>            // and not IME_PROP_AT_CARET IMEs <br> <br>            if (fdwProperty &amp; IME_PROP_SPECIAL_UI) <br>            { <br>                return (DefWindowProc(hWnd, message, wParam, lParam)); <br>            } <br>            else if (fdwProperty &amp; IME_PROP_AT_CARET) <br>            { <br>            } <br>            else <br>            { <br>                return (DefWindowProc(hWnd, message, wParam, lParam)); <br>            } <br> <br>    break; <br> <br>        case WM_IME_ENDCOMPOSITION: <br>            // Normally, we should not call into HandleEndComposition <br>            // for IME_PROP_SPECIAL_UI and not IME_PROP_AT_CARET IMEs <br>            // we should pass this message to DefWindowProc directly for <br>            // this kind of IMEs <br> <br>            HandleEndComposition(hWnd,wParam,lParam); <br> <br>            // pass this message to DefWindowProc for IME_PROP_SPECIAL_UI <br>            // and not IME_PROP_AT_CARET IMEs <br> <br>            if (fdwProperty &amp; IME_PROP_SPECIAL_UI) <br>            { <br>                return (DefWindowProc(hWnd, message, wParam, lParam)); <br>            } <br>            else if (fdwProperty &amp; IME_PROP_AT_CARET) <br>            { <br>            } <br>            else <br>            { <br>                return (DefWindowProc(hWnd, message, wParam, lParam)); <br>            } <br> <br>    break; <br> <br>        case WM_IME_COMPOSITION: <br>            // Normally, we should not call into HandleComposition <br>            // for IME_PROP_SPECIAL_UI and not IME_PROP_AT_CARET IMEs <br>            // we should pass this message to DefWindowProc directly for <br>            // this kind of IMEs <br> <br>            HandleComposition(hWnd,wParam,lParam); <br> <br>            // pass this message to DefWindowProc for IME_PROP_SPECIAL_UI <br>            // and not IME_PROP_AT_CARET IMEs <br> <br>            if (fdwProperty &amp; IME_PROP_SPECIAL_UI) <br>            { <br>                return (DefWindowProc(hWnd, message, wParam, lParam)); <br>            } <br>            else if (fdwProperty &amp; IME_PROP_AT_CARET) <br>            { <br>            } <br>            else <br>            { <br>                return (DefWindowProc(hWnd, message, wParam, lParam)); <br>            } <br> <br>    break; <br> <br>case WM_PAINT: <br>            HandlePaint(hWnd,wParam,lParam); <br>    break; <br> <br>        case WM_IME_NOTIFY: <br>            { <br>                LRESULT lRet; <br> <br>                // Normally, we should not call into HandleNotify <br>                // for IME_PROP_SPECIAL_UI and not IME_PROP_AT_CARET IMEs <br>                // we should pass this message to DefWindowProc directly for <br>                // this kind of IMEs <br> <br>                lRet = HandleNotify(hWnd, message, wParam, lParam); <br>  <br>                // pass this message to DefWindowProc for IME_PROP_SPECIAL_UI <br>                // and not IME_PROP_AT_CARET IMEs <br> <br>                if (fdwProperty &amp; IME_PROP_SPECIAL_UI) <br>                { <br>                    return (DefWindowProc(hWnd, message, wParam, lParam)); <br>                } <br>                else if (fdwProperty &amp; IME_PROP_AT_CARET) <br>                { <br>                } <br>                else <br>                { <br>                    return (DefWindowProc(hWnd, message, wParam, lParam)); <br>                } <br> <br>                return lRet; <br>            } <br> <br>        case WM_DESTROY: <br>            hOldIMC = (HIMC)GetWindowLong(hWnd, 0); <br>            hIMC = ImmAssociateContext(hWnd, hOldIMC); <br>            ImmDestroyContext(hIMC); <br>    break; <br> <br>        case WM_INPUTLANGCHANGE: <br>            fdwProperty = ImmGetProperty(GetKeyboardLayout(0), IGP_PROPERTY); <br> <br>            if (hIMC = ImmGetContext(hWnd)) <br>            { <br>                CANDIDATEFORM cdf; <br> <br>                if (fdwProperty &amp; IME_PROP_AT_CARET) <br>                { <br>                    cdf.dwIndex = 0; <br>                    cdf.dwStyle = CFS_CANDIDATEPOS; <br>                    cdf.ptCurrentPos.x = ptImeUIPos.x; <br>                    cdf.ptCurrentPos.y = ptImeUIPos.y; <br>                    ImmSetCandidateWindow(hIMC, &amp;cdf); <br>                } <br>                else <br>                { <br>                    UINT i; <br> <br>                    // The candidate position should be decided by a near caret <br>                    // IME. There are 4 candidate form in the input context <br> <br>                    for (i = 0; i &lt; 4; i++) <br>                    { <br>                        if (!ImmGetCandidateWindow(hIMC, i, &amp;cdf)) <br>                        { <br>                            continue; <br>                        } <br> <br>                        if (cdf.dwStyle == CFS_DEFAULT) <br>                        { <br>                            continue; <br>                        } <br> <br>                        cdf.dwStyle = CFS_DEFAULT; <br> <br>                        ImmSetCandidateWindow(hIMC, &amp;cdf); <br>                    } <br> <br>                } <br> <br>                ImmReleaseContext(hWnd, hIMC); <br>            } <br> <br>    return (DefWindowProc(hWnd, message, wParam, lParam)); <br> <br>default: <br>    return (DefWindowProc(hWnd, message, wParam, lParam)); <br>    } <br>    return 0L; <br>} <br> <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    CandListWndProc(HWND, UINT, WPARAM, LPARAM)                     */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>LRESULT CALLBACK CandListWndProc(hWnd, message, wParam, lParam) <br>HWND hWnd; <br>UINT message; <br>WPARAM wParam; <br>LPARAM lParam; <br>{ <br>    switch (message) { <br> <br>case WM_PAINT: <br>            HandleCandPaint(hWnd,wParam,lParam); <br>    break; <br> <br>        case WM_SETFOCUS: <br>            SetFocus(hWndCompStr); <br>    break; <br> <br>default: <br>    return (DefWindowProc(hWnd, message, wParam, lParam)); <br>    } <br>    return 0L; <br>} <br> <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    About(HWND, UINT, WPARAM, LPARAM)                               */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>LRESULT CALLBACK AboutDlg(hDlg, message, wParam, lParam) <br>HWND hDlg; <br>unsigned message; <br>WPARAM wParam; <br>LPARAM lParam; <br>{ <br>    switch (message) { <br>case WM_INITDIALOG: <br>    return (TRUE); <br> <br>case WM_COMMAND: <br>    if (wParam == IDOK <br>                || wParam == IDCANCEL) { <br>EndDialog(hDlg, TRUE); <br>return (TRUE); <br>    } <br>    break; <br>    } <br>    return (FALSE); <br>} <br> <br> <br> <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SETCOMP.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6411"></a>SETCOMP.C</h2>
<pre><code>/**********************************************************************/ <br>/*                                                                    */ <br>/*      comp.C                                                        */ <br>/*                                                                    */ <br>/**********************************************************************/ <br> <br>#include "windows.h" <br>#include "imm.h" <br>#include "resource.h" <br>#include "imeapps.h" <br> <br>DWORD GetTargetClause() <br>{ <br>    int nMaxClause = (int)(dwCompClsLen / sizeof(DWORD)) - 1; <br>    int nCnt; <br> <br> <br>    if (nMaxClause &lt;= 0) <br>        return (DWORD)-1L; <br>     <br>    for (nCnt = 0; nCnt &lt; nMaxClause; nCnt++) <br>    { <br>        DWORD dwCls = dwCompCls[nCnt]; <br> <br>        if ((bCompAttr[dwCompCls[nCnt]] == ATTR_TARGET_CONVERTED) || <br>            (bCompAttr[dwCompCls[nCnt]] == ATTR_TARGET_NOTCONVERTED)) <br>            return nCnt; <br>    } <br> <br>    return (DWORD)-1L; <br>} <br> <br>LRESULT HandleChangeAttr(HWND hWnd,BOOL fNext) <br>{ <br>    BYTE bAttr[512]; <br>    BYTE bAttrRead[512]; <br>    UINT i,j; <br>    UINT uClause; <br>    UINT uMaxClause; <br>    UINT uCnt; <br>    UINT uCntRead; <br>    BYTE bAt; <br>    BOOL fAttrOK = FALSE; <br>    BOOL fAttrReadOK = FALSE; <br>    HIMC hIMC; <br>    BOOL bRet = FALSE; <br> <br> <br>    uMaxClause = (dwCompClsLen / sizeof(DWORD)) - 1; <br>    uClause = GetTargetClause(); <br> <br>    if (uClause == (DWORD)-1L) <br>    { <br>         return 0L; <br>    } <br> <br>    if (fNext) <br>    { <br>        if (uClause + 1 &lt;= uMaxClause) <br>            uClause++; <br>        else <br>            return 0L; <br>    } <br>    else <br>    { <br>        if (uClause &gt; 0) <br>            uClause--; <br>        else <br>            return 0L; <br>    } <br> <br> <br>    uCnt = 0; <br> <br>    if (uClause &lt; uMaxClause) <br>    { <br>        for (i=0; i &lt; uMaxClause; i++) <br>        { <br>            if (i == uClause) <br>            { <br>                switch (bCompAttr[dwCompCls[i]]) <br>                { <br>                    case ATTR_INPUT: <br>                        bAt = ATTR_TARGET_NOTCONVERTED; <br>                        break; <br>                        break; <br>                    case ATTR_CONVERTED: <br>                        bAt = ATTR_TARGET_CONVERTED; <br>                        break; <br>                    default: <br>                        bAt = bCompAttr[dwCompCls[i]]; <br>                        break; <br>                } <br>            } <br>            else <br>            { <br>                switch (bCompAttr[dwCompCls[i]]) <br>                { <br>                    case ATTR_TARGET_CONVERTED: <br>                        bAt = ATTR_CONVERTED; <br>                        break; <br>                        break; <br>                    case ATTR_TARGET_NOTCONVERTED: <br>                        bAt = ATTR_INPUT; <br>                        break; <br>                    default: <br>                        bAt = bCompAttr[dwCompCls[i]]; <br>                        break; <br>                } <br>            } <br> <br>            for (j = 0; j &lt; (dwCompCls[i+1] - dwCompCls[i]); j++) <br>            { <br>                bAttr[uCnt++] = bAt; <br>            } <br>        } <br>        fAttrOK = TRUE; <br>    } <br> <br>    uCntRead = 0; <br> <br>    if (uClause &lt; uMaxClause) <br>    { <br>        for (i=0; i &lt; uMaxClause; i++) <br>        { <br>            if (i == uClause) <br>            { <br>                switch (bCompReadAttr[dwCompReadCls[i]]) <br>                { <br>                    case ATTR_INPUT: <br>                        bAt = ATTR_TARGET_NOTCONVERTED; <br>                        break; <br>                        break; <br>                    case ATTR_CONVERTED: <br>                        bAt = ATTR_TARGET_CONVERTED; <br>                        break; <br>                    default: <br>                        bAt = bCompReadAttr[dwCompReadCls[i]]; <br>                        break; <br>                } <br>            } <br>            else <br>            { <br>                switch (bCompReadAttr[dwCompReadCls[i]]) <br>                { <br>                    case ATTR_TARGET_CONVERTED: <br>                        bAt = ATTR_CONVERTED; <br>                        break; <br>                        break; <br>                    case ATTR_TARGET_NOTCONVERTED: <br>                        bAt = ATTR_INPUT; <br>                        break; <br>                    default: <br>                        bAt = bCompReadAttr[dwCompReadCls[i]]; <br>                        break; <br>                } <br>            } <br> <br>            for (j = 0; j &lt; (dwCompReadCls[i+1] - dwCompReadCls[i]); j++) <br>            { <br>                bAttrRead[uCntRead++] = bAt; <br>            } <br>        } <br>        fAttrReadOK = TRUE; <br>    } <br>  <br> <br>    if (fAttrReadOK &amp;&amp; fAttrOK) <br>    { <br>        hIMC = ImmGetContext(hWndCompStr); <br>#ifdef USEWAPI <br>        bRet = ImmSetCompositionStringW(hIMC,SCS_CHANGEATTR,bAttr,uCnt, <br>                                                    bAttrRead,uCntRead); <br>#else <br>        bRet = ImmSetCompositionString(hIMC,SCS_CHANGEATTR,bAttr,uCnt, <br>                                                    bAttrRead,uCntRead); <br>#endif <br>        // bRet = ImmSetCompositionString(hIMC,SCS_CHANGEATTR,NULL,0, <br>        //                                             bAttrRead,uCntRead); <br>        // bRet = ImmSetCompositionString(hIMC,SCS_CHANGEATTR,bAttr,uCnt, <br>        //                                             NULL,0); <br>        ImmReleaseContext(hWndCompStr,hIMC); <br>    } <br>    else <br>    { <br>#ifdef DEBUG <br>        OutputDebugString("Can not call ImmSetCompositionString\r\n"); <br>        bRet = TRUE; <br>#endif <br>    } <br> <br>#ifdef DEBUG <br>    if (!bRet) <br>        OutputDebugString("ImmSetCompositionString return FALSE\r\n"); <br>#endif <br> <br> <br>    return 1; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

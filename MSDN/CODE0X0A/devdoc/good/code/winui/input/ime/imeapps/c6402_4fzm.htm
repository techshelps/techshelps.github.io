<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STATUS.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6412"></a>STATUS.C</h2>
<pre><code>/**********************************************************************/ <br>/*                                                                    */ <br>/*      STATUS.C                                                      */ <br>/*                                                                    */ <br>/*      Copyright (c) 1995-1997  Microsoft Corporation                */ <br>/*                                                                    */ <br>/**********************************************************************/ <br> <br>#include "windows.h" <br>#include "commctrl.h" <br>#include "imm.h" <br>#include "resource.h" <br>#include "imeapps.h" <br> <br>const char szImeNull[]     = ""; <br>const char szImeOpen[]     = "On"; <br>const char szImeClose[]    = "Off"; <br>const char szImeAlpha[]    = "Alpha"; <br>const char szImeNative[]   = "Native"; <br>const char szImeKatakana[] = "Kata"; <br>const char szImeHalf[]     = "Half"; <br>const char szImeFull[]     = "Full"; <br>const char szImeRoman[]    = "Roman"; <br>const char szImeCode[]     = "Code"; <br>const char szImeHanja[]    = "Hanja"; <br>const char szImeSoftKbd[]  = "SoftKbd"; <br>const char szImeNoConv[]   = "NoConv"; <br>const char szImeEUDC[]     = "EUDC"; <br>const char szImeSymbol[]   = "Symbol"; <br> <br>#define SBITEM_OPENSTATUS    0 <br>#define SBITEM_NATIVEMODE    1 <br>#define SBITEM_FULLSHAPE     2 <br>#define SBITEM_ROMAN         3 <br>#define SBITEM_CHARCODE      4 <br>#define SBITEM_HANJA         5 <br>#define SBITEM_SOFTKBD       6 <br>#define SBITEM_NOCONVERSION  7 <br>#define SBITEM_EUDC          8 <br>#define SBITEM_SYMBOL        9 <br> <br>#define SBITEM_CMODEFIRST    1 <br>#define SBITEM_CMODELAST     9 <br> <br>#define NUM_PARTS 10 <br>int nPartsWidthTbl[NUM_PARTS] = {30,50,30,30,30,30,30,30,30,30}; <br> <br>BOOL CreateStatus(HWND hWnd) <br>{ <br>    int *pPartsWidth; <br>    int i; <br>    int nWidth = 0; <br> <br>    hWndStatus = CreateStatusWindow(WS_CHILD | WS_VISIBLE, NULL , <br>                                                   hWnd,  STATUS_ID); <br> <br> <br>    if (!hWndStatus) <br>        return FALSE;  <br> <br>    pPartsWidth = (int *)LocalAlloc(LPTR,sizeof(int) * NUM_PARTS); <br> <br>    for (i = 0; i &lt; NUM_PARTS; i++) <br>    { <br>        nWidth += nPartsWidthTbl[i]; <br>        pPartsWidth[i] = nWidth; <br>    } <br> <br>    SendMessage(hWndStatus, SB_SETPARTS, <br>                    (WPARAM)NUM_PARTS,(LPARAM)pPartsWidth); <br> <br>    LocalFree((HANDLE)pPartsWidth); <br> <br>    return TRUE; <br>} <br> <br>void SetStatusItems(HWND hWnd) <br>{ <br>    HIMC hIMC; <br>    BOOL fOpen; <br>    DWORD dwConvMode,dwSentMode; <br> <br>    hIMC = ImmGetContext(hWnd); <br> <br>    fOpen = ImmGetOpenStatus(hIMC); <br> <br> <br>    SetOpenStatusParts(fOpen); <br> <br>    ImmGetConversionStatus(hIMC,&amp;dwConvMode,&amp;dwSentMode); <br> <br>    if (fOpen) <br>        SetConvModeParts(dwConvMode); <br>    else <br>        ClearConvModeParts(); <br>     <br>    ImmReleaseContext(hWnd,hIMC); <br> <br>} <br> <br> <br>void SetOpenStatusParts(BOOL fOpen) <br>{ <br>    if (fOpen) <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_OPENSTATUS,(LPARAM)&amp;szImeOpen); <br>    else <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_OPENSTATUS,(LPARAM)&amp;szImeClose); <br>} <br> <br>void SetConvModeParts(DWORD dwConvMode) <br>{ <br>    switch (dwConvMode &amp; IME_CMODE_LANGUAGE) <br>    { <br>        case IME_CMODE_ALPHANUMERIC: <br>            SendMessage(hWndStatus,SB_SETTEXT, <br>                    SBITEM_NATIVEMODE,(LPARAM)&amp;szImeAlpha); <br>            break; <br> <br>        case IME_CMODE_NATIVE: <br>            SendMessage(hWndStatus,SB_SETTEXT, <br>                    SBITEM_NATIVEMODE,(LPARAM)&amp;szImeNative); <br> <br>            break; <br> <br>        case (IME_CMODE_NATIVE | IME_CMODE_KATAKANA): <br>            SendMessage(hWndStatus,SB_SETTEXT, <br>                    SBITEM_NATIVEMODE,(LPARAM)&amp;szImeKatakana); <br> <br>            break; <br> <br>        default: <br>            SendMessage(hWndStatus,SB_SETTEXT, <br>                    SBITEM_NATIVEMODE,(LPARAM)&amp;szImeNull); <br>            break; <br>    } <br> <br> <br>    if (dwConvMode &amp; IME_CMODE_ROMAN) <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_ROMAN,(LPARAM)&amp;szImeRoman); <br>    else <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_ROMAN,(LPARAM)&amp;szImeNull); <br> <br>    if (dwConvMode &amp; IME_CMODE_CHARCODE) <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_CHARCODE,(LPARAM)&amp;szImeCode); <br>    else <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_CHARCODE,(LPARAM)&amp;szImeNull); <br> <br>    if (dwConvMode &amp; IME_CMODE_FULLSHAPE) <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_FULLSHAPE,(LPARAM)&amp;szImeFull); <br>    else <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_FULLSHAPE,(LPARAM)&amp;szImeHalf); <br> <br>    if (dwConvMode &amp; IME_CMODE_HANJACONVERT) <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_HANJA,(LPARAM)&amp;szImeHanja); <br>    else <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_HANJA,(LPARAM)&amp;szImeNull); <br> <br>    if (dwConvMode &amp; IME_CMODE_SOFTKBD) <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_SOFTKBD,(LPARAM)&amp;szImeSoftKbd); <br>    else <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_SOFTKBD,(LPARAM)&amp;szImeNull); <br> <br>    if (dwConvMode &amp; IME_CMODE_NOCONVERSION) <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_NOCONVERSION,(LPARAM)&amp;szImeNoConv); <br>    else <br>        SendMessage(hWndStatus,SB_SETTEXT, <br>                SBITEM_NOCONVERSION,(LPARAM)&amp;szImeNull); <br> <br>    if (dwConvMode &amp; IME_CMODE_EUDC) <br>        SendMessage(hWndStatus,SB_SETTEXT,SBITEM_EUDC,(LPARAM)&amp;szImeEUDC); <br>    else <br>        SendMessage(hWndStatus,SB_SETTEXT,SBITEM_EUDC,(LPARAM)&amp;szImeNull); <br> <br>    if (dwConvMode &amp; IME_CMODE_SYMBOL) <br>        SendMessage(hWndStatus,SB_SETTEXT,SBITEM_SYMBOL,(LPARAM)&amp;szImeSymbol); <br>    else <br>        SendMessage(hWndStatus,SB_SETTEXT,SBITEM_SYMBOL,(LPARAM)&amp;szImeNull); <br>} <br> <br>void ClearConvModeParts() <br>{ <br>    int i; <br> <br>    for (i = SBITEM_CMODEFIRST; i &lt;= SBITEM_CMODELAST; i++) <br>        SendMessage(hWndStatus,SB_SETTEXT, i,(LPARAM)&amp;szImeNull); <br> <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

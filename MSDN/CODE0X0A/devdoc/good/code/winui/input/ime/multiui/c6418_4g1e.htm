<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MULTIWND.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6422"></a>MULTIWND.C</h2>
<pre><code>/**********************************************************************/ <br>/*                                                                    */ <br>/*      MULTIWND.C                                                    */ <br>/*                                                                    */ <br>/*      Copyright (c) 1995-1996  Microsoft Corporation                     */ <br>/*                                                                    */ <br>/**********************************************************************/ <br> <br>#include "windows.h" <br>#include "imm.h" <br>#include "resource.h" <br>#include "multiui.h" <br> <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    InitStringBuffer(HWND)                                          */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>void FAR PASCAL InitStringBuffer(hWnd) <br>HWND hWnd; <br>{ <br>    LPSTR lpStr = NULL; <br> <br>    if (lpStr = GlobalAlloc(GPTR,MAXSIZE_STR)) <br>    { <br>        SetWindowLong(hWnd,MYGWL_LPSTR,(LONG)lpStr); <br>    } <br>    else <br>    { <br>        SetWindowLong(hWnd,MYGWL_LPSTR,(LONG)0L); <br>    } <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    DestroyStringBuffer(HWND)                                       */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>void FAR PASCAL DestroyStringBuffer(hWnd) <br>HWND hWnd; <br>{ <br>    LPSTR lpStr = NULL; <br> <br>    lpStr = (LPSTR)GetWindowLong(hWnd,MYGWL_LPSTR); <br>    if (lpStr) <br>    { <br>        GlobalFree((HANDLE)lpStr); <br>    } <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    MyDrawString(HWND,WPARAM,LPARAM)                                */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>void FAR PASCAL MyDrawString(hWnd,wParam,lParam) <br>HWND hWnd; <br>WPARAM wParam; <br>LPARAM lParam; <br>{ <br>    LPSTR lpStr = NULL; <br>    HDC   hDC; <br>    PAINTSTRUCT ps; <br>    HFONT hOldFont; <br>    HFONT hFont; <br>    DWORD dwHeight; <br>    TEXTMETRIC      tm; <br>    RECT rc; <br> <br>    lpStr = (LPSTR)GetWindowLong(hWnd,MYGWL_LPSTR); <br>    if (!lpStr) <br>        return; <br> <br>    hFont = (HFONT)GetWindowLong(hWnd,MYGWL_FONT); <br>    if (!hFont) <br>        return; <br> <br> <br>    hDC = BeginPaint(hWnd, &amp;ps); <br>    hOldFont = SelectObject(hDC, hFont); <br> <br>    lpStr = (LPSTR)GetWindowLong(hWnd,MYGWL_LPSTR); <br>    // Get dwHeight. <br>    GetTextMetrics(hDC,&amp;tm); <br>    dwHeight = tm.tmHeight + tm.tmExternalLeading; <br> <br> <br>    GetClientRect(hWnd,&amp;rc); <br>    rc.bottom -= dwHeight; <br> <br>    DrawText(hDC,lpStr,-1,&amp;rc,DT_LEFT | DT_WORDBREAK); <br> <br>    SelectObject(hDC, hOldFont); <br>    EndPaint(hWnd, &amp;ps); <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    MySetCompositionFont(HWND)                                      */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>void FAR PASCAL MySetCompositionFont(hWnd) <br>HWND hWnd; <br>{ <br>    HIMC hIMC; <br> <br>    if (hIMC = ImmGetContext(hWnd)) <br>    { <br>        LOGFONT lf; <br>        HFONT   hFont = (HFONT)GetWindowLong(hWnd,MYGWL_FONT); <br>        GetObject(hFont,sizeof(lf),&amp;lf); <br> <br>        ImmSetCompositionFont(hIMC,&amp;lf); <br>        ImmReleaseContext(hWnd, hIMC); <br>    } <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    MySetCompositionForm(HWND)                                      */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>void FAR PASCAL MySetCompositionForm(hWnd) <br>HWND hWnd; <br>{ <br>    RECT            rc; <br>    HIMC            hIMC; <br>    HDC             hDC; <br>    TEXTMETRIC      tm; <br>    DWORD           dwHeight; <br>    HFONT           hFont = (HFONT)GetWindowLong(hWnd,MYGWL_FONT); <br>    HFONT           hOldFont; <br>    COMPOSITIONFORM CompForm; <br> <br>    if (!hFont) <br>        return; <br> <br>    if (hIMC = ImmGetContext(hWnd)) <br>    { <br>        // Get dwHeight. <br>        hDC = GetDC(hWnd); <br>        hOldFont = SelectObject(hDC, hFont); <br>        GetTextMetrics(hDC,&amp;tm); <br>        dwHeight = tm.tmHeight + tm.tmExternalLeading; <br>        SelectObject(hDC, hOldFont); <br>        ReleaseDC(hWnd,hDC); <br> <br> <br>        GetClientRect(hWnd,&amp;rc); <br>        CompForm.dwStyle = CFS_POINT; <br>        CompForm.ptCurrentPos.x = rc.left; <br>        CompForm.ptCurrentPos.y = rc.bottom - dwHeight; <br>        ImmSetCompositionWindow(hIMC,&amp;CompForm); <br> <br>        ImmReleaseContext(hWnd, hIMC); <br>    } <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    MyChangeFont(HWND)                                              */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>void FAR PASCAL MyChangeFont(hWnd) <br>HWND hWnd; <br>{ <br>    LOGFONT lf; <br>    CHOOSEFONT cf; <br>    HFONT hFont; <br> <br>    /* Set all structure fields to zero. */ <br>    memset(&amp;cf, 0, sizeof(CHOOSEFONT)); <br> <br>    cf.lStructSize = sizeof(CHOOSEFONT); <br>    cf.hwndOwner = hWnd; <br>    cf.lpLogFont = &amp;lf; <br>    cf.Flags = CF_SCREENFONTS | CF_EFFECTS; <br>    cf.rgbColors = RGB(0, 255, 255); /* light blue */ <br>    cf.nFontType = SCREEN_FONTTYPE; <br> <br>    if (ChooseFont(&amp;cf)) <br>    { <br>        hFont = (HFONT)GetWindowLong(hWnd,MYGWL_FONT); <br>        DeleteObject(hFont); <br> <br>        hFont = CreateFontIndirect(&amp;lf); <br>        SetWindowLong(hWnd,MYGWL_FONT,(LONG)hFont); <br>        MySetCompositionForm(hWnd); <br>        MySetCompositionFont(hWnd); <br>    } <br>    SetFocus(hWnd); <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    GetDefaultGUIFont(void)                                         */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>HFONT GetDefaultGUIFont(void) <br>{ <br>    static HFONT hFont; <br>    OSVERSIONINFO VerInfo; <br> <br>    if (hFont) <br>        return hFont; <br> <br>    VerInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO); <br>    GetVersionEx(&amp;VerInfo); <br> <br>    if (VerInfo.dwMajorVersion &lt; 4) { <br>        NONCLIENTMETRICS ncm; <br> <br>        ncm.cbSize = sizeof(NONCLIENTMETRICS); <br>        SystemParametersInfo(SPI_GETNONCLIENTMETRICS, sizeof(ncm), &amp;ncm, 0); <br>        hFont = CreateFontIndirect(&amp;ncm.lfStatusFont); <br> <br>        if (!hFont) <br>            hFont = GetStockObject(SYSTEM_FONT); <br>    } else { <br>        hFont = GetStockObject(DEFAULT_GUI_FONT); <br>    } <br> <br>    return hFont; <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    OverFlowText(HWND,LPSTR,LPSTR)                                  */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>BOOL FAR PASCAL OverFlowText(hWnd,lpStr,lpResultStr) <br>HWND hWnd; <br>LPSTR lpStr; <br>LPSTR lpResultStr; <br>{ <br>    BOOL            bRet = FALSE; <br>    RECT            rc; <br>    HDC             hDC; <br>    TEXTMETRIC      tm; <br>    int             nHeight; <br>    HFONT           hFont = (HFONT)GetWindowLong(hWnd,MYGWL_FONT); <br>    HFONT           hOldFont; <br>    LPSTR           lpTemp; <br> <br>    if (!hFont) <br>        return FALSE; <br> <br>    if (lstrlen(lpStr) + lstrlen(lpResultStr) &gt; MAXSIZE_STR) <br>    { <br>        bRet = TRUE; <br> <br>    } <br>    else <br>    { <br>        lpTemp = GlobalAlloc(GPTR,MAXSIZE_STR); <br> <br>        if (lpTemp) <br>        { <br>            lstrcpy(lpTemp,lpStr); <br>            lstrcat(lpTemp,lpResultStr); <br> <br>            GetClientRect(hWnd,&amp;rc); <br> <br>            hDC = GetDC(hWnd); <br>            hOldFont = SelectObject(hDC, hFont); <br>            GetTextMetrics(hDC,&amp;tm); <br> <br>            rc.bottom -= tm.tmHeight + tm.tmExternalLeading; <br>            nHeight = rc.bottom; <br> <br>            if (nHeight &lt; DrawText(hDC,lpTemp,-1,&amp;rc,DT_LEFT | DT_WORDBREAK | DT_CALCRECT)) <br>            { <br>                bRet = TRUE; <br>            } <br> <br>            SelectObject(hDC, hOldFont); <br>            ReleaseDC(hWnd,hDC); <br> <br>            GlobalFree((HANDLE)lpTemp); <br>        } <br>    } <br> <br> <br>    return bRet; <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    AddResultString(HWND)                                           */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>void FAR PASCAL AddResultString(hWnd) <br>HWND hWnd; <br>{ <br>    HIMC  hIMC; <br>    DWORD dwLen; <br>    LPSTR lpStr; <br>    LPSTR lpResultStr; <br> <br>    lpStr = (LPSTR)GetWindowLong(hWnd,MYGWL_LPSTR); <br> <br>    hIMC = ImmGetContext(hWnd); <br> <br>    if (!hIMC) <br>        return; <br> <br>    dwLen = ImmGetCompositionString(hIMC,GCS_RESULTSTR,NULL,0L); <br> <br>    if (dwLen) <br>    { <br>        lpResultStr = GlobalAlloc(GPTR,dwLen+1); <br> <br>        if (lpResultStr) <br>        { <br>            ImmGetCompositionString(hIMC,GCS_RESULTSTR, <br>                                                  lpResultStr,dwLen+1); <br> <br>            if (OverFlowText(hWnd,lpStr,lpResultStr)) <br>                lstrcpy(lpStr,lpResultStr); <br>            else <br>                lstrcat(lpStr,lpResultStr); <br> <br>            InvalidateRect(hWnd,NULL,TRUE); <br> <br>            GlobalFree((HANDLE)lpResultStr); <br>        } <br>    } <br> <br>    ImmReleaseContext(hWnd,hIMC); <br> <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    NoUINoIMCWndProc(HWND, UINT, WPARAM, LPARAM)                    */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>long FAR PASCAL NoUINoIMCWndProc(hWnd, message, wParam, lParam) <br>HWND hWnd; <br>UINT message; <br>WPARAM wParam; <br>LPARAM lParam; <br>{ <br>    HFONT hFont; <br> <br>    switch (message)  <br>    { <br>case WM_CREATE: <br>            hFont = GetDefaultGUIFont(); <br>            SetWindowLong(hWnd,MYGWL_FONT,(LONG)hFont); <br> <br>            InitStringBuffer(hWnd); <br> <br>    break; <br> <br>        case WM_LBUTTONDBLCLK: <br>            MyChangeFont(hWnd); <br>    break; <br> <br>        case WM_LBUTTONDOWN: <br>            SetFocus(hWnd); <br>    break; <br> <br>        case WM_SETFOCUS: <br>            MySetCompositionFont(hWnd); <br>            MySetCompositionForm(hWnd); <br>    break; <br> <br>        case WM_IME_COMPOSITION: <br>            if (lParam &amp; GCS_RESULTSTR) <br>            { <br>                AddResultString(hWnd); <br>            } <br>    return (DefWindowProc(hWnd, message, wParam, lParam)); <br>    break; <br> <br>        case WM_SIZE: <br>            switch (wParam) <br>            { <br>                case SIZENORMAL: <br>                case SIZEFULLSCREEN: <br>                    if (hWnd == GetFocus()) <br>                    { <br>                        MySetCompositionForm(hWnd); <br>                    } <br>                    InvalidateRect(hWnd,NULL,TRUE); <br>                    break; <br> <br> <br>                case SIZEICONIC: <br>            return (DefWindowProc(hWnd, message, wParam, lParam)); <br>                    break; <br>            } <br>    break; <br> <br> <br>case WM_PAINT: <br>            MyDrawString(hWnd,wParam,lParam); <br>    break; <br> <br>case WM_DESTROY: <br>            hFont = (HFONT)GetWindowLong(hWnd,MYGWL_FONT); <br>            DeleteObject(hFont); <br> <br>            DestroyStringBuffer(hWnd); <br> <br>    break; <br> <br>default: <br>    return (DefWindowProc(hWnd, message, wParam, lParam)); <br>    } <br>    return 0L; <br> <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    NoUIOwnIMCWndProc(HWND, UINT, WPARAM, LPARAM)                   */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>long FAR PASCAL NoUIOwnIMCWndProc(hWnd, message, wParam, lParam) <br>HWND hWnd; <br>UINT message; <br>WPARAM wParam; <br>LPARAM lParam; <br>{ <br>    HIMC hIMC; <br>    HFONT hFont; <br> <br>    switch (message)  <br>    { <br>case WM_CREATE: <br>            hFont = GetDefaultGUIFont(); <br>            SetWindowLong(hWnd,MYGWL_FONT,(LONG)hFont); <br> <br>            hIMC = ImmCreateContext(); <br>            ImmAssociateContext(hWnd,hIMC); <br> <br>            // Save hIMC into WndExtra. <br>            SetWindowLong(hWnd,MYGWL_IMC,(LONG)hIMC); <br> <br>            MySetCompositionFont(hWnd); <br>            MySetCompositionForm(hWnd); <br> <br>            InitStringBuffer(hWnd); <br> <br>    break; <br> <br>        case WM_LBUTTONDBLCLK: <br>            MyChangeFont(hWnd); <br>    break; <br> <br>        case WM_LBUTTONDOWN: <br>            SetFocus(hWnd); <br>    break; <br> <br>        case WM_IME_COMPOSITION: <br>            if (lParam &amp; GCS_RESULTSTR) <br>            { <br>                AddResultString(hWnd); <br>            } <br>    return (DefWindowProc(hWnd, message, wParam, lParam)); <br>    break; <br> <br>        case WM_SIZE: <br>            switch (wParam) <br>            { <br>                case SIZENORMAL: <br>                case SIZEFULLSCREEN: <br>                    MySetCompositionForm(hWnd); <br>                    InvalidateRect(hWnd,NULL,TRUE); <br>                    break; <br> <br>                case SIZEICONIC: <br>            return (DefWindowProc(hWnd, message, wParam, lParam)); <br>                    break; <br>            } <br>    break; <br> <br>case WM_PAINT: <br>            MyDrawString(hWnd,wParam,lParam); <br>    break; <br> <br>case WM_DESTROY: <br>            hFont = (HFONT)GetWindowLong(hWnd,MYGWL_FONT); <br>            DeleteObject(hFont); <br> <br>            hIMC = (HIMC)GetWindowLong(hWnd,MYGWL_IMC); <br>            ImmDestroyContext(hIMC); <br> <br>            DestroyStringBuffer(hWnd); <br> <br>    break; <br> <br>default: <br>    return (DefWindowProc(hWnd, message, wParam, lParam)); <br>    } <br>    return 0L; <br> <br>} <br> <br>/**********************************************************************/ <br>/*                                                                    */ <br>/*    OwnUIOwnIMCWndProc(HWND, UINT, WPARAM, LPARAM)                  */ <br>/*                                                                    */ <br>/**********************************************************************/ <br>long FAR PASCAL OwnUIOwnIMCWndProc(hWnd, message, wParam, lParam) <br>HWND hWnd; <br>UINT message; <br>WPARAM wParam; <br>LPARAM lParam; <br>{ <br>    HFONT hFont; <br>    HIMC  hIMC = 0L; <br>    HWND  hIMEWnd = (HWND)GetWindowLong(hWnd,MYGWL_IMEWND); <br> <br> <br>    if (IsWindow(hIMEWnd) &amp;&amp; ImmIsUIMessage(hIMEWnd,message,wParam,lParam)) <br>    { <br>        switch (message)  <br>        { <br>            case WM_IME_COMPOSITION: <br>                if (lParam &amp; GCS_RESULTSTR) <br>                { <br>                    AddResultString(hWnd); <br>                } <br>        break; <br> <br>            default: <br>        break; <br>        } <br> <br>return 0L; <br>    } <br> <br>    switch (message)  <br>    { <br>case WM_CREATE: <br>            hFont = GetDefaultGUIFont(); <br>            SetWindowLong(hWnd,MYGWL_FONT,(LONG)hFont); <br> <br>            hIMC = ImmCreateContext(); <br>            ImmAssociateContext(hWnd,hIMC); <br> <br>            // Save hIMC into WndExtra. <br>            SetWindowLong(hWnd,MYGWL_IMC,(LONG)hIMC); <br> <br>            if (!(hIMEWnd = CreateWindow("Ime", "", <br>                    WS_POPUP | WS_DISABLED, <br>            0,0,0,0, <br>            hWnd, NULL, hInst, NULL))) <br>        return -1; <br> <br>            // Save hIMEWnd into WndExtra. <br>            SetWindowLong(hWnd,MYGWL_IMEWND,(LONG)hIMEWnd); <br> <br>            MySetCompositionFont(hWnd); <br>            MySetCompositionForm(hWnd); <br> <br>            InitStringBuffer(hWnd); <br> <br>    break; <br> <br>        case WM_LBUTTONDBLCLK: <br>            MyChangeFont(hWnd); <br>    break; <br> <br>        case WM_LBUTTONDOWN: <br>            SetFocus(hWnd); <br>    break; <br> <br>        case WM_SIZE: <br>            switch (wParam) <br>            { <br>                case SIZENORMAL: <br>                case SIZEFULLSCREEN: <br>                    MySetCompositionForm(hWnd); <br>                    InvalidateRect(hWnd,NULL,TRUE); <br>                    break; <br> <br>                case SIZEICONIC: <br>            return (DefWindowProc(hWnd, message, wParam, lParam)); <br>                    break; <br>            } <br>    break; <br> <br>case WM_PAINT: <br>            MyDrawString(hWnd,wParam,lParam); <br>    break; <br> <br>case WM_DESTROY: <br>            hFont = (HFONT)GetWindowLong(hWnd,MYGWL_FONT); <br>            DeleteObject(hFont); <br> <br>            hIMC = (HIMC)GetWindowLong(hWnd,MYGWL_IMC); <br>            ImmDestroyContext(hIMC); <br> <br>            DestroyStringBuffer(hWnd); <br> <br>    break; <br> <br>default: <br>    return (DefWindowProc(hWnd, message, wParam, lParam)); <br>    } <br>    return 0L; <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

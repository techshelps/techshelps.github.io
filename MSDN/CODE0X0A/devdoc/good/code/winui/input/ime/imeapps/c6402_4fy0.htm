<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PAINT.C</title>
<link disabled rel=stylesheet href=../../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6408"></a>PAINT.C</h2>
<pre><code>/**********************************************************************/ <br>/*                                                                    */ <br>/*      PAINT.C                                                       */ <br>/*                                                                    */ <br>/*      Copyright (c) 1995-1997  Microsoft Corporation                */ <br>/*                                                                    */ <br>/**********************************************************************/ <br> <br>#include "windows.h" <br>#include "imm.h" <br>#include "resource.h" <br>#include "imeapps.h" <br> <br>#define DEBUG 1 <br> <br> <br> <br>void SetAttrColor(HDC hDC, BYTE bAttr) <br>{ <br>    switch (bAttr) <br>    { <br>        case ATTR_INPUT: <br>            SetTextColor(hDC,RGB(0,0,0)); <br>            SetBkMode(hDC,TRANSPARENT); <br>            break; <br>        case ATTR_TARGET_CONVERTED: <br>            SetTextColor(hDC,RGB(255,255,255)); <br>            SetBkMode(hDC,OPAQUE); <br>            SetBkColor(hDC,RGB(0,0,255)); <br>            break; <br>        case ATTR_CONVERTED: <br>            SetTextColor(hDC,RGB(0,0,255)); <br>            SetBkMode(hDC,TRANSPARENT); <br>            break; <br>        case ATTR_TARGET_NOTCONVERTED: <br>            SetTextColor(hDC,RGB(255,255,255)); <br>            SetBkMode(hDC,OPAQUE); <br>            SetBkColor(hDC,RGB(0,255,0)); <br>            break; <br>        case ATTR_INPUT_ERROR: <br>            SetTextColor(hDC,RGB(255,255,0)); <br>            SetBkMode(hDC,TRANSPARENT); <br>            break; <br>        case ATTR_FIXEDCONVERTED: <br>            SetTextColor(hDC,RGB(255,0,0)); <br>            SetBkMode(hDC,TRANSPARENT); <br>            break; <br>        default: <br>            SetTextColor(hDC,RGB(0,0,0)); <br>            SetBkMode(hDC,TRANSPARENT); <br>            break; <br>    } <br>} <br> <br>LRESULT HandlePaint(HWND hWnd,WPARAM wParam, LPARAM lParam) <br>{ <br>    HDC hDC; <br>    PAINTSTRUCT ps; <br>    UINT i; <br>    int x = ORG_X; <br>    int y = ORG_Y; <br>    SIZE sz; <br>    HFONT hOldFont = 0; <br>    HFONT hDefFont = GetStockObject(DEFAULT_GUI_FONT); <br>    int height,defheight; <br>    const char  szResult[] = "Result String"; <br>    const char  szComp[] = "Composition String"; <br>    RECT rc; <br> <br>    GetClientRect(hWnd,&amp;rc); <br> <br>    hDC = BeginPaint(hWnd, &amp;ps); <br> <br>    if (hFont) <br>        hOldFont = SelectObject(hDC,hDefFont); <br> <br> <br>    // Get the height of the default gui font. <br>    GetTextExtentPoint(hDC,"A",1,&amp;sz); <br>    defheight = sz.cy + 1; <br> <br>    // Get the height of the font. <br>    SelectObject(hDC,hFont); <br>    GetTextExtentPoint(hDC,"A",1,&amp;sz); <br>    height = sz.cy + 1; <br> <br>    SelectObject(hDC,hDefFont); <br>    SetTextColor(hDC,RGB(0,0,0)); <br>    SetBkMode(hDC,TRANSPARENT); <br>    TextOut(hDC,ORG_X,y,szResult,lstrlen(szResult)); <br>    y += defheight; <br> <br>    if (Mylstrlen(szPaintResult)) <br>    { <br>        x = ORG_X; <br>        SelectObject(hDC,hFont); <br>        SetTextColor(hDC,RGB(255,0,0)); <br>        SetBkMode(hDC,TRANSPARENT); <br>#ifdef USEWAPI <br>        TextOutW(hDC,x,y,szPaintResult,Mylstrlen(szPaintResult)); <br>#else <br>        TextOut(hDC,x,y,szPaintResult,Mylstrlen(szPaintResult)); <br>#endif <br>    } <br> <br>    y += height; <br> <br>    if (Mylstrlen(szPaintResultRead)) <br>    { <br>        x = ORG_X; <br>        SelectObject(hDC,hFont); <br>        SetTextColor(hDC,RGB(255,0,0)); <br>        SetBkMode(hDC,TRANSPARENT); <br>#ifdef USEWAPI <br>        TextOutW(hDC,x,y,szPaintResultRead,Mylstrlen(szPaintResultRead)); <br>#else <br>        TextOut(hDC,x,y,szPaintResultRead,Mylstrlen(szPaintResultRead)); <br>#endif <br>    } <br>#if 0 <br>    if (dwResultReadStrLen) <br>    { <br>        x = ORG_X; <br>        SelectObject(hDC,hFont); <br>        SetTextColor(hDC,RGB(0,0,0)); <br>        SetBkMode(hDC,TRANSPARENT); <br> <br>        if (dwResultReadClsLen) <br>        { <br>            dwResultReadCls[127] = 0; <br>            i = 1; <br> <br>            SetTextColor(hDC,RGB(255,0,0)); <br>            while (dwResultReadCls[i] &amp;&amp; dwResultReadCls[i-1] &lt; dwResultReadStrLen) <br>            { <br>                DWORD dwTextLen = dwResultReadCls[i] - dwResultReadCls[i-1]; <br>                LPSTR lpStart = szResultReadStr + dwResultReadCls[i-1]; <br> <br>                TextOut(hDC,x,y,lpStart,dwTextLen); <br>                GetTextExtentPoint(hDC,lpStart,dwTextLen,&amp;sz); <br>                x += sz.cx; <br> <br>                TextOut(hDC,x,y,",",1); <br>                GetTextExtentPoint(hDC,",",1,&amp;sz); <br>                x += (sz.cx + 2); <br> <br>                i++; <br>            } <br>        } <br>        else <br>        { <br>            SetTextColor(hDC,RGB(255,0,0)); <br>            SetBkMode(hDC,TRANSPARENT); <br>            TextOut(hDC,x,y,szResultReadStr,dwResultReadStrLen); <br>        } <br> <br> <br>    } <br>#endif <br> <br>    y += height; <br> <br>    SelectObject(hDC,hDefFont); <br>    SetTextColor(hDC,RGB(0,0,0)); <br>    SetBkMode(hDC,TRANSPARENT); <br>    TextOut(hDC,ORG_X,y,szComp,lstrlen(szComp)); <br>    y += defheight; <br> <br>    if (dwCompStrLen) <br>    { <br>        x = ORG_X; <br>        SelectObject(hDC,hFont); <br>        SetTextColor(hDC,RGB(0,0,0)); <br> <br>        if (dwCompClsLen &amp;&amp; dwCompAttrLen) <br>        { <br>            dwCompCls[127] = 0; <br>            i = 1; <br>           <br>            while (dwCompCls[i] &amp;&amp; dwCompCls[i-1] &lt; dwCompStrLen) <br>            { <br>                DWORD dwTextLen = dwCompCls[i] - dwCompCls[i-1]; <br>                LPMYSTR lpStart = szCompStr + dwCompCls[i-1]; <br> <br>                SetAttrColor(hDC, bCompAttr[dwCompCls[i-1]]); <br>#ifdef USEWAPI <br>                TextOutW(hDC,x,y,lpStart,dwTextLen); <br>                GetTextExtentPointW(hDC,lpStart,dwTextLen,&amp;sz); <br>#else <br>                TextOut(hDC,x,y,lpStart,dwTextLen); <br>                GetTextExtentPoint(hDC,lpStart,dwTextLen,&amp;sz); <br>#endif <br>                x += sz.cx; <br> <br>                SetTextColor(hDC,RGB(0,0,0)); <br>                SetBkMode(hDC,TRANSPARENT); <br>#ifdef USEWAPI <br>                TextOutW(hDC,x,y,MYTEXT(","),1); <br>                GetTextExtentPointW(hDC,MYTEXT(","),1,&amp;sz); <br>#else <br>                TextOut(hDC,x,y,",",1); <br>                GetTextExtentPoint(hDC,",",1,&amp;sz); <br>#endif <br>                x += (sz.cx + 2); <br> <br>                i++; <br>            } <br>        } <br>        else <br>        { <br>            SetBkMode(hDC,TRANSPARENT); <br>#ifdef USEWAPI <br>            TextOutW(hDC,x,y,szCompStr,dwCompStrLen); <br>#else <br>            TextOut(hDC,x,y,szCompStr,dwCompStrLen); <br>#endif <br>        } <br> <br>    } <br> <br>    y += height; <br> <br>    if (dwCompReadStrLen) <br>    { <br>        x = ORG_X; <br>        SelectObject(hDC,hFont); <br>        SetTextColor(hDC,RGB(0,0,0)); <br>        SetBkMode(hDC,TRANSPARENT); <br> <br>        if (dwCompReadClsLen &amp;&amp; dwCompReadAttrLen) <br>        { <br>            dwCompReadCls[127] = 0; <br>            i = 1; <br> <br>            while (dwCompReadCls[i] &amp;&amp; dwCompReadCls[i-1] &lt; dwCompReadStrLen) <br>            { <br>                DWORD dwTextLen = dwCompReadCls[i] - dwCompReadCls[i-1]; <br>                LPMYSTR lpStart = szCompReadStr + dwCompReadCls[i-1]; <br> <br>                SetAttrColor(hDC, bCompReadAttr[dwCompReadCls[i-1]]); <br>#ifdef USEWAPI <br>                TextOutW(hDC,x,y,lpStart,dwTextLen); <br>                GetTextExtentPointW(hDC,lpStart,dwTextLen,&amp;sz); <br>#else <br>                TextOut(hDC,x,y,lpStart,dwTextLen); <br>                GetTextExtentPoint(hDC,lpStart,dwTextLen,&amp;sz); <br>#endif <br>                x += sz.cx; <br> <br>                SetTextColor(hDC,RGB(0,0,0)); <br>                SetBkMode(hDC,TRANSPARENT); <br>#ifdef USEWAPI <br>                TextOutW(hDC,x,y,MYTEXT(","),1); <br>                GetTextExtentPointW(hDC,MYTEXT(","),1,&amp;sz); <br>#else <br>                TextOut(hDC,x,y,",",1); <br>                GetTextExtentPoint(hDC,",",1,&amp;sz); <br>#endif <br>                x += (sz.cx + 2); <br> <br>                i++; <br>            } <br>        } <br>        else <br>        { <br>            SetBkMode(hDC,TRANSPARENT); <br>#ifdef USEWAPI <br>            TextOutW(hDC,x,y,szCompReadStr,dwCompReadStrLen); <br>#else <br>            TextOut(hDC,x,y,szCompReadStr,dwCompReadStrLen); <br>#endif <br>        } <br> <br>    } <br> <br>    y += height; <br> <br>    ptImeUIPos.y = y; <br> <br>    SelectObject(hDC,hOldFont); <br>    EndPaint(hWnd,&amp;ps); <br>    return 1; <br>} <br> <br>LRESULT HandleCandPaint(HWND hWnd,WPARAM wParam, LPARAM lParam) <br>{ <br>    HDC hDC; <br>    PAINTSTRUCT ps; <br>    UINT i; <br>    int x = ORG_X; <br>    int y = ORG_Y; <br>    SIZE sz; <br>    HFONT hOldFont = 0; <br>    HFONT hDefFont = GetStockObject(DEFAULT_GUI_FONT); <br>    int height,defheight; <br>    LPDWORD lpdwOffset; <br>    RECT rect; <br>    const char  szCand[] = "Candidate List"; <br>    const char  szCandNull[] = ""; <br>    const char  szCandRead[] = "Reading"; <br>    const char  szCandCode[] = "Code"; <br>    const char  szCandMean[] = "Meaning"; <br>    const char  szCandRadi[] = "Radical"; <br>    const char  szCandStrk[] = "Stroke"; <br> <br> <br>    GetClientRect(hWnd,&amp;rect); <br> <br>    hDC = BeginPaint(hWnd, &amp;ps); <br> <br>    if (!lpCandList) <br>        goto pt_cand_10; <br> <br>    if (hFont) <br>        hOldFont = SelectObject(hDC,hDefFont); <br> <br> <br>    // Get the height of the default gui font. <br>    GetTextExtentPoint(hDC,"A",1,&amp;sz); <br>    defheight = sz.cy + 1; <br> <br>    // Get the height of the font. <br>    SelectObject(hDC,hFont); <br>    GetTextExtentPoint(hDC,"A",1,&amp;sz); <br>    height = sz.cy + 1; <br> <br>    SelectObject(hDC,hDefFont); <br>    SetTextColor(hDC,RGB(0,0,0)); <br>    SetBkMode(hDC,TRANSPARENT); <br>    TextOut(hDC,ORG_X,y,szCand,lstrlen(szCand)); <br>    y += defheight; <br> <br>    switch (lpCandList-&gt;dwStyle) <br>    { <br>        case IME_CAND_READ: <br>            TextOut(hDC,ORG_X,y,szCandRead,lstrlen(szCandRead)); <br>            break; <br> <br>        case IME_CAND_CODE: <br>            TextOut(hDC,ORG_X,y,szCandCode,lstrlen(szCandCode)); <br>            break; <br> <br>        case IME_CAND_MEANING: <br>            TextOut(hDC,ORG_X,y,szCandMean,lstrlen(szCandMean)); <br>            break; <br> <br>        case IME_CAND_RADICAL: <br>            TextOut(hDC,ORG_X,y,szCandRadi,lstrlen(szCandRadi)); <br>            break; <br> <br>        case IME_CAND_STROKE: <br>            TextOut(hDC,ORG_X,y,szCandStrk,lstrlen(szCandStrk)); <br>            break; <br> <br>        default: <br>            break; <br> <br>    } <br>    y += defheight; <br> <br>    if (!lpCandList-&gt;dwCount) <br>        goto pt_cand_10; <br> <br>    lpdwOffset = &amp;lpCandList-&gt;dwOffset[0]; <br> <br>    lpdwOffset += lpCandList-&gt;dwPageStart; <br> <br>    for (i = lpCandList-&gt;dwPageStart; <br>         (i &lt; lpCandList-&gt;dwCount) &amp;&amp;  <br>         (i &lt; lpCandList-&gt;dwPageStart + lpCandList-&gt;dwPageSize) &amp;&amp; <br>         (y &lt;= rect.bottom + height); i++) <br>    { <br>        LPSTR lpstr = (LPSTR)lpCandList + *lpdwOffset++; <br> <br>        x = ORG_X; <br> <br>        SelectObject(hDC,hFont); <br>        if (i != lpCandList-&gt;dwSelection) <br>        { <br>            SetTextColor(hDC,RGB(0,0,0)); <br>            SetBkMode(hDC,TRANSPARENT); <br>        } <br>        else <br>        { <br>            SetTextColor(hDC,RGB(255,255,255)); <br>            SetBkColor(hDC,RGB(0,0,255)); <br>            SetBkMode(hDC,OPAQUE); <br>        } <br> <br>        TextOut(hDC,x,y,lpstr,lstrlen(lpstr)); <br>        y += height; <br>    } <br> <br>    SelectObject(hDC,hOldFont); <br> <br>pt_cand_10: <br>    EndPaint(hWnd,&amp;ps); <br>    return 1; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

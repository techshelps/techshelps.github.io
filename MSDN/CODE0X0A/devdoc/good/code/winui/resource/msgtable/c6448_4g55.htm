<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MSGTEST.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6449"></a>MSGTEST.C</h2>
<pre><code>/* Microsoft Developer Support <br>   Copyright 1992 - 1998 Microsoft Corporation */ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br> <br>/* messages.h is created by mc.exe when compiling messages.mc */ <br>#include "messages.h" <br> <br>#define MAX_MESSAGES 5 <br>#define MAX_MSG_LENGTH 1024 <br>#define SEVERITY_MASK 0xC0000000 <br>#define FACILITY_MASK 0x0FFF0000 <br>#define MSG_ID_MASK 0x0000FFFF <br> <br> <br>/******************************************************************** <br>* FUNCTION: myPutMsg(HINSTANCE hLib, LPVOID lpArgs, DWORD dwMsgId,  * <br>*                    DWORD dwLangId)                                * <br>*                                                                   * <br>* PURPOSE: format and output error dwMsgId, using string defined    * <br>*          for language dwLangId, with insert strings lpArgs, from  * <br>*          the messagetable resource in the DLL referenced by       * <br>*          handle hLib                                              * <br>*                                                                   * <br>* INPUT: Library handle, insert strings, message ID number, and     * <br>*        language ID as defined in the .mc file                     * <br>*                                                                   * <br>* RETURNS: none                                                     * <br>********************************************************************/ <br> <br>void myPutMsg(HINSTANCE hLib, LPVOID lpArgs, DWORD dwMsgId, DWORD dwLangId) <br>{ <br>  BOOL bSuccess; <br>  LPTSTR msgBuf;  /* hold text of the error message that we build */ <br>  int dwCode;  /* hold various codes extracted from dwMsgId */ <br> <br>  /* Here is the layout of the message ID: <br> <br>   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 <br>   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 <br>  +---+-+-+-----------------------+-------------------------------+ <br>  |Sev|C|R|     Facility          |               Code            | <br>  +---+-+-+-----------------------+-------------------------------+ <br> <br>  where <br> <br>      Sev - is the severity code <br>      C - is the Customer code flag <br>      R - is a reserved bit <br>      Facility - is the facility code <br>      Code - is the facility's status code <br>  */ <br> <br>  printf("Severity: "); <br>  /* output the severity and facility code. Mask off the severity */ <br>  /* bits with SEVERITY_MASK and shift them down */ <br>  dwCode = (dwMsgId &amp; SEVERITY_MASK) &gt;&gt; 30; <br>  switch (dwCode) <br>    { <br>    case STATUS_SEVERITY_WARNING: <br>      printf("STATUS_SEVERITY_WARNING"); break; <br>    case STATUS_SEVERITY_SUCCESS: <br>      printf("STATUS_SEVERITY_SUCCESS"); break; <br>    case STATUS_SEVERITY_INFORMATIONAL: <br>      printf("STATUS_SEVERITY_INFORMATIONAL"); break; <br>    case STATUS_SEVERITY_ERROR: <br>      printf("STATUS_SEVERITY_ERROR"); break; <br>    default: <br>      printf("Unknown!"); break; <br>    } <br>  printf ("\nFacility: "); <br>  /* Mask off the facility bits with FACILITY_MASK and shift them down */ <br>  dwCode = (dwMsgId &amp; FACILITY_MASK) &gt;&gt; 16; <br>  switch (dwCode) <br>    { <br>    case FACILITY_SYSTEM: <br>      printf("FACILITY_SYSTEM"); break; <br>    case FACILITY_STUBS: <br>      printf("FACILITY_STUBS"); break; <br>    case FACILITY_RUNTIME: <br>      printf("FACILITY_RUNTIME"); break; <br>    case FACILITY_IO_ERROR_CODE: <br>      printf("FACILITY_IO_ERROR_CODE"); break; <br>    default: <br>      printf("Unknown!"); break; <br>    } <br>  /* retrieve and format the message from the messagetable DLL. */ <br>  bSuccess = FormatMessage( <br>      FORMAT_MESSAGE_FROM_HMODULE | /* get the message from the DLL */ <br>      FORMAT_MESSAGE_ALLOCATE_BUFFER | /* allocate the msg buffer for us */ <br>      FORMAT_MESSAGE_ARGUMENT_ARRAY | /* lpArgs is an array of 32-bit values */ <br>      60, /* line length for the mesages */ <br>      hLib, /* the messagetable DLL handle */ <br>      dwMsgId, /* message ID */ <br>      dwLangId, /* language ID as defined in .mc file */ <br>      (LPTSTR) &amp;msgBuf, /* address of pointer to buffer for message */ <br>      MAX_MSG_LENGTH, /* maximum size of the message buffer */ <br>      lpArgs); /* array of insert strings for the message */ <br>  if (!bSuccess) <br>    printf("Error %d from FormatMessage\n", GetLastError()); <br>  else <br>    { <br>    /* mask off the actual message number with MSG_ID_MASK and show it */ <br>    printf("\nError: %d: %s", dwMsgId &amp; MSG_ID_MASK, msgBuf); <br>    /* Free the buffer that FormatMessage allocated for us. */ <br>    LocalFree((HLOCAL) msgBuf); <br>    } <br>  puts("\n__________\n"); <br>  CloseHandle(hLib); <br>} <br> <br>/******************************************************************** <br>* FUNCTION: main()                                                  * <br>*                                                                   * <br>* PURPOSE: Load the message resource DLL, and call myPutMsg() to    * <br>*          format and output error messages to the user             * <br>*                                                                   * <br>* INPUT: none                                                       * <br>*                                                                   * <br>* RETURNS: none                                                     * <br>********************************************************************/ <br> <br>int main() <br>{ <br>  HINSTANCE hLib;  /* handle to the messagetable DLL */ <br>  PTCHAR aInsertStrs[8];  /* array of 32-bit insert values for FormatMessage*/ <br>  WORD wLangID; <br> <br>  /* Check to make sure we are running on Windows NT */ <br>  if( GetVersion() &amp; 0x80000000 ) <br>    { <br>    MessageBox(NULL, "Sorry, this application requires Windows NT.\n" <br>        "This application will now terminate.", <br>        "Error: Windows NT Required to Run",  MB_OK ); <br>    return(1); <br>    } <br>  /* Load the resource library without calling any entry points since */ <br>  /* this is a resource-only DLL */ <br>  hLib = LoadLibraryEx("messages.dll", NULL, DONT_RESOLVE_DLL_REFERENCES); <br>  if (!hLib) <br>    printf("Error %d from LoadLibrary\n", GetLastError()); <br>  /* Messages in the .mc file have been defined using standard locale ID's: <br>     see MAKELANGID and LANG_* definitions in winnt.h */ <br> <br>  wLangID = LANG_USER_DEFAULT; <br>  /* to force a different language, define the language ID as one of the values <br>     defined in the Language statement in the .mc file. Alternatively, you <br>     can choose a different language in the International applet in the control <br>     panel and stick with LANG_USER_DEFAULT. */ <br>  //wLangID = 0x411; <br> <br>  /* Output some error messages from the messagetable DLL */ <br>  /* The first three have no insert strings */ <br>  myPutMsg(hLib, NULL, MSG_BAD_COMMAND, wLangID); <br>  myPutMsg(hLib, NULL, MSG_BAD_PARM1, wLangID); <br>  myPutMsg(hLib, NULL, MSG_STRIKE_ANY_KEY, wLangID); <br>  /* wait for user to hit enter as per last error message */ <br>  getchar(); <br>  /* The next two messages contain insert strings - set up our array */ <br>  /* of insert strings and pass the array to myPutMsg() */ <br>  aInsertStrs[0] = "foo.c"; <br>  aInsertStrs[1] = "BAR"; <br>  myPutMsg(hLib, aInsertStrs, MSG_CMD_DELETE, wLangID); <br>  aInsertStrs[0] = (PTCHAR) 47; <br>  aInsertStrs[1] = (PTCHAR) 5; <br>  myPutMsg(hLib, aInsertStrs, MSG_RETRYS, wLangID); <br>  return(0); <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

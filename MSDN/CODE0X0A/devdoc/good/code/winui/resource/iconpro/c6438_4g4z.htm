<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICONS.H</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6443"></a>ICONS.H</h2>
<pre><code>/****************************************************************************\ <br>*  <br>*     FILE:     Icons.H <br>* <br>*     PURPOSE:  IconPro Project Icon handling header file <br>* <br>*     COMMENTS:  <br>*                <br>* <br>*     Copyright 1995 - 1998 Microsoft Corp. <br>* <br>* <br>* History: <br>*                July '95 - Created <br>* <br>\****************************************************************************/ <br> <br> <br>/****************************************************************************/ <br>// Structs <br> <br>// These first two structs represent how the icon information is stored <br>// when it is bound into a EXE or DLL file. Structure members are WORD <br>// aligned and the last member of the structure is the ID instead of <br>// the imageoffset. <br>#pragma pack( push ) <br>#pragma pack( 2 ) <br>typedef struct <br>{ <br>BYTEbWidth;               // Width of the image <br>BYTEbHeight;              // Height of the image (times 2) <br>BYTEbColorCount;          // Number of colors in image (0 if &gt;=8bpp) <br>BYTEbReserved;            // Reserved <br>WORDwPlanes;              // Color Planes <br>WORDwBitCount;            // Bits per pixel <br>DWORDdwBytesInRes;         // how many bytes in this resource? <br>WORDnID;                  // the ID <br>} MEMICONDIRENTRY, *LPMEMICONDIRENTRY; <br>typedef struct  <br>{ <br>WORDidReserved;   // Reserved <br>WORDidType;       // resource type (1 for icons) <br>WORDidCount;      // how many images? <br>MEMICONDIRENTRYidEntries[1]; // the entries for each image <br>} MEMICONDIR, *LPMEMICONDIR; <br>#pragma pack( pop ) <br> <br>// These next two structs represent how the icon information is stored <br>// in an ICO file. <br>typedef struct <br>{ <br>BYTEbWidth;               // Width of the image <br>BYTEbHeight;              // Height of the image (times 2) <br>BYTEbColorCount;          // Number of colors in image (0 if &gt;=8bpp) <br>BYTEbReserved;            // Reserved <br>WORDwPlanes;              // Color Planes <br>WORDwBitCount;            // Bits per pixel <br>DWORDdwBytesInRes;         // how many bytes in this resource? <br>DWORDdwImageOffset;        // where in the file is this image <br>} ICONDIRENTRY, *LPICONDIRENTRY; <br>typedef struct  <br>{ <br>WORDidReserved;   // Reserved <br>WORDidType;       // resource type (1 for icons) <br>WORDidCount;      // how many images? <br>ICONDIRENTRYidEntries[1]; // the entries for each image <br>} ICONDIR, *LPICONDIR; <br> <br> <br>// The following two structs are for the use of this program in <br>// manipulating icons. They are more closely tied to the operation <br>// of this program than the structures listed above. One of the <br>// main differences is that they provide a pointer to the DIB <br>// information of the masks. <br>typedef struct <br>{ <br>UINTWidth, Height, Colors; // Width, Height and bpp <br>LPBYTElpBits;                // ptr to DIB bits <br>DWORDdwNumBytes;            // how many bytes? <br>LPBITMAPINFOlpbi;                  // ptr to header <br>LPBYTElpXOR;                 // ptr to XOR image bits <br>LPBYTElpAND;                 // ptr to AND image bits <br>} ICONIMAGE, *LPICONIMAGE; <br>typedef struct <br>{ <br>BOOLbHasChanged;                     // Has image changed? <br>TCHARszOriginalICOFileName[MAX_PATH]; // Original name <br>TCHARszOriginalDLLFileName[MAX_PATH]; // Original name <br>UINTnNumImages;                      // How many images? <br>ICONIMAGEIconImages[1];                   // Image entries <br>} ICONRESOURCE, *LPICONRESOURCE; <br>/****************************************************************************/ <br> <br> <br> <br> <br>/****************************************************************************/ <br>// Exported function prototypes <br>LPICONRESOURCE ReadIconFromICOFile( LPCTSTR szFileName ); <br>BOOL WriteIconToICOFile( LPICONRESOURCE lpIR, LPCTSTR szFileName ); <br>HICON MakeIconFromResource( LPICONIMAGE lpIcon ); <br>LPICONRESOURCE ReadIconFromEXEFile( LPCTSTR szFileName ); <br>BOOL IconImageToClipBoard( LPICONIMAGE lpii ); <br>BOOL IconImageFromClipBoard( LPICONIMAGE lpii, BOOL bStretchToFit ); <br>BOOL CreateBlankNewFormatIcon( LPICONIMAGE lpii ); <br>BOOL DrawXORMask( HDC hDC, RECT Rect, LPICONIMAGE lpIcon ); <br>BOOL DrawANDMask( HDC hDC, RECT Rect, LPICONIMAGE lpIcon ); <br>RECT GetXORImageRect( RECT Rect, LPICONIMAGE lpIcon ); <br>BOOL MakeNewANDMaskBasedOnPoint( LPICONIMAGE lpIcon, POINT pt ); <br>BOOL IconImageFromBMPFile( LPCTSTR szFileName, LPICONIMAGE lpii, BOOL bStretchToFit ); <br>BOOL IconImageToBMPFile( LPCTSTR szFileName, LPICONIMAGE lpii ); <br>/****************************************************************************/ </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6438"></a>README.TXT</h2>
<pre><code>IconPro Icon Manager <br> <br> <br>SUMMARY <br>======= <br> <br>The IconPro sample is designed to manipulate icons having images with bit <br>depths from 1bpp to 32bpp, as well as sizes from 16x16 to 128x128. <br> <br>IconPro provides no editing capabilities. To create an icon, the user must <br>first edit the image in DIB format, using a program like PBRUSH. Then the <br>image can be imported into IconPro without loss of bit depth. <br> <br>Note that IconPro restricts the size of its child windows, so MDI tiling <br>can look different than expected. <br> <br>When extracting icons from DLL and EXE files, IconPro will operate only on <br>32bit files. <br> <br>MORE INFORMATION <br>================ <br> <br>Usage <br>----- <br> <br>IconPro displays icons in MDI child windows, showing you one image at a  <br>time. Since an icon may contain more than one image, a list box is provided  <br>below the display area to choose which image to look at. <br> <br>IconPro is capable of reading and writing ICO files, as well as extracting <br>icons from Win32 PE format DLLs and EXEs. It can also import from/export <br>to BMP files and copy/paste with the clipboard.  <br> <br>Holding the Control key and left-clicking on the XOR mask will make the <br>program calculate new masks, using the pixel color at the mouse location as <br>the transparent color.  <br> <br>File Menu <br>--------- <br> <br>New Icon: Creates a new icon resource and a window in which to display it. <br>    The newly created icon resource has no images in it. New images would <br>    need to be created using the Add Format command in the Edit menu. <br>Open Icon File: Opens an ICO file and creates a new window in which to  <br>    display its images. The images stored in the ICO file are enumerated in  <br>    the listbox at the bottom of the display window. <br>Extract From DLL/EXE: Extracts an icon resource from a 32bit DLL or EXE  <br>    file. It will fail on 16bit files. If the file contains more than one  <br>    icon resource, a dialog box is shown allowing the choice of which icon  <br>    resource to extract. <br>Close: Closes the current icon resource child window. If the image has been <br>    modified, a dialog box will be shown asking whether to save changes. <br>Save ICO File: Saves the current icon resource to its ICO file. <br>Save As ICO File: Saves the current icon resource to a newly named ICO file. <br>Exit: Terminates IconPro. <br> <br>Edit Menu <br>--------- <br> <br>Copy: Causes the XOR mask of the current icon resource's current image to be <br>    placed on the clipboard in CF_DIB format. <br>Paste: Takes the CF_DIB format image from the clipboard and uses it to <br>    replace the XOR mask of the current icon resource's current image. If <br>    the clipboard image is larger than the current icon image, only the  <br>    corner of the image is used. If the clipboard image is smaller than the  <br>    current icon image, some of the resultant icon image may be black or  <br>   undefined. <br>Stretch Paste: Takes the CF_DIB format image from the clipboard and uses it <br>    to replace the XOR mask of the current icon resource's current image, <br>    stretching it to fit the dimensions of the icon image. <br>Import BMP: Reads a BMP file and uses it to replace the XOR mask of the <br>    current icon resource's current image. If the BMP bitmap is larger than <br>    the current icon image, only the corner of the image is used. If the BMP <br>    bitmap is smaller than the current icon image, some of the resultant  <br>    icon image may be black or undefined. <br>Stretch Import BMP: Reads a BMP file and uses it to replace the XOR mask of  <br>    the current icon resource's current image, stretching it to fit the  <br>    dimensions of the icon image. <br>Export BMP: Causes the XOR mask of the current icon resource's current <br>    image to be written to a newly named BMP file. <br>Add Format: Launches a dialog box that allows the creation of a new icon  <br>    image in the current icon resource. Slider controls are provided to  <br>    allow the Width, Height, and Color Depth to be chosen. Valid ranges for  <br>    these values are: <br>        Width: Min 16, Max 128 <br>        Height: Min 16, Max 128 <br>        Color Depth: Min 1bpp, Max 32bpp <br>    Two images with identical Width, Height and Color Depth are not allowed <br>    in the same icon resource. <br>Remove Format: Removes the current icon image from the current icon  <br>    resource. <br> <br>Window Menu <br>----------- <br> <br>Arrange Icons: Arranges the MDI child icons. <br>Cascade: Arranges the MDI child windows in a cascade effect. <br>Tile Horizontal: Horizontally tiles the MDI child windows. <br>Tile Vertical: Vertically tiles the MDI child windows. <br>Contents: Launches help for IconPro. <br>About: Displays the About box. <br> <br>Icons <br>----- <br> <br>Icon images are stored in ICO files and as resources in EXEs and DLLs in  <br>near DIB format - a BITMAPINFO followed by XOR bits followed by AND bits. A  <br>block of memory like this can be passed to CreateIconFromResourceEx to  <br>create a HICON from the resource. This API expects the bmiHeader.biHeight  <br>member of the BITMAPINFO to be the sum of the heights of the XOR and AND  <br>masks. Further, this API is not implemented on NT at this time, so  <br>CreateIconFromResource must be used instead. <br> <br>When creating the AND mask for an icon (or any transparent BitBlt), a simple <br>method is to BitBlt from the source image to a mono bitmap and let GDI do  <br>the conversions based on SetBkColor. This will not work with DIBSections.  <br>Any BitBlt'ing with DIBSections results in color mapping without regard to  <br>the background color. <br> <br>DIBSections can not be used in the ICONINFO structure passed to <br>CreateIconIndirect. DDBs must be used there. <br> <br>Currently, during the icon selection process in Windows 95, all bit  <br>depths &gt;= 8 are treated as equal. Therefore, it is pointless to have both <br>a 24bpp and an 8bpp image in the same ICO file. When running in any video <br>mode of at least 8bpp, Windows will simply choose the first one. Further, <br>in 8bpp mode, icons are always displayed using the system palette. <br> <br>ICO File Format <br>--------------- <br> <br>Icons are normally stored in ICO files. The ICO file format is documented in <br>the Windows 3.1 SDK Programmer's Reference, Volume 4: Resources, Chapter 1:  <br>Graphics File Formats. <br> <br>The ICO file starts with an ICONDIR structure. The ICONDIR structure is  <br>defined as: <br> <br>typedef struct  <br>{ <br>    WORD           idReserved;   // Reserved <br>    WORD           idType;       // resource type (1 for icons) <br>    WORD           idCount;      // how many images? <br>    ICONDIRENTRY   idEntries[1]; // entries for each image (idCount of 'em) <br>} ICONDIR, *LPICONDIR; <br> <br> <br>The ICONDIRENTRY structure is defined as: <br> <br>typedef struct <br>{ <br>    BYTE        bWidth;          // Width of the image <br>    BYTE        bHeight;         // Height of the image (times 2) <br>    BYTE        bColorCount;     // Number of colors in image (0 if &gt;=8bpp) <br>    BYTE        bReserved;       // Reserved <br>    WORD        wPlanes;         // Color Planes <br>    WORD        wBitCount;       // Bits per pixel <br>    DWORD       dwBytesInRes;    // how many bytes in this resource? <br>    DWORD       dwImageOffset;   // where in the file is this image <br>} ICONDIRENTRY, *LPICONDIRENTRY; <br> <br> <br>So, the file consists of the header followed by the bits for each image. The <br>bits for each image can be located by seeking to dwImageOffset in the file.  <br>The format of the bits follows: <br> <br>  The bits for each image are stored in something similar to CF_DIB format.  <br>  First is a BITMAPINFO structure, followed by the DIB bits of the XOR mask, <br>  followed by the DIB bits of the AND mask.  <br> <br>  Note the following two caveats: <br>  1) The bmiHeader.biHeight member of the BITMAPINFO structure indicates <br>     the height of the XOR mask plus the height of the AND mask. <br>  2) The AND mask is monochrome, and has no BITMAPINFO. <br>  <br>Notes <br>----- <br> <br>IconPro is an MDI application. Each child window stores a pointer to a <br>structure in its GWL_USERDATA location. This structure contains information <br>such as the handle to the listbox, the locations of various graphical  <br>elements in the client area, and a pointer to the icon resource data. <br> <br>The icon resource data is stored in a structure that contains normal <br>information like the number of images and info for each of those images. The <br>info for each image includes its width/height/bpp as well as the DIB format <br>memory blocks for the XOR and AND masks. <br> <br>In the MDI child window, the icon is displayed using DrawIconEx() once over  <br>a black background and once over a white background. The XOR and AND masks  <br>are also displayed using standard DIB functions. <br> <br>Holding the 'Control' key and left-clicking on the XOR mask will make the <br>program calculate new masks, using the pixel color at the mouse location as <br>the transparent color. This is implemented using the following slow, but  <br>effective method: <br> <br>    Loop through all the pixels in the source <br>    If a given pixel matches the transparent color (use GetPixel) <br>then clear the bit in the XOR mask and set the bit in the AND mask <br>    else <br>        clear the bit in the AND mask </code></pre>
<p>&nbsp;</p></body>
</HTML>

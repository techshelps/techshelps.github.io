<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICONPRO.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6440"></a>ICONPRO.C</h2>
<pre><code>/****************************************************************************\ <br>*             <br>*     FILE:     ICONPRO.C <br>* <br>*     PURPOSE:  IconPro Project main C file <br>* <br>*     COMMENTS: This file contains the main window and instance handing <br>*               for this project. <br>* <br>*     FUNCTIONS: <br>*      EXPORTS:  <br>*               GetSaveIconFileName     - Get the name of the file to write <br>*               GetOpenIconFileName     - Get the name of a file to open <br>*      LOCALS: <br>*               WinMain                 - Program entry point <br>*               InitApplication         - Register classes <br>*               InitInstance            - Create windows <br>*               WndProc                 - Main Window's 'Window Procedure' <br>*               OnCommand               - Handle command messages (menu items) <br>*               AboutDlgProc            - About Dialog Box's 'Window Procedure' <br>*               CreateNewMDIChildWindow - Creates a new child MDI window <br>*               UpdateMenuState         - Grays/enables appropriate menu items <br>*               QueryCloseAllChildren   - Close all children if possible <br>* <br>*     Copyright 1995 - 1998 Microsoft Corp. <br>* <br>* <br>* History: <br>*                July '95 - Created <br>* <br>\****************************************************************************/ <br>#include &lt;Windows.H&gt; <br>#include "Resource.h" <br>#include "Icons.H" <br>#include "IconPro.h" <br>#include "MDIChild.h" <br> <br>/****************************************************************************/ <br>/* Local Function Prototypes */ <br>int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdLine, int nCmdShow); <br>BOOL InitApplication( HANDLE hInstance ); <br>BOOL InitInstance( HANDLE hInstance, int nCmdShow ); <br>LRESULT CALLBACK WndProc( HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam ); <br>LRESULT OnCommand( HWND hWnd, WPARAM wParam, LPARAM lParam ); <br>BOOL CALLBACK AboutDlgProc( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam ); <br>HWND CreateNewMDIChildWindow( LPSTR szTitle, LPVOID lpData ); <br>BOOL UpdateMenuState( HWND hWnd, HMENU hMenu ); <br>BOOL QueryCloseAllChildren( void ); <br>/****************************************************************************/ <br> <br> <br>/****************************************************************************/ <br>/* Global Variables */ <br>HINSTANCEhInst; <br>HWND        hWndMain, hMDIClientWnd; <br>char        szAppName[] = TEXT("IconPro"); <br>char        szTitle[] = TEXT("IconPro Icon Handler"); <br>char        szChildClassName[] = TEXT("IconChildClass"); <br>char        szHelpFileName[] = "IconPro.HLP"; <br>/****************************************************************************/ <br> <br> <br>/**************************************************************************** <br>* <br>*     FUNCTION: WinMain <br>* <br>*     PURPOSE:  Main entry point for this app <br>* <br>*     PARAMS:   HANDLE hInstance     - This instance <br>*               HANDLE hPrevInstance - Previous instance <br>*               LPSTR  lpszCmdLine   - Command Line <br>*               int    nCmdShow      - Desired window status <br>* <br>*     RETURNS:  int - return code <br>* <br>* History: <br>*                July '95 - Created <br>* <br>\****************************************************************************/ <br>int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdLine, int nCmdShow) <br>{ <br>    MSG msg; <br> <br>    // standard init stuff <br>    if( ! hPrevInstance ) <br>    { <br>        if( ! InitApplication( hInstance ) ) <br>        { <br>            return FALSE; <br>        } <br>    } <br>    if( ! InitInstance( hInstance, nCmdShow ) ) <br>    { <br>        return FALSE; <br>    } <br> <br>    // Standard message loop <br>    while (GetMessage(&amp;msg, (HWND) NULL, 0, 0))  <br>    { <br>        if( !TranslateMDISysAccel(hMDIClientWnd, &amp;msg) ) <br>        { <br>            TranslateMessage(&amp;msg); <br>            DispatchMessage(&amp;msg); <br>        } <br>    } <br>    return msg.wParam; <br>} <br>/* End WinMain() ************************************************************/ <br> <br> <br> <br>/**************************************************************************** <br>* <br>*     FUNCTION: InitApplication <br>* <br>*     PURPOSE:  Register classes <br>* <br>*     PARAMS:   HANDLE hInstance     - This instance <br>* <br>*     RETURNS:  BOOL - TRUE for success, FALSE for failure <br>* <br>* History: <br>*                July '95 - Created <br>* <br>\****************************************************************************/ <br>BOOL InitApplication( HANDLE hInstance ) <br>{ <br>    WNDCLASS    wc; <br>    BOOL        bResult; <br> <br>    wc.style         = 0; <br>    wc.lpfnWndProc   = (WNDPROC)WndProc; <br>    wc.cbClsExtra    = 0; <br>    wc.cbWndExtra    = 0; <br>    wc.hInstance     = hInstance; <br>    wc.hIcon         = LoadIcon( hInstance, MAKEINTRESOURCE(ICONPRO_ICON) ); <br>    wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground = NULL; <br>    wc.lpszMenuName  = MAKEINTRESOURCE(ICONPRO_MENU); <br>    wc.lpszClassName = szAppName; <br> <br>    bResult = RegisterClass( &amp;wc ); <br> <br>    wc.lpfnWndProc   = (WNDPROC)IconChildWndProc; <br>    wc.cbClsExtra    = 0; <br>    wc.cbWndExtra    = 0; <br>    wc.hInstance     = hInstance; <br>    wc.hIcon         = LoadIcon( hInstance, MAKEINTRESOURCE(ICONPRO_ICON) ); <br>    wc.hCursor       = LoadCursor(NULL, IDC_ARROW); <br>    wc.hbrBackground = CreateSolidBrush(COLOR_3DFACE); <br>    wc.lpszMenuName  = NULL; <br>    wc.lpszClassName = szChildClassName; <br> <br>    return( bResult &amp;&amp; RegisterClass( &amp;wc ) ); <br>} <br>/* End InitApplication() ***************************************************/ <br> <br> <br> <br>/**************************************************************************** <br>* <br>*     FUNCTION: InitInstance <br>* <br>*     PURPOSE:  Create and show the main window <br>* <br>*     PARAMS:   HANDLE hInstance  - This instance <br>*               int    nCmdShow   - desired show state <br>* <br>*     RETURNS:  BOOL - TRUE for success, FALSE for failure <br>* <br>* History: <br>*                July '95 - Created <br>* <br>\****************************************************************************/ <br>BOOL InitInstance( HANDLE hInstance, int nCmdShow ) <br>{ <br>    hInst = hInstance; <br>    hWndMain = CreateWindow( <br>        szAppName, <br>        szTitle, <br>        WS_OVERLAPPEDWINDOW, <br>        CW_USEDEFAULT, 0, <br>        CW_USEDEFAULT, 0, <br>        NULL, <br>        NULL, <br>        hInstance, <br>        NULL ); <br> <br>    if( hWndMain == NULL ) <br>    { <br>        return FALSE; <br>    } <br> <br>    ShowWindow( hWndMain, nCmdShow ); <br>    UpdateWindow( hWndMain ); <br> <br>    return TRUE; <br>} <br>/* End InitInstance() *****************************************************/ <br> <br> <br> <br>/**************************************************************************** <br>* <br>*     FUNCTION: WndProc <br>* <br>*     PURPOSE:  Window Procedure for the main window. <br>* <br>*     PARAMS:   HWND   hWnd    - This window <br>*               UINT   Message - Which message? <br>*               WPARAM wParam  - message parameter <br>*               LPARAM lParam  - message parameter <br>* <br>*     RETURNS:  LRESULT - depends on message <br>* <br>* History: <br>*                July '95 - Created <br>* <br>\****************************************************************************/ <br>LRESULT CALLBACK WndProc( HWND hWnd, UINT Message, WPARAM wParam, LPARAM lParam ) <br>{ <br>    // which message are we handling? <br>    switch( Message ) <br>    { <br>        // Menu is coming up, initialize it <br>        case WM_INITMENU: <br>            UpdateMenuState( hWnd, (HMENU)wParam ); <br>            return 1; <br>        break; // end WM_INITMENU <br> <br>        // Window is being created, create the MDI client also <br>        case WM_CREATE: <br>        { <br>            CLIENTCREATESTRUCT ccs; <br> <br>            // Retrieve the handle of the Window menu and assign the <br>            // first child window identifier. <br>            ccs.hWindowMenu = GetSubMenu(GetMenu(hWnd), 2 ); <br>            ccs.idFirstChild = IDM_WINDOWCHILD; <br> <br>            // Create the MDI client window <br>            hMDIClientWnd = CreateWindow(TEXT("MDICLIENT"), (LPCTSTR) NULL, <br>                                            WS_CHILD | WS_CLIPCHILDREN | WS_VSCROLL | WS_HSCROLL, <br>                                            0, 0, 0, 0, hWnd, (HMENU) 0xCAC, hInst, (LPSTR) &amp;ccs ); <br> <br>            ShowWindow(hMDIClientWnd, SW_SHOW); <br>        } <br>        break; // End WM_CREATE <br> <br>        // Command Messages (menu items, etc) <br>        case WM_COMMAND: <br>            OnCommand( hWnd, wParam, lParam ); <br>            return DefFrameProc( hWnd, hMDIClientWnd, Message, wParam, lParam ); <br>        break; // End WM_COMMAND <br> <br>        // Time to close down now :( <br>        case WM_CLOSE: <br>        { <br>            // Will the children allow it? (Give 'em a chance to cancel) <br>            if( QueryCloseAllChildren() ) <br>            { <br>                WinHelp( hWnd, szHelpFileName, HELP_QUIT, 0 ); <br>                DestroyWindow( hWnd ); <br>                PostQuitMessage( 0 ); <br>                return DefFrameProc( hWnd, hMDIClientWnd, Message, wParam, lParam ); <br>            } <br>            return 0; <br>        } <br>        break; // End WM_CLOSE <br> <br>        // Pass it on to the default window procedure <br>        default: <br>            return DefFrameProc( hWnd, hMDIClientWnd, Message, wParam, lParam ); <br>        break; // end default <br>    } <br>    return DefFrameProc( hWnd, hMDIClientWnd, Message, wParam, lParam ); <br>} <br>/* End WndProc() ***********************************************************/ <br> <br> <br> <br>/**************************************************************************** <br>* <br>*     FUNCTION: OnCommand <br>* <br>*     PURPOSE:  Handles command messages for main window <br>* <br>*     PARAMS:   HWND   hWnd    - This window <br>*               WPARAM wParam  - message parameter <br>*               LPARAM lParam  - message parameter <br>* <br>*     RETURNS:  LRESULT - depends on message <br>* <br>* History: <br>*                July '95 - Created <br>* <br>\****************************************************************************/ <br>LRESULT OnCommand( HWND hWnd, WPARAM wParam, LPARAM lParam ) <br>{ <br>    // Which command is it? <br>    switch( LOWORD( wParam ) ) <br>    { <br>        // File-&gt;New menu option - spawn a new child <br>        case ID_FILE_NEW: <br>        { <br>            HWND    hWndNew; <br> <br>            hWndNew = CreateNewMDIChildWindow( TEXT("Untitled"), NULL ); <br>            SendMessage( hMDIClientWnd, WM_MDIACTIVATE, (WPARAM)hWndNew, 0 ); <br>        } <br>        break; // End ID_FILE_NEW <br> <br>        // File-&gt;Open menu option - open an ICO file <br>        case ID_FILE_OPEN: <br>        { <br>            HWND            hWndNew; <br>            LPICONRESOURCElpIR; <br>            TCHAR        szFileName[MAX_PATH]; <br>            TCHAR        szFileTitle[MAX_PATH]; <br> <br>            // Get the name of the file to open <br>            if( GetOpenIconFileName( szFileName, IDS_FILTERSTRING, "Open Icon File" ) ) <br>            { <br>                // Read in the icon data <br>                if( (lpIR = ReadIconFromICOFile( szFileName )) == NULL ) <br>                    break; <br>                // Get the name of the file for the window title <br>                if( GetFileTitle( szFileName, szFileTitle, MAX_PATH ) ) <br>                    break; <br>                // Make a new child to handle this icon <br>                hWndNew = CreateNewMDIChildWindow( szFileTitle, lpIR ); <br>                SendMessage( hMDIClientWnd, WM_MDIACTIVATE, (WPARAM)hWndNew, 0 ); <br>            } <br>        } <br>        break; // End ID_FILE_OPEN <br> <br>        // File-&gt;Extract menu option - extract icon data from a DLL or EXE <br>        case ID_FILE_EXTRACT: <br>        { <br>            HWND            hWndNew; <br>            LPICONRESOURCElpIR; <br>            TCHAR        szFileName[MAX_PATH]; <br> <br>            // Get the name of the file from which to extract the icon <br>            if( GetOpenIconFileName( szFileName, IDS_EXEFILTERSTRING, "Extract Icon from File" ) ) <br>            { <br>                // Extract the icon data <br>                if( (lpIR = ReadIconFromEXEFile( szFileName )) == NULL ) <br>                    break; <br>                // Make a new child to handle this icon <br>                hWndNew = CreateNewMDIChildWindow( ("Untitled"), lpIR ); <br>                SendMessage( hMDIClientWnd, WM_MDIACTIVATE, (WPARAM)hWndNew, 0 ); <br>            } <br>        } <br>        break; // End ID_FILE_EXTRACT <br> <br>        // File-&gt;Save and File-&gt;SaveAs menu options - save current ICO file to disk <br>        case ID_FILE_SAVEAS: <br>        case ID_FILE_SAVE: <br>        { <br>            HWND    hWndActive; <br>             <br>            // Get the active MDI child window <br>            if( (hWndActive = (HWND)SendMessage( hMDIClientWnd, WM_MDIGETACTIVE, 0, 0 )) != NULL ) <br>            { <br>                // Tell it to write its icon to disk <br>                SendMessage( hWndActive, WM_COMMAND, wParam, 0 ); <br>            } <br>            else <br>                MessageBox( hWnd, TEXT("Error Getting Active Window"), TEXT("Error"), MB_OK ); <br>        } <br>        break; // End ID_FILE_SAVE/ID_FILE_SAVEAS <br> <br>        // File-&gt;Close menu option - close the current MDI child window <br>        case ID_FILE_CLOSE: <br>        { <br>            HWND    hWndActive; <br> <br>            // Get the active MDI child window and tell it to close itself <br>            if( (hWndActive = (HWND)SendMessage( hMDIClientWnd, WM_MDIGETACTIVE, 0, 0)) != NULL ) <br>                SendMessage( hWndActive, WM_CLOSE, 0, lParam ); <br>        } <br>        break; // End ID_FILE_CLOSE <br> <br>        // File-&gt;Exit menu option - shut 'er down <br>        case ID_F_EXIT: <br>            // Just send a WM_CLOSE - code there will handle it <br>            PostMessage( hWnd, WM_CLOSE, (WPARAM)0, (LPARAM)0 ); <br>        break; // End ID_F_EXIT <br> <br>        // Edit-&gt;Import BMP and Edit-&gt;Stretch-Import BMP - convert BMP file to icon <br>        // Edit-&gt;Copy, Edit-&gt;Paste, Edit-&gt;StretchPaste, Edit-&gt;AddFormat, Edit-&gt;RemoveFormat <br>        // menu options. Just pass 'em on to the currently active MDI child window <br>        case ID_EDIT_EXPORTBMP: <br>        case ID_EDIT_IMPORTBMP: <br>        case ID_EDIT_STRETCHIMPORTBMP: <br>        case ID_EDIT_COPY: <br>        case ID_EDIT_PASTE: <br>        case ID_EDIT_STRETCHPASTE: <br>        case ID_EDIT_ADDFORMAT: <br>        case ID_EDIT_REMOVEFORMAT: <br>        { <br>            HWND    hWndActive; <br>             <br>            // Get active MDI child <br>            if( (hWndActive = (HWND)SendMessage( hMDIClientWnd, WM_MDIGETACTIVE, 0, 0 )) != NULL ) <br>            { <br>                // Pass the message along <br>                SendMessage( hWndActive, WM_COMMAND, wParam, 0 ); <br>            } <br>        } <br>        break; // End ID_EDIT_XXXX <br> <br>        // Window-&gt;ArrangeIcons menu option <br>        case ID_WINDOW_ARRANGEICONS: <br>            // Ask the MDIClient to do it <br>            SendMessage( hMDIClientWnd, WM_MDIICONARRANGE, 0, 0); <br>        break; // End ID_WINDOW_ARRANGEICONS <br> <br>        // Window-&gt;Cascade menu option <br>        case ID_WINDOW_CASCADE: <br>            // Ask the MDIClient to do it <br>            SendMessage( hMDIClientWnd, WM_MDICASCADE, 0, 0); <br>        break; // End ID_WINDOW_CASCADE <br> <br>        // Window-&gt;Tile menu option <br>        case ID_WINDOW_TILE: <br>            // Ask the MDIClient to do it <br>            SendMessage( hMDIClientWnd, WM_MDITILE, (WPARAM)MDITILE_HORIZONTAL, 0); <br>        break; // End ID_WINDOW_TILE <br> <br>        // Window-&gt;TileVertical menu option <br>        case ID_WINDOW_TILEVERTICAL: <br>            // Ask the MDIClient to do it <br>            SendMessage( hMDIClientWnd, WM_MDITILE, (WPARAM)MDITILE_VERTICAL, 0); <br>        break; // End ID_WINDOW_TILEVERTICAL <br>         <br>        // Help-&gt;About menu option <br>        case ID_HELP_ABOUT: <br>            // Launch the About Dialog <br>            DialogBox( hInst, MAKEINTRESOURCE(ICONPRO_ABOUT_DLG), hWnd, AboutDlgProc ); <br>        break; <br> <br>        case ID_HELP_CONTENTS: <br>                WinHelp( hWnd, szHelpFileName, HELP_CONTENTS, 0 ); <br>        break; <br>    } <br>    return 0l; <br>} <br>/* End OnCommand() *********************************************************/ <br> <br> <br> <br>/**************************************************************************** <br>* <br>*     FUNCTION: AboutDlgProc <br>* <br>*     PURPOSE:  Handles messages for About Dialog <br>* <br>*     PARAMS:   HWND   hWnd    - This window <br>*               UINT   Msg     - Which message? <br>*               WPARAM wParam  - message parameter <br>*               LPARAM lParam  - message parameter <br>* <br>*     RETURNS:  BOOL - depends on message <br>* <br>* History: <br>*                July '95 - Created <br>* <br>\****************************************************************************/ <br>BOOL CALLBACK AboutDlgProc( HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam ) <br>{ <br>    switch( Msg ) <br>    { <br>        case WM_INITDIALOG: <br>        break; <br> <br>        case WM_CLOSE: <br>            PostMessage( hWnd, WM_COMMAND, IDCANCEL, 0l ); <br>        break; <br> <br>        case WM_COMMAND: <br>            switch( LOWORD(wParam) ) <br>            { <br>                case IDOK: <br>                    EndDialog( hWnd, TRUE ); <br>                break; <br> <br>                case IDCANCEL: <br>                    EndDialog( hWnd, FALSE ); <br>                break; <br> <br>            } <br>        break; <br>        default: <br>            return FALSE; <br>        break; <br>    } <br>    return TRUE; <br>} <br>/* End AboutDlgProc() ******************************************************/ <br> <br> <br> <br>/**************************************************************************** <br>* <br>*     FUNCTION: CreateNewMDIChildWindow <br>* <br>*     PURPOSE:  Creates and shows a new MDI child window <br>* <br>*     PARAMS:   LPSTR  szTitle - The title for the new window <br>*               LPVOID lpData  - Data to attach to the window (icon info) <br>* <br>*     RETURNS:  HWND - Handle to the new MDI child window <br>* <br>* History: <br>*                July '95 - Created <br>* <br>\****************************************************************************/ <br>HWND CreateNewMDIChildWindow( LPTSTR szTitle, LPVOID lpData ) <br>{ <br>    HWND    hReturnWnd; <br> <br>    // Create the MDI child window <br>    hReturnWnd = CreateMDIWindow( szChildClassName, szTitle, 0, <br>                    CW_USEDEFAULT, CW_USEDEFAULT, WINDOW_WIDTH, WINDOW_HEIGHT, <br>                    hMDIClientWnd, hInst, (LPARAM)lpData ); <br>    // Show it <br>    ShowWindow( hReturnWnd, SW_SHOW ); <br>    return hReturnWnd; <br>} <br>/* End CreateNewMDIChildWindow() ********************************************/ <br> <br> <br> <br>/**************************************************************************** <br>* <br>*     FUNCTION: GetOpenIconFileName <br>* <br>*     PURPOSE:  Prompts user for the filename for opening <br>* <br>*     PARAMS:   LPSTR   szFileName     - Buffer to receive name of file <br>*               UINT    FilterStringID - ID of filter string <br>*               LPCTSTR szTitle        - Title for the Dialog <br>* <br>*     RETURNS:  BOOL - TRUE for success, FALSE for failure <br>* <br>* History: <br>*                July '95 - Created <br>* <br>\****************************************************************************/ <br>BOOL GetOpenIconFileName( LPTSTR szFileName, UINT FilterStringID, LPCTSTR szTitle ) <br>{ <br>    OPENFILENAME    ofn; <br>    UINT            i, cbString; <br>    TCHAR        chReplace; <br>    TCHAR        szFilter[256]; <br> <br>    // Get the filter string <br>    if ((cbString = LoadString( hInst, FilterStringID, szFilter, sizeof(szFilter))) == 0 )  <br>        return FALSE; <br>    // Replace the wildcard with NULL <br>    chReplace = szFilter[cbString - 1]; /* retrieve wildcard */ <br>    for (i = 0; szFilter[i] != '\0'; i++)  <br>    { <br>        if (szFilter[i] == chReplace) <br>            szFilter[i] = '\0'; <br>    } <br> <br>    // Fill out the OPENFILENAME struct <br>    ZeroMemory( &amp;ofn, sizeof( OPENFILENAME ) ); <br>    ofn.lStructSize = sizeof( OPENFILENAME ); <br>    ofn.hwndOwner = hWndMain; <br>    ofn.hInstance = hInst; <br>    lstrcpy( szFileName, TEXT("") ); <br>    ofn.lpstrFile = szFileName; <br>    ofn.nMaxFile = MAX_PATH; <br>    ofn.Flags = OFN_FILEMUSTEXIST; <br>    ofn.lpstrFilter = szFilter; <br>    ofn.lpstrTitle = szTitle; <br> <br>    // Use the common dialog <br>    return GetOpenFileName( &amp;ofn ); <br>} <br>/* End GetOpenIconFileName() ***********************************************/ <br> <br> <br> <br>/**************************************************************************** <br>* <br>*     FUNCTION: GetSaveIconFileName <br>* <br>*     PURPOSE:  Prompts user for the filename for saving <br>* <br>*     PARAMS:   LPSTR   szFileName     - Buffer to receive name of file <br>*               UINT    FilterStringID - ID of filter string <br>*               LPCTSTR szTitle        - Title for the Dialog <br>* <br>*     RETURNS:  BOOL - TRUE for success, FALSE for failure <br>* <br>* History: <br>*                July '95 - Created <br>* <br>\****************************************************************************/ <br>BOOL GetSaveIconFileName( LPTSTR szFileName, UINT FilterStringID, LPCTSTR szTitle ) <br>{ <br>    OPENFILENAME    ofn; <br>    UINT            i, cbString; <br>    TCHAR        chReplace; <br>    TCHAR        szFilter[256]; <br> <br>    // Get the filter string <br>    if ((cbString = LoadString( hInst, FilterStringID, szFilter, sizeof(szFilter))) == 0 )  <br>        return FALSE; <br>    // Replace the wildcard with NULL <br>    chReplace = szFilter[cbString - 1]; /* retrieve wildcard */ <br>    for (i = 0; szFilter[i] != '\0'; i++)  <br>    { <br>        if (szFilter[i] == chReplace) <br>            szFilter[i] = '\0'; <br>    } <br> <br>    // Fill out the OPENFILENAME struct <br>    ZeroMemory( &amp;ofn, sizeof( OPENFILENAME ) ); <br>    ofn.lStructSize = sizeof( OPENFILENAME ); <br>    ofn.hwndOwner = hWndMain; <br>    ofn.hInstance = hInst; <br>    lstrcpy( szFileName, TEXT("") ); <br>    ofn.lpstrFile = szFileName; <br>    ofn.nMaxFile = MAX_PATH; <br>    ofn.Flags = OFN_OVERWRITEPROMPT; <br>    ofn.lpstrFilter = szFilter; <br>    ofn.lpstrDefExt = TEXT("ICO"); <br>    ofn.lpstrTitle = szTitle; <br> <br>    // Use the common dialog <br>    return GetSaveFileName( &amp;ofn ); <br>} <br>/* End GetSaveIconFileName() ***********************************************/ <br> <br> <br> <br>/**************************************************************************** <br>* <br>*     FUNCTION: UpdateMenuState <br>* <br>*     PURPOSE:  Updates states of menu items (called on menu activation) <br>* <br>*     PARAMS:   HWND  hWnd  - Handle to the window <br>*               HMENU hMenu - Handle to the menu <br>* <br>*     RETURNS:  BOOL - TRUE for success, FALSE for failure <br>* <br>* History: <br>*                July '95 - Created <br>* <br>\****************************************************************************/ <br>BOOL UpdateMenuState( HWND hWnd, HMENU hMenu ) <br>{ <br>    UINT    nEnableFlag, nNumFormats; <br>    HWND    hWndActive; <br> <br>    // Get a handle to the active MDI child window <br>    hWndActive=(HWND)SendMessage( hMDIClientWnd, WM_MDIGETACTIVE, 0, 0 ); <br>    // Find out how many icon image formats it holds <br>    nNumFormats = SendMessage( hWndActive, WM_COMMAND, ID_GETNUMFORMATS, 0 ); <br>    // Do we actually have an active window? <br>    if( hWndActive == NULL ) <br>    { <br>        // No active MDI child... <br>        EnableMenuItem( hMenu, ID_FILE_NEW, MF_BYCOMMAND | MF_ENABLED ); <br>        EnableMenuItem( hMenu, ID_FILE_OPEN, MF_BYCOMMAND | MF_ENABLED ); <br>        EnableMenuItem( hMenu, ID_FILE_EXTRACT, MF_BYCOMMAND | MF_ENABLED ); <br>        EnableMenuItem( hMenu, ID_FILE_CLOSE, MF_BYCOMMAND | MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_FILE_SAVE, MF_BYCOMMAND | MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_FILE_SAVEAS, MF_BYCOMMAND | MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_F_EXIT, MF_BYCOMMAND | MF_ENABLED ); <br>        EnableMenuItem( hMenu, ID_EDIT_COPY, MF_BYCOMMAND| MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_EDIT_PASTE, MF_BYCOMMAND | MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_EDIT_STRETCHPASTE, MF_BYCOMMAND | MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_EDIT_ADDFORMAT, MF_BYCOMMAND | MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_EDIT_IMPORTBMP, MF_BYCOMMAND | MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_EDIT_STRETCHIMPORTBMP, MF_BYCOMMAND | MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_EDIT_EXPORTBMP, MF_BYCOMMAND | MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_EDIT_REMOVEFORMAT, MF_BYCOMMAND | MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_WINDOW_ARRANGEICONS, MF_BYCOMMAND | MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_WINDOW_CASCADE, MF_BYCOMMAND | MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_WINDOW_TILE, MF_BYCOMMAND | MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_WINDOW_TILEVERTICAL, MF_BYCOMMAND | MF_GRAYED ); <br>    } <br>    else <br>    { <br>        // We have an active MDI child... <br>        EnableMenuItem( hMenu, ID_FILE_NEW, MF_BYCOMMAND | MF_ENABLED ); <br>        EnableMenuItem( hMenu, ID_FILE_OPEN, MF_BYCOMMAND | MF_ENABLED ); <br>        EnableMenuItem( hMenu, ID_FILE_EXTRACT, MF_BYCOMMAND | MF_ENABLED ); <br>        EnableMenuItem( hMenu, ID_FILE_CLOSE, MF_BYCOMMAND | MF_ENABLED ); <br>        nEnableFlag = (BOOL)SendMessage( hWndActive, WM_COMMAND, ID_HASFILECHANGED, 0 ) ? MF_ENABLED : MF_GRAYED; <br>        EnableMenuItem( hMenu, ID_FILE_SAVE, MF_BYCOMMAND | nEnableFlag ); <br>        EnableMenuItem( hMenu, ID_FILE_SAVEAS, MF_BYCOMMAND | MF_ENABLED ); <br>        EnableMenuItem( hMenu, ID_F_EXIT, MF_BYCOMMAND | MF_ENABLED ); <br>        EnableMenuItem( hMenu, ID_EDIT_COPY, MF_BYCOMMAND | (nNumFormats&gt;0)?MF_ENABLED:MF_GRAYED ); <br>        if( IsClipboardFormatAvailable( CF_DIB ) ) <br>        { <br>            EnableMenuItem( hMenu, ID_EDIT_PASTE, MF_BYCOMMAND | (nNumFormats&gt;0)?MF_ENABLED:MF_GRAYED ); <br>            EnableMenuItem( hMenu, ID_EDIT_STRETCHPASTE, MF_BYCOMMAND | (nNumFormats&gt;0)?MF_ENABLED:MF_GRAYED ); <br>        } <br>        else <br>        { <br>            EnableMenuItem( hMenu, ID_EDIT_PASTE, MF_BYCOMMAND | MF_GRAYED ); <br>            EnableMenuItem( hMenu, ID_EDIT_STRETCHPASTE, MF_BYCOMMAND | MF_GRAYED ); <br>        } <br>        EnableMenuItem( hMenu, ID_EDIT_IMPORTBMP, MF_BYCOMMAND | (nNumFormats&gt;0)?MF_ENABLED:MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_EDIT_STRETCHIMPORTBMP, MF_BYCOMMAND | (nNumFormats&gt;0)?MF_ENABLED:MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_EDIT_EXPORTBMP, MF_BYCOMMAND | (nNumFormats&gt;0)?MF_ENABLED:MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_EDIT_ADDFORMAT, MF_BYCOMMAND | MF_ENABLED ); <br>        EnableMenuItem( hMenu, ID_EDIT_REMOVEFORMAT, MF_BYCOMMAND | (nNumFormats&gt;0)?MF_ENABLED:MF_GRAYED ); <br>        EnableMenuItem( hMenu, ID_WINDOW_ARRANGEICONS, MF_BYCOMMAND | MF_ENABLED ); <br>        EnableMenuItem( hMenu, ID_WINDOW_CASCADE, MF_BYCOMMAND | MF_ENABLED ); <br>        EnableMenuItem( hMenu, ID_WINDOW_TILE, MF_BYCOMMAND | MF_ENABLED ); <br>        EnableMenuItem( hMenu, ID_WINDOW_TILEVERTICAL, MF_BYCOMMAND | MF_ENABLED ); <br>    } <br>    return TRUE; <br>} <br>/* End UpdateMenuState() ***************************************************/ <br> <br> <br> <br>/**************************************************************************** <br>* <br>*  FUNCTION   : QueryCloseAllChildren() <br>* <br>*  PURPOSE    : Asks the child windows if it is ok to close up app. Nothing <br>*               is destroyed at this point. The z-order is not changed. <br>* <br>*  PARAMS:     : none <br>* <br>* <br>*  RETURNS    : TRUE - If all children agree to the query. <br>*               FALSE- If any one of them disagrees. <br>* <br>\***************************************************************************/ <br>BOOL QueryCloseAllChildren( void ) <br>{ <br>    register HWND hwndT; <br> <br>    for( hwndT = GetWindow(hMDIClientWnd, GW_CHILD); hwndT; hwndT = GetWindow (hwndT, GW_HWNDNEXT) ) <br>    { <br>        if( GetWindow( hwndT, GW_OWNER ) ) <br>            continue; <br> <br>        if( SendMessage( hwndT, WM_CLOSE, 0, 0L ) ) <br>            return FALSE; <br>    } <br>    return TRUE; <br>} <br>/* End QueryCloseAllChildren() **********************************************/ </code></pre>
<p>&nbsp;</p></body>
</HTML>

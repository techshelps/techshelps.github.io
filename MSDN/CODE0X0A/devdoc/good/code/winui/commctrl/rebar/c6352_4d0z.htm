<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>REBAR.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6353"></a>REBAR.C</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br> <br>   File:          ReBar.c <br>    <br>   Description:   ReBar sample implementation. <br> <br>**************************************************************************/ <br> <br>#define STRICT <br> <br>/************************************************************************** <br>   Include Files <br>**************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;commctrl.h&gt; <br>#include "resource.h" <br> <br>/************************************************************************** <br>   Local Function Prototypes <br>**************************************************************************/ <br> <br>int PASCAL WinMain(HINSTANCE, HINSTANCE, LPSTR, int); <br>BOOL InitApplication(HINSTANCE); <br>BOOL InitInstance(HINSTANCE, int); <br>LRESULT CALLBACK MainWndProc(HWND, UINT, WPARAM, LPARAM); <br>BOOL CALLBACK About(HWND, UINT, WPARAM, LPARAM); <br>HWND BuildRebar(HWND); <br>LRESULT DoNotify(HWND, WPARAM, LPARAM); <br>void MoveRebar(HWND); <br>LRESULT HandleMenuPopup(HMENU); <br>LRESULT HandleCommand(HWND, WPARAM, LPARAM); <br> <br>/************************************************************************** <br>   Global Variables <br>**************************************************************************/ <br> <br>#define ID_REBAR     1000 <br>#define ID_BUTTON    2000 <br>#define ID_COMBOBOX  2001 <br> <br>#define TOP    0x00 <br>#define LEFT   0x01 <br>#define BOTTOM 0x02 <br>#define RIGHT  0x03 <br> <br>HINSTANCE   g_hInst; <br>WORD        g_wSide; <br> <br>/****************************************************************************** <br> <br>   WinMain <br> <br>   Parameters: <br> <br>   Description: <br> <br>   Returns: <br> <br>******************************************************************************/ <br> <br>int PASCAL WinMain(  HINSTANCE hInstance, <br>                     HINSTANCE hPrevInstance, <br>                     LPSTR lpCmdLine, <br>                     int nCmdShow) <br>{ <br>MSG      msg; <br>INITCOMMONCONTROLSEX iccex; <br> <br>iccex.dwSize = sizeof(INITCOMMONCONTROLSEX); <br>iccex.dwICC = ICC_COOL_CLASSES; <br>InitCommonControlsEx(&amp;iccex); <br> <br>if(!hPrevInstance) <br>   if(!InitApplication(hInstance)) <br>      return FALSE; <br> <br>if (!InitInstance(hInstance, nCmdShow)) <br>   return FALSE; <br> <br>while(GetMessage( &amp;msg, NULL, 0x00, 0x00)) <br>   { <br>   TranslateMessage(&amp;msg); <br>   DispatchMessage(&amp;msg); <br>   } <br> <br>return msg.wParam; <br>} <br> <br>/***************************************************************************** <br> <br>   InitApplication <br> <br>   Parameters: <br> <br>   Description: <br>    <br>   Returns: <br> <br>*****************************************************************************/ <br> <br>BOOL InitApplication(HINSTANCE hInstance) <br>{ <br>WNDCLASS  wc; <br> <br>wc.style          = 0; <br>wc.lpfnWndProc    = (WNDPROC)MainWndProc; <br>wc.cbClsExtra     = 0; <br>wc.cbWndExtra     = 0; <br>wc.hInstance      = hInstance; <br>wc.hIcon          = LoadIcon(NULL, IDI_APPLICATION); <br>wc.hCursor        = LoadCursor(NULL, IDC_ARROW); <br>wc.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1); <br>wc.lpszMenuName   = MAKEINTRESOURCE(IDM_GENERICMENU); <br>wc.lpszClassName  = "GenericClass"; <br> <br>return RegisterClass(&amp;wc); <br>} <br> <br>/***************************************************************************** <br> <br>   InitInstance <br> <br>   Parameters: <br> <br>   Description: <br>    <br>   Returns: <br> <br>*****************************************************************************/ <br> <br>BOOL InitInstance(   HINSTANCE hInstance, <br>                     int nCmdShow) <br>{ <br>HWND  hWnd; <br> <br>g_hInst = hInstance; <br> <br>hWnd = CreateWindowEx(  0, <br>                        "GenericClass", <br>                        "Generic Application", <br>                        WS_OVERLAPPEDWINDOW, <br>                        CW_USEDEFAULT, <br>                        CW_USEDEFAULT, <br>                        CW_USEDEFAULT, <br>                        CW_USEDEFAULT, <br>                        NULL, <br>                        NULL, <br>                        hInstance, <br>                        NULL); <br> <br>if (!hWnd) <br>   return FALSE; <br> <br>ShowWindow(hWnd, nCmdShow); <br>UpdateWindow(hWnd); <br> <br>return TRUE; <br> <br>} <br> <br>/***************************************************************************** <br> <br>   MainWndProc <br> <br>   Parameters: <br> <br>   Description: <br>    <br>   Returns: <br> <br>*****************************************************************************/ <br> <br>LRESULT CALLBACK MainWndProc( HWND hWnd, <br>                              UINT uMessage, <br>                              WPARAM wParam, <br>                              LPARAM lParam) <br>{ <br>switch (uMessage) <br>   { <br>   case WM_CREATE: <br>      g_wSide = TOP; <br> <br>      BuildRebar(hWnd); <br>      break; <br> <br>   case WM_NOTIFY: <br>      return DoNotify(hWnd, wParam, lParam); <br>    <br>   case WM_SIZE: <br>      MoveRebar(hWnd); <br>      break; <br> <br>   case WM_DESTROY: <br>      PostQuitMessage(0); <br>      break; <br> <br>   case WM_INITMENUPOPUP: <br>      return HandleMenuPopup((HMENU)wParam); <br>    <br>   case WM_COMMAND: <br>      return HandleCommand(hWnd, wParam, lParam); <br>       <br>   default: <br>      break; <br>   } <br>return DefWindowProc(hWnd, uMessage, wParam, lParam); <br>} <br> <br>/***************************************************************************** <br> <br>   About <br> <br>   Parameters: <br> <br>   Description: <br>    <br>   Returns: <br> <br>*****************************************************************************/ <br> <br>BOOL CALLBACK About( HWND hDlg,  <br>                     UINT uMessage,  <br>                     WPARAM wParam,  <br>                     LPARAM lParam) <br>{ <br>switch (uMessage) <br>   { <br>   case WM_INITDIALOG: <br>      return TRUE; <br>       <br>   case WM_COMMAND: <br>      switch(wParam) <br>         { <br>         case IDOK: <br>            EndDialog(hDlg, IDOK); <br>            return TRUE; <br> <br>         case IDCANCEL: <br>            EndDialog(hDlg, IDCANCEL); <br>            return TRUE; <br>         } <br>      break; <br>    }  <br>     <br>return FALSE; <br>} <br> <br>/***************************************************************************** <br> <br>   BuildRebar <br> <br>*****************************************************************************/ <br> <br>HWND BuildRebar(HWND hwndParent) <br>{ <br>HWND     hwndRebar = NULL; <br>LRESULT  lResult; <br> <br>hwndRebar = CreateWindowEx(   WS_EX_TOOLWINDOW,  <br>                              REBARCLASSNAME,  <br>                              NULL, <br>                              WS_VISIBLE | <br>                                 WS_BORDER |  <br>                                 WS_CHILD |  <br>                                 WS_CLIPCHILDREN |  <br>                                 WS_CLIPSIBLINGS |  <br>                                 RBS_VARHEIGHT |  <br>                                 RBS_BANDBORDERS |  <br>                                 CCS_NODIVIDER |  <br>                                 CCS_NOPARENTALIGN | <br>                                 ((g_wSide &amp; 0x01) ? CCS_VERT : 0) | //g_wSide is odd if this is a vertical bar <br>                                 0, <br>                              0,  <br>                              0,  <br>                              200,  <br>                              100,  <br>                              hwndParent,  <br>                              (HMENU)ID_REBAR,  <br>                              g_hInst,  <br>                              NULL); <br> <br>if(hwndRebar) <br>   { <br>   REBARINFO      rbi; <br>   HIMAGELIST     himlRebar; <br>   HICON          hIcon; <br>   REBARBANDINFO  rbbi; <br>   HWND           hwndChild; <br>   RECT           rc; <br>   TCHAR          szString[64]; <br> <br>   //set up the ReBar <br>   himlRebar = ImageList_Create(32, 32, ILC_COLORDDB | ILC_MASK, 1, 0); <br>   hIcon = LoadIcon(g_hInst, MAKEINTRESOURCE(IDI_ICON1)); <br> <br>   ImageList_AddIcon(himlRebar, hIcon); <br> <br>   rbi.cbSize  = sizeof(rbi); <br>   rbi.fMask   = RBIM_IMAGELIST; <br>   rbi.himl    = himlRebar; <br>   lResult = SendMessage(hwndRebar, RB_SETBARINFO, 0, (LPARAM)&amp;rbi); <br> <br>   //add a band that contains a combobox <br>   hwndChild = CreateWindowEx(   0,  <br>                                 TEXT("combobox"),  <br>                                 NULL, <br>                                 WS_VISIBLE | <br>                                    WS_CHILD |  <br>                                    WS_TABSTOP | <br>                                    WS_VSCROLL | <br>                                    WS_CLIPCHILDREN |  <br>                                    WS_CLIPSIBLINGS |  <br>                                    CBS_AUTOHSCROLL |  <br>                                    CBS_DROPDOWN |  <br>                                    0, <br>                                 0,  <br>                                 0,  <br>                                 100,  <br>                                 200,  <br>                                 hwndRebar,  <br>                                 (HMENU)ID_COMBOBOX,  <br>                                 g_hInst,  <br>                                 NULL); <br> <br>   //add some stuff to the combobox <br>   { <br>   int   i; <br> <br>   SendMessage(hwndChild, WM_SETFONT, (WPARAM)GetStockObject(DEFAULT_GUI_FONT), MAKELPARAM(TRUE, 0)); <br>    <br>   for(i = 0; i &lt; 25; i++) <br>      { <br>      wsprintf(szString, TEXT("Item %d"), i + 1); <br>      SendMessage(hwndChild, CB_ADDSTRING, 0, (LPARAM)szString); <br>      } <br>   } <br>    <br>   GetWindowRect(hwndChild, &amp;rc); <br>    <br>   ZeroMemory(&amp;rbbi, sizeof(rbbi)); <br>   rbbi.cbSize       = sizeof(REBARBANDINFO); <br>   rbbi.fMask        = RBBIM_SIZE |  <br>                        RBBIM_CHILD |  <br>                        RBBIM_CHILDSIZE |  <br>                        RBBIM_ID |  <br>                        RBBIM_STYLE |  <br>                        RBBIM_TEXT | <br>                        RBBIM_BACKGROUND | <br>                        RBBIM_IMAGE | <br>                        0; <br>    <br>   rbbi.cxMinChild   = rc.right - rc.left; <br>   rbbi.cyMinChild   = rc.bottom - rc.top; <br>   rbbi.cx           = 100; <br>   rbbi.fStyle       = RBBS_CHILDEDGE |  <br>                        RBBS_FIXEDBMP | <br>                        RBBS_GRIPPERALWAYS | <br>                        0; <br>   rbbi.wID          = ID_COMBOBOX; <br>   rbbi.hwndChild    = hwndChild; <br>   rbbi.lpText       = TEXT("ComboBox"); <br>   rbbi.cch          = 2; <br>   rbbi.hbmBack      = LoadBitmap(g_hInst, MAKEINTRESOURCE(IDB_BACKGROUND)); <br>   rbbi.iImage       = 0; <br> <br>   lResult = SendMessage(hwndRebar, RB_INSERTBAND, (WPARAM)-1, (LPARAM)(LPREBARBANDINFO)&amp;rbbi); <br> <br>   //add a band that contains a button <br>   hwndChild = CreateWindowEx(   0,  <br>                                 TEXT("button"),  <br>                                 TEXT("Button"), <br>                                 WS_CHILD |  <br>                                    BS_PUSHBUTTON |  <br>                                    0, <br>                                 0,  <br>                                 0,  <br>                                 100,  <br>                                 50,  <br>                                 hwndRebar,  <br>                                 (HMENU)ID_BUTTON,  <br>                                 g_hInst,  <br>                                 NULL); <br>    <br>   GetWindowRect(hwndChild, &amp;rc); <br>    <br>   ZeroMemory(&amp;rbbi, sizeof(rbbi)); <br>   rbbi.cbSize       = sizeof(REBARBANDINFO); <br>   rbbi.fMask        = RBBIM_SIZE |  <br>                        RBBIM_CHILD |  <br>                        RBBIM_CHILDSIZE |  <br>                        RBBIM_ID |  <br>                        RBBIM_STYLE |  <br>                        RBBIM_TEXT | <br>                        RBBIM_BACKGROUND | <br>                        0; <br>   rbbi.cxMinChild   = rc.right - rc.left; <br>   rbbi.cyMinChild   = rc.bottom - rc.top; <br>   rbbi.cx           = 100; <br>   rbbi.fStyle       = RBBS_CHILDEDGE |  <br>                        RBBS_FIXEDBMP | <br>                        RBBS_GRIPPERALWAYS | <br>                        0; <br>   rbbi.wID          = ID_BUTTON; <br>   rbbi.hwndChild    = hwndChild; <br>   rbbi.lpText       = TEXT("Button"); <br>   rbbi.hbmBack      = LoadBitmap(g_hInst, MAKEINTRESOURCE(IDB_BACKGROUND)); <br> <br> <br>   lResult = SendMessage(hwndRebar, RB_INSERTBAND, (WPARAM)-1, (LPARAM)(LPREBARBANDINFO)&amp;rbbi); <br>   } <br> <br>MoveRebar(hwndParent); <br> <br>return hwndRebar; <br>} <br> <br>/***************************************************************************** <br> <br>   DoNotify <br> <br>*****************************************************************************/ <br> <br>LRESULT DoNotify(HWND hWnd, WPARAM wParam, LPARAM lParam) <br>{ <br>LPNMHDR           lpNM = (LPNMHDR)lParam; <br> <br>switch(lpNM-&gt;code) <br>   { <br>   default: <br>      break; <br>   } <br> <br>return FALSE; <br>} <br> <br>/************************************************************************** <br> <br>   MoveRebar() <br>    <br>**************************************************************************/ <br> <br>void MoveRebar(HWND hWnd) <br>{ <br>RECT  rc, <br>      rcRebar; <br>int   x, <br>      y, <br>      cx, <br>      cy; <br> <br>GetClientRect(hWnd, &amp;rc); <br>GetWindowRect(GetDlgItem(hWnd, ID_REBAR), &amp;rcRebar); <br> <br>switch(g_wSide) <br>   { <br>   default: <br>   case TOP: <br>      //align the rebar along the top of the window <br>      x = 0; <br>      y = 0; <br>      cx = rc.right - rc.left; <br>      cy = rc.bottom - rc.top; <br>      break; <br> <br>   case LEFT: <br>      //align the rebar along the left side of the window <br>      x = 0; <br>      y = 0; <br>      cx = rcRebar.right - rcRebar.left; <br>      cy = rc.bottom - rc.top; <br>      break; <br> <br>   case BOTTOM: <br>      //align the rebar along the bottom of the window <br>      x = 0; <br>      y = rc.bottom - (rcRebar.bottom - rcRebar.top); <br>      cx = rc.right - rc.left; <br>      cy = rcRebar.bottom - rcRebar.top; <br>      break; <br> <br>   case RIGHT: <br>      //align the coolbar along the right side of the window <br>      x = rc.right - (rcRebar.right - rcRebar.left); <br>      y = 0; <br>      cx = rcRebar.right - rcRebar.left; <br>      cy = rc.bottom - rc.top; <br>      break; <br>   } <br> <br>MoveWindow( GetDlgItem(hWnd, ID_REBAR),  <br>            x,  <br>            y,  <br>            cx,  <br>            cy,  <br>            TRUE); <br>} <br> <br>/************************************************************************** <br> <br>   HandleMenuPopup() <br>    <br>**************************************************************************/ <br> <br>LRESULT HandleMenuPopup(HMENU hMenu) <br>{ <br>UINT  uSelect; <br> <br>switch(g_wSide) <br>   { <br>   default: <br>   case TOP: <br>      uSelect = IDM_TOP; <br>      break; <br> <br>   case LEFT: <br>      uSelect = IDM_LEFT; <br>      break; <br> <br>   case BOTTOM: <br>      uSelect = IDM_BOTTOM; <br>      break; <br> <br>   case RIGHT: <br>      uSelect = IDM_RIGHT; <br>      break; <br>   } <br> <br>CheckMenuRadioItem(hMenu, IDM_TOP, IDM_BOTTOM, uSelect, MF_BYCOMMAND); <br> <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   HandleCommand() <br>    <br>**************************************************************************/ <br> <br>LRESULT HandleCommand(HWND hWnd, WPARAM wParam, LPARAM lParam) <br>{ <br>switch(GET_WM_COMMAND_ID(wParam, lParam)) <br>   { <br>   case ID_BUTTON: <br>      break; <br> <br>   case ID_COMBOBOX: <br>      break; <br> <br>   case IDM_TOP: <br>      if(g_wSide != TOP) <br>         { <br>         //destroy the existing Rebar <br>         DestroyWindow(GetDlgItem(hWnd, ID_REBAR)); <br>          <br>         //change to the new side <br>         g_wSide = TOP; <br> <br>         //create the new Rebar <br>         BuildRebar(hWnd); <br> <br>         //we have to do this because the rebar will recalculate it's rectangle after the first time it is sized <br>         MoveRebar(hWnd); <br>         } <br>      break; <br> <br>   case IDM_BOTTOM: <br>      if(g_wSide != BOTTOM) <br>         { <br>         //destroy the existing Rebar <br>         DestroyWindow(GetDlgItem(hWnd, ID_REBAR)); <br>          <br>         g_wSide = BOTTOM; <br> <br>         //create the new Rebar <br>         BuildRebar(hWnd); <br> <br>         //we have to do this because the rebar will recalculate it's rectangle after the first time it is sized <br>         MoveRebar(hWnd); <br>         } <br>      break; <br> <br>   case IDM_LEFT: <br>      if(g_wSide != LEFT) <br>         { <br>         //destroy the existing Rebar <br>         DestroyWindow(GetDlgItem(hWnd, ID_REBAR)); <br>          <br>         g_wSide = LEFT; <br> <br>         //create the new Rebar <br>         BuildRebar(hWnd); <br> <br>         //we have to do this because the rebar will recalculate it's rectangle after the first time it is sized <br>         MoveRebar(hWnd); <br>         } <br>      break; <br> <br>   case IDM_RIGHT: <br>      if(g_wSide != RIGHT) <br>         { <br>         //destroy the existing Rebar <br>         DestroyWindow(GetDlgItem(hWnd, ID_REBAR)); <br>          <br>         g_wSide = RIGHT; <br> <br>         //create the new Rebar <br>         BuildRebar(hWnd); <br> <br>         //we have to do this because the rebar will recalculate it's rectangle after the first time it is sized <br>         MoveRebar(hWnd); <br>         } <br>      break; <br>    <br>   case IDM_EXIT: <br>      DestroyWindow(hWnd); <br>      break; <br>    <br>   case IDM_ABOUT: <br>      DialogBox(g_hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About); <br>      break;    <br>       <br>   } <br> <br>return TRUE; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

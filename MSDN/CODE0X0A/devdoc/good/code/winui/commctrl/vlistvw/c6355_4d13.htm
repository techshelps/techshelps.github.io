<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VLISTVW.C</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6357"></a>VLISTVW.C</h2>
<pre><code>/************************************************************************** <br>   THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF <br>   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO <br>   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A <br>   PARTICULAR PURPOSE. <br> <br>   Copyright 1997 Microsoft Corporation.  All Rights Reserved. <br>**************************************************************************/ <br> <br>/************************************************************************** <br>   Include Files <br>**************************************************************************/ <br> <br>#define STRICT <br> <br>#include &lt;windows.h&gt; <br>#include &lt;windowsx.h&gt; <br>#include &lt;commctrl.h&gt; <br>#include "VListVw.h" <br> <br>/************************************************************************** <br>   Local Function Prototypes <br>**************************************************************************/ <br> <br>#define ErrorHandler() ErrorHandlerEx(__LINE__, __FILE__) <br>void ErrorHandlerEx(WORD, LPSTR); <br> <br>LRESULT ListViewNotify(HWND, LPARAM); <br>void SwitchView(HWND, DWORD); <br>BOOL DoContextMenu(HWND, WPARAM, LPARAM); <br>void UpdateMenu(HWND, HMENU); <br>BOOL InsertListViewItems(HWND); <br>void PositionHeader(HWND); <br> <br>/************************************************************************** <br>   Global Variables <br>**************************************************************************/ <br> <br>HANDLE   g_hInst; <br>TCHAR    g_szClassName[] = TEXT("VListVwClass"); <br> <br>#define ITEM_COUNT   100000 <br> <br>/****************************************************************************** <br> <br>   WinMain <br> <br>******************************************************************************/ <br> <br>int PASCAL WinMain(  HINSTANCE hInstance, <br>                     HINSTANCE hPrevInstance, <br>                     LPSTR lpCmdLine, <br>                     int nCmdShow) <br>{ <br>MSG  msg; <br> <br>g_hInst = hInstance; <br> <br>if(!hPrevInstance) <br>   if(!InitApplication(hInstance)) <br>      return FALSE; <br> <br>//required to use the common controls <br>InitCommonControls(); <br> <br>/* Perform initializations that apply to a specific instance */ <br> <br>if (!InitInstance(hInstance, nCmdShow)) <br>   return FALSE; <br> <br>/* Acquire and dispatch messages until a WM_QUIT uMessage is received. */ <br> <br>while(GetMessage( &amp;msg, NULL, 0x00, 0x00)) <br>   { <br>   TranslateMessage(&amp;msg); <br>   DispatchMessage(&amp;msg); <br>   } <br> <br>return msg.wParam; <br>} <br> <br> <br>/****************************************************************************** <br> <br>   InitApplication <br> <br>******************************************************************************/ <br> <br>BOOL InitApplication(HINSTANCE hInstance) <br>{ <br>WNDCLASSEX  wcex; <br>ATOM        aReturn; <br> <br>wcex.cbSize          = sizeof(WNDCLASSEX); <br>wcex.style           = 0; <br>wcex.lpfnWndProc     = (WNDPROC)MainWndProc; <br>wcex.cbClsExtra      = 0; <br>wcex.cbWndExtra      = 0; <br>wcex.hInstance       = hInstance; <br>wcex.hCursor         = LoadCursor(NULL, IDC_ARROW); <br>wcex.hbrBackground   = (HBRUSH)(COLOR_WINDOW + 1); <br>wcex.lpszMenuName    = MAKEINTRESOURCE(IDM_MAIN_MENU); <br>wcex.lpszClassName   = g_szClassName; <br>wcex.hIcon           = LoadIcon(g_hInst, MAKEINTRESOURCE(IDI_MAINICON)); <br>wcex.hIconSm         = LoadImage(g_hInst, MAKEINTRESOURCE(IDI_MAINICON), IMAGE_ICON, 16, 16, 0); <br> <br>aReturn = RegisterClassEx(&amp;wcex); <br> <br>if(0 == aReturn) <br>   { <br>   WNDCLASS wc; <br> <br>   wc.style          = 0; <br>   wc.lpfnWndProc    = (WNDPROC)MainWndProc; <br>   wc.cbClsExtra     = 0; <br>   wc.cbWndExtra     = 0; <br>   wc.hInstance      = hInstance; <br>   wc.hIcon          = LoadIcon(g_hInst, MAKEINTRESOURCE(IDI_MAINICON)); <br>   wc.hCursor        = LoadCursor(NULL, IDC_ARROW); <br>   wc.hbrBackground  = (HBRUSH)(COLOR_WINDOW + 1); <br>   wc.lpszMenuName   = MAKEINTRESOURCE(IDM_MAIN_MENU); <br>   wc.lpszClassName  = g_szClassName; <br> <br>   aReturn = RegisterClass(&amp;wc); <br>   } <br> <br>return aReturn; <br>} <br> <br> <br>/****************************************************************************** <br> <br>   InitInstance <br> <br>******************************************************************************/ <br> <br>BOOL InitInstance(   HINSTANCE hInstance, <br>                     int nCmdShow) <br>{ <br>HWND     hWnd; <br>TCHAR    szTitle[MAX_PATH] = ""; <br> <br>g_hInst = hInstance; <br> <br>LoadString(g_hInst, IDS_APPTITLE, szTitle, sizeof(szTitle)); <br> <br>/* Create a main window for this application instance.  */ <br>hWnd = CreateWindowEx(  0, <br>                        g_szClassName, <br>                        szTitle, <br>                        WS_OVERLAPPEDWINDOW, <br>                        CW_USEDEFAULT, <br>                        CW_USEDEFAULT, <br>                        CW_USEDEFAULT, <br>                        CW_USEDEFAULT, <br>                        NULL, <br>                        NULL, <br>                        hInstance, <br>                        NULL); <br> <br>/* If window could not be created, return "failure" */ <br> <br>if (!hWnd) <br>   return FALSE; <br> <br>/* Make the window visible; update its client area; and return "success" */ <br> <br>ShowWindow(hWnd, nCmdShow); <br>UpdateWindow(hWnd); <br>return TRUE; <br> <br>} <br> <br>/****************************************************************************** <br> <br>   MainWndProc <br> <br>******************************************************************************/ <br> <br>LRESULT CALLBACK MainWndProc( HWND hWnd, <br>                              UINT uMessage, <br>                              WPARAM wParam, <br>                              LPARAM lParam) <br>{ <br>static HWND hwndListView; <br> <br>switch (uMessage) <br>   { <br>   case WM_CREATE: <br>      // create the TreeView control <br>      hwndListView = CreateListView(g_hInst, hWnd); <br>       <br>      //initialize the TreeView control <br>      InitListView(hwndListView); <br>       <br>      break; <br> <br>   case WM_NOTIFY: <br>      return ListViewNotify(hWnd, lParam); <br>    <br>   case WM_SIZE: <br>      ResizeListView(hwndListView, hWnd); <br>      break; <br> <br>   case WM_INITMENUPOPUP: <br>      UpdateMenu(hwndListView, GetMenu(hWnd)); <br>      break; <br>    <br>   case WM_CONTEXTMENU: <br>      if(DoContextMenu(hWnd, wParam, lParam)) <br>         return FALSE; <br>      break; <br>    <br>   case WM_COMMAND: <br>      switch (GET_WM_COMMAND_ID(wParam, lParam)) <br>         { <br>         case IDM_LARGE_ICONS: <br>            SwitchView(hwndListView, LVS_ICON); <br>            break; <br>          <br>         case IDM_SMALL_ICONS: <br>            SwitchView(hwndListView, LVS_SMALLICON); <br>            break; <br>          <br>         case IDM_LIST: <br>            SwitchView(hwndListView, LVS_LIST); <br>            break; <br>          <br>         case IDM_REPORT: <br>            SwitchView(hwndListView, LVS_REPORT); <br>            break; <br>          <br>         case IDM_EXIT: <br>            DestroyWindow(hWnd); <br>            break; <br>          <br>         case IDM_ABOUT: <br>            DialogBox(g_hInst, MAKEINTRESOURCE(IDD_ABOUT), hWnd, AboutDlgProc); <br>            break;    <br> <br>         } <br>      break; <br> <br>   case WM_DESTROY: <br>      PostQuitMessage(0); <br>      break; <br> <br>   default: <br>      break; <br>   } <br>return DefWindowProc(hWnd, uMessage, wParam, lParam); <br>} <br> <br> <br>/****************************************************************************** <br> <br>   AboutDlgProc <br> <br>******************************************************************************/ <br> <br>BOOL CALLBACK AboutDlgProc(   HWND hDlg,  <br>                              UINT uMessage,  <br>                              WPARAM wParam,  <br>                              LPARAM lParam) <br>{ <br>switch (uMessage) <br>   { <br>   case WM_INITDIALOG: <br>      return TRUE; <br>       <br>   case WM_COMMAND: <br>      switch(wParam) <br>         { <br>         case IDOK: <br>            EndDialog(hDlg, IDOK); <br>            break; <br> <br>         case IDCANCEL: <br>            EndDialog(hDlg, IDOK); <br>            break; <br>         } <br>      return TRUE; <br>    }  <br>     <br>return FALSE; <br>} <br> <br>/****************************************************************************** <br> <br>   CreateListView <br> <br>******************************************************************************/ <br> <br>HWND CreateListView(HINSTANCE hInstance, HWND hwndParent) <br>{ <br>DWORD       dwStyle; <br>HWND        hwndListView; <br>HIMAGELIST  himlSmall; <br>HIMAGELIST  himlLarge; <br>BOOL        bSuccess = TRUE; <br> <br>dwStyle =   WS_TABSTOP |  <br>            WS_CHILD |  <br>            WS_BORDER |  <br>            WS_VISIBLE | <br>            LVS_AUTOARRANGE | <br>            LVS_REPORT |  <br>            LVS_OWNERDATA; <br>             <br>hwndListView = CreateWindowEx(   WS_EX_CLIENTEDGE,          // ex style <br>                                 WC_LISTVIEW,               // class name - defined in commctrl.h <br>                                 "",                        // dummy text <br>                                 dwStyle,                   // style <br>                                 0,                         // x position <br>                                 0,                         // y position <br>                                 0,                         // width <br>                                 0,                         // height <br>                                 hwndParent,                // parent <br>                                 (HMENU)ID_LISTVIEW,        // ID <br>                                 g_hInst,                   // instance <br>                                 NULL);                     // no extra data <br> <br>if(!hwndListView) <br>   return NULL; <br> <br>ResizeListView(hwndListView, hwndParent); <br> <br>//set the image lists <br>himlSmall = ImageList_Create(16, 16, ILC_COLORDDB | ILC_MASK, 1, 0); <br>himlLarge = ImageList_Create(32, 32, ILC_COLORDDB | ILC_MASK, 1, 0); <br> <br>if (himlSmall &amp;&amp; himlLarge) <br>   { <br>   HICON hIcon; <br> <br>   //set up the small image list <br>   hIcon = LoadImage(g_hInst, MAKEINTRESOURCE(IDI_DISK), IMAGE_ICON, 16, 16, LR_DEFAULTCOLOR); <br>   ImageList_AddIcon(himlSmall, hIcon); <br> <br>   //set up the large image list <br>   hIcon = LoadIcon(g_hInst, MAKEINTRESOURCE(IDI_DISK)); <br>   ImageList_AddIcon(himlLarge, hIcon); <br> <br>   ListView_SetImageList(hwndListView, himlSmall, LVSIL_SMALL); <br>   ListView_SetImageList(hwndListView, himlLarge, LVSIL_NORMAL); <br>   } <br> <br>return hwndListView; <br>} <br> <br>/****************************************************************************** <br> <br>   ResizeListView <br> <br>******************************************************************************/ <br> <br>void ResizeListView(HWND hwndListView, HWND hwndParent) <br>{ <br>RECT  rc; <br> <br>GetClientRect(hwndParent, &amp;rc); <br> <br>MoveWindow( hwndListView,  <br>            rc.left, <br>            rc.top, <br>            rc.right - rc.left, <br>            rc.bottom - rc.top, <br>            TRUE); <br> <br>//only call this if we want the LVS_NOSCROLL style <br>//PositionHeader(hwndListView); <br>} <br> <br>/****************************************************************************** <br> <br>   PositionHeader <br> <br>   this needs to be called when the ListView is created, resized, the view is  <br>   changed or a WM_SYSPARAMETERCHANGE message is recieved <br> <br>******************************************************************************/ <br> <br>void PositionHeader(HWND hwndListView) <br>{ <br>HWND  hwndHeader = GetWindow(hwndListView, GW_CHILD); <br>DWORD dwStyle = GetWindowLong(hwndListView, GWL_STYLE); <br> <br>/*To ensure that the first item will be visible, create the control without  <br>the LVS_NOSCROLL style and then add it here*/ <br>dwStyle |= LVS_NOSCROLL; <br>SetWindowLong(hwndListView, GWL_STYLE, dwStyle); <br> <br>//only do this if we are in report view and were able to get the header hWnd <br>if(((dwStyle &amp; LVS_TYPEMASK) == LVS_REPORT) &amp;&amp; hwndHeader) <br>   { <br>   RECT        rc; <br>   HD_LAYOUT   hdLayout; <br>   WINDOWPOS   wpos; <br> <br>   GetClientRect(hwndListView, &amp;rc); <br>   hdLayout.prc = &amp;rc; <br>   hdLayout.pwpos = &amp;wpos; <br> <br>   Header_Layout(hwndHeader, &amp;hdLayout); <br> <br>   SetWindowPos(  hwndHeader,  <br>                  wpos.hwndInsertAfter,  <br>                  wpos.x,  <br>                  wpos.y, <br>                  wpos.cx,  <br>                  wpos.cy,  <br>                  wpos.flags | SWP_SHOWWINDOW); <br> <br>   ListView_EnsureVisible(hwndListView, 0, FALSE); <br>   } <br>} <br> <br>/****************************************************************************** <br> <br>   InitListView <br> <br>******************************************************************************/ <br> <br>BOOL InitListView(HWND hwndListView) <br>{ <br>LV_COLUMN   lvColumn; <br>int         i; <br>TCHAR       szString[5][20] = {"Main Column", "Column 1", "Column 2", "Column 3", "Column 4"}; <br> <br>//empty the list <br>ListView_DeleteAllItems(hwndListView); <br> <br>//initialize the columns <br>lvColumn.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM; <br>lvColumn.fmt = LVCFMT_LEFT; <br>lvColumn.cx = 120; <br>for(i = 0; i &lt; 5; i++) <br>   { <br>   lvColumn.pszText = szString[i]; <br>   ListView_InsertColumn(hwndListView, i, &amp;lvColumn); <br>   } <br> <br>InsertListViewItems(hwndListView); <br> <br>return TRUE; <br>} <br> <br>/****************************************************************************** <br> <br>   InsertListViewItems <br> <br>******************************************************************************/ <br> <br>BOOL InsertListViewItems(HWND hwndListView) <br>{ <br>//empty the list <br>ListView_DeleteAllItems(hwndListView); <br> <br>//set the number of items in the list <br>ListView_SetItemCount(hwndListView, ITEM_COUNT); <br> <br>return TRUE; <br>} <br> <br>/************************************************************************** <br> <br>   ListViewNotify() <br> <br>**************************************************************************/ <br> <br>LRESULT ListViewNotify(HWND hWnd, LPARAM lParam) <br>{ <br>LPNMHDR  lpnmh = (LPNMHDR) lParam; <br>HWND     hwndListView = GetDlgItem(hWnd, ID_LISTVIEW); <br> <br>switch(lpnmh-&gt;code) <br>   { <br>   case LVN_GETDISPINFO: <br>      { <br>      LV_DISPINFO *lpdi = (LV_DISPINFO *)lParam; <br>      TCHAR szString[MAX_PATH]; <br> <br>      if(lpdi-&gt;item.iSubItem) <br>         { <br>         if(lpdi-&gt;item.mask &amp; LVIF_TEXT) <br>            { <br>            wsprintf(szString, "Item %d - Column %d", lpdi-&gt;item.iItem + 1, lpdi-&gt;item.iSubItem); <br>            lstrcpy(lpdi-&gt;item.pszText, szString); <br>            } <br>         } <br>      else <br>         { <br>         if(lpdi-&gt;item.mask &amp; LVIF_TEXT) <br>            { <br>            wsprintf(szString, "Item %d", lpdi-&gt;item.iItem + 1); <br>            lstrcpy(lpdi-&gt;item.pszText, szString); <br>            } <br> <br>         if(lpdi-&gt;item.mask &amp; LVIF_IMAGE) <br>            { <br>            lpdi-&gt;item.iImage = 0; <br>            } <br>         } <br>      } <br>      return 0; <br> <br>   case LVN_ODCACHEHINT: <br>      { <br>      LPNMLVCACHEHINT   lpCacheHint = (LPNMLVCACHEHINT)lParam; <br>      /* <br>      This sample doesn't use this notification, but this is sent when the  <br>      ListView is about to ask for a range of items. On this notification,  <br>      you should load the specified items into your local cache. It is still  <br>      possible to get an LVN_GETDISPINFO for an item that has not been cached,  <br>      therefore, your application must take into account the chance of this  <br>      occurring. <br>      */ <br>      } <br>      return 0; <br> <br>   case LVN_ODFINDITEM: <br>      { <br>      LPNMLVFINDITEM lpFindItem = (LPNMLVFINDITEM)lParam; <br>      /* <br>      This sample doesn't use this notification, but this is sent when the  <br>      ListView needs a particular item. Return -1 if the item is not found. <br>      */ <br>      } <br>      return 0; <br>   } <br> <br>return 0; <br>} <br> <br>/************************************************************************** <br> <br>   ErrorHandlerEx() <br> <br>**************************************************************************/ <br> <br>void ErrorHandlerEx( WORD wLine, LPSTR lpszFile ) <br>{ <br>LPVOID lpvMessage; <br>DWORD  dwError; <br>char szBuffer[256]; <br> <br>// Allow FormatMessage() to look up the error code returned by GetLastError <br>dwError = FormatMessage(   FORMAT_MESSAGE_ALLOCATE_BUFFER |  <br>                              FORMAT_MESSAGE_FROM_SYSTEM,  <br>                           NULL,  <br>                           GetLastError(),  <br>                           MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US),  <br>                           (LPTSTR)&amp;lpvMessage,  <br>                           0,  <br>                           NULL); <br> <br>// Check to see if an error occured calling FormatMessage() <br>if (0 == dwError) <br>   { <br>   wsprintf(   szBuffer,  <br>               "An error occured calling FormatMessage()." <br>               "Error Code %d",  <br>               GetLastError()); <br>   MessageBox( NULL,  <br>               szBuffer,  <br>               "Generic",  <br>               MB_ICONSTOP | MB_ICONEXCLAMATION); <br>   return; <br>   } <br> <br>// Display the error infromation along with the place the error happened. <br>wsprintf(szBuffer, "Generic, Line=%d, File=%s", wLine, lpszFile); <br>MessageBox(NULL, lpvMessage, szBuffer, MB_ICONEXCLAMATION | MB_OK); <br>} <br> <br>/************************************************************************** <br> <br>   SwitchView() <br> <br>**************************************************************************/ <br> <br>void SwitchView(HWND hwndListView, DWORD dwView) <br>{ <br>DWORD dwStyle = GetWindowLong(hwndListView, GWL_STYLE); <br> <br>SetWindowLong(hwndListView, GWL_STYLE, (dwStyle &amp; ~LVS_TYPEMASK) | dwView); <br>ResizeListView(hwndListView, GetParent(hwndListView)); <br>} <br> <br>/************************************************************************** <br> <br>   DoContextMenu() <br> <br>**************************************************************************/ <br> <br>BOOL DoContextMenu(  HWND hWnd,  <br>                     WPARAM wParam,  <br>                     LPARAM lParam) <br>{ <br>HWND  hwndListView = (HWND)wParam; <br>HMENU hMenuLoad, <br>      hMenu; <br> <br>if(hwndListView != GetDlgItem(hWnd, ID_LISTVIEW)) <br>   return FALSE; <br> <br>hMenuLoad = LoadMenu(g_hInst, MAKEINTRESOURCE(IDM_CONTEXT_MENU)); <br>hMenu = GetSubMenu(hMenuLoad, 0); <br> <br>UpdateMenu(hwndListView, hMenu); <br> <br>TrackPopupMenu(   hMenu, <br>                  TPM_LEFTALIGN | TPM_RIGHTBUTTON, <br>                  LOWORD(lParam), <br>                  HIWORD(lParam), <br>                  0, <br>                  hWnd, <br>                  NULL); <br> <br>DestroyMenu(hMenuLoad); <br> <br>return TRUE; <br>} <br> <br>/************************************************************************** <br> <br>   UpdateMenu() <br> <br>**************************************************************************/ <br> <br>void UpdateMenu(HWND hwndListView, HMENU hMenu) <br>{ <br>UINT  uID; <br>DWORD dwStyle; <br> <br>//uncheck all of these guys <br>CheckMenuItem(hMenu, IDM_LARGE_ICONS,  MF_BYCOMMAND | MF_UNCHECKED); <br>CheckMenuItem(hMenu, IDM_SMALL_ICONS,  MF_BYCOMMAND | MF_UNCHECKED); <br>CheckMenuItem(hMenu, IDM_LIST,  MF_BYCOMMAND | MF_UNCHECKED); <br>CheckMenuItem(hMenu, IDM_REPORT,  MF_BYCOMMAND | MF_UNCHECKED); <br> <br>//check the appropriate view menu item <br>dwStyle = GetWindowLong(hwndListView, GWL_STYLE); <br>switch(dwStyle &amp; LVS_TYPEMASK) <br>   { <br>   case LVS_ICON: <br>      uID = IDM_LARGE_ICONS; <br>      break; <br>       <br>   case LVS_SMALLICON: <br>      uID = IDM_SMALL_ICONS; <br>      break; <br>       <br>   case LVS_LIST: <br>      uID = IDM_LIST; <br>      break; <br>    <br>   case LVS_REPORT: <br>      uID = IDM_REPORT; <br>      break; <br>   } <br>CheckMenuRadioItem(hMenu, IDM_LARGE_ICONS, IDM_REPORT, uID,  MF_BYCOMMAND | MF_CHECKED); <br> <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

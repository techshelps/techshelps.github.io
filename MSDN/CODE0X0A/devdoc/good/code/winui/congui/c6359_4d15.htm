<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>README.TXT</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6359"></a>README.TXT</h2>
<pre><code>Console I/O Combined with GUI I/O <br> <br> <br>SUMMARY <br>======= <br> <br>The ConGUI sample demonstrates how a standard console application can take  <br>advantage of some of the graphical capabilities of Windows NT. <br> <br>Disclaimer: <br> <br>This sample application illustrates a method by which a console application  <br>can utilize some (but not all) of the graphical user interface (GUI)  <br>capabilities of the Win32 API. It was not the original design intention of  <br>the Console layer of Windows NT to allow it to interact in this manner  <br>with the graphical API, and because of this, it is possible to run into  <br>problems if you try to accomplish too much. <br> <br>Please use restraint in your usage of the graphical Win32 API in your  <br>console application. If your needs go beyond the simple methods  <br>illustrated here, you should probably consider designing your application  <br>as a full GUI application. <br> <br>MORE INFORMATION <br>================ <br> <br>There are many applications that have nothing to gain by implementing full- <br>fledged GUI with title bars, menus, scrollable client area, and so forth.  <br>However, a console application can take advantage of GUI features.  <br> <br>Take the example of a compiler. A compiler has no need for menus, button  <br>bars, or many of the other UI aspects of a standard Windows application.  <br>However, you may want your compiler to provide on-line assistance with the  <br>command-line switches that the compiler supports. <br> <br>ConGUI illustrates the usage of a '/dialog' parameter, which brings up a  <br>dialog box that assists the user in selecting parameters for the command  <br>line. To provide a little more information about some of those switches, <br>allow the user to access a Windows help file. ConGUI shows how easy it is  <br>for a console application to make standard WinHelp calls to access the  <br>Windows help engine. <br> <br>In addition, ConGUI shows how it is possible for a console application to  <br>figure out how it was launched. It can be useful for a text application to  <br>know that it was being launched into its own window, because when it closes,  <br>the window into which it has written all of its output is closed as well.  <br> <br>Try the following methods of executing ConGUI, and notice how it behaves: <br> <br>  - Double-click on the CONGUI.EXE from the File Manager or Windows  <br>    Explorer.  <br> <br>  - Add ConGUI to a group in the Program Manager or create a short-cut, and  <br>    double-click on the icon. <br> <br>  - From a command prompt, type:  <br> <br>      CONGUI <br> <br>  - From a command prompt, type:  <br>   <br>      START CONGUI <br> <br>  - From a command prompt, type:  <br> <br>      CONGUI &gt; TEMP.TXT <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONSOLE.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6361"></a>CONSOLE.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>// CONSOLE.C <br>// ================================================================ <br>// This module contains the standard console functions for this <br>// applicaiton. All of the 'graphical' functions are contained in <br>// GUI.C <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;ctype.h&gt; <br>#include &lt;windows.h&gt; <br>#include "ConGUI.h" <br> <br>void usage (void); <br>static void DoArgs(int *pargc, char **pargv[]); <br>void ListArgs (int argc, char **argv); <br> <br>extern int GetDialogArgs (char ***pargv); <br>extern int DoHelp (char *szHelpTopic); <br> <br>BOOL bDoHelp = FALSE; <br>BOOL bDoDialog = FALSE; <br>BOOL bDoUsage = FALSE; <br> <br>int main(int argc, char **argv) <br> <br>{ <br>    char szAppName[80]; <br>    char **dargv; <br> <br>    HANDLE hConsoleOutput; <br>    CONSOLE_SCREEN_BUFFER_INFO csbi; <br>    BOOL bLaunched; <br> <br>    // Lets try a trick to determine if we were 'launched' as a seperate <br>    // screen, or just running from the command line. <br>    // We want to do this so that when we exit, we can prompt the user <br>    // before we shut down if we were 'launched'. Otherwise, any data on <br>    // the output window will be lost. <br>    // We will do this by simply getting the current cursor position. It <br>    // 'should' always be (0,0) on a launch, and something else if we were <br>    // executed as a command from a console window. The only time I can see <br>    // this as not working, is if the user executed a CLS and appended <br>    // our program with the '&amp;' character, as in: <br>    //   C:\&gt; CLS &amp; ConGUI <br>    // This will also result in a (0,0) cursor pos, but in this case, the <br>    // user might also be wanting us to 'prompt' before closeing. <br>    // We also need to handle the case of: <br>    //   C:\&gt; ConGUI &gt; output.dat <br> <br>    hConsoleOutput = GetStdHandle(STD_OUTPUT_HANDLE); <br>    GetConsoleScreenBufferInfo(hConsoleOutput, &amp;csbi); <br>    bLaunched = ((csbi.dwCursorPosition.X==0) &amp;&amp; (csbi.dwCursorPosition.Y==0)); <br>    if ((csbi.dwSize.X&lt;=0) || (csbi.dwSize.Y &lt;= 0)) bLaunched = FALSE; <br> <br>//    printf ("Window Size: (%i, %i)\n",csbi.dwSize.X, csbi.dwSize.Y); <br>//    printf ("Cursor Pos : (%i, %i)\n",csbi.dwCursorPosition.X, csbi.dwCursorPosition.Y); <br> <br> <br> <br>    if (argc &lt;= 1) { // Nothing on the command line, give brief usage info <br>        usage(); <br>        if (bLaunched) { <br>            printf ("------------------------------------------\n"); <br>            printf ("Program Finished - Hit &lt;Enter&gt; to continue"); <br>            getchar(); <br>        } <br>        return(0); <br>    } <br> <br>    // Get the application name off of the command line. <br>    strcpy (szAppName, argv[0]); // this should always be there. <br>    argc--; <br>    argv++; <br> <br>    // Get the rest of the arguments <br>    DoArgs (&amp;argc, &amp;argv); <br> <br> <br>    // And handle anything they told us to do <br>    if (bDoUsage) {         // Simple Usage Info <br>        usage(); <br>    } else if (bDoHelp) {   // Robust Help <br>        DoHelp ("Contents"); <br>    } else if (bDoDialog) { // Dialog <br>        dargv = (char **)GlobalAlloc (GPTR, 10*sizeof(char*)); <br>        argc = GetDialogArgs(&amp;dargv); <br>        if (argc &gt; 0) { <br>            ListArgs (argc, dargv); <br>            DoArgs (&amp;argc, &amp;dargv); <br>        } else { <br>            printf ("\nUser Selected 'Cancel' in the dialog\n"); <br>        } <br>    } <br> <br>    if (bLaunched) { <br>        printf ("------------------------------------------\n"); <br>        printf ("Program Finished - Hit &lt;Enter&gt; to continue"); <br>        getchar(); <br>    } <br> <br>    return(0); <br>} <br> <br> <br>void usage(void) <br>{ <br>    printf ("\nConGUI Usage information:\n"); <br>    printf ("-------------------------\n\n"); <br>    printf ("    -?       To print usage information\n"); <br>    printf ("    -help    To bring up WinHelp for this application\n"); <br>    printf ("    -dialog  To bring up a dialog to prompt for parameters\n"); <br> <br>} <br> <br>void ListArgs (int argc, char **argv) <br>{ <br>    printf ("\nCommand Line:\n    ConGUI "); <br>    while (argc--) { <br>        printf ("%s ", *argv); <br>        argv++; <br>    } <br>    printf ("\n"); <br>} <br> <br> <br>typedef struct tagToken { <br>    int id; <br>    char str[25]; <br>} Token; <br> <br>Token params[] = { <br>    { T_USAGE,   "?"}, <br>    { T_HELP,    "Help"}, <br>    { T_DIALOG,  "Dialog"}, <br>    { 0, 0} <br> <br>}; <br> <br> <br>// Check the option entered on the command line against the tokens <br>// we are expecting. The capital letters of the token represent the <br>// minimum amount of the token that needs to be provided. The lower <br>// case letters 'can' be provided, and if provided, must match. <br>BOOL TokensMatch (char *token, char *mask) <br>{ <br>    int lToken, lMask, index; <br>    char *pchToken, *pchMask; <br> <br>    lToken = strlen (token); <br>    lMask = strlen (mask); <br> <br>    if (lToken &gt; lMask) return FALSE; <br> <br>    pchToken = &amp;token[0]; <br>    pchMask = &amp;mask[0]; <br> <br>    index = 0; <br>    while (*pchToken) { <br>        if (toupper(*pchToken) != toupper(*pchMask)) return FALSE; <br> <br>        pchToken++; <br>        pchMask++; <br>        index++; <br>    } <br> <br>    if (index == lMask) return TRUE; <br> <br>    if (islower(*pchMask)) return TRUE; <br> <br>    return FALSE; <br> <br>} <br> <br>// Return the id of the specified token. Return -1 if no match. <br>int GetTokenID (char *token) <br>{ <br>    int id = 0; <br>    int index = 0; <br> <br>    while (params[index].id) { <br>        if (TokensMatch (token, params[index].str)) { <br>            return params[index].id; <br>        } <br>        ++index; <br>    } <br> <br>    return -1; <br>} <br> <br> <br>// Parse the argument list, looking for valid keywords <br>static void DoArgs(int *pargc, char **pargv[]) <br>{ <br>    int argc, id; <br>    char **argv; <br>    char *p; <br> <br>    argc = *pargc; <br>    argv = *pargv; <br> <br>    p = argv[0]; <br> <br>    while (argc) { <br> <br>        if (*p == '/' || (*p=='-' &amp;&amp; *(p+1)!='\0')) { <br>            id = GetTokenID (&amp;(p[1])); <br>            switch (id) { <br>                case -1 : <br>                    //printf ("Invalid Token: %s\n", &amp;(p[1])); <br>                    break; <br> <br>                case T_USAGE: <br>                    bDoUsage = TRUE; <br>                    break; <br> <br>                case T_HELP: <br>                    bDoHelp = TRUE; <br>                    break; <br> <br>                case T_DIALOG: <br>                    bDoDialog = TRUE; <br>                    break; <br> <br>                default: <br>                    printf ("Found Token: %s\n", &amp;(p[1])); <br>                    break; <br>            } <br>        } else { <br>            printf ("Unexpected keyword : %s\n", p); <br> <br>        } <br> <br>        argc--; <br>        argv++; <br>        p = argv[0]; <br>    } <br> <br>    *pargv = argv; <br>    *pargc = argc; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

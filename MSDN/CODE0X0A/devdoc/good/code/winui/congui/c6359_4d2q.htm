<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GUI.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6362"></a>GUI.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>// GUI.C <br>// ================================================================ <br>// This module contains all of the functions that interface to the <br>// 'graphical' part of this program. This currently only relates to <br>// the code that brings up the dialog box, and calls the WinHelp <br>// engine. <br> <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;ctype.h&gt; <br>#include &lt;windows.h&gt; <br>#include "ConGUI.h" <br> <br>int DoHelp (char *szHelpTopic); <br>int GetDialogArgs (char ***pargv); <br>BOOL CenterWindow (HWND hwnd); <br>BOOL APIENTRY CLDlgProc (HWND hdlg, UINT msg, WPARAM wParam, LPARAM lParam); <br> <br> <br>// Use WINHELP to bring up the applicaiton help file <br>int DoHelp (char *szHelpTopic) <br>{ <br>    WinHelp (GetFocus(), "ConGUI.HLP", HELP_KEY, (DWORD)(LPSTR)szHelpTopic); <br>    return TRUE; <br>} <br> <br> <br>// Bring up the dialog box, and pass back a 'command line' as was <br>// specified by the user <br>int GetDialogArgs (char ***pargv) <br>{ <br>    int ret; <br>    HANDLE hinst; <br>    HWND hwnd; <br>    char szFile[80]; <br> <br>    hinst = GetModuleHandle (NULL); <br>    hwnd = GetFocus(); <br> <br>    ret = DialogBoxParam (hinst, "CL", NULL, CLDlgProc, (LPARAM)pargv); <br> <br>    if (-1 == ret) { <br>        ret = GetLastError(); <br>        printf ("Unable to create dialog: %d\n", ret); <br>        GetModuleFileName (hinst, szFile, sizeof(szFile)); <br>        printf ("hinst = %d\n", hinst); <br>        printf ("hwnd = %d\n", hwnd); <br>        printf ("File = %s\n", szFile); <br>        return FALSE; <br> <br>    } <br>    return ret; <br>} <br> <br>// A quick little routine that will center a window on the screen. <br>// Handy for dialog boxes <br>BOOL CenterWindow (HWND hwnd) <br>{ <br>    RECT    rect; <br>    int     w, h; <br>    int     wScreen, hScreen, xNew, yNew; <br>    HDC     hdc; <br> <br>    GetWindowRect (hwnd, &amp;rect); <br>    w = rect.right - rect.left; <br>    h = rect.bottom - rect.top; <br> <br>    hdc = GetDC (hwnd); <br>    wScreen = GetDeviceCaps (hdc, HORZRES); <br>    hScreen = GetDeviceCaps (hdc, VERTRES); <br>    ReleaseDC (hwnd, hdc); <br> <br>    xNew = wScreen/2 - w/2; <br>    yNew = hScreen/2 - h/2; <br> <br>    return SetWindowPos (hwnd, NULL, xNew, yNew, 0, 0, SWP_NOSIZE | SWP_NOZORDER); <br>} <br> <br> <br>// Create a data structure that will hold the strings for the combo boxes <br>// we have in our dialog. This just illustrates 'a' way to do this, not <br>// necessarily the best. <br> <br>typedef struct tagDlgCtrls { <br>    int ctrlId; <br>    int def; <br>    char str[25]; <br>    char opt[5]; <br>} DlgCtrls; <br> <br>DlgCtrls dlgctrls[] = { <br>    { 415, FALSE, "DOS EXE", "..." }, <br>    { 415, FALSE, "Windows 3.0 EXE", "..."  }, <br>    { 415, FALSE, "Windows 3.0 DLL", "..."  }, <br>    { 415, FALSE, "Windows 3.1 EXE", "..."  }, <br>    { 415, FALSE, "Windows 3.1 DLL", "..."  }, <br>    { 415, TRUE,  "Windows NT EXE", "..."  }, <br>    { 415, FALSE, "Windows NT DLL", "..."  }, <br>    { 415, FALSE, "Windows NT Console App", "..."  }, <br> <br>    { 402, FALSE, "Small", "AS" }, <br>    { 402, FALSE, "Medium", "AM" }, <br>    { 402, FALSE, "Compact", "AC" }, <br>    { 402, TRUE,  "Large", "AL" }, <br>    { 402, FALSE, "Huge", "AH" }, <br>    { 402, FALSE, "Customize", "A?" }, <br> <br>    { 404, FALSE, "8086", "G0" }, <br>    { 404, FALSE, "80186", "G1" }, <br>    { 404, TRUE,  "80286", "G2" }, <br>    { 404, FALSE, "80386", "G3" }, <br>    { 404, FALSE, "80486", "G4" }, <br> <br>    { 406, TRUE,  "stdcall", "Gz" }, <br>    { 406, FALSE, "Pascal", "Gc" }, <br>    { 406, FALSE, "C", "Gd" }, <br> <br>    { 408, FALSE, "Level 0", "W0" }, <br>    { 408, FALSE, "Level 1", "W1" }, <br>    { 408, FALSE, "Level 2", "W2" }, <br>    { 408, TRUE,  "Level 3", "W3" }, <br>    { 408, FALSE, "Level 4", "W4" }, <br> <br>    { 411, FALSE, "None", "" }, <br>    { 411, FALSE, "Line Numbers Only", "Zd" }, <br>    { 411, TRUE,  "Full Information", "Zi" }, <br> <br>    { 418, FALSE, "Ansi C", "Za" }, <br>    { 418, TRUE, "MS Extensions", "Ze" }, <br> <br>    { 413, FALSE, "None", "" }, <br>    { 413, TRUE,  "Protect Mode App", "GA" }, <br>    { 413, FALSE, "Protect Mode DLL", "GD" }, <br> <br>    { 0, 0}  // End Of List <br>}; <br> <br> <br>BOOL APIENTRY CLDlgProc (HWND hdlg, UINT msg, WPARAM wParam, LPARAM lParam) <br>{ <br>    int wmId; <br>    static char ***pargv; <br>    static char **argv; <br> <br>    int i, item, index, iCtrl, argc; <br>    char *cmd; <br>    char *cmdline; <br> <br>    switch (msg) { <br>        case WM_INITDIALOG: <br>            // We need to initialize stuff in the dialog box... <br> <br>            pargv = (char ***)lParam; <br>            argv = *pargv; <br>            CenterWindow (hdlg); <br> <br>            iCtrl = i = 0; <br>            while (dlgctrls[i].ctrlId) { <br>                if (dlgctrls[i].ctrlId != iCtrl) { // Starting a new list <br>                    iCtrl = dlgctrls[i].ctrlId; <br>                } <br>                index = SendDlgItemMessage (hdlg, iCtrl, CB_ADDSTRING, 0, (DWORD)(LPSTR)dlgctrls[i].str); <br>                SendDlgItemMessage (hdlg, iCtrl, CB_SETITEMDATA, index, i); <br>                if (dlgctrls[i].def) { <br>                    SendDlgItemMessage (hdlg, dlgctrls[i].ctrlId, CB_SETCURSEL, index, 0); <br>                } <br>                i++; <br>            } <br>            return (TRUE); <br> <br>        case WM_DESTROY: <br>            break; <br> <br>        case WM_COMMAND: <br>            wmId = LOWORD(wParam); <br>            switch (wmId) { <br> <br>                case T_HELP: <br>                    DoHelp ("Contents"); <br>                    break; <br> <br>                case IDOK: <br>                    cmd = cmdline = (char *)GlobalAlloc (GPTR, 128); <br>                    argv[0] = cmdline; <br>                    argc = 0; <br> <br>                    if (cmdline) { <br>                        iCtrl = i = 0; <br>                        while (dlgctrls[i].ctrlId) { <br>                            if (dlgctrls[i].ctrlId != iCtrl) { <br>                                iCtrl = dlgctrls[i].ctrlId; <br>                                index = SendDlgItemMessage(hdlg, iCtrl, CB_GETCURSEL, 0, 0); <br>                                if (index) { <br>                                    item = SendDlgItemMessage (hdlg, iCtrl, CB_GETITEMDATA, index, 0); <br>                                    wsprintf ((LPSTR)cmd, "-%s", (LPSTR)dlgctrls[item].opt); <br>                                    cmd += strlen(cmd); <br>                                    cmd[0] = 0; <br>                                    argv[++argc] = ++cmd; <br>                                } <br>                            } <br>                            i++; <br>                        } <br> <br>                    } // if (cmdline)... <br> <br>                    EndDialog(hdlg, argc); <br>                    return (TRUE); <br> <br>                case IDCANCEL: <br>                    EndDialog(hdlg, 0); <br>                    return (TRUE); <br>            } <br>            break; <br>    } <br>    return (FALSE); <br> <br>    lParam; // unreferenced formal parameter <br>} <br></code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CREATE.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6370"></a>CREATE.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "console.h" <br> <br>/********************************************************************* <br>* FUNCTION: demoCreate(HANDLE hConOld)                               * <br>*                                                                    * <br>* PURPOSE: demonstrate CreateConsoleScreenBuffer,                    * <br>*          SetConsoleTextAttribute, and                              * <br>*          SetConsoleActiveScreenBuffer. Create a 'help' screen on a * <br>*          new buffer and quickly switch between the main buffer and * <br>*          the help buffer on command without redrawing the entire   * <br>*          screens. SetConsoleTextAttribute will be used to make the * <br>*          help screen a different color.                            * <br>*                                                                    * <br>* INPUT: the output handle to write to                               * <br>**********************************************************************/ <br> <br>void demoCreate(HANDLE hConOld) <br>{ <br>  BOOL bSuccess; <br>  HANDLE hConHelp; /* console for the help screen */ <br>  COORD dwWriteCoord = {0, 0}; /* where to write the screen attributes */ <br>  DWORD cCharsWritten; <br>  HANDLE hStdIn; /* standard input handle */ <br>  CHAR c = 0; /* virtual key code that we will read */ <br>  HANDLE hConCurrent; /* keep track of the current visible console buffer */ <br>  INPUT_RECORD inputBuf; /* console input event record */ <br>  DWORD cInputEvents; <br> <br>  setConTitle(__FILE__); <br>  myPuts(hConOld, "Let's create a help screen in another buffer. Then\n" <br>                  "when the user hits F1, we can easily flip to the help\n" <br>                  "screen and back without recreating the text on the\n" <br>                  "screens by simply changing the active buffer.\n" <br>                  "We'll change the default text attribute with\n" <br>                  "SetConsoleTextAttribute before creating the help screen\n" <br>                  "so that the sample text is in a different color.\n" <br>                  "Hit F1 now for help, and esc to return here.\n" <br>                  "Hit esc from this screen to return to API list."); <br>  /* create a separate console buffer for the help screen */ <br>  hConHelp = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, <br>      FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, CONSOLE_TEXTMODE_BUFFER, <br>      NULL); <br>  PERR(hConHelp != INVALID_HANDLE_VALUE, "CreateConsoleScreenBuffer"); <br>  /* change the color of the help screen */ <br>  bSuccess = FillConsoleOutputAttribute(hConHelp, BACKGROUND_BLUE, <br>      getConX(hConHelp) * getConY(hConHelp), dwWriteCoord, &amp;cCharsWritten); <br>  PERR(bSuccess, "FillConsoleOutputAttribute"); <br>  /* set the color for future text output */ <br>  bSuccess = SetConsoleTextAttribute(hConHelp, FOREGROUND_YELLOW | <br>      FOREGROUND_INTENSITY | BACKGROUND_BLUE); <br>  PERR(bSuccess, "SetConsoleTextAttribute"); <br>  myPuts(hConHelp, "                S u p e r D u p e r B a s e   H e l p\n" <br>                   "\n\n                  F1: search        F6: window\n" <br>                   "                  F2: extract       F7: initialize\n" <br>                   "                  F3: sort          F8: exit\n" <br>                   "                  F4: query         F9: save\n" <br>                   "                  F5: execute       F10: explode\n" <br>                   "                  ESC: exit help"); <br>  hStdIn = GetStdHandle(STD_INPUT_HANDLE); <br>  PERR(hStdIn != INVALID_HANDLE_VALUE, "GetStdHandle"); <br>  /* keep track of the currently visible console */ <br>  hConCurrent = hConOld; <br>  /* switch between the help and previous buffer when user hits F1 or ESC */ <br>  for(;;) <br>    { <br>    do <br>      { <br>      /* throw away any non-keystroke events or any key-up events */ <br>      bSuccess = ReadConsoleInput(hStdIn, &amp;inputBuf, 1, &amp;cInputEvents); <br>      PERR(bSuccess, "ReadConsoleInput"); <br>      } while (inputBuf.EventType != KEY_EVENT || <br>          !inputBuf.Event.KeyEvent.bKeyDown); <br>    /* get the virtual scan code of the key-down event */ <br>    c = (char) inputBuf.Event.KeyEvent.wVirtualKeyCode; <br>    switch(c) <br>      { <br>      case VK_F1: <br>        /* if the current buffer is the original buffer, switch to the */ <br>        /* help buffer */ <br>        if (hConCurrent == hConOld) <br>          { <br>          bSuccess = SetConsoleActiveScreenBuffer(hConHelp); <br>          PERR(bSuccess, "SetConsoleActiveScreenBuffer"); <br>          hConCurrent = hConHelp; <br>          } <br>        break; <br>      case VK_ESCAPE: <br>        /* if the current buffer is the help buffer, switch to the */ <br>        /* original buffer. Otherwise, clean up and return */ <br>        if (hConCurrent == hConHelp) <br>          { <br>          bSuccess = SetConsoleActiveScreenBuffer(hConOld); <br>          PERR(bSuccess, "SetConsoleActiveScreenBuffer"); <br>          hConCurrent = hConOld; <br>          } <br>        else <br>          { <br>          CloseHandle(hConHelp); <br>          return; <br>          } <br>        break; <br>      case VK_F10: <br>        if (hConCurrent == hConHelp) <br>          myPuts(hConHelp, "BOOM!"); <br>        break; <br>      default: <br>        break; <br>      }  /* switch */ <br>    }  /* while */ <br>  return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

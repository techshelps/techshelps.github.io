<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>READCHAR.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6379"></a>READCHAR.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;string.h&gt; <br>#include &lt;malloc.h&gt; <br>#include "console.h" <br> <br>/********************************************************************* <br>* FUNCTION: demoReadConChar(HANDLE hConOut)                          * <br>*                                                                    * <br>* PURPOSE: demonstrate ReadConsoleOutputCharacter. Read the text on  * <br>*          line that the user clicks on and output it to the console * <br>*                                                                    * <br>* INPUT: the console output handle to write to                       * <br>*********************************************************************/ <br> <br>void demoReadConChar(HANDLE hConOut) <br>{ <br>  BOOL bSuccess; <br>  INPUT_RECORD inputBuffer; <br>  DWORD dwStdInMode; <br>  HANDLE hStdIn; <br>  DWORD dwInputEvents; <br>  COORD coordLine; /* coordinates of where to read characters from */ <br>  CHAR *szLine;  /* buffer to hold the line read from the console */ <br>  DWORD dwCharsRead; <br>  int i; <br> <br>  setConTitle(__FILE__); <br>  myPuts(hConOut, "Click on any line containing characters. I will use\n" <br>                  "ReadConsoleOutputCharacter to read that line of text into\n" <br>                  "a buffer, then print that buffer to the console at the\n" <br>                  "current cursor position. Hit ESC to return.\n\n"); <br>  hStdIn = GetStdHandle(STD_INPUT_HANDLE); <br>  PERR(hStdIn != INVALID_HANDLE_VALUE, "GetStdHandle"); <br>  /* save the console mode */ <br>  bSuccess = GetConsoleMode(hStdIn, &amp;dwStdInMode); <br>  PERR(bSuccess, "GetConsoleMode"); <br>  /* enable mouse input */ <br>  bSuccess = SetConsoleMode(hStdIn, dwStdInMode | ENABLE_MOUSE_INPUT); <br>  PERR(bSuccess, "SetConsoleMode"); <br>  /* allocate space for one line */ <br>  szLine = (char *) malloc(getConX(hConOut)); <br>  PERR(szLine, "malloc"); <br>  for(;;) <br>    { <br>    /* get a single input event */ <br>    bSuccess = ReadConsoleInput(hStdIn, &amp;inputBuffer, 1, &amp;dwInputEvents); <br>    PERR(bSuccess, "ReadConsoleInput"); <br>    switch (inputBuffer.EventType) <br>      { <br>      case KEY_EVENT: <br>        /* is it an ESC key? */ <br>        if (inputBuffer.Event.KeyEvent.bKeyDown &amp;&amp; <br>            inputBuffer.Event.KeyEvent.wVirtualKeyCode == VK_ESCAPE) <br>          { <br>          /* set input mode back to what it was originally and return */ <br>          bSuccess = SetConsoleMode(hStdIn, dwStdInMode); <br>          PERR(bSuccess, "SetConsoleMode"); <br>          free(szLine); /* free allocated space for a text line */ <br>          return; <br>          } <br>        break; <br>      case MOUSE_EVENT: <br>        /* was this was a click event? Is any button down or not? */ <br>        if (inputBuffer.Event.MouseEvent.dwEventFlags != MOUSE_MOVED &amp;&amp; <br>            inputBuffer.Event.MouseEvent.dwButtonState) <br>          { <br>          /* read the line where the mouse is, starting at column 0 */ <br>          coordLine.X = 0; <br>          coordLine.Y = inputBuffer.Event.MouseEvent.dwMousePosition.Y; <br>          bSuccess = ReadConsoleOutputCharacter(hConOut, szLine, <br>              getConX(hConOut), coordLine, &amp;dwCharsRead); <br>          PERR(bSuccess, "ReadConsoleOutputCharacter"); <br>          /* strip trailing spaces */ <br>          i = getConX(hConOut) - 1; <br>          szLine[i--] = 0; /* null terminate */ <br>          while (szLine[i] == ' ') <br>            szLine[i--] = 0; <br>          myPuts(hConOut, szLine); <br>          } <br>      } /* switch */ <br>    } /* while */ <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

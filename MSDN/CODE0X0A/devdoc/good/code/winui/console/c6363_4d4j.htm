<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FILLCHAR.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6373"></a>FILLCHAR.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include "console.h" <br> <br>/******************************************************************* <br>* FUNCTION: demoFillChar(HANDLE hConOut)                           * <br>*                                                                  * <br>* PURPOSE: demonstrate FillConsoleOutputCharacter. Fill the entire * <br>*          console with the character that the user hits           * <br>*                                                                  * <br>* INPUT: the output console to fill with characters                * <br>********************************************************************/ <br> <br>void demoFillChar(HANDLE hConOut) <br>{ <br>  HANDLE hStdIn; <br>  INPUT_RECORD inputBuf; <br>  CHAR c; /* ascii character read from the console */ <br>  CONSOLE_SCREEN_BUFFER_INFO csbi; <br>  COORD coordScreen = {0, 1}; /* location to start the attribute fill */ <br>  DWORD cCharsWritten; <br>  BOOL bSuccess;  <br>  DWORD cInputEvents; <br> <br>  setConTitle(__FILE__); <br>  myPuts(hConOut, "Let's fill the console buffer with a given character by\n" <br>                  "using the FillConsoleOutputCharacter API. Hit a key to \n" <br>                  "fill the buffer with (hit ESC to return):"); <br>  hStdIn = GetStdHandle(STD_INPUT_HANDLE); <br>  PERR(hStdIn != INVALID_HANDLE_VALUE, "GetStdHandle"); <br>  for(;;) <br>    { <br>    do <br>      { <br>      /* get input events until you get a key-down event */ <br>      bSuccess = ReadConsoleInput(hStdIn, &amp;inputBuf, 1, &amp;cInputEvents); <br>      PERR(bSuccess, "ReadConsoleInput"); <br>      } while (inputBuf.EventType != KEY_EVENT || <br>            !inputBuf.Event.KeyEvent.bKeyDown); <br>    c = (char) inputBuf.Event.KeyEvent.uChar.AsciiChar; <br>    if (inputBuf.Event.KeyEvent.wVirtualKeyCode == VK_ESCAPE) <br>      break; <br>    /* we need to get the console buffer size */ <br>    bSuccess = GetConsoleScreenBufferInfo(hConOut, &amp;csbi); <br>    PERR(bSuccess, "GetConsoleScreenBufferInfo"); <br>    bSuccess = FillConsoleOutputCharacter(hConOut, /* screen buffer handle */ <br>        c, /* character to write */ <br>        (csbi.dwSize.X * csbi.dwSize.Y) - csbi.dwSize.X, /* number of chars */ <br>        coordScreen, /* x and y coordinates of first cell */ <br>        &amp;cCharsWritten); /* receives number of cells written to */ <br>    PERR(bSuccess, "FillConsoleOutputCharacter"); <br>  } <br>  return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

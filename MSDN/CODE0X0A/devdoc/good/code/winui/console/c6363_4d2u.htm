<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CONMODE.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6366"></a>CONMODE.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;string.h&gt; <br>#include "console.h" <br> <br>/********************************************************************* <br>* FUNCTION: rawOut(HANDLE hConsole, PCHAR s)                         * <br>*                                                                    * <br>* PURPOSE: output the contents of the input buffer to the console    * <br>*          handle in 'raw' mode                                      * <br>*                                                                    * <br>* INPUT: the console handle to write to, and the string to output in * <br>*        'raw' mode                                                  * <br>*********************************************************************/ <br> <br>void rawOut(HANDLE hConsole, PCHAR s) <br>{ <br>  BOOL bSuccess; <br>  DWORD cCharsWritten; <br>  DWORD dwOutputMode; <br> <br>  bSuccess = GetConsoleMode(hConsole, &amp;dwOutputMode); <br>  PERR(bSuccess, "GetconsoleMode"); <br>  /* output the string in raw mode. */ <br>  /* turn off processed output, output the string, and reset output mode */ <br>  bSuccess = SetConsoleMode(hConsole, dwOutputMode &amp; ~ENABLE_PROCESSED_OUTPUT); <br>  PERR(bSuccess, "SetConsoleMode"); <br>  bSuccess = WriteFile(hConsole, s, strlen(s), &amp;cCharsWritten, NULL); <br>  PERR(bSuccess, "WriteFile"); <br>  /* now reset output mode */ <br>  bSuccess = SetConsoleMode(hConsole, dwOutputMode); <br>  PERR(bSuccess, "SetConsoleMode"); <br>  return; <br>} <br> <br>/****************************************************************** <br>* FUNCTION: demoConMode(HANDLE hConOut)                           * <br>*                                                                 * <br>* PURPOSE: demonstrate GetConsoleMode and SetConsoleMode. Display * <br>*          the current console input and output modes, then       * <br>*          demonstrate each console input and output mode         * <br>*                                                                 * <br>*                                                                 * <br>* INPUT: the console output handle to write to                    * <br>******************************************************************/ <br> <br>void demoConMode(HANDLE hConOut) <br>{ <br>  BOOL bSuccess; <br>  DWORD dwOutputMode, dwInputMode; /* save input &amp; output console modes */ <br>  CHAR szTemp[128]; <br>  HANDLE hStdIn; /* standard input handle */ <br>  /* a string to test 'raw' vs. 'processed' output with */ <br>  PCHAR szModeTst = "tab:\t backspace:\b linefeed:\n bell:\a cr:\r"; <br>  DWORD dwRead; <br>  CHAR chBuf[256]; /* buffer to read a user string from the console */ <br>  PCHAR szLong = "This is a line of text that is greater than 80 characters wide. This is a test of ENABLE_WRAP_AT_EOL_OUTPUT."; <br> <br>  setConTitle(__FILE__); <br>  hStdIn = GetStdHandle(STD_INPUT_HANDLE); <br>  PERR(hStdIn != INVALID_HANDLE_VALUE, "GetStdHandle"); <br>  /* get the input mode and save it so that we can restore it later */ <br>  bSuccess = GetConsoleMode(hStdIn, &amp;dwInputMode); <br>  PERR(bSuccess, "GetconsoleMode"); <br>  myPuts(hConOut, "Current console input modes, as reported by GetconsoleMode:"); <br>  sprintf(szTemp, "ENABLE_LINE_INPUT: %s", dwInputMode &amp; ENABLE_LINE_INPUT ? <br>      "on" : "off"); <br>  myPuts(hConOut, szTemp); <br>  sprintf(szTemp, "ENABLE_ECHO_INPUT: %s", dwInputMode &amp; ENABLE_ECHO_INPUT ? <br>      "on" : "off"); <br>  myPuts(hConOut, szTemp); <br>  sprintf(szTemp, "ENABLE_WINDOW_INPUT: %s", dwInputMode &amp; <br>      ENABLE_WINDOW_INPUT ? "on" : "off"); <br>  myPuts(hConOut, szTemp); <br>  sprintf(szTemp, "ENABLE_PROCESSED_INPUT: %s", dwInputMode &amp; <br>      ENABLE_PROCESSED_INPUT ? "on" : "off"); <br>  myPuts(hConOut, szTemp); <br>  bSuccess = GetConsoleMode(hConOut, &amp;dwOutputMode); <br>  PERR(bSuccess, "GetconsoleMode"); <br>  myPuts(hConOut, "\nCurrent console output modes:"); <br>  sprintf(szTemp, "ENABLE_PROCESSED_OUTPUT: %s", dwOutputMode &amp; <br>      ENABLE_PROCESSED_OUTPUT ? "on" : "off"); <br>  myPuts(hConOut, szTemp); <br>  sprintf(szTemp, "ENABLE_WRAP_AT_EOL_OUTPUT: %s", dwOutputMode &amp; <br>      ENABLE_WRAP_AT_EOL_OUTPUT ? "on" : "off"); <br>  myPuts(hConOut, szTemp); <br>  bSuccess = SetConsoleMode(hConOut, dwOutputMode);  /* back to normal */ <br>  PERR(bSuccess, "SetConsoleMode"); <br>  myPuts(hConOut, "\nHit enter to continue..."); <br>  myGetchar(); <br>  cls(hConOut); <br>  myPuts(hConOut, "\nLet's test the console output modes with SetConsoleMode.\n" <br>                  "First we'll output a long line of text with\n" <br>                  "ENABLE_WRAP_AT_EOL_OUTPUT enabled, then with it disabled:\n"); <br>  myPuts(hConOut, szLong); <br>  myPuts(hConOut, "\nNow we'll disable ENABLE_WRAP_AT_EOL_OUTPUT and display the same\n" <br>                  "string. Note how the wrapped line does NOT get displayed\n" <br>                  "on the next line but on the same line:\n"); <br>  /* turn off EOL wrap */ <br>  bSuccess = SetConsoleMode(hConOut, dwOutputMode &amp; <br>      ~ENABLE_WRAP_AT_EOL_OUTPUT); <br>  PERR(bSuccess, "SetConsoleMode"); <br>  myPuts(hConOut, szLong); <br>  /* turn on EOL wrap */ <br>  bSuccess = SetConsoleMode(hConOut, dwOutputMode | <br>      ENABLE_WRAP_AT_EOL_OUTPUT); <br>  PERR(bSuccess, "SetConsoleMode"); <br>  myPuts(hConOut, "\n\nNow let's test processed output. We'll output a string\n" <br>                  "with ENABLE_PROCESSED_OUTPUT disabled, then with it enabled.\n" <br>                  "Note how the backspace, tab, bell, carriage return, and\n" <br>                  "linefeed characters are processed differently:\n"); <br>  /* turn off processed ("cooked") output - now in "raw" mode */ <br>  bSuccess = SetConsoleMode(hConOut, dwOutputMode &amp; ~ENABLE_PROCESSED_OUTPUT); <br>  PERR(bSuccess, "SetConsoleMode"); <br>  /* myPuts() appends a \n, so can't use it for this case */ <br>  bSuccess = WriteFile(hConOut, szModeTst, strlen(szModeTst), &amp;dwRead, NULL); <br>  PERR(bSuccess, "WriteFile"); <br>  /* turn processed ("cooked") mode back on */ <br>  bSuccess = SetConsoleMode(hConOut, dwOutputMode | ENABLE_PROCESSED_OUTPUT); <br>  PERR(bSuccess, "SetConsoleMode"); <br>  myPuts(hConOut, "\nNow we'll set ENABLE_PROCESSED_OUTPUT and output the same\n" <br>                  "string:\n"); <br>  myPuts(hConOut, szModeTst); <br>  myPuts(hConOut, "\nHit enter for the next test..."); <br>  myGetchar(); <br>  cls(hConOut); <br>  myPuts(hConOut, "Now let's test the input modes. First you'll input\n" <br>                  "an input string with ENABLE_PROCESSED_INPUT enabled.\n" <br>                  "We'll output exactly what was read in this mode.\n" <br>                  "Note how characters such as backspace, tab, ctrl+g,\n" <br>                  "carriage return and line feed are interpreted.\n" <br>                  "Enter a line of text, end by hitting enter:"); <br>  /* turn on processed, line, and echo modes. */ <br>  /* MUST turn on echo mode when turning on line mode */ <br>  bSuccess = SetConsoleMode(hStdIn, dwInputMode | ENABLE_PROCESSED_INPUT | <br>      ENABLE_LINE_INPUT | ENABLE_ECHO_INPUT); <br>  PERR(bSuccess, "SetConsoleMode"); <br>  memset(chBuf, 0, sizeof(chBuf)); <br>  bSuccess = ReadFile(hStdIn, chBuf, sizeof(chBuf), &amp;dwRead, NULL); <br>  PERR(bSuccess, "ReadFile"); <br>  /* output the contents of chBuf in raw mode */ <br>  rawOut(hConOut, chBuf); <br>  myPuts(hConOut, "\nNow let's disable ENABLE_PROCESSED_INPUT. Enter another\n" <br>                  "input string:"); <br>  /* turn off processed, line, and echo input. */ <br>  /* MUST turn off echo input when turning off line input */ <br>  bSuccess = SetConsoleMode(hStdIn, dwInputMode &amp; ~ENABLE_PROCESSED_INPUT | <br>      ENABLE_LINE_INPUT | ENABLE_ECHO_INPUT); <br>  PERR(bSuccess, "SetConsoleMode"); <br>  memset(chBuf, 0, sizeof(chBuf)); <br>  bSuccess = ReadFile(hStdIn, chBuf, sizeof(chBuf), &amp;dwRead, NULL); <br>  PERR(bSuccess, "ReadFile");     <br>  rawOut(hConOut, chBuf); <br>  myPuts(hConOut, "\nHit enter to continue..."); <br>  myGetchar(); <br>  cls(hConOut); <br>  myPuts(hConOut, "\n\nLet's turn off ENABLE_LINE_INPUT - all of our input\n" <br>                  "previously has been line-input. We must also disable\n" <br>                  "ENABLE_ECHO_INPUT when disabling this flag. Let's read\n" <br>                  "a single character from the console and we will return\n" <br>                  "immediately with the charater read. Note that the character\n" <br>                  "does not echo. Hit any key:"); <br>  bSuccess = SetConsoleMode(hStdIn, dwInputMode &amp; ~ENABLE_LINE_INPUT &amp; <br>      ~ENABLE_ECHO_INPUT); <br>  PERR(bSuccess, "SetConsoleMode"); <br>  memset(chBuf, 0, sizeof(chBuf)); <br>    bSuccess = ReadFile(hStdIn, chBuf, sizeof(chBuf), &amp;dwRead, NULL); <br>  PERR(bSuccess, "ReadFile");     <br>  myPuts(hConOut, "\nHere is the character read:"); <br>  myPuts(hConOut, chBuf); <br>  myPuts(hConOut, "\n\nHit enter to continue..."); <br>  bSuccess = SetConsoleMode(hStdIn, dwInputMode | ENABLE_WINDOW_INPUT); <br>  PERR(bSuccess, "SetConsoleMode"); <br>  myGetchar(); <br>  return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

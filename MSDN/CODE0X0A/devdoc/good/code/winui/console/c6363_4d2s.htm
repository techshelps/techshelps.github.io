<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CODEPAGE.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6364"></a>CODEPAGE.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "console.h" <br> <br>/* Note: demos for Get/SetConsoleCP not implemented */ <br> <br>/********************************************************************* <br>* FUNCTION: showCP(HANDLE hConOut, UINT uiCP)                        * <br>*                                                                    * <br>* PURPOSE: dump the 256 character set in the given codepage          * <br>*                                                                    * <br>* INPUT: the console output handle to use and the desired code page  * <br>*        to display the characters in                                * <br>*********************************************************************/ <br> <br>void showCP(HANDLE hConOut, UINT uiCP) <br>{ <br>  BOOL bSuccess; <br>  DWORD dwSaveMode; /* store the current console mode to restore later */ <br>  UINT uiSaveCP; /* store the current code page to restore later */ <br>  int i; <br>  DWORD dwWritten; <br>   <br>  /* save the current output mode and code page */ <br>  uiSaveCP = GetConsoleOutputCP(); <br>  bSuccess = GetConsoleMode(hConOut, &amp;dwSaveMode); <br>  PERR(bSuccess, "GetconsoleMode"); <br>  /* turn off processed output so that all chars will display */ <br>  bSuccess = SetConsoleMode(hConOut, dwSaveMode &amp; ~ENABLE_PROCESSED_OUTPUT); <br>  PERR(bSuccess, "SetConsoleMode"); <br>  bSuccess = SetConsoleOutputCP(uiCP); <br>  PERR(bSuccess, "SetConsoleOutputCP"); <br>  for (i = 0; i &lt; 256; i++) <br>    WriteConsole(hConOut, &amp;i, 1, &amp;dwWritten, NULL); <br>  /* now reset to original code page and output mode */ <br>  SetConsoleOutputCP(uiSaveCP); <br>  bSuccess = SetConsoleMode(hConOut, dwSaveMode); <br>  PERR(bSuccess, "SetConsoleMode"); <br>  return; <br>} <br> <br>/********************************************************************* <br>* FUNCTION: demoOutputCodePage(HANDLE hConOut)                       * <br>*                                                                    * <br>* PURPOSE: demonstrate SetConsoleOutputCP and GetConsoleOutputCP.    * <br>*          Dump the 256 character set for each code paged installed  * <br>*          in the system.                                            * <br>*                                                                    * <br>* INPUT: the console output handle to manipulate the codepage for    * <br>*********************************************************************/ <br> <br>void demoOutputCodePage(HANDLE hConOut) <br>{ <br>  DWORD iValue = 0; /* index value for RegEnumValue */ <br>  LONG lSuccess; /* registry API return code */ <br>  HKEY hKey; /* handle to registry key containing codepage info */ <br>  char szValue[16], szData[16]; /* value and data info from registry */ <br>  DWORD dwType, cchValue, cbData; <br>  UINT uiCP; /* the code page number that we extract from the registry */ <br>  char szTemp[128]; <br>  BOOL bSuccess; <br>  OSVERSIONINFO osVer; /* for GetVersionEx() */ <br> <br>  /* check if Win95, if so, display notice and return - the console codepage */ <br>  /* APIs are not supported under Win95. */ <br>  osVer.dwOSVersionInfoSize = sizeof(osVer); <br>  bSuccess = GetVersionEx(&amp;osVer); <br>  PERR(bSuccess, "GetVersionEx"); <br>  if (osVer.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS) <br>    { <br>    MessageBox(NULL,  <br>        "The console codepage APIs are not supported on Windows 95", <br>        "Console API Test Application", MB_OK ); <br>    return; <br>    } <br>  setConTitle(__FILE__); <br>  /* set the color for future text output */ <br>  bSuccess = SetConsoleTextAttribute(hConOut, FOREGROUND_YELLOW | <br>      FOREGROUND_INTENSITY | BACKGROUND_BLUE); <br>  PERR(bSuccess, "SetConsoleTextAttribute"); <br>  cls(hConOut); /* clear screen to new attributes */ <br>  myPuts(hConOut, "Warning: code page info will not display properly unless you are\n" <br>         "using a TrueType font in the console. From the system menu, select\n" <br>         "Fonts, then select a TrueType font from the list available."); <br>  /* open the key containing all the code page info */ <br>  lSuccess = RegOpenKeyEx(HKEY_LOCAL_MACHINE, <br>    "SYSTEM\\CurrentControlSet\\Control\\Nls\\CodePage", 0, KEY_QUERY_VALUE, <br>    &amp;hKey); <br>  PERR(lSuccess == ERROR_SUCCESS, "RegOpenKeyEx"); <br>  while(TRUE) <br>  { <br>    cchValue = sizeof(szValue); <br>    cbData = sizeof(szData); <br>    /* get the next code page entry */ <br>    lSuccess = RegEnumValue(hKey, iValue++, szValue, &amp;cchValue, NULL, <br>      &amp;dwType, szData, &amp;cbData); <br>    if (lSuccess == ERROR_NO_MORE_ITEMS) <br>      break; <br>    if (!szData[0]) /* if value data is NULL, it's an invalid code page; skip */ <br>      continue; <br>    if (!(uiCP = atoi(szValue))) /* if value name is not a number, skip */ <br>      continue; <br>    sprintf(szTemp, "\n\nCodepage: %s", szValue); <br>    myPuts(hConOut, szTemp); <br>    /* set code page and display all 256 chars on the console */ <br>    showCP(hConOut, uiCP); <br>  } <br>  myPuts(hConOut, "\n\nHit enter to continue..."); <br>  myGetchar(); <br>  return; <br>} <br> <br> <br>/********************************************************************* <br>* FUNCTION: demoInputCodePage(HANDLE hConOut)                        * <br>*                                                                    * <br>* PURPOSE: demonstrate SetConsoleInputCP and GetConsoleInputCP.      * <br>*          Read and display keyboard input, including special chars. * <br>*                                                                    * <br>* INPUT: the console output handle to manipulate the codepage for    * <br>*********************************************************************/ <br> <br>void demoInputCodePage(HANDLE hConOut) <br>{ <br>  myPuts(hConOut, "SetConsoleCP and GetConsoleCP demos"); <br>  myPuts(hConOut, "not implemented yet."); <br>  myPuts(hConOut, "\n\nHit enter to continue..."); <br>  myGetchar(); <br>  return; <br>} <br> </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FLUSH.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6374"></a>FLUSH.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include "console.h" <br> <br>/********************************************************************* <br>* FUNCTION: demoFlush(HANDLE hConOut)                                * <br>*                                                                    * <br>* PURPOSE: demonstrate FlushConsoleInputBuffer. Slowly read from the * <br>*          iput queue, allowing a backlog of input events to start   * <br>*          filling the queue. Flush the input queue after outputting * <br>*          every fifth character.                                    * <br>*                                                                    * <br>* INPUT: the output console handle to write to                       * <br>*********************************************************************/ <br> <br>void demoFlush(HANDLE hConOut) <br>{ <br>  HANDLE hStdIn; <br>  INPUT_RECORD InputBuffer; <br>  DWORD dwInputEvents; <br>  int i = 0; <br>  BOOL bSuccess; <br>  DWORD dwBytesWritten; <br> <br>  setConTitle(__FILE__); <br>  hStdIn = GetStdHandle(STD_INPUT_HANDLE); <br>  PERR(hStdIn != INVALID_HANDLE_VALUE, "GetStdHandle"); <br>  myPuts(hConOut, "Type a number of characters quickly. I will read 5\n" <br>                  "characters from the input buffer with a Sleep() delay\n" <br>                  "which will allow it to fill with characters. After 5\n" <br>                  "characters I will flush the input buffer with\n" <br>                  "FlushConsoleInputBuffer and restart the sequence. Note\n" <br>                  "that any characters you've typed that haven't been read\n" <br>                  "yet are lost due to the flush.\n" <br>                  "Enter characters (hit ESC to return):"); <br>  for(;;) <br>    { <br>    bSuccess = ReadConsoleInput(hStdIn, &amp;InputBuffer, 1, &amp;dwInputEvents); <br>    PERR(bSuccess, "ReadConsoleInput"); <br>    /* is it a key down event? */ <br>    if (InputBuffer.EventType == KEY_EVENT &amp;&amp;  <br>        InputBuffer.Event.KeyEvent.bKeyDown) <br>      { <br>      if (InputBuffer.Event.KeyEvent.wVirtualKeyCode == VK_ESCAPE) <br>        return; <br>      /* write the ascii character out to the console */ <br>      bSuccess = WriteFile(hConOut, <br>          &amp;InputBuffer.Event.KeyEvent.uChar.AsciiChar, <br>          1, &amp;dwBytesWritten, NULL); <br>      PERR(bSuccess, "WriteFile"); <br>      Sleep(1000); /* pause for 1s */ <br>      i++; <br>      if (i &gt; 5) <br>        { <br>        /* flush the input buffer */ <br>        bSuccess = FlushConsoleInputBuffer(hStdIn); <br>        PERR(bSuccess, "FlushConsoleInputBuffer"); <br>        i = 0; <br>        } <br>      } /* if */ <br>    } /* while */ <br>  return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

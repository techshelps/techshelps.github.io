<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HANDLER.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6377"></a>HANDLER.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;string.h&gt; <br>#include "console.h" <br> <br>HANDLE hConsole; /* current console output handle */ <br> <br>/******************************************************************* <br>* FUNCTION: handler_routine(DWORD dwCtrlType)                      * <br>*                                                                  * <br>* PURPOSE: this is the control handler routine activated by ctrl+c * <br>*          or ctrl+break keys                                      * <br>*                                                                  * <br>* INPUT: the type of control event                                 * <br>*******************************************************************/ <br> <br>BOOL WINAPI handler_routine(DWORD dwCtrlType) <br>{ <br>  CHAR szTemp[64]; <br> <br>  /* print out what control event was received to the current console */ <br>  switch(dwCtrlType) <br>    { <br>    case CTRL_C_EVENT: <br>      strcpy(szTemp, "CTRL_C_EVENT"); <br>      break; <br>    case CTRL_BREAK_EVENT: <br>      strcpy(szTemp, "CTRL_BREAK_EVENT"); <br>      break; <br>    case CTRL_CLOSE_EVENT: <br>      strcpy(szTemp, "CTRL_CLOSE_EVENT"); <br>      break; <br>    case CTRL_LOGOFF_EVENT: <br>      strcpy(szTemp, "CTRL_LOGOFF_EVENT"); <br>      break; <br>    case CTRL_SHUTDOWN_EVENT: <br>      strcpy(szTemp, "CTRL_SHUTDOWN_EVENT"); <br>      break; <br>    default: <br>      strcpy(szTemp, "unknown event"); <br>      break; <br>    } <br>  strcat(szTemp, " detected"); <br>  myPuts(hConsole, szTemp); <br>  return(TRUE); <br>} <br> <br> <br>/********************************************************************* <br>* FUNCTION: demoSetCtrlHandler(HANDLE hConOut)                       * <br>*                                                                    * <br>* PURPOSE: demonstrate SetConsoleCtrlHandler by setting a ctrl+break * <br>*          and ctrl+c handler. When the user hits either one of      * <br>*          these keys, a message is printed to the console           * <br>*          indicating the event.                                     * <br>*                                                                    * <br>* INPUT: the output handle to write to                               * <br>*********************************************************************/ <br> <br>void demoSetCtrlHandler(HANDLE hConOut) <br>{ <br>  BOOL bSuccess; <br> <br>  setConTitle(__FILE__); <br>  hConsole = hConOut; /* set global console output handle for handler */ <br>  myPuts(hConOut, "Let's install a ctrl+c and ctrl+break handler for this\n" <br>                  "process. Hit ctrl+c and ctrl+break a few times to test\n" <br>                  "the handler. Hit enter to return..."); <br>  /* set handler for this process */ <br>  bSuccess = SetConsoleCtrlHandler(handler_routine, TRUE); <br>  PERR(bSuccess, "SetConsoleCtrlHandler"); <br>  /* wait for user to hit enter */ <br>  while (myGetchar() != 0xd) <br>    ; <br>  /* now let's generate some control events */ <br>  myPuts(hConOut, "Now we'll use GenerateConsoleCtrlEvent to generate a\n" <br>                  "ctrl+c and a ctrl+break event...\n"); <br>  bSuccess = GenerateConsoleCtrlEvent(CTRL_C_EVENT, 0); <br>  PERR(bSuccess, "GenerateConsoleCtrlEvent"); <br>  bSuccess = GenerateConsoleCtrlEvent(CTRL_BREAK_EVENT, 0); <br>  PERR(bSuccess, "GenerateConsoleCtrlEvent"); <br>  Sleep(1000); /* give ctrl handle time to output messages */ <br>  myPuts(hConOut, "\nNow choose 'Close' then 'Cancel' from the system\n" <br>                  "menu of this console and note that we receive a\n" <br>                  "CTRL_CLOSE_EVENT...\n"); <br>  myPuts(hConOut, "\nHit enter to continue..."); <br>  myGetchar(); <br>  /* remove our handler from the list of handlers */ <br>  bSuccess = SetConsoleCtrlHandler(handler_routine, FALSE); <br>  PERR(bSuccess, "SetConsoleCtrlHandler"); <br>  return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

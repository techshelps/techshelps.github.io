<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CURSOR.C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>
<h2><a name="_code_context6371"></a>CURSOR.C</h2>
<pre><code><br>/******************************************************************************\ <br>*       This is a part of the Microsoft Source Code Samples.  <br>*       Copyright 1993 - 1998 Microsoft Corporation. <br>*       All rights reserved.  <br>*       This source code is only intended as a supplement to  <br>*       Microsoft Development Tools and/or WinHelp documentation. <br>*       See these sources for detailed information regarding the  <br>*       Microsoft samples programs. <br>\******************************************************************************/ <br> <br>#include &lt;windows.h&gt; <br>#include &lt;stdio.h&gt; <br>#include "console.h" <br> <br>/********************************************************************* <br>* FUNCTION: demoCursor(HANDLE hConOut)                               * <br>*                                                                    * <br>* PURPOSE: demonstrate GetConsoleCursorInfo, SetConsoleCursorInfo,   * <br>*          and SetConsoleCursorPosition. Show the current cursor     * <br>*          information, then have the cursor follow the mouse around * <br>*          the screen. Shrink the cursor size when the user clicks   * <br>*          one button, and grow the cursor when he clicks the other. * <br>*                                                                    * <br>* INPUT: the console output handle to write to and manipulate the    * <br>*        cursor for.                                                 * <br>*********************************************************************/ <br> <br>void demoCursor(HANDLE hConOut) <br>{ <br>  BOOL bSuccess; <br>  /* to set initial size and visibility of cursor */ <br>  CONSOLE_CURSOR_INFO cci; <br>  INPUT_RECORD inputBuffer; <br>  DWORD dwInputEvents; <br>  HANDLE hStdIn; <br>  CHAR szTemp[128]; <br> <br>  setConTitle(__FILE__); <br>  myPuts(hConOut, "Current cursor information, as reported by\n" <br>                  "GetConsoleCursorInfo:\n"); <br>  bSuccess = GetConsoleCursorInfo(hConOut, &amp;cci); <br>  PERR(bSuccess, "GetConsoleCursorInfo"); <br>  sprintf(szTemp, "Cursor size (in percent maximum): %d", cci.dwSize); <br>  myPuts(hConOut, szTemp); <br>  sprintf(szTemp, "Cursor visible: %s", cci.bVisible ? "TRUE" : "FALSE"); <br>  myPuts(hConOut, szTemp); <br>  myPuts(hConOut, "\nLet's use SetConsoleCursorPosition to have the console\n" <br>                  "cursor follow the mouse pointer around on the screen.\n" <br>                  "When the left mouse button is clicked, we'll use \n" <br>                  "SetConsoleCursorInfo to increase the cursor size by 10%.\n" <br>                  "When the right mouse button is clicked, the cursor size\n" <br>                  "will be decreased by 10%. To return, hit ESC."); <br>  hStdIn = GetStdHandle(STD_INPUT_HANDLE); <br>  for(;;) <br>    { <br>      /* get an input event */ <br>    bSuccess = ReadConsoleInput(hStdIn, &amp;inputBuffer, 1, &amp;dwInputEvents); <br>    PERR(bSuccess, "ReadConsoleInput"); <br>    switch (inputBuffer.EventType) <br>      { <br>      case KEY_EVENT: <br>        /* is it a key-down event? Is it an ESC char? If so return */ <br>        if (inputBuffer.Event.KeyEvent.bKeyDown &amp;&amp; <br>            inputBuffer.Event.KeyEvent.wVirtualKeyCode == VK_ESCAPE) <br>          return; <br>        break; <br>      case MOUSE_EVENT: <br>        /* if the mouse moved draw the cursor at the mouse position */ <br>        if (inputBuffer.Event.MouseEvent.dwEventFlags == MOUSE_MOVED) <br>          { <br>          bSuccess = SetConsoleCursorPosition(hConOut, <br>              inputBuffer.Event.MouseEvent.dwMousePosition); <br>          PERR(bSuccess, "SetConsoleCursorPosition"); <br>          } <br>        /* if the mouse is clicked, increase/decrease cursor size. */ <br>        /* Consider a double click a single click for this sample */ <br>        if (!inputBuffer.Event.MouseEvent.dwEventFlags || /* a click */ <br>            inputBuffer.Event.MouseEvent.dwEventFlags == DOUBLE_CLICK) <br>          { <br>          /* is the leftmost mouse button is down? If so, increase cursor */ <br>          if (inputBuffer.Event.MouseEvent.dwButtonState == <br>              FROM_LEFT_1ST_BUTTON_PRESSED) <br>            { <br>            /* if cursor size grows &gt; 100, wrap around to small size */ <br>            cci.dwSize = (cci.dwSize + 10) % 100 + 1; <br>            bSuccess = SetConsoleCursorInfo(hConOut, &amp;cci); <br>            PERR(bSuccess, "SetConsoleCursorInfo"); <br>            } <br>          /* is the rightmost button is down? */ <br>          if (inputBuffer.Event.MouseEvent.dwButtonState == <br>              RIGHTMOST_BUTTON_PRESSED) <br>            { <br>            /* if cursor size &lt; 0, wrap around to large size */ <br>            cci.dwSize -= 10; <br>            if ((int) cci.dwSize &lt; 1) <br>              cci.dwSize = 100; <br>            bSuccess = SetConsoleCursorInfo(hConOut, &amp;cci); <br>            PERR(bSuccess, "SetConsoleCursorInfo"); <br>            } <br>          /* other buttons will be ignored */ <br>          } <br>        break; <br>      } /* switch */ <br>    }  /* while */ <br>  return; <br>} </code></pre>
<p>&nbsp;</p></body>
</HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Designing for x86-based and RISC-based PCs</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF"><font face="verdana,arial,helvetica" size="2">

<H2 CLASS="h1">Designing for x86-based and RISC-based PCs</H2><P CLASS="t">Windows&nbsp;NT and Windows&nbsp;95 are designed to run on platforms that use Intel and equivalent microprocessors, referred to as "x86-based systems" in this guide. These operating systems can run on computers running with Intel 80486-class, Pentium-class, or Pentium Pro-class processors, or equivalent microprocessors that implement the complete 486 instruction set.</P>
<P CLASS="t">Windows NT can also run on RISC-based computers, which includes computers with MIPS R4000 or Digital Alpha 21064 (EV4) or higher processors, or computers that use the IBM PowerPC Architecture.</P>
<UL><LI>When Windows&nbsp;NT is running on an x86-based processor, a virtual-86 processor mode allows direct execution of most instructions in MS-DOS – based applications. A few instructions, such as I/O instructions, must be emulated to virtualize the hardware.</LI><LI>When Windows&nbsp;NT is running on a RISC-based processor, hardware support for executing x86 instructions is not available, so Windows&nbsp;NT emulates all x86 instructions and provides a virtual hardware environment using the Virtual Device Manager (VDM). The Windows&nbsp;NT VDM also supports ROM BIOS interrupt services, MS-DOS Interrupt 21 services, and virtual hardware for devices using virtual device drivers (VDDs).</LI></UL><P CLASS="t">This guide provides complete hardware design guidelines for the x86-based computer, whether it is running Windows&nbsp;95 or Windows NT, plus requirements for RISC-based PCs that run Windows&nbsp;NT. There is no future plan to enable Windows 95 to run on RISC-based PCs.</P>
<P CLASS="t">Advanced RISC computing (ARC) refers to a RISC-based computer architecture standard associated with the ACE consortium. Windows NT runs on top of ARC-compliant PCs, including both RISC- and CISC-based platforms that supply the following components to the operating-system loader:</P>
<UL><LI>For ACE-compliant platforms, such as most MIPS systems, the system firmware supports bootstrap loading and execution as an "abstracted" set of ARC routines and ARC devices.</LI><LI>For x86-based platforms, a Windows&nbsp;NT hardware recognizer (Ntdetect) finds devices necessary to bootstrap the system by querying the ROM BIOS and then builds a hardware database that emulates the RISC-based ARC firmware.</LI><LI>For both kinds of platforms, a hardware abstraction layer (HAL) interfaces between the hardware and the system. Device drivers for certain types of devices create an alias between the names of their device objects and the corresponding ARC device name by calling the appropriate API.</LI></UL><P CLASS="t">In Windows&nbsp;NT, for some devices there are no differences in the requirements for supporting any microprocessor platform. For example, a network adapter driver calls DMA-related functions of the NDIS interface library for DMA operations between the host and the network adapter. These functions support maximized portability, so the driver can run on both x86-based and RISC-based architectures.</P>
<P CLASS="t">However, some differences in microprocessor platform requirements must be addressed in the Windows&nbsp;NT device driver. For example:</P>
<UL><LI>Phase 1 of system startup for Windows&nbsp;NT is microprocessor platform-specific. On x86-based PCs, the hardware boot ROM loads a boot sector, which loads the NTLDR.
<P CLASS="lt1">For most RISC-based platforms, the firmware loads necessary ARC drivers, acquires hardware configuration data, and loads the OSLOADER.</P></LI><LI>Phase 2 of Windows&nbsp;NT system startup sets up memory, captures hardware configuration data, constructs a description of the hardware in memory, and puts a pointer to this description into the loader block. 
<P CLASS="lt1">On x86-based PCs, a hardware recognizer called Ntdetect queries the ROMs, probes the hardware, and collects as much information as possible about the I/O buses and peripheral devices in the PC system.</P>

<P CLASS="lt1">On RISC-based PCs, the ARC Query Config functions are called to accomplish the same thing.</P></LI><LI>On x86-based PCs, there is no difference between a Win32 address and a&nbsp;DMA address as programmed by the MS-DOS – based application to the DMA&nbsp;chip.
<P CLASS="lt1">On RISC-based PCs, you must add the offset from VDM 0 to DOS 0:0 to convert a DMA address to a Win32 address.</P></LI><LI>On x86-based PCs running Windows NT, there are two kinds of video miniport drivers: VGA-compatible miniports and miniports that rely on having the system-supplied VGA miniport driver or another VGA-compatible SVGA miniport driver loaded concurrently.
<P CLASS="lt1">Miniport drivers on RISC-based platforms rely on the system-supplied VGA support, if it is necessary. For all RISC-based platforms running Windows NT, video miniport drivers need not supply any special support for full-screen MS-DOS – based applications. Instead, video miniport drivers must be set up to configure themselves in the registry with VgaCompatible=false.</P></LI></UL></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Plug and Play for PCI Controllers and Peripherals</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF"><font face="verdana,arial,helvetica" size="2">

<H2 CLASS="h1">Plug and Play for PCI Controllers and Peripherals</H2><P CLASS="t">This section summarizes the Plug and Play requirements for PCI devices.</P>
<P CLASS="nt"><FONT CLASS="nh"><B>Note</B></FONT>  The recommendation for PC&nbsp;95, "PCI-to-PCI bridge configured but not enabled by the BIOS," is replaced in PC&nbsp;97 by the requirement in this section for BIOS support for IRQ routing.</P>
<P CLASS="h4"><B>9. PCI 2.1 Configuration Space for Plug and Play device identifier</B></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="25%" VALIGN="TOP"><COL WIDTH="25%" VALIGN="TOP"><COL WIDTH="25%" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Required</TD><TD VALIGN="TOP"></TD><TD VALIGN="TOP"></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">The PCI specification describes the configuration register space used by the system to identify and configure each device attached to the bus. This configuration space is made up of a 256-byte field for each device and contains sufficient information for the system to identify the capabilities of the device. Configuration of the device is also controlled from this register space.</P>
<P CLASS="t">The configuration register space is made up of a header region and a device-dependent region. Each configuration space must have a 64-byte header at offset&nbsp;0. All of the device registers that the device circuit uses for initialization, configuration, and catastrophic error handling must fit within the space between byte 64 and byte 255. All other registers that the device uses during normal operation must be located in normal I/O or memory space. Unimplemented registers or reads to reserved registers must complete normally and return zero (0). Writes to reserved registers must complete normally, and the data must be discarded.</P>
<P CLASS="h4"><B>10. PCI Specification 2.1 Subsystem IDs</B></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="25%" VALIGN="TOP"><COL WIDTH="25%" VALIGN="TOP"><COL WIDTH="25%" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Required</TD><TD VALIGN="TOP"></TD><TD VALIGN="TOP"></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">The following diagram shows the two registers added to the Configuration Space Header for PCI Specification 2.1. Although these registers are only recommended in the PCI specification, they are mandatory for PC 97. Support of these registers requires non-zero values to be populated for both the Subsystem ID and Subsystem Vendor ID. These values must be populated prior to the system BIOS or system software accessing the PCI configuration space, as stated in the PCI 2.1 specification. The recommended method for populating these registers is by using serial ROMs.</P>
<P CLASS="ttl"><B>New registers in configuration space header for PCI version 2.1</B></P>

<TABLE COLS="4" BORDER="0" CELLPADDING="5">
<COLGROUP>
<COL WIDTH="25%" VALIGN="TOP">
<COL WIDTH="25%" VALIGN="TOP">
<COL WIDTH="25%" VALIGN="TOP">
<COL WIDTH="25%" VALIGN="TOP">
</COLGROUP>
<TBODY>
<TR>
<TD VALIGN="TOP">31</TD>
<TD VALIGN="TOP">16</TD>
<TD VALIGN="TOP">15</TD><TD VALIGN="TOP">0</TD>
<TD VALIGN="TOP"></TD>
</TR>
<TR>
<TD VALIGN="TOP">Subsystem ID</TD>
<TD VALIGN="TOP">Subsystem Vendor ID</TD>
<TD VALIGN="TOP">2Ch</TD>
<TD VALIGN="TOP"></TD>
</TR>
</TBODY>
</TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">These fields are important for the correct enumeration of a device. When the Subsystem fields are populated correctly for your adapter, Windows&nbsp;95 can differentiate between adapters based on the same PCI chip.</P>
<P CLASS="t">The Subsystem IDs also allow Windows to load system miniports for system board devices. Thus, Subsystem IDs are also required on system board devices, but not for core chip sets.</P>
<P CLASS="t">The exceptions to this requirement are PCI-to-PCI bridges and core chip sets.</P>
<P CLASS="h4"><B>11. Configuration space populated correctly</B></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="25%" VALIGN="TOP"><COL WIDTH="25%" VALIGN="TOP"><COL WIDTH="25%" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Required</TD><TD VALIGN="TOP"></TD><TD VALIGN="TOP"></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">Windows&nbsp;95 places extra constraints on a few configuration registers and has uncovered some problem usage of other registers. Microsoft provides a program named Pci.exe to help you debug the use of your configuration space. This program is available on the Microsoft FTP server, as described in the "Resources and References for PCI" section at the end of this chapter. </P>
<P CLASS="t">The following items are specific requirements for the configuration space:</P>
<UL><LI>Populate the Class Code Register (09h) for all devices.
<P CLASS="lt1">Follow the Base Class, Sub-Class, and Programming Interface values outlined in the PCI 2.1 specification.</P></LI><LI>Devices must not fill Base Address Registers with random values.
<P CLASS="lt1">Devices must not attempt to fill in random values to these registers. See the PCI 2.1 specification for the correct usage of these registers. Notice that Base Address Registers (10, 14, 18, 1C, 20, and 24h) should return zero (0) if they are not used, indicating that no memory or I/O space is needed.</P></LI></UL><P CLASS="t">Also, for performance reasons, it is recommended that runtime registers for PCI devices should not be placed in the configuration space.</P>
<P CLASS="h4"><B>12. BIOS support for IRQ routing, for x86-based systems</B></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="25%" VALIGN="TOP"><COL WIDTH="25%" VALIGN="TOP"><COL WIDTH="25%" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Required</TD><TD VALIGN="TOP"></TD><TD VALIGN="TOP"></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">The BIOS must support IRQ routing using the method defined in the PCI 2.1 IRQ Routing engineering change request (ECR). The addition of IRQ routing support in PCI 2.1 allows the operating system better control over PCI interrupt routing, allowing the operating system to configure bridges and devices beyond bridges. </P>
<P CLASS="nt"><FONT CLASS="nh"><B>Note</B></FONT>  The BIOS should support a "BIOS Flag" that the OEM sets, selecting by inference the level of PCI support within the operating system, depending on which operating system is installed in the factory or selected by the end user. The BIOS should allow the OEM to select between MS-DOS/Windows 3.11, Windows&nbsp;95, and future Windows versions, thereby informing the BIOS about how much of the PCI configuration and enabling work should be done. </P>
<P CLASS="h4"><B>13. BIOS does not configure I/O systems to share PCI interrupts</B></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="25%" VALIGN="TOP"><COL WIDTH="25%" VALIGN="TOP"><COL WIDTH="25%" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Recommended</TD><TD VALIGN="TOP"></TD><TD VALIGN="TOP"></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">This applies to boot devices configured by the BIOS on x86-based systems. All other devices should be configured by Windows. Design the BIOS so that it does not configure the I/O systems in the PC to share PCI interrupts for boot devices. </P>
<P CLASS="t">Windows&nbsp;95 does not support sharing an IRQ between real-mode and protected-mode code within the I/O subsystem — an example could be, an NDIS 2 driver (real mode) and a SCSI miniport driver (protected mode) for two PCI devices that share the same IRQ. The problem is the IRQ needs to be reflected to real mode for the NDIS 2 driver to work. However, if the IRQ is reflected to real mode, the real-mode SCSI driver (which usually is not called because Windows&nbsp;95 takes over in protected mode) might touch the hardware, which would cause the SCSI miniport to be confused. Windows&nbsp;95 solves this problem by switching everything either to protected mode or by falling back to real mode.</P>
<P CLASS="h4"><B>14. BIOS configures device IRQ and writes to the Interrupt Line Register</B></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="25%" VALIGN="TOP"><COL WIDTH="25%" VALIGN="TOP"><COL WIDTH="25%" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">Required</TD><TD VALIGN="TOP"></TD><TD VALIGN="TOP"></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">This applies to boot devices configured by the BIOS on x86-based systems. All other devices should be configured by Windows, because after an IRQ is assigned by the system BIOS, Windows cannot change the IRQ if necessary. If the BIOS assigns the interrupt and Windows needs it for another device, an IRQ sharing problem occurs.</P>
<P CLASS="t">The BIOS must configure the device IRQ and write the IRQ into the Interrupt Line Register 3Ch, even if the BIOS does not enable the device. This way, Windows can still enable the device with the known IRQ, if possible, at configuration time. Otherwise, if the IRQ is not known, there is no way that Windows can enable the device, even if all other resources are available. </P></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rotation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_rotation"></a>Rotation</h3>
<p>
Many CAD applications provide features that rotate objects drawn in the client area. Applications that include rotation capabilities use the <a href="cordspac_57cd.htm"><b>SetWorldTransform</b></a> function to set the appropriate world-space to page-space transformation. This function receives a pointer to an <a href="cordspac_4tma.htm"><b>XFORM</b></a> structure containing the appropriate values. The <b>eM11</b>, <b>eM12</b>, <b>eM21</b>, and <b>eM22</b> members of <b>XFORM</b> specify, respectively, the cosine, sine, negative sine, and cosine of the angle of rotation. </p>
<p>
When <i>rotation</i> occurs, the points that constitute an object are rotated with respect to the coordinate-space origin. The following illustration shows a 20- by 20-unit rectangle rotated 30 degrees when copied from world coordinate space to page coordinate space. </p>
<p>
<img src="images/cstrn_11.gif" border=0></p>
<p>
In the preceding illustration, each point in the rectangle was rotated 30 degrees with respect to the coordinate-space origin. </p>
<p>
The following algorithm computes the new x-coordinate (<i>x</i>') for a point (<i>x</i>,<i>y</i>) that is rotated by angle <i>A</i> with respect to the coordinate-space origin. </p>
<pre><code>x' = (x * cos A) - (y * sin A) 
 </code></pre>
<p>
The following algorithm computes the y-coordinate (<i>y</i>') for a point (<i>x</i>,<i>y</i>) that is rotated by the angle <i>A</i> with respect to the origin. </p>
<pre><code>y' = (x * sin A) + (y * cos A) 
 </code></pre>
<p>
The two rotation transformations can be combined in a 2-by-2 matrix as follows. </p>
<pre><code>|x' y'| == |x y| * | cos A   sin A| 
                   |-sin A   cos A| 
 </code></pre>
<p>
The 2-by-2 matrix that produced the rotation contains the following values. </p>
<pre><code>| .8660    .5000| 
|-.5000    .8660| 
 </code></pre>
<h4>Rotation Algorithm Derivation</h4>
<p>
Rotation algorithms are based on trigonometry's addition theorem stating that the trigonometric function of a sum of two angles (<i>A1</i> and <i>A2</i>) can be expressed in terms of the trigonometric functions of the two angles. </p>
<pre><code>sin(A1 + A2) = (sin A1 * cos A2) + (cos A1 * sin A2) 
cos(A1 + A2) = (cos A1 * cos A2) - (sin A1 * sin A2) 
 </code></pre>
<p>
The following illustration shows a point <i>p</i> rotated counterclockwise to a new position <i>p'</i>. In addition, it shows two triangles formed by a line drawn from the coordinate-space origin to each point and a line drawn from each point through the x-axis. </p>
<p>
<img src="images/cstrn_12.gif" border=0></p>
<p>
Using trigonometry, the x-coordinate of point <i>p</i> can be obtained by multiplying the length of the hypotenuse <i>h</i> by the cosine of <i>A1</i>. </p>
<pre><code>x = h * cos A1 
 </code></pre>
<p>
The y-coordinate of point <i>p</i> can be obtained by multiplying the length of the hypotenuse <i>h</i> by the sine of <i>A1</i>. </p>
<pre><code>y = h * sin A1 
 </code></pre>
<p>
Likewise, the x-coordinate of point <i>p'</i> can be obtained by multiplying the length of the hypotenuse <i>h</i> by the cosine of (<i>A1</i> + <i>A2</i>). </p>
<pre><code>x' = h * cos (A1 + A2) 
 </code></pre>
<p>
Finally, the y-coordinate of point <i>p'</i> can be obtained by multiplying the length of the hypotenuse <i>h</i> by the sine of (<i>A1</i> + <i>A2</i>). </p>
<pre><code>y' = h * sin (A1 + A2) 
 </code></pre>
<p>
Using the addition theorem, the preceding algorithms become the following. </p>
<pre><code>x' = (h * cos A1 * cos A2) - (h * sin A1 * sin A2) 
y' = (h * cos A1 * sin A2) + (h * sin A1 * cos A2) 
 </code></pre>
<p>
The rotation algorithms for a given point rotated by angle <i>A2</i> can be obtained by substituting<i> x </i>for each occurrence of (<i>h</i> * cos <i>A1</i>) and substituting<i> y </i>for each occurrence of (<i>h</i> * sin <i>A1</i>). </p>
<pre><code>x' = (x * cos A2) - (y * sin A2) 
y' = (x * sin A2) + (y * cos A2) 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

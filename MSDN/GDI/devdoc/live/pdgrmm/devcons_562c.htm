<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Printer Device Context</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_creating_a_printer_device_context"></a>Creating a Printer Device Context</h2>
<p>
An application can create a printer device context in one of two ways: 
<ul>
<li>
Calling the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_printdlg">
</object><a href=JavaScript:alink_1.Click()><b>PrintDlg</b></a> function to display a common dialog box that allows the user to specify printer options, then creating a printer device context by using those options. </li>
<li>
Creating a printer device context by using the default printer data from the WIN.INI file. </li>
</ul>
<p>
This section contains code demonstrating the latter method. </p>
<p>
To use the default printer, retrieve and parse the appropriate string from the WIN.INI file. This string is retrieved by calling the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getprofilestring">
</object><a href=JavaScript:alink_2.Click()><b>GetProfileString</b></a> function and specifying the appropriate section and entry names. In the case of the default printer, this data is stored in the [windows] section and identified by the entry named device. The seventh line in the following excerpt from a WIN.INI file shows an entry for a Kodak Diconix printer. </p>
<pre><code>[windows] 
    load= 
    run= 
    Beep=yes 
    Spooler=yes 
    NullPort=None 
    device=Diconix,winspool,LPT1: 
    CoolSwitch=1 
    BorderWidth=3 
    KeyboardSpeed=31 
    InitialKeyboardIndicators=2 
    CursorBlinkRate=530 
    DoubleClickSpeed=686 
    Programs=com exe bat pif cmd 
    Documents= 
    DeviceNotSelectedTimeout=15 
    TransmissionRetryTimeout=45 
    swapdisk= 
    NetWarn=1 
    fPromptOnVerbose=FALSE 
    fPromptOnWarning=FALSE 
    fPromptOnError=TRUE 
    fPrintVerbose=FALSE 
    fPrintFileLine=FALSE 
    shell= 
    ScreenSaveTimeOut=300 
    ScreenSaveActive=0 
    DebugOptions=2048 
 </code></pre>
<p>
The following example shows how a printer device context was created by using the data from WIN.INI. </p>
<pre><code>HDC hdcPrint;               // printer DC handle 
    char szDevString[120];      // array for WIN.INI data 
    char *szPrinter, *szDriver; // printer and driver names 
    char *szPort;               // port name 

    // Retrieve the printer, printer-driver, and 
    // output-port names from WIN.INI. 
 
    GetProfileString("windows", "device", ",,,", 
        szDevString, 120); 
 
    // Parse the string of names, setting ptrs as required 
    // If the string contains the required names, use them to 
    // create a device context. 
 
    if ((szPrinter = strtok(szDevString, 
               (const char *) ",")) 
            &amp;&amp; (szDriver = strtok ((char *) NULL, 
               (const char *) ", ")) 
            &amp;&amp; (szPort = strtok ((char *) NULL, 
               (const char *) ", "))) 
    {
        hdcPrint = CreateDC(szDriver, szPrinter, 
            szPort, NULL); 
    }

    // Print a test page that contains the string 
    // "PRINTER TEST" in the upper left corner. 
 
    Escape(hdcPrint, STARTDOC, 8, "Test-Doc", NULL); 
    TextOut(hdcPrint, 50, 50, "PRINTER TEST", 12); 
    Escape(hdcPrint, NEWFRAME, 0, NULL, NULL); 
    Escape(hdcPrint, ENDDOC, 0, NULL, NULL); 
 
 
    // Delete the printer DC. 
 
    DeleteDC(hdcPrint); 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SetBoundsRect</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_setboundsrect"></a>SetBoundsRect</h1>
<p>
The <b>SetBoundsRect</b> function controls the accumulation of bounding rectangle information for the specified device context. The system can maintain a bounding rectangle for all drawing operations. An application can examine and set this rectangle. The drawing boundaries are useful for invalidating bitmap caches. </p>
<pre><code><b>UINT SetBoundsRect(
  HDC</b><i> hdc</i><b>,                 </b>// handle of device context
<b>  CONST RECT</b><i> *lprcBounds</i><b>,  </b>// address of rectangle coordinates
<b>  UINT</b><i> flags               </i>// controls rectangle combination
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hdc</i></dt>
<dd>
Handle to the device context for which to accumulate bounding rectangles. </dd>
<dt>
<i>lprcBounds</i></dt>
<dd>
Pointer to a <a href="rectangl_6cqa.htm"><b>RECT</b></a> structure used to set the bounding rectangle. Rectangle dimensions are in logical coordinates. This parameter can be NULL. </dd>
<dt>
<i>flags</i></dt>
<dd>
Specifies how the new rectangle will be combined with the accumulated rectangle. This parameter can be a combination of the following values: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=35%>Value</th>
<th align=left width=65%>Description</th>
</tr>
<tr valign=top>
<th align=left width=35%>DCB_ACCUMULATE</th>
<td width=65%>Adds the rectangle specified by the <i>lprcBounds</i> parameter to the bounding rectangle (using a rectangle union operation). Using both DCB_RESET and DCB_ACCUMULATE sets the bounding rectangle to the rectangle specified by the <i>lprcBounds</i> parameter.</td>
</tr>
<tr valign=top>
<th align=left width=35%>DCB_DISABLE</th>
<td width=65%>Turns off boundary accumulation.</td>
</tr>
<tr valign=top>
<th align=left width=35%>DCB_ENABLE</th>
<td width=65%>Turns on boundary accumulation, which is disabled by default.</td>
</tr>
<tr valign=top>
<th align=left width=35%>DCB_RESET</th>
<td width=65%>Clears the bounding rectangle.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value specifies the previous state of the bounding rectangle. This state can be a combination of the following values. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=24%>Value</th>
<th align=left width=76%>Meaning</th>
</tr>
<tr valign=top>
<td width=24%>DCB_DISABLE</td>
<td width=76%>Boundary accumulation is off.</td>
</tr>
<tr valign=top>
<td width=24%>DCB_ENABLE</td>
<td width=76%>Boundary accumulation is on. DCB_ENABLE and DCB_DISABLE are mutually exclusive.</td>
</tr>
<tr valign=top>
<td width=24%>DCB_RESET</td>
<td width=76%>Bounding rectangle is empty.</td>
</tr>
<tr valign=top>
<td width=24%>DCB_SET</td>
<td width=76%>Bounding rectangle is not empty. DCB_SET and DCB_RESET are mutually exclusive.</td>
</tr>
</table><br>
<p>
If the function fails, the return value is zero.</p>
<p>
<b>Windows NT: </b>To get extended error information, call <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getlasterror">
</object><a href=JavaScript:alink_1.Click()><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
The DCB_SET value is a combination of the bit values DCB_ACCUMULATE and DCB_RESET. Applications that check the DCB_RESET bit to determine whether the bounding rectangle is empty must also check the DCB_ACCUMULATE bit. The bounding rectangle is empty only if the DCB_RESET bit is 1 and the DCB_ACCUMULATE bit is 0. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wingdi.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use gdi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="pantdraw_3wtj.htm">Painting and Drawing Overview</a>, <a href="pantdraw_8igj.htm">Painting and Drawing Functions</a>, <a href="pantdraw_6ies.htm"><b>GetBoundsRect</b></a>, <a href="rectangl_6cqa.htm"><b>RECT</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

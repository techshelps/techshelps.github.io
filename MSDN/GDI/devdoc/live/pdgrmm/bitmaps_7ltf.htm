<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Bitmap Header Types</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_bitmap_header_types"></a>Bitmap Header Types</h2>
<p>
The bitmap has four basic header types: 
<ul>
<li>
<a href="bitmaps_7jaq.htm"><b>BITMAPCOREHEADER</b></a></li>
<li>
<a href="bitmaps_1rw2.htm"><b>BITMAPINFOHEADER</b></a></li>
<li>
<a href="bitmaps_2k1e.htm"><b>BITMAPV4HEADER</b></a></li>
<li>
<a href="bitmaps_7c36.htm"><b>BITMAPV5HEADER</b></a> </li>
</ul>
<p>
The four types of bitmap headers are differentiated by the <b>Size </b>member, which is the first <b>DWORD</b> in each of the structures.</p>
<p>
The <a href="bitmaps_7c36.htm"><b>BITMAPV5HEADER</b></a> structure is an extended <a href="bitmaps_2k1e.htm"><b>BITMAPV4HEADER</b></a> structure, which is an extended <a href="bitmaps_1rw2.htm"><b>BITMAPINFOHEADER</b></a> structure. However, the<b> BITMAPINFOHEADER</b> and<b> <a href="bitmaps_7jaq.htm">BITMAPCOREHEADER</a></b> have only the <b>Size</b> member in common with other bitmap header structures. </p>
<p>
The <b>BITMAPCOREHEADER</b> and<b> BITMAPV4HEADER</b> formats have been superceded by<b> BITMAPINFOHEADER</b> and <b>BITMAPV5HEADER</b> formats, respectively. The <b>BITMAPCOREHEADER</b> and <b>BITMAPV4HEADER</b> formats are presented for completeness and backward compatibility. </p>
<p>
The <a href="bitmaps_62uq.htm"><b>BITMAPFILEHEADER</b></a> structure contains information about the type, size, and layout of a file that contains a device-independent bitmap. A <a href="bitmaps_0zn6.htm"><b>BITMAPINFO</b></a> or <a href="bitmaps_9yeq.htm"><b>BITMAPCOREINFO</b></a> structure immediately follows the<b> BITMAPFILEHEADER</b> structure in the DIB file. </p>
<p>
The file format is a description of how to read or store bitmap data in a file. The file format and the format used by Win32 API are similar but not identical. There are small differences between the two. The file format has a file header (<a href="bitmaps_62uq.htm"><b>BITMAPFILEHEADER</b></a>), whereas the Win32 API format does not use this header. In the following illustration, all segments are used for file format, while the Win32 API format excludes <b>BITMAPFILEHEADER</b>. </p>
<p>
<img src="images/bitmaptype.gif" border=0></p>
<p>
A color table describes how pixel values correspond to RGB color values. RGB is a model for describing colors that are produced by emitting light. </p>
<p>
<i>Profile data</i> refers to either the profile file name ( linked profile) or the actual profile bits (embedded profile). When the file format contains profile data, it should be placed at the end of the file. The Win32 API format places profile data just after the color table (if present). The exception to the Win32 API format is for those Win32 functions that receive a packed DIB, where the profile data comes after the bitmap bits, like the file format. </p>
<p>
Profile data will only exist for <a href="bitmaps_7c36.htm"><b>BITMAPV5HEADER</b></a><b> </b>structures where <b>bV5CSType</b> is PROFILE_LINKED or PROFILE_EMBEDDED. For Win32 functions that receive packed DIBs, the profile data comes after the bitmap data.</p>
<p>
A <i>palettized device</i> is any device that uses palettes to assign colors. The classic example of a palettized device is a display running in 8 bit color depth (i.e. 256 colors). The display in this mode uses a small color table to assign colors to a bitmap. The colors in a bitmap are assigned to the closest color in the palette that the device is using. The palettized device does not create an optimal palette for displaying the bitmap; it simply uses what ever is in the current palette. Applications are responsible for creating a palette and selecting it in to the system. In general, 16, 24, and 32 bpp bitmaps do not contain color tables (a.k.a. optimal palettes for the bitmap); the application is responsible for generating a optimal palette in this case. However, 16, 24, and 32 bpp can contain such optimal color tables for displaying on palettized devices; in this case the application just needs to create a palette based off of the color table present in the bitmap file.</p>
<p>
Bitmaps that are 1, 4, or 8 bits per pixel (bpp) must have a color table with a maximum size based on the bpp. The maximum size for 1, 4, and 8 bpp bitmaps is 2 to the power of the bpp. 1 bpp maximum size is 2. 4 bpp is 16 colors. 8 bpp is 256 colors.</p>
<p>
Bitmaps that are 16, 24, or 32 bpp do not require color tables, but may have them to specify colors for palettized devices. If a color table is present for 16, 24 or 32 bpp bitmap the <b><i>ClrUsed</i></b> field will specify the size of the color table and the color table must have that many colors in it. <b><i>ClrUsed </i></b>of zero indicates no color table.</p>
<p>
The red, green and blue bit field masks for BI_BITFIELD bitmaps immediately follow the <a href="bitmaps_1rw2.htm"><b>BITMAPINFOHEADER</b></a>, <a href="bitmaps_2k1e.htm"><b>BITMAPV4HEADER</b></a>, and <a href="bitmaps_7c36.htm"><b>BITMAPV5HEADER</b></a> structures. The <b>BITMAPV4HEADER </b>and <b>BITMAPV5HEADER</b> structures contain additional members for red, green and blue masks as follows:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=27%>Member</th>
<th align=left width=73%>Meaning</th>
</tr>
<tr valign=top>
<td width=27%><b>RedMask</b></td>
<td width=73%>Color mask that specifies the red component of each pixel, valid only if the <b>Compression</b> member is set to BI_BITFIELDS. </td>
</tr>
<tr valign=top>
<td width=27%><b>GreenMask</b> </td>
<td width=73%>Color mask that specifies the green component of each pixel, valid only if the <b>Compression</b> member is set to BI_BITFIELDS.</td>
</tr>
<tr valign=top>
<td width=27%><b>BlueMask</b> </td>
<td width=73%>Color mask that specifies the blue component of each pixel, valid only if the <b>Compression</b> member is set to BI_BITFIELDS. </td>
</tr>
</table><br>
<p>
When the <b>biCompression</b> member of <a href="bitmaps_1rw2.htm"><b>BITMAPINFOHEADER</b></a> is set to BI_BITFIELDS and the function receives an argument of type <b>LPBITMAPINFO</b>, the color masks will immediately follow the header. The color table, if present, will follow the color masks. <a href="bitmaps_7jaq.htm"><b>BITMAPCOREHEADER</b></a> bitmaps do not support color masks. </p>
<p>
By default, bitmap data is bottom-up in its format. Bottom-up means that the first scan line in the bitmap data is the last scan line to be displayed. For example, the 0<sup>th</sup> pixel of the 0<sup>th</sup> scan line of the bitmap data of a 10 pixel by 10 pixel bitmap will be the 0<sup>th</sup> pixel of the 9<sup>th</sup> scan line of the displayed or printed image. Run-length encoded (RLE) format bitmaps and<a href="bitmaps_7jaq.htm"><b> BITMAPCOREHEADER</b></a> bitmaps can not be top down bitmaps. The scan lines are <b>DWORD</b> aligned, except for RLE compressed bitmaps. They must be padded for scan line widths, in bytes, that are not evenly divisible by 4, except for RLE compressed bitmaps. For example, a 10 by 10 pixel 24 bpp bitmap will have 2 padding bytes at the end of each scan line.</p>
<p>&nbsp;</p></body>
</HTML>

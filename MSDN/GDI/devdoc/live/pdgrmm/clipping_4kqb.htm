<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Clipping Regions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_clipping_regions"></a>Clipping Regions</h2>
<p>
A clipping region is one of the graphic objects that an application can select into a device context (DC). It is typically rectangular. Some device contexts provide a predefined or default clipping region while others do not. For example, if you obtain a device context handle from the <a href="pantdraw_7b78.htm"><b>BeginPaint</b></a> function, the DC contains a predefined rectangular clipping region that corresponds to the invalid rectangle that requires repainting. However, when you obtain a device context handle by calling the <a href="devcons_4esj.htm"><b>GetDC</b></a><b> </b>function with a NULL <i>hWnd</i><b> </b>parameter, or by calling the<b> <a href="devcons_5g83.htm">CreateDC</a> </b>function, the DC does not contain a default clipping region.<b> </b>For more information about device contexts returned by the <b>BeginPaint</b> function, see<b> <a href="pantdraw_3wtj.htm">Painting and Drawing</a></b>. For more information about device contexts returned by the <b>CreateDC</b> and <b>GetDC</b> functions, see <a href="devcons_0g6r.htm"><b>Device Contexts</b></a>. </p>
<p>
Applications can perform a variety of operations on clipping regions. Some of these operations require a handle identifying the region and some do not. For example, an application can perform the following operations directly on a device context's clipping region: 
<ul>
<li>
Determine whether graphics output appears within the region's borders by passing coordinates of the corresponding line, arc, bitmap, text, or filled shape to the <a href="clipping_66p1.htm"><b>PtVisible</b></a> function. </li>
<li>
Determine whether part of the client area intersects a region by calling the <a href="clipping_7885.htm"><b>RectVisible</b></a> function. </li>
<li>
Move the existing region by a specified offset by calling the <a href="clipping_9t7y.htm"><b>OffsetClipRgn</b></a> function. </li>
<li>
Exclude a rectangular part of the client area from the current clipping region by calling the <a href="clipping_760k.htm"><b>ExcludeClipRect</b></a> function. </li>
<li>
Combine a rectangular part of the client area with the current clipping region by calling the <a href="clipping_7rn8.htm"><b>IntersectClipRect</b></a> function. </li>
</ul>
<p>
After obtaining a handle identifying the clipping region, an application can perform any operation that is common with regions, such as: 
<ul>
<li>
Combining a copy of the current clipping region with a second region by calling the <a href="regions_7tf2.htm"><b>CombineRgn</b></a> function. </li>
<li>
Compare a copy of the current clipping region to a second region by calling the <a href="regions_9d0u.htm"><b>EqualRgn</b></a> function. </li>
<li>
Determine whether a point lies within the interior of a copy of the current clipping region by calling the <a href="regions_3bn2.htm"><b>PtInRegion</b></a> function. </li>
</ul>
<p>&nbsp;</p></body>
</HTML>

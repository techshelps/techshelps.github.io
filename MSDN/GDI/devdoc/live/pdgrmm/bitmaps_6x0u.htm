<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Bitmap Compression</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_bitmap_compression"></a>Bitmap Compression</h2>
<p>
The Win32 API supports formats for compressing bitmaps that define their colors with 8 or 4 bits per pixel. Compression reduces the disk and memory storage required for the bitmap. </p>
<p>
Compression forms part of the following member names in the bitmap information header structures for different platforms. In the discussion that follows, compression is used to mean all of these variants.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Operating System </th>
<th align=left width=50%>Compression </th>
</tr>
<tr valign=top>
<td width=50%>Windows NT 3.51 and earlier</td>
<td width=50%><b>biCompression</b></td>
</tr>
<tr valign=top>
<td width=50%>Windows NT 4.0 and Windows 95</td>
<td width=50%><b>bV4Compression</b></td>
</tr>
<tr valign=top>
<td width=50%>Windows NT 5.0 and Windows 98</td>
<td width=50%><b>bV5Compression</b></td>
</tr>
</table><br>
<p>
When the <b>Compression</b> member of the bitmap information header structure is BI_RLE8, a run-length encoding (RLE) format is used to compress an 8-bit bitmap. This format can be compressed in encoded or absolute modes. Both modes can occur anywhere in the same bitmap. 
<ul>
<li>
<b>Encoded mode</b> consists of two bytes: the first byte specifies the number of consecutive pixels to be drawn using the color index contained in the second byte. In addition, the first byte of the pair can be set to zero to indicate an escape character that denotes the end of a line, the end of a bitmap, or a delta, depending on the value of the second byte. The interpretation of the escape depends on the value of the second byte of the pair, which can be one of the following values.</li>
</ul>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Value</th>
<th align=left width=84%>Meaning</th>
</tr>
<tr valign=top>
<td width=16%>0</td>
<td width=84%>End of line.</td>
</tr>
<tr valign=top>
<td width=16%>1</td>
<td width=84%>End of bitmap.</td>
</tr>
<tr valign=top>
<td width=16%>2</td>
<td width=84%>Delta. The two bytes following the escape contain unsigned values indicating the horizontal and vertical offsets of the next pixel from the current position.</td>
</tr>
</table><br>
<ul>
<li>
In <b>absolute mode</b>, the first byte is zero and the second byte is a value in the range 03H through FFH. The second byte represents the number of bytes that follow, each of which contains the color index of a single pixel. When the second byte is 2 or less, the escape has the same meaning as in encoded mode. In absolute mode, each run must be aligned on a word boundary. </li>
</ul>
<p>
The following example shows the hexadecimal values of an 8-bit compressed bitmap. </p>
<pre><code>03 04 05 06 00 03 45 56 67 00 02 78 00 02 05 01 
02 78 00 00 09 1E 00 01 
 </code></pre>
<p>
The bitmap expands as follows (two-digit values represent a color index for a single pixel): </p>
<pre><code>04 04 04 
06 06 06 06 06 
45 56 67 
78 78 
move current position 5 right and 1 down 
78 78 
end of line 
1E 1E 1E 1E 1E 1E 1E 1E 1E 
end of RLE bitmap 
 </code></pre>
<p>
When the <b>Compression</b> member is BI_RLE4, the bitmap is compressed by using a run-length encoding format for a 4-bit bitmap, which also uses encoded and absolute modes: 
<ul>
<li>
In encoded mode, the first byte of the pair contains the number of pixels to be drawn using the color indexes in the second byte. The second byte contains two color indexes, one in its high-order four bits and one in its low-order four bits. The first of the pixels is drawn using the color specified by the high-order four bits, the second is drawn using the color in the low-order four bits, the third is drawn using the color in the high-order four bits, and so on, until all the pixels specified by the first byte have been drawn. </li>
<li>
In absolute mode, the first byte is zero. The second byte contains the number of color indexes that follow. Subsequent bytes contain color indexes in their high- and low-order four bits, one color index for each pixel. In absolute mode, each run must be aligned on a word boundary. The end-of-line, end-of-bitmap, and delta escapes described for BI_RLE8 also apply to BI_RLE4 compression. </li>
</ul>
<p>
The following example shows the hexadecimal values of a 4-bit compressed bitmap. </p>
<pre><code>03 04 05 06 00 06 45 56 67 00 04 78 00 02 05 01 
04 78 00 00 09 1E 00 01 
 </code></pre>
<p>
The bitmap expands as follows (single-digit values represent a color index for a single pixel): </p>
<pre><code>0 4 0 
0 6 0 6 0 
4 5 5 6 6 7 
7 8 7 8 
move current position 5 right and 1 down 
7 8 7 8 
end of line 
1 E 1 E 1 E 1 E 1 
end of RLE bitmap 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>When to Draw in a Window</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_when_to_draw_in_a_window"></a>When to Draw in a Window</h2>
<p>
An application draws in a window at a variety of times: when first creating a window, when changing the size of the window, when moving the window from behind another window, when minimizing or maximizing the window, when displaying data from an opened file, and when scrolling, changing, or selecting a portion of the displayed data. </p>
<p>
The system manages actions such as moving and sizing a window. If an action affects the content of the window, the system marks the affected portion of the window as ready for updating and, at the next opportunity, sends a <a href="pantdraw_88ac.htm">WM_PAINT</a> message to the window procedure of the window. The message is a signal to the application to determine what must be updated and to carry out the necessary drawing. </p>
<p>
Some actions are managed by the application, such as displaying open files and selecting displayed data. For these actions, an application can mark for updating the portion of the window affected by the action, causing a WM_PAINT<b> </b>message to be sent at the next opportunity. If an action requires immediate feedback, the application can draw while the action takes place, without waiting for WM_PAINT. For example, a typical application highlights the area the user selects rather than waiting for the next WM_PAINT<b> </b>message to update the area. </p>
<p>
In all cases, an application can draw in a window as soon as it is created. To draw in the window, the application must first retrieve a handle of a display device context for the window. Ideally, an application carries out most of its drawing operations during the processing of WM_PAINT<b> </b>messages. In this case, the application retrieves a display device context by calling the <a href="pantdraw_7b78.htm"><b>BeginPaint</b></a> function. If an application draws at any other time, such as from within <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_winmain">
</object><a href=JavaScript:alink_1.Click()><b>WinMain</b></a> or during processing of keyboard or mouse messages, it calls the <a href="devcons_4esj.htm"><b>GetDC</b></a> or <a href="devcons_76wo.htm"><b>GetDCEx</b></a> function to retrieve the display DC. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TextOut</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_textout"></a>TextOut</h1>
<p>
The <b>TextOut</b> function writes a character string at the specified location, using the currently selected font, background color, and text color. </p>
<pre><code><b>BOOL TextOut(
  HDC</b><i> hdc</i><b>,           </b>// handle to device context
<b>  int</b><i> nXStart</i><b>,       </b>// x-coordinate of starting position
<b>  int</b><i> nYStart</i><b>,       </b>// y-coordinate of starting position
<b>  LPCTSTR</b><i> lpString</i><b>,  </b>// pointer to string
 <b> int</b> <i>cbString</i>       // number of characters in string
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hdc</i></dt>
<dd>
Handle to the device context. </dd>
<dt>
<i>nXStart</i></dt>
<dd>
Specifies the logical x-coordinate of the reference point that the system uses to align the string. </dd>
<dt>
<i>nYStart</i></dt>
<dd>
Specifies the logical y-coordinate of the reference point that the system uses to align the string. </dd>
<dt>
<i>lpString</i></dt>
<dd>
Pointer to the string to be drawn. The string does not need to be zero-terminated, since <i>cbString</i> specifies the length of the string. </dd>
<dt>
<i>cbString</i></dt>
<dd>
Specifies the number of characters in the string. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is nonzero.</p>
<p>
If the function fails, the return value is zero. </p>
<p>
<b>Windows NT:</b> To get extended error information, call <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getlasterror">
</object><a href=JavaScript:alink_1.Click()><b>GetLastError</b></a>. </p>
<h4>Remarks</h4>
<p>
The interpretation of the reference point depends on the current text-alignment mode. An application can retrieve this mode by calling the <a href="fontext_1mem.htm"><b>GetTextAlign</b></a> function; an application can alter this mode by calling the <a href="fontext_20by.htm"><b>SetTextAlign</b></a> function. </p>
<p>
By default, the current position is not used or updated by this function. However, an application can call the <b>SetTextAlign</b> function with the <i>fMode</i> parameter set to TA_UPDATECP to permit the system to use and update the current position each time the application calls <b>TextOut</b> for a specified device context. When this flag is set, the system ignores the <i>nXStart</i> and <i>nYStart</i> parameters on subsequent <b>TextOut</b> calls. </p>
<p>
When the <b>TextOut</b> function is placed inside a path bracket, the system generates a path for the TrueType text that includes each character plus its character box. The region generated is the character box minus the text, rather than the text itself. You can obtain the region enclosed by the outline of the TrueType text by setting the background mode to transparent before placing the <b>TextOut</b> function in the path bracket. Following is sample code that demonstrates this procedure.</p>
<pre><code>// Obtain the window's client rectangle 
GetClientRect(hwnd, &amp;r); 
 
// THE FIX: by setting the background mode 
// to transparent, the region is the text itself 
// SetBkMode(hdc, TRANSPARENT); 
 
// Bracket begin a path 
BeginPath(hdc); 
 
// Send some text out into the world 
TextOut(hdc, r.left, r.top, "Defenestration can be hazardous", 4); 
 
// Bracket end a path 
EndPath(hdc); 
 
// Derive a region from that path 
SelectClipPath(hdc, RGN_AND); 
 
// This generates the same result as SelectClipPath() 
// SelectClipRgn(hdc, PathToRegion(hdc)); 
 
// Fill the region with grayness 
FillRect(hdc, &amp;r, GetStockObject(GRAY_BRUSH)); 
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wingdi.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use gdi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>implemented as Unicode and ANSI versions on Windows and Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="fontext_8ctw.htm">Fonts and Text Overview</a>, <a href="fontext_9r77.htm">Font and Text Functions</a>, <a href="fontext_1mem.htm"><b>GetTextAlign</b></a>, <a href="devcons_9v3o.htm"><b>SelectObject</b></a>, <a href="pantdraw_433m.htm"><b>SetBkColor</b></a>, <a href="fontext_20by.htm"><b>SetTextAlign</b></a>, <a href="fontext_8bsi.htm"><b>SetTextColor</b></a>, <a href="fontext_001g.htm"><b>TabbedTextOut</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

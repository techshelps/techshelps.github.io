<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Installing and Using an Embedded Font</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_win32_installing_and_using_an_embedded_font"></a>Installing and Using an Embedded Font</h3>
<p>
You must separate an embedded font from the containing document and install it in the user's operating system before the system can use it. Although the exact procedure for separating the font from the document depends on the method used to embed it, your application should always perform these steps: 
<ol>
<li>
Resolve name conflicts before installing the font. </li>
<li>
Write the font data to a file, decoding read-only fonts as necessary. </li>
<li>
Use the <a href="fontext_5z8l.htm"><b>CreateScalableFontResource</b></a> function to create a font resource file for the unembedded font. </li>
</ol>
<p>
Only a TrueType font can be embedded. </p>
<p>
Your application should avoid installing a font with the same name as a font that is already on the system. To determine whether there are duplicate style names, an application can compare the information returned by <a href="fontext_2z03.htm"><b>EnumFontFamilies</b></a> against the family name and style name stored with the embedded font. </p>
<h4>Read-Write Permission</h4>
<p>
Embedded fonts that have read-write permission (and that therefore can be permanently installed on the user's system) should be written to a file that has the .TTF filename extension. </p>
<p>
Most applications put the files for embedded fonts that have read-write permission into either the SYSTEM subdirectory of the user's Windows directory or into the application's working directory. Files for read-only embedded fonts are typically put into a temporary directory. </p>
<p>
Before installing an embedded font, you must use the <a href="fontext_5z8l.htm"><b>CreateScalableFontResource</b></a> function to create a font resource file. Because the system cannot directly interpret the native TrueType font file format, it requires a file that mimics the standard .FON file (called a .FOT file) to make internal bookkeeping and enumeration easier. The <b>CreateScalableFontResource</b> function produces a .FOT file that points to the TrueType font file. Once this .FOT file is produced, Win32-based applications can use TrueType fonts transparently by using the <a href="fontext_9r51.htm"><b>AddFontResource</b></a> and <a href="fontext_1m3p.htm"><b>RemoveFontResource</b></a> functions. You can also use the <b>CreateScalableFontResource</b> function to install special fonts for logos, icons, and other graphics. Font resource files for read-only fonts should use a different extension (for example, .FOR) and should be hidden from other applications in the system by specifying 1 for the first parameter of <b>CreateScalableFontResource</b>. </p>
<p>
Your application should offer users the option of permanently installing embedded fonts that have read-write permission. To permanently install a font, applications should concatenate the typeface and style names and then use the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_writeprofilestring">
</object><a href=JavaScript:alink_1.Click()><b>WriteProfileString</b></a> function to insert this string along with the .FOT file name in the [Fonts] section of the WIN.INI file. A typical font entry in the [Fonts] section looks like the following example. </p>
<pre><code>Times New Roman Bold (TrueType)=TIMESBD.FOT 
 </code></pre>
<h4>Read-Only Permission</h4>
<p>
Embedded fonts with read-only permission should not use the .TTF extension and should avoid the .FOT and .FON extensions. A typical filename extension for read-only embedded fonts is .TTR. Files for read-only embedded fonts must be removed from the operating system and from both physical and logical memory as soon as the containing document is closed, so their names do not need to be meaningful except to the application. </p>
<p>
If a document contains one or more read-only embedded fonts, the user must not be permitted to edit the document. If the user is allowed to edit the document in any way, your application must first strip away and delete the read-only embedded fonts. As mentioned earlier, read-only embedded fonts must be removed from the operating system and memory immediately when the document in which they are bundled is closed. </p>
<p>
To delete read-only embedded fonts, your application should follow these steps: 
<ol>
<li>
Call the <a href="fontext_1m3p.htm"><b>RemoveFontResource</b></a> function for each font to be deleted. </li>
<li>
Delete the font resource file for each font. </li>
<li>
Delete each TrueType font file for each font. </li>
</ol>
<p>
When an application creates a file for a read-only embedded font and specifies 1 for the first parameter of the <a href="fontext_5z8l.htm"><b>CreateScalableFontResource</b></a> function, the <a href="fontext_2ynn.htm"><b>EnumFonts</b></a> and <a href="fontext_2z03.htm"><b>EnumFontFamilies</b></a> functions will not enumerate this font. Hiding read-only embedded fonts in this manner makes it unlikely that another application can use them, even though resources are theoretically available to all processes. The <a href="fontext_1m3p.htm"><b>RemoveFontResource</b></a> function does not delete a font currently in use. If your application uses a read-only embedded font installed by another application, it can be difficult for the installing application to delete the font. In this case, your application should delete the resource file and the TrueType font file when the user closes the document containing the read-only fonts. </p>
<p>
It is very important that applications delete the TrueType font file for read-only embedded fonts. If the delete operation fails when the user closes the document, the application should periodically attempt to delete the file as the application runs, when it closes, and the next time it starts. </p>
<p>
In some cases, an application is unable to delete a TrueType font file for a read-only embedded font because of external events (such as a system failure). There is no legal liability for events that are out of the control of the application. </p>
<p>&nbsp;</p></body>
</HTML>

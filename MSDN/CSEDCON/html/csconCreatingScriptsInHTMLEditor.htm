<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Scripts in the HTML Editor</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="csconcreatingscriptsinhtmleditor"></a>Creating Scripts in the HTML Editor</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csconCreatingScriptsInHTMLEditor_C">
</object></p>
<p>
The HTML editor includes features that help you create scripts. You can create event handlers for elements on the page, which are scripts that run in response to actions such as when a user chooses a button, when a document first loads, or another event. You can also use editor features to create standalone script blocks to contain any script, not only event handlers.</p>
<p class=indent>
<span class=blue><b>Tip</b></span>&nbsp;&nbsp;&nbsp;If you insert script into the body portion of a document, choose Show Details in the Design toolbar. This displays a glyph for the script when you are in Design view. Without the glyph, the script does not appear in Design view, and you might delete it accidentally.</p>
<p>
To create event-handling scripts, you use the Script Outline window. The Script Outline window shows you all scriptable elements in your page, and for each element, the events you can write handlers for. The Script Outline window divides the elements and scripts into those that will run on the client and those that will run on the server.</p>
<p>
In the editor, you write scripts in Source view. However, if you are working in Design view, you can start scripting for an element you are working with.</p>
<p class=blue>
<b>To start scripting from Design view</b>
<ul type=disc>
<li>
Double-click the element you want to write an event handler for, or right-click it, and then choose <b>Edit Script</b>.<p class=tl>
The editor switches to Source view. It also displays the Script Outline window and places the focus on the default handler for that element. If the element you clicked does not have an ID attribute, the HTML editor adds one.
</li>
</ul>
<p>
With the Script Outline window displayed, you can create a skeleton event handler for any element on the page.</p>
<p class=blue>
<b>To create an event handler</b>
<ol>
<li>
In the <b>Script Outline</b> window, expand the node of the element you want to write a handler for.<br><br></li>
<li>
Double-click the event you want to script.</li>
</ol>
<p>
When you double click the event name, the editor performs the following actions:
<ul type=disc>
<li>
Creates or moves to one of the following script blocks at the top of the document, depending on where the script will run and what language it will be in:<ul type=disc>
<li>
clientEventHandlersJS<br><br></li>
<li>
clientEventHandlersVBS<br><br></li>
<li>
serverEventHandlersJS<br><br></li>
<li>
serverEventHandlersVBS</li>
</ul>
</li>
<li>
Inserts a new, blank event-handling procedure for the element and event you specified.<br><br></li>
<li>
If the script will be in Javascript, adds an event attribute (for example, <code>onclick=</code>) to the element.<br><br></li>
<li>
Positions the insertion point at the second line of the new script, ready for you to enter commands.</li>
</ul>
<p>
The language used for an event handler skeleton depends on the default language for client or server script, as set in the Property Pages dialog box for the current document. For VBScript functions, the format is:</p>
<pre><code>Sub <i>e</i>lementID_event

End Sub
</code></pre>
<p>
For JavaScript functions, the format is:</p>
<pre><code>function <i>elementID</i>_<i>event</i>(){

}
</code></pre>
<p>
When creating JavaScript event handlers, the editor also adds the following attributes to the HTML element itself:</p>
<pre><code><i>event</i>="return <i>elementID</i>_<i>event</i>()"
</code></pre>
<p>
In addition to creating event handlers, you can create standalone script blocks. This is useful if you want to create procedures (subroutines or functions) called by other scripts, or if you want to create global script that runs as soon as the page is processed by the browser.</p>
<p class=blue>
<b>To create a standalone script block</b>
<ol>
<li>
Switch to <b>Source</b> view.<br><br></li>
<li>
Move to the location in the document where you want the script to appear.<br><br></li>
<li>
From the <b>HTML</b> menu, choose <b>Script Block</b>, and then choose <b>Client</b> or <b>Server</b>.<p class=tl>
The HTML editor creates a &lt;SCRIPT&gt; block. If you choose <b>Server</b>, the script tag contains the attribute RUNAT=SERVER. The script block's LANGUAGE attribute is set to the default language for the client or server.
</li>
</ol>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Control Code Functions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_wolf_using_the_control_code_functions"></a>Using the Control Code Functions</h1>
<p>
To perform an operation using a control code, an application calls one of the following control code functions defined in the Cluster API:
<ul>
<li>
<a href="clusapi_5hd8.htm"><b>ClusterResourceControl</b></a> to handle control codes with their object component set to CLUS_OBJECT_RESOURCE.</li>
<li>
<a href="clusapi_2ld8.htm"><b>ClusterResourceTypeControl</b></a><b> </b>to handle control codes with their object component set to CLUS_OBJECT_RESOURCE_TYPE.</li>
<li>
<a href="clusapi_6g18.htm"><b>ClusterGroupControl</b></a><b> </b>to handle control codes with their object component set to CLUS_OBJECT_GROUP.</li>
<li>
<a href="clusapi_5lt8.htm"><b>ClusterNodeControl</b></a><b> </b>to handle control codes with their object component set to CLUS_OBJECT_NODE.</li>
<li>
<b>ClusterNetworkControl </b>to handle control codes with their object component set to CLUS_OBJECT_NETWORK.</li>
<li>
<b>ClusterNetInterfaceControl </b>to handle control codes with their object component set to CLUS_OBJECT_NETINTERFACE.</li>
</ul>
<p>
When a call is made to <b>ClusterGroupControl</b>, <b>ClusterNodeControl</b>, <b>ClusterNetworkControl</b>, or <b>ClusterNetInterfaceControl</b>, the Cluster Service performs the operation and returns to the caller. When a call is made to either <b>ClusterResourceControl</b> or <b>ClusterResourceTypeControl</b>, the Cluster Service calls the Resource Monitor to perform the operation. The Resource Monitor will in turn call the resource DLL's <a href="resapi_0w8c.htm"><b>ResourceControl</b></a> or <a href="resapi_0q0c.htm"><b>ResourceTypeControl</b></a> entry point function.</p>
<p>
The Resource Monitor always gives the resource DLL the opportunity to process a control code and performs the processing only if the resource DLL is unable to do so. The following situations indicate when a resource DLL might request the help of the Resource Monitor in processing a control code:
<ul>
<li>
When the resource DLL does not include the appropriate control code entry point function: either <b>ResourceControl</b> for resources or <b>ResourceTypeControl</b> for resource types.</li>
<li>
When the resource DLL includes the appropriate control code entry point function, but it does not support the particular control code.</li>
<li>
When the resource DLL includes the appropriate control code entry point function, but the resource DLL uses this support to augment the processing provided by the <a href="wfintro_94j6.htm">Resource Monitor</a>.</li>
</ul>
<p>
Resource DLLs can choose whether or not to support most of the resource and resource type control codes. However, they should support at least the following control codes for manipulating private properties:
<ul>
<li>
<a href="clusctl_9i5v.htm">CLUSCTL_RESOURCE_ENUM_PRIVATE_PROPERTIES</a></li>
<li>
<a href="clusctl_3dpv.htm">CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES</a></li>
<li>
<a href="clusctl_59yr.htm">CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES</a></li>
<li>
<a href="clusctl_7gz7.htm">CLUSCTL_RESOURCE_SET_PRIVATE_PROPERTIES</a></li>
<li>
<a href="clusctl_4alv.htm">CLUSCTL_RESOURCE_VALIDATE_PRIVATE_PROPERTIES</a></li>
</ul>
<p>
There are two other control codes that a resource DLL must support under certain conditions: <a href="clusctl_2asz.htm">CLUSCTL_RESOURCE_GET_REQUIRED_DEPENDENCIES</a> and <a href="clusctl_5iwj.htm">CLUSCTL_RESOURCE_GET_REGISTRY_CHECKPOINTS</a>. If a resource DLL handles resources that have required dependencies, the DLL must support CLUSCTL_RESOURCE_GET_REQUIRED_DEPENDENCIES. If a resource DLL needs to replicate a portion of the system registry, it must support CLUSCTL_RESOURCE_GET_REGISTRY_CHECKPOINTS. </p>
<p>
Resource DLLs can fully or partially support a control code. With full support, the resource DLL performs the operation described by the control code without help from the Resource Monitor. With partial support, the resource DLL and the Resource Monitor work together to perform the operation. </p>
<p>
The control code functions share some of the same parameters and operate in a similar fashion. In addition to the control code that describes the operation to be performed, the functions include an input buffer to hold information needed for processing and an output buffer to hold information resulting from the processing in the parameter list.</p>
<p>
Depending on the operation, either the input buffer or the output buffer may be unused. Operations to retrieve data typically do not use input buffers; operations to update data typically do not use output buffers. For example, the <a href="clusctl_6dkj.htm">CLUSCTL_RESOURCE_GET_FLAGS</a> control code is used to retrieve the attributes that can be set for a resource. When an application calls <b>ClusterResourceControl </b>with this control code and a null input buffer parameter, the function returns an output buffer with a bitmask indicating the flags that are set for the resource. The <a href="clusctl_9zcj.htm">CLUSCTL_RESOURCE_SET_COMMON_PROPERTIES</a> control code updates the common properties of a resource. The new property settings must be passed in the input buffer when <b>ClusterResourceControl</b> is called. The output buffer is unused.</p>
<p>
Data in the input and output buffers must fall on a DWORD boundary. Cluster Server defines several structures that can be used to work with data passed to or from a control code function. There are structures that describe specific types of data values, such as <a href="clustruct_09fe.htm"><b>CLUSPROP_SZ</b></a> to describe a character string and <a href="clustruct_4gah.htm"><b>CLUSPROP_BINARY</b></a> to describe binary data. These structures are used as entries in value and property lists, arrays that describe multiple data values. </p>
<p>
For information about the layout of property and value lists, see <a href="cluguide_1e2b.htm">About Property Lists</a> and <a href="cluguide_68ab.htm">About Value Lists</a>. </p>
<p>
For information about individual structures, see <a href="clustruct_2qer.htm">Cluster Structures</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cluster Server Architecture</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_wolf_cluster_server_architecture"></a>Cluster Server Architecture</h1>
<p>
The Cluster Server architecture is made up of the following software components:
<ul>
<li>
Cluster Service</li>
<li>
Cluster Network Driver</li>
<li>
Cluster Administrator</li>
<li>
One or more Resource Monitors</li>
<li>
One or more resource DLLs</li>
</ul>
<p>
The <a href="wfintro_40bp.htm">Cluster Service</a> is the 'brains' of a cluster. There is one instance of Cluster Service running on every node in a cluster. The Cluster Service manages resources and coordinates with other instances of the Cluster Service in the cluster. The <a href="clusapi_9149.htm">Cluster API</a> is used by applications and resources to interact with the Cluster Service. The Cluster API allows applications and resources to manage cluster components and to access the cluster database. </p>
<p>
The <a href="wfintro_869e.htm">Cluster Network Driver</a> provides highly available communication between cluster nodes and helps to maintain cluster membership. The Cluster Network Driver maintains configuration information provided by the Cluster Service and communicates with the other nodes in the cluster. When a communication failure is detected, the Cluster Network Driver notifies the Cluster Service. </p>
<p>
<a href="wfintro_94j6.htm">Resource Monitors</a> act as an interface between the Cluster Service and cluster resources. Each resource is exposed by a dynamic link library (DLL) that is loaded into the Resource Monitor process. Resource Monitors isolate the Cluster Service from failures in a resource DLL. Multiple Resource Monitors can be used to isolate resources from one another. </p>
<p>
Resource DLLs are used to manage cluster resources of a particular type. Each resource DLL is written to manage one or more resource types. When the Cluster Service issues a request to a resource, that request is passed to the Resource Monitor. The Resource Monitor in turn calls an entry point function in the resource DLL responsible for the resource. The entry point functions are part of the <a href="resapi_0wdl.htm">Resource API</a>. When a resource DLL is loaded, it passes a table to the Resource Monitor containing pointers to each of these functions. </p>
<p>
Cluster Server provides resource DLLs for the resource types that it supports, such as the IP Address and Physical Disk resources. However, a cluster is not limited to these resource types. Third-party developers can create their own resource DLLs to replace or augment Cluster Server's resource DLLs. For a conceptual overview of resources, see <a href="wfintro_76b7.htm">About Cluster Resources</a>. </p>
<p>
Every node in a cluster can own one or more groups consisting of dependent or related resources. Administrators use a graphical application known as Cluster Administrator to establish and configure these resource groups and other cluster objects and to initiate failover, handle maintenance, and monitor cluster activity. Any Microsoft® Windows NT® system, regardless of whether it is a cluster node, can install Cluster Administrator. </p>
<p>
Cluster Administrator allows administrators to view, add, and change resources belonging to any of the resource types defined by Cluster Server. Third-party developers providing their own resource types can write an extension that enables Cluster Administrator to manage their custom types.</p>
<p>
The following diagram shows how these Cluster Server components relate to applications of various types and to each other within a single Windows NT Server network operating system.  </p>
<p>
<img src="images/wfintro1.gif" border=0></p>
<p>
The diagram shows three types of applications: 
<ul>
<li>
Cluster management</li>
<li>
Cluster-aware</li>
<li>
Cluster-unaware</li>
</ul>
<p>
Cluster management applications are used to administer clusters, to perform such tasks as adding resources, changing the membership of groups, and moving a group from one node to another. One example of a cluster management application is Cluster Administrator; another is a command line tool also provided with Cluster Server called CLUSTER.EXE. Administrators can use these applications to configure their cluster and establish resource dependencies and failover policies, but not to add a node to a cluster. A node can only be added to a new or existing cluster when the node installs Cluster Server. Cluster management applications use the <a href="clusapi_9149.htm">Cluster API</a> to communicate with the <a href="wfintro_40bp.htm">Cluster Service</a>.</p>
<p>
Both cluster-aware and cluster-unaware applications run on a cluster node and can be managed as cluster resources. However, only cluster-aware applications can take advantage of features offered by Cluster Server through the Cluster API. For example, cluster-aware applications can:
<ul>
<li>
Report status upon request to the <a href="wfintro_94j6.htm">Resource Monitor</a>.</li>
<li>
Respond to requests to be brought online or taken offline gracefully.</li>
</ul>
<p>
A cluster-aware application is typically managed by the <a href="wfintro_40bp.htm">Cluster Service</a> as a custom resource type, a resource type created by a third-party developer responsible for the application. To create a custom resource type, a developer provides two DLLs: a resource DLL and a Cluster Administrator extension DLL. The Cluster Administrator extension DLL implements methods included in the <a href="cluadmex_8k15.htm">Cluster Administrator extension API</a>. </p>
<p>
A cluster-unaware application is typically managed as a Generic Application resource, one of the resource types defined by Cluster Server. Generic Application resources can be administered with Cluster Administrator and can be failed over to an alternate node when a failure occurs. Cluster-unaware applications do not communicate directly with the Cluster Service through the Cluster API. </p>
<p>&nbsp;</p></body>
</HTML>

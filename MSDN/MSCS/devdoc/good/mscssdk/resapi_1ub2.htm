<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Open</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_wolf_open"></a>Open</h2>
<p>
The<b> Open</b> entry point function opens a resource.</p>
<pre><code><b>RESID WINAPI Open(
  LPCWSTR</b><i> ResourceName</i><b>,</b>           
<b>  HKEY</b><i> ResourceKey</i><b>,               </b>
<b>  RESOURCE_HANDLE</b><i> ResourceHandle  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ResourceName</i></dt>
<dd>
[in] Name of the resource to open.</dd>
<dt>
<i>ResourceKey</i></dt>
<dd>
[in] Cluster database key for the cluster that includes the resource represented by <i>ResourceName</i>.</dd>
<dt>
<i>ResourceHandle</i></dt>
<dd>
[in] Handle to be passed to the <a href="resapi_2hwz.htm"><b>SetResourceStatus</b></a> callback function in the <a href="resapi_1kj4.htm"><b>Startup</b></a> entry point function.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the operation was successful, <b>Open</b> returns a resource identifier (RESID).</p>
<p>
If the operation was unsuccessful, <b>Open</b> returns NULL.</p>
<h4>Remarks</h4>
<p>
The <b>Open</b> entry point opens a resource with the name identified by the <i>ResourceName</i> parameter and returns its resource identifier. The resource identifier can be used in future calls to other Resource API entry points to identify the resource.</p>
<h4>Notes to Implementers</h4>
<p>
Make your implementation of <b>Open</b> complete as quickly as possible, preferably in under 300 milliseconds. However, if you require a longer processing time, this situation is handled properly by the Cluster Service.</p>
<p>
Never close the handle represented by the <i>ResourceHandle</i> parameter or use it for any purpose other than passing it to the Resource Monitor through either the <a href="resapi_3zw4.htm"><b>LogEvent</b></a> or <a href="resapi_2hwz.htm"><b>SetResourceStatus</b></a> callback functions.</p>
<p>
<b>Open</b> should allocate all of the structures necessary to bring the new resource online and retrieve its private properties. To retrieve the private properties of a resource, call <a href="clusapi_5hd8.htm"><b>ClusterResourceControl</b></a> twice, passing CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES in the <i>dwControlCode</i> parameter for the first call and CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES for the second call. Resource DLLs should also retrieve their private properties in their <a href="resapi_44px.htm"><b>Online</b></a> function, a function that can be called repeatedly for a resource.</p>
<p>
To make sure that the resource is in the offline state when <b>Open</b> returns, read the resource's <a href="cluprops_8q0j.htm">PersistentState</a> property. This is important if a resource cannot be online on more than one node simultaneously, such as when two nodes cannot simultaneously use the same IP address. If there is no chance that the resource could be online prior to the start of the Cluster Service, then taking the resource offline in your implementation of <b>Open</b> is not necessary.</p>
<p>
Whenever possible, do not handle node-specific properties. If you must maintain node-specific properties, record them in the cluster database under a local machine key based on the node identifier. You can retrieve the node identifier by calling <a href="clusapi_919g.htm"><b>GetClusterNodeId</b></a>.</p>
<p>
For example, your resource DLL for managing a disk resource may need to maintain different drive names for each node if the nodes maintain different numbers of disks. That is, the physical drive may assume one name on one node and a different name on another node. Handle this situation by having cluster database keys for each of the node's computer names, and parse for additional parameters under the node-specific cluster database keys which are based on the node identifier.</p>
<p>
Call the Win32 function <b>SetLastError</b> just before returning.</p>
<h4>Example</h4>
<p>
In Cluster Server's File Share resource DLL, <b>Open</b> allocates a resource structure to contain the <a href="cluprops_5iur.htm">ShareName</a> and <a href="cluprops_79o3.htm">Path</a> properties. <b>Open</b> queries the cluster database using the functions in the Cluster API to find these properties and then saves them in the resource structure, saving the address of the resource structure in a global resource table. <b>Open</b> returns the index as the resource identifier.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Version: </b>Use Windows NT Server Enterprise Edition 4.0.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in resapi.h.</p>
<p>&nbsp;</p></body>
</HTML>

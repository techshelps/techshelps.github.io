<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About Property Tables</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_wolf_about_property_tables"></a>About Property Tables</h1>
<p>
A property table is an array of <a href="clustruct_2bal.htm"><b>RESUTIL_PROPERTY_ITEM</b></a> structures that is useful for working with multiple properties. Rather than using the <a href="clustruct_7p9u.htm"><b>CLUSPROP_BUFFER_HELPER</b></a> structure to step through each property, applications and resource DLLs can use a property table. In combination with the utility functions written to manipulate property values, property lists, and property tables, using a property table offers developers a simpler solution to the potentially complex task of property management.</p>
<p>
Each entry in a property table contains information about a particular property and an offset to the property's data. The data, or a pointer to the data, is stored in a buffer known as a parameter block. A parameter block is typically a structure that contains one member for each data value that belongs to a property in the property table. However, because an offset is used to identify the location of data, parameter block structures can contain non-property members as well as property members.</p>
<p>
The following illustration shows the relationship between a property table and a parameter block. The property table has two entries, each represented by a <b>RESUTIL_PROPERTY_ITEM</b> structure. The Offset member of each property table entry points to a member in the parameter block. Notice that non-property table data is included in the parameter block. </p>
<p>
<img src="images/resutil.gif" border=0></p>
<p>
The type of data stored in the <b>Default</b>, <b>Minimum</b>, and <b>Maximum</b> members as well as in the corresponding parameter block depends on the value of the <b>Format</b> member. The following list indicates the relationship between the <b>Format</b> member and the type of data in the <b>Default</b> member and parameter block. </p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=46%>Format member</th>
<th align=left width=24%>Default member</th>
<th align=left width=30%>Parameter block</th>
</tr>
<tr valign=top>
<td width=46%>CLUSPROP_FORMAT_BINARY</td>
<td width=24%>Pointer to a buffer if the value is non-null</td>
<td width=30%>LPWSTR pointing to the data followed by a DWORD to indicate size of the data in bytes</td>
</tr>
<tr valign=top>
<td width=46%>CLUSPROP_FORMAT_DWORD</td>
<td width=24%>DWORD</td>
<td width=30%>DWORD</td>
</tr>
<tr valign=top>
<td width=46%>CLUSPROP_FORMAT_EXPAND_SZ</td>
<td width=24%>Pointer to a null-terminated Unicode string if non-null</td>
<td width=30%>LPWSTR</td>
</tr>
<tr valign=top>
<td width=46%>CLUSPROP_FORMAT_MULTI_SZ</td>
<td width=24%>Pointer to a buffer if the value is non-null</td>
<td width=30%>LPWSTR pointing to the data followed by a DWORD to indicate size of the data in bytes</td>
</tr>
<tr valign=top>
<td width=46%>CLUSPROP_FORMAT_SZ</td>
<td width=24%>Pointer to a null-terminated Unicode string if non-null</td>
<td width=30%>LPWSTR</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

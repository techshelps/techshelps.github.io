<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ResUtilDupParameterBlock</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_wolf_resutildupparameterblock"></a>ResUtilDupParameterBlock</h1>
<p>
The <b>ResUtilDupParameterBlock</b> utility function duplicates a parameter block. </p>
<pre><code><b>DWORD WINAPI ResUtilDupParameterBlock(
  LPBYTE</b><i> OutParams</i><b>,                          </b>
<b>  const LPBYTE</b><i> InParams</i><b>,                      </b>
<b>  const PRESUTIL_PROPERTY_ITEM</b><i> PropertyTable  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>OutParams</i></dt>
<dd>
[out] Pointer to the duplicated parameter block.  </dd>
<dt>
<i>InParams</i></dt>
<dd>
[in] Pointer to the original parameter block. </dd>
<dt>
<i>PropertyTable</i></dt>
<dd>
[in] Pointer to an array of <b>RESUTIL_PROPERTY_ITEM</b> structures describing properties in the original parameter block. 
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
ERROR_SUCCESS</dt>
<dd>
The parameter block was duplicated successfully.
</dd>
</dl>
<p>
If the operation was unsuccessful, <b>ResUtilDupParameterBlock</b> returns a Win32® error value.</p>
<h4>Notes to Callers</h4>
<p>
A parameter block is a buffer or structure that contains the data or pointers to data for the properties described in a property table. <b>ResUtilDupParameterBlock</b> copies the data found in the input parameter block pointed to by <i>InParams</i> to the output parameter block pointed to by <i>OutParams</i>. If a variable in the parameter block is a pointer, memory for the data is allocated using the Win32 function <b>LocalAlloc</b>. You should deallocate this memory by calling either <b>LocalFree</b> for each pointer variable in the output parameter block or <a href="clusutil_271n.htm"><b>ResUtilFreeParameterBlock</b></a>. Make sure that you deallocate memory whether <b>ResUtilDupParameterBlock</b> succeeds or fails. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Version: </b>Use Windows NT Server Enterprise Edition 4.0.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in clusapi.h.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building a Custom Resource Type</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_wolf_building_a_custom_resource_type"></a>Building a Custom Resource Type</h1>
<p>
After you have created a project for your new resource type, attempt to build it. Use the Win32® Debug option if you would like debug versions of your DLLs and the Win32 Release option if you prefer release versions. You can build your DLLs from within Microsoft® Developer Studio™ or from the command line with the following commands:</p>
<pre><code>nmake /a /f <i>project.mak</i> CFG="<i>ResourceType</i> - Win32 <i>Version</i>"
nmake /a /f <i>project.mak</i> CFG="<i>ResourceTypeEx</i> - Win32 <i>Version</i>"
 </code></pre>
<p>
Substitute the name of your project's makefile for <i>project.mak</i>. Substitute<i> </i>the name of your new resource type for <i>ResourceType</i> and then append an "Ex" to the resource type for <i>ResourceTypeEx</i>. For example, if you name your new resource TestDB, set <i>ResourceType</i> to TestDB and <i>ResourceTypeEx</i> to TestDBEx. Specify Debug or Release for the version. </p>
<p>
If either of your build attempts fail, recheck that your environment variables are assigned correctly. See <a href="clustart_2rxw.htm">Preparing a Build Environment</a> for a detailed description of how to set these variables.</p>
<p>&nbsp;</p></body>
</HTML>

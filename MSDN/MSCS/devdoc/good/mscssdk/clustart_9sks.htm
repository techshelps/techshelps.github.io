<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Customizing a Resource DLL</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_wolf_customizing_a_resource_dll"></a>Customizing a Resource DLL</h2>
<p>
The resource DLL that is created by the Resource Type AppWizard contains implementations of all of the necessary entry point functions, but these implementations are very basic, providing only a basic failover and failback capability. There are three main reasons for customizing and enhancing the resource DLL source files that are generated by the AppWizard:
<ul>
<li>
To create code that will allow your resources to take full advantage of the cluster environment. For example, when your resource is being taken offline it might be advantageous to close files that are open and delete files that are temporary. </li>
<li>
To implement parameters or properties that provide information specific to your resources. </li>
<li>
To support the Active/Active failover and failback capability, which enables two separate instances of your resource to run on different nodes using different data. The data resides on a disk on the shared SCSI bus. </li>
</ul>
<p>
The source files in your resource DLL project include comments that begin with TODO: to indicate where to insert additional functionality or ADDPARAM: to indicate where to insert additional parameters or properties. The following modifications are common:
<ol>
<li>
Add library files specific to your resource type. Add lines for your resource-specific libraries after the following:<pre><code>#pragma comment(lib, "clusapi.lib")
 </code></pre>
</li>
<li>
Add header files specific to your resource type. Add any header files that provide definitions and declarations specific to your resource type after these lines:<pre><code>#include &lt;clusapi.h&gt;
#include &lt;resapi.h&gt;
#include &lt;stdio.h&gt;
 </code></pre>
</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

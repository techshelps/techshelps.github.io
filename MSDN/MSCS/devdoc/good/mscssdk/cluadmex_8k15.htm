<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cluster Administrator Extension API</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_wolf_cluster_administrator_extension_api"></a>Cluster Administrator Extension API</h1>
<p>
The Cluster Administrator Extension API allows developers of custom resource types to create an extension DLL for administering resources associated with these new types with resources associated with the standard Cluster Server types. Implementing a Cluster Administrator extension DLL enables all resource types to be administered with a consistent, graphical interface. To insure this consistency, Cluster Server requires that anyone implementing a resource DLL also implement a Cluster Administrator extension DLL.</p>
<p>
The Cluster Administrator Extension API consists of interfaces based on the Component Object Model (COM). Most of these interfaces are implemented by Cluster Administrator and called by the extension. Only a few are implemented by the extension directly. The interfaces are defined in the CLUADMEX.IDL file and the CLUADMEX.H header file. Related to the COM-based API are several functions that are used for registering an extension DLL with Cluster Administrator.</p>
<p>
A Cluster Administrator extension DLL is implemented as an in-process server. An in-process server provides a service, such as a property page that displays resource properties, to clients with a specific set of COM interfaces. These interfaces are made available through objects represented by unique identifiers called class identifiers (CLSID). In-process servers include these CLSIDs in the system registry to enable them to be recognized by the clients that require their services. </p>
<p>
Cluster Administrator extensions can be created with or without the Resource Type AppWizard provided with the Microsoft® Developer Studio™ visual development system. Using the Resource Type AppWizard saves time and effort by producing a Cluster Administrator extension that is complete and fully operational. For more information about using the Resource Type AppWizard to generate a Cluster Administrator extension, see <a href="clustart_8tlw.htm">Using the Resource Type AppWizard</a>. </p>
<p>
The Cluster Administrator extension created by the Resource Type AppWizard relies on the ActiveX Template Library (ATL) version 1.1. Developers creating Cluster Administrator extensions without using the AppWizard can base their extensions on ATL classes, classes from an alternate class library, or implement their classes without a library. Using ATL is recommended because it is an effective way to implement a Cluster Administrator extension. </p>
<p>&nbsp;</p></body>
</HTML>

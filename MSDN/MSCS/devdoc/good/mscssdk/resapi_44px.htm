<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Online</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_wolf_online"></a>Online</h2>
<p>
The <b>Online</b> entry point function marks a resource as available for use. </p>
<pre><code><b>DWORD WINAPI Online(
  RESID</b><i> ResourceId</i><b>,</b>   
<b>  PHANDLE</b><i> EventHandle </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ResourceId</i></dt>
<dd>
[in] Resource identifier for the resource to be made available.</dd>
<dt>
<i>EventHandle</i></dt>
<dd>
[in, out] On input, <i>EventHandle</i> is NULL. Usually, this is a handle to a system object, such as a process. On output, <i>EventHandle</i> contains a handle that is signaled when the resource detects a failure. For example, if <i>EventHandle</i> represents a process and the process is terminated, the <i>EventHandle</i> is signaled and the Resource Monitor will be notified.
<p>
<i>EventHandle</i> can also be set to NULL on output, indicating that the resource does not support asynchronous event notification.

</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
ERROR_SUCCESS</dt>
<dd>
The operation was successful, and the resource is now online.</dd>
<dt>
ERROR_RESOURCE_NOT_AVAILABLE </dt>
<dd>
The resource was arbitrated with some other systems, and one of the other systems won the arbitration.</dd>
<dt>
ERROR_IO_PENDING </dt>
<dd>
The request is pending and a thread has been activated to process the online request. 
</dd>
</dl>
<h4>Notes to Implementers</h4>
<p>
Refresh the private properties of the resource to be brought online in your <b>Online</b> entry point function. It is important to get a more recent copy of the properties you initially received from your <a href="resapi_1ub2.htm"><b>Open</b></a> entry point function in the event that changes have occurred since that time. To refresh these private properties, call <a href="clusapi_5hd8.htm"><b>ClusterResourceControl</b></a> twice, passing CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES in the <i>dwControlCode</i> parameter for the first call and CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES for the second call. </p>
<p>
Make your implementation of <b>Online</b> take less than 300 milliseconds to complete if at all possible. However, if your implementation requires more than 300 milliseconds:
<ol>
<li>
Start a separate thread to complete the request.</li>
<li>
Return ERROR_IO_PENDING immediately.</li>
<li>
Make the thread that is processing the request periodically report status information to the Resource Monitor by calling the <a href="resapi_2hwz.htm"><b>SetResourceStatus</b></a> callback function. Keep calling <b>SetResourceStatus</b> until one of these situations occurs:<ul>
<li>
The resource is placed in the ClusterResourceOnline state.</li>
<li>
The request has exceeded the three minute default time limit. A time out causes the Resource Monitor to call <a href="resapi_1xlx.htm"><b>Terminate</b></a> to abort the online request. The time limit is stored in the <a href="cluprops_856b.htm">PendingTimeout</a> common property. </li>
</ul>
</li>
</ol>
<p>
Return a valid handle in <i>EventHandle</i> to use event notification to inform the Resource Monitor of a resource's state. When a resource DLL supports event notification, the Resource Monitor will still call its <a href="resapi_43mt.htm"><b>IsAlive</b></a> function to thoroughly check for status but will not call <a href="resapi_20h1.htm"><b>LooksAlive</b></a>.</p>
<p>
Whenever possible, do not handle node-specific properties. If you must maintain node-specific properties, record them in the cluster database under a local machine key based on the node identifier. You can retrieve the node identifier by calling <a href="clusapi_919g.htm"><b>GetClusterNodeId</b></a>.</p>
<p>
For example, your resource DLL for managing a disk resource may need to maintain different drive names for each node if the nodes maintain different numbers of disks. That is, the physical drive may assume one name on one node and a different name on another node. Handle this situation by having cluster database keys for each of the node's computer names, and parse for additional parameters under the node-specific cluster database keys which are based on the node identifier.</p>
<h4>Example</h4>
<p>
In Cluster Server's File Share resource DLL, <b>Online</b> uses the resource identifier in <i>ResourceId</i> as an index into a resource table that keeps track of all resources handled by the DLL. <b>Online</b> retrieves the address of the resource structure for the appropriate resource and uses the information in this resource structure to call the Win32 function <b>NetShareAdd</b> to add the share name to the server.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Version: </b>Use Windows NT Server Enterprise Edition 4.0.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in resapi.h.</p>
<p>&nbsp;</p></body>
</HTML>

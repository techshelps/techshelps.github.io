<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IsAlive</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_wolf_isalive"></a>IsAlive</h2>
<p>
The <b>IsAlive</b> entry point function determines if a resource is available for use.</p>
<pre><code><b>BOOL WINAPI IsAlive(
  RESID</b><i> ResourceId  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ResourceId</i></dt>
<dd>
[in] Resource identifier for the resource to poll.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
TRUE</dt>
<dd>
The resource is online and functioning properly.</dd>
<dt>
FALSE</dt>
<dd>
The resource is not functioning properly.
</dd>
</dl>
<h4>Notes to Implementers</h4>
<p>
Unlike <a href="resapi_20h1.htm"><b>LooksAlive</b></a>, which determines whether a resource appears to be available, <b>IsAlive</b> determines whether the resource is in fact available. The set of procedures that you need to implement to determine availability depends on your resource. You can implement a simple procedure as Cluster Server does in its resource DLL for the Generic Application resource, which determines only if the application is running. Most likely you will want to do more, such as determining if data can be read or written and checking for a particular state. </p>
<p>
Make your implementation of <b>IsAlive</b> take 50 milliseconds or less to complete if at all possible. At the very most, you should not allow <b>IsAlive</b> to block processing for more than 300 milliseconds. However, if your implementation must take longer than 300 milliseconds: 
<ol>
<li>
Have a separate thread dedicated to performing the polling operation. </li>
<li>
Return the result of the last poll performed by the separate thread. </li>
</ol>
<p>
Call the Win32 function <b>SetLastError</b> just before returning. </p>
<h4>Example</h4>
<p>
In Cluster Server's File Share resource DLL, <b>IsAlive</b> uses the resource identifier in <i>ResourceId</i> as an index into a resource table that keeps track of all of the resources that are handled by the DLL. <b>IsAlive</b> retrieves the address of the resource structure and then makes a call to the Win32 function <b>NetShareGetInfo</b> to thoroughly check if the resource is alive.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Version: </b>Use Windows NT Server Enterprise Edition 4.0.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in resapi.h.</p>
<p>&nbsp;</p></body>
</HTML>

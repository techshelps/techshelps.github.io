<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>User Interface Improvements with Objects</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="userinterfaceimprovementswithobjects"></a>User Interface Improvements with Objects</h1>
<p>
We can wrap literally any code we might be able to execute in an application, inside an object for use on the World Wide Web. The last of our examples shows one of the many ways that objects can be used in HTML pages to better our user's perception our site. The object in this example, and, correspondingly, the sample itself, are both simple—but they'll give you an idea of what is possible.</p>
<p>
This example uses a home-made ActiveX control object, created in Visual Basic 5. While we will be examining how we can build our own server components in this book, we won't even begin to get into creating client-side controls or objects. Rest assured it can be done, easily, with version 5.0 of Visual Basic. </p>
<p class=indent>
For a detailed look at ActiveX control creation, see the Wrox Press publication Instant VB 5.0 ActiveX Control Creation.</p>
<h2>The User Interface Example</h2>
<p>
The single ASP page in this example asks first for a number in a single text box on a form:</p>
<p>
<img src="uifirst.gif" border=0></p>
<p>
Clicking Submit returns a page, generated on the fly, containing as many objects as were specified on the first page. The object itself is an <i>extremely</i> simple bar graph control. This sample uses an ActiveX control created with Visual Basic 5.0, although we could use a Java applet if we had one available—the code would be the same.</p>
<p>
<img src="improve.gif" border=0></p>
<p>
This example demonstrates the basic principles behind using the client-side <b><code>&lt;OBJECT&gt;</code></b> and <b><code>&lt;APPLET&gt;</code></b> tags to improve our ASP pages, and it does something that would be impossible with straight HTML—it displays data in a graphical format.</p>
<h2>The UIImprovement Code</h2>
<p>
For the last time, let's dig into the code and see what's going on. One trick we use here, which you've seen earlier, is to have a single ASP page that both prompts for the initial input, and displays the page with the results on it. </p>
<h3>Producing Two HTML Pages From One ASP File</h3>
<p>
Although we're generating two distinctly different pages in this example, all of our code resides in one <b><code>.asp</code></b> file. Our input form contains a hidden field named <b><code>hdnSecond</code></b>. When the page is first loaded, the value of this parameter in the <b><code>Request.Form</code></b> collection is an empty string, because we've never set it to anything. This makes the first <b><code>If</code></b> <b><code>...</code></b> <b><code>Then</code></b> clause <b><code>True</code></b>, displaying the form and not the results. The entire page then, is dictated by this <b><code>If...Then...Else...End</code></b> <b><code>If</code></b> block:</p>
<pre><code>&lt;%
If Request.Form("hdnSecond") = "" Then
   'show input form with that includes this line:
   &lt;INPUT TYPE="HIDDEN" NAME="hdnSecond" VALUE="Go"&gt;
   ...
Else
   'show result page with &lt;OBJECT&gt; tags
   ...
End If
%&gt;</code></pre>
<p>
When the user presses the Submit button, the form is submitted to the same page because we used the <b><code>Request</code></b> object's <b><code>ServerVariables</code></b> collection, with the <b><code>SCRIPT_NAME</code></b> parameter, as the <b><code>ACTION</code></b> parameter of the new <b><code>&lt;FORM&gt;</code></b>. The <b><code>SCRIPT_NAME</code></b> member of the collection returns the name of the currently executing script page—which is where we want to send our data for processing again. However, this time the test on <b><code>hdnSecond</code></b> returns <b><code>False</code></b> because <b><code>hdnSecond</code></b> has been set to "<b><code>Go</code></b>" in the input form.</p>
<h3>The Results Page With &lt;OBJECT&gt; Tags</h3>
<p>
The second block of code generates the HTML for a page that contains a number of <b><code>&lt;OBJECT&gt;</code></b> tags—depending on how many the user originally specified: </p>
<p>
<img src="improve.gif" border=0></p>
<p>
If they have accepted the default choice of three controls, we get a page with this HTML:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt; User-Interface Improvements Using ASP &lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;ASP Generated Page With Objects&lt;/H1&gt;
You chose to have 3 controls on this page. Here they are:&lt;p&gt;
&lt;OBJECT ID="SimpleGraph1"
   WIDTH=155 HEIGHT=143 CODEBASE="control/graph.cab"
   CLASSID="CLSID:BD374B2A-8155-11D0-9472-9498CA000000"&gt;
   &lt;PARAM NAME="Size" VALUE="100"&gt;
   &lt;PARAM NAME="Caption" VALUE="Graph Control 1"&gt;
&lt;/OBJECT&gt;
&lt;OBJECT ID="SimpleGraph2"
   WIDTH=155 HEIGHT=143 CODEBASE="control/graph.cab"
   CLASSID="CLSID:BD374B2A-8155-11D0-9472-9498CA000000"&gt;
   &lt;PARAM NAME="Size" VALUE="66.6666666666667"&gt;
   &lt;PARAM NAME="Caption" VALUE="Graph Control 2"&gt;
&lt;/OBJECT&gt;
&lt;OBJECT ID="SimpleGraph3"
   WIDTH=155 HEIGHT=143 CODEBASE="control/graph.cab"
   CLASSID="CLSID:BD374B2A-8155-11D0-9472-9498CA000000"&gt;
   &lt;PARAM NAME="Size" VALUE="33.3333333333333"&gt;
   &lt;PARAM NAME="Caption" VALUE="Graph Control 3"&gt;
&lt;/OBJECT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p>
Each of the three object tags is identical, except for the values of the <b><code>ID</code></b>, <b><code>NAME</code></b> and <b><code>SIZE</code></b> attributes in the <b><code>&lt;PARAM&gt;</code></b> tags. To differentiate the controls, and show how powerful ASP can be, we've modified these properties as we generated the page on the server. All that the requesting browser sees is the final HTML file; it doesn't know where or why the values are set as they are, it just does its job and renders the page.</p>
<h3>The Magic Within the Page</h3>
<p>
The great thing is how little server-side code really needs to be used to generate this HTML: </p>
<pre><code>...
Else
   'show result page with &lt;OBJECT&gt; tags
   ...
   &lt;% NumControls = Request.Form("txtNumControls") %&gt;
   &lt;H1&gt;ASP Generated Page With Objects&lt;/H1&gt;
   You chose to have &lt;%= NumControls %&gt; controls on this page.
   Here they are:&lt;P&gt;
&lt;% For i = 1 to NumControls %&gt;
     &lt;OBJECT ID="SimpleGraph&lt;%= i %&gt;"
       WIDTH=155 HEIGHT=143 CODEBASE="control/graph.cab"
       CLASSID="CLSID:BD374B2A-8155-11D0-9472-9498CA000000"&gt;
       &lt;PARAM NAME="Size" VALUE="&lt;%= 100—((i—1) * (100 / NumControls)) %&gt;"&gt;
       &lt;PARAM NAME="Caption" VALUE="Graph Control &lt;%= i %&gt;"&gt;
     &lt;/OBJECT&gt;
&lt;% Next %&gt;
...
End If</code></pre>
<p>
We first store the number of controls requested by the user in a variable called <b><code>NumControls</code></b>, then print out a string confirming this number. After this, all we have is a simple <b><code>For</code></b> <b><code>...</code></b> <b><code>Next</code></b> loop that iterates <b><code>NumControls</code></b> times, printing a complete <b><code>&lt;OBJECT&gt;</code></b> tag each time. We append the loop index variable, <b><code>i</code></b>, to the string when producing the <b><code>ID</code></b> and <b><code>PARAM</code></b> <b><code>NAME</code></b> values. We also use <b><code>i</code></b> and some mathematics to generate a different <b><code>SIZE</code></b> value for each control.</p>
<h3>The Control Directory</h3>
<p>
These <b><code>&lt;OBJECT&gt;</code></b> tags assume that the <b><code>CAB</code></b> file holding the VB 5.0 control is in a directory named <b><code>control</code></b>, beneath the current directory (i.e. in the <b><code>control</code></b> subdirectory of the directory where <b><code>uiimprovement.asp</code></b> lives). If the file <b><code>graph.cab</code></b> is in another location, and the control isn't already installed on your system, the graphs won't be displayed. You can fix this problem by moving the <b><code>CAB</code></b> file to the correct directory and refreshing the page.</p>
<p>
And that's it. Again, our code in a real world situation with a more powerful control would likely be more complex, but the basic idea is the same. With ASP we generate dynamic <b><code>&lt;OBJECT&gt;</code></b> and <b><code>&lt;APPLET&gt;</code></b> tags on the fly, as we need them, even to the point of specifying different initialization parameters for each control.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading Properties and Executing Methods</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="readingpropertiesexecutingmethods"></a>Reading Properties and Executing Methods</h1>
<p>
In the last few pages, we’ve concentrated on the different methods that we can use to connect code with events fired by objects on a page. However we've stayed simple as the only code we’ve been executing is a simple routine that displays a message box on the screen. If that’s all you ever want to do, then you can get by with skipping the rest of this chapter. If, however, you’re like the rest of us, and need to do other things with your code, then you’ll be interested in this section which shows how code executes the methods of different objects, and how you can read and modify an object's properties.</p>
<p>
Switch to or open up NotePad again, and enter this new code:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt; Methods And Properties &lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;CENTER&gt;
&lt;H1&gt; Using Methods and Properties &lt;/H1&gt;
&lt;FORM NAME="frmTest"&gt;
New URL:
&lt;INPUT TYPE="TEXT"  NAME="txtURL"&gt;&lt;p&gt;
&lt;INPUT TYPE="BUTTON" NAME="btnURL" VALUE="Change URL"&gt;
&lt;/FORM&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub btnURL_onClick
Dim newURL
newURL = Window.Document.frmTest.txtURL.Value
Window.Alert "The current URL is " &amp; Window.Location
Window.Alert "The new URL will be " &amp; newURL
Window.Navigate newURL
End Sub
&lt;/SCRIPT&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p>
Next load the page into Internet Explorer: </p>
<p>
<img src="mandprop.gif" border=0></p>
<p>
If you enter a valid URL into the text box and press the Change URL button, then you'll get a message box displaying the current URL. If you click OK to dismiss this first message box, another message box appears which displays the URL entered in the text box. After clicking OK a second time, the browser loads the page specified by the URL we entered, and displays it.</p>
<p>
The code that does this looks a little more complicated than last time, but it’s quite logical—and it shows many things we’re interested in learning about. Specifically, the code on this page reads properties and calls a method, and—as a bonus—it even uses a variable to do some of its work.</p>
<h2>How It Works</h2>
<p>
Since we’ve covered how to hook up code to events, we’re now free to focus just on the code inside the <b><code>&lt;SCRIPT&gt;</code></b> block. We’ll talk about each section in turn.</p>
<pre><code>Dim newURL</code></pre>
<p>
The <b><code>Dim</code></b> <b><code>newURL</code></b> line declares a variable named <b><code>newURL</code></b>, which will be valid for the duration of this subroutine execution. This line isn’t absolutely necessary, because VBScript doesn’t require variable declaration. However, it’s always good practice and makes the code we write easier to read and understand. </p>
<p>
It’s the next line that’s more interesting. The horrendously long string starting with <b><code>Window</code></b> is actually just a way to access the property we’re interested in, which in this case is the value inside the text box on the form:</p>
<pre><code>newURL = Window.Document.frmTest.txtURL.Value</code></pre>
<p>
Generally, accessing properties (to read or write to them) is just accomplished by using this syntax:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=194>Assigning to a variable</td>
<td width=348><b><code>VariableName</code></b> <b><code>=</code></b> <b><code>ObjectName.PropertyName</code></b></td>
</tr>
<tr valign=top>
<td width=194>Setting a property</td>
<td width=348><b><code>ObjectName.PropertyName</code></b> <b><code>=</code></b> <b><code>VariableName</code></b></td>
</tr>
</table><br>
<p>
In our case, we actually have to access three additional properties in succession, before we get to <b><code>Value</code></b>, the one we’re interested in. <b><code>Document</code></b> is a property of the default <b><code>Window</code></b> object, <b><code>frmTest</code></b> is a property of the <b><code>Document</code></b> object (because in our HTML we created a form in the document called <b><code>frmTest</code></b>), and <b><code>txtURL</code></b> is a property of the <b><code>frmTest</code></b> object. Finally, after this long string, we get to what we want. Don’t worry about understanding why exactly we needed to use <b><code>Document</code></b>, <b><code>frmTest</code></b>, or <b><code>txtURL</code></b> here, it's more important to understand how we set and retrieve properties in general. It shouldn’t be too hard – it’s identical to how it’s done in server-side code.</p>
<h3>Specifying the Default Window Object</h3>
<p>
In this example, we always enter the <b><code>Window</code></b> object wherever it applies. This isn’t strictly necessary, because the <b><code>Window</code></b> object is the default object when we write client-side code. Look at the two lines of code below:</p>
<pre><code>Alert "Hello World!"
Window.Alert "Hello World!"</code></pre>
<p>
Both of these lines accomplish the same thing, but the first line doesn’t bother to say <b><code>Window</code></b>. This is fine, because <b><code>Window</code></b> is always assumed if it’s not entered. In most of our examples, we’ll be taking the shortcut and not specifying <b><code>Window</code></b> if it’s not necessary.</p>
<p>
The next two lines call our old friend the <b><code>Alert</code></b> method, displaying a message box with the current location and then a message box with the location we’re jumping to.</p>
<pre><code>Window.Alert "The current URL is " &amp; Window.Location
Window.Alert "The new URL will be " &amp; newURL</code></pre>
<p>
The current location comes from the <b><code>Location</code></b> property of the <b><code>Window</code></b> object, and our new location is stored in the <b><code>newURL</code></b> variable we set earlier. We just concatenate these two values into strings with some descriptive text, and display them in their own message boxes.</p>
<h3>Navigating to a New URL</h3>
<p>
<b><code>Navigate</code></b> is a method of the <b><code>Window</code></b> object. It takes a URL as a parameter, and changes the current location to that URL:</p>
<pre><code>Window.Navigate newURL</code></pre>
<p>
This example just shows how we can call a method of an object using VBScript. It’s simple: use the same <b><code>ObjectName.MethodName</code></b> syntax like we would in ASP on the server.</p>
<p>
So we’ve covered how our scripts are located in HTML, how they’re connected to events, and how methods and properties are accessed. We’re now ready to get into the second major part of this chapter and talk about how to control the browser itself.</p>
</BODY>
</HTML>

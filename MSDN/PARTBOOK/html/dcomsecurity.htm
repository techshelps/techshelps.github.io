<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DCOM Security</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="dcomsecurity"></a>DCOM Security</h1>
<p>
Now let's look at security issues which are specific to DCOM operations and programming. </p>
<p>
We've seen in the 'Authenticated RPC' section that the DCOM security implementation is based on Authenticated RPC. Authenticated RPC uses the security support providers that are available through the Win32 Security Support Provider Interface (SSPI). At this time, Authenticated RPC uses the NTLMSSP exclusively.</p>
<p>
Security can be configured externally, that is, without either the client or the server having to include security-specific code. This is suitable for both legacy and simple COM applications. If the security needs of the application are more sophisticated, a variety of functions and interfaces are available to both clients and servers to configure security programmatically, as we'll see shortly.</p>
</BODY>
</HTML>

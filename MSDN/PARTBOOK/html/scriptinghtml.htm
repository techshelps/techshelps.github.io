<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scripting and HTML</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="scriptinghtml"></a>Scripting and HTML</h1>
<p>
If you’re a developer, you’ve probably seen plenty of "Hello World" examples in your lifetime, but we're going to ask that you put up with just one more. It sets the stage well for the rest of this chapter. If you haven’t, then consider this just one more privilege of learning how to program for the client-side of the Web. Our "Hello, World" sample is going to be simple. The code we’ll write displays a page with some text and a button. Clicking on the button displays a plain message box with the text Hello, World in it. As it turns out, there a number of different ways that we can do this, and we’ll cover them all in this section by writing different code that performs the same end function.</p>
<p>
If you have access to your computer, fire up a copy of NotePad (or whichever HTML editor you prefer) and enter the following text:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt; Hello Client-Side World &lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;CENTER&gt;
&lt;H1&gt; Our First Client-Side Code &lt;/H1&gt;
&lt;INPUT TYPE="BUTTON" NAME="btnHello" VALUE="Say Hello"&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub btnHello_onClick
  Alert "Hello World!"
End Sub
&lt;/SCRIPT&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p>
Save the file as something descriptive, like <b><code>Hello</code></b> <b><code>World.htm</code></b>, and start up a copy of Internet Explorer. Load up the page we just saved, and click the Say Hello button. If you’ve entered everything OK, you’ll see a message box proclaiming to everyone that you’ve entered the client-side world:</p>
<p>
<img src="hworld.gif" border=0></p>
<h2>Connecting Code to the Page</h2>
<p>
So how does this work? Outside of the <b><code>&lt;SCRIPT&gt;</code></b> and <b><code>&lt;/SCRIPT&gt;</code></b> tags (and the code between them), everything on this page probably looks familiar, because it’s just a standard Web page. Our HTML code is specifying a page with a title, a heading, and one button. The button is created with a single line of HTML code:</p>
<pre><code>&lt;INPUT TYPE="BUTTON" NAME="btnHello" VALUE="Say Hello"&gt;</code></pre>
<p>
If we’re using a button simply to submit a form, there isn’t any point in giving it a name. However, when using a button with server-side <i>or </i>client-side scripting, we need a way to refer to the button, so we give it a name – <b><code>btnHello</code></b>. Using prefixes like <b><code>btn</code></b> (signifying a normal button) with our form elements and objects makes it easy to determine what element we’re talking about when writing code. There's a list of the common prefixes in Appendix B.</p>
<p>
But what about the <b><code>&lt;SCRIPT&gt;</code></b> block? Let’s go over the different parts of this HTML.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;</code></pre>
<p>
All browsers that support scripting in HTML recognize the <b><code>&lt;SCRIPT&gt;</code></b> tag. This tag simply tells the browser that all of the text between itself and the closing <b><code>&lt;/SCRIPT&gt;</code></b> tag is script code that should be interpreted and executed at the appropriate time. The optional <b><code>LANGUAGE</code></b> attribute can be used to specify a certain scripting language. Internet Explorer supports both VBScript and JScript (Microsoft’s implementation of JavaScript) while Navigator currently only natively supports JavaScript. Both browsers treat the code inside a <b><code>&lt;SCRIPT&gt;</code></b> tag without a <b><code>LANGUAGE</code></b> attribute as JavaScript.</p>
<p>
The next three lines might look familiar – they’re very similar to a subroutine we’d write on the server in ASP code, with two exceptions. </p>
<pre><code>Sub btnHello_onClick
  Alert "Hello World!"
End Sub</code></pre>
<h3>Triggering an Event</h3>
<p>
The first difference is in the declaration itself. Instead of a name we choose ourselves, we have the name of the button, an underscore, and the word <b><code>onClick</code></b>. This is an <b>event</b> <b>declaration</b>, and it’s often used in client-side programming with objects. Like most objects, the button has properties and methods, but it also has a third feature associated with it, namely <b>events</b>. Methods and properties are a way for the programmer to look at the object’s state, or tell it to do something. Events, in contrast, are a way for the object to tell the programmer that something has happened to it. </p>
<p>
When an event occurs, the programmer has the option to do something about it. Different objects have different events, depending on what the object does. Buttons have an event named <b><code>onClick</code></b> that is fired when the button is clicked. As we’ll see later, other objects may not have an <b><code>onClick</code></b> event, but they will most likely have other events that signify different things have occurred.</p>
<p>
In our code, the first part of the event handler, <b><code>btnHello</code></b>, is just the name of the object that the event is coming from, and the <b><code>onClick</code></b> part is the name of the event we’re handling.</p>
<h3>Displaying Message Boxes</h3>
<p>
The only remaining part of this subroutine is the line:</p>
<pre><code>&nbsp;Alert "Hello World!"</code></pre>
<p>
This surely isn’t a line we would have seen while writing ASP code, because it pops up a message box that suspends processing—not something we’d want to happen on a server! On the client-side, however, something like this can be very useful to give feedback to users. The code here just displays a message box on the screen with the text Hello World!. The <b><code>Alert</code></b> keyword is actually a method of the <b><code>Window</code></b> object, but we'll look at that a little bit later.</p>
<p>
This example is simple, but it shows some very important foundations for our future work with client-side scripting. Any code to be executed by the browser needs to be placed inside both the <b><code>&lt;SCRIPT&gt;</code></b> tag, and generally includes an appropriate event handler that will executed. </p>
<p>
However, there is a way to cause code outside of an event handler to be executed as the page is interpreted, but it isn’t used as commonly as the event handler syntax. In addition, this functionality is of almost no use to someone using ASP—it mimics what ASP can do, but with much less power. We’ll talk about this technique briefly later in the chapter.</p>
<h2>Other Ways to Connect Up our Code</h2>
<p>
The previous example required us to name our event handlers rigidly—in the form <b><code>ObjectName_EventName</code></b>. There are a few other ways to connect code to an event, and we’ll explore them here.</p>
<h3>Specifying Scripts as HTML Attributes</h3>
<p>
First off, we can specify the routine that should be called, when we write the HTML that creates the object. If you still have the above example open in NotePad, replace the <b><code>&lt;INPUT&gt;</code></b> and <b><code>&lt;SCRIPT&gt;</code></b> lines with the code below:</p>
<pre><code>...
&lt;BODY&gt;
&lt;CENTER&gt;
&lt;H1&gt; Our First Client-Side Code &lt;/H1&gt;
&lt;INPUT TYPE="BUTTON" NAME="btnHello" VALUE="Say Hello" ONCLICK="Pressed" 
LANGUAGE="VBScript"&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
  Sub Pressed
   Alert "Hello World!"
  End Sub 
&lt;/SCRIPT&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p>
Reload the page, and press the button and you get the same result. Even though we’ve changed the code a bit, we’re still seeing the message box displayed by our subroutine. The code is different, but not by much. All we’ve done is change the name of the subroutine in the <b><code>&lt;SCRIPT&gt;</code></b> block, and add the <b><code>ONCLICK</code></b> and <b><code>LANGUAGE</code></b> attributes to the <b><code>&lt;INPUT&gt;</code></b> tag:</p>
<pre><code>&lt;INPUT TYPE="BUTTON" NAME="btnHello" VALUE="Say Hello" ONCLICK="Pressed" 
LANGUAGE="VBScript"&gt;</code></pre>
<p>
When the browser sees this, it knows to look for and run the code in the routine called <b><code>Pressed</code></b> when the button is clicked. The routine can be named anything we like, because the linkage is made explicitly in the <b><code>&lt;INPUT&gt;</code></b> tag, not implicitly by the name of the routine. The <b><code>&lt;INPUT&gt;</code></b>, <b><code>&lt;A&gt;</code></b> (anchor), <b><code>&lt;FORM&gt;</code></b>, and <b><code>&lt;BODY&gt;</code></b> tags all support this syntax, but with different events. Keep in mind that this method only works for these specific tags, and not for other objects. </p>
<p>
This is fine until we start inserting our own objects and want to script them also. So we'll need an alternative method that can be used to hook up script code for all objects. But first we'll look at how JavaScript can be used interchangeably with VBScript.</p>
<h3>Using JavaScript Code</h3>
<p>
Code can be hooked up with events in both VBScript and JavaScript, but JavaScript doesn’t support the syntax we showed you. To see it in action, you'll need to replace the code we’ve been using so far with this JavaScript code:</p>
<pre><code>...
&lt;FORM&gt;
&lt;INPUT TYPE="BUTTON" NAME="btnHello" VALUE="Say Hello" ONCLICK="Pressed()" 
LANGUAGE="JavaScript"&gt;
&lt;/FORM&gt;
&lt;SCRIPT LANGUAGE="Javascript"&gt;
  function Pressed()
  {
   alert("Hello World");
  }
&lt;/SCRIPT&gt;
...</code></pre>
<p>
The only real differences here are the addition of parentheses to the function name in the <b><code>&lt;INPUT&gt;</code></b> tag and the actual change from VBScript to JavaScript code in the <b><code>&lt;SCRIPT&gt;</code></b> block. Notice, though, that we need to use <b><code>Pressed()</code></b>, instead of just <b><code>Pressed</code></b>, in the <b><code>&lt;INPUT&gt;</code></b> tag's <b><code>ONCLICK</code></b> argument, because JavaScript uses only functions and not subroutines.</p>
<h3>Other Ways to Specify Scripts in HTML Attributes</h3>
<p>
As mentioned previously, the method of adding an attribute to the HTML tag to specify the name of the routine to execute, only works for certain HTML elements. Once we go beyond the integral parts of HTML to use objects in our pages, we’ll need a more robust way to connect code with these objects. The <b><code>ObjectName_EventName</code></b> method we used in our first example will work correctly, or we can use the following alternative.</p>
<p>
This method creates separate script blocks for each event we’ll handle, naming the event and the object in the opening <b><code>&lt;SCRIPT&gt;</code></b> tag. Here’s the code:</p>
<pre><code>...
&lt;BODY&gt;
&lt;CENTER&gt;
&lt;H1&gt; Our First Client-Side Code &lt;/H1&gt;
&lt;INPUT TYPE="BUTTON" NAME="btnHello" VALUE="Say Hello"&gt;
&lt;SCRIPT FOR="btnHello" EVENT="onClick" LANGUAGE="VBScript"&gt;
   Alert "Hello World!"
&lt;/SCRIPT&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p>
The above code says to the browser: when the object called <b><code>btnHello</code></b> (<b><code>FOR="btnHello"</code></b>) fires an event called <b><code>onClick</code></b> (<b><code>EVENT="onClick"</code></b>), then execute the following code using the VBScript interpreter (<b><code>LANGUAGE="VBScript"</code></b>).</p>
<p>
In this method we do away completely with a separate named subroutine or function, and instead we keep the code in a script block of its own. In effect, the <b><code>&lt;SCRIPT&gt;</code></b> tag together with the <b><code>FOR</code></b> and <b><code>EVENT</code></b> attributes is our subroutine declaration, because this is what tells the browser when to fire the code inside the <b><code>&lt;SCRIPT&gt;</code></b> block. This style will work with events from any form element, or from any arbitrary object that we might insert using the methods we’ll talk about in the next chapter.</p>
<p>
There is an even more compact method, though it's generally only suitable for simple, one line routines like our "Hello World" example. This is called <b>inline</b> <b>scripting</b>. We just put the actual code we want to execute in the <b><code>&lt;INPUT&gt;</code></b> tag, as the <b><code>ONCLICK</code></b> argument:</p>
<pre><code>...
&lt;BODY&gt;
&lt;CENTER&gt;
&lt;H1&gt; Our First Client-Side Code &lt;/H1&gt;
&lt;INPUT TYPE="BUTTON" VALUE="Say Hello" LANGUAGE="VBScript" ONCLICK="Alert 'Hello World!'"&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
</BODY>
</HTML>

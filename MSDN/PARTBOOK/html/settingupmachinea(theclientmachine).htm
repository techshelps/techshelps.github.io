<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting up Machine A (the Client Machine)</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="settingupmachinea(theclientmachine)"></a>Setting up Machine A (the Client Machine)</h1>
<p>
Machine A is the client machine with the following software configuration:</p>
<ul type=disc>
<li>
Windows 95 with Service Pack 1<br><br></li>
<li>
DCOM for Windows 95<br><br></li>
<li>
Internet Explorer 3.01</li>
</ul>
<p>
On this machine, we'll set up the Aberdeen &amp; Wilshire Calendar ActiveX control. This will require the pre-installation of the <b><code>Vccalc1.ocx</code></b> control and required associated files on the client station.</p>
<p>
To pre-install the <b><code>Vccalc1.ocx</code></b> file on machine A, you may use the following procedure:</p>
<ol>
<li>
Copy the <b><code>Regsvr32.exe</code></b> program over to <b><code>\Windows\System</code></b> directory if it's not already there.<br><br></li>
<li>
Copy the <b><code>Vccalc1.ocx</code></b> file to the <b><code>\Windows\System</code></b> directory.<br><br></li>
<li>
Copy the support files for <b><code>Vccalc1.ocx</code></b> to the <b><code>\Windows\System</code></b> directory (these files can be determined by running <b><code>DUMPBIN/IMPORTS VCCALC.OCX</code></b>); you'll also need <b><code>Mfc42d.dll</code></b>, <b><code>Mfco42d.dll</code></b>, and <b><code>Msvcrtd.dll</code></b>.<br><br></li>
<li>
Run <b><code>regsvr32 VCCALC1.OCX</code></b> on the control.</li>
</ol>
<p>
The next thing that you need to do on machine A is set up DCOM class linkage. We know that <b><code>Vccalc1.ocx</code></b> will instantiate an ATLFinder object during its operation, therefore we'll need to pre-wire this class (through its class ID) to a remote machine. Recall that we could have indeed hard-coded this into <b><code>ATLFinder.exe</code></b> using <b><code>CoCreateInstanceEx()</code></b>, but we'll take advantage of DCOM support for legacy applications in our experiment. </p>
<p>
The easiest way to do this, again, is with the assistance of the indispensable <b><code>Oleview.exe</code></b> utility. Follow these steps:</p>
<ol>
<li>
Copy the ATL support DLL, <b><code>atl.dll</code></b>, over to <b><code>\Windows\System</code></b> directory.<br><br></li>
<li>
Run <b><code>regsvr32 atl.dll</code></b>.<br><br></li>
<li>
Copy the <b><code>ATLFinder.exe</code></b> file over to a temporary directory.<br><br></li>
<li>
Run <b><code>ATLFinder /RegServer</code></b> to create the registry entries.<br><br></li>
<li>
Remove the <b><code>ATLFinder.exe</code></b>.</li>
</ol>
<p>
Running <b><code>ATLFinder.exe</code></b> will prepare the registry with information about the ATLFinder object. The actual <b><code>ATLFinder.exe</code></b> isn't required on this node, so we remove it after it's completed the job of setting up the registry entries. While ATLFinder adjusted the registry, it also inserted the location of the <b><code>.EXE</code></b> file under the <b><code>\HKEY_CLASSES_ROOT\&lt;clsid&gt;\LocalServer32</code></b> key. We need to remove this and point it at the remote machine B. Start up <b><code>Oleview.exe</code></b>. Select All Objects on the left pane, and find the ATLFinder1 Class entry and select it. On the right pane, select the Implementation tab. Select the Local Server subtab, and clear out the Path to Implementation edit. This will clear up the associated registry key. Next, select the Activation tab. The pane will look like this:</p>
<p>
<img src="03750911.gif" border=0></p>
<p>
Select the Launch as Interactive User check box and enter in the IP address of machine B in the Remote Machine Name edit. This tells the DCOM runtime to find a server for the ATLFinder1 class on the remote machine. When DCOM tries to launch the server remotely, the identity used will be that of the currently logged on user in Windows 95.</p>
<p>
The Enable ‘At Storage’ Activation setting is specifically used in ActiveX document and/or Moniker binding scenarios where the desired operation is to 'start the object server on the node wherever the persistent data file of the object instance is stored'. This can be a powerful, albeit confusing, mechanism for starting object servers remotely. Essentially, it will allow for the activation of a DCOM object server remotely if the client has a pathname (e.g. <b><code>\\System5\User\Doe\Mper.dat</code></b>) to a file containing the persistent data used by the class (in this case, the server will be started on the <b><code>\\System5</code></b> machine). The network filesystem is used as a type of persistent object instance store, and a UNC pathname is used to access and reactivate persisted object instances. </p>
<p class=indent>
In actual deployment and production scenarios, performing the above setup on every client machine would be impossible. The ideal situation is to have the entire procedure automated when the user reaches a web page containing the <code>Vccal1.ocx</code>. Our earlier discussion of automated code download and installation is a perfect solution for this problem. Thankfully, Microsoft has built the call to the <code>CoGetClassObjectFromURL()</code> helper API into the Internet Explorer, saving us a tremendous amount pain. To deploy using automatic code download and installation, in this case, boils down to the creation of a <code>.CAB</code> file bundling everything together.</p>
<p class=indent>
A <code>.CAB</code> file contains a compressed archive of one or more files. If the archives contains a <code>.INF</code> file, it will be used as the setup script to install the software component after it's downloaded. The <code>WinVerifyTrust()</code> facility is automatically called to allow the user to deny installation.</p>
<p class=indent>
Bear in mind, however, even if a <code>.CAB</code> file is used, that DCOM for Windows 95 will still need to be installed at each client workstation before our <code>Vccal1.ocx</code> page would work properly.</p>
</BODY>
</HTML>

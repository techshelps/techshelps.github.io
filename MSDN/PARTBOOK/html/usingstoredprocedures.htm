<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Stored Procedures</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="usingstoredprocedures"></a>Using Stored Procedures</h1>
<p>
Stored procedures provide an alternative to executing batches of SQL statements in ADO. We looked briefly at how we can call a stored procedure earlier. Let's take a look at how to get values back out of a stored procedure. Here's a simple code sample showing how to call a stored procedure with a single output parameter. </p>
<pre><code>Set cmd = Server.CreateObject("ADODB.Command")
oCmd.ActiveConnection = "dsn=SQLForum;database=pubs;uid=sa;pwd=;"
oCmd.CommandText = "{call recordcount(?)}"
<b>'now specify parameter info</b>
oCmd.Parameters.Append oCmd.CreateParameter("cnt", adInteger, adParamOutput)
oCmd.Execute
Response.Write "RecordCount = " &amp; oCmd(0)</code></pre>
<p>
In this example, we have a stored procedure called <b><code>recordcount</code></b>, which accepts one integer parameter and returns the number of records in our table. Alternately we can use this approach with the same stored procedure: </p>
<pre><code>Set oCon = Server.CreateObject("ADODB.Connection")
Set oCmd = Server.CreateObject("ADODB.Command")
oCon.Open "SQLForum", "sa", ""
Set oCmd.ActiveConnection = oCon
oCmd.CommandText = "{? = call recordcount}"
<b>'now specify parameter info</b>
oCmd(0).Direction = adParamReturnValue
oCmd.Execute
Response.Write "RecordCount = " &amp; oCmd(0)</code></pre>
</BODY>
</HTML>

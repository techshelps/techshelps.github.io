<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Launch Security</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="launchsecurity"></a>Launch Security</h1>
<p>
Launch security is automatically applied by the COM runtime when a server application is started due to a remote object creation request. After the request has been received from a client, the COM runtime obtains all the necessary security parameters from the registry if the creating process didn't specifically specify security parameters. </p>
<p>
There are two default activation settings in the registry that have machine-wide effect. They are both named values under the same key.</p>
<p>
<b><code>HKEY_LOCAL_MACHINE\Software\Microsoft\OLE</code></b></p>
<p>
<b><code>&nbsp;&nbsp;&nbsp;EnableDCOM = &lt;value&gt;</code></b></p>
<p>
The value is a string (<b><code>REG_SZ</code></b>) and can be a <b><code>Y</code></b> or an <b><code>N</code></b>. A value of <b><code>Y</code></b> enables remote activation of COM servers on this machine, any other value disables it. Even when remote activation is disabled, local activation is still allowed and is governed by the specific permissions in the <b><code>LaunchPermission</code></b> key of each class and the default settings in the <b><code>DefaultLaunchPermission</code></b> key.</p>
<p>
<b><code>HKEY_LOCAL_MACHINE\Software\Microsoft\OLE</code></b></p>
<p>
<b><code>&nbsp;&nbsp;&nbsp;DefaultLaunchPermission = &lt;value&gt;</code></b></p>
<p>
The <b><code>DefaultLaunchPermission</code></b> value is of type <b><code>REG_BINARY</code></b> and consists of a binary ACL of the principals (accounts or groups) that can have launch classes on this system. The value can be overridden by specifying a <b><code>LaunchPermission</code></b> value in the registry for a particular COM object. By default, the following principals are given 'allow launch' permissions:</p>
<ul type=disc>
<li>
Administrators—the administrator group<br><br></li>
<li>
System—the local system-privileged account<br><br></li>
<li>
Interactive—corresponding to the user currently logged in at the console</li>
</ul>
<p>
On a per-class basis, security configuration settings are stored as a set of named values under the following key:</p>
<p>
<b><code>HKEY_LOCAL_MACHINE\Software\Classes\AppID\</code></b></p>
<p>
<b><code>&nbsp;&nbsp;&nbsp;{AppID_value}\</code></b></p>
<p>
<b><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;named_value&gt; = &lt;value&gt;</code></b></p>
<p>
For a class, the <b><code>AppID_value</code></b> is a GUID that appears, as a string, under the <b><code>AppID</code></b> named value under the CLSID key of the class. The string <b><code>{AppID_value}</code></b> is used as a subkey under <b><code>...\Classes\AppID</code></b>.</p>
<p>
For an executable, the <b><code>AppID_value</code></b> is the name of the module (e.g. <b><code>myapp.exe</code></b>). Under the <b><code>{myapp.exe}</code></b> key there's a <b><code>REG_SZ</code></b> named value <b><code>AppID</code></b> with the AppID associated with the executable.</p>
<p>
The launch permissions are set in the named value <b><code>LaunchPermission</code></b>. The type and content of the value is the same as in the <b><code>DefaultLaunchPermission</code></b>. Other named values under the same key are:</p>
<ul type=disc>
<li>
<b><code>AccessPermission</code></b> specifying permissions to access running instances of the class. It's used only if the client doesn't call <b><code>CoInitializeSecurity()</code></b>.<br><br></li>
<li>
<b><code>RunAs</code></b> specifying that the server should run with the security context of the specified user.<br><br></li>
<li>
<b><code>LocalService</code></b> specifying that the server is a Windows NT service.<br><br></li>
<li>
<b><code>ServiceParameters</code></b> specifying the parameters to be passed to the service on invocation.<br><br></li>
<li>
<b><code>RemoteServerName</code></b> specifying the remote machine on which the server will be activated by default, if the client hasn't programmatically requested otherwise (by specifying, for example, a <b><code>COSERVERINFO</code></b> parameter to <b><code>CoCreateInstanceEx()</code></b>).</li>
</ul>
<p>
You can change the default settings through the <b><code>Dcomcnfg</code></b> utility.</p>
<p>
<img src="03751002.gif" border=0></p>
<p>
The procedure is similar for setting the security parameters of a specific application.</p>
<p>
<img src="03751003.gif" border=0></p>
<p>
Other than configuring DCOM security parameters through registry editing, it's also possible to have fine-grain control over these parameters using programmatic means. Let's examine some of the Win32 APIs and COM object interfaces associated with DCOM security control.</p>
</BODY>
</HTML>

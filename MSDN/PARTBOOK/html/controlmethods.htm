<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Control Methods</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana, arial, helvetica" size="2"><h1><a name="controlmethods"></a>Control Methods</h1>
<p>
OLE automation methods are like member functions of C++ objects. For example, we might add a method named Beep() to the CONTROL project, making the computer beep. Using ClassWizard, methods are as easy to add to our control as properties were. To add the Beep() method, open ClassWizard and select the OLE Automation tab. Make sure that the control class, CControlCtrl, is selected in the Class Name box; click Add Method, opening the Add Method box, as shown in Figure 9.11.</p>
<p>
<img src="fig09-11.gif" border=0></p>
<p>
<b>Figure 9.11 &nbsp;Using the Add Method box, we add the Beep() method to our OCX control.</b></p>
<p>
Type the name of this method, Beep, in the External Name box and select void in the Return Type drop-down listbox, indicating that we do not want to return any values from this function. If we had wanted to, we could have had our method return values such as long, short, or float by selecting them in this box. In addition, our method will not have any parameters passed to it. To receive parameters, we could type their names in the Name column of the Parameter List box (see Figure 9.11), and then select the parameter type in the drop-down listbox that appears in the Type column of the Parameter List box (we&#39;ll see how this works when we add a custom event next). Now click OK in the Add Method box, adding the Beep() method to CONTROL. Next, click the Edit Code button in ClassWizard, opening the new Beep() method:</p>
<pre><code>void CControlCtrl::Beep() 
{
}</code></pre>
<p>
We&#39;ll have the computer beep when this method is invoked, so add this line of code:</p>
<pre><code>void CControlCtrl::Beep() 
{
--&gt; MessageBeep(MB_OK);
}</code></pre>
<p>
Now we&#39;ve added a new method to our control. We can test this new method by inserting a control of the CONTROL type in the OLE control test container and selecting Invoke Methods in the test container&#39;s Edit menu, opening the Invoke Control Method box as shown in Figure 9.12.</p>
<p>
<img src="fig09-12.gif" border=0></p>
<p>
<b>Figure 9.12 &nbsp;Invoking our control&#39;s new method.</b></p>
<p>
Our Beep() method is available for use; clicking Invoke calls the Beep() method and makes the computer beep. To reach the Beep() method from VBScript, we do just what you might expect; we call Ctrl1.Beep() (we&#39;ve given our new control the ID Ctrl1).</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Control Page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY LANGUAGE = VBScript ONLOAD = &#34;Page_Initialize&#34;&gt;
&lt;CENTER&gt;
&lt;H1&gt;Control Page&lt;/H1&gt;
&lt;/CENTER&gt;
&lt;!- control.ocx&gt;
&lt;CENTER&gt;
&lt;OBJECT CLASSID=&#34;clsid:D96FBCC1-090A-101C-BAC7-040224009C02&#34; 
HEIGHT=80  WIDTH=100 ID=Ctrl1&gt;&lt;/OBJECT&gt;
&lt;INPUT TYPE = TEXT NAME = Textbox SIZE=20&gt;
&lt;/CENTER&gt;
&lt;SCRIPT LANGUAGE = VBScript&gt;
        Sub Page_Initialize
   --&gt;          Ctrl1.Beep()
                Ctrl1.Counter = 5
        End Sub
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p>
That&#39;s it&mdash;it was easy to add a new method and reach it from VBScript. The next step is to support custom events, and we&#39;ll take a look at that now.</p>
<h1></h1>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Window Object Properties</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="windowobjectproperties"></a>Window Object Properties</h1>
<p>
The <b><code>Window</code></b> object has a number of non-object properties, which we'll look at briefly in this section. In addition we’ll take a look at the <b><code>Location</code></b> object, since it reoccurs in other parts of the object model hierarchy. We’ll leave the other object properties until later in this chapter. </p>
<h2>The Name Property</h2>
<p>
This property returns the name of the <b><code>Window</code></b> object, and is read-only. If the current <b><code>Window</code></b> object doesn’t have a name, it returns an empty string.</p>
<h2>Parent, Opener, Self and Top</h2>
<p>
These properties return references to a given <b><code>Window</code></b> object. In this sense, they aren’t used directly, any more than the <b><code>Window</code></b> object itself is used directly. Instead, they’re only used as references to access other properties or methods. For example, the following code will give a syntax error:</p>
<pre><code>Alert "Window.Parent is " &amp; Window.Parent</code></pre>
<p>
But this code will work fine, returning the <b><code>Name</code></b> of the <b><code>Parent</code></b> window:</p>
<pre><code>Alert "Window.Parent.Name is " &amp; Window.Parent.Name</code></pre>
<p>
If the current <b><code>Window</code></b> object has a parent (like it would if it was part of a frameset), then <b><code>Parent</code></b> returns the <b><code>Window</code></b> object of the current window’s parent. If the current window doesn’t have a parent, i.e. it occupies the whole browser window, <b><code>Parent</code></b> returns the current window’s <b><code>Window</code></b> object.</p>
<p>
<b><code>Top</code></b> is a bit like <b><code>Parent</code></b>, and they sometimes return a reference to the same object. However, there is one major difference. <b><code>Top</code></b> always returns a reference to the top-level frame in a frameset, while <b><code>Parent</code></b> only returns the <b><code>Window</code></b> object of the frame immediately above it.</p>
<p>
<b><code>Opener</code></b> returns a reference to the <b><code>Window</code></b> object of the window that opened the current window, or returns nothing if the current window wasn’t opened in code (i.e. by a <b><code>Window.Open</code></b> statement). Finally, <b><code>Self</code></b> just returns a reference to the current <b><code>Window</code></b> object. <b><code>Window</code></b> and <b><code>Window.Self</code></b> both return the same reference.</p>
<p>
In a simple page without frames, these properties aren’t very useful. However, as soon as we start experimenting with frames or multiple browser windows, we’ll find that these properties come in handy.</p>
<h2>Status and defaultStatus</h2>
<p>
Both <b><code>Status</code></b> and <b><code>defaultStatus</code></b> can be used to set the text displayed in the status bar at the bottom of the browser. The code is as simple as:</p>
<pre><code>Window.Status = "Display me"</code></pre>
<p>
and</p>
<pre><code>Window.defaultStatus = "Display me"</code></pre>
<p>
In the current implementation of the Internet Explorer object model these properties do the same thing, and are both write-only if you’re using VBScript. This means we can set the text of the status bar, but we can’t read what’s there already, or what we’ve set it to.</p>
</BODY>
</HTML>

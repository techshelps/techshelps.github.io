<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoCreateInstanceEx()</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="cocreateinstanceex()"></a>CoCreateInstanceEx()</h1>
<p>
First, we have a <b><code>CoCreateInstanceEx()</code></b> call to specifically create an object instance on a remote machine, and also optimize on the performance of the <b><code>QueryInterface()</code></b> mechanism across the network by handling multiple <b><code>QueryInterface()</code></b> operations during the <b><code>CoCreateInstanceEx()</code></b> call (utilizing only one network round-trip). The prototype is shown here:</p>
<pre><code>HRESULT CoCreateInstanceEx( REFCLSID  rclsid,
                            IUnknown *  punkOuter,
                            DWORD * dwClsCtx,
                            COSERVERINFO* pServerInfo,
                            ULONG  cmq,
                            MULTI_QI  rgmqResults   );</code></pre>
<p>
The parameters are explained below:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=192><b>Function Parameters</b></td>
<td class=blue width=349><b>Description</b></td>
</tr>
<tr valign=top>
<td width=192><b><code>REFCLSID rclsid</code></b></td>
<td width=349>The CLSID of the COM class from which the object instance is to be created.</td>
</tr>
<tr valign=top>
<td width=192><b><code>IUnknown * punkOuter</code></b></td>
<td width=349>If <b><code>NULL</code></b>, indicate that the object is not being aggregated.  If non-<b><code>NULL</code></b>, the object being created is part of an aggregate. Note that out-of-process aggregation isn’t supported in the currently available version of DCOM. <b><code>CoCreateInstanceEx()</code></b> is guaranteed to return <b><code>CLASS_E_NOAGGREGATION</code></b> if a non-<b><code>NULL</code></b> value is passed, and the instance to be created is remote.</td>
</tr>
<tr valign=top>
<td width=192><b><code>DWORD * dwClsCtx</code></b></td>
<td width=349>A value from the CLSCTX (execution context) enumeration, it can be:<p>
<b><code>CLSCTX_INPROC_SERVER</code></b>,</p>
<p>
<b><code>CLSCTX_INPROC_HANDLER</code></b>,</p>
<p>
<b><code>CLSCTX_LOCAL_SERVER</code></b>,</p>
<p>
<b><code>CLSCTX_REMOTE_SERVER</code></b>,</p>
<p>
<b><code>CLSCTX_SERVER</code></b> or</p>
<p>
<b><code>CLSCTX_ALL</code></b></p>
<p>
Note that the last three values include <b><code>CLTSCTX_REMOTE_SERVER</code></b>, which means that they will also allow creation of a remote instance. Recall that it’s still possible to create a remote server by external registry configuration, potentially overriding the use of this parameter by the client.</p>
</td>
</tr>
<tr valign=top>
<td width=192><b><code>COSERVERINFO * pServerInfo</code></b></td>
<td width=349>Pointer to a <b><code>COSERVERINFO</code></b> structure that specifies the machine on which to create the object instance. The <b><code>COSERVERINFO</code></b> structure is defined to be:<p>
typedef struct  _COSERVERINFO</p>
<p>
{</p>
<p>
&nbsp;&nbsp;&nbsp;DWORD dwReserved1;</p>
<p>
&nbsp;&nbsp;&nbsp;LPWSTR pwszName;</p>
<p>
&nbsp;&nbsp;&nbsp;COAUTHINFO __RPC_FAR *pAuthInfo;</p>
<p>
&nbsp;&nbsp;&nbsp;DWORD dwReserved2;</p>
<p>
}  COSERVERINFO;</p>
<p>
The <b><code>pwszName</code></b> should be pointing to a wide string containing the server’s name.  When using DCOM over TCP/IP, this can contain the IP address of the node, or a DNS name such as <b><code>WWW2.ABC.COM</code></b>. Otherwise, a UNC name such as <b><code>\\MACHINE</code></b> is allowed. The <b><code>COAUTHINFO</code></b> member contains a security blanket definition (see Chapter 9) structure:</p>
<p>
typedef struct _COAUTHINFO</p>
<p>
{</p>
<p>
&nbsp;&nbsp;&nbsp;DWORD dwAuthnSvc;</p>
<p>
&nbsp;&nbsp;&nbsp;DWORD dwAuthzSvc;</p>
<p>
&nbsp;&nbsp;&nbsp;LPWSTR pwszServerPrincName;</p>
<p>
&nbsp;&nbsp;&nbsp;DWORD dwAuthnLevel;</p>
<p>
&nbsp;&nbsp;&nbsp;DWORD dwImpersonationLevel;</p>
<p>
&nbsp;&nbsp;&nbsp;COAUTHIDENTITY __RPC_FAR *pAuthIdentityData;</p>
<p>
&nbsp;&nbsp;&nbsp;DWORD dwCapabilities;</p>
<p>
}  COAUTHINFO;</p>
<p>
In most cases, when an NT Domain server is used to authenticate a user (using NTLMSSP), this member of the <b><code>COSERVERINFO</code></b> should be set to <b><code>NULL</code></b> rather than a pointer to <b><code>COAUTHINFO</code></b>. We'll cover security in more detail in Chapter 9.</p>
<p>
If this parameter, <b><code>COSERVERINFO</code></b>, is <b><code>NULL</code></b>, the SCM will be asked to do its job to determine how to create an instance of the class by examining the registry.</p>
</td>
</tr>
<tr valign=top>
<td width=192><b><code>ULONG cmq</code></b></td>
<td width=349>The number of the <b><code>MULTI_QI</code></b> structures being passed in as the <b><code>rgmqResults</code></b> parameter. Combined with <b><code>rgmqResults</code></b>, this parameter allows the DCOM runtime to save network round-trips by specifying multiple <b><code>QueryInterface()</code></b> calls to perform on the object immediately after creation. This must be at least 1 (i.e. you must get at least one interface for the remote object, otherwise why create it?).</td>
</tr>
<tr valign=top>
<td width=192><b><code>MULTI_QI rgmqResults</code></b></td>
<td width=349>Contains an array of <b><code>MUTLI_QI</code></b> structures, which is defined as:<p>
typedef struct _MULTI_QI</p>
<p>
{</p>
<p>
&nbsp;&nbsp;&nbsp;const IID*    pIID;</p>
<p>
&nbsp;&nbsp;&nbsp;IUnknown *    pItf;</p>
<p>
&nbsp;&nbsp;&nbsp;HRESULT       hr;</p>
<p>
}  MULTI_QI;</p>
<p>
Upon calling, the <b><code>pIID</code></b> portion contains a pointer to the IID of each interface to <b><code>QueryInterface()</code></b> for. Upon call return, the <b><code>pItf</code></b> member will contain the interface pointer requested if the <b><code>hr</code></b> member is <b><code>S_OK</code></b>. If the <b><code>hr</code></b> member for a specified interface is <b><code>E_NOINTERFACE</code></b>, the <b><code>pItf</code></b> member is invalid, and the object doesn't support the interface requested. </p>
</td>
</tr>
</table><br>
<p>
The possible return values from <b><code>CoCreateInstanceEx()</code></b> are:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=170><b>Return Code</b></td>
<td class=blue width=371><b>Description</b></td>
</tr>
<tr valign=top>
<td width=170><b><code>S_OK</code></b></td>
<td width=371>The object instance was created successfully.</td>
</tr>
<tr valign=top>
<td width=170><b><code>E_INVALIDARG</code></b></td>
<td width=371>One or more arguments passed in were invalid.</td>
</tr>
<tr valign=top>
<td width=170><b><code>E_NOINTERFACE</code></b></td>
<td width=371>None of the specified interfaces in the <b><code>rqmqResults</code></b> was available from the object.</td>
</tr>
<tr valign=top>
<td width=170><b><code>CO_S_NOTALLINTERFACES</code></b></td>
<td width=371>Not all of the specified interfaces in the <b><code>rqmqResults</code></b> were available, but at least one entry contains a valid interface.</td>
</tr>
</table>
</BODY>
</HTML>

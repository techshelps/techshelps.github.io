<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IServerSecurity Interface</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="iserversecurityinterface"></a>IServerSecurity Interface</h1>
<p>
On the server side, the server is to obtain the parameters contained in the client's security blanket for this interface and perform manipulation based on these parameters (such as impersonating the client). The main interface for this purpose is the <b><code>IServerSecurity</code></b>. This interface also provides control over the security level while executing on behalf of the client. To obtain this interface, which is actually provided by a call context object inside the stub, the server must make a <b><code>CoGetCallContext()</code></b> call. </p>
<p>
<img src="03751005.gif" border=0></p>
<p>
Once the <b><code>IServerSecurity</code></b> interface is obtained, the server has the option to:</p>
<ul type=disc>
<li>
Get specific security level information from the blanket by making the <b><code>IServerSecurity::QueryBlanket()</code></b> method call<br><br></li>
<li>
Impersonate the client's security level and identification while carrying out resource access by making the <b><code>IServerSecurity::ImpersonateClient()</code></b> and <b><code>IServerSecurity::RevertToSelf()</code></b> method calls<br><br></li>
<li>
Determine if the server thread is currently impersonating the client using the <b><code>IServerSecurity::IsImpersonating()</code></b> method call</li>
</ul>
<p>
As with the <b><code>IClientSecurity</code></b> interface, there are wrapper APIs including <b><code>CoQueryClientBlanket()</code></b>, <b><code>CoImpersonateClient()</code></b> and <b><code>CoRevertToSelf(),</code></b> making the use of the <b><code>IServerSecurity</code></b> interface somewhat simpler. </p>
</BODY>
</HTML>

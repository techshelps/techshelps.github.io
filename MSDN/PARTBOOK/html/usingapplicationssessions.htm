<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Applications and Sessions</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="usingapplicationssessions"></a>Using Applications and Sessions</h1>
<p>
We looked briefly at what the <b><code>Application</code></b> and <b><code>Session</code></b> object are in Part 1 of this book, and had a brief glimpse of the way they could be used. When we come to build Web-based client/server applications, these two objects assume a far greater importance that we’ve previously credited them with. They allow us to connect together all the parts of our application.</p>
<p>
For example, we can tell where on our site our visitor has already been, where they need to go next, and what they've decided to buy as they go along. In other words we can store and maintain the values of variables for each user, as well as globally for all users. In this section, we'll explore some of the possibilities in detail. </p>
<h2>Understanding Global.asa</h2>
<p>
To make <b><code>Application</code></b> and <b><code>Session</code></b> work in ASP, we use a single file named <b><code>global.asa</code></b> for each 'application'. This file resides in the directory on the server that is the root of that application—i.e. where the files that make up the application are located. Any subdirectories of the main application directory are also part of the application, and the <b><code>global.asa</code></b> file applies to their contents as well. This means that you need to be aware of the possibility of overlap between applications, and should generally create separate directories for each one. For example: </p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=blue width=260><b>Physical directory</b></td>
<td class=blue width=138><b>Virtual directory</b></td>
<td class=blue width=156><b>Application</b></td>
</tr>
<tr valign=top>
<td width=260><b><code>C:\InetPub\WWWRoot\</code></b></td>
<td width=138><b><code>/</code></b></td>
<td width=156></td>
</tr>
<tr valign=top>
<td width=260><b><code>C:\InetPub\WWWRoot\Demo\</code></b></td>
<td width=138><b><code>/DemoApp</code></b></td>
<td width=156><b><code>Demo</code></b></td>
</tr>
<tr valign=top>
<td width=260><b><code>C:\InetPub\WWWRoot\Demo\Images\</code></b></td>
<td width=138></td>
<td width=156><b><code>Demo</code></b></td>
</tr>
<tr valign=top>
<td width=260><b><code>C:\InetPub\WWWRoot\Apps\Main\</code></b></td>
<td width=138><b><code>/MainApp</code></b></td>
<td width=156><b><code>MainApp</code></b></td>
</tr>
<tr valign=top>
<td width=260><b><code>C:\InetPub\WWWRoot\Apps\Main\Test\</code></b></td>
<td width=138><b><code>/TestApp</code></b></td>
<td width=156><b><code>TestApp</code></b> <i>and</i> <b><code>MainApp</code></b></td>
</tr>
</table><br>
<p>
So, when we talk about an <b>application</b> in ASP, we are actually talking about all the files included in the same directory as <b><code>global.asa</code></b>, and any of its subdirectories.</p>
<h2>Application and Session Events</h2>
<p>
We talked about the events that <b><code>Application</code></b> and <b><code>Session</code></b> implement back in Chapter 2. However, we'll summarize these briefly in the context of state, and then quickly move on to look at how we can use them in our applications.</p>
<h3>The Application_onStart and Session_onStart Events</h3>
<p>
Both of these events are to be used to initialize state, by setting up variable that are global either for the application or a specific user. When the first user accesses a file in our application, the <b><code>Application_onStart</code></b> event is triggered. This is used to initialize any application-wide global variables. When the user begins a session for the first time, the <b><code>Session_onStart</code></b> event is triggered. This is used to initialize user-specific information. </p>
<p>
The power of the <b><code>Session</code></b> object comes from the fact that it can store variables that are global to just that specific user, and so each user can have their own individual value for that variable. <b><code>Session</code></b> objects are not always created automatically for every user when they enter our application. However, storing or accessing a variable in the <b><code>Session</code></b> object will create it, and fire the <b><code>Session_onStart</code></b> event. We can force new sessions to always be created as soon as a visitor enters our application by writing code in <b><code>global.asa</code></b> to respond to this event. </p>
<p>
When responding to the <b><code>Application_onStart</code></b> event, we must not under any circumstances use code specific to any one particular user. In this event we would typically create global objects, such as a server side component that needs to be shared and available to every visitor. </p>
<p class=indent>
<b><code>Session</code></b> and <b><code>Application</code></b> events only happen when a client retrieves an <b><code>ASP</code></b> page—they are not triggered when an <b><code>HTML</code></b> page in the application is requested. Therefore, if you have additional server side applications such as ISAPI or CGI scripts, make sure that they do not depend on specific events having occurred within an ASP page. Otherwise the ISAPI or CGI script may crash and cause the Web server to hang.</p>
<h3>The Session_onEnd and Application_onEnd Events</h3>
<p>
The <b><code>Session_OnEnd</code></b> event occurs either when a current <b><code>Session</code></b> is abandoned by using the <b><code>Session.Abandon</code></b> method, or when it times out. By default this is 20 minutes after the last request for a page from the application, though this can be changed either by setting the <b><code>Session.Timeout</code></b> property or by editing the registry. See Chapter 2 for more details.  </p>
<p>
Something we need to consider is if we have objects that themselves contain timeouts. If, for example, we create a database connection in a <b><code>Session</code></b>, and the connection timeout is less than the <b><code>Session</code></b> timeout, it's possible for corruption of the object to occur. If the database connection times out after ten minutes, and the <b><code>Session</code></b> times out after twenty minutes, the database connection will not be valid, even though the object in the <b><code>Session</code></b> still is.</p>
<p>
The <b><code>Application_onEnd</code></b> event can be used to clean up all of the global objects and variables. There is a problem at the present time, however, in that this event may not actually be triggered until the Web server is stopped. Revisions of ASP seem likely to specify that the <b><code>Application_onEnd</code></b> event be triggered once the last <b><code>Session_onEnd</code></b> event occurred, i.e. when the last session ends and there are no current application users. </p>
</BODY>
</HTML>

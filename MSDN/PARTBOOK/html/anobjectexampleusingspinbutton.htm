<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>An &lt;OBJECT&gt; Example - Using a Spin Button</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="anobjectexampleusingspinbutton"></a>An &lt;OBJECT&gt; Example - Using a Spin Button</h1>
<p>
Let's see an example to demonstrate what we're talking about. Open a new file in NotePad and enter this:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt; Objects &lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;CENTER&gt;
&lt;H1&gt; Objects &lt;/H1&gt;
&lt;FORM NAME="frmTest"&gt;
  Spin Value: &lt;INPUT TYPE="TEXT" NAME="txtSpinValue"&gt;&lt;P&gt;
&lt;/FORM&gt;
&lt;OBJECT CLASSID="clsid:79176FB0-B7F2-11CE-97EF-00AA006D2776" ID="spnTest"
  CODEBASE="http://activex.microsoft.com/controls/mspert10.cab"&gt;
&lt;/OBJECT&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub spnTest_Change
  Document.frmTest.txtSpinValue.Value = spnTest.Value
End Sub
&lt;/SCRIPT&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p>
If you load this page into Internet Explorer, you'll notice that a text box and two <b>spin</b> <b>buttons</b>. You've probably seen these in other Windows applications, but perhaps not in an HTML page.</p>
<p>
<img src="objects.gif" border=0></p>
<p>
Spin buttons aren't one of the standard HTML form control elements, so we've created one ourselves with an <b><code>&lt;OBJECT&gt;</code></b> tag. Click on the up and down buttons and notice how the value in the text box changes—the code in our page connects the spin button's <b><code>Change</code></b> event with the text box, so the text box is updated each time the spin button is clicked.</p>
<p>
The spin button control we're using here is from the Forms 2.0 Object Library. If you've installed the ActiveX Control Pad, Visual InterDev, the HTML Layout Control, or Internet Explorer 3.01 or 3.02, you'll have this file installed and registered on your system. However, with the additional <b><code>CODEBASE</code></b> attribute we've added, the file will be automatically downloaded from the Microsoft site if it's not already present on the machine you use to view this page.</p>
<h2>Displaying the Spin Button's Value Property</h2>
<p>
We'll now briefly go over the code that causes the text box to interact with the spin button control. With the background we acquired from the last chapter, it's easy to understand what the script code on this page is doing.</p>
<p>
We're using the <b><code>ObjectName_EventName</code></b> method of connecting code to an object's event. The spin button control fires an event called <b><code>Change</code></b> whenever its value changes. It also supports events called <b><code>SpinUp</code></b> and <b><code>SpinDown</code></b> that are only fired on an up or down click, respectively. For our purposes <b><code>Change</code></b> is fine, so that's the only event we'll handle.</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub spnTest_Change
  Document.frmTest.txtSpinValue.Value = spnTest.Value
End Sub
&lt;/SCRIPT&gt;</code></pre>
<p>
The code that we execute when the value changes is simple. The spin button object's current value is stored in a property called <b><code>Value</code></b>. Because we've named the object <b><code>spnTest</code></b>, we can access this number with the code <b><code>spnTest.Value</code></b>. The rest of the code on this line is just performing an assignment to the <b><code>Value</code></b> property of the text box (named <b><code>txtSpinValue</code></b>) on our form (named <b><code>frmTest</code></b>). We see the results of this assignment on the HTML page when the value displayed by the text box changes as we click the spin button.</p>
<h2>Presetting the Value with a Parameter Tag</h2>
<p>
Now imagine that the page is not an <b><code>.htm</code></b> file, but an Active Server Page on our Intranet server. The spin button and text box display the number of items on a customer's order. If they are reviewing an existing order, it needs to be set to the value of the current order, ready for the customer to increase the quantity, if need be.</p>
<p>
The <b><code>&lt;OBJECT&gt;</code></b> tag we used earlier sets the value of the spin button when it's created in the page to the default of zero. How do we go about setting it to a different 'default' value? The answer is to add a <b><code>&lt;PARAM&gt;</code></b> tag to the code. This example sets the value to <b><code>10</code></b>:</p>
<pre><code>&lt;OBJECT CLASSID="clsid:79176FB0-B7F2-11CE-97EF-00AA006D2776" ID="spnTest"
  CODEBASE="http://activex.microsoft.com/controls/mspert10.cab"&gt;
  &lt;PARAM NAME="Position" VALUE="10"&gt;
&lt;/OBJECT&gt;</code></pre>
<p>
In effect, all it's doing is setting a property to a default value. In fact, the code uses <b><code>Position</code></b> rather than <b><code>Value</code></b>, but the result is the same. When the object is created, its value will be <b><code>10</code></b>.</p>
<p class=indent>
The only real way to work with objects like this is to use Microsoft's ActiveX Control Pad, or an equivalent such as Visual InterDev, which understands how to insert objects and set the properties.</p>
<h2>Doing It From a Database</h2>
<p>
This still doesn't answer the whole question, though. The value won’t be a static number, it will be a value in a database. No problem, because the page is an <b><code>.asp</code></b> file rather than a normal <b><code>.htm</code></b> page. It can get the value and insert it into the <b><code>&lt;PARAM&gt;</code></b> tag, as well as into the text box: </p>
<pre><code>...
&lt;% 
  Set oConn = Server.CreateObject("ADODB.Connection")
  oConn.Open "Contacts"
  Set oRs = oConn.Execute("SELECT * FROM Orders WHERE OrderNo = 'PR0172'")
  strExistingQty = CStr(oRs.Fields("Quantity"))
  oRs.Close
%&gt;
...
&lt;FORM NAME="frmTest" ACTION="AmendOrder.asp&gt;
  Spin Value: 
  &lt;INPUT TYPE="TEXT" NAME="txtSpinValue" VALUE="&lt;% = strExistingQty %&gt;"&gt;
  &lt;P&gt;
&lt;/FORM&gt;
...
&lt;OBJECT CLASSID="clsid:79176FB0-B7F2-11CE-97EF-00AA006D2776" ID="spnTest"
  CODEBASE="http://activex.microsoft.com/controls/mspert10.cab"&gt;
  &lt;PARAM NAME="Position" VALUE="&lt;% = strExistingQty %&gt;"&gt;
&lt;/OBJECT&gt;
...</code></pre>
<p>
When it arrives at the client, ready to be displayed in the browser, the values have been filled in, and of course the ASP code is not sent anyway:</p>
<p>
&nbsp;&nbsp;</p>
<pre><code>...
&lt;FORM NAME="frmTest" ACTION="AmendOrder.asp&gt;
  Spin Value: 
  &lt;INPUT TYPE="TEXT" NAME="txtSpinValue" VALUE="10"&gt;
  &lt;P&gt;
&lt;/FORM&gt;
...
&lt;OBJECT CLASSID="clsid:79176FB0-B7F2-11CE-97EF-00AA006D2776" ID="spnTest"
  CODEBASE="http://activex.microsoft.com/controls/mspert10.cab"&gt;
  &lt;PARAM NAME="Position" VALUE="10"&gt;
&lt;/OBJECT&gt;
...</code></pre>
<p>
This is just a simple example, there are many other things we could do, for example we should be more thorough when querying the database of course. However, it's enough to illustrate the point that we are now firmly into client/server territory. The server creates the page containing the existing values, but the client is 'active' in the sense that it can handle all the work of setting the text box value without needing further involvement from the server.</p>
<h2>Beyond Properties: Calling Methods</h2>
<p>
Like we've said, dealing with objects on the client is very similar to working with objects on the server. Where the <b>methods</b> of an object are concerned, they're actually exactly the same. Suppose we've already created an object, and assigned it's reference to a variable named <b><code>objVar</code></b>. Further, suppose that this object has a method called <b><code>myMethod</code></b>. Whether we're executing code in the browser or on the server, the way we call this method is identical:</p>
<pre><code>objVar.myMethod</code></pre>
<p>
The syntax is also the same regardless of whether we're using JavaScript or VBScript, although it will differ slightly if the method accepts parameters. Method calls in VBScript do not use parentheses, while JavaScript method calls do.</p>
<h2>Beyond Properties: Handling Events</h2>
<p>
While intrinsic ASP objects like <b><code>Application</code></b> have <b>events</b>, objects we create and use on the server don't generally fire events. Our exposure to these objects is limited to method calls and property access. As you've seen in the previous chapter, many objects on the client-side <b>do</b> fire events—it's one of the most commonly used ways to execute code.</p>
<p>
The syntax to connect code to an object's event is exactly the same for user-created objects as it is for objects in the browser object model, and depends on the style we choose to connect our code to the event. Different methods of hooking up event code were discussed at length at the beginning of the last chapter. Our choice may depend on the scripting language. In VBScript, we can use: </p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub ObjectName_Event1Name
   ...
End Sub 
Sub ObjectName_Event2Name
   ...
End Sub
&lt;/SCRIPT&gt;</code></pre>
<p>
JavaScript doesn't support the Visual Basic system of multiple event handlers in one <b><code>&lt;SCRIPT&gt;</code></b> block. Also since adding the event name to the <b><code>&lt;INPUT&gt;</code></b> tag is only supported for intrinsic elements that can be created with HTML, this leaves only one style for the combination of user-created objects and JavaScript:</p>
<pre><code>&lt;SCRIPT LANGUAGE="JavaScript" FOR="ObjectName" EVENT="Event1Name"&gt;
...
&lt;/SCRIPT&gt;
&lt;SCRIPT LANGUAGE="JavaScript" FOR="ObjectName" EVENT="Event2Name"&gt;
...
&lt;/SCRIPT&gt;</code></pre>
<p>
This style can also be used with VBScript code if you wish.</p>
</BODY>
</HTML>

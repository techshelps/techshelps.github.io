<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>When State Doesn't Look After Itself</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="whenstatedoesntlookafteritself"></a>When State Doesn’t Look After Itself</h1>
<p>
The whole concept of <b><code>Applications</code></b> and <b><code>Sessions</code></b> requires the browser to accept and implement cookies. If it doesn't, then ASP is unable to maintain state information of any kind. We have to resort to the older methods of CGI programming.</p>
<h2>How State Works in ASP</h2>
<p>
As we said earlier, the HTTP protocol is inherently stateless, and relies on cookies to be able to manage and recognize requests, and match them to the users. When ASP wants to establish a session, it sends the <b><code>Set-Cookie</code></b> HTTP header to the browser, to establish a unique user session ID and the path of the application it corresponds to—i.e. where the appropriate <b><code>global.asa</code></b> file resides:</p>
<pre><code>Set-Cookie: ASPSESSIONID=LRUSDYXQMWRTNWEB; path=/TestApp</code></pre>
<p>
From our discussions of cookies in Chapter 2, you'll realize that this one doesn't expire until the browser is shut down. In theory, if the browser was to be left running for weeks on end, the cookie will remain current. But the <b><code>Session</code></b> object has a default <b><code>Timeout</code></b> of twenty minutes, and that point the <b><code>Session</code></b> is marked as having ended and any variables in it are destroyed.</p>
<h3>The Un-expired Cookie Problem</h3>
<p>
The fact that a user's <b><code>Session</code></b> <b><code>ID</code></b> cookie may not have expired, while the matching <b><code>Session</code></b> on the server already has expired, raises an interesting question. What happens if that user comes back to our site again? The server will check the session ID in their cookie against the currently active sessions, and if it doesn't match will just create and initialize a new <b><code>Session</code></b>. The user then effectively 'goes back to the start'. </p>
<p>
Of course, this assumes that the session ID will be unique for every user. If this isn't the case, the application might find itself with two users sharing a <b><code>Session</code></b>. We have to assume that Microsoft has thought of this, and that the session ID generator is sufficiently random to prevent it happening! </p>
<h2>When the Cookie Jar is Empty</h2>
<p>
One problem that Microsoft cannot prevent is the situation where the session ID cookie our server sends is not supported by the browser, or not accepted by the user. Or more critically, it's possible for the server administrator to turn off the ability to maintain Sessions altogether by editing the registry. Now, the automatic state mechanism is not going to work, so we need an alternative plan. </p>
<p>
We could use a system originally implemented in ASP, but then removed again, which added parameters to all the hyperlinks in the pages so as to pass on the session ID. We could emulate this, or just shunt the user off to a separate version of our site that worked without requiring state information. We could even throw them out altogether, though this may tend to discourage future visits...</p>
<h3>Checking for Cookie Acceptance</h3>
<p>
But before we can do any of this, we need a way of determining whether or not the browser can support cookies, without causing havoc. Easy enough, we just use a default opening page that gets sent to <i>every</i> user, when they first enter the application. We could include a 'Welcome' graphic, like a real application's splash screen, or possibly some introduction to the site:</p>
<p>
<img src="bookstop.gif" border=0></p>
<p>
Here's the code that creates this page, with the important lines are highlighted:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META HTTP-EQUIV="REFRESH" CONTENT="5; URL=hellotest.asp"&gt; 
&lt;TITLE&gt;Document Title&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;CENTER&gt;&lt;IMG SRC="Welcome.gif"&gt;&lt;/CENTER&gt;
&lt;% On Error Resume Next
   Session("TestBrowser")="Hello" %&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p>
The ASP code first turns off error checking, then stores a value in a <b><code>Session</code></b> level variable named <b><code>TestBrowser</code></b>. If the browser doesn’t support cookies, or if they're turned off, there will be no <b><code>Session</code></b> object and the code will fail—however there won't be an error message because of the <b><code>On</code></b> <b><code>Error</code></b> <b><code>Resume</code></b> <b><code>Next</code></b>. The real key to this page is the first highlighted line:</p>
<pre><code>&lt;META HTTP-EQUIV="REFRESH" CONTENT="5; URL=hellotest.asp"&gt; </code></pre>
<p>
Once the page has finished loading, the browser waits five seconds and then loads the page <b><code>hellotest.asp</code></b>—which contains this code, placed before the <b><code>&lt;HEAD&gt;</code></b> section:</p>
<pre><code>&lt;% On Error Resume Next
   If IsEmpty(Session("TestBrowser")) Then
     Response.Redirect "NoCookie.asp"
   Else
     Response.Redirect "AllowCookie.asp"
   End If %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
  ...</code></pre>
<p>
All it does is check the value of the <b><code>TestBrowser</code></b> variable. If it's <b><code>Empty</code></b> we know that the browser, for one reason or another, doesn't have the ability to use a <b><code>Session</code></b>—which is likely to be because it can't (or won't) support our session ID cookies. If this is the case we just redirect the visitor to a page that is intended for non-session ASP users. Otherwise its business as usual, and we redirect them to the main menu of our application. Notice that it's necessary to wrap the <b><code>If</code></b> statement in another <b><code>On</code></b> <b><code>Error</code></b> <b><code>Resume</code></b> <b><code>Next</code></b>, in case the <b><code>IsEmpty</code></b> test fails. If it does, the next statement to be executed still sends them to the non-session area of the site.</p>
<h2>Using Document Redirection</h2>
<p>
The code we've seen in the previous section is an excellent example of the way that we can redirect users to a different page at will. We can often take advantage of this method to route users through an application, depending on the current state for that user, or the application as a whole. </p>
<p>
For example, we might allow them to chose goods they want to purchase, in a kind of virtual shopping trolley. Each time they click the Yes, I Want One button, we add the details to our <b><code>Session</code></b> object, using an array like we saw earlier:</p>
<pre><code>Sub cmdYesIWantOne_onClick
<b>  'Retrieve the array and current item count from the Session object ...</b>
  LocalArray = Session("BoughtItems")
  intNumberOfItems = CInt(Session("ItemCount")) + 1
  LocalArray(intNumberOfItems) = strItemCodeNumber
<b>  'then store the updated values back again.</b>
  Session("BoughtItems") = LocalArray
  Session("ItemCount") = CStr(intNumberOfItems)
End Sub</code></pre>
<p>
When they've finished shopping, and click the All Done Now button, we only need to route them to the virtual checkout if they have actually bought anything. It's easy using document redirection:</p>
<pre><code>If CInt(Session("ItemCount")) &gt; 0 Then
  Response.Redirect "cashdesk.asp" 
Else
  Response.Redirect "thankyou.asp" 
End If</code></pre>
<h3>Redirecting From Within a Page</h3>
<p>
Doing a redirection like the last example is only possible from the header of a document, before any content has been sent to the browser. If we attempt it after that, we get a Buffer not empty error. Remember from Chapter 2 that if we want to provide an opportunity for redirection to occur part way through a page, we need to turn on <b>buffering</b>, and clear the buffer, first:</p>
<pre><code>&lt;%@ LANGUAGE="VBSCRIPT" %&gt;
&lt;% Response.Buffer = True %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt; Document Title &lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Welcome to our site&lt;/H1&gt;&lt;P&gt;
&lt;% If Session("TestCondition") = True Then
     Response.Clear
     Response.Redirect "anotherpage.asp"
   End If %&gt;
   ...
   rest of page
   ...
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with the CacheSize Property</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="workingwithcachesizeproperty"></a>Working with the CacheSize Property</h1>
<p>
When dealing with <b><code>Cursors</code></b>, especially those created by ODBC, it is important to control how much data is cached by ODBC in client memory. ASP assists in this area considerably, as the actual ADO processes are executed on the Web server. As such, cached data is stored in the server's memory, as opposed to the actual end-user or client machine. However, this can also have a downside as we scale up our server. If our default <b><code>Recordset</code></b> cache is large, and our server incurs a large volume of traffic, we can fast run into resource issues.</p>
<p>
The <b><code>CacheSize</code></b> property is used to control how many records our underlying ODBC driver keeps in its memory buffer, and how many to retrieve at one time into local memory. For example if the <b><code>CacheSize</code></b> is set to <b><code>10</code></b>, the ODBC driver retrieves the first ten records into a local cache as soon as a <b><code>Recordset</code></b> object is opened. As we navigate through the <b><code>Recordset</code></b> object, the ODBC driver then retrieves data from the data source and puts it into the cache as required, for example as soon as we move past the last record in the cache, it retrieves the next ten records from the data source. </p>
<p>
Typically, for a read-only forward-scrolling <b><code>Recordset</code></b>, we only want to cache one record at a time, and <b><code>CacheSize</code></b> is set to <b><code>1</code></b>. Because we don't need to move backward, and we're not changing the data, caching records on the client isn't efficient. Bringing them into memory as they are read is all that is needed.</p>
<p>
However, when data is being updated, or we create a <b><code>Recordset</code></b> that supports forward and backward navigation, a larger <b><code>CacheSize</code></b> may be appropriate. In the case of updates, when the cache size is <b><code>1</code></b>, the recordset will need to go back to the server for each changed record. With a recordset that allows backward as well as forward navigation, it has to go back to the server to retrieve the same data many times, especially as we move upwards (<b><code>MovePrevious</code></b>) in the recordset. </p>
<p>
The value of the <b><code>CacheSize</code></b> property can be adjusted during the life of the <b><code>Recordset</code></b> object, but changing this value only affects the number of records in the cache after subsequent retrievals from the data source. To force the cache size to be adjusted immediately, we can <b><code>Resync</code></b> the <b><code>Recordset</code></b>. However, we cannot set the cache size to <b><code>0</code></b>—if we do an error will result.</p>
</BODY>
</HTML>

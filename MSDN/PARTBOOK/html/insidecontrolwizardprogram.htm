<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Inside a ControlWizard Program</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana, arial, helvetica" size="2"><h1><a name="insidecontrolwizardprogram"></a>Inside a ControlWizard Program</h1>
<p>
The file LISTER.CPP serves to initialize the program and connect it to Windows. In our case, the function InitInstance() in LISTER.CPP (as written by ControlWizard) simply passes control back to the base class&#39;s InitInstance() function (do not add this code):</p>
<pre><code>BOOL CListerApp::InitInstance()
{
    BOOL bInit = COleControlModule::InitInstance();
    if (bInit)
    {
        // TODO: Add your own module initialization code here.
    }
    return bInit;
}</code></pre>
<p>
It is also important to register the new control with Windows, and the program as it stands now does that in LISTER.CPP&#39;s DllRegisterServer() function:</p>
<pre><code>STDAPI DllRegisterServer(void)
{
    AFX_MANAGE_STATE(_afxModuleAddrThis);
    if (!AfxOleRegisterTypeLib(AfxGetInstanceHandle(), _tlid))
        return ResultFromScode(SELFREG_E_TYPELIB);
    if (!COleObjectFactoryEx::UpdateRegistryAll(TRUE))
        return ResultFromScode(SELFREG_E_CLASS);
    return NOERROR;
}</code></pre>
<p>
That&#39;s about all that happens in LISTER.CPP; not much is going on in the initialization section of our program.</p>
<p>
The next file worth mentioning is LISTER.ODL, which describes our control to Windows. The line that gives an English name to our control looks like this:</p>
<pre><code>//  Class information for CListerCtrl
[ uuid(14CF3A60-092A-101C-BAC7-040224009C02),
  helpstring(&#34;Lister Control&#34;), control ] coclass Lister
{
    [default] dispinterface _DLister;
    [default, source] dispinterface _DListerEvents;
};</code></pre>
<p>
This is the uuid code that we will need to insert objects of the Lister type in our VBScript pages. (What VBScript refers to as a clsid.) In addition, this is the string, &#34;Lister Control,&#34; that we&#39;ll see when we install LISTER.OCX in Visual C++&#39;s test container. When the program is built, the source code in LISTER.ODL is compiled into a type library file, LISTER.TLB, which holds information that Windows can read directly. (TLB stands for type library.)</p>
<p>
We will work mostly with the custom control&#39;s code file, which is LISTERCTL.CPP. The real action in our program takes place there. Open that file and take a look at the OnDraw() function (add no code to OnDraw()):</p>
<pre><code>void CListerCtrl::OnDraw(CDC* pdc, 
        const CRect&amp; rcBounds, const CRect&amp; rcInvalid)
{
    DoSuperclassPaint(pdc, rcBounds);
}</code></pre>
<p>
This function works in much the same way that OnDraw() usually does in Visual C++; here we simply draw the control. Note that we are passed a pointer to a device context (pdc) in which to draw. We also receive the bounding rectangle of the control we are supposed to draw (rcBounds) and the rectangle in our control that&#39;s been marked as invalid (rcInvalid)&mdash;that is, the part of the control that we are supposed to redraw.</p>
<p>
If we wanted to draw our own control, we would do it here. For example, if we wanted to create a control that draws a picture of fish in an aquarium, we could draw that at this point. We can customize our control&#39;s appearance as we wish, even making it appear three-dimensional if we use the shading techniques used in Windows buttons. Because we are basing our control on listboxes, however, the program will take care of drawing it, using a call to the function DoSuperclassPaint(). We need not worry about drawing LISTER at all&mdash;the program takes care of that for us, giving it the appearance of a normal listbox.</p>
<p>
Our goal is to display the words &#34;Hello, world.&#34; when the user clicks the LISTER control. We do that simply by connecting a function to WM_LBUTTONDOWN as we have in other programs. As with other Visual C++ programs, we use ClassWizard to connect messages such as WM_LBUTTONDOWN to functions in LISTERCTL.CPP. Let&#39;s see how that works.</p>
<h1></h1>
</font></BODY>
</HTML>

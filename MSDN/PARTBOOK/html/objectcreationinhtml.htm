<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object Creation in HTML</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="objectcreationinhtml"></a>Object Creation in HTML</h1>
<p>
Client-side objects, like those we discussed briefly in Chapter 6, are created with a variety of HTML tags. The two most common are the <b><code>&lt;OBJECT&gt;</code></b> tag and the <b><code>&lt;APPLET&gt;</code></b> tag. <b><code>APPLET</code></b> is generally only used to specify Java applets, while <b><code>OBJECT</code></b> can be used, depending on the browser, to specify any arbitrary object of any type.</p>
<h2>Using Java Applets</h2>
<p>
The use of the <b><code>&lt;APPLET&gt;</code></b> tag is relatively simple. Here's a sample example:</p>
<pre><code>&lt;APPLET CODE="MyClass.class" WIDTH=10 HEIGHT=10&gt;
&lt;/APPLET&gt;</code></pre>
<p>
The <b><code>CODE</code></b> attribute's value is the name of the Java <b><code>.class</code></b> file that implements the applet. With this name, the browser can request that the server send the <b><code>.class</code></b> file. When it arrives, it can interpret it and display the results within the browser, or in a separate window if the applet has been so designed. <b><code>APPLET</code></b> also supports the <b><code>WIDTH</code></b> and <b><code>HEIGHT</code></b> attributes that tell the browser how wide and how tall the space it devotes to the applet should be.</p>
<p>
However, hooking up script code to a Java applet isn't as straightforward. How we do it depends on whether we're using Internet Explorer or Navigator, and sometimes (as with Navigator) can even require a complete recompile of our Java applet. We're used to using Active Scripting languages with ASP, and Navigator and Internet Explorer enable script code to be connected to Java applets in very different ways. Since we're not going to be covering these dissimilar methods, we won't spend too much time talking about them here. These browsers don't ship with any Java applets we can use for a demonstration anyway. If you do have the <b><code>.class</code></b> file for a Java applet on your machine (perhaps from experimentation with Java development) feel free to load up a page and compare the HTML with that used for ActiveX controls—which we'll look at next. </p>
<h2>Using ActiveX Controls</h2>
<p>
Their programming model is simple, and will be very familiar to someone with ASP experience. ActiveX Controls are created in HTML with the <b><code>&lt;OBJECT&gt;</code></b> tag. This tag, developed and endorsed by the World Wide Web Consortium (W3C), is extendable and can be used to insert any arbitrary object (including Java applets). Currently, its most common use is with ActiveX controls.</p>
</BODY>
</HTML>

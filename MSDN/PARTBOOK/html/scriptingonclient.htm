<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scripting on the Client</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="scriptingonclient"></a>Scripting on the Client</h1>
<p>
So how exactly do we write code that runs on the client and uses objects? We’ll start by looking at the HTML page itself and we'll examine where the code goes and how it’s connected to objects (both to respond to events and to manipulate the objects themselves). After this we’ll cover the details of the browser including the sorts of objects that are available for use in our scripts.Later we’ll talk briefly about the capabilities of the two browsers we're most likely be targeting while writing client-side code: Netscape Navigator and Internet Explorer. </p>
<p>
While we’ll show you some examples in JavaScript, we’ll tend to stick to VBScript as our primary scripting language, as it is our first choice language in the rest of the book. However nearly everything should remain applicable to both languages—it’s just a matter of making the translation between one syntax and the other. Netscape Navigator supports the same scripting object model that is used by Internet Explorer. In fact, Netscape invented this object model with Navigator 2.0—the first browser to support client-side scripting.</p>
</BODY>
</HTML>

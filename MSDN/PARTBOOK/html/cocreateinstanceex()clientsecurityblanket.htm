<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoCreateInstanceEx() and Client Security Blanket</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="cocreateinstanceex()clientsecurityblanket"></a>CoCreateInstanceEx() and Client Security Blanket</h1>
<p>
If we take a look at the <b><code>COSERVERINFO</code></b> structure again, there's a member of the structure that we didn't cover at any length. It was the <b><code>COAUTHINFO</code></b> structure which is the actual client security blanket.</p>
<pre><code>typedef struct _COSERVERINFO
{
   DWORD   dwReserverd1;
   LPWSTR   pwszName;
   COAUTHINFO*   pAuthInfo;
   DWORD   dwReserved2;
} COSERVERINFO;
</code></pre>
<p>
<b><code>pAuthInfo</code></b> is the security blanket which gets passed through the COM runtime to the server for negotiation. It's instructive to look at the details of the structure since some fields will be identical to the one for the <b><code>CoInitializeSecurity()</code></b> call that we'll be covering later. You can find this definition in <b><code>Wtypes.h</code></b>:</p>
<pre><code>typedef struct  _COAUTHINFO
{
   DWORD       dwAuthnSvc;
   DWORD       dwAuthzSvc;
   LPWSTR       pwszServerPrincName;
   DWORD       dwAuthnLevel;
   DWORD       dwImpersonationLevel;
   COAUTHIDENTITY *   pAuthIdentityData;
   DWORD       dwCapabilities;
} COAUTHINFO;</code></pre>
<p>
<b><code>dwAuthnSvc</code></b> signifies the authentication service. It's a value from the enumeration <b><code>RPC_C_AUTHN_</code></b>xxx:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=182><b><code>dwAuthnSvc</code> Value</b></td>
<td class=blue width=339><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=182><b><code>RPC_C_AUTHN_DCE_PRIVATE</code></b></td>
<td width=339>DCE private key authentication.</td>
</tr>
<tr valign=top>
<td width=182><b><code>RPC_C_AUTHN_DCE_PUBLIC</code></b></td>
<td width=339>DCE public key authentication.</td>
</tr>
<tr valign=top>
<td width=182><b><code>RPC_C_AUTHN_DEC_PUBLIC</code></b></td>
<td width=339>DEC public key authentication.</td>
</tr>
<tr valign=top>
<td width=182><b><code>RPC_C_AUTHN_DEFAULT</code></b></td>
<td width=339>The system default authentication service. NT 4.0 defaults to DCE private key authentication.</td>
</tr>
<tr valign=top>
<td width=182><b><code>RPC_C_AUTHN_WINNT</code></b></td>
<td width=339>The NTLM Security Support Provider. Except for the default and this one, these services do not currently have native NT 4.0 support. </td>
</tr>
<tr valign=top>
<td width=182><b><code>RPC_C_AUTHN_NONE</code></b></td>
<td width=339>No authentication.</td>
</tr>
</table><br>
<p>
<b><code>dwAuthzSvc</code></b> signifies the authorization service. In other words, what should the server use in order to check the access rights it should have on behalf of the client. The values are from the <b><code>RPC_C_AUTHZ_</code></b>xxx enumeration:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=134><b><code>dwAuthzSvr</code> Value</b></td>
<td class=blue width=363><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=134><b><code>RPC_C_AUTHZ_NONE</code></b></td>
<td width=363>Server performs no authorization.</td>
</tr>
<tr valign=top>
<td width=134><b><code>RPC_C_AUTHZ_NAME</code></b></td>
<td width=363>Server performs authorization using the client’s name.</td>
</tr>
<tr valign=top>
<td width=134><b><code>RPC_C_AUTHZ_DCE</code></b></td>
<td width=363>Server performs authorization using the client’s DCE privileges.</td>
</tr>
</table><br>
<p>
<b><code>pwszServerPrincName</code></b> points to a wide character string indicating the principal name to use on the server with the authentication name. If the service chosen is <b><code>RPC_C_AUTHN_WINNT</code></b>, the value should be <b><code>NULL</code></b>.</p>
<p>
<b><code>dwAuthnLevel </code></b>specifies the level of authentication required ranging from once when connecting, to packet-level authentication and encryption.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=223><b><code>DwAuthnLevel</code> Value</b></td>
<td class=blue width=299><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=223><b><code>RPC_C_AUTHN_LEVEL_NONE</code></b></td>
<td width=299>No authentication.</td>
</tr>
<tr valign=top>
<td width=223><b><code>RPC_C_AUTHN_LEVEL_CONNECT</code></b></td>
<td width=299>Authenticates only when client establishes a connection.</td>
</tr>
<tr valign=top>
<td width=223><b><code>RPC_C_AUTHN_LEVEL_CALL</code></b></td>
<td width=299>Authenticates at the beginning of each remote procedure call.</td>
</tr>
<tr valign=top>
<td width=223><b><code>RPC_C_AUTHN_LEVEL_PKT</code></b></td>
<td width=299>Authenticates origin of all data. Used by datagram transports.</td>
</tr>
<tr valign=top>
<td width=223><b><code>RPC_C_AUTHN_LEVEL_PKT_INTEGRITY</code></b></td>
<td width=299>Authenticates origin and integrity of data.</td>
</tr>
<tr valign=top>
<td width=223><b><code>RPC_C_AUTHN_LEVEL_PKT_PRIVACY</code></b></td>
<td width=299>Authenticates origin and integrity of data and encrypts remote procedure call arguments.</td>
</tr>
</table><br>
<p>
<b><code>dwImpersonationLevel</code></b> specifies the impersonation level. Corresponds to the levels of impersonation specified in NT 4.0</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=207><b><code>DwImpersonationLevel</code> Value</b></td>
<td class=blue width=315><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=207><b><code>RPC_C_IMP_LEVEL_ANONYMOUS</code></b></td>
<td width=315>The server doesn't get any information about the client identification and doesn't attempt to impersonate the client. </td>
</tr>
<tr valign=top>
<td width=207><b><code>RPC_C_IMP_LEVEL_IDENTIFY</code></b></td>
<td width=315>The server can get security information about the client—for example, security identifiers and privileges—but it can't impersonate the client. The significance of this is that the server can make decisions about whether the client has the right to access resources, however, it can't use system resources or access objects 'as the client'.</td>
</tr>
<tr valign=top>
<td width=207><b><code>RPC_C_IMP_LEVEL_IMPERSONATE</code></b></td>
<td width=315>The server can impersonate the client’s security context. Note that this is valid <b>only</b> on the server's local systems. It is <b>not</b> supported on remote systems. In other words, the server can't access resources over the network as if it were the client.</td>
</tr>
<tr valign=top>
<td width=207><b><code>RPC_C_IMP_LEVEL_DELEGATE</code></b></td>
<td width=315>This level allows the server to impersonate the client over a network. It isn't currently supported by the default SSPs on NT 4.0. It will, however, be supported by the Kerberos SSP which will be an integral part of the Distributed Security Services in the next major release of NT.</td>
</tr>
</table><br>
<p>
<b><code>pAuthIdentityData</code></b>: specific to the authentication service. Usually left as <b><code>NULL</code></b>.</p>
<p>
<b><code>dwCapabilities</code></b>: extra capabilities to be defined.</p>
</BODY>
</HTML>

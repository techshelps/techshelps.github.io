<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Non-Object Document Properties</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="nonobjectdocumentproperties"></a>Non-Object Document Properties</h1>
<p>
Besides the object-based properties, i.e. the <b><code>Location</code></b> object and the <b><code>Anchor</code></b>, <b><code>Link</code></b>, and <b><code>Form</code></b> collections (which will be covered in a moment), the <b><code>Document</code></b> object has a number of other properties that we might find useful in our client-side programming. We’ll briefly outline these properties next.</p>
<h2>The Color Properties</h2>
<p>
As is fitting for an object that represents the current HTML page, there are a number of <b><code>Document</code></b> object properties that represent the color scheme of the current page. All of these properties return a seven character string when queried, in this form: <b><code>#RRGGBB</code></b>, where the <b><code>R</code></b>, <b><code>G</code></b>, and <b><code>B</code></b> values represent the current color setting for red, green, and blue, in hexadecimal.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=122><b>Property</b></td>
<td class=blue width=419><b>Description</b></td>
</tr>
<tr valign=top>
<td width=122>linkColor</td>
<td width=419>Color of non-visited links in the current document</td>
</tr>
<tr valign=top>
<td width=122>vLinkColor</td>
<td width=419>Color of visited links in the current document</td>
</tr>
<tr valign=top>
<td width=122>aLinkColor</td>
<td width=419>Color of active (clicked on but not visited) links.</td>
</tr>
<tr valign=top>
<td width=122>fgColor</td>
<td width=419>The current foreground color </td>
</tr>
<tr valign=top>
<td width=122>bgColor</td>
<td width=419>The current background color</td>
</tr>
</table><br>
<p>
These properties are set to read-only after the page has been parsed and displayed, so they can’t be changed in response to button clicks or other external input. They can, however, be set in script blocks – just make sure the code is parsed when the page is loaded, like it is with <b><code>Write</code></b> and <b><code>WriteLn</code></b>.</p>
<h2>The Title Property</h2>
<p>
The <b><code>Title</code></b> property simply returns the current title of the document. The value of this property is whatever the HTML author placed between the <b><code>&lt;TITLE&gt;</code></b> and <b><code>&lt;/TITLE&gt;</code></b> tags. This property is set to read-only after the page has loaded.</p>
<h2>The Cookie Property</h2>
<p>
<b><code>Cookie</code></b> is a very useful read and write property, and can be used in conjunction with ASP’s <b><code>Response.Cookies</code></b> collection. This property returns or sets the cookie associated with the current page. Reading the <b><code>Document.Cookie</code></b> property returns the keys and values of the current page’s cookie, but doesn’t give other information. While this information isn’t returned when querying the property, we can set such things as expiration date and path when setting a cookie using client-side code. </p>
<p>
To read the cookie into a variable named <b><code>MyVar</code></b>, we use the following code:</p>
<pre><code>MyVar = Document.Cookie</code></pre>
<p>
After reading the value we can use the string-manipulation capabilities of our scripting language to find the part of the cookie we’re interested in.</p>
<p>
To set the value of a key named <b><code>MyKey</code></b> to <b><code>MyValue</code></b>, we use this code. If <b><code>MyKey</code></b> already exists, its value will be replaced with the contents of <b><code>MyValue</code></b>:</p>
<pre><code>Document.Cookie = "MyKey=MyValue"</code></pre>
<p>
Finally, if we’d like to set the path or other properties, like the expiration date, we just append them to the end of the key/value string, like this:</p>
<pre><code>Document.Cookie = "MyKey=MyValue;expires=Monday, 01-Jan-98 12:00:00 GMT"</code></pre>
<p>
Cookies can also be used solely on the client-side to exchange information between pages. On the server we’re used to using the <b><code>Session</code></b> object to remember information from page to page, and script to script. There isn’t a handy object like this on the client, but simply by setting the cookie property of the document with a key/value pair that holds our variable name and its value, we can remember the contents of variables across pages. This method doesn’t work with object references, only with text and numerical values, but it can still be very useful. Microsoft’s VBScript site has a sample that shows the code needed to add this functionality to our pages.</p>
<h2>The LastModified Property</h2>
<p>
This read-only property returns the date that the current document was last modified. Note that this property is only up to date as far as the most recently retrieved copy of the document—which may be older than the last modified version if our browser caches any pages (as most do).</p>
<h2>The Referrer Property</h2>
<p>
On paper, the <b><code>Referrer</code></b> property returns the URL of the document that contained the link to the current page. In the real world, this is less than true. Internet Explorer 3.0’s <b><code>Referrer</code></b> property always returns the URL of the current page.</p>
</BODY>
</HTML>

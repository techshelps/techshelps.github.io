<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Making Use of the Logon Information</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="makinguseoflogoninformation"></a>Making Use of the Logon Information</h1>
<p>
Having identified our users as they log on, what are we actually going to do with the information? This is open to the design of your applications, and it's not possible to lay down criteria, methods, or examples that are going to be specific to any individual's needs. However, there are a few obvious details that we should consider.</p>
<h2>Setting User Preferences</h2>
<p>
Recall that when we logged an existing user into our application, we extracted the single record from the <b><code>UserDetail</code></b> table in our database that contained their user name and password. This record could just as easily contain a great deal more about the user, such as their department, workgroup, page color preferences, or even the name of their dog. All we need to do is change the SQL query to include all the fields in the recordset, and then capture the other details in <b><code>Session</code></b> level variables ready for use while the user is touring our site:</p>
<pre><code>strSQL = "SELECT * FROM UserDetails WHERE UserName = '" _
       &amp; Request.Form("txtUserName") &amp; "')"
...
...
Session("BackColor") = oUserRs.Fields("BackColor")
Session("FontColor") = oUserRs.Fields("FontColor")
Session("DogsName") = oUserRs.Fields("DogsName")
...</code></pre>
<p>
Now, we can really make them feel at home:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt; Welcome to the Wrox Pets Supermarket &lt;/TITLE&gt;
&lt;/HEAD&gt; 
&lt;BODY BGCOLOR=&lt;% = Session("BackColor") %&gt;&gt;
  &lt;FONT FACE=Arial COLOR=&lt;% = Session("FontColor") %&gt;&gt;
  &lt;CENTER&gt;&lt;IMG SRC="welcome.gif"&gt;&lt;CENTER&gt;&lt;P&gt;
  &lt;H3&gt; Great News... &lt;/H3&gt; We now have a new variety of Scrummy&lt;BR&gt;
  &lt;I&gt;&lt;B&gt;the dog food for champions&lt;/B&gt;&lt;/I&gt;&lt;BR&gt;
  available from the new products page.&lt;P&gt;
  Why not take some home for&lt;B&gt; &lt;% = Session("DogsName")%&gt; &lt;/B&gt;- we 
  &lt;I&gt;guarantee&lt;/I&gt; it will be a hit!
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>
<img src="wroxpets.gif" border=0></p>
<h2>Checking the Success of Object Creation</h2>
<p>
One thing we regularly do in the <b><code>Application_onStart</code></b> and <b><code>Session_onStart</code></b> events is create instances of objects that we need to use throughout the application. In our logon example, we are also creating objects to check the user's identity—database connections and recordsets. If any of these processes fail, the state of our application is invalid. In this case, with the login page for example, we must be sure to set the 'logged on' status to <b><code>False</code></b>. </p>
<p>
The easiest way is to examine the object variable that is now supposed to be referencing the object instance. We can use either <b><code>IsEmpty()</code></b> or <b><code>IsObject()</code></b> for this, or compare it the standard value <b><code>Nothing</code></b>. It depends on whether we are referring to the object itself or a variable that holds a reference to it. In both cases, for it to work, we have turn off error checking with an <b><code>On</code></b> <b><code>Error</code></b> <b><code>Resume</code></b> <b><code>Next</code></b> statement first:</p>
<pre><code>On Error Resume Next
Set oConn = Server.CreateObject("ADODB.Connection")
If IsObject(oConn) Then
  '... success, OK to continue 
Else
  '... error, could not create object
End If
On Error Resume Next
Set Session("MyConnection") = Server.CreateObject("ADODB.Connection")
<b>'now check if it failed</b>
If Session("MyConnection") Is Nothing Then 
<b>  </b>'... got an error
<b>'or use this method</b>
If IsEmpty(Session("MyConnection")) Then 
  '... got an error</code></pre>
</BODY>
</HTML>

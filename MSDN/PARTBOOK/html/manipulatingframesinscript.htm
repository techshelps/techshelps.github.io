<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Manipulating Frames in Script</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="manipulatingframesinscript"></a>Manipulating Frames in Script</h1>
<p>
The <b><code>Frames</code></b> object is a collection of all of the frame windows in the current frameset. Each frame is a <b><code>Window</code></b> object in itself, and has its own <b><code>Document</code></b> object to represent the HTML in the frame. This really isn’t as confusing as it might sound—it mimics the organization of frames without an object model. The top-level frame subdivides the browser window and loads separate HTML pages for each frame. </p>
<p>
It can be confusing to use this property though. By default the <b><code>Window</code></b> and <b><code>Document</code></b> object that a script refers to are the <b><code>Window</code></b> and <b><code>Document</code></b> objects of the current frame. This means that, if we execute a script in the left-hand frame of a two-frame window, the <b><code>Document</code></b>, <b><code>Window</code></b>, and <b><code>Frames</code></b> objects the script uses will be those of the left-hand frame. Since the left-hand frame has no sub-frames, examining the <b><code>Count</code></b> property of the <b><code>Frames</code></b> collection will return <b><code>0</code></b>.</p>
<p>
However, if we use the <b><code>Top</code></b> (or, in this case, <b><code>Parent</code></b>) property of the left-hand frame’s <b><code>Window</code></b> object, we can gain access to the top-level frameset that loaded both the frames. Examining the <b><code>Count</code></b> property of this <b><code>Frames</code></b> collection will show the expected value of <b><code>2</code></b>, because this top-level page has loaded two frames.</p>
<p>
We’re giving this brief coverage here because it’s both a simple and complex topic. In the sense that the <b><code>Frames</code></b> collection has only one property, <b><code>Count</code></b>, and that it just provides access to other objects that we’ve covered before, like <b><code>Window</code></b> and <b><code>Document</code></b>, it is a simple object. However, the relationships between the different frames in a frameset can be complex, and to best understand how it works, we should really see some code. A more in-depth example of using frames with the object model is part of the next chapter.</p>
</BODY>
</HTML>

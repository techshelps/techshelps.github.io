<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>New CoRegisterPSClsid() API</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="newcoregisterpsclsid()api"></a>New CoRegisterPSClsid() API </h1>
<p>
This API function is used to temporarily register the CLSID of a proxy/stub class server associated with a specified interface. The normal behavior for COM is to read the proxy/stub server information from the</p>
<p>
<b><code>HKEY_CLASSES_ROOT\Interface\{interface ID}</code></b> registry key. However, in certain cases, the object wishing to replace the proxy may not have write-access to the registry. This is frequently true under the Windows NT where the access security level of the running object may not be sufficient to modify the registry. <b><code>CoRegisterPSClsid()</code></b> is useful in these situations. In addition, it is an all around preferred way to specify a specific proxy/stub code for an interface without affecting the registry settings. For example, if you would like the system to use a network-optimized, custom-coded marshalling scheme rather than the system default automatic type library marshaling.</p>
<p>
The scope of the temporary assignment will last until the termination of the process or until <b><code>CoRegisterPSClsid()</code></b> is called again. If the proxy/stub objects aren't yet registered with the system, <b><code>CoRegisterClassObject()</code></b> should be called to register the CLSIDs before calling <b><code>CoRegisterPSClsid()</code></b>.</p>
<p>
The <b><code>CoRegisterPSClsid()</code></b> has the following prototype:</p>
<pre><code>WINOLEAPI CoRegisterPSClsid( REFIID riid,
                             REFCLSID rclsid ); </code></pre>
<p>
It has the following parameters:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=129><b>Parameter Name</b></td>
<td class=blue width=411><b>Description</b></td>
</tr>
<tr valign=top>
<td width=129><b><code>REFIID riid</code></b></td>
<td width=411>A pointer to the interface ID of the interface that the proxy/stub code is to be associated with.</td>
</tr>
<tr valign=top>
<td width=129><b><code>REFCLSID rclsid</code></b></td>
<td width=411>A pointer to the CLSID representing the proxy/stub code for marshaling the <b><code>riid</code></b> interface.</td>
</tr>
</table><br>
<p>
<b><code>CoRegisterPSClsid()</code></b> may return:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=115><b>Return Value</b></td>
<td class=blue width=380><b>Description</b></td>
</tr>
<tr valign=top>
<td width=115><b><code>S_OK</code></b></td>
<td width=380>Mapping of proxy/stub code to interface successful.</td>
</tr>
<tr valign=top>
<td width=115><b><code>E_INVALIDARG</code></b></td>
<td width=380>A parameter is invalid.</td>
</tr>
<tr valign=top>
<td width=115><b><code>E_OUTOFMEMORY</code></b></td>
<td width=380>The runtime ran out of memory while executing the API call.</td>
</tr>
</table><br>
<p>
This concludes our coverage of new interfaces and APIs associated with DCOM. None of these new features are required for COM objects to participate in a distributed environment. But DCOM-aware objects that make use of these features can gain better control over the way DCOM performs remote instantiation, client and server security checking, as well as marshaling.</p>
</BODY>
</HTML>

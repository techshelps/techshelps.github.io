<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connection Tips</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="connectiontips"></a>Connection Tips</h1>
<p>
When defining connections, here are a few simple guidelines that are useful to follow:</p>
<ul type=disc>
<li>
Generally you will want to use a connection <i>variable</i> instead of a connection <i>string</i> as the <b><code>ActiveConnection</code></b> for commands. By using a connection variable, you're calling an existing connection. If you use a string, as we saw above, you are creating a new connection.<br><br></li>
<li>
Make sure you explicitly close a connection when it's no longer needed. Although a connection is closed when it goes out of scope, it's better to make sure it is closed when you think it is. You can proactively call <b><code>Close</code></b> and set the variable to <b><code>Nothing</code></b> when you know that you will no longer need a connection. This frees up resources before it actually goes out of scope.</li>
</ul>
<p>
When working with a SQL Server data source, consider these points:</p>
<ul type=disc>
<li>
With forward-scrolling, read-only cursors (also known as <b>firehose</b> cursors) against SQL Server, you will not be able to start a new transaction on that connection. This is because the connection is dealing with the cursor and needs to complete what it's doing (i.e. get to the end of the cursor and close it) before continuing.<br><br></li>
<li>
In addition, it is a good idea to separate your forward-scrolling cursor code from your command execution code. You could get into a situation where the same SQL pages are used concurrently, for example a query such as <b><code>SELECT</code></b> <b><code>*</code></b> <b><code>FROM</code></b> <b><code>TableX</code></b> and an update to <b><code>TableX</code></b>. Without setting the <b><code>CommandTimeout</code></b> property, your could hang your system due to locking contention.</li>
</ul>
</BODY>
</HTML>

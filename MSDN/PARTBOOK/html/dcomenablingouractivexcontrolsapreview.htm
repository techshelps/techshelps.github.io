<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DCOM Enabling Our ActiveX Controls: A Preview</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="dcomenablingouractivexcontrolsapreview"></a>DCOM Enabling Our ActiveX Controls: A Preview</h1>
<p>
Before digging into the more technical aspects of DCOM, we'll now get our hands wet with a quick demonstration. We'll reserve a more complex scenario involving three machines for the last section of the chapter. Since our ActiveX control and the back-end objects are already communicating across processes (the Calendar control running inside the Visual Basic or Test Container process and the Finder object running inside <b><code>Atlfinder.exe</code></b>), it should be an easy matter to make them run across machine boundaries over the network. In fact, it's quite simple, with the help of DCOM.</p>
<p>
First, we'll need machines connected over a TCP/IP network with DCOM enabled. The previous section has described how DCOM for Windows 95 may be obtained, as well as the installation procedure. In our example, we'll be using DCOM for Windows 95. This choice is made since Windows 95 machines are easier to locate in most cases than Windows NT based machines. However, all of what we cover should be equally applicable to Windows NT 4.0 systems as well.</p>
</BODY>
</HTML>

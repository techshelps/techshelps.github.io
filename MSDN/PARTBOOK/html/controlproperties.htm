<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Control Properties</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana, arial, helvetica" size="2"><h1><a name="controlproperties"></a>Control Properties</h1>
<p>
Adding properties to control.ocx is easy with Visual C++&#39;s ClassWizard. Let&#39;s add a property named Counter, which is like a data member of a C++ object. Counter simply holds a short value that we can initialize to zero and that we can increment as we like (we will count the number of times the button is clicked).</p>
<p>
To add Counter to our custom control, open ClassWizard and select the OLE Automation tab. Make sure that the control&#39;s class, CControlCtrl, is selected in the Class Name box, as shown in Figure 9.8, and click Add Property, opening the Add Property box.</p>
<p>
<img src="fig09-08.gif" border=0></p>
<p>
<b>Figure 9.8&nbsp; Using ClassWizard, we add a property to CONTROL.</b></p>
<p>
Type the name of the new property, Counter, in the External Name box of the Add Property box, and select short in the Type box, making Counter a short value. Finally, click OK to create the new property. When controls of type CONTROL are inserted in our Web pages, we can reach this new property, Counter, easily, as we&#39;ll see in a minute.</p>
<p>
Inside the CONTROL project, the new property will be stored in the short variable m_counter (declared by ClassWizard in CONTROLCTL.H). If you want to set the initial value of m_counter to something other than 0, you would look for this line in CONTROLCTL.CPP (do not add this code):</p>
<pre><code>/////////////////////////////////////////////////////////////////////////////
// CControlCtrl::DoPropExchange - Persistence support
void CControlCtrl::DoPropExchange(CPropExchange* pPX)
{
    ExchangeVersion(pPX, MAKELONG(_wVerMinor, _wVerMajor));
    COleControl::DoPropExchange(pPX);
--&gt; PX_Short(pPX, _T(&#34;Counter&#34;), m_counter, 0);
    // TODO: Call PX_ functions for each persistent custom property.
}</code></pre>
<p>
Here, the program sets up the Counter property; the PX_Short() function is used to initialize short properties. The arguments the program passes to PX_Short() are as follows: pPX is a pointer to the program&#39;s internal CPropertyExchange object (maintained by our program automatically), followed by the name of the property (Counter), followed by the name of the internal variable that holds the property&#39;s value (m_counter), and its initial value, here set to 0. That&#39;s exactly how a counter should start, at 0. We&#39;ll leave this line unchanged.</p>
<p>
In addition to the new internal variable m_counter, ClassWizard has written a new function, OnCounterChanged() (from CONTROLCTL.CPP):</p>
<pre><code>void CControlCtrl::OnCounterChanged() 
{
    // TODO: Add notification handler code
    SetModifiedFlag();
}</code></pre>
<p>
The program calls this handy function when the Counter property is changed. For example, if changing this property is supposed to change other properties as well, we can make those changes in this function. Say that a control displays text and that the control&#39;s Text property (assuming the control has such a property) was changed. In this case, the program would call OnTextChanged(), allowing the control to update its display.</p>
<p>
To test the new Counter property, create control.ocx using Build control.ocx in the Visual C++ Project menu. Open the control test container using the OLE Control Test Container item in the Tools menu. Insert a new control of type COUNTER in the test container and select Properties in the test container&#39;s View menu, opening the Properties box, as shown in Figure 9.9.</p>
<p>
<img src="fig09-09.gif" border=0></p>
<p>
<b>Figure 9.9 &nbsp;Setting our OCX control&#39;s Counter property.</b></p>
<p>
Select Counter in the drop-down listbox labeled Property; the Counter property is set to 0, as shown in Figure 9.9. Using the Counter property in a Web page is easy, too. If the new control is given the ID Ctrl1, for example, we can reach the Counter property by referring to it as Ctrl1.Counter:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Control Page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY LANGUAGE = VBScript ONLOAD = &#34;Page_Initialize&#34;&gt;
&lt;CENTER&gt;
&lt;H1&gt;Control Page&lt;/H1&gt;
&lt;/CENTER&gt;
&lt;!- control.ocx&gt;
&lt;CENTER&gt;
&lt;OBJECT CLASSID=&#34;clsid:D96FBCC1-090A-101C-BAC7-040224009C02&#34; HEIGHT=80 
        WIDTH=100 ID=Ctrl1&gt;&lt;/OBJECT&gt;
&lt;INPUT TYPE = TEXT NAME = Textbox SIZE=20&gt;
&lt;/CENTER&gt;
&lt;SCRIPT LANGUAGE = VBScript&gt;
        Sub Page_Initialize
  --&gt;           Ctrl1.Counter = 5
        End Sub
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p>
That&#39;s all there is to it. We can also increment the Counter property each time the user clicks the control. Return to Visual C++ and use ClassWizard to add a WM_LBUTTONDOWN message handler to the CControlCtrl class. Open that function (from CONTROLCTL.CPP):</p>
<pre><code>void CControlCtrl::OnLButtonDown(UINT nFlags, CPoint point) 
{
    // TODO: Add your message handler code here and/or call default
    COleControl::OnLButtonDown(nFlags, point);
}</code></pre>
<p>
This function is called when the user clicks our custom button, and we can increment the Counter property each time by incrementing the internal variable m_counter:</p>
<pre><code>void CControlCtrl::OnLButtonDown(UINT nFlags, CPoint point) 
{
    // TODO: Add your message handler code here and/or call default
    COleControl::OnLButtonDown(nFlags, point);
--&gt; m_counter++;
}</code></pre>
<p>
And that&#39;s all there is to it. As shown in Figure 9.10, we&#39;ve incremented Counter to a value of 5.</p>
<p>
<img src="fig09-10.gif" border=0></p>
<p>
<b>Figure 9.10&nbsp; We increment the Counter property by clicking our control.</b></p>
<p>
It was easy to add properties to our control. Now let&#39;s take a look at how to add a method.</p>
<h1></h1>
</font></BODY>
</HTML>

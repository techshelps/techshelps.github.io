<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Window Object Methods</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="windowobjectmethods"></a>Window Object Methods</h1>
<p>
The last major portion of the <b><code>Window</code></b> object’s programmability is embodied in its methods. The methods allow us to tell the browser to do a certain job, or perform some task that it knows how to accomplish.</p>
<h2>The Window's Dialogs</h2>
<p>
The <b><code>Window</code></b> object contains three methods that display basic dialogs. We’ve already seen the <b><code>Alert</code></b> dialog in our examples. It’s about the simplest dialog we could experience—it just displays one text string and an OK button, but it’s exactly what we need in a lot of cases.</p>
<p>
The other two dialog methods are <b><code>Prompt</code></b> and <b><code>Confirm</code></b>. The <b><code>Confirm</code></b> method displays a message box with the string specified in the method call, but instead of providing an OK button, it displays both OK and Cancel buttons, allowing the user to choose to confirm or abort an action. The method returns <b><code>True</code></b> value if the user presses OK, or <b><code>False</code></b> if the user presses Cancel. </p>
<p>
<b><code>Prompt</code></b> is another way to request user input. This method displays yet another message box, with whatever string is passed as a parameter, but this time instead of OK or Cancel buttons, it displays a text box allowing the user to enter an arbitrary string. The code below uses all three of these methods, and shows the correct calling syntax for each method:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt; Window Dialogs &lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;CENTER&gt;
&lt;H1&gt; Window Dialogs &lt;/H1&gt;
&lt;INPUT TYPE="BUTTON" NAME="btnTest" VALUE="Click Me"&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub btnTest_onClick
Dim retValue
retValue = Confirm("Press OK or Cancel")
Alert "Confirm returned " &amp; retValue
retValue = Prompt("Enter a string", "Default String")
Alert "Confirm returned '" &amp; retValue &amp; "'"
End Sub    
&lt;/SCRIPT&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p>
Pressing the single button on the page brings about a series of dialog boxes, first a <b><code>Confirm</code></b> dialog, then an <b><code>Alert</code></b> displaying the results of the previous <b><code>Confirm</code></b>. After these two dialogs, a <b><code>Prompt</code></b> dialog is displayed, and another <b><code>Alert</code></b> then shows the result. The second parameter to the <b><code>Prompt</code></b> method is the default string that will be displayed in the user entry text box.</p>
<p>
<img src="confirm.gif" border=0></p>
<p>
<img src="alert1.gif" border=0></p>
<p>
<img src="prompt.gif" border=0></p>
<p>
<img src="alert2.gif" border=0></p>
<p>
If we’re using VBScript, we can get increased functionality with the <b><code>MsgBox</code></b> and <b><code>InputBox</code></b> statements and functions. Some languages, like JavaScript, don’t have built in dialog functions like VBScript does, and so these functions of the <b><code>Window</code></b> object can come in handy.</p>
<h2>The Open Method</h2>
<p>
As is fitting for the object representing the browser window itself, the <b><code>Window</code></b> object provides methods to open new browser windows, close a window, and navigate to a new location. We’ll cover the <b><code>Open</code></b> method first.</p>
<p>
<b><code>Open</code></b> is a simple method with many options that increase its complexity. In its simplest form, it just creates a new browser window, pointing to a given URL. For example, the following code creates a window named <b><code>myWindow</code></b>, which displays the Wrox Web page:</p>
<pre><code>Window.Open "http://www.wrox.com", "myWindow"</code></pre>
<p>
The complexity comes from <b><code>Open</code></b>’s optional third parameter, which we’re not using in this line of code. The extra parameter provides a fine level of control over the way the new window is displayed.</p>
<p>
The following aspects of the window can be controlled by specifying values in the third parameter of our call to the <b><code>Open</code></b> method.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=blue width=146><b>Parameter Text</b></td>
<td class=blue width=126><b>Variable Type</b></td>
<td class=blue width=432><b>Function</b></td>
</tr>
<tr valign=top>
<td width=146><b><code>toolbar</code></b></td>
<td width=126>boolean</td>
<td width=432>display a toolbar</td>
</tr>
<tr valign=top>
<td width=146><b><code>location</code></b></td>
<td width=126>boolean</td>
<td width=432>display the location text box</td>
</tr>
<tr valign=top>
<td width=146><b><code>directories</code></b></td>
<td width=126>boolean</td>
<td width=432>display the special link buttons</td>
</tr>
<tr valign=top>
<td width=146><b><code>status</code></b></td>
<td width=126>boolean</td>
<td width=432>display a status bar</td>
</tr>
<tr valign=top>
<td width=146><b><code>menubar</code></b></td>
<td width=126>boolean</td>
<td width=432>display the menus at the top of the window</td>
</tr>
<tr valign=top>
<td width=146><b><code>scrollbars</code></b></td>
<td width=126>boolean</td>
<td width=432>display scrollbars if the document is larger than the window</td>
</tr>
<tr valign=top>
<td width=146><b><code>resizeable</code></b></td>
<td width=126>boolean</td>
<td width=432>allow the window to be resized</td>
</tr>
<tr valign=top>
<td width=146><b><code>width</code></b></td>
<td width=126>integer</td>
<td width=432>the width of the window (in pixels)</td>
</tr>
<tr valign=top>
<td width=146><b><code>height</code></b></td>
<td width=126>integer</td>
<td width=432>the height of the window (in pixels)</td>
</tr>
<tr valign=top>
<td width=146><b><code>top</code></b></td>
<td width=126>integer</td>
<td width=432>the top position of the window (in pixels)</td>
</tr>
<tr valign=top>
<td width=146><b><code>left</code></b></td>
<td width=126>integer</td>
<td width=432>the left position of the window (in pixels)</td>
</tr>
</table><br>
<p>
Using this list of optional parameters, we can create a huge variety of windows with different properties. The next few lines of VBScript code create some interesting new windows. Try pasting them into a page and running them to see what you get.</p>
<pre><code>Window.Open "http://www.wrox.com/", "myWindowOne", "toolbar=no, menubar=no, location=no, directories=no"
Window.Open "http://www.wrox.com/", "myWindowTwo", "width=100, height=100, resizeable=no"
Window.Open "http://www.wrox.com/", "myWindowThree", "menubar=no, toolbar=yes, location=yes"</code></pre>
<p>
<img src="winone.gif" border=0></p>
<p>
"Browser created by Window.Open: with no toolbar, menubar, location, or directories"</p>
<p>
<img src="wintwo.gif" border=0></p>
<p>
"Browser created with Window.Open: has location and toolbar, but no menubar" </p>
<p>
The value of each parameter that we don’t define is unpredictable, so be sure to explicitly turn on or off each feature you do or don’t want to appear in your new window. </p>
<p class=indent>
In the <b><code>Window.Open</code></b> code we’re ignoring the return value of the <b><code>Open</code></b> call. This is fine if we don’t care about what happens to the window we’re creating. However, if we want to manipulate it after the <b><code>Open</code></b> call, we need to save a reference to the window. Fortunately, <b><code>Open</code></b>’s return value is just this reference. We'll show you an example of this in the next section.</p>
<h2>The Close Method</h2>
<p>
The <b><code>Close</code></b> method doesn’t have the variety that the <b><code>Open</code></b> method does, but it’s still powerful. For example it can end a user’s session, and shut down their browser! Admittedly, in most cases, this would be rather rude—but it does have its uses. In addition to closing the current browser window, it can be used to close other windows that we’ve opened with a call to the <b><code>Open</code></b> method. We just need be sure to save a reference to the windows when we open them.</p>
<p>
Enter the following code into a new file and save it: </p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt; Window Open And Close Tester &lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;CENTER&gt;
&lt;H1&gt; Window.Open And Window.Close &lt;/H1&gt;
&lt;INPUT TYPE="BUTTON" NAME="btnOne" VALUE="Open One"&gt;
&lt;INPUT TYPE="BUTTON" NAME="btnDOne" VALUE="Close One"&gt;&lt;p&gt;
&lt;INPUT TYPE="BUTTON" NAME="btnCloseMe" VALUE="Close Me"&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
Dim objNewWindow
Sub btnOne_onClick
  Set objNewWindow = Window.Open("http://www.wrox.com/", "myWindowOne", "toolbar=no, menubar=no, location=no, directories=no")
End Sub    
Sub btnDOne_onClick
  objNewWindow.Close
End Sub
Sub btnCloseMe_onClick
  Window.Close
End Sub
&lt;/SCRIPT&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p>
Next load it into your browser:</p>
<p>
<img src="openclos.gif" border=0></p>
<p>
When this page loads, we see three buttons. Try clicking the Open One button. After a moment, we see a new browser window (incidentally, without a menubar, toolbar, location text box, or extra link buttons) appear on our screen. Now press the Close One button, and our new window disappears. Don’t press the third Close Me button just yet! We don’t want to shut down this browser until we’re done experimenting with the code.</p>
<p>
The explanation for this behavior is in a few lines of code. First, we declare a variable called <b><code>objNewWindow</code></b> to store the reference to the window we’re going to create. Then our <b><code>Window.Open</code></b> method actually creates the window, returning a reference to be stored in <b><code>objNewWindow</code></b>:</p>
<pre><code>Dim ObjNewWindow
Sub btnOne_onClick
  Set objNewWindow = Window.Open("http://www.wrox.com/", "myWindowOne", "toolbar=no, menubar=no, location=no, directories=no")
End Sub    </code></pre>
<p>
After this our code to close the window is simple, we just use the <b><code>objNewWindow</code></b> variable and the <b><code>Close</code></b> method:</p>
<pre><code>Sub btnDOne_onClick
  objNewWindow.Close
End Sub</code></pre>
<p>
The code for the third button just shows how <b><code>Close</code></b> can be used with the <b><code>Window</code></b> object to terminate the current browser instance.</p>
<h2>Timers: setTimeout and clearTimeout</h2>
<p>
These methods of the <b><code>Window</code></b> object can be used to execute a function after a certain amount of time. Their use is relatively simple. <b><code>SetTimeout</code></b> takes the name of a function, and a time value in milliseconds. After the time value has passed, the function is called automatically.</p>
<p>
For example, the following code calls a routine named <b><code>TimerFunc</code></b> after <b><code>5000</code></b> milliseconds (5 seconds):</p>
<pre><code>ID = Window.setTimeout("TimerFunc",5000)</code></pre>
<p>
Once we’ve started a timer with <b><code>setTimout</code></b>, we may find that we want to cancel it so that the function specified in the <b><code>setTimeout</code></b> call isn't executed. This is where the <b><code>clearTimeout</code></b> function comes into play, assuming we’ve saved the return value of the <b><code>setTimeout</code></b> function. In the line of code above we’ve saved our return value in a variable called <b><code>ID</code></b>, and it’s this variable that we’ll use in our call to clear the timer:</p>
<pre><code>Window.clearTimeout ID</code></pre>
<p>
If we call <b><code>clearTimeout</code></b> with an <b><code>ID</code></b> value that doesn’t exist, then nothing will happen and any timers we have active will continue to work. </p>
<p class=indent>
Note that the <b><code>setTimeout</code></b> call only executes the function that it is passed once. If we want to have a routine called repeatedly, we need to reset the timer with another <b><code>setTimeout</code></b> call within the function that’s called by it.</p>
<h2>The Navigate Method</h2>
<p>
The very useful <b><code>Navigate</code></b> method brings us to the end of our <b><code>Window</code></b> object odyssey, at least where the non-object properties are concerned. <b><code>Navigate</code></b> takes a string parameter and navigates the window object it is called from, to the URL in that string. We saw <b><code>Navigate</code></b> in action way back, when we were still talking about connecting code to events. Its use is logical as the line of code below simply redirects the current browser to the URL of the Wrox Press home page:</p>
<pre><code>Window.Navigate "http://www.wrox.com/"</code></pre>
<p>
Note that we’re not limited to using <b><code>Navigate</code></b> with just the current <b><code>Window</code></b> object. We can also use it in combination with the <b><code>top</code></b>, <b><code>parent</code></b>, and <b><code>opener</code></b> properties to act on other windows or parts of the window – all <b><code>Navigate</code></b> requires is that it be called from a valid reference to a <b><code>Window</code></b> object.</p>
</BODY>
</HTML>

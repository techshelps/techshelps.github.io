<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Expanding the Connection Object</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="expandingconnectionobject"></a>Expanding the Connection Object</h1>
<p>
The <b><code>Connection</code></b> object is responsible for more than just the initialization of communication between the server and the application. It is also used to manage transactions, submit SQL statements directly to a provider, and set provider-specific attributes. </p>
<p>
Let's look at an example of using several of the advanced features of the <b><code>Connection</code></b> object to update our database. Typically, when working with the ADO, you might assume that to update a record in a table we would open a <b><code>Recordset</code></b>, use <b><code>AddNew</code></b> to add a new record, update the fields in the <b><code>Recordset</code></b> and then <b><code>Update</code></b> the <b><code>Recordset</code></b>. This is how we did it in the previous chapter:</p>
<pre><code>...
Set rsAddMessage = Server.CreateObject("ADODB.Recordset")
rsAddMessage.Open "Message", Conn, adOpenKeyset, adLockBatchOptimistic
rsAddMessage.AddNew
rsAddMessage.Fields("FromMsg") = strFrom
rsAddMessage.Fields("Email") = strEmail
rsAddMessage.Fields("Subject") = strSubject
rsAddMessage.Fields("Body") = strBody
rsAddMessage.Fields("WhenMsg") = CStr(Now())
rsAddMessage.Fields("MsgLevel") = intNewMsgLevel
rsAddMessage.Fields("PrevRef") = lngPrevRef
rsAddMessage.Fields("ThreadPos") = intNewThreadPos
rsAddMessage.UpdateBatch
rsAddMessage.Close
Set rsAddMessage = Nothing
...</code></pre>
<p>
However, consider the number of steps involved, as well as the potential server traffic issues that could arise, if the <b><code>UpdateBatch</code></b> method were not supported. In our example, we applied all of the required changes as a single transaction, using the <b><code>UpdateBatch</code></b> parameter, and thus reduced the amount of interaction that had to occur between the server and the application. However, your ADO access provider must support this facility in order for it to be of value. </p>
<p>
Now, let's take a look at a piece of code that does the same thing, using a different tactic:</p>
<pre><code>...
SQLQuery = "INSERT INTO Forum.dbo.Message " _
         &amp; "( FromMsg, Email, Subject, Body, WhenMsg, MsgLevel, " _
         &amp; " PrevRef, TopRef ) " _
         &amp; " VALUES ( '" &amp; strFrom &amp; cDlm &amp; strEmail &amp; cDlm &amp; strSubject _
         &amp; cDlm &amp; strBody &amp; cDlm &amp; CStr(Now()) &amp; "', " &amp; intNewMsgLevel  
         &amp; ", " &amp; lngPrevRef &amp; ", " &amp; intNewThreadPos &amp; " )"
oConn.Execute SQLQuery, lRecs
...</code></pre>
<p>
Here we build an <b><code>INSERT</code></b> statement to apply the data stored in a number of variables to the records. The SQL Statement is syntactically compatible with <b>Transaction</b> <b>SQL</b> (TSQL), the native SQL language of SQL Server. </p>
<p>
The SQL statement is then submitted to the provider using the <b><code>Execute</code></b> method of the <b><code>Connection</code></b> object. Notice that an <b><code>lRecs</code></b> variable is supplied as a parameter to the <b><code>Execute</code></b> method call. This variable will contain a count of the number of records affected by this statement after it is submitted. It can be used to test for the successful completion of the statement.</p>
<p>
One of the advantages of this approach is that it simply requires fewer steps. More importantly, it provides us with the ability to supply <b>batches</b> of SQL to the Server. In the above example, we use a single <b><code>INSERT</code></b> statement. Consider, however, the need for multiple inserts or updates—or perhaps additional data validation that might occur during, or as a part of, the submission.</p>
</BODY>
</HTML>

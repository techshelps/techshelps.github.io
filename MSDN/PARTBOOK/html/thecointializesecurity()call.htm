<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The CoIntializeSecurity() Call</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="thecointializesecurity()call"></a>The CoIntializeSecurity() Call</h1>
<p>
If the client or server calls <b><code>CoInitializeSecurity()</code></b>, the default security blanket for the process is set. It has be called only once per process. If a DCOM client or server doesn't call <b><code>CoInitializeSecurity()</code></b>, the COM runtime will use the configured default security blanket in the registry. The call is typically made immediately after a call to <b><code>CoInitializeEx()</code></b>. The security blanket parameter for the <b><code>COSERVERINFO</code></b> parameter of the<b><code> CoCreateInstanceEx()</code></b> call can be used to override the <b><code>CoInitializeSecurity()</code></b> settings on a per-class basis. Let's examine the calling syntax of the <b><code>CoInitializeSecurity()</code></b> API:</p>
<pre><code>HRESULT CoInitializeSecurity( PSECURITY_DESCRIPTOR pSecDesc,
                              LONG cAuthSvc,
                              SOLE_AUTHENTICATION_SERVICE* asAuthSvc,
                              void* pReserved1,
                              DWORD dwAuthnLevel,
                              DWORD dwImpLevel,
                              void* pReserved2,
                              DWORD dwCapabilities,
                              void* pReserved3 );</code></pre>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=111><b>Parameter</b></td>
<td class=blue width=410><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=111><b><code>PsecDesc</code></b></td>
<td width=410>The pointer to the <b><code>SECURITY_DESCRIPTOR</code></b> In the first argument, if not <b><code>NULL</code></b>—in which case all callers are allowed—specifies which principals are allowed to communicate with the process and which are disallowed.</td>
</tr>
<tr valign=top>
<td width=111><b><code>CauthSvc</code></b></td>
<td width=410>This is the size of the array <b><code>asAuthSvc</code></b>. If <b><code>0</code></b> is passed, no authentication service is registered. <b><code>-1</code></b> signals COM to choose on its own which service to use.</td>
</tr>
<tr valign=top>
<td width=111><b><code>AsAuthSvc</code></b></td>
<td width=410>Specifies an array of structures each containing a principal name as well as an authentication and authorization service ID. These are the initial values used. The actual services to be used for each connection are negotiated and may be different.</td>
</tr>
<tr valign=top>
<td width=111><b><code>dwAuthnLevel</code></b></td>
<td width=410>Default authentication level for proxies. The available values are as in the <b><code>CoCreateInstanceEx()</code></b> call.</td>
</tr>
<tr valign=top>
<td width=111><b><code>dwImpLevel</code></b></td>
<td width=410>Default impersonation level for proxies. The available values are as in the <b><code>CoCreateInstanceEx()</code></b> call.</td>
</tr>
</table>
</BODY>
</HTML>

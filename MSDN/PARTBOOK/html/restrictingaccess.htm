<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Restricting Access</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="restrictingaccess"></a>Restricting Access</h1>
<p>
Let's try to clarify the definition of <b>access</b>. Access is the ability of the <b>accessing entity</b> of an object to interact with the object. Object in this sense doesn't refer to an ActiveX object or a COM object, but rather any logical or physical entity in the computing environment. The accessing entity isn't necessarily a person sat at a keyboard, but could quite easily be another object (for example, an ActiveX component running as an unattended service). </p>
<p>
There are different types of access too. Broadly speaking, they are: view, read, change, delete and execute. Viewing means that the accessing entity is aware of the object in question, but can't do anything with it. Reading allows the accessing entity to view the contents of the objects, but not change that content. Change means that the contents can be updated, while delete means the object can be deleted by the accessing entity. Finally, there's execute. Execute is possibly the most 'dangerous' as the object may have access to other objects that the <b>accessing entity </b>normally has no <b>access rights</b> to. </p>
<h2>Access rights</h2>
<p>
There's a need to assign different levels of access to objects in a system. <b>Access rights</b> is the mechanism by which security-conscious operating systems (for example, Windows NT) follow in order to achieve this. Access rights specify what the accessing entity has the right to do with the object. Objects in the system have an associated list of access rights that specifies which accessing entities have which rights.</p>
<p>
This brings us to the issue of how to ensure that the accessing entity is who they claim to be, so that they can be allowed to exercise the rights they may have. That is, the accessing entity must be <b>authenticated</b>.</p>
<h1><a name="identificationauthentication"></a>Identification and Authentication</h1>
<p>
In most computer systems that support security mechanisms, the notion of a <b>user</b> or <b>account</b> associates the accessing entity with certain access rights to the objects managed by the system. Any programs, then, that run on such systems, run 'on behalf of', or 'in the context of' a user or an account. </p>
<p>
The security issue that arises immediately is that of ensuring that when an entity presents to the system its credentials purporting that it is user 'A', there's a mechanism to indeed verify that it is, or it is not, 'A'. </p>
<p>
Authentication is the mechanism of ensuring or verifying the identity of the entities requiring access to a computer system and is based on the secure exchange of identity information.</p>
</BODY>
</HTML>

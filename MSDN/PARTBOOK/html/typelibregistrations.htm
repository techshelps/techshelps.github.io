<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Typelib and Registrations</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="typelibregistrations"></a>Typelib and Registrations</h1>
<p>
Registration of type library information is mandatory for classes that are to be used by automation clients. You should register your type library if you want the object that you've created, whether it's local or remote, to be usable by VBScript and JAVAScript in Internet Explorer, and Visual Basic as well as Java.</p>
<p>
Recall from Chapter 2 that type libraries are maintained in <b><code>.TLB</code></b> files generated by the MIDL compiler from the project's <b><code>.IDL</code></b> file. But, ATL also combines the type library information with the generated executable (either <b><code>.EXE</code></b> or <b><code>.DLL</code></b>). When we do a <b><code>regsvr32 &lt;name&gt;.DLL</code></b> or a <b><code>&lt;name&gt;.EXE /RegServer</code></b>, the type library registration is also performed automatically. </p>
<p>
Let's look into the registry and see where these type libraries are actually located. In general, a type library can be located under:</p>
<p>
<b><code>\HKEY_CLASSES_ROOT\TYPELIB\{Type library’s UUID}</code></b></p>
<p>
Taking our ATLFinder local server as an example, we find the following registry values:</p>
<p>
<img src="03750904.gif" border=0></p>
<p>
Matching this with the <b><code>Atlfinder.idl</code></b> that we've created in Chapter 7, we can see the correspondence.</p>
<pre><code>[
   uuid(721B4F00-4D27-11D0-8564-004005263AF7),
   version(1.0),
   helpstring("ATLFinder 1.0 Type Library")
]
library ATLFINDERLib
{
... skipped interface and coclass definitions   
};</code></pre>
<p>
The GUID of the type library is used as the main key under <b><code>\HKEY_CLASSES_ROOT\TYPELIB</code></b>. Then a subkey containing <b><code>&lt;MajorVersion.MinorVersion&gt;</code></b> has a default value that is the name or 'helpstring' attribute in the IDL file. Under this subkey, there can be a <b><code>FLAGS</code></b> subkey. This subkey can contain a unary ORed combination of the following values:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=104><b>FLAGS value</b></td>
<td class=blue width=436><b>Description</b></td>
</tr>
<tr valign=top>
<td width=104><b><code>1</code></b></td>
<td width=436>Restricted—no user tools should display or use this type library.</td>
</tr>
<tr valign=top>
<td width=104><b><code>2</code></b></td>
<td width=436>Control—the type library contains descriptions of controls. Tools which examine nonvisual objects should skip this library.</td>
</tr>
<tr valign=top>
<td width=104><b><code>4</code></b></td>
<td width=436>Hidden—this library should not be displayed to the users, but can be used by controls.</td>
</tr>
</table><br>
<p>
The actual location of the type library information, in this case the <b><code>Atlfinder.exe</code></b> file with the TLB information merged in as a custom resource, can be found under a subkey with <b><code>0\win32</code></b>. The <b><code>0</code></b> subkey is there mainly for historical reasons. Older OLE implementations had no means of deleting a type library entry programmatically, so the numeric index is used to keep track of older versions of the type library. </p>
<p>
The <b><code>HELPDIR</code></b> subkey specifies the path to the <b><code>.HLP</code></b> file associated with this type library. If a type library is published for commercial or production purposes, a context index can be associated with a help file for each item in the type library to give more information to the end user as they browse the type library.</p>
</BODY>
</HTML>

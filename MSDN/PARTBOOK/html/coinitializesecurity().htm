<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoInitializeSecurity()</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="coinitializesecurity()"></a>CoInitializeSecurity()</h1>
<p>
A new <b><code>CoInitializeSecurity()</code></b> call allows a process to set a default security blanket. A security blanket is a suite of security parameters specifying the level of security required. A negotiation process takes place when a client connects to a server, when the system matches the security levels specified by the client to make sure it is at the same level or higher than those specified in the server's security blanket. More discussion of security and the <b><code>CoInitializeSecurity()</code></b> will be presented in Chapter 9. Typically, the <b><code>CoInitializeSecurity()</code></b> call is made after a call to <b><code>CoInitializeEx()</code></b>. If a process doesn't call <b><code>CoInitializeSecurity()</code></b>, COM will actually make the call on the process's behalf, using the defaults found in the registry (under the <b><code>AppID</code></b> key). This is how legacy non-DCOM aware components get to play along with DCOM-aware components, without having to worry about security.</p>
<p>
Again, we'll discuss other DCOM related security interfaces, including the <b><code>IClientSecurity</code></b>, <b><code>IServerSecurity</code></b>, and <b><code>IAccessControl</code></b> interfaces (together with their associated helper functions) in Chapter 9.</p>
</BODY>
</HTML>

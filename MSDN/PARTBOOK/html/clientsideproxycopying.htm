<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Client-Side Proxy Copying</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="clientsideproxycopying"></a>Client-Side Proxy Copying</h1>
<p>
Occasionally, a client may want to ensure a specific security blanket is set on a particular interface when presented to the server for security negotiation. Directly changing the security blanket on the default proxy (returned by initial <b><code>QueryInterface()</code></b> call) will affect all other users of the proxy who may have different security requirements. The way out of the predicament is to make a private copy of the proxy on which to set the desired security blanket. </p>
<p>
Beware, however: proxy copies are special in that a <b><code>QueryInterface()</code></b> on a proxy copy will return a pointer to an interface on the original proxy, with the original's security blanket.</p>
<p>
<b><code>CoCopyProxy()</code></b> encapsulates several steps. It does a <b><code>QueryInterface()</code></b> on the original proxy for <b><code>IID_IClientSecurity</code></b>, invoking <b><code>IClientSecurity::CoCopyProxy()</code></b> on it and then releasing it.</p>
<pre><code>HRESULT CoCopyProxy( IUnknown* pProxy, // original
                     IUnknown** ppCopy ); // pointer to copy pointer</code></pre>
<p>
The client can now set the security blanket by doing, for example:</p>
<pre><code>IUnknown pCopy;  // copy proxy

CoCopyProxy( pProxy, &amp;pCopy );
CoSetProxyBlanket(  pCopy,  
          RPC_C_AUTHN_WINNT,
          RPC_C_AUTHZ_NONE,
          L”HOST”,
       RPC_C_AUTHN_LEVEL_CONNECT,
           RPC_C_IMP_LEVEL_IMPERSONATE,
         NULL, 
           0);
// use the proxy
...
pCopy-&gt;Release();</code></pre>
<p>
Here's the exact declaration:</p>
<pre><code>HRESULT CoSetProxyBlanket( IUnknown* pProxy,
                           DWORD dwAuthnSvc,
                           DWORD dwAuthzSvc,
                           OLECHAR* pServerPrincName,
                           DWORD dwAuthnLevel,
                           DWORD dwImpLevel,
                           RPC_AUTH_IDENTITY_HANDLE* pAuthInfo,
                           DWORD dwCapabilities );</code></pre>
<p>
We've seen most of the arguments before!</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=128><b>Parameter</b></td>
<td class=blue width=388><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=128><b><code>Pproxy</code></b></td>
<td width=388>Pointer to a copy proxy on which this blanket will be set.</td>
</tr>
<tr valign=top>
<td width=128><b><code>DwAuthnSvc</code></b></td>
<td width=388>An <b><code>RPC_C_AUTHN_</code></b>xxx value.</td>
</tr>
<tr valign=top>
<td width=128><b><code>DwAuthzSvc</code></b></td>
<td width=388>An <b><code>RPC_C_AUTHZ_</code></b>xxx value.</td>
</tr>
<tr valign=top>
<td width=128><b><code>PserverPrincName</code></b></td>
<td width=388>A wide character string with server's principal name to be used for authentication.</td>
</tr>
<tr valign=top>
<td width=128><b><code>DwAuthnLevel</code></b></td>
<td width=388>An <b><code>RPC_C_AUTHN_LEVEL_</code></b>xxx value.</td>
</tr>
<tr valign=top>
<td width=128><b><code>DwImpLevel</code></b></td>
<td width=388>An <b><code>RPC_C_IMP_LEVEL_</code></b>xxx value.</td>
</tr>
<tr valign=top>
<td width=128><b><code>PAuthInfo</code></b></td>
<td width=388>Authentication service specific. <b><code>NULL</code></b> for default.</td>
</tr>
<tr valign=top>
<td width=128><b><code>DwCapabilities</code></b></td>
<td width=388>Extra capabilities for the proxy. Not defined.</td>
</tr>
</table><br>
</BODY>
</HTML>

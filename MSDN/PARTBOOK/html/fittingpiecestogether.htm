<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Fitting the Pieces Together</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="fittingpiecestogether"></a>Fitting the Pieces Together</h1>
<p>
The following table shows all these elements fit together in a typical security implementation.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=270><b>Security Issue</b></td>
<td class=blue width=270><b>Security mechanism</b></td>
</tr>
<tr valign=top>
<td width=270>Controlled access</td>
<td width=270>Access rights, identities</td>
</tr>
<tr valign=top>
<td width=270>Right for privacy</td>
<td width=270>Encryption</td>
</tr>
<tr valign=top>
<td width=270>Integrity</td>
<td width=270>Authentication</td>
</tr>
</table><br>
<p>
In the following pages, we'll be examining the security implementation of Windows NT and Windows 95 in the context of ActiveX components and distributed computing in an intranet environment. We'll be revisiting each of the above security elements as appropriate and showing how you can implement and reuse them.</p>
<h1><a name="activexwindowsntservernetwork"></a>ActiveX and Windows NT Server Network</h1>
<p>
Thankfully, when dealing with ActiveX based technology in a Windows NT Server network, there is a lot that can be done. The Windows NT Server product is designed from the conceptual stage to provide a secure computing environment.</p>
<p>
Security isn't something that can be added to an operating system as an afterthought. It has to be designed into the core of the system from day one. In particular, it was designed to meet the so-called C2 security guidelines set out by the U.S. government. Even though being certified for compliance with the C2 guidelines may be required only for deployment in government organizations, the enhanced security that compliant systems offer is very important for businesses at large as well. </p>
<p>
The main requirements for C2 compliance are:</p>
<ul type=disc>
<li>
<i>User identification and authentication</i>. The system requires the users to prove their identity before they are allowed access.<br><br></li>
<li>
<i>Auditing</i>. User actions, and object access can be logged by the system.<br><br></li>
<li>
<i>Discretionary access control</i>. Objects on the system have owners who can grant or restrict at various levels access to the resources.<br><br></li>
<li>
<i>Object reuse</i>. The system guarantees that discarded or deleted objects are not accessible by other entities. This holds true, for example, for deleted files, deallocated memory, etc.<br><br></li>
<li>
<i>System integrity</i>. The system protects resources that belong to one entity from being read or written to by other entities. For example, the memory that's been allocated to a process isn't accessible by other processes.</li>
</ul>
<p>
The C2 guidelines refer to standalone systems only, and are published in an orange book aptly called the <i>Orange Book</i>. Guidelines for networking aspects of security are covered in the <i>Red Book</i>. </p>
<p>
NT 3.51 received C2 certification in September 1996. NT 4.0 is undergoing networking and C2 certification at the time of writing.</p>
<p>
With such robust security support in place, network software, application software, and distributed components (really networked application software pieces) can leverage off these system features to extend the secure computing environment. We'll see how this is done throughout the rest of the chapter.</p>
</BODY>
</HTML>

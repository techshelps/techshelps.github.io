<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Browser Object Model</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="thebrowserobjectmodel"></a>The Browser Object Model</h1>
<p>
As you’ve learned and worked with ASP, you’ve come to depend on the server object model documentation a lot to answer many queries. When do we need the properties of the <b><code>Server</code></b> object? Where is that <b><code>Cookies</code></b> collection? Is it the <b><code>Response</code></b> object, the <b><code>Request</code></b> object, or both? The object model provided by ASP is how we interface with the server, and it’s of utmost importance. </p>
<p>
As you might expect, on the client-side, the <b>browser</b> <b>object</b> <b>model</b> is just as important. All of the interactions between our code and the browser take place via the object model, and without a good knowledge of how it is set up, our code either won’t work as well as it could, or it won’t work at all!</p>
<p>
For the rest of this chapter, we’ll be covering the different objects in the browser object model, explaining how they relate to each other, and showing you some more examples. We need to understand exactly why we have to say things like <b><code>Document.frmTest.txtURL.Value</code></b>.</p>
<h2>An Overview of the Browser</h2>
<p>
In the ASP object model, there are five main objects: <b><code>Server</code></b>, <b><code>Response</code></b>, <b><code>Request</code></b>, <b><code>Session</code></b>, and <b><code>Application</code></b>. These top-level objects have properties, methods, and subordinate objects where appropriate. Although it’s set up a bit differently, the browser object model follows the same principle of providing access to the features of the browser. Instead of five separate objects, the browser has one top level object called <b><code>Window</code></b>. The rest of the browser’s objects are located beneath the <b><code>Window</code></b> object in a logical hierarchy of functionality.</p>
<p>
The <b><code>Window</code></b> object represents the browser itself. It has a number of self-contained properties, like <b><code>status</code></b> (the current text of the status bar at the bottom of the browser) that reflect and provide access to the browser. Its methods perform operations that make sense for the browser window, like opening another window and navigating to a new page. And, last but not least, it fires events every time it finishes loading a page, or completes unloading a page in preparation for moving to a new URL or shutting down.</p>
<p>
To script programmers, the <b><code>Window</code></b> object’s subordinate objects are just as interesting as its immediate properties, methods, and events. 
<ul type=disc>
<li>
The <b><code>Document</code></b> object: represents the document currently displayed <br><br></li>
<li>
The <b><code>Frames</code></b> collection: represents the frames in the current window <br><br></li>
<li>
The <b><code>History</code></b> object: represents the history list of the browser <br><br></li>
<li>
The <b><code>Location</code></b> object: represents the current URL that the browser is displaying <br><br></li>
<li>
The <b><code>Navigator</code></b> object: represents information about the browser itself, like the version number</li>
</ul>
<p>
*** Insert diagram from 0448 VBScript Page 148 - the object model. </p>
<p>
*** Annotate: ' Each frame is in effect a window object ' (as in VBScript book).</p>
<p>
Of these objects, the <b><code>Document</code></b> object is by far the most utilized by the average script developer. It provides access to objects in the page currently displayed in the browser with the <b><code>Link</code></b>, <b><code>Anchor</code></b>, and <b><code>Form</code></b> collections. If we think back to our previous series of Hello World examples, we’ll realize that we’ve been using the <b><code>Forms</code></b> collection of the <b><code>Document</code></b> object from the beginning of this chapter.</p>
<p>
The rest of this section covers each of these elements in a bit more detail, focusing especially on the <b><code>Window</code></b> and <b><code>Document</code></b> objects. </p>
<p class=indent>
Covering every last aspect of the scripting object model would occupy many chapters (and indeed does in many books about client-side scripting). In this chapter we’ll give an overview and cover the most important elements. For more information, please check out the Wrox Press book Instant VBScript, and the Scripting Object Model document available from Microsoft's Web site at <b><code>http://www.microsoft.com</code></b> (search for <b><code>scriptom</code></b>).</p>
<p>
Since the <b><code>Window</code></b> object is the root of many useful objects in the object model, we’ll start by looking at it first.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting the Focus</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="settingfocus"></a>Setting the Focus</h1>
<p>
Users of Windows applications are fickle—they actually expect the user interface to be easy to understand, straightforward, and logical. This means anything from menus that are ordered so we can easily find program options, to text boxes that automatically start with the text most commonly entered. It used to be difficult to achieve this friendliness with HTML. Only a few input elements were available to request data from the user, and fine layout of these elements was often hard to manage. Fortunately, HTML has advanced substantially over the last few years, and, with objects and script code, many previously impossible things can now be accomplished.</p>
<h2>The ChangeFocus Example</h2>
<p>
The first example involves setting the input focus to the text box the user is most likely to want to enter data into on the 'Login' page. We'll be able to do this with only one line of script code. In Windows 95, Windows NT, and a number of other operating systems, the system's logon dialog includes user ID and password text boxes. </p>
<p>
In most cases just one person uses a machine most of the time, so the logon dialog automatically presets the user ID text box to the ID of the last person who logged on, and puts the cursor in the password text box. All we have to do is sit down, enter our password, and press <i>Return</i> (assuming we were the last person to use the machine). This is a lot better than having to manually enter our ID, press <i>Tab</i> to move to the password field, enter our password, and, finally, press <i>Return</i>.</p>
<p>
Our example page (<b><code>changefocus.htm</code></b>) shows a hypothetical logon screen with user ID and password fields:</p>
<p>
<img src="cfocus.gif" border=0></p>
<p>
If you load this page into the browser and then look at the cursor, you'll find that it's in the password field, not the user ID text box. Normally, when an HTML page loads, the input focus is automatically positioned on the first form element that can take input. This isn't what we want because it requires the user to manually tab to the password text box every time they logon. Fortunately, the little bit of script code we've added to the file takes care of this problem.</p>
<p class=indent>
The page in this example always shows the same user ID, johndoe, and doesn't do anything when the Submit button is clicked (take a look at the source and see that the <b><code>ACTION</code></b> attribute of the form is set to a non-existent file called <b><code>DeadLink.asp</code></b>). We'll see what we could do about this in a while, and for a more complete example of a logon page look back at Chapter 6, or the bug report case study in Chapter 12. </p>
<h3>The ChangeFocus Code</h3>
<p>
The HTML file for this sample, <b><code>ChangeFocus.htm</code></b>, contains only normal HTML, except for one small script block. The HTML creates a form called <b><code>myForm</code></b>, with a text box called <b><code>txtUserID</code></b>, a password text box called <b><code>pwdPassword</code></b>, and a single Submit button.</p>
<p>
But the script block is where the action occurs:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub Window_onLoad
   Document.myForm.pwdPassword.Focus
End Sub
&lt;/SCRIPT&gt;</code></pre>
<p>
The <b><code>&lt;SCRIPT&gt;</code></b> tag tells the browser that the following lines are code. The next line, <b><code>Window_onLoad</code></b>, says that the code inside this subroutine (that is, everything until the <b><code>End</code></b> <b><code>Sub</code></b>) should be executed immediately after the page is loaded. Everything up until now has been just plumbing, the next line does our work by calling the <b><code>Focus</code></b> method of the <b><code>pwdPassword</code></b> password text box.</p>
<p>
To call the <b><code>Focus</code></b> method, we first need to get a reference to the password text box. That's what everything on this line (except for the <b><code>.Focus</code></b>) is for. Think back to the last chapter and remember that the <b><code>Document</code></b> object represents the current document in the browser. Each <b><code>Document</code></b> object has a collection of <b><code>Form</code></b> objects, one for each form. In the same way, each <b><code>Form</code></b> object has its own collection of <b><code>Element</code></b> objects that represent each input element or object in a form. </p>
<p>
The <b><code>Form</code></b> collection can be accessed by the numerical index of the form, or by its name as we've done here. Similarly, <b><code>Elements</code></b> can be accessed by an index or by the individual element name. In our example, we've used the name of the form and the name of the password text box instead of their indices, but this line of code would accomplish the same thing:</p>
<pre><code>&nbsp;&nbsp;&nbsp;Document.Forms(0).Elements(1).Focus</code></pre>
<p>
Once we have a reference to the password text box, all that remains is to call the method we want, which in this case is <b><code>Focus</code></b>.</p>
<p>
So, the page loads, the <b><code>Window_onLoad</code></b> event is called, and the focus is set to the password text box, ready for input. Our users are happy they don't have to press Tab many times every day, we get a huge raise, and retire. Sound far fetched? OK, maybe… but keep reading, we still have more interesting things to talk about in this chapter.</p>
<h2>Using ASP to Create the Page</h2>
<p>
From the earlier spin button example, and the examples in Chapter 6, it's easy to see how we could set the user ID text box in an ASP file and send that to the browser instead of an <b><code>.htm</code></b> page. If it was part of an application, we might already have it stored elsewhere, so we would just use it in the <b><code>VALUE</code></b> attribute of the <b><code>&lt;INPUT&gt;</code></b> tag:</p>
<pre><code>&lt;INPUT TYPE="TEXT" NAME="txtUserID" VALUE="&lt;% = strStoredUserID %&gt;"&gt;</code></pre>
<p>
And of course, we could then emulate the behavior of the standard Windows logon dialog more closely, by checking if we'd actually got a user ID before we set the focus:</p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub Window_onLoad
   If Document.myForm.txtUserID &lt;&gt; "" Then 
      Document.myForm.pwdPassword.Focus
   End If
End Sub
&lt;/SCRIPT&gt;</code></pre>
</BODY>
</HTML>

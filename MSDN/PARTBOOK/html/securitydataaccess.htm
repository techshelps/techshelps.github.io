<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Security and Data Access</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="securitydataaccess"></a>Security and Data Access</h1>
<p>
The level of security actually required is dependent on the level of access needed by our clients. If our database is servicing a small group of individuals, with information that requires minimal protection, then a very open security framework could be put into place. Essentially, we just need to allow our users to access the data they need, while protecting them from accidentally destroying or damaging it. However, if our database is servicing a public forum, much more stringent controls must be built. Not only do we need to protect the data from accidental damage, we need to verify that those accessing it have the right to do so, as well as protect it against those that do not—or who might intentionally damage it. </p>
<p>
SQL Server supports several powerful security features that can be applied to each of these scenarios. SQL Server security options determine a server's login security mode, what auditing is done, and what objects, resources and data a user has access to. In the next section, we will take a high-level look at some of the security features offered by SQL Server.</p>
<h2>Login Security</h2>
<p>
SQL Server 6.5 offers three login security modes. The mode we choose will significantly effect how the server handles security. Let's take a look at each of the options available, and how these options affect our environment:</p>
<ul type=disc>
<li>
<b>Standard Security Mode</b>: This is the default security mode. In standard mode, SQL Server manages its own login validation process for all connections (except client applications that explicitly request integrated security over trusted connections). <br><br></li>
<li>
<b>Windows NT Integrated Security Mode:</b> This mode uses Windows NT authentication mechanisms for all connections. Only trusted connections are allowed into SQL Server. SQL Server always ignores the login name and SQL Server password submitted in the login request from an Open Database Connectivity (ODBC) client application. Network users, who were assigned user-level privileges to SQL Server, log in using their network username or the default login ID (if their network username is not found in <b><code>syslogins</code></b>).<br><br></li>
<li>
<b>Mixed Security Mode</b>: This mode allows both trusted and non-trusted connections, and is a combination of integrated and standard modes. For trusted connections, SQL Server examines the requested login name as specified by the client ODBC application. If this login name matches the user's network username, or if the login name is null or spaces, SQL Server first tries the Windows NT integrated login rules as described above. If this fails, SQL Server uses the standard rules. If the requested login name is any other value, the user must supply the correct SQL Server password, and SQL Server handles the login using the standard rules described above. All login requests from non-trusted connections are handled using the standard rules.</li>
</ul>
<p>
Integrated and mixed security modes are best utilized in an intranet environment. In this environment, user IDs and privileges are defined in the Windows NT domain, and subject to domain security. The user ID can be retrieved from the client system directly, and authenticated against the domain master list. Here, the user is never required to provide authentication information. </p>
<p>
In the big wide world of the Internet, a domain-based authentication model would not be realistic. Here, security must be tightly controlled and access provided only as is necessary. </p>
<h2>User Groups</h2>
<p>
Creating a Login is just the first level of security associated with SQL Server. A Login ID does not permit the user to access any of the objects in a database. Access to a database and the objects within it are granted to individual users or groups of users.</p>
<p>
SQL Server security is based on a detailed hierarchy of <b>groups</b>, which include <b>users</b>. Both groups and users are defined as having specific access to, and control over, services and data. In SQL Server, permissions for services and data can be controlled at a very granular level. For example, access to an individual object can be controlled, and then the actions that are possible on that object can also be regulated. </p>
<p>
A group is simply a means of organizing the users of a database. Permissions are assigned to the group, as opposed to individual users. Users in the group have access to any resources available to the group as a whole. This simplifies the administration of users and objects in an SQL Server environment. </p>
<p>
There is a built-in group, public, in every database. Each user automatically belongs to public and can be added to only one other group. A user cannot be remove from the public group. If a group is deleted (or 'dropped'), all users in that group are automatically removed from the group. However, dropping a group does not drop its users. Users who were members of the dropped group are still valid users in the database and members of the public group.</p>
<h2>Database and Object Owners</h2>
<p>
SQL Server is organized around databases. Each one contains <b>objects</b>, such as tables, stored procedures, rules etc.. Each object has an <b>owner</b>, who has full authority over that object. SQL Server recognizes two types of owner—the database owner (DBO) and database object owner. </p>
<p>
The <b>database</b> <b>owner</b> is the creator of a database, and has full privileges over it. However, beyond simply having the ability to manipulate the object itself, the DBO has the option of granting access to the database to other users or groups. In summary, the DBO can:</p>
<ul type=disc>
<li>
Allow users access to the database.<br><br></li>
<li>
Grant users permission to create objects and execute commands within the database.<br><br></li>
<li>
Set up groups<br><br></li>
<li>
Assign users to groups and add guest accounts, which give users limited access to a database.</li>
</ul>
<p>
Just like any other user, the database owner logs into SQL Server by using an assigned login ID and password. In their own database, the user is recognized as DBO; in databases which they haven't created, the user is just known by their database username. </p>
<p>
As we said earlier, a database contains objects. The user who creates a database object is the <b>database</b> <b>object</b> <b>owner</b> for that object. In order for a user to create an object within a database, the database owner must first grant that user permission to create that particular type of object. Just as the database owner can grant permissions for their database to other users, the object owner can grant permissions for their object.</p>
<p>
Database object owners have no special login IDs or passwords. The creator of an object is automatically granted all permissions to it. An object owner must explicitly grant permissions to other users before they can access the object. Even the database owner cannot use an object unless the object owner has granted the appropriate permission. </p>
<p>
As you can see, database and database object privileges are assigned at a very detailed level. Let's take a look at what privileges (referred to as <b>permissions</b>) can be granted to users and groups. </p>
<h2>Security Permissions</h2>
<p>
SQL Server has two categories of permissions: object and statement. Some statement permissions (for the <b><code>SELECT</code></b>, <b><code>UPDATE</code></b>, <b><code>INSERT</code></b>, <b><code>DELETE</code></b> and <b><code>EXECUTE</code></b> statements) are handled as object permissions because these statements always apply to database objects that are in the current database.</p>
<p>
<b>Object</b> <b>permissions</b> regulate the use of certain statements on certain database objects. They are granted and revoked by the owner of the object. Object permissions apply to the following statements and objects:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=110><b>Statement</b></td>
<td class=blue width=186><b>Object</b></td>
</tr>
<tr valign=top>
<td width=110><b><code>SELECT</code></b></td>
<td width=186>Table, view, columns</td>
</tr>
<tr valign=top>
<td width=110><b><code>UPDATE</code></b></td>
<td width=186>Table, view, columns</td>
</tr>
<tr valign=top>
<td width=110><b><code>INSERT</code></b></td>
<td width=186>Table, view</td>
</tr>
<tr valign=top>
<td width=110><b><code>DELETE</code></b></td>
<td width=186>Table, view</td>
</tr>
<tr valign=top>
<td width=110><b><code>REFERENCE</code></b></td>
<td width=186>Table</td>
</tr>
<tr valign=top>
<td width=110><b><code>EXECUTE</code></b></td>
<td width=186>Stored procedure</td>
</tr>
</table><br>
<p>
<b>Statement</b> <b>permissions</b> are not object-specific. They can be granted only by the system administrator (often referred to as the <b><code>sa</code></b>) or the database owner. Statement permissions allow the user to create new objects within a database. The following are examples of these statements:</p>
<ul type=disc>
<li>
<b><code>CREATE</code></b> <b><code>DATABASE</code></b> (can be granted only by <b><code>sa</code></b>, and only to users in the master database)<br><br></li>
<li>
<b><code>CREATE</code></b> <b><code>DEFAULT</code></b><br><br></li>
<li>
<b><code>CREATE</code></b> <b><code>PROCEDURE</code></b><br><br></li>
<li>
<b><code>CREATE</code></b> <b><code>RULE</code></b><br><br></li>
<li>
<b><code>CREATE</code></b> <b><code>TABLE</code></b><br><br></li>
<li>
<b><code>CREATE</code></b> <b><code>VIEW</code></b></li>
</ul>
<p>
Each database has its own independent permissions system. In other words, being granted permission to perform a given task in one database has no effect in other databases. </p>
<p>
Now that we have had a chance to take a brief look at SQL Server Security, let's look at a few tips that will help us design our next database.</p>
</BODY>
</HTML>

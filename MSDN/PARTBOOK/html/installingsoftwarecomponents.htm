<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Installing the Software Components</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="installingsoftwarecomponents"></a>Installing the Software Components</h1>
<p>
Now, we're ready to move the <b><code>Atldept.dll</code></b> and <b><code>Atlfinder.exe</code></b> over to the remote machine that we'll call the server machine. On the 'server' machine, make sure that the network is prepared, including the activation of printer and file sharing, activation of the user level shares, and the enabling of DCOM connections if necessary. Having done this, create a <b><code>C:\Test</code></b> directory on the 'server' machine and copy the following files into the directory:</p>
<ul type=disc>
<li>
<b><code>Atldept.dll</code></b><br><br></li>
<li>
<b><code>Atlfinder.exe</code></b><br><br></li>
<li>
<b><code>atl.dll</code></b> (from the ATL 2.1 distribution or your system directory)<br><br></li>
<li>
<b><code>Regsvr32.exe</code></b> (from <b><code>DevStudio\vc\bin</code></b> directory)</li>
</ul>
<p>
Now change directory to <b><code>C:\Test</code></b> and type in the following:</p>
<p>
<b><code>REGSVR32 ATL.DLL</code></b></p>
<p>
<b><code>REGSVR32 ATLDEPT.DLL</code></b></p>
<p>
<b><code>ATLFINDER /RegServer</code></b></p>
<p>
Each of these operations should complete successfully. Now install Object Viewer and start it up. Check under the All Objects list and find ATLFinder1 Class and ATLDept1 class. Double-click each one to ensure that you can create an instance of each class. Release the instances.</p>
<p>
Finally, on the 'server' machine, type in <b><code>ATLFINDER /Server</code></b>. This will start the <b><code>Atlfinder.exe</code></b> COM server listening for incoming COM requests. DCOM for Windows 95 doesn't support remote server launching. Therefore, all remote servers must be started manually. If you have a Windows NT 4.0 system, however, you'll not need to manually enter the above command. <b><code>Atlfinder.exe</code></b> will be automatically launched on-demand under Windows NT DCOM.</p>
<p>
Now the 'server' machine is completely configured for operations. Go back to the 'client' machine. I assume that this machine has been properly configured as specified above, and that you've logged on with the same user ID as on the 'server' machine. Now, start up Object Viewer and click on the ATLFinder1 Class under All Objects. On the right-hand pane, you'll see a set of tabs. Click on the Implementation tab. Click on Local Server and you should see a path to the <b><code>Atlfinder.exe</code></b> on your system. Remove this path and leave the edit box empty. This effectively removes the content of the <b><code>LocalServer32</code></b> key from the registry. Now, we need to tell the 'client' machine that the <b><code>ATLFinder1</code></b> class is to be instantiated remotely. To do this, click on the Activation tab, click on the <u>L</u>aunch As Interactive User and key in the IP address of the 'server' machine.</p>
<p>
<img src="03750930.gif" border=0></p>
<p>
Now go back to the left-hand pane and click on the ATLFinder1 Class entry to instantiate an object. If this is successful (it may take a little while), you'll see the interfaces listed and you'll have successfully instantiated an object across the network.</p>
<p class=indent>
Important note: DCOM for Windows 95 is supposed to automatically start a program named <code>Rpcss.exe</code> when a connection is made to the object. However, this doesn't always work. If you have problems connecting to the object try running <code>Rpcss.exe</code> on the 'server' before you attempt to connect.</p>
<p>
To put the entire scenario to work now, open <b><code>TestPage.htm</code></b> from the last chapter. After a moment the calendar should start and display all the events. Try selecting a cell with events to get the details. Notice the response. Next, try changing months: notice again the significantly slower response. The ActiveX control is now working over the TCP/IP network via DCOM. The exact same interaction is happening across machine boundaries.</p>
<p>
The significant note to make here is that we haven't specifically programmed any DCOM server or DCOM client. The binary code hasn't actually changed at all. It's the same in-proc <b><code>Atldept.dll</code></b> server, the same <b><code>Atlfinder.exe</code></b> local server, and the same ActiveX control. All we did was some external configuration, and our COM objects started to communicate with each other over the network. This is significant because it shows the fact that:</p>
<p class=indent>
DCOM <b>is </b>COM</p>
<p>
Almost all legacy COM applications (ones designed with no consideration for DCOM) can be configured to work with DCOM. Of course, new 'from-scratch' applications can take specific advantage of the new features available in DCOM by programming directly to it or—more importantly—being designed specifically for it. We'll have a further discussion on these topics in a later section.</p>
<p>
The following diagram depicts the interaction between the ActiveX control and the remote DCOM server components.</p>
<p>
<img src="03750931.gif" border=0></p>
</BODY>
</HTML>

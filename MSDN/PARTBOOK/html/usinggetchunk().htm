<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using GetChunk()</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2"><h1><a name="usinggetchunk()"></a>Using GetChunk()</h1>
<p>
When we perform a directory FTP Execute operation such as DIR, LS, or PWD, the data is not returned to us immediately; instead, it is stored in a buffer and we must use the GetChunk() (as in &#34;get a chunk of data&#34;) method to read it.</p>
<p>
Let&#39;s say we performed a DIR operation with the Execute() method. In that case, we use GetChunk() to retrieve the directory data we received. We use GetChunk() like this: Inet1.GetChunk(size, type). Here, size is the number of bytes we want to get from the download buffer, and type can be one of two constants: icString (value = 0, the default) for string data, or icByteArray (value = 1) for binary data. Our goal might be to display the directory data we got in a text box named Text1. We would start in the Internet Transfer control&#39;s StateChanged event handler. We wait until the directory data has been downloaded by checking the State variable and making sure it equals icResponseReceived:</p>
<pre><code>Private Sub Inet1_StateChanged(ByVal State As Integer)
  &mdash;&gt;        If(State = icResponseReceived) Then  'This constant = 12
                    .
                    .
                    .
  &mdash;&gt;           End If
        End Sub</code></pre>
<p>
If we got the directory data, we can begin by getting, say, 2K of data from the download buffer:</p>
<pre><code>Private Sub Inet1_StateChanged(ByVal State As Integer)
            If(State = icResponseReceived) Then  'This constant = 12
        &mdash;&gt;             Dim VariantData As Variant
        &mdash;&gt;             VariantData = Inet1.GetChunk(2048, icString)
                             .
                             .
                             .
                End If
        End Sub</code></pre>
<p>
Note that GetChunk() returns a Variant: an untyped value that can be either a string or numeric data. In this case, we&#39;ll keep reading from the download buffer until we exhaust it, in which case GetChunk will return an empty string, &#34;&#34;:</p>
<pre><code>Private Sub Inet1_StateChanged(ByVal State As Integer)
                If(State = icResponseReceived) Then  'This constant = 12
                       Dim VariantData As Variant
     &mdash;&gt;                Dim StringData As String
     &mdash;&gt;                Dim DoneFlag As Boolean
     &mdash;&gt;                DoneFlag = False
     &mdash;&gt;                StringData = ""
                        VariantData = Inet1.GetChunk(2048, icString)
     &mdash;&gt;              While Not DoneFlag
     &mdash;&gt;                 StringData = Data + VariantData
     &mdash;&gt;                 VariantData = Inet1.GetChunk(2048, icString)
     &mdash;&gt;                 If Len(VariantData) = 0 Then DoneFlag = True
     &mdash;&gt;                Wend
                         .
                         .
                         .
                End If
        End Sub</code></pre>
<p>
At this point, the directory data we received is in the string StringData, and we can display it in our text box Text1 this way:</p>
<pre><code>Private Sub Inet1_StateChanged(ByVal State As Integer)
            If(State = icResponseReceived) Then  'This constant = 12
                        Dim VariantData As Variant
                        Dim StringData As String
                        Dim DoneFlag As Boolean
                        DoneFlag = False
                        StringData = ""
                        VariantData = Inet1.GetChunk(2048, icString)
                     While Not DoneFlag
                        StringData = Data + VariantData
                        VariantData = Inet1.GetChunk(2048, icString)
                        If Len(VariantData) = 0 Then DoneFlag = True
                        Wend
   &mdash;&gt;                  Text1.Text = StringData
                End If
        End Sub</code></pre>
<h1></h1>
</font></BODY>
</HTML>

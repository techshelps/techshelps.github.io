<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Bringing State to HTTP</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="bringingstatetohttp"></a>Bringing State to HTTP</h1>
<p>
On the Web, with previous applications based on technologies such as CGI, the problem has always been that, when a client submits a request, the server just produces a response and returns it. When another request is received from that user, the server has no idea if there was a previous request. This is because the HTTP protocol is <b>stateless</b>. Building client/server programs with a stateless protocol can become very complicated. </p>
<h2>Why Do We Need State?</h2>
<p>
To understand why, imagine building a traditional application in, say, Visual Basic. You design a form with a dozen or so command buttons, and write a piece of code that runs when each button is clicked. VB itself knows which button was clicked, and so runs the correct code routine for that button. But now imagine that VB was designed like HTTP. Instead of running individual routines for each button, you would have only a single block of code. VB would run this code when any of the buttons is clicked, without telling you which one it was. You can see how this would, to say the least, make building applications difficult.</p>
<p>
To get around this problem Netscape developed the concept of a <b>cookie</b>. A cookie is purely a small informational text string that is stored on the user's hard disk—we looked at them in some depth back in Chapter 2. </p>
<p class=indent>
Many people worry that cookies can be dangerous. While they can be used in all kinds of ways by server-based application, they pose no risk to you as a user. Cookies, as they are documented, will not format your disk, send back information about your system, or put you on a mailing list. Unfortunately they don't make the coffee either. </p>
<h2>Creating State with Cookies</h2>
<p>
Typically, when the client makes a request for a document from a specific virtual directory on a server (which can include the <b><code>wwwroot</code></b> directory), the server returns a cookie—or token of information. When the user returns to the same virtual directory, or one of its subdirectories the browser sends that cookie back, as part of the HTTP request. </p>
<p>
If we were building CGI-based applications, we would use the cookie information to check who the user was and collect other information regarding their interaction with our application. Working with cookies directly can be fun and interesting for about 30 seconds, and until you realize that you need to go home by five o'clock. As we saw in Chapter 2, ASP does make the task a lot easier through the <b><code>Cookies</code></b> collections of the <b><code>Request</code></b> and <b><code>Response</code></b> objects.</p>
<p>
However, the big advantage that the Active Server Pages framework provides is an automatic mechanism for maintaining state in our applications, without having to directly manipulate cookies ourselves—although ASP requires the browser to support and accept cookies in order to function properly. If the user refuses to accept cookies through settings in their browser's security options, or if their browser doesn't support cookies, this automated mechanism will fail.</p>
</BODY>
</HTML>

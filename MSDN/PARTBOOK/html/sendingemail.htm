<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sending Email</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<font face="verdana,arial,helvetica" size="2"><h1><a name="sendingemail"></a>Sending Email</h1>
<p>
To send email, we&#39;ll add a new item to the File menu: <b>Send email…</b>. There is already a <b>Send…</b> item in the File menu for sending files:</p>
<p>
<img src="img04_03.gif" border=0></p>
<p>
We change that to <b>Send email…</b> in the Menu Editor:</p>
<p>
<img src="img04_04.gif" border=0></p>
<p>
Now let&#39;s add the ability to send email to our program. Click the <b>Send email…</b> item to open its click event:</p>
<pre><code>Private Sub mnuFileSend_Click()
End Sub</code></pre>
<p>
We start by creating a MAPI session, as we did when we checked email:</p>
<pre><code>Private Sub mnuFileSend_Click()
&mdash;&gt; MAPISession1.SignOn
&mdash;&gt; If Err &lt;&gt; 0 Then
&mdash;&gt;     MsgBox "Logon Failure: " + Error$
&mdash;&gt; End If
     .
     .
     .
End Sub</code></pre>
<p>
Now we want to compose a new email message and send it. To do that, we will use the MAPIMessage1 control; the MAPISession1 control is used to establish an email session and to automatically download new email, and the MAPIMessages1 control is used to work with individual messages, including examining the text in incoming messages and composing new messages. To connect the MAPIMessages control to our new MAPI session, we load the MAPI session ID into the MAPIMessages SessionID property. We get the session ID from the MAPISession control&#39;s SessionID property:</p>
<pre><code>Private Sub mnuFileSend_Click()
    MAPISession1.SignOn
    If Err &lt;&gt; 0 Then</code></pre>
<p>
<b>MsgBox "Logon Failure: " + Error$</b></p>
<pre><code>End If
&mdash;&gt; MAPIMessages1.SessionID = MAPISession1.SessionID
        .
        .
        .
End Sub</code></pre>
<p>
Now the MAPIMessages1 control is connected to our MAPI session.</p>
<p>
The MAPIMessages control is an <i>indexed</i> control; its methods appear in Table 4.1, and its important properties appear in Table 4.2.</p>
<p>
<b>Table 4.1&nbsp;MAPIMessages Control Email Operations</b></p>
<table border=1 cols=3 frame=box rules=all>
<tr valign=top>
<td width=229><b>Do This</b></td>
<td width=157><b>Method</b></td>
<td width=302><b>Action Method Constant (Obsolete)</b></td>
</tr>
<tr valign=top>
<td width=229>Get email from Inbox</td>
<td width=157>Fetch</td>
<td width=302>MESSAGE_FETCH</td>
</tr>
<tr valign=top>
<td width=229>Send email with </td>
<td width=157>Send</td>
<td width=302>MESSAGE_SENDDLG</td>
</tr>
<tr valign=top>
<td width=229>&nbsp;Compose box</td>
<td width=157></td>
<td width=302></td>
</tr>
<tr valign=top>
<td width=229>Send email</td>
<td width=157>Send</td>
<td width=302>MESSAGE_SEND</td>
</tr>
<tr valign=top>
<td width=229>Save a message</td>
<td width=157>Save</td>
<td width=302>MESSAGE_SAVEMSG</td>
</tr>
<tr valign=top>
<td width=229>Copy message for reply </td>
<td width=157>Copy</td>
<td width=302>MESSAGE_COPY</td>
</tr>
<tr valign=top>
<td width=229>Compose email</td>
<td width=157>Compose</td>
<td width=302>MESSAGE_COMPOSE</td>
</tr>
<tr valign=top>
<td width=229>Reply to a message</td>
<td width=157>Reply</td>
<td width=302>MESSAGE_REPLY</td>
</tr>
<tr valign=top>
<td width=229>Reply to all messages</td>
<td width=157>ReplyAll</td>
<td width=302>MESSAGE_REPLYALL</td>
</tr>
<tr valign=top>
<td width=229>Forward a message</td>
<td width=157>Forward</td>
<td width=302>MESSAGE_FORWARD</td>
</tr>
<tr valign=top>
<td width=229>Delete a message</td>
<td width=157>Delete</td>
<td width=302>MESSAGE_DELETE</td>
</tr>
<tr valign=top>
<td width=229>Show address book</td>
<td width=157>Show</td>
<td width=302>MESSAGE_SHOWADBOOK</td>
</tr>
<tr valign=top>
<td width=229>Show message details</td>
<td width=157>Show</td>
<td width=302>MESSAGE_SHOWDETAILS</td>
</tr>
<tr valign=top>
<td width=229>Resolve recipient name</td>
<td width=157>ResolveName</td>
<td width=302>MESSAGE_RESOLVENAME</td>
</tr>
<tr valign=top>
<td width=229>Delete recipient</td>
<td width=157>Delete</td>
<td width=302>RECIPIENT_DELETE</td>
</tr>
<tr valign=top>
<td width=229>Delete attachment</td>
<td width=157>Delete</td>
<td width=302>ATTACHMENT_DELETE</td>
</tr>
</table><br>
<p>
<b>Table 4.2&nbsp;MAPIMessages Control Email Properties</b></p>
<table border=1 cols=2 frame=box rules=all>
<tr valign=top>
<td width=200><b>Property</b></td>
<td width=488><b>Does This</b></td>
</tr>
<tr valign=top>
<td width=200>Action Property</td>
<td width=488>Obsolete. Performs actions now performed by methods.</td>
</tr>
<tr valign=top>
<td width=200>AddressCaption</td>
<td width=488>Sets caption of the address book.</td>
</tr>
<tr valign=top>
<td width=200>AddressEditFieldCount</td>
<td width=488>Sets which address book edit controls to display.</td>
</tr>
<tr valign=top>
<td width=200>AddressLabel</td>
<td width=488>Sets appearance of &#34;To&#34; edit control in address book.</td>
</tr>
<tr valign=top>
<td width=200>AddressModifiable</td>
<td width=488>Sets whether address book can be modified by user.</td>
</tr>
<tr valign=top>
<td width=200>AttachmentCount</td>
<td width=488>Gets total number of attachments for current message.</td>
</tr>
<tr valign=top>
<td width=200>AttachmentIndex</td>
<td width=488>Set currently indexed attachment.</td>
</tr>
<tr valign=top>
<td width=200>AttachmentName</td>
<td width=488>Sets the name of the currently indexed attachment.</td>
</tr>
<tr valign=top>
<td width=200>AttachmentPathName</td>
<td width=488>Sets full path name of the currently indexed attachment.</td>
</tr>
<tr valign=top>
<td width=200>AttachmentPosition</td>
<td width=488>Sets position of indexed attachment in the message body.</td>
</tr>
<tr valign=top>
<td width=200>AttachmentType</td>
<td width=488>Sets type of currently indexed attachment.</td>
</tr>
<tr valign=top>
<td width=200>FetchSorted Property</td>
<td width=488>Sets message order when creating message set.</td>
</tr>
<tr valign=top>
<td width=200>MsgConversationID</td>
<td width=488>Sets the conversation thread identification value.</td>
</tr>
<tr valign=top>
<td width=200>MsgCount</td>
<td width=488>Gets the total number of messages in message set.</td>
</tr>
<tr valign=top>
<td width=200>MsgDateReceived</td>
<td width=488>Gets date on which current indexed message was received.</td>
</tr>
<tr valign=top>
<td width=200>MsgID</td>
<td width=488>Gets string identifier of current message.</td>
</tr>
<tr valign=top>
<td width=200>MsgIndex</td>
<td width=488>Sets index number of current message.</td>
</tr>
<tr valign=top>
<td width=200><b>MsgNoteText</b></td>
<td width=488><b>Text of current message.</b></td>
</tr>
<tr valign=top>
<td width=200>MsgOrigAddress</td>
<td width=488>Gets email address of originator of current message.</td>
</tr>
<tr valign=top>
<td width=200>MsgOrigDisplayName</td>
<td width=488>Gets originator&#39;s name for current message.</td>
</tr>
<tr valign=top>
<td width=200>MsgRead</td>
<td width=488>True or False depending on whether message has been read.</td>
</tr>
<tr valign=top>
<td width=200>MsgReceiptRequested</td>
<td width=488>Indicates if return receipt is requested for message.</td>
</tr>
<tr valign=top>
<td width=200>MsgSent</td>
<td width=488>Indicates if the message has been sent to mail server.</td>
</tr>
<tr valign=top>
<td width=200>MsgSubject</td>
<td width=488>Message&#39;s subject.</td>
</tr>
<tr valign=top>
<td width=200>MsgType</td>
<td width=488>Sets type of current message.</td>
</tr>
</table><br>
<p>
To get the messages in the Inbox, we use the MAPIMessage method Fetch. This creates a <i>message set</i> in the MAPIMessages control, and you can find out how many messages are in this set using the control&#39;s MsgCount property. Then you set the MAPIMessages control&#39;s MsgIndex property to point to the various messages in the message set. When a message is selected, you can examine it (and display it to the user) by using the various properties of the MAPIMessages control, such as the MsgOrigDisplayName property, which gives the name of the sender, or <i>originator</i>, of the message. You can get the email&#39;s subject from the MsgSubject property, the text of the message from the MsgNoteText property, and the date it was received from the MsgDateReceived property. In this way, you can work with the email messages in the computer&#39;s Inbox.</p>
<p>
The MAPIMessages control also has an Action property, and you can perform standard email operations by setting the Action property to predefined constants, as in Table 4.1. However, the Action property is now considered obsolete, and Microsoft recommends use of the MAPIMessages methods, such as Fetch, Compose, and so on.</p>
<p>
When we compose a new email message to send, that message is clearly not part of a message set, because it doesn&#39;t yet exist. For that reason, we set the MAPIMessages1 control&#39;s MsgIndex to &ndash;1 (this is necessary when you want to compose a new message):</p>
<pre><code>Private Sub mnuFileSend_Click()
    MAPISession1.SignOn
    If Err &lt;&gt; 0 Then
        MsgBox "Logon Failure: " + Error$
    End If
    MAPIMessages1.SessionID = MAPISession1.SessionID
&mdash;&gt; MAPIMessages1.MsgIndex = -1
        .
        .
        .
End Sub</code></pre>
<p>
To compose the new message, we use the MAPIMessages Compose method:</p>
<pre><code>Private Sub mnuFileSend_Click()
    MAPISession1.SignOn
    If Err &lt;&gt; 0 Then
        MsgBox "Logon Failure: " + Error$
    End If
    MAPIMessages1.SessionID = MAPISession1.SessionID
    MAPIMessages1.MsgIndex = -1
&mdash;&gt; MAPIMessages1.Compose
        .
        .
        .
End Sub</code></pre>
<p>
To let the user compose and send an email message, we use the Send method. This method takes an optional parameter that we can set to True or False (the default). Setting it to True places the Compose dialog box on the screen; leaving it False hides that box. We&#39;ll set the parameter to True:</p>
<pre><code>Private Sub mnuFileSend_Click()
    MAPISession1.SignOn
    If Err &lt;&gt; 0 Then
        MsgBox "Logon Failure: " + Error$
    End If
    MAPIMessages1.SessionID = MAPISession1.SessionID
    MAPIMessages1.MsgIndex = -1
    MAPIMessages1.Compose
&mdash;&gt; MAPIMessages1.Send True
        .
        .
        .
End Sub</code></pre>
<p>
The preceding code will place the Microsoft Exchange Compose dialog box on the screen:</p>
<p>
<img src="img04_05.gif" border=0></p>
<p>
The user then addresses and types the message and clicks the <b>Send</b> button, sending the message. All that&#39;s left is to sign off from the MAPI session using the MAPISession SignOff method:</p>
<pre><code>Private Sub mnuFileSend_Click()
    MAPISession1.SignOn
    If Err &lt;&gt; 0 Then
        MsgBox "Logon Failure: " + Error$
    End If
    MAPIMessages1.SessionID = MAPISession1.SessionID
    MAPIMessages1.MsgIndex = -1
    MAPIMessages1.Compose
    MAPIMessages1.Send True
&mdash;&gt; MAPISession1.SignOff
End Sub</code></pre>
<p>
Run eMailer and select the <b>Send email…</b> item in the File menu. The Microsoft Exchange Compose dialog box appears, as shown in Figure 4.2, and you can use it to send email.</p>
<p>
<img src="fig04-02.gif" border=0></p>
<p>
<b>Figure 4.2&nbsp;Composing and sending email.</b></p>
<p>
At this point, we can send and receive email. Our final goal for eMailer is to let the user register automatically through email with the click of the mouse.</p>
<h1></h1>
</font></BODY>
</HTML>

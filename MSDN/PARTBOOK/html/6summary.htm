<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Summary</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="6summary"></a>Summary</h1>
<p>
In this chapter, we've wandered across a lot of topics concerned with client/server applications, their design, and implementation. We've also talked about using the processing capabilities of modern browsers to spread the processing load, and minimize the network bandwidth our applications require.</p>
<p>
In this part of the book, you're going to be seeing a lot more on these and other related topics. Our aim is to change your way of thinking from being <i>server</i>-centric to <i>application</i>-centric. After all, if you look at all the best sites out there on the Web at the moment, it soon becomes obvious that they are very cleverly designed and constructed client/server applications. And for the internal office network, as you develop your own Intranet, this is the kind of technique that will offer you the fastest payback, and the optimum efficiency.</p>
<p>
The main points of this chapter are:</p>
<p>
Developing applications with Active Server Pages is a very different task to the traditional static Web sites we are used to seeing. We need to understand how <b>client/server</b> <b>theory</b> <b>and</b> <b>practice</b> are applied to our design and development efforts.</p>
<p>
By using <b>client-side</b> <b>programming</b> <b>techniques</b>, we can spread the processing load between the client and the server. We aim to place the <b>data</b> <b>capture</b> and <b>business</b> <b>rules</b> layers of the traditional client/server application model on the client wherever possible.</p>
<p>
To make client/server programming work on the Web, using HTTP, we take advantage of the <b>Application</b> and <b>Session</b> objects provided by ASP to preserve <b>state</b>. Unlike a traditional LAN-based application, this is the only way we can provide consistency over the network.</p>
<p>
Once we can maintain state in our application, we have ways of linking each phase of our application's environment to the appropriate client. The whole process is no longer <b>anonymous</b> like a traditional Web site.</p>
<p>
We need to understand the importance of <b>good</b> <b>application</b> <b>design</b> before we can create professional and efficient client/server applications. To help, we can take advantage of the many prewritten <b>components</b> available, or even create our own as required.</p>
<p>
So now, we're ready to look in more detail at the specifics of creating client/server applications. The next two chapters are dedicated to learning how we implement and integrate client-side processing with our server-based Active Server Pages.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Recordset Filters</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="usingrecordsetfilters"></a>Using Recordset Filters</h1>
<p>
At the risk of sounding repetitive, a <b><code>Recordset</code></b> object works with a result set of data. We can think of a result set as a table that is a subset of the original table from which the <b><code>Recordset</code></b> retrieved its data. Consider the need to retrieve further subsets of this result data. We have two options—either create a new <b><code>Recordset</code></b> with the additional filtering criteria, or apply the filtering criteria to the existing record set. </p>
<p>
Creating a new <b><code>Recordset</code></b> introduces a great deal of overhead and processing time, as well as the need to cache data that may be duplicated. To avoid this the <b><code>Recordset</code></b> object supplies a filtering method: <b><code>Filter</code></b>.</p>
<p>
A <b><code>Filter</code></b> can be a string that provides filtering information to the <b><code>Recordset</code></b>, or an array of bookmarks on specific records in the record set. Keep in mind however, that the ADO must do the filtering work itself, and incur the processing overhead it entails. With a large recordset, this overhead can exceed the effort of simply creating a new recordset. </p>
<p>
Let's take a look at how a string of filtering criteria might be applied. A <b>criteria</b> <b>string</b> is made up of values in the form <i>FieldName<b> </b>Operator<b> </b>Value<b> </b></i>(for example, <b><code>"LastName</code></b> <b><code>=</code></b> <b><code>'Smith'"</code></b>). We can create compound clauses by joining individual clauses with <b><code>AND</code></b> (for example, <b><code>"LastName</code></b> <b><code>=</code></b> <b><code>'Smith'</code></b> <b><code>AND</code></b> <b><code>FirstName</code></b> <b><code>=</code></b> <b><code>'John'"</code></b>). The following lists some guidelines for creating filter strings:</p>
<ul type=disc>
<li>
<i>FieldName</i> must be a valid field name from the <b><code>Recordset</code></b>. If the field name contains spaces, we must enclose the name in square brackets.<br><br></li>
<li>
<i>Operator</i> must be one of the following: <b><code>&lt;</code></b>, <b><code>&gt;</code></b>, <b><code>&lt;=</code></b>, <b><code>&gt;=</code></b>, <b><code>&lt;&gt;</code></b>, <b><code>=</code></b>, <b><code>LIKE</code></b>.<br><br></li>
<li>
<i>Value</i> is the value with which we will compare the field's values (for example, <b><code>'Smith'</code></b>, <b><code>#8/24/95#</code></b>, <b><code>12.345</code></b> or <b><code>$50.00</code></b>). Use single quotes with strings and hash signs (<b><code>#</code></b>) with dates. For numbers, we can use decimal points, dollar signs, and scientific notation. If <b><i><code>Operator</code></i></b> is <b><code>LIKE</code></b>, <b><i><code>Value</code></i></b> can include wildcards. Only the asterisk (<b><code>*</code></b>) and percent sign (<b><code>%</code></b>) wild cards are allowed, and they must be the last character in the string. <b><i><code>Value</code></i></b> may not be <b><code>Null</code></b>.</li>
</ul>
<p>
The filter property also allows us to supply a number of constants that effect the way in which the filter is applied to the data, and the results it produces. The constants that can be applied are:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=blue width=180><b>Constant</b></td>
<td class=blue width=74><b>Value</b></td>
<td class=blue width=492><b>Description</b></td>
</tr>
<tr valign=top>
<td width=180><b><code>adFilterNone</code></b></td>
<td width=74><b><code>0</code></b></td>
<td width=492>Removes the current filter and restores all records to view.</td>
</tr>
<tr valign=top>
<td width=180><b><code>adFilterPendingRecords</code></b></td>
<td width=74><b><code>1</code></b></td>
<td width=492>Allows you to view only records that have changed but have not yet been sent to the server. Only applicable for the batch update mode.</td>
</tr>
<tr valign=top>
<td width=180><b><code>adFilterAffectedRecords</code></b></td>
<td width=74><b><code>2</code></b></td>
<td width=492>Allows you to view only records affected by the last <b><code>Delete</code></b>, <b><code>Resync</code></b>, <b><code>UpdateBatch</code></b>, or <b><code>CancelBatch</code></b> call.</td>
</tr>
<tr valign=top>
<td width=180><b><code>adFilterFetchedRecords</code></b></td>
<td width=74><b><code>3</code></b></td>
<td width=492>Allows you to view records in the current cache, that is, the results of the last fetch from the database.</td>
</tr>
</table>
</BODY>
</HTML>

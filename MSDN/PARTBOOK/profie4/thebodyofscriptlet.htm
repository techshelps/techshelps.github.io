<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Body of a Scriptlet</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="thebodyofscriptlet"></a>The Body of a Scriptlet</h1>
<p>
Since a Scriptlet is ultimately an HTML page, we can view it through any browser – though what we actually see won't be interesting in most cases. In other words, not all the Scriptlets are self-initialized and display something useful without being scripted. If we have a component that displays a user-specified text string in a particular fashion, we need to provide that text string before using the Scriptlet. Thus, outside its host site, it will probably show a default string which might be empty or contain copyright information.</p>
<p>
The body can include images, links, lines, text, and even ActiveX controls, applets, sounds, and anything else. It represents the user interface of the module, and includes the constituent elements on which the script code within the Scriptlet will act. The actual body may be defined at design-time, or created dynamically depending on what we really need to do.</p>
<p>
For example, if we want a dynamic text string to become a Scriptlet, we might want to have a body like this:</p>
<pre><code>&lt;body&gt;
  &lt;span id="text"&gt; Change this text at runtime through a property. &lt;/span&gt;
&lt;/body&gt;</code></pre>
<p>
We change the actual text using an exposed attribute that ends up setting the <b><code>outerText</code></b> property of the given element. The following VBScript code that does just that:</p>
<pre><code>Sub DoSetText( sText ) 
  Set coll = document.all.tags("SPAN")
  coll.item(0).outerText = sText 
End Sub</code></pre>
<p>
Alternately, we could also have an empty body which will be filled when needed with an HTML string:</p>
<pre><code>&lt;body&gt;
&lt;/body&gt;</code></pre>
<pre><code>Sub DoSetText(sText) 
  sPrefix = "&lt;span id=text&gt;"
  sSuffix = &lt;/span&gt; 
  sHtmlText = sPrefix + sText + sSuffix 
  Set coll = document.all.tags("SPAN")
  if coll.length &gt; 0 then
    coll.item(0).outerHtml = sHtmlText 
  else
    document.body.insertAdjacentHTML "AfterBegin", sHtmlText
  end if
End Sub</code></pre>
<p>
In the above sample, we insert a new <b><code>SPAN</code></b> element if one does not exist, or change the existing one if it is already there. </p>
</BODY>
</HTML>

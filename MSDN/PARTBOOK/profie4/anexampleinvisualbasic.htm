<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>An Example in Visual Basic</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="anexampleinvisualbasic"></a>An Example in Visual Basic</h1>
<p>
This example uses the Clock Scriptlet component we created earlier in the chapter, within a normal Visual Basic application—and proves that our Scriptlets can behave just like ordinary ActiveX controls. In Design view, the VB window looks like this. You can see the Scriptlets control in the Toolbox, and the Clock component on the Form: </p>
<p>
<img src="0707_14_41.gif" border=0></p>
<p class=indent>
The source code for this project is in the <b><code>Scriptlets/Vbslet</code></b> folder of the samples that you can download from our Web site at <b><code>http://rapid.wrox.co.uk/books/0707</code></b>. </p>
<p>
What we need to do is 
<ul type=disc>
<li>
Insert the Scriptlet ActiveX control <br><br></li>
<li>
Assign it an area (or site) on the form. <br><br></li>
<li>
Set the <b><code>URL</code></b> name in the Properties dialog<br><br></li>
<li>
Type in some code to handle the <b><code>onReadyStateChange</code></b> event<br><br></li>
<li>
Initialize the Scriptlet as required<br><br></li>
<li>
Add the various controls to the Form, such as buttons, list boxes, textboxes, etc<br><br></li>
<li>
Write the rest of the code to link the Form controls and the Scriptlet together</li>
</ul>
<p>
If the Scriptlet requires code to be run when it loads, we do this in the <b><code>onReadyStateChange</code></b> event rather than in the <b><code>Form_Load</code></b> event. Until the control's <b><code>readyState</code></b> property is equal to <b><code>4</code></b> (i.e. loading is complete), it's unsafe to execute code within the Scriptlet because is in an inconsistent state.</p>
<p>
The next screenshot shows the final application running, and you'll recognize the Clock component:</p>
<p>
<img src="0707_14_42.gif" border=0></p>
<p>
The application behaves like the Clock HTML page we saw earlier. In particular, it contains a button that sets an alarm in seconds, and changes the background color of the corresponding textbox to emphasize this. We multiply by 1000 since the Clock component's method expects its input in milliseconds:</p>
<pre><code>Scriptlet1.Alarm (Val(Text1.Text) * 1000)
Text1.BackColor = &amp;HC0C0C0</code></pre>
<p>
The alarm originates regular events that are handled in <b><code>onScriptletEvent</code></b> within the VB code:</p>
<pre><code>Sub Scriptlet1_onscriptletevent(ByVal name As String, ByVal eventData As Variant)
  If name = "OnAlarm" Then
    Scriptlet1.FgColor = "red"
    Beep
    res = MsgBox("Would you stop the alarm?", _
          vbExclamation Or vbYesNo, "Clock Alarm!")
    If res = vbYes Then
       Scriptlet1.Alarm 0
       Text1.BackColor = &amp;HFFFFFF
    End If
    Scriptlet1.FgColor = "lightgreen"
  End If
End Sub</code></pre>
<p>
In addition, the application shows the current location of the Scriptlet, and allows you to stop the clock and set a label. </p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>More Style Sheet Features</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="morestylesheetfeatures"></a>More Style Sheet Features</h1>
<p>
We've already established how useful style information is to designing HTML pages, and we've talked about a multiplicity of different ways to add style information to a page.  We're now going to cover two additional and very useful features of specifying style information.</p>
<h2>Simple Inheritance</h2>
<p>
Tags enclosed in other tags inherit the settings of the outer tags.  You might have seen this phenomenon if you've experimented much with style sheets, although you might not have recognized it as such.</p>
<p>
For example, suppose we've defined the <b><code>&lt;H1&gt;</code></b> style like this:</p>
<pre><code>H1 {font-size:48; font-family:Arial}</code></pre>
<p>
In the course of writing the HTML for the page that uses this style we use an <b><code>&lt;EM&gt;</code></b> tag <b>inside</b> a <b><code>&lt;H1&gt;</code></b> block:</p>
<pre><code>&lt;H1&gt;Here's my &lt;EM&gt;important&lt;/EM&gt; heading&lt;/H1&gt;</code></pre>
<p>
We wouldn't be very happy if the word <b><code>important</code></b> reverted to some other style, such as the body text style. However, because embedded tags inherit the style properties of the tags enclosing them, the text inside the <b><code>&lt;EM&gt;</code></b> tag is rendered as bold in 48 point Arial – because it's enclosed in an <b><code>&lt;H1&gt;</code></b> tag.</p>
<p>
It is important to know that the <b><code>&lt;EM&gt;</code></b> tag will only inherit the properties of the <b><code>&lt;H1&gt; </code></b>tag if it hasn't already had its own style defined. If you think about this approach you'll see that it makes a lot of sense. In effect, the style sheet engine standardizes everything that you do not specifically define. This works well in practice – as you'll see when you start writing HTML pages that use style sheets heavily.</p>
<h2>Contextual Selectors</h2>
<p>
But this isn't all there is to inheritance!  Style sheets even give us the ability to specify that certain instances of certain tags should look a specific way. If we've set all <b><code>&lt;H1&gt;</code></b> tags to the color green and all <b><code>&lt;EM&gt;</code></b> tags to yellow, we can use what is known as a contextual selector (because the selector depends on the context it's used in) to stipulate additional behavior for a given tag.</p>
<p>
With the two declarations above, an <b><code>&lt;EM&gt;</code></b> tag inside of a <b><code>&lt;H1&gt;</code></b> tag would be rendered as yellow. However, with the following simple declaration we can require that all <b><code>&lt;EM&gt;</code></b> tags inside <b><code>&lt;H1&gt;</code></b> tags be colored purple instead:</p>
<pre><code>H1 EM {color:purple}</code></pre>
<p>
This declaration only affects <b><code>&lt;EM&gt;</code></b> tags inside <b><code>&lt;H1&gt;</code></b> - it leaves every other combination alone.</p>
<h2>Classes</h2>
<p>
Another interesting kind of syntax we're going to cover here is known as a style sheet <b>class</b>. This technique allows us to assign names to modifications of basic styles and then use them in much the same way we would use a normal style.</p>
<p>
Suppose we usually would like our first level headings to be displayed in black 24 point Arial type. From our previous discussions we know that we can accomplish this with the style sheet declaration of:</p>
<pre><code>H1 {font-family:Arial; font-size:24pt; color:black}</code></pre>
<p>
Now further suppose that occasionally we'd like the <b><code>&lt;H1&gt;</code></b> tag to take on a slightly different appearance – maybe we want it to be a larger point size, but in all other respects we'd like it to remain the same. Using a class in our style sheet declarations, we can accomplish this easily:</p>
<pre><code>H1.second {font-size:48pt}:</code></pre>
<p>
Now we can use both the original declaration and the subclass in our HTML:</p>
<pre><code>&lt;H1&gt;First heading&lt;/H1&gt;
&lt;H1 CLASS="second"&gt;First large point heading&lt;/H1&gt;</code></pre>
<p>
Another way to accomplish this task would be to use an in-line <b><code>&lt;STYLE&gt;</code></b> tag for each heading that we wanted to appear red:</p>
<pre><code>&lt;H1 STYLE="font-size:48pt"&gt;Another large point heading&lt;/H1&gt;</code></pre>
<p>
As we'll see shortly when we talk about how properties take precedence over each other, the large point size specified in the heading tag itself will override the other <b><code>font-size</code></b> specified in the top-level set of styles.</p>
</BODY>
</HTML>

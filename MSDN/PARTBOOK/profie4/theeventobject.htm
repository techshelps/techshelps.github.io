<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Event Object</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="theeventobject"></a>The Event Object</h1>
<p>
The <b><code>event</code></b> object is a subsidiary object of <b><code>window</code></b>, but we won't spend too much time covering it here. Instead, we'll wait for chapter 5 when we talk more about scripting, as this is when the properties will come in to use – in conjunction with the events that have been triggered by the browser and identified in the scripting code. </p>
<p>
The objects we've talked about so far generally have reflected concrete parts of the window or browser. Many of them can't even be changed, and they're all around at all times for querying if not modifying. The <b><code>event</code></b> object, in contrast, is a much more ephemeral beast. It furnishes specific information about the event last fired by the browser and can and will be very different from one instant to the next. The different properties of event tell things like the state of the <i>Ctrl</i>, <i>Alt</i>, and <i>Shift</i> keys when the event was first fired, whether or not any mouse buttons were pressed, and so on.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=866>
<tr valign=top>
<td class=blue width=14%><b>Property</b></td>
<td class=blue width=86%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=14%><b><code>altKey</code></b></td>
<td width=86%>The state of the <i>Alt</i> key</td>
</tr>
<tr valign=top>
<td width=14%><b><code>button</code></b></td>
<td width=86%>The mouse button(s), if any, that was (were) pressed to fire the event</td>
</tr>
<tr valign=top>
<td width=14%><b><code>cancelBubble</code></b></td>
<td width=86%>Stops the current event from bubbling up the hierarchy</td>
</tr>
<tr valign=top>
<td width=14%><b><code>clientX</code></b></td>
<td width=86%>The x coordinate of an element, excluding borders, margins, scrollbars etc</td>
</tr>
<tr valign=top>
<td width=14%><b><code>clientY</code></b></td>
<td width=86%>The y coordinate of an element, excluding borders, margins, scrollbars etc</td>
</tr>
<tr valign=top>
<td width=14%><b><code>ctrlKey</code></b></td>
<td width=86%>The state of the <i>Ctrl</i> key</td>
</tr>
<tr valign=top>
<td width=14%><b><code>fromElement</code></b></td>
<td width=86%>Specifies the element being moved from (for <b><code>onmouseover</code></b> and <b><code>onmouseout</code></b> events)</td>
</tr>
<tr valign=top>
<td width=14%><b><code>keyCode</code></b></td>
<td width=86%>ASCII code of the key being pressed (if a key has been pressed)</td>
</tr>
<tr valign=top>
<td width=14%><b><code>offsetX</code></b></td>
<td width=86%>the x coordinate of the mouse pointer when an event occurs, relative to the containing element</td>
</tr>
<tr valign=top>
<td width=14%><b><code>offsetY</code></b></td>
<td width=86%>The y coordinate of the mouse pointer when an event occurs, relative to the containing element</td>
</tr>
<tr valign=top>
<td width=14%><b><code>returnValue</code></b></td>
<td width=86%>Sets the return value for the event</td>
</tr>
<tr valign=top>
<td width=14%><b><code>screenX</code></b></td>
<td width=86%>The x coordinate of the mouse pointer when an event occurs, relative to the screen</td>
</tr>
<tr valign=top>
<td width=14%><b><code>screenY</code></b></td>
<td width=86%>The y coordinate of the mouse pointer when an event occurs, relative to the screen</td>
</tr>
<tr valign=top>
<td width=14%><b><code>shiftKey</code></b></td>
<td width=86%>The state of the <i>Shift</i> key</td>
</tr>
<tr valign=top>
<td width=14%><b><code>srcElement</code></b></td>
<td width=86%>The deepest element that the event occurred over</td>
</tr>
<tr valign=top>
<td width=14%><b><code>srcFilter</code></b></td>
<td width=86%>Specifies the filter that caused the element to produce an <b><code>onfilterchange</code></b> event</td>
</tr>
<tr valign=top>
<td width=14%><b><code>toElement</code></b></td>
<td width=86%>Specifies the element being moved to (for <b><code>onmouseover</code></b> and <b><code>onmouseout</code></b> events)</td>
</tr>
<tr valign=top>
<td width=14%><b><code>type</code></b></td>
<td width=86%>Returns the name of the event as a string, without the <b><code>on</code></b> prefix, such as <b><code>mouseover</code></b> instead of <b><code>onmouseover</code></b></td>
</tr>
<tr valign=top>
<td width=14%><b><code>x</code></b></td>
<td width=86%>The horizontal position of the mouse in window coordinates (pixels)</td>
</tr>
<tr valign=top>
<td width=14%><b><code>y</code></b></td>
<td width=86%>The vertical position of the mouse in window coordinates (pixels)</td>
</tr>
</table><br>
<p>
This object is extremely useful when we write script code and perform exotic sounding things like 'event-bubbling', however we'll avoid discussing any of the properties until chapter 5 of this book, as you'll need to understand how events can be caught by your scripting code first.</p>
</BODY>
</HTML>

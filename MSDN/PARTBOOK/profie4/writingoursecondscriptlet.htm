<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing Our Second Scriptlet</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="writingoursecondscriptlet"></a>Writing Our Second Scriptlet</h1>
<p>
By now, you should have grasped the idea of what Scriptlets are, and how to write them. It's time to design and code a sample which is a little more complex. What we have in mind is a Clock object that you can put in all your pages as a reminder of time passing. A digital clock is made up of three components: hours, minutes and seconds. We can render it using a simple text string that needs formatting each time it is updated, or we can use a small table that keeps the various logical parts of the time separate. A very simple HTML table can be defined like this:</p>
<pre><code>&lt;TABLE&gt;
  &lt;TR&gt;
    &lt;TD VALIGN="TOP" ALIGN="CENTER"&gt;0&lt;/TD&gt;
    &lt;TD VALIGN="TOP" ALIGN="CENTER"&gt;0&lt;/TD&gt;
    &lt;TD VALIGN="TOP" ALIGN="CENTER"&gt;0&lt;/TD&gt;
  &lt;/TR&gt;
&lt;/TABLE&gt;</code></pre>
<p>
All the tags (<b><code>TABLE</code></b>, <b><code>TR</code></b>, <b><code>TD</code></b>) expose lots of attributes that set the formatting and layout of the table, but for our purposes they can all be ignored. However, a better approach would be to make them properties of the Clock Scriptlet. This sounds reasonable—especially for <b><code>BORDER</code></b> and <b><code>CELLSPACING</code></b> attributes.</p>
<p>
A clock is a self-initialized component, so it doesn't need specific initialization code to work properly. If you open this Scriptlet in a browser you're able to use it straight away. Once more, this demonstrates that a Scriptlet is an HTML page that runs inside another HTML page: </p>
<p>
<img src="0707_14_32.gif" border=0></p>
<p class=indent>
The final 'extended' version of this page, which you'll meet later in the chapter, can be run or download from our Web site at <b><code>http://rapid.wrox.co.uk/books/0707</code></b>.</p>
<h2>Coding the Clock Scriptlet</h2>
<p>
Our HTML clock component will exploit the <b><code>setInterval</code></b> and <b><code>clearInterval</code></b> methods of the <b><code>window</code></b> object. We just need to provide a function to stop and restart it, and some events. Here's the complete source code:   </p>
<pre><code>&lt;HTML id=MyPage&gt;
&lt;TITLE&gt;Clock Scriptlet&lt;/TITLE&gt;

&lt;script language="VBscript" for="window" event="onload"&gt;
    InitClock
&lt;/script&gt;

&lt;script language="VBscript"&gt;
 
Sub InitClock
  DoSetColor mBgColor, mFgColor 
  DoUpdateClock
  if InScriptlet then
    window.external.selectableContent = True
  end if
  if mEnabled then
    mTimer = window.setInterval("DoUpdateClock", 1000)
    mStartedAt = Time
  end if
End Sub
 
Sub DoSetColor(b, f)
  Set coll = document.all.tags("TABLE")  
  coll.item(0).style.backgroundColor = b
  coll.item(0).style.Color = f
  coll.item(0).style.fontFamily = "Tahoma"
End Sub
 
Sub DoUpdateClock
  t = Time
  mHour = Hour(t)
  mMins = Minute(t)
  mSecs = Second(t)  
  set coll = document.all.tags("TD")
  coll.item(0).innerHTML = Right("00"+CStr(mHour),2) + ":"
  coll.item(1).innerHTML = Right("00"+CStr(mMins),2) + ":"
  coll.item(2).innerHTML = Right("00"+CStr(mSecs),2) 
End Sub
 
Function DoFormatTime
  s = FormatDateTime(Time(), vbLongTime)
  DoFormatTime = s
End Function 
 
Function DoGetTime
  DoGetTime = Time
End Function 
 
Function DoAlarm
  if (InScriptlet And (Not window.external.frozen)) then
     window.external.raiseEvent "OnAlarm", window.document 
  end if 
End Function
&lt;/script&gt;

&lt;script language="JavaScript"&gt;
public_description = New CreateClock();  <b>// declare the interface</b>
var InScriptlet = (typeOf (window.external.version) == "string");

mBgColor = "gray";
mFgColor = "white";
mEnabled = 1;
mTimer = 0;
mStartedAt = 0;
mAlarm = 0;
 
function CreateClock() {
  this.put_Text = put_Text;
  this.get_Time = get_Time;
  this.get_StartedAt = get_StartedAt;
  this.put_ClockBgColor = put_ClockBgColor;
  this.put_FgColor = put_FgColor;
  this.get_FgColor = get_FgColor;
  this.put_BgColor = put_BgColor;
  this.get_BgColor = get_BgColor;
  this.Enable = Enable;
  this.Alarm = Alarm;
  this.event_OnStart = "";
  this.event_OnStop = "";
  this.event_OnAlarm = "";
}
 
function put_ClockBgColor(color) {
  document.bgColor = color;
  return 1;
}
 
function put_Text(sText) {
  document.all("Text1").innerHTML = sText;
  return 1;
}
 
function get_Time() {
  return DoFormatTime();
}
 
function get_StartedAt() {
  return mStartedAt;
}
 
function put_ForeColor( color ) {
  mFgColor = color;
  DoSetColor(mBgColor, mFgColor);
  return 1;
}

function get_ForeColor() {
  return mFgColor;
}

function put_BackColor(color) {
  mBgColor = color;
  DoSetColor(mBgColor, mFgColor);
  return 1;
}
function get_BackColor() {
  return mBgColor;
}

function Enable(b) {
  mEnabled = b; 
  if (b) {
    mTimer = window.setInterval("DoUpdateClock", 1000);
    if (InScriptlet) and (not window.external.frozen)) {
       window.external.raiseEvent("OnStart", 0);
       mStartedAt = DoGetTime();
    }
  }
  else {
    window.clearInterval(mTimer);
    Alarm(0);
    if (InScriptlet and (not window.external.frozen)) {
       window.external.raiseEvent("OnStop", 0);
    }
  }
  return 1;
}

function Alarm(secs) {
  if (secs) {
    mSnooze = window.setInterval("DoAlarm", secs); 
  }
  else {
    window.clearInterval(mAlarm);
  }
  return 1;
}
&lt;/script&gt;

&lt;BODY&gt;
&lt;TABLE&gt;
&lt;TR&gt;
   &lt;TD VALIGN="TOP" ALIGN="CENTER"&gt;0&lt;/TD&gt;
   &lt;TD VALIGN="TOP" ALIGN="CENTER"&gt;0&lt;/TD&gt;
   &lt;TD VALIGN="TOP" ALIGN="CENTER"&gt;0&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<h3>The Clock Interface Definition</h3>
<p>
The public interface of the Scriptlet exposes the following properties, methods and events:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=674>
<tr valign=top>
<td class=blue width=21%><b>Name</b></td>
<td class=blue width=79%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=21%><b><code>FgColor</code></b></td>
<td width=79%>Sets and gets the foreground color of the clock, i.e. color of the digits.</td>
</tr>
<tr valign=top>
<td width=21%><b><code>BgColor</code></b></td>
<td width=79%>Sets and gets the background color of the clock area. </td>
</tr>
<tr valign=top>
<td width=21%><b><code>ClockBgColor</code></b></td>
<td width=79%>Sets the background color of the Scriptlet area. </td>
</tr>
<tr valign=top>
<td width=21%><b><code>Time</code></b></td>
<td width=79%>Returns the current time formatted accordingly to the user settings.</td>
</tr>
<tr valign=top>
<td width=21%><b><code>StartedAt</code></b></td>
<td width=79%>Returns the last time when the clock Scriptlet was started.</td>
</tr>
<tr valign=top>
<td width=21%><b><code>Text</code></b></td>
<td width=79%>Sets the text to be displayed below the clock.  </td>
</tr>
<tr valign=top>
<td width=21%><b><code>Enable(state)</code></b></td>
<td width=79%>A method that disables and enables the clock causing it to stop and go.</td>
</tr>
<tr valign=top>
<td width=21%><b><code>Alarm(secs)</code></b></td>
<td width=79%>A method that sets up an alarm to raise an <b><code>onAlarm</code></b> event every given number of milliseconds.</td>
</tr>
<tr valign=top>
<td width=21%><b><code>onStop</code></b></td>
<td width=79%>This event is fired each time the clock gets disabled.</td>
</tr>
<tr valign=top>
<td width=21%><b><code>onStart</code></b></td>
<td width=79%>This event is fired each time the clock is started.</td>
</tr>
<tr valign=top>
<td width=21%><b><code>onAlarm</code></b></td>
<td width=79%>This event signals that the given period is expired.</td>
</tr>
</table><br>
<p>
The <b><code>Time</code></b> property is read-only, and returns the current time. It makes use of the current user's format settings for the date and time with VBScript's <b><code>FormatDateTime</code></b> function. <b><code>FgColor</code></b> and <b><code>BgColor</code></b> define the color of the text and the clock background—by default, we have white text on a gray background. <b><code>StartedAt</code></b> has a secondary role, and its only purpose is to enrich the Scriptlet's interface. <b><code>ClockBgColor</code></b> is a write-only property assigned to the background color of the entire site area, which is usually darker than the clock itself. </p>
<p>
<b><code>Text</code></b> is another write-only property that contains the text string we might want to associate with the clock. This text is the body of a <b><code>SPAN</code></b> tag with an <b><code>ID</code></b> of <b><code>Text1</code></b>. Since this is implemented via the element's <b><code>innerHTML</code></b> property, we can assign it text containing HTML tags as well, and be sure it will be correctly handled. This provides us with the opportunity to format the text, be it in italic or bold font, or to include images, links, etc. For instance:</p>
<pre><code>Clock1.Text = "Current Time offered by &lt;i&gt;WROX Press&lt;/i&gt;"</code></pre>
<p>
The final property, <b><code>Enable</code></b>, is at the core of the component. It accepts a Boolean value, and starts or stops the clock. </p>
<h3>Updating the Time</h3>
<p>
All the updates of the clock are controlled by the <b><code>setInterval</code></b> method of the <b><code>window</code></b> object:</p>
<pre><code>mTimer = window.setInterval("DoUpdateClock", 1000);</code></pre>
<p>
The <b><code>setInterval</code></b> method takes a string denoting the script code to be executed each time the given interval expires, and an interval period expressed in milliseconds. The code above causes the <b><code>DoUpdateClock</code></b> procedure to be called once every second. As you might guess, <b><code>DoUpdateClock</code></b> just refreshes the table representing the digital clock. First it obtains the current time in terms of hours, minutes and seconds. Then it sets the <b><code>innerHTML</code></b> properties of the three <b><code>TD</code></b> elements:</p>
<pre><code>Sub DoUpdateClock
  t = Time
  mHour = Hour(t)
  mMins = Minute(t)
  mSecs = Second(t)
  set coll = document.all.tags("TD")
  coll.item(0).innerHTML = Right("00"+CStr(mHour),2) + ":"
  coll.item(1).innerHTML = Right("00"+CStr(mMins),2) + ":"
  coll.item(2).innerHTML = Right("00"+CStr(mSecs),2) 
End Sub</code></pre>
<h3>Stopping the Clock</h3>
<p>
The <b><code>setInterval</code></b> method returns a unique identifier for the timer is starts running, and we saved this in a variable <b><code>mTimer</code></b>. To stop the clock, we just pass this variable to the <b><code>window</code></b> object's <b><code>clearInterval</code></b> method:</p>
<pre><code>window.clearInterval(mTimer);</code></pre>
<p>
The <b><code>onStop</code></b> and <b><code>onStart</code></b> events are fired after the clock has been stopped and restarted. The <b><code>onStart</code></b> event isn't raised when the Scriptlet is loading for the first time. As you have seen in our earlier discussions, the event declarations are not really required for the Scriptlet to work. The host page will always receive <b><code>onScriptletEvent</code></b> events, whatever the actual event the component raises with the <b><code>raiseEvent</code></b> method. However, we've included the event declarations simply to document the Scriptlet's interface.</p>
<h2>Hosting the Clock Component</h2>
<p>
A sample page that hosts our Clock component might look like this:</p>
<p>
<img src="0707_14_33.gif" border=0></p>
<p>
Here's the code for the complete page, including the <b><code>&lt;OBJECT&gt;</code></b> tags that insert the Clock Scriptlet:</p>
<pre><code>&lt;html&gt;
&lt;title&gt;Test page using Clock&lt;/title&gt;
&lt;b&gt;Test page using Clock&lt;/b&gt;

&lt;SCRIPT LANGUAGE="VBScript" FOR="window" EVENT="onload"&gt;
  Clock1.BgColor = "lightblue"
  Clock1.FgColor = "blue"
  Clock1.Alarm 5000 
&lt;/SCRIPT&gt;

&lt;SCRIPT LANGUAGE="VBScript" FOR="Clock1" EVENT="onscriptletevent(n,o)"&gt;
  if n = "onStart" then
    MsgBox "Current time is " + Clock1.Time
  end if
  if n = "onStop" then
    MsgBox  "Started at " + CStr(Clock1.StartedAt)
  end if
  if n = "onAlarm" then
    CRLF = Chr(13) + Chr(10)
    sMsg = "Alarm " + Clock1.Time + CRLF + "Continue?"
    i = MsgBox(sMsg, vbYesNo, "Clock")
    if i = vbNo then Clock1.Alarm 0     
  end if
&lt;/SCRIPT&gt;

&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub Button1_Click()
  if Button1.Caption = "Stop" Then
    Clock1.Enable(0)
    Button1.Caption = "Start"
  else
    Clock1.Enable(1)
    Button1.Caption = "Stop"
  end if
End Sub
&lt;/SCRIPT&gt;

&lt;p&gt;
&lt;OBJECT ID="Clock1" WIDTH=100 HEIGHT=70 align="bottom" 
  type="text/x-scriptlet" DATA="clock.htm"&gt;
&lt;/OBJECT&gt;
&lt;/p&gt;

&lt;OBJECT ID="Button1" WIDTH=96 HEIGHT=32
   CLASSID="CLSID:D7053240-CE69-11CD-A777-00DD01143C57"&gt;
   &lt;PARAM NAME="Caption" VALUE="Stop"&gt;
&lt;/OBJECT&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>
During the <b><code>onload</code></b> event it assigns the clock colors. By clicking on the button you can stop or restart the clock. </p>
<h2>Adding an Alarm to the Clock Container Page</h2>
<p>
Our clock page as it stands doesn't do very much, so we've added a function that simulates an alarm-clock. We can use several of the other methods and events that our Clock component has built into it. By assigning an interval in milliseconds using the <b><code>Alarm</code></b> method, like this:</p>
<pre><code>Clock1.Alarm 5000 </code></pre>
<p>
we are notified of a specific <b><code>onAlarm</code></b> event after that period expires (in this case, 5 seconds). Our Clock component provides this custom event via the <b><code>onScriptletEvent</code></b> in the container page. The <b><code>Alarm</code></b> method works by setting an interval:</p>
<pre><code>function Alarm(secs) {
  if (secs) 
    mAlarm = window.setInterval("DoAlarm", secs); 
  else 
    window.clearInterval(mAlarm);
  return 1;
}</code></pre>
<p>
To cancel the alarm, we simply pass zero to the Alarm method, which clears the interval timer. When that interval is up, the <b><code>DoAlarm</code></b> routine in our component is executed. This routine raises an event that can be detected in our page:</p>
<pre><code>Function DoAlarm
  if (InScriptlet And (Not window.external.frozen)) then
     window.external.raiseEvent "onAlarm", window.document 
  end if 
End Function</code></pre>
<p>
Notice that our code checks both that we are actually running the component as a Scriptlet, and that the container page is ready to receive events, first. </p>
<p>
<img src="0707_14_34.gif" border=0></p>
</BODY>
</HTML>

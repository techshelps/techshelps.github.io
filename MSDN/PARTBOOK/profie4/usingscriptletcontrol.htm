<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Scriptlet Control</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="usingscriptletcontrol"></a>Using the Scriptlet Control</h1>
<p>
In Visual Basic or MFC applications, you use the same Clock and the ScrollImage Scriptlets we saw earlier, as ActiveX controls. The only real difference is that in MFC applications—like JavaScript and JScript—the property and method names are case sensitive. Let's see what the control has to offer to programmers.</p>
<p>
<img src="0707_14_40.gif" border=0></p>
<p>
The illustration above shows how the Scriptlet Control presents itself from within the Visual Basic 5 Object Browser. The <b><code>embed</code></b> property isn't implemented yet, and <b><code>event</code></b> points to an object that hangs off the scriptlet control, and describes the events that occur in much the same way as IE4's <b><code>window.event</code></b> object. The <b><code>scrollbar</code></b> property plays the role we discussed earlier, when talking about the ambient properties that a Scriptlet document can inherit from its container. A few words, however, must be said about the <b><code>readyState</code></b> property.</p>
<h2>Managing 'State Readiness' in Scriptlets</h2>
<p>
Making calls from an application into an object before it is declared to be ready is dangerously unsafe. If we're unlucky, it's easy to get a system error due to un-handled page faults. In other cases, our commands are simply ignored. The Scriplet container's read-only <b><code>readyState</code></b> property indicates the state of the Scriptlet HTML page. While IE 4 traps all exceptions, checking for the correct <b><code>readyState</code></b> becomes a must when using Scriptlets (and all Dynamic HTML-based code) from within a desktop environment. </p>
<p>
An object passes through different states: <b><code>uninitialized</code></b>, <b><code>loading</code></b>, <b><code>complete</code></b>. Each time the property <b><code>readyState</code></b> changes, the container is notified with an <b><code>onReadyStateChange</code></b> event. Usually this event is fired multiple times while the Scriptlet is loading. The final time it denotes that the Scriptlet HTML page is fully loaded and we can start invoking script code safely:</p>
<pre><code>Sub Scriptlet1_onreadystatechange()
  If Scriptlet1.readyState = 4 Then
    Scriptlet1.BgColor = "black"
    Scriptlet1.FgColor = "lightgreen"
  End If
End Sub</code></pre>
<p>
When the loading completed, <b><code>readyState</code></b> contains a value of <b><code>4</code></b>. At this point, for example, we can set the colors. </p>
<h2>Specifying the URL</h2>
<p>
Inserting Scriptlets into desktop application poses another problem: how do we specify the source path of the component? The Microsoft Scriptlet Control doesn't seem to offer a way to specify a relative path to the Scriptlet code. For example, we can't just indicate the file name, and leave the system to search in the current directory or in the common paths. Absolute paths work well if we're using Scriptlets from the Internet (when the paths are real URLs), but force us to indicate a specific installation directory in the case of local Scriptlets. </p>
<p>
All this wouldn't be a problem if the <b><code>URL</code></b> property could be set at runtime. Unfortunately, we need to assign the URL at design-time, and if we leave the URL field blank, the Scriptlet Control doesn't load. If we specify a string that IE 4 isn't able to convert into a valid file name, we get a runtime exception and—again—the control won't load.</p>
<p>
A possible partial workaround is to assign a semi-relative path that refers to the current drive, but specifies a fixed directory. It might be a common path where you store all the local Scriptlets. For example: </p>
<pre><code>URL = file:///Script\Clock.htm</code></pre>
<p>
points to the file <b><code>Clock.htm </code></b>that must reside in the <b><code>\Script</code></b> directory on the current drive.</p>
<p>
If your goal is to use Scriptlets as ordinary ActiveX controls within a desktop Windows application, then consider that a Scriptlet still remains a separate file that you have to distribute together with the application executables. A revolutionary approach may be saving the HTML file (and all the files <i>it</i> requires) in the resource file of the module. When the application is initializing, extract the resources and create temporary files. At this point specifying a fixed directory is no longer an issue, since you can create it dynamically and copy the Scriptlet files in.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing Our First Scriptlet</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="writingourfirstscriptlet"></a>Writing Our First Scriptlet</h1>
<p>
Images are widely used on Web pages, but you rarely see them in scrollable areas. Writing a Scriptlet that is able to scroll images is really a matter of a few minutes work. What we have to do is create and set up an <b><code>IMG</code></b> tag in the Scriptlet, and then enable the container's scrollbars. The body of the Scriptlet contains only an empty image element. Here is the entire source code for the Scriptlet:</p>
<pre><code>&lt;html id=MyPage&gt;
&lt;head&gt;
&lt;title&gt;ScrollImage Scriptlet&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;script language="VBscript" for="window" event="onload"&gt;
  InitMyScriptlet
&lt;/script&gt;

&lt;script language="VBscript"&gt;

' Initialize the control
' ----------------------------------------------
Sub InitMyScriptlet
  if InScriptlet then
    window.external.scrollbar = True
  end if
End Sub

' Set the image to show
' ----------------------------------------------
Sub DoSetImage(sImage)
  document.images(0).src = sImage
End Sub
&lt;/script&gt;


&lt;script language="JavaScript"&gt;

// declare the object interface
public_description = new CreateMyScriptlet();
var InScriptlet = (typeOf(window.external.version) == "string");

function CreateMyScriptlet() {
  this.put_Image = put_Image;
}

function put_Image (sImage) {
  DoSetImage(sImage)
  return 1;
}
&lt;/script&gt;
&lt;img id="image" src="" alt=""&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>
And here's the result, showing a couple of intrepid <i>Wrox</i> programmers on the trail of another exciting new technology:</p>
<p>
<img src="0707_14_28.gif" border=0></p>
<p class=indent>
You can run or download this page, <b><code>Scroller.htm</code></b>, from our Web site at <b><code>http://rapid.wrox.co.uk/books/0707</code></b>.</p>
<h2>How It Works</h2>
<p>
The public interface is made up of a single property that is declared write-only for simplicity. It is defined inside the JavaScript <b><code>CreateMyScriptlet</code></b> function. Most Scriptlets also need a one-time initialization that is usually performed in response to the <b><code>window.onload</code></b> event: </p>
<pre><code>&lt;script language="VBscript" for="window" event="onload"&gt;
    InitMyScriptlet
&lt;/script&gt;

Sub InitMyScriptlet
  if InScriptlet then
    window.external.scrollbar = True
  end if
End Sub
</code></pre>
<p>
In this case, the event handler calls <b><code>InitMyScriptlet</code></b>, which simply enables the scrollbars. We don't have to worry about setting horizontal and vertical scrolling individually—all the magic is accomplished inside the Scriptlet container object automatically. </p>
<p>
Initially, the Scriptlet has no image to display. This screenshot below shows how it appears if we view it as a standard HTML document. This is an example of a Scriptlet that absolutely requires scripting to do something meaningful.</p>
<p>
<img src="0707_14_29.gif" border=0></p>
<p>
The property <b><code>image</code></b> is implemented via the <b><code>put_Image</code></b> function. Note that <b><code>put_Image</code></b> is a JavaScript routine that ends up calling <b><code>DoSetImage</code></b>, which is VBScript, instead:</p>
<pre><code>Sub DoSetImage(sImage)
  document.images(0).src = sImage
End Sub</code></pre>
<p>
<b><code>DoSetImage</code></b> just assigns the given image file name to the only <b><code>IMG</code></b> element found in the scriptlet body. </p>
<h2>Extending Our First Sample</h2>
<p>
The first improvement for this example that comes to mind is adding programmable tool-tip text. Suppose we want to make available a new read/write property called <b><code>Text</code></b>:</p>
<pre><code>function CreateMyScriptlet() {
  this.put_Image = put_Image;
  this.put_Text = put_Text;
  this.get_Text = get_Text;
}</code></pre>
<p>
By adding the two lines shown highlighted above, we declare the property as an attribute of our Scriptlet. The <b><code>put_Text</code></b> and <b><code>get_Text</code></b> could have the following implementation</p>
<pre><code>m_Text = ""

function put_Text(sText) {
  DoSetText(sText);
  m_Text = sText;
  return 1;
}

function get_Text() {
  return m_Text;
}</code></pre>
<p>
When implementing a readable property, we should always consider maintaining an internal 'member' variable to make it persistent. In this example we're using the variable <b><code>m_Text</code></b>. When an external caller sets a new value to the <b><code>Text</code></b> property, the VBScript's <b><code>DoSetText</code></b> routine is called. because an <b><code>IMG</code></b> element has an <b><code>alt</code></b> attribute (which stores the alternative text representation of the image), we just need to assign our <b><code>Text</code></b> property to it to get the tool-tip we want. The <b><code>Text</code></b> property may be set via scripting in the container's page at any moment, according to runtime conditions:</p>
<pre><code>Sub DoSetText(sText)
  document.images(0).alt = sText
End Sub</code></pre>
<h2>Hosting a Scriptlet in a Web page</h2>
<p>
You'll recall that we insert Scriptlets into an HTML page using the <b><code>&lt;OBJECT&gt;</code></b> tag. As a reminder, here's how:</p>
<pre><code>&lt;object id="ImgScrl1"
  data="ImgScrl.htm" width="450" height="300" 
  type="text/x-scriptlet"&gt;
&lt;/object&gt;</code></pre>
<p>
The <b><code>data</code></b> attribute specifies the file name or URL where the Scriptlet may be found, while <b><code>type</code></b> attribute tells IE 4.0 that it is attempting to load a Scriptlet. Once it has done so, everything works as if we are dealing with ordinary ActiveX controls. This means, for instance, that we can access the Scriptlet properties via the usual object-based syntax. The following is the source code that creates the scrolling image page you saw in the previous screenshot:</p>
<pre><code>&lt;html&gt;
&lt;title&gt;Test page using ScrollImage&lt;/title&gt;

&lt;b&gt;Test page using ScrollImage&lt;/b&gt;
&lt;script language="VBScript" for="window" event="onload"&gt;
ImgScrl1.Image = "image.gif"
ImgScrl1.Text = "Hassie and Jerry Lee"
&lt;/script&gt;

&lt;p&gt;
&lt;object id="ImgScrl1" data="ImgScrl.htm" 
width="450" height="300" type="text/x-scriptlet"&gt;
&lt;/object&gt;
&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Simple 'Typing' Scriptlet</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="thesimpletypingscriptlet"></a>The Simple 'Typing' Scriptlet</h1>
<p>
Our first example is a Scriptlet with a user interface. All it does is appear to 'type' a message onto the screen. The main page contains a text box and buttons that can be used to control the Scriptlet:</p>
<p>
<img src="0707_14_18.gif" border=0></p>
<p class=indent>
You can run or download this page, <b><code>typetext.htm</code></b>, from our Web site at <b><code>http://rapid.wrox.co.uk/books/0707</code></b>.</p>
<p>
The Scriptlet itself is a Dynamic HTML page, which produces white mono-spaced text on a black background: </p>
<pre><code>&lt;html&gt;
&lt;head&gt;
&lt;script language=jscript&gt;
...
... <b>script goes here</b>
...
&lt;/script&gt;
&lt;style&gt;
  BODY {background-color:black; color:white; font-family:"Courier New",Monospace;
        font-size:12pt; font-weight:bold}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id=objDiv style="position:absolute; top:5; left:5; width:100; height:100"&gt;
    &lt;p id=objPara&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>
The main page, <b><code>typecomp.htm</code></b>, that uses this Scriptlet contains all the descriptive text, instructions, text box, and buttons. It also contains a <b><code>&lt;OBJECT&gt;</code></b> tag that inserts the Scriptlet page <b><code>typetext.htm</code></b>:</p>
<pre><code>&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Using Visible Scriptlet Components&lt;/title&gt;
&lt;/head&gt;
&lt;body onload="startCode()"&gt;
&lt;h3&gt;Using Visible Scriptlet Components&lt;/h3&gt;
&lt;object id=myTypist width=400 height=100 type="text/x-scriptlet"
        data="typetext.htm" style="position:relative;"&gt;
&lt;/object&gt;
...
... rest of page goes here
...
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>
As you can see, the Scriptlet simply contains standard HTML that the IE4 parsing engine can display within the window defined by the <b><code>&lt;OBJECT&gt;</code></b> tag in the main (original) page. </p>
<h2>Defining The Scriptlet's Interface</h2>
<p>
Of course, to be able to manipulate the Scriptlet, the original page has to have a way of accessing it. Scriptlets define an <b>interface</b>, which the page that contains them can use to reference the public properties, methods and events supported by the Scriptlet – in the same way as it would with any other ActiveX control.</p>
<h3>Defining Properties</h3>
<p>
A <b>property</b> is simply a variable within the control. Any variable that has <b><code>public_</code></b> prefixing the variable name will be exposed as a property that can be accessed by the scriptlet's container. This is the easiest way to declare a property and set the default value of it:</p>
<pre><code>&lt;script language=jscript&gt; 
//public property variables
public_property1 = "Hello"</code></pre>
<p>
If you have any experience programming controls for Windows, then you know that COM also allows us to define a function that behaves like a property. This is especially useful if we need to perform input validation or other calculations before we set the value inside the control. The Scriptlet architecture allows us to declare a function for the <b><code>put</code></b> and <b><code>get</code></b> operations of a property. When the code in the container tries to place a value into a property, it calls the function that has <b><code>public_put_</code></b> prefixing the property name – for example, here is the definition for a property named <b><code>roomSize</code></b>:</p>
<pre><code>//private internal 'member' variable
var m_roomSize = 0

function public_put_roomSize(newvalue)
  {
   if ((newvalue &gt; 0) &amp; (newvalue &lt; 99)) m_roomSize = newvalue 
  }</code></pre>
<p>
The variable <b><code>m_roomSize</code></b> is a private internal variable that will be used inside the Scriptlet's code sections. It cannot be accessed from outside the Scriptlet, and so can only be set using the <b><code>public_put_roomSize</code></b> function (i.e. the <b><code>roomSize</code></b> property). This allows us to validate the new value proposed by the user and reject any unsuitable ones, as we've done in the code above.</p>
<p>
Likewise, when the code in the container tries to <b><code>get</code></b> the value of a property, it calls the function that has <b><code>public_get_</code></b> prefixing the property name. In this case, we can just return the value of the internal variable <b><code>m_roomSize</code></b>: </p>
<pre><code>function public_get_roomSize()
  {
   return m_roomSize
  }</code></pre>
<p>
By providing both the <b><code>put</code></b> and <b><code>get</code></b> functions, we produce a property that is read/write to the outside world. If we want our property to be read-only or write-only, we define just the <b><code>put</code></b> or the <b><code>get</code></b> function, as appropriate. </p>
<p class=indent>
Keep in mind also that we can only define a property using one of the two outline methods we've discussed here. If we use the <b><code>put</code></b> and <b><code>get</code></b> functions method then we cannot have a variable in our Scriptlet which has <b><code>public_</code></b> prefixing a property name that we are also using for the <b><code>put</code></b> and <b><code>get</code></b> functions.</p>
<h3>Defining Methods</h3>
<p>
A <b>method</b> is declared simply by adding the prefix <b><code>public_</code></b> to the name of the function or subroutine that carries out the method:</p>
<p>
&nbsp;</p>
<pre><code>function public_rollsOfWallpaper(intLengthEach)
  { 
    ... some code to calculate the result ...
    intNumberOfRolls = ...
    return intNumberOfRolls
  }</code></pre>
<p>
Any functions or variables within our Scriptlet not named with the <b><code>public_</code></b> prefix will only be accessible to code within the Scriptlet, and not from the containing page. Like all routines, we can pass values into the routine as parameters (such as <b><code>intLenghtEach</code></b> above), and we return the value, if there is one, just like we would from any other function. Of course, the function does not have to return a value if it's only required to carry out some direct action within the Scriptlet.</p>
<p class=indent>
The interface of a Scriptlet can also be defined in another way, using the JavaScript <b><code>public_declaration</code></b> object. We'll see how this is done later in the chapter. We'll also see how <b>events</b> are declared and implemented.</p>
<h3>Setting Properties and Calling Methods</h3>
<p>
In the main (container) page, we can use the properties and methods of the Scriptlet just like we would with any other ActiveX control or integral HTML object:</p>
<pre><code>MyScriptlet.roomSize = 42;                <b>  'set the roomSize property</b>
alert(MyScriptlet.roomSize);                'retrieve the roomSize property
alert(MyScriptlet.rollsOfWallpaper(33));    'call the rollsOfWallpaper method</code></pre>
<h2>The 'Typing' Scriptlet Code</h2>
<p>
Our Typing Scriptlet, <b><code>typetext.htm</code></b>, provides four properties and one method:</p>
<ul type=disc>
<li>
The property <b><code>messageText</code></b> (write only) is used to set the text of the message to be 'typed'.<br><br></li>
<li>
The property <b><code>typeStatus</code></b> (read only) returns the current status of the 'typing' process.<br><br></li>
<li>
The properties <b><code>height</code></b> and <b><code>width</code></b> (write only) are used to set the size of the typing area.<br><br></li>
<li>
The method <b><code>stopTyping()</code></b> stops the current 'typing' process.</li>
</ul>
<p>
You can see how these properties and methods are defined by the interface in the code section below. This is the entire script section of the <b><code>typetext.htm</code></b> Scriptlet:</p>
<pre><code>&lt;script language=jscript&gt; 
//private internal 'member' variables
var m_messageText = " ";
var m_typeStatus = "Idle";

//other internal variables
var timer = null;
var nPosition = 0;
var nLength = 0;

//--------------------------------------------
//put routine for text (write only)

function public_put_messageText(newString)
{ 
  nPosition = 0;
  if (newString.length &gt; 0) 
  {
    m_messageText = newString;
    nLength = m_messageText.length;
    timer = setInterval("typeText()", 200);
    m_typeStatus = "Typing";
  }
  else
  {
    nLength = 0;
    m_messageText = "";
    clearInterval(timer);
    document.all("objPara").innerHTML = "";
    m_typeStatus = "Idle";
  }
}

//-------------------------------------------
//get routine for typeStatus (read only)

function public_get_typeStatus()
{ return m_typeStatus }

//--------------------------------------------
//put routine for height (write only)

function public_put_messageHeight(newValue)
{ 
  if ((newValue &gt; 9) &amp; (newValue &lt; 1000))
    document.all("objDiv").style.pixelHeight = newValue
  else
    alert("messageHeight must be between 10 and 999");
}

//--------------------------------------------
//put routine for width (write only)

function public_put_messageWidth(newValue)
{ 
  if ((newValue &gt; 9) &amp; (newValue &lt; 1000))
    document.all("objDiv").style.pixelWidth = newValue
  else
    alert("messageWidth must be between 10 and 999");
}

//-------------------------------------------
// public method for the component

function public_stopTyping()
{ 
  clearInterval(timer);
  m_typeStatus = "Stopped";  
}

//-------------------------------------------
//private internal routines

function typeText()
{
  if (nPosition &lt; nLength)
  {
    nPosition++;
    document.all("objPara").innerHTML = m_messageText.substr(0, nPosition);
  }
  else
  {
    clearInterval(timer);
    m_typeStatus = "Complete";
  }
}

&lt;/script&gt;</code></pre>
<p>
As you will be able to see from the code, the Scriptlet works by using the <b><code>setInterval</code></b> method of its own <b><code>window</code></b> object, and simply changing the text that is displayed in the <b><code>&lt;DIV&gt;</code></b> tag <b><code>objDiv</code></b> each time the interval occurs. At the same time, it sets appropriate values for the internal <b><code>m_typeStatus</code></b> variable, which provides the read-only <b><code>typeStatus</code></b> property. This simple example should prove that the architecture of scriptlets is relatively simple, and indicate how they allow us to create custom client-side controls quickly and easily.</p>
<h3>It's As Easy As That!</h3>
<p>
So, using scriptlets is as simple as using an ActiveX control. All we have to do is place an <b><code>&lt;OBJECT&gt;</code></b> tag within our HTML page that will contain the Scriptlet, and then we can use the scriptlet just as we would use any other ActiveX control:</p>
<pre><code>&lt;object id=myTypist width=400 height=100 type="text/x-scriptlet"
        data="typetext.htm" style="position:relative;"&gt;
&lt;/object&gt;</code></pre>
<p>
The only differences between a scriptlet <b><code>&lt;OBJECT&gt;</code></b> tag, and an <b><code>&lt;OBJECT&gt;</code></b> tag that defines an ActiveX control, are the values of the <b><code>type</code></b> and <b><code>data</code></b> attributes, and the lack of a <b><code>ClassID</code></b> (or GUID). The <b><code>type</code> </b>attribute<b> </b>defines the MIME type that Internet Explorer should use when parsing the Scriptlet code; the MIME type for scriptlets is <b><code>"text/x-scriptlet"</code></b>. The <b><code>data</code></b> attribute defines the location of the scriptlet code, as a standard URL. This is similar to the <b><code>codebase</code></b> attribute used for ActiveX controls. </p>
<p class=indent>
Notice that there are no parameters declared using <b><code>&lt;PARAM&gt;</code></b> tags. This is because scriptlets do not currently support parameters, however Microsoft is working on adding support for parameter tags for a future release of Internet Explorer.</p>
</BODY>
</HTML>

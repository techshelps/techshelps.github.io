<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Few Gotchas</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="afewgotchas"></a>A Few Gotchas</h1>
<p>
Before we go on to discuss how we can host Scriptlets inside desktop applications rather than Web pages, there are a few 'gotchas' to be aware of when developing Scriptlets. Some that almost drove us crazy are: </p>
<ul type=disc>
<li>
How to resize the Scriptlet area (or site).<br><br></li>
<li>
How to cancel a Scriptlet event.<br><br></li>
<li>
How to use hidden Scriptlets.<br><br></li>
<li>
How to match in with the host page's environment</li>
</ul>
<h2>Resizing the Scriptlet's Site</h2>
<p>
The HTML code in our Clock component begins with: </p>
<pre><code>&lt;HTML ID=MyPage&gt;</code></pre>
<p>
Why would we want an HTML page to have an <b><code>ID</code></b>, you might ask? It's because we then can access the frame window of the Scriptlet. This window (as you'll recall from the earlier section "What happens behind the scenes") is the second Internet Explorer_Server window. Once we can get a reference to it, we can change its size:</p>
<pre><code>Set s = MyPage.style
s.pixelHeight = s.pixelHeight + mVertOffset 
s.pixelWidth = s.pixelWidth + mHorzOffset </code></pre>
<p>
To change the height and width of a Scriptlet site, we need to access the <b><code>style</code></b> object of the HTML page itself, as shown above. Once we've got a reference to this <b><code>style</code></b> object (remember that the page represents the Scriptlet as a whole), it's easy to access and modify the <b><code>pixelHeight</code></b> and <b><code>pixelWidth</code></b> properties. If we don't define an explicit ID for the page, we're unable to do this.</p>
<h2>Canceling Scriptlet Events</h2>
<p>
Custom Scriptlet events are a wonderful invention, but they don't return a value that can be examined to cancel the event—so you have to do your best to work around it. (For standard bubbled events, however, we can return a value via the <b><code>event</code></b> object).</p>
<p>
A simple trick is to define a write-only property, say <b><code>CancelEvent</code></b>, then set it to <b><code>true</code></b> from the host page's script code if we need the Scriptlet to stop executing the rest of its code. Suppose that in the Scriptlet we raise an event before accomplishing a given task:</p>
<pre><code>function put_CancelEvent(b) {
  mCancelEvent = b;
  return 1;
}
...
window.external.raiseEvent "onBeforeSomething", 0
if Not mCancelEvent then
<b>  ...</b>
<b>  ... do something</b>
<b>  ...</b>
end if 
...</code></pre>
<p>
The member variable <b><code>mCancelEvent</code></b> is the internal buffer that represents the <b><code>CancelEvent</code></b> property. The <b><code>onBeforeSomething</code></b> event reaches the host environment before the Scriptlet performs the "do something" actions. Here, the host page can cancel the event by just setting the <b><code>CancelEvent</code></b> property to <b><code>true</code></b>:</p>
<pre><code>&lt;script language="VBScript" for="Scriptlet1" event="onscriptletevent(n,o)&gt;
  If n = "onBeforeSomething" Then
    Scriptlet1.CancelEvent = True
  End If
&lt;/script&gt;</code></pre>
<h2>Hidden Scriptlets</h2>
<p>
Scriptlets are code components that resemble ActiveX controls. Consequently, there might be situations where we would use a Scriptlet as a silent and invisible 'server'. For instance, think of the Clock sample we discussed earlier. In some situations, we might want to hide it and just exploit its alarm function. We don't want the Scriptlet to have a user interface, but we still need to use it as a regular object. The easy way out is to set the <b><code>visibility</code></b> property of its <b><code>style</code></b> object to <b><code>hidden</code></b>:</p>
<pre><code>&lt;object id=Scriptlet1 width=1 height=1 type="text/x-scriptlet"
   data="scriptlet.htm" style="visibility:hidden"&gt;
&lt;/object&gt;</code></pre>
<p>
This technique can be used to add an invisible Scriptlet to any HTML page. If you just need a hidden component, that's all you need to do. However, sometimes things get a bit more complicated. For instance, we might want the object to appear and disappear on command. Look at the screenshot below:</p>
<p>
<img src="0707_14_35.gif" border=0></p>
<p class=indent>
You can run or download this page, <b><code>RunClock.htm</code></b>, from our Web site at <b><code>http://rapid.wrox.co.uk/books/0707</code></b>.</p>
<p>
The page shows the existing Stop button, plus three new buttons related to the visibility of the clock. The Hide button removes and inserts the entire Scriptlet in the page, while the other two act to show or hide parts of the clock component in different ways, without affecting the container. We can take one of three possible approaches to hiding a Scriptlet dynamically:</p>
<ul type=disc>
<li>
Using the <b><code>style.visibility</code></b> property for the various objects.<br><br></li>
<li>
Using the <b><code>style.display</code></b> property for the various objects.<br><br></li>
<li>
Resizing its site.</li>
</ul>
<h3>Changing the style.visibility Property</h3>
<p>
<b><code>visibility</code></b> is a property of the <b><code>style</code></b> object, and applies to every element that can appear in an HTML page. To make an element visible we assign <b><code>"visible</code></b>" to the property, otherwise we hide it using <b><code>"Hidden"</code></b>. We don't necessarily need to do it in the host page, as shown earlier. We can teach our Scriptlet to change the flag itself. To demonstrate this, we added a new <b><code>SetVisibility</code></b> method to the Clock sample, which runs when the Hidden button is clicked:</p>
<pre><code>function SetVisibility(b) {
  if(b) 
    document.all("Table1").style.setAttribute("visibility", "visible");
  else 
    document.all("Table1").style.setAttribute("visibility", "hidden");
  return 1;
}</code></pre>
<p>
It works on the table element that actually implements the clock. The table has been assigned an <b><code>ID</code></b> of <b><code>Table1</code></b>: </p>
<pre><code>&lt;TABLE id="Table1"&gt;
...
&lt;/TABLE&gt;</code></pre>
<p>
The function retrieves the <b><code>style</code></b> object of the element and changes the value of the <b><code>visibility</code></b> attribute according to the Boolean parameter passed to the routine. The effect of hiding it is shown below:</p>
<p>
<img src="0707_14_36.gif" border=0></p>
<p>
As you can see, only the table with the clock in it has disappeared. The text label and the rest of the Sciptlet's page remain unchanged. This happens by design, because <b><code>visibility</code></b> doesn't free the space occupied by the element it actually hides.</p>
<h3>Changing the style.display Property</h3>
<p>
The <b><code>display</code></b> property, on the other hand, does just this. Except for the arguments it accepts, <b><code>display</code></b> works the same as <b><code>visibility</code></b>. The only difference is that it physically removes  the element from the Scriptlet document: </p>
<p>
<img src="0707_14_37.gif" border=0></p>
<p>
Notice in this screenshot that the label shifts upwards when we remove the clock. The <b><code>display</code></b> property tells IE4 whether the element should be rendered or not—it expects the value <b><code>"None"</code></b> for removing the element, and an empty string (the default) for rendering it. We've implemented this capability in the <b><code>SetDisplay</code></b> routine that runs when the Display button is clicked:</p>
<pre><code>function SetDisplay(b) {
  if (b) 
    document.all("Table1").style.setAttribute("display", "");
  else 
    document.all("Table1").style.setAttribute("display", "none");
  return 1;
}</code></pre>
<p>
At this point, you might think that hiding the entire Scriptlet from the host page is an insignificant task. You're wrong. Yes, you can access the <b><code>display</code></b> property of the whole Scriptlet like this:</p>
<pre><code>document.body.style.setAttribute("display", "none");</code></pre>
<p>
or get the host page to change the Scriptlet's display property, like this:</p>
<pre><code>Scriptlet1.style.setAttribute("display", "none");</code></pre>
<h3>Resizing the Scriptlet</h3>
<p>
Both the methods we saw above make the Scriptlet completely invisible. However, the Scriptlet's area of the host page is not always properly cleared—particularly in the case of the first method. And if we want to do the job from code within the Scriptlet component, this is the method we have to use. If we want the clock to disappear leaving no footprints, we may need to resize its window as well. This causes the container page to redraw itself properly, as if we had instantiated an invisible object:</p>
<p>
<img src="0707_14_38.gif" border=0></p>
<p>
Here's the code for the Hide button, that implements this technique.:</p>
<pre><code>function Show(b) {
 if (b) {
   MyPage.style.pixelHeight = mHeight;
   MyPage.style.pixelWidth = mWidth;
   document.body.style.setAttribute("display", "");
 }
 else {
   document.body.style.setAttribute("display", "none");
   mHeight = MyPage.style.pixelHeight;
   mWidth = MyPage.style.pixelWidth;
   MyPage.style.pixelHeight = 1;
   MyPage.style.pixelWidth = 1;
 }
 return 1;
}</code></pre>
<p>
To access the <b><code>style</code></b> object for resizing the Scriptlet, we need to specify the <b><code>ID</code></b> of the Scriptlet page (<b><code>MyPage</code></b>) as we saw earlier. This code assigns the current height and width to global member variables, then resizes the site to1 x 1 pixels (using zero causes the Scriptlet object to be invalidated). It can be resized back to the original size using these stored values.</p>
<h2>Matching in with the Host Page's Environment</h2>
<p>
A Scriptlet can access its parent (host page) environment, and read—say—the background color of the page in order to insert itself neatly in the host frame. The parent window object is available from the <b><code>window.parent</code></b> property. So, in order to adopt the parent's background color, the Scriptlet can just use the following code, probably in the <b><code>window_onload</code></b> event:</p>
<pre><code>document.bgColor = window.Parent.document.bgColor</code></pre>
<p>
In fact, this technique can also be employed to inherit stylesheet information from the parent, or any other exposed properties of the host document.</p>
</BODY>
</HTML>

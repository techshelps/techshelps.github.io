<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 3: HTML Formatting and the Browser Object Model</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="chapter3htmlformattingbrowserobjectmodel"></a>Chapter 3: HTML Formatting and the Browser Object Model </h1>
<p>
After our brief introduction to style sheets in the last chapter, we're now ready to dig into one of the main foundations of Dynamic HTML: the <b>browser object model</b>. Netscape 2 was actually the first browser that provided a documented object model, which allowed users to access both the browser environment and page contents with scripting code. However certain contents of the page such as text and images weren't accessible, until the advent of Dynamic HTML. If we are going to be able to program the object model using Dynamic HTML, then we need to understand the whole hierarchy of objects inside the browser first and what they all do. </p>
<p>
So we're going break our discussion of the object model into two chapters. In this, the first, we'll discuss exactly what the object model is and why it's so important to Dynamic HTML programmers. From this introduction, we'll move on to the programmatic representation of the browser itself. The actual discussion of how we can manipulate elements on the web page, via the object model, won't be dealt with until the next chapter.</p>
<p>
So, we're going to cover these topics, in this chapter:</p>
<ul type=disc>
<li>
The purpose of the browser object model and its overall organization.<br><br></li>
<li>
Properties, methods, and events of the top-level <b><code>window</code></b> object.<br><br></li>
<li>
Window's subsidiary objects: <b><code>history</code></b>, <b><code>location</code></b>, <b><code>navigator</code></b>, <b><code>screen</code></b>, and <b><code>event</code></b>.</li>
</ul>
<p>
Since we haven't had an opportunity to talk in-depth about writing script code inside HTML pages, we'll refrain from giving detailed code examples in these chapters. The foundation of everything we do with DHTML is the object model; these two chapters provide a basis for everything we'll write about in this book. The fact that we're talking about the object model before we talk about scripting is logical too: it's important to talk about the objects that we can manipulate through code before we talk too much about the script code itself. While we won't explicate page after page of code in these chapters, we'll spend plenty of time talking about what the objects can do.</p>
</BODY>
</HTML>

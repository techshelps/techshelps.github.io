<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Methods</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="methods"></a>Methods </h1>
<p>
While the properties of the <b><code>window</code></b> object are useful, in contrast to what you might see for many other objects, they aren't as numerous or wide-ranging as the window's methods:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=710>
<tr valign=top>
<td class=blue width=21%><b>Method</b></td>
<td class=blue width=79%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=21%><b><code>alert</code></b></td>
<td width=79%>Displays an Alert-style dialog with a message and an OK button</td>
</tr>
<tr valign=top>
<td width=21%><b><code>blur</code></b></td>
<td width=79%>Causes the browser window to lose the focus and be placed at the back of the list of all non-minimized windows</td>
</tr>
<tr valign=top>
<td width=21%><b><code>close</code></b></td>
<td width=79%>Closes the current browser window</td>
</tr>
<tr valign=top>
<td width=21%><b><code>confirm</code></b></td>
<td width=79%>Displays a Confirm-style dialog with a message and OK and Cancel buttons</td>
</tr>
<tr valign=top>
<td width=21%><b><code>focus</code></b></td>
<td width=79%>Causes the window to gain focus (useful when used with references to other browser windows that don't have the focus)</td>
</tr>
<tr valign=top>
<td width=21%><b><code>navigate</code></b></td>
<td width=79%>Causes the browser window to navigate to the URL specified after the method name</td>
</tr>
<tr valign=top>
<td width=21%><b><code>open</code></b></td>
<td width=79%>Opens a new browser window using the options specified</td>
</tr>
<tr valign=top>
<td width=21%><b><code>prompt</code></b></td>
<td width=79%>Displays a prompt-style dialog box with an input text box and OK and Cancel buttons</td>
</tr>
<tr valign=top>
<td width=21%><b><code>scroll</code></b></td>
<td width=79%>Scrolls the window to the x and y position specified after the method name</td>
</tr>
<tr valign=top>
<td width=21%><b><code>setTimeout</code></b></td>
<td width=79%>Sets a timeout to execute a specific piece of code after a specified time interval</td>
</tr>
<tr valign=top>
<td width=21%><b><code>clearTimeout</code></b></td>
<td width=79%>Turns off a timeout that was set with the <b><code>setTimeout</code></b> method</td>
</tr>
<tr valign=top>
<td width=21%><b><code>setInterval</code></b></td>
<td width=79%>Sets an block of code that will execute repeatedly every x milliseconds</td>
</tr>
<tr valign=top>
<td width=21%><b><code>clearInterval</code></b></td>
<td width=79%>Turns off an interval that was set with the <b><code>setInterval</code></b> method</td>
</tr>
<tr valign=top>
<td width=21%><b><code>execScript</code></b></td>
<td width=79%>Executes a script (default language is JavaScript, not VBScript)</td>
</tr>
<tr valign=top>
<td width=21%><b><code>showHelp</code></b></td>
<td width=79%>Displays an HTML help window as a dialog</td>
</tr>
<tr valign=top>
<td width=21%><b><code>showModalDialog</code></b></td>
<td width=79%>Displays a new HTML window modally</td>
</tr>
</table><br>
<h2>Dialogs</h2>
<p>
The <b><code>window</code></b> object provides three methods that can be used to display dialogs commonly used for simple messages, confirmations, or prompts. The <b><code>alert</code></b> method displays a dialog with a text message and a single OK button; use it to give the user a message. <b><code>Confirm</code></b> is identical to <b><code>alert</code></b> but the dialog includes an additional Cancel button. Finally, the <b><code>prompt</code></b> method displays a dialog with a single line text box that can be used for input. These events are most useful when used with a scripting language (like JavaScript) that doesn't include basic dialogs in the language. VBScript provides more powerful equivalent statements that can be used instead of these methods.</p>
<p>
The code next to each dialog below is all that is necessary to generate the displayed dialog.</p>
<p class=indent>
Note that while <b><code>alert</code></b>, <b><code>confirm</code></b>, and <b><code>prompt</code></b> are all methods of the <b><code>window</code></b> object, we haven't prefaced our calls with a '<b><code>window.</code></b>' We can do this because <b><code>window</code></b> is the default object for any script code. If we don't give the name of an object, the script interpreter will assume that we're calling a method or accessing a property of the <b><code>window</code></b> object.</p>
<p>
Please place the screen shots to the left or right of the code that generates them</p>
<p>
<img src="07070303.gif" border=0></p>
<pre><code>alert "This is an alert dialog"</code></pre>
<p>
<img src="07070304.gif" border=0></p>
<pre><code>confirm "This is a confirm dialog"</code></pre>
<p>
{bmc07070305.bmp}</p>
<pre><code>strReturnValue = prompt "This is a prompt dialog", "Default Input"</code></pre>
<p>
We'll usually use the <b><code>prompt</code></b> method when we care about what the user chooses. In our example above we've saved the text entered by the user in the string variable called <b><code>strReturnValue</code></b>. We can then use this variable to change the way the rest of our script code executes.</p>
<h2>New Windows (Open, ShowModalDialog, and ShowHelp)</h2>
<p>
One of the most powerful methods in the Internet Explorer 3.0 object model was <b><code>open</code></b>, allowing new instances of Internet Explorer to be opened at will with a highly customizable list of features. Fortunately for us as developers, IE4 expands even further on this ability with more configuration options and the new <b><code>showModalDialog</code></b> method. </p>
<h3>Open</h3>
<p>
The open method is called with this syntax:</p>
<pre><code>Set objMyWindowRef = window.open (<i>URL</i>, <i>name</i>, <i>features</i>)</code></pre>
<p>
In this line of code, all three parameters are strings. <b><code>URL</code></b> is the only required argument – it specifies the URL of the document to be displayed in the new window. <b><code>Name</code></b> can be used to name the window, although this isn't as much use to us as the reference to the newly created <b><code>window</code></b> object that the <b><code>open</code></b> method returns to us. If we specify the name of a window that already exists, <b><code>open</code></b> will bring this window to the foreground instead of creating a new window. In our example line of code we're saving this reference in a variable called <b><code>objMyWindowRef</code></b>. Since this variable is a reference to another <b><code>window</code></b> object, any of the properties or methods we've talked about in this chapter can be used with this reference in the same way that we've used them with the <b><code>window</code></b> object where our code is executed.</p>
<p>
The last parameter, <b><code>features</code></b>, is what gives us the fine level of control over the appearance of the new window. The following table shows the attributes that can be set with the <b><code>features</code></b> parameter. </p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=674>
<tr valign=top>
<td class=blue width=16%><b>Attributes</b></td>
<td class=blue width=24%><b>Values</b></td>
<td class=blue width=60%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=16%>channelmode</td>
<td width=24%><b><code>yes | no | 1 | 0</code></b></td>
<td width=60%>Show channel controls</td>
</tr>
<tr valign=top>
<td width=16%>directories</td>
<td width=24%><b><code>yes | no | 1 | 0</code></b></td>
<td width=60%>Show directory buttons</td>
</tr>
<tr valign=top>
<td width=16%>fullscreen</td>
<td width=24%><b><code>yes | no | 1 | 0</code></b></td>
<td width=60%>Maximize new window or leave default size</td>
</tr>
<tr valign=top>
<td width=16%>height</td>
<td width=24%><i>number</i></td>
<td width=60%>Height of new window in pixels</td>
</tr>
<tr valign=top>
<td width=16%>left</td>
<td width=24%><i>number</i></td>
<td width=60%>Left position on desktop (in pixels)</td>
</tr>
<tr valign=top>
<td width=16%>location</td>
<td width=24%><b><code>yes | no | 1 | 0</code></b></td>
<td width=60%>Show the URL address text box</td>
</tr>
<tr valign=top>
<td width=16%>menubar</td>
<td width=24%><b><code>yes | no | 1 | 0</code></b></td>
<td width=60%>Show the default browser menus</td>
</tr>
<tr valign=top>
<td width=16%>resizeable</td>
<td width=24%><b><code>yes | no | 1 | 0</code></b></td>
<td width=60%>Window can or cannot be resized by user</td>
</tr>
<tr valign=top>
<td width=16%>scrollbars</td>
<td width=24%><b><code>yes | no | 1 | 0</code></b></td>
<td width=60%>Show vertical and horizontal scrollbars</td>
</tr>
<tr valign=top>
<td width=16%>status</td>
<td width=24%><b><code>yes | no | 1 | 0</code></b></td>
<td width=60%>Show the status bar at the bottom of the window</td>
</tr>
<tr valign=top>
<td width=16%>toolbar</td>
<td width=24%><b><code>yes | no | 1 | 0</code></b></td>
<td width=60%>Show the default browser toolbars</td>
</tr>
<tr valign=top>
<td width=16%>top</td>
<td width=24%><i>number</i></td>
<td width=60%>Desktop position (in pixels) of the new window</td>
</tr>
<tr valign=top>
<td width=16%>width</td>
<td width=24%><i>number</i></td>
<td width=60%>Width of the new window in pixels</td>
</tr>
</table><br>
<p>
The features string is formed by concatenating the values we would like to set with delimiting commas. Here's an example that opens the Wrox site and saves the window reference in a variable called <b><code>objWinRef</code></b>:</p>
<pre><code>set objWinRef = window.open ("http://www.wrox.com", "MyWindow", "toolbar=no, left=150, top=200, menubar=no, systemMenu=no")</code></pre>
<p>
<img src="07070306.gif" border=0></p>
<p>
The <b><code>open</code></b> method returns a reference to the window that it opens. What does this mean? If we save the reference in a variable, like we do in the above example where it's saved in the variable called <b><code>objWinRef</code></b>, then we can control the window after it has been opened. To do this we use the same <b><code>window</code></b> object methods we've been talking about in this chapter. For example, to close the window in the same block of code that opened it, we would simply use this line of code:</p>
<pre><code>objWinRef.close</code></pre>
<p>
Any of the other <b><code>window</code></b> methods and properties can also be used.</p>
<h3>ShowModalDialog</h3>
<p>
The <b><code>showModalDialog</code></b> method is similar to <b><code>open</code></b> but with a few differences.It takes a feature string built the same way we build an <b><code>open</code></b> feature string, except that some of the options are different with a modal dialog.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=686>
<tr valign=top>
<td class=blue width=21%><b>Attributes</b></td>
<td class=blue width=22%><b>Values</b></td>
<td class=blue width=57%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=21%><b><code>border</code></b></td>
<td width=22%><b><code>thick | thin</code></b></td>
<td width=57%>Size of border around window</td>
</tr>
<tr valign=top>
<td width=21%><b><code>center</code></b></td>
<td width=22%><b><code>yes | no | 1 | 0</code></b></td>
<td width=57%>Center the dialog window with respect to the browser window that opens it</td>
</tr>
<tr valign=top>
<td width=21%><b><code>dialogHeight</code></b></td>
<td width=22%><i>number &amp; units</i></td>
<td width=57%>Height of the dialog window in style sheet units specified</td>
</tr>
<tr valign=top>
<td width=21%><b><code>dialogLeft</code></b></td>
<td width=22%><i>number &amp; units</i></td>
<td width=57%>Left position of the dialog window with respect to the desktop (in style sheet units specified)</td>
</tr>
<tr valign=top>
<td width=21%><b><code>dialogTop</code></b></td>
<td width=22%><i>number &amp; units</i></td>
<td width=57%>Top position of the dialog window with respect to the desktop (in style sheet units specified)</td>
</tr>
<tr valign=top>
<td width=21%><b><code>dialogWidth</code></b></td>
<td width=22%><i>number &amp; units</i></td>
<td width=57%>Width of the dialog window in style sheet units specified</td>
</tr>
<tr valign=top>
<td width=21%><b><code>font</code></b></td>
<td width=22%><i>CSS string</i></td>
<td width=57%>Default font and style for the dialog</td>
</tr>
<tr valign=top>
<td width=21%><b><code>font-family</code></b></td>
<td width=22%><i>CSS string</i></td>
<td width=57%>Default font for the dialog</td>
</tr>
<tr valign=top>
<td width=21%><b><code>font-size</code></b></td>
<td width=22%><i>CSS string</i></td>
<td width=57%>Default font size for the dialog</td>
</tr>
<tr valign=top>
<td width=21%><b><code>font-style</code></b></td>
<td width=22%><i>CSS string</i></td>
<td width=57%>Default font style for the dialog</td>
</tr>
<tr valign=top>
<td width=21%><b><code>font-variant</code></b></td>
<td width=22%><i>CSS string</i></td>
<td width=57%>Default font variant for the dialog</td>
</tr>
<tr valign=top>
<td width=21%><b><code>font-weight</code></b></td>
<td width=22%><i>CSS string</i></td>
<td width=57%>Default font weight for the dialog</td>
</tr>
<tr valign=top>
<td width=21%><b><code>help</code></b></td>
<td width=22%><b><code>yes | no | 1 | 0 </code></b></td>
<td width=57%>Display the help button in the dialog title bar</td>
</tr>
<tr valign=top>
<td width=21%><b><code>maximize</code></b></td>
<td width=22%><b><code>yes | no | 1 | 0</code></b></td>
<td width=57%>Display the Maximize button in the title bar</td>
</tr>
<tr valign=top>
<td width=21%><b><code>minimize</code></b></td>
<td width=22%><b><code>yes | no | 1 | 0</code></b></td>
<td width=57%>Display the Minimize button in the title bar</td>
</tr>
</table><br>
<p>
Since we can now use CSS font attributes in our feature string, we have to format the string a bit differently. Instead of using equal signs and commas like we did with the <b><code>open</code></b> method, we'll create our features string in the same style as we create CSS formatting, using colons and semicolons.</p>
<p>
Compare these strings:</p>
<pre><code>strOpenFeatures = "toolbar=no, left=150, top=200, menubar=no, systemMenu=no"

strModalFeatures = "font-size:10;font-family:Times;dialogHeight:200px"</code></pre>
<p>
Since we're using CSS formatting, we need to remember to specify the unit for the size and position attributes. This is why we said <b><code>dialogHeight:200px</code></b> in the above example.</p>
<p>
The method displays a new browser window, but makes this window modal to the browser it is shown from. This means that the user won't be able to switch back to work in the original browser until the modal browser instance is dismissed. It also means that any script code in the original browser stops execution while a modal dialog is displayed. </p>
<p>
Modal dialogs look different to windows created with <b><code>open</code></b>. As we can see in the screen shot below, there is a lack of a system menu icon and minimize/maximize buttons of the type we'd see with an <b><code>open</code></b>-created window. How do we show a modal dialog? The next line of code creates the dialog shown in the screen shot. The first argument is simply the filename of the page to display. We've seen the third argument before also, when we worked with the <b><code>open</code></b> method (but remember that the table above shows the differences in what we can use with non-modal and modal windows). We'll talk about the second parameter in this call in just a few seconds.</p>
<pre><code>DialogRef = showModalDialog ("blank.htm", 0, "toolbar=no")</code></pre>
<p>
&nbsp;</p>
<p>
<img src="07070307.gif" border=0></p>
<p>
This method can be very useful. Suppose we'd like to prompt our users for some information, but find the basic dialog we get with the <b><code>prompt</code></b> method too limiting. To display a custom prompt from our script and not take any action until the viewer of our page has responded to the prompt, we can create an HTML page that implements the prompt and then display the page using the <b><code>showModalDialog</code></b> method. For example, suppose we'd like to ask the user to choose between three different options. We would first create an HTML page that showed these options, perhaps using a set of radio buttons, and then we would show this page with the <b><code>showModalDialog</code></b> method. Our code would stop while the dialog was displayed, and when our code continued we could use the value that the user selected to determine how to proceed.</p>
<p>
Since we now have the same ability to choose specific positions (using style sheets) as we do with environments like Visual Basic, we can use prompts and other specific forms in the same way that we use forms with Visual Basic and other rapid-application development tools.</p>
<p>
As we saw above, the <b><code>showModalDialog</code></b> method takes a second parameter called <b><code>arguments</code></b> instead of <b><code>name</code></b>. We'll often want a way to pass information to the dialog, and to do this we can use the <b><code>arguments</code></b> string. Inside the code that may reside in the dialog's HTML page (remember, the page is created with HTML like any other we're using) we can access the <b><code>arguments</code></b> string and take appropriate action. For example, suppose we create an HTML page that contains a set of radio buttons, but we want to display different information in the text of the radio buttons each time the dialog is shown. If we wrote the code for our dialog so that it took the text from the <b><code>arguments</code></b> string, then changing the radio buttons would be a simple matter of changing the call to <b><code>showModalDialog</code></b>.</p>
<p>
Finally, we've said that <b><code>showModalDialog</code></b> doesn't return a reference to a window like <b><code>open</code></b> does. Why? First of all, a reference wouldn't be much use to us, since, by definition, the code that creates a modal dialog stops until the dialog is dismissed. A reference to a non-existing window wouldn't do us any good! Secondly, since modal dialogs will often be used to create custom prompts, we want a way to return information from the dialog to the calling code, like the <b><code>prompt</code></b> dialog does.</p>
<p>
For these reasons <b><code>showModalDialog</code></b> returns a string that can be set in the code that resides on the calling page.</p>
<h3>ShowHelp</h3>
<p>
Online help is a necessity in today's computer applications. Since DHTML gives web authors the foundation they need to write full-featured applications with all the features and perks a native Windows application can provide, it's not surprising to see efforts to make it possible to provide online help in a web environment also. Microsoft has created a standard called HTML Help that allows help information to be displayed in a browser window that looks similar to the Help Topics window that Windows applications like Word and Excel display today.</p>
<p>
IE4 is, in fact, one of the first HTML Help hosts. To see it, load up IE and click on the Content and Index menu item in the Help menu.</p>
<p>
<img src="07070308.gif" border=0></p>
<p>
If you right click on the right-hand pane of the new dialog you'll see the familiar View Source option in the menu that proves that what you're seeing is indeed an HTML page.</p>
<p>
So how does the <b><code>showHelp</code></b> method work anyway? It takes the URL of an HTML Help page (see the last paragraph in this section for more information on how to do this), as well as a second optional parameter where arguments that control how the page is displayed can be specified.</p>
<p>
For example, if we have an HTML Help page called <b><code>MyHelp.htm</code></b>, then we'd show it with this simple line of code:</p>
<pre><code>showHelp "MyHelp.htm"</code></pre>
<h2>Timers</h2>
<p>
Using the <b><code>setTimeout</code></b>, <b><code>clearTimeout</code></b>, <b><code>setInterval</code></b>, and <b><code>clearInterval</code></b> methods of the <b><code>window</code></b> object we can automatically execute any code we've written after some time interval (that we set) has elapsed.</p>
<h3>SetTimeout and ClearTimeout</h3>
<p>
<b><code>setTimeout</code></b> takes the name of a function, and a time value in milliseconds. After the time value has passed, the function is called automatically.</p>
<p>
For example, the following code calls a routine named <b><code>TimerFunc</code></b> after 5000 milliseconds (5 seconds):</p>
<pre><code>TimeoutID = Window.setTimeout ("TimerFunc",5000)</code></pre>
<p>
Once you've started a timer with <b><code>setTimout</code></b>, you may find that you want to cancel it so the function specified in the <b><code>setTimeout</code></b> call is not executed. This is where the <b><code>clearTimeout</code></b> function comes into play, assuming you've saved the return value of the <b><code>setTimeout</code></b> function, a number. In the line of code above we've saved our return value in a variable called <b><code>ID</code></b>, and it's this variable that we'll use in our call to clear the timer:</p>
<pre><code>Window.clearTimeout TimeoutID</code></pre>
<p>
If you call <b><code>clearTimeout</code></b> with an ID value that doesn't exist, nothing will happen and any timers you have active will continue to work.</p>
<h3>SetInterval and ClearInterval</h3>
<p>
The <b><code>setInterval</code></b> and <b><code>clearInterval</code></b> methods are new to IE4. They're called just like <b><code>setTimeout</code></b> and <b><code>clearTimeout</code></b>; the only difference is that the function specified in the call executes repeatedly, instead of just one time, until the page is unloaded or the <b><code>clearInterval</code></b> method is called.</p>
<p>
The following line of code starts the process of calling <b><code>TimerFunc</code></b> every 1 second.</p>
<pre><code>IntervalID = setInterval("TimerFunc", 1000, VBScript)</code></pre>
<p>
To stop the repeated calling of this function, we'd just use this line of code:</p>
<pre><code>clearInterval IntervalID</code></pre>
<h2>Window Control (focus, blur, scroll)</h2>
<p>
If we have a reference to a window, we can use the <b><code>focus</code></b>, <b><code>blur</code></b>, and <b><code>scroll</code></b> methods to control the instance of the browser. Firing the <b><code>blur</code></b> method causes the browser in question to lose the focus and be placed at the back of any non-minimized windows; the window that was immediately behind the browser before it lost focus is made the active window. After we've <b><code>blur</code></b>red a window, we can bring it back to the forefront by using the <b><code>focus</code></b> method.</p>
<p>
The scroll method should be called like this:</p>
<pre><code>windowref.scroll x, y</code></pre>
<p>
where <b><code>x</code></b> and <b><code>y</code></b> are pixel values that the top left corner of the document should be scrolled to. </p>
<p>
<img src="07070309.gif" border=0></p>
<p>
The top left hand of the document is defined to be point (0, 0), so:</p>
<pre><code>scroll 0, 0 </code></pre>
<p>
tells the browser to scroll the current document to the position it was displayed at originally. This line of code:</p>
<pre><code>scroll 50, 50</code></pre>
<p>
scrolls the document to a position 50 pixels down the page and 50 pixels to the right. We'll use this method to do things like ensuring that a certain portion of the page is displayed in the viewer's copy of IE4. </p>
<h2>Navigate</h2>
<p>
We've covered more than a several methods over the last couple of pages. Fortunately, the final <b><code>window</code></b> method we'll cover is much simpler. <b><code>Navigate</code></b> is powerful – it's used to load a different page into the current browser window. Calling it is simply a matter of specifying the method name and a URL string as the only parameter, like this:</p>
<pre><code>navigate "http://www.wrox.com"</code></pre>
<p>
Using just a few lines of code with the <b><code>prompt</code></b> and <b><code>navigate</code></b> methods we can point a user's browser to a completely different site based their response to a simple question:</p>
<pre><code>W3Cdhtml = prompt("Do you like IE4 - enter yes or no", "yes")
If W3Cdhtml = "yes" then
   navigate "http://www.microsoft.com"
Else
   navigate "http://www.netscape.com"
End If</code></pre>
<p>
Using the <b><code>navigate</code></b> method is the same thing as setting the <b><code>href</code></b> property of the <b><code>location</code></b> object, as we'll see in a bit when we cover <b><code>window</code></b>'s child objects.</p>
</BODY>
</HTML>

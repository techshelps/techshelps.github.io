<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="activex"></a>ActiveX</h1>
<p>
ActiveX has to be one of the most misunderstood and ambiguously used expressions in the Internet technology arena. When Microsoft released their first set of Internet tools in March 1996, they announced <b>ActiveX</b> technology – which in all truth was just a new marketing name for their existing <b>OLE</b> technology.  ActiveX (or 3<sup>rd</sup> generation OLE technology) is a framework that allows software components to co-operate even if they have been written by different vendors, at different times using different tools and different languages, and if the objects are located in the same process, same machine or distributed over multiple machines.  Put simply, ActiveX provides the <b>software plumbing</b> between software objects and insulates the component developer from such complexities.</p>
<p>
Many people get confused because ActiveX actually encompasses a number of technologies and is not just one thing. Each ActiveX technology defines the interfaces between the objects to implement the particular technology.  For the Internet, examples include:</p>
<ul type=disc>
<li>
<b>ActiveX Documents</b> – enables the browser to support non-HTML documents<br><br></li>
<li>
<b>ActiveX Scripting</b> – enables script logic, included with a downloaded Web page or a server-side ASP page, to be executed<br><br></li>
<li>
<b>ActiveX Controls</b> – provides a method of packaging client components for reuse across platforms and development environments which can then be dynamically downloaded as needed and used within a web page<br><br></li>
<li>
<b>ActiveX Server Components</b> – enables the Web Server (IIS and ASP) to interface to server software components</li>
</ul>
<p>
To most users, ActiveX is transparent and they just see the effects of these technologies - it is irrelevant to them whether it is ActiveX or black magic that is operating behind the scenes. However, it is different for the developer - we shall see later how the Internet ActiveX technologies provide a powerful environment for creating interactive Web content.</p>
<p>
Underneath ActiveX is the generic <b>Component Object Model</b> (COM) which defines the binary interface between objects. The original specification of COM always allowed for co-operating objects to be located on different machines, but this was not implemented until Windows NT 4.0 and was then called <b>Distributed COM</b> (DCOM). Because of this, in reality DCOM and COM are now the same animal. This is all we really need to know about COM/DCOM, although they will be mentioned throughout the book. </p>
<p>
There does exist a small anti-ActiveX camp (with members typically having investments in alternative technologies!), that are concerned this will make the Internet as Windows-centric as today's desktops.  However, since ActiveX is the most advanced component software platform around, there is no doubt that it will build on its current momentum and play a major role in the next wave of Internet application development.  </p>
<p>
Corresponding to Microsoft's recent focus on Internet technology has been their aim to embrace industry standards and support openness. The ActiveX technologies have been given to an independent consortium called The Active Group and Microsoft has been working with a number of third parties to support ActiveX on non-Windows platforms including UNIX and Apple Macintosh. NCompass Labs  <b><code>http://www.ncompasslabs.com</code></b> have an ActiveX Plug-in for the Netscape Navigator browser.</p>
<p>
Let's now see ActiveX in action.</p>
<h2>ActiveX Documents</h2>
<p>
As part of their move towards seamless browsing, ActiveX Documents are fundamental to Microsoft's aim to achieve a document-centric world rather than the current application-centric notion. ActiveX Documents are based on the previous OLE DocObjects technology that allowed in-place activation or <b>visual editing.  </b>For example, an MS Excel spreadsheet embedded in a MS Word document could be edited directly within the Word frame, with the menus and toolbars adapting to make available the Excel facilities. </p>
<p>
If you look at the size of the IE4 executable, <b><code>IEXPLORE.EXE</code></b>, you will see it is so very small for an application that is as rich in functionality as IE4. In fact, this executable is just a simple process that loops to handle windows messages and provide a container for ActiveX Documents. Normally IE4 displays HTML – this is handled by a software component providing Web Browser support and using the IE4 container for displaying the page. The Web browser functionality is provided by an object implemented in <b><code>SHDOCVW.DLL</code></b>. </p>
<p>
As IE4 is an ActiveX Document container, it can support any applications that support the interfaces (i.e. methods, properties and events) that are defined by the ActiveX Document specifications. This includes the Microsoft Office products and other application vendors that are rapidly supporting this technology. This means that as we navigate the numerous resources within an Intranet, we no longer need to invoke separate word processors, spreadsheets, etc. to access the various items of information, IE4 can do it for us:</p>
<p>
<img src="0707_01_07.gif" border=0></p>
<h2>ActiveX Scripting </h2>
<p>
Scripting is an easy way to make our Web pages come alive and allows the browser to interact with the user and software components (i.e. trap events, invoke methods and access properties). It involves incorporating high level script commands into the HTML document that automatically get invoked by the browser when loaded or by the user clicking on something.</p>
<p>
Rather than just develop script processing for IE4, Microsoft has used ActiveX to provide a flexible architecture for adding any scripting language to an application. ActiveX Scripting allows <b>script hosts </b>to invoke scripting services within <b>script engines</b>. Further the hosts and engines can be from different software vendors and can implement different languages, since the plumbing between the two is handled by COM/DCOM. The ActiveX Scripting specifications define the interfaces that a script host and script engine must support. The script language, syntax and execution rules are defined by the vendor of the script engine. All script logic is interpreted on the fly by the script engine, there is no concept of compiling the scripts. This is shown as follows:</p>
<p>
<img src="0707_01_08.gif" border=0></p>
<p>
IE4, ASP and Visual InterDev are examples of script hosts, but you can now easily add scripting to your own applications. <b>VBScript  </b>and <b>JScript</b> are examples of script languages, but again, you can also develop your own. VBScript is a subset of Visual Basic for Applications (as used by the Microsoft Office Products) which in turn is a subset of the popular Visual Basic programming language. JScript is Microsoft's implementation of the Netscape's JavaScript, although Microsoft and Netscape are currently working on standardizing their versions of JavaScript.</p>
<p>
The real power of scripting comes with the ability to interact with other objects.  This enables accessing an object's properties, invoking methods and detecting events, and of course all this happens using COM/DCOM under the covers. Accessible objects are either:
<ul type=disc>
<li>
Intrinsic (built-in) objects exposed within the script host – often referred to as an <b>object model</b>.<br><br></li>
<li>
Executable software components: which are packages of reusable code that usually serve a specific function and don't have to be resident on the browser and can therefore be downloaded when needed. </li>
</ul>
<p>
Client-side scripting can be inserted into an HTML page using the <b><code>&lt;SCRIPT&gt;</code> </b>tags pair, and so can be incorporated within minimal impact. To identify the script language, the <b><code>LANGUAGE</code></b> attribute is used, as shown in the following template.  </p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;TITLE&gt;<i>Document title</i>
   &lt;/TITLE&gt;
   &lt;SCRIPT LANGUAGE="VBSCRIPT"&gt;
<i>   </i>   <i>Client-side</i> <i>VBS scripting logic</i>
   &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p class=indent>
If you wish your page to viewed normally in older browsers that cannot process script as well, then you can hide the script within HTML comment tags <b><code>&lt;!--</code></b> and <b><code>--&gt;</code></b>.</p>
<p>
The client-side scripting can interface to all element objects in a web page (e.g. tags, images, text, etc.), browser objects (e.g. windows, frames, history, etc.) and 'talk to' any object that has been included in the page. From this, we can see that scripting is what really enables the <i>Dynamic</i> in Dynamic HTML. We can now change any part of the Web page as a user interacts with the page, as demonstrated in our Wrox Press orders example earlier.</p>
<p>
While there are third parties supplying alternative scripting languages (e.g. Perl etc.), most people will use one of the two Microsoft supplied core options, VBScript or JScript – but which is best?  Well the truth is that there is very little difference in between the capabilities of the two. Both languages are capable of being used by those with minimal programming experience.  At the time of writing, IE3/IE4 are the only browsers that support VBScript. Thus, if you are aiming for mass penetration on the Internet then you should probably restrict the scripting to JavaScript, although to remain functional on both IE and Netscape browsers you will require a lot more than just one simple JavaScript program, because the two implementations of Dynamic HTML are so different. If you are developing for an Intranet, where you have control over the infrastructure and can enforce IE4 as the choice of browser, you can choose to use VBScript.</p>
<h3>Active Server Pages and Scripting</h3>
<p>
<b>Active Server Pages</b> (ASP) is a technology that provides a server-side application framework. You may wonder why we're discussing a server-side technology in a books focussed primarily on the client-side. This is because ASP provided a robust object model that also allowed the web page developer to do things dynamically. Later in the book we will take a look at how can combine the two technologies, but first we need to take a brief look at what ASP can do. </p>
<p>
ASP allows executable script logic to be embedded within an HTML page. It enables the scripting to interface to a number of internal objects, which automatically handle many of the menial tasks, and so simplifies the script logic. ASP uses server-side scripting to dynamically create HTML responses.  The content generated is typically based on the following features:</p>
<ul type=disc>
<li>
User's identity<br><br></li>
<li>
Parameters in the HTTP request <br><br></li>
<li>
Interacting with other objects (e.g. ASP objects, multi-tier client / server business objects, middleware to access databases and legacy systems, BackOffice components, etc.).</li>
</ul>
<p>
ASP provides a number of built in objects and useful components. The built-in objects simplify many of the common server-side tasks such as handling the HTTP request/responses, the user's session and the Web environment.</p>
<p>
Server-side scripting is inserted in an ASP file using either the <b><code>&lt;SCRIPT&gt;</code> </b>tags pair or <b><code>&lt;%</code></b> and <b><code>%&gt;</code> </b>delimiters.  To distinguish client-side from server-side scripting, the latter's <b><code>&lt;SCRIPT&gt;</code></b> tag should include the <b><code>RUNAT="SERVER"</code> </b>attribute and value. For example:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;TITLE&gt;<i>Document title</i>
   &lt;/TITLE&gt;
   &lt;SCRIPT LANGUAGE="VBSCRIPT" RUNAT="SERVER"&gt;
<i>   </i>   <i>Server-side VBS scripting logic</i>
   &lt;/SCRIPT&gt;
   &lt;SCRIPT LANGUAGE="VBSCRIPT"&gt;
<i>   </i>   <i>Client-side VBS scripting logic</i>
   &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
    &lt;% <i>Server-side VBS scripting logic %&gt;</i>
&lt;/BODY&gt;</code></pre>
<p class=indent>
Script that runs on the server can always run VBScript, because it has to be running on IIS which is a Microsoft Product. The script which runs on the client(browser) has to be either JavaScript or VBScript, depending on the browser or preference.</p>
<p>
Prior to scripting, all user interactions had to be handled by communication with the Web Server. Script logic now enables client-side processing to occur and can help to avoid some of the time-consuming communication with overburdened servers. It should be noted that the ASP server-side scripting is not exposed in the generated HTML file, where as client-side scripting could be inspected by simply viewing the HTML source code. This means that if you are concerned about the people copying your clever code or seeing your confidential business rules then you should engage such logic in the server. In practise, you will find that both server-side and client-side scripting have specific uses and that the design of your Web application will require a combination of the two.</p>
<h2>ActiveX Controls</h2>
<p>
An ActiveX Control is a software component that gives a specific item of functionality to a parent application (i.e. an ActiveX Control container). IE4 is such an application that can host ActiveX Controls within a Web page. The forerunners to ActiveX Controls were OLE Controls (for 32 bit applications) and the original, but limited, VBX controls (for 16 bit Visual Basic applications only).</p>
<p>
ActiveX Controls expose properties and methods and can fire events, using COM/DCOM under the covers. The combining of this with ActiveX Scripting provides our goal of user interactivity.  For example, clicking a button would fire the associated event and could cause a script to invoke a method on a control, which may then effect the results seen in the Web page. ActiveX Controls cannot directly communicate with each other. However, this can be achieved via script logic.</p>
<p>
&nbsp;</p>
<p>
ActiveX Controls can contain sophisticated logic and add features to Web pages that could never be achieved with standard HTML even with scripting. It is estimated that there are over 1,000 commercial ActiveX Controls on the market; examples of cool controls include:</p>
<ul type=disc>
<li>
Citrix WinFrame Control – enables a Windows application to be run on the server but displayed in a Web page <b><code>http://www.citrix.com</code></b><br><br></li>
<li>
Black Diamond Surround Video – provides facilities for 360-degree images that can be panned by mouse movement <b><code>http://www.bdiamond.com</code></b><br><br></li>
<li>
MacroMedia ShockWave – provides extensive facilities for creating web based animations <b><code>http://www.macromedia.com</code></b><br><br></li>
<li>
The ActiveX site – provides access to a large library of ActiveX controls from a wide variety of vendors <b><code>http://www.activex.com</code></b></li>
</ul>
<p>
One great advantage that ActiveX Controls provide is that they are automatically downloaded and installed, as needed. If a Web page references an ActiveX Control that is either not installed or is out of date, the deployment of the control is automatically handled by a helpful facility within IE4 called the Internet Component Download Service (ICDS). ICDS is also responsible for handling the <b>Authenticode</b> <b>processing</b>. Authenticode is Microsoft's and Verisign's Digital Signing system. It provides a mechanism to digitally sign and authenticate code to independent vendors. It will present the user with a certificate dialog highlighting details of the component's origin and can be used to hold vendors accountable to their software, whenever it causes problems:</p>
<p>
{bmc0707_01_11.bmp}</p>
<p>
Or alternatively, IE4 will flag a problem such as the control being is unsigned or not in the exact format as when released by the author. If this last case happens, it could mean that the control has been tampered with and isn't safe to use.</p>
<p>
<img src="0707_01_12.gif" border=0></p>
<p>
ActiveX Controls are compiled into native machine code. This means that if you intend to support multiple target client platforms you must produce a separate version for each. You should also remember that code size is important as many users connect to the Internet using slow modems, and might not be patient enough to wait for a fat control to arrive.</p>
<h3>The OBJECT Tag</h3>
<p>
An ActiveX Control is embedded into an HTML page by specifying a number of attributes between the <b><code>&lt;OBJECT&gt;</code></b> tag pair. For a visual control, this will be displayed in the page at the point where the tag is placed. Every ActiveX Control is uniquely identified by a sequence of numbers called a <b>Class ID </b>or <b>Globally Unique Id </b>(GUID). For example, the Class ID of the Microsoft NetShow Client Control is {<b><code>2179C5D3-EBFF-11CF-B6FD-00AA00B4E220</code></b>}. Since it is obviously not possible to remember such sequences for the numerous controls that are available, we need a quick way finding the Class ID.  </p>
<p>
One easy way is to use the Insert ActiveX Control facility in the Microsoft FrontPad (that ships with full installation of IE4) &amp; FrontPage HTML editors. By selecting this menu option, the user is able to select an ActiveX Control from all controls installed in the Registry, and this will automatically insert the <b><code>&lt;OBJECT&gt;</code></b> tags with the appropriate Class ID.  This automatic insertion is very useful since the nature of Class IDs tend to make typos frequent; it is very easy to key a wrong digit and not realize it until the control fails to instantiate.</p>
<p>
<img src="0707_01_13.gif" border=0></p>
<p>
Control properties are specified using the <b><code>&lt;PARAM&gt;</code></b> tag that takes two attributes – <b><code>NAME</code></b> and <b><code>VALUE</code></b>, for the property name and the value to initialize the property to.  The following example shows what the code for a Tab control looks like:</p>
<pre><code>&lt;HTML&gt;
&lt;HEAD&gt; 
&lt;TITLE&gt;Tabs&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
   &lt;!—<i>to be added --&gt;</i>
&lt;/SCRIPT&gt; 
&lt;/HEAD&gt;
&lt;BODY bgcolor=cyan&gt;
&lt;OBJECT ID="TabStrip1" WIDTH=69 HEIGHT=107
 CLASSID="CLSID:EAE50EB0-4A62-11CE-BED6-00AA00611080"&gt;
    &lt;PARAM NAME="ListIndex" VALUE="3"&gt;
    &lt;PARAM NAME="BackColor" VALUE="16776960"&gt;
    &lt;PARAM NAME="Size" VALUE="1834;2822"&gt;
    &lt;PARAM NAME="Items" VALUE="One;Two;Three;Four;"&gt;
    &lt;PARAM NAME="TabOrientation" VALUE="2"&gt;
    &lt;PARAM NAME="MultiRow" VALUE="-1"&gt;
    &lt;PARAM NAME="TipStrings" VALUE="One;Two;Three;Four;"&gt;
    &lt;PARAM NAME="Names" VALUE="One;Two;Three;Four;"&gt;
    &lt;PARAM NAME="NewVersion" VALUE="-1"&gt;
    &lt;PARAM NAME="TabsAllocated" VALUE="4"&gt;
    &lt;PARAM NAME="Tags" VALUE=";;;;"&gt;
    &lt;PARAM NAME="TabData" VALUE="4"&gt;
    &lt;PARAM NAME="Accelerator" VALUE=";;;;"&gt;
    &lt;PARAM NAME="FontCharSet" VALUE="0"&gt;
    &lt;PARAM NAME="FontPitchAndFamily" VALUE="2"&gt;
    &lt;PARAM NAME="TabState" VALUE="3;3;3;3"&gt;
&lt;/OBJECT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</code></pre>
<p class=indent>
Remember that the <b><code>&lt;OBJECT&gt;</code></b> tag attributes, including <b><code>&lt;PARAM&gt;</code></b> are all editor generated and you wouldn't have type these in yourself.</p>
<p>
The tab control is inserted in the page as follows, but if you click on it, there is no response:</p>
<p>
<img src="0707_01_14.gif" border=0></p>
<p>
An important attribute in the <b><code>&lt;OBJECT&gt; </code></b>tag is the <b><code>ID</code> </b>that is used to provide an easier name to reference the control; in particular it is used by the scripting language to apply any logic to the object. We have to first set the <b><code>ID</code></b> in the HTML:</p>
<pre><code>...
&lt;BODY bgcolor=cyan&gt;
&lt;OBJECT ID="TabStrip1" WIDTH=69 HEIGHT=107
 CLASSID="CLSID:EAE50EB0-4A62-11CE-BED6-00AA00611080"&gt;
... </code></pre>
<p>
in order to be able to reference it within a scripting language and therefore get the tab control to respond to each tab that is selected: </p>
<pre><code>&lt;SCRIPT LANGUAGE="VBScript"&gt;
Sub TabStrip1_Click(Index)
select case Index
  case 0  msgbox "one"
  case 1  msgbox "two"
  case 2  msgbox "three"
  case 3  msgbox "four"
end select
end sub
&lt;/SCRIPT&gt;</code></pre>
<p>
The <b><code>&lt;OBJECT&gt;</code></b> tag can include a <b><code>CODEBASE</code></b> attribute to specify the location of the control and the required version.  If the control has not been previously installed or it is out of date, the ICDS uses the <b><code>CODEBASE</code></b>'s URL to retrieve and install the control. For example</p>
<pre><code>CODEBASE="http://activex.microsoft.com/controls/iexplorer/timer.ocx#
      Version=4,70,0,1161"&gt;</code></pre>
<h3>Managing Downloaded ActiveX Controls</h3>
<p>
Until IE4 there was no smart way of managing the numerous ActiveX Controls that were downloaded and installed. It was possible that controls could be installed, used only once, and then would become redundant wasting disk space. With IE4, downloaded controls are installed in a folder called Downloaded Program Files within the Windows folder. When this folder is viewed via the Windows Explorer, a shell extension provides special functionality to manage the content. Each installed control is represented by an icon. By right clicking on an icon, a control can either be uninstalled or have its properties inspected.</p>
<p>
<img src="0707_01_15.gif" border=0></p>
<p class=indent>
You have three different choices of view, which supply general information such as the Class ID, Dependency Information and Version Information:</p>
<p>
<img src="0707_01_18.gif" border=0></p>
<p>
<img src="0707_01_17.gif" border=0></p>
<p>
<img src="0707_01_16.gif" border=0></p>
<p>
To create ActiveX Controls, the developer has several options, including the following:
<ul type=disc>
<li>
Visual Basic – from version 5, VB can create ActiveX controls; furthermore, there is a free version, VB Control Creation Edition (VB CCE), that is limited to just the creation of ActiveX Controls and can be downloaded off the Microsoft Web site <b><code>http://www.microsoft.com/vbasic/</code></b><br><br></li>
<li>
Visual C++ – provides three frameworks for creating controls: Microsoft Foundation Classes (MFC), the Active Template Library (ATL) or from the ActiveX Controls Framework (BaseCtl - part of the Internet Client SDK). The latter is designed for building very light controls but requires expert knowledge of OLE. MFC simplifies the development of such controls but, compared to other two, generates bulky code and requires the MFC libraries to be installed.</li>
</ul>
</BODY>
</HTML>

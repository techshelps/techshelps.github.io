<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Location Object</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="thelocationobject"></a>The Location Object</h1>
<p>
When we learned that the <b><code>navigate</code></b> method of the <b><code>window</code></b> object could be used to display a new URL, we alluded to a child object, called <b><code>location</code></b>. </p>
<p>
The <b><code>location</code></b> object represents the current URL displayed by the browser. As you might expect, <b><code>location</code></b>'s properties give information about the URL and its methods allow us to modify the browser's current location, but in a bit different way than we do with <b><code>navigate</code></b>.</p>
<h2>Properties</h2>
<p>
The properties of location reflect every last thing we could ever hope to know about the link the browser is currently displaying. The following table describes each property and gives the value that the property would return for a URL of <b><code>http://www.wrox.com:80/dhtml/book.htm?abc</code></b>.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=734>
<tr valign=top>
<td class=blue width=14%><b>Property</b></td>
<td class=blue width=50%><b>Value</b></td>
<td class=blue width=36%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=14%>href</td>
<td width=50%><b><code>http://www.wrox.com:80/dhtml/book.htm?abc</code></b></td>
<td width=36%>Complete URL</td>
</tr>
<tr valign=top>
<td width=14%>protocol</td>
<td width=50%><b><code>http:</code></b></td>
<td width=36%>The protocol of the URL</td>
</tr>
<tr valign=top>
<td width=14%>host</td>
<td width=50%><b><code>www.wrox.com:80</code></b></td>
<td width=36%>Hostname and port number</td>
</tr>
<tr valign=top>
<td width=14%>hostname</td>
<td width=50%><b><code>www.wrox.com </code></b></td>
<td width=36%>Name of host</td>
</tr>
<tr valign=top>
<td width=14%>port</td>
<td width=50%><b><code>80</code></b></td>
<td width=36%>Port number (default is 80)</td>
</tr>
<tr valign=top>
<td width=14%>pathname</td>
<td width=50%><b><code>/dhtml/book.htm</code></b></td>
<td width=36%>Path after the host property</td>
</tr>
<tr valign=top>
<td width=14%>search</td>
<td width=50%><b><code>?abc</code></b></td>
<td width=36%>Any value after a '?' in the URL</td>
</tr>
<tr valign=top>
<td width=14%>hash</td>
<td width=50%>(nothing in this example – would contain any anchor specified with #)</td>
<td width=36%>Any value after a '#' in the URL</td>
</tr>
</table><br>
<p>
In our example we haven't specified that we want to jump to any bookmark that might exist in the document. To jump to the anchor named <b><code>two</code></b>, we'd use an address similar to this:</p>
<pre><code>http://<i>myserver</i>/location.htm#two</code></pre>
<p>
In this case the <b><code>hash</code></b> property of the location object would contain the string '<b><code>#two</code></b>'.</p>
<p>
If you look at the values for these properties a little closer, you'll see that the <b><code>href</code></b> property includes the information in all of the other properties. The browser parses the full <b><code>href</code></b> string and fills in the appropriate information for each property, saving us the trouble of interpreting the full string ourselves and making it easier to find any specific piece of information we might need without having to write explicit script code.</p>
<p>
The other cool thing about the <b><code>href</code></b> property is how it's dynamically tied to the browser. Read the <b><code>href</code></b> property and nothing special will happen; change the <b><code>href</code></b> property and the browser will display the new page. Changing the browser's current URL in this manner is exactly the same as using the <b><code>window.navigate</code></b> method.</p>
<h2>Methods</h2>
<p>
In the old Internet Explorer 3.0 object model, the <b><code>location</code></b> object had no methods.This has changed with IE4. We now have three methods that give us a bit more control over the browser's current location.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=597>
<tr valign=top>
<td class=blue width=17%><b>Method</b></td>
<td class=blue width=83%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=17%><b><code>assign</code></b></td>
<td width=83%>Loads the page specified, equivalent to changing the <b><code>window.location.href </code></b>property</td>
</tr>
<tr valign=top>
<td width=17%><b><code>reload</code></b></td>
<td width=83%>Reloads the current page and displays any changes to the HTML source</td>
</tr>
<tr valign=top>
<td width=17%><b><code>replace</code></b></td>
<td width=83%>Navigates to the URL passed as a parameter and replaces the current page in the history list with this new page</td>
</tr>
</table><br>
<p>
With <b><code>assign</code></b> we can navigate to another page by passing the URL of the page when we call the method, like this:</p>
<pre><code>location.assign("http://www.microsoft.com")</code></pre>
<p>
Using the <b><code>reload</code></b> method we can refresh the contents of a page we're viewing. While Internet Explorer 3.0 didn't have this method, we could achieve the same affect using the <b><code>go</code></b> method of the <b><code>history</code></b> object with a parameter of 0. This was an often-requested feature, and so it was given its own method in IE4. </p>
<p>
<b><code>Replace</code></b>, on the other hand, is a completely new method that enables functionality we didn't have at all with Internet Explorer 3.0. The immediate effect is no different to the user than changing the <b><code>href</code></b> property or using the <b><code>navigate</code></b> method of the <b><code>window</code></b> object: the page the browser is displaying changes. The difference lies in what is added (or in this case not added) to the history list of the browser. When we change pages in a conventional manner, each new page is added to the end of Internet Explorer's history list, forming a queue of visited pages. In contrast, if we use <b><code>replace</code></b> to change our location, the current URL is overwritten by the new URL and won't remain in the history list. </p>
</BODY>
</HTML>

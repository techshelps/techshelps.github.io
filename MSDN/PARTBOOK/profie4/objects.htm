<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Objects</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="objects"></a>Objects</h1>
<p>
The object model provides us with an interface to the browser that masks us from what actually goes on beneath the hood of the browser, such as how browser operations are accomplished. This interface is embodied in the set of objects that make up the object model. But what actually is an object in computer terms?</p>
<p>
While an object can be anything from an apple to a television in the real world, to keep things simple, in computer terms, we shall just consider an object to be a combination of data and code. Objects are self-contained parts of a program, which carry out specific functions. The data and code associated to the object define everything that the object represents (state) and what it can do (behavior). The characteristics or <i>blueprint</i> of an object is specified by a <b>class </b>definition. An object, of which there may be many, is a created <b>instance</b> of a class, just as an instance of a cake can be created from a recipe. IE4 is made up from many interrelated objects and indeed even the whole browser itself is considered an object. </p>
<h2>An Object's Interface</h2>
<p>
All object models, including the browser object model, are made up of a set of interconnected and interrelated objects. Fortunately for us, while these objects might represent anything, they all operate in the same way to a script developer. It's this similarity that makes objects so powerful. Our script code can access every object with similar syntax, without regard for what the object represents. Furthermore, code can only interact with objects in predefined ways – through <b>properties</b>, <b>methods</b>, and <b>events</b>. A standard way of communicating is a key concept in any set of objects. </p>
<h3>Properties</h3>
<p>
A property of an object is an attribute that somehow reflects the current state of the object. As an example, suppose we were working with a <b><code>Car</code></b> object. This object might have properties with names like <b><i><code>NumberOfDoors</code></i></b>, <b><i><code>BodyStyle</code></i></b>, <b><i><code>CurrentSpeed</code></i></b>, and <b><i><code>LightsOn</code></i></b>. Some propertiescan only be read – they can't be changed. Others can be read and written. Many of the <b><code>Car</code></b> object properties are read-only; that is, they were set when the car was built and can't be changed (at least without a lot of work!). Other properties, like <b><i><code>CurrentSpeed</code></i></b> and <b><i><code>LightsOn</code></i></b>, can be changed or retrieved; these properties are read/write properties.</p>
<p>
While we've said many times that we won't provide any more than the most rudimentary code in these chapters, it's important to understand on the simplest scale how properties are called. Assuming we had an instance of our object called <b><i><code>MyCarObject</code></i></b>, we could display the read-only properties we invented in the previous paragraph in VBScript like this:</p>
<pre><code>MsgBox<i> MyCarObject.NumberOfDoors</i>
MsgBox MyCarObject.BodyStyle</code></pre>
<p>
Setting read/write properties is equally as simple:</p>
<pre><code><i>MyCarObject.CurrentSpeed</i> = 55
<i>MyCarObject.LightsOn</i> = True</code></pre>
<p>
We can read these variables in the same manner that we access read-only variables:</p>
<pre><code>MsgBox <i>MyCarObject.CurrentSpeed</i>
MsgBox <i>MyCarObject.LightsOn</i></code></pre>
<h3>Methods</h3>
<p>
Properties are great if we're only interested in finding out what state an object is in or in changing a discrete characteristic of an object.. Fortunately we have methods to help us out of this situation. In short, objects provide methods so that they can be instructed to carry out certain predefined operations. Our <b><i><code>Car</code></i></b> object could have methods like <b><i><code>SpeedUp</code></i></b>, <b><i><code>SlowDown</code></i></b>, <b><i><code>TurnRight</code></i></b>, <b><i><code>TurnLeft</code></i></b>, and <b><i><code>Stop</code></i></b>. These methods could take any number of parameters (perhaps the miles per hour to change speed or the degrees to turn). We use methods to influence the current state of the object.</p>
<p>
Calling methods with VBScript is simple:</p>
<pre><code><i>MyCarObject.SpeedUp</i> 20  '<b>speed up 20mph</b>
<i>MyCarObject.TurnLeft</i> 90 '<b>turn left 90 degrees</b></code></pre>
<h3>Events</h3>
<p>
Both properties and methods are things that we, as an outside force, do <b>to</b> an object. Events, in contrast, are things that an object does to its container or host. More specifically, they're entities that allow us to respond to some condition or state inside an object. A <b><i><code>Car</code></i></b> object might have, among other things, a <b><i><code>FuelLow</code></i></b> event that would be raised when the fuel level in the car fell below some level, a <b><i><code>FuelEmpty</code></i></b> event raised when the fuel tank was empty, and a <b><i><code>Collision</code></i></b> event – which we hope we never see!</p>
<p>
There are a few different ways to connect code to events with VBScript. In our simple examples we'll use the same style that Visual Basic uses:</p>
<pre><code>Sub <i>MyCarObject_FuelLow</i>
   ...      '<b>switch the fuel-low light on</b>
End Sub

Sub <i>MyCarObject_Collision</i>
   ...      '<b>call the insurance company</b>
End Sub</code></pre>
<h3>Collections</h3>
<p>
The final object concept we need to understand before digging into the object model is the idea of a collection – an easy way to group related objects together so they can be on as a unit. A car rental agency might keep a few collections of <b><i><code>Car</code></i></b> objects around. These collections might be called names like <b><i><code>AvailableCars</code></i></b>, <b><i><code>RentedCars</code></i></b>, and <b><i><code>WreckedCars</code></i></b> (these cars would probably have seen at least one <b><i><code>Collision</code></i></b> event). Collections are objects in their own right, and they have their own properties to show the status of the collection (like <b><i><code>Length</code></i></b> – the number of elements in the collection). They can also have their own methods and events, which will operate on the collection as a whole.</p>
</BODY>
</HTML>

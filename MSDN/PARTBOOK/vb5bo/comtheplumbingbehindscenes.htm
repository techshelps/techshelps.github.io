<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COM - The Plumbing behind the Scenes</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="comtheplumbingbehindscenes"></a>COM - The Plumbing behind the Scenes</h1>
<p>
The Common Object Model (COM) is Microsoft's standard for object interaction. COM provides a standard mechanism by which objects and components can communicate, independent of the language in which the components were created.</p>
<p>
Other major Windows technologies rely on COM to function. The two most notable of these technologies are OLE (Object Linking and Embedding) and ActiveX. These both use COM to facilitate all the interaction between objects. OLE uses COM to communicate between applications, allowing users to link or embed parts of one application's data and display into another application. ActiveX is broader, using COM to support communication between controls, in-process, and out-of-process servers.</p>
<p>
Microsoft has designed Visual Basic to fit seamlessly into COM. Components created with Visual Basic are ActiveX components, which means that they use COM to communicate with each other and with their client programs. In many other languages, it can be very complex to create components that fit into this model, but Visual Basic takes care of all that complexity behind the scenes.</p>
<p>
Distributed COM (DCOM) extends the communication capabilities across the network. With DCOM, any COM object can transparently communicate with objects on other machines over the network. This works with components created in Visual Basic as well, which means that Visual Basic developers can create objects and distribute them across the network with very little effort.</p>
<p>
Visual Basic 5.0's object capabilities are very well matched to those of COM. COM objects typically have multiple interfaces and, as we've seen, Visual Basic objects can have multiple interfaces using the <b><code>Implements</code></b> keyword. COM, like Visual Basic, has no direct support for inheritance, but instead relies upon aggregation so we can group objects together to provide more complex functionality.</p>
<p>
Because Visual Basic 5.0's capabilities are so closely matched with COM's capabilities, it is an ideal development tool when we're working in a COM environment.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Code Behind Forms</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="codebehindforms"></a>Code Behind Forms</h1>
<p>
In traditional Visual Basic applications, most programs have tended to respond to the events caused by the user - through the forms and controls that we've provided on our forms. So it's been very common to find the code to handle these events directly behind the controls that raise them.</p>
<p>
Many developers have therefore written the bulk of their code in the subroutines that run when particular events fire:</p>
<pre><code>Private Sub cmdButton_Click()
  ' do all the work here
End Sub</code></pre>
<p>
Meanwhile, other developers have tended to call centralised subroutines in the module's <b><code>General</code></b> section, or subroutines that have been placed in a separate code module:</p>
<pre><code>Private Sub cmdButton_Click()
  DoWork()
End Sub

Private Sub DoWork()
  ' do all the work here
End Sub</code></pre>
<p>
Either way, the results have been the same: Visual Basic code has been directly invoked by the events raised in the user-interface (UI).</p>
<p>
Putting code behind events from the UI hasn't provided us with much in the way of code reuse. The most that we've been able to hope for is to use code modules - so that we can call our code from multiple forms.</p>
<p>
To use code in other projects, we've had to copy original code into our new projects, causing duplicate code and maintenance problems down the line. Another approach has been to include the same code module in multiple projects; but then we run the risk that modifying the code in the module will break any other programs that rely on the module. Even if we don't break the programs, they need to be recompiled and redistributed to take advantage of our changes.</p>
<p>
By designing our applications with business objects and components, we now have the opportunity to make it significantly easier to reuse our code. Instead of trying to reuse source code, we can package that code into binary components and use those components anywhere we need them.</p>
<p>
If we create a component that provides some key functionality - everything to do with our customers, for instance - then we can use that component in any program that needs to deal with customers. As long as we are careful not to change or remove any properties or methods from our objects, we can change or add anything we want to our customer component with little risk of breaking existing programs.</p>
</BODY>
</HTML>

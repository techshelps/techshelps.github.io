<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 3: Business Object Analysis</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="chapter3businessobjectanalysis"></a>Chapter 3: Business Object Analysis</h1>
<h2>Overview</h2>
<p>
We've done some important work in the first two chapters. We've defined what we mean by business objects, we've considered the benefits of using business objects, and we've looked at some of the logical architectures that can use business objects to their best advantage. Now it's time to think about the relationship between our business objects and the real world they represent. Specifically, we're going to take a look at some of the techniques that can help us identify, in the very first instance, the actual business objects that we need to create when we're modeling business situations in the real world.</p>
<p>
In this chapter, and through the rest of this book, we'll be creating three interrelated systems that are designed to help run a video rental store. We'll perform a detailed business object analysis of these systems within this chapter, which will provide us with a sound introduction to object analysis.</p>
<p>
We'll be making extensive use of the <b>use case</b> technique in this chapter. This is a form of analysis that can be very useful for identifying and designing business objects. We'll also look at some of the common types of object relationship that can be found in real-world business systems, and we'll consider how we can design our business objects to support these relationships.</p>
<p>
So here are the main business analysis themes in this chapter:</p>
<ul type=disc>
<li>
Identifying and defining business objects<br><br></li>
<li>
Object attributes and behaviors<br><br></li>
<li>
Object relationships<br><br></li>
<li>
Analysis: our Video Store example project</li>
</ul>
<p>
In this chapter, we'll be focusing on the UI-centric business objects that were located within the  Component-based Scalable Architecture (CSLA) that I presented in the last chapter:</p>
<p>
<img src="image3-1.gif" border=0></p>
<p>
The UI-centric business objects are the objects that most closely represent the real-world entities that we're trying to model with our software. As such, UI-centric objects also happen to be the heart of any application that's built upon this particular model.</p>
<p class=indent>
Any presentation layer will be built directly on top of these UI-centric business objects, so a key requirement is that they provide a robust, easy-to-use model of our business processes.</p>
<p>
In this chapter, we'll look at real-world business entities and determine how to represent them as software objects. The technique we'll use to represent these business entities will be to model them, and the particular part of the business that we want to model will be our business <b>domain</b>. As we'll see, within this chapter, there are two major steps that we must accomplish if we are to successfully model our domain:</p>
<ul type=disc>
<li>
We need to figure out which real-world entities need to be part of our object model. From there, we can decide which attributes (properties) and behaviors (methods) these objects will need if they are to successfully represent our business entities.<br><br></li>
<li>
We need to evaluate the relationships between our different objects. Objects can interact with or relate to each other in many different ways. We need to add properties, methods, and events to our objects so that they can work together to model our business processes.</li>
</ul>
<p class=indent>
</p>
<p class=indent>
</p>
<p class=indent>
Another major aspect to the design comes when we decide which objects should go into different binary components, such as EXE's or DLL's. This is part of the <b>implementation design</b> of our objects, and we'll cover these issues in Chapter 4, where we discuss the creation of business object components.</p>
<p>
Once we've identified our business objects and their relationships, we'll have created a <b>logical object model</b>, which will help us decide how we can implement those relationships using Visual Basic.</p>
<p class=indent>
The relationships we'll be discussing are commonly used in object-oriented design, but exactly how we implement them in Visual Basic may vary from implementation methods commonly seen in other languages.</p>
</BODY>
</HTML>

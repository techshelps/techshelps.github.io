<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 2: Application Architecture with Business Objects</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="chapter2applicationarchitecturewithbusinessobjects"></a>Chapter 2: Application Architecture with Business Objects</h1>
<h2>Overview</h2>
<p>
In Chapter 1, we ran through a quick overview of what business objects are and why they're so important to software development. We also took a brief look at the concept of component-oriented design, which allows us to group business objects together into reusable binary components. </p>
<p>
In this chapter, we'll review traditional Visual Basic development techniques, and see how business objects and components can improve the way we develop software. </p>
<p>
Traditional Visual Basic development is very fast and very powerful, but it doesn't necessarily lend itself very well to large and complex applications. Using the capabilities of objects and components, we can more easily create and maintain very complex applications. The best part of this is that we can continue to leverage our existing Visual Basic skills, because working with business objects is really an evolutionary change rather than an entirely revolutionary approach.</p>
<p>
The most significant change in our development, when we use objects, is that we follow a somewhat different architecture than we've used in traditional development. As we go through this chapter, we'll be looking at traditional Visual Basic architectures and the impact of business objects and binary components upon those traditional architectures.</p>
<p>
Most large applications are implemented in a client/server environment, with the application's processing spread across a number of machines, including the user's workstation, a database server, and possibly an application server that sits in the middle. We'll look at this type of architecture, and see how we can use our business objects to take full advantage of all these machines.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Identifying Object Attributes (or Properties)</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="identifyingobjectattributesorproperties"></a>Identifying Object Attributes (or Properties)</h1>
<p>
Our programs interact with objects using the interface (properties, methods, and events) that the object provides. Properties are the attributes, or elements, that describe an object.</p>
<p class=indent>
Although the analytical processes to determine the properties and methods are similar and interrelated, it is often easier to start with the properties, keeping the behaviors in mind, and then move on to finalize the methods.</p>
<p>
We'll get our properties using two primary techniques:</p>
<ul type=disc>
<li>
We'll go back to our functional use case to find any properties that we need to meet the requirements listed there. <br><br></li>
<li>
We'll look at the object model diagram from the previous section, since some of the objects in our model might be better expressed as attributes of other objects - something we'll cover in much more detail shortly.</li>
</ul>
<p>
Additionally, some of our objects have relationships to other objects, such as the <i>invoice</i> having a reference to a <i>customer</i> object. In this case, we'll want to add a property to the <i>invoice</i> object so that the <i>customer</i> object is accessible.</p>
<p class=indent>
As well as the properties needed to fulfil the business requirements, the objects will also have properties to support the way we implement our components. We'll ignore these particular properties for now, and cover them in Chapter 5.</p>
<h3>Identifying Attributes - Looking through the Use Case</h3>
<p>
So, our first technique to identify object attributes involves us going through each object in our model, looking at the relevant use case to decide what attributes are appropriate.</p>
<p>
A simple example is the <i>customer </i>object. Looking at the use case, we can see some fairly obvious attributes that will be required; in particular, the name and address. The customer's ID number may also be an attribute, although we've put it into our model as an object. We'll talk about the ID number shortly.</p>
<p>
Of course, the address is likely to contain a number of attributes, such as street, city, state, and zip code. </p>
<p>
Alternatively, we may determine that we have other addresses from other functional use cases, so perhaps the address is really a separate object. Translating from use cases into an object design is a holistic process: we need to continually look back at other use cases and related object models to see where and how they overlap. This is how code re-use is tied in to the object model we are building.</p>
<p>
In this case, we'll just assume that a customer has a single address with a street, city, state, and zip code. Here is a list of the objects from our model, along with the properties that we're likely to derive from the use case:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=578>
<tr valign=top>
<td class=blue width=50%><b>Object</b></td>
<td class=blue width=50%><b>Object's Attributes</b></td>
</tr>
<tr valign=top>
<td width=50%>Tax</td>
<td width=50%>Tax amount</td>
</tr>
<tr valign=top>
<td width=50%>Subtotal</td>
<td width=50%>Subtotal amount</td>
</tr>
<tr valign=top>
<td width=50%>Total</td>
<td width=50%>Total amount for invoice</td>
</tr>
<tr valign=top>
<td width=50%>Invoice</td>
<td width=50%>Since the invoice isn't actually in our use case, and we added it later, we won't get any properties from the use case</td>
</tr>
<tr valign=top>
<td width=50%>Customer</td>
<td width=50%>Name<p>
Street</p>
<p>
City</p>
<p>
State</p>
<p>
Zip</p>
</td>
</tr>
<tr valign=top>
<td width=50%>Video price</td>
<td width=50%>Rental price</td>
</tr>
<tr valign=top>
<td width=50%>Video</td>
<td width=50%>Description</td>
</tr>
<tr valign=top>
<td width=50%>ID number</td>
<td width=50%>ID Number</td>
</tr>
</table><br>
<h3>Identifying Attributes - Looking at the Object Model Diagram</h3>
<p>
Our second technique to identify object attributes involves an examination of each object in our object model to make sure that it really is an object - and not just an attribute of a related object. This distinction is somewhat subtle, and requires us to step back and look at the requirements use case and any other related functional use cases that might impact the model.</p>
<p>
A good clue to start with is to examine the attributes we've assigned to each object at this point. Any object with just a single property is a good candidate to become a simple property of its parent object. Look at the <i>ID number</i> object. It only has a single property, so does it really warrant the status of being an object, or is it just an attribute of the <i>customer</i> and <i>video</i> objects? </p>
<p>
This depends very much on how the ID number object is used in other use cases. In this particular use case, it is simply an attribute - but if it's used the same way elsewhere then it should probably just become a property.</p>
<p class=indent>
We need to keep in mind that properties are not the only thing that might define an object. As we'll discuss shortly, methods and behaviors can also define an object. Before assuming that the ID number object is just an attribute, we need to ensure that it doesn't provide any behaviors that make it more appropriate to being an object.</p>
<p>
In going through the object model, look for objects that have a single property and those that have a parent. A parent is typically an object that <i>has</i> or <i>owns</i> or is <i>made up of</i> the object that we're looking at. Another way to look at it is that the child object <i>belongs to </i>the parent. The following objects look like good candidates to become properties of other objects:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=422>
<tr valign=top>
<td class=blue width=24%><b>Object</b></td>
<td class=blue width=76%><b>Parent</b></td>
</tr>
<tr valign=top>
<td width=24%>Video price</td>
<td width=76%>belongs to the video object</td>
</tr>
<tr valign=top>
<td width=24%>ID number</td>
<td width=76%>belongs to the customer and video objects</td>
</tr>
<tr valign=top>
<td width=24%>Tax</td>
<td width=76%>belongs to the invoice object</td>
</tr>
<tr valign=top>
<td width=24%>Subtotal </td>
<td width=76%>belongs to the invoice object</td>
</tr>
<tr valign=top>
<td width=24%>Total </td>
<td width=76%>belongs to the invoice object</td>
</tr>
</table><br>
<p>
At the end of this process, we have the following objects and properties:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=342>
<tr valign=top>
<td class=blue width=31%><b>Object</b></td>
<td class=blue width=69%><b>Attributes</b></td>
</tr>
<tr valign=top>
<td width=31%>Invoice</td>
<td width=69%>Tax<p>
Subtotal</p>
<p>
Total</p>
</td>
</tr>
<tr valign=top>
<td width=31%>Customer</td>
<td width=69%>ID number<p>
Name</p>
<p>
Address</p>
<p>
City</p>
<p>
State</p>
<p>
Zip</p>
</td>
</tr>
<tr valign=top>
<td width=31%>Video</td>
<td width=69%>ID number<p>
Description</p>
<p>
Price</p>
</td>
</tr>
</table><br>
<p>
At this point, we have properties for each of the objects individually; but, according to our diagram, the <i>invoice</i> object contains both the <i>customer</i> and <i>video</i> objects. We need to decide how the presentation layer will get at the <i>customer</i> and <i>video</i> objects through the <i>invoice</i> object. This is a very complex issue with a lot of different solutions.</p>
<p class=indent>
To give this issue the space it deserves, we'll discuss it fully in the next section of this chapter. Therefore, we'll leave the object properties as they are for now.</p>
<p>
Remember that everything we've done so far is tentative; we may still need some of the objects that we've eliminated if we find that they have methods in the following step. Still, it's a pretty good bet that we're close - so it is worth putting together an object model diagram that we can use to figure out the methods:</p>
<p>
<img src="image3-5.gif" border=0></p>
<p>
The object model has been simplified dramatically through this process. The analysis is geared toward building a simple model with just the objects that we need to represent the business process within our application. Since we chose not to remove the <i>screen</i> entity in the diagram during this process, we've also been able to simplify the model so that it will be easy to use when it's time to develop the presentation layer.</p>
</BODY>
</HTML>

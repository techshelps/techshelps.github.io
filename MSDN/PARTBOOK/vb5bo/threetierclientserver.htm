<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Three-tier Client/Server</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="threetierclientserver"></a>Three-tier Client/Server</h1>
<p>
Over time it has become apparent that two-tier client/server is simply not powerful enough or flexible enough to handle many larger applications. Since each client workstation maintains a dialog with the central database server, the network traffic can be quite high. Furthermore, the central database server can become a performance bottleneck - as many users try to access the same resources at the same time.</p>
<p>
Three-tier client/server helps address these issues by putting another physical server between the users and the database. This central <b>application server</b> can more efficiently manage network traffic and the load on the database server. </p>
<p>
Better still, it is typically much easier to add more application servers than it is to add more database servers. Adding a </p>
<p>
database server would require us to split our data between the database servers, whereas adding an application server should </p>
<p>
just require some relatively minor changes to parts of our application:</p>
<p>
<img src="image1-17.gif" border=0></p>
<p>
Just like two-tier client/server, the data processing is handled primarily on the database server. However, we now have an application server that can do a lot of work. This means that we can move a substantial part of our application off the user's workstation and onto the application server.</p>
<p>
There are a number of benefits to distributed processing, including:</p>
<ul type=disc>
<li>
Centralization of shared resources<br><br></li>
<li>
Rich, flexible client interfaces to the data<br><br></li>
<li>
Spreading our workload across various machines<br><br></li>
<li>
Putting processing in the most efficient location possible</li>
</ul>
<p>
How much processing is moved to the application server may vary. It depends on many factors, but mostly we need to decide how much work we want our client workstations to do. Designs range from having the client workstation do virtually nothing to the client workstation doing almost everything. We'll discuss the pros and cons of each approach in Chapter 2.</p>
<p>
<img src="image1-18.gif" border=0></p>
<p>
As I've shown it in this diagram, much of our business logic remains on the user workstation. In Chapter 2, we'll explore why it can be very beneficial to have the business objects on the client workstation as shown here.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Code Reuse</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="codereuse"></a>Code Reuse</h1>
<p>
Most applications developed today are essentially built from scratch. Over and over, we recreate many of the same processes and procedures from earlier programs. Granted, many programmers copy code from existing programs into their new programs, and then modify the copied code to fit any new requirements. But this means that the same code is copied over and over again. If we need to change something in the original code, we'll also have to find and change that same code everywhere it's been used. Which is far from ideal.</p>
<p class=indent>
You've probably done this type of code reuse many times over. And you've probably spent countless hours going through dozens of programs making the same code change. Then you've spent hours debugging all the changed programs. Talk about expensive!</p>
<p>
In other situations, code reuse is managed through libraries of code, or maybe even precompiled routines. But even in these cases, code reuse is difficult. In one of the best environments I've ever worked, we had a large and complete library of precompiled routines. By using these routines, we were able to dramatically improve the productivity of our development team. </p>
<p>
Still, it wasn't uncommon to run into a program that required a change to our library. Unfortunately, a change to the library required modifying and rebuilding all the applications that relied on the library. Worse yet, sometimes the new functionality required actually going back and changing all the programs that used the library to bring them up to date. This was expensive, and required us to modify what was otherwise stable program code, thereby increasing the risk of bugs.</p>
<p>
So copying code helps, but it's far from ideal. Creating libraries of code, or pre-compiled routines, can help a lot; but both techniques still leave a lot to be desired. What we really need is a solution that allows code reuse yet retains the flexibility of selective changes based on the need of the particular application. It would be great if we could derive what we needed and modify or extend the behavior. Fortunately, objects provide just this capability.</p>
</BODY>
</HTML>

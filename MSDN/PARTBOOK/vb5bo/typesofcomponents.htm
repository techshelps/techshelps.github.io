<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Types of Components</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="typesofcomponents"></a>Types of Components</h1>
<p>
Components can be designed for use in different areas within our programs. In general, there are three different types of components in an application:</p>
<ul type=disc>
<li>
Standard/general components<br><br></li>
<li>
Application-specific components<br><br></li>
<li>
Industry-specific components</li>
</ul>
<h2>Standard/General Components</h2>
<p>
I like to think of general components as the sort of thing you can buy out of just about any programmer's catalog. In fact, there are many components that are generally available from Windows itself or that come with Visual Basic. These are components that provide services so broadly useful that you can use them just about anywhere. Some good examples include DAO, RDO, graphing controls, grid controls and mathematical library components.</p>
<p>
For the most part, we're better off purchasing general components rather than rolling our own. Most companies that sell components make their living off the sales, so the components are likely to be of pretty decent quality. Furthermore, just about any popular type of component will be developed by multiple vendors, so competition will tend to get us better quality and more features as well.</p>
<p>
Of course, with Visual Basic 5.0, we can easily create components that are quite general in nature. If we can't find a component that fits our needs then we can just create our own. Better still, if we find a component that's <i>close</i> to what we need, we can use it inside a new Visual Basic component and just build on what it provides.</p>
<h2>Application-Specific Components</h2>
<p>
Each application is unique, and provides some specific functionality. We can put all of those components that belong entirely to an application into the application-specific component category.</p>
<p>
Perhaps our program needs to do some specific graphical display, or some complex calculations. These might be built as components - even though they aren't useful to any other applications.</p>
<p>
Clearly, since we're not likely to find this type of component on the commercial market, we'll be writing our own. I'll touch on this concept here and there throughout the rest of the book, but the majority of these components will be controls to customize our interface - so they really aren't going to contain business objects.</p>
<h2>Industry-Specific Components</h2>
<p>
These are components that are targeted at a specific industry, or perhaps a specific area of a business. As we'll discuss later in the chapter, there are a number of efforts underway to develop vertical market components, and those efforts are almost always industry-specific.</p>
<p>
Vertical components are rather rarer in the commercial area. Still, if we look around we can find more and more components that fit into this area. Many standalone products are beginning to expose public object interfaces, so we can write our programs to use parts of the product as a </p>
<p>
component. Products such as accounting systems, or shop floor control systems, can be used as components if they're designed to provide a public interface.</p>
<p>
On the other hand, we may find that there simply aren't components for our particular industry to suit our needs. In that case, we'll have to develop our own components for use in our applications.</p>
<p>
Business objects really come into play here. By using business objects to build a model of the actual 'objects' used in our industry, we can create very powerful components. It is primarily this type of component that we'll be focusing on throughout the remainder of the book.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Business Components in Visual Basic</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="creatingbusinesscomponentsinvisualbasic"></a>Creating Business Components in Visual Basic</h1>
<p>
Hopefully, by now, you're beginning to get a solid feel for the benefits that business objects can offer. Business objects provide both code reuse and an understandable, manageable way to model our business processes in our software. With the ability to organize and group our business objects into precompiled binary components, we can fully realize the benefits of the technology. </p>
<p>
Visual Basic allows us to create components in a variety of ways, and we can organize our business objects into these components. Using Visual Basic, we can create ActiveX servers, both in-process (DLL's) and out-of-process (EXE's). Additionally, we can create ActiveX controls (OCX's), which are another form of component. Any of these types of components can house our business objects, each with different strengths and weaknesses.</p>
</BODY>
</HTML>

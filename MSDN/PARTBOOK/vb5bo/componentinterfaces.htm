<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Component Interfaces</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="componentinterfaces"></a>Component Interfaces</h1>
<p>
Basically, what we're saying is that a component is a pre-compiled group of objects. Some of these objects can be used by client programs, while others may be hidden from the outside world, available for use only within the component itself. In many ways, a component is like a small application, but one that makes its functionality available for use by other applications.</p>
<p>
Earlier, we discussed object interfaces and how they are made up of the object's <b><code>Public</code></b> properties, methods, and events. Since a component is really a group of objects, the component's interface is made up of its public objects.</p>
<p>
Of course, this implies that there is a way to indicate which of our objects are to be public and which are private. There's no real analog to this concept within traditional object-oriented design. </p>
<p>
Object-oriented design always assumes that any object can interact with any other object within our application. Component-oriented design gives us greater control, since we can choose which of our component's objects are available for use by other applications:</p>
<p>
<img src="image1-9.gif" border=0></p>
</BODY>
</HTML>

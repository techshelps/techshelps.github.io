<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The User Relationship - Calling Objects</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="theuserrelationshipcallingobjects"></a>The User Relationship - Calling Objects</h1>
<p>
When an object holds a reference to another object, and calls its properties or methods, we have a <i>uses</i> type relationship. Another way to look at this is as a client-server relationship between the two objects. The client calls properties or methods on the server, and gets an appropriate response.</p>
<p>
This is the simplest of the relationships, and is one that virtually all Visual Basic programmers are familiar with - so we won't spend much time discussing it.</p>
<p>
The user or client simply declares a variable and creates an object:</p>
<pre><code>Dim objItem as LineItem

Set objItem = New LineItem</code></pre>
<p>
And then the user calls the object's properties or methods:</p>
<pre><code>objItem.Load "ABC"
MsgBox objItem.Price</code></pre>
<p>
When the user is done with the object, they just releases it by setting its reference to <b><code>Nothing</code></b>:</p>
<pre><code>Set objItem = Nothing</code></pre>
<p>
Probably all of us have used objects, or at least controls, in the Visual Basic programs we've written. Having an object use another object is no more difficult than using an object from a form or code module.</p>
</BODY>
</HTML>

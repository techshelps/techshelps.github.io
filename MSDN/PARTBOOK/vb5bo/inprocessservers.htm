<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>In-process Servers</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="inprocessservers"></a>In-process Servers</h1>
<p>
An in-process server is a component where our objects run inside the <i>client's</i> process. Each client essentially gets its own private copy of our component - and therefore a copy of all our objects.</p>
<p>
In-process servers avoid the overhead of running in their own process, thus conserving resources and memory for the system. Additionally, the communication between the client and our objects does not have to go from one process to another - and so we avoid almost all of the overhead imposed by COM on out-of-process server communication.</p>
<p>
Since in-process components run inside the client's process, we use less memory and we don't create extra processes. We'll also improve performance, but we do give up some capabilities. Since each server is running in each client's process space, our business objects are effectively split up - so they can't share resources or memory with each other, but only with each client.</p>
<p>
By judicious use of out-of-process servers combined with in-process servers, we can create applications that draw on the strengths of each. I will demonstrate this at various points throughout the book.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object-based vs. Object-oriented Approaches</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="objectbasedvsobjectorientedapproaches"></a>Object-based vs. Object-oriented Approaches</h1>
<p>
Visual Basic has always been object-based, meaning that we could always use objects in our programs; but the language provided no way to create objects until Visual Basic 4.0. </p>
<p>
Perhaps it would be more accurate to say that it has always been component-based, since, until Visual Basic 4.0, we've been unable to use objects per se but rather we've used pre-built binary components.</p>
<p>
Originally, these components came in the form of VBX's (Visual Basic Custom Controls), which really set the stage for where we are today. VBX components provided us with pre-built functionality that we could just plug into our programs and start using. They were so useful, in fact, that an entire cottage industry grew up around them - and various development tools have now been enhanced to support their use.</p>
<p>
Unfortunately, VBX technology was pretty limiting in a number of ways. VBX controls were difficult to create, and the way they communicated with Visual Basic was strict and somewhat limited. Because of these problems, Microsoft developed a new standard for component development. These new components were called OLE Controls, and are now called ActiveX controls. Either way, they are commonly known as OCX's (OLE Custom Controls).</p>
<p>
Visual Basic 4.0 added a number of actual object-oriented abilities to the language, by adding the <i>class module,</i> and allowing us to create objects based on our own classes. Now, with version 5.0, we have even more capabilities with the addition of the <b><code>Friend</code></b> and <b><code>Implements</code></b> keywords, along with the ability to raise our own events - all of which we'll discuss in detail later in the book.</p>
<p>
Visual Basic 4.0 also introduced the ability to create our own components. This has given us the ability to easily package our objects together into reusable binary modules, as we discussed earlier in the chapter.</p>
<p>
Most people look at four criteria when deciding if a language is object-oriented. These criteria are abstraction, encapsulation, inheritance and polymorphism. Let's look briefly at each of these from Visual Basic's viewpoint. I don't want to get into too much detail, here, since there are entire books written about this subject alone; but I do want to quickly illustrate where Visual Basic stands.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Two-tier Client/Server</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="twotierclientserver"></a>Two-tier Client/Server</h1>
<p>
The simplest type of distributed computing is two-tier client/server. In this type of application, the data processing is moved off the user's machine on to a dedicated database server machine. Two-tier client/server is the most common type of client/server application built today. It offers significant benefits over a simple application, since the processing of data is centralized and becomes a shared resource between all the users:</p>
<p>
<img src="image1-15.gif" border=0></p>
<p>
Still, with two-tier client/server, the only work that has really been moved off the user's machine is the data management - storing and retrieving data. The user-interface and any processing done by the application remain pretty much where they were:</p>
<p>
<img src="image1-16.gif" border=0></p>
<p>
The primary difference lies in the role of the data service objects. In this model, they have to do much less work, since a lot of the data processing is moved to the database server - usually in the form of stored procedures and triggers written in SQL. Again, we'll talk in more detail about these data service objects in Chapter 2.</p>
</BODY>
</HTML>

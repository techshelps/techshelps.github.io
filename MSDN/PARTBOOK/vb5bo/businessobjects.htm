<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Business Objects</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="businessobjects"></a>Business Objects</h1>
<p>
The world around us is made up of both physical objects and concepts. To effectively model or simulate the real world and human processes in our code, it would be good if our software could be made up of representations of these real-world objects. As we have seen in the previous section, object-oriented programs attempt to do just that.</p>
<p>
Business objects are designed to represent real 'objects' and concepts in our business. Here are some examples of these real 'objects':</p>
<ul type=disc>
<li>
An employee<br><br></li>
<li>
A purchased part<br><br></li>
<li>
A manufactured part<br><br></li>
<li>
A work order<br><br></li>
<li>
A customer</li>
</ul>
<p>
All of these are objects in the physical world, and the whole idea behind using software business objects is to create representations of these same objects inside our applications. Then our application can make these objects interact with each other just as they would in the physical world. For instance, an <i>employee</i> might create a <i>work order</i> to build a <i>manufactured part</i> from one or more <i>purchased parts</i> that are then sold to the <i>customer</i>. </p>
<p>
Following this logic, we can create a <i>work order</i> business object that contains all the code it needs to manage itself - so we never need to replicate code to create work orders, we just use the object. </p>
<p>
Similarly, a <i>customer</i> object contains and manages its own data. A well-designed customer object can contain all the data and routines needed to represent a customer throughout an entire business and this can be used across all the applications for that business. We may use our customer object when taking an order. We might later use it when sending out a bulk mailing and analyzing sales patterns - without affecting any of the code that uses the object to take an order. Of course, over time, the customer object may evolve: it may gain new properties or new methods to support more functionality; the point is that the previous properties and methods can and should remain the same, so that existing applications need not be changed.</p>
</BODY>
</HTML>

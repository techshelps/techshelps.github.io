<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Splitting Up a Traditional Application</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<h1><a name="splittinguptraditionalapplication"></a>Splitting Up a Traditional Application</h1>
<p>
Let's take a simple Visual Basic application, like any we may have created in Visual Basic 3.0. An application typically has at least one form for the user-interface, along with some code to do any work that needs to be done, and the application probably talks to a database to store and retrieve data.</p>
<h2>The Application</h2>
<p>
To keep this very simple, let's build a quick Visual Basic application that has a single form and uses a simple text file as a logical database. This example demonstrates the distinct layers of an application.</p>
<p>
We'll just have a simple form, as shown below. The text box is called <b><code>txtName</code></b> and the command buttons are <b><code>cmdGet</code></b> and <b><code>cmdPut</code></b>:</p>
<p>
<img src="image2-5.gif" border=0></p>
<p>
Let's suppose that we have two business rules. The first is that the name must be in uppercase, and the second is that the name is required.</p>
<p>
To ensure that the name is uppercase, we'll add the following code:</p>
<pre><code>Option Explicit

Private Sub txtName_LostFocus()
  txtName.Text = UCase$(txtName.Text)
End Sub</code></pre>
<p>
And to make sure we don't save a blank name, we'll add this code:</p>
<pre><code>Private Sub cmdPut_Click()
  If Len(Trim$(txtName.Text)) = 0 Then
    MsgBox "You must enter a name", vbInformation
    Exit Sub
  End If
End Sub</code></pre>
<p>
Now let's just add some code to save the name to a file. This would normally be saving to a database, but we want to keep the program very simple to illustrate the different processes that are happening:</p>
<pre><code>Private Sub cmdPut_Click()
  Dim lngFile As Long

  If Len(Trim$(txtName.Text)) = 0 Then
    MsgBox "You must enter a name", vbInformation
    Exit Sub
  End If
  
  lngFile = FreeFile
  Open "C:\TEMP.TMP" For Output As file
  Print #lngFile, txtName.Text
  Close lngFile
End Sub</code></pre>
<p>
Finally, we'll add some code in behind <b><code>cmdGet</code></b> to pull the name back in from our 'database':</p>
<pre><code>Private Sub cmdGet_Click()
  Dim lngFile As Long
  Dim strInput As String
  
  file = FreeFile
  Open "C:\TEMP.TMP" For Input As lngFile
  Line Input #file, strInput
  txtName.Text = strInput
  Close file
End Sub</code></pre>
<p>
Now run the program. As you can see, we're able to store and retrieve a name. Furthermore, we won't save a blank name, and any name that we do save is stored in uppercase.</p>
<p>
Now let's examine the program from the viewpoint of a three-tier logical model. We'll try to determine which parts of the program perform the presentation, which parts the business logic and which parts the data processing.</p>
<h2>The Presentation Tier</h2>
<p>
This is really the user-interface, or how the program presents information to the user and collects information from the user. In our simple example, the presentation layer certainly includes the form itself:</p>
<p>
<img src="image2-6.gif" border=0></p>
<p>
The presentation layer also includes some of the code that we put behind the form, but certainly not all the code is directly related to the presentation. In the following listing, the presentation code is highlighted:</p>
<pre><code>Option Explicit

Private Sub cmdGet_Click()
  Dim lngFile As Long
  Dim strInput As String
  
  lngFile = FreeFile
  Open "C:\TEMP.TMP" For Input As lngFile
  Line Input #file, strInput
  txtName.Text = strInput
  Close file
End Sub

Private Sub cmdPut_Click()
  Dim lngFile As Long
  
  If Len(Trim$(txtName.Text)) = 0 Then
    MsgBox "You must enter a name", vbInformation
    Exit Sub
  End If
  
  lngFile = FreeFile
  Open "C:\TEMP.TMP" For Output As lngFile
  Print #lngFile, txtName.Text
  Close file
End Sub

Private Sub txtName_LostFocus()
  txtName.Text = UCase$(txtName.Text)
End Sub</code></pre>
<p>
Out of all that code, almost none of it is involved in actually presenting data to the user. Take a look at the lines that we've highlighted. For instance, we need to display the name after we've retrieved it from storage:</p>
<pre><code>txtName.Text = strInput</code></pre>
<p>
Notice, however, that this line is stuck right in the middle of several other lines of code that have nothing to do with presenting the data.</p>
<p>
Detecting that <b><code>txtName</code></b> is blank is a business rule, so that is not part of the presentation. Notifying the user that it is blank, however, is indeed part of the user interface:</p>
<pre><code>MsgBox "You must enter a name", vbInformation</code></pre>
<p>
Again, our presentation code is in the middle of other code that is not interface-related. The upshot of this is that if we want to change the business rule, or we want to change the presentation, then we're going to be changing the same code block for either task.</p>
<p>
That wasn't too bad, but the line in the <b><code>LostFocus</code></b> event is not so cut and dried. This line does two things: it converts the name to uppercase (a business rule), and it displays the name back into the form so that the user can see the final result (a presentation choice):</p>
<pre><code>txtName.Text = UCase$(txtName.Text)</code></pre>
<p>
Looking at these lines of code, you can see just what a mess we've gotten ourselves into. We have no way of changing the interface without tampering with business-related code, and we can't change our business rules without affecting the interface code.</p>
<h2>The Business Tier</h2>
<p>
Let's now look at the parts of the program that handle the business logic or business rules. Again, it's only a part of the overall program, so we'll highlight the areas that we need to examine:</p>
<pre><code>Option Explicit

Private Sub cmdGet_Click()
  Dim lngFile As Long
  Dim strInput As String
  
  lngFile = FreeFile
  Open "C:\TEMP.TMP" For Input As lngFile
  Line Input #lngFile, strInput
  txtName.Text = strInput
  Close file
End Sub

Private Sub cmdPut_Click()
  Dim lngFile As Long
  
  If Len(Trim$(txtName.Text)) = 0 Then
    MsgBox "You must enter a name", vbInformation
    Exit Sub
  End If
  
  lngFile = FreeFile
  Open "C:\TEMP.TMP" For Output As lngFile
  Print #lngFile, txtName.Text
  Close lngFile
End Sub

Private Sub txtName_LostFocus()
  txtName.Text = UCase$(txtName.Text)
End Sub</code></pre>
<p>
In the <b><code>cmdPut_Click</code></b> event, we need to make sure that the name is not blank - and avoid saving the value if it is:</p>
<pre><code>If Len(Trim$(txtName.Text)) = 0 Then
  MsgBox "You must enter a name", vbInformation
  Exit Sub
End If</code></pre>
<p>
Once again, notice how there is code managing the presentation layer right in the middle of our business processing.</p>
<p>
The situation is worse (but now rather familiar) within the <b><code>LostFocus</code></b> event: we see the <i>same line</i> that we saw in the presentation layer, now working for our business processing to make sure that the name is in upper case:</p>
<pre><code>txtName.Text = UCase$(txtName.Text)</code></pre>
<p>
Furthermore, suppose we need to provide access to this name to some other program, or from some other part of the same program: since the business logic is so tied into the display of this form, we'd have to duplicate the business code elsewhere.</p>
<p>
Clearly, this is not an ideal way to organise an application.</p>
<h2>The Data Services Tier</h2>
<p>
In our simple example, the data service code (highlighted in the following code) is fairly straightforward:</p>
<pre><code>Option Explicit

Private Sub cmdGet_Click()
  Dim lngFile As Long
  Dim strInput As String
  
  lngFile = FreeFile
  Open "C:\TEMP.TMP" For Input As lngFile
  Line Input #lngFile, strInput
  txtName.Text = strInput
  Close file
End Sub

Private Sub cmdPut_Click()
  Dim lngFile As Long
  
  If Len(Trim$(txtName.Text)) = 0 Then
    MsgBox "You must enter a name", vbInformation
    Exit Sub
  End If
  
  lngFile = FreeFile
  Open "C:\TEMP.TMP" For Output As lngFile
  Print #lngFile, txtName.Text
  Close file
End Sub

Private Sub txtName_LostFocus()
  txtName.Text = UCase$(txtName.Text)
End Sub</code></pre>
<p>
Still, in both the <b><code>cmdGet_Click</code></b> and <b><code>cmdPut_Click</code></b> event code, the data processing is mixed right in with the presentation and business logic, making it difficult to change the data processing without risking the other parts of the program.</p>
<h2>The n-tier Solution</h2>
<p>
Certainly, there are conventional solutions to help deal with these problems - including putting code in BAS modules, or creating class modules to hold this code. Unfortunately, these solutions don't fully meet the needs of code reuse and separating (or partitioning) the various parts of the application. </p>
<p>
The ideal solution is to pull the user-interface code into one area, the business logic into another and the data processing into a third. By breaking our application into these tiers, we can make it much easier to change any section of our program with less risk of causing bugs in the other tiers. By avoiding the case where a single routine includes code for both presentation and business logic for instance, we can change our presentation code without impacting the business code itself.</p>
<p>
We can also facilitate code reuse. For instance, the code in the business tier may be useful to more than one form in the user-interface tier. If our business code is intermingled with the presentation code, it can be very difficult to use that business logic across various different presentations. By separating the code, we can make it very easy for our application to show the same business information through various presentations.</p>
</BODY>
</HTML>

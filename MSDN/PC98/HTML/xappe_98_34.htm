<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MTFTP Operation</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana, arial, helvetica" size="2"><h1>
MTFTP Operation</h1>
<p>
Implementation of MTFTP in the client is strongly recommended. If the server sends MTFTP parameters, then the client should proceed as described in this section.  In this case the client goes through three phases: an open, a receive and a close, with an error recovery phase that can be entered at any point.</p>
<p>
<b>MTFTP open</b></p>
<p>
1.The network client acquires at least the following information from the BINL reply:
<ul>
<li>
Client bootfilename<br><br></li>
<li>
MTFTP Server UDP port number<br><br></li>
<li>
MTFTP Client UDP port number<br><br></li>
<li>
MTFTP multicast IP address<br><br></li>
<li>
MTFTP transmission start delay<br><br></li>
<li>
MTFTP transmission time-out delay<p>
2.Client binds to the MTFTP UDP port and waits for the MTFTP transmission start delay to receive packets. No network traffic is generated.
<p>
3.If there is a response, MTFTP packets are collected from the network. The client keeps track of received packets in an internal list.
<p>
If no packet is received, the client initiates an MTFTP open to the server.
<p>
<b>MTFTP receive</b>
</li>
</ul>
<ol>
<li>
In order to find out if a client needs to acknowledge or not, the server sends a unicast TFTP packet to that client. The first packet of a MTFTP transmission is always sent both as unicast and multicast UDP/IP. This instructs the network client that it is the acnowledging client.<br><br></li>
<li>
A server always transmits the complete file. Therefore, clients that start listening to a conversation part way through can wait and then get the rest on the next MTFTP transmission to make up for what was missed the first time.<br><br></li>
<li>
The acknowledging client must ACK all packets even if the client has received the entire file. <p>
<b>MTFTP close</b>
<p>
1.An MTFTP transmission is finished when the acknowledging client has received all packets and disconnects from the network. Clients who did not receive all packets can initiate a new transmission, if one has not already started. 
<p>
2.Before a new transmission is started there is a calculated delay. The default delay is modified by an algorithm based on the number of packets received. Clients who received fewer packets will wait for a shorter time than those who received more.  This algorithm ensures that:
</li>
</ol>
<ul>
<li>
Slow clients define the transmission speed.<br><br></li>
<li>
Clients with a large number of received packets can disconnect from MTFTP after they received all missing packets.<br><br></li>
<li>
Clients who hook into an ongoing MTFTP transmission and therefore only receive the tail of the transmission can disconnect from MTFTP after they received the missing head of the transmission.<br><br></li>
<li>
Clients with a small number of received packets are more likely to become the acknowledging client.</li>
</ul>
</font></BODY>
</HTML>

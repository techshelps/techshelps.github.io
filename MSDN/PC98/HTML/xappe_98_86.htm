<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Attachment F: UDP API Constant and Type Definitions</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana, arial, helvetica" size="2"><h1>
Attachment F: UDP API Constant and Type Definitions</h1>
<p>
<b>Important:</b> The code provided in this attachment is provided for informational purposes only. </p>
<pre><code>/*
 *
* Copyright(c) 1997 by Intel Corporation.  All Rights Reserved.
 *
 */

#ifndef _UDP_API_H
#define _UDP_API_H


#include "pxe_cmn.h"


/* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = */
/* #defines and constants
 */

#definePXENV_UDP_OPEN0x30
#definePXENV_UDP_CLOSE0x31
#definePXENV_UDP_READ0x32
#definePXENV_UDP_WRITE0x33


/* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = */
/* Typedefs
 */

typedef struct s_PXENV_UDP_OPEN {
UINT16 status;/* Out: See PXENV_STATUS_xxx #defines. */
UINT8 src_ip[4];/* Out: 32-bit IP address of this station */

} t_PXENV_UDP_OPEN;


typedef struct s_PXENV_UDP_CLOSE {
UINT16 status;/* Out: See PXENV_STATUS_xxx #defines. */
} t_PXENV_UDP_CLOSE;


typedef struct s_PXENV_UDP_READ {
UINT16 status;/* Out: See PXENV_STATUS_xxx #defines. */
UINT8 src_ip[4];/* Out: See description below */
UINT8 dest_ip[4];/* In/Out: See description below */
UINT16 s_port;/* Out: See description below */
UINT16 d_port;/* In/Out: See description below */
UINT16 buffer_size;/* In: Size of receive buffer. */
/* Out: Length of packet written into */
/*     receive buffer. */
UINT16 buffer_off;/* In: Segment/Selector and offset */
UINT16 buffer_seg;/*     of receive buffer. */
} t_PXENV_UDP_READ;

/*
src_ip: (Output)
======
UDP_READ fills this value on return with the 32-bit IP address 
of the sender.

dest_ip: (Input/Output)
=======
If this field is non-zero then UDP_READ will filter the incoming 
packets and accept those that are sent to this IP address.

If this field is zero then UDP_READ will accept any incoming
packet and return it's destination IP address in this field.

s_port: (Output)
=======
UDP_READ fills this value on return with the UDP port number
of the sender.

d_port: (Input/Output)
=======
If this field is non-zero then UDP_READ will filter the incoming 
packets and accept those that are sent to this UDP port.

If this field is zero then UDP_READ will accept any incoming
packet and return it's destination UDP port in this field.

*/

#defineUDP_READ_ANY_IP0x0000/* Accept packets sent to any IP. */
#defineUDP_READ_CHECK_IP0x0001/* Only accept packets sent to a */
/* specific IP address. */


typedef struct s_PXENV_UDP_WRITE {
UINT16 status;/* Out: See PXENV_STATUS_xxx #defines. */
UINT8 ip[4];/* In: 32-bit destination IP address. */
UINT8 gw[4];/* In: 32-bit Gateway IP address. */
UINT16 src_port;/* In: Source UDP port, assigned 2069 if given 0 */
UINT16 dst port;/* In: Destination UDP port */
UINT16 buffer_size;/* In: Length of packet in buffer. */
UINT16 buffer_off;/* In: Segment/Selector and offset */
UINT16 buffer_seg;/*     of transmit buffer. */
} t_PXENV_UDP_WRITE;


#endif /* _UDP_API_H */

/* EOF - $Workfile:   udp_api.h  $ */

</code></pre>
</font></BODY>
</HTML>

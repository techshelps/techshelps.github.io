<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Plug and Play for Device Configuration ROM</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<h1><a name="plugplayfordeviceconfigurationrom"></a>Plug and Play for Device Configuration ROM</h1>
<p>
This section defines the Plug and Play requirements related to device configuration&nbsp;ROM.</p>
<p>
<b>13. Device provides a configuration ROM for unique device identification</h1>
<table border=1 cols=3 frame=void rules=rows>
<tr valign=top>
<td width=30%><b>Required</b></td>
<td width=30%></td>
<td width=30%></td>
</tr>
</table><br>
<p>
For Plug and Play device control, the device configuration ROM must provide configuration information as specified in the IEEE 1394-1995 standard and as outlined in Table 1 (see following). The configuration ROM is required for unique detection of the device and is used by a PC to enumerate the bus and to load the correct device driver. Table 1 provides an example ROM that combines all the elements outlined in the requirements listed in this section. For up-to-date information about the configuration ROM, see the web site at http://www.microsoft.com/hwdev/busbios/.</p>
<p>
<b>Table 1. Configuration ROM (located at FFFF F000 0400)</h1>
<p>
<br>
</p>
<p>
<b>14. Device configuration ROM implements general ROM format</h1>
<table border=1 cols=3 frame=void rules=rows>
<tr valign=top>
<td width=30%><b>Required</b></td>
<td width=30%></td>
<td width=30%></td>
</tr>
</table><br>
<p>
The general configuration ROM format is specified in the IEEE&nbsp;1394-1995 and ISO/IEC&nbsp;13213:1994 standards. The general ROM format is an extensible tree structure that enables a managed environment by providing node-specific and unit-specific information as required for Plug and Play, power management, and isochronous data transfers. The general ROM format also provides for definition of multifunction device units. The bus information block and root directory of the general ROM format are required as specified in Table 1.</p>
<p>
<b>15. Bus information block implemented at a base address offset of 0404h</h1>
<table border=1 cols=3 frame=void rules=rows>
<tr valign=top>
<td width=30%><b>Required</b></td>
<td width=30%></td>
<td width=30%></td>
</tr>
</table><br>
<p>
The format of the bus information block is defined by the IEEE&nbsp;1394-1995 standard. The first quadlet of the bus information block at offset 404h is the configuration ROM signature field used to identify an IEEE 1394 configuration ROM. This quadlet must contain the ASCII string “<b>1394</b>”. The second quadlet of the bus information block at offset 408h contains several bits that indicate node capabilities. These bits are defined as shown in the following table, together with their required values.</p>
<p>
<b>Bits Indicating Node Capabilities at Offset 408h</h1>
<table border=1 cols=3 frame=hsides rules=rows>
<tr valign=top>
<td width=80><b>Bit or field</b></td>
<td width=56><b>Table 1 symbol</b></td>
<td width=328><b>Value and description</b></td>
</tr>
<tr valign=top>
<td width=80><i>irmc</i> bit</td>
<td width=56>m</td>
<td width=328>Must be 1. Indicates that the node supports isochronous resource manager capabilities.</td>
</tr>
<tr valign=top>
<td width=80><i>cmc</i> bit</td>
<td width=56>c</td>
<td width=328>Must be 1 if the node supports cycle master capabilities; otherwise, this value must be 0.</td>
</tr>
<tr valign=top>
<td width=80><i>isc</i> bit</td>
<td width=56>i </td>
<td width=328>Must be 1 if the node supports isochronous operations; otherwise, this value must be 0.</td>
</tr>
<tr valign=top>
<td width=80><i>bmc </i>bit</td>
<td width=56>b </td>
<td width=328>Must be 1. Indicates that the node supports bus manager capabilities.</td>
</tr>
<tr valign=top>
<td width=80><i>pmc </i>bit</td>
<td width=56>p</td>
<td width=328>Must be 1. Indicates that the node is power manager capable. The <i>pmc</i> bit is not defined by the IEEE 1394-1995 standard and is an extension created by this specification.</td>
</tr>
<tr valign=top>
<td width=80><i>cyc_clk_acc</i> field </td>
<td width=56>—</td>
<td width=328>Specifies the accuracy of the node’s cycle master clock in parts per million. If the <i>cmc</i> bit is 1, the field’s value must be between 0 and 100. If the <i>cmc</i> bit is 0, this field must be all ones.</td>
</tr>
<tr valign=top>
<td width=80><i>max_rec</i> <br>
field </td>
<td width=56>—</td>
<td width=328>Defines the maximum payload size of a block-write transaction addressed to the node. The range of the maximum payload size is from 4 to 2048 bytes. A <i>max_rec</i> value of 0 indicates that the maximum payload size is not specified. Otherwise, within the range of defined payload sizes, the maximum size is equal to 2<sup>&nbsp;<i>max_rec</i>&nbsp;+&nbsp;1</sup>. The <i>max_rec</i> field does not place any limits on the maximum payload size in asynchronous data packets—either requests or responses—that the node might transmit.</td>
</tr>
</table><br>
<p>
<b>16. Configuration ROM provides globally unique device ID</h1>
<table border=1 cols=3 frame=void rules=rows>
<tr valign=top>
<td width=30%><b>Required</b></td>
<td width=30%></td>
<td width=30%></td>
</tr>
</table><br>
<p>
The third and fourth quadlets of the bus information block of the configuration ROM must provide a globally unique device ID, which appears in Table 1 beginning at offset 40Ch. This unique 64-bit node ID is the only way to recognize the presence of a given device, because the physical device addresses can change following a bus reset. The unique ID is required for device detection and PC device driver loading.</p>
<p>
If a bus node supports multiple units, then the unique 64-bit ID must not be referential to any one unit directory in order to allow for unique identification of&nbsp;a&nbsp;unit in a multifunction device.</p>
<p>
The globally unique device ID in the bus information block must be invariant when read with quadlet read requests. That is, it must not be alterable in any way&nbsp;by software.</p>
<p>
<b>17. Root directory is located at a fixed address following the bus information&nbsp;block</h1>
<table border=1 cols=3 frame=void rules=rows>
<tr valign=top>
<td width=30%><b>Required</b></td>
<td width=30%></td>
<td width=30%></td>
</tr>
</table><br>
<p>
The root directory must be located at a fixed address following the bus information block. For example, the root directory shown in Table 1 is fixed at&nbsp;offset 414h. All other directories and leaves are addressed by entries in their parent directories starting with the root directory. The root directory contains pointers to the root-dependent directory, a node-power directory as specified in&nbsp;<i>1394 Specification for Power Management</i>, and unit directories for each independent device function.</p>
<p>
<b>18. Configuration ROM includes a unit directory for each independent device&nbsp;function</h1>
<table border=1 cols=3 frame=void rules=rows>
<tr valign=top>
<td width=30%><b>Required</b></td>
<td width=30%></td>
<td width=30%></td>
</tr>
</table><br>
<p>
A unit directory is required for independent function and control of each device unit. A valid pointer to a unit directory must be provided at offset 0x24h, as shown in Table&nbsp;1, in compliance with the general ROM format specified in IEEE&nbsp;1394-1995 and the directory format specified in ISO/IEC 13213:1994.</p>
<p>
<b>19. Each unit directory provides a valid Unit_Spec_Id and Unit_Sw_Version</h1>
<table border=1 cols=3 frame=void rules=rows>
<tr valign=top>
<td width=30%><b>Required</b></td>
<td width=30%></td>
<td width=30%></td>
</tr>
</table><br>
<p>
Within a unit directory, Unit_Spec_Id identifies the specification authority, and Unit_Sw_Version identifies the particular document describing the unit. When added to the beginning of Unit_Spec_Id, then Unit_Sw_Version uniquely identifies the unit’s software interface.</p>
<p>
<b>20. Each unit directory provides a pointer to a unit-dependent directory</h1>
<table border=1 cols=3 frame=void rules=rows>
<tr valign=top>
<td width=30%><b>Required</b></td>
<td width=30%></td>
<td width=30%></td>
</tr>
</table><br>
<p>
The unit-dependent leaf directory must provide additional information about the device unit’s vendor and model in associated leaf directories. The format of the information contained in the vendor and model leaves is specific to Unit_Spec_Id and Unit_Sw_Version.</p>
<p>
A valid pointer to a unit-dependent directory must be in accordance with the generic directory format specified in ISO/IEC 13213:1994. The unit-dependent directory must provide valid pointers to vendor and model leaves.</p>
<p>
<b>21. Vendor and model leaves support textual descriptor leaf format</h1>
<table border=1 cols=3 frame=void rules=rows>
<tr valign=top>
<td width=30%><b>Required</b></td>
<td width=30%></td>
<td width=30%></td>
</tr>
</table><br>
<p>
Textual descriptors are required for Unit_Spec_ID and Unit_Sw_Version entries in the configuration ROM in order to display this information to the user. Textual descriptors are recommended for all other configuration ROM entries. Each textual descriptor points to a leaf that contains a single character string.</p>
<p>
Alternately, the textual descriptor can point to a directory that points to one or more textual descriptor leaves corresponding to supported languages. Leaf format and textual descriptor leaves are specified in ISO/IEC 13213:1994.</p>
<p>
Textual descriptor leaves must include the following:
<ul>
<li>
The spec_type field must be “0” to correspond to a 24-bit specifier_id for a standards body, or “1” to correspond to a 24-bit specifier_id for a defining vendor company_id.<br><br></li>
<li>
The language_id field must be derived from the Windows&nbsp;NT locale number (a&nbsp;quadlet), OR’d with 0x80000000.<br><br></li>
<li>
Text string_info must be in ASCII for any language_id in the range 0–7fffffff or in Unicode for any language_id in the range 0x80000000–0xfffffff.</li></ul><p>
<b>22. Unit-dependent directory provides a pointer to the unit’s CSRs</b>
</p>
<table border=1 cols=3 frame=void rules=rows>
<tr valign=top>
<td width=30%><b>Required</b></td>
<td width=30%></td>
<td width=30%></td>
</tr>
</table><br>
<p>
Each unit’s CSRs must be in separate, non-overlapping address spaces to maintain independent device control. If CSRs can be used to interact with a device unit, the unit-dependent directory must provide a pointer to the base address of the unit’s CSRs. This provides an easy way for an application or a device driver to access the unit’s CSRs.</p>
</font></BODY>
</HTML>

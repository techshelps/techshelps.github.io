<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>General Plug and Play Requirements</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<h1><a name="generalplugplayrequirements"></a>General Plug and Play Requirements</h1>
<p>
The requirements in this section ensure easy configuration.</p>
<p>
<b>40. Each device has a Plug and Play device ID</h1>
<table border=1 cols=3 frame=void rules=rows>
<tr valign=top>
<td width=30%><b>Required</b></td>
<td width=30%></td>
<td width=30%></td>
</tr>
</table><br>
<p>
The device must have a unique device ID using the format required for its bus. For example, a PCI device must comply with PCI 2.1 and also must provide a Subsystem ID and Subsystem Vendor ID, as defined in the “PCI” chapter in Part&nbsp;3 of this guide.</p>
<p>
<b>Note: </b>Multiple-monitor support allows Display class devices to be initialized independent of the system initialization process. For this reason, system-board and add-on display devices cannot use the VGA BIOS POST routine to populate the Subsystem Vendor ID because the device’s POST code might not be executed until later in the process, after device enumeration occurs. For system-board devices, the system BIOS should populate the Subsystem Vendor ID at power on. Add-on display adapters should provide a method for populating the Subsystem Vendor ID at the point when power is applied and the device is initialized to the state that is ready for POST.</p>
<p>
<b>41. System supports conflict resolution, VGA compatibility, and extended registers</h1>
<table border=1 cols=3 frame=void rules=rows>
<tr valign=top>
<td width=30%><b>Required</b></td>
<td width=30%></td>
<td width=30%></td>
</tr>
</table><br>
<p>
When the end user changes or adds a graphics adapter to the system, setting resource assignments must not require changing jumpers or switches on either the card or the system board. The system must be able to automatically relocate the resources used by a graphics adapter on the system board when a graphics adapter expansion card is added to the system. In the event of an irreconcilable conflict with other devices on the system, the system must be able to disable one of the adapters in order to prevent the system from stalling.</p>
<p>
The system must support the VGA graphics standard for application compatibility and for the Windows clean-boot error-recovery process. If a VGA BIOS exists on the graphics adapter, it must be able to configure its base address to C0000h and one alternate address (minimum) to prevent conflicts.</p>
<p>
Extended resources are additional I/O ports, direct-access frame buffers, or data transfer areas on a graphics adapter that use more resources than does standard VGA. The Windows configuration manager must be able to map the resources to avoid conflicts with other system devices. At least one alternate configuration must be provided for each non-VGA display resource in the event of conflict during the IPL boot.</p>
<p>
The software drivers and VGA BIOS (if used) must be able to use alternate configuration register addresses. The system must be able to dynamically disable or relocate VGA resources from C0000h. It must also be possible to re-enable these resources upon system reboot or reset.</p>
<p>
For additional related requirements for multiple monitor support, see the “Multiple-Adapter and Multiple-Monitor Support” section earlier in this chapter.</p>
</font></BODY>
</HTML>

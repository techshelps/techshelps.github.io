<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Input and Controls</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><form name=x><object name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</object></form>
<h1><a name="inputcontrols"></a>Input and Controls</h1>
<p>
The ability to operate a computer directly depends on the ability to use its input devices and controls. For many people with physical or visual disabilities, using a&nbsp;computer depends either on the design of the input and control devices or on&nbsp;the&nbsp;computer’s ability to substitute other control mechanisms (such as use alternative input devices or software controls). Users who are blind cannot use input mechanisms that require hand-eye coordination, such as a mouse or a control with no tactile or auditory reference.</p>
<p>
Easier-to-operate controls are appreciated by all users, as is the ability to connect and use alternative preferred input devices.</p>
<p>
Hardware design strategies for providing greater access to input and control functions include the following:</p>
<p>
1.Allow connection, substitution, or addition of alternative input devices.</p>
<p>
A second serial port is helpful for those using SerialKeys software in Windows&nbsp;95 to provide alternative access, as well as for blind users who typically use speech synthesizers with serial connections. For users who cannot&nbsp;use standard input devices (even with software extensions such as StickyKeys), the availability of an external keyboard and mouse connection on portable systems allows the user to substitute specially designed keyboards or pointing devices.</P><BR><p>
2.Design all controls to operate from the keyboard.</p>
<p>
This allows users with restricted reach or motor skills to operate controls on the CPU, monitor, and so on that they would otherwise be unable to use. It also&nbsp;allows these users to operate the controls from any other keyboard they might use.</P><BR><p>
3.Mount all controls on the front of the device.</p>
<p>
By placing all controls facing the user, disabled users have better access.</P><BR><p>
4.Limit button design primarily to push-button controls.</p>
<p>
Push-button controls assist those with reduced motor control and those using head or mouth sticks or other alternative pointing devices.</P><BR><p>
5.Use concave buttons, especially where sustained force is required.</p>
<p>
Concave buttons help keep fingers or pointers from slipping, assisting those with reduced finger or motor control (such as tremor) and those who must use headsticks or other pointing devices.</P><BR><p>
6.Avoid twisting motions.</p>
<p>
Users with some disabilities, such as cerebral palsy or arthritis, find twisting motions difficult or impossible. Instead, use push-button or edge controls.</P><BR><p>
7.Minimize force required for operation.</p>
<p>
A maximum force of 2 Newtons for any operation is advised. For controls, use a light touch or substitute manual mechanisms with power-driven mechanisms to achieve sustained or heavy touch.</P><BR><p>
8.Make all controls operable with one hand.</p>
<p>
This allows individuals who have only one hand or who use assistive pointing devices to operate the controls.</P><BR><p>
9.Avoid capacitance-based controls.</p>
<p>
Capacitance-based controls require contact with the human skin. Avoiding these types of controls allows users with assistive pointing devices or artificial limbs to use the system.</P><BR><p>
10.Use functional grouping and layout of controls.</p>
<p>
Functional grouping assists those with low vision or cognitive impairments to quickly find the right keys. Examples of functional sets are direction keys and control keys. The keys can be grouped by color (making sure to take color blindness into account) or by other design characteristics, such as shape or feel.</P><BR><p>
11.Make controls tactually discernible.</p>
<p>
This includes locator ridges or nibs on the home keys. Flat-membrane keypads with no tactile features should be avoided because they provide no feedback on the location of the buttons.</P><BR><p>
12.Make the state of non-momentary controls tactually discernible.</p>
<p>
This allows those who have low vision or who are blind to discern the state of a control.</P><BR><p>
13.Provide tactile and audible actuation feedback for controls.</p>
<p>
People who have low vision or who are blind require non-visual signals to determine when a key has been pressed.</P><BR><p>
14.Avoid keys that cannot be read or simulated by software.</p>
<p>
Many users rely on software programs that either detect or simulate keystrokes. For example, the StickyKeys, SlowKeys, and SerialKeys features in Windows&nbsp;95 rely on this ability when compensating for a user’s difficulty with the keyboard. Blind users can also query the state of toggle keys using software. Any nonstandard keys should produce scan codes that trigger their functionality.</P><BR><p>
15.Maximize size of controls within the space available.</p>
<p>
This makes operation easier for those with low vision and those with limited dexterity who might have difficulty manipulating small controls.</P><BR><p>
16.Space the controls a sufficient distance to allow for tactile and visual discrimination.</p>
<p>
This facilitates access by users with visual impairments as well as assisting those with reduced motor control. For example, on keyboards, key-top spacing should be approximately one-half of the key width. For small controls, spacing can be tighter, but functional grouping should be maintained to minimize pressing several controls at once.</P><BR><p>
17.Design stable controls.</p>
<p>
Unintended activation should not change the adjustment state of the control. Some users with reduced motor control or blindness might inadvertently change the setting of one control while activating another. Controls or input devices should be designed to prevent this.</P><BR><p>
18.Manufacture input guards or provide mounting for guards.</p>
<p>
Keyguards go over the keyboard and allow users to press one key at a time while resting their hands on the keyguard surface. They allow those with reduced strength or reduced motor control to have more control over their input. Guards can also be made for other input devices, where applicable. The FilterKeys features in Windows 95 allows direct access for many users, but others benefit further from hardware guards. Manufacturers should also ensure grooves or holes are made in the edge of the device to allow for mounting of a&nbsp;guard.</P><BR><p>
19.Provide stable keyboards.</p>
<p>
Features such as non-slip feet assist those with reduced motor control who might otherwise inadvertently move the keyboard when trying to use it.</P><BR><p>
20.Remove left-right bias.</p>
<p>
Designing equipment with no left-right bias assists those who have use of only&nbsp;one hand or who are left-handed. Where this is not possible (for example, built-in numeric keypads) alternatives should be provided (for example, support for external numeric keypads).</P><BR></font></BODY>
</HTML>

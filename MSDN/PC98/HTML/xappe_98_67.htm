<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UNDI INITIALIZE</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana, arial, helvetica" size="2"><h1>
UNDI INITIALIZE</h1>
<table cols=2>
<tr valign=top>
<td width=108pt>Op-Code: </td>
<td width=330pt><code>PXENV_UNDI_INITIALIZE</code></td>
</tr>
<tr valign=top>
<td width=108pt>Input: </td>
<td width=330pt>ES:DI points to a <code>t_PXENV_UNDI_INITIALIZE</code> parameter structure that has been initialized by the caller.</td>
</tr>
<tr valign=top>
<td width=108pt>Output: </td>
<td width=330pt><code>PXENV_EXIT_SUCCESS</code> or <code>PXENV_EXIT_FAILURE</code> will be returned in AX, with the CF set accordingly. The status field in the parameter structure will be set to one of the values represented by the <code>PXENV_STATUS_xxx</code> constants. </td>
</tr>
<tr valign=top>
<td width=108pt>Description: </td>
<td width=330pt>This call resets the adapter and programs it with default parameters. The default parameters used are those supplied to the most recent UNDI_STARTUP call. This routine does not enable the receive and transmit units of the network adapter to readily receive or transmit packets. The application must call <code>PXENV_UNDI_OPEN</code> to logically connect the network adapter to the network.</td>
</tr>
<tr valign=top>
<td width=108pt></td>
<td width=330pt>This call must be made by an application to establish an interface to the network adapter driver. The parameter block to this call contains the pointer to the call-back routines that will be called when a packet is received or when any other interrupt occurs.</td>
</tr>
<tr valign=top>
<td width=108pt>Note:</td>
<td width=330pt>When a receive interrupt occurs, the network adapter driver queues the packet and calls the application&rsquo&rsquo;s callback receive routine with a pointer to the packet received. Then, the callback routine can either copy the packet into its buffer or decide to delay the copy to a later time. The callback receive routine always gets the pointer to the first packet in the receive queue and not to the currently received packet that generated the interrupt. </td>
</tr>
<tr valign=top>
<td width=108pt></td>
<td width=330pt>If the call-back routine decides not to copy the data from the buffer at this time, the packet will remain in the receive queue and, as a result, the later packets might be dropped when the receive queue is full. At a later time, when the application wants to copy the packet, it can call the <code>PXENV_UNDI_force_interrupt</code> routine to simulate the receive interrupt.</td>
</tr>
<tr valign=top>
<td width=108pt></td>
<td width=330pt>When the preboot code makes this call to initialize the network adapter, it passes a NULL pointer for the <code>ProtocolIni</code> field in the parameter structure.</td>
</tr>
</table><br>
</font></BODY>
</HTML>

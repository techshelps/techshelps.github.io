<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A List of Link Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="alistoflinkobjects"></a>A List of Link Objects</h1>
<p>
Although Visual Basic doesn’t do pointers, it does do objects. It is possible to use objects to create data structures in the same way that other languages use pointers to create data structures. Let’s take a brief look at a linked list class and see if you agree with my conclusion—which is that you should think twice before using this technique in real life.</p>
<p>
To create a linked list, you need something to link and something to link it with. Object-oriented linked lists are usually written with two classes—a link class representing the items in the list, and a list class that manages the links. Often there’s a third class—an iterator class—that walks through the list. Users interact with the list and the iterator classes; the link class is private. We will follow this pattern. You can follow the code by loading the Test Collections project (TCOLLECT.VBG).</p>
</font></BODY>
</HTML>

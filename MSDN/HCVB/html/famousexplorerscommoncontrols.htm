<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Famous Explorers and Common Controls</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="famousexplorerscommoncontrols"></a>Famous Explorers and Common Controls</h1>
<p>
I remember my amazement, back in the dark ages of Windows 1 and 2, when I learned that every programmer who wanted an Open dialog box had to write the code to fill the list box by reading the files out of the directory. The common dialog functions introduced in Windows 3 solved the problem for dialog boxes, but everyone still had to write their own toolbars, outlines, status bars, and what have you.</p>
<p>
Somewhere during the time frame of Windows for Workgroups, the common controls DLL was created and used to implement the toolbars of File Manager. The source code for this DLL appeared as a sample in the Software Development Kit, and it later became available on the Microsoft Developer Network. COMMCTRL.DLL became a kind of standard, though not official. It was one of three toolbar implementations used by different groups at Microsoft. (You can see the differences if you study old Microsoft applications carefully.)</p>
<p>
Microsoft didn’t necessarily start the industry trend toward toolbars, status bars, and property sheets, but it jumped on the bandwagon and eventually standardized most common controls by expanding the 16-bit COMMCTRL.DLL into COMCTL32.DLL. Visual Basic wrapped this C-specific DLL into the Microsoft Windows Common Controls—a single OCX file containing TreeView, ListView, ImageList, Toolbar, StatusBar, TabStrip, ProgressBar, and Slider. This version of Visual Basic introduces Microsoft Windows Common Controls 2 with Animation and UpDown controls. Perhaps we’ll soon see new controls providing the interface doodads introduced in Microsoft Internet Explorer.</p>
<p>
Of course, rather than hold your breath, you could turn to other hardcore programmers for assistance. Ramon Guerrero and Andrea Wyss wrote components that wrap some of the coolest new interface gadgets. I’m not going to have a chance to explain these controls in the book, but they’re provided on the companion CD with samples and READMEs.</p>
<p>
On the surface, the common controls, especially TreeView and ListView, seem to offer an easy way to create applications that look like Windows Explorer. Personally, I like the idea of Windows Explorer more than its implementation. I was looking forward to creating my own better explorer. My plan was to clone the real Explorer and then start adding features. I planned to name this application after one of my favorite explorers, Meriwether Lewis. Unfortunately, the attempt met with dismal failure in the first edition of this book and I ended up naming my pitiful explorer after Columbus, the man who never did reach the East by sailing west.</p>
<p>
Well, I’m happy to say that Meriwether has been resurrected. It took some help from new Visual Basic features such native code and better access to interfaces. Also, I’ve learned a lot and spent more time on the problem. Figure 11-12 shows Meriwether at publication time. I might be able to get a better version on the companion CD. The current version isn’t full-featured, and the performance doesn’t quite match the Windows Explorer. But it’s a reasonably efficient program that you can enhance to create your own better explorer.</p>
<p><img src="f11te12.gif"></p><p>
<b>Figure 11-12.&nbsp;Meriwether explores the northwest.</b></p>
<p>
Writing a real explorer program is a major task that I didn’t have time to finish or explain completely, but I will use Meriwether (and some other samples) to briefly examine common controls. The Visual Basic documentation explains normal use, so I’ll focus on some problems and workarounds you won’t find in the manual.</p>
</font></BODY>
</HTML>

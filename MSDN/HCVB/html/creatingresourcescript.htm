<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Resource Script</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="creatingresourcescript"></a>Creating a Resource Script</h1>
<BR>
A <i>resource script</i> is a text file listing all the data used in a program. It traditionally bears the filename extension RC. After writing your resource script, you compile it into a resource file (RES) and add this file to your Visual Basic project. Visual Basic automatically uses your resources in the environment and compiles them into the EXE file.</p>
<BR>
The easiest way to understand resource scripts is to look at a sample. Here’s the one used by the Test Resources program (TRES.VBP):</p>
<pre><code>// TRES.RC - Resource script for Test Resources program<BR><BR>//$ Const ordAppBmp = 101<BR>#if defined(US)<BR>101     BITMAP  “MANHEAD.BMP”<BR>#elif defined(SW)<BR>101     BITMAP  “PIGHEAD.BMP”<BR>#else<BR>#error “No language”<BR>#endif<BR><BR>//$ Const ordAppIcon   = 301<BR>#if defined(US)<BR>301     ICON    “FLGUSA.ICO”<BR>#elif defined(SW)<BR>301     ICON    “FLGSWI.ICO”<BR>#endif<BR><BR>//$ Const ordAppCursor = 401<BR>#if defined(US)<BR>401     CURSOR  “MANHAND.CUR”<BR>#elif defined(SW)<BR>401     CURSOR  “PIGTAIL.CUR”<BR>#endif<BR><BR>//$ Const ordWavGrunt  = 501<BR>#if defined(US)<BR>501     WAVE    “GRUNT.WAV”<BR>#elif defined(SW)<BR>501     WAVE    “OINK.WAV”<BR>#endif<BR><BR>//$ Const ordTxtData   = 601<BR>601     OURDATA<BR>BEGIN<BR>#if defined(US)<BR>       0x7550, 0x6572, 0x7220, 0x7761<BR>       0x6420, 0x7461, 0x2061<BR>#elif defined(SW)<BR>       0x7255, 0x7065, 0x7961, 0x6120<BR>       0x7277, 0x6965, 0x6120, 0x6174<BR>       0x6564, 0x2079<BR>#endif<BR>END<BR><BR>//$ Const ordFrmTitle  = 1001<BR>//$ Const ordMnuFile   = 1101<BR>//$ Const ordMnuGrunt  = 1102<BR>//$ Const ordMnuExit   = 1103<BR>//$ Const ordLstTitle  = 1201<BR>//$ Const ordLstWhat   = 1301<BR>//$ Const ordLstWhy    = 1302<BR>//$ Const ordLstWhere  = 1303<BR>//$ Const ordLstWho    = 1304<BR>//$ Const ordLstWhen   = 1305<BR>STRINGTABLE<BR>BEGIN<BR>#if defined(US)<BR>    1001    “Test Resources”<BR>    1101    “&amp;File”<BR>    1102    “&amp;Grunt”<BR>    1103    “E&amp;xit”<BR>    1201    “Strings:”<BR>    1301    “What’s the story?”<BR>    1302    “Why are we here?”<BR>    1303    “Where are they now?”<BR>    1304    “Who’s got the ball?”<BR>    1305    “When do we eat?”<BR>#elif defined(SW)<BR>    1001    “Estay Esourcesrei”<BR>    1101    “&amp;IleFey”<BR>    1102    “&amp;UntGray”<BR>    1103    “ItE&amp;xeigh”<BR>    1201    “Ingstray:”<BR>    1301    “At’swhay ethei orystay?”<BR>    1302    “Ywhay rahey ewey erehay?”<BR>    1303    “Erewhay rahey eythey ouney?”<BR>    1304    “Oosway otgay ethei allbay?”<BR>    1305    “Enwhey oodae eway teeay?”<BR>#endif<BR>END</code></pre>
<BR>
Although this script uses conditional code to create American and Swinish resource files from the same script file, you can just as easily create separate scripts for each language. The conditional statements shown here use the C preprocessor language, which looks a lot like the Visual Basic conditional compilation statements except for lowercase characters and a few other minor differences. Also notice that you must double the backslash character because the backslash is an escape character in C. Of course, your resource compiler might use a different syntax. I expect vendors to create Basic-style resource compilers real soon now.</p>
<BR>
The resource script contains Visual Basic constants in C-style comments with a unique leading character (//$). This makes it easy to write a wizard program that will search for constant comments and convert them to a Visual Basic module (or a type library). It’s easy to maintain the comments next to their data in the resource script, but each time you compile the resource script, you must also update the constant module. You could probably carry this idea further, generating initialization code as well as constants.</p>
</font></BODY>
</HTML>

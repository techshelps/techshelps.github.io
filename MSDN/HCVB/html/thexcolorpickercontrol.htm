<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The XColorPicker Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="thexcolorpickercontrol"></a>The XColorPicker Control</h1>
<p>
The CColorPicker class is great as far as it goes, but in some applications you might want to have a color palette always available on the form instead of one that pops up in response to your clicking a button. In that case, you want a control. The XColorPicker control looks like the FColorPicker form except that it is on a UserControl. Instead of returning the selected color through a property, it generates a Picked event when a color is selected. You can set the initial color in the Properties window at design time.</p>
<p>
Of course, there are significant code differences between a form and a control. The control has a design-time life as well as a run-time life. Those differences caused me quite a bit of trouble, but they aren’t interesting enough to show here. You can see the details in COLORPICKER.CTL.</p>
<p>
<b>CHALLENGE&#09;</b>Unlike the color picker in the Properties window, CColorPicker and XColorPicker do not include rows for custom colors, nor do they provide a separate tab for picking a system color. That’s your job.</p>
</font></BODY>
</HTML>

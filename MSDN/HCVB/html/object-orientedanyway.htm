<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object-Oriented Anyway</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="object-orientedanyway"></a>Object-Oriented Anyway</h1>
<p>
So Visual Basic comes out with a rating of 1.9 as an object-oriented language. I’d set a higher cutoff level for what can be considered a “real” object-oriented language—maybe about 2.5. Languages like C++, Delphi, Java, and SmallTalk rate above that line, although they, too, have their faults. But object-orientation isn’t the only basis for rating a language. Visual Basic has many advantages those other languages lack.</p>
<p>
Regardless of limitations, you can certainly write object-oriented programs with Visual Basic. In fact, all my programs are object-oriented. I try not to use “irregular” modules any more than necessary, although avoiding them turns out to be harder than you might expect or hope it to be. Let’s take a closer look at some of the things that make object-oriented programming object-oriented.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using an interface</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="usinginterface"></a>Using an interface</h1>
<BR>
We have an interface. We have a class that implements it. Now for the tricky part: the code that actually uses the filter object. The Bug Wizard program has a control array of command buttons whose indexes correspond to the filter types in the EFilterType enum. The code to perform the appropriate filter action on a text file looks like this:</p>
<pre><code>Private Sub cmdBug_Click(Index As Integer)<BR>    HourGlass Me<BR>    ‘ CBugFilter part of object<BR>    Dim bug As CBugFilter<BR>    Set bug = New CBugFilter<BR>    ‘ IFilter part of object<BR>    Dim filter As IFilter<BR>    Set filter = bug<BR>    ‘ Set FilterType property on bug variable<BR>    bug.FilterType = Index<BR>    ‘ Set Source property on filter variable<BR>    filter.Source = sFileCur<BR>    ‘ Pass either variable to FilterTextFile<BR>#If fOddDayOfTheMonth Then<BR>    FilterTextFile bug<BR>#Else<BR>    FilterTextFile filter<BR>#End If<BR>    HourGlass Me<BR>End Sub</code></pre>
<BR>
The HourGlass sub is a useful little procedure that displays <BR>an hourglass cursor during an operation and then removes it. <BR>Check it out in UTILITY.BAS. Always use a pair of HourGlass <BR>procedures—the first to display the hourglass cursor and the <BR>second to remove it.</p>
<BR>
If you’re like me, you might have to study this code for a few minutes before you get it. Notice that there’s only one object (because there’s only one New statement), but there are two object variables that refer to that object—and each object variable has a different type. You set the <i>filter</i> variable to the <i>bug</i> variable. This works because a CBugFilter is an IFilter (because it implements IFilter).</p>
<BR>
Next we set the properties. We set the FilterType of the <i>bug</i> object. We set the Source of the <i>filter</i> object. It wouldn’t work the other way around because a CBugFilter doesn’t have a Source, and an IFilter doesn’t have a FilterType. Notice that we use <i>filter</i> as if it had both public Source and Target properties, even though we know the real properties in CBugFilter are private and that their names are IFilter_Source and IFilter_Target.</p>
<BR>
When you get ready to pass the object to the FilterTextFile function, however, it doesn’t matter which object variable you pass because the FilterTextFile function is defined to take an IFilter parameter. You can pass the <i>filter</i> object variable because it has the same type as the parameter. But you can also pass the <i>bug</i> object variable because it is also an IFilter (because CBugFilter implements IFilter). It doesn’t work the other way around. An IFilter is not a CBugFilter. It’s the object itself, not the object variable, that has type CBugFilter. This is an interesting concept—an object with a different type than the object variable that references it.</p>
<BR>
I can’t say that I find this intuitive. The virtual method syntax used in most other object-oriented languages seems more intuitive. But the syntax grows on you the more you use it.</p>
<BR>
I do have one complaint. Visual Basic lacks class type casting. Most object-<BR>oriented languages allow you to cast the outer type to the inner type. Instead of creating a separate <i>filter</i> variable, you could cast the <i>bug</i> variable to an IFilter like this:</p>
<pre><code>‘ Set Source property on filter part<BR>IFilter(bug).Source = sFileCur</code></pre>
<BR>
Chapter 10 will tell how to fake this syntax.</p>
</font></BODY>
</HTML>

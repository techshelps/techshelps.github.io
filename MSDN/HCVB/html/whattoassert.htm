<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What to Assert</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="whattoassert"></a>What to Assert</h1>
<BR>
Asserting is an art form. Languages have been specifically designed—Eiffel comes to mind—to encourage it. Books have been written about it. Steve Maguire’s <i>Writing Solid Code</i> (Microsoft Press, 1993) is an excellent book on asserting and other debugging topics, although you’ll have to translate from C to Basic as you read it. I can only touch on the subject here, but you’ll see examples throughout the sample code.</p>
<BR>
The most important thing to know about debugging code is when to assert and when to validate. Validating means checking the input at run time and taking <BR>appropriate action. If you ask the user for a number between 1 and 10, you have to recognize when the user enters 11 and ask again politely (or handle 11 anyway, or round down to 10, or delete everything on the idiot’s hard disk, or whatever). But you can’t assert.</p>
<BR>
Here’s an example. Lots of Windows API functions return error values, but errors don’t always mean the same thing. A common Windows sequence (as you’ll see in future chapters) is to create, use, and delete. It works like this:</p>
<pre><code>hSomething = CreateSomething(x, y, clr, AND_SO_ON)<BR>‘ Do something with hSomething<BR>f = DeleteSomething(hSomething)</code></pre>
<BR>
In this case, CreateSomething either returns a handle to a Something or returns a 0 handle (the constant <i>hNull</i>) indicating failure. DeleteSomething returns True or False, depending on whether you can delete the object.</p>
<BR>
If you get <i>hNull</i> back from CreateSomething, it’s not your fault. There’s probably not enough memory, or Windows has used up all the Somethings. It’s your responsibility to politely tell the user to choose some other action. If Delete&shy;Something fails, however, it probably <i>is</i> your fault. You passed <i>hSomething</i> to the wrong procedure, or you traded an <i>hSomething</i> for an <i>hAnything</i> and forgot to swap it back. For whatever reason, the <i>hSomething</i> variable no longer contains a Something handle. There’s no point telling the user. What could you say? You must do some soul-searching to fix the bug. But an assertion such as this one catches the mistake:</p>
<pre><code>hSomething = CreateSomething(x, y, clr, AND_SO_ON)<BR>If hSomething = hNull Then <BR>    BackWayOut<BR>    Exit Sub<BR>End If<BR>‘ Do something with Something<BR>f = DeleteSomething(hSomething)<BR>BugAssert f</code></pre>
<BR>
<b>WARNING</b>&#09;Resist the temptation to combine assertions with other statements. The line</p>
<pre><code>BugAssert DeleteSomething(hSomething)</code></pre>
<BR>
seems to work, but if you replace <i>BugAssert</i> with <i>‘ BugAssert</i>, you’ll get an unpleasant surprise when DeleteSomething disappears along with the assertion.</p>
<BR>
Incidentally, if you notice more assertions in the examples in early chapters of this book than in late ones, well…that’s no excuse for you. Never let tight deadlines compromise your efforts to write correct code. It takes longer to debug than to write it right the first time.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>StrSpan and StrBreak</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="strspanstrbreak"></a>StrSpan and StrBreak</h1>
<BR>
<i>Bruce:</i> In C, the basic building blocks of parsing are strspn and strcspn. My Basic names for them are StrSpan and StrBreak. To use StrSpan, you pass it the string you want to parse and a list of separator characters—space, tab, and comma—and line-break characters if the string can span multiple lines. StrSpan returns the position of the first character that is not a separator. You pass StrBreak <BR>the same arguments, and it returns the position of the first character that is a separator.</p>
<BR>
You can probably guess how to use these functions. Find the start of a token with StrSpan, find the end of the token with StrBreak, cut out the token, find the start of a token with StrSpan, find the end of the token with StrBreak…and so on to the end of the string. That’s pretty much what GetToken does, but first let’s take a look at StrSpan:</p>
<pre><code>Function StrSpan1(sTarget As String, sSeps As String) As Integer<BR><BR>    Dim cTarget As Integer, iStart As Integer<BR>    cTarget = Len(sTarget)<BR>    iStart = 1<BR>    ‘ Look for start of token (character that isn’t a separator)<BR>    Do While InStr(sSeps, Mid$(sTarget, iStart, 1))<BR>        If iStart &gt; cTarget Then<BR>            StrSpan1 = 0<BR>            Exit Function<BR>        Else<BR>            iStart = iStart + 1<BR>        End If<BR>    Loop<BR>    StrSpan1 = iStart<BR><BR>End Function</code></pre>
<BR>
StrBreak is identical except that the loop test is reversed:</p>
<pre><code>‘ Look for end of token (first character that is a separator)<BR>Do While InStr(sSeps, Mid$(sTarget, iStart, 1)) = 0</code></pre>
<BR>
<i>Archaeologist’s Note: Names of functions and variables have been changed to protect the guilty. Joe Hacker’s diatribes against the stupid naming conventions of the original have been edited out of this text, along with other rude remarks deemed irrelevant. The code has been updated to reflect the Visual Basic language, ignoring QuickBasic syntax differences. Different versions of the procedures are numbered. Interested historians can find the original code in most versions of QuickBasic, the Basic Professional Development System, MS-DOS 5, and Windows NT.</i></p>
<BR>
<i>Joe: </i>If they’re identical except for one line, why have two functions? Why not have one function—say, StrScan—with a flag argument that can be either Span or Break? Put the loop test in a conditional. That should save some code.</p>
<BR>
<i>Jane: </i>Yeah, but at what cost? You might loop through these functions hundreds of times if you’re parsing a big file. Is the size cost of duplicating tiny functions worth the cost of adding an extra test in a loop that will be called in a loop? Besides, the interface feels better with separate functions.</p>
<BR>
<i>Joe: </i>I don’t care what “feels” better, but I guess I’ll buy your performance argument. Let’s stick with two functions.</p>
<BR>
<i>Mary: </i>Any other comments?</p>
<BR>
<i>Jane: </i>The length <i>cTarget</i> is calculated just once, outside the loop. That’s good. The body of the loop looks pretty clean. The loop test with Mid$ called inside InStr looks messy.</p>
<BR>
<i>Joe: </i>It’s taking one character at a time off the test string and searching for it in the separator list. Kind of an unusual use of InStr. You don’t care where you find the character, only <i>whether</i> you find it. I can’t think of a better way to do it, short of rewriting it in a real language, like C.</p>
<BR>
<i>Bruce: </i>Well, if StrSpan is OK, StrBreak is also OK because it’s the same except backward. Let’s move on to GetToken.</p>
</font></BODY>
</HTML>

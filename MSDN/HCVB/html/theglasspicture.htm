<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Glass Picture</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="theglasspicture"></a>The Glass Picture </h1>
<p>
The CPictureGlass class does animation the hard way. You pass it the canvas surface you want to draw on and the picture you want to make transparent along with the color you want to be considered the background. Optionally, you can provide <i>x</i> and <i>y</i> coordinates for the point on which you want the picture to be centered.</p>
<p>
Behind the scenes, CPictureGlass makes a copy of the background surface that will be covered by the picture, punches a hole in it using a mask, plunks a masked copy of the picture into the hole, and puts the modified background back onto the canvas. So there you have it: transparency. Not only that, but CPictureGlass keeps a copy of the last background used and restores it before moving on to the next position. Now you have moving transparency.</p>
<p>
CPictureGlass works kind of like a PictureBox control because the original model in the first edition of this book was that the class would work like a transparent PictureBox. Of course, you couldn’t create controls in Visual Basic version 4, so CPictureGlass had to do some hacks by delegating to a real PictureBox. This version abandons the internal PictureBox control but maintains some methods and properties that look suspiciously like those of a PictureBox.</p>
</font></BODY>
</HTML>

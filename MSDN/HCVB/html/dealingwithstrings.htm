<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dealing with Strings</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="dealingwithstrings"></a>Dealing with Strings</h1>
<p>
An integer is an integer is an integer in any language, but every language has its own ideas about strings. In Basic, a string is supposed to be a black box. You put data in through Basic statements; the system allocates, moves, and resizes the data without your knowledge or interference; you get data back in the expected format. In C, in contrast, you must understand exactly how strings are stored in memory to process them correctly and efficiently. Nothing is allocated, moved, or resized unless you do it.</p>
<p>
This fundamental difference between C strings and Basic strings is probably the biggest problem you face in dealing with the Windows API. Essentially, you have to get un-Basic with strings—you have to know what Basic programmers aren’t supposed to know.</p>
</font></BODY>
</HTML>

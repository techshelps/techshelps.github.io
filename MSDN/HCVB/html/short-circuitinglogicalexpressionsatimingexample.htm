<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Short-Circuiting Logical Expressions: A Timing Example</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="short-circuitinglogicalexpressionsatimingexample"></a>Short-Circuiting Logical Expressions: A Timing Example</h1>
<BR>
As an example, consider the problem of short-circuiting logical expressions. Assume the following code:</p>
<pre><code>If i &lt;= 20 And i &gt;= 10 Then i = i + 1</code></pre>
<BR>
Looking at this logically, you can see that if <i>i</i> is greater than 20, it’s pointless to check whether it’s also less than 10. Some compilers and interpreters know this and skip the second condition (<i>short-circuiting</i> is the technical term) if the first condition settles the matter. But is Visual Basic among them? Consider an alternative but equivalent statement:</p>
<pre><code>If i &lt;= 20 Then If i &gt;= 10 Then i = i + 1</code></pre>
<BR>
In this case, I’m not trusting Visual Basic to optimize. I tell it to always check the first condition and to check the second only if the first is true. If Visual Basic can optimize the first example, these two pieces of code should run at about the same speed. There’s only one way to find out:</p>
<pre><code>Function LogicalAndVsNestedIf(cIter As Long) As String<BR>    Dim sec As Currency, secOut As Currency<BR>    Dim sMsg As String, i As Integer, iIter As Long<BR><BR>    i = 21<BR>    ProfileStart sec<BR>    For iIter = 1 To cIter<BR>        If i &lt;= 20 And i &gt;= 10 Then i = i + 1<BR>    Next<BR>    ProfileStop sec, secOut<BR>    sMsg = sMsg &amp; “If a And b Then: “ &amp; secOut &amp; “ sec” &amp; sCrLf<BR>    <BR>    i = 21<BR>    ProfileStart sec<BR>    For iIter = 1 To cIter<BR>        If i &lt;= 20 Then If i &gt;= 10 Then i = i + 1<BR>    Next<BR>    ProfileStop sec, secOut<BR>    sMsg = sMsg &amp; “If a Then If b Then: “ &amp; secOut &amp; “ sec” &amp; sCrLf<BR><BR>    LogicalAndVsNestedIf = sMsg<BR><BR>End Function</code></pre>
<BR>
The results will vary, depending on the computer and operating system used, on what other programs are running at the same time, whether the code is compiled or not, and on whether the moon is full. I ran all the timing tests in this book on a 90-MHz Pentium-based computer running Windows 95. The “Performance” sidebar on page 34 indicates the results. Although the timings are significantly different for native code versus p-code, you can reach a reasonable conclusion: no short-circuit.</p>
<BR>
Just so you don’t think that Visual Basic is unsophisticated and unnecessarily inefficient, it has its reasons. In Visual Basic, the And and Or operators double as logical operators and bitwise operators. You would have a different situa&shy;&shy;tion with the following line:</p>
<pre><code>If a Or b Or c = &amp;HEACC Then Exit Sub</code></pre>
<p>
In this case, you’re combining the bits of <i>a</i>, <i>b</i>, and <i>c</i> and then testing to see whether the result has a specific value. A short-circuit would be inappropriate. But for Basic to know that, it would need to look at the entire expression and make some assumptions (possibly erroneous) about your intentions. For example, Basic could assume that an expression with an equal sign is always bitwise but that an expression without an equal sign is always logical. That’s an iffy assumption, and Visual Basic doesn’t make it.</p>
<p>
<b>WARNING</b>&#09;Visual Basic’s failure to short-circuit logical expressions can <BR>cause problems other than poor performance. Consider the <BR>following expression:<pre><code>If (iStart &gt; 1) And Mid$(s, iStart - 1, 1) = “ “ Then</code></pre>
<BR>
The first condition attempts to protect against an illegal condition in the second. If <i>iStart</i> is 1, the second argument of Mid$ is 0, which causes an illegal function call. You might hope that since the first condition is false, the second illegal statement won’t be executed and you won’t get that obnoxious error. Wrong!</p>
<BR>
<b>Problem:</b>  Does Visual Basic short-circuit logical expressions? Or does a logical And operation take the same time as an equivalent nested If/Then?</p>
<table>
<tr valign=top>
<td>
<b>Problem</b></td>
<td>
<b>Native Code</b></td>
<td>
<b>P-Code</b></td>
</tr>
<tr valign=top>
<td>
If a And b Then</td>
<td>
.0215 sec</td>
<td>
.5307sec</td>
</tr>
<tr valign=top>
<td>
If a Then If b Then</td>
<td>
.0220 sec</td>
<td>
.3518 sec</td>
</tr>
</table><BR>
<BR>
<b>Conclusion:</b>  This is the first of many timing notes. Don’t take the numbers too seriously; they’re for rough comparison only. For real results, run the Time It program yourself on machines like the ones you expect your customers to use. In this case, however, the difference in p-code is dramatic enough to justify a conclusion: Visual Basic does not short-circuit logical expressions. But you can also see that for compiled code there is virtually no difference. The numbers above actually show an insignificant edge for the logical expression. But remember, this result is for a very trivial example in my TimeIt test. You wouldn’t get the same result if the right side of the expression were actually an expensive function call.</p>
</p>
</font></BODY>
</HTML>

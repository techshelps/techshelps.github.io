<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using a Drop Stack</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="usingdropstack"></a>Using a Drop Stack</h1>
<BR>
Edwina uses two drop stacks—one for the current file and another for the find text. XEditor’s FSearch form also uses two drop stacks—one for the find text and another for the replace text. To make matters even more interesting, the find stack on Edwina’s toolbar needs to be synchronized with the find stack on the FSearch form. And both find stacks are intimately tied to the lower-level FindWhat and ReplaceWith properties of the XEditor control. We’re not going to cover every &shy;detail, but we’ll hit the high points.</p>
<BR>
Let’s start on the FSearch form with the dropWhat control that specifies what to find. By the time the XEditor control gets a command to load the FSearch form, it might already have a list of search strings. In Edwina, those search strings could have been entered with the drop stack on the toolbar. Your client program might create the drop stack in some other way. In any case, the FSearch form has to initialize the list with the following code (inside a <i>With Editor</i> block) in Form_Load:</p>
<pre><code>Dim i As Long<BR>dropWhat.MaxCount = .FindWhatMax<BR>For i = .FindWhatCount To 1 Step -1<BR>    dropWhat.Text = .FindWhat(i)<BR>Next</code></pre>
<BR>
There are two sides to this operation. On the right side are the FindWhatMax, FindWhatCount, and FindWhat properties of the XEditor control. They manage the real search list that will be used by the FindNext method. The MaxCount and Text properties of the XDropStack control manage the display list.</p>
<BR>
I’ll get back to the related XEditor properties shortly, but first let’s look at the only XDropStack event that really matters:</p>
<pre><code>Private Sub dropWhat_Completed(Text As String)<BR>    If fInCompleted Then Exit Sub<BR>    fInCompleted = True<BR>    lblMessage.Caption = sEmpty<BR>    Editor.FindWhat = Text<BR>    fInCompleted = False<BR>End Sub</code></pre>
<BR>
In a combo box, several events can create a new entry. First, there’s clicking an item in the drop-down list. Second, there’s typing in an entry in the text field. And third, there’s losing focus. When you handle a combo box, you usually need to handle all of these events separately to recognize new entries. Well, the XDropStack takes care of all three, combining them into a Completed event that signals a new entry without telling you where it came from. You can use the result as you see fit. Here, the FSearch form just assigns the result back to the XEditor control and clears the status message.</p>
<BR>
The only other place the FSearch form uses the dropWhat control is in the Click event procedure of the Find Next button:</p>
<pre><code>Private Sub cmdFindNext_Click()<BR>With Editor<BR>    Dim i As Integer<BR>    ' Must be something to find<BR>    If dropWhat.Text = sEmpty Then<BR>        dropWhat.SetFocus<BR>        Exit Sub<BR>    End If<BR>    ' When Replace user selects Next once, make it default<BR>    cmdFindNext.Default = True<BR>    ' Find next item<BR>    i = .FindNext(dropWhat)<BR>    ' Deal with failed search<BR>    If i = 0 Then<BR>        lblMessage.Caption = &quot;Text not found&quot;<BR>        .SelLength = 0<BR>    Else<BR>        lblMessage.Caption = &quot;Text found: &quot; &amp; .Line &amp; &quot;,&quot; &amp; .Column<BR>    End If<BR>    dropWhat.SetFocus<BR>End With<BR>End Sub</code></pre>
<BR>
This code doesn’t even need to read the Text property because the text was already assigned in the Completed event. The only thing it needs the dropWhat control for is to manage the focus.</p>
</font></BODY>
</HTML>

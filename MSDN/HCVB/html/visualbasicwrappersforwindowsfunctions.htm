<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Visual Basic Wrappers for Windows Functions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="visualbasicwrappersforwindowsfunctions"></a>Visual Basic Wrappers for Windows Functions</h1>
<p>
Although most of the internal Windows data can be read or modified by Windows functions, few of those functions have obvious names and operations. If Windows has widgets, that doesn’t mean you’ll find GetWidget and SetWidget functions in the Windows API.</p>
<p>
The next sections describe the workarounds for performing Windows operations in Visual Basic as well as some of the reasons you might want to take the Windows Way even in Visual Basic.</p>
</font></BODY>
</HTML>

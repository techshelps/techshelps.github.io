<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Other Properties and Methods</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="otherpropertiesmethods"></a>Other Properties and Methods</h1>
<BR>
The Create and Draw methods are the heart of the CPictureGlass class, but the class also needs to supply other properties and methods so that users can move the transparent picture. I chose member names based on the familiar ones used by the PictureBox control. Figure 7-10 on the following page shows a diagram of the CPictureGlass class.</p>
<BR>
Let’s start with the Move method, which is interesting more for how it handles optional arguments than for how it handles the image:</p>
<pre><code>Public Sub Move(xLeftA As Long, Optional yTopA As Long = -1)<BR>With cvsDst<BR>    BugAssert fExist<BR>    xLeft = .ScaleX(xLeftA, .ScaleMode, vbPixels)<BR>    If yTopA &lt;&gt; -1 Then yTop = .ScaleY(yTopA, .ScaleMode, vbPixels)<BR>    Draw<BR>End With<BR>End Sub</code></pre>
<BR><img src="f07te10.gif"></p><BR>
<b>Figure 7-10. A diagram of CPictureGlass.</b></p>
<BR>
Most Move methods have two additional arguments, Width and Height. But using these arguments changes the size of the object. I suppose I could have made CPictureGlass resizable by using StretchBlt instead of BitBlt, but I’ll leave that to you. For now you can’t change the size, so these arguments aren’t implemented. Because the Move method changes the position of the object, it calls the Draw method to erase the last image and redraw the new one.</p>
<BR>
The Left and Top Property Let procedures are implemented in the same way as Move. The Width and Height Property Let procedures aren’t implemented, for the same reason that Move’s Width and Height parameters aren’t implemented. The Property Get routines for Left, Top, Width, and Height simply pass back the internal variables representing these properties. Since position and size properties are maintained in pixels, the numbers need to be scaled:</p>
<pre><code>Property Get Left() As Single<BR>    BugAssert fExist<BR>    Left = cvsDst.ScaleX(xLeft, vbPixels, cvsDst.ScaleMode)<BR>End Property</code></pre>
<BR>
The Visible property sets or returns the internal <i>fVisible </i>variable. The MaskColor property returns the <i>clrMask </i>variable. I don’t provide a Property Let for Mask&shy;Color, but you could add one. You’d need to create a new mask (<i>hdcMask</i>) whenever a user changed the property.</p>
<BR>
<b>Hardcore Painting</b></p>
<BR>
Help is available for all you hardcore programmers who want to do tricks with bitmaps, but I can’t even tell you the names of all the APIs, much less how to use them from Visual Basic. Start with DirectX. You might also want to think about Direct3D and ActiveMovie. Those three should provide enough fodder for three books the size of this one. Good luck. You’re going to need it because from my preliminary look, these APIs were specifically not designed with Visual Basic programmers in mind. There is at least one commercial control available that attempts to wrap DirectX up in a Basic-friendly wrapper, but I can’t say more because I haven’t tried it.</p>
</font></BODY>
</HTML>

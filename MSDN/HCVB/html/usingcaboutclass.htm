<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the CAbout Class</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="usingcaboutclass"></a>Using the CAbout Class</h1>
<BR>
All you need to create your own About dialog box is to write some code in the event procedure from the About menu of the All About program, as shown in the following sample:</p>
<pre><code>Private Sub mnuAbout_Click()<BR>    Dim about As New CAbout<BR>    With about<BR>        On Error GoTo FailAbout<BR>        ' Set properties<BR>        Set .Client = App<BR>        Set .Icon = Forms(0).Icon<BR>        .UserInfo(2) = &quot;Don't even think &quot; &amp; _<BR>                       &quot;about stealing this program&quot;<BR>        ' Load after all properties are set<BR>        .Load<BR>        ' Modal form will return here when finished<BR>        Exit Sub<BR>    End With<BR>FailAbout:<BR>        MsgBox &quot;I don't know nuttin'&quot;<BR>End Sub</code></pre>
<BR>
Figure 11-2 shows the results.</p>
<BR><img src="f11te02.gif"></p><BR>
<b>Figure 11-2. About All About.</b></p>
<BR>
You create and load a CAbout object, but what you see is the FAbout form. Forms can’t be public in a component (such as VBCore), so you have to wrap the internal form in a public class. Actually, I think of this as a benefit, not a burden. If you could expose a form without a wrapper, clients would get &shy;access to all the properties and events of the form. It wouldn’t be an About form if the user could modify anything through the standard form methods and properties.</p>
<BR>
The CAbout class gets its information from several sources. You pass an App object through the Client property to provide the title and other infor&shy;-<BR>mation about the program. You can pass an icon through the Icon property. The UserInfo array property lets you enter three lines of general text information. The example provides only one line, but puts it in position 2 of the array so that it will be centered. The InfoProg, Copyright, and Comments properties (not used in the sample) allow you to override information that the form ordinarily figures out from the Client property. Additional system information comes from the System object described in “The CSystem Class and the System Object” later in this chapter. The form gets its undocumented animation command from...well, if I told you, it wouldn’t be undocumented.</p>
<BR>
After you set the properties you want displayed, call the Load method to make the form appear. Unlike the wrapping forms of most classes, the CAbout class doesn’t return any information from the user, so there’s no need to check properties after the form terminates.</p>
<BR>
Unlike most of the classes in this book, CAbout and its FAbout form aren’t in VBCore. They’re in a separate component called VisualCore, along with all the other classes that wrap forms and thus have a user interface. That’s so that VBCore can be marked for Unattended Execution, a subject I’ll discuss in the “Threads and Synchronization” section later in this chapter. The other visual classes in VisualCore include CColorPicker (discussed later in this chapter) and COpenPictureFile (used by the Fun ’n Games program).</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="initializingobjects"></a>Initializing Objects</h1>
<BR>
The CThing object might be complete as soon as it’s created, but in real life most objects aren’t meaningful at the instant of creation. Visual Basic allows you to initialize a class or a form with the Initialize event and clean it up with the Terminate event, but that’s rarely enough information to construct a working object; most objects need more information from the user before their state is complete. This isn’t a problem with controls and forms because their initial state can be set with properties at design time. But classes can be initialized only <BR>in code.</p>
<BR>
What you need (and what most object-oriented languages have) is a means to specify initialization data as part of the New syntax. If Visual Basic had constructors like other object-oriented languages, the syntax might look like this:</p>
<pre><code>Set thing = New CThing(1, “Object”) ‘ You can’t do that</code></pre>
<BR>
Instead, if you want to pass initialization data to a class, you must do so by convention and hope that your users will follow the rules. A traditional name I use for initialization methods is Create:</p>
<pre><code>thing.Create 1, “Object”            ‘ Initialize with Create method</code></pre>
<BR>
Another convention I use with objects that have one primary property is to make that one property the default:</p>
<pre><code>Dim shsTitle As CSharedString<BR>Set shsTitle = New CSharedString<BR>shsTitle = “Share and share alike”  ‘ Initialize with default property</code></pre>
<BR>
In Visual Basic, most objects of substantial size and complexity will be invalid between the time you create them with New and the time you initialize them with a Create method (or whatever other technique you choose). You also have to worry about what to do if the user fails to follow your initialization convention—assert, raise an error, or let it be.</p>
<BR>
The lack of initialization—both of variables and of objects—is, in my opinion, the greatest flaw of the Visual Basic language. No other major high-level &shy;language shares this flaw. You’ll hear a lot more about initialization problems in this book. If I start to sound like a broken record, it’s because the language feels like a broken record.</p>
</font></BODY>
</HTML>

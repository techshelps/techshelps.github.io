<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Walking the Cthings collection</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="walkingcthingscollection"></a>Walking the CThings collection </h1>
<BR>
The wizard does an even better job on the CThingWalker class. You can simply go through and eliminate the search-and-replace comment markers, accepting all the wizard’s suggestions. The wizard’s suggestions are optimized for array-based collections; often you can use them with little or no change. Without showing all the code, I’ll just accept the suggestion to name the state variable <i>iCur </i>and initialize it to 0.</p>
<BR>
Wait a minute. If the array had the values 1 through 10, why would I initialize <i>iCur </i>to 0? Let’s take a look at IVariantWalker_More to see why:</p>
<pre><code>‘ Implement IVariantWalker methods<BR>Private Function IVariantWalker_More(v As Variant) As Boolean<BR>    ‘ Move to next element<BR>    iCur = iCur + 1<BR>    ‘ If more data, return True and update data<BR>    If iCur &lt;= connect.Count Then<BR>        IVariantWalker_More = True<BR>        v = connect.Things(iCur)<BR>    End If<BR>End Function</code></pre>
<BR>
The More method advances to the next element and returns that element. You need to start <i>iCur</i> at 0 so that when you advance the first time through, you end up pointing at the first element. This works with an array-based collection, but sometimes you’ll need to check a flag or other condition to identify the first element and handle it differently. In this array-based collection, you can use the Count property to identify the last element, but other types of collections will find the end with other techniques.</p>
<BR>
The Reset and Skip methods reinitialize the state variable and advance it the given number of places, respectively:</p>
<pre><code>Private Sub IVariantWalker_Reset()<BR>    ‘ Move to first element<BR>    iCur = 0<BR>End Sub<BR><BR>Private Sub IVariantWalker_Skip(c As Long)<BR>    ‘ Skip a given number of elements<BR>    iCur = iCur + c<BR>End Sub</code></pre>
<BR>
The CThings collection is too good to be true. Let’s revisit some familiar &shy;collections—CList and CVector—to see more realistic implementations.</p>
</font></BODY>
</HTML>

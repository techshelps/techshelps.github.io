<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DC functions, canvas methods</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="dcfunctionscanvasmethods"></a>DC functions, canvas methods</h1>
<p>
The Windows Way of performing graphics operations is to provide every sort of function you can imagine for every operation, no matter how obscure. The Basic Way is to provide the most important graphics operations through a few methods loaded with optional arguments. The Line method, for example, wraps up the functionality of several API functions. Table 7-3 compares device context functions in Windows with canvas methods in Visual Basic.</p>
<table>
<tr valign=top>
<td>
<b>Operation</b></td>
<td>
<b>Windows Way</b></td>
<td>
<b>Basic Way</b></td>
</tr>
<tr valign=top>
<td>
Point drawing</td>
<td>
SetPixel</td>
<td>
PSet</td>
</tr>
<tr valign=top>
<td>
Point reading</td>
<td>
GetPixel</td>
<td>
Point</td>
</tr>
<tr valign=top>
<td>
Line drawing</td>
<td>
LineTo and MoveToEx</td>
<td>
Line method or Line control</td>
</tr>
<tr valign=top>
<td>
Circle, pie, and arc drawing</td>
<td>
Ellipse, Chord, Arc, and Pie</td>
<td>
Circle method or Shape control</td>
</tr>
<tr valign=top>
<td>
Polygon drawing</td>
<td>
Polygon, PolyPolygon, and SetPolyFillMode</td>
<td>
Draw it line by line</td>
</tr>
<tr valign=top>
<td>
Blitting</td>
<td>
BitBlt, StretchBlt, PatBlt, and StretchDIBits</td>
<td>
PaintPicture method, Image control with Stretch property</td>
</tr>
<tr valign=top>
<td>
Filling shapes</td>
<td>
FloodFill and other Fill functions</td>
<td>
Visual Basic can create filled shapes but has no way of filling shapes later</td>
</tr>
<tr valign=top>
<td>
Icon painting</td>
<td>
LoadIcon, CreateIcon, Destroy-Icon, and DrawIcon</td>
<td>
Picture object</td>
</tr>
<tr valign=top>
<td>
Bitmap painting</td>
<td>
Various Bitmap functions and SelectObject</td>
<td>
Picture object</td>
</tr>
<tr valign=top>
<td>
Metafile recording</td>
<td>
CreateMetaFile and CloseMetaFile</td>
<td>
No way</td>
</tr>
<tr valign=top>
<td>
Metafile playing</td>
<td>
CopyMetaFile, GetMetafile, and DeleteMetaFile functions</td>
<td>
Picture object</td>
</tr>
<tr valign=top>
<td>
Scrolling</td>
<td>
ScrollDC</td>
<td>
No way</td>
</tr>
<tr valign=top>
<td>
Managing regions</td>
<td>
Various Rgn and Path functions</td>
<td>
No way</td>
</tr>
<tr valign=top>
<td>
Printing</td>
<td>
Escape and Doc functions</td>
<td>
Methods on Print object</td>
</tr>
<tr valign=top>
<td>
Text output</td>
<td>
Many functions including Text-Out, ExtTextOut, and GrayString</td>
<td>
Print</td>
</tr>
<tr valign=top>
<td>
Text sizing</td>
<td>
GetTextExtent</td>
<td>
TextWidth and TextHeight</td>
</tr>
<tr valign=top>
<td>
Text alignment</td>
<td>
SetTextAlign, SetTextJustification, and SetTextCharacterExtra functions</td>
<td>
No way</td>
</tr>
</table><br>
<p>
<b>Table 7-3.&nbsp;Graphics methods in Windows and in Visual Basic.</b></p>
<p>
To the hardcore programmer, what Visual Basic doesn’t do is more telling than what it does. Some points of interest:
<ul>
<li>
Visual Basic doesn’t provide any way to fill a shape. QuickBasic had the Paint statement, but it didn’t survive the transition to Visual Basic. Usually, you don’t need to fill shapes as a separate step because you can specify filling when you draw the shape. Nevertheless, “The Windows Way of Drawing,” page 377, provides a function for those rare occasions when you need to fill after the fact.<br><br></li>
<li>
Visual Basic doesn’t draw polygons. You can use the Line method to draw polygons one side at a time, but you might find the Windows <BR>Way more convenient.<br><br></li>
<li>
Regions are a somewhat obscure part of Windows that you might oc-<BR>casionally need. Visual Basic doesn’t do them, and this book doesn’t either. But you should be able to apply the general principles described in this chapter to the problem. <br><br></li>
<li>
You can draw irregular curves with Bezier curves as described on <BR>page 382.<br><br></li>
<li>
You can use paths (as described on page 385) to create irregularly shaped regions.</li>
</ul>
</font></BODY>
</HTML>

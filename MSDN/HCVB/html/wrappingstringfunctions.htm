<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Wrapping String Functions</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="wrappingstringfunctions"></a>Wrapping String Functions</h1>
<BR>
Although passing vbNullString as a string argument is a vast improvement, it’s still un-Basic. The Basic Way to signal that a string should be ignored is to use optional parameters. Before Visual Basic version 4, you couldn’t define your own optional parameters, although you could fake them by using an empty string as a signal to ignore the argument. For example, you could write a wrapper function that worked as follows:</p>
<pre><code>hWnd = VB3FindWindow(“&quot;, “Calculator”)<BR>hWnd = VB3FindWindow(“SciCalc&quot;, ““)<BR>hWnd = VB3FindWindow(“SciCalc&quot;, “Calculator”)</code></pre>
<BR>
Visual Basic version 5 not only allows optional parameters but also lets you assign them by name. You can write a function that can be called as shown here:</p>
<pre><code>hWnd = VBFindWindow(, “Calculator”)<BR>hWnd = VBFindWindow(“SciCalc”)<BR>hWnd = VBFindWindow(“SciCalc&quot;, “Calculator”)<BR>hWnd = VBFindWindow(Title:=&quot;Calculator”)<BR>hWnd = VBFindWindow(Class:=&quot;SciCalc”)</code></pre>
<BR>
The code for this function is simple:</p>
<pre><code>Function VBFindWindow(Optional Class As String, _<BR>                      Optional Title As String) As Long<BR>    VBFindWindow = FindWindow(Class, Title)<BR>End Function</code></pre>
<BR>
This version uses the new typed optional argument syntax available in Visual Basic version 5. Version 4 supported optional arguments only for Variants. The syntax was more complicated and the performance worse because of Variant conversions. Normally, I would initialize the default arguments for clarity:</p>
<pre><code>Optional Class As String = vbNullString</code></pre>
<BR>
Unfortunately, Visual Basic won’t let you do that for strings. It appears to work during debugging, but fails when you try to build a compatible ActiveX component. Fortunately, <i>vbNullString </i>is the default value for strings, so leaving it out does no harm except to readability. You could achieve the same effect by using optional arguments in a Declare statement:</p>
<pre><code>Declare Function FindWindow Lib &quot;USER32&quot; Alias &quot;FindWindowA&quot; ( _<BR>    Optional ByVal Class As String, _<BR>    Optional ByVal Title As String) As Long</code></pre>
<p>
However, you can’t write an equivalent type library entry, so VBFindWindow is the only way to provide a standard version so that you don’t have to insert the Declare statement in every project.</p>
<p>
<b>NOTE</b>&#09;I don’t use my normal Hungarian naming convention for optional arguments. Since optional arguments can be omitted or given out-of-order by name, they are part of the public interface. It’s rude to impose your private naming convention on parameter names or properties that might be used by other programmers who don’t share your conventions.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Procedures Versus Methods</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="proceduresversusmethods"></a>Procedures Versus Methods</h1>
<BR>
Object-oriented programming turns traditional functional programming on its ear. In functional programming, you call a procedure indicating what you want to do and then pass arguments specifying what to do it to, and how to do it:</p>
<pre><code>DoThis ToThat, WithThese</code></pre>
<BR>
In object-oriented programming, you indicate what you want to work on and then specify methods to indicate what you want to do:</p>
<pre><code>ToThis.DoThat WithThese</code></pre>
<BR>
In traditional functional programming, you can pass two kinds of arguments: one indicates what you want to work on, and the other provides additional information about how to do the work. In object-oriented programming, you sometimes don’t need to indicate what you want to work on, because a default object is understood. In Visual Basic terms, the statement</p>
<pre><code>DoThis WithThese</code></pre>
<BR>
might mean</p>
<pre><code>Me.DoThis WithThese</code></pre>
<BR>
At other times, you don’t need to specify how to work on something because you have only one possibility:</p>
<pre><code>DoThis    ‘ WithDefaultThese</code></pre>
<BR>
Internally, the processor doesn’t know anything about object-oriented programming; assembly language is always functional. Object-oriented languages fake object-oriented programming internally by passing a hidden argument. When you write the code</p>
<pre><code>ToThis.DoThat WithThese</code></pre>
<BR>
in Visual Basic (or any object-oriented language), what the processor really sees, in simplified terms, is this:</p>
<pre><code>DoThat ToThis, WithThese</code></pre>
<BR>
To attach the DoThat method to the <i>ToThis</i> object in Visual Basic, you create a class for CThis objects, of which <i>ToThis</i> will be an instance. Within the class, you create a public DoThat sub and give it a <i>WithThese</i> parameter. When you create a new <i>ToThis</i> instance of the CThis class, you can call DoThat using object-oriented syntax:</p>
<pre><code>Dim ToThis As New CThis<BR>ToThis.DoThat WithThese</code></pre>
<BR>
Of course, you can still use the functional style on objects. You must be able to do this so that one object can work on another. Only one object can be the base object, so if there are two objects involved, one has to be passed as a method parameter.</p>
<BR>
Creating a functional version of a method is easy. Assume you have the following object method:</p>
<pre><code>Private iCount As Integer<BR>§<BR>Sub Square()<BR>    iCount = iCount * iCount<BR>End Sub</code></pre>
<BR>
It’s easy to create a functional version that uses it:</p>
<pre><code>Sub SquareThing(ByVal thing As CThing)<BR>    thing.Square<BR>End Sub</code></pre>
<BR>
This procedure can be either a Sub in a standard module, or a method in another class module.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing Cdrive data</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="initializingcdrivedata"></a>Initializing CDrive data</h1>
<BR>
First let’s look at the private variables that CDrive will have to fill:</p>
<pre><code>Private sRoot As String<BR>Private edtType As EDriveType<BR>Private iTotalClusters As Long<BR>Private iFreeClusters As Long<BR>Private iSectors As Long<BR>Private iBytes As Long<BR>Private sLabel As String<BR>Private iSerial As Long<BR>Private fDriveMissing As Boolean</code></pre>
<BR>
The key property for users is Root because it is the default property. Users will normally set it before they set anything else. The Property Let looks like this:</p>
<pre><code>Public Property Let Root(vRootA As Variant)<BR>    ‘ Some properties won’t work for \\server\share\ drives on Windows 95<BR>    sRoot = UCase(vRootA)  ‘ Convert to string<BR>    InitAll<BR>End Property</code></pre>
<BR>
Clearly, the key procedure from the programmer’s standpoint is InitAll. This function gets called when a CDrive object is created (in Class_Initialize) and each time the user sets the Root property. InitAll looks like this:</p>
<pre><code>Private Sub InitAll()<BR>    sLabel = sEmpty: iSerial = 0<BR>    iSectors = 0: iBytes = 0: iFreeClusters = 0: iTotalClusters = 0<BR>    fDriveMissing = False<BR>    ‘ Empty means get current drive<BR>    If sRoot = sEmpty Then sRoot = Left$(CurDir$, 3)<BR>    ‘ Get drive type ordinal<BR>    edtType = GetDriveType(sRoot)<BR>    ‘ If invalid root string, try it with terminating backslash<BR>    If edtType = edtNoRoot Then edtType = GetDriveType(sRoot &amp; “\”)<BR>    Select Case edtType<BR>    Case edtUnknown, edtNoRoot<BR>        Dim iDrive As String<BR>        iDrive = Val(sRoot)<BR>        If iDrive &gt;= 1 And iDrive &lt;= 26 Then<BR>            sRoot = Chr$(iDrive + Asc(“A”) - 1) &amp; “:\”<BR>        Else<BR>            sRoot = sEmpty<BR>        End If<BR>        ‘ Start over<BR>        InitAll<BR>    Case edtRemovable, edtFixed, edtRemote, edtCDROM, edtRAMDisk<BR>        ‘ If you got here, drive is valid, but root might not be<BR>        If Right$(sRoot, 1) &lt;&gt; “\” Then sRoot = sRoot &amp; “\”<BR>        GetLabelSerial<BR>    Case Else ‘ Shouldn’t happen<BR>        BugAssert True<BR>    End Select<BR>End Sub</code></pre>
<BR>
That might look like a lot of work, but essentially this procedure is the CDrive class. It calculates almost everything necessary to allow the Property Get procedures simply to read internal variables.</p>
<BR>
Notice the recursive call to InitAll when the drive type is unknown or invalid. This happens if the user sets the Root property to a bogus value, such as an empty string. In other words, you have an error. Or have you?</p>
<BR>
There are many ways to handle errors in classes, but one choice is to refuse them. If you accept any input (including no input), there can’t be any user error. If something goes wrong, it’s the programmer’s fault. The CDrive class attempts to follow this strategy. For example, if you enter the string <i>invalid drive </i>as the Root property, CDrive will first interpret it as a root drive string. If that fails (and it will), CDrive will interpret it as a drive number. If that fails (and it will), CDrive will interpret it as the current drive, and there’s always a current drive. We’ll look at other error strategies later.</p>
</font></BODY>
</HTML>

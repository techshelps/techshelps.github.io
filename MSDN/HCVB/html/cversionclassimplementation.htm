<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cversion class implementation</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="cversionclassimplementation"></a>CVersion class implementation</h1>
<p>
Once somebody (me, in this case) writes a version class, the rest of us (you, in this case) can simply use it without understanding how it works. The code of CVersion is somewhat complex, but it doesn’t introduce any new programming techniques, so I’ll just give a “Cliff notes” summary here and encourage you to look up the details in VERSION.CLS.</p>
<p>
Version data comes in two parts. The first part is a block of numeric data in a UDT. This comes out the same in any language: version 1.0 in Japanese or Urdu is still version 1.0. The second part consists of language-specific string data. One block of strings—the only one currently recognized by CVersion—is in a translated form meant to be usable from any version of the program.</p>
<p>
The Create method starts by calling GetFileVersionInfoSize. You pass this function the name of the executable file, and it returns the size of the version data and a handle to the data. You then pass the size, the handle, the executable name, and a buffer (of the given size) to GetFileVersionInfo, which fills the buffer.</p>
<p>
You now have a block of version data in an unreadable format. You must call VerQueryValue to read it. You pass some semirandom strings to VerQueryValue to first get the fixed UDT portion of the data and later get a hexadecimal key (case-sensitive and with leading zeros) that identifies the translated version of the data. You could then call VerLanguageName to get language-specific data, but I don’t. The Create method of CVersion saves the key, the UDT for fixed data, and the data block (as a string) in private variables of the class.</p>
<p>
Class properties based on fixed data simply return fields of the internal UDT variable. Class properties based on the language-specific string data call Ver&shy;QueryValue, passing the saved key and data string to it.</p>
<p>
Got all that? There will be a quiz. Actually, the Windows API documentation on this subject is not very clear, and programming the class was not easy. It’s much easier to follow my completed code.</p>
<p>
CVersion implements only the most common part of version <BR>resources, so there’s plenty of room to enhance it. For example, you can embed language-specific version information in a file and then use version resource functions to extract different version data for different languages. </p>
</font></BODY>
</HTML>

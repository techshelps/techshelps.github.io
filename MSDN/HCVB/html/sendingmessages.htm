<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sending Messages</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="sendingmessages"></a>Sending Messages</h1>
<BR>
To understand the point of messages, let’s look briefly at how you would write programs for Windows in Visual Basic if you had to write them from scratch the way you do in C. The main routine in every Visual Basic program would look something like this:</p>
<pre><code>Dim msg as TMessage<BR>Dim hForm As Long, hControl As Long <BR><BR>hForm = CreateWindow(“Form&quot;, iFormAttr, ...)<BR>hControl = CreateWindow(“Control&quot;, iCtrlAttr, ...)<BR><BR>‘ Get next message from Windows queue<BR>Do While GetMessage(msg)<BR>    ‘ Send message to appropriate window<BR>    TranslateMessage(msg)<BR>    DispatchMessage(msg)<BR>Loop<BR>End</code></pre>
<BR>
Fortunately, Visual Basic creates all the windows it needs—based on the forms you draw and the attributes you set rather than on the code you write—and then keeps reading messages and sending them out to the windows until it gets a WM_QUIT message. WM_QUIT is the only message that causes GetMessage to return False and terminate the loop (and the program). The messages come from the user interface (the keyboard and the mouse, for instance), from messages sent by the system to the windows, from messages sent by the windows to the system, and from messages sent from one window to another.</p>
<BR>
Meanwhile, the created windows are gobbling up all the messages sent to them and taking the appropriate actions. Each window has a routine (called a <i>window procedure</i>) that processes messages. If window procedures were written in Visual Basic (and now they can be), a typical one might look like this:</p>
<pre><code>Function WindowProc(ByVal hWnd As Long, ByVal iMessage As Long, _<BR>                    ByVal wParam As Long, lParam As Long) As Long<BR>    ‘ Set default return value<BR>    WindowProc = 0<BR>    ‘ Handle messages<BR>    Select Case iMessage<BR>    Case WM_DOSOMETHING<BR>        DoIt “Whatever it does&quot;, wParam, lParam<BR>    Case WM_ASKSOMETHING<BR>        WindowProc = CheckIt(“Tell me, please&quot;, wParam, lParam) <BR>    Case Else<BR>        ‘ Call default window procedure<BR>        WindowProc = DefWindowProc(hWnd, iMessage, wParam, lParam)<BR>    End Select<BR>End Function</code></pre>
<BR>
Every form and control in your program (don’t confuse me with exceptions) has one of these window procedures. Windows and Visual Basic communicate with them using the SendMessage function, and you can use it, too.</p>
</font></BODY>
</HTML>

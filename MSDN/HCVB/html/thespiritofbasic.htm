<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 1: The Spirit of Basic</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2">
<h4>Chapter 1</h4>
<h1><a name="thespiritofbasic"></a>The Spirit of Basic</h1>
<p>
Every computer language has its own feel, its own atmosphere, its own spirit. You can’t really define this spirit, but you know what it is when you see it. I think of Basic as the antithesis of a statement attributed to Albert Einstein:</p>
<p>
<i>Make things as simple as possible—but no simpler.</i><br>
</dd>
<dt>
Had that quote been written by the original designers of Basic, John Kemeny and Thomas Kurtz, it would have been simplified further:</p>
<p>
<i>Make things simpler than possible.</i></p>
<p>
That is the contradiction hardcore Visual Basic programmers live with. We want things to be simple, elegant, and intuitive—but they aren’t. We want our programs to model reality—but they don’t. We want our language to work the way we think, not the way computers or operating systems want us to think—but we’re not willing to pay the price.</p>
<p>
The nebulous Spirit of Basic exists only in our minds. Real implementations of Basic, including Microsoft Visual Basic, have to compromise. Sacrilege keeps creeping in. There’s an inherent conflict between the desire to keep it simple and the desire to do what needs to be done, whatever the cost. I use the term <i>un-Basic</i> to describe these compromises, whether they are built into the language or built into our code.</p>
<p>
This book tries to maintain the Spirit of Basic, against all odds. Sometimes it’s tough. First, the book deals at length with the Microsoft Windows Application Program Interface (API), which was written in C and is permeated with the Spirit of C. Second, the book’s philosophy is to accept no limits, although Visual Basic has built-in limits that can be overcome only with great effort. Third, Basic is slowly becoming an object-oriented language, but it remains to be seen how well objects can be realized in the Spirit of Basic. Version 4 made a good opening argument. I’ve been disappointed by the slow progress in version 5. Maybe <BR>next time….</p>
<p>
Despite the inclusion of techniques that can only be described as un-Basic, this book is not about how to write C in Basic. I’ll try to keep things Basic and to wrap un-Basic code in wrapper routines so that you can use it without constantly thinking about the heresies involved.</p>
</font></BODY>
</HTML>

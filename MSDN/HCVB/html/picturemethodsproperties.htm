<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Picture methods and properties</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="picturemethodsproperties"></a>Picture methods and properties</h1>
<BR>
The Height and Width properties of a picture are different from the Height and Width properties of a form or a picture box. The latter properties have values in the current scale mode (which is twips by default), but the Height and Width properties of a picture always have values in the standard COM mode, vbHi&shy;metric (MM_HIMETRIC). Visual Basic wouldn’t let you set the scale mode to vbHimetric, even if you had some bizarre reason for doing so. Normally you’ll convert all your widths and heights to twips or pixels.</p>
<BR>
The ScaleX and ScaleY methods are the easiest way to convert from vbHimetric units to twips. For example, the statement <i>ScaleX(Picture.Width) </i>converts to twips. Pixels are messier. Sometimes when you’re dealing with API functions, you’ll need to do a conversion without benefit of an object that has ScaleX and ScaleY methods. In that case, you can use the conversion constants and functions in PICTOOL.BAS. Here are several similar statements:</p>
<pre><code>dxBlt = pic.Width * TwipsPerMillimeter / Screen.TwipsPerPixelX / 100<BR>dxBlt = pic.Width * TwipsPerHiMetricUnit / Screen.TwipsPerPixelX<BR>dxBlt = PicXToPixel(pic.Width)<BR>dxBlt = frm.ScaleX(pic.Width, pvHiMetric, vbPixel)</code></pre>
<BR>
I’ll let you look up TwipsPerMillimeter, PicXToPixel, and similar conversions in the source code.</p>
<BR>
The Type property always returns 0 (<i>vbPicTypeNone</i>), 1 (<i>vbPicTypeBitmap</i>)<i>, </i>2 (<i>vbPicTypeMetafile</i>), 3 (<i>vbPicTypeIcon</i>)<i>, </i>or 4 (<i>vbPicTypeEMetafile</i>). You can also load a cursor into a picture; the Type property will show it as <i>vbPicTypeIcon</i>.</p>
<BR>
The Handle and hPal properties are the link between the Basic Way of pictures and the Windows Way of GDI objects. The hPal property is the handle of the palette for bitmaps. (It’s meaningless for icons or metafiles because these don’t have palettes.)</p>
<BR>
The Handle property is the handle of the bitmap, icon, or metafile within the picture. You can have lots of fun with these object handles, as you’ll see later. The Handle property is the default member. When you assign a value to a Picture property, you’re actually assigning it to the handle. For example, the code</p>
<pre><code>imgCur.Picture = LoadPicture(“Thing.Ico”)</code></pre>
<BR>
actually means:</p>
<pre><code>imgCur.Picture.Handle = LoadPicture(“Thing.Ico”)</code></pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using a List Class</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="usinglistclass"></a>Using a List Class</h1>
<BR>
The real work of managing the links is done by the CList class. As I mentioned earlier, users never access the CLink class directly. But before we examine how CList works, let’s see how it’s used:</p>
<pre><code>‘ Insert item into list<BR>Dim list As New CList<BR>list.Add “Bear”<BR>list.Add “Tiger”<BR>list.Add “Lion”<BR>list.Add “Elephant”<BR>list.Add “Horse”<BR>list.Add “Dog”</code></pre>
<BR>
This code adds some entries to the list. If you look at the <i>list </i>variable in the Locals window at this point, you’ll be impressed and perhaps a little surprised. The list object has a Head member that shows the first item in the list. You can expand it and expand its NextLink, and expand the NextLink of that, and so on to the end of the list. For this short list, there’s room in the Locals window to confirm that all the items are really there but not necessarily in the order you’d expect. The last item added appears at the head of the list.</p>
<BR>
Because clients don’t have access to the Locals window, they might want some methods and properties to get at the entries:</p>
<pre><code>s = s &amp; “Count: “ &amp; list.Count &amp; sCrLf<BR>s = s &amp; “Head: “ &amp; list &amp; sCrLf<BR>s = s &amp; “Item 2: “ &amp; list(2) &amp; sCrLf<BR>s = s &amp; “Item Tiger: “ &amp; list(“Tiger”) &amp; sCrLf</code></pre>
<BR>
Here’s the output from these statements:</p>
<pre><code>Count: 6<BR>Head: Dog<BR>Item 2: Horse<BR>Item Tiger: Tiger</code></pre>
<BR>
The string index doesn’t make much sense for this list of strings; it just returns what you already know. But it might be useful for a list of class objects:</p>
<pre><code>Debug.Print list(“Tiger”).Fierceness</code></pre>
<BR>
In this case, you are asking for the object whose default property has the value <i>Tiger.</i> You can also use the string index to replace an item, as follows:</p>
<pre><code>s = s &amp; “Replace Elephant with Pig” &amp; sCrLf<BR>list(“Elephant”) = “Pig”</code></pre>
<BR>
The list also has a Remove method that removes either the first item (by default) or another item (specified by a string or an index) as shown below:</p>
<pre><code>s = s &amp; “Remove head: “ &amp; list &amp; sCrLf<BR>list.Remove<BR>s = s &amp; “Remove Bear” &amp; sCrLf<BR>list.Remove “Bear”<BR>s = s &amp; “Remove 3: “ &amp; list(3) &amp; sCrLf<BR>list.Remove 3</code></pre>
<BR>
This is all fine as far as it goes, but it’s hard to tell whether the list works because there’s no way to iterate through it to see all the entries.</p>
<BR>
One way or another, you need to be able to iterate through the list. So why not just add a NextItem method to the CList class so that you can iterate through the items? Well, you could, and I did in an early implementation of CList. Originally, I based my linked list class on a C++ list in <i>The C++ Programming Language</i> (Addison-Wesley, 1986) by C++ creator Bjarne Stroustrup. His list had a separate iterator class, but I thought this was an unnecessary complication that I didn’t need to follow. Well, as the design progressed I began to realize why he’s a language designer and I’m a mere book author. So I’m going to start things off right with a separate CListWalker class. I think this will make sense by the time I finish, even if it doesn’t now.</p>
</font></BODY>
</HTML>

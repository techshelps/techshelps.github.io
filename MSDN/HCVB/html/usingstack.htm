<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using a Stack</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="usingstack"></a>Using a Stack</h1>
<BR>
Before we get into implementation details, here’s how you use the interface and the classes that implement it:</p>
<pre><code>txtOut.Text = s<BR>txtOut.Refresh<BR>Dim beasts As IStack<BR>Select Case GetOption(optStack)<BR>Case 0<BR>    Set beasts = New CStackLst<BR>Case 1<BR>    Set beasts = New CStackVec<BR>Case 2<BR>    Set beasts = New CStackCol<BR>End Select<BR>s = s &amp; Space$(4) &amp; “Push Lion” &amp; sCrLf<BR>beasts.Push “Lion”<BR>s = s &amp; Space$(4) &amp; “Push Tiger” &amp; sCrLf<BR>beasts.Push “Tiger”<BR>s = s &amp; Space$(4) &amp; “Push Bear” &amp; sCrLf<BR>beasts.Push “Bear”<BR>s = s &amp; Space$(4) &amp; “Push Shrew” &amp; sCrLf<BR>beasts.Push “Shrew”<BR>s = s &amp; Space$(4) &amp; “Push Weasel” &amp; sCrLf<BR>beasts.Push “Weasel”<BR>s = s &amp; Space$(4) &amp; “Push Yetti” &amp; sCrLf<BR>beasts.Push “Yetti”<BR><BR>s = s &amp; “Pop animals off stack: “ &amp; sCrLf<BR>Do While beasts.Count<BR>    s = s &amp; Space$(4) &amp; “Pop “ &amp; beasts.Pop &amp; sCrLf<BR>Loop</code></pre>
<BR>
In the example, an array of option buttons determines which class will be &shy;instantiated with the IStack object variable. (The sidebar on the following page demonstrates  the GetOption function.) The output looks like this:</p>
<pre><code>Push animals onto stack:<BR>    Push Lion<BR>    Push Tiger<BR>    Push Bear<BR>    Push Shrew<BR>    Push Weasel<BR>    Push Yetti<BR>Pop animals off stack:<BR>    Pop Yetti<BR>    Pop Weasel<BR>    Pop Shrew<BR>    Pop Bear<BR>    Pop Tiger<BR>    Pop Lion</code></pre>
<p>
In addition, the sample starts timing, pushes the number of integers specified by the Count text box onto a stack, pops them off, and then stops the timing. You can check the source in TCOLLECT.FRM. I’ll tell you the timing results later.</p>
<p>
<b>A Control Array Is Not an Array</b><BR>
One of the least understood data structures in Visual Basic is the control array. You won’t find it in the object browser and the documentation on it is…well, it exists, but not necessarily where you expect to find it.</p>
<BR>
The most important feature of a control array is that it isn’t an array. It’s more like a collection, complete with properties and an iterator. Here’s a summary of what I’ve been able to figure out.</p>
<BR>
First, a control array has LBound and UBound <i>properties</i>. Don’t confuse these with the LBound and UBound <i>functions,</i> which take a real array (but not a control array) as a parameter. A control array also has a Count property, but the count isn’t necessarily the same as the number of places in the array (UBound - LBound + 1) because a control array can have unused entries. The best way to handle a control array is to ignore the properties and iterate with For Each. That way you skip any empty entries.</p>
<BR>
Here’s an example that solves the annoying problem of trying to figure out which option button is selected in a control array of option buttons:</p>
<pre><code>‘ Find the True option from a control array of OptionButtons<BR>Function GetOption(opts As Object) As Integer<BR>    On Error GoTo GetOptionFail<BR>    Dim opt As OptionButton<BR>    For Each opt In opts<BR>        If opt.Value Then<BR>            GetOption = opt.Index<BR>            Exit Function<BR>        End If<BR>    Next<BR>    On Error GoTo 0<BR>    ErrRaise eeNoTrueOption<BR>    Exit Function<BR>GetOptionFail:<BR>    ErrRaise eeNotOptionArray<BR>End Function</code></pre>
<BR>
The error handling technique used here is explained in Chapter 5.</p>
</p>
</font></BODY>
</HTML>

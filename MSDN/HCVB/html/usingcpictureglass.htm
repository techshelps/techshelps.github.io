<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using CPictureGlass</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="usingcpictureglass"></a>Using CPictureGlass</h1>
<BR>
Let’s check out the client code in FUN.FRM (project FUNNGAME.VBP) before we talk about the implementation. The CPictureGlass declaration is at the module level so that it can be accessed from various routines:</p>
<pre><code>Private pgPicture As New CPictureGlass</code></pre>
<BR>
Although the <i>pgPicture </i>variable is declared at the form level, the New keyword in the declaration means that the object isn’t actually created until the first reference. That first reference had better be the Create method, since the object is meaningless without initialization. In the Fun ’n Games program, object creation and initialization occurs in the cmdAnimate_Click sub:</p>
<pre><code>Private Sub cmdAnimate_Click()<BR>    If cmdAnimate.Caption = “&amp;Animate Picture” Then<BR>        With pgPicture<BR>            ‘ Draw picture on center of form with white background<BR>            .Create Me, imgAniBmp.Picture, clrMask, Width / 2, Height / 2<BR>            ‘ Constant controls pace, sign controls direction<BR>            xInc = .Width * 0.05<BR>            yInc = -.Height * 0.05<BR>        End With<BR>        SetTimer eatPicture<BR>        cmdAnimate.Caption = “Stop &amp;Animate”<BR>    Else<BR>        SetTimer eatNone<BR>        cmdAnimate.Caption = “&amp;Animate Picture”<BR>    End If<BR>End Sub</code></pre>
<BR>
This sub is a toggle that turns animation on or off. After calling the Create method, you can use CPictureGlass properties such as Visible, Left, Top, Width, and Height.</p>
<BR>
The SetTimer sub tells the Timer control to handle the animation. (The Fun ’n Games program also uses the same Timer control to animate card backs.) We’re not interested yet in the details of how SetTimer tells the timer which events to handle. All that matters is that the timer event calls AnimatePicture. The code is listed below:</p>
<pre><code>Private Sub AnimatePicture()<BR>    With pgPicture<BR>        If .Left + .Width &gt; ScaleWidth Then xInc = -xInc<BR>        If .Left &lt;= Abs(xInc) Then xInc = -xInc<BR>        If .Top + .Height &gt; ScaleHeight Then yInc = -yInc<BR>        If .Top &lt;= Abs(yInc) Then yInc = -yInc<BR>        .Move .Left + xInc, .Top + yInc<BR>    End With<BR>End Sub</code></pre>
<BR>
This code simply moves the picture around the form, bouncing back in the other direction when it hits a border. Not very difficult. The hard part is inside.</p>
<BR>
The Fun ‘n Games program takes shortcuts. It sets AutoRedraw to False because otherwise some of the dynamic effects wouldn’t work or would be too slow. AutoRedraw works by maintaining <BR>a behind-the-scenes bitmap that represents the form surface. When you use PaintPicture with AutoRedraw, you’re drawing to this bitmap instead of to the real form surface. That might work for some programs, but it’s not fun and games. If you don’t let Visual Basic redraw automatically, you’re supposed to redraw yourself in the Paint event. That wouldn’t be much fun either because you’d have to remember everything you drew and redraw it whenever the window moved or was obscured by another application. Fortunately, we sample programmers can ignore such inconveniences, leaving the toughest parts of animation to real programmers like you.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The SendMessage function</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="thesendmessagefunction"></a>The SendMessage function</h1>
<BR>
The Windows API documentation shows the following syntax:</p>
<pre><code>LRESULT SendMessage(<BR>    HWND hWnd,          // Handle of destination window<BR>    UINT Msg,           // Message to send<BR>    WPARAM wParam,      // First message parameter<BR>    LPARAM lParam);     // Second message parameter</code></pre>
<BR>
The <i>hWnd</i> parameter is the window to which the message is sent. The <i>Msg</i> parameter is the message number—which is usually a constant such as LB_FINDSTRING or WM_COPY. The WPARAM and LPARAM types are actually aliases for 32-bit integers (Long in Visual Basic). The <i>wParam</i> and <i>lParam</i> parameters differ for each message, as does the return value; you must look up the specific message to see what they mean. Often, <i>wParam</i> or the return value is ignored.</p>
<BR>
The <i>lParam</i> parameter is particularly interesting. It is a 32-bit integer, which happens to be the size of a pointer, and this value is often used to pass a pointer to a string or a UDT. In other words, <i>lParam</i> is typeless. In Visual Basic, that means that the SendMessage declaration contains the As Any type. Alternatively, you can define several type-safe declarations with different aliases.</p>
<BR>
You need only one SendMessage Declare statement to cover all your bases:</p>
<pre><code>Declare Function SendMessage Lib “USER32” Alias “SendMessageA” ( _<BR>    ByVal hWnd As Long, ByVal Msg As Long, _<BR>    wParam As Any, lParam As Any) As Long</code></pre>
<BR>
Using this Declare you can pass any value by reference. To pass a String or a Long by value, you must give the ByVal keyword in the call. Sometimes you might even have to pack two Integers into a Long and pass the Long by Value. Or you might receive, by reference or in the return value, two Integers packed in a Long. Notice that both <i>wParam </i>and <i>lParam </i>are passed by reference because either might take a reference argument.</p>
<BR>
Of course, the Declare only works for ANSI strings, and I try to make all my code portable to Unicode in anticipation of the day when ANSI strings fade to just a bad memory. The Windows API type library has equivalent entries, but for reasons described in “Unicode Versus Basic” in Chapter 2, you can’t use the type library equivalent of As Any (void *) to represent strings. Therefore, the type library provides a separate SendMessageStr entry that takes a string <i>lParam</i>. It’s equivalent to the following Declare statement:</p>
<pre><code>Declare Function SendMessageStr Lib “USER32” Alias “SendMessageA”<BR>    (ByVal hWnd As Long, ByVal Msg As Long, _<BR>    ByVal wParam As Long, ByVal lParam As String) As Long</code></pre>
<BR>
Notice that SendMessageStr takes a ByVal Long as its <i>wParam</i> parameter despite the theoretical possibility that some message might take a ByRef <i>wParam </i>and a string <i>lParam</i>. I checked and there is no such message. If you find one, sue me.</p>
<BR>
I also provide a SendMessageVal that you can use in place of SendMessage with ByVal in the call.</p>
<pre><code>Declare Function SendMessageVal Lib “USER32” Alias “SendMessageA”<BR>    (ByVal hWnd As Long, ByVal Msg As Long, _<BR>    ByVal wParam As Long, ByVal lParam As Any) As Long</code></pre>
<BR>
Let’s look at an example. Assume you have a multiline text control named <i>txtEditor</i>. You can request the selection offset and length with these lines:</p>
<pre><code>iPos = txtEditor.SelStart<BR>iLen = txtEditor.SelLength</code></pre>
<BR>
In order to get this information, Visual Basic sends the EM_GETSEL message to the txtEditor window procedure with a call such as the following:</p>
<pre><code>Dim iStart As Long, iEnd As Long<BR>Call SendMessage(txtEditor.hWnd, EM_GETSEL, iStart, iEnd)</code></pre>
<BR>
If the window procedure for TextBox controls were written in Visual Basic, it would handle this message in a Select Case block:</p>
<pre><code>Case EM_GETSEL<BR>    ‘ Put offsets of start and end into variables<BR>    wParam = iStartSel<BR>    lParam = iEndSel</code></pre>
<BR>
Visual Basic returns the start of the selection as the SelStart property. It subtracts the start of the selection from the end of the selection and returns the result as the SelLength property. The Visual Basic internal code looks something like this:</p>
<pre><code>SelStart = iStart<BR>SelLength = iEnd - SelStart</code></pre>
<BR>
If you have time to burn, you can do this yourself by calling SendMessage instead of using the SelStart and SelLength properties.</p>
<BR>
What if you want to undo the last editing change? Simple—just call the Undo method. Unfortunately, the TextBox control doesn’t have an Undo method. But you’ve seen it in Notepad; Windows must have an Undo message. Sure enough, if you check the Windows API documentation, you’ll find an EM_UNDO message. You can undo the last editing change with this simple statement:</p>
<pre><code>Call SendMessage(txtEditor.hWnd, EM_UNDO, ByVal 0&amp;, ByVal 0&amp;)</code></pre>
<BR>
You could also do this with the SendMessageVal alias:</p>
<pre><code>Call SendMessageVal(txtEditor.hWnd, EM_UNDO, 0&amp;, 0&amp;)</code></pre>
<BR>
Just to show all the options, you could also use this statement:</p>
<pre><code>Call SendMessage(txtEditor.hWnd, EM_UNDO, 0&amp;, 0&amp;)</code></pre>
<BR>
This works, but perhaps not the way you expect. SendMessage takes ByRef parameters, which means it passes the addresses of variables. But a literal constant doesn’t have an address. Visual Basic fakes it by creating temporary variables, stuffing constant zeros into them, and passing the addresses of the temporaries. Don’t make your programs do this extra work.</p>
<BR>
This is just the beginning of what you can do with messages. You can check whether there’s anything to undo. You can get the number of lines of text, the current line, or the current column. You can set the indent spacing for tab characters. You can do many other editing tasks that Visual Basic doesn’t support directly. We’ll try many of these editing operations with Edwina the editor, introduced in Chapter 9.</p>
<BR>
The same principle holds for other controls such as list boxes and combo boxes: Visual Basic supports the most common operations through methods, events, and properties; you must handle others with SendMessage.</p>
</font></BODY>
</HTML>

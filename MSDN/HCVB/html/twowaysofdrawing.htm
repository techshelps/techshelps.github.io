<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Two Ways of Drawing</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="twowaysofdrawing"></a>Two Ways of Drawing</h1>
<p>
Visual Basic provides excellent support for vector graphics, but drawing lines, circles, and dots isn’t necessarily the best way of doing graphics under Windows. If you want complex images, you can usually get them faster by drawing the shape with a bitmap editor or a drawing program and plunking the result onto the screen.</p>
<p>
This is particularly true when you get beyond two-dimensional shapes. If you really know your geometry, you can calculate three-dimensional coordinates and rotate them in space. For a shape of any complexity, the calculation takes seconds for wire-frame images. This might impress your engineer friends, but ordinary users will want shaded images instantly. If it can be done in cartoons and movies, why can’t you do it in your program? Well, you can, but you might not be willing to wait.</p>
<p>
Drawing is one area where p-code can really drag you down. Fortunately, Visual Basic’s compiler now gives you a good shot at fast vector graphics comparable to what you could get from a C++ DLL. Nevertheless, my advice on vector graphics is to keep them short and simple. Remember that whatever you draw must be redrawn any time you resize the window, so think twice before making your graphics forms resizable. Setting the AutoRedraw property simply means that Windows will redraw instead of you.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>More Interface Stuff</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="moreinterfacestuff"></a>More Interface Stuff</h1>
<p>
Here are some other enhanced interface issues you might be interested in:
<ul>
<li>
Wouldn’t it be nice to have a drop-down list for selecting drives and directories, like the one in Windows Explorer and the Open common dialog? Well, tough luck. Windows provides no way to reuse the standard control. Not in Visual Basic or in any other language. You can, however, produce a similar but cruder effect with the Browse For Folder dialog box. I wrap the SHBrowseForFolder API function in the Visual Basic function BrowseForFolder (in FOLDTOOL.BAS). You pass in arguments to set the initial state of the dialog box, and then get the results from the return value. To see it in action, click on the button next to the Destination field in the Windows Interface Tricks application shown in Figure 11-10 on page 666. Fortunately, someone wasn’t ready to take this crude tool for granted. Take a look at the control supplied by hard&shy;core programmer Andrea Wyss. You’ll see an example of this on the companion CD.<br><br></li>
<li>
You can add files to the Documents list on the Start menu by calling the AddToRecentDocs procedure (in FOLDTOOL.BAS), which in turn calls SHAddToRecentDocs. You can clear the list with ClearRecent&shy;Docs. The Windows Interface Tricks application has buttons that demonstrate these functions.<br><br></li>
<li>
If your application needs to put a status icon on the Taskbar, you <BR>can call Shell_NotifyIcon to install or remove the icon. I wrap the Shell_NotifyIcon function in the CTrayIcon class; you can see it in action in the Windows Interface Tricks application. The class uses the subclassing system described at the end of Chapter 6 to handle mouse messages from the installed tray object. To create a new CTrayIcon object, declare it using the WithEvents syntax, then call the Create method to pass in a window handle, an icon, and a tip string. CTray&shy;Icon uses this information to install your icon and generate events whenever the user interacts with it. (Be careful when debugging the application. If you interrupt the program with the End button, you’ll never hit the Unload event where tray objects are destroyed. You’ll end up with orphaned icons on your Taskbar.) CTrayIcon is very easy to install and use even if you don’t care how it works, but hardcore programmers might also want to study the implementation in TRAYICON.CLS.<br><br></li>
<li>
You can make good use of new help features such as the What’s This? help button. There’s a programming element to this, but most of the work lies in creating the help files. (I confess to not writing a single help file for the samples provided with this book. You’re on your own.)<br><br></li>
<li>
To support Plug and Play, you can install the System Information control, through which you can monitor various events, particularly those that change the screen size. Unfortunately, this is another control that shouldn’t be a control. I wanted to attach the same events to the System object described on page 612, but I didn’t get around to it.<br><br></li>
<li>
Use property sheets everywhere you can. Create a property sheet form for your document types, using either the TabStrip or the Tabbed Dialog control. Put a Properties item on your toolbars and your context menus whenever appropriate.</li>
</ul>
</font></BODY>
</HTML>

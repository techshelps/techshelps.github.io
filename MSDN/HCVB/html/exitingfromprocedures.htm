<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exiting from Procedures</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="exitingfromprocedures"></a>Exiting from Procedures</h1>
<BR>
One of the rules of structured programming is: a procedure should have one and only one exit. Some members of the coding police criticized the code in the first edition of <i>Hardcore Visual Basic </i>for violating this rule. I plead guilty.</p>
<BR>
I respect this rule. I honor the intention of encouraging disciplined code with carefully structured exits. I admire programmers who follow the rule without twisting code into contortions. But after careful thought, I have chosen not to follow it myself. If you make a different choice, that’s fine with me.</p>
<BR>
My justification, pitiful as it might seem to purists, is that multiple exits can make code shorter and, to my eye, more natural. You can always get just one exit, but you might have to introduce Gotos or extra levels of indentation to do it. Exit Sub and Exit Function work for me. Take the Among function, which gives Visual Basic something comparable to one of my favorite Pascal features, the <i>in </i>operator. Here’s how I wrote it:</p>
<pre><code>‘ Pascal:    if ch in [‘a’, ‘f’, ‘g’] then<BR>‘ Basic:     If Among(ch, “a”, “f”, “g”) Then<BR>Function Among(vTarget As Variant, _<BR>               ParamArray a() As Variant) As Boolean<BR>    Among = True        ‘ Assume found<BR>    Dim v As Variant<BR>    For Each v In a()<BR>        If v = vTarget Then Exit Function<BR>    Next<BR>    Among = False<BR>End Function</code></pre>
<BR>
This code can exit from the middle of the loop if a match is found or from the end of the function if a match is not found. Is that really less structured, more prone to errors, or less readable than this kosher version?</p>
<pre><code>Function Among(vTarget As Variant, _<BR>               ParamArray a() As Variant) As Boolean<BR>    ‘ Among = False        ‘ Assume not found<BR>    Dim v As Variant<BR>    For Each v In a()<BR>        If v = vTarget Then <BR>            Among = True<BR>            Exit For<BR>        End If<BR>    Next<BR>End Function</code></pre>
<BR>
Decide for yourself how strictly you want to follow this rule, but get off my case.</p>
</font></BODY>
</HTML>

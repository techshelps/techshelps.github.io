<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing the registry</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="accessingregistry"></a>Accessing the registry</h1>
<BR>
The first step in accessing the registry collections is to declare a node object variable and connect it to a registry node: </p>
<pre><code>Dim nodesTop As New CRegNode<BR>‘ Connect to first-level node by name<BR>nodesTop.Create “Software\VB and VBA Program Settings”</code></pre>
<BR>
The Create method can be used in several ways. Its signature looks like this: </p>
<pre><code>Sub Create(vIndex As Variant, _<BR>           Optional RootKey As Long = HKEY_CURRENT_USER, _<BR>           Optional AccessRights As Long = KEY_ALL_ACCESS)</code></pre>
<BR>
You’ll need to provide a <i>RootKey</i> parameter to connect to anything other than HKEY_CURRENT_USER. The <i>vIndex </i>parameter is a Variant so that it can take either a string or numeric argument. It can be a key name (as shown above), a remote computer name, or the handle of a previously opened key. </p>
<BR>
You can also connect a registry node by using the default Key property. Here are some examples: </p>
<pre><code>‘ Connect HKEY_CLASSES_ROOT node<BR>nodesTop.Key = HKEY_CLASSES_ROOT<BR>‘ Connect VBCore.CAbout node in current node (HKEY_CLASSES_ROOT)<BR>nodesTop.Key = “VBCore.CAbout”<BR>‘ Connect Software node in specified root HKEY_LOCAL_MACHINE<BR>nodesTop.Key(HKEY_LOCAL_MACHINE) = “Software”<BR>‘ Open first node of current node<BR>nodesTop.Key(nodesTop.Key) = 1</code></pre>
<BR>
Once you’ve connected to a node, you can read its item values by name: </p>
<pre><code>v = node.Items(“Bytes”)</code></pre>
<BR>
Or you can get an item’s value by the item’s position number:</p>
<pre><code>v = node.Items(1)</code></pre>
<BR>
Either way you get back a Variant that could contain a Long, a String, or an <BR>array of Bytes. You have to check the type with VarType to decide what to do with it. The sample simply converts any type to a string, but real programs might have to do something more sophisticated—especially with binary data stored in Byte arrays. </p>
<BR>
You can also set item values of any registry type. Here’s how to add binary data named <i>Bytes</i>: </p>
<pre><code>Dim ab() As Byte<BR>‘ Add bytes item<BR>ab = “The bytes”<BR>node.AddItem ab, “Bytes”</code></pre>
<BR>
You can also add strings containing environment variables such as this string named <i>ExpandString</i>: </p>
<pre><code>node.AddItem “A %TEMP% string”, “ExpandString”</code></pre>
<BR>
The string will be saved in the registry as is, with the percent signs intact, but it will be extracted with the TEMP environment variable expanded. Here are a few more examples showing how item values can be added to named nodes: </p>
<pre><code>node(“SecondLevel1”).AddItem “DefaultString”<BR>node(“SecondLevel1”).AddItem “Stuff”, “Value1”<BR>node(“SecondLevel2”).AddItem 689, “Value1”</code></pre>
<BR>
The first argument is the value of the item, the second is its name. If you don’t give a name, the value will become the default value, which will always be stored as a string even if it isn’t one. </p>
<BR>
You can remove items by name or by position: </p>
<pre><code>node.RemoveItem 1<BR>node.RemoveItem “String”</code></pre>
<BR>
You can also remove nodes by name or position, but whether you succeed will depend on whether the node has children. Here’s an attempt to remove a childless node: </p>
<pre><code>f = nodesTop.RemoveNode(“FirstLevel”, AllChild:=False)</code></pre>
<BR>
This call will fail if the specified node has children. You might want to specify the optional argument as False to avoid accidentally deleting large branches from the registry. The default is to remove the node and all its children. Note that a node can’t remove itself.</p>
</font></BODY>
</HTML>

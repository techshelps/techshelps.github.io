<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Data Initialization Problem</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="thedatainitializationproblem"></a>The Data Initialization Problem</h1>
<BR>
Before we start looking at new kinds of data such as resources, let’s look back at one of the problems confronting programmers in any language: initializing variables. What value does a variable have when you first declare it, and what happens if you try to read it before you initialize it? And how do you get an initial value into a variable? And why bother to initialize variables, anyway?</p>
<BR>
The last question is easy to answer. Take a look at control and form properties. You initialize them at design time in the Properties window. Think of the extra code if you had to initialize every Caption property of every button at run time. Initialization is so important to control and form properties that Visual Basic keeps making property pages more and more sophisticated. For example, you can initialize the strings of a ListBox control at design time, a task you had to perform at run time in early versions. All the good reasons for allowing you to initialize properties are equally good reasons for allowing you to initialize variables in code. You often want not only an initial default value but also the ability to change the default.</p>
<BR>
In some languages, uninitialized variables have a semirandom value. In C, for example, local variables (but not global or static variables) are undefined. If you want an initial value, you must give it. Fortunately for C programmers, this is easy to do. An undefined variable is a disaster waiting to happen, and careful C coders initialize their variables as close to declarations as possible. In contrast, Visual Basic always initializes all variables whenever they are declared. String variables are initialized to vbNullString, numeric variables are initialized to 0, Variants are initialized to Empty, and object variables are initialized to Nothing.</p>
<BR>
This difference fits the philosophies of C and Visual Basic. C doesn’t initialize variables to a default because local variables must be initialized at run time. This has a cost, and C doesn’t do any run-time work unless you ask for it. Undefined variables are dangerous, but that’s your problem. Visual Basic is more concerned with safety. If you declare an array of 5000 Integers, Visual Basic will initialize them all to 0 even if it takes extra run-time work to do so.</p>
<BR>
The problem for Visual Basic programmers is that 0 or Empty might not be the initial value the program needs. In C, you can combine the declaration of a variable with its initialization:</p>
<pre><code>int cLastWindow = 20;</code></pre>
<BR>
In Visual Basic, declaration and initialization are different statements:</p>
<pre><code>Dim cLastWindow As Integer<BR>cLastWindow = 20</code></pre>
<BR>
This usually works OK for local variables, but it’s a problem for module-level (private) or global (public) variables. You must declare these in the Declarations section at the top of the module, where executable statements such as variable assignments aren’t allowed.</p>
<BR>
You need to find some other place to put the initialization statement, and that place must be reached only once—either when the module is loaded or the first time the variable is accessed. No matter how you initialize your variables, the initialization statement will be separated from the declaration in your source file, which makes initialization code difficult to maintain. If you change the declaration, you must go to a completely separate location to change the initialization, even though the two parts are logically related.</p>
<BR>
What’s needed to initialize variables is a combination declaration and initialization such as this:</p>
<pre><code>Dim cLastWindow As Integer = 20<BR>Static fFirstTime As Boolean = True<BR>Private sExeFile As String = “VB.EXE”<BR>Public aiCount(1 To 10) As Long = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)<BR>Public ai3D(1 To 2, 1 To 3) As Long = ((1, 2), (2, 2), (2, 1))<BR>Private perMe As TPerson = (“McKinney”, “Bruce”, 21, _<BR>                                (“24 First Ave.”, “Andula”, _<BR>                                 “Basic”, “Cathistan”, 72948 _<BR>                                ) _<BR>                           )</code></pre>
<p>
As you know, Visual Basic has no such syntax. It’s the only major computer language that doesn’t.</p>
<p>
I really wanted to delete this whole section from the second edition of my book, but alas, version 5 offers no fixes for the biggest flaw in the Visual Basic language. Instead, it tempts us by offering the exact syntax we need in a less useful context. The new typed optional arguments allow initialization of procedure arguments:<pre><code>Sub GiveMe(Optional rMoney As Double = 1000000)</code></pre>
<BR>
Furthermore, you can also specify a type along with an initial Const value:</p>
<pre><code>Const rDoubleOrNothing As Double = 2000000</code></pre>
<BR>
These are both very fine features but little more than fluff compared to what we really need:</p>
<pre><code>Private rBigBucks As Double = 8000000</code></pre>
</p>
<BR>
Notice that the sample initializations get significantly more complex when you start dealing with arrays, multidimensional arrays, UDTs, and nested UDTs—not to mention initializing collections of arrays of classes. Needless to say, the syntax above is not the only one possible.</p>
<BR>
Initializing constants is a related problem. Of course, all constants are initialized by definition, but the limited syntax of the Const statement makes it impossible to initialize arrays, UDTs, and strings containing control characters, to mention a few common types. For example, wouldn’t it be handy to have the following constants?</p>
<pre><code>Const sCrLf = Chr$(13) &amp; Chr$(10)<BR>Const asDays(1 To 7) = (“Sunday”, “Monday”, “Tuesday”, “Wednesday”, _<BR>                        “Thursday”, “Friday”, “Saturday”)</code></pre>
<BR>
Neither statement is legal in Visual Basic. You have to get the equivalent by declaring variables and then initializing them later, even though you have no intention of ever modifying them and would prefer that they were constants.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Source Code and Components</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="sourcecodecomponents"></a>Source Code and Components</h1>
<p>
When you pick up a copy of <i>Hardcore Visual Basic</i>,<i> Second Edition</i> you probably think of it as a book with an accompanying CD that contains code samples. I suppose this traditional view is technically correct, but I think of <i>Hardcore Visual Basic, Second Edition </i>as some components with source code and an accompanying book. This is a significant difference from most computer books and a big change from the first edition. It means that you can use the book in several ways:
<ul>
<li>
Take the companion CD out of the back and throw the remaining block of paper in the recycle bin. Run the setup program, but then save yourself a lot of disk space by deleting all the sample programs and the component source code. You’ll be left with a type library <BR>and several ActiveX controls and other components. Use the Object Browser to figure out the methods and properties of these components so that you can use them in your programs. You’ll get your money’s worth of new functions, classes, interfaces, and controls, but you’ll have trouble figuring them out because they’re not documented at the level you would expect if you bought a standalone component.<br><br></li>
<li>
If the preceding suggestion seems too radical, you could go the other way. Read the book. When you see code that interests you, find it on the companion CD and paste it into your programs. You can paste code from the components or from the samples that use the components. Many of the procedures in the book have dependencies on other procedures in other modules, so you might end up doing a lot of pasting from different places to get things working. As a slightly less extreme option, use the modules from the components, but not the compiled components themselves.<br><br></li>
<li>
You’ve probably guessed that my recommendation lies somewhere between these two extremes. Read the book for explanations of what the components do, how they work, and why they’re needed. Look at the sample programs as examples of how to use the components. Look at the component source code to see exactly how the component works. Decide on a case-by-case basis whether you want to use the whole component, use component modules, or paste specific bits of code. Chapter 5 will give you more information on how to make the choice.</li>
</ul>
<p>
Before I summarize the components provided with <i>Hardcore Visual Basic</i>,<i> <BR>Second Edition</i> I want to introduce an idea that will be explained in detail in Chapter 5. When you purchase this book you buy the text of the book and all the source code on the companion CD. You can use that source code any way you see fit (except distribute it to others as your own work). You also buy the compiled programs and components on the companion CD. The components are not licensed and can be distributed to customers with your applications. You bought it. It’s yours.</p>
<p>
What you didn’t buy is the right to modify those components. I own the components. You own only the right to use them. ActiveX components come with a contract designed to solve the multiversion compatibility problems common with system DLLs. If everyone who finds a bug in a component fixes the bug, recompiles the component, and ships a slightly different version with the bug fix, incompatible versions will proliferate until the earth explodes in a great ball of fire. Fortunately, most component developers don’t ship source code with their components. Those of us who do have to request your cooperation in maintaining the integrity of our components. Of course there aren’t any bugs in my components, but if you find one anyway, here are the rules.</p>
<p>
Send me a bug report and eventually I’ll post an updated component. If you can’t wait for that, you can combine modules from my components into your own component. Just don’t give it the same name or GUIDs as mine. Although you can do this as an out, don’t do it lightly. If your customer purchases another product that uses one of my components, you might end up duplicating code that the customer already has.</p>
</font></BODY>
</HTML>

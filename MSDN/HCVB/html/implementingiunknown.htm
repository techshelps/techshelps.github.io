<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing IUnknown</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="implementingiunknown"></a>Implementing IUnknown</h1>
<BR>
Visual Basic does a lot of work behind the scenes to make classes work. If you want a class to work properly in B--, you have to manage everything yourself. Here’s one possible version of the CHardway class:</p>
<pre><code>‘ CHardway (CLSID_CHardway)<BR>Implements IID_IHardway   ‘ Every class implements default interface <BR>Implements IID_IUnknown   ‘ Every interface implements IUnknown<BR>                          ‘ Any class can implement additional interfaces<BR>§<BR><BR>’ Private variables<BR>§<BR><BR>Function IUnknown_QueryInterface(iid As GUID) As Variant<BR>    Select Case iid <BR>    Case IID_IUnknown<BR>        IUnknown_QueryInterface = IUnknown(Me)<BR>    Case IID_IHardway<BR>        IUnknown_QueryInterface = IHardway(Me)<BR>    ‘ Case IID_IAnyOtherInterface<BR>        ‘ IUnknown_QueryInterface = IAnyOtherInterface(Me)<BR>    Case Else<BR>        IUnknown_QueryInterface = 0<BR>        Exit Function<BR>    End Select<BR>    IUnknown_AddRef<BR>End Function<BR><BR>’ AddRef and Release discussed later<BR>Sub IUnknown_AddRef()<BR>§    <BR><BR>’ IHardway delegates to IUnknown<BR>Function IHardway_QueryInterface(iid As GUID) As Variant<BR>    IHardway_QueryInterface = IUnknown_QueryInterface(iid)<BR>End Function<BR><BR>’ The rest of the class<BR>Property Get IHardway_Name(sNameA As String)<BR>§</code></pre>
<BR>
Visual Basic classes also implement the IDispatch interface to support late binding through a complicated mechanism that I don’t even want to think about, much less describe. Fortunately, this example supports only early binding.</p>
<BR>
In the QueryInterface implementation, requests for unrecognized interfaces fall through to the Else clause and fail. If the interface is recognized, an AddRef is done on the newly referenced object. We’ll see what that means shortly.</p>
<BR>
Don’t worry if this doesn’t make sense. The main point Visual Basic programmers need to know about QueryInterface is that it’s not free. Things you normally don’t know or care about are going on in the background all the time.</p>
</font></BODY>
</HTML>

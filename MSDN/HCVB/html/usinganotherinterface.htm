<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using another interface</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="usinganotherinterface"></a>Using another interface</h1>
<BR>
The Global Wizard program picks which conversion it wants to perform through some logic that we don’t care about, and sends the results to the following function:</p>
<pre><code>Sub UpdateTargetFileDisplay()<BR>    HourGlass Me<BR>    <BR>    ‘ Select the appropriate filter and assign to any old object<BR>    Dim filterobj As Object<BR>    Select Case emtCur<BR>    Case emtStandard<BR>        If chkDelegate Then<BR>            ‘ Translates standard module to global class with delegation<BR>            Set filterobj = New CModGlobDelFilter<BR>        Else<BR>            ‘ Translates standard module to global class w/o delegation<BR>            Set filterobj = New CModGlobFilter<BR>        End If<BR>    Case emtClassPublic<BR>        ‘ Translates public class to private class<BR>        Set filterobj = New CPubPrivFilter<BR>    Case emtClassGlobal<BR>        ‘ Translates global class to standard module<BR>        Set filterobj = New CGlobModFilter<BR>    Case emtClassPrivate<BR>        ‘ Translates private class to public class<BR>        Set filterobj = New CPrivPubFilter<BR>    Case Else<BR>        txtDst = ““<BR>        Exit Sub<BR>    End Select<BR>    ‘ Setting name isn’t performance sensitive, so do it late bound<BR>    filterobj.Name = txtDstModName<BR>    <BR>    ‘ Use early-bound variable for performance sensitive filter<BR>    Dim filter As IFilter<BR>    Set filter = filterobj<BR>    filter.Source = txtSrc<BR>    FilterText filter<BR>    txtDst = filter.Target<BR>    HourGlass Me<BR>End Sub</code></pre>
<BR>
You might recall my saying at the start of this chapter that the Object type and late binding are evil, and yet look at the type of the <i>filterobj</i> variable at the top of this procedure. Call me a liar. Call me a realist. All these filter classes have a Name property, but it’s set only once. No one will be able to tell the difference if the class-specific objects are bound late rather than early. On the other hand, the properties and methods of the IFilter variable passed to FilterText will be called over and over. You’d notice the difference on large conversion operations if you passed a variable with Object type rather than IFilter type.</p>
</font></BODY>
</HTML>

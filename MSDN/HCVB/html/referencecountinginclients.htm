<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Referencing counting in clients</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="referencecountinginclients"></a>Reference counting in clients</h1>
<BR>
Now let’s look at some client code. Assume the following real Visual Basic <BR>fragment:</p>
<pre><code>Dim toughluck As CHardway, toobad As CHardway, forgetit As CHardway<BR>Set toughluck = New CHardway<BR>Set toobad = toughluck<BR>Set forgetit = toobad<BR>Set toobad = Nothing<BR>Set toughluck = forgetit</code></pre>
<BR>
Notice that the last assignment is redundant because <i>toughluck</i> already has a CHardWay object, but we’re going to do it anyway to illustrate a point. Let’s work through the reference counting using the B-- dialect:</p>
<pre><code>‘’ Dim toughluck As CHardway, toobad As CHardway, forgetit As CHardway<BR>Dim toughluck As CLSID_CHardway = 0, toobad As CLSID_CHardway = 0<BR>Dim forgetit As CLSID_CHardway = 0<BR>’’ Set toughluck = New CHardway<BR>toughluck = CreateInstance(CLSID_CHardway, IID_IHardway)    ‘ c = 1<BR>if toughluck = 0 Then Goto ErrorHandler<BR>’’ Set toobad = toughluck<BR>’ Includes automatic AddRef by QueryInterface<BR>toobad = IUnknown(toughluck).QueryInterface(IID_IHardway)   ‘ c = 2<BR>if toobad = 0 Then Goto ErrorHandler<BR>’’ Set forgetit = toobad<BR>’ Includes automatic AddRef<BR>forgetit = IUnknown(toobad).QueryInterface(IID_IHardway)    ‘ c = 3 <BR>if forgetit = 0 Then Goto ErrorHandler<BR>’’ Set toobad = Nothing<BR>IUnknown(toobad).Release                                    ‘ c = 2<BR>toobad = 0                           <BR>’’ Set toughluck = forgetit<BR>IUnknown(toughluck).Release                                 ‘ c = 1<BR>’ Includes automatic AddRef<BR>toughluck = IUnknown(forgetit).QueryInterface(IID_IHardway) ‘ c = 2<BR>if toughluck = 0 Then Goto ErrorHandler</code></pre>
<BR>
An assignment statement in Visual Basic translates into two statements in B--. The first B-- statement calls Release on the object variable being assigned to (the left side) to unreference whatever that variable referenced before. The second B-- statement calls QueryInterface on the object being assigned (the right side) and passes the type of the object being assigned to (the left side). If the types are compatible, the assignment succeeds and AddRef will be called on the assigned object variable to count the new reference.</p>
<BR>
Make sure you never call QueryInterface, Release, or AddRef on an object variable that is Nothing (0). Nothing has no methods, and calling them will get you in big trouble.</p>
<BR>
If you think this doesn’t look all that bad, well, you’re not seeing how many times I had to rewrite the code to get it past the human compilers, Glenn Hackney and Marc Young. Of course, we still don’t know whether this code would compile on a real B-- compiler.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Integer Parameters</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="integerparameters"></a>Integer Parameters</h1>
<BR>
Most parameters in the Windows API are integers of one kind or another. C makes a distinction between signed and unsigned integers, but to Basic they’re all signed. You can assign all integers—signed and unsigned—to Integers and Longs. “Hammering Bits,” page 271, discusses some of the problems you might have dealing with integers when you think they are unsigned but Basic thinks they are signed.</p>
<BR>
In the Windows API, you usually pass integers by value using the ByVal attribute. Table 2-2 lists the kinds of integers you’ll see in the API documentation and shows how to handle them in Declare statements.</p>
<table>
<tr valign=top>
<td>
<b>Windows API</b></td>
<td>
<b>Basic</b></td>
</tr>
<tr valign=top>
<td>
int, INT</td>
<td>
ByVal Long</td>
</tr>
<tr valign=top>
<td>
UINT</td>
<td>
ByVal Long</td>
</tr>
<tr valign=top>
<td>
BOOL</td>
<td>
ByVal Long</td>
</tr>
<tr valign=top>
<td>
WORD</td>
<td>
ByVal Integer</td>
</tr>
<tr valign=top>
<td>
DWORD</td>
<td>
ByVal Long</td>
</tr>
<tr valign=top>
<td>
WPARAM</td>
<td>
ByVal Long</td>
</tr>
<tr valign=top>
<td>
LPARAM, LRESULT</td>
<td>
ByVal Long</td>
</tr>
<tr valign=top>
<td>
COLORREF</td>
<td>
ByVal Long</td>
</tr>
<tr valign=top>
<td>
ATOM</td>
<td>
ByVal Integer</td>
</tr>
<tr valign=top>
<td>
HANDLE and friends</td>
<td>
ByVal Long</td>
</tr>
<tr valign=top>
<td>
BYTE</td>
<td>
ByVal Byte</td>
</tr>
<tr valign=top>
<td>
char</td>
<td>
ByVal Byte</td>
</tr>
</table><BR>
<BR>
<b>Table 2-2. Integers in the Windows API.</b></p>
<BR>
For passing integers, the API contract is simple. Basic agrees to put integer values on the stack and never see them again. Windows can do whatever it wants with those values. All that can go wrong here is that you could pass an integer too large for an Integer type or a Long type. Basic will catch this error before it gets anywhere near Windows. Of course, you could always pass a value that a particular API function doesn’t understand, but Windows promises to fail politely and return an error code in these cases.</p>
<BR>
Here’s a simple integer example. The Win32 documentation shows FloodFill as follows:</p>
<pre><code>BOOL FloodFill(<BR>    HDC hdc,            // Handle of device context<BR>    int nXStart,        // X-coordinate of starting position<BR>    int nYStart,        // Y-coordinate of starting position<BR>    COLORREF crFill     // Color of fill boundary<BR>);</code></pre>
<BR>
You declare it this way in Basic:</p>
<pre><code>Declare Function FloodFill Lib “GDI32” (ByVal hdc As Long, _<BR>    ByVal nXStart As Long, ByVal nYStart As Long, _<BR>    ByVal crFill As Long) As Long</code></pre>
<p>
You don’t have much choice about how to declare this function, but you can choose how to declare any variables you plan to pass to it. Because you’re passing by value, Visual Basic can do type conversion on any variables you pass. For example, the X- and Y-coordinate variables could be stored in Integers. You’d need an awfully big monitor to be higher than 32,767 or lower than <BR><font face="Symbol"><span style="font-family:symbol">&#45;</span></font>32,768 if you’re measuring in pixels. I hope to have such a monitor on my <BR>desk someday, but for now I consider it fairly safe to use Integer variables. Basic will convert them to Longs before passing them to FloodFill.</p>
<p>
I use the Windows version of Hungarian in sample declarations, although I don’t like it. “Basic Hungarian,” page 16, explains what I don’t like and how my version of Hungarian differs. Apologies for any confusion this causes. The parameter names in declarations are ignored anyway, and I thought it would be better for my declarations to match the API documentation. Besides, I created a lot of my Declare statements by cutting, pasting, and modifying C prototypes, and I was too lazy to change the names.</p>
</font></BODY>
</HTML>

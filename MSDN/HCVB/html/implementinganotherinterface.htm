<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing another interface</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="implementinganotherinterface"></a>Implementing another interface</h1>
<BR>
To get another view on this strange phenomenon, let’s look at another implementation of IFilter. Like Bug Wizard, Global Wizard does several conversion operations. But unlike Bug Wizard, it handles each operation with a separate IFilter class rather than a Select Case block.</p>
<BR>
We’ll look at a typical global conversion class, CModGlobDelFilter. The Source and Target properties are implemented exactly the same as for CBugFilter, so we’ll skip to Translate:</p>
<pre><code>‘ Great big, long, complex state machine all in one ugly chunk<BR>Private Function IFilter_Translate(sLine As String, _<BR>                                   ByVal iLine As Long) As EChunkAction<BR>§</code></pre>
<BR>
That comment looks so intimidating that we’ll just skip over what a global class is and how you might convert one until Chapter 5. The important point is that IFilter_Translate will convert each line of one, count the line numbers, and return an indicator of what it did.</p>
<BR>
CModGlobDelFilter, like all of the other Global Wizard filter classes, has a Name property, which I won’t show because it’s simply the classic Get/Let property procedure pair wrapping an <i>sName</i> variable. The Name property is a property of the class, not of the IFilter interface. But its internal <i>sName</i> variable is visible inside the class to the implementation of the interface Translate method.</p>
<BR>
Hmmm. These conversion classes are all polymorphic through the IFilter class. But they also all have a Name property with the same String type. That’s dumb polymorphism. Why would anybody want to do that?</p>
</font></BODY>
</HTML>

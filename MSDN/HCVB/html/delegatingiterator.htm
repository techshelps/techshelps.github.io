<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Delegating the iterator</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="delegatingiterator"></a>Delegating the iterator </h1>
<BR>
There’s just one more step to make CDrivesO a real collection—a step so bizarre that I’m embarrassed to describe it. But I’m going to put the literary equivalent of a bag over my head and forge ahead.</p>
<BR>
If you write a collection in another language, you have to create a method named _NewEnum. When a programmer codes a For Each block using your collection class, Visual Basic calls the _NewEnum method to create a hidden iterator object that implements the IEnumVARIANT interface. This object is essentially an iterator like the ones we created earlier with the CListWalker class. For each time through the loop, the Next method of the iterator object gets the next item in the collection.</p>
<BR>
In order for you to get Visual Basic to use your collection with For Each, you have to give your collection a _NewEnum that will delegate its creation of the enumeration object to the internal Collection. This is easier said than done, and easier shown than explained:</p>
<pre><code>‘ NewEnum must have the procedure ID -4 in Procedure Attributes dialog<BR>Public Function NewEnum() As IEnumVARIANT<BR>    Set NewEnum = drives.[_NewEnum]<BR>End Function</code></pre>
<BR>
The first peculiarity about this method is that it’s named NewEnum rather than _NewEnum; this is because underscores are illegal as the first character of Visual Basic symbol names. The second peculiarity is that, legal or not, the Collection class has a _NewEnum method, and you’ll have to delegate whatever it does to your NewEnum property. One of the more obscure features of Visual Basic is that you can access illegal names by putting them in square brackets. The third peculiarity is that NewEnum returns an IEnumVARIANT type. This is the type of the iterator in the Collection class. (Some samples in other books use IUnknown as the return type, but it comes to the same thing.)</p>
<BR>
The last and most outstanding peculiarity is how you tell Visual Basic that your NewEnum method is really the _NewEnum method. It’s a simple recipe. You mix together eye of newt, toe of frog, wool of bat, and tongue of dog…. No, wait. That’s a different kind of magic. In this case, you assign a magic number to the procedure ID in the Dialog Box From Hell (DBFH). Figure 4-3 shows you how.</p>
<BR><img src="f04te03.gif"></p><BR>
<b>Figure 4-3. Assigning the magic ID to NewEnum.</b></p>
<p>
As you might remember, the Procedure ID combo box in the DBFH has several entries, including (None), (Default), AboutBox, and a bunch of other irrelevant nonsense. But it doesn’t have an entry for NewEnum, _NewEnum, or any other name that matches what you want. Fortunately, the Procedure ID value is set with an ordinary combo box that allows you to either select one of the suggested entries or type in your own. That’s what you do: you type in the magic ID number, which is—drumroll please—negative four.</p>
<p>
<b>FLAME&#09;</b>This magic works, even though it violates all standards of Basic decency. This is formula stuff. There’s no room for creativity. &shy;Computers are better than humans at following formulas. Visual Basic is supposed to make things easy. You ought to be able to simply click a check box to indicate that you want this class to be a collection. You could then select which internal Collection variable you wanted to delegate to (in the unlikely event there was more than one internal Collection). Visual Basic would automatically create the NewEnum property. It wouldn’t be as easy as inheritance, but at least it wouldn’t be an object of ridicule.</p>
</font></BODY>
</HTML>

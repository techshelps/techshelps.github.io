<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Coding C in Basic</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="codingcinbasic"></a>Coding C in Basic</h1>
<BR>
<i>Bruce:</i> What do you mean?</p>
<BR>
<i>Joe:</i> Look what you’re doing every time you call StrSpan or StrBreak. You’re cutting off the remaining part of the string and passing it as an argument. That would work fine in C because C just passes pointers to strings. The whole string stays put in memory, but you’re pointing only to the tail end of it. But in Basic, when you pass the result of Mid$ to a function, you create a new temporary string. It’s a separate string that has to be created for the function it’s passed to and then destroyed when the function leaves. You don’t want to create any more new strings than you need.</p>
<BR>
<i>Bruce:</i> Well, OK, but how do I keep from creating new strings?</p>
<BR>
<i>Joe:</i> You just pass one string—<i>sSave</i>—but you also pass the current position.</p>
<BR>
<i>Jane:</i> But that means changing the design of StrSpan and StrBreak.</p>
<BR>
<i>Joe:</i> Yeah. So the call changes from</p>
<pre><code>iNew = StrSpan1(Mid$(sSave, iStart), sSeps)</code></pre>
<BR>
to</p>
<pre><code>iNew = StrSpan2(sSave, iStart, sSeps)</code></pre>
<BR>
Then your StrSpan implementation changes to this:</p>
<pre><code>Function StrSpan2(sTarget As String, ByVal iStart As Integer, _<BR>                  sSeps As String) As Integer<BR>    <BR>    Dim cTarget As Integer<BR>    cTarget = Len(sTarget)<BR>    ‘ Look for start of token (character that isn’t a separator)<BR>    Do While InStr(sSeps, Mid$(sTarget, iStart, 1))<BR>        If iStart &gt; cTarget Then<BR>            StrSpan2 = 0<BR>            Exit Function<BR>        Else<BR>            iStart = iStart + 1<BR>        End If<BR>    Loop<BR>    StrSpan2 = iStart<BR><BR>End Function</code></pre>
<BR>
<i>Jane:</i> But you’re making StrSpan and StrBreak harder to use. They get a confusing extra argument. I mean, who’d guess how to use these things from the arguments?</p>
<BR>
<i>Joe:</i> That’s just how Basic works. Nothing but GetToken will call them anyway. If anybody else did use them, they’d have to deal with the same efficiency &shy;problem. If you don’t like Basic, use C.</p>
<BR>
<i>Mary:</i> Joe, sometimes I wonder why a guy who hates Basic so much chooses to work on it. You just like to criticize, and Basic is an easy target.</p>
<BR>
<i>Jane:</i> He’s not as tough as he acts. Actually, he has a soft spot for Basic.</p>
<BR>
<i>Bruce:</i> Instead of criticizing the language, you ought to fix it. Look how I have to use this stupid Mid$ function just to get a character out of a string:</p>
<pre><code>Do While InStr(sSeps, Mid$(sTarget, iStart, 1))</code></pre>
<BR>
In most languages, you access a character in a string the same way you access an element in an array of bytes—maybe something like this:</p>
<pre><code>Do While InStr(sSeps, sTarget(iStart))</code></pre>
<BR>
I hope that, internally, you’re at least optimizing the special case of extracting a single character.</p>
<BR>
<i>Joe:</i> Well, I’m not sure….There might not be anything we could do. A one-character&shy; string is no different from any other string in Basic.</p>
<BR>
<i>Mary:</i> Maybe you should make sure. Check the code.</p>
<BR>
<i>Archaeologist’s Note: We have no record of whether the changes Joe suggested resulted in any performance benefit in the ancient Basic language of the day, but the same changes in modern Visual Basic provide a 19 percent performance improvement even after improving the error checking. However, you still have to use Mid$ to extract a single character.</i></p>
</font></BODY>
</HTML>

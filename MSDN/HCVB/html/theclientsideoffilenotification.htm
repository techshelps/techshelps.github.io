<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Client Side of File Notification</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="theclientsideoffilenotification"></a>The Client Side of File Notification</h1>
<BR>
The File Notification Server (NOTIFY.VBP) encapsulates the file change notification in an ActiveX application that you can use from any program. You can see how it works in the Browse Picture Files program (BROWSE.VBP), which acts as a client of the File Notification Server. The program allows you to browse through picture files, seeing and hearing each of them. You can see the program at work in Figure 11-7. It not only displays icons, cursors, bitmaps, meta&shy;files, wave files, and AVI clips, but it also copies, deletes, renames, and moves them. And it updates its display when other processes remove, create, or modify picture files or directories.</p>
<BR><img src="f11te07.gif"></p><BR>
<b>Figure 11-7. Browsing pictures.</b></p>
<BR>
The Browse Picture Files program receives file notifications from a CFileNotify object by way of an IFileNotifier interface. The key declarations for this connection are at the top of the main client form:</p>
<pre><code>' Create an object that notifies client of file changes<BR>Private notify As CFileNotify<BR><BR>' Implement an interface that connects to CFileNotify<BR>Implements IFileNotifier</code></pre>
<BR>
The <i>notify </i>object is the EXE server that will use Win32 file notification API functions to watch for any changes to files or directories. But the client has to tell the server object which directories to watch by calling its Connect and Disconnect methods. Whenever the user changes a directory in the browser, it uses the following code to disconnect the old directory and connect the new one:</p>
<pre><code>Private Sub dirPic_Change()<BR>With notify<BR>    ' Synchronize the file control and select the first file<BR>    filPic.Path = dirPic.Path<BR>    If filPic.ListCount &gt; 0 Then filPic.ListIndex = 0<BR><BR>    ' Watch whole drive for directory changes<BR>    If hNotifyDir &lt;&gt; -1 Then .Disconnect hNotifyDir<BR>    hNotifyDir = .Connect(Me, dirPic.Path, _<BR>                          FILE_NOTIFY_CHANGE_DIR_NAME, False)<BR>    ' Watch current directory for name changes (delete, rename, create)<BR>    If hNotifyFile &lt;&gt; -1 Then .Disconnect hNotifyFile<BR>    hNotifyFile = .Connect(Me, dirPic.Path, _<BR>                           FILE_NOTIFY_CHANGE_FILE_NAME, False)<BR>    ' Watch current directory for modifications of file contents<BR>    If hNotifyChange &lt;&gt; -1 Then notify.Disconnect hNotifyChange<BR>    hNotifyChange = .Connect(Me, dirPic.Path, _<BR>                             FILE_NOTIFY_CHANGE_LAST_WRITE, False)<BR>End With<BR>End Sub</code></pre>
<BR>
Skip the first few lines that handle normal directory changes, and concentrate on the code that connects the FBrowsePictures form to the server. First you disconnect any previous connection, and then you connect the server to the new directory. The first connection tells the server to report any changes to the current directory. The last Boolean parameter indicates whether to check child directories. Windows 95 doesn’t support True, so you should supply False if you want the client to work on all platforms. Changes include any directories that have been created, removed, or renamed. The next connection looks for any files whose names have changed in the current directory. Deleting a file or creating a new file obviously changes the filename. The third connection looks for files that have been modified. If you change the current image file with ImagEdit or some other tool, the change appears in the Browse Picture Files program as soon as you save the file.</p>
<BR>
Notice that each call to Connect passes the form object in the first parameter. The Connect method actually takes an IFileNotifier type for this parameter, but since the form implements IFileNotifier, it is an IFileNotifier and can be early-bound to the server. In the previous edition of this book, the form was passed through an Object parameter. The server had to trust that the client would implement an object with the correct methods. The IFileNotifier interface makes the connection fast and type-safe. The interface consists of a single method:</p>
<pre><code>' Interface for CFileNotify to communicate with its clients<BR>Sub Change(sDir As String, efn As EFILE_NOTIFY, fSubTree As Boolean)<BR><BR>End Sub</code></pre>
<BR>
Here’s how the FBrowsePictures form implements IFileNotifier:</p>
<pre><code>Private Sub IFileNotifier_Change(sDir As String, _<BR>                                 efn As FileNotify.EFILE_NOTIFY, _<BR>                                 fSubTree As Boolean)<BR>    BugMessage &quot;Directory: &quot; &amp; sDir &amp; _<BR>               &quot; (&quot; &amp; efn &amp; &quot;:&quot; &amp; fSubTree &amp; &quot;)&quot; &amp; sCrLf<BR>    Select Case efn<BR>    Case FILE_NOTIFY_CHANGE_DIR_NAME, FILE_NOTIFY_CHANGE_FILE_NAME<BR>        Dim i As Integer<BR>        ' Refresh drive, directory, and file lists<BR>        i = filPic.ListIndex<BR>        filPic.Refresh<BR>        filPic.ListIndex = IIf(i, i - 1, i)<BR>        dirPic.Refresh<BR>        drvPic.Refresh<BR>    Case FILE_NOTIFY_CHANGE_LAST_WRITE<BR>        ' Refresh current picture in case it changed<BR>        filPic_Click<BR>    End Select<BR>End Sub</code></pre>
<BR>
This code is a little sloppy, although there’s no harm done in this case. It &shy;refreshes everything in sight rather than trying to figure out exactly what changed. You might be able to be more exact in your code. Now let’s look at where those notification calls come from.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Registry Blues</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="registryblues"></a>Registry Blues</h1>
<p>
Mastery of the registry is one of the skills necessary to join the elite group of Hardcore COM programmers. Technically, the registry isn’t directly related to COM, and it can be used in many contexts unrelated to COM. But the reverse isn’t true. You won’t get far understanding COM without being able to at least examine, and often modify, registry entries.</p>
<p>
The registry has been around for quite a while, but usually you could ignore it under 16-bit Windows. The fatal flaw of the 16-bit registry was its 64-KB capacity. Certain programs filled up a good chunk of that all by themselves, leaving you with little idea of how much registry space was left or what would happen if it overflowed. For all practical purposes, the 16-bit registry was left for OLE applications, which used it transparently.</p>
<p>
It’s a different story in Win32. You now have all the space you need. Microsoft strongly recommends that you stop using INI files and similar techniques and instead make the registry your one-stop data storage mechanism. This is more easily said than done. There are two problems. First, the registry functions are among the most quirky and difficult to use in the Windows API. Second, even if you figure out how to use them, you still have to figure out what’s where in the registry.</p>
</font></BODY>
</HTML>

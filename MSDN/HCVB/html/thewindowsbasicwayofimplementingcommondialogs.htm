<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Windows/Basic Way of Implementing Common Dialogs</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="thewindowsbasicwayofimplementingcommondialogs"></a>The Windows/Basic Way of Implementing Common Dialogs</h1>
<BR>
Let’s compare several different approaches to common dialogs. I’ll start with one of the simpler dialogs, color selection, and show you several different ways to display it.</p>
<BR>
First, here’s the traditional technique using the CommonDialog control. This assumes that the control is embedded somewhere in a Form, UserControl, or PropertyPage:</p>
<pre><code>Function OptionColor(Optional ByVal clr As Long = vbBlack) As Long<BR>With dlgColor<BR>    ' No VB constant for CC_SOLIDCOLOR, but it works<BR>    .Flags = cdlCCRGBInit Or CC_SOLIDCOLOR<BR>    ' Make sure it's an RGB color<BR>    .Color = TranslateColor(clr)<BR>    .hWnd = hWnd<BR>    ' Can only recognize cancel with error trapping<BR>    .CancelError = True<BR>    On Error Resume Next<BR>    .ShowColor<BR>    ' Return color, whether successful or not<BR>    If Err Then<BR>        OptionColor = clr<BR>    Else<BR>        OptionColor = .Color<BR>    End If<BR>End With<BR>End Function</code></pre>
<BR>
This is a little bit messy. You have to put constants into a Flags property to control the behavior of the dialog, and Visual Basic doesn’t supply all the possible constants. Fortunately, the control is a very thin wrapper for Windows API functions and it recognizes any constant you can find in the API documentation. Handling the Cancel button is atrocious, but it used to be even worse. Those of you who used the first version of the CommonDialog control know what I’m talking about, and those of you who didn’t use it don’t want to know.</p>
<BR>
The Dialog Automation Objects version is much better:</p>
<pre><code>Function OptionColor(Optional ByVal clr As Long = vbBlack) As Long<BR>Dim choose As New ChooseColor<BR>With choose<BR>    ' Make sure it's an RGB color<BR>    .Color = TranslateColor(clr)<BR>    .hWnd = hWnd<BR>    ' No property to specify solid colors.<BR>    ' Return color, whether successful or not.<BR>    If .Show Then<BR>        OptionColor = choose.Color<BR>    Else<BR>        OptionColor = clr<BR>    End If<BR>End With<BR>End Function</code></pre>
<BR>
Properties are used to define the characteristics of the dialog. You set them before. You read them afterward. But the designer didn’t give me the one property I wanted—displaying only solid colors, as opposed to displaying both solid and dithered colors. The RichTextBox editor won’t accept dithered colors for the text background or foreground, so why display them? Because the designer was trying to make things easy for most users, and if his or her choices don’t match yours or mine, we’re out of luck.</p>
<BR>
Finally, here’s my API wrapper version:</p>
<pre><code>Function OptionColor(Optional ByVal clr As Long = vbBlack) As Long<BR>    ' Make sure it's an RGB color<BR>    clr = TranslateColor(clr)<BR>    ' Choose a solid color<BR>    Call VBChooseColor(Color:=clr, AnyColor:=False, Owner:=hWnd)<BR>    ' Return color, whether successful or not<BR>    OptionColor = clr<BR>End Function</code></pre>
<BR>
Instead of properties, I use named arguments. I’m the designer, so of course I give myself the parameters I need, but perhaps you want different parameters—ones that I didn’t think anyone would ever want. In this example, my code is shorter, but that’s not always the case, and anyway, I prefer the more structured interface of the dialog objects. I’d drop my version in a minute if the dialog objects did everything I need.</p>
<BR>
There’s one other option for displaying common dialogs—create your own versions. I’ll do that later with the Find and Replace dialog boxes. I’ll also build a Picture display dialog box that looks sort of like the File Open dialog box later in this chapter.</p>
</font></BODY>
</HTML>

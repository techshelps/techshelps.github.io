<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Trouble in Paradise</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="troubleinparadise"></a>Trouble in Paradise</h1>
<BR>
<i>Bruce: </i>This function always works on the same string. Notice how the first block of code saves the <i>sTarget</i> argument in the static <i>sSave</i> variable for later iterations. The rest of the code uses <i>sSave</i> and ignores <i>sTarget</i>. The next block of code uses StrSpan to get the start of the token, and then the next block uses StrBreak to get the end. Once you have the start and the end, you cut out the token and return it.</p>
<BR>
<i>Joe:</i> What the heck are you doing with that Mid$ in your StrSpan call? And there it is again in StrBreak. Why are you passing the string length?</p>
<BR>
<i>Bruce:</i> Well, the first argument is the string, the second argument is the starting position—it’s a static that gets updated each time through—and the last argument is the string length….</p>
<BR>
<i>Joe:</i> And the string length never changes. You’re calculating it again and again. Furthermore, it’s wrong. If you’re halfway through the string, you’re giving the whole length of the string. I’m surprised this works at all.</p>
<BR>
<i>Jane:</i> It’s legal. If you give a length that goes past the end of the string, it just takes the characters to the end. But it is kind of ugly. You can drop that whole argument:</p>
<pre><code>iNew = StrSpan1(Mid$(sSave, iStart), sSeps)</code></pre>
<BR>
<i>Bruce:</i> Will that make it any faster?</p>
<BR>
<i>Joe:</i> I don’t remember the Mid$ code exactly, but I doubt that it will make much difference. The main point is that it will be right instead of working by accident.</p>
<BR>
<i>Bruce:</i> Embarrassing. I knew better than that.</p>
<BR>
<i>Joe:</i> You should be embarrassed.</p>
<BR>
<i>Jane:</i> Oh, come on. It’s the kind of mistake anybody might make.</p>
<BR>
<i>Joe:</i> I wouldn’t make it.</p>
<BR>
<i>Mary:</i> Joe, we don’t need this kind of negative attitude.</p>
<BR>
<i>Joe:</i> All right. So maybe anybody could make a slip. But the real problem with this code is deeper. It comes from coding C in Basic.</p>
</font></BODY>
</HTML>

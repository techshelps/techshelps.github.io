<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Looking up list box items</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="lookinguplistboxitems"></a>Looking up list box items</h1>
<BR>
The Visual Basic ListBox control (and related controls such as ComboBox and FileListBox) provide no direct way to look up the index of an item from its name. There is a workaround using the Text property (see “Collection Methods and Properties,” Chapter 11), but it’s not as flexible as you might like.</p>
<BR>
The Windows API provides a way to look up items by name using the LB_FIND&shy;STRING message. It takes only one line of code to send this message and just a few more lines to put the whole thing in a neat little wrapper:</p>
<pre><code>#If fComponent Then<BR>Function LookupItem(ctl As Object, sItem As String) As Long<BR>#Else<BR>Function LookupItem(ctl As Control, sItem As String) As Long<BR>#End If<BR>    If TypeName(ctl) = &quot;ComboBox&quot; Then<BR>        LookupItem = SendMessageStr(ctl.hWnd, CB_FINDSTRING, -1&amp;, sItem)<BR>    Else<BR>        LookupItem = SendMessageStr(ctl.hWnd, LB_FINDSTRING, -1&amp;, sItem)<BR>    End If<BR>End Function</code></pre>
<BR>
The key to this code is the LB_FINDSTRING message constant (and the CB_FINDSTRING message for combo boxes). The Windows API documentation tells you that the <i>wParam</i> value contains either the index of the item just before the item where the search should start or <font face="Symbol"><span style="font-family:symbol">&#45;</span></font>1 to search the entire list. The <i>lParam</i> value contains a pointer to the case-insensitive string being sought. You can pass a partial string so that “BIG” will find “BigDeal” or “Big Brother”, whichever comes first. The return value is the index of the found item (or <font face="Symbol"><span style="font-family:symbol">&#45;</span></font>1 if none is found). Windows also provides an LB_FINDSTRINGEXACT (and CB_FINDSTRINGEXACT) message for looking up the full case-sensitive string.</p>
<BR>
Notice that my LookupItem function uses conditional compilation to receive either a Control parameter or an Object parameter, depending on whether the function is located in a component. I want LookupItem to work with any ListBox-like control, so its first parameter can’t be more type-specific. I’d also like to avoid the late-binding penalties that come with the Object type but, unfortunately, Visual Basic won’t let you define a Control parameter in a public DLL procedure. Because this function allows you to pass in any control, be sure not to pass one whose underlying Windows control doesn’t support the LB_FINDSTRING (or CB_FINDSTRING) message. To be safe, this function should use error trapping to trap message failure, but I compromised. Perhaps you shouldn’t.</p>
<BR>
Before I learned about the LB_FINDSTRING message, I looked up items with a linear search. That’s still the way you have to look up items in the ItemData array. Visual Basic implements its ItemData feature using the LB_GETITEMDATA and LB_SETITEMDATA messages, but it doesn’t provide an LB_FINDITEMDATA message. You have to do it the hard way:</p>
<pre><code>#If fComponent Then<BR>Function LookupItemData(ctl As Object, data As Long) As Integer<BR>#Else<BR>Function LookupItemData(ctl As Control, data As Long) As Integer<BR>#End If<BR>    Dim i As Integer<BR>    LookupItemData = -1<BR>    For i = 0 To ctl.ListCount - 1<BR>        If data = ctl.ItemData(i) Then<BR>            LookupItemData = i<BR>            Exit Function<BR>        End If<BR>    Next<BR>End Function</code></pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Designing Find and Replace Dialog Boxes</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="designingfindreplacedialogboxes"></a>Designing Find and Replace Dialog Boxes</h1>
<p>
Because I like the design of Visual Basic’s Find and Replace dialog boxes, I used them as the model for XEditor’s dialog boxes (although I sometimes wish that the Find dialog box was modal instead of modeless).</p>
<p>
The obvious design solution is to create both a Find form and a Replace form, on the premise that these are separate operations. But if you carefully study Figure 9-3 on the facing page, you’ll notice a lot of shared features. In fact, the Find dialog box morphs into the Replace dialog box with a simple mouse click. I’d argue that the most efficient way to implement them in Visual Basic is to create one form that can appear in Find or Replace format, depending on how you set the properties.</p>
<p>
The trade-off here is code versus data. If you create two dialog boxes, you get two forms plus doubles of all the controls that appear in both. You also duplicate the code that handles common features. If you create one dialog box, you get only one form, one copy of each control, and one copy of all the code that handles the controls—although you need to add morphing code to hide unnecessary controls in the Find dialog box, to move controls around, to change button names, and so on.</p>
<p>
As you can see in Figure 9-4, XEditor’s Find and Replace dialog boxes differ a little from those in Visual Basic. The framed Search options in the Visual Basic dialog boxes—which allow you to choose the current procedure, module, pro&shy;ject, or selected text—don’t apply to a general text editor, so you can use that area for messages instead.</p>
<p><img src="f09te03.gif"></p><p><b>Figure 9-3.&nbsp;Visual Basic’s Find and Replace dialog boxes.</b></p>
<p><img src="f09te04.gif"></p><p>
<b>Figure 9-4.&nbsp;XEditor’s Find and Replace dialog boxes.</b></p>
<p>
The Use Pattern Matching<i> </i>check box is also missing. Although the Visual Basic library has the power to help you provide pattern matching, it doesn’t make that power easily available. The Visual Basic Like operator supplies a powerful pattern-matching language for comparing strings, but you need an InStrLike for finding them. I’ve seen code that does clever hacks with the Like operator for kludge pattern searching, but I don’t have an extra chapter to explain something that works only part of the time. Maybe we’ll see the equivalent of InStrLike someday. Recognizing whole words is a much simpler problem.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling the Windows API from Basic</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="callingwindowsapifrombasic"></a>Calling the Windows API from Basic</h1>
<p>
The vague concept we usually call the Windows API is, in practical terms, a growing collection of dynamic-link libraries. Basic programmers can simply think of DLLs as libraries of procedures. You don’t really need to know that DLLs are loaded at run time, that multiple programs can use the same DLL at the same time, or that the procedures in DLLs must be carefully written to allow this to happen safely.</p>
<p>
As a Basic programmer, the key fact you need to know about system DLLs is that they are written in another language—it doesn’t matter that it’s usually C. That other language has a different idea than Basic does about the best way to use addresses. This difference extends to all the fundamental questions of life:
<ul>
<li>
What is a string?<br><br></li>
<li>
What is an array?<br><br></li>
<li>
How big is an integer?<br><br></li>
<li>
What is an argument, and how should it be passed?<br><br></li>
<li>
What is a type, and how can it be ignored?<br><br></li>
<li>
What can a procedure return, and how?</li>
</ul>
<p>
These are closed questions with simple answers in Basic, but when you start calling DLLs, everything you know is, if not wrong, at least incomplete. To reach a deeper understanding of DLL functions, you have to go to that mysterious place where Basic parameters and variables meet C pointers and references: the stack.</p>
</font></BODY>
</HTML>

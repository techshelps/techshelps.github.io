<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object-Oriented Programming, Visual Basic Style</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="object-orientedprogrammingvisualbasicstyle"></a>Object-Oriented Programming, Visual Basic Style</h1>
<p>
You don’t have to know exactly what an object is in order to use one, but it helps. The following section might look like an academic essay about types, and at some point you might be tempted to skip to the part where we start playing with objects. And perhaps that will be OK for those of you who started ob&shy;ject-oriented programming with Visual Basic. Perhaps the Basic Way of objects seems natural to you and you don’t need my feature-by-feature comparison with UDTs and intrinsic types. It might be easier to just start out thinking of objects as being completely different from the other types and leave it at that.</p>
<p>
But I started my object-oriented career with C++. When the light finally dawned and I understood how Visual Basic objects worked, it seemed like a revelation worth sharing. Unfortunately, some of those revelations came after I wrote the first edition of this book and I’m afraid I passed on some misinformation. I hope you’ll at least attempt to wade through this, not only so I can atone for past sins, but also so you can avoid some of my mistakes.</p>
</font></BODY>
</HTML>

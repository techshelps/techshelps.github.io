<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading Cdrive data</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="readingcdrivedata"></a>Reading CDrive data</h1>
<BR>
The Kind, Number, and Root Property Get procedures can return pre-calculated data:</p>
<pre><code>Public Property Get Kind() As EDriveType<BR>    Kind = edtType<BR>End Property<BR><BR>Public Property Get Number() As Integer<BR>    Number = Asc(sRoot) - Asc(“A”) + 1<BR>    ‘ Network drives are zero<BR>    If Number &gt; 26 Then Number = 0<BR>End Property<BR><BR>Public Property Get Root() As Variant<BR>    Root = sRoot<BR>End Property</code></pre>
<BR>
The remaining properties can change dynamically, and shouldn’t be pre-calculated. Instead, the calculations are done in the Property Get procedures:</p>
<pre><code>Public Property Get FreeBytes() As Double<BR>    ‘ Always refresh size since free bytes might change<BR>    GetSize<BR>    If Not fDriveMissing Then<BR>        FreeBytes = CDbl(iFreeClusters) * iSectors * iBytes<BR>    End If<BR>End Property<BR><BR>Public Property Get TotalBytes() As Double<BR>    ‘ Get size info only on first access<BR>    If iTotalClusters = 0 And Not fDriveMissing Then GetSize<BR>    If Not fDriveMissing Then<BR>        TotalBytes = CDbl(iTotalClusters) * iSectors * iBytes<BR>    End If<BR>End Property<BR><BR>Public Property Get Label() As String<BR>    If Not fDriveMissing Then Label = sLabel<BR>End Property<BR><BR>Public Property Get Serial() As String<BR>    If Not fDriveMissing Then Serial = MUtility.FmtHex(iSerial, 8)<BR>End Property<BR><BR>Public Property Get KindStr() As String<BR>    KindStr = Choose(edtType + 1, “Unknown”, “Invalid”, “Floppy”, _<BR>                                  “Fixed”, “Network”, “CD-ROM”, “RAM”)<BR>    If fDriveMissing Then KindStr = KindStr &amp; “ Missing”<BR>End Property</code></pre>
<BR>
The FreeBytes and TotalBytes property procedures depend on GetSize, which calls the Win32 GetDiskFreeSpace Function and sets the <i>fDriveMissing</i> flag:</p>
<pre><code>Private Sub GetSize()<BR>    Call GetDiskFreeSpace(sRoot, iSectors, iBytes, _<BR>                          iFreeClusters, iTotalClusters)<BR>    fDriveMissing = (Err.LastDllError = 15)<BR>End Sub</code></pre>
<BR>
Notice that TotalBytes and FreeBytes return Double rather than Long (as I originally coded them). When I wrote the original CDrive for the first edition of this book, disks larger than 2 gigabytes didn’t exist and I didn’t encounter one until I tested CDrive with a network server. Now 2 gigabyte drives are common.</p>
<BR>
The Label, Serial, and KindStr property procedures call GetLabelSerial to retrieve the appropriate disk information and to determine whether the disk is present. GetLabelSerial is a wrapper for the GetVolumeInformation API function:</p>
<pre><code>Private Sub GetLabelSerial()<BR>    sLabel = String$(cMaxPath, 0)<BR>    Dim afFlags As Long, iMaxComp As Long<BR>    Call GetVolumeInformation(sRoot, sLabel, cMaxPath, iSerial, _<BR>                              iMaxComp, afFlags, sNullStr, 0)<BR>    If Err.LastDllError = 21 Then  ‘ The device is not ready<BR>        fDriveMissing = True<BR>    Else<BR>        fDriveMissing = False<BR>        sLabel = MUtility.StrZToStr(sLabel)<BR>    End If<BR>End Sub</code></pre>
<BR>
TotalBytes, FreeBytes, Serial, Kind, and KindStr have no Property Let statements because you can’t directly change the size or type of a disk. To make a property read-only, you define the Property Get procedure but not the Property Let. You can change the Label, and CDrive provides a Property Let to do so:</p>
<pre><code>Public Property Let Label(sLabelA As String)<BR>    If SetVolumeLabel(sRoot, sLabelA) Then sLabel = sLabelA<BR>End Property</code></pre>
</font></BODY>
</HTML>

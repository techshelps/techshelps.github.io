<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SearchPath</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="searchpath"></a>SearchPath</h1>
<BR>
Another common file task is to find out where a file is located, if anywhere, in a path list (usually the one in the PATH environment variable). Most language libraries provide a function for this purpose. Microsoft Visual C++, for example, has _searchenv. Visual Basic has zip. Actually, you could do this task in Basic. It’s simply a matter of getting the directory list with Environ$, parsing off each directory, appending the filename, and checking to see whether the file exists. But that’s a lot of work that the operating system already knows how to do.</p>
<BR>
Win32 provides the mother of all path-searching functions: SearchPath. Some of its many features, like those of GetFullPathName, don’t work well for Basic. The previous edition of this book provided a SearchDirs function that attempted to solve these problems. It was modeled closely on the SearchPath function. You could call it like this:</p>
<pre><code>sFullName = SearchDirs(sEmpty, “calc.exe”, sEmpty, iDir, iBase, iExt)</code></pre>
<BR>
The function would return the full path in the return value and the indexes of the directory, base file, and extension through reference variables. The first and third arguments were for the path to search and for the extension, but in most cases you would just pass an empty string (the sEmpty constant from my type library). You could use the returned indexes with the Mid$ function to extract the parts of the full path. This was nice, but you always had to declare and pass those index variables whether you wanted them or not, and you always had to pass empty variables for the path and extension.</p>
<BR>
The new SearchDirs function takes optional arguments for five of its six parameters. The original SearchDirs tried to maintain a parameter order similar to that of SearchPath, but SearchDirs orders the arguments logically in order to make it easier to leave off ones that usually aren’t needed. Any of the following Basic statements are OK:</p>
<pre><code>sFullName = SearchDirs(“calc”, “.exe”, , iBase, iExt, iDir)<BR>sFullName = SearchDirs(“calc.exe”, , , iBase, iExt)<BR>sFullName = SearchDirs(“calc”, “.exe”, Environ(“PATH”), iBase)<BR>sFullName = SearchDirs(“calc.exe”)</code></pre>
<BR>
That’s a lot of parameters, so let’s step through them. The first parameter is the file to be found. The filename is first because it is required and is often the only argument needed. It can include the extension, or the extension can be given in the second parameter. The third parameter is the path to be searched. No argument signals a search of the default Windows search path. The remaining arguments hold the variables in which the function can return the name, extension, and directory positions—in the same order as GetFullPath.</p>
<BR>
If you leave the third argument blank (as you usually will), SearchDirs looks for files in the following order:
<ol>
<li>
the executable directory<BR><BR></li>
<li>
the current directory<BR><BR></li>
<li>
the Windows system directory<BR><BR></li>
<li>
the Windows directory<BR><BR></li>
<li>
the directory list in the PATH environment variable</li>
</ol>
<BR>
When using SearchDirs, consider this order carefully. You might not always find what you expect to find where you expect to find it.</p>
<BR>
SearchDirs has other uses. It can search a different path list in an environment variable:</p>
<pre><code>sFullName = SearchDirs(“WINDOWS.H”, , Environ(“INCLUDE”))</code></pre>
<BR>
It can test for the existence of a file in the current directory:</p>
<pre><code>sFullName = SearchDirs(“DEBUG.BAS”, , “.”)</code></pre>
<BR>
That statement looks a lot like this one:</p>
<pre><code>sFullName = GetFullPath(“DEBUG.BAS”)</code></pre>
<BR>
But there’s a subtle difference. GetFullPath gives a valid filename whether or not the file exists. You can use it to get the full pathname of a file you’re about to create. SearchDirs confirms that a file with that name already exists. </p>
<BR>
You can also use SearchDirs to search for a file when you’re not sure of the extension:</p>
<pre><code>sName = “EDIT”<BR>Dim asExts(1 To 4) As String<BR>asExts(1) = “.EXE”: asExts(2) = “.COM”<BR>asExts(3) = “.BAT”: asExts(4) = “.PIF”<BR>For i = 1 To 4<BR>    sFullName = SearchDirs(sName, asExts(i))<BR>    If sFullName &lt;&gt; sEmpty Then Exit For<BR>Next</code></pre>
<BR>
This is why SearchDirs (and SearchPath) has a separate parameter for the <BR>extension.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>When to Raise Errors</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="whentoraiseerrors"></a>When to Raise Errors</h1>
<p>
There are four common situations in which your components might raise errors. Let’s take a look:
<ul>
<li>
The good news is that most of the time you don’t have to do anything. If the user passes an invalid argument or does some other bozo illegal thing when calling your component, you can ignore it. Visual Basic will automatically raise the appropriate error. Since you didn’t handle the &shy;error, it will fall through to the client. It’s the client’s problem, not yours.<br><br></li>
<li>
Often the errors raised by illegal operations in your components won’t make sense to clients. You might get the error “Object doesn’t support this property” inside your component method, but you don’t want to pass it back that way because you know from the context exactly which property is expected. You can create and raise a new error with a more specific message.<br><br></li>
<li>
Some errors you detect in your component might map to standard Visual Basic run-time errors. If you ask for a filename parameter and the user passes an invalid file, you can raise the standard “File not found” error rather than creating your own. This is a judgment call. Sometimes you might want to create your own more specific message.<br><br></li>
<li>
When you detect errors from API functions, you’ll usually want to generate your own error messages, but you don’t necessarily have to do it from scratch. Windows has an embedded string for every API error, and you can reuse those strings as your error descriptions.</li>
</ul>
</font></BODY>
</HTML>

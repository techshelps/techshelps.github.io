<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Walking the Cvector collection</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="walkingcvectorcollection"></a>Walking the CVector collection</h1>
<BR>
The CVector class doesn’t need to work with For Each. It’s more efficient to iterate with an index anyway, as you can see from the Performance sidebar on page 218. But Visual Basic has an internal iterator class for arrays, so why shouldn’t CVector have an iterator class? If nothing else, it will show you how Visual Basic makes For Each work with arrays.</p>
<BR>
The CVectorWalker class has the standard code for implementing IVariantWalker and delegating CEnumVariant, so let’s ignore that and concentrate on its state variable. All it needs is an <i>iCur </i>variable initialized to 0.</p>
<pre><code>‘ Private state data<BR>Private iCur As Long<BR><BR>Private Sub Class_Initialize()<BR>    ‘ Initialize position in collection<BR>    iCur = 0<BR>    §</code></pre>
<BR>
You’ve already seen the code for the CVector class, but I had to go back and add one detail. You might remember that CVector is actually based on an &shy;array variable named <i>av</i>. I had to add a friend property that shared that array through an indexed property named Vector.</p>
<BR>
As usual with iterator classes, the More method is the most interesting part of the implementation:</p>
<pre><code>Private Function IVariantWalker_More(v As Variant) As Boolean<BR>    ‘ Move to next element<BR>    iCur = iCur + 1<BR>    ‘ Return False if no more data<BR>    If iCur &gt; connect.Last Then Exit Function<BR>    ‘ Return element through reference<BR>    If IsObject(connect.Vector(iCur)) Then<BR>        Set v = connect.Vector(iCur)<BR>    Else<BR>        v = connect.Vector(iCur)<BR>    End If<BR>    IVariantWalker_More = True<BR>End Function</code></pre>
<BR>
More simply moves on to the next item until it passes the last item, as indicated by the Last property. Since CVector is a generic container, it has to check for objects and handle them differently.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using a List Iterator Class</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="usinglistiteratorclass"></a>Using a List Iterator Class</h1>
<BR>
If you write a separate iterator class that walks through the items in the list, you’ll be able to create multiple iterator objects. Each one will be able to walk through the list separately. Who would want a road with only one car permanently<BR>attached? It’s much better to make the road and the car separate objects and<BR>allow multiple cars at different places on the same road. If you’re not convinced by this analogy, hold your piece. There are other reasons for separate iterators.</p>
<BR>
Here’s an example of how to use an iterator:</p>
<pre><code>Dim walker As New CListWalker<BR>walker.Attach list<BR>Do While walker.More<BR>    s = s &amp; Space$(4) &amp; walker &amp; sCrLf<BR>Loop</code></pre>
<BR>
First you have to tell the iterator object which list to iterate by passing a list object to the Attach method. Then you loop through the items in the list. The Item property is the default member, so you can omit the method name. The CLink, CList, and CListWalker classes all have default Item properties. Don’t confuse them.</p>
<BR>
Since CListWalker is a separate class, two objects can iterate separately without interfering with each other. For example, here’s a nested iterator. The outside iterator walks partway, then the inside iterator walks the entire list, and finally the outside iterator regains control and continues where it left off:</p>
<pre><code>Dim walker2 As New CListWalker<BR>s = s &amp; “Nesting iterate:” &amp; sCrLf<BR>walker.Attach list<BR>Do While walker.More<BR>    s = s &amp; Space$(4) &amp; walker &amp; sCrLf<BR>    If walker = “Pig” Then<BR>        walker2.Attach list<BR>        s = s &amp; Space$(4) &amp; “Nested iterate:” &amp; sCrLf<BR>        Do While walker2.More<BR>            s = s &amp; Space$(8) &amp; walker2 &amp; sCrLf<BR>        Loop<BR>    End If<BR>Loop</code></pre>
<BR>
Stop! You probably think I’m missing the obvious. You don’t want to iterate with Do Loop. You want to iterate with For Each. It should be simple:</p>
<pre><code>s = s &amp; “Iterate with For Each:” &amp; sCrLf<BR>Dim v As Variant<BR>For Each v In list<BR>    s = s &amp; Space$(4) &amp; “V: “ &amp; v &amp; sCrLf<BR>Next</code></pre>
<BR>
That does, in fact, work, but I’m not going to tell you why until the end of the chapter. For now, all I can say is that classes that work with For Each work because they have an iterator class just as CList has a CListWalker.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Bottom Line on PaintPicture</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="thebottomlineonpaintpicture"></a>The Bottom Line on PaintPicture</h1>
<BR>
PaintPicture lacks the flexibility for the kinds of masking and blitting operations discussed in the rest of this chapter. It is tied to an unchangeable Picture <BR>object, whereas BitBlt and StretchBlt are tied to device contexts that you can change however you want. But you shouldn’t throw PaintPicture out of your toolbox. It’s certainly the easiest and fastest way to draw a thousand copies of a picture or to draw a picture in a thousand pieces. In other words, you can use it to create great visual effects.</p>
<BR>
If you’re going to be copying a picture around, it’s best to use an Image control as the picture container because it has lower overhead than a PictureBox. You can make it invisible if you don’t want to show the source. Simply pass its Picture property to PaintPicture or to any of your procedures that take Picture parameters. For example, this procedure draws a spiral pattern of bitmaps, just as you might use PSet to draw a spiral pattern of dots (think of the pictures as big dots):</p>
<pre><code>Sub BmpSpiral(cvsDst As Object, picSrc As Picture)<BR>With cvsDst<BR>    ‘ Calculate sizes<BR>    Dim dxSrc As Long, dySrc As Long, dxDst As Long, dyDst As Long<BR>    dxSrc = .ScaleX(picSrc.Width): dySrc = .ScaleY(picSrc.Height)<BR>    dxDst = .ScaleWidth: dyDst = .ScaleHeight<BR>    ‘ Set defaults (play with these numbers for different effects)<BR>    Dim xInc As Long, yInc As Long, xSize As Long, ySize As Long<BR>    Dim x As Long, y As Long<BR>    xInc = CInt(dxSrc * 0.01): yInc = CInt(dySrc * 0.01)<BR>    xSize = CInt(dxSrc * 0.1): ySize = CInt(dySrc * 0.1)<BR>    Dim radCur As Single, degCur As Integer, angInc As Integer<BR>    degCur = 0: angInc = 55<BR>    ‘ Start in center<BR>    x = (dxDst \ 2) - (dxSrc \ 2): y = (dyDst \ 2) - (dySrc \ 2)<BR><BR>    ‘ Spiral until off destination<BR>    Do<BR>        ‘ Draw at current position<BR>        .PaintPicture picSrc, x, y, , , , , , , vbSrcAnd<BR>        ‘ Calculate angle in radians<BR>        radCur = (degCur - 90) * (PI / 180)<BR>        ‘ Calculate next x and y<BR>        x = x + (xSize * Cos(radCur))<BR>        y = y + (ySize * Sin(radCur))<BR>        ‘ Widen spiral<BR>        xSize = xSize + xInc: ySize = ySize + yInc + 1<BR>        ‘ Turn angle<BR>        degCur = (degCur + angInc) Mod 360<BR>    Loop While (x &gt; 0) And (x + dxSrc &lt; dxDst - dxSrc) And _<BR>               (y &gt; 0) And (y + dySrc &lt; dyDst)<BR>End With<BR>End Sub</code></pre>
<p>
If you have an Image control with a bitmap picture, draw it on the current form with the statement <i>BmpSpiral Me, imgSmallBmp.Picture.</i></p>
<p>
Although previous versions of Visual Basic didn’t provide a built-in way to blit, they did have a built-in way to stretch. The Stretch property of the Image control provided the moral equivalent of StretchBlt with no ROP mode. If all you want to do with a picture is stretch or compress it, it’s hard to beat using the Image control with its Stretch property set to True. So how do you think Visual Basic implements the Stretch and AutoSize properties? Your guess is as good—and probably the same—as mine: StretchBlt.</p>
<BR>
Once you get the idea, it’s not hard to devise ways to change the algorithm for inward spirals and other patterns. You can also experiment with different ROP codes for combining the images. Figure 7-9 shows one effect.</p>
<BR>
Another PaintPicture trick with many variations is to break a large bitmap into small squares and display the squares in some pattern. For example, you can </p>
<BR><img src="f07te09.gif"></p><BR>
<b>Figure 7-9. The Bitmap Spiral in Fun ’n Games.</b></p>
<BR>
randomize the position of the squares to form a puzzle and then put them back together. Another variation is to draw the squares in their correct places but create a pattern that makes the picture appear to explode, crush, or spiral onto the surface.</p>
<BR>
Here’s a spiral bitmap effect. To try it, click the Spiral Bitmap button in the Fun ’n Games program. You can load your own digitized pictures or other large bitmaps by clicking the Large button or the picture box adjacent to it.</p>
<pre><code>Sub SpiralBmp(cvsDst As Object, picSrc As Picture, _<BR>              ByVal xOff As Long, ByVal yOff As Long)<BR>With cvsDst<BR>    Dim xLeft As Long, xRight As Long, yTop As Long, yBottom As Long<BR>    Dim dxSrc As Long, dySrc As Long, xSrc As Long, ySrc As Long<BR>    Dim xDst As Long, yDst As Long, xInc As Long, yInc As Long<BR>    Dim x As Long, y As Long<BR>    ‘ Initialize<BR>    dxSrc = .ScaleX(picSrc.Width): dySrc = .ScaleY(picSrc.Height)<BR>    xInc = dxSrc / 20: yInc = dySrc / 20<BR>    xLeft = 0: yTop = 0:<BR>    xRight = dxSrc - xInc: yBottom = dySrc - yInc<BR><BR>    ‘ Draw each side<BR>    Do While (xLeft &lt;= xRight) And (yTop &lt;= yBottom)<BR>        ‘ Top<BR>        For x = xLeft To xRight Step xInc<BR>            .PaintPicture picSrc, x + xOff, y + yOff, xInc, yInc, _<BR>                x, y, xInc, yInc, vbSrcCopy<BR>        Next<BR>        x = x - xInc: yTop = yTop + yInc<BR>        ‘ Right<BR>        For y = yTop To yBottom Step yInc<BR>            .PaintPicture picSrc, x + xOff, y + yOff, xInc, yInc, _<BR>                x, y, xInc, yInc, vbSrcCopy<BR>        Next<BR>        y = y - yInc: xRight = x - xInc<BR>        ‘ Bottom<BR>        For x = xRight To xLeft Step -xInc<BR>            .PaintPicture picSrc, x + xOff, y + yOff, xInc, yInc, _<BR>                x, y, xInc, yInc, vbSrcCopy<BR>        Next<BR>        x = x + xInc: yBottom = y - yInc<BR>        ‘ Left<BR>        For y = yBottom To yTop Step -yInc<BR>            .PaintPicture picSrc, x + xOff, y + yOff, xInc, yInc, _<BR>                x, y, xInc, yInc, vbSrcCopy<BR>        Next<BR>        y = y + yInc: xLeft = xLeft + xInc<BR>    Loop<BR>End With<BR>End Sub</code></pre>
<BR>
I can’t show you this effect on the page because the movement is the point; you’ll have to try it.</p>
</font></BODY>
</HTML>

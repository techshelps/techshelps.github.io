<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Vectors as Resizeable Arrays</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="vectorsasresizeablearrays"></a>Vectors as Resizeable Arrays</h1>
<p>
When Visual Basic version 4 was released, many programmers saw the new Collection class as an improved version of arrays. They started automatically replacing their arrays with Collections. Then they discovered the high performance cost and started changing Collections back to arrays.</p>
<p>
This is the wrong way to look at it. Collections don’t replace arrays; both are useful data structures with advantages and disadvantages. Choose the one that best fits the need.</p>
<p>
The advantage of arrays is their fixed size and structure. If you put an element in a certain position in an array, you can be sure that it will be there when you come back. You can access an element easily and efficiently as long as you re&shy;member its location.</p>
<p>
The disadvantage of arrays is their fixed size and structure. If you don’t know how many items you have, you don’t know how big to make the array. If you remove or add items, you have to jump through hoops to keep track of where everything is.</p>
<p>
Often, Collections are overkill if a variable number of elements is all you need to handle. If string indexing and other Collection features don’t do anything for you, perhaps you need a simpler, faster data structure known as a resizeable array, or vector.</p>
</font></BODY>
</HTML>

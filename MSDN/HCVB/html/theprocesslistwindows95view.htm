<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The process list-Windows 95 view</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="theprocesslistwindows95view"></a>The process list—Windows 95 view</h1>
<BR>
You can create a collection of the current processes by calling the CreateProcess&shy;List function, which will return a CVector of CProcess objects. The CVector class is an expandable array in a class wrapper. See “CVector Implementation” in Chapter 4. CreateProcessList works completely different for Windows 95 than for Windows NT, but this wrapper function hides the details so that you don’t have to worry about them.</p>
<BR>
When CreateProcessList is called under Windows 95, it calls ToolHelp32 functions to get a list of all the processes in the system. These functions will look familiar to those who used the 16-bit ToolHelp functions on which they are based. Here’s the code for the first half of CreateProcessList:</p>
<pre><code>Function CreateProcessList() As CVector<BR>    Dim c As Long, f As Long, sName As String<BR>    Dim vec As CVector, process As CProcess<BR>    Set vec = New CVector<BR><BR>    If MUtility.IsNT = False Then<BR>        ' Windows 95 uses ToolHelp32 functions<BR>        Dim hSnap As Long, proc As PROCESSENTRY32<BR>        ' Take a picture of current process list<BR>        hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)<BR>        If hSnap = hNull Then Exit Function<BR>        proc.dwSize = Len(proc)<BR>        ' Iterate through the processes<BR>        f = Process32First(hSnap, proc)<BR>        Do While f<BR>            ' Put this process in vector and count it<BR>            sName = MUtility.StrZToStr(proc.szExeFile)<BR>            Set process = New CProcess<BR>            process.Create proc.th32ProcessID, MUtility.GetFileBaseExt(sName)<BR>            c = c + 1<BR>            Set vec(c) = process<BR>            f = Process32Next(hSnap, proc)<BR>        Loop</code></pre>
<BR>
The big difference from the old 16-bit versions is that in 32-bit mode you have to take a snapshot of the system. Because Windows is a multitasking system, a process can disappear at any moment—including the moment you try to examine it. The CreateToolhelp32Snapshot function stores a copy of the system as it exists at the moment. After that, the Process32First and Process32Next can be used to iterate through the stored process list. These functions are equivalent to the TaskFirst and TaskNext functions of the 16-bit TOOLHELP.DLL. The CProcess class simply holds all the process data common to both Windows 95 and Windows NT—not much. The Create method initializes its properties.</p>
<BR>
This code illustrates an iteration pattern that will soon become familiar:
<ol>
<li>
Initialize the loop. In the example above, you create a snapshot and fill in the <i>dwSize</i> field to reassure Windows that you really have the right size structure. Details vary, but there’s usually some initialization required.<BR><BR></li>
<li>
Call Process32First (or Module32First or FindFirstFile or some other First function).<BR><BR></li>
<li>
&#09;Test at the top of the loop to handle the unlikely case of no items in the list.<BR><BR></li>
<li>
Do whatever the loop does. In this case, store the process name in a CVector.<BR><BR></li>
<li>
Call Process32Next (or some other Next function) until no more items are left.</li>
</ol>
<BR>
The Windows NT version gives us an inside view because we’ll have to do by hand what the ToolHelp32 functions do automatically behind the scenes.</p>
</font></BODY>
</HTML>

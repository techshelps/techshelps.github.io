<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Inside CWindow</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="insidecwindow"></a>Inside CWindow</h1>
<BR>
Let’s take an inside look at CWindow. This class is undocumented, but it exists, and Windows explorers have mapped out its contents. In their flat-earth ignorance, these pioneers (of whom Matt Pietrek, author of <i>Windows 95 System Secrets,</i> is captain) believe that Windows was written in C, and so they call this hidden data the WND structure. Our more enlightened view is that this block of data is nothing less than the private variables of Visual Basic’s CWindow class.</p>
<BR>
And now, revealed for the first time, the secret heart of every window:</p>
<pre><code>Private hWndNext As Long          ‘ Next sibling window<BR>Private hWndChild As Long         ‘ First child window<BR>Private hWndParent As Long        ‘ Parent window<BR>Private hWndOwner As Long         ‘ Owning window<BR>Private rectWindow As RECT        ‘ Rectangle of entire window<BR>Private rectClient As RECT        ‘ Rectangle of client area<BR>Private hQueue As Integer         ‘ Application message queue<BR>Private hrgnUpdate As Integer     ‘ Region needing update<BR>Private wndClass As Integer       ‘ Window class<BR>Private hInstance As Integer      ‘ Instance handle<BR>Private lplfnWndProc As Long      ‘ Window procedure<BR>Private afFlags As Long           ‘ Internal flags<BR>Private afStyle As Long           ‘ Style flags<BR>Private afStyleExt As Long        ‘ Extended style flags<BR>Private afMoreFlags As Long       ‘ More internal flags<BR>Private hMenu As Long             ‘ Menu used by window<BR>Private hBuffer As Long           ‘ Buffer for title<BR>Private scrollBar As Integer      ‘ Scroll bar word<BR>Private hProperties As Integer    ‘ First window property<BR>Private hWnd16 As Integer         ‘ The 16-bit window handle<BR>Private pWndLastActive As Long    ‘ Last active popup window<BR>Private hMenuSystem As Long       ‘ System menu <BR>Private atomClass As Integer      ‘ Class name <BR>Private pidAlternate As Long      ‘ Process ID <BR>Private tidAlternate As Long      ‘ Thread ID </code></pre>
<BR>
This is the Microsoft Windows 95 version; Microsoft Windows NT might vary slightly. What can you do with this information? As a practical matter, absolutely nothing. The only way you can change these private variables is through properties and methods of the public interface. In a more abstract sense, however, knowing what’s inside helps you understand what the public methods and properties must work with and, thus, what they can and cannot do.</p>
<BR>
Although Windows is object-oriented in the philosophical sense of hiding data, inheriting attributes, and allowing polymorphic access to objects, its public interface is completely functional. Thus, instead of providing window objects with properties and methods, Windows provides functions that take a window handle argument.</p>
<BR>
You might like to do things the object-oriented way:</p>
<pre><code>wndMy.Enabled = True<BR>f = wndMy.Enabled<BR>wndMy.Flash True</code></pre>
<BR>
But in fact you have to call functions:</p>
<pre><code>fOld = EnableWindow(hWnd, True)<BR>f = IsWindowEnabled(hWnd)<BR>FlashWindow hWnd, True</code></pre>
<BR>
Of course, if you’re dealing with Visual Basic windows, the Enable functions don’t matter because the form or control representing the window has an Enabled property. If you want to flash the window, however, you’ll have to do it the Windows Way because flashing a window is an obscure feature not deemed worthy of inclusion in Visual Basic. No problem. All you need is a declaration for FlashWindow so that you can call it like this:</p>
<pre><code>FlashWindow Me.hWnd, True</code></pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GUIDs are unique</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="guidsareunique"></a>GUIDs are unique</h1>
<p>
A properly generated GUID distinguishes your class from all other COM classes that ever have been or will be created. I admit I was a little skeptical about this claim the first time I heard it. True, 128 is a whole lot of bits, but forever is a long, long time. Fortunately, these aren’t just any 128 bits.</p>
<p>
GUIDs should be generated with the CoCreateGuid API function, which uses a complex algorithm to calculate a new number that is based partly on the instant when the function was called and partly on the unique network number of your machine (or on other unique characteristics of your machine if you aren’t networked). Since no else can have your machine at the exact instant you generate the GUID, it can’t be duplicated. Or at least not without cheating.</p>
<p>
Visual Basic calls CoCreateGuid when it creates a class, an interface, or a type library. You can also create GUIDs manually using GUIDGEN (a GUI program that puts GUIDs on the clipboard) or UUIDGEN (a command line program that writes GUIDs to standard output). If worst comes to worst, you can call CoCreate&shy;Guid yourself from code. Normally, you don’t have to worry about GUIDs (in fact you don’t get to) because Visual Basic generates them for you. Which brings us to the second principle of GUIDs.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Prime Number Server</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="theprimenumberserver"></a>The Prime Number Server</h1>
<p>
If you skipped Chapter 3 in order to go directly to the COM chapter, do not pass Go, do not collect $200. Under Visual Basic, components must be object-<BR>oriented. You can’t implement them without implementing classes. You can look at this as a hoop to jump through and simply turn your functions into methods of a global class (as described in Chapter 5). Or you can take it as an opportunity to rethink your application. As a sample, let’s implement the sieve of Eratosthenes ActiveX component.</p>
<p>
The sieve of Eratosthenes algorithm has traditionally been used as a benchmark for measuring the performance of different machines, operating systems, programming languages, and compilers and interpreters. Here I’ll expand it to measure the difference between different kinds of ActiveX components. In the process, I’ll examine servers and clients in “slow motion.” You don’t really need to know every detail in order to create or use components, but since you’re hardcore, you might as well know the inside story.</p>
<p>
I’ll show you both client and server written in Visual Basic because COM communication is easier to understand if you control both parts. But keep in mind that COM doesn’t know or care what language is used. Often, when you purchase a component, you won’t know what language it was written in. Similarly, if you create a component in Visual Basic, your clients need not know what language you used.</p>
<p>
In real life, you’ll always need to create a test client to make sure that your component works. Visual Basic is the ideal language in which to write your test client, even if you choose to write the component in C++ or some other language. In fact, Visual Basic is an informal standard of what component containers should do. If your component behaves badly in Visual Basic, it will probably behave badly in other containers that emulate Visual Basic. On the other hand, if you do write your component in <BR>Visual Basic, that doesn’t give you an excuse to assume your <BR>clients will do the same. Curses on all those arrogant developers who write public components specifically for their favorite language. The market will punish you.</p>
</font></BODY>
</HTML>

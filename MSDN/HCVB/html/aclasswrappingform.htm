<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Class Wrapping a Form</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="aclasswrappingform"></a>A Class Wrapping a Form</h1>
<BR>
The class wrapper for a form doesn’t do much of anything. It creates a form object and passes through a few properties. But its most important job is to shield the user from all the form’s unnecessary methods, properties, and events. Here are the properties the form passes through:</p>
<pre><code>' Private form variable<BR>Private about As New FAbout<BR><BR>' Could be App object, or anything with the same version properties<BR>Public Client As Object<BR>' Normally the icon of the client application<BR>Public Icon As Picture<BR>' Miscellaneous properties<BR>Public InfoProg As String<BR>Public Copyright As String<BR>Public Comments As String<BR>Public SecretButton As Integer<BR>Public SecretKey As Integer<BR>Public SecretShift As Integer<BR>Public Animator As IAnimation</code></pre>
<BR>
None of these properties needs validation, so they can be public variables. The UserInfo property works the same, but requires Get and Let procedures (not shown) because it’s an array. Technically, I could just implement all these properties with Let procedures so that I could have the first class in history with write-only properties exclusively.</p>
<BR>
The Load method passes the properties on to exact duplicate properties on the form variable. The form is a private form in the VisualCore component. Outside applications have no way to get to it except by setting CAbout properties and calling the Load method:</p>
<pre><code>Sub Load()<BR>With about<BR>    ' We need version properties to display on About form<BR>    If Client Is Nothing Then ErrRaise eeAppNotInit<BR>    ' Pass other optional properties through to form<BR>    Set .Client = Client<BR>    Set .ClientIcon = Icon<BR>    .InfoProg = InfoProg<BR>    .Copyright = Copyright<BR>    .Comments = Comments<BR>    .SecretButton = SecretButton<BR>    .SecretKey = SecretKey<BR>    .SecretShift = SecretShift<BR>    .UserInfo(1) = UserInfo(1)<BR>    .UserInfo(2) = UserInfo(2)<BR>    .UserInfo(3) = UserInfo(3)<BR>    ' Show the form<BR>    .Show vbModal<BR>End With<BR>End Sub</code></pre>
<BR>
The most interesting feature is the required Client property. From Visual Basic, you’ll usually set this to the App object of your program, but note that it is declared with Object type, not with App type. The App type is private to the Visual Basic library. Technically, Visual Basic ought to display an error if you try to pass the private App object, but it doesn’t. Nevertheless, it’s not a good idea for two reasons. First, the documentation forbids it and says that bad things might happen if you modify and return private objects. That’s not a problem in this case because the Client property will be read but not modified. The &shy;second reason is that ActiveX is supposed to be a language-independent standard, and it wouldn’t be very polite to require a C++ client to pass a Visual Basic App object. Therefore, CAbout doesn’t require an App object. It does require that any late-bound object have some of the same properties as the App object—specifically those containing version information. It would be easy for a C++, Delphi, or Java client to create and pass such an object if they knew exactly which properties the About form uses. I’m planning to put the full requirements in the CAbout help file “real soon now” for the benefit of all those thousands of C++ clients who desperately want to use the VBCore component.</p>
</font></BODY>
</HTML>

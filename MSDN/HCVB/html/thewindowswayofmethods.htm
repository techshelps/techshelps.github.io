<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Windows Way of methods</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="thewindowswayofmethods"></a>The Windows Way of methods</h1>
<p>
If you can think of something to do to a window, there’s probably an API function to do it. Visual Basic provides corresponding methods for many of these operations. In some cases, properties perform operations rather than simply providing access to attributes. Table 6-2 compares the Windows Way and the Basic Way of getting things done.</p>
<table>
<tr valign=top>
<td>
<b>Attribute</b></td>
<td>
<b>Windows Way</b></td>
<td>
<b>Basic Way</b></td>
</tr>
<tr valign=top>
<td>
Active window</td>
<td>
GetActiveWindow, possibly combined with GetParent</td>
<td>
ActiveForm and Active-Control properties</td>
</tr>
<tr valign=top>
<td>
Style bits</td>
<td>
GetWindowLong with GWL_STYLE or GWL_EXSTYLE</td>
<td>
BorderStyle, Enabled, Visible, WindowState, ControlBox, MaxButton,and MinButton properties</td>
</tr>
<tr valign=top>
<td>
Window title</td>
<td>
GetWindowText and SetWindowText</td>
<td>
Caption property</td>
</tr>
<tr valign=top>
<td>
Enabled, visible</td>
<td>
WS_VISIBLE, WS_DISABLED style bits; IsWindowEnabled, IsWindowVisible, Enable Window, and ShowWindow</td>
<td>
Enabled and Visible properties</td>
</tr>
<tr valign=top>
<td>
Tab position</td>
<td>
WS_TABSTOP style bit; GetNextDlgTabItem</td>
<td>
TabStop and TabIndex properties</td>
</tr>
<tr valign=top>
<td>
Window dimensions</td>
<td>
GetWindowRect and SetWindowPos</td>
<td>
Left, Top, Width, and Height properties; indirectly, Align-ment and AutoSize properties</td>
</tr>
<tr valign=top>
<td>
Client dimensions</td>
<td>
GetClientRect</td>
<td>
ScaleLeft, ScaleTop, ScaleWidth and ScaleHeight properties</td>
</tr>
<tr valign=top>
<td>
Property list</td>
<td>
GetProp, SetProp, and RemoveProp</td>
<td>
Tag property (a minimal version)</td>
</tr>
<tr valign=top>
<td>
Device context</td>
<td>
GetDC and ReleaseDC</td>
<td>
hDC property</td>
</tr>
<tr valign=top>
<td>
Relative windows</td>
<td>
GetWindow with GW_ constants, GetNextWindow, and GetParent</td>
<td>
Parent property for controls but otherwise no way</td>
</tr>
<tr valign=top>
<td>
Instance handle</td>
<td>
GetWindowLong with GWL_HINSTANCE</td>
<td>
App.hInstance property</td>
</tr>
<tr valign=top>
<td>
Process ID and handle </td>
<td>
GetWindowThreadProcessId and OpenProcess</td>
<td>
No way</td>
</tr>
<tr valign=top>
<td>
Class name</td>
<td>
GetClassName</td>
<td>
No way</td>
</tr>
</table><br>
<p>
<i>Table 6-1.</i><b>&nbsp;Window properties.</b></p>
<p>
As Tables 6-1 and 6-2 (on the following page) show, it’s a mixed-up world. You won’t always find an obvious comparison between the Basic Way and the Windows Way. But if you are like most hardcore programmers, your eye keeps wandering to those items that show up in the Windows Way column but not in the Basic Way column. That’s the challenge the rest of this chapter attempts to meet.</p>
<table>
<tr valign=top>
<td>
<b>Operation</b></td>
<td>
<b>Windows Way</b></td>
<td>
<b>Basic Way</b></td>
</tr>
<tr valign=top>
<td>
Show in different states</td>
<td>
ShowWindow, OpenIcon, CloseWindow, IsIconic, and IsZoomed</td>
<td>
Show and Hide methods; WindowState property</td>
</tr>
<tr valign=top>
<td>
Change position, size, or z-order</td>
<td>
SetWindowPos, DeferWindow-</td>
<td>
Move and ZOrder methods; </td>
</tr>
<tr valign=top>
<td>
</td>
<td>
Pos, BeginDeferWindowPos, </td>
<td>
Left, Top, Width, and Height </td>
</tr>
<tr valign=top>
<td>
</td>
<td>
EndDeferWindowPos, </td>
<td>
properties</td>
</tr>
<tr valign=top>
<td>
</td>
<td>
BringWindowToTop, and </td>
<td>
</td>
</tr>
<tr valign=top>
<td>
</td>
<td>
MoveWindow</td>
<td>
</td>
</tr>
<tr valign=top>
<td>
Set active window</td>
<td>
SetForegroundWindow, Set-ActiveWindow, and SetFocus</td>
<td>
SetFocus method; AppActivate statement</td>
</tr>
<tr valign=top>
<td>
Create</td>
<td>
CreateWindow, RegisterClass, and so on</td>
<td>
Mostly automatic, but Load statement starts the process</td>
</tr>
<tr valign=top>
<td>
Change window placement </td>
<td>
GetWindowPlacement and SetWindowPlacement</td>
<td>
Left, Top, Width, and Height properties</td>
</tr>
<tr valign=top>
<td>
Capture mouse</td>
<td>
SetCapture, GetCapture, and ReleaseCapture</td>
<td>
No way</td>
</tr>
<tr valign=top>
<td>
Destroy</td>
<td>
DestroyWindow</td>
<td>
Unload statement</td>
</tr>
<tr valign=top>
<td>
Update window</td>
<td>
UpdateWindow, Invalidate-Rect, BeginPaint, and a slew of others</td>
<td>
Don’t worry about it (or turn off AutoRedraw property and handle in Paint event)</td>
</tr>
<tr valign=top>
<td>
Iterate through window hierarchy</td>
<td>
EnumChildWindows, Enum-Windows, and GetWindow</td>
<td>
No way</td>
</tr>
<tr valign=top>
<td>
Find window</td>
<td>
FindWindow, GetActiveWindow, and WindowFromPoint</td>
<td>
No way</td>
</tr>
<tr valign=top>
<td>
Text output</td>
<td>
TextOut, ExtTextOut, GrayString, and others</td>
<td>
Print method</td>
</tr>
<tr valign=top>
<td>
Text sizing</td>
<td>
GetTextExtentPoint32</td>
<td>
TextWidth and TextHeight methods </td>
</tr>
<tr valign=top>
<td>
Text alignment</td>
<td>
SetTextAlign, SetText-Justification, and SetTextCharacterExtra functions</td>
<td>
No direct comparison</td>
</tr>
</table><br>
<p>
<b>Table 6-2.&nbsp;Window methods.</b></p>
</font></BODY>
</HTML>

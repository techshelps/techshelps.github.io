<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Overlay method</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="theoverlaymethod"></a>The Overlay method</h1>
<BR>
You can use the Overlay method to combine any two ListImage objects in an ImageList. This works fine on a solid background, but, as Figure 11-13 illustrates, icons don’t come out right. The top image is placed transparently on the bottom image, but the bottom image is placed opaquely on the background. In other words, the Overlay method converts an icon to a bitmap. You can get around this bug (still not fixed from version 4) by inserting the overlaid image back into the ImageList and then using ExtractIcon to remove it as an icon. Here’s the code to use Overlay normally and the code to fix the problem:</p>
<pre><code>With imlstIcons<BR>    If chkOverlay.Value &lt;&gt; vbChecked Then<BR>        ' Overlay without bug fix<BR>        imgIconOverlay.Picture = .Overlay(iIconsLast, iIcons)<BR>    Else<BR>        ' Save old background and mask color<BR>        Dim clrBack As Long, clrMask As Long<BR>        clrBack = .BackColor: clrMask = .MaskColor<BR>        ' Set color that does not occur in image<BR>        .BackColor = vbMagenta: .MaskColor = vbMagenta<BR>        ' Insert overlay, extract as icon, remove, and restore color<BR>        .ListImages.Add 1, , .Overlay(iIconsLast, iIcons)<BR>        imgIconOverlay.Picture = .ListImages(1).ExtractIcon<BR>        .ListImages.Remove 1<BR>        .BackColor = clrBack: .MaskColor = clrMask<BR>    End If<BR>End With</code></pre>
<BR>
This technique works in the sample because I found a temporary background and mask color, <i>vbMagenta</i>, that didn’t occur in any of the sample icons. But what if you were loading the icons at run time? I suppose you could check every pixel in the icon with the Point method, but it’s easier to simply draw the &shy;images on top of each other using the techniques shown in the next section.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The XDropStack Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="thexdropstackcontrol"></a>The XDropStack Control</h1>
<p>
The primary purpose of the XEditor control is to expand the RichTextBox control. The primary purpose of the XDropStack control is to limit the ComboBox control. It’s a different emphasis, but there are similarities. In fact, almost any control that delegates to a constituent control will do some extending and some limiting.</p>
<p>
XDropStack extends ComboBox by keeping items in a specific order just as XEditor extends RichTextBox by adding lots of new editing features. XDropStack limits ComboBox by setting properties such as Style, Locked, and IntegralHeight to desired settings and disabling them in the control interface. XEditor does the same thing with the MultiLine and MaxLength properties of RichTextBox. The controls supplied with Visual Basic are general purpose controls. One of the main reasons to delegate to them in your own controls is to focus on and simplify one specific use of the general control.</p>
<p>
The XDropStack control focuses on a feature that you’ve probably seen in other applications. Microsoft Internet Explorer, for example, has a drop-down list of the most recently requested URLs. Visual Basic’s Find dialog box has a drop-down list of the most recently used search strings. That’s the functionality we’ll be duplicating in the FSearch form and in Edwina’s toolbar.</p>
<p>
An XDropStack has these features:
<ul>
<li>
The combo box contains a stack of all the search strings in the order they were added. You can specify a maximum number with the MaxItem property so that the oldest strings will be aged off the list. The default value of 0 means no limit.<br><br></li>
<li>
If the user types in a string in the text input field of the combo box, the resulting string will be added to the top of the list. If the string <BR>already exists later in the list, the second instance will be deleted. There are never duplicate entries in a drop stack.<br><br></li>
<li>
If the user clicks an entry in the drop-down list, it moves to the top of the stack.<br><br></li>
<li>
The client can enter a string at the top of the stack programmatically by assigning a string to the Text property. There’s no way to add items to the middle of the stack.</li>
</ul>
<p>
Any combo box features that don’t match this specification are eliminated. If <BR>you think about how these features compare to a stack as a data structure, you can see that the name drop stack, while evocative, isn’t quite accurate. Adding a new item is like pushing a string on a stack, but there’s no comparable pop operation. The way items age off the bottom is more like a queue. And the operation of moving a clicked item to the top isn’t like a stack or a queue. If you have a better name for this control, let me know.</p>
</font></BODY>
</HTML>

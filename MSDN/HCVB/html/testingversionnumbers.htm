<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Testing version numbers</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="testingversionnumbers"></a>Testing version numbers</h1>
<BR>
You can use the Windows API version functions to display version information of EXEs (as WinWatch and All About do), but more likely you’ll want to read the version numbers of DLLs (or controls) used by your program. Then, if the DLL version is incompatible with your program, you can terminate with a polite request to update the DLL rather than with a rude command to boot the system.</p>
<BR>
For example, imagine you had a DLL written in C++ named VBUTIL32.DLL (similar to the one provided with the first edition of this book). Let’s say you wanted to make sure you hadn’t accidentally overwritten the Visual Basic Utilities DLL with the Vermont Business University Tools for Industrial Liquidity DLL:</p>
<pre><code>Sub ValidateVBUtil()<BR>    Dim verUtil As New CVersion, f As Boolean<BR>    Const sUtil = “C Utility Functions for Visual Basic”<BR>    verUtil = “VBUTIL32.DLL”<BR>    If verUtil.FileVersionString &lt;&gt; “1.00” Or _<BR>       verUtil.Company &lt;&gt; “MS-PRESS” Or _<BR>       verUtil.Description &lt;&gt; sUtil Then<BR>        MsgBox “Invalid DLL”<BR>        End<BR>    End If<BR>End Sub</code></pre>
<BR>
Why not use this technique on VBCore? Because VBCore is a COM component, and components have a more sophisticated and flexible version system. Normally, you use version validation only on DLLs that aren’t COM components.</p>
<BR>
<b>What’s in a Name?</b></p>
<BR>
How do you name a program? Let me count the ways:
<ul>
<li>
You can assign a name as the caption of your main form. The main form name in WinWatch is WinWatch, and you can see from its display that its class name is ThunderForm. You can expand it to see <BR>all the separate windows for its controls. Its owner is the window <BR>described in the next item.<BR><BR></li>
<li>
You can assign a name to the Title property of the App object by assigning a string to the property at run time. You can assign App.Title at design time by filling in the Title field of the Make tab of the Project Properties dialog box. In WinWatch, the title is Windows Watcher. The WinWatch display shows this as a separate window with class ThunderMain. You can’t see this window on the screen. Perhaps it’s hiding behind the main form. The App.Title name, not the caption of the main form, appears in the Top Windows list box (and in the Windows task list).<BR><BR></li>
<li>
You can enter a Product Name value in the Type field of the Project Properties dialog box. In WinWatch, this name is WindowsWatcher (no space in order to distinguish it from the Title). This name is embedded in the EXE file as a version resource. You can see it when you view VERSION resources for WINWATCH.EXE. This name is also the App.ProductName property.<BR><BR></li>
<li>
You can enter a name in the Project Name field on the General tab of the Project Properties dialog box. For WinWatch, this name is the last unique name I could think of: WinWatcher. The Project Name is used in the Visual Basic title bar and in the Object Browser. It will be used as the OLE server name if you make your project a server.<BR><BR></li>
<li>
And, of course, you have the project filename (WINWATCH.VBP) and the program filename (WINWATCH.EXE).</li>
</ul>
</font></BODY>
</HTML>

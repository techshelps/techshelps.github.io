<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Your Own Resources</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="creatingyourownresources"></a>Creating Your Own Resources</h1>
<BR>
It should be obvious from the way sounds are handled that you can put any kind of data into resources. In concept, the steps for creating your own resource types are simple. Let’s go through them with the new, previously undocumented TimeTravel resource type, which enables users with appropriate TimeTravel expansion cards and device drivers to experience anything, anyplace, anytime.
<ol>
<li>
Define a binary format for your resource. You’ll probably want to create an editor that translates user-friendly commands into a tightly compressed binary format. The TimeTravel Editor allows you to select the time, place, and conditions of your appearance in easy-to-use dialog boxes. It then compiles these into a TTV file.<BR><BR></li>
<li>
Put the data into a resource file. The TimeTravel Editor can automatically insert TTV files in an RC file. The line might look like this:<BR><BR></li>
<li>
1492      TimeTravel    “c:\\ttv\\columbus.ttv”<BR><BR></li>
<li>
Compile the resource script into a RES file, and add the RES file to your Visual Basic project.<BR><BR></li>
<li>
Write procedures that will process the data. You can write them in <BR>Visual Basic provided the data is simple enough. Because LoadResData returns an array of bytes, you just need to write code that processes the bytes, converting them to a UDT or another data type if necessary. The Time&shy;Travel resource, however, requires some low-level, high-speed communication between software and device driver. Therefore, the Time&shy;&shy;&shy;Travel Development Kit (TDK) comes with an OLE server (TTAPI&shy;.DLL). Simply register the type library (TTAPI.TLB) in the References dialog box, and you’re ready to load the Destination property and call the TravelThruTime method. Here’s an example:</li>
</ol>
<pre><code>Dim someday As New CWhenever<BR>someday.Destination = LoadResData(1492, “TimeTravel”)<BR>someday.TravelThruTime</code></pre>
<BR>
While it’s easy to use TimeTravel resources once you get your hands on them, I didn’t have room to put the software on the companion CD. Furthermore, the hardware required to use time travel data is difficult to find and prohibitively expensive on this planet. For now, you’ll have to play with wave and metafile resources.</p>
</font></BODY>
</HTML>

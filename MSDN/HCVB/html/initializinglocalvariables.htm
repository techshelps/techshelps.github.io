<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing Local Variables</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="initializinglocalvariables"></a>Initializing Local Variables</h1>
<BR>
Although Visual Basic gives you no direct help, it does give you two roundabout ways to initialize variables. The first technique takes advantage of the default initialization to 0, Empty, or Nothing.</p>
<BR>
If you can rule out the empty string as a valid value for a particular string variable, you can assume that the variable is uninitialized when it has this value. The same goes for 0 and numeric variables. For example:</p>
<pre><code>Sub InitializeMe()<BR>    Static sNeverEmpty As String, iNeverZero As Integer<BR>    If sNeverEmpty = sEmpty Then sNeverEmpty = “Default”<BR>    If iNeverZero = 0 Then iNeverZero = -1<BR>    §<BR>End Sub</code></pre>
<BR>
Of course, if <i>sNeverEmpty </i>can be changed by some other code, and if <i>sEmpty </i>is a valid value, this code won’t work because <i>sNeverEmpty </i>will be randomly changed to “Default” under certain circumstances. It’s easy to imagine lots of string variables that should never be empty, but it’s harder to think of integer variables that should never be 0.</p>
<BR>
Notice that the variables in question are static so that they retain the initialized value across calls. You don’t need any special initialization code if the variable is reinitialized every time you enter the procedure:</p>
<pre><code>Sub InitializeMe()<BR>    Dim sNeverEmpty As String, iNeverZero As Integer<BR>    sNeverEmpty = “Default”: iNeverZero = -1</code></pre>
<BR>
If 0 is valid for your numeric values or <i>sEmpty</i> is valid for your strings, you must create a variable specifically for testing:</p>
<pre><code>Sub InitializeMe()<BR>    Static fNotFirstTime As Boolean<BR>    Static sAnyValue As String, iAnyValue As Integer<BR>    If Not fNotFirstTime Then <BR>        fNotFirstTime = True<BR>        sAnyValue = “First time”: iAnyValue = 1<BR>    End If<BR>    §</code></pre>
<BR>
The double negative makes the code look more complex than it is. Things would be so much clearer if you could initialize the test variable to True:</p>
<pre><code>Sub InitializeMe()<BR>    Static fFirstTime As Boolean = True<BR>    Static sAnyValue As String, iAnyValue As Integer<BR>    If fFirstTime Then <BR>        fFirstTime = False<BR>        sAnyValue = “First time”: iAnyValue = 1<BR>    End If<BR>    §</code></pre>
<BR>
But if you could initialize <i>fFirstTime </i>to True, you wouldn’t need it because you could initialize <i>sAnyValue </i>and <i>iAnyValue </i>the same way.</p>
<BR>
You can use the same principle on global and module-level variables. The IsMissing function works with optional parameters in the same way. I’ll show you some related tricks later.</p>
</font></BODY>
</HTML>

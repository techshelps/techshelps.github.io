<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Interfaces Everywhere</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="interfaceseverywhere"></a>Interfaces Everywhere</h1>
<p>
Interfaces are the latest fad in operating system design. You access system features (or let the system access your features) through interfaces rather than through API functions. Since interfaces are what make Visual Basic classes tick, you’d think that system interfaces and Visual Basic would be a good match.</p>
<p>
Unfortunately, most system interface designers seem to work in C or C++ and assume that everyone else does the same. Of course, designers of API functions often have the same short-sighted view, but Visual Basic provides the Declare, Type, and Const statements as a means of bridging the API gap. There’s no such bridge between system interfaces and Visual Basic. The only way to make system interfaces available to Visual Basic programs is through type libraries—and even then you have to lie about the types.</p>
</font></BODY>
</HTML>

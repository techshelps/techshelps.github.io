<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Stacking Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="stackingobjects"></a>Stacking Objects</h1>
<BR>
A stack is a data structure in which you can add items only to the top and remove them only from the top. The technical term is <i>LIFO</i> (last in, first out), but anyone who has ever stacked plates or books knows the concept. You might find it convenient for storing forms, controls, or files. The idea is that you can’t get anything out of a stack in the wrong order because the stack allows only one order. The traditional terminology for stack operations is that you “push” things onto a stack and “pop” them off.</p>
<BR>
There are many different ways to implement a stack. To illustrate this point, I’m going to start with a stack interface rather than a stack class. (See “Polymorphism and Interfaces” in Chapter 3 for an introduction to interfaces.) I’ll implement three different versions of the stack and test them to see which is the fastest. Here’s the IStack interface:</p>
<pre><code>‘ IStack interface class<BR>Public Sub Push(vArg As Variant)<BR>End Sub<BR><BR>Public Function Pop() As Variant<BR>End Function<BR><BR>Property Get Count() As Long<BR>End Property</code></pre>
<BR>
The CStackLst class is based on the linked list technique and the CStackVec class is based on the vector technique described earlier in this chapter. The CStackCol class is based on Visual Basic’s Collection class. Because all three stacks implement the same interface, the client program can use any of them with exactly the same code.</p>
<BR>
As a practical matter, the interface approach doesn’t make much sense. There’s no reason to keep three different implementations of the stack around—you want only the fastest one. So once we figure out which one that is, we’ll use Save As to create the one and only CStack class for the VBCore component.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Turning API Errors into Basic Errors</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="turningapierrorsintobasicerrors"></a>Turning API Errors into Basic Errors</h1>
<BR>
One of the more common tasks for the hardcore API programmer is to turn an error returned from an API function call into a Visual Basic error. For example, here’s how you can call registry API functions (which always return 0 for success or an API error code):</p>
<pre><code>ApiRaiseIf RegCloseKey(hKey)</code></pre>
<BR>
If the return value from RegCloseKey (or any other registry API function) is 0, nothing happens. If it’s an error code, ApiRaiseIf creates a new Visual Basic error containing the official Windows error string for the associated error.</p>
<BR>
Sometimes with Windows functions, the return value indicates whether an error occurred but the code is returned through GetLastError (which Basic sees as Err.LastDllError) rather than through the error code. In that case, you raise the appropriate error with the ApiRaise procedure:</p>
<pre><code>c = GetTempPath(cMaxPath, sRet)<BR>If c = 0 Then ApiRaise Err.LastDllError</code></pre>
<BR>
And if for some reason you just want to display the official error message &shy;without raising an error for it, you can call the ApiError function like this:</p>
<pre><code>Debug.Print ApiError(Err.LastDllError)</code></pre>
<BR>
How does this magic work? Well, Windows maintains all those error messages as resources in KERNEL32.DLL. These messages are localized: Bulgarian Windows has Bulgarian messages. You can get the error messages out of the DLL with the FormatMessage API function, using code like this:</p>
<pre><code>Function ApiError(ByVal e As Long) As String<BR>    Dim s As String, c As Long<BR>    s = String(256, 0)<BR>    c = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM Or _<BR>                      FORMAT_MESSAGE_IGNORE_INSERTS, _<BR>                      pNull, e, 0&amp;, s, Len(s), ByVal pNull)<BR>    If c Then ApiError = Left$(s, c)<BR>End Function</code></pre>
<p>
The FormatMessage function is overloaded to do many tasks. You pass constants in the first parameter to indicate which task you want. When retrieving error messages, most parameters are ignored. FormatMessage is an interesting function, but this is one of the few tasks it performs that makes sense in Visual Basic.</p>
<p>
The Error Message program (ERRMSG.VBP) is the shortest use&shy;-ful utility provided with this book. It puts a simple user interface around the message lookup code from ApiError. Just type in <BR>an error number and it shows you the corresponding message. <BR>I keep a copy of it on my desktop.</p>
<BR>
As you can imagine, the ApiRaise function just calls ApiError:</p>
<pre><code>Sub ApiRaise(ByVal e As Long)<BR>    Err.Raise vbObjectError + 29000 + e, _<BR>              App.ExeName &amp; “.Windows”, ApiError(e)<BR>End Sub</code></pre>
<BR>
Most common API errors fall in the range 1 through 999. I’ve randomly chosen 29000 as the base for API errors. So once again, let me raise a hopeless request that no one use error codes between 29001 and 29999 for anything other than creating fake API errors. I return the source as the project name combined with <i>Windows</i>. I’d prefer to give the specific system DLL that caused the error, but I couldn’t figure out any way to get that information.</p>
<BR>
The ApiRaiseIf procedure just uses the ApiRaise procedure to make the error- raising syntax a little cleaner:</p>
<pre><code>Sub ApiRaiseIf(ByVal e As Long)<BR>    If e Then ApiRaise e<BR>End Sub</code></pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COM From All Angles</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="comfromallangles"></a>COM From All Angles</h1>
<p>
It’s a little-known fact that Visual Basic is the leader of an insidious conspiracy to take over the world for COM. Here are some of the ways Visual Basic preaches and practices the COM doctrine.
<ul>
<li>
<b>Controls.</b>&nbsp;Visual Basic changed the world by popularizing the concept of a visual interface object encapsulated in an independent executable file known as a control. We’ve come a long way since then. Controls came before COM, but now ActiveX controls are a part of COM. Although there are differences under the surface, they’re still <BR>as easy to use and as revolutionary as they were in Visual Basic version 1.0.<br><br></li>
<li>
<b>ActiveX Controls.</b>&nbsp;Now you can write your own ActiveX controls in Visual Basic. This is a dangerous new capability. It’s very easy to write bad controls. It’s moderately difficult to write good ones. But a lot of Visual Basic programmers will meet the challenge. This is going to change the world again.<br><br></li>
<li>
<b>ActiveX DLLs.</b>&nbsp;The Visual Basic run-time library is an ActiveX DLL. My VBCore component is an ActiveX DLL. You can enhance the language by adding your own ActiveX DLLs. They can have global functions and public classes, just like the Visual Basic library.<br><br></li>
<li>
<b>Type Libraries.</b>&nbsp;Visual Basic supports type libraries (which you install with the References dialog box and view in the Object Browser). Most well-behaved COM components, including the Visual Basic libraries and controls and any components you create with Visual Basic, have type libraries. Another kind of type library makes a non-COM DLL (such as the Windows system DLLs) look like a COM object. The Windows API type library supplied with this book is such a library. See Chapter 2 for details about how to load it in the References dialog box and how to use the functions in it. &#09;<br><br></li>
<li>
<b>Interfaces.</b>&nbsp;You create them and use them behind the scenes all the time. Now you can write your own and implement them. You can also implement standard interfaces supplied by COM or Windows, although this isn’t as easy as it ought to be. Nevertheless, you’ll do it in this chapter.<br><br></li>
<li>
<b>Object Linking and Embedding (OLE).</b>&nbsp;OLE is now a tiny subset of COM. If you took seriously the title of this chapter in the first edition (“The OLE Gospel”), repeat with me: “Won’t get fooled again.” Anyway, Visual Basic supports linking and embedding through the OLE control. Using this control is too easy for a hardcore book, so this is the last time you’ll see the insignificant term OLE.<br><br></li>
<li>
<b>COM Automation.</b>&nbsp;Visual Basic allows you to program applications that expose themselves through COM Automation. I see a lot of requests for assistance with this, but most are concerned with the application side of the problem. I’m not going to talk about programming the object models of applications such as Microsoft Word for Windows, Microsoft Excel, and Visio because I don’t know which ones you have. Besides, other books cover this topic. Microsoft Press publishes two good ones: <i>Developing Applications with Microsoft Office <BR>for Windows 95,</i> by Christine Solomon (1996); and <i>Microsoft Guide to Object Programming with Visual Basic 4 and Microsoft Office for Windows 95,</i> by Joel P. Dehlin and Matthew J. Curland (1996).<br><br></li>
<li>
<b>Add-Ins.</b>&nbsp;The Visual Basic environment is itself a COM Automation server. You can customize it by creating your own components in <BR>a specific format known as an <i>add-in</i>. Add-ins must program the en&shy;viron&shy;ment’s VBIDE object and must provide objects that the VBIDE <BR>object knows how to talk to. I described and enhanced the add-in model in the first edition of this book, but the whole thing changed for Visual Basic version 5. The version 4 model was notoriously wimpy, <BR>so the new model has to be better. But I didn’t have time to figure out how much better. Add-ins aren’t covered in this edition.<br><br></li>
<li>
<b>ActiveX Documents?</b>&nbsp;Yes, but not in this book.</li>
</ul>
</font></BODY>
</HTML>

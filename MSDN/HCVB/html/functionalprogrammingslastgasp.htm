<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 5: Functional Programming’s Last Gasp</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2">
<h4>Chapter 5</h4>
<h1><a name="functionalprogrammingslastgasp"></a>Functional Programming’s Last Gasp</h1>
<BR>
One of the first readers of the first edition of <i>Hardcore Visual Basic</i> sent me a program he was working on. When I opened the project, something very strange jumped out at me. No standard modules. Just forms and classes.</p>
<BR>
Wait a minute! You can’t do that with Visual Basic. But hardcore programmer Peter Wheat did, and the program worked just fine.</p>
<BR>
The object-oriented only approach is a lot easier with version 5. Many of the object-oriented holes in Visual Basic have been plugged.</p>
<BR>
Still, we’re not quite ready to give up on functional programming. Visual Basic doesn’t. Imagine if it did. You’d have methods and properties on the String type:</p>
<pre><code>Dim s As String, c As Long, i As Long<BR>s.Text = “Stuff”            ‘ Or use Text default: s = “Stuff” <BR>c = s.Len                   ‘ Not c = Len(s)<BR>i = s.In(“f”)               ‘ Not i = InStr(s, “f”)<BR>Print s.Mid(2, 4)           ‘ Not Print Mid$(s, 2, 4)</code></pre>
<BR>
Why not? That’s how most object-oriented languages handle strings. Theoretically, you shouldn’t have anything left in the globals section of the VBA library. But how far are you willing to go? Take a look at the following examples before you decide:</p>
<pre><code>Dim r As Double, i As Long<BR>r.Value = 5.2               ‘ Or use Value default: r = 5.2<BR>r.Plus(1)                   ‘ Not r = r + 1<BR>i = r.CInt                  ‘ Not i = CInt(r)<BR>Me.Print r.Cos              ‘ Not Print Cos(r)</code></pre>
<BR>
Some of these examples might be getting a little marginal. Even completely object-oriented languages support operators and passing objects as parameters. I think there’s still a place for a tight library of procedures that aren’t methods of anything.</p>
<BR>
This chapter will explain an efficient way to create such a library. Then it will discuss some of the general purpose tools you might still want to put in such a library. Even though the focus of this chapter is functional, we won’t escape ob&shy;jects. COM depends on object-oriented programming, and Visual Basic depends on COM, and we depend on Visual Basic, so objects will keep popping up.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Basic Hungarian</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="basichungarian"></a>Basic Hungarian</h1>
<p>
Hungarian works for me. No doubt you’ve seen this convention used sometimes, sort of, in some code contained in Visual Basic samples and documentation. I don’t claim that this convention is better than other naming conventions or that it doesn’t have problems. But I’ve used Hungarian in various languages (including, believe it or not, FORTRAN), and it applies well to Visual Basic.</p>
<p>
I’m not trying to evangelize Hungarian. Everyone I know who uses it (including me) hated it at first. It just grows on you. Maybe it will grow on you enough to make you a convert during the course of this book—or maybe it won’t. In any case, being able to read Hungarian is a skill you won’t regret acquiring. If you haven’t really understood the point of the snippets of Hungarian code you have seen in various Microsoft manuals, here’s a brief introduction that will make reading the sample code easier.</p>
<p>
Long-time Microsoft developer Charles Simonyi, who happens to be Hungarian by birth, developed the convention. That—along with the fact that C code written in this style looks like foreign gibberish to the uninitiated—prompted the name. The idea (simplified to a point that would probably horrify Simonyi) is that variables should consist of two parts: a lowercase base type indicating the kind of variable and an initial-cap qualifier that distinguishes this variable from others of the same kind.</p>
<p>
For example, an integer that keeps track of the file position would have the base type <i>i</i> for index and the qualifier <i>Pos</i> to form the variable <i>iPos</i>. If you must keep track of both a file position and a line position in the same context, you need to qualify further: <i>iFilePos</i> and <i>iLinePos</i>. If you were creating a Project Save As dialog box, you might call it FProjectSaveAs and fill it with controls such as cboFiles, cboDirs, lstFileTypes, lstDrives, cmdOk, cmdCancel, and cmdNetwork. If you had an array of buttons to activate different windows, the base type <i>cmd</i> wouldn’t be enough, so you could modify it with the array prefix <i>a</i>, as in <i>acmd&shy;Window</i>. To access this array, you might need a count variable showing the number of windows, <i>cWindow</i>, and an index to the current window, <i>iWindow&shy;Cur</i>. In a small function using only one local index variable, you don’t need a qualifier—just call it <i>i</i>.</p>
<p>
This doesn’t begin to touch on the complexity of the original Hungarian convention. In addition, the whole idea has been bastardized. At least three incompatible official dialects of Hungarian are used by C programmers at Microsoft, and now the Visual Basic documentation group has introduced their own variation of Hungarian. Unfortunately, the crudest of these variations is the one used in the Windows Software Development Kit (SDK), and it is now spreading confusion to the world. In a few short years, the Hungarian coding convention has evolved as much as natural languages evolve in a thousand years.</p>
<p>
Compare, for example, the naming convention in the Windows SDK Help file with the one in the Visual Basic API Help file shipped with Visual Basic version 3. (If you don’t remember version 3, never mind.) Both files are aimed at C programmers—the first at those writing Windows-based programs in C, and the second at those writing VBX controls in C. You’d expect both files to use the same convention, but the names for similar variables are in fact very different, although both systems are vaguely recognizable as Hungarian.</p>
<p>
In the SDK, for example, a Boolean variable has the prefix <i>b</i> for Boolean. In the Visual Basic API, a Boolean variable has the prefix <i>f</i> for flag. In the SDK, a variable used as a bit flag has the prefix <i>w</i> or <i>dw</i> for Word or DWord, indica&shy;ting its type—or at least the Windows include file version of its type. In the Visual Basic API, a similar variable has the prefix <i>fs</i> or <i>fl</i> for flag of short or flag of long, respectively, indicating both its use and its type. This goes on. Windows SDK names sometimes indicate the use of the variable, but more often they simply indicate the data type, and even then in an artificial form that has no relation to Basic (or to C, for that matter).</p>
<p>
Alas, the version of Hungarian used in the Visual Basic documentation is a cousin of the Windows version. It uses prefixes based on the types (<i>lng</i> for Long, <i>str</i> for String, <i>sng</i> for Single, and so on). Worse, it uses generic prefixes for different kinds of multimember types rather than specific prefixes for each type. For example, you’ll see <i>frm</i> for all forms, <i>cls</i> for all classes, and <i>udt</i> for all user-defined types. I invented my version of Hungarian before all the others, so don’t ask me to copy them.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Animating Card Backs</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="animatingcardbacks"></a>Animating Card Backs</h1>
<BR>
In the Fun ’n Games program, clicking the Card Backs button draws 13 card backs plus the X and O cards. The program then turns on the timer and animates cards in the background. Try to find the animated card in Figure 7-12.</p>
<BR><img src="f07te12.gif"></p><BR>
<b>Figure 7-12. Fun with cards.</b></p>
<BR>
Only 4 of the 13 card backs in CARDS32.DLL are animated, and another changes color. To keep this animation working smoothly, you must manage variables for the <i>x</i> position, the <i>y</i> position, the card back, and the animation state. It’s not a simple loop.</p>
<BR>
Let’s look at the normal loop that draws the cards initially:</p>
<pre><code>Private Sub cmdBack_Click()<BR>    Dim ordScale As Integer<BR>    ordScale = ScaleMode: ScaleMode = vbPixels<BR>    SetTimer eatCardBacks<BR>    Cls<BR>    Dim x As Integer, y As Integer, ecbBack As ECardBack<BR>    ecbBack = ecbCrossHatch  ‘ First card back<BR>    ‘ Draw cards in 4 by 4 grid<BR>    For x = 0 To 3<BR>        For y = 0 To 3<BR>            cdtDraw Me.hDC, (dxCard * 0.1) + (x * dxCard * 1.1), _<BR>                    (dyCard * 0.1) + (y * dyCard * 1.1), _<BR>                    ecbBack, ectBacks, QBColor(Random(0, 15))<BR>            ecbBack = ecbBack + 1<BR>        Next<BR>    Next<BR>    ScaleMode = ordScale<BR>End Sub</code></pre>
<BR>
The timer loop does essentially the same thing, although its use of static variables makes it look different. Fun ’n Games handles other animation tasks too; AnimateBacks is one of several subs called by the Timer event procedure:</p>
<pre><code>Sub AnimateBacks()<BR>    Static x As Integer, y As Integer<BR>    Static ecbBack As ECardBack, iState As Integer<BR>    <BR>    ‘ Save scale mode and change to pixels<BR>    Dim ordScale As Integer<BR>    ordScale = ScaleMode: ScaleMode = vbPixels<BR>    <BR>    ‘ Adjust variables<BR>    If ecbBack &lt; ecbCrossHatch Or ecbBack &gt; ecbO Then<BR>        ecbBack = ecbCrossHatch<BR>        x = 0: y = 0<BR>    End If<BR>    If x = 4 Then x = 0<BR>    If y = 4 Then y = 0: x = x + 1<BR>    Select Case ecbBack<BR>    Case ecbCrossHatch<BR>        ‘ Change color of crosshatch<BR>        cdtDraw Me.hDC, (dxCard * 0.1) + (x * dxCard * 1.1), _<BR>                (dyCard * 0.1) + (y * dyCard * 1.1), _<BR>                ecbBack, ectBacks, QBColor(Random(0, 15))<BR>    Case Else ‘ecbRobot, ecbCastle, ecbBeach, ecbCardHand<BR>        ‘ Step through animation states<BR>        If cdtAnimate(Me.hDC, ecbBack, _<BR>                      (dxCard * 0.1) + (x * dxCard * 1.1), _<BR>                      (dyCard * 0.1) + (y * dyCard * 1.1), iState) Then<BR>            iState = iState + 1<BR>            Exit Sub    ‘ Don’t move to next card until final state<BR>        End If<BR>        iState = 0<BR>    ‘ Case Else<BR>        ‘ Ignore other cards<BR>    End Select<BR>    ‘ Move to next card<BR>    ecbBack = ecbBack + 1<BR>    y = y + 1<BR>    ‘ Restore<BR>    ScaleMode = ordScale<BR>End Sub</code></pre>
<BR>
Timer loops can be used for a lot more than animation. Think about how to apply them to all your background tasks. Consider doing calculations and file processing while you’re handling user input, for instance. In fact, once you become accustomed to thinking in terms of timer loops, you can end up performing tasks in the background that used to be carried out in the foreground.</p>
</font></BODY>
</HTML>

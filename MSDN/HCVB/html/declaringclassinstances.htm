<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declaring Class Instances</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="declaringclassinstances"></a>Declaring Class Instances</h1>
<BR>
Class instances are usually called objects, but let’s keep calling them instances for a little while longer. Creating them works like this:</p>
<pre><code>Dim thing As CThing<BR>Set thing = New CThing<BR>thing.Title = “Things Fall Apart”<BR>thing.Count = 6</code></pre>
<BR>
You can’t just declare a variable and start partying on it. You have to create a New one first (often with Set). Bear with me if you think you already know why.</p>
<BR>
The reason you have to use New is because with class instances, the variable isn’t the same as the instance. Figure 3-1 shows the difference. The variable is your only means of communicating with the instance, but it’s not the same thing.</p>
<BR><img src="f03te01.gif"></p><BR>
<b>Figure 3-1. User-defined types versus classes.</b></p>
<BR>
Let’s look at an example that illustrates the difference:</p>
<pre><code>Dim chunkJoe As TChunk, chunkSue As TChunk<BR>Dim thingJoe As CThing, thingSue As CThing</code></pre>
<BR>
Like all Visual Basic variables, these are automatically initialized. The TChunk variables have their strings initialized to vbNullString and their integers to 0. The CThing variable doesn’t have an instance yet, so the instance can’t be initialized, but the variable is initialized to Nothing. To make them do something useful, you can assign properties as follows:</p>
<pre><code>chunkJoe.Title = “Call me Joe”<BR>chunkSue = chunkJoe<BR>Set thingJoe = New CThing<BR>thingJoe.Title = “Call me Joe”<BR>Set thingSue = thingJoe</code></pre>
<BR>
It might seem that you’ve created four objects and set them all to the same value. If you test in the Immediate window, the results indicate that everything is the same:</p>
<pre><code>? chunkJoe.Title, chunkSue.Title<BR>Call me Joe     Call me Joe<BR>? thingJoe.Title, thingSue.Title<BR>Call me Joe     Call me Joe</code></pre>
<BR>
This is an illusion, as you can see if you change Title:</p>
<pre><code>chunkSue.Title = “My name is Sue”<BR>thingSue.Title = “My name is Sue”</code></pre>
<BR>
Print out the values:</p>
<pre><code>? chunkJoe.Title, chunkSue.Title<BR>Call me Joe     My name is Sue<BR>? thingJoe.Title, thingSue.Title<BR>My name is Sue  My name is Sue</code></pre>
<BR>
Each TChunk variable contains its instances, so changing <i>chunkSue </i>doesn’t affect <i>chunkJoe</i>. But the <i>thingJoe </i>and <i>thingSue </i>variables both reference the same instance. Changing one changes the other because there isn’t any other. If you want another, you have to create it with the New operator:</p>
<pre><code>Set thingJoe = New CThing<BR>thingJoe.Title = “Call me Joe”<BR>Set thingSue = New CThing<BR>thingSue.Title = “Call me Sue”</code></pre>
<BR>
This difference between instances of classes and the instances of other types is so fundamental that we generally use different names. With classes, variables are called object variables and instances are called objects. With other types, the term variable usually refers both to the variable and the instance, because they are the same. I’ll switch to this more standard terminology from here on out.</p>
<BR>
This certainly isn’t the only way a language can declare, create, initialize, and use objects. But it is the most efficient way for a language to manage objects if you don’t have pointers, which is why Java looks to me more like Visual Basic than like C++.</p>
</font></BODY>
</HTML>

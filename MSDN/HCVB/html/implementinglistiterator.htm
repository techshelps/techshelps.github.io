<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing a List Iterator</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="implementinglistiterator"></a>Implementing a List Iterator</h1>
<BR>
Although I’m going to show you a specific iterator class, you should be thinking of iterators as a general concept. Any collection of data might need an iterator class, regardless of its organization. In fact, the interface of all iterator classes ought to look the same, no matter what objects they iterate.</p>
<BR>
CListWalker has the following internal variables to keep track of its state:</p>
<pre><code>‘ Connect back to parent collection<BR>Private connect As CList<BR>‘ Current link<BR>Private lnkCur As CLink</code></pre>
<BR>
This is typical. Any iterator has these two requirements: a reference (<i>connect</i>) to the collection it will iterate through and at least one state variable to keep track of its current position (<i>lnkCur</i>).</p>
<BR>
First let’s look at an example of how an iterator connects to its collection. CListWalker does this with the Attach method:</p>
<pre><code>‘ Attach a list to iterator<BR>Sub Attach(connectA As CList)<BR>    ‘ Initialize position in collection<BR>    Set connect = connectA<BR>End Sub</code></pre>
<BR>
If you look at the real code in LISTWALK.CLS, you’ll see that it is actually a little more complicated, but the other parts don’t matter at this point.</p>
<BR>
Clients must call Attach before doing anything else with the class. In fact, it would be part of the constructor in languages that support object initialization at creation. The connection between CList and CListWalker is two-way. CList provides a Head friend property for CListWalker, and CListWalker provides a CurLink friend property for CList:</p>
<pre><code>‘ Expose current link to friends<BR>Friend Property Get CurLink() As CLink<BR>    Set CurLink = lnkCur<BR>End Property<BR>Friend Property Set CurLink(lnkCurA As CLink)<BR>    Set lnkCur = lnkCurA<BR>End Property</code></pre>
<BR>
CListWalker also provides access to the current data through its Item property:</p>
<pre><code>‘ Default member<BR>Property Get Item() As Variant<BR>    If IsObject(lnkCur.Item) Then<BR>        Set Item = lnkCur.Item<BR>    Else<BR>        Item = lnkCur.Item<BR>    End If<BR>End Property</code></pre>
<BR>
Here’s another default Item. The <i>lnkCur </i>member is of type CLink, and CLink also has a default Item member. So, in theory, you could omit Item from <i>lnkCur</i>. But what would the following statement mean?</p>
<pre><code>Set Item = lnkCur</code></pre>
<BR>
Would you be setting the Item property to the link or to the default member of the link? Do you want to find out, or do you want your customers to find out? This is why Joe Hacker claims that default properties are an invention of the devil. Personally, I kind of like them, but I don’t deny that they can be confusing and dangerous.</p>
<BR>
You might as well get used to this little block of code. Any container class based on variants needs to check for objects before any assignment is made. Someday you’re going to forget to do this. Let’s hope you find the bug easier to identify and fix than I did.</p>
<BR>
The real work of the iterator is done by the More method. It figures out whether there is more data in the list and, if so, advances to the next member. I wanted to name the More method Next, because this is a common name for the equivalent method in other languages. Visual Basic already uses Next as a keyword, so I had to choose another name:</p>
<pre><code>‘ Report whether there are more links to iterate<BR>Function More() As Boolean<BR>    If lnkCur Is Nothing Then<BR>        ‘ Don’t skip the first time through<BR>        Set lnkCur = connect.Head<BR>    Else<BR>        ‘ Skip to the next item<BR>        Set lnkCur = lnkCur.NextLink<BR>    End If<BR>    ‘ When the next link is nothing, we’re done (handles empty list)<BR>    If Not lnkCur Is Nothing Then More = True<BR>End Function</code></pre>
<BR>
Often, a More method has to take a different action the first time through the list than on subsequent passes. You’ll see more Mores with different organizations before the end of this chapter.</p>
</font></BODY>
</HTML>

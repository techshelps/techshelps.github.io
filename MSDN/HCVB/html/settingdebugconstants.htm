<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Debug Constants</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="settingdebugconstants"></a>Setting Debug Constants</h1>
<p>
BugAssert and other debug procedures expect a constant named <i>afDebug</i> to indicate not only whether debugging is on but also where to send debug output. You can set the constant in several ways.</p>
<p>
The easiest way to set <i>afDebug</i> is to ignore it, which has the effect of setting it to 0 (False). Your code will work, but your assertions won’t. This is a good setting for your release builds.</p>
<p>
You can also set the constant in the DEBUG.BAS source module. You might think that it would be handy to set the <i>afDebug</i> constant in each source file so that you could debug some modules and not others. Unfortunately, that doesn’t work. Constants defined in source modules are module-level variables. BugAssert and other routines that test the <i>afDebug</i> constant are located in DEBUG.BAS. They don’t know or care about constants defined in other modules. Since you’ll use the DEBUG.BAS module in various projects, you don’t want the value of the <i>afDebug</i> constant to change every time you modify it in the source file. Instead, you want a projectwide way of setting the constant.</p>
<p>
You can set project constants on the Make tab of the Project Properties dialog box (as shown in Figure 1-3), or you can set them on the VB5.EXE command line. If you spend all of your time working on one project, the command line method might work for you. I switch projects constantly, so I find the Project Properties dialog box more convenient. This puts the constant entry into the project, as you can see by examining the VBP file.</p>
<p><img src="f01te03.gif"></p><p>
<b>Figure 1-3.&nbsp;The Make tab of the Project Properties dialog box.</b></p>
<p>
The Project Properties dialog box and the command line don’t know Basic. You can’t enter True or False, constants that are defined in the source file, hexadecimal numbers, or Basic operators. If you need to combine bit constants, you can’t use an expression such as <i>afDebugWin And afLogFile</i>. Instead, you have to <BR>figure out that this means <i>&amp;H1 And &amp;H4</i>, calculate, convert to decimal, and enter <i>afDebug = 5</i> in the Conditional Compilation Arguments field.</p>
<p>
Because my standard configuration is to send debugging output to the Immediate window and create a log file (<i>afDebug </i>= 5), I make it a standard setting in my default project and in my templates.</p>
<p>
<b>NOTE</b>&#09;Visual Basic now provides two ways to customize your startup projects. You can define a default startup project by creating a project with all your favorite settings and naming it AUTO&shy;LOAD.VBP. You can also define templates for common project types by creating skeleton projects and placing them in the Visual Basic template directory. Both techniques are handy, but the documentation for templates is thin and the documentation for AUTOLOAD.VBP is nonexistent. You’ll have to experiment.</p>
</font></BODY>
</HTML>

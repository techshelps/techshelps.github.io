<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Intrinsic types</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="intrinsictypes"></a>Intrinsic types</h1>
<BR>
Of course, you already understand intrinsic types such as Long, Double, and String. They contain data of the size specified by the type, and they contain built-in methods. Methods? On intrinsic types? Yes, they’re called operators. You probably don’t think of operators as methods—unless you’ve programmed in C++ or some other language that lets you redefine operators. But think about it for a minute. An operator is just a symbol that defines some standard operation for a type. Consider this statement:</p>
<pre><code>iSum = iPart + 6</code></pre>
<BR>
It’s as if the Integer type had a Plus method:</p>
<pre><code>iSum = iPart.Plus(6)</code></pre>
<BR>
In fact, in C++, an operator can use a function syntax:</p>
<pre><code>iSum = iPart.operator+(6)</code></pre>
<BR>
Operators are even polymorphic. The String, Integer, and Double types all have <font face="Symbol"><span style="font-family:symbol">&#43;</span></font> operators that look the same and work in a way that intuitively looks the same, although what happens on the chip is very different for each type.</p>
<BR>
Operations on Integer and other intrinsic types are predefined. The only way to add new operations is to write procedures that have parameters of the given type. This is called functional programming, and it looks like this:</p>
<pre><code>Sub SquareInteger(i As Integer)<BR>    i = i * i<BR>End Sub</code></pre>
<BR>
The point I want to make about intrinsic types is that the variable contains the instance data. After the expression <i>i = 6</i>, the variable <i>i </i>refers to an instance containing 6. Technically, you can make a distinction between the variable <i>i </i>and the instance containing 6 that <i>i </i>names. But nobody except me even uses the term instance when talking about intrinsic types, and I wouldn’t either if I weren’t leading up to an explanation of classes.</p>
</font></BODY>
</HTML>

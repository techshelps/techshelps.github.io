<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Executive Privilege</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="executiveprivilege"></a>Executive Privilege</h1>
<BR>
The Shell function is fine for normal use, but you can get better control of your programs with a CExecutive object. CExecutive does directly what the Shell function does behind the scenes, but instead of hard-coding defaults whether or not you want them, it puts you in control by letting you set lots of optional properties.</p>
<BR>
The base functionality of CExecutive is similar to Shell. The simplest command line looks like this: </p>
<pre><code>Dim exec As New CExecutive<BR>exec.Run &quot;Notepad&quot;</code></pre>
<BR>
At first glance, CExecutive doesn’t seem to be bringing much to the party. But it starts to make a little more sense when you set the WaitMode and Show &shy;properties:</p>
<pre><code>With exec<BR>    .WaitMode = ewmWaitIdle<BR>    .Show = vbHide<BR>    .Run &quot;mktyplib shelllnk.odl&quot;<BR>    If .ExitCode Then MsgBox &quot;Compile failed&quot;<BR>End With</code></pre>
<BR>
You don’t have to save the process ID and exit code in variables or call a separate WaitOnProgram because all that is built into the class. And there’s more. For Windows programs, you can request a position for the new window as in this example (which assumes you’ve set a With block):</p>
<pre><code>' Notepad half the screen size 20 percent in from left and top<BR>.Left = Screen.Width / Screen.TwipsPerPixelX * 0.2<BR>.Top = Screen.Height / Screen.TwipsPerPixelY * 0.2<BR>.Width = Screen.Width / Screen.TwipsPerPixelX * 0.5<BR>.Height = Screen.Height / Screen.TwipsPerPixelY * 0.5<BR>.Show = vbNormalFocus<BR>.InitDir = &quot;C:\&quot;<BR>.WaitMode = ewmNoWait<BR>.Run &quot;Notepad colors.txt&quot;</code></pre>
<BR>
Of course, a requested window position and size is just a request. The program itself can override anything the caller asks for. Calculator, for example, determines its own size and will ignore your requests to the contrary.</p>
</font></BODY>
</HTML>

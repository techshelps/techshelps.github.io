<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Retrieving the resource</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="retrievingresource"></a>Retrieving the resource </h1>
<BR>
ResProcName finally uses the Form variable, which has been passed down from UpdateResources to EnumResourceTypes to ResTypeProc to EnumResource&shy;Names to ResNameProc. First it looks at the check box and, if appropriate, vali&shy;dates the resource by giving it a trial run. I’m not going to show you the trial run because we’re almost ready for the real thing, which is a lot more interesting.</p>
<BR>
If the resource passes the test, ResNameProc stores it in the list box. Numbered resources come out like this:</p>
<pre><code>00002   String</code></pre>
<BR>
Named resources come out like this:</p>
<pre><code>CLOCK   Menu</code></pre>
<BR>
When the user clicks an item in the Resources list box, you have to parse the item text for the resource name and type, and then pass them to a procedure that can display the resource as shown on the next page.</p>
<pre><code>Private Sub lstResource_Click()<BR>    Dim sType As String, sName As String, i As Integer<BR><BR>    sType = lstResource.Text<BR>    BugAssert sType &lt;&gt; sEmpty<BR>    ‘ Extract resource ID and type<BR>    If Left$(sType, 1) = “0” Then<BR>        ‘ Append # so Windows will recognize numbers as strings<BR>        sName = “#” &amp; Left$(sType, 5)<BR>        sType = Trim$(Mid$(sType, 7))<BR>    Else<BR>        i = InStr(sType, “ “)<BR>        sName = Trim$(Left$(sType, i - 1))<BR>        sType = Trim$(Mid$(sType, i + 1))<BR>    End If<BR>    <BR>    ‘ Clear last resource and handle new one<BR>    ClearResource<BR>    pbResource.AutoRedraw = False<BR>    If UCase$(sType) &lt;&gt; “BITMAP” Then<BR>        BmpTile pbResource, imgCloud.Picture<BR>    End If<BR>    <BR>    Select Case UCase$(sType)<BR>    Case “CURSOR”<BR>        ShowCursor hModCur, sName<BR>    Case “GROUP_CURSOR”, “GROUP CURSOR”<BR>        ShowCursors hModCur, sName<BR>    Case “BITMAP”<BR>        ShowBitmap hModCur, sName<BR>    Case “ICON”<BR>        ShowIcon hModCur, sName<BR>    Case “GROUP_ICON”, “GROUP ICON”<BR>        ShowIcons hModCur, sName<BR>    Case “MENU”<BR>        ShowMenu hModCur, sName<BR>    Case “STRING”, “STRINGTABLE”<BR>        ShowString hModCur, sName<BR>    Case “WAVE”<BR>        PlayWave hModCur, sName<BR>    Case “AVI”<BR>        PlayAvi hModCur, sName<BR>    Case “FONTDIR”, “FONT”, “DIALOG”, “ACCELERATOR”<BR>        pbResource.Print sType &amp; “ selected”<BR>    Case “VERSION”<BR>        pbResource.Print GetVersionData(sModCur, 26)<BR>    Case Else<BR>        ShowData hModCur, sName, sType<BR>    End Select<BR>    pbResource.AutoRedraw = True<BR>End Sub</code></pre>
<BR>
The first part of this code strips out the type and name, taking advantage of a Windows shortcut that lets you pass numeric ID numbers as strings by pre&shy;pending the “#” character. This is easier than passing numbers in some cases and strings in others, and the performance cost in WinWatch is negligible.</p>
<BR>
The second part of the procedure brings us, at last, to the main point of this chapter: what you can do with those resources once you find them.</p>
</font></BODY>
</HTML>

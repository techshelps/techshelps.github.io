<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Ultimate Hack: Procedure Pointers</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="theultimatehackprocedurepointers"></a>The Ultimate Hack: Procedure Pointers</h1>
<p>
The last edition of this book contained a sidebar entitled “No Pointers in Basic.” I promised that the next version of Visual Basic would not support pointers. But here they are.</p>
<p>
The AddressOf operator gives Basic programmers a feature they’ve long requested, but in a format so crude and fraught with danger that the inventor of Basic, the late John Kemeny, would be shocked. Although something is better than nothing, I can’t say I approve of this un-Basic throwback to the bad old days of PEEK, POKE, SADDR, and VARPTR. I lobbied for high-level type-safe procedure variables usable in Basic—similar to the feature enjoyed by programmers in Pascal, C, and even the wretched FORTRAN.</p>
<p>
But enough groaning and complaining. Let’s make do with what they gave us. Procedure pointers will put your hacking skills to the ultimate test.</p>
</font></BODY>
</HTML>

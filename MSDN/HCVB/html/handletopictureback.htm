<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handle to picture and back</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="handletopictureback"></a>Handle to picture and back </h1>
<BR>
The BitmapToPicture function is one of several Picture conversions I’ll be examining. Once you’ve seen it, IconToPicture, CursorToPicture, and Metafile&shy;ToPicture will be easy. Here’s the code:</p>
<pre><code>Function BitmapToPicture(ByVal hBmp As Long, _<BR>                         Optional ByVal hPal As Long = hNull) _<BR>                         As IPicture<BR>    ‘ Fill picture description<BR>    Dim ipic As IPicture, picdes As PICTDESC, iidIPicture As IID<BR>    picdes.cbSizeofstruct = Len(picdes)<BR>    picdes.picType = vbPicTypeBitmap<BR>    picdes.hgdiobj = hBmp<BR>    picdes.hPalOrXYExt = hPal<BR>    ‘ Fill in magic IPicture GUID {7BF80980-BF32-101A-8BBB-00AA00300CAB}<BR>    iidIPicture.Data1 = &amp;H7BF80980<BR>    iidIPicture.Data2 = &amp;HBF32<BR>    iidIPicture.Data3 = &amp;H101A<BR>    iidIPicture.Data4(0) = &amp;H8B<BR>    iidIPicture.Data4(1) = &amp;HBB<BR>    iidIPicture.Data4(2) = &amp;H0<BR>    iidIPicture.Data4(3) = &amp;HAA<BR>    iidIPicture.Data4(4) = &amp;H0<BR>    iidIPicture.Data4(5) = &amp;H30<BR>    iidIPicture.Data4(6) = &amp;HC<BR>    iidIPicture.Data4(7) = &amp;HAB<BR>    ‘ Create picture from bitmap handle<BR>    OleCreatePictureIndirect picdes, iidIPicture, True, ipic<BR>    ‘ Result will be valid Picture or Nothing—either way set it<BR>    Set BitmapToPicture = ipic<BR>End Function</code></pre>
<BR>
First the function fills in the PICTDESC UDT. The Windows version of this structure contains unions so that one structure can contain different fields for bitmaps, icons, and metafiles. The last field of the structure is a Long hPal for bitmaps or two Integer fields (xExt and yExt) for metafiles (it’s ignored for icons). Unfortunately, Visual Basic doesn’t support writing unions, and it doesn’t recognize unions in type libraries. That’s OK. Unions are just a cheap trick for assigning different names to the same bits. I fake it by renaming the field hPalOrXYExt.</p>
<BR>
The next step is to fill a UDT with the magic numbers that uniquely identify the IPicture interface. Finally I call the OleCreatePictureIndirect API function. The last parameter is an IPicture interface which will be set by the function. I haven’t seen the source for OleCreatePictureIndirect, but I believe it creates a StdPicture object using the data passed in the <i>picdes </i>variable. It then passes back the IPicture interface of the new StdPicture object. As you might recall from Chapter 7, the StdPicture class implements several interfaces, including Picture and IPicture. There’s a lot more to the story. In fact, this code probably raises more questions than it answers, but I’ll leave the rest to lower level COM books.</p>
<BR>
So that takes care of the trip from bitmap to picture. The trip from picture to bitmap and palette is shorter and simpler. The StdPicture class and the Picture interface have a Handle property that returns the bitmap (or icon or metafile) handle of the GDI object in the picture. They also have an hPal property containing the palette handle of the bitmap. This property will always be 0 for icons and metafiles and for bitmaps that have no palette. The palette property is all you need to do palette tricks such as the one you’ll see in a few pages.</p>
</font></BODY>
</HTML>

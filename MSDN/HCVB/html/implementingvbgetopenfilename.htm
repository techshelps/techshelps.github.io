<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing VBGetOpenFileName</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="implementingvbgetopenfilename"></a>Implementing VBGetOpenFileName</h1>
<p>
Finally we get to the hard part—implementing a wrapper for GetOpenFile&shy;Name. The trick is to use the UDT that’s expected by the Windows GetOpen&shy;FileName function, but to hide it behind named arguments. From the call example, VBGet&shy;OpenFileName might look object-oriented, but it’s really a function in a Visual Basic module. The COMDLG module contains all the private types and declarations used by the public functions VBGetOpenFileName, VBGet&shy;SaveFileName, VBChooseColor, VBChooseFont, VBPrintDlg, and VBPageSetupDlg.</p>
</font></BODY>
</HTML>

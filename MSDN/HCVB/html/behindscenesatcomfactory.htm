<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Behind the Scenes at the COM Factory</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="behindscenesatcomfactory"></a>Behind the Scenes at the COM Factory</h1>
<BR>
In order to fully understand what COM does behind the scenes, let’s create an imaginary language called B--. This language looks a lot like Visual Basic, with one minor difference. It doesn’t know COM from calm. In other words, it’s a lot like C or C++. We’re still going to create and use COM objects, but we’ll have to manage them ourselves.</p>
<BR>
To make this exercise work, we’re going to have to take some poetic license. Some steps will be skipped. Some impossible leaps will be taken. Some white lies will be told. If you’ve programmed COM objects in C++, you might be amused, or perhaps outraged. Never mind. There’s no B-- compiler, so you can’t prove me wrong when I say that the following interface is behind all the other things in COM:</p>
<pre><code>‘ IUnknown interface<BR>Function QueryInterface(iid As GUID) As Object<BR>End Sub<BR><BR>Sub AddRef()<BR>End Sub<BR><BR>Sub Release() <BR>End Sub</code></pre>
<BR>
Those of you who know COM in a language other than B-- might laugh to see that I’ve changed QueryInterface into a Function and changed AddRef and Release into Subs. Bear with me. It will all work out in the end.</p>
</font></BODY>
</HTML>

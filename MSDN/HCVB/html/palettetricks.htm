<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Palette tricks</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="palettetricks"></a>Palette tricks</h1>
<p>
Palettes can provide some amusing graphics techniques for a very small performance cost. It’s much faster to change colors in the hardware palette than to change pixels on the screen, and sometimes the effect can be just as dra&shy;-<BR>ma&shy;tic. For example, you can gradually fade a bitmap on to or off the screen, or you can rotate palette colors to create an illusion of movement. </p>
<p>
Visual Basic won’t help you with these tricks, and in many cases it will stand in your way as it manages palettes behind the scenes. To get palette management to work seamlessly, you need to push Visual Basic out of the way and take over. Here are some hints about how to do it. 
<ul>
<li>
You can subclass the window where the palette is displayed and in&shy;tercept the WM_QUERYNEWPALETTE and WM_PALETTECHANGED messages. When you receive WM_QUERYNEWPALETTE, return 1 <BR>and exit from the window procedure to indicate that you have handled <BR>the mes&shy;sage. You’re throwing this message away so that Visual Basic won’t return zero, preventing you from getting WM_PALETTE&shy;CHANGED. When you receive WM_PALETTECHANGED, check the <i>wParam </i>to see if the window that changed the palette is yours and, <BR>if not, call the RealizePalette API function to map your palette onto<BR>the system palette. This ensures that your palette is handled correctly when it’s in the background. <br><br></li>
<li>
You might want to turn off Visual Basic palette management. If you’re writing a control, you can do this by setting the Palette property to <i>vbPaletteModeNone</i>. Unfortunately, this setting works only on User&shy;Control objects. You can get the same effect on Form, UserDocument, or PropertyPage objects by setting the PaletteMode property to <i>vb&shy;Palette&shy;ModeCustom</i>, and then setting the Palette property to an empty picture. <br><br></li>
<li>
When AutoRedraw is True on a form, Visual Basic creates a hidden bitmap containing the representation of the form. You don’t know and can’t control what Visual Basic is doing with that bitmap or with any palette owned by the bitmap. Therefore, you should turn off Auto&shy;Redraw when manipulating palettes. You might have to do a lot of extra work in the Paint event, but so be it. </li>
</ul>
<p>
There’s a lot more to handling palettes at the API level—too much to describe in detail, so here’s the executive summary. The first step in manipulating a palette (in the form of a palette handle) is to get its size with the multipurpose GetObject function (or the GetObjectPaletteEntries alias from the Windows API type library). Next you read the palette colors into an array with the GetPaletteEntries API function. Add the flags necessary for palette manipulation and call Set&shy;PaletteEntries to put your changes back into the palette. When you’re ready to roll, call SelectPalette to select your palette into the device context of the window that will display the palette, and call RealizePalette to map your logical palette onto the system palette. Most palette tricks involve some sort of periodic reordering of the palette colors. For each change, you rearrange the <BR>palette colors in the array and call AnimatePalette to update the new colors in the palette. If all goes well, the new colors will appear on the screen in place of the old colors.</p>
<p>
The TPALETTE project on the CD illustrates the details of palette management. There’s no point in showing a screen dump because the paper pages of this book don’t support palettes. </p>
</font></BODY>
</HTML>

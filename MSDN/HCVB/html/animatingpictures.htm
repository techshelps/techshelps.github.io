<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Animating Pictures</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="animatingpictures"></a>Animating Pictures</h1>
<p>
Windows doesn’t provide much direct support for animation or transparent images. But it does provide everything you need to create your own, including a model: icons. From the outside, an icon looks like an image on a transparent background. Internally, an icon is simply a bitmap with a corresponding mask. Once you understand how the GDI module uses masks to make icons look transparent, you can make your own transparent images, of any size.</p>
<p>
When you create an icon with an editor such as IconWorks, you create only the pixel data. The tool automatically creates an AND mask and an XOR mask and puts both (with a header) into an ICO file. Eventually the icon masks are loaded into memory and become accessible through an icon handle (HICON). Programs can then call DrawIcon, which carves a hole in the background surface in the shape of the mask and puts the image into that hole. You must do essentially the same thing to turn any bitmap into an icon. From there, it takes only a few more steps to make your “icon” into a sprite—that is, a moveable image suitable for animation.</p>
<p>
I wrap this functionality up in two ways. First, the CPictureGlass class does it the hard way. We’re going to take a long look at the details. Second, XPic&shy;tureGlass wraps it up the easy way. It takes advantage of the MaskPicture and MaskColor features of the UserControl object to create a control that works a lot like CPictureGlass with just a few lines of code. CPictureGlass and XPic&shy;tureGlass each have their advantages. Either way, you get transparent pictures.</p>
<p>
I’m using the term <i>animate </i>somewhat loosely. Real animation involves displaying a sequence of transparent images to simu&shy;-late movement. This chapter does only the simplest form of animation—moving a single image across a background. It’s your job to turn the CPictureGlass class into the CMovingPictures collection.</p>
</font></BODY>
</HTML>

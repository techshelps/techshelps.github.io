<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Binary Search</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="binarysearch"></a>Binary Search</h1>
<BR>
Once you sort a list of items, you can search it quickly with a binary search. A binary search splits the list into two parts, determines which one contains the search item, and then searches only that part by splitting that list into two parts. It continues in this fashion until the item is found. You can also use a binary search to insert an item into a sorted list. Instead of inserting the item at the beginning or at the end and then re-sorting, you search the list for the appropriate place to insert the item.</p>
<BR>
The BSearchArray function uses the same helper object as SortArray and Shuffle&shy;Array. It uses the Compare method but doesn’t need the Swap method.</p>
<pre><code>Function BSearchArray(av() As Variant, ByVal vKey As Variant, _<BR>                      iPos As Long, _<BR>                      Optional helper As ISortHelper) As Boolean<BR>    Dim iLo As Long, iHi As Long<BR>    Dim iComp As Long, iMid As Long<BR>    If helper Is Nothing Then Set helper = New CSortHelper<BR>    <BR>    iLo = LBound(av): iHi = UBound(av)<BR>    Do<BR>        iMid = iLo + ((iHi - iLo) \ 2)<BR>        iComp = helper.Compare(av(iMid), vKey)<BR>        Select Case iComp<BR>        Case 0<BR>            ‘ Item found<BR>            iPos = iMid<BR>            BSearchArray = True<BR>            Exit Function<BR>        Case Is &gt; 0<BR>            ‘ Item is in lower half<BR>            iHi = iMid - 1<BR>            If iLo = iHi Then Exit Do<BR>        Case Is &lt; 0<BR>            ‘ Item is in upper half<BR>            iLo = iMid + 1<BR>            If iLo &gt; iHi Then Exit Do<BR>        End Select<BR>    Loop<BR>    ‘ Item not found, but return position to insert<BR>    iPos = iMid - (iComp &lt; 0)<BR>        <BR>End Function</code></pre>
<BR>
For an interesting example of binary search, check out the sorted list box control discussed in Chapter 11. This control uses a binary search procedure to <BR>insert new list items at the correct location in a sorted list box.</p>
<BR>
In addition to procedures for sorting, shuffling, and searching arrays, SORT.BAS contains similar procedures for collections. Sorting arrays and sorting collections are different enough to require separate procedures but not different enough to justify separate discussions. Both versions depend on the Compare method, but swapping works differently in collections. I’ll let you figure out the details from the source.</p>
</font></BODY>
</HTML>

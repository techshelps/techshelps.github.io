<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XEditor Extends RichTextBox</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="xeditorextendsrichtextbox"></a>XEditor Extends RichTextBox</h1>
<p>
The RichTextBox control is a fine control, but it isn’t an editor. To make it into an editor, you’re going to have to throw away the parts that don’t fit the editor model and add new parts that give the editor enhanced editing features.</p>
<p>
There are several ways to extend an editor that is based on a TextBox or RichTextBox control. One is to massage the text; you can search the text, parse it, or whatever. You can tack on features that make it easier to manipulate RichTextBox properties. You can also disable RichTextBox properties that are inappropriate for an editor. And finally, you can use features of the Windows RichEdit control that aren’t supported by the ActiveX RichTextBox control. What’s the &shy;difference?</p>
<p>
The Windows control is the underlying window that handles messages that control the appearance and features of the window. The ActiveX control is the COM wrapper that turns those messages into properties and methods. The RichEdit Windows control is a superset of the Edit Windows control from which the TextBox ActiveX control is created. RichEdit understands the Edit messages and adds its own. You can recognize the Edit and RichEdit message constants in the Win32 help files because they have <i>EM_</i> as a prefix.</p>
<p>
The ActiveX RichTextBox control passes most of these messages on as properties. For example, EM_LIMITTEXT corresponds to the MaxLength property. But you might also notice some interesting messages that don’t correspond to Rich-TextBox properties. Why not?</p>
<p>
ActiveX controls provide methods and properties for the most popular features or, to be more specific, for the favorite features of the Visual Basic designers. The designers seem to like a few more features in each new version. For example, the TextBox and RichTextBox controls now have a Locked property. In older versions of Visual Basic you had to fake it with the EM_SETREADONLY message. But there are plenty of other obscure and not so obscure features that haven’t yet made it into the ActiveX control.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Undo Methods and Properties</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<font face="verdana,arial,helvetica" size="2"><h1><a name="undomethodsproperties"></a>Undo Methods and Properties</h1>
<BR>
The editing area in WordPad is a Windows RichEdit control, and WordPad has an Undo command. The ActiveX RichTextBox control is also based on the RichEdit control, but it doesn’t have an Undo method. If WordPad can have one, why can’t we?</p>
<BR>
Well, we can. We just have to roll our own by sending the appropriate messages. Windows maintains an undo buffer for Edit and RichEdit controls and provides three edit messages to control the buffer: EM_UNDO, EM_CANUNDO, and EM_EMPTYUNDOBUFFER. It’s easy enough to wrap these up as features of the XEditor control:</p>
<pre><code>Sub EditUndo()<BR>    Call SendMessage(txt.hWnd, EM_UNDO, ByVal 0&amp;, ByVal 0&amp;)<BR>End Sub<BR><BR>Sub ClearUndo()<BR>    Call SendMessage(txt.hWnd, EM_EMPTYUNDOBUFFER, ByVal 0&amp;, ByVal 0&amp;)<BR>End Sub<BR><BR>Property Get CanUndo() As Boolean<BR>    CanUndo = SendMessage(txt.hWnd, EM_CANUNDO, ByVal 0&amp;, ByVal 0&amp;)<BR>End Property</code></pre>
<BR>
This is about as simple as SendMessage gets. You pass the handle, the message constant, and zeros for the <i>wParam</i> and <i>lParam </i>parameters.</p>
<BR>
Edwina has an Edit menu with an Undo item. Here’s the menu event:</p>
<pre><code>Private Sub mnuEditUndo_Click()<BR>    edit.EditUndo<BR>End Sub</code></pre>
<BR>
Edwina doesn’t use the ClearUndo method, but she does use the CanUndo property to disable the Undo menu item when there’s nothing to undo. The main Edit menu event procedure handles the update:</p>
<pre><code>Private Sub mnuEdit_Click()<BR>    mnuEditUndo.Enabled = edit.CanUndo<BR>End Sub</code></pre>
<BR>
Usually, you don’t attach code to the event procedure for the top menu items, but it’s handy for updating either the disabled or checked state of items that might be changed by events outside the menu. This wouldn’t work for the Undo toolbar button, but few programs disable toolbar buttons. I could disable it nevertheless in the PositionChange event, which I’ll get to soon.</p>
<BR>
Edwina’s undo feature isn’t as sophisticated as the undo feature in more powerful editors. It has only one level of undo, and it might not undo some commands the way you think it should. But it’s easy to implement and better than nothing.</p>
<BR>
Notice the naming convention in the menu code. Where appropriate, I create method names from the name of the menu (Edit) and the item (Undo) where you would normally put the method names. Of course, nothing prevents you from tying this method to a button or a keystroke or even from putting it on some other menu with some other name. I copy the Notepad interface here because most developers are familiar with Notepad even if they (like me) prefer something (anything) different.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDirectWriterLock - Compound File Implementation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_idirectwriterlock_compound_file_implementation"></a>IDirectWriterLock - Compound File Implementation</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The compound file implementation of <b>IDirectWriterLock</b> provides a way to open a compound file in direct mode with a single writer and multiple readers.</p>
<p>
Compound files can be opened in direct mode using the STGM_DIRECT flag. The <b>IDirectWriterLock</b> interface makes the STGM_READWRITE|STGM_SHARE_DENY_WRITE flag valid in direct mode without requiring the overhead of a snapshot copy.</p>
<p>
When a compound file is opened in transacted mode using the STGM_TRANSACTED flag, you can also have multiple readers and a single writer using the STGM_READWRITE|STGM_SHARE_DENY_WRITE flag. However, in this case, a snapshot copy of the file is made for the readers. There is oten the additional overhead of a scratch copy as well.</p>
<h5>When to Use</h5>
<p>
Use the system-supplied implementation of <b>IDirectWriterLock</b> when you open a storage in direct mode (STGM_DIRECT) with the STGM_READWRITE|STGM_SHARE_DENY_WRITE flags. </p>
<p>
To obtain a pointer to <b>IDirectWriterLock</b>, call <b>IStorage::QueryInterface</b> on the root storage object for the compound file.</p>
<p>
Call <b>IDirectWriterLock::WaitForWriteAccess</b> to obtain exclusive write access to a compound file. Call <b>IDirectWriterLock::ReleaseWriteAccess</b> to release exclusive write access.</p>
<p>
<b>IDirectWriterLock::HaveWriteAccess</b> indicates whether the file is currently locked.</p>
<h4>Remarks</h4>
<p>
The compound file implementation of the single-writer, multiple-reader feature is based on range locking. The writer obtains exclusive access to the storage to write after all current readers have closed the storage. While the writer is active, subsequent readers cannot open the storage. The writer calls <b>IDirectWriterLock::WaitForWriteAccess</b> to obtain exclusive write access. The writer must then call <b>IDirectWriterLock::ReleaseWriteAccess</b> to release the storage.</p>
<p>
The call to <b>IDirectWriterLock::WaitForAccess</b> is required before writing in this single-reader, multiple-writer mode. Attempts to write to the file without calling <b>IDirectWriterLock::WaitForAccess</b> first result in STG_E_ACCESSDENIED. This error is returned even if the writer opened the file initially, and no readers currently have the file open.</p>
<h4>Marshaling Considerations</h4>
<p>
Custom marshaling is typically used when a compound file is marshaled to another process on the same machine. When marshaling storages, access rights are not considered, and the <b>IStorage</b> pointer is passed to the new process with the same access modes and rights as the original marshaling process. For more information on access modes, see the <a href="enums_1ktp.htm"><b>STGM</b></a> enumeration. During marshaling, no locks are taken or checked to ensure exclusive write access. In this case, there is no enforcement of the single-writer policy for compound files opened in the single-writer, multiple-reader mode. Instead, enforcement is handled internally by the compound file implementation.</p>
<p>
Since the <b>IStorage</b> pointer is passed to another process during marshaling, it is possible for two processes to have simultaneous access to the same compound file. Even though a caller may have obtained exclusive write access to the storage by calling <b>IDirectWriterLock::WaitForAccess</b>, the marshaled version can also have access simultaneously. The marshaled versions are not forced to close while the single writer accesses the file. In this case, the compound file implementation synchronizes the writes internally. </p>
<p>
If a single writer obtains exclusive access by calling, <b>IDirectWriterLock::WaitForAccess</b>, the marshaled storage also has write access and does not have to call <b>IDirectWriterLock::WaitForAccess</b>. Both processes have write access and synchronization is controlled by the internal compound file implementation.</p>
<h4>See Also</h4>
<p>
<a href="if_a2e_1163.htm"><b>IDirectWriterLock</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

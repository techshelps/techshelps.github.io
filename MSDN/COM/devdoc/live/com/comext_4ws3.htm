<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Instance Creation Helper Functions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_instance_creation_helper_functions"></a>Instance Creation Helper Functions</h2>
<p>
In previous releases of COM, the primary mechanism used to create an object instance was the <a href="api1_1nad.htm"><b>CoCreateInstance</b></a> function. This function encapsulates the process of creating a class object, using that to create a new instance and releasing the class object. Another function of this kind is the more specific <a href="api3_6y5h.htm"><b>OleCreate</b></a>, the OLE Compound Document helper that creates a class object and retrieves a pointer to a requested object.</p>
<p>
To smooth the process of instance creation on distributed systems, COM has introduced four important new instance creation mechanisms:
<ul>
<li>
<a href="monikers_7r03.htm">Class Monikers</a> and <a href="if_a2e_5wz6.htm"><b>IClassActivator</b></a> </li>
<li>
<a href="api1_5ry0.htm"><b>CoCreateInstanceEx</b></a> </li>
<li>
<a href="api1_765h.htm"><b>CoGetInstanceFromFile</b></a> </li>
<li>
<a href="api1_192d.htm"><b>CoGetInstanceFromIStorage</b></a> </li>
</ul>
<p>
Class monikers are a mechanism that permit you to identify the class of an object, and are typically used with another moniker, like a file moniker, to indicate the location of the object. This permits you to bind to an object ans specify the server that is to be launched for that object. Class monikers may also be composed to the right of monikers supporting binding to the <a href="if_a2e_5wz6.htm"><b>IClassActivator</b></a> interface. For more information, see <a href="monikers_7r03.htm">Class Monikers</a>.</p>
<p>
<b>CoCreateInstanceEx</b> extends <b>CoCreateInstance</b> to make it possible to create a single uninitialized object associated with the given CLSID on a specified remote machine. In addition, rather than requesting a single interface and obtaining a single pointer to that interface, <b>CoCreateInstanceEx</b> makes it possible to query for multiple interfaces and (if available) receive pointers to them in a single round trip, thus permitting fewer round trips between machines. This can make remote object interaction much more efficient. To do this, the function uses an array of <a href="structs_8y09.htm"><b>MULTI_QI</b></a> structures.</p>
<p>
Creating an object through <b>CoCreateInstanceEx</b> still requires that the object be initialized through a call to one of the initialization interfaces (such as <a href="if_p2q_34pw.htm"><b>IPersistStorage:::Load</b></a>). The two helper functions, <a href="api1_765h.htm"><b>CoGetInstanceFromFile</b></a> and <a href="api1_192d.htm"><b>CoGetInstanceFromIStorage</b></a> encapsulate both the instance creation power of <b>CoCreateInstanceEx</b> and initialization, the former from a file, and the latter from a storage.</p>
<p>&nbsp;</p></body>
</HTML>

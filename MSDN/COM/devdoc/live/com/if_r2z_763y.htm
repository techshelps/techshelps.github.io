<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IRunnableObject::Run</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_irunnableobject_run"></a>IRunnableObject::Run</h2>
<p>
Runs an object.</p>
<pre><code><b>HRESULT Run(
  LPBC</b><i> lpbc  </i>//Pointer to binding context
<b>);</b>
 </code></pre>
<h4>Parameter</h4>
<dl>
<dt>
<i>lpbc</i></dt>
<dd>
[in] Pointer to the binding context of the run operation. May be NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The object was successfully placed in the running state.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Containers call <b>IRunnableObject::Run</b> to force their objects to enter the running state. If the object is not already running, calling <b>IRunnableObject::Run</b> can be an expensive operation, on the order of many seconds. If the object is already running, then this method has no effect on the object.</p>
<h5>Notes to Callers</h5>
<p>
When called on a linked object that has been converted to a new class since the link was last activated, <b>IRunnableObject::Run </b>may return OLE_E_CLASSDIFF. In this case, the client should call <b>IOleLink::BindToSource</b>.</p>
<p>
<a href="api3_1yni.htm"><b>OleRun</b></a><b> </b>is a helper function that conveniently repackages the functionality offered by <b>IRunnableObject::Run</b>. With the release of OLE 2.01, the implementation of <b>OleRun</b> was changed so that it calls <b>QueryInterface</b>, asks for <a href="if_r2z_4u2c.htm"><b>IRunnableObject</b></a>, and then calls <b>IRunnableObject::Run</b>. In other words, you can use the interface and the helper function interchangeably.</p>
<h5>Notes to Implementers</h5>
<p>
The object should register in the running object table if it has a moniker assigned. The object should not hold any strong locks on itself; instead, it should remain in the unstable, unlocked state. The object should be locked when the first external connection is made to the object.</p>
<p>
An embedded object must hold a lock on its embedding container while it is in the running state. The Default handler provided by OLE 2 takes care of locking the embedding container on behalf of objects implemented by an EXE object application. Objects implemented by a DLL object application must explicitly put a lock on their embedding containers, which they do by first calling <b>IOleClientSite::Getcontainer</b> to get a pointer to the container, then calling <b>IOleContainer::LockContainer</b> to actually place the lock. This lock must be released when <b>IOleObject::Close</b> is called.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_o_2eqt.htm"><b>IOleLink::BindToSource</b></a>, <a href="api3_1yni.htm"><b>OleRun</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

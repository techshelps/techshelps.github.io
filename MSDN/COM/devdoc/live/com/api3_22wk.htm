<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OleCreatePictureIndirect</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_olecreatepictureindirect"></a>OleCreatePictureIndirect</h1>
<p>
Creates a new picture object initialized according to a <b>PICTDESC</b> structure, which can be NULL to create an uninitialized object if the caller wishes to have the picture initialize itself through <b>IPersistStream::Load</b>. The <i>fOwn</i> parameter indicates whether the picture is to own the GDI picture handle for the picture it contains, so that the picture object will destroy its picture when the object itself is destroyed. The function returns an interface pointer to the new picture object specified by the caller in the <i>riid</i> parameter. A <b>QueryInterface</b> is built into this call. The caller is responsible for calling <b>Release</b> through the interface pointer returned.</p>
<pre><code><b>STDAPI OleCreatePictureIndirect(
  PICTDESC*</b><i> pPictDesc</i><b>,</b>
<b>                 </b>//Pointer to the structure of parameters for picture
<b>  REFIID </b><i> riid</i><b>,  </b>//Reference to the identifier of the interface
<b>  BOOL</b><i> fOwn</i><b>,     </b>//Whether the picture is to be destroyed
<b>  VOID**</b><i> ppvObj  </i>//Address of output variable that receives the 
                 // interface pointer requested in <i>riid</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pPictDesc</i></dt>
<dd>
[in] Pointer to a caller-allocated structure containing the initial state of the picture.</dd>
<dt>
<i>riid</i></dt>
<dd>
[in] Reference to the identifier of the interface describing the type of interface pointer to return in <i>ppvObj</i>.</dd>
<dt>
<i>fOwn</i></dt>
<dd>
[in] If TRUE, the picture object is to destroy its picture when the object is destroyed. If FALSE, the caller is responsible for destroying the picture.</dd>
<dt>
<i>ppvObj</i></dt>
<dd>
[out] Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppvObj</i> contains the requested interface pointer on the newly created object. If the call is successful, the caller is responsible for calling <b>Release</b> through this interface pointer when the new object is no longer needed. If the call fails, the value of *<i>ppvObj</i> is set to NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The new picture object was created successfully.</dd>
<dt>
E_NOINTERFACE</dt>
<dd>
The object does not support the interface specified in <i>riid</i>.</dd>
<dt>
E_POINTER</dt>
<dd>
The address<i> </i>in <i>pPictDesc</i> or<i> ppvObj</i> is not valid. For example, it may be NULL.
</dd>
</dl>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in olectl.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in olepro32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api3_936t.htm"><b>OleLoadPicture</b></a>, <a href="structs_3a5f.htm"><b>PICTDESC</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Managing Properties</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_managing_properties"></a>Managing Properties</h2>
<p>
Every property consists of a <i>property</i> <i>identifier</i> (unique within its property set), a <i>type tag</i> that represents the type of a value, and the <i>value</i> itself. The type tag describes the representation of the data in the value. In addition, a property may also be assigned a string name that can be used to identify the property, rather than using the required numerical property identifier. To create and manage properties, COM defines the <b>IPropertyStorage</b> interface.</p>
<p>
The <a href="if_p2q_80md.htm"><b>IPropertyStorage</b></a> interface includes methods to read and write arrays of either properties themselves or just property names. The interface includes <b>Commit</b> and <b>Revert</b> methods that are similar to <b>IStorage</b> methods of the same name. There are utility methods that allow you to set the CLSID of the property set, the times associated with the set, and get statistics about the property set. Finally, the <b>Enum</b> method creates an enumerator and returns a pointer to its <a href="if_a2e_8p9j.htm"><b>IEnumSTATPROPSTG</b></a> interface. You can call the methods of this interface to enumerate <a href="structs_10pz.htm"><b>STATPROPSTG</b></a> structures on your object, which will provide information about all of the properties in the current property set.</p>
<p>
To illustrate how properties are represented, if a specific property in a property set holds an animal's scientific name, that name could be stored as a zero-terminated string. Stored along with the name would be a type indicator to indicate that the value is a zero-terminated string. These properties might have the following characteristics:</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=15%>Property ID</th>
<th align=left width=31%>String Identifier</th>
<th align=left width=23%>Type Indicator</th>
<th align=left width=31%>Value Represented</th>
</tr>
<tr valign=top>
<td width=15%>02</td>
<td width=31%>PID_ANIMALNAME</td>
<td width=23%>VT_LPWSTR</td>
<td width=31%>Zero-terminated Unicode string</td>
</tr>
<tr valign=top>
<td width=15%>03</td>
<td width=31%>PID_LEGCOUNT</td>
<td width=23%>VT_I2</td>
<td width=31%>WORD</td>
</tr>
</table><br>
<p>
Any application that recognizes the property set format (identifying it through its FMTID) can look at the property with an identifier of PID_ANIMALNAME, determine it is a zero-terminated string, and read and write the value. While the application can call <a href="if_p2q_6xd1.htm"><b>IPropertyStorage::ReadMultiple</b></a> to read any or all of a property set (having first obtained a pointer), the application must know how to interpret the property set.</p>
<p>
A property value is passed through property interfaces as an instance of the type <a href="structs_5ppw.htm"><b>PROPVARIANT</b></a>.</p>
<p>
It is important to distinguish between these stored (persistent) properties, and run-time properties. Value type constants have names beginning with <b>VT_</b>. The set of valid PROPVARIANTs is, however, not completely equivalent with the set of VARIANTs used in Automation and ActiveX Controls. </p>
<p>
The only difference between the two structures is the allowable set of VT_ tags in each. Where a certain property type can be used in both a VARIANT and a PROPVARIANT, the type tag (the VT_ value) always has an identical value. Further, for a given VT_ value, the in-memory representation used in both VARIANTs and PROPVARIANTs is identical. Taken all together, this approach allows the type system to catch disallowed type tags, while at the same time, allowing a knowledgeable client simply to do a pointer-cast when appropriate.</p>
<p>&nbsp;</p></body>
</HTML>

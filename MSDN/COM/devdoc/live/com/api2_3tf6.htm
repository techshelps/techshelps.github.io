<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateFileMoniker</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_createfilemoniker"></a>CreateFileMoniker</h1>
<p>
Creates a file moniker based on the specified path.</p>
<pre><code><b>WINOLEAPI CreateFileMoniker(
  LPCOLESTR</b><i> lpszPathName</i><b>,  </b>//Pointer to path to be used
<b>  LPMONIKER FAR</b><i> *ppmk  </i>//Address of output variable that receives 
                       // the IMoniker interface pointer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpszPathName</i></dt>
<dd>
[in] Pointer to a zero-terminated wide character string (two bytes per character) containing the path on which this moniker is based.</dd>
<dt>
<i>ppmk</i></dt>
<dd>
[out] Address of <b>IMoniker</b>* pointer variable that receives the interface pointer to the new file moniker. When successful, the function has called <a href="if_r2z_3rja.htm"><b>IUnknown::AddRef</b></a> on the file moniker and the caller is responsible for calling <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a>. When an error occurs, the value of the interface pointer is NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return value E_OUTOFMEMORY, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
The moniker has been created successfully.</dd>
<dt>
MK_E_SYNTAX</dt>
<dd>
Error in the syntax of a path was encountered while creating a moniker.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>CreateFileMoniker</b> creates a moniker for an object that is stored in a file. A moniker provider (an object that provides monikers to other objects) can call this function to create a moniker to identify a file-based object that it controls, and can then make the pointer to this moniker available to other objects. An object identified by a file moniker must also implement the <a href="if_p2q_99ph.htm"><b>IPersistFile</b></a> interface so it can be loaded when a file moniker is bound. </p>
<p>
When each object resides in its own file, as in an OLE server application that supports linking only to file-based documents in their entirety, file monikers are the only type of moniker necessary. To identify objects smaller than a file, the moniker provider must use another type of moniker (such as an item moniker) in addition to file monikers, creating a composite moniker. Composite monikers would be needed in an OLE server application that supports linking to objects smaller than a document (such as sections of a document or embedded objects).</p>
<p>
The <i>lpszPathName</i> can be a relative path, a UNC path (e.g., \\<i>server</i>\<i>share</i>\<i>path</i>), or a drive-letter-based path (e.g., c:\). If based on a relative path, the resulting moniker must be composed onto another file moniker before it can be bound.</p>
<p>
A file moniker can be composed to the right only of another file moniker when the first moniker is based on an absolute path and the other is a relative path, resulting in a single file moniker based on the combination of the two paths. A moniker composed to the right of another moniker must be a refinement of that moniker, and the file moniker represents the largest unit of storage. To identify objects stored within a file, you would compose other types of monikers (usually item monikers) to the right of a file moniker.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="if_f2n_43la.htm"><b>IMoniker - File Moniker Implementation</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

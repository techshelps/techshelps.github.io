<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>StgCreateStorageEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_stgcreatestorageex"></a>StgCreateStorageEx</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Creates a new compound-file, storage object using the COM-provided compound file implementation for the <a href="if_r2z_9b8l.htm"><b>IStorage</b></a> interface.</p>
<pre><code><b>HRESULT StgCreateStorageEx(
  const WCHAR *</b><i> pwcsName</i><b>,</b>   //Points to path of compound file to 
                            // create
<b>  DWORD</b><i> grfMode</i><b>,</b>         //Specifies the access mode for opening the 
                         // storage object
<b>  STGFMT</b><i> stgfmt</i><b>,</b>        //Specifies the storage file format
<b>  DWORD</b><i> grfAttrs</i><b>,</b>        //Reserved; must be zero
<b>  void *</b><i> reserved1</i><b>,</b>        //Reserved; must be zero
<b>  void *</b><i> reserved2</i><b>,</b>        //Reserved; must be zero
<b>  REFIID</b><i> riid</i><b>,</b>        //Specifies the GUID of the interface pointer
<b>  void **</b><i> ppObjectOpen</i><b>,</b>        //Address of an interface pointer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pwcsName</i></dt>
<dd>
[in] Points to the path of the compound file to create. It is passed uninterpreted to the file system. This can be a relative name or NULL. If NULL, a temporary compound file is allocated with a unique name.</dd>
<dt>
<i>grfMode</i></dt>
<dd>
[in] Specifies the access mode to use when opening the new storage object. For more information, see the <a href="enums_1ktp.htm"><b>STGM</b></a> enumeration. If the caller specifies transacted mode together with STGM_CREATE or STGM_CONVERT, the overwrite or conversion takes place at the time the storage object is opened and therefore is not revertible.</dd>
<dt>
<i>stgfmt</i></dt>
<dd>
[in] Specifies the storage file format. For more information, see the <a href="enums_4xx0.htm"><b>STGFMT</b></a> enumeration. </dd>
<dt>
<i>grfAttrs</i></dt>
<dd>
[in] Reserved for future use; must be zero.</dd>
<dt>
<i>reserved1</i></dt>
<dd>
[in] Reserved for future use; must be zero.</dd>
<dt>
<i>reserved2</i></dt>
<dd>
[in] Reserved for future use; must be zero.</dd>
<dt>
<i>riid</i></dt>
<dd>
[in] Specifies the GUID of the interface pointer to return.</dd>
<dt>
<i>ppObjectOpen</i></dt>
<dd>
[out] Address of an interface pointer variable that receives a pointer for an interface on the new storage object; contains NULL if operation failed. </dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
Indicates the compound file was successfully created.</dd>
<dt>
STG_E_INVALIDPOINTER </dt>
<dd>
Indicates a bad pointer in the <i>ppObjectOpen</i> parameter.</dd>
<dt>
STG_E_INVALIDPARAMETER </dt>
<dd>
Indicates an invalid value for the <i>grfAttrs, reserved1, reserved2, grfMode, </i>or<i> stgfmt </i>parameters.</dd>
<dt>
STG_E_INVALIDFLAG</dt>
<dd>
Indicates a bad flag combination in the <i>grfMode</i> pointer.</dd>
<dt>
STG_E_INVALIDNAME</dt>
<dd>
Indicates a bad name in the <i>pwcsName</i> parameter.</dd>
<dt>
STG_E_FILEALREADYEXISTS</dt>
<dd>
Indicates the compound file already exists and <i>grfMode</i> is set to STGM_FAILIFTHERE.</dd>
<dt>
STG_E_LOCKVIOLATION</dt>
<dd>
Access denied because another caller has the file open and locked.</dd>
<dt>
STG_E_SHAREVIOLATION</dt>
<dd>
Access denied because another caller has the file open and locked.</dd>
<dt>
STG_E_NOTIMPL</dt>
<dd>
Indicates the <b>StgCreateStorageEx</b> function is not implemented by the operating system. In this case, use the <b>StgCreateDocfile</b> function.</dd>
</dl>
<p>
This function can also return any file system errors or Win32 errors wrapped in an HRESULT.</p>
<h4>Remarks</h4>
<p>
<b>StgCreateStorageEx</b> is a superset of the <b>StgCreateDocfile </b>function, and should be used by new code. Future enhancements to structured storage will be exposed through this function.</p>
<p>
The <b>StgCreateStorageEx</b> function creates a new storage object using one of the system-provided, structured storage implementations. The name of the open compound file can be retrieved by calling the <a href="if_r2z_3ook.htm"><b>IStorage::Stat</b></a> method.</p>
<p>
When a new file is created, the storage implementation used depends on what <b>STGFMT</b> flag you specify and what type of drive the file is stored on. For more information, see the <a href="enums_4xx0.htm"><b>STGFMT</b></a> enumeration.</p>
<p>
<b>StgCreateStorageEx</b> creates the file if it does not exist. If it does exist, the use of the STGM_CREATE, STGM_CONVERT, and STGM_FAILIFTHERE flags in the <i>grfMode</i> parameter indicate how to proceed. For more information on these values, see the <a href="enums_1ktp.htm"><b>STGM</b></a> enumeration.</p>
<p>
You can use the <b>StgCreateStorageEx</b> function to get access to the root storage of a structured storage document, the content stream of a flat file, or the property set storage of any file that supports property sets. See the <a href="enums_4xx0.htm"><b>STGFMT</b></a> documentation for information about which IIDs are supported for the different <b>STGFMT</b> values. For information on the interfaces supported by each <b>STGFMT</b> value, see the <a href="enums_1ktp.htm"><b>STGM</b></a> enumeration.</p>
<p>
When you create a file using the STGFMT_FILE flag, the native property set implementation is used for any property sets. When you use the STGFMT_DOCFILE flag, the compound-file, property-set implementation is used. When you use the STGFMT_STORAGE flag, the NTFS, structured-storage, property-set implementation is used.</p>
<p>
If the calling process lacks write permissions to the existing file (because of access control in the file system), the <i>grfMode</i> parameter can only specify STGM_READ and <i>not</i> STGM_WRITE or STGM_READWRITE. The resulting new open compound file can still be written to, but a subsequent commit operation fails (in transacted mode, write permissions are enforced at commit time).</p>
<p>
Specifying STGM_SIMPLE provides a much faster implementation of a compound file object in a limited, but frequently-used case involving applications that require a compound file implementation with multiple streams and no storages. The simple mode does not support all of the methods on <b>IStorage</b>. For more information, refer to the <a href="enums_1ktp.htm"><b>STGM</b></a> enumeration.</p>
<p>
If the <i>grfMode</i> parameter specifies STGM_TRANSACTED and no file yet exists with the name specified by the <i>pwcsName</i> parameter, the file is created immediately. In an access-controlled file system, the caller must have write permissions for the file system directory in which the compound file is created. If STGM_TRANSACTED is not specified, and STGM_CREATE is specified, an existing file with the same name is destroyed before creating the new file.</p>
<p>
You can also use <b>StgCreateStorageEx</b> to create a temporary compound file by passing a NULL value for the <i>pwcsName</i> parameter. However, these files are temporary only in the sense that they have a unique system-provided name – one that is probably meaningless to the user. The caller is responsible for deleting the temporary file when finished with it, unless STGM_DELETEONRELEASE was specified for the <i>grfMode</i> parameter.</p>
<p>
</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api4_5ar7.htm"><b>StgCreateDocFileOnILockBytes</b></a> ; <a href="api4_8hd1.htm"><b>StgCreateDocfile</b></a><b>, <a href="enums_1ktp.htm">STGM</a>, <a href="enums_4xx0.htm">STGFMT</a></b></p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

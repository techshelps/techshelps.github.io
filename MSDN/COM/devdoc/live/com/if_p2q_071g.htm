<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPropertyBag::Read</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_ipropertybag_read"></a>IPropertyBag::Read</h2>
<p>
Called by the control to read a property from the storage provided by the container.</p>
<pre><code><b>HRESULT Read(
  LPCOLESTR</b><i> pszPropName</i><b>,  </b>//Pointer to the property to be read
<b>  VARIANT*</b><i> pVar</i><b>,          </b>//Pointer to the VARIANT to receive the 
                          //property value
<b>  IErrorLog*</b><i> pErrorLog    </i>//Pointer to the caller's error log
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pszPropName</i></dt>
<dd>
[in] Pointer to the name of the property to read. Cannot be NULL.</dd>
<dt>
<i>pVar</i></dt>
<dd>
[in, out] Pointer to the caller-initialized <b>VARIANT</b> that is to receive the property value on output. The method must set both type and value fields in the <b>VARIANT</b> before returning. If the caller initialized the <b>pVar-&gt;vt</b> field on entry, the property bag should attempt to coerce the value it knows into this type. If the caller sets <b>pVar-&gt;vt</b> to VT_EMPTY, the property bag can use a convenient type that is consistent with the data. For example, if the property is a string, the property bag cannot use VT_I4.</dd>
<dt>
<i>pErrorLog</i></dt>
<dd>
[in] Pointer to the caller's <b>IErrorLog</b> interface in which the property bag stores any errors that occur during reads. Can be NULL in which case the caller is not interested in errors.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The property was read successfully. The caller becomes responsible for any allocations that are contained in the <b>VARIANT</b> in <i>pVar</i>.</dd>
<dt>
E_POINTER</dt>
<dd>
The address in <i>pszPropName </i>is not valid (such as NULL).</dd>
<dt>
E_INVALIDARG</dt>
<dd>
The property named with <i>pszPropName </i>does not exist in the property bag.</dd>
<dt>
E_FAIL</dt>
<dd>
The property bag was unable to read the specified property, such as if the caller specified a data type to which the property bag could not coerce the known value. If the caller supplied an error log, a more descriptive error was sent there.
</dd>
</dl>
<h4>Remarks</h4>
<p>
This method asks the property bag to read the property named with <i>pszPropName </i>into the caller-initialized <b>VARIANT</b> in <i>pVar</i>. Errors that occur are logged in the error log pointed to by <i>pErrorLog.</i></p>
<p>
When <b>pVar-&gt;vt</b> specifies another object pointer (VT_UNKNOWN or VT_DISPATCH) then the property bag is responsible for creating and initializing the object described by <i>pszPropName</i>. The action taken by the property bag depends on the value of <b>pvar-&gt;punkVal</b> or <b>pvar-&gt;vdispVal</b>. For example, if <b>pvar-&gt;punkVal</b> is non-NULL, the property bag initializes the existing object using the value of the pointer, usually querying for a persistence interface and calling the <b>Load</b> method. However, if <b>pVar-&gt;punkVal</b> is NULL, then the property bag creates a new object and loads it as appropriate.</p>
<p>
E_NOTIMPL is not a valid return code since any object implementing this interface must support the entire functionality of the interface.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ocidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_p2q_495x.htm"><b>IPropertyBag::Write</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

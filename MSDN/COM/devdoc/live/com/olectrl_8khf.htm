<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls Interfaces</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_activex_controls_interfaces"></a>ActiveX Controls Interfaces</h1>
<p>
In addition to other mechanisms for communicating between the control and its client, ActiveX controls technology specifies the <a href="if_o_2euk.htm"><b>IOleControl</b></a> and <a href="if_o_3rvp.htm"><b>IOleControlSite</b></a> interfaces for client-control communication. There is also the <a href="if_r2z_9yp1.htm"><b>ISimpleFrameSite</b></a> interface for simple control containers.</p>
<p>
These three interfaces are, however, specific to controls are not generally useful outside the context of controls. These interfaces are defined as follows:</p>
<pre><code>interface IOleControl : IUnknown 
    { 
    HRESULT GetControlInfo([out] CONTROLINFO *pCI); 
    HRESULT OnMnemonic([in] LPMSG pMsg); 
    HRESULT OnAmbientPropertyChange([in] DISPID dispID); 
    HRESULT FreezeEvents([in] BOOL bFreeze); 
    } 
 
interface IOleControlSite : IUnknown 
    { 
    HRESULT OnControlInfoChanged(void); 
    HRESULT LockInPlaceActive([in] BOOL fLock); 
    HRESULT GetExtendedControl([out] IDispatch **ppDisp); 
    HRESULT TransformCoords([in-out] POINTL *pptlHimetric 
        , [in-out] POINTF *pptfContainer, [in] DWORD dwFlags); 
    HRESULT TranslateAccelerator([in] LPMSG pMsg 
        , [in] DWORD grfModifiers); 
    HRESULT OnFocus([in] BOOL fGotFocus); 
    HRESULT ShowPropertyFrame(void); 
    } 
 
interface ISimpleFrameSite : IUnknown 
    { 
    HRESULT PreMessageFilter([in] HWND hWnd, [in] UINT msg 
        , [in] WPARAM wp, [in] LPARAM lp, [out] LRESULT *plResult 
        , [out] DWORD *pdwCookie); 
    HRESULT PostMessageFilter([in] HWND hWnd, [in] UINT msg 
        , [in] WPARAM wp, [in] LPARAM lp, [out] LRESULT *plResult 
        , [in] DWORD dwCookie); 
    } 
 </code></pre>
<p>
Some controls, like a group box, are merely a simple container of other controls. In such cases, the simple control, called a simple frame, doesn't have to implement all the container requirements. It can delegate most of the interface calls from its contained controls to the container that manages the simple frame. Besides interface calls, the simple frame also has to deal with Windows messages that potentially come from controls within it. For this reason, a container supplies <a href="if_r2z_9yp1.htm"><b>ISimpleFrameSite</b></a><b> </b>to allow such simple frame controls to pass messages up to the contain. <b>PreMessageFilter </b>gives the container first crack at the message; <b>PostMessageFilter </b>is called after the simple frame has process the message itself.</p>
<p>
<a href="if_o_2euk.htm"><b>IOleControl</b></a> and <a href="if_o_3rvp.htm"><b>IOleControlSite</b></a> are described throughout the following sections.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IRunningObjectTable::GetObject</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_irunningobjecttable_getobject"></a>IRunningObjectTable::GetObject</h2>
<p>
Determines whether the object identified by the specified moniker is running, and if it is, retrieves a pointer to that object. This method looks for the moniker in the Running Object Table (ROT), and retrieves the pointer registered there.</p>
<pre><code><b>HRESULT GetObject(
  IMoniker</b><i> *pmkObjectName</i><b>,  </b>//Pointer to the moniker on the object
<b>  IUnknown</b><i> **ppunkObject  </i>//Address of output variable that receives 
                          //the IUnknown interface pointer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pmkObjectName</i></dt>
<dd>
[in] Pointer to the moniker to search for in the Running Object Table.</dd>
<dt>
<i>ppunkObject</i></dt>
<dd>
[out] Address of <b>IUnknown</b>* pointer variable that receives the interface pointer to the running object. When successful, the implementation calls <a href="if_r2z_3rja.htm"><b>IUnknown::AddRef</b></a> on the object; it is the caller's responsibility to call <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a>. If the object is not running or if an error occurs, the implementation sets *<i>ppunkObject</i> to NULL. 
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
Indicates that <i>pmkObjectName</i> was found in the ROT and a pointer was returned.</dd>
<dt>
S_FALSE</dt>
<dd>
There is no entry for <i>pmkObjectName</i> in the ROT, or that the object it identifies is no longer running (in which case, the entry is revoked).
</dd>
</dl>
<h4>Remarks</h4>
<p>
This method checks the ROT for the moniker specified by <i>pmkObjectName</i>. If that moniker had previously been registered with a call to <a href="if_r2z_33n6.htm"><b>IRunningObjectTable::Register</b></a>, this method returns the pointer that was registered at that time. </p>
<h5>Notes to Callers</h5>
<p>
Generally, you call the <b>IRunningObjectTable::GetObject</b> method only if you are writing your own moniker class (that is, implementing the <a href="if_f2n_8otu.htm"><b>IMoniker</b></a> interface). You typically call this method from your implementation of <a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a>. </p>
<p>
However, note that not all implementations of <b>IMoniker::BindToObject</b> need to call this method. If you expect your moniker to have a prefix (indicated by a non-NULL <i>pmkToLeft</i> parameter to <b>IMoniker::BindToObject</b>), you should not check the ROT. The reason for this is that only complete monikers are registered with the ROT, and if your moniker has a prefix, your moniker is part of a composite and thus not complete. Instead, your moniker should request services from the object identified by the prefix (for example, the container of the object identified by your moniker). </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

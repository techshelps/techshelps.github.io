<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Inserting an OLE 2 Object in an OLE 1 Application</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_com_inserting_an_ole_2_object_in_an_ole_1_application"></a>Inserting an OLE 2 Object in an OLE 1 Application</h3>
<p>
If a particular class is insertable in an OLE 1 container, the "ProgID" <i>root</i> key will contain a <b>Protocol\StdFileEditing</b> subkey with appropriate subkeys <b>Verb</b>, <b>Server</b>, and so on, as in OLE 1. The <b>Server</b> that should be registered here is the full path to the executable file of the OLE 2 object application. An OLE 1 container uses the path and executable file names to launch the OLE 2 object application. The initialization of this application, in turn, loads the OLE 2 compatibility layer. This layer handles subsequent interactions with the OLE 1 container (client), turning them into OLE 2–like requests to the OLE 2 application. An OLE 2 object application doesn't have to take any special action beyond setting up these registry entries to make objects insertable into an OLE 1 container.</p>
<p>
The ProgID key and its subkeys appear in the registry as shown in the following example, where "<b>&lt;<i>Progid</i>&gt;</b>" is the key, and "<b>Insertable</b>," "<b>Protocol</b>," "<b>StdFileEditing</b>," "<b>Verb</b>," and so on are subkeys.</p>
<p>
<b>&lt;<i>ProgId</i>&gt; = </b>&lt;<i>MainUserTypeName</i>&gt;<br>
<b>Insertable</b>    // class is insertable in OLE 2 containers<br>
<b>Protocol<br>
</b>    <b>StdFileEditing</b>    // OLE 1 compatibility info; present if, and only if, <br>
                               // objects of this class are insertable in OLE 1 containers.<br>
        <b>Server</b> = &lt;<i>full path to the OLE 2 object application</i>&gt;<br>
        <b>Verb</b><br>
            <b>0</b> = &lt;<i>verb 0</i>&gt;    // Verb entries for the OLE 2 application must start with zero as the <br>
            <b>1</b> = &lt;<i>verb 1</i>&gt;    // primary verb and run consecutively.<br>
<b>CLSID</b> = &lt;<i>CLSID</i>&gt;    // The corresponding CLSID. Needed by GetClassFile.<br>
<b>Shell</b>    // Windows 3.1 File Manager Info<br>
    <b>Print<br>
</b>    <b>Open<br>
</b>    <b>Command</b> = &lt;<i>appname.exe</i>&gt; %1</p>
<p>
To summarize, any root key that has either an <b>Insertable</b> or a <b>Protocol\StdFileEditing </b>subkey is the ProgID (or OLE 1 class name) of a class that should appear in the Insert Object dialog box. The value of that root key is the name displayed in the Insert Object dialog box.</p>
<p>
The values of each key in the example below are used for registering the "Ole 2 In-Place Server Outline" sample application. Set these values as required and used by your application.</p>
<p>&nbsp;</p></body>
</HTML>

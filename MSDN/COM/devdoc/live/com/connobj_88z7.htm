<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connectable Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_connectable_objects"></a>Connectable Objects</h1>
<p>
COM connectable objects provide outgoing interfaces to their clients in addition to their incoming interfaces. As a result, objects and their clients can engage in bi-directional communication. Incoming interfaces are implemented on an object and receive calls from external clients of an object while outgoing interfaces are implemented on the client's sink and receive calls from the object. The object defines an interface it would like to use, and the client implements it.</p>
<p>
An object defines its incoming interfaces and provides implementations of these interfaces. Incoming interfaces are available to clients through the object's <b>IUnknown::QueryInterface</b> method. Clients call the methods of an incoming interface on the object, and the object performs desired actions on behalf of the client. </p>
<p>
Outgoing interfaces are also defined by an object, but the client provides the implementations of the outgoing interfaces on a sink object that the client creates. The object then calls methods of the outgoing interface on the sink object to notify the client of changes in the object, to trigger events in the client, or to request something from the client, or, in fact, for any purpose the object creator comes up with.</p>
<p>
An example of an outgoing interface is an <b>IButtonSink</b> interface defined by a push button control to notify its clients of its events. For example, the button object calls <b>IButtonSink::OnClick</b> on the client's sink object when the user clicks the button on the screen. The button control defines the outgoing interface. For a client of the button to handle the event, the client must implement that outgoing interface on a sink object then connect that sink to the button control. Then, when events occur in the button, the button will call the sink at which time the client can execute whatever action it wishes to assign to that button click.</p>
<p>
Connectable objects provide a general mechanism for object-to-client communication. Any object that wishes to expose events or notifications of any kind can use this technology. In addition to the general connectable object technology, COM provides many special purpose sink and site interfaces used by objects to notify clients of specific events of interest to the client. For example, <a href="if_a2e_6pnv.htm"><b>IAdviseSink</b></a> may be used by objects to notify clients of data and view changes in the object.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Structure of COM Error Codes</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_structure_of_com_error_codes"></a>Structure of COM Error Codes</h1>
<p>
SCODEs on 16-bit platforms are divided into four fields: a severity code, a context field, a facility field, and an error code. The following figure shows the format of an SCODE on a 16-bit platform; the numbers indicate bit positions:</p>
<p>
<img src="images/errorh01.gif" border=0></p>
<p>
<b>HRESULT</b>s on 32-bit platforms have the following format:</p>
<p>
<img src="images/errorh02.gif" border=0></p>
<p>
The severity code in the 16-bit SCODE and the high-order bit in the <b>HRESULT</b> indicate whether the return value represents success or failure. If set to zero, SEVERITY_SUCCESS, the value indicates success. If set to 1, SEVERITY_ERROR, it indicates failure.</p>
<p>
In the 16-bit version of the SCODE, the context field is reserved; this field does not exist in the 32-bit version. The R, C, N, and r bits are reserved in both. </p>
<p>
The facility field in both versions indicates the system service responsible for the error. There are currently five facilities: FACILITY_NULL, FACILITY_ITF, FACILITY_DISPATCH, FACILITY_RPC, and FACILITY_STORAGE. Microsoft allocates new facility codes as they become necessary. Most SCODEs and <b>HRESULT</b>s set the facility field to FACILITY_ITF, indicating an interface method error.</p>
<p>
The following table describes the various facility fields:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=32%>Facility</th>
<th align=left width=68%>Description</th>
</tr>
<tr valign=top>
<td width=32%>FACILITY_NULL</td>
<td width=68%>For broadly applicable common status codes such as S_OK. This facility code has a value of zero.</td>
</tr>
<tr valign=top>
<td width=32%>FACILITY_ITF</td>
<td width=68%>For most status codes returned from interface methods, value is defined by the interface. That is, two SCODEs or <b>HRESULT</b>s with exactly the same 32-bit value returned from two different interfaces might have different meanings. This facility has a value of 4.</td>
</tr>
<tr valign=top>
<td width=32%>FACILITY_DISPATCH</td>
<td width=68%>For late-binding <b>IDispatch</b> interface errors. This facility has a value of 2.</td>
</tr>
<tr valign=top>
<td width=32%>FACILITY_RPC</td>
<td width=68%>For status codes returned from remote procedure calls. This facility has a value of 1. </td>
</tr>
<tr valign=top>
<td width=32%>FACILITY_STORAGE</td>
<td width=68%>For status codes returned from <a href="if_r2z_9b8l.htm"><b>IStorage</b></a> or <a href="if_r2z_4x7x.htm"><b>IStream</b></a> method calls relating to structured storage. Status codes whose code (lower 16 bits) value is in the range of DOS error codes (that is, less than 256) have the same meaning as the corresponding DOS error. This facility has a value of 3. </td>
</tr>
<tr valign=top>
<td width=32%>FACILITY_WINDOWS</td>
<td width=68%>Used for additional error codes from Microsoft-defined interfaces.</td>
</tr>
<tr valign=top>
<td width=32%>FACILITY_WIN32</td>
<td width=68%>Used to provide a means of handling error codes from functions in the Win32 API as an <b>HRESULT</b>. Error codes in 16-bit OLE that duplicated Win32 error codes have also been changed to FACILITY_WIN32. </td>
</tr>
</table><br>
<p>
The code field is a unique number that is assigned to represent the error or warning. </p>
<p>
By convention, <b>HRESULT</b>s generally have names in the following format:</p>
<pre><code><i>Facility</i>_<i>Severity</i>_<i>Reason</i> 
 </code></pre>
<p>
where <i>Facility</i> is either the facility name or some other distinguishing identifier; <i>Severity</i> is a single letter, S or E, that indicates the whether the function call succeeded (S) or failed (E); and, <i>Reason</i> is an identifier that describes the meaning of the code. For example, the status code STG_E_FILENOTFOUND indicates a storage-related error has occurred; specifically, a requested file does not exist. Status codes from FACILITY_NULL omit the <i>Facility</i>_ prefix.</p>
<p>
Error codes are defined within the context of an interface implementation. Once defined, success codes cannot be changed or new success codes added. However, new failure codes can be written since they generally only provide hints at what might have gone wrong. Microsoft reserves the right to define new failure codes (but not success codes) for the interfaces described in FACILITY_ITF or in new facilities.</p>
<p>&nbsp;</p></body>
</HTML>

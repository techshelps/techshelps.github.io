<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPerPropertyBrowsing::GetPredefinedStrings</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_iperpropertybrowsing_getpredefinedstrings"></a>IPerPropertyBrowsing::GetPredefinedStrings</h2>
<p>
Returns a counted array of string pointers (LPOLESTR pointers). The strings pointed to provide a list of names that each correspond to values that the property specified with <i>dispID</i> can accept.</p>
<pre><code><b>HRESULT GetPredefinedStrings(
  DISPID</b><i> dispID</i><b>,          </b>//Dispatch identifier for property
<b>  CALPOLESTR</b><i> *pcaStringsOut</i><b>,  </b>//Receives a pointer to an array of 
                              //strings
<b>  CADWORD</b><i> *pcaCookiesOut  </i>//Receives a pointer to array of DWORDs
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dispID</i></dt>
<dd>
[in] Dispatch identifier of the property for which the caller is requesting the string list.</dd>
<dt>
<i>pcaStringsOut</i></dt>
<dd>
[out] Pointer to a caller-allocated, counted array structure that contains the element count and address of a method-allocated array of string pointers. This method also allocates memory for the string values containing the predefined names, and it stores the string pointers in the array. If the method fails, no memory is allocated, and the contents of the structure are undefined.</dd>
<dt>
<i>pcaCookiesOut</i></dt>
<dd>
[out] Pointer to the caller-allocated, counted array structure that contains the element count and address of a method-allocated array of DWORDs. The DWORD values in the array can be passed to <a href="if_p2q_804l.htm"><b>IPerPropertyBrowsing::GetPredefinedValue</b></a> to retrieve the value associated with the name in the same array position inside <i>pcaStringsOut</i>. If the method fails, no memory is allocated, and the contents of the structure are undefined.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
The arrays were allocated and filled successfully.</dd>
<dt>
E_NOTIMPL</dt>
<dd>
This method is not implemented and predefined names are not supported.</dd>
<dt>
E_POINTER</dt>
<dd>
The address in <i>pcaStringsOut</i> or <i>pcaCookiesOut</i> is not valid. For example, either may be NULL.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Each string returned in the array pointed to by <i>pcaStringsOut</i> has a matching token in the counted array pointed to by <i>pcaCookiesOut</i>, where the token can be passed to <b>IPerPropertyBrowsing::GetPredefinedValue</b> to get the actual value (a VARIANT) corresponding to the string.</p>
<p>
Using the predefined strings, a caller can obtain a list of strings for populating user interface elements, such as a drop-down listbox. When the end user selects one of these strings as a value to assign to a property, the caller can then obtain the corresponding value through <b>IPerPropertyBrowsing::GetPredefinedValue</b>.</p>
<h5>Notes to Callers</h5>
<p>
Both the <b>CALPOLESTR</b> and <b>CADWORD</b> structures passed to this method are caller-allocated. The caller is responsible for freeing each string pointed to from the <b>CALPOLESTR</b> array as well as the <b>CALPOLESTR</b> structure.</p>
<p>
All memory is allocated with <b>CoTaskMemAlloc</b>. The caller is responsible for freeing the strings and the array with <b>CoTaskMemFree</b>.</p>
<p>
Upon return from this method, the caller is responsible for all this memory and must free it when it is no longer needed. Code to achieve this appears as follows:</p>
<pre><code>CALPOLESTR     castr; 
CWDWORD        cadw; 
ULONG          i; 
 
pIPerPropertyBrowsing-&gt;GetPredefinedStrings(dispID, &amp;castr, &amp;cadw); 
 
//...Use the strings and the cookies 
 
CoTaskMemFree((void *)cadw.pElems); 
 
for (i=0; i &lt; castr.cElems; i++) 
    CoTaskMemFree((void *)castr.pElems[i]); 
 
CoTaskMemFree((void *)castr.pElems); 
 </code></pre>
<h5>Notes to Implementers</h5>
<p>
Support for predefined names and values is not required. If your object does not support these names, return E_NOTIMPL from this method. If this method is not implemented, <b>IPerPropertyBrowsing::GetPredefinedValue</b> must not be implemented either.</p>
<p>
This method fills the <i>cElems</i> and <i>pElems</i> fields of the <b>CADWORD</b> and <b>CALPOLESTR</b> structures. It allocates the arrays pointed to by these structures with <b>CoTaskMemAlloc</b> and fills those arrays. In the <b>CALPOLESTR</b> case, this method also allocates each string with <b>CoTaskMemAlloc</b>, storing each string pointer in the array.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ocidl.h.</p>
<h4>See Also</h4>
<p>
<a href="structs_6wdg.htm"><b>CADWORD</b></a>, <a href="structs_1z76.htm"><b>CALPOLESTR</b></a>, <a href="api1_9bj7.htm"><b>CoTaskMemAlloc</b></a>, <a href="api1_63l1.htm"><b>CoTaskMemFree</b></a>, <a href="if_p2q_804l.htm"><b>IPerPropertyBrowsing::GetPredefinedValue</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLE Serialized Property Set Format</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_ole_serialized_property_set_format"></a>OLE Serialized Property Set Format</h1>
<p>
Persistent property sets provide a way to store information within file system entities. It is recommended that to create and manage them, you use the <a href="if_p2q_8g4l.htm"><b>IPropertySetStorage</b></a> and <a href="if_p2q_80md.htm"><b>IPropertyStorage</b></a> interfaces as described in the section of the Structured Storage chapter entitled <a href="storage_1vub.htm"><b>Persistent Property Sets</b></a>.</p>
<p>
Property sets are made up of a tagged section of values, with the section uniquely identified by a Format Identifier (FMTID). Every property consists of a <i>property</i> <i>identifier</i> and a <i>type indicator</i> that represents a <i>value</i>. Each value stored in a property set has a unique property identifier that distinguishes the property. The type indicator describes the representation of the data in the value. </p>
<p>
When you use the <b>IPropertySetStorage</b> and <b>IPropertyStorage</b> interfaces, you do not have to deal directly with the OLE serialized property set format structure. However, for those who are interested, this Appendix describes this format.</p>
<p>
All data elements within a property set are stored in Intel representation (that is, in little-endian byte order).</p>
<p>
OLE defines a standard, serialized data format for property sets. When you are dealing directly with the serialized format, and not with the interfaces, property sets have the following characteristics:
<ul>
<li>
Property sets allow for different applications to create their own independent property sets to serve the application's needs.</li>
<li>
Property sets can be stored in a single <a href="if_r2z_4x7x.htm"><b>IStream</b></a> instance or in an <a href="if_r2z_9b8l.htm"><b>IStorage</b></a> instance containing multiple streams. Indeed, in the abstract, property sets are simply another data type that can be stored in many different forms of an in-memory or on-disk storage. For recommended conventions on creating the string name for the storage object, see the section "Naming Property Sets" later in this appendix.</li>
<li>
Property sets allow for a dictionary of displayable names to be included to further describe the contents. A set of conventions for choosing property names is recommended. For more information on this optional dictionary, see "Property ID 0" later in this appendix.</li>
</ul>
<p>
The property set stream is divided into three major parts:
<ul>
<li>
Header</li>
<li>
FORMATID/offset pair</li>
<li>
Section containing the actual property set values</li>
</ul>
<p>
The overall length of the property set stream must be less than or equal to 256K. The following sections of this chapter describe the individual components that make up the property set data format, as shown in the previous figure.</p>
<p>
<b>Note</b>&nbsp;&nbsp;Previous versions of this document described extensions to the property set stream with more than one section allowed, but that has been revised now to provide for one section in the property stream. The one exception is the DocumentSummaryInformation property set, described in the section <a href="propsets_1yr8.htm">The DocumentSummaryInformation Property Set</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DllGetClassObject</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_dllgetclassobject"></a>DllGetClassObject</h1>
<p>
Retrieves the class object from a DLL object handler or object application. <b>DllGetClassObject </b>is called from within the <a href="api1_6yb8.htm"><b>CoGetClassObject</b></a> function when the class context is a DLL.</p>
<p>
<b>Note</b>&nbsp;&nbsp;OLE does not provide this function. DLLs that support the OLE Component Object Model (COM) must implement <b>DllGetClassObject</b> in OLE object handlers or DLL applications.</p>
<pre><code><b>STDAPI DllGetClassObject(
  REFCLSID</b><i> rclsid</i><b>,  </b>//CLSID for the class object
<b>  REFIID</b><i> riid</i><b>,      </b>//Reference to the identifier of the interface 
                    // that communicates with the class object
<b>  LPVOID *</b><i> ppv      </i>//Address of output variable that receives the 
                    // interface pointer requested in <i>riid</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>rclsid</i></dt>
<dd>
[in] CLSID that will associate the correct data and code.</dd>
<dt>
<i>riid</i></dt>
<dd>
[in] Reference to the identifier of the interface that the caller is to use to communicate with the class object. Usually, this is <b>IID_IClassFactory</b> (defined in the OLE headers as the interface identifier for <b>IClassFactory</b>).</dd>
<dt>
<i>ppv</i></dt>
<dd>
[out] Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppv</i> contains the requested interface pointer. If an error occurs, the interface pointer is NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return values E_INVALIDARG, E_OUTOFMEMORY and E_UNEXPECTED, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
The object was retrieved successfully.</dd>
<dt>
CLASS_E_CLASSNOTAVAILABLE</dt>
<dd>
The DLL does not support the class (object definition).
</dd>
</dl>
<h4>Remarks</h4>
<p>
If a call to the <a href="api1_6yb8.htm"><b>CoGetClassObject</b></a> function finds the class object that is to be loaded in a DLL, <b>CoGetClassObject</b> uses the DLL's exported <b>DllGetClassObject</b> function. </p>
<h5>Notes to Callers</h5>
<p>
You should not call <b>DllGetClassObject</b> directly. When an object is defined in a DLL, <a href="api1_6yb8.htm"><b>CoGetClassObject</b></a> calls the <a href="api1_95rt.htm"><b>CoLoadLibrary</b></a> function to load the DLL, which, in turn, calls <b>DllGetClassObject</b>. </p>
<h5>Notes to Implementers</h5>
<p>
You need to implement <b>DllGetClassObject</b> in (and export it from) DLLs that support the OLE Component Object Model.</p>
<h4>Example</h4>
<p>
Following is an example (in C++) of an implementation of <b>DllGetClassObject</b>. In this example, <b>DllGetClassObject</b> creates a class object and calls its <b>QueryInterface </b>method to retrieve a pointer to the interface requested in <i>riid</i>. The implementation safely releases the reference it holds to the <a href="if_a2e_9mk9.htm"><b>IClassFactory</b></a> interface because it returns a reference-counted pointer to <b>IClassFactory</b> to the caller.</p>
<pre><code>HRESULT_export  PASCAL DllGetClassObject 
        (REFCLSID rclsid, REFIID riid, LPVOID * ppvObj) 
{ 
    HRESULT hres = E_OUTOFMEMORY; 
    *ppvObj = NULL; 
 
    CClassFactory *pClassFactory = new CClassFactory(rclsid); 
    if (pClassFactory != NULL)   { 
        hRes = pClassFactory-&gt;QueryInterface(riid, ppvObj); 
        pClassFactory-&gt;Release(); 
    } 
    return hRes; </code></pre>
<p>
</p>
<p>
</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api1_6yb8.htm"><b>CoGetClassObject</b></a>,<b> <a href="api2_531z.htm">DllCanUnloadNow</a></b> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDropSource::QueryContinueDrag</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_idropsource_querycontinuedrag"></a>IDropSource::QueryContinueDrag</h2>
<p>
Determines whether a drag-and-drop operation should be continued, canceled, or completed. You do not call this method directly. The OLE <a href="api2_5now.htm"><b>DoDragDrop</b></a> function calls this method during a drag-and-drop operation.</p>
<pre><code><b>HRESULT QueryContinueDrag(
  BOOL</b><i> fEscapePressed</i><b>,  </b>//Status of escape key since previous call
<b>  DWORD</b><i> grfKeyState     </i>//Current state of keyboard modifier keys
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>fEscapePressed</i></dt>
<dd>
[in] Specifies whether the Esc key has been pressed since the previous call to <b>IDropSource::QueryContinueDrag</b> or to <a href="api2_5now.htm"><b>DoDragDrop</b></a> if this is the first call to <b>QueryContinueDrag</b>. A TRUE value indicates the end user has pressed the escape key; a FALSE value indicates it has not been pressed.</dd>
<dt>
<i>grfKeyState</i></dt>
<dd>
[in] Current state of the keyboard modifier keys on the keyboard. Valid values can be a combination of any of the flags MK_CONTROL, MK_SHIFT, MK_ALT, MK_BUTTON, MK_LBUTTON, MK_MBUTTON, and MK_RBUTTON.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return values E_UNEXPECTED and E_OUTOFMEMORY, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The drag operation should continue. This result occurs if no errors are detected, the mouse button starting the drag-and-drop operation has not been released, and the Esc key has not been detected.</dd>
<dt>
DRAGDROP_S_DROP</dt>
<dd>
The drop operation should occur completing the drag operation. This result occurs if <i>grfKeyState</i> indicates that the key that started the drag-and-drop operation has been released.</dd>
<dt>
DRAGDROP_S_CANCEL</dt>
<dd>
The drag operation should be canceled with no drop operation occurring. This result occurs if <i>fEscapePressed</i> is TRUE, indicating the Esc key has been pressed.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <a href="api2_5now.htm"><b>DoDragDrop</b></a> function calls <b>IDropSource::QueryContinueDrag</b> whenever it detects a change in the keyboard or mouse button state during a drag-and-drop operation. <b>IDropSource::QueryContinueDrag</b> must determine whether the drag-and-drop operation should be continued, canceled, or completed based on the contents of the parameters <i>grfKeyState</i> and <i>fEscapePressed</i>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in oleidl.h.</p>
<h4>See Also</h4>
<p>
<a href="api2_5now.htm"><b>DoDragDrop</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOleLink::GetSourceDisplayName</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_iolelink_getsourcedisplayname"></a>IOleLink::GetSourceDisplayName</h2>
<p>
Retrieves the display name of the link source of the linked object.</p>
<pre><code><b>HRESULT GetSourceDisplayName(
  LPOLESTR</b><i> *ppszDisplayName  </i>//Address of output variable that 
                             // receives a pointer to the display name 
                             // string for the link source
<b>);</b>
 </code></pre>
<h4>Parameter</h4>
<dl>
<dt>
<i>ppszDisplayName</i></dt>
<dd>
[out] Address of <b>LPOLESTR</b> pointer variable that receives a pointer to the zero-terminated wide character string (two bytes per character) containing the display name of the link source. If an error occurs, *<i>ppszDisplayName</i> is set to NULL; otherwise, the implementation must use <a href="if_f2n_3twj.htm"><b>IMalloc::Alloc</b></a> to allocate the string returned in *<i>ppszDisplayName</i>, and the caller is responsible for calling <a href="if_f2n_1smd.htm"><b>IMalloc::Free</b></a> to free it. Both caller and called use the allocator returned by <a href="api1_2qlf.htm"><b>CoGetMalloc</b></a>. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return value E_FAIL, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
The display name was successfully retrieved.</dd>
<dt>
<a href="api2_0ad4.htm"><b>CreateBindCtx</b></a> and <a href="if_f2n_1tb9.htm"><b>IMoniker::GetDisplayName</b></a> errors</dt>
<dd>
Retrieving the display name requires calling these functions; therefore, this method may return errors generated by these functions.
</dd>
</dl>
<h4>Remarks</h4>
<h5>Notes to Callers</h5>
<p>
Your container application can call <b>IOleLink::GetSourceDisplayName</b> in order to display the current source of a link. </p>
<p>
The current source of a link is displayed in the Links dialog box. If you use the <a href="api3_4yib.htm"><b>OleUIEditLinks</b></a> function to display the Links dialog box, you must implement the <a href="if_o_9bg2.htm"><b>IOleUILinkContainer</b></a> interface. The dialog box calls your implementations of <b>IOleUILinkContainer::GetLinkSource</b> to get the string it should display. Your implementation of that method can call <b>IOleLink::GetSourceDisplayName</b>. </p>
<h5>Notes on Provided Implementation</h5>
<p>
The linked object's implementation of <b>IOleLink::GetSourceDisplayName</b> calls <b>IOleLink::GetSourceMoniker</b> to get the link source moniker, and then calls <a href="if_f2n_1tb9.htm"><b>IMoniker::GetDisplayName</b></a> to get that moniker's display name. This operation is potentially expensive because it might require binding the moniker. All of the system-supplied monikers can return a display name without binding, but there is no guarantee that other moniker implementations can. Instead of making repeated calls to <b>IOleLink::GetSourceDisplayName</b>, your container application can cache the name and update it whenever the link source is bound.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in oleidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_o_7ew5.htm"><b>IOleLink::SetSourceDisplayName</b></a>, <a href="if_o_9bg2.htm"><b>IOleUILinkContainer</b></a>, <a href="if_f2n_1tb9.htm"><b>IMoniker::GetDisplayName</b></a>, <a href="api3_4yib.htm"><b>OleUIEditLinks</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OleLoadPicture</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_oleloadpicture"></a>OleLoadPicture</h1>
<p>
Creates a new picture object and initializes it from the contents of a stream. This is equivalent to calling <code>OleCreatePictureIndirect(NULL, ...)</code> followed by <b>IPersistStream::Load</b>.</p>
<pre><code><b>STDAPI OleLoadPicture(
  IStream *</b><i> pStream</i><b>,</b>
<b>               </b>//Pointer to the stream that contains picture's data
<b>  LONG</b><i> lSize</i><b>,  </b>//Number of bytes read from the stream
<b>  BOOL</b><i> fRunmode</i><b>,</b>
<b>               </b>//The opposite of the initial value of the picture's 
               // property
<b>  REFIID</b><i> riid</i><b>, </b>//Reference to the identifier of the interface 
               // describing the type of interface pointer to return
<b>  VOID</b><i> ppvObj  </i>//Address of output variable that receives interface 
               // pointer requested in <i>riid</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pStream</i></dt>
<dd>
[in] Pointer to the stream that contains the picture's data.</dd>
<dt>
<i>lSize</i></dt>
<dd>
[in] Number of bytes that should be read from the stream, or zero if the entire stream should be read.</dd>
<dt>
<i>fRunmode</i></dt>
<dd>
[in] The opposite of the initial value of the <b>KeepOriginalFormat</b> property. If TRUE, <b>KeepOriginalFormat</b> is set to FALSE and vice-versa.</dd>
<dt>
<i>riid</i></dt>
<dd>
[in] Reference to the identifier of the interface describing the type of interface pointer to return in <i>ppvObj</i>.</dd>
<dt>
<i>ppvObj</i></dt>
<dd>
[out] Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppvObj</i> contains the requested interface pointer on the storage of the object identified by the moniker. If *<i>ppvObj</i> is non-NULL, this function calls <b>IUnknown::AddRef</b> on the interface; it is the caller's responsibility to call <b>IUnknown::Release.</b> If an error occurs, *<i>ppvObj</i> is set to NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The picture was created successfully.</dd>
<dt>
E_POINTER</dt>
<dd>
The address<i> </i>in <i>pStream</i> or <i>ppvObj</i> is not valid. For example, either may be NULL.</dd>
<dt>
E_NOINTERFACE</dt>
<dd>
The object does not support the interface specified in <i>riid</i>.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The stream must be in BMP (bitmap), WMF (metafile), or ICO (icon) format. A picture object created using <b>OleLoadPicture</b> always has ownership of its internal resources (<i>fOwn</i>==TRUE is implied).</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in olectl.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in olepro32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api3_22wk.htm"><b>OleCreatePictureIndirect</b></a>, <a href="structs_3a5f.htm"><b>PICTDESC</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

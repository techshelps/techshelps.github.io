<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Distributed Link Tracking Service</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_com_distributed_link_tracking_service"></a>Distributed Link Tracking Service</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The distributed link-tracking service in Windows NT 5.0 is based on a pair of link source IDs (LSIDs). An LSID identifies a link source file within a domain. Each link-source file has one LSID which identifies its current, or "revised", location, and one LSID which identifies its "birth" location — the location it was at when the first link was made to it. Thus, when the first link is created to a file, its birth and revised LSIDs are equal. The birth LSID never changes as long as the file remains within the same domain.</p>
<p>
When a link source is moved within a volume, its LSIDs remain unchanged. When a link source is moved to a new volume, however, it is given a new revised-LSID, though its birth-LSID again remains unchanged. As a link source is moved from volume to volume within a domain, its revised-LSID continues to change.</p>
<p>
To track a link source's most recent revised-LSID, an entry is stored in the Domain Controller (DC). This entry maps a link source's birth-LSID to its revised-LSID.</p>
<p>
Another way for a link source to be moved is for its host volume itself to be moved. For example, an external hard drive may be removed from one machine and connected to another. When this occurs, the file's revised-LSID remains unchanged. Link clients can still use this LSID to find the link source at its new location.</p>
<p>
When a link client is created, it stores both of the link-source LSIDs. In the typical case, a link client will go directly to its source, reaching it by name. If the link source has been moved, the link client can pass the LSIDs to the link-tracking service on the local machine. The link-tracking service then attempts to find the link source, and returns the current path and updated LSIDs to the client. The link-tracking service searches for the link source as follows:
<ul>
<li>
If the link source has been moved to another location on the same machine, the client can find the source using the revised-LSID that it previously stored. Even though a link source gets a new, revised-LSID when it is moved to a new volume, if the move is to another volume on the same machine, the new, revised-LSID is similar enough that the link source can be found using the client's older revised-LSID. The NTFS 5.0 file system makes it possible for the link-tracking service to search a volume for a revised-LSID very quickly.</li>
<li>
If the link source has been moved to another machine in the same NT domain, the link-tracking service can consult the DC to find the latest revised-LSID, given the birth-LSID. From the revised-LSID, the link-tracking service can determine the machine on which the link source is now located. The service then finds the file's new name on that machine.</li>
<li>
Once a link source is found, the link-tracking service returns the link source's latest LSIDs, and a path to the link source. If the link source was found on the local machine, the returned path is in the form <i>drive</i>:\<i>path</i>. If the link source was found on a remote machine, the returned path is in UNC form. It is possible to describe the link source with multiple UNC paths, since it is possible to reach the file under multiple remote machine shares. In such an event, the link tracking service returns what it deems as the best UNC path. When determining the best path, preference is given to that path which provides the most access, (for example, Read/Write provides greater access than Read-only), the most coverage (for example, C:\ covers more than C:\DOCS), and the most visibility (for example, a share named CROOT provides more visibility than a share named CROOT$).</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

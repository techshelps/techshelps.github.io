<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IEnumOleDocumentViews</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_ienumoledocumentviews"></a>IEnumOleDocumentViews</h1>
<p>
The <b>IEnumOleDocumentViews</b> interface is used to enumerate the views supported by a document object. <b>IEnumOleDocumentViews</b> has the same methods as all enumerator interfaces: <b>Next</b>, <b>Skip</b>, <b>Reset</b>, and <b>Clone</b>. For general information on these methods, see <a href="if_a2e_8yns.htm"><b>IEnum<i>XXXX</i></b></a>.</p>
<h4>When to Implement </h4>
<p>
Implement <b>IEnumOleDocumentViews</b> on enumerator objects associated with document objects that support more than one view of their data.</p>
<h4>When to Use</h4>
<p>
Use the <b>IEnumOleDocumentViews</b> interface to enumerate all the views supported by a document object. The usual procedure is to first call <a href="if_o_5cj7.htm"><b>IOleDocument::EnumViews</b></a>. If the document object supports only one view, <b>EnumViews</b> will obtain a pointer to that view. If the document object supports two or more views, <b>EnumViews</b> will obtain a pointer to <b>IEnumOleDocumentViews.</b> Using this pointer, the container can then ask the document object to enumerate the views it supports.</p>
<p>
The prototypes of the methods are as follows:</p>
<pre><code><b>HRESULT Next(
  ULONG</b><i> cViews</i><b>,                 </b>
<b>  IOleDocumentView *</b><i> rgpView</i><b>,</b>   
<b>  [out]ULONG *</b><i> pcFetched        </i>
<b>);</b>
 
<b>HRESULT Skip(</b>
<b>  [in]ULONG</b><i> cViews  </i>
<b>);</b>
 
<b>HRESULT Reset(void)</b>
<b> </b>
<b>HRESULT Clone(</b>
<b>  [out]IEnumOleDocumentViews **</b><i> ppenum  </i>
<b>);</b>
 </code></pre>
<h4>Remarks</h4>
<dl>
<dt>
<b>IEnumOleDocumentViews::Next</b></dt>
<dd>
Enumerates the next <i>cViews </i>elements in the enumerator's list, returning them in <i>rgpView, </i>along with the actual number of enumerated elements in <i>pcFetched. </i>The enumerator object is responsible for calling <b>IOleDocumentView::AddRef</b>, and the caller is responsible for calling <b>IOleDocumentView::Release</b>,<i> </i>on each pointer returned in <i>rgpView</i>.
<p>
E_NOTIMPL is not allowed as a return value. If an error value is returned, no entries in the <i>rgpView </i>array are valid and no calls to <b>Release</b> are required.

<dl>
<dt>
<i>cViews</i></dt>
<dd>
[in] The number of <b>IOleDocumentView</b> pointers to be written to the array pointed to by <i>rgpView</i>. If <i>pcFetched </i>is NULL, this argument must be 1.</dd>
<dt>
<i>rgpView</i></dt>
<dd>
[out, max_is(cViews)] Pointer to a caller-allocated <b>IOleDocumentView</b><i> * </i>array of size <i>cViews, </i>to which the enumerated connection points are written. The caller is responsible for calling <b>IOleDocumentView::Release</b> through each pointer enumerated into the array once this method returns successfully. If <i>cViews </i>is greater than 1, the caller must also pass a non-NULL pointer passed to <i>pcFetched </i>to know how many pointers to release.</dd>
<dt>
<i>pcFetched</i></dt>
<dd>
[out] Pointer to the actual number of views enumerated in <i>rgpView</i>. This argument can be NULL, in which case the <i>cViews </i>argument must be 1.</dd>
</dl>
</dd>
<dt>
<b>IEnumOleDocumentViews::Skip</b></dt>
<dd>
Instructs the enumerator to skip the next <i>cViews </i>elements in the enumeration so that the next call to <b>IEnumOleDocumentViews::Next</b> will not return those elements.
<dl>
<dt>
<i>cViews</i></dt>
<dd>
[in] Number of elements to skip in the enumeration.</dd>
</dl>
</dd>
<dt>
<b>IEnumOleDocumentViews::Reset</b></dt>
<dd>
Instructs the enumerator to position itself at the beginning of the list of elements. There is no guarantee that the same set of elements will be enumerated on each pass through the list: it depends on the collection being enumerated. It is too expensive for some collections, such as files in a directory, to maintain this condition.</dd>
<dt>
<b>IEnumOleDocumentViews::Clone</b></dt>
<dd>
Creates another view enumerator with the same state as the current enumerator, which iterates over the same list. This makes it possible to record a point in the enumeration sequence in order to return to that point at a later time.
<dl>
<dt>
<i>ppEnum</i></dt>
<dd>
[out] Pointer to the <b>IEnumOleDocumentViews</b> interface pointer on the newly created enumerator. The caller must release this enumerator separately from the one from which it was cloned.</dd>
</dl>
</dd>
</dl>
<p>
</p>
<p>
</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in docobj.h.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPropertyStorage::Commit</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_ipropertystorage_commit"></a>IPropertyStorage::Commit</h2>
<p>
Saves any changes made to a property storage object to the parent storage object.</p>
<pre><code><b>HRESULT Commit(
  DWORD </b><i> grfCommitFlags  </i>//Flags specifying conditions for the commit
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>grfCommitFlags</i></dt>
<dd>
[in] Flags specifying the conditions under which the commit is to be performed. Specific flags and their meanings are described in the following Remarks section.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return value E_UNEXPECTED, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
The changes were saved successfully.</dd>
<dt>
STG_E_NOTCURRENT</dt>
<dd>
STGC_ONLYIFCURRENT was specified, but the optimistic concurrency control failed.</dd>
<dt>
STG_E_ACCESSDENIED</dt>
<dd>
The requested access to the property storage object has been denied.</dd>
<dt>
STG_E_INSUFFICIENTMEMORY</dt>
<dd>
There is not sufficient memory to perform this operation.</dd>
<dt>
STG_E_INVALIDPARAMETER</dt>
<dd>
One or more flags specified in <i>grfCommitFlags</i> is invalid.
</dd>
</dl>
<h4>Remarks</h4>
<p>
As in <b>IStorage::Commit</b>, ensures that any changes made to a property storage object are reflected in the parent storage.</p>
<p>
In direct mode in the compound file implementation, this call causes any changes currently buffered up in memory to be flushed to the underlying property stream. In the compound file implementation for non-simple property sets, <a href="if_r2z_11h0.htm"><b>IStorage::Commit</b></a> is also called on the underlying substorage object with the passed <i>grfCommitFlags</i> parameter. </p>
<p>
In transacted mode, this method causes the changes to be permanently reflected in the persistent image of the storage object. The changes that are committed must have been made to this property set since it was opened or since the last commit on this opening of the property set. One could think of the action of committing as publishing the changes that this level currently knows about one more layer outwards. Of course, this is still subject to any outer level transaction that may be present on the object in which this property set is contained. Write permission must be specified when the property set is opened (through <b>IPropertySetStorage</b>) on the property set opening for the commit operation to succeed.</p>
<p>
If the commit operation fails for any reason, the state of the property storage object is as it was before the commit.</p>
<p>
This call has no effect on existing storage- or stream-valued properties opened from this property storage, but it does commit them.</p>
<p>
Valid values for the <i>grfCommitFlags</i> parameter are as follows:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>Value</th>
<th align=left width=64%>Meaning</th>
</tr>
<tr valign=top>
<td width=36%>STGC_DEFAULT</td>
<td width=64%>Commit per the usual transaction semantics. Last writer wins. This flag may not be specified with other flag values.</td>
</tr>
<tr valign=top>
<td width=36%>STGC_ONLYIFCURRENT</td>
<td width=64%>Commit the changes only if the current persistent contents of the property set are the ones on which the changes about to be committed are based. That is, do not commit changes if the contents of the property set have been changed by a commit from another opening of the property set. The error STG_E_NOTCURRENT is returned if the commit does not succeed for this reason.</td>
</tr>
<tr valign=top>
<td width=36%>STGC_OVERWRITE</td>
<td width=64%>Only useful when committing a transaction which has no further outer nesting level of transactioning, though legal in all cases. Indicates that the caller is willing to take some risk of data corruption at the expense of a decreased usage of disk on the destination volume. This flag is potentially useful in low disk space scenarios, though should be used only with caution.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_p2q_6xd1.htm"><b>IPropertyStorage::ReadMultiple</b></a>, <a href="if_r2z_11h0.htm"><b>IStorage::Commit</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

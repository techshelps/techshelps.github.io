<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using IProvideClassInfo</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_using_iprovideclassinfo"></a>Using IProvideClassInfo</h2>
<p>
A connectable object can offer the <b>IProvideClassInfo[<i>x</i>]</b> interfaces so its clients can easily examine its type information. See <a href="comext_4gtq.htm">Providing Class Information</a> chapter for more information.</p>
<p>
This capability is important when dealing with outgoing interfaces, which, by definition, are defined by an object but implemented by a client on its own sink object. In some cases, an outgoing interface is known at compile time to both the connectable object and the sink object; such is the case with <a href="if_p2q_4gh7.htm"><b>IPropertyNotifySink</b></a>.</p>
<p>
In other cases, however, only the connectable object knows its outgoing interface definitions at compile time. In these cases, the client must obtain the type information for the outgoing interface so it can dynamically provide a sink supporting the right entry points.</p>
<p>
First, as described above, the client can enumerate the connection points and can then call <b>IConnectionPoint::GetConnectionInterface</b> for each connection point to obtain the IIDs of outgoing interfaces supported by the connectable object.</p>
<p>
Second, the client queries the connectable object for one of the <b>IProvideClassInfo[<i>x</i>]</b> interfaces. Third, the client calls methods in these interfaces to get the type information for the outgoing interface. Fourth, the client creates a sink object supporting the outgoing interface. Finally, the process continues as described above with the client calling <b>IConnectionPoint::Advise</b> to connect its sink to the connection point.</p>
<p>
In the type information, the attribute <b>source</b> marks an <b>interface</b> or <b>dispinterface</b> listed under a <b>coclass</b> as an outgoing interface. Those listed without this attribute are considered incoming interfaces.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMoniker::Reduce</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_imoniker_reduce"></a>IMoniker::Reduce</h2>
<p>
Returns a reduced moniker; that is, another moniker that refers to the same object as this moniker but can be bound with equal or greater efficiency. </p>
<pre><code><b>HRESULT Reduce(
  IBindCtx</b><i> *pbc</i><b>,         </b>//Pointer to bind context to be used
<b>  DWORD</b><i> dwReduceHowFar</i><b>,  </b>//How much reduction should be done
<b>  IMoniker</b><i> **ppmkToLeft</i><b>, </b>//Address of output variable that receives 
                         //the IMoniker interface pointer to the 
                         //moniker to the left in the composite
<b>  IMoniker</b><i> **ppmkReduced </i>//Address of output variable that receives 
                         //the IMoniker interface pointer to the 
                         //reduced moniker
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pbc</i></dt>
<dd>
[in] Pointer to the <b>IBindCtx</b> interface on the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment. For more information, see <a href="if_a2e_06bc.htm"><b>IBindCtx</b></a>. </dd>
<dt>
<i>dwReduceHowFar</i></dt>
<dd>
[in] DWORD that specifies how far this moniker should be reduced. This parameter must be one of the values from the <a href="enums_3w6d.htm"><b>MKRREDUCE</b></a> enumeration. </dd>
<dt>
<i>ppmkToLeft</i></dt>
<dd>
[in, out] On entry, address of <b>IMoniker</b>* pointer variable that contains the interface pointer to moniker to the left of this moniker. This parameter is primarily used by moniker implementers to enable cooperation between the various components of a composite moniker; moniker clients can usually pass NULL.
<p>
On return, *<i>ppmkToLeft</i> is usually set to NULL, indicating no change in the original moniker to the left. In rare situations, *<i>ppmkToLeft</i> indicates a moniker, indicating that the previous moniker to the left should be disregarded and the moniker returned through *<i>ppmkToLeft</i> is the replacement. In such a situation, the implementation must call <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a> on the old moniker to the left of this moniker and must call <a href="if_r2z_3rja.htm"><b>IUnknown::AddRef</b></a> on the new returned moniker; the caller must release it later. If an error occurs, the implementation can either leave the interface pointer unchanged or set it to NULL.
</dd>
<dt>
<i>ppmkReduced</i></dt>
<dd>
[out] Address of <b>IMoniker</b>* pointer variable that receives the interface pointer to the reduced form of this moniker, which can be NULL if an error occurs or if this moniker is reduced to nothing. If this moniker cannot be reduced, *<i>ppmkReduced</i> is simply set to this moniker and the return value is MK_S_REDUCED_TO_SELF. If *<i>ppmkReduced</i> is non-NULL, the implementation must call <b>IUnknown::AddRef</b> on the the new moniker; it is the caller's responsibility to call <b>IUnknown::Release</b>. (This is true even if *<i>ppmkReduced</i> is set to this moniker.)
</dd>
</dl>
<h4>Return Values</h4>
<p>
The method supports the standard return values E_UNEXPECTED and E_OUTOFMEMORY, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
This moniker was reduced.</dd>
<dt>
MK_S_REDUCED_TO_SELF</dt>
<dd>
This moniker could not be reduced any further, so <i>ppmkReduced</i> indicates this moniker.</dd>
<dt>
MK_E_EXCEEDEDDEADLINE</dt>
<dd>
The operation could not be completed within the time limit specified by the bind context's <a href="structs_2b1v.htm"><b>BIND_OPTS</b></a> structure.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>IMoniker::Reduce</b> is intended for the following uses:
<ul>
<li>
It enables the construction of user-defined macros or aliases as new kinds of moniker classes. When reduced, the moniker to which the macro evaluates is returned.</li>
<li>
It enables the construction of a kind of moniker that tracks data as it moves about. When reduced, the moniker of the data in its current location is returned.</li>
<li>
On file systems that support an identifier-based method of accessing files which is independent of file names; a file moniker could be reduced to a moniker which contains one of these identifiers.</li>
</ul>
<p>
The intent of the <a href="enums_3w6d.htm"><b>MKRREDUCE</b></a> flags passed in the <i>dwReduceHowFar</i> parameter is to provide the ability to programmatically reduce a moniker to a form whose display name is recognizable to the user. For example, paths in the file system, bookmarks in word-processing documents, and range names in spreadsheets are all recognizable to users. In contrast, a macro or an alias encapsulated in a moniker are not recognizable to users.</p>
<h5>Notes to Callers</h5>
<p>
The scenarios described above are not currently implemented by the system-supplied moniker classes. </p>
<p>
You should call <b>IMoniker::Reduce</b> before comparing two monikers using the <a href="if_f2n_7mp8.htm"><b>IMoniker::IsEqual</b></a> method, because a reduced moniker is in its most specific form. <b>IMoniker::IsEqual</b> may return S_FALSE on two monikers before they are reduced and return S_OK after they are reduced. </p>
<h5>Notes to Implementers</h5>
<p>
If the current moniker can be reduced, your implementation must not reduce the moniker in-place. Instead, it must return a new moniker that represents the reduced state of the current one. This way, the caller still has the option of using the non-reduced moniker (for example, enumerating its components). Your implementation should reduce the moniker <i>at least</i> as far as is requested.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_f2n_7mp8.htm"><b>IMoniker::IsEqual</b></a>, <a href="enums_3w6d.htm"><b>MKRREDUCE</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IBindCtx::GetObjectParam</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_ibindctx_getobjectparam"></a>IBindCtx::GetObjectParam&nbsp;&nbsp;&nbsp;&nbsp;</h2>
<p>
Retrieves the pointer associated with the specified key in the bind context's string-keyed table of pointers.</p>
<pre><code><b>HRESULT GetObjectParam(
  LPOLESTR</b><i> pszKey</i><b>,  </b>//Pointer to the key to be used
<b>  IUnknown</b><i> **ppunk  </i>//Address of output variable that receives the 
                    // IUnknown interface pointer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pszKey</i></dt>
<dd>
[in] Pointer to a zero-terminated wide character string (two bytes per character) containing the key to search for. Key string comparison is case-sensitive.</dd>
<dt>
<i>ppunk</i></dt>
<dd>
[out] Address of <b>IUnknown</b>* pointer variable that receives the interface pointer to the object associated with <i>pszKey</i>. When successful, the implementation calls <a href="if_r2z_3rja.htm"><b>IUnknown::AddRef</b></a> on *<i>ppunk</i>. It is the caller's responsibility to call <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a>. If an error occurs, the implementation sets *<i>ppunk</i> to NULL. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return value E_FAIL, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The pointer associated with the specified key was successfully returned.
</dd>
</dl>
<h4>Remarks</h4>
<p>
A bind context maintains a table of interface pointers, each associated with a string key. This enables communication between a moniker implementation and the caller that initiated the binding operation. One party can store an interface pointer under a string known to both parties so that the other party can later retrieve it from the bind context. </p>
<p>
The pointer this method retrieves must have previously been inserted into the table using the <a href="if_a2e_8eul.htm"><b>IBindCtx::RegisterObjectParam</b></a> method. </p>
<h5>Notes to Callers</h5>
<p>
Those writing a new moniker class (through an implementation of <b>IMoniker</b>) and some moniker clients (objects using a moniker to bind to an object) can call <a href="#_com_ibindctx_getobjectparam"><b>IBindCtx::GetObjectParam</b></a>. </p>
<p>
Objects using monikers to locate other objects can call this method when a binding operation fails to get specific information about the error that occurred. Depending on the error, it may be possible to correct the situation and retry the binding operation. See <a href="if_a2e_8eul.htm"><b>IBindCtx::RegisterObjectParam</b></a> for more information. </p>
<p>
Moniker implementations can call this method to deal with situations where a caller initates a binding operation and requests specific information. By convention, the implementer should use key names that begin with the string form of the CLSID of a moniker class (see the <a href="api4_4hwk.htm"><b>StringFromCLSID</b></a> function). </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_a2e_8eul.htm"><b>IBindCtx::RegisterObjectParam</b></a>, <a href="if_a2e_1iul.htm"><b>IBindCtx::EnumObjectParam</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

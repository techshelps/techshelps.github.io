<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IExternalConnection</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_iexternalconnection"></a>IExternalConnection</h1>
<p>
The <b>IExternalConnection</b> interface manages a server object's count of marshaled, or external, connections. A server that maintains such a count can detect when it has no external connections and shut itself down in an orderly fashion. </p>
<p>
<b>IExternalConnection</b> is most commonly implemented on server objects to enable the safe and orderly shutdown of a link to an embedded object following a silent update. Objects that do not implement <b>IExternalConnection</b> risk losing data in such a situation: when the final link client releases the embedded (server) object, the last external connection on the object's stub manager is released, causing the stub manager to release its pointers to interfaces on the embedded object and initiate shutdown of the object. At this point the server object calls <a href="if_o_5v78.htm"><b>IOleClientSite::SaveObject</b></a> on the link container, and the link container's return call to <a href="if_p2q_19et.htm"><b>IPersistStorage::Save</b></a> fails, because the stub manager no longer has a pointer to the embedded object. Any unsaved changes to the server object's data would then be lost. </p>
<p>
If the server object implements <b>IExternalConnection</b>, however, its stub manager will not release its connection to the object when the last external connection is released. Instead, it will stay connected until the object is ready to destroy itself. </p>
<p>
In standard marshaling, COM calls <a href="if_a2e_344u.htm"><b>IExternalConnection::AddConnection</b></a> on the object when the object is first marshaled to increment its count of external connections. The stub manager calls the methods of <b>IExternalConnection</b> on the object as subsequent external connections are obtained and released. When the object's count of external connections goes to zero, the object can save its data and then revoke itself from the running object table and do whatever else is necessary to reduce its object reference count to zero. </p>
<p>
An object that implements <b>IExternalConnection</b> should explicitly call <a href="api1_4mk4.htm"><b>CoDisconnectObject</b></a> on itself when its external reference count drops to 0. This call will cause the stub manager to call <a href="if_r2z_59np.htm"><b>Release</b></a> on the object so the object can destroy itself. </p>
<h4>When to Implement</h4>
<p>
Implement <b>IExternalConnection</b> on server objects that need to detect marshaled connections to themselves from clients that are either out-of-process or residing in another apartment in the same process. </p>
<p>
Implement <b>IExternalConnection</b> also on objects that need to keep the stub manager in memory independent of the proxy count. For example, as explained above, objects that can be linked and embedded should implement <b>IExternalConnection</b> to keep a container application running during a silent update. </p>
<p>
A class factory object can implement <b>IExternalConnection</b> to keep running even when no clients are requesting or using the objects it creates. </p>
<p>
An in-place container should also implement <b>IExternalConnection</b> to keep itself running while contained objects save their data before shutting down.</p>
<h4>When to Use</h4>
<p>
You do not normally call the methods of <b>IExternalConnection</b> from your own code. In nearly every case, COM makes these calls for you. The only time to use <b>IExternalConnection</b> from your own code is when you write a custom marshaler that implements its own stub manager functionality. </p>
<h4>Methods in VTable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%><a href="if_r2z_9dwu.htm">IUnknown</a> Methods</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_7fvp.htm"><b>QueryInterface</b></a></td>
<td width=52%>Returns pointers to supported interfaces.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_3rja.htm"><b>AddRef</b></a></td>
<td width=52%>Increments reference count.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_59np.htm"><b>Release</b></a></td>
<td width=52%>Decrements reference count.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>IExternalConnection Methods</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><a href="if_a2e_344u.htm"><b>AddConnection</b></a></td>
<td width=52%>Increments count of external locks.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_a2e_0372.htm"><b>ReleaseConnection</b></a></td>
<td width=52%>Decrements count of external locks.</td>
</tr>
</table><br>
<p>
</p>
<p>
</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_o_9778.htm"><b>IOleObject</b></a>, <a href="api1_5ajw.htm"><b>CoLockObjectExternal</b></a>, <a href="api1_4mk4.htm"><b>CoDisconnectObject</b></a></p>
<p>&nbsp;</p></body>
</HTML>

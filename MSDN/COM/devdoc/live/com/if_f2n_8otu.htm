<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMoniker</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_imoniker"></a>IMoniker</h1>
<p>
The <b>IMoniker</b> interface contains methods that allow you to use a moniker object, which contains information that uniquely identifies a COM object. An object that has a pointer to the moniker object's <b>IMoniker</b> interface can locate, activate, and get access to the identified object without having any other specific information on where the object is actually located in a distributed system. </p>
<p>
Like a path to a file in a file system, a moniker contains information that allows a COM object to be located and activated. Monikers can identify any type of COM object, from a document object stored in a file to a selection within an embedded object. COM provides a set of moniker classes that allow you to create moniker objects identifying the objects most commonly found in the system. For example, there might be an object representing a range of cells in a spreadsheet which is itself embedded in a text document stored in a file. In a distributed system, this object's moniker would identify the location of the object's system, the file's physical location on that system, the storage of the embedded object within that file, and, finally, the location of the range of cells within the embedded object.</p>
<p>
A moniker object supports the <b>IMoniker</b> interface, which is derived from the <a href="if_p2q_02b1.htm"><b>IPersistStream</b></a> interface, and uniquely identifies a single object in the system. Once an object providing a moniker has created the moniker object, this information cannot be changed within that object. If the moniker provider changes the information, it can only do so by creating a new moniker object, which would then uniquely identify the object in question. </p>
<p>
Monikers have two important capabilites: 
<ul>
<li>
Monikers can be saved to a persistent storage. When a moniker is loaded back into memory, it still identifies the same object. </li>
<li>
Monikers support an operation called "binding," which is the process of locating the object named by the moniker, activating it (loading it into memory) if it is not already active, and returning a pointer to a requested interface on that object. </li>
</ul>
<p>
Monikers are used as the basis for linking in COM. A linked object contains a moniker that identifies its source. When the user activates the linked object to edit it, the moniker is bound; this loads the link source into memory. </p>
<h5>When to Implement</h5>
<p>
Implement <b>IMoniker</b> only if you are writing a new moniker class. This is necessary only if you need to identify objects that cannot be identified using one of the COM-supplied moniker classes described below.</p>
<p>
The COM-supplied moniker classes are sufficient for most situations. Before considering writing your own moniker class, you should make sure that your requirements cannot be satisified by these classes.</p>
<p>
If you decide you need to write your own implementation of <b>IMoniker</b>, you must also implement the <a href="if_r2z_1owx.htm"><b>IROTData</b></a> interface on your moniker class. This interface allows your monikers to be registered with the Running Object Table (ROT). </p>
<h5>When to Use</h5>
<p>
Two kinds of objects call the methods of <b>IMoniker</b>:
<ul>
<li>
A component that contains one or more objects to be identified with a moniker and must provide the moniker to other objects</li>
<li>
A client object that must bind to the object identified by the moniker</li>
</ul>
<p>
The component providing a moniker makes it accessible to other objects. It is important to understand the differences between the various system-supplied moniker classes to know which are appropriate for a given object. COM also provides functions for creating monikers using the COM-supplied moniker classes. 
<ul>
<li>
<a href="if_f2n_43la.htm"><b>File monikers</b></a> — based on a path in the file system. File monikers can be used to identify objects that are saved as files. The associated creation function is <a href="api2_3tf6.htm"><b>CreateFileMoniker</b></a>. </li>
<li>
<a href="if_f2n_99ny.htm"><b>Item monikers</b></a> — based on a string that identifies an object in a container. Item monikers can be used to identify objects smaller than a file, such as embedded objects in a compound document and pseudo-objects (like a range of cells in a spreadsheet). The associated creation function is <a href="api2_1ktu.htm"><b>CreateItemMoniker</b></a>. </li>
<li>
<a href="if_f2n_09m6.htm"><b>Generic composite monikers</b></a> — consists of two or more monikers of arbitrary type that have been composed together. Generic composite monikers allow monikers of different classes to be used in combination. The associated creation function is <a href="api2_4zc5.htm"><b>CreateGenericComposite</b></a>. </li>
<li>
<a href="if_f2n_32um.htm"><b>Anti-monikers</b></a>— the inverse of file, item, or pointer monikers. Anti-monikers are used primarily for constructing relative monikers, which are analogous to relative path (such as "..\backup\report.old"), and which specify a location of an object <i>relative</i> to the location of another object). The associated creation function is <a href="api2_6vci.htm"><b>CreateAntiMoniker</b></a>. </li>
<li>
<a href="if_f2n_0pwu.htm"><b>Pointer monikers</b></a> — a non-persistent moniker that wraps an interface pointer to an object loaded in memory. Whereas most monikers identify objects that can be saved to persistent storage, pointer monikers identify objects that cannot. The associated creation function is <a href="api2_21iq.htm"><b>CreatePointerMoniker</b></a>. </li>
</ul>
<p>
A moniker provider must also implement other interfaces to allow the monikers it hands out to be bound. COM objects that commonly provide monikers are link sources. These include server applications that support linking and container applications that support linking to their embedded objects.</p>
<p>
Binding to an object means that a client uses a moniker to locate the object, activate it when necessary, and get a pointer to one of the active object's interfaces. The client of the moniker does not need to be aware of the class of the moniker — it must just get a pointer to the correct moniker's <b>IMoniker</b> interface. Monikers are used most often in this way by container applications that allow their documents to contain linked objects. However, link containers rarely call <b>IMoniker</b> methods directly. Instead, they generally manipulate linked objects through the default handler's implementation of the <a href="if_o_0r1n.htm"><b>IOleLink</b></a> interface, which calls the appropriate <b>IMoniker</b> methods as needed. 
<ul>
<li>
<a href="if_f2n_7ir2.htm"><b>Class monikers</b></a> — these represent an object class. Class monikers bind to the class object of the class for which they are created. The associated creation function is <a href="api2_4zc5.htm"><b>CreateClassComposite</b></a>. </li>
</ul>
<h4>Methods in Vtable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=40%><a href="if_r2z_9dwu.htm">IUnknown</a> Methods</th>
<th align=left width=60%>Description</th>
</tr>
<tr valign=top>
<td width=40%><a href="if_r2z_7fvp.htm"><b>QueryInterface</b></a></td>
<td width=60%>Returns pointers to supported interfaces.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_r2z_3rja.htm"><b>AddRef</b></a></td>
<td width=60%>Increments reference count.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_r2z_59np.htm"><b>Release</b></a></td>
<td width=60%>Decrements reference count.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=40%><a href="if_p2q_3lbo.htm">IPersist</a> Methods</th>
<th align=left width=60%>Description</th>
</tr>
<tr valign=top>
<td width=40%><a href="if_p2q_1yn8.htm"><b>GetClassID</b></a></td>
<td width=60%>Returns the object's CLSID.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=40%><a href="if_p2q_02b1.htm"><b>IPersistStream</b></a><b> Methods</b></td>
<td width=60%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=40%><a href="if_p2q_8lmh.htm"><b>IsDirty</b></a></td>
<td width=60%>Checks whether object has been modified.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_p2q_54f8.htm"><b>Load</b></a></td>
<td width=60%>Loads the object from a stream.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_p2q_3945.htm"><b>Save</b></a></td>
<td width=60%>Saves the object to a stream.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_p2q_9xko.htm"><b>GetSizeMax</b></a></td>
<td width=60%>Returns the buffer size needed to save the object.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=40%><b>IMoniker Methods</b></td>
<td width=60%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_7o6s.htm"><b>BindToObject</b></a></td>
<td width=60%>Binds to the object named by the moniker.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_1kx1.htm"><b>BindToStorage</b></a></td>
<td width=60%>Binds to the object's storage.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_79d1.htm"><b>Reduce</b></a></td>
<td width=60%>Reduces the moniker to simplest form.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_8cx4.htm"><b>ComposeWith</b></a></td>
<td width=60%>Composes with another moniker.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_44od.htm"><b>Enum</b></a></td>
<td width=60%>Enumerates component monikers.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_7mp8.htm"><b>IsEqual</b></a></td>
<td width=60%>Compares with another moniker.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_9uaw.htm"><b>Hash</b></a></td>
<td width=60%>Returns a hash value.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_62g7.htm"><b>IsRunning</b></a></td>
<td width=60%>Checks whether object is running.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_0k9x.htm"><b>GetTimeOfLastChange</b></a></td>
<td width=60%>Returns time the object was last changed.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_2zvp.htm"><b>Inverse</b></a></td>
<td width=60%>Returns the inverse of the moniker.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_9nu0.htm"><b>CommonPrefixWith</b></a></td>
<td width=60%>Finds the prefix that the moniker has in common with another moniker.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_30j3.htm"><b>RelativePathTo</b></a></td>
<td width=60%>Constructs a relative moniker between the moniker and another.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_1tb9.htm"><b>GetDisplayName</b></a></td>
<td width=60%>Returns the display name.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_6ecl.htm"><b>ParseDisplayName</b></a></td>
<td width=60%>Converts a display name into a moniker.</td>
</tr>
<tr valign=top>
<td width=40%><a href="if_f2n_4mr6.htm"><b>IsSystemMoniker</b></a></td>
<td width=60%>Checks whether moniker is one of the system-supplied types.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="api1_469e.htm"><b>BindMoniker</b></a>, <a href="api2_0ad4.htm"><b>CreateBindCtx</b></a>, <a href="api2_4zc5.htm"><b>CreateGenericComposite</b></a>, <a href="api2_3tf6.htm"><b>CreateFileMoniker</b></a>, <a href="api2_1ktu.htm"><b>CreateItemMoniker</b></a>, <a href="api2_6vci.htm"><b>CreateAntiMoniker</b></a>, <a href="api2_21iq.htm"><b>CreatePointerMoniker</b></a>, <a href="if_o_0r1n.htm"><b>IOleLink</b></a>, <a href="if_p2q_02b1.htm"><b>IPersistStream</b></a>, <a href="if_r2z_1owx.htm"><b>IROTData</b></a>, <b><u>IMoniker—</u></b><a href="if_f2n_32um.htm"><b>AntiMoniker Implementation</b></a>, <b><u>IMoniker—</u></b><a href="if_f2n_43la.htm"><b>File Moniker Implementation</b></a>, <b><u>IMoniker—</u></b><a href="if_f2n_99ny.htm"><b>Item Moniker Implementation</b></a>, <b><u>IMoniker—</u></b><a href="if_f2n_09m6.htm"><b>Generic Composite Moniker Implementation</b></a>, <b><u>IMoniker—</u></b><a href="if_f2n_0pwu.htm"><b>Pointer Moniker Implementation</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

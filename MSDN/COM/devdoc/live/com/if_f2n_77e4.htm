<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IGlobalInterfaceTable::GetInterfaceFromGlobal</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_iglobalinterfacetable_getinterfacefromglobal"></a>IGlobalInterfaceTable::GetInterfaceFromGlobal</h2>
<p>
<span style=color:#FF0000>[New for Windows NT 4.0 Service Pack 3.]</span> </p>
<p>
Supplies a pointer to an interface on an object registered in the global table that is usable by the calling apartment.</p>
<pre><code><b>HRESULT GetInterfaceFromGlobal(
  DWORD </b><i> dwCookie</i><b>,  </b>//Cookie identifying the desired global 
                    //interface and its object
<b>  REFIID </b><i> riid</i><b>,     </b>//IID of the registered global interface
<b>  void</b><i> **ppv        </i>//Indirect pointer to the desired interface
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwCookie</i></dt>
<dd>
[in] DWORD cookie identifying the interface (and its object), retrieved through a call to <b>IGlobalInterfaceTable::RegisterInterfaceInGlobal</b>.</dd>
<dt>
<i>riid</i></dt>
<dd>
[in] IID of the desired interface. This parameter must match the IID passed in RegisterInterfaceInGlobal.</dd>
<dt>
<i>ppv</i></dt>
<dd>
[out, iid_is(riid)] Pointer to the requested interface pointer.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The operation was successful.</dd>
<dt>
E_INVALIDARG</dt>
<dd>
One or more<b> </b>parameters are invalid.
</dd>
</dl>
<h4>Remarks</h4>
<p>
An apartment that wants a pointer to this interface then calls the <b>GetInterfaceFromGlobal</b> method with this cookie, and the implementation then, in the proper way, supplies a pointer to the interface that can be used in the calling apartment. The interface pointer supplied cannot be used by other apartments in the process.</p>
<p>
The application is responsible for coordinating access to the global variable during calls to <b>RevokeInterfaceFromGlobal</b>. That is, the application should ensure that one thread does not call <b>RevokeInterfaceFromGlobal</b> while another thread is calling <b>GetInterfaceFromGlobal</b> with the same cookie. Multiple calls to GetInterfaceFromGlobal for the same cookie are permitted.'</p>
<p>
<b>GetInterfaceFromGlobal</b> calls <a href="if_r2z_3rja.htm"><b>IUnknown::AddRef</b></a> on the pointer obtained in <i>ppv. </i>It is the caller's responsibility to call <b>Release</b> on this pointer.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_f2n_7lt8.htm"><b>IGlobalInterfaceTable::RegisterInterfaceInGlobal</b></a>, <a href="if_f2n_8bsc.htm"><b>IGlobalInterfaceTable::RevokeInterfaceFromGlobal</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

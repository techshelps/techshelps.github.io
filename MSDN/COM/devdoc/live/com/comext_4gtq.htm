<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Providing Class Information</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_providing_class_information"></a>Providing Class Information</h1>
<p>
It is often useful for a client of an object to examine the object's type information. Given the object's CLSID, a client can locate the object's type library using registry entries, and then can scan the type library for the <b>coclass </b>entry in the library matching the CLSID.</p>
<p>
However, not all objects have a CLSID, although they still need to provide type information. In addition, it is convenient for a client to have a way to simply ask an object for its type information instead of going through all the tedium to extract the same information from registry entries.</p>
<p>
This capability is important when dealing with outgoing interfaces on connectable objects. See <a href="connobj_6v73.htm">Using IProvideClassInfo</a> in the <a href="connobj_88z7.htm">Connectable Objects</a> chapter for more information on how connectable objects provide this capability.</p>
<p>
In these cases, a client can query the object for any of the <b>IProvideClassInfo[<i>x</i>]</b> interfaces. If these interfaces exist, the client calls <b>IProvideClassInfo[<i>x</i>]::GetClassInfo</b> to get the type information for the interface.</p>
<p>
By implementing <b>IProvideClassInfo[<i>x</i>]</b>, an object specifies that it can provide type information for its entire class, that is, what it would describe in its <b>coclass</b> section of its type library, if it has one. The <b>GetClassInfo</b> method returns an <b>ITypeInfo </b>pointer corresponding to the object's <b>coclass </b>information. Through this <b>ITypeInfo</b> pointer, the client can examine all the object's incoming and outgoing interface definitions.</p>
<p>
The object can also provide <a href="if_p2q_8e42.htm"><b>IProvideClassInfo2</b></a>. The <b>IProvideClassInfo2</b> interface is a simple extension to <b>IProvideClassInfo</b> that makes it quick and easy to retrieve an object's outgoing interface identifiers for its default event set. <b>IProvideClassInfo2</b> is derived from <a href="if_p2q_6jcf.htm"><b>IProvideClassInfo</b></a>.</p>
<p>&nbsp;</p></body>
</HTML>

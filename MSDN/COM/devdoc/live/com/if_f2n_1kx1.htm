<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMoniker::BindToStorage</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_imoniker_bindtostorage"></a>IMoniker::BindToStorage</h2>
<p>
Retrieves an interface pointer to the storage that contains the object identified by the moniker. Unlike the <a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a> method, this method does not activate the object identified by the moniker.</p>
<pre><code><b>HRESULT BindToStorage(
  IBindCtx</b><i> *pbc</i><b>,        </b>//Pointer to bind context to be used
<b>  IMoniker</b><i> *pmkToLeft</i><b>,  </b>//Pointer to moniker to the left of this one 
                        //in the composite
<b>  REFIID</b><i> riid</i><b>,          </b>//Reference to the identifier of the storage 
                        //interface requested
<b>  void</b><i> **ppvObj         </i>//Address of output variable that receives 
                        //the interface pointer requested in <i>riid</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pbc</i></dt>
<dd>
[in] Pointer to the <b>IBindCtx</b> interface on the bind context object to be used during this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment. For more information, see <a href="if_a2e_06bc.htm"><b>IBindCtx</b></a>. </dd>
<dt>
<i>pmkToLeft</i></dt>
<dd>
[in] If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is primarily used by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should pass NULL.</dd>
<dt>
<i>riid</i></dt>
<dd>
[in] Reference to the identifier of the storage interface requested, whose pointer will be returned in <i>ppvObj</i>. Storage interfaces commonly requested include <a href="if_r2z_9b8l.htm"><b>IStorage</b></a>, <a href="if_r2z_4x7x.htm"><b>IStream</b></a>, and <a href="if_f2n_9q9f.htm"><b>ILockBytes</b></a>. </dd>
<dt>
<i>ppvObj</i></dt>
<dd>
[out] Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppvObj</i> contains the requested interface pointer to the storage of the object identified by the moniker. If <i>ppvObj</i> is non-NULL, the implementation must call <a href="if_r2z_3rja.htm"><b>IUnknown::AddRef</b></a> on the storage; it is the caller's responsibility to call <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a>. If an error occurs, *<i>ppvObj</i> must be set to NULL. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
The method supports the standard return value E_OUTOFMEMORY, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The binding operation was successful.</dd>
<dt>
MK_E_NOSTORAGE</dt>
<dd>
The object identified by this moniker does not have its own storage.</dd>
<dt>
MK_E_EXCEEDEDDEADLINE</dt>
<dd>
The operation could not be completed within the time limit specified by the bind context's <a href="structs_2b1v.htm"><b>BIND_OPTS</b></a> structure.</dd>
<dt>
MK_E_CONNECTMANUALLY</dt>
<dd>
The operation was unable to connect to the storage, possibly because a network device could not be connected to. For more information, see <a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a>.</dd>
<dt>
MK_E_INTERMEDIATEINTERFACENOTSUPPORTED</dt>
<dd>
An intermediate object was found but it did not support an interface required for an operation. For example, an item moniker returns this value if its container does not support the <b>IOleItemContainer</b> interface.</dd>
<dt>
STG_E_ACCESSDENIED</dt>
<dd>
Unable to access the storage object.</dd>
<dt>
<b>IOleItemContainer::GetObject</b> errors</dt>
<dd>
Binding to a moniker containing an item moniker can return any of the errors associated with this function.
</dd>
</dl>
<h4>Remarks</h4>
<p>
There is an important difference between the <a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a> and <b>IMoniker::BindToStorage</b> methods. If, for example, you have a moniker that identifies a spreadsheet object, calling <b>IMoniker::BindToObject</b> provides access to the spreadsheet object itself, while calling <b>IMoniker::BindToStorage</b> provides access to the storage object in which the spreadsheet resides. </p>
<h5>Notes to Callers</h5>
<p>
Although none of the COM moniker classes call this method in their binding operations, it might be appropriate to call it in the implementation of a new moniker class. You could call this method in an implementation of <a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a> that requires information from the object identified by the <i>pmkToLeft</i> parameter and can get it from the persistent storage of the object without activation. For example, if your monikers are used to identify objects that can be activated without activating their containers, you may find this method useful.</p>
<p>
A client that can read the storage of the object its moniker identifies could also call this method.</p>
<h5>Notes to Implementers</h5>
<p>
Your implementation should locate the persistent storage for the object identified by the current moniker and return the desired interface pointer. Some types of monikers represent pseudo-objects, which are objects that do not have their own persistent storage. Such objects comprise some portion of the internal state of its container; as, for example, a range of cells in a spreadsheet. If your moniker class identifies this type of object, your implementation of <b>IMoniker::BindToStorage </b>should return the error MK_E_NOSTORAGE. </p>
<p>
If the bind context's <a href="structs_2b1v.htm"><b>BIND_OPTS</b></a> structure specifies the <b>BINDFLAGS_JUSTTESTEXISTENCE</b> flag, your implementation has the option of returning NULL in <i>ppvObj</i> (although it can also ignore the flag and perform the complete binding operation).</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

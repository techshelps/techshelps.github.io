<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoRegisterPSClsid</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_coregisterpsclsid"></a>CoRegisterPSClsid</h1>
<p>
Enables a downloaded DLL to register its custom interfaces within its running process so that the marshaling code will be able to marshal those interfaces.</p>
<pre><code><b>WINOLEAPI CoRegisterPSCLsid(
  REFIID</b><i> riid</i><b>,</b>     //Custom interface to be registered
<b>  REFCLSID</b><i> rclsid  </i>//DLL containing the proxy/stub code for <i>riid</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>riid</i></dt>
<dd>
[in] Points to the IID of the interface to be registered.</dd>
<dt>
<i>rclsid</i></dt>
<dd>
[in] Points to the CLSID of the DLL that contains the proxy/stub code for the custom interface specified by <i>riid</i>.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK </dt>
<dd>
The custom interface was successfully registered.</dd>
<dt>
E_INVALIDARG</dt>
<dd>
One of the parameters is invalid.</dd>
<dt>
E_OUTOFMEMORY</dt>
<dd>
There is insufficient memory to complete this operation.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Normally the code responsible for marshaling an interface pointer into the current running process reads the HKEY_CLASSES_ROOT\Interfaces section of the registry to obtain the CLSID of the DLL containing the ProxyStub code to be loaded. To obtain the ProxyStub CLSIDs for an existing interface, the code calls the <a href="api1_26ck.htm"><b>CoGetPSClsid</b></a> function.</p>
<p>
In some cases, however, it may be desirable or necessary for an in-process handler or in-process server to make its custom interfaces available without writing to the registry. A DLL downloaded across a network may not even have permission to access the local registry, and because the code originated on another machine, the user, for security purposes, may want to run it in a restricted environment. Or a DLL may have custom interfaces that it uses to talk to a remote server and may also include the ProxyStub code for those interfaces. In such cases, a DLL needs an alternative way to register its interfaces. <b>CoRegisterPSClsid</b>, used in conjunction with <a href="api1_6kz8.htm"><b>CoRegisterClassObject</b></a>, provides that alternative.</p>
<p>
A DLL would normally call <b>CoRegisterPSClsid</b> as shown in the following code fragment:</p>
<pre><code>HRESULT RegisterMyCustomInterface(DWORD *pdwRegistrationKey)
{
    HRESULT hr = CoRegisterClassObject(CLSID_MyProxyStubClsid,
        pIPSFactoryBuffer,
        CLSCTX_INPROC_SERVER,
        REGCLS_MULTIPLEUSE
        pdwRegistrationKey);
    if(SUCCEEDED)(hr))
    {
        hr = CoRegisterPSClsid(IID_MyCustomInterface, CLSID_MyProxyStubClsid);
    }
 
    return hr;
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api1_26ck.htm"><b>CoGetPSClsid</b></a>, <a href="api1_6kz8.htm"><b>CoRegisterClassObject</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

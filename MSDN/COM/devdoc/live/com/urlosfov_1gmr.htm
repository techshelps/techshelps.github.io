<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>URL Open Stream Functions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_url_open_stream_functions"></a>URL Open Stream Functions</h1>
<p>
URL Open Stream (UOS) functions are ActiveX™ extensions to the Win32 API. They combine the familiarity of C-style programming with the power of COM. Yet using UOS functions requires knowledge of no more than two COM interfaces, <a href="if_r2z_4x7x.htm"><b>IStream</b></a> and <b>IBindStatusCallback</b>. UOS functions work equally well inside an ActiveX framework (for example, a component, a document or frame window, a subcomponent, or a scriptable object) or in a generic Internet context.</p>
<p>
Every UOS function works in the same basic way: the caller implements an <b>IBindStatusCallback</b> interface (optional in some cases), then calls the function. The <b>URLOpenStream</b> and <b>URLOpenPullStream</b> functions require the caller to be on a thread that has a message loop (GetMessage/DispatchMessage). In the case of an ActiveX component, a message loop is a given if one of these functions is called from the main thread. For a stand-alone application without a user interface, a message loop is still necessary to use these functions. </p>
<p>
With the UOS functions, you can: 
<ul>
<li>
Download a URL to a file with a single function call. You can optionally get progress notifications in the background.</li>
<li>
Create a blocking-type stream (see <a href="asyncstg_86cl.htm">Asynchronous Storage</a>) with a single function that will block when you call <a href="if_r2z_14mc.htm">ISequentialStream::Read</a>. You can optionally get progress notifications in the background.</li>
<li>
Hook into the ActiveX client framework, if you like, simply by passing your this pointer.</li>
<li>
Configure callbacks using either the push or pull model (see <a href="monikers_3g8j.htm"><b>Asynchronous Monikers</b></a>). </li>
</ul>
<p>
URL open stream functions use services from URL Monikers and WinInet, providing all the caching and thread-synchronization features of those components. In addition, if your code is in an ActiveX container, the UOS functions handle all the host binding operations, automatically doing the right things to ensure an efficient and successful download. That is, these functions will determine whether your code is hosted within a container that supports the <b>IBindHost</b> interface and will use this interface if it is present. Otherwise, they will work without it.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

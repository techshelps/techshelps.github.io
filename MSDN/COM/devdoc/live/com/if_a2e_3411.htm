<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IConnectionPoint::Advise</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_iconnectionpoint_advise"></a>IConnectionPoint::Advise</h2>
<p>
Establishes a connection between the connection point object and the client's sink.</p>
<pre><code><b>HRESULT Advise(
  IUnknown</b><i> *pUnk</i><b>,  </b>//Pointer to the client's advise sink
<b>  DWORD</b><i> *pdwCookie </i>//Pointer to the connection point identifier used 
                   // by Unadvise
<b>);</b>
 </code></pre>
<h4>Parameter</h4>
<dl>
<dt>
<i>pUnk</i></dt>
<dd>
[in] Pointer to the <a href="if_r2z_9dwu.htm"><b>IUnknown</b></a> interface on the client's advise sink. The client's sink receives outgoing calls from the connection point.</dd>
<dt>
<i>pdwCookie</i></dt>
<dd>
[out] Pointer to a returned token that uniquely identifies this connection. The caller uses this token later to delete the connection by passing it to the <a href="if_a2e_3z8l.htm"><b>IConnectionPoint::Unadvise</b></a> method. If the connection was not successfully established, this value is zero.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The connection has been established and <i>*pdwCookie</i> has the connection token.</dd>
<dt>
E_POINTER</dt>
<dd>
The value in <i>pUnk</i> or <i>pdwCookie</i> is not valid. For example, either pointer may be NULL.</dd>
<dt>
CONNECT_E_ADVISELIMIT</dt>
<dd>
The connection point has already reached its limit of connections and cannot accept any more.</dd>
<dt>
CONNECT_E_CANNOTCONNECT</dt>
<dd>
The sink does not support the interface required by this connection point.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>Advise</b> establishes a connection between the connection point and the caller's sink identified with <i>pUnk</i>.</p>
<p>
The connection point must call <code>pUnk-&gt;QueryInterface(iid, ...)</code> to obtain the correct outgoing interface pointer to call when events occur, where <i>iid</i> is the IID for the outgoing interface managed by the connection point. When <i>iid</i> is passed to the <a href="if_a2e_1b04.htm"><b>IConnectionPointContainer::FindConnectionPoint</b></a> method, an interface pointer to this same connection point is returned.</p>
<h5>Notes to Implementers</h5>
<p>
The connection point must query the <i>pUnk</i> pointer for the correct outgoing interface. If this query fails, this method must return CONNECT_E_CANNOTCONNECT.</p>
<p>
The <i>pdwCookie</i> value must be unique for each connection to any given instance of a connection point.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ocidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_a2e_3z8l.htm"><b>IConnectionPoint::Unadvise</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

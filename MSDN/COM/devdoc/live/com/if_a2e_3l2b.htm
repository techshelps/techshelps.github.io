<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDataObject::GetCanonicalFormatEtc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_idataobject_getcanonicalformatetc"></a>IDataObject::GetCanonicalFormatEtc</h2>
<p>
Provides a standard <a href="structs_14v7.htm"><b>FORMATETC</b></a> structure that is logically equivalent to one that is more complex. You use this method to determine whether two different <b>FORMATETC</b> structures would return the same data, removing the need for duplicate rendering.</p>
<pre><code><b>HRESULT GetCanonicalFormatEtc(
  FORMATETC *</b><i> pFormatetcIn</i><b>,  </b>//Pointer to the FORMATETC structure
<b>  FORMATETC *</b><i> pFormatetcOut  </i>//Pointer to the canonical equivalent 
                             // FORMATETC structure
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pFormatetcIn</i></dt>
<dd>
[in] Pointer to the FORMATETC structure that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as <a href="if_a2e_1jz5.htm"><b>IDataObject::GetData</b></a>. The <a href="enums_986c.htm">TYMED</a> member is not significant in this case and should be ignored.</dd>
<dt>
<i>pFormatetcOut</i></dt>
<dd>
[out] Pointer to a <a href="structs_14v7.htm"><b>FORMATETC</b></a> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to <i>pFormatetcIn</i>. The caller must allocate this structure and the <b>GetCanonicalFormatEtc</b> method must fill in the data. To retrieve data in a subsequent call like <b>IDataObject::GetData</b>, the caller uses the supplied value of <i>pFormatetcOut</i>, unless the value supplied is NULL. This value is NULL if the method returns DATA_S_SAMEFORMATETC. The TYMED member is not significant in this case and should be ignored.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The returned <a href="structs_14v7.htm"><b>FORMATETC</b></a> structure is different from the one that was passed.</dd>
<dt>
DATA_S_SAMEFORMATETC</dt>
<dd>
The<b> <a href="structs_14v7.htm">FORMATETC</a></b> structures are the same and NULL is returned in <i>pFormatetcOut</i>.</dd>
<dt>
DV_E_LINDEX</dt>
<dd>
Invalid value for <i>lindex</i>; currently, only -1 is supported.</dd>
<dt>
DV_E_FORMATETC</dt>
<dd>
Invalid value for <i>pFormatetc</i>.</dd>
<dt>
OLE_E_NOTRUNNING</dt>
<dd>
Object application is not running.
</dd>
</dl>
<h4>Remarks</h4>
<p>
If a data object can supply exactly the same data for more than one requested <a href="structs_14v7.htm"><b>FORMATETC</b></a> structure, <b>IDataObject::GetCanonicalFormatEtc</b> can supply a "canonical", or standard FORMATETC that gives the same rendering as a set of more complicated FORMATETC structures. For example, it is common for the data returned to be insensitive to the target device specified in any one of a set of otherwise similar FORMATETC structures. </p>
<h5>Notes to Callers</h5>
<p>
A call to this method can determine whether two calls to <b>IDataObject::GetData</b> on a data object, specifying two different FORMATETC structures, would actually produce the same renderings, thus eliminating the need for the second call and improving performance. If the call to <b>GetCanonicalFormatEtc</b> results in a canonical format being written to the <i>pFormatetcOut</i> parameter, the caller then uses that structure in a subsequent call to <a href="if_a2e_1jz5.htm"><b>IDataObject::GetData</b></a>. </p>
<h5>Notes to Implementers</h5>
<p>
Conceptually, it is possible to think of FORMATETC structures in groups defined by a canonical FORMATETC that provides the same results as each of the group members. In constructing the canonical FORMATETC, you should make sure it contains the most general information possible that still produces a specific rendering.</p>
<p>
For data objects that never provide device-specific renderings, the simplest implementation of this method is to copy the input <b>FORMATETC </b>to the output <b>FORMATETC</b>, store a NULL in the <i>ptd</i> field of the output <b>FORMATETC</b>, and return DATA_S_SAMEFORMATETC.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_a2e_1jz5.htm"><b>IDataObject::GetData</b></a>, <a href="structs_14v7.htm"><b>FORMATETC</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

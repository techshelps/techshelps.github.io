<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Determining Your Security Needs</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_determining_your_security_needs"></a>Determining Your Security Needs</h2>
<p>
How you set up COM security for your application depends on what kind of security your application needs. There are several common situations that determine what you should do.</p>
<p>
If you decide to use the COM security defaults, you do not have to do anything — COM handles it all. For information on what these default settings are, see <a href="comext_0icz.htm"><b>COM Security Defaults</b></a>.</p>
<p>
You can also prevent any remote calls into your machine by disabling DCOM altogether (COM between remote machines). For more information, see <a href="comext_5xd9.htm"><b>Activation Security and Disabling DCOM</b></a>.</p>
<p>
For legacy or new applications, you can set process-wide security in the registry. For more information, see <a href="comext_3jw9.htm"><b>Setting Process-wide Security through the Registry</b></a>.</p>
<p>
You can also override default security settings for calls to certain interfaces in the process, while setting default security for the remainder of the process (to allow COM to handle the general cases). For more information, see <a href="comext_2v3t.htm"><b>Setting Process-wide Security with CoInitializeSecurity</b></a> and <a href="comext_3bjg.htm"><b>Setting Security at the Interface Proxy Level</b></a>.</p>
<p>
For complex security requirements, you can handle all security programmatically, rather than allowing COM to handle it for you. To do this, call <b>CoInitializeSecurity</b> to disable automatic authentication, and then control all the security settings by setting security on a per-interface proxy basis. For more information, see <a href="comext_2v3t.htm"><b>Setting Process-wide Security with CoInitializeSecurity</b></a>and <a href="comext_3bjg.htm"><b>Setting Security at the Interface Proxy Level</b></a>.</p>
<p>
In some scenarios, you might want to turn security off completely. You might decide that your application does not need any security, or you might want to disable security during development time so that you can enable security features individually. To learn how to disable COM security, see <a href="comext_1xwm.htm"><b>Turning Security Off</b></a>.</p>
<p>
Most of the preceding options are open to you if you run your application under Windows 95, but there are some limitations. For more information, see <a href="comext_133p.htm"><b>COM Security and Windows 95</b></a>.</p>
<p>
You can also run a server as a given user account by setting the <a href="reg_7nar.htm"><b>RunAs</b></a> named-value. This setting can be used to restrict or enhance available operations. For more information, see <a href="comext_47ec.htm"><b>Installing as a Win32 Service or User Account</b></a>.</p>
<p>
Security in COM relies on authentication services administered by security packages. The default security package for Windows NT is NTLMSSP (Windows NT LAN Manager Security Support Provider). This package works well for many applications, but does not provide the more robust security offered by other packages. Therefore, for Windows NT 5.0, COM now supports the SChannel security package, which uses certificate-based security for its SSL and PCT protocols. Starting with beta 2 of Windows NT 5.0, the Kerberos security package is also supported. For more details on using these security packages, refer to <a href="comext_08j7.htm"><b>COM and Security Packages</b></a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPersistFile::Load</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_ipersistfile_load"></a>IPersistFile::Load</h2>
<p>
Opens the specified file and initializes an object from the file contents.</p>
<pre><code><b>HRESULT Load(
  LPCOLESTR</b><i> pszFileName</i><b>,</b> 
                //Pointer to absolute path of the file to open
<b>  DWORD</b><i> dwMode  </i>//Specifies the access mode from the STGM enumeration
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pszFileName</i></dt>
<dd>
[in]Points to a zero-terminated string containing the absolute path of the file to open.</dd>
<dt>
<i>dwMode</i></dt>
<dd>
[in]Specifies some combination of the values from the <a href="enums_1ktp.htm"><b>STGM</b></a> enumeration to indicate the access mode to use when opening the file. <b>IPersistFile::Load</b> can treat this value as a suggestion, adding more restrictive permissions if necessary. If <i>dwMode</i> is zero, the implementation should open the file using whatever default permissions are used when a user opens the file.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK </dt>
<dd>
The object was successfully loaded.</dd>
<dt>
E_OUTOFMEMORY </dt>
<dd>
The object could not be loaded due to a lack of memory.</dd>
<dt>
E_FAIL </dt>
<dd>
The object could not be loaded for some reason other than a lack of memory.</dd>
<dt>
<b>IPersistFile::Load</b> STG_E_* error codes.</dt>
<dd>
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>IPersistFile::Load</b> loads the object from the specified file. This method is for initialization only and does not show the object to the end user. It is not equivalent to what occurs when an end user selects the File Open command.</p>
<h5>Notes to Callers</h5>
<p>
The <b>BindToObject</b> method in file monikers calls this method to load an object during a moniker binding operation (when a linked object is run). Typically, applications do not call this method directly.</p>
<h5>Notes to Implementers</h5>
<p>
Because the information needed to open a file varies greatly from one application to another, the object on which this method is implemented must also open the file specified by the <i>pszFileName</i> parameter. This differs from the <a href="if_p2q_34pw.htm"><b>IPersistStorage::Load</b></a> and <a href="if_p2q_54f8.htm"><b>IPersistStream::Load</b></a>, in which the caller opens the storage or stream and then passes an open storage or stream pointer to the loaded object.</p>
<p>
For an application that normally uses OLE compound files, your <b>IPersistFile::Load</b> implementation can simply call the <a href="api4_0hb9.htm"><b>StgOpenStorage</b></a> function to open the storage object in the specified file. Then, you can proceed with normal initialization. Applications that do not use storage objects can perform normal file-opening procedures.</p>
<p>
When the object has been loaded, your implementation should register the object in the Running Object Table (see <a href="if_r2z_33n6.htm"><b>IRunningObjectTable::Register</b></a>).</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_r2z_33n6.htm"><b>IRunningObjectTable::Register</b></a>, <a href="api4_0hb9.htm"><b>StgOpenStorage</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

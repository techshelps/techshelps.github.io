<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IServiceProvider [New - Windows NT]</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_iserviceprovider"></a>IServiceProvider</h1>
<p>
The <b>IServiceProvider</b> interface locates a service specified by its GUID and returns the interface pointer for the requested interface on the service.</p>
<h5>When to Implement</h5>
<p>
An object that provides services should implement the <b>IServiceProvider</b> interface as a general way to supply its clients with interface pointers to the interfaces on the service.</p>
<p>
A service is often provided through a separate object from the client site. For example, the service can be provided through a separate control or some other object that the client can communicate with.</p>
<p>
Usually, the client communicates through its client site object in the container. The container calls <b>IOleObject::SetClientSite</b> to provide a pointer to the <b>IOleClientSite</b> interface for the embedded object's client site. Then, the client must call methods in the <b>IOleClientSite</b> interface to find out about services that its container supports. Thus, the client site must provide a way for the client to access the service when necessary, even if the service is provided through a separate object.</p>
<p>
For example, an in-place object calls <b>IOleInPlaceSite::GetWindowContext</b> to obtain interface pointers for the document object that contains the site and for the frame object that contains the document. Both of these interface pointers are on objects separate from the site object, so the client cannot call <b>IOleInPlaceSite::QueryInterface</b> to obtain these interface pointers.</p>
<p>
The <b>IServiceProvider</b> interface is a general way to provide interface pointers for services, so that the site object need not implement ad hoc solutions as the need arises.</p>
<h5>When to Use</h5>
<p>
This interface itself has only one method, <b>IServiceProvider::QueryService</b>. The caller specifies a GUID for the service and the IID of the requested interface. The interface pointer is returned in a caller-supplied variable.</p>
<h4>Methods in Vtable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=45%><a href="if_r2z_9dwu.htm">IUnknown</a> Methods</th>
<th align=left width=55%>Description</th>
</tr>
<tr valign=top>
<td width=45%><a href="if_r2z_7fvp.htm"><b>QueryInterface</b></a></td>
<td width=55%>Returns pointers to supported interfaces.</td>
</tr>
<tr valign=top>
<td width=45%><a href="if_r2z_3rja.htm"><b>AddRef</b></a></td>
<td width=55%>Increments reference count.</td>
</tr>
<tr valign=top>
<td width=45%><a href="if_r2z_59np.htm"><b>Release</b></a></td>
<td width=55%>Decrements reference count.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%><b>IServiceProvider</b> <b>Methods</b></td>
<td width=52%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_5det.htm"><b>QueryService</b></a></td>
<td width=52%>Returns an interface pointer to the requested interface on a service.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ocidl.h.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPropertyBag::Write</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_ipropertybag_write"></a>IPropertyBag::Write</h2>
<p>
Called by the control to write each property in turn to the storage provided by the container.</p>
<pre><code><b>HRESULT Write(
  LPCOLESTR</b><i> pszPropName</i><b>,  </b>//Points to the property to be written
<b>  VARIANT*</b><i> pVar           </i>//Points to the VARIANT containing the 
                          //property value and type
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pszPropName</i></dt>
<dd>
[in] Pointer to the name of the property to write. Cannot be NULL.</dd>
<dt>
<i>pVar</i></dt>
<dd>
[in] Pointer to the caller-initialized <b>VARIANT</b> that holds the property value to save. The caller owns this <b>VARIANT</b> and is responsible for all allocations therein. That is, the property bag itself does not attempt to free data in the <b>VARIANT</b>.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The property bag successfully saved the requested property.</dd>
<dt>
E_FAIL</dt>
<dd>
There was a problem writing the property. It is possible that the property bag does not understand how to save a particular <b>VARIANT</b> type.</dd>
<dt>
E_POINTER</dt>
<dd>
The address in <i>pszPropName </i>or <i>pVar </i>is not valid (such as NULL). The caller must supply both.
</dd>
</dl>
<h4>Remarks</h4>
<p>
This method asks the property bag to save the property named with <i>pszPropName </i>using the type and value in the caller-initialized <b>VARIANT</b> in <i>pVar.</i> In some cases the caller may be asking the property bag to save another object, that is, when <b>pVar-&gt;vt</b> is VT_UNKNOWN. In such cases, the property bag queries this object pointer for some persistence interface, like <b>IPersistStream</b> or even <b>IPersistPropertyBag</b> again and has that object save its data as well. Usually, this results in the property bag having some byte array for this object which can be saved as encoded text (hex string, MIME, etc.). When the property bag is later used to reinitialize a control, the client that owns the property bag must recreate the object when the caller asks for it, initializing that object with the previously saved bits.</p>
<p>
This allows very efficient persistence operations for large BLOB properties like a picture, where the owner of the property bag itself directly asks the picture object (managed as a property in the control being saved) to save into a specific location. This avoids potential extra copy operations that would be involved with other property-based persistence mechanisms.</p>
<p>
E_NOTIMPL is not a valid return code as any object implementing this interface must support the entire functionality of the interface.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ocidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_p2q_071g.htm"><b>IPropertyBag::Read</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

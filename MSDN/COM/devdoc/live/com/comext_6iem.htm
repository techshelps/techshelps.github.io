<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Auto-Impersonation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h4><a name="_com_auto_impersonation"></a>Auto-Impersonation</h4>
<p>
Normally, impersonation takes place when the server calls either the <b>IServerSecurity::ImpersonateClient</b> method (or the <b>CoImpersonateClient </b>function). However, if you want impersonation to take place before each call to your application, you should set the EOAC_AUTO_IMPERSONATION flag in the <i>dwCapabilities</i> parameter in your call to <a href="api1_8ayh.htm"><b>CoInitializeSecurity</b></a>. The <i>dwAuthn</i> parameter must not be RPC_C_AUTHN_LEVEL_NONE when auto-impersonation is set.</p>
<p>
Because auto-impersonation is a server-side feature, if the client sets the impersonation level to RPC_C_IMP_LEVEL_NONE when auto-impersonation is set, the call from the client to the server will fail. </p>
<p>
If the client sets the impersonation level to RPC_C_IMP_LEVEL_IDENTIFY when auto-impersonation is set, the call from the client to the server will succeed, but any reference to a securable object will fail. Because interface marshalling accesses the registry (which is a securable object), interface marshalling will fail -- and as a result, all calls that pass interfaces will fail. </p>
<p>
Basically, when the server indicates the need to impersonate but the client does not let him, the call cannot succeed.</p>
<p>&nbsp;</p></body>
</HTML>

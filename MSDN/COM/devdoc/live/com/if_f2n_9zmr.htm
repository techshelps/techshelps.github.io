<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMallocSpy::PreRealloc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_imallocspy_prerealloc"></a>IMallocSpy::PreRealloc</h2>
<p>
Called just before invoking <a href="if_f2n_3twj.htm"><b>IMalloc::Alloc</b></a>. </p>
<pre><code><b>ULONG PreRealloc(
  void *</b><i> pRequest</i><b>,  </b>//Pointer the caller is passing to 
                    //IMalloc::Realloc
<b>  ULONG</b><i> cbRequest</i><b>,  </b>//Byte count the caller is passing to 
                    //IMalloc::Realloc
<b>  void **</b><i> ppNewRequest</i><b>,</b>
<b>                    </b>//Address of output variable that receives a 
                    //pointer to the requested memory block to be 
                    //reallocated
<b>  BOOL</b><i> fSpyed       </i>//Whether the original allocation was "spyed"
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pRequest</i></dt>
<dd>
[in] Pointer specified in the original call to <a href="if_f2n_7qqr.htm"><b>IMalloc::Realloc</b></a>, indicating the the memory block to be reallocated.</dd>
<dt>
<i>cbRequest</i></dt>
<dd>
[in] Memory block's byte count as specified in the original call to <b>IMalloc::Realloc</b>.</dd>
<dt>
<i>ppNewRequest</i></dt>
<dd>
[out] Address of pointer variable that receives a pointer to the actual memory block to be reallocated. This may be different from the pointer in <i>pRequest</i> if the implementation of <b>IMallocSpy::PreRealloc</b> extends or modifies the reallocation. This is an out pointer and should always be stored by <b>PreRealloc</b>.</dd>
<dt>
<i>fSpyed</i></dt>
<dd>
[in] TRUE if the original allocation was done while the spy was active.
</dd>
</dl>
<h4>Return Value</h4>
<p>
The actual byte count to be passed to <a href="if_f2n_7qqr.htm"><b>IMalloc::Realloc</b></a>. </p>
<h4>Remarks</h4>
<p>
The <b>IMallocSpy::PreRealloc</b> implementation may extend and/or modify the allocation to store debug-specific information with the allocation. Thus, the <i>ppNewRequest</i> parameter may differ from <i>pRequest</i>, a pointer to the request specified in the original call to <b>IMalloc::Realloc</b>. </p>
<p>
<b>PreRealloc</b> can force memory allocation failure by returning 0, allowing testing to ensure that the application handles allocation failure gracefully in all cases. In this case, <b>PostRealloc</b> is not called and <b>Realloc</b> returns NULL. However, if <b>IMalloc::Realloc</b> encounters a real memory failure and returns NULL, <b>PostRealloc</b> is called. Forcing allocation failure is effective only if <i>cbRequest</i> is not equal to 0.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_f2n_7qqr.htm"><b>IMalloc::Realloc</b></a>, <a href="if_f2n_45gj.htm"><b>IMallocSpy::PostRealloc</b></a>, <a href="api1_2r5l.htm"><b>CoRegisterMallocSpy</b></a>, <a href="api1_2ant.htm"><b>CoRevokeMallocSpy</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoTaskMemAlloc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_cotaskmemalloc"></a>CoTaskMemAlloc</h1>
<p>
Allocates a block of task memory in the same way that <a href="if_f2n_3twj.htm"><b>IMalloc::Alloc</b></a> does. </p>
<pre><code><b>LPVOID CoTaskMemAlloc(
  ULONG</b><i> cb  </i>//Size in bytes of memory block to be allocated
<b>);</b>
 </code></pre>
<h4>Parameter</h4>
<dl>
<dt>
<i>cb</i></dt>
<dd>
[in] Size, in bytes, of the memory block to be allocated.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
Allocated memory block</dt>
<dd>
Memory block allocated successfully.</dd>
<dt>
NULL</dt>
<dd>
Insufficient memory available.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>CoTaskMemAlloc</b> function uses the default allocator to allocate a memory block in the same way that <a href="if_f2n_3twj.htm"><b>IMalloc::Alloc</b></a> does. It is not necessary to call the <a href="api1_2qlf.htm"><b>CoGetMalloc</b></a> function before calling <b>CoTaskMemAlloc</b>.</p>
<p>
The initial contents of the returned memory block are undefined – there is no guarantee that the block has been initialized. The allocated block may be larger than <i>cb</i> bytes because of the space required for alignment and for maintenance information.</p>
<p>
If <i>cb</i> is zero, <b>CoTaskMemAlloc</b> allocates a zero-length item and returns a valid pointer to that item. If there is insufficient memory available, <b>CoTaskMemAlloc</b> returns NULL.</p>
<p>
<b>Note</b>&nbsp;&nbsp;Applications should always check the return value from this method, even when requesting small amounts of memory, because there is no guarantee the memory will be allocated.</p>
<p>
<b>Windows CE:</b> Passing into this function any invalid and, under some circumstances, NULL pointers will result in unexpected termination of the application. For more information about handling exceptions, see Programming Considerations.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Use version 2.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="if_f2n_3twj.htm"><b>IMalloc::Alloc</b></a>, <a href="api1_2qlf.htm"><b>CoGetMalloc</b></a>, <a href="api1_63l1.htm"><b>CoTaskMemFree</b></a>, <a href="api1_3lpf.htm"><b>CoTaskMemRealloc</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

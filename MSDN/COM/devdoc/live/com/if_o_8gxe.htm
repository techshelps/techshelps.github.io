<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOleContainer::LockContainer</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_iolecontainer_lockcontainer"></a>IOleContainer::LockContainer</h2>
<p>
Keeps an embedded object's container running.</p>
<pre><code><b>HRESULT LockContainer(
  BOOL</b><i> fLock  </i>//Value indicating lock or unlock
<b>);</b>
 </code></pre>
<h4>Parameter</h4>
<dl>
<dt>
<i>fLock</i></dt>
<dd>
[in] Value that specifies whether to lock (TRUE) or unlock (FALSE) a container.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return values E_FAIL and E_OUTOFMEMORY, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
Container was locked successfully.
</dd>
</dl>
<h4>Remarks</h4>
<p>
An embedded object<b> </b>calls <b>IOleContainer::LockContainer </b>to keep its container running when the object has link clients that require an update. If an end user selects File Close from the container's menu, however, the container ignores all outstanding <b>LockContainer</b> locks and closes the document anyway.</p>
<h5>Notes to Callers</h5>
<p>
When an embedded object changes from the loaded to the running state, it should call <b>IOleContainer::LockContainer </b>with the <i>fLock</i> parameter set to TRUE. When the embedded object shuts down (transitions from running to loaded), it should call <b>IOleContainer::LockContainer </b>with the <i>fLock</i> parameter set to FALSE. </p>
<p>
Each call to <b>LockContainer</b> with <i>fLock</i> set to TRUE must be balanced by a call to <b>LockContainer</b> with <i>fLock</i> set to FALSE. Object applications typically need not call <b>LockContainer</b>; the default handler makes these calls automatically for object applications implemented as .EXEs as the object makes the transition to and from the running state. Object applications not using the default handler, such as DLL object applications, must make the calls directly.</p>
<p>
An object should have no strong locks on it when it registers in the Running Object Table, but it should be locked as soon as the first external client connects to it. Therefore, following registration of the object in the Running Object Table, object handlers and DLL object applications, as part of their implementation of <a href="if_r2z_763y.htm"><b>IRunnableObject::Run</b></a>, should call <b>IOleContainer::LockContainer(</b>TRUE<b>)</b> to lock the object.</p>
<h5>Notes to Implementers</h5>
<p>
The container must keep track of whether and how many calls to <b>LockContainer(</b>TRUE<b>)</b> have been made. To increment or decrement the reference count, <b>IOleContainer::LockContainer </b>calls <a href="api1_5ajw.htm"><b>CoLockObjectExternal</b></a> with a flag set to match <i>fLock</i>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in oleidl.h.</p>
<h4>See Also</h4>
<p>
<a href="api1_5ajw.htm"><b>CoLockObjectExternal</b></a>,<b> <a href="if_r2z_763y.htm">IRunnableObject::Run</a></b> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IParseDisplayName::ParseDisplayName</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_iparsedisplayname_parsedisplayname"></a>IParseDisplayName::ParseDisplayName</h2>
<p>
Parses the display name to extract a component of the string that it can convert into a moniker, using the maximum number of characters from the left side of the string.</p>
<pre><code><b>HRESULT ParseDisplayName(
  IBindCtx</b><i> *pbc</i><b>,</b>     //Pointer to bind context
<b>  LPOLESTR</b><i> pszDisplayName</i><b>,</b> 
                     //Pointer to string containing display name
<b>  ULONG</b><i> *pchEaten</i><b>,</b>   //Pointer to length, in characters, of display 
                     //name
<b>  IMoniker</b><i> **ppmkOut </i>//Address of output variable that receives the 
                     //resulting IMoniker interface pointer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pbc</i></dt>
<dd>
[in] Pointer to the bind context to be used in this binding operation.</dd>
<dt>
<i>pszDisplayName</i></dt>
<dd>
[in] Pointer to a zero-terminated string containing the display name to be parsed. For Win32 applications, the <b>LPOLESTR</b> type indicates a wide character string (two bytes per character); otherwise, the string has one byte per character.</dd>
<dt>
<i>pchEaten</i></dt>
<dd>
[out Pointer to the number of characters in the display name that correspond to the <i>ppmkOut</i> moniker.</dd>
<dt>
<i>ppmkOut</i></dt>
<dd>
[out] Address of <b>IMoniker</b>* pointer variable that receives the interface pointer to the resulting moniker. If an error occurs, the implementation sets <i>*ppmkOut</i> to NULL. If *<i>ppmkOut</i> is non-NULL, the implementation must call <i>(*ppmkOut)-&gt;</i><a href="if_r2z_3rja.htm"><b>IUnknown::AddRef</b></a>; so it is the caller's responsibility to call <i>(*ppmkOut)-&gt;</i><a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a>. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
The parse operation was successful.</dd>
<dt>
MK_E_SYNTAX</dt>
<dd>
Syntax error in the display name. Parsing failed because <i>szDisplayName</i> could only be partially resolved into a moniker. In this case, *<i>pchEaten</i> has the number of characters that were successfully parsed into a moniker prefix. The parameter <i>ppmkOut</i> should be NULL.</dd>
<dt>
MK_E_NOOBJECT</dt>
<dd>
The display name does not identify a component in this namespace.</dd>
<dt>
E_INVALIDARG</dt>
<dd>
One or more parameters are invalid.
</dd>
</dl>
<h4>Remarks</h4>
<p>
In general, the maximum prefix of <i>szDisplayName</i> that is syntactically valid and that represents an object should be consumed by this method and converted to a moniker.</p>
<p>
Typically, this method is called by <b>MkParseDisplayName[Ex]</b>. In the initial step of the parsing operation, the <b>MkParseDisplayName[Ex]</b> function can retrieve the <b>IParseDisplayName</b> interface directly from an instance of a class identified with either the "@ProgID" or "ProgID" notation. Subsequent parsing steps can query for the interface on an intermediate object.</p>
<p>
The main loop of <b>MkParseDisplayName[Ex]</b> finds the next moniker piece by calling the equivalent method in the <b>IMoniker</b> interface, that is, <b>IMoniker::ParseDisplayName</b>, on the moniker that it currently holds. In this call to <b>IMoniker::ParseDisplayName</b>, the <b>MkParseDisplayName[Ex]</b> function passes NULL in the <i>pmkToLeft</i> parameter. If the moniker currently held by <b>MkParseDisplayName[Ex]</b> is a generic composite, the call to <b>IMoniker::ParseDisplayName</b> is forwarded by that composite onto its last piece, passing the prefix of the composite to the left of the piece in<i> pmkToLeft</i>.</p>
<p>
Some moniker classes will be able to handle this parsing internally to themselves since they are designed to designate only certain kinds of objects. Others will need to bind to the object that they designate to accomplish the parsing process. As is usual, these objects should not be released by <b>IMoniker::ParseDisplayName</b> but instead should be transferred to the bind context via <b>IBindCtx::RegisterObjectBound</b> or <b>IBindCtx::GetRunningObjectTable</b> followed by <b>IRunningObjectTable::Register</b> for release at a later time.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in oleidl.h.</p>
<h4>See Also</h4>
<p>
<a href="api2_8hb9.htm"><b>MkParseDisplayName</b></a>, <a href="api2_7x2w.htm"><b>MkParseDisplayNameEx</b></a> <a href="if_f2n_6ecl.htm"><b>IMoniker::ParseDisplayName</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

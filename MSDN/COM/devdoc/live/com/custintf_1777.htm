<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Defining COM Interfaces</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_defining_com_interfaces"></a>Defining COM Interfaces</h1>
<p>
There are nearly 200 Microsoft-defined COM interfaces, many of which are implemented in the COM libraries. In most cases you can reuse these generic interfaces. However, some applications have specific requirements that make it desirable, or necessary, to define your own object interfaces.</p>
<p>
All COM interfaces must derive, either directly or indirectly, from the <a href="if_r2z_9dwu.htm"><b>IUnknown</b></a> interface. Within that constraint, your custom interface can support almost any method or parameter, including asynchronous methods. You can also generate a type library for your custom interfaces so clients can access information about your object's methods at run time. Once you define an interface, describe it in Microsoft Interface Definition Language (MIDL), compile and register it, you use it just like any generic interface. With DCOM, interface methods are available both to remote processes and to other processes on the same machine. </p>
<p>
This chapter explains how to use MIDL to define COM interfaces and how to build a type library or a proxy/stub DLL to handle the interprocess communication. COM programming experience is assumed. See <a href="com_757w.htm"><b>The Component Object Model</b></a> for the fundamentals of COM interfaces, and <a href="comext_8p2r.htm"><b>COM Clients and Servers</b></a> for information on how clients and servers interact. </p>
<p>
Because you will be using the same steps and tools that you would use to build a conventional client/server RPC application, you should first work through the short <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_tutorial">
</object><a href=JavaScript:alink_1.Click()>Tutorial</a> in the <i>RPC Programmer's Guide and Reference</i> if you are not already familiar with RPC and MIDL.</p>
<p>
Finally, building COM interfaces  requires a development environment that includes either Microsoft Windows NT® (version 4.0 or later) or Windows® 95, a 32-bit C/C++ compiler, and the Microsoft Platform Software Development Kit (SDK), which includes the Midl.exe compiler.</p>
<p>
The steps in creating a COM interface are:
<ul>
<li>
Decide how<b> </b>you want to provide marshaling support for your interface—either with type-library-driven marshaling or with a proxy/stub DLL. Even in-process interfaces must be marshaled if they are to be used across apartment boundaries. It is a good idea to build marshaling support into every COM interface, even if you don't think you will need it. See <a href="custintf_1rhj.htm">Interface Marshaling</a> for more information.</li>
<li>
Describe the interface or interfaces in an <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_interface_definition_idl_file">
</object><a href=JavaScript:alink_2.Click()>interface definition (IDL) file</a> In addition, you can specify certain local aspects of your interface in an <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_application_configuration_acf_file">
</object><a href=JavaScript:alink_3.Click()>application configuration (ACF) file</a>. If you are using type-library-driven marshaling, add a <b>library</b> statement that references the interfaces for which you want to generate type information.</li>
<li>
Use the MIDL compiler to generate a type library file and header file, or C-language proxy/stub files, interface identifier file, DLL data file and header file. See <a href="custintf_0iem.htm">MIDL Compilation</a> for more information </li>
<li>
Depending on the marshaling method you chose, write a module definition (DEF) file, compile and link all the MIDL-generated files into a single proxy DLL. , and register the interface in the system registry, or register the type library. See <a href="custintf_7a0p.htm">Loading and Registering a Type Library</a> and <a href="custintf_1pm4.htm">Building and Registering a Proxy DLL</a> for more information.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

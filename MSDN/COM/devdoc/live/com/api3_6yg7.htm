<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OleLockRunning</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_olelockrunning"></a>OleLockRunning</h1>
<p>
Locks an already running object into its running state or unlocks it from its running state.</p>
<pre><code><b>WINOLEAPI OleLockRunning(
  LPUNKNOWN</b><i> pUnknown</i><b>,</b>   //Pointer to interface
<b>  BOOL</b><i> fLock</i><b>,</b>           //Flag indicating whether object is locked
<b>  BOOL</b><i> fLastUnlockCloses</i>
<i>                        </i>//Flag indicating whether to close object
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pUnknown</i></dt>
<dd>
[in] Pointer to the <a href="if_r2z_9dwu.htm"><b>IUnknown</b></a> interface on the object, which the function uses to query for a pointer to <a href="if_r2z_4u2c.htm"><b>IRunnableObject</b></a>.</dd>
<dt>
<i>fLock</i></dt>
<dd>
[in] TRUE locks the object into its running state. FALSE unlocks the object from its running state.</dd>
<dt>
<i>fLastUnlockCloses</i></dt>
<dd>
[in] TRUE specifies that if the connection being released is the last external lock on the object, the object should close. FALSE specifies that the object should remain open until closed by the user or another process.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return values E_INVALIDARG, E_OUTOFMEMORY and E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The object was successfully locked or unlocked.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>OleLockRunning</b> function saves you the trouble of calling the <a href="if_r2z_1o4n.htm"><b>IRunnableObject::LockRunning</b></a> method. You can use <b>OleLockRunning</b> and <b>IRunnableObject::LockRunning</b> interchangeably. With the IUnknown pointer passed in with the <i>pUnknown</i> parameter, <b>OleLockRunning </b>queries for an <b>IRunnableObject</b> pointer. If successful, it calls <b>IRunnableObject::LockRunning</b> and returns the results of the call.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The implementation of <b>OleLockRunning</b> in earlier versions of OLE differs from that described here.</p>
<p>
For more information on using this function, see <a href="if_r2z_1o4n.htm"><b>IRunnableObject::LockRunning</b></a>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ole2.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api1_5ajw.htm"><b>CoLockObjectExternal</b></a>,<b> <a href="if_r2z_1o4n.htm">IRunnableObject::LockRunning</a></b>,<b> <a href="api3_8jmt.htm">OleNoteObjectVisible</a></b> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

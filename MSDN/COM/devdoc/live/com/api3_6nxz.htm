<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OleDraw</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_oledraw"></a>OleDraw</h1>
<p>
The <b>OleDraw</b> helper function can be used to draw objects more easily. You can use it instead of calling <a href="if_r2z_799z.htm"><b>IViewObject::Draw</b></a> directly.</p>
<pre><code><b>WINOLEAPI OleDraw(
  IUnknown *</b><i> pUnk</i><b>,    </b>//Pointer to the view object to be drawn
<b>  DWORD</b><i> dwAspect</i><b>,     </b>//How the object is to be represented
<b>  HDC</b><i> hdcDraw</i><b>,        </b>//Device context on which to draw
<b>  LPCRECT</b><i> lprcBounds  </i>//Pointer to the rectangle in which the object 
                      // is drawn
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pUnk</i></dt>
<dd>
[in] Pointer to the <b>IUnknown</b> interface on the view object that is to be drawn.</dd>
<dt>
<i>dwAspect</i></dt>
<dd>
[in] How the object is to be represented. Representations include content, an icon, a thumbnail, or a printed document. Valid values are taken from the enumeration <a href="enums_08j8.htm"><b>DVASPECT</b></a>. See <b>DVASPECT</b> for more information.</dd>
<dt>
<i>hdcDraw</i></dt>
<dd>
[in] Device context on which to draw. Cannot be a metafile device context.</dd>
<dt>
<i>lprcBounds</i></dt>
<dd>
[in] Pointer to a <b>RECT</b> structure specifying the rectangle in which the object should be drawn. This parameter is converted to a <b>RECTL</b> structure and passed to <a href="if_r2z_799z.htm"><b>IViewObject::Draw</b></a>.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
Object was successfully drawn.</dd>
<dt>
OLE_E_BLANK </dt>
<dd>
No data to draw from.</dd>
<dt>
E_ABORT</dt>
<dd>
The draw operation was aborted.</dd>
<dt>
VIEW_E_DRAW</dt>
<dd>
An error occurred in drawing.</dd>
<dt>
OLE_E_INVALIDRECT</dt>
<dd>
The rectangle is invalid.</dd>
<dt>
DV_E_NOIVIEWOBJECT</dt>
<dd>
The object doesn't support the <a href="if_r2z_0n1w.htm"><b>IViewObject</b></a> interface.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>OleDraw</b> helper function calls the <b>QueryInterface</b> method for the object specified (<i>pUnk</i>), asking for an <b>IViewObject</b> interface on that object. Then, <b>OleDraw</b> converts the <b>RECT</b> structure to a <b>RECTL</b> structure, and calls <a href="if_r2z_799z.htm"><b>IViewObject::Draw</b></a> as follows:</p>
<pre><code>lpViewObj-&gt;Draw(dwAspect,-1,0,0,0,hdcDraw,&amp;rectl,0,0,0); 
 </code></pre>
<p>
Do not use <b>OleDraw</b> to draw into a metafile because it does not specify the <i>lprcWBounds</i> parameter required for drawing into metafiles.</p>
<p>
<b>Windows CE:</b> Passing into this function any invalid and, under some circumstances, NULL pointers will result in unexpected termination of the application. For more information about handling exceptions, see Programming Considerations.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Use version 2.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ole2.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="if_r2z_799z.htm"><b>IViewObject::Draw</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

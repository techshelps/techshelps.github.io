<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoGetClassObject</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_cogetclassobject"></a>CoGetClassObject</h1>
<p>
Provides a pointer to an interface on a class object associated with a specified CLSID. <b>CoGetClassObject</b> locates, and if necessary, dynamically loads the executable code required to do this.</p>
<p>
Call <b>CoGetClassObject</b> directly when you want to create multiple objects through a class object for which there is a CLSID in the system registry. You can also retrieve a class object from a specific remote machine. Most class objects implement the <b>IClassFactory</b> interface. You would then call <a href="if_a2e_5k11.htm"><b>IClassFactory::CreateInstance</b></a> to create an uninitialized object. It is not always necessary to go through this process. To create a single object, call instead the either the <a href="api1_5ry0.htm"><b>CoCreateInstanceEx</b></a> function, which allows you to create an instance on a remote machine. This replaces the <a href="api1_1nad.htm"><b>CoCreateInstance</b></a> function, which can still be used to create an instance on a local machine. Both functions encapsulate connecting to the class object, creating the instance, and releasing the class object. Two other functions, <a href="api1_765h.htm"><b>CoGetInstanceFromFile</b></a> and <a href="api1_192d.htm"><b>CoGetInstanceFromIStorage</b></a>, provide both instance creation on a remote system, and object activation. OLE also provides many other ways to create an object in the form of numerous helper functions and interface methods whose function is to create objects of a single type and provide a pointer to an interface on that object. </p>
<pre><code><b>STDAPI CoGetClassObject(
  REFCLSID</b><i> rclsid</i><b>,  </b>//CLSID associated with the class object
<b>  DWORD</b><i> dwClsContext</i><b>,</b>
<b>                    </b>//Context for running executable code
<b>  COSERVERINFO *</b><i> pServerInfo</i><b>,</b>
<b>                    </b>//Pointer to machine on which the object is to 
                    // be instantiated
<b>  REFIID</b><i> riid</i><b>,      </b>//Reference to the identifier of the interface
<b>  LPVOID *</b><i> ppv      </i>//Address of output variable that receives the 
                    // interface pointer requested in <i>riid</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>rclsid</i></dt>
<dd>
[in] CLSID associated with the data and code that you will use to create the objects.</dd>
<dt>
<i>dwClsContext</i></dt>
<dd>
[in] Context in which the executable code is to be run. To enable a remote activation, CLSCTX_REMOTE_SERVER must be included. For more information on the context values and their use, see the <a href="enums_152w.htm"><b>CLSCTX</b></a> enumeration.</dd>
<dt>
<i>pServerInfo</i></dt>
<dd>
[in] Pointer to machine on which to instantiate the class object. May be NULL, in which case the class object is instantiated on the current machine or at the machine specified under the class's <a href="reg_7an9.htm"><b>RemoteServerName</b></a> key in the registry, according to the interpretation of the <i>dwClsCtx</i> parameter (see the CLSCTX documentation for details).</dd>
<dt>
<i>riid</i></dt>
<dd>
[in] Reference to the identifier of the interface, which will be supplied in <i>ppv</i> on successful return. This interface will be used to communicate with the class object. Typically this value is <b>IID_IClassFactory</b>, although other values – such as <b>IID_IClassFactory2</b> which supports a form of licensing – are allowed. All OLE-defined interface IIDs are defined in the OLE header files as <b>IID_</b><i>interfacename</i>, where <i>interfacename </i>is the name of the interface.</dd>
<dt>
<i>ppv</i></dt>
<dd>
[out] Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppv</i> contains the requested interface pointer.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
Location and connection to the specified class object was successful.</dd>
<dt>
REGDB_E_CLASSNOTREG </dt>
<dd>
CLSID is not properly registered. Can also indicate that the value you specified in <i>dwClsContext</i> is not in the registry.</dd>
<dt>
E_NOINTERFACE</dt>
<dd>
Either the object pointed to by <i>ppv</i> does not support the interface identified by <i>riid</i>, or the<b> QueryInterface</b> operation on the class object returned E_NOINTERFACE.</dd>
<dt>
REGDB_E_READREGDB </dt>
<dd>
Error reading the registration database.</dd>
<dt>
CO_E_DLLNOTFOUND</dt>
<dd>
In-process DLL or handler DLL not found (depends on context).</dd>
<dt>
CO_E_APPNOTFOUND </dt>
<dd>
EXE not found (CLSCTX_LOCAL_SERVER only).</dd>
<dt>
E_ACCESSDENIED</dt>
<dd>
General access failure (returned from <b>LoadLib/CreateProcess</b>).</dd>
<dt>
CO_E_ERRORINDLL</dt>
<dd>
EXE has error in image.</dd>
<dt>
CO_E_APPDIDNTREG</dt>
<dd>
EXE was launched, but it didn't register class object (may or may not have shut down).
</dd>
</dl>
<h4>Remarks</h4>
<p>
A class object in OLE is an intermediate object that supports an interface that permits operations common to a group of objects. The objects in this group are instances derived from the same object definition represented by a single CLSID. Usually, the interface implemented on a class object is <a href="if_a2e_9mk9.htm"><b>IClassFactory</b></a>, through which you can create object instances of a given definition (class).</p>
<p>
A call to <b>CoGetClassObject</b> creates, initializes, and gives the caller access (through a pointer to an interface specified with the <i>riid</i> parameter) to the class object. The class object is the one associated with the CLSID that you specify in the <i>rclsid</i> parameter. The details of how the system locates the associated code and data within a given machine are transparent to the caller, as is the dynamic loading of any code that is not already loaded. </p>
<p>
If the class context is CLSCTX_REMOTE_SERVER, indicating remote activation is required, the <a href="structs_34vj.htm"><b>COSERVERINFO</b></a> structure provided in the <i>pServerInfo</i> parameter allows you to specify the machine on which the server is located. For information on the algorithm used to locate a remote server when <i>pServerInfo</i> is NULL, refer to the <a href="enums_152w.htm"><b>CLSCTX</b></a> enumeration.</p>
<p>
There are two places to find a CLSID for a given class:
<ul>
<li>
The registry holds an association between CLSIDs and file suffixes, and between CLSIDs and file signatures for determining the class of an object.</li>
<li>
When an object is saved to persistent storage, its CLSID is stored with its data.</li>
</ul>
<p>
To create and initialize embedded or linked OLE document objects, it is not necessary to call <b>CoGetClassObject</b> directly. Instead, call one of the <a href="api3_6y5h.htm"><b>OleCreate</b></a> or <b>OleCreate</b><i>Xxx</i> helper functions. These functions encapsulate the entire object instantiation and initialization process, and call, among other functions, <b>CoGetClassObject</b>.</p>
<p>
The <i>riid</i> parameter specifies the interface the client will use to communicate with the class object. In most cases, this interface is <a href="if_a2e_9mk9.htm"><b>IClassFactory</b></a>. This provides access to the <a href="if_a2e_5k11.htm"><b>IClassFactory::CreateInstance</b></a> method, through which the caller can then create an uninitialized object of the kind specified in its implementation. All classes registered in the system with a CLSID must implement <b>IClassFactory</b>. </p>
<p>
In rare cases, however, you may want to specify some other interface that defines operations common to a set of objects. For example, in the way OLE implements monikers, the interface on the class object is <a href="if_p2q_4t5x.htm"><b>IParseDisplayName</b></a>, used to transform the display name of an object into a moniker.</p>
<p>
The <i>dwClsContext</i> parameter specifies the execution context, allowing one CLSID to be associated with different pieces of code in different execution contexts. The <a href="enums_152w.htm"><b>CLSCTX</b></a> enumeration, defined in Compobj.H, specifies the available context flags. <b>CoGetClassObject</b> consults (as appropriate for the context indicated) both the registry and the class objects that are currently registered by calling the <a href="api1_6kz8.htm"><b>CoRegisterClassObject</b></a> function. </p>
<p>
To release a class object, use the class object's <b>Release</b> method. The function <b>CoRevokeClassObject</b> is to be used only to remove a class object's CLSID from the system registry.</p>
<p>
<b>Windows CE:</b> Windows CE supports only the CLSCTX_INPROC_SERVER value for the <i>dwClsContext</i> parameter. For any other values, the function returns E_NOTIMPL. Since no remote server is allowed, <i>pServerInfo</i> must point to null.</p>
<p>
Passing into this function any invalid and, under some circumstances, NULL pointers will result in unexpected termination of the application. For more information about handling exceptions, see Programming Considerations.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Use version 2.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api1_5ry0.htm"><b>CoCreateInstanceEx</b></a>, <a href="api1_6kz8.htm"><b>CoRegisterClassObject</b></a>, <a href="api1_9y9g.htm"><b>CoRevokeClassObject</b></a>, <a href="api3_1cmc.htm"><b>OleLoad</b></a>, <a href="enums_152w.htm"><b>CLSCTX</b></a>, <a href="comext_4otw.htm"><b>Creating an Object through a Class Object</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IClassFactory::LockServer</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_iclassfactory_lockserver"></a>IClassFactory::LockServer</h2>
<p>
Called by the client of a class object to keep a server open in memory, allowing instances to be created more quickly.</p>
<pre><code><b>HRESULT LockServer(
  BOOL</b><i> fLock  </i>//Increments or decrements the lock count
<b>);</b>
 </code></pre>
<h4>Parameter</h4>
<dl>
<dt>
<i>fLock</i></dt>
<dd>
[in] If <b>TRUE</b>, increments the lock count; if <b>FALSE</b>, decrements the lock count.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return values E_FAIL, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The specified object was either locked ( <i>fLock</i> = TRUE) or unlocked from memory ( <i>fLock</i> = FALSE).
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>IClassFactory::LockServer</b> controls whether an object's server is kept in memory. Keeping the application alive in memory allows instances to be created more quickly.</p>
<h5>Notes to Callers</h5>
<p>
Most clients do not need to call this function. It is provided only for those clients that require special performance in creating multiple instances of their objects. </p>
<h5>Notes to Implementers</h5>
<p>
If the lock count is zero, there are no more objects in use, and the application is not under user control, the server can be closed. One way to implement <b>IClassFactory::LockServer</b> is to call <a href="api1_5ajw.htm"><b>CoLockObjectExternal</b></a>. </p>
<p>
The process that locks the object application is responsible for unlocking it. Once the class object is released, there is no mechanism that guarantees the caller connection to the same class later (as in the case where a class object is registered as single-use). It is important to count all calls, not just the last one, to <b>IClassFactory::LockServer</b>, because calls must be balanced before attempting to release the pointer to the <b>IClassFactory</b> interface on the class object or an error results. For every call to <b>LockServer</b> with <i>fLock</i> set to TRUE, there must be a call to <b>LockServer</b> with <i>fLock</i> set to FALSE. When the lock count and the class object reference count are both zero, the class object can be freed.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in unknwn.h.</p>
<h4>See Also</h4>
<p>
<a href="api1_5ajw.htm"><b>CoLockObjectExternal</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

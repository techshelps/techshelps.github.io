<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IStream::CopyTo</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_istream_copyto"></a>IStream::CopyTo</h2>
<p>
Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.</p>
<pre><code><b>HRESULT CopyTo(
  IStream *</b><i> pstm</i><b>,            </b>//Points to the destination stream
<b>  ULARGE_INTEGER</b><i> cb</i><b>,         </b>//Specifies the number of bytes to copy
<b>  ULARGE_INTEGER *</b><i> pcbRead</i><b>,  </b>//Pointer to the actual number of bytes 
                             // read from the source
<b>  ULARGE_INTEGER *</b><i> pcbWritten  </i>//Pointer to the actual number of 
                               // bytes written to the destination
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pstm</i></dt>
<dd>
[in] Points to the destination stream. The stream pointed to by <i>pstm</i> can be a new stream or a clone of the source stream.</dd>
<dt>
<i>cb</i></dt>
<dd>
[in] Specifies the number of bytes to copy from the source stream.</dd>
<dt>
<i>pcbRead</i></dt>
<dd>
[out] Pointer to the location where this method writes the actual number of bytes read from the source. You can set this pointer to NULL to indicate that you are not interested in this value. In this case, this method does not provide the actual number of bytes read.</dd>
<dt>
<i>pcbWritten</i></dt>
<dd>
[out] Pointer to the location where this method writes the actual number of bytes written to the destination. You can set this pointer to NULL to indicate that you are not interested in this value. In this case, this method does not provide the actual number of bytes written.</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The stream object was successfully copied.</dd>
<dt>
E_PENDING</dt>
<dd>
Asynchronous Storage only: Part or all of the data to be copied is currently unavailable. For more information see <a href="if_f2n_5xdf.htm"><b>IFillLockBytes</b></a> and <a href="asyncstg_86cl.htm">Asynchronous Storage</a>. </dd>
<dt>
STG_E_INVALIDPOINTER</dt>
<dd>
The value of one of the pointer parameters is not valid.</dd>
<dt>
STG_E_MEDIUMFULL</dt>
<dd>
The stream is not copied because there is no space left on the storage device.</dd>
<dt>
STG_E_REVERTED</dt>
<dd>
The object has been invalidated by a revert operation above it in the transaction tree.
</dd>
</dl>
<h4>Remarks</h4>
<p>
This method copies the specified bytes from one stream to another. The seek pointer in each stream instance is adjusted for the number of bytes read or written. This method is equivalent to reading <i>cb</i> bytes into memory using <a href="if_r2z_14mc.htm"><b>ISequentialStream::Read</b></a> and then immediately writing them to the destination stream using <a href="if_r2z_3yat.htm"><b>ISequentialStream::Write</b></a>, although <b>IStream::CopyTo</b> will be more efficient.</p>
<p>
The destination stream can be a clone of the source stream created by calling the <a href="if_r2z_6ov9.htm"><b>IStream::Clone</b></a> method.</p>
<p>
If <b>IStream::CopyTo</b> returns an error, you cannot assume that the seek pointers are valid for either the source or destination. Additionally, the values of <i>pcbRead</i> and <i>pcbWritten</i> are not meaningful even though they are returned.</p>
<p>
If <b>IStream::CopyTo</b> returns successfully, the actual number of bytes read and written are the same.</p>
<p>
To copy the remainder of the source from the current seek pointer, specify the maximum large integer value for the <i>cb</i> parameter. If the seek pointer is the beginning of the stream, this technique copies the entire stream.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_r2z_459q.htm"><b>IStream - Compound File Implementation</b></a>, <a href="if_r2z_14mc.htm"><b>ISequentialStream::Read</b></a>, <a href="if_r2z_3yat.htm"><b>ISequentialStream::Write</b></a>, <a href="if_r2z_6ov9.htm"><b>IStream::Clone</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

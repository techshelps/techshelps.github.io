<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ReleaseStgMedium</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_releasestgmedium"></a>ReleaseStgMedium</h1>
<p>
Frees the specified storage medium.</p>
<pre><code><b>void ReleaseStgMedium(
  STGMEDIUM *</b><i> pmedium  </i>//Pointer to storage medium to be freed
<b>);</b>
 </code></pre>
<h4>Parameter</h4>
<dl>
<dt>
<i>pmedium</i></dt>
<dd>
[in] Pointer to the storage medium that is to be freed.
</dd>
</dl>
<h4>Return Value</h4>
<p>
None.</p>
<h4>Remarks</h4>
<p>
The<b> ReleaseStgMedium</b> function calls the appropriate method or function to release the specified storage medium. Use this function during data transfer operations where storage medium structures are parameters, such as <a href="if_a2e_1jz5.htm"><b>IDataObject::GetData</b></a> or <a href="if_a2e_438h.htm"><b>IDataObject::SetData</b></a>. In addition to identifying the type of the storage medium, this structure specifies the appropriate <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a> method for releasing the storage medium when it is no longer needed. </p>
<p>
It is common to pass a STGMEDIUM from one body of code to another, such as in <a href="if_a2e_1jz5.htm"><b>IDataObject::GetData</b></a>, in which the one called can allocate a medium and return it to the caller. <b>ReleaseStgMedium</b> permits flexibility in whether the receiving body of code owns the medium, or whether the original provider of the medium still owns it, in which case the receiving code needs to inform the provider that it can free the medium.</p>
<p>
When the original provider of the medium is responsible for freeing the medium, the provider calls <b>ReleaseStgMedium</b>, specifying the medium and the appropriate <b>IUnknown</b> pointer as the <i>punkForRelease</i> structure member. Depending on the type of storage medium being freed, one of the following actions is taken, followed by a call to the <b>Release</b> method on the specified <b>IUnknown</b> pointer:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>Medium</th>
<th align=left width=64%>ReleaseStgMedium Action</th>
</tr>
<tr valign=top>
<td width=36%>TYMED_HGLOBAL</td>
<td width=64%>None.</td>
</tr>
<tr valign=top>
<td width=36%>TYMED_GDI</td>
<td width=64%>None.</td>
</tr>
<tr valign=top>
<td width=36%>TYMED_ENHMF</td>
<td width=64%>None.</td>
</tr>
<tr valign=top>
<td width=36%>TYMED_MFPICT</td>
<td width=64%>None.</td>
</tr>
<tr valign=top>
<td width=36%>TYMED_FILE</td>
<td width=64%>Frees the file name string using standard memory management mechanisms.</td>
</tr>
<tr valign=top>
<td width=36%>TYMED_ISTREAM</td>
<td width=64%>Calls <b>IStream::Release</b>.</td>
</tr>
<tr valign=top>
<td width=36%>TYMED_ISTORAGE</td>
<td width=64%>Calls <b>IStorage::Release</b>.</td>
</tr>
</table><br>
<p>
The provider indicates that the receiver of the medium is responsible for freeing the medium by specifying NULL for the <i>punkForRelease</i> structure member. Then the receiver calls <b>ReleaseStgMedium</b>, which makes a call as described in the following table depending on the type of storage medium being freed:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>Medium</th>
<th align=left width=64%>ReleaseStgMedium Action</th>
</tr>
<tr valign=top>
<td width=36%>TYMED_HGLOBAL</td>
<td width=64%>Calls the Win32 <b>GlobalFree</b> function on the handle.</td>
</tr>
<tr valign=top>
<td width=36%>TYMED_GDI</td>
<td width=64%>Calls the Win32 <b>DeleteObject</b> function on the handle.</td>
</tr>
<tr valign=top>
<td width=36%>TYMED_ENHMF</td>
<td width=64%>Deletes the enhanced metafile.</td>
</tr>
<tr valign=top>
<td width=36%>TYMED_MFPICT</td>
<td width=64%>The <i>hMF</i> that it contains is deleted with the Win32 <b>DeleteMetaFile </b>function; then the handle itself is passed to <b>GlobalFree</b>.</td>
</tr>
<tr valign=top>
<td width=36%>TYMED_FILE</td>
<td width=64%>Frees the disk file by deleting it. Frees the file name string by using the standard memory management paradigm.</td>
</tr>
<tr valign=top>
<td width=36%>TYMED_ISTREAM</td>
<td width=64%><b>Calls IStream::Release</b>.</td>
</tr>
<tr valign=top>
<td width=36%>TYMED_ISTORAGE</td>
<td width=64%><b>Calls IStorage::Release</b>.</td>
</tr>
</table><br>
<p>
In either case, after the call to <b>ReleaseStgMedium</b>, the specified storage medium is invalid and can no longer be used.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ole2.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="structs_0gfh.htm"><b>STGMEDIUM</b></a> structure </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

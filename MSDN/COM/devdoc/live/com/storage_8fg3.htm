<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Interfaces</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_com_interfaces"></a>Interfaces</h3>
<p>
Structured storage services are organized into three categories of interfaces. Each set represents a successive level of indirection, or abstraction, between a compound file, the objects it contains, and the physical media on which these individual components are stored.</p>
<p>
The first category of interfaces consists of <a href="if_r2z_9b8l.htm"><b>IStorage</b></a>, <a href="if_r2z_4x7x.htm"><b>IStream</b></a>, and <a href="if_r2z_63s5.htm"><b>IRootStorage</b></a>. The first two interfaces define how objects are stored <i>within</i> a compound file. These interfaces provide methods for opening storage elements, committing and reverting changes, copying and moving elements, and reading and writing streams. These interfaces do not understand the native data formats of the individual objects and therefore have no methods for saving those objects to persistent storage. The <b>IRootStorage</b> interface has a single method for associating a compound document with an underlying file system name. Clients are responsible for implementing these interfaces on behalf of their compound files.</p>
<p>
The second category of interfaces consists of the <a href="if_p2q_3lbo.htm"><b>IPersist</b></a> interfaces, which objects implement to manage their persistent data. These interfaces provide methods to read the data formats of individual objects and therefore know how to store them. Objects are responsible for implementing these interfaces because clients do not know the native data formats of their nested objects. These interfaces, however, have no knowledge of specific physical storage media.</p>
<p>
A third category consists of a single interface, <a href="if_f2n_9q9f.htm"><b>ILockBytes</b></a>, which provides methods for writing files to specific physical media, such as a hard disk or tape drive. COM provides an <b>ILockBytes</b> interface for the operating system's file system.</p>
<p>&nbsp;</p></body>
</HTML>

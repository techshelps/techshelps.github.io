<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EOLE_AUTHENTICATION_CAPABILITIES</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_eole_authentication_capabilities"></a>EOLE_AUTHENTICATION_CAPABILITIES</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>EOLE_AUTHENTICATION_CAPABILITIES</b> enumeration constants set various capabilities in <a href="api1_8ayh.htm"><b>CoInitializeSecurity</b></a> and <a href="if_a2e_0q0k.htm"><b>IClientSecurity::SetBlanket</b></a> (or its helper function <a href="api1_9sj8.htm"><b>CoSetProxyBlanket</b></a>.</p>
<p>
It has the following definition:</p>
<pre><code>typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES  
{ 
    EOAC_NONE                    = 0x0,  
    EOAC_DEFAULT                 = 0x800,  
    EOAC_MUTUAL_AUTH             = 0x1,  
    EOAC_STATIC_CLOAKING         = 0x20,  
    EOAC_DYNAMIC_CLOAKING        = 0x40,  
    EOAC_ANY_AUTHORITY           = 0x80,  
// These are only valid for CoInitializeSecurity
    EOAC_SECURE_REFS             = 0x2, 
    EOAC_ACCESS_CONTROL          = 0x4, 
    EOAC_APPID                   = 0x8, 
    EOAC_MAKE_FULLSIC            = 0x100, 
    EOAC_REQUIRE_FULLSIC         = 0x200, 
    EOAC_AUTO_IMPERSONATE        = 0x400 
} EOLE_AUTHENTICATION_CAPABILITIES; 
 </code></pre>
<h4>Elements</h4>
<dl>
<dt>
EOAC_NONE</dt>
<dd>
Indicates that no capability flags are set.</dd>
<dt>
EOAC_DEFAULT</dt>
<dd>
Tells DCOM to pick the capabilities using its normal security blanket negotiation algorithm. This value can be used with Windows NT 5.0 and later versions. </dd>
<dt>
EOAC_MUTUAL_AUTH</dt>
<dd>
Unused. If this flag is specified, it will be ignored. Support for mutual authentication is automatically provided by some authentication services. See <a href="comext_08j7.htm"><b>COM and Security Packages</b></a> for more information.</dd>
<dt>
EOAC_STATIC_CLOAKING</dt>
<dd>
Sets static cloaking. When this flag is set, DCOM uses the thread token (if present) when determining the client's identity. However, the client's identity is determined on the first call on each proxy (if <a href="if_a2e_0q0k.htm"><b>SetBlanket</b></a> is not called) and each time <b>CoSetProxyBlanket</b> is called on the proxy. This value can be used with Windows NT 5.0 and later versions. For more information about static cloaking, see <a href="comext_71lz.htm"><b>Cloaking</b></a>.</dd>
<dt>
EOAC_DYNAMIC_CLOAKING</dt>
<dd>
Sets dynamic cloaking. When this flag is set, DCOM uses the thread token (if present) when determining the client's identity. Unlike static cloaking, the current thread token is used to determine the client's identity on <i>each</i> call to a proxy. This capability is extremely expensive. This value can be used with Windows NT 5.0 and later versions. For more information about dynamic cloaking, see <a href="comext_71lz.htm"><b>Cloaking</b></a>.</dd>
<dt>
EOAC_ANY_AUTHORITY</dt>
<dd>
Tells DCOM to trust an SSL server certificate even if the top level certificate authority is not trusted. That is, when a call arrives using SSL, DCOM will allow the call even if the top level certificate authority is not installed on the machine. This value can be used with Windows NT 5.0 and later versions. </dd>
<dt>
EOAC_SECURE_REFS</dt>
<dd>
Authenticates distributed reference count calls to prevent malicious users from releasing objects. If this capability flag is set in <b>CoInitializeSecurity</b>, the authentication level (in <i>dwAuthnLevel</i>) cannot be set to none. </dd>
<dt>
EOAC_ACCESS_CONTROL</dt>
<dd>
Indicates that the <i>pVoid</i> parameter to <b>CoInitializeSecurity</b> is a pointer to an <b>IAccessControl</b> interface on an access control object. When DCOM makes security checks, it calls <b>IAccessControl::IsAccessAllowed</b>. </dd>
<dt>
EOAC_APPID</dt>
<dd>
Indicates that the <i>pVoid</i> parameter to <b>CoInitializeSecurity</b> is a pointer to a GUID that is an AppID. The <b>CoInitializeSecurity</b> function looks up the AppID in the registry and reads the security settings from there. If this flag is set, all other parameters to <b>CoInitializeSecurity</b> are ignored and must be zero. For more information about this capability flag, see the Remarks below. </dd>
<dt>
EOAC_MAKE_FULLSIC</dt>
<dd>
Causes DCOM to generate SSL principal names in marshalled interfaces in the fullsic form by default. This value can be used with Windows NT 5.0 and later versions. </dd>
<dt>
EOAC_REQUIRE_FULLSIC</dt>
<dd>
Causes DCOM to fail <a href="api1_6gbp.htm"><b>CoUnmarshalInterface</b></a> for any interface that contains an SSL principal name that is not in the fullsic form. This value can be used with Windows NT 5.0 and later versions. </dd>
<dt>
EOAC_AUTO_IMPERSONATE</dt>
<dd>
Tells DCOM to impersonate every call before dispatching to the application. When this capability flag is set, the <i>dwAuthnLevel</i> parameter must not be set to RPC_C_AUTHN_LEVEL_NONE. For more information on auto-impersonation, see the <a href="comext_6d9q.htm"><b>Impersonation</b></a> section. This value can be used with Windows NT 5.0 and later versions. 
</dd>
</dl>
<h4>Remarks</h4>
<p>
When the EOAC_APPID flag is set, <a href="api1_8ayh.htm"><b>CoInitializeSecurity</b></a> looks for the authentication level under the AppID. If the authentication level is not found, it looks for the default authentication level. If the default authentication level is not found, it generates a default authentication level of <i>connect</i>. If the authentication level is not RPC_C_AUTHN_LEVEL_NONE, <b>CoInitializeSecurity</b> looks for the access permission value under the AppID. If not found, it looks for the default access permission value. If not found, it generates a default access permission. All the other security settings are determined the same way as for a legacy application.</p>
<p>
The <a href="if_a2e_0q0k.htm"><b>IClientSecurity::SetBlanket</b></a> method and <a href="api1_9sj8.htm"><b>CoSetProxyBlanket</b></a> function return an error if you set any of the following flags in the capabilities parameter: EOAC_SECURE_REFS, EOAC_ACCESS_CONTROL, EOAC_APPID, EOAC_MAKE_FULLSIC, EOAC_REQUIRE_FULLSIC, or EOAC_AUTO_IMPERSONATION. </p>
<p>
The <b>CoInitializeSecurity</b> function returns an error if both the EOAC_APPID and EOAC_ACCESS_CONTROL flags are set. Also, <b>CoInitializeSecurity</b> and <b>IClientSecurity::SetBlanket</b> return errors if both cloaking flags are set. </p>
<p>
Because SSL does not support cloaking, if either cloaking flag is specified to <b>CoInitializeSecurity</b> in the <i>dwCapabilities</i> parameter, either or both of the two following things may happen: If SSL is specified in <i>pAuthInfo</i>, <b>CoInitializeSecurity</b> will return E_INVALIDARG. If <i>cAuthSvc</i> is set to -1, DCOM will never pick SSL as the default authentication service for proxies.</p>
<p>
For more information on the fullsic form for principal names, see <a href="comext_08j7.htm"><b>COM and Security Packages</b></a>.</p>
<h4>See Also</h4>
<p>
<a href="api1_8ayh.htm"><b>CoInitializeSecurity</b></a>, <a href="if_a2e_0q0k.htm"><b>IClientSecurity::SetBlanket</b></a>, <a href="api1_9sj8.htm"><b>CoSetProxyBlanket</b></a>, <a href="if_a2e_912k.htm"><b>IAccessControl</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

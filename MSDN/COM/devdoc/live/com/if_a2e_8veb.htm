<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IEnumConnectionPoints</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_ienumconnectionpoints"></a>IEnumConnectionPoints</h1>
<p>
This interface enumerates connection points. Connectable objects support the following features:
<ul>
<li>
Outgoing interfaces, such as event sets</li>
<li>
The ability to enumerate the IIDs of the outgoing interfaces</li>
<li>
The ability to connect and disconnect sinks to the object for those outgoing IIDs</li>
<li>
The ability to enumerate the connections that exist to a particular outgoing interface</li>
</ul>
<h5>When to Implement</h5>
<p>
To support connectable objects, you need to provide four related interfaces:
<ul>
<li>
<a href="if_a2e_5h2q.htm"><b>IConnectionPointContainer</b></a> </li>
<li>
<a href="#_com_ienumconnectionpoints"><b>IEnumConnectionPoints</b></a> </li>
<li>
<a href="if_a2e_2ar8.htm"><b>IConnectionPoint</b></a> </li>
<li>
<a href="if_a2e_829f.htm"><b>IEnumConnections</b></a> </li>
</ul>
<p>
The <b>IConnectionPointContainer</b> interface indicates the existence of the outgoing interfaces. It provides access to an enumerator sub-object with the <b>IEnumConnectionPoints</b> interface. It also provides a connection point sub-object with the <b>IConnectionPoint</b> interface. The <b>IConnectionPoint</b> interface provides access to an enumerator sub-object with the <b>IEnumConnections</b> interface.</p>
<p>
The connection point is a separate sub-object to avoid circular reference counting problems.</p>
<p>
A connectable object can be asked to enumerate its supported connection points through <b>IConnectionPointContainer::EnumConnectionPoints</b>. The resulting enumerator returned from this method implements the interface <b>IEnumConnectionPoints</b>, through which a client can access all the individual connection point sub-objects supported within the connectable object itself, where each connection point implements <b>IConnectionPoint</b>.</p>
<p>
When enumerating connections through <b>IEnumConnectionPoints</b>, the enumerator is responsible for calling <b>IUnknown::AddRef</b>, and the caller is responsible for later calling <b>IUnknown::Release</b> when those pointers are no longer needed.</p>
<h5>When to Use</h5>
<p>
Use the <b>IEnumConnectionPoints</b> interface to enumerate all the supported connection points for each outgoing IID.</p>
<p>
The prototypes of the methods are as follows:</p>
<pre><code><b>HRESULT Next(
  ULONG</b><i> cConnections</i><b>,  </b>//[in]Number of IConnectionPoint values 
                       // returned in <i>rgpcn</i> array
<b>  IConnectionPoint</b><i> **rgpcn</i><b>,</b>
<b>                       </b>//[out]Array to receive enumerated connection 
                       // points
<b>  ULONG</b><i> *pcFetched     </i>//[out]Pointer to the actual number of 
                       // connection points returned in <i>rgpcn</i> array
<b>);</b>
 
<b>HRESULT Skip(</b>
<b>  ULONG</b><i> cConnections  </i>//[in]Number of elements to skip
<b>);</b>
 
<b>HRESULT Reset(void);</b>
 
<b>HRESULT Clone(</b>
<b>  IEnumConnectionPoints</b><i> **ppEnum  </i>//[out]Address of output variable 
                                  // that receives the 
                                  // IEnumConnectionPoints interface 
                                  // pointer
<b>);</b>
 </code></pre>
<h4>Remarks</h4>
<dl>
<dt>
<b>IEnumConnectionPoints::Next</b></dt>
<dd>
Enumerates the next <i>cConnections</i> elements (<b>IConnectionPoint</b> pointers) in the enumerator's list, returning them in <i>rgpcn</i> along with the actual number of enumerated elements in <i>pcFetched</i>. The enumerator calls <b>IConnectionPoint::AddRef</b> for each returned pointer in <i>rgpcn</i>, and the caller is responsible for calling <b>IConnectionPoint::Release</b> through each pointer when those pointers are no longer needed.
<p>
E_NOTIMPL is not allowed as a return value. If an error value is returned, no entries in the <i>rgpcn</i> array are valid on exit and require no release.
</dd>
<dt>
<b>IEnumConnectionPoints::Skip</b></dt>
<dd>
Instructs the enumerator to skip the next <i>cConnections</i> elements in the enumeration so that the next call to <b>IEnumConnectionPoints::Next</b> will not return those elements.</dd>
<dt>
<b>IEnumConnectionPoints::Reset</b></dt>
<dd>
Instructs the enumerator to position itself at the beginning of the list of elements.
<p>
There is no guarantee that the same set of elements will be enumerated on each pass through the list, nor will the elements necessarily be enumerated in the same order. The exact behavior depends on the collection being enumerated. It is too expensive for some collections, such as files in a directory, to maintain a specific state.
</dd>
<dt>
<b>IEnumConnectionPoints::Clone</b></dt>
<dd>
Creates another connection point enumerator with the same state as the current enumerator to iterate over the same list. This method makes it possible to record a point in the enumeration sequence in order to return to that point at a later time.
<p>
The caller must release this new enumerator separately from the first enumerator.

</dd>
</dl>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ocidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_a2e_2ar8.htm"><b>IConnectionPoint</b></a>, <a href="if_a2e_5h2q.htm"><b>IConnectionPointContainer</b></a>, <a href="if_a2e_829f.htm"><b>IEnumConnections</b></a>, <a href="if_a2e_8yns.htm"><b>IEnum<i>Xxxx</i></b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

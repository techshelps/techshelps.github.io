<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateGenericComposite</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_creategenericcomposite"></a>CreateGenericComposite</h1>
<p>
Performs a generic composition of two monikers and supplies a pointer to the resulting composite moniker.</p>
<pre><code><b>WINOLEAPI CreateGenericComposite(
  LPMONIKER</b><i> pmkFirst</i><b>, </b>//Pointer to the first moniker
<b>  LPMONIKER</b><i> pmkRest</i><b>,  </b>//Pointer to the second moniker
<b>  LPMONIKER FAR</b><i> *ppmkComposite</i>
<i>                      </i>//Address of output variable that receives the 
                      // IMoniker interface pointer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pmkFirst</i></dt>
<dd>
[in] Pointer to the moniker to be composed to the left of the moniker that <i>pmkRest</i> points to. Can point to any kind of moniker, including a generic composite.</dd>
<dt>
<i>pmkRest</i></dt>
<dd>
[in] Pointer to the moniker to be composed to the right of the moniker that <i>pmkFirst</i> points to. Can point to any kind of moniker compatible with the type of the <i>pmkRest</i> moniker, including a generic composite.</dd>
<dt>
<i>ppmkComposite</i></dt>
<dd>
[out] Address of <b>IMoniker</b>* pointer variable that receives the interface pointer to the composite moniker object that is the result of composing <i>pmkFirst</i> and <i>pmkRest</i>. This object supports the OLE composite moniker implementation of <b>IMoniker</b>. When successful, the function has called <a href="if_r2z_3rja.htm"><b>IUnknown::AddRef</b></a> on the moniker and the caller is responsible for calling <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a>. If either <i>pmkFirst</i> or <i>pmkRest</i> are NULL, the supplied pointer is the one that is non-NULL. If both <i>pmkFirst</i> and <i>pmkRest</i> are NULL, or if an error occurs, the returned pointer is NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return value E_OUTOFMEMORY, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
The two input monikers were successfully composed.</dd>
<dt>
MK_E_SYNTAX</dt>
<dd>
The two monikers could not be composed due to an error in the syntax of a path (for example, if both <i>pmkFirst</i> and <i>pmkRest</i> are file monikers based on absolute paths).
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>CreateGenericComposite</b> joins two monikers into one. The moniker classes being joined can be different, subject only to the rules of composition. Call this function only if you are writing a new moniker class by implementing the <b>IMoniker</b> interface, within an implementation of <a href="if_f2n_8cx4.htm"><b>IMoniker::ComposeWith</b></a> that includes generic composition capability.</p>
<p>
Moniker providers should call <b>IMoniker::ComposeWith</b> to compose two monikers together. Implementations of <b>ComposeWith</b> should (as do OLE implementations) attempt, when reasonable for the class, to perform non-generic compositions first, in which two monikers of the same class are combined. If this is not possible, the implementation can call <b>CreateGenericComposite</b> to do a generic composition, which combines two monikers of different classes, within the rules of composition. You can define new types of non-generic compositions if you write a new moniker class. </p>
<p>
During the process of composing the two monikers, <b>CreateGenericComposite</b> makes all possible simplifications. Consider the example where <i>pmkFirst</i> is the generic composite moniker, <i>A</i> + <i>B</i> + <i>C</i>, and <i>pmkRest</i> is the generic composite moniker, <i>C  (-1) </i> + <i>B  (-1) </i> + <i>Z</i> (where <i>C  (-1) </i> is the inverse of <i>C</i>). The function first composes <i>C</i> to <i>C  (-1) </i>, which composes to nothing. Then it composes <i>B</i> and <i>B  (-1) </i> to nothing. Finally, it composes <i>A</i> to <i>Z</i>, and supplies a pointer to the generic composite moniker, <i>A</i> + <i>Z</i>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="if_f2n_8cx4.htm"><b>IMoniker::ComposeWith</b></a>, <a href="if_f2n_09m6.htm"><b>IMoniker - Generic Composite Moniker Implementation</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

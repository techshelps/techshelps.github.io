<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMoniker - Anti-Moniker Implementation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_imoniker_anti_moniker_implementation"></a>IMoniker - Anti-Moniker Implementation</h1>
<p>
Anti-monikers are the inverse of the COM implementations of file, item, and pointer monikers. That is, an anti-moniker composed to the right of a file moniker, item moniker, or pointer moniker composes to nothing. </p>
<h5>When To Use</h5>
<p>
If you're a moniker client, you typically do not need to use anti-monikers. When you need the inverse of a moniker, you should call <a href="if_f2n_2zvp.htm"><b>IMoniker::Inverse</b></a>. For example, if you need an inverse to remove the last piece of a composite moniker, use <a href="if_f2n_44od.htm"><b>IMoniker::Enum</b></a> to enumerate the pieces of the moniker and call <b>IMoniker::Inverse</b> on the rightmost piece. You shouldn't use an anti-moniker for this purpose because you can't be sure that the rightmost piece of a composite considers an anti-moniker to be its inverse. </p>
<p>
The only situation in which you should explicitly use an anti-moniker is if you are writing a new moniker class and if you have no special requirements for constructing inverses to your monikers. In that situation, you can return anti-monikers from your implementation of <b>IMoniker::Inverse</b>. In your implementation of <a href="if_f2n_8cx4.htm"><b>IMoniker::ComposeWith</b></a>, you should then annihilate one of your monikers for every anti-moniker you encounter. </p>
<h4>Remarks</h4>
<dl>
<dt>
<a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a> </dt>
<dd>
This method is not implemented. It returns E_NOTIMPL.</dd>
<dt>
<a href="if_f2n_1kx1.htm"><b>IMoniker::BindToStorage</b></a> </dt>
<dd>
This method is not implemented. It returns E_NOTIMPL.</dd>
<dt>
<a href="if_f2n_79d1.htm"><b>IMoniker::Reduce</b></a> </dt>
<dd>
This method returns MK_S_REDUCED_TO_SELF and passes back the same moniker.</dd>
<dt>
<a href="if_f2n_8cx4.htm"><b>IMoniker::ComposeWith</b></a> </dt>
<dd>
If <i>fOnlyIfNotGeneric</i> is TRUE, this method sets <i>ppmkComposite</i> to NULL moniker and returns MK_E_NEEDGENERIC; otherwise, the method returns the result of combining the two monikers into a generic composite. Note that composing a file, item, or pointer moniker to the right of an anti-moniker produces a generic composite rather than composing to nothing, as would be the case if the order of composition were reversed. </dd>
<dt>
<a href="if_f2n_44od.htm"><b>IMoniker::Enum</b></a> </dt>
<dd>
This method returns S_OK and sets *<i>ppenumMoniker</i> to NULL.</dd>
<dt>
<a href="if_f2n_7mp8.htm"><b>IMoniker::IsEqual</b></a> </dt>
<dd>
This method returns S_OK if both are anti-monikers; otherwise, it returns S_FALSE.</dd>
<dt>
<a href="if_f2n_9uaw.htm"><b>IMoniker::Hash</b></a> </dt>
<dd>
This method calculates a hash value for the moniker.</dd>
<dt>
<a href="if_f2n_62g7.htm"><b>IMoniker::IsRunning</b></a> </dt>
<dd>
This method checks the ROT to see if the object is running.</dd>
<dt>
<a href="if_f2n_0k9x.htm"><b>IMoniker::GetTimeOfLastChange</b></a> </dt>
<dd>
This method is not implemented (that is, it returns E_NOTIMPL).</dd>
<dt>
<a href="if_f2n_2zvp.htm"><b>IMoniker::Inverse</b></a> </dt>
<dd>
This method returns MK_E_NOINVERSE and sets *<i>ppmk</i> to NULL.</dd>
<dt>
<a href="if_f2n_9nu0.htm"><b>IMoniker::CommonPrefixWith</b></a> </dt>
<dd>
If the other moniker is also an anti-moniker, the method returns MK_S_US and sets <i>ppmkPrefix</i> to this moniker. Otherwise, the method calls the <a href="api2_9l2g.htm"><b>MonikerCommonPrefixWith</b></a> function. This function correctly handles the case where the other moniker is a generic composite.</dd>
<dt>
<a href="if_f2n_30j3.htm"><b>IMoniker::RelativePathTo</b></a> </dt>
<dd>
This method returns MK_S_HIM and sets *<i>ppmkRelPath</i> to the other moniker.</dd>
<dt>
<a href="if_f2n_1tb9.htm"><b>IMoniker::GetDisplayName</b></a> </dt>
<dd>
For each anti-moniker contained in this moniker, this method return one instance of "\.."</dd>
<dt>
<a href="if_f2n_6ecl.htm"><b>IMoniker::ParseDisplayName</b></a> </dt>
<dd>
This method is not implemented (that is, it returns E_NOTIMPL).</dd>
<dt>
<a href="if_f2n_4mr6.htm"><b>IMoniker::IsSystemMoniker</b></a> </dt>
<dd>
This method returns S_OK and indicates MKSYS_ANTIMONIKER.</dd>
</dl>
<h4>See Also</h4>
<p>
<a href="api2_6vci.htm"><b>CreateAntiMoniker</b></a>, <a href="if_f2n_8otu.htm"><b>IMoniker</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

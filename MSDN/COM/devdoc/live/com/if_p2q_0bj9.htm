<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPropertyStorage::WriteMultiple</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_ipropertystorage_writemultiple"></a>IPropertyStorage::WriteMultiple</h2>
<p>
Writes a specified group of properties to the current property set. If a property with a specified name already exists, it is replaced, even when the old and new types for the property value are different. If a property of a given name or property identifier does not exist, it is created. </p>
<pre><code><b>HRESULT WriteMultiple(
  ULONG</b><i> cpspec</i><b>,           </b>//The number of properties being set
<b>  PROPSPEC const</b><i> rgpspec[]</i><b>,  </b>//Property specifiers
<b>  PROPVARIANT const</b><i> rgvar[]</i><b>,  </b>//Array of PROPVARIANT values
<b>  PROPID</b><i> propidNameFirst  </i>//Minimum value for property identifiers 
                          //when they must be allocated
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>cpspec</i></dt>
<dd>
[in] The number of properties being set. May legally be zero, though this is a no-op, writing no properties.</dd>
<dt>
<i>rgpspec</i>[]</dt>
<dd>
[in] Array of the specifiers to which properties are to be set. These are in no particular order, and may legally contain duplicates (the last specified is to take effect). A mixture of property identifiers and string names is permitted.</dd>
<dt>
<i>rgvar</i>[]</dt>
<dd>
[in] An array (of size <i>cpspec</i>) of PROPVARIANTs that contain the property values to be written. The array must be of the size specified by <i>cpspec</i>.</dd>
<dt>
<i>propidNameFirst</i></dt>
<dd>
[in] Specifies the minimum value for the property identifiers the method must assign if the <i>rgpspec</i> parameter specifies string-named properties for which no property identifiers currently exist. If all string-named properties specified already exist in this set, and thus already have property identifiers, this value is ignored. When not ignored, this value must be at least two (property identifiers 0and 1 are reserved for special uses) and less than 0x80000000 (property identifier values beyond that are reserved for special use).</dd>
<dt>
HRESULT_FROM_WIN32(ERROR_NO_UNICODE_TRANSLATION)</dt>
<dd>
There was a failed attempt to translate a Unicode string to or from Ansi.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return value E_UNEXPECTED, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
All of the indicated properties were successfully written.</dd>
<dt>
STG_E_ACCESSDENIED</dt>
<dd>
The requested access to the property storage object has been denied. No properties have been written. The property set was opened in STGM_READ mode.</dd>
<dt>
STG_E_INSUFFICIENTMEMORY</dt>
<dd>
There is not sufficient memory to perform this operation. Some properties may or may not have been written.</dd>
<dt>
STG_E_INVALIDPARAMETER</dt>
<dd>
At least one of the parameters is invalid. Some properties may not have been written. This error would be returned in several situations, for example: 1) <i>rgvar</i> may be NULL; 2) a stream- or storage-valued property is present in <i>rgpspec</i> but the property set was created without PROPSETFLAG_NONSIMPLE; 3) one or more property variant types may be invalid; 4) one of the PROPSPECs contains an illegal <i>ulKind</i> value.</dd>
<dt>
STG_E_INVALIDPOINTER</dt>
<dd>
May be returned when at least one of the pointers passed in is invalid. Some properties may or may not have been written. More frequently, an invalid pointer will instead result in an access violation.</dd>
<dt>
STG_E_WRITEFAULT</dt>
<dd>
Error writing the storage.</dd>
<dt>
STG_E_REVERTED</dt>
<dd>
The property set was reverted. For example, if the property set is deleted while open (by using <b>IPropertySetStorage::Delete</b>) this status would be returned.</dd>
<dt>
STG_E_MEDIUMFULL</dt>
<dd>
The disk is full. Some properties may or may not have been written.</dd>
<dt>
STG_E_PROPSETMISMATCHED</dt>
<dd>
An attempt was made to write a non-simple (stream- or storage-valued) property to a simple property set.
</dd>
</dl>
<h4>Remarks</h4>
<p>
If a specified property already exists, it's value is replaced with the new one, even when the old and new types for the property value are different. If you specify a property identifier that does not exist, that property is created. If a string name is supplied for a property which does not exist, the method will allocate a property identifier for that property, and the name will be added to the dictionary. </p>
<p>
When allocating a property identifier, the implementation can choose any value not currently in use in the property set for a property identifier, as long as it is not 0 or 1 or greater than 0x80000000, all of which are reserved values. The <i>propidNameFirst</i> parameter establishes a minimum value for property identifiers within the set, and must be greater than 1 and less than 0x80000000.</p>
<p>
If there is an attempt to write a property that already exists with an invalid parameter, the method should return STG_E_INVALIDPARAMETER; if the property does not exist, it should not be created. This behavior facilitates the use of a <b>ReadMultiple</b> – update – <b>WriteMultiple</b> sequence to update a group of properties without requiring that the calling code ensure that all the requested properties in the call to <b>ReadMultiple</b> were retrieved.</p>
<p>
It is recommended that property sets be created as Unicode, by not setting the PROPSETFLAG_ANSI flag in the <i>grfFlags</i> parameter of <b>IPropertySetStorage::Create</b>. It is also recommended that you avoid using VT_LPSTR values, and use VT_LPWSTR values instead. When the property set code page is Unicode, VT_LPSTR string values are converted to Unicode when stored, and back to multibyte string values when retrieved. When the code page of the property set is not Unicode, property names, VT_BSTR strings, and non-simple property values are converted to multibyte strings when stored, and converted back to Unicode when retrieved, all using the current system ANSI code page.</p>
<p>
To create stream or storage object as a property in a nonsimple property set, call <b>IPropertyStorage::WriteMultiple</b>. While you would also call this method to update simple properties, it is not an efficient way to update stream and storage objects in a property set. This is because updating one of these properties through a call to <b>WriteMultiple</b> creates in the property storage object a copy of the passed-in data, and the <b>IStorage</b> or <b>IStream</b> pointers are not retained beyond the duration of this call. It is usually more efficient to update stream or storage objects by first calling <b>IPropertyStorage::ReadMultiple</b> to get the interface pointer to the stream or storage, then writing data through the <b>IStream</b> or <b>IStorage</b> methods. </p>
<p>
A stream or storage opened through a property is always opened in direct mode, so an additional level of nested transaction is not introduced. There is still likely to be a transaction on the property set as a whole. Further, a property-based stream or storage is opened in read-write mode, if possible, given the mode on the property set; otherwise, read mode is used.</p>
<p>
When the copy is made, the underlying CopyTo operation on VT_STREAM properties operates on the current seek position of the source. The seek position is destroyed on failure, but on success it is at EOF. </p>
<p>
If a stream or storage property does not exist, passing an <b>IStream</b> or <b>IStorage</b> pointer with a value of NULL creates an empty stream or storage property value. If a stream or storage property is already open from a call to <b>ReadMultiple</b>, a NULL value must cause the <b>WriteMultiple</b> operation to truncate it and return S_OK, placing the previously returned stream- and storage-valued pointers into the reverted state (as happens in the compound file implementation.)</p>
<p>
Storage- and stream-valued properties always manifest themselves to downlevel clients as sibling streams or storages to the stream containing the main contents of the property set—they are never stored directly in-line in the property set. This allows smooth interoperability and control when down-level clients interact with up-level clients. Thus, from a downlevel perspective, property sets containing <b>IStream</b> or <b>IStorage</b> valued properties are always stored in a storage object, not a stream. The specific name of the sibling used is completely under the control of the <b>IPropertyStorage</b> implementation, as long as the name is from the non-reserved part of the <b>IStorage</b> name space. See Appendix C of the OLE Programmer's Guide for a discussion of the serialized property set format for further details. As is described there, the string name is stored in the same format as a VT_BSTR. Refer also to the earlier discussion in this method of multibyte to Unicode conversions for property names.</p>
<p>
If the <b>WriteMultiple</b> method returns an error when writing stream- or storage-valued properties (indirect properties), the amount of data actually written is undefined. If the caller requires consistency of the property set and its indirect properties when writing stream- and/or storage-valued properties, use of transacted mode is advised.</p>
<p>
If an implicit deletion of a stream- or storage-valued property occurs while that property is open, (as, for example, when a VT_I4 is written over a VT_STREAM), the deletion will succeed and place the previously returned IStream pointer in the reverted state.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_p2q_1uxx.htm"><b>IPropertySetStorage::Create</b></a>, <a href="if_p2q_6xd1.htm"><b>IPropertyStorage::ReadMultiple</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

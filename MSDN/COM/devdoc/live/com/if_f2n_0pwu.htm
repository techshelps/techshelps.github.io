<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMoniker - Pointer Moniker Implementation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_imoniker_pointer_moniker_implementation"></a>IMoniker - Pointer Moniker Implementation</h1>
<p>
A pointer moniker essentially wraps an interface pointer so that it looks like a moniker and can be passed to those interfaces that require monikers. Binding a pointer moniker is done by calling the pointer's <b>QueryInterface</b> method. </p>
<p>
Instances of pointer monikers refuse to be serialized, that is, <a href="if_p2q_3945.htm"><b>IPersistStream::Save</b></a> will return an error. These monikers can, however, be marshaled to a different process in an RPC call; internally, the system marshals and unmarshals the pointer using the standard paradigm for marshaling interface pointers.</p>
<h5>When to Use</h5>
<p>
Pointer monikers are rarely needed. Use pointer monikers only if you need monikers to identify objects that have no persistent representation. Pointer monikers allow such objects to participate in a moniker-binding operation. </p>
<h4>Remarks</h4>
<dl>
<dt>
<a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a> </dt>
<dd>
This method queries the wrapped pointer for the requested interface.</dd>
<dt>
<a href="if_f2n_1kx1.htm"><b>IMoniker::BindToStorage</b></a> </dt>
<dd>
This method queries the wrapped pointer for the requested interface.</dd>
<dt>
<a href="if_f2n_79d1.htm"><b>IMoniker::Reduce</b></a> </dt>
<dd>
This method returns MK_S_REDUCED_TO_SELF and passes back the same moniker.</dd>
<dt>
<a href="if_f2n_8cx4.htm"><b>IMoniker::ComposeWith</b></a> </dt>
<dd>
If <i>pmkRight</i> is an anti-moniker, the returned moniker is NULL; if <i>pmkRight</i> is a composite whose leftmost component is an anti-moniker, the returned moniker is the composite after the leftmost anti-moniker is removed. If <i>fOnlyIfNotGeneric</i> is FALSE, the returned moniker is a generic composite of the two monikers; otherwise, the method sets *<i>ppmkComposite</i> to NULL and returns MK_E_NEEDGENERIC.</dd>
<dt>
<a href="if_f2n_44od.htm"><b>IMoniker::Enum</b></a> </dt>
<dd>
This method is not implemented (that is, it returns E_NOTIMPL).</dd>
<dt>
<a href="if_f2n_7mp8.htm"><b>IMoniker::IsEqual</b></a> </dt>
<dd>
This method returns S_OK only if both are pointer monikers and the interface pointers that they wrap are identical.</dd>
<dt>
<a href="if_f2n_9uaw.htm"><b>IMoniker::Hash</b></a> </dt>
<dd>
This method calculates a hash value for the moniker.</dd>
<dt>
<a href="if_f2n_62g7.htm"><b>IMoniker::IsRunning</b></a> </dt>
<dd>
This method always returns S_OK, because the object identified by a pointer moniker must always be running.</dd>
<dt>
<a href="if_f2n_0k9x.htm"><b>IMoniker::GetTimeOfLastChange</b></a> </dt>
<dd>
This method is not implemented (that is, it returns E_NOTIMPL).</dd>
<dt>
<a href="if_f2n_2zvp.htm"><b>IMoniker::Inverse</b></a> </dt>
<dd>
This method returns an anti-moniker (i.e., the results of calling <a href="api2_6vci.htm"><b>CreateAntiMoniker</b></a>).</dd>
<dt>
<a href="if_f2n_9nu0.htm"><b>IMoniker::CommonPrefixWith</b></a> </dt>
<dd>
If the two monikers are equal, this method returns MK_S_US and sets *<i>ppmkPrefix</i> to this moniker. Otherwise, the method returns MK_E_NOPREFIX and sets *<i>ppmkPrefix</i> to NULL.</dd>
<dt>
<a href="if_f2n_30j3.htm"><b>IMoniker::RelativePathTo</b></a> </dt>
<dd>
This method is not implemented (that is, it returns E_NOTIMPL).</dd>
<dt>
<a href="if_f2n_1tb9.htm"><b>IMoniker::GetDisplayName</b></a> </dt>
<dd>
This method is not implemented (that is, it returns E_NOTIMPL).</dd>
<dt>
<a href="if_f2n_6ecl.htm"><b>IMoniker::ParseDisplayName</b></a> </dt>
<dd>
This method queries the wrapped pointer for the <a href="if_p2q_4t5x.htm"><b>IParseDisplayName</b></a> interface and passes the display name to <a href="if_p2q_4l5x.htm"><b>IParseDisplayName::ParseDisplayName</b></a>. </dd>
<dt>
<a href="if_f2n_4mr6.htm"><b>IMoniker::IsSystemMoniker</b></a> </dt>
<dd>
This method returns S_OK and indicates MKSYS_POINTERMONIKER.</dd>
</dl>
<h4>See Also</h4>
<p>
<a href="if_f2n_8otu.htm"><b>IMoniker</b></a>, <a href="api2_21iq.htm"><b>CreatePointerMoniker</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

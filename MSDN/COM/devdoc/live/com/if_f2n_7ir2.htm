<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMoniker - Class Moniker Implementation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_imoniker_class_moniker_implementation"></a>IMoniker - Class Moniker Implementation</h1>
<p>
Class monikers are monikers that represent an object class. Class monikers bind to the class object of the class for which they are created.</p>
<p>
Class monikers are most useful in composition with other types of monikers, such as file monikers or item monikers. Class monikers may also be composed to the right of monikers supporting binding to the <a href="if_a2e_5wz6.htm"><b>IClassActivator</b></a> interface. This allows <b>IClassActivator</b> to provide access to the class object and instances of the class.</p>
<h5>When to Use</h5>
<p>
To use class monikers, you must use the <a href="api2_1b8y.htm"><b>CreateClassMoniker</b></a> function to create the monikers.</p>
<h4>Remarks</h4>
<dl>
<dt>
<a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a> </dt>
<dd>
If <i>pmkLeft</i> is NULL, calls <a href="api1_6yb8.htm"><b>CoGetClassObject</b></a> using the CLSID the class moniker was initialized with (in <b>CreateClassMoniker</b> or through <b>MkParseDisplayName</b>) and the CLSCTX of the current pbc (IBindContext).
<p>
If <i>pmkLeft</i> is non-NULL, calls <i>pmkLeft</i>-&gt;<b>BindToObject</b> for <a href="if_a2e_5wz6.htm"><b>IClassActivator</b></a> and calls <a href="if_a2e_8qwk.htm"><b>IClassActivator</b>::<b>GetClassObject</b></a> with the CLSID it was initialized with and the CLSCTX and LOCALE parameters from of the current <i>pbc</i> (<b>IBindContext</b>).

<p>
This process is very roughly sketched out in the following code:

<pre><code>BIND_OPTS2    bindOpts;
    IClassActivator *pActivate;
 
    bindOpts.cbStruct = sizeof(bindOpts);
    pbc-&gt;GetBindOptions(&amp;bindOpts);
 
    if (NULL == pmkToLeft)
        return CoGetClassObject(<b><i>&lt;clsid&gt;</i></b>, bindOpts.dwClassContext, NULL, riid, ppvResult);
 
    pmkToLeft-&gt;BindToObject(pbc, NULL, IID_IClassActivator, (void **) &amp;pActivate);
    hr = pActivate-&gt;GetClassObject(<b><i>&lt;clsid&gt;</i></b>, bindOpts.dwClassContext, bindOpts.locale, iid, ppvResult);
    pActivate-&gt;Release();
    return hr;
 </code></pre>
</dd>
<dt>
<a href="if_f2n_1kx1.htm"><b>IMoniker::BindToStorage</b></a> </dt>
<dd>
This method forwards to the class moniker's <b>BindToObject</b>.</dd>
<dt>
<a href="if_f2n_79d1.htm"><b>IMoniker::Reduce</b></a> </dt>
<dd>
This method returns MK_S_REDUCED_TO_SELF and passes back the same moniker.</dd>
<dt>
<a href="if_f2n_8cx4.htm"><b>IMoniker::ComposeWith</b></a> </dt>
<dd>
Follows the contract, and behaves like an Item Moniker in that it can return E_INVALIDARG and MK_E_NEEDGENERIC, etc.</dd>
<dt>
<a href="if_f2n_44od.htm"><b>IMoniker::Enum</b></a> </dt>
<dd>
This method returns S_OK and sets <i>ppenumMoniker</i> to NULL. May return E_INVALIDARG if <i>ppenumMoniker</i> is an invalid pointer.</dd>
<dt>
<a href="if_f2n_7mp8.htm"><b>IMoniker::IsEqual</b></a> </dt>
<dd>
This method returns S_OK if <i>pmkOther</i> is a class moniker constructed with the same CLSID information as itself. Otherwise, the method returns S_FALSE. May return E_INVALIDARG if <i>pmkOther</i> is an invalid pointer.</dd>
<dt>
<a href="if_f2n_9uaw.htm"><b>IMoniker::Hash</b></a> </dt>
<dd>
This method calculates a hash value for the moniker and returns S_OK. may return E_INVALIDARG if <i>pdwHash</i> is an invalid pointer.</dd>
<dt>
<a href="if_f2n_62g7.htm"><b>IMoniker::IsRunning</b></a> </dt>
<dd>
Returns E_NOTIMPL.</dd>
<dt>
<a href="if_f2n_0k9x.htm"><b>IMoniker::GetTimeOfLastChange</b></a> </dt>
<dd>
Returns MK_E_UNAVAILABLE.</dd>
<dt>
<a href="if_f2n_2zvp.htm"><b>IMoniker::Inverse</b></a> </dt>
<dd>
This method returns an anti-moniker (i.e., the results of calling <a href="api2_6vci.htm"><b>CreateAntiMoniker</b></a>).</dd>
<dt>
<a href="if_f2n_9nu0.htm"><b>IMoniker::CommonPrefixWith</b></a> </dt>
<dd>
If <i>pmkOther</i> <b>IsEqual</b> to this moniker, retrives a pointer to this moniker and returns MK_S_US. If <i>pmkOther</i> is a class moniker but is not equal to this moniker, returns MK_E_NOPREFIX. Otherwise returns the result of calling <a href="api2_9l2g.htm"><b>MonikerCommonPrefixWith</b></a> with itself as <i>pmkThis</i>, <i>pmkOther</i> and <i>ppmkPrefix</i>, which handles the case whre <i>pmkOther</i> is a generic composite moniker.</dd>
<dt>
<a href="if_f2n_30j3.htm"><b>IMoniker::RelativePathTo</b></a> </dt>
<dd>
This method returns the result of calling This method returns the result of calling <a href="api2_1y7j.htm"><b>MonikerRelativePathTo</b></a> with <i>pmkSrc</i> equal to this moniker, <i>pmkOther</i>, <i>ppmkRelPath</i>, and TRUE as <i>dwReserved</i>.</dd>
<dt>
<a href="if_f2n_1tb9.htm"><b>IMoniker::GetDisplayName</b></a> </dt>
<dd>
The display name for class monikers is of the form:
<p>
display-name = "CLSID:" string-clsid-no-curly-braces *[";" clsid-options] ":"

<p>
clsid-options = clsid-param "=" value

<p>
clsid-param = none currently defined

<p>
Example:

<p>
clsid:a7b90590-36fd-11cf-857d-00aa006d2ea4:
</dd>
<dt>
<a href="if_f2n_6ecl.htm"><b>IMoniker::ParseDisplayName</b></a> </dt>
<dd>
This method parses the display name by binding to itself for IParseDisplayName and asking the bound object to parse the display name into a moniker, as follows:
<pre><code>hr = BindToObject(pbc, pmkToLeft, IID_IParseDisplayName, (void**)&amp;ppdn);
    if (SUCCEEDED(hr)) {
        hr = ppdn-&gt;ParseDisplayName(pbc, lpszDisplayName, pchEaten, ppmkOut);
        ppdn-&gt;Release();
        }
    return hr;
 </code></pre>

<p>
This method tries to acquire an <a href="if_p2q_4t5x.htm"><b>IParseDisplayName</b></a> pointer, first by binding to the class factory for the object identified by the moniker, and then by binding to the object itself. If either of these binding operations is successful, the file moniker passes the unparsed portion of the display name to the <a href="if_p2q_4l5x.htm"><b>IParseDisplayName::ParseDisplayName</b></a> method. 

<p>
This method returns MK_E_SYNTAX if <i>pmkToLeft</i> is non-NULL.
</dd>
<dt>
<a href="if_f2n_4mr6.htm"><b>IMoniker::IsSystemMoniker</b></a></dt>
<dd>
This method returns S_OK, and passes back MKSYS_CLASSMONIKER. </dd>
</dl>
<h4>See Also</h4>
<p>
<a href="api2_1b8y.htm"><b>CreateClassMoniker</b></a>, <a href="if_f2n_8otu.htm"><b>IMoniker</b></a></p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

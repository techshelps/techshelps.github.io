<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IBindStatusCallback</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_ibindstatuscallback"></a>IBindStatusCallback</h1>
<p>
A client requesting an asynchronous bind operation must provide a notification object exposing the <b>IBindStatusCallback</b> interface. The asynchronous moniker provides information on the bind operation to the client by calling notification methods on the client's callback interface.</p>
<p>
Besides providing notification methods, this interface also allows the client to pass additional bind information to the moniker. To obtain this additional bind information, the moniker calls two <b>IBindStatusCallback </b>methods (<b>GetBindInfo</b> and <b>GetPriority</b>) after receiving a call either to <b>IMoniker::BindToObject</b> or <b>IMoniker::BindToStorage</b>. <a href="if_a2e_0gf9.htm"><b>IBindStatusCallback::QueryInterface</b></a> provides extensibility to <b>IBindStatusCallback</b> because it allows the moniker to request additional interfaces from the client in case the bind operation requires additional information or negotiaion.</p>
<p>
All methods in <b>IBindStatusCallback</b> can be called from within <b>IMoniker::BindToObject</b> or <b>IMoniker::BindToStorage</b>. These methods can also be called after the moniker returns if the bind information indicates asynchronous binding (BINDF_ASYNCHRONOUS).</p>
<p>
Clients of asynchronous monikers register their callback interface in the bind context by calling the <a href="api3_8bvv.htm"><b>RegisterBindStatusCallback</b></a> function.</p>
<p>
During the bind operation, these callbacks are called in an arbitrary order, and the asynchronous moniker may set policy and limit certain callback notifications to only one of the registered callback interfaces. For example, the moniker may limit calls to the <b>GetBindInfo</b>, <b>OnDataAvailable</b>, or <b>OnObjectAvailable</b> methods to a single callback interface.</p>
<p>
Note that, in the case of URL monikers, the policy is not documented and is likely to change. It is advised that only one registered callback interface (usually the last one registered) be responsible for the callbacks to the <b>GetBindInfo</b>, <b>OnDataAvailable</b>, and <b>OnObjectAvailable</b> methods.</p>
<h5>When to Implement</h5>
<p>
Any client of an asynchronous moniker must implement this interface to obtain asynchronous behaviour. Typically, a client implements this interface on a separate object, similar to a site object, that it associates with a specific bind operation.</p>
<p>
Note that most of the notification methods in this interface are optional. A client should implement only those notifications it is interested in receiving. The client can return E_UNIMP or S_OK for notification methods it does not wish to receive.</p>
<p>
The methods in <b>IBindStatusCallback</b> do not identify the specific bind operation that the notification belongs to, so a client should provide a separate object instance for each simultaneous asynchronous bind operation it initiates.</p>
<p>
When the client registers the interface in the bind context by calling <a href="api3_8bvv.htm"><b>RegisterBindStatusCallback</b></a>, the bind context keeps a reference to the callback object. The moniker can optionally add references to this object.</p>
<h5>When to Use</h5>
<p>
Implementations of asynchronous monikers will use this interface for two purposes:
<ul>
<li>
Obtain additional bind information. Throughout the bind operation, the moniker can call the client to obtain additional binding information. For example, in the implementation of <b>IMoniker::BindToStorage</b> or <b>IMoniker::BindToObject</b>, the moniker calls <a href="if_a2e_5njj.htm"><b>IBindStatusCallback::GetBindInfo</b></a> to check at least the BINDF_ASYNCHRONOUS flag. If this flag is not set, the bind operation cannot return until the object or storage object is available. As another example, the moniker can call <a href="if_a2e_5s3d.htm"><b>IBindStatusCallback::GetPriority</b></a> during its <b>IMoniker::BindToStorage</b> or <b>IMoniker::BindToObject</b> methods, or it can wait until a later point to get the priority of the bind operation. Also, the moniker can call <a href="if_a2e_0gf9.htm"><b>IBindStatusCallback::QueryInterface</b></a><b> </b>to request a new interface from the client if the bind operation needs further information or additional services from the client.</li>
<li>
Provide notifications. In the implementation of <b>IMoniker::BindToStorage</b> or <b>IMoniker::BindToObject</b>, the moniker can call any of the notification methods as well as the bind information methods. After returning from the call, the moniker can call notification methods to provide additional notification throughout the bind operation.</li>
</ul>
<h4>Methods in Vtable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>IUnknown Methods</th>
<th align=left width=64%>Description</th>
</tr>
<tr valign=top>
<td width=36%><a href="if_a2e_0gf9.htm"><b>QueryInterface</b></a></td>
<td width=64%>Returns pointers to supported interfaces.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_r2z_3rja.htm"><b>AddRef</b></a></td>
<td width=64%>Increments the reference count.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_r2z_59np.htm"><b>Release</b></a></td>
<td width=64%>Decrements the reference count.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>IBindStatusCallback Methods</th>
<th align=left width=64%>Description</th>
</tr>
<tr valign=top>
<td width=36%><a href="if_a2e_5njj.htm"><b>GetBindInfo</b></a></td>
<td width=64%>Called by asynchronous moniker to get bind info</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_a2e_695z.htm"><b>OnStartBinding</b></a></td>
<td width=64%>Tells the client which callback methods it is registered for receiving.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_a2e_5s3d.htm"><b>GetPriority</b></a></td>
<td width=64%>Gets data during asynchronous bind operations.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_a2e_35ir.htm"><b>OnProgress</b></a></td>
<td width=64%>Indicates the current progress of this bind operation.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_a2e_0x2d.htm"><b>OnDataAvailable</b></a></td>
<td width=64%>Retrieves the current priority of this bind operation.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_a2e_2vz9.htm"><b>OnObjectAvailable</b></a></td>
<td width=64%>Called by asynchronous moniker to to pass the requested object interface pointer to the client.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_a2e_9b51.htm"><b>OnLowResource</b></a></td>
<td width=64%>An asynchronous moniker calls this method when it detects low resources.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_a2e_0wh3.htm"><b>OnStopBinding</b></a></td>
<td width=64%>An asynchronous moniker calls this method to indicate the end of the bind operation.</td>
</tr>
</table><br>
<p>
</p>
<p>
</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in urlmon.h.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Licensing and IClassFactory2</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_licensing_and_iclassfactory2"></a>Licensing and IClassFactory2</h2>
<p>
The <a href="if_a2e_9mk9.htm"><b>IClassFactory</b></a> interface on a class object provides the basic object creation mechanism of COM. Using <b>IClassFactory</b>, a server can control object creation on a machine basis. The implementation of the <b>IClassFactory::CreateInstance</b> method can allow or disallow object creation based the existence of a machine license. A machine license is a piece of information separate from the application that exists on a machine to indicate that the software was installed from a valid source, such as the vendor's installation disks. If the machine license does not exist, the server can disallow object creation. Machine licensing prevents piracy in cases where a user attempts to copy the software from one machine to another; because the license information is not copied with the software, and the machine that receives the copy is not licensed.</p>
<p>
However, in a component software industry, vendors need a finer level of control over licensing. In addition to machine license control, the a vendor needs to allow some clients to create a component object while preventing other clients from the same capability. This kind of licensing requires that the client application obtain a license key from component while the client application is still under development. The client application uses the license key later at run-time to create objects on an unlicensed machine.</p>
<p>
For example, if a vendor provides a library of controls to developers, the developer who purchases the library will have a full machine license, allowing the objects to be created on the development machine. The developer can then build a client application on the licensed machine incorporating one or more of the controls. When the resulting client application is run on another machine, the controls used in the client application must be created on the other machine even if that machine does not possess a machine license to the controls from the original vendor.</p>
<p>
The <a href="if_a2e_641e.htm"><b>IClassFactory2</b></a><b> </b>interface provides this level of control. To allow key-based licensing for any given component, you implement <b>IClassFactory2</b> on the class factory object for that component. <b>IClassFactory2 </b>is derived from <b>IClassFactory</b>, so by implementing <b>IClassFactory2</b> the class factory object fulfills the basic COM requirements. <b>IClassFactory2 </b>is defined as follows:</p>
<pre><code>interface IClassFactory2 : IClassFactory 
    { 
    HRESULT GetLicInfo(LPLICINFO pLicInfo); 
    HRESULT RequestLicKey(DWORD dwResrved, BSTR FAR* pbstrKey); 
    HRESULT CreateInstanceLic(IUnknown *pUnkOuter 
        , IUnknown *pUnkReserved, REFIID riid, BSTR bstrKey 
        , void **ppvObject); 
    }; 
 </code></pre>
<p>
The <b>GetLicInfo</b> method fills a <a href="structs_2ju7.htm"><b>LICINFO</b></a><b> </b>structure with information describing the licensing behavior of the class factory. For example, the class factory can provide license keys for run-time licensing if the <i>fRunTimeKeyAvail</i> member is TRUE.</p>
<p>
The <b>RequestLicKey</b> method provides a license key for the component. A machine license must be available when the client calls this method.</p>
<p>
The <b>CreateInstanceLic</b> method creates an instance of the licensed component if the license key parameter (<b>BSTR</b> <i>bstrKey</i>) is valid.</p>
<p>
In its type information, a component uses the attribute <b>licensed</b> to mark the <b>coclass</b> that supports licensing through <b>IClassFactory2</b>.</p>
<p>
To incorporate a licensed component into your client application, you use the methods in <b>IClassFactory2</b>.</p>
<p>
First, you need a separate development tool that is also a client of the licensed component. The purpose of this tool is to obtain the run-time license key and save it in your client application. This tool runs only on a machine that possesses a machine license for the component. The tool calls the <b>GetLicInfo</b> and <b>RequestLicKey</b> methods to obtain the run-time license key and then saves the license key in your client application. For example, the development tool could create a .H file containing the <b>BSTR</b> license key. Then, you would include that .H file in your client application.</p>
<p>
To instantiate the component within your client application, you first try to instantiate the object directly with <b>IClassFactory::CreateInstance</b>. If <b>CreateInstance</b> succeeds, then the second machine is itself licensed for the component and objects can be created at will. If <b>CreateInstance </b>fails with the return code CLASS_E_NOTLICENSED, the only way to create the object is to pass the run-time key to the <b>CreateInstanceLic </b>method. <b>CreateInstanceLic </b>verifies the key and creates the object if the key is valid.</p>
<p>
In this way an application built with components (such as controls), can run on a machine that has no other license — only the client application containing the run-time license is allowed to create the component objects in question.</p>
<p>
The <b>IClassFactory2</b> interface supports flexibility in licensing schemes. For example, the server implementor can encrypt license keys in the component for added security. Server implementers can also enable or disable levels of functionality in their objects by providing different license keys for different functions. For example, one key might allow a base level of functionality, while another would allow basic and advanced functionality, and so on. See <i>OLE Controls Inside Out</i> published by MS Press for detailed consideration of these issues.</p>
<p>&nbsp;</p></body>
</HTML>

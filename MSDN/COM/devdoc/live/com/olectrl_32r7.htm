<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Standard Properties</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_com_standard_properties"></a>Standard Properties</h3>
<p>
OLE defines a set of standard DISPIDs for all three kinds of properties: control, ambient, and extended. The following tables list these standards for control properties, ambient properties, and extended properties.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=28%>Control Property</th>
<th align=left width=20%>Type</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=28%>BackColor, ForeColor, FillColor, BorderColor</td>
<td width=20%>OLE_COLOR</td>
<td width=52%>The control's color scheme</td>
</tr>
<tr valign=top>
<td width=28%>BackStyle, FillStyle, BorderStyle, BorderWidth, BorderVisible, DrawStyle, DrawWidth</td>
<td width=20%>short or long</td>
<td width=52%>Bits that define a control's visual behavior, such as being solid or transparent, having thick or thin borders, line styles, and so forth.</td>
</tr>
<tr valign=top>
<td width=28%>Font</td>
<td width=20%>IDispatch *</td>
<td width=52%>The font used in the control, which is an <b>IDispatch</b> pointer to a standard font object. See <a href="olectrl_53n8.htm">Standard Font Object</a> below for more information.</td>
</tr>
<tr valign=top>
<td width=28%>Caption, Text</td>
<td width=20%>BSTR</td>
<td width=52%>Strings containing the control's label (the caption) or its textual contents (the text). Note that the caption does not necessarily name the control in the container. See the extended Name property in the following table.</td>
</tr>
<tr valign=top>
<td width=28%>Enabled</td>
<td width=20%>BOOL</td>
<td width=52%>Determines if the control is enabled or disabled. If disabled, the control is probably grayed.</td>
</tr>
<tr valign=top>
<td width=28%>Window</td>
<td width=20%>HWND</td>
<td width=52%>The window handle of the control, if it has one.</td>
</tr>
<tr valign=top>
<td width=28%>TabStop</td>
<td width=20%>BOOL</td>
<td width=52%>Determines if this control is a tab stop.</td>
</tr>
</table><br>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=28%>Ambient Property</th>
<th align=left width=20%>Type</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=28%>BackColor, ForeColor</td>
<td width=20%>OLE_COLOR</td>
<td width=52%>Provides controls with the default background and foreground colors. Use by a control is optional.</td>
</tr>
<tr valign=top>
<td width=28%>Font</td>
<td width=20%>IDispatch *</td>
<td width=52%>A pointer to a standard font object that defines the default font for the form. Use by a control is optional. See <a href="olectrl_53n8.htm">Standard Font Object</a> below for more information.</td>
</tr>
<tr valign=top>
<td width=28%>LocaleID</td>
<td width=20%>LCID</td>
<td width=52%>The language used in the container. Use by a control is recommended.</td>
</tr>
<tr valign=top>
<td width=28%>UserMode</td>
<td width=20%>BOOL</td>
<td width=52%>Describes whether the container is in a design mode (FALSE) or run-mode (TRUE), which a control should use to change its available functionality as necessary.</td>
</tr>
<tr valign=top>
<td width=28%>UIDead</td>
<td width=20%>BOOL</td>
<td width=52%>Describes whether the container is in a mode where controls should ignore user input. This applies irrespective of UserMode. A container might always set UIDead to TRUE in design mode, and may set it to true when it has hit a breakpoint or such during run mode. A control must pay attention to this property.</td>
</tr>
<tr valign=top>
<td width=28%>MessageReflect</td>
<td width=20%>BOOL</td>
<td width=52%>Specifies whether the container would like to receive Windows messages such as WM_CTLCOLOR, WM_DRAWITEM, WM_PARENTNOTIFY, and so on as events.</td>
</tr>
<tr valign=top>
<td width=28%>SupportsMnemonics</td>
<td width=20%>BOOL</td>
<td width=52%>Describes whether the container processes mnemonics or not. A control can do whatever it wants with this information, such as not underline characters it would normally use as a mnemonic.</td>
</tr>
<tr valign=top>
<td width=28%>ShowGrabHandles, ShowHatching</td>
<td width=20%>BOOL</td>
<td width=52%>Describes whether a control should show a hatch border or grab handles (in the hatch border) when in-place active. Controls must obey these properties, giving the container ultimate control over who actually draws these bits of user interface. A control container may want to draw its own instead of relying on each control, in which case these ambients will always be FALSE.</td>
</tr>
<tr valign=top>
<td width=28%>DisplayAsDefault</td>
<td width=20%>BOOL</td>
<td width=52%>The container will expose a TRUE for this property through whatever site contains what is marked as the default button when the button control should draw itself with a thicker default frame.</td>
</tr>
</table><br>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=28%>Extended Property</th>
<th align=left width=20%>Type</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=28%>Name</td>
<td width=20%>BSTR</td>
<td width=52%>The container's name for the control.</td>
</tr>
<tr valign=top>
<td width=28%>Visible</td>
<td width=20%>BOOL</td>
<td width=52%>The control's visibility.</td>
</tr>
<tr valign=top>
<td width=28%>Parent</td>
<td width=20%>IDispatch *</td>
<td width=52%>The dispinterface of the form containing the control.</td>
</tr>
<tr valign=top>
<td width=28%>Default, Cancel</td>
<td width=20%>BOOL</td>
<td width=52%>Indicates if this control is the default or cancel button.</td>
</tr>
</table><br>
<p>
All of these standard properties have negative DISPID values, indicating their standard status.</p>
<p>
Note that to avoid conflicts in the programmatic symbols for these DISPIDs, all ambient properties are given symbols in the form DISPID_AMBIENT_<i>property</i> as in DISPID_AMBIENT_FORECOLOR. All other symbols use DISPID_<i>property</i> as usual.</p>
<p>
Some ambient properties, as well as control properties, involve colors. Controls deal with color in a slightly different way than normal Win32 APIs do. The OLE_COLOR type mentioned in the previous tables can refer to a Win32 standard COLORREF type, an index to a palette, a palette-relative index, or a system color index used with the Win32 API function <b>GetSysColor</b>. The OLE API function <a href="api3_0er6.htm"><b>OleTranslateColor</b></a> converts an OLE_COLOR type to a COLORREF type given a palette.</p>
<p>&nbsp;</p></body>
</HTML>

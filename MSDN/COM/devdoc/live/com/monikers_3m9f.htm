<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>URL Monikers</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_url_monikers"></a>URL Monikers</h2>
<p>
The OLE moniker architecture provides a convenient programming model for working with URLs. The moniker architecture supports extensible and complete name parsing through the <b>MkParseDisplayName</b>(<b>Ex</b>) function and the <a href="if_p2q_4t5x.htm"><b>IParseDisplayName</b></a> and <a href="if_f2n_8otu.htm"><b>IMoniker</b></a> interfaces, as well as printable names through the <a href="if_f2n_1tb9.htm"><b>IMoniker::GetDisplayName</b></a> method. The <b>IMoniker</b> interface is the way you actually use URLs you encounter, and building components that fit into the moniker architecture is the way to actually extend URL namespaces in practice. </p>
<p>
A new system-provided moniker class, the URL Moniker, provides a framework for building and using certain URLs. Since URLs frequently refer to resources across high-latency networks, the URL Moniker supports asynchronous as well as synchronous binding. The URL Moniker does not currently support <a href="asyncstg_86cl.htm"><b>Asynchronous Storage</b></a>.</p>
<p>
The following diagram shows the components involved in using URL Monikers. All these components should be familiar from the discussion of asynchronous monikers in the preceding section of this chapter.</p>
<p>
<img src="images/asy_mon3.gif" border=0></p>
<p>
Like all moniker clients, a user of URL Monikers typically creates and holds a reference to the moniker as well as to the bind-context to be used during binding (<a href="if_f2n_1kx1.htm"><b>IMoniker::BindToStorage</b></a> or <a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a>). To support asynchronous binding, the client can implement a bind-status-callback object, which implements the <b>IBindStatusCallback</b> interface, and register it with the bind-context using the <b>RegisterBindStatusCallback</b> API function. This object will receive the transport's <b>IBinding</b> interface during calls to <b>IBindStatusCallback::OnStartBinding</b>.</p>
<p>
The URL Moniker identifies the protocol being used by parsing the URL prefix, then retrieves the <b>IBinding</b> interface from the transport layer. The client uses <b>IBinding</b> to support pausing, cancellation, and prioritization of the binding operation. The callback object also receives progress notification through <b>IBindStatusCallback::OnProgress</b>, data availability notification through <b>IBindStatusCallback::OnDataAvailable</b>, and various, other, transport-layer notifications about the status of the binding. The URL Moniker or specific transport layers may also request extended information from the client via <b>IBindStatusCallback::QueryInterface</b>, allowing the client to provide protocol-specific information that will affect the bind operation.</p>
<p>&nbsp;</p></body>
</HTML>

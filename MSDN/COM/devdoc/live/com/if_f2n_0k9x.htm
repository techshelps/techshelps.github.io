<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMoniker::GetTimeOfLastChange</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_imoniker_gettimeoflastchange"></a>IMoniker::GetTimeOfLastChange</h2>
<p>
Provides a number representing the time the object identified by this moniker was last changed. To be precise, the time returned is the earliest time COM can identify after which no change has occurred, so this time may be later than the time of the last change to the object.</p>
<pre><code><b>HRESULT GetTimeOfLastChange(
  IBindCtx</b><i> *pbc</i><b>,       </b>//Bind context to be used
<b>  IMoniker</b><i> *pmkToLeft</i><b>, </b>//Moniker to the left in the composite
<b>  FILETIME</b><i> *pFileTime  </i>//Receives the time of last change
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pbc</i></dt>
<dd>
[in] Pointer to the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment. For more information, see <a href="if_a2e_06bc.htm"><b>IBindCtx</b></a>. </dd>
<dt>
<i>pmkToLeft</i></dt>
<dd>
[in] If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is primarily used by moniker Implementers to enable cooperation between the various components of a composite moniker. Moniker clients should pass NULL.</dd>
<dt>
<i>pFileTime</i></dt>
<dd>
[out] Pointer to the <a href="structs_3vdx.htm"><b>FILETIME</b></a> structure receiving the time of last change. A value of {0xFFFFFFFF,0x7FFFFFFF} indicates an error (for example, exceeded time limit, information not available).
</dd>
</dl>
<h4>Return Values</h4>
<p>
The method supports the standard return value E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The method successfully returned a time.</dd>
<dt>
MK_E_EXCEEDEDDEADLINE</dt>
<dd>
The binding operation could not be completed within the time limit specified by the bind context's <a href="structs_2b1v.htm"><b>BIND_OPTS</b></a> structure. </dd>
<dt>
MK_E_CONNECTMANUALLY</dt>
<dd>
The operation was unable to connect to the storage for this object, possibly because a network device could not be connected to. For more information, see <a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a>. </dd>
<dt>
MK_E_UNAVAILABLE</dt>
<dd>
The time of the change is unavailable, and will not be available no matter what deadline is used.
</dd>
</dl>
<h4>Remarks</h4>
<h5>Notes to Callers</h5>
<p>
If you're caching information returned by the object identified by the moniker, you may want to ensure that your information is up-to-date. To do so, you would call <b>IMoniker::GetTimeOfLastChange</b> and compare the time returned with the time you last retrieved information from the object. </p>
<p>
For the monikers stored within linked objects, <b>IMoniker::GetTimeOfLastChange</b> is primarily called by the default handler's implementation of <a href="if_o_86w5.htm"><b>IOleObject::IsUpToDate</b></a>. Container applications call <b>IOleObject::IsUpToDate</b> to determine if a linked object (or an embedded object containing linked objects) is up-to-date without actually binding to the object. This enables an application to determine quickly which linked objects require updating when the end user opens a document. The application can then bind only those linked objects that need updating (after prompting the end user to determine whether they should be updated), instead of binding every linked object in the document.</p>
<h5>Notes to Implementers</h5>
<p>
It is important to perform this operation quickly because, for linked objects, this method is called when a user first opens a compound document. Consequently, your <b>IMoniker::GetTimeOfLastChange</b> implementation should not bind to any objects. In addition, your implementation should check the deadline parameter in the bind context and return MK_E_EXCEEDEDDEADLINE if the operation cannot be completed by the specified time.</p>
<p>
There are a number of strategies you can use in your implementations: 
<ul>
<li>
For many types of monikers, the <i>pmkToLeft</i> parameter identifies the container of the object identified by this moniker. If this is true of your moniker class, you can simply call <b>IMoniker::GetTimeOfLastChange</b> on the <i>pmkToLeft</i> parameter, since an object cannot have changed at a date later than its container. </li>
<li>
You can get a pointer to the Running Object Table (ROT) by calling <a href="if_a2e_70bp.htm"><b>IBindCtx::GetRunningObjectTable</b></a> on the <i>pbc</i> parameter, and then calling <a href="if_r2z_3gdh.htm"><b>IRunningObjectTable::GetTimeOfLastChange</b></a>, since the ROT generally records the time of last change. </li>
<li>
You can get the storage associated with this moniker (or the <i>pmkToLeft</i> moniker) and return the storage's last modification time with a call to <b>IStorage::Stat</b>.</li>
</ul>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_a2e_70bp.htm"><b>IBindCtx::GetRunningObjectTable</b></a>, <a href="if_r2z_3gdh.htm"><b>IRunningObjectTable::GetTimeOfLastChange</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

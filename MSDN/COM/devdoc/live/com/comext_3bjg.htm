<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Security at the Interface Proxy Level</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_setting_security_at_the_interface_proxy_level"></a>Setting Security at the Interface Proxy Level</h2>
<p>
If you are using the default security values (from the registry) for a process for authentication and authorization, no security initialization call is necessary. If, however, you want to set values for that process that differ from the default values, you can call <b>CoInitializeSecurity</b>. This function both initializes and registers these values, which then become the default values for that process. </p>
<p>
However, sometimes the client needs finer-grained control over the security on calls to particular interfaces. For example, security can be set at a low level for the process, but calls to a particular interface might require a higher authentication level, such as encryption. The methods of the <b>IClientSecurity</b> interface allow the client to change the security settings associated with calls to a particular interface by controlling the security settings at the interface-proxy level. </p>
<p>
The <a href="if_a2e_2sqh.htm"><b>IClientSecurity</b></a> interface is implemented locally for the client by the interface remoting layer (the proxy manager). Some custom marshaled objects might not support <b>IClientSecurity</b>. </p>
<p>
The client can query an existing object for <b>IClientSecurity</b> and then call the <a href="if_a2e_8y0k.htm"><b>IClientSecurity::QueryBlanket</b></a> method to find out what the current security settings are for a particular interface proxy. You can use the <a href="if_a2e_0q0k.htm"><b>IClientSecurity::SetBlanket</b></a> method to modify the security settings for an individual interface proxy on the object prior to making a call on one of the interface methods. The new settings apply to any future callers of this particular interface. The <a href="if_a2e_90qh.htm"><b>CopyProxy</b></a> method provides a way for the client to copy an interface proxy so that subsequent calls to <b>SetBlanket</b> on the copy do not affect callers of the original proxy. </p>
<p>
<b>SetBlanket </b>is commonly used to raise the authentication level for a particular interface proxy to a more secure level. But, in some situations, it might also be helpful to lower the authentication level for a particular interface proxy. For instance, suppose the default authentication level for the process is some value other than RPC_C_AUTHN_LEVEL_NONE, and the client and server are in separate domains that do not trust each other. In this case, calls to the server will fail unless the client calls <b>SetBlanket</b> to lower the authentication level to RPC_C_AUTHN_LEVEL_NONE. </p>
<p>
Clients using the default implementation of <b>IClientSecurity</b> provided by the proxy manager can call the <a href="api1_8hf8.htm"><b>CoQueryProxyBlanket</b></a>, <a href="api1_9sj8.htm"><b>CoSetProxyBlanket</b></a>, and <a href="api1_5e9l.htm"><b>CoCopyProxy</b></a> helper functions instead of calling <b>IClientSecurity</b> methods directly. The helper functions simplify the code but are slightly less efficient than calling the corresponding <b>IClientSecurity</b> methods directly.</p>
<p>
<b>IClientSecurity</b> works with all supported authentication services (currently NTLMSSP, SChannel, Kerberos). </p>
<p>&nbsp;</p></body>
</HTML>

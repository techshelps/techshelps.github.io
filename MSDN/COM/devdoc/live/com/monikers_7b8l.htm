<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Asynchronous Versus Synchronous Storage</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_com_asynchronous_versus_synchronous_storage"></a>Asynchronous Versus Synchronous Storage</h3>
<p>
Asynchronous monikers may also return an <a href="asyncstg_86cl.htm"><b>Asynchronous Storage</b></a> object in the <b>IBindStatusCallback::OnDataAvailable</b> notification. This storage object may allow access to <i>some</i> of the object's persistent data while the binding is still in progress. A client can choose between two modes for the storage: blocking and non-blocking. In blocking mode, which is compatible with current implementations of storage objects, if data is unavailable, the call blocks until data arrives. In nonblocking mode, rather than blocking the call, the storage object returns a new error E_PENDING when data is unavailable. An client aware of asynchronous binding and storage notes this error and waits for further notifications (<b>IBindStatusCallback::OnDataAvailable</b>) to retry the operation. A client can choose between a synchronous (blocking) and asynchronous (non-blocking) storage by choosing whether or not to set the BINDF_ASYNCSTORAGE flag in the <i>pgrfBINDF</i> value returned to <b>IBindStatusCallback::GetBindInfo</b>.</p>
<p>&nbsp;</p></body>
</HTML>

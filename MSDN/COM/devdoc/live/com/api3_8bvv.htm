<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RegisterBindStatusCallback</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_registerbindstatuscallback"></a>RegisterBindStatusCallback</h1>
<p>
Registers a callback interface with an existing bind context.</p>
<pre><code><b>HRESULT RegisterBindStatusCallback(
  IBindCtx</b><i> *pbc</i><b>,  </b>//Pointer to the bind context in which to register 
                  // the callback
<b>  IBindStatusCallback</b><i> *pbsc</i><b>,</b>
<b>                  </b>//Pointer to callback interface to be registered
<b>  IBindStatusCallback</b><i> **ppbscPrevious</i><b>,</b>
<b>                  </b>//Address of output variable that receives the 
                  // IBindStatusCallback interface pointer
<b>  DWORD </b><i> dwReserved</i>
<i>                  </i>//Reserved for future use
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pbc</i></dt>
<dd>
[in] Pointer to the <b>IBindCtx</b> interface for the bind context in which the callback is to be registered.</dd>
<dt>
<i>pbsc</i></dt>
<dd>
[in] Pointer to the <a href="if_a2e_0vxn.htm"><b>IBindStatusCallback</b></a> interface to be registered.</dd>
<dt>
<i>ppbscPrevious</i></dt>
<dd>
[out] Address of <b>IBindStatusCallback*</b> pointer variable that receives the interface pointer to the previously registered instance of the BindStatusCallback.</dd>
<dt>
<i>dwReserved</i></dt>
<dd>
[in] Reserved for future use.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK </dt>
<dd>
The operation was successful.</dd>
<dt>
E_OUTOFMEMORY</dt>
<dd>
There was insufficient memory to register the callback with the bind context.</dd>
<dt>
E_INVALIDARG</dt>
<dd>
One or more parameters are invalid.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The callback interface that is registered with this function is used for all asynchronous bind operations involving the specified bind context until the callback interface is revoked through <a href="api3_3y23.htm"><b>RevokeBindStatusCallback</b></a> or until the bind context is destroyed. </p>
<p>
If there was a previously registered <b>IBindStatusCallback</b>, this function removes it from the bind context and registers the new <b>IBindStatusCallback.</b></p>
<p>
<b>RegisterBindStatusCallback </b>allows the client to specify flags that determine the callback notifications that the client is capable of receiving. If the client does not wish to receive certain notifications, it can implement those callback methods as empty function stubs (returning E_NOTIMPL), and they will not be called.</p>
<p>
<b>RegisterBindStatusCallback</b> allows multiple clients to each register a callback for the same bind context. During the bind operation, these callbacks are called in an arbitrary order, and the asynchronous moniker can set a policy and limit certain callback notifications to only one of the registered callbacks. For example, the notifications <b>GetBindInfo</b>, <b>OnDataAvailable</b>, or <b>OnObjectAvailable</b> are usually limited to a single registered callback interface. For this reason, a client should request to receive only those callback methods that it plans on implementing.</p>
<p>
Specifically, even though multiple <b>IBindStatusCallback</b> interfaces can be registered on the bind context, only one moniker client will actually receive the following notifications: <b>GetBindInfo</b>, <b>OnDataAvailable</b>, or <b>OnObjectAvailable</b>. This client is the last one to register itself as capable of receiving these callbacks, and it is typically the client that calls <b>IMoniker::BindToStorage</b> or <b>IMoniker::BindToObject</b> and drives the bind operation.</p>
<p>
In the current implementation of URL monikers, the clients are called in reverse of the order in which they were registered, with the exception of the last client to request the following notifications: <b>GetBindInfo</b>, <b>OnDataAvailable</b>, or <b>OnObjectAvailable</b>. The last client in the callback order is notified for these exceptions. However, it is recommended that you not depend heavily on this ordering for the URL moniker implementation. The only important point is that the registered client for <b>GetBindInfo</b> or <b>OnDataAvailable</b>, or <b>OnObjectAvailable</b> is last in the ordering.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in urlmon.h.</p>
<h4>See Also</h4>
<p>
<a href="if_a2e_0vxn.htm"><b>IBindStatusCallback</b></a>, <a href="api3_3y23.htm"><b>RevokeBindStatusCallback</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

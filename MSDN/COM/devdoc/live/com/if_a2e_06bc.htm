<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IBindCtx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_ibindctx"></a>IBindCtx</h1>
<p>
The <b>IBindCtx</b> interface provides access to a bind context, which is an object that stores information about a particular moniker binding operation. You pass a bind context as a parameter when calling many methods of <a href="if_f2n_8otu.htm"><b>IMoniker</b></a> and in certain functions related to monikers. </p>
<p>
A bind context includes the following information: 
<ul>
<li>
A <a href="structs_2b1v.htm"><b>BIND_OPTS</b></a> structure containing a set of parameters that do not change during the binding operation. When a composite moniker is bound, each component uses the same bind context, so it acts as a mechanism for passing the same parameters to each component of a composite moniker. </li>
<li>
A set of pointers to objects that the binding operation has activated. The bind context holds pointers to these bound objects, keeping them loaded and thus eliminating redundant activations if the objects are needed again during subsequent binding operations. </li>
<li>
A pointer to the Running Object Table on the machine of the process that started the bind operation. Moniker implementations that need to access the Running Object Table should use the <a href="if_a2e_70bp.htm"><b>IBindCtx::GetRunningObjectTable</b></a> method rather than using the <b>GetRunningObjectTable</b> function. This allows future enhancements to the system's <b>IBindCtx</b> implementation to modify binding behavior.</li>
<li>
A table of interface pointers, each associated with a string key. This capability enables moniker implementations to store interface pointers under a well-known string so that they can later be retrieved from the bind context. For example, OLE defines several string keys (e.g., "ExceededDeadline", "ConnectManually") that can be used to store a pointer to the object that caused an error during a binding operation. </li>
</ul>
<h5>When to Implement</h5>
<p>
You do not need to implement this interface. The system provides an <b>IBindCtx </b>implementation, accessible though a call to the <a href="api2_0ad4.htm"><b>CreateBindCtx</b></a> function, that is suitable for all situations. </p>
<h5>When to Use</h5>
<p>
Anyone writing a new moniker class by implementing the <a href="if_f2n_8otu.htm"><b>IMoniker</b></a> interface must call <b>IBindCtx</b> methods in the implementation of several <b>IMoniker</b> methods. Moniker providers (servers that hand out monikers to identify their objects) may also need to call <b>IBindCtx</b> methods from their implementations of the <b>IOleItemContainer </b>or <a href="if_p2q_4t5x.htm"><b>IParseDisplayName</b></a> interfaces.</p>
<p>
Moniker clients (objects that use monikers to acquire interface pointers to other objects) typically don't call many <b>IBindCtx</b> methods. Instead, they simply pass a bind context as a parameter in a call to an <b>IMoniker</b> method. To acquire an interface pointer and activate the indicated object (called binding to an object), moniker clients typically do the following: 
<ol>
<li>
Call the <a href="api2_0ad4.htm"><b>CreateBindCtx</b></a> function to create a bind context and get a pointer to the <b>IBindCtx</b> interface on the bind context object.</li>
<li>
If desired (although this is rarely necessary), the moniker client can call <a href="if_a2e_83g3.htm"><b>IBindCtx::SetBindOptions</b></a> to specify the bind options.</li>
<li>
Pass the bind context as a parameter to the desired <a href="if_f2n_8otu.htm"><b>IMoniker</b></a> method (usually <a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a>). </li>
<li>
Call <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a> on the bind context to release it. </li>
</ol>
<p>
Although applications that act as link containers (container applications that allow their documents to contain linked objects) are moniker clients, they rarely call <b>IMoniker</b> methods directly. Generally, they manipulate linked objects through the system implementation (in the default handler) of the <b>IOleLink</b> interface. This implementation calls the appropriate <b>IMoniker</b> methods as needed, and, in doing so, passes pointers to <b>IBindCtx</b> interfaces on the proper bind context objects.</p>
<h4>Methods in Vtable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>IUnknown Methods</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_7fvp.htm"><b>QueryInterface</b></a></td>
<td width=52%>Returns pointers to supported interfaces.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_3rja.htm"><b>AddRef</b></a></td>
<td width=52%>Increments the reference count.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_59np.htm"><b>Release</b></a></td>
<td width=52%>Decrements the reference count.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>IBindCtx Methods</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><a href="if_a2e_31es.htm"><b>RegisterObjectBound</b></a></td>
<td width=52%>Registers an object with the bind context.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_a2e_1yp0.htm"><b>RevokeObjectBound</b></a></td>
<td width=52%>Revokes an object's registration.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_a2e_08ab.htm"><b>ReleaseBoundObjects</b></a></td>
<td width=52%>Releases all registered objects.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_a2e_83g3.htm"><b>SetBindOptions</b></a></td>
<td width=52%>Sets the binding options.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_a2e_3mur.htm"><b>GetBindOptions</b></a></td>
<td width=52%>Retrieves the binding options.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_a2e_70bp.htm"><b>GetRunningObjectTable</b></a></td>
<td width=52%>Retrieves a pointer to the Running Object Table.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_a2e_8eul.htm"><b>RegisterObjectParam</b></a></td>
<td width=52%>Associates an object with a string key.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_a2e_9o6l.htm"><b>GetObjectParam</b></a></td>
<td width=52%>Returns the object associated with a given string key.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_a2e_1iul.htm"><b>EnumObjectParam</b></a></td>
<td width=52%>Enumerates all the string keys in the table.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_a2e_7c4t.htm"><b>RevokeObjectParam</b></a></td>
<td width=52%>Revokes association between an object and a string key.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also </h4>
<p>
<a href="api2_0ad4.htm"><b>CreateBindCtx</b></a>, <a href="if_f2n_8otu.htm"><b>IMoniker</b></a>, <a href="if_o_0yb6.htm"><b>IOleItemContainer</b></a>, <a href="if_p2q_4t5x.htm"><b>IParseDisplayName</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

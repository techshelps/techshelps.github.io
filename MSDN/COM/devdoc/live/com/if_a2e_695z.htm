<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IBindStatusCallback::OnStartBinding</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_ibindstatuscallback_onstartbinding"></a>IBindStatusCallback::OnStartBinding</h2>
<p>
Notifies the client about the callback methods it is registered for receiving. This notification is a response to the flags the client requested in <a href="api3_8bvv.htm"><b>RegisterBindStatusCallback</b></a>.</p>
<pre><code><b>HRESULT OnStartBinding(
  DWORD </b><i> dwReserved</i><b>,  </b>// Reserved for future use
<b>  IBinding</b><i> *pbinding  </i>// Pointer to the IBinding interface for the 
                      // current bind operation
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwReserved</i></dt>
<dd>
Reserved for future use. Must be zero.</dd>
<dt>
<i>pbinding</i></dt>
<dd>
[in] Pointer to the <a href="if_a2e_0oyv.htm"><b>IBinding</b></a> interface of the current bind operation. May not be NULL. The client should call <b>AddRef</b> on this pointer to keep a reference to the binding object.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The operation was successful.</dd>
<dt>
E_INVALIDARG</dt>
<dd>
The <i>pbinding</i> parameter is invalid.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Asynchronous monikers typically call this method before the call to <b>IMoniker::BindToStorage</b> or <b>IMoniker::BindToObject</b> has returned.</p>
<p>
In the call to this method, the moniker also provides the client with a pointer to the <b>IBinding</b> interface for the binding object associated with the current bind operation. The client can use the <b>IBinding</b> interface to control the progress of the bind operation.</p>
<p>
To keep a reference to the binding object, the client must store the pointer to the <b>IBinding</b> interface and call <b>AddRef</b> on it. When the client no longer needs the reference, it must call <b>Release</b> on it. Note that calling <b>Release</b> does not cancel the bind operation, it simply frees the reference to the <b>IBinding</b> interface sent in the callback.</p>
<h5>Notes to Implementers</h5>
<p>
A client can return E_UNIMPL or S_OK if it is not interested in receiving this notification.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in urlmon.h.</p>
<h4>See Also</h4>
<p>
<a href="if_a2e_0oyv.htm"><b>IBinding</b></a>, <a href="if_a2e_0wh3.htm"><b>IBindStatusCallback::OnStopBinding</b></a>, <a href="api3_8bvv.htm"><b>RegisterBindStatusCallback</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IViewObjectEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_iviewobjectex"></a>IViewObjectEx</h1>
<p>
The <b>IViewObjectEx</b> interface is an extension derived from <b>IViewObject2</b> to provide support for:
<ul>
<li>
enhanced, flicker-free drawing for non-rectangular objects and transparent objects</li>
<li>
hit testing for non-rectangular objects</li>
<li>
control sizing</li>
</ul>
<h5>Flicker free drawing</h5>
<p>
Containers can now choose between a variety of drawing algorithms, depending on their sophistication and the situation.</p>
<p>
Flicker is created by redrawing the background before letting an object redraw its foreground as in the back to front drawing algorithm known as the Painter's Algorithm. There are essentially two ways to avoid flickering:
<ul>
<li>
Draw into an offscreen bitmap and then copy the resulting image to the screen in one chunk. This technique might require significant additional resources to store the offscreen image, depending on the size of the region to drawn, the resolution, and the number of colors.</li>
<li>
Draw front to back, instead of back to front, excluding each rectangular area from the clipping region as soon as its has been painted. One benefit of this technique is that each pixel is painted only once. Speed depends essentially on the performance of the clipping support. </li>
</ul>
<p>
Each technique has advantages and disadvantages, depending on the specific situation. There is no single algorithm that is most efficient in all situations. Depending on the situation and their sophistication, containers may choose to use one or another, or a mix of both. The <b>IViewObjectEx</b> interface provides methods to support both techniques or a mixture of the two. Simple containers can implement a simplistic back to front painting algorithm directly to the screen. The speed is likely to be high but so will flicker. If flicker is to be reduced to a minimum, painting to an off-screen device context is the solution of choice. If memory consumption is a problem, containers can use clipping to reduce the use of off screen bitmaps.</p>
<p>
To draw as flicker-free as possible without using an offscreen bitmap, the container will have to paint in two passes. The first pass is done front to back. During that pass, each object draws regions of itself that are cheap enough to clip out efficiently and that it can entirely obscure. These regions are known as opaque. After each object is done, the container clips out the regions just painted to ensure that subsequent objects will not modify the bits on the screen.</p>
<p>
During the second pass, which occurs back to front, each object draws its remaining parts - irregular, oblique or in general difficult to clip out, such as text on transparent background. Such parts are known as transparent. At this point, the container is responsible for clipping out any opaque, already painted regions in front of the object currently drawing. The less painting during this second pass, the less flicker on the screen.</p>
<p>
Clipping during the second pass may be very inefficient, since the clipping region needs to be recreated for every object that has something to draw. This might be acceptable if not too many overlapping objects have irregular or transparent parts. An object can tell its container ahead of time whether it wants to be called during this second pass or not.</p>
<p>
If the container provides an offscreen bitmap to paint into, then it can skip the first pass and ask every object to render itself entirely during the second pass. In certain cases, the container may also decide than flicker is not a problem and use that same technique while painting directly on screen. For example, flicker might be acceptable when painting a form for the first time, but not when repainting. </p>
<p>
<b>Note</b>&nbsp;&nbsp;Although documented here two pass drawing is not currently utilized by any containers.</p>
<h5>Hit testing for non-rectangular objects</h5>
<p>
The <b>IViewEx</b> interface supports hit detection for non-rectangular objects. Using the <b>QueryHitPoint</b> and <b>QueryHitRect</b> methods, the object can participate in the hit-test logic with the container.</p>
<h5>Control Sizing</h5>
<p>
The <b>IViewEx</b> interface allows controls to provide sizing hints as the user resizes the control. The control can specify a minimum and maximum size and can specify the nearest good size to a size requested by the user.</p>
<h5>When to Implement</h5>
<p>
Implement this interface on objects that need to support efficient flicker-free drawing, non-rectangular hit testing, or control sizing. This interface is derived from the <a href="if_r2z_0zea.htm"><b>IViewObject2</b></a> interface which, in turn, is derived from <b>IViewObject</b>.</p>
<p>
All <b>IViewObjectEx</b> methods described in this document that take or return a position assume that the location is expressed in HIMETRIC units relative to the origin of the object.</p>
<h5>When to Use</h5>
<p>
Containers call the methods of this interface to draw objects in an efficient, flicker free manner, test whether points or rectangles are within the object, or to resize controls.</p>
<h4>Methods in Vtable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%><a href="if_r2z_9dwu.htm">IUnknown</a> Methods</th>
<th align=left width=54%>Description</th>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_7fvp.htm"><b>QueryInterface</b></a></td>
<td width=54%>Returns pointers to supported interfaces.</td>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_3rja.htm"><b>AddRef</b></a></td>
<td width=54%>Increments reference count.</td>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_59np.htm"><b>Release</b></a></td>
<td width=54%>Decrements reference count.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%><a href="if_r2z_0n1w.htm">IViewObject</a> Methods</th>
<th align=left width=54%>Description</th>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_799z.htm"><b>Draw</b></a></td>
<td width=54%>Draws a representation of the object onto a device context.</td>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_79v8.htm"><b>GetColorSet</b></a></td>
<td width=54%>Returns the logical palette the object uses for drawing.</td>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_6lwl.htm"><b>Freeze</b></a></td>
<td width=54%>Freezes the drawn representation of an object so it will not change until a subsequent <b>Unfreeze</b>.</td>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_4ig5.htm"><b>Unfreeze</b></a></td>
<td width=54%>Unfreezes the drawn representation of an object.</td>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_5qxx.htm"><b>SetAdvise</b></a></td>
<td width=54%>Sets up a connection between the view object and an advise sink so that the advise sink can receive notifications of changes in the view object.</td>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_2h0l.htm"><b>GetAdvise</b></a></td>
<td width=54%>Returns the information on the most recent <b>SetAdvise</b>.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%><a href="if_r2z_0zea.htm">IViewObject2</a> Method</th>
<th align=left width=54%>Description</th>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_5n90.htm"><b>GetExtent</b></a></td>
<td width=54%>Returns the size that the specified view object will be drawn on the specified target device.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>IViewObjectEx Methods</th>
<th align=left width=54%>Description</th>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_6g50.htm"><b>GetRect</b></a></td>
<td width=54%>Returns a rectangle describing a requested drawing aspect.</td>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_9m7n.htm"><b>GetViewStatus</b></a></td>
<td width=54%>Returns information about the opacity of the object, and what drawing aspects are supported.</td>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_7tkk.htm"><b>QueryHitPoint</b></a></td>
<td width=54%>Indicates whether a point is within a given aspect of an object.</td>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_4do4.htm"><b>QueryHitRect</b></a></td>
<td width=54%>Indicates whether any point in a rectangle is within a given drawing aspect of an object.</td>
</tr>
<tr valign=top>
<td width=46%><a href="if_r2z_6y2c.htm"><b>GetNaturalExtent</b></a></td>
<td width=54%>Provides sizing hints from the container for the object to use as the user resizes it.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later. New for OC96.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. New for OC96.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ocidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_r2z_0zea.htm"><b>IViewObject2</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

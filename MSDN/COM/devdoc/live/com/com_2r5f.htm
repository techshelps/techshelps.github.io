<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Interfaces and Interface Implementations</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_interfaces_and_interface_implementations"></a>Interfaces and Interface Implementations</h2>
<p>
COM makes a fundamental distinction between interface definitions and their implementations. An <i>interface</i> is actually a contract that consists of a group of related function <i>prototypes</i> whose usage is defined but whose implementation is not. These function prototypes are equivalent to pure virtual base classes in C++ programming. An interface definition specifies the interface's member functions, called <i>methods,</i> their return types, the number and types of their parameters, and what they must do. There is no implementation associated with an interface.</p>
<p>
An <i>interface implementation</i> is the code a programmer supplies to carry out the actions specified in an interface definition. Implementations of many of the interfaces a programmer could use in an object-based application are included in the COM libraries. Programmers are, however, free to ignore these implementations and write their own. An interface implementation is to be associated with an object when an instance of that object is created, and provides the services that the object offers.</p>
<p>
For example, a hypothetical interface named <b>IStack</b> (many interface names begin with the letter "I") might define two <i>methods,</i> named <b>Push</b> and <b>Pop</b>, specifying that successive calls to the <b>Pop</b> method return, in reverse order, values previously passed to the <b>Push</b> method. This interface definition, however, would not specify how the functions are to be implemented in code. In implementing the interface, however, one programmer might implement the stack as an array and implement the <b>Push</b> and <b>Pop</b> methods in such a way as to access that array; while another programmer might prefer to use a linked list and would implement the methods accordingly. Regardless of a particular implementation of the <b>Push</b> and <b>Pop</b> methods, however, the in-memory representation of a pointer to an <b>IStack</b> interface, and therefore its use by a client, is completely defined by the interface definition.</p>
<p>
Simple objects may support only a single interface. More complicated objects, such as embeddable objects, typically support several interfaces. Clients have access to a COM object only through a pointer to one of its interfaces, which, in turn, allows the client to call any of the methods that make up that interface. These methods determine how a client can use the object's data. </p>
<p>
Interfaces, in fact, define a contract between an object and its clients. The contract specifies the methods that must be associated with each interface, and what the behavior of each of the methods must be in terms of input and output. The contract generally does not define <i>how</i> to implement the methods in an interface. Another important aspect of the contract is that if an object supports an interface, it must support all of its methods in some way. Not all of the methods in an implementation need to do something — if an object does not support the function implied by a method, its implementation may be a simple return, or perhaps the return of a meaningful error message — but the methods must <i>exist</i>.</p>
<p>
COM uses the word "interface" in a sense different from that typically used in C++ programming. A C++ interface refers to <i>all </i>of the functions that a class supports and that clients of an object can call to interact with it. A COM interface refers to a predefined group of related functions that a COM class implements, but does not necessarily represent <i>all </i>the functions that the class supports.</p>
<p>
Java programmers, on the other hand, will find themselves at home with COM interfaces, because Java defines interfaces in just the same way.</p>
<p>&nbsp;</p></body>
</HTML>

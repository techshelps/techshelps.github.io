<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DllCanUnloadNow</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_dllcanunloadnow"></a>DllCanUnloadNow</h1>
<p>
Determines whether the DLL that implements this function is in use. If not, the caller can safely unload the DLL from memory.</p>
<p>
<b>Note</b>&nbsp;&nbsp;OLE does not provide this function. DLLs that support the OLE Component Object Model (COM) should implement and export <b>DllCanUnloadNow</b>.</p>
<pre><b><code>STDAPI DllCanUnloadNow();
 </code></b></pre>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The DLL can be unloaded.</dd>
<dt>
S_FALSE</dt>
<dd>
The DLL cannot be unloaded now.
</dd>
</dl>
<h4>Remarks</h4>
<p>
A call to <b>DllCanUnloadNow</b> determines whether the DLL from which it is exported is still in use. A DLL is no longer in use when it is not managing any existing objects (the reference count on all of its objects is 0). </p>
<h5>Notes to Callers</h5>
<p>
You should not have to call <b>DllCanUnloadNow</b> directly. OLE calls it only through a call to the <a href="api1_3p2r.htm"><b>CoFreeUnusedLibraries</b></a> function. When it returns S_OK, <b>CoFreeUnusedLibraries</b> safely frees the DLL.</p>
<h5>Notes to Implementers</h5>
<p>
You need to implement <b>DllCanUnloadNow</b> in, and export it from, DLLs that are to be dynamically loaded through a call to the <a href="api1_6yb8.htm"><b>CoGetClassObject</b></a> function. (You also need to implement and export the <a href="api2_48fo.htm"><b>DllGetClassObject</b></a> function in the same DLL).</p>
<p>
If a DLL loaded through a call to <b>CoGetClassObject</b> fails to export <b>DllCanUnloadNow</b>, the DLL will not be unloaded until the application calls the <a href="api1_7vqd.htm"><b>CoUninitialize</b></a> function to release the OLE libraries.</p>
<p>
If the DLL links to another DLL, returning S_OK from <b>DllCanUnloadNow</b> will also cause the second, dependent DLL to be unloaded. To eliminate the possibility of a crash, the primary DLL should call the <a href="api1_95rt.htm"><b>CoLoadLibrary</b></a> function, specifying the path to the second DLL as the first parameter, and setting the auto free parameter to TRUE. This forces the COM library to reload the second DLL and set it up for a call to <a href="api1_3p2r.htm"><b>CoFreeUnusedLibraries</b></a> to free it separately when appropriate. </p>
<p>
<b>DllCanUnloadNow</b> should return S_FALSE if there are any existing references to objects that the DLL manages.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in oleaut32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api2_48fo.htm"><b>DllGetClassObject</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

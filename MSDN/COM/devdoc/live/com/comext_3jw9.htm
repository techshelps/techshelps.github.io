<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Process-wide Security Through the Registry</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_com_setting_process_wide_security_through_the_registry"></a>Setting Process-wide Security Through the Registry</h3>
<p>
If you want to call any of the security functions or interface methods within your application, and are happy to set security process-wide, the simplest thing to do is to use the Dcomcnfg.exe tool to set the security levels you want in the registry. This also works well for existing applications. If you decide to set process-wide security using the registry, do not call <a href="api1_8ayh.htm"><b>CoInitializeSecurity</b></a> within your program because COM uses the values in <b>CoInitializeSecurity </b>and ignores the registry values.</p>
<p>
For step-by-step procedures on using Dcomcnfg.exe to set process-wide security, see <a href="comext_1xbb.htm"><b>Setting Process-Wide Security Using DCOMCNFG</b></a>. </p>
<p>
If you decide not to use Dcomcnfg.exe to set process-wide security, you can manipulate the registry values directly instead. To control access to a specific application, you can set values in the registry under the <a href="reg_33y1.htm">AppID key</a> for the application. An AppID is a GUID that represents a server process for one or more classes. Each class is associated with exactly one AppID. AppIDs can be assigned only to EXEs. DLLs do not get AppIDs unless they are running in surrogate—and then it is the surrogate process that has the AppID. If multiple DLLs are loaded into a surrogate, each surrogate has only one AppID. </p>
<p>
There are two named values under the AppID<b> </b>key that you can set without administrator permissions: 
<ul>
<li>
<a href="reg_827i.htm"><b>AccessPermission</b></a> </li>
<li>
<a href="reg_5tik.htm"><b>AuthenticationLevel</b></a> </li>
</ul>
<p>
The <b>AuthenticationLevel</b> and <b>AccessPermission</b> values are set independently and have separate default values. If the <b>AuthenticationLevel</b> value is not present, the <a href="reg_4ros.htm"><b>LegacyAuthenticationLevel</b></a> value is used as the default. Similarly, if the <b>AccessPermission</b> value is not present, the <a href="reg_9k4u.htm"><b>DefaultAccessPermission</b></a> value is used as the default. However, the <b>AuthenticationLevel</b> and the <b>AccessPermission</b> values are interrelated in the following ways:
<ul>
<li>
If the <b>AuthenticationLevel</b> is none, the <b>AccessPermission</b> and <b>DefaultAccessPermission</b> values are ignored for that application.</li>
<li>
If the <b>AuthenticationLevel</b> is not present and the <b>LegacyAuthenticationLevel</b> is none, the <b>AccessPermission</b> and <b>DefaultAccessPermission</b> values are ignored for that application.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoReleaseServerProcess</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_coreleaseserverprocess"></a>CoReleaseServerProcess</h1>
<p>
Decrements the global per-process reference count</p>
<pre><b><code>ULONG CoReleaseServerProcess(void);</code></b></pre>
<h4>Return Values</h4>
<dl>
<dt>
0</dt>
<dd>
The server application should initiate its cleanup.
<p>
Other values

<p>
Server application should not yet initiate its cleanup.

</dd>
</dl>
<h4>Remarks</h4>
<p>
Servers can call <b>CoReleaseServerProcess</b> to decrement a global per-process reference count incremented through a call to <a href="api1_4s6r.htm"><b>CoAddRefServerProcess</b></a></p>
<p>
When that count reaches zero, OLE automatically calls <a href="api1_4ohf.htm"><b>CoSuspendClassObjects</b></a>, which prevents new activation requests from coming in. This permits the server to deregister its class objects from its various threads without worry that another activation request may come in. New activation requests result in launching a new instance of the local server process.</p>
<p>
The simplest way for a local server application to make use of these API functions is to call <b>CoAddRefServerProcess</b> in the constructor for each of its instance objects, and in each of its <b>IClassFactory::LockServer</b> methods when the <i>fLock</i> parameter is TRUE. The server application should also call <b>CoReleaseServerProcess</b> in the destruction of each of its instance objects, and in each of its <b>IClassFactory::LockServer</b> methods when the <i>fLock</i> parameter is FALSE. Finally, the server application must check the return code from <b>CoReleaseServerProcess</b>; if it returns 0, the server application should initiate its cleanup. This typically means that a server with multiple threads should signal its various threads to exit their message loops and call <b>CoRevokeClassObject</b> and <b>CoUninitialize</b>. </p>
<p>
If these APIs are used at all, they must be called in both the object instances and the <b>LockServer</b> method, otherwise the server application may be shutdown prematurely. In-process Servers typically should not call <b>CoAddRefServerProcess</b> or <b>CoReleaseServerProcess</b>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api1_4ohf.htm"><b>CoSuspendClassObjects</b></a>, <a href="#_com_coreleaseserverprocess"><b>CoReleaseServerProcess</b></a>, <a href="if_a2e_38vm.htm"><b>IClassFactory::LockServer</b></a>, <a href="comext_3ib7.htm"><b>Out-of-process Server Implementation Helpers</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

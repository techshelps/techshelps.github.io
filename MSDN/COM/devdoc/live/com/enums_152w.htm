<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CLSCTX</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_clsctx"></a>CLSCTX</h1>
<p>
Values from the CLSCTX enumeration are used in activation calls to indicate the execution contexts in which an object is to be run. These values are also used in calls to <a href="api1_6kz8.htm"><b>CoRegisterClassObject</b></a> to indicate the set of execution contexts in which a class object is to be made available for requests to construct instances.</p>
<pre><code>typedef enum tagCLSCTX 
{ 
    CLSCTX_INPROC_SERVER   = 1, 
    CLSCTX_INPROC_HANDLER  = 2, 
    CLSCTX_LOCAL_SERVER    = 4 
    CLSCTX_REMOTE_SERVER   = 16
} CLSCTX; 
#define <b>CLSCTX_SERVER</b>    (CLSCTX_INPROC_SERVER | CLSCTX_LOCAL_SERVER | CLSCTX_REMOTE_SERVER)
#define <b>CLSCTX_ALL</b>       (CLSCTX_INPROC_HANDLER | CLSCTX_SERVER)
 </code></pre>
<h4>Elements</h4>
<dl>
<dt>
CLSCTX_INPROC_SERVER</dt>
<dd>
The code that creates and manages objects of this class runs in the same process as the caller of the function specifying the class context.</dd>
<dt>
CLSCTX_INPROC_HANDLER</dt>
<dd>
The code that manages objects of this class is an in-process handler. This is a DLL that runs in the client process and implements client-side structures of this class when instances of the class are accessed remotely.</dd>
<dt>
CLSCTX_LOCAL_SERVER</dt>
<dd>
The EXE code that creates and manages objects of this class is loaded in a separate process space (runs on same machine but in a different process).</dd>
<dt>
CLSCTX_REMOTE_SERVER</dt>
<dd>
A remote machine context. The <a href="reg_95de.htm"><b>LocalServer32</b></a> or <a href="reg_2tgl.htm"><b>LocalService</b></a> code that creates and manages objects of this class is run on a different machine.
</dd>
</dl>
<h4>Defined Terms</h4>
<dl>
<dt>
CLSCTX_SERVER</dt>
<dd>
Indicates server code, whether in-process, local, or remote. This definition ORs CLSCTX_INPROC_SERVER, CLSCTX_LOCAL_SERVER, and CLSCTX_REMOTE_SERVER.</dd>
<dt>
CLSCTX_ALL</dt>
<dd>
Indicates all class contexts. This definition ORs CLSCTX_INPROC_HANDLER and CLSCTX_SERVER.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Values from the CLSCTX enumeration are used in activation calls (<a href="api1_1nad.htm"><b>CoCreateInstance</b></a>, <a href="api1_5ry0.htm"><b>CoCreateInstanceEx</b></a>, <a href="api1_6yb8.htm"><b>CoGetClassObject</b></a>, etc.) to indicate the preferred execution contexts – in-process, local, or remote – in which an object is to be run. They are also used in calls to <b>CoRegisterClassObject</b> to indicate the set of execution contexts in which a class object is to be made available for requests to construct instances (<a href="if_a2e_5k11.htm"><b>IClassFactory::CreateInstance</b></a>).</p>
<p>
To indicate that more than one context is acceptable, you can string multiple values together with Boolean ORs. The contexts are tried in the order in which they are listed. </p>
<p>
The following table shows how other OLE functions and methods that call <a href="api1_6yb8.htm"><b>CoGetClassObject</b></a> use the CLSCTX values:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Function Called</th>
<th align=left width=52%>Context Flag Used</th>
</tr>
<tr valign=top>
<td width=48%><a href="api3_1cmc.htm"><b>OleLoad</b></a></td>
<td width=52%>CLSCTX_INPROC_HANDLER | CLSCTX_INPROC_SERVER<p>
Putting an OLE object into the loaded state requires in-process access; but, it doesn't matter if all of the object's function is presently available.</p>
</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_763y.htm"><b>IRunnableObject::Run</b></a></td>
<td width=52%>CLSCTX_INPROC_SERVER | CLSCTX_LOCAL_SERVER<p>
Running an OLE object requires connecting to the full code of the object wherever it is located.</p>
</td>
</tr>
<tr valign=top>
<td width=48%><a href="api1_6gbp.htm"><b>CoUnMarshalInterface</b></a></td>
<td width=52%>CLSCTX_INPROC_HANDLER  <p>
Unmarshaling needs the form of the class designed for remote access.</p>
</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a>, for a file moniker created through a call to <b>CreateFileMoniker</b></td>
<td width=52%>In this case, uses CLSCTX_SERVER interally to create the instance after calling GetClassFile to determine the class to be instantiated.</td>
</tr>
</table><br>
<p>
The CLSCTX_REMOTE_SERVER value is added to the CLSCTX enumeration for distributed COM. The CLSCTX_SERVER and CLSCTX_ALL constants are further updated to include the CLSCTX_REMOTE_SERVER value.</p>
<p>
Given a set of CLSCTX flags, <i>dwClsCtx</i>, the execution context to be used depends on the availability of registered class codes and other parameters according to the following algorithm:</p>
<p>
The first part of the processing determines whether CLSCTX_REMOTE SERVER should be specified as follows:
<ol>
<li>
If the call specifies either <ol type=a>
<li>
an explicit <a href="structs_34vj.htm"><b>COSERVERINFO</b></a> structure indicating a machine different from the current machine, or </li>
<li>
there is no explicit COSERVERINFO structure specified, but the specified class is registered with either the <b>RemoteServerName</b> or <b>ActivateAtStorage</b> named-value.</li>
</ol>
<p>
then CLSCTX_REMOTE_SERVER is implied and is added to <i>dwClsCtx</i>. The second case allows applications written prior to the release of distributed COM to be the configuration of classes for remote activation to be used by client applications available prior to DCOM and the CLSCTX_REMOTE_SERVER flag. The cases in which there would be no explicit <b>COSERVERINFO</b> structure are 1) The value is specified as NULL, or 2) It is not one of the function parameters, as would be the case in calls to <b>CoCreateInstance</b> or <b>CoGetClassObject</b> in existing applications. 
</li>
<li>
If the explicit COSERVERINFO parameter indicates the current machine, CLSCTX_REMOTE_SERVER is removed (if present) from <i>dwClsCtx</i>.</li>
</ol>
<p>
The rest of the processing proceeds by looking at the value(s) of <i>dwClsCtx</i> in the following sequence.
<ol>
<li>
If <i>dwClsCtx</i> includes CLSCTX_REMOTE_SERVER and no COSERVERINFO parameter is specified, if the activation request indicates a persistent state from which to initialize the object (with <b>CoGetInstanceFromFile</b>, <b>CoGetInstanceFromIStorage</b>, or, for a file moniker, in a call to <b>IMoniker::BindToObject</b>) and the class has an <b>ActivateAtStorage</b> sub-key <i>or no class registry information whatsoever</i>, the request to activate and initialize is forwarded to the machine where the persistent state resides. (Refer to the remote activation functions listed in the See Also section for details.)</li>
<li>
If <i>dwClsCtx</i> includes CLSCTX_INPROC_SERVER, the class code in the DLL found under the class's <a href="reg_5n8y.htm"><b>InprocServer32</b></a> key is used if this key exists. The class code will run within the same process as the caller.</li>
<li>
If dwClsCtx includes CLSCTX_INPROC_HANDLER, the class code in the DLL found under the class's <a href="reg_94z6.htm"><b>InprocHandler32</b></a> key is used if this key exists. The class code will run within the same process as the caller.</li>
<li>
If <i>dwClsCtx</i> includes CLSCTX_LOCAL_SERVER, the class code in the Win32 service found under the class's <a href="reg_2tgl.htm"><b>LocalService</b></a> key is used if this key exists. If no Win32 service is specified, but an EXE is specified under that same key, the class code associated with that EXE is used. The class code (in either case) will be run in a separate service process on the same machine as the caller.</li>
<li>
If <i>dwClsCtx</i> is set to CLSCTX_REMOTE_SERVER and an additional COSERVERINFO parameter to the function specifies a particular remote machine, a request to activate is forwarded to this remote machine with <i>dwClsCtx</i> modified to be CLSCTX_LOCAL_SERVER. The class code will run in its own process on this specific machine, which must be different from that of the caller.</li>
<li>
Finally, if <i>dwClsCtx</i> includes CLSCTX_REMOTE_SERVER and no COSERVERINFO parameter is specified, if a machine name is given under the class's <a href="reg_7an9.htm"><b>RemoteServerName</b></a> named-value, the request to activate is forwarded to this remote machine with <i>dwClsCtx</i> modified to be CLSCTX_LOCAL_SERVER. The class code will run in its own process on this specific machine, which must be different from that of the caller.</li>
</ol>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.1 and later. <br>
&nbsp;&nbsp;<b>Windows:</b> Use Windows 95 and later. <br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in wtypes.h.</p>
<h4>See Also</h4>
<p>
<a href="api1_1nad.htm"><b>CoCreateInstance</b></a>, <a href="api1_6yb8.htm"><b>CoGetClassObject</b></a>, <a href="api1_6kz8.htm"><b>CoRegisterClassObject</b></a>, <a href="api1_765h.htm"><b>CoGetInstanceFromFile</b></a>, <a href="api1_192d.htm"><b>CoGetInstanceFromIStorage</b></a>, <a href="api1_5ry0.htm"><b>CoCreateInstanceEx</b></a>, <a href="structs_34vj.htm"><b>COSERVERINFO</b></a> structure, <a href="comext_4otw.htm">Creating an Object through a Class Object</a>, <a href="comext_3ktu.htm">Registering a Running EXE Server</a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICancelMethodCalls::SetCancelTimeout</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_icancelmethodcalls_setcanceltimeout"></a>ICancelMethodCalls::SetCancelTimeout</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Sets the lower bound on the time COM waits for a server to acknowledge a cancel request.</p>
<pre><code><b>HRESULT SetCancelTimeout(
</b>  <b>int </b><i>nSeconds</i>  //Timeout period
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>nSeconds</i></dt>
<dd>
[in] Number of seconds COM waits for a server to acknowledge a cancel request. If 0, a call to <b>Cancel</b> returns immediately without waiting for an acknowledgment. If RPC_C_CANCEL_INFINITE_TIMEOUT, a call to <b>Cancel</b> waits indefinitely for acknowledgment.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return values E_FAIL, E_NOTIMPL, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
The timeout period was set.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The client must call <b>SetCancelTimeout</b> before making the method call associated with the cancel object. Unless the timeout period is specified as 0, the value passed is only advisory: how the cancel object uses it depends on the implementation and can take into account such factors as the context of the call (in-process, out-of-process on local machine, out-of-process on remote machine) and nature of client thread (apartment or free thread). </p>
<p>
A timeout value of 0 must always be honored, in which case the caller never waits for an acknowledgment and so is never blocked by a pending call to <b>Cancel</b>. For a timeout value of 0, a subsequent call to <b>TestCancel</b> must return RPC_E_CALL_CANCELED if the call is actually canceled. </p>
<p>
If the timeout value is 0 and the pending call returns, COM discards the return value of the pending call. </p>
<p>
A timeout value of RPC_C_CANCEL_INFINITE_TIMEOUT indicates that the caller will wait until the <b>Cancel</b> call returns, no matter how long it takes. For a timeout value of RPC_C_CANCEL_INFINITE_TIMEOUT, a subsequent call to <b>TestCancel</b> must return RPC_E_CALL_CANCELED if the call is actually canceled.</p>
<p>
</p>
<p>
</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Asynchronous Versus Synchronous Monikers</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_com_asynchronous_versus_synchronous_monikers"></a>Asynchronous Versus Synchronous Monikers</h3>
<p>
A client of a stadard, synchronous OLE moniker typically creates and holds a reference to the moniker, as well as the bind-context to be used during binding. The components involved in using traditional monikers are shown in the following diagram.</p>
<p>
<img src="images/asy_mon1.gif" border=0></p>
<p>
Clients typically create standard monikers by calling APIs functions such as <a href="api2_3tf6.htm"><b>CreateFileMoniker</b></a>, <a href="api2_1ktu.htm"><b>CreateItemMoniker</b></a>, or <a href="api2_21iq.htm"><b>CreatePointerMoniker</b></a> or, because they are can be saved to persistent storage, through <a href="api3_2vfx.htm"><b>OleSaveToStream</b></a> and <a href="api3_1act.htm"><b>OleLoadFromStream</b></a>. Monikers may also be obtained from a container object by calling <a href="if_a2e_0m2a.htm"><b>IBindHost::CreateMoniker</b></a>. Clients create bind contexts by calling the <a href="api2_0ad4.htm"><b>CreateBindCtx</b></a> API function, then pass the bind context to the moniker with calls to <a href="if_f2n_1kx1.htm"><b>IMoniker::BindToStorage</b></a> or <a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a>.</p>
<p>
As shown in the following diagram, a client of an asynchronous moniker also creates and holds a reference to the moniker and bind-context to be used during binding.</p>
<p>
<img src="images/asy_mon2.gif" border=0></p>
<p>
In order to get asynchronous behavior, the client implements the <a href="if_a2e_0vxn.htm"><b>IBindStatusCallback</b></a> interface on a bind-status-callback object and calls the either the <a href="api3_8bvv.htm"><b>RegisterBindStatusCallback</b></a> or <a href="api2_14oo.htm"><b>CreateAsyncBindCtx</b></a> API functions to register this interface with the bind-context. The moniker passes a pointer to its <a href="if_a2e_0oyv.htm"><b>IBinding</b></a> interface in a call to <a href="if_a2e_695z.htm"><b>IBindStatusCallback::OnStartBinding</b></a>. The client tells the asynchronous moniker <i>how</i> it wants to bind on return from the moniker's call to <a href="if_a2e_5njj.htm"><b>IBindStatusCallback::GetBindInfo</b></a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOleParentUndoUnit</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_ioleparentundounit"></a>IOleParentUndoUnit</h1>
<p>
The <b>IOleParentUndoUnit</b> interface enables undo units to contain child undo units. For example, a complex action can be presented to the end user as a single undo action even though a number of separate actions are involved. All the subordinate undo actions are contained within the top-level, parent undo unit.</p>
<p>
A parent undo unit is initially created using the <b>IOleUndoManager::Open</b> method. Then, to add another parent unit nested within an existing parent unit, you call <b>IOleParentUndoUnit::Open</b>. While a parent unit is open, the undo manager adds undo units to it by calling <b>IOleParentUndoUnit::Add</b>. When the undo manager closes a top-level parent, the entire undo unit with its nested subordinates is placed on top of the undo stack.</p>
<p>
This interface is derived from <b>IOleUndoUnit</b> and supports all the methods on that interface.</p>
<p>
If an object needs to create a parent unit, there are several cases to consider:
<ul>
<li>
To create an enabling parent unit, the object calls <b>IOleUndoManager::GetOpenParentState</b> on the undo manager and checks the return value. If the value is S_FALSE, then the object creates the enabling parent and opens it. If the return value is S_OK, then there is a parent already open. If the open parent is blocked (UAS_BLOCKED bit set), or an enabling parent (UAS_BLOCKED and UAS_NOPARENTENABLE bits not set), then there is no need to create the enabling parent. If the currently open parent is a disabling parent (UAS_NOPARENTENABLE bit set), then the enabling parent should be created and opened to re-enable adding undo units. Note that UAS_NORMAL has a value of zero, which means it is the absence of all other bits and is not a bit flag that can be set. If comparing *<i>pdwState</i> against UAS_NORMAL, mask out unused bits from *<i>pdwState</i> with UAS_MASK to allow for future expansion.</li>
<li>
To create a blocked parent, the object calls <b>IOleUndoManager::GetOpenParentState</b> and checks for an open parent that is already blocked. If one exists, then there is no need to create the new blocking parent. Otherwise, the object creates it and opens it on the stack.</li>
<li>
To create a disabling parent, the object calls <b>IOleUndoManager::GetOpenParentState</b> and checks for an open parent that is blocked or disabling. If either one exists it is unnecessary to create the new parent. Otherwise, the object creates the parent and opens it on the stack.</li>
</ul>
<p>
In the event that both the UAS_NOPARENTENABLE and UAS_BLOCKED flags are set, the flag that is most relevant to the caller should be used with UAS_NOPARENTENABLE taking precedence. For example, if an object is creating a simple undo unit, it should pay attention to the UAS_NOPARENTENABLE flag and clear the undo stack. If it is creating an enabling parent unit, then it should pay attention to the UAS_BLOCKED flag and skip the creation.</p>
<p>
When the parent undo unit is marked blocked, it discards any undo units it receives.</p>
<h5>When to Implement</h5>
<p>
An undo unit that is capable of containing child undo units implements this interface in addition to <b>IOleUndoUnit</b>.</p>
<h5>When to Use</h5>
<p>
The undo manager calls the methods in this interface to add child undo units.</p>
<h4>Methods in VTable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%><a href="if_r2z_9dwu.htm">IUnknown</a> Methods</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_7fvp.htm"><b>QueryInterface</b></a></td>
<td width=52%>Returns a pointer to a specified interface.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_3rja.htm"><b>AddRef</b></a></td>
<td width=52%>Increments the reference count.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_59np.htm"><b>Release</b></a></td>
<td width=52%>Decrements the reference count.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%><a href="if_o_9jck.htm">IOleUndoUnit</a> Methods</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><a href="if_o_7w1b.htm"><b>Do</b></a></td>
<td width=52%>Instructs the undo unit to carry out its action.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_o_7k4u.htm"><b>GetDescription</b></a></td>
<td width=52%>Returns a string that describes the undo unit and can be used in the undo or redo user interface.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_o_2kx1.htm"><b>GetUnitType</b></a></td>
<td width=52%>Returns the CLSID and a type identifier for the undo unit.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_o_8gh0.htm"><b>OnNextAdd</b></a></td>
<td width=52%>Notifies the last undo unit in the collection that a new unit has been added.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>IOleParentUndoUnit Methods</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><a href="if_o_6r72.htm"><b>Open</b></a></td>
<td width=52%>Opens a new parent undo unit, which becomes part of the containing unit's undo stack.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_o_5msl.htm"><b>Close</b></a></td>
<td width=52%>Closes the most recently opened parent undo unit.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_o_7rl0.htm"><b>Add</b></a></td>
<td width=52%>Adds a simple undo unit to the collection.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_o_2eus.htm"><b>FindUnit</b></a></td>
<td width=52%>Indicates if the specified unit is a child of this undo unit or one of its children, that is if the specified unit is part of the hierarchy in this parent unit.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_o_4acl.htm"><b>GetParentState</b></a></td>
<td width=52%>Returns state information about the innermost open parent undo unit.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later. New for OC96.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. New for OC96.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ocidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_o_2lv6.htm"><b>IOleUndoManager</b></a>, <b>IOleUndoUnit</b> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

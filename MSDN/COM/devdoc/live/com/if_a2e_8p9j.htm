<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IEnumSTATPROPSTG</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_ienumstatpropstg"></a>IEnumSTATPROPSTG</h1>
<p>
The <b>IEnumSTATPROPSTG</b> interface is used to iterate through an array of <a href="structs_10pz.htm"><b>STATPROPSTG</b></a> structures, which contain statistical information about an open property storage containing a property set. <b>IEnumSTATPROPSTG</b> has the same methods as all enumerator interfaces: <b>Next</b>, <b>Skip</b>, <b>Reset</b>, and <b>Clone</b>. For general information on these methods, refer to <a href="if_a2e_8yns.htm"><b>IEnum<i>XXXX</i></b></a>.</p>
<p>
The implementation defines the order in which the properties in the set are enumerated. Properties that are present when the enumerator is created, and are not removed during the enumeration, will be enumerated only once. Properties added or deleted while the enumeration is in progress may or may not be enumerated, but they will never be enumerated more than once.</p>
<p>
Properties with property ID 0 (dictionary), property ID 1 (codepage indicator), or property ID greater than or equal to 0x80000000 are not enumerated.</p>
<p>
Enumeration of a non-simple property does not necessarily indicate that the property can be read successfully through a call to <b>IPropertyStorage::ReadMultiple</b>. This is because the performance overhead of checking existence of the indirect stream or storage is prohibitive during property enumeration. A client of this interface should code accordingly.</p>
<h5>When to Implement</h5>
<p>
Implement <b>IEnumSTATPROPSTG</b> to enumerate the properties within a property set. If you are using the compound file implementation of the storage object, a pointer to which is available through a call to <b>StgCreateDocfile</b>, you can then query for a pointer to <b>IPropertySetStorage</b>. After calling one of its methods either to open or create a property set, you can get a pointer to <b>IEnumSTATPROPSTG</b> through a call to <b>IPropertyStorage::Enum</b>. If you are doing a custom implementation of <b>IPropertyStorage</b>, you also need to implement <b>IEnumSTATPROPSTG</b> to fill in a caller-allocated array of <a href="structs_10pz.htm"><b>STATPROPSTG</b></a> structures. Each <b>STATPROPSTG</b> structure contains information about a simple property.</p>
<h5>When to Use</h5>
<p>
Applications that support storage objects and persistent properties within those objects call <b>IPropertyStorage::Enum</b> to return a pointer to <b>IEnumSTATPROPSTG</b> to enumerate the properties in the current property set. </p>
<p>
The prototypes of the methods are as follows:</p>
<pre><code><b>HRESULT Next(
  ULONG</b><i> celt</i><b>,</b>           
<b>  STATPROPSTG *</b><i> rgelt</i><b>,</b>  
<b>  ULONG *</b><i> pceltFetched  </i>
<b>);</b>
 
<b>HRESULT Skip(</b>
<b>  ULONG</b><i> celt  </i>
<b>);</b>
 
<b>HRESULT Reset(<i>void</i>)</b>
<b> </b>
<b>HRESULT Clone(</b>
<b>  IEnumSTATPROPSTG **</b><i> ppenum  </i>
<b>);</b>
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_p2q_1ru5.htm"><b>IPropertyStorage::Enum</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IClassFactory2::RequestLicKey</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_iclassfactory2_requestlickey"></a>IClassFactory2::RequestLicKey</h2>
<p>
If the <i>fRuntimeKeyAvail</i> field in <b>LICINFO</b> has been returned as TRUE from <b>IClassFactory2::GetLicInfo</b>, then this method creates and returns a license key. The caller can save the license key persistently and use it later in calls to <a href="if_a2e_8tk3.htm"><b>IClassFactory2::CreateInstanceLic</b></a>.</p>
<pre><code><b>HRESULT RequestLicKey(
  DWORD</b><i> dwReserved</i><b>,  </b>//Unused. Must be zero.
<b>  BSTR*</b><i> pbstrKey     </i>//Pointer to the license key
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwReserved</i></dt>
<dd>
[in] Unused. Must be zero.</dd>
<dt>
<i>pbstrKey</i></dt>
<dd>
[out] Pointer to the caller-allocated <b>BSTR</b> variable that receives the callee-allocated license key on successful return from this method. This parameter is set to NULL on any failure.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The license key was successfully created.</dd>
<dt>
E_NOTIMPL</dt>
<dd>
This class factory does not support run-time license keys.</dd>
<dt>
E_POINTER</dt>
<dd>
The address in <i>pbstrKey</i> is not valid. For example, it may be NULL.</dd>
<dt>
CLASS_E_NOTLICENSED</dt>
<dd>
This class factory supports run-time licensing, but the current machine itself is not licensed. Thus, a run-time key is not available on this machine.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The caller can save the license key for subsequent calls to <a href="if_a2e_8tk3.htm"><b>IClassFactory2::CreateInstanceLic</b></a> to create objects on an otherwise unlicensed machine.</p>
<h5>Notes to Callers</h5>
<p>
The caller must free the <b>BSTR</b> with <b>SysFreeString</b> when the key is no longer needed. The value of <i>fRuntimeKeyAvail</i> is returned through a previous call to <a href="if_a2e_5wbz.htm"><b>IClassFactory2::GetLicInfo</b></a>. </p>
<h5>Notes to Implementers</h5>
<p>
This method allocates the <b>BSTR</b> key with <code>SysAllocString</code> or <code>SysAllocString[Len]</code>, and the caller becomes responsible for this <b>BSTR</b> once this method returns successfully.</p>
<p>
This method need not be implemented when a class factory does not support run-time license keys.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ocidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_a2e_8tk3.htm"><b>IClassFactory2::CreateInstanceLic</b></a>, <a href="if_a2e_5wbz.htm"><b>IClassFactory2::GetLicInfo</b></a>, <a href="structs_2ju7.htm"><b>LICINFO</b></a> </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

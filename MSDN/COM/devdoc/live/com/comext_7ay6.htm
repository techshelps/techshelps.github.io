<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Registering a Class at Installation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_com_registering_a_class_at_installation"></a>Registering a Class at Installation</h3>
<p>
If a class is intended to be available to clients at any time, as most applications are, you usually register it through an installation and setup program. This means putting information about the application into the registry, including how and where its objects are to be instantiated. This information must be registered for all CLSIDs. Other information is optional. Win32 tools, such as <b>Regsvr32</b>, make it simple to write a setup program that registers servers at installation.</p>
<p>
If you are not relying on system defaults, there are two important keys in the registry: <a href="propsets_3mas.htm"><b>CLSID</b></a> and <a href="reg_33y1.htm"><b>AppID</b></a>. Among the important pieces of information under these keys is how the object is to be instantiated. Objects can be designated as in-process, out-of-process local, or out-of-process remote.</p>
<p>
Under the new <b>AppID</b> key, are several named-values that define information specific to that application. Among these are <a href="reg_7an9.htm"><b>RemoteServerName</b></a>, and <a href="reg_3o9x.htm"><b>ActivateAtStorage</b></a>, both of which can be used to permit a client with no built-in knowledge of the location of the server, to create an object. For more information on remote instantiation, see <a href="comext_5rn8.htm">Locating a Remote Object</a> and <a href="comext_4ws3.htm">Instance Creation Helper Functions</a>.</p>
<p>
A server can also be installed as a Win32 service, or to run under a specific user account. For more information, see <a href="comext_47ec.htm">Installing as a Win32 Service or User Account</a>.</p>
<p>
A server or ROT object that is not a Win32 service or run under a specific user account can be referred to as an "activate as activator" server. For these servers, the security context and the window station/desktop of the client must match the server's. A client attempting to connect to a remote server is considered to have a NULL window station/desktop, so only the server security context (for information on Windows NT SID, see the security section of the Win32 SDK) is compared in this instance. COM caches the window station/desktop of a process when the process first connects to the distributed COM service. Thus, COM clients and servers should not change their window station or thread desktops of the process after calling <b>CoInitialize</b> or <b>CoInitializeEX</b>.</p>
<p>
When a class is registered as in-process, a call to <b>CoGetClassObject</b> to create its class object is automatically passed by COM to the <a href="api2_48fo.htm"><b>DllGetClassObject</b></a> function, which the class must implement to give the calling object a pointer to its class object.</p>
<p>
Classes implemented in executables can specify that COM should execute their process and wait for the process to register their class object's <b>IClassFactory</b> through a call to the <a href="api1_6kz8.htm"><b>CoRegisterClassObject</b></a> function. </p>
<p>
For detailed COM registry information, see <a href="registry_8hrn.htm">Registering Components</a> and <a href="registry_75mb.htm">COM Registry Keys</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMoniker::ParseDisplayName</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_imoniker_parsedisplayname"></a>IMoniker::ParseDisplayName</h2>
<p>
Reads as many characters of the specified display name as it understands and builds a moniker corresponding to the portion read; this procedure is known as "parsing" the display name. </p>
<pre><code><b>HRESULT ParseDisplayName(
  IBindCtx</b><i> *pbc</i><b>,        </b>//Pointer to bind context to be used
<b>  IMoniker</b><i> *pmkToLeft</i><b>,  </b>//Pointer to moniker to the left in the 
                        //composite
<b>  LPOLESTR</b><i> pszDisplayName</i><b>,  </b>//Pointer to display name
<b>  ULONG</b><i> *pchEaten</i><b>,      </b>//Pointer to number of characters consumed
<b>  IMoniker</b><i> **ppmkOut    </i>//Address of output variable that receives 
                        //the IMoniker interface pointer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pbc</i></dt>
<dd>
[in] Pointer to the <b>IBindCtx</b> interface on the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment. For more information, see <a href="if_a2e_06bc.htm"><b>IBindCtx</b></a>. </dd>
<dt>
<i>pmkToLeft</i></dt>
<dd>
[in] Pointer to the <b>IMoniker</b> interface on the moniker that has been built out of the display name up to this point.</dd>
<dt>
<i>pszDisplayName</i></dt>
<dd>
[in] Pointer to a zero-terminated string containing the remaining display name to be parsed. For Win32 applications, the <b>LPOLESTR</b> type indicates a wide character string (two bytes per character); otherwise, the string has one byte per character.</dd>
<dt>
<i>pchEaten</i></dt>
<dd>
[out] Pointer to the number of characters in <i>pszDisplayName</i> that were consumed in this step.</dd>
<dt>
<i>ppmkOut</i></dt>
<dd>
[out] Address of <b>IMoniker</b>* pointer variable that receives the interface pointer to the moniker that was built from <i>pszDisplayName</i>. When successful, the implementation must call <a href="if_r2z_3rja.htm"><b>IUnknown::AddRef</b></a> on the new moniker; it is the caller's responsibility to call <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a>. If an error occurs, the implementation sets *<i>ppmkOut</i> to NULL. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
The method supports the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The parsing operation was completed successfully.</dd>
<dt>
MK_E_SYNTAX</dt>
<dd>
An error in the syntax of the input components (<i>pmkToLeft</i>, this moniker, and <i>pszDisplayName</i>). For example, a file moniker returns this error if <i>pmkToLeft</i> is non-NULL, and an item moniker returns it if <i>pmkToLeft</i> is NULL.</dd>
<dt>
<b>IMoniker::BindToObject</b> errors</dt>
<dd>
Parsing display names may cause binding. Thus, any error associated with this function may be returned.
</dd>
</dl>
<h4>Remarks</h4>
<h5>Notes to Callers</h5>
<p>
Moniker clients do not typically call <b>IMoniker::ParseDisplayName</b> directly. Instead, they call the <a href="api2_8hb9.htm"><b>MkParseDisplayName</b></a> function when they want to convert a display name into a moniker (for example, in implementing the Links dialog box for a container application, or for implementing a macro language that supports references to objects outside the document). That function first parses the initial portion of the display name itself. </p>
<p>
It then calls <b>IMoniker::ParseDisplayName</b> on the moniker it has just created, passing the remainder of the display name and getting a new moniker in return; this step is repeated until the entire display name has been parsed. </p>
<h5>Notes to Implementers</h5>
<p>
Your implementation may be able to perform this parsing by itself if your moniker class is designed to designate only certain kinds of objects. Otherwise, you must get an <a href="if_p2q_4t5x.htm"><b>IParseDisplayName</b></a> interface pointer for the object identified by the moniker-so-far (i.e., the composition of <i>pmkToLeft</i> and this moniker) and then return the results of calling <a href="if_p2q_4l5x.htm"><b>IParseDisplayName::ParseDisplayName</b></a>. </p>
<p>
There are different strategies for getting an <b>IParseDisplayName</b> pointer:
<ul>
<li>
You can try to get the object's CLSID (by calling <a href="if_p2q_1yn8.htm"><b>IPersist::GetClassID</b></a> on the object), and then call the <a href="api1_6yb8.htm"><b>CoGetClassObject</b></a> function, requesting the <b>IParseDisplayName</b> interface on the class factory associated with that CLSID. </li>
<li>
You can try to bind to the object itself to get an <b>IParseDisplayName</b> pointer.</li>
<li>
You can try binding to the object identified by <i>pmkToLeft</i> to get an <b>IOleItemContainer</b> pointer, and then call <b>IOleItemContainer::GetObject</b> to get an <a href="if_p2q_4t5x.htm"><b>IParseDisplayName</b></a> pointer for the item.</li>
</ul>
<p>
Any objects that are bound should be registered with the bind context (see <a href="if_a2e_31es.htm"><b>IBindCtx::RegisterObjectBound</b></a>) to ensure that they remain running for the duration of the parsing operation.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_p2q_4t5x.htm"><b>IParseDisplayName</b></a>, <a href="api2_8hb9.htm"><b>MkParseDisplayName</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

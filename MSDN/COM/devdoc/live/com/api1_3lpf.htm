<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoTaskMemRealloc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_cotaskmemrealloc"></a>CoTaskMemRealloc</h1>
<p>
Changes the size of a previously allocated block of task memory.</p>
<pre><code><b>LPVOID CoTaskMemRealloc(
  LPVOID</b><i> pv</i><b>,  </b>//Pointer to memory block to be reallocated
<b>  ULONG</b><i> cb    </i>//Size of block to be reallocated
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pv</i></dt>
<dd>
[in] Pointer to the memory block to be reallocated. It can be a NULL pointer, as discussed in the Remarks.</dd>
<dt>
<i>cb</i></dt>
<dd>
[in] Size, in bytes, of the memory block to be reallocated. It can be zero, as discussed in the following remarks.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
Reallocated memory block</dt>
<dd>
Memory block successfully reallocated.</dd>
<dt>
NULL</dt>
<dd>
Insufficient memory or <i>cb</i> is zero and <i>pv</i> is not NULL.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>CoTaskMemRealloc</b> function changes the size of a previously allocated memory block in the same way that <a href="if_f2n_7qqr.htm"><b>IMalloc::Realloc</b></a> does. It is not necessary to call the <a href="api1_2qlf.htm"><b>CoGetMalloc</b></a> function to get a pointer to the OLE allocator before calling <b>CoTaskMemRealloc</b>.</p>
<p>
The <i>pv</i> argument points to the beginning of the memory block. If <i>pv</i> is NULL, <b>CoTaskMemRealloc</b> allocates a new memory block in the same way as the <a href="api1_9bj7.htm"><b>CoTaskMemAlloc</b></a> function. If <i>pv</i> is not NULL, it should be a pointer returned by a prior call to <b>CoTaskMemAlloc</b>.</p>
<p>
The <i>cb</i> argument specifies the size (in bytes) of the new block. The contents of the block are unchanged up to the shorter of the new and old sizes, although the new block can be in a different location. Because the new block can be in a different memory location, the pointer returned by <b>CoTaskMemRealloc</b> is not guaranteed to be the pointer passed through the <i>pv</i> argument. If <i>pv</i> is not NULL and <i>cb</i> is zero, then the memory pointed to by <i>pv</i> is freed.</p>
<p>
<b>CoTaskMemRealloc</b> returns a void pointer to the reallocated (and possibly moved) memory block. The return value is NULL if the size is zero and the buffer argument is not NULL, or if there is not enough memory available to expand the block to the given size. In the first case, the original block is freed; in the second, the original block is unchanged.</p>
<p>
The storage space pointed to by the return value is guaranteed to be suitably aligned for storage of any type of object. To get a pointer to a type other than <b>void</b>, use a type cast on the return value.</p>
<p>
<b>Windows CE:</b> Passing into this function any invalid and, under some circumstances, NULL pointers will result in unexpected termination of the application. For more information about handling exceptions, see Programming Considerations.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Use version 2.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api1_9bj7.htm"><b>CoTaskMemAlloc</b></a>, <a href="api1_63l1.htm"><b>CoTaskMemFree</b></a>, <a href="api1_2qlf.htm"><b>CoGetMalloc</b></a>, <a href="if_f2n_7qqr.htm"><b>IMalloc::Realloc</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

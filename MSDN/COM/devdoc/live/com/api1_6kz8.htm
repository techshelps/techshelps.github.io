<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoRegisterClassObject</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_coregisterclassobject"></a>CoRegisterClassObject</h1>
<p>
Registers an EXE class object with OLE so other applications can connect to it. EXE object applications should call <b>CoRegisterClassObject</b> on startup. It can also be used to register internal objects for use by the same EXE or other code (such as DLLs) that the EXE uses.</p>
<pre><code><b>STDAPI CoRegisterClassObject(
  REFCLSID</b><i> rclsid</i><b>,     </b>//Class identifier (CLSID) to be registered
<b>  IUnknown *</b><i> pUnk</i><b>,     </b>//Pointer to the class object
<b>  DWORD</b><i> dwClsContext</i><b>,  </b>//Context for running executable code
<b>  DWORD</b><i> flags</i><b>,         </b>//How to connect to the class object
<b>  LPDWORD </b><i> lpdwRegister</i>
<i>                       </i>//Pointer to the value returned
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>rclsid</i></dt>
<dd>
[in] CLSID to be registered.</dd>
<dt>
<i>pUnk</i></dt>
<dd>
[in] Pointer to the<b>IUnknown</b> interface on the class object whose availability is being published.</dd>
<dt>
<i>dwClsContext</i></dt>
<dd>
[in] Context in which the executable code is to be run. For information on these context values, see the <a href="enums_152w.htm"><b>CLSCTX</b></a> enumeration.</dd>
<dt>
<i>flags</i></dt>
<dd>
[in] How connections are made to the class object. For information on these flags, see the <a href="enums_6r5f.htm"><b>REGCLS</b></a> enumeration.</dd>
<dt>
<i>lpdwRegister</i></dt>
<dd>
[out] Pointer to a value that identifies the class object registered; later used by the <a href="api1_9y9g.htm"><b>CoRevokeClassObject</b></a> function to revoke the registration.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following:
<dl>
<dt>
S_OK </dt>
<dd>
The class object was registered successfully.</dd>
<dt>
CO_E_OBJISREG </dt>
<dd>
Already registered in the class object table.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Only EXE object applications call <b>CoRegisterClassObject</b>. Object handlers or DLL object applications do not call this function — instead, they must implement and export the <a href="api2_48fo.htm"><b>DllGetClassObject</b></a> function.</p>
<p>
At startup, a multiple-use EXE object application must create a class object (with the <a href="if_a2e_9mk9.htm"><b>IClassFactory</b></a> interface on it), and call <b>CoRegisterClassObject</b> to register the class object. Object applications that support several different classes (such as multiple types of embeddable objects) must allocate and register a different class object for each.</p>
<p>
Multiple registrations of the same class object are independent and do not produce an error. Each subsequent registration yields a unique key in <i>lpdwRegister</i>.</p>
<p>
Multiple document interface (MDI) applications must register their class objects. Single document interface (SDI) applications must register their class objects only if they can be started by means of the <b>/Embedding</b> switch.</p>
<p>
The server for a class object should call <a href="api1_9y9g.htm"><b>CoRevokeClassObject</b></a> to revoke the class object (remove its registration) when all of the following are true:
<ul>
<li>
There are no existing instances of the object definition</li>
<li>
There are no locks on the class object</li>
<li>
The application providing services to the class object is not under user control (not visible to the user on the display).</li>
</ul>
<p>
After the class object is revoked, when its reference count reaches zero, the class object can be released, allowing the application to exit. </p>
<p>
For information on the <i>flags</i> parameter, refer to the <b>REGCLS</b> enumeration.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api1_6yb8.htm"><b>CoGetClassObject</b></a>, <a href="api1_9y9g.htm"><b>CoRevokeClassObject</b></a>, <a href="api2_48fo.htm"><b>DllGetClassObject</b></a>, <a href="enums_6r5f.htm"><b>REGCLS</b></a>, <a href="enums_152w.htm"><b>CLSCTX</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

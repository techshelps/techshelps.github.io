<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateBindCtx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_createbindctx"></a>CreateBindCtx</h1>
<p>
Supplies a pointer to an implementation of <b>IBindCtx</b> (a bind context object). This object stores information about a particular moniker-binding operation. The pointer this function supplies is required as a parameter in many methods of the <a href="if_f2n_8otu.htm"><b>IMoniker</b></a> interface and in certain functions related to monikers. </p>
<pre><code><b>WINOLEAPI CreateBindCtx(
  DWORD</b><i> reserved</i><b>, </b>//Reserved for future use
<b>  LPBC FAR*</b><i> ppbc  </i>//Address of output variable that receives the 
                  // IBindCtx interface pointer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>reserved</i></dt>
<dd>
[in] Reserved for future use; must be zero.</dd>
<dt>
<i>ppbc</i></dt>
<dd>
[out] Address of <b>IBindCtx</b>* pointer variable that receives the interface pointer to the new bind context object.  When the function is successful, the caller is responsible for calling <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a> on the bind context. A NULL value for the bind context indicates that an error occurred.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return value E_OUTOFMEMORY, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
The bind context was allocated and initialized successfully.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>CreateBindCtx</b> is most commonly used in the process of binding a moniker (locating and getting a pointer to an interface by identifying it through a moniker), as in the following steps:
<ol>
<li>
Get a pointer to a bind context by calling the <b>CreateBindCtx</b> function.</li>
<li>
Call the <a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a> method on the moniker, retrieving an interface pointer to the object to which the moniker refers. </li>
<li>
Release the bind context.</li>
<li>
Use the interface pointer. </li>
<li>
Release the interface pointer. </li>
</ol>
<p>
The following code fragment illustrates these steps:</p>
<pre><code>// pMnk is an IMoniker * that points to a previously acquired moniker 
IFoo *pFoo; 
IBindCtx *pbc; 
 
CreateBindCtx( 0, &amp;pbc ); 
pMnk-&gt;BindToObject( pbc, NULL, IID_IFoo, &amp;pFoo ); 
pbc-&gt;Release(); 
// pFoo now points to the object; safe to use pFoo 
pFoo-&gt;Release(); 
 </code></pre>
<p>
Bind contexts are also used in other methods of the <a href="if_f2n_8otu.htm"><b>IMoniker</b></a> interface besides <a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a> and in the <a href="api2_8hb9.htm"><b>MkParseDisplayName</b></a> function. </p>
<p>
A bind context retains references to the objects that are bound during the binding operation, causing the bound objects to remain active (keeping the object's server running) until the bind context is released. Reusing a bind context when subsequent operations bind to the same object can improve performance. You should, however, release the bind context as soon as possible, because you could be keeping the objects activated unnecessarily. </p>
<p>
A bind context contains a <a href="structs_2b1v.htm"><b>BIND_OPTS</b></a> structure, which contains parameters that apply to all steps in a binding operation. When you create a bind context using <b>CreateBindCtx</b>, the fields of the <b>BIND_OPTS</b> structure are initialized to the following values:</p>
<pre><code>cbStruct = sizeof(BIND_OPTS) 
grfFlags = 0 
grfMode = STGM_READWRITE 
dwTickCountDeadline = 0. 
 </code></pre>
<p>
You can call the <a href="if_a2e_83g3.htm"><b>IBindCtx::SetBindOptions</b></a> method to modify these default values.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="structs_2b1v.htm"><b>BIND_OPTS</b></a>,<b> <a href="if_a2e_06bc.htm">IBindCtx</a></b>,<b> <a href="if_f2n_8otu.htm">IMoniker</a></b>,<b> <a href="api2_8hb9.htm">MkParseDisplayName</a> </b></p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

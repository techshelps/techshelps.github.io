<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IUnknown and Interface Inheritance</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_iunknown_and_interface_inheritance"></a>IUnknown and Interface Inheritance</h2>
<p>
Inheritance in COM does not mean code reuse. Because no implementations are associated with interfaces, interface inheritance does not mean code inheritance. It means only that the contract associated with an interface is inherited in a C++ pure-virtual base-class fashion and modified — either by adding new methods or by further qualifying the allowed usage of methods. There is no selective inheritance in COM: If one interface inherits from another, it includes all the methods that the other interface defines. </p>
<p>
Inheritance is used sparingly in the predefined COM interfaces. All predefined interfaces (and any custom interfaces you define) inherit their definitions from the important interface <a href="if_r2z_9dwu.htm"><b>IUnknown</b></a>, which contains three vital methods: <b>QueryInterface</b>, <b>AddRef</b>, and <b>Release</b>. All COM objects must implement the <b>IUnknown</b> interface, because it provides the means to move freely between the different interfaces that an object supports with <b>QueryInterface</b>, and to manage its lifetime with <b>AddRef</b> and <b>Release</b>. More on these methods is discussed later in this chapter. </p>
<p>
In creating an object that supports aggregation, you would need to implement one set of <a href="if_r2z_9dwu.htm"><b>IUnknown</b></a><i> </i>functions for all interfaces as well as a stand-alone <b>IUnknown</b> interface. This is described in the following section. In any case, any object implementor will implement <b>IUnknown</b> methods. Refer to the section <a href="com_7tim.htm"><b>Using and Implementing IUnknown</b></a> for more information.</p>
<p>
While there are a few interfaces that inherit their definitions from a second interface, in addition to <b>IUnknown</b>, the majority are simply the <b>IUnknown</b> interface methods plus the methods defined in the interface. This makes most interfaces relatively compact and easy to encapsulate.</p>
<p>&nbsp;</p></body>
</HTML>

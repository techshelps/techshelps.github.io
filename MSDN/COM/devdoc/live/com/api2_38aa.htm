<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateURLMoniker</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_createurlmoniker"></a>CreateURLMoniker</h1>
<p>
Creates an URL moniker from either a full URL string or from a base context URL moniker and a partial URL string.</p>
<pre><code><b>HRESULT CreateURLMoniker(
  IMoniker</b><i> *pmkContext</i><b>,  </b>//Pointer to the base context moniker
<b>  LPWSTR</b><i> szURL</i><b>,          </b>//Display name to be parsed
<b>  IMoniker</b><i> **ppmk        </i>//Address of output variable that receives 
                         // the IMoniker interface pointer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pmkContext</i></dt>
<dd>
[in] Pointer to the <b>IMoniker</b> interface for the URL moniker to use as the base context when the <i>szURL</i> parameter is a partial URL string. The <i>pmkContext</i> parameter can be NULL. In this case, one of the following methods is used to provide the context:
<ul>
<li>
The <i>szURL</i> parameter is a full URL string needing no further context.</li>
<li>
The leftmost portion of the moniker contains the URL context.</li>
<li>
The moniker retrieves the URL context from the bind-context during <b>IMoniker::BindToObject</b> or <b>IMoniker::BindToStorage</b>.</li>
</ul>
</dd>
<dt>
<i>szURL</i></dt>
<dd>
[in] Display name to be parsed.</dd>
<dt>
<i>ppmk</i></dt>
<dd>
[out] Address of <b>IMoniker</b>* pointer variable that receives the interface pointer to the new URL moniker.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK </dt>
<dd>
The operation was successful.</dd>
<dt>
E_OUTOFMEMORY</dt>
<dd>
The operation ran out of memory.</dd>
<dt>
MK_E_SYNTAX</dt>
<dd>
A moniker could not be created because <i>szURL</i> does not correspond to valid URL syntax for a full or partial URL. This is uncommon, since most parsing of the URL occurs during binding and also since the syntax for URLs is extremely flexible.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Partial URLs are similar to relative paths within file systems, in that resolution to an object requires a context outside the partial string alone. Full URL strings are like fully-qualified paths; they are self-contained and often location-independent.</p>
<p>
When creating an URL moniker from a partial URL string specified in <i>szURL</i>, the caller can specify a context with a partial URL moniker in the <i>pmkContext</i> parameter. In this case, the <b>CreateURLMoniker</b> function retrieves the display name of <i>pmkContext</i> (by calling the <b>IMoniker::GetDisplayName</b> method) and manually composes it with <i>szURL</i> according to URL composition rules.</p>
<p>
The caller can alternately create a moniker from a partial URL string when the <i>pmkContext</i> parameter is set to NULL. In this case, the resulting moniker obtains further context during binding (either through <b>IMoniker::BindToObject</b> or <b>IMoniker::BindToStorage</b>). The moniker goes through the following steps to obtain the additional context:
<ol>
<li>
First, it obtains the URL context from the passed <b>IBindCtx</b> by using the following call:<pre><code>IBindCtx::GetObjectParam<b>(</b>SZ_URLCONTEXT, (IUnknown**)&amp;pmkContext<b>)</b>
 </code></pre>
</li>
<li>
Then, the moniker obtains the URL context from its leftmost portion which contains another URL moniker from which to obtain the URL context.</li>
</ol>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in urlmon.h.<br>
</p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPropertyStorage::ReadMultiple</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_ipropertystorage_readmultiple"></a>IPropertyStorage::ReadMultiple</h2>
<p>
Reads specified properties from the current property set.</p>
<pre><code><b>HRESULT ReadMultiple(
  ULONG</b><i> cpspec</i><b>,              </b>//Count of properties being read
<b>  PROPSPEC const</b><i> rgpspec[]</i><b>,  </b>//Array of the properties to be read
<b>  PROPVARIANT</b><i> rgvar[]        </i>//Array of PROPVARIANTs containing the 
                             //property values on return
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>cpspec</i></dt>
<dd>
[in] Count of properties specified in the <i>rgpspec</i> array. May legally be zero, though this is a no-op, reading no properties.</dd>
<dt>
<i>rgpspec</i>[]</dt>
<dd>
[in] The properties to be read in the <a href="structs_074z.htm"><b>PROPSPEC</b></a> structures. Properties can be specified either by property identifier or by optional string name. It is not necessary to specify properties in any particular order in the array. The array can contain duplicate properties, resulting in duplicate property values on return for simple properties. Non-simple properties should return access denied on an attempt to open them a second time. The array can contain a mixture of property identifiers and string identifiers. </dd>
<dt>
<i>rgvar</i>[]</dt>
<dd>
[in, out] Caller-allocated array of PROPVARIANTs that, on return, contains the values of the properties specified by <i>rgpspec</i>. The array must be able to receive at least <i>cpspec</i> PROPVARIANTs. The caller does not need to initialize these PROPVARIANTs in any particular way; the implementation must fill in all field members correctly on return. If there is no other appropriate value, the implementation must set the <i>vt</i> member of each <a href="structs_5ppw.htm"><b>PROPVARIANT</b></a> to VT_EMPTY.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return value E_UNEXPECTED, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
Success. At least some of the requested properties were retrieved.</dd>
<dt>
S_FALSE</dt>
<dd>
All the property names or identifiers had valid syntax, but none of them exist in this property set. Accordingly, no properties were retrieved., and each <b>PROPVARIANT</b> structure is set to VT_EMPTY.</dd>
<dt>
STG_E_ACCESSDENIED</dt>
<dd>
The requested access to the property set has been denied, or, when one or more of the properties is a stream or storage object, access to that substorage or substream has been denied. (The storage or stream may already be open). No properties were retrieved.</dd>
<dt>
STG_E_INSUFFICIENTMEMORY</dt>
<dd>
There is not sufficient memory to perform this operation. No properties were retrieved.</dd>
<dt>
STG_E_INVALIDPARAMETER</dt>
<dd>
At least one of the parameters is invalid, such as when one of the PROPSPECs contains an illegal <i>ulKind</i> value. No properties were retrieved.</dd>
<dt>
STG_E_INVALIDPOINTER</dt>
<dd>
At least one of the pointers passed in is invalid. No properties were retrieved.</dd>
<dt>
HRESULT_FROM_WIN32(ERROR_NO_UNICODE_TRANSLATION)</dt>
<dd>
There was a failed attempt to translate a Unicode string to or from Ansi.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>IPropertyStorage::ReadMultiple</b> reads as many of the properties specified in the <i>rgpspec</i> array as are found in the property set. As long as any of the properties requested is read, a request to retrieve a property that does not exist is not an error. Instead, this must cause VT_EMPTY to be written for that property to the <i>rgvar</i>[] array on return. When none of the requested properties exist, the method should return S_FALSE, and set VT_EMPTY in each PROPVARIANT. If any other error is returned, no property values are retrieved, and the caller need not worry about releasing them.</p>
<p>
The <i>rgpspec</i> parameter is an array of <a href="structs_074z.htm"><b>PROPSPEC</b></a> structures, which specify for each property either its property identifier or, if one is assigned, a string identifier. You can map a string to a property identifier by calling <b>IPropertyStorage::<a href="if_p2q_5esz.htm">WritePropertyNames</a></b>. The use of property identifiers is, however, likely to be significantly more efficient than the use of strings.</p>
<p>
Properties that are requested by string name (PRSPEC_LPWSTR) are mapped case-insensitively to property identifiers as they are specified in the current property set (and according to the current system locale).</p>
<p>
All propvariants, except for those that are pointers to streams and storages, are called simple propvariants. These simple propvariants receive data by value, so a call to <b>IPropertyStorage::ReadMultiple</b> supplies a copy of the data that the caller then owns. To create or update these properties, call <a href="if_p2q_0bj9.htm"><b>IPropertyStorage::WriteMultiple</b></a>.</p>
<p>
In contrast, the variant types VT_STREAM, VT_STREAMEDOBJECT, VT_STORAGE, and VT_STOREDOBJECT are non-simple properties, because rather than supplying a value, the method retrieves a pointer to the indicated interface, from which the data can then be read. These types permit the storage of large amounts of information through a single property. There are several issues that arise in using non-simple properties.</p>
<p>
To create these properties, as for the other properties, call <b>IPropertyStorage::WriteMultiple</b>. Rather than calling the same method to update, however, it is more efficient to first call <b>IPropertyStorage::ReadMultiple</b> to get the interface pointer to the stream or storage, then write data using the <b>IStream</b> or <b>IStorage</b> methods. A stream or storage opened through a property is always opened in direct mode, so an additional level of nested transaction is not introduced. There may, however, still be a transaction on the property set as a whole, depending on how it was opened or created through <b>IPropertySetStorage</b>. Further, the access and share mode tags specified when the property set is opened or created, are passed to property-based streams or storages.</p>
<p>
The lifetimes of property-based stream or storage pointers, although theoretically independent of their associated <b>IPropertyStorage</b> and <b>IPropertySetStorage</b> pointers, in fact, effectively depend on them. The data visible through the stream or storage is related to the transaction on the property storage object from which it is retrieved, just as for a storage object (supporting <b>IStorage</b>) with contained stream and storage sub-objects. If the transaction on the parent object is aborted, existing <a href="if_r2z_4x7x.htm"><b>IStream</b></a> and <a href="if_r2z_9b8l.htm"><b>IStorage</b></a> pointers subordinate to that object enter a "zombie" state. Because <b>IPropertyStorage</b> is the only interface on the property storage object, the useful lifetime of the contained <b>IStream</b> and <b>IStorage</b> pointers is bounded by the lifetime of the <b>IPropertyStorage</b> interface.</p>
<p>
The implementation must also deal with the situation where the same stream- or storage-valued property is requested multiple times through the same <b>IPropertyStorage</b> interface instance. For example, in the OLE compound file implementation, the open will succeed or fail depending on whether or not the property is already open.</p>
<p>
Another issue is multiple opens in transacted mode. The result depends on the isolation level that was specified through a call to <b>IPropertySetStorage</b> methods, (either the <b>Open</b> or <b>Create</b> method, through the STGM flags) at the time that the property storage was opened .</p>
<p>
If the call to open the property set specifies read-write access, <b>IStorage</b>- and <b>IStream</b>-valued properties are always opened with read-write access. Data can then be written through these interfaces, changing the value of the property, which is the most efficient way to update these properties. The property value itself does not have an additional level of transaction nesting, so changes are scoped under the transaction (if any) on the property storage object.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_p2q_8g4l.htm"><b>IPropertySetStorage</b></a>, <a href="if_p2q_0bj9.htm"><b>IPropertyStorage::WriteMultiple</b></a>, <a href="if_p2q_5esz.htm"><b>IPropertyStorage::WritePropertyNames</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

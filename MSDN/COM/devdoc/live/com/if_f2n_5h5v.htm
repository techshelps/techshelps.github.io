<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMalloc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_imalloc"></a>IMalloc</h1>
<p>
Allocates, frees, and manages memory.</p>
<h5>When to Implement</h5>
<p>
In general, you should not implement <b>IMalloc</b>, instead using the COM implementation, which is guaranteed to be thread-safe in managing task memory. You get a pointer to the COM task allocator object's <b>IMalloc</b> through a call to the <a href="api1_2qlf.htm"><b>CoGetMalloc</b></a> function.</p>
<h5>When to Use</h5>
<p>
Call the methods of <b>IMalloc</b> to allocate and manage memory. The COM libraries and object handlers also call the <b>IMalloc </b>methods to manage memory. Object handlers should call <a href="api1_2qlf.htm"><b>CoGetMalloc</b></a> to get a pointer to the <b>IMalloc</b> implementation on the task allocator object, and use the implementation of those methods to manage task memory.</p>
<p>
The <b>IMalloc</b> methods <b>Alloc</b>, <b>Free</b>, and <b>Realloc</b> are similar to the C library functions <b>malloc</b>, <b>free</b>, and <b>realloc</b>. For debugging, refer to the functions <a href="api1_2r5l.htm"><b>CoRegisterMallocSpy</b></a> and <a href="api1_2ant.htm"><b>CoRevokeMallocSpy</b></a>. </p>
<h4>Methods in Vtable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=32%><a href="if_r2z_9dwu.htm">IUnknown</a> Methods</th>
<th align=left width=68%>Description</th>
</tr>
<tr valign=top>
<td width=32%><a href="if_r2z_7fvp.htm"><b>QueryInterface</b></a></td>
<td width=68%>Returns pointers to supported interfaces.</td>
</tr>
<tr valign=top>
<td width=32%><a href="if_r2z_3rja.htm"><b>AddRef</b></a></td>
<td width=68%>Increments the reference count.</td>
</tr>
<tr valign=top>
<td width=32%><a href="if_r2z_59np.htm"><b>Release</b></a></td>
<td width=68%>Decrements the reference count.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=32%>IMalloc Methods</th>
<th align=left width=68%>Description</th>
</tr>
<tr valign=top>
<td width=32%><a href="if_f2n_3twj.htm"><b>Alloc</b></a></td>
<td width=68%>Allocates a block of memory.</td>
</tr>
<tr valign=top>
<td width=32%><a href="if_f2n_7qqr.htm"><b>Realloc</b></a></td>
<td width=68%>Changes the size of a previously allocated block of memory.</td>
</tr>
<tr valign=top>
<td width=32%><a href="if_f2n_1smd.htm"><b>Free</b></a></td>
<td width=68%>Frees a previously allocated block of memory.</td>
</tr>
<tr valign=top>
<td width=32%><a href="if_f2n_3gbp.htm"><b>GetSize</b></a></td>
<td width=68%>Returns the size in bytes of a previously allocated block of memory.</td>
</tr>
<tr valign=top>
<td width=32%><a href="if_f2n_6per.htm"><b>DidAlloc</b></a></td>
<td width=68%>Determines if this instance of IMalloc was used to allocate the specified block of memory. </td>
</tr>
<tr valign=top>
<td width=32%><a href="if_f2n_0sit.htm"><b>HeapMinimize</b></a></td>
<td width=68%>Minimizes the heap by releasing unused memory to the operating system.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="api1_2qlf.htm"><b>CoGetMalloc</b></a>, <a href="if_f2n_60e1.htm"><b>IMallocSpy</b></a>, <a href="api1_2r5l.htm"><b>CoRegisterMallocSpy</b></a>, <a href="api1_2ant.htm"><b>CoRevokeMallocSpy</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

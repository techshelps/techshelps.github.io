<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoCreateInstance</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_cocreateinstance"></a>CoCreateInstance</h1>
<p>
Creates a single uninitialized object of the class associated with a specified CLSID. Call <b>CoCreateInstance</b> when you want to create only one object on the local system. To create a single object on a remote system, call <a href="api1_5ry0.htm"><b>CoCreateInstanceEx</b></a>. To create multiple objects based on a single CLSID, refer to the <a href="api1_6yb8.htm"><b>CoGetClassObject</b></a> function.</p>
<pre><code><b>STDAPI CoCreateInstance(
  REFCLSID</b><i> rclsid</i><b>,     </b>//Class identifier (CLSID) of the object
<b>  LPUNKNOWN</b><i> pUnkOuter</i><b>, </b>//Pointer to whether object is or isn't part 
                       // of an aggregate
<b>  DWORD</b><i> dwClsContext</i><b>,  </b>//Context for running executable code
<b>  REFIID</b><i> riid</i><b>,         </b>//Reference to the identifier of the interface
<b>  LPVOID *</b><i> ppv         </i>//Address of output variable that receives 
                       // the interface pointer requested in <i>riid</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>rclsid</i></dt>
<dd>
[in] CLSID associated with the data and code that will be used to create the object. </dd>
<dt>
<i>pUnkOuter</i></dt>
<dd>
[in] If <b>NULL</b>, indicates that the object is not being created as part of an aggregate. If non-<b>NULL</b>, pointer to the aggregate object's <b>IUnknown</b> interface (the controlling <b>IUnknown</b>). </dd>
<dt>
<i>dwClsContext</i></dt>
<dd>
[in] Context in which the code that manages the newly created object will run. The values are taken from the enumeration <a href="enums_152w.htm"><b>CLSCTX</b></a>.</dd>
<dt>
<i>riid</i></dt>
<dd>
[in] Reference to the identifier of the interface to be used to communicate with the object.</dd>
<dt>
<i>ppv</i></dt>
<dd>
[out] Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppv</i> contains the requested interface pointer.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
An instance of the specified object class was successfully created.</dd>
<dt>
REGDB_E_CLASSNOTREG</dt>
<dd>
A specified class is not registered in the registration database. Also can indicate that the type of server you requested in the <b>CLSCTX</b> enumeration is not registered or the values for the server types in the registry are corrupt.</dd>
<dt>
CLASS_E_NOAGGREGATION</dt>
<dd>
This class cannot be created as part of an aggregate.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>CoCreateInstance</b> helper function provides a convenient shortcut by connecting to the class object associated with the specified CLSID, creating an uninitialized instance, and releasing the class object. As such, it encapsulates the following functionality:</p>
<pre><code>CoGetClassObject(rclsid, dwClsContext, NULL, IID_IClassFactory, &amp;pCF); 
hresult = pCF-&gt;CreateInstance(pUnkOuter, riid, ppvObj) 
pCF-&gt;Release(); 
 </code></pre>
<p>
It is convenient to use <b>CoCreateInstance</b> when you need to create only a single instance of an object on the local machine. If you are creating an instance on remote machine, call <a href="api1_5ry0.htm"><b>CoCreateInstanceEx</b></a>. When you are creating multiple instances, it is more efficient to obtain a pointer to the class object's <b>IClassFactory</b> interface and use its methods as needed. In the latter case, you should use the <a href="api1_6yb8.htm"><b>CoGetClassObject</b></a> function.</p>
<p>
In the <a href="enums_152w.htm"><b>CLSCTX</b></a> enumeration, you can specify the type of server used to manage the object. The constants can be CLSCTX_INPROC_SERVER, CLSCTX_INPROC_HANDLER, CLSCTX_LOCAL_SERVER, or any combination of these values. The constant CLSCTX_ALL is defined as the combination of all three. For more information about the use of one or a combination of these constants, refer to <a href="enums_152w.htm"><b>CLSCTX</b></a>.</p>
<p>
<b>Windows CE:</b> Windows CE supports only the CLSCTX_INPROC_SERVER value for the <i>dwClsContext</i> parameter. Anything else results in a return value of E_NOTIMPL. </p>
<p>
Windows CE does not support using the <b>CoCreateInstanceEx</b> function to create a single object on a remote system.</p>
<p>
Passing into this function any invalid and, under some circumstances, NULL pointers will result in unexpected termination of the application. For more information about handling exceptions, see Programming Considerations.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Use version 2.0 or later.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api1_6yb8.htm"><b>CoGetClassObject</b></a>, <a href="if_a2e_5k11.htm"><b>IClassFactory::CreateInstance</b></a>, <a href="api1_5ry0.htm"><b>CoCreateInstanceEx</b></a>, <a href="enums_152w.htm"><b>CLSCTX</b></a>, <a href="comext_4ws3.htm"><b>Instance Creation Helper Functions</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

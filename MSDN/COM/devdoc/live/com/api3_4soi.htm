<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OleCreateEmbeddingHelper</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_olecreateembeddinghelper"></a>OleCreateEmbeddingHelper</h1>
<p>
Creates an OLE embedding helper object using application-supplied code aggregated with pieces of the OLE default object handler. This helper object can be created and used in a specific context and role, as determined by the caller.</p>
<pre><code><b>WINOLEAPI OleCreateEmbeddingHelper(
  REFCLSID</b><i> clsid</i><b>,      </b>//Identifier of the class to be helped
<b>  LPUNKNOWN</b><i> pUnkOuter</i><b>, </b>//Pointer to controlling IUnknown if 
                       // aggregated; else NULL
<b>  DWORD</b><i> flags</i><b>,         </b>//Purpose for the helper
<b>  LPCLASSFACTORY</b><i> pCF</i><b>,  </b>//Pointer on the class object for the 
                       // secondary object
<b>  REFIID</b><i> riid</i><b>,         </b>//Reference to the identifier of the 
                       // interface desired by the caller
<b>  LPVOID *</b><i> ppvObj      </i>//Address of output variable that receives 
                       // the interface pointer requested in <i>riid</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>clsid</i></dt>
<dd>
[in] CLSID of the class to be helped.</dd>
<dt>
<i>pUnkOuter</i></dt>
<dd>
[in] If the embedding helper is to be aggregated, pointer to the outer object's controlling <a href="if_r2z_9dwu.htm"><b>IUnknown</b></a> interface. If it is not to be aggregated, although this is rare, the value should be NULL.</dd>
<dt>
<i>flags</i></dt>
<dd>
[in] DWORD containing flags that specify the role and creation context for the embedding helper. For legal values, see the following Remarks section.</dd>
<dt>
<i>pCF</i></dt>
<dd>
[in] Pointer to the <a href="if_a2e_9mk9.htm"><b>IClassFactory</b></a> interface on the class object the function uses to create the secondary object. In some situations, this value may be NULL. For more information, see the following Remarks section.</dd>
<dt>
<i>riid</i></dt>
<dd>
[in] Reference to the identifier of the interface desired by the caller.</dd>
<dt>
<i>ppvObj</i></dt>
<dd>
[out] Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppvObj</i> contains the requested interface pointer on the newly created embedding helper.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The OLE embedding helper was created successfully.</dd>
<dt>
E_NOINTERFACE</dt>
<dd>
The interface is not supported by the object.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>OleCreateEmbeddingHelper</b> function creates an object that supports the same interface implementations found in the default handler, but which has additional hooks that allow it to be used more generally than just as a handler object. The following two calls produce the same result: </p>
<pre><code>OleCreateEmbeddingHelper(clsid, pUnkOuter, EMBDHLP_INPROC_HANDLER | 
    EMBDHLP_CREATENOW, NULL, iid, ppvObj) 
 
OleCreateDefaultHandler(clsid, pUnkOuter, iid, ppvObj) 
 </code></pre>
<p>
The embedding helper is aggregatable; <i>pUnkOuter</i> is the controlling <b>IUnknown</b> of the aggregate of which the embedding helper is to be a part. It is used to create a new instance of the OLE default handler, which can be used to support objects in various roles. The caller passes a pointer to its <a href="if_a2e_9mk9.htm"><b>IClassFactory</b></a> implementation to <b>OleCreateEmbeddingHelper</b>. This object and the default handler are then aggregated to create the new embedding helper object.</p>
<p>
The<b> OleCreateEmbeddingHelper</b> function is usually used to support one of the following implementations:
<ul>
<li>
An EXE object application that is being used as both a container and a server, and which supports inserting objects into itself. For this case, <b>CreateEmbeddingHelper</b> allows the object to support the interfaces usually supported only in the handler. To accomplish this, the application must first register its CLSID for different contexts, making two registration calls to the <a href="api1_6kz8.htm"><b>CoRegisterClassObject</b></a> function, rather than one, as follows:</li>
</ul>
<pre><code>CoRegisterClassObject(clsidMe, pUnkCfLocal, CLSCTX_LOCAL_SERVER, 
        REGCLS_MULTI_SEPARATE...) 
 
    CoRegisterClassObject(clsidMe, pUnkCfInProc, CLSCTX_INPROC_SERVER, 
    
        REGCLS_MULTI_SEPARATE...) 
 </code></pre>
<p class=indent1>
In these calls, you would pass along different class factory implementations to each of <i>pUnkCfLocal</i> and <i>pUnkCfInProc</i>. The class factory pointed to by <i>pUnkCfLocal</i> would be used to create objects that are to be embedded in a remote process, which is the normal case which uses a handler object associated with the client. However, when a server both creates an object and embeds it within itself, <i>pUnkCfInProc</i> points to a class object that can create an object that supports the handler interfaces. The local class is used to create the object and the in-process class creates the embedding helper, passing in the pointer to the first object's class factory in <i>pCF</i>.</p>
<ul>
<li>
A custom in-process object handler, in which case, the DLL creates the embedding helper by passing in a pointer to a private implementation of <b>IClassFactory</b> in <i>pCF.</i></li>
</ul>
<p>
The <i>flags</i> parameter indicates how the embedding helper is to be used and how and when the embedding helper is initialized. The values for <i>flags</i> are obtained by OR-ing together values from the following table:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Values for <i>flags</i> Parameter</th>
<th align=left width=52%>Purpose</th>
</tr>
<tr valign=top>
<td width=48%>EMBDHLP_INPROC_HANDLER</td>
<td width=52%>Creates an embedding helper that can be used with DLL object applications; specifically, the helper exposes the caching features of the default object handler.</td>
</tr>
<tr valign=top>
<td width=48%>EMBDHLP_INPROC_SERVER</td>
<td width=52%>Creates an embedding helper that is to be used as part of an in-process server. <i>pCF</i> cannot be NULL.</td>
</tr>
<tr valign=top>
<td width=48%>EMBDHLP_CREATENOW</td>
<td width=52%>Creates the secondary object using <i>pCF</i> immediately; if <i>pCF</i> is null, the standard proxy manager is used.</td>
</tr>
<tr valign=top>
<td width=48%>EMBDHLP_DELAYCREATE</td>
<td width=52%>Delays creation of the secondary object until it is needed (when the helper is put into the running state) to enhance speed and memory use. <i>pCF</i> must not be NULL. The EMBDHLP_INPROC_HANDLER flag cannot be used with this flag.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ole2.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api3_22sy.htm"><b>OleCreateDefaultHandler</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

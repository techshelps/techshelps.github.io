<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMarshal::ReleaseMarshalData</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_imarshal_releasemarshaldata"></a>IMarshal::ReleaseMarshalData</h2>
<p>
Destroys a marshaled data packet. </p>
<pre><code><b>HRESULT ReleaseMarshalData(
  IStream *</b><i> pStm  </i>//Pointer to stream used for unmarshaling
<b>);</b>
 </code></pre>
<h4>Parameter</h4>
<dl>
<dt>
<i>pStm</i></dt>
<dd>
[in] Pointer to a stream that contains the data packet to be destroyed.
</dd>
</dl>
<h4>Return Values</h4>
<p>
The method supports the standard return value E_FAIL, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The data packet was released successfully.</dd>
<dt>
<b>IStream</b> errors</dt>
<dd>
This function can also return any of the stream-access error values for the <a href="if_r2z_4x7x.htm"><b>IStream</b></a> interface.
</dd>
</dl>
<h4>Remarks</h4>
<p>
If an object's marshaled data packet does not get unmarshaled in the client process space, and the packet is no longer needed. The client calls <b>ReleaseMarshalData</b> on the proxy's <b>IMarshal</b> implementation to instruct the object to destroy the data packet. The call occurs within the <a href="api1_02u9.htm"><b>CoReleaseMarshalData</b></a> function. The data packet serves as an additional reference on the object, and releasing the data is like releasing an interface pointer by calling <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a>. </p>
<p>
If the marshaled data packet somehow does not arrive in the client process, or <b>ReleaseMarshalData</b> is not successfully re-created in the proxy, COM can call this method on the object itself.</p>
<h5>Notes to Callers</h5>
<p>
You will rarely if ever have occasion to call this method yourself. A possible exception would be if you were to implement <b>IMarshal</b> on a class factory for a class object on which you are also implementing <b>IMarshal</b>. In this case, if you are marshaling the object to a table, where it can be retrieved by multiple clients, you might, as part of your unmarshaling routine, call <b>ReleaseMarshalData</b> to release the data packet for each proxy.</p>
<h5>Notes to Implementers</h5>
<p>
If your implementation stores state information about marshaled data packets, you can use this method to release the state information associated with the data packet represented by <i>pStm</i>. Your implementation should also position the seek pointer in the stream past the last byte of data.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="api1_6gbp.htm"><b>CoUnMarshalInterface</b></a>, <a href="api1_02u9.htm"><b>CoReleaseMarshalData</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

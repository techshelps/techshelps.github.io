<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPersist::GetClassID</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_ipersist_getclassid"></a>IPersist::GetClassID</h2>
<p>
Retrieves the class identifier (CLSID) of an object. The CLSID is a unique value that identifies the code that can manipulate the persistent data.</p>
<pre><code><b>HRESULT GetClassID(
  CLSID</b><i> *pClassID  </i>//Pointer to CLSID of object
<b>);</b>
 </code></pre>
<h4>Parameter</h4>
<dl>
<dt>
<i>pClassID</i></dt>
<dd>
[out]Points to the location of the CLSID on return. The CLSID is a globally unique identifier (GUID) that uniquely represents an object class that defines the code that can manipulate the object's data.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK </dt>
<dd>
The CLSID was successfully retrieved.</dd>
<dt>
E_FAIL</dt>
<dd>
The CLSID could not be retrieved.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>GetClassID</b> method retrieves the class identifier (CLSID) for an object, used in later operations to load object-specific code into the caller's context.</p>
<h5>Notes to Callers</h5>
<p>
A container application might call this method to retrieve the original CLSID of an object that it is treating as a different class. Such a call would be necessary if a user performed an editing operation that required the object to be saved. If the container were to save it using the treat-as CLSID, the original application would no longer be able to edit the object. Typically, in this case, the container calls the <a href="api3_9hb9.htm"><b>OleSave</b></a> helper function, which performs all the necessary steps. For this reason, most container applications have no need to call this method directly.</p>
<p>
The exception would be a container that provides an object handler for certain objects. In particular, a container application should not get an object's CLSID and then use it to retrieve class specific information from the registry. Instead, the container should use <b>IOleObject</b> and <a href="if_a2e_24z8.htm"><b>IDataObject</b></a> interfaces to retrieve such class-specific information directly from the object.</p>
<h5>Notes to Implementers</h5>
<p>
Typically, implementations of this method simply supply a constant CLSID for an object. If, however, the object's <b>TreatAs</b> registry key has been set by an application that supports emulation (and so is treating the object as one of a different class), a call to <b>IPersist::GetClassID</b> must supply the CLSID specified in the <b>TreatAs</b> key. For more information on emulation, refer to <b>CoTreatAsClass</b>.</p>
<p>
When an object is in the running state, the default handler calls an implementation of <b>IPersist::GetClassID</b> that delegates the call to the implementation in the object. When the object is not running, the default handler instead calls the <a href="api3_5iw7.htm"><b>ReadClassStg</b></a> function to read the CLSID that is saved in the object's storage.</p>
<p>
If you are writing a custom object handler for your object, you might want to simply delegate this method to the default handler implementation (see <a href="api3_22sy.htm"><b>OleCreateDefaultHandler</b></a>). </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<b>IPersistStorage</b>, <b>IPersistStream</b>, <b>IPersistFile</b>, <a href="api3_5iw7.htm"><b>ReadClassStg</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

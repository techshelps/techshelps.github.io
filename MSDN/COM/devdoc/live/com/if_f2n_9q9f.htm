<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ILockBytes</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_ilockbytes"></a>ILockBytes</h1>
<p>
The <b>ILockBytes</b> interface is implemented on a byte array object that is backed by some physical storage, such as a disk file, global memory, or a database. It is used by a COM compound file storage object to give its root storage access to the physical device, while isolating the root storage from the details of accessing the physical storage.</p>
<h5>When to Implement</h5>
<p>
Most applications will not implement the <b>ILockBytes</b> interface because COM provides implementations for the two most common situations:</p>
<p>
<b>File-based implementation</b> — If you call <a href="api4_8hd1.htm"><b>StgCreateDocfile</b></a> function to create a compound file storage object, it contains an implementation of <b>ILockBytes</b> that is associated with a byte array stored in a physical disk file. The compound file storage object calls the <b>ILockBytes</b> methods—you do not call them directly in this implementation.</p>
<p>
<b>Memory-based implementation</b> — COM also provides a byte array object based on global memory that supports an implementation of <b>ILockBytes</b>. You can get a pointer through a call to the <a href="api2_3rn0.htm"><b>CreateILockBytesOnHGlobal</b></a> function). Then, to create a compound file storage object on top of that byte array object, call the <a href="api4_5ar7.htm"><b>StgCreateDocfileOnILockBytes</b></a> function. The compound file storage object calls the <b>ILockBytes</b> methods — you do not call them directly in this implementation.</p>
<p>
There are situations in which it would be useful for an application to provide its own <b>ILockBytes</b> implementation. For example, a database application could implement <b>ILockBytes</b> to create a byte array object backed by the storage of its relational tables. However, it is strongly recommended that you use the COM-provided implementations. For a discussion of the advantages of using the COM implementations rather than creating your own, see the <a href="api4_5ar7.htm"><b>StgCreateDocfileOnILockBytes</b></a> API function, which creates a compound file storage object on top of a caller-provided byte array object.</p>
<p>
If you choose to implement your own <b>ILockBytes</b> interface, you should consider providing custom marshaling by implementing the <a href="if_f2n_6sh8.htm"><b>IMarshal</b></a> interface as part of your byte array object. The reason for this is that when the COM-provided implementations of <b>IStorage</b> and <a href="if_r2z_4x7x.htm"><b>IStream</b></a> are marshaled to another process, their <b>ILockBytes</b> interface pointers are also marshaled to the other process. The default marshaling mechanism creates a proxy byte array object (on which is the <b>ILockBytes</b> interface) that transmits method calls back to the original byte array object. Custom marshaling can improve efficiency by creating a remote byte array object that can access the byte array directly.</p>
<h5>When to Use</h5>
<p>
The <b>ILockBytes</b> methods are called by the COM implementations of <a href="if_r2z_9b8l.htm"><b>IStorage</b></a> and <a href="if_r2z_4x7x.htm"><b>IStream</b></a> on the compound file object. Unless you are implementing <b>IStorage</b> and <b>IStream</b>, you would not need to call <b>ILockBytes</b> methods directly. If you write your own <b>ILockBytes</b> implementation, you can use the <a href="api4_5ar7.htm"><b>StgCreateDocfileOnILockBytes</b></a> function to create a compound file storage object backed by your implementation of <b>ILockBytes</b>.</p>
<h4>Methods in Vtable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%><a href="if_r2z_9dwu.htm">IUnknown</a> Methods</th>
<th align=left width=64%>Description</th>
</tr>
<tr valign=top>
<td width=36%><a href="if_r2z_7fvp.htm"><b>QueryInterface</b></a></td>
<td width=64%>Returns pointers to supported interfaces.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_r2z_3rja.htm"><b>AddRef</b></a></td>
<td width=64%>Increments the reference count.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_r2z_59np.htm"><b>Release</b></a></td>
<td width=64%>Decrements the reference count.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>ILockBytes Methods</th>
<th align=left width=64%>Description</th>
</tr>
<tr valign=top>
<td width=36%><a href="if_f2n_9cfo.htm"><b>ReadAt</b></a></td>
<td width=64%>Reads a specified number of bytes starting at a specified offset from the beginning of the byte array.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_f2n_1nhw.htm"><b>WriteAt</b></a></td>
<td width=64%>Writes a specified number of bytes to a specified location in the byte array.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_f2n_0yw8.htm"><b>Flush</b></a></td>
<td width=64%>Ensures that any internal buffers maintained by the byte array object are written out to the backing storage.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_f2n_29gl.htm"><b>SetSize</b></a></td>
<td width=64%>Changes the size of the byte array.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_f2n_5u7i.htm"><b>LockRegion</b></a></td>
<td width=64%>Restricts access to a specified range of bytes in the byte array.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_f2n_91v2.htm"><b>UnlockRegion</b></a></td>
<td width=64%>Removes the access restriction on a range of bytes previously restricted with <a href="if_f2n_5u7i.htm"><b>ILockBytes::LockRegion</b></a>.</td>
</tr>
<tr valign=top>
<td width=36%><a href="if_f2n_0rhw.htm"><b>Stat</b></a></td>
<td width=64%>Retrieves a <a href="structs_7x7r.htm"><b>STATSTG</b></a> structure for this byte array object.</td>
</tr>
</table><br>
<p>
</p>
<p>
</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using a COM Interface</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_using_a_com_interface"></a>Using a COM Interface</h2>
<p>
The client code is the user of the COM interface. To use any COM interface, custom or standard, a client must know its IID. In the following function, <b>CustomRpt</b>, the driver that calls <b>CustomRpt</b> passes it the name of the object that is converted to a wide-character format. The object name is fed to <a href="api2_3tf6.htm"><b>CreateFileMoniker</b></a> so that a file moniker can be created and the client can bind to the running object. Once the object is running, <b>CustomRpt</b> can access a pointer to either an interface in the standard proxy/stub, such as <a href="if_p2q_99ph.htm"><b>IPersistFile</b></a>, or to the custom interface, <b>ICustomInterface</b>.</p>
<pre><code>void CustomRpt(char *pszObject) 
{ 
    HRESULT          hr; 
    WCHAR               szObject[128]; 
    WCHAR               wszMsg[128] = {L"Your Message Here...\n"}; 
    IMoniker            *pmkObject = NULL; 
    IUnknown            *pIUnk = NULL; 
    IPersistFile        *pIPersistFile = NULL; 
    ICustomInterface    *pICustomInterface = NULL; 
 
    // Create a wide-character version of the object's file name. 
    wsprintf(wszObject, L"%hs", pszObject); 
 
    // Get a file moniker for the object (a *.smp file). 
    hr = CreateFileMoniker(wszObject, &amp;pmkObject); 
 
    if(FAILED(hr)) 
    { 
        printf("Client: CreateFileMoniker for Object failed"); 
        return; 
    } 
 
    // BindMoniker is equivalent to calling CreateBindCtx() followed by 
    // a call to BindToObject(). It has the net result of binding the 
    // interface (specified by the IID) to the moniker. 
 
    hr = BindMoniker(pmkObject, 0, IID_IUnknown, (void **)&amp;pIUnk); 
    if (FAILED(hr)) 
    { 
        printf("Client: BindMoniker failed (%x)\n", hr); 
        return; 
    } 
 
    // Try a couple QueryInterface calls into the object code, first a 
    // QueryInterface to IPersistFile... 
 
    hr = pIUnk-&gt;QueryInterface(IID_IPersistFile, 
       (void **)&amp;pIPersistFile); 
 
    if (FAILED(hr)) { 
        printf("Client: QueryInterface IPersistFile failed (%x)\n", hr); 
        pIUnk-&gt;Release(); 
        return; 
    } 
 
    // Followed by a QueryInterface to ICustomInterface. 
    hr = pIUnk-&gt;QueryInterface(IID_ICustomInterface, 
                    (void **)&amp;pICustomInterface); 
 
    if (FAILED(hr)) { 
        printf("Client: QueryInterface failed (%x)\n", hr); 
        pIUnk-&gt;Release(); 
        pIPersistFile-&gt;Release(); 
        return; 
    } 
 
    // CustomReport() is the object function that displays the time and 
    // date information on the object. 
    hr = pICustomInterface-&gt;CustomReport(); 
 
    if (FAILED(hr)) 
    { 
        printf("Client: pICustomInterface-&gt;CustomReport failed (%x)\n", 
             hr); 
        pIUnk-&gt;Release(); 
        pIPersistFile-&gt;Release(); 
        return; 
    } 
 
    // Clean up resources by calling release on each of the interfaces. 
    pIPersistFile-&gt;Release(); 
    pICustomInterface-&gt;Release(); 
    pIUnk-&gt;Release(); 
    return; 
} 
 </code></pre>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IStorage</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_istorage"></a>IStorage</h1>
<p>
The <b>IStorage</b> interface supports the creation and management of structured storage objects. Structured storage allows hierarchical storage of information within a single file, and is often referred to as "a file system within a file". Elements of a structured storage object are storages and streams. Storages are analogous to directories, and streams are analogous to files. Within a structured storage there will be a primary storage object that may contain substorages, possibly nested, and streams. Storages provide the structure of the object, and streams contain the data, which is manipulated through the <a href="if_r2z_4x7x.htm"><b>IStream</b></a> interface.</p>
<p>
The <b>IStorage</b> interface provides methods for creating and managing the root storage object, child storage objects, and stream objects. These methods can create, open, enumerate, move, copy, rename, or delete the elements in the storage object.</p>
<p>
An application must release its <b>IStorage</b> pointers when it is done with the storage object to deallocate memory used. There are also methods for changing the date and time of an element.</p>
<p>
There are a number of different modes in which a storage object and its elements can be opened, determined by setting values from the <a href="enums_1ktp.htm"><b>STGM</b></a> enumeration. One aspect of this is how changes are committed. You can set direct mode, in which in which changes to an object are immediately written to it, or transacted mode, in which changes are written to a buffer until explicitly committed. The <b>IStorage</b> interface provides methods for committing changes and reverting to the last-committed version. Other storage modes set, for example, a stream can be opened in read only mode or read/write mode. For more information, refer to the <a href="enums_1ktp.htm"><b>STGM</b></a> enumeration. </p>
<p>
Other methods provide a means to gain access to information about a storage object and its elements through the <a href="structs_7x7r.htm"><b>STATSTG</b></a> structure.</p>
<h5>When to Implement</h5>
<p>
Generally, you would not implement this interface unless you were defining a new storage scheme for your system. COM provides a compound file implementation of the <b>IStorage</b> interface that supports transacted access. COM provides a set of helper APIs to facilitate using the compound file implementation of storage objects. Refer to <a href="if_r2z_954e.htm"><b>IStorage - Compound File Implementation</b></a>. </p>
<h5>When to Use</h5>
<p>
Call the methods of <b>IStorage</b> to manage substorages or streams within the current storage. This management includes creating, opening, or destroying sub-storages or streams, as well as managing aspects such as time stamps, names, etc. You can also commit changes or revert to previous version for storages opened in transacted mode. The methods of <b>IStorage</b> do not include means to read and write data—this is reserved for <b>IStream</b>, which manages the actual data. While the <b>IStorage</b> and <a href="if_r2z_4x7x.htm"><b>IStream</b></a><b> </b>interfaces are used to manipulate the storage object and its elements, the <a href="if_p2q_8crp.htm"><b>IPersistStorage</b></a> interface contains methods that are called to serialize the storage object and its elements to a disk file.</p>
<h4>Methods in Vtable Order</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%><a href="if_r2z_9dwu.htm">IUnknown</a> Methods</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_7fvp.htm"><b>QueryInterface</b></a></td>
<td width=52%>Returns pointers to supported interfaces.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_3rja.htm"><b>AddRef</b></a></td>
<td width=52%>Increments the reference count.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_59np.htm"><b>Release</b></a></td>
<td width=52%>Decrements the reference count.</td>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>IStorage Methods</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_9wz1.htm"><b>CreateStream</b></a></td>
<td width=52%>Creates and opens a stream object with the specified name contained in this storage object.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_7x65.htm"><b>OpenStream</b></a></td>
<td width=52%>Opens an existing stream object within this storage object using the specified access permissions in <i>grfMode</i>.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_8vfp.htm"><b>CreateStorage</b></a></td>
<td width=52%>Creates and opens a new storage object within this storage object.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_182t.htm"><b>OpenStorage</b></a></td>
<td width=52%>Opens an existing storage object with the specified name according to the specified access mode.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_8yr3.htm"><b>CopyTo</b></a></td>
<td width=52%>Copies the entire contents of this open storage object into another storage object. The layout of the destination storage object may differ.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_44q7.htm"><b>MoveElementTo</b></a></td>
<td width=52%>Copies or moves a substorage or stream from this storage object to another storage object.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_11h0.htm"><b>Commit</b></a></td>
<td width=52%>Reflects changes for a transacted storage object to the parent level.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_56no.htm"><b>Revert</b></a></td>
<td width=52%>Discards all changes that have been made to the storage object since the last commit operation.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_1rsj.htm"><b>EnumElements</b></a></td>
<td width=52%>Returns an enumerator object that can be used to enumerate the storage and stream objects contained within this storage object.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_5lkk.htm"><b>DestroyElement</b></a></td>
<td width=52%>Removes the specified storage or stream from this storage object.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_0xh0.htm"><b>RenameElement</b></a></td>
<td width=52%>Renames the specified storage or stream in this storage object.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_2ss3.htm"><b>SetElementTimes</b></a></td>
<td width=52%>Sets the modification, access, and creation times of the indicated storage element, if supported by the underlying file system.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_57sj.htm"><b>SetClass</b></a></td>
<td width=52%>Assigns the specified CLSID to this storage object.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_1ofn.htm"><b>SetStateBits</b></a></td>
<td width=52%>Stores up to 32 bits of state information in this storage object.</td>
</tr>
<tr valign=top>
<td width=48%><a href="if_r2z_3ook.htm"><b>Stat</b></a></td>
<td width=52%>Returns the <a href="structs_7x7r.htm"><b>STATSTG</b></a> structure for this open storage object.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<p>&nbsp;</p></body>
</HTML>

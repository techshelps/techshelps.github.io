<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMarshal::UnmarshalInterface</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_imarshal_unmarshalinterface"></a>IMarshal::UnmarshalInterface</h2>
<p>
Initializes a newly created proxy and returns an interface pointer to that proxy. </p>
<pre><code><b>HRESULT UnmarshalInterface(
  IStream *</b><i> pStm</i><b>,  </b>//Pointer to the stream to be unmarshaled
<b>  REFIID</b><i> riid</i><b>,     </b>//Reference to the identifier of the interface to 
                   //be unmarshaled
<b>  void **</b><i> ppv      </i>//Address of output variable that receives the 
                   //interface pointer requested in <i>riid</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pStm</i></dt>
<dd>
[in] Pointer to the stream from which the interface pointer is to be unmarshaled.</dd>
<dt>
<i>riid</i></dt>
<dd>
[in] Reference to the identifier of the interface to be unmarshaled.</dd>
<dt>
<i>ppv</i></dt>
<dd>
[out] Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppv</i> contains the requested interface pointer of the interface to be unmarshaled.
</dd>
</dl>
<h4>Return Values</h4>
<p>
The method supports the standard return value E_FAIL, as well as the following: 
<dl>
<dt>
S_OK </dt>
<dd>
The interface pointer was unmarshaled successfully.</dd>
<dt>
E_NOINTERFACE</dt>
<dd>
The specified interface was not supported.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The COM library in the process where unmarshaling is to occur calls the proxy's implementation of this method.</p>
<h5>Notes to Callers</h5>
<p>
You do not call this method directly. There are, however, some situations in which you might call it indirectly through a call to <a href="api1_6gbp.htm"><b>CoUnmarshalInterface</b></a>. For example, if you are implementing a stub, your implementation would call <b>CoUnmarshalInterface</b> when the stub receives an interface pointer as a parameter in a method call.</p>
<h5>Notes to Implementers</h5>
<p>
The proxy's implementation should read the data written to the stream by the original object's implementation of <a href="if_f2n_8ox1.htm"><b>IMarshal::MarshalInterface</b></a> and use that data to initialize the proxy object whose CLSID was returned by the marshaling stub's call to the original object's implementation of <a href="if_f2n_1mib.htm"><b>IMarshal::GetUnmarshalClass</b></a>. </p>
<p>
To return the appropriate interface pointer, the proxy implementation can simply call <a href="if_r2z_7fvp.htm"><b>IUnknown::QueryInterface</b></a> on itself, passing the <i>riid</i> and <i>ppv</i> parameters. However, your implementation of <b>UnmarshalInterface </b>is free to create a different object and, if necessary, return a pointer to it. </p>
<p>
Just before exiting, even if exiting with an error, your implementation should reposition the seek pointer in the stream immediately after the last byte of data read.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_f2n_1mib.htm"><b>IMarshal::GetUnmarshalClass</b></a>, <a href="if_f2n_8ox1.htm"><b>IMarshal::MarshalInterface</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROPSETFLAG</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_propsetflag"></a>PROPSETFLAG</h1>
<p>
The PROPSETFLAG enumeration values define characteristics of a property set. The values are used in the <i>grfFlags</i> parameter of <b>IPropertySetStorage</b> methods, the <b>StgCreatePropStg</b> function, and the <b>StgOpenPropStg</b> function.</p>
<pre><code>typedef enum PROPSETFLAG {
    PROPSETFLAG_DEFAULT      = 0,
    PROPSETFLAG_NONSIMPLE    = 1,
    PROPSETFLAG_ANSI         = 2,
    PROPSETFLAG_UNBUFFERED   = 4
    } <b>PROPSETFLAG</b>
 </code></pre>
<h4>Elements</h4>
<dl>
<dt>
PROPSETFLAG_NONSIMPLE</dt>
<dd>
If specified, storage-valued and stream-valued properties are permitted in the newly created set. Otherwise, they are not permitted. In the compound file and standalone implementations, property sets may be transacted only if PROPSETFLAG_NONSIMPLE is specified.</dd>
<dt>
PROPSETFLAG_ANSI</dt>
<dd>
If specified, all string values in the property set that are not explicitly Unicode (those other than VT_LPWSTR) are stored with the current system ANSI code page (see the Win32 function <b>GetACP</b>). Use of this value is not recommended, as described in the following Remarks section.
<p>
If this value is absent, string values in the new property set are stored in Unicode. The degree of control afforded by this value is necessary so clients using the property-related interfaces can interoperate well with standard property sets such as the OLE2 summary information, which may exist in the ANSI code page.
</dd>
<dt>
PROPSETFLAG_UNBUFFERED</dt>
<dd>
Used only with the <b>StgCreatePropStg</b> and <b>StgOpenPropStg</b> functions, that is, in the standalone implementations of property set interfaces. If specified in these functions, changes to the property set are not buffered. Instead, changes are always written directly to the property set. A property set is changed by calls to its <b>IPropertyStorage</b> methods. However, by default, changes are buffered in an internal property set cache and are subsequently written to the property set when the <b>IPropertyStorage::Commit</b> method is called.
<p>
Setting PROPSETFLAG_UNBUFFERED reduces performance since the property set's internal buffer is automatically flushed after every change to the property set. However, writing changes directly prevents coordination problems. For example, suppose the storage object is opened in transacted mode, and the property set is buffered. Then, if you call the <b>IStorage::Commit</b> method on the storage object, the property set changes will not be picked up as part of the transaction, since they are in a buffer that has not been flushed yet. You must call <b>IPropertyStorage::Commit</b> prior to calling <b>IStorage::Commit</b> to flush the property set buffer before committing changes to the storage. As an alternative to making two calls, you can set PROPSETFLAG_UNBUFFERED so that changes are always written directly to the property set and are never buffered in the property set's internal cache. Then, the changes will be picked up when the transacted storage is committed.

</dd>
</dl>
<h4>Remarks</h4>
<p>
These values can be set and checked using bitwise operations that determine how property sets are created and opened. Property sets are created using the <b>IPropertySetStorage::Create</b> method or the <b>StgCreatePropStg</b> function. They are opened using the <b>IPropertySetStorage::Open</b> method or the <b>StgOpenPropStg</b> function.</p>
<p>
It is recommended that property sets be created as Unicode, by not setting the PROPSETFLAG_ANSI flag in the <i>grfFlags</i> parameter. It is also recommended that you avoid using VT_LPSTR values, and use VT_LPWSTR values instead. When the property set code page is Unicode, VT_LPSTR string values are converted to Unicode when stored, and converted back to multibyte string values when retrieved. When the code page of the property set is not Unicode, property names, VT_BSTR strings, and non-simple property values are converted to multibyte strings when stored, and converted back to Unicode when retrieved, all using the current system ANSI code page.</p>
<h4>Programming Information</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=30%>Windows NT</td>
<td width=70%>4.0/SP2 or with <a href="newgloss_8xvd.htm#_oleglos_redistributable_files">IPROP.DLL</a></td>
</tr>
<tr valign=top>
<td width=30%>Win95</td>
<td width=70%>Yes; requires IPROP.DLL</td>
</tr>
<tr valign=top>
<td width=30%>Win32s</td>
<td width=70%>No</td>
</tr>
<tr valign=top>
<td width=30%>Unicode</td>
<td width=70%>Yes</td>
</tr>
<tr valign=top>
<td width=30%>Import Library</td>
<td width=70%>IPROP.DLL</td>
</tr>
<tr valign=top>
<td width=30%>Header File</td>
<td width=70%>IPROPIDL.H</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.1 and later. <br>
&nbsp;&nbsp;<b>Windows:</b> Use Windows 95 and later. Requires DCOM95. <br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="api2_2qat.htm"><b>FmtIdToPropStgName</b></a>, <a href="if_p2q_1uxx.htm"><b>IPropertySetStorage::Create</b></a>, <a href="if_p2q_7s1a.htm"><b>IPropertySetStorage::Open</b></a>, <a href="api3_42sk.htm"><b>PropStgNameToFmtId</b></a>, <a href="api4_1dd3.htm"><b>StgCreatePropSetStg</b></a>, <a href="api4_59ev.htm"><b>StgCreatePropStg</b></a>, <a href="api4_26hz.htm"><b>StgOpenPropStg</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPropertySetStorage-Compound File Implementation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_ipropertysetstorage_compound_file_implementation"></a>IPropertySetStorage-Compound File Implementation</h1>
<p>
The OLE compound file storage object implementation includes an implementation of both <b>IPropertyStorage</b>, the interface that manages a single persistent property set, and <b>IPropertySetStorage</b>, the interface that manages groups of persistent property sets. </p>
<p>
To get a pointer to the compound file implementation of <b>IPropertySetStorage</b>, first call <a href="api4_8hd1.htm"><b>StgCreateDocfile</b></a> to create a new compound file object or <a href="api4_0hb9.htm"><b>StgOpenStorage</b></a> to open a previously created compound file. Both functions supply a pointer to the object's <a href="if_r2z_9b8l.htm"><b>IStorage</b></a> interface. When you want to deal with persistent property sets, call <b>IStorage::QueryInterface</b> for the <b>IPropertySetStorage</b> interface, specifying the header-defined name for the interface identifier <b>IID_IPropertySetStorage</b>. </p>
<h5>When to Use</h5>
<p>
Call the methods of <b>IPropertySetStorage</b> to create, open, or delete property sets in the current compound file property set storage. There is also a method that supplies a pointer to an enumerator that can be used to enumerate the property sets in the storage.</p>
<h4>Remarks</h4>
<dl>
<dt>
<a href="if_p2q_1uxx.htm"><b>IPropertySetStorage::Create</b></a> </dt>
<dd>
Creates a new property set in the current compound file storage and, on return, supplies an interface pointer to the <b>IPropertyStorage</b> compound file implementation. In this implementation, property sets may be transacted only if PROPSETFLAG_NONSIMPLE is specified.</dd>
<dt>
<a href="if_p2q_7s1a.htm"><b>IPropertySetStorage::Open</b></a> </dt>
<dd>
Opens an existing property set in the current property storage. On return, it supplies an interface pointer to the compound file implementation of <b>IPropertyStorage</b>.</dd>
<dt>
<a href="if_p2q_0u05.htm"><b>IPropertySetStorage::Delete</b></a> </dt>
<dd>
Deletes a property set in this property storage.</dd>
<dt>
<a href="if_p2q_1fsd.htm"><b>IPropertySetStorage::Enum</b></a> </dt>
<dd>
Creates an object that can be used to enumerate STATPROPSETSTG structures. Each STATPROPSETSTG structure provides information about a single property set. The implementation calls the constructor for IEnumSTATPROPSETSTG, which, in turn, uses the pointer to the <b>IStorage</b> interface to create a <a href="structs_7x7r.htm"><b>STATSTG</b></a> enumerator, which is then used over the actual storage to get the information about the property sets.

<p>
<b>Note</b>&nbsp;&nbsp;The DocumentSummaryInformation property set is special, in that it may have two property set sections. This property set is described in the OLE Programmer's Reference, in the section titled <a href="propsets_1yr8.htm">The DocumentSummaryInformation Property Set</a>. The second section is referred to as the User-Defined Properties. Each section is identified with a unique Format ID, for example FMTID_DocumentSummaryInformation and FMTID_UserDefinedProperties.

<p>
When <b>IPropertySetStorage::Create</b> is called to create the User-Defined Property Set, the first section is created automatically. Thus once FMTID_UserDefinedProperties is created, FMTID_DocumentSummaryInformation need not be created, but can be opened with a call to <b>IPropertySetStorage::Open</b>. Note that creating the first section does not automatically create the second section. It is not possible to open both sections simultaneously.

<p>
When <b>IPropertySetStorage::Create</b> is called to create the User-Defined Property Set, the first section is created automatically. Thus once FMTID_UserDefinedProperties is created, FMTID_DocumentSummaryInformation need not be created, but can be opened with a call to <b>IPropertySetStorage::Open</b>. Note that creating the first section does not automatically create the second section. It is not possible to open both sections simultaneously.

<p>
Alternately, when <a href="if_p2q_0u05.htm"><b>IPropertySetStorage::Delete</b></a> is called to delete the <b>first</b> section, both sections are deleted. That is, calling <b>IPropertySetStorage::Delete</b> with FMTID_DocumentSummaryInformation, causes both that section and the FMTID_UserDefinedProperties section to be deleted. Note that deleting the second section does not automatically delete the first section.

<p>
Finally, when <a href="if_p2q_1fsd.htm"><b>IPropertySetStorage::Enum</b></a> is used to enumerate property sets, the User-Defined Property Set will not be enumerated.

</dd>
</dl>
<h4>See Also</h4>
<p>
<a href="if_p2q_80md.htm"><b>IPropertyStorage</b></a>,<b> <a href="#_com_ipropertysetstorage_compound_file_implementation">IPropertySetStorage - Compound File Implementation</a></b>,<b> <a href="structs_6u07.htm">STATPROPSETSTG</a></b> structure, <a href="enums_4exz.htm"><b>PROPSETFLAG</b></a> enumeration, <a href="if_r2z_1rsj.htm"><b>IStorage::EnumElements</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STGC</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_stgc"></a>STGC</h1>
<p>
The <b>STGC</b> enumeration constants specify the conditions for performing the commit operation in the <a href="if_r2z_11h0.htm"><b>IStorage::Commit</b></a> and <a href="if_r2z_5oac.htm"><b>IStream::Commit</b></a> methods.</p>
<p>
</p>
<pre><code>typedef enum tagSTGC 
{ 
    STGC_DEFAULT                               = 0, 
    STGC_OVERWRITE                             = 1, 
    STGC_ONLYIFCURRENT                         = 2, 
    STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE    = 4 
    STGC_CONSOLIDATE                           = 8 
} STGC; 
 </code></pre>
<h4>Elements</h4>
<dl>
<dt>
STGC_DEFAULT</dt>
<dd>
You can specify this condition with STGC_CONSOLIDATE, or some combination of the other three flags. You would use this value mainly to make your code more readable.</dd>
<dt>
STGC_OVERWRITE</dt>
<dd>
The commit operation can overwrite existing data to reduce overall space requirements. This value is not recommended for typical usage because it is not as robust as the default case. In this case, it is possible for the commit to fail after the old data is overwritten but before the new data is completely committed. Then, neither the old version nor the new version of the storage object will be intact.
<p>
You can use this value in cases where:

<ul>
<li>
The user has indicated a willingness to risk losing the data</li>
<li>
The low memory save sequence will be used to safely save the storage object to a smaller file</li>
<li>
A previous commit returned STG_E_MEDIUMFULL but overwriting the existing data would provide enough space to commit changes to the storage object</li>
</ul>

<p>
Note that the commit operation checks for adequate space before any overwriting occurs. Thus, even with this value specified, if the commit operation fails due to space requirements, the old data will remain safe. The case where data loss can occur is when the commit operation fails due to some reason other than lack of space and the STGC_OVERWRITE value was specified.
</dd>
<dt>
STGC_ONLYIFCURRENT</dt>
<dd>
Prevents multiple users of a storage object from overwriting one another's changes. The commit operation occurs only if there have been no changes to the saved storage object since the user most recently opened it. Thus, the saved version of the storage object is the same version that the user has been editing. If other users have changed the storage object, the commit operation fails and returns the STG_E_NOTCURRENT value. You can override this behavior by calling the <b>IStorage::Commit</b>  or <b>IStream::Commit</b> method again using the STGC_DEFAULT value.</dd>
<dt>
STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE</dt>
<dd>
Commits the changes to a write-behind disk cache, but does not save the cache to the disk. In a write-behind disk cache, the operation that writes to disk actually writes to a disk cache, thus increasing performance. The cache is eventually written to the disk, but usually not until after the write operation has already returned. The performance increase comes at the expense of an increased risk of losing data if a problem occurs before the cache is saved and the data in the cache is lost.
<p>
If you do not specify this value, then committing changes to root-level storage objects is robust even if a disk cache is used. The two-phase commit process ensures that data is stored on the disk and not just to the disk cache.
</dd>
<dt>
STGC_CONSOLIDATE</dt>
<dd>
Indicates that a storage should be consolidated after it is committed resulting in a smaller file on disk. This flag is valid only on the outermost storage object opened in transacted mode. It is not valid for streams. The STGC_CONSOLIDATE flag can be combined with any other STGC flags.
</dd>
</dl>
<h4>Remarks</h4>
<p>
You can specify STGC_DEFAULT or some combination of STGC_OVERWRITE, STGC_ONLYIFCURRENT, and STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE for normal commit operations. Specify STGC_CONSOLIDATE with any other STGC flags.</p>
<p>
Typically, you would use STGC_ONLYIFCURRENT to protect the storage object in cases where more than one user can edit the object simultaneously.</p>
<p>
For native structured storage (NSS), it is unnecessary to consolidate storage files. NSS uses NTFS support for multiple data streams in a file, which automatically manages unused space in the streams.</p>
<p>
</p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.1 and later. <br>
&nbsp;&nbsp;<b>Windows:</b> Use Windows 95 and later. <br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in wtypes.h.</p>
<h4>See Also</h4>
<p>
<a href="if_p2q_80md.htm"><b>IPropertyStorage</b></a>, <a href="if_r2z_9b8l.htm"><b>IStorage</b></a>, <a href="if_r2z_4x7x.htm"><b>IStream</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Memory Management Rules</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_memory_management_rules"></a>Memory Management Rules</h2>
<p>
The life-time of pointers to interfaces is always managed through the <b>AddRef </b>and <b>Release<i> </i></b>methods on every COM interface. For more information, refer to <a href="com_1vxv.htm">Rules for Managing Reference Counts</a>.</p>
<p>
For all other parameters, it is important to adhere to certain rules for managing memory. The following rules apply to all parameters of interface methods — including the return value — that are not passed by value:
<ul>
<li>
<b>in</b> <b>parameters</b> must be allocated and freed by the caller.</li>
<li>
<b>out</b> <b>parameter</b> must be allocated by the one called; freed by the caller using the standard COM task memory allocator. Refer to <a href="com_04aa.htm">The OLE Memory Allocator</a> for more information.</li>
<li>
<b>in-out</b> <b>parameter</b> is initially allocated by the caller, then freed and re-allocated by the one called, if necessary. As is true for out parameters, the caller is responsible for freeing the final returned value. The standard COM memory allocator must be used.</li>
</ul>
<p>
In the latter two cases, where one piece of code allocates the memory and a different piece of code frees it, using the COM allocator ensures that the two pieces of code are using the same allocation methods. </p>
<p>
Another area that needs special attention is the treatment of out and in-out parameters in failure conditions. If a function returns a a failure code, the caller typically has no way to clean up the <i>out </i>or <i>in-out </i>parameters. This leads to a few additional rules:</p>
<p>
Parameters must <i>always </i>be reliably set to a value that will be cleaned up without any action by the caller, in case of an error condition. </p>
<p>
All out pointer parameters <i>must</i> explicitly be set to NULL. These are usually passed in a pointer-to-pointer parameter, but can also be passed as a member of a structure that the caller allocates and the called code fills. The most straightforward way to ensure this is (in part) to set these values to NULL on function entry. This rule is important, because it promotes more robust application interoperability.</p>
<p>
Under error conditions, all in-out parameters must either be left alone by the code called (thus remaining at the value to which they were initialized by the caller) or be explicitly set, as in the out-parameter error return case.</p>
<p>
Remember that these memory management conventions for COM applications apply only across public interfaces and APIs — there is no requirement at all that memory allocation strictly internal to a COM application need be done using these mechanisms.</p>
<p>&nbsp;</p></body>
</HTML>

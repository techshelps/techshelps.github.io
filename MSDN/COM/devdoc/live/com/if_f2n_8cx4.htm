<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMoniker::ComposeWith</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_imoniker_composewith"></a>IMoniker::ComposeWith</h2>
<p>
Combines the current moniker with another moniker, creating a new composite moniker.</p>
<pre><code><b>HRESULT ComposeWith(
  IMoniker</b><i> *pmkRight</i><b>,  </b>//Pointer to moniker to be composed onto this 
                       //one
<b>  BOOL</b><i> fOnlyIfNotGeneric</i><b>,  </b>//Indicates if generic composition 
                           //permissible
<b>  IMoniker</b><i> **ppmkComposite</i>
<i>                       </i>//Address of output variable that receives 
                       //the IMoniker interface pointer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pmkRight</i></dt>
<dd>
[in] Pointer to the <b>IMoniker</b> interface on the moniker to compose onto the end of this moniker.</dd>
<dt>
<i>fOnlyIfNotGeneric</i> </dt>
<dd>
[in] If TRUE, the caller requires a non-generic composition, so the operation should proceed only if <i>pmkRight</i> is a moniker class that this moniker can compose with in some way other than forming a generic composite. If FALSE, the method can create a generic composite if necessary. </dd>
<dt>
<i>ppmkComposite</i></dt>
<dd>
[out] Address of <b>IMoniker</b>* pointer variable that receives the interface pointer to the resulting composite moniker pointer. When successful, the implementation must call <a href="if_r2z_3rja.htm"><b>IUnknown::AddRef</b></a> on the resulting moniker; it is the caller's responsibility to call <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a>. If an error occurs or if the monikers compose to nothing (e.g., composing an anti-moniker with an item moniker or a file moniker), *<i>ppmkComposite</i> should be set to NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
The method supports the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The monikers were successfully combined.</dd>
<dt>
MK_E_NEEDGENERIC</dt>
<dd>
Indicates that <i>fOnlyIfNotGeneric</i> was TRUE, but the monikers could not be composed together without creating a generic composite moniker.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Joining two monikers together is called composition. Sometimes two monikers of the same class can be combined in what is called non-generic composition. For example, a file moniker representing an incomplete path and another file moniker representing a relative path can be combined to form a single file moniker representing the complete path. Non-generic composition for a given moniker class can be handled only in the implementation of <b>IMoniker::ComposeWith</b> for that moniker class.</p>
<p>
Combining two monikers of any class is called generic composition, which can be accomplished through a call to the <a href="api2_4zc5.htm"><b>CreateGenericComposite</b></a> function. </p>
<p>
Composition of monikers is an associative operation. That is, if A, B, and C are monikers, then, where Comp() represents the composition operation:</p>
<p>
Comp( Comp( A, B ), C )</p>
<p>
is always equal to</p>
<p>
Comp( A, Comp( B, C ) )</p>
<h5>Notes to Callers</h5>
<p>
To combine two monikers, you should call <b>IMoniker::ComposeWith</b> rather than calling the <a href="api2_4zc5.htm"><b>CreateGenericComposite</b></a> function to give the first moniker a chance to perform a non-generic composition. </p>
<p>
An object that provides item monkers to identify its objects would call <b>IMoniker::ComposeWith</b> to provide a moniker that completely identifies the location of the object. This would apply, for example, to a server that supports linking to portions of a document, or a container that supports linking to embedded objects within its documents. In such a situation, you would do the following:
<ol>
<li>
Create an item moniker identifying an object.</li>
<li>
Get a moniker that identifies the object's container.</li>
<li>
Call <b>IMoniker::ComposeWith</b> on the moniker identifying the container, passing the item moniker as the <i>pmkRight</i> parameter. </li>
</ol>
<p>
Most callers of <b>IMoniker::ComposeWith</b> should set the <i>fOnlyIfNotGeneric</i> parameter to FALSE. </p>
<h5>Notes to Implementers</h5>
<p>
You can use either non-generic or generic composition to compose the current moniker with the moniker that <i>pmkRight</i> points to. If the class of the moniker indicated by <i>pmkRight</i> is the same as that of the current moniker, it is possible to use the contents of <i>pmkRight</i> to perform a more intelligent non-generic composition. </p>
<p>
In writing a new moniker class, you must decide if there are any kinds of monikers, whether of your own class or another class, to which you want to give special treatment. If so, implement <b>IMoniker::ComposeWith</b> to check whether <i>pmkRight</i> is a moniker of the type that should have this treatment. To do this, you can call the moniker's <b>GetClassID</b> method (derived from the <a href="if_p2q_3lbo.htm"><b>IPersist</b></a> Interface), or, if you have defined a moniker object that supports a custom interface, you can call <a href="if_r2z_7fvp.htm"><b>IUnknown::QueryInterface</b></a> on the moniker for that interface. An example of special treatment would be the non-generic composition of an absolute file moniker with a relative file moniker. The most common case of a special moniker is the inverse for your moniker class (whatever you return from your implementation of <a href="if_f2n_2zvp.htm"><b>IMoniker::Inverse</b></a>). </p>
<p>
If <i>pmkRight</i> completely negates the receiver so the resulting composite is empty, you should pass back <b>NULL</b> in <i>ppmkComposite</i> and return the status code S_OK.</p>
<p>
If the <i>pmkRight</i> parameter is not of a class to which you give special treatment, examine <i>fOnlyIfNotGeneric</i> to determine what to do next. If <i>fOnlyIfNotGeneric</i> is TRUE, pass back NULL through <i>ppmkComposite</i> and return the status code MK_E_NEEDGENERIC. If <i>fOnlyIfNotGeneric</i> is FALSE, call the <a href="api2_4zc5.htm"><b>CreateGenericComposite</b></a> function to perform the composition generically. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="api2_4zc5.htm"><b>CreateGenericComposite</b></a>, <a href="if_f2n_2zvp.htm"><b>IMoniker::Inverse</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

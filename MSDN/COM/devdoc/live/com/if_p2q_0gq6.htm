<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPropertyStorage-Compound File Implementation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_ipropertystorage_compound_file_implementation"></a>IPropertyStorage-Compound File Implementation</h1>
<p>
The OLE implementation of the Structured Storage architecture is called compound files. Storage objects as implemented in compound files include an implementation of both <b>IPropertyStorage</b>, the interface that manages a single persistent property set, and <b>IPropertySetStorage</b>, the interface that manages groups of persistent property sets. </p>
<p>
To get a pointer to the compound file implementation of <b>IPropertyStorage</b>, first call <a href="api4_8hd1.htm"><b>StgCreateDocfile</b></a> to create a new compound file object or <a href="api4_0hb9.htm"><b>StgOpenStorage</b></a>, to open a previously created compound file. Both functions supply a pointer to the object's <b>IStorage</b> interface. When you want to deal with persistent property sets, call <b>QueryInterface</b> for the <b>IPropertySetStorage</b> interface, specifying the header-defined name for the interface identifier <b>IID_IPropertySetStorage</b>. Calling either the <b>Create</b> or <b>Open</b> method of that interface, you get a pointer to the <b>IPropertyStorage</b> interface, which you can use to call any of its methods.</p>
<h5>When to Use</h5>
<p>
Use <b>IPropertyStorage</b> to manage properties within a single property set. Its methods support reading, writing, and deleting both properties and the optional string names that can be associated with property identifiers. Other methods support the standard commit and revert storage operations. There is also a method that allows you to set times associated with the property storage, and another that permits the assignment of a CLSID that can be used to associate other code, such as user interface code, with the property set. Calling the <b>Enum</b> method supplies a pointer to the compound file implementation of <b>IEnumSTATPROPSTG</b>, which allows you to enumerate the properties in the set.</p>
<h4>Remarks</h4>
<p>
The compound file implementation of <b>IPropertyStorage</b> caches open property sets in memory in order to improve performance. As a result, changes to a property set are not written to the compound file until the <b>Commit</b> or <b>Release</b> (last reference) methods are called.
<dl>
<dt>
<a href="if_p2q_6xd1.htm"><b>IPropertyStorage::ReadMultiple</b></a> </dt>
<dd>
Reads the properties specified in the <i>rgpspec</i> array and supplies the values of all valid properties in the <i>rgvar</i> array of PROPVARIANTs. In the OLE compound file implementation, duplicate property identifiers that refer to stream- or storage-types result in multiple calls to <b>IStorage::OpenStream</b> or <b>IStorage::OpenStorage</b> and the success or failure of <b>ReadMultiple</b> depends on the underlying storage implementation's ability to share opens. Because in a compound file STGM_SHARE_EXCLUSIVE is forced, multiple opens will fail. Opening the same storage object more than once from the same parent storage is not supported. The STGM_SHARE_EXCLUSIVE flag must be specified.
<p>
In addition, to ensure thread-safe operation if the same stream- or storage-valued property is requested multiple times through the same <b>IPropertyStorage</b> pointer in the OLE compound file implementation, the open will succeed or fail depending on whether or not the property is already open and on whether the underlying file system handles multiple opens of a stream or storage. Thus, the <b>ReadMultiple</b> operation on a stream- or storage-valued property always results in a call to <a href="if_r2z_7x65.htm"><b>IStorage::OpenStream</b></a>, or <a href="if_r2z_182t.htm"><b>IStorage::OpenStorage</b></a>, passing the access (STGM_READWRITE, etc.) and share flags (STGM_SHARE_EXCLUSIVE, etc) specified when the original property set was opened or created.

<p>
If the method fails, the values written to <i>rgvar</i>[] are undefined. If some stream- or storage-valued properties are opened successfully but an error occurs before execution is complete, these should be released before the method returns.
</dd>
<dt>
<a href="if_p2q_0bj9.htm"><b>IPropertyStorage::WriteMultiple</b></a> </dt>
<dd>
Writes the properties specified in the <i>rgpspec</i>[] array, assigning them the PROPVARIANT tags and values specified in <i>rgvar</i>[]. Properties that already exist are assigned the specified PROPVARIANT values, and properties that do not currently exist are created.</dd>
<dt>
<a href="if_p2q_5lr9.htm"><b>IPropertyStorage::DeleteMultiple</b></a> </dt>
<dd>
Deletes the properties specified in the <i>rgpspec</i>[].</dd>
<dt>
<a href="if_p2q_9g6r.htm"><b>IPropertyStorage::ReadPropertyNames</b></a> </dt>
<dd>
Reads existing string names associated with the property identifiers specified in the <i>rgpropid</i>[] array.</dd>
<dt>
<a href="if_p2q_5esz.htm"><b>IPropertyStorage::WritePropertyNames</b></a> </dt>
<dd>
Assigns string names specified in the <i>rglpwstrName</i> array to property identifiers specified in the <i>rgpropid</i> array.</dd>
<dt>
<a href="if_p2q_950z.htm"><b>IPropertyStorage::DeletePropertyNames</b></a> </dt>
<dd>
Deletes the string names of the property identifiers specified in the rgpropid array by writing NULL to the property name.</dd>
<dt>
<a href="if_p2q_3p6b.htm"><b>IPropertyStorage::SetClass</b></a> </dt>
<dd>
Sets the CLSID field of the property set stream. In this implementation, setting the CLSID on a non-simple property set (one that can legally contain storage- or stream-valued properties, as described in <b>IPropertySetStorage::Create</b>) also sets the CLSID on the underlying sub-storage so that it can be obtained through a call to <b>IStorage::Stat</b>.</dd>
<dt>
<a href="if_p2q_00ms.htm"><b>IPropertyStorage::Commit</b></a> </dt>
<dd>
For both simple and non-simple property sets, flushes the memory image to the disk subsystem. In addition, for non-simple transacted-mode property sets, this method performs a commit (as in <b>IStorage::Commit</b>) on the property set.</dd>
<dt>
<a href="if_p2q_45tg.htm"><b>IPropertyStorage::Revert</b></a> </dt>
<dd>
For non-simple property sets only, calls the underlying storage's <b>Revert</b> method and re-opens the 'contents' stream. For simple property sets, returns E_OK.</dd>
<dt>
<a href="if_p2q_1ru5.htm"><b>IPropertyStorage::Enum</b></a> </dt>
<dd>
Constructs an instance of <a href="if_a2e_8p9j.htm"><b>IEnumSTATPROPSTG</b></a>, the methods of which can be called to enumerate the STATPROPSTG structures that provide information about each of the properties in the set. This implementation creates an array into which the entire property set is read and which can be shared when <b>IEnumSTATPROPSTG::Clone</b> is called.</dd>
<dt>
<a href="if_p2q_0xmc.htm"><b>IPropertyStorage::Stat</b></a> </dt>
<dd>
Fills in the fields of a STATPROPSETSTG structure, which contains information about the property set as a whole. On return, supplies a pointer to the structure. For non-simple storage sets, this implementation calls <a href="if_r2z_3ook.htm"><b>IStorage::Stat</b></a> (or <b>IStream::Stat</b>) to get the times from the underlying storage or stream. For simple storage sets, no times are maintained.</dd>
<dt>
<a href="if_p2q_0z3n.htm"><b>IPropertyStorage::SetTimes</b></a> </dt>
<dd>
For non-simple property sets only, sets the times supported by the underlying storage. The compound file storage implementation supports all three: modification, access, and creation. This implementation of <b>SetTimes</b> calls the <b>IStorage::SetElementTimes</b> method of the underlying storage to retrieve these times.
</dd>
</dl>
<h4>See Also</h4>
<p>
<a href="if_p2q_80md.htm"><b>IPropertyStorage</b></a>, <a href="if_r2z_2ss3.htm"><b>IStorage::SetElementTimes</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOleCommandTarget::QueryStatus</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_iolecommandtarget_querystatus"></a>IOleCommandTarget::QueryStatus</h2>
<p>
Queries the object for the status of one or more commands generated by user interface events.</p>
<pre><code><b>[input_sync] HRESULT QueryStatus(
  const GUID</b><i> *pguidCmdGroup</i><b>,</b>
<b>                        </b>// Pointer to command group
<b>  ULONG</b><i> cCmds</i><b>,          </b>// Number of commands in <i>prgCmds</i> array
<b>  OLECMD</b><i> *prgCmds</i><b>,      </b>// Array of commands
<b>  OLECMDTEXT</b><i> *pCmdText  </i>// Pointer to name or status of command
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pguidCmdGroup</i></dt>
<dd>
[unique][in] Unique identifier of the command group; can be NULL to specify the standard group. All the commands that are passed in the <i>prgCmds </i>array must belong to the group specified by <i>pguidCmdGroup</i>.</dd>
<dt>
<i>cCmds</i></dt>
<dd>
[in] The number of commands in the <i>prgCmds </i>array.</dd>
<dt>
<i>prgCmds</i></dt>
<dd>
[in,out] A caller-allocated array of <b>OLECMD</b> structures that indicate the commands for which the caller needs status information. This method fills the <i>cmdf </i>member  of each structure with values taken from the <b>OLECMDF</b> enumeration.</dd>
<dt>
<i>pCmdText</i></dt>
<dd>
[unique][in,out] Pointer to an <b>OLECMDTEXT</b> structure in which to return name and/or status information of a single command. Can be NULL to indicate that the caller does not need this information.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return values E_FAIL and E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The command status as any optional strings were returned successfully.</dd>
<dt>
E_POINTER</dt>
<dd>
The <i>prgCmds</i> argument is NULL.</dd>
<dt>
OLECMDERR_E_UNKNOWNGROUP</dt>
<dd>
The <i>pguidCmdGroup</i> parameter is not NULL but does not specify a recognized command group.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Callers use <b>IOleCommandTarget::QueryStatus</b> to determine which commands are supported by a target object. The caller can then disable unavailable commands that would otherwise be routed to the object. The caller can also use this method to get the name or status of a single command.</p>
<h5>Notes to Callers</h5>
<p>
The caller passes an array of <a href="structs_0muc.htm"><b>OLECMD</b></a> structures in <i>prgCmds </i>that describe the commands of interest from the group specified in <i>pguidCmdGroup</i>, where each structure's <i>cmdID </i>is set to a command identifier and the <i>cmdf </i>field is set to zero.</p>
<h5>Notes to Implementers</h5>
<p>
The object receiving the call the fills the <i>cmdf </i>field for each command with values taken from the <a href="enums_0m06.htm"><b>OLECMDF</b></a> enumeration to describe the status of each command.</p>
<p>
The called object should first mark the command as described above. Then, if the command is supported (OLECMDF_SUPPORTED) the object should check the OLECMDTEXTF flags in the <a href="structs_0ino.htm"><b>OLECMDTEXT</b></a> structure. If the OLECMDFTEXF_NAME flag is specified, then the object should copy the localized name of the command (for example, "Open", "Copy", etc.) into the <i>rgwz</i> field of <b>OLECMDTEXT</b>, paying attention to the size specified by the <i>cwBuf</i> field in that same structure<i>.</i></p>
<p>
If the caller sets the OLECMDFTEXTF_STATUS flag, the object should instead write a localized status string for the command into the <i>rgwz</i> field. The status string is typically contextual and depends on the state of the command—enabled/disabled, for example. If the buffer is not big enough, then the object should zero-terminate the buffer. Whether the buffer is big enough or not, the object must return the total actual size of the string that it attempted to copy in the <i>cwActual</i> member of the <b>OLECMDTEXT</b> structure.</p>
<p>
If the command array contains more than one command, the textual information should be returned for the first command in the array that the object supports. Typically, this functionality is used to show the status text of a command. The caller can use either a stack or a global variable for <i>rgwz,</i> because memory for this parameter is not dynamically allocated.</p>
<p>
Because <b>QueryStatus</b> is defined with the [input_sync] attribute, the implementing object cannot yield or make another non input_sync RPC call while executing it.</p>
<p>
A command target must implement this function; E_NOTIMPL is not an acceptable return value.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in docobj.h.</p>
<h4>See Also</h4>
<p>
<a href="structs_0muc.htm"><b>OLECMD</b></a>, <a href="enums_0m06.htm"><b>OLECMDF</b></a>, <a href="structs_0ino.htm"><b>OLECMDTEXT</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BINDF</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_bindf"></a>BINDF</h1>
<p>
Values from the BINDF enumeration are returned to the moniker from the client's <a href="if_a2e_695z.htm"><b>IBindStatusCallback::OnStartBinding</b></a> method. These values specify the type of binding the client wants from the moniker.</p>
<pre><code>typedef enum tagBINDF {
    BINDF_ASYNCHRONOUS,
    BINDF_ASYNCSTORAGE,
    BINDF_PULLDATA,
    BINDF_GETNEWESTVERSION,
    BINDF_NOWRITECACHE
} BINDF;
 </code></pre>
<h4>Elements</h4>
<dl>
<dt>
BINDF_ASYNCHRONOUS</dt>
<dd>
The moniker should return immediately from <b>IMoniker::BindToStorage</b> or <b>IMoniker::BindToObject</b>. The actual result of the object bind or the data backing the storage will arrive asynchronously. The client will be notificed through calls to its <a href="if_a2e_0x2d.htm"><b>IBindStatusCallback::OnDataAvailable</b></a> or <a href="if_a2e_2vz9.htm"><b>IBindStatusCallback::OnObjectAvailable</b></a> methods. If the client does not specify this flag, the bind operation will be synchronous, and the client will not receive any data from the bind operation until the <b>IMoniker::BindTo<i>Xxx</i></b> call returns.</dd>
<dt>
BINDF_ASYNCSTORAGE</dt>
<dd>
The client of <b>IMoniker::BindToStorage</b> prefers that the storage and stream objects returned in <b>IBindStatusCallback::OnDataAvailable</b> return E_PENDING when they reference data not yet available through their read methods, rather than blocking until the data becomes available. This flag applies only to BINDF_ASYNCHRONOUS operations. Note that asynchronous stream objects return E_PENDING while data is still downloading and return S_FALSE for the end of the file.</dd>
<dt>
BINDF_PULLDATA</dt>
<dd>
When this flag is specified, the asynchronous moniker will allow the client of <b>IMoniker::BindToStorage</b> to drive the bind operation by pulling the data, rather than having the moniker drive the operation by pushing the data to the client. Specifically, when this flag is specified, new data will only be read/downloaded after the client finishes reading all data that is currently available. This means data will only be downloaded for the client after the client does an <b>IStream::Read</b> operation that blocks or returns E_PENDING. When the client specifies this flag, it must be sure to read all the data it can, even data that is not necessarily available yet. When this flag is not specified, the moniker will continue downloading data and will call the client with <b>IBindStatusCallback::OnDataAvailable</b> whenever new data is available. This flag applies only to BINDF_ASYNCHRONOUS bind operations.</dd>
<dt>
BINDF_GETNEWESTVERSION</dt>
<dd>
The bind operation should retrieve the newest version of the data/object possible. For URL monikers, this flag maps to an HTTP IF MODIFIED SINCE request. Cached data is only used if it is the most recent version.</dd>
<dt>
BINDF_NOWRITECACHE</dt>
<dd>
The bind operation should not store retrieved data in the disk cache.
</dd>
</dl>
<h4>See Also</h4>
<p>
<a href="if_a2e_0x2d.htm"><b>IBindStatusCallback::OnDataAvailable</b></a>, <a href="if_a2e_2vz9.htm"><b>IBindStatusCallback::OnObjectAvailable</b></a>, <a href="if_a2e_695z.htm"><b>IBindStatusCallback::OnStartBinding</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

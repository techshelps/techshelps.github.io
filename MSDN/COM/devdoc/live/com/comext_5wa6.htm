<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Self-Registration</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_com_self_registration"></a>Self-Registration</h3>
<p>
As component software continues to grow as a market, there will be more and more instances where a user obtains a new software component as a single DLL or EXE module, such as downloading a new component from an on-line service or receiving one from a friend on a floppy disk. In these cases, it is not practical to require the user to go through a lengthy installation procedure or setup program. Besides the licensing issues, which are handled through <a href="if_a2e_641e.htm"><b>IClassFactory2</b></a>, an installation procedure typically creates the necessary registry entries for a component to run properly in the COM and OLE context.</p>
<p>
Self-Registration is the standard means through which a server module can package its own registry operations, both registration and unregistration, into the module itself. When used with licensing handled through <b>IClassFactory2</b>, a server can become an entirely self-contained module with no need for external installation programs or .REG files.</p>
<p>
Any self-registering module, DLL or EXE, should first include a string called <b>OleSelfRegister</b> in the <b>StringFileInfo</b> section of its version information resource:</p>
<pre><code>VS_VERSION_INFO VERSIONINFO 
 
 ... 
 
 BEGIN 
   BLOCK "StringFileInfo" 
    BEGIN 
    #ifdef UNICODE 
     BLOCK "040904B0" // Lang=US English, CharSet=Unicode 
    #else 
     BLOCK "040904E4" // Lang=US English, CharSet=Windows Multilingual 
    #endif 
      BEGIN 
       ... 
       VALUE "OLESelfRegister", "\0" 
      END 
 
   ... 
 
   END 
 
 ... 
 
 END 
 </code></pre>
<p>
The existence of this data allows any interested party, such as an application that wishes to integrate this new component, to determine if the server supports self-registration without having to load the DLL or EXE first.</p>
<p>
If the server is packaged in a DLL module, the DLL must export the functions <a href="api2_3cmq.htm"><b>DllRegisterServer</b></a><b> </b>and <a href="api2_4u2a.htm"><b>DllUnregisterServer</b></a>. Any application that wishes to instruct the server to register itself (that is, all its CLSIDs and type library IDs) can obtain a pointer to <b>DllRegisterServer</b> through the Win32 API function <b>GetProcAddress</b>. Within <b>DllRegisterServer</b>, the DLL creates all its necessary registry entries, storing the correct path to the DLL for all <b>InprocServer32</b> or <b>InprocHandler32</b> entries.</p>
<p>
When an application wishes to remove the component from the system, it should unregister that component by calling <b>DllUnregisterServer</b>. Within this call, the server removes exactly those entries it previously created in <b>DllRegisterServer</b>. The server should not blindly remove all entries for its classes because other software may have stored additional entries, such as a <b>TreatAs</b> key.</p>
<p>
If the server is packaged in an EXE module, then the application wishing to register the server launches the EXE server with the command-line argument <b>/RegServer </b>or <b>-RegServer</b> (case-insensitive). If the application wishes to unregister the server, it launches the EXE with the command-line argument <b>/UnregServer </b>or <b>-UnregServer</b>. The self-registering EXE detects these command-line arguments and invokes the same operations as a DLL would within <b>DllRegisterServer </b>and <b>DllUnregisterServer</b>, respectively, registering its module path under <b>LocalServer32</b> instead of <b>InprocServer32</b> or <b>InprocHandler32</b>.</p>
<p>
The server must register the full path to the installation location of the DLL or EXE module for their respective <b>InprocServer32</b>, <b>InprocHandler32</b>, and <b>LocalServer32</b> keys in the registry. The module path is easily obtained through the Win32 API function <b>GetModuleFileName</b>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multiple Inheritance</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_multiple_inheritance"></a>Multiple Inheritance</h1>
<p>
The next example illustrates the use of C++ multiple inheritance. There are two disadvantages to using multiple inheritance with OLE. First, it is not possible to have an interface-level reference count. For more information about reference counting, see Chapter 2, "The Component Object Model." Second, there is the potential for confusion over the interpretation of the class statement. A standard C++ multiple inheritance declaration implies the "is a" relationship where an object inherits implementations. In OLE, however, interfaces are attributes of the object and implementations are not inherited.</p>
<p>
The main advantage to using multiple inheritance lies in its simplicity. Only the prototypes for each of the interface methods are listed; no interface data structures or class definitions are necessary.</p>
<p>
Because both InterfaceA and InterfaceB inherit from <a href="if_r2z_9dwu.htm"><b>IUnknown</b></a>, it is not necessary to list <b>IUnknown</b> explicitly in the class statement. A single implementation of the <b>IUnknown</b> methods (<b>QueryInterface</b>, <b>AddRef</b>, and <b>Release</b>) is sufficient.</p>
<pre><code>class  CObj : public InterfaceA, public InterfaceB 
{ 
private: 
  ULONG          m_ObjRefCount; 
  LPSTORAGE      m_pStg; 
  LPOLEOBJECT    m_pOleObj; 
  CDOC  *        m_pCDoc; 
 
public: 
  CObj(); 
  ~CObj(); 
 
  HRESULT QueryInterface(REFIID riid, LPVOID  * ppvObj) 
  ULONG AddRef(void) { return ++m_ObjRefCount; } 
  ULONG Release(void); 
 
  HRESULT MethodA1(LPVOID  * ppvObj); 
  HRESULT MethodA2(DWORD dwArg); 
 
  HRESULT MethodB1(void); 
  HRESULT MethodB2(DWORD dwArg1, DWORD dwArg2); 
}; 
 </code></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

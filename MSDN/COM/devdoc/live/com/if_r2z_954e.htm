<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IStorage - Compound File Implementation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_istorage_compound_file_implementation"></a>IStorage - Compound File Implementation</h1>
<p>
The compound file implementation of <b>IStorage</b> allows you to create and manage substorages and streams within a storage object residing in a compound file object. To create a compound file object and get an <b>IStorage</b> pointer, call the API function <a href="api4_8hd1.htm"><b>StgCreateDocfile</b></a>. To open an existing compound file object and get its root <b>IStorage</b> pointer, call <a href="api4_0hb9.htm"><b>StgOpenStorage</b></a>. </p>
<h5>When to Use</h5>
<p>
Most applications use this implementation to to create and manage storages and streams.</p>
<h4>Remarks</h4>
<dl>
<dt>
<a href="if_r2z_9wz1.htm"><b>IStorage::CreateStream</b></a> </dt>
<dd>
Creates and opens a stream object with the specified name contained in this storage object. The COM-provided compound file implementation of the <b>IStorage::CreateStream</b> method does not support the following behaviors:
<ul>
<li>
The STGM_DELETEONRELEASE flag is not supported.</li>
<li>
Transacted mode is not supported for stream objects.</li>
<li>
Opening the same stream more than once from the same storage is not supported. The STGM_SHARE_EXCLUSIVE flag must be specified.</li>
</ul>
</dd>
<dt>
<a href="if_r2z_7x65.htm"><b>IStorage::OpenStream</b></a> </dt>
<dd>
Opens an existing stream object within in this storage object using the specified access modes specified in the grfMode parameter. The COM-provided compound file implementation of the <b>IStorage::OpenStream</b> method does not support the following behavior:
<ul>
<li>
The STGM_DELETEONRELEASE flag is not supported.</li>
<li>
Transacted mode is not supported for stream objects.</li>
<li>
Opening the same stream more than once from the same storage is not supported. The STGM_SHARE_EXCLUSIVE flag must be specified.</li>
</ul>
</dd>
<dt>
<a href="if_r2z_8vfp.htm"><b>IStorage::CreateStorage</b></a> </dt>
<dd>
The COM-provided compound file implementation of the <b>IStorage::CreateStorage</b> method does not support the STGM_DELETEONRELEASE flag. Specifying this flag causes the method to return STG_E_INVALIDFLAG.</dd>
<dt>
<a href="if_r2z_182t.htm"><b>IStorage::OpenStorage</b></a> </dt>
<dd>
Opens an existing storage object with the specified name in the specified access mode. The COM-provided compound file implementation of the <b>IStorage::OpenStorage</b> method does not support the following behavior:
<ul>
<li>
The STGM_PRIORITY flag is not supported for non-root storages.</li>
<li>
Opening the same storage object more than once from the same parent storage is not supported. The STGM_SHARE_EXCLUSIVE flag must be specified.</li>
<li>
The STGM_DELETEONRELEASE flag is not supported. If this flag is specified, the function returns STG_E_INVALIDFUNCTION.</li>
</ul>
</dd>
<dt>
<a href="if_r2z_8yr3.htm"><b>IStorage::CopyTo</b></a> </dt>
<dd>
Copies only the substorages and streams of this open storage object into another storage object. The <i>rgiidExclude</i> parameter can be set to IID_IStream to copy only substorages, or to IID_IStorage to copy only streams.</dd>
<dt>
<a href="if_r2z_44q7.htm"><b>IStorage::MoveElementTo</b></a> </dt>
<dd>
Copies or moves a substorage or stream from this storage object to another storage object.</dd>
<dt>
<a href="if_r2z_11h0.htm"><b>IStorage::Commit</b></a> </dt>
<dd>
Ensures that any changes made to a storage object open in transacted mode are reflected in the parent storage; for a root storage, reflects the changes in the actual device, for example, a file on disk. For a root storage object opened in direct mode, this method has no effect except to flush all memory buffers to the disk. For non-root storage objects in direct mode, this method has no effect.
<p>
The COM-provided compound files implementation uses a two phase commit process unless STGC_OVERWRITE is specified in the <i>grfCommitFlags</i> parameter. This two-phase process ensures the robustness of data in case the commit operation fails. First, all new data is written to unused space in the underlying file. If necessary, new space is allocated to the file. Once this step has been successfully completed, a table in the file is updated using a single sector write to indicate that the new data is to be used in place of the old. The old data becomes free space to be used at the next commit. Thus, the old data is available and can be restored in case an error occurs when committing changes. If STGC_OVERWRITE is specified, a single phase commit operation is used.
</dd>
<dt>
<a href="if_r2z_56no.htm"><b>IStorage::Revert</b></a> </dt>
<dd>
Discards all changes that have been made to the storage object since the last commit.</dd>
<dt>
<a href="if_r2z_1rsj.htm"><b>IStorage::EnumElements</b></a> </dt>
<dd>
Creates and retrieves a pointer to an enumerator object that can be used to enumerate the storage and stream objects contained within this storage object.The COM-provided compound file implementation takes a snapshot.</dd>
<dt>
<a href="if_r2z_5lkk.htm"><b>IStorage::DestroyElement</b></a> </dt>
<dd>
Removes the specified element (substorage or stream) from this storage object.</dd>
<dt>
<a href="if_r2z_0xh0.htm"><b>IStorage::RenameElement</b></a> </dt>
<dd>
Renames the specified substorage or stream in this storage object.</dd>
<dt>
<a href="if_r2z_2ss3.htm"><b>IStorage::SetElementTimes</b></a> </dt>
<dd>
Sets the modification, access, and creation times of the specified storage element. The COM-provided compound file implementation maintains modification and change times for internal storage objects. For root storage objects, whatever is supported by the underlying file system (or <a href="if_f2n_9q9f.htm"><b>ILockBytes</b></a>) is supported. The compound file implementation does not maintain any time stamps for internal streams. Unsupported time stamps are reported as zero, enabling the caller to test for support.</dd>
<dt>
<a href="if_r2z_57sj.htm"><b>IStorage::SetClass</b></a> </dt>
<dd>
Assigns the specified CLSID to this storage object.</dd>
<dt>
<a href="if_r2z_1ofn.htm"><b>IStorage::SetStateBits</b></a> </dt>
<dd>
Stores up to 32 bits of state information in this storage object. The state set by this method is for external use only. The COM-provided compound file implementation does not perform any action based on the state.</dd>
<dt>
<a href="if_r2z_3ook.htm"><b>IStorage::Stat</b></a> </dt>
<dd>
Retrieves the <a href="structs_7x7r.htm"><b>STATSTG</b></a> structure for this open storage object.
</dd>
</dl>
<h4>See Also</h4>
<p>
<a href="if_r2z_9b8l.htm"><b>IStorage</b></a>, <a href="if_r2z_4x7x.htm"><b>IStream</b></a>, <a href="api4_8hd1.htm"><b>StgCreateDocfile</b></a>, <a href="api4_0hb9.htm"><b>StgOpenStorage</b></a>, <a href="if_f2n_5xdf.htm"><b>IFillLockBytes</b></a>, <a href="if_f2n_9q9f.htm"><b>ILockBytes</b></a>, <a href="if_r2z_63s5.htm"><b>IRootStorage</b></a> </p>
<p>
<b></b></p>
<p>
<b></b></p>
<p>&nbsp;</p></body>
</HTML>

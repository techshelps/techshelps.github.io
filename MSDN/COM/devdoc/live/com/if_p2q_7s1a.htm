<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPropertySetStorage::Open</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_ipropertysetstorage_open"></a>IPropertySetStorage::Open</h2>
<p>
Opens a property set contained in the property set storage object.</p>
<pre><code><b>HRESULT Open(
  REFFMTID </b><i> fmtid</i><b>,  </b>//The format identifier of the property set to 
                    //be opened
<b>  DWORD</b><i> grfMode</i><b>,    </b>//Storage mode in which property set is to be 
                    //opened
<b>  IPropertyStorage**</b><i> ppPropStg</i>
<i>                    </i>//Address of output variable that receives the 
                    //IPropertyStorage interface pointer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>fmtid</i></dt>
<dd>
[in] Format identifier of the property set to be opened.</dd>
<dt>
<i>grfMode</i></dt>
<dd>
[in] Access mode in which the newly created property set is to be opened. These flags are taken from the STGM enumeration. Flags that may be used and their meanings in the context of this method are described in the Remarks.</dd>
<dt>
<i>ppPropStg</i></dt>
<dd>
[out] Address of <b>IPropertyStorage</b>* pointer variable that receives the interface pointer to the requested property storage sub-object.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return value E_UNEXPECTED, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
Success.</dd>
<dt>
STG_E_FILENOTFOUND</dt>
<dd>
A property set of the indicated name does not exist.</dd>
<dt>
STG_E_ACCESSDENIED</dt>
<dd>
The requested access to the property storage object has been denied, or the property set is corrupted.</dd>
<dt>
STG_E_INSUFFICIENTMEMORY</dt>
<dd>
There is not sufficient memory to perform this operation.</dd>
<dt>
STG_E_INVALIDPARAMETER</dt>
<dd>
A parameter is invalid.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The mode in which the property set is to be opened is specified in the parameter <i>grfMode</i>. These flags are taken from the <b>STGM</b> enumeration, but, for this method, legal values and their meanings are as follows (only certain combinations of these flag values are legal).</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=42%>Value</th>
<th align=left width=58%>Meaning</th>
</tr>
<tr valign=top>
<td width=42%>STGM_DIRECT</td>
<td width=58%>Open the property set without an additional level of transaction nesting. This is the default (the behavior if neither STGM_DIRECT nor STGM_TRANSACTED is specified).</td>
</tr>
<tr valign=top>
<td width=42%>STGM_TRANSACTED</td>
<td width=58%>Open the property set with an additional level of transaction nesting (beyond the transaction, if any, on this property set storage object). Transacted mode is available only on non-simple property sets, because they use an <b>IStorage</b> with a contents stream. Changes in the property set must be committed with a call to <b>IPropertyStorage::Commit</b> before they are visible to the transaction on this property set storage.</td>
</tr>
<tr valign=top>
<td width=42%>STGM_READ</td>
<td width=58%>Open the property set with read access. Read permission is required on the property set storage.</td>
</tr>
<tr valign=top>
<td width=42%>STGM_WRITE</td>
<td width=58%>Open the property set with write access. Write permission is not required on the IPropertySetStorage; however, such write permission is required for changes in the storage to be committed.</td>
</tr>
<tr valign=top>
<td width=42%>STGM_READWRITE</td>
<td width=58%>Open the property set with read-write access. Note that this flag is not the binary OR of the values STGM_READ and STGM_WRITE.</td>
</tr>
<tr valign=top>
<td width=42%>STGM_SHARE_DENY_NONE</td>
<td width=58%>Subsequent openings of the property set are not denied read or write access. Not available in compound file implementation.</td>
</tr>
<tr valign=top>
<td width=42%>STGM_SHARE_DENY_READ</td>
<td width=58%>Subsequent openings of the property set in are denied read access. Not available in compound file implementation.</td>
</tr>
<tr valign=top>
<td width=42%>STGM_SHARE_DENY_WRITE</td>
<td width=58%>Subsequent openings of the property set are denied write access. This value is typically used to prevent making unnecessary copies of an object opened by multiple users. If this value is not specified, a snapshot is made, whether there are subsequent openings or not. Thus, you can improve performance by specifying this value. Not available in compound file implementation.</td>
</tr>
<tr valign=top>
<td width=42%>STGM_SHARE_EXCLUSIVE</td>
<td width=58%>The combination of STGM_SHARE_DENY_READ and STGM_SHARE_DENY_WRITE.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<p>&nbsp;</p></body>
</HTML>

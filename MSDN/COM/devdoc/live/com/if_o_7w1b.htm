<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOleUndoUnit::Do</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_ioleundounit_do"></a>IOleUndoUnit::Do</h2>
<p>
Instructs the undo unit to carry out its action. Note that if it contains child undo units, it must call their <b>Do</b> methods as well.</p>
<pre><code><b>HRESULT Do(
  IOleUndoManager*</b><i> pUndoManager</i>   //Pointer to the undo manager
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pUndoManager</i></dt>
<dd>
[in] Pointer to the undo manager.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The undo unit successfully carried out its action.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The undo unit is responsible for carrying out its action. Performing its own undo action results in another action that can potentially be reversed. However, if <i>pUndoManager</i> is NULL, the undo unit should perform its undo action but should not attempt to put anything on the redo or undo stack.</p>
<p>
If <i>pUndoManager</i> is not NULL, then the unit is required to put a corresponding unit on the redo or undo stack. As a result, this method either moves itself to the redo or undo stack, or it creates a new undo unit and adds it to the appropriate stack. After creating a new undo unit, this undo unit calls <b>IOleUndoManager::Open</b> or <b>IOleUndoManager::Add</b>. The undo manager will put the new undo unit on the undo or redo stack depending on its current state.</p>
<p>
A parent unit must pass to its children the same undo manager, possibly NULL, that was given to the parent. It is permissible, but not necessary, when <i>pUndoManager</i> is NULL to open a parent unit on the redo or undo stack as long as it is not committed. A blocked parent unit ensures that nothing is added to the stack by child units.</p>
<p>
If this undo unit is a parent unit, it should put itself on the redo or undo stack before calling the <b>Do</b> on its children.</p>
<p>
After calling this method, the undo manager must release the undo unit.</p>
<h5>Note to Implementers</h5>
<p>
See the <b>IOleUndoManager</b> interface for error handling strategies for undo units. The error handling strategy affects the implementation of this method, particularly for parent units.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later. New for OC96.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later. New for OC96.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ocidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_o_86sk.htm"><b>IOleUndoManager::Add</b></a>, <a href="if_o_3smm.htm"><b>IOleUndoManager::Open</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

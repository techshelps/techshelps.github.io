<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IUnknown::QueryInterface</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_iunknown_queryinterface"></a>IUnknown::QueryInterface</h2>
<p>
Returns a pointer to a specified interface on an object to which a client currently holds an interface pointer. This function must call <b>IUnknown::AddRef </b>on the pointer it returns. </p>
<pre><code><b>HRESULT QueryInterface(
  REFIID</b><i> iid</i><b>,        </b>//Identifier of the requested interface
<b>  void **</b><i> ppvObject  </i>//Address of output variable that receives the 
                     //interface pointer requested in <i>iid</i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>iid</i></dt>
<dd>
[in] Identifier of the interface being requested.</dd>
<dt>
<i>ppvObject</i></dt>
<dd>
[out] Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppvObject</i> contains the requested interface pointer to the object. If the object does not support the interface specified in <i>iid</i>, *<i>ppvObject</i> is set to NULL.
</dd>
</dl>
<h4>Return Value</h4>
<p>
S_OK if the interface is supported, E_NOINTERFACE if not.</p>
<h4>Remarks</h4>
<p>
The <b>QueryInterface</b> method gives a client access to other interfaces on an object.</p>
<p>
For any one object, a specific query for the <a href="if_r2z_9dwu.htm"><b>IUnknown</b></a> interface on any of the object's interfaces must always return the same pointer value. This allows a client to determine whether two pointers point to the same component by calling <b>QueryInterface</b> on both and comparing the results. It is specifically not the case that queries for interfaces (even the same interface through the same pointer) must return the same pointer value.</p>
<p>
There are four requirements for implementations of <b>QueryInterface</b> (In these cases, "must succeed" means "must succeed barring catastrophic failure."):
<ul>
<li>
The set of interfaces accessible on an object through <b>IUnknown::QueryInterface</b> must be static, not dynamic. This means that if a call to <b>QueryInterface</b> for a pointer to a specified interface succeeds the first time, it must succeed again, and if it fails the first time, it must fail on all subsequent queries.</li>
<li>
It must be symmetric — if a client holds a pointer to an interface on an object, and queries for that interface, the call must succeed.</li>
<li>
It must be reflexive — if a client holding a pointer to one interface queries successfully for another, a query through the obtained pointer for the first interface must succeed.</li>
<li>
It must be transitive — if a client holding a pointer to one interface queries successfully for a second, and through that pointer queries successfully for a third interface, a query for the first interface through the pointer for the third interface must succeed.</li>
</ul>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in unknwn.h.</p>
<p>&nbsp;</p></body>
</HTML>

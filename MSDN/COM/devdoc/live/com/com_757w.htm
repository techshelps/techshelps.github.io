<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Component Object Model</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_the_component_object_model"></a>The Component Object Model</h1>
<p>
The Component Object Model (COM) is a platform-independent, distributed, object-oriented, system for creating binary software components that can interact. COM is the foundation technology for Microsoft's OLE (compound documents), ActiveX (internet enabled components), as well as others.</p>
<p>
To understand COM (and therefore all COM-based technologies), it is crucial to bear in mind that it is not an object-oriented language, but a standard. Nor does COM specify how an application should be structured. Language, structure, and implementation details are left to the application programmer. COM does specify an object model and programming requirements that enable COM objects (also called COM components, or sometimes simply <i>objects</i>) to interact with other objects. These objects can be within a single process, in other processes, even on remote machines. They can have been written in other languages, and may be structurally quite dissimilar. That is why COM is referred to as a binary standard — it is a standard that applies after a program has been translated to binary machine code.</p>
<p>
The only language requirement for COM is that code is generated in a language that can create structures of pointers and, either explicitly or implicitly, call functions through pointers. Object-oriented languages such as C++ and Smalltalk provide programming mechanisms that simplify the implementation of COM objects, but languages such as C, Pascal, Ada, Java, and even BASIC programming environments can create and use COM objects. </p>
<p>
COM defines the essential nature of a COM object. In general, a software object is made up of a set of data and the functions that manipulate the data. A COM object is one in which access to an object's data is achieved exclusively through one or more sets of related functions. These function sets are called <i>interfaces</i>, and the functions of an interface are called <i>methods.</i> Further, COM requires that the only way to gain access to the methods of an interface is through a pointer to the interface. </p>
<p>
Besides specifying the basic binary object standard, COM defines certain basic interfaces that provide functions common to all COM-based technologies. It also provides a small number of API functions that all components require. COM has now expanded its scope to define how objects work together over a distributed environment, and added security features to ensure system and component integrity.</p>
<p>
This chapter describes basic COM issues relating mainly to designing COM objects:
<ul>
<li>
<a href="com_0alv.htm"><b>COM Objects and Interfaces</b></a> </li>
<li>
<a href="com_7tim.htm"><b>Using and Implementing IUnknown</b></a> </li>
<li>
<a href="com_0pyr.htm"><b>Reusing Objects</b></a> </li>
<li>
<a href="com_1fuh.htm"><b>The COM Library</b></a> </li>
<li>
<a href="com_8cz2.htm"><b>Managing Memory Allocation</b></a> </li>
<li>
<a href="com_98mr.htm"><b>Processes and Threads</b></a> </li>
</ul>
<p>
For other COM topics, see <a href="comext_8p2r.htm"><b>COM Clients and Servers</b></a>.</p>
<p>&nbsp;</p></body>
</HTML>

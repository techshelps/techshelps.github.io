<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMalloc::Realloc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_imalloc_realloc"></a>IMalloc::Realloc</h2>
<p>
Changes the size of a previously allocated memory block.</p>
<pre><code><b>void *Realloc(
  void</b><i> *pv</i><b>, </b>//Pointer to memory block to be reallocated
<b>  ULONG</b><i> cb  </i>//Size of the memory block in bytes
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pv</i></dt>
<dd>
[in] Pointer to the memory block to be reallocated. The pointer can have a NULL value, as discussed in the following Remarks section.</dd>
<dt>
<i>cb</i></dt>
<dd>
[in] Size of the memory block (in bytes) to be reallocated. It can be zero, as discussed in the following remarks.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
Reallocated memory block</dt>
<dd>
Memory block successfully reallocated.</dd>
<dt>
NULL</dt>
<dd>
Insufficient memory or <i>cb</i> is zero and <i>pv</i> is not NULL.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>IMalloc::Realloc</b> reallocates a block of memory, but does guarantee that the contents of the returned memory block are initialized. Therefore, the caller is responsible for intializing it in code, subsequent to the reallocation. The allocated block may be larger than <i>cb</i> bytes because of the space required for alignment and for maintenance information.</p>
<p>
The <i>pv</i> argument points to the beginning of the memory block. If <i>pv</i> is NULL, <b>IMalloc::Realloc</b> allocates a new memory block in the same way that <a href="if_f2n_3twj.htm"><b>IMalloc::Alloc</b></a> does. If <i>pv</i> is not NULL, it should be a pointer returned by a prior call to <b>IMalloc::Alloc</b>.</p>
<p>
The <i>cb</i> argument specifies the size (in bytes) of the new block. The contents of the block are unchanged up to the shorter of the new and old sizes, although the new block can be in a different location. Because the new block can be in a different memory location, the pointer returned by <b>IMalloc::Realloc</b> is not guaranteed to be the pointer passed through the <i>pv</i> argument. If <i>pv</i> is not NULL and <i>cb</i> is zero, then the memory pointed to by <i>pv</i> is freed.</p>
<p>
<b>IMalloc::Realloc</b> returns a void pointer to the reallocated (and possibly moved) memory block. The return value is NULL if the size is zero and the buffer argument is not NULL, or if there is not enough memory available to expand the block to the given size. In the first case, the original block is freed; in the second, the original block is unchanged.</p>
<p>
The storage space pointed to by the return value is guaranteed to be suitably aligned for storage of any type of object. To get a pointer to a type other than <b>void</b>, use a type cast on the return value.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_f2n_3twj.htm"><b>IMalloc::Alloc</b></a>, <a href="if_f2n_1smd.htm"><b>IMalloc::Free</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

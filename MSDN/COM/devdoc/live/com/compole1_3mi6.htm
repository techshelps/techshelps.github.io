<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accommodating OLE 1 Versions of the Object Application</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_accommodating_ole_1_versions_of_the_object_application"></a>Accommodating OLE 1 Versions of the Object Application</h1>
<p>
When the OLE 1 version of an object application is superseded by an OLE 2 version and the OLE 2 version is to be installed in the user's system, such as when upgrading, two situations can arise:
<ul>
<li>
An OLE 1 version of the application is present on the user's system and the installation process overwrites the OLE 1 executable with the OLE 2 version.</li>
<li>
An OLE 1 version of the application is present on the user's system and the user chooses not to overwrite it with the OLE 2 version.</li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;Even if the OLE 1 object application is not on the user's system, the install/setup program for the OLE 2 object application should register the application as capable of servicing its OLE 1 objects. To do this, follow the guidelines presented under "When the OLE 1 Version Is Overwritten," and add the following entry to the <i>CLSID root key</i>:</p>
<p>
&lt;<b>OLE 1 class name</b>&gt;/<b>CLSID = </b>&lt;<i>CLSID of OLE 1 application</i>&gt;</p>
<p>&nbsp;</p></body>
</HTML>

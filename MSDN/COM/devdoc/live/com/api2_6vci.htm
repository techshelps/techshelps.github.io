<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateAntiMoniker</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_createantimoniker"></a>CreateAntiMoniker</h1>
<p>
Creates and supplies a new anti-moniker.</p>
<pre><code><b>WINOLEAPI CreateAntiMoniker(
  LPMONIKER FAR</b><i> *ppmk  </i>//Address of output variable that receives 
                       // the IMoniker interface pointer
<b>);</b>
 </code></pre>
<h4>Parameter</h4>
<dl>
<dt>
<i>ppmk</i></dt>
<dd>
[out] Address of <b>IMoniker</b>* pointer variable that receives the interface pointer to the new anti-moniker. When successful, the function has called <a href="if_r2z_3rja.htm"><b>IUnknown::AddRef</b></a> on the anti-moniker and the caller is responsible for calling <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a>. When an error occurs, the anti-moniker pointer is NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return value E_OUTOFMEMORY, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
The anti-moniker has been created successfully.
</dd>
</dl>
<h4>Remarks</h4>
<p>
You would call this function only if you are writing your own moniker class (implementing the <a href="if_f2n_8otu.htm"><b>IMoniker</b></a> interface). If you are writing a new moniker class that has no internal structure, you can use <b>CreateAntiMoniker</b> in your implementation of the <a href="if_f2n_2zvp.htm"><b>IMoniker::Inverse</b></a> method, and then check for an anti-moniker in your implementation of <a href="if_f2n_8cx4.htm"><b>IMoniker::ComposeWith</b></a>. </p>
<p>
Like the ".." directory in MS-DOS file systems, which acts as the inverse to any directory name just preceding it in a path, an anti-moniker acts as the inverse of a simple moniker that precedes it in a composite moniker. An anti-moniker is used as the inverse of simple monikers with no internal structure. For example, the system-provided implementations of file monikers, item monikers, and pointer monikers all use anti-monikers as their inverse; consequently, an anti-moniker composed to the right of one of these monikers composes to nothing. </p>
<p>
A moniker client (an object that is using a moniker to bind to another object) typically does not know the class of a given moniker, so the client cannot be sure that an anti-moniker is the inverse. Therefore, to get the inverse of a moniker, you would call <b>IMoniker::Inverse</b> rather than <b>CreateAntiMoniker</b>. </p>
<p>
To remove the last piece of a composite moniker, you would do the following:
<ol>
<li>
Call <a href="if_f2n_44od.htm"><b>IMoniker::Enum</b></a> on the composite, specifying FALSE as the first parameter. This creates an enumerator that returns the component monikers in reverse order. </li>
<li>
Use the enumerator to retrieve the last piece of the composite.</li>
<li>
Call <b>IMoniker::Inverse</b> on that moniker. The moniker returned by <b>IMoniker::Inverse</b> will remove the last piece of the composite.</li>
</ol>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="if_f2n_2zvp.htm"><b>IMoniker::Inverse</b></a>,<b> <a href="if_f2n_8cx4.htm">IMoniker::ComposeWith</a></b>,<b> <a href="if_f2n_32um.htm">IMoniker - Anti-Moniker Implementation</a></b> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

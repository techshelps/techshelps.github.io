<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing and Activating a Handler with Extra Data Supplied by Server</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_com_implementing_and_activating_a_handler_with_extra_data_supplied_by_server"></a>Implementing and Activating a Handler with Extra Data Supplied by Server</h3>
<p>
If the server wants to include some extra data in the packet for the handler to use, the server must implement both the <a href="if_f2n_6sh8.htm"><b>IMarshal</b></a> and <a href="if_r2z_99tb.htm"><b>IStdMarshalInfo</b></a> interfaces. The server must aggregate the standard marshaler and must delegate the first part of the marshaling to the aggregated standard marshaler, including <a href="if_f2n_1mib.htm"><b>IMarshal::GetUnmarshalClass</b></a>, and must add its own data size to the size returned by the standard marshaler's <a href="if_f2n_2fjs.htm"><b>IMarshal::GetMarshalSizeMax</b></a>. The standard marshaler calls <a href="if_r2z_3y9e.htm"><b>IStdMarshalInfo::GetClassForHandler</b></a> to get the CLSID of the handler to be created. After the standard marshaler has done it's marshaling, the server then writes it's own extra data into the stream. On the server side, the resulting structures with extra data in the stream, look like this:</p>
<p>
<img src="images/extrdata.gif" border=0></p>
<p>
<b>Server Side Structures, with Extra Data in Stream</b></p>
<p>
This allows the call from COM to <b>CoUnmarshalInterface</b> on the client side the ability to skip over any unread data and leave the stream in the appropriate position following all the marshaled interface data if the handler can not be created.</p>
<p>
As in the case where there is no extra server data in the stream, the client-side COM call to <b>CoUnmarshalInterface</b> will create the identity and handler. The handler must implement <b>IMarshal</b> and must delegate the <b>IMarshal</b> calls to the aggregated standard marshaler first, then marshal or unmarshal any extra data that the server provided. The handler's UnmarshalInterface will be called for every unmarshal, regardless of whether it has unmarshaled the interface before or not. In this case, the server does not call <b>CoGetStdMarshalEx</b>, but the handler must. The resulting client-side structure</p>
<p>
<img src="images/csextrad.gif" border=0></p>
<p>
<b>Client Side Structures with Extra Data in Stream. Solid blue circles are exposed interfaces.</b></p>
<p>&nbsp;</p></body>
</HTML>

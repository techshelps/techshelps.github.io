<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Process-wide Security with CoInitializeSecurity</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_com_setting_process_wide_security_with_coinitializesecurity"></a>Setting Process-wide Security with CoInitializeSecurity</h3>
<p>
The <a href="api1_8ayh.htm">CoInitializeSecurity</a> function is a powerful function that allows you to set the default security for an application programmatically. This section describes some of its standard uses and some details on its capabilities. </p>
<p>
There are several reasons that you might want to use <b>CoInitializeSecurity </b>to set process-wide security within your program. Although you can set the authentication level and the access permissions in the registry, for example, the default impersonation level for the machine might not be the one you want for your process. The only way to change this default for your process is to call <b>CoInitializeSecurity</b>. </p>
<p>
Another common reason for setting process-wide security programmatically is that you would like to set default security for the entire process, but you have one or more objects within that process that expose interfaces with special security requirements. In this case, you can call <b>CoInitializeSecurity</b> to set security for the process, allowing COM to handle most of the security checks, and you can call other methods to set security for the objects with special security needs. Calling these methods and functions are described in <a href="comext_3bjg.htm"><b>Setting Security at the Interface Proxy Level</b></a>.</p>
<p>
If your application has very specialized security requirements, such as allowing certain groups access to different objects depending upon the time of day, you might want to handle all of your security programmatically, ensuring that COM does no automatic checking for you at all. To do this, you must call <b>CoInitializeSecurity</b>set the <i>dwAuthnLevel</i> parameter to none and the <i>pVoid</i> parameter to NULL. You might also need to register your security package in the <i>pAuthnSvc</i> parameter. Then you can handle all of your own security programmatically through calls to the proxy-level interface and functions described in <a href="comext_3bjg.htm"><b>Setting Security at the Interface Proxy Level</b></a>.</p>
<p>
<b>CoInitializeSecurity</b> offers a rich set of capabilities. If you call <b>CoInitializeSecurity</b>, the registry values are ignored, and the security initialization values you pass in to the call are used instead. The first parameter, <i>pVoid</i>, can point to three different types of values, depending on the result you want. In most cases, you will use Win32 functions to create a security descriptor to give to <b>CoInitializeSecurity</b>. </p>
<p>
You might, instead, prefer to pass in a pointer to an access control object that COM will use to check access. This technique is supported in Windows NT 4.0 SP2 and all later versions. Windows 95 does not support security descriptors, so if you want your application to run on both Windows NT and Windows 95, you should use an <b>IAccessControl</b> object instead of a security descriptor. The <a href="if_a2e_912k.htm"><b>IAccessControl</b></a> interface is a simple interface for defining an access control list, and COM provides a system implementation of this interface. To tell <a href="api1_8ayh.htm"><b>CoInitializeSecurity</b></a> that you are passing an <b>IAccessControl</b> object to <i>pVoid</i>, you must pass the EOAC_ACCESS_CONTROL value to the <i>dwCapabilities</i> parameter. Since <b>CoInitializeSecurity</b> caches the results of access checks, the access control list must not be changed after calling <b>CoInitializeSecurity</b>. For more information about the system-supplied implementation of <b>IAccessControl</b>, see <a href="if_a2e_912k.htm"><b>IAccessControl</b></a>. </p>
<p>
The third type of value you can pass to the <i>pVoid</i> parameter is a pointer to a GUID, which is the AppID of your application. You must also specify EOAC_APPID in the <i>pCapabilities</i> parameter, so the function knows what value to expect in <i>pVoid</i>. If <i>pVoid</i> does point to an AppID, <b>CoInitializeSecurity</b> uses only the registry for authentication values and ignores all other parameters to <b>CoInitializeSecurity</b>. For more information, see <a href="api1_8ayh.htm"><b>CoInitializeSecurity</b></a>.</p>
<p>&nbsp;</p></body>
</HTML>

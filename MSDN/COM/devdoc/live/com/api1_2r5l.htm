<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoRegisterMallocSpy</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_coregistermallocspy"></a>CoRegisterMallocSpy</h1>
<p>
Registers an implementation of the <a href="if_f2n_60e1.htm"><b>IMallocSpy</b></a> interface in OLE, thereafter requiring OLE to call its wrapper methods around every call to the corresponding <a href="if_f2n_5h5v.htm"><b>IMalloc</b></a> method. <b>IMallocSpy</b> is defined in OLE to allow developers to debug memory allocations.</p>
<pre><code><b>HRESULT CoRegisterMallocSpy(
  LPMALLOCSPY</b><i> pMallocSpy  </i>//Pointer to the interface
<b>);</b>
 </code></pre>
<h4>Parameter</h4>
<dl>
<dt>
<i>pMallocSpy</i></dt>
<dd>
[in] Pointer to an instance of the <a href="if_f2n_60e1.htm"><b>IMallocSpy</b></a> implementation.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return value E_INVALIDARG, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
The <b>IMallocSpy</b> object is successfully registered.</dd>
<dt>
CO_E_OBJISREG</dt>
<dd>
There is already a registered spy.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>CoRegisterMallocSpy</b> function registers the <a href="if_f2n_60e1.htm"><b>IMallocSpy</b></a> object, which is used to debug calls to <a href="if_f2n_5h5v.htm"><b>IMalloc</b></a> methods. The function calls <b>QueryInterface</b> on the pointer <i>pMallocSpy</i> for the interface<b> IID_IMallocSpy</b>. This is to ensure that <i>pMallocSpy</i> really points to an implementation of <b>IMallocSpy</b>. By the rules of OLE, it is expected that a successful call to <b>QueryInterface</b> has added a reference (through the <b>AddRef </b>method) to the <b>IMallocSpy</b> object. That is, <b>CoRegisterMallocSpy</b> does not directly call <b>AddRef</b> on <i>pMallocSpy</i>, but fully expects that the <b>QueryInterface</b> call will.</p>
<p>
When the <b>IMallocSpy</b> object is registered, whenever there is a call to one of the <b>IMalloc</b> methods, OLE first calls the corresponding <b>IMallocSpy</b> pre-method. Then, after executing the <b>IMalloc</b> method, OLE calls the corresponding <b>IMallocSpy</b> post-method. For example, whenever there is a call to <b>IMalloc::Alloc</b>, from whatever source, OLE calls <b>IMallocSpy::PreAlloc</b>, calls <b>IMalloc::Alloc</b>, and after that allocation is completed, calls <b>IMallocSpy::PostAlloc</b>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="if_f2n_60e1.htm"><b>IMallocSpy</b></a>, <a href="api1_2ant.htm"><b>CoRevokeMallocSpy</b></a>, <a href="api1_2ant.htm"><b>CoGetMalloc</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

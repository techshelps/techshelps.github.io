<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The OLE Memory Allocator</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_the_ole_memory_allocator"></a>The OLE Memory Allocator</h2>
<p>
The COM Library provides an implementation of a memory allocator that is thread-safe (cannot cause problems in multi-threaded situations). Whenever ownership of an allocated chunk of memory is passed through a COM interface or between a client and the COM library, you must use this allocator to allocate the memory. Allocation internal to an object can use any allocation scheme desired, but the COM memory allocator is a handy, efficient, and thread-safe allocator.</p>
<p>
A call to the API function <a href="api1_2qlf.htm"><b>CoGetMalloc</b></a> provides a pointer to the OLE allocator, which is an implementation of the <a href="if_f2n_5h5v.htm"><b>IMalloc</b></a> interface. Rather than doing this, it is more efficient to call the helper functions <a href="api1_9bj7.htm"><b>CoTaskMemAlloc</b></a>, <a href="api1_3lpf.htm"><b>CoTaskMemRealloc</b></a>, and <a href="api1_63l1.htm"><b>CoTaskMemFree</b></a>, which wrap getting a pointer to the task memory allocator, calling the corresponding <b>IMalloc</b> method, and then releasing the pointer to the allocator.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoDisconnectObject</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_codisconnectobject"></a>CoDisconnectObject</h1>
<p>
Disconnects all remote process connections being maintained on behalf of all the interface pointers that point to a specified object. Only the process that actually manages the object should call <b>CoDisconnectObject</b>. </p>
<pre><code><b>STDAPI CoDisconnectObject(
  IUnknown *</b><i> pUnk</i><b>,  </b>//Pointer to the interface on the object
<b>  DWORD</b><i> dwReserved  </i>//Reserved for future use
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pUnk</i></dt>
<dd>
[in] Pointer to any <a href="if_r2z_9dwu.htm"><b>IUnknown</b></a>-derived interface on the object to be disconnected.</dd>
<dt>
<i>dwReserved</i></dt>
<dd>
[in] Reserved for future use; must be zero. 
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
All connections to remote processes were successfully deleted.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>CoDisconnectObject</b> function enables a server to correctly disconnect all external clients to the object specified by <i>pUnk.</i></p>
<p>
The <b>CoDisconnectObject</b> function performs the following tasks:
<ol>
<li>
Checks to see if the object to be disconnected implements the <b>IMarshal</b> interface. If so, it gets the pointer to that interface; if not, it gets a pointer to the standard marshaler's (<i>i.e.,</i> COM's) <b>IMarshal</b> implementation.</li>
<li>
Using whichever <b>IMarshal</b> interface pointer it has acquired, the function then calls <a href="if_f2n_59h0.htm"><b>IMarshal::DisconnectObject</b></a> to disconnect all out-of-process clients.</li>
</ol>
<p>
An object's client does not call <b>CoDisconnectObject</b> to disconnect itself from the server (clients should use <a href="if_r2z_59np.htm"><b>IUnknown::Release</b></a> for this purpose). Rather, an OLE server calls <b>CoDisconnectObject</b> to forcibly disconnect an object's clients, usually in response to a user closing the server application.</p>
<p>
Similarly, an OLE container that supports external links to its embedded objects can call <b>CoDisconnectObject</b> to destroy those links. Again, this call is normally made in response to a user closing the application. The container should first call <b>IOleObject::Close</b> for all its OLE objects, each of which should send <b>IAdviseSink::OnClose</b> notifications to their various clients. Then the container can safely call <b>CoDisconnectObject</b> to close any existing connections.</p>
<p>
<b>CoDisconnectObject</b> does not necessarily disconnect out-of-process clients immediately. If any marshaled calls are pending on the server object, <b>CoDisconnectObject</b> disconnects the object only when those calls have returned. In the meantime, <b>CoDisconnectObject</b> sets a flag that causes any new marshaled calls to return CO_E_OBJECTNOTCONNECTED.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="if_o_6izq.htm"><b>IOleObject::Close</b></a>, <a href="if_f2n_59h0.htm"><b>IMarshal::DisconnectObject</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

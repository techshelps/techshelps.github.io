<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoMarshalInterThreadInterfaceInStream</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_comarshalinterthreadinterfaceinstream"></a>CoMarshalInterThreadInterfaceInStream</h1>
<p>
Marshals an interface pointer from one thread to another thread in the same process.</p>
<pre><code><b>HRESULT CoMarshalInterThreadInterfaceInStream(
  REFIID</b><i> riid</i><b>,     </b>//Reference to the identifier of the interface
<b>  LPUNKNOWN</b><i> pUnk</i><b>,  </b>//Pointer to the interface to be marshaled
<b>  LPSTREAM *</b><i> ppStm </i>//Address of output variable that receives the 
                   // IStream interface pointer for the marshaled 
                   // interface
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>riid</i></dt>
<dd>
[in] Reference to the identifier of the interface to be marshaled.</dd>
<dt>
<i>pUnk</i></dt>
<dd>
[in] Pointer to the interface to be marshaled, which must be derived from <a href="if_r2z_9dwu.htm"><b>IUnknown</b></a>; can be NULL.</dd>
<dt>
<i>ppStm</i></dt>
<dd>
[out] Address of <b>IStream</b>* pointer variable that receives the interface pointer to the stream that contains the marshaled interface.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return value E_OUTOFMEMORY, as well as the following:
<dl>
<dt>
S_OK</dt>
<dd>
The interface was marshaled successfully.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>CoMarshalInterThreadInterfaceInStream</b> function enables an object to easily and reliably marshal an interface pointer to another thread in the same process. The stream returned in <i>ppStm</i> is guaranteed to behave correctly when a client running in the receiving thread attempts to unmarshal the pointer. The client can then call the <b>CoGetInterfaceAndReleaseStream</b> to unmarshal the interface pointer and release the stream object.</p>
<p>
The <b>CoMarshalInterThreadInterfaceInStream</b> function performs the following tasks:
<ol>
<li>
Creates a stream object.</li>
<li>
Passes the stream object's <b>IStream</b> pointer to <b>CoMarshalInterface</b>.</li>
<li>
Returns the <b>IStream</b> pointer to the caller.</li>
</ol>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objbase.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api1_1rjh.htm"><b>CoGetInterfaceAndReleaseStream</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

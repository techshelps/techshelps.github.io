<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOleCommandTarget::Exec</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_iolecommandtarget_exec"></a>IOleCommandTarget::Exec</h2>
<p>
Executes a specified command or displays help for a command.</p>
<pre><code><b>HRESULT Exec(
  const GUID</b><i> *pguidCmdGroup</i><b>,  </b>// Pointer to command group
<b>  DWORD</b><i> nCmdID</i><b>,               </b>// Identifier of command to execute
<b>  DWORD</b><i> nCmdExecOpt</i><b>,          </b>// Options for executing the command
<b>  VARIANTARG</b><i> *pvaIn</i><b>,          </b>// Pointer to input arguments
<b>  VARIANTARG</b><i> *pvaOut          </i>// Pointer to command output
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pguidCmdGroup</i></dt>
<dd>
[unique][in] Pointer to unique identifier of the command group; can be NULL to specify the standard group. </dd>
<dt>
<i>nCmdID</i></dt>
<dd>
[in] The command to be executed. This command must belong to the group specified with <i>pguidCmdGroup.</i></dd>
<dt>
<i>nCmdExecOpt</i></dt>
<dd>
[in] Values taken from the <a href="enums_4a9g.htm"><b>OLECMDEXECOPT</b></a> enumeration, which describe how the object should execute the command.</dd>
<dt>
<i>pvaIn</i></dt>
<dd>
[unique][in] Pointer to a VARIANTARG structure containing input arguments. Can be NULL.</dd>
<dt>
<i>pvaOut</i></dt>
<dd>
[unique][in,out] Pointer to a VARIANTARG structure to receive command output. Can be NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This method supports the standard return values E_FAIL and E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The command was executed successfully.</dd>
<dt>
OLECMDERR_E_UNKNOWNGROUP</dt>
<dd>
The <i>pguidCmdGroup</i> parameter is not NULL but does not specify a recognized command group.</dd>
<dt>
OLECMDERR_E_NOTSUPPORTED</dt>
<dd>
The <i>nCmdID</i> parameter is not a valid command in the group identified by <i>pguidCmdGroup.</i></dd>
<dt>
OLECMDERR_DISABLED</dt>
<dd>
The command identified by <i>nCmdID</i> is currently disabled and cannot be executed.</dd>
<dt>
OLECMDERR_NOHELP</dt>
<dd>
The caller has asked for help on the command identified by <i>nCmdID,</i> but no help is available.</dd>
<dt>
OLECMDERR_CANCELED</dt>
<dd>
The user canceled the execution of the command.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The list of input and output arguments of a command and how they are packaged is unique to each command. Such information should be documented with the specification of the command group. (See the description of OLECMDID_ZOOM in the <a href="enums_94is.htm"><b>OLECMDID</b></a> enumeration.) In the absence of any specific information the command is assumed to take no arguments and have no return value. </p>
<h5>Notes to Callers</h5>
<p>
The <i>pguidCmdGroup</i> and <i>nCmdID</i> parameters together uniquely identify the command to invoke. The <i>nCmdExecOpt</i> parameter specifies the exact action to be taken. (See the <a href="enums_4a9g.htm"><b>OLECMDEXECOPT</b></a> enumeration for more details.)</p>
<p>
Most commands neither take arguments nor return values. For such commands, the caller can pass NULL in <i>pvaIn</i> and <i>pvaOut</i>. For commands that expect one or more input values, the caller can declare and initialize a VARIANTARG variable and pass a pointer to that variable in <i>pvaIn. </i>If the input to the command is a single value, the argument can be stored directly in the VARIANTARG structure and passed to the function. If the command expects multiple arguments, those arguments must be packaged appropriately within the VARIANTARG, using one of the supported types (such as <b>IDispatch </b>or SAFEARRAY).</p>
<p>
If a command returns one or more arguments, the caller is expected to declare a VARIANTARG, initialize it to VT_EMPTY, and pass its address in <i>pvaOut. </i>If the command returns a single value, then the object can store that value directly in <i>pvaOut. </i>If the command has multiple output values, then it will package those in some way appropriate for the VARIANTARG.<i> </i></p>
<p>
Because <i>pvaIn</i> and <i>pvOut </i>are both caller-allocated, stack variables are permitted for both the caller and the object receiving the call. For commands that take zero or one argument on input and return zero or one value, no additional memory allocation is necessary. Most of the types supported by VARIANTARG do not require memory allocation. Exceptions include SAFEARRAY and BSTR. For a complete list, see OLE documentation in the Win32 SDK.</p>
<h5>Notes to Implementers</h5>
<p>
A command target must implement this function; E_NOTIMPL is not a valid return value.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in docobj.h.</p>
<h4>See Also</h4>
<p>
<a href="enums_4a9g.htm"><b>OLECMDEXECOPT</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

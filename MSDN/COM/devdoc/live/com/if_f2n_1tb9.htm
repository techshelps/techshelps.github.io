<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMoniker::GetDisplayName</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_imoniker_getdisplayname"></a>IMoniker::GetDisplayName</h2>
<p>
Gets the display name, which is a user-readable representation of this moniker.</p>
<pre><code><b>HRESULT GetDisplayName(
  IBindCtx</b><i> *pbc</i><b>,  </b>//Pointer to bind context to be used
<b>  IMoniker</b><i> *pmkToLeft</i><b>,</b>
<b>                  </b>//Pointer to moniker to the left in the composite
<b>  LPOLESTR</b><i> *ppszDisplayName</i>
<i>                  </i>//Address of output variable that receives a 
                  //pointer to the display name string
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pbc</i></dt>
<dd>
[in] Pointer to the <b>IBindCtx</b> interface on the bind context to be used in this operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment. For more information, see <a href="if_a2e_06bc.htm"><b>IBindCtx</b></a>. </dd>
<dt>
<i>pmkToLeft</i></dt>
<dd>
[in] If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is primarily used by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should pass NULL.</dd>
<dt>
<i>ppszDisplayName</i></dt>
<dd>
[out] Address of <b>LPOLESTR</b> pointer variable that receives a pointer to the display name string. When successful, this string is a zero-terminated wide character string (two bytes per character) containing the display name of the moniker. The implementation must use <a href="if_f2n_3twj.htm"><b>IMalloc::Alloc</b></a> to allocate the string returned in <i>ppszDisplayName</i>, and the caller is responsible for calling <a href="if_f2n_1smd.htm"><b>IMalloc::Free</b></a> to free it. Both the caller and the implementation of this method use the COM task allocator returned by <a href="api1_2qlf.htm"><b>CoGetMalloc</b></a>. If an error occurs, the implementation must set *<i>ppszDisplayName</i> should be set to NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
The method supports the standard return value E_OUTOFMEMORY, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The display name was successfully supplied.</dd>
<dt>
MK_E_EXCEEDEDDEADLINE </dt>
<dd>
The binding operation could not be completed within the time limit specified by the bind context's <a href="structs_2b1v.htm"><b>BIND_OPTS</b></a> structure. </dd>
<dt>
E_NOTIMPL</dt>
<dd>
There is no display name.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>IMoniker::GetDisplayName</b> provides a string that is a displayable representation of the moniker. A display name is not a complete representation of a moniker's internal state; it is simply a form that can be read by users. As a result, it is possible (though rare) for two different monikers to have the same display name. While there is no guarantee that the display name of a moniker can be parsed back into that moniker when calling the <a href="api2_8hb9.htm"><b>MkParseDisplayName</b></a> function with it, failure to do so is rare. </p>
<p>
As examples, the file moniker implementation of this method supplies the path the moniker represents, and an item moniker's display name is the string identifying the item that is contained in the moniker. </p>
<h5>Notes to Callers</h5>
<p>
It is possible that retrieving a moniker's display name may be an expensive operation. For efficiency, you may want to cache the results of the first successful call to <b>IMoniker::GetDisplayName</b>, rather than making repeated calls.</p>
<h5>Notes to Implementers</h5>
<p>
If you are writing a moniker class in which the display name does not change, simply cache the display name and supply the cached name when requested. If the display name can change over time, getting the current display name might mean that the moniker has to access the object's storage or bind to the object, either of which can be expensive operations. If this is the case, your implementation of <b>IMoniker::GetDisplayName</b> should return MK_E_EXCEEDEDDEADLINE if the name cannot be retrieved by the time specified in the bind context's <a href="structs_2b1v.htm"><b>BIND_OPTS</b></a> structure.</p>
<p>
A moniker that is intended to be part of a generic composite moniker should include any preceding delimiter (such as '\') as part of its display name. For example, the display name returned by an item moniker includes the delimiter specified when it was created with the <a href="api2_1ktu.htm"><b>CreateItemMoniker</b></a> function. The display name for a file moniker does not include a delimiter because file monikers are always expected to be the leftmost component of a composite.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_f2n_6ecl.htm"><b>IMoniker::ParseDisplayName</b></a>, <a href="api2_8hb9.htm"><b>MkParseDisplayName</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IMoniker::IsRunning</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_imoniker_isrunning"></a>IMoniker::IsRunning</h2>
<p>
Determines whether the object identified by this moniker is currently loaded and running.</p>
<pre><code><b>HRESULT IsRunning(
  IBindCtx</b><i> *pbc</i><b>,  </b>//Pointer to bind context to be used
<b>  IMoniker</b><i> *pmkToLeft</i><b>,</b>
<b>                  </b>//Pointer to moniker to the left in the composite
<b>  IMoniker</b><i> *pmkNewlyRunning</i>
<i>                  </i>//Pointer to moniker of a newly running object
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pbc</i></dt>
<dd>
[in] Pointer to the<b>IBindCtx</b> interface on the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment. For more information, see <a href="if_a2e_06bc.htm"><b>IBindCtx</b></a>. </dd>
<dt>
<i>pmkToLeft</i></dt>
<dd>
[in] Pointer to the<b>IMoniker</b> interface on the moniker to the left of this moniker if this moniker is part of a composite. This parameter is primarily used by moniker Implementers to enable cooperation between the various components of a composite moniker; moniker clients can usually pass NULL.</dd>
<dt>
<i>pmkNewlyRunning</i></dt>
<dd>
[in] Pointer to the<b>IMoniker</b> interface on the moniker most recently added to the Running Object Table (ROT). This can be NULL. If non-NULL, the implementation can return the results of calling <a href="if_f2n_7mp8.htm"><b>IMoniker::IsEqual</b></a> on the <i>pmkNewlyRunning</i> parameter, passing the current moniker. This parameter is intended to enable <b>IMoniker::IsRunning</b> implementations that are more efficient than just searching the ROT, but the implementation can choose to ignore <i>pmkNewlyRunning</i> without causing any harm.
</dd>
</dl>
<h4>Return Values</h4>
<p>
The method supports the standard return value E_UNEXPECTED, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The moniker is running.</dd>
<dt>
S_FALSE</dt>
<dd>
The moniker is not running.
</dd>
</dl>
<h4>Remarks</h4>
<h5>Notes to Callers</h5>
<p>
If speed is important when you're requesting services from the object identified by the moniker, you may want those services <i>only</i> if the object is already running (because loading an object into the running state may be time-consuming). In such a situation, you'd call <b>IMoniker::IsRunning</b> to determine if the object is running. </p>
<p>
For the monikers stored within linked objects, <b>IMoniker::IsRunning</b> is primarily called by the default handler's implementation of <b>IOleLink::BindIfRunning</b>.</p>
<h5>Notes to Implementers</h5>
<p>
To get a pointer to the Running Object Table (ROT), your implementation should call <a href="if_a2e_70bp.htm"><b>IBindCtx::GetRunningObjectTable</b></a> on the <i>pbc</i> parameter. Your implementation can then call <a href="if_r2z_64br.htm"><b>IRunningObjectTable::IsRunning</b></a> to determine whether the object identified by the moniker is running. Note that the object identified by the moniker must have registered itself with the ROT when it first began running.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_o_9b6v.htm"><b>IOleLink::BindIfRunning</b></a>, <a href="if_a2e_70bp.htm"><b>IBindCtx::GetRunningObjectTable</b></a>, <a href="if_r2z_64br.htm"><b>IRunningObjectTable::IsRunning</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

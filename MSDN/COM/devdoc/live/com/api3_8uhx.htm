<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OleRegGetUserType</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_olereggetusertype"></a>OleRegGetUserType</h1>
<p>
Gets the user type of the specified class from the registry. Developers of custom DLL object applications use this function to emulate the behavior of the OLE default handler.</p>
<pre><code><b>WINOLEAPI OleRegGetUserType(
  REFCLSID</b><i> clsid</i><b>,         </b>//Class identifier
<b>  DWORD</b><i> dwFormOfType</i><b>,     </b>//Specifies form of type name
<b>  LPOLESTR *</b><i> pszUserType  </i>//Pointer to storage of string pointer
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>clsid</i></dt>
<dd>
[in] Class identifier for which user type is requested.</dd>
<dt>
<i>dwFormOfType</i></dt>
<dd>
[in] Value that describes the form of the user-presentable string from the enumeration <a href="enums_5085.htm"><b>USERCLASSTYPE</b></a>.</dd>
<dt>
<i>pszUserType</i></dt>
<dd>
[out] Pointer to a string that stores the user type on return.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return value E_OUTOFMEMORY, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The user type was returned successfully.</dd>
<dt>
REGDB_E_CLASSNOTREG</dt>
<dd>
There is no CLSID registered for the class object.</dd>
<dt>
REGDB_E_READREGDB</dt>
<dd>
There was an error reading the registry.</dd>
<dt>
OLE_E_REGDB_KEY</dt>
<dd>
The <i>ProgID = MainUserTypeName</i> and <i>CLSID = MainUserTypeName</i> keys are missing from the registry.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Object applications can ask OLE to get the user type name of a specified class in one of two ways. One way is to call <b>OleRegGetUserType</b>. The other is to return OLE_S_USEREG in response to calls by the default object handler to <b>IOleObject::GetUserType</b>. OLE_S_USEREG instructs the default handler to call <b>OleRegGetUserType</b>. Because DLL object applications cannot return OLE_S_USEREG, they must call <b>OleRegGetUserType,</b> rather than delegating the job to the object handler.</p>
<p>
The<b> OleRegGetUserType </b>function<b> </b>and its sibling functions, <a href="api3_04hf.htm"><b>OleRegGetMiscStatus</b></a>, <a href="api3_2kmb.htm"><b>OleRegEnumFormatEtc</b></a>, and <a href="api3_7f5f.htm"><b>OleRegEnumVerbs</b></a>, provide a way for developers of custom DLL object applications to emulate the behavior of OLE's default object handler in getting information about objects from the registry. By using these functions, you avoid the considerable work of writing your own, and the pitfalls inherent in working directly in the registry. In addition, you get future enhancements and optimizations of these functions without having to code them yourself.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ole2.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="if_o_0a1x.htm"><b>IOleObject::GetUserType</b></a>,<b> <a href="api3_04hf.htm">OleRegGetMiscStatus</a></b>,<b> <a href="api3_2kmb.htm">OleRegEnumFormatEtc</a></b>,<b> <a href="api3_7f5f.htm">OleRegEnumVerbs</a></b>,<b> <a href="enums_5085.htm">USERCLASSTYPE</a></b> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IBindHost::MonikerBindToObject</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_ibindhost_monikerbindtoobject"></a>IBindHost::MonikerBindToObject</h2>
<p>
Binds to the object named by the specified moniker.</p>
<pre><code><b>HRESULT MonikerBindToObject(
  IMoniker</b><i> *pMk</i><b>, </b>// Moniker to be bound
<b>  IBindCtx</b><i> *pBC</i><b>, </b>// Optional bind context
<b>  IBindStatusCallback</b><i> *pBSC</i><b>,</b>
<b>                 </b>// The control's callback interface
<b>  REFIID</b><i> rii</i><b>,    </b>// IID of the desired storage interface
<b>  void</b><i> **ppvObj  </i>// The result of the bind operation
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pMk</i></dt>
<dd>
[in] Pointer to the moniker to be bound.</dd>
<dt>
<i>pBC</i></dt>
<dd>
[in] Pointer to optional bind context to be used when binding the moniker.</dd>
<dt>
<i>pBSC </i></dt>
<dd>
[in] The control's callback interface.</dd>
<dt>
<i>riid</i></dt>
<dd>
[in] Interface ID of desired storage interface. Serves the same purpose as the analagous parameter in <a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a>.</dd>
<dt>
<i>ppvObj</i></dt>
<dd>
[out] The result of the bind operation (if it is synchronous). This parameter serves the same purpose as the analogous parameter in <b>IMoniker::BindToObject</b>.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The bind operation completed synchronously and successfully. The result of the bind operation is available in ppbObj.</dd>
<dt>
MK_S_ASYNCHRONOUS</dt>
<dd>
The bind operation will complete asynchronously. Behavior matches that of<b> IMoniker::BindToStorage</b><i>.</i></dd>
<dt>
E_OUTOFMEMORY</dt>
<dd>
There is insufficient memory to create the moniker.</dd>
<dt>
E_UNEXPECTED</dt>
<dd>
An unknown error occurred.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>IBindHost::MonikerBindToObject</b> should be the first mechanism that controls use to bind to the object addressed by a moniker (if a control container doesn't support <b>IBindHost</b>, then the control should directly call <b>IMoniker::BindToObject</b>). This function behaves the same as <b>IMoniker::BindToObject</b>, except that it enables the control's container (the implementer of <b>IBindHost</b>) to set bind options and priority, while delegating all results and callbacks to the control.</p>
<p>
A control can use <i>pBC</i> to pass additional bind options, such as a format enumerator (see <a href="if_a2e_7kyr.htm"><b>IEnumFormatETC</b></a>).</p>
<p>
A control receives asynchronous callbacks pertaining to the bind operation by passing its container a pointer to the control's <b>IBindStatusCallback</b> interface. The control must provide this interface separately, not registered on the <i>pBC</i> parameter.</p>
<p>
</p>
<p>
</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in urlmon.h.</p>
<p>&nbsp;</p></body>
</HTML>

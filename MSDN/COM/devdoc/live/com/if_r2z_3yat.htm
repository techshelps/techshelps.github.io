<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ISequentialStream::Write</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_com_isequentialstream_write"></a>ISequentialStream::Write</h2>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Writes a specified number of bytes into the stream object starting at the current seek pointer.</p>
<pre><code><b>HRESULT Write(
  void const*</b><i> pv</i><b>,  </b>//Address of buffer from which stream is written
<b>  ULONG</b><i> cb</i><b>,        </b>//Specifies the number of bytes to write
<b>  ULONG *</b><i> pcbWritten</i>
<i>                   </i>//Specifies the actual number of bytes written
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pv</i></dt>
<dd>
[in] Address of the buffer containing the data that is to be written to the stream. A valid pointer must be provided for this parameter even when <i>cb</i> is zero.</dd>
<dt>
<i>cb</i></dt>
<dd>
[in] The number of bytes of data to attempt to write into the stream. Can be zero.</dd>
<dt>
<i>pcbWritten</i></dt>
<dd>
[out] Address of a <b>ULONG</b> variable where this method writes the actual number of bytes written to the stream object. The caller can set this pointer to NULL, in which case, this method does not provide the actual number of bytes written.</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
S_OK</dt>
<dd>
The data was successfully written to the stream object.</dd>
<dt>
E_PENDING</dt>
<dd>
Asynchronous Storage only: Part or all of the data to be written is currently unavailable. For more information see <a href="if_f2n_5xdf.htm"><b>IFillLockBytes</b></a> and <a href="asyncstg_86cl.htm">Asynchronous Storage</a>. </dd>
<dt>
STG_E_MEDIUMFULL</dt>
<dd>
The write operation was not completed because there is no space left on the storage device.</dd>
<dt>
STG_E_ACCESSDENIED</dt>
<dd>
The caller does not have sufficient permissions for writing to this stream object.</dd>
<dt>
STG_E_CANTSAVE</dt>
<dd>
Data cannot be written for reasons other than no access or space.</dd>
<dt>
STG_E_INVALIDPOINTER</dt>
<dd>
One of the pointer values is invalid. The <i>pv</i> parameter must contain a valid pointer even if <i>cb</i> is zero.</dd>
<dt>
STG_E_REVERTED</dt>
<dd>
The object has been invalidated by a revert operation above it in the transaction tree.</dd>
<dt>
STG_E_WRITEFAULT</dt>
<dd>
The write operation was not completed due to a disk error. This value is also returned when attempting to write to a stream that was opened in simple mode (using the STGM_SIMPLE flag).</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>ISequentialStream::Write</b> writes the specified data to a stream object. The seek pointer is adjusted for the number of bytes actually written. The number of bytes actually written is returned in the <i>pcbWritten</i> parameter. If the byte count is zero bytes, the write operation has no effect.</p>
<p>
If the seek pointer is currently past the end of the stream and the byte count is nonzero, this method increases the size of the stream to the seek pointer and writes the specified bytes starting at the seek pointer. The fill bytes written to the stream are not initialized to any particular value. This is the same as the end-of-file behavior in the MS-DOS FAT file system.</p>
<p>
With a zero byte count and a seek pointer past the end of the stream, this method does not create the fill bytes to increase the stream to the seek pointer. In this case, you must call the <a href="if_r2z_3ysl.htm"><b>IStream::SetSize</b></a> method to increase the size of the stream and write the fill bytes.</p>
<p>
The <i>pcbWritten</i> parameter can have a value even if an error occurs.</p>
<p>
In the COM-provided implementation, stream objects are not sparse. Any fill bytes are eventually allocated on the disk and assigned to the stream.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="if_r2z_14mc.htm"><b>ISequentialStream::Read</b></a>, <a href="enums_5t2d.htm"><b>STGMOVE</b></a>, <a href="if_r2z_7x65.htm"><b>IStorage::OpenStream</b></a>, <a href="if_r2z_4x7x.htm"><b>IStream</b></a>, <a href="if_r2z_459q.htm"><b>IStream - Compound File Implementation</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STGM</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_stgm"></a>STGM</h1>
<p>
The <b>STGM</b> enumeration values are used in the storage and stream interfaces to indicate the conditions for creating and deleting the object and access modes for the object.</p>
<p>
The <b>STGM</b> values are used in the <a href="if_r2z_9b8l.htm"><b>IStorage</b></a> and <a href="if_r2z_4x7x.htm"><b>IStream</b></a> interfaces, and in the <a href="api4_8hd1.htm"><b>StgCreateDocfile</b></a> and <a href="api4_5ar7.htm"><b>StgCreateDocfileOnILockBytes</b></a> functions to indicate the conditions for creating and deleting the object and access modes for the object.</p>
<p>
STGM values are as follows: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=53%><b>STGM_DIRECT</b></td>
<td width=47%>0x00000000L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_TRANSACTED</b></td>
<td width=47%>0x00010000L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_SIMPLE</b></td>
<td width=47%>0x08000000L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_READ</b></td>
<td width=47%>0x00000000L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_WRITE</b></td>
<td width=47%>0x00000001L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_READWRITE</b></td>
<td width=47%>0x00000002L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_SHARE_DENY_NONE</b></td>
<td width=47%>0x00000040L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_SHARE_DENY_READ</b></td>
<td width=47%>0x00000030L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_SHARE_DENY_WRITE</b></td>
<td width=47%>0x00000020L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_SHARE_EXCLUSIVE</b></td>
<td width=47%>0x00000010L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_PRIORITY</b></td>
<td width=47%>0x00040000L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_DELETEONRELEASE</b></td>
<td width=47%>0x04000000L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_CREATE</b></td>
<td width=47%>0x00001000L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_CONVERT</b></td>
<td width=47%>0x00020000L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_FAILIFTHERE</b></td>
<td width=47%>0x00000000L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_NOSCRATCH</b></td>
<td width=47%>0x00100000L</td>
</tr>
<tr valign=top>
<td width=53%><b>STGM_NOSNAPSHOT</b></td>
<td width=47%>0x00200000L</td>
</tr>
</table><br>
<h4>Elements</h4>
<h5>STGM_DIRECT. STGM_TRANSACTED, STGM_SIMPLE group:</h5>
<dl>
<dt>
STGM_DIRECT</dt>
<dd>
In direct mode, each change to a storage element is written as it occurs. This is the default.</dd>
<dt>
STGM_TRANSACTED</dt>
<dd>
In transacted mode, changes are buffered and are written only if an explicit commit operation is called. The changes can be ignored by calling the <b>Revert</b> method in the <b>IStream</b> or <b>IStorage</b> interfaces. The COM compound file implementation does not support transacted streams, which means that streams can be opened only in direct mode, and you cannot revert changes to them. Transacted storages are, however, supported.</dd>
<dt>
STGM_SIMPLE</dt>
<dd>
STGM_SIMPLE is a mode that provides a much faster implementation of a compound file in a limited, but frequently used case. It is described in detail in the following Remarks section.
</dd>
</dl>
<h5>STGM_READ, STGM_WRITE, STGM_READWRITE group:</h5>
<dl>
<dt>
STGM_READ</dt>
<dd>
For stream objects, STGM_READ allows you to call the <a href="if_r2z_14mc.htm"><b>ISequentialStream::Read</b></a> method. For storage objects, you can enumerate the storage elements and open them for reading.</dd>
<dt>
STGM_WRITE</dt>
<dd>
STGM_WRITE lets you save changes to the object.</dd>
<dt>
STGM_READWRITE</dt>
<dd>
STGM_READWRITE is the combination of STGM_READ and STGM_WRITE.
</dd>
</dl>
<h5>STGM_SHARE_* group:</h5>
<dl>
<dt>
STGM_SHARE_DENY_NONE</dt>
<dd>
Specifies that subsequent openings of the object are not denied read or write access.</dd>
<dt>
STGM_SHARE_DENY_READ</dt>
<dd>
Prevents others from subsequently opening the object in STGM_READ mode. It is typically used on a root storage object.</dd>
<dt>
STGM_SHARE_DENY_WRITE</dt>
<dd>
Prevents others from subsequently opening the object in STGM_WRITE mode. This value is typically used to prevent unnecessary copies made of an object opened by multiple users. If this value is not specified, a snapshot is made, independent of whether there are subsequent opens or not. Thus, you can improve performance by specifying this value.</dd>
<dt>
STGM_SHARE_EXCLUSIVE</dt>
<dd>
The combination of STGM_SHARE_DENY_READ and STGM_SHARE_DENY_WRITE. 
</dd>
</dl>
<h5>STGM_PRIORITY</h5>
<dl>
<dt>
STGM_PRIORITY</dt>
<dd>
Opens the storage object with exclusive access to the most recently committed version. Thus, other users cannot commit changes to the object while you have it open in priority mode. You gain performance benefits for copy operations, but you prevent others from committing changes. So, you should limit the time you keep objects open in priority mode. You must specify STGM_DIRECT and STGM_READ with priority mode.
</dd>
</dl>
<h5>STGM_DELETEONRELEASE</h5>
<dl>
<dt>
STGM_DELETEONRELEASE</dt>
<dd>
Indicates that the underlying file is to be automatically destroyed when the root storage object is released. This capability is most useful for creating temporary files.
</dd>
</dl>
<h5>STGM_CREATE, STGM_CONVERT, STGM_FAILIFTHERE Group</h5>
<dl>
<dt>
STGM_CREATE</dt>
<dd>
Indicates that an existing storage object or stream should be removed before the new one replaces it. A new object is created when this flag is specified, only if the existing object has been successfully removed.
<p>
This flag is used in three situations:

<ul>
<li>
when you are trying to create a storage object on disk but a file of that name already exists</li>
<li>
when you are trying to create a stream inside a storage object but a stream with the specified name already exists</li>
<li>
when you are creating a byte array object but one with the specified name already exists</li>
</ul>
</dd>
<dt>
STGM_CONVERT</dt>
<dd>
Creates the new object while preserving existing data in a stream named <b>CONTENTS</b>. In the case of a storage object or a byte array, the old data is flattened to a stream regardless of whether the existing file or byte array currently contains a layered storage object.</dd>
<dt>
STGM_FAILIFTHERE</dt>
<dd>
Causes the create operation to fail if an existing object with the specified name exists. In this case, STG_E_FILEALREADYEXISTS is returned. STGM_FAILIFTHERE applies to both storage objects and streams.</dd>
<dt>
STGM_NOSCRATCH</dt>
<dd>
<b>Windows95 only: </b>In transacted mode, a scratch file is usually used to save until the commit operation. Specifying STGM_NOSCRATCH permits the unused portion of the original file to be used as scratch space. This does not affect the data in the original file, and is a much more efficient use of memory. </dd>
<dt>
STGM_NOSNAPSHOT</dt>
<dd>
This flag is used when opening a storage with STGM_TRANSACTED and without STGM_SHARE_EXCLUSIVE or STGM_SHARE_DENY_WRITE. In this case, specifying STGM_NOSNAPSHOT prevents the system-provided implementation from creating a snapshot copy of the file. Instead, changes to the file are written to the end of the file. Unused space is not reclaimed unless consolidation is done during the commit, and there is only one current writer on the file. When the file is opened in no snapshot mode, another open cannot be done without specifying STGM_NOSNAPSHOT - in other words, you can't combine no-snapshot with other modes.
</dd>
</dl>
<h4>Remarks</h4>
<p>
You can combine these flags but you can only choose one flag from each group of related flags. Groups are indicated under the headings in the previous section.</p>
<p>
The STGM_SIMPLE flag is applicable only when combined with:</p>
<pre><code>STGM_CREATE | STGM_READWRITE | STGM_SHARE_EXCLUSIVE 
 </code></pre>
<p>
Note that direct mode is implied by the absence of STGM_TRANSACTED.</p>
<p>
This mode is useful for applications that perform complete save operations. It has the following constraints:
<ol>
<li>
There is no support for substorages.</li>
<li>
Access to streams follows a linear pattern. Once a stream is released, that stream cannot be opened for read/write operations again. The <b>IStorage::OpenStream</b> method is not supported in this implementation.</li>
<li>
The storage and stream objects cannot be marshaled.</li>
<li>
Each stream is at least 4096 bytes in length. If fewer than 4096 bytes are written into a stream by the time the stream is released, the stream will be extended to contain 4096 bytes.</li>
<li>
In this compound file implementation, only a subset of the methods of <b>IStorage</b> and <b>IStream</b> are available. </li>
</ol>
<p>
Specifically, in simple mode, supported <a href="if_r2z_9b8l.htm"><b>IStorage</b></a> methods are <b>QueryInterface</b>, <b>AddRef</b>, <b>Release</b>, <b>CreateStream</b>, <b>Commit</b>, and <b>SetClass</b>. In addition, <b>SetElementTimes</b> is supported with a NULL name, allowing applications to set times on a root storage in simple mode.</p>
<p>
Supported <a href="if_r2z_4x7x.htm"><b>IStream</b></a> methods are <b>QueryInterface</b>, <b>AddRef</b>, <b>Release</b>, <b>Seek</b>, and <b>SetSize</b>. Also, <b>Read</b> and <b>Write</b> methods on <a href="if_r2z_1k19.htm"><b>ISequentialStream</b></a> are supported.</p>
<p>
All the other methods of <b>IStorage</b> and <b>IStream</b> return STG_E_INVALIDFUNCTION.</p>
<p>
File optimization modes such as STGM_SIMPLE, STGM_NOSCRATCH, and STGM_NOSNAPSHOT are not supported for NTFS native structured storage files. When storing storage objects on NTFS systems in native file format, the files are automatically converted to regular file format for all non-NT and FAT partitions.</p>
<p>
</p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.1 and later. <br>
&nbsp;&nbsp;<b>Windows:</b> Use Windows 95 and later. <br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in objbase.h.</p>
<h4>See Also</h4>
<p>
<a href="api4_8hd1.htm"><b>StgCreateDocfile</b></a>, <a href="if_r2z_14mc.htm"><b>ISequentialStream::Read</b></a>, <a href="if_r2z_9b8l.htm"><b>IStorage</b></a>, <a href="api4_5ar7.htm"><b>StgCreateDocfileOnILockBytes</b></a>, <a href="api4_0hb9.htm"><b>StgOpenStorage</b></a>, <a href="api4_1xdf.htm"><b>StgOpenStorageOnILockBytes</b></a> </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

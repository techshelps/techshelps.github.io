<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Moniker Providers</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_moniker_providers"></a>Moniker Providers</h1>
<p>
In general, a component should be a moniker provider when it allows access to one of its objects, while still controlling the object's storage. If a component is going to hand out monikers that identify its objects, it must be capable of performing the following tasks:
<ul>
<li>
On request, create a moniker that identifies an object. </li>
<li>
Enable the moniker to be bound when a client calls <a href="if_f2n_7o6s.htm"><b>IMoniker::BindToObject</b></a> on it. </li>
</ul>
<p>
A moniker provider must create a moniker of an appropriate <i>moniker class</i> to identify an object. The moniker class refers to a specific implementation of the <b>IMoniker</b> interface that defines the type of moniker created. While you can implement <b>IMoniker</b> to create a new moniker class, it is frequently unnecessary because OLE provides implementations of several different moniker classes, each with its own CLSID. Refer to <a href="monikers_3boz.htm"><b>OLE Moniker Implementations</b></a> for descriptions of moniker classes that OLE provides.</p>
<p>&nbsp;</p></body>
</HTML>

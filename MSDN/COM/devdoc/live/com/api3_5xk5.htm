<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OleConvertOLESTREAMToIStorage</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_com_oleconvertolestreamtoistorage"></a>OleConvertOLESTREAMToIStorage</h1>
<p>
Converts the specified object from the OLE 1 storage model to an OLE 2 structured storage object without specifying presentation data. This is one of several compatibility functions.</p>
<pre><code><b>WINOLEAPI OleConvertOLESTREAMToIStorage(
  LPOLESTREAM</b><i> lpolestream</i><b>,</b>   //Pointer to the stream where the OLE 1 
                             // storage is written
<b>  IStorage *</b><i> pstg</i><b>,           </b>//Pointer to OLE 2 storage object
<b>  const DVTARGETDEVICE *</b><i> ptd  </i>//Pointer to target device
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>lpolestream</i></dt>
<dd>
[in] Pointer to a stream that contains the persistent representation of the object in the OLE 1 storage format.</dd>
<dt>
<i>pstg</i></dt>
<dd>
[out] Pointer to the <b>IStorage</b> interface on the OLE 2 structured storage object.</dd>
<dt>
<i>ptd</i></dt>
<dd>
[in] Pointer to the <a href="structs_0en9.htm">DVTARGETDEVICE</a> structure specifying the target device for which the OLE 1 object is rendered.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function supports the standard return value E_INVALIDARG, as well as the following: 
<dl>
<dt>
S_OK</dt>
<dd>
The object was successfully converted.</dd>
<dt>
CONVERT10_S_NO_PRESENTATION</dt>
<dd>
The object either has no presentation data or uses native data for its presentation.</dd>
<dt>
DV_E_DVTARGETDEVICE or DV_E_DVTARGETDEVICE_SIZE</dt>
<dd>
Invalid value for <i>ptd</i>.
</dd>
</dl>
<h4>Remarks</h4>
<p>
This function converts an OLE 1 object to an OLE 2 structured storage object. You can use this function to update OLE 1 objects to OLE 2 objects when a new version of the object application supports OLE 2.</p>
<p>
On entry, the <i>lpolestm</i> parameter should be created and positioned just as it would be for an <a href="api3_1act.htm"><b>OleLoadFromStream</b></a> function call. On exit, the <i>lpolestm</i> parameter is positioned just as it would be on exit from an <b>OleLoadFromStream</b> function, and the<i> pstg</i> parameter contains the uncommitted persistent representation of the OLE 2 storage object.</p>
<p>
For OLE 1 objects that use native data for their presentation, the <b>OleConvertOLESTREAMToIStorage</b> function returns CONVERT10_S_NO_PRESENTATION. On receiving this return value, callers should call <b>IOleObject::Update</b> to get the presentation data so it can be written to storage.</p>
<p>
Applications that do not use OLE's default caching resources, but do use the conversion resources, can use an alternate function, <b>OleConvertOLESTREAMToIStorageEx</b>, which can specify which presentation data to convert. In the <b>OleConvertOLESTREAMToIStorageEx</b> function, the presentation data read from the <b>OLESTREAM</b> structure is passed out and the newly created OLE 2 storage object does not contain a presentation stream.</p>
<p>
The following steps describe the conversion process using <b>OleConvertOLESTREAMToIStorage</b>:
<ol>
<li>
Create a root <a href="if_r2z_9b8l.htm"><b>IStorage</b></a> object by calling the <a href="api4_8hd1.htm"><b>StgCreateDocfile</b></a> function(..., &amp;<i>pstg</i>).</li>
<li>
Open the OLE 1 file (using <b>OpenFile</b> or another OLE 1 technique).</li>
<li>
Using the OLE 1 procedure for reading files, read from the file until an OLE object is encountered.</li>
<li>
Allocate an <b>IStorage</b> object from the root <b>IStorage</b> created in step 1:<pre><code>pstg-&gt;lpVtbl-&gt;CreateStorage(...&amp;pStgChild); 
hRes = OleConvertIStorageToOLESTREAM(polestm, pStgChild); 
hRes = OleLoad(pStgChild, &amp;IID_IOleObject, pClientSite, ppvObj); 
 </code></pre>
</li>
<li>
Repeat step 3 until the file is completely read.</li>
</ol>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Use version 3.1 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Use Windows 95 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in ole2.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Included as a resource in ole32.dll.</p>
<h4>See Also</h4>
<p>
<a href="api1_2zlf.htm"><b>CoIsOle1Class</b></a>,<b> <a href="api3_1zu5.htm">OleConvertIStorageToOLESTREAM</a></b>,<b> <a href="api3_3m7s.htm">OleConvertIStorageToOLESTREAMEx</a></b>,<b> <a href="api3_8gfs.htm">OleConvertOLESTREAMToIStorageEx</a></b>, <a href="structs_0en9.htm"><b>DVTARGETDEVICE</b></a> structure, <a href="structs_0gfh.htm"><b>STGMEDIUM</b></a> structure, <a href="enums_986c.htm"><b>TYMED</b></a> enumeration</p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Attribute Specification</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Working with MS VM"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Attribute_Specifications.htm#comattr_0005000604010000">The type Attribute</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Attribute_Specifications.htm#comattr_0005000604020000">The ExposedAs Attribute</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Attribute_Specifications.htm#comattr_0005000604030000">The ProxiesTo Attribute</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Attribute_Specifications.htm#comattr_0005000604040000">The MapsTo Attribute</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Attribute_Specifications.htm#comattr_0005000604050000">Method and Type Descriptions</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/virtual2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Microsoft VM"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Java_Wrappers.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="comattr.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="VM"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Attribute_Reference.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Overview of COM Attributes for Java Class Files</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">VM</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">The Attribute Specification</H2>
<P>This section describes the attributes at a semantic level without getting into representational issues. 

<P>Note that the attributes specify detail at the method level whenever possible. That is, while you customarily think of interfaces having IIDs, the attribute specification specifies an IID for each method, so that one Java interface could conceivably proxy to methods on multiple IIDs. For performance reasons, however, the first version of the Microsoft VM will not support this full generality. All methods on an interface will be required to have the same IID. The attribute language itself, however, is consciously designed not to obstruct future flexibility.

<P>This section describes the attributes using an informal representation in which normal Java syntax is augmented by an "attribute syntax," where brackets contain attribute information. This should not be construed as recommending the syntax to use in a commercial development environment.



<H3 STYLE="color:#333366"><A NAME="comattr_0005000604010000">The type Attribute</A></H3><P>This section's model divides Java classes into "pure," "Java-callable-wrappers," and "Java-callable data wrappers." 

<P>The allowable attributes are:
<PRE><FONT FACE="Courier" SIZE="2">
          class [type jcw &lt;options&gt;] foo {...}  // denotes a Java-callable wrapper
          class [type jcdw &lt;options&gt;] foo {...}  // denotes a Java-callable data wrapper
</FONT></PRE>
<P>A given class has at most one type attribute. When no type attribute is present for a given class, the type of the class is determined as pure. 



<P>The type attribute can appear only in a class that derives directly from <B>java.lang.Object</B>. Interfaces do not have type attributes. 

<H4 STYLE="color:#333366"><A NAME="comattr_0005000604010100">Java-Callable Wrappers</A></H4><P>Java-callable wrappers (JCWs) are stateless proxies for a <I>single</I> COM object. JCWs can have an optional <B>CLSID</B> subattribute, which the following example shows.

<PRE><FONT FACE="Courier" SIZE="2">
   [type jcw {CLSID=....}]
</FONT></PRE>
<P>Each instance of a JCW has an implicit marshaling mode that is determined using the parameter type attribute through which the JCW is created. The marshaling mode is either "NoMarshal" or "AutoMarshal".

<P>If the marshaling mode is AutoMarshal, the JCW's <I>home thread</I> will be the thread that was current at the time the JCW was bound to the COM object. The JCW can be freely passed to other threads. However, calls to the JCW from outside threads will involve overhead due to marshaling back to the home thread. On a Microsoft&#174; Win32&#174; implementation, the home thread for an AutoMarshal JCW must process window messages on a regular basis. Otherwise, this thread will block other applications that attempt system-wide broadcasts.

<P>If a class identifier (CLSID) is given, JCW classes can be used as the argument to the Java <B>new</B> operator. What happens then depends on the ThreadingModel (determined by the Threading Model registry entry for the CLSID).

<P>If the ThreadingModel is "Free", the COM object is instantiated using the Win32 <B>CoCreateInstance</B> function on the current thread. The JCW can be passed around freely between threads and calls to it are never marshaled.

<P>If the ThreadingModel is "Apartment", the object's home thread is either a special apartment thread or the current thread, depending on certain thread attributes that are outside the scope of this document. The JCW can be passed around freely between threads, but calls to it from outside the apartment thread will cause marshaling overhead. 

<P>If the ThreadingModel is "Single", the Microsoft VM switches to the hosting process's main Apartment thread to create the object. This thread is presumed to have a message loop.

<H4 STYLE="color:#333366"><A NAME="comattr_0005000604010200">Java-Callable Data Wrappers</A></H4><P>Java-callable data wrappers (JCDWs) are stateless proxies for external data structures. 



<H3 STYLE="color:#333366"><A NAME="comattr_0005000604020000">The ExposedAs Attribute</A></H3><P>The ExposedAs attribute prescribes the external interface of COM-callable wrappers (CCWs) created for a given Java object. More specifically, for a given Java method or field, it describes whether it is exposed as a vtable or Dispatch interface; what IID it is exposed on, what vtable offset or dispid it is assigned to, what name it is exposed as (for <B>Dispatch</B> only) and how the parameters are marshaled.

<P>The following example denotes these.

<PRE><FONT FACE="Courier" SIZE="2">
//pure
class Foo {
&#009;[ExposedAs { VtblLoc  | DispatchLoc } &lt;MethodDesc&gt;]
&#009;void Method1(int whatever)
&#009;{
&#009;&#009;DoesSomething;
&#009;}
}
</FONT></PRE>
<P>where:

<PRE><FONT FACE="Courier" SIZE="2">
   VtblLoc ::= (IID = iid, VtblOffset = offset)
   DispatchLoc ::= (IID = iid, DispId = dispid, DispType = type,  
                    [DispName = name])
   MethodDesc ::= (see later)
</FONT></PRE>
<P>Note that a given member can have multiple ExposedAs attributes within the same class (akin to exporting the same function under multiple names from a dynamic-link library (DLL).) In addition, local classes can inherit ExposedAs attributes from superclasses and interface definitions. If a method overrides a method in a superclass, the <I>local</I> method is exposed through all the interfaces listed in the ExposedAs attributes of the overridden method, as well as its own (the overridden method is never exposed by this mechanism; this would violate the notion of overriding).

<P>If two ExposedAs attributes within a class's inheritance tree specify equal vtbllocs or dispatchlocs, it is considered an error.

<P>ExposedAs attributes may appear on interfaces that are named in the "implements" clause of JCW or JCDW classes. However, these attributes have no effect on those classes.




<H3 STYLE="color:#333366"><A NAME="comattr_0005000604030000">The ProxiesTo Attribute</A></H3><P>The ProxiesTo attribute describes, for a given method or field of a Java-callable wrapper (JCW), exactly which Component Object Model (COM) member function it maps to in the underlying COM object. 

<PRE><FONT FACE="Courier" SIZE="2">
//JCW
class Foo {
&#009;void Method1(int whatever) 
&#009;{
&#009;&#009;[ProxiesTo { VtblLoc  | DispatchLoc} &lt;MethodDesc&gt;]
&#009;}
}
</FONT></PRE>
<P>Since JCWs cannot subclass each other, there are no overriding or inheritance rules to define for classes. However, Java interfaces can also specify ProxiesTo attributes (this is convenient for standard interfaces). In addition, interfaces that extend other interfaces can also override the ProxiesTo attributes of their parent interfaces (this is what happens when a COM interface definition inherits off another: it has its own IID).

<P>In the case of multiple ProxiesTo attributes, the ambiguity is resolved by the form of the method call used. That is, in the following example:
<PRE><FONT FACE="Courier" SIZE="2">
interface IOleThing {
&#009;[ProxiesTo (IID=IID_A,...]
&#009;void foo();
}

interface IOleThingEx extends IOleThing {
&#009;[ProxiesTo (IID=IID_B,...]
&#009;void foo();
}

class CoOleThing implements IOleThingEx {
&#009;[ProxiesTo (IID_IID_C,...]
&#009;public void foo();
}
</FONT></PRE>
<P>If the call to <B>foo</B> is made using <B>invokeinterface</B> on IOleThing, IID_A is used. If the call to <B>foo</B> is made using <B>invokeinterface</B> on IOleThingEx, IID_B is used. If the call is made using <B>invokevirtual</B>, CoOleThing is used.




<H3 STYLE="color:#333366"><A NAME="comattr_0005000604040000">The MapsTo Attribute</A></H3><P>The MapsTo attribute describes how the fields of a Java-callable data wrapper (JCDW) map to offsets in the underlying data structure. These are valid only on the fields of a JCDW class. JCDW classes cannot subclass each other, so there are no inheritance/overriding rules.

<PRE><FONT FACE="Courier" SIZE="2">
//JCDW
class Data {
&#009;[MapsTo ( [AutoOffset], Offset=offset, TypeDesc = typedesc)]
&#009;int x;
} 
</FONT></PRE>
<P>The <B>TypeDesc</B> structure is described in the next section. If the "AutoOffset" is set, the Offset must be zero and the Virtual Machine will compute the actual offset for the hosting platform. This allows the structure definition to move freely between platforms. 

<H3 STYLE="color:#333366"><A NAME="comattr_0005000604050000">Method and Type Descriptions</A></H3><P>The <B>TypeDesc</B> structure defines the type of a single method parameter or return value. <B>TypeDesc</B> structures come in two flavors: one for vtable methods and one for dispatch methods. <B>TypeDesc</B> structures do not attempt to describe the type of the corresponding Java. These attributes are always associated with a method attribute that specifies method signatures.

<P><B>TypeDesc</B> structures have in/out subattributes to aid in efficient marshaling. Also, if <B>TypeDesc</B> describes a Java-callable wrapper (JCW), you must tag it with a subattribute that indicates the expected marshaling model of the external COM object. JCWs have a "Marshaling Mode," which is one of "NoMarshal" or "AutoMarshal." On a NoMarshal JCW, all calls made from Java to COM are made on the calling thread. On an AutoMarshal JCW, the Microsoft VM marshals all calls back to the thread on which the JCW was created.

<H4 STYLE="color:#333366"><A NAME="comattr_0005000604050100">Vtable Types</A></H4><P>VtblTypes can be one of the following:

<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>void</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">For return values only: indicates method has no return value
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>signed(1|2|4|8)</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Signed 1, 2, 4, and 8-byte characters
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>unsigned(1|2|4|8)</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Unsigned 1, 2, 4, and 8-byte characters
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>real(4|8)</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Float and double
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>ptr</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A 32-bit linear address
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>struct(size)</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A by-value structure or array
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>interface(IID)</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">An IUnknown</A> interface derivative
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>jstring</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Strings
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>jarray</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Arrays
</FONT></TD></TR></TABLE>
<H4 STYLE="color:#333366"><A NAME="comattr_0005000604050200">Dispatch Types</A></H4><P>Dispatch types are denoted by the VARTYPE enumerations (the subset that is allowable in a VARIANT). In addition, the DispatchType encodes the expected IID for VT_UNKNOWN and VT_DISPATCH.

<H4 STYLE="color:#333366"><A NAME="comattr_0005000604050300">Method Descriptions</A></H4><P>A <B>MethodDesc</B> structure appears in various method-level attributes. This structure is the equivalent of the "Java method signature" for a COM/dispatch type. Either it is an array of <B>VtblTypeDesc</B> structures along with a <B>VtblTypeDesc</B> structure for the return type; or it is an array of <B>DispatchTypeDesc</B> structures along with a <B>DispatchTypeDesc</B> structure. 







<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

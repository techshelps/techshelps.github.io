<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Java Language Debug Reference</title>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000 dir=ltr>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Working with MS VM"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1></FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/virtual2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Microsoft VM"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="def_vm.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="VM"></A></TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="java_debug_api_lang_ref.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD>
</TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Java Language Debug Interfaces</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">VM</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><h2 STYLE="color:#333366"><a name="jsdk_java_debug_interfaces">Java Language Debug Reference Overview</a></h2>
<p>
This topic provides details about registration, notification, static information, and dynamic information interfaces.</p>
<p>
<b><a href="java_debug_api_lang_ref.htm">Registration Interfaces</a></b>
<p>
Use these interfaces to register Java classes for debugging and to receive notification when new Java processes are created. </p>
<p>
<b><a href="java_debug_api_lang_ref.htm">Notification Interfaces</a></b>
<p>
These interfaces are implemented by the debugger and are used to notify the debugger when new Java processes are created and when events occur on a specific Java process. </p>
<p>
<b><a href="java_debug_api_lang_ref_1.htm">Static Information Interfaces</a></b>
<p>
Static information on a Java process is available through the IRemoteField hierarchy of interfaces. These interfaces represent fields that are members of classes. These fields can be methods, objects, inner classes, or nested class definitions. Because all the attributes of a field are constant during its lifetime, this information can be cached by the debugger.</p>
<p>
The static information interfaces consist primarily of the IRemoteField interface and a collection of other interfaces designed for a specific Java object (primitive data types, arrays, classes, methods, and so on) that inherit from IRemoteField or from other interfaces that extend IRemoteField.</p>
<p>
<b><a href="java_debug_api_lang_ref_2.htm">Dynamic Information Interfaces</a></b>
<p>
Dynamic information on a Java process is available through the <b>IRemoteObject</b> hierarchy of interfaces. These interfaces provide bound access to objects of different types. An object does not necessarily refer to an instance of a class, but represents an instance of any type. The information obtained from an <b>IRemoteObject</b> is only valid during the lifetime of the actual object that it represents. Consequently, dynamic information cannot be cached by the debugger.</p>
<p>
Access to dynamic information in a Java process is based on using the <b>IRemoteThreadGroup</b> and <b>IRemoteThread</b> passed on each <b>ThreadGroupCreateEvent</b> and <b>ThreadCreateEvent</b> notification to the debugger. The <b>IRemoteProcess:GetGlobalContainerObject</b> method can also be used to access the root of this object hierarchy and descend down it to retrieve <b>IRemoteClassField</b> objects. </p>
<p>
The dynamic information interfaces consist primarily of <b>IRemoteObject</b>, <b>IRemoteObjectEx</b>, <b>IEnumRemoteObject</b>, the <b>IEnumRemoteValue</b> interfaces, and a collection of other interfaces designed for a specific Java object (primitive data types, arrays, or classes) that inherit from <b>IRemoteObject</b> or <b>IEnumRemoteValue</b>.</p>
</FONT></TD></TABLE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER></BODY>
</HTML>

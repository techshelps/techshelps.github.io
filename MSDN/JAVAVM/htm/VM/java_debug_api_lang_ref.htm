<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Java Language Debug Interfaces Reference</title>
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Working with MS VM"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1></FONT></TD></TR></TABLE>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/virtual2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Microsoft VM"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="java_vm_debug_ref.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="java_vm_debug_ref.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="VM"></A></TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="java_debug_api_lang_ref_1.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Java Language Debug Interfaces</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">VM</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH="20">&nbsp;</TD>
<TD>
<BR>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><H2 STYLE="color:#333366"><a name="jsdk_java_debug_interfaces"></a>Java Language Debug Interfaces Reference</H2>
<p>
<A HREF="#jsdk_ri">Registration Interfaces</A><BR>
<A HREF="#jsdk_ni">Notification Interfaces</A>
<P>
<H2><a name="jsdk_ri">Registration 
Interfaces</a></H2>
<p>
Use these interfaces to register Java classes for debugging and to 
receive notification when new Java processes are created. </p>
<H3>IRemoteDebugManager : IUnknown </H3>
<p>
The <b>IRemoteDebugManager</b> interface provides access to all Java 

processes that are currently running. This interface also provides a 

way to debug new Java processes that are created.</p>
<H4>IRemoteDebugManager::RegisterCallback</H4>
<p>
The <b>RegisterCallback</b> method is called by a debugger program to 

register a callback for receiving notification when new Java processes 

are created. The debugger must pass an interface to its own COM object 

that implements <b>IRemoteDebugManagerCallback</b>. The Microsoft Win32 

Virtual Machine for Java (Microsoft VM) communicates with the debugger 

by calling various methods on this callback interface. </p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT RegisterCallback(IRemoteDebugManagerCallback *pCallback)</FONT></pre>

<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=17%><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><b>Parameter</b></FONT></td>
<td width=83%><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><b>Description</b></FONT></td>
</tr>
<tr valign=top>
<td width=17%><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>[in] <i>pCallback </i></FONT></td>
<td width=83%><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>The callback that should receive notification when new Java processes are created. 
</FONT></td>
</tr>
</table><br>
<H4>IRemoteDebugManager::Detach </H4>
<p>
The <b>Detach</b> method is called by a debugger program to detach its 
callback (<b>IRemoteDebugManagerCallback</b>) that was registered by 
some previous call to <u>RegisterCallback</u>. This method should be 
called before the debugger exits.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT Detach(void)</FONT></pre>
<H4>IRemoteDebugManager::GetActiveProcesses </H4>
<p>
This <b>GetActiveProcesses</b> method is used to return an interface to 
an enumerator object (IJavaEnumRemoteProcess) for all Java processes 
currently running in the Microsoft VM.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT GetActiveProcesses(IJavaEnumRemoteProcess **ppEnum)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[out] <i>ppEnum </i></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">Returns an enumerator object for all Java processes currently running in the Microsoft VM.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteDebugManager::RequestCreateEvent </H4>
<p>
The <b>RequestCreateEvent</b> method notifies the Debug Manager in the 
Microsoft VM that a debugger program will be debugging a specific Java 
class. The debugger can specify a Java class name (for an applet or 
application) or request interest in debugging all Java classes. The 
debugger can also specify interest in Java classes run in a specific 
host Win32 process or any Win32 process.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT RequestCreateEvent(LPCOLESTR pcszProcessName,
     DWORD wParentProcessId)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pcszProcessName</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The name of the Java application or applet class to debug. If a null string is passed, all Java applications or applet classes.</FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>dwParentProcessId</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The Win32® process ID of the process that the applet or 
application will be run in. </FONT></TD>
</tr>
</table><br>
<p>
The <b>RequestCreateEvent</b> method takes two parameters that allow 
the debugger to register to receive notifications of all new processes 
created, or in a specific process (a particular Java class) when it is 
created within a particular Win32 process. There are four possible 
combinations of these two parameters. The debugger can pass –1 for the 
process ID registering to receive notifications for any Win32 process. 
Any other value for the dwProcessID parameter indicates a specific 
Win32 process. The debugger can pass a zero-length string for the 
process name (Java class name) registering to receive notification of 
any Java process that is started. Any other value for the 
<i>pcszProcessName</i> parameter indicates a specific Java class name 
passed as a Unicode string. </p>
<H3>IEnumRemoteProcess : IUnknown&nbsp; </H3>
<p>
The <b>IEnumRemoteProcess</b> interface is used to enumerate all Java 

processes currently running in the Microsoft VM.</p>
<H4>IEnumRemoteProcess::Next </H4>
<p>
The <b>Next</b> method is used to retrieve an array of 
<b>IRemoteProcess</b> objects that represent active Java processes. The 
number of Java processes to be retrieved is passed as one of the 
parameters; the enumeration pointer is incremented by that amount.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT Next(ULONG celt, IRemoteProcess *rgelt[], ULONG *pceltFetched)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>celt</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The number of IRemoteProcess objects requested to be retrieved. </FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[out] <i>drgelt</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The pointer to the array of IRemoteProcess objects that is retrieved.</FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[out] <i>pceltFetched</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The number of actual IRemoteProcess objects that was retrieved. </FONT></TD>
</tr>
</table><br>
<H4>IEnumRemoteProcess::Skip</H4>
<p>
The <b>Skip</b> method moves the position of the enumeration forward. 
The number of objects to be skipped is based on a parameter passed to 
the method.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT Skip(ULONG celt)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>celt</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The number of IRemoteProcess objects requested to be skipped. </FONT></TD>
</tr>
</table><br>
<H4>IEnumRemoteProcess::Reset</H4>
<p>
The <b>Reset</b> method sets or resets the positions of the enumerator 
to the beginning of the list of Java processes.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT Reset(void)</FONT></pre>
<H4>IEnumRemoteProcess::Clone</H4>
<p>
The <b>Clone</b> method copies a pointer to the current position in the 
list to another enumerator object.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT Clone(IJavaEnumRemoteProcess **ppEnum)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[out] <i>ppEnum </i></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">Returns an enumerator object pointing to Java processes currently running in the Microsoft VM representing the current position in the list of active Java processes.</FONT></TD>
</tr>
</table><br>
<H3>IJavaEnumRemoteProcess : IEnumRemoteProcess </H3>
<p>
The <b>IJavaEnumRemoteProcess</b> interface is used to enumerate all Java processes currently running in the Microsoft VM.</p>
<H4>IJavaEnumRemoteProcess::Next </H4>
<p>
The <b>Next</b> method is used to retrieve an array of <b>IRemoteProcess</b> objects that represent active Java processes. The number of Java processes to be retrieved is passed as one of the parameters; the enumeration pointer is incremented by that amount.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT Next(ULONG celt, IRemoteProcess *rgelt[], ULONG *pceltFetched)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>celt</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The number of IRemoteProcess objects requested to be retrieved. </FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[out] <i>drgelt</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The pointer to the array of IRemoteProcess objects that is retrieved.</FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[out] <i>pceltFetched</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The number of actual IRemoteProcess objects that was retrieved. </FONT></TD>
</tr>
</table><br>
<H4>IJavaEnumRemoteProcess::Skip</H4>
<p>
The <b>Skip</b> method moves the position of the enumeration forward. The number of objects to be skipped is based on a parameter passed to the method.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT Skip(ULONG celt)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>celt</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The number of IRemoteProcess objects requested to be skipped. </FONT></TD>
</tr>
</table><br>
<H4>IJavaEnumRemoteProcess::Reset</H4>
<p>
The <b>Reset</b> method sets or resets the positions of the enumerator to the beginning of the list of Java processes.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT Reset(void)</FONT></pre>
<H4>IJavaEnumRemoteProcess::Clone</H4>
<p>
The <b>Clone</b> method copies a pointer to the current position in the list to another enumerator object.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT Clone(IJavaEnumRemoteProcess **ppEnum)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[out] <i>ppEnum </i></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">Returns an enumerator object pointing to the Java processes currently running in the Microsoft VM representing the current position in the list of active Java processes.</FONT></TD>
</tr>
</table><br>
<H4>IJavaEnumRemoteProcess::GetNext </H4>
<p>
The <b>GetNext</b> method is used to retrieve the next <b>IRemoteProcess</b> object being pointed to by the enumerator object and increments the enumeration pointer by one.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT GetNext(IRemoteProcess **ppirp)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[out] <i>ppirp</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The pointer to the <b>IRemoteProcess</b> object that is retrieved.</FONT></TD>
</tr>
</table><br>
<H3>IRemoteProcess : IUnknown </H3>
<p>
An <b>IRemoteProcess</b> object represents a single Java process running within the Microsoft VM. Note that it does not represent the operating system process that the VM is being run in. </p>
<p>
Once a debugger has obtained a list of active Java processes—either through enumeration or from receiving <b>ProcessCreateEvent</b> method calls—it can attach to and debug a specific Java process. </p>
<p>
To debug a specific process, a debugger program must first register a callback to receive notifications and information from the Microsoft VM regarding that process. The <b>IRemoteProcess</b> object, another registration interface, is used for this task. </p>
<H4>IRemoteProcess::RegisterCallback </H4>
<p>
The <b>RegisterCallback</b> method is called by a debugger program to register a callback that should receive notification and information regarding this active Java process. The debugger must pass an interface to its own COM object that implements <b>IRemoteProcessCallback</b>. This is the primary interface that the Microsoft VM communicates with the debugger. The VM sends information to the debugger regarding this process by calling various methods on this callback interface.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT RegisterCallback(IRemoteProcessCallback *pCallback)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pCallback</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">A pointer to the COM interface implemented by the debugger that is to receive notifications for this Java process. </FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcess::Detach </H4>
<p>
The <b>Detach</b> method is called by a debugger program to detach its callback (<b>IRemoteProcessCallback</b>) that was registered by some previous call to RegisterCallback.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT Detach(void)</FONT></pre>
<H4>IRemoteProcess::Break </H4>
<p>
The <b>Break</b> method issues a break on all threads in this Java process, resulting in all threads being stopped. This method is asynchronous, so threads will not necessarily stop immediately.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT Break(void)</FONT></pre>
<H4>IRemoteProcess::GetGlobalContainerObject </H4>
<p>
The <b>GetGlobalContainer </b>method returns a pointer to an <b>IRemoteContainerObject</b>, representing the root of all objects in this Java process. This method is usually used by a debugger to collect static information on all class objects in a Java process.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT GetGlobalContainerObject(IRemoteContainerObject **ppGlobalContainerObject)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=32%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=68%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=32%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[out] <i>ppGlobalContainerObject</i> </FONT></TD>
<TD WIDTH=68%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">Returns a pointer to the global object for this Java process. </FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcess::FindClass </H4>
<p>
The <b>FindClass</b> method is used to find a specific Java class. If the class isn't already loaded in the Java process, it’s loaded by the Microsoft VM.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT FindClass(LPCOLESTR pcszClassName, IRemoteClassField **ppClassType)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=32%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=68%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=32%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pcszClassName</i> </FONT></TD>
<TD WIDTH=68%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The name of the class to find. </FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=32%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[out] <i>ppClassType</i> </FONT></TD>
<TD WIDTH=68%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">Returns the specified class. If the class is not already loaded in the Java process, it is loaded. </FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcess::TraceMethods </H4>
<p>
The <b>TraceMethods</b> method enables or disables <b>IRemoteProcessCallback::TraceEvent</b> callbacks used for notification of method calls when method call tracing is enabled. This method is being deprecated. Developers should use the newer Java 
Profiler interfaces.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT TraceMethods(BOOL bTraceOn)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>bTraceOn</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">Set to TRUE to enable method call tracing, or FALSE to disable method call tracing. </FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcess::GetThreadGroups </H4>
<p>
The <b>GetThreadGroups</b> method returns an enumerator object (<b>IJavaEnumRemoteThreadGroup</b>) for all the thread groups in the Java process. This method is usually used by a debugger to collect dynamic information on all threads and class objects in a Java process.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT GetThreadGroups(IJavaEnumRemoteThreadGroup **ppEnum)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[out] <i>ppEnum</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">Returns an enumerator for the thread groups in the Java process.</FONT></TD>
</tr>
</table><br>
<a name="jsdk_ni"><H2>Notification Interfaces</H2></a>
<p>
These interfaces are implemented by the debugger and are used to notify the debugger when new Java processes are created and when events occur on a specific Java process. </p>
<H3>IRemoteDebugManagerCallback : IUnknown </H3>
<p>
This <b>IRemoteDebugManager</b> object is the initial callback through which the Microsoft VM communicates with the debugger. This callback must be registered by the debugger with the Java Debug Manager. This object has a single method that receives notification from the VM when new Java processes are created. The <b>IRemoteDebugManager</b> interface is used to notify the debugger when new Java processes are created. The debugger can register an interest in receiving these notifications on all Java processes or specific Java processes. An interest in only specific Java processes can be registered by Java class name and/or by a specific Win32 process (Win32 process ID). Notifications sent on this interface will only be for those processes 
that the Java debugger has registered an interest in.</p>
<H4>IRemoteDebugManagerCallback::ProcessCreateEvent </H4>
<p>
The <b>ProcessCreateEvent </b>method notifies the debugger that a new Java process has been created and passes back a pointer to the <b>IRemoteProcess</b> object for this new Java class.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ProcessCreateEvent(IRemoteProcess *pProcessNew,
     IRemoteProcess *pProcessParent)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pProcessNew</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The Java process being created. </FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pProcessParent</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The Java process that caused the new Java process to be created. The <i>pProcessParent</i> parameter is NULL if the Java process is not being created as the child of another Java process.</FONT></TD>
</tr>
</table><br>
<H3>IRemoteDebugManagerCallbackEx : IRemoteDebugManagerCallback </H3>
<p>
This <b>IRemoteDebugManagerCallbackEx</b> object is the initial callback through which the Microsoft VM communicates with the debugger. This callback must be registered by the debugger with the Java Debug Manager. This object inherits from and is a replacement for the <b>IRemoteDebugManagerCallback</b> object. This interface and is only necessary if the debugger wants to support Just-In-Time (JIT) debugging.</p>
<p>
This object receives notification from the VM when new Java processes are created. The <b>IRemoteDebugManagerEx</b> interface is used to notify the debugger when new Java processes are created. The debugger can register an interest in receiving these notifications on all Java processes or specific Java processes. An interest in only specific Java processes can be registered by Java class name and/or by a specific Win32 process (Win32 process ID). Notifications sent on this interface will only be for those processes that the Java debugger has registered an interest in.</p>
<H4>IRemoteDebugManagerCallbackEx::ProcessCreateEvent </H4>
<p>
The <b>ProcessCreateEvent </b>method notifies the debugger that a new Java process has been created and passes back a pointer to the <b>IRemoteProcess</b> object for this new Java class.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ProcessCreateEvent(IRemoteProcess *pProcessNew,
     IRemoteProcess *pProcessParent)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pProcessNew</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The Java process being created. </FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pProcessParent</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The Java process that caused the new Java process to be created. The <i>pProcessParent</i> parameter is NULL if the Java process is not being created as the child of another Java process.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteDebugManagerCallbackEx::StartClassEvent </H4>
<p>
The <b>StartClassEvent </b>method notifies the debugger regarding the Java class that the VM was started for. For example, if the VM was started with JView using the command line "JView Hello", the start class would be Hello.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT StartClassEvent(LPCOLESTR *pcstrStartClass)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pcstrStartClass</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The Java class that the VM was started for. </FONT></TD>
</tr>
</table><br>
<H3>IRemoteProcessCallback : IUnknown </H3>
<p>
The <b>IRemoteProcessCallback </b>object is the primary callback through which the VM communicates with the debugger and passes notifications and information requested concerning a specific Java process. No execution of the Java process occurs during the handling of these events. The debugger returns S_OK to leave execution suspended in the Java process, or S_FALSE to continue execution in the Java process. The <i>pThread</i> input argument to each event notification method is a thread object that represents the thread that generated the event.</p>
<p>
When a Java process starts in the Microsoft VM, the debugger will be notified through its <b>IRemoteDebugManagerCallback::ProcessCreateEvent</b> method that a new Java process has been created. If the debugger decides to, it can register to receive notifications regarding this specific Java process. The <b>IRemoteProcessCallback</b> (or the <b>IRemoteProcessCallbackEx</b>) object is the primary way the Microsoft VM communicates with the debugger about a specific Java process. This callback has a large number of methods that must be implemented by the debugger.</p>
<H4>IRemoteProcessCallback::DebugStringEvent </H4>
<p>
The <b>DebugStringEvent </b>method notifies the debugger when the Java process being debugged outputs a string.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT DebugStringEvent(IRemoteThread *pThread,
     LPCOLESTR pcszDebugString)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pcszDebugString</i> </FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The string from the Java process. </FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback::CodeBreakpointEvent </H4>
<p>
The <b>CodeBreakpointEvent </b>method notifies the debugger when a code breakpoint is hit by the Java process being debugged.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT CodeBreakpointEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback::DataBreakpointEvent </H4>
<p>
The <b>DataBreakpointEvent</b> method notifies the debugger when a data breakpoint is hit by the Java process being debugged.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT DataBreakpointEvent(IRemoteThread *pThread,
     IRemoteObject *pObject)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pObject</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The object that changed to cause the breakpoint to be triggered. </FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback::ExceptionEvent </H4>
<p>
The <b>ExceptionEvent</b> method notifies the debugger when an exception occurs in the Java process being debugged.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ExceptionEvent(IRemoteThread *pThread, IRemoteClassField *pExceptionClass,
     EXCEPTIONKIND exceptionKind)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pExceptionClass</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The class of the object throwing the exception. </FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>exceptionKind</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The kind of exception that occurred. 
<pre><FONT FACE="COURIER" SIZE="2">typedef enum exceptionkind {
   EXCEPTION_KIND_FIRST_CHANCE   = 0x01,
   EXCEPTION_KIND_LAST_CHANCE   = 0x02,
} EXCEPTIONKIND;</FONT></pre>
</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback::StepEvent </H4>
<p>
The <b>StepEvent</b> method notifies the debugger when an execution step completes in the Java process being debugged.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT StepEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback::CanStopEvent </H4>
<p>
The <b>CanStopEvent</b> method notifies the debugger during a range step when the Java process being debugged makes a function call.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT CanStopEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback::BreakEvent </H4>
<p>
The <b>BreakEvent </b>method notifies the debugger when an asynchronous break occurs in response to the debugger calling <b>IRemoteProcess:Break</b>.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT BreakEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback::ThreadCreateEvent </H4>
<p>
The <b>ThreadCreateEvent </b>method notifies the debugger when a thread is created.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ThreadCreateEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback::ThreadDestroyEvent </H4>
<p>
The <b>ThreadDestroyEvent </b>method notifies the debugger when a thread is destroyed.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ThreadDestroyEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback::ThreadGroupCreateEvent </H4>
<p>
The <b>ThreadGroupCreateEvent </b>method notifies the debugger when a thread group is created.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ThreadGroupCreateEvent(IRemoteThread *pThread,
      IRemoteThreadGroup *pThreadGroup)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" 
Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThreadGroup</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The new thread group that is created. </FONT></TD>
</tr>
</table><br>
<H4>RemoteProcessCallback::ThreadGroupDestroyEvent</H4>
<p>
The <b>ThreadGroupDestroyEvent </b>method notifies the debugger when a thread group is destroyed.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ThreadGroupDestroyEvent(IRemoteThread *pThread,
     IRemoteThreadGroup *pThreadGroup)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThreadGroup</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread group that is destroyed. </FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback::ClassLoadEvent</H4>
<p>
The <b>ClassLoadEvent </b>method notifies the debugger when a Java class is loaded and indicates the thread on which the class was loaded.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ClassLoadEvent(IRemoteThread *pThread, IRemoteClassField *pClassType)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pClassType</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The class that was loaded. </FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback:: LoadCompleteEvent</H4>
<p>
The <b>LoadCompleteEvent</b> method notifies the debugger when all Java class have been loaded.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT LoadCompleteEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback::ClassUnloadEvent</H4>
<p>
The <b>ClassUnloadEvent</b> method notifies the debugger when a Java class has been unloaded.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ClassUnloadEvent(IRemoteThread *pThread, IRemoteClassField *pClassType)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pClassType</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The class that was unloaded. </FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback::TraceEvent</H4>
<p>
The <b>TraceEvent</b> method notifies the debugger while tracing is enabled when a method is entered in a Java class. This method is being deprecated. Developers should use the newer Java Profiler interfaces.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT TraceEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallback::ProcessDestroyEvent</H4>
<p>
The <b>ProcessDestroyEvent </b>method notifies the debugger when a Java process terminates. No further notifications are sent to the debugger regarding this Java process after this method is called.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ProcessDestroyEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H3>IRemoteProcessCallbackEx : IRemoteProcessCallback </H3>
<p>
The <b>IRemoteProcessCallbackEx </b>object is the primary callback through which the VM communicates with the debugger and passes notifications and information requested concerning a specific Java process. No execution of the Java process occurs during the handling of these events. The debugger returns S_OK to leave execution suspended in the Java process, or S_FALSE to continue execution in the Java process. The <i>pThread</i> input argument to each event notification method is a thread object that represents the thread that generated the event.</p>
<p>
When a Java process starts in the Microsoft VM, the debugger will be notified through its <b>IRemoteDebugManagerCallback::ProcessCreateEvent</b> method that a new Java process has been created. If the debugger decides to, it can register to receive notifications regarding this specific Java process. The <b>IRemoteProcessCallbackEx</b> (or the <b>IRemoteProcessCallback</b>) object is the primary way the Microsoft VM communicates with the debugger about a specific Java process. This callback has a large number of methods that must be implemented by the debugger.</p>
<p>
A debugger will normally implement either the <b>IRemoteProcessCallback</b> or the <b>IRemoteProcessCallbackEx</b> interface (which extends the former interface by adding one new method). The Microsoft VM senses which interface the debugger supports by calling <b>QueryInterface</b> on the callback object passed to <b>IRemoteProcess::RegisterCallback</b>. </p>
<H4>IRemoteProcessCallbackEx::DebugStringEvent </H4>
<p>
The <b>DebugStringEvent </b>method notifies the debugger when the Java process being debugged outputs a string.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT DebugStringEvent(IRemoteThread *pThread, LPCOLESTR pcszDebugString)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pcszDebugString</i> </FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The string from the Java process. </FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::CodeBreakpointEvent </H4>
<p>
The <b>CodeBreakpointEvent </b>method notifies the debugger when a code breakpoint is hit by the Java process being debugged.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT CodeBreakpointEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::DataBreakpointEvent </H4>
<p>
The <b>DataBreakpointEvent</b> method notifies the debugger when a data breakpoint is hit by the Java process being debugged.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT DataBreakpointEvent(IRemoteThread *pThread, IRemoteObject *pObject)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pObject</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The object that changed to cause the breakpoint to be triggered. </FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::ExceptionEvent </H4>
<p>
The <b>ExceptionEvent</b> method notifies the debugger when an exception occurs in the Java process being debugged.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ExceptionEvent(IRemoteThread *pThread, IRemoteClassField *pExceptionClass,
     EXCEPTIONKIND exceptionKind)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pExceptionClass</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The class of the object throwing the exception. </FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>exceptionKind</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The kind of exception that occurred. 
<pre><FONT FACE="COURIER" SIZE="2">typedef enum exceptionkind {
   EXCEPTION_KIND_FIRST_CHANCE   = 0x01,
   EXCEPTION_KIND_LAST_CHANCE   = 0x02,
} EXCEPTIONKIND;</FONT></pre>
</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::StepEvent </H4>
<p>
The <b>StepEvent</b> method notifies the debugger when an execution step completes in the Java process being debugged.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT StepEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::CanStopEvent </H4>
<p>
The <b>CanStopEvent</b> method notifies the debugger during a range step when the Java process being debugged makes a function call.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT CanStopEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::BreakEvent </H4>
<p>
The <b>BreakEvent </b>method notifies the debugger when an asynchronous break occurs in response to the debugger calling <b>IRemoteProcess:Break</b>.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT BreakEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::ThreadCreateEvent </H4>
<p>
The <b>ThreadCreateEvent </b>method notifies the debugger when a thread is created.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ThreadCreateEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::ThreadDestroyEvent </H4>
<p>
The <b>ThreadDestroyEvent </b>method notifies the debugger when a thread is destroyed.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ThreadDestroyEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::ThreadGroupCreateEvent </H4>
<p>
The <b>ThreadGroupCreateEvent </b>method notifies the debugger when a thread group is created.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ThreadGroupCreateEvent(IRemoteThread *pThread,
     IRemoteThreadGroup *pThreadGroup)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThreadGroup</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The new thread group that is created. </FONT></TD>
</tr>
</table><br>
<H4>RemoteProcessCallbackEx::ThreadGroupDestroyEvent</H4>
<p>
The <b>ThreadGroupDestroyEvent </b>method notifies the debugger when a thread group is destroyed.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ThreadGroupDestroyEvent(IRemoteThread *pThread,
     IRemoteThreadGroup *pThreadGroup)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThreadGroup</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread group that is destroyed. </FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::ClassLoadEvent</H4>
<p>
The <b>ClassLoadEvent </b>method notifies the debugger when a Java class is loaded and indicates the thread on which the class was loaded.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ClassLoadEvent(IRemoteThread *pThread,
     IRemoteClassField *pClassType)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pClassType</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The class that was loaded. </FONT></TD>
</tr>
</table><br>
<p>
After a debugger registers an interest in a particular Java process (<b>IRemoteProcess</b>), it will begin to receive a large number of calls to its <b>LoadClassEvent</b> method for each class that was loaded before the debugger was attached. The debugger might receive over 100 calls for a typical Java process. These notifications to the debugger are initially made asynchronously by the Microsoft VM. After notifications are made for all the currently loaded classes, a <b>LoadCompleteEvent</b> is received. After this notification, any other <b>ClassLoadEvent</b> notifications are sent synchronously for the thread that caused the class to be loaded.</p>
<p>
If the debugger returns S_OK from a <b>ClassLoadEvent</b> method, this Java process is suspended and class loading by the Microsoft VM becomes synchronous. The execution of the Java process can be resumed once the debugger calls <b>IRemoteThread::Go</b>. If the debugger returns S_FALSE from each <b>ClassLoadEvent</b> call, the process of loading Java classes continues. </p>
<H4>IRemoteProcessCallbackEx:: LoadCompleteEvent</H4>
<p>
The <b>LoadCompleteEvent</b> method notifies the debugger when all Java classes have been loaded.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT LoadCompleteEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::ClassUnloadEvent</H4>
<p>
The <b>ClassUnloadEvent</b> method notifies the debugger when a Java class has been unloaded.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ClassUnloadEvent(IRemoteThread *pThread,
     IRemoteClassField *pClassType)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
<tr valign=top>
<td width=27%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pClassType</i> </FONT></TD>
<TD WIDTH=73%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The class that was unloaded. </FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::TraceEvent</H4>
<p>
The <b>TraceEvent</b> method notifies the debugger while tracing is enabled when a method is entered in a Java class. This method is being deprecated. Developers should use the newer Java Profiler interfaces.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT TraceEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::ProcessDestroyEvent</H4>
<p>
The <b>ProcessDestroyEvent </b>method notifies the debugger when a Java process terminates. No further notifications are sent to the debugger regarding this Java process after this method is called.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT ProcessDestroyEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
<H4>IRemoteProcessCallbackEx::StartClassEvent</H4>
<p>
The <b>StartClassEvent </b>method notifies the debugger regarding the Java class that the VM was started for. This method is only implemented by the <b>IRemoteProcessCallbackEx</b> object.</p>
<pre><FONT FACE="COURIER" SIZE="2">HRESULT StartClassEvent(IRemoteThread *pThread)</FONT></pre>
<TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Parameter</b></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2"><b>Description</b></FONT></TD>
</tr>
<tr valign=top>
<TD WIDTH=28%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">[in] <i>pThread</i></FONT></TD>
<TD WIDTH=72%><FONT FACE="VERDANA,ARIAL,HELVETICA" Size="2">The thread object that represents the thread that generated the event.</FONT></TD>
</tr>
</table><br>
</FONT></TD></TABLE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER></BODY>
</HTML>

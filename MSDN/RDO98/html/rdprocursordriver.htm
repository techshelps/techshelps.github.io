<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CursorDriver Property (Remote Data)</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="rdprocursordriver"></a>CursorDriver Property (Remote Data)</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdproCursorDriver_C;rdproCursorDriverC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdproCursorDriver_X;rdproCursorDriverX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Applies To">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdproCursorDriver_A;rdproCursorDriverA">
</object></p>
<p>
Returns or sets a value that specifies the type of <a href="rddefcursor.htm">cursor</a> to be created.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>object</i><b>.CursorDriver </b>[= <i>value</i>]</p>
<p>
The <b>CursorDriver</b> property syntax has these parts:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=19%><b>Part</b></td>
<td class=label width=81%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=19%><i>object</i></td>
<td width=81%>An <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defobjectexpression">
</object><a href=JavaScript:alink_4.Click()>object expression</a> that evaluates to an object in the Applies To list.</td>
</tr>
<tr valign=top>
<td width=19%><i>value</i></td>
<td width=81%>An <b>Integer</b> or constant as described in Settings.</td>
</tr>
</table><br>
<p class=label>
<b>Settings</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Constant</b></td>
<td class=label width=16%><b>Value</b></td>
<td class=label width=51%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%><b>rdUseIfNeeded</b></td>
<td width=16%>0</td>
<td width=51%>The <a href="rddefodbcdriver.htm">ODBC driver</a> will choose the appropriate style of cursors. <a href="rddefserversidecursor.htm">Server-side cursors</a> are used if they are available.</td>
</tr>
<tr valign=top>
<td width=33%><b>rdUseOdbc</b> </td>
<td width=16%>1</td>
<td width=51%><b>RemoteData</b> will use the <a href="rddefodbc.htm">ODBC</a> cursor library. </td>
</tr>
<tr valign=top>
<td width=33%><b>rdUseServer</b> </td>
<td width=16%>2</td>
<td width=51%>Use server-side cursors.</td>
</tr>
<tr valign=top>
<td width=33%><b>rdUseClientBatch</b></td>
<td width=16%>3</td>
<td width=51%>RDO will use the optimistic batch cursor library.</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p>
The <b>CursorDriver</b> property only affects connections established <i>after</i> the <b>CursorDriver</b> property has been set — the property is read-only on existing connections.</p>
<p>
When the initial (default), and each subsequent <b>rdoEnvironment</b> object is created, the <b>CursorDriver</b> property is set from the <b>rdoEngine</b> object's <b>rdoDefaultCursorDriver</b> property which is set using the same constants.</p>
<p class=label>
<b>Choosing a Cursor Driver</b></p>
<p>
Choosing the right cursor driver can have a significant impact on the overall performance of your application, what resources are consumed by the cursor, and limit the type or complexity of the cursors you create. Each type of cursor has its own benefits and limitations. In many cases, the best choice is no cursor at all because your application often does not need to scroll through the data or perform update operations against a keyset.</p>
<p>
The following paragraphs outline the functionality and suggested purposes for each of the cursor types.
<ul type=disc>
<li>
Server-Side Cursors<ul type=disc>
<li>
This cursor library maintains the cursor keyset on the server (in <i>TempDB</i>) which eliminates the need to transmit the keyset to the workstation where it consumes needed resources. However, this cursor driver consumes <i>TempDB</i> space on the remote server so this database must be expanded to meet this requirement. Cursors created with the server-side driver cannot contain more than one SELECT statement – if they do, a trappable error is fired. You can still use the server-side cursor driver with multiple result set queries if you disable the cursor by creating a forward-only, read-only cursor with a rowset size of one. Not all remote servers support server-side cursors. Note that server-side cursors are enabled when using either <b>rdUseIfNeeded</b> or <b>rdUseServer</b> against Microsoft SQL Server databases.</li>
</ul>
</li>
<li>
ODBC Client-Side Cursors<ul type=disc>
<li>
This cursor library builds keysets on the workstation in local RAM overflowing to disk if necessary. Because of this design considerably more network operations must be performed to initially create the keyset, but with small cursors this should not impose a significant load on the workstation or network. ODBC client-side cursors do not impose any type of restriction on the type of query executed. This option gives better performance for small <u>result sets,</u> but degrades quickly for larger result sets.</li>
</ul>
</li>
<li>
Client-Batch Cursors<ul type=disc>
<li>
This cursor library is designed to deal with the special requirements of optimistic batch updates and several other more complex cursor features. Client-batch cursors are required for dissociate connections, batch mode, and multi-table updates. This cursor also supports delayed BLOB column fetch, buffered cursors, and additional control over updates. This library is somewhat larger than the others, but also performs better in many situations.</li>
</ul>
</li>
<li>
The No-Cursor Option<ul type=disc>
<li>
In cases where you need to fetch rows quickly, or perform action queries against the database without the overhead of a cursor, you can choose to instruct RDO to bypass creation of a cursor. Basically, this option creates a forward-only, read-only result set with a <b>RowsetSize</b> set to 1. This option can improve performance in many operations. While you cannot update rows or scroll between rows with this cursor, you can submit independent action queries to manipulate data. This option is especially useful when accessing data through stored procedures.</li>
</ul>
</li>
</ul>
</BODY>
</HTML>

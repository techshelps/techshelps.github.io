<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>rdoResultset Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="rdobjrdoresultset"></a>rdoResultset Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoResultSet_C;rdobjrdoResultsetC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoResultSet_X;rdobjrdoResultSetX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdidxrdoResultsetP;rdobjrdoResultSet_P">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdidxrdoResultsetM;rdobjrdoResultSet_M">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Events">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoResultSet_E;rdobjrdoResultSetE">
</object></p>
<p>
An <b>rdoResultset</b> object represents the <a href="rddefrow.htm">rows</a> that result from running a <a href="rddefquery.htm">query</a></p>
<p>
<img src="parchild.gif" border=0><a href="rdobjrdoconnection.htm"><img src="rdoconn.gif" border=0></a><br>
<img src="space.gif" border=0><img src="parchild.gif" border=0><a href="rdobjrdoresultsetscollection.htm"><img src="rdorslts.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="parchild.gif" border=0><img src="rdorslt.gif" border=0><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="space.gif" border=0><img src="parchild.gif" border=0><a href="rdobjrdocolumnscollection.htm"><img src="rdocols.gif" border=0></a></p>
<p class=label>
<b>Remarks</b></p>
<p>
When you use <a href="rddefremotedataobject.htm">remote data objects</a>, you interact with data almost entirely using <b>rdoResultset</b> objects. <b>rdoResultset</b> objects are created using the <a href="rddefdata.htm">RemoteData control</a>, or the <b>OpenResultset</b> method of the <b>rdoQuery</b>, <b>rdoTable,</b> or <b>rdoConnection</b> object.</p>
<p>
When you execute a query that contains one or more SQL SELECT statements, the <a href="rddefdatasource.htm">data source</a> returns zero or more rows in an <b>rdoResultset</b> object. All <b>rdoResultset</b> objects are constructed using rows and <a href="rddefcolumn.htm">columns</a>.</p>
<p>
A single <b>rdoResultset</b> can contain zero or any number of <a href="idh_rddefresultset.htm">result sets</a> —  so-called "multiple" result sets. Once you have completed processing the first result set in an <b>rdoResultset</b> object, use the <b>MoreResults</b> method to discard the current <b>rdoResultset</b> rows and activate the next <b>rdoResultset</b>. You can process individual rows of the new result set just as you processed the first <b>rdoResultset</b>. You can repeat this until the <b>MoreResults</b> method returns <b>False</b>.</p>
<p>
A new <b>rdoResultset</b> is automatically added to the <b>rdoResultsets</b> collection when you open the object, and it's automatically removed when you close it.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; RDO 1.0 collections behave differently than Data Access Object (DAO) collections. When you <b>Set</b> a variable containing a reference to a RDO object like <b>rdoResultset</b>, the existing <b>rdoResultset</b> is <i>not</i> closed and removed from the <b>rdoResultsets</b> collection. The existing object remains open and a member of its respective collection.</p>
<p class=indent>
In contrast, RDO 2.0 collections do not behave in this manner. When you use the <b>Set</b> statement to assign a variable containing a reference to an RDO object, the existing object <i>is</i> closed and removed from the associated collection. This change is designed to make RDO more compatible with DAO.</p>
<p class=label>
<b>Processing Multiple Result Sets</b></p>
<p>
When you execute a query that contains more than one SELECT statement, you must use the <b>MoreResults</b> method to discard the current <b>rdoResultset</b> rows and activate each subsequent <b>rdoResultset</b>. Each of the <b>rdoResultset</b> rows <i>must</i> be processed or discarded before you can process subsequent result sets. To process result set rows, use the <i>Move</i> methods to position to individual rows, or the <b>MoveLast</b> method to position to the last row of the <b>rdoResultset</b>. You can use the <b>Cancel</b> or <b>Close</b> methods against <b>rdoResultset</b> objects that have not been fully processed.</p>
<p class=label>
<b>Choosing a Cursor Type</b></p>
<p>
You can choose the type of <b>rdoResultset</b> object you want to create using the <i>type</i> argument of the <b>OpenResultset</b> method – the default <b>Type</b> is <b>rdOpenForwardOnly</b> for RDO and <b>rdOpenKeyset</b> for the <b>RemoteData</b> control. If you specify <b>rdUseNone</b> as the <b>CursorDriver</b> property, a forward-only, read-only result set is created. Each type of <b>rdoResultset</b> can contain columns from one or more <a href="rddeftable.htm">tables</a> in a <a href="rddefdatabase.htm">database</a>.</p>
<p>
There are four types of <b>rdoResultset</b> objects based on the type of <a href="rddefcursor.htm">cursor</a> that is created to access the data:
<ul type=disc>
<li>
Forward-only — type <b>rdoResultset</b> — individual rows in the result set can be accessed and can be updatable (when using <a href="rddefserversidecursor.htm">server-side cursors</a>), but the current row pointer can only be moved toward the end of the <b>rdoResultset </b>using the <b>MoveNext</b> method — no other method is supported.<br><br></li>
<li>
Static-type <b>rdoResultset</b> — a static copy of a set of rows that you can use to find data or generate reports. Static cursors might be updatable when using either the <a href="rddefodbc.htm">ODBC</a> cursor library or server-side cursors, depending on which drivers are supported and whether the source data can be updated.<br><br></li>
<li>
Keyset-type <b>rdoResultset</b> — the result of a query that can have updatable rows. Movement within the <a href="rddefkeyset.htm">keyset</a> is unrestricted. A keyset-type <b>rdoResultset</b> is a dynamic set of rows that you can use to add, change, or delete rows from an underlying database table or tables. Membership of a keyset <b>rdoResultset</b> is fixed.<br><br></li>
<li>
Dynamic-type <b>rdoResultset</b> — the result of a query that can have updatable rows. A dynamic-type <b>rdoResultset</b> is a dynamic set of rows that you can use to add, change, or delete rows from an underlying database table or tables. Membership of a dynamic-type <b>rdoResultset</b> is not fixed.</li>
</ul>
<p class=label>
<b>Dissociate rdoResultset objects</b></p>
<p>
When using the client batch cursor library, RDO permits you to disconnect an <b>rdoResultset</b> object from the <b>rdoConnection</b> object used to populate its rows by setting the <b>ActiveConnection</b> property to <b>Nothing</b>. While dissociated, the <b>rdoResultset</b> object becomes a temporary static snapshot of a local cursor. It can be updated, new rows can be added and rows can be removed from this <b>rdoResultset</b>. You can re-associate the <b>rdoResultset</b>  by setting the <b>ActiveConnection</b> property to another (or the same) <b>rdoConnection</b> object. Once reconnected, you can use the <b>BatchUpdate</b> method to synchronize the <b>rdoResultset</b> with a remote database.</p>
<p>
To perform this type of dissociated update operation, you should open the <b>rdoResultset</b> using an <b>rdOpenStatic</b> cursor, and use the <b>rdConcurBatch</b> as the concurrency option.</p>
<p class=label>
<b>Managing rdoResultset Object Properties and Methods</b></p>
<p>
You can use the methods and properties of the <b>rdoResultset</b> object to manipulate data and navigate the rows of a result set. For example, you can:
<ul type=disc>
<li>
Use the <b>Type</b> property to indicate the type of <b>rdoResultset</b> created, and the <b>Updatable</b> property indicates whether or not you can change the object's rows.<br><br></li>
<li>
Use the <b>BOF</b> and <b>EOF</b> properties to see if the current row pointer is positioned beyond either end of the <b>rdoResultset</b> or it contains no rows.<br><br></li>
<li>
Use the <b>MoveNext</b> method to reposition the current row in forward-only type <b>rdoResultset</b> objects.<br><br></li>
<li>
Use the <b>Bookmarkable, Transactions</b>, and <b>Restartable</b> properties to determine if the <b>rdoResultset</b> supports bookmarks or transactions, or can be restarted.<br><br></li>
<li>
Use the <b>LockEdits</b> property to determine the type of locking used to update the <b>rdoResultset</b>.<br><br></li>
<li>
Use the <b>RowCount</b> property to determine how many rows in the <b>rdoResultset</b> are available. If the <b>RowCount</b> property returns -1, RDO cannot determine how many rows have been processed. Only when you move to <b>EOF</b> does the <b>RowCount</b> property reflect the number of rows returned by the query. Not all cursor types support this functionality. The <b>RowCount</b> property returns -1 if it is not available.<br><br></li>
<li>
Use the <b>AddNew</b>, <b>Edit</b>, <b>Update</b>, and <b>Delete</b> methods to add new rows or otherwise modify updatable <b>rdoResultset</b> objects. Use the <b>CancelUpdate</b> method to cancel pending edits.<br><br></li>
<li>
Use the <b>Requery</b> method to restart the query used to create an <b>rdoResultset</b> object. This method can be used to re-execute a parameterized query.<br><br></li>
<li>
Use the <b>MoreResults</b> method to complete processing of the current <b>rdoResultset</b> and begin processing the next result set generated from a query. Use the <b>Cancel</b> method to terminate processing of all pending queries when the query contains more than one SQL operation. When you use the <b>Close</b> method against an <b>rdoResultset</b>, all pending queries are flushed and the <b>rdoResultset</b> is automatically dropped from the <b>rdoResultsets</b> collection.<br><br></li>
<li>
Use the <b>Close</b> method to terminate and deallocate the <b>rdoResultset</b> object and remove it from the <b>rdoResultsets</b> collection.</li>
</ul>
<p class=label>
<b>rdoResultset Events</b></p>
<p>
The following events are fired as the <b>rdoResultset</b> object is manipulated. These can be used to micro-manage result sets or to synchronize other processes with the operations performed on the <b>rdoResultset</b> object.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Event Name</b></td>
<td class=label width=67%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%>Associate</td>
<td width=67%>Fired after a new connection is associated with the object.</td>
</tr>
<tr valign=top>
<td width=33%>ResultsChange</td>
<td width=67%>Fired after current rowset is changed (multiple result sets).</td>
</tr>
<tr valign=top>
<td width=33%>Dissociate</td>
<td width=67%>Fired after the connection is set to nothing.</td>
</tr>
<tr valign=top>
<td width=33%>QueryComplete</td>
<td width=67%>Fired after a query has completed.</td>
</tr>
<tr valign=top>
<td width=33%>RowStatusChange</td>
<td width=67%>Fired after the state of the current row has changed (edit, delete, insert).</td>
</tr>
<tr valign=top>
<td width=33%>RowCurrencyChange</td>
<td width=67%>Fired after the current row pointer is repositioned.</td>
</tr>
<tr valign=top>
<td width=33%>WillAssociate</td>
<td width=67%>Fired before a new connection is associated with the object.</td>
</tr>
<tr valign=top>
<td width=33%>WillDissociate</td>
<td width=67%>Fired before the connection is set to nothing.</td>
</tr>
<tr valign=top>
<td width=33%>WillUpdateRows</td>
<td width=67%>Fired before an update to the server occurs.</td>
</tr>
</table><br>
<p class=label>
<b>Executing Multiple Operations on a Connection</b></p>
<p>
If there is an unpopulated <b>rdoResultset</b> pending on a data source that can only support a single operation on an <b>rdoConnection</b> object, you cannot create additional <b>rdoQuery</b> or <b>rdoResultset </b>objects<b>,</b> or use the <b>Refresh</b> method on the <b>rdoTable</b> object until the <b>rdoResultset</b> is flushed, closed, or fully populated. For example, when using SQL Server 4.2 as a data source, you cannot create an additional <b>rdoResultset</b> object until you move to the last row of the last result set of the current <b>rdoResultset</b> object. To populate the result set, use the <b>MoreResults</b> method to move through all pending result sets, or use the <b>Cancel</b> or <b>Close</b> method on the <b>rdoResultset</b> to flush all pending result sets.</p>
<p class=label>
<b>Handing Beginning and End of File Conditions</b></p>
<p>
When you create an <b>rdoResultset</b>, the <a href="rddefcurrentrow.htm">current row</a> is positioned to the first row if there are any rows. If there are no rows, the <b>RowCount</b> property setting is 0, and the <b>BOF</b> and <b>EOF</b> property settings are both <b>True</b>.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; An <b>rdoResultset</b> may not be updatable even if you request an updatable <b>rdoResultset</b>. If the underlying database, table, or column isn't updatable, or if your user does not have update <a href="rddefpermission.htm">permission</a>, all or portions of your <b>rdoResultset</b> may be read-only. Examine the <b>rdoConnection</b>, <b>rdoResultset,</b>  and <b>rdoColumn</b> objects' <b>Updatable</b> property to determine if your code can change the rows.</p>
<p class=label>
<b>Closing rdoResultset objects</b></p>
<p>
Use the <b>Close</b> method to remove an <b>rdoResultset</b> object from the <b>rdoResultsets</b> collection, disassociate it from its connection, and free all associated resources. No events are fired when you use the <b>Close</b> method.</p>
<p>
Setting the <b>ActiveConnection</b> property to <b>Nothing</b> removes the <b>rdoResultset</b> object from the <b>rdoResultsets</b> collection and fires events, but does not deallocate the object resources. Setting the <b>rdoResultset</b> object's <b>ActiveConnection</b> property to a valid <b>rdoConnection</b> object causes the <b>rdoResultset</b> object to be re-appended to the <b>rdoResultsets</b> collection of the <b>rdoConnection</b> object.</p>
<p class=label>
<b>Addressing rdoResultset Objects</b></p>
<p>
The default collection of an <b>rdoResultset</b> is the <b>rdoColumns</b> collection, and the default property of an <b>rdoColumn</b> object is the <b>Value</b> property. You can simplify your code by taking advantage of these defaults. For example, the following lines of code all set the value of the <code>PubID</code> column in the current row of an <b>rdoResultset</b>:</p>
<pre><code>MyRs.rdoColumns("PubID").Value = 99
MyRs("PubID") = 99
MyRs!PubID = 99
' This is the first column 
' returned by the SELECT statement...
MyRs(0) = 99      
</code></pre>
<p>
The <b>Name</b> property of an <b>rdoResultset</b> object contains the first 255 characters of the query used to create the resultset, so it is often unsuitable as an index into the <b>rdoResultsets</b> collection – especially since several queries might be created with the same SQL query.</p>
<p>
You can refer to <b>rdoResultset</b> objects by their position in the <b>rdoResultsets</b> collection using this syntax (where <i>n</i> is the <i>n</i>th member of the zero-based <b>rdoResultsets</b> collection):</p>
<pre><code>rdoResultsets(n)
</code></pre>
</BODY>
</HTML>

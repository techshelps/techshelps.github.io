<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RDO Events Example</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="rdprordoeventsx"></a>RDO Events Example</h1>
<p>
This example illustrates several of the Remote Data Object (RDO) event handlers. The code establishes event variables and handlers to trap connection and query events. To help illustrate use of the BeforeConnect event, the code concatenates a workstation ID value and the current time to the end of the connect string. This permits identification of the specific connection at the server. After establishing the connection, the code executes a query that takes an fairly long time to execute — the query is designed to run for about a minute. Because a 5 second QueryTimeout value is set, the QueryTimeout event should fire unless the query returns before 5 seconds has elapsed. Notice that the query itself is run asynchronously and the code does not poll for completion of the query. In this case the code simply waits for the QueryComplete or QueryTimeout events to fire — indicating that the query is finished. The code also permits you to request another 5 seconds of waiting time.</p>
<p>
Note that to make this example work correctly, you must do a number of things first, including setting references to the Remote Data Objects and Common Dialog libraries, adding a <b>CommandButton</b> and a <b>Timer</b> control to a form, plus you must change the ODBC connect string in the Form_Load() event to point to a valid server.</p>
<pre><code>Option Explicit
Private WithEvents cn As rdoConnection
Private WithEvents EngEv As rdoEngine
Dim er As rdoError
Dim strConnect As String
Dim rs As rdoResultset
Dim TimeStart As Single
Dim clock As Integer
Dim ShowClock As Integer
Dim QueryComplete As Integer
Dim InfoMsg As String
Dim Connected As Boolean
Dim ans As Integer

Private Sub EngEv_InfoMessage()
 &nbsp;&nbsp; InfoMsg = "For your information..." _
 &nbsp;&nbsp; &amp; " the following message" _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; " was returned by the server." &amp; vbCrLf
 &nbsp;&nbsp; For Each er In rdoErrors
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InfoMsg = InfoMsg &amp; er.Number _
 &nbsp;&nbsp; &amp; " - " &amp; er.Description &amp; vbCrLf
 &nbsp;&nbsp; Next
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
End Sub
Private Sub cn_BeforeConnect( _
 &nbsp;&nbsp; ConnectString As String, Prompt As Variant)
  InfoMsg = "About to connect to:" &amp; ConnectString _
 &nbsp;&nbsp; &amp; " - " &amp; Prompt
  ConnectString = ConnectString &amp; ";WSID=" _
 &nbsp;&nbsp; &amp; "EventTest" &amp; Time$ &amp; ";"
End Sub

Private Sub cn_Connect(ByVal ErrorOccurred As Boolean)
  'Fires once connected.
  Connected = True
End Sub

Private Sub cn_Disconnect() 'Fires when disconnected
  Connected = False
End Sub

Private Sub cn_QueryComplete(ByVal Query As _
  RDO.rdoQuery, ByVal ErrorOccurred As Boolean)
  Timer1.Enabled = False
  QueryComplete = vbChecked
  RunButton.Enabled = True
  Beep
  
  MsgBox "Query Done"
End Sub

Private Sub cn_QueryTimeout(ByVal Query As _
  RDO.rdoQuery, Cancel As Boolean)
 &nbsp;&nbsp; ans = MsgBox("The query did not complete " _
 &nbsp;&nbsp; &amp; "in the time allocated. " _
 &nbsp;&nbsp; &amp; "Press Cancel to abandon the query " _
 &nbsp;&nbsp; &amp; "or Retry to keep working.", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbRetryCancel + vbQuestion, "Query Timed Out")
 &nbsp;&nbsp; If ans = vbRetry Then
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cancel = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QueryComplete = vbGrayed
 &nbsp;&nbsp; Else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Timer1.Enabled = False
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; QueryComplete = vbChecked
 &nbsp;&nbsp; End If
End Sub

Private Sub MenufileExit_Click()
 &nbsp;&nbsp; cn.Close
 &nbsp;&nbsp; Unload Form1
End Sub

Private Sub RunButton_Click()
 &nbsp;&nbsp; RunButton.Enabled = False
 &nbsp;&nbsp; On Error GoTo C1EH
 &nbsp;&nbsp; QueryComplete = vbGrayed
 &nbsp;&nbsp; Timer1.Enabled = True
 &nbsp;&nbsp; Set rs = cn.OpenResultset( _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "execute VeryLongProcedure", _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rdOpenKeyset, rdConcurValues, rdAsyncEnable)
 &nbsp;&nbsp; TimeStart = Timer
QuitRun:
Exit Sub
C1EH:
 &nbsp;&nbsp; Debug.Print Err, Error
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InfoMsg = "Error:.. the following error" _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; " was returned by the server." &amp; vbCrLf
 &nbsp;&nbsp; For Each er In rdoErrors
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InfoMsg = InfoMsg &amp; er.Number _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; " - " &amp; er.Description &amp; vbCrLf
 &nbsp;&nbsp; Next
 &nbsp;&nbsp; MsgBox "Query Failed to run"
 &nbsp;&nbsp; Timer1.Enabled = False
 &nbsp;&nbsp; Resume QuitRun

End Sub

Private Sub Form_Load()
On Error GoTo FLeh
Set EngEv = rdoEngine
Set cn = New rdoConnection
Show
 &nbsp;&nbsp; With cn
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Connect = "UID=;PWD=;database=Workdb;" _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; "Server=SEQUEL;" _
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; "driver={SQL Server};DSN='';"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .QueryTimeout = 5
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .CursorDriver = rdUseClientBatch
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .EstablishConnection rdDriverNoPrompt
 &nbsp;&nbsp; End With
Exit Sub

FLeh:
 &nbsp;&nbsp; Debug.Print Err, Error
 &nbsp;&nbsp; For Each er In rdoErrors
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print er.Description
 &nbsp;&nbsp; Next
 &nbsp;&nbsp; Stop
 &nbsp;&nbsp; Resume
End Sub

Private Sub Timer1_Timer()
 &nbsp;&nbsp; Static ot As Integer
 &nbsp;&nbsp; ' Display number of seconds
 &nbsp;&nbsp; ShowClock = Int(Timer - TimeStart)
 &nbsp;&nbsp; If ShowClock = ot Then Form1.Refresh
End Sub</code></pre>
</BODY>
</HTML>

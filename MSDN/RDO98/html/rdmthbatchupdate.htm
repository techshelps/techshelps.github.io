<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BatchUpdate Method (Remote Data)</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="rdmthbatchupdate"></a>BatchUpdate Method (Remote Data)</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthBatchUpdate_C;rdmthBatchUpdateC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthBatchUpdate_X;rdmthBatchUpdateX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Applies To">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdmthBatchUpdate_A;rdmthBatchUpdateA">
</object></p>
<p>
Performs a batched optimistic update.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>object</i><b>.BatchUpdate (</b><i>SingleRow</i>, <i>Force</i><b>)</b></p>
<p>
The <b>BatchUpdate</b> method syntax has these parts:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Part</b></td>
<td class=label width=70%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=30%><i>object</i></td>
<td width=70%>An <a href="rddefobjectexpression.htm">object expression</a> that evaluates to an object in the Applies To list.</td>
</tr>
<tr valign=top>
<td width=30%><i>SingleRow</i></td>
<td width=70%>A <a href="rddefboolean.htm">Boolean</a> value that is <b>True</b> if the update is done only for the current row, or <b>False</b> if the update applies to all rows in the batch. Default is False.</td>
</tr>
<tr valign=top>
<td width=30%><i>Force</i></td>
<td width=70%>A <a href="rddefboolean.htm">Boolean</a> value that is <b>True</b> if the row or batch of rows will overwrite existing rows in the database regardless if they cause collisions or not. Default is <b>False</b>.</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p>
This method performs a batch optimistic update operation. When using batch optimistic concurrency, it is necessary to call this method to actually send the changes back to the server.</p>
<p>
Batch updates are used whenever you open a connection using the Client Batch cursor library (<b>rdUseClientBatch</b>). In this case, each time you use the <b>Update</b> or <b>UpdateRow</b> methods, the local <b>rdoResultset</b> is updated, but the base database tables are not changed. The <b>BatchUpdate</b> method is used to update the base database table(s) with any information changed since the <b>rdoResultset</b> was last created or synchronized with the <b>BatchUpdate</b> command.</p>
<p>
The <b>BatchUpdate</b> method updates the <b>BatchCollisionRows</b> property to include a bookmark for each row that failed to update &nbsp;– collided with an existing row that has data more current than the <b>rdoResultset</b> object as it existed when first read. The <b>BatchCollisionCount</b> property indicates how many collisions occurred during the batch update process.</p>
<p>
If you use the <b>CancelBatch</b> method, the changes saved to the local <b>rdoResultset</b> object are discarded. When you use the <b>CancelUpdate</b> method, only the current row’s changes are rolled back to the state prior to execution of the last <b>Update</b> method.</p>
<p>
The <b><i>SingleRow</i></b> parameter can be used in conjunction with the <b><i>Force</i></b> parameter to force the client’s version of the data back into the database, even if collisions have occurred. The <b><i>SingleRow</i></b> parameter will tell RDO to only send the current row back to the server and not the entire batch, and the <b><i>Force</i></b> parameter will tell RDO to force the data in, and not use the normal optimistic concurrency detection.</p>
<p>
Setting both the <b><i>SingleRow</i></b> and <b><i>Force</i></b> parameters to <b>True</b> overlays a single database row with the current updated <b>rdoResultset</b> row. This is useful when processing collision rows and you want to force your local version of the data to be saved regardless of the current database row setting.</p>
<p>
Setting <b><i>SingleRow</i></b> to <b>False</b> and <b><i>Force</i></b> to <b>True</b> will cause all rows that are dirty to be forced into the database, which is useful as a shorthand way of forcing everything in (the last-one-in-wins scenario).</p>
<p>
Setting <b><i>SingleRow</i></b> to <b>True</b> and <b><i>Force</i></b> to <b>False</b> will cause just the current row to go through the optimistic concurrency update, which is useful when you only want to update the current row, not the entire batch.</p>
</BODY>
</HTML>

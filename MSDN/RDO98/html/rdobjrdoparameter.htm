<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>rdoParameter Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="rdobjrdoparameter"></a>rdoParameter Object</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoParameter_C;rdobjrdoParameterC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoParameter_X;rdobjrdoParameterX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdidxrdoParameterP;rdobjrdoParameter_P">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoParameter_M;rdobjrdoParameterM">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Events">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="rdobjrdoParameter_E;rdobjrdoParameterE">
</object></p>
<p>
An <b>rdoParameter</b> object represents a <a href="rddefparameter.htm">parameter</a> associated with an <b>rdoQuery</b> object.</p>
<p>
<img src="parchild.gif" border=0><a href="rdobjrdoquery.htm"><img src="rdoquer.gif" border=0></a><br>
<img src="space.gif" border=0><img src="parchild.gif" border=0><a href="rdobjrdoparameterscollection.htm"><img src="rdopars.gif" border=0></a><br>
<img src="space.gif" border=0><img src="space.gif" border=0><img src="parchild.gif" border=0><img src="rdopar.gif" border=0></p>
<p class=label>
<b>Remarks</b></p>
<p>
When working with stored procedures or SQL queries that require use of arguments that change from execution to execution, you should create an <b>rdoQuery</b> object to manage the query and its parameters. For example, if you submit a query that includes information provided by the user such as a date range, or part number, RDO and the ODBC interface can insert these values automatically into the SQL statement at specific positions in the query.</p>
<p class=label>
<b>Providing Parameters</b></p>
<p>
Your query's parameters can be provided in a number of ways:
<ul type=disc>
<li>
As hard-coded arguments in the SQL query string.<pre><code>"Select Name from Animals Where ID = 'Cat'"
</code></pre>
</li>
<li>
As concatenated text or numeric values extracted from <b>TextBox</b>, <b>Label</b> or other controls.<pre><code>"Select Name from Animals Where ID = '"&nbsp; _
&amp; IDWanted.Text &amp; "'" 
</code></pre>
</li>
<li>
As the question mark (?) parameter placeholders.<pre><code>"Select Name from Animals Where ID = ?"
</code></pre>
</li>
<li>
As the question mark (?) parameter placeholders in a stored procedure call that accepts input, output and/or return status arguments.<pre><code>"{ ? = Call MySP (?, ?, ?) }"
</code></pre>
</li>
</ul>
<p class=indent>
<B><b>Note</b></B> &nbsp; Stored procedure invocations that use the Call syntax (as shown above) are executed in their "native" format so they do not require parsing and data conversion by the ODBC Driver Manager. Because of this the Call syntax can be executed somewhat faster than other syntaxes.</p>
<p class=label>
<b>Using Parameter Markers</b></p>
<p>
The only time you <i>must</i> use parameter markers is when executing stored procedures that require input, output or return status arguments. If the stored procedure only requires input arguments, these can be provided in-line as imbedded values concatenated into the query (as shown below).</p>
<p>
When the <b>rdoParameter</b> collection is first referenced (but not before) RDO and the ODBC interface pre-processes the query, and creates an <b>rdoParameter</b> object for each <i>marked</i> parameter. You can also create queries with multiple parameters, and in this case you can mark some parameters and provide the others by hard-coding or concatenation – in any combination. However, all marked parameters must appear to the left of all other parameters. If you don't, a trappable error occurs indicating "Wrong number of parameters".</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; Due to the extra overhead involved in creating and managing <b>rdoQuery</b> objects and their <b>rdoParameters</b> collection, you should not use parameter queries for SQL statements that do not change from execution to execution — especially those that are executed only once or infrequently.</p>
<p class=label>
<b>Marking Parameters</b></p>
<p>
Each query parameter that you want to have RDO manage must be indicated by a question mark (?) in the text of the SQL statement, and correspond to an <b>rdoParameter</b> object referenced by its ordinal number counting from zero – left to right. For example, to execute a query that takes a single input parameter, your SQL statement would look something like this:</p>
<pre><code>SQL$ = "Select Au_Lname, Au_Fname where Au_ID Like ? "
Dim qd as rdoQuery, rd as rdoResultset
Set qd = CreateQuery ("SeekAUID", SQL$)
qd(0) = "236-66-%"
set rd = qd.OpenResultset(rdOpenForwardOnly)
</code></pre>
<p class=indent>
<B><b>Note</b></B> &nbsp; You can also create an <b>rdoQuery</b> object using the Query Connection designer and name and set the data type and direction of individual parameters.</p>
<p class=label>
<b>Acceptable Parameters</b></p>
<p>
Not all types of data are passable as parameters. For example you cannot always use a TEXT or IMAGE data type as an OUTPUT parameter. In addition, if your query does not require parameters or has no parameters in a specific invocation of the query, you cannot use parenthesis in the query. For example, for a stored procedure that does not require parameters could be coded as follows:</p>
<pre><code>"{ ? = Call MySP }"
</code></pre>
<p>
When submitting queries that return output parameters, these parameters must be submitted at the end of the list of your query's parameters. While it is possible to provide both marked and unmarked (in-line) parameters, your output parameters must still appear at the end of the list of parameters.</p>
<p>
All in-line parameters must be provided to the right of marked parameters. If this is not the case, RDO returns an error indicating "Wrong number of parameters".</p>
<p>
RDO 2.0 supports BLOB data types as parameters and you also can use the <b>AppendChunk</b> method against the <b>rdoParameter</b> object to pass TEXT or IMAGE data types as parameters into a procedure.</p>
<p class=label>
<b>Identifying the Parameter's Data Type</b></p>
<p>
When your parameter query is processed by ODBC, it attempts to identify the data type of each parameter by executing ODBC functions that query the remote server for specific information about the query. In some cases, the data type cannot be correctly determined. In these cases, use the <b>Type</b> property to set the correct data type or create a custom query using the User Connection Designer.</p>
<p>
For example, in the following query, the parameter passed to the TSQL <b>Charindex</b> function is typed as an integer. While this is correct for the function itself, the parameter is referencing a string argument of the TSQL function, so it must be set to an ODBC character type to work properly.</p>
<pre><code>Dim SQL as string, qd as rdoQuery
SQL = "Select * From Titles " _
    &amp; "Where Charindex( ?,&nbsp; Title) &gt; 0
Set qd = cn.CreateQuery("FindTitle", SQL)
qd(0).Type = rdTypeChar
</code></pre>
<p class=indent>
<B><b>Note</b></B> &nbsp; You do not have to surround text parameters with quotes as this is handled automatically by the ODBC API interface.</p>
<p class=label>
<b>Handling Output and Return Status Arguments</b></p>
<p>
In some cases, a stored procedure returns an output or return status argument instead of or in addition to any rows returned by a SELECT statement. Each of these parameters must also be marked in the SQL statement with a question mark. Using this technique, you can mark the position of any number of parameters in your SQL query – including input, output or input/output.</p>
<p>
Whenever your query returns output or return status arguments, you <i>must</i> use the ODBC CALL syntax when setting the SQL property of the <b>rdoQuery</b> object. In this case, a typical stored procedure call would look like this:</p>
<pre><code>Dim qd as rdoQuery, rd as rdoResultset, SQL as String
SQL = "{ ? = Call master..sp_password (?, ?) }"
Set qd = CreateQuery ("SetPassword", SQL)
qd.rdoParameters(0).Direction = rdParamReturnValue
qd(1) = "Fred"      ' the old password
qd(2) = "George"   ' the new password
set rd = qd.Execute
if qd(0) &lt;&gt; 0 then _
   MsgBox "Operation failed"
</code></pre>
<p class=indent>
<B><b>Tip</b></B> &nbsp; Be sure to specifically address stored procedures that do not reside in the current (default) database. In this example, the default database is <i>not</i> Master where the sp_password procedure is maintained, so this procedure is specifically addressed.</p>
<p>
When control returns to your application after the procedure is executed, the <b>rdoParameter</b> objects designated as <b>rdParamReturnValue</b>,&nbsp; <b>rdParamOutput</b> or <b>rdParamInputOutput</b> contain the returned argument values. In the example shown above, the return status is available by examining <code>qd(0)</code>after the query is executed.</p>
<p class=label>
<b>Using Other Properties</b></p>
<p>
Using the properties of an <b>rdoParameter</b> object, you can set a <a href="rddefquery.htm">query</a> parameter that can be changed before the query is run. You can:
<ul type=disc>
<li>
Use the <b>Direction</b> property setting to determine if the parameter is an input, output, or input/output parameter, or a return value. In RDO 2.0, the <b>Direction</b> property is usually set automatically, so it is unnecessary to set this value. It is also unnecessary to set it for input parameters — which is the default value.<br><br></li>
<li>
Use the <b>Type</b> property setting to determine the <a href="rddefdatatype.htm">data type</a> of the <b>rdoParameter</b>. Data types are identical to those specified by the <b>rdoColumn.Type</b> property. In some cases, RDO might not be able to determine the correct parameter data type. In these cases, you can force a specific data type by setting the <b>Type</b> property.<br><br></li>
<li>
Use the <b>Value</b> property (the default property of an <b>rdoParameter</b>) to pass values to the <a href="rddefstructuredquerylanguagesql.htm">SQL</a> queries containing parameter markers used in <b>rdoQuery.Execute</b> or <b>rdoQuery.OpenResultset</b> methods. For example:<pre><code>MyQuery(0) = 5
</code></pre>
</li>
</ul>
<p class=indent>
<B><b>Note</b></B> &nbsp; RDO requires that your ODBC driver support a number of Level II compliant options and support the <b>SQLNumParams, SQLProcedureColumns</b> and <b>SQLDescribeParam</b> ODBC API functions in order to be able to create the <b>rdoParameters</b> collection and parse parameter markers in SQL statements. While some drivers can be used to create and execute queries, if your driver does not support creation of the <b>rdoParameters</b> collection, RDO fails quietly and simply does not create the collection. As a result, any reference to the collection results in a trappable error.</p>
<p class=label>
<b>Addressing the Parameters</b></p>
<p>
By default, members of the <b>rdoParameters</b> collection are named "Parameter<i>n"</i> where <i>n</i> is the <b>rdoParameter</b> object's ordinal number. For example, if an <b>rdoParameters</b> collection has two members, they are named "Parameter0" and "Parameter1". However, if you use the User Connection Designer, you can specify names for specific parameters.</p>
<p>
Because the <b>rdoParameters</b> collection is the default collection for the <b>rdoQuery</b> object, addressing parameters is easy. Assuming you have created an <b>rdoQuery</b> object referenced by <code>rdoQo</code>, you can refer to the <b>Value</b> property of its <b>rdoParameter</b> objects by:
<ul type=disc>
<li>
Referencing the <b>Name</b> property setting using this syntax:<pre><code><b>'</b> Refers to <i>PubDate</i> parameter
<b><span class=cfe>rdoQo(</span>"</b>PubDate"<span class=cfe><b>)</b></span>      
</code></pre>
<p class=tl>
-Or-</P><pre><code><b>'</b> Refers to <i>PubDate</i> parameter
<span class=cfe><b>rdoQo!</b></span>PubDate    
</code></pre>
</li>
<li>
Referencing its ordinal position in the <b>rdoParameters</b> collection using this syntax:<pre><code><b>'</b> Refers to the first parameter marker
<span class=cfe><b>rdoQo(</b></span>0<span class=cfe><b>)</b></span>        
</code></pre>
</li>
</ul>
</BODY>
</HTML>

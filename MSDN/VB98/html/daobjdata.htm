<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="daobjdata"></a>Data Control</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="daobjData_C;daobjDatabase;daobjDataC;daobjRecordset;daproConnect;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="daobjData_X;daobjDataX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Properties">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="daobjData_P;daobjDataP;daproConnect;daproEditMode">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Methods">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="daobjData_M;daobjDataM">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Events">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="daobjData_E;daobjDataE">
</object></p>
<p>
Provides access to data stored in databases using any one of three types of <b>Recordset</b> objects. The <b>Data</b> control enables you to move from record to record and to display and manipulate data from the records in bound controls. Without a <b>Data</b> control or an equivalent data source control like the <b>RemoteData</b> control, data-aware (bound) controls on a form can't automatically access data.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<b>Data</b></p>
<p class=label>
<b>Remarks</b></p>
<p>
You can perform most data access operations using the <b>Data</b> control without writing any code at all. Data-aware controls bound to a <b>Data</b> control automatically display data from one or more fields for the <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defcurrentrecord">
</object><a href=JavaScript:alink_6.Click()>current record</a> or, in some cases, for a set of records on either side of the current record. The <b>Data</b> control performs all operations on the current record.</p>
<p>
If the <b>Data</b> control is instructed to move to a different record, all bound controls automatically pass any changes to the <b>Data</b> control to be saved in the database. The <b>Data</b> control then moves to the requested record and passes back data from the current record to the bound controls where it's displayed.</p>
<p>
The <b>Data</b> control automatically handles a number of contingencies including empty recordsets, adding new records, editing and updating existing records, and handling some types of errors. However, in more sophisticated applications, you need to trap some error conditions that the <b>Data</b> control can't handle. For example, if the Microsoft Jet database engine has a problem accessing the database file, doesn't have permission, or can't execute the query as coded, a trappable error results. If the error occurs before your application procedures start or due to some internal errors, the Error event is triggered.</p>
<h3>Bound Controls</h3>
<p>
The <b>DataList</b>, <b>DataCombo</b>, <b>DataGrid</b>, and <b>MSHFlexGrid</b> controls are all capable of managing sets of records when bound to a <b>Data</b> control. All of these controls permit several records to be displayed or manipulated at once.</p>
<p>
The intrinsic <b>Picture</b>, <b>Label</b>, <b>TextBox</b>, <b>CheckBox</b>, <b>Image</b>, <b>OLE</b>, <b>ListBox</b> and <b>ComboBox</b> controls are also data-aware and can be bound to a single field of a <b>Recordset</b> managed by the <b>Data</b> control. Additional data-aware controls like the <b>MaskedEdit</b> and <b>RichTextBox</b> controls are available in the Professional and Enterprise Editions and from third-party vendors.</p>
<h3>Operation</h3>
<p>
Once the application begins, Visual Basic uses <b>Data</b> control properties to open the selected database, create a <b>Database</b> object and create a <b>Recordset</b> object. The <b>Data</b> control's <b>Database</b> and <b>Recordset</b> properties refer to the newly created <b>Database</b> and <b>Recordset</b> objects which may be manipulated independently of the <b>Data</b> control — with or without bound controls. The <b>Data</b> control is initialized <i>before</i> the initial Form_Load event for the form on which it is placed. If any errors occur during this initialization step a non-trappable error results.</p>
<p>
When Visual Basic uses the Jet database engine to create a <b>Recordset</b>, no other Visual Basic operations or events can occur until the operation is complete. However, other Windows-based applications are permitted to continue executing while the <b>Recordset</b> is being created. If the user presses CTRL+BREAK while the Jet engine is building a <b>Recordset</b>, the operation is terminated, a trappable error results, and the <b>Recordset</b> property of the <b>Data</b> control is set to <b>Nothing</b>. In design time, a second CTRL+BREAK causes Visual Basic to display the Debug window.</p>
<p>
When you use a <b>Data</b> control to create a <b>Recordset</b> object or when you create a <b>Recordset</b> object in code and assign it to the <b>Data</b> control, the Microsoft Jet database engine automatically populates the <b>Recordset</b> object. As a result, bookmarks (and for snapshot-type <b>Recordset</b> objects, recordset data) are saved in local memory; the user doesn't need to manipulate the <b>Data</b> control, and you don't need to invoke the <b>MoveLast</b> method in code. Page locks used to create the <b>Recordset</b> are released more quickly, making it possible for other <b>Recordset</b> objects to access the same data. <b>Recordset</b> objects created in code but not assigned to the <b>Data</b> control aren't automatically populated by the Jet engine. Populate these objects through code. Because of the way that the <b>Data</b> control populates its <b>Recordset</b> in the background, an additional cloned <b>Recordset </b>might be created.</p>
<p>
You can manipulate the <b>Data</b> control with the mouse, moving from record to record or to the beginning or end of the <b>Recordset</b>. The <b>EOFAction</b> and <b>BOFAction</b> properties determine what happens when the user moves to the beginning or end of a <b>Recordset</b> with the mouse. You can't set focus to the <b>Data</b> control.</p>
<h3>Validation</h3>
<p>
Use the Validate event and the <b>DataChanged</b> property to perform last minute checks on the records being written to the database.</p>
<h3>Data Access Objects</h3>
<p>
You can use the <b>Database</b> and <b>Recordset</b> data access objects created by the <b>Data</b> control in your procedures. The <b>Database</b> and <b>Recordset</b> objects each have properties and methods of their own, and you can write procedures that use these properties and methods to manipulate your data.</p>
<p>
For example, the <b>MoveNext</b> method of a <b>Recordset</b> object moves the current record to the next record in the <b>Recordset</b>. To invoke this method, you could use this code:</p>
<pre><code>Data1.Recordset.MoveNext
</code></pre>
<p>
The <b>Data</b> control is capable of accessing any of the three types of Jet engine Version 3.0 <b>Recordset</b> objects. If you don't select a recordset type, a dynaset-type <b>Recordset</b> is created.</p>
<p>
In many cases, the default type and configuration of the <b>Recordset</b> object created is extremely inefficient. That is, you might not need an updatable, fully-scrollable, keyset-type cursor to access your data. For example, a read-only, forward-only, snapshot-type <b>Recordset</b> might be far faster to create than the default cursor. Be sure to choose the most efficient <b>Type</b>, <b>Exclusive</b>, <b>Options</b> and <b>ReadOnly</b> properties possible for your situation.</p>
<p class=indent>
<B><b>Note</b></B> The constants used to request a specific <b>Recordset</b> type when using the <b>Data</b> control are different than the constants used to determine the type of <b>Recordset </b>created or to create a <b>Recordset</b> using the <b>OpenRecordset</b> method.</p>
<p>
To select a specific type of <b>Recordset</b>, set the <b>Data</b> control's <b>RecordsetType</b> property to:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Recordset Type</b></td>
<td class=label width=22%><b>Value</b></td>
<td class=label width=48%><b>Constant</b></td>
</tr>
<tr valign=top>
<td width=30%>Table</td>
<td width=22%>0</td>
<td width=48%><b>vbRSTypeTable</b></td>
</tr>
<tr valign=top>
<td width=30%>Dynaset</td>
<td width=22%>1</td>
<td width=48%>(Default) <b>vbRSTypeDynaset</b></td>
</tr>
<tr valign=top>
<td width=30%>Snapshot</td>
<td width=22%>2</td>
<td width=48%><b>vbRSTypeSnapshot</b></td>
</tr>
</table><br>
<p class=indent>
<B><b>Important</b></B> The <b>Data</b> control cannot be used to access <b>Recordset</b> objects created with the <b>dbForwardOnly</b> option bit set.</p>
<h3>Professional and Enterprise Editions</h3>
<p>
As far as data access is concerned, the primary difference between the Learning Edition, Professional and Enterprise Editions of Visual Basic is the ability to create new data access objects. In the Learning Edition, you can't declare (with the <b>Dim</b> keyword) variables as data access objects in code. This means that only the <b>Data</b> control can create <b>Database</b> and <b>Recordset</b> objects.</p>
<p>
In the Professional and Enterprise Editions, you can create a new <b>Recordset</b> object and assign it to the <b>Data</b> control's <b>Recordset </b>property. Any bound controls connected to the <b>Data</b> control permit manipulation of the records in the <b>Recordset</b> you created. Make sure that your bound controls' <b>DataField</b> properties are set to field names that are valid in the new <b>Recordset</b>.</p>
<h3>Stored Queries</h3>
<p>
Another important option when using the <b>Data</b> control is the ability to execute stored queries. If you create a <b>QueryDef</b> object beforehand, the <b>Data</b> control can execute it and create a <b>Recordset</b> using the <b>QueryDef</b> object's stored <b>SQL</b>, <b>Connect </b>and other properties. To execute a <b>QueryDef</b>, set the <b>Data</b> control's <b>RecordSource</b> property to the <b>QueryDef</b> name and use the <b>Refresh</b> method.</p>
<p>
If the stored <b>QueryDef</b> contains parameters, you need to create the <b>Recordset</b> and pass it to the <b>Data</b> control.</p>
<h3>BOF/EOF Handling</h3>
<p>
The <b>Data</b> control can also manage what happens when you encounter a <b>Recordset</b> with no records. By changing the <b>EOFAction</b> property, you can program the <b>Data</b> control to enter AddNew mode automatically.</p>
<p>
You can program the <b>Data</b> control to automatically snap to the top or bottom of its parent form by using the <b>Align</b> property. In either case, the <b>Data</b> control is resized horizontally to fill the width of its parent form whenever the parent form is resized. This property allows a <b>Data</b> control to be placed on an <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbdefmdiform">
</object><a href=JavaScript:alink_7.Click()>MDI form</a> without requiring an enclosing <b>Picture</b> control.</p>
</BODY>
</HTML>

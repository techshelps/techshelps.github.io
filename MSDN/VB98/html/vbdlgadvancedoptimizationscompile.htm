<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Advanced Optimizations Dialog Box</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbdlgadvancedoptimizationscompile"></a>Advanced Optimizations Dialog Box</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbdlgAdvancedOptimizationsCompileC;vbproBooksOnlineJumpTopic">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Specifics">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbdlgAdvancedOptimizationsCompileS">
</object></p>
<p>
<img src="advopdb.gif" border=0></p>
<p>
Allows you to add the following optimizations to your compile.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Enabling these optimizations may prevent the correct execution of your program.</p>
<h3>Dialog Box Options</h3>
<p class=dt>
<B><b>Assume No Aliasing</b></B></p>
<p class=indent>
Tells the compiler that your program does not use aliasing. Aliasing provides a name that refers to a memory location that is already referred to by a different name. Using this option allows the compiler to apply optimizations that it could not otherwise use, for example storing variables in registers and performing loop optimizations. This occurs when using ByRef arguments. For example:</p>
<pre><code>Dim y as integer
Sub Foo(x as integer)
x=5        'Code is referring to the same variable (the 
y=6        'global y)via two different names
End Sub
Sub Main
Foo y
End Sub
</code></pre>
<p class=dt>
<B><b>Remove Array Bound Checks</b></B></p>
<p class=indent>
By default in Visual Basic, a check is made on every access to an array to determine if the index is within the range of the array. If the index is not within array bounds an error message is displayed. Selecting this option turns off the array bounds error checking and removes checks for the correct number of dimension of the array.</p>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This may speed up array manipulation but invalid memory locations may be accessed and result in unexpected behavior or program crashes.</p><p class=dt>
<B><b>Remove Integer Overflow Checks</b></B></p>
<p class=indent>
By default in Visual Basic, a check is made on every calculation for integer-style data types – byte, integer, and long – to be sure that the value is within the range of the data type. If the magnitude of the value being put into the data type is incorrect an error occurs. Selecting this option turns off the error checking which can speed up integer calculations. However, if data type capacities are overflowed, no error occurs and you may get incorrect results.</p>
<p class=dt>
<B><b>Remove Floating Point Error Checks</b></B></p>
<p class=indent>
By default in Visual Basic, a check is made on every calculation of a floating point data type – Singe and Double – to be sure that the value is within range for that data type and that there are no divide by zero or invalid operations. If the magnitude of the value being put into the data type is incorrect, an error occurs.&nbsp; Selecting this option turns off the error checking which can speed up floating [point calculations.&nbsp; However, if data type capacities are overflowed, not error occurs and you may get incorrect result.</p>
<p class=dt>
<B><b>Allow Unrounded Floating Point Operations</b></B></p>
<p class=indent>
When selected, allows the compiler to:
<ul type=disc>
<li>
Use floating point registers more efficiently<br><br></li>
<li>
Avoid loads and stores from memory<br><br></li>
<li>
Do floating point comparisons more efficiently<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Using this option may result in calculations being maintained to a higher precision than expected and may cause the comparison of two floating point values to show them unequal when you expect them to be equal.</p></li>
</ul>
<p class=dt>
<B><b>Remove Safe Pentium™ FDIV Checks</b></B></p>
<p class=indent>
Removes the checking so that the code for floating point division is faster and smaller but may produce slightly incorrect results on Pentium™ processors with the FDIV bug. If cleared, the code generated for floating point division operations is not affected by the FDIV bug on Pentium™ processor.</p>
</BODY>
</HTML>

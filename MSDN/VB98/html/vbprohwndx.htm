<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>hWnd Property Example</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbprohwndx"></a>hWnd Property Example</h1>
<p>
This example forces a form to always remain on top. To try this example, create a form (not an MDI child form), and then create a menu for the form called Main. Insert a submenu in it called Always On Top, and set its Name to mnuTopmost. Create a new module using the Add Module command on the Project menu. Paste the <b>Declare</b> statement into the Declarations section of the new module, being sure that the statement is on one line with no break or wordwrap. Then paste the <b>Sub</b> procedure into the Declarations section of the form and press F5.</p>
<pre><code>' Declaration of a Windows routine. 
' This statement should be placed in the module.
Declare Function SetWindowPos Lib "user32" Alias_ "SetWindowPos" (ByVal hwnd As Long, ByVal_ hWndInsertAfter As Long, ByVal x As Long, ByVal y As_ Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags_ As Long) As Long

' Set some constant values (from WIN32API.TXT).
Const conHwndTopmost = -1
Const conHwndNoTopmost = -2
Const conSwpNoActivate = &amp;H10
Const conSwpShowWindow = &amp;H40

Private Sub mnuTopmost_Click ()
   ' Add or remove the check mark from the menu.
   mnuTopmost.Checked = Not mnuTopmost.Checked
   If mnuTopmost.Checked Then
      ' Turn on the TopMost attribute.
      SetWindowPos <span class=cfe><b>hWnd</b></span>, conHwndTopmost, 0, 0, 0, 0,_ conSwpNoActivate Or conSwpShowWindow
   Else
      ' Turn off the TopMost attribute.
      SetWindowPos <span class=cfe><b>hWnd</b></span>, conHwndNoTopmost, 0, 0, 0,_ 0, conSwpNoActivate Or conSwpShowWindow
   End If
End Sub
</code></pre>
<p>
This example automatically drops down the list portion of a <b>ComboBox</b> control whenever the <b>ComboBox</b> receives the focus. To try this example, create a new form containing a <b>ComboBox</b> control and an <b>OptionButton</b> control (used only to receive the focus). Create a new module using the Add Module command on the Project menu. Paste the <b>Declare</b> statement into the Declarations section of the new module, being sure that the statement is on one line with no break or wordwrap. Then paste the <b>Sub</b> procedure into the Declarations section of the form, and press F5. Use the TAB key to move the focus to and from the <b>ComboBox</b>.</p>
<pre><code>Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Long) As Long

Private Sub Combo1_GotFocus ()
   Const CB_SHOWDROPDOWN = &amp;H14F
   Dim Tmp
   Tmp = SendMessage(Combo1.<span class=cfe><b>hWnd</b></span>, CB_SHOWDROPDOWN, 1, ByVal 0&amp;)
End Sub
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BindingCollection Object, DataMembers Collection Example</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbprodatamemberpropertyexamplex"></a>BindingCollection Object, DataMembers Collection Example</h1>
<p>
The example uses a class module as a data source. When code to set the <b>DataSource</b> and <b>DataMember</b> properties of two <b>Binding</b> objects executes, the class module's Initialize event occurs; two ADO recordsets are created in that event, and the names of the recordsets are added to the <b>DataMembers</b> collection. The GetDataMember event and its arguments are used to return data to the data consumer.</p>
<p>
To try the example, on the <b>Project </b>menu, click <b>References</b>, and set a reference to <b>Microsoft Data Binding Collection</b> and <b>Microsoft ActiveX Data Objects</b>. On the Project menu, click <b>Add Class Module</b>. Change the name of the class to MyDataClass, and set the <b>DataSourceBehavior </b>property to <b>vbDataSource</b>. Then draw two <b>TextBox </b>controls on a form. Paste the code into the <b>Form </b>object's code module.</p>
<pre><code>Option Explicit
' Declare the object variables, one for a Class module named MyDataClass, 
' and two more for each BindingCollection object one for each 
' recordset).

Private clsData As New MyDataClass&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Class module
Private bndColProducts As New <span class=cfe><b>BindingCollection</b></span>  ' Bindings Collection
Private bndColSuppliers As New <span class=cfe><b>BindingCollection</b></span> ' Bindings Collection

Private Sub Form_Load()
   ' Set DataSource and DataMember properties for each Bindings 
   ' collection object. 
   With bndColProducts   
      .DataMember = "Products"
      Set .DataSource = clsData
      .Add Text1, "Text", "ProductName" ' Bind to a TextBox.
   End With
 &nbsp;&nbsp; 
   With bndColSuppliers
      .DataMember = "Suppliers"
      Set .DataSource = clsData
      .Add Text2, "Text", "CompanyName" ' Bind to a TextBox.
   End With

   ' Change the Caption of Command1
   Command1.Caption = "MoveNext"

End Sub

Private Sub Command1_Click()
   clsData.MoveNext
End Sub
</code></pre>
<p>
Paste the code below into the MyDataClass module. The <b>DataSourceBehavior</b> property must be set to <b>vbDataSource </b>in order to see the GetDataMember event. Run the project.</p>
<pre><code>Option Explicit
' Declare object variables for ADO Recordset and Connection objects.
Private WithEvents rsProducts As ADODB.Recordset
Private WithEvents rsSuppliers As ADODB.Recordset
Private cnNwind As ADODB.Connection

Private Sub Class_Initialize()
   ' Add strings to the DataMembers collection.
   With <span class=cfe><b>DataMembers</b></span>
      .Add "Products"
      .Add "Suppliers"
   End With

   ' Set Recordset objects.
   Set rsProducts = New ADODB.Recordset
   Set rsSuppliers = New ADODB.Recordset
   Set cnNwind = New ADODB.Connection

   ' Set the Connection object parameters.&nbsp;&nbsp; 
   With cnNwind
      ' The Nwind.mdb that comes with Visual Basic must be installed on
      ' the computer or the code will fail. Otherwise alter the path to
      ' find the file on the computer.
      .Provider = "Microsoft.Jet.OLEDB.3.51"
      .Open "C:\Program Files\DevStudio\VB\Nwind.mdb"
   End With
 &nbsp; 
   ' Open the recordset objects. 
   rsSuppliers.Open "SELECT * FROM Suppliers", cnNwind, _
   adOpenStatic, adLockOptimistic
   rsProducts.Open "SELECT * FROM Products", cnNwind, _
   adOpenStatic, adLockOptimistic

End Sub

' The GetDataMember occurs when the DataSource property of a data
' consumer is set. In this case, the Bindings collection object is 
' the consumer.
Private Sub Class_GetDataMember(DataMember As String, Data As Object)
   Select Case DataMember
   Case "Products"
      Set Data = rsProducts
   Case "Suppliers"
      Set Data = rsSuppliers
   Case ""
      ' Provide a default record source when no Data Member is specified.
      Set Data = rsProducts
   End Select
   
End Sub

Public Function MoveNext()
   If rsProducts.EOF Then
      rsProducts.MoveFirst
   Else
      rsProducts.MoveNext
   End If
End Function

Private Sub rsProducts_MoveComplete(ByVal adReason As _
ADODB.EventReasonEnum, ByVal pError As ADODB.Error, adStatus As _
ADODB.EventStatusEnum, ByVal pRecordset As ADODB.Recordset)
   ' Keep the two recordsets in sync. The first textbox displays
   ' the supplier of the product. If the SupplierID for both
   ' recordsets are equivalent, no change needed. Otherwise,
   ' move to first record and test for SupplierID. This example
   ' is for demonstration only as the method is not the most
   ' efficient.

   If rsSuppliers("SupplierID").Value = _
   pRecordset("SupplierID").Value Then Exit Sub

   rsSuppliers.MoveFirst
   Do While Not rsSuppliers.EOF
      If rsSuppliers("SupplierID").Value = _
      pRecordset("SupplierID").Value Then
         Exit Sub
      Else
         rsSuppliers.MoveNext
      End If
   Loop
End Sub
</code></pre>
</BODY>
</HTML>

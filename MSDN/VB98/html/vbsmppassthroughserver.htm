<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Passthrough Server Sample Application (Pass_Svr.vbp and Pass_Cli.vbp), Enterprise Edition</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbsmppassthroughserver"></a>Passthrough Server Sample Application (Pass_Svr.vbp and Pass_Cli.vbp), Enterprise Edition</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsmpPassthroughServerC">
</object></p>
<p>
This sample application is an example of a simple pass-through server. It has one method called <b>RunServer</b>, which takes a ProgID parameter of the server that is to be started. The server specified by the ProgID is run on the same machine that the pass-through server is running on. If the server specified by ProgID is an in-process server, it is run in the same process space as the pass-through server.</p>
<p>
<b>RunServer</b> returns the handle of the started server so that the client can talk directly to the requested server. Because the pass-through server is a single-use server, every client that uses it will get its own instance of the pass-through server, along with its own process space and thread of execution.</p>
<p>
By using the pass-through server, client applications can create their own independent execution context on a remote server and then start and stop in-process servers within that context as needed. Because in-process servers can be started very quickly and because they are run within the pass-through server's process space, this is a much more efficient execution model than solely using out-of-process servers.</p>
<p>
The server in this project uses a visible form purely for demonstration purposes. There is no functional need for the server to have any UI, though state information presented through a UI can help with debugging or run-time monitoring needs. (State monitoring requirements can also be addressed by providing a status method on the server that can be queried by a monitor application.)</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>File</b></td>
<td class=label width=64%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=36%>Pass_cli.vbp</td>
<td width=64%>Client component project file.</td>
</tr>
<tr valign=top>
<td width=36%>Pass_cli.frm</td>
<td width=64%>Client main form.</td>
</tr>
<tr valign=top>
<td width=36%>Pass_svr.vbp</td>
<td width=64%>Server component project file.</td>
</tr>
<tr valign=top>
<td width=36%>Pass_svr.frm</td>
<td width=64%>Server status indicator form.</td>
</tr>
<tr valign=top>
<td width=36%>Pass_svr.bas</td>
<td width=64%>Server main/global utility module.</td>
</tr>
<tr valign=top>
<td width=36%>Pass_svr.cls</td>
<td width=64%>Server class module.</td>
</tr>
<tr valign=top>
<td width=36%>Passthru.txt</td>
<td width=64%>A text file containing a project overview and description.</td>
</tr>
</table><br>
<h3>To Run</h3>
<p>
From the Visual Basic <b>File</b> menu, choose <b>Open Project</b> and select the Pass_svr.vbp file, which is listed in the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsamples">
</object><a href=JavaScript:alink_2.Click()>Samples</a> directory. Press F5 or choose <b>Start</b> from the <b>Run</b> menu to run the server project.</p>
<p>
Once running, this project temporarily registers its classes in the system registry. You can then start a second instance of Visual Basic to run Pass_cli.vbp, the client that uses the class modules defined in Pass_svr.vbp.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Automation server can be run on the same machine as the client, or it can be run on a remote machine to benefit from distributed processing power and support multi-user access. The Automation server does not need to be recompiled or changed in any way to support this location independence.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Coffee (Coffee2.vbp, CoffWat2.vbp, MTCoffee.vbp, XTimers.vbp)</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbsmpcoffeecoffeecoffee"></a>Coffee (Coffee2.vbp, CoffWat2.vbp, MTCoffee.vbp, XTimers.vbp)</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbsmpCoffeeCoffeeCoffeeC">
</object></p>
<p>
Coffee consists of a client, CoffWat2, and two ActiveX components (OLE servers), Coffee2 and MTCoffee. Together, these three projects demonstrate:
<ul type=disc>
<li>
Asynchronous notifications using events (Coffee2).<br><br></li>
<li>
Asynchronous notifications using call-back methods (Coffee2).<br><br></li>
<li>
Multithreading (MTCoffee).</li>
</ul>
<p>
XTimers.vbp is a helper project that provides a code-only timer used by Coffee2 and MTCoffee.</p>
<p>
This is an expanded version of the project developed in the step-by-step procedures in "Creating an ActiveX Exe Component," of <i>Creating ActiveX Components</i>. For more information on asynchronous notifications and multithreading, see ."</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>File</b></td>
<td class=label width=65%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=35%><b>CoffWat2.vbp</b></td>
<td width=65%>The CoffeeWatch client project.</td>
</tr>
<tr valign=top>
<td width=35%>CWMod1.bas</td>
<td width=65%>Startup code for the project.</td>
</tr>
<tr valign=top>
<td width=35%>CWForm1.frm</td>
<td width=65%>The client’s main form.</td>
</tr>
<tr valign=top>
<td width=35%>ICoffNot.cls</td>
<td width=65%>The ICoffeeNotify interface used for call-back methods..</td>
</tr>
<tr valign=top>
<td width=35%>CWNotMe.cls</td>
<td width=65%>NotifyMe object implements the ICoffeeNotify interface, so it can receive call-backs.</td>
</tr>
<tr valign=top>
<td width=35%>CWThread.frm</td>
<td width=65%>Client form for demonstrating multithreading.</td>
</tr>
<tr valign=top>
<td width=35%>CWCofTrk.cls</td>
<td width=65%>The CoffeeTracker object is used to wait for completion events from the multithreaded Coffee object.</td>
</tr>
<tr valign=top>
<td width=35%>AboutCof.txt</td>
<td width=65%>A copy of this document, demonstrating the ability to store related documents in a project.</td>
</tr>
<tr valign=top>
<td width=35%><b>Coffee2.vbp</b></td>
<td width=65%>The Coffee2 component project.</td>
</tr>
<tr valign=top>
<td width=35%>Co2Cmon.cls</td>
<td width=65%>The CoffeeMonitor class used to demonstrate asynchronous notifications using events.</td>
</tr>
<tr valign=top>
<td width=35%>Co2Conn.cls</td>
<td width=65%>The Connector class that enables multiple clients to share a CoffeeMonitor object.</td>
</tr>
<tr valign=top>
<td width=35%>Co2CMon2.cls</td>
<td width=65%>The CoffeeMonitor2 class used to demonstrate asynchronous notifications using call-back methods.</td>
</tr>
<tr valign=top>
<td width=35%>Co2Conn2.cls</td>
<td width=65%>The Connector2 class that enables multiple clients to share a CoffeeMonitor2 object.</td>
</tr>
<tr valign=top>
<td width=35%>Co2Mod1.bas</td>
<td width=65%>Holds a reference to the shared CoffeeMonitor and CoffeeMonitor2 objects.</td>
</tr>
<tr valign=top>
<td width=35%><b>MTCoffee.vbp</b></td>
<td width=65%>The MTCoffee component project.</td>
</tr>
<tr valign=top>
<td width=35%>MTCoffee.cls</td>
<td width=65%>The multithreaded <b>Coffee</b> object.</td>
</tr>
<tr valign=top>
<td width=35%>MTCMod1.bas</td>
<td width=65%>A standard module for demonstrating instancing of global data.</td>
</tr>
<tr valign=top>
<td width=35%><b>XTimers.vbp</b></td>
<td width=65%>The call-back timer project.</td>
</tr>
<tr valign=top>
<td width=35%>XTimer.cls</td>
<td width=65%>The XTimer object.</td>
</tr>
<tr valign=top>
<td width=35%>XTimerS.bas</td>
<td width=65%>Support module for XTimer.</td>
</tr>
</table><br>
<h3>To Run</h3>
<p>
Although there's not a lot of code in it, this is a complex sample to run, because it demonstrates out-of-process components. For debugging, an out-of-process component must be run in a separate copy of Visual Basic.</p>
<p>
In addition, the sample demonstrates features — multithreading and code-only timers — that either cannot be demonstrated in, or are dangerous to run in, the development environment.
<ol>
<li>
Load XTimers.vbp into Visual Basic. On the <b>File</b> menu, select <b>Make XTimers.dll</b> to make the project into a .dll file.<p class=tl>
DO NOT run XTimers in the development environment at this time. XTimers must be compiled because it uses Windows APIs for a code-only timer object.</P></li>
<li>
Load MTCoffee into Visual Basic. On the <b>Project</b> menu, select <b>References</b> to open the References dialog box. Select <b>XTimers</b> and click <b>OK</b>, to set a reference to the compiled DLL.<br><br></li>
<li>
On the <b>File</b> menu, select <b>Make MTCoffee.exe</b> to make the project into an .exe file.<p class=tl>
DO NOT run MTCoffee in the development environment at this time. You need to make the project into an executable because the development environment can’t support multiple threads of execution — if you run MTCoffee within Visual Basic, it won’t display multithreading behavior.</P></li>
<li>
Load Coffee2.vbp into Visual Basic. On the <b>Project</b> menu, select <b>References</b> to open the References dialog box. Select <b>XTimers</b> and click <b>OK</b>, to set a reference to the compiled DLL.<br><br></li>
<li>
Press CRTL+F5 to run the Coffee2 project.<p class=tl>
Use CRTL+F5 instead F5 of when running an out-of-process component project, to ensure that all compile errors are caught before the component is supplying objects to the client. (See "Creating an ActiveX Exe Component" in <i>Component Tools Guide</i>.)</P></li>
<li>
Start another instance of Visual Basic, and load CoffWat2.vbp. On the <b>Project</b> menu, select <b>References</b> to open the References dialog box. Select <b>Coffee2</b> (make sure you get the entry for Coffee2.vbp) and <b>MTCoffee</b> (make sure you get the entry for MTCoffee.exe), and then click <b>OK</b>, to set references to the components.<br><br></li>
<li>
Press F5 to run the project.</li>
</ol>
<p>
After running the sample application and observing the behavior of MTCoffee when it allocates a separate thread for each Coffee object, you may find it instructive to recompile MTCoffee after changing the threading to a round-robin thread pool. (You can find this option in the Unattended Execution box, on the General tab of the Project Properties dialog box.) When using a round-robin thread pool, you can observe blocking and global data sharing between objects on the same thread.</p>
<p>
You can also compile Coffee2.exe and CoffWat2.exe, and run multiple clients, to observe sharing of the asynchronous notification objects CoffeeMonitor and CoffeeMonitor2. With multiple clients, the round-robin thread pool means blocking and data sharing between objects in use by different clients.</p>
<p>
To understand what's going on in this sample, see "Building Code Components," in <i>Creating ActiveX Components</i>.</p>
</BODY>
</HTML>

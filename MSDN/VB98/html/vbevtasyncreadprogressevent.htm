<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AsyncReadProgress Event</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbevtasyncreadprogressevent"></a>AsyncReadProgress Event</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbevtAsyncReadProgressEvent_C;vbevtAsyncReadProgressEventC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbevtAsyncReadProgressEvent_X;vbevtAsyncReadProgressEventX">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Applies To">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbevtAsyncReadProgressEvent_A;vbevtAsyncReadProgressEventA">
</object></p>
<p>
Occurs when more data is available as a result of an <b>AsyncRead</b> method.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<b>Sub</b> <i>object</i>_<b>AsyncReadProgress(</b><i>AsyncProp</i> <b>As AsyncProperty)</b></p>
<p>
The AsyncReadProgress event syntax has these parts:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Part</b></td>
<td class=label width=68%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=32%><i>Object</i></td>
<td width=68%>An <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defobjectexpression">
</object><a href=JavaScript:alink_4.Click()>object expression</a> that evaluates to an object in the Applies To list.</td>
</tr>
<tr valign=top>
<td width=32%><i>AsyncProp</i></td>
<td width=68%>An <b>AsyncProperty</b> object.</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p>
The AsyncReadProgress event gives you access to the progressive status of an asynchronous download.</p>
<p>
If the <b>AsyncType</b> for the <b>AsyncRead</b> method is set to either <b>vbAsyncTypeFileName</b> or <b>vbAsyncTypeByteArray</b>, you can have access to the partially downloaded data during a download. Normally, Visual Basic keeps the file open during the entire download process. Getting the <b>Value</b> for <b>vbAsyncTypeFileName</b> slows the download process (but not significantly over a slow link), because Visual Basic must close the file each time before firing the event, and then re-open the file the next time data is available. </p>
<p>
If you open the file, then you must close it before the code inside the AsyncReadProgress event completes (or before calling <b>DoEvents</b> or otherwise allowing a Windows message to be dispatched), otherwise an error will occur, preventing the AsyncReadProgress event from firing. To avoid this, include error-handling code in the AsyncReadComplete event procedure.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The firing of the AsyncReadProgress and AsyncReadComplete events is message-based. That is, a Windows notification message is posted and must be dispatched by the applications message pump to fire. Therefore, you should avoid loop structures in the code of these events. Also avoid using <b>DoEvents</b>, since it'll unexpectedly cause the code to be re-entrant.</p>
<p>
Both the AsyncReadProgress and AsyncReadComplete events occur when the download completes. (That is, <b>AsyncProp.StatusCode</b> = <b>vbAsyncStatusCodeEndDownloadData</b>.)</p>
</BODY>
</HTML>

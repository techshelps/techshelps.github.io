<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Add Method (Controls Collection)</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vbmthaddmethod(controlscollection)"></a>Add Method (Controls Collection)</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vastmPrivate;vbmthAddMethod(ControlsCollection)_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Example">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbmthAddMethod(ControlsCollection)_X">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Applies To">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vbmthAddMethod(ControlsCollection)_A">
</object></p>
<p>
Adds a control to the <b>Controls </b>collection<b> </b>and returns a reference to the control.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>object</i>.<b>Add (</b><i>ProgID</i>, <i>name</i>, <i>container</i><b>)</b></p>
<p>
The <b>Add </b>method syntax has these parts:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=19%><b>Part</b></td>
<td class=label width=81%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=19%><i>object</i></td>
<td width=81%>Required. An <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="defobjectexpression">
</object><a href=JavaScript:alink_4.Click()>object expression</a> that evaluates to an object in the Applies To list.</td>
</tr>
<tr valign=top>
<td width=19%><i>ProgID</i></td>
<td width=81%>Required. A string that identifies the control. The <i>ProgID </i>of most controls can be determined by viewing the Object Browser. The <i>ProgID </i>is composed of the Library and Class of the control. For example, the <b>CommandButton</b> control's <i>ProgID </i>is VB.CommandButton. In cases where the <i>ProgID </i>differs from that shown in the Object Browser, Visual Basic displays an error message that contains the correct <i>ProgId</i>. </td>
</tr>
<tr valign=top>
<td width=19%><i>name</i></td>
<td width=81%>Required. A string that identifies the member of the collection.</td>
</tr>
<tr valign=top>
<td width=19%><i>container</i></td>
<td width=81%>Optional. An object reference that specifies a container of the control. If not specified or NULL, defaults to the container to which the Controls collection belongs. You can put a control in any existing container control (such as the <b>Frame </b>control) by specifying this argument. A user control or an ActiveX document can also be a container.</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>The <b>Controls </b>collection is a late-bound collection. This means the compiler cannot determine in advance which controls are contained by the collection, their objects or their interfaces. Without this information, the Auto Statement Builder will not function.</p>
<p>
This method allows you to add controls to an application at run time. Dynamic control addition can be used to add the functionality of a control to an application, even after the application has been compiled and deployed. For example, you may have several complex user controls, each suited to a different task. Depending on an external factor, such as time or date or user input, a different user control could be added to an existing form in an application. You can also use the <i>container </i>argument of the method to specify a container control (such as the <b>Frame</b> control) to position the control. Or you can design an application that automatically reads a file, database, or registry entry for new controls to load. In this way, you can modify an application without having to redeploy it.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;When you add an unreferenced control that requires a license to an existing (deployed) application, you must also add the license key for the control before using the <b>Add </b>method. For information on when and how to add licenses, see "Licenses Collection" in the See Also list.</p>
<h4>Adding Unreferenced Controls at Run Time</h4>
<p>
You can also use the <b>Add</b> method to dynamically add a control that is not referenced in the project. (An "unreferenced" control is a control that is not present in the Toolbox.) To do so, you must also add the control's License key to the Licenses collection as well. The example below adds a control's license key before adding the control itself:</p>
<pre><code>Option Explicit
Private WithEvents extCtl As VBControlExtender

Private Sub Form_Load()
   Licenses.Add "prjWeeks.WeeksCtl", "xydsfasfjewfe"
   Set extCtl = Form1.Controls.Add("prjWeeks.WeeksCtl", "ctl1")
   extCtl.Visible = True ' The control is invisible by default.
End Sub
</code></pre>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>See Add Method (Licenses Collection) in the See Also list for more information about retrieving a control's license key.</p>
<p>
In order to program the events of such an unreferenced control, however, you must declare an object variable using the <b>WithEvents</b> keyword as a <b>VBControlExtender</b> object (shown above), and set the object variable to the reference returned by the <b>Add</b> method. Then use the <b>VBControlExtender</b> object's ObjectEvent event to program the control's events. An abbreviated example is shown below.</p>
<pre><code>Option Explicit
Dim WithEvents objExt As VBControlExtender ' Declare VBControlExtender variable

Private Sub LoadControl()
   Licenses.Add "Project1.Control1", "xydsfasfjewfe"
   Set objExt = Controls.Add("Project1.Control1", "myCtl")
   objExt.Visible = True 
End Sub

Private Sub extObj_ObjectEvent(Info As EventInfo)
   ' Program the events of the control using Select Case.
   Select Case Info.Name
   Case "Click"
      ' Handle Click event here.
   ' Other cases now shown
   Case Else ' Unknown Event
      ' Handle unknown events here.
   End Select
End Sub
</code></pre>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>You can't assign an intrinsic control to the VBControlExtender variable; any attempt will result in a type mismatch error.</p>
<p>
You can also program the events of a dynamically added control by declaring an object variable using the <b>WithEvents</b> keyword, and setting the reference returned by the method to the variable, as shown below:</p>
<pre><code>Option Explicit
' Declare object variable as CommandButton.
Private WithEvents cmdObject As CommandButton 

Private Sub Form_Load()
   Set cmdObject = Form1.Controls.Add("VB.CommandButton", "cmdOne")
   cmdObject.Visible = True
   cmdObject.Caption = "Dynamic CommandButton"
End Sub

Private Sub cmdObject_Click()
 &nbsp;&nbsp; Print "This is a dynamically added control"
End Sub
</code></pre>
<p>
If you intend to add a user control or any ActiveX control to your form, you must either add the control to the Toolbox, or add its License key to the Licenses collection. See the Add Method (Licenses Collection) for more information.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you add an ActiveX or user control to your project but don't use it on a form, you must also uncheck the Remove Information About Unused ActiveX Controls option on the Make tab of the Project Properties dialog box. If your application attempts to add the control, the Add method will fail because the necessary information has been discarded.</p>
<h4>Removing Controls</h4>
<p>
To remove any controls added dynamically, use the <b>Remove </b>method. It should be noted that you can only remove controls added using the <b>Add </b>method (in contrast to controls added using the <b>Load </b>statement). The example below removes a dynamically added control:</p>
<pre><code>Form1.Controls.Remove "ctl1" ' The control's name is ctl1.
</code></pre>
</BODY>
</HTML>

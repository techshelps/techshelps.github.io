<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Named Pipes</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_bkopr_named_pipes"></a>Named Pipes</h2>
<p>
Named pipes are used to transfer data between processes, similarly to anonymous pipes. However, unlike anonymous pipes, named pipes can operate between unrelated processes and across a network between computers. Typically, a server process creates a named pipe with a well-known name. Client processes that can get the name of the pipe can open the other end of the pipe, subject to access restrictions specified by the pipe's creator. After they are connected, the server and client can exchange data by performing read and write operations on the pipe. Alternatively, the pipe creator can create a pipe and let a child process inherit the handle to the pipe, or it can create a pipe with a unique name and communicate that name to the client through some other interprocess communications (IPC) mechanism. </p>
<p>
In a Microsoft BackOffice environment, named pipes have the following characteristics: 
<ul>
<li>
Shared common functionality, such as caching, with the other file systems. Manipulation of named pipes is similar to reading and writing to file handles. Remote access to named pipes is provided through the network redirector. Processes on the local computer can use named pipes to communicate with each other without going through networking components.</li>
<li>
Working with named pipes is just like working with file I/O. You can use the same file I/O APIs and simply pass in the named pipe handles. Named pipes also support impersonation and asynchronous execution. Asynchronous execution, known as <i>overlapped I/O</i>, makes it possible for one pipe to simultaneously read and write data and for a single thread to perform simultaneous I/O operations on multiple pipe handles. This enables a single-threaded server process to efficiently handle communications with multiple client processes.</li>
</ul>
<p>
For more information about named pipes, see "Interprocess Communication" in the "Windows Base Services" section of the Microsoft Platform SDK.</p>
<p>&nbsp;</p></body>
</HTML>

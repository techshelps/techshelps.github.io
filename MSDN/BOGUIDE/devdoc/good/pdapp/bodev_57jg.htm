<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About Remote Procedure Call</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_bkopr_about_remote_procedure_call"></a>About Remote Procedure Call</h2>
<p>
Microsoft remote procedure call (RPC) represents the convergence of three powerful programming models: the familiar model of developing C applications by writing procedures and libraries; the model that uses powerful computers as network servers to perform specific tasks for their clients; and the client/server model, in which the client usually manages the user interface while the server handles data storage, queries, and manipulation. When you write a client/server application, you must provide the layer of code that manages network communication. RPC tools provide this layer for you.</p>
<p>
As a tool for creating distributed applications, RPC provides the following benefits:
<ul>
<li>
A familiar and popular programming model. You can easily turn functions into remote procedures, which simplifies the development and test cycles. Also, the Microsoft implementation is compatible with both client and server applications.</li>
<li>
A method of hiding many details of the network interface from the developer. You don't need to understand specific network functions or low-level network protocols to implement powerful distributed applications. </li>
<li>
A solution to the data-translation problems that occur in heterogeneous networks; individual applications can ignore this problem.</li>
<li>
A scalable approach. As a network grows, applications can be distributed to more than one computer on the network.</li>
</ul>
<p>
When developing client/server applications using RPC, you must perform the following tasks:
<ul>
<li>
Specify the protocol sequences that the server application will use to communicate with clients.</li>
<li>
Enter the server into a listening mode for client requests.</li>
<li>
Have the client application define the function interfaces using the Interface Definition Language (IDL) and compile the IDL file using the MIDL compiler.</li>
<li>
Have the client application use automatic binding or application-managed binding (manage binding handles, and so on).</li>
</ul>
<p>
For more information about Microsoft RPC, see the "Internet, Networking, and Distributed Services" section of the Microsoft Platform SDK.</p>
<p>&nbsp;</p></body>
</HTML>

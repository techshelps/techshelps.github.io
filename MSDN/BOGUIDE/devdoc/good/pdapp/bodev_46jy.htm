<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Supporting Automation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_bkopr_supporting_automation"></a>Supporting Automation</h3>
<p>
Using Automation (formerly known as OLE Automation) enables the developer to create an instance of a <i>programmable object</i>—a software component that exposes its properties and methods—and reference and manipulate it with tools that support Automation. Automation uses the OLE/Component Object Model. Use Automation to:
<ul>
<li>
Create applications and programming tools that expose objects.</li>
<li>
Create and manipulate objects exposed in one application that were originally created in another application.</li>
<li>
Create tools that access and manipulate objects. These tools can include embedded macro languages, external programming tools, object browsers, and compilers.</li>
</ul>
<p>
The objects an application or programming tool exposes are called <i>Automation objects</i>. Applications and programming tools that access those objects are called <i>Automation controllers</i>. Applications and other software packages define and expose objects, which, in turn, can be acted upon by Automation controllers. Type information describes the exposed objects, and can be used by Automation controllers at either compile time or run time.</p>
<p>
For more information on Automation, see the "COM and ActiveX Object Services" section of the Microsoft Platform SDK.</p>
<p>&nbsp;</p></body>
</HTML>

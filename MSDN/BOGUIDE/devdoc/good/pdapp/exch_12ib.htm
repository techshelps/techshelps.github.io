<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Developing Client/Server Applications</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_bkopr_developing_clientfserver_applications"></a>Developing Client/Server Applications</h2>
<p>
Some applications may require both a client and a service component. Although it is possible for client applications to communicate directly with services using mechanisms such as the Microsoft remote procedure call (RPC) protocol, client application and server application components in the Microsoft Exchange Server environment do not often directly connect in this manner. Instead, client applications and services interact through messages that are sent to recipient objects in the information store. When developing an application with both a client application and a server application component, you must decide how to correctly divide the functionality between the client and server components to optimize the system's overall performance.</p>
<p>&nbsp;</p></body>
</HTML>

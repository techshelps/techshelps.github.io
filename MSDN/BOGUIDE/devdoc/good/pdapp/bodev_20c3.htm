<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft SNA Server Client Issues</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_bkopr_microsoft_sna_server_client_issues"></a>Microsoft SNA Server Client Issues</h3>
<p>
Microsoft SNA Server is a systems network architecture (SNA) gateway for connecting desktops on a local area network (LAN) to midrange and mainframe computers (such as the IBM AS/400). Several different industry-standard SNA APIs have evolved for development of integrated SNA applications and hosts:
<ul>
<li>
WOSA APIs or Function Management Interface (FMI) for SNA Client</li>
<li>
SNA Server Client APIs</li>
<li>
SNA Server compatibility APIs for IBM PC Support or Client Access/400</li>
</ul>
<p>
To provide one common set of APIs to port applications from various operating systems to Windows NT, Windows 95, and Windows version 3.<i>x, </i>a Windows SNA specification was created. As a direct result of this work, the Windows APPC, Windows CPI-C, and Windows logical unit application (LUA) specifications were developed. All of these Windows SNA specifications define a set of extensions that allow for asynchronous communication. Asynchronous call completion returns the initial call immediately so the application can continue with other processes. A program that issues a call and does not regain control until the operation completes is not able to perform any other operations. Windows NT also supports using Win32® events for supporting asynchronous calls. </p>
<p>
Programs written to use Windows APPC can exchange data with programs written to use other implementations of APPC that adhere to the SNA LU type 6.2 or later architecture. Windows APPC adds to this functionality by providing a set of extensions for asynchronous communication in addition to the full complement of APPC features.</p>
<p>
Windows CPI-C is compliant with CPI-C version 1.2 or later, which allows applications developed using the CPI-C Systems Application Architecture API to establish a conversation to exchange data and control information flow between two programs. CPI-C version 1.2 or later provides the following functionality:
<ul>
<li>
Support for automatic parameter conversion</li>
<li>
Communication with non-CPI-C programs</li>
<li>
Local/remote transparency as well as X/Open CPI-C support for nonblocking calls</li>
<li>
Ability to accept multiple conversations</li>
<li>
Support for data conversion (beyond parameters)</li>
<li>
Support for security parameters</li>
</ul>
<p>
Windows CPI-C further adds to this functionality by providing a set of extensions for asynchronous communication, in addition to the full complement of supported features in CPI-C version 1.2 or later (with the exception of resource recovery).</p>
<p>
The conventional LUA programming interface is an API that allows you to write LUAs to communicate with host applications. The Windows LUA interface is provided at the request/response unit (RU) and session levels, allowing programmable control over the SNA messages sent between your communications software and the host. It can be used to communicate with any of the logical unit (LU) types 0, 1, 2, or 3 at the host; the application must send the appropriate SNA messages required by the host.</p>
<p>
The Function Management Interface (FMI) provides applications with direct access to SNA data flows and information about SNA control flows by means of status messages, while shielding them from the full complexities of SNA protocol handling. It is particularly suited to the requirements of applications emulating 3270-type controllers.</p>
<p>
For more information about Microsoft SNA Server and its APIs, see the "Internet, Networking, and Distributed Services" section of the Microsoft Platform SDK.</p>
<p>
Developers who want to create applications that integrate a 3270 emulator with SNA Server should use the 3270 Emulator Interface Specification. This specification defines the initialization, message passing, and termination procedures required for 3270 emulator and SNA Server communication.</p>
<p>
SNA Server version 2.11 and later supports the EHNAPPC API, which is the Windows-based APPC API supported by IBM's PC Support and Client Access/400 (CA/400) products. IBM has provided the EHNAPPC API to its independent software vendor (ISV) community as the way to write Windows-based applications that integrate with the AS/400. There are estimated to be more than 60 applications that use this API as a way to connect to the AS/400 data and applications. These ISV applications will work unchanged with SNA Server version 2.11 and later versions.</p>
<p>&nbsp;</p></body>
</HTML>

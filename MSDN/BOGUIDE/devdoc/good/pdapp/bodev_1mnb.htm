<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>File Mapping</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_bkopr_file_mapping"></a>File Mapping</h2>
<p>
File mapping enables a process to treat the content of a file as if it were a block of memory in the process's address space. Therefore, instead of using file input and output (I/O) operations, the process can use simple pointer operations to examine and modify the contents of the file. </p>
<p>
The Win32® API enables two or more processes to access the same <i>file-mapping object</i>. Each process receives a pointer to memory in its own address space. With this pointer, the process can read or modify the contents of the file. </p>
<p>
There are three ways an application can share a file-mapping object created in one process with another process: 
<ul>
<li>
<b>Inheritance</b>. The first process creates the file-mapping object, and then allows the handle of the object to be inherited by a child process. </li>
<li>
<b>Named file mapping</b>. The first process creates the file-mapping object with a well-known name (which can be different from the file name). The second process opens the file-mapping object by specifying the well-known name. Alternatively, the first process can create a file-mapping object with a unique name and communicate that name to the second process through some other IPC mechanism (named pipe, mailslot, and so on). </li>
<li>
<b>Handle duplication</b>. The first process creates the file-mapping object, and then passes the handle of the object to the second process. The second process then duplicates the handle to gain access to the shared memory. The original process can communicate the file-mapping handle to the second process through one of the other IPC mechanisms (named pipe, mailslot, and so on). </li>
</ul>
<p>
When two or more processes have read/write access to a shared memory block, they must use some sort of synchronization object, such as a semaphore, to prevent data corruption in a multitasking environment. </p>
<p>
File mapping is quite efficient and also provides operating system supported security attributes that can help prevent unauthorized data corruption. File mapping can be used only between processes on a local computer; it cannot be used over a network. An application can, however, create a file-mapping object to a file on a remotely mounted volume. </p>
<p>
For more information about file mapping, see "Interprocess Communications" in the "Windows Base Services" section of the Microsoft Platform SDK.</p>
<p>&nbsp;</p></body>
</HTML>

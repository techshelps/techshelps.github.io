<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding Transaction Programs</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_bkopr_understanding_transaction_programs"></a>Understanding Transaction Programs</h3>
<p>
The part of an application that initiates or responds to APPC communications is called a transaction program (TP). A transaction program on a workstation is not a stand-alone program. Instead, it is the part of one application that handles transactions (exchanges of data) with another application. These programs communicate as peers, on an equal (rather than hierarchical) basis, and use APPC verbs to exchange status information and application data. Each TP uses APPC verbs to supply parameters to APPC, which performs the desired function and returns parameters to the TP.</p>
<p>
Various hardware and software elements in the SNA environment are required for two TPs to communicate. Most importantly, for access to the network, each TP must be associated with a logical unit (LU) of type 6.2. The relationship between TPs and LUs is complex and developers must understand many terms including a <i>mapped </i>or<i> basic conversation</i>, a type of conversation used by application TPs; <i>synchronous verb</i>, an APPC verb that blocks further program operations until the processing of the verb is complete; and <i>invokable TP</i>, a TP that can be invoked by another TP. </p>
<p>
The SNA Server documentation provides information about designing and coding TPs. Important topics include:
<ul>
<li>
Conversation states</li>
<li>
Confirmation processing</li>
<li>
Asynchronous data receiving</li>
<li>
Conversation security</li>
<li>
Basic and mapped conversations</li>
<li>
Invoking, and invokable, TPs</li>
</ul>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

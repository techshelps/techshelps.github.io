<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Programming Open Data Services</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_bkopr_programming_open_data_services"></a>Programming Open Data Services</h2>
<p>
Open Data Services (ODS) server applications are event-driven—they respond to a predefined set of events that the ODS Library generates in response to an incoming request or to an error. The programming tasks involved in creating an ODS server application are based on meeting the following requirements:
<ul>
<li>
Initializing the ODS server application.</li>
<li>
Installing a set of error handlers.</li>
<li>
Installing a set of event handlers that will respond to the main ODS event types by processing incoming requests and returning the results to the user. The main ODS event types are connect, language, and remote stored procedure.</li>
</ul>
<p>
</p>
<p>
For applications that provide access to a remote data source, the tasks include:
<ul>
<li>
Establishing a connection to the data source. </li>
<li>
Passing user requests.</li>
<li>
Receiving the results.</li>
<li>
Returning the results to the user.</li>
</ul>
<p>
</p>
<p>
ODS also provides an extensive selection of functions and macros, such as those related to data retrieval and language event processing. Moreover, ODS provides three primary data structures to maintain information about the status of the ODS server application and each of the connected client processes.</p>
<p>
An ODS server application can take advantage of several memory and thread management features of the Win32® API such as: 
<ul>
<li>
<b>Threads</b>. ODS uses a Win32 thread management technique called <i>thread pooling </i>to make threads available to active client connections faster in environments that support a large number of users.</li>
<li>
<b>Windows NT security</b>. ODS provides the capability for a server application to act in the security context of a client that has connected to it. Potential uses include allowing an ODS server application to handle user access entirely through Windows NT facilities, or implementing a unique auditing procedure to track system usage during a client session.</li>
</ul>
<p>
</p>
<p>
For more information about using the Win32 API in ODS programming, see the Microsoft SQL Server Programmer's Toolkit documentation in the "Database and Messaging Services" section of the Platform SDK.</p>
<p>&nbsp;</p></body>
</HTML>

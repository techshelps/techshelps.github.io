<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Interprocess Communications</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bkopr_interprocess_communications"></a>Interprocess Communications</h1>
<p>
For an application to take complete advantage of the features in the Microsoft® BackOffice® environment, you must design it to communicate with other applications as well as with components within BackOffice. Typically, cooperating and communicating applications can be categorized as clients or servers. A <i>client</i> is an application or a process that requests a service from some other process. A <i>server</i> is an application or a process that responds to a client request. Many applications act as both a client and a server, depending on the situation. The process of communication between two or more applications, regardless of their client/server status, is called <i>interprocess communications </i>(IPC).</p>
<p>
Before you decide which IPC mechanisms to use in the development of your application, you should determine whether:
<ul>
<li>
The application should be able to communicate with other applications running on other computers, or whether it is sufficient for the application to communicate only with other applications on the local computer. Some IPC mechanisms work either on the local computer or over a network; others work only on the local computer. </li>
<li>
The application should be interoperable, able to communicate with other applications on other computers that may be running under different operating systems (for example, Microsoft® MS-DOS®, Microsoft® Windows® version 3.<i>x</i>, UNIX).</li>
<li>
The user of your application should have to intervene to choose the other application with which the application communicates, or whether your application can implicitly find its cooperating partners. </li>
<li>
Performance is critical to the application. All IPC mechanisms include some amount of communications overhead. </li>
</ul>
<p>
Many IPC mechanisms, such as dynamic-link libraries and shared memory, are implemented only on the local system. Other IPC mechanisms, such as distributed COM (DCOM) and remote procedure calls (RPCs), find their primary functionality across networks and between different computer systems. Each IPC mechanism has unique features that singularly describe it, and which you should consider during the development of your application.</p>
<p>
Considerations for choosing the appropriate IPC mechanisms are shown in the following diagram.</p>
<p>
<img src="images/ipc2.gif" border=0></p>
<p>
The following topics describe the specific IPC mechanisms you can incorporate into your application as you develop it for the BackOffice environment.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How SQL Server Implicitly Initiates a Transaction</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="ashowsqlserverimplicitlyinitiatesatransaction"></a>How SQL Server Implicitly Initiates a Transaction</h1>
<p>
Microsoft SQL Server is an example of a resource manager that supports implicit initiation of MS DTC transactions. A SQL Server implicitly initiated transaction works as follows:
<ol>
<li>
When a stored procedure invokes the Transact-SQL BEGIN TRANSACTION statement, SQL Server determines whether the <b>Remote Procedure Transactions</b> option has been enabled by the database administrator. If the option has been enabled, SQL Server invokes the MS DTC <b>BeginTransaction</b> method and obtains a transaction object representing the transaction. After obtaining the transaction object, SQL Server enlists in the transaction with its local MS DTC transaction manager. This permits SQL Server to participate in the two-phase commit protocol and to receive transaction commit or abort notifications from MS DTC.</li>
<li>
All database updates, inserts, and deletes performed by the stored procedure are done under the auspices of the MS DTC transaction. If the stored procedure invokes a remote stored procedure in another database, SQL Server propagates the MS DTC transaction with the call to the remote stored procedure. All updates to both databases are protected by the MS DTC transaction.</li>
</ol>
<p>
When the work of the transaction is complete, the stored procedure calls the Transact-SQL COMMIT TRANSACTION statement. In response to the COMMIT TRANSACTION call, SQL Server calls the MS DTC <b>Commit</b> method. MS DTC uses the two-phase commit protocol to coordinate commitment of the transaction. Alternatively, the stored procedure could call the Transact-SQL ROLLBACK TRANSACTION statement. In this case, SQL Server calls the MS DTC <b>Abort</b> method to undo the effects of the transaction.
<ol>
<li>
The stored procedure may then go on to perform more transactions.</li>
</ol>
<p>
A resource manager that initiates and participates in MS DTC transactions must reside on a system on which the Complete MS DTC Service has been installed. For information on installation and configuration of MS DTC, refer to "Setting Up an MS DTC System," in the <i>MS DTC Administrator’s Guide and Programmer’s Reference</i>.</p>
<p>
The following example illustrates how Microsoft SQL Server can be used to implicitly begin an MS DTC transaction. First <b>SP_CONFIGURE</b> is used to enable the <b>Remote Procedure Transactions</b> option.</p>
<pre><code>SP_CONFIGURE “REMOTE PROC TRANS” 1
RECONFIGURE WITH OVERRIDE</code></pre>
<p>
Other resource managers may choose to provide a similar means for existing applications to exploit MS DTC compatible.</p>
<pre><code>/*******************************************************/
/* Using the server configuration parameter for        */             implicit server-initiated transactions.                */
/*******************************************************/
<b><i> </i></b>
CREATE PROCEDURE change_addr(@au_id varchar(11),
                             @addr varchar(40),
                             @toserver varchar(12) ) AS
<b><i> </i></b>
declare @execstr varchar(200)
<b><i> </i></b>
-- 1. Start a Transaction. This transaction will become
--    an MS DTC distributed transaction when the remote 
--    stored procedure is called because the server
--    configuration parameter is set.
<b><i> </i></b>
BEGIN TRANSACTION
<b><i> </i></b>
-- 2. Change local author information
<b><i> </i></b>
update authors set address = @addr where au_id = @au_id
<b><i> </i></b>
-- 4. Make a string with the server name and procedure
--    to execute
<b><i> </i></b>
select @execstr = @toserver  '.pubs..update_addr '
<b><i> </i></b>
-- 5. Update remote server.
--     ( Note that these servers must be added to each other
--     via sp_addserver and sp_addremotelogin )
<b><i> </i></b>
exec @execstr @au_id, @addr
<b><i> </i></b>
-- 6. Commit the MS DTC transaction
<b><i> </i></b>
COMMIT TRANSACTION</code></pre>
<p>&nbsp; </p></body>
</HTML>

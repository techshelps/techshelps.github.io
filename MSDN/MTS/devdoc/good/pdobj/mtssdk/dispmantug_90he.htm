<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing a Resource Dispenser</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<p>
<a name="asimplementingaresourcedispenser"></a>Implementing a Resource Dispenser</p>
<p>
The following steps outline a general procedure for implementing a resource dispenser:
<ol>
<li>
Decide on RESTYPID format which categorizes how your resources differ from each other.</li>
<li>
Use the <code>Mtxdm.h</code> and <code>mtxdm.lib</code> header file and library, respectively.</li>
<li>
Build a DLL which implements <b>IDispenserDriver</b> and the API you expose to applications.</li>
<li>
In the startup (DllMain or first call to the dispenser API), call <b>GetDispenserManager</b>. This returns a pointer to the DispMan's <b>IDispenserManager</b>.</li>
<li>
Call <b>RegisterDispenser,</b> passing a pointer to your implementation of <b>IDispenserDriver</b>. This will cause DispMan to create a holder (pooling manager) for your resource dispenser and then return the pointer to your <b>IHolder</b>.</li>
<li>
Store this pointer in order to call <b>AllocResource</b> and <b>FreeResource</b>.</li>
<li>
You can now (in response to calls to your API)make calls to <b>AllocResource</b> and <b>FreeResource</b>. <b>AllocResource</b> will initially respond by calling back to your <b>CreateResource</b> method, but later <b>AllocResource</b> calls will be serviced from the growing pool of resources.</li>
</ol>
<p>
For more information, see the TxFileDisp sample.</p>
<p>&nbsp; </p></body>
</HTML>

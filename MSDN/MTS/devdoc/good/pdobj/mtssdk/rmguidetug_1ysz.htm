<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Obtaining the Whereabouts</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asobtainingthewhereabouts"></a>Obtaining the Whereabouts</h1>
<p>
Resource managers which are designed as client/server systems, will generally have the resource manager server on one node and the resource manager proxy on other nodes. If the application client begins the transaction and wants the resource manager to enlist in the transaction, then it will do so by invoking a function in the RM proxy (such as <b>RM_Enlist</b>) and providing it with the <b>ITransaction</b> which it wants the resource manager to enlist in.</p>
<p>
If the transaction is begun on Node A, then before the resource manager on Node B can enlist in the transaction, the transaction needs to be propagated to the transaction coordinator on Node B. RM proxy needs to request MS DTC on its node to propagate the transaction to node B. Before making this request, it needs to know which MS DTC should the transaction be propagated to. To obtain this information, the RM proxy, sends a message to its resource manager asking for the whereabouts of the MS DTC which the resource manager is working with. The resource manager does the following steps to obtain the whereabouts:
<ol>
<li>
It obtains the <b>ITransactionImportWhereabouts</b> interface. There are multiple ways to obtain this interface, such as by calling <b>IResourceManagerFactory::QueryInterface</b>, or by calling <b>DtcGetTransactionManager</b> function, or by calling the <b>QueryInterface</b> method on the <b>IUnknown</b> that the resource manager might have obtained from a previous call to <b>DtcGetTransactionManager</b>.</li>
<li>
It then calls <b>ITransactionImportWhereabouts::GetWhereabouts</b>, to obtain the whereabouts of the MS DTC which it is working with. Having obtained this information once, it can be cached and therefore, future calls of this method can be avoided. What is obtained from this call is a <i>binary large object</i> (BLOB).</li>
</ol>
<p>
After obtaining the whereabouts BLOB, the resource manager sends it to the RM proxy. RM proxy after receiving the whereabouts BLOB does the following steps to obtain an ITransactionExport interface.
<ol>
<li>
It obtains the <b>ITransactionExportFactory</b> interface from the MS DTC proxy. This interface is obtained by invoking <b>ITransactionDispenser::QueryInterface</b>. See the section titled "Obtaining Transaction Dispenser from a Transaction" for more details.</li>
<li>
It then invokes <b>ITransactionExportFactory::Create</b>, passing it the whereabouts BLOB which it had received from the resource manager. As a result of this invocation, it obtains an <b>ITransactionExport</b> interface to an export object, which it can then keep for exporting transaction to the MS DTC with which its resource manager is working.</li>
</ol>
<p>
<b>Note</b>   Even in cases where the RM proxy might be on the same node as the resource manager, the steps for obtaining the whereabouts and propagating the transaction need to be performed.</p>
<p>&nbsp; </p></body>
</HTML>

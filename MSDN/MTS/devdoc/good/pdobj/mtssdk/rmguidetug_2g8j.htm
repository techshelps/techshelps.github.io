<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transaction Properties</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="astransactionproperties"></a>Transaction Properties</h1>
<p>
Transactions are <i>atomic</i>, <i>consistent</i>, <i>isolated</i>, and <i>durable</i> (ACID) modules of execution. They complement the Microsoft Component Object Model (COM) program module structure.</p>
<p>
Transactions provide the following ACID properties:
<ul>
<li>
Atomicity—A transaction will either <i>commit </i>or<i> abort</i>. If a transaction commits, all of its effects remain; if it aborts, all of its effects are undone. For example, when you rename an object, either the new name is created and the old name is deleted (commit), or the object is not renamed (abort).</li>
<li>
Consistency—A transaction is a correct transformation of the system <i>state</i>; it preserves the state invariants. For example, when you add an element to a double-linked list, all four forward and backward pointers are updated.</li>
<li>
Isolation—Concurrent transactions are isolated from the updates of other incomplete transactions; these updates do not constitute a consistent state. This property is often called <i>serializability</i>. For example, a second transaction traversing the double-linked list mentioned in the previous consistency example will see the list before or after the insert, but will only see complete changes.</li>
<li>
Durability—Once a transaction commits, its effects will persist even if there are system failures. For example, after the object in the previous atomicity example is renamed, it will have the new name even if the system fails and reboots right after the commit completes.</li>
</ul>
<p>&nbsp; </p></body>
</HTML>

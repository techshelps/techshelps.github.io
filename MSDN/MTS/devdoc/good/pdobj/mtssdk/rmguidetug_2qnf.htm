<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Distributed Transactions Work</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="ashowdistributedtransactionswork"></a>How Distributed Transactions Work</h1>
<p>
Microsoft Distributed Transaction Coordinator (MS DTC) supports transactions that are distributed across two or more Windows 95 or Windows NT systems. Each system has a local transaction manager. All applications and resource managers communicate with their local transaction managers. The transaction managers cooperatively manage transactions that span systems.</p>
<p>
When a request arrives with a new transaction, a relationship is established between the two systems. The system making the request informs its local transaction manager that the transaction has an <i>outgoing relationship </i>to the transaction manager on the second system. Similarly, the system receiving the request informs its local transaction manager that the transaction has an <i>incoming relationship</i> with the transaction manager on the first system.</p>
<p>
These outgoing and incoming relationships form a tree of transaction manager relationships called the transaction's <i>commit tree</i>. The enlisted resource managers are also members of this commit tree: they have an outgoing and incoming relationship to their local transaction manager.</p>
<p>
When a distributed transaction commits or aborts, the prepare, commit and abort messages flow outward on the commit tree. Any node of the tree can unilaterally abort a transaction anytime before it agrees to the prepare request sent in the first phase. Once a node has prepared, it remains prepared and in-doubt until the commit coordinator tells it to commit or abort the transaction. The root transaction manager of the commit tree is called the <i>global commit coordinator</i>. This coordinator makes the decision to either commit or abort the transaction and is never in doubt.</p>
<p>
If a computer fails, then restarts, the transaction manager at that computer tries to determine the outcome of all in-doubt transactions in which it participated.</p>
<p>
The transaction manager reads its log file to determine the outcomes of transactions for which it was the commit coordinator:
<ol>
<li>
For incoming transactions from other systems, the transaction manager determines if it was previously notified of the transaction's outcome.</li>
<li>
For incoming transaction that remain in-doubt, the transaction manager queries the incoming transaction manager to learn the transaction's outcome.</li>
</ol>
<p>
The transaction manager also responds to queries from other transaction managers regarding <i>in-doubt outgoing transactions</i> sent to them, similar to the protocol that transaction managers and resource managers follow at restart. The transaction manager determines the outcome of each in-doubt transaction and informs the resource managers of the transaction's outcome.</p>
<p>
System or communication failures can leave transactions in-doubt for extended periods of time. While a transaction is in-doubt, the resources modified by the transaction remain locked and unavailable to others. The system operator can use the graphical management interface at the commit coordinator system to resolve transactions that remain in-doubt, or at the in-doubt system to force the transaction to either commit or abort. When the systems reconnect, MS DTC will detect these operator actions and flag any inconsistent actions.</p>
<p>&nbsp; </p></body>
</HTML>

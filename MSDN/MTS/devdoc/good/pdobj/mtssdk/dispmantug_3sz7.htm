<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Resource Dispenser Requirements</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<p>
<a name="asresourcedispenserrequirements"></a>Resource Dispenser Requirements</p>
<p>
A resource dispenser is a <i>dynamic-link library (DLL)</i> component which provides two interfaces. The first (<b>IDispenserDriver</b>) provides the holder with basic information on how to create, destroy, and enlist its own type of resources. The second is exposed to the application and can be either a COM interface or set of interfaces, or an <i>application programming interface </i>(API) to which a component is linked via an import library.</p>
<p>
Resource dispensers manage <i>non-durable shared state</i> within a process. Although the resources managed may often be connections to a component managing a <i>durable state</i>, the connections themselves are not durable. A resource dispenser will often use a related resource manager to retain the durable state.</p>
<p>
An application can call any resource dispenser, which in turn may offer any API to the application. A resource dispenser is instantiated when an application component refers to it. On start-up, a resource dispenser must register itself with DispMan.</p>
<p>
A transactional resource dispenser must enlist in an MS DTC transaction. This implies use of either an internal or external (to the dispenser) resource manager that is OLE Transactions-compliant.</p>
<p>&nbsp; </p></body>
</HTML>

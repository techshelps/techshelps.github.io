<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How MS DTC Communicates with the XA TM</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="ashowmsdtccommunicateswiththexatm"></a>How MS DTC Communicates with the XA TM</h1>
<p>
When MS DTC communicates with the XA TM:
<ol>
<li>
The application provides information to the XA TM about all the resource managers (RMs) it will use. The application then begins a new transaction on the XA TM. This transaction is begun on a a Windows NT thread (referred to hereafter as thread).</li>
<li>
When a new transaction is begun, the XA TM uses the information provided by the application to inform each RM about the transaction. It does this by calling xa_start, an XA function. The RM in this example is  MS DTC.</li>
<li>
When xa_start is called, MS DTC creates an entry in its association table which specifies which thread is on which transaction. The association table contains tuples of the form &lt;Thread_Id, XID, pITransaction&gt;. The first element is the thread identifier, the second parameter is the XID that was passed in as an argument to xa_start by the XA TM, and the third element is an OLE Transactions transaction that was created by MS DTC in correspondence with the XID.</li>
<li>
Steps 2 and 3 were executed on the thread that was used by the application to notify the TM to begin a transaction. After beginning a transaction, the thread returns to the application. The application then needs to inform the RM about the new transaction in a way that is RM-specific. For example, Microsoft SQL Server provides a new DB-Library function in its RM proxy :<pre><code>int dbEnlistInXaTrans ( dbProc, …)</code></pre>
</li>
</ol>
<p>
The parameter <i>dbProc</i> indicates which DB-Library connection is being requested to participate in the distributed transaction. The DB-Library (which is the RM Proxy for MS SQL Server) knows this is an XA transaction. The DB-Library must obtain the <b>ITransaction</b> that corresponds to the XA transaction on which the application is requesting it to enlist the connection. Then DB-Library does the following:
<ul>
<li>
Obtains the <b>IXATransLookup</b> interface from MS DTC.</li>
<li>
Invokes the <b>Lookup</b> method on this interface and gets the <b>ITransaction</b> it needs.</li>
<li>
Performs the normal procedure to enlist a connection in a OLE Transactions transaction.</li>
</ul>
<p>
As mentioned previously, MS DTC creates an entry in an association table when it is notified of a new XA transaction. MS DTC obtains the thread ID of the thread by calling the <b>IXATransLookup::Lookup</b> method and looks for an entry in the association table, using the thread ID as the key. After it finds the entry, it returns a reference to the corresponding <b>ITransaction</b> to the caller, which is DB-Library.</p>
<p>
At the end of the task, the application calls either <b>Commit</b> or <b>Abort</b>, which goes to the XA TM. The XA TM then sends the <i>two-phase commit messages</i> to the RMs, including MS DTC. MS DTC receives the messages and sends the corresponding two-phase commit messages to the OLE Transactions RMs that are enlisted in the transaction.</p>
<p>&nbsp; </p></body>
</HTML>

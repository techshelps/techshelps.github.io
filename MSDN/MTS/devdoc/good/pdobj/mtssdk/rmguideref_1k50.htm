<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IResourceManager::Reenlist</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<p>
<a name="asiresourcemanagerreenlist"></a>IResourceManager::Reenlist</p>
<p>
Re-enlists a resource manager in a transaction.</p>
<pre><b>HRESULT Reenlist (</b></pre>
<table cellspacing=5 cols=2>
<tr valign=top>
<td width=36%><pre><b>unsigned char *</b></pre>
</td>
<td width=64%><pre><i>pPrepInfo</i><b>,</b></pre>
</td>
</tr>
<tr valign=top>
<td width=36%><pre><b>ULONG</b></pre>
</td>
<td width=64%><pre><i>cbPrepInfo</i><b>,</b></pre>
</td>
</tr>
<tr valign=top>
<td width=36%><pre><b>ULONG</b></pre>
</td>
<td width=64%><pre><i>ulTimeout</i><b>,</b></pre>
</td>
</tr>
<tr valign=top>
<td width=36%><pre><b>XACTSTAT *</b></pre>
</td>
<td width=64%><pre><i>pXactStat</i><b>);</b></pre>
</td>
</tr>
</table><br>
<p>
<b>Parameters</b></p>
<p>
<i>pPrepInfo</i> [in]<br>
Binary BLOB containing the prepare information previously obtained from the Enlistment object and written into the resource manager's log.</p>
<p>
<i>cbPrepInfo</i> [in]<br>
Length in bytes of <i>pPrepInfo</i>.</p>
<p>
<i>ulTimeout</i> [in]<br>
How long the RM is willing to wait for the outcome of a transaction, in milliseconds. 0x0 defined as XACTCONST_TIMEOUTINFINITE is the infinite time-out value.</p>
<p>
<i>pXactStatus </i>[out]<br>
TM provides the status of the transaction. One of the following values:</p>
<p>
XACTSTAT_ABORTED<br>
XACTSTAT_COMMITTED</p>
<p>
<b>Return Values</b></p>
<p>
S_OK<b><br>
</b>Success.</p>
<p>
E_INVALIDARG<b><br>
</b>One or more arguments are invalid.</p>
<p>
E_OUTOFMEMORY<br>
Unable to allocate memory.</p>
<p>
E_UNEXPECTED<br>
Something unexpected occurred.</p>
<p>
XACT_E_CONNECTION_DOWN<br>
Lost connection with the TM.</p>
<p>
XACT_E_REENLISTTIMEOUT<br>
The re-enlist request timed out. XACTSTAT_NONE is returned via *<i>pXactStat</i> when this error occurs.</p>
<p>
XACT_E_RECOVERYALREADYDONE<br>
<b>ReenlistmentComplete</b> method was invoked at least once after this interface was obtained. Therefore, the recovery is complete. Cannot re-enlist after recovery has completed.</p>
<p>
<b>Comments</b></p>
<p>
At recovery, the RM reregisters with the coordinator to re-establish its relationship with it and obtains a new resource manager object representing the new relationship. After obtaining the <b>IResourceManager</b> interface, it starts asking the coordinator for the outcome of all transactions that are in-doubt from the resource manager’s perspective. Before replying with a Prepared message on a Prepare Request, the resource manager needs to obtain <i>prepare information</i> from the Enlistment object by using the <b>IPrepareInfo::GetPrepareInfo</b> method. This BLOB is persisted by the RM in its log before it replies with a Prepared message. After the RM is prepared, the transaction is in-doubt from it’s perspective until it receives an Abort or a Commit Request from the coordinator. If a fault was to happen that causes the enlistment and the resource manager object to go away, then the RM needs to use this method to determine the final outcome of the transaction. The prepare information is passed as a parameter to the <b>Reenlist</b> method call.</p>
<p>
The outcome can be either COMMITTED or ABORTED. There can be no other outcome the call times out and a XACT_E_REENLISTTIMEOUT error is returned. MS DTC uses the presumed abort protocol; this protocol lets the coordinator to unilaterally abort a transaction if a fault occurs prior to it having made a COMMIT decision. A transaction is said to have been committed only when the Coordinator has successfully persisted its decision to COMMIT the transaction.</p>
<p>
<b>Caution</b>   It is not correct to ask for the outcome of a transaction after it has completed. The coordinator is responsible for providing the outcome only for those transactions which it remembers. All aborted transactions are forgotten immediately and no information regarding those transactions persists. All committed transactions are forgotten after all the resource managers that were enlisted in that transaction have replied with a “Committed” message, meaning that the Coordinator successfully obtained a reply to the second phase from each of the resource managers that was enlisted in that transaction. Only under certain optimizations will the resource manager or managers not receive the second phase notifications.</p>
<p>&nbsp; </p></body>
</HTML>

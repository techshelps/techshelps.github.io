<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ITransactionOutcomeEvents Interface</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<p>
<a name="asitransactionoutcomeeventsinterface"></a>ITransactionOutcomeEvents Interface</p>
<p>
This interface is used by application programs that require asynchronous notification about transaction outcomes. The application program implements the methods in this interface and registers the interface with the connection point mechanism. MS DTC calls the appropriate method on this interface to inform the application about the outcome of a transaction.</p>
<table cellspacing=5 cols=2>
<tr valign=top>
<td width=27%>Implemented by:</td>
<td width=73%>Application program</td>
</tr>
<tr valign=top>
<td width=27%>Object</td>
<td width=73%>This object is implemented by the application program. The object must support the <b>ITransactionOutcomeEvents</b> interface</td>
</tr>
<tr valign=top>
<td width=27%>Interface Source</td>
<td width=73%>The application program implements the methods in this interface</td>
</tr>
<tr valign=top>
<td width=27%>Called by:</td>
<td width=73%>MS DTC proxy</td>
</tr>
</table><br>
<p>
Typically, <b>ITransaction::Commit</b> or <b>Abort</b> calls are performed synchronously. This means that the calling thread is blocked until MS DTC makes a commit or abort decision (usually at the end of phase one of the two-phase commit protocol). </p>
<p>
It is possible to avoid blocking the calling thread by using asynchronous <b>Commit</b> or <b>Abort</b> calls. Asynchronous <b>Commit</b> or <b>Abort</b> require the following:
<ol>
<li>
The programmer creates an OLE event sink object which implements the <b>ITransactionOutcomeEvents</b> interface.</li>
<li>
The programmer uses the OLE events architecture on the MS DTC transaction object to register the event sink.</li>
<li>
Calls to <b>ITransaction::Commit </b>are passed the value XACTTC_ASYNC in the <i>grfTC</i> parameter. Calls to <b>ITransaction::Abort </b>are passed a Boolean flag of TRUE in the <i>fAsync</i> parameter. Neither call blocks the calling thread.</li>
<li>
After the transaction commits or aborts, the <b>ITransactionOutcomeEvents::Commit</b> or <b>ITransactionOutcomeEvents::Abort</b> method is called on the registered event sink.</li>
</ol>
<table cellspacing=5 cols=2>
<tr valign=top>
<th align=left width=47%>For more information on</th>
<th align=left width=53%>Refer to </th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=47%>Asynchronous <b>Commit</b> and <b>Abort</b> requests</td>
<td width=53%><b>ITransaction::Commit</b><i> </i>or<i> </i><b>ITransaction::Abort</b></td>
</tr>
<tr valign=top>
<td width=47%>OLE events architecture</td>
<td width=53%><b>IConnectionPoint</b></td>
</tr>
</table><br>
<p>
The <b>ITransactionOutcomeEvents</b> events are raised when the transaction's outcome is known. On the root transaction manager's system, the transaction outcome event is raised at the end of phase one. On the subordinate transaction managers' systems, the transaction outcome events are raised at the beginning of phase two.</p>
<pre><code>interface ITransactionOutcomeEvents : IUnknown
{
HRESULT Committed (
    [in]  BOOL      fRetaining,
    [in]  XACTUOW * pNewUOW, 
    [in]  HRESULT   hr);

HRESULT Aborted (
    [in]  BOID *    pboidReason,
    [in]  BOOL      fRetaining,
    [in]  XACTUOW * pNewUOW,
    [in]  HRESULT   hr);

HRESULT HeuristicDecision (
    [in]  DWORD    dwDecision,
    [in]  BOID *   pboidReason,
    [in]  HRESULT  hr);

HRESULT Indoubt ();
}</code></pre>
<p>&nbsp; </p></body>
</HTML>

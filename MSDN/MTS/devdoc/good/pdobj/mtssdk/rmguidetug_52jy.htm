<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transaction Propagation</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="astransactionpropagation"></a>Transaction Propagation</h1>
<p>
A transaction begun in one process can be propagated to another process. Resource managers built on a client/server architecture, have a server side and a client side. The server side enlists in a transaction so that it can participate in the two-phase commit. However, because the transaction (MS DTC transaction) might have been initiated on the client side, such resource managers use a mechanism to propagate a transaction from the client side to the server side. This mechanism is implemented entirely by MS DTC. See the <a href="rmguidetug_2y5l.htm">Life of a Transaction: Exporting a Transaction</a> topic for more detailed information.</p>
<h2>Exporting a Transaction</h2>
<p>
The resource manager proxy (RM proxy) on the client side can provide a function which an application can call to request a resource manager to enlist in a transaction. The transaction (<b>ITransaction *</b>) to enlist in can be provided via a parameter to the enlist function. After obtaining the transaction to enlist in, the RM proxy uses the <b>ITransactionExport</b> interface to propagate the transaction to the transaction coordinator.</p>
<h5><img src="../../../images/prcarrow.gif" border=0>To export a transaction</h5>
<ol>
<li>
The application client obtains an <b>ITransaction</b> interface by invoking the <b>ITransactionDispenser::BeginTransaction</b> method.</li>
<li>
The application client calls the <b>RM_Enlist</b> function, passing it the <b>ITransaction</b> transaction on which it wants the RM to enlist.</li>
<li>
Within the <b>RM_Enlist</b> function, the RM proxy does the following:<ul>
<li>
Invokes the <b>ITransactionExport::Export</b> method, passing it the <b>ITransaction </b>provided by the client. The mechanism for obtaining the <b>ITransactionExport</b> interface is described in the <a href="rmguidetug_1ysz.htm">Obtaining the Whereabouts</a> topic.</li>
<li>
If the previous step succeeds, then the RM proxy obtains the transaction cookie by invoking the <b>ITransactionExport::GetTransactionCookie</b> method.</li>
<li>
The RM proxy then sends the transaction cookie to the resource manager. The transaction cookie is transported from the RM proxy to the resource manager by a communication pipe which is used for the transmission of all messages between the RM proxy and the resource manager server.</li>
</ul>
</li>
</ol>
<h2>Importing a Transaction</h2>
<p>
After the resource manager server receives the transaction cookie, it invokes the <b>ITransactionImport::Import</b> method, providing it with the cookie that it had received from its proxy. This invocation translates the cookie to an <b>ITransaction</b> interface, and if it succeeds, then the resource manager also has an interface to the same transaction which the application client had obtained in step 1 of <a href="rmguidetug_2y5l.htm">Exporting a Transaction</a> earlier in this topic.</p>
<p>&nbsp; </p></body>
</HTML>

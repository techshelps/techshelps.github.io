<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Passing a Transaction Between the Application Program and the RM Proxy</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="aspassingatransactionbetweentheapplicationprogramandthermproxy"></a>Passing a Transaction Between the Application Program and the RM Proxy</h1>
<p>
A database resource manager that used the standard ODBC syntax for passing a transaction between the application program and the RM proxy would work as follows:</p>
<p>
The application initiates the transaction by calling the OLE Transactions <b>BeginTransaction</b> method. In response, the application receives a transaction object that represents the transaction.
<ol>
<li>
The application passes the transaction to the RM proxy by calling the ODBC <b>SQLSetConnectOption</b><i> </i>statement. The parameters to the <b>SQLSetConnectOption</b><i> </i>statement include the ODBC connection handle and the transaction object.</li>
<li>
The RM proxy marshals the transaction object by calling the OLE Transactions export interface. The RM proxy places the marshaled transaction object into a request message and sends the request message to the resource manager.</li>
<li>
The resource manager takes the marshaled transaction object from the request message and unmarshals it by calling the OLE Transactions <b>ITransactionImport</b> interface. The import interface returns a transaction object to the resource manager.</li>
<li>
The resource manager enlists in the imported transaction object. By enlisting on the transaction, the resource manager enrolls itself in the two-phase commit protocol.</li>
<li>
The application program performs normal resource manager operations such as inserting, updating, or deleting records in a relational database. These operations are performed under the protection of the transaction.</li>
<li>
When the application program calls <b>Commit, </b>MS DTC uses the two-phase commit protocol to coordinate commitment of the transaction. MS DTC will invoke the resource manager at phase one to prepare the transaction and at phase two to commit the transaction.</li>
</ol>
<p>
You may choose your own application program interface for propagating transactions from the application program to your resource manager. For example, Microsoft SQL Server associates the transaction with the ODBC or DB-Library database connection. The <b>SQLSetConnectOption</b><i> </i>function is used with ODBC connections The <b>dbenlisttrans</b> function is used with DB-Library connections. Once a transaction is associated with a connection, it remains associate with the connection until the next <b>SQLSetConnectOption</b><i> </i>or <b>dbenlisttrans</b> call.</p>
<p>
Other alternatives are possible. For example, rather than associating a transaction with a connection, you could insist that the transaction be passed as a parameter to every resource manager call. If you do this, you should ensure that you only export each transaction once, when it is first used.</p>
<p>&nbsp; </p></body>
</HTML>

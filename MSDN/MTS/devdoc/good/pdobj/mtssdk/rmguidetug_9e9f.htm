<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transaction Manager's View of Transactions</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="astransactionmanagersviewoftransactions"></a>Transaction Manager's View of Transactions</h1>
<p>
The transaction manager creates <i>transaction objects</i> and manages their atomicity and durability. Applications request the creation of a transaction object by calling the transaction manager's <b>BeginTransaction </b>method. When a resource manager first participates in a transaction, it calls the transaction manager <b>Enlist</b> method to enlist in the transaction. The transaction manager tracks all the resource managers who enlist in the transaction. One of three results can occur:
<ol>
<li>
The application either commits or aborts the transaction</li>
<li>
A resource manager aborts the transaction</li>
<li>
A failure occurs</li>
</ol>
<p>
The <b>Commit</b> and <b>Abort</b> methods can also be called on transaction<i> </i>objects.</p>
<p>
When asked to commit a transaction, the transaction manager initiates the <i>two-phase commit protocol</i>. During the first phase, it asks all enlisted resource managers to prepare. Then, during the second phase, the transaction manger informs the resource managers whether the transaction committed or aborted.</p>
<p>
The transaction manager maintains a log in safe storage on disk. The log is a sequential file that records transaction events. The transaction manager records transaction starts, enlistments, and commit decisions in the log. During normal processing, the transaction manager only writes to the log. However, if the transaction manager fails, it reads the log when it restarts to reconstruct the most recent state, using the log to make its state durable.</p>
<p>
The transaction manager also provides an <i>operator interface</i> to manage transactions and maintains performance counters that can be displayed using the <b>system performance monitor</b>. The transaction manager records important operational events in the system log which can then be displayed using the <b>system event viewer</b>. The viewer has a graphical management interface that is integrated with the SQL Enterprise Manager. This interface lets the operator configure the system, view transactions, and abort or commit in-doubt transactions.</p>
<p>&nbsp; </p></body>
</HTML>

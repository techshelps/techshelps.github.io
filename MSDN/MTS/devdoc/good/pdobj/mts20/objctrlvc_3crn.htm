<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IObjectControl::Activate Method (Visual C++)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asmthactivatevc"></a>IObjectControl::Activate Method</h1>
<p>
Implementing this method allows an <a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverobject">MTS object</a> to perform context-specific initialization whenever it's activated. This method is called by the MTS run-time environment before any other methods are called on the object.</p>
<p>
<b>Provided By</b></p>
<p>
<a href="objctxvc_24tf.htm"><b>IObjectContext</b></a></p>
<pre><b>HRESULT</b> <b>IObjectControl::Activate ( );</b></pre>
<p>
<b>Return Values</b></p>
<p>
S_OK<br>
The Activate method succeeded.</p>
<p>
Failure HRESULT<br>
Any error code indicating why an object was unable to activate itself.</p>
<p>
<b>Remarks</b></p>
<p>
Whenever a client calls an MTS object that isn't already activated, the MTS run-time environment automatically activates the object. This is called <a href="vipdef01_1yih.htm#asdefinstancestream">just-in-time activation</a>. For components that support the <b>IObjectControl</b> interface, MTS invokes the object's <a href="#asmthactivatevc"><b>Activate</b></a> method before passing the client's method call on to the object. This allows objects to do context-specific initialization.</p>
<p>
Because an object's <a href="vipdef01_1yih.htm#asdefcontext">context</a> isn't available during object construction, you can't perform any initialization that involves the <b>ObjectContext</b>inside the <a href="vipdef01_1yih.htm#asdefconstructor">constructor</a>. Instead, you should implement the <b>Activate</b> method and place all your context-specific initialization procedures there.</p>
<p>
For example, you can use the <b>Activate</b> method to obtain a reference to an object's context and store it in a member variable. Then the context reference is available to any method that requires it, and you don't have to acquire a new one and then release it every time you use it. Once you have a reference to the object's context, you can use the <b>IObjectContext</b> methods to check whether security is enabled, whether the object is executing in a <a href="vipdef01_1yih.htm#asdeftransaction">transaction</a>, or whether the <a href="vipdef01_1yih.htm#asdefcaller">caller</a> is in a particular <a href="vipdef01_1yih.htm#asdefrole">role</a>. You can also use the <b>Activate</b> method to obtain a reference to the object's <b>SecurityProperty</b> and check the <a href="vipdef01_1yih.htm#asdefsecurityid">security ID</a> of the object's <a href="vipdef01_1yih.htm#asdefcreator">creator</a> before any methods are called.</p>
<p>
If you're enabling object recycling (returning TRUE from the <a href="objctrlvc_54v7.htm"><b>CanBePooled</b></a> method), the <b>Activate</b> method must be able to handle both newly created and recycled objects. When the <b>Activate</b> method returns, there should be no distinguishable difference between a new object and a recycled one.</p>
<p>
<a href="objctrlvc_4p88.htm"><b>Example</b></a></p>
<p>
<b>See Also</b></p>
<p>
<a href="mtxpg04_5s37.htm">Deactivating Objects</a>, <a href="mtxpg04_8v6v.htm">Object Pooling and Recycling</a></p>
<p>&nbsp; </p></body>
</HTML>

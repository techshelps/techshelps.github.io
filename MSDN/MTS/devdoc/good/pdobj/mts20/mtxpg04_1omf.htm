<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error Handling</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconerrorhandling"></a>Error Handling</h1>
<p>
Fault Isolation and Failfast</p>
<p>
MTS performs extensive internal integrity and <a href="vipdef01_1yih.htm#asdefconsistency">consistency</a> checks. If MTS encounters an unexpected internal error condition, it immediately terminates the process. This policy, called <a href="vipdef01_1yih.htm#asdeffailfast">failfast</a>, facilitates fault containment and results in more reliable and robust systems.</p>
<p>
Consider a case in which MTS detects that one of its data structures is in a corrupted state. At this point, both the cause and the magnitude of the corruption are unknown. Unfortunately, MTS cannot tell how far the damage has spread. Certainly MTS is in an indeterminate state. But it does not run in <a href="vipdef01_1yih.htm#asdefisolation">isolation</a>. Like other <a href="vipdef01_1yih.htm#asdefdll">DLLs</a>, it is hosted in a process environment and shares a single address space with the main program executable and many other DLLs. Consequently, it is safe to assume that the entire process has been corrupted. The process is immediately terminated to prevent it from spreading potentially corrupted information to other processes or, worse yet, from allowing corrupted data to be committed and made durable.</p>
<p>
As a developer or administrator, you should inspect the Windows NT Event Viewer Application Log for details on any failfast or serious application errors.</p>
<p>
Exceptions in MTS Objects</p>
<p>
MTS does not allow <a href="vipdef01_1yih.htm#asdefexception">exceptions</a> to propagate outside of a <a href="vipdef01_1yih.htm#asdefcontext">context</a>. If an exception occurs while executing within an MTS context and the application doesn't catch the exception before returning from the context, MTS catches the exception and terminates the process. Using the failfast policy in this case is based on the assumption that the exception has put the process into an indeterminate state—it is not safe to continue processing.</p>
<p>
MTS Object Method Error Return Codes</p>
<p>
MTS never changes the value of an HRESULT error code, such as E_UNEXPECTED or E_FAIL, returned by an <a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverobject">MTS object</a> method.</p>
<p>
When an MTS object returns an HRESULT status code, such as S_OK or S_FALSE, MTS may convert the status code into an MTS error code before it returns to the <a href="vipdef01_1yih.htm#asdefcaller">caller</a>. This occurs, for example, when the application returns S_OK after calling <b>SetComplete</b>; if the object is the root of an <a href="vipdef01_1yih.htm#asdefautomatictransaction">automatic transaction</a> that fails to commit, the HRESULT is converted to CONTEXT_E_ABORTED.</p>
<p>
When MTS converts a status code to an error code, it clears all of the method's output parameters. Returned references are released and the values of the returned object pointers are set to NULL.</p>
<h6>See Also</h6>
<p>
<a href="building_9cxf.htm">MTS Error Diagnosis</a>, <a href="errorcodes_199v.htm">MTS Error Codes</a></p>
<p>&nbsp; </p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Code to Call GetObjectContext, SetComplete, and SetAbort (Visual Basic)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="ashowcallinggetobjectcontextvb"></a>Adding Code to Call GetObjectContext, SetComplete, and SetAbort</h1>
<p>
Every <a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverobject">Transaction Server object</a> has a <a href="vipdef01_1yih.htm#asdefcontext">context</a> object associated with it. The context object is automatically created at the same time the <a href="vipdef01_1yih.htm#asdefobject">object</a> itself is created. You can use an object's context to declare when the object's work is complete, as shown in the following illustration.</p>
<p>
<img src="images/vi0601.gif" border=0></p>
<p>
Calling either of these methods notifies the MTS run-time environment that it can safely deactivate the object, making its resources available for reuse.</p>
<p>
To implement the <a href="mtxpg06vb_240y.htm">scenario</a> for this chapter, you will modify the Post method to obtain a reference to the Account object's context object. Then you will use <b>SetComplete</b> and <b>SetAbort</b> to enable just-in-time activation.</p>
<p>
First, you call <b>GetObjectContext</b> to get a reference to the context object.</p>
<pre><code>Dim ctxObject As ObjectContext
Set ctxObject = GetObjectContext()</code></pre>
<p>
When an object has completed its work successfully, it should call <b>SetComplete</b>:</p>
<pre><code>ctxObject.SetComplete</code></pre>
<p>
<b>SetComplete</b> notifies the MTS run-time environment that the Account object should be deactivated as soon as it returns control to the Bank client.</p>
<p>
If the object encountered an error, it should call <b>SetAbort</b>. <b>SetAbort</b> also notifies the MTS run-time environment that the Account object should be deactivated as soon as it returns control to the Bank client.</p>
<pre><code>ctxObject.SetAbort</code></pre>
<h5><img src="images/prcarrow.gif" border=0>To obtain a reference to an object's context</h5>
<ol>
<li>
Open the \MTx\Samples\Account.VB\Step3\Account.vbp project.</li>
</ol>
<p>
<a href="sampcodevb_9u2g.htm"><img src="images/chiclet.gif" border=0>Click here to see the Post method</a>
<ol>
<li>
Build the component as a <a href="vipdef01_1yih.htm#asdefdll">DLL</a> and save it as \MTx\Samples\Account.VB\Step3\VBAcct.dll.</li>
</ol>
<p>
Before you can run your new component again in MTS, the registry needs to be updated with the new component information. To do this, refresh the MTS Explorer window.</p>
<p>
If you install the Development version of Microsoft Transaction Server, you will get a Visual Basic&nbsp;–&nbsp;compatible add-in that automates this process for you (select the VB Addin box during Setup). The next time you run Visual Basic, the add-in is automatically installed in Visual Basic. The add-in automatically refreshes all of your MTS <a href="vipdef01_1yih.htm#asdefcomponent">component</a> <a href="vipdef01_1yih.htm#asdefdll">DLLs</a> whenever you recompile your project.</p>
<p>
You can also turn this feature on and off on a per-project basis by using the toggle command on the Visual Basic <b>Add-Ins</b> menu. To turn it on, on the Visual Basic <b>Add-Ins</b> menu, point to <b>MS Transaction Server</b>, and click <b>AutoRefresh after compile of active project</b>. This puts a check mark next to the command, indicating that the feature is activated. If you want to refresh all of your MTS components at any given time, on the Visual Basic<b> Add-Ins</b> menu, point to <b>MS Transaction Server</b>, and then click <b>Refresh all components now</b>.</p>
<p>
Now you'll run the Account <a href="vipdef01_1yih.htm#asdefcomponent">component</a> again from the Bank client, and monitor its execution in the MTS Explorer's Status window. Follow the same steps as in "<a href="mtxpg05vb_2nhw.htm">Running and Monitoring the Account Component</a>."</p>
<p>
<img src="images/vi0602.gif" border=0></p>
<p>
When the Bank client creates the Account object, the number 1 will appear under <b>Objects</b> and <b>Activated</b>. This indicates that one object is executing in the MTS run-time environment, and that it is currently activated. When the client calls the Post method, the number 1 appears, briefly, under <b>In Call</b>. This indicates that one object is currently executing a method call. When the Post method returns control to the client, the number under <b>Objects</b> is still 1, but the numbers under <b>Activated</b> and <b>In Call</b> return to 0. This is because after calling <b>SetComplete</b>, the object is deactivated as soon as it returns from the current method call.</p>
<p>
<b>Note</b>   Because the Post method executes so quickly, you may not actually see this sequence appear.</p>
<p>
<b>See Also</b></p>
<p>
<a href="mtxpg04_8b8z.htm">Context Objects</a>, <a href="mtxpg04_5s37.htm">Deactivating Objects</a>, <a href="mtxpg05vb_45mc.htm">Creating a Simple ActiveX Component</a>, <a href="objctxvb_215u.htm"><b>GetObjectContext</b> method</a>, <a href="objctxvb_0ste.htm"><b>SetAbort</b> method</a>, <a href="objctxvb_8mw2.htm"><b>SetComplete</b> method</a></p>
<p>&nbsp; </p></body>
</HTML>

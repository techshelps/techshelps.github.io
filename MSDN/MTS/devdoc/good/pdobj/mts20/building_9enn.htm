<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Packaging MTS Components</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="aspackagingmtscomponents"></a>Packaging MTS Components</h1>
<p>
This document describes how you should package your MTS components. Consider the following design issues when defining package boundaries:
<ul>
<li>
Activation</li>
<li>
Shared resources</li>
<li>
Fault isolation</li>
<li>
Security isolation</li>
</ul>
<p>
Activation</p>
<p>
You can select either of the following Activation levels for your packages:
<ul>
<li>
<i>Library</i> (running within the same process as the client that creates the object)</li>
<li>
<i>Server</i> (on the same computer but in a different process)</li>
</ul>
<p>
MTS provides a way to set up remote components by using the Remote Computer and Remote Component folders in the MTS Explorer hierarchy. For more information about "pulling" or "pushing" components between computers, see the <i>Administrator's Guide</i>.</p>
<p>
By default, components run in a server process on the local computer. If you run your components within the MTS server process, you enable resource sharing, security, and easier administration by using the MTS Explorer for your component. Running components in-process provides an immediate performance benefit, because you do not have to marshal parameters cross-process. However, in-process components do not support <a href="vipdef01_1yih.htm#asdefdeclarativesecurity">declarative security</a> and you lose fault isolation.</p>
<p>
<b>Sidebar: In-process Components and Security</b></p>
<p>
Note that in-process components do not support declarative security or offer the benefits of process isolation. In-process components will run in any process that creates the component. Role checking is disabled between in-process components because <b>IsCallerInRole</b> returns True. In other words, the direct caller always passes the authorization check.</p>
<p>
Also, it is recommended that you place your components as close as possible to the data source. If you are building a distributed application with a number of packages running on local and remote servers, try to group your components according to the location of your data. For example, in the following figure, the Accounting server hosts an Accounting package and Accounting database.</p>
<p>
<img src="images/host.gif" border=0></p>
<p>
Shared Resources</p>
<p>
Sharing resources in a multiuser environment results in faster applications that scale more easily. Note that only components marked with the <b>Local</b> activation setting can share resources. Package your components to take advantage of the resource sharing and pooling that MTS provides for your application.</p>
<p>
Pool your resources by server process.Note that MTS runs each hosted package in a separate server process. The fewer pools you have running on your server, the more efficiently you pool resources, so  try to group components that share "expensive" resources, such as connections to a specific database. If you reuse the expensive resources within your package, you can greatly improve the performance and scaling of your application. For example, if you have a database lookup and a database update component running in a customer maintenance application, package those components together so that they can share database connections.</p>
<p>
Fault Isolation</p>
<p>
<i>Fault isolation</i> requires separating components into packages that can operate in their own server process. Components in the same package share the same server process if all the activation settings are the same. By placing components in separate packages, you can mitigate the impact of a component failure because each package runs in a separate server process.</p>
<p>
You can also use fault isolation to test new components. You can stage updates to MTS applications by introducing new components. Fault isolation for packages greatly reduces the risk of your local server package failing when you introduce a new component to a shared environment.</p>
<p>
Security Isolation</p>
<p>
MTS <i>security roles</i> represent a logical group of user accounts which are mapped to Microsoft Windows NT® domain users and groups during the deployment of the package. You can use the MTS Explorer to define <i>declarative authorization checking </i>by applying roles to components and component interfaces. Applying a security role to a component defines access privileges for any user assigned as a member of that security role. Users not assigned to a role with access privileges to a package cannot use the package. Because security authorization occurs between packages rather than between components within a package, it is recommended that you consider the MTS security model when determining your package boundaries. Note that security isolation only applies to packages with components running under the <b>Server</b> activation setting.</p>
<p>
Security authorization is checked when a method call crosses a package boundary, such as when a client calls into a package or one package calls another. When you package your components, make sure you group components that can safely call each other without requiring security checks within one package.</p>
<p>
All components within a package run under the identity established for the package. If you run under different identities, separate them into two different packages.</p>
<p>
You can use declarative security between the client and server, and database security based on package identity between the server and data source. You can restrict access to a data source by assigning an identity to a package, and configuring the database to accept updates according to package identity.</p>
<p>
If you use package identity to set up your database security, the database recognizes the package identity as a single user. If database access occurs under an identity set by the package, the database connection set up for the package identity name can be used by all the users mapped to role or roles for that package. This kind of resource sharing improves application performance and scalability.</p>
<p>&nbsp; </p></body>
</HTML>

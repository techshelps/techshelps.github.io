<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Design Notes: Using Context and Transactions (Visual Basic)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconapplicationdesignnotesusingcontextandtransactions"></a>Application Design Notes: Using Context and Transactions</h1>
<p>
<a href="vipdef01_1yih.htm#asdefcontext">Context</a> simplifies defining <a href="vipdef01_1yih.htm#asdeftransaction">transactions</a>. A transaction is automatically started when a <a href="vipdef01_1yih.htm#asdefvipercomponent">component</a> is declared as transactional. Components don't need to add additional code to indicate the start and end of a transaction. Using context allows you to define the scope of a transaction.</p>
<p>
Besides simplifying building components, automatic transaction enlistment also allows for reuse of existing components. Changing the transaction attribute is the only change to the Account component from the previous section, <a href="mtxpg06vb_2ygj.htm">Building Scalable Components</a>.</p>
<p>
Creating the Account <a href="vipdef01_1yih.htm#asdefobject">object</a> from MoveMoney establishes MoveMoney as the root of the transaction. The root transaction attempts to commit after it has completed its work. If an Account object calls <b>SetAbort</b> to indicate that it cannot successfully commit its work, then when the root transaction attempts to commit, the entire transaction will fail.</p>
<p>
In the case of a money transfer, this provides <a href="vipdef01_1yih.htm#asdefatomicity">atomicity</a>. If a credit succeeds, but insufficient funds prevent the debit from succeeding, then the credit will be rolled back from the database automatically. Thus, <b>SetAbort</b> provides simplified error recovery.</p>
<p>
Context simplifies the development of the component. Each object independently acquires its own resources, performs its work, and indicates its own internal state by using <b>SetComplete </b>or <b>SetAbort </b>before returning.</p>
<h5>See Also</h5>
<p>
<a href="mtxpg04_5soj.htm">Transactions</a>, <a href="mtxpg04_8ier.htm">Transaction Attributes</a>, <a href="mtxpg04_8b8z.htm">Context Objects</a>, <a href="objctxvb_60v6.htm"><b>CreateInstance</b> method</a>, <a href="objctxvb_24te.htm"><b>ObjectContext</b> object</a>, <a href="objctxvb_0ste.htm"><b>SetAbort</b> method</a>, <a href="objctxvb_8mw2.htm"><b>SetComplete</b> method</a></p>
<p>&nbsp; </p></body>
</HTML>

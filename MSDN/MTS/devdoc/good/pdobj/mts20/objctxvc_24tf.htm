<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IObjectContext Interface (Visual C++)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asobjobjectcontextvc"></a>IObjectContext Interface</h1>
<p>
The <b>IObjectContext </b>interface provides access to the current object's <a href="vipdef01_1yih.htm#asdefcontext">context</a>.</p>
<p>
<b>Remarks</b></p>
<p>
The header file for the <a href="#asobjobjectcontextvc"><b>IObjectContext</b></a> interface is mtx.h.</p>
<p>
You obtain a reference to the<b> IObjectContext </b>interface by calling the <a href="objctxvc_215v.htm"><b>GetObjectContext</b></a> function. As with any COM object, you must release an <b>ObjectContext</b> object when you're finished using it.</p>
<p>
You can use an object's <b>ObjectContext</b> to: 
<ul>
<li>
Declare that the object's work is complete.</li>
<li>
Prevent a <a href="vipdef01_1yih.htm#asdeftransaction">transaction</a> from being committed, either temporarily or permanently.</li>
<li>
Instantiate other <a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverobject">MTS objects</a> and include their work within the scope of the current object's transaction.</li>
<li>
Find out if a <a href="vipdef01_1yih.htm#asdefcaller">caller</a> is in a particular <a href="vipdef01_1yih.htm#asdefrole">role</a>.</li>
<li>
Find out if security is enabled.</li>
<li>
Find out if the object is executing within a transaction.</li>
</ul>
<p>
The <b>IObjectContext</b> interface exposes the following methods.</p>
<table cellspacing=5 cols=2>
<tr valign=top>
<th align=left width=30%>Method</th>
<th align=left width=70%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=30%><a href="disamb01_6w6i.htm"><b>CreateInstance</b></a></td>
<td width=70%>Instantiates another MTS object.</td>
</tr>
<tr valign=top>
<td width=30%><a href="disamb01_7k50.htm"><b>DisableCommit</b></a></td>
<td width=70%>Declares that the object hasn't finished its work and that its transactional updates are in an inconsistent state. The object retains its state across method calls, and any attempts to commit the transaction before the object calls <b>EnableCommit</b> or <b>SetComplete</b> will result in the transaction being aborted.</td>
</tr>
<tr valign=top>
<td width=30%><a href="disamb01_5zn8.htm"><b>EnableCommit</b></a></td>
<td width=70%>Declares that the object's work isn't necessarily finished, but its transactional updates are in a consistent state. This method allows the transaction to be committed, but the object retains its state across method calls until it calls <b>SetComplete</b> or <b>SetAbort</b>, or until the transaction is completed.</td>
</tr>
<tr valign=top>
<td width=30%><a href="disamb01_9ftx.htm"><b>IsCallerInRole</b></a></td>
<td width=70%>Indicates whether the object's <a href="vipdef01_1yih.htm#asdefdirectcaller">direct caller</a> is in a specified role (either directly or as part of a group).</td>
</tr>
<tr valign=top>
<td width=30%><a href="disamb01_7v3i.htm"><b>IsInTransaction</b></a></td>
<td width=70%>Indicates whether the object is executing within a transaction.</td>
</tr>
<tr valign=top>
<td width=30%><a href="disamb01_2f50.htm"><b>IsSecurityEnabled</b></a></td>
<td width=70%>Indicates whether security is enabled. MTS security is enabled unless the object is running in the client's process.</td>
</tr>
<tr valign=top>
<td width=30%><a href="disamb01_9kz8.htm"><b>SetAbort</b></a></td>
<td width=70%>Declares that the object has completed its work and can be deactivated on returning from the currently executing method, but that its transactional updates are in an inconsistent state or that an unrecoverable error occurred. This means that the transaction in which the object was executing must be aborted. If any object executing within a transaction returns to its client after calling <b>SetAbort</b>, the entire transaction is doomed to abort.</td>
</tr>
<tr valign=top>
<td width=30%><a href="disamb01_2ns5.htm"><b>SetComplete</b></a></td>
<td width=70%>Declares that the object has completed its work and can be deactivated on returning from the currently executing method. For objects that are executing within the scope of a transaction, it also indicates that the object's transactional updates can be committed. When an object that is the root of a transaction calls <b>SetComplete</b>, MTS attempts to commit the transaction on return from the current method.</td>
</tr>
</table><br>
<p>
<b>Note</b>   When an object calls <b>DisableCommit</b>, <b>EnableCommit</b>, <b>SetComplete</b>, or <b>SetAbort</b> from within a method, two flags (Done and Consistent) are set in its <b>ObjectContext</b>. (See the following table for an explanation.) These flags aren't evaluated by the MTS run-time environment until the object's currently executing method returns to its caller. This means that an object can call these methods any number of times from within one of its own methods, but the last call before the object returns to its client is the one that will be in effect.</p>
<table cellspacing=5 cols=3>
<tr valign=top>
<th align=left width=33%>Method</th>
<th align=left width=33%>Done</th>
<th align=left width=34%>Consistent</th>
</tr>
<tr valign=top>
<td colspan=3 width=100%></td>
</tr>
<tr valign=top>
<td width=33%><b>SetAbort</b></td>
<td width=33%>TRUE</td>
<td width=34%>FALSE</td>
</tr>
<tr valign=top>
<td width=33%><b>SetComplete</b></td>
<td width=33%>TRUE</td>
<td width=34%>TRUE</td>
</tr>
<tr valign=top>
<td width=33%><b>DisableCommit</b></td>
<td width=33%>FALSE</td>
<td width=34%>FALSE</td>
</tr>
<tr valign=top>
<td width=33%><b>EnableCommit</b></td>
<td width=33%>FALSE</td>
<td width=34%>TRUE</td>
</tr>
</table><br>
<p>
The <b>Done</b> flag, which allows an object to be deactivated and its transaction to commit or abort, is only evaluated after the object returns from the call that first entered its context. For example, suppose client A calls into object B. Object B calls <b>SetComplete</b> and then calls into object C (passing it a <a href="vipdef01_1yih.htm#asdefsafereference">safe reference</a> for a callback). Object C calls back to object B, and then object B returns to client A. Object B won't be deactivated when it returns to object C; it will be deactivated when it returns to client A.</p>
<p>
<b>See Also</b></p>
<p>
<a href="mtxpg04_6icz.htm">Basic Security Methods</a>, <a href="mtxpg04_3voz.htm">Passing Object References</a>, <a href="mtxpg04_8b8z.htm">Context Objects</a>, <a href="mtxpg04_5soj.htm">Transactions</a>, <a href="mtxpg04_5s37.htm">Deactivating Objects</a></p>
<p>&nbsp; </p></body>
</HTML>

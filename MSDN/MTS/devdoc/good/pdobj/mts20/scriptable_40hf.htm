<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Automating Creating a New MTS Package and Installing Components</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asscriptinganewpackageandinstallingcomponents"></a>Automating Creating a New MTS Package and Installing Components</h1>
<h5><img src="images/prcarrow.gif" border=0>To create a new package named “My Package” and install the components in that package:</h5>
<ol>
<li>
Declare the objects that you will be using to create a new package and install components into that package.<pre><code>Dim catalog As Object
    Dim packages As Object
    Dim newPack As Object
    Dim componentsInNewPack As Object
    Dim util As Object</code></pre>
</li>
<li>
Use the <b>On Error</b> statement to handle run-time errors if a method returns a failure HRESULT. You can test and respond to MTS trappable errors using the <b>On Error</b> statement and the <b>Err</b> object.<pre><code>On Error GoTo failed</code></pre>
</li>
<li>
Call the <b>CreateObject </b>method to instantiate the Catalog object. Retrieve the top level Packages collection from the CatalogCollection object by calling the <b>GetCollection</b> method. Then call the <b>Add</b> method to add a new package.<pre><code>Set catalog = CreateObject("MTSAdmin.Catalog.1")
    Set packages = catalog.GetCollection("Packages")
Set newPack = packages.Add
Dim newPackID As String</code></pre>
</li>
<li>
Set the package name to “My Package” and save changes to the <b>Packages</b> collection.<pre><code>newPackID = newPack.Key
        newPack.Value("Name") = "My Package"
        packages.SaveChanges</code></pre>
</li>
<li>
Call the <b>GetCollection</b> method to access the ComponentsInPackage<b> </b>collection. Then instantiate the ComponentUtil<b> </b>object in order to call the <b>InstallComponent</b> method to populate the new package with components.<pre><code>Set componentsInNewPack =     packages.GetCollection("ComponentsInPackage", newPackID)
        Set util = componentsInNewPack.GetUtilInterface
        util.InstallComponent"d:\dllfilepath", "", ""
        Exit Sub</code></pre>
</li>
<li>
Use the <b>Err</b> object to display an error message if the installation of the package fails.<pre><code>failed:
    MsgBox "Failure code " + Str$(Err.Number)

End Sub</code></pre>
</li>
</ol>
<p>
<b>See Also</b></p>
<p>
<a href="adminref_21o3.htm">MTS Administration Objects</a>, <a href="adminref_4eur.htm">MTS Collection Types</a>, <a href="adminref_3fqr.htm">MTS Administration Object Methods</a>, <a href="scriptable_363y.htm">Automating Advanced MTS Administration with Visual Basic</a></p>
<p>&nbsp; </p></body>
</HTML>

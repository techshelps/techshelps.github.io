<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Basic Security Methods</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconbasicsecuritymethods"></a>Basic Security Methods</h1>
<p>
The <b>IObjectContext</b> interface provides two methods for basic <a href="vipdef01_1yih.htm#asdefprogrammaticsecurity">programmatic security</a>:
<ul>
<li>
<b>IsCallerInRole</b></li>
<li>
<b>IsSecurityEnabled</b></li>
</ul>
<p>
The key to understanding how MTS security works is to understand <a href="vipdef01_1yih.htm#asdefrole">roles</a>, as discussed in the following sections.</p>
<p>
Roles from a Development Perspective</p>
<p>
A role is a symbolic name that defines a logical group of users for a <a href="vipdef01_1yih.htm#asdefpackage">package</a> of <a href="vipdef01_1yih.htm#asdefvipercomponent">components</a>. For example, an online banking application might define roles for Manager and Teller.</p>
<p>
You can define authorization for each component and component <a href="vipdef01_1yih.htm#asdefinterface">interface</a> by assigning roles. For example, in the online banking application, only the Manager may be authorized to perform bank transactions above a certain amount of money.</p>
<p>
Roles are defined during application development. These roles are then assigned to specific users at deployment time.</p>
<p>
<b>Important</b>   Roles on a dual interface are not enforced when <b>IDispatch</b> (late-binding) is used.</p>
<p>
Checking If a Caller Is in a Role</p>
<p>
The <b>IsCallerInRole</b> method determines if a <a href="vipdef01_1yih.htm#asdefcaller">caller</a> is assigned to a role. The caller is the <a href="vipdef01_1yih.htm#asdefdirectcaller">direct caller</a>, which is the identity of the process (<a href="vipdef01_1yih.htm#asdefbaseclient">base client</a> or <a href="vipdef01_1yih.htm#asdefasp">server process</a>) calling into the current server process.</p>
<p>
The following illustration shows an application used to order supplies for a business.</p>
<p>
<img src="images/vi0409.gif" border=0></p>
<p>
You can use roles to determine whether the base client has access to objects in the server process. In this scenario, the server process would check to see if the base client is allowed to place an order. Calling <b>IsCallerInRole</b> on the Order object <a href="vipdef01_1yih.htm#asdefcontext">context</a> checks if the direct caller, which is in this case the base client, is in a given role. Such a role might be Purchaser, to restrict the placing of orders to employees within that role.</p>
<p>
Security checks are made when a process boundary is crossed. If the Payment object accesses a database, the access rights to the database are derived from the identity of the server process, not the base client. The database would use its own proprietary authorization checking.</p>
<p>
Server-process security does not use impersonation. <b>IsCallerInRole</b> has the same semantics regardless of how many calls have taken place within the server process. The identity of the direct caller is always used to make the check. For more information on impersonation, see <a href="mtxpg04_4xkj.htm">Advanced Security Methods</a>.</p>
<p>
Security for In-Process Components</p>
<p>
Because the level of trust is process-wide, running MTS components in-process is not recommended for secure applications. Access checks are not made on calls between components in the same server process. Configuring MTS components to run in-process with the base client gives the base client access to all components within that server process.</p>
<p>
The <b>IsSecurityEnabled</b> method determines if security checking is enabled. This method returns FALSE when running in-process. <b>IsSecurityEnabled</b> can be a useful check to make before using <b>IsCallerInRole</b>. <b>IsCallerInRole</b> will always return TRUE when called on an object that is running in-process, which may have unintended effects.</p>
<p>
When an MTS component is part of a Library package (in-process), it effectively becomes part of the hosting Server package that creates it. If you create Library packages with components that call <b>IsCallerInRole</b>, you should instruct installers of your Library packages to define the Library package's roles on the hosting Server package. Otherwise, <b>IsCallerInRole</b> will always fail.</p>
<h6>See Also</h6>
<p>
<a href="disamb01_9ftx.htm"><b>IsCallerInRole</b></a>, <a href="disamb01_2f50.htm"><b>IsSecurityEnabled</b></a>, <a href="mtxpg11vb_8pdf.htm">Secured Components</a></p>
<p>&nbsp; </p></body>
</HTML>

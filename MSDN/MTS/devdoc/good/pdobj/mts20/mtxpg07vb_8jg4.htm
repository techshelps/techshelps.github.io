<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating the MoveMoney Component (Visual Basic)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconcreatethemovemoneycomponent"></a>Creating the MoveMoney Component</h1>
<p>
To implement this <a href="mtxpg07vb_5a0j.htm">scenario</a>, you will add a new class module, MoveMoney, to the Account project. MoveMoney has a single <a href="vipdef01_1yih.htm#asdefmethod">method</a>, Perform, which creates an Account <a href="vipdef01_1yih.htm#asdefobject">object</a> to perform the credit, debit, or transfer.</p>
<h5><img src="images/prcarrow.gif" border=0>To create the MoveMoney component</h5>
<ol>
<li>
Open the \MTx\Samples\Account.VB\Step4\Account.vbp project.</li>
</ol>
<p>
<a href="sampcodevb_3uk8.htm"><img src="images/chiclet.gif" border=0>Click here to see the Perform method</a>
<ol>
<li>
Build the component as a <a href="vipdef01_1yih.htm#asdefdll">dynamic-link library (DLL)</a> and save it as \MTx\Samples\Account.VB\Step4\VBAcct.dll.</li>
</ol>
<p>
By adding a new class module, you have added a new <a href="vipdef01_1yih.htm#asdefcom">COM</a> <a href="vipdef01_1yih.htm#asdefcomponent">component</a> to this DLL. Therefore, you will need to delete the Account component in the <a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverexplorer">Microsoft Transaction Server Explorer</a> and then install the Account and the MoveMoney components.</p>
<h5><img src="images/prcarrow.gif" border=0>To reinstall your components</h5>
<ol>
<li>
Remove the Account and CreateTable components.</li>
</ol>
<p>
<img src="images/chiclet.gif" border=0><a href="create_4gpx.htm">How?</a>
<ol>
<li>
Add the new components.</li>
</ol>
<p>
<a href="create_1bj9.htm"><img src="images/chiclet.gif" border=0>How?</a></p>
<p>
Use the DLL you created in the previous procedure. You can find it in \MTx\Samples\Account.VB\Step4\VBAcct.dll.</p>
<p>
MTS enlists a component in a <a href="vipdef01_1yih.htm#asdeftransaction">transaction</a> as specified by the component's transaction attribute. For this scenario, Account and MoveMoney run within the same transaction.</p>
<h5><img src="images/prcarrow.gif" border=0>To set the transaction attributes for your components</h5>
<ol>
<li>
For the Account and MoveMoney components, set the transaction attribute to <b>Requires a transaction</b>.</li>
<li>
For the CreateTable component, set the transaction attribute to <b>Requires a new transaction</b>.</li>
</ol>
<p>
<a href="create_6gqb.htm"><img src="images/chiclet.gif" border=0>How?</a></p>
<p>
The MoveMoney object uses <b>CreateInstance</b> to create the Account object. <b>CreateInstance</b> is a method on the <a href="vipdef01_1yih.htm#asdefcontext">context</a> object. By using <b>CreateInstance</b>, the Account object created by MoveMoney shares context with MoveMoney.</p>
<pre><code>Dim myContext As ObjectContext
Set ctxObject = GetObjectContext()

Dim objAccount As Bank.Account
Set objAccount = _ 
    myContext.CreateInstance("Bank.Account")</code></pre>
<p>
Transactions are associated with an object's context. Because both MoveMoney and Account have a transaction attribute of <b>Requires a transaction</b>, the Account object will be enlisted within the same transaction as MoveMoney.</p>
<p>
In <a href="mtxpg06vb_2ygj.htm">Building Scalable Components</a>, you learned how to use <b>SetComplete</b> to indicate that an object has finished its work and can be deactivated. For transactional components, calling <b>SetComplete</b> indicates that a transaction can be committed.</p>
<pre><code>ctxObject.SetComplete</code></pre>
<p>
When the Perform method returns, the transaction attempts to commit. There is no guarantee that it will commit, however. If an error occurs, Perform instead calls <b>SetAbort</b>.</p>
<pre><code>ctxObject.SetAbort</code></pre>
<p>
<b>SetAbort</b> also indicates that an object has finished its work, but that it isn't in a consistent state. When the Perform method returns after calling <b>SetAbort</b>, the attempt to commit the transaction won't succeed.</p>
<h5>See Also</h5>
<p>
<a href="mtxpg04_5soj.htm">Transactions</a>, <a href="mtxpg04_8ier.htm">Transaction Attributes</a>, <a href="mtxpg04_8b8z.htm">Context Objects</a>, <a href="mtxpg04_0eb7.htm">Creating MTS Objects</a>, <a href="objctxvb_24te.htm"><b>ObjectContext</b> object</a>, <a href="objctxvb_60v6.htm"><b>CreateInstance</b> method</a>, <a href="objctxvb_215u.htm"><b>GetObjectContext</b> method</a>, <a href="objctxvb_0ste.htm"><b>SetAbort</b> method</a>, <a href="objctxvb_8mw2.htm"><b>SetComplete</b> method</a></p>
<p>&nbsp; </p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Activities</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconactivities"></a>Activities</h1>
<p>
An <i>activity</i> is a set of <a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverobject">objects</a> executing on behalf of a <a href="vipdef01_1yih.htm#asdefbaseclient">base client</a> application. Every MTS object belongs to one activity. This is an intrinsic property of the object and is recorded in the object's <a href="vipdef01_1yih.htm#asdefcontext">context</a>. The association between an object and an activity cannot be changed. An activity includes the MTS object created by the base client, as well as any MTS objects created by that object and its descendants. These objects can be distributed across one or more processes, executing on one or more computers.</p>
<p>
For example, an online banking application may have an MTS object dispatch credit and debit requests to various accounts, each represented by a different object. This dispatch object may use other objects as well, such as a receipt object to record the transaction. This results in several MTS objects that are either directly or indirectly under the control of the base client. These objects all belong to the same activity.</p>
<p>
MTS tracks the flow of execution through each activity, preventing inadvertent parallelism from corrupting the application state. This feature results in a single logical <a href="vipdef01_1yih.htm#asdefthread">thread</a> of execution throughout a potentially distributed collection of objects. By having one logical thread, applications are significantly easier to write.</p>
<p>
Whenever you use <b>CoCreateInstance</b> or its equivalent to create an MTS object, a new activity is created; note that this includes a base client creating a <a href="vipdef01_1yih.htm#asdeftransactioncontext">transaction context object</a>.</p>
<p>
When an MTS object is created from an existing context, using either a transaction context object or an MTS object context, the new object becomes a member of the same activity. In other words, the new context inherits the activity identifier of the context used to create it.</p>
<p>
MTS only allows a single logical thread of execution within an activity. This is similar in behavior to a <a href="vipdef01_1yih.htm#asdefcom">COM</a> <a href="vipdef01_1yih.htm#asdefapartmentthread">apartment</a>, except that the objects can be distributed across multiple processes. When a base client calls into an activity, all other requests for work in the activity (such as from another client thread) are blocked until after the initial thread of execution returns back to the client.</p>
<p>
Callbacks and Reentrancy</p>
<p>
While MTS does not allow multiple threads of execution within an MTS object, reentrancy is possible via callbacks. Suppose you have an object that creates another object. If the creating object passes a reference to itself to the created object, either directly or indirectly, cycles can occur in the call graph. MTS objects that do this must be prepared to receive a method invocation while blocked waiting for a call to complete. MTS ensures that the incoming call belongs to the same logical thread by using the COM logical thread identifier. COM uses the logical thread identifier for a similar purpose in apartment objects.</p>
<p>
Limitation</p>
<p>
While no parallel execution can exist within the activity on any individual computer, the MTS run-time environment does not protect against clients entering into the same activity through objects on two different computers. This can result in two parallel threads of execution on different computers. However, if the thread of execution on one computer calls an object in the same activity on the other, the call will be blocked.</p>
<p>
This behavior is based on the belief that the cost outweighs the benefits of providing fully distributed activity protection, both in terms of development and run-time performance.</p>
<h6>See Also</h6>
<p>
<a href="mtxpg04_4kx3.htm">Components and Threading</a>, <a href="mtxpg04_3voz.htm">Passing Object References</a></p>
<p>&nbsp; </p></body>
</HTML>

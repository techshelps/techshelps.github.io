<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Design Notes: Just-In-Time Activation (Visual Basic)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconjustintimeactivationdeactivationvb"></a>Application Design Notes: Just-In-Time Activation</h1>
<p>
When you design a traditional application, you have two options:
<ul>
<li>
A client can create, use, and release an <a href="vipdef01_1yih.htm#asdefobject">object</a>. The next time it needs the object, it creates it again.</li>
</ul>
<p>
The advantage to this technique is that it conserves server resources. The disadvantage is that, as your application scales up, your performance slows down. If the object is on a remote computer, each time an object is created, there must be a network round-trip, which negatively affects performance.
<ul>
<li>
A client can create an object and hold onto it until the client no longer needs it.</li>
</ul>
<p>
The advantage of this approach is that it's faster. The problem with it is that, in a large-scale application, it quickly becomes expensive in terms of server resources.</p>
<p>
While either of these approaches might be fine for a small-scale application, as your application scales up, they're both inefficient. <a href="vipdef01_1yih.htm#asdefinstancestream">Just-in-time activation</a> provides the best of both approaches, while avoiding the disadvantages of each.</p>
<p>
In <a href="mtxpg05vb_45mc.htm">Creating a Simple ActiveX Component</a>, the Bank client controlled the Account object's life cycle. Clients held onto server resources even when the clients were idle. As you added more clients, you saw a proportional increase in the number of allocated objects and database connections. A quick look at the Account <a href="vipdef01_1yih.htm#asdefcomponent">component</a> shows that each call to the Post method is independent of any previous calls. An Account object doesn't need to maintain any private state to correctly process new requests from its client. It also doesn't need to maintain its database connection between calls. The only problem is that, in this scenario, the MTS run-time environment can't reclaim the object's resources until the client explicitly releases the object. If you have to depend on your clients to manage your object's resources, you can't build a scalable component.</p>
<p>
By adding just a few lines of code, you were able to implement just-in-time activation in the <a href="sampcodevb_9u2g.htm">Account component</a>. When an Account object calls <b>SetComplete</b>, it notifies the MTS run-time environment that it should be deactivated as soon as it returns control to the client. This allows the MTS run-time environment to release the object's resources, including any database connection it holds prior to the object's release. The Bank client continues to hold a reference to the deactivated Account object.</p>
<p>
<img src="images/vi0603.gif" border=0></p>
<p>
When a client calls a method on a deactivated object, the client's reference is automatically bound to a new object. Thus, the client has the illusion of a continuous reference to a single object, without tying up server resources unnecessarily.</p>
<p>
Although the call to <b>SetAbort</b> has a similar effect, it isn't apparent in this scenario why it is used when errors occur. The next chapter, <a href="mtxpg07vb_7qr3.htm">Building Transactional Components</a>, shows you how transactions can make your applications more robust in the event of an error.</p>
<p>
<b>See Also</b></p>
<p>
<a href="mtxpg04_8b8z.htm">Context Objects</a>, <a href="mtxpg04_5s37.htm">Deactivating Objects</a>, <a href="mtxpg05vb_45mc.htm">Creating a Simple ActiveX Component</a>, <a href="objctxvb_215u.htm"><b>GetObjectContext</b> method</a>, <a href="objctxvb_0ste.htm"><b>SetAbort</b> method</a>, <a href="objctxvb_8mw2.htm"><b>SetComplete</b> method</a></p>
<p>&nbsp; </p></body>
</HTML>

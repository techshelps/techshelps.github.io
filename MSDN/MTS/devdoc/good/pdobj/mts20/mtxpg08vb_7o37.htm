<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating the Receipt Component (Visual Basic)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconinsantiatingthesharedpropertygroupmanageranddeclaringspmvariables"></a>Creating the Receipt Component</h1>
<p>
The Receipt <a href="vipdef01_1yih.htm#asdefvipercomponent">component</a> contains a single <a href="vipdef01_1yih.htm#asdefmethod">method</a>, GetNextReceipt. The Receipt object itself doesn't maintain the value of the receipt number between calls. The Shared Property Manager maintains these values. The Receipt <a href="vipdef01_1yih.htm#asdefobject">object</a> calls a <b>SharedProperty </b>object to get a new receipt number.</p>
<p>
You will also add code to the MoveMoney component to call the Receipt component.</p>
<h5><img src="images/prcarrow.gif" border=0>To create the Receipt Component</h5>
<ol>
<li>
Start Microsoft Visual Basic and open the \MTx\Samples\Account.VB\Step5\Account.vbp project.</li>
</ol>
<p>
<a href="sampcodevb_7v20.htm"><img src="images/chiclet.gif" border=0>Click here to see the code for the Receipt component</a></p>
<p>
<a href="sampcodevb_3hbs.htm"><img src="images/chiclet.gif" border=0>Click here to see the code for the MoveMoney component</a>
<ol>
<li>
Build the component as a <a href="vipdef01_1yih.htm#asdefdll">DLL</a> and save it as \MTx\Samples\Account.VB\Step5\VBAcct.dll.</li>
</ol>
<p>
By adding a new class module, you add a new <a href="vipdef01_1yih.htm#asdefcom">COM</a> component to this DLL. Therefore, you need to delete the existing components in the <a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverexplorer">Microsoft Transaction Server Explorer</a> and then install the new components.</p>
<h5><img src="images/prcarrow.gif" border=0>To reinstall your components</h5>
<ol>
<li>
Remove the Account, MoveMoney, and CreateTable components from the Transaction Server Explorer.</li>
</ol>
<p>
<a href="create_4gpx.htm"><img src="images/chiclet.gif" border=0>How?</a>
<ol>
<li>
Add the new components. Use the DLL you created in \MTx\Samples\Account.VB\Step5\VBAcct.dll.</li>
</ol>
<p>
<a href="create_1bj9.htm"><img src="images/chiclet.gif" border=0>How?</a></p>
<h5><img src="images/prcarrow.gif" border=0>To set the transaction attributes for your components</h5>
<ol>
<li>
For the Account and MoveMoney components, set the transaction attribute to <b>Requires a transaction</b>.</li>
</ol>
<p>
<a href="create_6gqb.htm"><img src="images/chiclet.gif" border=0>How?</a>
<ol>
<li>
For the CreateTable component, set the transaction attribute to <b>Requires a new transaction</b>.</li>
<li>
For the Receipt component, set the transaction attribute to <b>Does not support transactions</b>. This is the default value.</li>
</ol>
<p>
Note that the Receipt component is not transactional because the receipts are maintained as properties in memory and aren't durable.</p>
<p>
When you run the Bank Client, select the MoveMoney button under <b>Component</b>. You should see the response <b>Credit, balance is $ 1. (VB); Receipt No: #####</b>.</p>
<p>
The various object creation methods for Shared Property Manager objects are designed for simplified coding. If the object doesn't exist, it will be created. If it already exists, the object is returned. GetNextReceipt makes the following method call to access the shared property group manager:</p>
<pre><code>Set spmMgr = CreateObject _
    ("MTxSpm.SharedPropertyGroupManager.1")</code></pre>
<p>
This code works every time it is called. There is no need to check if the shared property group manager has already been created. Such behavior also ensures that only one instance of the <b>SharedPropertyGroupManager </b>object exists per <a href="vipdef01_1yih.htm#asdefasp">server process</a>.</p>
<p>
For the <b>SharedPropertyGroup </b>and <b>SharedProperty </b>objects, a flag is returned to indicate whether the property group or property already exists. The following code shows how this flag is used to determine if the property needs to be initialized:</p>
<pre><code>' Create the SharedProperty. 
Set spmPropNextReceipt = _
    spmGroup.CreateProperty("Next", bResult)

' Set the initial value of the SharedProperty to
' 0 if the SharedProperty didn't already exist.
If bResult = False Then
    spmPropNextReceipt.Value = 0
End If</code></pre>
<p>
Access to <a href="vipdef01_1yih.htm#asdefsharedproperty">shared properties</a> is controlled through the <b>CreatePropertyGroup</b> method:</p>
<pre><code>Set spmGroup = _
    spmMgr.CreatePropertyGroup("Receipt", _
    LockSetGet, Process, bResult)</code></pre>
<p>
<b>CreatePropertyGroup</b> has two parameters, isolation mode and release mode. The isolation mode for the Receipt property group is set to <b>LockSetGet</b>, which ensures that two instances of the Receipt object can't read or write to the same property at the same time. The release mode for the Receipt property group is set to <b>Process</b>, which maintains the property group until the server process is terminated.</p>
<h5>See Also</h5>
<p>
<a href="mtxpg08vb_5o55.htm">Application Design Notes: Sharing State by Using the Shared Property Manager</a>, <a href="spamrefvb_4g2q.htm"><b>SharedPropertyGroupManager</b> object</a>, <u><b>CreateProperty</b> method</u>asmthCreatePropertyvb, <u><b>CreatePropertyGroup</b> method</u>asmthCreatePropertyGroupvb</p>
<p>&nbsp; </p></body>
</HTML>

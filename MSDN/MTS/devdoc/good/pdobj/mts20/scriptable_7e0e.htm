<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Visual Basic Sample Application for Automating MTS Administration</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asvisualbasicsampleapplication"></a>Visual Basic Sample Application for Automating MTS Administration</h1>
<p>
The Visual Basic version 5.0 sample application demonstrates how to use the methods on the Catalog, CatalogObject, and CatalogCollections objects to automate basic administration functionality for a package named “Scriptable Admin Demo.”</p>
<p>
<b>Note</b>   You must configure your Visual Basic project to reference the MTS administrative type library (MTSAdmin type library). To reference the MTSAdmin type library, select the <b>References</b> option from the Visual Basic Project toolbar. Then browse the available reference files for the “MTS 2.0 Admin Type Library.” For late-binding variables (binding that occurs when you run the program), Visual Basic will locate the type library without further configuration if the MTXADMIN.DLL file is registered on your local machine.</p>
<h5><img src="images/prcarrow.gif" border=0>To delete any existing packages named “Scriptable Admin Demo”</h5>
<ol>
<li>
Call the <b>CreateObject</b> method to instantiate a <a href="vipdef01_1yih.htm#asdefcatalog">catalog</a> object.<pre><code>Dim catalog As Object
Set catalog = CreateObject("MTSAdmin.Catalog.1")</code></pre>
</li>
<li>
Get a <b>Packages</b> collection object by calling the <b>GetCollection</b> method. The <b>Packages</b> collection returns without retrieving any data from the catalog so that the collection will be empty upon return from the <b>GetCollection</b> method.<pre><code>Dim packages As Object
Set packages = catalog.GetCollection("Packages")</code></pre>
</li>
<li>
Find the previous version of the "Scriptable Admin Demo" package by populating the <b>Packages</b> collection to read in all packages and search for "Scriptable Admin Demo." Enumerate through the collection, starting at the highest index so the <b>Remove</b> method can be called from within the loop. The <b>Remove</b> method releases the object, removes the object from the collection, and shifts the objects in the collection so that object(<i>n+1</i>) becomes object(<i>n</i>) for all <i>n</i> greater than or equal to the index being removed. The effect of <b>Remove</b> method on the collection object is immediate. The <b>Item</b> and <b>Count</b> methods called any time after the <b>Remove</b> method will reflect the change in the index. However, the removal of the package is not applied to the catalog until the <b>SaveChanges</b> method is called (see step 4).<pre><code>packages.Populate
Dim pack As Object
n = packages.Count
For i = n - 1 To 0 Step -1
    If packages.Item(i).Value("Name") = "Scriptable Admin Demo" Then
        packages.Remove (i)
End If
Next</code></pre>
</li>
<li>
Call the <b>SaveChanges</b> method to save changes to the data store.<pre><code>packages.SaveChanges</code></pre>
</li>
</ol>
<h5><img src="images/prcarrow.gif" border=0>To create a new package named “Scriptable Admin Demo Package”</h5>
<ol>
<li>
Add a new package using the <b>Add</b> method, and note the package ID assigned. The <b>Add</b> method adds the object to the collection but does not apply the changes to the catalog until the <b>SaveChanges</b> method is called (see step 3). Note that the <b>Add</b> method will apply default values to all properties. The default ID will be a new unique identifier.<pre><code>Dim newPack As Object
Dim newPackID As Variant
Set newPack = packages.Add
newPackID = newPack.Value("ID")</code></pre>
</li>
<li>
Update the <b>Name</b> and <b>SecurityEnabled</b> properties.<pre><code>newPack.Value("Name") = "Scriptable Admin Demo"
newPack.Value("SecurityEnabled") = "N"</code></pre>
</li>
<li>
Call the <b>SaveChanges</b> method to save the new package to the catalog. The return value of this call is the number of objects changed, added, or deleted. If no changes were pending, the method returns 0.<pre><code>n = packages.SaveChanges</code></pre>
</li>
</ol>
<h5><img src="images/prcarrow.gif" border=0>To update the “Scriptable Admin Demo” package properties and get the ComponentsInPackage collection.</h5>
<ol>
<li>
Call the <b>PopulateByKey</b> method to read the package back from the  catalog. Pass an array containing the keys of the objects to read. In the sample code, we use an array  containing a single  element (the ID of the package just created).<pre><code>Dim keys(0) as Variant
keys(0) = newPackId
packages.PopulateByKey keys</code></pre>
</li>
<li>
Get the package object from the collection<pre><code>Dim package As Object
Set package = packages.Item(0)</code></pre>
</li>
<li>
 Update the <b>SecurityEnabled</b> property for the package.<pre><code>package.Value("SecurityEnabled") = "Y" </code></pre>
</li>
<li>
Call the <b>GetCollection</b> method to retrieve the ComponentsInPackage collection. Supply the key of the "Scriptable Admin Demo package as a parameter.<pre><code>Set components = packages.GetCollection("ComponentsInPackage",_       package.Key)
   </code></pre>
</li>
<li>
Call the <b>SaveChanges</b> method to save the changes to the catalog.<pre><code>packages.SaveChanges</code></pre>
</li>
</ol>
<h5><img src="images/prcarrow.gif" border=0>To install a componentasdefcomponent into the "Scriptable Admin Demo package":</h5>
<ol>
<li>
Call the <b>GetUtilInterface</b> method to get the component utility object. This object is used to install components.<pre><code>Dim util As Object
Set util = components.GetUtilInterface
On Error GoTo installFailed</code></pre>
</li>
<li>
Call the <b>InstallComponent</b> method, passing in a string containing the name of the dynamic-link library (DLL) of the component to be installed. If the component does not have an external type library or a <i>proxy-stub DLL</i>, pass in empty strings as the second and third arguments. Note that you do not have to call the <b>SaveChanges</b> method after installing a new component. All components contained in a DLL will be installed by this method, and are immediately written to the catalog. Call the GetCLSIDs method to get the CLSIDs of the components installed.<pre><code>Form2.Show 1
Dim thePath As String
thePath = Form2.MTSPath + "\samples\packages\vbacct.dll"
util.InstallComponent thePath, "", ""
Dim installedCLSIDs() as Variant
util.GetCLSIDs thePath, “”, installedCLSIDs
On Error GoTo 0</code></pre>
</li>
<li>
Call the <b>PopulateByKey</b> method to read back the components just installed. Note that the components installed into the package via the <b>InstallComponent</b> method are not visible in the collection until the <b>Populate or PopulateByKey</b> method is called to read the data from the catalog.<pre><code>components.PopulateByKey installedCLSIDs</code></pre>
</li>
</ol>
<h5><img src="images/prcarrow.gif" border=0>To find and delete the Bank.CreateTable component from the "Scriptable Admin Demo package":</h5>
<ol>
<li>
Iterate through the components and change transaction attributes using the <b>Item</b> and <b>Count</b> methods.<pre><code>Dim component As Object
n = components.Count
For i = n - 1 To 0 Step -1
    Set component = components.Item(i)
    component.Value("Transaction") = "Required"</code></pre>
</li>
<li>
Find and delete the <code>Bank.CreateTable</code> component by index. Note that you must iterate though the collection backwards in order to call the <b>Remove</b> method during the loop. <pre><code>If component.Value("ProgID") = "Bank.CreateTable" Then
        components.Remove (i)
    End If
Next</code></pre>
</li>
<li>
Retrieve a new count and iterate through the collection again. Note that the <code>Bank.CreateTable</code> component will not be deleted from the data store until the <b>SaveChanges </b>method<b> </b>is called. Display a message box that informs the user if the installation succeeded.<pre><code>n = components.Count
For i = 0 To n - 1
    Set component = components.Item(i)
    Debug.Print component.Value("ProgID")
    Debug.Print component.Value("DLL")
Next

n = components.SaveChanges
MsgBox "Scriptable Admin Demo package installed and configured."
Exit Sub

installFailed:
    MsgBox "Error code " + Str$(Err.Number) + " installing " + thePath + "  Make sure the MTS path you entered is correct and that vbacct.dll is not already installed."
End Sub</code></pre>
</li>
</ol>
<p>
<b>See Also</b></p>
<p>
<a href="adminref_21o3.htm">MTS Administration Objects</a>, <a href="adminref_4eur.htm">MTS Collection Types</a>, <a href="adminref_3fqr.htm">MTS Administration Object Methods</a>, <a href="scriptable_2n8u.htm">Automating MTS Administration with Visual Basic</a>, <a href="scriptable_363y.htm">Automating Advanced MTS Administration with Visual Basic</a></p>
<p>&nbsp; </p></body>
</HTML>

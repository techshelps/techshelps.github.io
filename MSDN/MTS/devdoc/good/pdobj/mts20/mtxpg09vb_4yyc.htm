<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding a New Method to the MoveMoney Component (Visual Basic)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconaddinganewfunctiontothemovemoneycomponent"></a>Adding a New Method to the MoveMoney Component</h1>
<p>
To implement the <a href="mtxpg09vb_07as.htm">scenario</a> for this section, you will add a <a href="vipdef01_1yih.htm#asdefmethod">method</a> similar to <a href="sampcodevb_3uk8.htm">Perform</a>, named StatefulPerform, which uses class member variables to set account numbers. Thus, MoveMoney becomes a <a href="vipdef01_1yih.htm#asdefstatefulinstance">stateful object</a> when StatefulPerform is called.</p>
<h5><img src="images/prcarrow.gif" border=0>   To add a new function to the MoveMoney component</h5>
<ol>
<li>
Open the \MTx\Samples\Account.VB\Step6\Account.vbp project.</li>
</ol>
<p>
<a href="sampcodevb_1vjs.htm"><img src="images/chiclet.gif" border=0>Click here to see the StatefulPerform method</a>
<ol>
<li>
Build the component as a <a href="vipdef01_1yih.htm#asdefdll">dynamic-link library (DLL)</a> and save it as \MTx\Samples\Account.VB\Step6\VBAcct.dll.</li>
</ol>
<p>
The code for StatefulPerform calls the Perform method. The methods differ in how the account numbers are set. Class member variables for each account must be set before calling StatefulPerform, whereas Perform passes the account numbers by value through function parameters.</p>
<p>
When you click the <b>MoveMoney</b> option in the Sample Bank client, it calls the following code to initialize the function:</p>
<pre><code>lRet = obj.Perform(CLng(PrimeAcct), lSecondAcct, CLng(Amount), TranType, Res)</code></pre>
<p>
When you click the <b>Stateful MoveMoney</b> option, the Sample Bank client calls the following code to initialize the function:</p>
<pre><code>obj.PrimeAccountNo = PrimeAcct
obj.SecondAccountNo = lSecondAcct
lRet = obj.StatefulPerform(CLng(Amount), TranType, Res)</code></pre>
<p>
The PrimeAccountNo and SecondAccountNo properties are actually separate class member variables on the MoveMoney <a href="vipdef01_1yih.htm#asdefobject">object</a>. Note that the PrimeAccountNo and SecondAccountNo properties aren't accessed through the Shared Property Manager properties; the MoveMoney object controls getting and setting the account number values, thus making the MoveMoney object stateful.</p>
<p>
Run the Bank client with the <b>MoveMoney</b> option. Then run it again with the <b>Stateful MoveMoney</b> option. You should notice that the <a href="vipdef01_1yih.htm#asdefstatelessinstance">stateless</a> version is slightly faster. Try running multiple Bank clients with concurrent <a href="vipdef01_1yih.htm#asdeftransaction">transactions</a>. You should notice that the stateless version performs significantly better. The <a href="mtxpg09vb_2ovn.htm">next section</a> explains why.</p>
<h5>See Also</h5>
<p>
<a href="mtxpg04_5soj.htm">Transactions</a>, <a href="mtxpg04_5s37.htm">Deactivating Objects</a>, <a href="mtxpg04_8b8z.htm">Context Objects</a>, <a href="mtxpg09vb_5kvn.htm">Stateful Components</a></p>
<p>&nbsp; </p></body>
</HTML>

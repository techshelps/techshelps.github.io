<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ITransactionContextEx Interface (Visual J++)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asobjtransactioncontextvj"></a>ITransactionContextEx Interface</h1>
<p>
The <b>ITransactionContextEx</b> interface is used by a <a href="vipdef01_1yih.htm#asdefbaseclient">base client</a> to compose the work of one or more <a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverobject">MTS objects</a> into an <a href="vipdef01_1yih.htm#asdefatomicity">atomic</a> <a href="vipdef01_1yih.htm#asdeftransaction">transaction</a> and to commit or abort the transaction.</p>
<p>
<b>Remarks</b></p>
<p>
The <b>ITransactionContextEx</b> interface is declared in the package <code>com.ms.mtx.</code></p>
<p>
You can use a <b>TransactionContextEx</b> <a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverobject">object</a> to scope a transaction from a base client. You begin the transaction by instantiating a <b>TransactionContextEx</b> object, and you end the transaction by calling <b>Commit</b> or <b>Abort</b> on the object. The base client itself never executes within the transaction.</p>
<p>
The <b>TransactionContextEx</b> component is a standard MTS component. The component's transaction attribute is set to <b>Requires a new transaction</b>, which means that a <b>TransactionContextEx</b> object is always the root of a transaction. When a base client instantiates an object by using the <b>ITransactionContextEx.CreateInstance </b>method, the new object and its descendants will participate in the<b>TransactionContextEx</b> object's transaction unless the new object's transaction attribute is set to <b>Requires a new transaction</b> or <b>Does not support transactions</b>.</p>
<p>
You could easily write your own <b>TransactionContextEx</b> component. You would simply create a component that implements the methods <b>Commit</b>, <b>Abort</b>, and <b>CreateInstance</b>, and set the component's transaction attribute to <b>Requires a new transaction</b>. The three methods would do nothing more than call <b>GetObjectContext</b> and invoke their <b>ObjectContext</b> object's <b>SetComplete</b>, <b>SetAbort</b>, and <b>CreateInstance</b> methods, respectively.</p>
<p>
Before you use <b>TransactionContextEx</b> to compose the work of existing components in a transaction, you should consider implementing a separate component that not only composes their work but encapsulates it into a reusable unit. This new component would not only serve the needs of the current base client, but other clients could also use it. In one approach, the base client instantiates a <b>TransactionContextEx</b> object, calls its <b>CreateInstance</b> method to instantiate other objects, calls various methods on those objects, and finally calls <b>Commit</b> or <b>Abort</b> on the <b>TransactionContextEx</b> object. In the other approach, you create a new component that requires a transaction. This new component instantiates the other objects using its <b>ObjectContext</b> object's <b>CreateInstance</b> method, calls the relevant methods on those other objects itself, and then calls <b>SetComplete</b> or <b>SetAbort</b> on its <b>ObjectContext</b> when it's done. Using this approach, the base client only needs to instantiate this one object, and invoke one method on it, and the object does the rest of the work. When other clients require the same functionality, they can reuse the new component.</p>
<p>
You obtain a reference to the <b>ITransactionContextEx</b> interface by creating a <b>TransactionContextEx</b> object. For example:</p>
<pre><code>new TransactionContextEx();</code></pre>
<p>
The<b> ITransactionContextEx</b> interface exposes the following methods.</p>
<table cellspacing=5 cols=2>
<tr valign=top>
<th align=left width=27%>Method</th>
<th align=left width=73%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=27%><a href="objctxvj_0stm.htm"><b>Abort</b></a></td>
<td width=73%>Aborts the work of all MTS objects participating in the current transaction. The transaction is completed on return from this method.</td>
</tr>
<tr valign=top>
<td width=27%><a href="objctxvj_8mwa.htm"><b>Commit</b></a></td>
<td width=73%>Attempts to commit the work of all MTS objects participating in the current transaction. If any of the MTS objects participating in the transaction have called <b>SetAbort</b> or <b>DisableCommit</b>, or if a system error has occurred, the transaction will be aborted. Otherwise, the transaction will be committed. In either case, the transaction is completed on return from this method.</td>
</tr>
<tr valign=top>
<td width=27%><a href="transctxvj_5fmy.htm"><b>CreateInstance</b></a></td>
<td width=73%>Instantiates another MTS object. If the component that provides the object is configured to support or require a transaction, then the new object runs under the transaction of the <b>TransactionContextEx</b>object.</td>
</tr>
</table><br>
<p>
<b>See Also</b></p>
<p>
<a href="mtxpg04_5vjn.htm">Transaction Context Objects</a>, <a href="mtxpg04_09rn.htm">Base Clients</a>, <a href="mtxpg04_5soj.htm">Transactions</a></p>
<p>&nbsp; </p></body>
</HTML>

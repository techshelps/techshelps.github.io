<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Advanced Security Methods</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconadvancedsecuritymethods"></a>Advanced Security Methods</h1>
<p>
<a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverobject">MTS objects</a> can use the <a href="progsecrefvc_7u9l.htm"><b>ISecurityProperty</b></a> interface to obtain security-related information from the object <a href="vipdef01_1yih.htm#asdefcontext">context</a>, including the identity of the <a href="vipdef01_1yih.htm#asdefclient">client</a> that created the object, as well as the identity of the current calling client. Applications can use this information to implement custom access control, such as using the Win32 security interfaces.</p>
<p>
<b>Note</b>   Visual Basic programmers can use the <a href="progsecrefvb_5s9u.htm"><b>SecurityProperty</b></a> object. The methods for <b>SecurityProperty</b> return user name strings instead of security identifiers (SIDs).</p>
<p>
Security Identifiers (SIDs)</p>
<p>
A Windows NT <a href="vipdef01_1yih.htm#asdefsecurityid">security identifier (SID)</a> is a unique value that identifies a user or group. You can use SIDs to determine the exact identity of a user. Because of their uniqueness, SIDs do not have the flexibility of roles.</p>
<h5>Callers and Creators</h5>
<p>
The following figure shows which SIDs are returned by the various methods on <b>ISecurityProperty</b> after a certain sequence of method calls.</p>
<p>
<img src="images/vi0410.gif" border=0></p>
<p>
Calling the following methods on Object Y returns SIDs associated with these users:
<ul>
<li>
<a href="progsecrefvc_0so4.htm"><b>GetDirectCallerSID</b></a><b> </b>returns the SID associated with User B.</li>
<li>
<a href="progsecrefvc_3o6c.htm"><b>GetDirectCreatorSID</b></a> returns the SID associated with User B.</li>
<li>
<a href="progsecrefvc_7ijo.htm"><b>GetOriginalCallerSID</b></a> returns the SID associated with User D.</li>
<li>
<a href="progsecrefvc_3o9w.htm"><b>GetOriginalCreatorSID</b></a> returns the SID associated with User A.</li>
</ul>
<p>
Impersonation</p>
<p>
Impersonation allows a <a href="vipdef01_1yih.htm#asdefthread">thread</a> to execute in a security context different from that of the process that owns the thread. Consider the following application scenario.</p>
<p>
<img src="images/vi0409.gif" border=0></p>
<p>
<a href="mtxpg04_6icz.htm">Basic Security Methods</a> described an order-entry scenario in which the <a href="vipdef01_1yih.htm#asdefbaseclient">base client</a> represents an employee submitting an order. In this scenario, the client is not authorized to use the Payment object and its associated database directly.</p>
<p>
Suppose the base client were a report writer for an accounting program. In this case, you want to allow access to the Payment object's database. One way to accomplish this is for the Order object to impersonate the base client, allowing the database to use its own security checking to determine access privileges.</p>
<p>
MTS does not promote the use of impersonation, but encourages role-based security. Security is simplified by the single-level of authorization provided by MTS, whereas the impersonation model has an <i>n</i>-level authorization architecture. The report-writer scenario can be simplified by defining a role, such as Accountant, to allow access to the database.</p>
<p>&nbsp; </p></body>
</HTML>

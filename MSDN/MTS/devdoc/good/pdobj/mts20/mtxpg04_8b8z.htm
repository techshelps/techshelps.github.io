<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Context Objects</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconcontextobjects"></a>Context Objects</h1>
<p>
Each <a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverobject">MTS object</a> has an associated <a href="vipdef01_1yih.htm#asdefcontext">context object</a><i>. </i>A <i>context object</i> is an extensible MTS object that provides context for the execution of an <a href="vipdef01_1yih.htm#asdefinstance">instance</a>, including <a href="vipdef01_1yih.htm#asdeftransaction">transaction</a>, <a href="vipdef01_1yih.htm#asdefactivity">activity</a>, and security properties. When an MTS object is created, MTS automatically creates a context object for it. When the MTS object is released, MTS automatically releases the context object.</p>
<p>
<b>An MTS object and its associated context object</b></p>
<p>
<img src="images/vi0403.gif" border=0></p>
<p>
An MTS object's context has intrinsic properties that are determined during object creation. These properties include the identity of the <a href="vipdef01_1yih.htm#asdefclient">client</a> that initiated the object's creation and whether or not the object executes within the scope of a <a href="vipdef01_1yih.htm#asdeftransaction">transaction</a>.</p>
<p>
The properties established for the new object context are determined by a combination of:
<ul>
<li>
The transaction attributes of the <a href="vipdef01_1yih.htm#asdefvipercomponent">component</a> as specified in the MTS <a href="vipdef01_1yih.htm#asdefcatalog">catalog</a>.</li>
<li>
The properties of the context from which the new object is created. For example, the client's context may contain a transaction.</li>
</ul>
<p>
If your application uses Microsoft Internet Information Server (IIS), you can retrieve IIS intrinsic objects as follows:
<ul>
<li>
Using Visual Basic, by calling the <b>Item</b> method of the context object.</li>
<li>
Using Microsoft Visual C++ or Microsoft Visual J++, by calling the <b>GetProperty</b> method of the <b>IGetContextProperties</b> interface.</li>
</ul>
<p>
For more information on IIS intrinsic objects, see the IIS documentation.</p>
<p>
Contexts Are Implicit</p>
<p>
MTS maintains an implicit relationship between an MTS object and its context. This feature eliminates the need for you to pass explicitly a context object through your application.</p>
<p>
You can access an MTS object's context by calling the <b>GetObjectContext</b> function. This function returns a reference to the <b>IObjectContext</b> interface. <a href="vipdef01_1yih.htm#asdefresourcedispenser">Resource dispensers</a> and other context-aware services can also access the object's context. This permits the <a href="vipdef01_1yih.htm#asdefodbcresourcedispenser">ODBC resource dispenser</a> automatically to enlist connections on the object's transaction.</p>
<p>
Before a method of an MTS object is dispatched for execution, that object's context becomes the current context for the <a href="vipdef01_1yih.htm#asdefthread">thread</a>. This context remains current as long as the object remains within the context. Calling a method in a different context causes that context to become current; the caller's context is automatically restored on return from the method.</p>
<p>
Managing References to the Context Object</p>
<p>
You must not pass a reference to the context object outside the object. You must explicitly release every reference that you acquire on the object context.</p>
<p>
The context object is not available during calls to the component's <a href="vipdef01_1yih.htm#asdefclassfactory">class factory</a>. This means, for example, that a Visual C++ class implementation cannot access a context object during calls to a <a href="vipdef01_1yih.htm#asdefconstructor">constructor</a> or destructor. Objects that require access to the context object during initialization or destruction should implement <b>IObjectControl</b>. For more information, see <a href="mtxpg04_5s37.htm">Deactivating Objects</a>.</p>
<h6>See Also</h6>
<p>
<a href="mtxpg04_3isz.htm">MTS Objects</a>, <a href="disamb01_69h0.htm"><b>GetObjectContext</b></a>, <a href="disamb01_6ak4.htm"><b>IObjectContext</b></a></p>
<p>&nbsp; </p></body>
</HTML>

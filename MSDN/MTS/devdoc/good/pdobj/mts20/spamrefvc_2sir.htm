<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ISharedPropertyGroupManager::CreatePropertyGroup Method (Visual C++)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<p>
<a name="asmthcreatepropertygroupvc"></a>ISharedPropertyGroupManager::CreatePropertyGroup Method</p>
<p>
Creates and returns a reference to a new shared property group. If a property group with the specified name already exists, <b>CreatePropertyGroup</b> returns a reference to the existing group.</p>
<p>
<b>Provided By</b></p>
<p>
<a href="spamrefvc_4g2r.htm"><b>ISharedPropertyGroupManager </b>Interface</a></p>
<pre><b>HRESULT ISharedPropertyGroup::CreatePropertyGroup (
</b>    <b>BSTR</b> <i>name</i>,
    <b>LONG* </b><i>plIsoMode</i>,
    <b>LONG* </b><i>plRelMode</i>,
    <b>VARIANT_BOOL*</b> <i>pfExists,</i>
    <b>ISharedPropertyGroup**</b> <i>ppGroup</i>,
<b>);</b></pre>
<p>
<b>Parameters</b></p>
<p>
<i>name<br>
</i>[in] The name of the shared property group to create.</p>
<p>
<i>plIsoMode</i><br>
[in, out] A reference to a LONG that specifies the isolation mode for the properties in the new shared property group. See the table that lists <i>plIsoMode</i> constants later in this topic. If the value of the <i>pfExists</i> parameter<i> </i>is set to VARIANT_TRUE on return from this method, the <i>plIsoMode</i> value you passed in is ignored and the value returned in this parameter is the isolation mode that was assigned when the property group was created.</p>
<p>
<i>plRelMode</i><br>
[in, out] A reference to a LONG that specifies the release mode for the properties in the new shared property group. See the table that lists <i>plRelMode</i> constants later in this topic. If the value of the <i>pfExists</i> parameter<i> </i>is set to VARIANT_TRUE on return from this method, the <i>plRelMode</i> value you passed in is ignored and the value returned in this parameter is the release mode that was assigned when the property group was created.</p>
<p>
<i>pfExists<br>
</i>[out] A reference to a BOOL that's set to VARIANT_TRUE on return from this method if the shared property group specified in the <i>name</i> parameter existed prior to this call, and VARIANT_FALSE if the property group was created by this call.</p>
<p>
<i>ppGroup</i><br>
[out] A reference to a shared property group identified by the BSTR passed in the <i>name</i> parameter<i>,</i> or NULL if an error is encountered.</p>
<p>
<b>Settings</b></p>
<p>
The following constants are used in the <i>plIsoMode</i> parameter to specify the effective isolation mode for a shared property group.</p>
<table cellspacing=5 cols=4>
<tr valign=top>
<th align=left width=21%>Constant</th>
<th align=left width=16%>Value</th>
<th align=left colspan=2 width=63%>Description</th>
</tr>
<tr valign=top>
<td colspan=3 width=95%></td>
</tr>
<tr valign=top>
<td width=21%><b>LockSetGet</b></td>
<td width=16%>0</td>
<td colspan=2 width=63%>Default. Locks a property during a <a href="spamrefvc_8c0z.htm"><b>get_Value</b></a> or <a href="spamrefvc_6lpf.htm"><b>put_Value</b></a>call, assuring that every get or set operation on a <a href="vipdef01_1yih.htm#asdefsharedproperty">shared property</a> is <a href="vipdef01_1yih.htm#asdefatomicity">atomic</a>.<p>
This ensures that two <a href="vipdef01_1yih.htm#asdefclient">clients</a> can't read or write to the same property at the same time, but it doesn't prevent other clients from concurrently accessing other properties in the same group.</p>
</td>
</tr>
<tr valign=top>
<td width=21%><b>LockMethod</b></td>
<td width=16%>1</td>
<td colspan=2 width=63%>Locks all of the properties in the shared property group for exclusive use by the <a href="vipdef01_1yih.htm#asdefcaller">caller</a> as long as the caller's current method is executing.<p>
This is the appropriate mode to use when there are interdependencies among properties, or in cases where a client may have to update a property immediately after reading it before it can be accessed again.</p>
</td>
</tr>
</table><br>
<p>
<b>Note</b>   When you set the isolation mode to <b>LockMethod</b>, the Shared Property Manager requires access to the calling object's <b>ObjectContext</b>. You can't use this isolation mode to create a shared property group from within an object's constructor or from a non-MTS object because <b>ObjectContext</b> isn't available during object construction and a <a href="vipdef01_1yih.htm#asdefbaseclient">base client</a> doesn't have an <b>ObjectContext</b>.</p>
<p>
The following constants are used in the <i>plRelMode</i> parameter to specify the effective release mode for a shared property group. </p>
<table cellspacing=5 cols=4>
<tr valign=top>
<th align=left width=20%>Constant</th>
<th align=left width=16%>Value</th>
<th align=left colspan=2 width=64%>Description</th>
</tr>
<tr valign=top>
<td colspan=3 width=95%></td>
</tr>
<tr valign=top>
<td width=20%><b>Standard</b></td>
<td width=16%>0</td>
<td colspan=2 width=64%>When all clients have released their references on the property group, the property group is automatically destroyed. (This is the default <a href="vipdef01_1yih.htm#asdefcom">COM</a> mode.)</td>
</tr>
<tr valign=top>
<td width=20%><b>Process</b></td>
<td width=16%>1</td>
<td colspan=2 width=64%>The property group isn't destroyed until the process in which it was created has terminated.  (Objects that hold references on a property group must still call <b>Release</b> on their references).</td>
</tr>
</table><br>
<p>
<b>Return Values</b></p>
<p>
S_OK<br>
A reference to the shared property group specified in the <i>name</i> parameter is returned in the <i>ppGroup </i>parameter.</p>
<p>
CONTEXT_E_NOCONTEXT<br>
The caller isn't executing under the MTS run-time environment. A caller must be executing under MTS to use the Shared Property Manager.</p>
<p>
E_INVALIDARG<br>
At least one of the parameters is invalid, or the same object is attempting to create the same property group more than once.</p>
<p>
<b>Remarks</b></p>
<p>
The <b>CreatePropertyGroup</b> method sets the value in <i>pfExists</i> to VARIANT_TRUE if the property group it returns in the <i>ppGroup </i>parameter existed prior to the current call. This occurs when another object in the same process has already called <b>CreatePropertyGroup</b> with the same property group name. The <b>CreatePropertyGroup</b> method sets the value in <i>pfExists</i> to  VARIANT_FALSE if the returned property group was created by the current call.</p>
<p>
The isolation mode and release mode are assigned when the property group is originally created and aren't changed if a subsequent call passes different values in these parameters. The caller should always check the value of <i>pfExists</i> on return from this method. If <i>pfExists</i> is set to  VARIANT_TRUE, the caller should check the values returned in <i>plIsoMode</i> and <i>plRelMode</i> to determine the isolation and release modes in effect for the property group. For example:</p>
<pre><code>hr = pPropGpMgr-&gt;CreatePropertyGroup(stName,
    &amp;lIsolationMode, &amp;lReleaseMode, &amp;fAlreadyExists,
    &amp;pPropGp);
if (fAlreadyExists) {
    if ((lIsolationMode != LockMethod) ||
        (lReleaseMode != Process)) {
        // Do something appropriate.
    }
}
If*</code></pre>
<p>
<b>Note</b>   An object should never attempt to pass a shared property group reference to another object. If the reference is passed outside of the object that acquired it, it's no longer a valid reference.</p>
<p>
<a href="spamrefvc_2la0.htm"><b>Example</b></a></p>
<p>
<b>See Also</b></p>
<p>
<a href="mtxpg08vb_4hnp.htm">Sharing State</a>, <a href="objctxvc_24tf.htm"><b>IObjectContext</b> Interface</a>, <a href="spamrefvc_9q77.htm"><b>ISharedPropertyGroup</b> Interface</a></p>
<p>&nbsp; </p></body>
</HTML>

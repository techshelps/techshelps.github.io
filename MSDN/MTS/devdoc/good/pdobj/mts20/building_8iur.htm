<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling MTS Components</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="ascallingmtscomponents"></a>Calling MTS Components</h1>
<p>
This topic covers the following:
<ul>
<li>
Calling MTS Components using DCOM</li>
<li>
Calling MTS Components from an Active Server Page</li>
<li>
Calling MTS Components from a Web Browser-Resident Component</li>
</ul>
<p>
For more information on the methods for creating MTS objects, see <a href="mtxpg04_0eb7.htm">Creating MTS Objects</a>.</p>
<p>
Calling MTS Components from a Client Application</p>
<p>
MTS components can be located on a separate computer from the client. A client can call a remote MTS component using DCOM, HTTP, or Remote Automation. To run an MTS component on the client computer, the client computer must have MTS installed.</p>
<p>
<img src="images/call1.gif" border=0></p>
<h3>Calling MTS Components through DCOM</h3>
<p>
DCOM is the standard transport for calling MTS components. To enable DCOM calls to MTS components, you must configure the following:</p>
<p>
<b>Client Registry Settings</b>&nbsp;— The easiest way to configure your client application to call a remote MTS component is to use the application executable utility, which automatically configures client registry settings. For more information,see the <i>Administrator's Guide</i>.</p>
<p>
<b>DCOM Security Settings</b>&nbsp;— You may have to configure the Impersonation Level and Authentication Level on both client and server computers. MTS works properly using the default values for these settings: <b>Identify</b> for Impersonation Level and <b>Connect</b> for Authentication Level. Make the necessary changes in the MTS Explorer at the package level. Changing default settings by using the DCOM configuration utility (dcomcnfg.exe) is not recommended.</p>
<p>
If you want to use Microsoft Windows 95 clients with MTS, install DCOM for Windows® 95. For the latest information on DCOM support for Windows 95, see http://www.microsoft.com/oledev on the World Wide Web.</p>
<h3>Calling MTS Components through Remote Automation</h3>
<p>
Remote Automation was introduced with Visual Basic version 4.0, before the introduction of DCOM. It is useful for 16-bit clients, because DCOM works only in 32-bit environments. To use Remote Automation with MTS, the Remote Automation Manager (RACMAN) must be running on the server where the MTS components are installed. For more information, see the Visual Basic documentation.</p>
<p>
<b>Note</b>   You cannot use MTS security Remote Automation since all calls are made using the RACMAN identity. Because RACMAN does not impersonate when calling the components on the server, the client identity cannot be determined.</p>
<h3>Calling MTS Components through HTTP</h3>
<p>
There are two ways a client can call an MTS component through HTTP:
<ul>
<li>
Call an Active Server Page (ASP), which in turn calls the MTS component using DCOM.</li>
<li>
Call the MTS component from a Web browser&nbsp;–&nbsp;resident component using the ActiveX Data Objects (ADO) Remote Data Service (RDS), which in turn uses HTTP. For more information about RDS, see http://www.microsoft.com/adc.</li>
</ul>
<p>
Calling MTS Components from an Active Server Page</p>
<p>
You can call MTS components from Active Server Pages (ASPs). You can create an MTS object from an ASP by calling <b>Server.CreateObject</b>. Note that if the MTS component has implemented the <b>OnStartPage</b> and <b>OnEndPage</b> methods, the <b>OnStartPage</b> method is called at this time.</p>
<p>
You can run your MTS components in-process with or out-of-process with Internet Information Server (IIS). If you run your MTS components in-process with IIS, be aware that if MTS encounters an unexpected internal error condition or an unhandled application error such as a general-protection fault inside a component method call, it immediately results in a failfast, thus terminating the process and IIS.</p>
<p>
By default, IIS 3.0 disables calling out-of-process components. To enable calling out-of-process components, modify the following registry entry</p>
<p>
<b>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\ASP\Parameters</b></p>
<p>
by setting the <b>AllowOutOfProcCmpnts</b> key to 1.</p>
<p>
Calling MTS Components from a Web Browser-Resident Component</p>
<p>
You can call an MTS component from a Web browser&nbsp;–&nbsp;resident component. Use the application executable utility to configure that client, and then use the HTML &lt;OBJECT&gt; tag to call that component. You can also use the &lt;OBJECT&gt; tag to create an MTS object in-process with the browser client. Remember that MTS must be installed on the client computer for an MTS component to run in-process.</p>
<p>
The component should be made safe for scripting, either through a component category entry in the registry, or by supporting the <b>IObjectSafety</b> interface.</p>
<p>
Remote Data Service (RDS) also allows you to create web browser&nbsp;–&nbsp;resident components using the &lt;OBJECT&gt; tag. RDS supports the following:
<ul>
<li>
HTTP</li>
<li>
HTTPS (HTTP over Secure Socket Layer)</li>
<li>
DCOM</li>
<li>
In-process server</li>
</ul>
<p>
Except for in-process objects, the <b>CreateObject</b> method of the <b>DataSpace</b> object creates a proxy for the MTS object that runs in a local or remote server process.</p>
<p>
You must configure the following registry key to the Prog ID of the object that you want to call:</p>
<p>
<b>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\Parameters\ADCLaunch</b></p>
<p>&nbsp; </p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scenario: Holding State in the MoveMoney Component (Visual Basic)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asconscenarioholdingstateinthemovemoneycomponent"></a>Scenario: Holding State in the MoveMoney Component</h1>
<p>
Building <a href="vipdef01_1yih.htm#asdefstatefulinstance">stateful objects</a> is a useful approach in application design. However, such design can have performance trade-offs. This section demonstrates how holding state in objects affects the application behavior within the Microsoft Transaction Server run-time environment.</p>
<p>
You will modify the MoveMoney component to be stateful by adding the StatefulPerform function to MoveMoney. StatefulPerform is called when you click <b>Stateful MoveMoney</b> on the Sample Bank client. This new function causes MoveMoney to retain data in member variables between method calls.</p>
<p>
<img src="images/vi0901.gif" border=0></p>
<h5>See Also</h5>
<p>
<a href="mtxpg04_5soj.htm">Transactions</a>, <a href="mtxpg04_5s37.htm">Deactivating Objects</a>, <a href="mtxpg04_8b8z.htm">Context Objects</a>, <a href="mtxpg09vb_5kvn.htm">Stateful Components</a></p>
<p>&nbsp; </p></body>
</HTML>

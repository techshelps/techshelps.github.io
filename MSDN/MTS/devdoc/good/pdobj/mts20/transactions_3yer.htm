<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Resolving Transaction Server Transactions</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asresolvingtransactions"></a>Resolving MTS Transactions</h1>
<p>
If you administer MTS <a href="vipdef01_1yih.htm#asdeftransaction">transactions</a>, you may have to manually resolve a transaction for an MTS application. You can use the Transaction List window in the MTS Explorer to resolve a transaction by choosing one of the following commands:
<ul>
<li>
<b>Commit</b>  This command forces the transaction to commit.</li>
<li>
<b>Abort</b>  This command forces the transaction to abort and roll back to its original state.</li>
<li>
<b>Forget</b>  This command deletes a committed or aborted transaction from the <a href="vipdef01_1yih.htm#asdefdtc">Microsoft Distributed Transaction Coordinator (MS DTC)</a> log. You should always force an outcome for a transaction before using this command.</li>
</ul>
<p>
Occasionally, you need to force a transaction either to commit or abort to release locks and make database resources available to other network users and applications.</p>
<p>
This can be necessary, for example, when a communication line fails between two computers on the network. Once a <a href="vipdef01_1yih.htm#asdeftransaction">transaction</a> has been manually committed or aborted, often it is necessary also to manually force a computer to “forget” the transaction, which deletes the transaction from the local MS DTC log file.</p>
<p>
The following illustration shows a case in which a transaction is committed manually. In this example, the following conditions are assumed:
<ul>
<li>
The MS DTC on computer A is the commit coordinator.</li>
<li>
The lines of communication along which the <a href="vipdef01_1yih.htm#asdeftwophasecommit">two-phase commit</a> protocol is conducted proceed sequentially from computer A to computer D.</li>
<li>
The first phase of the two-phase commit protocol has concluded, and MS DTC has written a COMMITTED record to its log.</li>
<li>
Communication fails between computers B and C during the second phase of the two-phase commit protocol.</li>
</ul>
<p>
The transaction is left in the following unresolved state:</p>
<p>
<img src="images/viag0301.gif" border=0></p>
<p>
Because the line of communication between computers A and B is still intact, B also has committed the transaction. Both computers, however, must retain the COMMITTED records in their log files until computers C and D confirm that they also have committed the transaction. To resolve the transaction (and thereby release the database locks on computers C and D), the system administrator forces computer C to commit the transaction (see the next illustration).</p>
<p>
Because the line of communication between computers C and D is still intact, the forced commit on computer C allows the transaction to commit on computer D. Computer D can now release its database locks and forget the transaction. Once computer D confirms to computer C that it has committed and forgotten the transaction, computer C can also release its locks and forget the transaction.</p>
<p>
<img src="images/viag0302.gif" border=0></p>
<p>
The transaction is now committed on all computers. However, because computer C cannot communicate its commit to computer B, computer B must continue to remember the transaction. Because computer B has not forgotten the transaction, computer A must also remember it. To complete the transaction, the system administrator forces computer B to forget the transaction (see the next illustration). Computer B's forced forget allows computer A also to forget the transaction. The two-phase commit protocol has been manually concluded, and the transaction is complete.</p>
<p>
<img src="images/viag0303.gif" border=0></p>
<p>
<b>Important</b>   Because of the outgoing-incoming communication pattern of the two-phase commit protocol, it is recommended that you manually resolve transactions on computers immediately adjacent to the break in communications. Therefore, in the preceding example, the forced commit occurs on computer C (not D), and the forced forget occurs on computer B (not A).</p>
<p>
Generally, when systems involved in transactions are restarted and connections restored after a system or connection failure, MS DTC will automatically resolve the transactions. MS DTC cannot resolve transactions if the systems are down or connections are not reestablished. In this case, you can manually resolve transactions that are in the In Doubt, Cannot Notify Aborted, or Cannot Notify Committed state if you have a system or connection failure</p>
<p>
In Doubt State</p>
<p>
The <i>in-doubt</i> state indicates that the transaction is on a child, that MS DTC is prepared, and that the parent MS DTC is inaccessible. To resolve the <a href="vipdef01_1yih.htm#asdefindoubttransaction">in-doubt transaction</a>, follow these steps:
<ol>
<li>
Use the Transaction List window to locate the in-doubt transaction's immediate parent. To do this, right-click the transaction and select the <b>Properties</b> command. This displays the parent MS DTC and child MS DTC computers for the transaction.</li>
<li>
Locate the parent MS DTC and use the Transaction List window on the parent computer to determine the outcome of the in-doubt transaction. <ul>
<li>
If the transaction does not appear in the Transaction List window, then the transaction has been aborted, and you can abort the transaction on the child computer manually.</li>
<li>
If the transaction appears on the parent computer as Cannot Notify Committed, then the transaction has committed, and you can commit the transaction on the child computer manually.</li>
<li>
If the transaction appears on the parent computer as Cannot Notify Aborted, then the transaction has aborted, and you can abort the transaction on the child computer manually.</li>
<li>
If the transaction is shown as In Doubt on the parent computer, use the Transaction List window on the parent computer to locate the transaction's next immediate parent. Continue to follow the transaction up the commit tree until you locate the parent on which the transaction is either not shown (indicating that it aborted), in the Cannot Notify Aborted (indicating that it aborted) state, or in the Cannot Notify Committed (indicating that it committed) state. If the transaction is aborted on the parent computer, manually force the transaction to abort on that computer's immediate child. If the transaction is committed on the parent computer, manually force the transaction to commit on the child computer.</li>
</ul>
</li>
<li>
Once you have either manually committed or aborted the transaction on the child computer, manually force the immediate parent to forget the transaction.</li>
</ol>
<p>
Cannot Notify Committed</p>
<p>
The Cannot Notify Committed state indicates that the transaction has committed, but some subordinate MS DTCs have not been notified. You can manually resolve the transaction as follows. Right-click on the transaction that is in the Cannot Notify Committed state. This displays the parent and subordinate MS DTCs for the transaction. Having located the subordinate MS DTCs, force the transaction to commit on each one. Once you have manually committed the transaction on all subordinate MS DTCs, return to the MS DTC that shows the transaction in the Cannot Notify Committed state, and force that MS DTC to forget the transaction.</p>
<p>
<b>Caution</b>   Do not manually forget a transaction until all subordinate MS DTCs have been notified of the transaction outcome.</p>
<p>
Cannot Notify Aborted</p>
<p>
The Cannot Notify Aborted state indicates that the transaction has aborted, but some subordinate MS DTCs have not been notified. This state is identical to the Aborting state. You can manually resolve the transaction as follows. Right-click the transaction that is in the Cannot Notify Aborted state. This displays the parent MS DTC and subordinate MS DTCs for the transaction. Having located the subordinate MS DTCs, force the transaction to abort on each one. Once you have manually aborted the transaction on all subordinate MS DTCs, return to the MS DTC that shows the transaction in the Cannot Notify Aborted state, and force that MS DTC to forget the transaction.</p>
<p>
<b>Caution</b>   Do not manually forget a transaction until all subordinate MS DTCs have been notified of the transaction outcome.</p>
<h5><img src="images/prcarrow.gif" border=0>To resolve transactions</h5>
<ol>
<li>
In the left pane of the MTS Explorer, select the computer where you want to resolve a transaction.</li>
<li>
Double-click the Transaction List icon.</li>
<li>
In the right pane, right-click over the transaction you want to resolve.</li>
<li>
In the <b>Resolve </b>submenu, click <b>Commit</b>, <b>Abort</b>, or <b>Forget</b>.</li>
</ol>
<p>
<b>See Also</b></p>
<p>
<a href="transactions_83n7.htm">Understanding MTS Transactions</a>, <a href="transactions_74kj.htm">Managing MS DTC</a>, <a href="transactions_4m0j.htm">Monitoring MTS Transactions</a>, <a href="transactions_1yet.htm">Monitoring MTS Transactions with Windows 95</a>, <a href="transactions_0xpv.htm">Understanding MTS Transaction States</a>, <a href="roadmap_6lys.htm">Transaction List</a></p>
<p>&nbsp; </p></body>
</HTML>

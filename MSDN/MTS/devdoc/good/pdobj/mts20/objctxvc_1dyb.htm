<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SafeRef Function (Visual C++)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asfctsaferefvc"></a>SafeRef Function</h1>
<p>
Used by an object to obtain a reference to itself that's safe to pass outside its <a href="vipdef01_1yih.htm#asdefcontext">context</a>.</p>
<p>
The header file for the <b>SafeRef</b> function is mtx.h.</p>
<pre><b>void* SafeRef (
    REFIID</b> <i>riid</i>
    <b>UNKNOWN*</b> <i>pUnk</i>
<b>);</b></pre>
<p>
<b>Parameter</b></p>
<p>
<i>riid<br>
</i>[in] A reference to the <a href="vipdef01_1yih.htm#asdefinterface">interface</a> ID of the interface that the current object wants to pass to another object or client.</p>
<p>
<i>pUnk<br>
</i>[in] A reference to an interface on the current object.</p>
<p>
<b>Return Values</b></p>
<p>
Non-NULL<br>
A pointer to the interface specified in the <i>riid</i> parameter that's safe to pass outside the current object's context.</p>
<p>
NULL<br>
The object is requesting a <a href="vipdef01_1yih.htm#asdefsafereference">safe reference</a> on an object other than itself, or the interface requested in the <i>riid</i> parameter is not implemented.</p>
<p>
<b>Remarks</b></p>
<p>
When an <a href="vipdef01_1yih.htm#asdefmicrosofttransactionserverobject">MTS object</a> wants to pass a self-reference to a <a href="vipdef01_1yih.htm#asdefclient">client</a> or another object (for example, for use as a callback), it should always call <b>SafeRef</b> first and then pass the reference returned by this call. An object should never pass a  <b>this</b> pointer, or a self-reference obtained through an internal call to <b>QueryInterface</b>, to a client or to any other object. Once such a reference is passed outside the object's context, it's no longer a valid reference.</p>
<p>
Calling <b>SafeRef</b> on a reference that is already safe returns the safe reference unchanged, except that the reference count on the interface is incremented.</p>
<p>
When a client calls <b>QueryInterface</b> on a reference that's safe, MTS automatically ensures that the reference returned to the client is also a safe reference.</p>
<p>
An object that obtains a safe reference must release the safe reference when it's finished with it.</p>
<p>
<b>Note</b>   Safe references have different pointer values than their unsafe counterparts. For example, <b>this</b> and the safe version of <b>this</b> do not have the same value. It's important to be aware of this when testing whether two pointers refer to the same object. Calling <b>QueryInterface</b> for <b>IID_IUnknown</b> on each of the pointers and comparing the value of the returned pointers may result in the wrong conclusion. It's possible that both pointers refer to the same object, but that one is a safe reference and the other isn't. If both references are safe references, they can be compared in the usual way. This is only a consideration for MTS objects, because clients should never have access to unsafe references.</p>
<p>
<a href="objctxvc_8t2w.htm"><b>Example</b></a></p>
<p>
<b>See Also</b></p>
<p>
<a href="mtxpg04_3voz.htm">Passing Object References</a></p>
<p>&nbsp; </p></body>
</HTML>

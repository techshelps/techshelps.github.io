<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreatePropertyGroup Method (Visual Basic)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<p>
<a name="asmthcreatepropertygroupvb"></a>CreatePropertyGroup Method</p>
<p>
Creates and returns a reference to a new shared property group. If a property group with the specified name already exists, <b>CreatePropertyGroup</b> returns a reference to the existing group.</p>
<p>
<b>Applies To</b></p>
<p>
<a href="spamrefvb_4g2q.htm"><b>SharedPropertyGroupManager </b>Object</a></p>
<p>
<b>Syntax</b></p>
<pre><b>Set</b> <i>propertygroup</i> = <i>sharedpropertygroupmanager</i>.<b>CreatePropertyGroup</b>(<i>name</i>, <i>dwIsoMode</i>, <i>dwrelmode, fExists</i>)</pre>
<p>
<b>Parameters</b></p>
<p>
<i>propertygroup<br>
</i>An <a href="vipdef01_1yih.htm#asdefobjectvariable">object variable</a> that evaluates to a <b>SharedPropertyGroup</b> object.</p>
<p>
<i>sharedpropertygroupmanager<br>
</i>An object variable that represents the <b>SharedPropertyGroupManager</b> with which to create the shared property group.</p>
<p>
<i>name<br>
</i>A <a href="vipdef01_1yih.htm#asdefstringexpression">string expression</a> that contains the name of the shared property group to create.</p>
<p>
<i>dwIsoMode</i><br>
A <b>Long</b> value that specifies the isolation mode for the properties in the new shared property group. See the table that lists <i>dwIsoMode</i> constants later in this topic. If the value of the <i>fExists</i> parameter<i> </i>is set to <b>True</b> on return from this method, the <i>dwIsoMode</i> value you passed in is ignored and the value returned in this parameter is the isolation mode that was assigned when the property group was created.</p>
<p>
<i>dwRelMode</i><br>
A <b>Long</b> value that specifies the release mode for the properties in the new shared property group. See the table that lists <i>dwRelMode</i> constants later in this topic. If the value of the <i>fExists</i> parameter<i> </i>is set to <b>True</b> on return from this method, the <i>dwRelMode</i> value you passed in is ignored and the value returned in this parameter is the release mode that was assigned when the property group was created.</p>
<p>
<i>fExists<br>
</i>A <b>Boolean</b> value that's set to <b>True</b> on return from this method if the shared property group specified in the <i>name</i> parameter existed prior to this call, and <b>False</b> if the property group was created by this call.</p>
<p>
<b>Settings</b></p>
<p>
The following constants are used in the <i>dwIsoMode</i> parameter to specify the effective isolation mode for a shared property group.</p>
<table cellspacing=5 cols=4>
<tr valign=top>
<th align=left width=21%>Constant</th>
<th align=left width=16%>Value</th>
<th align=left colspan=2 width=63%>Description</th>
</tr>
<tr valign=top>
<td colspan=3 width=95%></td>
</tr>
<tr valign=top>
<td width=21%><b>LockSetGet</b></td>
<td width=16%>0</td>
<td colspan=2 width=63%>Default. Locks a property during a <a href="spamrefvb_6lpe.htm"><b>Value</b></a> call, assuring that every get or set operation on a <a href="vipdef01_1yih.htm#asdefsharedproperty">shared property</a> is <a href="vipdef01_1yih.htm#asdefatomicity">atomic</a>.<p>
This ensures that two <a href="vipdef01_1yih.htm#asdefclient">clients</a> can't read or write to the same property at the same time, but it doesn't prevent other clients from concurrently accessing other properties in the same group.</p>
</td>
</tr>
<tr valign=top>
<td width=21%><b>LockMethod</b></td>
<td width=16%>1</td>
<td colspan=2 width=63%>Locks all of the properties in the shared property group for exclusive use by the <a href="vipdef01_1yih.htm#asdefcaller">caller</a> as long as the caller's current method is executing.<p>
This is the appropriate mode to use when there are interdependencies among properties, or in cases where a client may have to update a property immediately after reading it before it can be accessed again.</p>
</td>
</tr>
</table><br>
<p>
<b>Note</b>   When you set the isolation mode to <b>LockMethod</b>, the Shared Property Manager requires access to the calling object's <b>ObjectContext</b>. You can't use this isolation mode to create a shared property group from within an object's constructor or from a non-MTS object because <b>ObjectContext</b> isn't available during object construction and a <a href="vipdef01_1yih.htm#asdefbaseclient">base client</a> doesn't have an <b>ObjectContext</b>.</p>
<p>
The following constants are used in the <i>dwRelMode</i> parameter to specify the effective release mode for a shared property group. </p>
<table cellspacing=5 cols=4>
<tr valign=top>
<th align=left width=20%>Constant</th>
<th align=left width=16%>Value</th>
<th align=left colspan=2 width=64%>Description</th>
</tr>
<tr valign=top>
<td colspan=3 width=95%></td>
</tr>
<tr valign=top>
<td width=20%><b>Standard</b></td>
<td width=16%>0</td>
<td colspan=2 width=64%>When all clients have released their references on the property group, the property group is automatically destroyed.</td>
</tr>
<tr valign=top>
<td width=20%><b>Process</b></td>
<td width=16%>1</td>
<td colspan=2 width=64%>The property group isn't destroyed until the process in which it was created has terminated. You must still release all <b>SharedPropertyGroup</b> objects by setting them to <b>Nothing</b>.</td>
</tr>
</table><br>
<p>
<b>Remarks</b></p>
<p>
The <b>CreatePropertyGroup</b> method sets the value in <i>fExists</i> to <b>True</b> if the property group it returns existed prior to the current call. This occurs when another object in the same process has already called <b>CreatePropertyGroup</b> with the same property group name. The <b>CreatePropertyGroup</b> method sets the value in <i>fExists</i> to <b>False</b> if the returned property group was created by the current call.</p>
<p>
The isolation mode and release mode are assigned when the property group is originally created and aren't changed if a subsequent call passes different values in these parameters. The caller should always check the value of <i>fExists</i> on return from this method. If <i>fExists</i> is set to <b>True</b>, the caller should check the values returned in <i>dwIsoMode </i>and<i> dwRelMode</i> to determine the isolation and release modes in effect for the property group. For example:</p>
<pre><code>Dim isolationMode As Long
Dim releaseMode As Long

Set isolationMode = LockMethod
Set releaseMode = Process
Set spmGroup = spmMgr.CreatePropertyGroup _
    ("Counter", isolationMode, releaseMode, fExists)

If fExists Then
    If isolationMode &lt;&gt; LockMethod _
        Or releaseMode &lt;&gt; Process Then
        ' Do something appropriate.
    EndIf
EndIf</code></pre>
<p>
You can pass the constants, <b>LockGetSet </b>or <b>LockMethod </b>as the <i>dwIsoMode </i>argument, and <b>Standard</b> or <b>Process</b> as the <i>dwRelMode </i>argument, directly to the <b>CreatePropertyGroup</b> method. However, when you pass a constant instead of a variable, the <b>CreatePropertyGroup </b>method can't return the isolation and release modes currently in effect if the requested property group already exists.</p>
<p>
<b>Note</b>   An object should never attempt to pass a shared property group reference to another object. If the reference is passed outside of the object that acquired it, it's no longer a valid reference.</p>
<p>
<a href="spamrefvb_2l88.htm"><b>Example</b></a></p>
<p>
<b>See Also</b></p>
<p>
<a href="mtxpg08vb_4hnp.htm">Sharing State</a>, <a href="objctxvc_24tf.htm"><b>IObjectContext</b> Interface</a>, <a href="spamrefvb_9q76.htm"><b>SharedPropertyGroup</b> Object</a></p>
<p>&nbsp; </p></body>
</HTML>

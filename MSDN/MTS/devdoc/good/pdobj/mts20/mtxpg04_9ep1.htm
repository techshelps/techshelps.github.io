<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Determining Transaction Outcome</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="asdeterminingtransactionoutcome"></a>Determining Transaction Outcome</h1>
<p>
This section discusses how applications determine whether a transaction will commit or abort.</p>
<p>
First, it is important to understand that the MTS objects involved in a transaction do not need to know the transaction outcome. All objects involved in a transaction are automatically deactivated. Deactivation causes the objects to lose any state that they acquired during the transaction. Consequently, their behavior is not affected by the outcome of the transaction.</p>
<p>
Each object can participate in determining the outcome of a transaction. Objects call <b>SetComplete</b>, <b>SetAbort</b>, <b>EnableCommit</b>, and <b>DisableCommit,</b> based on the desired component behavior. For example, an object would typically call <b>SetAbort</b> after receiving an error from a database operation, on a method call to another object, or due to a violation of a business rule such as an overdrawn account.</p>
<p>
The client of the transaction determines its success or failure (commit or abort) based on values returned from the method call that caused the transaction to complete. The client can be either a base client or another MTS object that exists outside the transaction. The client must know which methods cause transactions to complete and how the method output values can be used to determine success (commit) or failure (abort).</p>
<p>
An object method that intends to commit a transaction typically returns an HRESULT value of S_OK after calling <b>SetComplete</b>. On return, MTS automatically completes the transaction. If the transaction commits, the S_OK value is returned to the client. If it aborts, the HRESULT value is changed to CONTEXT_E_ABORTED. The client can use these two values to determine the outcome.</p>
<p>
An object method typically notifies its client that it has forced the transaction to abort by calling <b>SetAbort</b> in one of two ways:
<ul>
<li>
Return S_OK and use an output parameter to indicate the failure.</li>
<li>
Return an HRESULT error code. Different codes could be used to distinguish different causes, or the generic CONTEXT_E_ABORTED error could be used.</li>
</ul>
<p>
For example, the Sample Bank application uses an output parameter to indicate failure:</p>
<pre><code>Public Function Perform(lngPrimeAccount As Long, _
   lngSecondAccount As Long, lngAmount As Long, _
   strTranType As String, ByRef strResult As String) _
   As Long

' get our object context
Dim ctxObject As ObjectContext
Set ctxObject = GetObjectContext()
 
On Error GoTo ErrorHandler
 
' check for security
If (lngAmount &gt; 500 Or lngAmount &lt; -500) Then
    If Not ctxObject.IsCallerInRole("Managers") Then
        Err.Raise Number:=ERROR_NUMBER, _
        Description:="Need 'Managers' role " + _
           "for amounts over $500"
    End If
End If
.
.
.
ctxObject.SetComplete       ' we are finished and happy
Perform = 0
Exit Function

ErrorHandler:

ctxObject.SetAbort           ' we are unhappy
strResult = Err.Description  ' return the error message
Perform = -1           ' indicate that an error occured

End Function</code></pre>
<p>
It is also important to note that there are failure scenarios where the client cannot determine the transaction outcome. This situation results, for example, when a call failure occurs due to a transport error such as RPC_E_CONNECTION_TERMINATED). In such cases, it is necessary to use an application-defined protocol to determine the transaction outcome.</p>
<p>
On <a href="vipdef01_1yih.htm#asdefcluster">clustered</a> servers, MTS will not automatically reconnect to MS DTC in the event of a failover. Not enough information exists about the transaction composition and state to determine the appropriate course of action. Retries remain the responsibility of the client application. The client cannot differentiate an error caused by failover from other errors.</p>
<p>
Resource managers are guaranteed to get transaction outcomes as part of the <a href="vipdef01_1yih.htm#asdeftwophasecommit">two-phase commit</a> protocol managed by the Microsoft Distributed Transaction Coordinator. This feature allows resource managers to manage locks and to determine whether it is necessary to make state changes permanent or to discard them.</p>
<p>&nbsp; </p></body>
</HTML>
